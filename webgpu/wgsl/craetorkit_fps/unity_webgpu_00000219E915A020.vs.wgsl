type Arr = array<u32, 1u>;

struct x_HistogramBuffer_type {
  value : Arr,
}

type RTArr = array<x_HistogramBuffer_type>;

struct x_HistogramBuffer {
  x_HistogramBuffer_buf : RTArr,
}

struct VGlobals {
  x_Params : vec4<f32>,
  x_ScaleOffsetRes : vec4<f32>,
}

@group(0) @binding(0) var<storage, read> x_27 : x_HistogramBuffer;

@group(1) @binding(0) var<uniform> x_2546 : VGlobals;

var<private> vs_TEXCOORD2 : f32;

var<private> in_POSITION0 : vec3<f32>;

var<private> vs_TEXCOORD0 : vec2<f32>;

var<private> vs_TEXCOORD1 : f32;

var<private> gl_Position : vec4<f32>;

fn main_1() {
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu136 : u32;
  var u_xlat0 : f32;
  var u_xlatu68 : u32;
  var u_xlat68 : vec2<f32>;
  var u_xlat136 : f32;
  var u_xlatu204 : u32;
  var u_xlat204 : f32;
  var u_xlat1 : vec2<f32>;
  var u_xlat69 : vec2<f32>;
  var u_xlatu137 : u32;
  var u_xlat137 : f32;
  var u_xlat205 : f32;
  var u_xlatu2 : u32;
  var u_xlat2 : vec3<f32>;
  var u_xlatu138 : u32;
  var u_xlat70 : vec3<f32>;
  var u_xlatu3 : u32;
  var u_xlat3 : vec4<f32>;
  var u_xlatu139 : u32;
  var u_xlat71 : vec3<f32>;
  var u_xlatu4 : u32;
  var u_xlat4 : vec3<f32>;
  var u_xlatu140 : u32;
  var u_xlat72 : vec3<f32>;
  var u_xlatu5 : u32;
  var u_xlat5 : vec3<f32>;
  var u_xlatu141 : u32;
  var u_xlat73 : vec3<f32>;
  var u_xlatu6 : u32;
  var u_xlat6 : vec3<f32>;
  var u_xlatu142 : u32;
  var u_xlat74 : vec3<f32>;
  var u_xlatu7 : u32;
  var u_xlat7 : vec3<f32>;
  var u_xlatu143 : u32;
  var u_xlat75 : vec3<f32>;
  var u_xlatu8 : u32;
  var u_xlat8 : vec3<f32>;
  var u_xlatu144 : u32;
  var u_xlat76 : vec3<f32>;
  var u_xlatu9 : u32;
  var u_xlat9 : vec3<f32>;
  var u_xlatu145 : u32;
  var u_xlat77 : vec3<f32>;
  var u_xlatu10 : u32;
  var u_xlat10 : vec3<f32>;
  var u_xlatu146 : u32;
  var u_xlat78 : vec3<f32>;
  var u_xlatu11 : u32;
  var u_xlat11 : vec3<f32>;
  var u_xlatu147 : u32;
  var u_xlat79 : vec3<f32>;
  var u_xlatu12 : u32;
  var u_xlat12 : vec3<f32>;
  var u_xlatu148 : u32;
  var u_xlat80 : vec3<f32>;
  var u_xlatu13 : u32;
  var u_xlat13 : vec3<f32>;
  var u_xlatu149 : u32;
  var u_xlat81 : vec3<f32>;
  var u_xlatu14 : u32;
  var u_xlat14 : vec3<f32>;
  var u_xlatu150 : u32;
  var u_xlat82 : vec3<f32>;
  var u_xlatu15 : u32;
  var u_xlat15 : vec3<f32>;
  var u_xlatu151 : u32;
  var u_xlat83 : vec3<f32>;
  var u_xlatu16 : u32;
  var u_xlat16 : vec3<f32>;
  var u_xlatu152 : u32;
  var u_xlat84 : vec3<f32>;
  var u_xlatu17 : u32;
  var u_xlat17 : vec3<f32>;
  var u_xlatu153 : u32;
  var u_xlat85 : vec3<f32>;
  var u_xlatu18 : u32;
  var u_xlat18 : vec3<f32>;
  var u_xlatu154 : u32;
  var u_xlat86 : vec3<f32>;
  var u_xlatu19 : u32;
  var u_xlat19 : vec3<f32>;
  var u_xlatu155 : u32;
  var u_xlat87 : vec3<f32>;
  var u_xlatu20 : u32;
  var u_xlat20 : vec3<f32>;
  var u_xlatu156 : u32;
  var u_xlat88 : vec3<f32>;
  var u_xlatu21 : u32;
  var u_xlat21 : vec3<f32>;
  var u_xlatu157 : u32;
  var u_xlat89 : vec3<f32>;
  var u_xlatu22 : u32;
  var u_xlat22 : vec3<f32>;
  var u_xlatu158 : u32;
  var u_xlat90 : vec3<f32>;
  var u_xlatu23 : u32;
  var u_xlat23 : vec3<f32>;
  var u_xlatu159 : u32;
  var u_xlat91 : vec3<f32>;
  var u_xlatu24 : u32;
  var u_xlat24 : vec3<f32>;
  var u_xlatu160 : u32;
  var u_xlat92 : vec3<f32>;
  var u_xlatu25 : u32;
  var u_xlat25 : vec3<f32>;
  var u_xlatu161 : u32;
  var u_xlat93 : vec3<f32>;
  var u_xlatu26 : u32;
  var u_xlat26 : vec3<f32>;
  var u_xlatu162 : u32;
  var u_xlat94 : vec3<f32>;
  var u_xlatu27 : u32;
  var u_xlat27 : vec3<f32>;
  var u_xlatu163 : u32;
  var u_xlat95 : vec3<f32>;
  var u_xlatu28 : u32;
  var u_xlat28 : vec3<f32>;
  var u_xlatu164 : u32;
  var u_xlat96 : vec3<f32>;
  var u_xlatu29 : u32;
  var u_xlat29 : vec3<f32>;
  var u_xlatu165 : u32;
  var u_xlat97 : vec3<f32>;
  var u_xlatu30 : u32;
  var u_xlat30 : vec3<f32>;
  var u_xlatu166 : u32;
  var u_xlat98 : vec3<f32>;
  var u_xlatu31 : u32;
  var u_xlat31 : vec3<f32>;
  var u_xlatu167 : u32;
  var u_xlat99 : vec3<f32>;
  var u_xlatu32 : u32;
  var u_xlat32 : vec3<f32>;
  var u_xlatu168 : u32;
  var u_xlat100 : vec3<f32>;
  var u_xlatu33 : u32;
  var u_xlat33 : vec3<f32>;
  var u_xlatu169 : u32;
  var u_xlat101 : vec3<f32>;
  var u_xlatu34 : u32;
  var u_xlat34 : vec3<f32>;
  var u_xlatu170 : u32;
  var u_xlat102 : vec3<f32>;
  var u_xlatu35 : u32;
  var u_xlat35 : vec3<f32>;
  var u_xlatu171 : u32;
  var u_xlat103 : vec3<f32>;
  var u_xlatu36 : u32;
  var u_xlat36 : vec3<f32>;
  var u_xlatu172 : u32;
  var u_xlat104 : vec3<f32>;
  var u_xlatu37 : u32;
  var u_xlat37 : vec3<f32>;
  var u_xlatu173 : u32;
  var u_xlat105 : vec3<f32>;
  var u_xlatu38 : u32;
  var u_xlat38 : vec3<f32>;
  var u_xlatu174 : u32;
  var u_xlat106 : vec3<f32>;
  var u_xlatu39 : u32;
  var u_xlat39 : vec3<f32>;
  var u_xlatu175 : u32;
  var u_xlat107 : vec3<f32>;
  var u_xlatu40 : u32;
  var u_xlat40 : vec3<f32>;
  var u_xlatu176 : u32;
  var u_xlat108 : vec3<f32>;
  var u_xlatu41 : u32;
  var u_xlat41 : vec3<f32>;
  var u_xlatu177 : u32;
  var u_xlat109 : vec3<f32>;
  var u_xlatu42 : u32;
  var u_xlat42 : vec3<f32>;
  var u_xlatu178 : u32;
  var u_xlat110 : vec3<f32>;
  var u_xlatu43 : u32;
  var u_xlat43 : vec3<f32>;
  var u_xlatu179 : u32;
  var u_xlat111 : vec3<f32>;
  var u_xlatu44 : u32;
  var u_xlat44 : vec3<f32>;
  var u_xlatu180 : u32;
  var u_xlat112 : vec3<f32>;
  var u_xlatu45 : u32;
  var u_xlat45 : vec3<f32>;
  var u_xlatu181 : u32;
  var u_xlat113 : vec3<f32>;
  var u_xlatu46 : u32;
  var u_xlat46 : vec3<f32>;
  var u_xlatu182 : u32;
  var u_xlat114 : vec3<f32>;
  var u_xlatu47 : u32;
  var u_xlat47 : vec3<f32>;
  var u_xlatu183 : u32;
  var u_xlat115 : vec3<f32>;
  var u_xlatu48 : u32;
  var u_xlat48 : vec3<f32>;
  var u_xlatu184 : u32;
  var u_xlat116 : vec3<f32>;
  var u_xlatu49 : u32;
  var u_xlat49 : vec3<f32>;
  var u_xlatu185 : u32;
  var u_xlat117 : vec3<f32>;
  var u_xlatu50 : u32;
  var u_xlat50 : vec3<f32>;
  var u_xlatu186 : u32;
  var u_xlat118 : vec3<f32>;
  var u_xlatu51 : u32;
  var u_xlat51 : vec3<f32>;
  var u_xlatu187 : u32;
  var u_xlat119 : vec3<f32>;
  var u_xlatu52 : u32;
  var u_xlat52 : vec3<f32>;
  var u_xlatu188 : u32;
  var u_xlat120 : vec3<f32>;
  var u_xlatu53 : u32;
  var u_xlat53 : vec3<f32>;
  var u_xlatu189 : u32;
  var u_xlat121 : vec3<f32>;
  var u_xlatu54 : u32;
  var u_xlat54 : vec3<f32>;
  var u_xlatu190 : u32;
  var u_xlat122 : vec3<f32>;
  var u_xlatu55 : u32;
  var u_xlat55 : vec3<f32>;
  var u_xlatu191 : u32;
  var u_xlat123 : vec3<f32>;
  var u_xlatu56 : u32;
  var u_xlat56 : vec3<f32>;
  var u_xlatu192 : u32;
  var u_xlat124 : vec3<f32>;
  var u_xlatu57 : u32;
  var u_xlat57 : vec3<f32>;
  var u_xlatu193 : u32;
  var u_xlat125 : vec3<f32>;
  var u_xlatu58 : u32;
  var u_xlat58 : vec3<f32>;
  var u_xlatu194 : u32;
  var u_xlat126 : vec3<f32>;
  var u_xlatu59 : u32;
  var u_xlat59 : vec3<f32>;
  var u_xlatu195 : u32;
  var u_xlat127 : vec3<f32>;
  var u_xlatu60 : u32;
  var u_xlat60 : vec3<f32>;
  var u_xlatu196 : u32;
  var u_xlat128 : vec3<f32>;
  var u_xlatu61 : u32;
  var u_xlat61 : vec3<f32>;
  var u_xlatu197 : u32;
  var u_xlat129 : vec3<f32>;
  var u_xlatu62 : u32;
  var u_xlat62 : vec3<f32>;
  var u_xlatu198 : u32;
  var u_xlat130 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlat63 : vec3<f32>;
  var u_xlatu199 : u32;
  var u_xlat131 : vec3<f32>;
  var u_xlatu64 : u32;
  var u_xlat64 : f32;
  var u_xlat132 : f32;
  var u_xlat200 : f32;
  var u_xlat65 : vec4<f32>;
  var u_xlat66 : vec2<f32>;
  var u_xlat67 : vec4<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  u_xlatu0 = 0u;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_16 : u32 = u_xlatu_loop_1;
    if ((x_16 < 128u)) {
    } else {
      break;
    }
    let x_30 : u32 = u_xlatu_loop_1;
    let x_33 : u32 = x_27.x_HistogramBuffer_buf[x_30].value[0i];
    u_xlatu136 = x_33;
    let x_34 : u32 = u_xlatu136;
    let x_35 : u32 = u_xlatu0;
    u_xlatu0 = max(x_34, x_35);

    continuing {
      let x_37 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_37 + bitcast<u32>(1i));
    }
  }
  let x_43 : u32 = u_xlatu0;
  u_xlat0 = f32(x_43);
  let x_46 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_46);
  let x_50 : u32 = x_27.x_HistogramBuffer_buf[0i].value[0i];
  u_xlatu68 = x_50;
  let x_54 : u32 = u_xlatu68;
  u_xlat68.x = f32(x_54);
  let x_58 : f32 = u_xlat0;
  let x_60 : f32 = u_xlat68.x;
  u_xlat136 = (x_58 * x_60);
  let x_64 : u32 = x_27.x_HistogramBuffer_buf[1i].value[0i];
  u_xlatu204 = x_64;
  let x_66 : u32 = u_xlatu204;
  u_xlat204 = f32(x_66);
  let x_69 : f32 = u_xlat0;
  let x_70 : f32 = u_xlat204;
  u_xlat1.x = (x_69 * x_70);
  let x_75 : f32 = u_xlat68.x;
  let x_76 : f32 = u_xlat0;
  let x_79 : f32 = u_xlat1.x;
  u_xlat69.x = ((x_75 * x_76) + x_79);
  let x_85 : u32 = x_27.x_HistogramBuffer_buf[2i].value[0i];
  u_xlatu137 = x_85;
  let x_87 : u32 = u_xlatu137;
  u_xlat137 = f32(x_87);
  let x_90 : f32 = u_xlat0;
  let x_91 : f32 = u_xlat137;
  u_xlat205 = (x_90 * x_91);
  let x_93 : f32 = u_xlat137;
  let x_94 : f32 = u_xlat0;
  let x_97 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_93 * x_94) + x_97);
  let x_103 : u32 = x_27.x_HistogramBuffer_buf[3i].value[0i];
  u_xlatu2 = x_103;
  let x_107 : u32 = u_xlatu2;
  u_xlat2.x = f32(x_107);
  let x_111 : f32 = u_xlat2.x;
  let x_112 : f32 = u_xlat0;
  let x_115 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_111 * x_112) + x_115);
  let x_121 : u32 = x_27.x_HistogramBuffer_buf[4i].value[0i];
  u_xlatu138 = x_121;
  let x_122 : u32 = u_xlatu138;
  u_xlat2.z = f32(x_122);
  let x_127 : f32 = u_xlat0;
  let x_129 : vec3<f32> = u_xlat2;
  let x_131 : vec2<f32> = (vec2<f32>(x_127, x_127) * vec2<f32>(x_129.x, x_129.z));
  let x_132 : vec3<f32> = u_xlat70;
  u_xlat70 = vec3<f32>(x_131.x, x_132.y, x_131.y);
  let x_135 : f32 = u_xlat2.z;
  let x_136 : f32 = u_xlat0;
  let x_139 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_135 * x_136) + x_139);
  let x_145 : u32 = x_27.x_HistogramBuffer_buf[5i].value[0i];
  u_xlatu3 = x_145;
  let x_149 : u32 = u_xlatu3;
  u_xlat3.x = f32(x_149);
  let x_153 : f32 = u_xlat3.x;
  let x_154 : f32 = u_xlat0;
  let x_157 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_153 * x_154) + x_157);
  let x_163 : u32 = x_27.x_HistogramBuffer_buf[6i].value[0i];
  u_xlatu139 = x_163;
  let x_164 : u32 = u_xlatu139;
  u_xlat3.z = f32(x_164);
  let x_168 : f32 = u_xlat0;
  let x_170 : vec4<f32> = u_xlat3;
  let x_172 : vec2<f32> = (vec2<f32>(x_168, x_168) * vec2<f32>(x_170.x, x_170.z));
  let x_173 : vec3<f32> = u_xlat71;
  u_xlat71 = vec3<f32>(x_172.x, x_173.y, x_172.y);
  let x_176 : f32 = u_xlat3.z;
  let x_177 : f32 = u_xlat0;
  let x_180 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_176 * x_177) + x_180);
  let x_186 : u32 = x_27.x_HistogramBuffer_buf[7i].value[0i];
  u_xlatu4 = x_186;
  let x_188 : u32 = u_xlatu4;
  u_xlat4.x = f32(x_188);
  let x_192 : f32 = u_xlat4.x;
  let x_193 : f32 = u_xlat0;
  let x_196 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_192 * x_193) + x_196);
  let x_202 : u32 = x_27.x_HistogramBuffer_buf[8i].value[0i];
  u_xlatu140 = x_202;
  let x_203 : u32 = u_xlatu140;
  u_xlat4.z = f32(x_203);
  let x_207 : f32 = u_xlat0;
  let x_209 : vec3<f32> = u_xlat4;
  let x_211 : vec2<f32> = (vec2<f32>(x_207, x_207) * vec2<f32>(x_209.x, x_209.z));
  let x_212 : vec3<f32> = u_xlat72;
  u_xlat72 = vec3<f32>(x_211.x, x_212.y, x_211.y);
  let x_215 : f32 = u_xlat4.z;
  let x_216 : f32 = u_xlat0;
  let x_219 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_215 * x_216) + x_219);
  let x_225 : u32 = x_27.x_HistogramBuffer_buf[9i].value[0i];
  u_xlatu5 = x_225;
  let x_227 : u32 = u_xlatu5;
  u_xlat5.x = f32(x_227);
  let x_231 : f32 = u_xlat5.x;
  let x_232 : f32 = u_xlat0;
  let x_235 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_231 * x_232) + x_235);
  let x_241 : u32 = x_27.x_HistogramBuffer_buf[10i].value[0i];
  u_xlatu141 = x_241;
  let x_242 : u32 = u_xlatu141;
  u_xlat5.z = f32(x_242);
  let x_246 : f32 = u_xlat0;
  let x_248 : vec3<f32> = u_xlat5;
  let x_250 : vec2<f32> = (vec2<f32>(x_246, x_246) * vec2<f32>(x_248.x, x_248.z));
  let x_251 : vec3<f32> = u_xlat73;
  u_xlat73 = vec3<f32>(x_250.x, x_251.y, x_250.y);
  let x_254 : f32 = u_xlat5.z;
  let x_255 : f32 = u_xlat0;
  let x_258 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_254 * x_255) + x_258);
  let x_264 : u32 = x_27.x_HistogramBuffer_buf[11i].value[0i];
  u_xlatu6 = x_264;
  let x_266 : u32 = u_xlatu6;
  u_xlat6.x = f32(x_266);
  let x_270 : f32 = u_xlat6.x;
  let x_271 : f32 = u_xlat0;
  let x_274 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_270 * x_271) + x_274);
  let x_280 : u32 = x_27.x_HistogramBuffer_buf[12i].value[0i];
  u_xlatu142 = x_280;
  let x_281 : u32 = u_xlatu142;
  u_xlat6.z = f32(x_281);
  let x_285 : f32 = u_xlat0;
  let x_287 : vec3<f32> = u_xlat6;
  let x_289 : vec2<f32> = (vec2<f32>(x_285, x_285) * vec2<f32>(x_287.x, x_287.z));
  let x_290 : vec3<f32> = u_xlat74;
  u_xlat74 = vec3<f32>(x_289.x, x_290.y, x_289.y);
  let x_293 : f32 = u_xlat6.z;
  let x_294 : f32 = u_xlat0;
  let x_297 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_293 * x_294) + x_297);
  let x_303 : u32 = x_27.x_HistogramBuffer_buf[13i].value[0i];
  u_xlatu7 = x_303;
  let x_305 : u32 = u_xlatu7;
  u_xlat7.x = f32(x_305);
  let x_309 : f32 = u_xlat7.x;
  let x_310 : f32 = u_xlat0;
  let x_313 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_309 * x_310) + x_313);
  let x_319 : u32 = x_27.x_HistogramBuffer_buf[14i].value[0i];
  u_xlatu143 = x_319;
  let x_320 : u32 = u_xlatu143;
  u_xlat7.z = f32(x_320);
  let x_324 : f32 = u_xlat0;
  let x_326 : vec3<f32> = u_xlat7;
  let x_328 : vec2<f32> = (vec2<f32>(x_324, x_324) * vec2<f32>(x_326.x, x_326.z));
  let x_329 : vec3<f32> = u_xlat75;
  u_xlat75 = vec3<f32>(x_328.x, x_329.y, x_328.y);
  let x_332 : f32 = u_xlat7.z;
  let x_333 : f32 = u_xlat0;
  let x_336 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_332 * x_333) + x_336);
  let x_342 : u32 = x_27.x_HistogramBuffer_buf[15i].value[0i];
  u_xlatu8 = x_342;
  let x_344 : u32 = u_xlatu8;
  u_xlat8.x = f32(x_344);
  let x_348 : f32 = u_xlat8.x;
  let x_349 : f32 = u_xlat0;
  let x_352 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_348 * x_349) + x_352);
  let x_358 : u32 = x_27.x_HistogramBuffer_buf[16i].value[0i];
  u_xlatu144 = x_358;
  let x_359 : u32 = u_xlatu144;
  u_xlat8.z = f32(x_359);
  let x_363 : f32 = u_xlat0;
  let x_365 : vec3<f32> = u_xlat8;
  let x_367 : vec2<f32> = (vec2<f32>(x_363, x_363) * vec2<f32>(x_365.x, x_365.z));
  let x_368 : vec3<f32> = u_xlat76;
  u_xlat76 = vec3<f32>(x_367.x, x_368.y, x_367.y);
  let x_371 : f32 = u_xlat8.z;
  let x_372 : f32 = u_xlat0;
  let x_375 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_371 * x_372) + x_375);
  let x_381 : u32 = x_27.x_HistogramBuffer_buf[17i].value[0i];
  u_xlatu9 = x_381;
  let x_383 : u32 = u_xlatu9;
  u_xlat9.x = f32(x_383);
  let x_387 : f32 = u_xlat9.x;
  let x_388 : f32 = u_xlat0;
  let x_391 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_387 * x_388) + x_391);
  let x_397 : u32 = x_27.x_HistogramBuffer_buf[18i].value[0i];
  u_xlatu145 = x_397;
  let x_398 : u32 = u_xlatu145;
  u_xlat9.z = f32(x_398);
  let x_402 : f32 = u_xlat0;
  let x_404 : vec3<f32> = u_xlat9;
  let x_406 : vec2<f32> = (vec2<f32>(x_402, x_402) * vec2<f32>(x_404.x, x_404.z));
  let x_407 : vec3<f32> = u_xlat77;
  u_xlat77 = vec3<f32>(x_406.x, x_407.y, x_406.y);
  let x_410 : f32 = u_xlat9.z;
  let x_411 : f32 = u_xlat0;
  let x_414 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_410 * x_411) + x_414);
  let x_420 : u32 = x_27.x_HistogramBuffer_buf[19i].value[0i];
  u_xlatu10 = x_420;
  let x_422 : u32 = u_xlatu10;
  u_xlat10.x = f32(x_422);
  let x_426 : f32 = u_xlat10.x;
  let x_427 : f32 = u_xlat0;
  let x_430 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_426 * x_427) + x_430);
  let x_436 : u32 = x_27.x_HistogramBuffer_buf[20i].value[0i];
  u_xlatu146 = x_436;
  let x_437 : u32 = u_xlatu146;
  u_xlat10.z = f32(x_437);
  let x_441 : f32 = u_xlat0;
  let x_443 : vec3<f32> = u_xlat10;
  let x_445 : vec2<f32> = (vec2<f32>(x_441, x_441) * vec2<f32>(x_443.x, x_443.z));
  let x_446 : vec3<f32> = u_xlat78;
  u_xlat78 = vec3<f32>(x_445.x, x_446.y, x_445.y);
  let x_449 : f32 = u_xlat10.z;
  let x_450 : f32 = u_xlat0;
  let x_453 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_449 * x_450) + x_453);
  let x_459 : u32 = x_27.x_HistogramBuffer_buf[21i].value[0i];
  u_xlatu11 = x_459;
  let x_461 : u32 = u_xlatu11;
  u_xlat11.x = f32(x_461);
  let x_465 : f32 = u_xlat11.x;
  let x_466 : f32 = u_xlat0;
  let x_469 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_465 * x_466) + x_469);
  let x_475 : u32 = x_27.x_HistogramBuffer_buf[22i].value[0i];
  u_xlatu147 = x_475;
  let x_476 : u32 = u_xlatu147;
  u_xlat11.z = f32(x_476);
  let x_480 : f32 = u_xlat0;
  let x_482 : vec3<f32> = u_xlat11;
  let x_484 : vec2<f32> = (vec2<f32>(x_480, x_480) * vec2<f32>(x_482.x, x_482.z));
  let x_485 : vec3<f32> = u_xlat79;
  u_xlat79 = vec3<f32>(x_484.x, x_485.y, x_484.y);
  let x_488 : f32 = u_xlat11.z;
  let x_489 : f32 = u_xlat0;
  let x_492 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_488 * x_489) + x_492);
  let x_498 : u32 = x_27.x_HistogramBuffer_buf[23i].value[0i];
  u_xlatu12 = x_498;
  let x_500 : u32 = u_xlatu12;
  u_xlat12.x = f32(x_500);
  let x_504 : f32 = u_xlat12.x;
  let x_505 : f32 = u_xlat0;
  let x_508 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_504 * x_505) + x_508);
  let x_514 : u32 = x_27.x_HistogramBuffer_buf[24i].value[0i];
  u_xlatu148 = x_514;
  let x_515 : u32 = u_xlatu148;
  u_xlat12.z = f32(x_515);
  let x_519 : f32 = u_xlat0;
  let x_521 : vec3<f32> = u_xlat12;
  let x_523 : vec2<f32> = (vec2<f32>(x_519, x_519) * vec2<f32>(x_521.x, x_521.z));
  let x_524 : vec3<f32> = u_xlat80;
  u_xlat80 = vec3<f32>(x_523.x, x_524.y, x_523.y);
  let x_527 : f32 = u_xlat12.z;
  let x_528 : f32 = u_xlat0;
  let x_531 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_527 * x_528) + x_531);
  let x_537 : u32 = x_27.x_HistogramBuffer_buf[25i].value[0i];
  u_xlatu13 = x_537;
  let x_539 : u32 = u_xlatu13;
  u_xlat13.x = f32(x_539);
  let x_543 : f32 = u_xlat13.x;
  let x_544 : f32 = u_xlat0;
  let x_547 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_543 * x_544) + x_547);
  let x_553 : u32 = x_27.x_HistogramBuffer_buf[26i].value[0i];
  u_xlatu149 = x_553;
  let x_554 : u32 = u_xlatu149;
  u_xlat13.z = f32(x_554);
  let x_558 : f32 = u_xlat0;
  let x_560 : vec3<f32> = u_xlat13;
  let x_562 : vec2<f32> = (vec2<f32>(x_558, x_558) * vec2<f32>(x_560.x, x_560.z));
  let x_563 : vec3<f32> = u_xlat81;
  u_xlat81 = vec3<f32>(x_562.x, x_563.y, x_562.y);
  let x_566 : f32 = u_xlat13.z;
  let x_567 : f32 = u_xlat0;
  let x_570 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_566 * x_567) + x_570);
  let x_576 : u32 = x_27.x_HistogramBuffer_buf[27i].value[0i];
  u_xlatu14 = x_576;
  let x_578 : u32 = u_xlatu14;
  u_xlat14.x = f32(x_578);
  let x_582 : f32 = u_xlat14.x;
  let x_583 : f32 = u_xlat0;
  let x_586 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_582 * x_583) + x_586);
  let x_592 : u32 = x_27.x_HistogramBuffer_buf[28i].value[0i];
  u_xlatu150 = x_592;
  let x_593 : u32 = u_xlatu150;
  u_xlat14.z = f32(x_593);
  let x_597 : f32 = u_xlat0;
  let x_599 : vec3<f32> = u_xlat14;
  let x_601 : vec2<f32> = (vec2<f32>(x_597, x_597) * vec2<f32>(x_599.x, x_599.z));
  let x_602 : vec3<f32> = u_xlat82;
  u_xlat82 = vec3<f32>(x_601.x, x_602.y, x_601.y);
  let x_605 : f32 = u_xlat14.z;
  let x_606 : f32 = u_xlat0;
  let x_609 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_605 * x_606) + x_609);
  let x_615 : u32 = x_27.x_HistogramBuffer_buf[29i].value[0i];
  u_xlatu15 = x_615;
  let x_617 : u32 = u_xlatu15;
  u_xlat15.x = f32(x_617);
  let x_621 : f32 = u_xlat15.x;
  let x_622 : f32 = u_xlat0;
  let x_625 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_621 * x_622) + x_625);
  let x_631 : u32 = x_27.x_HistogramBuffer_buf[30i].value[0i];
  u_xlatu151 = x_631;
  let x_632 : u32 = u_xlatu151;
  u_xlat15.z = f32(x_632);
  let x_636 : f32 = u_xlat0;
  let x_638 : vec3<f32> = u_xlat15;
  let x_640 : vec2<f32> = (vec2<f32>(x_636, x_636) * vec2<f32>(x_638.x, x_638.z));
  let x_641 : vec3<f32> = u_xlat83;
  u_xlat83 = vec3<f32>(x_640.x, x_641.y, x_640.y);
  let x_644 : f32 = u_xlat15.z;
  let x_645 : f32 = u_xlat0;
  let x_648 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_644 * x_645) + x_648);
  let x_654 : u32 = x_27.x_HistogramBuffer_buf[31i].value[0i];
  u_xlatu16 = x_654;
  let x_656 : u32 = u_xlatu16;
  u_xlat16.x = f32(x_656);
  let x_660 : f32 = u_xlat16.x;
  let x_661 : f32 = u_xlat0;
  let x_664 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_660 * x_661) + x_664);
  let x_670 : u32 = x_27.x_HistogramBuffer_buf[32i].value[0i];
  u_xlatu152 = x_670;
  let x_671 : u32 = u_xlatu152;
  u_xlat16.z = f32(x_671);
  let x_675 : f32 = u_xlat0;
  let x_677 : vec3<f32> = u_xlat16;
  let x_679 : vec2<f32> = (vec2<f32>(x_675, x_675) * vec2<f32>(x_677.x, x_677.z));
  let x_680 : vec3<f32> = u_xlat84;
  u_xlat84 = vec3<f32>(x_679.x, x_680.y, x_679.y);
  let x_683 : f32 = u_xlat16.z;
  let x_684 : f32 = u_xlat0;
  let x_687 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_683 * x_684) + x_687);
  let x_693 : u32 = x_27.x_HistogramBuffer_buf[33i].value[0i];
  u_xlatu17 = x_693;
  let x_695 : u32 = u_xlatu17;
  u_xlat17.x = f32(x_695);
  let x_699 : f32 = u_xlat17.x;
  let x_700 : f32 = u_xlat0;
  let x_703 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_699 * x_700) + x_703);
  let x_709 : u32 = x_27.x_HistogramBuffer_buf[34i].value[0i];
  u_xlatu153 = x_709;
  let x_710 : u32 = u_xlatu153;
  u_xlat17.z = f32(x_710);
  let x_714 : f32 = u_xlat0;
  let x_716 : vec3<f32> = u_xlat17;
  let x_718 : vec2<f32> = (vec2<f32>(x_714, x_714) * vec2<f32>(x_716.x, x_716.z));
  let x_719 : vec3<f32> = u_xlat85;
  u_xlat85 = vec3<f32>(x_718.x, x_719.y, x_718.y);
  let x_722 : f32 = u_xlat17.z;
  let x_723 : f32 = u_xlat0;
  let x_726 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_722 * x_723) + x_726);
  let x_732 : u32 = x_27.x_HistogramBuffer_buf[35i].value[0i];
  u_xlatu18 = x_732;
  let x_734 : u32 = u_xlatu18;
  u_xlat18.x = f32(x_734);
  let x_738 : f32 = u_xlat18.x;
  let x_739 : f32 = u_xlat0;
  let x_742 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_738 * x_739) + x_742);
  let x_748 : u32 = x_27.x_HistogramBuffer_buf[36i].value[0i];
  u_xlatu154 = x_748;
  let x_749 : u32 = u_xlatu154;
  u_xlat18.z = f32(x_749);
  let x_753 : f32 = u_xlat0;
  let x_755 : vec3<f32> = u_xlat18;
  let x_757 : vec2<f32> = (vec2<f32>(x_753, x_753) * vec2<f32>(x_755.x, x_755.z));
  let x_758 : vec3<f32> = u_xlat86;
  u_xlat86 = vec3<f32>(x_757.x, x_758.y, x_757.y);
  let x_761 : f32 = u_xlat18.z;
  let x_762 : f32 = u_xlat0;
  let x_765 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_761 * x_762) + x_765);
  let x_771 : u32 = x_27.x_HistogramBuffer_buf[37i].value[0i];
  u_xlatu19 = x_771;
  let x_773 : u32 = u_xlatu19;
  u_xlat19.x = f32(x_773);
  let x_777 : f32 = u_xlat19.x;
  let x_778 : f32 = u_xlat0;
  let x_781 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_777 * x_778) + x_781);
  let x_787 : u32 = x_27.x_HistogramBuffer_buf[38i].value[0i];
  u_xlatu155 = x_787;
  let x_788 : u32 = u_xlatu155;
  u_xlat19.z = f32(x_788);
  let x_792 : f32 = u_xlat0;
  let x_794 : vec3<f32> = u_xlat19;
  let x_796 : vec2<f32> = (vec2<f32>(x_792, x_792) * vec2<f32>(x_794.x, x_794.z));
  let x_797 : vec3<f32> = u_xlat87;
  u_xlat87 = vec3<f32>(x_796.x, x_797.y, x_796.y);
  let x_800 : f32 = u_xlat19.z;
  let x_801 : f32 = u_xlat0;
  let x_804 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_800 * x_801) + x_804);
  let x_810 : u32 = x_27.x_HistogramBuffer_buf[39i].value[0i];
  u_xlatu20 = x_810;
  let x_812 : u32 = u_xlatu20;
  u_xlat20.x = f32(x_812);
  let x_816 : f32 = u_xlat20.x;
  let x_817 : f32 = u_xlat0;
  let x_820 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_816 * x_817) + x_820);
  let x_826 : u32 = x_27.x_HistogramBuffer_buf[40i].value[0i];
  u_xlatu156 = x_826;
  let x_827 : u32 = u_xlatu156;
  u_xlat20.z = f32(x_827);
  let x_831 : f32 = u_xlat0;
  let x_833 : vec3<f32> = u_xlat20;
  let x_835 : vec2<f32> = (vec2<f32>(x_831, x_831) * vec2<f32>(x_833.x, x_833.z));
  let x_836 : vec3<f32> = u_xlat88;
  u_xlat88 = vec3<f32>(x_835.x, x_836.y, x_835.y);
  let x_839 : f32 = u_xlat20.z;
  let x_840 : f32 = u_xlat0;
  let x_843 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_839 * x_840) + x_843);
  let x_849 : u32 = x_27.x_HistogramBuffer_buf[41i].value[0i];
  u_xlatu21 = x_849;
  let x_851 : u32 = u_xlatu21;
  u_xlat21.x = f32(x_851);
  let x_855 : f32 = u_xlat21.x;
  let x_856 : f32 = u_xlat0;
  let x_859 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_855 * x_856) + x_859);
  let x_865 : u32 = x_27.x_HistogramBuffer_buf[42i].value[0i];
  u_xlatu157 = x_865;
  let x_866 : u32 = u_xlatu157;
  u_xlat21.z = f32(x_866);
  let x_870 : f32 = u_xlat0;
  let x_872 : vec3<f32> = u_xlat21;
  let x_874 : vec2<f32> = (vec2<f32>(x_870, x_870) * vec2<f32>(x_872.x, x_872.z));
  let x_875 : vec3<f32> = u_xlat89;
  u_xlat89 = vec3<f32>(x_874.x, x_875.y, x_874.y);
  let x_878 : f32 = u_xlat21.z;
  let x_879 : f32 = u_xlat0;
  let x_882 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_878 * x_879) + x_882);
  let x_888 : u32 = x_27.x_HistogramBuffer_buf[43i].value[0i];
  u_xlatu22 = x_888;
  let x_890 : u32 = u_xlatu22;
  u_xlat22.x = f32(x_890);
  let x_894 : f32 = u_xlat22.x;
  let x_895 : f32 = u_xlat0;
  let x_898 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_894 * x_895) + x_898);
  let x_904 : u32 = x_27.x_HistogramBuffer_buf[44i].value[0i];
  u_xlatu158 = x_904;
  let x_905 : u32 = u_xlatu158;
  u_xlat22.z = f32(x_905);
  let x_909 : f32 = u_xlat0;
  let x_911 : vec3<f32> = u_xlat22;
  let x_913 : vec2<f32> = (vec2<f32>(x_909, x_909) * vec2<f32>(x_911.x, x_911.z));
  let x_914 : vec3<f32> = u_xlat90;
  u_xlat90 = vec3<f32>(x_913.x, x_914.y, x_913.y);
  let x_917 : f32 = u_xlat22.z;
  let x_918 : f32 = u_xlat0;
  let x_921 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_917 * x_918) + x_921);
  let x_927 : u32 = x_27.x_HistogramBuffer_buf[45i].value[0i];
  u_xlatu23 = x_927;
  let x_929 : u32 = u_xlatu23;
  u_xlat23.x = f32(x_929);
  let x_933 : f32 = u_xlat23.x;
  let x_934 : f32 = u_xlat0;
  let x_937 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_933 * x_934) + x_937);
  let x_943 : u32 = x_27.x_HistogramBuffer_buf[46i].value[0i];
  u_xlatu159 = x_943;
  let x_944 : u32 = u_xlatu159;
  u_xlat23.z = f32(x_944);
  let x_948 : f32 = u_xlat0;
  let x_950 : vec3<f32> = u_xlat23;
  let x_952 : vec2<f32> = (vec2<f32>(x_948, x_948) * vec2<f32>(x_950.x, x_950.z));
  let x_953 : vec3<f32> = u_xlat91;
  u_xlat91 = vec3<f32>(x_952.x, x_953.y, x_952.y);
  let x_956 : f32 = u_xlat23.z;
  let x_957 : f32 = u_xlat0;
  let x_960 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_956 * x_957) + x_960);
  let x_966 : u32 = x_27.x_HistogramBuffer_buf[47i].value[0i];
  u_xlatu24 = x_966;
  let x_968 : u32 = u_xlatu24;
  u_xlat24.x = f32(x_968);
  let x_972 : f32 = u_xlat24.x;
  let x_973 : f32 = u_xlat0;
  let x_976 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_972 * x_973) + x_976);
  let x_982 : u32 = x_27.x_HistogramBuffer_buf[48i].value[0i];
  u_xlatu160 = x_982;
  let x_983 : u32 = u_xlatu160;
  u_xlat24.z = f32(x_983);
  let x_987 : f32 = u_xlat0;
  let x_989 : vec3<f32> = u_xlat24;
  let x_991 : vec2<f32> = (vec2<f32>(x_987, x_987) * vec2<f32>(x_989.x, x_989.z));
  let x_992 : vec3<f32> = u_xlat92;
  u_xlat92 = vec3<f32>(x_991.x, x_992.y, x_991.y);
  let x_995 : f32 = u_xlat24.z;
  let x_996 : f32 = u_xlat0;
  let x_999 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_995 * x_996) + x_999);
  let x_1005 : u32 = x_27.x_HistogramBuffer_buf[49i].value[0i];
  u_xlatu25 = x_1005;
  let x_1007 : u32 = u_xlatu25;
  u_xlat25.x = f32(x_1007);
  let x_1011 : f32 = u_xlat25.x;
  let x_1012 : f32 = u_xlat0;
  let x_1015 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1011 * x_1012) + x_1015);
  let x_1021 : u32 = x_27.x_HistogramBuffer_buf[50i].value[0i];
  u_xlatu161 = x_1021;
  let x_1022 : u32 = u_xlatu161;
  u_xlat25.z = f32(x_1022);
  let x_1026 : f32 = u_xlat0;
  let x_1028 : vec3<f32> = u_xlat25;
  let x_1030 : vec2<f32> = (vec2<f32>(x_1026, x_1026) * vec2<f32>(x_1028.x, x_1028.z));
  let x_1031 : vec3<f32> = u_xlat93;
  u_xlat93 = vec3<f32>(x_1030.x, x_1031.y, x_1030.y);
  let x_1034 : f32 = u_xlat25.z;
  let x_1035 : f32 = u_xlat0;
  let x_1038 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1034 * x_1035) + x_1038);
  let x_1044 : u32 = x_27.x_HistogramBuffer_buf[51i].value[0i];
  u_xlatu26 = x_1044;
  let x_1046 : u32 = u_xlatu26;
  u_xlat26.x = f32(x_1046);
  let x_1050 : f32 = u_xlat26.x;
  let x_1051 : f32 = u_xlat0;
  let x_1054 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1050 * x_1051) + x_1054);
  let x_1060 : u32 = x_27.x_HistogramBuffer_buf[52i].value[0i];
  u_xlatu162 = x_1060;
  let x_1061 : u32 = u_xlatu162;
  u_xlat26.z = f32(x_1061);
  let x_1065 : f32 = u_xlat0;
  let x_1067 : vec3<f32> = u_xlat26;
  let x_1069 : vec2<f32> = (vec2<f32>(x_1065, x_1065) * vec2<f32>(x_1067.x, x_1067.z));
  let x_1070 : vec3<f32> = u_xlat94;
  u_xlat94 = vec3<f32>(x_1069.x, x_1070.y, x_1069.y);
  let x_1073 : f32 = u_xlat26.z;
  let x_1074 : f32 = u_xlat0;
  let x_1077 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1073 * x_1074) + x_1077);
  let x_1083 : u32 = x_27.x_HistogramBuffer_buf[53i].value[0i];
  u_xlatu27 = x_1083;
  let x_1085 : u32 = u_xlatu27;
  u_xlat27.x = f32(x_1085);
  let x_1089 : f32 = u_xlat27.x;
  let x_1090 : f32 = u_xlat0;
  let x_1093 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1089 * x_1090) + x_1093);
  let x_1099 : u32 = x_27.x_HistogramBuffer_buf[54i].value[0i];
  u_xlatu163 = x_1099;
  let x_1100 : u32 = u_xlatu163;
  u_xlat27.z = f32(x_1100);
  let x_1104 : f32 = u_xlat0;
  let x_1106 : vec3<f32> = u_xlat27;
  let x_1108 : vec2<f32> = (vec2<f32>(x_1104, x_1104) * vec2<f32>(x_1106.x, x_1106.z));
  let x_1109 : vec3<f32> = u_xlat95;
  u_xlat95 = vec3<f32>(x_1108.x, x_1109.y, x_1108.y);
  let x_1112 : f32 = u_xlat27.z;
  let x_1113 : f32 = u_xlat0;
  let x_1116 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1112 * x_1113) + x_1116);
  let x_1122 : u32 = x_27.x_HistogramBuffer_buf[55i].value[0i];
  u_xlatu28 = x_1122;
  let x_1124 : u32 = u_xlatu28;
  u_xlat28.x = f32(x_1124);
  let x_1128 : f32 = u_xlat28.x;
  let x_1129 : f32 = u_xlat0;
  let x_1132 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1128 * x_1129) + x_1132);
  let x_1138 : u32 = x_27.x_HistogramBuffer_buf[56i].value[0i];
  u_xlatu164 = x_1138;
  let x_1139 : u32 = u_xlatu164;
  u_xlat28.z = f32(x_1139);
  let x_1143 : f32 = u_xlat0;
  let x_1145 : vec3<f32> = u_xlat28;
  let x_1147 : vec2<f32> = (vec2<f32>(x_1143, x_1143) * vec2<f32>(x_1145.x, x_1145.z));
  let x_1148 : vec3<f32> = u_xlat96;
  u_xlat96 = vec3<f32>(x_1147.x, x_1148.y, x_1147.y);
  let x_1151 : f32 = u_xlat28.z;
  let x_1152 : f32 = u_xlat0;
  let x_1155 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1151 * x_1152) + x_1155);
  let x_1161 : u32 = x_27.x_HistogramBuffer_buf[57i].value[0i];
  u_xlatu29 = x_1161;
  let x_1163 : u32 = u_xlatu29;
  u_xlat29.x = f32(x_1163);
  let x_1167 : f32 = u_xlat29.x;
  let x_1168 : f32 = u_xlat0;
  let x_1171 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1167 * x_1168) + x_1171);
  let x_1177 : u32 = x_27.x_HistogramBuffer_buf[58i].value[0i];
  u_xlatu165 = x_1177;
  let x_1178 : u32 = u_xlatu165;
  u_xlat29.z = f32(x_1178);
  let x_1182 : f32 = u_xlat0;
  let x_1184 : vec3<f32> = u_xlat29;
  let x_1186 : vec2<f32> = (vec2<f32>(x_1182, x_1182) * vec2<f32>(x_1184.x, x_1184.z));
  let x_1187 : vec3<f32> = u_xlat97;
  u_xlat97 = vec3<f32>(x_1186.x, x_1187.y, x_1186.y);
  let x_1190 : f32 = u_xlat29.z;
  let x_1191 : f32 = u_xlat0;
  let x_1194 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1190 * x_1191) + x_1194);
  let x_1200 : u32 = x_27.x_HistogramBuffer_buf[59i].value[0i];
  u_xlatu30 = x_1200;
  let x_1202 : u32 = u_xlatu30;
  u_xlat30.x = f32(x_1202);
  let x_1206 : f32 = u_xlat30.x;
  let x_1207 : f32 = u_xlat0;
  let x_1210 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1206 * x_1207) + x_1210);
  let x_1216 : u32 = x_27.x_HistogramBuffer_buf[60i].value[0i];
  u_xlatu166 = x_1216;
  let x_1217 : u32 = u_xlatu166;
  u_xlat30.z = f32(x_1217);
  let x_1221 : f32 = u_xlat0;
  let x_1223 : vec3<f32> = u_xlat30;
  let x_1225 : vec2<f32> = (vec2<f32>(x_1221, x_1221) * vec2<f32>(x_1223.x, x_1223.z));
  let x_1226 : vec3<f32> = u_xlat98;
  u_xlat98 = vec3<f32>(x_1225.x, x_1226.y, x_1225.y);
  let x_1229 : f32 = u_xlat30.z;
  let x_1230 : f32 = u_xlat0;
  let x_1233 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1229 * x_1230) + x_1233);
  let x_1239 : u32 = x_27.x_HistogramBuffer_buf[61i].value[0i];
  u_xlatu31 = x_1239;
  let x_1241 : u32 = u_xlatu31;
  u_xlat31.x = f32(x_1241);
  let x_1245 : f32 = u_xlat31.x;
  let x_1246 : f32 = u_xlat0;
  let x_1249 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1245 * x_1246) + x_1249);
  let x_1255 : u32 = x_27.x_HistogramBuffer_buf[62i].value[0i];
  u_xlatu167 = x_1255;
  let x_1256 : u32 = u_xlatu167;
  u_xlat31.z = f32(x_1256);
  let x_1260 : f32 = u_xlat0;
  let x_1262 : vec3<f32> = u_xlat31;
  let x_1264 : vec2<f32> = (vec2<f32>(x_1260, x_1260) * vec2<f32>(x_1262.x, x_1262.z));
  let x_1265 : vec3<f32> = u_xlat99;
  u_xlat99 = vec3<f32>(x_1264.x, x_1265.y, x_1264.y);
  let x_1268 : f32 = u_xlat31.z;
  let x_1269 : f32 = u_xlat0;
  let x_1272 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1268 * x_1269) + x_1272);
  let x_1278 : u32 = x_27.x_HistogramBuffer_buf[63i].value[0i];
  u_xlatu32 = x_1278;
  let x_1280 : u32 = u_xlatu32;
  u_xlat32.x = f32(x_1280);
  let x_1284 : f32 = u_xlat32.x;
  let x_1285 : f32 = u_xlat0;
  let x_1288 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1284 * x_1285) + x_1288);
  let x_1294 : u32 = x_27.x_HistogramBuffer_buf[64i].value[0i];
  u_xlatu168 = x_1294;
  let x_1295 : u32 = u_xlatu168;
  u_xlat32.z = f32(x_1295);
  let x_1299 : f32 = u_xlat0;
  let x_1301 : vec3<f32> = u_xlat32;
  let x_1303 : vec2<f32> = (vec2<f32>(x_1299, x_1299) * vec2<f32>(x_1301.x, x_1301.z));
  let x_1304 : vec3<f32> = u_xlat100;
  u_xlat100 = vec3<f32>(x_1303.x, x_1304.y, x_1303.y);
  let x_1307 : f32 = u_xlat32.z;
  let x_1308 : f32 = u_xlat0;
  let x_1311 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1307 * x_1308) + x_1311);
  let x_1317 : u32 = x_27.x_HistogramBuffer_buf[65i].value[0i];
  u_xlatu33 = x_1317;
  let x_1319 : u32 = u_xlatu33;
  u_xlat33.x = f32(x_1319);
  let x_1323 : f32 = u_xlat33.x;
  let x_1324 : f32 = u_xlat0;
  let x_1327 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1323 * x_1324) + x_1327);
  let x_1333 : u32 = x_27.x_HistogramBuffer_buf[66i].value[0i];
  u_xlatu169 = x_1333;
  let x_1334 : u32 = u_xlatu169;
  u_xlat33.z = f32(x_1334);
  let x_1338 : f32 = u_xlat0;
  let x_1340 : vec3<f32> = u_xlat33;
  let x_1342 : vec2<f32> = (vec2<f32>(x_1338, x_1338) * vec2<f32>(x_1340.x, x_1340.z));
  let x_1343 : vec3<f32> = u_xlat101;
  u_xlat101 = vec3<f32>(x_1342.x, x_1343.y, x_1342.y);
  let x_1346 : f32 = u_xlat33.z;
  let x_1347 : f32 = u_xlat0;
  let x_1350 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1346 * x_1347) + x_1350);
  let x_1356 : u32 = x_27.x_HistogramBuffer_buf[67i].value[0i];
  u_xlatu34 = x_1356;
  let x_1358 : u32 = u_xlatu34;
  u_xlat34.x = f32(x_1358);
  let x_1362 : f32 = u_xlat34.x;
  let x_1363 : f32 = u_xlat0;
  let x_1366 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1362 * x_1363) + x_1366);
  let x_1372 : u32 = x_27.x_HistogramBuffer_buf[68i].value[0i];
  u_xlatu170 = x_1372;
  let x_1373 : u32 = u_xlatu170;
  u_xlat34.z = f32(x_1373);
  let x_1377 : f32 = u_xlat0;
  let x_1379 : vec3<f32> = u_xlat34;
  let x_1381 : vec2<f32> = (vec2<f32>(x_1377, x_1377) * vec2<f32>(x_1379.x, x_1379.z));
  let x_1382 : vec3<f32> = u_xlat102;
  u_xlat102 = vec3<f32>(x_1381.x, x_1382.y, x_1381.y);
  let x_1385 : f32 = u_xlat34.z;
  let x_1386 : f32 = u_xlat0;
  let x_1389 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1385 * x_1386) + x_1389);
  let x_1395 : u32 = x_27.x_HistogramBuffer_buf[69i].value[0i];
  u_xlatu35 = x_1395;
  let x_1397 : u32 = u_xlatu35;
  u_xlat35.x = f32(x_1397);
  let x_1401 : f32 = u_xlat35.x;
  let x_1402 : f32 = u_xlat0;
  let x_1405 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1401 * x_1402) + x_1405);
  let x_1411 : u32 = x_27.x_HistogramBuffer_buf[70i].value[0i];
  u_xlatu171 = x_1411;
  let x_1412 : u32 = u_xlatu171;
  u_xlat35.z = f32(x_1412);
  let x_1416 : f32 = u_xlat0;
  let x_1418 : vec3<f32> = u_xlat35;
  let x_1420 : vec2<f32> = (vec2<f32>(x_1416, x_1416) * vec2<f32>(x_1418.x, x_1418.z));
  let x_1421 : vec3<f32> = u_xlat103;
  u_xlat103 = vec3<f32>(x_1420.x, x_1421.y, x_1420.y);
  let x_1424 : f32 = u_xlat35.z;
  let x_1425 : f32 = u_xlat0;
  let x_1428 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1424 * x_1425) + x_1428);
  let x_1434 : u32 = x_27.x_HistogramBuffer_buf[71i].value[0i];
  u_xlatu36 = x_1434;
  let x_1436 : u32 = u_xlatu36;
  u_xlat36.x = f32(x_1436);
  let x_1440 : f32 = u_xlat36.x;
  let x_1441 : f32 = u_xlat0;
  let x_1444 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1440 * x_1441) + x_1444);
  let x_1450 : u32 = x_27.x_HistogramBuffer_buf[72i].value[0i];
  u_xlatu172 = x_1450;
  let x_1451 : u32 = u_xlatu172;
  u_xlat36.z = f32(x_1451);
  let x_1455 : f32 = u_xlat0;
  let x_1457 : vec3<f32> = u_xlat36;
  let x_1459 : vec2<f32> = (vec2<f32>(x_1455, x_1455) * vec2<f32>(x_1457.x, x_1457.z));
  let x_1460 : vec3<f32> = u_xlat104;
  u_xlat104 = vec3<f32>(x_1459.x, x_1460.y, x_1459.y);
  let x_1463 : f32 = u_xlat36.z;
  let x_1464 : f32 = u_xlat0;
  let x_1467 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1463 * x_1464) + x_1467);
  let x_1473 : u32 = x_27.x_HistogramBuffer_buf[73i].value[0i];
  u_xlatu37 = x_1473;
  let x_1475 : u32 = u_xlatu37;
  u_xlat37.x = f32(x_1475);
  let x_1479 : f32 = u_xlat37.x;
  let x_1480 : f32 = u_xlat0;
  let x_1483 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1479 * x_1480) + x_1483);
  let x_1489 : u32 = x_27.x_HistogramBuffer_buf[74i].value[0i];
  u_xlatu173 = x_1489;
  let x_1490 : u32 = u_xlatu173;
  u_xlat37.z = f32(x_1490);
  let x_1494 : f32 = u_xlat0;
  let x_1496 : vec3<f32> = u_xlat37;
  let x_1498 : vec2<f32> = (vec2<f32>(x_1494, x_1494) * vec2<f32>(x_1496.x, x_1496.z));
  let x_1499 : vec3<f32> = u_xlat105;
  u_xlat105 = vec3<f32>(x_1498.x, x_1499.y, x_1498.y);
  let x_1502 : f32 = u_xlat37.z;
  let x_1503 : f32 = u_xlat0;
  let x_1506 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1502 * x_1503) + x_1506);
  let x_1512 : u32 = x_27.x_HistogramBuffer_buf[75i].value[0i];
  u_xlatu38 = x_1512;
  let x_1514 : u32 = u_xlatu38;
  u_xlat38.x = f32(x_1514);
  let x_1518 : f32 = u_xlat38.x;
  let x_1519 : f32 = u_xlat0;
  let x_1522 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1518 * x_1519) + x_1522);
  let x_1528 : u32 = x_27.x_HistogramBuffer_buf[76i].value[0i];
  u_xlatu174 = x_1528;
  let x_1529 : u32 = u_xlatu174;
  u_xlat38.z = f32(x_1529);
  let x_1533 : f32 = u_xlat0;
  let x_1535 : vec3<f32> = u_xlat38;
  let x_1537 : vec2<f32> = (vec2<f32>(x_1533, x_1533) * vec2<f32>(x_1535.x, x_1535.z));
  let x_1538 : vec3<f32> = u_xlat106;
  u_xlat106 = vec3<f32>(x_1537.x, x_1538.y, x_1537.y);
  let x_1541 : f32 = u_xlat38.z;
  let x_1542 : f32 = u_xlat0;
  let x_1545 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1541 * x_1542) + x_1545);
  let x_1551 : u32 = x_27.x_HistogramBuffer_buf[77i].value[0i];
  u_xlatu39 = x_1551;
  let x_1553 : u32 = u_xlatu39;
  u_xlat39.x = f32(x_1553);
  let x_1557 : f32 = u_xlat39.x;
  let x_1558 : f32 = u_xlat0;
  let x_1561 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1557 * x_1558) + x_1561);
  let x_1567 : u32 = x_27.x_HistogramBuffer_buf[78i].value[0i];
  u_xlatu175 = x_1567;
  let x_1568 : u32 = u_xlatu175;
  u_xlat39.z = f32(x_1568);
  let x_1572 : f32 = u_xlat0;
  let x_1574 : vec3<f32> = u_xlat39;
  let x_1576 : vec2<f32> = (vec2<f32>(x_1572, x_1572) * vec2<f32>(x_1574.x, x_1574.z));
  let x_1577 : vec3<f32> = u_xlat107;
  u_xlat107 = vec3<f32>(x_1576.x, x_1577.y, x_1576.y);
  let x_1580 : f32 = u_xlat39.z;
  let x_1581 : f32 = u_xlat0;
  let x_1584 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1580 * x_1581) + x_1584);
  let x_1590 : u32 = x_27.x_HistogramBuffer_buf[79i].value[0i];
  u_xlatu40 = x_1590;
  let x_1592 : u32 = u_xlatu40;
  u_xlat40.x = f32(x_1592);
  let x_1596 : f32 = u_xlat40.x;
  let x_1597 : f32 = u_xlat0;
  let x_1600 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1596 * x_1597) + x_1600);
  let x_1606 : u32 = x_27.x_HistogramBuffer_buf[80i].value[0i];
  u_xlatu176 = x_1606;
  let x_1607 : u32 = u_xlatu176;
  u_xlat40.z = f32(x_1607);
  let x_1611 : f32 = u_xlat0;
  let x_1613 : vec3<f32> = u_xlat40;
  let x_1615 : vec2<f32> = (vec2<f32>(x_1611, x_1611) * vec2<f32>(x_1613.x, x_1613.z));
  let x_1616 : vec3<f32> = u_xlat108;
  u_xlat108 = vec3<f32>(x_1615.x, x_1616.y, x_1615.y);
  let x_1619 : f32 = u_xlat40.z;
  let x_1620 : f32 = u_xlat0;
  let x_1623 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1619 * x_1620) + x_1623);
  let x_1629 : u32 = x_27.x_HistogramBuffer_buf[81i].value[0i];
  u_xlatu41 = x_1629;
  let x_1631 : u32 = u_xlatu41;
  u_xlat41.x = f32(x_1631);
  let x_1635 : f32 = u_xlat41.x;
  let x_1636 : f32 = u_xlat0;
  let x_1639 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1635 * x_1636) + x_1639);
  let x_1645 : u32 = x_27.x_HistogramBuffer_buf[82i].value[0i];
  u_xlatu177 = x_1645;
  let x_1646 : u32 = u_xlatu177;
  u_xlat41.z = f32(x_1646);
  let x_1650 : f32 = u_xlat0;
  let x_1652 : vec3<f32> = u_xlat41;
  let x_1654 : vec2<f32> = (vec2<f32>(x_1650, x_1650) * vec2<f32>(x_1652.x, x_1652.z));
  let x_1655 : vec3<f32> = u_xlat109;
  u_xlat109 = vec3<f32>(x_1654.x, x_1655.y, x_1654.y);
  let x_1658 : f32 = u_xlat41.z;
  let x_1659 : f32 = u_xlat0;
  let x_1662 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1658 * x_1659) + x_1662);
  let x_1668 : u32 = x_27.x_HistogramBuffer_buf[83i].value[0i];
  u_xlatu42 = x_1668;
  let x_1670 : u32 = u_xlatu42;
  u_xlat42.x = f32(x_1670);
  let x_1674 : f32 = u_xlat42.x;
  let x_1675 : f32 = u_xlat0;
  let x_1678 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1674 * x_1675) + x_1678);
  let x_1684 : u32 = x_27.x_HistogramBuffer_buf[84i].value[0i];
  u_xlatu178 = x_1684;
  let x_1685 : u32 = u_xlatu178;
  u_xlat42.z = f32(x_1685);
  let x_1689 : f32 = u_xlat0;
  let x_1691 : vec3<f32> = u_xlat42;
  let x_1693 : vec2<f32> = (vec2<f32>(x_1689, x_1689) * vec2<f32>(x_1691.x, x_1691.z));
  let x_1694 : vec3<f32> = u_xlat110;
  u_xlat110 = vec3<f32>(x_1693.x, x_1694.y, x_1693.y);
  let x_1697 : f32 = u_xlat42.z;
  let x_1698 : f32 = u_xlat0;
  let x_1701 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1697 * x_1698) + x_1701);
  let x_1707 : u32 = x_27.x_HistogramBuffer_buf[85i].value[0i];
  u_xlatu43 = x_1707;
  let x_1709 : u32 = u_xlatu43;
  u_xlat43.x = f32(x_1709);
  let x_1713 : f32 = u_xlat43.x;
  let x_1714 : f32 = u_xlat0;
  let x_1717 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1713 * x_1714) + x_1717);
  let x_1723 : u32 = x_27.x_HistogramBuffer_buf[86i].value[0i];
  u_xlatu179 = x_1723;
  let x_1724 : u32 = u_xlatu179;
  u_xlat43.z = f32(x_1724);
  let x_1728 : f32 = u_xlat0;
  let x_1730 : vec3<f32> = u_xlat43;
  let x_1732 : vec2<f32> = (vec2<f32>(x_1728, x_1728) * vec2<f32>(x_1730.x, x_1730.z));
  let x_1733 : vec3<f32> = u_xlat111;
  u_xlat111 = vec3<f32>(x_1732.x, x_1733.y, x_1732.y);
  let x_1736 : f32 = u_xlat43.z;
  let x_1737 : f32 = u_xlat0;
  let x_1740 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1736 * x_1737) + x_1740);
  let x_1746 : u32 = x_27.x_HistogramBuffer_buf[87i].value[0i];
  u_xlatu44 = x_1746;
  let x_1748 : u32 = u_xlatu44;
  u_xlat44.x = f32(x_1748);
  let x_1752 : f32 = u_xlat44.x;
  let x_1753 : f32 = u_xlat0;
  let x_1756 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1752 * x_1753) + x_1756);
  let x_1762 : u32 = x_27.x_HistogramBuffer_buf[88i].value[0i];
  u_xlatu180 = x_1762;
  let x_1763 : u32 = u_xlatu180;
  u_xlat44.z = f32(x_1763);
  let x_1767 : f32 = u_xlat0;
  let x_1769 : vec3<f32> = u_xlat44;
  let x_1771 : vec2<f32> = (vec2<f32>(x_1767, x_1767) * vec2<f32>(x_1769.x, x_1769.z));
  let x_1772 : vec3<f32> = u_xlat112;
  u_xlat112 = vec3<f32>(x_1771.x, x_1772.y, x_1771.y);
  let x_1775 : f32 = u_xlat44.z;
  let x_1776 : f32 = u_xlat0;
  let x_1779 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1775 * x_1776) + x_1779);
  let x_1785 : u32 = x_27.x_HistogramBuffer_buf[89i].value[0i];
  u_xlatu45 = x_1785;
  let x_1787 : u32 = u_xlatu45;
  u_xlat45.x = f32(x_1787);
  let x_1791 : f32 = u_xlat45.x;
  let x_1792 : f32 = u_xlat0;
  let x_1795 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1791 * x_1792) + x_1795);
  let x_1801 : u32 = x_27.x_HistogramBuffer_buf[90i].value[0i];
  u_xlatu181 = x_1801;
  let x_1802 : u32 = u_xlatu181;
  u_xlat45.z = f32(x_1802);
  let x_1806 : f32 = u_xlat0;
  let x_1808 : vec3<f32> = u_xlat45;
  let x_1810 : vec2<f32> = (vec2<f32>(x_1806, x_1806) * vec2<f32>(x_1808.x, x_1808.z));
  let x_1811 : vec3<f32> = u_xlat113;
  u_xlat113 = vec3<f32>(x_1810.x, x_1811.y, x_1810.y);
  let x_1814 : f32 = u_xlat45.z;
  let x_1815 : f32 = u_xlat0;
  let x_1818 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1814 * x_1815) + x_1818);
  let x_1824 : u32 = x_27.x_HistogramBuffer_buf[91i].value[0i];
  u_xlatu46 = x_1824;
  let x_1826 : u32 = u_xlatu46;
  u_xlat46.x = f32(x_1826);
  let x_1830 : f32 = u_xlat46.x;
  let x_1831 : f32 = u_xlat0;
  let x_1834 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1830 * x_1831) + x_1834);
  let x_1840 : u32 = x_27.x_HistogramBuffer_buf[92i].value[0i];
  u_xlatu182 = x_1840;
  let x_1841 : u32 = u_xlatu182;
  u_xlat46.z = f32(x_1841);
  let x_1845 : f32 = u_xlat0;
  let x_1847 : vec3<f32> = u_xlat46;
  let x_1849 : vec2<f32> = (vec2<f32>(x_1845, x_1845) * vec2<f32>(x_1847.x, x_1847.z));
  let x_1850 : vec3<f32> = u_xlat114;
  u_xlat114 = vec3<f32>(x_1849.x, x_1850.y, x_1849.y);
  let x_1853 : f32 = u_xlat46.z;
  let x_1854 : f32 = u_xlat0;
  let x_1857 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1853 * x_1854) + x_1857);
  let x_1863 : u32 = x_27.x_HistogramBuffer_buf[93i].value[0i];
  u_xlatu47 = x_1863;
  let x_1865 : u32 = u_xlatu47;
  u_xlat47.x = f32(x_1865);
  let x_1869 : f32 = u_xlat47.x;
  let x_1870 : f32 = u_xlat0;
  let x_1873 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1869 * x_1870) + x_1873);
  let x_1879 : u32 = x_27.x_HistogramBuffer_buf[94i].value[0i];
  u_xlatu183 = x_1879;
  let x_1880 : u32 = u_xlatu183;
  u_xlat47.z = f32(x_1880);
  let x_1884 : f32 = u_xlat0;
  let x_1886 : vec3<f32> = u_xlat47;
  let x_1888 : vec2<f32> = (vec2<f32>(x_1884, x_1884) * vec2<f32>(x_1886.x, x_1886.z));
  let x_1889 : vec3<f32> = u_xlat115;
  u_xlat115 = vec3<f32>(x_1888.x, x_1889.y, x_1888.y);
  let x_1892 : f32 = u_xlat47.z;
  let x_1893 : f32 = u_xlat0;
  let x_1896 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1892 * x_1893) + x_1896);
  let x_1902 : u32 = x_27.x_HistogramBuffer_buf[95i].value[0i];
  u_xlatu48 = x_1902;
  let x_1904 : u32 = u_xlatu48;
  u_xlat48.x = f32(x_1904);
  let x_1908 : f32 = u_xlat48.x;
  let x_1909 : f32 = u_xlat0;
  let x_1912 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1908 * x_1909) + x_1912);
  let x_1918 : u32 = x_27.x_HistogramBuffer_buf[96i].value[0i];
  u_xlatu184 = x_1918;
  let x_1919 : u32 = u_xlatu184;
  u_xlat48.z = f32(x_1919);
  let x_1923 : f32 = u_xlat0;
  let x_1925 : vec3<f32> = u_xlat48;
  let x_1927 : vec2<f32> = (vec2<f32>(x_1923, x_1923) * vec2<f32>(x_1925.x, x_1925.z));
  let x_1928 : vec3<f32> = u_xlat116;
  u_xlat116 = vec3<f32>(x_1927.x, x_1928.y, x_1927.y);
  let x_1931 : f32 = u_xlat48.z;
  let x_1932 : f32 = u_xlat0;
  let x_1935 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1931 * x_1932) + x_1935);
  let x_1941 : u32 = x_27.x_HistogramBuffer_buf[97i].value[0i];
  u_xlatu49 = x_1941;
  let x_1943 : u32 = u_xlatu49;
  u_xlat49.x = f32(x_1943);
  let x_1947 : f32 = u_xlat49.x;
  let x_1948 : f32 = u_xlat0;
  let x_1951 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1947 * x_1948) + x_1951);
  let x_1957 : u32 = x_27.x_HistogramBuffer_buf[98i].value[0i];
  u_xlatu185 = x_1957;
  let x_1958 : u32 = u_xlatu185;
  u_xlat49.z = f32(x_1958);
  let x_1962 : f32 = u_xlat0;
  let x_1964 : vec3<f32> = u_xlat49;
  let x_1966 : vec2<f32> = (vec2<f32>(x_1962, x_1962) * vec2<f32>(x_1964.x, x_1964.z));
  let x_1967 : vec3<f32> = u_xlat117;
  u_xlat117 = vec3<f32>(x_1966.x, x_1967.y, x_1966.y);
  let x_1970 : f32 = u_xlat49.z;
  let x_1971 : f32 = u_xlat0;
  let x_1974 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1970 * x_1971) + x_1974);
  let x_1980 : u32 = x_27.x_HistogramBuffer_buf[99i].value[0i];
  u_xlatu50 = x_1980;
  let x_1982 : u32 = u_xlatu50;
  u_xlat50.x = f32(x_1982);
  let x_1986 : f32 = u_xlat50.x;
  let x_1987 : f32 = u_xlat0;
  let x_1990 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1986 * x_1987) + x_1990);
  let x_1996 : u32 = x_27.x_HistogramBuffer_buf[100i].value[0i];
  u_xlatu186 = x_1996;
  let x_1997 : u32 = u_xlatu186;
  u_xlat50.z = f32(x_1997);
  let x_2001 : f32 = u_xlat0;
  let x_2003 : vec3<f32> = u_xlat50;
  let x_2005 : vec2<f32> = (vec2<f32>(x_2001, x_2001) * vec2<f32>(x_2003.x, x_2003.z));
  let x_2006 : vec3<f32> = u_xlat118;
  u_xlat118 = vec3<f32>(x_2005.x, x_2006.y, x_2005.y);
  let x_2009 : f32 = u_xlat50.z;
  let x_2010 : f32 = u_xlat0;
  let x_2013 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2009 * x_2010) + x_2013);
  let x_2019 : u32 = x_27.x_HistogramBuffer_buf[101i].value[0i];
  u_xlatu51 = x_2019;
  let x_2021 : u32 = u_xlatu51;
  u_xlat51.x = f32(x_2021);
  let x_2025 : f32 = u_xlat51.x;
  let x_2026 : f32 = u_xlat0;
  let x_2029 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2025 * x_2026) + x_2029);
  let x_2035 : u32 = x_27.x_HistogramBuffer_buf[102i].value[0i];
  u_xlatu187 = x_2035;
  let x_2036 : u32 = u_xlatu187;
  u_xlat51.z = f32(x_2036);
  let x_2040 : f32 = u_xlat0;
  let x_2042 : vec3<f32> = u_xlat51;
  let x_2044 : vec2<f32> = (vec2<f32>(x_2040, x_2040) * vec2<f32>(x_2042.x, x_2042.z));
  let x_2045 : vec3<f32> = u_xlat119;
  u_xlat119 = vec3<f32>(x_2044.x, x_2045.y, x_2044.y);
  let x_2048 : f32 = u_xlat51.z;
  let x_2049 : f32 = u_xlat0;
  let x_2052 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2048 * x_2049) + x_2052);
  let x_2058 : u32 = x_27.x_HistogramBuffer_buf[103i].value[0i];
  u_xlatu52 = x_2058;
  let x_2060 : u32 = u_xlatu52;
  u_xlat52.x = f32(x_2060);
  let x_2064 : f32 = u_xlat52.x;
  let x_2065 : f32 = u_xlat0;
  let x_2068 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2064 * x_2065) + x_2068);
  let x_2074 : u32 = x_27.x_HistogramBuffer_buf[104i].value[0i];
  u_xlatu188 = x_2074;
  let x_2075 : u32 = u_xlatu188;
  u_xlat52.z = f32(x_2075);
  let x_2079 : f32 = u_xlat0;
  let x_2081 : vec3<f32> = u_xlat52;
  let x_2083 : vec2<f32> = (vec2<f32>(x_2079, x_2079) * vec2<f32>(x_2081.x, x_2081.z));
  let x_2084 : vec3<f32> = u_xlat120;
  u_xlat120 = vec3<f32>(x_2083.x, x_2084.y, x_2083.y);
  let x_2087 : f32 = u_xlat52.z;
  let x_2088 : f32 = u_xlat0;
  let x_2091 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2087 * x_2088) + x_2091);
  let x_2097 : u32 = x_27.x_HistogramBuffer_buf[105i].value[0i];
  u_xlatu53 = x_2097;
  let x_2099 : u32 = u_xlatu53;
  u_xlat53.x = f32(x_2099);
  let x_2103 : f32 = u_xlat53.x;
  let x_2104 : f32 = u_xlat0;
  let x_2107 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2103 * x_2104) + x_2107);
  let x_2113 : u32 = x_27.x_HistogramBuffer_buf[106i].value[0i];
  u_xlatu189 = x_2113;
  let x_2114 : u32 = u_xlatu189;
  u_xlat53.z = f32(x_2114);
  let x_2118 : f32 = u_xlat0;
  let x_2120 : vec3<f32> = u_xlat53;
  let x_2122 : vec2<f32> = (vec2<f32>(x_2118, x_2118) * vec2<f32>(x_2120.x, x_2120.z));
  let x_2123 : vec3<f32> = u_xlat121;
  u_xlat121 = vec3<f32>(x_2122.x, x_2123.y, x_2122.y);
  let x_2126 : f32 = u_xlat53.z;
  let x_2127 : f32 = u_xlat0;
  let x_2130 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2126 * x_2127) + x_2130);
  let x_2136 : u32 = x_27.x_HistogramBuffer_buf[107i].value[0i];
  u_xlatu54 = x_2136;
  let x_2138 : u32 = u_xlatu54;
  u_xlat54.x = f32(x_2138);
  let x_2142 : f32 = u_xlat54.x;
  let x_2143 : f32 = u_xlat0;
  let x_2146 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2142 * x_2143) + x_2146);
  let x_2152 : u32 = x_27.x_HistogramBuffer_buf[108i].value[0i];
  u_xlatu190 = x_2152;
  let x_2153 : u32 = u_xlatu190;
  u_xlat54.z = f32(x_2153);
  let x_2157 : f32 = u_xlat0;
  let x_2159 : vec3<f32> = u_xlat54;
  let x_2161 : vec2<f32> = (vec2<f32>(x_2157, x_2157) * vec2<f32>(x_2159.x, x_2159.z));
  let x_2162 : vec3<f32> = u_xlat122;
  u_xlat122 = vec3<f32>(x_2161.x, x_2162.y, x_2161.y);
  let x_2165 : f32 = u_xlat54.z;
  let x_2166 : f32 = u_xlat0;
  let x_2169 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2165 * x_2166) + x_2169);
  let x_2175 : u32 = x_27.x_HistogramBuffer_buf[109i].value[0i];
  u_xlatu55 = x_2175;
  let x_2177 : u32 = u_xlatu55;
  u_xlat55.x = f32(x_2177);
  let x_2181 : f32 = u_xlat55.x;
  let x_2182 : f32 = u_xlat0;
  let x_2185 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2181 * x_2182) + x_2185);
  let x_2191 : u32 = x_27.x_HistogramBuffer_buf[110i].value[0i];
  u_xlatu191 = x_2191;
  let x_2192 : u32 = u_xlatu191;
  u_xlat55.z = f32(x_2192);
  let x_2196 : f32 = u_xlat0;
  let x_2198 : vec3<f32> = u_xlat55;
  let x_2200 : vec2<f32> = (vec2<f32>(x_2196, x_2196) * vec2<f32>(x_2198.x, x_2198.z));
  let x_2201 : vec3<f32> = u_xlat123;
  u_xlat123 = vec3<f32>(x_2200.x, x_2201.y, x_2200.y);
  let x_2204 : f32 = u_xlat55.z;
  let x_2205 : f32 = u_xlat0;
  let x_2208 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2204 * x_2205) + x_2208);
  let x_2214 : u32 = x_27.x_HistogramBuffer_buf[111i].value[0i];
  u_xlatu56 = x_2214;
  let x_2216 : u32 = u_xlatu56;
  u_xlat56.x = f32(x_2216);
  let x_2220 : f32 = u_xlat56.x;
  let x_2221 : f32 = u_xlat0;
  let x_2224 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2220 * x_2221) + x_2224);
  let x_2230 : u32 = x_27.x_HistogramBuffer_buf[112i].value[0i];
  u_xlatu192 = x_2230;
  let x_2231 : u32 = u_xlatu192;
  u_xlat56.z = f32(x_2231);
  let x_2235 : f32 = u_xlat0;
  let x_2237 : vec3<f32> = u_xlat56;
  let x_2239 : vec2<f32> = (vec2<f32>(x_2235, x_2235) * vec2<f32>(x_2237.x, x_2237.z));
  let x_2240 : vec3<f32> = u_xlat124;
  u_xlat124 = vec3<f32>(x_2239.x, x_2240.y, x_2239.y);
  let x_2243 : f32 = u_xlat56.z;
  let x_2244 : f32 = u_xlat0;
  let x_2247 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2243 * x_2244) + x_2247);
  let x_2253 : u32 = x_27.x_HistogramBuffer_buf[113i].value[0i];
  u_xlatu57 = x_2253;
  let x_2255 : u32 = u_xlatu57;
  u_xlat57.x = f32(x_2255);
  let x_2259 : f32 = u_xlat57.x;
  let x_2260 : f32 = u_xlat0;
  let x_2263 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2259 * x_2260) + x_2263);
  let x_2269 : u32 = x_27.x_HistogramBuffer_buf[114i].value[0i];
  u_xlatu193 = x_2269;
  let x_2270 : u32 = u_xlatu193;
  u_xlat57.z = f32(x_2270);
  let x_2274 : f32 = u_xlat0;
  let x_2276 : vec3<f32> = u_xlat57;
  let x_2278 : vec2<f32> = (vec2<f32>(x_2274, x_2274) * vec2<f32>(x_2276.x, x_2276.z));
  let x_2279 : vec3<f32> = u_xlat125;
  u_xlat125 = vec3<f32>(x_2278.x, x_2279.y, x_2278.y);
  let x_2282 : f32 = u_xlat57.z;
  let x_2283 : f32 = u_xlat0;
  let x_2286 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2282 * x_2283) + x_2286);
  let x_2292 : u32 = x_27.x_HistogramBuffer_buf[115i].value[0i];
  u_xlatu58 = x_2292;
  let x_2294 : u32 = u_xlatu58;
  u_xlat58.x = f32(x_2294);
  let x_2298 : f32 = u_xlat58.x;
  let x_2299 : f32 = u_xlat0;
  let x_2302 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2298 * x_2299) + x_2302);
  let x_2308 : u32 = x_27.x_HistogramBuffer_buf[116i].value[0i];
  u_xlatu194 = x_2308;
  let x_2309 : u32 = u_xlatu194;
  u_xlat58.z = f32(x_2309);
  let x_2313 : f32 = u_xlat0;
  let x_2315 : vec3<f32> = u_xlat58;
  let x_2317 : vec2<f32> = (vec2<f32>(x_2313, x_2313) * vec2<f32>(x_2315.x, x_2315.z));
  let x_2318 : vec3<f32> = u_xlat126;
  u_xlat126 = vec3<f32>(x_2317.x, x_2318.y, x_2317.y);
  let x_2321 : f32 = u_xlat58.z;
  let x_2322 : f32 = u_xlat0;
  let x_2325 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2321 * x_2322) + x_2325);
  let x_2331 : u32 = x_27.x_HistogramBuffer_buf[117i].value[0i];
  u_xlatu59 = x_2331;
  let x_2333 : u32 = u_xlatu59;
  u_xlat59.x = f32(x_2333);
  let x_2337 : f32 = u_xlat59.x;
  let x_2338 : f32 = u_xlat0;
  let x_2341 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2337 * x_2338) + x_2341);
  let x_2347 : u32 = x_27.x_HistogramBuffer_buf[118i].value[0i];
  u_xlatu195 = x_2347;
  let x_2348 : u32 = u_xlatu195;
  u_xlat59.z = f32(x_2348);
  let x_2352 : f32 = u_xlat0;
  let x_2354 : vec3<f32> = u_xlat59;
  let x_2356 : vec2<f32> = (vec2<f32>(x_2352, x_2352) * vec2<f32>(x_2354.x, x_2354.z));
  let x_2357 : vec3<f32> = u_xlat127;
  u_xlat127 = vec3<f32>(x_2356.x, x_2357.y, x_2356.y);
  let x_2360 : f32 = u_xlat59.z;
  let x_2361 : f32 = u_xlat0;
  let x_2364 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2360 * x_2361) + x_2364);
  let x_2370 : u32 = x_27.x_HistogramBuffer_buf[119i].value[0i];
  u_xlatu60 = x_2370;
  let x_2372 : u32 = u_xlatu60;
  u_xlat60.x = f32(x_2372);
  let x_2376 : f32 = u_xlat60.x;
  let x_2377 : f32 = u_xlat0;
  let x_2380 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2376 * x_2377) + x_2380);
  let x_2386 : u32 = x_27.x_HistogramBuffer_buf[120i].value[0i];
  u_xlatu196 = x_2386;
  let x_2387 : u32 = u_xlatu196;
  u_xlat60.z = f32(x_2387);
  let x_2391 : f32 = u_xlat0;
  let x_2393 : vec3<f32> = u_xlat60;
  let x_2395 : vec2<f32> = (vec2<f32>(x_2391, x_2391) * vec2<f32>(x_2393.x, x_2393.z));
  let x_2396 : vec3<f32> = u_xlat128;
  u_xlat128 = vec3<f32>(x_2395.x, x_2396.y, x_2395.y);
  let x_2399 : f32 = u_xlat60.z;
  let x_2400 : f32 = u_xlat0;
  let x_2403 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2399 * x_2400) + x_2403);
  let x_2409 : u32 = x_27.x_HistogramBuffer_buf[121i].value[0i];
  u_xlatu61 = x_2409;
  let x_2411 : u32 = u_xlatu61;
  u_xlat61.x = f32(x_2411);
  let x_2415 : f32 = u_xlat61.x;
  let x_2416 : f32 = u_xlat0;
  let x_2419 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2415 * x_2416) + x_2419);
  let x_2425 : u32 = x_27.x_HistogramBuffer_buf[122i].value[0i];
  u_xlatu197 = x_2425;
  let x_2426 : u32 = u_xlatu197;
  u_xlat61.z = f32(x_2426);
  let x_2430 : f32 = u_xlat0;
  let x_2432 : vec3<f32> = u_xlat61;
  let x_2434 : vec2<f32> = (vec2<f32>(x_2430, x_2430) * vec2<f32>(x_2432.x, x_2432.z));
  let x_2435 : vec3<f32> = u_xlat129;
  u_xlat129 = vec3<f32>(x_2434.x, x_2435.y, x_2434.y);
  let x_2438 : f32 = u_xlat61.z;
  let x_2439 : f32 = u_xlat0;
  let x_2442 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2438 * x_2439) + x_2442);
  let x_2448 : u32 = x_27.x_HistogramBuffer_buf[123i].value[0i];
  u_xlatu62 = x_2448;
  let x_2450 : u32 = u_xlatu62;
  u_xlat62.x = f32(x_2450);
  let x_2454 : f32 = u_xlat62.x;
  let x_2455 : f32 = u_xlat0;
  let x_2458 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2454 * x_2455) + x_2458);
  let x_2464 : u32 = x_27.x_HistogramBuffer_buf[124i].value[0i];
  u_xlatu198 = x_2464;
  let x_2465 : u32 = u_xlatu198;
  u_xlat62.z = f32(x_2465);
  let x_2469 : f32 = u_xlat0;
  let x_2471 : vec3<f32> = u_xlat62;
  let x_2473 : vec2<f32> = (vec2<f32>(x_2469, x_2469) * vec2<f32>(x_2471.x, x_2471.z));
  let x_2474 : vec3<f32> = u_xlat130;
  u_xlat130 = vec3<f32>(x_2473.x, x_2474.y, x_2473.y);
  let x_2477 : f32 = u_xlat62.z;
  let x_2478 : f32 = u_xlat0;
  let x_2481 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2477 * x_2478) + x_2481);
  let x_2487 : u32 = x_27.x_HistogramBuffer_buf[125i].value[0i];
  u_xlatu63 = x_2487;
  let x_2489 : u32 = u_xlatu63;
  u_xlat63.x = f32(x_2489);
  let x_2493 : f32 = u_xlat63.x;
  let x_2494 : f32 = u_xlat0;
  let x_2497 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2493 * x_2494) + x_2497);
  let x_2503 : u32 = x_27.x_HistogramBuffer_buf[126i].value[0i];
  u_xlatu199 = x_2503;
  let x_2504 : u32 = u_xlatu199;
  u_xlat63.z = f32(x_2504);
  let x_2508 : f32 = u_xlat0;
  let x_2510 : vec3<f32> = u_xlat63;
  let x_2512 : vec2<f32> = (vec2<f32>(x_2508, x_2508) * vec2<f32>(x_2510.x, x_2510.z));
  let x_2513 : vec3<f32> = u_xlat131;
  u_xlat131 = vec3<f32>(x_2512.x, x_2513.y, x_2512.y);
  let x_2516 : f32 = u_xlat63.z;
  let x_2517 : f32 = u_xlat0;
  let x_2520 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2516 * x_2517) + x_2520);
  let x_2526 : u32 = x_27.x_HistogramBuffer_buf[127i].value[0i];
  u_xlatu64 = x_2526;
  let x_2528 : u32 = u_xlatu64;
  u_xlat64 = f32(x_2528);
  let x_2531 : f32 = u_xlat0;
  let x_2532 : f32 = u_xlat64;
  u_xlat132 = (x_2531 * x_2532);
  let x_2534 : f32 = u_xlat64;
  let x_2535 : f32 = u_xlat0;
  let x_2538 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2534 * x_2535) + x_2538);
  let x_2543 : f32 = u_xlat69.x;
  let x_2549 : f32 = x_2546.x_Params.x;
  u_xlat200 = (x_2543 * x_2549);
  let x_2551 : f32 = u_xlat136;
  let x_2552 : f32 = u_xlat200;
  u_xlat136 = min(x_2551, x_2552);
  let x_2555 : f32 = u_xlat68.x;
  let x_2556 : f32 = u_xlat0;
  let x_2558 : f32 = u_xlat136;
  u_xlat68.x = ((x_2555 * x_2556) + -(x_2558));
  let x_2563 : vec2<f32> = u_xlat69;
  let x_2567 : vec4<f32> = x_2546.x_Params;
  let x_2570 : f32 = u_xlat136;
  let x_2573 : vec2<f32> = ((vec2<f32>(x_2563.x, x_2563.x) * vec2<f32>(x_2567.x, x_2567.y)) + -(vec2<f32>(x_2570, x_2570)));
  let x_2574 : vec4<f32> = u_xlat65;
  u_xlat65 = vec4<f32>(x_2573.x, x_2573.y, x_2574.z, x_2574.w);
  let x_2578 : f32 = u_xlat68.x;
  let x_2580 : f32 = u_xlat65.y;
  u_xlat66.y = min(x_2578, x_2580);
  let x_2584 : f32 = u_xlat65.y;
  let x_2586 : f32 = u_xlat66.y;
  u_xlat65.z = (x_2584 + -(x_2586));
  let x_2591 : f32 = x_2546.x_ScaleOffsetRes.y;
  let x_2594 : f32 = x_2546.x_ScaleOffsetRes.x;
  u_xlat68.x = (-(x_2591) / x_2594);
  let x_2598 : f32 = u_xlat68.x;
  u_xlat68.x = exp2(x_2598);
  let x_2602 : f32 = u_xlat66.y;
  let x_2604 : f32 = u_xlat68.x;
  u_xlat66.x = (x_2602 * x_2604);
  let x_2608 : f32 = u_xlat1.x;
  let x_2610 : f32 = u_xlat65.x;
  u_xlat68.x = min(x_2608, x_2610);
  let x_2613 : f32 = u_xlat204;
  let x_2614 : f32 = u_xlat0;
  let x_2617 : f32 = u_xlat68.x;
  u_xlat136 = ((x_2613 * x_2614) + -(x_2617));
  let x_2620 : vec2<f32> = u_xlat68;
  let x_2623 : vec4<f32> = u_xlat65;
  let x_2625 : vec2<f32> = (-(vec2<f32>(x_2620.x, x_2620.x)) + vec2<f32>(x_2623.x, x_2623.z));
  let x_2626 : vec4<f32> = u_xlat65;
  u_xlat65 = vec4<f32>(x_2625.x, x_2625.y, x_2626.z, x_2626.w);
  let x_2628 : f32 = u_xlat136;
  let x_2630 : f32 = u_xlat65.y;
  u_xlat1.y = min(x_2628, x_2630);
  let x_2634 : f32 = u_xlat1.y;
  let x_2637 : f32 = u_xlat65.y;
  u_xlat65.z = (-(x_2634) + x_2637);
  let x_2642 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat67 = (-(vec4<f32>(x_2642.y, x_2642.y, x_2642.y, x_2642.y)) + vec4<f32>(0.0078125f, 0.015625f, 0.0234375f, 0.03125f));
  let x_2651 : vec4<f32> = u_xlat67;
  let x_2653 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat67 = (x_2651 / vec4<f32>(x_2653.x, x_2653.x, x_2653.x, x_2653.x));
  let x_2656 : vec4<f32> = u_xlat67;
  u_xlat67 = exp2(x_2656);
  let x_2659 : f32 = u_xlat1.y;
  let x_2661 : f32 = u_xlat67.x;
  u_xlat1.x = (x_2659 * x_2661);
  let x_2664 : vec2<f32> = u_xlat1;
  let x_2665 : vec2<f32> = u_xlat66;
  u_xlat68 = (x_2664 + x_2665);
  let x_2667 : f32 = u_xlat205;
  let x_2669 : f32 = u_xlat65.x;
  u_xlat204 = min(x_2667, x_2669);
  let x_2671 : f32 = u_xlat137;
  let x_2672 : f32 = u_xlat0;
  let x_2674 : f32 = u_xlat204;
  u_xlat1.x = ((x_2671 * x_2672) + -(x_2674));
  let x_2678 : f32 = u_xlat204;
  let x_2681 : vec4<f32> = u_xlat65;
  let x_2683 : vec2<f32> = (-(vec2<f32>(x_2678, x_2678)) + vec2<f32>(x_2681.x, x_2681.z));
  let x_2684 : vec4<f32> = u_xlat65;
  u_xlat65 = vec4<f32>(x_2683.x, x_2683.y, x_2684.z, x_2684.w);
  let x_2687 : f32 = u_xlat1.x;
  let x_2689 : f32 = u_xlat65.y;
  u_xlat1.y = min(x_2687, x_2689);
  let x_2693 : f32 = u_xlat1.y;
  let x_2696 : f32 = u_xlat65.y;
  u_xlat65.z = (-(x_2693) + x_2696);
  let x_2700 : f32 = u_xlat1.y;
  let x_2702 : f32 = u_xlat67.y;
  u_xlat1.x = (x_2700 * x_2702);
  let x_2705 : vec2<f32> = u_xlat68;
  let x_2706 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2705 + x_2706);
  let x_2709 : f32 = u_xlat70.x;
  let x_2711 : f32 = u_xlat65.x;
  u_xlat204 = min(x_2709, x_2711);
  let x_2714 : f32 = u_xlat2.x;
  let x_2715 : f32 = u_xlat0;
  let x_2717 : f32 = u_xlat204;
  u_xlat1.x = ((x_2714 * x_2715) + -(x_2717));
  let x_2721 : f32 = u_xlat204;
  let x_2724 : vec4<f32> = u_xlat65;
  let x_2726 : vec2<f32> = (-(vec2<f32>(x_2721, x_2721)) + vec2<f32>(x_2724.x, x_2724.z));
  let x_2727 : vec4<f32> = u_xlat65;
  u_xlat65 = vec4<f32>(x_2726.x, x_2726.y, x_2727.z, x_2727.w);
  let x_2730 : f32 = u_xlat1.x;
  let x_2732 : f32 = u_xlat65.y;
  u_xlat1.y = min(x_2730, x_2732);
  let x_2736 : f32 = u_xlat1.y;
  let x_2739 : f32 = u_xlat65.y;
  u_xlat65.z = (-(x_2736) + x_2739);
  let x_2743 : f32 = u_xlat1.y;
  let x_2745 : f32 = u_xlat67.z;
  u_xlat1.x = (x_2743 * x_2745);
  let x_2748 : vec2<f32> = u_xlat68;
  let x_2749 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2748 + x_2749);
  let x_2752 : f32 = u_xlat70.z;
  let x_2754 : f32 = u_xlat65.x;
  u_xlat204 = min(x_2752, x_2754);
  let x_2757 : f32 = u_xlat2.z;
  let x_2758 : f32 = u_xlat0;
  let x_2760 : f32 = u_xlat204;
  u_xlat1.x = ((x_2757 * x_2758) + -(x_2760));
  let x_2764 : f32 = u_xlat204;
  let x_2767 : vec4<f32> = u_xlat65;
  let x_2769 : vec2<f32> = (-(vec2<f32>(x_2764, x_2764)) + vec2<f32>(x_2767.x, x_2767.z));
  let x_2770 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2769.x, x_2769.y, x_2770.z);
  let x_2773 : f32 = u_xlat1.x;
  let x_2775 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2773, x_2775);
  let x_2779 : f32 = u_xlat1.y;
  let x_2782 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2779) + x_2782);
  let x_2786 : f32 = u_xlat1.y;
  let x_2789 : f32 = u_xlat67.w;
  u_xlat1.x = (x_2786 * x_2789);
  let x_2792 : vec2<f32> = u_xlat68;
  let x_2793 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2792 + x_2793);
  let x_2796 : f32 = u_xlat71.x;
  let x_2798 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2796, x_2798);
  let x_2801 : f32 = u_xlat3.x;
  let x_2802 : f32 = u_xlat0;
  let x_2804 : f32 = u_xlat204;
  u_xlat1.x = ((x_2801 * x_2802) + -(x_2804));
  let x_2808 : f32 = u_xlat204;
  let x_2811 : vec3<f32> = u_xlat2;
  let x_2813 : vec2<f32> = (-(vec2<f32>(x_2808, x_2808)) + vec2<f32>(x_2811.x, x_2811.z));
  let x_2814 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2813.x, x_2813.y, x_2814.z);
  let x_2817 : f32 = u_xlat1.x;
  let x_2819 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2817, x_2819);
  let x_2823 : f32 = u_xlat1.y;
  let x_2826 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2823) + x_2826);
  let x_2830 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat65 = (-(vec4<f32>(x_2830.y, x_2830.y, x_2830.y, x_2830.y)) + vec4<f32>(0.0390625f, 0.046875f, 0.0546875f, 0.0625f));
  let x_2839 : vec4<f32> = u_xlat65;
  let x_2841 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat65 = (x_2839 / vec4<f32>(x_2841.x, x_2841.x, x_2841.x, x_2841.x));
  let x_2844 : vec4<f32> = u_xlat65;
  u_xlat65 = exp2(x_2844);
  let x_2847 : f32 = u_xlat1.y;
  let x_2849 : f32 = u_xlat65.x;
  u_xlat1.x = (x_2847 * x_2849);
  let x_2852 : vec2<f32> = u_xlat68;
  let x_2853 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2852 + x_2853);
  let x_2856 : f32 = u_xlat71.z;
  let x_2858 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2856, x_2858);
  let x_2861 : f32 = u_xlat3.z;
  let x_2862 : f32 = u_xlat0;
  let x_2864 : f32 = u_xlat204;
  u_xlat1.x = ((x_2861 * x_2862) + -(x_2864));
  let x_2868 : f32 = u_xlat204;
  let x_2871 : vec3<f32> = u_xlat2;
  let x_2873 : vec2<f32> = (-(vec2<f32>(x_2868, x_2868)) + vec2<f32>(x_2871.x, x_2871.z));
  let x_2874 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2873.x, x_2873.y, x_2874.z);
  let x_2877 : f32 = u_xlat1.x;
  let x_2879 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2877, x_2879);
  let x_2883 : f32 = u_xlat1.y;
  let x_2886 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2883) + x_2886);
  let x_2890 : f32 = u_xlat1.y;
  let x_2892 : f32 = u_xlat65.y;
  u_xlat1.x = (x_2890 * x_2892);
  let x_2895 : vec2<f32> = u_xlat68;
  let x_2896 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2895 + x_2896);
  let x_2899 : f32 = u_xlat72.x;
  let x_2901 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2899, x_2901);
  let x_2904 : f32 = u_xlat4.x;
  let x_2905 : f32 = u_xlat0;
  let x_2907 : f32 = u_xlat204;
  u_xlat1.x = ((x_2904 * x_2905) + -(x_2907));
  let x_2911 : f32 = u_xlat204;
  let x_2914 : vec3<f32> = u_xlat2;
  let x_2916 : vec2<f32> = (-(vec2<f32>(x_2911, x_2911)) + vec2<f32>(x_2914.x, x_2914.z));
  let x_2917 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2916.x, x_2916.y, x_2917.z);
  let x_2920 : f32 = u_xlat1.x;
  let x_2922 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2920, x_2922);
  let x_2926 : f32 = u_xlat1.y;
  let x_2929 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2926) + x_2929);
  let x_2933 : f32 = u_xlat1.y;
  let x_2935 : f32 = u_xlat65.z;
  u_xlat1.x = (x_2933 * x_2935);
  let x_2938 : vec2<f32> = u_xlat68;
  let x_2939 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2938 + x_2939);
  let x_2942 : f32 = u_xlat72.z;
  let x_2944 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2942, x_2944);
  let x_2947 : f32 = u_xlat4.z;
  let x_2948 : f32 = u_xlat0;
  let x_2950 : f32 = u_xlat204;
  u_xlat1.x = ((x_2947 * x_2948) + -(x_2950));
  let x_2954 : f32 = u_xlat204;
  let x_2957 : vec3<f32> = u_xlat2;
  let x_2959 : vec2<f32> = (-(vec2<f32>(x_2954, x_2954)) + vec2<f32>(x_2957.x, x_2957.z));
  let x_2960 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2959.x, x_2959.y, x_2960.z);
  let x_2963 : f32 = u_xlat1.x;
  let x_2965 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2963, x_2965);
  let x_2969 : f32 = u_xlat1.y;
  let x_2972 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2969) + x_2972);
  let x_2976 : f32 = u_xlat1.y;
  let x_2978 : f32 = u_xlat65.w;
  u_xlat1.x = (x_2976 * x_2978);
  let x_2981 : vec2<f32> = u_xlat68;
  let x_2982 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2981 + x_2982);
  let x_2985 : f32 = u_xlat73.x;
  let x_2987 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2985, x_2987);
  let x_2990 : f32 = u_xlat5.x;
  let x_2991 : f32 = u_xlat0;
  let x_2993 : f32 = u_xlat204;
  u_xlat1.x = ((x_2990 * x_2991) + -(x_2993));
  let x_2997 : f32 = u_xlat204;
  let x_3000 : vec3<f32> = u_xlat2;
  let x_3002 : vec2<f32> = (-(vec2<f32>(x_2997, x_2997)) + vec2<f32>(x_3000.x, x_3000.z));
  let x_3003 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3002.x, x_3002.y, x_3003.z);
  let x_3006 : f32 = u_xlat1.x;
  let x_3008 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3006, x_3008);
  let x_3012 : f32 = u_xlat1.y;
  let x_3015 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3012) + x_3015);
  let x_3019 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3019.y, x_3019.y, x_3019.y, x_3019.y)) + vec4<f32>(0.0703125f, 0.078125f, 0.0859375f, 0.09375f));
  let x_3028 : vec4<f32> = u_xlat3;
  let x_3030 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_3028 / vec4<f32>(x_3030.x, x_3030.x, x_3030.x, x_3030.x));
  let x_3033 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3033);
  let x_3036 : f32 = u_xlat1.y;
  let x_3038 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3036 * x_3038);
  let x_3041 : vec2<f32> = u_xlat68;
  let x_3042 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3041 + x_3042);
  let x_3045 : f32 = u_xlat73.z;
  let x_3047 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3045, x_3047);
  let x_3050 : f32 = u_xlat5.z;
  let x_3051 : f32 = u_xlat0;
  let x_3053 : f32 = u_xlat204;
  u_xlat1.x = ((x_3050 * x_3051) + -(x_3053));
  let x_3057 : f32 = u_xlat204;
  let x_3060 : vec3<f32> = u_xlat2;
  let x_3062 : vec2<f32> = (-(vec2<f32>(x_3057, x_3057)) + vec2<f32>(x_3060.x, x_3060.z));
  let x_3063 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3062.x, x_3062.y, x_3063.z);
  let x_3066 : f32 = u_xlat1.x;
  let x_3068 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3066, x_3068);
  let x_3072 : f32 = u_xlat1.y;
  let x_3075 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3072) + x_3075);
  let x_3079 : f32 = u_xlat1.y;
  let x_3081 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3079 * x_3081);
  let x_3084 : vec2<f32> = u_xlat68;
  let x_3085 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3084 + x_3085);
  let x_3088 : f32 = u_xlat74.x;
  let x_3090 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3088, x_3090);
  let x_3093 : f32 = u_xlat6.x;
  let x_3094 : f32 = u_xlat0;
  let x_3096 : f32 = u_xlat204;
  u_xlat1.x = ((x_3093 * x_3094) + -(x_3096));
  let x_3100 : f32 = u_xlat204;
  let x_3103 : vec3<f32> = u_xlat2;
  let x_3105 : vec2<f32> = (-(vec2<f32>(x_3100, x_3100)) + vec2<f32>(x_3103.x, x_3103.z));
  let x_3106 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3105.x, x_3105.y, x_3106.z);
  let x_3109 : f32 = u_xlat1.x;
  let x_3111 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3109, x_3111);
  let x_3115 : f32 = u_xlat1.y;
  let x_3118 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3115) + x_3118);
  let x_3122 : f32 = u_xlat1.y;
  let x_3124 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3122 * x_3124);
  let x_3127 : vec2<f32> = u_xlat68;
  let x_3128 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3127 + x_3128);
  let x_3131 : f32 = u_xlat74.z;
  let x_3133 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3131, x_3133);
  let x_3136 : f32 = u_xlat6.z;
  let x_3137 : f32 = u_xlat0;
  let x_3139 : f32 = u_xlat204;
  u_xlat1.x = ((x_3136 * x_3137) + -(x_3139));
  let x_3143 : f32 = u_xlat204;
  let x_3146 : vec3<f32> = u_xlat2;
  let x_3148 : vec2<f32> = (-(vec2<f32>(x_3143, x_3143)) + vec2<f32>(x_3146.x, x_3146.z));
  let x_3149 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3148.x, x_3148.y, x_3149.z);
  let x_3152 : f32 = u_xlat1.x;
  let x_3154 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3152, x_3154);
  let x_3158 : f32 = u_xlat1.y;
  let x_3161 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3158) + x_3161);
  let x_3165 : f32 = u_xlat1.y;
  let x_3167 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3165 * x_3167);
  let x_3170 : vec2<f32> = u_xlat68;
  let x_3171 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3170 + x_3171);
  let x_3174 : f32 = u_xlat75.x;
  let x_3176 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3174, x_3176);
  let x_3179 : f32 = u_xlat7.x;
  let x_3180 : f32 = u_xlat0;
  let x_3182 : f32 = u_xlat204;
  u_xlat1.x = ((x_3179 * x_3180) + -(x_3182));
  let x_3186 : f32 = u_xlat204;
  let x_3189 : vec3<f32> = u_xlat2;
  let x_3191 : vec2<f32> = (-(vec2<f32>(x_3186, x_3186)) + vec2<f32>(x_3189.x, x_3189.z));
  let x_3192 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3191.x, x_3191.y, x_3192.z);
  let x_3195 : f32 = u_xlat1.x;
  let x_3197 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3195, x_3197);
  let x_3201 : f32 = u_xlat1.y;
  let x_3204 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3201) + x_3204);
  let x_3208 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3208.y, x_3208.y, x_3208.y, x_3208.y)) + vec4<f32>(0.1015625f, 0.109375f, 0.1171875f, 0.125f));
  let x_3217 : vec4<f32> = u_xlat3;
  let x_3219 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_3217 / vec4<f32>(x_3219.x, x_3219.x, x_3219.x, x_3219.x));
  let x_3222 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3222);
  let x_3225 : f32 = u_xlat1.y;
  let x_3227 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3225 * x_3227);
  let x_3230 : vec2<f32> = u_xlat68;
  let x_3231 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3230 + x_3231);
  let x_3234 : f32 = u_xlat75.z;
  let x_3236 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3234, x_3236);
  let x_3239 : f32 = u_xlat7.z;
  let x_3240 : f32 = u_xlat0;
  let x_3242 : f32 = u_xlat204;
  u_xlat1.x = ((x_3239 * x_3240) + -(x_3242));
  let x_3246 : f32 = u_xlat204;
  let x_3249 : vec3<f32> = u_xlat2;
  let x_3251 : vec2<f32> = (-(vec2<f32>(x_3246, x_3246)) + vec2<f32>(x_3249.x, x_3249.z));
  let x_3252 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3251.x, x_3251.y, x_3252.z);
  let x_3255 : f32 = u_xlat1.x;
  let x_3257 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3255, x_3257);
  let x_3261 : f32 = u_xlat1.y;
  let x_3264 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3261) + x_3264);
  let x_3268 : f32 = u_xlat1.y;
  let x_3270 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3268 * x_3270);
  let x_3273 : vec2<f32> = u_xlat68;
  let x_3274 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3273 + x_3274);
  let x_3277 : f32 = u_xlat76.x;
  let x_3279 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3277, x_3279);
  let x_3282 : f32 = u_xlat8.x;
  let x_3283 : f32 = u_xlat0;
  let x_3285 : f32 = u_xlat204;
  u_xlat1.x = ((x_3282 * x_3283) + -(x_3285));
  let x_3289 : f32 = u_xlat204;
  let x_3292 : vec3<f32> = u_xlat2;
  let x_3294 : vec2<f32> = (-(vec2<f32>(x_3289, x_3289)) + vec2<f32>(x_3292.x, x_3292.z));
  let x_3295 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3294.x, x_3294.y, x_3295.z);
  let x_3298 : f32 = u_xlat1.x;
  let x_3300 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3298, x_3300);
  let x_3304 : f32 = u_xlat1.y;
  let x_3307 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3304) + x_3307);
  let x_3311 : f32 = u_xlat1.y;
  let x_3313 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3311 * x_3313);
  let x_3316 : vec2<f32> = u_xlat68;
  let x_3317 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3316 + x_3317);
  let x_3320 : f32 = u_xlat76.z;
  let x_3322 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3320, x_3322);
  let x_3325 : f32 = u_xlat8.z;
  let x_3326 : f32 = u_xlat0;
  let x_3328 : f32 = u_xlat204;
  u_xlat1.x = ((x_3325 * x_3326) + -(x_3328));
  let x_3332 : f32 = u_xlat204;
  let x_3335 : vec3<f32> = u_xlat2;
  let x_3337 : vec2<f32> = (-(vec2<f32>(x_3332, x_3332)) + vec2<f32>(x_3335.x, x_3335.z));
  let x_3338 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3337.x, x_3337.y, x_3338.z);
  let x_3341 : f32 = u_xlat1.x;
  let x_3343 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3341, x_3343);
  let x_3347 : f32 = u_xlat1.y;
  let x_3350 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3347) + x_3350);
  let x_3354 : f32 = u_xlat1.y;
  let x_3356 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3354 * x_3356);
  let x_3359 : vec2<f32> = u_xlat68;
  let x_3360 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3359 + x_3360);
  let x_3363 : f32 = u_xlat77.x;
  let x_3365 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3363, x_3365);
  let x_3368 : f32 = u_xlat9.x;
  let x_3369 : f32 = u_xlat0;
  let x_3371 : f32 = u_xlat204;
  u_xlat1.x = ((x_3368 * x_3369) + -(x_3371));
  let x_3375 : f32 = u_xlat204;
  let x_3378 : vec3<f32> = u_xlat2;
  let x_3380 : vec2<f32> = (-(vec2<f32>(x_3375, x_3375)) + vec2<f32>(x_3378.x, x_3378.z));
  let x_3381 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3380.x, x_3380.y, x_3381.z);
  let x_3384 : f32 = u_xlat1.x;
  let x_3386 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3384, x_3386);
  let x_3390 : f32 = u_xlat1.y;
  let x_3393 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3390) + x_3393);
  let x_3397 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3397.y, x_3397.y, x_3397.y, x_3397.y)) + vec4<f32>(0.1328125f, 0.140625f, 0.1484375f, 0.15625f));
  let x_3406 : vec4<f32> = u_xlat3;
  let x_3408 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_3406 / vec4<f32>(x_3408.x, x_3408.x, x_3408.x, x_3408.x));
  let x_3411 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3411);
  let x_3414 : f32 = u_xlat1.y;
  let x_3416 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3414 * x_3416);
  let x_3419 : vec2<f32> = u_xlat68;
  let x_3420 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3419 + x_3420);
  let x_3423 : f32 = u_xlat77.z;
  let x_3425 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3423, x_3425);
  let x_3428 : f32 = u_xlat9.z;
  let x_3429 : f32 = u_xlat0;
  let x_3431 : f32 = u_xlat204;
  u_xlat1.x = ((x_3428 * x_3429) + -(x_3431));
  let x_3435 : f32 = u_xlat204;
  let x_3438 : vec3<f32> = u_xlat2;
  let x_3440 : vec2<f32> = (-(vec2<f32>(x_3435, x_3435)) + vec2<f32>(x_3438.x, x_3438.z));
  let x_3441 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3440.x, x_3440.y, x_3441.z);
  let x_3444 : f32 = u_xlat1.x;
  let x_3446 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3444, x_3446);
  let x_3450 : f32 = u_xlat1.y;
  let x_3453 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3450) + x_3453);
  let x_3457 : f32 = u_xlat1.y;
  let x_3459 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3457 * x_3459);
  let x_3462 : vec2<f32> = u_xlat68;
  let x_3463 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3462 + x_3463);
  let x_3466 : f32 = u_xlat78.x;
  let x_3468 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3466, x_3468);
  let x_3471 : f32 = u_xlat10.x;
  let x_3472 : f32 = u_xlat0;
  let x_3474 : f32 = u_xlat204;
  u_xlat1.x = ((x_3471 * x_3472) + -(x_3474));
  let x_3478 : f32 = u_xlat204;
  let x_3481 : vec3<f32> = u_xlat2;
  let x_3483 : vec2<f32> = (-(vec2<f32>(x_3478, x_3478)) + vec2<f32>(x_3481.x, x_3481.z));
  let x_3484 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3483.x, x_3483.y, x_3484.z);
  let x_3487 : f32 = u_xlat1.x;
  let x_3489 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3487, x_3489);
  let x_3493 : f32 = u_xlat1.y;
  let x_3496 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3493) + x_3496);
  let x_3500 : f32 = u_xlat1.y;
  let x_3502 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3500 * x_3502);
  let x_3505 : vec2<f32> = u_xlat68;
  let x_3506 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3505 + x_3506);
  let x_3509 : f32 = u_xlat78.z;
  let x_3511 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3509, x_3511);
  let x_3514 : f32 = u_xlat10.z;
  let x_3515 : f32 = u_xlat0;
  let x_3517 : f32 = u_xlat204;
  u_xlat1.x = ((x_3514 * x_3515) + -(x_3517));
  let x_3521 : f32 = u_xlat204;
  let x_3524 : vec3<f32> = u_xlat2;
  let x_3526 : vec2<f32> = (-(vec2<f32>(x_3521, x_3521)) + vec2<f32>(x_3524.x, x_3524.z));
  let x_3527 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3526.x, x_3526.y, x_3527.z);
  let x_3530 : f32 = u_xlat1.x;
  let x_3532 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3530, x_3532);
  let x_3536 : f32 = u_xlat1.y;
  let x_3539 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3536) + x_3539);
  let x_3543 : f32 = u_xlat1.y;
  let x_3545 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3543 * x_3545);
  let x_3548 : vec2<f32> = u_xlat68;
  let x_3549 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3548 + x_3549);
  let x_3552 : f32 = u_xlat79.x;
  let x_3554 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3552, x_3554);
  let x_3557 : f32 = u_xlat11.x;
  let x_3558 : f32 = u_xlat0;
  let x_3560 : f32 = u_xlat204;
  u_xlat1.x = ((x_3557 * x_3558) + -(x_3560));
  let x_3564 : f32 = u_xlat204;
  let x_3567 : vec3<f32> = u_xlat2;
  let x_3569 : vec2<f32> = (-(vec2<f32>(x_3564, x_3564)) + vec2<f32>(x_3567.x, x_3567.z));
  let x_3570 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3569.x, x_3569.y, x_3570.z);
  let x_3573 : f32 = u_xlat1.x;
  let x_3575 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3573, x_3575);
  let x_3579 : f32 = u_xlat1.y;
  let x_3582 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3579) + x_3582);
  let x_3586 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3586.y, x_3586.y, x_3586.y, x_3586.y)) + vec4<f32>(0.1640625f, 0.171875f, 0.1796875f, 0.1875f));
  let x_3595 : vec4<f32> = u_xlat3;
  let x_3597 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_3595 / vec4<f32>(x_3597.x, x_3597.x, x_3597.x, x_3597.x));
  let x_3600 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3600);
  let x_3603 : f32 = u_xlat1.y;
  let x_3605 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3603 * x_3605);
  let x_3608 : vec2<f32> = u_xlat68;
  let x_3609 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3608 + x_3609);
  let x_3612 : f32 = u_xlat79.z;
  let x_3614 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3612, x_3614);
  let x_3617 : f32 = u_xlat11.z;
  let x_3618 : f32 = u_xlat0;
  let x_3620 : f32 = u_xlat204;
  u_xlat1.x = ((x_3617 * x_3618) + -(x_3620));
  let x_3624 : f32 = u_xlat204;
  let x_3627 : vec3<f32> = u_xlat2;
  let x_3629 : vec2<f32> = (-(vec2<f32>(x_3624, x_3624)) + vec2<f32>(x_3627.x, x_3627.z));
  let x_3630 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3629.x, x_3629.y, x_3630.z);
  let x_3633 : f32 = u_xlat1.x;
  let x_3635 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3633, x_3635);
  let x_3639 : f32 = u_xlat1.y;
  let x_3642 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3639) + x_3642);
  let x_3646 : f32 = u_xlat1.y;
  let x_3648 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3646 * x_3648);
  let x_3651 : vec2<f32> = u_xlat68;
  let x_3652 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3651 + x_3652);
  let x_3655 : f32 = u_xlat80.x;
  let x_3657 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3655, x_3657);
  let x_3660 : f32 = u_xlat12.x;
  let x_3661 : f32 = u_xlat0;
  let x_3663 : f32 = u_xlat204;
  u_xlat1.x = ((x_3660 * x_3661) + -(x_3663));
  let x_3667 : f32 = u_xlat204;
  let x_3670 : vec3<f32> = u_xlat2;
  let x_3672 : vec2<f32> = (-(vec2<f32>(x_3667, x_3667)) + vec2<f32>(x_3670.x, x_3670.z));
  let x_3673 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3672.x, x_3672.y, x_3673.z);
  let x_3676 : f32 = u_xlat1.x;
  let x_3678 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3676, x_3678);
  let x_3682 : f32 = u_xlat1.y;
  let x_3685 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3682) + x_3685);
  let x_3689 : f32 = u_xlat1.y;
  let x_3691 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3689 * x_3691);
  let x_3694 : vec2<f32> = u_xlat68;
  let x_3695 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3694 + x_3695);
  let x_3698 : f32 = u_xlat80.z;
  let x_3700 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3698, x_3700);
  let x_3703 : f32 = u_xlat12.z;
  let x_3704 : f32 = u_xlat0;
  let x_3706 : f32 = u_xlat204;
  u_xlat1.x = ((x_3703 * x_3704) + -(x_3706));
  let x_3710 : f32 = u_xlat204;
  let x_3713 : vec3<f32> = u_xlat2;
  let x_3715 : vec2<f32> = (-(vec2<f32>(x_3710, x_3710)) + vec2<f32>(x_3713.x, x_3713.z));
  let x_3716 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3715.x, x_3715.y, x_3716.z);
  let x_3719 : f32 = u_xlat1.x;
  let x_3721 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3719, x_3721);
  let x_3725 : f32 = u_xlat1.y;
  let x_3728 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3725) + x_3728);
  let x_3732 : f32 = u_xlat1.y;
  let x_3734 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3732 * x_3734);
  let x_3737 : vec2<f32> = u_xlat68;
  let x_3738 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3737 + x_3738);
  let x_3741 : f32 = u_xlat81.x;
  let x_3743 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3741, x_3743);
  let x_3746 : f32 = u_xlat13.x;
  let x_3747 : f32 = u_xlat0;
  let x_3749 : f32 = u_xlat204;
  u_xlat1.x = ((x_3746 * x_3747) + -(x_3749));
  let x_3753 : f32 = u_xlat204;
  let x_3756 : vec3<f32> = u_xlat2;
  let x_3758 : vec2<f32> = (-(vec2<f32>(x_3753, x_3753)) + vec2<f32>(x_3756.x, x_3756.z));
  let x_3759 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3758.x, x_3758.y, x_3759.z);
  let x_3762 : f32 = u_xlat1.x;
  let x_3764 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3762, x_3764);
  let x_3768 : f32 = u_xlat1.y;
  let x_3771 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3768) + x_3771);
  let x_3775 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3775.y, x_3775.y, x_3775.y, x_3775.y)) + vec4<f32>(0.1953125f, 0.203125f, 0.2109375f, 0.21875f));
  let x_3784 : vec4<f32> = u_xlat3;
  let x_3786 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_3784 / vec4<f32>(x_3786.x, x_3786.x, x_3786.x, x_3786.x));
  let x_3789 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3789);
  let x_3792 : f32 = u_xlat1.y;
  let x_3794 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3792 * x_3794);
  let x_3797 : vec2<f32> = u_xlat68;
  let x_3798 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3797 + x_3798);
  let x_3801 : f32 = u_xlat81.z;
  let x_3803 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3801, x_3803);
  let x_3806 : f32 = u_xlat13.z;
  let x_3807 : f32 = u_xlat0;
  let x_3809 : f32 = u_xlat204;
  u_xlat1.x = ((x_3806 * x_3807) + -(x_3809));
  let x_3813 : f32 = u_xlat204;
  let x_3816 : vec3<f32> = u_xlat2;
  let x_3818 : vec2<f32> = (-(vec2<f32>(x_3813, x_3813)) + vec2<f32>(x_3816.x, x_3816.z));
  let x_3819 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3818.x, x_3818.y, x_3819.z);
  let x_3822 : f32 = u_xlat1.x;
  let x_3824 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3822, x_3824);
  let x_3828 : f32 = u_xlat1.y;
  let x_3831 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3828) + x_3831);
  let x_3835 : f32 = u_xlat1.y;
  let x_3837 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3835 * x_3837);
  let x_3840 : vec2<f32> = u_xlat68;
  let x_3841 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3840 + x_3841);
  let x_3844 : f32 = u_xlat82.x;
  let x_3846 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3844, x_3846);
  let x_3849 : f32 = u_xlat14.x;
  let x_3850 : f32 = u_xlat0;
  let x_3852 : f32 = u_xlat204;
  u_xlat1.x = ((x_3849 * x_3850) + -(x_3852));
  let x_3856 : f32 = u_xlat204;
  let x_3859 : vec3<f32> = u_xlat2;
  let x_3861 : vec2<f32> = (-(vec2<f32>(x_3856, x_3856)) + vec2<f32>(x_3859.x, x_3859.z));
  let x_3862 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3861.x, x_3861.y, x_3862.z);
  let x_3865 : f32 = u_xlat1.x;
  let x_3867 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3865, x_3867);
  let x_3871 : f32 = u_xlat1.y;
  let x_3874 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3871) + x_3874);
  let x_3878 : f32 = u_xlat1.y;
  let x_3880 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3878 * x_3880);
  let x_3883 : vec2<f32> = u_xlat68;
  let x_3884 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3883 + x_3884);
  let x_3887 : f32 = u_xlat82.z;
  let x_3889 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3887, x_3889);
  let x_3892 : f32 = u_xlat14.z;
  let x_3893 : f32 = u_xlat0;
  let x_3895 : f32 = u_xlat204;
  u_xlat1.x = ((x_3892 * x_3893) + -(x_3895));
  let x_3899 : f32 = u_xlat204;
  let x_3902 : vec3<f32> = u_xlat2;
  let x_3904 : vec2<f32> = (-(vec2<f32>(x_3899, x_3899)) + vec2<f32>(x_3902.x, x_3902.z));
  let x_3905 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3904.x, x_3904.y, x_3905.z);
  let x_3908 : f32 = u_xlat1.x;
  let x_3910 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3908, x_3910);
  let x_3914 : f32 = u_xlat1.y;
  let x_3917 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3914) + x_3917);
  let x_3921 : f32 = u_xlat1.y;
  let x_3923 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3921 * x_3923);
  let x_3926 : vec2<f32> = u_xlat68;
  let x_3927 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3926 + x_3927);
  let x_3930 : f32 = u_xlat83.x;
  let x_3932 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3930, x_3932);
  let x_3935 : f32 = u_xlat15.x;
  let x_3936 : f32 = u_xlat0;
  let x_3938 : f32 = u_xlat204;
  u_xlat1.x = ((x_3935 * x_3936) + -(x_3938));
  let x_3942 : f32 = u_xlat204;
  let x_3945 : vec3<f32> = u_xlat2;
  let x_3947 : vec2<f32> = (-(vec2<f32>(x_3942, x_3942)) + vec2<f32>(x_3945.x, x_3945.z));
  let x_3948 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3947.x, x_3947.y, x_3948.z);
  let x_3951 : f32 = u_xlat1.x;
  let x_3953 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3951, x_3953);
  let x_3957 : f32 = u_xlat1.y;
  let x_3960 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3957) + x_3960);
  let x_3964 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3964.y, x_3964.y, x_3964.y, x_3964.y)) + vec4<f32>(0.2265625f, 0.234375f, 0.2421875f, 0.25f));
  let x_3973 : vec4<f32> = u_xlat3;
  let x_3975 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_3973 / vec4<f32>(x_3975.x, x_3975.x, x_3975.x, x_3975.x));
  let x_3978 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3978);
  let x_3981 : f32 = u_xlat1.y;
  let x_3983 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3981 * x_3983);
  let x_3986 : vec2<f32> = u_xlat68;
  let x_3987 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3986 + x_3987);
  let x_3990 : f32 = u_xlat83.z;
  let x_3992 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3990, x_3992);
  let x_3995 : f32 = u_xlat15.z;
  let x_3996 : f32 = u_xlat0;
  let x_3998 : f32 = u_xlat204;
  u_xlat1.x = ((x_3995 * x_3996) + -(x_3998));
  let x_4002 : f32 = u_xlat204;
  let x_4005 : vec3<f32> = u_xlat2;
  let x_4007 : vec2<f32> = (-(vec2<f32>(x_4002, x_4002)) + vec2<f32>(x_4005.x, x_4005.z));
  let x_4008 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4007.x, x_4007.y, x_4008.z);
  let x_4011 : f32 = u_xlat1.x;
  let x_4013 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4011, x_4013);
  let x_4017 : f32 = u_xlat1.y;
  let x_4020 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4017) + x_4020);
  let x_4024 : f32 = u_xlat1.y;
  let x_4026 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4024 * x_4026);
  let x_4029 : vec2<f32> = u_xlat68;
  let x_4030 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4029 + x_4030);
  let x_4033 : f32 = u_xlat84.x;
  let x_4035 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4033, x_4035);
  let x_4038 : f32 = u_xlat16.x;
  let x_4039 : f32 = u_xlat0;
  let x_4041 : f32 = u_xlat204;
  u_xlat1.x = ((x_4038 * x_4039) + -(x_4041));
  let x_4045 : f32 = u_xlat204;
  let x_4048 : vec3<f32> = u_xlat2;
  let x_4050 : vec2<f32> = (-(vec2<f32>(x_4045, x_4045)) + vec2<f32>(x_4048.x, x_4048.z));
  let x_4051 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4050.x, x_4050.y, x_4051.z);
  let x_4054 : f32 = u_xlat1.x;
  let x_4056 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4054, x_4056);
  let x_4060 : f32 = u_xlat1.y;
  let x_4063 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4060) + x_4063);
  let x_4067 : f32 = u_xlat1.y;
  let x_4069 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4067 * x_4069);
  let x_4072 : vec2<f32> = u_xlat68;
  let x_4073 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4072 + x_4073);
  let x_4076 : f32 = u_xlat84.z;
  let x_4078 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4076, x_4078);
  let x_4081 : f32 = u_xlat16.z;
  let x_4082 : f32 = u_xlat0;
  let x_4084 : f32 = u_xlat204;
  u_xlat1.x = ((x_4081 * x_4082) + -(x_4084));
  let x_4088 : f32 = u_xlat204;
  let x_4091 : vec3<f32> = u_xlat2;
  let x_4093 : vec2<f32> = (-(vec2<f32>(x_4088, x_4088)) + vec2<f32>(x_4091.x, x_4091.z));
  let x_4094 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4093.x, x_4093.y, x_4094.z);
  let x_4097 : f32 = u_xlat1.x;
  let x_4099 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4097, x_4099);
  let x_4103 : f32 = u_xlat1.y;
  let x_4106 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4103) + x_4106);
  let x_4110 : f32 = u_xlat1.y;
  let x_4112 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4110 * x_4112);
  let x_4115 : vec2<f32> = u_xlat68;
  let x_4116 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4115 + x_4116);
  let x_4119 : f32 = u_xlat85.x;
  let x_4121 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4119, x_4121);
  let x_4124 : f32 = u_xlat17.x;
  let x_4125 : f32 = u_xlat0;
  let x_4127 : f32 = u_xlat204;
  u_xlat1.x = ((x_4124 * x_4125) + -(x_4127));
  let x_4131 : f32 = u_xlat204;
  let x_4134 : vec3<f32> = u_xlat2;
  let x_4136 : vec2<f32> = (-(vec2<f32>(x_4131, x_4131)) + vec2<f32>(x_4134.x, x_4134.z));
  let x_4137 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4136.x, x_4136.y, x_4137.z);
  let x_4140 : f32 = u_xlat1.x;
  let x_4142 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4140, x_4142);
  let x_4146 : f32 = u_xlat1.y;
  let x_4149 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4146) + x_4149);
  let x_4153 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4153.y, x_4153.y, x_4153.y, x_4153.y)) + vec4<f32>(0.2578125f, 0.265625f, 0.2734375f, 0.28125f));
  let x_4162 : vec4<f32> = u_xlat3;
  let x_4164 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_4162 / vec4<f32>(x_4164.x, x_4164.x, x_4164.x, x_4164.x));
  let x_4167 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4167);
  let x_4170 : f32 = u_xlat1.y;
  let x_4172 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4170 * x_4172);
  let x_4175 : vec2<f32> = u_xlat68;
  let x_4176 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4175 + x_4176);
  let x_4179 : f32 = u_xlat85.z;
  let x_4181 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4179, x_4181);
  let x_4184 : f32 = u_xlat17.z;
  let x_4185 : f32 = u_xlat0;
  let x_4187 : f32 = u_xlat204;
  u_xlat1.x = ((x_4184 * x_4185) + -(x_4187));
  let x_4191 : f32 = u_xlat204;
  let x_4194 : vec3<f32> = u_xlat2;
  let x_4196 : vec2<f32> = (-(vec2<f32>(x_4191, x_4191)) + vec2<f32>(x_4194.x, x_4194.z));
  let x_4197 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4196.x, x_4196.y, x_4197.z);
  let x_4200 : f32 = u_xlat1.x;
  let x_4202 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4200, x_4202);
  let x_4206 : f32 = u_xlat1.y;
  let x_4209 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4206) + x_4209);
  let x_4213 : f32 = u_xlat1.y;
  let x_4215 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4213 * x_4215);
  let x_4218 : vec2<f32> = u_xlat68;
  let x_4219 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4218 + x_4219);
  let x_4222 : f32 = u_xlat86.x;
  let x_4224 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4222, x_4224);
  let x_4227 : f32 = u_xlat18.x;
  let x_4228 : f32 = u_xlat0;
  let x_4230 : f32 = u_xlat204;
  u_xlat1.x = ((x_4227 * x_4228) + -(x_4230));
  let x_4234 : f32 = u_xlat204;
  let x_4237 : vec3<f32> = u_xlat2;
  let x_4239 : vec2<f32> = (-(vec2<f32>(x_4234, x_4234)) + vec2<f32>(x_4237.x, x_4237.z));
  let x_4240 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4239.x, x_4239.y, x_4240.z);
  let x_4243 : f32 = u_xlat1.x;
  let x_4245 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4243, x_4245);
  let x_4249 : f32 = u_xlat1.y;
  let x_4252 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4249) + x_4252);
  let x_4256 : f32 = u_xlat1.y;
  let x_4258 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4256 * x_4258);
  let x_4261 : vec2<f32> = u_xlat68;
  let x_4262 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4261 + x_4262);
  let x_4265 : f32 = u_xlat86.z;
  let x_4267 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4265, x_4267);
  let x_4270 : f32 = u_xlat18.z;
  let x_4271 : f32 = u_xlat0;
  let x_4273 : f32 = u_xlat204;
  u_xlat1.x = ((x_4270 * x_4271) + -(x_4273));
  let x_4277 : f32 = u_xlat204;
  let x_4280 : vec3<f32> = u_xlat2;
  let x_4282 : vec2<f32> = (-(vec2<f32>(x_4277, x_4277)) + vec2<f32>(x_4280.x, x_4280.z));
  let x_4283 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4282.x, x_4282.y, x_4283.z);
  let x_4286 : f32 = u_xlat1.x;
  let x_4288 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4286, x_4288);
  let x_4292 : f32 = u_xlat1.y;
  let x_4295 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4292) + x_4295);
  let x_4299 : f32 = u_xlat1.y;
  let x_4301 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4299 * x_4301);
  let x_4304 : vec2<f32> = u_xlat68;
  let x_4305 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4304 + x_4305);
  let x_4308 : f32 = u_xlat87.x;
  let x_4310 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4308, x_4310);
  let x_4313 : f32 = u_xlat19.x;
  let x_4314 : f32 = u_xlat0;
  let x_4316 : f32 = u_xlat204;
  u_xlat1.x = ((x_4313 * x_4314) + -(x_4316));
  let x_4320 : f32 = u_xlat204;
  let x_4323 : vec3<f32> = u_xlat2;
  let x_4325 : vec2<f32> = (-(vec2<f32>(x_4320, x_4320)) + vec2<f32>(x_4323.x, x_4323.z));
  let x_4326 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4325.x, x_4325.y, x_4326.z);
  let x_4329 : f32 = u_xlat1.x;
  let x_4331 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4329, x_4331);
  let x_4335 : f32 = u_xlat1.y;
  let x_4338 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4335) + x_4338);
  let x_4342 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4342.y, x_4342.y, x_4342.y, x_4342.y)) + vec4<f32>(0.2890625f, 0.296875f, 0.3046875f, 0.3125f));
  let x_4351 : vec4<f32> = u_xlat3;
  let x_4353 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_4351 / vec4<f32>(x_4353.x, x_4353.x, x_4353.x, x_4353.x));
  let x_4356 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4356);
  let x_4359 : f32 = u_xlat1.y;
  let x_4361 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4359 * x_4361);
  let x_4364 : vec2<f32> = u_xlat68;
  let x_4365 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4364 + x_4365);
  let x_4368 : f32 = u_xlat87.z;
  let x_4370 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4368, x_4370);
  let x_4373 : f32 = u_xlat19.z;
  let x_4374 : f32 = u_xlat0;
  let x_4376 : f32 = u_xlat204;
  u_xlat1.x = ((x_4373 * x_4374) + -(x_4376));
  let x_4380 : f32 = u_xlat204;
  let x_4383 : vec3<f32> = u_xlat2;
  let x_4385 : vec2<f32> = (-(vec2<f32>(x_4380, x_4380)) + vec2<f32>(x_4383.x, x_4383.z));
  let x_4386 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4385.x, x_4385.y, x_4386.z);
  let x_4389 : f32 = u_xlat1.x;
  let x_4391 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4389, x_4391);
  let x_4395 : f32 = u_xlat1.y;
  let x_4398 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4395) + x_4398);
  let x_4402 : f32 = u_xlat1.y;
  let x_4404 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4402 * x_4404);
  let x_4407 : vec2<f32> = u_xlat68;
  let x_4408 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4407 + x_4408);
  let x_4411 : f32 = u_xlat88.x;
  let x_4413 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4411, x_4413);
  let x_4416 : f32 = u_xlat20.x;
  let x_4417 : f32 = u_xlat0;
  let x_4419 : f32 = u_xlat204;
  u_xlat1.x = ((x_4416 * x_4417) + -(x_4419));
  let x_4423 : f32 = u_xlat204;
  let x_4426 : vec3<f32> = u_xlat2;
  let x_4428 : vec2<f32> = (-(vec2<f32>(x_4423, x_4423)) + vec2<f32>(x_4426.x, x_4426.z));
  let x_4429 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4428.x, x_4428.y, x_4429.z);
  let x_4432 : f32 = u_xlat1.x;
  let x_4434 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4432, x_4434);
  let x_4438 : f32 = u_xlat1.y;
  let x_4441 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4438) + x_4441);
  let x_4445 : f32 = u_xlat1.y;
  let x_4447 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4445 * x_4447);
  let x_4450 : vec2<f32> = u_xlat68;
  let x_4451 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4450 + x_4451);
  let x_4454 : f32 = u_xlat88.z;
  let x_4456 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4454, x_4456);
  let x_4459 : f32 = u_xlat20.z;
  let x_4460 : f32 = u_xlat0;
  let x_4462 : f32 = u_xlat204;
  u_xlat1.x = ((x_4459 * x_4460) + -(x_4462));
  let x_4466 : f32 = u_xlat204;
  let x_4469 : vec3<f32> = u_xlat2;
  let x_4471 : vec2<f32> = (-(vec2<f32>(x_4466, x_4466)) + vec2<f32>(x_4469.x, x_4469.z));
  let x_4472 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4471.x, x_4471.y, x_4472.z);
  let x_4475 : f32 = u_xlat1.x;
  let x_4477 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4475, x_4477);
  let x_4481 : f32 = u_xlat1.y;
  let x_4484 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4481) + x_4484);
  let x_4488 : f32 = u_xlat1.y;
  let x_4490 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4488 * x_4490);
  let x_4493 : vec2<f32> = u_xlat68;
  let x_4494 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4493 + x_4494);
  let x_4497 : f32 = u_xlat89.x;
  let x_4499 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4497, x_4499);
  let x_4502 : f32 = u_xlat21.x;
  let x_4503 : f32 = u_xlat0;
  let x_4505 : f32 = u_xlat204;
  u_xlat1.x = ((x_4502 * x_4503) + -(x_4505));
  let x_4509 : f32 = u_xlat204;
  let x_4512 : vec3<f32> = u_xlat2;
  let x_4514 : vec2<f32> = (-(vec2<f32>(x_4509, x_4509)) + vec2<f32>(x_4512.x, x_4512.z));
  let x_4515 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4514.x, x_4514.y, x_4515.z);
  let x_4518 : f32 = u_xlat1.x;
  let x_4520 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4518, x_4520);
  let x_4524 : f32 = u_xlat1.y;
  let x_4527 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4524) + x_4527);
  let x_4531 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4531.y, x_4531.y, x_4531.y, x_4531.y)) + vec4<f32>(0.3203125f, 0.328125f, 0.3359375f, 0.34375f));
  let x_4540 : vec4<f32> = u_xlat3;
  let x_4542 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_4540 / vec4<f32>(x_4542.x, x_4542.x, x_4542.x, x_4542.x));
  let x_4545 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4545);
  let x_4548 : f32 = u_xlat1.y;
  let x_4550 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4548 * x_4550);
  let x_4553 : vec2<f32> = u_xlat68;
  let x_4554 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4553 + x_4554);
  let x_4557 : f32 = u_xlat89.z;
  let x_4559 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4557, x_4559);
  let x_4562 : f32 = u_xlat21.z;
  let x_4563 : f32 = u_xlat0;
  let x_4565 : f32 = u_xlat204;
  u_xlat1.x = ((x_4562 * x_4563) + -(x_4565));
  let x_4569 : f32 = u_xlat204;
  let x_4572 : vec3<f32> = u_xlat2;
  let x_4574 : vec2<f32> = (-(vec2<f32>(x_4569, x_4569)) + vec2<f32>(x_4572.x, x_4572.z));
  let x_4575 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4574.x, x_4574.y, x_4575.z);
  let x_4578 : f32 = u_xlat1.x;
  let x_4580 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4578, x_4580);
  let x_4584 : f32 = u_xlat1.y;
  let x_4587 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4584) + x_4587);
  let x_4591 : f32 = u_xlat1.y;
  let x_4593 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4591 * x_4593);
  let x_4596 : vec2<f32> = u_xlat68;
  let x_4597 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4596 + x_4597);
  let x_4600 : f32 = u_xlat90.x;
  let x_4602 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4600, x_4602);
  let x_4605 : f32 = u_xlat22.x;
  let x_4606 : f32 = u_xlat0;
  let x_4608 : f32 = u_xlat204;
  u_xlat1.x = ((x_4605 * x_4606) + -(x_4608));
  let x_4612 : f32 = u_xlat204;
  let x_4615 : vec3<f32> = u_xlat2;
  let x_4617 : vec2<f32> = (-(vec2<f32>(x_4612, x_4612)) + vec2<f32>(x_4615.x, x_4615.z));
  let x_4618 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4617.x, x_4617.y, x_4618.z);
  let x_4621 : f32 = u_xlat1.x;
  let x_4623 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4621, x_4623);
  let x_4627 : f32 = u_xlat1.y;
  let x_4630 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4627) + x_4630);
  let x_4634 : f32 = u_xlat1.y;
  let x_4636 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4634 * x_4636);
  let x_4639 : vec2<f32> = u_xlat68;
  let x_4640 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4639 + x_4640);
  let x_4643 : f32 = u_xlat90.z;
  let x_4645 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4643, x_4645);
  let x_4648 : f32 = u_xlat22.z;
  let x_4649 : f32 = u_xlat0;
  let x_4651 : f32 = u_xlat204;
  u_xlat1.x = ((x_4648 * x_4649) + -(x_4651));
  let x_4655 : f32 = u_xlat204;
  let x_4658 : vec3<f32> = u_xlat2;
  let x_4660 : vec2<f32> = (-(vec2<f32>(x_4655, x_4655)) + vec2<f32>(x_4658.x, x_4658.z));
  let x_4661 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4660.x, x_4660.y, x_4661.z);
  let x_4664 : f32 = u_xlat1.x;
  let x_4666 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4664, x_4666);
  let x_4670 : f32 = u_xlat1.y;
  let x_4673 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4670) + x_4673);
  let x_4677 : f32 = u_xlat1.y;
  let x_4679 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4677 * x_4679);
  let x_4682 : vec2<f32> = u_xlat68;
  let x_4683 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4682 + x_4683);
  let x_4686 : f32 = u_xlat91.x;
  let x_4688 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4686, x_4688);
  let x_4691 : f32 = u_xlat23.x;
  let x_4692 : f32 = u_xlat0;
  let x_4694 : f32 = u_xlat204;
  u_xlat1.x = ((x_4691 * x_4692) + -(x_4694));
  let x_4698 : f32 = u_xlat204;
  let x_4701 : vec3<f32> = u_xlat2;
  let x_4703 : vec2<f32> = (-(vec2<f32>(x_4698, x_4698)) + vec2<f32>(x_4701.x, x_4701.z));
  let x_4704 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4703.x, x_4703.y, x_4704.z);
  let x_4707 : f32 = u_xlat1.x;
  let x_4709 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4707, x_4709);
  let x_4713 : f32 = u_xlat1.y;
  let x_4716 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4713) + x_4716);
  let x_4720 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4720.y, x_4720.y, x_4720.y, x_4720.y)) + vec4<f32>(0.3515625f, 0.359375f, 0.3671875f, 0.375f));
  let x_4729 : vec4<f32> = u_xlat3;
  let x_4731 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_4729 / vec4<f32>(x_4731.x, x_4731.x, x_4731.x, x_4731.x));
  let x_4734 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4734);
  let x_4737 : f32 = u_xlat1.y;
  let x_4739 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4737 * x_4739);
  let x_4742 : vec2<f32> = u_xlat68;
  let x_4743 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4742 + x_4743);
  let x_4746 : f32 = u_xlat91.z;
  let x_4748 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4746, x_4748);
  let x_4751 : f32 = u_xlat23.z;
  let x_4752 : f32 = u_xlat0;
  let x_4754 : f32 = u_xlat204;
  u_xlat1.x = ((x_4751 * x_4752) + -(x_4754));
  let x_4758 : f32 = u_xlat204;
  let x_4761 : vec3<f32> = u_xlat2;
  let x_4763 : vec2<f32> = (-(vec2<f32>(x_4758, x_4758)) + vec2<f32>(x_4761.x, x_4761.z));
  let x_4764 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4763.x, x_4763.y, x_4764.z);
  let x_4767 : f32 = u_xlat1.x;
  let x_4769 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4767, x_4769);
  let x_4773 : f32 = u_xlat1.y;
  let x_4776 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4773) + x_4776);
  let x_4780 : f32 = u_xlat1.y;
  let x_4782 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4780 * x_4782);
  let x_4785 : vec2<f32> = u_xlat68;
  let x_4786 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4785 + x_4786);
  let x_4789 : f32 = u_xlat92.x;
  let x_4791 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4789, x_4791);
  let x_4794 : f32 = u_xlat24.x;
  let x_4795 : f32 = u_xlat0;
  let x_4797 : f32 = u_xlat204;
  u_xlat1.x = ((x_4794 * x_4795) + -(x_4797));
  let x_4801 : f32 = u_xlat204;
  let x_4804 : vec3<f32> = u_xlat2;
  let x_4806 : vec2<f32> = (-(vec2<f32>(x_4801, x_4801)) + vec2<f32>(x_4804.x, x_4804.z));
  let x_4807 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4806.x, x_4806.y, x_4807.z);
  let x_4810 : f32 = u_xlat1.x;
  let x_4812 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4810, x_4812);
  let x_4816 : f32 = u_xlat1.y;
  let x_4819 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4816) + x_4819);
  let x_4823 : f32 = u_xlat1.y;
  let x_4825 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4823 * x_4825);
  let x_4828 : vec2<f32> = u_xlat68;
  let x_4829 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4828 + x_4829);
  let x_4832 : f32 = u_xlat92.z;
  let x_4834 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4832, x_4834);
  let x_4837 : f32 = u_xlat24.z;
  let x_4838 : f32 = u_xlat0;
  let x_4840 : f32 = u_xlat204;
  u_xlat1.x = ((x_4837 * x_4838) + -(x_4840));
  let x_4844 : f32 = u_xlat204;
  let x_4847 : vec3<f32> = u_xlat2;
  let x_4849 : vec2<f32> = (-(vec2<f32>(x_4844, x_4844)) + vec2<f32>(x_4847.x, x_4847.z));
  let x_4850 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4849.x, x_4849.y, x_4850.z);
  let x_4853 : f32 = u_xlat1.x;
  let x_4855 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4853, x_4855);
  let x_4859 : f32 = u_xlat1.y;
  let x_4862 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4859) + x_4862);
  let x_4866 : f32 = u_xlat1.y;
  let x_4868 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4866 * x_4868);
  let x_4871 : vec2<f32> = u_xlat68;
  let x_4872 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4871 + x_4872);
  let x_4875 : f32 = u_xlat93.x;
  let x_4877 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4875, x_4877);
  let x_4880 : f32 = u_xlat25.x;
  let x_4881 : f32 = u_xlat0;
  let x_4883 : f32 = u_xlat204;
  u_xlat1.x = ((x_4880 * x_4881) + -(x_4883));
  let x_4887 : f32 = u_xlat204;
  let x_4890 : vec3<f32> = u_xlat2;
  let x_4892 : vec2<f32> = (-(vec2<f32>(x_4887, x_4887)) + vec2<f32>(x_4890.x, x_4890.z));
  let x_4893 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4892.x, x_4892.y, x_4893.z);
  let x_4896 : f32 = u_xlat1.x;
  let x_4898 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4896, x_4898);
  let x_4902 : f32 = u_xlat1.y;
  let x_4905 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4902) + x_4905);
  let x_4909 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4909.y, x_4909.y, x_4909.y, x_4909.y)) + vec4<f32>(0.3828125f, 0.390625f, 0.3984375f, 0.40625f));
  let x_4918 : vec4<f32> = u_xlat3;
  let x_4920 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_4918 / vec4<f32>(x_4920.x, x_4920.x, x_4920.x, x_4920.x));
  let x_4923 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4923);
  let x_4926 : f32 = u_xlat1.y;
  let x_4928 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4926 * x_4928);
  let x_4931 : vec2<f32> = u_xlat68;
  let x_4932 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4931 + x_4932);
  let x_4935 : f32 = u_xlat93.z;
  let x_4937 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4935, x_4937);
  let x_4940 : f32 = u_xlat25.z;
  let x_4941 : f32 = u_xlat0;
  let x_4943 : f32 = u_xlat204;
  u_xlat1.x = ((x_4940 * x_4941) + -(x_4943));
  let x_4947 : f32 = u_xlat204;
  let x_4950 : vec3<f32> = u_xlat2;
  let x_4952 : vec2<f32> = (-(vec2<f32>(x_4947, x_4947)) + vec2<f32>(x_4950.x, x_4950.z));
  let x_4953 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4952.x, x_4952.y, x_4953.z);
  let x_4956 : f32 = u_xlat1.x;
  let x_4958 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4956, x_4958);
  let x_4962 : f32 = u_xlat1.y;
  let x_4965 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4962) + x_4965);
  let x_4969 : f32 = u_xlat1.y;
  let x_4971 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4969 * x_4971);
  let x_4974 : vec2<f32> = u_xlat68;
  let x_4975 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4974 + x_4975);
  let x_4978 : f32 = u_xlat94.x;
  let x_4980 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4978, x_4980);
  let x_4983 : f32 = u_xlat26.x;
  let x_4984 : f32 = u_xlat0;
  let x_4986 : f32 = u_xlat204;
  u_xlat1.x = ((x_4983 * x_4984) + -(x_4986));
  let x_4990 : f32 = u_xlat204;
  let x_4993 : vec3<f32> = u_xlat2;
  let x_4995 : vec2<f32> = (-(vec2<f32>(x_4990, x_4990)) + vec2<f32>(x_4993.x, x_4993.z));
  let x_4996 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4995.x, x_4995.y, x_4996.z);
  let x_4999 : f32 = u_xlat1.x;
  let x_5001 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4999, x_5001);
  let x_5005 : f32 = u_xlat1.y;
  let x_5008 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5005) + x_5008);
  let x_5012 : f32 = u_xlat1.y;
  let x_5014 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5012 * x_5014);
  let x_5017 : vec2<f32> = u_xlat68;
  let x_5018 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5017 + x_5018);
  let x_5021 : f32 = u_xlat94.z;
  let x_5023 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5021, x_5023);
  let x_5026 : f32 = u_xlat26.z;
  let x_5027 : f32 = u_xlat0;
  let x_5029 : f32 = u_xlat204;
  u_xlat1.x = ((x_5026 * x_5027) + -(x_5029));
  let x_5033 : f32 = u_xlat204;
  let x_5036 : vec3<f32> = u_xlat2;
  let x_5038 : vec2<f32> = (-(vec2<f32>(x_5033, x_5033)) + vec2<f32>(x_5036.x, x_5036.z));
  let x_5039 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5038.x, x_5038.y, x_5039.z);
  let x_5042 : f32 = u_xlat1.x;
  let x_5044 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5042, x_5044);
  let x_5048 : f32 = u_xlat1.y;
  let x_5051 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5048) + x_5051);
  let x_5055 : f32 = u_xlat1.y;
  let x_5057 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5055 * x_5057);
  let x_5060 : vec2<f32> = u_xlat68;
  let x_5061 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5060 + x_5061);
  let x_5064 : f32 = u_xlat95.x;
  let x_5066 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5064, x_5066);
  let x_5069 : f32 = u_xlat27.x;
  let x_5070 : f32 = u_xlat0;
  let x_5072 : f32 = u_xlat204;
  u_xlat1.x = ((x_5069 * x_5070) + -(x_5072));
  let x_5076 : f32 = u_xlat204;
  let x_5079 : vec3<f32> = u_xlat2;
  let x_5081 : vec2<f32> = (-(vec2<f32>(x_5076, x_5076)) + vec2<f32>(x_5079.x, x_5079.z));
  let x_5082 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5081.x, x_5081.y, x_5082.z);
  let x_5085 : f32 = u_xlat1.x;
  let x_5087 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5085, x_5087);
  let x_5091 : f32 = u_xlat1.y;
  let x_5094 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5091) + x_5094);
  let x_5098 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5098.y, x_5098.y, x_5098.y, x_5098.y)) + vec4<f32>(0.4140625f, 0.421875f, 0.4296875f, 0.4375f));
  let x_5107 : vec4<f32> = u_xlat3;
  let x_5109 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_5107 / vec4<f32>(x_5109.x, x_5109.x, x_5109.x, x_5109.x));
  let x_5112 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5112);
  let x_5115 : f32 = u_xlat1.y;
  let x_5117 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5115 * x_5117);
  let x_5120 : vec2<f32> = u_xlat68;
  let x_5121 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5120 + x_5121);
  let x_5124 : f32 = u_xlat95.z;
  let x_5126 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5124, x_5126);
  let x_5129 : f32 = u_xlat27.z;
  let x_5130 : f32 = u_xlat0;
  let x_5132 : f32 = u_xlat204;
  u_xlat1.x = ((x_5129 * x_5130) + -(x_5132));
  let x_5136 : f32 = u_xlat204;
  let x_5139 : vec3<f32> = u_xlat2;
  let x_5141 : vec2<f32> = (-(vec2<f32>(x_5136, x_5136)) + vec2<f32>(x_5139.x, x_5139.z));
  let x_5142 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5141.x, x_5141.y, x_5142.z);
  let x_5145 : f32 = u_xlat1.x;
  let x_5147 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5145, x_5147);
  let x_5151 : f32 = u_xlat1.y;
  let x_5154 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5151) + x_5154);
  let x_5158 : f32 = u_xlat1.y;
  let x_5160 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5158 * x_5160);
  let x_5163 : vec2<f32> = u_xlat68;
  let x_5164 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5163 + x_5164);
  let x_5167 : f32 = u_xlat96.x;
  let x_5169 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5167, x_5169);
  let x_5172 : f32 = u_xlat28.x;
  let x_5173 : f32 = u_xlat0;
  let x_5175 : f32 = u_xlat204;
  u_xlat1.x = ((x_5172 * x_5173) + -(x_5175));
  let x_5179 : f32 = u_xlat204;
  let x_5182 : vec3<f32> = u_xlat2;
  let x_5184 : vec2<f32> = (-(vec2<f32>(x_5179, x_5179)) + vec2<f32>(x_5182.x, x_5182.z));
  let x_5185 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5184.x, x_5184.y, x_5185.z);
  let x_5188 : f32 = u_xlat1.x;
  let x_5190 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5188, x_5190);
  let x_5194 : f32 = u_xlat1.y;
  let x_5197 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5194) + x_5197);
  let x_5201 : f32 = u_xlat1.y;
  let x_5203 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5201 * x_5203);
  let x_5206 : vec2<f32> = u_xlat68;
  let x_5207 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5206 + x_5207);
  let x_5210 : f32 = u_xlat96.z;
  let x_5212 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5210, x_5212);
  let x_5215 : f32 = u_xlat28.z;
  let x_5216 : f32 = u_xlat0;
  let x_5218 : f32 = u_xlat204;
  u_xlat1.x = ((x_5215 * x_5216) + -(x_5218));
  let x_5222 : f32 = u_xlat204;
  let x_5225 : vec3<f32> = u_xlat2;
  let x_5227 : vec2<f32> = (-(vec2<f32>(x_5222, x_5222)) + vec2<f32>(x_5225.x, x_5225.z));
  let x_5228 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5227.x, x_5227.y, x_5228.z);
  let x_5231 : f32 = u_xlat1.x;
  let x_5233 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5231, x_5233);
  let x_5237 : f32 = u_xlat1.y;
  let x_5240 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5237) + x_5240);
  let x_5244 : f32 = u_xlat1.y;
  let x_5246 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5244 * x_5246);
  let x_5249 : vec2<f32> = u_xlat68;
  let x_5250 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5249 + x_5250);
  let x_5253 : f32 = u_xlat97.x;
  let x_5255 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5253, x_5255);
  let x_5258 : f32 = u_xlat29.x;
  let x_5259 : f32 = u_xlat0;
  let x_5261 : f32 = u_xlat204;
  u_xlat1.x = ((x_5258 * x_5259) + -(x_5261));
  let x_5265 : f32 = u_xlat204;
  let x_5268 : vec3<f32> = u_xlat2;
  let x_5270 : vec2<f32> = (-(vec2<f32>(x_5265, x_5265)) + vec2<f32>(x_5268.x, x_5268.z));
  let x_5271 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5270.x, x_5270.y, x_5271.z);
  let x_5274 : f32 = u_xlat1.x;
  let x_5276 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5274, x_5276);
  let x_5280 : f32 = u_xlat1.y;
  let x_5283 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5280) + x_5283);
  let x_5287 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5287.y, x_5287.y, x_5287.y, x_5287.y)) + vec4<f32>(0.4453125f, 0.453125f, 0.4609375f, 0.46875f));
  let x_5296 : vec4<f32> = u_xlat3;
  let x_5298 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_5296 / vec4<f32>(x_5298.x, x_5298.x, x_5298.x, x_5298.x));
  let x_5301 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5301);
  let x_5304 : f32 = u_xlat1.y;
  let x_5306 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5304 * x_5306);
  let x_5309 : vec2<f32> = u_xlat68;
  let x_5310 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5309 + x_5310);
  let x_5313 : f32 = u_xlat97.z;
  let x_5315 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5313, x_5315);
  let x_5318 : f32 = u_xlat29.z;
  let x_5319 : f32 = u_xlat0;
  let x_5321 : f32 = u_xlat204;
  u_xlat1.x = ((x_5318 * x_5319) + -(x_5321));
  let x_5325 : f32 = u_xlat204;
  let x_5328 : vec3<f32> = u_xlat2;
  let x_5330 : vec2<f32> = (-(vec2<f32>(x_5325, x_5325)) + vec2<f32>(x_5328.x, x_5328.z));
  let x_5331 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5330.x, x_5330.y, x_5331.z);
  let x_5334 : f32 = u_xlat1.x;
  let x_5336 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5334, x_5336);
  let x_5340 : f32 = u_xlat1.y;
  let x_5343 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5340) + x_5343);
  let x_5347 : f32 = u_xlat1.y;
  let x_5349 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5347 * x_5349);
  let x_5352 : vec2<f32> = u_xlat68;
  let x_5353 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5352 + x_5353);
  let x_5356 : f32 = u_xlat98.x;
  let x_5358 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5356, x_5358);
  let x_5361 : f32 = u_xlat30.x;
  let x_5362 : f32 = u_xlat0;
  let x_5364 : f32 = u_xlat204;
  u_xlat1.x = ((x_5361 * x_5362) + -(x_5364));
  let x_5368 : f32 = u_xlat204;
  let x_5371 : vec3<f32> = u_xlat2;
  let x_5373 : vec2<f32> = (-(vec2<f32>(x_5368, x_5368)) + vec2<f32>(x_5371.x, x_5371.z));
  let x_5374 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5373.x, x_5373.y, x_5374.z);
  let x_5377 : f32 = u_xlat1.x;
  let x_5379 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5377, x_5379);
  let x_5383 : f32 = u_xlat1.y;
  let x_5386 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5383) + x_5386);
  let x_5390 : f32 = u_xlat1.y;
  let x_5392 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5390 * x_5392);
  let x_5395 : vec2<f32> = u_xlat68;
  let x_5396 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5395 + x_5396);
  let x_5399 : f32 = u_xlat98.z;
  let x_5401 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5399, x_5401);
  let x_5404 : f32 = u_xlat30.z;
  let x_5405 : f32 = u_xlat0;
  let x_5407 : f32 = u_xlat204;
  u_xlat1.x = ((x_5404 * x_5405) + -(x_5407));
  let x_5411 : f32 = u_xlat204;
  let x_5414 : vec3<f32> = u_xlat2;
  let x_5416 : vec2<f32> = (-(vec2<f32>(x_5411, x_5411)) + vec2<f32>(x_5414.x, x_5414.z));
  let x_5417 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5416.x, x_5416.y, x_5417.z);
  let x_5420 : f32 = u_xlat1.x;
  let x_5422 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5420, x_5422);
  let x_5426 : f32 = u_xlat1.y;
  let x_5429 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5426) + x_5429);
  let x_5433 : f32 = u_xlat1.y;
  let x_5435 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5433 * x_5435);
  let x_5438 : vec2<f32> = u_xlat68;
  let x_5439 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5438 + x_5439);
  let x_5442 : f32 = u_xlat99.x;
  let x_5444 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5442, x_5444);
  let x_5447 : f32 = u_xlat31.x;
  let x_5448 : f32 = u_xlat0;
  let x_5450 : f32 = u_xlat204;
  u_xlat1.x = ((x_5447 * x_5448) + -(x_5450));
  let x_5454 : f32 = u_xlat204;
  let x_5457 : vec3<f32> = u_xlat2;
  let x_5459 : vec2<f32> = (-(vec2<f32>(x_5454, x_5454)) + vec2<f32>(x_5457.x, x_5457.z));
  let x_5460 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5459.x, x_5459.y, x_5460.z);
  let x_5463 : f32 = u_xlat1.x;
  let x_5465 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5463, x_5465);
  let x_5469 : f32 = u_xlat1.y;
  let x_5472 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5469) + x_5472);
  let x_5476 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5476.y, x_5476.y, x_5476.y, x_5476.y)) + vec4<f32>(0.4765625f, 0.484375f, 0.4921875f, 0.5f));
  let x_5485 : vec4<f32> = u_xlat3;
  let x_5487 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_5485 / vec4<f32>(x_5487.x, x_5487.x, x_5487.x, x_5487.x));
  let x_5490 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5490);
  let x_5493 : f32 = u_xlat1.y;
  let x_5495 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5493 * x_5495);
  let x_5498 : vec2<f32> = u_xlat68;
  let x_5499 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5498 + x_5499);
  let x_5502 : f32 = u_xlat99.z;
  let x_5504 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5502, x_5504);
  let x_5507 : f32 = u_xlat31.z;
  let x_5508 : f32 = u_xlat0;
  let x_5510 : f32 = u_xlat204;
  u_xlat1.x = ((x_5507 * x_5508) + -(x_5510));
  let x_5514 : f32 = u_xlat204;
  let x_5517 : vec3<f32> = u_xlat2;
  let x_5519 : vec2<f32> = (-(vec2<f32>(x_5514, x_5514)) + vec2<f32>(x_5517.x, x_5517.z));
  let x_5520 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5519.x, x_5519.y, x_5520.z);
  let x_5523 : f32 = u_xlat1.x;
  let x_5525 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5523, x_5525);
  let x_5529 : f32 = u_xlat1.y;
  let x_5532 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5529) + x_5532);
  let x_5536 : f32 = u_xlat1.y;
  let x_5538 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5536 * x_5538);
  let x_5541 : vec2<f32> = u_xlat68;
  let x_5542 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5541 + x_5542);
  let x_5545 : f32 = u_xlat100.x;
  let x_5547 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5545, x_5547);
  let x_5550 : f32 = u_xlat32.x;
  let x_5551 : f32 = u_xlat0;
  let x_5553 : f32 = u_xlat204;
  u_xlat1.x = ((x_5550 * x_5551) + -(x_5553));
  let x_5557 : f32 = u_xlat204;
  let x_5560 : vec3<f32> = u_xlat2;
  let x_5562 : vec2<f32> = (-(vec2<f32>(x_5557, x_5557)) + vec2<f32>(x_5560.x, x_5560.z));
  let x_5563 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5562.x, x_5562.y, x_5563.z);
  let x_5566 : f32 = u_xlat1.x;
  let x_5568 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5566, x_5568);
  let x_5572 : f32 = u_xlat1.y;
  let x_5575 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5572) + x_5575);
  let x_5579 : f32 = u_xlat1.y;
  let x_5581 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5579 * x_5581);
  let x_5584 : vec2<f32> = u_xlat68;
  let x_5585 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5584 + x_5585);
  let x_5588 : f32 = u_xlat100.z;
  let x_5590 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5588, x_5590);
  let x_5593 : f32 = u_xlat32.z;
  let x_5594 : f32 = u_xlat0;
  let x_5596 : f32 = u_xlat204;
  u_xlat1.x = ((x_5593 * x_5594) + -(x_5596));
  let x_5600 : f32 = u_xlat204;
  let x_5603 : vec3<f32> = u_xlat2;
  let x_5605 : vec2<f32> = (-(vec2<f32>(x_5600, x_5600)) + vec2<f32>(x_5603.x, x_5603.z));
  let x_5606 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5605.x, x_5605.y, x_5606.z);
  let x_5609 : f32 = u_xlat1.x;
  let x_5611 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5609, x_5611);
  let x_5615 : f32 = u_xlat1.y;
  let x_5618 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5615) + x_5618);
  let x_5622 : f32 = u_xlat1.y;
  let x_5624 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5622 * x_5624);
  let x_5627 : vec2<f32> = u_xlat68;
  let x_5628 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5627 + x_5628);
  let x_5631 : f32 = u_xlat101.x;
  let x_5633 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5631, x_5633);
  let x_5636 : f32 = u_xlat33.x;
  let x_5637 : f32 = u_xlat0;
  let x_5639 : f32 = u_xlat204;
  u_xlat1.x = ((x_5636 * x_5637) + -(x_5639));
  let x_5643 : f32 = u_xlat204;
  let x_5646 : vec3<f32> = u_xlat2;
  let x_5648 : vec2<f32> = (-(vec2<f32>(x_5643, x_5643)) + vec2<f32>(x_5646.x, x_5646.z));
  let x_5649 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5648.x, x_5648.y, x_5649.z);
  let x_5652 : f32 = u_xlat1.x;
  let x_5654 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5652, x_5654);
  let x_5658 : f32 = u_xlat1.y;
  let x_5661 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5658) + x_5661);
  let x_5665 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5665.y, x_5665.y, x_5665.y, x_5665.y)) + vec4<f32>(0.5078125f, 0.515625f, 0.5234375f, 0.53125f));
  let x_5674 : vec4<f32> = u_xlat3;
  let x_5676 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_5674 / vec4<f32>(x_5676.x, x_5676.x, x_5676.x, x_5676.x));
  let x_5679 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5679);
  let x_5682 : f32 = u_xlat1.y;
  let x_5684 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5682 * x_5684);
  let x_5687 : vec2<f32> = u_xlat68;
  let x_5688 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5687 + x_5688);
  let x_5691 : f32 = u_xlat101.z;
  let x_5693 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5691, x_5693);
  let x_5696 : f32 = u_xlat33.z;
  let x_5697 : f32 = u_xlat0;
  let x_5699 : f32 = u_xlat204;
  u_xlat1.x = ((x_5696 * x_5697) + -(x_5699));
  let x_5703 : f32 = u_xlat204;
  let x_5706 : vec3<f32> = u_xlat2;
  let x_5708 : vec2<f32> = (-(vec2<f32>(x_5703, x_5703)) + vec2<f32>(x_5706.x, x_5706.z));
  let x_5709 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5708.x, x_5708.y, x_5709.z);
  let x_5712 : f32 = u_xlat1.x;
  let x_5714 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5712, x_5714);
  let x_5718 : f32 = u_xlat1.y;
  let x_5721 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5718) + x_5721);
  let x_5725 : f32 = u_xlat1.y;
  let x_5727 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5725 * x_5727);
  let x_5730 : vec2<f32> = u_xlat68;
  let x_5731 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5730 + x_5731);
  let x_5734 : f32 = u_xlat102.x;
  let x_5736 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5734, x_5736);
  let x_5739 : f32 = u_xlat34.x;
  let x_5740 : f32 = u_xlat0;
  let x_5742 : f32 = u_xlat204;
  u_xlat1.x = ((x_5739 * x_5740) + -(x_5742));
  let x_5746 : f32 = u_xlat204;
  let x_5749 : vec3<f32> = u_xlat2;
  let x_5751 : vec2<f32> = (-(vec2<f32>(x_5746, x_5746)) + vec2<f32>(x_5749.x, x_5749.z));
  let x_5752 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5751.x, x_5751.y, x_5752.z);
  let x_5755 : f32 = u_xlat1.x;
  let x_5757 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5755, x_5757);
  let x_5761 : f32 = u_xlat1.y;
  let x_5764 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5761) + x_5764);
  let x_5768 : f32 = u_xlat1.y;
  let x_5770 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5768 * x_5770);
  let x_5773 : vec2<f32> = u_xlat68;
  let x_5774 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5773 + x_5774);
  let x_5777 : f32 = u_xlat102.z;
  let x_5779 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5777, x_5779);
  let x_5782 : f32 = u_xlat34.z;
  let x_5783 : f32 = u_xlat0;
  let x_5785 : f32 = u_xlat204;
  u_xlat1.x = ((x_5782 * x_5783) + -(x_5785));
  let x_5789 : f32 = u_xlat204;
  let x_5792 : vec3<f32> = u_xlat2;
  let x_5794 : vec2<f32> = (-(vec2<f32>(x_5789, x_5789)) + vec2<f32>(x_5792.x, x_5792.z));
  let x_5795 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5794.x, x_5794.y, x_5795.z);
  let x_5798 : f32 = u_xlat1.x;
  let x_5800 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5798, x_5800);
  let x_5804 : f32 = u_xlat1.y;
  let x_5807 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5804) + x_5807);
  let x_5811 : f32 = u_xlat1.y;
  let x_5813 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5811 * x_5813);
  let x_5816 : vec2<f32> = u_xlat68;
  let x_5817 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5816 + x_5817);
  let x_5820 : f32 = u_xlat103.x;
  let x_5822 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5820, x_5822);
  let x_5825 : f32 = u_xlat35.x;
  let x_5826 : f32 = u_xlat0;
  let x_5828 : f32 = u_xlat204;
  u_xlat1.x = ((x_5825 * x_5826) + -(x_5828));
  let x_5832 : f32 = u_xlat204;
  let x_5835 : vec3<f32> = u_xlat2;
  let x_5837 : vec2<f32> = (-(vec2<f32>(x_5832, x_5832)) + vec2<f32>(x_5835.x, x_5835.z));
  let x_5838 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5837.x, x_5837.y, x_5838.z);
  let x_5841 : f32 = u_xlat1.x;
  let x_5843 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5841, x_5843);
  let x_5847 : f32 = u_xlat1.y;
  let x_5850 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5847) + x_5850);
  let x_5854 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5854.y, x_5854.y, x_5854.y, x_5854.y)) + vec4<f32>(0.5390625f, 0.546875f, 0.5546875f, 0.5625f));
  let x_5863 : vec4<f32> = u_xlat3;
  let x_5865 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_5863 / vec4<f32>(x_5865.x, x_5865.x, x_5865.x, x_5865.x));
  let x_5868 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5868);
  let x_5871 : f32 = u_xlat1.y;
  let x_5873 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5871 * x_5873);
  let x_5876 : vec2<f32> = u_xlat68;
  let x_5877 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5876 + x_5877);
  let x_5880 : f32 = u_xlat103.z;
  let x_5882 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5880, x_5882);
  let x_5885 : f32 = u_xlat35.z;
  let x_5886 : f32 = u_xlat0;
  let x_5888 : f32 = u_xlat204;
  u_xlat1.x = ((x_5885 * x_5886) + -(x_5888));
  let x_5892 : f32 = u_xlat204;
  let x_5895 : vec3<f32> = u_xlat2;
  let x_5897 : vec2<f32> = (-(vec2<f32>(x_5892, x_5892)) + vec2<f32>(x_5895.x, x_5895.z));
  let x_5898 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5897.x, x_5897.y, x_5898.z);
  let x_5901 : f32 = u_xlat1.x;
  let x_5903 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5901, x_5903);
  let x_5907 : f32 = u_xlat1.y;
  let x_5910 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5907) + x_5910);
  let x_5914 : f32 = u_xlat1.y;
  let x_5916 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5914 * x_5916);
  let x_5919 : vec2<f32> = u_xlat68;
  let x_5920 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5919 + x_5920);
  let x_5923 : f32 = u_xlat104.x;
  let x_5925 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5923, x_5925);
  let x_5928 : f32 = u_xlat36.x;
  let x_5929 : f32 = u_xlat0;
  let x_5931 : f32 = u_xlat204;
  u_xlat1.x = ((x_5928 * x_5929) + -(x_5931));
  let x_5935 : f32 = u_xlat204;
  let x_5938 : vec3<f32> = u_xlat2;
  let x_5940 : vec2<f32> = (-(vec2<f32>(x_5935, x_5935)) + vec2<f32>(x_5938.x, x_5938.z));
  let x_5941 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5940.x, x_5940.y, x_5941.z);
  let x_5944 : f32 = u_xlat1.x;
  let x_5946 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5944, x_5946);
  let x_5950 : f32 = u_xlat1.y;
  let x_5953 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5950) + x_5953);
  let x_5957 : f32 = u_xlat1.y;
  let x_5959 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5957 * x_5959);
  let x_5962 : vec2<f32> = u_xlat68;
  let x_5963 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5962 + x_5963);
  let x_5966 : f32 = u_xlat104.z;
  let x_5968 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5966, x_5968);
  let x_5971 : f32 = u_xlat36.z;
  let x_5972 : f32 = u_xlat0;
  let x_5974 : f32 = u_xlat204;
  u_xlat1.x = ((x_5971 * x_5972) + -(x_5974));
  let x_5978 : f32 = u_xlat204;
  let x_5981 : vec3<f32> = u_xlat2;
  let x_5983 : vec2<f32> = (-(vec2<f32>(x_5978, x_5978)) + vec2<f32>(x_5981.x, x_5981.z));
  let x_5984 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5983.x, x_5983.y, x_5984.z);
  let x_5987 : f32 = u_xlat1.x;
  let x_5989 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5987, x_5989);
  let x_5993 : f32 = u_xlat1.y;
  let x_5996 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5993) + x_5996);
  let x_6000 : f32 = u_xlat1.y;
  let x_6002 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6000 * x_6002);
  let x_6005 : vec2<f32> = u_xlat68;
  let x_6006 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6005 + x_6006);
  let x_6009 : f32 = u_xlat105.x;
  let x_6011 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6009, x_6011);
  let x_6014 : f32 = u_xlat37.x;
  let x_6015 : f32 = u_xlat0;
  let x_6017 : f32 = u_xlat204;
  u_xlat1.x = ((x_6014 * x_6015) + -(x_6017));
  let x_6021 : f32 = u_xlat204;
  let x_6024 : vec3<f32> = u_xlat2;
  let x_6026 : vec2<f32> = (-(vec2<f32>(x_6021, x_6021)) + vec2<f32>(x_6024.x, x_6024.z));
  let x_6027 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6026.x, x_6026.y, x_6027.z);
  let x_6030 : f32 = u_xlat1.x;
  let x_6032 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6030, x_6032);
  let x_6036 : f32 = u_xlat1.y;
  let x_6039 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6036) + x_6039);
  let x_6043 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6043.y, x_6043.y, x_6043.y, x_6043.y)) + vec4<f32>(0.5703125f, 0.578125f, 0.5859375f, 0.59375f));
  let x_6052 : vec4<f32> = u_xlat3;
  let x_6054 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_6052 / vec4<f32>(x_6054.x, x_6054.x, x_6054.x, x_6054.x));
  let x_6057 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6057);
  let x_6060 : f32 = u_xlat1.y;
  let x_6062 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6060 * x_6062);
  let x_6065 : vec2<f32> = u_xlat68;
  let x_6066 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6065 + x_6066);
  let x_6069 : f32 = u_xlat105.z;
  let x_6071 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6069, x_6071);
  let x_6074 : f32 = u_xlat37.z;
  let x_6075 : f32 = u_xlat0;
  let x_6077 : f32 = u_xlat204;
  u_xlat1.x = ((x_6074 * x_6075) + -(x_6077));
  let x_6081 : f32 = u_xlat204;
  let x_6084 : vec3<f32> = u_xlat2;
  let x_6086 : vec2<f32> = (-(vec2<f32>(x_6081, x_6081)) + vec2<f32>(x_6084.x, x_6084.z));
  let x_6087 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6086.x, x_6086.y, x_6087.z);
  let x_6090 : f32 = u_xlat1.x;
  let x_6092 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6090, x_6092);
  let x_6096 : f32 = u_xlat1.y;
  let x_6099 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6096) + x_6099);
  let x_6103 : f32 = u_xlat1.y;
  let x_6105 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6103 * x_6105);
  let x_6108 : vec2<f32> = u_xlat68;
  let x_6109 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6108 + x_6109);
  let x_6112 : f32 = u_xlat106.x;
  let x_6114 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6112, x_6114);
  let x_6117 : f32 = u_xlat38.x;
  let x_6118 : f32 = u_xlat0;
  let x_6120 : f32 = u_xlat204;
  u_xlat1.x = ((x_6117 * x_6118) + -(x_6120));
  let x_6124 : f32 = u_xlat204;
  let x_6127 : vec3<f32> = u_xlat2;
  let x_6129 : vec2<f32> = (-(vec2<f32>(x_6124, x_6124)) + vec2<f32>(x_6127.x, x_6127.z));
  let x_6130 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6129.x, x_6129.y, x_6130.z);
  let x_6133 : f32 = u_xlat1.x;
  let x_6135 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6133, x_6135);
  let x_6139 : f32 = u_xlat1.y;
  let x_6142 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6139) + x_6142);
  let x_6146 : f32 = u_xlat1.y;
  let x_6148 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6146 * x_6148);
  let x_6151 : vec2<f32> = u_xlat68;
  let x_6152 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6151 + x_6152);
  let x_6155 : f32 = u_xlat106.z;
  let x_6157 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6155, x_6157);
  let x_6160 : f32 = u_xlat38.z;
  let x_6161 : f32 = u_xlat0;
  let x_6163 : f32 = u_xlat204;
  u_xlat1.x = ((x_6160 * x_6161) + -(x_6163));
  let x_6167 : f32 = u_xlat204;
  let x_6170 : vec3<f32> = u_xlat2;
  let x_6172 : vec2<f32> = (-(vec2<f32>(x_6167, x_6167)) + vec2<f32>(x_6170.x, x_6170.z));
  let x_6173 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6172.x, x_6172.y, x_6173.z);
  let x_6176 : f32 = u_xlat1.x;
  let x_6178 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6176, x_6178);
  let x_6182 : f32 = u_xlat1.y;
  let x_6185 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6182) + x_6185);
  let x_6189 : f32 = u_xlat1.y;
  let x_6191 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6189 * x_6191);
  let x_6194 : vec2<f32> = u_xlat68;
  let x_6195 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6194 + x_6195);
  let x_6198 : f32 = u_xlat107.x;
  let x_6200 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6198, x_6200);
  let x_6203 : f32 = u_xlat39.x;
  let x_6204 : f32 = u_xlat0;
  let x_6206 : f32 = u_xlat204;
  u_xlat1.x = ((x_6203 * x_6204) + -(x_6206));
  let x_6210 : f32 = u_xlat204;
  let x_6213 : vec3<f32> = u_xlat2;
  let x_6215 : vec2<f32> = (-(vec2<f32>(x_6210, x_6210)) + vec2<f32>(x_6213.x, x_6213.z));
  let x_6216 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6215.x, x_6215.y, x_6216.z);
  let x_6219 : f32 = u_xlat1.x;
  let x_6221 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6219, x_6221);
  let x_6225 : f32 = u_xlat1.y;
  let x_6228 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6225) + x_6228);
  let x_6232 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6232.y, x_6232.y, x_6232.y, x_6232.y)) + vec4<f32>(0.6015625f, 0.609375f, 0.6171875f, 0.625f));
  let x_6241 : vec4<f32> = u_xlat3;
  let x_6243 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_6241 / vec4<f32>(x_6243.x, x_6243.x, x_6243.x, x_6243.x));
  let x_6246 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6246);
  let x_6249 : f32 = u_xlat1.y;
  let x_6251 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6249 * x_6251);
  let x_6254 : vec2<f32> = u_xlat68;
  let x_6255 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6254 + x_6255);
  let x_6258 : f32 = u_xlat107.z;
  let x_6260 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6258, x_6260);
  let x_6263 : f32 = u_xlat39.z;
  let x_6264 : f32 = u_xlat0;
  let x_6266 : f32 = u_xlat204;
  u_xlat1.x = ((x_6263 * x_6264) + -(x_6266));
  let x_6270 : f32 = u_xlat204;
  let x_6273 : vec3<f32> = u_xlat2;
  let x_6275 : vec2<f32> = (-(vec2<f32>(x_6270, x_6270)) + vec2<f32>(x_6273.x, x_6273.z));
  let x_6276 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6275.x, x_6275.y, x_6276.z);
  let x_6279 : f32 = u_xlat1.x;
  let x_6281 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6279, x_6281);
  let x_6285 : f32 = u_xlat1.y;
  let x_6288 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6285) + x_6288);
  let x_6292 : f32 = u_xlat1.y;
  let x_6294 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6292 * x_6294);
  let x_6297 : vec2<f32> = u_xlat68;
  let x_6298 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6297 + x_6298);
  let x_6301 : f32 = u_xlat108.x;
  let x_6303 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6301, x_6303);
  let x_6306 : f32 = u_xlat40.x;
  let x_6307 : f32 = u_xlat0;
  let x_6309 : f32 = u_xlat204;
  u_xlat1.x = ((x_6306 * x_6307) + -(x_6309));
  let x_6313 : f32 = u_xlat204;
  let x_6316 : vec3<f32> = u_xlat2;
  let x_6318 : vec2<f32> = (-(vec2<f32>(x_6313, x_6313)) + vec2<f32>(x_6316.x, x_6316.z));
  let x_6319 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6318.x, x_6318.y, x_6319.z);
  let x_6322 : f32 = u_xlat1.x;
  let x_6324 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6322, x_6324);
  let x_6328 : f32 = u_xlat1.y;
  let x_6331 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6328) + x_6331);
  let x_6335 : f32 = u_xlat1.y;
  let x_6337 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6335 * x_6337);
  let x_6340 : vec2<f32> = u_xlat68;
  let x_6341 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6340 + x_6341);
  let x_6344 : f32 = u_xlat108.z;
  let x_6346 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6344, x_6346);
  let x_6349 : f32 = u_xlat40.z;
  let x_6350 : f32 = u_xlat0;
  let x_6352 : f32 = u_xlat204;
  u_xlat1.x = ((x_6349 * x_6350) + -(x_6352));
  let x_6356 : f32 = u_xlat204;
  let x_6359 : vec3<f32> = u_xlat2;
  let x_6361 : vec2<f32> = (-(vec2<f32>(x_6356, x_6356)) + vec2<f32>(x_6359.x, x_6359.z));
  let x_6362 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6361.x, x_6361.y, x_6362.z);
  let x_6365 : f32 = u_xlat1.x;
  let x_6367 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6365, x_6367);
  let x_6371 : f32 = u_xlat1.y;
  let x_6374 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6371) + x_6374);
  let x_6378 : f32 = u_xlat1.y;
  let x_6380 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6378 * x_6380);
  let x_6383 : vec2<f32> = u_xlat68;
  let x_6384 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6383 + x_6384);
  let x_6387 : f32 = u_xlat109.x;
  let x_6389 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6387, x_6389);
  let x_6392 : f32 = u_xlat41.x;
  let x_6393 : f32 = u_xlat0;
  let x_6395 : f32 = u_xlat204;
  u_xlat1.x = ((x_6392 * x_6393) + -(x_6395));
  let x_6399 : f32 = u_xlat204;
  let x_6402 : vec3<f32> = u_xlat2;
  let x_6404 : vec2<f32> = (-(vec2<f32>(x_6399, x_6399)) + vec2<f32>(x_6402.x, x_6402.z));
  let x_6405 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6404.x, x_6404.y, x_6405.z);
  let x_6408 : f32 = u_xlat1.x;
  let x_6410 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6408, x_6410);
  let x_6414 : f32 = u_xlat1.y;
  let x_6417 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6414) + x_6417);
  let x_6421 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6421.y, x_6421.y, x_6421.y, x_6421.y)) + vec4<f32>(0.6328125f, 0.640625f, 0.6484375f, 0.65625f));
  let x_6430 : vec4<f32> = u_xlat3;
  let x_6432 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_6430 / vec4<f32>(x_6432.x, x_6432.x, x_6432.x, x_6432.x));
  let x_6435 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6435);
  let x_6438 : f32 = u_xlat1.y;
  let x_6440 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6438 * x_6440);
  let x_6443 : vec2<f32> = u_xlat68;
  let x_6444 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6443 + x_6444);
  let x_6447 : f32 = u_xlat109.z;
  let x_6449 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6447, x_6449);
  let x_6452 : f32 = u_xlat41.z;
  let x_6453 : f32 = u_xlat0;
  let x_6455 : f32 = u_xlat204;
  u_xlat1.x = ((x_6452 * x_6453) + -(x_6455));
  let x_6459 : f32 = u_xlat204;
  let x_6462 : vec3<f32> = u_xlat2;
  let x_6464 : vec2<f32> = (-(vec2<f32>(x_6459, x_6459)) + vec2<f32>(x_6462.x, x_6462.z));
  let x_6465 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6464.x, x_6464.y, x_6465.z);
  let x_6468 : f32 = u_xlat1.x;
  let x_6470 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6468, x_6470);
  let x_6474 : f32 = u_xlat1.y;
  let x_6477 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6474) + x_6477);
  let x_6481 : f32 = u_xlat1.y;
  let x_6483 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6481 * x_6483);
  let x_6486 : vec2<f32> = u_xlat68;
  let x_6487 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6486 + x_6487);
  let x_6490 : f32 = u_xlat110.x;
  let x_6492 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6490, x_6492);
  let x_6495 : f32 = u_xlat42.x;
  let x_6496 : f32 = u_xlat0;
  let x_6498 : f32 = u_xlat204;
  u_xlat1.x = ((x_6495 * x_6496) + -(x_6498));
  let x_6502 : f32 = u_xlat204;
  let x_6505 : vec3<f32> = u_xlat2;
  let x_6507 : vec2<f32> = (-(vec2<f32>(x_6502, x_6502)) + vec2<f32>(x_6505.x, x_6505.z));
  let x_6508 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6507.x, x_6507.y, x_6508.z);
  let x_6511 : f32 = u_xlat1.x;
  let x_6513 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6511, x_6513);
  let x_6517 : f32 = u_xlat1.y;
  let x_6520 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6517) + x_6520);
  let x_6524 : f32 = u_xlat1.y;
  let x_6526 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6524 * x_6526);
  let x_6529 : vec2<f32> = u_xlat68;
  let x_6530 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6529 + x_6530);
  let x_6533 : f32 = u_xlat110.z;
  let x_6535 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6533, x_6535);
  let x_6538 : f32 = u_xlat42.z;
  let x_6539 : f32 = u_xlat0;
  let x_6541 : f32 = u_xlat204;
  u_xlat1.x = ((x_6538 * x_6539) + -(x_6541));
  let x_6545 : f32 = u_xlat204;
  let x_6548 : vec3<f32> = u_xlat2;
  let x_6550 : vec2<f32> = (-(vec2<f32>(x_6545, x_6545)) + vec2<f32>(x_6548.x, x_6548.z));
  let x_6551 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6550.x, x_6550.y, x_6551.z);
  let x_6554 : f32 = u_xlat1.x;
  let x_6556 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6554, x_6556);
  let x_6560 : f32 = u_xlat1.y;
  let x_6563 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6560) + x_6563);
  let x_6567 : f32 = u_xlat1.y;
  let x_6569 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6567 * x_6569);
  let x_6572 : vec2<f32> = u_xlat68;
  let x_6573 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6572 + x_6573);
  let x_6576 : f32 = u_xlat111.x;
  let x_6578 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6576, x_6578);
  let x_6581 : f32 = u_xlat43.x;
  let x_6582 : f32 = u_xlat0;
  let x_6584 : f32 = u_xlat204;
  u_xlat1.x = ((x_6581 * x_6582) + -(x_6584));
  let x_6588 : f32 = u_xlat204;
  let x_6591 : vec3<f32> = u_xlat2;
  let x_6593 : vec2<f32> = (-(vec2<f32>(x_6588, x_6588)) + vec2<f32>(x_6591.x, x_6591.z));
  let x_6594 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6593.x, x_6593.y, x_6594.z);
  let x_6597 : f32 = u_xlat1.x;
  let x_6599 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6597, x_6599);
  let x_6603 : f32 = u_xlat1.y;
  let x_6606 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6603) + x_6606);
  let x_6610 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6610.y, x_6610.y, x_6610.y, x_6610.y)) + vec4<f32>(0.6640625f, 0.671875f, 0.6796875f, 0.6875f));
  let x_6619 : vec4<f32> = u_xlat3;
  let x_6621 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_6619 / vec4<f32>(x_6621.x, x_6621.x, x_6621.x, x_6621.x));
  let x_6624 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6624);
  let x_6627 : f32 = u_xlat1.y;
  let x_6629 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6627 * x_6629);
  let x_6632 : vec2<f32> = u_xlat68;
  let x_6633 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6632 + x_6633);
  let x_6636 : f32 = u_xlat111.z;
  let x_6638 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6636, x_6638);
  let x_6641 : f32 = u_xlat43.z;
  let x_6642 : f32 = u_xlat0;
  let x_6644 : f32 = u_xlat204;
  u_xlat1.x = ((x_6641 * x_6642) + -(x_6644));
  let x_6648 : f32 = u_xlat204;
  let x_6651 : vec3<f32> = u_xlat2;
  let x_6653 : vec2<f32> = (-(vec2<f32>(x_6648, x_6648)) + vec2<f32>(x_6651.x, x_6651.z));
  let x_6654 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6653.x, x_6653.y, x_6654.z);
  let x_6657 : f32 = u_xlat1.x;
  let x_6659 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6657, x_6659);
  let x_6663 : f32 = u_xlat1.y;
  let x_6666 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6663) + x_6666);
  let x_6670 : f32 = u_xlat1.y;
  let x_6672 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6670 * x_6672);
  let x_6675 : vec2<f32> = u_xlat68;
  let x_6676 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6675 + x_6676);
  let x_6679 : f32 = u_xlat112.x;
  let x_6681 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6679, x_6681);
  let x_6684 : f32 = u_xlat44.x;
  let x_6685 : f32 = u_xlat0;
  let x_6687 : f32 = u_xlat204;
  u_xlat1.x = ((x_6684 * x_6685) + -(x_6687));
  let x_6691 : f32 = u_xlat204;
  let x_6694 : vec3<f32> = u_xlat2;
  let x_6696 : vec2<f32> = (-(vec2<f32>(x_6691, x_6691)) + vec2<f32>(x_6694.x, x_6694.z));
  let x_6697 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6696.x, x_6696.y, x_6697.z);
  let x_6700 : f32 = u_xlat1.x;
  let x_6702 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6700, x_6702);
  let x_6706 : f32 = u_xlat1.y;
  let x_6709 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6706) + x_6709);
  let x_6713 : f32 = u_xlat1.y;
  let x_6715 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6713 * x_6715);
  let x_6718 : vec2<f32> = u_xlat68;
  let x_6719 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6718 + x_6719);
  let x_6722 : f32 = u_xlat112.z;
  let x_6724 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6722, x_6724);
  let x_6727 : f32 = u_xlat44.z;
  let x_6728 : f32 = u_xlat0;
  let x_6730 : f32 = u_xlat204;
  u_xlat1.x = ((x_6727 * x_6728) + -(x_6730));
  let x_6734 : f32 = u_xlat204;
  let x_6737 : vec3<f32> = u_xlat2;
  let x_6739 : vec2<f32> = (-(vec2<f32>(x_6734, x_6734)) + vec2<f32>(x_6737.x, x_6737.z));
  let x_6740 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6739.x, x_6739.y, x_6740.z);
  let x_6743 : f32 = u_xlat1.x;
  let x_6745 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6743, x_6745);
  let x_6749 : f32 = u_xlat1.y;
  let x_6752 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6749) + x_6752);
  let x_6756 : f32 = u_xlat1.y;
  let x_6758 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6756 * x_6758);
  let x_6761 : vec2<f32> = u_xlat68;
  let x_6762 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6761 + x_6762);
  let x_6765 : f32 = u_xlat113.x;
  let x_6767 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6765, x_6767);
  let x_6770 : f32 = u_xlat45.x;
  let x_6771 : f32 = u_xlat0;
  let x_6773 : f32 = u_xlat204;
  u_xlat1.x = ((x_6770 * x_6771) + -(x_6773));
  let x_6777 : f32 = u_xlat204;
  let x_6780 : vec3<f32> = u_xlat2;
  let x_6782 : vec2<f32> = (-(vec2<f32>(x_6777, x_6777)) + vec2<f32>(x_6780.x, x_6780.z));
  let x_6783 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6782.x, x_6782.y, x_6783.z);
  let x_6786 : f32 = u_xlat1.x;
  let x_6788 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6786, x_6788);
  let x_6792 : f32 = u_xlat1.y;
  let x_6795 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6792) + x_6795);
  let x_6799 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6799.y, x_6799.y, x_6799.y, x_6799.y)) + vec4<f32>(0.6953125f, 0.703125f, 0.7109375f, 0.71875f));
  let x_6808 : vec4<f32> = u_xlat3;
  let x_6810 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_6808 / vec4<f32>(x_6810.x, x_6810.x, x_6810.x, x_6810.x));
  let x_6813 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6813);
  let x_6816 : f32 = u_xlat1.y;
  let x_6818 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6816 * x_6818);
  let x_6821 : vec2<f32> = u_xlat68;
  let x_6822 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6821 + x_6822);
  let x_6825 : f32 = u_xlat113.z;
  let x_6827 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6825, x_6827);
  let x_6830 : f32 = u_xlat45.z;
  let x_6831 : f32 = u_xlat0;
  let x_6833 : f32 = u_xlat204;
  u_xlat1.x = ((x_6830 * x_6831) + -(x_6833));
  let x_6837 : f32 = u_xlat204;
  let x_6840 : vec3<f32> = u_xlat2;
  let x_6842 : vec2<f32> = (-(vec2<f32>(x_6837, x_6837)) + vec2<f32>(x_6840.x, x_6840.z));
  let x_6843 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6842.x, x_6842.y, x_6843.z);
  let x_6846 : f32 = u_xlat1.x;
  let x_6848 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6846, x_6848);
  let x_6852 : f32 = u_xlat1.y;
  let x_6855 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6852) + x_6855);
  let x_6859 : f32 = u_xlat1.y;
  let x_6861 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6859 * x_6861);
  let x_6864 : vec2<f32> = u_xlat68;
  let x_6865 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6864 + x_6865);
  let x_6868 : f32 = u_xlat114.x;
  let x_6870 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6868, x_6870);
  let x_6873 : f32 = u_xlat46.x;
  let x_6874 : f32 = u_xlat0;
  let x_6876 : f32 = u_xlat204;
  u_xlat1.x = ((x_6873 * x_6874) + -(x_6876));
  let x_6880 : f32 = u_xlat204;
  let x_6883 : vec3<f32> = u_xlat2;
  let x_6885 : vec2<f32> = (-(vec2<f32>(x_6880, x_6880)) + vec2<f32>(x_6883.x, x_6883.z));
  let x_6886 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6885.x, x_6885.y, x_6886.z);
  let x_6889 : f32 = u_xlat1.x;
  let x_6891 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6889, x_6891);
  let x_6895 : f32 = u_xlat1.y;
  let x_6898 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6895) + x_6898);
  let x_6902 : f32 = u_xlat1.y;
  let x_6904 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6902 * x_6904);
  let x_6907 : vec2<f32> = u_xlat68;
  let x_6908 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6907 + x_6908);
  let x_6911 : f32 = u_xlat114.z;
  let x_6913 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6911, x_6913);
  let x_6916 : f32 = u_xlat46.z;
  let x_6917 : f32 = u_xlat0;
  let x_6919 : f32 = u_xlat204;
  u_xlat1.x = ((x_6916 * x_6917) + -(x_6919));
  let x_6923 : f32 = u_xlat204;
  let x_6926 : vec3<f32> = u_xlat2;
  let x_6928 : vec2<f32> = (-(vec2<f32>(x_6923, x_6923)) + vec2<f32>(x_6926.x, x_6926.z));
  let x_6929 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6928.x, x_6928.y, x_6929.z);
  let x_6932 : f32 = u_xlat1.x;
  let x_6934 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6932, x_6934);
  let x_6938 : f32 = u_xlat1.y;
  let x_6941 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6938) + x_6941);
  let x_6945 : f32 = u_xlat1.y;
  let x_6947 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6945 * x_6947);
  let x_6950 : vec2<f32> = u_xlat68;
  let x_6951 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6950 + x_6951);
  let x_6954 : f32 = u_xlat115.x;
  let x_6956 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6954, x_6956);
  let x_6959 : f32 = u_xlat47.x;
  let x_6960 : f32 = u_xlat0;
  let x_6962 : f32 = u_xlat204;
  u_xlat1.x = ((x_6959 * x_6960) + -(x_6962));
  let x_6966 : f32 = u_xlat204;
  let x_6969 : vec3<f32> = u_xlat2;
  let x_6971 : vec2<f32> = (-(vec2<f32>(x_6966, x_6966)) + vec2<f32>(x_6969.x, x_6969.z));
  let x_6972 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6971.x, x_6971.y, x_6972.z);
  let x_6975 : f32 = u_xlat1.x;
  let x_6977 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6975, x_6977);
  let x_6981 : f32 = u_xlat1.y;
  let x_6984 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6981) + x_6984);
  let x_6988 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6988.y, x_6988.y, x_6988.y, x_6988.y)) + vec4<f32>(0.7265625f, 0.734375f, 0.7421875f, 0.75f));
  let x_6997 : vec4<f32> = u_xlat3;
  let x_6999 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_6997 / vec4<f32>(x_6999.x, x_6999.x, x_6999.x, x_6999.x));
  let x_7002 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7002);
  let x_7005 : f32 = u_xlat1.y;
  let x_7007 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7005 * x_7007);
  let x_7010 : vec2<f32> = u_xlat68;
  let x_7011 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7010 + x_7011);
  let x_7014 : f32 = u_xlat115.z;
  let x_7016 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7014, x_7016);
  let x_7019 : f32 = u_xlat47.z;
  let x_7020 : f32 = u_xlat0;
  let x_7022 : f32 = u_xlat204;
  u_xlat1.x = ((x_7019 * x_7020) + -(x_7022));
  let x_7026 : f32 = u_xlat204;
  let x_7029 : vec3<f32> = u_xlat2;
  let x_7031 : vec2<f32> = (-(vec2<f32>(x_7026, x_7026)) + vec2<f32>(x_7029.x, x_7029.z));
  let x_7032 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7031.x, x_7031.y, x_7032.z);
  let x_7035 : f32 = u_xlat1.x;
  let x_7037 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7035, x_7037);
  let x_7041 : f32 = u_xlat1.y;
  let x_7044 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7041) + x_7044);
  let x_7048 : f32 = u_xlat1.y;
  let x_7050 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7048 * x_7050);
  let x_7053 : vec2<f32> = u_xlat68;
  let x_7054 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7053 + x_7054);
  let x_7057 : f32 = u_xlat116.x;
  let x_7059 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7057, x_7059);
  let x_7062 : f32 = u_xlat48.x;
  let x_7063 : f32 = u_xlat0;
  let x_7065 : f32 = u_xlat204;
  u_xlat1.x = ((x_7062 * x_7063) + -(x_7065));
  let x_7069 : f32 = u_xlat204;
  let x_7072 : vec3<f32> = u_xlat2;
  let x_7074 : vec2<f32> = (-(vec2<f32>(x_7069, x_7069)) + vec2<f32>(x_7072.x, x_7072.z));
  let x_7075 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7074.x, x_7074.y, x_7075.z);
  let x_7078 : f32 = u_xlat1.x;
  let x_7080 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7078, x_7080);
  let x_7084 : f32 = u_xlat1.y;
  let x_7087 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7084) + x_7087);
  let x_7091 : f32 = u_xlat1.y;
  let x_7093 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7091 * x_7093);
  let x_7096 : vec2<f32> = u_xlat68;
  let x_7097 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7096 + x_7097);
  let x_7100 : f32 = u_xlat116.z;
  let x_7102 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7100, x_7102);
  let x_7105 : f32 = u_xlat48.z;
  let x_7106 : f32 = u_xlat0;
  let x_7108 : f32 = u_xlat204;
  u_xlat1.x = ((x_7105 * x_7106) + -(x_7108));
  let x_7112 : f32 = u_xlat204;
  let x_7115 : vec3<f32> = u_xlat2;
  let x_7117 : vec2<f32> = (-(vec2<f32>(x_7112, x_7112)) + vec2<f32>(x_7115.x, x_7115.z));
  let x_7118 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7117.x, x_7117.y, x_7118.z);
  let x_7121 : f32 = u_xlat1.x;
  let x_7123 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7121, x_7123);
  let x_7127 : f32 = u_xlat1.y;
  let x_7130 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7127) + x_7130);
  let x_7134 : f32 = u_xlat1.y;
  let x_7136 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7134 * x_7136);
  let x_7139 : vec2<f32> = u_xlat68;
  let x_7140 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7139 + x_7140);
  let x_7143 : f32 = u_xlat117.x;
  let x_7145 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7143, x_7145);
  let x_7148 : f32 = u_xlat49.x;
  let x_7149 : f32 = u_xlat0;
  let x_7151 : f32 = u_xlat204;
  u_xlat1.x = ((x_7148 * x_7149) + -(x_7151));
  let x_7155 : f32 = u_xlat204;
  let x_7158 : vec3<f32> = u_xlat2;
  let x_7160 : vec2<f32> = (-(vec2<f32>(x_7155, x_7155)) + vec2<f32>(x_7158.x, x_7158.z));
  let x_7161 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7160.x, x_7160.y, x_7161.z);
  let x_7164 : f32 = u_xlat1.x;
  let x_7166 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7164, x_7166);
  let x_7170 : f32 = u_xlat1.y;
  let x_7173 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7170) + x_7173);
  let x_7177 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7177.y, x_7177.y, x_7177.y, x_7177.y)) + vec4<f32>(0.7578125f, 0.765625f, 0.7734375f, 0.78125f));
  let x_7186 : vec4<f32> = u_xlat3;
  let x_7188 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_7186 / vec4<f32>(x_7188.x, x_7188.x, x_7188.x, x_7188.x));
  let x_7191 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7191);
  let x_7194 : f32 = u_xlat1.y;
  let x_7196 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7194 * x_7196);
  let x_7199 : vec2<f32> = u_xlat68;
  let x_7200 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7199 + x_7200);
  let x_7203 : f32 = u_xlat117.z;
  let x_7205 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7203, x_7205);
  let x_7208 : f32 = u_xlat49.z;
  let x_7209 : f32 = u_xlat0;
  let x_7211 : f32 = u_xlat204;
  u_xlat1.x = ((x_7208 * x_7209) + -(x_7211));
  let x_7215 : f32 = u_xlat204;
  let x_7218 : vec3<f32> = u_xlat2;
  let x_7220 : vec2<f32> = (-(vec2<f32>(x_7215, x_7215)) + vec2<f32>(x_7218.x, x_7218.z));
  let x_7221 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7220.x, x_7220.y, x_7221.z);
  let x_7224 : f32 = u_xlat1.x;
  let x_7226 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7224, x_7226);
  let x_7230 : f32 = u_xlat1.y;
  let x_7233 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7230) + x_7233);
  let x_7237 : f32 = u_xlat1.y;
  let x_7239 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7237 * x_7239);
  let x_7242 : vec2<f32> = u_xlat68;
  let x_7243 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7242 + x_7243);
  let x_7246 : f32 = u_xlat118.x;
  let x_7248 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7246, x_7248);
  let x_7251 : f32 = u_xlat50.x;
  let x_7252 : f32 = u_xlat0;
  let x_7254 : f32 = u_xlat204;
  u_xlat1.x = ((x_7251 * x_7252) + -(x_7254));
  let x_7258 : f32 = u_xlat204;
  let x_7261 : vec3<f32> = u_xlat2;
  let x_7263 : vec2<f32> = (-(vec2<f32>(x_7258, x_7258)) + vec2<f32>(x_7261.x, x_7261.z));
  let x_7264 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7263.x, x_7263.y, x_7264.z);
  let x_7267 : f32 = u_xlat1.x;
  let x_7269 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7267, x_7269);
  let x_7273 : f32 = u_xlat1.y;
  let x_7276 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7273) + x_7276);
  let x_7280 : f32 = u_xlat1.y;
  let x_7282 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7280 * x_7282);
  let x_7285 : vec2<f32> = u_xlat68;
  let x_7286 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7285 + x_7286);
  let x_7289 : f32 = u_xlat118.z;
  let x_7291 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7289, x_7291);
  let x_7294 : f32 = u_xlat50.z;
  let x_7295 : f32 = u_xlat0;
  let x_7297 : f32 = u_xlat204;
  u_xlat1.x = ((x_7294 * x_7295) + -(x_7297));
  let x_7301 : f32 = u_xlat204;
  let x_7304 : vec3<f32> = u_xlat2;
  let x_7306 : vec2<f32> = (-(vec2<f32>(x_7301, x_7301)) + vec2<f32>(x_7304.x, x_7304.z));
  let x_7307 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7306.x, x_7306.y, x_7307.z);
  let x_7310 : f32 = u_xlat1.x;
  let x_7312 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7310, x_7312);
  let x_7316 : f32 = u_xlat1.y;
  let x_7319 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7316) + x_7319);
  let x_7323 : f32 = u_xlat1.y;
  let x_7325 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7323 * x_7325);
  let x_7328 : vec2<f32> = u_xlat68;
  let x_7329 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7328 + x_7329);
  let x_7332 : f32 = u_xlat119.x;
  let x_7334 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7332, x_7334);
  let x_7337 : f32 = u_xlat51.x;
  let x_7338 : f32 = u_xlat0;
  let x_7340 : f32 = u_xlat204;
  u_xlat1.x = ((x_7337 * x_7338) + -(x_7340));
  let x_7344 : f32 = u_xlat204;
  let x_7347 : vec3<f32> = u_xlat2;
  let x_7349 : vec2<f32> = (-(vec2<f32>(x_7344, x_7344)) + vec2<f32>(x_7347.x, x_7347.z));
  let x_7350 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7349.x, x_7349.y, x_7350.z);
  let x_7353 : f32 = u_xlat1.x;
  let x_7355 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7353, x_7355);
  let x_7359 : f32 = u_xlat1.y;
  let x_7362 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7359) + x_7362);
  let x_7366 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7366.y, x_7366.y, x_7366.y, x_7366.y)) + vec4<f32>(0.7890625f, 0.796875f, 0.8046875f, 0.8125f));
  let x_7375 : vec4<f32> = u_xlat3;
  let x_7377 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_7375 / vec4<f32>(x_7377.x, x_7377.x, x_7377.x, x_7377.x));
  let x_7380 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7380);
  let x_7383 : f32 = u_xlat1.y;
  let x_7385 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7383 * x_7385);
  let x_7388 : vec2<f32> = u_xlat68;
  let x_7389 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7388 + x_7389);
  let x_7392 : f32 = u_xlat119.z;
  let x_7394 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7392, x_7394);
  let x_7397 : f32 = u_xlat51.z;
  let x_7398 : f32 = u_xlat0;
  let x_7400 : f32 = u_xlat204;
  u_xlat1.x = ((x_7397 * x_7398) + -(x_7400));
  let x_7404 : f32 = u_xlat204;
  let x_7407 : vec3<f32> = u_xlat2;
  let x_7409 : vec2<f32> = (-(vec2<f32>(x_7404, x_7404)) + vec2<f32>(x_7407.x, x_7407.z));
  let x_7410 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7409.x, x_7409.y, x_7410.z);
  let x_7413 : f32 = u_xlat1.x;
  let x_7415 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7413, x_7415);
  let x_7419 : f32 = u_xlat1.y;
  let x_7422 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7419) + x_7422);
  let x_7426 : f32 = u_xlat1.y;
  let x_7428 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7426 * x_7428);
  let x_7431 : vec2<f32> = u_xlat68;
  let x_7432 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7431 + x_7432);
  let x_7435 : f32 = u_xlat120.x;
  let x_7437 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7435, x_7437);
  let x_7440 : f32 = u_xlat52.x;
  let x_7441 : f32 = u_xlat0;
  let x_7443 : f32 = u_xlat204;
  u_xlat1.x = ((x_7440 * x_7441) + -(x_7443));
  let x_7447 : f32 = u_xlat204;
  let x_7450 : vec3<f32> = u_xlat2;
  let x_7452 : vec2<f32> = (-(vec2<f32>(x_7447, x_7447)) + vec2<f32>(x_7450.x, x_7450.z));
  let x_7453 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7452.x, x_7452.y, x_7453.z);
  let x_7456 : f32 = u_xlat1.x;
  let x_7458 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7456, x_7458);
  let x_7462 : f32 = u_xlat1.y;
  let x_7465 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7462) + x_7465);
  let x_7469 : f32 = u_xlat1.y;
  let x_7471 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7469 * x_7471);
  let x_7474 : vec2<f32> = u_xlat68;
  let x_7475 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7474 + x_7475);
  let x_7478 : f32 = u_xlat120.z;
  let x_7480 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7478, x_7480);
  let x_7483 : f32 = u_xlat52.z;
  let x_7484 : f32 = u_xlat0;
  let x_7486 : f32 = u_xlat204;
  u_xlat1.x = ((x_7483 * x_7484) + -(x_7486));
  let x_7490 : f32 = u_xlat204;
  let x_7493 : vec3<f32> = u_xlat2;
  let x_7495 : vec2<f32> = (-(vec2<f32>(x_7490, x_7490)) + vec2<f32>(x_7493.x, x_7493.z));
  let x_7496 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7495.x, x_7495.y, x_7496.z);
  let x_7499 : f32 = u_xlat1.x;
  let x_7501 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7499, x_7501);
  let x_7505 : f32 = u_xlat1.y;
  let x_7508 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7505) + x_7508);
  let x_7512 : f32 = u_xlat1.y;
  let x_7514 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7512 * x_7514);
  let x_7517 : vec2<f32> = u_xlat68;
  let x_7518 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7517 + x_7518);
  let x_7521 : f32 = u_xlat121.x;
  let x_7523 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7521, x_7523);
  let x_7526 : f32 = u_xlat53.x;
  let x_7527 : f32 = u_xlat0;
  let x_7529 : f32 = u_xlat204;
  u_xlat1.x = ((x_7526 * x_7527) + -(x_7529));
  let x_7533 : f32 = u_xlat204;
  let x_7536 : vec3<f32> = u_xlat2;
  let x_7538 : vec2<f32> = (-(vec2<f32>(x_7533, x_7533)) + vec2<f32>(x_7536.x, x_7536.z));
  let x_7539 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7538.x, x_7538.y, x_7539.z);
  let x_7542 : f32 = u_xlat1.x;
  let x_7544 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7542, x_7544);
  let x_7548 : f32 = u_xlat1.y;
  let x_7551 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7548) + x_7551);
  let x_7555 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7555.y, x_7555.y, x_7555.y, x_7555.y)) + vec4<f32>(0.8203125f, 0.828125f, 0.8359375f, 0.84375f));
  let x_7564 : vec4<f32> = u_xlat3;
  let x_7566 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_7564 / vec4<f32>(x_7566.x, x_7566.x, x_7566.x, x_7566.x));
  let x_7569 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7569);
  let x_7572 : f32 = u_xlat1.y;
  let x_7574 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7572 * x_7574);
  let x_7577 : vec2<f32> = u_xlat68;
  let x_7578 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7577 + x_7578);
  let x_7581 : f32 = u_xlat121.z;
  let x_7583 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7581, x_7583);
  let x_7586 : f32 = u_xlat53.z;
  let x_7587 : f32 = u_xlat0;
  let x_7589 : f32 = u_xlat204;
  u_xlat1.x = ((x_7586 * x_7587) + -(x_7589));
  let x_7593 : f32 = u_xlat204;
  let x_7596 : vec3<f32> = u_xlat2;
  let x_7598 : vec2<f32> = (-(vec2<f32>(x_7593, x_7593)) + vec2<f32>(x_7596.x, x_7596.z));
  let x_7599 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7598.x, x_7598.y, x_7599.z);
  let x_7602 : f32 = u_xlat1.x;
  let x_7604 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7602, x_7604);
  let x_7608 : f32 = u_xlat1.y;
  let x_7611 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7608) + x_7611);
  let x_7615 : f32 = u_xlat1.y;
  let x_7617 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7615 * x_7617);
  let x_7620 : vec2<f32> = u_xlat68;
  let x_7621 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7620 + x_7621);
  let x_7624 : f32 = u_xlat122.x;
  let x_7626 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7624, x_7626);
  let x_7629 : f32 = u_xlat54.x;
  let x_7630 : f32 = u_xlat0;
  let x_7632 : f32 = u_xlat204;
  u_xlat1.x = ((x_7629 * x_7630) + -(x_7632));
  let x_7636 : f32 = u_xlat204;
  let x_7639 : vec3<f32> = u_xlat2;
  let x_7641 : vec2<f32> = (-(vec2<f32>(x_7636, x_7636)) + vec2<f32>(x_7639.x, x_7639.z));
  let x_7642 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7641.x, x_7641.y, x_7642.z);
  let x_7645 : f32 = u_xlat1.x;
  let x_7647 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7645, x_7647);
  let x_7651 : f32 = u_xlat1.y;
  let x_7654 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7651) + x_7654);
  let x_7658 : f32 = u_xlat1.y;
  let x_7660 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7658 * x_7660);
  let x_7663 : vec2<f32> = u_xlat68;
  let x_7664 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7663 + x_7664);
  let x_7667 : f32 = u_xlat122.z;
  let x_7669 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7667, x_7669);
  let x_7672 : f32 = u_xlat54.z;
  let x_7673 : f32 = u_xlat0;
  let x_7675 : f32 = u_xlat204;
  u_xlat1.x = ((x_7672 * x_7673) + -(x_7675));
  let x_7679 : f32 = u_xlat204;
  let x_7682 : vec3<f32> = u_xlat2;
  let x_7684 : vec2<f32> = (-(vec2<f32>(x_7679, x_7679)) + vec2<f32>(x_7682.x, x_7682.z));
  let x_7685 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7684.x, x_7684.y, x_7685.z);
  let x_7688 : f32 = u_xlat1.x;
  let x_7690 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7688, x_7690);
  let x_7694 : f32 = u_xlat1.y;
  let x_7697 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7694) + x_7697);
  let x_7701 : f32 = u_xlat1.y;
  let x_7703 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7701 * x_7703);
  let x_7706 : vec2<f32> = u_xlat68;
  let x_7707 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7706 + x_7707);
  let x_7710 : f32 = u_xlat123.x;
  let x_7712 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7710, x_7712);
  let x_7715 : f32 = u_xlat55.x;
  let x_7716 : f32 = u_xlat0;
  let x_7718 : f32 = u_xlat204;
  u_xlat1.x = ((x_7715 * x_7716) + -(x_7718));
  let x_7722 : f32 = u_xlat204;
  let x_7725 : vec3<f32> = u_xlat2;
  let x_7727 : vec2<f32> = (-(vec2<f32>(x_7722, x_7722)) + vec2<f32>(x_7725.x, x_7725.z));
  let x_7728 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7727.x, x_7727.y, x_7728.z);
  let x_7731 : f32 = u_xlat1.x;
  let x_7733 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7731, x_7733);
  let x_7737 : f32 = u_xlat1.y;
  let x_7740 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7737) + x_7740);
  let x_7744 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7744.y, x_7744.y, x_7744.y, x_7744.y)) + vec4<f32>(0.8515625f, 0.859375f, 0.8671875f, 0.875f));
  let x_7753 : vec4<f32> = u_xlat3;
  let x_7755 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_7753 / vec4<f32>(x_7755.x, x_7755.x, x_7755.x, x_7755.x));
  let x_7758 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7758);
  let x_7761 : f32 = u_xlat1.y;
  let x_7763 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7761 * x_7763);
  let x_7766 : vec2<f32> = u_xlat68;
  let x_7767 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7766 + x_7767);
  let x_7770 : f32 = u_xlat123.z;
  let x_7772 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7770, x_7772);
  let x_7775 : f32 = u_xlat55.z;
  let x_7776 : f32 = u_xlat0;
  let x_7778 : f32 = u_xlat204;
  u_xlat1.x = ((x_7775 * x_7776) + -(x_7778));
  let x_7782 : f32 = u_xlat204;
  let x_7785 : vec3<f32> = u_xlat2;
  let x_7787 : vec2<f32> = (-(vec2<f32>(x_7782, x_7782)) + vec2<f32>(x_7785.x, x_7785.z));
  let x_7788 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7787.x, x_7787.y, x_7788.z);
  let x_7791 : f32 = u_xlat1.x;
  let x_7793 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7791, x_7793);
  let x_7797 : f32 = u_xlat1.y;
  let x_7800 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7797) + x_7800);
  let x_7804 : f32 = u_xlat1.y;
  let x_7806 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7804 * x_7806);
  let x_7809 : vec2<f32> = u_xlat68;
  let x_7810 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7809 + x_7810);
  let x_7813 : f32 = u_xlat124.x;
  let x_7815 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7813, x_7815);
  let x_7818 : f32 = u_xlat56.x;
  let x_7819 : f32 = u_xlat0;
  let x_7821 : f32 = u_xlat204;
  u_xlat1.x = ((x_7818 * x_7819) + -(x_7821));
  let x_7825 : f32 = u_xlat204;
  let x_7828 : vec3<f32> = u_xlat2;
  let x_7830 : vec2<f32> = (-(vec2<f32>(x_7825, x_7825)) + vec2<f32>(x_7828.x, x_7828.z));
  let x_7831 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7830.x, x_7830.y, x_7831.z);
  let x_7834 : f32 = u_xlat1.x;
  let x_7836 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7834, x_7836);
  let x_7840 : f32 = u_xlat1.y;
  let x_7843 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7840) + x_7843);
  let x_7847 : f32 = u_xlat1.y;
  let x_7849 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7847 * x_7849);
  let x_7852 : vec2<f32> = u_xlat68;
  let x_7853 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7852 + x_7853);
  let x_7856 : f32 = u_xlat124.z;
  let x_7858 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7856, x_7858);
  let x_7861 : f32 = u_xlat56.z;
  let x_7862 : f32 = u_xlat0;
  let x_7864 : f32 = u_xlat204;
  u_xlat1.x = ((x_7861 * x_7862) + -(x_7864));
  let x_7868 : f32 = u_xlat204;
  let x_7871 : vec3<f32> = u_xlat2;
  let x_7873 : vec2<f32> = (-(vec2<f32>(x_7868, x_7868)) + vec2<f32>(x_7871.x, x_7871.z));
  let x_7874 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7873.x, x_7873.y, x_7874.z);
  let x_7877 : f32 = u_xlat1.x;
  let x_7879 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7877, x_7879);
  let x_7883 : f32 = u_xlat1.y;
  let x_7886 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7883) + x_7886);
  let x_7890 : f32 = u_xlat1.y;
  let x_7892 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7890 * x_7892);
  let x_7895 : vec2<f32> = u_xlat68;
  let x_7896 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7895 + x_7896);
  let x_7899 : f32 = u_xlat125.x;
  let x_7901 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7899, x_7901);
  let x_7904 : f32 = u_xlat57.x;
  let x_7905 : f32 = u_xlat0;
  let x_7907 : f32 = u_xlat204;
  u_xlat1.x = ((x_7904 * x_7905) + -(x_7907));
  let x_7911 : f32 = u_xlat204;
  let x_7914 : vec3<f32> = u_xlat2;
  let x_7916 : vec2<f32> = (-(vec2<f32>(x_7911, x_7911)) + vec2<f32>(x_7914.x, x_7914.z));
  let x_7917 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7916.x, x_7916.y, x_7917.z);
  let x_7920 : f32 = u_xlat1.x;
  let x_7922 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7920, x_7922);
  let x_7926 : f32 = u_xlat1.y;
  let x_7929 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7926) + x_7929);
  let x_7933 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7933.y, x_7933.y, x_7933.y, x_7933.y)) + vec4<f32>(0.8828125f, 0.890625f, 0.8984375f, 0.90625f));
  let x_7942 : vec4<f32> = u_xlat3;
  let x_7944 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_7942 / vec4<f32>(x_7944.x, x_7944.x, x_7944.x, x_7944.x));
  let x_7947 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7947);
  let x_7950 : f32 = u_xlat1.y;
  let x_7952 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7950 * x_7952);
  let x_7955 : vec2<f32> = u_xlat68;
  let x_7956 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7955 + x_7956);
  let x_7959 : f32 = u_xlat125.z;
  let x_7961 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7959, x_7961);
  let x_7964 : f32 = u_xlat57.z;
  let x_7965 : f32 = u_xlat0;
  let x_7967 : f32 = u_xlat204;
  u_xlat1.x = ((x_7964 * x_7965) + -(x_7967));
  let x_7971 : f32 = u_xlat204;
  let x_7974 : vec3<f32> = u_xlat2;
  let x_7976 : vec2<f32> = (-(vec2<f32>(x_7971, x_7971)) + vec2<f32>(x_7974.x, x_7974.z));
  let x_7977 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7976.x, x_7976.y, x_7977.z);
  let x_7980 : f32 = u_xlat1.x;
  let x_7982 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7980, x_7982);
  let x_7986 : f32 = u_xlat1.y;
  let x_7989 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7986) + x_7989);
  let x_7993 : f32 = u_xlat1.y;
  let x_7995 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7993 * x_7995);
  let x_7998 : vec2<f32> = u_xlat68;
  let x_7999 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7998 + x_7999);
  let x_8002 : f32 = u_xlat126.x;
  let x_8004 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8002, x_8004);
  let x_8007 : f32 = u_xlat58.x;
  let x_8008 : f32 = u_xlat0;
  let x_8010 : f32 = u_xlat204;
  u_xlat1.x = ((x_8007 * x_8008) + -(x_8010));
  let x_8014 : f32 = u_xlat204;
  let x_8017 : vec3<f32> = u_xlat2;
  let x_8019 : vec2<f32> = (-(vec2<f32>(x_8014, x_8014)) + vec2<f32>(x_8017.x, x_8017.z));
  let x_8020 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8019.x, x_8019.y, x_8020.z);
  let x_8023 : f32 = u_xlat1.x;
  let x_8025 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8023, x_8025);
  let x_8029 : f32 = u_xlat1.y;
  let x_8032 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8029) + x_8032);
  let x_8036 : f32 = u_xlat1.y;
  let x_8038 : f32 = u_xlat3.z;
  u_xlat1.x = (x_8036 * x_8038);
  let x_8041 : vec2<f32> = u_xlat68;
  let x_8042 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8041 + x_8042);
  let x_8045 : f32 = u_xlat126.z;
  let x_8047 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8045, x_8047);
  let x_8050 : f32 = u_xlat58.z;
  let x_8051 : f32 = u_xlat0;
  let x_8053 : f32 = u_xlat204;
  u_xlat1.x = ((x_8050 * x_8051) + -(x_8053));
  let x_8057 : f32 = u_xlat204;
  let x_8060 : vec3<f32> = u_xlat2;
  let x_8062 : vec2<f32> = (-(vec2<f32>(x_8057, x_8057)) + vec2<f32>(x_8060.x, x_8060.z));
  let x_8063 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8062.x, x_8062.y, x_8063.z);
  let x_8066 : f32 = u_xlat1.x;
  let x_8068 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8066, x_8068);
  let x_8072 : f32 = u_xlat1.y;
  let x_8075 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8072) + x_8075);
  let x_8079 : f32 = u_xlat1.y;
  let x_8081 : f32 = u_xlat3.w;
  u_xlat1.x = (x_8079 * x_8081);
  let x_8084 : vec2<f32> = u_xlat68;
  let x_8085 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8084 + x_8085);
  let x_8088 : f32 = u_xlat127.x;
  let x_8090 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8088, x_8090);
  let x_8093 : f32 = u_xlat59.x;
  let x_8094 : f32 = u_xlat0;
  let x_8096 : f32 = u_xlat204;
  u_xlat1.x = ((x_8093 * x_8094) + -(x_8096));
  let x_8100 : f32 = u_xlat204;
  let x_8103 : vec3<f32> = u_xlat2;
  let x_8105 : vec2<f32> = (-(vec2<f32>(x_8100, x_8100)) + vec2<f32>(x_8103.x, x_8103.z));
  let x_8106 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8105.x, x_8105.y, x_8106.z);
  let x_8109 : f32 = u_xlat1.x;
  let x_8111 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8109, x_8111);
  let x_8115 : f32 = u_xlat1.y;
  let x_8118 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8115) + x_8118);
  let x_8122 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_8122.y, x_8122.y, x_8122.y, x_8122.y)) + vec4<f32>(0.9140625f, 0.921875f, 0.9296875f, 0.9375f));
  let x_8131 : vec4<f32> = u_xlat3;
  let x_8133 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_8131 / vec4<f32>(x_8133.x, x_8133.x, x_8133.x, x_8133.x));
  let x_8136 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_8136);
  let x_8139 : f32 = u_xlat1.y;
  let x_8141 : f32 = u_xlat3.x;
  u_xlat1.x = (x_8139 * x_8141);
  let x_8144 : vec2<f32> = u_xlat68;
  let x_8145 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8144 + x_8145);
  let x_8148 : f32 = u_xlat127.z;
  let x_8150 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8148, x_8150);
  let x_8153 : f32 = u_xlat59.z;
  let x_8154 : f32 = u_xlat0;
  let x_8156 : f32 = u_xlat204;
  u_xlat1.x = ((x_8153 * x_8154) + -(x_8156));
  let x_8160 : f32 = u_xlat204;
  let x_8163 : vec3<f32> = u_xlat2;
  let x_8165 : vec2<f32> = (-(vec2<f32>(x_8160, x_8160)) + vec2<f32>(x_8163.x, x_8163.z));
  let x_8166 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8165.x, x_8165.y, x_8166.z);
  let x_8169 : f32 = u_xlat1.x;
  let x_8171 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8169, x_8171);
  let x_8175 : f32 = u_xlat1.y;
  let x_8178 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8175) + x_8178);
  let x_8182 : f32 = u_xlat1.y;
  let x_8184 : f32 = u_xlat3.y;
  u_xlat1.x = (x_8182 * x_8184);
  let x_8187 : vec2<f32> = u_xlat68;
  let x_8188 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8187 + x_8188);
  let x_8191 : f32 = u_xlat128.x;
  let x_8193 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8191, x_8193);
  let x_8196 : f32 = u_xlat60.x;
  let x_8197 : f32 = u_xlat0;
  let x_8199 : f32 = u_xlat204;
  u_xlat1.x = ((x_8196 * x_8197) + -(x_8199));
  let x_8203 : f32 = u_xlat204;
  let x_8206 : vec3<f32> = u_xlat2;
  let x_8208 : vec2<f32> = (-(vec2<f32>(x_8203, x_8203)) + vec2<f32>(x_8206.x, x_8206.z));
  let x_8209 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8208.x, x_8208.y, x_8209.z);
  let x_8212 : f32 = u_xlat1.x;
  let x_8214 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8212, x_8214);
  let x_8218 : f32 = u_xlat1.y;
  let x_8221 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8218) + x_8221);
  let x_8225 : f32 = u_xlat1.y;
  let x_8227 : f32 = u_xlat3.z;
  u_xlat1.x = (x_8225 * x_8227);
  let x_8230 : vec2<f32> = u_xlat68;
  let x_8231 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8230 + x_8231);
  let x_8234 : f32 = u_xlat128.z;
  let x_8236 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8234, x_8236);
  let x_8239 : f32 = u_xlat60.z;
  let x_8240 : f32 = u_xlat0;
  let x_8242 : f32 = u_xlat204;
  u_xlat1.x = ((x_8239 * x_8240) + -(x_8242));
  let x_8246 : f32 = u_xlat204;
  let x_8249 : vec3<f32> = u_xlat2;
  let x_8251 : vec2<f32> = (-(vec2<f32>(x_8246, x_8246)) + vec2<f32>(x_8249.x, x_8249.z));
  let x_8252 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8251.x, x_8251.y, x_8252.z);
  let x_8255 : f32 = u_xlat1.x;
  let x_8257 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8255, x_8257);
  let x_8261 : f32 = u_xlat1.y;
  let x_8264 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8261) + x_8264);
  let x_8268 : f32 = u_xlat1.y;
  let x_8270 : f32 = u_xlat3.w;
  u_xlat1.x = (x_8268 * x_8270);
  let x_8273 : vec2<f32> = u_xlat68;
  let x_8274 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8273 + x_8274);
  let x_8277 : f32 = u_xlat129.x;
  let x_8279 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8277, x_8279);
  let x_8282 : f32 = u_xlat61.x;
  let x_8283 : f32 = u_xlat0;
  let x_8285 : f32 = u_xlat204;
  u_xlat1.x = ((x_8282 * x_8283) + -(x_8285));
  let x_8289 : f32 = u_xlat204;
  let x_8292 : vec3<f32> = u_xlat2;
  let x_8294 : vec2<f32> = (-(vec2<f32>(x_8289, x_8289)) + vec2<f32>(x_8292.x, x_8292.z));
  let x_8295 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8294.x, x_8294.y, x_8295.z);
  let x_8298 : f32 = u_xlat1.x;
  let x_8300 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8298, x_8300);
  let x_8304 : f32 = u_xlat1.y;
  let x_8307 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8304) + x_8307);
  let x_8311 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_8311.y, x_8311.y, x_8311.y, x_8311.y)) + vec4<f32>(0.9453125f, 0.953125f, 0.9609375f, 0.96875f));
  let x_8320 : vec4<f32> = u_xlat3;
  let x_8322 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  u_xlat3 = (x_8320 / vec4<f32>(x_8322.x, x_8322.x, x_8322.x, x_8322.x));
  let x_8325 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_8325);
  let x_8328 : f32 = u_xlat1.y;
  let x_8330 : f32 = u_xlat3.x;
  u_xlat1.x = (x_8328 * x_8330);
  let x_8333 : vec2<f32> = u_xlat68;
  let x_8334 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8333 + x_8334);
  let x_8337 : f32 = u_xlat129.z;
  let x_8339 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8337, x_8339);
  let x_8342 : f32 = u_xlat61.z;
  let x_8343 : f32 = u_xlat0;
  let x_8345 : f32 = u_xlat204;
  u_xlat1.x = ((x_8342 * x_8343) + -(x_8345));
  let x_8349 : f32 = u_xlat204;
  let x_8352 : vec3<f32> = u_xlat2;
  let x_8354 : vec2<f32> = (-(vec2<f32>(x_8349, x_8349)) + vec2<f32>(x_8352.x, x_8352.z));
  let x_8355 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8354.x, x_8354.y, x_8355.z);
  let x_8358 : f32 = u_xlat1.x;
  let x_8360 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8358, x_8360);
  let x_8364 : f32 = u_xlat1.y;
  let x_8367 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8364) + x_8367);
  let x_8371 : f32 = u_xlat1.y;
  let x_8373 : f32 = u_xlat3.y;
  u_xlat1.x = (x_8371 * x_8373);
  let x_8376 : vec2<f32> = u_xlat68;
  let x_8377 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8376 + x_8377);
  let x_8380 : f32 = u_xlat130.x;
  let x_8382 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8380, x_8382);
  let x_8385 : f32 = u_xlat62.x;
  let x_8386 : f32 = u_xlat0;
  let x_8388 : f32 = u_xlat204;
  u_xlat1.x = ((x_8385 * x_8386) + -(x_8388));
  let x_8392 : f32 = u_xlat204;
  let x_8395 : vec3<f32> = u_xlat2;
  let x_8397 : vec2<f32> = (-(vec2<f32>(x_8392, x_8392)) + vec2<f32>(x_8395.x, x_8395.z));
  let x_8398 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8397.x, x_8397.y, x_8398.z);
  let x_8401 : f32 = u_xlat1.x;
  let x_8403 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8401, x_8403);
  let x_8407 : f32 = u_xlat1.y;
  let x_8410 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8407) + x_8410);
  let x_8414 : f32 = u_xlat1.y;
  let x_8416 : f32 = u_xlat3.z;
  u_xlat1.x = (x_8414 * x_8416);
  let x_8419 : vec2<f32> = u_xlat68;
  let x_8420 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8419 + x_8420);
  let x_8423 : f32 = u_xlat130.z;
  let x_8425 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8423, x_8425);
  let x_8428 : f32 = u_xlat62.z;
  let x_8429 : f32 = u_xlat0;
  let x_8431 : f32 = u_xlat204;
  u_xlat1.x = ((x_8428 * x_8429) + -(x_8431));
  let x_8435 : f32 = u_xlat204;
  let x_8438 : vec3<f32> = u_xlat2;
  let x_8440 : vec2<f32> = (-(vec2<f32>(x_8435, x_8435)) + vec2<f32>(x_8438.x, x_8438.z));
  let x_8441 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8440.x, x_8440.y, x_8441.z);
  let x_8444 : f32 = u_xlat1.x;
  let x_8446 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8444, x_8446);
  let x_8450 : f32 = u_xlat1.y;
  let x_8453 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8450) + x_8453);
  let x_8457 : f32 = u_xlat1.y;
  let x_8459 : f32 = u_xlat3.w;
  u_xlat1.x = (x_8457 * x_8459);
  let x_8462 : vec2<f32> = u_xlat68;
  let x_8463 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8462 + x_8463);
  let x_8466 : f32 = u_xlat131.x;
  let x_8468 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8466, x_8468);
  let x_8471 : f32 = u_xlat63.x;
  let x_8472 : f32 = u_xlat0;
  let x_8474 : f32 = u_xlat204;
  u_xlat1.x = ((x_8471 * x_8472) + -(x_8474));
  let x_8478 : f32 = u_xlat204;
  let x_8481 : vec3<f32> = u_xlat2;
  let x_8483 : vec2<f32> = (-(vec2<f32>(x_8478, x_8478)) + vec2<f32>(x_8481.x, x_8481.z));
  let x_8484 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8483.x, x_8483.y, x_8484.z);
  let x_8487 : f32 = u_xlat1.x;
  let x_8489 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8487, x_8489);
  let x_8493 : f32 = u_xlat1.y;
  let x_8496 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8493) + x_8496);
  let x_8500 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  let x_8507 : vec3<f32> = (-(vec3<f32>(x_8500.y, x_8500.y, x_8500.y)) + vec3<f32>(0.9765625f, 0.984375f, 0.9921875f));
  let x_8508 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_8507.x, x_8507.y, x_8507.z, x_8508.w);
  let x_8510 : vec4<f32> = u_xlat3;
  let x_8513 : vec4<f32> = x_2546.x_ScaleOffsetRes;
  let x_8515 : vec3<f32> = (vec3<f32>(x_8510.x, x_8510.y, x_8510.z) / vec3<f32>(x_8513.x, x_8513.x, x_8513.x));
  let x_8516 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_8515.x, x_8515.y, x_8515.z, x_8516.w);
  let x_8518 : vec4<f32> = u_xlat3;
  let x_8520 : vec3<f32> = exp2(vec3<f32>(x_8518.x, x_8518.y, x_8518.z));
  let x_8521 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_8520.x, x_8520.y, x_8520.z, x_8521.w);
  let x_8524 : f32 = u_xlat1.y;
  let x_8526 : f32 = u_xlat3.x;
  u_xlat1.x = (x_8524 * x_8526);
  let x_8529 : vec2<f32> = u_xlat68;
  let x_8530 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8529 + x_8530);
  let x_8533 : f32 = u_xlat131.z;
  let x_8535 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8533, x_8535);
  let x_8538 : f32 = u_xlat63.z;
  let x_8539 : f32 = u_xlat0;
  let x_8541 : f32 = u_xlat204;
  u_xlat1.x = ((x_8538 * x_8539) + -(x_8541));
  let x_8545 : f32 = u_xlat204;
  let x_8548 : vec3<f32> = u_xlat2;
  u_xlat69 = (-(vec2<f32>(x_8545, x_8545)) + vec2<f32>(x_8548.x, x_8548.z));
  let x_8552 : f32 = u_xlat1.x;
  let x_8554 : f32 = u_xlat69.y;
  u_xlat2.y = min(x_8552, x_8554);
  let x_8558 : f32 = u_xlat69.y;
  let x_8560 : f32 = u_xlat2.y;
  u_xlat204 = (x_8558 + -(x_8560));
  let x_8564 : f32 = u_xlat2.y;
  let x_8566 : f32 = u_xlat3.y;
  u_xlat2.x = (x_8564 * x_8566);
  let x_8569 : vec2<f32> = u_xlat68;
  let x_8570 : vec3<f32> = u_xlat2;
  u_xlat68 = (x_8569 + vec2<f32>(x_8570.x, x_8570.y));
  let x_8573 : f32 = u_xlat132;
  let x_8575 : f32 = u_xlat69.x;
  u_xlat1.x = min(x_8573, x_8575);
  let x_8578 : f32 = u_xlat64;
  let x_8579 : f32 = u_xlat0;
  let x_8582 : f32 = u_xlat1.x;
  u_xlat69.x = ((x_8578 * x_8579) + -(x_8582));
  let x_8586 : f32 = u_xlat204;
  let x_8588 : f32 = u_xlat1.x;
  u_xlat204 = (x_8586 + -(x_8588));
  let x_8592 : f32 = u_xlat69.x;
  let x_8593 : f32 = u_xlat204;
  u_xlat1.y = min(x_8592, x_8593);
  let x_8597 : f32 = u_xlat1.y;
  let x_8599 : f32 = u_xlat3.z;
  u_xlat1.x = (x_8597 * x_8599);
  let x_8602 : vec2<f32> = u_xlat68;
  let x_8603 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8602 + x_8603);
  let x_8606 : f32 = u_xlat68.y;
  u_xlat136 = max(x_8606, 0.0001f);
  let x_8610 : f32 = u_xlat68.x;
  let x_8611 : f32 = u_xlat136;
  u_xlat68.x = (x_8610 / x_8611);
  let x_8615 : f32 = u_xlat68.x;
  let x_8617 : f32 = x_2546.x_Params.z;
  u_xlat68.x = max(x_8615, x_8617);
  let x_8623 : f32 = u_xlat68.x;
  let x_8625 : f32 = x_2546.x_Params.w;
  vs_TEXCOORD2 = min(x_8623, x_8625);
  let x_8633 : vec3<f32> = in_POSITION0;
  let x_8634 : vec2<f32> = vec2<f32>(x_8633.x, x_8633.y);
  let x_8637 : vec4<f32> = gl_Position;
  gl_Position = vec4<f32>(x_8634.x, x_8634.y, x_8637.z, x_8637.w);
  let x_8642 : vec4<f32> = gl_Position;
  gl_Position = vec4<f32>(x_8642.x, x_8642.y, vec2<f32>(0.0f, 1.0f).x, vec2<f32>(0.0f, 1.0f).y);
  let x_8646 : vec3<f32> = in_POSITION0;
  vs_TEXCOORD0 = ((vec2<f32>(x_8646.x, x_8646.y) * vec2<f32>(0.5f, -0.5f)) + vec2<f32>(0.5f, 0.5f));
  let x_8655 : f32 = u_xlat0;
  vs_TEXCOORD1 = x_8655;
  return;
}

struct main_out {
  @builtin(position)
  gl_Position : vec4<f32>,
  @location(0)
  vs_TEXCOORD0_1 : vec2<f32>,
  @location(1)
  vs_TEXCOORD1_1 : f32,
}

@vertex
fn main(@location(0) in_POSITION0_param : vec3<f32>) -> main_out {
  in_POSITION0 = in_POSITION0_param;
  main_1();
  return main_out(gl_Position, vs_TEXCOORD0, vs_TEXCOORD1);
}

