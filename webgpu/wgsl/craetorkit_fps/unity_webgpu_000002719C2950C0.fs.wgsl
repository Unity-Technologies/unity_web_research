type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OcclusionMaskSelector : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  unity_FogParams : vec4<f32>,
  unity_ProbeVolumeParams : vec4<f32>,
  unity_ProbeVolumeWorldToObject : mat4x4<f32>,
  unity_ProbeVolumeSizeInv : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_ProbeVolumeMin : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_LightColor0 : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
  x_Color : vec4<f32>,
  x_Metallic : f32,
  x_Glossiness : f32,
  @size(8)
  padding_3 : u32,
  unity_WorldToLight : mat4x4<f32>,
}

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(7) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_35 : PGlobals;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec4<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec3<f32>;

@group(0) @binding(3) var unity_ProbeVolumeSH : texture_3d<f32>;

@group(0) @binding(5) var samplerunity_ProbeVolumeSH : sampler;

@group(0) @binding(4) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(6) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(1) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(8) var sampler_LightTexture0 : sampler;

@group(0) @binding(2) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(9) var sampler_LightTextureB0 : sampler;

var<private> vs_TEXCOORD2 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat33 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat35 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat34 : f32;
  var u_xlatb34 : bool;
  var x_296 : vec3<f32>;
  var u_xlatb35 : bool;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat36 : f32;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat13 : f32;
  var u_xlat24 : f32;
  var u_xlat14 : f32;
  var u_xlat25 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_MainTex, sampler_MainTex, vec2<f32>(x_23.x, x_23.y));
  u_xlat0 = x_25;
  let x_27 : vec4<f32> = u_xlat0;
  let x_40 : vec4<f32> = x_35.x_Color;
  u_xlat1 = (x_27 * x_40);
  let x_42 : vec4<f32> = u_xlat0;
  let x_45 : vec4<f32> = x_35.x_Color;
  let x_50 : vec3<f32> = ((vec3<f32>(x_42.x, x_42.y, x_42.z) * vec3<f32>(x_45.x, x_45.y, x_45.z)) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_51 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_50.x, x_50.y, x_50.z, x_51.w);
  let x_56 : f32 = x_35.x_Metallic;
  let x_58 : f32 = x_35.x_Metallic;
  let x_60 : f32 = x_35.x_Metallic;
  let x_61 : vec3<f32> = vec3<f32>(x_56, x_58, x_60);
  let x_66 : vec4<f32> = u_xlat0;
  let x_71 : vec3<f32> = ((vec3<f32>(x_61.x, x_61.y, x_61.z) * vec3<f32>(x_66.x, x_66.y, x_66.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_72 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_71.x, x_71.y, x_71.z, x_72.w);
  let x_77 : f32 = x_35.x_Metallic;
  u_xlat33 = ((-(x_77) * 0.959999979f) + 0.959999979f);
  let x_82 : f32 = u_xlat33;
  let x_84 : vec4<f32> = u_xlat1;
  let x_86 : vec3<f32> = (vec3<f32>(x_82, x_82, x_82) * vec3<f32>(x_84.x, x_84.y, x_84.z));
  let x_87 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_86.x, x_86.y, x_86.z, x_87.w);
  let x_91 : vec4<f32> = vs_TEXCOORD4;
  let x_93 : vec4<f32> = vs_TEXCOORD4;
  u_xlat2.x = dot(vec3<f32>(x_91.x, x_91.y, x_91.z), vec3<f32>(x_93.x, x_93.y, x_93.z));
  let x_99 : f32 = u_xlat2.x;
  u_xlat2.x = inverseSqrt(x_99);
  let x_102 : vec4<f32> = u_xlat2;
  let x_104 : vec4<f32> = vs_TEXCOORD4;
  let x_106 : vec3<f32> = (vec3<f32>(x_102.x, x_102.x, x_102.x) * vec3<f32>(x_104.x, x_104.y, x_104.z));
  let x_107 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_106.x, x_106.y, x_106.z, x_107.w);
  let x_111 : vec4<f32> = vs_TEXCOORD1;
  let x_113 : vec4<f32> = vs_TEXCOORD1;
  u_xlat35 = dot(vec3<f32>(x_111.x, x_111.y, x_111.z), vec3<f32>(x_113.x, x_113.y, x_113.z));
  let x_116 : f32 = u_xlat35;
  u_xlat35 = inverseSqrt(x_116);
  let x_120 : f32 = u_xlat35;
  let x_122 : vec4<f32> = vs_TEXCOORD1;
  u_xlat3 = (vec3<f32>(x_120, x_120, x_120) * vec3<f32>(x_122.x, x_122.y, x_122.z));
  let x_125 : vec4<f32> = u_xlat1;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125.w, x_125.w, x_125.w) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_132 : f32 = u_xlat33;
  u_xlat35 = (-(x_132) + 1.0f);
  let x_140 : f32 = u_xlat1.w;
  let x_141 : f32 = u_xlat33;
  let x_143 : f32 = u_xlat35;
  SV_Target0.w = ((x_140 * x_141) + x_143);
  let x_150 : vec3<f32> = vs_TEXCOORD5;
  let x_155 : vec4<f32> = x_35.unity_WorldToLight[1i];
  u_xlat4 = (vec4<f32>(x_150.y, x_150.y, x_150.y, x_150.y) * x_155);
  let x_159 : vec4<f32> = x_35.unity_WorldToLight[0i];
  let x_160 : vec3<f32> = vs_TEXCOORD5;
  let x_163 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_159 * vec4<f32>(x_160.x, x_160.x, x_160.x, x_160.x)) + x_163);
  let x_167 : vec4<f32> = x_35.unity_WorldToLight[2i];
  let x_168 : vec3<f32> = vs_TEXCOORD5;
  let x_171 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_167 * vec4<f32>(x_168.z, x_168.z, x_168.z, x_168.z)) + x_171);
  let x_173 : vec4<f32> = u_xlat4;
  let x_176 : vec4<f32> = x_35.unity_WorldToLight[3i];
  u_xlat4 = (x_173 + x_176);
  let x_179 : vec3<f32> = vs_TEXCOORD5;
  let x_183 : vec3<f32> = x_35.x_WorldSpaceCameraPos;
  let x_184 : vec3<f32> = (-(x_179) + x_183);
  let x_185 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_184.x, x_184.y, x_184.z, x_185.w);
  let x_191 : f32 = x_35.unity_MatrixV[0i].z;
  u_xlat6.x = x_191;
  let x_194 : f32 = x_35.unity_MatrixV[1i].z;
  u_xlat6.y = x_194;
  let x_198 : f32 = x_35.unity_MatrixV[2i].z;
  u_xlat6.z = x_198;
  let x_200 : vec4<f32> = u_xlat5;
  let x_202 : vec4<f32> = u_xlat6;
  u_xlat33 = dot(vec3<f32>(x_200.x, x_200.y, x_200.z), vec3<f32>(x_202.x, x_202.y, x_202.z));
  let x_205 : vec3<f32> = vs_TEXCOORD5;
  let x_208 : vec4<f32> = x_35.unity_ShadowFadeCenterAndType;
  let x_211 : vec3<f32> = (x_205 + -(vec3<f32>(x_208.x, x_208.y, x_208.z)));
  let x_212 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_211.x, x_211.y, x_211.z, x_212.w);
  let x_215 : vec4<f32> = u_xlat5;
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat34 = dot(vec3<f32>(x_215.x, x_215.y, x_215.z), vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_220 : f32 = u_xlat34;
  u_xlat34 = sqrt(x_220);
  let x_222 : f32 = u_xlat33;
  let x_224 : f32 = u_xlat34;
  u_xlat34 = (-(x_222) + x_224);
  let x_227 : f32 = x_35.unity_ShadowFadeCenterAndType.w;
  let x_228 : f32 = u_xlat34;
  let x_230 : f32 = u_xlat33;
  u_xlat33 = ((x_227 * x_228) + x_230);
  let x_232 : f32 = u_xlat33;
  let x_235 : f32 = x_35.x_LightShadowData.z;
  let x_238 : f32 = x_35.x_LightShadowData.w;
  u_xlat33 = ((x_232 * x_235) + x_238);
  let x_240 : f32 = u_xlat33;
  u_xlat33 = clamp(x_240, 0.0f, 1.0f);
  let x_248 : f32 = x_35.unity_ProbeVolumeParams.x;
  u_xlatb34 = (x_248 == 1.0f);
  let x_250 : bool = u_xlatb34;
  if (x_250) {
    let x_254 : f32 = x_35.unity_ProbeVolumeParams.y;
    u_xlatb34 = (x_254 == 1.0f);
    let x_256 : vec3<f32> = vs_TEXCOORD5;
    let x_260 : vec4<f32> = x_35.unity_ProbeVolumeWorldToObject[1i];
    let x_262 : vec3<f32> = (vec3<f32>(x_256.y, x_256.y, x_256.y) * vec3<f32>(x_260.x, x_260.y, x_260.z));
    let x_263 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_262.x, x_262.y, x_262.z, x_263.w);
    let x_266 : vec4<f32> = x_35.unity_ProbeVolumeWorldToObject[0i];
    let x_268 : vec3<f32> = vs_TEXCOORD5;
    let x_271 : vec4<f32> = u_xlat5;
    let x_273 : vec3<f32> = ((vec3<f32>(x_266.x, x_266.y, x_266.z) * vec3<f32>(x_268.x, x_268.x, x_268.x)) + vec3<f32>(x_271.x, x_271.y, x_271.z));
    let x_274 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_273.x, x_273.y, x_273.z, x_274.w);
    let x_277 : vec4<f32> = x_35.unity_ProbeVolumeWorldToObject[2i];
    let x_279 : vec3<f32> = vs_TEXCOORD5;
    let x_282 : vec4<f32> = u_xlat5;
    let x_284 : vec3<f32> = ((vec3<f32>(x_277.x, x_277.y, x_277.z) * vec3<f32>(x_279.z, x_279.z, x_279.z)) + vec3<f32>(x_282.x, x_282.y, x_282.z));
    let x_285 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_284.x, x_284.y, x_284.z, x_285.w);
    let x_287 : vec4<f32> = u_xlat5;
    let x_290 : vec4<f32> = x_35.unity_ProbeVolumeWorldToObject[3i];
    let x_292 : vec3<f32> = (vec3<f32>(x_287.x, x_287.y, x_287.z) + vec3<f32>(x_290.x, x_290.y, x_290.z));
    let x_293 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_292.x, x_292.y, x_292.z, x_293.w);
    let x_295 : bool = u_xlatb34;
    if (x_295) {
      let x_299 : vec4<f32> = u_xlat5;
      x_296 = vec3<f32>(x_299.x, x_299.y, x_299.z);
    } else {
      let x_302 : vec3<f32> = vs_TEXCOORD5;
      x_296 = x_302;
    }
    let x_303 : vec3<f32> = x_296;
    let x_304 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_303.x, x_303.y, x_303.z, x_304.w);
    let x_306 : vec4<f32> = u_xlat5;
    let x_310 : vec3<f32> = x_35.unity_ProbeVolumeMin;
    let x_312 : vec3<f32> = (vec3<f32>(x_306.x, x_306.y, x_306.z) + -(x_310));
    let x_313 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_312.x, x_312.y, x_312.z, x_313.w);
    let x_315 : vec4<f32> = u_xlat5;
    let x_319 : vec3<f32> = x_35.unity_ProbeVolumeSizeInv;
    let x_320 : vec3<f32> = (vec3<f32>(x_315.x, x_315.y, x_315.z) * x_319);
    let x_321 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_321.x, x_320.x, x_320.y, x_320.z);
    let x_324 : f32 = u_xlat5.y;
    u_xlat34 = ((x_324 * 0.25f) + 0.75f);
    let x_330 : f32 = x_35.unity_ProbeVolumeParams.z;
    u_xlat35 = ((x_330 * 0.5f) + 0.75f);
    let x_334 : f32 = u_xlat34;
    let x_335 : f32 = u_xlat35;
    u_xlat5.x = max(x_334, x_335);
    let x_346 : vec4<f32> = u_xlat5;
    let x_348 : vec4<f32> = textureSample(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH, vec3<f32>(x_346.x, x_346.z, x_346.w));
    u_xlat5 = x_348;
  } else {
    u_xlat5.x = 1.0f;
    u_xlat5.y = 1.0f;
    u_xlat5.z = 1.0f;
    u_xlat5.w = 1.0f;
  }
  let x_354 : vec4<f32> = u_xlat5;
  let x_356 : vec4<f32> = x_35.unity_OcclusionMaskSelector;
  u_xlat34 = dot(x_354, x_356);
  let x_358 : f32 = u_xlat34;
  u_xlat34 = clamp(x_358, 0.0f, 1.0f);
  let x_361 : f32 = u_xlat33;
  u_xlatb35 = (x_361 < 0.99000001f);
  let x_364 : bool = u_xlatb35;
  if (x_364) {
    let x_367 : vec3<f32> = vs_TEXCOORD5;
    let x_370 : vec4<f32> = x_35.unity_WorldToShadow[0i][1i];
    u_xlat5 = (vec4<f32>(x_367.y, x_367.y, x_367.y, x_367.y) * x_370);
    let x_373 : vec4<f32> = x_35.unity_WorldToShadow[0i][0i];
    let x_374 : vec3<f32> = vs_TEXCOORD5;
    let x_377 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_373 * vec4<f32>(x_374.x, x_374.x, x_374.x, x_374.x)) + x_377);
    let x_380 : vec4<f32> = x_35.unity_WorldToShadow[0i][2i];
    let x_381 : vec3<f32> = vs_TEXCOORD5;
    let x_384 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_380 * vec4<f32>(x_381.z, x_381.z, x_381.z, x_381.z)) + x_384);
    let x_386 : vec4<f32> = u_xlat5;
    let x_388 : vec4<f32> = x_35.unity_WorldToShadow[0i][3i];
    u_xlat5 = (x_386 + x_388);
    let x_390 : vec4<f32> = u_xlat5;
    let x_392 : vec4<f32> = u_xlat5;
    let x_394 : vec3<f32> = (vec3<f32>(x_390.x, x_390.y, x_390.z) / vec3<f32>(x_392.w, x_392.w, x_392.w));
    let x_395 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_394.x, x_394.y, x_394.z, x_395.w);
    let x_397 : vec4<f32> = u_xlat5;
    let x_401 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_405 : vec2<f32> = ((vec2<f32>(x_397.x, x_397.y) * vec2<f32>(x_401.z, x_401.w)) + vec2<f32>(0.5f, 0.5f));
    let x_406 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_405.x, x_405.y, x_406.z, x_406.w);
    let x_408 : vec4<f32> = u_xlat6;
    let x_410 : vec2<f32> = floor(vec2<f32>(x_408.x, x_408.y));
    let x_411 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_410.x, x_410.y, x_411.z, x_411.w);
    let x_413 : vec4<f32> = u_xlat5;
    let x_416 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_419 : vec4<f32> = u_xlat6;
    let x_422 : vec2<f32> = ((vec2<f32>(x_413.x, x_413.y) * vec2<f32>(x_416.z, x_416.w)) + -(vec2<f32>(x_419.x, x_419.y)));
    let x_423 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_422.x, x_422.y, x_423.z, x_423.w);
    let x_426 : vec4<f32> = u_xlat5;
    u_xlat7 = (vec4<f32>(x_426.x, x_426.x, x_426.y, x_426.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_431 : vec4<f32> = u_xlat7;
    let x_433 : vec4<f32> = u_xlat7;
    let x_435 : vec2<f32> = (vec2<f32>(x_431.x, x_431.z) * vec2<f32>(x_433.x, x_433.z));
    let x_436 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_435.x, x_436.y, x_436.z, x_435.y);
    let x_440 : vec4<f32> = u_xlat8;
    let x_443 : vec4<f32> = u_xlat5;
    u_xlat28 = ((vec2<f32>(x_440.x, x_440.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_443.x, x_443.y)));
    let x_447 : vec4<f32> = u_xlat5;
    let x_451 : vec2<f32> = (-(vec2<f32>(x_447.x, x_447.y)) + vec2<f32>(1.0f, 1.0f));
    let x_452 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_451.x, x_452.y, x_451.y, x_452.w);
    let x_455 : vec4<f32> = u_xlat5;
    let x_458 : vec2<f32> = min(vec2<f32>(x_455.x, x_455.y), vec2<f32>(0.0f, 0.0f));
    let x_459 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_458.x, x_458.y, x_459.z, x_459.w);
    let x_461 : vec4<f32> = u_xlat9;
    let x_464 : vec4<f32> = u_xlat9;
    let x_467 : vec4<f32> = u_xlat7;
    let x_469 : vec2<f32> = ((-(vec2<f32>(x_461.x, x_461.y)) * vec2<f32>(x_464.x, x_464.y)) + vec2<f32>(x_467.x, x_467.z));
    let x_470 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_469.x, x_470.y, x_469.y, x_470.w);
    let x_472 : vec4<f32> = u_xlat5;
    let x_474 : vec2<f32> = max(vec2<f32>(x_472.x, x_472.y), vec2<f32>(0.0f, 0.0f));
    let x_475 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_474.x, x_474.y, x_475.z, x_475.w);
    let x_477 : vec4<f32> = u_xlat5;
    let x_480 : vec4<f32> = u_xlat5;
    let x_483 : vec4<f32> = u_xlat7;
    let x_485 : vec2<f32> = ((-(vec2<f32>(x_477.x, x_477.y)) * vec2<f32>(x_480.x, x_480.y)) + vec2<f32>(x_483.y, x_483.w));
    let x_486 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_485.x, x_485.y, x_486.z, x_486.w);
    let x_489 : f32 = u_xlat28.x;
    u_xlat9.x = x_489;
    let x_492 : f32 = u_xlat7.x;
    u_xlat9.y = x_492;
    let x_495 : f32 = u_xlat5.x;
    u_xlat9.z = x_495;
    let x_498 : f32 = u_xlat8.x;
    u_xlat9.w = x_498;
    let x_500 : vec4<f32> = u_xlat9;
    u_xlat9 = (x_500 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_506 : f32 = u_xlat28.y;
    u_xlat8.x = x_506;
    let x_509 : f32 = u_xlat7.z;
    u_xlat8.y = x_509;
    let x_512 : f32 = u_xlat5.y;
    u_xlat8.z = x_512;
    let x_514 : vec4<f32> = u_xlat8;
    u_xlat7 = (x_514 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_516 : vec4<f32> = u_xlat9;
    let x_518 : vec4<f32> = u_xlat9;
    u_xlat8 = (vec4<f32>(x_516.y, x_516.w, x_516.y, x_516.w) + vec4<f32>(x_518.x, x_518.z, x_518.x, x_518.z));
    let x_522 : vec4<f32> = u_xlat7;
    let x_524 : vec4<f32> = u_xlat7;
    u_xlat10 = (vec4<f32>(x_522.y, x_522.y, x_522.w, x_522.w) + vec4<f32>(x_524.x, x_524.x, x_524.z, x_524.z));
    let x_527 : vec4<f32> = u_xlat9;
    let x_529 : vec4<f32> = u_xlat8;
    let x_531 : vec2<f32> = (vec2<f32>(x_527.y, x_527.w) / vec2<f32>(x_529.z, x_529.w));
    let x_532 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_531.x, x_531.y, x_532.z, x_532.w);
    let x_534 : vec4<f32> = u_xlat5;
    let x_538 : vec2<f32> = (vec2<f32>(x_534.x, x_534.y) + vec2<f32>(-1.5f, 0.5f));
    let x_539 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_538.x, x_538.y, x_539.z, x_539.w);
    let x_541 : vec4<f32> = u_xlat7;
    let x_543 : vec4<f32> = u_xlat10;
    u_xlat28 = (vec2<f32>(x_541.y, x_541.w) / vec2<f32>(x_543.y, x_543.w));
    let x_546 : vec2<f32> = u_xlat28;
    u_xlat28 = (x_546 + vec2<f32>(-1.5f, 0.5f));
    let x_548 : vec4<f32> = u_xlat5;
    let x_551 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_553 : vec2<f32> = (vec2<f32>(x_548.x, x_548.y) * vec2<f32>(x_551.x, x_551.x));
    let x_554 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_553.x, x_553.y, x_554.z, x_554.w);
    let x_556 : vec2<f32> = u_xlat28;
    let x_558 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_560 : vec2<f32> = (x_556 * vec2<f32>(x_558.y, x_558.y));
    let x_561 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_561.x, x_561.y, x_560.x, x_560.y);
    let x_563 : vec4<f32> = u_xlat8;
    let x_564 : vec4<f32> = u_xlat10;
    u_xlat8 = (x_563 * x_564);
    let x_566 : vec4<f32> = u_xlat6;
    let x_569 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_572 : vec4<f32> = u_xlat7;
    u_xlat9 = ((vec4<f32>(x_566.x, x_566.y, x_566.x, x_566.y) * vec4<f32>(x_569.x, x_569.y, x_569.x, x_569.y)) + vec4<f32>(x_572.x, x_572.z, x_572.y, x_572.z));
    let x_576 : vec4<f32> = u_xlat9;
    let x_577 : vec2<f32> = vec2<f32>(x_576.x, x_576.y);
    let x_579 : f32 = u_xlat5.z;
    txVec0 = vec3<f32>(x_577.x, x_577.y, x_579);
    let x_591 : vec3<f32> = txVec0;
    let x_593 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_591.xy, x_591.z);
    u_xlat35 = x_593;
    let x_595 : vec4<f32> = u_xlat9;
    let x_596 : vec2<f32> = vec2<f32>(x_595.z, x_595.w);
    let x_598 : f32 = u_xlat5.z;
    txVec1 = vec3<f32>(x_596.x, x_596.y, x_598);
    let x_606 : vec3<f32> = txVec1;
    let x_608 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_606.xy, x_606.z);
    u_xlat36 = x_608;
    let x_609 : f32 = u_xlat36;
    let x_611 : f32 = u_xlat8.y;
    u_xlat36 = (x_609 * x_611);
    let x_614 : f32 = u_xlat8.x;
    let x_615 : f32 = u_xlat35;
    let x_617 : f32 = u_xlat36;
    u_xlat35 = ((x_614 * x_615) + x_617);
    let x_619 : vec4<f32> = u_xlat6;
    let x_622 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_625 : vec4<f32> = u_xlat7;
    u_xlat6 = ((vec4<f32>(x_619.x, x_619.y, x_619.x, x_619.y) * vec4<f32>(x_622.x, x_622.y, x_622.x, x_622.y)) + vec4<f32>(x_625.x, x_625.w, x_625.y, x_625.w));
    let x_629 : vec4<f32> = u_xlat6;
    let x_630 : vec2<f32> = vec2<f32>(x_629.x, x_629.y);
    let x_632 : f32 = u_xlat5.z;
    txVec2 = vec3<f32>(x_630.x, x_630.y, x_632);
    let x_639 : vec3<f32> = txVec2;
    let x_641 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_639.xy, x_639.z);
    u_xlat36 = x_641;
    let x_643 : f32 = u_xlat8.z;
    let x_644 : f32 = u_xlat36;
    let x_646 : f32 = u_xlat35;
    u_xlat35 = ((x_643 * x_644) + x_646);
    let x_649 : vec4<f32> = u_xlat6;
    let x_650 : vec2<f32> = vec2<f32>(x_649.z, x_649.w);
    let x_652 : f32 = u_xlat5.z;
    txVec3 = vec3<f32>(x_650.x, x_650.y, x_652);
    let x_659 : vec3<f32> = txVec3;
    let x_661 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_659.xy, x_659.z);
    u_xlat36 = x_661;
    let x_663 : f32 = u_xlat8.w;
    let x_664 : f32 = u_xlat36;
    let x_666 : f32 = u_xlat35;
    u_xlat35 = ((x_663 * x_664) + x_666);
    let x_669 : f32 = x_35.x_LightShadowData.x;
    u_xlat36 = (-(x_669) + 1.0f);
    let x_672 : f32 = u_xlat35;
    let x_673 : f32 = u_xlat36;
    let x_676 : f32 = x_35.x_LightShadowData.x;
    u_xlat35 = ((x_672 * x_673) + x_676);
  } else {
    u_xlat35 = 1.0f;
  }
  let x_679 : f32 = u_xlat34;
  let x_680 : f32 = u_xlat35;
  u_xlat34 = (x_679 + -(x_680));
  let x_683 : f32 = u_xlat33;
  let x_684 : f32 = u_xlat34;
  let x_686 : f32 = u_xlat35;
  u_xlat33 = ((x_683 * x_684) + x_686);
  let x_689 : f32 = u_xlat4.z;
  u_xlatb34 = (0.0f < x_689);
  let x_691 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_691);
  let x_693 : vec4<f32> = u_xlat4;
  let x_695 : vec4<f32> = u_xlat4;
  let x_697 : vec2<f32> = (vec2<f32>(x_693.x, x_693.y) / vec2<f32>(x_695.w, x_695.w));
  let x_698 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_697.x, x_697.y, x_698.z, x_698.w);
  let x_700 : vec4<f32> = u_xlat5;
  let x_702 : vec2<f32> = (vec2<f32>(x_700.x, x_700.y) + vec2<f32>(0.5f, 0.5f));
  let x_703 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_702.x, x_702.y, x_703.z, x_703.w);
  let x_710 : vec4<f32> = u_xlat5;
  let x_712 : vec4<f32> = textureSample(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_710.x, x_710.y));
  u_xlat35 = x_712.w;
  let x_714 : f32 = u_xlat34;
  let x_715 : f32 = u_xlat35;
  u_xlat34 = (x_714 * x_715);
  let x_717 : vec4<f32> = u_xlat4;
  let x_719 : vec4<f32> = u_xlat4;
  u_xlat35 = dot(vec3<f32>(x_717.x, x_717.y, x_717.z), vec3<f32>(x_719.x, x_719.y, x_719.z));
  let x_727 : f32 = u_xlat35;
  let x_729 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_727, x_727));
  u_xlat35 = x_729.x;
  let x_731 : f32 = u_xlat34;
  let x_732 : f32 = u_xlat35;
  u_xlat34 = (x_731 * x_732);
  let x_734 : f32 = u_xlat33;
  let x_735 : f32 = u_xlat34;
  u_xlat33 = (x_734 * x_735);
  let x_740 : f32 = vs_TEXCOORD2.w;
  u_xlat4.x = x_740;
  let x_744 : f32 = vs_TEXCOORD3.w;
  u_xlat4.y = x_744;
  let x_747 : f32 = vs_TEXCOORD4.w;
  u_xlat4.z = x_747;
  let x_749 : vec4<f32> = u_xlat4;
  let x_751 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_749.x, x_749.y, x_749.z), vec3<f32>(x_751.x, x_751.y, x_751.z));
  let x_754 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_754);
  let x_756 : f32 = u_xlat34;
  let x_758 : vec4<f32> = u_xlat4;
  let x_760 : vec3<f32> = (vec3<f32>(x_756, x_756, x_756) * vec3<f32>(x_758.x, x_758.y, x_758.z));
  let x_761 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_760.x, x_760.y, x_760.z, x_761.w);
  let x_763 : f32 = u_xlat33;
  let x_767 : vec4<f32> = x_35.x_LightColor0;
  let x_769 : vec3<f32> = (vec3<f32>(x_763, x_763, x_763) * vec3<f32>(x_767.x, x_767.y, x_767.z));
  let x_770 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_769.x, x_769.y, x_769.z, x_770.w);
  let x_774 : f32 = x_35.x_Glossiness;
  u_xlat33 = (-(x_774) + 1.0f);
  let x_777 : vec4<f32> = u_xlat4;
  let x_779 : f32 = u_xlat34;
  let x_782 : vec3<f32> = u_xlat3;
  let x_784 : vec3<f32> = ((vec3<f32>(x_777.x, x_777.y, x_777.z) * vec3<f32>(x_779, x_779, x_779)) + -(x_782));
  let x_785 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_784.x, x_784.y, x_784.z, x_785.w);
  let x_787 : vec4<f32> = u_xlat4;
  let x_789 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_787.x, x_787.y, x_787.z), vec3<f32>(x_789.x, x_789.y, x_789.z));
  let x_792 : f32 = u_xlat34;
  u_xlat34 = max(x_792, 0.001f);
  let x_795 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_795);
  let x_797 : f32 = u_xlat34;
  let x_799 : vec4<f32> = u_xlat4;
  let x_801 : vec3<f32> = (vec3<f32>(x_797, x_797, x_797) * vec3<f32>(x_799.x, x_799.y, x_799.z));
  let x_802 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_801.x, x_801.y, x_801.z, x_802.w);
  let x_804 : vec4<f32> = u_xlat2;
  let x_806 : vec3<f32> = u_xlat3;
  u_xlat34 = dot(vec3<f32>(x_804.x, x_804.y, x_804.z), -(x_806));
  let x_809 : vec4<f32> = u_xlat2;
  let x_811 : vec4<f32> = u_xlat5;
  u_xlat35 = dot(vec3<f32>(x_809.x, x_809.y, x_809.z), vec3<f32>(x_811.x, x_811.y, x_811.z));
  let x_814 : f32 = u_xlat35;
  u_xlat35 = clamp(x_814, 0.0f, 1.0f);
  let x_816 : vec4<f32> = u_xlat2;
  let x_818 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_816.x, x_816.y, x_816.z), vec3<f32>(x_818.x, x_818.y, x_818.z));
  let x_823 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_823, 0.0f, 1.0f);
  let x_827 : vec4<f32> = u_xlat5;
  let x_829 : vec4<f32> = u_xlat4;
  u_xlat13 = dot(vec3<f32>(x_827.x, x_827.y, x_827.z), vec3<f32>(x_829.x, x_829.y, x_829.z));
  let x_832 : f32 = u_xlat13;
  u_xlat13 = clamp(x_832, 0.0f, 1.0f);
  let x_835 : f32 = u_xlat13;
  let x_836 : f32 = u_xlat13;
  u_xlat24 = (x_835 * x_836);
  let x_838 : f32 = u_xlat24;
  let x_840 : f32 = u_xlat33;
  u_xlat24 = dot(vec2<f32>(x_838, x_838), vec2<f32>(x_840, x_840));
  let x_843 : f32 = u_xlat24;
  u_xlat24 = (x_843 + -0.5f);
  let x_846 : f32 = u_xlat35;
  u_xlat3.x = (-(x_846) + 1.0f);
  let x_852 : f32 = u_xlat3.x;
  let x_854 : f32 = u_xlat3.x;
  u_xlat14 = (x_852 * x_854);
  let x_856 : f32 = u_xlat14;
  let x_857 : f32 = u_xlat14;
  u_xlat14 = (x_856 * x_857);
  let x_860 : f32 = u_xlat3.x;
  let x_861 : f32 = u_xlat14;
  u_xlat3.x = (x_860 * x_861);
  let x_864 : f32 = u_xlat24;
  let x_866 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_864 * x_866) + 1.0f);
  let x_870 : f32 = u_xlat34;
  u_xlat14 = (-(abs(x_870)) + 1.0f);
  let x_875 : f32 = u_xlat14;
  let x_876 : f32 = u_xlat14;
  u_xlat25 = (x_875 * x_876);
  let x_878 : f32 = u_xlat25;
  let x_879 : f32 = u_xlat25;
  u_xlat25 = (x_878 * x_879);
  let x_881 : f32 = u_xlat14;
  let x_882 : f32 = u_xlat25;
  u_xlat14 = (x_881 * x_882);
  let x_884 : f32 = u_xlat24;
  let x_885 : f32 = u_xlat14;
  u_xlat24 = ((x_884 * x_885) + 1.0f);
  let x_888 : f32 = u_xlat24;
  let x_890 : f32 = u_xlat3.x;
  u_xlat24 = (x_888 * x_890);
  let x_892 : f32 = u_xlat35;
  let x_893 : f32 = u_xlat24;
  u_xlat24 = (x_892 * x_893);
  let x_895 : f32 = u_xlat33;
  let x_896 : f32 = u_xlat33;
  u_xlat33 = (x_895 * x_896);
  let x_898 : f32 = u_xlat33;
  u_xlat33 = max(x_898, 0.002f);
  let x_901 : f32 = u_xlat33;
  u_xlat3.x = (-(x_901) + 1.0f);
  let x_905 : f32 = u_xlat34;
  let x_908 : f32 = u_xlat3.x;
  let x_910 : f32 = u_xlat33;
  u_xlat14 = ((abs(x_905) * x_908) + x_910);
  let x_912 : f32 = u_xlat35;
  let x_914 : f32 = u_xlat3.x;
  let x_916 : f32 = u_xlat33;
  u_xlat3.x = ((x_912 * x_914) + x_916);
  let x_919 : f32 = u_xlat34;
  let x_922 : f32 = u_xlat3.x;
  u_xlat34 = (abs(x_919) * x_922);
  let x_924 : f32 = u_xlat35;
  let x_925 : f32 = u_xlat14;
  let x_927 : f32 = u_xlat34;
  u_xlat34 = ((x_924 * x_925) + x_927);
  let x_929 : f32 = u_xlat34;
  u_xlat34 = (x_929 + 0.00001f);
  let x_932 : f32 = u_xlat34;
  u_xlat34 = (0.5f / x_932);
  let x_934 : f32 = u_xlat33;
  let x_935 : f32 = u_xlat33;
  u_xlat33 = (x_934 * x_935);
  let x_938 : f32 = u_xlat2.x;
  let x_939 : f32 = u_xlat33;
  let x_942 : f32 = u_xlat2.x;
  u_xlat3.x = ((x_938 * x_939) + -(x_942));
  let x_947 : f32 = u_xlat3.x;
  let x_949 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_947 * x_949) + 1.0f);
  let x_953 : f32 = u_xlat33;
  u_xlat33 = (x_953 * 0.318309873f);
  let x_957 : f32 = u_xlat2.x;
  let x_959 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_957 * x_959) + 0.0000001f);
  let x_964 : f32 = u_xlat33;
  let x_966 : f32 = u_xlat2.x;
  u_xlat33 = (x_964 / x_966);
  let x_968 : f32 = u_xlat33;
  let x_969 : f32 = u_xlat34;
  u_xlat33 = (x_968 * x_969);
  let x_971 : f32 = u_xlat35;
  let x_972 : f32 = u_xlat33;
  u_xlat33 = (x_971 * x_972);
  let x_974 : f32 = u_xlat33;
  u_xlat33 = (x_974 * 3.141592741f);
  let x_977 : f32 = u_xlat33;
  u_xlat33 = max(x_977, 0.0f);
  let x_979 : vec4<f32> = u_xlat0;
  let x_981 : vec4<f32> = u_xlat0;
  u_xlat34 = dot(vec3<f32>(x_979.x, x_979.y, x_979.z), vec3<f32>(x_981.x, x_981.y, x_981.z));
  let x_984 : f32 = u_xlat34;
  u_xlatb34 = !((x_984 == 0.0f));
  let x_986 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_986);
  let x_988 : f32 = u_xlat33;
  let x_989 : f32 = u_xlat34;
  u_xlat33 = (x_988 * x_989);
  let x_991 : f32 = u_xlat24;
  let x_993 : vec4<f32> = u_xlat6;
  let x_995 : vec3<f32> = (vec3<f32>(x_991, x_991, x_991) * vec3<f32>(x_993.x, x_993.y, x_993.z));
  let x_996 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_995.x, x_996.y, x_995.y, x_995.z);
  let x_998 : vec4<f32> = u_xlat6;
  let x_1000 : f32 = u_xlat33;
  u_xlat3 = (vec3<f32>(x_998.x, x_998.y, x_998.z) * vec3<f32>(x_1000, x_1000, x_1000));
  let x_1003 : f32 = u_xlat13;
  u_xlat33 = (-(x_1003) + 1.0f);
  let x_1006 : f32 = u_xlat33;
  let x_1007 : f32 = u_xlat33;
  u_xlat34 = (x_1006 * x_1007);
  let x_1009 : f32 = u_xlat34;
  let x_1010 : f32 = u_xlat34;
  u_xlat34 = (x_1009 * x_1010);
  let x_1012 : f32 = u_xlat33;
  let x_1013 : f32 = u_xlat34;
  u_xlat33 = (x_1012 * x_1013);
  let x_1015 : vec4<f32> = u_xlat0;
  let x_1019 : vec3<f32> = (-(vec3<f32>(x_1015.x, x_1015.y, x_1015.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1020 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1019.x, x_1019.y, x_1019.z, x_1020.w);
  let x_1022 : vec4<f32> = u_xlat4;
  let x_1024 : f32 = u_xlat33;
  let x_1027 : vec4<f32> = u_xlat0;
  let x_1029 : vec3<f32> = ((vec3<f32>(x_1022.x, x_1022.y, x_1022.z) * vec3<f32>(x_1024, x_1024, x_1024)) + vec3<f32>(x_1027.x, x_1027.y, x_1027.z));
  let x_1030 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1029.x, x_1029.y, x_1029.z, x_1030.w);
  let x_1032 : vec4<f32> = u_xlat0;
  let x_1034 : vec3<f32> = u_xlat3;
  let x_1035 : vec3<f32> = (vec3<f32>(x_1032.x, x_1032.y, x_1032.z) * x_1034);
  let x_1036 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1035.x, x_1035.y, x_1035.z, x_1036.w);
  let x_1038 : vec4<f32> = u_xlat1;
  let x_1040 : vec4<f32> = u_xlat2;
  let x_1043 : vec4<f32> = u_xlat0;
  let x_1045 : vec3<f32> = ((vec3<f32>(x_1038.x, x_1038.y, x_1038.z) * vec3<f32>(x_1040.x, x_1040.z, x_1040.w)) + vec3<f32>(x_1043.x, x_1043.y, x_1043.z));
  let x_1046 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1045.x, x_1045.y, x_1045.z, x_1046.w);
  let x_1049 : f32 = vs_TEXCOORD1.w;
  let x_1051 : f32 = x_35.x_ProjectionParams.y;
  u_xlat33 = (x_1049 / x_1051);
  let x_1053 : f32 = u_xlat33;
  u_xlat33 = (-(x_1053) + 1.0f);
  let x_1056 : f32 = u_xlat33;
  let x_1058 : f32 = x_35.x_ProjectionParams.z;
  u_xlat33 = (x_1056 * x_1058);
  let x_1060 : f32 = u_xlat33;
  u_xlat33 = max(x_1060, 0.0f);
  let x_1062 : f32 = u_xlat33;
  let x_1065 : f32 = x_35.unity_FogParams.x;
  u_xlat33 = (x_1062 * x_1065);
  let x_1067 : f32 = u_xlat33;
  let x_1068 : f32 = u_xlat33;
  u_xlat33 = (x_1067 * -(x_1068));
  let x_1071 : f32 = u_xlat33;
  u_xlat33 = exp2(x_1071);
  let x_1073 : vec4<f32> = u_xlat0;
  let x_1075 : f32 = u_xlat33;
  let x_1077 : vec3<f32> = (vec3<f32>(x_1073.x, x_1073.y, x_1073.z) * vec3<f32>(x_1075, x_1075, x_1075));
  let x_1078 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1077.x, x_1077.y, x_1077.z, x_1078.w);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec3<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

