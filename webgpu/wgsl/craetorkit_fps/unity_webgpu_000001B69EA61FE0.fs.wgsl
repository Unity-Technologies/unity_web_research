type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_ZBufferParams : vec4<f32>,
  unity_CameraToWorld : mat4x4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  x_LightPos : vec4<f32>,
  x_LightColor : vec4<f32>,
  unity_WorldToLight : mat4x4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
}

@group(1) @binding(0) var<uniform> x_17 : PGlobals;

var<private> vs_TEXCOORD1 : vec3<f32>;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(7) var sampler_CameraDepthTexture : sampler;

@group(0) @binding(1) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(9) var sampler_LightTexture0 : sampler;

@group(0) @binding(2) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(8) var sampler_LightTextureB0 : sampler;

@group(0) @binding(6) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(3) var x_CameraGBufferTexture0 : texture_2d<f32>;

@group(0) @binding(11) var sampler_CameraGBufferTexture0 : sampler;

@group(0) @binding(4) var x_CameraGBufferTexture1 : texture_2d<f32>;

@group(0) @binding(12) var sampler_CameraGBufferTexture1 : sampler;

@group(0) @binding(5) var x_CameraGBufferTexture2 : texture_2d<f32>;

@group(0) @binding(13) var sampler_CameraGBufferTexture2 : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat30 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat21 : f32;
  var u_xlat31 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlatb33 : bool;
  var u_xlat33 : f32;
  var u_xlatb22 : bool;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat25 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat20 : f32;
  var u_xlat11 : f32;
  var u_xlatb30 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : f32 = x_17.x_ProjectionParams.z;
  let x_28 : f32 = vs_TEXCOORD1.z;
  u_xlat0.x = (x_23 / x_28);
  let x_33 : vec4<f32> = u_xlat0;
  let x_35 : vec3<f32> = vs_TEXCOORD1;
  let x_36 : vec3<f32> = (vec3<f32>(x_33.x, x_33.x, x_33.x) * x_35);
  let x_37 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_36.x, x_36.y, x_36.z, x_37.w);
  let x_44 : vec4<f32> = vs_TEXCOORD0;
  let x_46 : vec4<f32> = vs_TEXCOORD0;
  let x_48 : vec2<f32> = (vec2<f32>(x_44.x, x_44.y) / vec2<f32>(x_46.w, x_46.w));
  let x_49 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_48.x, x_48.y, x_49.z);
  let x_62 : vec3<f32> = u_xlat1;
  let x_64 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_62.x, x_62.y));
  u_xlat30 = x_64.x;
  let x_68 : f32 = x_17.x_ZBufferParams.x;
  let x_69 : f32 = u_xlat30;
  let x_73 : f32 = x_17.x_ZBufferParams.y;
  u_xlat30 = ((x_68 * x_69) + x_73);
  let x_76 : f32 = u_xlat30;
  u_xlat30 = (1.0f / x_76);
  let x_79 : f32 = u_xlat30;
  let x_81 : vec4<f32> = u_xlat0;
  let x_83 : vec3<f32> = (vec3<f32>(x_79, x_79, x_79) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_84 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_83.x, x_83.y, x_83.z, x_84.w);
  let x_87 : vec4<f32> = u_xlat2;
  let x_92 : vec4<f32> = x_17.unity_CameraToWorld[1i];
  u_xlat3 = (vec3<f32>(x_87.y, x_87.y, x_87.y) * vec3<f32>(x_92.x, x_92.y, x_92.z));
  let x_97 : vec4<f32> = x_17.unity_CameraToWorld[0i];
  let x_99 : vec4<f32> = u_xlat2;
  let x_102 : vec3<f32> = u_xlat3;
  let x_103 : vec3<f32> = ((vec3<f32>(x_97.x, x_97.y, x_97.z) * vec3<f32>(x_99.x, x_99.x, x_99.x)) + x_102);
  let x_104 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_103.x, x_103.y, x_104.z, x_103.z);
  let x_107 : vec4<f32> = x_17.unity_CameraToWorld[2i];
  let x_109 : vec4<f32> = u_xlat2;
  let x_112 : vec4<f32> = u_xlat2;
  let x_114 : vec3<f32> = ((vec3<f32>(x_107.x, x_107.y, x_107.z) * vec3<f32>(x_109.z, x_109.z, x_109.z)) + vec3<f32>(x_112.x, x_112.y, x_112.w));
  let x_115 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_114.x, x_114.y, x_115.z, x_114.z);
  let x_117 : vec4<f32> = u_xlat2;
  let x_120 : vec4<f32> = x_17.unity_CameraToWorld[3i];
  let x_122 : vec3<f32> = (vec3<f32>(x_117.x, x_117.y, x_117.w) + vec3<f32>(x_120.x, x_120.y, x_120.z));
  let x_123 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_122.x, x_122.y, x_123.z, x_122.z);
  let x_125 : vec4<f32> = u_xlat2;
  let x_129 : vec4<f32> = x_17.unity_ShadowFadeCenterAndType;
  u_xlat3 = (vec3<f32>(x_125.x, x_125.y, x_125.w) + -(vec3<f32>(x_129.x, x_129.y, x_129.z)));
  let x_133 : vec3<f32> = u_xlat3;
  let x_134 : vec3<f32> = u_xlat3;
  u_xlat0.x = dot(x_133, x_134);
  let x_138 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_138);
  let x_142 : f32 = u_xlat0.z;
  let x_144 : f32 = u_xlat30;
  let x_147 : f32 = u_xlat0.x;
  u_xlat0.x = ((-(x_142) * x_144) + x_147);
  let x_152 : f32 = x_17.unity_ShadowFadeCenterAndType.w;
  let x_154 : f32 = u_xlat0.x;
  let x_157 : f32 = u_xlat2.z;
  u_xlat0.x = ((x_152 * x_154) + x_157);
  let x_161 : vec4<f32> = u_xlat2;
  let x_166 : vec4<f32> = x_17.x_LightPos;
  u_xlat10 = (-(vec3<f32>(x_161.x, x_161.y, x_161.w)) + vec3<f32>(x_166.x, x_166.y, x_166.z));
  let x_170 : vec3<f32> = u_xlat10;
  let x_171 : vec3<f32> = u_xlat10;
  u_xlat21 = dot(x_170, x_171);
  let x_174 : f32 = u_xlat21;
  u_xlat31 = inverseSqrt(x_174);
  let x_176 : vec3<f32> = u_xlat10;
  let x_177 : f32 = u_xlat31;
  u_xlat3 = (x_176 * vec3<f32>(x_177, x_177, x_177));
  let x_181 : vec4<f32> = u_xlat2;
  let x_185 : vec4<f32> = x_17.unity_WorldToLight[1i];
  let x_187 : vec3<f32> = (vec3<f32>(x_181.y, x_181.y, x_181.y) * vec3<f32>(x_185.x, x_185.y, x_185.w));
  let x_188 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_187.x, x_187.y, x_187.z, x_188.w);
  let x_191 : vec4<f32> = x_17.unity_WorldToLight[0i];
  let x_193 : vec4<f32> = u_xlat2;
  let x_196 : vec4<f32> = u_xlat4;
  let x_198 : vec3<f32> = ((vec3<f32>(x_191.x, x_191.y, x_191.w) * vec3<f32>(x_193.x, x_193.x, x_193.x)) + vec3<f32>(x_196.x, x_196.y, x_196.z));
  let x_199 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_198.x, x_198.y, x_198.z, x_199.w);
  let x_202 : vec4<f32> = x_17.unity_WorldToLight[2i];
  let x_204 : vec4<f32> = u_xlat2;
  let x_207 : vec4<f32> = u_xlat4;
  let x_209 : vec3<f32> = ((vec3<f32>(x_202.x, x_202.y, x_202.w) * vec3<f32>(x_204.w, x_204.w, x_204.w)) + vec3<f32>(x_207.x, x_207.y, x_207.z));
  let x_210 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_209.x, x_209.y, x_209.z, x_210.w);
  let x_212 : vec4<f32> = u_xlat4;
  let x_215 : vec4<f32> = x_17.unity_WorldToLight[3i];
  let x_217 : vec3<f32> = (vec3<f32>(x_212.x, x_212.y, x_212.z) + vec3<f32>(x_215.x, x_215.y, x_215.w));
  let x_218 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_217.x, x_217.y, x_217.z, x_218.w);
  let x_220 : vec4<f32> = u_xlat4;
  let x_222 : vec4<f32> = u_xlat4;
  let x_224 : vec2<f32> = (vec2<f32>(x_220.x, x_220.y) / vec2<f32>(x_222.z, x_222.z));
  let x_225 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_224.x, x_224.y, x_225.z, x_225.w);
  let x_233 : vec4<f32> = u_xlat4;
  let x_236 : vec4<f32> = textureSampleBias(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_233.x, x_233.y), -8.0f);
  u_xlat22 = x_236.w;
  let x_242 : f32 = u_xlat4.z;
  u_xlatb33 = (x_242 < 0.0f);
  let x_246 : bool = u_xlatb33;
  u_xlat33 = select(0.0f, 1.0f, x_246);
  let x_248 : f32 = u_xlat22;
  let x_249 : f32 = u_xlat33;
  u_xlat22 = (x_248 * x_249);
  let x_251 : f32 = u_xlat21;
  let x_253 : f32 = x_17.x_LightPos.w;
  u_xlat21 = (x_251 * x_253);
  let x_260 : f32 = u_xlat21;
  let x_262 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_260, x_260));
  u_xlat21 = x_262.x;
  let x_264 : f32 = u_xlat21;
  let x_265 : f32 = u_xlat22;
  u_xlat21 = (x_264 * x_265);
  let x_268 : f32 = u_xlat0.x;
  let x_271 : f32 = x_17.x_LightShadowData.z;
  let x_274 : f32 = x_17.x_LightShadowData.w;
  u_xlat0.x = ((x_268 * x_271) + x_274);
  let x_278 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_278, 0.0f, 1.0f);
  let x_283 : f32 = u_xlat0.x;
  u_xlatb22 = (x_283 < 0.99000001f);
  let x_286 : bool = u_xlatb22;
  if (x_286) {
    let x_289 : vec4<f32> = u_xlat2;
    let x_293 : vec4<f32> = x_17.unity_WorldToShadow[0i][1i];
    u_xlat4 = (vec4<f32>(x_289.y, x_289.y, x_289.y, x_289.y) * x_293);
    let x_296 : vec4<f32> = x_17.unity_WorldToShadow[0i][0i];
    let x_297 : vec4<f32> = u_xlat2;
    let x_300 : vec4<f32> = u_xlat4;
    u_xlat4 = ((x_296 * vec4<f32>(x_297.x, x_297.x, x_297.x, x_297.x)) + x_300);
    let x_303 : vec4<f32> = x_17.unity_WorldToShadow[0i][2i];
    let x_304 : vec4<f32> = u_xlat2;
    let x_307 : vec4<f32> = u_xlat4;
    u_xlat4 = ((x_303 * vec4<f32>(x_304.w, x_304.w, x_304.w, x_304.w)) + x_307);
    let x_309 : vec4<f32> = u_xlat4;
    let x_311 : vec4<f32> = x_17.unity_WorldToShadow[0i][3i];
    u_xlat4 = (x_309 + x_311);
    let x_313 : vec4<f32> = u_xlat4;
    let x_315 : vec4<f32> = u_xlat4;
    let x_317 : vec3<f32> = (vec3<f32>(x_313.x, x_313.y, x_313.z) / vec3<f32>(x_315.w, x_315.w, x_315.w));
    let x_318 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_317.x, x_317.y, x_317.z, x_318.w);
    let x_321 : vec4<f32> = u_xlat4;
    let x_325 : vec4<f32> = x_17.x_ShadowMapTexture_TexelSize;
    let x_330 : vec2<f32> = ((vec2<f32>(x_321.x, x_321.y) * vec2<f32>(x_325.z, x_325.w)) + vec2<f32>(0.5f, 0.5f));
    let x_331 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_330.x, x_330.y, x_331.z, x_331.w);
    let x_333 : vec4<f32> = u_xlat5;
    let x_335 : vec2<f32> = floor(vec2<f32>(x_333.x, x_333.y));
    let x_336 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_335.x, x_335.y, x_336.z, x_336.w);
    let x_338 : vec4<f32> = u_xlat4;
    let x_341 : vec4<f32> = x_17.x_ShadowMapTexture_TexelSize;
    let x_344 : vec4<f32> = u_xlat5;
    let x_347 : vec2<f32> = ((vec2<f32>(x_338.x, x_338.y) * vec2<f32>(x_341.z, x_341.w)) + -(vec2<f32>(x_344.x, x_344.y)));
    let x_348 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_347.x, x_347.y, x_348.z, x_348.w);
    let x_351 : vec4<f32> = u_xlat4;
    u_xlat6 = (vec4<f32>(x_351.x, x_351.x, x_351.y, x_351.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_356 : vec4<f32> = u_xlat6;
    let x_358 : vec4<f32> = u_xlat6;
    let x_360 : vec2<f32> = (vec2<f32>(x_356.x, x_356.z) * vec2<f32>(x_358.x, x_358.z));
    let x_361 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_360.x, x_361.y, x_361.z, x_360.y);
    let x_365 : vec4<f32> = u_xlat7;
    let x_368 : vec4<f32> = u_xlat4;
    u_xlat25 = ((vec2<f32>(x_365.x, x_365.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_368.x, x_368.y)));
    let x_372 : vec4<f32> = u_xlat4;
    let x_376 : vec2<f32> = (-(vec2<f32>(x_372.x, x_372.y)) + vec2<f32>(1.0f, 1.0f));
    let x_377 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_376.x, x_377.y, x_376.y, x_377.w);
    let x_380 : vec4<f32> = u_xlat4;
    let x_383 : vec2<f32> = min(vec2<f32>(x_380.x, x_380.y), vec2<f32>(0.0f, 0.0f));
    let x_384 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_383.x, x_383.y, x_384.z, x_384.w);
    let x_386 : vec4<f32> = u_xlat8;
    let x_389 : vec4<f32> = u_xlat8;
    let x_392 : vec4<f32> = u_xlat6;
    let x_394 : vec2<f32> = ((-(vec2<f32>(x_386.x, x_386.y)) * vec2<f32>(x_389.x, x_389.y)) + vec2<f32>(x_392.x, x_392.z));
    let x_395 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_394.x, x_395.y, x_394.y, x_395.w);
    let x_397 : vec4<f32> = u_xlat4;
    let x_399 : vec2<f32> = max(vec2<f32>(x_397.x, x_397.y), vec2<f32>(0.0f, 0.0f));
    let x_400 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_399.x, x_399.y, x_400.z, x_400.w);
    let x_402 : vec4<f32> = u_xlat4;
    let x_405 : vec4<f32> = u_xlat4;
    let x_408 : vec4<f32> = u_xlat6;
    let x_410 : vec2<f32> = ((-(vec2<f32>(x_402.x, x_402.y)) * vec2<f32>(x_405.x, x_405.y)) + vec2<f32>(x_408.y, x_408.w));
    let x_411 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_410.x, x_410.y, x_411.z, x_411.w);
    let x_414 : f32 = u_xlat25.x;
    u_xlat8.x = x_414;
    let x_417 : f32 = u_xlat6.x;
    u_xlat8.y = x_417;
    let x_420 : f32 = u_xlat4.x;
    u_xlat8.z = x_420;
    let x_423 : f32 = u_xlat7.x;
    u_xlat8.w = x_423;
    let x_425 : vec4<f32> = u_xlat8;
    u_xlat8 = (x_425 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_431 : f32 = u_xlat25.y;
    u_xlat7.x = x_431;
    let x_434 : f32 = u_xlat6.z;
    u_xlat7.y = x_434;
    let x_437 : f32 = u_xlat4.y;
    u_xlat7.z = x_437;
    let x_439 : vec4<f32> = u_xlat7;
    u_xlat6 = (x_439 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_441 : vec4<f32> = u_xlat8;
    let x_443 : vec4<f32> = u_xlat8;
    u_xlat7 = (vec4<f32>(x_441.y, x_441.w, x_441.y, x_441.w) + vec4<f32>(x_443.x, x_443.z, x_443.x, x_443.z));
    let x_447 : vec4<f32> = u_xlat6;
    let x_449 : vec4<f32> = u_xlat6;
    u_xlat9 = (vec4<f32>(x_447.y, x_447.y, x_447.w, x_447.w) + vec4<f32>(x_449.x, x_449.x, x_449.z, x_449.z));
    let x_452 : vec4<f32> = u_xlat8;
    let x_454 : vec4<f32> = u_xlat7;
    let x_456 : vec2<f32> = (vec2<f32>(x_452.y, x_452.w) / vec2<f32>(x_454.z, x_454.w));
    let x_457 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_456.x, x_456.y, x_457.z, x_457.w);
    let x_459 : vec4<f32> = u_xlat4;
    let x_463 : vec2<f32> = (vec2<f32>(x_459.x, x_459.y) + vec2<f32>(-1.5f, 0.5f));
    let x_464 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_463.x, x_463.y, x_464.z, x_464.w);
    let x_466 : vec4<f32> = u_xlat6;
    let x_468 : vec4<f32> = u_xlat9;
    u_xlat25 = (vec2<f32>(x_466.y, x_466.w) / vec2<f32>(x_468.y, x_468.w));
    let x_471 : vec2<f32> = u_xlat25;
    u_xlat25 = (x_471 + vec2<f32>(-1.5f, 0.5f));
    let x_473 : vec4<f32> = u_xlat4;
    let x_476 : vec4<f32> = x_17.x_ShadowMapTexture_TexelSize;
    let x_478 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(x_476.x, x_476.x));
    let x_479 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_478.x, x_478.y, x_479.z, x_479.w);
    let x_481 : vec2<f32> = u_xlat25;
    let x_483 : vec4<f32> = x_17.x_ShadowMapTexture_TexelSize;
    let x_485 : vec2<f32> = (x_481 * vec2<f32>(x_483.y, x_483.y));
    let x_486 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_486.x, x_486.y, x_485.x, x_485.y);
    let x_488 : vec4<f32> = u_xlat7;
    let x_489 : vec4<f32> = u_xlat9;
    u_xlat7 = (x_488 * x_489);
    let x_491 : vec4<f32> = u_xlat5;
    let x_494 : vec4<f32> = x_17.x_ShadowMapTexture_TexelSize;
    let x_497 : vec4<f32> = u_xlat6;
    u_xlat8 = ((vec4<f32>(x_491.x, x_491.y, x_491.x, x_491.y) * vec4<f32>(x_494.x, x_494.y, x_494.x, x_494.y)) + vec4<f32>(x_497.x, x_497.z, x_497.y, x_497.z));
    let x_501 : vec4<f32> = u_xlat8;
    let x_502 : vec2<f32> = vec2<f32>(x_501.x, x_501.y);
    let x_504 : f32 = u_xlat4.z;
    txVec0 = vec3<f32>(x_502.x, x_502.y, x_504);
    let x_516 : vec3<f32> = txVec0;
    let x_518 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_516.xy, x_516.z);
    u_xlat22 = x_518;
    let x_520 : vec4<f32> = u_xlat8;
    let x_521 : vec2<f32> = vec2<f32>(x_520.z, x_520.w);
    let x_523 : f32 = u_xlat4.z;
    txVec1 = vec3<f32>(x_521.x, x_521.y, x_523);
    let x_530 : vec3<f32> = txVec1;
    let x_532 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_530.xy, x_530.z);
    u_xlat33 = x_532;
    let x_533 : f32 = u_xlat33;
    let x_535 : f32 = u_xlat7.y;
    u_xlat33 = (x_533 * x_535);
    let x_538 : f32 = u_xlat7.x;
    let x_539 : f32 = u_xlat22;
    let x_541 : f32 = u_xlat33;
    u_xlat22 = ((x_538 * x_539) + x_541);
    let x_543 : vec4<f32> = u_xlat5;
    let x_546 : vec4<f32> = x_17.x_ShadowMapTexture_TexelSize;
    let x_549 : vec4<f32> = u_xlat6;
    u_xlat5 = ((vec4<f32>(x_543.x, x_543.y, x_543.x, x_543.y) * vec4<f32>(x_546.x, x_546.y, x_546.x, x_546.y)) + vec4<f32>(x_549.x, x_549.w, x_549.y, x_549.w));
    let x_553 : vec4<f32> = u_xlat5;
    let x_554 : vec2<f32> = vec2<f32>(x_553.x, x_553.y);
    let x_556 : f32 = u_xlat4.z;
    txVec2 = vec3<f32>(x_554.x, x_554.y, x_556);
    let x_563 : vec3<f32> = txVec2;
    let x_565 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_563.xy, x_563.z);
    u_xlat33 = x_565;
    let x_567 : f32 = u_xlat7.z;
    let x_568 : f32 = u_xlat33;
    let x_570 : f32 = u_xlat22;
    u_xlat22 = ((x_567 * x_568) + x_570);
    let x_573 : vec4<f32> = u_xlat5;
    let x_574 : vec2<f32> = vec2<f32>(x_573.z, x_573.w);
    let x_576 : f32 = u_xlat4.z;
    txVec3 = vec3<f32>(x_574.x, x_574.y, x_576);
    let x_583 : vec3<f32> = txVec3;
    let x_585 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_583.xy, x_583.z);
    u_xlat33 = x_585;
    let x_587 : f32 = u_xlat7.w;
    let x_588 : f32 = u_xlat33;
    let x_590 : f32 = u_xlat22;
    u_xlat22 = ((x_587 * x_588) + x_590);
    let x_593 : f32 = x_17.x_LightShadowData.x;
    u_xlat33 = (-(x_593) + 1.0f);
    let x_596 : f32 = u_xlat22;
    let x_597 : f32 = u_xlat33;
    let x_600 : f32 = x_17.x_LightShadowData.x;
    u_xlat22 = ((x_596 * x_597) + x_600);
  } else {
    u_xlat22 = 1.0f;
  }
  let x_603 : f32 = u_xlat22;
  u_xlat33 = (-(x_603) + 1.0f);
  let x_607 : f32 = u_xlat0.x;
  let x_608 : f32 = u_xlat33;
  let x_610 : f32 = u_xlat22;
  u_xlat0.x = ((x_607 * x_608) + x_610);
  let x_614 : f32 = u_xlat0.x;
  let x_615 : f32 = u_xlat21;
  u_xlat0.x = (x_614 * x_615);
  let x_618 : vec4<f32> = u_xlat0;
  let x_622 : vec4<f32> = x_17.x_LightColor;
  let x_624 : vec3<f32> = (vec3<f32>(x_618.x, x_618.x, x_618.x) * vec3<f32>(x_622.x, x_622.y, x_622.z));
  let x_625 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_624.x, x_624.y, x_624.z, x_625.w);
  let x_632 : vec3<f32> = u_xlat1;
  let x_634 : vec4<f32> = textureSample(x_CameraGBufferTexture0, sampler_CameraGBufferTexture0, vec2<f32>(x_632.x, x_632.y));
  let x_635 : vec3<f32> = vec3<f32>(x_634.x, x_634.y, x_634.z);
  let x_636 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_635.x, x_635.y, x_635.z, x_636.w);
  let x_643 : vec3<f32> = u_xlat1;
  let x_645 : vec4<f32> = textureSample(x_CameraGBufferTexture1, sampler_CameraGBufferTexture1, vec2<f32>(x_643.x, x_643.y));
  u_xlat6 = x_645;
  let x_651 : vec3<f32> = u_xlat1;
  let x_653 : vec4<f32> = textureSample(x_CameraGBufferTexture2, sampler_CameraGBufferTexture2, vec2<f32>(x_651.x, x_651.y));
  u_xlat1 = vec3<f32>(x_653.x, x_653.y, x_653.z);
  let x_655 : vec3<f32> = u_xlat1;
  u_xlat1 = ((x_655 * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_662 : vec3<f32> = u_xlat1;
  let x_663 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_662, x_663);
  let x_667 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_667);
  let x_670 : vec4<f32> = u_xlat0;
  let x_672 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_670.x, x_670.x, x_670.x) * x_672);
  let x_674 : vec4<f32> = u_xlat2;
  let x_678 : vec3<f32> = x_17.x_WorldSpaceCameraPos;
  let x_680 : vec3<f32> = (vec3<f32>(x_674.x, x_674.y, x_674.w) + -(x_678));
  let x_681 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_680.x, x_680.y, x_680.z, x_681.w);
  let x_683 : vec4<f32> = u_xlat2;
  let x_685 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(x_683.x, x_683.y, x_683.z), vec3<f32>(x_685.x, x_685.y, x_685.z));
  let x_690 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_690);
  let x_693 : vec4<f32> = u_xlat0;
  let x_695 : vec4<f32> = u_xlat2;
  let x_697 : vec3<f32> = (vec3<f32>(x_693.x, x_693.x, x_693.x) * vec3<f32>(x_695.x, x_695.y, x_695.z));
  let x_698 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_697.x, x_697.y, x_697.z, x_698.w);
  let x_700 : vec4<f32> = u_xlat6;
  u_xlat7 = (-(vec4<f32>(x_700.w, x_700.x, x_700.y, x_700.z)) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_705 : vec3<f32> = u_xlat10;
  let x_706 : f32 = u_xlat31;
  let x_709 : vec4<f32> = u_xlat2;
  let x_712 : vec3<f32> = ((x_705 * vec3<f32>(x_706, x_706, x_706)) + -(vec3<f32>(x_709.x, x_709.y, x_709.z)));
  let x_713 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_712.x, x_712.y, x_712.z, x_713.w);
  let x_715 : vec4<f32> = u_xlat0;
  let x_717 : vec4<f32> = u_xlat0;
  u_xlat30 = dot(vec3<f32>(x_715.x, x_715.y, x_715.z), vec3<f32>(x_717.x, x_717.y, x_717.z));
  let x_720 : f32 = u_xlat30;
  u_xlat30 = max(x_720, 0.001f);
  let x_723 : f32 = u_xlat30;
  u_xlat30 = inverseSqrt(x_723);
  let x_725 : f32 = u_xlat30;
  let x_727 : vec4<f32> = u_xlat0;
  let x_729 : vec3<f32> = (vec3<f32>(x_725, x_725, x_725) * vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_730 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_729.x, x_729.y, x_729.z, x_730.w);
  let x_732 : vec3<f32> = u_xlat1;
  let x_733 : vec4<f32> = u_xlat2;
  u_xlat30 = dot(x_732, -(vec3<f32>(x_733.x, x_733.y, x_733.z)));
  let x_737 : vec3<f32> = u_xlat1;
  let x_738 : vec3<f32> = u_xlat3;
  u_xlat31 = dot(x_737, x_738);
  let x_740 : f32 = u_xlat31;
  u_xlat31 = clamp(x_740, 0.0f, 1.0f);
  let x_742 : vec3<f32> = u_xlat1;
  let x_743 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(x_742, vec3<f32>(x_743.x, x_743.y, x_743.z));
  let x_748 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_748, 0.0f, 1.0f);
  let x_751 : vec3<f32> = u_xlat3;
  let x_752 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(x_751, vec3<f32>(x_752.x, x_752.y, x_752.z));
  let x_757 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_757, 0.0f, 1.0f);
  let x_761 : f32 = u_xlat0.x;
  let x_763 : f32 = u_xlat0.x;
  u_xlat10.x = (x_761 * x_763);
  let x_766 : vec3<f32> = u_xlat10;
  let x_768 : vec4<f32> = u_xlat7;
  u_xlat10.x = dot(vec2<f32>(x_766.x, x_766.x), vec2<f32>(x_768.x, x_768.x));
  let x_773 : f32 = u_xlat10.x;
  u_xlat10.x = (x_773 + -0.5f);
  let x_778 : f32 = u_xlat31;
  u_xlat20 = (-(x_778) + 1.0f);
  let x_782 : f32 = u_xlat20;
  let x_783 : f32 = u_xlat20;
  u_xlat11 = (x_782 * x_783);
  let x_785 : f32 = u_xlat11;
  let x_786 : f32 = u_xlat11;
  u_xlat11 = (x_785 * x_786);
  let x_788 : f32 = u_xlat20;
  let x_789 : f32 = u_xlat11;
  u_xlat20 = (x_788 * x_789);
  let x_792 : f32 = u_xlat10.x;
  let x_793 : f32 = u_xlat20;
  u_xlat20 = ((x_792 * x_793) + 1.0f);
  let x_796 : f32 = u_xlat30;
  u_xlat11 = (-(abs(x_796)) + 1.0f);
  let x_800 : f32 = u_xlat11;
  let x_801 : f32 = u_xlat11;
  u_xlat21 = (x_800 * x_801);
  let x_803 : f32 = u_xlat21;
  let x_804 : f32 = u_xlat21;
  u_xlat21 = (x_803 * x_804);
  let x_806 : f32 = u_xlat11;
  let x_807 : f32 = u_xlat21;
  u_xlat11 = (x_806 * x_807);
  let x_810 : f32 = u_xlat10.x;
  let x_811 : f32 = u_xlat11;
  u_xlat10.x = ((x_810 * x_811) + 1.0f);
  let x_816 : f32 = u_xlat10.x;
  let x_817 : f32 = u_xlat20;
  u_xlat10.x = (x_816 * x_817);
  let x_821 : f32 = u_xlat7.x;
  let x_823 : f32 = u_xlat7.x;
  u_xlat20 = (x_821 * x_823);
  let x_825 : f32 = u_xlat20;
  u_xlat20 = max(x_825, 0.002f);
  let x_828 : f32 = u_xlat20;
  u_xlat11 = (-(x_828) + 1.0f);
  let x_831 : f32 = u_xlat30;
  let x_833 : f32 = u_xlat11;
  let x_835 : f32 = u_xlat20;
  u_xlat21 = ((abs(x_831) * x_833) + x_835);
  let x_837 : f32 = u_xlat31;
  let x_838 : f32 = u_xlat11;
  let x_840 : f32 = u_xlat20;
  u_xlat11 = ((x_837 * x_838) + x_840);
  let x_842 : f32 = u_xlat30;
  let x_844 : f32 = u_xlat11;
  u_xlat30 = (abs(x_842) * x_844);
  let x_846 : f32 = u_xlat31;
  let x_847 : f32 = u_xlat21;
  let x_849 : f32 = u_xlat30;
  u_xlat30 = ((x_846 * x_847) + x_849);
  let x_851 : f32 = u_xlat30;
  u_xlat30 = (x_851 + 0.00001f);
  let x_854 : f32 = u_xlat30;
  u_xlat30 = (0.5f / x_854);
  let x_856 : f32 = u_xlat20;
  let x_857 : f32 = u_xlat20;
  u_xlat20 = (x_856 * x_857);
  let x_860 : f32 = u_xlat1.x;
  let x_861 : f32 = u_xlat20;
  let x_864 : f32 = u_xlat1.x;
  u_xlat11 = ((x_860 * x_861) + -(x_864));
  let x_867 : f32 = u_xlat11;
  let x_869 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_867 * x_869) + 1.0f);
  let x_873 : f32 = u_xlat20;
  u_xlat20 = (x_873 * 0.318309873f);
  let x_877 : f32 = u_xlat1.x;
  let x_879 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_877 * x_879) + 0.0000001f);
  let x_884 : f32 = u_xlat20;
  let x_886 : f32 = u_xlat1.x;
  u_xlat20 = (x_884 / x_886);
  let x_888 : f32 = u_xlat20;
  let x_889 : f32 = u_xlat30;
  u_xlat10.y = (x_888 * x_889);
  let x_892 : f32 = u_xlat31;
  let x_894 : vec3<f32> = u_xlat10;
  let x_896 : vec2<f32> = (vec2<f32>(x_892, x_892) * vec2<f32>(x_894.x, x_894.y));
  let x_897 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_896.x, x_896.y, x_897.z);
  let x_900 : f32 = u_xlat10.y;
  u_xlat20 = (x_900 * 3.141592741f);
  let x_903 : f32 = u_xlat20;
  u_xlat20 = max(x_903, 0.0f);
  let x_905 : vec4<f32> = u_xlat6;
  let x_907 : vec4<f32> = u_xlat6;
  u_xlat30 = dot(vec3<f32>(x_905.x, x_905.y, x_905.z), vec3<f32>(x_907.x, x_907.y, x_907.z));
  let x_911 : f32 = u_xlat30;
  u_xlatb30 = !((x_911 == 0.0f));
  let x_913 : bool = u_xlatb30;
  u_xlat30 = select(0.0f, 1.0f, x_913);
  let x_915 : f32 = u_xlat30;
  let x_916 : f32 = u_xlat20;
  u_xlat20 = (x_915 * x_916);
  let x_918 : vec3<f32> = u_xlat10;
  let x_920 : vec4<f32> = u_xlat4;
  u_xlat1 = (vec3<f32>(x_918.x, x_918.x, x_918.x) * vec3<f32>(x_920.x, x_920.y, x_920.z));
  let x_923 : vec4<f32> = u_xlat4;
  let x_925 : f32 = u_xlat20;
  u_xlat10 = (vec3<f32>(x_923.x, x_923.y, x_923.z) * vec3<f32>(x_925, x_925, x_925));
  let x_929 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_929) + 1.0f);
  let x_934 : f32 = u_xlat0.x;
  let x_936 : f32 = u_xlat0.x;
  u_xlat31 = (x_934 * x_936);
  let x_938 : f32 = u_xlat31;
  let x_939 : f32 = u_xlat31;
  u_xlat31 = (x_938 * x_939);
  let x_942 : f32 = u_xlat0.x;
  let x_943 : f32 = u_xlat31;
  u_xlat0.x = (x_942 * x_943);
  let x_946 : vec4<f32> = u_xlat7;
  let x_948 : vec4<f32> = u_xlat0;
  let x_951 : vec4<f32> = u_xlat6;
  let x_953 : vec3<f32> = ((vec3<f32>(x_946.y, x_946.z, x_946.w) * vec3<f32>(x_948.x, x_948.x, x_948.x)) + vec3<f32>(x_951.x, x_951.y, x_951.z));
  let x_954 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_953.x, x_953.y, x_953.z, x_954.w);
  let x_956 : vec3<f32> = u_xlat10;
  let x_957 : vec4<f32> = u_xlat2;
  let x_959 : vec3<f32> = (x_956 * vec3<f32>(x_957.x, x_957.y, x_957.z));
  let x_960 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_959.x, x_959.y, x_959.z, x_960.w);
  let x_962 : vec4<f32> = u_xlat5;
  let x_964 : vec3<f32> = u_xlat1;
  let x_966 : vec4<f32> = u_xlat0;
  let x_968 : vec3<f32> = ((vec3<f32>(x_962.x, x_962.y, x_962.z) * x_964) + vec3<f32>(x_966.x, x_966.y, x_966.z));
  let x_969 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_968.x, x_968.y, x_968.z, x_969.w);
  u_xlat0.w = 1.0f;
  let x_974 : vec4<f32> = u_xlat0;
  SV_Target0 = exp2(-(x_974));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(1) vs_TEXCOORD1_param : vec3<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

