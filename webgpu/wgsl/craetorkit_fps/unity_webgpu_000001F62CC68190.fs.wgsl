type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OcclusionMaskSelector : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  unity_FogParams : vec4<f32>,
  unity_ProbeVolumeParams : vec4<f32>,
  unity_ProbeVolumeWorldToObject : mat4x4<f32>,
  unity_ProbeVolumeSizeInv : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_ProbeVolumeMin : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_LightColor0 : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
  x_Color : vec4<f32>,
  x_BumpScale : f32,
  x_Metallic : f32,
  x_Glossiness : f32,
  @size(4)
  padding_3 : u32,
  unity_WorldToLight : mat4x4<f32>,
}

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(8) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_36 : PGlobals;

@group(0) @binding(1) var x_BumpMap : texture_2d<f32>;

@group(0) @binding(9) var sampler_BumpMap : sampler;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec3<f32>;

@group(0) @binding(4) var unity_ProbeVolumeSH : texture_3d<f32>;

@group(0) @binding(6) var samplerunity_ProbeVolumeSH : sampler;

@group(0) @binding(5) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(2) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(10) var sampler_LightTexture0 : sampler;

@group(0) @binding(3) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(11) var sampler_LightTextureB0 : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat33 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat34 : f32;
  var u_xlatb34 : bool;
  var x_340 : vec3<f32>;
  var u_xlat35 : f32;
  var u_xlatb35 : bool;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat36 : f32;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlat14 : f32;
  var u_xlat25 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_24 : vec4<f32> = vs_TEXCOORD0;
  let x_26 : vec4<f32> = textureSample(x_MainTex, sampler_MainTex, vec2<f32>(x_24.x, x_24.y));
  u_xlat0 = vec3<f32>(x_26.x, x_26.y, x_26.z);
  let x_29 : vec3<f32> = u_xlat0;
  let x_41 : vec4<f32> = x_36.x_Color;
  u_xlat1 = (x_29 * vec3<f32>(x_41.x, x_41.y, x_41.z));
  let x_45 : vec4<f32> = x_36.x_Color;
  let x_47 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_45.x, x_45.y, x_45.z) * x_47) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_55 : f32 = x_36.x_Metallic;
  let x_57 : f32 = x_36.x_Metallic;
  let x_59 : f32 = x_36.x_Metallic;
  let x_60 : vec3<f32> = vec3<f32>(x_55, x_57, x_59);
  let x_65 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_60.x, x_60.y, x_60.z) * x_65) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_73 : f32 = x_36.x_Metallic;
  u_xlat33 = ((-(x_73) * 0.959999979f) + 0.959999979f);
  let x_78 : f32 = u_xlat33;
  let x_80 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_78, x_78, x_78) * x_80);
  let x_89 : vec4<f32> = vs_TEXCOORD0;
  let x_91 : vec4<f32> = textureSample(x_BumpMap, sampler_BumpMap, vec2<f32>(x_89.x, x_89.y));
  let x_92 : vec3<f32> = vec3<f32>(x_91.x, x_91.y, x_91.w);
  let x_93 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_92.x, x_92.y, x_92.z, x_93.w);
  let x_97 : f32 = u_xlat2.z;
  let x_100 : f32 = u_xlat2.x;
  u_xlat2.x = (x_97 * x_100);
  let x_103 : vec4<f32> = u_xlat2;
  let x_110 : vec2<f32> = ((vec2<f32>(x_103.x, x_103.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_111 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_110.x, x_110.y, x_111.z, x_111.w);
  let x_113 : vec4<f32> = u_xlat2;
  let x_117 : f32 = x_36.x_BumpScale;
  let x_119 : vec2<f32> = (vec2<f32>(x_113.x, x_113.y) * vec2<f32>(x_117, x_117));
  let x_120 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_119.x, x_119.y, x_120.z, x_120.w);
  let x_122 : vec4<f32> = u_xlat2;
  let x_124 : vec4<f32> = u_xlat2;
  u_xlat33 = dot(vec2<f32>(x_122.x, x_122.y), vec2<f32>(x_124.x, x_124.y));
  let x_127 : f32 = u_xlat33;
  u_xlat33 = min(x_127, 1.0f);
  let x_130 : f32 = u_xlat33;
  u_xlat33 = (-(x_130) + 1.0f);
  let x_133 : f32 = u_xlat33;
  u_xlat33 = sqrt(x_133);
  let x_136 : vec4<f32> = u_xlat2;
  let x_139 : vec4<f32> = vs_TEXCOORD3;
  u_xlat13 = (vec3<f32>(x_136.y, x_136.y, x_136.y) * vec3<f32>(x_139.x, x_139.y, x_139.z));
  let x_143 : vec4<f32> = vs_TEXCOORD2;
  let x_145 : vec4<f32> = u_xlat2;
  let x_148 : vec3<f32> = u_xlat13;
  let x_149 : vec3<f32> = ((vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_145.x, x_145.x, x_145.x)) + x_148);
  let x_150 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_149.x, x_149.y, x_149.z, x_150.w);
  let x_153 : vec4<f32> = vs_TEXCOORD4;
  let x_155 : f32 = u_xlat33;
  let x_158 : vec4<f32> = u_xlat2;
  let x_160 : vec3<f32> = ((vec3<f32>(x_153.x, x_153.y, x_153.z) * vec3<f32>(x_155, x_155, x_155)) + vec3<f32>(x_158.x, x_158.y, x_158.z));
  let x_161 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_160.x, x_160.y, x_160.z, x_161.w);
  let x_163 : vec4<f32> = u_xlat2;
  let x_165 : vec4<f32> = u_xlat2;
  u_xlat33 = dot(vec3<f32>(x_163.x, x_163.y, x_163.z), vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : f32 = u_xlat33;
  u_xlat33 = inverseSqrt(x_168);
  let x_170 : f32 = u_xlat33;
  let x_172 : vec4<f32> = u_xlat2;
  let x_174 : vec3<f32> = (vec3<f32>(x_170, x_170, x_170) * vec3<f32>(x_172.x, x_172.y, x_172.z));
  let x_175 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_174.x, x_174.y, x_174.z, x_175.w);
  let x_178 : vec4<f32> = vs_TEXCOORD1;
  let x_180 : vec4<f32> = vs_TEXCOORD1;
  u_xlat33 = dot(vec3<f32>(x_178.x, x_178.y, x_178.z), vec3<f32>(x_180.x, x_180.y, x_180.z));
  let x_183 : f32 = u_xlat33;
  u_xlat33 = inverseSqrt(x_183);
  let x_186 : f32 = u_xlat33;
  let x_188 : vec4<f32> = vs_TEXCOORD1;
  u_xlat3 = (vec3<f32>(x_186, x_186, x_186) * vec3<f32>(x_188.x, x_188.y, x_188.z));
  let x_194 : vec3<f32> = vs_TEXCOORD5;
  let x_199 : vec4<f32> = x_36.unity_WorldToLight[1i];
  u_xlat4 = (vec4<f32>(x_194.y, x_194.y, x_194.y, x_194.y) * x_199);
  let x_203 : vec4<f32> = x_36.unity_WorldToLight[0i];
  let x_204 : vec3<f32> = vs_TEXCOORD5;
  let x_207 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_203 * vec4<f32>(x_204.x, x_204.x, x_204.x, x_204.x)) + x_207);
  let x_211 : vec4<f32> = x_36.unity_WorldToLight[2i];
  let x_212 : vec3<f32> = vs_TEXCOORD5;
  let x_215 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_211 * vec4<f32>(x_212.z, x_212.z, x_212.z, x_212.z)) + x_215);
  let x_217 : vec4<f32> = u_xlat4;
  let x_220 : vec4<f32> = x_36.unity_WorldToLight[3i];
  u_xlat4 = (x_217 + x_220);
  let x_223 : vec3<f32> = vs_TEXCOORD5;
  let x_227 : vec3<f32> = x_36.x_WorldSpaceCameraPos;
  let x_228 : vec3<f32> = (-(x_223) + x_227);
  let x_229 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_228.x, x_228.y, x_228.z, x_229.w);
  let x_234 : f32 = x_36.unity_MatrixV[0i].z;
  u_xlat6.x = x_234;
  let x_237 : f32 = x_36.unity_MatrixV[1i].z;
  u_xlat6.y = x_237;
  let x_241 : f32 = x_36.unity_MatrixV[2i].z;
  u_xlat6.z = x_241;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec4<f32> = u_xlat6;
  u_xlat33 = dot(vec3<f32>(x_243.x, x_243.y, x_243.z), vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec3<f32> = vs_TEXCOORD5;
  let x_251 : vec4<f32> = x_36.unity_ShadowFadeCenterAndType;
  let x_254 : vec3<f32> = (x_248 + -(vec3<f32>(x_251.x, x_251.y, x_251.z)));
  let x_255 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_254.x, x_254.y, x_254.z, x_255.w);
  let x_258 : vec4<f32> = u_xlat5;
  let x_260 : vec4<f32> = u_xlat5;
  u_xlat34 = dot(vec3<f32>(x_258.x, x_258.y, x_258.z), vec3<f32>(x_260.x, x_260.y, x_260.z));
  let x_263 : f32 = u_xlat34;
  u_xlat34 = sqrt(x_263);
  let x_265 : f32 = u_xlat33;
  let x_267 : f32 = u_xlat34;
  u_xlat34 = (-(x_265) + x_267);
  let x_271 : f32 = x_36.unity_ShadowFadeCenterAndType.w;
  let x_272 : f32 = u_xlat34;
  let x_274 : f32 = u_xlat33;
  u_xlat33 = ((x_271 * x_272) + x_274);
  let x_276 : f32 = u_xlat33;
  let x_279 : f32 = x_36.x_LightShadowData.z;
  let x_282 : f32 = x_36.x_LightShadowData.w;
  u_xlat33 = ((x_276 * x_279) + x_282);
  let x_284 : f32 = u_xlat33;
  u_xlat33 = clamp(x_284, 0.0f, 1.0f);
  let x_292 : f32 = x_36.unity_ProbeVolumeParams.x;
  u_xlatb34 = (x_292 == 1.0f);
  let x_294 : bool = u_xlatb34;
  if (x_294) {
    let x_298 : f32 = x_36.unity_ProbeVolumeParams.y;
    u_xlatb34 = (x_298 == 1.0f);
    let x_300 : vec3<f32> = vs_TEXCOORD5;
    let x_304 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[1i];
    let x_306 : vec3<f32> = (vec3<f32>(x_300.y, x_300.y, x_300.y) * vec3<f32>(x_304.x, x_304.y, x_304.z));
    let x_307 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_306.x, x_306.y, x_306.z, x_307.w);
    let x_310 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[0i];
    let x_312 : vec3<f32> = vs_TEXCOORD5;
    let x_315 : vec4<f32> = u_xlat5;
    let x_317 : vec3<f32> = ((vec3<f32>(x_310.x, x_310.y, x_310.z) * vec3<f32>(x_312.x, x_312.x, x_312.x)) + vec3<f32>(x_315.x, x_315.y, x_315.z));
    let x_318 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_317.x, x_317.y, x_317.z, x_318.w);
    let x_321 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[2i];
    let x_323 : vec3<f32> = vs_TEXCOORD5;
    let x_326 : vec4<f32> = u_xlat5;
    let x_328 : vec3<f32> = ((vec3<f32>(x_321.x, x_321.y, x_321.z) * vec3<f32>(x_323.z, x_323.z, x_323.z)) + vec3<f32>(x_326.x, x_326.y, x_326.z));
    let x_329 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_328.x, x_328.y, x_328.z, x_329.w);
    let x_331 : vec4<f32> = u_xlat5;
    let x_334 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[3i];
    let x_336 : vec3<f32> = (vec3<f32>(x_331.x, x_331.y, x_331.z) + vec3<f32>(x_334.x, x_334.y, x_334.z));
    let x_337 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_336.x, x_336.y, x_336.z, x_337.w);
    let x_339 : bool = u_xlatb34;
    if (x_339) {
      let x_343 : vec4<f32> = u_xlat5;
      x_340 = vec3<f32>(x_343.x, x_343.y, x_343.z);
    } else {
      let x_346 : vec3<f32> = vs_TEXCOORD5;
      x_340 = x_346;
    }
    let x_347 : vec3<f32> = x_340;
    let x_348 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_347.x, x_347.y, x_347.z, x_348.w);
    let x_350 : vec4<f32> = u_xlat5;
    let x_354 : vec3<f32> = x_36.unity_ProbeVolumeMin;
    let x_356 : vec3<f32> = (vec3<f32>(x_350.x, x_350.y, x_350.z) + -(x_354));
    let x_357 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_356.x, x_356.y, x_356.z, x_357.w);
    let x_359 : vec4<f32> = u_xlat5;
    let x_363 : vec3<f32> = x_36.unity_ProbeVolumeSizeInv;
    let x_364 : vec3<f32> = (vec3<f32>(x_359.x, x_359.y, x_359.z) * x_363);
    let x_365 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_365.x, x_364.x, x_364.y, x_364.z);
    let x_368 : f32 = u_xlat5.y;
    u_xlat34 = ((x_368 * 0.25f) + 0.75f);
    let x_375 : f32 = x_36.unity_ProbeVolumeParams.z;
    u_xlat35 = ((x_375 * 0.5f) + 0.75f);
    let x_379 : f32 = u_xlat34;
    let x_380 : f32 = u_xlat35;
    u_xlat5.x = max(x_379, x_380);
    let x_391 : vec4<f32> = u_xlat5;
    let x_393 : vec4<f32> = textureSample(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH, vec3<f32>(x_391.x, x_391.z, x_391.w));
    u_xlat5 = x_393;
  } else {
    u_xlat5.x = 1.0f;
    u_xlat5.y = 1.0f;
    u_xlat5.z = 1.0f;
    u_xlat5.w = 1.0f;
  }
  let x_399 : vec4<f32> = u_xlat5;
  let x_401 : vec4<f32> = x_36.unity_OcclusionMaskSelector;
  u_xlat34 = dot(x_399, x_401);
  let x_403 : f32 = u_xlat34;
  u_xlat34 = clamp(x_403, 0.0f, 1.0f);
  let x_406 : f32 = u_xlat33;
  u_xlatb35 = (x_406 < 0.99000001f);
  let x_409 : bool = u_xlatb35;
  if (x_409) {
    let x_412 : vec3<f32> = vs_TEXCOORD5;
    let x_415 : vec4<f32> = x_36.unity_WorldToShadow[0i][1i];
    u_xlat5 = (vec4<f32>(x_412.y, x_412.y, x_412.y, x_412.y) * x_415);
    let x_418 : vec4<f32> = x_36.unity_WorldToShadow[0i][0i];
    let x_419 : vec3<f32> = vs_TEXCOORD5;
    let x_422 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_418 * vec4<f32>(x_419.x, x_419.x, x_419.x, x_419.x)) + x_422);
    let x_425 : vec4<f32> = x_36.unity_WorldToShadow[0i][2i];
    let x_426 : vec3<f32> = vs_TEXCOORD5;
    let x_429 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_425 * vec4<f32>(x_426.z, x_426.z, x_426.z, x_426.z)) + x_429);
    let x_431 : vec4<f32> = u_xlat5;
    let x_433 : vec4<f32> = x_36.unity_WorldToShadow[0i][3i];
    u_xlat5 = (x_431 + x_433);
    let x_435 : vec4<f32> = u_xlat5;
    let x_437 : vec4<f32> = u_xlat5;
    let x_439 : vec3<f32> = (vec3<f32>(x_435.x, x_435.y, x_435.z) / vec3<f32>(x_437.w, x_437.w, x_437.w));
    let x_440 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_439.x, x_439.y, x_439.z, x_440.w);
    let x_442 : vec4<f32> = u_xlat5;
    let x_446 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_450 : vec2<f32> = ((vec2<f32>(x_442.x, x_442.y) * vec2<f32>(x_446.z, x_446.w)) + vec2<f32>(0.5f, 0.5f));
    let x_451 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_450.x, x_450.y, x_451.z, x_451.w);
    let x_453 : vec4<f32> = u_xlat6;
    let x_455 : vec2<f32> = floor(vec2<f32>(x_453.x, x_453.y));
    let x_456 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_455.x, x_455.y, x_456.z, x_456.w);
    let x_458 : vec4<f32> = u_xlat5;
    let x_461 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_464 : vec4<f32> = u_xlat6;
    let x_467 : vec2<f32> = ((vec2<f32>(x_458.x, x_458.y) * vec2<f32>(x_461.z, x_461.w)) + -(vec2<f32>(x_464.x, x_464.y)));
    let x_468 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
    let x_471 : vec4<f32> = u_xlat5;
    u_xlat7 = (vec4<f32>(x_471.x, x_471.x, x_471.y, x_471.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_476 : vec4<f32> = u_xlat7;
    let x_478 : vec4<f32> = u_xlat7;
    let x_480 : vec2<f32> = (vec2<f32>(x_476.x, x_476.z) * vec2<f32>(x_478.x, x_478.z));
    let x_481 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_480.x, x_481.y, x_481.z, x_480.y);
    let x_485 : vec4<f32> = u_xlat8;
    let x_488 : vec4<f32> = u_xlat5;
    u_xlat28 = ((vec2<f32>(x_485.x, x_485.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_488.x, x_488.y)));
    let x_492 : vec4<f32> = u_xlat5;
    let x_496 : vec2<f32> = (-(vec2<f32>(x_492.x, x_492.y)) + vec2<f32>(1.0f, 1.0f));
    let x_497 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_496.x, x_497.y, x_496.y, x_497.w);
    let x_500 : vec4<f32> = u_xlat5;
    let x_503 : vec2<f32> = min(vec2<f32>(x_500.x, x_500.y), vec2<f32>(0.0f, 0.0f));
    let x_504 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_503.x, x_503.y, x_504.z, x_504.w);
    let x_506 : vec4<f32> = u_xlat9;
    let x_509 : vec4<f32> = u_xlat9;
    let x_512 : vec4<f32> = u_xlat7;
    let x_514 : vec2<f32> = ((-(vec2<f32>(x_506.x, x_506.y)) * vec2<f32>(x_509.x, x_509.y)) + vec2<f32>(x_512.x, x_512.z));
    let x_515 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_514.x, x_515.y, x_514.y, x_515.w);
    let x_517 : vec4<f32> = u_xlat5;
    let x_519 : vec2<f32> = max(vec2<f32>(x_517.x, x_517.y), vec2<f32>(0.0f, 0.0f));
    let x_520 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
    let x_522 : vec4<f32> = u_xlat5;
    let x_525 : vec4<f32> = u_xlat5;
    let x_528 : vec4<f32> = u_xlat7;
    let x_530 : vec2<f32> = ((-(vec2<f32>(x_522.x, x_522.y)) * vec2<f32>(x_525.x, x_525.y)) + vec2<f32>(x_528.y, x_528.w));
    let x_531 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_530.x, x_530.y, x_531.z, x_531.w);
    let x_534 : f32 = u_xlat28.x;
    u_xlat9.x = x_534;
    let x_537 : f32 = u_xlat7.x;
    u_xlat9.y = x_537;
    let x_540 : f32 = u_xlat5.x;
    u_xlat9.z = x_540;
    let x_543 : f32 = u_xlat8.x;
    u_xlat9.w = x_543;
    let x_545 : vec4<f32> = u_xlat9;
    u_xlat9 = (x_545 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_551 : f32 = u_xlat28.y;
    u_xlat8.x = x_551;
    let x_554 : f32 = u_xlat7.z;
    u_xlat8.y = x_554;
    let x_557 : f32 = u_xlat5.y;
    u_xlat8.z = x_557;
    let x_559 : vec4<f32> = u_xlat8;
    u_xlat7 = (x_559 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_561 : vec4<f32> = u_xlat9;
    let x_563 : vec4<f32> = u_xlat9;
    u_xlat8 = (vec4<f32>(x_561.y, x_561.w, x_561.y, x_561.w) + vec4<f32>(x_563.x, x_563.z, x_563.x, x_563.z));
    let x_567 : vec4<f32> = u_xlat7;
    let x_569 : vec4<f32> = u_xlat7;
    u_xlat10 = (vec4<f32>(x_567.y, x_567.y, x_567.w, x_567.w) + vec4<f32>(x_569.x, x_569.x, x_569.z, x_569.z));
    let x_572 : vec4<f32> = u_xlat9;
    let x_574 : vec4<f32> = u_xlat8;
    let x_576 : vec2<f32> = (vec2<f32>(x_572.y, x_572.w) / vec2<f32>(x_574.z, x_574.w));
    let x_577 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_576.x, x_576.y, x_577.z, x_577.w);
    let x_579 : vec4<f32> = u_xlat5;
    let x_583 : vec2<f32> = (vec2<f32>(x_579.x, x_579.y) + vec2<f32>(-1.5f, 0.5f));
    let x_584 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_583.x, x_583.y, x_584.z, x_584.w);
    let x_586 : vec4<f32> = u_xlat7;
    let x_588 : vec4<f32> = u_xlat10;
    u_xlat28 = (vec2<f32>(x_586.y, x_586.w) / vec2<f32>(x_588.y, x_588.w));
    let x_591 : vec2<f32> = u_xlat28;
    u_xlat28 = (x_591 + vec2<f32>(-1.5f, 0.5f));
    let x_593 : vec4<f32> = u_xlat5;
    let x_596 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_598 : vec2<f32> = (vec2<f32>(x_593.x, x_593.y) * vec2<f32>(x_596.x, x_596.x));
    let x_599 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_598.x, x_598.y, x_599.z, x_599.w);
    let x_601 : vec2<f32> = u_xlat28;
    let x_603 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_605 : vec2<f32> = (x_601 * vec2<f32>(x_603.y, x_603.y));
    let x_606 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_606.x, x_606.y, x_605.x, x_605.y);
    let x_608 : vec4<f32> = u_xlat8;
    let x_609 : vec4<f32> = u_xlat10;
    u_xlat8 = (x_608 * x_609);
    let x_611 : vec4<f32> = u_xlat6;
    let x_614 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_617 : vec4<f32> = u_xlat7;
    u_xlat9 = ((vec4<f32>(x_611.x, x_611.y, x_611.x, x_611.y) * vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y)) + vec4<f32>(x_617.x, x_617.z, x_617.y, x_617.z));
    let x_621 : vec4<f32> = u_xlat9;
    let x_622 : vec2<f32> = vec2<f32>(x_621.x, x_621.y);
    let x_624 : f32 = u_xlat5.z;
    txVec0 = vec3<f32>(x_622.x, x_622.y, x_624);
    let x_636 : vec3<f32> = txVec0;
    let x_638 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_636.xy, x_636.z);
    u_xlat35 = x_638;
    let x_640 : vec4<f32> = u_xlat9;
    let x_641 : vec2<f32> = vec2<f32>(x_640.z, x_640.w);
    let x_643 : f32 = u_xlat5.z;
    txVec1 = vec3<f32>(x_641.x, x_641.y, x_643);
    let x_651 : vec3<f32> = txVec1;
    let x_653 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_651.xy, x_651.z);
    u_xlat36 = x_653;
    let x_654 : f32 = u_xlat36;
    let x_656 : f32 = u_xlat8.y;
    u_xlat36 = (x_654 * x_656);
    let x_659 : f32 = u_xlat8.x;
    let x_660 : f32 = u_xlat35;
    let x_662 : f32 = u_xlat36;
    u_xlat35 = ((x_659 * x_660) + x_662);
    let x_664 : vec4<f32> = u_xlat6;
    let x_667 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_670 : vec4<f32> = u_xlat7;
    u_xlat6 = ((vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y) * vec4<f32>(x_667.x, x_667.y, x_667.x, x_667.y)) + vec4<f32>(x_670.x, x_670.w, x_670.y, x_670.w));
    let x_674 : vec4<f32> = u_xlat6;
    let x_675 : vec2<f32> = vec2<f32>(x_674.x, x_674.y);
    let x_677 : f32 = u_xlat5.z;
    txVec2 = vec3<f32>(x_675.x, x_675.y, x_677);
    let x_684 : vec3<f32> = txVec2;
    let x_686 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_684.xy, x_684.z);
    u_xlat36 = x_686;
    let x_688 : f32 = u_xlat8.z;
    let x_689 : f32 = u_xlat36;
    let x_691 : f32 = u_xlat35;
    u_xlat35 = ((x_688 * x_689) + x_691);
    let x_694 : vec4<f32> = u_xlat6;
    let x_695 : vec2<f32> = vec2<f32>(x_694.z, x_694.w);
    let x_697 : f32 = u_xlat5.z;
    txVec3 = vec3<f32>(x_695.x, x_695.y, x_697);
    let x_704 : vec3<f32> = txVec3;
    let x_706 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_704.xy, x_704.z);
    u_xlat36 = x_706;
    let x_708 : f32 = u_xlat8.w;
    let x_709 : f32 = u_xlat36;
    let x_711 : f32 = u_xlat35;
    u_xlat35 = ((x_708 * x_709) + x_711);
    let x_714 : f32 = x_36.x_LightShadowData.x;
    u_xlat36 = (-(x_714) + 1.0f);
    let x_717 : f32 = u_xlat35;
    let x_718 : f32 = u_xlat36;
    let x_721 : f32 = x_36.x_LightShadowData.x;
    u_xlat35 = ((x_717 * x_718) + x_721);
  } else {
    u_xlat35 = 1.0f;
  }
  let x_724 : f32 = u_xlat34;
  let x_725 : f32 = u_xlat35;
  u_xlat34 = (x_724 + -(x_725));
  let x_728 : f32 = u_xlat33;
  let x_729 : f32 = u_xlat34;
  let x_731 : f32 = u_xlat35;
  u_xlat33 = ((x_728 * x_729) + x_731);
  let x_734 : f32 = u_xlat4.z;
  u_xlatb34 = (0.0f < x_734);
  let x_736 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_736);
  let x_738 : vec4<f32> = u_xlat4;
  let x_740 : vec4<f32> = u_xlat4;
  let x_742 : vec2<f32> = (vec2<f32>(x_738.x, x_738.y) / vec2<f32>(x_740.w, x_740.w));
  let x_743 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_742.x, x_742.y, x_743.z, x_743.w);
  let x_745 : vec4<f32> = u_xlat5;
  let x_747 : vec2<f32> = (vec2<f32>(x_745.x, x_745.y) + vec2<f32>(0.5f, 0.5f));
  let x_748 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
  let x_755 : vec4<f32> = u_xlat5;
  let x_757 : vec4<f32> = textureSample(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_755.x, x_755.y));
  u_xlat35 = x_757.w;
  let x_759 : f32 = u_xlat34;
  let x_760 : f32 = u_xlat35;
  u_xlat34 = (x_759 * x_760);
  let x_762 : vec4<f32> = u_xlat4;
  let x_764 : vec4<f32> = u_xlat4;
  u_xlat35 = dot(vec3<f32>(x_762.x, x_762.y, x_762.z), vec3<f32>(x_764.x, x_764.y, x_764.z));
  let x_772 : f32 = u_xlat35;
  let x_774 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_772, x_772));
  u_xlat35 = x_774.x;
  let x_776 : f32 = u_xlat34;
  let x_777 : f32 = u_xlat35;
  u_xlat34 = (x_776 * x_777);
  let x_779 : f32 = u_xlat33;
  let x_780 : f32 = u_xlat34;
  u_xlat33 = (x_779 * x_780);
  let x_784 : f32 = vs_TEXCOORD2.w;
  u_xlat4.x = x_784;
  let x_787 : f32 = vs_TEXCOORD3.w;
  u_xlat4.y = x_787;
  let x_790 : f32 = vs_TEXCOORD4.w;
  u_xlat4.z = x_790;
  let x_792 : vec4<f32> = u_xlat4;
  let x_794 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_792.x, x_792.y, x_792.z), vec3<f32>(x_794.x, x_794.y, x_794.z));
  let x_797 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_797);
  let x_799 : f32 = u_xlat34;
  let x_801 : vec4<f32> = u_xlat4;
  let x_803 : vec3<f32> = (vec3<f32>(x_799, x_799, x_799) * vec3<f32>(x_801.x, x_801.y, x_801.z));
  let x_804 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_803.x, x_803.y, x_803.z, x_804.w);
  let x_806 : f32 = u_xlat33;
  let x_810 : vec4<f32> = x_36.x_LightColor0;
  let x_812 : vec3<f32> = (vec3<f32>(x_806, x_806, x_806) * vec3<f32>(x_810.x, x_810.y, x_810.z));
  let x_813 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_812.x, x_812.y, x_812.z, x_813.w);
  let x_817 : f32 = x_36.x_Glossiness;
  u_xlat33 = (-(x_817) + 1.0f);
  let x_820 : vec4<f32> = u_xlat4;
  let x_822 : f32 = u_xlat34;
  let x_825 : vec3<f32> = u_xlat3;
  let x_827 : vec3<f32> = ((vec3<f32>(x_820.x, x_820.y, x_820.z) * vec3<f32>(x_822, x_822, x_822)) + -(x_825));
  let x_828 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_827.x, x_827.y, x_827.z, x_828.w);
  let x_830 : vec4<f32> = u_xlat4;
  let x_832 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_830.x, x_830.y, x_830.z), vec3<f32>(x_832.x, x_832.y, x_832.z));
  let x_835 : f32 = u_xlat34;
  u_xlat34 = max(x_835, 0.001f);
  let x_838 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_838);
  let x_840 : f32 = u_xlat34;
  let x_842 : vec4<f32> = u_xlat4;
  let x_844 : vec3<f32> = (vec3<f32>(x_840, x_840, x_840) * vec3<f32>(x_842.x, x_842.y, x_842.z));
  let x_845 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_844.x, x_844.y, x_844.z, x_845.w);
  let x_847 : vec4<f32> = u_xlat2;
  let x_849 : vec3<f32> = u_xlat3;
  u_xlat34 = dot(vec3<f32>(x_847.x, x_847.y, x_847.z), -(x_849));
  let x_852 : vec4<f32> = u_xlat2;
  let x_854 : vec4<f32> = u_xlat5;
  u_xlat35 = dot(vec3<f32>(x_852.x, x_852.y, x_852.z), vec3<f32>(x_854.x, x_854.y, x_854.z));
  let x_857 : f32 = u_xlat35;
  u_xlat35 = clamp(x_857, 0.0f, 1.0f);
  let x_859 : vec4<f32> = u_xlat2;
  let x_861 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_859.x, x_859.y, x_859.z), vec3<f32>(x_861.x, x_861.y, x_861.z));
  let x_866 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_866, 0.0f, 1.0f);
  let x_869 : vec4<f32> = u_xlat5;
  let x_871 : vec4<f32> = u_xlat4;
  u_xlat13.x = dot(vec3<f32>(x_869.x, x_869.y, x_869.z), vec3<f32>(x_871.x, x_871.y, x_871.z));
  let x_876 : f32 = u_xlat13.x;
  u_xlat13.x = clamp(x_876, 0.0f, 1.0f);
  let x_881 : f32 = u_xlat13.x;
  let x_883 : f32 = u_xlat13.x;
  u_xlat24 = (x_881 * x_883);
  let x_885 : f32 = u_xlat24;
  let x_887 : f32 = u_xlat33;
  u_xlat24 = dot(vec2<f32>(x_885, x_885), vec2<f32>(x_887, x_887));
  let x_890 : f32 = u_xlat24;
  u_xlat24 = (x_890 + -0.5f);
  let x_893 : f32 = u_xlat35;
  u_xlat3.x = (-(x_893) + 1.0f);
  let x_899 : f32 = u_xlat3.x;
  let x_901 : f32 = u_xlat3.x;
  u_xlat14 = (x_899 * x_901);
  let x_903 : f32 = u_xlat14;
  let x_904 : f32 = u_xlat14;
  u_xlat14 = (x_903 * x_904);
  let x_907 : f32 = u_xlat3.x;
  let x_908 : f32 = u_xlat14;
  u_xlat3.x = (x_907 * x_908);
  let x_911 : f32 = u_xlat24;
  let x_913 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_911 * x_913) + 1.0f);
  let x_917 : f32 = u_xlat34;
  u_xlat14 = (-(abs(x_917)) + 1.0f);
  let x_922 : f32 = u_xlat14;
  let x_923 : f32 = u_xlat14;
  u_xlat25 = (x_922 * x_923);
  let x_925 : f32 = u_xlat25;
  let x_926 : f32 = u_xlat25;
  u_xlat25 = (x_925 * x_926);
  let x_928 : f32 = u_xlat14;
  let x_929 : f32 = u_xlat25;
  u_xlat14 = (x_928 * x_929);
  let x_931 : f32 = u_xlat24;
  let x_932 : f32 = u_xlat14;
  u_xlat24 = ((x_931 * x_932) + 1.0f);
  let x_935 : f32 = u_xlat24;
  let x_937 : f32 = u_xlat3.x;
  u_xlat24 = (x_935 * x_937);
  let x_939 : f32 = u_xlat35;
  let x_940 : f32 = u_xlat24;
  u_xlat24 = (x_939 * x_940);
  let x_942 : f32 = u_xlat33;
  let x_943 : f32 = u_xlat33;
  u_xlat33 = (x_942 * x_943);
  let x_945 : f32 = u_xlat33;
  u_xlat33 = max(x_945, 0.002f);
  let x_948 : f32 = u_xlat33;
  u_xlat3.x = (-(x_948) + 1.0f);
  let x_952 : f32 = u_xlat34;
  let x_955 : f32 = u_xlat3.x;
  let x_957 : f32 = u_xlat33;
  u_xlat14 = ((abs(x_952) * x_955) + x_957);
  let x_959 : f32 = u_xlat35;
  let x_961 : f32 = u_xlat3.x;
  let x_963 : f32 = u_xlat33;
  u_xlat3.x = ((x_959 * x_961) + x_963);
  let x_966 : f32 = u_xlat34;
  let x_969 : f32 = u_xlat3.x;
  u_xlat34 = (abs(x_966) * x_969);
  let x_971 : f32 = u_xlat35;
  let x_972 : f32 = u_xlat14;
  let x_974 : f32 = u_xlat34;
  u_xlat34 = ((x_971 * x_972) + x_974);
  let x_976 : f32 = u_xlat34;
  u_xlat34 = (x_976 + 0.00001f);
  let x_979 : f32 = u_xlat34;
  u_xlat34 = (0.5f / x_979);
  let x_981 : f32 = u_xlat33;
  let x_982 : f32 = u_xlat33;
  u_xlat33 = (x_981 * x_982);
  let x_985 : f32 = u_xlat2.x;
  let x_986 : f32 = u_xlat33;
  let x_989 : f32 = u_xlat2.x;
  u_xlat3.x = ((x_985 * x_986) + -(x_989));
  let x_994 : f32 = u_xlat3.x;
  let x_996 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_994 * x_996) + 1.0f);
  let x_1000 : f32 = u_xlat33;
  u_xlat33 = (x_1000 * 0.318309873f);
  let x_1004 : f32 = u_xlat2.x;
  let x_1006 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_1004 * x_1006) + 0.0000001f);
  let x_1011 : f32 = u_xlat33;
  let x_1013 : f32 = u_xlat2.x;
  u_xlat33 = (x_1011 / x_1013);
  let x_1015 : f32 = u_xlat33;
  let x_1016 : f32 = u_xlat34;
  u_xlat33 = (x_1015 * x_1016);
  let x_1018 : f32 = u_xlat35;
  let x_1019 : f32 = u_xlat33;
  u_xlat33 = (x_1018 * x_1019);
  let x_1021 : f32 = u_xlat33;
  u_xlat33 = (x_1021 * 3.141592741f);
  let x_1024 : f32 = u_xlat33;
  u_xlat33 = max(x_1024, 0.0f);
  let x_1026 : vec3<f32> = u_xlat0;
  let x_1027 : vec3<f32> = u_xlat0;
  u_xlat34 = dot(x_1026, x_1027);
  let x_1029 : f32 = u_xlat34;
  u_xlatb34 = !((x_1029 == 0.0f));
  let x_1031 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_1031);
  let x_1033 : f32 = u_xlat33;
  let x_1034 : f32 = u_xlat34;
  u_xlat33 = (x_1033 * x_1034);
  let x_1036 : f32 = u_xlat24;
  let x_1038 : vec4<f32> = u_xlat6;
  let x_1040 : vec3<f32> = (vec3<f32>(x_1036, x_1036, x_1036) * vec3<f32>(x_1038.x, x_1038.y, x_1038.z));
  let x_1041 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1040.x, x_1041.y, x_1040.y, x_1040.z);
  let x_1043 : vec4<f32> = u_xlat6;
  let x_1045 : f32 = u_xlat33;
  u_xlat3 = (vec3<f32>(x_1043.x, x_1043.y, x_1043.z) * vec3<f32>(x_1045, x_1045, x_1045));
  let x_1049 : f32 = u_xlat13.x;
  u_xlat33 = (-(x_1049) + 1.0f);
  let x_1052 : f32 = u_xlat33;
  let x_1053 : f32 = u_xlat33;
  u_xlat34 = (x_1052 * x_1053);
  let x_1055 : f32 = u_xlat34;
  let x_1056 : f32 = u_xlat34;
  u_xlat34 = (x_1055 * x_1056);
  let x_1058 : f32 = u_xlat33;
  let x_1059 : f32 = u_xlat34;
  u_xlat33 = (x_1058 * x_1059);
  let x_1061 : vec3<f32> = u_xlat0;
  let x_1064 : vec3<f32> = (-(x_1061) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1065 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1064.x, x_1064.y, x_1064.z, x_1065.w);
  let x_1067 : vec4<f32> = u_xlat4;
  let x_1069 : f32 = u_xlat33;
  let x_1072 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_1067.x, x_1067.y, x_1067.z) * vec3<f32>(x_1069, x_1069, x_1069)) + x_1072);
  let x_1074 : vec3<f32> = u_xlat0;
  let x_1075 : vec3<f32> = u_xlat3;
  u_xlat0 = (x_1074 * x_1075);
  let x_1077 : vec3<f32> = u_xlat1;
  let x_1078 : vec4<f32> = u_xlat2;
  let x_1081 : vec3<f32> = u_xlat0;
  u_xlat0 = ((x_1077 * vec3<f32>(x_1078.x, x_1078.z, x_1078.w)) + x_1081);
  let x_1084 : f32 = vs_TEXCOORD1.w;
  let x_1086 : f32 = x_36.x_ProjectionParams.y;
  u_xlat33 = (x_1084 / x_1086);
  let x_1088 : f32 = u_xlat33;
  u_xlat33 = (-(x_1088) + 1.0f);
  let x_1091 : f32 = u_xlat33;
  let x_1093 : f32 = x_36.x_ProjectionParams.z;
  u_xlat33 = (x_1091 * x_1093);
  let x_1095 : f32 = u_xlat33;
  u_xlat33 = max(x_1095, 0.0f);
  let x_1097 : f32 = u_xlat33;
  let x_1100 : f32 = x_36.unity_FogParams.x;
  u_xlat33 = (x_1097 * x_1100);
  let x_1102 : f32 = u_xlat33;
  let x_1103 : f32 = u_xlat33;
  u_xlat33 = (x_1102 * -(x_1103));
  let x_1106 : f32 = u_xlat33;
  u_xlat33 = exp2(x_1106);
  let x_1110 : vec3<f32> = u_xlat0;
  let x_1111 : f32 = u_xlat33;
  let x_1113 : vec3<f32> = (x_1110 * vec3<f32>(x_1111, x_1111, x_1111));
  let x_1114 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1113.x, x_1113.y, x_1113.z, x_1114.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

