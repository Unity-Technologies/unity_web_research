struct CB1 {
  InvLowResolution : vec4<f32>,
  InvHighResolution : vec4<f32>,
  AdditionalParams : vec4<f32>,
}

struct S {
  value : array<u32, 1u>,
}

struct S_1 {
  value : array<u32, 1u>,
}

struct S_2 {
  value : array<u32, 1u>,
}

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> gl_GlobalInvocationID : vec3<u32>;

@group(1) @binding(0) var<uniform> x_65 : CB1;

@group(0) @binding(2) var LoResAO1 : texture_2d<f32>;

@group(0) @binding(7) var samplerLoResAO1 : sampler;

@group(0) @binding(3) var LoResAO2 : texture_2d<f32>;

@group(0) @binding(8) var samplerLoResAO2 : sampler;

var<workgroup> TGSM1 : array<S, 256u>;

@group(0) @binding(0) var LoResDB : texture_2d<f32>;

@group(0) @binding(5) var samplerLoResDB : sampler;

var<workgroup> TGSM0 : array<S_1, 256u>;

var<private> gl_LocalInvocationIndex : u32;

var<workgroup> TGSM2 : array<S_2, 256u>;

@group(0) @binding(1) var HiResDB : texture_2d<f32>;

@group(0) @binding(6) var samplerHiResDB : sampler;

@group(0) @binding(4) var AoResult_origX0X : texture_storage_2d<r32float, write>;

fn main_1() {
  var u_xlati0 : i32;
  var u_xlati8 : vec3<i32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlati24 : i32;
  var u_xlati17 : vec2<i32>;
  var u_xlatb0 : vec2<bool>;
  var u_xlatu0 : u32;
  var u_xlatu1 : u32;
  var u_xlati16 : i32;
  var u_xlat16 : vec2<f32>;
  var u_xlati1 : vec4<i32>;
  var u_xlat24 : f32;
  var u_xlat10 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlati3 : vec2<i32>;
  var u_xlat26 : f32;
  var u_xlat19 : f32;
  var u_xlat27 : f32;
  var u_xlat4 : f32;
  var u_xlat12 : f32;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat11 : f32;
  var u_xlat20 : f32;
  var u_xlat28 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat13 : f32;
  var u_xlat21 : f32;
  var u_xlatb11 : bool;
  var u_xlatb27 : bool;
  var u_xlatb4 : bool;
  var u_xlatb17 : bool;
  var u_xlatb25 : bool;
  var u_xlatb3 : bool;
  var x_513 : f32;
  var x_523 : f32;
  var u_xlati11 : i32;
  var u_xlat7 : f32;
  var x_542 : f32;
  var u_xlat6 : f32;
  var x_553 : f32;
  var x_564 : f32;
  var x_611 : f32;
  var u_xlatb24 : bool;
  var x_628 : f32;
  var x_638 : f32;
  var x_685 : f32;
  var x_702 : f32;
  var u_xlat9 : f32;
  var u_xlati2 : vec4<i32>;
  var u_xlatb2 : bool;
  var u_xlatb10 : bool;
  var u_xlatb18 : vec2<bool>;
  var x_1021 : f32;
  var x_1031 : f32;
  var x_1051 : f32;
  var x_1062 : f32;
  var x_1101 : f32;
  var u_xlatb1 : bool;
  var x_1127 : f32;
  var u_xlat0 : vec4<f32>;
  var u_xlatu2 : vec4<u32>;
  var u_xlati4 : vec4<i32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_16 : u32 = gl_LocalInvocationID.x;
  u_xlati0 = (bitcast<i32>(x_16) << bitcast<u32>(1i));
  let x_22 : u32 = gl_LocalInvocationID.y;
  let x_26 : i32 = u_xlati0;
  u_xlati0 = ((bitcast<i32>(x_22) * 32i) + x_26);
  let x_32 : vec3<u32> = gl_LocalInvocationID;
  let x_37 : vec3<u32> = gl_GlobalInvocationID;
  let x_40 : vec2<i32> = (bitcast<vec2<i32>>(vec2<u32>(x_32.x, x_32.y)) + bitcast<vec2<i32>>(vec2<u32>(x_37.x, x_37.y)));
  let x_41 : vec3<i32> = u_xlati8;
  u_xlati8 = vec3<i32>(x_40.x, x_40.y, x_41.z);
  let x_43 : vec3<i32> = u_xlati8;
  let x_47 : vec2<i32> = (vec2<i32>(x_43.x, x_43.y) + vec2<i32>(-2i, -2i));
  let x_48 : vec3<i32> = u_xlati8;
  u_xlati8 = vec3<i32>(x_47.x, x_47.y, x_48.z);
  let x_54 : vec3<i32> = u_xlati8;
  let x_57 : vec2<f32> = vec2<f32>(vec2<i32>(x_54.x, x_54.y));
  let x_58 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_57.x, x_57.y, x_58.z);
  let x_60 : vec3<f32> = u_xlat8;
  let x_69 : vec4<f32> = x_65.InvLowResolution;
  let x_71 : vec2<f32> = (vec2<f32>(x_60.x, x_60.y) * vec2<f32>(x_69.x, x_69.y));
  let x_72 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_71.x, x_71.y, x_72.z);
  let x_86 : vec3<f32> = u_xlat8;
  let x_88 : vec4<f32> = textureGather(0i, LoResAO1, samplerLoResAO1, vec2<f32>(x_86.x, x_86.y));
  u_xlat1 = x_88;
  let x_95 : vec3<f32> = u_xlat8;
  let x_97 : vec4<f32> = textureGather(0i, LoResAO2, samplerLoResAO2, vec2<f32>(x_95.x, x_95.y));
  u_xlat2 = x_97;
  let x_98 : vec4<f32> = u_xlat1;
  let x_99 : vec4<f32> = u_xlat2;
  u_xlat1 = min(x_98, x_99);
  let x_107 : i32 = u_xlati0;
  let x_111 : f32 = u_xlat1.w;
  TGSM1[x_107].value[0i] = bitcast<u32>(x_111);
  let x_116 : i32 = u_xlati0;
  u_xlati24 = (x_116 + 1i);
  let x_118 : i32 = u_xlati24;
  let x_121 : f32 = u_xlat1.z;
  TGSM1[x_118].value[0i] = bitcast<u32>(x_121);
  let x_126 : i32 = u_xlati0;
  u_xlati17 = (vec2<i32>(x_126, x_126) + vec2<i32>(16i, 17i));
  let x_133 : i32 = u_xlati17.x;
  let x_135 : f32 = u_xlat1.x;
  TGSM1[x_133].value[0i] = bitcast<u32>(x_135);
  let x_139 : i32 = u_xlati17.y;
  let x_141 : f32 = u_xlat1.y;
  TGSM1[x_139].value[0i] = bitcast<u32>(x_141);
  let x_149 : vec3<f32> = u_xlat8;
  let x_151 : vec4<f32> = textureGather(0i, LoResDB, samplerLoResDB, vec2<f32>(x_149.x, x_149.y));
  u_xlat2 = x_151;
  let x_154 : vec4<f32> = u_xlat2;
  u_xlat2 = (vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f) / x_154);
  let x_160 : i32 = u_xlati0;
  let x_162 : f32 = u_xlat2.w;
  TGSM0[x_160].value[0i] = bitcast<u32>(x_162);
  let x_165 : i32 = u_xlati24;
  let x_167 : f32 = u_xlat2.z;
  TGSM0[x_165].value[0i] = bitcast<u32>(x_167);
  let x_171 : i32 = u_xlati17.x;
  let x_173 : f32 = u_xlat2.x;
  TGSM0[x_171].value[0i] = bitcast<u32>(x_173);
  let x_177 : i32 = u_xlati17.y;
  let x_179 : f32 = u_xlat2.y;
  TGSM0[x_177].value[0i] = bitcast<u32>(x_179);
  workgroupBarrier();
  let x_188 : u32 = gl_LocalInvocationIndex;
  let x_189 : u32 = gl_LocalInvocationIndex;
  let x_190 : u32 = gl_LocalInvocationIndex;
  let x_191 : u32 = gl_LocalInvocationIndex;
  let x_198 : vec4<bool> = (vec4<u32>(x_188, x_189, x_190, x_191) < vec4<u32>(39u, 45u, 0u, 0u));
  u_xlatb0 = vec2<bool>(x_198.x, x_198.y);
  let x_202 : bool = u_xlatb0.x;
  if (x_202) {
    let x_207 : u32 = gl_LocalInvocationIndex;
    u_xlatu0 = (x_207 / 3u);
    let x_210 : u32 = gl_LocalInvocationIndex;
    u_xlatu1 = (x_210 % 3u);
    let x_213 : u32 = u_xlatu1;
    u_xlati16 = (bitcast<i32>(x_213) * 3i);
    let x_217 : u32 = u_xlatu0;
    let x_220 : i32 = u_xlati16;
    u_xlati0 = ((bitcast<i32>(x_217) * 16i) + x_220);
    let x_224 : i32 = u_xlati0;
    let x_226 : u32 = TGSM1[x_224].value[0i];
    u_xlat16.x = bitcast<f32>(x_226);
    let x_232 : i32 = u_xlati0;
    u_xlati1 = (vec4<i32>(x_232, x_232, x_232, x_232) + vec4<i32>(1i, 2i, 3i, 4i));
    let x_240 : i32 = u_xlati1.x;
    let x_242 : u32 = TGSM1[x_240].value[0i];
    u_xlat24 = bitcast<f32>(x_242);
    let x_245 : i32 = u_xlati1.y;
    let x_247 : u32 = TGSM1[x_245].value[0i];
    u_xlat2.x = bitcast<f32>(x_247);
    let x_252 : i32 = u_xlati1.z;
    let x_254 : u32 = TGSM1[x_252].value[0i];
    u_xlat10 = bitcast<f32>(x_254);
    let x_258 : i32 = u_xlati1.w;
    let x_260 : u32 = TGSM1[x_258].value[0i];
    u_xlat18.x = bitcast<f32>(x_260);
    let x_264 : i32 = u_xlati0;
    u_xlati3 = (vec2<i32>(x_264, x_264) + vec2<i32>(5i, 6i));
    let x_272 : i32 = u_xlati3.x;
    let x_274 : u32 = TGSM1[x_272].value[0i];
    u_xlat26 = bitcast<f32>(x_274);
    let x_278 : i32 = u_xlati3.y;
    let x_280 : u32 = TGSM1[x_278].value[0i];
    u_xlat19 = bitcast<f32>(x_280);
    let x_283 : i32 = u_xlati0;
    let x_285 : u32 = TGSM0[x_283].value[0i];
    u_xlat27 = bitcast<f32>(x_285);
    let x_289 : i32 = u_xlati1.x;
    let x_291 : u32 = TGSM0[x_289].value[0i];
    u_xlat4 = bitcast<f32>(x_291);
    let x_295 : i32 = u_xlati1.y;
    let x_297 : u32 = TGSM0[x_295].value[0i];
    u_xlat12 = bitcast<f32>(x_297);
    let x_301 : i32 = u_xlati1.z;
    let x_303 : u32 = TGSM0[x_301].value[0i];
    u_xlat17 = bitcast<f32>(x_303);
    let x_307 : i32 = u_xlati1.w;
    let x_309 : u32 = TGSM0[x_307].value[0i];
    u_xlat25 = bitcast<f32>(x_309);
    let x_313 : i32 = u_xlati3.x;
    let x_315 : u32 = TGSM0[x_313].value[0i];
    u_xlat3.x = bitcast<f32>(x_315);
    let x_320 : i32 = u_xlati3.y;
    let x_322 : u32 = TGSM0[x_320].value[0i];
    u_xlat11 = bitcast<f32>(x_322);
    let x_324 : f32 = u_xlat27;
    let x_326 : f32 = u_xlat4;
    u_xlat27 = (-(x_324) + x_326);
    let x_328 : f32 = u_xlat4;
    let x_330 : f32 = u_xlat12;
    u_xlat4 = (-(x_328) + x_330);
    let x_332 : f32 = u_xlat12;
    let x_334 : f32 = u_xlat17;
    u_xlat12 = (-(x_332) + x_334);
    let x_336 : f32 = u_xlat17;
    let x_338 : f32 = u_xlat25;
    u_xlat17 = (-(x_336) + x_338);
    let x_340 : f32 = u_xlat25;
    let x_343 : f32 = u_xlat3.x;
    u_xlat25 = (-(x_340) + x_343);
    let x_346 : f32 = u_xlat3.x;
    let x_348 : f32 = u_xlat11;
    u_xlat3.x = (-(x_346) + x_348);
    let x_351 : f32 = u_xlat27;
    let x_352 : f32 = u_xlat27;
    let x_356 : f32 = x_65.AdditionalParams.y;
    u_xlat11 = ((x_351 * x_352) + x_356);
    let x_359 : f32 = u_xlat4;
    let x_360 : f32 = u_xlat4;
    let x_363 : f32 = x_65.AdditionalParams.y;
    u_xlat20 = ((x_359 * x_360) + x_363);
    let x_366 : f32 = u_xlat12;
    let x_367 : f32 = u_xlat12;
    let x_370 : f32 = x_65.AdditionalParams.y;
    u_xlat28 = ((x_366 * x_367) + x_370);
    let x_373 : f32 = u_xlat17;
    let x_374 : f32 = u_xlat17;
    let x_377 : f32 = x_65.AdditionalParams.y;
    u_xlat5.x = ((x_373 * x_374) + x_377);
    let x_381 : f32 = u_xlat25;
    let x_382 : f32 = u_xlat25;
    let x_385 : f32 = x_65.AdditionalParams.y;
    u_xlat13 = ((x_381 * x_382) + x_385);
    let x_389 : f32 = u_xlat3.x;
    let x_391 : f32 = u_xlat3.x;
    let x_394 : f32 = x_65.AdditionalParams.y;
    u_xlat21 = ((x_389 * x_391) + x_394);
    let x_396 : f32 = u_xlat27;
    let x_397 : f32 = u_xlat4;
    let x_400 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_396 * x_397) + x_400);
    let x_402 : f32 = u_xlat27;
    let x_403 : f32 = u_xlat27;
    u_xlat27 = (x_402 * x_403);
    let x_405 : f32 = u_xlat11;
    let x_406 : f32 = u_xlat20;
    u_xlat11 = (x_405 * x_406);
    let x_408 : f32 = u_xlat11;
    let x_410 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_408 * x_410);
    let x_413 : f32 = u_xlat11;
    let x_414 : f32 = u_xlat27;
    u_xlatb11 = (x_413 < x_414);
    let x_416 : f32 = u_xlat4;
    let x_417 : f32 = u_xlat12;
    let x_420 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_416 * x_417) + x_420);
    let x_422 : f32 = u_xlat27;
    let x_423 : f32 = u_xlat27;
    u_xlat27 = (x_422 * x_423);
    let x_425 : f32 = u_xlat28;
    let x_426 : f32 = u_xlat20;
    u_xlat4 = (x_425 * x_426);
    let x_428 : f32 = u_xlat4;
    let x_430 : f32 = x_65.AdditionalParams.z;
    u_xlat4 = (x_428 * x_430);
    let x_433 : f32 = u_xlat4;
    let x_434 : f32 = u_xlat27;
    u_xlatb27 = (x_433 < x_434);
    let x_436 : f32 = u_xlat12;
    let x_437 : f32 = u_xlat17;
    let x_440 : f32 = x_65.AdditionalParams.y;
    u_xlat4 = ((x_436 * x_437) + x_440);
    let x_442 : f32 = u_xlat4;
    let x_443 : f32 = u_xlat4;
    u_xlat4 = (x_442 * x_443);
    let x_445 : f32 = u_xlat28;
    let x_447 : f32 = u_xlat5.x;
    u_xlat12 = (x_445 * x_447);
    let x_449 : f32 = u_xlat12;
    let x_451 : f32 = x_65.AdditionalParams.z;
    u_xlat12 = (x_449 * x_451);
    let x_454 : f32 = u_xlat12;
    let x_455 : f32 = u_xlat4;
    u_xlatb4 = (x_454 < x_455);
    let x_457 : f32 = u_xlat17;
    let x_458 : f32 = u_xlat25;
    let x_461 : f32 = x_65.AdditionalParams.y;
    u_xlat17 = ((x_457 * x_458) + x_461);
    let x_463 : f32 = u_xlat17;
    let x_464 : f32 = u_xlat17;
    u_xlat17 = (x_463 * x_464);
    let x_466 : f32 = u_xlat13;
    let x_468 : f32 = u_xlat5.x;
    u_xlat12 = (x_466 * x_468);
    let x_470 : f32 = u_xlat12;
    let x_472 : f32 = x_65.AdditionalParams.z;
    u_xlat12 = (x_470 * x_472);
    let x_475 : f32 = u_xlat12;
    let x_476 : f32 = u_xlat17;
    u_xlatb17 = (x_475 < x_476);
    let x_478 : f32 = u_xlat25;
    let x_480 : f32 = u_xlat3.x;
    let x_483 : f32 = x_65.AdditionalParams.y;
    u_xlat25 = ((x_478 * x_480) + x_483);
    let x_485 : f32 = u_xlat25;
    let x_486 : f32 = u_xlat25;
    u_xlat25 = (x_485 * x_486);
    let x_488 : f32 = u_xlat21;
    let x_489 : f32 = u_xlat13;
    u_xlat3.x = (x_488 * x_489);
    let x_493 : f32 = u_xlat3.x;
    let x_495 : f32 = x_65.AdditionalParams.z;
    u_xlat3.x = (x_493 * x_495);
    let x_500 : f32 = u_xlat3.x;
    let x_501 : f32 = u_xlat25;
    u_xlatb25 = (x_500 < x_501);
    let x_504 : bool = u_xlatb27;
    let x_505 : bool = u_xlatb11;
    u_xlatb3 = (x_504 | x_505);
    let x_507 : bool = u_xlatb3;
    u_xlati3.x = select(0i, 1i, x_507);
    let x_511 : i32 = u_xlati3.x;
    if ((x_511 != 0i)) {
      let x_516 : f32 = u_xlat24;
      x_513 = x_516;
    } else {
      let x_519 : f32 = u_xlat2.x;
      x_513 = x_519;
    }
    let x_520 : f32 = x_513;
    u_xlat3.x = x_520;
    let x_522 : bool = u_xlatb11;
    if (x_522) {
      let x_527 : f32 = u_xlat16.x;
      x_523 = x_527;
    } else {
      let x_530 : f32 = u_xlat3.x;
      x_523 = x_530;
    }
    let x_531 : f32 = x_523;
    u_xlat16.x = x_531;
    let x_533 : bool = u_xlatb27;
    let x_534 : bool = u_xlatb4;
    u_xlatb11 = (x_533 | x_534);
    let x_537 : bool = u_xlatb11;
    u_xlati11 = select(0i, 1i, x_537);
    let x_540 : i32 = u_xlati11;
    if ((x_540 != 0i)) {
      let x_546 : f32 = u_xlat2.x;
      x_542 = x_546;
    } else {
      let x_548 : f32 = u_xlat10;
      x_542 = x_548;
    }
    let x_549 : f32 = x_542;
    u_xlat7 = x_549;
    let x_551 : i32 = u_xlati11;
    if ((x_551 != 0i)) {
      let x_556 : f32 = u_xlat10;
      x_553 = x_556;
    } else {
      let x_559 : f32 = u_xlat2.x;
      x_553 = x_559;
    }
    let x_560 : f32 = x_553;
    u_xlat6 = x_560;
    let x_561 : f32 = u_xlat7;
    u_xlat5.x = x_561;
    let x_563 : bool = u_xlatb4;
    if (x_563) {
      let x_568 : f32 = u_xlat18.x;
      x_564 = x_568;
    } else {
      let x_570 : f32 = u_xlat6;
      x_564 = x_570;
    }
    let x_571 : f32 = x_564;
    u_xlat11 = x_571;
    let x_573 : f32 = u_xlat16.x;
    let x_574 : f32 = u_xlat11;
    u_xlat16.x = (x_573 + x_574);
    let x_578 : f32 = u_xlat16.x;
    let x_582 : f32 = u_xlat3.x;
    u_xlat16.x = ((x_578 * 0.5f) + x_582);
    let x_586 : f32 = u_xlat2.x;
    let x_588 : f32 = u_xlat16.x;
    u_xlat16.x = (x_586 + x_588);
    let x_591 : f32 = u_xlat6;
    let x_593 : f32 = u_xlat16.x;
    u_xlat16.x = (x_591 + x_593);
    let x_597 : f32 = u_xlat16.x;
    u_xlat16.x = (x_597 * 0.25f);
    let x_605 : i32 = u_xlati0;
    let x_607 : f32 = u_xlat16.x;
    TGSM2[x_605].value[0i] = bitcast<u32>(x_607);
    let x_610 : bool = u_xlatb27;
    if (x_610) {
      let x_614 : f32 = u_xlat24;
      x_611 = x_614;
    } else {
      let x_617 : f32 = u_xlat5.x;
      x_611 = x_617;
    }
    let x_618 : f32 = x_611;
    u_xlat16.x = x_618;
    let x_621 : bool = u_xlatb4;
    let x_622 : bool = u_xlatb17;
    u_xlatb24 = (x_621 | x_622);
    let x_624 : bool = u_xlatb24;
    u_xlati24 = select(0i, 1i, x_624);
    let x_626 : i32 = u_xlati24;
    if ((x_626 != 0i)) {
      let x_631 : f32 = u_xlat10;
      x_628 = x_631;
    } else {
      let x_634 : f32 = u_xlat18.x;
      x_628 = x_634;
    }
    let x_635 : f32 = x_628;
    u_xlat7 = x_635;
    let x_636 : i32 = u_xlati24;
    if ((x_636 != 0i)) {
      let x_642 : f32 = u_xlat18.x;
      x_638 = x_642;
    } else {
      let x_644 : f32 = u_xlat10;
      x_638 = x_644;
    }
    let x_645 : f32 = x_638;
    u_xlat6 = x_645;
    let x_646 : f32 = u_xlat7;
    u_xlat3.x = x_646;
    let x_648 : bool = u_xlatb17;
    let x_649 : f32 = u_xlat26;
    let x_650 : f32 = u_xlat6;
    u_xlat24 = select(x_650, x_649, x_648);
    let x_652 : f32 = u_xlat24;
    let x_654 : f32 = u_xlat16.x;
    u_xlat16.x = (x_652 + x_654);
    let x_658 : f32 = u_xlat16.x;
    let x_661 : f32 = u_xlat5.x;
    u_xlat16.x = ((x_658 * 0.5f) + x_661);
    let x_664 : f32 = u_xlat10;
    let x_666 : f32 = u_xlat16.x;
    u_xlat16.x = (x_664 + x_666);
    let x_669 : f32 = u_xlat6;
    let x_671 : f32 = u_xlat16.x;
    u_xlat16.x = (x_669 + x_671);
    let x_675 : f32 = u_xlat16.x;
    u_xlat16.x = (x_675 * 0.25f);
    let x_679 : i32 = u_xlati1.x;
    let x_681 : f32 = u_xlat16.x;
    TGSM2[x_679].value[0i] = bitcast<u32>(x_681);
    let x_684 : bool = u_xlatb4;
    if (x_684) {
      let x_689 : f32 = u_xlat2.x;
      x_685 = x_689;
    } else {
      let x_692 : f32 = u_xlat3.x;
      x_685 = x_692;
    }
    let x_693 : f32 = x_685;
    u_xlat16.x = x_693;
    let x_695 : bool = u_xlatb17;
    let x_696 : bool = u_xlatb25;
    u_xlatb24 = (x_695 | x_696);
    let x_698 : bool = u_xlatb24;
    u_xlati24 = select(0i, 1i, x_698);
    let x_700 : i32 = u_xlati24;
    if ((x_700 != 0i)) {
      let x_705 : f32 = u_xlat26;
      x_702 = x_705;
    } else {
      let x_708 : f32 = u_xlat18.x;
      x_702 = x_708;
    }
    let x_709 : f32 = x_702;
    u_xlat24 = x_709;
    let x_710 : bool = u_xlatb25;
    let x_711 : f32 = u_xlat19;
    let x_712 : f32 = u_xlat24;
    u_xlat1.x = select(x_712, x_711, x_710);
    let x_716 : f32 = u_xlat16.x;
    let x_718 : f32 = u_xlat1.x;
    u_xlat16.x = (x_716 + x_718);
    let x_722 : f32 = u_xlat16.x;
    let x_725 : f32 = u_xlat3.x;
    u_xlat16.x = ((x_722 * 0.5f) + x_725);
    let x_729 : f32 = u_xlat18.x;
    let x_731 : f32 = u_xlat16.x;
    u_xlat16.x = (x_729 + x_731);
    let x_734 : f32 = u_xlat24;
    let x_736 : f32 = u_xlat16.x;
    u_xlat16.x = (x_734 + x_736);
    let x_740 : f32 = u_xlat16.x;
    u_xlat16.x = (x_740 * 0.25f);
    let x_744 : i32 = u_xlati1.y;
    let x_746 : f32 = u_xlat16.x;
    TGSM2[x_744].value[0i] = bitcast<u32>(x_746);
  }
  workgroupBarrier();
  let x_750 : bool = u_xlatb0.y;
  if (x_750) {
    let x_753 : u32 = gl_LocalInvocationIndex;
    u_xlatu0 = (x_753 / 9u);
    let x_756 : u32 = gl_LocalInvocationIndex;
    u_xlatu1 = (x_756 % 9u);
    let x_758 : u32 = u_xlatu0;
    let x_761 : u32 = u_xlatu1;
    u_xlati0 = ((bitcast<i32>(x_758) * 32i) + bitcast<i32>(x_761));
    let x_764 : i32 = u_xlati0;
    let x_766 : u32 = TGSM2[x_764].value[0i];
    u_xlat8.x = bitcast<f32>(x_766);
    let x_769 : i32 = u_xlati0;
    u_xlati16 = (x_769 + 16i);
    let x_771 : i32 = u_xlati16;
    let x_773 : u32 = TGSM2[x_771].value[0i];
    u_xlat24 = bitcast<f32>(x_773);
    let x_775 : i32 = u_xlati0;
    u_xlati1 = (vec4<i32>(x_775, x_775, x_775, x_775) + vec4<i32>(32i, 48i, 64i, 80i));
    let x_783 : i32 = u_xlati1.x;
    let x_785 : u32 = TGSM2[x_783].value[0i];
    u_xlat1.x = bitcast<f32>(x_785);
    let x_790 : i32 = u_xlati1.y;
    let x_792 : u32 = TGSM2[x_790].value[0i];
    u_xlat9 = bitcast<f32>(x_792);
    let x_795 : i32 = u_xlati1.z;
    let x_797 : u32 = TGSM2[x_795].value[0i];
    u_xlat17 = bitcast<f32>(x_797);
    let x_800 : i32 = u_xlati1.w;
    let x_802 : u32 = TGSM2[x_800].value[0i];
    u_xlat25 = bitcast<f32>(x_802);
    let x_805 : i32 = u_xlati0;
    u_xlati2 = (vec4<i32>(x_805, x_805, x_805, x_805) + vec4<i32>(2i, 18i, 34i, 50i));
    let x_813 : i32 = u_xlati2.x;
    let x_815 : u32 = TGSM0[x_813].value[0i];
    u_xlat2.x = bitcast<f32>(x_815);
    let x_819 : i32 = u_xlati2.y;
    let x_821 : u32 = TGSM0[x_819].value[0i];
    u_xlat10 = bitcast<f32>(x_821);
    let x_824 : i32 = u_xlati2.z;
    let x_826 : u32 = TGSM0[x_824].value[0i];
    u_xlat18.x = bitcast<f32>(x_826);
    let x_830 : i32 = u_xlati2.w;
    let x_832 : u32 = TGSM0[x_830].value[0i];
    u_xlat26 = bitcast<f32>(x_832);
    let x_834 : i32 = u_xlati0;
    u_xlati3 = (vec2<i32>(x_834, x_834) + vec2<i32>(66i, 82i));
    let x_841 : i32 = u_xlati3.x;
    let x_843 : u32 = TGSM0[x_841].value[0i];
    u_xlat3.x = bitcast<f32>(x_843);
    let x_847 : i32 = u_xlati3.y;
    let x_849 : u32 = TGSM0[x_847].value[0i];
    u_xlat11 = bitcast<f32>(x_849);
    let x_852 : f32 = u_xlat2.x;
    let x_854 : f32 = u_xlat10;
    u_xlat2.x = (-(x_852) + x_854);
    let x_857 : f32 = u_xlat10;
    let x_860 : f32 = u_xlat18.x;
    u_xlat10 = (-(x_857) + x_860);
    let x_863 : f32 = u_xlat18.x;
    let x_865 : f32 = u_xlat26;
    u_xlat18.x = (-(x_863) + x_865);
    let x_868 : f32 = u_xlat26;
    let x_871 : f32 = u_xlat3.x;
    u_xlat26 = (-(x_868) + x_871);
    let x_874 : f32 = u_xlat3.x;
    let x_876 : f32 = u_xlat11;
    u_xlat3.x = (-(x_874) + x_876);
    let x_880 : f32 = u_xlat2.x;
    let x_882 : f32 = u_xlat2.x;
    let x_885 : f32 = x_65.AdditionalParams.y;
    u_xlat11 = ((x_880 * x_882) + x_885);
    let x_887 : f32 = u_xlat10;
    let x_888 : f32 = u_xlat10;
    let x_891 : f32 = x_65.AdditionalParams.y;
    u_xlat19 = ((x_887 * x_888) + x_891);
    let x_894 : f32 = u_xlat18.x;
    let x_896 : f32 = u_xlat18.x;
    let x_899 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_894 * x_896) + x_899);
    let x_901 : f32 = u_xlat26;
    let x_902 : f32 = u_xlat26;
    let x_905 : f32 = x_65.AdditionalParams.y;
    u_xlat4 = ((x_901 * x_902) + x_905);
    let x_908 : f32 = u_xlat3.x;
    let x_910 : f32 = u_xlat3.x;
    let x_913 : f32 = x_65.AdditionalParams.y;
    u_xlat12 = ((x_908 * x_910) + x_913);
    let x_916 : f32 = u_xlat2.x;
    let x_917 : f32 = u_xlat10;
    let x_920 : f32 = x_65.AdditionalParams.y;
    u_xlat2.x = ((x_916 * x_917) + x_920);
    let x_924 : f32 = u_xlat2.x;
    let x_926 : f32 = u_xlat2.x;
    u_xlat2.x = (x_924 * x_926);
    let x_929 : f32 = u_xlat19;
    let x_930 : f32 = u_xlat11;
    u_xlat11 = (x_929 * x_930);
    let x_932 : f32 = u_xlat11;
    let x_934 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_932 * x_934);
    let x_937 : f32 = u_xlat11;
    let x_939 : f32 = u_xlat2.x;
    u_xlatb2 = (x_937 < x_939);
    let x_941 : f32 = u_xlat10;
    let x_943 : f32 = u_xlat18.x;
    let x_946 : f32 = x_65.AdditionalParams.y;
    u_xlat10 = ((x_941 * x_943) + x_946);
    let x_948 : f32 = u_xlat10;
    let x_949 : f32 = u_xlat10;
    u_xlat10 = (x_948 * x_949);
    let x_951 : f32 = u_xlat27;
    let x_952 : f32 = u_xlat19;
    u_xlat11 = (x_951 * x_952);
    let x_954 : f32 = u_xlat11;
    let x_956 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_954 * x_956);
    let x_959 : f32 = u_xlat11;
    let x_960 : f32 = u_xlat10;
    u_xlatb10 = (x_959 < x_960);
    let x_963 : f32 = u_xlat18.x;
    let x_964 : f32 = u_xlat26;
    let x_967 : f32 = x_65.AdditionalParams.y;
    u_xlat18.x = ((x_963 * x_964) + x_967);
    let x_971 : f32 = u_xlat18.x;
    let x_973 : f32 = u_xlat18.x;
    u_xlat18.x = (x_971 * x_973);
    let x_976 : f32 = u_xlat27;
    let x_977 : f32 = u_xlat4;
    u_xlat11 = (x_976 * x_977);
    let x_979 : f32 = u_xlat11;
    let x_981 : f32 = x_65.AdditionalParams.z;
    u_xlat3.y = (x_979 * x_981);
    let x_984 : f32 = u_xlat26;
    let x_986 : f32 = u_xlat3.x;
    let x_989 : f32 = x_65.AdditionalParams.y;
    u_xlat26 = ((x_984 * x_986) + x_989);
    let x_991 : f32 = u_xlat26;
    let x_992 : f32 = u_xlat26;
    u_xlat18.y = (x_991 * x_992);
    let x_995 : f32 = u_xlat12;
    let x_996 : f32 = u_xlat4;
    u_xlat3.x = (x_995 * x_996);
    let x_1000 : f32 = u_xlat3.x;
    let x_1002 : f32 = x_65.AdditionalParams.z;
    u_xlat3.x = (x_1000 * x_1002);
    let x_1006 : vec4<f32> = u_xlat3;
    let x_1008 : vec2<f32> = u_xlat18;
    let x_1010 : vec4<bool> = (vec4<f32>(x_1006.y, x_1006.x, x_1006.y, x_1006.x) < vec4<f32>(x_1008.x, x_1008.y, x_1008.x, x_1008.y));
    u_xlatb18 = vec2<bool>(x_1010.x, x_1010.y);
    let x_1012 : bool = u_xlatb10;
    let x_1013 : bool = u_xlatb2;
    u_xlatb3 = (x_1012 | x_1013);
    let x_1015 : bool = u_xlatb3;
    u_xlati3.x = select(0i, 1i, x_1015);
    let x_1019 : i32 = u_xlati3.x;
    if ((x_1019 != 0i)) {
      let x_1024 : f32 = u_xlat24;
      x_1021 = x_1024;
    } else {
      let x_1027 : f32 = u_xlat1.x;
      x_1021 = x_1027;
    }
    let x_1028 : f32 = x_1021;
    u_xlat3.x = x_1028;
    let x_1030 : bool = u_xlatb2;
    if (x_1030) {
      let x_1035 : f32 = u_xlat8.x;
      x_1031 = x_1035;
    } else {
      let x_1038 : f32 = u_xlat3.x;
      x_1031 = x_1038;
    }
    let x_1039 : f32 = x_1031;
    u_xlat8.x = x_1039;
    let x_1041 : bool = u_xlatb10;
    let x_1043 : bool = u_xlatb18.x;
    u_xlatb2 = (x_1041 | x_1043);
    let x_1045 : bool = u_xlatb2;
    u_xlati2.x = select(0i, 1i, x_1045);
    let x_1049 : i32 = u_xlati2.x;
    if ((x_1049 != 0i)) {
      let x_1055 : f32 = u_xlat1.x;
      x_1051 = x_1055;
    } else {
      let x_1057 : f32 = u_xlat9;
      x_1051 = x_1057;
    }
    let x_1058 : f32 = x_1051;
    u_xlat7 = x_1058;
    let x_1060 : i32 = u_xlati2.x;
    if ((x_1060 != 0i)) {
      let x_1065 : f32 = u_xlat9;
      x_1062 = x_1065;
    } else {
      let x_1068 : f32 = u_xlat1.x;
      x_1062 = x_1068;
    }
    let x_1069 : f32 = x_1062;
    u_xlat4 = x_1069;
    let x_1070 : f32 = u_xlat7;
    u_xlat2.x = x_1070;
    let x_1073 : bool = u_xlatb18.x;
    let x_1074 : f32 = u_xlat17;
    let x_1075 : f32 = u_xlat4;
    u_xlat11 = select(x_1075, x_1074, x_1073);
    let x_1078 : f32 = u_xlat8.x;
    let x_1079 : f32 = u_xlat11;
    u_xlat8.x = (x_1078 + x_1079);
    let x_1083 : f32 = u_xlat8.x;
    let x_1086 : f32 = u_xlat3.x;
    u_xlat8.x = ((x_1083 * 0.5f) + x_1086);
    let x_1090 : f32 = u_xlat1.x;
    let x_1092 : f32 = u_xlat8.x;
    u_xlat8.x = (x_1090 + x_1092);
    let x_1095 : f32 = u_xlat4;
    let x_1097 : f32 = u_xlat8.x;
    u_xlat8.x = (x_1095 + x_1097);
    let x_1100 : bool = u_xlatb10;
    if (x_1100) {
      let x_1104 : f32 = u_xlat24;
      x_1101 = x_1104;
    } else {
      let x_1107 : f32 = u_xlat2.x;
      x_1101 = x_1107;
    }
    let x_1108 : f32 = x_1101;
    u_xlat24 = x_1108;
    let x_1111 : bool = u_xlatb18.x;
    let x_1113 : bool = u_xlatb18.y;
    u_xlatb1 = (x_1111 | x_1113);
    let x_1115 : bool = u_xlatb1;
    u_xlati1.x = select(0i, 1i, x_1115);
    let x_1119 : i32 = u_xlati1.x;
    let x_1121 : f32 = u_xlat17;
    let x_1122 : f32 = u_xlat9;
    u_xlat1.x = select(x_1122, x_1121, (x_1119 != 0i));
    let x_1126 : bool = u_xlatb18.y;
    if (x_1126) {
      let x_1130 : f32 = u_xlat25;
      x_1127 = x_1130;
    } else {
      let x_1133 : f32 = u_xlat1.x;
      x_1127 = x_1133;
    }
    let x_1134 : f32 = x_1127;
    u_xlat17 = x_1134;
    let x_1135 : f32 = u_xlat24;
    let x_1136 : f32 = u_xlat17;
    u_xlat24 = (x_1135 + x_1136);
    let x_1138 : f32 = u_xlat24;
    let x_1141 : f32 = u_xlat2.x;
    u_xlat24 = ((x_1138 * 0.5f) + x_1141);
    let x_1143 : f32 = u_xlat9;
    let x_1144 : f32 = u_xlat24;
    u_xlat24 = (x_1143 + x_1144);
    let x_1147 : f32 = u_xlat1.x;
    let x_1148 : f32 = u_xlat24;
    u_xlat8.z = (x_1147 + x_1148);
    let x_1151 : vec3<f32> = u_xlat8;
    let x_1154 : vec2<f32> = (vec2<f32>(x_1151.x, x_1151.z) * vec2<f32>(0.25f, 0.25f));
    let x_1155 : vec3<f32> = u_xlat8;
    u_xlat8 = vec3<f32>(x_1154.x, x_1155.y, x_1154.y);
    let x_1157 : i32 = u_xlati0;
    let x_1159 : f32 = u_xlat8.x;
    TGSM1[x_1157].value[0i] = bitcast<u32>(x_1159);
    let x_1162 : i32 = u_xlati16;
    let x_1164 : f32 = u_xlat8.z;
    TGSM1[x_1162].value[0i] = bitcast<u32>(x_1164);
  }
  workgroupBarrier();
  let x_1168 : u32 = gl_LocalInvocationID.y;
  let x_1172 : u32 = gl_LocalInvocationID.x;
  u_xlati0 = ((bitcast<i32>(x_1168) * 16i) + bitcast<i32>(x_1172));
  let x_1175 : i32 = u_xlati0;
  u_xlati8 = (vec3<i32>(x_1175, x_1175, x_1175) + vec3<i32>(16i, 17i, 1i));
  let x_1180 : i32 = u_xlati8.x;
  let x_1182 : u32 = TGSM1[x_1180].value[0i];
  u_xlat1.y = bitcast<f32>(x_1182);
  let x_1186 : i32 = u_xlati8.y;
  let x_1188 : u32 = TGSM1[x_1186].value[0i];
  u_xlat1.z = bitcast<f32>(x_1188);
  let x_1192 : i32 = u_xlati8.z;
  let x_1194 : u32 = TGSM1[x_1192].value[0i];
  u_xlat1.w = bitcast<f32>(x_1194);
  let x_1197 : i32 = u_xlati0;
  let x_1199 : u32 = TGSM1[x_1197].value[0i];
  u_xlat1.x = bitcast<f32>(x_1199);
  let x_1203 : vec3<u32> = gl_GlobalInvocationID;
  let x_1205 : vec2<f32> = vec2<f32>(vec2<u32>(x_1203.x, x_1203.y));
  let x_1206 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1205.x, x_1205.y, x_1206.z, x_1206.w);
  let x_1208 : vec4<f32> = u_xlat0;
  let x_1211 : vec4<f32> = x_65.InvLowResolution;
  let x_1213 : vec2<f32> = (vec2<f32>(x_1208.x, x_1208.y) * vec2<f32>(x_1211.x, x_1211.y));
  let x_1214 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1213.x, x_1213.y, x_1214.z, x_1214.w);
  let x_1218 : vec3<u32> = gl_GlobalInvocationID;
  u_xlatu2 = bitcast<vec4<u32>>((bitcast<vec4<i32>>(vec4<u32>(x_1218.x, x_1218.y, x_1218.y, x_1218.y)) << bitcast<vec4<u32>>(vec4<i32>(1i, 1i, 1i, 1i))));
  let x_1224 : vec4<u32> = u_xlatu2;
  u_xlat16 = vec2<f32>(vec2<u32>(x_1224.x, x_1224.w));
  let x_1227 : vec2<f32> = u_xlat16;
  let x_1229 : vec4<f32> = x_65.InvHighResolution;
  u_xlat16 = (x_1227 * vec2<f32>(x_1229.x, x_1229.y));
  let x_1235 : vec4<f32> = u_xlat0;
  let x_1237 : vec4<f32> = textureGather(0i, LoResDB, samplerLoResDB, vec2<f32>(x_1235.x, x_1235.y));
  u_xlat3 = x_1237;
  let x_1243 : vec2<f32> = u_xlat16;
  let x_1244 : vec4<f32> = textureGather(0i, HiResDB, samplerHiResDB, x_1243);
  u_xlat0 = x_1244;
  let x_1246 : vec4<u32> = u_xlatu2;
  u_xlati4 = (bitcast<vec4<i32>>(vec4<u32>(x_1246.x, x_1246.w, x_1246.x, x_1246.w)) + vec4<i32>(-1i, 0i, 0i, -1i));
  let x_1252 : vec4<f32> = u_xlat3;
  let x_1254 : vec4<f32> = u_xlat0;
  u_xlat5 = (-(x_1252) + vec4<f32>(x_1254.x, x_1254.x, x_1254.x, x_1254.x));
  let x_1257 : vec4<f32> = u_xlat5;
  let x_1260 : vec4<f32> = x_65.AdditionalParams;
  u_xlat5 = (abs(x_1257) + vec4<f32>(x_1260.w, x_1260.w, x_1260.w, x_1260.w));
  let x_1266 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1266);
  let x_1268 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(x_1268, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1272 : f32 = u_xlat0.x;
  let x_1274 : f32 = x_65.AdditionalParams.x;
  u_xlat0.x = (x_1272 + x_1274);
  let x_1277 : vec4<f32> = u_xlat1;
  let x_1279 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec4<f32>(x_1277.y, x_1277.z, x_1277.w, x_1277.x), x_1279);
  let x_1283 : f32 = u_xlat5.x;
  let x_1285 : f32 = x_65.AdditionalParams.x;
  u_xlat5.x = (x_1283 + x_1285);
  let x_1289 : f32 = u_xlat5.x;
  let x_1291 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1289 / x_1291);
  let x_1298 : vec4<i32> = u_xlati4;
  let x_1300 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1298.x, x_1298.y), vec4<f32>(x_1300.x, x_1300.x, x_1300.x, x_1300.x));
  let x_1302 : vec4<f32> = u_xlat3;
  let x_1305 : vec4<f32> = u_xlat0;
  u_xlat5 = (-(vec4<f32>(x_1302.y, x_1302.z, x_1302.w, x_1302.x)) + vec4<f32>(x_1305.y, x_1305.y, x_1305.y, x_1305.y));
  let x_1308 : vec4<f32> = u_xlat5;
  let x_1311 : vec4<f32> = x_65.AdditionalParams;
  u_xlat5 = (abs(x_1308) + vec4<f32>(x_1311.w, x_1311.w, x_1311.w, x_1311.w));
  let x_1314 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1314);
  let x_1316 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(x_1316, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1319 : vec4<f32> = u_xlat1;
  let x_1321 : vec4<f32> = u_xlat5;
  u_xlat0.y = dot(vec4<f32>(x_1319.z, x_1319.w, x_1319.x, x_1319.y), x_1321);
  let x_1324 : vec4<f32> = u_xlat0;
  let x_1327 : vec4<f32> = x_65.AdditionalParams;
  let x_1329 : vec2<f32> = (vec2<f32>(x_1324.x, x_1324.y) + vec2<f32>(x_1327.x, x_1327.x));
  let x_1330 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1329.x, x_1329.y, x_1330.z, x_1330.w);
  let x_1333 : f32 = u_xlat0.y;
  let x_1335 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1333 / x_1335);
  let x_1339 : vec4<u32> = u_xlatu2;
  let x_1342 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, bitcast<vec2<i32>>(vec2<u32>(x_1339.x, x_1339.w)), vec4<f32>(x_1342.x, x_1342.x, x_1342.x, x_1342.x));
  let x_1344 : vec4<f32> = u_xlat3;
  let x_1347 : vec4<f32> = u_xlat0;
  u_xlat5 = (-(vec4<f32>(x_1344.z, x_1344.w, x_1344.x, x_1344.y)) + vec4<f32>(x_1347.z, x_1347.z, x_1347.z, x_1347.z));
  let x_1350 : vec4<f32> = u_xlat5;
  let x_1353 : vec4<f32> = x_65.AdditionalParams;
  u_xlat5 = (abs(x_1350) + vec4<f32>(x_1353.w, x_1353.w, x_1353.w, x_1353.w));
  let x_1356 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1356);
  let x_1358 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(x_1358, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1361 : vec4<f32> = u_xlat1;
  let x_1363 : vec4<f32> = u_xlat5;
  u_xlat0.y = dot(vec4<f32>(x_1361.w, x_1361.x, x_1361.y, x_1361.z), x_1363);
  let x_1366 : vec4<f32> = u_xlat0;
  let x_1369 : vec4<f32> = x_65.AdditionalParams;
  let x_1371 : vec2<f32> = (vec2<f32>(x_1366.x, x_1366.y) + vec2<f32>(x_1369.x, x_1369.x));
  let x_1372 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1371.x, x_1371.y, x_1372.z, x_1372.w);
  let x_1375 : f32 = u_xlat0.y;
  let x_1377 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1375 / x_1377);
  let x_1381 : vec4<i32> = u_xlati4;
  let x_1383 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1381.z, x_1381.w), vec4<f32>(x_1383.x, x_1383.x, x_1383.x, x_1383.x));
  let x_1385 : vec4<u32> = u_xlatu2;
  u_xlati2 = (bitcast<vec4<i32>>(x_1385) + vec4<i32>(-1i, -1i, -1i, -1i));
  let x_1389 : vec4<f32> = u_xlat3;
  let x_1392 : vec4<f32> = u_xlat0;
  u_xlat0 = (-(vec4<f32>(x_1389.w, x_1389.x, x_1389.y, x_1389.z)) + vec4<f32>(x_1392.w, x_1392.w, x_1392.w, x_1392.w));
  let x_1395 : vec4<f32> = u_xlat0;
  let x_1398 : vec4<f32> = x_65.AdditionalParams;
  u_xlat0 = (abs(x_1395) + vec4<f32>(x_1398.w, x_1398.w, x_1398.w, x_1398.w));
  let x_1401 : vec4<f32> = u_xlat0;
  u_xlat0 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1401);
  let x_1403 : vec4<f32> = u_xlat0;
  u_xlat3.x = dot(x_1403, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1407 : f32 = u_xlat3.x;
  let x_1409 : f32 = x_65.AdditionalParams.x;
  u_xlat3.x = (x_1407 + x_1409);
  let x_1412 : vec4<f32> = u_xlat1;
  let x_1413 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(x_1412, x_1413);
  let x_1417 : f32 = u_xlat0.x;
  let x_1419 : f32 = x_65.AdditionalParams.x;
  u_xlat0.x = (x_1417 + x_1419);
  let x_1423 : f32 = u_xlat0.x;
  let x_1425 : f32 = u_xlat3.x;
  u_xlat0.x = (x_1423 / x_1425);
  let x_1429 : vec4<i32> = u_xlati2;
  let x_1431 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1429.x, x_1429.y), vec4<f32>(x_1431.x, x_1431.x, x_1431.x, x_1431.x));
  return;
}

@compute @workgroup_size(8i, 8i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>, @builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>, @builtin(local_invocation_index) gl_LocalInvocationIndex_param : u32) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  gl_LocalInvocationIndex = gl_LocalInvocationIndex_param;
  main_1();
}

