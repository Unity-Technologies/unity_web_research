type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  unity_CameraInvProjection : mat4x4<f32>,
  unity_CameraToWorld : mat4x4<f32>,
  x_LightSplitsNear : vec4<f32>,
  x_LightSplitsFar : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
}

var<private> u_xlat0 : vec4<f32>;

@group(0) @binding(1) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

var<private> u_xlat1 : vec4<f32>;

@group(0) @binding(0) var<uniform> x_61 : PGlobals;

var<private> u_xlatb1 : vec4<bool>;

var<private> u_xlatb2 : vec4<bool>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat27 : f32;

var<private> u_xlat18 : f32;

var<private> u_xlat19 : vec2<f32>;

var<private> u_xlat4 : vec4<f32>;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

var<private> u_xlat7 : vec4<f32>;

var<private> u_xlat8 : vec4<f32>;

@group(0) @binding(2) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(3) var sampler_ShadowMapTexture : sampler_comparison;

var<private> u_xlat9 : vec3<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_23.x, x_23.y));
  u_xlat0.x = x_25.x;
  let x_32 : f32 = u_xlat0.x;
  u_xlat0.z = (-(x_32) + 1.0f);
  let x_38 : vec4<f32> = vs_TEXCOORD0;
  let x_39 : vec2<f32> = vec2<f32>(x_38.z, x_38.w);
  let x_40 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_39.x, x_39.y, x_40.z, x_40.w);
  let x_43 : vec4<f32> = u_xlat0;
  let x_50 : vec3<f32> = ((vec3<f32>(x_43.x, x_43.y, x_43.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_51 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_50.x, x_50.y, x_50.z, x_51.w);
  let x_54 : vec4<f32> = u_xlat0;
  let x_67 : vec4<f32> = x_61.unity_CameraInvProjection[1i];
  u_xlat1 = (vec4<f32>(x_54.y, x_54.y, x_54.y, x_54.y) * x_67);
  let x_70 : vec4<f32> = x_61.unity_CameraInvProjection[0i];
  let x_71 : vec4<f32> = u_xlat0;
  let x_74 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_70 * vec4<f32>(x_71.x, x_71.x, x_71.x, x_71.x)) + x_74);
  let x_78 : vec4<f32> = x_61.unity_CameraInvProjection[2i];
  let x_79 : vec4<f32> = u_xlat0;
  let x_82 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_78 * vec4<f32>(x_79.z, x_79.z, x_79.z, x_79.z)) + x_82);
  let x_84 : vec4<f32> = u_xlat0;
  let x_87 : vec4<f32> = x_61.unity_CameraInvProjection[3i];
  u_xlat0 = (x_84 + x_87);
  let x_89 : vec4<f32> = u_xlat0;
  let x_91 : vec4<f32> = u_xlat0;
  let x_93 : vec3<f32> = (vec3<f32>(x_89.x, x_89.y, x_89.z) / vec3<f32>(x_91.w, x_91.w, x_91.w));
  let x_94 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_93.x, x_93.y, x_93.z, x_94.w);
  let x_100 : vec4<f32> = u_xlat0;
  let x_104 : vec4<f32> = x_61.x_LightSplitsNear;
  u_xlatb1 = (-(vec4<f32>(x_100.z, x_100.z, x_100.z, x_100.z)) >= x_104);
  let x_108 : bool = u_xlatb1.x;
  u_xlat1.x = select(0.0f, 1.0f, x_108);
  let x_114 : bool = u_xlatb1.y;
  u_xlat1.y = select(0.0f, 1.0f, x_114);
  let x_118 : bool = u_xlatb1.z;
  u_xlat1.z = select(0.0f, 1.0f, x_118);
  let x_123 : bool = u_xlatb1.w;
  u_xlat1.w = select(0.0f, 1.0f, x_123);
  let x_127 : vec4<f32> = u_xlat0;
  let x_131 : vec4<f32> = x_61.x_LightSplitsFar;
  u_xlatb2 = (-(vec4<f32>(x_127.z, x_127.z, x_127.z, x_127.z)) < x_131);
  let x_135 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_135);
  let x_139 : bool = u_xlatb2.y;
  u_xlat2.y = select(0.0f, 1.0f, x_139);
  let x_143 : bool = u_xlatb2.z;
  u_xlat2.z = select(0.0f, 1.0f, x_143);
  let x_147 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_147);
  let x_150 : vec4<f32> = u_xlat1;
  let x_151 : vec4<f32> = u_xlat2;
  u_xlat1 = (x_150 * x_151);
  let x_153 : vec4<f32> = u_xlat0;
  let x_156 : vec4<f32> = x_61.unity_CameraToWorld[1i];
  u_xlat2 = (vec4<f32>(x_153.y, x_153.y, x_153.y, x_153.y) * x_156);
  let x_159 : vec4<f32> = x_61.unity_CameraToWorld[0i];
  let x_160 : vec4<f32> = u_xlat0;
  let x_163 : vec4<f32> = u_xlat2;
  u_xlat2 = ((x_159 * vec4<f32>(x_160.x, x_160.x, x_160.x, x_160.x)) + x_163);
  let x_166 : vec4<f32> = x_61.unity_CameraToWorld[2i];
  let x_167 : vec4<f32> = u_xlat0;
  let x_171 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_166 * -(vec4<f32>(x_167.z, x_167.z, x_167.z, x_167.z))) + x_171);
  let x_173 : vec4<f32> = u_xlat0;
  let x_175 : vec4<f32> = x_61.unity_CameraToWorld[3i];
  u_xlat0 = (x_173 + x_175);
  let x_177 : vec4<f32> = u_xlat0;
  let x_181 : vec4<f32> = x_61.unity_WorldToShadow[1i][1i];
  let x_183 : vec3<f32> = (vec3<f32>(x_177.y, x_177.y, x_177.y) * vec3<f32>(x_181.x, x_181.y, x_181.z));
  let x_184 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_183.x, x_183.y, x_183.z, x_184.w);
  let x_187 : vec4<f32> = x_61.unity_WorldToShadow[1i][0i];
  let x_189 : vec4<f32> = u_xlat0;
  let x_192 : vec4<f32> = u_xlat2;
  let x_194 : vec3<f32> = ((vec3<f32>(x_187.x, x_187.y, x_187.z) * vec3<f32>(x_189.x, x_189.x, x_189.x)) + vec3<f32>(x_192.x, x_192.y, x_192.z));
  let x_195 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_194.x, x_194.y, x_194.z, x_195.w);
  let x_198 : vec4<f32> = x_61.unity_WorldToShadow[1i][2i];
  let x_200 : vec4<f32> = u_xlat0;
  let x_203 : vec4<f32> = u_xlat2;
  let x_205 : vec3<f32> = ((vec3<f32>(x_198.x, x_198.y, x_198.z) * vec3<f32>(x_200.z, x_200.z, x_200.z)) + vec3<f32>(x_203.x, x_203.y, x_203.z));
  let x_206 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_205.x, x_205.y, x_205.z, x_206.w);
  let x_209 : vec4<f32> = x_61.unity_WorldToShadow[1i][3i];
  let x_211 : vec4<f32> = u_xlat0;
  let x_214 : vec4<f32> = u_xlat2;
  let x_216 : vec3<f32> = ((vec3<f32>(x_209.x, x_209.y, x_209.z) * vec3<f32>(x_211.w, x_211.w, x_211.w)) + vec3<f32>(x_214.x, x_214.y, x_214.z));
  let x_217 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_216.x, x_216.y, x_216.z, x_217.w);
  let x_219 : vec4<f32> = u_xlat1;
  let x_221 : vec4<f32> = u_xlat2;
  let x_223 : vec3<f32> = (vec3<f32>(x_219.y, x_219.y, x_219.y) * vec3<f32>(x_221.x, x_221.y, x_221.z));
  let x_224 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_223.x, x_223.y, x_223.z, x_224.w);
  let x_227 : vec4<f32> = u_xlat0;
  let x_230 : vec4<f32> = x_61.unity_WorldToShadow[0i][1i];
  let x_232 : vec3<f32> = (vec3<f32>(x_227.y, x_227.y, x_227.y) * vec3<f32>(x_230.x, x_230.y, x_230.z));
  let x_233 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_232.x, x_232.y, x_232.z, x_233.w);
  let x_236 : vec4<f32> = x_61.unity_WorldToShadow[0i][0i];
  let x_238 : vec4<f32> = u_xlat0;
  let x_241 : vec4<f32> = u_xlat3;
  let x_243 : vec3<f32> = ((vec3<f32>(x_236.x, x_236.y, x_236.z) * vec3<f32>(x_238.x, x_238.x, x_238.x)) + vec3<f32>(x_241.x, x_241.y, x_241.z));
  let x_244 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_243.x, x_243.y, x_243.z, x_244.w);
  let x_247 : vec4<f32> = x_61.unity_WorldToShadow[0i][2i];
  let x_249 : vec4<f32> = u_xlat0;
  let x_252 : vec4<f32> = u_xlat3;
  let x_254 : vec3<f32> = ((vec3<f32>(x_247.x, x_247.y, x_247.z) * vec3<f32>(x_249.z, x_249.z, x_249.z)) + vec3<f32>(x_252.x, x_252.y, x_252.z));
  let x_255 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_254.x, x_254.y, x_254.z, x_255.w);
  let x_258 : vec4<f32> = x_61.unity_WorldToShadow[0i][3i];
  let x_260 : vec4<f32> = u_xlat0;
  let x_263 : vec4<f32> = u_xlat3;
  let x_265 : vec3<f32> = ((vec3<f32>(x_258.x, x_258.y, x_258.z) * vec3<f32>(x_260.w, x_260.w, x_260.w)) + vec3<f32>(x_263.x, x_263.y, x_263.z));
  let x_266 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_265.x, x_265.y, x_265.z, x_266.w);
  let x_268 : vec4<f32> = u_xlat3;
  let x_270 : vec4<f32> = u_xlat1;
  let x_273 : vec4<f32> = u_xlat2;
  let x_275 : vec3<f32> = ((vec3<f32>(x_268.x, x_268.y, x_268.z) * vec3<f32>(x_270.x, x_270.x, x_270.x)) + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_276 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_278 : vec4<f32> = u_xlat0;
  let x_281 : vec4<f32> = x_61.unity_WorldToShadow[2i][1i];
  let x_283 : vec3<f32> = (vec3<f32>(x_278.y, x_278.y, x_278.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_287 : vec4<f32> = x_61.unity_WorldToShadow[2i][0i];
  let x_289 : vec4<f32> = u_xlat0;
  let x_292 : vec4<f32> = u_xlat3;
  let x_294 : vec3<f32> = ((vec3<f32>(x_287.x, x_287.y, x_287.z) * vec3<f32>(x_289.x, x_289.x, x_289.x)) + vec3<f32>(x_292.x, x_292.y, x_292.z));
  let x_295 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_294.x, x_294.y, x_294.z, x_295.w);
  let x_298 : vec4<f32> = x_61.unity_WorldToShadow[2i][2i];
  let x_300 : vec4<f32> = u_xlat0;
  let x_303 : vec4<f32> = u_xlat3;
  let x_305 : vec3<f32> = ((vec3<f32>(x_298.x, x_298.y, x_298.z) * vec3<f32>(x_300.z, x_300.z, x_300.z)) + vec3<f32>(x_303.x, x_303.y, x_303.z));
  let x_306 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_305.x, x_305.y, x_305.z, x_306.w);
  let x_309 : vec4<f32> = x_61.unity_WorldToShadow[2i][3i];
  let x_311 : vec4<f32> = u_xlat0;
  let x_314 : vec4<f32> = u_xlat3;
  let x_316 : vec3<f32> = ((vec3<f32>(x_309.x, x_309.y, x_309.z) * vec3<f32>(x_311.w, x_311.w, x_311.w)) + vec3<f32>(x_314.x, x_314.y, x_314.z));
  let x_317 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_316.x, x_316.y, x_316.z, x_317.w);
  let x_319 : vec4<f32> = u_xlat3;
  let x_321 : vec4<f32> = u_xlat1;
  let x_324 : vec4<f32> = u_xlat2;
  let x_326 : vec3<f32> = ((vec3<f32>(x_319.x, x_319.y, x_319.z) * vec3<f32>(x_321.z, x_321.z, x_321.z)) + vec3<f32>(x_324.x, x_324.y, x_324.z));
  let x_327 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_326.x, x_326.y, x_326.z, x_327.w);
  let x_329 : vec4<f32> = u_xlat0;
  let x_332 : vec4<f32> = x_61.unity_WorldToShadow[3i][1i];
  let x_334 : vec3<f32> = (vec3<f32>(x_329.y, x_329.y, x_329.y) * vec3<f32>(x_332.x, x_332.y, x_332.z));
  let x_335 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_334.x, x_334.y, x_334.z, x_335.w);
  let x_338 : vec4<f32> = x_61.unity_WorldToShadow[3i][0i];
  let x_340 : vec4<f32> = u_xlat0;
  let x_343 : vec4<f32> = u_xlat3;
  let x_345 : vec3<f32> = ((vec3<f32>(x_338.x, x_338.y, x_338.z) * vec3<f32>(x_340.x, x_340.x, x_340.x)) + vec3<f32>(x_343.x, x_343.y, x_343.z));
  let x_346 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_345.x, x_345.y, x_345.z, x_346.w);
  let x_349 : vec4<f32> = x_61.unity_WorldToShadow[3i][2i];
  let x_351 : vec4<f32> = u_xlat0;
  let x_354 : vec4<f32> = u_xlat3;
  let x_356 : vec3<f32> = ((vec3<f32>(x_349.x, x_349.y, x_349.z) * vec3<f32>(x_351.z, x_351.z, x_351.z)) + vec3<f32>(x_354.x, x_354.y, x_354.z));
  let x_357 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_356.x, x_356.y, x_356.z, x_357.w);
  let x_360 : vec4<f32> = x_61.unity_WorldToShadow[3i][3i];
  let x_362 : vec4<f32> = u_xlat0;
  let x_365 : vec4<f32> = u_xlat0;
  let x_367 : vec3<f32> = ((vec3<f32>(x_360.x, x_360.y, x_360.z) * vec3<f32>(x_362.w, x_362.w, x_362.w)) + vec3<f32>(x_365.x, x_365.y, x_365.z));
  let x_368 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_367.x, x_367.y, x_367.z, x_368.w);
  let x_370 : vec4<f32> = u_xlat0;
  let x_372 : vec4<f32> = u_xlat1;
  let x_375 : vec4<f32> = u_xlat2;
  let x_377 : vec3<f32> = ((vec3<f32>(x_370.x, x_370.y, x_370.z) * vec3<f32>(x_372.w, x_372.w, x_372.w)) + vec3<f32>(x_375.x, x_375.y, x_375.z));
  let x_378 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_377.x, x_377.y, x_377.z, x_378.w);
  let x_381 : vec4<f32> = u_xlat1;
  u_xlat27 = dot(x_381, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_385 : f32 = u_xlat27;
  let x_388 : f32 = u_xlat0.z;
  u_xlat18 = (-(x_385) + x_388);
  let x_390 : f32 = u_xlat18;
  u_xlat18 = (x_390 + 1.0f);
  let x_392 : vec4<f32> = u_xlat0;
  let x_396 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_401 : vec2<f32> = ((vec2<f32>(x_392.x, x_392.y) * vec2<f32>(x_396.z, x_396.w)) + vec2<f32>(0.5f, 0.5f));
  let x_402 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_401.x, x_401.y, x_402.z, x_402.w);
  let x_404 : vec4<f32> = u_xlat1;
  let x_406 : vec2<f32> = floor(vec2<f32>(x_404.x, x_404.y));
  let x_407 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_406.x, x_406.y, x_407.z, x_407.w);
  let x_409 : vec4<f32> = u_xlat0;
  let x_412 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_415 : vec4<f32> = u_xlat1;
  let x_418 : vec2<f32> = ((vec2<f32>(x_409.x, x_409.y) * vec2<f32>(x_412.z, x_412.w)) + -(vec2<f32>(x_415.x, x_415.y)));
  let x_419 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_418.x, x_418.y, x_419.z, x_419.w);
  let x_423 : vec4<f32> = u_xlat0;
  u_xlat19 = (-(vec2<f32>(x_423.x, x_423.y)) + vec2<f32>(1.0f, 1.0f));
  let x_428 : vec4<f32> = u_xlat0;
  let x_431 : vec2<f32> = min(vec2<f32>(x_428.x, x_428.y), vec2<f32>(0.0f, 0.0f));
  let x_432 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_431.x, x_431.y, x_432.z, x_432.w);
  let x_434 : vec4<f32> = u_xlat2;
  let x_437 : vec4<f32> = u_xlat2;
  let x_440 : vec2<f32> = u_xlat19;
  u_xlat19 = ((-(vec2<f32>(x_434.x, x_434.y)) * vec2<f32>(x_437.x, x_437.y)) + x_440);
  let x_442 : vec2<f32> = u_xlat19;
  u_xlat19 = (x_442 + vec2<f32>(2.0f, 2.0f));
  let x_445 : vec2<f32> = u_xlat19;
  let x_448 : vec2<f32> = (x_445 * vec2<f32>(0.081632003f, 0.081632003f));
  let x_449 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_448.x, x_448.y, x_449.z, x_449.w);
  let x_452 : f32 = u_xlat2.x;
  u_xlat3.y = x_452;
  let x_454 : vec4<f32> = u_xlat0;
  u_xlat19 = max(vec2<f32>(x_454.x, x_454.y), vec2<f32>(0.0f, 0.0f));
  let x_458 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec4<f32>(x_458.x, x_458.x, x_458.y, x_458.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
  let x_462 : vec2<f32> = u_xlat19;
  let x_464 : vec2<f32> = u_xlat19;
  let x_466 : vec4<f32> = u_xlat4;
  u_xlat19 = ((-(x_462) * x_464) + vec2<f32>(x_466.y, x_466.w));
  let x_469 : vec4<f32> = u_xlat4;
  let x_471 : vec4<f32> = u_xlat4;
  u_xlat4 = (vec4<f32>(x_469.x, x_469.x, x_469.z, x_469.z) * vec4<f32>(x_471.x, x_471.x, x_471.z, x_471.z));
  let x_474 : vec2<f32> = u_xlat19;
  u_xlat19 = (x_474 + vec2<f32>(2.0f, 2.0f));
  let x_478 : f32 = u_xlat19.x;
  u_xlat5.z = (x_478 * 0.081632003f);
  let x_483 : f32 = u_xlat19.y;
  u_xlat6.z = (x_483 * 0.081632003f);
  let x_486 : vec4<f32> = u_xlat4;
  let x_489 : vec4<f32> = u_xlat0;
  u_xlat19 = ((vec2<f32>(x_486.x, x_486.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_489.x, x_489.y)));
  let x_493 : vec4<f32> = u_xlat4;
  let x_497 : vec2<f32> = (vec2<f32>(x_493.y, x_493.w) * vec2<f32>(0.040816002f, 0.040816002f));
  let x_498 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_497.x, x_497.y, x_498.z, x_498.w);
  let x_500 : vec2<f32> = u_xlat19;
  let x_502 : vec2<f32> = (vec2<f32>(x_500.y, x_500.x) * vec2<f32>(0.081632003f, 0.081632003f));
  let x_503 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_502.x, x_502.y, x_503.z, x_503.w);
  let x_506 : f32 = u_xlat6.y;
  u_xlat5.x = x_506;
  let x_508 : vec4<f32> = u_xlat0;
  let x_515 : vec2<f32> = ((vec2<f32>(x_508.x, x_508.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_516 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_516.x, x_515.x, x_516.z, x_515.y);
  let x_518 : vec4<f32> = u_xlat0;
  let x_522 : vec2<f32> = ((vec2<f32>(x_518.x, x_518.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_523 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_522.x, x_523.y, x_522.y, x_523.w);
  let x_526 : f32 = u_xlat4.x;
  u_xlat3.w = x_526;
  let x_529 : f32 = u_xlat4.y;
  u_xlat2.w = x_529;
  let x_531 : vec4<f32> = u_xlat3;
  let x_532 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_531 + x_532);
  let x_534 : vec4<f32> = u_xlat3;
  let x_535 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_534 / x_535);
  let x_537 : vec4<f32> = u_xlat3;
  u_xlat3 = (x_537 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_543 : vec4<f32> = u_xlat3;
  let x_546 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  u_xlat3 = (vec4<f32>(x_543.w, x_543.x, x_543.y, x_543.z) * vec4<f32>(x_546.x, x_546.x, x_546.x, x_546.x));
  let x_549 : vec4<f32> = u_xlat0;
  let x_552 : vec2<f32> = ((vec2<f32>(x_549.y, x_549.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_553 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_553.x, x_552.x, x_553.z, x_552.y);
  let x_555 : vec4<f32> = u_xlat0;
  let x_558 : vec2<f32> = ((vec2<f32>(x_555.y, x_555.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_559 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_558.x, x_559.y, x_558.y, x_559.w);
  let x_561 : vec4<f32> = u_xlat2;
  let x_562 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_561 + x_562);
  let x_564 : vec4<f32> = u_xlat2;
  let x_565 : vec4<f32> = u_xlat5;
  u_xlat2 = (x_564 / x_565);
  let x_567 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_567 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_569 : vec4<f32> = u_xlat2;
  let x_572 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  u_xlat2 = (vec4<f32>(x_569.x, x_569.w, x_569.y, x_569.z) * vec4<f32>(x_572.y, x_572.y, x_572.y, x_572.y));
  let x_575 : vec4<f32> = u_xlat4;
  let x_576 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_575 * vec4<f32>(x_576.x, x_576.x, x_576.x, x_576.x));
  let x_580 : vec4<f32> = u_xlat3;
  let x_581 : vec3<f32> = vec3<f32>(x_580.y, x_580.z, x_580.w);
  let x_582 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_581.x, x_582.y, x_581.y, x_581.z);
  let x_585 : f32 = u_xlat2.x;
  u_xlat7.y = x_585;
  let x_588 : vec4<f32> = u_xlat1;
  let x_591 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_594 : vec4<f32> = u_xlat7;
  u_xlat8 = ((vec4<f32>(x_588.x, x_588.y, x_588.x, x_588.y) * vec4<f32>(x_591.x, x_591.y, x_591.x, x_591.y)) + vec4<f32>(x_594.x, x_594.y, x_594.z, x_594.y));
  let x_599 : vec4<f32> = u_xlat8;
  let x_600 : vec2<f32> = vec2<f32>(x_599.x, x_599.y);
  let x_601 : f32 = u_xlat18;
  txVec0 = vec3<f32>(x_600.x, x_600.y, x_601);
  let x_613 : vec3<f32> = txVec0;
  let x_615 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_613.xy, x_613.z);
  u_xlat0.x = x_615;
  let x_618 : vec4<f32> = u_xlat8;
  let x_619 : vec2<f32> = vec2<f32>(x_618.z, x_618.w);
  let x_620 : f32 = u_xlat18;
  txVec1 = vec3<f32>(x_619.x, x_619.y, x_620);
  let x_629 : vec3<f32> = txVec1;
  let x_631 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_629.xy, x_629.z);
  u_xlat9.x = x_631;
  let x_634 : f32 = u_xlat9.x;
  let x_636 : f32 = u_xlat6.y;
  u_xlat9.x = (x_634 * x_636);
  let x_640 : f32 = u_xlat6.x;
  let x_642 : f32 = u_xlat0.x;
  let x_645 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_640 * x_642) + x_645);
  let x_648 : vec4<f32> = u_xlat1;
  let x_651 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_654 : vec4<f32> = u_xlat7;
  let x_656 : vec2<f32> = ((vec2<f32>(x_648.x, x_648.y) * vec2<f32>(x_651.x, x_651.y)) + vec2<f32>(x_654.w, x_654.y));
  let x_657 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_656.x, x_657.y, x_656.y);
  let x_660 : f32 = u_xlat7.y;
  u_xlat3.y = x_660;
  let x_662 : vec4<f32> = u_xlat1;
  let x_665 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_668 : vec4<f32> = u_xlat3;
  u_xlat19 = ((vec2<f32>(x_662.x, x_662.y) * vec2<f32>(x_665.x, x_665.y)) + vec2<f32>(x_668.x, x_668.y));
  let x_672 : vec2<f32> = u_xlat19;
  let x_673 : f32 = u_xlat18;
  txVec2 = vec3<f32>(x_672.x, x_672.y, x_673);
  let x_680 : vec3<f32> = txVec2;
  let x_682 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_680.xy, x_680.z);
  u_xlat19.x = x_682;
  let x_685 : vec3<f32> = u_xlat9;
  let x_686 : vec2<f32> = vec2<f32>(x_685.x, x_685.z);
  let x_687 : f32 = u_xlat18;
  txVec3 = vec3<f32>(x_686.x, x_686.y, x_687);
  let x_694 : vec3<f32> = txVec3;
  let x_696 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_694.xy, x_694.z);
  u_xlat9.x = x_696;
  let x_699 : f32 = u_xlat6.z;
  let x_701 : f32 = u_xlat9.x;
  let x_704 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_699 * x_701) + x_704);
  let x_708 : f32 = u_xlat6.w;
  let x_710 : f32 = u_xlat19.x;
  let x_713 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_708 * x_710) + x_713);
  let x_716 : vec4<f32> = u_xlat4;
  let x_717 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_716 * vec4<f32>(x_717.y, x_717.y, x_717.y, x_717.y));
  let x_721 : f32 = u_xlat2.z;
  u_xlat7.y = x_721;
  let x_723 : vec4<f32> = u_xlat1;
  let x_726 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_729 : vec4<f32> = u_xlat7;
  u_xlat8 = ((vec4<f32>(x_723.x, x_723.y, x_723.x, x_723.y) * vec4<f32>(x_726.x, x_726.y, x_726.x, x_726.y)) + vec4<f32>(x_729.x, x_729.y, x_729.z, x_729.y));
  let x_733 : vec4<f32> = u_xlat8;
  let x_734 : vec2<f32> = vec2<f32>(x_733.x, x_733.y);
  let x_735 : f32 = u_xlat18;
  txVec4 = vec3<f32>(x_734.x, x_734.y, x_735);
  let x_742 : vec3<f32> = txVec4;
  let x_744 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_742.xy, x_742.z);
  u_xlat9.x = x_744;
  let x_747 : vec4<f32> = u_xlat8;
  let x_748 : vec2<f32> = vec2<f32>(x_747.z, x_747.w);
  let x_749 : f32 = u_xlat18;
  txVec5 = vec3<f32>(x_748.x, x_748.y, x_749);
  let x_756 : vec3<f32> = txVec5;
  let x_758 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_756.xy, x_756.z);
  u_xlat27 = x_758;
  let x_760 : f32 = u_xlat6.x;
  let x_762 : f32 = u_xlat9.x;
  let x_765 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_760 * x_762) + x_765);
  let x_769 : f32 = u_xlat6.y;
  let x_770 : f32 = u_xlat27;
  let x_773 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_769 * x_770) + x_773);
  let x_776 : vec4<f32> = u_xlat1;
  let x_779 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_782 : vec4<f32> = u_xlat7;
  let x_784 : vec2<f32> = ((vec2<f32>(x_776.x, x_776.y) * vec2<f32>(x_779.x, x_779.y)) + vec2<f32>(x_782.w, x_782.y));
  let x_785 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_784.x, x_785.y, x_784.y);
  let x_788 : f32 = u_xlat7.y;
  u_xlat3.z = x_788;
  let x_790 : vec4<f32> = u_xlat1;
  let x_793 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_796 : vec4<f32> = u_xlat3;
  u_xlat19 = ((vec2<f32>(x_790.x, x_790.y) * vec2<f32>(x_793.x, x_793.y)) + vec2<f32>(x_796.x, x_796.z));
  let x_800 : vec2<f32> = u_xlat19;
  let x_801 : f32 = u_xlat18;
  txVec6 = vec3<f32>(x_800.x, x_800.y, x_801);
  let x_808 : vec3<f32> = txVec6;
  let x_810 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_808.xy, x_808.z);
  u_xlat19.x = x_810;
  let x_813 : vec3<f32> = u_xlat9;
  let x_814 : vec2<f32> = vec2<f32>(x_813.x, x_813.z);
  let x_815 : f32 = u_xlat18;
  txVec7 = vec3<f32>(x_814.x, x_814.y, x_815);
  let x_822 : vec3<f32> = txVec7;
  let x_824 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_822.xy, x_822.z);
  u_xlat9.x = x_824;
  let x_827 : f32 = u_xlat6.z;
  let x_829 : f32 = u_xlat9.x;
  let x_832 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_827 * x_829) + x_832);
  let x_836 : f32 = u_xlat6.w;
  let x_838 : f32 = u_xlat19.x;
  let x_841 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_836 * x_838) + x_841);
  let x_844 : vec4<f32> = u_xlat4;
  let x_845 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_844 * vec4<f32>(x_845.z, x_845.z, x_845.z, x_845.z));
  let x_848 : vec4<f32> = u_xlat4;
  let x_849 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_848 * vec4<f32>(x_849.w, x_849.w, x_849.w, x_849.w));
  let x_853 : f32 = u_xlat2.w;
  u_xlat7.y = x_853;
  let x_855 : vec4<f32> = u_xlat1;
  let x_858 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_861 : vec4<f32> = u_xlat7;
  u_xlat5 = ((vec4<f32>(x_855.x, x_855.y, x_855.x, x_855.y) * vec4<f32>(x_858.x, x_858.y, x_858.x, x_858.y)) + vec4<f32>(x_861.x, x_861.y, x_861.z, x_861.y));
  let x_865 : vec4<f32> = u_xlat5;
  let x_866 : vec2<f32> = vec2<f32>(x_865.x, x_865.y);
  let x_867 : f32 = u_xlat18;
  txVec8 = vec3<f32>(x_866.x, x_866.y, x_867);
  let x_874 : vec3<f32> = txVec8;
  let x_876 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_874.xy, x_874.z);
  u_xlat9.x = x_876;
  let x_879 : vec4<f32> = u_xlat5;
  let x_880 : vec2<f32> = vec2<f32>(x_879.z, x_879.w);
  let x_881 : f32 = u_xlat18;
  txVec9 = vec3<f32>(x_880.x, x_880.y, x_881);
  let x_888 : vec3<f32> = txVec9;
  let x_890 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_888.xy, x_888.z);
  u_xlat27 = x_890;
  let x_892 : f32 = u_xlat6.x;
  let x_894 : f32 = u_xlat9.x;
  let x_897 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_892 * x_894) + x_897);
  let x_901 : f32 = u_xlat6.y;
  let x_902 : f32 = u_xlat27;
  let x_905 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_901 * x_902) + x_905);
  let x_908 : vec4<f32> = u_xlat1;
  let x_911 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_914 : vec4<f32> = u_xlat7;
  let x_916 : vec2<f32> = ((vec2<f32>(x_908.x, x_908.y) * vec2<f32>(x_911.x, x_911.y)) + vec2<f32>(x_914.w, x_914.y));
  let x_917 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_916.x, x_917.y, x_916.y);
  let x_919 : vec4<f32> = u_xlat7;
  let x_920 : vec3<f32> = vec3<f32>(x_919.x, x_919.z, x_919.w);
  let x_921 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_920.x, x_921.y, x_920.y, x_920.z);
  let x_924 : f32 = u_xlat7.y;
  u_xlat3.w = x_924;
  let x_926 : vec4<f32> = u_xlat1;
  let x_929 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_932 : vec4<f32> = u_xlat3;
  u_xlat19 = ((vec2<f32>(x_926.x, x_926.y) * vec2<f32>(x_929.x, x_929.y)) + vec2<f32>(x_932.x, x_932.w));
  let x_936 : vec2<f32> = u_xlat19;
  let x_937 : f32 = u_xlat18;
  txVec10 = vec3<f32>(x_936.x, x_936.y, x_937);
  let x_944 : vec3<f32> = txVec10;
  let x_946 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_944.xy, x_944.z);
  u_xlat19.x = x_946;
  let x_949 : vec3<f32> = u_xlat9;
  let x_950 : vec2<f32> = vec2<f32>(x_949.x, x_949.z);
  let x_951 : f32 = u_xlat18;
  txVec11 = vec3<f32>(x_950.x, x_950.y, x_951);
  let x_958 : vec3<f32> = txVec11;
  let x_960 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_958.xy, x_958.z);
  u_xlat9.x = x_960;
  let x_963 : f32 = u_xlat6.z;
  let x_965 : f32 = u_xlat9.x;
  let x_968 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_963 * x_965) + x_968);
  let x_972 : f32 = u_xlat6.w;
  let x_974 : f32 = u_xlat19.x;
  let x_977 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_972 * x_974) + x_977);
  let x_980 : vec4<f32> = u_xlat1;
  let x_983 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_986 : vec4<f32> = u_xlat2;
  u_xlat5 = ((vec4<f32>(x_980.x, x_980.y, x_980.x, x_980.y) * vec4<f32>(x_983.x, x_983.y, x_983.x, x_983.y)) + vec4<f32>(x_986.x, x_986.y, x_986.z, x_986.y));
  let x_989 : vec4<f32> = u_xlat1;
  let x_992 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_995 : vec4<f32> = u_xlat2;
  let x_997 : vec2<f32> = ((vec2<f32>(x_989.x, x_989.y) * vec2<f32>(x_992.x, x_992.y)) + vec2<f32>(x_995.w, x_995.y));
  let x_998 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_997.x, x_998.y, x_997.y);
  let x_1001 : f32 = u_xlat2.y;
  u_xlat3.y = x_1001;
  let x_1003 : vec4<f32> = u_xlat1;
  let x_1006 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_1009 : vec4<f32> = u_xlat3;
  let x_1011 : vec2<f32> = ((vec2<f32>(x_1003.x, x_1003.y) * vec2<f32>(x_1006.x, x_1006.y)) + vec2<f32>(x_1009.x, x_1009.y));
  let x_1012 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1011.x, x_1011.y, x_1012.z, x_1012.w);
  let x_1015 : vec4<f32> = u_xlat1;
  let x_1016 : vec2<f32> = vec2<f32>(x_1015.x, x_1015.y);
  let x_1017 : f32 = u_xlat18;
  txVec12 = vec3<f32>(x_1016.x, x_1016.y, x_1017);
  let x_1024 : vec3<f32> = txVec12;
  let x_1026 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1024.xy, x_1024.z);
  u_xlat1.x = x_1026;
  let x_1029 : vec3<f32> = u_xlat9;
  let x_1030 : vec2<f32> = vec2<f32>(x_1029.x, x_1029.z);
  let x_1031 : f32 = u_xlat18;
  txVec13 = vec3<f32>(x_1030.x, x_1030.y, x_1031);
  let x_1038 : vec3<f32> = txVec13;
  let x_1040 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1038.xy, x_1038.z);
  u_xlat9.x = x_1040;
  let x_1043 : vec4<f32> = u_xlat5;
  let x_1044 : vec2<f32> = vec2<f32>(x_1043.x, x_1043.y);
  let x_1045 : f32 = u_xlat18;
  txVec14 = vec3<f32>(x_1044.x, x_1044.y, x_1045);
  let x_1052 : vec3<f32> = txVec14;
  let x_1054 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1052.xy, x_1052.z);
  u_xlat27 = x_1054;
  let x_1056 : vec4<f32> = u_xlat5;
  let x_1057 : vec2<f32> = vec2<f32>(x_1056.z, x_1056.w);
  let x_1058 : f32 = u_xlat18;
  txVec15 = vec3<f32>(x_1057.x, x_1057.y, x_1058);
  let x_1065 : vec3<f32> = txVec15;
  let x_1067 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1065.xy, x_1065.z);
  u_xlat18 = x_1067;
  let x_1069 : f32 = u_xlat4.x;
  let x_1070 : f32 = u_xlat27;
  let x_1073 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1069 * x_1070) + x_1073);
  let x_1077 : f32 = u_xlat4.y;
  let x_1078 : f32 = u_xlat18;
  let x_1081 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1077 * x_1078) + x_1081);
  let x_1085 : f32 = u_xlat4.z;
  let x_1087 : f32 = u_xlat9.x;
  let x_1090 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1085 * x_1087) + x_1090);
  let x_1094 : f32 = u_xlat4.w;
  let x_1096 : f32 = u_xlat1.x;
  let x_1099 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1094 * x_1096) + x_1099);
  let x_1105 : f32 = x_61.x_LightShadowData.x;
  u_xlat9.x = (-(x_1105) + 1.0f);
  let x_1111 : vec4<f32> = u_xlat0;
  let x_1113 : vec3<f32> = u_xlat9;
  let x_1117 : vec4<f32> = x_61.x_LightShadowData;
  SV_Target0 = ((vec4<f32>(x_1111.x, x_1111.x, x_1111.x, x_1111.x) * vec4<f32>(x_1113.x, x_1113.x, x_1113.x, x_1113.x)) + vec4<f32>(x_1117.x, x_1117.x, x_1117.x, x_1117.x));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

