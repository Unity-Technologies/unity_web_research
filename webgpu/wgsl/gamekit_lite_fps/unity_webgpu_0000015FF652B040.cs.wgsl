type Arr = array<vec4<f32>, 3u>;

type Arr_1 = array<vec4<f32>, 3u>;

struct CB1 {
  gInvThicknessTable : Arr_1,
  gSampleWeightTable : Arr_1,
  gInvSliceDimension : vec4<f32>,
  AdditionalParams : vec2<f32>,
}

struct S {
  value : array<u32, 2u>,
}

var<private> u_xlati0 : vec2<i32>;

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> gl_GlobalInvocationID : vec3<u32>;

var<private> u_xlat0 : vec4<f32>;

@group(0) @binding(0) var<uniform> x_43 : CB1;

var<private> u_xlat1 : vec4<f32>;

@group(0) @binding(1) var DepthTex : texture_2d<f32>;

@group(0) @binding(3) var samplerDepthTex : sampler;

var<private> u_xlat2 : vec4<f32>;

var<workgroup> TGSM0 : array<S, 1024u>;

var<private> u_xlati12 : vec2<i32>;

var<private> u_xlati1 : vec4<i32>;

var<private> u_xlat12 : vec2<f32>;

var<private> u_xlat13 : vec3<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat4 : vec4<f32>;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

var<private> u_xlat7 : vec4<f32>;

var<private> u_xlat8 : vec4<f32>;

var<private> u_xlati5 : vec4<i32>;

var<private> u_xlat9 : vec4<f32>;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlati8 : vec4<i32>;

var<private> u_xlat28 : vec2<f32>;

var<private> u_xlati6 : vec4<i32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlati7 : vec4<i32>;

@group(0) @binding(2) var Occlusion_origX0X : texture_storage_2d<rg32float, write>;

fn main_1() {
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_15 : vec3<u32> = gl_LocalInvocationID;
  let x_19 : vec3<u32> = gl_GlobalInvocationID;
  u_xlati0 = (bitcast<vec2<i32>>(vec2<u32>(x_15.x, x_15.y)) + bitcast<vec2<i32>>(vec2<u32>(x_19.x, x_19.y)));
  let x_23 : vec2<i32> = u_xlati0;
  u_xlati0 = (x_23 + vec2<i32>(-7i, -7i));
  let x_31 : vec2<i32> = u_xlati0;
  let x_33 : vec2<f32> = vec2<f32>(x_31);
  let x_34 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_33.x, x_33.y, x_34.z, x_34.w);
  let x_36 : vec4<f32> = u_xlat0;
  let x_47 : vec4<f32> = x_43.gInvSliceDimension;
  let x_49 : vec2<f32> = (vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_47.x, x_47.y));
  let x_50 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_49.x, x_49.y, x_50.z, x_50.w);
  let x_63 : vec4<f32> = u_xlat0;
  let x_66 : vec4<f32> = textureGather(0i, DepthTex, samplerDepthTex, vec2<f32>(x_63.x, x_63.y));
  u_xlat1 = vec4<f32>(x_66.x, x_66.z, x_66.y, x_66.w);
  let x_71 : vec4<f32> = u_xlat0;
  let x_74 : vec4<f32> = textureGather(1i, DepthTex, samplerDepthTex, vec2<f32>(x_71.x, x_71.y));
  u_xlat0 = x_74;
  let x_76 : vec4<f32> = u_xlat1;
  let x_77 : vec2<f32> = vec2<f32>(x_76.w, x_76.y);
  let x_78 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_77.x, x_78.y, x_77.y, x_78.w);
  let x_80 : vec4<f32> = u_xlat0;
  let x_81 : vec2<f32> = vec2<f32>(x_80.w, x_80.z);
  let x_82 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_82.x, x_81.x, x_82.z, x_81.y);
  let x_84 : vec4<f32> = u_xlat0;
  let x_85 : vec2<f32> = vec2<f32>(x_84.x, x_84.y);
  let x_86 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_86.x, x_85.x, x_86.z, x_85.y);
  let x_91 : u32 = gl_LocalInvocationID.x;
  u_xlati0.x = (bitcast<i32>(x_91) << bitcast<u32>(1i));
  let x_98 : u32 = gl_LocalInvocationID.y;
  let x_103 : i32 = u_xlati0.x;
  u_xlati0.x = ((bitcast<i32>(x_98) * 64i) + x_103);
  let x_114 : i32 = u_xlati0.x;
  let x_117 : f32 = u_xlat2.x;
  TGSM0[x_114].value[0i] = bitcast<u32>(x_117);
  let x_122 : i32 = u_xlati0.x;
  let x_124 : f32 = u_xlat2.y;
  TGSM0[x_122].value[1i] = bitcast<u32>(x_124);
  let x_129 : i32 = u_xlati0.x;
  u_xlati12.x = (x_129 + 1i);
  let x_133 : i32 = u_xlati12.x;
  let x_135 : f32 = u_xlat2.z;
  TGSM0[x_133].value[0i] = bitcast<u32>(x_135);
  let x_139 : i32 = u_xlati12.x;
  let x_141 : f32 = u_xlat2.w;
  TGSM0[x_139].value[1i] = bitcast<u32>(x_141);
  let x_144 : vec2<i32> = u_xlati0;
  u_xlati12 = (vec2<i32>(x_144.x, x_144.x) + vec2<i32>(32i, 33i));
  let x_151 : i32 = u_xlati12.x;
  let x_153 : f32 = u_xlat1.x;
  TGSM0[x_151].value[0i] = bitcast<u32>(x_153);
  let x_157 : i32 = u_xlati12.x;
  let x_159 : f32 = u_xlat1.y;
  TGSM0[x_157].value[1i] = bitcast<u32>(x_159);
  let x_163 : i32 = u_xlati12.y;
  let x_165 : f32 = u_xlat1.z;
  TGSM0[x_163].value[0i] = bitcast<u32>(x_165);
  let x_169 : i32 = u_xlati12.y;
  let x_171 : f32 = u_xlat1.w;
  TGSM0[x_169].value[1i] = bitcast<u32>(x_171);
  workgroupBarrier();
  let x_176 : u32 = gl_LocalInvocationID.y;
  let x_180 : u32 = gl_LocalInvocationID.x;
  u_xlati0.x = ((bitcast<i32>(x_176) * 32i) + bitcast<i32>(x_180));
  let x_187 : vec2<i32> = u_xlati0;
  u_xlati1 = (vec4<i32>(x_187.x, x_187.x, x_187.x, x_187.x) + vec4<i32>(256i, 264i, 268i, 260i));
  let x_198 : i32 = u_xlati1.w;
  let x_200 : u32 = TGSM0[x_198].value[0i];
  let x_203 : i32 = u_xlati1.w;
  let x_205 : u32 = TGSM0[x_203].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_200), bitcast<f32>(x_205));
  let x_212 : i32 = u_xlati1.y;
  let x_214 : u32 = TGSM0[x_212].value[0i];
  let x_217 : i32 = u_xlati1.y;
  let x_219 : u32 = TGSM0[x_217].value[1i];
  let x_221 : vec2<f32> = vec2<f32>(bitcast<f32>(x_214), bitcast<f32>(x_219));
  let x_222 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_221.x, x_222.y, x_221.y);
  let x_226 : vec3<f32> = u_xlat13;
  u_xlat2 = (vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f) / vec4<f32>(x_226.x, x_226.z, x_226.x, x_226.x));
  let x_230 : vec4<f32> = u_xlat2;
  let x_233 : vec4<f32> = x_43.gInvThicknessTable[0i];
  u_xlat3 = (vec4<f32>(x_230.w, x_230.y, x_230.w, x_230.y) * vec4<f32>(x_233.y, x_233.y, x_233.w, x_233.w));
  let x_237 : vec4<f32> = x_43.gInvThicknessTable[0i];
  let x_241 : vec2<f32> = (vec2<f32>(x_237.y, x_237.w) + vec2<f32>(-0.5f, -0.5f));
  let x_242 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_241.x, x_242.y, x_241.y);
  let x_245 : vec2<f32> = u_xlat12;
  let x_247 : vec4<f32> = u_xlat3;
  let x_250 : vec3<f32> = u_xlat13;
  u_xlat4 = ((vec4<f32>(x_245.x, x_245.y, x_245.x, x_245.x) * vec4<f32>(x_247.x, x_247.y, x_247.x, x_247.x)) + -(vec4<f32>(x_250.x, x_250.x, x_250.x, x_250.x)));
  let x_255 : vec4<f32> = u_xlat4;
  let x_260 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_255.w, x_255.y, x_255.w, x_255.w) * vec4<f32>(x_260.x, x_260.x, x_260.x, x_260.x));
  let x_263 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_263, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_269 : i32 = u_xlati1.z;
  let x_271 : u32 = TGSM0[x_269].value[0i];
  let x_274 : i32 = u_xlati1.z;
  let x_276 : u32 = TGSM0[x_274].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_271), bitcast<f32>(x_276));
  let x_280 : i32 = u_xlati1.x;
  let x_282 : u32 = TGSM0[x_280].value[0i];
  let x_285 : i32 = u_xlati1.x;
  let x_287 : u32 = TGSM0[x_285].value[1i];
  let x_289 : vec2<f32> = vec2<f32>(bitcast<f32>(x_282), bitcast<f32>(x_287));
  let x_290 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_289.x, x_290.y, x_289.y, x_290.w);
  let x_293 : vec4<f32> = u_xlat1;
  let x_295 : vec4<f32> = u_xlat3;
  let x_298 : vec3<f32> = u_xlat13;
  u_xlat6 = ((vec4<f32>(x_293.x, x_293.z, x_293.x, x_293.x) * vec4<f32>(x_295.z, x_295.w, x_295.z, x_295.z)) + -(vec4<f32>(x_298.z, x_298.z, x_298.z, x_298.z)));
  let x_303 : vec2<f32> = u_xlat12;
  let x_305 : vec4<f32> = u_xlat3;
  let x_308 : vec3<f32> = u_xlat13;
  u_xlat7 = ((vec4<f32>(x_303.x, x_303.y, x_303.x, x_303.x) * vec4<f32>(x_305.x, x_305.y, x_305.x, x_305.x)) + -(vec4<f32>(x_308.x, x_308.x, x_308.x, x_308.x)));
  let x_313 : vec4<f32> = u_xlat5;
  let x_314 : vec4<f32> = u_xlat7;
  u_xlat8 = max(x_313, x_314);
  let x_316 : vec4<f32> = u_xlat7;
  let x_319 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_316.w, x_316.y, x_316.w, x_316.w) * vec4<f32>(x_319.x, x_319.x, x_319.x, x_319.x));
  let x_322 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_322, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_326 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_326, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_328 : vec4<f32> = u_xlat4;
  let x_329 : vec4<f32> = u_xlat7;
  u_xlat4 = max(x_328, x_329);
  let x_331 : vec4<f32> = u_xlat4;
  u_xlat4 = min(x_331, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_333 : vec4<f32> = u_xlat4;
  let x_334 : vec4<f32> = u_xlat8;
  u_xlat4 = (x_333 + x_334);
  let x_336 : vec4<f32> = u_xlat7;
  let x_338 : vec4<f32> = u_xlat5;
  let x_340 : vec4<f32> = u_xlat4;
  u_xlat4 = ((-(x_336) * x_338) + x_340);
  let x_342 : vec4<f32> = u_xlat4;
  u_xlat4 = clamp(x_342, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_347 : vec2<i32> = u_xlati0;
  u_xlati5 = (vec4<i32>(x_347.x, x_347.x, x_347.x, x_347.x) + vec4<i32>(392i, 136i, 272i, 520i));
  let x_356 : i32 = u_xlati5.y;
  let x_358 : u32 = TGSM0[x_356].value[0i];
  let x_361 : i32 = u_xlati5.y;
  let x_363 : u32 = TGSM0[x_361].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_358), bitcast<f32>(x_363));
  let x_366 : vec2<f32> = u_xlat12;
  let x_368 : vec4<f32> = u_xlat3;
  let x_371 : vec3<f32> = u_xlat13;
  u_xlat7 = ((vec4<f32>(x_366.x, x_366.y, x_366.x, x_366.x) * vec4<f32>(x_368.x, x_368.y, x_368.x, x_368.x)) + -(vec4<f32>(x_371.x, x_371.x, x_371.x, x_371.x)));
  let x_375 : vec4<f32> = u_xlat7;
  let x_378 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_375.w, x_375.y, x_375.w, x_375.w) * vec4<f32>(x_378.x, x_378.x, x_378.x, x_378.x));
  let x_381 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_381, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_386 : i32 = u_xlati5.x;
  let x_388 : u32 = TGSM0[x_386].value[0i];
  let x_391 : i32 = u_xlati5.x;
  let x_393 : u32 = TGSM0[x_391].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_388), bitcast<f32>(x_393));
  let x_397 : vec2<f32> = u_xlat12;
  let x_399 : vec4<f32> = u_xlat3;
  let x_402 : vec3<f32> = u_xlat13;
  u_xlat9 = ((vec4<f32>(x_397.x, x_397.y, x_397.x, x_397.x) * vec4<f32>(x_399.x, x_399.y, x_399.x, x_399.x)) + -(vec4<f32>(x_402.x, x_402.x, x_402.x, x_402.x)));
  let x_407 : vec4<f32> = u_xlat8;
  let x_408 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_407, x_408);
  let x_410 : vec4<f32> = u_xlat9;
  let x_413 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_410.w, x_410.y, x_410.w, x_410.w) * vec4<f32>(x_413.x, x_413.x, x_413.x, x_413.x));
  let x_416 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_416, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_420 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_420, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_422 : vec4<f32> = u_xlat7;
  let x_423 : vec4<f32> = u_xlat9;
  u_xlat7 = max(x_422, x_423);
  let x_425 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_425, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_427 : vec4<f32> = u_xlat7;
  let x_428 : vec4<f32> = u_xlat10;
  u_xlat7 = (x_427 + x_428);
  let x_430 : vec4<f32> = u_xlat9;
  let x_432 : vec4<f32> = u_xlat8;
  let x_434 : vec4<f32> = u_xlat7;
  u_xlat7 = ((-(x_430) * x_432) + x_434);
  let x_436 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_436, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_440 : vec4<f32> = u_xlat4;
  let x_441 : vec4<f32> = u_xlat7;
  u_xlat4 = (x_440 + x_441);
  let x_443 : vec4<f32> = u_xlat4;
  let x_445 : vec4<f32> = x_43.gSampleWeightTable[0i];
  u_xlat4 = (x_443 * vec4<f32>(x_445.y, x_445.y, x_445.y, x_445.y));
  let x_449 : i32 = u_xlati5.w;
  let x_451 : u32 = TGSM0[x_449].value[0i];
  let x_454 : i32 = u_xlati5.w;
  let x_456 : u32 = TGSM0[x_454].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_451), bitcast<f32>(x_456));
  let x_460 : i32 = u_xlati5.z;
  let x_462 : u32 = TGSM0[x_460].value[0i];
  let x_465 : i32 = u_xlati5.z;
  let x_467 : u32 = TGSM0[x_465].value[1i];
  let x_469 : vec2<f32> = vec2<f32>(bitcast<f32>(x_462), bitcast<f32>(x_467));
  let x_470 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_469.x, x_469.y, x_470.z, x_470.w);
  let x_472 : vec4<f32> = u_xlat1;
  let x_474 : vec4<f32> = u_xlat3;
  let x_477 : vec3<f32> = u_xlat13;
  u_xlat5 = ((vec4<f32>(x_472.x, x_472.y, x_472.x, x_472.x) * vec4<f32>(x_474.z, x_474.w, x_474.z, x_474.z)) + -(vec4<f32>(x_477.z, x_477.z, x_477.z, x_477.z)));
  let x_481 : vec2<f32> = u_xlat12;
  let x_483 : vec4<f32> = u_xlat3;
  let x_486 : vec3<f32> = u_xlat13;
  u_xlat7 = ((vec4<f32>(x_481.x, x_481.y, x_481.x, x_481.x) * vec4<f32>(x_483.z, x_483.w, x_483.z, x_483.z)) + -(vec4<f32>(x_486.z, x_486.z, x_486.z, x_486.z)));
  let x_491 : vec2<i32> = u_xlati0;
  u_xlati8 = (vec4<i32>(x_491.x, x_491.x, x_491.x, x_491.x) + vec4<i32>(8i, 326i, 202i, 330i));
  let x_500 : i32 = u_xlati8.x;
  let x_502 : u32 = TGSM0[x_500].value[0i];
  let x_505 : i32 = u_xlati8.x;
  let x_507 : u32 = TGSM0[x_505].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_502), bitcast<f32>(x_507));
  let x_510 : vec2<f32> = u_xlat12;
  let x_512 : vec4<f32> = u_xlat3;
  let x_515 : vec3<f32> = u_xlat13;
  u_xlat1 = ((vec4<f32>(x_510.x, x_510.y, x_510.x, x_510.x) * vec4<f32>(x_512.z, x_512.w, x_512.z, x_512.z)) + -(vec4<f32>(x_515.z, x_515.z, x_515.z, x_515.z)));
  let x_519 : vec4<f32> = u_xlat1;
  let x_522 : vec2<f32> = x_43.AdditionalParams;
  u_xlat3 = (vec4<f32>(x_519.w, x_519.y, x_519.w, x_519.w) * vec4<f32>(x_522.x, x_522.x, x_522.x, x_522.x));
  let x_525 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_525, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_529 : vec4<f32> = u_xlat3;
  let x_530 : vec4<f32> = u_xlat7;
  u_xlat9 = max(x_529, x_530);
  let x_532 : vec4<f32> = u_xlat7;
  let x_535 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_532.w, x_532.y, x_532.w, x_532.w) * vec4<f32>(x_535.x, x_535.x, x_535.x, x_535.x));
  let x_538 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_538, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_542 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_542, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_544 : vec4<f32> = u_xlat1;
  let x_545 : vec4<f32> = u_xlat7;
  u_xlat1 = max(x_544, x_545);
  let x_547 : vec4<f32> = u_xlat1;
  u_xlat1 = min(x_547, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_549 : vec4<f32> = u_xlat1;
  let x_550 : vec4<f32> = u_xlat9;
  u_xlat1 = (x_549 + x_550);
  let x_552 : vec4<f32> = u_xlat7;
  let x_554 : vec4<f32> = u_xlat3;
  let x_556 : vec4<f32> = u_xlat1;
  u_xlat1 = ((-(x_552) * x_554) + x_556);
  let x_558 : vec4<f32> = u_xlat1;
  u_xlat1 = clamp(x_558, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_562 : vec4<f32> = u_xlat6;
  let x_565 : vec2<f32> = x_43.AdditionalParams;
  u_xlat3 = (vec4<f32>(x_562.w, x_562.y, x_562.w, x_562.w) * vec4<f32>(x_565.x, x_565.x, x_565.x, x_565.x));
  let x_568 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_568, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_572 : vec4<f32> = u_xlat3;
  let x_573 : vec4<f32> = u_xlat5;
  u_xlat7 = max(x_572, x_573);
  let x_575 : vec4<f32> = u_xlat5;
  let x_578 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_575.w, x_575.y, x_575.w, x_575.w) * vec4<f32>(x_578.x, x_578.x, x_578.x, x_578.x));
  let x_581 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_581, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_585 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_585, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_587 : vec4<f32> = u_xlat5;
  let x_588 : vec4<f32> = u_xlat6;
  u_xlat6 = max(x_587, x_588);
  let x_590 : vec4<f32> = u_xlat6;
  u_xlat6 = min(x_590, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_592 : vec4<f32> = u_xlat6;
  let x_593 : vec4<f32> = u_xlat7;
  u_xlat6 = (x_592 + x_593);
  let x_595 : vec4<f32> = u_xlat5;
  let x_597 : vec4<f32> = u_xlat3;
  let x_599 : vec4<f32> = u_xlat6;
  u_xlat3 = ((-(x_595) * x_597) + x_599);
  let x_601 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_601, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_605 : vec4<f32> = u_xlat1;
  let x_606 : vec4<f32> = u_xlat3;
  u_xlat1 = (x_605 + x_606);
  let x_608 : vec4<f32> = u_xlat1;
  let x_610 : vec4<f32> = x_43.gSampleWeightTable[0i];
  u_xlat1 = (x_608 * vec4<f32>(x_610.w, x_610.w, x_610.w, x_610.w));
  let x_613 : vec4<f32> = u_xlat1;
  u_xlat1 = (x_613 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_617 : vec4<f32> = u_xlat4;
  let x_619 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_617 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_619);
  let x_622 : i32 = u_xlati8.z;
  let x_624 : u32 = TGSM0[x_622].value[0i];
  let x_627 : i32 = u_xlati8.z;
  let x_629 : u32 = TGSM0[x_627].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_624), bitcast<f32>(x_629));
  let x_632 : vec4<f32> = u_xlat2;
  let x_635 : vec4<f32> = x_43.gInvThicknessTable[1i];
  u_xlat3 = (vec4<f32>(x_632.w, x_632.y, x_632.w, x_632.y) * vec4<f32>(x_635.x, x_635.x, x_635.z, x_635.z));
  let x_639 : vec4<f32> = x_43.gInvThicknessTable[1i];
  let x_641 : vec2<f32> = (vec2<f32>(x_639.x, x_639.z) + vec2<f32>(-0.5f, -0.5f));
  let x_642 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_641.x, x_641.y, x_642.z, x_642.w);
  let x_644 : vec2<f32> = u_xlat12;
  let x_646 : vec4<f32> = u_xlat3;
  let x_649 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_644.x, x_644.y, x_644.x, x_644.x) * vec4<f32>(x_646.x, x_646.y, x_646.x, x_646.x)) + -(vec4<f32>(x_649.x, x_649.x, x_649.x, x_649.x)));
  let x_653 : vec4<f32> = u_xlat5;
  let x_656 : vec2<f32> = x_43.AdditionalParams;
  u_xlat6 = (vec4<f32>(x_653.w, x_653.y, x_653.w, x_653.w) * vec4<f32>(x_656.x, x_656.x, x_656.x, x_656.x));
  let x_659 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_659, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_664 : i32 = u_xlati8.y;
  let x_666 : u32 = TGSM0[x_664].value[0i];
  let x_669 : i32 = u_xlati8.y;
  let x_671 : u32 = TGSM0[x_669].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_666), bitcast<f32>(x_671));
  let x_676 : i32 = u_xlati8.w;
  let x_678 : u32 = TGSM0[x_676].value[0i];
  let x_681 : i32 = u_xlati8.w;
  let x_683 : u32 = TGSM0[x_681].value[1i];
  u_xlat28 = vec2<f32>(bitcast<f32>(x_678), bitcast<f32>(x_683));
  let x_686 : vec2<f32> = u_xlat28;
  let x_688 : vec4<f32> = u_xlat3;
  let x_691 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_686.x, x_686.y, x_686.x, x_686.x) * vec4<f32>(x_688.x, x_688.y, x_688.x, x_688.x)) + -(vec4<f32>(x_691.x, x_691.x, x_691.x, x_691.x)));
  let x_695 : vec2<f32> = u_xlat12;
  let x_697 : vec4<f32> = u_xlat3;
  let x_700 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_695.x, x_695.y, x_695.x, x_695.x) * vec4<f32>(x_697.x, x_697.y, x_697.x, x_697.x)) + -(vec4<f32>(x_700.x, x_700.x, x_700.x, x_700.x)));
  let x_704 : vec4<f32> = u_xlat6;
  let x_705 : vec4<f32> = u_xlat8;
  u_xlat9 = max(x_704, x_705);
  let x_707 : vec4<f32> = u_xlat8;
  let x_710 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_707.w, x_707.y, x_707.w, x_707.w) * vec4<f32>(x_710.x, x_710.x, x_710.x, x_710.x));
  let x_713 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_713, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_717 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_717, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_719 : vec4<f32> = u_xlat5;
  let x_720 : vec4<f32> = u_xlat8;
  u_xlat5 = max(x_719, x_720);
  let x_722 : vec4<f32> = u_xlat5;
  u_xlat5 = min(x_722, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_724 : vec4<f32> = u_xlat5;
  let x_725 : vec4<f32> = u_xlat9;
  u_xlat5 = (x_724 + x_725);
  let x_727 : vec4<f32> = u_xlat8;
  let x_729 : vec4<f32> = u_xlat6;
  let x_731 : vec4<f32> = u_xlat5;
  u_xlat5 = ((-(x_727) * x_729) + x_731);
  let x_733 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_733, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_738 : vec2<i32> = u_xlati0;
  u_xlati6 = (vec4<i32>(x_738.x, x_738.x, x_738.x, x_738.x) + vec4<i32>(198i, 388i, 140i, 396i));
  let x_747 : i32 = u_xlati6.x;
  let x_749 : u32 = TGSM0[x_747].value[0i];
  let x_752 : i32 = u_xlati6.x;
  let x_754 : u32 = TGSM0[x_752].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_749), bitcast<f32>(x_754));
  let x_757 : vec2<f32> = u_xlat12;
  let x_759 : vec4<f32> = u_xlat3;
  let x_762 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_757.x, x_757.y, x_757.x, x_757.x) * vec4<f32>(x_759.x, x_759.y, x_759.x, x_759.x)) + -(vec4<f32>(x_762.x, x_762.x, x_762.x, x_762.x)));
  let x_766 : vec4<f32> = u_xlat8;
  let x_769 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_766.w, x_766.y, x_766.w, x_766.w) * vec4<f32>(x_769.x, x_769.x, x_769.x, x_769.x));
  let x_772 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_772, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_776 : vec4<f32> = u_xlat7;
  let x_777 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_776, x_777);
  let x_779 : vec4<f32> = u_xlat7;
  let x_782 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_779.w, x_779.y, x_779.w, x_779.w) * vec4<f32>(x_782.x, x_782.x, x_782.x, x_782.x));
  let x_785 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_785, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_789 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_789, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_791 : vec4<f32> = u_xlat7;
  let x_792 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_791, x_792);
  let x_794 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_794, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_796 : vec4<f32> = u_xlat8;
  let x_797 : vec4<f32> = u_xlat10;
  u_xlat8 = (x_796 + x_797);
  let x_799 : vec4<f32> = u_xlat7;
  let x_801 : vec4<f32> = u_xlat9;
  let x_803 : vec4<f32> = u_xlat8;
  u_xlat7 = ((-(x_799) * x_801) + x_803);
  let x_805 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_805, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_809 : vec4<f32> = u_xlat5;
  let x_810 : vec4<f32> = u_xlat7;
  u_xlat5 = (x_809 + x_810);
  let x_812 : vec4<f32> = u_xlat5;
  let x_814 : vec4<f32> = x_43.gSampleWeightTable[1i];
  u_xlat5 = (x_812 * vec4<f32>(x_814.x, x_814.x, x_814.x, x_814.x));
  let x_817 : vec4<f32> = u_xlat5;
  let x_819 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_817 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_819);
  let x_822 : i32 = u_xlati6.z;
  let x_824 : u32 = TGSM0[x_822].value[0i];
  let x_827 : i32 = u_xlati6.z;
  let x_829 : u32 = TGSM0[x_827].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_824), bitcast<f32>(x_829));
  let x_832 : vec4<f32> = u_xlat2;
  let x_835 : vec4<f32> = x_43.gInvThicknessTable[2i];
  u_xlat5 = (vec4<f32>(x_832.w, x_832.y, x_832.w, x_832.y) * vec4<f32>(x_835.x, x_835.x, x_835.w, x_835.w));
  let x_838 : vec4<f32> = u_xlat2;
  let x_840 : vec4<f32> = x_43.gInvThicknessTable[2i];
  u_xlat2 = (x_838 * vec4<f32>(x_840.z, x_840.z, x_840.z, x_840.z));
  let x_844 : vec4<f32> = x_43.gInvThicknessTable[2i];
  let x_847 : vec3<f32> = (vec3<f32>(x_844.x, x_844.w, x_844.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_848 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_847.x, x_848.y, x_847.y, x_847.z);
  let x_850 : vec2<f32> = u_xlat12;
  let x_852 : vec4<f32> = u_xlat5;
  let x_855 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_850.x, x_850.y, x_850.x, x_850.x) * vec4<f32>(x_852.x, x_852.y, x_852.x, x_852.x)) + -(vec4<f32>(x_855.x, x_855.x, x_855.x, x_855.x)));
  let x_859 : vec4<f32> = u_xlat7;
  let x_862 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_859.w, x_859.y, x_859.w, x_859.w) * vec4<f32>(x_862.x, x_862.x, x_862.x, x_862.x));
  let x_865 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_865, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_870 : i32 = u_xlati6.y;
  let x_872 : u32 = TGSM0[x_870].value[0i];
  let x_875 : i32 = u_xlati6.y;
  let x_877 : u32 = TGSM0[x_875].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_872), bitcast<f32>(x_877));
  let x_881 : i32 = u_xlati6.w;
  let x_883 : u32 = TGSM0[x_881].value[0i];
  let x_886 : i32 = u_xlati6.w;
  let x_888 : u32 = TGSM0[x_886].value[1i];
  let x_890 : vec2<f32> = vec2<f32>(bitcast<f32>(x_883), bitcast<f32>(x_888));
  let x_891 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_890.x, x_890.y, x_891.z, x_891.w);
  let x_893 : vec4<f32> = u_xlat3;
  let x_895 : vec4<f32> = u_xlat5;
  let x_898 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_893.x, x_893.y, x_893.x, x_893.x) * vec4<f32>(x_895.x, x_895.y, x_895.x, x_895.x)) + -(vec4<f32>(x_898.x, x_898.x, x_898.x, x_898.x)));
  let x_902 : vec2<f32> = u_xlat12;
  let x_904 : vec4<f32> = u_xlat5;
  let x_907 : vec4<f32> = u_xlat4;
  u_xlat9 = ((vec4<f32>(x_902.x, x_902.y, x_902.x, x_902.x) * vec4<f32>(x_904.x, x_904.y, x_904.x, x_904.x)) + -(vec4<f32>(x_907.x, x_907.x, x_907.x, x_907.x)));
  let x_911 : vec4<f32> = u_xlat8;
  let x_912 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_911, x_912);
  let x_914 : vec4<f32> = u_xlat9;
  let x_917 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_914.w, x_914.y, x_914.w, x_914.w) * vec4<f32>(x_917.x, x_917.x, x_917.x, x_917.x));
  let x_920 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_920, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_924 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_924, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_926 : vec4<f32> = u_xlat7;
  let x_927 : vec4<f32> = u_xlat9;
  u_xlat7 = max(x_926, x_927);
  let x_929 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_929, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_931 : vec4<f32> = u_xlat7;
  let x_932 : vec4<f32> = u_xlat10;
  u_xlat7 = (x_931 + x_932);
  let x_934 : vec4<f32> = u_xlat9;
  let x_936 : vec4<f32> = u_xlat8;
  let x_938 : vec4<f32> = u_xlat7;
  u_xlat7 = ((-(x_934) * x_936) + x_938);
  let x_940 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_940, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_944 : vec2<i32> = u_xlati0;
  u_xlati8 = (vec4<i32>(x_944.x, x_944.x, x_944.x, x_944.x) + vec4<i32>(132i, 450i, 78i, 462i));
  let x_953 : i32 = u_xlati8.x;
  let x_955 : u32 = TGSM0[x_953].value[0i];
  let x_958 : i32 = u_xlati8.x;
  let x_960 : u32 = TGSM0[x_958].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_955), bitcast<f32>(x_960));
  let x_963 : vec2<f32> = u_xlat12;
  let x_965 : vec4<f32> = u_xlat5;
  let x_968 : vec4<f32> = u_xlat4;
  u_xlat9 = ((vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.x) * vec4<f32>(x_965.x, x_965.y, x_965.x, x_965.x)) + -(vec4<f32>(x_968.x, x_968.x, x_968.x, x_968.x)));
  let x_972 : vec4<f32> = u_xlat9;
  let x_975 : vec2<f32> = x_43.AdditionalParams;
  u_xlat10 = (vec4<f32>(x_972.w, x_972.y, x_972.w, x_972.w) * vec4<f32>(x_975.x, x_975.x, x_975.x, x_975.x));
  let x_978 : vec4<f32> = u_xlat10;
  u_xlat10 = clamp(x_978, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_983 : vec4<f32> = u_xlat6;
  let x_984 : vec4<f32> = u_xlat10;
  u_xlat11 = max(x_983, x_984);
  let x_986 : vec4<f32> = u_xlat6;
  let x_989 : vec2<f32> = x_43.AdditionalParams;
  u_xlat6 = (vec4<f32>(x_986.w, x_986.y, x_986.w, x_986.w) * vec4<f32>(x_989.x, x_989.x, x_989.x, x_989.x));
  let x_992 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_992, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_996 : vec4<f32> = u_xlat11;
  u_xlat11 = min(x_996, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_998 : vec4<f32> = u_xlat6;
  let x_999 : vec4<f32> = u_xlat9;
  u_xlat9 = max(x_998, x_999);
  let x_1001 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_1001, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1003 : vec4<f32> = u_xlat9;
  let x_1004 : vec4<f32> = u_xlat11;
  u_xlat9 = (x_1003 + x_1004);
  let x_1006 : vec4<f32> = u_xlat6;
  let x_1008 : vec4<f32> = u_xlat10;
  let x_1010 : vec4<f32> = u_xlat9;
  u_xlat6 = ((-(x_1006) * x_1008) + x_1010);
  let x_1012 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1012, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1016 : vec4<f32> = u_xlat6;
  let x_1017 : vec4<f32> = u_xlat7;
  u_xlat6 = (x_1016 + x_1017);
  let x_1019 : vec4<f32> = u_xlat6;
  let x_1021 : vec4<f32> = x_43.gSampleWeightTable[2i];
  u_xlat6 = (x_1019 * vec4<f32>(x_1021.x, x_1021.x, x_1021.x, x_1021.x));
  let x_1024 : vec4<f32> = u_xlat6;
  let x_1026 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_1024 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_1026);
  let x_1029 : i32 = u_xlati8.z;
  let x_1031 : u32 = TGSM0[x_1029].value[0i];
  let x_1034 : i32 = u_xlati8.z;
  let x_1036 : u32 = TGSM0[x_1034].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1031), bitcast<f32>(x_1036));
  let x_1039 : vec2<f32> = u_xlat12;
  let x_1041 : vec4<f32> = u_xlat5;
  let x_1044 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1039.x, x_1039.y, x_1039.x, x_1039.x) * vec4<f32>(x_1041.z, x_1041.w, x_1041.z, x_1041.z)) + -(vec4<f32>(x_1044.z, x_1044.z, x_1044.z, x_1044.z)));
  let x_1048 : vec4<f32> = u_xlat6;
  let x_1051 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_1048.w, x_1048.y, x_1048.w, x_1048.w) * vec4<f32>(x_1051.x, x_1051.x, x_1051.x, x_1051.x));
  let x_1054 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_1054, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1059 : i32 = u_xlati8.y;
  let x_1061 : u32 = TGSM0[x_1059].value[0i];
  let x_1064 : i32 = u_xlati8.y;
  let x_1066 : u32 = TGSM0[x_1064].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1061), bitcast<f32>(x_1066));
  let x_1070 : i32 = u_xlati8.w;
  let x_1072 : u32 = TGSM0[x_1070].value[0i];
  let x_1075 : i32 = u_xlati8.w;
  let x_1077 : u32 = TGSM0[x_1075].value[1i];
  let x_1079 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1072), bitcast<f32>(x_1077));
  let x_1080 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1079.x, x_1079.y, x_1080.z, x_1080.w);
  let x_1082 : vec4<f32> = u_xlat3;
  let x_1084 : vec4<f32> = u_xlat5;
  let x_1087 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_1082.x, x_1082.y, x_1082.x, x_1082.x) * vec4<f32>(x_1084.z, x_1084.w, x_1084.z, x_1084.z)) + -(vec4<f32>(x_1087.z, x_1087.z, x_1087.z, x_1087.z)));
  let x_1091 : vec2<f32> = u_xlat12;
  let x_1093 : vec4<f32> = u_xlat5;
  let x_1096 : vec4<f32> = u_xlat4;
  u_xlat9 = ((vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.x) * vec4<f32>(x_1093.z, x_1093.w, x_1093.z, x_1093.z)) + -(vec4<f32>(x_1096.z, x_1096.z, x_1096.z, x_1096.z)));
  let x_1100 : vec4<f32> = u_xlat7;
  let x_1101 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_1100, x_1101);
  let x_1103 : vec4<f32> = u_xlat9;
  let x_1106 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_1103.w, x_1103.y, x_1103.w, x_1103.w) * vec4<f32>(x_1106.x, x_1106.x, x_1106.x, x_1106.x));
  let x_1109 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_1109, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1113 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_1113, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1115 : vec4<f32> = u_xlat6;
  let x_1116 : vec4<f32> = u_xlat9;
  u_xlat6 = max(x_1115, x_1116);
  let x_1118 : vec4<f32> = u_xlat6;
  u_xlat6 = min(x_1118, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1120 : vec4<f32> = u_xlat6;
  let x_1121 : vec4<f32> = u_xlat10;
  u_xlat6 = (x_1120 + x_1121);
  let x_1123 : vec4<f32> = u_xlat9;
  let x_1125 : vec4<f32> = u_xlat7;
  let x_1127 : vec4<f32> = u_xlat6;
  u_xlat6 = ((-(x_1123) * x_1125) + x_1127);
  let x_1129 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1129, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1134 : vec2<i32> = u_xlati0;
  u_xlati7 = (vec4<i32>(x_1134.x, x_1134.x, x_1134.x, x_1134.x) + vec4<i32>(66i, 458i, 70i, 454i));
  let x_1143 : i32 = u_xlati7.x;
  let x_1145 : u32 = TGSM0[x_1143].value[0i];
  let x_1148 : i32 = u_xlati7.x;
  let x_1150 : u32 = TGSM0[x_1148].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1145), bitcast<f32>(x_1150));
  let x_1153 : vec2<f32> = u_xlat12;
  let x_1155 : vec4<f32> = u_xlat5;
  let x_1158 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_1153.x, x_1153.y, x_1153.x, x_1153.x) * vec4<f32>(x_1155.z, x_1155.w, x_1155.z, x_1155.z)) + -(vec4<f32>(x_1158.z, x_1158.z, x_1158.z, x_1158.z)));
  let x_1162 : vec4<f32> = u_xlat5;
  let x_1165 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_1162.w, x_1162.y, x_1162.w, x_1162.w) * vec4<f32>(x_1165.x, x_1165.x, x_1165.x, x_1165.x));
  let x_1168 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_1168, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1172 : vec4<f32> = u_xlat8;
  let x_1173 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_1172, x_1173);
  let x_1175 : vec4<f32> = u_xlat8;
  let x_1178 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_1175.w, x_1175.y, x_1175.w, x_1175.w) * vec4<f32>(x_1178.x, x_1178.x, x_1178.x, x_1178.x));
  let x_1181 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_1181, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1185 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_1185, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1187 : vec4<f32> = u_xlat5;
  let x_1188 : vec4<f32> = u_xlat8;
  u_xlat5 = max(x_1187, x_1188);
  let x_1190 : vec4<f32> = u_xlat5;
  u_xlat5 = min(x_1190, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1192 : vec4<f32> = u_xlat5;
  let x_1193 : vec4<f32> = u_xlat10;
  u_xlat5 = (x_1192 + x_1193);
  let x_1195 : vec4<f32> = u_xlat8;
  let x_1197 : vec4<f32> = u_xlat9;
  let x_1199 : vec4<f32> = u_xlat5;
  u_xlat5 = ((-(x_1195) * x_1197) + x_1199);
  let x_1201 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1201, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1205 : vec4<f32> = u_xlat5;
  let x_1206 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_1205 + x_1206);
  let x_1208 : vec4<f32> = u_xlat5;
  let x_1210 : vec4<f32> = x_43.gSampleWeightTable[2i];
  u_xlat5 = (x_1208 * vec4<f32>(x_1210.w, x_1210.w, x_1210.w, x_1210.w));
  let x_1213 : vec4<f32> = u_xlat5;
  let x_1215 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_1213 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_1215);
  let x_1218 : i32 = u_xlati7.y;
  let x_1220 : u32 = TGSM0[x_1218].value[0i];
  let x_1223 : i32 = u_xlati7.y;
  let x_1225 : u32 = TGSM0[x_1223].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1220), bitcast<f32>(x_1225));
  let x_1228 : vec2<f32> = u_xlat12;
  let x_1230 : vec4<f32> = u_xlat3;
  let x_1233 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_1228.x, x_1228.y, x_1228.x, x_1228.x) * vec4<f32>(x_1230.z, x_1230.w, x_1230.z, x_1230.z)) + -(vec4<f32>(x_1233.y, x_1233.y, x_1233.y, x_1233.y)));
  let x_1238 : i32 = u_xlati7.z;
  let x_1240 : u32 = TGSM0[x_1238].value[0i];
  let x_1243 : i32 = u_xlati7.z;
  let x_1245 : u32 = TGSM0[x_1243].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1240), bitcast<f32>(x_1245));
  let x_1249 : i32 = u_xlati7.w;
  let x_1251 : u32 = TGSM0[x_1249].value[0i];
  let x_1254 : i32 = u_xlati7.w;
  let x_1256 : u32 = TGSM0[x_1254].value[1i];
  let x_1258 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1251), bitcast<f32>(x_1256));
  let x_1259 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1258.x, x_1258.y, x_1259.z, x_1259.w);
  let x_1261 : vec4<f32> = u_xlat3;
  let x_1263 : vec4<f32> = u_xlat3;
  let x_1266 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1261.x, x_1261.y, x_1261.x, x_1261.x) * vec4<f32>(x_1263.z, x_1263.w, x_1263.z, x_1263.z)) + -(vec4<f32>(x_1266.y, x_1266.y, x_1266.y, x_1266.y)));
  let x_1270 : vec2<f32> = u_xlat12;
  let x_1272 : vec4<f32> = u_xlat3;
  let x_1275 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_1270.x, x_1270.y, x_1270.x, x_1270.x) * vec4<f32>(x_1272.z, x_1272.w, x_1272.z, x_1272.z)) + -(vec4<f32>(x_1275.y, x_1275.y, x_1275.y, x_1275.y)));
  let x_1279 : vec4<f32> = u_xlat7;
  let x_1282 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_1279.w, x_1279.y, x_1279.w, x_1279.w) * vec4<f32>(x_1282.x, x_1282.x, x_1282.x, x_1282.x));
  let x_1285 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_1285, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1289 : vec4<f32> = u_xlat5;
  let x_1290 : vec4<f32> = u_xlat8;
  u_xlat9 = max(x_1289, x_1290);
  let x_1292 : vec4<f32> = u_xlat5;
  let x_1295 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_1292.w, x_1292.y, x_1292.w, x_1292.w) * vec4<f32>(x_1295.x, x_1295.x, x_1295.x, x_1295.x));
  let x_1298 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1298, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1302 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_1302, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1304 : vec4<f32> = u_xlat5;
  let x_1305 : vec4<f32> = u_xlat7;
  u_xlat7 = max(x_1304, x_1305);
  let x_1307 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_1307, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1309 : vec4<f32> = u_xlat7;
  let x_1310 : vec4<f32> = u_xlat9;
  u_xlat7 = (x_1309 + x_1310);
  let x_1312 : vec4<f32> = u_xlat5;
  let x_1314 : vec4<f32> = u_xlat8;
  let x_1316 : vec4<f32> = u_xlat7;
  u_xlat5 = ((-(x_1312) * x_1314) + x_1316);
  let x_1318 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1318, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1322 : vec2<i32> = u_xlati0;
  u_xlati7 = (vec4<i32>(x_1322.x, x_1322.x, x_1322.x, x_1322.x) + vec4<i32>(74i, 334i, 194i, 322i));
  let x_1331 : i32 = u_xlati7.x;
  let x_1333 : u32 = TGSM0[x_1331].value[0i];
  let x_1336 : i32 = u_xlati7.x;
  let x_1338 : u32 = TGSM0[x_1336].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1333), bitcast<f32>(x_1338));
  let x_1341 : vec2<f32> = u_xlat12;
  let x_1343 : vec4<f32> = u_xlat3;
  let x_1346 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_1341.x, x_1341.y, x_1341.x, x_1341.x) * vec4<f32>(x_1343.z, x_1343.w, x_1343.z, x_1343.z)) + -(vec4<f32>(x_1346.y, x_1346.y, x_1346.y, x_1346.y)));
  let x_1350 : vec4<f32> = u_xlat8;
  let x_1353 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_1350.w, x_1350.y, x_1350.w, x_1350.w) * vec4<f32>(x_1353.x, x_1353.x, x_1353.x, x_1353.x));
  let x_1356 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_1356, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1360 : vec4<f32> = u_xlat6;
  let x_1361 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_1360, x_1361);
  let x_1363 : vec4<f32> = u_xlat6;
  let x_1366 : vec2<f32> = x_43.AdditionalParams;
  u_xlat6 = (vec4<f32>(x_1363.w, x_1363.y, x_1363.w, x_1363.w) * vec4<f32>(x_1366.x, x_1366.x, x_1366.x, x_1366.x));
  let x_1369 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1369, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1373 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_1373, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1375 : vec4<f32> = u_xlat6;
  let x_1376 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_1375, x_1376);
  let x_1378 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_1378, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1380 : vec4<f32> = u_xlat8;
  let x_1381 : vec4<f32> = u_xlat10;
  u_xlat8 = (x_1380 + x_1381);
  let x_1383 : vec4<f32> = u_xlat6;
  let x_1385 : vec4<f32> = u_xlat9;
  let x_1387 : vec4<f32> = u_xlat8;
  u_xlat6 = ((-(x_1383) * x_1385) + x_1387);
  let x_1389 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1389, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1393 : vec4<f32> = u_xlat5;
  let x_1394 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_1393 + x_1394);
  let x_1397 : i32 = u_xlati7.y;
  let x_1399 : u32 = TGSM0[x_1397].value[0i];
  let x_1402 : i32 = u_xlati7.y;
  let x_1404 : u32 = TGSM0[x_1402].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1399), bitcast<f32>(x_1404));
  let x_1407 : vec2<f32> = u_xlat12;
  let x_1409 : vec4<f32> = u_xlat3;
  let x_1412 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1407.x, x_1407.y, x_1407.x, x_1407.x) * vec4<f32>(x_1409.z, x_1409.w, x_1409.z, x_1409.z)) + -(vec4<f32>(x_1412.y, x_1412.y, x_1412.y, x_1412.y)));
  let x_1417 : i32 = u_xlati7.z;
  let x_1419 : u32 = TGSM0[x_1417].value[0i];
  let x_1422 : i32 = u_xlati7.z;
  let x_1424 : u32 = TGSM0[x_1422].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1419), bitcast<f32>(x_1424));
  let x_1428 : i32 = u_xlati7.w;
  let x_1430 : u32 = TGSM0[x_1428].value[0i];
  let x_1433 : i32 = u_xlati7.w;
  let x_1435 : u32 = TGSM0[x_1433].value[1i];
  let x_1437 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1430), bitcast<f32>(x_1435));
  let x_1438 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1437.x, x_1437.y, x_1438.z, x_1438.w);
  let x_1440 : vec4<f32> = u_xlat3;
  let x_1442 : vec4<f32> = u_xlat3;
  let x_1445 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_1440.x, x_1440.y, x_1440.x, x_1440.x) * vec4<f32>(x_1442.z, x_1442.w, x_1442.z, x_1442.z)) + -(vec4<f32>(x_1445.y, x_1445.y, x_1445.y, x_1445.y)));
  let x_1449 : vec2<f32> = u_xlat12;
  let x_1451 : vec4<f32> = u_xlat3;
  let x_1454 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_1449.x, x_1449.y, x_1449.x, x_1449.x) * vec4<f32>(x_1451.z, x_1451.w, x_1451.z, x_1451.z)) + -(vec4<f32>(x_1454.y, x_1454.y, x_1454.y, x_1454.y)));
  let x_1458 : vec4<f32> = u_xlat8;
  let x_1461 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_1458.w, x_1458.y, x_1458.w, x_1458.w) * vec4<f32>(x_1461.x, x_1461.x, x_1461.x, x_1461.x));
  let x_1464 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_1464, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1468 : vec4<f32> = u_xlat6;
  let x_1469 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_1468, x_1469);
  let x_1471 : vec4<f32> = u_xlat6;
  let x_1474 : vec2<f32> = x_43.AdditionalParams;
  u_xlat6 = (vec4<f32>(x_1471.w, x_1471.y, x_1471.w, x_1471.w) * vec4<f32>(x_1474.x, x_1474.x, x_1474.x, x_1474.x));
  let x_1477 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1477, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1481 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_1481, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1483 : vec4<f32> = u_xlat6;
  let x_1484 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_1483, x_1484);
  let x_1486 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_1486, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1488 : vec4<f32> = u_xlat8;
  let x_1489 : vec4<f32> = u_xlat10;
  u_xlat8 = (x_1488 + x_1489);
  let x_1491 : vec4<f32> = u_xlat6;
  let x_1493 : vec4<f32> = u_xlat9;
  let x_1495 : vec4<f32> = u_xlat8;
  u_xlat6 = ((-(x_1491) * x_1493) + x_1495);
  let x_1497 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1497, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1501 : vec4<f32> = u_xlat5;
  let x_1502 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_1501 + x_1502);
  let x_1504 : vec2<i32> = u_xlati0;
  u_xlati6 = (vec4<i32>(x_1504.x, x_1504.x, x_1504.x, x_1504.x) + vec4<i32>(206i, 524i, 4i, 516i));
  let x_1513 : i32 = u_xlati6.x;
  let x_1515 : u32 = TGSM0[x_1513].value[0i];
  let x_1518 : i32 = u_xlati6.x;
  let x_1520 : u32 = TGSM0[x_1518].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1515), bitcast<f32>(x_1520));
  let x_1523 : vec2<f32> = u_xlat12;
  let x_1525 : vec4<f32> = u_xlat3;
  let x_1528 : vec4<f32> = u_xlat4;
  u_xlat3 = ((vec4<f32>(x_1523.x, x_1523.y, x_1523.x, x_1523.x) * vec4<f32>(x_1525.z, x_1525.w, x_1525.z, x_1525.z)) + -(vec4<f32>(x_1528.y, x_1528.y, x_1528.y, x_1528.y)));
  let x_1532 : vec4<f32> = u_xlat3;
  let x_1535 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_1532.w, x_1532.y, x_1532.w, x_1532.w) * vec4<f32>(x_1535.x, x_1535.x, x_1535.x, x_1535.x));
  let x_1538 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_1538, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1542 : vec4<f32> = u_xlat7;
  let x_1543 : vec4<f32> = u_xlat8;
  u_xlat9 = max(x_1542, x_1543);
  let x_1545 : vec4<f32> = u_xlat7;
  let x_1548 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_1545.w, x_1545.y, x_1545.w, x_1545.w) * vec4<f32>(x_1548.x, x_1548.x, x_1548.x, x_1548.x));
  let x_1551 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_1551, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1555 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_1555, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1557 : vec4<f32> = u_xlat3;
  let x_1558 : vec4<f32> = u_xlat7;
  u_xlat3 = max(x_1557, x_1558);
  let x_1560 : vec4<f32> = u_xlat3;
  u_xlat3 = min(x_1560, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1562 : vec4<f32> = u_xlat3;
  let x_1563 : vec4<f32> = u_xlat9;
  u_xlat3 = (x_1562 + x_1563);
  let x_1565 : vec4<f32> = u_xlat7;
  let x_1567 : vec4<f32> = u_xlat8;
  let x_1569 : vec4<f32> = u_xlat3;
  u_xlat3 = ((-(x_1565) * x_1567) + x_1569);
  let x_1571 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_1571, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1575 : vec4<f32> = u_xlat3;
  let x_1576 : vec4<f32> = u_xlat5;
  u_xlat3 = (x_1575 + x_1576);
  let x_1578 : vec4<f32> = u_xlat3;
  let x_1580 : vec4<f32> = x_43.gSampleWeightTable[1i];
  u_xlat3 = (x_1578 * vec4<f32>(x_1580.z, x_1580.z, x_1580.z, x_1580.z));
  let x_1583 : vec4<f32> = u_xlat3;
  let x_1587 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_1583 * vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f)) + x_1587);
  let x_1590 : i32 = u_xlati6.y;
  let x_1592 : u32 = TGSM0[x_1590].value[0i];
  let x_1595 : i32 = u_xlati6.y;
  let x_1597 : u32 = TGSM0[x_1595].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1592), bitcast<f32>(x_1597));
  let x_1600 : vec2<f32> = u_xlat12;
  let x_1602 : vec4<f32> = u_xlat2;
  let x_1605 : vec4<f32> = u_xlat4;
  u_xlat3 = ((vec4<f32>(x_1600.x, x_1600.y, x_1600.x, x_1600.x) * vec4<f32>(x_1602.w, x_1602.y, x_1602.w, x_1602.w)) + -(vec4<f32>(x_1605.w, x_1605.w, x_1605.w, x_1605.w)));
  let x_1610 : i32 = u_xlati6.z;
  let x_1612 : u32 = TGSM0[x_1610].value[0i];
  let x_1615 : i32 = u_xlati6.z;
  let x_1617 : u32 = TGSM0[x_1615].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1612), bitcast<f32>(x_1617));
  let x_1621 : i32 = u_xlati6.w;
  let x_1623 : u32 = TGSM0[x_1621].value[0i];
  let x_1626 : i32 = u_xlati6.w;
  let x_1628 : u32 = TGSM0[x_1626].value[1i];
  let x_1630 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1623), bitcast<f32>(x_1628));
  let x_1631 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1630.x, x_1630.y, x_1631.z, x_1631.w);
  let x_1633 : vec4<f32> = u_xlat4;
  let x_1635 : vec4<f32> = u_xlat2;
  let x_1638 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_1633.x, x_1633.y, x_1633.x, x_1633.x) * vec4<f32>(x_1635.w, x_1635.y, x_1635.w, x_1635.w)) + -(vec4<f32>(x_1638.w, x_1638.w, x_1638.w, x_1638.w)));
  let x_1642 : vec2<f32> = u_xlat12;
  let x_1644 : vec4<f32> = u_xlat2;
  let x_1647 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1642.x, x_1642.y, x_1642.x, x_1642.x) * vec4<f32>(x_1644.w, x_1644.y, x_1644.w, x_1644.w)) + -(vec4<f32>(x_1647.w, x_1647.w, x_1647.w, x_1647.w)));
  let x_1651 : vec4<f32> = u_xlat6;
  let x_1654 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_1651.w, x_1651.y, x_1651.w, x_1651.w) * vec4<f32>(x_1654.x, x_1654.x, x_1654.x, x_1654.x));
  let x_1657 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_1657, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1661 : vec4<f32> = u_xlat3;
  let x_1662 : vec4<f32> = u_xlat7;
  u_xlat8 = max(x_1661, x_1662);
  let x_1664 : vec4<f32> = u_xlat3;
  let x_1667 : vec2<f32> = x_43.AdditionalParams;
  u_xlat3 = (vec4<f32>(x_1664.w, x_1664.y, x_1664.w, x_1664.w) * vec4<f32>(x_1667.x, x_1667.x, x_1667.x, x_1667.x));
  let x_1670 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_1670, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1674 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_1674, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1676 : vec4<f32> = u_xlat3;
  let x_1677 : vec4<f32> = u_xlat6;
  u_xlat6 = max(x_1676, x_1677);
  let x_1679 : vec4<f32> = u_xlat6;
  u_xlat6 = min(x_1679, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1681 : vec4<f32> = u_xlat6;
  let x_1682 : vec4<f32> = u_xlat8;
  u_xlat6 = (x_1681 + x_1682);
  let x_1684 : vec4<f32> = u_xlat3;
  let x_1686 : vec4<f32> = u_xlat7;
  let x_1688 : vec4<f32> = u_xlat6;
  u_xlat3 = ((-(x_1684) * x_1686) + x_1688);
  let x_1690 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_1690, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1694 : vec2<i32> = u_xlati0;
  u_xlati6 = (vec4<i32>(x_1694.x, x_1694.x, x_1694.x, x_1694.x) + vec4<i32>(12i, 400i, 128i, 384i));
  let x_1703 : i32 = u_xlati0.x;
  u_xlati0.x = (x_1703 + 144i);
  let x_1708 : i32 = u_xlati0.x;
  let x_1710 : u32 = TGSM0[x_1708].value[0i];
  let x_1713 : i32 = u_xlati0.x;
  let x_1715 : u32 = TGSM0[x_1713].value[1i];
  let x_1717 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1710), bitcast<f32>(x_1715));
  let x_1718 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1717.x, x_1717.y, x_1718.z, x_1718.w);
  let x_1720 : vec4<f32> = u_xlat0;
  let x_1722 : vec4<f32> = u_xlat2;
  let x_1724 : vec4<f32> = u_xlat4;
  u_xlat0 = ((vec4<f32>(x_1720.x, x_1720.y, x_1720.x, x_1720.x) * x_1722) + -(vec4<f32>(x_1724.w, x_1724.w, x_1724.w, x_1724.w)));
  let x_1729 : i32 = u_xlati6.x;
  let x_1731 : u32 = TGSM0[x_1729].value[0i];
  let x_1734 : i32 = u_xlati6.x;
  let x_1736 : u32 = TGSM0[x_1734].value[1i];
  let x_1738 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1731), bitcast<f32>(x_1736));
  let x_1739 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1738.x, x_1739.y, x_1738.y, x_1739.w);
  let x_1741 : vec4<f32> = u_xlat2;
  let x_1743 : vec4<f32> = u_xlat2;
  let x_1746 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_1741.x, x_1741.z, x_1741.x, x_1741.x) * vec4<f32>(x_1743.w, x_1743.y, x_1743.w, x_1743.w)) + -(vec4<f32>(x_1746.w, x_1746.w, x_1746.w, x_1746.w)));
  let x_1750 : vec4<f32> = u_xlat7;
  let x_1753 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_1750.w, x_1750.y, x_1750.w, x_1750.w) * vec4<f32>(x_1753.x, x_1753.x, x_1753.x, x_1753.x));
  let x_1756 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_1756, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1760 : vec4<f32> = u_xlat5;
  let x_1761 : vec4<f32> = u_xlat8;
  u_xlat9 = max(x_1760, x_1761);
  let x_1763 : vec4<f32> = u_xlat5;
  let x_1766 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_1763.w, x_1763.y, x_1763.w, x_1763.w) * vec4<f32>(x_1766.x, x_1766.x, x_1766.x, x_1766.x));
  let x_1769 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1769, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1773 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_1773, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1775 : vec4<f32> = u_xlat5;
  let x_1776 : vec4<f32> = u_xlat7;
  u_xlat7 = max(x_1775, x_1776);
  let x_1778 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_1778, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1780 : vec4<f32> = u_xlat7;
  let x_1781 : vec4<f32> = u_xlat9;
  u_xlat7 = (x_1780 + x_1781);
  let x_1783 : vec4<f32> = u_xlat5;
  let x_1785 : vec4<f32> = u_xlat8;
  let x_1787 : vec4<f32> = u_xlat7;
  u_xlat5 = ((-(x_1783) * x_1785) + x_1787);
  let x_1789 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1789, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1793 : vec4<f32> = u_xlat3;
  let x_1794 : vec4<f32> = u_xlat5;
  u_xlat3 = (x_1793 + x_1794);
  let x_1797 : i32 = u_xlati6.y;
  let x_1799 : u32 = TGSM0[x_1797].value[0i];
  let x_1802 : i32 = u_xlati6.y;
  let x_1804 : u32 = TGSM0[x_1802].value[1i];
  let x_1806 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1799), bitcast<f32>(x_1804));
  let x_1807 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1806.x, x_1807.y, x_1806.y, x_1807.w);
  let x_1809 : vec4<f32> = u_xlat2;
  let x_1811 : vec4<f32> = u_xlat2;
  let x_1814 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_1809.x, x_1809.z, x_1809.x, x_1809.x) * vec4<f32>(x_1811.w, x_1811.y, x_1811.w, x_1811.w)) + -(vec4<f32>(x_1814.w, x_1814.w, x_1814.w, x_1814.w)));
  let x_1819 : i32 = u_xlati6.z;
  let x_1821 : u32 = TGSM0[x_1819].value[0i];
  let x_1824 : i32 = u_xlati6.z;
  let x_1826 : u32 = TGSM0[x_1824].value[1i];
  let x_1828 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1821), bitcast<f32>(x_1826));
  let x_1829 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1828.x, x_1829.y, x_1828.y, x_1829.w);
  let x_1832 : i32 = u_xlati6.w;
  let x_1834 : u32 = TGSM0[x_1832].value[0i];
  let x_1837 : i32 = u_xlati6.w;
  let x_1839 : u32 = TGSM0[x_1837].value[1i];
  let x_1841 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1834), bitcast<f32>(x_1839));
  let x_1842 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1841.x, x_1841.y, x_1842.z, x_1842.w);
  let x_1844 : vec4<f32> = u_xlat4;
  let x_1846 : vec4<f32> = u_xlat2;
  let x_1849 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1844.x, x_1844.y, x_1844.x, x_1844.x) * vec4<f32>(x_1846.w, x_1846.y, x_1846.w, x_1846.w)) + -(vec4<f32>(x_1849.w, x_1849.w, x_1849.w, x_1849.w)));
  let x_1853 : vec4<f32> = u_xlat2;
  let x_1855 : vec4<f32> = u_xlat2;
  let x_1858 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec4<f32>(x_1853.x, x_1853.z, x_1853.x, x_1853.x) * vec4<f32>(x_1855.w, x_1855.y, x_1855.w, x_1855.w)) + -(vec4<f32>(x_1858.w, x_1858.w, x_1858.w, x_1858.w)));
  let x_1862 : vec4<f32> = u_xlat2;
  let x_1865 : vec2<f32> = x_43.AdditionalParams;
  u_xlat4 = (vec4<f32>(x_1862.w, x_1862.y, x_1862.w, x_1862.w) * vec4<f32>(x_1865.x, x_1865.x, x_1865.x, x_1865.x));
  let x_1868 : vec4<f32> = u_xlat4;
  u_xlat4 = clamp(x_1868, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1872 : vec4<f32> = u_xlat4;
  let x_1873 : vec4<f32> = u_xlat5;
  u_xlat7 = max(x_1872, x_1873);
  let x_1875 : vec4<f32> = u_xlat5;
  let x_1878 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_1875.w, x_1875.y, x_1875.w, x_1875.w) * vec4<f32>(x_1878.x, x_1878.x, x_1878.x, x_1878.x));
  let x_1881 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1881, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1885 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_1885, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1887 : vec4<f32> = u_xlat2;
  let x_1888 : vec4<f32> = u_xlat5;
  u_xlat2 = max(x_1887, x_1888);
  let x_1890 : vec4<f32> = u_xlat2;
  u_xlat2 = min(x_1890, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1892 : vec4<f32> = u_xlat2;
  let x_1893 : vec4<f32> = u_xlat7;
  u_xlat2 = (x_1892 + x_1893);
  let x_1895 : vec4<f32> = u_xlat5;
  let x_1897 : vec4<f32> = u_xlat4;
  let x_1899 : vec4<f32> = u_xlat2;
  u_xlat2 = ((-(x_1895) * x_1897) + x_1899);
  let x_1901 : vec4<f32> = u_xlat2;
  u_xlat2 = clamp(x_1901, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1905 : vec4<f32> = u_xlat2;
  let x_1906 : vec4<f32> = u_xlat3;
  u_xlat2 = (x_1905 + x_1906);
  let x_1908 : vec4<f32> = u_xlat0;
  let x_1911 : vec2<f32> = x_43.AdditionalParams;
  u_xlat3 = (vec4<f32>(x_1908.w, x_1908.y, x_1908.w, x_1908.w) * vec4<f32>(x_1911.x, x_1911.x, x_1911.x, x_1911.x));
  let x_1914 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_1914, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1918 : vec4<f32> = u_xlat3;
  let x_1919 : vec4<f32> = u_xlat6;
  u_xlat4 = max(x_1918, x_1919);
  let x_1921 : vec4<f32> = u_xlat6;
  let x_1924 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_1921.w, x_1921.y, x_1921.w, x_1921.w) * vec4<f32>(x_1924.x, x_1924.x, x_1924.x, x_1924.x));
  let x_1927 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1927, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1931 : vec4<f32> = u_xlat4;
  u_xlat4 = min(x_1931, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1933 : vec4<f32> = u_xlat0;
  let x_1934 : vec4<f32> = u_xlat5;
  u_xlat0 = max(x_1933, x_1934);
  let x_1936 : vec4<f32> = u_xlat0;
  u_xlat0 = min(x_1936, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1938 : vec4<f32> = u_xlat0;
  let x_1939 : vec4<f32> = u_xlat4;
  u_xlat0 = (x_1938 + x_1939);
  let x_1941 : vec4<f32> = u_xlat5;
  let x_1943 : vec4<f32> = u_xlat3;
  let x_1945 : vec4<f32> = u_xlat0;
  u_xlat0 = ((-(x_1941) * x_1943) + x_1945);
  let x_1947 : vec4<f32> = u_xlat0;
  u_xlat0 = clamp(x_1947, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1951 : vec4<f32> = u_xlat0;
  let x_1952 : vec4<f32> = u_xlat2;
  u_xlat0 = (x_1951 + x_1952);
  let x_1954 : vec4<f32> = u_xlat0;
  let x_1956 : vec4<f32> = x_43.gSampleWeightTable[2i];
  u_xlat0 = (x_1954 * vec4<f32>(x_1956.z, x_1956.z, x_1956.z, x_1956.z));
  let x_1959 : vec4<f32> = u_xlat0;
  let x_1961 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_1959 * vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f)) + x_1961);
  let x_1963 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_1963 + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_1968 : vec2<f32> = x_43.AdditionalParams;
  let x_1970 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_1968.y, x_1968.y, x_1968.y, x_1968.y) * x_1970) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1977 : vec3<u32> = gl_GlobalInvocationID;
  let x_1980 : vec4<f32> = u_xlat0;
  textureStore(Occlusion_origX0X, bitcast<vec2<i32>>(vec2<u32>(x_1977.x, x_1977.y)), x_1980);
  return;
}

@compute @workgroup_size(16i, 16i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>, @builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  main_1();
}

