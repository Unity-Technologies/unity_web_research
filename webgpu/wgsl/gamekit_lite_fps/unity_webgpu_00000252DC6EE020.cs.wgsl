type Arr = array<vec4<f32>, 3u>;

type Arr_1 = array<vec4<f32>, 3u>;

struct CB1 {
  gInvThicknessTable : Arr_1,
  gSampleWeightTable : Arr_1,
  gInvSliceDimension : vec4<f32>,
  AdditionalParams : vec2<f32>,
}

struct S {
  value : array<u32, 2u>,
}

var<private> u_xlati0 : vec2<i32>;

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> gl_GlobalInvocationID : vec3<u32>;

var<private> u_xlat0 : vec4<f32>;

@group(0) @binding(0) var<uniform> x_43 : CB1;

var<private> u_xlat1 : vec4<f32>;

@group(0) @binding(1) var DepthTex : texture_2d_array<f32>;

@group(0) @binding(3) var samplerDepthTex : sampler;

var<private> u_xlat2 : vec4<f32>;

var<workgroup> TGSM0 : array<S, 256u>;

var<private> u_xlati12 : vec2<i32>;

var<private> u_xlati1 : vec4<i32>;

var<private> u_xlat12 : vec2<f32>;

var<private> u_xlat13 : vec3<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat4 : vec4<f32>;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

var<private> u_xlat7 : vec4<f32>;

var<private> u_xlat8 : vec4<f32>;

var<private> u_xlati5 : vec4<i32>;

var<private> u_xlat9 : vec4<f32>;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlati8 : vec4<i32>;

var<private> u_xlat28 : vec2<f32>;

var<private> u_xlati6 : vec4<i32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlati7 : vec4<i32>;

var<private> u_xlatu2 : vec4<u32>;

@group(0) @binding(2) var Occlusion_origX0X : texture_storage_2d<rg32float, write>;

fn main_1() {
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_15 : vec3<u32> = gl_LocalInvocationID;
  let x_19 : vec3<u32> = gl_GlobalInvocationID;
  u_xlati0 = (bitcast<vec2<i32>>(vec2<u32>(x_15.x, x_15.y)) + bitcast<vec2<i32>>(vec2<u32>(x_19.x, x_19.y)));
  let x_23 : vec2<i32> = u_xlati0;
  u_xlati0 = (x_23 + vec2<i32>(-3i, -3i));
  let x_31 : vec2<i32> = u_xlati0;
  let x_33 : vec2<f32> = vec2<f32>(x_31);
  let x_34 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_33.x, x_33.y, x_34.z, x_34.w);
  let x_36 : vec4<f32> = u_xlat0;
  let x_47 : vec4<f32> = x_43.gInvSliceDimension;
  let x_49 : vec2<f32> = (vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_47.x, x_47.y));
  let x_50 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_49.x, x_49.y, x_50.z, x_50.w);
  let x_55 : u32 = gl_GlobalInvocationID.z;
  u_xlat0.z = f32(x_55);
  let x_71 : vec4<f32> = u_xlat0;
  let x_74 : vec4<f32> = textureGather(0i, DepthTex, samplerDepthTex, vec3<f32>(x_71.x, x_71.y, x_71.z).xy, i32(round(vec3<f32>(x_71.x, x_71.y, x_71.z).z)));
  u_xlat1 = vec4<f32>(x_74.x, x_74.z, x_74.y, x_74.w);
  let x_79 : vec4<f32> = u_xlat0;
  let x_82 : vec4<f32> = textureGather(1i, DepthTex, samplerDepthTex, vec3<f32>(x_79.x, x_79.y, x_79.z).xy, i32(round(vec3<f32>(x_79.x, x_79.y, x_79.z).z)));
  u_xlat0 = x_82;
  let x_84 : vec4<f32> = u_xlat1;
  let x_85 : vec2<f32> = vec2<f32>(x_84.w, x_84.y);
  let x_86 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_85.x, x_86.y, x_85.y, x_86.w);
  let x_88 : vec4<f32> = u_xlat0;
  let x_89 : vec2<f32> = vec2<f32>(x_88.w, x_88.z);
  let x_90 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_90.x, x_89.x, x_90.z, x_89.y);
  let x_92 : vec4<f32> = u_xlat0;
  let x_93 : vec2<f32> = vec2<f32>(x_92.x, x_92.y);
  let x_94 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_94.x, x_93.x, x_94.z, x_93.y);
  let x_98 : u32 = gl_LocalInvocationID.x;
  u_xlati0.x = (bitcast<i32>(x_98) << bitcast<u32>(1i));
  let x_105 : u32 = gl_LocalInvocationID.y;
  let x_110 : i32 = u_xlati0.x;
  u_xlati0.x = ((bitcast<i32>(x_105) * 32i) + x_110);
  let x_120 : i32 = u_xlati0.x;
  let x_122 : f32 = u_xlat2.x;
  TGSM0[x_120].value[0i] = bitcast<u32>(x_122);
  let x_127 : i32 = u_xlati0.x;
  let x_129 : f32 = u_xlat2.y;
  TGSM0[x_127].value[1i] = bitcast<u32>(x_129);
  let x_134 : i32 = u_xlati0.x;
  u_xlati12.x = (x_134 + 1i);
  let x_138 : i32 = u_xlati12.x;
  let x_140 : f32 = u_xlat2.z;
  TGSM0[x_138].value[0i] = bitcast<u32>(x_140);
  let x_144 : i32 = u_xlati12.x;
  let x_146 : f32 = u_xlat2.w;
  TGSM0[x_144].value[1i] = bitcast<u32>(x_146);
  let x_149 : vec2<i32> = u_xlati0;
  u_xlati12 = (vec2<i32>(x_149.x, x_149.x) + vec2<i32>(16i, 17i));
  let x_156 : i32 = u_xlati12.x;
  let x_158 : f32 = u_xlat1.x;
  TGSM0[x_156].value[0i] = bitcast<u32>(x_158);
  let x_162 : i32 = u_xlati12.x;
  let x_164 : f32 = u_xlat1.y;
  TGSM0[x_162].value[1i] = bitcast<u32>(x_164);
  let x_168 : i32 = u_xlati12.y;
  let x_170 : f32 = u_xlat1.z;
  TGSM0[x_168].value[0i] = bitcast<u32>(x_170);
  let x_174 : i32 = u_xlati12.y;
  let x_176 : f32 = u_xlat1.w;
  TGSM0[x_174].value[1i] = bitcast<u32>(x_176);
  workgroupBarrier();
  let x_181 : u32 = gl_LocalInvocationID.y;
  let x_185 : u32 = gl_LocalInvocationID.x;
  u_xlati0.x = ((bitcast<i32>(x_181) * 16i) + bitcast<i32>(x_185));
  let x_192 : vec2<i32> = u_xlati0;
  u_xlati1 = (vec4<i32>(x_192.x, x_192.x, x_192.x, x_192.x) + vec4<i32>(64i, 68i, 70i, 66i));
  let x_203 : i32 = u_xlati1.w;
  let x_205 : u32 = TGSM0[x_203].value[0i];
  let x_208 : i32 = u_xlati1.w;
  let x_210 : u32 = TGSM0[x_208].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_205), bitcast<f32>(x_210));
  let x_216 : i32 = u_xlati1.y;
  let x_218 : u32 = TGSM0[x_216].value[0i];
  let x_221 : i32 = u_xlati1.y;
  let x_223 : u32 = TGSM0[x_221].value[1i];
  let x_225 : vec2<f32> = vec2<f32>(bitcast<f32>(x_218), bitcast<f32>(x_223));
  let x_226 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_225.x, x_226.y, x_225.y);
  let x_230 : vec3<f32> = u_xlat13;
  u_xlat2 = (vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f) / vec4<f32>(x_230.x, x_230.z, x_230.x, x_230.x));
  let x_234 : vec4<f32> = u_xlat2;
  let x_237 : vec4<f32> = x_43.gInvThicknessTable[0i];
  u_xlat3 = (vec4<f32>(x_234.w, x_234.y, x_234.w, x_234.y) * vec4<f32>(x_237.y, x_237.y, x_237.w, x_237.w));
  let x_241 : vec4<f32> = x_43.gInvThicknessTable[0i];
  let x_245 : vec2<f32> = (vec2<f32>(x_241.y, x_241.w) + vec2<f32>(-0.5f, -0.5f));
  let x_246 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_245.x, x_246.y, x_245.y);
  let x_249 : vec2<f32> = u_xlat12;
  let x_251 : vec4<f32> = u_xlat3;
  let x_254 : vec3<f32> = u_xlat13;
  u_xlat4 = ((vec4<f32>(x_249.x, x_249.y, x_249.x, x_249.x) * vec4<f32>(x_251.x, x_251.y, x_251.x, x_251.x)) + -(vec4<f32>(x_254.x, x_254.x, x_254.x, x_254.x)));
  let x_259 : vec4<f32> = u_xlat4;
  let x_264 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_259.w, x_259.y, x_259.w, x_259.w) * vec4<f32>(x_264.x, x_264.x, x_264.x, x_264.x));
  let x_267 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_267, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_273 : i32 = u_xlati1.z;
  let x_275 : u32 = TGSM0[x_273].value[0i];
  let x_278 : i32 = u_xlati1.z;
  let x_280 : u32 = TGSM0[x_278].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_275), bitcast<f32>(x_280));
  let x_284 : i32 = u_xlati1.x;
  let x_286 : u32 = TGSM0[x_284].value[0i];
  let x_289 : i32 = u_xlati1.x;
  let x_291 : u32 = TGSM0[x_289].value[1i];
  let x_293 : vec2<f32> = vec2<f32>(bitcast<f32>(x_286), bitcast<f32>(x_291));
  let x_294 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_293.x, x_294.y, x_293.y, x_294.w);
  let x_297 : vec4<f32> = u_xlat1;
  let x_299 : vec4<f32> = u_xlat3;
  let x_302 : vec3<f32> = u_xlat13;
  u_xlat6 = ((vec4<f32>(x_297.x, x_297.z, x_297.x, x_297.x) * vec4<f32>(x_299.z, x_299.w, x_299.z, x_299.z)) + -(vec4<f32>(x_302.z, x_302.z, x_302.z, x_302.z)));
  let x_307 : vec2<f32> = u_xlat12;
  let x_309 : vec4<f32> = u_xlat3;
  let x_312 : vec3<f32> = u_xlat13;
  u_xlat7 = ((vec4<f32>(x_307.x, x_307.y, x_307.x, x_307.x) * vec4<f32>(x_309.x, x_309.y, x_309.x, x_309.x)) + -(vec4<f32>(x_312.x, x_312.x, x_312.x, x_312.x)));
  let x_317 : vec4<f32> = u_xlat5;
  let x_318 : vec4<f32> = u_xlat7;
  u_xlat8 = max(x_317, x_318);
  let x_320 : vec4<f32> = u_xlat7;
  let x_323 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_320.w, x_320.y, x_320.w, x_320.w) * vec4<f32>(x_323.x, x_323.x, x_323.x, x_323.x));
  let x_326 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_326, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_330 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_330, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_332 : vec4<f32> = u_xlat4;
  let x_333 : vec4<f32> = u_xlat7;
  u_xlat4 = max(x_332, x_333);
  let x_335 : vec4<f32> = u_xlat4;
  u_xlat4 = min(x_335, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_337 : vec4<f32> = u_xlat4;
  let x_338 : vec4<f32> = u_xlat8;
  u_xlat4 = (x_337 + x_338);
  let x_340 : vec4<f32> = u_xlat7;
  let x_342 : vec4<f32> = u_xlat5;
  let x_344 : vec4<f32> = u_xlat4;
  u_xlat4 = ((-(x_340) * x_342) + x_344);
  let x_346 : vec4<f32> = u_xlat4;
  u_xlat4 = clamp(x_346, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_351 : vec2<i32> = u_xlati0;
  u_xlati5 = (vec4<i32>(x_351.x, x_351.x, x_351.x, x_351.x) + vec4<i32>(100i, 36i, 72i, 132i));
  let x_360 : i32 = u_xlati5.y;
  let x_362 : u32 = TGSM0[x_360].value[0i];
  let x_365 : i32 = u_xlati5.y;
  let x_367 : u32 = TGSM0[x_365].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_362), bitcast<f32>(x_367));
  let x_370 : vec2<f32> = u_xlat12;
  let x_372 : vec4<f32> = u_xlat3;
  let x_375 : vec3<f32> = u_xlat13;
  u_xlat7 = ((vec4<f32>(x_370.x, x_370.y, x_370.x, x_370.x) * vec4<f32>(x_372.x, x_372.y, x_372.x, x_372.x)) + -(vec4<f32>(x_375.x, x_375.x, x_375.x, x_375.x)));
  let x_379 : vec4<f32> = u_xlat7;
  let x_382 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_379.w, x_379.y, x_379.w, x_379.w) * vec4<f32>(x_382.x, x_382.x, x_382.x, x_382.x));
  let x_385 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_385, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_390 : i32 = u_xlati5.x;
  let x_392 : u32 = TGSM0[x_390].value[0i];
  let x_395 : i32 = u_xlati5.x;
  let x_397 : u32 = TGSM0[x_395].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_392), bitcast<f32>(x_397));
  let x_401 : vec2<f32> = u_xlat12;
  let x_403 : vec4<f32> = u_xlat3;
  let x_406 : vec3<f32> = u_xlat13;
  u_xlat9 = ((vec4<f32>(x_401.x, x_401.y, x_401.x, x_401.x) * vec4<f32>(x_403.x, x_403.y, x_403.x, x_403.x)) + -(vec4<f32>(x_406.x, x_406.x, x_406.x, x_406.x)));
  let x_411 : vec4<f32> = u_xlat8;
  let x_412 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_411, x_412);
  let x_414 : vec4<f32> = u_xlat9;
  let x_417 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_414.w, x_414.y, x_414.w, x_414.w) * vec4<f32>(x_417.x, x_417.x, x_417.x, x_417.x));
  let x_420 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_420, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_424 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_424, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_426 : vec4<f32> = u_xlat7;
  let x_427 : vec4<f32> = u_xlat9;
  u_xlat7 = max(x_426, x_427);
  let x_429 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_429, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_431 : vec4<f32> = u_xlat7;
  let x_432 : vec4<f32> = u_xlat10;
  u_xlat7 = (x_431 + x_432);
  let x_434 : vec4<f32> = u_xlat9;
  let x_436 : vec4<f32> = u_xlat8;
  let x_438 : vec4<f32> = u_xlat7;
  u_xlat7 = ((-(x_434) * x_436) + x_438);
  let x_440 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_440, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_444 : vec4<f32> = u_xlat4;
  let x_445 : vec4<f32> = u_xlat7;
  u_xlat4 = (x_444 + x_445);
  let x_447 : vec4<f32> = u_xlat4;
  let x_449 : vec4<f32> = x_43.gSampleWeightTable[0i];
  u_xlat4 = (x_447 * vec4<f32>(x_449.y, x_449.y, x_449.y, x_449.y));
  let x_453 : i32 = u_xlati5.w;
  let x_455 : u32 = TGSM0[x_453].value[0i];
  let x_458 : i32 = u_xlati5.w;
  let x_460 : u32 = TGSM0[x_458].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_455), bitcast<f32>(x_460));
  let x_464 : i32 = u_xlati5.z;
  let x_466 : u32 = TGSM0[x_464].value[0i];
  let x_469 : i32 = u_xlati5.z;
  let x_471 : u32 = TGSM0[x_469].value[1i];
  let x_473 : vec2<f32> = vec2<f32>(bitcast<f32>(x_466), bitcast<f32>(x_471));
  let x_474 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_473.x, x_473.y, x_474.z, x_474.w);
  let x_476 : vec4<f32> = u_xlat1;
  let x_478 : vec4<f32> = u_xlat3;
  let x_481 : vec3<f32> = u_xlat13;
  u_xlat5 = ((vec4<f32>(x_476.x, x_476.y, x_476.x, x_476.x) * vec4<f32>(x_478.z, x_478.w, x_478.z, x_478.z)) + -(vec4<f32>(x_481.z, x_481.z, x_481.z, x_481.z)));
  let x_485 : vec2<f32> = u_xlat12;
  let x_487 : vec4<f32> = u_xlat3;
  let x_490 : vec3<f32> = u_xlat13;
  u_xlat7 = ((vec4<f32>(x_485.x, x_485.y, x_485.x, x_485.x) * vec4<f32>(x_487.z, x_487.w, x_487.z, x_487.z)) + -(vec4<f32>(x_490.z, x_490.z, x_490.z, x_490.z)));
  let x_495 : vec2<i32> = u_xlati0;
  u_xlati8 = (vec4<i32>(x_495.x, x_495.x, x_495.x, x_495.x) + vec4<i32>(4i, 83i, 53i, 85i));
  let x_504 : i32 = u_xlati8.x;
  let x_506 : u32 = TGSM0[x_504].value[0i];
  let x_509 : i32 = u_xlati8.x;
  let x_511 : u32 = TGSM0[x_509].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_506), bitcast<f32>(x_511));
  let x_514 : vec2<f32> = u_xlat12;
  let x_516 : vec4<f32> = u_xlat3;
  let x_519 : vec3<f32> = u_xlat13;
  u_xlat1 = ((vec4<f32>(x_514.x, x_514.y, x_514.x, x_514.x) * vec4<f32>(x_516.z, x_516.w, x_516.z, x_516.z)) + -(vec4<f32>(x_519.z, x_519.z, x_519.z, x_519.z)));
  let x_523 : vec4<f32> = u_xlat1;
  let x_526 : vec2<f32> = x_43.AdditionalParams;
  u_xlat3 = (vec4<f32>(x_523.w, x_523.y, x_523.w, x_523.w) * vec4<f32>(x_526.x, x_526.x, x_526.x, x_526.x));
  let x_529 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_529, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_533 : vec4<f32> = u_xlat3;
  let x_534 : vec4<f32> = u_xlat7;
  u_xlat9 = max(x_533, x_534);
  let x_536 : vec4<f32> = u_xlat7;
  let x_539 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_536.w, x_536.y, x_536.w, x_536.w) * vec4<f32>(x_539.x, x_539.x, x_539.x, x_539.x));
  let x_542 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_542, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_546 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_546, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_548 : vec4<f32> = u_xlat1;
  let x_549 : vec4<f32> = u_xlat7;
  u_xlat1 = max(x_548, x_549);
  let x_551 : vec4<f32> = u_xlat1;
  u_xlat1 = min(x_551, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_553 : vec4<f32> = u_xlat1;
  let x_554 : vec4<f32> = u_xlat9;
  u_xlat1 = (x_553 + x_554);
  let x_556 : vec4<f32> = u_xlat7;
  let x_558 : vec4<f32> = u_xlat3;
  let x_560 : vec4<f32> = u_xlat1;
  u_xlat1 = ((-(x_556) * x_558) + x_560);
  let x_562 : vec4<f32> = u_xlat1;
  u_xlat1 = clamp(x_562, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_566 : vec4<f32> = u_xlat6;
  let x_569 : vec2<f32> = x_43.AdditionalParams;
  u_xlat3 = (vec4<f32>(x_566.w, x_566.y, x_566.w, x_566.w) * vec4<f32>(x_569.x, x_569.x, x_569.x, x_569.x));
  let x_572 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_572, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_576 : vec4<f32> = u_xlat3;
  let x_577 : vec4<f32> = u_xlat5;
  u_xlat7 = max(x_576, x_577);
  let x_579 : vec4<f32> = u_xlat5;
  let x_582 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_579.w, x_579.y, x_579.w, x_579.w) * vec4<f32>(x_582.x, x_582.x, x_582.x, x_582.x));
  let x_585 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_585, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_589 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_589, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_591 : vec4<f32> = u_xlat5;
  let x_592 : vec4<f32> = u_xlat6;
  u_xlat6 = max(x_591, x_592);
  let x_594 : vec4<f32> = u_xlat6;
  u_xlat6 = min(x_594, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_596 : vec4<f32> = u_xlat6;
  let x_597 : vec4<f32> = u_xlat7;
  u_xlat6 = (x_596 + x_597);
  let x_599 : vec4<f32> = u_xlat5;
  let x_601 : vec4<f32> = u_xlat3;
  let x_603 : vec4<f32> = u_xlat6;
  u_xlat3 = ((-(x_599) * x_601) + x_603);
  let x_605 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_605, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_609 : vec4<f32> = u_xlat1;
  let x_610 : vec4<f32> = u_xlat3;
  u_xlat1 = (x_609 + x_610);
  let x_612 : vec4<f32> = u_xlat1;
  let x_614 : vec4<f32> = x_43.gSampleWeightTable[0i];
  u_xlat1 = (x_612 * vec4<f32>(x_614.w, x_614.w, x_614.w, x_614.w));
  let x_617 : vec4<f32> = u_xlat1;
  u_xlat1 = (x_617 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_621 : vec4<f32> = u_xlat4;
  let x_623 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_621 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_623);
  let x_626 : i32 = u_xlati8.z;
  let x_628 : u32 = TGSM0[x_626].value[0i];
  let x_631 : i32 = u_xlati8.z;
  let x_633 : u32 = TGSM0[x_631].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_628), bitcast<f32>(x_633));
  let x_636 : vec4<f32> = u_xlat2;
  let x_639 : vec4<f32> = x_43.gInvThicknessTable[1i];
  u_xlat3 = (vec4<f32>(x_636.w, x_636.y, x_636.w, x_636.y) * vec4<f32>(x_639.x, x_639.x, x_639.z, x_639.z));
  let x_643 : vec4<f32> = x_43.gInvThicknessTable[1i];
  let x_645 : vec2<f32> = (vec2<f32>(x_643.x, x_643.z) + vec2<f32>(-0.5f, -0.5f));
  let x_646 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_645.x, x_645.y, x_646.z, x_646.w);
  let x_648 : vec2<f32> = u_xlat12;
  let x_650 : vec4<f32> = u_xlat3;
  let x_653 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_648.x, x_648.y, x_648.x, x_648.x) * vec4<f32>(x_650.x, x_650.y, x_650.x, x_650.x)) + -(vec4<f32>(x_653.x, x_653.x, x_653.x, x_653.x)));
  let x_657 : vec4<f32> = u_xlat5;
  let x_660 : vec2<f32> = x_43.AdditionalParams;
  u_xlat6 = (vec4<f32>(x_657.w, x_657.y, x_657.w, x_657.w) * vec4<f32>(x_660.x, x_660.x, x_660.x, x_660.x));
  let x_663 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_663, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_668 : i32 = u_xlati8.y;
  let x_670 : u32 = TGSM0[x_668].value[0i];
  let x_673 : i32 = u_xlati8.y;
  let x_675 : u32 = TGSM0[x_673].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_670), bitcast<f32>(x_675));
  let x_680 : i32 = u_xlati8.w;
  let x_682 : u32 = TGSM0[x_680].value[0i];
  let x_685 : i32 = u_xlati8.w;
  let x_687 : u32 = TGSM0[x_685].value[1i];
  u_xlat28 = vec2<f32>(bitcast<f32>(x_682), bitcast<f32>(x_687));
  let x_690 : vec2<f32> = u_xlat28;
  let x_692 : vec4<f32> = u_xlat3;
  let x_695 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_690.x, x_690.y, x_690.x, x_690.x) * vec4<f32>(x_692.x, x_692.y, x_692.x, x_692.x)) + -(vec4<f32>(x_695.x, x_695.x, x_695.x, x_695.x)));
  let x_699 : vec2<f32> = u_xlat12;
  let x_701 : vec4<f32> = u_xlat3;
  let x_704 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_699.x, x_699.y, x_699.x, x_699.x) * vec4<f32>(x_701.x, x_701.y, x_701.x, x_701.x)) + -(vec4<f32>(x_704.x, x_704.x, x_704.x, x_704.x)));
  let x_708 : vec4<f32> = u_xlat6;
  let x_709 : vec4<f32> = u_xlat8;
  u_xlat9 = max(x_708, x_709);
  let x_711 : vec4<f32> = u_xlat8;
  let x_714 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_711.w, x_711.y, x_711.w, x_711.w) * vec4<f32>(x_714.x, x_714.x, x_714.x, x_714.x));
  let x_717 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_717, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_721 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_721, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_723 : vec4<f32> = u_xlat5;
  let x_724 : vec4<f32> = u_xlat8;
  u_xlat5 = max(x_723, x_724);
  let x_726 : vec4<f32> = u_xlat5;
  u_xlat5 = min(x_726, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_728 : vec4<f32> = u_xlat5;
  let x_729 : vec4<f32> = u_xlat9;
  u_xlat5 = (x_728 + x_729);
  let x_731 : vec4<f32> = u_xlat8;
  let x_733 : vec4<f32> = u_xlat6;
  let x_735 : vec4<f32> = u_xlat5;
  u_xlat5 = ((-(x_731) * x_733) + x_735);
  let x_737 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_737, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_742 : vec2<i32> = u_xlati0;
  u_xlati6 = (vec4<i32>(x_742.x, x_742.x, x_742.x, x_742.x) + vec4<i32>(51i, 98i, 38i, 102i));
  let x_751 : i32 = u_xlati6.x;
  let x_753 : u32 = TGSM0[x_751].value[0i];
  let x_756 : i32 = u_xlati6.x;
  let x_758 : u32 = TGSM0[x_756].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_753), bitcast<f32>(x_758));
  let x_761 : vec2<f32> = u_xlat12;
  let x_763 : vec4<f32> = u_xlat3;
  let x_766 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_761.x, x_761.y, x_761.x, x_761.x) * vec4<f32>(x_763.x, x_763.y, x_763.x, x_763.x)) + -(vec4<f32>(x_766.x, x_766.x, x_766.x, x_766.x)));
  let x_770 : vec4<f32> = u_xlat8;
  let x_773 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_770.w, x_770.y, x_770.w, x_770.w) * vec4<f32>(x_773.x, x_773.x, x_773.x, x_773.x));
  let x_776 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_776, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_780 : vec4<f32> = u_xlat7;
  let x_781 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_780, x_781);
  let x_783 : vec4<f32> = u_xlat7;
  let x_786 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_783.w, x_783.y, x_783.w, x_783.w) * vec4<f32>(x_786.x, x_786.x, x_786.x, x_786.x));
  let x_789 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_789, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_793 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_793, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_795 : vec4<f32> = u_xlat7;
  let x_796 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_795, x_796);
  let x_798 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_798, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_800 : vec4<f32> = u_xlat8;
  let x_801 : vec4<f32> = u_xlat10;
  u_xlat8 = (x_800 + x_801);
  let x_803 : vec4<f32> = u_xlat7;
  let x_805 : vec4<f32> = u_xlat9;
  let x_807 : vec4<f32> = u_xlat8;
  u_xlat7 = ((-(x_803) * x_805) + x_807);
  let x_809 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_809, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_813 : vec4<f32> = u_xlat5;
  let x_814 : vec4<f32> = u_xlat7;
  u_xlat5 = (x_813 + x_814);
  let x_816 : vec4<f32> = u_xlat5;
  let x_818 : vec4<f32> = x_43.gSampleWeightTable[1i];
  u_xlat5 = (x_816 * vec4<f32>(x_818.x, x_818.x, x_818.x, x_818.x));
  let x_821 : vec4<f32> = u_xlat5;
  let x_823 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_821 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_823);
  let x_826 : i32 = u_xlati6.z;
  let x_828 : u32 = TGSM0[x_826].value[0i];
  let x_831 : i32 = u_xlati6.z;
  let x_833 : u32 = TGSM0[x_831].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_828), bitcast<f32>(x_833));
  let x_836 : vec4<f32> = u_xlat2;
  let x_839 : vec4<f32> = x_43.gInvThicknessTable[2i];
  u_xlat5 = (vec4<f32>(x_836.w, x_836.y, x_836.w, x_836.y) * vec4<f32>(x_839.x, x_839.x, x_839.w, x_839.w));
  let x_842 : vec4<f32> = u_xlat2;
  let x_844 : vec4<f32> = x_43.gInvThicknessTable[2i];
  u_xlat2 = (x_842 * vec4<f32>(x_844.z, x_844.z, x_844.z, x_844.z));
  let x_848 : vec4<f32> = x_43.gInvThicknessTable[2i];
  let x_851 : vec3<f32> = (vec3<f32>(x_848.x, x_848.w, x_848.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_852 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_851.x, x_852.y, x_851.y, x_851.z);
  let x_854 : vec2<f32> = u_xlat12;
  let x_856 : vec4<f32> = u_xlat5;
  let x_859 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_854.x, x_854.y, x_854.x, x_854.x) * vec4<f32>(x_856.x, x_856.y, x_856.x, x_856.x)) + -(vec4<f32>(x_859.x, x_859.x, x_859.x, x_859.x)));
  let x_863 : vec4<f32> = u_xlat7;
  let x_866 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_863.w, x_863.y, x_863.w, x_863.w) * vec4<f32>(x_866.x, x_866.x, x_866.x, x_866.x));
  let x_869 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_869, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_874 : i32 = u_xlati6.y;
  let x_876 : u32 = TGSM0[x_874].value[0i];
  let x_879 : i32 = u_xlati6.y;
  let x_881 : u32 = TGSM0[x_879].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_876), bitcast<f32>(x_881));
  let x_885 : i32 = u_xlati6.w;
  let x_887 : u32 = TGSM0[x_885].value[0i];
  let x_890 : i32 = u_xlati6.w;
  let x_892 : u32 = TGSM0[x_890].value[1i];
  let x_894 : vec2<f32> = vec2<f32>(bitcast<f32>(x_887), bitcast<f32>(x_892));
  let x_895 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_894.x, x_894.y, x_895.z, x_895.w);
  let x_897 : vec4<f32> = u_xlat3;
  let x_899 : vec4<f32> = u_xlat5;
  let x_902 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_897.x, x_897.y, x_897.x, x_897.x) * vec4<f32>(x_899.x, x_899.y, x_899.x, x_899.x)) + -(vec4<f32>(x_902.x, x_902.x, x_902.x, x_902.x)));
  let x_906 : vec2<f32> = u_xlat12;
  let x_908 : vec4<f32> = u_xlat5;
  let x_911 : vec4<f32> = u_xlat4;
  u_xlat9 = ((vec4<f32>(x_906.x, x_906.y, x_906.x, x_906.x) * vec4<f32>(x_908.x, x_908.y, x_908.x, x_908.x)) + -(vec4<f32>(x_911.x, x_911.x, x_911.x, x_911.x)));
  let x_915 : vec4<f32> = u_xlat8;
  let x_916 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_915, x_916);
  let x_918 : vec4<f32> = u_xlat9;
  let x_921 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_918.w, x_918.y, x_918.w, x_918.w) * vec4<f32>(x_921.x, x_921.x, x_921.x, x_921.x));
  let x_924 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_924, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_928 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_928, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_930 : vec4<f32> = u_xlat7;
  let x_931 : vec4<f32> = u_xlat9;
  u_xlat7 = max(x_930, x_931);
  let x_933 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_933, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_935 : vec4<f32> = u_xlat7;
  let x_936 : vec4<f32> = u_xlat10;
  u_xlat7 = (x_935 + x_936);
  let x_938 : vec4<f32> = u_xlat9;
  let x_940 : vec4<f32> = u_xlat8;
  let x_942 : vec4<f32> = u_xlat7;
  u_xlat7 = ((-(x_938) * x_940) + x_942);
  let x_944 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_944, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_948 : vec2<i32> = u_xlati0;
  u_xlati8 = (vec4<i32>(x_948.x, x_948.x, x_948.x, x_948.x) + vec4<i32>(34i, 113i, 23i, 119i));
  let x_957 : i32 = u_xlati8.x;
  let x_959 : u32 = TGSM0[x_957].value[0i];
  let x_962 : i32 = u_xlati8.x;
  let x_964 : u32 = TGSM0[x_962].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_959), bitcast<f32>(x_964));
  let x_967 : vec2<f32> = u_xlat12;
  let x_969 : vec4<f32> = u_xlat5;
  let x_972 : vec4<f32> = u_xlat4;
  u_xlat9 = ((vec4<f32>(x_967.x, x_967.y, x_967.x, x_967.x) * vec4<f32>(x_969.x, x_969.y, x_969.x, x_969.x)) + -(vec4<f32>(x_972.x, x_972.x, x_972.x, x_972.x)));
  let x_976 : vec4<f32> = u_xlat9;
  let x_979 : vec2<f32> = x_43.AdditionalParams;
  u_xlat10 = (vec4<f32>(x_976.w, x_976.y, x_976.w, x_976.w) * vec4<f32>(x_979.x, x_979.x, x_979.x, x_979.x));
  let x_982 : vec4<f32> = u_xlat10;
  u_xlat10 = clamp(x_982, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_987 : vec4<f32> = u_xlat6;
  let x_988 : vec4<f32> = u_xlat10;
  u_xlat11 = max(x_987, x_988);
  let x_990 : vec4<f32> = u_xlat6;
  let x_993 : vec2<f32> = x_43.AdditionalParams;
  u_xlat6 = (vec4<f32>(x_990.w, x_990.y, x_990.w, x_990.w) * vec4<f32>(x_993.x, x_993.x, x_993.x, x_993.x));
  let x_996 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_996, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1000 : vec4<f32> = u_xlat11;
  u_xlat11 = min(x_1000, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1002 : vec4<f32> = u_xlat6;
  let x_1003 : vec4<f32> = u_xlat9;
  u_xlat9 = max(x_1002, x_1003);
  let x_1005 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_1005, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1007 : vec4<f32> = u_xlat9;
  let x_1008 : vec4<f32> = u_xlat11;
  u_xlat9 = (x_1007 + x_1008);
  let x_1010 : vec4<f32> = u_xlat6;
  let x_1012 : vec4<f32> = u_xlat10;
  let x_1014 : vec4<f32> = u_xlat9;
  u_xlat6 = ((-(x_1010) * x_1012) + x_1014);
  let x_1016 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1016, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1020 : vec4<f32> = u_xlat6;
  let x_1021 : vec4<f32> = u_xlat7;
  u_xlat6 = (x_1020 + x_1021);
  let x_1023 : vec4<f32> = u_xlat6;
  let x_1025 : vec4<f32> = x_43.gSampleWeightTable[2i];
  u_xlat6 = (x_1023 * vec4<f32>(x_1025.x, x_1025.x, x_1025.x, x_1025.x));
  let x_1028 : vec4<f32> = u_xlat6;
  let x_1030 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_1028 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_1030);
  let x_1033 : i32 = u_xlati8.z;
  let x_1035 : u32 = TGSM0[x_1033].value[0i];
  let x_1038 : i32 = u_xlati8.z;
  let x_1040 : u32 = TGSM0[x_1038].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1035), bitcast<f32>(x_1040));
  let x_1043 : vec2<f32> = u_xlat12;
  let x_1045 : vec4<f32> = u_xlat5;
  let x_1048 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1043.x, x_1043.y, x_1043.x, x_1043.x) * vec4<f32>(x_1045.z, x_1045.w, x_1045.z, x_1045.z)) + -(vec4<f32>(x_1048.z, x_1048.z, x_1048.z, x_1048.z)));
  let x_1052 : vec4<f32> = u_xlat6;
  let x_1055 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_1052.w, x_1052.y, x_1052.w, x_1052.w) * vec4<f32>(x_1055.x, x_1055.x, x_1055.x, x_1055.x));
  let x_1058 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_1058, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1063 : i32 = u_xlati8.y;
  let x_1065 : u32 = TGSM0[x_1063].value[0i];
  let x_1068 : i32 = u_xlati8.y;
  let x_1070 : u32 = TGSM0[x_1068].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1065), bitcast<f32>(x_1070));
  let x_1074 : i32 = u_xlati8.w;
  let x_1076 : u32 = TGSM0[x_1074].value[0i];
  let x_1079 : i32 = u_xlati8.w;
  let x_1081 : u32 = TGSM0[x_1079].value[1i];
  let x_1083 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1076), bitcast<f32>(x_1081));
  let x_1084 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1083.x, x_1083.y, x_1084.z, x_1084.w);
  let x_1086 : vec4<f32> = u_xlat3;
  let x_1088 : vec4<f32> = u_xlat5;
  let x_1091 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_1086.x, x_1086.y, x_1086.x, x_1086.x) * vec4<f32>(x_1088.z, x_1088.w, x_1088.z, x_1088.z)) + -(vec4<f32>(x_1091.z, x_1091.z, x_1091.z, x_1091.z)));
  let x_1095 : vec2<f32> = u_xlat12;
  let x_1097 : vec4<f32> = u_xlat5;
  let x_1100 : vec4<f32> = u_xlat4;
  u_xlat9 = ((vec4<f32>(x_1095.x, x_1095.y, x_1095.x, x_1095.x) * vec4<f32>(x_1097.z, x_1097.w, x_1097.z, x_1097.z)) + -(vec4<f32>(x_1100.z, x_1100.z, x_1100.z, x_1100.z)));
  let x_1104 : vec4<f32> = u_xlat7;
  let x_1105 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_1104, x_1105);
  let x_1107 : vec4<f32> = u_xlat9;
  let x_1110 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_1107.w, x_1107.y, x_1107.w, x_1107.w) * vec4<f32>(x_1110.x, x_1110.x, x_1110.x, x_1110.x));
  let x_1113 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_1113, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1117 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_1117, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1119 : vec4<f32> = u_xlat6;
  let x_1120 : vec4<f32> = u_xlat9;
  u_xlat6 = max(x_1119, x_1120);
  let x_1122 : vec4<f32> = u_xlat6;
  u_xlat6 = min(x_1122, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1124 : vec4<f32> = u_xlat6;
  let x_1125 : vec4<f32> = u_xlat10;
  u_xlat6 = (x_1124 + x_1125);
  let x_1127 : vec4<f32> = u_xlat9;
  let x_1129 : vec4<f32> = u_xlat7;
  let x_1131 : vec4<f32> = u_xlat6;
  u_xlat6 = ((-(x_1127) * x_1129) + x_1131);
  let x_1133 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1133, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1138 : vec2<i32> = u_xlati0;
  u_xlati7 = (vec4<i32>(x_1138.x, x_1138.x, x_1138.x, x_1138.x) + vec4<i32>(17i, 117i, 19i, 115i));
  let x_1146 : i32 = u_xlati7.x;
  let x_1148 : u32 = TGSM0[x_1146].value[0i];
  let x_1151 : i32 = u_xlati7.x;
  let x_1153 : u32 = TGSM0[x_1151].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1148), bitcast<f32>(x_1153));
  let x_1156 : vec2<f32> = u_xlat12;
  let x_1158 : vec4<f32> = u_xlat5;
  let x_1161 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_1156.x, x_1156.y, x_1156.x, x_1156.x) * vec4<f32>(x_1158.z, x_1158.w, x_1158.z, x_1158.z)) + -(vec4<f32>(x_1161.z, x_1161.z, x_1161.z, x_1161.z)));
  let x_1165 : vec4<f32> = u_xlat5;
  let x_1168 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_1165.w, x_1165.y, x_1165.w, x_1165.w) * vec4<f32>(x_1168.x, x_1168.x, x_1168.x, x_1168.x));
  let x_1171 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_1171, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1175 : vec4<f32> = u_xlat8;
  let x_1176 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_1175, x_1176);
  let x_1178 : vec4<f32> = u_xlat8;
  let x_1181 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_1178.w, x_1178.y, x_1178.w, x_1178.w) * vec4<f32>(x_1181.x, x_1181.x, x_1181.x, x_1181.x));
  let x_1184 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_1184, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1188 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_1188, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1190 : vec4<f32> = u_xlat5;
  let x_1191 : vec4<f32> = u_xlat8;
  u_xlat5 = max(x_1190, x_1191);
  let x_1193 : vec4<f32> = u_xlat5;
  u_xlat5 = min(x_1193, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1195 : vec4<f32> = u_xlat5;
  let x_1196 : vec4<f32> = u_xlat10;
  u_xlat5 = (x_1195 + x_1196);
  let x_1198 : vec4<f32> = u_xlat8;
  let x_1200 : vec4<f32> = u_xlat9;
  let x_1202 : vec4<f32> = u_xlat5;
  u_xlat5 = ((-(x_1198) * x_1200) + x_1202);
  let x_1204 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1204, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1208 : vec4<f32> = u_xlat5;
  let x_1209 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_1208 + x_1209);
  let x_1211 : vec4<f32> = u_xlat5;
  let x_1213 : vec4<f32> = x_43.gSampleWeightTable[2i];
  u_xlat5 = (x_1211 * vec4<f32>(x_1213.w, x_1213.w, x_1213.w, x_1213.w));
  let x_1216 : vec4<f32> = u_xlat5;
  let x_1218 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_1216 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_1218);
  let x_1221 : i32 = u_xlati7.y;
  let x_1223 : u32 = TGSM0[x_1221].value[0i];
  let x_1226 : i32 = u_xlati7.y;
  let x_1228 : u32 = TGSM0[x_1226].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1223), bitcast<f32>(x_1228));
  let x_1231 : vec2<f32> = u_xlat12;
  let x_1233 : vec4<f32> = u_xlat3;
  let x_1236 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_1231.x, x_1231.y, x_1231.x, x_1231.x) * vec4<f32>(x_1233.z, x_1233.w, x_1233.z, x_1233.z)) + -(vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y)));
  let x_1241 : i32 = u_xlati7.z;
  let x_1243 : u32 = TGSM0[x_1241].value[0i];
  let x_1246 : i32 = u_xlati7.z;
  let x_1248 : u32 = TGSM0[x_1246].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1243), bitcast<f32>(x_1248));
  let x_1252 : i32 = u_xlati7.w;
  let x_1254 : u32 = TGSM0[x_1252].value[0i];
  let x_1257 : i32 = u_xlati7.w;
  let x_1259 : u32 = TGSM0[x_1257].value[1i];
  let x_1261 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1254), bitcast<f32>(x_1259));
  let x_1262 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1261.x, x_1261.y, x_1262.z, x_1262.w);
  let x_1264 : vec4<f32> = u_xlat3;
  let x_1266 : vec4<f32> = u_xlat3;
  let x_1269 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1264.x, x_1264.y, x_1264.x, x_1264.x) * vec4<f32>(x_1266.z, x_1266.w, x_1266.z, x_1266.z)) + -(vec4<f32>(x_1269.y, x_1269.y, x_1269.y, x_1269.y)));
  let x_1273 : vec2<f32> = u_xlat12;
  let x_1275 : vec4<f32> = u_xlat3;
  let x_1278 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_1273.x, x_1273.y, x_1273.x, x_1273.x) * vec4<f32>(x_1275.z, x_1275.w, x_1275.z, x_1275.z)) + -(vec4<f32>(x_1278.y, x_1278.y, x_1278.y, x_1278.y)));
  let x_1282 : vec4<f32> = u_xlat7;
  let x_1285 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_1282.w, x_1282.y, x_1282.w, x_1282.w) * vec4<f32>(x_1285.x, x_1285.x, x_1285.x, x_1285.x));
  let x_1288 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_1288, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1292 : vec4<f32> = u_xlat5;
  let x_1293 : vec4<f32> = u_xlat8;
  u_xlat9 = max(x_1292, x_1293);
  let x_1295 : vec4<f32> = u_xlat5;
  let x_1298 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_1295.w, x_1295.y, x_1295.w, x_1295.w) * vec4<f32>(x_1298.x, x_1298.x, x_1298.x, x_1298.x));
  let x_1301 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1301, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1305 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_1305, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1307 : vec4<f32> = u_xlat5;
  let x_1308 : vec4<f32> = u_xlat7;
  u_xlat7 = max(x_1307, x_1308);
  let x_1310 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_1310, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1312 : vec4<f32> = u_xlat7;
  let x_1313 : vec4<f32> = u_xlat9;
  u_xlat7 = (x_1312 + x_1313);
  let x_1315 : vec4<f32> = u_xlat5;
  let x_1317 : vec4<f32> = u_xlat8;
  let x_1319 : vec4<f32> = u_xlat7;
  u_xlat5 = ((-(x_1315) * x_1317) + x_1319);
  let x_1321 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1321, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1325 : vec2<i32> = u_xlati0;
  u_xlati7 = (vec4<i32>(x_1325.x, x_1325.x, x_1325.x, x_1325.x) + vec4<i32>(21i, 87i, 49i, 81i));
  let x_1334 : i32 = u_xlati7.x;
  let x_1336 : u32 = TGSM0[x_1334].value[0i];
  let x_1339 : i32 = u_xlati7.x;
  let x_1341 : u32 = TGSM0[x_1339].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1336), bitcast<f32>(x_1341));
  let x_1344 : vec2<f32> = u_xlat12;
  let x_1346 : vec4<f32> = u_xlat3;
  let x_1349 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_1344.x, x_1344.y, x_1344.x, x_1344.x) * vec4<f32>(x_1346.z, x_1346.w, x_1346.z, x_1346.z)) + -(vec4<f32>(x_1349.y, x_1349.y, x_1349.y, x_1349.y)));
  let x_1353 : vec4<f32> = u_xlat8;
  let x_1356 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_1353.w, x_1353.y, x_1353.w, x_1353.w) * vec4<f32>(x_1356.x, x_1356.x, x_1356.x, x_1356.x));
  let x_1359 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_1359, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1363 : vec4<f32> = u_xlat6;
  let x_1364 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_1363, x_1364);
  let x_1366 : vec4<f32> = u_xlat6;
  let x_1369 : vec2<f32> = x_43.AdditionalParams;
  u_xlat6 = (vec4<f32>(x_1366.w, x_1366.y, x_1366.w, x_1366.w) * vec4<f32>(x_1369.x, x_1369.x, x_1369.x, x_1369.x));
  let x_1372 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1372, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1376 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_1376, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1378 : vec4<f32> = u_xlat6;
  let x_1379 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_1378, x_1379);
  let x_1381 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_1381, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1383 : vec4<f32> = u_xlat8;
  let x_1384 : vec4<f32> = u_xlat10;
  u_xlat8 = (x_1383 + x_1384);
  let x_1386 : vec4<f32> = u_xlat6;
  let x_1388 : vec4<f32> = u_xlat9;
  let x_1390 : vec4<f32> = u_xlat8;
  u_xlat6 = ((-(x_1386) * x_1388) + x_1390);
  let x_1392 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1392, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1396 : vec4<f32> = u_xlat5;
  let x_1397 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_1396 + x_1397);
  let x_1400 : i32 = u_xlati7.y;
  let x_1402 : u32 = TGSM0[x_1400].value[0i];
  let x_1405 : i32 = u_xlati7.y;
  let x_1407 : u32 = TGSM0[x_1405].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1402), bitcast<f32>(x_1407));
  let x_1410 : vec2<f32> = u_xlat12;
  let x_1412 : vec4<f32> = u_xlat3;
  let x_1415 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1410.x, x_1410.y, x_1410.x, x_1410.x) * vec4<f32>(x_1412.z, x_1412.w, x_1412.z, x_1412.z)) + -(vec4<f32>(x_1415.y, x_1415.y, x_1415.y, x_1415.y)));
  let x_1420 : i32 = u_xlati7.z;
  let x_1422 : u32 = TGSM0[x_1420].value[0i];
  let x_1425 : i32 = u_xlati7.z;
  let x_1427 : u32 = TGSM0[x_1425].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1422), bitcast<f32>(x_1427));
  let x_1431 : i32 = u_xlati7.w;
  let x_1433 : u32 = TGSM0[x_1431].value[0i];
  let x_1436 : i32 = u_xlati7.w;
  let x_1438 : u32 = TGSM0[x_1436].value[1i];
  let x_1440 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1433), bitcast<f32>(x_1438));
  let x_1441 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1440.x, x_1440.y, x_1441.z, x_1441.w);
  let x_1443 : vec4<f32> = u_xlat3;
  let x_1445 : vec4<f32> = u_xlat3;
  let x_1448 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_1443.x, x_1443.y, x_1443.x, x_1443.x) * vec4<f32>(x_1445.z, x_1445.w, x_1445.z, x_1445.z)) + -(vec4<f32>(x_1448.y, x_1448.y, x_1448.y, x_1448.y)));
  let x_1452 : vec2<f32> = u_xlat12;
  let x_1454 : vec4<f32> = u_xlat3;
  let x_1457 : vec4<f32> = u_xlat4;
  u_xlat8 = ((vec4<f32>(x_1452.x, x_1452.y, x_1452.x, x_1452.x) * vec4<f32>(x_1454.z, x_1454.w, x_1454.z, x_1454.z)) + -(vec4<f32>(x_1457.y, x_1457.y, x_1457.y, x_1457.y)));
  let x_1461 : vec4<f32> = u_xlat8;
  let x_1464 : vec2<f32> = x_43.AdditionalParams;
  u_xlat9 = (vec4<f32>(x_1461.w, x_1461.y, x_1461.w, x_1461.w) * vec4<f32>(x_1464.x, x_1464.x, x_1464.x, x_1464.x));
  let x_1467 : vec4<f32> = u_xlat9;
  u_xlat9 = clamp(x_1467, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1471 : vec4<f32> = u_xlat6;
  let x_1472 : vec4<f32> = u_xlat9;
  u_xlat10 = max(x_1471, x_1472);
  let x_1474 : vec4<f32> = u_xlat6;
  let x_1477 : vec2<f32> = x_43.AdditionalParams;
  u_xlat6 = (vec4<f32>(x_1474.w, x_1474.y, x_1474.w, x_1474.w) * vec4<f32>(x_1477.x, x_1477.x, x_1477.x, x_1477.x));
  let x_1480 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1480, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1484 : vec4<f32> = u_xlat10;
  u_xlat10 = min(x_1484, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1486 : vec4<f32> = u_xlat6;
  let x_1487 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_1486, x_1487);
  let x_1489 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_1489, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1491 : vec4<f32> = u_xlat8;
  let x_1492 : vec4<f32> = u_xlat10;
  u_xlat8 = (x_1491 + x_1492);
  let x_1494 : vec4<f32> = u_xlat6;
  let x_1496 : vec4<f32> = u_xlat9;
  let x_1498 : vec4<f32> = u_xlat8;
  u_xlat6 = ((-(x_1494) * x_1496) + x_1498);
  let x_1500 : vec4<f32> = u_xlat6;
  u_xlat6 = clamp(x_1500, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1504 : vec4<f32> = u_xlat5;
  let x_1505 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_1504 + x_1505);
  let x_1507 : vec2<i32> = u_xlati0;
  u_xlati6 = (vec4<i32>(x_1507.x, x_1507.x, x_1507.x, x_1507.x) + vec4<i32>(55i, 134i, 2i, 130i));
  let x_1515 : i32 = u_xlati6.x;
  let x_1517 : u32 = TGSM0[x_1515].value[0i];
  let x_1520 : i32 = u_xlati6.x;
  let x_1522 : u32 = TGSM0[x_1520].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1517), bitcast<f32>(x_1522));
  let x_1525 : vec2<f32> = u_xlat12;
  let x_1527 : vec4<f32> = u_xlat3;
  let x_1530 : vec4<f32> = u_xlat4;
  u_xlat3 = ((vec4<f32>(x_1525.x, x_1525.y, x_1525.x, x_1525.x) * vec4<f32>(x_1527.z, x_1527.w, x_1527.z, x_1527.z)) + -(vec4<f32>(x_1530.y, x_1530.y, x_1530.y, x_1530.y)));
  let x_1534 : vec4<f32> = u_xlat3;
  let x_1537 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_1534.w, x_1534.y, x_1534.w, x_1534.w) * vec4<f32>(x_1537.x, x_1537.x, x_1537.x, x_1537.x));
  let x_1540 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_1540, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1544 : vec4<f32> = u_xlat7;
  let x_1545 : vec4<f32> = u_xlat8;
  u_xlat9 = max(x_1544, x_1545);
  let x_1547 : vec4<f32> = u_xlat7;
  let x_1550 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_1547.w, x_1547.y, x_1547.w, x_1547.w) * vec4<f32>(x_1550.x, x_1550.x, x_1550.x, x_1550.x));
  let x_1553 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_1553, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1557 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_1557, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1559 : vec4<f32> = u_xlat3;
  let x_1560 : vec4<f32> = u_xlat7;
  u_xlat3 = max(x_1559, x_1560);
  let x_1562 : vec4<f32> = u_xlat3;
  u_xlat3 = min(x_1562, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1564 : vec4<f32> = u_xlat3;
  let x_1565 : vec4<f32> = u_xlat9;
  u_xlat3 = (x_1564 + x_1565);
  let x_1567 : vec4<f32> = u_xlat7;
  let x_1569 : vec4<f32> = u_xlat8;
  let x_1571 : vec4<f32> = u_xlat3;
  u_xlat3 = ((-(x_1567) * x_1569) + x_1571);
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_1573, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1577 : vec4<f32> = u_xlat3;
  let x_1578 : vec4<f32> = u_xlat5;
  u_xlat3 = (x_1577 + x_1578);
  let x_1580 : vec4<f32> = u_xlat3;
  let x_1582 : vec4<f32> = x_43.gSampleWeightTable[1i];
  u_xlat3 = (x_1580 * vec4<f32>(x_1582.z, x_1582.z, x_1582.z, x_1582.z));
  let x_1585 : vec4<f32> = u_xlat3;
  let x_1589 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_1585 * vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f)) + x_1589);
  let x_1592 : i32 = u_xlati6.y;
  let x_1594 : u32 = TGSM0[x_1592].value[0i];
  let x_1597 : i32 = u_xlati6.y;
  let x_1599 : u32 = TGSM0[x_1597].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1594), bitcast<f32>(x_1599));
  let x_1602 : vec2<f32> = u_xlat12;
  let x_1604 : vec4<f32> = u_xlat2;
  let x_1607 : vec4<f32> = u_xlat4;
  u_xlat3 = ((vec4<f32>(x_1602.x, x_1602.y, x_1602.x, x_1602.x) * vec4<f32>(x_1604.w, x_1604.y, x_1604.w, x_1604.w)) + -(vec4<f32>(x_1607.w, x_1607.w, x_1607.w, x_1607.w)));
  let x_1612 : i32 = u_xlati6.z;
  let x_1614 : u32 = TGSM0[x_1612].value[0i];
  let x_1617 : i32 = u_xlati6.z;
  let x_1619 : u32 = TGSM0[x_1617].value[1i];
  u_xlat12 = vec2<f32>(bitcast<f32>(x_1614), bitcast<f32>(x_1619));
  let x_1623 : i32 = u_xlati6.w;
  let x_1625 : u32 = TGSM0[x_1623].value[0i];
  let x_1628 : i32 = u_xlati6.w;
  let x_1630 : u32 = TGSM0[x_1628].value[1i];
  let x_1632 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1625), bitcast<f32>(x_1630));
  let x_1633 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1632.x, x_1632.y, x_1633.z, x_1633.w);
  let x_1635 : vec4<f32> = u_xlat4;
  let x_1637 : vec4<f32> = u_xlat2;
  let x_1640 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_1635.x, x_1635.y, x_1635.x, x_1635.x) * vec4<f32>(x_1637.w, x_1637.y, x_1637.w, x_1637.w)) + -(vec4<f32>(x_1640.w, x_1640.w, x_1640.w, x_1640.w)));
  let x_1644 : vec2<f32> = u_xlat12;
  let x_1646 : vec4<f32> = u_xlat2;
  let x_1649 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1644.x, x_1644.y, x_1644.x, x_1644.x) * vec4<f32>(x_1646.w, x_1646.y, x_1646.w, x_1646.w)) + -(vec4<f32>(x_1649.w, x_1649.w, x_1649.w, x_1649.w)));
  let x_1653 : vec4<f32> = u_xlat6;
  let x_1656 : vec2<f32> = x_43.AdditionalParams;
  u_xlat7 = (vec4<f32>(x_1653.w, x_1653.y, x_1653.w, x_1653.w) * vec4<f32>(x_1656.x, x_1656.x, x_1656.x, x_1656.x));
  let x_1659 : vec4<f32> = u_xlat7;
  u_xlat7 = clamp(x_1659, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1663 : vec4<f32> = u_xlat3;
  let x_1664 : vec4<f32> = u_xlat7;
  u_xlat8 = max(x_1663, x_1664);
  let x_1666 : vec4<f32> = u_xlat3;
  let x_1669 : vec2<f32> = x_43.AdditionalParams;
  u_xlat3 = (vec4<f32>(x_1666.w, x_1666.y, x_1666.w, x_1666.w) * vec4<f32>(x_1669.x, x_1669.x, x_1669.x, x_1669.x));
  let x_1672 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_1672, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1676 : vec4<f32> = u_xlat8;
  u_xlat8 = min(x_1676, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1678 : vec4<f32> = u_xlat3;
  let x_1679 : vec4<f32> = u_xlat6;
  u_xlat6 = max(x_1678, x_1679);
  let x_1681 : vec4<f32> = u_xlat6;
  u_xlat6 = min(x_1681, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1683 : vec4<f32> = u_xlat6;
  let x_1684 : vec4<f32> = u_xlat8;
  u_xlat6 = (x_1683 + x_1684);
  let x_1686 : vec4<f32> = u_xlat3;
  let x_1688 : vec4<f32> = u_xlat7;
  let x_1690 : vec4<f32> = u_xlat6;
  u_xlat3 = ((-(x_1686) * x_1688) + x_1690);
  let x_1692 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_1692, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1696 : vec2<i32> = u_xlati0;
  u_xlati6 = (vec4<i32>(x_1696.x, x_1696.x, x_1696.x, x_1696.x) + vec4<i32>(6i, 104i, 32i, 96i));
  let x_1704 : i32 = u_xlati0.x;
  u_xlati0.x = (x_1704 + 40i);
  let x_1709 : i32 = u_xlati0.x;
  let x_1711 : u32 = TGSM0[x_1709].value[0i];
  let x_1714 : i32 = u_xlati0.x;
  let x_1716 : u32 = TGSM0[x_1714].value[1i];
  let x_1718 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1711), bitcast<f32>(x_1716));
  let x_1719 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1718.x, x_1718.y, x_1719.z, x_1719.w);
  let x_1721 : vec4<f32> = u_xlat0;
  let x_1723 : vec4<f32> = u_xlat2;
  let x_1725 : vec4<f32> = u_xlat4;
  u_xlat0 = ((vec4<f32>(x_1721.x, x_1721.y, x_1721.x, x_1721.x) * x_1723) + -(vec4<f32>(x_1725.w, x_1725.w, x_1725.w, x_1725.w)));
  let x_1730 : i32 = u_xlati6.x;
  let x_1732 : u32 = TGSM0[x_1730].value[0i];
  let x_1735 : i32 = u_xlati6.x;
  let x_1737 : u32 = TGSM0[x_1735].value[1i];
  let x_1739 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1732), bitcast<f32>(x_1737));
  let x_1740 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1739.x, x_1740.y, x_1739.y, x_1740.w);
  let x_1742 : vec4<f32> = u_xlat2;
  let x_1744 : vec4<f32> = u_xlat2;
  let x_1747 : vec4<f32> = u_xlat4;
  u_xlat7 = ((vec4<f32>(x_1742.x, x_1742.z, x_1742.x, x_1742.x) * vec4<f32>(x_1744.w, x_1744.y, x_1744.w, x_1744.w)) + -(vec4<f32>(x_1747.w, x_1747.w, x_1747.w, x_1747.w)));
  let x_1751 : vec4<f32> = u_xlat7;
  let x_1754 : vec2<f32> = x_43.AdditionalParams;
  u_xlat8 = (vec4<f32>(x_1751.w, x_1751.y, x_1751.w, x_1751.w) * vec4<f32>(x_1754.x, x_1754.x, x_1754.x, x_1754.x));
  let x_1757 : vec4<f32> = u_xlat8;
  u_xlat8 = clamp(x_1757, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1761 : vec4<f32> = u_xlat5;
  let x_1762 : vec4<f32> = u_xlat8;
  u_xlat9 = max(x_1761, x_1762);
  let x_1764 : vec4<f32> = u_xlat5;
  let x_1767 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_1764.w, x_1764.y, x_1764.w, x_1764.w) * vec4<f32>(x_1767.x, x_1767.x, x_1767.x, x_1767.x));
  let x_1770 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1770, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1774 : vec4<f32> = u_xlat9;
  u_xlat9 = min(x_1774, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1776 : vec4<f32> = u_xlat5;
  let x_1777 : vec4<f32> = u_xlat7;
  u_xlat7 = max(x_1776, x_1777);
  let x_1779 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_1779, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1781 : vec4<f32> = u_xlat7;
  let x_1782 : vec4<f32> = u_xlat9;
  u_xlat7 = (x_1781 + x_1782);
  let x_1784 : vec4<f32> = u_xlat5;
  let x_1786 : vec4<f32> = u_xlat8;
  let x_1788 : vec4<f32> = u_xlat7;
  u_xlat5 = ((-(x_1784) * x_1786) + x_1788);
  let x_1790 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1790, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1794 : vec4<f32> = u_xlat3;
  let x_1795 : vec4<f32> = u_xlat5;
  u_xlat3 = (x_1794 + x_1795);
  let x_1798 : i32 = u_xlati6.y;
  let x_1800 : u32 = TGSM0[x_1798].value[0i];
  let x_1803 : i32 = u_xlati6.y;
  let x_1805 : u32 = TGSM0[x_1803].value[1i];
  let x_1807 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1800), bitcast<f32>(x_1805));
  let x_1808 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1807.x, x_1808.y, x_1807.y, x_1808.w);
  let x_1810 : vec4<f32> = u_xlat2;
  let x_1812 : vec4<f32> = u_xlat2;
  let x_1815 : vec4<f32> = u_xlat4;
  u_xlat5 = ((vec4<f32>(x_1810.x, x_1810.z, x_1810.x, x_1810.x) * vec4<f32>(x_1812.w, x_1812.y, x_1812.w, x_1812.w)) + -(vec4<f32>(x_1815.w, x_1815.w, x_1815.w, x_1815.w)));
  let x_1820 : i32 = u_xlati6.z;
  let x_1822 : u32 = TGSM0[x_1820].value[0i];
  let x_1825 : i32 = u_xlati6.z;
  let x_1827 : u32 = TGSM0[x_1825].value[1i];
  let x_1829 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1822), bitcast<f32>(x_1827));
  let x_1830 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1829.x, x_1830.y, x_1829.y, x_1830.w);
  let x_1833 : i32 = u_xlati6.w;
  let x_1835 : u32 = TGSM0[x_1833].value[0i];
  let x_1838 : i32 = u_xlati6.w;
  let x_1840 : u32 = TGSM0[x_1838].value[1i];
  let x_1842 : vec2<f32> = vec2<f32>(bitcast<f32>(x_1835), bitcast<f32>(x_1840));
  let x_1843 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1842.x, x_1842.y, x_1843.z, x_1843.w);
  let x_1845 : vec4<f32> = u_xlat4;
  let x_1847 : vec4<f32> = u_xlat2;
  let x_1850 : vec4<f32> = u_xlat4;
  u_xlat6 = ((vec4<f32>(x_1845.x, x_1845.y, x_1845.x, x_1845.x) * vec4<f32>(x_1847.w, x_1847.y, x_1847.w, x_1847.w)) + -(vec4<f32>(x_1850.w, x_1850.w, x_1850.w, x_1850.w)));
  let x_1854 : vec4<f32> = u_xlat2;
  let x_1856 : vec4<f32> = u_xlat2;
  let x_1859 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec4<f32>(x_1854.x, x_1854.z, x_1854.x, x_1854.x) * vec4<f32>(x_1856.w, x_1856.y, x_1856.w, x_1856.w)) + -(vec4<f32>(x_1859.w, x_1859.w, x_1859.w, x_1859.w)));
  let x_1863 : vec4<f32> = u_xlat2;
  let x_1866 : vec2<f32> = x_43.AdditionalParams;
  u_xlat4 = (vec4<f32>(x_1863.w, x_1863.y, x_1863.w, x_1863.w) * vec4<f32>(x_1866.x, x_1866.x, x_1866.x, x_1866.x));
  let x_1869 : vec4<f32> = u_xlat4;
  u_xlat4 = clamp(x_1869, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1873 : vec4<f32> = u_xlat4;
  let x_1874 : vec4<f32> = u_xlat5;
  u_xlat7 = max(x_1873, x_1874);
  let x_1876 : vec4<f32> = u_xlat5;
  let x_1879 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_1876.w, x_1876.y, x_1876.w, x_1876.w) * vec4<f32>(x_1879.x, x_1879.x, x_1879.x, x_1879.x));
  let x_1882 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1882, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1886 : vec4<f32> = u_xlat7;
  u_xlat7 = min(x_1886, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1888 : vec4<f32> = u_xlat2;
  let x_1889 : vec4<f32> = u_xlat5;
  u_xlat2 = max(x_1888, x_1889);
  let x_1891 : vec4<f32> = u_xlat2;
  u_xlat2 = min(x_1891, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1893 : vec4<f32> = u_xlat2;
  let x_1894 : vec4<f32> = u_xlat7;
  u_xlat2 = (x_1893 + x_1894);
  let x_1896 : vec4<f32> = u_xlat5;
  let x_1898 : vec4<f32> = u_xlat4;
  let x_1900 : vec4<f32> = u_xlat2;
  u_xlat2 = ((-(x_1896) * x_1898) + x_1900);
  let x_1902 : vec4<f32> = u_xlat2;
  u_xlat2 = clamp(x_1902, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1906 : vec4<f32> = u_xlat2;
  let x_1907 : vec4<f32> = u_xlat3;
  u_xlat2 = (x_1906 + x_1907);
  let x_1909 : vec4<f32> = u_xlat0;
  let x_1912 : vec2<f32> = x_43.AdditionalParams;
  u_xlat3 = (vec4<f32>(x_1909.w, x_1909.y, x_1909.w, x_1909.w) * vec4<f32>(x_1912.x, x_1912.x, x_1912.x, x_1912.x));
  let x_1915 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_1915, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1919 : vec4<f32> = u_xlat3;
  let x_1920 : vec4<f32> = u_xlat6;
  u_xlat4 = max(x_1919, x_1920);
  let x_1922 : vec4<f32> = u_xlat6;
  let x_1925 : vec2<f32> = x_43.AdditionalParams;
  u_xlat5 = (vec4<f32>(x_1922.w, x_1922.y, x_1922.w, x_1922.w) * vec4<f32>(x_1925.x, x_1925.x, x_1925.x, x_1925.x));
  let x_1928 : vec4<f32> = u_xlat5;
  u_xlat5 = clamp(x_1928, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1932 : vec4<f32> = u_xlat4;
  u_xlat4 = min(x_1932, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1934 : vec4<f32> = u_xlat0;
  let x_1935 : vec4<f32> = u_xlat5;
  u_xlat0 = max(x_1934, x_1935);
  let x_1937 : vec4<f32> = u_xlat0;
  u_xlat0 = min(x_1937, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1939 : vec4<f32> = u_xlat0;
  let x_1940 : vec4<f32> = u_xlat4;
  u_xlat0 = (x_1939 + x_1940);
  let x_1942 : vec4<f32> = u_xlat5;
  let x_1944 : vec4<f32> = u_xlat3;
  let x_1946 : vec4<f32> = u_xlat0;
  u_xlat0 = ((-(x_1942) * x_1944) + x_1946);
  let x_1948 : vec4<f32> = u_xlat0;
  u_xlat0 = clamp(x_1948, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1952 : vec4<f32> = u_xlat0;
  let x_1953 : vec4<f32> = u_xlat2;
  u_xlat0 = (x_1952 + x_1953);
  let x_1955 : vec4<f32> = u_xlat0;
  let x_1957 : vec4<f32> = x_43.gSampleWeightTable[2i];
  u_xlat0 = (x_1955 * vec4<f32>(x_1957.z, x_1957.z, x_1957.z, x_1957.z));
  let x_1960 : vec4<f32> = u_xlat0;
  let x_1962 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_1960 * vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f)) + x_1962);
  let x_1964 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_1964 + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_1969 : vec2<f32> = x_43.AdditionalParams;
  let x_1971 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_1969.y, x_1969.y, x_1969.y, x_1969.y) * x_1971) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1975 : vec3<u32> = gl_GlobalInvocationID;
  u_xlati1 = (bitcast<vec4<i32>>(vec4<u32>(x_1975.x, x_1975.y, x_1975.y, x_1975.y)) << bitcast<vec4<u32>>(vec4<i32>(2i, 2i, 2i, 2i)));
  let x_1983 : u32 = gl_GlobalInvocationID.z;
  u_xlatu2.x = (x_1983 & 3u);
  let x_1987 : vec3<u32> = gl_GlobalInvocationID;
  let x_1990 : vec3<u32> = (vec3<u32>(x_1987.z, x_1987.z, x_1987.z) >> vec3<u32>(2u, 2u, 2u));
  let x_1991 : vec4<u32> = u_xlatu2;
  u_xlatu2 = vec4<u32>(x_1991.x, x_1990.x, x_1990.y, x_1990.z);
  let x_1993 : vec4<i32> = u_xlati1;
  let x_1995 : vec4<u32> = u_xlatu2;
  u_xlati1 = bitcast<vec4<i32>>((bitcast<vec4<u32>>(x_1993) | x_1995));
  let x_2002 : vec4<i32> = u_xlati1;
  let x_2004 : vec4<f32> = u_xlat0;
  textureStore(Occlusion_origX0X, vec2<i32>(x_2002.x, x_2002.y), x_2004);
  return;
}

@compute @workgroup_size(8i, 8i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>, @builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  main_1();
}

