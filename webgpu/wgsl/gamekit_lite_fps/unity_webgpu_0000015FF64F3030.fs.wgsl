struct PGlobals {
  x_Level : f32,
  x_Texel : f32,
  x_Scale : f32,
}

var<private> u_xlat0 : vec3<f32>;

@group(0) @binding(0) var<uniform> x_12 : PGlobals;

var<private> u_xlatb1 : vec3<bool>;

var<private> vs_TEXCOORD0 : vec4<f32>;

var<private> u_xlat1 : vec4<f32>;

var<private> u_xlat2 : vec3<f32>;

var<private> u_xlat51 : f32;

var<private> u_xlat52 : f32;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat4 : vec3<f32>;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

@group(0) @binding(1) var x_MainTex : texture_cube<f32>;

@group(0) @binding(2) var sampler_MainTex : sampler;

var<private> u_xlat7 : vec4<f32>;

var<private> u_xlat8 : vec4<f32>;

var<private> u_xlat9 : vec3<f32>;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlat12 : vec4<f32>;

var<private> u_xlat13 : vec4<f32>;

var<private> u_xlat14 : vec4<f32>;

var<private> u_xlat15 : vec4<f32>;

var<private> u_xlat16 : vec3<f32>;

var<private> u_xlat17 : vec3<f32>;

var<private> u_xlat34 : f32;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_17 : f32 = x_12.x_Scale;
  u_xlat0.x = x_17;
  u_xlat0.y = 3.0f;
  u_xlat0.z = 5.0f;
  let x_35 : vec4<f32> = vs_TEXCOORD0;
  let x_42 : vec4<bool> = (abs(vec4<f32>(x_35.x, x_35.y, x_35.z, x_35.x)) == vec4<f32>(1.0f, 1.0f, 1.0f, 0.0f));
  u_xlatb1 = vec3<bool>(x_42.x, x_42.y, x_42.z);
  let x_48 : bool = u_xlatb1.x;
  u_xlat1.x = select(0.0f, 1.0f, x_48);
  let x_52 : bool = u_xlatb1.y;
  u_xlat1.y = select(0.0f, 1.0f, x_52);
  let x_56 : bool = u_xlatb1.z;
  u_xlat1.z = select(0.0f, 1.0f, x_56);
  let x_59 : vec4<f32> = u_xlat1;
  let x_61 : vec4<f32> = vs_TEXCOORD0;
  let x_63 : vec3<f32> = (vec3<f32>(x_59.x, x_59.y, x_59.z) * vec3<f32>(x_61.x, x_61.y, x_61.z));
  let x_64 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_63.x, x_63.y, x_63.z, x_64.w);
  let x_67 : vec4<f32> = u_xlat1;
  u_xlat2 = (-(abs(vec3<f32>(x_67.x, x_67.y, x_67.z))) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_73 : vec3<f32> = u_xlat2;
  let x_74 : vec4<f32> = vs_TEXCOORD0;
  u_xlat2 = (x_73 * vec3<f32>(x_74.x, x_74.y, x_74.z));
  let x_78 : vec3<f32> = u_xlat2;
  let x_79 : vec3<f32> = u_xlat2;
  u_xlat51 = dot(x_78, x_79);
  let x_81 : f32 = u_xlat51;
  u_xlat51 = (x_81 + 1.0f);
  let x_83 : f32 = u_xlat51;
  u_xlat51 = sqrt(x_83);
  let x_85 : f32 = u_xlat51;
  u_xlat51 = (1.0f / x_85);
  let x_88 : f32 = u_xlat51;
  let x_89 : f32 = u_xlat51;
  u_xlat52 = (x_88 * x_89);
  let x_91 : f32 = u_xlat51;
  let x_92 : f32 = u_xlat52;
  u_xlat2.x = (x_91 * x_92);
  let x_96 : vec3<f32> = u_xlat2;
  let x_99 : f32 = x_12.x_Scale;
  let x_101 : f32 = x_12.x_Scale;
  let x_102 : vec2<f32> = vec2<f32>(x_99, x_101);
  let x_106 : vec2<f32> = (vec2<f32>(x_96.x, x_96.x) * vec2<f32>(x_102.x, x_102.y));
  let x_107 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_107.x, x_106.x, x_106.y);
  let x_109 : vec3<f32> = u_xlat0;
  let x_110 : vec3<f32> = u_xlat2;
  u_xlat0 = (x_109 * x_110);
  let x_112 : vec3<f32> = u_xlat0;
  let x_113 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_112 * -(x_113));
  let x_116 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_116 * vec3<f32>(1.442695022f, 1.442695022f, 1.442695022f));
  let x_120 : vec3<f32> = u_xlat0;
  u_xlat0 = exp2(x_120);
  let x_122 : vec3<f32> = u_xlat0;
  let x_124 : vec3<f32> = u_xlat0;
  u_xlat2 = (vec3<f32>(x_122.z, x_122.z, x_122.z) * x_124);
  let x_127 : vec4<f32> = u_xlat1;
  let x_131 : f32 = x_12.x_Texel;
  let x_133 : f32 = x_12.x_Texel;
  let x_135 : f32 = x_12.x_Texel;
  let x_136 : vec3<f32> = vec3<f32>(x_131, x_133, x_135);
  let x_141 : vec3<f32> = (vec3<f32>(x_127.z, x_127.x, x_127.y) * vec3<f32>(x_136.x, x_136.y, x_136.z));
  let x_142 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_141.x, x_141.y, x_141.z, x_142.w);
  let x_145 : vec4<f32> = u_xlat3;
  let x_151 : vec4<f32> = vs_TEXCOORD0;
  u_xlat4 = ((-(vec3<f32>(x_145.x, x_145.y, x_145.z)) * vec3<f32>(1.5f, 1.5f, 1.5f)) + vec3<f32>(x_151.x, x_151.y, x_151.z));
  let x_155 : vec4<f32> = u_xlat3;
  let x_161 : vec3<f32> = u_xlat4;
  let x_162 : vec3<f32> = ((-(vec3<f32>(x_155.z, x_155.x, x_155.y)) * vec3<f32>(2.5f, 2.5f, 2.5f)) + x_161);
  let x_163 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_162.x, x_162.y, x_162.z, x_163.w);
  let x_166 : vec4<f32> = u_xlat5;
  let x_170 : vec3<f32> = max(vec3<f32>(x_166.x, x_166.y, x_166.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_171 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_170.x, x_170.y, x_170.z, x_171.w);
  let x_173 : vec4<f32> = u_xlat6;
  let x_175 : vec3<f32> = min(vec3<f32>(x_173.x, x_173.y, x_173.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_176 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_175.x, x_175.y, x_175.z, x_176.w);
  let x_178 : vec4<f32> = u_xlat5;
  let x_180 : vec4<f32> = u_xlat6;
  let x_183 : vec3<f32> = (vec3<f32>(x_178.x, x_178.y, x_178.z) + -(vec3<f32>(x_180.x, x_180.y, x_180.z)));
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_183.x, x_183.y, x_183.z, x_184.w);
  let x_187 : f32 = u_xlat5.y;
  let x_190 : f32 = u_xlat5.x;
  u_xlat51 = max(abs(x_187), abs(x_190));
  let x_194 : f32 = u_xlat5.z;
  let x_196 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_194), x_196);
  let x_198 : f32 = u_xlat51;
  let x_201 : vec4<f32> = u_xlat1;
  let x_204 : vec4<f32> = u_xlat6;
  let x_206 : vec3<f32> = ((-(vec3<f32>(x_198, x_198, x_198)) * vec3<f32>(x_201.x, x_201.y, x_201.z)) + vec3<f32>(x_204.x, x_204.y, x_204.z));
  let x_207 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_206.x, x_206.y, x_206.z, x_207.w);
  let x_219 : vec4<f32> = u_xlat5;
  let x_223 : f32 = x_12.x_Level;
  let x_224 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_219.x, x_219.y, x_219.z), x_223);
  u_xlat5 = x_224;
  let x_225 : vec4<f32> = u_xlat5;
  u_xlat5 = max(x_225, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_228 : vec4<f32> = u_xlat3;
  let x_231 : vec4<f32> = vs_TEXCOORD0;
  let x_233 : vec3<f32> = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(1.5f, 1.5f, 1.5f)) + vec3<f32>(x_231.x, x_231.y, x_231.z));
  let x_234 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_233.x, x_233.y, x_233.z, x_234.w);
  let x_237 : vec4<f32> = u_xlat3;
  let x_241 : vec4<f32> = u_xlat6;
  let x_243 : vec3<f32> = ((-(vec3<f32>(x_237.z, x_237.x, x_237.y)) * vec3<f32>(2.5f, 2.5f, 2.5f)) + vec3<f32>(x_241.x, x_241.y, x_241.z));
  let x_244 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_243.x, x_243.y, x_243.z, x_244.w);
  let x_247 : vec4<f32> = u_xlat7;
  let x_249 : vec3<f32> = max(vec3<f32>(x_247.x, x_247.y, x_247.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_250 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_249.x, x_249.y, x_249.z, x_250.w);
  let x_252 : vec4<f32> = u_xlat8;
  let x_254 : vec3<f32> = min(vec3<f32>(x_252.x, x_252.y, x_252.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_255 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_254.x, x_254.y, x_254.z, x_255.w);
  let x_257 : vec4<f32> = u_xlat7;
  let x_259 : vec4<f32> = u_xlat8;
  let x_262 : vec3<f32> = (vec3<f32>(x_257.x, x_257.y, x_257.z) + -(vec3<f32>(x_259.x, x_259.y, x_259.z)));
  let x_263 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_262.x, x_262.y, x_262.z, x_263.w);
  let x_266 : f32 = u_xlat7.y;
  let x_269 : f32 = u_xlat7.x;
  u_xlat51 = max(abs(x_266), abs(x_269));
  let x_273 : f32 = u_xlat7.z;
  let x_275 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_273), x_275);
  let x_277 : f32 = u_xlat51;
  let x_280 : vec4<f32> = u_xlat1;
  let x_283 : vec4<f32> = u_xlat8;
  let x_285 : vec3<f32> = ((-(vec3<f32>(x_277, x_277, x_277)) * vec3<f32>(x_280.x, x_280.y, x_280.z)) + vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_286 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_291 : vec4<f32> = u_xlat7;
  let x_294 : f32 = x_12.x_Level;
  let x_295 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_291.x, x_291.y, x_291.z), x_294);
  u_xlat7 = x_295;
  let x_296 : vec4<f32> = u_xlat7;
  u_xlat7 = max(x_296, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_298 : vec4<f32> = u_xlat5;
  let x_299 : vec4<f32> = u_xlat7;
  u_xlat5 = (x_298 + x_299);
  let x_301 : vec3<f32> = u_xlat2;
  let x_303 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(x_301.y, x_301.y, x_301.y, x_301.y) * x_303);
  let x_305 : vec4<f32> = u_xlat3;
  let x_309 : vec4<f32> = vs_TEXCOORD0;
  let x_311 : vec3<f32> = ((-(vec3<f32>(x_305.z, x_305.x, x_305.y)) * vec3<f32>(2.5f, 2.5f, 2.5f)) + vec3<f32>(x_309.x, x_309.y, x_309.z));
  let x_312 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_311.x, x_311.y, x_311.z, x_312.w);
  let x_314 : vec4<f32> = u_xlat7;
  let x_316 : vec3<f32> = max(vec3<f32>(x_314.x, x_314.y, x_314.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_317 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_316.x, x_316.y, x_316.z, x_317.w);
  let x_319 : vec4<f32> = u_xlat8;
  let x_321 : vec3<f32> = min(vec3<f32>(x_319.x, x_319.y, x_319.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_322 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_321.x, x_321.y, x_321.z, x_322.w);
  let x_324 : vec4<f32> = u_xlat7;
  let x_326 : vec4<f32> = u_xlat8;
  let x_329 : vec3<f32> = (vec3<f32>(x_324.x, x_324.y, x_324.z) + -(vec3<f32>(x_326.x, x_326.y, x_326.z)));
  let x_330 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_333 : f32 = u_xlat7.y;
  let x_336 : f32 = u_xlat7.x;
  u_xlat51 = max(abs(x_333), abs(x_336));
  let x_340 : f32 = u_xlat7.z;
  let x_342 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_340), x_342);
  let x_344 : f32 = u_xlat51;
  let x_347 : vec4<f32> = u_xlat1;
  let x_350 : vec4<f32> = u_xlat8;
  let x_352 : vec3<f32> = ((-(vec3<f32>(x_344, x_344, x_344)) * vec3<f32>(x_347.x, x_347.y, x_347.z)) + vec3<f32>(x_350.x, x_350.y, x_350.z));
  let x_353 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_352.x, x_352.y, x_352.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat3;
  let x_361 : vec4<f32> = u_xlat7;
  let x_363 : vec3<f32> = ((-(vec3<f32>(x_355.x, x_355.y, x_355.z)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_361.x, x_361.y, x_361.z));
  let x_364 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_363.x, x_363.y, x_363.z, x_364.w);
  let x_366 : vec4<f32> = u_xlat3;
  let x_369 : vec4<f32> = u_xlat7;
  let x_371 : vec3<f32> = ((vec3<f32>(x_366.x, x_366.y, x_366.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_369.x, x_369.y, x_369.z));
  let x_372 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_371.x, x_371.y, x_371.z, x_372.w);
  let x_377 : vec4<f32> = u_xlat7;
  let x_380 : f32 = x_12.x_Level;
  let x_381 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_377.x, x_377.y, x_377.z), x_380);
  u_xlat7 = x_381;
  let x_382 : vec4<f32> = u_xlat7;
  u_xlat7 = max(x_382, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_387 : vec4<f32> = u_xlat8;
  let x_390 : f32 = x_12.x_Level;
  let x_391 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_387.x, x_387.y, x_387.z), x_390);
  u_xlat8 = x_391;
  let x_392 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_392, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_394 : vec4<f32> = u_xlat7;
  let x_395 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_394 + x_395);
  let x_397 : vec3<f32> = u_xlat2;
  let x_399 : vec4<f32> = u_xlat7;
  let x_401 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_397.x, x_397.x, x_397.x, x_397.x) * x_399) + x_401);
  let x_403 : vec4<f32> = u_xlat3;
  let x_407 : vec4<f32> = vs_TEXCOORD0;
  let x_409 : vec3<f32> = ((-(vec3<f32>(x_403.x, x_403.y, x_403.z)) * vec3<f32>(2.5f, 2.5f, 2.5f)) + vec3<f32>(x_407.x, x_407.y, x_407.z));
  let x_410 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_409.x, x_409.y, x_409.z, x_410.w);
  let x_412 : vec4<f32> = u_xlat3;
  let x_416 : vec4<f32> = u_xlat7;
  let x_418 : vec3<f32> = ((-(vec3<f32>(x_412.z, x_412.x, x_412.y)) * vec3<f32>(2.5f, 2.5f, 2.5f)) + vec3<f32>(x_416.x, x_416.y, x_416.z));
  let x_419 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_418.x, x_418.y, x_418.z, x_419.w);
  let x_422 : vec4<f32> = u_xlat8;
  u_xlat9 = max(vec3<f32>(x_422.x, x_422.y, x_422.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_425 : vec3<f32> = u_xlat9;
  u_xlat9 = min(x_425, vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_427 : vec4<f32> = u_xlat8;
  let x_429 : vec3<f32> = u_xlat9;
  let x_431 : vec3<f32> = (vec3<f32>(x_427.x, x_427.y, x_427.z) + -(x_429));
  let x_432 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_431.x, x_431.y, x_431.z, x_432.w);
  let x_435 : f32 = u_xlat8.y;
  let x_438 : f32 = u_xlat8.x;
  u_xlat51 = max(abs(x_435), abs(x_438));
  let x_442 : f32 = u_xlat8.z;
  let x_444 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_442), x_444);
  let x_446 : f32 = u_xlat51;
  let x_449 : vec4<f32> = u_xlat1;
  let x_452 : vec3<f32> = u_xlat9;
  let x_453 : vec3<f32> = ((-(vec3<f32>(x_446, x_446, x_446)) * vec3<f32>(x_449.x, x_449.y, x_449.z)) + x_452);
  let x_454 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_453.x, x_453.y, x_453.z, x_454.w);
  let x_459 : vec4<f32> = u_xlat8;
  let x_462 : f32 = x_12.x_Level;
  let x_463 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_459.x, x_459.y, x_459.z), x_462);
  u_xlat8 = x_463;
  let x_464 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_464, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_466 : vec4<f32> = u_xlat3;
  let x_469 : vec4<f32> = vs_TEXCOORD0;
  u_xlat9 = ((vec3<f32>(x_466.x, x_466.y, x_466.z) * vec3<f32>(2.5f, 2.5f, 2.5f)) + vec3<f32>(x_469.x, x_469.y, x_469.z));
  let x_473 : vec4<f32> = u_xlat3;
  let x_477 : vec3<f32> = u_xlat9;
  let x_478 : vec3<f32> = ((-(vec3<f32>(x_473.z, x_473.x, x_473.y)) * vec3<f32>(2.5f, 2.5f, 2.5f)) + x_477);
  let x_479 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_478.x, x_478.y, x_478.z, x_479.w);
  let x_482 : vec4<f32> = u_xlat10;
  let x_484 : vec3<f32> = max(vec3<f32>(x_482.x, x_482.y, x_482.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_485 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
  let x_487 : vec4<f32> = u_xlat11;
  let x_489 : vec3<f32> = min(vec3<f32>(x_487.x, x_487.y, x_487.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_490 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_489.x, x_489.y, x_489.z, x_490.w);
  let x_492 : vec4<f32> = u_xlat10;
  let x_494 : vec4<f32> = u_xlat11;
  let x_497 : vec3<f32> = (vec3<f32>(x_492.x, x_492.y, x_492.z) + -(vec3<f32>(x_494.x, x_494.y, x_494.z)));
  let x_498 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_497.x, x_497.y, x_497.z, x_498.w);
  let x_501 : f32 = u_xlat10.y;
  let x_504 : f32 = u_xlat10.x;
  u_xlat51 = max(abs(x_501), abs(x_504));
  let x_508 : f32 = u_xlat10.z;
  let x_510 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_508), x_510);
  let x_512 : f32 = u_xlat51;
  let x_515 : vec4<f32> = u_xlat1;
  let x_518 : vec4<f32> = u_xlat11;
  let x_520 : vec3<f32> = ((-(vec3<f32>(x_512, x_512, x_512)) * vec3<f32>(x_515.x, x_515.y, x_515.z)) + vec3<f32>(x_518.x, x_518.y, x_518.z));
  let x_521 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_520.x, x_520.y, x_520.z, x_521.w);
  let x_526 : vec4<f32> = u_xlat10;
  let x_529 : f32 = x_12.x_Level;
  let x_530 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_526.x, x_526.y, x_526.z), x_529);
  u_xlat10 = x_530;
  let x_531 : vec4<f32> = u_xlat10;
  u_xlat10 = max(x_531, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_533 : vec4<f32> = u_xlat8;
  let x_534 : vec4<f32> = u_xlat10;
  u_xlat8 = (x_533 + x_534);
  let x_536 : vec3<f32> = u_xlat2;
  let x_538 : vec4<f32> = u_xlat8;
  let x_540 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_536.z, x_536.z, x_536.z, x_536.z) * x_538) + x_540);
  let x_542 : vec3<f32> = u_xlat0;
  let x_544 : vec3<f32> = u_xlat0;
  let x_545 : vec3<f32> = (vec3<f32>(x_542.y, x_542.y, x_542.y) * x_544);
  let x_546 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_545.x, x_545.y, x_545.z, x_546.w);
  let x_548 : vec3<f32> = u_xlat0;
  let x_550 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_548.x, x_548.x, x_548.x) * x_550);
  let x_552 : vec4<f32> = u_xlat3;
  let x_556 : vec3<f32> = u_xlat9;
  let x_557 : vec3<f32> = ((-(vec3<f32>(x_552.z, x_552.x, x_552.y)) * vec3<f32>(1.5f, 1.5f, 1.5f)) + x_556);
  let x_558 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_557.x, x_557.y, x_557.z, x_558.w);
  let x_560 : vec4<f32> = u_xlat10;
  let x_562 : vec3<f32> = max(vec3<f32>(x_560.x, x_560.y, x_560.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_563 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_562.x, x_562.y, x_562.z, x_563.w);
  let x_565 : vec4<f32> = u_xlat11;
  let x_567 : vec3<f32> = min(vec3<f32>(x_565.x, x_565.y, x_565.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_568 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
  let x_570 : vec4<f32> = u_xlat10;
  let x_572 : vec4<f32> = u_xlat11;
  let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) + -(vec3<f32>(x_572.x, x_572.y, x_572.z)));
  let x_576 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
  let x_579 : f32 = u_xlat10.y;
  let x_582 : f32 = u_xlat10.x;
  u_xlat51 = max(abs(x_579), abs(x_582));
  let x_586 : f32 = u_xlat10.z;
  let x_588 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_586), x_588);
  let x_590 : f32 = u_xlat51;
  let x_593 : vec4<f32> = u_xlat1;
  let x_596 : vec4<f32> = u_xlat11;
  let x_598 : vec3<f32> = ((-(vec3<f32>(x_590, x_590, x_590)) * vec3<f32>(x_593.x, x_593.y, x_593.z)) + vec3<f32>(x_596.x, x_596.y, x_596.z));
  let x_599 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_598.x, x_598.y, x_598.z, x_599.w);
  let x_604 : vec4<f32> = u_xlat10;
  let x_607 : f32 = x_12.x_Level;
  let x_608 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_604.x, x_604.y, x_604.z), x_607);
  u_xlat10 = x_608;
  let x_609 : vec4<f32> = u_xlat10;
  u_xlat10 = max(x_609, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_611 : vec4<f32> = u_xlat3;
  let x_615 : vec4<f32> = u_xlat7;
  let x_617 : vec3<f32> = ((-(vec3<f32>(x_611.z, x_611.x, x_611.y)) * vec3<f32>(1.5f, 1.5f, 1.5f)) + vec3<f32>(x_615.x, x_615.y, x_615.z));
  let x_618 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_617.x, x_617.y, x_617.z, x_618.w);
  let x_621 : vec4<f32> = u_xlat11;
  let x_623 : vec3<f32> = max(vec3<f32>(x_621.x, x_621.y, x_621.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_624 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_623.x, x_623.y, x_623.z, x_624.w);
  let x_626 : vec4<f32> = u_xlat12;
  let x_628 : vec3<f32> = min(vec3<f32>(x_626.x, x_626.y, x_626.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_629 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_628.x, x_628.y, x_628.z, x_629.w);
  let x_631 : vec4<f32> = u_xlat11;
  let x_633 : vec4<f32> = u_xlat12;
  let x_636 : vec3<f32> = (vec3<f32>(x_631.x, x_631.y, x_631.z) + -(vec3<f32>(x_633.x, x_633.y, x_633.z)));
  let x_637 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_636.x, x_636.y, x_636.z, x_637.w);
  let x_640 : f32 = u_xlat11.y;
  let x_643 : f32 = u_xlat11.x;
  u_xlat51 = max(abs(x_640), abs(x_643));
  let x_647 : f32 = u_xlat11.z;
  let x_649 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_647), x_649);
  let x_651 : f32 = u_xlat51;
  let x_654 : vec4<f32> = u_xlat1;
  let x_657 : vec4<f32> = u_xlat12;
  let x_659 : vec3<f32> = ((-(vec3<f32>(x_651, x_651, x_651)) * vec3<f32>(x_654.x, x_654.y, x_654.z)) + vec3<f32>(x_657.x, x_657.y, x_657.z));
  let x_660 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_659.x, x_659.y, x_659.z, x_660.w);
  let x_665 : vec4<f32> = u_xlat11;
  let x_668 : f32 = x_12.x_Level;
  let x_669 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_665.x, x_665.y, x_665.z), x_668);
  u_xlat11 = x_669;
  let x_670 : vec4<f32> = u_xlat11;
  u_xlat11 = max(x_670, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_672 : vec4<f32> = u_xlat10;
  let x_673 : vec4<f32> = u_xlat11;
  u_xlat10 = (x_672 + x_673);
  let x_675 : vec4<f32> = u_xlat8;
  let x_677 : vec4<f32> = u_xlat10;
  let x_679 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_675.z, x_675.z, x_675.z, x_675.z) * x_677) + x_679);
  let x_681 : vec4<f32> = u_xlat3;
  let x_685 : vec4<f32> = u_xlat6;
  let x_687 : vec3<f32> = ((-(vec3<f32>(x_681.z, x_681.x, x_681.y)) * vec3<f32>(1.5f, 1.5f, 1.5f)) + vec3<f32>(x_685.x, x_685.y, x_685.z));
  let x_688 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_687.x, x_687.y, x_687.z, x_688.w);
  let x_690 : vec4<f32> = u_xlat10;
  let x_692 : vec3<f32> = max(vec3<f32>(x_690.x, x_690.y, x_690.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_693 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
  let x_695 : vec4<f32> = u_xlat11;
  let x_697 : vec3<f32> = min(vec3<f32>(x_695.x, x_695.y, x_695.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_698 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_697.x, x_697.y, x_697.z, x_698.w);
  let x_700 : vec4<f32> = u_xlat10;
  let x_702 : vec4<f32> = u_xlat11;
  let x_705 : vec3<f32> = (vec3<f32>(x_700.x, x_700.y, x_700.z) + -(vec3<f32>(x_702.x, x_702.y, x_702.z)));
  let x_706 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
  let x_709 : f32 = u_xlat10.y;
  let x_712 : f32 = u_xlat10.x;
  u_xlat51 = max(abs(x_709), abs(x_712));
  let x_716 : f32 = u_xlat10.z;
  let x_718 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_716), x_718);
  let x_720 : f32 = u_xlat51;
  let x_723 : vec4<f32> = u_xlat1;
  let x_726 : vec4<f32> = u_xlat11;
  let x_728 : vec3<f32> = ((-(vec3<f32>(x_720, x_720, x_720)) * vec3<f32>(x_723.x, x_723.y, x_723.z)) + vec3<f32>(x_726.x, x_726.y, x_726.z));
  let x_729 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
  let x_734 : vec4<f32> = u_xlat10;
  let x_737 : f32 = x_12.x_Level;
  let x_738 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_734.x, x_734.y, x_734.z), x_737);
  u_xlat10 = x_738;
  let x_739 : vec4<f32> = u_xlat10;
  u_xlat10 = max(x_739, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_741 : vec4<f32> = u_xlat3;
  let x_745 : vec3<f32> = u_xlat4;
  let x_746 : vec3<f32> = ((-(vec3<f32>(x_741.z, x_741.x, x_741.y)) * vec3<f32>(1.5f, 1.5f, 1.5f)) + x_745);
  let x_747 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_746.x, x_746.y, x_746.z, x_747.w);
  let x_749 : vec4<f32> = u_xlat11;
  let x_751 : vec3<f32> = max(vec3<f32>(x_749.x, x_749.y, x_749.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_752 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_751.x, x_751.y, x_751.z, x_752.w);
  let x_754 : vec4<f32> = u_xlat12;
  let x_756 : vec3<f32> = min(vec3<f32>(x_754.x, x_754.y, x_754.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_757 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_756.x, x_756.y, x_756.z, x_757.w);
  let x_759 : vec4<f32> = u_xlat11;
  let x_761 : vec4<f32> = u_xlat12;
  let x_764 : vec3<f32> = (vec3<f32>(x_759.x, x_759.y, x_759.z) + -(vec3<f32>(x_761.x, x_761.y, x_761.z)));
  let x_765 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_764.x, x_764.y, x_764.z, x_765.w);
  let x_768 : f32 = u_xlat11.y;
  let x_771 : f32 = u_xlat11.x;
  u_xlat51 = max(abs(x_768), abs(x_771));
  let x_775 : f32 = u_xlat11.z;
  let x_777 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_775), x_777);
  let x_779 : f32 = u_xlat51;
  let x_782 : vec4<f32> = u_xlat1;
  let x_785 : vec4<f32> = u_xlat12;
  let x_787 : vec3<f32> = ((-(vec3<f32>(x_779, x_779, x_779)) * vec3<f32>(x_782.x, x_782.y, x_782.z)) + vec3<f32>(x_785.x, x_785.y, x_785.z));
  let x_788 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_787.x, x_787.y, x_787.z, x_788.w);
  let x_793 : vec4<f32> = u_xlat11;
  let x_796 : f32 = x_12.x_Level;
  let x_797 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_793.x, x_793.y, x_793.z), x_796);
  u_xlat11 = x_797;
  let x_798 : vec4<f32> = u_xlat11;
  u_xlat11 = max(x_798, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_800 : vec4<f32> = u_xlat10;
  let x_801 : vec4<f32> = u_xlat11;
  u_xlat10 = (x_800 + x_801);
  let x_803 : vec4<f32> = u_xlat8;
  let x_805 : vec4<f32> = u_xlat10;
  u_xlat10 = (vec4<f32>(x_803.y, x_803.y, x_803.y, x_803.y) * x_805);
  let x_807 : vec4<f32> = u_xlat3;
  let x_811 : vec4<f32> = vs_TEXCOORD0;
  let x_813 : vec3<f32> = ((-(vec3<f32>(x_807.z, x_807.x, x_807.y)) * vec3<f32>(1.5f, 1.5f, 1.5f)) + vec3<f32>(x_811.x, x_811.y, x_811.z));
  let x_814 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_813.x, x_813.y, x_813.z, x_814.w);
  let x_816 : vec4<f32> = u_xlat11;
  let x_818 : vec3<f32> = max(vec3<f32>(x_816.x, x_816.y, x_816.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_819 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
  let x_821 : vec4<f32> = u_xlat12;
  let x_823 : vec3<f32> = min(vec3<f32>(x_821.x, x_821.y, x_821.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_824 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_823.x, x_823.y, x_823.z, x_824.w);
  let x_826 : vec4<f32> = u_xlat11;
  let x_828 : vec4<f32> = u_xlat12;
  let x_831 : vec3<f32> = (vec3<f32>(x_826.x, x_826.y, x_826.z) + -(vec3<f32>(x_828.x, x_828.y, x_828.z)));
  let x_832 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_831.x, x_831.y, x_831.z, x_832.w);
  let x_835 : f32 = u_xlat11.y;
  let x_838 : f32 = u_xlat11.x;
  u_xlat51 = max(abs(x_835), abs(x_838));
  let x_842 : f32 = u_xlat11.z;
  let x_844 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_842), x_844);
  let x_846 : f32 = u_xlat51;
  let x_849 : vec4<f32> = u_xlat1;
  let x_852 : vec4<f32> = u_xlat12;
  let x_854 : vec3<f32> = ((-(vec3<f32>(x_846, x_846, x_846)) * vec3<f32>(x_849.x, x_849.y, x_849.z)) + vec3<f32>(x_852.x, x_852.y, x_852.z));
  let x_855 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_854.x, x_854.y, x_854.z, x_855.w);
  let x_857 : vec4<f32> = u_xlat3;
  let x_860 : vec4<f32> = u_xlat11;
  let x_862 : vec3<f32> = ((vec3<f32>(x_857.x, x_857.y, x_857.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_860.x, x_860.y, x_860.z));
  let x_863 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_862.x, x_862.y, x_862.z, x_863.w);
  let x_865 : vec4<f32> = u_xlat3;
  let x_869 : vec4<f32> = u_xlat11;
  let x_871 : vec3<f32> = ((-(vec3<f32>(x_865.x, x_865.y, x_865.z)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_869.x, x_869.y, x_869.z));
  let x_872 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_871.x, x_871.y, x_871.z, x_872.w);
  let x_877 : vec4<f32> = u_xlat11;
  let x_880 : f32 = x_12.x_Level;
  let x_881 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_877.x, x_877.y, x_877.z), x_880);
  u_xlat11 = x_881;
  let x_882 : vec4<f32> = u_xlat11;
  u_xlat11 = max(x_882, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_887 : vec4<f32> = u_xlat12;
  let x_890 : f32 = x_12.x_Level;
  let x_891 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_887.x, x_887.y, x_887.z), x_890);
  u_xlat12 = x_891;
  let x_892 : vec4<f32> = u_xlat12;
  u_xlat12 = max(x_892, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_894 : vec4<f32> = u_xlat11;
  let x_895 : vec4<f32> = u_xlat12;
  u_xlat11 = (x_894 + x_895);
  let x_897 : vec4<f32> = u_xlat8;
  let x_899 : vec4<f32> = u_xlat11;
  let x_901 : vec4<f32> = u_xlat10;
  u_xlat10 = ((vec4<f32>(x_897.x, x_897.x, x_897.x, x_897.x) * x_899) + x_901);
  let x_903 : vec4<f32> = u_xlat5;
  let x_904 : vec4<f32> = u_xlat10;
  u_xlat5 = (x_903 + x_904);
  let x_906 : vec4<f32> = u_xlat7;
  let x_908 : vec3<f32> = max(vec3<f32>(x_906.x, x_906.y, x_906.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_909 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_908.x, x_908.y, x_908.z, x_909.w);
  let x_911 : vec4<f32> = u_xlat10;
  let x_913 : vec3<f32> = min(vec3<f32>(x_911.x, x_911.y, x_911.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_914 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_913.x, x_913.y, x_913.z, x_914.w);
  let x_916 : vec4<f32> = u_xlat7;
  let x_918 : vec4<f32> = u_xlat10;
  let x_921 : vec3<f32> = (vec3<f32>(x_916.x, x_916.y, x_916.z) + -(vec3<f32>(x_918.x, x_918.y, x_918.z)));
  let x_922 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_921.x, x_921.y, x_921.z, x_922.w);
  let x_925 : f32 = u_xlat11.y;
  let x_928 : f32 = u_xlat11.x;
  u_xlat51 = max(abs(x_925), abs(x_928));
  let x_932 : f32 = u_xlat11.z;
  let x_934 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_932), x_934);
  let x_936 : f32 = u_xlat51;
  let x_939 : vec4<f32> = u_xlat1;
  let x_942 : vec4<f32> = u_xlat10;
  let x_944 : vec3<f32> = ((-(vec3<f32>(x_936, x_936, x_936)) * vec3<f32>(x_939.x, x_939.y, x_939.z)) + vec3<f32>(x_942.x, x_942.y, x_942.z));
  let x_945 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_944.x, x_944.y, x_944.z, x_945.w);
  let x_947 : vec4<f32> = u_xlat3;
  let x_951 : vec4<f32> = u_xlat10;
  let x_953 : vec3<f32> = ((-(vec3<f32>(x_947.z, x_947.x, x_947.y)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_951.x, x_951.y, x_951.z));
  let x_954 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_953.x, x_953.y, x_953.z, x_954.w);
  let x_956 : vec4<f32> = u_xlat3;
  let x_959 : vec4<f32> = u_xlat10;
  let x_961 : vec3<f32> = ((vec3<f32>(x_956.z, x_956.x, x_956.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_959.x, x_959.y, x_959.z));
  let x_962 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_961.x, x_961.y, x_961.z, x_962.w);
  let x_967 : vec4<f32> = u_xlat10;
  let x_970 : f32 = x_12.x_Level;
  let x_971 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_967.x, x_967.y, x_967.z), x_970);
  u_xlat10 = x_971;
  let x_972 : vec4<f32> = u_xlat10;
  u_xlat10 = max(x_972, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_977 : vec4<f32> = u_xlat11;
  let x_980 : f32 = x_12.x_Level;
  let x_981 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_977.x, x_977.y, x_977.z), x_980);
  u_xlat11 = x_981;
  let x_982 : vec4<f32> = u_xlat11;
  u_xlat11 = max(x_982, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_984 : vec3<f32> = u_xlat9;
  let x_985 : vec3<f32> = max(x_984, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_986 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_985.x, x_985.y, x_985.z, x_986.w);
  let x_988 : vec4<f32> = u_xlat12;
  let x_990 : vec3<f32> = min(vec3<f32>(x_988.x, x_988.y, x_988.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_991 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_990.x, x_990.y, x_990.z, x_991.w);
  let x_994 : vec3<f32> = u_xlat9;
  let x_995 : vec4<f32> = u_xlat12;
  let x_998 : vec3<f32> = (x_994 + -(vec3<f32>(x_995.x, x_995.y, x_995.z)));
  let x_999 : vec4<f32> = u_xlat13;
  u_xlat13 = vec4<f32>(x_998.x, x_998.y, x_998.z, x_999.w);
  let x_1002 : f32 = u_xlat13.y;
  let x_1005 : f32 = u_xlat13.x;
  u_xlat51 = max(abs(x_1002), abs(x_1005));
  let x_1009 : f32 = u_xlat13.z;
  let x_1011 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_1009), x_1011);
  let x_1013 : f32 = u_xlat51;
  let x_1016 : vec4<f32> = u_xlat1;
  let x_1019 : vec4<f32> = u_xlat12;
  let x_1021 : vec3<f32> = ((-(vec3<f32>(x_1013, x_1013, x_1013)) * vec3<f32>(x_1016.x, x_1016.y, x_1016.z)) + vec3<f32>(x_1019.x, x_1019.y, x_1019.z));
  let x_1022 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_1021.x, x_1021.y, x_1021.z, x_1022.w);
  let x_1024 : vec4<f32> = u_xlat3;
  let x_1028 : vec4<f32> = u_xlat12;
  let x_1030 : vec3<f32> = ((-(vec3<f32>(x_1024.z, x_1024.x, x_1024.y)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1028.x, x_1028.y, x_1028.z));
  let x_1031 : vec4<f32> = u_xlat13;
  u_xlat13 = vec4<f32>(x_1030.x, x_1030.y, x_1030.z, x_1031.w);
  let x_1033 : vec4<f32> = u_xlat3;
  let x_1036 : vec4<f32> = u_xlat12;
  let x_1038 : vec3<f32> = ((vec3<f32>(x_1033.z, x_1033.x, x_1033.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1036.x, x_1036.y, x_1036.z));
  let x_1039 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_1038.x, x_1038.y, x_1038.z, x_1039.w);
  let x_1044 : vec4<f32> = u_xlat12;
  let x_1047 : f32 = x_12.x_Level;
  let x_1048 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1044.x, x_1044.y, x_1044.z), x_1047);
  u_xlat12 = x_1048;
  let x_1049 : vec4<f32> = u_xlat12;
  u_xlat12 = max(x_1049, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1051 : vec4<f32> = u_xlat10;
  let x_1052 : vec4<f32> = u_xlat12;
  u_xlat10 = (x_1051 + x_1052);
  let x_1057 : vec4<f32> = u_xlat13;
  let x_1060 : f32 = x_12.x_Level;
  let x_1061 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1057.x, x_1057.y, x_1057.z), x_1060);
  u_xlat12 = x_1061;
  let x_1062 : vec4<f32> = u_xlat12;
  u_xlat12 = max(x_1062, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1064 : vec4<f32> = u_xlat11;
  let x_1065 : vec4<f32> = u_xlat12;
  u_xlat11 = (x_1064 + x_1065);
  let x_1067 : vec3<f32> = u_xlat0;
  let x_1069 : vec4<f32> = u_xlat11;
  let x_1071 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_1067.z, x_1067.z, x_1067.z, x_1067.z) * x_1069) + x_1071);
  let x_1073 : vec3<f32> = u_xlat4;
  let x_1074 : vec3<f32> = max(x_1073, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1075 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1074.x, x_1074.y, x_1074.z, x_1075.w);
  let x_1077 : vec4<f32> = u_xlat11;
  let x_1079 : vec3<f32> = min(vec3<f32>(x_1077.x, x_1077.y, x_1077.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1080 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1079.x, x_1079.y, x_1079.z, x_1080.w);
  let x_1082 : vec3<f32> = u_xlat4;
  let x_1083 : vec4<f32> = u_xlat11;
  let x_1086 : vec3<f32> = (x_1082 + -(vec3<f32>(x_1083.x, x_1083.y, x_1083.z)));
  let x_1087 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_1086.x, x_1086.y, x_1086.z, x_1087.w);
  let x_1090 : f32 = u_xlat12.y;
  let x_1093 : f32 = u_xlat12.x;
  u_xlat51 = max(abs(x_1090), abs(x_1093));
  let x_1097 : f32 = u_xlat12.z;
  let x_1099 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_1097), x_1099);
  let x_1101 : f32 = u_xlat51;
  let x_1104 : vec4<f32> = u_xlat1;
  let x_1107 : vec4<f32> = u_xlat11;
  let x_1109 : vec3<f32> = ((-(vec3<f32>(x_1101, x_1101, x_1101)) * vec3<f32>(x_1104.x, x_1104.y, x_1104.z)) + vec3<f32>(x_1107.x, x_1107.y, x_1107.z));
  let x_1110 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1109.x, x_1109.y, x_1109.z, x_1110.w);
  let x_1112 : vec4<f32> = u_xlat3;
  let x_1116 : vec4<f32> = u_xlat11;
  let x_1118 : vec3<f32> = ((-(vec3<f32>(x_1112.z, x_1112.x, x_1112.y)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1116.x, x_1116.y, x_1116.z));
  let x_1119 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_1118.x, x_1118.y, x_1118.z, x_1119.w);
  let x_1121 : vec4<f32> = u_xlat3;
  let x_1124 : vec4<f32> = u_xlat11;
  let x_1126 : vec3<f32> = ((vec3<f32>(x_1121.z, x_1121.x, x_1121.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1124.x, x_1124.y, x_1124.z));
  let x_1127 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1126.x, x_1126.y, x_1126.z, x_1127.w);
  let x_1132 : vec4<f32> = u_xlat11;
  let x_1135 : f32 = x_12.x_Level;
  let x_1136 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1132.x, x_1132.y, x_1132.z), x_1135);
  u_xlat11 = x_1136;
  let x_1137 : vec4<f32> = u_xlat11;
  u_xlat11 = max(x_1137, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1142 : vec4<f32> = u_xlat12;
  let x_1145 : f32 = x_12.x_Level;
  let x_1146 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1142.x, x_1142.y, x_1142.z), x_1145);
  u_xlat12 = x_1146;
  let x_1147 : vec4<f32> = u_xlat12;
  u_xlat12 = max(x_1147, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1149 : vec4<f32> = u_xlat6;
  let x_1151 : vec3<f32> = max(vec3<f32>(x_1149.x, x_1149.y, x_1149.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1152 : vec4<f32> = u_xlat13;
  u_xlat13 = vec4<f32>(x_1151.x, x_1151.y, x_1151.z, x_1152.w);
  let x_1154 : vec4<f32> = u_xlat13;
  let x_1156 : vec3<f32> = min(vec3<f32>(x_1154.x, x_1154.y, x_1154.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1157 : vec4<f32> = u_xlat13;
  u_xlat13 = vec4<f32>(x_1156.x, x_1156.y, x_1156.z, x_1157.w);
  let x_1160 : vec4<f32> = u_xlat6;
  let x_1162 : vec4<f32> = u_xlat13;
  let x_1165 : vec3<f32> = (vec3<f32>(x_1160.x, x_1160.y, x_1160.z) + -(vec3<f32>(x_1162.x, x_1162.y, x_1162.z)));
  let x_1166 : vec4<f32> = u_xlat14;
  u_xlat14 = vec4<f32>(x_1165.x, x_1165.y, x_1165.z, x_1166.w);
  let x_1169 : f32 = u_xlat14.y;
  let x_1172 : f32 = u_xlat14.x;
  u_xlat51 = max(abs(x_1169), abs(x_1172));
  let x_1176 : f32 = u_xlat14.z;
  let x_1178 : f32 = u_xlat51;
  u_xlat51 = max(abs(x_1176), x_1178);
  let x_1180 : f32 = u_xlat51;
  let x_1183 : vec4<f32> = u_xlat1;
  let x_1186 : vec4<f32> = u_xlat13;
  let x_1188 : vec3<f32> = ((-(vec3<f32>(x_1180, x_1180, x_1180)) * vec3<f32>(x_1183.x, x_1183.y, x_1183.z)) + vec3<f32>(x_1186.x, x_1186.y, x_1186.z));
  let x_1189 : vec4<f32> = u_xlat13;
  u_xlat13 = vec4<f32>(x_1188.x, x_1188.y, x_1188.z, x_1189.w);
  let x_1191 : vec4<f32> = u_xlat3;
  let x_1195 : vec4<f32> = u_xlat13;
  let x_1197 : vec3<f32> = ((-(vec3<f32>(x_1191.z, x_1191.x, x_1191.y)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1195.x, x_1195.y, x_1195.z));
  let x_1198 : vec4<f32> = u_xlat14;
  u_xlat14 = vec4<f32>(x_1197.x, x_1197.y, x_1197.z, x_1198.w);
  let x_1200 : vec4<f32> = u_xlat3;
  let x_1203 : vec4<f32> = u_xlat13;
  let x_1205 : vec3<f32> = ((vec3<f32>(x_1200.z, x_1200.x, x_1200.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1203.x, x_1203.y, x_1203.z));
  let x_1206 : vec4<f32> = u_xlat13;
  u_xlat13 = vec4<f32>(x_1205.x, x_1205.y, x_1205.z, x_1206.w);
  let x_1211 : vec4<f32> = u_xlat13;
  let x_1214 : f32 = x_12.x_Level;
  let x_1215 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1211.x, x_1211.y, x_1211.z), x_1214);
  u_xlat13 = x_1215;
  let x_1216 : vec4<f32> = u_xlat13;
  u_xlat13 = max(x_1216, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1218 : vec4<f32> = u_xlat11;
  let x_1219 : vec4<f32> = u_xlat13;
  u_xlat11 = (x_1218 + x_1219);
  let x_1221 : vec3<f32> = u_xlat0;
  let x_1223 : vec4<f32> = u_xlat11;
  u_xlat11 = (vec4<f32>(x_1221.y, x_1221.y, x_1221.y, x_1221.y) * x_1223);
  let x_1228 : vec4<f32> = u_xlat14;
  let x_1231 : f32 = x_12.x_Level;
  let x_1232 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1228.x, x_1228.y, x_1228.z), x_1231);
  u_xlat13 = x_1232;
  let x_1233 : vec4<f32> = u_xlat13;
  u_xlat13 = max(x_1233, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1235 : vec4<f32> = u_xlat12;
  let x_1236 : vec4<f32> = u_xlat13;
  u_xlat12 = (x_1235 + x_1236);
  let x_1238 : vec3<f32> = u_xlat0;
  let x_1240 : vec4<f32> = u_xlat12;
  u_xlat12 = (vec4<f32>(x_1238.y, x_1238.y, x_1238.y, x_1238.y) * x_1240);
  let x_1242 : vec4<f32> = u_xlat3;
  let x_1246 : vec4<f32> = vs_TEXCOORD0;
  let x_1248 : vec3<f32> = ((-(vec3<f32>(x_1242.x, x_1242.y, x_1242.z)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1246.x, x_1246.y, x_1246.z));
  let x_1249 : vec4<f32> = u_xlat13;
  u_xlat13 = vec4<f32>(x_1248.x, x_1248.y, x_1248.z, x_1249.w);
  let x_1251 : vec4<f32> = u_xlat3;
  let x_1255 : vec4<f32> = u_xlat13;
  let x_1257 : vec3<f32> = ((-(vec3<f32>(x_1251.z, x_1251.x, x_1251.y)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1255.x, x_1255.y, x_1255.z));
  let x_1258 : vec4<f32> = u_xlat14;
  u_xlat14 = vec4<f32>(x_1257.x, x_1257.y, x_1257.z, x_1258.w);
  let x_1260 : vec4<f32> = u_xlat3;
  let x_1263 : vec4<f32> = u_xlat13;
  let x_1265 : vec3<f32> = ((vec3<f32>(x_1260.z, x_1260.x, x_1260.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1263.x, x_1263.y, x_1263.z));
  let x_1266 : vec4<f32> = u_xlat13;
  u_xlat13 = vec4<f32>(x_1265.x, x_1265.y, x_1265.z, x_1266.w);
  let x_1271 : vec4<f32> = u_xlat13;
  let x_1274 : f32 = x_12.x_Level;
  let x_1275 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1271.x, x_1271.y, x_1271.z), x_1274);
  u_xlat13 = x_1275;
  let x_1276 : vec4<f32> = u_xlat13;
  u_xlat13 = max(x_1276, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1281 : vec4<f32> = u_xlat14;
  let x_1284 : f32 = x_12.x_Level;
  let x_1285 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1281.x, x_1281.y, x_1281.z), x_1284);
  u_xlat14 = x_1285;
  let x_1286 : vec4<f32> = u_xlat14;
  u_xlat14 = max(x_1286, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1289 : vec4<f32> = u_xlat3;
  let x_1292 : vec4<f32> = vs_TEXCOORD0;
  let x_1294 : vec3<f32> = ((vec3<f32>(x_1289.x, x_1289.y, x_1289.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1292.x, x_1292.y, x_1292.z));
  let x_1295 : vec4<f32> = u_xlat15;
  u_xlat15 = vec4<f32>(x_1294.x, x_1294.y, x_1294.z, x_1295.w);
  let x_1298 : vec4<f32> = u_xlat3;
  let x_1302 : vec4<f32> = u_xlat15;
  u_xlat16 = ((-(vec3<f32>(x_1298.z, x_1298.x, x_1298.y)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1302.x, x_1302.y, x_1302.z));
  let x_1305 : vec4<f32> = u_xlat3;
  let x_1308 : vec4<f32> = u_xlat15;
  let x_1310 : vec3<f32> = ((vec3<f32>(x_1305.z, x_1305.x, x_1305.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1308.x, x_1308.y, x_1308.z));
  let x_1311 : vec4<f32> = u_xlat15;
  u_xlat15 = vec4<f32>(x_1310.x, x_1310.y, x_1310.z, x_1311.w);
  let x_1316 : vec4<f32> = u_xlat15;
  let x_1319 : f32 = x_12.x_Level;
  let x_1320 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1316.x, x_1316.y, x_1316.z), x_1319);
  u_xlat15 = x_1320;
  let x_1321 : vec4<f32> = u_xlat15;
  u_xlat15 = max(x_1321, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1323 : vec4<f32> = u_xlat13;
  let x_1324 : vec4<f32> = u_xlat15;
  u_xlat13 = (x_1323 + x_1324);
  let x_1326 : vec3<f32> = u_xlat0;
  let x_1328 : vec4<f32> = u_xlat13;
  let x_1330 : vec4<f32> = u_xlat11;
  u_xlat11 = ((vec4<f32>(x_1326.x, x_1326.x, x_1326.x, x_1326.x) * x_1328) + x_1330);
  let x_1335 : vec3<f32> = u_xlat16;
  let x_1337 : f32 = x_12.x_Level;
  let x_1338 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, x_1335, x_1337);
  u_xlat13 = x_1338;
  let x_1339 : vec4<f32> = u_xlat13;
  u_xlat13 = max(x_1339, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1341 : vec4<f32> = u_xlat13;
  let x_1342 : vec4<f32> = u_xlat14;
  u_xlat13 = (x_1341 + x_1342);
  let x_1344 : vec3<f32> = u_xlat0;
  let x_1346 : vec4<f32> = u_xlat13;
  let x_1348 : vec4<f32> = u_xlat12;
  u_xlat12 = ((vec4<f32>(x_1344.x, x_1344.x, x_1344.x, x_1344.x) * x_1346) + x_1348);
  let x_1350 : vec4<f32> = u_xlat5;
  let x_1351 : vec4<f32> = u_xlat12;
  u_xlat5 = (x_1350 + x_1351);
  let x_1353 : vec3<f32> = u_xlat0;
  let x_1355 : vec4<f32> = u_xlat10;
  let x_1357 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_1353.z, x_1353.z, x_1353.z, x_1353.z) * x_1355) + x_1357);
  let x_1359 : vec3<f32> = u_xlat0;
  u_xlat0.x = dot(x_1359, vec3<f32>(2.0f, 2.0f, 2.0f));
  let x_1364 : vec4<f32> = u_xlat11;
  let x_1365 : vec4<f32> = u_xlat5;
  u_xlat5 = (x_1364 + x_1365);
  let x_1368 : vec4<f32> = u_xlat3;
  let x_1371 : vec4<f32> = u_xlat7;
  u_xlat17 = ((vec3<f32>(x_1368.z, x_1368.x, x_1368.y) * vec3<f32>(1.5f, 1.5f, 1.5f)) + vec3<f32>(x_1371.x, x_1371.y, x_1371.z));
  let x_1374 : vec4<f32> = u_xlat3;
  let x_1377 : vec4<f32> = u_xlat7;
  let x_1379 : vec3<f32> = ((vec3<f32>(x_1374.z, x_1374.x, x_1374.y) * vec3<f32>(2.5f, 2.5f, 2.5f)) + vec3<f32>(x_1377.x, x_1377.y, x_1377.z));
  let x_1380 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1379.x, x_1379.y, x_1379.z, x_1380.w);
  let x_1382 : vec3<f32> = u_xlat17;
  let x_1383 : vec3<f32> = max(x_1382, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1384 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_1383.x, x_1383.y, x_1383.z, x_1384.w);
  let x_1386 : vec4<f32> = u_xlat10;
  let x_1388 : vec3<f32> = min(vec3<f32>(x_1386.x, x_1386.y, x_1386.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1389 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_1388.x, x_1388.y, x_1388.z, x_1389.w);
  let x_1391 : vec3<f32> = u_xlat17;
  let x_1392 : vec4<f32> = u_xlat10;
  u_xlat17 = (x_1391 + -(vec3<f32>(x_1392.x, x_1392.y, x_1392.z)));
  let x_1397 : f32 = u_xlat17.y;
  let x_1400 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1397), abs(x_1400));
  let x_1405 : f32 = u_xlat17.z;
  let x_1408 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1405), x_1408);
  let x_1411 : vec3<f32> = u_xlat17;
  let x_1414 : vec4<f32> = u_xlat1;
  let x_1417 : vec4<f32> = u_xlat10;
  u_xlat17 = ((-(vec3<f32>(x_1411.x, x_1411.x, x_1411.x)) * vec3<f32>(x_1414.x, x_1414.y, x_1414.z)) + vec3<f32>(x_1417.x, x_1417.y, x_1417.z));
  let x_1423 : vec3<f32> = u_xlat17;
  let x_1425 : f32 = x_12.x_Level;
  let x_1426 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, x_1423, x_1425);
  u_xlat10 = x_1426;
  let x_1427 : vec4<f32> = u_xlat10;
  u_xlat10 = max(x_1427, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1429 : vec4<f32> = u_xlat3;
  let x_1432 : vec3<f32> = u_xlat9;
  u_xlat17 = ((vec3<f32>(x_1429.z, x_1429.x, x_1429.y) * vec3<f32>(1.5f, 1.5f, 1.5f)) + x_1432);
  let x_1434 : vec4<f32> = u_xlat3;
  let x_1437 : vec3<f32> = u_xlat9;
  u_xlat9 = ((vec3<f32>(x_1434.z, x_1434.x, x_1434.y) * vec3<f32>(2.5f, 2.5f, 2.5f)) + x_1437);
  let x_1439 : vec3<f32> = u_xlat17;
  let x_1440 : vec3<f32> = max(x_1439, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1441 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1440.x, x_1440.y, x_1440.z, x_1441.w);
  let x_1443 : vec4<f32> = u_xlat11;
  let x_1445 : vec3<f32> = min(vec3<f32>(x_1443.x, x_1443.y, x_1443.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1446 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1445.x, x_1445.y, x_1445.z, x_1446.w);
  let x_1448 : vec3<f32> = u_xlat17;
  let x_1449 : vec4<f32> = u_xlat11;
  u_xlat17 = (x_1448 + -(vec3<f32>(x_1449.x, x_1449.y, x_1449.z)));
  let x_1454 : f32 = u_xlat17.y;
  let x_1457 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1454), abs(x_1457));
  let x_1462 : f32 = u_xlat17.z;
  let x_1465 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1462), x_1465);
  let x_1468 : vec3<f32> = u_xlat17;
  let x_1471 : vec4<f32> = u_xlat1;
  let x_1474 : vec4<f32> = u_xlat11;
  u_xlat17 = ((-(vec3<f32>(x_1468.x, x_1468.x, x_1468.x)) * vec3<f32>(x_1471.x, x_1471.y, x_1471.z)) + vec3<f32>(x_1474.x, x_1474.y, x_1474.z));
  let x_1480 : vec3<f32> = u_xlat17;
  let x_1482 : f32 = x_12.x_Level;
  let x_1483 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, x_1480, x_1482);
  u_xlat11 = x_1483;
  let x_1484 : vec4<f32> = u_xlat11;
  u_xlat11 = max(x_1484, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1486 : vec4<f32> = u_xlat10;
  let x_1487 : vec4<f32> = u_xlat11;
  u_xlat10 = (x_1486 + x_1487);
  let x_1489 : vec4<f32> = u_xlat8;
  let x_1491 : vec4<f32> = u_xlat10;
  let x_1493 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_1489.z, x_1489.z, x_1489.z, x_1489.z) * x_1491) + x_1493);
  let x_1495 : vec4<f32> = u_xlat3;
  let x_1498 : vec3<f32> = u_xlat4;
  u_xlat17 = ((vec3<f32>(x_1495.z, x_1495.x, x_1495.y) * vec3<f32>(1.5f, 1.5f, 1.5f)) + x_1498);
  let x_1500 : vec4<f32> = u_xlat3;
  let x_1503 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_1500.z, x_1500.x, x_1500.y) * vec3<f32>(2.5f, 2.5f, 2.5f)) + x_1503);
  let x_1505 : vec3<f32> = u_xlat17;
  let x_1506 : vec3<f32> = max(x_1505, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1507 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_1506.x, x_1506.y, x_1506.z, x_1507.w);
  let x_1509 : vec4<f32> = u_xlat10;
  let x_1511 : vec3<f32> = min(vec3<f32>(x_1509.x, x_1509.y, x_1509.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1512 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_1511.x, x_1511.y, x_1511.z, x_1512.w);
  let x_1514 : vec3<f32> = u_xlat17;
  let x_1515 : vec4<f32> = u_xlat10;
  u_xlat17 = (x_1514 + -(vec3<f32>(x_1515.x, x_1515.y, x_1515.z)));
  let x_1520 : f32 = u_xlat17.y;
  let x_1523 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1520), abs(x_1523));
  let x_1528 : f32 = u_xlat17.z;
  let x_1531 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1528), x_1531);
  let x_1534 : vec3<f32> = u_xlat17;
  let x_1537 : vec4<f32> = u_xlat1;
  let x_1540 : vec4<f32> = u_xlat10;
  u_xlat17 = ((-(vec3<f32>(x_1534.x, x_1534.x, x_1534.x)) * vec3<f32>(x_1537.x, x_1537.y, x_1537.z)) + vec3<f32>(x_1540.x, x_1540.y, x_1540.z));
  let x_1546 : vec3<f32> = u_xlat17;
  let x_1548 : f32 = x_12.x_Level;
  let x_1549 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, x_1546, x_1548);
  u_xlat10 = x_1549;
  let x_1550 : vec4<f32> = u_xlat10;
  u_xlat10 = max(x_1550, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1552 : vec4<f32> = u_xlat3;
  let x_1555 : vec4<f32> = u_xlat6;
  u_xlat17 = ((vec3<f32>(x_1552.z, x_1552.x, x_1552.y) * vec3<f32>(1.5f, 1.5f, 1.5f)) + vec3<f32>(x_1555.x, x_1555.y, x_1555.z));
  let x_1558 : vec4<f32> = u_xlat3;
  let x_1561 : vec4<f32> = u_xlat6;
  let x_1563 : vec3<f32> = ((vec3<f32>(x_1558.z, x_1558.x, x_1558.y) * vec3<f32>(2.5f, 2.5f, 2.5f)) + vec3<f32>(x_1561.x, x_1561.y, x_1561.z));
  let x_1564 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1563.x, x_1563.y, x_1563.z, x_1564.w);
  let x_1566 : vec3<f32> = u_xlat17;
  let x_1567 : vec3<f32> = max(x_1566, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1568 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1567.x, x_1567.y, x_1567.z, x_1568.w);
  let x_1570 : vec4<f32> = u_xlat11;
  let x_1572 : vec3<f32> = min(vec3<f32>(x_1570.x, x_1570.y, x_1570.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1573 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1572.x, x_1572.y, x_1572.z, x_1573.w);
  let x_1575 : vec3<f32> = u_xlat17;
  let x_1576 : vec4<f32> = u_xlat11;
  u_xlat17 = (x_1575 + -(vec3<f32>(x_1576.x, x_1576.y, x_1576.z)));
  let x_1581 : f32 = u_xlat17.y;
  let x_1584 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1581), abs(x_1584));
  let x_1589 : f32 = u_xlat17.z;
  let x_1592 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1589), x_1592);
  let x_1595 : vec3<f32> = u_xlat17;
  let x_1598 : vec4<f32> = u_xlat1;
  let x_1601 : vec4<f32> = u_xlat11;
  u_xlat17 = ((-(vec3<f32>(x_1595.x, x_1595.x, x_1595.x)) * vec3<f32>(x_1598.x, x_1598.y, x_1598.z)) + vec3<f32>(x_1601.x, x_1601.y, x_1601.z));
  let x_1607 : vec3<f32> = u_xlat17;
  let x_1609 : f32 = x_12.x_Level;
  let x_1610 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, x_1607, x_1609);
  u_xlat11 = x_1610;
  let x_1611 : vec4<f32> = u_xlat11;
  u_xlat11 = max(x_1611, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1613 : vec4<f32> = u_xlat10;
  let x_1614 : vec4<f32> = u_xlat11;
  u_xlat10 = (x_1613 + x_1614);
  let x_1616 : vec4<f32> = u_xlat8;
  let x_1618 : vec4<f32> = u_xlat10;
  u_xlat10 = (vec4<f32>(x_1616.y, x_1616.y, x_1616.y, x_1616.y) * x_1618);
  let x_1620 : vec4<f32> = u_xlat3;
  let x_1623 : vec4<f32> = vs_TEXCOORD0;
  u_xlat17 = ((vec3<f32>(x_1620.z, x_1620.x, x_1620.y) * vec3<f32>(1.5f, 1.5f, 1.5f)) + vec3<f32>(x_1623.x, x_1623.y, x_1623.z));
  let x_1626 : vec3<f32> = u_xlat17;
  let x_1627 : vec3<f32> = max(x_1626, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1628 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1627.x, x_1627.y, x_1627.z, x_1628.w);
  let x_1630 : vec4<f32> = u_xlat11;
  let x_1632 : vec3<f32> = min(vec3<f32>(x_1630.x, x_1630.y, x_1630.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1633 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1632.x, x_1632.y, x_1632.z, x_1633.w);
  let x_1635 : vec3<f32> = u_xlat17;
  let x_1636 : vec4<f32> = u_xlat11;
  u_xlat17 = (x_1635 + -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1641 : f32 = u_xlat17.y;
  let x_1644 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1641), abs(x_1644));
  let x_1649 : f32 = u_xlat17.z;
  let x_1652 : f32 = u_xlat17.x;
  u_xlat17.x = max(abs(x_1649), x_1652);
  let x_1655 : vec3<f32> = u_xlat17;
  let x_1658 : vec4<f32> = u_xlat1;
  let x_1661 : vec4<f32> = u_xlat11;
  u_xlat17 = ((-(vec3<f32>(x_1655.x, x_1655.x, x_1655.x)) * vec3<f32>(x_1658.x, x_1658.y, x_1658.z)) + vec3<f32>(x_1661.x, x_1661.y, x_1661.z));
  let x_1664 : vec4<f32> = u_xlat3;
  let x_1668 : vec3<f32> = u_xlat17;
  let x_1669 : vec3<f32> = ((-(vec3<f32>(x_1664.x, x_1664.y, x_1664.z)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + x_1668);
  let x_1670 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1669.x, x_1669.y, x_1669.z, x_1670.w);
  let x_1672 : vec4<f32> = u_xlat3;
  let x_1675 : vec3<f32> = u_xlat17;
  u_xlat17 = ((vec3<f32>(x_1672.x, x_1672.y, x_1672.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + x_1675);
  let x_1680 : vec3<f32> = u_xlat17;
  let x_1682 : f32 = x_12.x_Level;
  let x_1683 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, x_1680, x_1682);
  u_xlat12 = x_1683;
  let x_1684 : vec4<f32> = u_xlat12;
  u_xlat12 = max(x_1684, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1689 : vec4<f32> = u_xlat11;
  let x_1692 : f32 = x_12.x_Level;
  let x_1693 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1689.x, x_1689.y, x_1689.z), x_1692);
  u_xlat11 = x_1693;
  let x_1694 : vec4<f32> = u_xlat11;
  u_xlat11 = max(x_1694, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1696 : vec4<f32> = u_xlat12;
  let x_1697 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_1696 + x_1697);
  let x_1699 : vec4<f32> = u_xlat8;
  let x_1701 : vec4<f32> = u_xlat11;
  let x_1703 : vec4<f32> = u_xlat10;
  u_xlat10 = ((vec4<f32>(x_1699.x, x_1699.x, x_1699.x, x_1699.x) * x_1701) + x_1703);
  let x_1705 : vec4<f32> = u_xlat8;
  u_xlat17.x = dot(vec3<f32>(x_1705.x, x_1705.y, x_1705.z), vec3<f32>(2.0f, 2.0f, 2.0f));
  let x_1709 : vec4<f32> = u_xlat5;
  let x_1710 : vec4<f32> = u_xlat10;
  u_xlat5 = (x_1709 + x_1710);
  let x_1712 : vec3<f32> = u_xlat9;
  let x_1713 : vec3<f32> = max(x_1712, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1714 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1713.x, x_1713.y, x_1713.z, x_1714.w);
  let x_1716 : vec4<f32> = u_xlat8;
  let x_1718 : vec3<f32> = min(vec3<f32>(x_1716.x, x_1716.y, x_1716.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1719 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1718.x, x_1718.y, x_1718.z, x_1719.w);
  let x_1721 : vec4<f32> = u_xlat8;
  let x_1724 : vec3<f32> = u_xlat9;
  u_xlat9 = (-(vec3<f32>(x_1721.x, x_1721.y, x_1721.z)) + x_1724);
  let x_1728 : f32 = u_xlat9.y;
  let x_1731 : f32 = u_xlat9.x;
  u_xlat34 = max(abs(x_1728), abs(x_1731));
  let x_1735 : f32 = u_xlat9.z;
  let x_1737 : f32 = u_xlat34;
  u_xlat34 = max(abs(x_1735), x_1737);
  let x_1739 : f32 = u_xlat34;
  let x_1742 : vec4<f32> = u_xlat1;
  let x_1745 : vec4<f32> = u_xlat8;
  let x_1747 : vec3<f32> = ((-(vec3<f32>(x_1739, x_1739, x_1739)) * vec3<f32>(x_1742.x, x_1742.y, x_1742.z)) + vec3<f32>(x_1745.x, x_1745.y, x_1745.z));
  let x_1748 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1747.x, x_1747.y, x_1747.z, x_1748.w);
  let x_1753 : vec4<f32> = u_xlat8;
  let x_1756 : f32 = x_12.x_Level;
  let x_1757 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1753.x, x_1753.y, x_1753.z), x_1756);
  u_xlat8 = x_1757;
  let x_1758 : vec4<f32> = u_xlat8;
  u_xlat8 = max(x_1758, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1760 : vec4<f32> = u_xlat7;
  u_xlat9 = max(vec3<f32>(x_1760.x, x_1760.y, x_1760.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1763 : vec3<f32> = u_xlat9;
  u_xlat9 = min(x_1763, vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1765 : vec4<f32> = u_xlat7;
  let x_1767 : vec3<f32> = u_xlat9;
  let x_1769 : vec3<f32> = (vec3<f32>(x_1765.x, x_1765.y, x_1765.z) + -(x_1767));
  let x_1770 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1769.x, x_1769.y, x_1769.z, x_1770.w);
  let x_1773 : f32 = u_xlat7.y;
  let x_1776 : f32 = u_xlat7.x;
  u_xlat34 = max(abs(x_1773), abs(x_1776));
  let x_1780 : f32 = u_xlat7.z;
  let x_1782 : f32 = u_xlat34;
  u_xlat34 = max(abs(x_1780), x_1782);
  let x_1784 : f32 = u_xlat34;
  let x_1787 : vec4<f32> = u_xlat1;
  let x_1790 : vec3<f32> = u_xlat9;
  let x_1791 : vec3<f32> = ((-(vec3<f32>(x_1784, x_1784, x_1784)) * vec3<f32>(x_1787.x, x_1787.y, x_1787.z)) + x_1790);
  let x_1792 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1791.x, x_1791.y, x_1791.z, x_1792.w);
  let x_1797 : vec4<f32> = u_xlat7;
  let x_1800 : f32 = x_12.x_Level;
  let x_1801 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1797.x, x_1797.y, x_1797.z), x_1800);
  u_xlat7 = x_1801;
  let x_1802 : vec4<f32> = u_xlat7;
  u_xlat7 = max(x_1802, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1804 : vec4<f32> = u_xlat7;
  let x_1805 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_1804 + x_1805);
  let x_1807 : vec3<f32> = u_xlat2;
  let x_1809 : vec4<f32> = u_xlat7;
  let x_1811 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_1807.z, x_1807.z, x_1807.z, x_1807.z) * x_1809) + x_1811);
  let x_1813 : vec4<f32> = u_xlat3;
  let x_1816 : vec4<f32> = vs_TEXCOORD0;
  let x_1818 : vec3<f32> = ((vec3<f32>(x_1813.z, x_1813.x, x_1813.y) * vec3<f32>(2.5f, 2.5f, 2.5f)) + vec3<f32>(x_1816.x, x_1816.y, x_1816.z));
  let x_1819 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1818.x, x_1818.y, x_1818.z, x_1819.w);
  let x_1821 : vec4<f32> = u_xlat7;
  let x_1823 : vec3<f32> = max(vec3<f32>(x_1821.x, x_1821.y, x_1821.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1824 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1823.x, x_1823.y, x_1823.z, x_1824.w);
  let x_1826 : vec4<f32> = u_xlat8;
  let x_1828 : vec3<f32> = min(vec3<f32>(x_1826.x, x_1826.y, x_1826.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1829 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1828.x, x_1828.y, x_1828.z, x_1829.w);
  let x_1831 : vec4<f32> = u_xlat7;
  let x_1833 : vec4<f32> = u_xlat8;
  let x_1836 : vec3<f32> = (vec3<f32>(x_1831.x, x_1831.y, x_1831.z) + -(vec3<f32>(x_1833.x, x_1833.y, x_1833.z)));
  let x_1837 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1836.x, x_1836.y, x_1836.z, x_1837.w);
  let x_1840 : f32 = u_xlat7.y;
  let x_1843 : f32 = u_xlat7.x;
  u_xlat34 = max(abs(x_1840), abs(x_1843));
  let x_1847 : f32 = u_xlat7.z;
  let x_1849 : f32 = u_xlat34;
  u_xlat34 = max(abs(x_1847), x_1849);
  let x_1851 : f32 = u_xlat34;
  let x_1854 : vec4<f32> = u_xlat1;
  let x_1857 : vec4<f32> = u_xlat8;
  let x_1859 : vec3<f32> = ((-(vec3<f32>(x_1851, x_1851, x_1851)) * vec3<f32>(x_1854.x, x_1854.y, x_1854.z)) + vec3<f32>(x_1857.x, x_1857.y, x_1857.z));
  let x_1860 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1859.x, x_1859.y, x_1859.z, x_1860.w);
  let x_1862 : vec4<f32> = u_xlat3;
  let x_1865 : vec4<f32> = u_xlat7;
  let x_1867 : vec3<f32> = ((vec3<f32>(x_1862.x, x_1862.y, x_1862.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1865.x, x_1865.y, x_1865.z));
  let x_1868 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1867.x, x_1867.y, x_1867.z, x_1868.w);
  let x_1870 : vec4<f32> = u_xlat3;
  let x_1874 : vec4<f32> = u_xlat7;
  let x_1876 : vec3<f32> = ((-(vec3<f32>(x_1870.x, x_1870.y, x_1870.z)) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_1874.x, x_1874.y, x_1874.z));
  let x_1877 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1876.x, x_1876.y, x_1876.z, x_1877.w);
  let x_1882 : vec4<f32> = u_xlat3;
  let x_1885 : f32 = x_12.x_Level;
  let x_1886 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1882.x, x_1882.y, x_1882.z), x_1885);
  u_xlat3 = x_1886;
  let x_1887 : vec4<f32> = u_xlat3;
  u_xlat3 = max(x_1887, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1892 : vec4<f32> = u_xlat8;
  let x_1895 : f32 = x_12.x_Level;
  let x_1896 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1892.x, x_1892.y, x_1892.z), x_1895);
  u_xlat7 = x_1896;
  let x_1897 : vec4<f32> = u_xlat7;
  u_xlat7 = max(x_1897, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1899 : vec4<f32> = u_xlat3;
  let x_1900 : vec4<f32> = u_xlat7;
  u_xlat3 = (x_1899 + x_1900);
  let x_1902 : vec4<f32> = u_xlat6;
  let x_1904 : vec3<f32> = max(vec3<f32>(x_1902.x, x_1902.y, x_1902.z), vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1905 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1904.x, x_1904.y, x_1904.z, x_1905.w);
  let x_1907 : vec4<f32> = u_xlat7;
  let x_1909 : vec3<f32> = min(vec3<f32>(x_1907.x, x_1907.y, x_1907.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1910 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1909.x, x_1909.y, x_1909.z, x_1910.w);
  let x_1912 : vec4<f32> = u_xlat6;
  let x_1914 : vec4<f32> = u_xlat7;
  let x_1917 : vec3<f32> = (vec3<f32>(x_1912.x, x_1912.y, x_1912.z) + -(vec3<f32>(x_1914.x, x_1914.y, x_1914.z)));
  let x_1918 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1917.x, x_1917.y, x_1917.z, x_1918.w);
  let x_1921 : f32 = u_xlat6.y;
  let x_1924 : f32 = u_xlat6.x;
  u_xlat34 = max(abs(x_1921), abs(x_1924));
  let x_1928 : f32 = u_xlat6.z;
  let x_1930 : f32 = u_xlat34;
  u_xlat34 = max(abs(x_1928), x_1930);
  let x_1932 : f32 = u_xlat34;
  let x_1935 : vec4<f32> = u_xlat1;
  let x_1938 : vec4<f32> = u_xlat7;
  let x_1940 : vec3<f32> = ((-(vec3<f32>(x_1932, x_1932, x_1932)) * vec3<f32>(x_1935.x, x_1935.y, x_1935.z)) + vec3<f32>(x_1938.x, x_1938.y, x_1938.z));
  let x_1941 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1940.x, x_1940.y, x_1940.z, x_1941.w);
  let x_1946 : vec4<f32> = u_xlat6;
  let x_1949 : f32 = x_12.x_Level;
  let x_1950 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1946.x, x_1946.y, x_1946.z), x_1949);
  u_xlat6 = x_1950;
  let x_1951 : vec4<f32> = u_xlat6;
  u_xlat6 = max(x_1951, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_1953 : vec3<f32> = u_xlat4;
  let x_1954 : vec3<f32> = max(x_1953, vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1955 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1954.x, x_1954.y, x_1954.z, x_1955.w);
  let x_1957 : vec4<f32> = u_xlat7;
  let x_1959 : vec3<f32> = min(vec3<f32>(x_1957.x, x_1957.y, x_1957.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1960 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1959.x, x_1959.y, x_1959.z, x_1960.w);
  let x_1962 : vec3<f32> = u_xlat4;
  let x_1963 : vec4<f32> = u_xlat7;
  u_xlat4 = (x_1962 + -(vec3<f32>(x_1963.x, x_1963.y, x_1963.z)));
  let x_1968 : f32 = u_xlat4.y;
  let x_1971 : f32 = u_xlat4.x;
  u_xlat34 = max(abs(x_1968), abs(x_1971));
  let x_1975 : f32 = u_xlat4.z;
  let x_1977 : f32 = u_xlat34;
  u_xlat34 = max(abs(x_1975), x_1977);
  let x_1979 : f32 = u_xlat34;
  let x_1982 : vec4<f32> = u_xlat1;
  let x_1985 : vec4<f32> = u_xlat7;
  let x_1987 : vec3<f32> = ((-(vec3<f32>(x_1979, x_1979, x_1979)) * vec3<f32>(x_1982.x, x_1982.y, x_1982.z)) + vec3<f32>(x_1985.x, x_1985.y, x_1985.z));
  let x_1988 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1987.x, x_1987.y, x_1987.z, x_1988.w);
  let x_1993 : vec4<f32> = u_xlat1;
  let x_1996 : f32 = x_12.x_Level;
  let x_1997 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec3<f32>(x_1993.x, x_1993.y, x_1993.z), x_1996);
  u_xlat1 = x_1997;
  let x_1998 : vec4<f32> = u_xlat1;
  u_xlat1 = max(x_1998, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_2000 : vec4<f32> = u_xlat1;
  let x_2001 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_2000 + x_2001);
  let x_2003 : vec4<f32> = u_xlat1;
  let x_2004 : vec3<f32> = u_xlat2;
  u_xlat1 = (x_2003 * vec4<f32>(x_2004.y, x_2004.y, x_2004.y, x_2004.y));
  let x_2007 : vec3<f32> = u_xlat2;
  let x_2009 : vec4<f32> = u_xlat3;
  let x_2011 : vec4<f32> = u_xlat1;
  u_xlat1 = ((vec4<f32>(x_2007.x, x_2007.x, x_2007.x, x_2007.x) * x_2009) + x_2011);
  let x_2013 : vec3<f32> = u_xlat2;
  u_xlat34 = dot(x_2013, vec3<f32>(2.0f, 2.0f, 2.0f));
  let x_2015 : vec4<f32> = u_xlat1;
  let x_2016 : vec4<f32> = u_xlat5;
  u_xlat1 = (x_2015 + x_2016);
  let x_2019 : f32 = u_xlat17.x;
  let x_2020 : f32 = u_xlat34;
  u_xlat51 = (x_2019 + x_2020);
  let x_2023 : f32 = u_xlat0.x;
  let x_2025 : f32 = u_xlat51;
  u_xlat0.x = ((x_2023 * 2.0f) + x_2025);
  let x_2029 : f32 = u_xlat17.x;
  let x_2031 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2029 + x_2031);
  let x_2034 : f32 = u_xlat34;
  let x_2036 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2034 + x_2036);
  let x_2041 : vec4<f32> = u_xlat1;
  let x_2042 : vec3<f32> = u_xlat0;
  SV_Target0 = (x_2041 / vec4<f32>(x_2042.x, x_2042.x, x_2042.x, x_2042.x));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

