type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_ZBufferParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  unity_CameraToWorld : mat4x4<f32>,
  x_LightSplitsNear : vec4<f32>,
  x_LightSplitsFar : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
}

var<private> u_xlat0 : vec4<f32>;

@group(0) @binding(1) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

var<private> u_xlat9 : vec3<f32>;

@group(0) @binding(0) var<uniform> x_39 : PGlobals;

var<private> u_xlat18 : f32;

var<private> u_xlat1 : vec4<f32>;

var<private> vs_TEXCOORD2 : vec3<f32>;

var<private> vs_TEXCOORD3 : vec3<f32>;

var<private> vs_TEXCOORD1 : vec3<f32>;

var<private> u_xlatb1 : vec4<bool>;

var<private> u_xlatb2 : vec4<bool>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat27 : f32;

var<private> u_xlat19 : vec2<f32>;

var<private> u_xlat4 : vec4<f32>;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

var<private> u_xlat7 : vec4<f32>;

var<private> u_xlat8 : vec4<f32>;

@group(0) @binding(2) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(3) var sampler_ShadowMapTexture : sampler_comparison;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_23.x, x_23.y));
  u_xlat0.x = x_25.x;
  let x_44 : f32 = x_39.x_ZBufferParams.x;
  let x_46 : f32 = u_xlat0.x;
  let x_50 : f32 = x_39.x_ZBufferParams.y;
  u_xlat9.x = ((x_44 * x_46) + x_50);
  let x_55 : f32 = u_xlat9.x;
  u_xlat9.x = (1.0f / x_55);
  let x_60 : f32 = u_xlat9.x;
  let x_63 : f32 = u_xlat0.x;
  u_xlat18 = (-(x_60) + x_63);
  let x_68 : f32 = x_39.unity_OrthoParams.w;
  let x_69 : f32 = u_xlat18;
  let x_72 : f32 = u_xlat9.x;
  u_xlat9.x = ((x_68 * x_69) + x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_76) + 1.0f);
  let x_83 : vec3<f32> = vs_TEXCOORD2;
  let x_86 : vec3<f32> = vs_TEXCOORD3;
  let x_87 : vec3<f32> = (-(x_83) + x_86);
  let x_88 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_87.x, x_87.y, x_87.z, x_88.w);
  let x_90 : vec4<f32> = u_xlat0;
  let x_92 : vec4<f32> = u_xlat1;
  let x_95 : vec3<f32> = vs_TEXCOORD2;
  let x_96 : vec3<f32> = ((vec3<f32>(x_90.x, x_90.x, x_90.x) * vec3<f32>(x_92.x, x_92.y, x_92.z)) + x_95);
  let x_97 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_96.x, x_97.y, x_96.y, x_96.z);
  let x_100 : vec3<f32> = vs_TEXCOORD1;
  let x_102 : vec3<f32> = u_xlat9;
  let x_105 : vec4<f32> = u_xlat0;
  let x_107 : vec3<f32> = ((-(x_100) * vec3<f32>(x_102.x, x_102.x, x_102.x)) + vec3<f32>(x_105.x, x_105.z, x_105.w));
  let x_108 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_107.x, x_108.y, x_107.y, x_107.z);
  let x_110 : vec3<f32> = u_xlat9;
  let x_112 : vec3<f32> = vs_TEXCOORD1;
  let x_113 : vec3<f32> = (vec3<f32>(x_110.x, x_110.x, x_110.x) * x_112);
  let x_114 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_118 : vec4<f32> = x_39.unity_OrthoParams;
  let x_120 : vec4<f32> = u_xlat0;
  let x_123 : vec4<f32> = u_xlat1;
  let x_125 : vec3<f32> = ((vec3<f32>(x_118.w, x_118.w, x_118.w) * vec3<f32>(x_120.x, x_120.z, x_120.w)) + vec3<f32>(x_123.x, x_123.y, x_123.z));
  let x_126 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_125.x, x_125.y, x_125.z, x_126.w);
  let x_132 : vec4<f32> = u_xlat0;
  let x_136 : vec4<f32> = x_39.x_LightSplitsNear;
  u_xlatb1 = (vec4<f32>(x_132.z, x_132.z, x_132.z, x_132.z) >= x_136);
  let x_140 : bool = u_xlatb1.x;
  u_xlat1.x = select(0.0f, 1.0f, x_140);
  let x_145 : bool = u_xlatb1.y;
  u_xlat1.y = select(0.0f, 1.0f, x_145);
  let x_150 : bool = u_xlatb1.z;
  u_xlat1.z = select(0.0f, 1.0f, x_150);
  let x_154 : bool = u_xlatb1.w;
  u_xlat1.w = select(0.0f, 1.0f, x_154);
  let x_158 : vec4<f32> = u_xlat0;
  let x_162 : vec4<f32> = x_39.x_LightSplitsFar;
  u_xlatb2 = (vec4<f32>(x_158.z, x_158.z, x_158.z, x_158.z) < x_162);
  let x_166 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_166);
  let x_170 : bool = u_xlatb2.y;
  u_xlat2.y = select(0.0f, 1.0f, x_170);
  let x_174 : bool = u_xlatb2.z;
  u_xlat2.z = select(0.0f, 1.0f, x_174);
  let x_178 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_178);
  let x_181 : vec4<f32> = u_xlat1;
  let x_182 : vec4<f32> = u_xlat2;
  u_xlat1 = (x_181 * x_182);
  let x_184 : vec4<f32> = u_xlat0;
  let x_188 : vec4<f32> = x_39.unity_CameraToWorld[1i];
  u_xlat2 = (vec4<f32>(x_184.y, x_184.y, x_184.y, x_184.y) * x_188);
  let x_191 : vec4<f32> = x_39.unity_CameraToWorld[0i];
  let x_192 : vec4<f32> = u_xlat0;
  let x_195 : vec4<f32> = u_xlat2;
  u_xlat2 = ((x_191 * vec4<f32>(x_192.x, x_192.x, x_192.x, x_192.x)) + x_195);
  let x_198 : vec4<f32> = x_39.unity_CameraToWorld[2i];
  let x_199 : vec4<f32> = u_xlat0;
  let x_202 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_198 * vec4<f32>(x_199.z, x_199.z, x_199.z, x_199.z)) + x_202);
  let x_204 : vec4<f32> = u_xlat0;
  let x_206 : vec4<f32> = x_39.unity_CameraToWorld[3i];
  u_xlat0 = (x_204 + x_206);
  let x_208 : vec4<f32> = u_xlat0;
  let x_212 : vec4<f32> = x_39.unity_WorldToShadow[1i][1i];
  let x_214 : vec3<f32> = (vec3<f32>(x_208.y, x_208.y, x_208.y) * vec3<f32>(x_212.x, x_212.y, x_212.z));
  let x_215 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_214.x, x_214.y, x_214.z, x_215.w);
  let x_218 : vec4<f32> = x_39.unity_WorldToShadow[1i][0i];
  let x_220 : vec4<f32> = u_xlat0;
  let x_223 : vec4<f32> = u_xlat2;
  let x_225 : vec3<f32> = ((vec3<f32>(x_218.x, x_218.y, x_218.z) * vec3<f32>(x_220.x, x_220.x, x_220.x)) + vec3<f32>(x_223.x, x_223.y, x_223.z));
  let x_226 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_225.x, x_225.y, x_225.z, x_226.w);
  let x_229 : vec4<f32> = x_39.unity_WorldToShadow[1i][2i];
  let x_231 : vec4<f32> = u_xlat0;
  let x_234 : vec4<f32> = u_xlat2;
  let x_236 : vec3<f32> = ((vec3<f32>(x_229.x, x_229.y, x_229.z) * vec3<f32>(x_231.z, x_231.z, x_231.z)) + vec3<f32>(x_234.x, x_234.y, x_234.z));
  let x_237 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_236.x, x_236.y, x_236.z, x_237.w);
  let x_240 : vec4<f32> = x_39.unity_WorldToShadow[1i][3i];
  let x_242 : vec4<f32> = u_xlat0;
  let x_245 : vec4<f32> = u_xlat2;
  let x_247 : vec3<f32> = ((vec3<f32>(x_240.x, x_240.y, x_240.z) * vec3<f32>(x_242.w, x_242.w, x_242.w)) + vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec4<f32> = u_xlat1;
  let x_252 : vec4<f32> = u_xlat2;
  let x_254 : vec3<f32> = (vec3<f32>(x_250.y, x_250.y, x_250.y) * vec3<f32>(x_252.x, x_252.y, x_252.z));
  let x_255 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_254.x, x_254.y, x_254.z, x_255.w);
  let x_258 : vec4<f32> = u_xlat0;
  let x_261 : vec4<f32> = x_39.unity_WorldToShadow[0i][1i];
  let x_263 : vec3<f32> = (vec3<f32>(x_258.y, x_258.y, x_258.y) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_267 : vec4<f32> = x_39.unity_WorldToShadow[0i][0i];
  let x_269 : vec4<f32> = u_xlat0;
  let x_272 : vec4<f32> = u_xlat3;
  let x_274 : vec3<f32> = ((vec3<f32>(x_267.x, x_267.y, x_267.z) * vec3<f32>(x_269.x, x_269.x, x_269.x)) + vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_278 : vec4<f32> = x_39.unity_WorldToShadow[0i][2i];
  let x_280 : vec4<f32> = u_xlat0;
  let x_283 : vec4<f32> = u_xlat3;
  let x_285 : vec3<f32> = ((vec3<f32>(x_278.x, x_278.y, x_278.z) * vec3<f32>(x_280.z, x_280.z, x_280.z)) + vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_286 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_289 : vec4<f32> = x_39.unity_WorldToShadow[0i][3i];
  let x_291 : vec4<f32> = u_xlat0;
  let x_294 : vec4<f32> = u_xlat3;
  let x_296 : vec3<f32> = ((vec3<f32>(x_289.x, x_289.y, x_289.z) * vec3<f32>(x_291.w, x_291.w, x_291.w)) + vec3<f32>(x_294.x, x_294.y, x_294.z));
  let x_297 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_296.x, x_296.y, x_296.z, x_297.w);
  let x_299 : vec4<f32> = u_xlat3;
  let x_301 : vec4<f32> = u_xlat1;
  let x_304 : vec4<f32> = u_xlat2;
  let x_306 : vec3<f32> = ((vec3<f32>(x_299.x, x_299.y, x_299.z) * vec3<f32>(x_301.x, x_301.x, x_301.x)) + vec3<f32>(x_304.x, x_304.y, x_304.z));
  let x_307 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_306.x, x_306.y, x_306.z, x_307.w);
  let x_309 : vec4<f32> = u_xlat0;
  let x_312 : vec4<f32> = x_39.unity_WorldToShadow[2i][1i];
  let x_314 : vec3<f32> = (vec3<f32>(x_309.y, x_309.y, x_309.y) * vec3<f32>(x_312.x, x_312.y, x_312.z));
  let x_315 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_314.x, x_314.y, x_314.z, x_315.w);
  let x_318 : vec4<f32> = x_39.unity_WorldToShadow[2i][0i];
  let x_320 : vec4<f32> = u_xlat0;
  let x_323 : vec4<f32> = u_xlat3;
  let x_325 : vec3<f32> = ((vec3<f32>(x_318.x, x_318.y, x_318.z) * vec3<f32>(x_320.x, x_320.x, x_320.x)) + vec3<f32>(x_323.x, x_323.y, x_323.z));
  let x_326 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_325.x, x_325.y, x_325.z, x_326.w);
  let x_329 : vec4<f32> = x_39.unity_WorldToShadow[2i][2i];
  let x_331 : vec4<f32> = u_xlat0;
  let x_334 : vec4<f32> = u_xlat3;
  let x_336 : vec3<f32> = ((vec3<f32>(x_329.x, x_329.y, x_329.z) * vec3<f32>(x_331.z, x_331.z, x_331.z)) + vec3<f32>(x_334.x, x_334.y, x_334.z));
  let x_337 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_336.x, x_336.y, x_336.z, x_337.w);
  let x_340 : vec4<f32> = x_39.unity_WorldToShadow[2i][3i];
  let x_342 : vec4<f32> = u_xlat0;
  let x_345 : vec4<f32> = u_xlat3;
  let x_347 : vec3<f32> = ((vec3<f32>(x_340.x, x_340.y, x_340.z) * vec3<f32>(x_342.w, x_342.w, x_342.w)) + vec3<f32>(x_345.x, x_345.y, x_345.z));
  let x_348 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_347.x, x_347.y, x_347.z, x_348.w);
  let x_350 : vec4<f32> = u_xlat3;
  let x_352 : vec4<f32> = u_xlat1;
  let x_355 : vec4<f32> = u_xlat2;
  let x_357 : vec3<f32> = ((vec3<f32>(x_350.x, x_350.y, x_350.z) * vec3<f32>(x_352.z, x_352.z, x_352.z)) + vec3<f32>(x_355.x, x_355.y, x_355.z));
  let x_358 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
  let x_360 : vec4<f32> = u_xlat0;
  let x_363 : vec4<f32> = x_39.unity_WorldToShadow[3i][1i];
  let x_365 : vec3<f32> = (vec3<f32>(x_360.y, x_360.y, x_360.y) * vec3<f32>(x_363.x, x_363.y, x_363.z));
  let x_366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_365.x, x_365.y, x_365.z, x_366.w);
  let x_369 : vec4<f32> = x_39.unity_WorldToShadow[3i][0i];
  let x_371 : vec4<f32> = u_xlat0;
  let x_374 : vec4<f32> = u_xlat3;
  let x_376 : vec3<f32> = ((vec3<f32>(x_369.x, x_369.y, x_369.z) * vec3<f32>(x_371.x, x_371.x, x_371.x)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_377 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_376.x, x_376.y, x_376.z, x_377.w);
  let x_380 : vec4<f32> = x_39.unity_WorldToShadow[3i][2i];
  let x_382 : vec4<f32> = u_xlat0;
  let x_385 : vec4<f32> = u_xlat3;
  let x_387 : vec3<f32> = ((vec3<f32>(x_380.x, x_380.y, x_380.z) * vec3<f32>(x_382.z, x_382.z, x_382.z)) + vec3<f32>(x_385.x, x_385.y, x_385.z));
  let x_388 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_387.x, x_387.y, x_387.z, x_388.w);
  let x_391 : vec4<f32> = x_39.unity_WorldToShadow[3i][3i];
  let x_393 : vec4<f32> = u_xlat0;
  let x_396 : vec4<f32> = u_xlat0;
  let x_398 : vec3<f32> = ((vec3<f32>(x_391.x, x_391.y, x_391.z) * vec3<f32>(x_393.w, x_393.w, x_393.w)) + vec3<f32>(x_396.x, x_396.y, x_396.z));
  let x_399 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_398.x, x_398.y, x_398.z, x_399.w);
  let x_401 : vec4<f32> = u_xlat0;
  let x_403 : vec4<f32> = u_xlat1;
  let x_406 : vec4<f32> = u_xlat2;
  let x_408 : vec3<f32> = ((vec3<f32>(x_401.x, x_401.y, x_401.z) * vec3<f32>(x_403.w, x_403.w, x_403.w)) + vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_409 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_408.x, x_408.y, x_408.z, x_409.w);
  let x_412 : vec4<f32> = u_xlat1;
  u_xlat27 = dot(x_412, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_415 : f32 = u_xlat27;
  let x_418 : f32 = u_xlat0.z;
  u_xlat18 = (-(x_415) + x_418);
  let x_420 : f32 = u_xlat18;
  u_xlat18 = (x_420 + 1.0f);
  let x_422 : vec4<f32> = u_xlat0;
  let x_426 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_431 : vec2<f32> = ((vec2<f32>(x_422.x, x_422.y) * vec2<f32>(x_426.z, x_426.w)) + vec2<f32>(0.5f, 0.5f));
  let x_432 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_431.x, x_431.y, x_432.z, x_432.w);
  let x_434 : vec4<f32> = u_xlat1;
  let x_436 : vec2<f32> = floor(vec2<f32>(x_434.x, x_434.y));
  let x_437 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_436.x, x_436.y, x_437.z, x_437.w);
  let x_439 : vec4<f32> = u_xlat0;
  let x_442 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_445 : vec4<f32> = u_xlat1;
  let x_448 : vec2<f32> = ((vec2<f32>(x_439.x, x_439.y) * vec2<f32>(x_442.z, x_442.w)) + -(vec2<f32>(x_445.x, x_445.y)));
  let x_449 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_448.x, x_448.y, x_449.z, x_449.w);
  let x_453 : vec4<f32> = u_xlat0;
  u_xlat19 = (-(vec2<f32>(x_453.x, x_453.y)) + vec2<f32>(1.0f, 1.0f));
  let x_458 : vec4<f32> = u_xlat0;
  let x_461 : vec2<f32> = min(vec2<f32>(x_458.x, x_458.y), vec2<f32>(0.0f, 0.0f));
  let x_462 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_461.x, x_461.y, x_462.z, x_462.w);
  let x_464 : vec4<f32> = u_xlat2;
  let x_467 : vec4<f32> = u_xlat2;
  let x_470 : vec2<f32> = u_xlat19;
  u_xlat19 = ((-(vec2<f32>(x_464.x, x_464.y)) * vec2<f32>(x_467.x, x_467.y)) + x_470);
  let x_472 : vec2<f32> = u_xlat19;
  u_xlat19 = (x_472 + vec2<f32>(2.0f, 2.0f));
  let x_476 : vec2<f32> = u_xlat19;
  let x_479 : vec2<f32> = (x_476 * vec2<f32>(0.081632003f, 0.081632003f));
  let x_480 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_479.x, x_479.y, x_480.z, x_480.w);
  let x_483 : f32 = u_xlat2.x;
  u_xlat3.y = x_483;
  let x_485 : vec4<f32> = u_xlat0;
  u_xlat19 = max(vec2<f32>(x_485.x, x_485.y), vec2<f32>(0.0f, 0.0f));
  let x_489 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec4<f32>(x_489.x, x_489.x, x_489.y, x_489.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
  let x_493 : vec2<f32> = u_xlat19;
  let x_495 : vec2<f32> = u_xlat19;
  let x_497 : vec4<f32> = u_xlat4;
  u_xlat19 = ((-(x_493) * x_495) + vec2<f32>(x_497.y, x_497.w));
  let x_500 : vec4<f32> = u_xlat4;
  let x_502 : vec4<f32> = u_xlat4;
  u_xlat4 = (vec4<f32>(x_500.x, x_500.x, x_500.z, x_500.z) * vec4<f32>(x_502.x, x_502.x, x_502.z, x_502.z));
  let x_505 : vec2<f32> = u_xlat19;
  u_xlat19 = (x_505 + vec2<f32>(2.0f, 2.0f));
  let x_509 : f32 = u_xlat19.x;
  u_xlat5.z = (x_509 * 0.081632003f);
  let x_514 : f32 = u_xlat19.y;
  u_xlat6.z = (x_514 * 0.081632003f);
  let x_517 : vec4<f32> = u_xlat4;
  let x_520 : vec4<f32> = u_xlat0;
  u_xlat19 = ((vec2<f32>(x_517.x, x_517.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_520.x, x_520.y)));
  let x_524 : vec4<f32> = u_xlat4;
  let x_528 : vec2<f32> = (vec2<f32>(x_524.y, x_524.w) * vec2<f32>(0.040816002f, 0.040816002f));
  let x_529 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_528.x, x_528.y, x_529.z, x_529.w);
  let x_531 : vec2<f32> = u_xlat19;
  let x_533 : vec2<f32> = (vec2<f32>(x_531.y, x_531.x) * vec2<f32>(0.081632003f, 0.081632003f));
  let x_534 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_533.x, x_533.y, x_534.z, x_534.w);
  let x_537 : f32 = u_xlat6.y;
  u_xlat5.x = x_537;
  let x_539 : vec4<f32> = u_xlat0;
  let x_546 : vec2<f32> = ((vec2<f32>(x_539.x, x_539.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_547 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_547.x, x_546.x, x_547.z, x_546.y);
  let x_549 : vec4<f32> = u_xlat0;
  let x_553 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_554 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_553.x, x_554.y, x_553.y, x_554.w);
  let x_557 : f32 = u_xlat4.x;
  u_xlat3.w = x_557;
  let x_560 : f32 = u_xlat4.y;
  u_xlat2.w = x_560;
  let x_562 : vec4<f32> = u_xlat3;
  let x_563 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_562 + x_563);
  let x_565 : vec4<f32> = u_xlat3;
  let x_566 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_565 / x_566);
  let x_568 : vec4<f32> = u_xlat3;
  u_xlat3 = (x_568 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_574 : vec4<f32> = u_xlat3;
  let x_577 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  u_xlat3 = (vec4<f32>(x_574.w, x_574.x, x_574.y, x_574.z) * vec4<f32>(x_577.x, x_577.x, x_577.x, x_577.x));
  let x_580 : vec4<f32> = u_xlat0;
  let x_583 : vec2<f32> = ((vec2<f32>(x_580.y, x_580.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_584 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_584.x, x_583.x, x_584.z, x_583.y);
  let x_586 : vec4<f32> = u_xlat0;
  let x_589 : vec2<f32> = ((vec2<f32>(x_586.y, x_586.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_590 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_589.x, x_590.y, x_589.y, x_590.w);
  let x_592 : vec4<f32> = u_xlat2;
  let x_593 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_592 + x_593);
  let x_595 : vec4<f32> = u_xlat2;
  let x_596 : vec4<f32> = u_xlat5;
  u_xlat2 = (x_595 / x_596);
  let x_598 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_598 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_600 : vec4<f32> = u_xlat2;
  let x_603 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  u_xlat2 = (vec4<f32>(x_600.x, x_600.w, x_600.y, x_600.z) * vec4<f32>(x_603.y, x_603.y, x_603.y, x_603.y));
  let x_606 : vec4<f32> = u_xlat4;
  let x_607 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_606 * vec4<f32>(x_607.x, x_607.x, x_607.x, x_607.x));
  let x_611 : vec4<f32> = u_xlat3;
  let x_612 : vec3<f32> = vec3<f32>(x_611.y, x_611.z, x_611.w);
  let x_613 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_612.x, x_613.y, x_612.y, x_612.z);
  let x_616 : f32 = u_xlat2.x;
  u_xlat7.y = x_616;
  let x_619 : vec4<f32> = u_xlat1;
  let x_622 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_625 : vec4<f32> = u_xlat7;
  u_xlat8 = ((vec4<f32>(x_619.x, x_619.y, x_619.x, x_619.y) * vec4<f32>(x_622.x, x_622.y, x_622.x, x_622.y)) + vec4<f32>(x_625.x, x_625.y, x_625.z, x_625.y));
  let x_630 : vec4<f32> = u_xlat8;
  let x_631 : vec2<f32> = vec2<f32>(x_630.x, x_630.y);
  let x_632 : f32 = u_xlat18;
  txVec0 = vec3<f32>(x_631.x, x_631.y, x_632);
  let x_644 : vec3<f32> = txVec0;
  let x_646 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_644.xy, x_644.z);
  u_xlat0.x = x_646;
  let x_649 : vec4<f32> = u_xlat8;
  let x_650 : vec2<f32> = vec2<f32>(x_649.z, x_649.w);
  let x_651 : f32 = u_xlat18;
  txVec1 = vec3<f32>(x_650.x, x_650.y, x_651);
  let x_658 : vec3<f32> = txVec1;
  let x_660 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_658.xy, x_658.z);
  u_xlat9.x = x_660;
  let x_663 : f32 = u_xlat9.x;
  let x_665 : f32 = u_xlat6.y;
  u_xlat9.x = (x_663 * x_665);
  let x_669 : f32 = u_xlat6.x;
  let x_671 : f32 = u_xlat0.x;
  let x_674 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_669 * x_671) + x_674);
  let x_677 : vec4<f32> = u_xlat1;
  let x_680 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_683 : vec4<f32> = u_xlat7;
  let x_685 : vec2<f32> = ((vec2<f32>(x_677.x, x_677.y) * vec2<f32>(x_680.x, x_680.y)) + vec2<f32>(x_683.w, x_683.y));
  let x_686 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_685.x, x_686.y, x_685.y);
  let x_689 : f32 = u_xlat7.y;
  u_xlat3.y = x_689;
  let x_691 : vec4<f32> = u_xlat1;
  let x_694 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_697 : vec4<f32> = u_xlat3;
  u_xlat19 = ((vec2<f32>(x_691.x, x_691.y) * vec2<f32>(x_694.x, x_694.y)) + vec2<f32>(x_697.x, x_697.y));
  let x_701 : vec2<f32> = u_xlat19;
  let x_702 : f32 = u_xlat18;
  txVec2 = vec3<f32>(x_701.x, x_701.y, x_702);
  let x_709 : vec3<f32> = txVec2;
  let x_711 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_709.xy, x_709.z);
  u_xlat19.x = x_711;
  let x_714 : vec3<f32> = u_xlat9;
  let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.z);
  let x_716 : f32 = u_xlat18;
  txVec3 = vec3<f32>(x_715.x, x_715.y, x_716);
  let x_723 : vec3<f32> = txVec3;
  let x_725 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_723.xy, x_723.z);
  u_xlat9.x = x_725;
  let x_728 : f32 = u_xlat6.z;
  let x_730 : f32 = u_xlat9.x;
  let x_733 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_728 * x_730) + x_733);
  let x_737 : f32 = u_xlat6.w;
  let x_739 : f32 = u_xlat19.x;
  let x_742 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_737 * x_739) + x_742);
  let x_745 : vec4<f32> = u_xlat4;
  let x_746 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_745 * vec4<f32>(x_746.y, x_746.y, x_746.y, x_746.y));
  let x_750 : f32 = u_xlat2.z;
  u_xlat7.y = x_750;
  let x_752 : vec4<f32> = u_xlat1;
  let x_755 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_758 : vec4<f32> = u_xlat7;
  u_xlat8 = ((vec4<f32>(x_752.x, x_752.y, x_752.x, x_752.y) * vec4<f32>(x_755.x, x_755.y, x_755.x, x_755.y)) + vec4<f32>(x_758.x, x_758.y, x_758.z, x_758.y));
  let x_762 : vec4<f32> = u_xlat8;
  let x_763 : vec2<f32> = vec2<f32>(x_762.x, x_762.y);
  let x_764 : f32 = u_xlat18;
  txVec4 = vec3<f32>(x_763.x, x_763.y, x_764);
  let x_771 : vec3<f32> = txVec4;
  let x_773 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_771.xy, x_771.z);
  u_xlat9.x = x_773;
  let x_776 : vec4<f32> = u_xlat8;
  let x_777 : vec2<f32> = vec2<f32>(x_776.z, x_776.w);
  let x_778 : f32 = u_xlat18;
  txVec5 = vec3<f32>(x_777.x, x_777.y, x_778);
  let x_785 : vec3<f32> = txVec5;
  let x_787 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_785.xy, x_785.z);
  u_xlat27 = x_787;
  let x_789 : f32 = u_xlat6.x;
  let x_791 : f32 = u_xlat9.x;
  let x_794 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_789 * x_791) + x_794);
  let x_798 : f32 = u_xlat6.y;
  let x_799 : f32 = u_xlat27;
  let x_802 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_798 * x_799) + x_802);
  let x_805 : vec4<f32> = u_xlat1;
  let x_808 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_811 : vec4<f32> = u_xlat7;
  let x_813 : vec2<f32> = ((vec2<f32>(x_805.x, x_805.y) * vec2<f32>(x_808.x, x_808.y)) + vec2<f32>(x_811.w, x_811.y));
  let x_814 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_813.x, x_814.y, x_813.y);
  let x_817 : f32 = u_xlat7.y;
  u_xlat3.z = x_817;
  let x_819 : vec4<f32> = u_xlat1;
  let x_822 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_825 : vec4<f32> = u_xlat3;
  u_xlat19 = ((vec2<f32>(x_819.x, x_819.y) * vec2<f32>(x_822.x, x_822.y)) + vec2<f32>(x_825.x, x_825.z));
  let x_829 : vec2<f32> = u_xlat19;
  let x_830 : f32 = u_xlat18;
  txVec6 = vec3<f32>(x_829.x, x_829.y, x_830);
  let x_837 : vec3<f32> = txVec6;
  let x_839 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_837.xy, x_837.z);
  u_xlat19.x = x_839;
  let x_842 : vec3<f32> = u_xlat9;
  let x_843 : vec2<f32> = vec2<f32>(x_842.x, x_842.z);
  let x_844 : f32 = u_xlat18;
  txVec7 = vec3<f32>(x_843.x, x_843.y, x_844);
  let x_851 : vec3<f32> = txVec7;
  let x_853 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_851.xy, x_851.z);
  u_xlat9.x = x_853;
  let x_856 : f32 = u_xlat6.z;
  let x_858 : f32 = u_xlat9.x;
  let x_861 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_856 * x_858) + x_861);
  let x_865 : f32 = u_xlat6.w;
  let x_867 : f32 = u_xlat19.x;
  let x_870 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_865 * x_867) + x_870);
  let x_873 : vec4<f32> = u_xlat4;
  let x_874 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_873 * vec4<f32>(x_874.z, x_874.z, x_874.z, x_874.z));
  let x_877 : vec4<f32> = u_xlat4;
  let x_878 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_877 * vec4<f32>(x_878.w, x_878.w, x_878.w, x_878.w));
  let x_882 : f32 = u_xlat2.w;
  u_xlat7.y = x_882;
  let x_884 : vec4<f32> = u_xlat1;
  let x_887 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_890 : vec4<f32> = u_xlat7;
  u_xlat5 = ((vec4<f32>(x_884.x, x_884.y, x_884.x, x_884.y) * vec4<f32>(x_887.x, x_887.y, x_887.x, x_887.y)) + vec4<f32>(x_890.x, x_890.y, x_890.z, x_890.y));
  let x_894 : vec4<f32> = u_xlat5;
  let x_895 : vec2<f32> = vec2<f32>(x_894.x, x_894.y);
  let x_896 : f32 = u_xlat18;
  txVec8 = vec3<f32>(x_895.x, x_895.y, x_896);
  let x_903 : vec3<f32> = txVec8;
  let x_905 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_903.xy, x_903.z);
  u_xlat9.x = x_905;
  let x_908 : vec4<f32> = u_xlat5;
  let x_909 : vec2<f32> = vec2<f32>(x_908.z, x_908.w);
  let x_910 : f32 = u_xlat18;
  txVec9 = vec3<f32>(x_909.x, x_909.y, x_910);
  let x_917 : vec3<f32> = txVec9;
  let x_919 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_917.xy, x_917.z);
  u_xlat27 = x_919;
  let x_921 : f32 = u_xlat6.x;
  let x_923 : f32 = u_xlat9.x;
  let x_926 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_921 * x_923) + x_926);
  let x_930 : f32 = u_xlat6.y;
  let x_931 : f32 = u_xlat27;
  let x_934 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_930 * x_931) + x_934);
  let x_937 : vec4<f32> = u_xlat1;
  let x_940 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_943 : vec4<f32> = u_xlat7;
  let x_945 : vec2<f32> = ((vec2<f32>(x_937.x, x_937.y) * vec2<f32>(x_940.x, x_940.y)) + vec2<f32>(x_943.w, x_943.y));
  let x_946 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_945.x, x_946.y, x_945.y);
  let x_948 : vec4<f32> = u_xlat7;
  let x_949 : vec3<f32> = vec3<f32>(x_948.x, x_948.z, x_948.w);
  let x_950 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_949.x, x_950.y, x_949.y, x_949.z);
  let x_953 : f32 = u_xlat7.y;
  u_xlat3.w = x_953;
  let x_955 : vec4<f32> = u_xlat1;
  let x_958 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_961 : vec4<f32> = u_xlat3;
  u_xlat19 = ((vec2<f32>(x_955.x, x_955.y) * vec2<f32>(x_958.x, x_958.y)) + vec2<f32>(x_961.x, x_961.w));
  let x_965 : vec2<f32> = u_xlat19;
  let x_966 : f32 = u_xlat18;
  txVec10 = vec3<f32>(x_965.x, x_965.y, x_966);
  let x_973 : vec3<f32> = txVec10;
  let x_975 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_973.xy, x_973.z);
  u_xlat19.x = x_975;
  let x_978 : vec3<f32> = u_xlat9;
  let x_979 : vec2<f32> = vec2<f32>(x_978.x, x_978.z);
  let x_980 : f32 = u_xlat18;
  txVec11 = vec3<f32>(x_979.x, x_979.y, x_980);
  let x_987 : vec3<f32> = txVec11;
  let x_989 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_987.xy, x_987.z);
  u_xlat9.x = x_989;
  let x_992 : f32 = u_xlat6.z;
  let x_994 : f32 = u_xlat9.x;
  let x_997 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_992 * x_994) + x_997);
  let x_1001 : f32 = u_xlat6.w;
  let x_1003 : f32 = u_xlat19.x;
  let x_1006 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1001 * x_1003) + x_1006);
  let x_1009 : vec4<f32> = u_xlat1;
  let x_1012 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_1015 : vec4<f32> = u_xlat2;
  u_xlat5 = ((vec4<f32>(x_1009.x, x_1009.y, x_1009.x, x_1009.y) * vec4<f32>(x_1012.x, x_1012.y, x_1012.x, x_1012.y)) + vec4<f32>(x_1015.x, x_1015.y, x_1015.z, x_1015.y));
  let x_1018 : vec4<f32> = u_xlat1;
  let x_1021 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_1024 : vec4<f32> = u_xlat2;
  let x_1026 : vec2<f32> = ((vec2<f32>(x_1018.x, x_1018.y) * vec2<f32>(x_1021.x, x_1021.y)) + vec2<f32>(x_1024.w, x_1024.y));
  let x_1027 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_1026.x, x_1027.y, x_1026.y);
  let x_1030 : f32 = u_xlat2.y;
  u_xlat3.y = x_1030;
  let x_1032 : vec4<f32> = u_xlat1;
  let x_1035 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_1038 : vec4<f32> = u_xlat3;
  let x_1040 : vec2<f32> = ((vec2<f32>(x_1032.x, x_1032.y) * vec2<f32>(x_1035.x, x_1035.y)) + vec2<f32>(x_1038.x, x_1038.y));
  let x_1041 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1040.x, x_1040.y, x_1041.z, x_1041.w);
  let x_1044 : vec4<f32> = u_xlat1;
  let x_1045 : vec2<f32> = vec2<f32>(x_1044.x, x_1044.y);
  let x_1046 : f32 = u_xlat18;
  txVec12 = vec3<f32>(x_1045.x, x_1045.y, x_1046);
  let x_1053 : vec3<f32> = txVec12;
  let x_1055 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1053.xy, x_1053.z);
  u_xlat1.x = x_1055;
  let x_1058 : vec3<f32> = u_xlat9;
  let x_1059 : vec2<f32> = vec2<f32>(x_1058.x, x_1058.z);
  let x_1060 : f32 = u_xlat18;
  txVec13 = vec3<f32>(x_1059.x, x_1059.y, x_1060);
  let x_1067 : vec3<f32> = txVec13;
  let x_1069 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1067.xy, x_1067.z);
  u_xlat9.x = x_1069;
  let x_1072 : vec4<f32> = u_xlat5;
  let x_1073 : vec2<f32> = vec2<f32>(x_1072.x, x_1072.y);
  let x_1074 : f32 = u_xlat18;
  txVec14 = vec3<f32>(x_1073.x, x_1073.y, x_1074);
  let x_1081 : vec3<f32> = txVec14;
  let x_1083 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1081.xy, x_1081.z);
  u_xlat27 = x_1083;
  let x_1085 : vec4<f32> = u_xlat5;
  let x_1086 : vec2<f32> = vec2<f32>(x_1085.z, x_1085.w);
  let x_1087 : f32 = u_xlat18;
  txVec15 = vec3<f32>(x_1086.x, x_1086.y, x_1087);
  let x_1094 : vec3<f32> = txVec15;
  let x_1096 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1094.xy, x_1094.z);
  u_xlat18 = x_1096;
  let x_1098 : f32 = u_xlat4.x;
  let x_1099 : f32 = u_xlat27;
  let x_1102 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1098 * x_1099) + x_1102);
  let x_1106 : f32 = u_xlat4.y;
  let x_1107 : f32 = u_xlat18;
  let x_1110 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1106 * x_1107) + x_1110);
  let x_1114 : f32 = u_xlat4.z;
  let x_1116 : f32 = u_xlat9.x;
  let x_1119 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1114 * x_1116) + x_1119);
  let x_1123 : f32 = u_xlat4.w;
  let x_1125 : f32 = u_xlat1.x;
  let x_1128 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1123 * x_1125) + x_1128);
  let x_1133 : f32 = x_39.x_LightShadowData.x;
  u_xlat9.x = (-(x_1133) + 1.0f);
  let x_1139 : vec4<f32> = u_xlat0;
  let x_1141 : vec3<f32> = u_xlat9;
  let x_1145 : vec4<f32> = x_39.x_LightShadowData;
  SV_Target0 = ((vec4<f32>(x_1139.x, x_1139.x, x_1139.x, x_1139.x) * vec4<f32>(x_1141.x, x_1141.x, x_1141.x, x_1141.x)) + vec4<f32>(x_1145.x, x_1145.x, x_1145.x, x_1145.x));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec3<f32>, @location(3) vs_TEXCOORD3_param : vec3<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

