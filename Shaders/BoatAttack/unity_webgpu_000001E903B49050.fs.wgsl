struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3451 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1679 : f32;
  var x_1692 : f32;
  var x_1704 : f32;
  var u_xlat68 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati3 : i32;
  var x_3684 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1659 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1659 == 0.0f);
  let x_1662 : vec3<f32> = vs_INTERP0;
  let x_1666 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1662) + x_1666);
  let x_1668 : vec3<f32> = u_xlat25;
  let x_1669 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1668, x_1669);
  let x_1671 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1671);
  let x_1673 : f32 = u_xlat64;
  let x_1675 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1673, x_1673, x_1673) * x_1675);
  let x_1678 : bool = u_xlatb22.x;
  if (x_1678) {
    let x_1683 : f32 = u_xlat25.x;
    x_1679 = x_1683;
  } else {
    let x_1687 : f32 = x_66.unity_MatrixV[0i].z;
    x_1679 = x_1687;
  }
  let x_1688 : f32 = x_1679;
  u_xlat5.x = x_1688;
  let x_1691 : bool = u_xlatb22.x;
  if (x_1691) {
    let x_1696 : f32 = u_xlat25.y;
    x_1692 = x_1696;
  } else {
    let x_1699 : f32 = x_66.unity_MatrixV[1i].z;
    x_1692 = x_1699;
  }
  let x_1700 : f32 = x_1692;
  u_xlat5.y = x_1700;
  let x_1703 : bool = u_xlatb22.x;
  if (x_1703) {
    let x_1708 : f32 = u_xlat25.z;
    x_1704 = x_1708;
  } else {
    let x_1711 : f32 = x_66.unity_MatrixV[2i].z;
    x_1704 = x_1711;
  }
  let x_1712 : f32 = x_1704;
  u_xlat5.z = x_1712;
  let x_1721 : vec2<f32> = vs_INTERP5;
  let x_1723 : f32 = x_66.x_GlobalMipBias.x;
  let x_1724 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1721, x_1723);
  u_xlat25 = vec3<f32>(x_1724.x, x_1724.y, x_1724.z);
  let x_1727 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1728 : vec2<f32> = vec2<f32>(x_1727.x, x_1727.y);
  let x_1732 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1728.x, x_1728.y));
  let x_1733 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_1732.x, x_1733.y, x_1732.y);
  let x_1735 : vec3<f32> = u_xlat22;
  let x_1737 : vec4<f32> = hlslcc_FragCoord;
  let x_1739 : vec2<f32> = (vec2<f32>(x_1735.x, x_1735.z) * vec2<f32>(x_1737.x, x_1737.y));
  let x_1740 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1739.x, x_1739.y, x_1740.z, x_1740.w);
  let x_1743 : f32 = u_xlat6.y;
  let x_1746 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1749 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat22.x = ((x_1743 * x_1746) + x_1749);
  let x_1753 : f32 = u_xlat22.x;
  u_xlat6.z = (-(x_1753) + 1.0f);
  let x_1758 : f32 = u_xlat3.x;
  u_xlat3.x = x_1758;
  let x_1761 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1761, 0.0f, 1.0f);
  let x_1765 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1765, 1.0f);
  let x_1768 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1768 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1773 : f32 = u_xlat3.x;
  u_xlat22.x = (-(x_1773) + 1.0f);
  let x_1778 : f32 = u_xlat22.x;
  let x_1780 : f32 = u_xlat22.x;
  u_xlat64 = (x_1778 * x_1780);
  let x_1782 : f32 = u_xlat64;
  u_xlat64 = max(x_1782, 0.0078125f);
  let x_1785 : f32 = u_xlat64;
  let x_1786 : f32 = u_xlat64;
  u_xlat65 = (x_1785 * x_1786);
  let x_1789 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1789 + 0.040000021f);
  let x_1794 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1794, 1.0f);
  let x_1798 : f32 = u_xlat64;
  u_xlat68 = ((x_1798 * 4.0f) + 2.0f);
  let x_1807 : vec4<f32> = u_xlat6;
  let x_1810 : f32 = x_66.x_GlobalMipBias.x;
  let x_1811 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1807.x, x_1807.z), x_1810);
  u_xlat6.x = x_1811.x;
  let x_1815 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1815 + -1.0f);
  let x_1820 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1822 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1820 * x_1822) + 1.0f);
  let x_1827 : f32 = u_xlat6.x;
  let x_1829 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1827, x_1829);
  let x_1832 : bool = u_xlatb63;
  if (x_1832) {
    let x_1836 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1836 == 1.0f);
    let x_1838 : bool = u_xlatb63;
    if (x_1838) {
      let x_1842 : vec4<f32> = vs_INTERP9;
      let x_1845 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1842.x, x_1842.y, x_1842.x, x_1842.y) + x_1845);
      let x_1848 : vec4<f32> = u_xlat7;
      let x_1849 : vec2<f32> = vec2<f32>(x_1848.x, x_1848.y);
      let x_1851 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1849.x, x_1849.y, x_1851);
      let x_1858 : vec3<f32> = txVec30;
      let x_1860 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1858.xy, x_1858.z);
      u_xlat8.x = x_1860;
      let x_1863 : vec4<f32> = u_xlat7;
      let x_1864 : vec2<f32> = vec2<f32>(x_1863.z, x_1863.w);
      let x_1866 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1864.x, x_1864.y, x_1866);
      let x_1873 : vec3<f32> = txVec31;
      let x_1875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1873.xy, x_1873.z);
      u_xlat8.y = x_1875;
      let x_1877 : vec4<f32> = vs_INTERP9;
      let x_1880 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1877.x, x_1877.y, x_1877.x, x_1877.y) + x_1880);
      let x_1883 : vec4<f32> = u_xlat7;
      let x_1884 : vec2<f32> = vec2<f32>(x_1883.x, x_1883.y);
      let x_1886 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1884.x, x_1884.y, x_1886);
      let x_1893 : vec3<f32> = txVec32;
      let x_1895 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1893.xy, x_1893.z);
      u_xlat8.z = x_1895;
      let x_1898 : vec4<f32> = u_xlat7;
      let x_1899 : vec2<f32> = vec2<f32>(x_1898.z, x_1898.w);
      let x_1901 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1899.x, x_1899.y, x_1901);
      let x_1908 : vec3<f32> = txVec33;
      let x_1910 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1908.xy, x_1908.z);
      u_xlat8.w = x_1910;
      let x_1912 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1912, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1917 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb48 = (x_1917 == 2.0f);
      let x_1919 : bool = u_xlatb48;
      if (x_1919) {
        let x_1923 : vec4<f32> = vs_INTERP9;
        let x_1926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1923.x, x_1923.y) * vec2<f32>(x_1926.z, x_1926.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1930 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1930);
        let x_1932 : vec4<f32> = vs_INTERP9;
        let x_1935 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1938 : vec2<f32> = u_xlat48;
        let x_1940 : vec2<f32> = ((vec2<f32>(x_1932.x, x_1932.y) * vec2<f32>(x_1935.z, x_1935.w)) + -(x_1938));
        let x_1941 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1940.x, x_1940.y, x_1941.z, x_1941.w);
        let x_1943 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1943.x, x_1943.x, x_1943.y, x_1943.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1946 : vec4<f32> = u_xlat8;
        let x_1948 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1946.x, x_1946.x, x_1946.z, x_1946.z) * vec4<f32>(x_1948.x, x_1948.x, x_1948.z, x_1948.z));
        let x_1951 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1951.y, x_1951.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1954 : vec4<f32> = u_xlat9;
        let x_1957 : vec4<f32> = u_xlat7;
        let x_1960 : vec2<f32> = ((vec2<f32>(x_1954.x, x_1954.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1957.x, x_1957.y)));
        let x_1961 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1960.x, x_1961.y, x_1960.y, x_1961.w);
        let x_1963 : vec4<f32> = u_xlat7;
        let x_1966 : vec2<f32> = (-(vec2<f32>(x_1963.x, x_1963.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1967 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1966.x, x_1966.y, x_1967.z, x_1967.w);
        let x_1970 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_1970.x, x_1970.y), vec2<f32>(0.0f, 0.0f));
        let x_1973 : vec2<f32> = u_xlat51;
        let x_1975 : vec2<f32> = u_xlat51;
        let x_1977 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_1973) * x_1975) + vec2<f32>(x_1977.x, x_1977.y));
        let x_1980 : vec4<f32> = u_xlat7;
        let x_1982 : vec2<f32> = max(vec2<f32>(x_1980.x, x_1980.y), vec2<f32>(0.0f, 0.0f));
        let x_1983 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1982.x, x_1982.y, x_1983.z, x_1983.w);
        let x_1985 : vec4<f32> = u_xlat7;
        let x_1988 : vec4<f32> = u_xlat7;
        let x_1991 : vec4<f32> = u_xlat8;
        let x_1993 : vec2<f32> = ((-(vec2<f32>(x_1985.x, x_1985.y)) * vec2<f32>(x_1988.x, x_1988.y)) + vec2<f32>(x_1991.y, x_1991.w));
        let x_1994 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1993.x, x_1993.y, x_1994.z, x_1994.w);
        let x_1996 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_1996 + vec2<f32>(1.0f, 1.0f));
        let x_1998 : vec4<f32> = u_xlat7;
        let x_2000 : vec2<f32> = (vec2<f32>(x_1998.x, x_1998.y) + vec2<f32>(1.0f, 1.0f));
        let x_2001 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2000.x, x_2000.y, x_2001.z, x_2001.w);
        let x_2003 : vec4<f32> = u_xlat8;
        let x_2005 : vec2<f32> = (vec2<f32>(x_2003.x, x_2003.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2006 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2005.x, x_2005.y, x_2006.z, x_2006.w);
        let x_2008 : vec4<f32> = u_xlat9;
        let x_2010 : vec2<f32> = (vec2<f32>(x_2008.x, x_2008.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2011 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2010.x, x_2010.y, x_2011.z, x_2011.w);
        let x_2013 : vec2<f32> = u_xlat51;
        let x_2014 : vec2<f32> = (x_2013 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2015 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2014.x, x_2014.y, x_2015.z, x_2015.w);
        let x_2017 : vec4<f32> = u_xlat7;
        let x_2019 : vec2<f32> = (vec2<f32>(x_2017.x, x_2017.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2020 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2019.x, x_2019.y, x_2020.z, x_2020.w);
        let x_2022 : vec4<f32> = u_xlat8;
        let x_2024 : vec2<f32> = (vec2<f32>(x_2022.y, x_2022.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2025 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2024.x, x_2024.y, x_2025.z, x_2025.w);
        let x_2028 : f32 = u_xlat9.x;
        u_xlat10.z = x_2028;
        let x_2031 : f32 = u_xlat7.x;
        u_xlat10.w = x_2031;
        let x_2034 : f32 = u_xlat12.x;
        u_xlat11.z = x_2034;
        let x_2037 : f32 = u_xlat49.x;
        u_xlat11.w = x_2037;
        let x_2039 : vec4<f32> = u_xlat10;
        let x_2041 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2039.z, x_2039.w, x_2039.x, x_2039.z) + vec4<f32>(x_2041.z, x_2041.w, x_2041.x, x_2041.z));
        let x_2045 : f32 = u_xlat10.y;
        u_xlat9.z = x_2045;
        let x_2048 : f32 = u_xlat7.y;
        u_xlat9.w = x_2048;
        let x_2051 : f32 = u_xlat11.y;
        u_xlat12.z = x_2051;
        let x_2054 : f32 = u_xlat49.y;
        u_xlat12.w = x_2054;
        let x_2056 : vec4<f32> = u_xlat9;
        let x_2058 : vec4<f32> = u_xlat12;
        let x_2060 : vec3<f32> = (vec3<f32>(x_2056.z, x_2056.y, x_2056.w) + vec3<f32>(x_2058.z, x_2058.y, x_2058.w));
        let x_2061 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2060.x, x_2060.y, x_2060.z, x_2061.w);
        let x_2063 : vec4<f32> = u_xlat11;
        let x_2065 : vec4<f32> = u_xlat8;
        let x_2067 : vec3<f32> = (vec3<f32>(x_2063.x, x_2063.z, x_2063.w) / vec3<f32>(x_2065.z, x_2065.w, x_2065.y));
        let x_2068 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2067.x, x_2067.y, x_2067.z, x_2068.w);
        let x_2070 : vec4<f32> = u_xlat9;
        let x_2072 : vec3<f32> = (vec3<f32>(x_2070.x, x_2070.y, x_2070.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2073 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2072.x, x_2072.y, x_2072.z, x_2073.w);
        let x_2075 : vec4<f32> = u_xlat12;
        let x_2077 : vec4<f32> = u_xlat7;
        let x_2079 : vec3<f32> = (vec3<f32>(x_2075.z, x_2075.y, x_2075.w) / vec3<f32>(x_2077.x, x_2077.y, x_2077.z));
        let x_2080 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2079.x, x_2079.y, x_2079.z, x_2080.w);
        let x_2082 : vec4<f32> = u_xlat10;
        let x_2084 : vec3<f32> = (vec3<f32>(x_2082.x, x_2082.y, x_2082.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2085 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2084.x, x_2084.y, x_2084.z, x_2085.w);
        let x_2087 : vec4<f32> = u_xlat9;
        let x_2090 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2092 : vec3<f32> = (vec3<f32>(x_2087.y, x_2087.x, x_2087.z) * vec3<f32>(x_2090.x, x_2090.x, x_2090.x));
        let x_2093 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2092.x, x_2092.y, x_2092.z, x_2093.w);
        let x_2095 : vec4<f32> = u_xlat10;
        let x_2098 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2100 : vec3<f32> = (vec3<f32>(x_2095.x, x_2095.y, x_2095.z) * vec3<f32>(x_2098.y, x_2098.y, x_2098.y));
        let x_2101 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2100.x, x_2100.y, x_2100.z, x_2101.w);
        let x_2104 : f32 = u_xlat10.x;
        u_xlat9.w = x_2104;
        let x_2106 : vec2<f32> = u_xlat48;
        let x_2109 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2112 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2106.x, x_2106.y, x_2106.x, x_2106.y) * vec4<f32>(x_2109.x, x_2109.y, x_2109.x, x_2109.y)) + vec4<f32>(x_2112.y, x_2112.w, x_2112.x, x_2112.w));
        let x_2115 : vec2<f32> = u_xlat48;
        let x_2117 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2120 : vec4<f32> = u_xlat9;
        let x_2122 : vec2<f32> = ((x_2115 * vec2<f32>(x_2117.x, x_2117.y)) + vec2<f32>(x_2120.z, x_2120.w));
        let x_2123 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2122.x, x_2122.y, x_2123.z, x_2123.w);
        let x_2126 : f32 = u_xlat9.y;
        u_xlat10.w = x_2126;
        let x_2128 : vec4<f32> = u_xlat10;
        let x_2129 : vec2<f32> = vec2<f32>(x_2128.y, x_2128.z);
        let x_2130 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2130.x, x_2129.x, x_2130.z, x_2129.y);
        let x_2132 : vec2<f32> = u_xlat48;
        let x_2135 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2138 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2132.x, x_2132.y, x_2132.x, x_2132.y) * vec4<f32>(x_2135.x, x_2135.y, x_2135.x, x_2135.y)) + vec4<f32>(x_2138.x, x_2138.y, x_2138.z, x_2138.y));
        let x_2141 : vec2<f32> = u_xlat48;
        let x_2144 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2147 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2141.x, x_2141.y, x_2141.x, x_2141.y) * vec4<f32>(x_2144.x, x_2144.y, x_2144.x, x_2144.y)) + vec4<f32>(x_2147.w, x_2147.y, x_2147.w, x_2147.z));
        let x_2150 : vec2<f32> = u_xlat48;
        let x_2153 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2156 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2150.x, x_2150.y, x_2150.x, x_2150.y) * vec4<f32>(x_2153.x, x_2153.y, x_2153.x, x_2153.y)) + vec4<f32>(x_2156.x, x_2156.w, x_2156.z, x_2156.w));
        let x_2159 : vec4<f32> = u_xlat7;
        let x_2161 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2159.x, x_2159.x, x_2159.x, x_2159.y) * vec4<f32>(x_2161.z, x_2161.w, x_2161.y, x_2161.z));
        let x_2164 : vec4<f32> = u_xlat7;
        let x_2166 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2164.y, x_2164.y, x_2164.z, x_2164.z) * x_2166);
        let x_2169 : f32 = u_xlat7.z;
        let x_2171 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2169 * x_2171);
        let x_2175 : vec4<f32> = u_xlat11;
        let x_2176 : vec2<f32> = vec2<f32>(x_2175.x, x_2175.y);
        let x_2178 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2176.x, x_2176.y, x_2178);
        let x_2186 : vec3<f32> = txVec34;
        let x_2188 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2186.xy, x_2186.z);
        u_xlat69 = x_2188;
        let x_2190 : vec4<f32> = u_xlat11;
        let x_2191 : vec2<f32> = vec2<f32>(x_2190.z, x_2190.w);
        let x_2193 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2191.x, x_2191.y, x_2193);
        let x_2200 : vec3<f32> = txVec35;
        let x_2202 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2200.xy, x_2200.z);
        u_xlat7.x = x_2202;
        let x_2205 : f32 = u_xlat7.x;
        let x_2207 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2205 * x_2207);
        let x_2211 : f32 = u_xlat14.x;
        let x_2212 : f32 = u_xlat69;
        let x_2215 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2211 * x_2212) + x_2215);
        let x_2218 : vec4<f32> = u_xlat12;
        let x_2219 : vec2<f32> = vec2<f32>(x_2218.x, x_2218.y);
        let x_2221 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2219.x, x_2219.y, x_2221);
        let x_2228 : vec3<f32> = txVec36;
        let x_2230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2228.xy, x_2228.z);
        u_xlat7.x = x_2230;
        let x_2233 : f32 = u_xlat14.z;
        let x_2235 : f32 = u_xlat7.x;
        let x_2237 : f32 = u_xlat69;
        u_xlat69 = ((x_2233 * x_2235) + x_2237);
        let x_2240 : vec4<f32> = u_xlat10;
        let x_2241 : vec2<f32> = vec2<f32>(x_2240.x, x_2240.y);
        let x_2243 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2241.x, x_2241.y, x_2243);
        let x_2250 : vec3<f32> = txVec37;
        let x_2252 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2250.xy, x_2250.z);
        u_xlat7.x = x_2252;
        let x_2255 : f32 = u_xlat14.w;
        let x_2257 : f32 = u_xlat7.x;
        let x_2259 : f32 = u_xlat69;
        u_xlat69 = ((x_2255 * x_2257) + x_2259);
        let x_2262 : vec4<f32> = u_xlat13;
        let x_2263 : vec2<f32> = vec2<f32>(x_2262.x, x_2262.y);
        let x_2265 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2263.x, x_2263.y, x_2265);
        let x_2272 : vec3<f32> = txVec38;
        let x_2274 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2272.xy, x_2272.z);
        u_xlat7.x = x_2274;
        let x_2277 : f32 = u_xlat15.x;
        let x_2279 : f32 = u_xlat7.x;
        let x_2281 : f32 = u_xlat69;
        u_xlat69 = ((x_2277 * x_2279) + x_2281);
        let x_2284 : vec4<f32> = u_xlat13;
        let x_2285 : vec2<f32> = vec2<f32>(x_2284.z, x_2284.w);
        let x_2287 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2285.x, x_2285.y, x_2287);
        let x_2294 : vec3<f32> = txVec39;
        let x_2296 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2294.xy, x_2294.z);
        u_xlat7.x = x_2296;
        let x_2299 : f32 = u_xlat15.y;
        let x_2301 : f32 = u_xlat7.x;
        let x_2303 : f32 = u_xlat69;
        u_xlat69 = ((x_2299 * x_2301) + x_2303);
        let x_2306 : vec4<f32> = u_xlat10;
        let x_2307 : vec2<f32> = vec2<f32>(x_2306.z, x_2306.w);
        let x_2309 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2307.x, x_2307.y, x_2309);
        let x_2316 : vec3<f32> = txVec40;
        let x_2318 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2316.xy, x_2316.z);
        u_xlat7.x = x_2318;
        let x_2321 : f32 = u_xlat15.z;
        let x_2323 : f32 = u_xlat7.x;
        let x_2325 : f32 = u_xlat69;
        u_xlat69 = ((x_2321 * x_2323) + x_2325);
        let x_2328 : vec4<f32> = u_xlat9;
        let x_2329 : vec2<f32> = vec2<f32>(x_2328.x, x_2328.y);
        let x_2331 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2329.x, x_2329.y, x_2331);
        let x_2338 : vec3<f32> = txVec41;
        let x_2340 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2338.xy, x_2338.z);
        u_xlat7.x = x_2340;
        let x_2343 : f32 = u_xlat15.w;
        let x_2345 : f32 = u_xlat7.x;
        let x_2347 : f32 = u_xlat69;
        u_xlat69 = ((x_2343 * x_2345) + x_2347);
        let x_2350 : vec4<f32> = u_xlat9;
        let x_2351 : vec2<f32> = vec2<f32>(x_2350.z, x_2350.w);
        let x_2353 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2351.x, x_2351.y, x_2353);
        let x_2360 : vec3<f32> = txVec42;
        let x_2362 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2360.xy, x_2360.z);
        u_xlat7.x = x_2362;
        let x_2365 : f32 = u_xlat48.x;
        let x_2367 : f32 = u_xlat7.x;
        let x_2369 : f32 = u_xlat69;
        u_xlat63 = ((x_2365 * x_2367) + x_2369);
      } else {
        let x_2372 : vec4<f32> = vs_INTERP9;
        let x_2375 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2372.x, x_2372.y) * vec2<f32>(x_2375.z, x_2375.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2379 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2379);
        let x_2381 : vec4<f32> = vs_INTERP9;
        let x_2384 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2387 : vec2<f32> = u_xlat48;
        let x_2389 : vec2<f32> = ((vec2<f32>(x_2381.x, x_2381.y) * vec2<f32>(x_2384.z, x_2384.w)) + -(x_2387));
        let x_2390 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2389.x, x_2389.y, x_2390.z, x_2390.w);
        let x_2392 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2392.x, x_2392.x, x_2392.y, x_2392.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2395 : vec4<f32> = u_xlat8;
        let x_2397 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2395.x, x_2395.x, x_2395.z, x_2395.z) * vec4<f32>(x_2397.x, x_2397.x, x_2397.z, x_2397.z));
        let x_2400 : vec4<f32> = u_xlat9;
        let x_2402 : vec2<f32> = (vec2<f32>(x_2400.y, x_2400.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2403 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2403.x, x_2402.x, x_2403.z, x_2402.y);
        let x_2405 : vec4<f32> = u_xlat9;
        let x_2408 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2405.x, x_2405.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2408.x, x_2408.y)));
        let x_2412 : vec4<f32> = u_xlat7;
        let x_2415 : vec2<f32> = (-(vec2<f32>(x_2412.x, x_2412.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2416 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2415.x, x_2416.y, x_2415.y, x_2416.w);
        let x_2418 : vec4<f32> = u_xlat7;
        let x_2420 : vec2<f32> = min(vec2<f32>(x_2418.x, x_2418.y), vec2<f32>(0.0f, 0.0f));
        let x_2421 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2420.x, x_2420.y, x_2421.z, x_2421.w);
        let x_2423 : vec4<f32> = u_xlat9;
        let x_2426 : vec4<f32> = u_xlat9;
        let x_2429 : vec4<f32> = u_xlat8;
        let x_2431 : vec2<f32> = ((-(vec2<f32>(x_2423.x, x_2423.y)) * vec2<f32>(x_2426.x, x_2426.y)) + vec2<f32>(x_2429.x, x_2429.z));
        let x_2432 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2431.x, x_2432.y, x_2431.y, x_2432.w);
        let x_2434 : vec4<f32> = u_xlat7;
        let x_2436 : vec2<f32> = max(vec2<f32>(x_2434.x, x_2434.y), vec2<f32>(0.0f, 0.0f));
        let x_2437 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2436.x, x_2436.y, x_2437.z, x_2437.w);
        let x_2439 : vec4<f32> = u_xlat9;
        let x_2442 : vec4<f32> = u_xlat9;
        let x_2445 : vec4<f32> = u_xlat8;
        let x_2447 : vec2<f32> = ((-(vec2<f32>(x_2439.x, x_2439.y)) * vec2<f32>(x_2442.x, x_2442.y)) + vec2<f32>(x_2445.y, x_2445.w));
        let x_2448 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2448.x, x_2447.x, x_2448.z, x_2447.y);
        let x_2450 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2450 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2453 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2453 * 0.081632003f);
        let x_2456 : vec2<f32> = u_xlat49;
        let x_2458 : vec2<f32> = (vec2<f32>(x_2456.y, x_2456.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2459 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2458.x, x_2458.y, x_2459.z, x_2459.w);
        let x_2461 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2461.x, x_2461.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2465 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2465 * 0.081632003f);
        let x_2469 : f32 = u_xlat11.y;
        u_xlat9.x = x_2469;
        let x_2471 : vec4<f32> = u_xlat7;
        let x_2474 : vec2<f32> = ((vec2<f32>(x_2471.x, x_2471.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2475 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2475.x, x_2474.x, x_2475.z, x_2474.y);
        let x_2477 : vec4<f32> = u_xlat7;
        let x_2480 : vec2<f32> = ((vec2<f32>(x_2477.x, x_2477.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2481 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2480.x, x_2481.y, x_2480.y, x_2481.w);
        let x_2484 : f32 = u_xlat49.x;
        u_xlat8.y = x_2484;
        let x_2487 : f32 = u_xlat10.y;
        u_xlat8.w = x_2487;
        let x_2489 : vec4<f32> = u_xlat8;
        let x_2490 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2489 + x_2490);
        let x_2492 : vec4<f32> = u_xlat7;
        let x_2495 : vec2<f32> = ((vec2<f32>(x_2492.y, x_2492.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2496 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2496.x, x_2495.x, x_2496.z, x_2495.y);
        let x_2498 : vec4<f32> = u_xlat7;
        let x_2501 : vec2<f32> = ((vec2<f32>(x_2498.y, x_2498.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2502 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2501.x, x_2502.y, x_2501.y, x_2502.w);
        let x_2505 : f32 = u_xlat49.y;
        u_xlat10.y = x_2505;
        let x_2507 : vec4<f32> = u_xlat10;
        let x_2508 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2507 + x_2508);
        let x_2510 : vec4<f32> = u_xlat8;
        let x_2511 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2510 / x_2511);
        let x_2513 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2513 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2515 : vec4<f32> = u_xlat10;
        let x_2516 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2515 / x_2516);
        let x_2518 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2518 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2520 : vec4<f32> = u_xlat8;
        let x_2523 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2520.w, x_2520.x, x_2520.y, x_2520.z) * vec4<f32>(x_2523.x, x_2523.x, x_2523.x, x_2523.x));
        let x_2526 : vec4<f32> = u_xlat10;
        let x_2529 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2526.x, x_2526.w, x_2526.y, x_2526.z) * vec4<f32>(x_2529.y, x_2529.y, x_2529.y, x_2529.y));
        let x_2532 : vec4<f32> = u_xlat8;
        let x_2533 : vec3<f32> = vec3<f32>(x_2532.y, x_2532.z, x_2532.w);
        let x_2534 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2533.x, x_2534.y, x_2533.y, x_2533.z);
        let x_2537 : f32 = u_xlat10.x;
        u_xlat11.y = x_2537;
        let x_2539 : vec2<f32> = u_xlat48;
        let x_2542 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2545 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2539.x, x_2539.y, x_2539.x, x_2539.y) * vec4<f32>(x_2542.x, x_2542.y, x_2542.x, x_2542.y)) + vec4<f32>(x_2545.x, x_2545.y, x_2545.z, x_2545.y));
        let x_2548 : vec2<f32> = u_xlat48;
        let x_2550 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2553 : vec4<f32> = u_xlat11;
        let x_2555 : vec2<f32> = ((x_2548 * vec2<f32>(x_2550.x, x_2550.y)) + vec2<f32>(x_2553.w, x_2553.y));
        let x_2556 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2555.x, x_2555.y, x_2556.z, x_2556.w);
        let x_2559 : f32 = u_xlat11.y;
        u_xlat8.y = x_2559;
        let x_2562 : f32 = u_xlat10.z;
        u_xlat11.y = x_2562;
        let x_2564 : vec2<f32> = u_xlat48;
        let x_2567 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2570 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2564.x, x_2564.y, x_2564.x, x_2564.y) * vec4<f32>(x_2567.x, x_2567.y, x_2567.x, x_2567.y)) + vec4<f32>(x_2570.x, x_2570.y, x_2570.z, x_2570.y));
        let x_2573 : vec2<f32> = u_xlat48;
        let x_2575 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2578 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2573 * vec2<f32>(x_2575.x, x_2575.y)) + vec2<f32>(x_2578.w, x_2578.y));
        let x_2582 : f32 = u_xlat11.y;
        u_xlat8.z = x_2582;
        let x_2584 : vec2<f32> = u_xlat48;
        let x_2587 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2590 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2584.x, x_2584.y, x_2584.x, x_2584.y) * vec4<f32>(x_2587.x, x_2587.y, x_2587.x, x_2587.y)) + vec4<f32>(x_2590.x, x_2590.y, x_2590.x, x_2590.z));
        let x_2594 : f32 = u_xlat10.w;
        u_xlat11.y = x_2594;
        let x_2596 : vec2<f32> = u_xlat48;
        let x_2599 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2602 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2596.x, x_2596.y, x_2596.x, x_2596.y) * vec4<f32>(x_2599.x, x_2599.y, x_2599.x, x_2599.y)) + vec4<f32>(x_2602.x, x_2602.y, x_2602.z, x_2602.y));
        let x_2606 : vec2<f32> = u_xlat48;
        let x_2608 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2611 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2606 * vec2<f32>(x_2608.x, x_2608.y)) + vec2<f32>(x_2611.w, x_2611.y));
        let x_2615 : f32 = u_xlat11.y;
        u_xlat8.w = x_2615;
        let x_2617 : vec2<f32> = u_xlat48;
        let x_2619 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2622 : vec4<f32> = u_xlat8;
        let x_2624 : vec2<f32> = ((x_2617 * vec2<f32>(x_2619.x, x_2619.y)) + vec2<f32>(x_2622.x, x_2622.w));
        let x_2625 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2624.x, x_2624.y, x_2625.z, x_2625.w);
        let x_2627 : vec4<f32> = u_xlat11;
        let x_2628 : vec3<f32> = vec3<f32>(x_2627.x, x_2627.z, x_2627.w);
        let x_2629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2628.x, x_2629.y, x_2628.y, x_2628.z);
        let x_2631 : vec2<f32> = u_xlat48;
        let x_2634 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2637 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2631.x, x_2631.y, x_2631.x, x_2631.y) * vec4<f32>(x_2634.x, x_2634.y, x_2634.x, x_2634.y)) + vec4<f32>(x_2637.x, x_2637.y, x_2637.z, x_2637.y));
        let x_2641 : vec2<f32> = u_xlat48;
        let x_2643 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2646 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2641 * vec2<f32>(x_2643.x, x_2643.y)) + vec2<f32>(x_2646.w, x_2646.y));
        let x_2650 : f32 = u_xlat8.x;
        u_xlat10.x = x_2650;
        let x_2652 : vec2<f32> = u_xlat48;
        let x_2654 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2657 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2652 * vec2<f32>(x_2654.x, x_2654.y)) + vec2<f32>(x_2657.x, x_2657.y));
        let x_2660 : vec4<f32> = u_xlat7;
        let x_2662 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2660.x, x_2660.x, x_2660.x, x_2660.x) * x_2662);
        let x_2665 : vec4<f32> = u_xlat7;
        let x_2667 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2665.y, x_2665.y, x_2665.y, x_2665.y) * x_2667);
        let x_2670 : vec4<f32> = u_xlat7;
        let x_2672 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2670.z, x_2670.z, x_2670.z, x_2670.z) * x_2672);
        let x_2674 : vec4<f32> = u_xlat7;
        let x_2676 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2674.w, x_2674.w, x_2674.w, x_2674.w) * x_2676);
        let x_2679 : vec4<f32> = u_xlat12;
        let x_2680 : vec2<f32> = vec2<f32>(x_2679.x, x_2679.y);
        let x_2682 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2680.x, x_2680.y, x_2682);
        let x_2689 : vec3<f32> = txVec43;
        let x_2691 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2689.xy, x_2689.z);
        u_xlat8.x = x_2691;
        let x_2694 : vec4<f32> = u_xlat12;
        let x_2695 : vec2<f32> = vec2<f32>(x_2694.z, x_2694.w);
        let x_2697 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2695.x, x_2695.y, x_2697);
        let x_2705 : vec3<f32> = txVec44;
        let x_2707 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2705.xy, x_2705.z);
        u_xlat71 = x_2707;
        let x_2708 : f32 = u_xlat71;
        let x_2710 : f32 = u_xlat18.y;
        u_xlat71 = (x_2708 * x_2710);
        let x_2713 : f32 = u_xlat18.x;
        let x_2715 : f32 = u_xlat8.x;
        let x_2717 : f32 = u_xlat71;
        u_xlat8.x = ((x_2713 * x_2715) + x_2717);
        let x_2721 : vec4<f32> = u_xlat13;
        let x_2722 : vec2<f32> = vec2<f32>(x_2721.x, x_2721.y);
        let x_2724 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2722.x, x_2722.y, x_2724);
        let x_2731 : vec3<f32> = txVec45;
        let x_2733 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2731.xy, x_2731.z);
        u_xlat71 = x_2733;
        let x_2735 : f32 = u_xlat18.z;
        let x_2736 : f32 = u_xlat71;
        let x_2739 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2735 * x_2736) + x_2739);
        let x_2743 : vec4<f32> = u_xlat15;
        let x_2744 : vec2<f32> = vec2<f32>(x_2743.x, x_2743.y);
        let x_2746 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2744.x, x_2744.y, x_2746);
        let x_2753 : vec3<f32> = txVec46;
        let x_2755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2753.xy, x_2753.z);
        u_xlat71 = x_2755;
        let x_2757 : f32 = u_xlat18.w;
        let x_2758 : f32 = u_xlat71;
        let x_2761 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2757 * x_2758) + x_2761);
        let x_2765 : vec4<f32> = u_xlat14;
        let x_2766 : vec2<f32> = vec2<f32>(x_2765.x, x_2765.y);
        let x_2768 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2766.x, x_2766.y, x_2768);
        let x_2775 : vec3<f32> = txVec47;
        let x_2777 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2775.xy, x_2775.z);
        u_xlat71 = x_2777;
        let x_2779 : f32 = u_xlat19.x;
        let x_2780 : f32 = u_xlat71;
        let x_2783 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2779 * x_2780) + x_2783);
        let x_2787 : vec4<f32> = u_xlat14;
        let x_2788 : vec2<f32> = vec2<f32>(x_2787.z, x_2787.w);
        let x_2790 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2788.x, x_2788.y, x_2790);
        let x_2797 : vec3<f32> = txVec48;
        let x_2799 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2797.xy, x_2797.z);
        u_xlat71 = x_2799;
        let x_2801 : f32 = u_xlat19.y;
        let x_2802 : f32 = u_xlat71;
        let x_2805 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2801 * x_2802) + x_2805);
        let x_2809 : vec2<f32> = u_xlat55;
        let x_2811 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2809.x, x_2809.y, x_2811);
        let x_2818 : vec3<f32> = txVec49;
        let x_2820 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2818.xy, x_2818.z);
        u_xlat71 = x_2820;
        let x_2822 : f32 = u_xlat19.z;
        let x_2823 : f32 = u_xlat71;
        let x_2826 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2822 * x_2823) + x_2826);
        let x_2830 : vec4<f32> = u_xlat15;
        let x_2831 : vec2<f32> = vec2<f32>(x_2830.z, x_2830.w);
        let x_2833 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2831.x, x_2831.y, x_2833);
        let x_2840 : vec3<f32> = txVec50;
        let x_2842 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2840.xy, x_2840.z);
        u_xlat71 = x_2842;
        let x_2844 : f32 = u_xlat19.w;
        let x_2845 : f32 = u_xlat71;
        let x_2848 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2844 * x_2845) + x_2848);
        let x_2852 : vec4<f32> = u_xlat16;
        let x_2853 : vec2<f32> = vec2<f32>(x_2852.x, x_2852.y);
        let x_2855 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2853.x, x_2853.y, x_2855);
        let x_2862 : vec3<f32> = txVec51;
        let x_2864 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2862.xy, x_2862.z);
        u_xlat71 = x_2864;
        let x_2866 : f32 = u_xlat20.x;
        let x_2867 : f32 = u_xlat71;
        let x_2870 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2866 * x_2867) + x_2870);
        let x_2874 : vec4<f32> = u_xlat16;
        let x_2875 : vec2<f32> = vec2<f32>(x_2874.z, x_2874.w);
        let x_2877 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2875.x, x_2875.y, x_2877);
        let x_2884 : vec3<f32> = txVec52;
        let x_2886 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2884.xy, x_2884.z);
        u_xlat71 = x_2886;
        let x_2888 : f32 = u_xlat20.y;
        let x_2889 : f32 = u_xlat71;
        let x_2892 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2888 * x_2889) + x_2892);
        let x_2896 : vec2<f32> = u_xlat29;
        let x_2898 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2896.x, x_2896.y, x_2898);
        let x_2905 : vec3<f32> = txVec53;
        let x_2907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2905.xy, x_2905.z);
        u_xlat29.x = x_2907;
        let x_2910 : f32 = u_xlat20.z;
        let x_2912 : f32 = u_xlat29.x;
        let x_2915 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2910 * x_2912) + x_2915);
        let x_2919 : vec4<f32> = u_xlat17;
        let x_2920 : vec2<f32> = vec2<f32>(x_2919.x, x_2919.y);
        let x_2922 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2920.x, x_2920.y, x_2922);
        let x_2929 : vec3<f32> = txVec54;
        let x_2931 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2929.xy, x_2929.z);
        u_xlat29.x = x_2931;
        let x_2934 : f32 = u_xlat20.w;
        let x_2936 : f32 = u_xlat29.x;
        let x_2939 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2934 * x_2936) + x_2939);
        let x_2943 : vec4<f32> = u_xlat11;
        let x_2944 : vec2<f32> = vec2<f32>(x_2943.x, x_2943.y);
        let x_2946 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2944.x, x_2944.y, x_2946);
        let x_2953 : vec3<f32> = txVec55;
        let x_2955 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2953.xy, x_2953.z);
        u_xlat29.x = x_2955;
        let x_2958 : f32 = u_xlat7.x;
        let x_2960 : f32 = u_xlat29.x;
        let x_2963 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_2958 * x_2960) + x_2963);
        let x_2967 : vec4<f32> = u_xlat11;
        let x_2968 : vec2<f32> = vec2<f32>(x_2967.z, x_2967.w);
        let x_2970 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_2968.x, x_2968.y, x_2970);
        let x_2977 : vec3<f32> = txVec56;
        let x_2979 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2977.xy, x_2977.z);
        u_xlat8.x = x_2979;
        let x_2982 : f32 = u_xlat7.y;
        let x_2984 : f32 = u_xlat8.x;
        let x_2987 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2982 * x_2984) + x_2987);
        let x_2991 : vec2<f32> = u_xlat52;
        let x_2993 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_2991.x, x_2991.y, x_2993);
        let x_3000 : vec3<f32> = txVec57;
        let x_3002 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3000.xy, x_3000.z);
        u_xlat28.x = x_3002;
        let x_3005 : f32 = u_xlat7.z;
        let x_3007 : f32 = u_xlat28.x;
        let x_3010 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3005 * x_3007) + x_3010);
        let x_3014 : vec2<f32> = u_xlat48;
        let x_3016 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3014.x, x_3014.y, x_3016);
        let x_3023 : vec3<f32> = txVec58;
        let x_3025 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3023.xy, x_3023.z);
        u_xlat48.x = x_3025;
        let x_3028 : f32 = u_xlat7.w;
        let x_3030 : f32 = u_xlat48.x;
        let x_3033 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3028 * x_3030) + x_3033);
      }
    }
  } else {
    let x_3037 : vec4<f32> = vs_INTERP9;
    let x_3038 : vec2<f32> = vec2<f32>(x_3037.x, x_3037.y);
    let x_3040 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3038.x, x_3038.y, x_3040);
    let x_3047 : vec3<f32> = txVec59;
    let x_3049 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3047.xy, x_3047.z);
    u_xlat63 = x_3049;
  }
  let x_3050 : f32 = u_xlat63;
  let x_3052 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3055 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3050 * x_3052) + x_3055);
  let x_3059 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3059);
  let x_3062 : f32 = vs_INTERP9.z;
  u_xlatb48 = (x_3062 >= 1.0f);
  let x_3064 : bool = u_xlatb4;
  let x_3065 : bool = u_xlatb48;
  u_xlatb4 = (x_3064 | x_3065);
  let x_3067 : bool = u_xlatb4;
  let x_3068 : f32 = u_xlat63;
  u_xlat63 = select(x_3068, 1.0f, x_3067);
  let x_3070 : vec3<f32> = vs_INTERP0;
  let x_3072 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3074 : vec3<f32> = (x_3070 + -(x_3072));
  let x_3075 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3074.x, x_3074.y, x_3074.z, x_3075.w);
  let x_3077 : vec4<f32> = u_xlat7;
  let x_3079 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3077.x, x_3077.y, x_3077.z), vec3<f32>(x_3079.x, x_3079.y, x_3079.z));
  let x_3084 : f32 = u_xlat4.x;
  let x_3086 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3089 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3084 * x_3086) + x_3089);
  let x_3093 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3093, 0.0f, 1.0f);
  let x_3096 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3096) + 1.0f);
  let x_3101 : f32 = u_xlat4.x;
  let x_3103 : f32 = u_xlat48.x;
  let x_3105 : f32 = u_xlat63;
  u_xlat63 = ((x_3101 * x_3103) + x_3105);
  let x_3107 : vec3<f32> = u_xlat27;
  let x_3110 : vec4<f32> = x_66.x_MainLightColor;
  let x_3112 : vec3<f32> = (vec3<f32>(x_3107.x, x_3107.x, x_3107.x) * vec3<f32>(x_3110.x, x_3110.y, x_3110.z));
  let x_3113 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3112.x, x_3112.y, x_3112.z, x_3113.w);
  let x_3115 : vec4<f32> = u_xlat5;
  let x_3118 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(vec3<f32>(x_3115.x, x_3115.y, x_3115.z)), x_3118);
  let x_3122 : f32 = u_xlat4.x;
  let x_3124 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3122 + x_3124);
  let x_3127 : vec3<f32> = u_xlat24;
  let x_3128 : vec4<f32> = u_xlat4;
  let x_3132 : vec4<f32> = u_xlat5;
  let x_3135 : vec3<f32> = ((x_3127 * -(vec3<f32>(x_3128.x, x_3128.x, x_3128.x))) + -(vec3<f32>(x_3132.x, x_3132.y, x_3132.z)));
  let x_3136 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3135.x, x_3135.y, x_3135.z, x_3136.w);
  let x_3138 : vec3<f32> = u_xlat24;
  let x_3139 : vec4<f32> = u_xlat5;
  u_xlat4.x = dot(x_3138, vec3<f32>(x_3139.x, x_3139.y, x_3139.z));
  let x_3144 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3144, 0.0f, 1.0f);
  let x_3148 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3148) + 1.0f);
  let x_3153 : f32 = u_xlat4.x;
  let x_3155 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3153 * x_3155);
  let x_3159 : f32 = u_xlat4.x;
  let x_3161 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3159 * x_3161);
  let x_3165 : f32 = u_xlat22.x;
  u_xlat48.x = ((-(x_3165) * 0.699999988f) + 1.700000048f);
  let x_3173 : f32 = u_xlat22.x;
  let x_3175 : f32 = u_xlat48.x;
  u_xlat22.x = (x_3173 * x_3175);
  let x_3179 : f32 = u_xlat22.x;
  u_xlat22.x = (x_3179 * 6.0f);
  let x_3191 : vec4<f32> = u_xlat8;
  let x_3194 : f32 = u_xlat22.x;
  let x_3195 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3191.x, x_3191.y, x_3191.z), x_3194);
  u_xlat8 = x_3195;
  let x_3197 : f32 = u_xlat8.w;
  u_xlat22.x = (x_3197 + -1.0f);
  let x_3201 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3203 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_3201 * x_3203) + 1.0f);
  let x_3208 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_3208, 0.0f);
  let x_3212 : f32 = u_xlat22.x;
  u_xlat22.x = log2(x_3212);
  let x_3216 : f32 = u_xlat22.x;
  let x_3218 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat22.x = (x_3216 * x_3218);
  let x_3222 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_3222);
  let x_3226 : f32 = u_xlat22.x;
  let x_3228 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat22.x = (x_3226 * x_3228);
  let x_3231 : vec4<f32> = u_xlat8;
  let x_3233 : vec3<f32> = u_xlat22;
  let x_3235 : vec3<f32> = (vec3<f32>(x_3231.x, x_3231.y, x_3231.z) * vec3<f32>(x_3233.x, x_3233.x, x_3233.x));
  let x_3236 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3235.x, x_3235.y, x_3235.z, x_3236.w);
  let x_3238 : f32 = u_xlat64;
  let x_3240 : f32 = u_xlat64;
  let x_3244 : vec2<f32> = ((vec2<f32>(x_3238, x_3238) * vec2<f32>(x_3240, x_3240)) + vec2<f32>(-1.0f, 1.0f));
  let x_3245 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_3244.x, x_3245.y, x_3244.y);
  let x_3248 : f32 = u_xlat22.z;
  u_xlat64 = (1.0f / x_3248);
  let x_3251 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3251 + -0.039999999f);
  let x_3256 : f32 = u_xlat4.x;
  let x_3258 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3256 * x_3258) + 0.039999999f);
  let x_3263 : f32 = u_xlat64;
  let x_3265 : f32 = u_xlat3.x;
  u_xlat64 = (x_3263 * x_3265);
  let x_3267 : f32 = u_xlat64;
  let x_3269 : vec4<f32> = u_xlat8;
  let x_3271 : vec3<f32> = (vec3<f32>(x_3267, x_3267, x_3267) * vec3<f32>(x_3269.x, x_3269.y, x_3269.z));
  let x_3272 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3271.x, x_3271.y, x_3271.z, x_3272.w);
  let x_3274 : vec3<f32> = u_xlat25;
  let x_3275 : vec3<f32> = u_xlat2;
  let x_3277 : vec4<f32> = u_xlat8;
  let x_3279 : vec3<f32> = ((x_3274 * x_3275) + vec3<f32>(x_3277.x, x_3277.y, x_3277.z));
  let x_3280 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3279.x, x_3279.y, x_3279.z, x_3280.w);
  let x_3282 : f32 = u_xlat63;
  let x_3284 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3282 * x_3284);
  let x_3286 : vec3<f32> = u_xlat24;
  let x_3288 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3286, vec3<f32>(x_3288.x, x_3288.y, x_3288.z));
  let x_3291 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3291, 0.0f, 1.0f);
  let x_3293 : f32 = u_xlat63;
  let x_3294 : f32 = u_xlat64;
  u_xlat63 = (x_3293 * x_3294);
  let x_3296 : f32 = u_xlat63;
  let x_3298 : vec4<f32> = u_xlat7;
  let x_3300 : vec3<f32> = (vec3<f32>(x_3296, x_3296, x_3296) * vec3<f32>(x_3298.x, x_3298.y, x_3298.z));
  let x_3301 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3300.x, x_3300.y, x_3300.z, x_3301.w);
  let x_3303 : vec4<f32> = u_xlat5;
  let x_3306 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3308 : vec3<f32> = (vec3<f32>(x_3303.x, x_3303.y, x_3303.z) + vec3<f32>(x_3306.x, x_3306.y, x_3306.z));
  let x_3309 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3308.x, x_3308.y, x_3308.z, x_3309.w);
  let x_3311 : vec4<f32> = u_xlat8;
  let x_3313 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3311.x, x_3311.y, x_3311.z), vec3<f32>(x_3313.x, x_3313.y, x_3313.z));
  let x_3316 : f32 = u_xlat63;
  u_xlat63 = max(x_3316, 1.17549435e-37f);
  let x_3319 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3319);
  let x_3321 : f32 = u_xlat63;
  let x_3323 : vec4<f32> = u_xlat8;
  let x_3325 : vec3<f32> = (vec3<f32>(x_3321, x_3321, x_3321) * vec3<f32>(x_3323.x, x_3323.y, x_3323.z));
  let x_3326 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3325.x, x_3325.y, x_3325.z, x_3326.w);
  let x_3328 : vec3<f32> = u_xlat24;
  let x_3329 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3328, vec3<f32>(x_3329.x, x_3329.y, x_3329.z));
  let x_3332 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3332, 0.0f, 1.0f);
  let x_3335 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3337 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3335.x, x_3335.y, x_3335.z), vec3<f32>(x_3337.x, x_3337.y, x_3337.z));
  let x_3340 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3340, 0.0f, 1.0f);
  let x_3342 : f32 = u_xlat63;
  let x_3343 : f32 = u_xlat63;
  u_xlat63 = (x_3342 * x_3343);
  let x_3345 : f32 = u_xlat63;
  let x_3347 : f32 = u_xlat22.x;
  u_xlat63 = ((x_3345 * x_3347) + 1.000010014f);
  let x_3351 : f32 = u_xlat64;
  let x_3352 : f32 = u_xlat64;
  u_xlat64 = (x_3351 * x_3352);
  let x_3354 : f32 = u_xlat63;
  let x_3355 : f32 = u_xlat63;
  u_xlat63 = (x_3354 * x_3355);
  let x_3357 : f32 = u_xlat64;
  u_xlat64 = max(x_3357, 0.100000001f);
  let x_3360 : f32 = u_xlat63;
  let x_3361 : f32 = u_xlat64;
  u_xlat63 = (x_3360 * x_3361);
  let x_3363 : f32 = u_xlat68;
  let x_3364 : f32 = u_xlat63;
  u_xlat63 = (x_3363 * x_3364);
  let x_3366 : f32 = u_xlat65;
  let x_3367 : f32 = u_xlat63;
  u_xlat63 = (x_3366 / x_3367);
  let x_3369 : f32 = u_xlat63;
  let x_3373 : vec3<f32> = u_xlat2;
  let x_3374 : vec3<f32> = ((vec3<f32>(x_3369, x_3369, x_3369) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3373);
  let x_3375 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3374.x, x_3374.y, x_3374.z, x_3375.w);
  let x_3377 : vec4<f32> = u_xlat7;
  let x_3379 : vec4<f32> = u_xlat8;
  let x_3381 : vec3<f32> = (vec3<f32>(x_3377.x, x_3377.y, x_3377.z) * vec3<f32>(x_3379.x, x_3379.y, x_3379.z));
  let x_3382 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3381.x, x_3381.y, x_3381.z, x_3382.w);
  let x_3385 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3387 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3385, x_3387);
  let x_3391 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3391));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3403 : u32 = u_xlatu_loop_1;
    let x_3404 : u32 = u_xlatu63;
    if ((x_3403 < x_3404)) {
    } else {
      break;
    }
    let x_3407 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3407 >> 2u);
    let x_3411 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3411 & 3u));
    let x_3414 : u32 = u_xlatu3;
    let x_3417 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3414)];
    let x_3427 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3432 : vec4<u32> = indexable[x_3427];
    u_xlat3.x = dot(x_3417, bitcast<vec4<f32>>(x_3432));
    let x_3438 : f32 = u_xlat3.x;
    u_xlati3 = i32(x_3438);
    let x_3440 : vec3<f32> = vs_INTERP0;
    let x_3452 : i32 = u_xlati3;
    let x_3454 : vec4<f32> = x_3451.x_AdditionalLightsPosition[x_3452];
    let x_3457 : i32 = u_xlati3;
    let x_3459 : vec4<f32> = x_3451.x_AdditionalLightsPosition[x_3457];
    let x_3461 : vec3<f32> = ((-(x_3440) * vec3<f32>(x_3454.w, x_3454.w, x_3454.w)) + vec3<f32>(x_3459.x, x_3459.y, x_3459.z));
    let x_3462 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3461.x, x_3461.y, x_3461.z, x_3462.w);
    let x_3464 : vec4<f32> = u_xlat9;
    let x_3466 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3464.x, x_3464.y, x_3464.z), vec3<f32>(x_3466.x, x_3466.y, x_3466.z));
    let x_3469 : f32 = u_xlat67;
    u_xlat67 = max(x_3469, 6.10351562e-05f);
    let x_3472 : f32 = u_xlat67;
    u_xlat48.x = inverseSqrt(x_3472);
    let x_3475 : vec2<f32> = u_xlat48;
    let x_3477 : vec4<f32> = u_xlat9;
    let x_3479 : vec3<f32> = (vec3<f32>(x_3475.x, x_3475.x, x_3475.x) * vec3<f32>(x_3477.x, x_3477.y, x_3477.z));
    let x_3480 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3479.x, x_3479.y, x_3479.z, x_3480.w);
    let x_3482 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_3482);
    let x_3484 : f32 = u_xlat67;
    let x_3485 : i32 = u_xlati3;
    let x_3487 : f32 = x_3451.x_AdditionalLightsAttenuation[x_3485].x;
    u_xlat67 = (x_3484 * x_3487);
    let x_3489 : f32 = u_xlat67;
    let x_3491 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3489) * x_3491) + 1.0f);
    let x_3494 : f32 = u_xlat67;
    u_xlat67 = max(x_3494, 0.0f);
    let x_3496 : f32 = u_xlat67;
    let x_3497 : f32 = u_xlat67;
    u_xlat67 = (x_3496 * x_3497);
    let x_3499 : f32 = u_xlat67;
    let x_3500 : f32 = u_xlat69;
    u_xlat67 = (x_3499 * x_3500);
    let x_3502 : i32 = u_xlati3;
    let x_3504 : vec4<f32> = x_3451.x_AdditionalLightsSpotDir[x_3502];
    let x_3506 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3504.x, x_3504.y, x_3504.z), vec3<f32>(x_3506.x, x_3506.y, x_3506.z));
    let x_3509 : f32 = u_xlat69;
    let x_3510 : i32 = u_xlati3;
    let x_3512 : f32 = x_3451.x_AdditionalLightsAttenuation[x_3510].z;
    let x_3514 : i32 = u_xlati3;
    let x_3516 : f32 = x_3451.x_AdditionalLightsAttenuation[x_3514].w;
    u_xlat69 = ((x_3509 * x_3512) + x_3516);
    let x_3518 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3518, 0.0f, 1.0f);
    let x_3520 : f32 = u_xlat69;
    let x_3521 : f32 = u_xlat69;
    u_xlat69 = (x_3520 * x_3521);
    let x_3523 : f32 = u_xlat67;
    let x_3524 : f32 = u_xlat69;
    u_xlat67 = (x_3523 * x_3524);
    let x_3526 : vec3<f32> = u_xlat27;
    let x_3528 : i32 = u_xlati3;
    let x_3530 : vec4<f32> = x_3451.x_AdditionalLightsColor[x_3528];
    let x_3532 : vec3<f32> = (vec3<f32>(x_3526.x, x_3526.x, x_3526.x) * vec3<f32>(x_3530.x, x_3530.y, x_3530.z));
    let x_3533 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3532.x, x_3532.y, x_3532.z, x_3533.w);
    let x_3535 : vec3<f32> = u_xlat24;
    let x_3536 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_3535, vec3<f32>(x_3536.x, x_3536.y, x_3536.z));
    let x_3541 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3541, 0.0f, 1.0f);
    let x_3545 : f32 = u_xlat3.x;
    let x_3546 : f32 = u_xlat67;
    u_xlat3.x = (x_3545 * x_3546);
    let x_3549 : vec4<f32> = u_xlat3;
    let x_3551 : vec4<f32> = u_xlat11;
    let x_3553 : vec3<f32> = (vec3<f32>(x_3549.x, x_3549.x, x_3549.x) * vec3<f32>(x_3551.x, x_3551.y, x_3551.z));
    let x_3554 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3553.x, x_3553.y, x_3553.z, x_3554.w);
    let x_3556 : vec4<f32> = u_xlat9;
    let x_3558 : vec2<f32> = u_xlat48;
    let x_3561 : vec4<f32> = u_xlat5;
    let x_3563 : vec3<f32> = ((vec3<f32>(x_3556.x, x_3556.y, x_3556.z) * vec3<f32>(x_3558.x, x_3558.x, x_3558.x)) + vec3<f32>(x_3561.x, x_3561.y, x_3561.z));
    let x_3564 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3563.x, x_3563.y, x_3563.z, x_3564.w);
    let x_3566 : vec4<f32> = u_xlat9;
    let x_3568 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_3566.x, x_3566.y, x_3566.z), vec3<f32>(x_3568.x, x_3568.y, x_3568.z));
    let x_3573 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3573, 1.17549435e-37f);
    let x_3577 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_3577);
    let x_3580 : vec4<f32> = u_xlat3;
    let x_3582 : vec4<f32> = u_xlat9;
    let x_3584 : vec3<f32> = (vec3<f32>(x_3580.x, x_3580.x, x_3580.x) * vec3<f32>(x_3582.x, x_3582.y, x_3582.z));
    let x_3585 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3584.x, x_3584.y, x_3584.z, x_3585.w);
    let x_3587 : vec3<f32> = u_xlat24;
    let x_3588 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_3587, vec3<f32>(x_3588.x, x_3588.y, x_3588.z));
    let x_3593 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3593, 0.0f, 1.0f);
    let x_3596 : vec4<f32> = u_xlat10;
    let x_3598 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3596.x, x_3596.y, x_3596.z), vec3<f32>(x_3598.x, x_3598.y, x_3598.z));
    let x_3601 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3601, 0.0f, 1.0f);
    let x_3604 : f32 = u_xlat3.x;
    let x_3606 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3604 * x_3606);
    let x_3610 : f32 = u_xlat3.x;
    let x_3612 : f32 = u_xlat22.x;
    u_xlat3.x = ((x_3610 * x_3612) + 1.000010014f);
    let x_3616 : f32 = u_xlat67;
    let x_3617 : f32 = u_xlat67;
    u_xlat67 = (x_3616 * x_3617);
    let x_3620 : f32 = u_xlat3.x;
    let x_3622 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3620 * x_3622);
    let x_3625 : f32 = u_xlat67;
    u_xlat67 = max(x_3625, 0.100000001f);
    let x_3628 : f32 = u_xlat3.x;
    let x_3629 : f32 = u_xlat67;
    u_xlat3.x = (x_3628 * x_3629);
    let x_3632 : f32 = u_xlat68;
    let x_3634 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3632 * x_3634);
    let x_3637 : f32 = u_xlat65;
    let x_3639 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3637 / x_3639);
    let x_3642 : vec4<f32> = u_xlat3;
    let x_3645 : vec3<f32> = u_xlat2;
    let x_3646 : vec3<f32> = ((vec3<f32>(x_3642.x, x_3642.x, x_3642.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3645);
    let x_3647 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3646.x, x_3646.y, x_3646.z, x_3647.w);
    let x_3649 : vec4<f32> = u_xlat9;
    let x_3651 : vec4<f32> = u_xlat11;
    let x_3654 : vec4<f32> = u_xlat8;
    let x_3656 : vec3<f32> = ((vec3<f32>(x_3649.x, x_3649.y, x_3649.z) * vec3<f32>(x_3651.x, x_3651.y, x_3651.z)) + vec3<f32>(x_3654.x, x_3654.y, x_3654.z));
    let x_3657 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3656.x, x_3656.y, x_3656.z, x_3657.w);

    continuing {
      let x_3659 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3659 + bitcast<u32>(1i));
    }
  }
  let x_3661 : vec4<f32> = u_xlat4;
  let x_3663 : vec4<f32> = u_xlat6;
  let x_3666 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_3661.x, x_3661.y, x_3661.z) * vec3<f32>(x_3663.x, x_3663.x, x_3663.x)) + vec3<f32>(x_3666.x, x_3666.y, x_3666.z));
  let x_3669 : vec4<f32> = u_xlat8;
  let x_3671 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3669.x, x_3669.y, x_3669.z) + x_3671);
  let x_3675 : vec4<f32> = vs_INTERP4;
  let x_3677 : vec3<f32> = u_xlat0;
  let x_3679 : vec3<f32> = u_xlat2;
  let x_3680 : vec3<f32> = ((vec3<f32>(x_3675.w, x_3675.w, x_3675.w) * x_3677) + x_3679);
  let x_3681 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3680.x, x_3680.y, x_3680.z, x_3681.w);
  let x_3683 : bool = u_xlatb43;
  if (x_3683) {
    let x_3688 : f32 = u_xlat1.x;
    x_3684 = x_3688;
  } else {
    x_3684 = 1.0f;
  }
  let x_3690 : f32 = x_3684;
  SV_Target0.w = x_3690;
  let x_3696 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_3698 : f32 = x_1592.unity_RenderingLayer.x;
  u_xlatu0 = (x_3696 & bitcast<u32>(x_3698));
  let x_3701 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3701);
  let x_3706 : f32 = u_xlat0.x;
  let x_3708 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3706 * x_3708);
  let x_3712 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3712, 0.0f, 1.0f);
  let x_3716 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3716.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

