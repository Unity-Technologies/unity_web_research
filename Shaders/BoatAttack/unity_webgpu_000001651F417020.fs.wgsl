struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_NightFade : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(4) var Texture2D_52571568 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_52571568 : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_45 : PGlobals;

@group(0) @binding(6) var Texture2D_8BA53EED : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_8BA53EED : sampler;

@group(0) @binding(7) var Texture2D_AB84E4D0 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_AB84E4D0 : sampler;

@group(1) @binding(2) var<uniform> x_122 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_F0A81025 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_F0A81025 : sampler;

var<private> vs_INTERP2 : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_319 : MainLightShadows;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2261 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat2 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlatb45 : bool;
  var u_xlat3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat68 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlatb66 : bool;
  var u_xlat5 : vec3<f32>;
  var x_279 : f32;
  var x_291 : f32;
  var x_303 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlat25 : f32;
  var u_xlat69 : f32;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlat47 : f32;
  var u_xlatb70 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat72 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat29 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat74 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlatb48 : bool;
  var x_1914 : f32;
  var u_xlat26 : vec3<f32>;
  var u_xlat48 : f32;
  var u_xlat73 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati3 : i32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_40 : vec4<f32> = vs_INTERP3;
  let x_51 : f32 = x_45.x_GlobalMipBias.x;
  let x_52 : vec4<f32> = textureSampleBias(Texture2D_52571568, samplerTexture2D_52571568, vec2<f32>(x_40.x, x_40.y), x_51);
  u_xlat0 = vec3<f32>(x_52.x, x_52.y, x_52.z);
  let x_60 : vec4<f32> = vs_INTERP3;
  let x_63 : f32 = x_45.x_GlobalMipBias.x;
  let x_64 : vec4<f32> = textureSampleBias(Texture2D_8BA53EED, samplerTexture2D_8BA53EED, vec2<f32>(x_60.x, x_60.y), x_63);
  let x_65 : vec3<f32> = vec3<f32>(x_64.x, x_64.y, x_64.w);
  let x_66 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_65.x, x_65.y, x_65.z, x_66.w);
  let x_70 : f32 = u_xlat1.x;
  let x_73 : f32 = u_xlat1.z;
  u_xlat1.x = (x_70 * x_73);
  let x_76 : vec4<f32> = u_xlat1;
  let x_83 : vec2<f32> = ((vec2<f32>(x_76.x, x_76.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_84 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  let x_87 : vec4<f32> = u_xlat1;
  let x_89 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec2<f32>(x_87.x, x_87.y), vec2<f32>(x_89.x, x_89.y));
  let x_92 : f32 = u_xlat66;
  u_xlat66 = min(x_92, 1.0f);
  let x_94 : f32 = u_xlat66;
  u_xlat66 = (-(x_94) + 1.0f);
  let x_97 : f32 = u_xlat66;
  u_xlat66 = sqrt(x_97);
  let x_99 : f32 = u_xlat66;
  u_xlat66 = max(x_99, 1.00000002e-16f);
  let x_108 : vec4<f32> = vs_INTERP3;
  let x_111 : f32 = x_45.x_GlobalMipBias.x;
  let x_112 : vec4<f32> = textureSampleBias(Texture2D_AB84E4D0, samplerTexture2D_AB84E4D0, vec2<f32>(x_108.x, x_108.y), x_111);
  u_xlat2 = vec3<f32>(x_112.x, x_112.y, x_112.z);
  let x_114 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_114 * vec3<f32>(14.0f, 14.0f, 14.0f));
  let x_127 : vec4<f32> = x_122.unity_ObjectToWorld[3i];
  let x_130 : vec4<f32> = x_122.unity_ObjectToWorld[3i];
  u_xlat45 = dot(vec3<f32>(x_127.x, x_127.y, x_127.z), vec3<f32>(x_130.x, x_130.y, x_130.z));
  let x_133 : f32 = u_xlat45;
  u_xlat45 = sqrt(x_133);
  let x_135 : f32 = u_xlat45;
  u_xlat45 = fract(x_135);
  let x_137 : f32 = u_xlat45;
  let x_140 : f32 = x_45.x_NightFade;
  u_xlat45 = (x_137 + x_140);
  let x_145 : f32 = u_xlat45;
  u_xlatb45 = (x_145 >= 1.0f);
  let x_147 : bool = u_xlatb45;
  u_xlat45 = select(0.0f, 1.0f, x_147);
  let x_156 : vec4<f32> = vs_INTERP3;
  let x_159 : f32 = x_45.x_GlobalMipBias.x;
  let x_160 : vec4<f32> = textureSampleBias(Texture2D_F0A81025, samplerTexture2D_F0A81025, vec2<f32>(x_156.x, x_156.y), x_159);
  u_xlat3 = vec3<f32>(x_160.x, x_160.w, x_160.y);
  let x_165 : f32 = vs_INTERP2.w;
  u_xlatb67 = (0.0f < x_165);
  let x_168 : bool = u_xlatb67;
  u_xlat67 = select(-1.0f, 1.0f, x_168);
  let x_172 : f32 = x_122.unity_WorldTransformParams.w;
  u_xlatb68 = (x_172 >= 0.0f);
  let x_175 : bool = u_xlatb68;
  u_xlat68 = select(-1.0f, 1.0f, x_175);
  let x_177 : f32 = u_xlat67;
  let x_178 : f32 = u_xlat68;
  u_xlat67 = (x_177 * x_178);
  let x_183 : vec3<f32> = vs_INTERP1;
  let x_185 : vec4<f32> = vs_INTERP2;
  let x_187 : vec3<f32> = (vec3<f32>(x_183.z, x_183.x, x_183.y) * vec3<f32>(x_185.y, x_185.z, x_185.x));
  let x_188 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_187.x, x_187.y, x_187.z, x_188.w);
  let x_190 : vec3<f32> = vs_INTERP1;
  let x_192 : vec4<f32> = vs_INTERP2;
  let x_195 : vec4<f32> = u_xlat4;
  let x_198 : vec3<f32> = ((vec3<f32>(x_190.y, x_190.z, x_190.x) * vec3<f32>(x_192.z, x_192.x, x_192.y)) + -(vec3<f32>(x_195.x, x_195.y, x_195.z)));
  let x_199 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_198.x, x_198.y, x_198.z, x_199.w);
  let x_201 : f32 = u_xlat67;
  let x_203 : vec4<f32> = u_xlat4;
  let x_205 : vec3<f32> = (vec3<f32>(x_201, x_201, x_201) * vec3<f32>(x_203.x, x_203.y, x_203.z));
  let x_206 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_205.x, x_205.y, x_205.z, x_206.w);
  let x_208 : vec4<f32> = u_xlat1;
  let x_210 : vec4<f32> = u_xlat4;
  let x_212 : vec3<f32> = (vec3<f32>(x_208.y, x_208.y, x_208.y) * vec3<f32>(x_210.x, x_210.y, x_210.z));
  let x_213 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_212.x, x_212.y, x_212.z, x_213.w);
  let x_215 : vec4<f32> = u_xlat1;
  let x_217 : vec4<f32> = vs_INTERP2;
  let x_220 : vec4<f32> = u_xlat4;
  let x_222 : vec3<f32> = ((vec3<f32>(x_215.x, x_215.x, x_215.x) * vec3<f32>(x_217.x, x_217.y, x_217.z)) + vec3<f32>(x_220.x, x_220.y, x_220.z));
  let x_223 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_222.x, x_222.y, x_223.z, x_222.z);
  let x_225 : f32 = u_xlat66;
  let x_227 : vec3<f32> = vs_INTERP1;
  let x_229 : vec4<f32> = u_xlat1;
  let x_231 : vec3<f32> = ((vec3<f32>(x_225, x_225, x_225) * x_227) + vec3<f32>(x_229.x, x_229.y, x_229.w));
  let x_232 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_231.x, x_231.y, x_232.z, x_231.z);
  let x_234 : vec4<f32> = u_xlat1;
  let x_236 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec3<f32>(x_234.x, x_234.y, x_234.w), vec3<f32>(x_236.x, x_236.y, x_236.w));
  let x_239 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_239);
  let x_241 : f32 = u_xlat66;
  let x_243 : vec4<f32> = u_xlat1;
  let x_245 : vec3<f32> = (vec3<f32>(x_241, x_241, x_241) * vec3<f32>(x_243.x, x_243.y, x_243.w));
  let x_246 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_245.x, x_245.y, x_246.z, x_245.z);
  let x_251 : f32 = x_45.unity_OrthoParams.w;
  u_xlatb66 = (x_251 == 0.0f);
  let x_254 : vec3<f32> = vs_INTERP0;
  let x_259 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  let x_260 : vec3<f32> = (-(x_254) + x_259);
  let x_261 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec4<f32> = u_xlat4;
  let x_265 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(vec3<f32>(x_263.x, x_263.y, x_263.z), vec3<f32>(x_265.x, x_265.y, x_265.z));
  let x_268 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_268);
  let x_270 : f32 = u_xlat68;
  let x_272 : vec4<f32> = u_xlat4;
  let x_274 : vec3<f32> = (vec3<f32>(x_270, x_270, x_270) * vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_278 : bool = u_xlatb66;
  if (x_278) {
    let x_283 : f32 = u_xlat4.x;
    x_279 = x_283;
  } else {
    let x_287 : f32 = x_45.unity_MatrixV[0i].z;
    x_279 = x_287;
  }
  let x_288 : f32 = x_279;
  u_xlat5.x = x_288;
  let x_290 : bool = u_xlatb66;
  if (x_290) {
    let x_296 : f32 = u_xlat4.y;
    x_291 = x_296;
  } else {
    let x_299 : f32 = x_45.unity_MatrixV[1i].z;
    x_291 = x_299;
  }
  let x_300 : f32 = x_291;
  u_xlat5.y = x_300;
  let x_302 : bool = u_xlatb66;
  if (x_302) {
    let x_307 : f32 = u_xlat4.z;
    x_303 = x_307;
  } else {
    let x_311 : f32 = x_45.unity_MatrixV[2i].z;
    x_303 = x_311;
  }
  let x_312 : f32 = x_303;
  u_xlat5.z = x_312;
  let x_314 : vec3<f32> = vs_INTERP0;
  let x_321 : vec4<f32> = x_319.x_CascadeShadowSplitSpheres0;
  let x_324 : vec3<f32> = (x_314 + -(vec3<f32>(x_321.x, x_321.y, x_321.z)));
  let x_325 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_324.x, x_324.y, x_324.z, x_325.w);
  let x_328 : vec3<f32> = vs_INTERP0;
  let x_330 : vec4<f32> = x_319.x_CascadeShadowSplitSpheres1;
  let x_333 : vec3<f32> = (x_328 + -(vec3<f32>(x_330.x, x_330.y, x_330.z)));
  let x_334 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_333.x, x_333.y, x_333.z, x_334.w);
  let x_337 : vec3<f32> = vs_INTERP0;
  let x_339 : vec4<f32> = x_319.x_CascadeShadowSplitSpheres2;
  let x_342 : vec3<f32> = (x_337 + -(vec3<f32>(x_339.x, x_339.y, x_339.z)));
  let x_343 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_342.x, x_342.y, x_342.z, x_343.w);
  let x_346 : vec3<f32> = vs_INTERP0;
  let x_349 : vec4<f32> = x_319.x_CascadeShadowSplitSpheres3;
  u_xlat8 = (x_346 + -(vec3<f32>(x_349.x, x_349.y, x_349.z)));
  let x_353 : vec4<f32> = u_xlat4;
  let x_355 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_353.x, x_353.y, x_353.z), vec3<f32>(x_355.x, x_355.y, x_355.z));
  let x_359 : vec4<f32> = u_xlat6;
  let x_361 : vec4<f32> = u_xlat6;
  u_xlat4.y = dot(vec3<f32>(x_359.x, x_359.y, x_359.z), vec3<f32>(x_361.x, x_361.y, x_361.z));
  let x_365 : vec4<f32> = u_xlat7;
  let x_367 : vec4<f32> = u_xlat7;
  u_xlat4.z = dot(vec3<f32>(x_365.x, x_365.y, x_365.z), vec3<f32>(x_367.x, x_367.y, x_367.z));
  let x_371 : vec3<f32> = u_xlat8;
  let x_372 : vec3<f32> = u_xlat8;
  u_xlat4.w = dot(x_371, x_372);
  let x_378 : vec4<f32> = u_xlat4;
  let x_381 : vec4<f32> = x_319.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_378 < x_381);
  let x_384 : bool = u_xlatb4.x;
  u_xlat6.x = select(0.0f, 1.0f, x_384);
  let x_388 : bool = u_xlatb4.y;
  u_xlat6.y = select(0.0f, 1.0f, x_388);
  let x_392 : bool = u_xlatb4.z;
  u_xlat6.z = select(0.0f, 1.0f, x_392);
  let x_396 : bool = u_xlatb4.w;
  u_xlat6.w = select(0.0f, 1.0f, x_396);
  let x_400 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_400);
  let x_405 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_405);
  let x_409 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_409);
  let x_412 : vec4<f32> = u_xlat4;
  let x_414 : vec4<f32> = u_xlat6;
  let x_416 : vec3<f32> = (vec3<f32>(x_412.x, x_412.y, x_412.z) + vec3<f32>(x_414.y, x_414.z, x_414.w));
  let x_417 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_416.x, x_416.y, x_416.z, x_417.w);
  let x_419 : vec4<f32> = u_xlat4;
  let x_422 : vec3<f32> = max(vec3<f32>(x_419.x, x_419.y, x_419.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_423 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_423.x, x_422.x, x_422.y, x_422.z);
  let x_425 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_425, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_430 : f32 = u_xlat66;
  u_xlat66 = (-(x_430) + 4.0f);
  let x_435 : f32 = u_xlat66;
  u_xlatu66 = u32(x_435);
  let x_439 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_439) << bitcast<u32>(2i));
  let x_442 : vec3<f32> = vs_INTERP0;
  let x_444 : i32 = u_xlati66;
  let x_447 : i32 = u_xlati66;
  let x_451 : vec4<f32> = x_319.x_MainLightWorldToShadow[((x_444 + 1i) / 4i)][((x_447 + 1i) % 4i)];
  let x_453 : vec3<f32> = (vec3<f32>(x_442.y, x_442.y, x_442.y) * vec3<f32>(x_451.x, x_451.y, x_451.z));
  let x_454 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_453.x, x_453.y, x_453.z, x_454.w);
  let x_456 : i32 = u_xlati66;
  let x_458 : i32 = u_xlati66;
  let x_461 : vec4<f32> = x_319.x_MainLightWorldToShadow[(x_456 / 4i)][(x_458 % 4i)];
  let x_463 : vec3<f32> = vs_INTERP0;
  let x_466 : vec4<f32> = u_xlat4;
  let x_468 : vec3<f32> = ((vec3<f32>(x_461.x, x_461.y, x_461.z) * vec3<f32>(x_463.x, x_463.x, x_463.x)) + vec3<f32>(x_466.x, x_466.y, x_466.z));
  let x_469 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
  let x_471 : i32 = u_xlati66;
  let x_474 : i32 = u_xlati66;
  let x_478 : vec4<f32> = x_319.x_MainLightWorldToShadow[((x_471 + 2i) / 4i)][((x_474 + 2i) % 4i)];
  let x_480 : vec3<f32> = vs_INTERP0;
  let x_483 : vec4<f32> = u_xlat4;
  let x_485 : vec3<f32> = ((vec3<f32>(x_478.x, x_478.y, x_478.z) * vec3<f32>(x_480.z, x_480.z, x_480.z)) + vec3<f32>(x_483.x, x_483.y, x_483.z));
  let x_486 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_485.x, x_485.y, x_485.z, x_486.w);
  let x_488 : vec4<f32> = u_xlat4;
  let x_490 : i32 = u_xlati66;
  let x_493 : i32 = u_xlati66;
  let x_497 : vec4<f32> = x_319.x_MainLightWorldToShadow[((x_490 + 3i) / 4i)][((x_493 + 3i) % 4i)];
  let x_499 : vec3<f32> = (vec3<f32>(x_488.x, x_488.y, x_488.z) + vec3<f32>(x_497.x, x_497.y, x_497.z));
  let x_500 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_499.x, x_499.y, x_499.z, x_500.w);
  let x_509 : vec2<f32> = vs_INTERP4;
  let x_511 : f32 = x_45.x_GlobalMipBias.x;
  let x_512 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_509, x_511);
  let x_513 : vec3<f32> = vec3<f32>(x_512.x, x_512.y, x_512.z);
  let x_514 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_513.x, x_513.y, x_513.z, x_514.w);
  let x_518 : vec4<f32> = x_45.x_ScaledScreenParams;
  let x_519 : vec2<f32> = vec2<f32>(x_518.x, x_518.y);
  let x_523 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_519.x, x_519.y));
  let x_524 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_523.x, x_523.y, x_524.z, x_524.w);
  let x_526 : vec4<f32> = u_xlat7;
  let x_528 : vec4<f32> = hlslcc_FragCoord;
  let x_530 : vec2<f32> = (vec2<f32>(x_526.x, x_526.y) * vec2<f32>(x_528.x, x_528.y));
  let x_531 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_530.x, x_530.y, x_531.z, x_531.w);
  let x_534 : f32 = u_xlat7.y;
  let x_537 : f32 = x_45.x_ScaleBiasRt.x;
  let x_540 : f32 = x_45.x_ScaleBiasRt.y;
  u_xlat66 = ((x_534 * x_537) + x_540);
  let x_542 : f32 = u_xlat66;
  u_xlat7.z = (-(x_542) + 1.0f);
  let x_546 : vec3<f32> = u_xlat3;
  let x_547 : vec2<f32> = vec2<f32>(x_546.x, x_546.y);
  let x_548 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_547.x, x_547.y, x_548.z);
  let x_550 : vec3<f32> = u_xlat3;
  let x_554 : vec2<f32> = clamp(vec2<f32>(x_550.x, x_550.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_555 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_554.x, x_554.y, x_555.z);
  let x_558 : f32 = u_xlat3.x;
  u_xlat66 = ((-(x_558) * 0.959999979f) + 0.959999979f);
  let x_563 : f32 = u_xlat66;
  let x_566 : f32 = u_xlat3.y;
  u_xlat68 = (-(x_563) + x_566);
  let x_568 : f32 = u_xlat66;
  let x_570 : vec3<f32> = u_xlat0;
  u_xlat8 = (vec3<f32>(x_568, x_568, x_568) * x_570);
  let x_572 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_572 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_576 : vec3<f32> = u_xlat3;
  let x_578 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_576.x, x_576.x, x_576.x) * x_578) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_584 : f32 = u_xlat3.y;
  u_xlat66 = (-(x_584) + 1.0f);
  let x_587 : f32 = u_xlat66;
  let x_588 : f32 = u_xlat66;
  u_xlat3.x = (x_587 * x_588);
  let x_592 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_592, 0.0078125f);
  let x_598 : f32 = u_xlat3.x;
  let x_600 : f32 = u_xlat3.x;
  u_xlat25 = (x_598 * x_600);
  let x_602 : f32 = u_xlat68;
  u_xlat68 = (x_602 + 1.0f);
  let x_604 : f32 = u_xlat68;
  u_xlat68 = min(x_604, 1.0f);
  let x_608 : f32 = u_xlat3.x;
  u_xlat69 = ((x_608 * 4.0f) + 2.0f);
  let x_617 : vec4<f32> = u_xlat7;
  let x_620 : f32 = x_45.x_GlobalMipBias.x;
  let x_621 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_617.x, x_617.z), x_620);
  u_xlat70 = x_621.x;
  let x_624 : f32 = u_xlat70;
  u_xlat71 = (x_624 + -1.0f);
  let x_627 : f32 = x_45.x_AmbientOcclusionParam.w;
  let x_628 : f32 = u_xlat71;
  u_xlat71 = ((x_627 * x_628) + 1.0f);
  let x_633 : f32 = u_xlat3.z;
  let x_634 : f32 = u_xlat70;
  u_xlat47 = min(x_633, x_634);
  let x_638 : f32 = x_319.x_MainLightShadowParams.y;
  u_xlatb70 = (0.0f < x_638);
  let x_640 : bool = u_xlatb70;
  if (x_640) {
    let x_644 : f32 = x_319.x_MainLightShadowParams.y;
    u_xlatb70 = (x_644 == 1.0f);
    let x_646 : bool = u_xlatb70;
    if (x_646) {
      let x_649 : vec4<f32> = u_xlat4;
      let x_653 : vec4<f32> = x_319.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_649.x, x_649.y, x_649.x, x_649.y) + x_653);
      let x_656 : vec4<f32> = u_xlat7;
      let x_657 : vec2<f32> = vec2<f32>(x_656.x, x_656.y);
      let x_659 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_657.x, x_657.y, x_659);
      let x_672 : vec3<f32> = txVec0;
      let x_674 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_672.xy, x_672.z);
      u_xlat9.x = x_674;
      let x_677 : vec4<f32> = u_xlat7;
      let x_678 : vec2<f32> = vec2<f32>(x_677.z, x_677.w);
      let x_680 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_678.x, x_678.y, x_680);
      let x_687 : vec3<f32> = txVec1;
      let x_689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_687.xy, x_687.z);
      u_xlat9.y = x_689;
      let x_691 : vec4<f32> = u_xlat4;
      let x_695 : vec4<f32> = x_319.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_691.x, x_691.y, x_691.x, x_691.y) + x_695);
      let x_698 : vec4<f32> = u_xlat7;
      let x_699 : vec2<f32> = vec2<f32>(x_698.x, x_698.y);
      let x_701 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_699.x, x_699.y, x_701);
      let x_708 : vec3<f32> = txVec2;
      let x_710 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_708.xy, x_708.z);
      u_xlat9.z = x_710;
      let x_713 : vec4<f32> = u_xlat7;
      let x_714 : vec2<f32> = vec2<f32>(x_713.z, x_713.w);
      let x_716 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_714.x, x_714.y, x_716);
      let x_723 : vec3<f32> = txVec3;
      let x_725 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_723.xy, x_723.z);
      u_xlat9.w = x_725;
      let x_727 : vec4<f32> = u_xlat9;
      u_xlat70 = dot(x_727, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_734 : f32 = x_319.x_MainLightShadowParams.y;
      u_xlatb72 = (x_734 == 2.0f);
      let x_736 : bool = u_xlatb72;
      if (x_736) {
        let x_739 : vec4<f32> = u_xlat4;
        let x_742 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_747 : vec2<f32> = ((vec2<f32>(x_739.x, x_739.y) * vec2<f32>(x_742.z, x_742.w)) + vec2<f32>(0.5f, 0.5f));
        let x_748 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
        let x_750 : vec4<f32> = u_xlat7;
        let x_752 : vec2<f32> = floor(vec2<f32>(x_750.x, x_750.y));
        let x_753 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_752.x, x_752.y, x_753.z, x_753.w);
        let x_757 : vec4<f32> = u_xlat4;
        let x_760 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_760.z, x_760.w)) + -(vec2<f32>(x_763.x, x_763.y)));
        let x_767 : vec2<f32> = u_xlat51;
        u_xlat9 = (vec4<f32>(x_767.x, x_767.x, x_767.y, x_767.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_772 : vec4<f32> = u_xlat9;
        let x_774 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_772.x, x_772.x, x_772.z, x_772.z) * vec4<f32>(x_774.x, x_774.x, x_774.z, x_774.z));
        let x_777 : vec4<f32> = u_xlat10;
        let x_781 : vec2<f32> = (vec2<f32>(x_777.y, x_777.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_782 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_781.x, x_782.y, x_781.y, x_782.w);
        let x_784 : vec4<f32> = u_xlat10;
        let x_787 : vec2<f32> = u_xlat51;
        let x_789 : vec2<f32> = ((vec2<f32>(x_784.x, x_784.z) * vec2<f32>(0.5f, 0.5f)) + -(x_787));
        let x_790 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_789.x, x_789.y, x_790.z, x_790.w);
        let x_793 : vec2<f32> = u_xlat51;
        u_xlat54 = (-(x_793) + vec2<f32>(1.0f, 1.0f));
        let x_797 : vec2<f32> = u_xlat51;
        let x_799 : vec2<f32> = min(x_797, vec2<f32>(0.0f, 0.0f));
        let x_800 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_799.x, x_799.y, x_800.z, x_800.w);
        let x_802 : vec4<f32> = u_xlat11;
        let x_805 : vec4<f32> = u_xlat11;
        let x_808 : vec2<f32> = u_xlat54;
        let x_809 : vec2<f32> = ((-(vec2<f32>(x_802.x, x_802.y)) * vec2<f32>(x_805.x, x_805.y)) + x_808);
        let x_810 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_809.x, x_809.y, x_810.z, x_810.w);
        let x_812 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_812, vec2<f32>(0.0f, 0.0f));
        let x_814 : vec2<f32> = u_xlat51;
        let x_816 : vec2<f32> = u_xlat51;
        let x_818 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_814) * x_816) + vec2<f32>(x_818.y, x_818.w));
        let x_821 : vec4<f32> = u_xlat11;
        let x_823 : vec2<f32> = (vec2<f32>(x_821.x, x_821.y) + vec2<f32>(1.0f, 1.0f));
        let x_824 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_823.x, x_823.y, x_824.z, x_824.w);
        let x_826 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_826 + vec2<f32>(1.0f, 1.0f));
        let x_829 : vec4<f32> = u_xlat10;
        let x_833 : vec2<f32> = (vec2<f32>(x_829.x, x_829.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_834 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_833.x, x_833.y, x_834.z, x_834.w);
        let x_836 : vec2<f32> = u_xlat54;
        let x_837 : vec2<f32> = (x_836 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_838 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_837.x, x_837.y, x_838.z, x_838.w);
        let x_840 : vec4<f32> = u_xlat11;
        let x_842 : vec2<f32> = (vec2<f32>(x_840.x, x_840.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_843 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_842.x, x_842.y, x_843.z, x_843.w);
        let x_846 : vec2<f32> = u_xlat51;
        let x_847 : vec2<f32> = (x_846 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_848 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_847.x, x_847.y, x_848.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat9;
        u_xlat51 = (vec2<f32>(x_850.y, x_850.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_854 : f32 = u_xlat11.x;
        u_xlat12.z = x_854;
        let x_857 : f32 = u_xlat51.x;
        u_xlat12.w = x_857;
        let x_860 : f32 = u_xlat13.x;
        u_xlat10.z = x_860;
        let x_863 : f32 = u_xlat9.x;
        u_xlat10.w = x_863;
        let x_866 : vec4<f32> = u_xlat10;
        let x_868 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_866.z, x_866.w, x_866.x, x_866.z) + vec4<f32>(x_868.z, x_868.w, x_868.x, x_868.z));
        let x_872 : f32 = u_xlat12.y;
        u_xlat11.z = x_872;
        let x_875 : f32 = u_xlat51.y;
        u_xlat11.w = x_875;
        let x_878 : f32 = u_xlat10.y;
        u_xlat13.z = x_878;
        let x_881 : f32 = u_xlat9.z;
        u_xlat13.w = x_881;
        let x_883 : vec4<f32> = u_xlat11;
        let x_885 : vec4<f32> = u_xlat13;
        let x_887 : vec3<f32> = (vec3<f32>(x_883.z, x_883.y, x_883.w) + vec3<f32>(x_885.z, x_885.y, x_885.w));
        let x_888 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_887.x, x_887.y, x_887.z, x_888.w);
        let x_890 : vec4<f32> = u_xlat10;
        let x_892 : vec4<f32> = u_xlat14;
        let x_894 : vec3<f32> = (vec3<f32>(x_890.x, x_890.z, x_890.w) / vec3<f32>(x_892.z, x_892.w, x_892.y));
        let x_895 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_894.x, x_894.y, x_894.z, x_895.w);
        let x_897 : vec4<f32> = u_xlat10;
        let x_903 : vec3<f32> = (vec3<f32>(x_897.x, x_897.y, x_897.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_904 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_903.x, x_903.y, x_903.z, x_904.w);
        let x_906 : vec4<f32> = u_xlat13;
        let x_908 : vec4<f32> = u_xlat9;
        let x_910 : vec3<f32> = (vec3<f32>(x_906.z, x_906.y, x_906.w) / vec3<f32>(x_908.x, x_908.y, x_908.z));
        let x_911 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_910.x, x_910.y, x_910.z, x_911.w);
        let x_913 : vec4<f32> = u_xlat11;
        let x_915 : vec3<f32> = (vec3<f32>(x_913.x, x_913.y, x_913.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_916 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_915.x, x_915.y, x_915.z, x_916.w);
        let x_918 : vec4<f32> = u_xlat10;
        let x_921 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_923 : vec3<f32> = (vec3<f32>(x_918.y, x_918.x, x_918.z) * vec3<f32>(x_921.x, x_921.x, x_921.x));
        let x_924 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_923.x, x_923.y, x_923.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat11;
        let x_929 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_931 : vec3<f32> = (vec3<f32>(x_926.x, x_926.y, x_926.z) * vec3<f32>(x_929.y, x_929.y, x_929.y));
        let x_932 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_931.x, x_931.y, x_931.z, x_932.w);
        let x_935 : f32 = u_xlat11.x;
        u_xlat10.w = x_935;
        let x_937 : vec4<f32> = u_xlat7;
        let x_940 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_943 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_937.x, x_937.y, x_937.x, x_937.y) * vec4<f32>(x_940.x, x_940.y, x_940.x, x_940.y)) + vec4<f32>(x_943.y, x_943.w, x_943.x, x_943.w));
        let x_946 : vec4<f32> = u_xlat7;
        let x_949 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_952 : vec4<f32> = u_xlat10;
        u_xlat51 = ((vec2<f32>(x_946.x, x_946.y) * vec2<f32>(x_949.x, x_949.y)) + vec2<f32>(x_952.z, x_952.w));
        let x_956 : f32 = u_xlat10.y;
        u_xlat11.w = x_956;
        let x_958 : vec4<f32> = u_xlat11;
        let x_959 : vec2<f32> = vec2<f32>(x_958.y, x_958.z);
        let x_960 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_960.x, x_959.x, x_960.z, x_959.y);
        let x_962 : vec4<f32> = u_xlat7;
        let x_965 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_968 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_962.x, x_962.y, x_962.x, x_962.y) * vec4<f32>(x_965.x, x_965.y, x_965.x, x_965.y)) + vec4<f32>(x_968.x, x_968.y, x_968.z, x_968.y));
        let x_971 : vec4<f32> = u_xlat7;
        let x_974 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_977 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_971.x, x_971.y, x_971.x, x_971.y) * vec4<f32>(x_974.x, x_974.y, x_974.x, x_974.y)) + vec4<f32>(x_977.w, x_977.y, x_977.w, x_977.z));
        let x_980 : vec4<f32> = u_xlat7;
        let x_983 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_986 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_980.x, x_980.y, x_980.x, x_980.y) * vec4<f32>(x_983.x, x_983.y, x_983.x, x_983.y)) + vec4<f32>(x_986.x, x_986.w, x_986.z, x_986.w));
        let x_990 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_990.x, x_990.x, x_990.x, x_990.y) * vec4<f32>(x_992.z, x_992.w, x_992.y, x_992.z));
        let x_996 : vec4<f32> = u_xlat9;
        let x_998 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_996.y, x_996.y, x_996.z, x_996.z) * x_998);
        let x_1002 : f32 = u_xlat9.z;
        let x_1004 : f32 = u_xlat14.y;
        u_xlat72 = (x_1002 * x_1004);
        let x_1007 : vec4<f32> = u_xlat12;
        let x_1008 : vec2<f32> = vec2<f32>(x_1007.x, x_1007.y);
        let x_1010 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_1008.x, x_1008.y, x_1010);
        let x_1017 : vec3<f32> = txVec4;
        let x_1019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1017.xy, x_1017.z);
        u_xlat7.x = x_1019;
        let x_1022 : vec4<f32> = u_xlat12;
        let x_1023 : vec2<f32> = vec2<f32>(x_1022.z, x_1022.w);
        let x_1025 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_1023.x, x_1023.y, x_1025);
        let x_1033 : vec3<f32> = txVec5;
        let x_1035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1033.xy, x_1033.z);
        u_xlat29 = x_1035;
        let x_1036 : f32 = u_xlat29;
        let x_1038 : f32 = u_xlat15.y;
        u_xlat29 = (x_1036 * x_1038);
        let x_1041 : f32 = u_xlat15.x;
        let x_1043 : f32 = u_xlat7.x;
        let x_1045 : f32 = u_xlat29;
        u_xlat7.x = ((x_1041 * x_1043) + x_1045);
        let x_1049 : vec2<f32> = u_xlat51;
        let x_1051 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_1049.x, x_1049.y, x_1051);
        let x_1058 : vec3<f32> = txVec6;
        let x_1060 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1058.xy, x_1058.z);
        u_xlat29 = x_1060;
        let x_1062 : f32 = u_xlat15.z;
        let x_1063 : f32 = u_xlat29;
        let x_1066 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1062 * x_1063) + x_1066);
        let x_1070 : vec4<f32> = u_xlat11;
        let x_1071 : vec2<f32> = vec2<f32>(x_1070.x, x_1070.y);
        let x_1073 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_1071.x, x_1071.y, x_1073);
        let x_1080 : vec3<f32> = txVec7;
        let x_1082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1080.xy, x_1080.z);
        u_xlat29 = x_1082;
        let x_1084 : f32 = u_xlat15.w;
        let x_1085 : f32 = u_xlat29;
        let x_1088 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1084 * x_1085) + x_1088);
        let x_1092 : vec4<f32> = u_xlat13;
        let x_1093 : vec2<f32> = vec2<f32>(x_1092.x, x_1092.y);
        let x_1095 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_1093.x, x_1093.y, x_1095);
        let x_1102 : vec3<f32> = txVec8;
        let x_1104 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1102.xy, x_1102.z);
        u_xlat29 = x_1104;
        let x_1106 : f32 = u_xlat16.x;
        let x_1107 : f32 = u_xlat29;
        let x_1110 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1106 * x_1107) + x_1110);
        let x_1114 : vec4<f32> = u_xlat13;
        let x_1115 : vec2<f32> = vec2<f32>(x_1114.z, x_1114.w);
        let x_1117 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_1115.x, x_1115.y, x_1117);
        let x_1124 : vec3<f32> = txVec9;
        let x_1126 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1124.xy, x_1124.z);
        u_xlat29 = x_1126;
        let x_1128 : f32 = u_xlat16.y;
        let x_1129 : f32 = u_xlat29;
        let x_1132 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1128 * x_1129) + x_1132);
        let x_1136 : vec4<f32> = u_xlat11;
        let x_1137 : vec2<f32> = vec2<f32>(x_1136.z, x_1136.w);
        let x_1139 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_1137.x, x_1137.y, x_1139);
        let x_1146 : vec3<f32> = txVec10;
        let x_1148 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1146.xy, x_1146.z);
        u_xlat29 = x_1148;
        let x_1150 : f32 = u_xlat16.z;
        let x_1151 : f32 = u_xlat29;
        let x_1154 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1150 * x_1151) + x_1154);
        let x_1158 : vec4<f32> = u_xlat10;
        let x_1159 : vec2<f32> = vec2<f32>(x_1158.x, x_1158.y);
        let x_1161 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_1159.x, x_1159.y, x_1161);
        let x_1168 : vec3<f32> = txVec11;
        let x_1170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1168.xy, x_1168.z);
        u_xlat29 = x_1170;
        let x_1172 : f32 = u_xlat16.w;
        let x_1173 : f32 = u_xlat29;
        let x_1176 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1172 * x_1173) + x_1176);
        let x_1180 : vec4<f32> = u_xlat10;
        let x_1181 : vec2<f32> = vec2<f32>(x_1180.z, x_1180.w);
        let x_1183 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_1181.x, x_1181.y, x_1183);
        let x_1190 : vec3<f32> = txVec12;
        let x_1192 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1190.xy, x_1190.z);
        u_xlat29 = x_1192;
        let x_1193 : f32 = u_xlat72;
        let x_1194 : f32 = u_xlat29;
        let x_1197 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1193 * x_1194) + x_1197);
      } else {
        let x_1200 : vec4<f32> = u_xlat4;
        let x_1203 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1206 : vec2<f32> = ((vec2<f32>(x_1200.x, x_1200.y) * vec2<f32>(x_1203.z, x_1203.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1207 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1206.x, x_1206.y, x_1207.z, x_1207.w);
        let x_1209 : vec4<f32> = u_xlat7;
        let x_1211 : vec2<f32> = floor(vec2<f32>(x_1209.x, x_1209.y));
        let x_1212 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1211.x, x_1211.y, x_1212.z, x_1212.w);
        let x_1214 : vec4<f32> = u_xlat4;
        let x_1217 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1220 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1214.x, x_1214.y) * vec2<f32>(x_1217.z, x_1217.w)) + -(vec2<f32>(x_1220.x, x_1220.y)));
        let x_1224 : vec2<f32> = u_xlat51;
        u_xlat9 = (vec4<f32>(x_1224.x, x_1224.x, x_1224.y, x_1224.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1227 : vec4<f32> = u_xlat9;
        let x_1229 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1227.x, x_1227.x, x_1227.z, x_1227.z) * vec4<f32>(x_1229.x, x_1229.x, x_1229.z, x_1229.z));
        let x_1232 : vec4<f32> = u_xlat10;
        let x_1236 : vec2<f32> = (vec2<f32>(x_1232.y, x_1232.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1237 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1237.x, x_1236.x, x_1237.z, x_1236.y);
        let x_1239 : vec4<f32> = u_xlat10;
        let x_1242 : vec2<f32> = u_xlat51;
        let x_1244 : vec2<f32> = ((vec2<f32>(x_1239.x, x_1239.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1242));
        let x_1245 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1244.x, x_1245.y, x_1244.y, x_1245.w);
        let x_1247 : vec2<f32> = u_xlat51;
        let x_1249 : vec2<f32> = (-(x_1247) + vec2<f32>(1.0f, 1.0f));
        let x_1250 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1249.x, x_1249.y, x_1250.z, x_1250.w);
        let x_1252 : vec2<f32> = u_xlat51;
        u_xlat54 = min(x_1252, vec2<f32>(0.0f, 0.0f));
        let x_1254 : vec2<f32> = u_xlat54;
        let x_1256 : vec2<f32> = u_xlat54;
        let x_1258 : vec4<f32> = u_xlat10;
        let x_1260 : vec2<f32> = ((-(x_1254) * x_1256) + vec2<f32>(x_1258.x, x_1258.y));
        let x_1261 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1260.x, x_1260.y, x_1261.z, x_1261.w);
        let x_1263 : vec2<f32> = u_xlat51;
        u_xlat54 = max(x_1263, vec2<f32>(0.0f, 0.0f));
        let x_1266 : vec2<f32> = u_xlat54;
        let x_1268 : vec2<f32> = u_xlat54;
        let x_1270 : vec4<f32> = u_xlat9;
        let x_1272 : vec2<f32> = ((-(x_1266) * x_1268) + vec2<f32>(x_1270.y, x_1270.w));
        let x_1273 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1272.x, x_1273.y, x_1272.y);
        let x_1275 : vec4<f32> = u_xlat10;
        let x_1277 : vec2<f32> = (vec2<f32>(x_1275.x, x_1275.y) + vec2<f32>(2.0f, 2.0f));
        let x_1278 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1277.x, x_1277.y, x_1278.z, x_1278.w);
        let x_1280 : vec3<f32> = u_xlat31;
        let x_1282 : vec2<f32> = (vec2<f32>(x_1280.x, x_1280.z) + vec2<f32>(2.0f, 2.0f));
        let x_1283 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1283.x, x_1282.x, x_1283.z, x_1282.y);
        let x_1286 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1286 * 0.081632003f);
        let x_1290 : vec4<f32> = u_xlat9;
        let x_1293 : vec3<f32> = (vec3<f32>(x_1290.z, x_1290.x, x_1290.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1294 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1293.x, x_1293.y, x_1293.z, x_1294.w);
        let x_1296 : vec4<f32> = u_xlat10;
        let x_1299 : vec2<f32> = (vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1300 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1299.x, x_1299.y, x_1300.z, x_1300.w);
        let x_1303 : f32 = u_xlat13.y;
        u_xlat12.x = x_1303;
        let x_1305 : vec2<f32> = u_xlat51;
        let x_1312 : vec2<f32> = ((vec2<f32>(x_1305.x, x_1305.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1313 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1313.x, x_1312.x, x_1313.z, x_1312.y);
        let x_1315 : vec2<f32> = u_xlat51;
        let x_1319 : vec2<f32> = ((vec2<f32>(x_1315.x, x_1315.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1320 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1319.x, x_1320.y, x_1319.y, x_1320.w);
        let x_1323 : f32 = u_xlat9.x;
        u_xlat10.y = x_1323;
        let x_1326 : f32 = u_xlat11.y;
        u_xlat10.w = x_1326;
        let x_1328 : vec4<f32> = u_xlat10;
        let x_1329 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1328 + x_1329);
        let x_1331 : vec2<f32> = u_xlat51;
        let x_1334 : vec2<f32> = ((vec2<f32>(x_1331.y, x_1331.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1335 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1335.x, x_1334.x, x_1335.z, x_1334.y);
        let x_1337 : vec2<f32> = u_xlat51;
        let x_1340 : vec2<f32> = ((vec2<f32>(x_1337.y, x_1337.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1341 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1340.x, x_1341.y, x_1340.y, x_1341.w);
        let x_1344 : f32 = u_xlat9.y;
        u_xlat11.y = x_1344;
        let x_1346 : vec4<f32> = u_xlat11;
        let x_1347 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1346 + x_1347);
        let x_1349 : vec4<f32> = u_xlat10;
        let x_1350 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1349 / x_1350);
        let x_1352 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1352 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1358 : vec4<f32> = u_xlat11;
        let x_1359 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1358 / x_1359);
        let x_1361 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1361 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1363 : vec4<f32> = u_xlat10;
        let x_1366 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1363.w, x_1363.x, x_1363.y, x_1363.z) * vec4<f32>(x_1366.x, x_1366.x, x_1366.x, x_1366.x));
        let x_1369 : vec4<f32> = u_xlat11;
        let x_1372 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1369.x, x_1369.w, x_1369.y, x_1369.z) * vec4<f32>(x_1372.y, x_1372.y, x_1372.y, x_1372.y));
        let x_1375 : vec4<f32> = u_xlat10;
        let x_1376 : vec3<f32> = vec3<f32>(x_1375.y, x_1375.z, x_1375.w);
        let x_1377 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1376.x, x_1377.y, x_1376.y, x_1376.z);
        let x_1380 : f32 = u_xlat11.x;
        u_xlat13.y = x_1380;
        let x_1382 : vec4<f32> = u_xlat7;
        let x_1385 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1388 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1382.x, x_1382.y, x_1382.x, x_1382.y) * vec4<f32>(x_1385.x, x_1385.y, x_1385.x, x_1385.y)) + vec4<f32>(x_1388.x, x_1388.y, x_1388.z, x_1388.y));
        let x_1391 : vec4<f32> = u_xlat7;
        let x_1394 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1397 : vec4<f32> = u_xlat13;
        u_xlat51 = ((vec2<f32>(x_1391.x, x_1391.y) * vec2<f32>(x_1394.x, x_1394.y)) + vec2<f32>(x_1397.w, x_1397.y));
        let x_1401 : f32 = u_xlat13.y;
        u_xlat10.y = x_1401;
        let x_1404 : f32 = u_xlat11.z;
        u_xlat13.y = x_1404;
        let x_1406 : vec4<f32> = u_xlat7;
        let x_1409 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1412 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1406.x, x_1406.y, x_1406.x, x_1406.y) * vec4<f32>(x_1409.x, x_1409.y, x_1409.x, x_1409.y)) + vec4<f32>(x_1412.x, x_1412.y, x_1412.z, x_1412.y));
        let x_1415 : vec4<f32> = u_xlat7;
        let x_1418 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1421 : vec4<f32> = u_xlat13;
        let x_1423 : vec2<f32> = ((vec2<f32>(x_1415.x, x_1415.y) * vec2<f32>(x_1418.x, x_1418.y)) + vec2<f32>(x_1421.w, x_1421.y));
        let x_1424 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1423.x, x_1423.y, x_1424.z, x_1424.w);
        let x_1427 : f32 = u_xlat13.y;
        u_xlat10.z = x_1427;
        let x_1430 : vec4<f32> = u_xlat7;
        let x_1433 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1436 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1430.x, x_1430.y, x_1430.x, x_1430.y) * vec4<f32>(x_1433.x, x_1433.y, x_1433.x, x_1433.y)) + vec4<f32>(x_1436.x, x_1436.y, x_1436.x, x_1436.z));
        let x_1440 : f32 = u_xlat11.w;
        u_xlat13.y = x_1440;
        let x_1443 : vec4<f32> = u_xlat7;
        let x_1446 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1449 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1443.x, x_1443.y, x_1443.x, x_1443.y) * vec4<f32>(x_1446.x, x_1446.y, x_1446.x, x_1446.y)) + vec4<f32>(x_1449.x, x_1449.y, x_1449.z, x_1449.y));
        let x_1453 : vec4<f32> = u_xlat7;
        let x_1456 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1459 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1453.x, x_1453.y) * vec2<f32>(x_1456.x, x_1456.y)) + vec2<f32>(x_1459.w, x_1459.y));
        let x_1463 : f32 = u_xlat13.y;
        u_xlat10.w = x_1463;
        let x_1466 : vec4<f32> = u_xlat7;
        let x_1469 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1472 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1466.x, x_1466.y) * vec2<f32>(x_1469.x, x_1469.y)) + vec2<f32>(x_1472.x, x_1472.w));
        let x_1475 : vec4<f32> = u_xlat13;
        let x_1476 : vec3<f32> = vec3<f32>(x_1475.x, x_1475.z, x_1475.w);
        let x_1477 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1476.x, x_1477.y, x_1476.y, x_1476.z);
        let x_1479 : vec4<f32> = u_xlat7;
        let x_1482 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1485 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1479.x, x_1479.y, x_1479.x, x_1479.y) * vec4<f32>(x_1482.x, x_1482.y, x_1482.x, x_1482.y)) + vec4<f32>(x_1485.x, x_1485.y, x_1485.z, x_1485.y));
        let x_1489 : vec4<f32> = u_xlat7;
        let x_1492 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1495 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1489.x, x_1489.y) * vec2<f32>(x_1492.x, x_1492.y)) + vec2<f32>(x_1495.w, x_1495.y));
        let x_1499 : f32 = u_xlat10.x;
        u_xlat11.x = x_1499;
        let x_1501 : vec4<f32> = u_xlat7;
        let x_1504 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1507 : vec4<f32> = u_xlat11;
        let x_1509 : vec2<f32> = ((vec2<f32>(x_1501.x, x_1501.y) * vec2<f32>(x_1504.x, x_1504.y)) + vec2<f32>(x_1507.x, x_1507.y));
        let x_1510 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1509.x, x_1509.y, x_1510.z, x_1510.w);
        let x_1513 : vec4<f32> = u_xlat9;
        let x_1515 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1513.x, x_1513.x, x_1513.x, x_1513.x) * x_1515);
        let x_1518 : vec4<f32> = u_xlat9;
        let x_1520 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1518.y, x_1518.y, x_1518.y, x_1518.y) * x_1520);
        let x_1523 : vec4<f32> = u_xlat9;
        let x_1525 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1523.z, x_1523.z, x_1523.z, x_1523.z) * x_1525);
        let x_1527 : vec4<f32> = u_xlat9;
        let x_1529 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1527.w, x_1527.w, x_1527.w, x_1527.w) * x_1529);
        let x_1532 : vec4<f32> = u_xlat14;
        let x_1533 : vec2<f32> = vec2<f32>(x_1532.x, x_1532.y);
        let x_1535 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1533.x, x_1533.y, x_1535);
        let x_1542 : vec3<f32> = txVec13;
        let x_1544 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1542.xy, x_1542.z);
        u_xlat72 = x_1544;
        let x_1546 : vec4<f32> = u_xlat14;
        let x_1547 : vec2<f32> = vec2<f32>(x_1546.z, x_1546.w);
        let x_1549 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1547.x, x_1547.y, x_1549);
        let x_1557 : vec3<f32> = txVec14;
        let x_1559 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1557.xy, x_1557.z);
        u_xlat74 = x_1559;
        let x_1560 : f32 = u_xlat74;
        let x_1562 : f32 = u_xlat19.y;
        u_xlat74 = (x_1560 * x_1562);
        let x_1565 : f32 = u_xlat19.x;
        let x_1566 : f32 = u_xlat72;
        let x_1568 : f32 = u_xlat74;
        u_xlat72 = ((x_1565 * x_1566) + x_1568);
        let x_1571 : vec2<f32> = u_xlat51;
        let x_1573 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1571.x, x_1571.y, x_1573);
        let x_1580 : vec3<f32> = txVec15;
        let x_1582 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1580.xy, x_1580.z);
        u_xlat51.x = x_1582;
        let x_1585 : f32 = u_xlat19.z;
        let x_1587 : f32 = u_xlat51.x;
        let x_1589 : f32 = u_xlat72;
        u_xlat72 = ((x_1585 * x_1587) + x_1589);
        let x_1592 : vec4<f32> = u_xlat17;
        let x_1593 : vec2<f32> = vec2<f32>(x_1592.x, x_1592.y);
        let x_1595 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1593.x, x_1593.y, x_1595);
        let x_1602 : vec3<f32> = txVec16;
        let x_1604 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1602.xy, x_1602.z);
        u_xlat51.x = x_1604;
        let x_1607 : f32 = u_xlat19.w;
        let x_1609 : f32 = u_xlat51.x;
        let x_1611 : f32 = u_xlat72;
        u_xlat72 = ((x_1607 * x_1609) + x_1611);
        let x_1614 : vec4<f32> = u_xlat15;
        let x_1615 : vec2<f32> = vec2<f32>(x_1614.x, x_1614.y);
        let x_1617 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1615.x, x_1615.y, x_1617);
        let x_1624 : vec3<f32> = txVec17;
        let x_1626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1624.xy, x_1624.z);
        u_xlat51.x = x_1626;
        let x_1629 : f32 = u_xlat20.x;
        let x_1631 : f32 = u_xlat51.x;
        let x_1633 : f32 = u_xlat72;
        u_xlat72 = ((x_1629 * x_1631) + x_1633);
        let x_1636 : vec4<f32> = u_xlat15;
        let x_1637 : vec2<f32> = vec2<f32>(x_1636.z, x_1636.w);
        let x_1639 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1637.x, x_1637.y, x_1639);
        let x_1646 : vec3<f32> = txVec18;
        let x_1648 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1646.xy, x_1646.z);
        u_xlat51.x = x_1648;
        let x_1651 : f32 = u_xlat20.y;
        let x_1653 : f32 = u_xlat51.x;
        let x_1655 : f32 = u_xlat72;
        u_xlat72 = ((x_1651 * x_1653) + x_1655);
        let x_1658 : vec4<f32> = u_xlat16;
        let x_1659 : vec2<f32> = vec2<f32>(x_1658.x, x_1658.y);
        let x_1661 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1659.x, x_1659.y, x_1661);
        let x_1668 : vec3<f32> = txVec19;
        let x_1670 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1668.xy, x_1668.z);
        u_xlat51.x = x_1670;
        let x_1673 : f32 = u_xlat20.z;
        let x_1675 : f32 = u_xlat51.x;
        let x_1677 : f32 = u_xlat72;
        u_xlat72 = ((x_1673 * x_1675) + x_1677);
        let x_1680 : vec4<f32> = u_xlat17;
        let x_1681 : vec2<f32> = vec2<f32>(x_1680.z, x_1680.w);
        let x_1683 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1681.x, x_1681.y, x_1683);
        let x_1690 : vec3<f32> = txVec20;
        let x_1692 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1690.xy, x_1690.z);
        u_xlat51.x = x_1692;
        let x_1695 : f32 = u_xlat20.w;
        let x_1697 : f32 = u_xlat51.x;
        let x_1699 : f32 = u_xlat72;
        u_xlat72 = ((x_1695 * x_1697) + x_1699);
        let x_1702 : vec4<f32> = u_xlat18;
        let x_1703 : vec2<f32> = vec2<f32>(x_1702.x, x_1702.y);
        let x_1705 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1703.x, x_1703.y, x_1705);
        let x_1712 : vec3<f32> = txVec21;
        let x_1714 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1712.xy, x_1712.z);
        u_xlat51.x = x_1714;
        let x_1717 : f32 = u_xlat21.x;
        let x_1719 : f32 = u_xlat51.x;
        let x_1721 : f32 = u_xlat72;
        u_xlat72 = ((x_1717 * x_1719) + x_1721);
        let x_1724 : vec4<f32> = u_xlat18;
        let x_1725 : vec2<f32> = vec2<f32>(x_1724.z, x_1724.w);
        let x_1727 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1725.x, x_1725.y, x_1727);
        let x_1734 : vec3<f32> = txVec22;
        let x_1736 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1734.xy, x_1734.z);
        u_xlat51.x = x_1736;
        let x_1739 : f32 = u_xlat21.y;
        let x_1741 : f32 = u_xlat51.x;
        let x_1743 : f32 = u_xlat72;
        u_xlat72 = ((x_1739 * x_1741) + x_1743);
        let x_1746 : vec2<f32> = u_xlat32;
        let x_1748 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1746.x, x_1746.y, x_1748);
        let x_1755 : vec3<f32> = txVec23;
        let x_1757 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1755.xy, x_1755.z);
        u_xlat51.x = x_1757;
        let x_1760 : f32 = u_xlat21.z;
        let x_1762 : f32 = u_xlat51.x;
        let x_1764 : f32 = u_xlat72;
        u_xlat72 = ((x_1760 * x_1762) + x_1764);
        let x_1767 : vec2<f32> = u_xlat60;
        let x_1769 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1767.x, x_1767.y, x_1769);
        let x_1776 : vec3<f32> = txVec24;
        let x_1778 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1776.xy, x_1776.z);
        u_xlat51.x = x_1778;
        let x_1781 : f32 = u_xlat21.w;
        let x_1783 : f32 = u_xlat51.x;
        let x_1785 : f32 = u_xlat72;
        u_xlat72 = ((x_1781 * x_1783) + x_1785);
        let x_1788 : vec4<f32> = u_xlat13;
        let x_1789 : vec2<f32> = vec2<f32>(x_1788.x, x_1788.y);
        let x_1791 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1789.x, x_1789.y, x_1791);
        let x_1798 : vec3<f32> = txVec25;
        let x_1800 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1798.xy, x_1798.z);
        u_xlat51.x = x_1800;
        let x_1803 : f32 = u_xlat9.x;
        let x_1805 : f32 = u_xlat51.x;
        let x_1807 : f32 = u_xlat72;
        u_xlat72 = ((x_1803 * x_1805) + x_1807);
        let x_1810 : vec4<f32> = u_xlat13;
        let x_1811 : vec2<f32> = vec2<f32>(x_1810.z, x_1810.w);
        let x_1813 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1811.x, x_1811.y, x_1813);
        let x_1820 : vec3<f32> = txVec26;
        let x_1822 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1820.xy, x_1820.z);
        u_xlat51.x = x_1822;
        let x_1825 : f32 = u_xlat9.y;
        let x_1827 : f32 = u_xlat51.x;
        let x_1829 : f32 = u_xlat72;
        u_xlat72 = ((x_1825 * x_1827) + x_1829);
        let x_1832 : vec2<f32> = u_xlat55;
        let x_1834 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1832.x, x_1832.y, x_1834);
        let x_1841 : vec3<f32> = txVec27;
        let x_1843 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1841.xy, x_1841.z);
        u_xlat51.x = x_1843;
        let x_1846 : f32 = u_xlat9.z;
        let x_1848 : f32 = u_xlat51.x;
        let x_1850 : f32 = u_xlat72;
        u_xlat72 = ((x_1846 * x_1848) + x_1850);
        let x_1853 : vec4<f32> = u_xlat7;
        let x_1854 : vec2<f32> = vec2<f32>(x_1853.x, x_1853.y);
        let x_1856 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1854.x, x_1854.y, x_1856);
        let x_1863 : vec3<f32> = txVec28;
        let x_1865 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1863.xy, x_1863.z);
        u_xlat7.x = x_1865;
        let x_1868 : f32 = u_xlat9.w;
        let x_1870 : f32 = u_xlat7.x;
        let x_1872 : f32 = u_xlat72;
        u_xlat70 = ((x_1868 * x_1870) + x_1872);
      }
    }
  } else {
    let x_1876 : vec4<f32> = u_xlat4;
    let x_1877 : vec2<f32> = vec2<f32>(x_1876.x, x_1876.y);
    let x_1879 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1877.x, x_1877.y, x_1879);
    let x_1886 : vec3<f32> = txVec29;
    let x_1888 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1886.xy, x_1886.z);
    u_xlat70 = x_1888;
  }
  let x_1890 : f32 = x_319.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1890) + 1.0f);
  let x_1894 : f32 = u_xlat70;
  let x_1896 : f32 = x_319.x_MainLightShadowParams.x;
  let x_1899 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_1894 * x_1896) + x_1899);
  let x_1904 : f32 = u_xlat4.z;
  u_xlatb26 = (0.0f >= x_1904);
  let x_1908 : f32 = u_xlat4.z;
  u_xlatb48 = (x_1908 >= 1.0f);
  let x_1910 : bool = u_xlatb48;
  let x_1911 : bool = u_xlatb26;
  u_xlatb26 = (x_1910 | x_1911);
  let x_1913 : bool = u_xlatb26;
  if (x_1913) {
    x_1914 = 1.0f;
  } else {
    let x_1919 : f32 = u_xlat4.x;
    x_1914 = x_1919;
  }
  let x_1920 : f32 = x_1914;
  u_xlat4.x = x_1920;
  let x_1923 : vec3<f32> = vs_INTERP0;
  let x_1925 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat26 = (x_1923 + -(x_1925));
  let x_1928 : vec3<f32> = u_xlat26;
  let x_1929 : vec3<f32> = u_xlat26;
  u_xlat26.x = dot(x_1928, x_1929);
  let x_1933 : f32 = u_xlat26.x;
  let x_1935 : f32 = x_319.x_MainLightShadowParams.z;
  let x_1938 : f32 = x_319.x_MainLightShadowParams.w;
  u_xlat26.x = ((x_1933 * x_1935) + x_1938);
  let x_1942 : f32 = u_xlat26.x;
  u_xlat26.x = clamp(x_1942, 0.0f, 1.0f);
  let x_1947 : f32 = u_xlat4.x;
  u_xlat48 = (-(x_1947) + 1.0f);
  let x_1951 : f32 = u_xlat26.x;
  let x_1952 : f32 = u_xlat48;
  let x_1955 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_1951 * x_1952) + x_1955);
  let x_1958 : f32 = u_xlat71;
  let x_1961 : vec4<f32> = x_45.x_MainLightColor;
  u_xlat26 = (vec3<f32>(x_1958, x_1958, x_1958) * vec3<f32>(x_1961.x, x_1961.y, x_1961.z));
  let x_1964 : vec3<f32> = u_xlat5;
  let x_1966 : vec4<f32> = u_xlat1;
  u_xlat72 = dot(-(x_1964), vec3<f32>(x_1966.x, x_1966.y, x_1966.w));
  let x_1969 : f32 = u_xlat72;
  let x_1970 : f32 = u_xlat72;
  u_xlat72 = (x_1969 + x_1970);
  let x_1972 : vec4<f32> = u_xlat1;
  let x_1974 : f32 = u_xlat72;
  let x_1978 : vec3<f32> = u_xlat5;
  let x_1980 : vec3<f32> = ((vec3<f32>(x_1972.x, x_1972.y, x_1972.w) * -(vec3<f32>(x_1974, x_1974, x_1974))) + -(x_1978));
  let x_1981 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1980.x, x_1980.y, x_1980.z, x_1981.w);
  let x_1983 : vec4<f32> = u_xlat1;
  let x_1985 : vec3<f32> = u_xlat5;
  u_xlat72 = dot(vec3<f32>(x_1983.x, x_1983.y, x_1983.w), x_1985);
  let x_1987 : f32 = u_xlat72;
  u_xlat72 = clamp(x_1987, 0.0f, 1.0f);
  let x_1989 : f32 = u_xlat72;
  u_xlat72 = (-(x_1989) + 1.0f);
  let x_1992 : f32 = u_xlat72;
  let x_1993 : f32 = u_xlat72;
  u_xlat72 = (x_1992 * x_1993);
  let x_1995 : f32 = u_xlat72;
  let x_1996 : f32 = u_xlat72;
  u_xlat72 = (x_1995 * x_1996);
  let x_1999 : f32 = u_xlat66;
  u_xlat73 = ((-(x_1999) * 0.699999988f) + 1.700000048f);
  let x_2005 : f32 = u_xlat66;
  let x_2006 : f32 = u_xlat73;
  u_xlat66 = (x_2005 * x_2006);
  let x_2008 : f32 = u_xlat66;
  u_xlat66 = (x_2008 * 6.0f);
  let x_2019 : vec4<f32> = u_xlat7;
  let x_2021 : f32 = u_xlat66;
  let x_2022 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2019.x, x_2019.y, x_2019.z), x_2021);
  u_xlat7 = x_2022;
  let x_2024 : f32 = u_xlat7.w;
  u_xlat66 = (x_2024 + -1.0f);
  let x_2027 : f32 = x_122.unity_SpecCube0_HDR.w;
  let x_2028 : f32 = u_xlat66;
  u_xlat66 = ((x_2027 * x_2028) + 1.0f);
  let x_2031 : f32 = u_xlat66;
  u_xlat66 = max(x_2031, 0.0f);
  let x_2033 : f32 = u_xlat66;
  u_xlat66 = log2(x_2033);
  let x_2035 : f32 = u_xlat66;
  let x_2037 : f32 = x_122.unity_SpecCube0_HDR.y;
  u_xlat66 = (x_2035 * x_2037);
  let x_2039 : f32 = u_xlat66;
  u_xlat66 = exp2(x_2039);
  let x_2041 : f32 = u_xlat66;
  let x_2043 : f32 = x_122.unity_SpecCube0_HDR.x;
  u_xlat66 = (x_2041 * x_2043);
  let x_2045 : vec4<f32> = u_xlat7;
  let x_2047 : f32 = u_xlat66;
  let x_2049 : vec3<f32> = (vec3<f32>(x_2045.x, x_2045.y, x_2045.z) * vec3<f32>(x_2047, x_2047, x_2047));
  let x_2050 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2049.x, x_2049.y, x_2049.z, x_2050.w);
  let x_2052 : vec3<f32> = u_xlat3;
  let x_2054 : vec3<f32> = u_xlat3;
  let x_2058 : vec2<f32> = ((vec2<f32>(x_2052.x, x_2052.x) * vec2<f32>(x_2054.x, x_2054.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2059 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2058.x, x_2058.y, x_2059.z, x_2059.w);
  let x_2062 : f32 = u_xlat9.y;
  u_xlat66 = (1.0f / x_2062);
  let x_2064 : vec3<f32> = u_xlat0;
  let x_2066 : f32 = u_xlat68;
  u_xlat31 = (-(x_2064) + vec3<f32>(x_2066, x_2066, x_2066));
  let x_2069 : f32 = u_xlat72;
  let x_2071 : vec3<f32> = u_xlat31;
  let x_2073 : vec3<f32> = u_xlat0;
  u_xlat31 = ((vec3<f32>(x_2069, x_2069, x_2069) * x_2071) + x_2073);
  let x_2075 : f32 = u_xlat66;
  let x_2077 : vec3<f32> = u_xlat31;
  u_xlat31 = (vec3<f32>(x_2075, x_2075, x_2075) * x_2077);
  let x_2079 : vec4<f32> = u_xlat7;
  let x_2081 : vec3<f32> = u_xlat31;
  let x_2082 : vec3<f32> = (vec3<f32>(x_2079.x, x_2079.y, x_2079.z) * x_2081);
  let x_2083 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2082.x, x_2082.y, x_2082.z, x_2083.w);
  let x_2085 : vec4<f32> = u_xlat6;
  let x_2087 : vec3<f32> = u_xlat8;
  let x_2089 : vec4<f32> = u_xlat7;
  let x_2091 : vec3<f32> = ((vec3<f32>(x_2085.x, x_2085.y, x_2085.z) * x_2087) + vec3<f32>(x_2089.x, x_2089.y, x_2089.z));
  let x_2092 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2091.x, x_2091.y, x_2091.z, x_2092.w);
  let x_2095 : f32 = u_xlat4.x;
  let x_2097 : f32 = x_122.unity_LightData.z;
  u_xlat66 = (x_2095 * x_2097);
  let x_2099 : vec4<f32> = u_xlat1;
  let x_2102 : vec4<f32> = x_45.x_MainLightPosition;
  u_xlat68 = dot(vec3<f32>(x_2099.x, x_2099.y, x_2099.w), vec3<f32>(x_2102.x, x_2102.y, x_2102.z));
  let x_2105 : f32 = u_xlat68;
  u_xlat68 = clamp(x_2105, 0.0f, 1.0f);
  let x_2107 : f32 = u_xlat66;
  let x_2108 : f32 = u_xlat68;
  u_xlat66 = (x_2107 * x_2108);
  let x_2110 : f32 = u_xlat66;
  let x_2112 : vec3<f32> = u_xlat26;
  let x_2113 : vec3<f32> = (vec3<f32>(x_2110, x_2110, x_2110) * x_2112);
  let x_2114 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2113.x, x_2113.y, x_2113.z, x_2114.w);
  let x_2116 : vec3<f32> = u_xlat5;
  let x_2118 : vec4<f32> = x_45.x_MainLightPosition;
  let x_2120 : vec3<f32> = (x_2116 + vec3<f32>(x_2118.x, x_2118.y, x_2118.z));
  let x_2121 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2120.x, x_2120.y, x_2120.z, x_2121.w);
  let x_2123 : vec4<f32> = u_xlat7;
  let x_2125 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(vec3<f32>(x_2123.x, x_2123.y, x_2123.z), vec3<f32>(x_2125.x, x_2125.y, x_2125.z));
  let x_2128 : f32 = u_xlat66;
  u_xlat66 = max(x_2128, 1.17549435e-37f);
  let x_2131 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_2131);
  let x_2133 : f32 = u_xlat66;
  let x_2135 : vec4<f32> = u_xlat7;
  let x_2137 : vec3<f32> = (vec3<f32>(x_2133, x_2133, x_2133) * vec3<f32>(x_2135.x, x_2135.y, x_2135.z));
  let x_2138 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2137.x, x_2137.y, x_2137.z, x_2138.w);
  let x_2140 : vec4<f32> = u_xlat1;
  let x_2142 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(vec3<f32>(x_2140.x, x_2140.y, x_2140.w), vec3<f32>(x_2142.x, x_2142.y, x_2142.z));
  let x_2145 : f32 = u_xlat66;
  u_xlat66 = clamp(x_2145, 0.0f, 1.0f);
  let x_2148 : vec4<f32> = x_45.x_MainLightPosition;
  let x_2150 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(vec3<f32>(x_2148.x, x_2148.y, x_2148.z), vec3<f32>(x_2150.x, x_2150.y, x_2150.z));
  let x_2153 : f32 = u_xlat68;
  u_xlat68 = clamp(x_2153, 0.0f, 1.0f);
  let x_2155 : f32 = u_xlat66;
  let x_2156 : f32 = u_xlat66;
  u_xlat66 = (x_2155 * x_2156);
  let x_2158 : f32 = u_xlat66;
  let x_2160 : f32 = u_xlat9.x;
  u_xlat66 = ((x_2158 * x_2160) + 1.000010014f);
  let x_2164 : f32 = u_xlat68;
  let x_2165 : f32 = u_xlat68;
  u_xlat68 = (x_2164 * x_2165);
  let x_2167 : f32 = u_xlat66;
  let x_2168 : f32 = u_xlat66;
  u_xlat66 = (x_2167 * x_2168);
  let x_2170 : f32 = u_xlat68;
  u_xlat68 = max(x_2170, 0.100000001f);
  let x_2173 : f32 = u_xlat66;
  let x_2174 : f32 = u_xlat68;
  u_xlat66 = (x_2173 * x_2174);
  let x_2176 : f32 = u_xlat69;
  let x_2177 : f32 = u_xlat66;
  u_xlat66 = (x_2176 * x_2177);
  let x_2179 : f32 = u_xlat25;
  let x_2180 : f32 = u_xlat66;
  u_xlat66 = (x_2179 / x_2180);
  let x_2182 : vec3<f32> = u_xlat0;
  let x_2183 : f32 = u_xlat66;
  let x_2186 : vec3<f32> = u_xlat8;
  let x_2187 : vec3<f32> = ((x_2182 * vec3<f32>(x_2183, x_2183, x_2183)) + x_2186);
  let x_2188 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2187.x, x_2187.y, x_2187.z, x_2188.w);
  let x_2190 : vec4<f32> = u_xlat4;
  let x_2192 : vec4<f32> = u_xlat7;
  let x_2194 : vec3<f32> = (vec3<f32>(x_2190.x, x_2190.y, x_2190.z) * vec3<f32>(x_2192.x, x_2192.y, x_2192.z));
  let x_2195 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2194.x, x_2194.y, x_2194.z, x_2195.w);
  let x_2198 : f32 = x_45.x_AdditionalLightsCount.x;
  let x_2200 : f32 = x_122.unity_LightData.y;
  u_xlat66 = min(x_2198, x_2200);
  let x_2202 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_2202));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2214 : u32 = u_xlatu_loop_1;
    let x_2215 : u32 = u_xlatu66;
    if ((x_2214 < x_2215)) {
    } else {
      break;
    }
    let x_2218 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_2218 >> 2u);
    let x_2221 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_2221 & 3u));
    let x_2224 : u32 = u_xlatu3;
    let x_2227 : vec4<f32> = x_122.unity_LightIndices[bitcast<i32>(x_2224)];
    let x_2237 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2242 : vec4<u32> = indexable[x_2237];
    u_xlat3.x = dot(x_2227, bitcast<vec4<f32>>(x_2242));
    let x_2248 : f32 = u_xlat3.x;
    u_xlati3 = i32(x_2248);
    let x_2250 : vec3<f32> = vs_INTERP0;
    let x_2262 : i32 = u_xlati3;
    let x_2264 : vec4<f32> = x_2261.x_AdditionalLightsPosition[x_2262];
    let x_2267 : i32 = u_xlati3;
    let x_2269 : vec4<f32> = x_2261.x_AdditionalLightsPosition[x_2267];
    u_xlat31 = ((-(x_2250) * vec3<f32>(x_2264.w, x_2264.w, x_2264.w)) + vec3<f32>(x_2269.x, x_2269.y, x_2269.z));
    let x_2272 : vec3<f32> = u_xlat31;
    let x_2273 : vec3<f32> = u_xlat31;
    u_xlat70 = dot(x_2272, x_2273);
    let x_2275 : f32 = u_xlat70;
    u_xlat70 = max(x_2275, 6.10351562e-05f);
    let x_2278 : f32 = u_xlat70;
    u_xlat72 = inverseSqrt(x_2278);
    let x_2280 : f32 = u_xlat72;
    let x_2282 : vec3<f32> = u_xlat31;
    let x_2283 : vec3<f32> = (vec3<f32>(x_2280, x_2280, x_2280) * x_2282);
    let x_2284 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2283.x, x_2283.y, x_2283.z, x_2284.w);
    let x_2286 : f32 = u_xlat70;
    u_xlat73 = (1.0f / x_2286);
    let x_2288 : f32 = u_xlat70;
    let x_2289 : i32 = u_xlati3;
    let x_2291 : f32 = x_2261.x_AdditionalLightsAttenuation[x_2289].x;
    u_xlat70 = (x_2288 * x_2291);
    let x_2293 : f32 = u_xlat70;
    let x_2295 : f32 = u_xlat70;
    u_xlat70 = ((-(x_2293) * x_2295) + 1.0f);
    let x_2298 : f32 = u_xlat70;
    u_xlat70 = max(x_2298, 0.0f);
    let x_2300 : f32 = u_xlat70;
    let x_2301 : f32 = u_xlat70;
    u_xlat70 = (x_2300 * x_2301);
    let x_2303 : f32 = u_xlat70;
    let x_2304 : f32 = u_xlat73;
    u_xlat70 = (x_2303 * x_2304);
    let x_2306 : i32 = u_xlati3;
    let x_2308 : vec4<f32> = x_2261.x_AdditionalLightsSpotDir[x_2306];
    let x_2310 : vec4<f32> = u_xlat10;
    u_xlat73 = dot(vec3<f32>(x_2308.x, x_2308.y, x_2308.z), vec3<f32>(x_2310.x, x_2310.y, x_2310.z));
    let x_2313 : f32 = u_xlat73;
    let x_2314 : i32 = u_xlati3;
    let x_2316 : f32 = x_2261.x_AdditionalLightsAttenuation[x_2314].z;
    let x_2318 : i32 = u_xlati3;
    let x_2320 : f32 = x_2261.x_AdditionalLightsAttenuation[x_2318].w;
    u_xlat73 = ((x_2313 * x_2316) + x_2320);
    let x_2322 : f32 = u_xlat73;
    u_xlat73 = clamp(x_2322, 0.0f, 1.0f);
    let x_2324 : f32 = u_xlat73;
    let x_2325 : f32 = u_xlat73;
    u_xlat73 = (x_2324 * x_2325);
    let x_2327 : f32 = u_xlat70;
    let x_2328 : f32 = u_xlat73;
    u_xlat70 = (x_2327 * x_2328);
    let x_2330 : f32 = u_xlat71;
    let x_2332 : i32 = u_xlati3;
    let x_2334 : vec4<f32> = x_2261.x_AdditionalLightsColor[x_2332];
    let x_2336 : vec3<f32> = (vec3<f32>(x_2330, x_2330, x_2330) * vec3<f32>(x_2334.x, x_2334.y, x_2334.z));
    let x_2337 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2336.x, x_2336.y, x_2336.z, x_2337.w);
    let x_2339 : vec4<f32> = u_xlat1;
    let x_2341 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_2339.x, x_2339.y, x_2339.w), vec3<f32>(x_2341.x, x_2341.y, x_2341.z));
    let x_2346 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_2346, 0.0f, 1.0f);
    let x_2350 : f32 = u_xlat3.x;
    let x_2351 : f32 = u_xlat70;
    u_xlat3.x = (x_2350 * x_2351);
    let x_2354 : vec3<f32> = u_xlat3;
    let x_2356 : vec4<f32> = u_xlat11;
    let x_2358 : vec3<f32> = (vec3<f32>(x_2354.x, x_2354.x, x_2354.x) * vec3<f32>(x_2356.x, x_2356.y, x_2356.z));
    let x_2359 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2358.x, x_2358.y, x_2358.z, x_2359.w);
    let x_2361 : vec3<f32> = u_xlat31;
    let x_2362 : f32 = u_xlat72;
    let x_2365 : vec3<f32> = u_xlat5;
    u_xlat31 = ((x_2361 * vec3<f32>(x_2362, x_2362, x_2362)) + x_2365);
    let x_2367 : vec3<f32> = u_xlat31;
    let x_2368 : vec3<f32> = u_xlat31;
    u_xlat3.x = dot(x_2367, x_2368);
    let x_2372 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_2372, 1.17549435e-37f);
    let x_2376 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_2376);
    let x_2379 : vec3<f32> = u_xlat3;
    let x_2381 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_2379.x, x_2379.x, x_2379.x) * x_2381);
    let x_2383 : vec4<f32> = u_xlat1;
    let x_2385 : vec3<f32> = u_xlat31;
    u_xlat3.x = dot(vec3<f32>(x_2383.x, x_2383.y, x_2383.w), x_2385);
    let x_2389 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_2389, 0.0f, 1.0f);
    let x_2392 : vec4<f32> = u_xlat10;
    let x_2394 : vec3<f32> = u_xlat31;
    u_xlat70 = dot(vec3<f32>(x_2392.x, x_2392.y, x_2392.z), x_2394);
    let x_2396 : f32 = u_xlat70;
    u_xlat70 = clamp(x_2396, 0.0f, 1.0f);
    let x_2399 : f32 = u_xlat3.x;
    let x_2401 : f32 = u_xlat3.x;
    u_xlat3.x = (x_2399 * x_2401);
    let x_2405 : f32 = u_xlat3.x;
    let x_2407 : f32 = u_xlat9.x;
    u_xlat3.x = ((x_2405 * x_2407) + 1.000010014f);
    let x_2411 : f32 = u_xlat70;
    let x_2412 : f32 = u_xlat70;
    u_xlat70 = (x_2411 * x_2412);
    let x_2415 : f32 = u_xlat3.x;
    let x_2417 : f32 = u_xlat3.x;
    u_xlat3.x = (x_2415 * x_2417);
    let x_2420 : f32 = u_xlat70;
    u_xlat70 = max(x_2420, 0.100000001f);
    let x_2423 : f32 = u_xlat3.x;
    let x_2424 : f32 = u_xlat70;
    u_xlat3.x = (x_2423 * x_2424);
    let x_2427 : f32 = u_xlat69;
    let x_2429 : f32 = u_xlat3.x;
    u_xlat3.x = (x_2427 * x_2429);
    let x_2432 : f32 = u_xlat25;
    let x_2434 : f32 = u_xlat3.x;
    u_xlat3.x = (x_2432 / x_2434);
    let x_2437 : vec3<f32> = u_xlat0;
    let x_2438 : vec3<f32> = u_xlat3;
    let x_2441 : vec3<f32> = u_xlat8;
    u_xlat31 = ((x_2437 * vec3<f32>(x_2438.x, x_2438.x, x_2438.x)) + x_2441);
    let x_2443 : vec3<f32> = u_xlat31;
    let x_2444 : vec4<f32> = u_xlat11;
    let x_2447 : vec4<f32> = u_xlat7;
    let x_2449 : vec3<f32> = ((x_2443 * vec3<f32>(x_2444.x, x_2444.y, x_2444.z)) + vec3<f32>(x_2447.x, x_2447.y, x_2447.z));
    let x_2450 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2449.x, x_2449.y, x_2449.z, x_2450.w);

    continuing {
      let x_2452 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2452 + bitcast<u32>(1i));
    }
  }
  let x_2454 : vec4<f32> = u_xlat6;
  let x_2456 : f32 = u_xlat47;
  let x_2459 : vec4<f32> = u_xlat4;
  u_xlat0 = ((vec3<f32>(x_2454.x, x_2454.y, x_2454.z) * vec3<f32>(x_2456, x_2456, x_2456)) + vec3<f32>(x_2459.x, x_2459.y, x_2459.z));
  let x_2462 : vec4<f32> = u_xlat7;
  let x_2464 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_2462.x, x_2462.y, x_2462.z) + x_2464);
  let x_2468 : vec3<f32> = u_xlat2;
  let x_2469 : f32 = u_xlat45;
  let x_2472 : vec3<f32> = u_xlat0;
  let x_2473 : vec3<f32> = ((x_2468 * vec3<f32>(x_2469, x_2469, x_2469)) + x_2472);
  let x_2474 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2473.x, x_2473.y, x_2473.z, x_2474.w);
  let x_2479 : u32 = x_45.x_RenderingLayerMaxInt;
  let x_2481 : f32 = x_122.unity_RenderingLayer.x;
  u_xlatu0 = (x_2479 & bitcast<u32>(x_2481));
  let x_2484 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_2484);
  let x_2489 : f32 = u_xlat0.x;
  let x_2491 : f32 = x_45.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_2489 * x_2491);
  let x_2496 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_2496, 0.0f, 1.0f);
  SV_Target0.w = 1.0f;
  let x_2500 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_2500.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

