type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_158 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_277 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_378 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3323 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3830 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3940 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_184 : f32;
  var x_197 : f32;
  var x_209 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb46 : bool;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var x_1719 : f32;
  var u_xlatu3 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu68 : u32;
  var u_xlati46 : i32;
  var u_xlat46 : vec2<f32>;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var x_1843 : f32;
  var x_1896 : f32;
  var u_xlat69 : f32;
  var u_xlat26 : vec2<f32>;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat71 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3273 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3406 : f32;
  var x_3418 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat73 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4232 : f32;
  var x_4245 : f32;
  var x_4297 : f32;
  var x_4308 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_148 : vec3<f32> = u_xlat22;
  let x_149 : vec3<f32> = u_xlat0;
  let x_151 : vec3<f32> = (x_148 * vec3<f32>(x_149.x, x_149.x, x_149.x));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_151.z, x_152.w);
  let x_161 : f32 = x_158.unity_OrthoParams.w;
  u_xlatb0 = (x_161 == 0.0f);
  let x_165 : vec3<f32> = vs_INTERP0;
  let x_170 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_165) + x_170);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_173, x_174);
  let x_176 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_176);
  let x_178 : f32 = u_xlat67;
  let x_180 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_178, x_178, x_178) * x_180);
  let x_183 : bool = u_xlatb0;
  if (x_183) {
    let x_188 : f32 = u_xlat4.x;
    x_184 = x_188;
  } else {
    let x_193 : f32 = x_158.unity_MatrixV[0i].z;
    x_184 = x_193;
  }
  let x_194 : f32 = x_184;
  u_xlat5.x = x_194;
  let x_196 : bool = u_xlatb0;
  if (x_196) {
    let x_201 : f32 = u_xlat4.y;
    x_197 = x_201;
  } else {
    let x_205 : f32 = x_158.unity_MatrixV[1i].z;
    x_197 = x_205;
  }
  let x_206 : f32 = x_197;
  u_xlat5.y = x_206;
  let x_208 : bool = u_xlatb0;
  if (x_208) {
    let x_213 : f32 = u_xlat4.z;
    x_209 = x_213;
  } else {
    let x_217 : f32 = x_158.unity_MatrixV[2i].z;
    x_209 = x_217;
  }
  let x_218 : f32 = x_209;
  u_xlat5.z = x_218;
  let x_220 : vec3<f32> = u_xlat5;
  let x_224 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat4 = (vec3<f32>(x_220.y, x_220.y, x_220.y) * vec3<f32>(x_224.x, x_224.y, x_224.z));
  let x_228 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_230 : vec3<f32> = u_xlat5;
  let x_233 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_230.x, x_230.x, x_230.x)) + x_233);
  let x_236 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_238 : vec3<f32> = u_xlat5;
  let x_241 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_236.x, x_236.y, x_236.z) * vec3<f32>(x_238.z, x_238.z, x_238.z)) + x_241);
  let x_243 : vec3<f32> = u_xlat4;
  let x_244 : vec3<f32> = u_xlat4;
  u_xlat0.x = dot(x_243, x_244);
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_248);
  let x_251 : vec3<f32> = u_xlat0;
  let x_253 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_251.x, x_251.x, x_251.x) * x_253);
  let x_267 : vec4<f32> = vs_INTERP3;
  let x_270 : f32 = x_158.x_GlobalMipBias.x;
  let x_271 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_267.x, x_267.y), x_270);
  u_xlat6 = x_271;
  let x_273 : vec4<f32> = u_xlat6;
  let x_279 : vec4<f32> = x_277.Color_C30C7CA3;
  let x_281 : vec3<f32> = (vec3<f32>(x_273.x, x_273.y, x_273.z) * vec3<f32>(x_279.x, x_279.y, x_279.z));
  let x_282 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_290 : vec4<f32> = vs_INTERP3;
  let x_293 : f32 = x_158.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat8 = vec4<f32>(x_294.w, x_294.x, x_294.y, x_294.z);
  let x_297 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_297.y, x_297.z, x_297.w, x_297.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_304 : vec4<f32> = u_xlat9;
  let x_305 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_304, x_305);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_309);
  let x_313 : vec3<f32> = u_xlat0;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_313.x, x_313.x, x_313.x) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_320 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_320 * 200.0f);
  let x_325 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_325, 1.0f);
  let x_328 : vec3<f32> = u_xlat0;
  let x_330 : vec4<f32> = u_xlat6;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.x, x_328.x, x_328.x) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = u_xlat30;
  let x_339 : vec3<f32> = (vec3<f32>(x_335.x, x_335.y, x_335.z) * vec3<f32>(x_337.y, x_337.y, x_337.y));
  let x_340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_339.x, x_339.y, x_339.z, x_340.w);
  let x_342 : vec3<f32> = u_xlat30;
  let x_344 : vec3<f32> = u_xlat2;
  let x_346 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_342.x, x_342.x, x_342.x) * x_344) + vec3<f32>(x_346.x, x_346.y, x_346.z));
  let x_349 : vec3<f32> = u_xlat30;
  let x_351 : vec3<f32> = u_xlat1;
  let x_353 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_349.z, x_349.z, x_349.z) * x_351) + x_353);
  let x_355 : vec3<f32> = u_xlat1;
  let x_356 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_355, x_356);
  let x_360 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_360, 1.17549435e-37f);
  let x_365 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_365);
  let x_368 : vec3<f32> = u_xlat0;
  let x_370 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_368.x, x_368.x, x_368.x) * x_370);
  let x_372 : vec3<f32> = vs_INTERP0;
  let x_380 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_372.y, x_372.y, x_372.y) * vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_384 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][0i];
  let x_386 : vec3<f32> = vs_INTERP0;
  let x_389 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_384.x, x_384.y, x_384.z) * vec3<f32>(x_386.x, x_386.x, x_386.x)) + x_389);
  let x_392 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][2i];
  let x_394 : vec3<f32> = vs_INTERP0;
  let x_397 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_392.x, x_392.y, x_392.z) * vec3<f32>(x_394.z, x_394.z, x_394.z)) + x_397);
  let x_399 : vec3<f32> = u_xlat2;
  let x_401 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_399 + vec3<f32>(x_401.x, x_401.y, x_401.z));
  let x_406 : f32 = x_378.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_406);
  let x_408 : bool = u_xlatb0;
  if (x_408) {
    let x_413 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb67 = (x_413 == 1.0f);
    let x_415 : bool = u_xlatb67;
    if (x_415) {
      let x_418 : vec3<f32> = u_xlat2;
      let x_422 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_418.x, x_418.y, x_418.x, x_418.y) + x_422);
      let x_425 : vec4<f32> = u_xlat3;
      let x_426 : vec2<f32> = vec2<f32>(x_425.x, x_425.y);
      let x_428 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_426.x, x_426.y, x_428);
      let x_440 : vec3<f32> = txVec0;
      let x_442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_440.xy, x_440.z);
      u_xlat9.x = x_442;
      let x_445 : vec4<f32> = u_xlat3;
      let x_446 : vec2<f32> = vec2<f32>(x_445.z, x_445.w);
      let x_448 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_446.x, x_446.y, x_448);
      let x_455 : vec3<f32> = txVec1;
      let x_457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_455.xy, x_455.z);
      u_xlat9.y = x_457;
      let x_459 : vec3<f32> = u_xlat2;
      let x_462 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_462);
      let x_465 : vec4<f32> = u_xlat3;
      let x_466 : vec2<f32> = vec2<f32>(x_465.x, x_465.y);
      let x_468 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_466.x, x_466.y, x_468);
      let x_475 : vec3<f32> = txVec2;
      let x_477 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_475.xy, x_475.z);
      u_xlat9.z = x_477;
      let x_480 : vec4<f32> = u_xlat3;
      let x_481 : vec2<f32> = vec2<f32>(x_480.z, x_480.w);
      let x_483 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_481.x, x_481.y, x_483);
      let x_490 : vec3<f32> = txVec3;
      let x_492 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_490.xy, x_490.z);
      u_xlat9.w = x_492;
      let x_494 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_494, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_501 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb68 = (x_501 == 2.0f);
      let x_503 : bool = u_xlatb68;
      if (x_503) {
        let x_506 : vec3<f32> = u_xlat2;
        let x_509 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_514 : vec2<f32> = ((vec2<f32>(x_506.x, x_506.y) * vec2<f32>(x_509.z, x_509.w)) + vec2<f32>(0.5f, 0.5f));
        let x_515 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_514.x, x_514.y, x_515.z, x_515.w);
        let x_517 : vec4<f32> = u_xlat3;
        let x_519 : vec2<f32> = floor(vec2<f32>(x_517.x, x_517.y));
        let x_520 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
        let x_524 : vec3<f32> = u_xlat2;
        let x_527 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_524.x, x_524.y) * vec2<f32>(x_527.z, x_527.w)) + -(vec2<f32>(x_530.x, x_530.y)));
        let x_534 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_534.x, x_534.x, x_534.y, x_534.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_539 : vec4<f32> = u_xlat9;
        let x_541 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_539.x, x_539.x, x_539.z, x_539.z) * vec4<f32>(x_541.x, x_541.x, x_541.z, x_541.z));
        let x_544 : vec4<f32> = u_xlat10;
        let x_548 : vec2<f32> = (vec2<f32>(x_544.y, x_544.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_549 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_548.x, x_549.y, x_548.y, x_549.w);
        let x_551 : vec4<f32> = u_xlat10;
        let x_554 : vec2<f32> = u_xlat47;
        let x_556 : vec2<f32> = ((vec2<f32>(x_551.x, x_551.z) * vec2<f32>(0.5f, 0.5f)) + -(x_554));
        let x_557 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_556.x, x_556.y, x_557.z, x_557.w);
        let x_560 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_560) + vec2<f32>(1.0f, 1.0f));
        let x_565 : vec2<f32> = u_xlat47;
        let x_567 : vec2<f32> = min(x_565, vec2<f32>(0.0f, 0.0f));
        let x_568 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_567.x, x_567.y, x_568.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat11;
        let x_573 : vec4<f32> = u_xlat11;
        let x_576 : vec2<f32> = u_xlat54;
        let x_577 : vec2<f32> = ((-(vec2<f32>(x_570.x, x_570.y)) * vec2<f32>(x_573.x, x_573.y)) + x_576);
        let x_578 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_577.x, x_577.y, x_578.z, x_578.w);
        let x_580 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_580, vec2<f32>(0.0f, 0.0f));
        let x_582 : vec2<f32> = u_xlat47;
        let x_584 : vec2<f32> = u_xlat47;
        let x_586 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_582) * x_584) + vec2<f32>(x_586.y, x_586.w));
        let x_589 : vec4<f32> = u_xlat11;
        let x_591 : vec2<f32> = (vec2<f32>(x_589.x, x_589.y) + vec2<f32>(1.0f, 1.0f));
        let x_592 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_591.x, x_591.y, x_592.z, x_592.w);
        let x_594 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_594 + vec2<f32>(1.0f, 1.0f));
        let x_597 : vec4<f32> = u_xlat10;
        let x_601 : vec2<f32> = (vec2<f32>(x_597.x, x_597.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_602 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_601.x, x_601.y, x_602.z, x_602.w);
        let x_604 : vec2<f32> = u_xlat54;
        let x_605 : vec2<f32> = (x_604 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_606 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_605.x, x_605.y, x_606.z, x_606.w);
        let x_608 : vec4<f32> = u_xlat11;
        let x_610 : vec2<f32> = (vec2<f32>(x_608.x, x_608.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_611 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_614 : vec2<f32> = u_xlat47;
        let x_615 : vec2<f32> = (x_614 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_616 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_615.x, x_615.y, x_616.z, x_616.w);
        let x_618 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_618.y, x_618.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_622 : f32 = u_xlat11.x;
        u_xlat12.z = x_622;
        let x_625 : f32 = u_xlat47.x;
        u_xlat12.w = x_625;
        let x_628 : f32 = u_xlat13.x;
        u_xlat10.z = x_628;
        let x_631 : f32 = u_xlat9.x;
        u_xlat10.w = x_631;
        let x_634 : vec4<f32> = u_xlat10;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_634.z, x_634.w, x_634.x, x_634.z) + vec4<f32>(x_636.z, x_636.w, x_636.x, x_636.z));
        let x_640 : f32 = u_xlat12.y;
        u_xlat11.z = x_640;
        let x_643 : f32 = u_xlat47.y;
        u_xlat11.w = x_643;
        let x_646 : f32 = u_xlat10.y;
        u_xlat13.z = x_646;
        let x_649 : f32 = u_xlat9.z;
        u_xlat13.w = x_649;
        let x_651 : vec4<f32> = u_xlat11;
        let x_653 : vec4<f32> = u_xlat13;
        let x_655 : vec3<f32> = (vec3<f32>(x_651.z, x_651.y, x_651.w) + vec3<f32>(x_653.z, x_653.y, x_653.w));
        let x_656 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_655.x, x_655.y, x_655.z, x_656.w);
        let x_658 : vec4<f32> = u_xlat10;
        let x_660 : vec4<f32> = u_xlat14;
        let x_662 : vec3<f32> = (vec3<f32>(x_658.x, x_658.z, x_658.w) / vec3<f32>(x_660.z, x_660.w, x_660.y));
        let x_663 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_662.x, x_662.y, x_662.z, x_663.w);
        let x_665 : vec4<f32> = u_xlat10;
        let x_671 : vec3<f32> = (vec3<f32>(x_665.x, x_665.y, x_665.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_672 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_671.x, x_671.y, x_671.z, x_672.w);
        let x_674 : vec4<f32> = u_xlat13;
        let x_676 : vec4<f32> = u_xlat9;
        let x_678 : vec3<f32> = (vec3<f32>(x_674.z, x_674.y, x_674.w) / vec3<f32>(x_676.x, x_676.y, x_676.z));
        let x_679 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_678.x, x_678.y, x_678.z, x_679.w);
        let x_681 : vec4<f32> = u_xlat11;
        let x_683 : vec3<f32> = (vec3<f32>(x_681.x, x_681.y, x_681.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_684 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_683.x, x_683.y, x_683.z, x_684.w);
        let x_686 : vec4<f32> = u_xlat10;
        let x_689 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_691 : vec3<f32> = (vec3<f32>(x_686.y, x_686.x, x_686.z) * vec3<f32>(x_689.x, x_689.x, x_689.x));
        let x_692 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_691.x, x_691.y, x_691.z, x_692.w);
        let x_694 : vec4<f32> = u_xlat11;
        let x_697 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_699 : vec3<f32> = (vec3<f32>(x_694.x, x_694.y, x_694.z) * vec3<f32>(x_697.y, x_697.y, x_697.y));
        let x_700 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_703 : f32 = u_xlat11.x;
        u_xlat10.w = x_703;
        let x_705 : vec4<f32> = u_xlat3;
        let x_708 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_711 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_705.x, x_705.y, x_705.x, x_705.y) * vec4<f32>(x_708.x, x_708.y, x_708.x, x_708.y)) + vec4<f32>(x_711.y, x_711.w, x_711.x, x_711.w));
        let x_714 : vec4<f32> = u_xlat3;
        let x_717 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_720 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_714.x, x_714.y) * vec2<f32>(x_717.x, x_717.y)) + vec2<f32>(x_720.z, x_720.w));
        let x_724 : f32 = u_xlat10.y;
        u_xlat11.w = x_724;
        let x_726 : vec4<f32> = u_xlat11;
        let x_727 : vec2<f32> = vec2<f32>(x_726.y, x_726.z);
        let x_728 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_728.x, x_727.x, x_728.z, x_727.y);
        let x_730 : vec4<f32> = u_xlat3;
        let x_733 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_736 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_730.x, x_730.y, x_730.x, x_730.y) * vec4<f32>(x_733.x, x_733.y, x_733.x, x_733.y)) + vec4<f32>(x_736.x, x_736.y, x_736.z, x_736.y));
        let x_739 : vec4<f32> = u_xlat3;
        let x_742 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_745 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_739.x, x_739.y, x_739.x, x_739.y) * vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y)) + vec4<f32>(x_745.w, x_745.y, x_745.w, x_745.z));
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.x, x_754.w, x_754.z, x_754.w));
        let x_758 : vec4<f32> = u_xlat9;
        let x_760 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_758.x, x_758.x, x_758.x, x_758.y) * vec4<f32>(x_760.z, x_760.w, x_760.y, x_760.z));
        let x_764 : vec4<f32> = u_xlat9;
        let x_766 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_764.y, x_764.y, x_764.z, x_764.z) * x_766);
        let x_770 : f32 = u_xlat9.z;
        let x_772 : f32 = u_xlat14.y;
        u_xlat68 = (x_770 * x_772);
        let x_775 : vec4<f32> = u_xlat12;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec4;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat3.x = x_787;
        let x_790 : vec4<f32> = u_xlat12;
        let x_791 : vec2<f32> = vec2<f32>(x_790.z, x_790.w);
        let x_793 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_791.x, x_791.y, x_793);
        let x_801 : vec3<f32> = txVec5;
        let x_803 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_801.xy, x_801.z);
        u_xlat25 = x_803;
        let x_804 : f32 = u_xlat25;
        let x_806 : f32 = u_xlat15.y;
        u_xlat25 = (x_804 * x_806);
        let x_809 : f32 = u_xlat15.x;
        let x_811 : f32 = u_xlat3.x;
        let x_813 : f32 = u_xlat25;
        u_xlat3.x = ((x_809 * x_811) + x_813);
        let x_817 : vec2<f32> = u_xlat47;
        let x_819 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_817.x, x_817.y, x_819);
        let x_826 : vec3<f32> = txVec6;
        let x_828 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_826.xy, x_826.z);
        u_xlat25 = x_828;
        let x_830 : f32 = u_xlat15.z;
        let x_831 : f32 = u_xlat25;
        let x_834 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_830 * x_831) + x_834);
        let x_838 : vec4<f32> = u_xlat11;
        let x_839 : vec2<f32> = vec2<f32>(x_838.x, x_838.y);
        let x_841 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_839.x, x_839.y, x_841);
        let x_848 : vec3<f32> = txVec7;
        let x_850 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_848.xy, x_848.z);
        u_xlat25 = x_850;
        let x_852 : f32 = u_xlat15.w;
        let x_853 : f32 = u_xlat25;
        let x_856 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_852 * x_853) + x_856);
        let x_860 : vec4<f32> = u_xlat13;
        let x_861 : vec2<f32> = vec2<f32>(x_860.x, x_860.y);
        let x_863 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_861.x, x_861.y, x_863);
        let x_870 : vec3<f32> = txVec8;
        let x_872 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_870.xy, x_870.z);
        u_xlat25 = x_872;
        let x_874 : f32 = u_xlat16.x;
        let x_875 : f32 = u_xlat25;
        let x_878 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_874 * x_875) + x_878);
        let x_882 : vec4<f32> = u_xlat13;
        let x_883 : vec2<f32> = vec2<f32>(x_882.z, x_882.w);
        let x_885 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_883.x, x_883.y, x_885);
        let x_892 : vec3<f32> = txVec9;
        let x_894 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_892.xy, x_892.z);
        u_xlat25 = x_894;
        let x_896 : f32 = u_xlat16.y;
        let x_897 : f32 = u_xlat25;
        let x_900 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_896 * x_897) + x_900);
        let x_904 : vec4<f32> = u_xlat11;
        let x_905 : vec2<f32> = vec2<f32>(x_904.z, x_904.w);
        let x_907 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_905.x, x_905.y, x_907);
        let x_914 : vec3<f32> = txVec10;
        let x_916 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_914.xy, x_914.z);
        u_xlat25 = x_916;
        let x_918 : f32 = u_xlat16.z;
        let x_919 : f32 = u_xlat25;
        let x_922 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_918 * x_919) + x_922);
        let x_926 : vec4<f32> = u_xlat10;
        let x_927 : vec2<f32> = vec2<f32>(x_926.x, x_926.y);
        let x_929 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_927.x, x_927.y, x_929);
        let x_936 : vec3<f32> = txVec11;
        let x_938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_936.xy, x_936.z);
        u_xlat25 = x_938;
        let x_940 : f32 = u_xlat16.w;
        let x_941 : f32 = u_xlat25;
        let x_944 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_940 * x_941) + x_944);
        let x_948 : vec4<f32> = u_xlat10;
        let x_949 : vec2<f32> = vec2<f32>(x_948.z, x_948.w);
        let x_951 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_949.x, x_949.y, x_951);
        let x_958 : vec3<f32> = txVec12;
        let x_960 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_958.xy, x_958.z);
        u_xlat25 = x_960;
        let x_961 : f32 = u_xlat68;
        let x_962 : f32 = u_xlat25;
        let x_965 : f32 = u_xlat3.x;
        u_xlat67 = ((x_961 * x_962) + x_965);
      } else {
        let x_968 : vec3<f32> = u_xlat2;
        let x_971 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_974 : vec2<f32> = ((vec2<f32>(x_968.x, x_968.y) * vec2<f32>(x_971.z, x_971.w)) + vec2<f32>(0.5f, 0.5f));
        let x_975 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_974.x, x_974.y, x_975.z, x_975.w);
        let x_977 : vec4<f32> = u_xlat3;
        let x_979 : vec2<f32> = floor(vec2<f32>(x_977.x, x_977.y));
        let x_980 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_979.x, x_979.y, x_980.z, x_980.w);
        let x_982 : vec3<f32> = u_xlat2;
        let x_985 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_988 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_982.x, x_982.y) * vec2<f32>(x_985.z, x_985.w)) + -(vec2<f32>(x_988.x, x_988.y)));
        let x_992 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_992.x, x_992.x, x_992.y, x_992.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_995 : vec4<f32> = u_xlat9;
        let x_997 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_995.x, x_995.x, x_995.z, x_995.z) * vec4<f32>(x_997.x, x_997.x, x_997.z, x_997.z));
        let x_1000 : vec4<f32> = u_xlat10;
        let x_1004 : vec2<f32> = (vec2<f32>(x_1000.y, x_1000.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1005 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1005.x, x_1004.x, x_1005.z, x_1004.y);
        let x_1007 : vec4<f32> = u_xlat10;
        let x_1010 : vec2<f32> = u_xlat47;
        let x_1012 : vec2<f32> = ((vec2<f32>(x_1007.x, x_1007.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1010));
        let x_1013 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1012.x, x_1013.y, x_1012.y, x_1013.w);
        let x_1015 : vec2<f32> = u_xlat47;
        let x_1017 : vec2<f32> = (-(x_1015) + vec2<f32>(1.0f, 1.0f));
        let x_1018 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1020 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1020, vec2<f32>(0.0f, 0.0f));
        let x_1022 : vec2<f32> = u_xlat54;
        let x_1024 : vec2<f32> = u_xlat54;
        let x_1026 : vec4<f32> = u_xlat10;
        let x_1028 : vec2<f32> = ((-(x_1022) * x_1024) + vec2<f32>(x_1026.x, x_1026.y));
        let x_1029 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1028.x, x_1028.y, x_1029.z, x_1029.w);
        let x_1031 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1031, vec2<f32>(0.0f, 0.0f));
        let x_1034 : vec2<f32> = u_xlat54;
        let x_1036 : vec2<f32> = u_xlat54;
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1040 : vec2<f32> = ((-(x_1034) * x_1036) + vec2<f32>(x_1038.y, x_1038.w));
        let x_1041 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1040.x, x_1041.y, x_1040.y);
        let x_1043 : vec4<f32> = u_xlat10;
        let x_1046 : vec2<f32> = (vec2<f32>(x_1043.x, x_1043.y) + vec2<f32>(2.0f, 2.0f));
        let x_1047 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1046.x, x_1046.y, x_1047.z, x_1047.w);
        let x_1049 : vec3<f32> = u_xlat31;
        let x_1051 : vec2<f32> = (vec2<f32>(x_1049.x, x_1049.z) + vec2<f32>(2.0f, 2.0f));
        let x_1052 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1052.x, x_1051.x, x_1052.z, x_1051.y);
        let x_1055 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1055 * 0.081632003f);
        let x_1059 : vec4<f32> = u_xlat9;
        let x_1062 : vec3<f32> = (vec3<f32>(x_1059.z, x_1059.x, x_1059.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1063 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1062.x, x_1062.y, x_1062.z, x_1063.w);
        let x_1065 : vec4<f32> = u_xlat10;
        let x_1068 : vec2<f32> = (vec2<f32>(x_1065.x, x_1065.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat13.y;
        u_xlat12.x = x_1072;
        let x_1074 : vec2<f32> = u_xlat47;
        let x_1081 : vec2<f32> = ((vec2<f32>(x_1074.x, x_1074.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1082 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1082.x, x_1081.x, x_1082.z, x_1081.y);
        let x_1084 : vec2<f32> = u_xlat47;
        let x_1088 : vec2<f32> = ((vec2<f32>(x_1084.x, x_1084.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1089 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1088.x, x_1089.y, x_1088.y, x_1089.w);
        let x_1092 : f32 = u_xlat9.x;
        u_xlat10.y = x_1092;
        let x_1095 : f32 = u_xlat11.y;
        u_xlat10.w = x_1095;
        let x_1097 : vec4<f32> = u_xlat10;
        let x_1098 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1097 + x_1098);
        let x_1100 : vec2<f32> = u_xlat47;
        let x_1103 : vec2<f32> = ((vec2<f32>(x_1100.y, x_1100.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1104 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1104.x, x_1103.x, x_1104.z, x_1103.y);
        let x_1106 : vec2<f32> = u_xlat47;
        let x_1109 : vec2<f32> = ((vec2<f32>(x_1106.y, x_1106.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1110 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1109.x, x_1110.y, x_1109.y, x_1110.w);
        let x_1113 : f32 = u_xlat9.y;
        u_xlat11.y = x_1113;
        let x_1115 : vec4<f32> = u_xlat11;
        let x_1116 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1115 + x_1116);
        let x_1118 : vec4<f32> = u_xlat10;
        let x_1119 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1118 / x_1119);
        let x_1121 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1121 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1127 : vec4<f32> = u_xlat11;
        let x_1128 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1127 / x_1128);
        let x_1130 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1130 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1132 : vec4<f32> = u_xlat10;
        let x_1135 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1132.w, x_1132.x, x_1132.y, x_1132.z) * vec4<f32>(x_1135.x, x_1135.x, x_1135.x, x_1135.x));
        let x_1138 : vec4<f32> = u_xlat11;
        let x_1141 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1138.x, x_1138.w, x_1138.y, x_1138.z) * vec4<f32>(x_1141.y, x_1141.y, x_1141.y, x_1141.y));
        let x_1144 : vec4<f32> = u_xlat10;
        let x_1145 : vec3<f32> = vec3<f32>(x_1144.y, x_1144.z, x_1144.w);
        let x_1146 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1145.x, x_1146.y, x_1145.y, x_1145.z);
        let x_1149 : f32 = u_xlat11.x;
        u_xlat13.y = x_1149;
        let x_1151 : vec4<f32> = u_xlat3;
        let x_1154 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1157 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y) * vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.y)) + vec4<f32>(x_1157.x, x_1157.y, x_1157.z, x_1157.y));
        let x_1160 : vec4<f32> = u_xlat3;
        let x_1163 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1166 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1160.x, x_1160.y) * vec2<f32>(x_1163.x, x_1163.y)) + vec2<f32>(x_1166.w, x_1166.y));
        let x_1170 : f32 = u_xlat13.y;
        u_xlat10.y = x_1170;
        let x_1173 : f32 = u_xlat11.z;
        u_xlat13.y = x_1173;
        let x_1175 : vec4<f32> = u_xlat3;
        let x_1178 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1181 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1175.x, x_1175.y, x_1175.x, x_1175.y) * vec4<f32>(x_1178.x, x_1178.y, x_1178.x, x_1178.y)) + vec4<f32>(x_1181.x, x_1181.y, x_1181.z, x_1181.y));
        let x_1184 : vec4<f32> = u_xlat3;
        let x_1187 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat13;
        let x_1192 : vec2<f32> = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.w, x_1190.y));
        let x_1193 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1192.x, x_1192.y, x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat13.y;
        u_xlat10.z = x_1196;
        let x_1199 : vec4<f32> = u_xlat3;
        let x_1202 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1205 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1199.x, x_1199.y, x_1199.x, x_1199.y) * vec4<f32>(x_1202.x, x_1202.y, x_1202.x, x_1202.y)) + vec4<f32>(x_1205.x, x_1205.y, x_1205.x, x_1205.z));
        let x_1209 : f32 = u_xlat11.w;
        u_xlat13.y = x_1209;
        let x_1212 : vec4<f32> = u_xlat3;
        let x_1215 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1222 : vec4<f32> = u_xlat3;
        let x_1225 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1228 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1222.x, x_1222.y) * vec2<f32>(x_1225.x, x_1225.y)) + vec2<f32>(x_1228.w, x_1228.y));
        let x_1232 : f32 = u_xlat13.y;
        u_xlat10.w = x_1232;
        let x_1235 : vec4<f32> = u_xlat3;
        let x_1238 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1241 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1235.x, x_1235.y) * vec2<f32>(x_1238.x, x_1238.y)) + vec2<f32>(x_1241.x, x_1241.w));
        let x_1244 : vec4<f32> = u_xlat13;
        let x_1245 : vec3<f32> = vec3<f32>(x_1244.x, x_1244.z, x_1244.w);
        let x_1246 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1245.x, x_1246.y, x_1245.y, x_1245.z);
        let x_1248 : vec4<f32> = u_xlat3;
        let x_1251 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1254 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1248.x, x_1248.y, x_1248.x, x_1248.y) * vec4<f32>(x_1251.x, x_1251.y, x_1251.x, x_1251.y)) + vec4<f32>(x_1254.x, x_1254.y, x_1254.z, x_1254.y));
        let x_1258 : vec4<f32> = u_xlat3;
        let x_1261 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1264 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1258.x, x_1258.y) * vec2<f32>(x_1261.x, x_1261.y)) + vec2<f32>(x_1264.w, x_1264.y));
        let x_1268 : f32 = u_xlat10.x;
        u_xlat11.x = x_1268;
        let x_1270 : vec4<f32> = u_xlat3;
        let x_1273 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1276 : vec4<f32> = u_xlat11;
        let x_1278 : vec2<f32> = ((vec2<f32>(x_1270.x, x_1270.y) * vec2<f32>(x_1273.x, x_1273.y)) + vec2<f32>(x_1276.x, x_1276.y));
        let x_1279 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1278.x, x_1278.y, x_1279.z, x_1279.w);
        let x_1282 : vec4<f32> = u_xlat9;
        let x_1284 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1282.x, x_1282.x, x_1282.x, x_1282.x) * x_1284);
        let x_1287 : vec4<f32> = u_xlat9;
        let x_1289 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1287.y, x_1287.y, x_1287.y, x_1287.y) * x_1289);
        let x_1292 : vec4<f32> = u_xlat9;
        let x_1294 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1292.z, x_1292.z, x_1292.z, x_1292.z) * x_1294);
        let x_1296 : vec4<f32> = u_xlat9;
        let x_1298 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1296.w, x_1296.w, x_1296.w, x_1296.w) * x_1298);
        let x_1301 : vec4<f32> = u_xlat14;
        let x_1302 : vec2<f32> = vec2<f32>(x_1301.x, x_1301.y);
        let x_1304 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1302.x, x_1302.y, x_1304);
        let x_1311 : vec3<f32> = txVec13;
        let x_1313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1311.xy, x_1311.z);
        u_xlat68 = x_1313;
        let x_1315 : vec4<f32> = u_xlat14;
        let x_1316 : vec2<f32> = vec2<f32>(x_1315.z, x_1315.w);
        let x_1318 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1316.x, x_1316.y, x_1318);
        let x_1326 : vec3<f32> = txVec14;
        let x_1328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1326.xy, x_1326.z);
        u_xlat70 = x_1328;
        let x_1329 : f32 = u_xlat70;
        let x_1331 : f32 = u_xlat19.y;
        u_xlat70 = (x_1329 * x_1331);
        let x_1334 : f32 = u_xlat19.x;
        let x_1335 : f32 = u_xlat68;
        let x_1337 : f32 = u_xlat70;
        u_xlat68 = ((x_1334 * x_1335) + x_1337);
        let x_1340 : vec2<f32> = u_xlat47;
        let x_1342 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec15;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat47.x = x_1351;
        let x_1354 : f32 = u_xlat19.z;
        let x_1356 : f32 = u_xlat47.x;
        let x_1358 : f32 = u_xlat68;
        u_xlat68 = ((x_1354 * x_1356) + x_1358);
        let x_1361 : vec4<f32> = u_xlat17;
        let x_1362 : vec2<f32> = vec2<f32>(x_1361.x, x_1361.y);
        let x_1364 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1362.x, x_1362.y, x_1364);
        let x_1371 : vec3<f32> = txVec16;
        let x_1373 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1371.xy, x_1371.z);
        u_xlat47.x = x_1373;
        let x_1376 : f32 = u_xlat19.w;
        let x_1378 : f32 = u_xlat47.x;
        let x_1380 : f32 = u_xlat68;
        u_xlat68 = ((x_1376 * x_1378) + x_1380);
        let x_1383 : vec4<f32> = u_xlat15;
        let x_1384 : vec2<f32> = vec2<f32>(x_1383.x, x_1383.y);
        let x_1386 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1384.x, x_1384.y, x_1386);
        let x_1393 : vec3<f32> = txVec17;
        let x_1395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1393.xy, x_1393.z);
        u_xlat47.x = x_1395;
        let x_1398 : f32 = u_xlat20.x;
        let x_1400 : f32 = u_xlat47.x;
        let x_1402 : f32 = u_xlat68;
        u_xlat68 = ((x_1398 * x_1400) + x_1402);
        let x_1405 : vec4<f32> = u_xlat15;
        let x_1406 : vec2<f32> = vec2<f32>(x_1405.z, x_1405.w);
        let x_1408 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1406.x, x_1406.y, x_1408);
        let x_1415 : vec3<f32> = txVec18;
        let x_1417 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1415.xy, x_1415.z);
        u_xlat47.x = x_1417;
        let x_1420 : f32 = u_xlat20.y;
        let x_1422 : f32 = u_xlat47.x;
        let x_1424 : f32 = u_xlat68;
        u_xlat68 = ((x_1420 * x_1422) + x_1424);
        let x_1427 : vec4<f32> = u_xlat16;
        let x_1428 : vec2<f32> = vec2<f32>(x_1427.x, x_1427.y);
        let x_1430 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1428.x, x_1428.y, x_1430);
        let x_1437 : vec3<f32> = txVec19;
        let x_1439 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1437.xy, x_1437.z);
        u_xlat47.x = x_1439;
        let x_1442 : f32 = u_xlat20.z;
        let x_1444 : f32 = u_xlat47.x;
        let x_1446 : f32 = u_xlat68;
        u_xlat68 = ((x_1442 * x_1444) + x_1446);
        let x_1449 : vec4<f32> = u_xlat17;
        let x_1450 : vec2<f32> = vec2<f32>(x_1449.z, x_1449.w);
        let x_1452 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1450.x, x_1450.y, x_1452);
        let x_1459 : vec3<f32> = txVec20;
        let x_1461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1459.xy, x_1459.z);
        u_xlat47.x = x_1461;
        let x_1464 : f32 = u_xlat20.w;
        let x_1466 : f32 = u_xlat47.x;
        let x_1468 : f32 = u_xlat68;
        u_xlat68 = ((x_1464 * x_1466) + x_1468);
        let x_1471 : vec4<f32> = u_xlat18;
        let x_1472 : vec2<f32> = vec2<f32>(x_1471.x, x_1471.y);
        let x_1474 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1472.x, x_1472.y, x_1474);
        let x_1481 : vec3<f32> = txVec21;
        let x_1483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1481.xy, x_1481.z);
        u_xlat47.x = x_1483;
        let x_1486 : f32 = u_xlat21.x;
        let x_1488 : f32 = u_xlat47.x;
        let x_1490 : f32 = u_xlat68;
        u_xlat68 = ((x_1486 * x_1488) + x_1490);
        let x_1493 : vec4<f32> = u_xlat18;
        let x_1494 : vec2<f32> = vec2<f32>(x_1493.z, x_1493.w);
        let x_1496 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1494.x, x_1494.y, x_1496);
        let x_1503 : vec3<f32> = txVec22;
        let x_1505 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1503.xy, x_1503.z);
        u_xlat47.x = x_1505;
        let x_1508 : f32 = u_xlat21.y;
        let x_1510 : f32 = u_xlat47.x;
        let x_1512 : f32 = u_xlat68;
        u_xlat68 = ((x_1508 * x_1510) + x_1512);
        let x_1515 : vec2<f32> = u_xlat32;
        let x_1517 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1515.x, x_1515.y, x_1517);
        let x_1524 : vec3<f32> = txVec23;
        let x_1526 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1524.xy, x_1524.z);
        u_xlat47.x = x_1526;
        let x_1529 : f32 = u_xlat21.z;
        let x_1531 : f32 = u_xlat47.x;
        let x_1533 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1531) + x_1533);
        let x_1536 : vec2<f32> = u_xlat60;
        let x_1538 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1536.x, x_1536.y, x_1538);
        let x_1545 : vec3<f32> = txVec24;
        let x_1547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1545.xy, x_1545.z);
        u_xlat47.x = x_1547;
        let x_1550 : f32 = u_xlat21.w;
        let x_1552 : f32 = u_xlat47.x;
        let x_1554 : f32 = u_xlat68;
        u_xlat68 = ((x_1550 * x_1552) + x_1554);
        let x_1557 : vec4<f32> = u_xlat13;
        let x_1558 : vec2<f32> = vec2<f32>(x_1557.x, x_1557.y);
        let x_1560 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1558.x, x_1558.y, x_1560);
        let x_1567 : vec3<f32> = txVec25;
        let x_1569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1567.xy, x_1567.z);
        u_xlat47.x = x_1569;
        let x_1572 : f32 = u_xlat9.x;
        let x_1574 : f32 = u_xlat47.x;
        let x_1576 : f32 = u_xlat68;
        u_xlat68 = ((x_1572 * x_1574) + x_1576);
        let x_1579 : vec4<f32> = u_xlat13;
        let x_1580 : vec2<f32> = vec2<f32>(x_1579.z, x_1579.w);
        let x_1582 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1580.x, x_1580.y, x_1582);
        let x_1589 : vec3<f32> = txVec26;
        let x_1591 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1589.xy, x_1589.z);
        u_xlat47.x = x_1591;
        let x_1594 : f32 = u_xlat9.y;
        let x_1596 : f32 = u_xlat47.x;
        let x_1598 : f32 = u_xlat68;
        u_xlat68 = ((x_1594 * x_1596) + x_1598);
        let x_1601 : vec2<f32> = u_xlat55;
        let x_1603 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec27;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat47.x = x_1612;
        let x_1615 : f32 = u_xlat9.z;
        let x_1617 : f32 = u_xlat47.x;
        let x_1619 : f32 = u_xlat68;
        u_xlat68 = ((x_1615 * x_1617) + x_1619);
        let x_1622 : vec4<f32> = u_xlat3;
        let x_1623 : vec2<f32> = vec2<f32>(x_1622.x, x_1622.y);
        let x_1625 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1623.x, x_1623.y, x_1625);
        let x_1632 : vec3<f32> = txVec28;
        let x_1634 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1632.xy, x_1632.z);
        u_xlat3.x = x_1634;
        let x_1637 : f32 = u_xlat9.w;
        let x_1639 : f32 = u_xlat3.x;
        let x_1641 : f32 = u_xlat68;
        u_xlat67 = ((x_1637 * x_1639) + x_1641);
      }
    }
  } else {
    let x_1645 : vec3<f32> = u_xlat2;
    let x_1646 : vec2<f32> = vec2<f32>(x_1645.x, x_1645.y);
    let x_1648 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1646.x, x_1646.y, x_1648);
    let x_1655 : vec3<f32> = txVec29;
    let x_1657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1655.xy, x_1655.z);
    u_xlat67 = x_1657;
  }
  let x_1659 : f32 = x_378.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1659) + 1.0f);
  let x_1663 : f32 = u_xlat67;
  let x_1665 : f32 = x_378.x_MainLightShadowParams.x;
  let x_1668 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1663 * x_1665) + x_1668);
  let x_1672 : f32 = u_xlat2.z;
  u_xlatb24 = (0.0f >= x_1672);
  let x_1676 : f32 = u_xlat2.z;
  u_xlatb46 = (x_1676 >= 1.0f);
  let x_1678 : bool = u_xlatb46;
  let x_1679 : bool = u_xlatb24;
  u_xlatb24 = (x_1678 | x_1679);
  let x_1681 : bool = u_xlatb24;
  let x_1682 : f32 = u_xlat67;
  u_xlat67 = select(x_1682, 1.0f, x_1681);
  let x_1684 : vec3<f32> = u_xlat1;
  let x_1686 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat1.x = dot(x_1684, -(vec3<f32>(x_1686.x, x_1686.y, x_1686.z)));
  let x_1692 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1692, 0.0f, 1.0f);
  let x_1696 : f32 = u_xlat67;
  let x_1700 : vec4<f32> = x_158.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1696, x_1696, x_1696) * vec3<f32>(x_1700.x, x_1700.y, x_1700.z));
  let x_1703 : vec3<f32> = u_xlat23;
  let x_1704 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1703 * vec3<f32>(x_1704.x, x_1704.x, x_1704.x));
  let x_1707 : vec3<f32> = u_xlat1;
  let x_1708 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1707 * vec3<f32>(x_1708.x, x_1708.y, x_1708.z));
  let x_1712 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1712 < 0.0f);
  let x_1716 : f32 = x_95.unity_LODFade.x;
  u_xlat24 = (x_1716 + 1.0f);
  let x_1718 : bool = u_xlatb67;
  if (x_1718) {
    let x_1722 : f32 = u_xlat24;
    x_1719 = x_1722;
  } else {
    let x_1725 : f32 = x_95.unity_LODFade.x;
    x_1719 = x_1725;
  }
  let x_1726 : f32 = x_1719;
  u_xlat67 = x_1726;
  let x_1727 : f32 = u_xlat67;
  u_xlatb24 = (0.5f >= x_1727);
  let x_1729 : vec3<f32> = u_xlat4;
  let x_1732 : vec4<f32> = x_158.x_ScreenParams;
  let x_1734 : vec3<f32> = (abs(x_1729) * vec3<f32>(x_1732.x, x_1732.y, x_1732.x));
  let x_1735 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1734.x, x_1734.y, x_1734.z, x_1735.w);
  let x_1740 : vec4<f32> = u_xlat3;
  u_xlatu3 = vec3<u32>(vec3<f32>(x_1740.x, x_1740.y, x_1740.z));
  let x_1745 : u32 = u_xlatu3.z;
  u_xlatu46 = (x_1745 * 1025u);
  let x_1749 : u32 = u_xlatu46;
  u_xlatu68 = (x_1749 >> 6u);
  let x_1753 : u32 = u_xlatu68;
  let x_1754 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1753 ^ x_1754));
  let x_1757 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1757) * 9u);
  let x_1761 : u32 = u_xlatu46;
  u_xlatu68 = (x_1761 >> 11u);
  let x_1764 : u32 = u_xlatu68;
  let x_1765 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1764 ^ x_1765));
  let x_1768 : i32 = u_xlati46;
  u_xlati46 = (x_1768 * 32769i);
  let x_1771 : i32 = u_xlati46;
  let x_1774 : u32 = u_xlatu3.y;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1771) ^ x_1774));
  let x_1777 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1777) * 1025u);
  let x_1780 : u32 = u_xlatu46;
  u_xlatu68 = (x_1780 >> 6u);
  let x_1782 : u32 = u_xlatu68;
  let x_1783 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1782 ^ x_1783));
  let x_1786 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1786) * 9u);
  let x_1789 : u32 = u_xlatu46;
  u_xlatu68 = (x_1789 >> 11u);
  let x_1791 : u32 = u_xlatu68;
  let x_1792 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1791 ^ x_1792));
  let x_1795 : i32 = u_xlati46;
  u_xlati46 = (x_1795 * 32769i);
  let x_1797 : i32 = u_xlati46;
  let x_1800 : u32 = u_xlatu3.x;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1797) ^ x_1800));
  let x_1803 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1803) * 1025u);
  let x_1806 : u32 = u_xlatu46;
  u_xlatu68 = (x_1806 >> 6u);
  let x_1808 : u32 = u_xlatu68;
  let x_1809 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1808 ^ x_1809));
  let x_1812 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1812) * 9u);
  let x_1815 : u32 = u_xlatu46;
  u_xlatu68 = (x_1815 >> 11u);
  let x_1817 : u32 = u_xlatu68;
  let x_1818 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1817 ^ x_1818));
  let x_1821 : i32 = u_xlati46;
  u_xlati46 = (x_1821 * 32769i);
  param = 1065353216i;
  let x_1828 : i32 = u_xlati46;
  param_1 = x_1828;
  param_2 = 0i;
  param_3 = 23i;
  let x_1831 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat46.x = bitcast<f32>(x_1831);
  let x_1835 : f32 = u_xlat46.x;
  u_xlat46.x = (x_1835 + -1.0f);
  let x_1839 : f32 = u_xlat46.x;
  u_xlat68 = (-(x_1839) + 1.0f);
  let x_1842 : bool = u_xlatb24;
  if (x_1842) {
    let x_1847 : f32 = u_xlat46.x;
    x_1843 = x_1847;
  } else {
    let x_1849 : f32 = u_xlat68;
    x_1843 = x_1849;
  }
  let x_1850 : f32 = x_1843;
  u_xlat24 = x_1850;
  let x_1851 : f32 = u_xlat67;
  let x_1853 : f32 = u_xlat24;
  u_xlat67 = ((x_1851 * 2.0f) + -(x_1853));
  let x_1856 : f32 = u_xlat67;
  let x_1858 : f32 = u_xlat6.w;
  u_xlat24 = (x_1856 * x_1858);
  let x_1860 : f32 = u_xlat24;
  u_xlatb46 = (x_1860 >= 0.400000006f);
  let x_1863 : bool = u_xlatb46;
  let x_1864 : f32 = u_xlat24;
  u_xlat46.x = select(0.0f, x_1864, x_1863);
  let x_1868 : f32 = u_xlat6.w;
  let x_1869 : f32 = u_xlat67;
  u_xlat67 = ((x_1868 * x_1869) + -0.400000006f);
  let x_1873 : f32 = u_xlat24;
  u_xlat68 = dpdxCoarse(x_1873);
  let x_1875 : f32 = u_xlat24;
  u_xlat24 = dpdyCoarse(x_1875);
  let x_1877 : f32 = u_xlat24;
  let x_1879 : f32 = u_xlat68;
  u_xlat24 = (abs(x_1877) + abs(x_1879));
  let x_1882 : f32 = u_xlat24;
  u_xlat24 = max(x_1882, 0.0001f);
  let x_1885 : f32 = u_xlat67;
  let x_1886 : f32 = u_xlat24;
  u_xlat67 = (x_1885 / x_1886);
  let x_1888 : f32 = u_xlat67;
  u_xlat67 = (x_1888 + 0.5f);
  let x_1890 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1890, 0.0f, 1.0f);
  let x_1893 : f32 = x_158.x_AlphaToMaskAvailable;
  u_xlatb24 = !((x_1893 == 0.0f));
  let x_1895 : bool = u_xlatb24;
  if (x_1895) {
    let x_1899 : f32 = u_xlat67;
    x_1896 = x_1899;
  } else {
    let x_1902 : f32 = u_xlat46.x;
    x_1896 = x_1902;
  }
  let x_1903 : f32 = x_1896;
  u_xlat67 = x_1903;
  let x_1904 : f32 = u_xlat67;
  u_xlat46.x = (x_1904 + -0.0001f);
  let x_1909 : f32 = u_xlat46.x;
  u_xlatb46 = (x_1909 < 0.0f);
  let x_1911 : bool = u_xlatb46;
  if (((select(0i, 1i, x_1911) * -1i) != 0i)) {
    discard;
  }
  let x_1919 : vec3<f32> = u_xlat22;
  let x_1920 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_1919 * vec3<f32>(x_1920.y, x_1920.y, x_1920.y));
  let x_1923 : vec3<f32> = u_xlat30;
  let x_1925 : vec4<f32> = vs_INTERP2;
  let x_1928 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1923.x, x_1923.x, x_1923.x) * vec3<f32>(x_1925.x, x_1925.y, x_1925.z)) + x_1928);
  let x_1930 : vec3<f32> = u_xlat30;
  let x_1932 : vec3<f32> = vs_INTERP1;
  let x_1934 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1930.z, x_1930.z, x_1930.z) * x_1932) + x_1934);
  let x_1936 : vec3<f32> = u_xlat22;
  let x_1937 : vec3<f32> = u_xlat22;
  u_xlat46.x = dot(x_1936, x_1937);
  let x_1941 : f32 = u_xlat46.x;
  u_xlat46.x = inverseSqrt(x_1941);
  let x_1944 : vec3<f32> = u_xlat22;
  let x_1945 : vec2<f32> = u_xlat46;
  u_xlat22 = (x_1944 * vec3<f32>(x_1945.x, x_1945.x, x_1945.x));
  let x_1955 : vec2<f32> = vs_INTERP5;
  let x_1957 : f32 = x_158.x_GlobalMipBias.x;
  let x_1958 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1955, x_1957);
  let x_1959 : vec3<f32> = vec3<f32>(x_1958.x, x_1958.y, x_1958.z);
  let x_1960 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1959.x, x_1959.y, x_1959.z, x_1960.w);
  let x_1963 : vec4<f32> = x_158.x_ScaledScreenParams;
  let x_1964 : vec2<f32> = vec2<f32>(x_1963.x, x_1963.y);
  u_xlat46 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1964.x, x_1964.y));
  let x_1969 : vec2<f32> = u_xlat46;
  let x_1970 : vec4<f32> = hlslcc_FragCoord;
  let x_1972 : vec2<f32> = (x_1969 * vec2<f32>(x_1970.x, x_1970.y));
  let x_1973 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_1972.x, x_1972.y, x_1973.z);
  let x_1976 : f32 = u_xlat4.y;
  let x_1979 : f32 = x_158.x_ScaleBiasRt.x;
  let x_1982 : f32 = x_158.x_ScaleBiasRt.y;
  u_xlat46.x = ((x_1976 * x_1979) + x_1982);
  let x_1986 : f32 = u_xlat46.x;
  u_xlat4.z = (-(x_1986) + 1.0f);
  let x_1991 : f32 = u_xlat8.x;
  u_xlat8.x = x_1991;
  let x_1994 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_1994, 0.0f, 1.0f);
  let x_1997 : f32 = u_xlat67;
  u_xlat67 = x_1997;
  let x_1998 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1998, 0.0f, 1.0f);
  let x_2000 : vec4<f32> = u_xlat7;
  let x_2004 : vec3<f32> = (vec3<f32>(x_2000.x, x_2000.y, x_2000.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2005 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2004.x, x_2004.y, x_2004.z, x_2005.w);
  let x_2008 : f32 = u_xlat8.x;
  u_xlat46.x = (-(x_2008) + 1.0f);
  let x_2013 : f32 = u_xlat46.x;
  let x_2015 : f32 = u_xlat46.x;
  u_xlat68 = (x_2013 * x_2015);
  let x_2017 : f32 = u_xlat68;
  u_xlat68 = max(x_2017, 0.0078125f);
  let x_2021 : f32 = u_xlat68;
  let x_2022 : f32 = u_xlat68;
  u_xlat69 = (x_2021 * x_2022);
  let x_2026 : f32 = u_xlat8.x;
  u_xlat26.x = (x_2026 + 0.040000021f);
  let x_2031 : f32 = u_xlat26.x;
  u_xlat4.y = min(x_2031, 1.0f);
  let x_2034 : f32 = u_xlat68;
  u_xlat70 = ((x_2034 * 4.0f) + 2.0f);
  let x_2043 : vec3<f32> = u_xlat4;
  let x_2046 : f32 = x_158.x_GlobalMipBias.x;
  let x_2047 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2043.x, x_2043.z), x_2046);
  u_xlat4.x = x_2047.x;
  let x_2050 : vec3<f32> = u_xlat4;
  u_xlat26 = (vec2<f32>(x_2050.y, x_2050.x) + vec2<f32>(-0.039999999f, -1.0f));
  let x_2058 : f32 = x_158.x_AmbientOcclusionParam.w;
  let x_2060 : f32 = u_xlat26.y;
  u_xlat48 = ((x_2058 * x_2060) + 1.0f);
  let x_2064 : f32 = u_xlat4.x;
  let x_2066 : f32 = vs_INTERP4.w;
  u_xlat4.x = min(x_2064, x_2066);
  let x_2069 : bool = u_xlatb0;
  if (x_2069) {
    let x_2073 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2073 == 1.0f);
    let x_2075 : bool = u_xlatb0;
    if (x_2075) {
      let x_2079 : vec4<f32> = vs_INTERP9;
      let x_2082 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2079.x, x_2079.y, x_2079.x, x_2079.y) + x_2082);
      let x_2085 : vec4<f32> = u_xlat7;
      let x_2086 : vec2<f32> = vec2<f32>(x_2085.x, x_2085.y);
      let x_2088 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2086.x, x_2086.y, x_2088);
      let x_2095 : vec3<f32> = txVec30;
      let x_2097 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2095.xy, x_2095.z);
      u_xlat8.x = x_2097;
      let x_2100 : vec4<f32> = u_xlat7;
      let x_2101 : vec2<f32> = vec2<f32>(x_2100.z, x_2100.w);
      let x_2103 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2101.x, x_2101.y, x_2103);
      let x_2110 : vec3<f32> = txVec31;
      let x_2112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2110.xy, x_2110.z);
      u_xlat8.y = x_2112;
      let x_2114 : vec4<f32> = vs_INTERP9;
      let x_2117 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2114.x, x_2114.y, x_2114.x, x_2114.y) + x_2117);
      let x_2120 : vec4<f32> = u_xlat7;
      let x_2121 : vec2<f32> = vec2<f32>(x_2120.x, x_2120.y);
      let x_2123 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2121.x, x_2121.y, x_2123);
      let x_2130 : vec3<f32> = txVec32;
      let x_2132 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2130.xy, x_2130.z);
      u_xlat8.z = x_2132;
      let x_2135 : vec4<f32> = u_xlat7;
      let x_2136 : vec2<f32> = vec2<f32>(x_2135.z, x_2135.w);
      let x_2138 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2136.x, x_2136.y, x_2138);
      let x_2145 : vec3<f32> = txVec33;
      let x_2147 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2145.xy, x_2145.z);
      u_xlat8.w = x_2147;
      let x_2149 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2149, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2155 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb71 = (x_2155 == 2.0f);
      let x_2157 : bool = u_xlatb71;
      if (x_2157) {
        let x_2160 : vec4<f32> = vs_INTERP9;
        let x_2163 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2166 : vec2<f32> = ((vec2<f32>(x_2160.x, x_2160.y) * vec2<f32>(x_2163.z, x_2163.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2167 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2166.x, x_2166.y, x_2167.z, x_2167.w);
        let x_2169 : vec4<f32> = u_xlat7;
        let x_2171 : vec2<f32> = floor(vec2<f32>(x_2169.x, x_2169.y));
        let x_2172 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2171.x, x_2171.y, x_2172.z, x_2172.w);
        let x_2175 : vec4<f32> = vs_INTERP9;
        let x_2178 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2181 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2175.x, x_2175.y) * vec2<f32>(x_2178.z, x_2178.w)) + -(vec2<f32>(x_2181.x, x_2181.y)));
        let x_2185 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2185.x, x_2185.x, x_2185.y, x_2185.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2188 : vec4<f32> = u_xlat8;
        let x_2190 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2188.x, x_2188.x, x_2188.z, x_2188.z) * vec4<f32>(x_2190.x, x_2190.x, x_2190.z, x_2190.z));
        let x_2193 : vec4<f32> = u_xlat9;
        let x_2195 : vec2<f32> = (vec2<f32>(x_2193.y, x_2193.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2196 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2195.x, x_2196.y, x_2195.y, x_2196.w);
        let x_2198 : vec4<f32> = u_xlat9;
        let x_2201 : vec2<f32> = u_xlat51;
        let x_2203 : vec2<f32> = ((vec2<f32>(x_2198.x, x_2198.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2201));
        let x_2204 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2203.x, x_2203.y, x_2204.z, x_2204.w);
        let x_2207 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_2207) + vec2<f32>(1.0f, 1.0f));
        let x_2210 : vec2<f32> = u_xlat51;
        let x_2211 : vec2<f32> = min(x_2210, vec2<f32>(0.0f, 0.0f));
        let x_2212 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2211.x, x_2211.y, x_2212.z, x_2212.w);
        let x_2214 : vec4<f32> = u_xlat10;
        let x_2217 : vec4<f32> = u_xlat10;
        let x_2220 : vec2<f32> = u_xlat53;
        let x_2221 : vec2<f32> = ((-(vec2<f32>(x_2214.x, x_2214.y)) * vec2<f32>(x_2217.x, x_2217.y)) + x_2220);
        let x_2222 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2221.x, x_2221.y, x_2222.z, x_2222.w);
        let x_2224 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_2224, vec2<f32>(0.0f, 0.0f));
        let x_2226 : vec2<f32> = u_xlat51;
        let x_2228 : vec2<f32> = u_xlat51;
        let x_2230 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_2226) * x_2228) + vec2<f32>(x_2230.y, x_2230.w));
        let x_2233 : vec4<f32> = u_xlat10;
        let x_2235 : vec2<f32> = (vec2<f32>(x_2233.x, x_2233.y) + vec2<f32>(1.0f, 1.0f));
        let x_2236 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2235.x, x_2235.y, x_2236.z, x_2236.w);
        let x_2238 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2238 + vec2<f32>(1.0f, 1.0f));
        let x_2240 : vec4<f32> = u_xlat9;
        let x_2242 : vec2<f32> = (vec2<f32>(x_2240.x, x_2240.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2243 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2242.x, x_2242.y, x_2243.z, x_2243.w);
        let x_2245 : vec2<f32> = u_xlat53;
        let x_2246 : vec2<f32> = (x_2245 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2247 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2246.x, x_2246.y, x_2247.z, x_2247.w);
        let x_2249 : vec4<f32> = u_xlat10;
        let x_2251 : vec2<f32> = (vec2<f32>(x_2249.x, x_2249.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2252 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2251.x, x_2251.y, x_2252.z, x_2252.w);
        let x_2254 : vec2<f32> = u_xlat51;
        let x_2255 : vec2<f32> = (x_2254 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2256 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2255.x, x_2255.y, x_2256.z, x_2256.w);
        let x_2258 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_2258.y, x_2258.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2262 : f32 = u_xlat10.x;
        u_xlat11.z = x_2262;
        let x_2265 : f32 = u_xlat51.x;
        u_xlat11.w = x_2265;
        let x_2268 : f32 = u_xlat12.x;
        u_xlat9.z = x_2268;
        let x_2271 : f32 = u_xlat8.x;
        u_xlat9.w = x_2271;
        let x_2273 : vec4<f32> = u_xlat9;
        let x_2275 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2273.z, x_2273.w, x_2273.x, x_2273.z) + vec4<f32>(x_2275.z, x_2275.w, x_2275.x, x_2275.z));
        let x_2279 : f32 = u_xlat11.y;
        u_xlat10.z = x_2279;
        let x_2282 : f32 = u_xlat51.y;
        u_xlat10.w = x_2282;
        let x_2285 : f32 = u_xlat9.y;
        u_xlat12.z = x_2285;
        let x_2288 : f32 = u_xlat8.z;
        u_xlat12.w = x_2288;
        let x_2290 : vec4<f32> = u_xlat10;
        let x_2292 : vec4<f32> = u_xlat12;
        let x_2294 : vec3<f32> = (vec3<f32>(x_2290.z, x_2290.y, x_2290.w) + vec3<f32>(x_2292.z, x_2292.y, x_2292.w));
        let x_2295 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2294.x, x_2294.y, x_2294.z, x_2295.w);
        let x_2297 : vec4<f32> = u_xlat9;
        let x_2299 : vec4<f32> = u_xlat13;
        let x_2301 : vec3<f32> = (vec3<f32>(x_2297.x, x_2297.z, x_2297.w) / vec3<f32>(x_2299.z, x_2299.w, x_2299.y));
        let x_2302 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2301.x, x_2301.y, x_2301.z, x_2302.w);
        let x_2304 : vec4<f32> = u_xlat9;
        let x_2306 : vec3<f32> = (vec3<f32>(x_2304.x, x_2304.y, x_2304.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2307 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2306.x, x_2306.y, x_2306.z, x_2307.w);
        let x_2309 : vec4<f32> = u_xlat12;
        let x_2311 : vec4<f32> = u_xlat8;
        let x_2313 : vec3<f32> = (vec3<f32>(x_2309.z, x_2309.y, x_2309.w) / vec3<f32>(x_2311.x, x_2311.y, x_2311.z));
        let x_2314 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2313.x, x_2313.y, x_2313.z, x_2314.w);
        let x_2316 : vec4<f32> = u_xlat10;
        let x_2318 : vec3<f32> = (vec3<f32>(x_2316.x, x_2316.y, x_2316.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2319 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2318.x, x_2318.y, x_2318.z, x_2319.w);
        let x_2321 : vec4<f32> = u_xlat9;
        let x_2324 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2326 : vec3<f32> = (vec3<f32>(x_2321.y, x_2321.x, x_2321.z) * vec3<f32>(x_2324.x, x_2324.x, x_2324.x));
        let x_2327 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2326.x, x_2326.y, x_2326.z, x_2327.w);
        let x_2329 : vec4<f32> = u_xlat10;
        let x_2332 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2334 : vec3<f32> = (vec3<f32>(x_2329.x, x_2329.y, x_2329.z) * vec3<f32>(x_2332.y, x_2332.y, x_2332.y));
        let x_2335 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2334.x, x_2334.y, x_2334.z, x_2335.w);
        let x_2338 : f32 = u_xlat10.x;
        u_xlat9.w = x_2338;
        let x_2340 : vec4<f32> = u_xlat7;
        let x_2343 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2346 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2340.x, x_2340.y, x_2340.x, x_2340.y) * vec4<f32>(x_2343.x, x_2343.y, x_2343.x, x_2343.y)) + vec4<f32>(x_2346.y, x_2346.w, x_2346.x, x_2346.w));
        let x_2349 : vec4<f32> = u_xlat7;
        let x_2352 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2355 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_2349.x, x_2349.y) * vec2<f32>(x_2352.x, x_2352.y)) + vec2<f32>(x_2355.z, x_2355.w));
        let x_2359 : f32 = u_xlat9.y;
        u_xlat10.w = x_2359;
        let x_2361 : vec4<f32> = u_xlat10;
        let x_2362 : vec2<f32> = vec2<f32>(x_2361.y, x_2361.z);
        let x_2363 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2363.x, x_2362.x, x_2363.z, x_2362.y);
        let x_2365 : vec4<f32> = u_xlat7;
        let x_2368 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2371 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2365.x, x_2365.y, x_2365.x, x_2365.y) * vec4<f32>(x_2368.x, x_2368.y, x_2368.x, x_2368.y)) + vec4<f32>(x_2371.x, x_2371.y, x_2371.z, x_2371.y));
        let x_2374 : vec4<f32> = u_xlat7;
        let x_2377 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2380 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2374.x, x_2374.y, x_2374.x, x_2374.y) * vec4<f32>(x_2377.x, x_2377.y, x_2377.x, x_2377.y)) + vec4<f32>(x_2380.w, x_2380.y, x_2380.w, x_2380.z));
        let x_2383 : vec4<f32> = u_xlat7;
        let x_2386 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2389 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2383.x, x_2383.y, x_2383.x, x_2383.y) * vec4<f32>(x_2386.x, x_2386.y, x_2386.x, x_2386.y)) + vec4<f32>(x_2389.x, x_2389.w, x_2389.z, x_2389.w));
        let x_2392 : vec4<f32> = u_xlat8;
        let x_2394 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2392.x, x_2392.x, x_2392.x, x_2392.y) * vec4<f32>(x_2394.z, x_2394.w, x_2394.y, x_2394.z));
        let x_2397 : vec4<f32> = u_xlat8;
        let x_2399 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2397.y, x_2397.y, x_2397.z, x_2397.z) * x_2399);
        let x_2403 : f32 = u_xlat8.z;
        let x_2405 : f32 = u_xlat13.y;
        u_xlat71 = (x_2403 * x_2405);
        let x_2408 : vec4<f32> = u_xlat11;
        let x_2409 : vec2<f32> = vec2<f32>(x_2408.x, x_2408.y);
        let x_2411 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2409.x, x_2409.y, x_2411);
        let x_2419 : vec3<f32> = txVec34;
        let x_2421 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2419.xy, x_2419.z);
        u_xlat72 = x_2421;
        let x_2423 : vec4<f32> = u_xlat11;
        let x_2424 : vec2<f32> = vec2<f32>(x_2423.z, x_2423.w);
        let x_2426 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2424.x, x_2424.y, x_2426);
        let x_2433 : vec3<f32> = txVec35;
        let x_2435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2433.xy, x_2433.z);
        u_xlat7.x = x_2435;
        let x_2438 : f32 = u_xlat7.x;
        let x_2440 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2438 * x_2440);
        let x_2444 : f32 = u_xlat14.x;
        let x_2445 : f32 = u_xlat72;
        let x_2448 : f32 = u_xlat7.x;
        u_xlat72 = ((x_2444 * x_2445) + x_2448);
        let x_2451 : vec2<f32> = u_xlat51;
        let x_2453 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2451.x, x_2451.y, x_2453);
        let x_2460 : vec3<f32> = txVec36;
        let x_2462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2460.xy, x_2460.z);
        u_xlat7.x = x_2462;
        let x_2465 : f32 = u_xlat14.z;
        let x_2467 : f32 = u_xlat7.x;
        let x_2469 : f32 = u_xlat72;
        u_xlat72 = ((x_2465 * x_2467) + x_2469);
        let x_2472 : vec4<f32> = u_xlat10;
        let x_2473 : vec2<f32> = vec2<f32>(x_2472.x, x_2472.y);
        let x_2475 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2473.x, x_2473.y, x_2475);
        let x_2482 : vec3<f32> = txVec37;
        let x_2484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2482.xy, x_2482.z);
        u_xlat7.x = x_2484;
        let x_2487 : f32 = u_xlat14.w;
        let x_2489 : f32 = u_xlat7.x;
        let x_2491 : f32 = u_xlat72;
        u_xlat72 = ((x_2487 * x_2489) + x_2491);
        let x_2494 : vec4<f32> = u_xlat12;
        let x_2495 : vec2<f32> = vec2<f32>(x_2494.x, x_2494.y);
        let x_2497 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2495.x, x_2495.y, x_2497);
        let x_2504 : vec3<f32> = txVec38;
        let x_2506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2504.xy, x_2504.z);
        u_xlat7.x = x_2506;
        let x_2509 : f32 = u_xlat15.x;
        let x_2511 : f32 = u_xlat7.x;
        let x_2513 : f32 = u_xlat72;
        u_xlat72 = ((x_2509 * x_2511) + x_2513);
        let x_2516 : vec4<f32> = u_xlat12;
        let x_2517 : vec2<f32> = vec2<f32>(x_2516.z, x_2516.w);
        let x_2519 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2517.x, x_2517.y, x_2519);
        let x_2526 : vec3<f32> = txVec39;
        let x_2528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2526.xy, x_2526.z);
        u_xlat7.x = x_2528;
        let x_2531 : f32 = u_xlat15.y;
        let x_2533 : f32 = u_xlat7.x;
        let x_2535 : f32 = u_xlat72;
        u_xlat72 = ((x_2531 * x_2533) + x_2535);
        let x_2538 : vec4<f32> = u_xlat10;
        let x_2539 : vec2<f32> = vec2<f32>(x_2538.z, x_2538.w);
        let x_2541 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2539.x, x_2539.y, x_2541);
        let x_2548 : vec3<f32> = txVec40;
        let x_2550 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2548.xy, x_2548.z);
        u_xlat7.x = x_2550;
        let x_2553 : f32 = u_xlat15.z;
        let x_2555 : f32 = u_xlat7.x;
        let x_2557 : f32 = u_xlat72;
        u_xlat72 = ((x_2553 * x_2555) + x_2557);
        let x_2560 : vec4<f32> = u_xlat9;
        let x_2561 : vec2<f32> = vec2<f32>(x_2560.x, x_2560.y);
        let x_2563 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2561.x, x_2561.y, x_2563);
        let x_2570 : vec3<f32> = txVec41;
        let x_2572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2570.xy, x_2570.z);
        u_xlat7.x = x_2572;
        let x_2575 : f32 = u_xlat15.w;
        let x_2577 : f32 = u_xlat7.x;
        let x_2579 : f32 = u_xlat72;
        u_xlat72 = ((x_2575 * x_2577) + x_2579);
        let x_2582 : vec4<f32> = u_xlat9;
        let x_2583 : vec2<f32> = vec2<f32>(x_2582.z, x_2582.w);
        let x_2585 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2583.x, x_2583.y, x_2585);
        let x_2592 : vec3<f32> = txVec42;
        let x_2594 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2592.xy, x_2592.z);
        u_xlat7.x = x_2594;
        let x_2596 : f32 = u_xlat71;
        let x_2598 : f32 = u_xlat7.x;
        let x_2600 : f32 = u_xlat72;
        u_xlat0.x = ((x_2596 * x_2598) + x_2600);
      } else {
        let x_2604 : vec4<f32> = vs_INTERP9;
        let x_2607 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2610 : vec2<f32> = ((vec2<f32>(x_2604.x, x_2604.y) * vec2<f32>(x_2607.z, x_2607.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2611 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2610.x, x_2610.y, x_2611.z, x_2611.w);
        let x_2613 : vec4<f32> = u_xlat7;
        let x_2615 : vec2<f32> = floor(vec2<f32>(x_2613.x, x_2613.y));
        let x_2616 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2615.x, x_2615.y, x_2616.z, x_2616.w);
        let x_2618 : vec4<f32> = vs_INTERP9;
        let x_2621 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2624 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2618.x, x_2618.y) * vec2<f32>(x_2621.z, x_2621.w)) + -(vec2<f32>(x_2624.x, x_2624.y)));
        let x_2628 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2628.x, x_2628.x, x_2628.y, x_2628.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2631 : vec4<f32> = u_xlat8;
        let x_2633 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2631.x, x_2631.x, x_2631.z, x_2631.z) * vec4<f32>(x_2633.x, x_2633.x, x_2633.z, x_2633.z));
        let x_2636 : vec4<f32> = u_xlat9;
        let x_2638 : vec2<f32> = (vec2<f32>(x_2636.y, x_2636.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2639 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2639.x, x_2638.x, x_2639.z, x_2638.y);
        let x_2641 : vec4<f32> = u_xlat9;
        let x_2644 : vec2<f32> = u_xlat51;
        let x_2646 : vec2<f32> = ((vec2<f32>(x_2641.x, x_2641.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2644));
        let x_2647 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2646.x, x_2647.y, x_2646.y, x_2647.w);
        let x_2649 : vec2<f32> = u_xlat51;
        let x_2651 : vec2<f32> = (-(x_2649) + vec2<f32>(1.0f, 1.0f));
        let x_2652 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2651.x, x_2651.y, x_2652.z, x_2652.w);
        let x_2654 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_2654, vec2<f32>(0.0f, 0.0f));
        let x_2656 : vec2<f32> = u_xlat53;
        let x_2658 : vec2<f32> = u_xlat53;
        let x_2660 : vec4<f32> = u_xlat9;
        let x_2662 : vec2<f32> = ((-(x_2656) * x_2658) + vec2<f32>(x_2660.x, x_2660.y));
        let x_2663 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2662.x, x_2662.y, x_2663.z, x_2663.w);
        let x_2665 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_2665, vec2<f32>(0.0f, 0.0f));
        let x_2667 : vec2<f32> = u_xlat53;
        let x_2669 : vec2<f32> = u_xlat53;
        let x_2671 : vec4<f32> = u_xlat8;
        let x_2673 : vec2<f32> = ((-(x_2667) * x_2669) + vec2<f32>(x_2671.y, x_2671.w));
        let x_2674 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2673.x, x_2674.y, x_2673.y);
        let x_2676 : vec4<f32> = u_xlat9;
        let x_2678 : vec2<f32> = (vec2<f32>(x_2676.x, x_2676.y) + vec2<f32>(2.0f, 2.0f));
        let x_2679 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2678.x, x_2678.y, x_2679.z, x_2679.w);
        let x_2681 : vec3<f32> = u_xlat30;
        let x_2683 : vec2<f32> = (vec2<f32>(x_2681.x, x_2681.z) + vec2<f32>(2.0f, 2.0f));
        let x_2684 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2684.x, x_2683.x, x_2684.z, x_2683.y);
        let x_2687 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2687 * 0.081632003f);
        let x_2690 : vec4<f32> = u_xlat8;
        let x_2692 : vec3<f32> = (vec3<f32>(x_2690.z, x_2690.x, x_2690.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2693 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2692.x, x_2692.y, x_2692.z, x_2693.w);
        let x_2695 : vec4<f32> = u_xlat9;
        let x_2697 : vec2<f32> = (vec2<f32>(x_2695.x, x_2695.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2698 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2697.x, x_2697.y, x_2698.z, x_2698.w);
        let x_2701 : f32 = u_xlat12.y;
        u_xlat11.x = x_2701;
        let x_2703 : vec2<f32> = u_xlat51;
        let x_2706 : vec2<f32> = ((vec2<f32>(x_2703.x, x_2703.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2707 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2707.x, x_2706.x, x_2707.z, x_2706.y);
        let x_2709 : vec2<f32> = u_xlat51;
        let x_2712 : vec2<f32> = ((vec2<f32>(x_2709.x, x_2709.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2713 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2712.x, x_2713.y, x_2712.y, x_2713.w);
        let x_2716 : f32 = u_xlat8.x;
        u_xlat9.y = x_2716;
        let x_2719 : f32 = u_xlat10.y;
        u_xlat9.w = x_2719;
        let x_2721 : vec4<f32> = u_xlat9;
        let x_2722 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2721 + x_2722);
        let x_2724 : vec2<f32> = u_xlat51;
        let x_2727 : vec2<f32> = ((vec2<f32>(x_2724.y, x_2724.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2728 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2728.x, x_2727.x, x_2728.z, x_2727.y);
        let x_2730 : vec2<f32> = u_xlat51;
        let x_2733 : vec2<f32> = ((vec2<f32>(x_2730.y, x_2730.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2734 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2733.x, x_2734.y, x_2733.y, x_2734.w);
        let x_2737 : f32 = u_xlat8.y;
        u_xlat10.y = x_2737;
        let x_2739 : vec4<f32> = u_xlat10;
        let x_2740 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2739 + x_2740);
        let x_2742 : vec4<f32> = u_xlat9;
        let x_2743 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2742 / x_2743);
        let x_2745 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2745 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2747 : vec4<f32> = u_xlat10;
        let x_2748 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2747 / x_2748);
        let x_2750 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2750 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2752 : vec4<f32> = u_xlat9;
        let x_2755 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2752.w, x_2752.x, x_2752.y, x_2752.z) * vec4<f32>(x_2755.x, x_2755.x, x_2755.x, x_2755.x));
        let x_2758 : vec4<f32> = u_xlat10;
        let x_2761 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2758.x, x_2758.w, x_2758.y, x_2758.z) * vec4<f32>(x_2761.y, x_2761.y, x_2761.y, x_2761.y));
        let x_2764 : vec4<f32> = u_xlat9;
        let x_2765 : vec3<f32> = vec3<f32>(x_2764.y, x_2764.z, x_2764.w);
        let x_2766 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2765.x, x_2766.y, x_2765.y, x_2765.z);
        let x_2769 : f32 = u_xlat10.x;
        u_xlat12.y = x_2769;
        let x_2771 : vec4<f32> = u_xlat7;
        let x_2774 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2777 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2771.x, x_2771.y, x_2771.x, x_2771.y) * vec4<f32>(x_2774.x, x_2774.y, x_2774.x, x_2774.y)) + vec4<f32>(x_2777.x, x_2777.y, x_2777.z, x_2777.y));
        let x_2780 : vec4<f32> = u_xlat7;
        let x_2783 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2786 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_2780.x, x_2780.y) * vec2<f32>(x_2783.x, x_2783.y)) + vec2<f32>(x_2786.w, x_2786.y));
        let x_2790 : f32 = u_xlat12.y;
        u_xlat9.y = x_2790;
        let x_2793 : f32 = u_xlat10.z;
        u_xlat12.y = x_2793;
        let x_2795 : vec4<f32> = u_xlat7;
        let x_2798 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2801 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2795.x, x_2795.y, x_2795.x, x_2795.y) * vec4<f32>(x_2798.x, x_2798.y, x_2798.x, x_2798.y)) + vec4<f32>(x_2801.x, x_2801.y, x_2801.z, x_2801.y));
        let x_2804 : vec4<f32> = u_xlat7;
        let x_2807 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2810 : vec4<f32> = u_xlat12;
        let x_2812 : vec2<f32> = ((vec2<f32>(x_2804.x, x_2804.y) * vec2<f32>(x_2807.x, x_2807.y)) + vec2<f32>(x_2810.w, x_2810.y));
        let x_2813 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2812.x, x_2812.y, x_2813.z, x_2813.w);
        let x_2816 : f32 = u_xlat12.y;
        u_xlat9.z = x_2816;
        let x_2818 : vec4<f32> = u_xlat7;
        let x_2821 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2824 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2818.x, x_2818.y, x_2818.x, x_2818.y) * vec4<f32>(x_2821.x, x_2821.y, x_2821.x, x_2821.y)) + vec4<f32>(x_2824.x, x_2824.y, x_2824.x, x_2824.z));
        let x_2828 : f32 = u_xlat10.w;
        u_xlat12.y = x_2828;
        let x_2830 : vec4<f32> = u_xlat7;
        let x_2833 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2836 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2830.x, x_2830.y, x_2830.x, x_2830.y) * vec4<f32>(x_2833.x, x_2833.y, x_2833.x, x_2833.y)) + vec4<f32>(x_2836.x, x_2836.y, x_2836.z, x_2836.y));
        let x_2839 : vec4<f32> = u_xlat7;
        let x_2842 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2845 : vec4<f32> = u_xlat12;
        let x_2847 : vec2<f32> = ((vec2<f32>(x_2839.x, x_2839.y) * vec2<f32>(x_2842.x, x_2842.y)) + vec2<f32>(x_2845.w, x_2845.y));
        let x_2848 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2847.x, x_2847.y, x_2848.z);
        let x_2851 : f32 = u_xlat12.y;
        u_xlat9.w = x_2851;
        let x_2854 : vec4<f32> = u_xlat7;
        let x_2857 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2860 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_2854.x, x_2854.y) * vec2<f32>(x_2857.x, x_2857.y)) + vec2<f32>(x_2860.x, x_2860.w));
        let x_2863 : vec4<f32> = u_xlat12;
        let x_2864 : vec3<f32> = vec3<f32>(x_2863.x, x_2863.z, x_2863.w);
        let x_2865 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2864.x, x_2865.y, x_2864.y, x_2864.z);
        let x_2867 : vec4<f32> = u_xlat7;
        let x_2870 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2873 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2867.x, x_2867.y, x_2867.x, x_2867.y) * vec4<f32>(x_2870.x, x_2870.y, x_2870.x, x_2870.y)) + vec4<f32>(x_2873.x, x_2873.y, x_2873.z, x_2873.y));
        let x_2876 : vec4<f32> = u_xlat7;
        let x_2879 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2882 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_2876.x, x_2876.y) * vec2<f32>(x_2879.x, x_2879.y)) + vec2<f32>(x_2882.w, x_2882.y));
        let x_2886 : f32 = u_xlat9.x;
        u_xlat10.x = x_2886;
        let x_2888 : vec4<f32> = u_xlat7;
        let x_2891 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2894 : vec4<f32> = u_xlat10;
        let x_2896 : vec2<f32> = ((vec2<f32>(x_2888.x, x_2888.y) * vec2<f32>(x_2891.x, x_2891.y)) + vec2<f32>(x_2894.x, x_2894.y));
        let x_2897 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2896.x, x_2896.y, x_2897.z, x_2897.w);
        let x_2899 : vec4<f32> = u_xlat8;
        let x_2901 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2899.x, x_2899.x, x_2899.x, x_2899.x) * x_2901);
        let x_2903 : vec4<f32> = u_xlat8;
        let x_2905 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2903.y, x_2903.y, x_2903.y, x_2903.y) * x_2905);
        let x_2907 : vec4<f32> = u_xlat8;
        let x_2909 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2907.z, x_2907.z, x_2907.z, x_2907.z) * x_2909);
        let x_2911 : vec4<f32> = u_xlat8;
        let x_2913 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2911.w, x_2911.w, x_2911.w, x_2911.w) * x_2913);
        let x_2916 : vec4<f32> = u_xlat13;
        let x_2917 : vec2<f32> = vec2<f32>(x_2916.x, x_2916.y);
        let x_2919 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2917.x, x_2917.y, x_2919);
        let x_2926 : vec3<f32> = txVec43;
        let x_2928 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2926.xy, x_2926.z);
        u_xlat71 = x_2928;
        let x_2930 : vec4<f32> = u_xlat13;
        let x_2931 : vec2<f32> = vec2<f32>(x_2930.z, x_2930.w);
        let x_2933 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2931.x, x_2931.y, x_2933);
        let x_2940 : vec3<f32> = txVec44;
        let x_2942 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2940.xy, x_2940.z);
        u_xlat72 = x_2942;
        let x_2943 : f32 = u_xlat72;
        let x_2945 : f32 = u_xlat18.y;
        u_xlat72 = (x_2943 * x_2945);
        let x_2948 : f32 = u_xlat18.x;
        let x_2949 : f32 = u_xlat71;
        let x_2951 : f32 = u_xlat72;
        u_xlat71 = ((x_2948 * x_2949) + x_2951);
        let x_2954 : vec2<f32> = u_xlat51;
        let x_2956 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2954.x, x_2954.y, x_2956);
        let x_2963 : vec3<f32> = txVec45;
        let x_2965 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2963.xy, x_2963.z);
        u_xlat72 = x_2965;
        let x_2967 : f32 = u_xlat18.z;
        let x_2968 : f32 = u_xlat72;
        let x_2970 : f32 = u_xlat71;
        u_xlat71 = ((x_2967 * x_2968) + x_2970);
        let x_2973 : vec4<f32> = u_xlat16;
        let x_2974 : vec2<f32> = vec2<f32>(x_2973.x, x_2973.y);
        let x_2976 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2974.x, x_2974.y, x_2976);
        let x_2983 : vec3<f32> = txVec46;
        let x_2985 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2983.xy, x_2983.z);
        u_xlat72 = x_2985;
        let x_2987 : f32 = u_xlat18.w;
        let x_2988 : f32 = u_xlat72;
        let x_2990 : f32 = u_xlat71;
        u_xlat71 = ((x_2987 * x_2988) + x_2990);
        let x_2993 : vec4<f32> = u_xlat14;
        let x_2994 : vec2<f32> = vec2<f32>(x_2993.x, x_2993.y);
        let x_2996 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2994.x, x_2994.y, x_2996);
        let x_3003 : vec3<f32> = txVec47;
        let x_3005 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3003.xy, x_3003.z);
        u_xlat72 = x_3005;
        let x_3007 : f32 = u_xlat19.x;
        let x_3008 : f32 = u_xlat72;
        let x_3010 : f32 = u_xlat71;
        u_xlat71 = ((x_3007 * x_3008) + x_3010);
        let x_3013 : vec4<f32> = u_xlat14;
        let x_3014 : vec2<f32> = vec2<f32>(x_3013.z, x_3013.w);
        let x_3016 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3014.x, x_3014.y, x_3016);
        let x_3023 : vec3<f32> = txVec48;
        let x_3025 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3023.xy, x_3023.z);
        u_xlat72 = x_3025;
        let x_3027 : f32 = u_xlat19.y;
        let x_3028 : f32 = u_xlat72;
        let x_3030 : f32 = u_xlat71;
        u_xlat71 = ((x_3027 * x_3028) + x_3030);
        let x_3033 : vec4<f32> = u_xlat15;
        let x_3034 : vec2<f32> = vec2<f32>(x_3033.x, x_3033.y);
        let x_3036 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3034.x, x_3034.y, x_3036);
        let x_3043 : vec3<f32> = txVec49;
        let x_3045 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3043.xy, x_3043.z);
        u_xlat72 = x_3045;
        let x_3047 : f32 = u_xlat19.z;
        let x_3048 : f32 = u_xlat72;
        let x_3050 : f32 = u_xlat71;
        u_xlat71 = ((x_3047 * x_3048) + x_3050);
        let x_3053 : vec4<f32> = u_xlat16;
        let x_3054 : vec2<f32> = vec2<f32>(x_3053.z, x_3053.w);
        let x_3056 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3054.x, x_3054.y, x_3056);
        let x_3063 : vec3<f32> = txVec50;
        let x_3065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3063.xy, x_3063.z);
        u_xlat72 = x_3065;
        let x_3067 : f32 = u_xlat19.w;
        let x_3068 : f32 = u_xlat72;
        let x_3070 : f32 = u_xlat71;
        u_xlat71 = ((x_3067 * x_3068) + x_3070);
        let x_3073 : vec4<f32> = u_xlat17;
        let x_3074 : vec2<f32> = vec2<f32>(x_3073.x, x_3073.y);
        let x_3076 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3074.x, x_3074.y, x_3076);
        let x_3083 : vec3<f32> = txVec51;
        let x_3085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3083.xy, x_3083.z);
        u_xlat72 = x_3085;
        let x_3087 : f32 = u_xlat20.x;
        let x_3088 : f32 = u_xlat72;
        let x_3090 : f32 = u_xlat71;
        u_xlat71 = ((x_3087 * x_3088) + x_3090);
        let x_3093 : vec4<f32> = u_xlat17;
        let x_3094 : vec2<f32> = vec2<f32>(x_3093.z, x_3093.w);
        let x_3096 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3094.x, x_3094.y, x_3096);
        let x_3103 : vec3<f32> = txVec52;
        let x_3105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3103.xy, x_3103.z);
        u_xlat72 = x_3105;
        let x_3107 : f32 = u_xlat20.y;
        let x_3108 : f32 = u_xlat72;
        let x_3110 : f32 = u_xlat71;
        u_xlat71 = ((x_3107 * x_3108) + x_3110);
        let x_3113 : vec3<f32> = u_xlat31;
        let x_3114 : vec2<f32> = vec2<f32>(x_3113.x, x_3113.y);
        let x_3116 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3114.x, x_3114.y, x_3116);
        let x_3123 : vec3<f32> = txVec53;
        let x_3125 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3123.xy, x_3123.z);
        u_xlat72 = x_3125;
        let x_3127 : f32 = u_xlat20.z;
        let x_3128 : f32 = u_xlat72;
        let x_3130 : f32 = u_xlat71;
        u_xlat71 = ((x_3127 * x_3128) + x_3130);
        let x_3133 : vec2<f32> = u_xlat59;
        let x_3135 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3133.x, x_3133.y, x_3135);
        let x_3142 : vec3<f32> = txVec54;
        let x_3144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3142.xy, x_3142.z);
        u_xlat72 = x_3144;
        let x_3146 : f32 = u_xlat20.w;
        let x_3147 : f32 = u_xlat72;
        let x_3149 : f32 = u_xlat71;
        u_xlat71 = ((x_3146 * x_3147) + x_3149);
        let x_3152 : vec4<f32> = u_xlat12;
        let x_3153 : vec2<f32> = vec2<f32>(x_3152.x, x_3152.y);
        let x_3155 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3153.x, x_3153.y, x_3155);
        let x_3162 : vec3<f32> = txVec55;
        let x_3164 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3162.xy, x_3162.z);
        u_xlat72 = x_3164;
        let x_3166 : f32 = u_xlat8.x;
        let x_3167 : f32 = u_xlat72;
        let x_3169 : f32 = u_xlat71;
        u_xlat71 = ((x_3166 * x_3167) + x_3169);
        let x_3172 : vec4<f32> = u_xlat12;
        let x_3173 : vec2<f32> = vec2<f32>(x_3172.z, x_3172.w);
        let x_3175 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3173.x, x_3173.y, x_3175);
        let x_3182 : vec3<f32> = txVec56;
        let x_3184 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3182.xy, x_3182.z);
        u_xlat72 = x_3184;
        let x_3186 : f32 = u_xlat8.y;
        let x_3187 : f32 = u_xlat72;
        let x_3189 : f32 = u_xlat71;
        u_xlat71 = ((x_3186 * x_3187) + x_3189);
        let x_3192 : vec2<f32> = u_xlat54;
        let x_3194 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3192.x, x_3192.y, x_3194);
        let x_3201 : vec3<f32> = txVec57;
        let x_3203 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3201.xy, x_3201.z);
        u_xlat72 = x_3203;
        let x_3205 : f32 = u_xlat8.z;
        let x_3206 : f32 = u_xlat72;
        let x_3208 : f32 = u_xlat71;
        u_xlat71 = ((x_3205 * x_3206) + x_3208);
        let x_3211 : vec4<f32> = u_xlat7;
        let x_3212 : vec2<f32> = vec2<f32>(x_3211.x, x_3211.y);
        let x_3214 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3212.x, x_3212.y, x_3214);
        let x_3221 : vec3<f32> = txVec58;
        let x_3223 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3221.xy, x_3221.z);
        u_xlat72 = x_3223;
        let x_3225 : f32 = u_xlat8.w;
        let x_3226 : f32 = u_xlat72;
        let x_3228 : f32 = u_xlat71;
        u_xlat0.x = ((x_3225 * x_3226) + x_3228);
      }
    }
  } else {
    let x_3233 : vec4<f32> = vs_INTERP9;
    let x_3234 : vec2<f32> = vec2<f32>(x_3233.x, x_3233.y);
    let x_3236 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3234.x, x_3234.y, x_3236);
    let x_3243 : vec3<f32> = txVec59;
    let x_3245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3243.xy, x_3243.z);
    u_xlat0.x = x_3245;
  }
  let x_3248 : f32 = u_xlat0.x;
  let x_3250 : f32 = x_378.x_MainLightShadowParams.x;
  let x_3253 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3248 * x_3250) + x_3253);
  let x_3260 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3260);
  let x_3264 : f32 = vs_INTERP9.z;
  u_xlatb71 = (x_3264 >= 1.0f);
  let x_3267 : bool = u_xlatb2.x;
  let x_3268 : bool = u_xlatb71;
  u_xlatb2.x = (x_3267 | x_3268);
  let x_3272 : bool = u_xlatb2.x;
  if (x_3272) {
    x_3273 = 1.0f;
  } else {
    let x_3278 : f32 = u_xlat0.x;
    x_3273 = x_3278;
  }
  let x_3279 : f32 = x_3273;
  u_xlat0.x = x_3279;
  let x_3281 : vec3<f32> = vs_INTERP0;
  let x_3283 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  let x_3285 : vec3<f32> = (x_3281 + -(x_3283));
  let x_3286 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3285.x, x_3285.y, x_3285.z, x_3286.w);
  let x_3288 : vec4<f32> = u_xlat7;
  let x_3290 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3288.x, x_3288.y, x_3288.z), vec3<f32>(x_3290.x, x_3290.y, x_3290.z));
  let x_3295 : f32 = u_xlat2.x;
  let x_3297 : f32 = x_378.x_MainLightShadowParams.z;
  let x_3300 : f32 = x_378.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3295 * x_3297) + x_3300);
  let x_3304 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3304, 0.0f, 1.0f);
  let x_3308 : f32 = u_xlat0.x;
  u_xlat71 = (-(x_3308) + 1.0f);
  let x_3312 : f32 = u_xlat2.x;
  let x_3313 : f32 = u_xlat71;
  let x_3316 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3312 * x_3313) + x_3316);
  let x_3325 : f32 = x_3323.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3325 == -1.0f));
  let x_3329 : bool = u_xlatb2.x;
  if (x_3329) {
    let x_3332 : vec3<f32> = vs_INTERP0;
    let x_3335 : vec4<f32> = x_3323.x_MainLightWorldToLight[1i];
    let x_3337 : vec2<f32> = (vec2<f32>(x_3332.y, x_3332.y) * vec2<f32>(x_3335.x, x_3335.y));
    let x_3338 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3337.x, x_3337.y, x_3338.z, x_3338.w);
    let x_3341 : vec4<f32> = x_3323.x_MainLightWorldToLight[0i];
    let x_3343 : vec3<f32> = vs_INTERP0;
    let x_3346 : vec4<f32> = u_xlat7;
    let x_3348 : vec2<f32> = ((vec2<f32>(x_3341.x, x_3341.y) * vec2<f32>(x_3343.x, x_3343.x)) + vec2<f32>(x_3346.x, x_3346.y));
    let x_3349 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3348.x, x_3348.y, x_3349.z, x_3349.w);
    let x_3352 : vec4<f32> = x_3323.x_MainLightWorldToLight[2i];
    let x_3354 : vec3<f32> = vs_INTERP0;
    let x_3357 : vec4<f32> = u_xlat7;
    let x_3359 : vec2<f32> = ((vec2<f32>(x_3352.x, x_3352.y) * vec2<f32>(x_3354.z, x_3354.z)) + vec2<f32>(x_3357.x, x_3357.y));
    let x_3360 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3359.x, x_3359.y, x_3360.z, x_3360.w);
    let x_3362 : vec4<f32> = u_xlat7;
    let x_3365 : vec4<f32> = x_3323.x_MainLightWorldToLight[3i];
    let x_3367 : vec2<f32> = (vec2<f32>(x_3362.x, x_3362.y) + vec2<f32>(x_3365.x, x_3365.y));
    let x_3368 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3367.x, x_3367.y, x_3368.z, x_3368.w);
    let x_3370 : vec4<f32> = u_xlat7;
    let x_3373 : vec2<f32> = ((vec2<f32>(x_3370.x, x_3370.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3374 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3373.x, x_3373.y, x_3374.z, x_3374.w);
    let x_3381 : vec4<f32> = u_xlat7;
    let x_3384 : f32 = x_158.x_GlobalMipBias.x;
    let x_3385 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3381.x, x_3381.y), x_3384);
    u_xlat7 = x_3385;
    let x_3388 : f32 = x_3323.x_MainLightCookieTextureFormat;
    let x_3390 : f32 = x_3323.x_MainLightCookieTextureFormat;
    let x_3392 : f32 = x_3323.x_MainLightCookieTextureFormat;
    let x_3394 : f32 = x_3323.x_MainLightCookieTextureFormat;
    let x_3395 : vec4<f32> = vec4<f32>(x_3388, x_3390, x_3392, x_3394);
    let x_3402 : vec4<bool> = (vec4<f32>(x_3395.x, x_3395.y, x_3395.z, x_3395.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3402.x, x_3402.y);
    let x_3405 : bool = u_xlatb8.y;
    if (x_3405) {
      let x_3410 : f32 = u_xlat7.w;
      x_3406 = x_3410;
    } else {
      let x_3413 : f32 = u_xlat7.x;
      x_3406 = x_3413;
    }
    let x_3414 : f32 = x_3406;
    u_xlat2.x = x_3414;
    let x_3417 : bool = u_xlatb8.x;
    if (x_3417) {
      let x_3421 : vec4<f32> = u_xlat7;
      x_3418 = vec3<f32>(x_3421.x, x_3421.y, x_3421.z);
    } else {
      let x_3424 : vec3<f32> = u_xlat2;
      x_3418 = vec3<f32>(x_3424.x, x_3424.x, x_3424.x);
    }
    let x_3426 : vec3<f32> = x_3418;
    let x_3427 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3426.x, x_3426.y, x_3426.z, x_3427.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3433 : vec4<f32> = u_xlat7;
  let x_3436 : vec4<f32> = x_158.x_MainLightColor;
  let x_3438 : vec3<f32> = (vec3<f32>(x_3433.x, x_3433.y, x_3433.z) * vec3<f32>(x_3436.x, x_3436.y, x_3436.z));
  let x_3439 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3438.x, x_3438.y, x_3438.z, x_3439.w);
  let x_3441 : f32 = u_xlat48;
  let x_3443 : vec4<f32> = u_xlat7;
  let x_3445 : vec3<f32> = (vec3<f32>(x_3441, x_3441, x_3441) * vec3<f32>(x_3443.x, x_3443.y, x_3443.z));
  let x_3446 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3445.x, x_3445.y, x_3445.z, x_3446.w);
  let x_3448 : vec3<f32> = u_xlat5;
  let x_3450 : vec3<f32> = u_xlat22;
  u_xlat2.x = dot(-(x_3448), x_3450);
  let x_3454 : f32 = u_xlat2.x;
  let x_3456 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3454 + x_3456);
  let x_3459 : vec3<f32> = u_xlat22;
  let x_3460 : vec3<f32> = u_xlat2;
  let x_3464 : vec3<f32> = u_xlat5;
  let x_3466 : vec3<f32> = ((x_3459 * -(vec3<f32>(x_3460.x, x_3460.x, x_3460.x))) + -(x_3464));
  let x_3467 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3466.x, x_3466.y, x_3466.z, x_3467.w);
  let x_3469 : vec3<f32> = u_xlat22;
  let x_3470 : vec3<f32> = u_xlat5;
  u_xlat2.x = dot(x_3469, x_3470);
  let x_3474 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3474, 0.0f, 1.0f);
  let x_3478 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3478) + 1.0f);
  let x_3483 : f32 = u_xlat2.x;
  let x_3485 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3483 * x_3485);
  let x_3489 : f32 = u_xlat2.x;
  let x_3491 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3489 * x_3491);
  let x_3495 : f32 = u_xlat46.x;
  u_xlat71 = ((-(x_3495) * 0.699999988f) + 1.700000048f);
  let x_3502 : f32 = u_xlat46.x;
  let x_3503 : f32 = u_xlat71;
  u_xlat46.x = (x_3502 * x_3503);
  let x_3507 : f32 = u_xlat46.x;
  u_xlat46.x = (x_3507 * 6.0f);
  let x_3519 : vec4<f32> = u_xlat8;
  let x_3522 : f32 = u_xlat46.x;
  let x_3523 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3519.x, x_3519.y, x_3519.z), x_3522);
  u_xlat8 = x_3523;
  let x_3525 : f32 = u_xlat8.w;
  u_xlat46.x = (x_3525 + -1.0f);
  let x_3529 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3531 : f32 = u_xlat46.x;
  u_xlat46.x = ((x_3529 * x_3531) + 1.0f);
  let x_3536 : f32 = u_xlat46.x;
  u_xlat46.x = max(x_3536, 0.0f);
  let x_3540 : f32 = u_xlat46.x;
  u_xlat46.x = log2(x_3540);
  let x_3544 : f32 = u_xlat46.x;
  let x_3546 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat46.x = (x_3544 * x_3546);
  let x_3550 : f32 = u_xlat46.x;
  u_xlat46.x = exp2(x_3550);
  let x_3554 : f32 = u_xlat46.x;
  let x_3556 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat46.x = (x_3554 * x_3556);
  let x_3559 : vec4<f32> = u_xlat8;
  let x_3561 : vec2<f32> = u_xlat46;
  let x_3563 : vec3<f32> = (vec3<f32>(x_3559.x, x_3559.y, x_3559.z) * vec3<f32>(x_3561.x, x_3561.x, x_3561.x));
  let x_3564 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3563.x, x_3563.y, x_3563.z, x_3564.w);
  let x_3566 : f32 = u_xlat68;
  let x_3568 : f32 = u_xlat68;
  u_xlat46 = ((vec2<f32>(x_3566, x_3566) * vec2<f32>(x_3568, x_3568)) + vec2<f32>(-1.0f, 1.0f));
  let x_3574 : f32 = u_xlat46.y;
  u_xlat68 = (1.0f / x_3574);
  let x_3577 : f32 = u_xlat2.x;
  let x_3579 : f32 = u_xlat26.x;
  u_xlat2.x = ((x_3577 * x_3579) + 0.039999999f);
  let x_3585 : f32 = u_xlat2.x;
  let x_3586 : f32 = u_xlat68;
  u_xlat2.x = (x_3585 * x_3586);
  let x_3589 : vec3<f32> = u_xlat2;
  let x_3591 : vec4<f32> = u_xlat8;
  let x_3593 : vec3<f32> = (vec3<f32>(x_3589.x, x_3589.x, x_3589.x) * vec3<f32>(x_3591.x, x_3591.y, x_3591.z));
  let x_3594 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3593.x, x_3593.y, x_3593.z, x_3594.w);
  let x_3596 : vec4<f32> = u_xlat3;
  let x_3598 : vec4<f32> = u_xlat6;
  let x_3601 : vec4<f32> = u_xlat8;
  let x_3603 : vec3<f32> = ((vec3<f32>(x_3596.x, x_3596.y, x_3596.z) * vec3<f32>(x_3598.x, x_3598.y, x_3598.z)) + vec3<f32>(x_3601.x, x_3601.y, x_3601.z));
  let x_3604 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3603.x, x_3603.y, x_3603.z, x_3604.w);
  let x_3607 : f32 = u_xlat0.x;
  let x_3609 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3607 * x_3609);
  let x_3612 : vec3<f32> = u_xlat22;
  let x_3614 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat2.x = dot(x_3612, vec3<f32>(x_3614.x, x_3614.y, x_3614.z));
  let x_3619 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3619, 0.0f, 1.0f);
  let x_3623 : f32 = u_xlat0.x;
  let x_3625 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3623 * x_3625);
  let x_3628 : vec3<f32> = u_xlat0;
  let x_3630 : vec4<f32> = u_xlat7;
  let x_3632 : vec3<f32> = (vec3<f32>(x_3628.x, x_3628.x, x_3628.x) * vec3<f32>(x_3630.x, x_3630.y, x_3630.z));
  let x_3633 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3632.x, x_3632.y, x_3632.z, x_3633.w);
  let x_3635 : vec3<f32> = u_xlat5;
  let x_3637 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3639 : vec3<f32> = (x_3635 + vec3<f32>(x_3637.x, x_3637.y, x_3637.z));
  let x_3640 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3639.x, x_3639.y, x_3639.z, x_3640.w);
  let x_3642 : vec4<f32> = u_xlat8;
  let x_3644 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3642.x, x_3642.y, x_3642.z), vec3<f32>(x_3644.x, x_3644.y, x_3644.z));
  let x_3649 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3649, 1.17549435e-37f);
  let x_3653 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3653);
  let x_3656 : vec3<f32> = u_xlat0;
  let x_3658 : vec4<f32> = u_xlat8;
  let x_3660 : vec3<f32> = (vec3<f32>(x_3656.x, x_3656.x, x_3656.x) * vec3<f32>(x_3658.x, x_3658.y, x_3658.z));
  let x_3661 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3660.x, x_3660.y, x_3660.z, x_3661.w);
  let x_3663 : vec3<f32> = u_xlat22;
  let x_3664 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3663, vec3<f32>(x_3664.x, x_3664.y, x_3664.z));
  let x_3669 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3669, 0.0f, 1.0f);
  let x_3673 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3675 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3673.x, x_3673.y, x_3673.z), vec3<f32>(x_3675.x, x_3675.y, x_3675.z));
  let x_3680 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3680, 0.0f, 1.0f);
  let x_3684 : f32 = u_xlat0.x;
  let x_3686 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3684 * x_3686);
  let x_3690 : f32 = u_xlat0.x;
  let x_3692 : f32 = u_xlat46.x;
  u_xlat0.x = ((x_3690 * x_3692) + 1.000010014f);
  let x_3698 : f32 = u_xlat2.x;
  let x_3700 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3698 * x_3700);
  let x_3704 : f32 = u_xlat0.x;
  let x_3706 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3704 * x_3706);
  let x_3710 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3710, 0.100000001f);
  let x_3715 : f32 = u_xlat0.x;
  let x_3717 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3715 * x_3717);
  let x_3720 : f32 = u_xlat70;
  let x_3722 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3720 * x_3722);
  let x_3725 : f32 = u_xlat69;
  let x_3727 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3725 / x_3727);
  let x_3730 : vec3<f32> = u_xlat0;
  let x_3734 : vec4<f32> = u_xlat6;
  let x_3736 : vec3<f32> = ((vec3<f32>(x_3730.x, x_3730.x, x_3730.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3734.x, x_3734.y, x_3734.z));
  let x_3737 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3736.x, x_3736.y, x_3736.z, x_3737.w);
  let x_3739 : vec4<f32> = u_xlat7;
  let x_3741 : vec4<f32> = u_xlat8;
  let x_3743 : vec3<f32> = (vec3<f32>(x_3739.x, x_3739.y, x_3739.z) * vec3<f32>(x_3741.x, x_3741.y, x_3741.z));
  let x_3744 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3743.x, x_3743.y, x_3743.z, x_3744.w);
  let x_3747 : f32 = x_158.x_AdditionalLightsCount.x;
  let x_3749 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3747, x_3749);
  let x_3754 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3754));
  let x_3758 : f32 = x_3323.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3760 : f32 = x_3323.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3762 : f32 = x_3323.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3764 : f32 = x_3323.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3765 : vec4<f32> = vec4<f32>(x_3758, x_3760, x_3762, x_3764);
  let x_3772 : vec4<bool> = (vec4<f32>(x_3765.x, x_3765.y, x_3765.z, x_3765.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3773 : vec2<bool> = vec2<bool>(x_3772.x, x_3772.w);
  let x_3774 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3773.x, x_3774.y, x_3774.z, x_3773.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3785 : u32 = u_xlatu_loop_1;
    let x_3786 : u32 = u_xlatu0;
    if ((x_3785 < x_3786)) {
    } else {
      break;
    }
    let x_3789 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3789 >> 2u);
    let x_3792 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3792 & 3u));
    let x_3795 : u32 = u_xlatu71;
    let x_3798 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3795)];
    let x_3808 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3813 : vec4<u32> = indexable[x_3808];
    u_xlat71 = dot(x_3798, bitcast<vec4<f32>>(x_3813));
    let x_3816 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3816));
    let x_3819 : vec3<f32> = vs_INTERP0;
    let x_3831 : u32 = u_xlatu71;
    let x_3834 : vec4<f32> = x_3830.x_AdditionalLightsPosition[bitcast<i32>(x_3831)];
    let x_3837 : u32 = u_xlatu71;
    let x_3840 : vec4<f32> = x_3830.x_AdditionalLightsPosition[bitcast<i32>(x_3837)];
    let x_3842 : vec3<f32> = ((-(x_3819) * vec3<f32>(x_3834.w, x_3834.w, x_3834.w)) + vec3<f32>(x_3840.x, x_3840.y, x_3840.z));
    let x_3843 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3842.x, x_3842.y, x_3842.z, x_3843.w);
    let x_3845 : vec4<f32> = u_xlat9;
    let x_3847 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3845.x, x_3845.y, x_3845.z), vec3<f32>(x_3847.x, x_3847.y, x_3847.z));
    let x_3850 : f32 = u_xlat72;
    u_xlat72 = max(x_3850, 6.10351562e-05f);
    let x_3854 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3854);
    let x_3856 : f32 = u_xlat73;
    let x_3858 : vec4<f32> = u_xlat9;
    let x_3860 : vec3<f32> = (vec3<f32>(x_3856, x_3856, x_3856) * vec3<f32>(x_3858.x, x_3858.y, x_3858.z));
    let x_3861 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3860.x, x_3860.y, x_3860.z, x_3861.w);
    let x_3864 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3864);
    let x_3866 : f32 = u_xlat72;
    let x_3867 : u32 = u_xlatu71;
    let x_3870 : f32 = x_3830.x_AdditionalLightsAttenuation[bitcast<i32>(x_3867)].x;
    u_xlat72 = (x_3866 * x_3870);
    let x_3872 : f32 = u_xlat72;
    let x_3874 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3872) * x_3874) + 1.0f);
    let x_3877 : f32 = u_xlat72;
    u_xlat72 = max(x_3877, 0.0f);
    let x_3879 : f32 = u_xlat72;
    let x_3880 : f32 = u_xlat72;
    u_xlat72 = (x_3879 * x_3880);
    let x_3882 : f32 = u_xlat72;
    let x_3883 : f32 = u_xlat74;
    u_xlat72 = (x_3882 * x_3883);
    let x_3885 : u32 = u_xlatu71;
    let x_3888 : vec4<f32> = x_3830.x_AdditionalLightsSpotDir[bitcast<i32>(x_3885)];
    let x_3890 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3888.x, x_3888.y, x_3888.z), vec3<f32>(x_3890.x, x_3890.y, x_3890.z));
    let x_3893 : f32 = u_xlat74;
    let x_3894 : u32 = u_xlatu71;
    let x_3897 : f32 = x_3830.x_AdditionalLightsAttenuation[bitcast<i32>(x_3894)].z;
    let x_3899 : u32 = u_xlatu71;
    let x_3902 : f32 = x_3830.x_AdditionalLightsAttenuation[bitcast<i32>(x_3899)].w;
    u_xlat74 = ((x_3893 * x_3897) + x_3902);
    let x_3904 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3904, 0.0f, 1.0f);
    let x_3906 : f32 = u_xlat74;
    let x_3907 : f32 = u_xlat74;
    u_xlat74 = (x_3906 * x_3907);
    let x_3909 : f32 = u_xlat72;
    let x_3910 : f32 = u_xlat74;
    u_xlat72 = (x_3909 * x_3910);
    let x_3913 : u32 = u_xlatu71;
    u_xlatu74 = (x_3913 >> 5u);
    let x_3916 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3916) & 31i)));
    let x_3922 : i32 = u_xlati75;
    let x_3924 : u32 = u_xlatu74;
    let x_3927 : f32 = x_3323.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3924)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3922) & bitcast<u32>(x_3927)));
    let x_3931 : i32 = u_xlati74;
    if ((x_3931 != 0i)) {
      let x_3941 : u32 = u_xlatu71;
      let x_3944 : f32 = x_3940.x_AdditionalLightsLightTypes[bitcast<i32>(x_3941)].el;
      u_xlati74 = i32(x_3944);
      let x_3946 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3946 != 0i));
      let x_3950 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_3950) << bitcast<u32>(2i));
      let x_3953 : i32 = u_xlati75;
      if ((x_3953 != 0i)) {
        let x_3957 : vec3<f32> = vs_INTERP0;
        let x_3959 : i32 = u_xlati76;
        let x_3962 : i32 = u_xlati76;
        let x_3966 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_3959 + 1i) / 4i)][((x_3962 + 1i) % 4i)];
        let x_3968 : vec3<f32> = (vec3<f32>(x_3957.y, x_3957.y, x_3957.y) * vec3<f32>(x_3966.x, x_3966.y, x_3966.w));
        let x_3969 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3968.x, x_3968.y, x_3968.z, x_3969.w);
        let x_3971 : i32 = u_xlati76;
        let x_3973 : i32 = u_xlati76;
        let x_3976 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[(x_3971 / 4i)][(x_3973 % 4i)];
        let x_3978 : vec3<f32> = vs_INTERP0;
        let x_3981 : vec4<f32> = u_xlat11;
        let x_3983 : vec3<f32> = ((vec3<f32>(x_3976.x, x_3976.y, x_3976.w) * vec3<f32>(x_3978.x, x_3978.x, x_3978.x)) + vec3<f32>(x_3981.x, x_3981.y, x_3981.z));
        let x_3984 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3983.x, x_3983.y, x_3983.z, x_3984.w);
        let x_3986 : i32 = u_xlati76;
        let x_3989 : i32 = u_xlati76;
        let x_3993 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_3986 + 2i) / 4i)][((x_3989 + 2i) % 4i)];
        let x_3995 : vec3<f32> = vs_INTERP0;
        let x_3998 : vec4<f32> = u_xlat11;
        let x_4000 : vec3<f32> = ((vec3<f32>(x_3993.x, x_3993.y, x_3993.w) * vec3<f32>(x_3995.z, x_3995.z, x_3995.z)) + vec3<f32>(x_3998.x, x_3998.y, x_3998.z));
        let x_4001 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4000.x, x_4000.y, x_4000.z, x_4001.w);
        let x_4003 : vec4<f32> = u_xlat11;
        let x_4005 : i32 = u_xlati76;
        let x_4008 : i32 = u_xlati76;
        let x_4012 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_4005 + 3i) / 4i)][((x_4008 + 3i) % 4i)];
        let x_4014 : vec3<f32> = (vec3<f32>(x_4003.x, x_4003.y, x_4003.z) + vec3<f32>(x_4012.x, x_4012.y, x_4012.w));
        let x_4015 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4014.x, x_4014.y, x_4014.z, x_4015.w);
        let x_4017 : vec4<f32> = u_xlat11;
        let x_4019 : vec4<f32> = u_xlat11;
        let x_4021 : vec2<f32> = (vec2<f32>(x_4017.x, x_4017.y) / vec2<f32>(x_4019.z, x_4019.z));
        let x_4022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4021.x, x_4021.y, x_4022.z, x_4022.w);
        let x_4024 : vec4<f32> = u_xlat11;
        let x_4027 : vec2<f32> = ((vec2<f32>(x_4024.x, x_4024.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4028 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4027.x, x_4027.y, x_4028.z, x_4028.w);
        let x_4030 : vec4<f32> = u_xlat11;
        let x_4034 : vec2<f32> = clamp(vec2<f32>(x_4030.x, x_4030.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4035 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4034.x, x_4034.y, x_4035.z, x_4035.w);
        let x_4037 : u32 = u_xlatu71;
        let x_4040 : vec4<f32> = x_3940.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4037)];
        let x_4042 : vec4<f32> = u_xlat11;
        let x_4045 : u32 = u_xlatu71;
        let x_4048 : vec4<f32> = x_3940.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4045)];
        let x_4050 : vec2<f32> = ((vec2<f32>(x_4040.x, x_4040.y) * vec2<f32>(x_4042.x, x_4042.y)) + vec2<f32>(x_4048.z, x_4048.w));
        let x_4051 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4050.x, x_4050.y, x_4051.z, x_4051.w);
      } else {
        let x_4055 : i32 = u_xlati74;
        u_xlatb74 = (x_4055 == 1i);
        let x_4057 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4057);
        let x_4059 : i32 = u_xlati74;
        if ((x_4059 != 0i)) {
          let x_4063 : vec3<f32> = vs_INTERP0;
          let x_4065 : i32 = u_xlati76;
          let x_4068 : i32 = u_xlati76;
          let x_4072 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_4065 + 1i) / 4i)][((x_4068 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4063.y, x_4063.y) * vec2<f32>(x_4072.x, x_4072.y));
          let x_4075 : i32 = u_xlati76;
          let x_4077 : i32 = u_xlati76;
          let x_4080 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[(x_4075 / 4i)][(x_4077 % 4i)];
          let x_4082 : vec3<f32> = vs_INTERP0;
          let x_4085 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4080.x, x_4080.y) * vec2<f32>(x_4082.x, x_4082.x)) + x_4085);
          let x_4087 : i32 = u_xlati76;
          let x_4090 : i32 = u_xlati76;
          let x_4094 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_4087 + 2i) / 4i)][((x_4090 + 2i) % 4i)];
          let x_4096 : vec3<f32> = vs_INTERP0;
          let x_4099 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4094.x, x_4094.y) * vec2<f32>(x_4096.z, x_4096.z)) + x_4099);
          let x_4101 : vec2<f32> = u_xlat55;
          let x_4102 : i32 = u_xlati76;
          let x_4105 : i32 = u_xlati76;
          let x_4109 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_4102 + 3i) / 4i)][((x_4105 + 3i) % 4i)];
          u_xlat55 = (x_4101 + vec2<f32>(x_4109.x, x_4109.y));
          let x_4112 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4112 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4115 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4115);
          let x_4117 : u32 = u_xlatu71;
          let x_4120 : vec4<f32> = x_3940.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4117)];
          let x_4122 : vec2<f32> = u_xlat55;
          let x_4124 : u32 = u_xlatu71;
          let x_4127 : vec4<f32> = x_3940.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4124)];
          let x_4129 : vec2<f32> = ((vec2<f32>(x_4120.x, x_4120.y) * x_4122) + vec2<f32>(x_4127.z, x_4127.w));
          let x_4130 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4129.x, x_4129.y, x_4130.z, x_4130.w);
        } else {
          let x_4133 : vec3<f32> = vs_INTERP0;
          let x_4135 : i32 = u_xlati76;
          let x_4138 : i32 = u_xlati76;
          let x_4142 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_4135 + 1i) / 4i)][((x_4138 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4133.y, x_4133.y, x_4133.y, x_4133.y) * x_4142);
          let x_4144 : i32 = u_xlati76;
          let x_4146 : i32 = u_xlati76;
          let x_4149 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[(x_4144 / 4i)][(x_4146 % 4i)];
          let x_4150 : vec3<f32> = vs_INTERP0;
          let x_4153 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4149 * vec4<f32>(x_4150.x, x_4150.x, x_4150.x, x_4150.x)) + x_4153);
          let x_4155 : i32 = u_xlati76;
          let x_4158 : i32 = u_xlati76;
          let x_4162 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_4155 + 2i) / 4i)][((x_4158 + 2i) % 4i)];
          let x_4163 : vec3<f32> = vs_INTERP0;
          let x_4166 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4162 * vec4<f32>(x_4163.z, x_4163.z, x_4163.z, x_4163.z)) + x_4166);
          let x_4168 : vec4<f32> = u_xlat12;
          let x_4169 : i32 = u_xlati76;
          let x_4172 : i32 = u_xlati76;
          let x_4176 : vec4<f32> = x_3940.x_AdditionalLightsWorldToLights[((x_4169 + 3i) / 4i)][((x_4172 + 3i) % 4i)];
          u_xlat12 = (x_4168 + x_4176);
          let x_4178 : vec4<f32> = u_xlat12;
          let x_4180 : vec4<f32> = u_xlat12;
          let x_4182 : vec3<f32> = (vec3<f32>(x_4178.x, x_4178.y, x_4178.z) / vec3<f32>(x_4180.w, x_4180.w, x_4180.w));
          let x_4183 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4182.x, x_4182.y, x_4182.z, x_4183.w);
          let x_4185 : vec4<f32> = u_xlat12;
          let x_4187 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4185.x, x_4185.y, x_4185.z), vec3<f32>(x_4187.x, x_4187.y, x_4187.z));
          let x_4190 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4190);
          let x_4192 : f32 = u_xlat74;
          let x_4194 : vec4<f32> = u_xlat12;
          let x_4196 : vec3<f32> = (vec3<f32>(x_4192, x_4192, x_4192) * vec3<f32>(x_4194.x, x_4194.y, x_4194.z));
          let x_4197 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4196.x, x_4196.y, x_4196.z, x_4197.w);
          let x_4199 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4199.x, x_4199.y, x_4199.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4204 : f32 = u_xlat74;
          u_xlat74 = max(x_4204, 0.000001f);
          let x_4207 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4207);
          let x_4209 : f32 = u_xlat74;
          let x_4211 : vec4<f32> = u_xlat12;
          let x_4213 : vec3<f32> = (vec3<f32>(x_4209, x_4209, x_4209) * vec3<f32>(x_4211.z, x_4211.x, x_4211.y));
          let x_4214 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4213.x, x_4213.y, x_4213.z, x_4214.w);
          let x_4217 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4217);
          let x_4221 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4221, 0.0f, 1.0f);
          let x_4225 : vec4<f32> = u_xlat13;
          let x_4228 : vec4<bool> = (vec4<f32>(x_4225.y, x_4225.z, x_4225.y, x_4225.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4228.x, x_4228.y);
          let x_4231 : bool = u_xlatb55.x;
          if (x_4231) {
            let x_4236 : f32 = u_xlat13.x;
            x_4232 = x_4236;
          } else {
            let x_4239 : f32 = u_xlat13.x;
            x_4232 = -(x_4239);
          }
          let x_4241 : f32 = x_4232;
          u_xlat55.x = x_4241;
          let x_4244 : bool = u_xlatb55.y;
          if (x_4244) {
            let x_4249 : f32 = u_xlat13.x;
            x_4245 = x_4249;
          } else {
            let x_4252 : f32 = u_xlat13.x;
            x_4245 = -(x_4252);
          }
          let x_4254 : f32 = x_4245;
          u_xlat55.y = x_4254;
          let x_4256 : vec4<f32> = u_xlat12;
          let x_4258 : f32 = u_xlat74;
          let x_4261 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4256.x, x_4256.y) * vec2<f32>(x_4258, x_4258)) + x_4261);
          let x_4263 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4263 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4266 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4266, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4270 : u32 = u_xlatu71;
          let x_4273 : vec4<f32> = x_3940.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4270)];
          let x_4275 : vec2<f32> = u_xlat55;
          let x_4277 : u32 = u_xlatu71;
          let x_4280 : vec4<f32> = x_3940.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4277)];
          let x_4282 : vec2<f32> = ((vec2<f32>(x_4273.x, x_4273.y) * x_4275) + vec2<f32>(x_4280.z, x_4280.w));
          let x_4283 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4282.x, x_4282.y, x_4283.z, x_4283.w);
        }
      }
      let x_4290 : vec4<f32> = u_xlat11;
      let x_4293 : f32 = x_158.x_GlobalMipBias.x;
      let x_4294 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4290.x, x_4290.y), x_4293);
      u_xlat11 = x_4294;
      let x_4296 : bool = u_xlatb2.w;
      if (x_4296) {
        let x_4301 : f32 = u_xlat11.w;
        x_4297 = x_4301;
      } else {
        let x_4304 : f32 = u_xlat11.x;
        x_4297 = x_4304;
      }
      let x_4305 : f32 = x_4297;
      u_xlat74 = x_4305;
      let x_4307 : bool = u_xlatb2.x;
      if (x_4307) {
        let x_4311 : vec4<f32> = u_xlat11;
        x_4308 = vec3<f32>(x_4311.x, x_4311.y, x_4311.z);
      } else {
        let x_4314 : f32 = u_xlat74;
        x_4308 = vec3<f32>(x_4314, x_4314, x_4314);
      }
      let x_4316 : vec3<f32> = x_4308;
      let x_4317 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4316.x, x_4316.y, x_4316.z, x_4317.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4323 : vec4<f32> = u_xlat11;
    let x_4325 : u32 = u_xlatu71;
    let x_4328 : vec4<f32> = x_3830.x_AdditionalLightsColor[bitcast<i32>(x_4325)];
    let x_4330 : vec3<f32> = (vec3<f32>(x_4323.x, x_4323.y, x_4323.z) * vec3<f32>(x_4328.x, x_4328.y, x_4328.z));
    let x_4331 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4330.x, x_4330.y, x_4330.z, x_4331.w);
    let x_4333 : f32 = u_xlat48;
    let x_4335 : vec4<f32> = u_xlat11;
    let x_4337 : vec3<f32> = (vec3<f32>(x_4333, x_4333, x_4333) * vec3<f32>(x_4335.x, x_4335.y, x_4335.z));
    let x_4338 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4337.x, x_4337.y, x_4337.z, x_4338.w);
    let x_4340 : vec3<f32> = u_xlat22;
    let x_4341 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(x_4340, vec3<f32>(x_4341.x, x_4341.y, x_4341.z));
    let x_4344 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4344, 0.0f, 1.0f);
    let x_4346 : f32 = u_xlat71;
    let x_4347 : f32 = u_xlat72;
    u_xlat71 = (x_4346 * x_4347);
    let x_4349 : f32 = u_xlat71;
    let x_4351 : vec4<f32> = u_xlat11;
    let x_4353 : vec3<f32> = (vec3<f32>(x_4349, x_4349, x_4349) * vec3<f32>(x_4351.x, x_4351.y, x_4351.z));
    let x_4354 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4353.x, x_4353.y, x_4353.z, x_4354.w);
    let x_4356 : vec4<f32> = u_xlat9;
    let x_4358 : f32 = u_xlat73;
    let x_4361 : vec3<f32> = u_xlat5;
    let x_4362 : vec3<f32> = ((vec3<f32>(x_4356.x, x_4356.y, x_4356.z) * vec3<f32>(x_4358, x_4358, x_4358)) + x_4361);
    let x_4363 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4362.x, x_4362.y, x_4362.z, x_4363.w);
    let x_4365 : vec4<f32> = u_xlat9;
    let x_4367 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4365.x, x_4365.y, x_4365.z), vec3<f32>(x_4367.x, x_4367.y, x_4367.z));
    let x_4370 : f32 = u_xlat71;
    u_xlat71 = max(x_4370, 1.17549435e-37f);
    let x_4372 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4372);
    let x_4374 : f32 = u_xlat71;
    let x_4376 : vec4<f32> = u_xlat9;
    let x_4378 : vec3<f32> = (vec3<f32>(x_4374, x_4374, x_4374) * vec3<f32>(x_4376.x, x_4376.y, x_4376.z));
    let x_4379 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4378.x, x_4378.y, x_4378.z, x_4379.w);
    let x_4381 : vec3<f32> = u_xlat22;
    let x_4382 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(x_4381, vec3<f32>(x_4382.x, x_4382.y, x_4382.z));
    let x_4385 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4385, 0.0f, 1.0f);
    let x_4387 : vec4<f32> = u_xlat10;
    let x_4389 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4387.x, x_4387.y, x_4387.z), vec3<f32>(x_4389.x, x_4389.y, x_4389.z));
    let x_4392 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4392, 0.0f, 1.0f);
    let x_4394 : f32 = u_xlat71;
    let x_4395 : f32 = u_xlat71;
    u_xlat71 = (x_4394 * x_4395);
    let x_4397 : f32 = u_xlat71;
    let x_4399 : f32 = u_xlat46.x;
    u_xlat71 = ((x_4397 * x_4399) + 1.000010014f);
    let x_4402 : f32 = u_xlat72;
    let x_4403 : f32 = u_xlat72;
    u_xlat72 = (x_4402 * x_4403);
    let x_4405 : f32 = u_xlat71;
    let x_4406 : f32 = u_xlat71;
    u_xlat71 = (x_4405 * x_4406);
    let x_4408 : f32 = u_xlat72;
    u_xlat72 = max(x_4408, 0.100000001f);
    let x_4410 : f32 = u_xlat71;
    let x_4411 : f32 = u_xlat72;
    u_xlat71 = (x_4410 * x_4411);
    let x_4413 : f32 = u_xlat70;
    let x_4414 : f32 = u_xlat71;
    u_xlat71 = (x_4413 * x_4414);
    let x_4416 : f32 = u_xlat69;
    let x_4417 : f32 = u_xlat71;
    u_xlat71 = (x_4416 / x_4417);
    let x_4419 : f32 = u_xlat71;
    let x_4422 : vec4<f32> = u_xlat6;
    let x_4424 : vec3<f32> = ((vec3<f32>(x_4419, x_4419, x_4419) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_4422.x, x_4422.y, x_4422.z));
    let x_4425 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4424.x, x_4424.y, x_4424.z, x_4425.w);
    let x_4427 : vec4<f32> = u_xlat9;
    let x_4429 : vec4<f32> = u_xlat11;
    let x_4432 : vec4<f32> = u_xlat8;
    let x_4434 : vec3<f32> = ((vec3<f32>(x_4427.x, x_4427.y, x_4427.z) * vec3<f32>(x_4429.x, x_4429.y, x_4429.z)) + vec3<f32>(x_4432.x, x_4432.y, x_4432.z));
    let x_4435 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4434.x, x_4434.y, x_4434.z, x_4435.w);

    continuing {
      let x_4437 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4437 + bitcast<u32>(1i));
    }
  }
  let x_4439 : vec4<f32> = u_xlat3;
  let x_4441 : vec3<f32> = u_xlat4;
  let x_4444 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_4439.x, x_4439.y, x_4439.z) * vec3<f32>(x_4441.x, x_4441.x, x_4441.x)) + vec3<f32>(x_4444.x, x_4444.y, x_4444.z));
  let x_4447 : vec4<f32> = u_xlat8;
  let x_4449 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4447.x, x_4447.y, x_4447.z) + x_4449);
  let x_4453 : vec4<f32> = vs_INTERP4;
  let x_4455 : vec3<f32> = u_xlat1;
  let x_4457 : vec3<f32> = u_xlat0;
  let x_4458 : vec3<f32> = ((vec3<f32>(x_4453.w, x_4453.w, x_4453.w) * x_4455) + x_4457);
  let x_4459 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4458.x, x_4458.y, x_4458.z, x_4459.w);
  let x_4461 : bool = u_xlatb24;
  let x_4462 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4462, x_4461);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

