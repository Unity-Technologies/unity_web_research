type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(6) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3207 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3704 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3809 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1595 : f32;
  var u_xlat23 : f32;
  var u_xlat44 : f32;
  var x_1712 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3157 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3290 : f32;
  var x_3302 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlatu71 : u32;
  var u_xlati73 : i32;
  var u_xlati71 : i32;
  var u_xlati11 : i32;
  var u_xlat32 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4111 : f32;
  var x_4124 : f32;
  var x_4186 : f32;
  var x_4197 : vec3<f32>;
  var u_xlat63 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        let x_1106 : vec2<f32> = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1107 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1106.x, x_1106.y, x_1107.z);
        let x_1110 : f32 = u_xlat11.y;
        u_xlat8.w = x_1110;
        let x_1113 : vec4<f32> = u_xlat3;
        let x_1116 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1119 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1113.x, x_1113.y) * vec2<f32>(x_1116.x, x_1116.y)) + vec2<f32>(x_1119.x, x_1119.w));
        let x_1122 : vec4<f32> = u_xlat11;
        let x_1123 : vec3<f32> = vec3<f32>(x_1122.x, x_1122.z, x_1122.w);
        let x_1124 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1123.x, x_1124.y, x_1123.y, x_1123.z);
        let x_1126 : vec4<f32> = u_xlat3;
        let x_1129 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1132 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1126.x, x_1126.y, x_1126.x, x_1126.y) * vec4<f32>(x_1129.x, x_1129.y, x_1129.x, x_1129.y)) + vec4<f32>(x_1132.x, x_1132.y, x_1132.z, x_1132.y));
        let x_1136 : vec4<f32> = u_xlat3;
        let x_1139 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1136.x, x_1136.y) * vec2<f32>(x_1139.x, x_1139.y)) + vec2<f32>(x_1142.w, x_1142.y));
        let x_1146 : f32 = u_xlat8.x;
        u_xlat9.x = x_1146;
        let x_1148 : vec4<f32> = u_xlat3;
        let x_1151 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1156 : vec2<f32> = ((vec2<f32>(x_1148.x, x_1148.y) * vec2<f32>(x_1151.x, x_1151.y)) + vec2<f32>(x_1154.x, x_1154.y));
        let x_1157 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1156.x, x_1156.y, x_1157.z, x_1157.w);
        let x_1160 : vec4<f32> = u_xlat7;
        let x_1162 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1160.x, x_1160.x, x_1160.x, x_1160.x) * x_1162);
        let x_1165 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1165.y, x_1165.y, x_1165.y, x_1165.y) * x_1167);
        let x_1170 : vec4<f32> = u_xlat7;
        let x_1172 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1170.z, x_1170.z, x_1170.z, x_1170.z) * x_1172);
        let x_1174 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1174.w, x_1174.w, x_1174.w, x_1174.w) * x_1176);
        let x_1179 : vec4<f32> = u_xlat12;
        let x_1180 : vec2<f32> = vec2<f32>(x_1179.x, x_1179.y);
        let x_1182 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1180.x, x_1180.y, x_1182);
        let x_1189 : vec3<f32> = txVec13;
        let x_1191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1189.xy, x_1189.z);
        u_xlat65 = x_1191;
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1204 : vec3<f32> = txVec14;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat68 = x_1206;
        let x_1207 : f32 = u_xlat68;
        let x_1209 : f32 = u_xlat17.y;
        u_xlat68 = (x_1207 * x_1209);
        let x_1212 : f32 = u_xlat17.x;
        let x_1213 : f32 = u_xlat65;
        let x_1215 : f32 = u_xlat68;
        u_xlat65 = ((x_1212 * x_1213) + x_1215);
        let x_1218 : vec2<f32> = u_xlat45;
        let x_1220 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1218.x, x_1218.y, x_1220);
        let x_1227 : vec3<f32> = txVec15;
        let x_1229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1227.xy, x_1227.z);
        u_xlat45.x = x_1229;
        let x_1232 : f32 = u_xlat17.z;
        let x_1234 : f32 = u_xlat45.x;
        let x_1236 : f32 = u_xlat65;
        u_xlat65 = ((x_1232 * x_1234) + x_1236);
        let x_1239 : vec4<f32> = u_xlat15;
        let x_1240 : vec2<f32> = vec2<f32>(x_1239.x, x_1239.y);
        let x_1242 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1240.x, x_1240.y, x_1242);
        let x_1249 : vec3<f32> = txVec16;
        let x_1251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1249.xy, x_1249.z);
        u_xlat45.x = x_1251;
        let x_1254 : f32 = u_xlat17.w;
        let x_1256 : f32 = u_xlat45.x;
        let x_1258 : f32 = u_xlat65;
        u_xlat65 = ((x_1254 * x_1256) + x_1258);
        let x_1261 : vec4<f32> = u_xlat13;
        let x_1262 : vec2<f32> = vec2<f32>(x_1261.x, x_1261.y);
        let x_1264 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1262.x, x_1262.y, x_1264);
        let x_1271 : vec3<f32> = txVec17;
        let x_1273 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1271.xy, x_1271.z);
        u_xlat45.x = x_1273;
        let x_1276 : f32 = u_xlat18.x;
        let x_1278 : f32 = u_xlat45.x;
        let x_1280 : f32 = u_xlat65;
        u_xlat65 = ((x_1276 * x_1278) + x_1280);
        let x_1283 : vec4<f32> = u_xlat13;
        let x_1284 : vec2<f32> = vec2<f32>(x_1283.z, x_1283.w);
        let x_1286 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1284.x, x_1284.y, x_1286);
        let x_1293 : vec3<f32> = txVec18;
        let x_1295 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1293.xy, x_1293.z);
        u_xlat45.x = x_1295;
        let x_1298 : f32 = u_xlat18.y;
        let x_1300 : f32 = u_xlat45.x;
        let x_1302 : f32 = u_xlat65;
        u_xlat65 = ((x_1298 * x_1300) + x_1302);
        let x_1305 : vec4<f32> = u_xlat14;
        let x_1306 : vec2<f32> = vec2<f32>(x_1305.x, x_1305.y);
        let x_1308 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1306.x, x_1306.y, x_1308);
        let x_1315 : vec3<f32> = txVec19;
        let x_1317 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1315.xy, x_1315.z);
        u_xlat45.x = x_1317;
        let x_1320 : f32 = u_xlat18.z;
        let x_1322 : f32 = u_xlat45.x;
        let x_1324 : f32 = u_xlat65;
        u_xlat65 = ((x_1320 * x_1322) + x_1324);
        let x_1327 : vec4<f32> = u_xlat15;
        let x_1328 : vec2<f32> = vec2<f32>(x_1327.z, x_1327.w);
        let x_1330 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1328.x, x_1328.y, x_1330);
        let x_1337 : vec3<f32> = txVec20;
        let x_1339 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1337.xy, x_1337.z);
        u_xlat45.x = x_1339;
        let x_1342 : f32 = u_xlat18.w;
        let x_1344 : f32 = u_xlat45.x;
        let x_1346 : f32 = u_xlat65;
        u_xlat65 = ((x_1342 * x_1344) + x_1346);
        let x_1349 : vec4<f32> = u_xlat16;
        let x_1350 : vec2<f32> = vec2<f32>(x_1349.x, x_1349.y);
        let x_1352 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1350.x, x_1350.y, x_1352);
        let x_1359 : vec3<f32> = txVec21;
        let x_1361 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1359.xy, x_1359.z);
        u_xlat45.x = x_1361;
        let x_1364 : f32 = u_xlat19.x;
        let x_1366 : f32 = u_xlat45.x;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1364 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat16;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat45.x = x_1383;
        let x_1386 : f32 = u_xlat19.y;
        let x_1388 : f32 = u_xlat45.x;
        let x_1390 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1388) + x_1390);
        let x_1393 : vec3<f32> = u_xlat29;
        let x_1394 : vec2<f32> = vec2<f32>(x_1393.x, x_1393.y);
        let x_1396 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1394.x, x_1394.y, x_1396);
        let x_1403 : vec3<f32> = txVec23;
        let x_1405 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1403.xy, x_1403.z);
        u_xlat45.x = x_1405;
        let x_1408 : f32 = u_xlat19.z;
        let x_1410 : f32 = u_xlat45.x;
        let x_1412 : f32 = u_xlat65;
        u_xlat65 = ((x_1408 * x_1410) + x_1412);
        let x_1415 : vec2<f32> = u_xlat56;
        let x_1417 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1415.x, x_1415.y, x_1417);
        let x_1424 : vec3<f32> = txVec24;
        let x_1426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1424.xy, x_1424.z);
        u_xlat45.x = x_1426;
        let x_1429 : f32 = u_xlat19.w;
        let x_1431 : f32 = u_xlat45.x;
        let x_1433 : f32 = u_xlat65;
        u_xlat65 = ((x_1429 * x_1431) + x_1433);
        let x_1436 : vec4<f32> = u_xlat11;
        let x_1437 : vec2<f32> = vec2<f32>(x_1436.x, x_1436.y);
        let x_1439 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1437.x, x_1437.y, x_1439);
        let x_1446 : vec3<f32> = txVec25;
        let x_1448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1446.xy, x_1446.z);
        u_xlat45.x = x_1448;
        let x_1451 : f32 = u_xlat7.x;
        let x_1453 : f32 = u_xlat45.x;
        let x_1455 : f32 = u_xlat65;
        u_xlat65 = ((x_1451 * x_1453) + x_1455);
        let x_1458 : vec4<f32> = u_xlat11;
        let x_1459 : vec2<f32> = vec2<f32>(x_1458.z, x_1458.w);
        let x_1461 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1459.x, x_1459.y, x_1461);
        let x_1468 : vec3<f32> = txVec26;
        let x_1470 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1468.xy, x_1468.z);
        u_xlat45.x = x_1470;
        let x_1473 : f32 = u_xlat7.y;
        let x_1475 : f32 = u_xlat45.x;
        let x_1477 : f32 = u_xlat65;
        u_xlat65 = ((x_1473 * x_1475) + x_1477);
        let x_1480 : vec2<f32> = u_xlat51;
        let x_1482 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1489 : vec3<f32> = txVec27;
        let x_1491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1489.xy, x_1489.z);
        u_xlat45.x = x_1491;
        let x_1494 : f32 = u_xlat7.z;
        let x_1496 : f32 = u_xlat45.x;
        let x_1498 : f32 = u_xlat65;
        u_xlat65 = ((x_1494 * x_1496) + x_1498);
        let x_1501 : vec4<f32> = u_xlat3;
        let x_1502 : vec2<f32> = vec2<f32>(x_1501.x, x_1501.y);
        let x_1504 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec28;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat3.x = x_1513;
        let x_1516 : f32 = u_xlat7.w;
        let x_1518 : f32 = u_xlat3.x;
        let x_1520 : f32 = u_xlat65;
        u_xlat64 = ((x_1516 * x_1518) + x_1520);
      }
    }
  } else {
    let x_1524 : vec3<f32> = u_xlat2;
    let x_1525 : vec2<f32> = vec2<f32>(x_1524.x, x_1524.y);
    let x_1527 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1525.x, x_1525.y, x_1527);
    let x_1534 : vec3<f32> = txVec29;
    let x_1536 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1534.xy, x_1534.z);
    u_xlat64 = x_1536;
  }
  let x_1538 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1538) + 1.0f);
  let x_1542 : f32 = u_xlat64;
  let x_1544 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1547 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1542 * x_1544) + x_1547);
  let x_1551 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1551);
  let x_1555 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1555 >= 1.0f);
  let x_1557 : bool = u_xlatb44;
  let x_1558 : bool = u_xlatb23;
  u_xlatb23 = (x_1557 | x_1558);
  let x_1560 : bool = u_xlatb23;
  let x_1561 : f32 = u_xlat64;
  u_xlat64 = select(x_1561, 1.0f, x_1560);
  let x_1563 : vec3<f32> = u_xlat1;
  let x_1565 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1563, -(vec3<f32>(x_1565.x, x_1565.y, x_1565.z)));
  let x_1571 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1571, 0.0f, 1.0f);
  let x_1575 : f32 = u_xlat64;
  let x_1579 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1575, x_1575, x_1575) * vec3<f32>(x_1579.x, x_1579.y, x_1579.z));
  let x_1582 : vec3<f32> = u_xlat22;
  let x_1583 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1582 * vec3<f32>(x_1583.x, x_1583.x, x_1583.x));
  let x_1586 : vec3<f32> = u_xlat1;
  let x_1587 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1586 * vec3<f32>(x_1587.x, x_1587.y, x_1587.z));
  let x_1591 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1591 >= 0.400000006f);
  let x_1594 : bool = u_xlatb64;
  if (x_1594) {
    let x_1599 : f32 = u_xlat4.w;
    x_1595 = x_1599;
  } else {
    x_1595 = 0.0f;
  }
  let x_1601 : f32 = x_1595;
  u_xlat64 = x_1601;
  let x_1604 : f32 = u_xlat4.w;
  u_xlat23 = (x_1604 + -0.400000006f);
  let x_1609 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1609);
  let x_1612 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1612);
  let x_1614 : f32 = u_xlat65;
  let x_1616 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1614) + abs(x_1616));
  let x_1619 : f32 = u_xlat44;
  u_xlat44 = max(x_1619, 0.0001f);
  let x_1622 : f32 = u_xlat23;
  let x_1623 : f32 = u_xlat44;
  u_xlat23 = (x_1622 / x_1623);
  let x_1625 : f32 = u_xlat23;
  u_xlat23 = (x_1625 + 0.5f);
  let x_1627 : f32 = u_xlat23;
  u_xlat23 = clamp(x_1627, 0.0f, 1.0f);
  let x_1630 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1630 == 0.0f));
  let x_1632 : bool = u_xlatb44;
  let x_1633 : f32 = u_xlat23;
  let x_1634 : f32 = u_xlat64;
  u_xlat64 = select(x_1634, x_1633, x_1632);
  let x_1636 : f32 = u_xlat64;
  u_xlat23 = (x_1636 + -0.0001f);
  let x_1639 : f32 = u_xlat23;
  u_xlatb23 = (x_1639 < 0.0f);
  let x_1641 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1641) * -1i) != 0i)) {
    discard;
  }
  let x_1649 : vec3<f32> = u_xlat21;
  let x_1650 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1649 * vec3<f32>(x_1650.y, x_1650.y, x_1650.y));
  let x_1653 : vec3<f32> = u_xlat27;
  let x_1655 : vec4<f32> = vs_INTERP2;
  let x_1658 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * vec3<f32>(x_1655.x, x_1655.y, x_1655.z)) + x_1658);
  let x_1660 : vec3<f32> = u_xlat27;
  let x_1662 : vec3<f32> = vs_INTERP1;
  let x_1664 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1660.z, x_1660.z, x_1660.z) * x_1662) + x_1664);
  let x_1666 : vec3<f32> = u_xlat21;
  let x_1667 : vec3<f32> = u_xlat21;
  u_xlat23 = dot(x_1666, x_1667);
  let x_1669 : f32 = u_xlat23;
  u_xlat23 = inverseSqrt(x_1669);
  let x_1671 : vec3<f32> = u_xlat21;
  let x_1672 : f32 = u_xlat23;
  u_xlat21 = (x_1671 * vec3<f32>(x_1672, x_1672, x_1672));
  let x_1677 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb23 = (x_1677 == 0.0f);
  let x_1679 : vec3<f32> = vs_INTERP0;
  let x_1683 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1684 : vec3<f32> = (-(x_1679) + x_1683);
  let x_1685 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1684.x, x_1684.y, x_1684.z, x_1685.w);
  let x_1687 : vec4<f32> = u_xlat3;
  let x_1689 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_1687.x, x_1687.y, x_1687.z), vec3<f32>(x_1689.x, x_1689.y, x_1689.z));
  let x_1692 : f32 = u_xlat65;
  u_xlat65 = inverseSqrt(x_1692);
  let x_1694 : f32 = u_xlat65;
  let x_1696 : vec4<f32> = u_xlat3;
  let x_1698 : vec3<f32> = (vec3<f32>(x_1694, x_1694, x_1694) * vec3<f32>(x_1696.x, x_1696.y, x_1696.z));
  let x_1699 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1698.x, x_1698.y, x_1698.z, x_1699.w);
  let x_1703 : f32 = x_137.unity_MatrixV[0i].z;
  u_xlat4.x = x_1703;
  let x_1706 : f32 = x_137.unity_MatrixV[1i].z;
  u_xlat4.y = x_1706;
  let x_1709 : f32 = x_137.unity_MatrixV[2i].z;
  u_xlat4.z = x_1709;
  let x_1711 : bool = u_xlatb23;
  if (x_1711) {
    let x_1715 : vec4<f32> = u_xlat3;
    x_1712 = vec3<f32>(x_1715.x, x_1715.y, x_1715.z);
  } else {
    let x_1718 : vec4<f32> = u_xlat4;
    x_1712 = vec3<f32>(x_1718.x, x_1718.y, x_1718.z);
  }
  let x_1720 : vec3<f32> = x_1712;
  let x_1721 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1720.x, x_1720.y, x_1720.z, x_1721.w);
  let x_1724 : f32 = vs_INTERP0.y;
  let x_1726 : f32 = x_137.unity_MatrixV[1i].z;
  u_xlat23 = (x_1724 * x_1726);
  let x_1729 : f32 = x_137.unity_MatrixV[0i].z;
  let x_1731 : f32 = vs_INTERP0.x;
  let x_1733 : f32 = u_xlat23;
  u_xlat23 = ((x_1729 * x_1731) + x_1733);
  let x_1736 : f32 = x_137.unity_MatrixV[2i].z;
  let x_1738 : f32 = vs_INTERP0.z;
  let x_1740 : f32 = u_xlat23;
  u_xlat23 = ((x_1736 * x_1738) + x_1740);
  let x_1742 : f32 = u_xlat23;
  let x_1744 : f32 = x_137.unity_MatrixV[3i].z;
  u_xlat23 = (x_1742 + x_1744);
  let x_1746 : f32 = u_xlat23;
  let x_1750 : f32 = x_137.x_ProjectionParams.y;
  u_xlat23 = (-(x_1746) + -(x_1750));
  let x_1753 : f32 = u_xlat23;
  u_xlat23 = max(x_1753, 0.0f);
  let x_1755 : f32 = u_xlat23;
  let x_1758 : f32 = x_137.unity_FogParams.x;
  u_xlat23 = (x_1755 * x_1758);
  let x_1767 : vec2<f32> = vs_INTERP5;
  let x_1769 : f32 = x_137.x_GlobalMipBias.x;
  let x_1770 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1767, x_1769);
  u_xlat4 = x_1770;
  let x_1775 : vec2<f32> = vs_INTERP5;
  let x_1777 : f32 = x_137.x_GlobalMipBias.x;
  let x_1778 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1775, x_1777);
  u_xlat27 = vec3<f32>(x_1778.x, x_1778.y, x_1778.z);
  let x_1780 : vec4<f32> = u_xlat4;
  let x_1783 : vec3<f32> = (vec3<f32>(x_1780.x, x_1780.y, x_1780.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1784 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1783.x, x_1783.y, x_1783.z, x_1784.w);
  let x_1786 : vec3<f32> = u_xlat21;
  let x_1787 : vec4<f32> = u_xlat4;
  u_xlat65 = dot(x_1786, vec3<f32>(x_1787.x, x_1787.y, x_1787.z));
  let x_1790 : f32 = u_xlat65;
  u_xlat65 = (x_1790 + 0.5f);
  let x_1792 : f32 = u_xlat65;
  let x_1794 : vec3<f32> = u_xlat27;
  let x_1795 : vec3<f32> = (vec3<f32>(x_1792, x_1792, x_1792) * x_1794);
  let x_1796 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1795.x, x_1795.y, x_1795.z, x_1796.w);
  let x_1799 : f32 = u_xlat4.w;
  u_xlat65 = max(x_1799, 0.0001f);
  let x_1801 : vec4<f32> = u_xlat4;
  let x_1803 : f32 = u_xlat65;
  let x_1805 : vec3<f32> = (vec3<f32>(x_1801.x, x_1801.y, x_1801.z) / vec3<f32>(x_1803, x_1803, x_1803));
  let x_1806 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1805.x, x_1805.y, x_1805.z, x_1806.w);
  let x_1809 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1810 : vec2<f32> = vec2<f32>(x_1809.x, x_1809.y);
  let x_1814 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1810.x, x_1810.y));
  let x_1815 : vec3<f32> = u_xlat27;
  u_xlat27 = vec3<f32>(x_1814.x, x_1814.y, x_1815.z);
  let x_1817 : vec3<f32> = u_xlat27;
  let x_1819 : vec4<f32> = hlslcc_FragCoord;
  let x_1821 : vec2<f32> = (vec2<f32>(x_1817.x, x_1817.y) * vec2<f32>(x_1819.x, x_1819.y));
  let x_1822 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1821.x, x_1821.y, x_1822.z, x_1822.w);
  let x_1825 : f32 = u_xlat7.y;
  let x_1828 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1831 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat65 = ((x_1825 * x_1828) + x_1831);
  let x_1833 : f32 = u_xlat65;
  u_xlat7.z = (-(x_1833) + 1.0f);
  let x_1838 : f32 = u_xlat6.x;
  u_xlat6.x = x_1838;
  let x_1841 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1841, 0.0f, 1.0f);
  let x_1844 : f32 = u_xlat64;
  u_xlat64 = min(x_1844, 1.0f);
  let x_1846 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1846 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1851 : f32 = u_xlat6.x;
  u_xlat65 = (-(x_1851) + 1.0f);
  let x_1855 : f32 = u_xlat65;
  let x_1856 : f32 = u_xlat65;
  u_xlat66 = (x_1855 * x_1856);
  let x_1858 : f32 = u_xlat66;
  u_xlat66 = max(x_1858, 0.0078125f);
  let x_1862 : f32 = u_xlat66;
  let x_1863 : f32 = u_xlat66;
  u_xlat67 = (x_1862 * x_1863);
  let x_1866 : f32 = u_xlat6.x;
  u_xlat68 = (x_1866 + 0.040000021f);
  let x_1869 : f32 = u_xlat68;
  u_xlat68 = min(x_1869, 1.0f);
  let x_1871 : f32 = u_xlat66;
  u_xlat6.x = ((x_1871 * 4.0f) + 2.0f);
  let x_1881 : vec4<f32> = u_xlat7;
  let x_1884 : f32 = x_137.x_GlobalMipBias.x;
  let x_1885 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1881.x, x_1881.z), x_1884);
  u_xlat27.x = x_1885.x;
  let x_1890 : f32 = u_xlat27.x;
  u_xlat48 = (x_1890 + -1.0f);
  let x_1894 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1895 : f32 = u_xlat48;
  u_xlat48 = ((x_1894 * x_1895) + 1.0f);
  let x_1899 : f32 = u_xlat27.x;
  let x_1901 : f32 = vs_INTERP4.w;
  u_xlat27.x = min(x_1899, x_1901);
  let x_1904 : bool = u_xlatb0;
  if (x_1904) {
    let x_1908 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1908 == 1.0f);
    let x_1910 : bool = u_xlatb0;
    if (x_1910) {
      let x_1914 : vec4<f32> = vs_INTERP9;
      let x_1917 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1914.x, x_1914.y, x_1914.x, x_1914.y) + x_1917);
      let x_1920 : vec4<f32> = u_xlat7;
      let x_1921 : vec2<f32> = vec2<f32>(x_1920.x, x_1920.y);
      let x_1923 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1921.x, x_1921.y, x_1923);
      let x_1930 : vec3<f32> = txVec30;
      let x_1932 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1930.xy, x_1930.z);
      u_xlat8.x = x_1932;
      let x_1935 : vec4<f32> = u_xlat7;
      let x_1936 : vec2<f32> = vec2<f32>(x_1935.z, x_1935.w);
      let x_1938 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1936.x, x_1936.y, x_1938);
      let x_1945 : vec3<f32> = txVec31;
      let x_1947 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1945.xy, x_1945.z);
      u_xlat8.y = x_1947;
      let x_1949 : vec4<f32> = vs_INTERP9;
      let x_1952 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1949.x, x_1949.y, x_1949.x, x_1949.y) + x_1952);
      let x_1955 : vec4<f32> = u_xlat7;
      let x_1956 : vec2<f32> = vec2<f32>(x_1955.x, x_1955.y);
      let x_1958 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1956.x, x_1956.y, x_1958);
      let x_1965 : vec3<f32> = txVec32;
      let x_1967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1965.xy, x_1965.z);
      u_xlat8.z = x_1967;
      let x_1970 : vec4<f32> = u_xlat7;
      let x_1971 : vec2<f32> = vec2<f32>(x_1970.z, x_1970.w);
      let x_1973 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1971.x, x_1971.y, x_1973);
      let x_1980 : vec3<f32> = txVec33;
      let x_1982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1980.xy, x_1980.z);
      u_xlat8.w = x_1982;
      let x_1984 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_1984, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1990 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb69 = (x_1990 == 2.0f);
      let x_1992 : bool = u_xlatb69;
      if (x_1992) {
        let x_1995 : vec4<f32> = vs_INTERP9;
        let x_1998 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2001 : vec2<f32> = ((vec2<f32>(x_1995.x, x_1995.y) * vec2<f32>(x_1998.z, x_1998.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2002 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2001.x, x_2001.y, x_2002.z, x_2002.w);
        let x_2004 : vec4<f32> = u_xlat7;
        let x_2006 : vec2<f32> = floor(vec2<f32>(x_2004.x, x_2004.y));
        let x_2007 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2006.x, x_2006.y, x_2007.z, x_2007.w);
        let x_2010 : vec4<f32> = vs_INTERP9;
        let x_2013 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2016 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2010.x, x_2010.y) * vec2<f32>(x_2013.z, x_2013.w)) + -(vec2<f32>(x_2016.x, x_2016.y)));
        let x_2020 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2020.x, x_2020.x, x_2020.y, x_2020.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2023 : vec4<f32> = u_xlat8;
        let x_2025 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2023.x, x_2023.x, x_2023.z, x_2023.z) * vec4<f32>(x_2025.x, x_2025.x, x_2025.z, x_2025.z));
        let x_2028 : vec4<f32> = u_xlat9;
        let x_2030 : vec2<f32> = (vec2<f32>(x_2028.y, x_2028.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2030.x, x_2031.y, x_2030.y, x_2031.w);
        let x_2033 : vec4<f32> = u_xlat9;
        let x_2036 : vec2<f32> = u_xlat49;
        let x_2038 : vec2<f32> = ((vec2<f32>(x_2033.x, x_2033.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2036));
        let x_2039 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2038.x, x_2038.y, x_2039.z, x_2039.w);
        let x_2041 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2041) + vec2<f32>(1.0f, 1.0f));
        let x_2044 : vec2<f32> = u_xlat49;
        let x_2045 : vec2<f32> = min(x_2044, vec2<f32>(0.0f, 0.0f));
        let x_2046 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2045.x, x_2045.y, x_2046.z, x_2046.w);
        let x_2048 : vec4<f32> = u_xlat10;
        let x_2051 : vec4<f32> = u_xlat10;
        let x_2054 : vec2<f32> = u_xlat51;
        let x_2055 : vec2<f32> = ((-(vec2<f32>(x_2048.x, x_2048.y)) * vec2<f32>(x_2051.x, x_2051.y)) + x_2054);
        let x_2056 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2055.x, x_2055.y, x_2056.z, x_2056.w);
        let x_2058 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2058, vec2<f32>(0.0f, 0.0f));
        let x_2060 : vec2<f32> = u_xlat49;
        let x_2062 : vec2<f32> = u_xlat49;
        let x_2064 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2060) * x_2062) + vec2<f32>(x_2064.y, x_2064.w));
        let x_2067 : vec4<f32> = u_xlat10;
        let x_2069 : vec2<f32> = (vec2<f32>(x_2067.x, x_2067.y) + vec2<f32>(1.0f, 1.0f));
        let x_2070 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2069.x, x_2069.y, x_2070.z, x_2070.w);
        let x_2072 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2072 + vec2<f32>(1.0f, 1.0f));
        let x_2074 : vec4<f32> = u_xlat9;
        let x_2076 : vec2<f32> = (vec2<f32>(x_2074.x, x_2074.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2077 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2076.x, x_2076.y, x_2077.z, x_2077.w);
        let x_2079 : vec2<f32> = u_xlat51;
        let x_2080 : vec2<f32> = (x_2079 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2081 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2080.x, x_2080.y, x_2081.z, x_2081.w);
        let x_2083 : vec4<f32> = u_xlat10;
        let x_2085 : vec2<f32> = (vec2<f32>(x_2083.x, x_2083.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2086 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2085.x, x_2085.y, x_2086.z, x_2086.w);
        let x_2088 : vec2<f32> = u_xlat49;
        let x_2089 : vec2<f32> = (x_2088 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2090 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2089.x, x_2089.y, x_2090.z, x_2090.w);
        let x_2092 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2092.y, x_2092.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2096 : f32 = u_xlat10.x;
        u_xlat11.z = x_2096;
        let x_2099 : f32 = u_xlat49.x;
        u_xlat11.w = x_2099;
        let x_2102 : f32 = u_xlat12.x;
        u_xlat9.z = x_2102;
        let x_2105 : f32 = u_xlat8.x;
        u_xlat9.w = x_2105;
        let x_2107 : vec4<f32> = u_xlat9;
        let x_2109 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2107.z, x_2107.w, x_2107.x, x_2107.z) + vec4<f32>(x_2109.z, x_2109.w, x_2109.x, x_2109.z));
        let x_2113 : f32 = u_xlat11.y;
        u_xlat10.z = x_2113;
        let x_2116 : f32 = u_xlat49.y;
        u_xlat10.w = x_2116;
        let x_2119 : f32 = u_xlat9.y;
        u_xlat12.z = x_2119;
        let x_2122 : f32 = u_xlat8.z;
        u_xlat12.w = x_2122;
        let x_2124 : vec4<f32> = u_xlat10;
        let x_2126 : vec4<f32> = u_xlat12;
        let x_2128 : vec3<f32> = (vec3<f32>(x_2124.z, x_2124.y, x_2124.w) + vec3<f32>(x_2126.z, x_2126.y, x_2126.w));
        let x_2129 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2128.x, x_2128.y, x_2128.z, x_2129.w);
        let x_2131 : vec4<f32> = u_xlat9;
        let x_2133 : vec4<f32> = u_xlat13;
        let x_2135 : vec3<f32> = (vec3<f32>(x_2131.x, x_2131.z, x_2131.w) / vec3<f32>(x_2133.z, x_2133.w, x_2133.y));
        let x_2136 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2135.x, x_2135.y, x_2135.z, x_2136.w);
        let x_2138 : vec4<f32> = u_xlat9;
        let x_2140 : vec3<f32> = (vec3<f32>(x_2138.x, x_2138.y, x_2138.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2141 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2140.x, x_2140.y, x_2140.z, x_2141.w);
        let x_2143 : vec4<f32> = u_xlat12;
        let x_2145 : vec4<f32> = u_xlat8;
        let x_2147 : vec3<f32> = (vec3<f32>(x_2143.z, x_2143.y, x_2143.w) / vec3<f32>(x_2145.x, x_2145.y, x_2145.z));
        let x_2148 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2147.x, x_2147.y, x_2147.z, x_2148.w);
        let x_2150 : vec4<f32> = u_xlat10;
        let x_2152 : vec3<f32> = (vec3<f32>(x_2150.x, x_2150.y, x_2150.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2153 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2152.x, x_2152.y, x_2152.z, x_2153.w);
        let x_2155 : vec4<f32> = u_xlat9;
        let x_2158 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2160 : vec3<f32> = (vec3<f32>(x_2155.y, x_2155.x, x_2155.z) * vec3<f32>(x_2158.x, x_2158.x, x_2158.x));
        let x_2161 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2160.x, x_2160.y, x_2160.z, x_2161.w);
        let x_2163 : vec4<f32> = u_xlat10;
        let x_2166 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2168 : vec3<f32> = (vec3<f32>(x_2163.x, x_2163.y, x_2163.z) * vec3<f32>(x_2166.y, x_2166.y, x_2166.y));
        let x_2169 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2168.x, x_2168.y, x_2168.z, x_2169.w);
        let x_2172 : f32 = u_xlat10.x;
        u_xlat9.w = x_2172;
        let x_2174 : vec4<f32> = u_xlat7;
        let x_2177 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2180 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2174.x, x_2174.y, x_2174.x, x_2174.y) * vec4<f32>(x_2177.x, x_2177.y, x_2177.x, x_2177.y)) + vec4<f32>(x_2180.y, x_2180.w, x_2180.x, x_2180.w));
        let x_2183 : vec4<f32> = u_xlat7;
        let x_2186 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2189 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2183.x, x_2183.y) * vec2<f32>(x_2186.x, x_2186.y)) + vec2<f32>(x_2189.z, x_2189.w));
        let x_2193 : f32 = u_xlat9.y;
        u_xlat10.w = x_2193;
        let x_2195 : vec4<f32> = u_xlat10;
        let x_2196 : vec2<f32> = vec2<f32>(x_2195.y, x_2195.z);
        let x_2197 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2197.x, x_2196.x, x_2197.z, x_2196.y);
        let x_2199 : vec4<f32> = u_xlat7;
        let x_2202 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2205 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2199.x, x_2199.y, x_2199.x, x_2199.y) * vec4<f32>(x_2202.x, x_2202.y, x_2202.x, x_2202.y)) + vec4<f32>(x_2205.x, x_2205.y, x_2205.z, x_2205.y));
        let x_2208 : vec4<f32> = u_xlat7;
        let x_2211 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2214 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2208.x, x_2208.y, x_2208.x, x_2208.y) * vec4<f32>(x_2211.x, x_2211.y, x_2211.x, x_2211.y)) + vec4<f32>(x_2214.w, x_2214.y, x_2214.w, x_2214.z));
        let x_2217 : vec4<f32> = u_xlat7;
        let x_2220 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2223 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2217.x, x_2217.y, x_2217.x, x_2217.y) * vec4<f32>(x_2220.x, x_2220.y, x_2220.x, x_2220.y)) + vec4<f32>(x_2223.x, x_2223.w, x_2223.z, x_2223.w));
        let x_2226 : vec4<f32> = u_xlat8;
        let x_2228 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2226.x, x_2226.x, x_2226.x, x_2226.y) * vec4<f32>(x_2228.z, x_2228.w, x_2228.y, x_2228.z));
        let x_2231 : vec4<f32> = u_xlat8;
        let x_2233 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2231.y, x_2231.y, x_2231.z, x_2231.z) * x_2233);
        let x_2237 : f32 = u_xlat8.z;
        let x_2239 : f32 = u_xlat13.y;
        u_xlat69 = (x_2237 * x_2239);
        let x_2242 : vec4<f32> = u_xlat11;
        let x_2243 : vec2<f32> = vec2<f32>(x_2242.x, x_2242.y);
        let x_2245 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2243.x, x_2243.y, x_2245);
        let x_2252 : vec3<f32> = txVec34;
        let x_2254 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2252.xy, x_2252.z);
        u_xlat7.x = x_2254;
        let x_2257 : vec4<f32> = u_xlat11;
        let x_2258 : vec2<f32> = vec2<f32>(x_2257.z, x_2257.w);
        let x_2260 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2258.x, x_2258.y, x_2260);
        let x_2267 : vec3<f32> = txVec35;
        let x_2269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2267.xy, x_2267.z);
        u_xlat28.x = x_2269;
        let x_2272 : f32 = u_xlat28.x;
        let x_2274 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2272 * x_2274);
        let x_2278 : f32 = u_xlat14.x;
        let x_2280 : f32 = u_xlat7.x;
        let x_2283 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2278 * x_2280) + x_2283);
        let x_2287 : vec2<f32> = u_xlat49;
        let x_2289 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2287.x, x_2287.y, x_2289);
        let x_2296 : vec3<f32> = txVec36;
        let x_2298 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2296.xy, x_2296.z);
        u_xlat28.x = x_2298;
        let x_2301 : f32 = u_xlat14.z;
        let x_2303 : f32 = u_xlat28.x;
        let x_2306 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2301 * x_2303) + x_2306);
        let x_2310 : vec4<f32> = u_xlat10;
        let x_2311 : vec2<f32> = vec2<f32>(x_2310.x, x_2310.y);
        let x_2313 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2311.x, x_2311.y, x_2313);
        let x_2320 : vec3<f32> = txVec37;
        let x_2322 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2320.xy, x_2320.z);
        u_xlat28.x = x_2322;
        let x_2325 : f32 = u_xlat14.w;
        let x_2327 : f32 = u_xlat28.x;
        let x_2330 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2325 * x_2327) + x_2330);
        let x_2334 : vec4<f32> = u_xlat12;
        let x_2335 : vec2<f32> = vec2<f32>(x_2334.x, x_2334.y);
        let x_2337 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2335.x, x_2335.y, x_2337);
        let x_2344 : vec3<f32> = txVec38;
        let x_2346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2344.xy, x_2344.z);
        u_xlat28.x = x_2346;
        let x_2349 : f32 = u_xlat15.x;
        let x_2351 : f32 = u_xlat28.x;
        let x_2354 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2349 * x_2351) + x_2354);
        let x_2358 : vec4<f32> = u_xlat12;
        let x_2359 : vec2<f32> = vec2<f32>(x_2358.z, x_2358.w);
        let x_2361 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2359.x, x_2359.y, x_2361);
        let x_2368 : vec3<f32> = txVec39;
        let x_2370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2368.xy, x_2368.z);
        u_xlat28.x = x_2370;
        let x_2373 : f32 = u_xlat15.y;
        let x_2375 : f32 = u_xlat28.x;
        let x_2378 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2373 * x_2375) + x_2378);
        let x_2382 : vec4<f32> = u_xlat10;
        let x_2383 : vec2<f32> = vec2<f32>(x_2382.z, x_2382.w);
        let x_2385 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2383.x, x_2383.y, x_2385);
        let x_2392 : vec3<f32> = txVec40;
        let x_2394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2392.xy, x_2392.z);
        u_xlat28.x = x_2394;
        let x_2397 : f32 = u_xlat15.z;
        let x_2399 : f32 = u_xlat28.x;
        let x_2402 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2397 * x_2399) + x_2402);
        let x_2406 : vec4<f32> = u_xlat9;
        let x_2407 : vec2<f32> = vec2<f32>(x_2406.x, x_2406.y);
        let x_2409 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2407.x, x_2407.y, x_2409);
        let x_2416 : vec3<f32> = txVec41;
        let x_2418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2416.xy, x_2416.z);
        u_xlat28.x = x_2418;
        let x_2421 : f32 = u_xlat15.w;
        let x_2423 : f32 = u_xlat28.x;
        let x_2426 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2421 * x_2423) + x_2426);
        let x_2430 : vec4<f32> = u_xlat9;
        let x_2431 : vec2<f32> = vec2<f32>(x_2430.z, x_2430.w);
        let x_2433 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2431.x, x_2431.y, x_2433);
        let x_2440 : vec3<f32> = txVec42;
        let x_2442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2440.xy, x_2440.z);
        u_xlat28.x = x_2442;
        let x_2444 : f32 = u_xlat69;
        let x_2446 : f32 = u_xlat28.x;
        let x_2449 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_2444 * x_2446) + x_2449);
      } else {
        let x_2453 : vec4<f32> = vs_INTERP9;
        let x_2456 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2459 : vec2<f32> = ((vec2<f32>(x_2453.x, x_2453.y) * vec2<f32>(x_2456.z, x_2456.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2460 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2459.x, x_2459.y, x_2460.z, x_2460.w);
        let x_2462 : vec4<f32> = u_xlat7;
        let x_2464 : vec2<f32> = floor(vec2<f32>(x_2462.x, x_2462.y));
        let x_2465 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2464.x, x_2464.y, x_2465.z, x_2465.w);
        let x_2467 : vec4<f32> = vs_INTERP9;
        let x_2470 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2473 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2467.x, x_2467.y) * vec2<f32>(x_2470.z, x_2470.w)) + -(vec2<f32>(x_2473.x, x_2473.y)));
        let x_2477 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2477.x, x_2477.x, x_2477.y, x_2477.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2480 : vec4<f32> = u_xlat8;
        let x_2482 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2480.x, x_2480.x, x_2480.z, x_2480.z) * vec4<f32>(x_2482.x, x_2482.x, x_2482.z, x_2482.z));
        let x_2485 : vec4<f32> = u_xlat9;
        let x_2487 : vec2<f32> = (vec2<f32>(x_2485.y, x_2485.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2488 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2488.x, x_2487.x, x_2488.z, x_2487.y);
        let x_2490 : vec4<f32> = u_xlat9;
        let x_2493 : vec2<f32> = u_xlat49;
        let x_2495 : vec2<f32> = ((vec2<f32>(x_2490.x, x_2490.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2493));
        let x_2496 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2495.x, x_2496.y, x_2495.y, x_2496.w);
        let x_2498 : vec2<f32> = u_xlat49;
        let x_2500 : vec2<f32> = (-(x_2498) + vec2<f32>(1.0f, 1.0f));
        let x_2501 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2500.x, x_2500.y, x_2501.z, x_2501.w);
        let x_2503 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2503, vec2<f32>(0.0f, 0.0f));
        let x_2505 : vec2<f32> = u_xlat51;
        let x_2507 : vec2<f32> = u_xlat51;
        let x_2509 : vec4<f32> = u_xlat9;
        let x_2511 : vec2<f32> = ((-(x_2505) * x_2507) + vec2<f32>(x_2509.x, x_2509.y));
        let x_2512 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2511.x, x_2511.y, x_2512.z, x_2512.w);
        let x_2514 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2514, vec2<f32>(0.0f, 0.0f));
        let x_2516 : vec2<f32> = u_xlat51;
        let x_2518 : vec2<f32> = u_xlat51;
        let x_2520 : vec4<f32> = u_xlat8;
        let x_2522 : vec2<f32> = ((-(x_2516) * x_2518) + vec2<f32>(x_2520.y, x_2520.w));
        let x_2523 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2522.x, x_2523.y, x_2522.y);
        let x_2525 : vec4<f32> = u_xlat9;
        let x_2527 : vec2<f32> = (vec2<f32>(x_2525.x, x_2525.y) + vec2<f32>(2.0f, 2.0f));
        let x_2528 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2527.x, x_2527.y, x_2528.z, x_2528.w);
        let x_2530 : vec3<f32> = u_xlat29;
        let x_2532 : vec2<f32> = (vec2<f32>(x_2530.x, x_2530.z) + vec2<f32>(2.0f, 2.0f));
        let x_2533 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2533.x, x_2532.x, x_2533.z, x_2532.y);
        let x_2536 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2536 * 0.081632003f);
        let x_2539 : vec4<f32> = u_xlat8;
        let x_2541 : vec3<f32> = (vec3<f32>(x_2539.z, x_2539.x, x_2539.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2542 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2541.x, x_2541.y, x_2541.z, x_2542.w);
        let x_2544 : vec4<f32> = u_xlat9;
        let x_2546 : vec2<f32> = (vec2<f32>(x_2544.x, x_2544.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2547 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2546.x, x_2546.y, x_2547.z, x_2547.w);
        let x_2550 : f32 = u_xlat12.y;
        u_xlat11.x = x_2550;
        let x_2552 : vec2<f32> = u_xlat49;
        let x_2555 : vec2<f32> = ((vec2<f32>(x_2552.x, x_2552.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2556 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2556.x, x_2555.x, x_2556.z, x_2555.y);
        let x_2558 : vec2<f32> = u_xlat49;
        let x_2561 : vec2<f32> = ((vec2<f32>(x_2558.x, x_2558.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2562 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2561.x, x_2562.y, x_2561.y, x_2562.w);
        let x_2565 : f32 = u_xlat8.x;
        u_xlat9.y = x_2565;
        let x_2568 : f32 = u_xlat10.y;
        u_xlat9.w = x_2568;
        let x_2570 : vec4<f32> = u_xlat9;
        let x_2571 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2570 + x_2571);
        let x_2573 : vec2<f32> = u_xlat49;
        let x_2576 : vec2<f32> = ((vec2<f32>(x_2573.y, x_2573.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2577 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2577.x, x_2576.x, x_2577.z, x_2576.y);
        let x_2579 : vec2<f32> = u_xlat49;
        let x_2582 : vec2<f32> = ((vec2<f32>(x_2579.y, x_2579.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2583 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2582.x, x_2583.y, x_2582.y, x_2583.w);
        let x_2586 : f32 = u_xlat8.y;
        u_xlat10.y = x_2586;
        let x_2588 : vec4<f32> = u_xlat10;
        let x_2589 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2588 + x_2589);
        let x_2591 : vec4<f32> = u_xlat9;
        let x_2592 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2591 / x_2592);
        let x_2594 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2594 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2596 : vec4<f32> = u_xlat10;
        let x_2597 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2596 / x_2597);
        let x_2599 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2599 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2601 : vec4<f32> = u_xlat9;
        let x_2604 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2601.w, x_2601.x, x_2601.y, x_2601.z) * vec4<f32>(x_2604.x, x_2604.x, x_2604.x, x_2604.x));
        let x_2607 : vec4<f32> = u_xlat10;
        let x_2610 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2607.x, x_2607.w, x_2607.y, x_2607.z) * vec4<f32>(x_2610.y, x_2610.y, x_2610.y, x_2610.y));
        let x_2613 : vec4<f32> = u_xlat9;
        let x_2614 : vec3<f32> = vec3<f32>(x_2613.y, x_2613.z, x_2613.w);
        let x_2615 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2614.x, x_2615.y, x_2614.y, x_2614.z);
        let x_2618 : f32 = u_xlat10.x;
        u_xlat12.y = x_2618;
        let x_2620 : vec4<f32> = u_xlat7;
        let x_2623 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2626 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2620.x, x_2620.y, x_2620.x, x_2620.y) * vec4<f32>(x_2623.x, x_2623.y, x_2623.x, x_2623.y)) + vec4<f32>(x_2626.x, x_2626.y, x_2626.z, x_2626.y));
        let x_2629 : vec4<f32> = u_xlat7;
        let x_2632 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2635 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2629.x, x_2629.y) * vec2<f32>(x_2632.x, x_2632.y)) + vec2<f32>(x_2635.w, x_2635.y));
        let x_2639 : f32 = u_xlat12.y;
        u_xlat9.y = x_2639;
        let x_2642 : f32 = u_xlat10.z;
        u_xlat12.y = x_2642;
        let x_2644 : vec4<f32> = u_xlat7;
        let x_2647 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2650 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2644.x, x_2644.y, x_2644.x, x_2644.y) * vec4<f32>(x_2647.x, x_2647.y, x_2647.x, x_2647.y)) + vec4<f32>(x_2650.x, x_2650.y, x_2650.z, x_2650.y));
        let x_2653 : vec4<f32> = u_xlat7;
        let x_2656 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2659 : vec4<f32> = u_xlat12;
        let x_2661 : vec2<f32> = ((vec2<f32>(x_2653.x, x_2653.y) * vec2<f32>(x_2656.x, x_2656.y)) + vec2<f32>(x_2659.w, x_2659.y));
        let x_2662 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2661.x, x_2661.y, x_2662.z, x_2662.w);
        let x_2665 : f32 = u_xlat12.y;
        u_xlat9.z = x_2665;
        let x_2667 : vec4<f32> = u_xlat7;
        let x_2670 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2673 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2667.x, x_2667.y, x_2667.x, x_2667.y) * vec4<f32>(x_2670.x, x_2670.y, x_2670.x, x_2670.y)) + vec4<f32>(x_2673.x, x_2673.y, x_2673.x, x_2673.z));
        let x_2677 : f32 = u_xlat10.w;
        u_xlat12.y = x_2677;
        let x_2679 : vec4<f32> = u_xlat7;
        let x_2682 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2685 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2679.x, x_2679.y, x_2679.x, x_2679.y) * vec4<f32>(x_2682.x, x_2682.y, x_2682.x, x_2682.y)) + vec4<f32>(x_2685.x, x_2685.y, x_2685.z, x_2685.y));
        let x_2689 : vec4<f32> = u_xlat7;
        let x_2692 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2695 : vec4<f32> = u_xlat12;
        let x_2697 : vec2<f32> = ((vec2<f32>(x_2689.x, x_2689.y) * vec2<f32>(x_2692.x, x_2692.y)) + vec2<f32>(x_2695.w, x_2695.y));
        let x_2698 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2697.x, x_2697.y, x_2698.z);
        let x_2701 : f32 = u_xlat12.y;
        u_xlat9.w = x_2701;
        let x_2704 : vec4<f32> = u_xlat7;
        let x_2707 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2710 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2704.x, x_2704.y) * vec2<f32>(x_2707.x, x_2707.y)) + vec2<f32>(x_2710.x, x_2710.w));
        let x_2713 : vec4<f32> = u_xlat12;
        let x_2714 : vec3<f32> = vec3<f32>(x_2713.x, x_2713.z, x_2713.w);
        let x_2715 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2714.x, x_2715.y, x_2714.y, x_2714.z);
        let x_2717 : vec4<f32> = u_xlat7;
        let x_2720 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2723 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2717.x, x_2717.y, x_2717.x, x_2717.y) * vec4<f32>(x_2720.x, x_2720.y, x_2720.x, x_2720.y)) + vec4<f32>(x_2723.x, x_2723.y, x_2723.z, x_2723.y));
        let x_2727 : vec4<f32> = u_xlat7;
        let x_2730 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2733 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2727.x, x_2727.y) * vec2<f32>(x_2730.x, x_2730.y)) + vec2<f32>(x_2733.w, x_2733.y));
        let x_2737 : f32 = u_xlat9.x;
        u_xlat10.x = x_2737;
        let x_2739 : vec4<f32> = u_xlat7;
        let x_2742 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2745 : vec4<f32> = u_xlat10;
        let x_2747 : vec2<f32> = ((vec2<f32>(x_2739.x, x_2739.y) * vec2<f32>(x_2742.x, x_2742.y)) + vec2<f32>(x_2745.x, x_2745.y));
        let x_2748 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2747.x, x_2747.y, x_2748.z, x_2748.w);
        let x_2750 : vec4<f32> = u_xlat8;
        let x_2752 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2750.x, x_2750.x, x_2750.x, x_2750.x) * x_2752);
        let x_2754 : vec4<f32> = u_xlat8;
        let x_2756 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2754.y, x_2754.y, x_2754.y, x_2754.y) * x_2756);
        let x_2759 : vec4<f32> = u_xlat8;
        let x_2761 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2759.z, x_2759.z, x_2759.z, x_2759.z) * x_2761);
        let x_2763 : vec4<f32> = u_xlat8;
        let x_2765 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2763.w, x_2763.w, x_2763.w, x_2763.w) * x_2765);
        let x_2768 : vec4<f32> = u_xlat13;
        let x_2769 : vec2<f32> = vec2<f32>(x_2768.x, x_2768.y);
        let x_2771 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2769.x, x_2769.y, x_2771);
        let x_2778 : vec3<f32> = txVec43;
        let x_2780 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2778.xy, x_2778.z);
        u_xlat69 = x_2780;
        let x_2782 : vec4<f32> = u_xlat13;
        let x_2783 : vec2<f32> = vec2<f32>(x_2782.z, x_2782.w);
        let x_2785 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2783.x, x_2783.y, x_2785);
        let x_2792 : vec3<f32> = txVec44;
        let x_2794 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2792.xy, x_2792.z);
        u_xlat9.x = x_2794;
        let x_2797 : f32 = u_xlat9.x;
        let x_2799 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2797 * x_2799);
        let x_2803 : f32 = u_xlat18.x;
        let x_2804 : f32 = u_xlat69;
        let x_2807 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2803 * x_2804) + x_2807);
        let x_2810 : vec2<f32> = u_xlat49;
        let x_2812 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2810.x, x_2810.y, x_2812);
        let x_2819 : vec3<f32> = txVec45;
        let x_2821 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2819.xy, x_2819.z);
        u_xlat49.x = x_2821;
        let x_2824 : f32 = u_xlat18.z;
        let x_2826 : f32 = u_xlat49.x;
        let x_2828 : f32 = u_xlat69;
        u_xlat69 = ((x_2824 * x_2826) + x_2828);
        let x_2831 : vec4<f32> = u_xlat16;
        let x_2832 : vec2<f32> = vec2<f32>(x_2831.x, x_2831.y);
        let x_2834 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2832.x, x_2832.y, x_2834);
        let x_2841 : vec3<f32> = txVec46;
        let x_2843 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2841.xy, x_2841.z);
        u_xlat49.x = x_2843;
        let x_2846 : f32 = u_xlat18.w;
        let x_2848 : f32 = u_xlat49.x;
        let x_2850 : f32 = u_xlat69;
        u_xlat69 = ((x_2846 * x_2848) + x_2850);
        let x_2853 : vec4<f32> = u_xlat14;
        let x_2854 : vec2<f32> = vec2<f32>(x_2853.x, x_2853.y);
        let x_2856 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2854.x, x_2854.y, x_2856);
        let x_2863 : vec3<f32> = txVec47;
        let x_2865 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2863.xy, x_2863.z);
        u_xlat49.x = x_2865;
        let x_2868 : f32 = u_xlat19.x;
        let x_2870 : f32 = u_xlat49.x;
        let x_2872 : f32 = u_xlat69;
        u_xlat69 = ((x_2868 * x_2870) + x_2872);
        let x_2875 : vec4<f32> = u_xlat14;
        let x_2876 : vec2<f32> = vec2<f32>(x_2875.z, x_2875.w);
        let x_2878 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2876.x, x_2876.y, x_2878);
        let x_2885 : vec3<f32> = txVec48;
        let x_2887 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2885.xy, x_2885.z);
        u_xlat49.x = x_2887;
        let x_2890 : f32 = u_xlat19.y;
        let x_2892 : f32 = u_xlat49.x;
        let x_2894 : f32 = u_xlat69;
        u_xlat69 = ((x_2890 * x_2892) + x_2894);
        let x_2897 : vec4<f32> = u_xlat15;
        let x_2898 : vec2<f32> = vec2<f32>(x_2897.x, x_2897.y);
        let x_2900 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2898.x, x_2898.y, x_2900);
        let x_2907 : vec3<f32> = txVec49;
        let x_2909 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2907.xy, x_2907.z);
        u_xlat49.x = x_2909;
        let x_2912 : f32 = u_xlat19.z;
        let x_2914 : f32 = u_xlat49.x;
        let x_2916 : f32 = u_xlat69;
        u_xlat69 = ((x_2912 * x_2914) + x_2916);
        let x_2919 : vec4<f32> = u_xlat16;
        let x_2920 : vec2<f32> = vec2<f32>(x_2919.z, x_2919.w);
        let x_2922 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2920.x, x_2920.y, x_2922);
        let x_2929 : vec3<f32> = txVec50;
        let x_2931 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2929.xy, x_2929.z);
        u_xlat49.x = x_2931;
        let x_2934 : f32 = u_xlat19.w;
        let x_2936 : f32 = u_xlat49.x;
        let x_2938 : f32 = u_xlat69;
        u_xlat69 = ((x_2934 * x_2936) + x_2938);
        let x_2941 : vec4<f32> = u_xlat17;
        let x_2942 : vec2<f32> = vec2<f32>(x_2941.x, x_2941.y);
        let x_2944 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2942.x, x_2942.y, x_2944);
        let x_2951 : vec3<f32> = txVec51;
        let x_2953 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2951.xy, x_2951.z);
        u_xlat49.x = x_2953;
        let x_2956 : f32 = u_xlat20.x;
        let x_2958 : f32 = u_xlat49.x;
        let x_2960 : f32 = u_xlat69;
        u_xlat69 = ((x_2956 * x_2958) + x_2960);
        let x_2963 : vec4<f32> = u_xlat17;
        let x_2964 : vec2<f32> = vec2<f32>(x_2963.z, x_2963.w);
        let x_2966 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2964.x, x_2964.y, x_2966);
        let x_2973 : vec3<f32> = txVec52;
        let x_2975 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2973.xy, x_2973.z);
        u_xlat49.x = x_2975;
        let x_2978 : f32 = u_xlat20.y;
        let x_2980 : f32 = u_xlat49.x;
        let x_2982 : f32 = u_xlat69;
        u_xlat69 = ((x_2978 * x_2980) + x_2982);
        let x_2985 : vec3<f32> = u_xlat30;
        let x_2986 : vec2<f32> = vec2<f32>(x_2985.x, x_2985.y);
        let x_2988 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2986.x, x_2986.y, x_2988);
        let x_2995 : vec3<f32> = txVec53;
        let x_2997 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2995.xy, x_2995.z);
        u_xlat49.x = x_2997;
        let x_3000 : f32 = u_xlat20.z;
        let x_3002 : f32 = u_xlat49.x;
        let x_3004 : f32 = u_xlat69;
        u_xlat69 = ((x_3000 * x_3002) + x_3004);
        let x_3007 : vec2<f32> = u_xlat57;
        let x_3009 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3007.x, x_3007.y, x_3009);
        let x_3016 : vec3<f32> = txVec54;
        let x_3018 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3016.xy, x_3016.z);
        u_xlat49.x = x_3018;
        let x_3021 : f32 = u_xlat20.w;
        let x_3023 : f32 = u_xlat49.x;
        let x_3025 : f32 = u_xlat69;
        u_xlat69 = ((x_3021 * x_3023) + x_3025);
        let x_3028 : vec4<f32> = u_xlat12;
        let x_3029 : vec2<f32> = vec2<f32>(x_3028.x, x_3028.y);
        let x_3031 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3029.x, x_3029.y, x_3031);
        let x_3038 : vec3<f32> = txVec55;
        let x_3040 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3038.xy, x_3038.z);
        u_xlat49.x = x_3040;
        let x_3043 : f32 = u_xlat8.x;
        let x_3045 : f32 = u_xlat49.x;
        let x_3047 : f32 = u_xlat69;
        u_xlat69 = ((x_3043 * x_3045) + x_3047);
        let x_3050 : vec4<f32> = u_xlat12;
        let x_3051 : vec2<f32> = vec2<f32>(x_3050.z, x_3050.w);
        let x_3053 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3051.x, x_3051.y, x_3053);
        let x_3060 : vec3<f32> = txVec56;
        let x_3062 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3060.xy, x_3060.z);
        u_xlat49.x = x_3062;
        let x_3065 : f32 = u_xlat8.y;
        let x_3067 : f32 = u_xlat49.x;
        let x_3069 : f32 = u_xlat69;
        u_xlat69 = ((x_3065 * x_3067) + x_3069);
        let x_3072 : vec2<f32> = u_xlat52;
        let x_3074 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3072.x, x_3072.y, x_3074);
        let x_3081 : vec3<f32> = txVec57;
        let x_3083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3081.xy, x_3081.z);
        u_xlat49.x = x_3083;
        let x_3086 : f32 = u_xlat8.z;
        let x_3088 : f32 = u_xlat49.x;
        let x_3090 : f32 = u_xlat69;
        u_xlat69 = ((x_3086 * x_3088) + x_3090);
        let x_3093 : vec4<f32> = u_xlat7;
        let x_3094 : vec2<f32> = vec2<f32>(x_3093.x, x_3093.y);
        let x_3096 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3094.x, x_3094.y, x_3096);
        let x_3103 : vec3<f32> = txVec58;
        let x_3105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3103.xy, x_3103.z);
        u_xlat7.x = x_3105;
        let x_3108 : f32 = u_xlat8.w;
        let x_3110 : f32 = u_xlat7.x;
        let x_3112 : f32 = u_xlat69;
        u_xlat0.x = ((x_3108 * x_3110) + x_3112);
      }
    }
  } else {
    let x_3117 : vec4<f32> = vs_INTERP9;
    let x_3118 : vec2<f32> = vec2<f32>(x_3117.x, x_3117.y);
    let x_3120 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3118.x, x_3118.y, x_3120);
    let x_3127 : vec3<f32> = txVec59;
    let x_3129 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3127.xy, x_3127.z);
    u_xlat0.x = x_3129;
  }
  let x_3132 : f32 = u_xlat0.x;
  let x_3134 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3137 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3132 * x_3134) + x_3137);
  let x_3144 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3144);
  let x_3148 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3148 >= 1.0f);
  let x_3151 : bool = u_xlatb2.x;
  let x_3152 : bool = u_xlatb69;
  u_xlatb2.x = (x_3151 | x_3152);
  let x_3156 : bool = u_xlatb2.x;
  if (x_3156) {
    x_3157 = 1.0f;
  } else {
    let x_3162 : f32 = u_xlat0.x;
    x_3157 = x_3162;
  }
  let x_3163 : f32 = x_3157;
  u_xlat0.x = x_3163;
  let x_3165 : vec3<f32> = vs_INTERP0;
  let x_3167 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3169 : vec3<f32> = (x_3165 + -(x_3167));
  let x_3170 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3169.x, x_3169.y, x_3169.z, x_3170.w);
  let x_3172 : vec4<f32> = u_xlat7;
  let x_3174 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3172.x, x_3172.y, x_3172.z), vec3<f32>(x_3174.x, x_3174.y, x_3174.z));
  let x_3179 : f32 = u_xlat2.x;
  let x_3181 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3184 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3179 * x_3181) + x_3184);
  let x_3188 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3188, 0.0f, 1.0f);
  let x_3192 : f32 = u_xlat0.x;
  u_xlat69 = (-(x_3192) + 1.0f);
  let x_3196 : f32 = u_xlat2.x;
  let x_3197 : f32 = u_xlat69;
  let x_3200 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3196 * x_3197) + x_3200);
  let x_3209 : f32 = x_3207.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3209 == -1.0f));
  let x_3213 : bool = u_xlatb2.x;
  if (x_3213) {
    let x_3216 : vec3<f32> = vs_INTERP0;
    let x_3219 : vec4<f32> = x_3207.x_MainLightWorldToLight[1i];
    let x_3221 : vec2<f32> = (vec2<f32>(x_3216.y, x_3216.y) * vec2<f32>(x_3219.x, x_3219.y));
    let x_3222 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3221.x, x_3221.y, x_3222.z, x_3222.w);
    let x_3225 : vec4<f32> = x_3207.x_MainLightWorldToLight[0i];
    let x_3227 : vec3<f32> = vs_INTERP0;
    let x_3230 : vec4<f32> = u_xlat7;
    let x_3232 : vec2<f32> = ((vec2<f32>(x_3225.x, x_3225.y) * vec2<f32>(x_3227.x, x_3227.x)) + vec2<f32>(x_3230.x, x_3230.y));
    let x_3233 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3232.x, x_3232.y, x_3233.z, x_3233.w);
    let x_3236 : vec4<f32> = x_3207.x_MainLightWorldToLight[2i];
    let x_3238 : vec3<f32> = vs_INTERP0;
    let x_3241 : vec4<f32> = u_xlat7;
    let x_3243 : vec2<f32> = ((vec2<f32>(x_3236.x, x_3236.y) * vec2<f32>(x_3238.z, x_3238.z)) + vec2<f32>(x_3241.x, x_3241.y));
    let x_3244 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3243.x, x_3243.y, x_3244.z, x_3244.w);
    let x_3246 : vec4<f32> = u_xlat7;
    let x_3249 : vec4<f32> = x_3207.x_MainLightWorldToLight[3i];
    let x_3251 : vec2<f32> = (vec2<f32>(x_3246.x, x_3246.y) + vec2<f32>(x_3249.x, x_3249.y));
    let x_3252 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3251.x, x_3251.y, x_3252.z, x_3252.w);
    let x_3254 : vec4<f32> = u_xlat7;
    let x_3257 : vec2<f32> = ((vec2<f32>(x_3254.x, x_3254.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3258 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3257.x, x_3257.y, x_3258.z, x_3258.w);
    let x_3265 : vec4<f32> = u_xlat7;
    let x_3268 : f32 = x_137.x_GlobalMipBias.x;
    let x_3269 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3265.x, x_3265.y), x_3268);
    u_xlat7 = x_3269;
    let x_3272 : f32 = x_3207.x_MainLightCookieTextureFormat;
    let x_3274 : f32 = x_3207.x_MainLightCookieTextureFormat;
    let x_3276 : f32 = x_3207.x_MainLightCookieTextureFormat;
    let x_3278 : f32 = x_3207.x_MainLightCookieTextureFormat;
    let x_3279 : vec4<f32> = vec4<f32>(x_3272, x_3274, x_3276, x_3278);
    let x_3286 : vec4<bool> = (vec4<f32>(x_3279.x, x_3279.y, x_3279.z, x_3279.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3286.x, x_3286.y);
    let x_3289 : bool = u_xlatb8.y;
    if (x_3289) {
      let x_3294 : f32 = u_xlat7.w;
      x_3290 = x_3294;
    } else {
      let x_3297 : f32 = u_xlat7.x;
      x_3290 = x_3297;
    }
    let x_3298 : f32 = x_3290;
    u_xlat2.x = x_3298;
    let x_3301 : bool = u_xlatb8.x;
    if (x_3301) {
      let x_3305 : vec4<f32> = u_xlat7;
      x_3302 = vec3<f32>(x_3305.x, x_3305.y, x_3305.z);
    } else {
      let x_3308 : vec3<f32> = u_xlat2;
      x_3302 = vec3<f32>(x_3308.x, x_3308.x, x_3308.x);
    }
    let x_3310 : vec3<f32> = x_3302;
    let x_3311 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3310.x, x_3310.y, x_3310.z, x_3311.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3317 : vec4<f32> = u_xlat7;
  let x_3320 : vec4<f32> = x_137.x_MainLightColor;
  let x_3322 : vec3<f32> = (vec3<f32>(x_3317.x, x_3317.y, x_3317.z) * vec3<f32>(x_3320.x, x_3320.y, x_3320.z));
  let x_3323 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3322.x, x_3322.y, x_3322.z, x_3323.w);
  let x_3325 : f32 = u_xlat48;
  let x_3327 : vec4<f32> = u_xlat7;
  let x_3329 : vec3<f32> = (vec3<f32>(x_3325, x_3325, x_3325) * vec3<f32>(x_3327.x, x_3327.y, x_3327.z));
  let x_3330 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3329.x, x_3329.y, x_3329.z, x_3330.w);
  let x_3332 : vec4<f32> = u_xlat3;
  let x_3335 : vec3<f32> = u_xlat21;
  u_xlat2.x = dot(-(vec3<f32>(x_3332.x, x_3332.y, x_3332.z)), x_3335);
  let x_3339 : f32 = u_xlat2.x;
  let x_3341 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3339 + x_3341);
  let x_3344 : vec3<f32> = u_xlat21;
  let x_3345 : vec3<f32> = u_xlat2;
  let x_3349 : vec4<f32> = u_xlat3;
  let x_3352 : vec3<f32> = ((x_3344 * -(vec3<f32>(x_3345.x, x_3345.x, x_3345.x))) + -(vec3<f32>(x_3349.x, x_3349.y, x_3349.z)));
  let x_3353 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3352.x, x_3352.y, x_3352.z, x_3353.w);
  let x_3355 : vec3<f32> = u_xlat21;
  let x_3356 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_3355, vec3<f32>(x_3356.x, x_3356.y, x_3356.z));
  let x_3361 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3361, 0.0f, 1.0f);
  let x_3365 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3365) + 1.0f);
  let x_3370 : f32 = u_xlat2.x;
  let x_3372 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3370 * x_3372);
  let x_3376 : f32 = u_xlat2.x;
  let x_3378 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3376 * x_3378);
  let x_3381 : f32 = u_xlat65;
  u_xlat69 = ((-(x_3381) * 0.699999988f) + 1.700000048f);
  let x_3387 : f32 = u_xlat65;
  let x_3388 : f32 = u_xlat69;
  u_xlat65 = (x_3387 * x_3388);
  let x_3390 : f32 = u_xlat65;
  u_xlat65 = (x_3390 * 6.0f);
  let x_3401 : vec4<f32> = u_xlat8;
  let x_3403 : f32 = u_xlat65;
  let x_3404 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3401.x, x_3401.y, x_3401.z), x_3403);
  u_xlat8 = x_3404;
  let x_3406 : f32 = u_xlat8.w;
  u_xlat65 = (x_3406 + -1.0f);
  let x_3409 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3410 : f32 = u_xlat65;
  u_xlat65 = ((x_3409 * x_3410) + 1.0f);
  let x_3413 : f32 = u_xlat65;
  u_xlat65 = max(x_3413, 0.0f);
  let x_3415 : f32 = u_xlat65;
  u_xlat65 = log2(x_3415);
  let x_3417 : f32 = u_xlat65;
  let x_3419 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat65 = (x_3417 * x_3419);
  let x_3421 : f32 = u_xlat65;
  u_xlat65 = exp2(x_3421);
  let x_3423 : f32 = u_xlat65;
  let x_3425 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat65 = (x_3423 * x_3425);
  let x_3427 : vec4<f32> = u_xlat8;
  let x_3429 : f32 = u_xlat65;
  let x_3431 : vec3<f32> = (vec3<f32>(x_3427.x, x_3427.y, x_3427.z) * vec3<f32>(x_3429, x_3429, x_3429));
  let x_3432 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3431.x, x_3431.y, x_3431.z, x_3432.w);
  let x_3434 : f32 = u_xlat66;
  let x_3436 : f32 = u_xlat66;
  let x_3440 : vec2<f32> = ((vec2<f32>(x_3434, x_3434) * vec2<f32>(x_3436, x_3436)) + vec2<f32>(-1.0f, 1.0f));
  let x_3441 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3440.x, x_3440.y, x_3441.z, x_3441.w);
  let x_3444 : f32 = u_xlat9.y;
  u_xlat65 = (1.0f / x_3444);
  let x_3446 : f32 = u_xlat68;
  u_xlat66 = (x_3446 + -0.039999999f);
  let x_3450 : f32 = u_xlat2.x;
  let x_3451 : f32 = u_xlat66;
  u_xlat2.x = ((x_3450 * x_3451) + 0.039999999f);
  let x_3457 : f32 = u_xlat2.x;
  let x_3458 : f32 = u_xlat65;
  u_xlat2.x = (x_3457 * x_3458);
  let x_3461 : vec3<f32> = u_xlat2;
  let x_3463 : vec4<f32> = u_xlat8;
  let x_3465 : vec3<f32> = (vec3<f32>(x_3461.x, x_3461.x, x_3461.x) * vec3<f32>(x_3463.x, x_3463.y, x_3463.z));
  let x_3466 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3465.x, x_3465.y, x_3465.z, x_3466.w);
  let x_3468 : vec4<f32> = u_xlat4;
  let x_3470 : vec3<f32> = u_xlat5;
  let x_3472 : vec4<f32> = u_xlat8;
  let x_3474 : vec3<f32> = ((vec3<f32>(x_3468.x, x_3468.y, x_3468.z) * x_3470) + vec3<f32>(x_3472.x, x_3472.y, x_3472.z));
  let x_3475 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3474.x, x_3474.y, x_3474.z, x_3475.w);
  let x_3478 : f32 = u_xlat0.x;
  let x_3480 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3478 * x_3480);
  let x_3483 : vec3<f32> = u_xlat21;
  let x_3485 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(x_3483, vec3<f32>(x_3485.x, x_3485.y, x_3485.z));
  let x_3490 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3490, 0.0f, 1.0f);
  let x_3494 : f32 = u_xlat0.x;
  let x_3496 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3494 * x_3496);
  let x_3499 : vec3<f32> = u_xlat0;
  let x_3501 : vec4<f32> = u_xlat7;
  let x_3503 : vec3<f32> = (vec3<f32>(x_3499.x, x_3499.x, x_3499.x) * vec3<f32>(x_3501.x, x_3501.y, x_3501.z));
  let x_3504 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3503.x, x_3503.y, x_3503.z, x_3504.w);
  let x_3506 : vec4<f32> = u_xlat3;
  let x_3509 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3511 : vec3<f32> = (vec3<f32>(x_3506.x, x_3506.y, x_3506.z) + vec3<f32>(x_3509.x, x_3509.y, x_3509.z));
  let x_3512 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3511.x, x_3511.y, x_3511.z, x_3512.w);
  let x_3514 : vec4<f32> = u_xlat8;
  let x_3516 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3514.x, x_3514.y, x_3514.z), vec3<f32>(x_3516.x, x_3516.y, x_3516.z));
  let x_3521 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3521, 1.17549435e-37f);
  let x_3525 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3525);
  let x_3528 : vec3<f32> = u_xlat0;
  let x_3530 : vec4<f32> = u_xlat8;
  let x_3532 : vec3<f32> = (vec3<f32>(x_3528.x, x_3528.x, x_3528.x) * vec3<f32>(x_3530.x, x_3530.y, x_3530.z));
  let x_3533 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3532.x, x_3532.y, x_3532.z, x_3533.w);
  let x_3535 : vec3<f32> = u_xlat21;
  let x_3536 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3535, vec3<f32>(x_3536.x, x_3536.y, x_3536.z));
  let x_3541 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3541, 0.0f, 1.0f);
  let x_3545 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3547 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3545.x, x_3545.y, x_3545.z), vec3<f32>(x_3547.x, x_3547.y, x_3547.z));
  let x_3552 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3552, 0.0f, 1.0f);
  let x_3556 : f32 = u_xlat0.x;
  let x_3558 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3556 * x_3558);
  let x_3562 : f32 = u_xlat0.x;
  let x_3564 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_3562 * x_3564) + 1.000010014f);
  let x_3570 : f32 = u_xlat2.x;
  let x_3572 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3570 * x_3572);
  let x_3576 : f32 = u_xlat0.x;
  let x_3578 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3576 * x_3578);
  let x_3582 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3582, 0.100000001f);
  let x_3587 : f32 = u_xlat0.x;
  let x_3589 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3587 * x_3589);
  let x_3593 : f32 = u_xlat6.x;
  let x_3595 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3593 * x_3595);
  let x_3598 : f32 = u_xlat67;
  let x_3600 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3598 / x_3600);
  let x_3603 : vec3<f32> = u_xlat0;
  let x_3607 : vec3<f32> = u_xlat5;
  let x_3608 : vec3<f32> = ((vec3<f32>(x_3603.x, x_3603.x, x_3603.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3607);
  let x_3609 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3608.x, x_3608.y, x_3608.z, x_3609.w);
  let x_3611 : vec4<f32> = u_xlat7;
  let x_3613 : vec4<f32> = u_xlat8;
  let x_3615 : vec3<f32> = (vec3<f32>(x_3611.x, x_3611.y, x_3611.z) * vec3<f32>(x_3613.x, x_3613.y, x_3613.z));
  let x_3616 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3615.x, x_3615.y, x_3615.z, x_3616.w);
  let x_3619 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3621 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3619, x_3621);
  let x_3627 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3627));
  let x_3631 : f32 = x_3207.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3633 : f32 = x_3207.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3635 : f32 = x_3207.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3637 : f32 = x_3207.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3638 : vec4<f32> = vec4<f32>(x_3631, x_3633, x_3635, x_3637);
  let x_3645 : vec4<bool> = (vec4<f32>(x_3638.x, x_3638.y, x_3638.z, x_3638.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3646 : vec2<bool> = vec2<bool>(x_3645.x, x_3645.w);
  let x_3647 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3646.x, x_3647.y, x_3647.z, x_3646.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3658 : u32 = u_xlatu_loop_1;
    let x_3659 : u32 = u_xlatu0;
    if ((x_3658 < x_3659)) {
    } else {
      break;
    }
    let x_3662 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3662 >> 2u);
    let x_3666 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3666 & 3u));
    let x_3669 : u32 = u_xlatu68;
    let x_3672 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3669)];
    let x_3682 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3687 : vec4<u32> = indexable[x_3682];
    u_xlat68 = dot(x_3672, bitcast<vec4<f32>>(x_3687));
    let x_3690 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3690));
    let x_3693 : vec3<f32> = vs_INTERP0;
    let x_3705 : u32 = u_xlatu68;
    let x_3708 : vec4<f32> = x_3704.x_AdditionalLightsPosition[bitcast<i32>(x_3705)];
    let x_3711 : u32 = u_xlatu68;
    let x_3714 : vec4<f32> = x_3704.x_AdditionalLightsPosition[bitcast<i32>(x_3711)];
    u_xlat30 = ((-(x_3693) * vec3<f32>(x_3708.w, x_3708.w, x_3708.w)) + vec3<f32>(x_3714.x, x_3714.y, x_3714.z));
    let x_3717 : vec3<f32> = u_xlat30;
    let x_3718 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(x_3717, x_3718);
    let x_3720 : f32 = u_xlat69;
    u_xlat69 = max(x_3720, 6.10351562e-05f);
    let x_3724 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3724);
    let x_3726 : f32 = u_xlat70;
    let x_3728 : vec3<f32> = u_xlat30;
    let x_3729 : vec3<f32> = (vec3<f32>(x_3726, x_3726, x_3726) * x_3728);
    let x_3730 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3729.x, x_3729.y, x_3729.z, x_3730.w);
    let x_3733 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3733);
    let x_3735 : f32 = u_xlat69;
    let x_3736 : u32 = u_xlatu68;
    let x_3739 : f32 = x_3704.x_AdditionalLightsAttenuation[bitcast<i32>(x_3736)].x;
    u_xlat69 = (x_3735 * x_3739);
    let x_3741 : f32 = u_xlat69;
    let x_3743 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3741) * x_3743) + 1.0f);
    let x_3746 : f32 = u_xlat69;
    u_xlat69 = max(x_3746, 0.0f);
    let x_3748 : f32 = u_xlat69;
    let x_3749 : f32 = u_xlat69;
    u_xlat69 = (x_3748 * x_3749);
    let x_3751 : f32 = u_xlat69;
    let x_3752 : f32 = u_xlat71;
    u_xlat69 = (x_3751 * x_3752);
    let x_3754 : u32 = u_xlatu68;
    let x_3757 : vec4<f32> = x_3704.x_AdditionalLightsSpotDir[bitcast<i32>(x_3754)];
    let x_3759 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3757.x, x_3757.y, x_3757.z), vec3<f32>(x_3759.x, x_3759.y, x_3759.z));
    let x_3762 : f32 = u_xlat71;
    let x_3763 : u32 = u_xlatu68;
    let x_3766 : f32 = x_3704.x_AdditionalLightsAttenuation[bitcast<i32>(x_3763)].z;
    let x_3768 : u32 = u_xlatu68;
    let x_3771 : f32 = x_3704.x_AdditionalLightsAttenuation[bitcast<i32>(x_3768)].w;
    u_xlat71 = ((x_3762 * x_3766) + x_3771);
    let x_3773 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3773, 0.0f, 1.0f);
    let x_3775 : f32 = u_xlat71;
    let x_3776 : f32 = u_xlat71;
    u_xlat71 = (x_3775 * x_3776);
    let x_3778 : f32 = u_xlat69;
    let x_3779 : f32 = u_xlat71;
    u_xlat69 = (x_3778 * x_3779);
    let x_3782 : u32 = u_xlatu68;
    u_xlatu71 = (x_3782 >> 5u);
    let x_3785 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3785) & 31i)));
    let x_3791 : i32 = u_xlati73;
    let x_3793 : u32 = u_xlatu71;
    let x_3796 : f32 = x_3207.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3793)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3791) & bitcast<u32>(x_3796)));
    let x_3800 : i32 = u_xlati71;
    if ((x_3800 != 0i)) {
      let x_3810 : u32 = u_xlatu68;
      let x_3813 : f32 = x_3809.x_AdditionalLightsLightTypes[bitcast<i32>(x_3810)].el;
      u_xlati71 = i32(x_3813);
      let x_3815 : i32 = u_xlati71;
      u_xlati73 = select(1i, 0i, (x_3815 != 0i));
      let x_3819 : u32 = u_xlatu68;
      u_xlati11 = (bitcast<i32>(x_3819) << bitcast<u32>(2i));
      let x_3822 : i32 = u_xlati73;
      if ((x_3822 != 0i)) {
        let x_3827 : vec3<f32> = vs_INTERP0;
        let x_3829 : i32 = u_xlati11;
        let x_3832 : i32 = u_xlati11;
        let x_3836 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_3829 + 1i) / 4i)][((x_3832 + 1i) % 4i)];
        u_xlat32 = (vec3<f32>(x_3827.y, x_3827.y, x_3827.y) * vec3<f32>(x_3836.x, x_3836.y, x_3836.w));
        let x_3839 : i32 = u_xlati11;
        let x_3841 : i32 = u_xlati11;
        let x_3844 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[(x_3839 / 4i)][(x_3841 % 4i)];
        let x_3846 : vec3<f32> = vs_INTERP0;
        let x_3849 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3844.x, x_3844.y, x_3844.w) * vec3<f32>(x_3846.x, x_3846.x, x_3846.x)) + x_3849);
        let x_3851 : i32 = u_xlati11;
        let x_3854 : i32 = u_xlati11;
        let x_3858 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_3851 + 2i) / 4i)][((x_3854 + 2i) % 4i)];
        let x_3860 : vec3<f32> = vs_INTERP0;
        let x_3863 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3858.x, x_3858.y, x_3858.w) * vec3<f32>(x_3860.z, x_3860.z, x_3860.z)) + x_3863);
        let x_3865 : vec3<f32> = u_xlat32;
        let x_3866 : i32 = u_xlati11;
        let x_3869 : i32 = u_xlati11;
        let x_3873 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_3866 + 3i) / 4i)][((x_3869 + 3i) % 4i)];
        u_xlat32 = (x_3865 + vec3<f32>(x_3873.x, x_3873.y, x_3873.w));
        let x_3876 : vec3<f32> = u_xlat32;
        let x_3878 : vec3<f32> = u_xlat32;
        let x_3880 : vec2<f32> = (vec2<f32>(x_3876.x, x_3876.y) / vec2<f32>(x_3878.z, x_3878.z));
        let x_3881 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3880.x, x_3880.y, x_3881.z);
        let x_3883 : vec3<f32> = u_xlat32;
        let x_3886 : vec2<f32> = ((vec2<f32>(x_3883.x, x_3883.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3887 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3886.x, x_3886.y, x_3887.z);
        let x_3889 : vec3<f32> = u_xlat32;
        let x_3893 : vec2<f32> = clamp(vec2<f32>(x_3889.x, x_3889.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3894 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3893.x, x_3893.y, x_3894.z);
        let x_3896 : u32 = u_xlatu68;
        let x_3899 : vec4<f32> = x_3809.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3896)];
        let x_3901 : vec3<f32> = u_xlat32;
        let x_3904 : u32 = u_xlatu68;
        let x_3907 : vec4<f32> = x_3809.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3904)];
        let x_3909 : vec2<f32> = ((vec2<f32>(x_3899.x, x_3899.y) * vec2<f32>(x_3901.x, x_3901.y)) + vec2<f32>(x_3907.z, x_3907.w));
        let x_3910 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3909.x, x_3909.y, x_3910.z);
      } else {
        let x_3914 : i32 = u_xlati71;
        u_xlatb71 = (x_3914 == 1i);
        let x_3916 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3916);
        let x_3918 : i32 = u_xlati71;
        if ((x_3918 != 0i)) {
          let x_3922 : vec3<f32> = vs_INTERP0;
          let x_3924 : i32 = u_xlati11;
          let x_3927 : i32 = u_xlati11;
          let x_3931 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_3924 + 1i) / 4i)][((x_3927 + 1i) % 4i)];
          let x_3933 : vec2<f32> = (vec2<f32>(x_3922.y, x_3922.y) * vec2<f32>(x_3931.x, x_3931.y));
          let x_3934 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3933.x, x_3933.y, x_3934.z, x_3934.w);
          let x_3936 : i32 = u_xlati11;
          let x_3938 : i32 = u_xlati11;
          let x_3941 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[(x_3936 / 4i)][(x_3938 % 4i)];
          let x_3943 : vec3<f32> = vs_INTERP0;
          let x_3946 : vec4<f32> = u_xlat12;
          let x_3948 : vec2<f32> = ((vec2<f32>(x_3941.x, x_3941.y) * vec2<f32>(x_3943.x, x_3943.x)) + vec2<f32>(x_3946.x, x_3946.y));
          let x_3949 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3948.x, x_3948.y, x_3949.z, x_3949.w);
          let x_3951 : i32 = u_xlati11;
          let x_3954 : i32 = u_xlati11;
          let x_3958 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_3951 + 2i) / 4i)][((x_3954 + 2i) % 4i)];
          let x_3960 : vec3<f32> = vs_INTERP0;
          let x_3963 : vec4<f32> = u_xlat12;
          let x_3965 : vec2<f32> = ((vec2<f32>(x_3958.x, x_3958.y) * vec2<f32>(x_3960.z, x_3960.z)) + vec2<f32>(x_3963.x, x_3963.y));
          let x_3966 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3965.x, x_3965.y, x_3966.z, x_3966.w);
          let x_3968 : vec4<f32> = u_xlat12;
          let x_3970 : i32 = u_xlati11;
          let x_3973 : i32 = u_xlati11;
          let x_3977 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_3970 + 3i) / 4i)][((x_3973 + 3i) % 4i)];
          let x_3979 : vec2<f32> = (vec2<f32>(x_3968.x, x_3968.y) + vec2<f32>(x_3977.x, x_3977.y));
          let x_3980 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3979.x, x_3979.y, x_3980.z, x_3980.w);
          let x_3982 : vec4<f32> = u_xlat12;
          let x_3985 : vec2<f32> = ((vec2<f32>(x_3982.x, x_3982.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3986 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3985.x, x_3985.y, x_3986.z, x_3986.w);
          let x_3988 : vec4<f32> = u_xlat12;
          let x_3990 : vec2<f32> = fract(vec2<f32>(x_3988.x, x_3988.y));
          let x_3991 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3990.x, x_3990.y, x_3991.z, x_3991.w);
          let x_3993 : u32 = u_xlatu68;
          let x_3996 : vec4<f32> = x_3809.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3993)];
          let x_3998 : vec4<f32> = u_xlat12;
          let x_4001 : u32 = u_xlatu68;
          let x_4004 : vec4<f32> = x_3809.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4001)];
          let x_4006 : vec2<f32> = ((vec2<f32>(x_3996.x, x_3996.y) * vec2<f32>(x_3998.x, x_3998.y)) + vec2<f32>(x_4004.z, x_4004.w));
          let x_4007 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4006.x, x_4006.y, x_4007.z);
        } else {
          let x_4010 : vec3<f32> = vs_INTERP0;
          let x_4012 : i32 = u_xlati11;
          let x_4015 : i32 = u_xlati11;
          let x_4019 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_4012 + 1i) / 4i)][((x_4015 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4010.y, x_4010.y, x_4010.y, x_4010.y) * x_4019);
          let x_4021 : i32 = u_xlati11;
          let x_4023 : i32 = u_xlati11;
          let x_4026 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[(x_4021 / 4i)][(x_4023 % 4i)];
          let x_4027 : vec3<f32> = vs_INTERP0;
          let x_4030 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4026 * vec4<f32>(x_4027.x, x_4027.x, x_4027.x, x_4027.x)) + x_4030);
          let x_4032 : i32 = u_xlati11;
          let x_4035 : i32 = u_xlati11;
          let x_4039 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_4032 + 2i) / 4i)][((x_4035 + 2i) % 4i)];
          let x_4040 : vec3<f32> = vs_INTERP0;
          let x_4043 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4039 * vec4<f32>(x_4040.z, x_4040.z, x_4040.z, x_4040.z)) + x_4043);
          let x_4045 : vec4<f32> = u_xlat12;
          let x_4046 : i32 = u_xlati11;
          let x_4049 : i32 = u_xlati11;
          let x_4053 : vec4<f32> = x_3809.x_AdditionalLightsWorldToLights[((x_4046 + 3i) / 4i)][((x_4049 + 3i) % 4i)];
          u_xlat12 = (x_4045 + x_4053);
          let x_4055 : vec4<f32> = u_xlat12;
          let x_4057 : vec4<f32> = u_xlat12;
          let x_4059 : vec3<f32> = (vec3<f32>(x_4055.x, x_4055.y, x_4055.z) / vec3<f32>(x_4057.w, x_4057.w, x_4057.w));
          let x_4060 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4059.x, x_4059.y, x_4059.z, x_4060.w);
          let x_4062 : vec4<f32> = u_xlat12;
          let x_4064 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4062.x, x_4062.y, x_4062.z), vec3<f32>(x_4064.x, x_4064.y, x_4064.z));
          let x_4067 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4067);
          let x_4069 : f32 = u_xlat71;
          let x_4071 : vec4<f32> = u_xlat12;
          let x_4073 : vec3<f32> = (vec3<f32>(x_4069, x_4069, x_4069) * vec3<f32>(x_4071.x, x_4071.y, x_4071.z));
          let x_4074 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4073.x, x_4073.y, x_4073.z, x_4074.w);
          let x_4076 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4076.x, x_4076.y, x_4076.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4081 : f32 = u_xlat71;
          u_xlat71 = max(x_4081, 0.000001f);
          let x_4084 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4084);
          let x_4086 : f32 = u_xlat71;
          let x_4088 : vec4<f32> = u_xlat12;
          let x_4090 : vec3<f32> = (vec3<f32>(x_4086, x_4086, x_4086) * vec3<f32>(x_4088.z, x_4088.x, x_4088.y));
          let x_4091 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4090.x, x_4090.y, x_4090.z, x_4091.w);
          let x_4094 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4094);
          let x_4098 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4098, 0.0f, 1.0f);
          let x_4102 : vec4<f32> = u_xlat13;
          let x_4105 : vec4<bool> = (vec4<f32>(x_4102.y, x_4102.y, x_4102.y, x_4102.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4106 : vec2<bool> = vec2<bool>(x_4105.x, x_4105.w);
          let x_4107 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4106.x, x_4107.y, x_4107.z, x_4106.y);
          let x_4110 : bool = u_xlatb11.x;
          if (x_4110) {
            let x_4115 : f32 = u_xlat13.x;
            x_4111 = x_4115;
          } else {
            let x_4118 : f32 = u_xlat13.x;
            x_4111 = -(x_4118);
          }
          let x_4120 : f32 = x_4111;
          u_xlat11.x = x_4120;
          let x_4123 : bool = u_xlatb11.w;
          if (x_4123) {
            let x_4128 : f32 = u_xlat13.x;
            x_4124 = x_4128;
          } else {
            let x_4131 : f32 = u_xlat13.x;
            x_4124 = -(x_4131);
          }
          let x_4133 : f32 = x_4124;
          u_xlat11.w = x_4133;
          let x_4135 : vec4<f32> = u_xlat12;
          let x_4137 : f32 = u_xlat71;
          let x_4140 : vec4<f32> = u_xlat11;
          let x_4142 : vec2<f32> = ((vec2<f32>(x_4135.x, x_4135.y) * vec2<f32>(x_4137, x_4137)) + vec2<f32>(x_4140.x, x_4140.w));
          let x_4143 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4142.x, x_4143.y, x_4143.z, x_4142.y);
          let x_4145 : vec4<f32> = u_xlat11;
          let x_4148 : vec2<f32> = ((vec2<f32>(x_4145.x, x_4145.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4149 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4148.x, x_4149.y, x_4149.z, x_4148.y);
          let x_4151 : vec4<f32> = u_xlat11;
          let x_4155 : vec2<f32> = clamp(vec2<f32>(x_4151.x, x_4151.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4156 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4155.x, x_4156.y, x_4156.z, x_4155.y);
          let x_4158 : u32 = u_xlatu68;
          let x_4161 : vec4<f32> = x_3809.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4158)];
          let x_4163 : vec4<f32> = u_xlat11;
          let x_4166 : u32 = u_xlatu68;
          let x_4169 : vec4<f32> = x_3809.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4166)];
          let x_4171 : vec2<f32> = ((vec2<f32>(x_4161.x, x_4161.y) * vec2<f32>(x_4163.x, x_4163.w)) + vec2<f32>(x_4169.z, x_4169.w));
          let x_4172 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4171.x, x_4171.y, x_4172.z);
        }
      }
      let x_4179 : vec3<f32> = u_xlat32;
      let x_4182 : f32 = x_137.x_GlobalMipBias.x;
      let x_4183 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4179.x, x_4179.y), x_4182);
      u_xlat11 = x_4183;
      let x_4185 : bool = u_xlatb2.w;
      if (x_4185) {
        let x_4190 : f32 = u_xlat11.w;
        x_4186 = x_4190;
      } else {
        let x_4193 : f32 = u_xlat11.x;
        x_4186 = x_4193;
      }
      let x_4194 : f32 = x_4186;
      u_xlat71 = x_4194;
      let x_4196 : bool = u_xlatb2.x;
      if (x_4196) {
        let x_4200 : vec4<f32> = u_xlat11;
        x_4197 = vec3<f32>(x_4200.x, x_4200.y, x_4200.z);
      } else {
        let x_4203 : f32 = u_xlat71;
        x_4197 = vec3<f32>(x_4203, x_4203, x_4203);
      }
      let x_4205 : vec3<f32> = x_4197;
      let x_4206 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4205.x, x_4205.y, x_4205.z, x_4206.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4212 : vec4<f32> = u_xlat11;
    let x_4214 : u32 = u_xlatu68;
    let x_4217 : vec4<f32> = x_3704.x_AdditionalLightsColor[bitcast<i32>(x_4214)];
    let x_4219 : vec3<f32> = (vec3<f32>(x_4212.x, x_4212.y, x_4212.z) * vec3<f32>(x_4217.x, x_4217.y, x_4217.z));
    let x_4220 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4219.x, x_4219.y, x_4219.z, x_4220.w);
    let x_4222 : f32 = u_xlat48;
    let x_4224 : vec4<f32> = u_xlat11;
    let x_4226 : vec3<f32> = (vec3<f32>(x_4222, x_4222, x_4222) * vec3<f32>(x_4224.x, x_4224.y, x_4224.z));
    let x_4227 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4226.x, x_4226.y, x_4226.z, x_4227.w);
    let x_4229 : vec3<f32> = u_xlat21;
    let x_4230 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_4229, vec3<f32>(x_4230.x, x_4230.y, x_4230.z));
    let x_4233 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4233, 0.0f, 1.0f);
    let x_4235 : f32 = u_xlat68;
    let x_4236 : f32 = u_xlat69;
    u_xlat68 = (x_4235 * x_4236);
    let x_4238 : f32 = u_xlat68;
    let x_4240 : vec4<f32> = u_xlat11;
    let x_4242 : vec3<f32> = (vec3<f32>(x_4238, x_4238, x_4238) * vec3<f32>(x_4240.x, x_4240.y, x_4240.z));
    let x_4243 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4242.x, x_4242.y, x_4242.z, x_4243.w);
    let x_4245 : vec3<f32> = u_xlat30;
    let x_4246 : f32 = u_xlat70;
    let x_4249 : vec4<f32> = u_xlat3;
    u_xlat30 = ((x_4245 * vec3<f32>(x_4246, x_4246, x_4246)) + vec3<f32>(x_4249.x, x_4249.y, x_4249.z));
    let x_4252 : vec3<f32> = u_xlat30;
    let x_4253 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(x_4252, x_4253);
    let x_4255 : f32 = u_xlat68;
    u_xlat68 = max(x_4255, 1.17549435e-37f);
    let x_4257 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4257);
    let x_4259 : f32 = u_xlat68;
    let x_4261 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_4259, x_4259, x_4259) * x_4261);
    let x_4263 : vec3<f32> = u_xlat21;
    let x_4264 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(x_4263, x_4264);
    let x_4266 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4266, 0.0f, 1.0f);
    let x_4268 : vec4<f32> = u_xlat10;
    let x_4270 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(vec3<f32>(x_4268.x, x_4268.y, x_4268.z), x_4270);
    let x_4272 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4272, 0.0f, 1.0f);
    let x_4274 : f32 = u_xlat68;
    let x_4275 : f32 = u_xlat68;
    u_xlat68 = (x_4274 * x_4275);
    let x_4277 : f32 = u_xlat68;
    let x_4279 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4277 * x_4279) + 1.000010014f);
    let x_4282 : f32 = u_xlat69;
    let x_4283 : f32 = u_xlat69;
    u_xlat69 = (x_4282 * x_4283);
    let x_4285 : f32 = u_xlat68;
    let x_4286 : f32 = u_xlat68;
    u_xlat68 = (x_4285 * x_4286);
    let x_4288 : f32 = u_xlat69;
    u_xlat69 = max(x_4288, 0.100000001f);
    let x_4290 : f32 = u_xlat68;
    let x_4291 : f32 = u_xlat69;
    u_xlat68 = (x_4290 * x_4291);
    let x_4294 : f32 = u_xlat6.x;
    let x_4295 : f32 = u_xlat68;
    u_xlat68 = (x_4294 * x_4295);
    let x_4297 : f32 = u_xlat67;
    let x_4298 : f32 = u_xlat68;
    u_xlat68 = (x_4297 / x_4298);
    let x_4300 : f32 = u_xlat68;
    let x_4303 : vec3<f32> = u_xlat5;
    u_xlat30 = ((vec3<f32>(x_4300, x_4300, x_4300) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4303);
    let x_4305 : vec3<f32> = u_xlat30;
    let x_4306 : vec4<f32> = u_xlat11;
    let x_4309 : vec4<f32> = u_xlat8;
    let x_4311 : vec3<f32> = ((x_4305 * vec3<f32>(x_4306.x, x_4306.y, x_4306.z)) + vec3<f32>(x_4309.x, x_4309.y, x_4309.z));
    let x_4312 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4311.x, x_4311.y, x_4311.z, x_4312.w);

    continuing {
      let x_4314 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4314 + bitcast<u32>(1i));
    }
  }
  let x_4316 : vec4<f32> = u_xlat4;
  let x_4318 : vec3<f32> = u_xlat27;
  let x_4321 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_4316.x, x_4316.y, x_4316.z) * vec3<f32>(x_4318.x, x_4318.x, x_4318.x)) + vec3<f32>(x_4321.x, x_4321.y, x_4321.z));
  let x_4324 : vec4<f32> = u_xlat8;
  let x_4326 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4324.x, x_4324.y, x_4324.z) + x_4326);
  let x_4328 : vec4<f32> = vs_INTERP4;
  let x_4330 : vec3<f32> = u_xlat1;
  let x_4332 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_4328.w, x_4328.w, x_4328.w) * x_4330) + x_4332);
  let x_4335 : f32 = u_xlat23;
  let x_4336 : f32 = u_xlat23;
  u_xlat63 = (x_4335 * -(x_4336));
  let x_4339 : f32 = u_xlat63;
  u_xlat63 = exp2(x_4339);
  let x_4341 : vec3<f32> = u_xlat0;
  let x_4344 : vec4<f32> = x_137.unity_FogColor;
  u_xlat0 = (x_4341 + -(vec3<f32>(x_4344.x, x_4344.y, x_4344.z)));
  let x_4350 : f32 = u_xlat63;
  let x_4352 : vec3<f32> = u_xlat0;
  let x_4355 : vec4<f32> = x_137.unity_FogColor;
  let x_4357 : vec3<f32> = ((vec3<f32>(x_4350, x_4350, x_4350) * x_4352) + vec3<f32>(x_4355.x, x_4355.y, x_4355.z));
  let x_4358 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4357.x, x_4357.y, x_4357.z, x_4358.w);
  let x_4360 : bool = u_xlatb44;
  let x_4361 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_4361, x_4360);
  let x_4367 : u32 = x_137.x_RenderingLayerMaxInt;
  let x_4369 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_4367 & bitcast<u32>(x_4369));
  let x_4372 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4372);
  let x_4377 : f32 = u_xlat0.x;
  let x_4379 : f32 = x_137.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4377 * x_4379);
  let x_4383 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4383, 0.0f, 1.0f);
  let x_4387 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4387.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

