type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb26 : bool;
  var u_xlat5 : vec3<f32>;
  var x_286 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var x_295 : vec3<f32>;
  var x_306 : vec3<f32>;
  var x_317 : vec3<f32>;
  var x_328 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat10 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlatb25 : bool;
  var x_559 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var x_836 : vec3<f32>;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var x_1109 : vec3<f32>;
  var u_xlat19 : f32;
  var u_xlatb2 : vec4<bool>;
  var x_1392 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_100 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_102 : vec2<f32> = vs_TEXCOORD0;
  let x_107 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_109 : vec3<f32> = ((vec3<f32>(x_100.x, x_100.y, x_100.z) * vec3<f32>(x_102.x, x_102.x, x_102.x)) + vec3<f32>(x_107.x, x_107.y, x_107.z));
  let x_110 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_109.x, x_109.y, x_109.z, x_110.w);
  let x_114 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_116 : vec3<f32> = u_xlat8;
  let x_119 : vec4<f32> = u_xlat1;
  let x_121 : vec3<f32> = ((vec3<f32>(x_114.x, x_114.y, x_114.z) * vec3<f32>(x_116.x, x_116.x, x_116.x)) + vec3<f32>(x_119.x, x_119.y, x_119.z));
  let x_122 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_121.x, x_121.y, x_121.z, x_122.w);
  let x_124 : f32 = u_xlat16;
  let x_126 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_124, x_124, x_124) * vec3<f32>(x_126.x, x_126.y, x_126.z));
  let x_132 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_132 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_137 : vec3<f32> = u_xlat9;
  let x_139 : vec2<f32> = vs_TEXCOORD0;
  let x_140 : vec2<f32> = (vec2<f32>(x_137.x, x_137.y) + x_139);
  let x_141 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_140.x, x_140.y, x_141.z);
  let x_146 : vec3<f32> = u_xlat9;
  let x_149 : f32 = x_33.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_146.x, x_146.y), x_149);
  u_xlat1.x = x_150.x;
  let x_154 : f32 = x_33.x_ZBufferParams.z;
  let x_156 : f32 = u_xlat1.x;
  let x_159 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_154 * x_156) + x_159);
  let x_163 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_163);
  let x_168 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_168 * 2.0f);
  u_xlat2.y = 0.0f;
  let x_173 : vec4<f32> = u_xlat2;
  let x_175 : vec2<f32> = vs_TEXCOORD0;
  let x_176 : vec2<f32> = (vec2<f32>(x_173.x, x_173.y) + x_175);
  let x_177 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_176.x, x_176.y, x_177.z, x_177.w);
  let x_182 : vec4<f32> = u_xlat2;
  let x_185 : f32 = x_33.x_GlobalMipBias.x;
  let x_186 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_182.x, x_182.y), x_185);
  u_xlat1.x = x_186.x;
  let x_190 : f32 = x_33.x_ZBufferParams.z;
  let x_192 : f32 = u_xlat1.x;
  let x_195 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_190 * x_192) + x_195);
  let x_199 : f32 = u_xlat1.x;
  u_xlat2.z = (1.0f / x_199);
  u_xlat11.x = 0.0f;
  let x_205 : f32 = x_33.x_SourceSize.w;
  u_xlat11.y = (x_205 * 2.0f);
  let x_208 : vec3<f32> = u_xlat11;
  let x_210 : vec2<f32> = vs_TEXCOORD0;
  let x_211 : vec2<f32> = (vec2<f32>(x_208.x, x_208.y) + x_210);
  let x_212 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_211.x, x_211.y, x_212.z);
  let x_217 : vec3<f32> = u_xlat11;
  let x_220 : f32 = x_33.x_GlobalMipBias.x;
  let x_221 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_217.x, x_217.y), x_220);
  u_xlat1.x = x_221.x;
  let x_225 : f32 = x_33.x_ZBufferParams.z;
  let x_227 : f32 = u_xlat1.x;
  let x_230 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_225 * x_227) + x_230);
  let x_234 : f32 = u_xlat1.x;
  u_xlat11.z = (1.0f / x_234);
  u_xlat12.x = 0.0f;
  let x_240 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_240 * -2.0f);
  let x_243 : vec3<f32> = u_xlat12;
  let x_245 : vec2<f32> = vs_TEXCOORD0;
  let x_246 : vec2<f32> = (vec2<f32>(x_243.x, x_243.y) + x_245);
  let x_247 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_246.x, x_246.y, x_247.z);
  let x_252 : vec3<f32> = u_xlat12;
  let x_255 : f32 = x_33.x_GlobalMipBias.x;
  let x_256 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_252.x, x_252.y), x_255);
  u_xlat1.x = x_256.x;
  let x_260 : f32 = x_33.x_ZBufferParams.z;
  let x_262 : f32 = u_xlat1.x;
  let x_265 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_260 * x_262) + x_265);
  let x_269 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_269);
  let x_274 : f32 = u_xlat2.z;
  let x_276 : f32 = u_xlat9.z;
  u_xlatb1 = (x_274 < x_276);
  let x_280 : f32 = u_xlat11.z;
  let x_282 : f32 = u_xlat12.z;
  u_xlatb26 = (x_280 < x_282);
  let x_285 : bool = u_xlatb1;
  if (x_285) {
    let x_289 : vec3<f32> = u_xlat9;
    x_286 = x_289;
  } else {
    let x_291 : vec3<f32> = u_xlat12;
    x_286 = x_291;
  }
  let x_292 : vec3<f32> = x_286;
  u_xlat5 = x_292;
  let x_294 : bool = u_xlatb1;
  if (x_294) {
    let x_298 : vec3<f32> = u_xlat12;
    x_295 = x_298;
  } else {
    let x_300 : vec4<f32> = u_xlat2;
    x_295 = vec3<f32>(x_300.x, x_300.y, x_300.z);
  }
  let x_302 : vec3<f32> = x_295;
  let x_303 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_303.x, x_302.x, x_302.y, x_302.z);
  let x_305 : bool = u_xlatb1;
  if (x_305) {
    let x_309 : vec3<f32> = u_xlat11;
    x_306 = x_309;
  } else {
    let x_311 : vec4<f32> = u_xlat2;
    x_306 = vec3<f32>(x_311.x, x_311.y, x_311.z);
  }
  let x_313 : vec3<f32> = x_306;
  let x_314 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_313.x, x_313.y, x_313.z, x_314.w);
  let x_316 : bool = u_xlatb1;
  if (x_316) {
    let x_320 : vec3<f32> = u_xlat9;
    x_317 = x_320;
  } else {
    let x_322 : vec3<f32> = u_xlat11;
    x_317 = x_322;
  }
  let x_323 : vec3<f32> = x_317;
  let x_324 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_324.x, x_323.x, x_323.y, x_323.z);
  let x_326 : bool = u_xlatb26;
  if (x_326) {
    let x_331 : vec3<f32> = u_xlat5;
    x_328 = vec2<f32>(x_331.x, x_331.y);
  } else {
    let x_334 : vec4<f32> = u_xlat2;
    x_328 = vec2<f32>(x_334.x, x_334.y);
  }
  let x_336 : vec2<f32> = x_328;
  let x_337 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_336.x, x_336.y, x_337.z, x_337.w);
  let x_340 : f32 = u_xlat5.z;
  u_xlat4.x = x_340;
  let x_343 : f32 = u_xlat2.z;
  u_xlat1.x = x_343;
  let x_345 : bool = u_xlatb26;
  let x_346 : vec4<f32> = u_xlat4;
  let x_347 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_347, x_346, vec4<bool>(x_345, x_345, x_345, x_345));
  let x_353 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_353) + 1.0f);
  let x_356 : vec4<f32> = u_xlat1;
  let x_359 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_361 : vec2<f32> = (vec2<f32>(x_356.w, x_356.x) * vec2<f32>(x_359.x, x_359.x));
  let x_362 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_361.x, x_362.y, x_362.z, x_361.y);
  let x_366 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_368 : vec4<f32> = u_xlat1;
  let x_372 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_374 : vec3<f32> = ((vec3<f32>(x_366.z, x_366.x, x_366.y) * vec3<f32>(x_368.y, x_368.y, x_368.y)) + vec3<f32>(x_372.z, x_372.x, x_372.y));
  let x_375 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_374.x, x_374.y, x_374.z, x_375.w);
  let x_378 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_380 : f32 = u_xlat17;
  let x_383 : vec4<f32> = u_xlat3;
  let x_385 : vec3<f32> = ((vec3<f32>(x_378.z, x_378.x, x_378.y) * vec3<f32>(x_380, x_380, x_380)) + vec3<f32>(x_383.x, x_383.y, x_383.z));
  let x_386 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_385.x, x_385.y, x_385.z, x_386.w);
  let x_388 : vec4<f32> = u_xlat3;
  let x_390 : vec4<f32> = u_xlat1;
  let x_393 : vec3<f32> = u_xlat8;
  let x_396 : vec3<f32> = ((vec3<f32>(x_388.x, x_388.y, x_388.z) * vec3<f32>(x_390.x, x_390.x, x_390.x)) + -(vec3<f32>(x_393.z, x_393.x, x_393.y)));
  let x_397 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_396.x, x_396.y, x_396.z, x_397.w);
  let x_401 : f32 = u_xlat2.y;
  u_xlat10.x = (-(x_401) + 1.0f);
  let x_406 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_408 : vec4<f32> = u_xlat2;
  let x_412 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_414 : vec3<f32> = ((vec3<f32>(x_406.y, x_406.z, x_406.x) * vec3<f32>(x_408.x, x_408.x, x_408.x)) + vec3<f32>(x_412.y, x_412.z, x_412.x));
  let x_415 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_414.x, x_415.y, x_414.y, x_414.z);
  let x_418 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_420 : vec2<f32> = u_xlat10;
  let x_423 : vec4<f32> = u_xlat2;
  let x_425 : vec3<f32> = ((vec3<f32>(x_418.y, x_418.z, x_418.x) * vec3<f32>(x_420.x, x_420.x, x_420.x)) + vec3<f32>(x_423.x, x_423.z, x_423.w));
  let x_426 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_425.x, x_425.y, x_425.z, x_426.w);
  let x_428 : vec4<f32> = u_xlat2;
  let x_430 : vec4<f32> = u_xlat1;
  let x_433 : vec3<f32> = u_xlat8;
  let x_436 : vec3<f32> = ((vec3<f32>(x_428.x, x_428.y, x_428.z) * vec3<f32>(x_430.w, x_430.w, x_430.w)) + -(vec3<f32>(x_433.y, x_433.z, x_433.x)));
  let x_437 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_436.x, x_436.y, x_436.z, x_437.w);
  let x_439 : vec4<f32> = u_xlat1;
  let x_441 : vec4<f32> = u_xlat2;
  let x_443 : vec3<f32> = (vec3<f32>(x_439.x, x_439.y, x_439.z) * vec3<f32>(x_441.x, x_441.y, x_441.z));
  let x_444 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_443.x, x_443.y, x_443.z, x_444.w);
  let x_446 : vec4<f32> = u_xlat1;
  let x_448 : vec4<f32> = u_xlat2;
  let x_451 : vec4<f32> = u_xlat3;
  let x_454 : vec3<f32> = ((vec3<f32>(x_446.z, x_446.x, x_446.y) * vec3<f32>(x_448.y, x_448.z, x_448.x)) + -(vec3<f32>(x_451.x, x_451.y, x_451.z)));
  let x_455 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_458 : vec4<f32> = u_xlat1;
  let x_460 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_458.x, x_458.y, x_458.z), vec3<f32>(x_460.x, x_460.y, x_460.z));
  let x_463 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_463);
  let x_465 : f32 = u_xlat25;
  let x_467 : vec4<f32> = u_xlat1;
  let x_469 : vec3<f32> = (vec3<f32>(x_465, x_465, x_465) * vec3<f32>(x_467.x, x_467.y, x_467.z));
  let x_470 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_469.x, x_469.y, x_469.z, x_470.w);
  let x_472 : vec2<f32> = vs_TEXCOORD0;
  let x_474 : vec4<f32> = x_33.x_ScaledScreenParams;
  let x_476 : vec2<f32> = (x_472 * vec2<f32>(x_474.x, x_474.y));
  let x_477 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
  let x_480 : vec4<f32> = u_xlat2;
  let x_483 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat18 = (vec2<f32>(x_480.x, x_480.y) * vec2<f32>(x_483.z, x_483.z));
  let x_486 : vec2<f32> = u_xlat18;
  u_xlat25 = dot(x_486, vec2<f32>(0.067110561f, 0.00583715f));
  let x_491 : f32 = u_xlat25;
  u_xlat25 = fract(x_491);
  let x_493 : f32 = u_xlat25;
  u_xlat25 = (x_493 * 52.982917786f);
  let x_496 : f32 = u_xlat25;
  u_xlat25 = fract(x_496);
  let x_498 : f32 = u_xlat25;
  u_xlat18.x = fract(x_498);
  let x_502 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_502 * 2.0f) + -1.0f);
  let x_507 : f32 = u_xlat25;
  u_xlat25 = (x_507 + 0.9296875f);
  let x_510 : f32 = u_xlat25;
  u_xlat25 = (x_510 * 6.283185482f);
  let x_514 : f32 = u_xlat3.z;
  let x_517 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_514) * x_517) + 1.0f);
  let x_522 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_522);
  let x_525 : f32 = u_xlat25;
  u_xlat4.x = sin(x_525);
  let x_528 : f32 = u_xlat25;
  u_xlat5.x = cos(x_528);
  let x_532 : f32 = u_xlat18.x;
  let x_534 : f32 = u_xlat5.x;
  u_xlat3.x = (x_532 * x_534);
  let x_538 : f32 = u_xlat18.x;
  let x_540 : f32 = u_xlat4.x;
  u_xlat3.y = (x_538 * x_540);
  let x_543 : vec4<f32> = u_xlat3;
  let x_546 : vec3<f32> = (vec3<f32>(x_543.x, x_543.y, x_543.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_547 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_546.x, x_546.y, x_546.z, x_547.w);
  let x_549 : vec4<f32> = u_xlat1;
  let x_552 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(-(vec3<f32>(x_549.x, x_549.y, x_549.z)), vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_556 : f32 = u_xlat25;
  u_xlatb25 = (x_556 >= 0.0f);
  let x_558 : bool = u_xlatb25;
  if (x_558) {
    let x_562 : vec4<f32> = u_xlat3;
    x_559 = -(vec3<f32>(x_562.x, x_562.y, x_562.z));
  } else {
    let x_566 : vec4<f32> = u_xlat3;
    x_559 = vec3<f32>(x_566.x, x_566.y, x_566.z);
  }
  let x_568 : vec3<f32> = x_559;
  let x_569 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_568.x, x_568.y, x_568.z, x_569.w);
  let x_571 : vec4<f32> = u_xlat3;
  let x_574 : vec4<f32> = x_33.x_SSAOParams;
  let x_577 : vec3<f32> = u_xlat8;
  let x_578 : vec3<f32> = ((vec3<f32>(x_571.x, x_571.y, x_571.z) * vec3<f32>(x_574.y, x_574.y, x_574.y)) + x_577);
  let x_579 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_578.x, x_578.y, x_578.z, x_579.w);
  let x_581 : vec4<f32> = u_xlat3;
  let x_585 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_581.y, x_581.y) * vec2<f32>(x_585.x, x_585.y));
  let x_589 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_591 : vec4<f32> = u_xlat3;
  let x_594 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_589.x, x_589.y) * vec2<f32>(x_591.x, x_591.x)) + x_594);
  let x_597 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_599 : vec4<f32> = u_xlat3;
  let x_602 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_597.x, x_597.y) * vec2<f32>(x_599.z, x_599.z)) + x_602);
  let x_606 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_606;
  let x_609 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_609;
  let x_612 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_612;
  let x_614 : vec4<f32> = u_xlat4;
  let x_616 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_614.x, x_614.y, x_614.z), vec3<f32>(x_616.x, x_616.y, x_616.z));
  let x_619 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_619));
  let x_623 : vec2<f32> = u_xlat18;
  let x_624 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_623 * vec2<f32>(x_624.x, x_624.x)) + vec2<f32>(1.0f, 1.0f));
  let x_629 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_629 * vec2<f32>(0.5f, 0.5f));
  let x_632 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_632, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_639 : vec2<f32> = u_xlat18;
  let x_641 : f32 = x_33.x_GlobalMipBias.x;
  let x_642 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_639, x_641);
  u_xlat3.x = x_642.x;
  let x_646 : f32 = x_33.x_ZBufferParams.z;
  let x_648 : f32 = u_xlat3.x;
  let x_651 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_646 * x_648) + x_651);
  let x_655 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_655);
  let x_658 : f32 = u_xlat25;
  let x_661 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_658) + -(x_661));
  let x_664 : f32 = u_xlat25;
  let x_667 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_664) < x_667);
  let x_669 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_669);
  let x_675 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_675);
  let x_679 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_679);
  let x_682 : f32 = u_xlat25;
  let x_684 : f32 = u_xlat3.x;
  u_xlat25 = (x_682 * x_684);
  let x_688 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_688) + 1.0f);
  let x_692 : f32 = u_xlat11.x;
  let x_694 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_692 * x_694);
  let x_698 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_700 : vec2<f32> = u_xlat18;
  let x_704 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_698.x, x_698.y, x_698.z) * vec3<f32>(x_700.x, x_700.x, x_700.x)) + vec3<f32>(x_704.x, x_704.y, x_704.z));
  let x_708 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_710 : f32 = u_xlat26;
  let x_713 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_708.x, x_708.y, x_708.z) * vec3<f32>(x_710, x_710, x_710)) + x_713);
  let x_715 : vec3<f32> = u_xlat11;
  let x_716 : vec4<f32> = u_xlat3;
  let x_719 : vec3<f32> = u_xlat8;
  let x_721 : vec3<f32> = ((x_715 * vec3<f32>(x_716.x, x_716.x, x_716.x)) + -(x_719));
  let x_722 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
  let x_724 : vec4<f32> = u_xlat3;
  let x_726 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_724.x, x_724.y, x_724.z), vec3<f32>(x_726.x, x_726.y, x_726.z));
  let x_730 : f32 = u_xlat0;
  let x_735 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_730) * 0.004f) + x_735);
  let x_739 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_739, 0.0f);
  let x_742 : vec4<f32> = u_xlat3;
  let x_744 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_742.x, x_742.y, x_742.z), vec3<f32>(x_744.x, x_744.y, x_744.z));
  let x_747 : f32 = u_xlat26;
  u_xlat26 = (x_747 + 0.0001f);
  let x_750 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_750);
  let x_752 : f32 = u_xlat26;
  let x_754 : f32 = u_xlat18.x;
  u_xlat18.x = (x_752 * x_754);
  let x_757 : vec4<f32> = u_xlat2;
  let x_760 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_757.x, x_757.y, x_757.x, x_757.y) * vec4<f32>(x_760.z, x_760.z, x_760.z, x_760.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_769 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec2<f32>(x_769.x, x_769.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_772 : f32 = u_xlat26;
  u_xlat26 = fract(x_772);
  let x_774 : f32 = u_xlat26;
  u_xlat26 = (x_774 * 52.982917786f);
  let x_776 : f32 = u_xlat26;
  u_xlat26 = fract(x_776);
  let x_778 : f32 = u_xlat26;
  let x_783 : vec2<f32> = (vec2<f32>(x_778, x_778) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_784 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_783.x, x_783.y, x_784.z, x_784.w);
  let x_787 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_787);
  let x_789 : f32 = u_xlat26;
  u_xlat5.z = ((x_789 * 2.0f) + -1.0f);
  let x_794 : f32 = u_xlat3.y;
  u_xlat26 = (x_794 * 6.283185482f);
  let x_797 : f32 = u_xlat5.z;
  let x_800 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_797) * x_800) + 1.0f);
  let x_805 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_805);
  let x_809 : f32 = u_xlat26;
  u_xlat6 = sin(x_809);
  let x_812 : f32 = u_xlat26;
  u_xlat7 = cos(x_812);
  let x_815 : f32 = u_xlat3.x;
  let x_816 : f32 = u_xlat7;
  u_xlat5.x = (x_815 * x_816);
  let x_820 : f32 = u_xlat3.x;
  let x_821 : f32 = u_xlat6;
  u_xlat5.y = (x_820 * x_821);
  let x_824 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_824 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_828 : vec4<f32> = u_xlat1;
  let x_831 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(-(vec3<f32>(x_828.x, x_828.y, x_828.z)), x_831);
  let x_833 : f32 = u_xlat26;
  u_xlatb26 = (x_833 >= 0.0f);
  let x_835 : bool = u_xlatb26;
  if (x_835) {
    let x_839 : vec3<f32> = u_xlat5;
    x_836 = -(x_839);
  } else {
    let x_842 : vec3<f32> = u_xlat5;
    x_836 = x_842;
  }
  let x_843 : vec3<f32> = x_836;
  u_xlat5 = x_843;
  let x_844 : vec3<f32> = u_xlat5;
  let x_846 : vec4<f32> = x_33.x_SSAOParams;
  let x_849 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_844 * vec3<f32>(x_846.y, x_846.y, x_846.y)) + x_849);
  let x_851 : vec3<f32> = u_xlat5;
  let x_854 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_856 : vec2<f32> = (vec2<f32>(x_851.y, x_851.y) * vec2<f32>(x_854.x, x_854.y));
  let x_857 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_856.x, x_856.y, x_857.z, x_857.w);
  let x_860 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_862 : vec3<f32> = u_xlat5;
  let x_865 : vec4<f32> = u_xlat3;
  let x_867 : vec2<f32> = ((vec2<f32>(x_860.x, x_860.y) * vec2<f32>(x_862.x, x_862.x)) + vec2<f32>(x_865.x, x_865.y));
  let x_868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_867.x, x_867.y, x_868.z, x_868.w);
  let x_871 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_873 : vec3<f32> = u_xlat5;
  let x_876 : vec4<f32> = u_xlat3;
  let x_878 : vec2<f32> = ((vec2<f32>(x_871.x, x_871.y) * vec2<f32>(x_873.z, x_873.z)) + vec2<f32>(x_876.x, x_876.y));
  let x_879 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_878.x, x_878.y, x_879.z, x_879.w);
  let x_881 : vec4<f32> = u_xlat4;
  let x_883 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_881.x, x_881.y, x_881.z), x_883);
  let x_886 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_886));
  let x_889 : vec4<f32> = u_xlat3;
  let x_891 : f32 = u_xlat28;
  let x_894 : vec2<f32> = ((vec2<f32>(x_889.x, x_889.y) * vec2<f32>(x_891, x_891)) + vec2<f32>(1.0f, 1.0f));
  let x_895 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_894.x, x_894.y, x_895.z, x_895.w);
  let x_897 : vec4<f32> = u_xlat3;
  let x_899 : vec2<f32> = (vec2<f32>(x_897.x, x_897.y) * vec2<f32>(0.5f, 0.5f));
  let x_900 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_899.x, x_899.y, x_900.z, x_900.w);
  let x_902 : vec4<f32> = u_xlat3;
  let x_906 : vec2<f32> = clamp(vec2<f32>(x_902.x, x_902.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_907 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_906.x, x_906.y, x_907.z, x_907.w);
  let x_912 : vec4<f32> = u_xlat3;
  let x_915 : f32 = x_33.x_GlobalMipBias.x;
  let x_916 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_912.x, x_912.y), x_915);
  u_xlat28 = x_916.x;
  let x_919 : f32 = x_33.x_ZBufferParams.z;
  let x_920 : f32 = u_xlat28;
  let x_923 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_919 * x_920) + x_923);
  let x_927 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_927);
  let x_930 : f32 = u_xlat26;
  let x_933 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_930) + -(x_933));
  let x_936 : f32 = u_xlat26;
  let x_939 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_936) < x_939);
  let x_941 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_941);
  let x_944 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_944);
  let x_946 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_946);
  let x_948 : f32 = u_xlat26;
  let x_949 : f32 = u_xlat28;
  u_xlat26 = (x_948 * x_949);
  let x_952 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_952) + 1.0f);
  let x_957 : f32 = u_xlat5.x;
  let x_959 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_957 * x_959);
  let x_962 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_964 : vec4<f32> = u_xlat3;
  let x_968 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_962.x, x_962.y, x_962.z) * vec3<f32>(x_964.x, x_964.x, x_964.x)) + vec3<f32>(x_968.x, x_968.y, x_968.z));
  let x_972 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_974 : vec3<f32> = u_xlat11;
  let x_977 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_972.x, x_972.y, x_972.z) * vec3<f32>(x_974.x, x_974.x, x_974.x)) + x_977);
  let x_979 : vec3<f32> = u_xlat5;
  let x_980 : f32 = u_xlat28;
  let x_983 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_979 * vec3<f32>(x_980, x_980, x_980)) + -(x_983));
  let x_986 : vec3<f32> = u_xlat5;
  let x_987 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(x_986, vec3<f32>(x_987.x, x_987.y, x_987.z));
  let x_991 : f32 = u_xlat0;
  let x_995 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_991) * 0.004f) + x_995);
  let x_999 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_999, 0.0f);
  let x_1002 : vec3<f32> = u_xlat5;
  let x_1003 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_1002, x_1003);
  let x_1007 : f32 = u_xlat11.x;
  u_xlat11.x = (x_1007 + 0.0001f);
  let x_1011 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_1011);
  let x_1015 : f32 = u_xlat11.x;
  let x_1017 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1015 * x_1017);
  let x_1020 : f32 = u_xlat26;
  let x_1022 : f32 = u_xlat3.x;
  u_xlat26 = (x_1020 * x_1022);
  let x_1025 : f32 = u_xlat18.x;
  let x_1026 : f32 = u_xlat25;
  let x_1028 : f32 = u_xlat26;
  u_xlat25 = ((x_1025 * x_1026) + x_1028);
  let x_1030 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1030.z, x_1030.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1035 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1035);
  let x_1039 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1039 * 52.982917786f);
  let x_1043 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1043);
  let x_1046 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1046.x, x_1046.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1053 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1053);
  let x_1057 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1057 * 2.0f) + -1.0f);
  let x_1062 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1062 * 6.283185482f);
  let x_1066 : f32 = u_xlat3.z;
  let x_1069 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1066) * x_1069) + 1.0f);
  let x_1072 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1072);
  let x_1075 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1075);
  let x_1079 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1079);
  let x_1081 : f32 = u_xlat26;
  let x_1082 : f32 = u_xlat6;
  u_xlat3.x = (x_1081 * x_1082);
  let x_1085 : f32 = u_xlat26;
  let x_1087 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1085 * x_1087);
  let x_1090 : vec4<f32> = u_xlat3;
  let x_1094 : vec3<f32> = (vec3<f32>(x_1090.x, x_1090.y, x_1090.z) * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_1095 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1095.w);
  let x_1097 : vec4<f32> = u_xlat1;
  let x_1100 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_1097.x, x_1097.y, x_1097.z)), vec3<f32>(x_1100.x, x_1100.y, x_1100.z));
  let x_1106 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1106 >= 0.0f);
  let x_1108 : bool = u_xlatb18;
  if (x_1108) {
    let x_1112 : vec4<f32> = u_xlat3;
    x_1109 = -(vec3<f32>(x_1112.x, x_1112.y, x_1112.z));
  } else {
    let x_1116 : vec4<f32> = u_xlat3;
    x_1109 = vec3<f32>(x_1116.x, x_1116.y, x_1116.z);
  }
  let x_1118 : vec3<f32> = x_1109;
  let x_1119 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1118.x, x_1118.y, x_1118.z, x_1119.w);
  let x_1121 : vec4<f32> = u_xlat3;
  let x_1124 : vec4<f32> = x_33.x_SSAOParams;
  let x_1127 : vec3<f32> = u_xlat8;
  let x_1128 : vec3<f32> = ((vec3<f32>(x_1121.x, x_1121.y, x_1121.z) * vec3<f32>(x_1124.y, x_1124.y, x_1124.y)) + x_1127);
  let x_1129 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1128.x, x_1128.y, x_1128.z, x_1129.w);
  let x_1131 : vec4<f32> = u_xlat3;
  let x_1134 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1131.y, x_1131.y) * vec2<f32>(x_1134.x, x_1134.y));
  let x_1138 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1140 : vec4<f32> = u_xlat3;
  let x_1143 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1140.x, x_1140.x)) + x_1143);
  let x_1146 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1148 : vec4<f32> = u_xlat3;
  let x_1151 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1148.z, x_1148.z)) + x_1151);
  let x_1153 : vec4<f32> = u_xlat4;
  let x_1155 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1153.x, x_1153.y, x_1153.z), vec3<f32>(x_1155.x, x_1155.y, x_1155.z));
  let x_1160 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1160));
  let x_1164 : vec2<f32> = u_xlat18;
  let x_1165 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1164 * vec2<f32>(x_1165.x, x_1165.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1169 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1169 * vec2<f32>(0.5f, 0.5f));
  let x_1171 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1171, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1178 : vec2<f32> = u_xlat18;
  let x_1180 : f32 = x_33.x_GlobalMipBias.x;
  let x_1181 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1178, x_1180);
  u_xlat11.x = x_1181.x;
  let x_1186 : f32 = x_33.x_ZBufferParams.z;
  let x_1188 : f32 = u_xlat11.x;
  let x_1191 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1186 * x_1188) + x_1191);
  let x_1193 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1193);
  let x_1195 : f32 = u_xlat19;
  let x_1198 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1195) + -(x_1198));
  let x_1203 : f32 = u_xlat3.x;
  let x_1206 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1203) < x_1206);
  let x_1210 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1210);
  let x_1214 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1214);
  let x_1218 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1218);
  let x_1222 : f32 = u_xlat3.y;
  let x_1224 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1222 * x_1224);
  let x_1228 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1228) + 1.0f);
  let x_1231 : f32 = u_xlat19;
  let x_1233 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1231 * x_1233);
  let x_1237 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1239 : vec2<f32> = u_xlat18;
  let x_1243 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1237.x, x_1237.y, x_1237.z) * vec3<f32>(x_1239.x, x_1239.x, x_1239.x)) + vec3<f32>(x_1243.x, x_1243.y, x_1243.z));
  let x_1247 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1249 : f32 = u_xlat26;
  let x_1252 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1247.x, x_1247.y, x_1247.z) * vec3<f32>(x_1249, x_1249, x_1249)) + x_1252);
  let x_1254 : vec3<f32> = u_xlat5;
  let x_1255 : vec3<f32> = u_xlat11;
  let x_1258 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1254 * vec3<f32>(x_1255.x, x_1255.x, x_1255.x)) + -(x_1258));
  let x_1261 : vec3<f32> = u_xlat11;
  let x_1262 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1261, vec3<f32>(x_1262.x, x_1262.y, x_1262.z));
  let x_1266 : f32 = u_xlat0;
  let x_1270 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1266) * 0.004f) + x_1270);
  let x_1274 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1274, 0.0f);
  let x_1277 : vec3<f32> = u_xlat11;
  let x_1278 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1277, x_1278);
  let x_1280 : f32 = u_xlat26;
  u_xlat26 = (x_1280 + 0.0001f);
  let x_1282 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1282);
  let x_1284 : f32 = u_xlat26;
  let x_1286 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1284 * x_1286);
  let x_1290 : f32 = u_xlat18.x;
  let x_1292 : f32 = u_xlat3.x;
  let x_1294 : f32 = u_xlat25;
  u_xlat25 = ((x_1290 * x_1292) + x_1294);
  let x_1296 : vec4<f32> = u_xlat2;
  let x_1299 : vec4<f32> = x_33.x_SSAOParams;
  let x_1305 : vec2<f32> = ((vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(x_1299.z, x_1299.z)) + vec2<f32>(6.248999596f, 14.600999832f));
  let x_1306 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1305.x, x_1305.y, x_1306.z, x_1306.w);
  let x_1308 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec2<f32>(x_1308.x, x_1308.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1313 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1313);
  let x_1317 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1317 * 52.982917786f);
  let x_1321 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1321);
  let x_1324 : vec4<f32> = u_xlat2;
  let x_1329 : vec2<f32> = (vec2<f32>(x_1324.x, x_1324.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1330 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1329.x, x_1329.y, x_1330.z, x_1330.w);
  let x_1333 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1333);
  let x_1337 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_1337 * 2.0f) + -1.0f);
  let x_1342 : f32 = u_xlat2.y;
  u_xlat2.x = (x_1342 * 6.283185482f);
  let x_1346 : f32 = u_xlat3.z;
  let x_1349 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1346) * x_1349) + 1.0f);
  let x_1354 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_1354);
  let x_1358 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_1358);
  let x_1362 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_1362);
  let x_1366 : f32 = u_xlat10.x;
  let x_1368 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1366 * x_1368);
  let x_1372 : f32 = u_xlat2.x;
  let x_1374 : f32 = u_xlat10.x;
  u_xlat3.y = (x_1372 * x_1374);
  let x_1377 : vec4<f32> = u_xlat1;
  let x_1380 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(vec3<f32>(x_1377.x, x_1377.y, x_1377.z)), vec3<f32>(x_1380.x, x_1380.y, x_1380.z));
  let x_1387 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_1387 >= 0.0f);
  let x_1391 : bool = u_xlatb2.x;
  if (x_1391) {
    let x_1395 : vec4<f32> = u_xlat3;
    x_1392 = -(vec3<f32>(x_1395.x, x_1395.y, x_1395.z));
  } else {
    let x_1399 : vec4<f32> = u_xlat3;
    x_1392 = vec3<f32>(x_1399.x, x_1399.y, x_1399.z);
  }
  let x_1401 : vec3<f32> = x_1392;
  let x_1402 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1401.x, x_1401.y, x_1401.z, x_1402.w);
  let x_1404 : vec4<f32> = u_xlat2;
  let x_1407 : vec4<f32> = x_33.x_SSAOParams;
  let x_1410 : vec3<f32> = u_xlat8;
  let x_1411 : vec3<f32> = ((vec3<f32>(x_1404.x, x_1404.y, x_1404.z) * vec3<f32>(x_1407.y, x_1407.y, x_1407.y)) + x_1410);
  let x_1412 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1411.x, x_1411.y, x_1411.z, x_1412.w);
  let x_1414 : vec4<f32> = u_xlat2;
  let x_1417 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1419 : vec2<f32> = (vec2<f32>(x_1414.y, x_1414.y) * vec2<f32>(x_1417.x, x_1417.y));
  let x_1420 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1419.x, x_1419.y, x_1420.z, x_1420.w);
  let x_1423 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1425 : vec4<f32> = u_xlat2;
  let x_1428 : vec4<f32> = u_xlat3;
  let x_1430 : vec2<f32> = ((vec2<f32>(x_1423.x, x_1423.y) * vec2<f32>(x_1425.x, x_1425.x)) + vec2<f32>(x_1428.x, x_1428.y));
  let x_1431 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1430.x, x_1430.y, x_1431.z, x_1431.w);
  let x_1434 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1436 : vec4<f32> = u_xlat2;
  let x_1439 : vec4<f32> = u_xlat3;
  let x_1441 : vec2<f32> = ((vec2<f32>(x_1434.x, x_1434.y) * vec2<f32>(x_1436.z, x_1436.z)) + vec2<f32>(x_1439.x, x_1439.y));
  let x_1442 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1441.x, x_1441.y, x_1442.z, x_1442.w);
  let x_1444 : vec4<f32> = u_xlat4;
  let x_1446 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_1444.x, x_1444.y, x_1444.z), vec3<f32>(x_1446.x, x_1446.y, x_1446.z));
  let x_1451 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_1451));
  let x_1455 : vec4<f32> = u_xlat3;
  let x_1457 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_1455.x, x_1455.y) * vec2<f32>(x_1457.x, x_1457.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1461 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_1461 * vec2<f32>(0.5f, 0.5f));
  let x_1463 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_1463, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1470 : vec2<f32> = u_xlat10;
  let x_1472 : f32 = x_33.x_GlobalMipBias.x;
  let x_1473 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1470, x_1472);
  u_xlat26 = x_1473.x;
  let x_1476 : f32 = x_33.x_ZBufferParams.z;
  let x_1477 : f32 = u_xlat26;
  let x_1480 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_1476 * x_1477) + x_1480);
  let x_1484 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1484);
  let x_1488 : f32 = u_xlat2.x;
  let x_1491 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_1488) + -(x_1491));
  let x_1496 : f32 = u_xlat2.x;
  let x_1499 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_1496) < x_1499);
  let x_1502 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_1502);
  let x_1506 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_1506);
  let x_1510 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_1510);
  let x_1514 : f32 = u_xlat2.w;
  let x_1516 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1514 * x_1516);
  let x_1520 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_1520) + 1.0f);
  let x_1525 : f32 = u_xlat3.x;
  let x_1527 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_1525 * x_1527);
  let x_1530 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1532 : vec2<f32> = u_xlat10;
  let x_1536 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1538 : vec3<f32> = ((vec3<f32>(x_1530.x, x_1530.y, x_1530.z) * vec3<f32>(x_1532.x, x_1532.x, x_1532.x)) + vec3<f32>(x_1536.x, x_1536.y, x_1536.z));
  let x_1539 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1538.x, x_1538.y, x_1538.z, x_1539.w);
  let x_1542 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1544 : vec2<f32> = u_xlat18;
  let x_1547 : vec4<f32> = u_xlat3;
  let x_1549 : vec3<f32> = ((vec3<f32>(x_1542.x, x_1542.y, x_1542.z) * vec3<f32>(x_1544.x, x_1544.x, x_1544.x)) + vec3<f32>(x_1547.x, x_1547.y, x_1547.z));
  let x_1550 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1549.x, x_1549.y, x_1549.z, x_1550.w);
  let x_1552 : vec4<f32> = u_xlat3;
  let x_1554 : f32 = u_xlat26;
  let x_1557 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_1552.x, x_1552.y, x_1552.z) * vec3<f32>(x_1554, x_1554, x_1554)) + -(x_1557));
  let x_1560 : vec3<f32> = u_xlat8;
  let x_1561 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_1560, vec3<f32>(x_1561.x, x_1561.y, x_1561.z));
  let x_1565 : f32 = u_xlat0;
  let x_1569 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_1565) * 0.004f) + x_1569);
  let x_1573 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_1573, 0.0f);
  let x_1576 : vec3<f32> = u_xlat8;
  let x_1577 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_1576, x_1577);
  let x_1581 : f32 = u_xlat8.x;
  u_xlat8.x = (x_1581 + 0.0001f);
  let x_1585 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_1585);
  let x_1589 : f32 = u_xlat8.x;
  let x_1591 : f32 = u_xlat10.x;
  u_xlat8.x = (x_1589 * x_1591);
  let x_1595 : f32 = u_xlat8.x;
  let x_1597 : f32 = u_xlat2.x;
  let x_1599 : f32 = u_xlat25;
  u_xlat8.x = ((x_1595 * x_1597) + x_1599);
  let x_1603 : f32 = u_xlat8.x;
  let x_1605 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_1603 * x_1605);
  let x_1609 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_1609);
  let x_1611 : f32 = u_xlat0;
  let x_1613 : f32 = u_xlat16;
  u_xlat0 = ((-(x_1611) * x_1613) + 1.0f);
  let x_1616 : f32 = u_xlat0;
  let x_1617 : f32 = u_xlat0;
  u_xlat0 = (x_1616 * x_1617);
  let x_1620 : f32 = u_xlat8.x;
  let x_1622 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_1620 * x_1622);
  let x_1625 : f32 = u_xlat0;
  let x_1627 : f32 = u_xlat8.x;
  u_xlat0 = (x_1625 * x_1627);
  let x_1629 : f32 = u_xlat0;
  u_xlat0 = (x_1629 * 0.25f);
  let x_1632 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1632, 0.0f, 1.0f);
  let x_1634 : f32 = u_xlat0;
  u_xlat0 = log2(x_1634);
  let x_1636 : f32 = u_xlat0;
  u_xlat0 = (x_1636 * 0.600000024f);
  let x_1639 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1639);
  let x_1643 : vec4<f32> = u_xlat1;
  let x_1646 : vec3<f32> = ((vec3<f32>(x_1643.x, x_1643.y, x_1643.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1647 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1647.x, x_1646.x, x_1646.y, x_1646.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

