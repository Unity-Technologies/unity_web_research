struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3630 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1850 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat71 : f32;
  var x_3872 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  let x_1816 : vec3<f32> = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1817 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1816.x, x_1816.y, x_1816.z, x_1817.w);
  let x_1820 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1820 == 0.0f);
  let x_1823 : vec3<f32> = vs_INTERP0;
  let x_1827 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1823) + x_1827);
  let x_1829 : vec3<f32> = u_xlat25;
  let x_1830 : vec3<f32> = u_xlat25;
  u_xlat67 = dot(x_1829, x_1830);
  let x_1832 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1832);
  let x_1834 : f32 = u_xlat67;
  let x_1836 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1834, x_1834, x_1834) * x_1836);
  let x_1840 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat7.x = x_1840;
  let x_1843 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat7.y = x_1843;
  let x_1846 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat7.z = x_1846;
  let x_1849 : bool = u_xlatb23.x;
  if (x_1849) {
    let x_1853 : vec3<f32> = u_xlat25;
    x_1850 = x_1853;
  } else {
    let x_1855 : vec4<f32> = u_xlat7;
    x_1850 = vec3<f32>(x_1855.x, x_1855.y, x_1855.z);
  }
  let x_1857 : vec3<f32> = x_1850;
  u_xlat25 = x_1857;
  let x_1859 : f32 = vs_INTERP0.y;
  let x_1861 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1859 * x_1861);
  let x_1865 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1867 : f32 = vs_INTERP0.x;
  let x_1870 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1865 * x_1867) + x_1870);
  let x_1874 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1876 : f32 = vs_INTERP0.z;
  let x_1879 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1874 * x_1876) + x_1879);
  let x_1883 : f32 = u_xlat23.x;
  let x_1885 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1883 + x_1885);
  let x_1889 : f32 = u_xlat23.x;
  let x_1892 : f32 = x_66.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1889) + -(x_1892));
  let x_1897 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1897, 0.0f);
  let x_1901 : f32 = u_xlat23.x;
  let x_1904 : f32 = x_66.unity_FogParams.x;
  u_xlat23.x = (x_1901 * x_1904);
  u_xlat6.w = 1.0f;
  let x_1910 : vec4<f32> = x_1752.unity_SHAr;
  let x_1911 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_1910, x_1911);
  let x_1916 : vec4<f32> = x_1752.unity_SHAg;
  let x_1917 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_1916, x_1917);
  let x_1922 : vec4<f32> = x_1752.unity_SHAb;
  let x_1923 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_1922, x_1923);
  let x_1926 : vec4<f32> = u_xlat6;
  let x_1928 : vec4<f32> = u_xlat6;
  u_xlat8 = (vec4<f32>(x_1926.y, x_1926.z, x_1926.z, x_1926.x) * vec4<f32>(x_1928.x, x_1928.y, x_1928.z, x_1928.z));
  let x_1933 : vec4<f32> = x_1752.unity_SHBr;
  let x_1934 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_1933, x_1934);
  let x_1939 : vec4<f32> = x_1752.unity_SHBg;
  let x_1940 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_1939, x_1940);
  let x_1945 : vec4<f32> = x_1752.unity_SHBb;
  let x_1946 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_1945, x_1946);
  let x_1950 : f32 = u_xlat6.y;
  let x_1952 : f32 = u_xlat6.y;
  u_xlat67 = (x_1950 * x_1952);
  let x_1955 : f32 = u_xlat6.x;
  let x_1957 : f32 = u_xlat6.x;
  let x_1959 : f32 = u_xlat67;
  u_xlat67 = ((x_1955 * x_1957) + -(x_1959));
  let x_1964 : vec4<f32> = x_1752.unity_SHC;
  let x_1966 : f32 = u_xlat67;
  let x_1969 : vec4<f32> = u_xlat9;
  u_xlat27 = ((vec3<f32>(x_1964.x, x_1964.y, x_1964.z) * vec3<f32>(x_1966, x_1966, x_1966)) + vec3<f32>(x_1969.x, x_1969.y, x_1969.z));
  let x_1972 : vec3<f32> = u_xlat27;
  let x_1973 : vec4<f32> = u_xlat7;
  u_xlat27 = (x_1972 + vec3<f32>(x_1973.x, x_1973.y, x_1973.z));
  let x_1976 : vec3<f32> = u_xlat27;
  u_xlat27 = max(x_1976, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1979 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1980 : vec2<f32> = vec2<f32>(x_1979.x, x_1979.y);
  let x_1984 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1980.x, x_1980.y));
  let x_1985 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1984.x, x_1984.y, x_1985.z, x_1985.w);
  let x_1987 : vec4<f32> = u_xlat7;
  let x_1989 : vec4<f32> = hlslcc_FragCoord;
  let x_1991 : vec2<f32> = (vec2<f32>(x_1987.x, x_1987.y) * vec2<f32>(x_1989.x, x_1989.y));
  let x_1992 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1991.x, x_1991.y, x_1992.z, x_1992.w);
  let x_1995 : f32 = u_xlat7.y;
  let x_1998 : f32 = x_66.x_ScaleBiasRt.x;
  let x_2001 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat67 = ((x_1995 * x_1998) + x_2001);
  let x_2003 : f32 = u_xlat67;
  u_xlat7.z = (-(x_2003) + 1.0f);
  let x_2008 : f32 = u_xlat3.x;
  u_xlat3.x = x_2008;
  let x_2011 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_2011, 0.0f, 1.0f);
  let x_2015 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_2015, 1.0f);
  let x_2018 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_2018 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2023 : f32 = u_xlat3.x;
  u_xlat67 = (-(x_2023) + 1.0f);
  let x_2026 : f32 = u_xlat67;
  let x_2027 : f32 = u_xlat67;
  u_xlat68 = (x_2026 * x_2027);
  let x_2029 : f32 = u_xlat68;
  u_xlat68 = max(x_2029, 0.0078125f);
  let x_2033 : f32 = u_xlat68;
  let x_2034 : f32 = u_xlat68;
  u_xlat72 = (x_2033 * x_2034);
  let x_2037 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2037 + 0.040000021f);
  let x_2042 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_2042, 1.0f);
  let x_2045 : f32 = u_xlat68;
  u_xlat29.x = ((x_2045 * 4.0f) + 2.0f);
  let x_2054 : vec4<f32> = u_xlat7;
  let x_2057 : f32 = x_66.x_GlobalMipBias.x;
  let x_2058 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2054.x, x_2054.z), x_2057);
  u_xlat7.x = x_2058.x;
  let x_2062 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2062 + -1.0f);
  let x_2066 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2068 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2066 * x_2068) + 1.0f);
  let x_2073 : f32 = u_xlat7.x;
  let x_2075 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2073, x_2075);
  let x_2078 : bool = u_xlatb66;
  if (x_2078) {
    let x_2082 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2082 == 1.0f);
    let x_2084 : bool = u_xlatb66;
    if (x_2084) {
      let x_2087 : vec4<f32> = u_xlat4;
      let x_2090 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2087.x, x_2087.y, x_2087.x, x_2087.y) + x_2090);
      let x_2093 : vec4<f32> = u_xlat8;
      let x_2094 : vec2<f32> = vec2<f32>(x_2093.x, x_2093.y);
      let x_2096 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2094.x, x_2094.y, x_2096);
      let x_2103 : vec3<f32> = txVec30;
      let x_2105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2103.xy, x_2103.z);
      u_xlat9.x = x_2105;
      let x_2108 : vec4<f32> = u_xlat8;
      let x_2109 : vec2<f32> = vec2<f32>(x_2108.z, x_2108.w);
      let x_2111 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2109.x, x_2109.y, x_2111);
      let x_2118 : vec3<f32> = txVec31;
      let x_2120 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2118.xy, x_2118.z);
      u_xlat9.y = x_2120;
      let x_2122 : vec4<f32> = u_xlat4;
      let x_2125 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2122.x, x_2122.y, x_2122.x, x_2122.y) + x_2125);
      let x_2128 : vec4<f32> = u_xlat8;
      let x_2129 : vec2<f32> = vec2<f32>(x_2128.x, x_2128.y);
      let x_2131 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2129.x, x_2129.y, x_2131);
      let x_2138 : vec3<f32> = txVec32;
      let x_2140 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2138.xy, x_2138.z);
      u_xlat9.z = x_2140;
      let x_2143 : vec4<f32> = u_xlat8;
      let x_2144 : vec2<f32> = vec2<f32>(x_2143.z, x_2143.w);
      let x_2146 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2144.x, x_2144.y, x_2146);
      let x_2153 : vec3<f32> = txVec33;
      let x_2155 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2153.xy, x_2153.z);
      u_xlat9.w = x_2155;
      let x_2157 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2157, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2162 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2162 == 2.0f);
      let x_2164 : bool = u_xlatb73;
      if (x_2164) {
        let x_2167 : vec4<f32> = u_xlat4;
        let x_2170 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2173 : vec2<f32> = ((vec2<f32>(x_2167.x, x_2167.y) * vec2<f32>(x_2170.z, x_2170.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2174 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2173.x, x_2173.y, x_2174.z, x_2174.w);
        let x_2176 : vec4<f32> = u_xlat8;
        let x_2178 : vec2<f32> = floor(vec2<f32>(x_2176.x, x_2176.y));
        let x_2179 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2178.x, x_2178.y, x_2179.z, x_2179.w);
        let x_2181 : vec4<f32> = u_xlat4;
        let x_2184 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2187 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2181.x, x_2181.y) * vec2<f32>(x_2184.z, x_2184.w)) + -(vec2<f32>(x_2187.x, x_2187.y)));
        let x_2191 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2191.x, x_2191.x, x_2191.y, x_2191.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2194 : vec4<f32> = u_xlat9;
        let x_2196 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2194.x, x_2194.x, x_2194.z, x_2194.z) * vec4<f32>(x_2196.x, x_2196.x, x_2196.z, x_2196.z));
        let x_2199 : vec4<f32> = u_xlat10;
        let x_2201 : vec2<f32> = (vec2<f32>(x_2199.y, x_2199.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2202 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2201.x, x_2202.y, x_2201.y, x_2202.w);
        let x_2204 : vec4<f32> = u_xlat10;
        let x_2207 : vec2<f32> = u_xlat52;
        let x_2209 : vec2<f32> = ((vec2<f32>(x_2204.x, x_2204.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2207));
        let x_2210 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2209.x, x_2209.y, x_2210.z, x_2210.w);
        let x_2213 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2213) + vec2<f32>(1.0f, 1.0f));
        let x_2216 : vec2<f32> = u_xlat52;
        let x_2217 : vec2<f32> = min(x_2216, vec2<f32>(0.0f, 0.0f));
        let x_2218 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2217.x, x_2217.y, x_2218.z, x_2218.w);
        let x_2220 : vec4<f32> = u_xlat11;
        let x_2223 : vec4<f32> = u_xlat11;
        let x_2226 : vec2<f32> = u_xlat54;
        let x_2227 : vec2<f32> = ((-(vec2<f32>(x_2220.x, x_2220.y)) * vec2<f32>(x_2223.x, x_2223.y)) + x_2226);
        let x_2228 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2227.x, x_2227.y, x_2228.z, x_2228.w);
        let x_2230 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2230, vec2<f32>(0.0f, 0.0f));
        let x_2232 : vec2<f32> = u_xlat52;
        let x_2234 : vec2<f32> = u_xlat52;
        let x_2236 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2232) * x_2234) + vec2<f32>(x_2236.y, x_2236.w));
        let x_2239 : vec4<f32> = u_xlat11;
        let x_2241 : vec2<f32> = (vec2<f32>(x_2239.x, x_2239.y) + vec2<f32>(1.0f, 1.0f));
        let x_2242 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2241.x, x_2241.y, x_2242.z, x_2242.w);
        let x_2244 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2244 + vec2<f32>(1.0f, 1.0f));
        let x_2246 : vec4<f32> = u_xlat10;
        let x_2248 : vec2<f32> = (vec2<f32>(x_2246.x, x_2246.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2249 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2248.x, x_2248.y, x_2249.z, x_2249.w);
        let x_2251 : vec2<f32> = u_xlat54;
        let x_2252 : vec2<f32> = (x_2251 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2253 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2252.x, x_2252.y, x_2253.z, x_2253.w);
        let x_2255 : vec4<f32> = u_xlat11;
        let x_2257 : vec2<f32> = (vec2<f32>(x_2255.x, x_2255.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2258 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2257.x, x_2257.y, x_2258.z, x_2258.w);
        let x_2260 : vec2<f32> = u_xlat52;
        let x_2261 : vec2<f32> = (x_2260 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2262 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2261.x, x_2261.y, x_2262.z, x_2262.w);
        let x_2264 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2264.y, x_2264.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2268 : f32 = u_xlat11.x;
        u_xlat12.z = x_2268;
        let x_2271 : f32 = u_xlat52.x;
        u_xlat12.w = x_2271;
        let x_2274 : f32 = u_xlat13.x;
        u_xlat10.z = x_2274;
        let x_2277 : f32 = u_xlat9.x;
        u_xlat10.w = x_2277;
        let x_2279 : vec4<f32> = u_xlat10;
        let x_2281 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2279.z, x_2279.w, x_2279.x, x_2279.z) + vec4<f32>(x_2281.z, x_2281.w, x_2281.x, x_2281.z));
        let x_2285 : f32 = u_xlat12.y;
        u_xlat11.z = x_2285;
        let x_2288 : f32 = u_xlat52.y;
        u_xlat11.w = x_2288;
        let x_2291 : f32 = u_xlat10.y;
        u_xlat13.z = x_2291;
        let x_2294 : f32 = u_xlat9.z;
        u_xlat13.w = x_2294;
        let x_2296 : vec4<f32> = u_xlat11;
        let x_2298 : vec4<f32> = u_xlat13;
        let x_2300 : vec3<f32> = (vec3<f32>(x_2296.z, x_2296.y, x_2296.w) + vec3<f32>(x_2298.z, x_2298.y, x_2298.w));
        let x_2301 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2300.x, x_2300.y, x_2300.z, x_2301.w);
        let x_2303 : vec4<f32> = u_xlat10;
        let x_2305 : vec4<f32> = u_xlat14;
        let x_2307 : vec3<f32> = (vec3<f32>(x_2303.x, x_2303.z, x_2303.w) / vec3<f32>(x_2305.z, x_2305.w, x_2305.y));
        let x_2308 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2307.x, x_2307.y, x_2307.z, x_2308.w);
        let x_2310 : vec4<f32> = u_xlat10;
        let x_2312 : vec3<f32> = (vec3<f32>(x_2310.x, x_2310.y, x_2310.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2313 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2312.x, x_2312.y, x_2312.z, x_2313.w);
        let x_2315 : vec4<f32> = u_xlat13;
        let x_2317 : vec4<f32> = u_xlat9;
        let x_2319 : vec3<f32> = (vec3<f32>(x_2315.z, x_2315.y, x_2315.w) / vec3<f32>(x_2317.x, x_2317.y, x_2317.z));
        let x_2320 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2319.x, x_2319.y, x_2319.z, x_2320.w);
        let x_2322 : vec4<f32> = u_xlat11;
        let x_2324 : vec3<f32> = (vec3<f32>(x_2322.x, x_2322.y, x_2322.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2325 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2324.x, x_2324.y, x_2324.z, x_2325.w);
        let x_2327 : vec4<f32> = u_xlat10;
        let x_2330 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2332 : vec3<f32> = (vec3<f32>(x_2327.y, x_2327.x, x_2327.z) * vec3<f32>(x_2330.x, x_2330.x, x_2330.x));
        let x_2333 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2332.x, x_2332.y, x_2332.z, x_2333.w);
        let x_2335 : vec4<f32> = u_xlat11;
        let x_2338 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2340 : vec3<f32> = (vec3<f32>(x_2335.x, x_2335.y, x_2335.z) * vec3<f32>(x_2338.y, x_2338.y, x_2338.y));
        let x_2341 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2340.x, x_2340.y, x_2340.z, x_2341.w);
        let x_2344 : f32 = u_xlat11.x;
        u_xlat10.w = x_2344;
        let x_2346 : vec4<f32> = u_xlat8;
        let x_2349 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2352 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2346.x, x_2346.y, x_2346.x, x_2346.y) * vec4<f32>(x_2349.x, x_2349.y, x_2349.x, x_2349.y)) + vec4<f32>(x_2352.y, x_2352.w, x_2352.x, x_2352.w));
        let x_2355 : vec4<f32> = u_xlat8;
        let x_2358 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2361 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2355.x, x_2355.y) * vec2<f32>(x_2358.x, x_2358.y)) + vec2<f32>(x_2361.z, x_2361.w));
        let x_2365 : f32 = u_xlat10.y;
        u_xlat11.w = x_2365;
        let x_2367 : vec4<f32> = u_xlat11;
        let x_2368 : vec2<f32> = vec2<f32>(x_2367.y, x_2367.z);
        let x_2369 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2369.x, x_2368.x, x_2369.z, x_2368.y);
        let x_2371 : vec4<f32> = u_xlat8;
        let x_2374 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2377 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2371.x, x_2371.y, x_2371.x, x_2371.y) * vec4<f32>(x_2374.x, x_2374.y, x_2374.x, x_2374.y)) + vec4<f32>(x_2377.x, x_2377.y, x_2377.z, x_2377.y));
        let x_2380 : vec4<f32> = u_xlat8;
        let x_2383 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2386 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2380.x, x_2380.y, x_2380.x, x_2380.y) * vec4<f32>(x_2383.x, x_2383.y, x_2383.x, x_2383.y)) + vec4<f32>(x_2386.w, x_2386.y, x_2386.w, x_2386.z));
        let x_2389 : vec4<f32> = u_xlat8;
        let x_2392 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2395 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2389.x, x_2389.y, x_2389.x, x_2389.y) * vec4<f32>(x_2392.x, x_2392.y, x_2392.x, x_2392.y)) + vec4<f32>(x_2395.x, x_2395.w, x_2395.z, x_2395.w));
        let x_2398 : vec4<f32> = u_xlat9;
        let x_2400 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2398.x, x_2398.x, x_2398.x, x_2398.y) * vec4<f32>(x_2400.z, x_2400.w, x_2400.y, x_2400.z));
        let x_2403 : vec4<f32> = u_xlat9;
        let x_2405 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2403.y, x_2403.y, x_2403.z, x_2403.z) * x_2405);
        let x_2409 : f32 = u_xlat9.z;
        let x_2411 : f32 = u_xlat14.y;
        u_xlat73 = (x_2409 * x_2411);
        let x_2414 : vec4<f32> = u_xlat12;
        let x_2415 : vec2<f32> = vec2<f32>(x_2414.x, x_2414.y);
        let x_2417 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2415.x, x_2415.y, x_2417);
        let x_2424 : vec3<f32> = txVec34;
        let x_2426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2424.xy, x_2424.z);
        u_xlat8.x = x_2426;
        let x_2429 : vec4<f32> = u_xlat12;
        let x_2430 : vec2<f32> = vec2<f32>(x_2429.z, x_2429.w);
        let x_2432 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2430.x, x_2430.y, x_2432);
        let x_2440 : vec3<f32> = txVec35;
        let x_2442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2440.xy, x_2440.z);
        u_xlat30 = x_2442;
        let x_2443 : f32 = u_xlat30;
        let x_2445 : f32 = u_xlat15.y;
        u_xlat30 = (x_2443 * x_2445);
        let x_2448 : f32 = u_xlat15.x;
        let x_2450 : f32 = u_xlat8.x;
        let x_2452 : f32 = u_xlat30;
        u_xlat8.x = ((x_2448 * x_2450) + x_2452);
        let x_2456 : vec2<f32> = u_xlat52;
        let x_2458 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2456.x, x_2456.y, x_2458);
        let x_2465 : vec3<f32> = txVec36;
        let x_2467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2465.xy, x_2465.z);
        u_xlat30 = x_2467;
        let x_2469 : f32 = u_xlat15.z;
        let x_2470 : f32 = u_xlat30;
        let x_2473 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2469 * x_2470) + x_2473);
        let x_2477 : vec4<f32> = u_xlat11;
        let x_2478 : vec2<f32> = vec2<f32>(x_2477.x, x_2477.y);
        let x_2480 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2478.x, x_2478.y, x_2480);
        let x_2487 : vec3<f32> = txVec37;
        let x_2489 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2487.xy, x_2487.z);
        u_xlat30 = x_2489;
        let x_2491 : f32 = u_xlat15.w;
        let x_2492 : f32 = u_xlat30;
        let x_2495 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2491 * x_2492) + x_2495);
        let x_2499 : vec4<f32> = u_xlat13;
        let x_2500 : vec2<f32> = vec2<f32>(x_2499.x, x_2499.y);
        let x_2502 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2500.x, x_2500.y, x_2502);
        let x_2509 : vec3<f32> = txVec38;
        let x_2511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2509.xy, x_2509.z);
        u_xlat30 = x_2511;
        let x_2513 : f32 = u_xlat16.x;
        let x_2514 : f32 = u_xlat30;
        let x_2517 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2513 * x_2514) + x_2517);
        let x_2521 : vec4<f32> = u_xlat13;
        let x_2522 : vec2<f32> = vec2<f32>(x_2521.z, x_2521.w);
        let x_2524 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2522.x, x_2522.y, x_2524);
        let x_2531 : vec3<f32> = txVec39;
        let x_2533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2531.xy, x_2531.z);
        u_xlat30 = x_2533;
        let x_2535 : f32 = u_xlat16.y;
        let x_2536 : f32 = u_xlat30;
        let x_2539 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2535 * x_2536) + x_2539);
        let x_2543 : vec4<f32> = u_xlat11;
        let x_2544 : vec2<f32> = vec2<f32>(x_2543.z, x_2543.w);
        let x_2546 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2544.x, x_2544.y, x_2546);
        let x_2553 : vec3<f32> = txVec40;
        let x_2555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2553.xy, x_2553.z);
        u_xlat30 = x_2555;
        let x_2557 : f32 = u_xlat16.z;
        let x_2558 : f32 = u_xlat30;
        let x_2561 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2557 * x_2558) + x_2561);
        let x_2565 : vec4<f32> = u_xlat10;
        let x_2566 : vec2<f32> = vec2<f32>(x_2565.x, x_2565.y);
        let x_2568 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2566.x, x_2566.y, x_2568);
        let x_2575 : vec3<f32> = txVec41;
        let x_2577 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2575.xy, x_2575.z);
        u_xlat30 = x_2577;
        let x_2579 : f32 = u_xlat16.w;
        let x_2580 : f32 = u_xlat30;
        let x_2583 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2579 * x_2580) + x_2583);
        let x_2587 : vec4<f32> = u_xlat10;
        let x_2588 : vec2<f32> = vec2<f32>(x_2587.z, x_2587.w);
        let x_2590 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2588.x, x_2588.y, x_2590);
        let x_2597 : vec3<f32> = txVec42;
        let x_2599 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2597.xy, x_2597.z);
        u_xlat30 = x_2599;
        let x_2600 : f32 = u_xlat73;
        let x_2601 : f32 = u_xlat30;
        let x_2604 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2600 * x_2601) + x_2604);
      } else {
        let x_2607 : vec4<f32> = u_xlat4;
        let x_2610 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2613 : vec2<f32> = ((vec2<f32>(x_2607.x, x_2607.y) * vec2<f32>(x_2610.z, x_2610.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2614 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2613.x, x_2613.y, x_2614.z, x_2614.w);
        let x_2616 : vec4<f32> = u_xlat8;
        let x_2618 : vec2<f32> = floor(vec2<f32>(x_2616.x, x_2616.y));
        let x_2619 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2618.x, x_2618.y, x_2619.z, x_2619.w);
        let x_2621 : vec4<f32> = u_xlat4;
        let x_2624 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2627 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2621.x, x_2621.y) * vec2<f32>(x_2624.z, x_2624.w)) + -(vec2<f32>(x_2627.x, x_2627.y)));
        let x_2631 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2631.x, x_2631.x, x_2631.y, x_2631.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2634 : vec4<f32> = u_xlat9;
        let x_2636 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2634.x, x_2634.x, x_2634.z, x_2634.z) * vec4<f32>(x_2636.x, x_2636.x, x_2636.z, x_2636.z));
        let x_2639 : vec4<f32> = u_xlat10;
        let x_2641 : vec2<f32> = (vec2<f32>(x_2639.y, x_2639.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2642 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2642.x, x_2641.x, x_2642.z, x_2641.y);
        let x_2644 : vec4<f32> = u_xlat10;
        let x_2647 : vec2<f32> = u_xlat52;
        let x_2649 : vec2<f32> = ((vec2<f32>(x_2644.x, x_2644.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2647));
        let x_2650 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2649.x, x_2650.y, x_2649.y, x_2650.w);
        let x_2652 : vec2<f32> = u_xlat52;
        let x_2654 : vec2<f32> = (-(x_2652) + vec2<f32>(1.0f, 1.0f));
        let x_2655 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2654.x, x_2654.y, x_2655.z, x_2655.w);
        let x_2657 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2657, vec2<f32>(0.0f, 0.0f));
        let x_2659 : vec2<f32> = u_xlat54;
        let x_2661 : vec2<f32> = u_xlat54;
        let x_2663 : vec4<f32> = u_xlat10;
        let x_2665 : vec2<f32> = ((-(x_2659) * x_2661) + vec2<f32>(x_2663.x, x_2663.y));
        let x_2666 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2665.x, x_2665.y, x_2666.z, x_2666.w);
        let x_2668 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2668, vec2<f32>(0.0f, 0.0f));
        let x_2671 : vec2<f32> = u_xlat54;
        let x_2673 : vec2<f32> = u_xlat54;
        let x_2675 : vec4<f32> = u_xlat9;
        let x_2677 : vec2<f32> = ((-(x_2671) * x_2673) + vec2<f32>(x_2675.y, x_2675.w));
        let x_2678 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2677.x, x_2678.y, x_2677.y);
        let x_2680 : vec4<f32> = u_xlat10;
        let x_2682 : vec2<f32> = (vec2<f32>(x_2680.x, x_2680.y) + vec2<f32>(2.0f, 2.0f));
        let x_2683 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2682.x, x_2682.y, x_2683.z, x_2683.w);
        let x_2685 : vec3<f32> = u_xlat31;
        let x_2687 : vec2<f32> = (vec2<f32>(x_2685.x, x_2685.z) + vec2<f32>(2.0f, 2.0f));
        let x_2688 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2688.x, x_2687.x, x_2688.z, x_2687.y);
        let x_2691 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2691 * 0.081632003f);
        let x_2694 : vec4<f32> = u_xlat9;
        let x_2696 : vec3<f32> = (vec3<f32>(x_2694.z, x_2694.x, x_2694.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2697 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2696.x, x_2696.y, x_2696.z, x_2697.w);
        let x_2699 : vec4<f32> = u_xlat10;
        let x_2701 : vec2<f32> = (vec2<f32>(x_2699.x, x_2699.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2702 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2701.x, x_2701.y, x_2702.z, x_2702.w);
        let x_2705 : f32 = u_xlat13.y;
        u_xlat12.x = x_2705;
        let x_2707 : vec2<f32> = u_xlat52;
        let x_2710 : vec2<f32> = ((vec2<f32>(x_2707.x, x_2707.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2711 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2711.x, x_2710.x, x_2711.z, x_2710.y);
        let x_2713 : vec2<f32> = u_xlat52;
        let x_2716 : vec2<f32> = ((vec2<f32>(x_2713.x, x_2713.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2717 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2716.x, x_2717.y, x_2716.y, x_2717.w);
        let x_2720 : f32 = u_xlat9.x;
        u_xlat10.y = x_2720;
        let x_2723 : f32 = u_xlat11.y;
        u_xlat10.w = x_2723;
        let x_2725 : vec4<f32> = u_xlat10;
        let x_2726 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2725 + x_2726);
        let x_2728 : vec2<f32> = u_xlat52;
        let x_2731 : vec2<f32> = ((vec2<f32>(x_2728.y, x_2728.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2732 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2732.x, x_2731.x, x_2732.z, x_2731.y);
        let x_2734 : vec2<f32> = u_xlat52;
        let x_2737 : vec2<f32> = ((vec2<f32>(x_2734.y, x_2734.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2738 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2737.x, x_2738.y, x_2737.y, x_2738.w);
        let x_2741 : f32 = u_xlat9.y;
        u_xlat11.y = x_2741;
        let x_2743 : vec4<f32> = u_xlat11;
        let x_2744 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2743 + x_2744);
        let x_2746 : vec4<f32> = u_xlat10;
        let x_2747 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2746 / x_2747);
        let x_2749 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2749 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2751 : vec4<f32> = u_xlat11;
        let x_2752 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2751 / x_2752);
        let x_2754 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2754 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2756 : vec4<f32> = u_xlat10;
        let x_2759 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2756.w, x_2756.x, x_2756.y, x_2756.z) * vec4<f32>(x_2759.x, x_2759.x, x_2759.x, x_2759.x));
        let x_2762 : vec4<f32> = u_xlat11;
        let x_2765 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2762.x, x_2762.w, x_2762.y, x_2762.z) * vec4<f32>(x_2765.y, x_2765.y, x_2765.y, x_2765.y));
        let x_2768 : vec4<f32> = u_xlat10;
        let x_2769 : vec3<f32> = vec3<f32>(x_2768.y, x_2768.z, x_2768.w);
        let x_2770 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2769.x, x_2770.y, x_2769.y, x_2769.z);
        let x_2773 : f32 = u_xlat11.x;
        u_xlat13.y = x_2773;
        let x_2775 : vec4<f32> = u_xlat8;
        let x_2778 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2781 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2775.x, x_2775.y, x_2775.x, x_2775.y) * vec4<f32>(x_2778.x, x_2778.y, x_2778.x, x_2778.y)) + vec4<f32>(x_2781.x, x_2781.y, x_2781.z, x_2781.y));
        let x_2784 : vec4<f32> = u_xlat8;
        let x_2787 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2790 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2784.x, x_2784.y) * vec2<f32>(x_2787.x, x_2787.y)) + vec2<f32>(x_2790.w, x_2790.y));
        let x_2794 : f32 = u_xlat13.y;
        u_xlat10.y = x_2794;
        let x_2797 : f32 = u_xlat11.z;
        u_xlat13.y = x_2797;
        let x_2799 : vec4<f32> = u_xlat8;
        let x_2802 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2805 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2799.x, x_2799.y, x_2799.x, x_2799.y) * vec4<f32>(x_2802.x, x_2802.y, x_2802.x, x_2802.y)) + vec4<f32>(x_2805.x, x_2805.y, x_2805.z, x_2805.y));
        let x_2808 : vec4<f32> = u_xlat8;
        let x_2811 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2814 : vec4<f32> = u_xlat13;
        let x_2816 : vec2<f32> = ((vec2<f32>(x_2808.x, x_2808.y) * vec2<f32>(x_2811.x, x_2811.y)) + vec2<f32>(x_2814.w, x_2814.y));
        let x_2817 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2816.x, x_2816.y, x_2817.z, x_2817.w);
        let x_2820 : f32 = u_xlat13.y;
        u_xlat10.z = x_2820;
        let x_2822 : vec4<f32> = u_xlat8;
        let x_2825 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2828 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2822.x, x_2822.y, x_2822.x, x_2822.y) * vec4<f32>(x_2825.x, x_2825.y, x_2825.x, x_2825.y)) + vec4<f32>(x_2828.x, x_2828.y, x_2828.x, x_2828.z));
        let x_2832 : f32 = u_xlat11.w;
        u_xlat13.y = x_2832;
        let x_2834 : vec4<f32> = u_xlat8;
        let x_2837 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2840 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2834.x, x_2834.y, x_2834.x, x_2834.y) * vec4<f32>(x_2837.x, x_2837.y, x_2837.x, x_2837.y)) + vec4<f32>(x_2840.x, x_2840.y, x_2840.z, x_2840.y));
        let x_2844 : vec4<f32> = u_xlat8;
        let x_2847 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2850 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2844.x, x_2844.y) * vec2<f32>(x_2847.x, x_2847.y)) + vec2<f32>(x_2850.w, x_2850.y));
        let x_2854 : f32 = u_xlat13.y;
        u_xlat10.w = x_2854;
        let x_2857 : vec4<f32> = u_xlat8;
        let x_2860 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2863 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2857.x, x_2857.y) * vec2<f32>(x_2860.x, x_2860.y)) + vec2<f32>(x_2863.x, x_2863.w));
        let x_2866 : vec4<f32> = u_xlat13;
        let x_2867 : vec3<f32> = vec3<f32>(x_2866.x, x_2866.z, x_2866.w);
        let x_2868 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2867.x, x_2868.y, x_2867.y, x_2867.z);
        let x_2870 : vec4<f32> = u_xlat8;
        let x_2873 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2876 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2870.x, x_2870.y, x_2870.x, x_2870.y) * vec4<f32>(x_2873.x, x_2873.y, x_2873.x, x_2873.y)) + vec4<f32>(x_2876.x, x_2876.y, x_2876.z, x_2876.y));
        let x_2880 : vec4<f32> = u_xlat8;
        let x_2883 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2886 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2880.x, x_2880.y) * vec2<f32>(x_2883.x, x_2883.y)) + vec2<f32>(x_2886.w, x_2886.y));
        let x_2890 : f32 = u_xlat10.x;
        u_xlat11.x = x_2890;
        let x_2892 : vec4<f32> = u_xlat8;
        let x_2895 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2898 : vec4<f32> = u_xlat11;
        let x_2900 : vec2<f32> = ((vec2<f32>(x_2892.x, x_2892.y) * vec2<f32>(x_2895.x, x_2895.y)) + vec2<f32>(x_2898.x, x_2898.y));
        let x_2901 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2900.x, x_2900.y, x_2901.z, x_2901.w);
        let x_2904 : vec4<f32> = u_xlat9;
        let x_2906 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2904.x, x_2904.x, x_2904.x, x_2904.x) * x_2906);
        let x_2909 : vec4<f32> = u_xlat9;
        let x_2911 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2909.y, x_2909.y, x_2909.y, x_2909.y) * x_2911);
        let x_2914 : vec4<f32> = u_xlat9;
        let x_2916 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2914.z, x_2914.z, x_2914.z, x_2914.z) * x_2916);
        let x_2918 : vec4<f32> = u_xlat9;
        let x_2920 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2918.w, x_2918.w, x_2918.w, x_2918.w) * x_2920);
        let x_2923 : vec4<f32> = u_xlat14;
        let x_2924 : vec2<f32> = vec2<f32>(x_2923.x, x_2923.y);
        let x_2926 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2924.x, x_2924.y, x_2926);
        let x_2933 : vec3<f32> = txVec43;
        let x_2935 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2933.xy, x_2933.z);
        u_xlat73 = x_2935;
        let x_2937 : vec4<f32> = u_xlat14;
        let x_2938 : vec2<f32> = vec2<f32>(x_2937.z, x_2937.w);
        let x_2940 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2938.x, x_2938.y, x_2940);
        let x_2947 : vec3<f32> = txVec44;
        let x_2949 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2947.xy, x_2947.z);
        u_xlat10.x = x_2949;
        let x_2952 : f32 = u_xlat10.x;
        let x_2954 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2952 * x_2954);
        let x_2958 : f32 = u_xlat19.x;
        let x_2959 : f32 = u_xlat73;
        let x_2962 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2958 * x_2959) + x_2962);
        let x_2965 : vec2<f32> = u_xlat52;
        let x_2967 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2965.x, x_2965.y, x_2967);
        let x_2974 : vec3<f32> = txVec45;
        let x_2976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2974.xy, x_2974.z);
        u_xlat52.x = x_2976;
        let x_2979 : f32 = u_xlat19.z;
        let x_2981 : f32 = u_xlat52.x;
        let x_2983 : f32 = u_xlat73;
        u_xlat73 = ((x_2979 * x_2981) + x_2983);
        let x_2986 : vec4<f32> = u_xlat17;
        let x_2987 : vec2<f32> = vec2<f32>(x_2986.x, x_2986.y);
        let x_2989 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2987.x, x_2987.y, x_2989);
        let x_2996 : vec3<f32> = txVec46;
        let x_2998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2996.xy, x_2996.z);
        u_xlat52.x = x_2998;
        let x_3001 : f32 = u_xlat19.w;
        let x_3003 : f32 = u_xlat52.x;
        let x_3005 : f32 = u_xlat73;
        u_xlat73 = ((x_3001 * x_3003) + x_3005);
        let x_3008 : vec4<f32> = u_xlat15;
        let x_3009 : vec2<f32> = vec2<f32>(x_3008.x, x_3008.y);
        let x_3011 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_3009.x, x_3009.y, x_3011);
        let x_3018 : vec3<f32> = txVec47;
        let x_3020 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3018.xy, x_3018.z);
        u_xlat52.x = x_3020;
        let x_3023 : f32 = u_xlat20.x;
        let x_3025 : f32 = u_xlat52.x;
        let x_3027 : f32 = u_xlat73;
        u_xlat73 = ((x_3023 * x_3025) + x_3027);
        let x_3030 : vec4<f32> = u_xlat15;
        let x_3031 : vec2<f32> = vec2<f32>(x_3030.z, x_3030.w);
        let x_3033 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_3031.x, x_3031.y, x_3033);
        let x_3040 : vec3<f32> = txVec48;
        let x_3042 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3040.xy, x_3040.z);
        u_xlat52.x = x_3042;
        let x_3045 : f32 = u_xlat20.y;
        let x_3047 : f32 = u_xlat52.x;
        let x_3049 : f32 = u_xlat73;
        u_xlat73 = ((x_3045 * x_3047) + x_3049);
        let x_3052 : vec4<f32> = u_xlat16;
        let x_3053 : vec2<f32> = vec2<f32>(x_3052.x, x_3052.y);
        let x_3055 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_3053.x, x_3053.y, x_3055);
        let x_3062 : vec3<f32> = txVec49;
        let x_3064 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3062.xy, x_3062.z);
        u_xlat52.x = x_3064;
        let x_3067 : f32 = u_xlat20.z;
        let x_3069 : f32 = u_xlat52.x;
        let x_3071 : f32 = u_xlat73;
        u_xlat73 = ((x_3067 * x_3069) + x_3071);
        let x_3074 : vec4<f32> = u_xlat17;
        let x_3075 : vec2<f32> = vec2<f32>(x_3074.z, x_3074.w);
        let x_3077 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3075.x, x_3075.y, x_3077);
        let x_3084 : vec3<f32> = txVec50;
        let x_3086 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3084.xy, x_3084.z);
        u_xlat52.x = x_3086;
        let x_3089 : f32 = u_xlat20.w;
        let x_3091 : f32 = u_xlat52.x;
        let x_3093 : f32 = u_xlat73;
        u_xlat73 = ((x_3089 * x_3091) + x_3093);
        let x_3096 : vec4<f32> = u_xlat18;
        let x_3097 : vec2<f32> = vec2<f32>(x_3096.x, x_3096.y);
        let x_3099 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3097.x, x_3097.y, x_3099);
        let x_3106 : vec3<f32> = txVec51;
        let x_3108 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3106.xy, x_3106.z);
        u_xlat52.x = x_3108;
        let x_3111 : f32 = u_xlat21.x;
        let x_3113 : f32 = u_xlat52.x;
        let x_3115 : f32 = u_xlat73;
        u_xlat73 = ((x_3111 * x_3113) + x_3115);
        let x_3118 : vec4<f32> = u_xlat18;
        let x_3119 : vec2<f32> = vec2<f32>(x_3118.z, x_3118.w);
        let x_3121 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3119.x, x_3119.y, x_3121);
        let x_3128 : vec3<f32> = txVec52;
        let x_3130 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3128.xy, x_3128.z);
        u_xlat52.x = x_3130;
        let x_3133 : f32 = u_xlat21.y;
        let x_3135 : f32 = u_xlat52.x;
        let x_3137 : f32 = u_xlat73;
        u_xlat73 = ((x_3133 * x_3135) + x_3137);
        let x_3140 : vec2<f32> = u_xlat32;
        let x_3142 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3140.x, x_3140.y, x_3142);
        let x_3149 : vec3<f32> = txVec53;
        let x_3151 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3149.xy, x_3149.z);
        u_xlat52.x = x_3151;
        let x_3154 : f32 = u_xlat21.z;
        let x_3156 : f32 = u_xlat52.x;
        let x_3158 : f32 = u_xlat73;
        u_xlat73 = ((x_3154 * x_3156) + x_3158);
        let x_3161 : vec2<f32> = u_xlat60;
        let x_3163 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3161.x, x_3161.y, x_3163);
        let x_3170 : vec3<f32> = txVec54;
        let x_3172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3170.xy, x_3170.z);
        u_xlat52.x = x_3172;
        let x_3175 : f32 = u_xlat21.w;
        let x_3177 : f32 = u_xlat52.x;
        let x_3179 : f32 = u_xlat73;
        u_xlat73 = ((x_3175 * x_3177) + x_3179);
        let x_3182 : vec4<f32> = u_xlat13;
        let x_3183 : vec2<f32> = vec2<f32>(x_3182.x, x_3182.y);
        let x_3185 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3183.x, x_3183.y, x_3185);
        let x_3192 : vec3<f32> = txVec55;
        let x_3194 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3192.xy, x_3192.z);
        u_xlat52.x = x_3194;
        let x_3197 : f32 = u_xlat9.x;
        let x_3199 : f32 = u_xlat52.x;
        let x_3201 : f32 = u_xlat73;
        u_xlat73 = ((x_3197 * x_3199) + x_3201);
        let x_3204 : vec4<f32> = u_xlat13;
        let x_3205 : vec2<f32> = vec2<f32>(x_3204.z, x_3204.w);
        let x_3207 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3205.x, x_3205.y, x_3207);
        let x_3214 : vec3<f32> = txVec56;
        let x_3216 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3214.xy, x_3214.z);
        u_xlat52.x = x_3216;
        let x_3219 : f32 = u_xlat9.y;
        let x_3221 : f32 = u_xlat52.x;
        let x_3223 : f32 = u_xlat73;
        u_xlat73 = ((x_3219 * x_3221) + x_3223);
        let x_3226 : vec2<f32> = u_xlat55;
        let x_3228 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3226.x, x_3226.y, x_3228);
        let x_3235 : vec3<f32> = txVec57;
        let x_3237 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3235.xy, x_3235.z);
        u_xlat52.x = x_3237;
        let x_3240 : f32 = u_xlat9.z;
        let x_3242 : f32 = u_xlat52.x;
        let x_3244 : f32 = u_xlat73;
        u_xlat73 = ((x_3240 * x_3242) + x_3244);
        let x_3247 : vec4<f32> = u_xlat8;
        let x_3248 : vec2<f32> = vec2<f32>(x_3247.x, x_3247.y);
        let x_3250 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3248.x, x_3248.y, x_3250);
        let x_3257 : vec3<f32> = txVec58;
        let x_3259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3257.xy, x_3257.z);
        u_xlat8.x = x_3259;
        let x_3262 : f32 = u_xlat9.w;
        let x_3264 : f32 = u_xlat8.x;
        let x_3266 : f32 = u_xlat73;
        u_xlat66 = ((x_3262 * x_3264) + x_3266);
      }
    }
  } else {
    let x_3270 : vec4<f32> = u_xlat4;
    let x_3271 : vec2<f32> = vec2<f32>(x_3270.x, x_3270.y);
    let x_3273 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3271.x, x_3271.y, x_3273);
    let x_3280 : vec3<f32> = txVec59;
    let x_3282 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3280.xy, x_3280.z);
    u_xlat66 = x_3282;
  }
  let x_3283 : f32 = u_xlat66;
  let x_3285 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3287 : f32 = u_xlat70;
  u_xlat66 = ((x_3283 * x_3285) + x_3287);
  let x_3289 : bool = u_xlatb5;
  let x_3290 : f32 = u_xlat66;
  u_xlat66 = select(x_3290, 1.0f, x_3289);
  let x_3292 : vec3<f32> = vs_INTERP0;
  let x_3294 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3296 : vec3<f32> = (x_3292 + -(x_3294));
  let x_3297 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3296.x, x_3296.y, x_3296.z, x_3297.w);
  let x_3299 : vec4<f32> = u_xlat4;
  let x_3301 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3299.x, x_3299.y, x_3299.z), vec3<f32>(x_3301.x, x_3301.y, x_3301.z));
  let x_3306 : f32 = u_xlat4.x;
  let x_3308 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3311 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3306 * x_3308) + x_3311);
  let x_3315 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3315, 0.0f, 1.0f);
  let x_3319 : f32 = u_xlat66;
  u_xlat26 = (-(x_3319) + 1.0f);
  let x_3323 : f32 = u_xlat4.x;
  let x_3324 : f32 = u_xlat26;
  let x_3326 : f32 = u_xlat66;
  u_xlat66 = ((x_3323 * x_3324) + x_3326);
  let x_3328 : vec2<f32> = u_xlat51;
  let x_3331 : vec4<f32> = x_66.x_MainLightColor;
  let x_3333 : vec3<f32> = (vec3<f32>(x_3328.x, x_3328.x, x_3328.x) * vec3<f32>(x_3331.x, x_3331.y, x_3331.z));
  let x_3334 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3333.x, x_3333.y, x_3333.z, x_3334.w);
  let x_3336 : vec3<f32> = u_xlat25;
  let x_3338 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(-(x_3336), vec3<f32>(x_3338.x, x_3338.y, x_3338.z));
  let x_3341 : f32 = u_xlat70;
  let x_3342 : f32 = u_xlat70;
  u_xlat70 = (x_3341 + x_3342);
  let x_3344 : vec4<f32> = u_xlat6;
  let x_3346 : f32 = u_xlat70;
  let x_3350 : vec3<f32> = u_xlat25;
  let x_3352 : vec3<f32> = ((vec3<f32>(x_3344.x, x_3344.y, x_3344.z) * -(vec3<f32>(x_3346, x_3346, x_3346))) + -(x_3350));
  let x_3353 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3352.x, x_3352.y, x_3352.z, x_3353.w);
  let x_3355 : vec4<f32> = u_xlat6;
  let x_3357 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(vec3<f32>(x_3355.x, x_3355.y, x_3355.z), x_3357);
  let x_3359 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3359, 0.0f, 1.0f);
  let x_3361 : f32 = u_xlat70;
  u_xlat70 = (-(x_3361) + 1.0f);
  let x_3364 : f32 = u_xlat70;
  let x_3365 : f32 = u_xlat70;
  u_xlat70 = (x_3364 * x_3365);
  let x_3367 : f32 = u_xlat70;
  let x_3368 : f32 = u_xlat70;
  u_xlat70 = (x_3367 * x_3368);
  let x_3370 : f32 = u_xlat67;
  u_xlat5.x = ((-(x_3370) * 0.699999988f) + 1.700000048f);
  let x_3377 : f32 = u_xlat67;
  let x_3379 : f32 = u_xlat5.x;
  u_xlat67 = (x_3377 * x_3379);
  let x_3381 : f32 = u_xlat67;
  u_xlat67 = (x_3381 * 6.0f);
  let x_3392 : vec4<f32> = u_xlat8;
  let x_3394 : f32 = u_xlat67;
  let x_3395 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3392.x, x_3392.y, x_3392.z), x_3394);
  u_xlat8 = x_3395;
  let x_3397 : f32 = u_xlat8.w;
  u_xlat67 = (x_3397 + -1.0f);
  let x_3400 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3401 : f32 = u_xlat67;
  u_xlat67 = ((x_3400 * x_3401) + 1.0f);
  let x_3404 : f32 = u_xlat67;
  u_xlat67 = max(x_3404, 0.0f);
  let x_3406 : f32 = u_xlat67;
  u_xlat67 = log2(x_3406);
  let x_3408 : f32 = u_xlat67;
  let x_3410 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat67 = (x_3408 * x_3410);
  let x_3412 : f32 = u_xlat67;
  u_xlat67 = exp2(x_3412);
  let x_3414 : f32 = u_xlat67;
  let x_3416 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat67 = (x_3414 * x_3416);
  let x_3418 : vec4<f32> = u_xlat8;
  let x_3420 : f32 = u_xlat67;
  let x_3422 : vec3<f32> = (vec3<f32>(x_3418.x, x_3418.y, x_3418.z) * vec3<f32>(x_3420, x_3420, x_3420));
  let x_3423 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3422.x, x_3422.y, x_3422.z, x_3423.w);
  let x_3425 : f32 = u_xlat68;
  let x_3427 : f32 = u_xlat68;
  let x_3431 : vec2<f32> = ((vec2<f32>(x_3425, x_3425) * vec2<f32>(x_3427, x_3427)) + vec2<f32>(-1.0f, 1.0f));
  let x_3432 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3431.x, x_3431.y, x_3432.z, x_3432.w);
  let x_3435 : f32 = u_xlat9.y;
  u_xlat67 = (1.0f / x_3435);
  let x_3438 : f32 = u_xlat3.x;
  u_xlat68 = (x_3438 + -0.039999999f);
  let x_3441 : f32 = u_xlat70;
  let x_3442 : f32 = u_xlat68;
  u_xlat68 = ((x_3441 * x_3442) + 0.039999999f);
  let x_3446 : f32 = u_xlat67;
  let x_3447 : f32 = u_xlat68;
  u_xlat67 = (x_3446 * x_3447);
  let x_3449 : f32 = u_xlat67;
  let x_3451 : vec4<f32> = u_xlat8;
  let x_3453 : vec3<f32> = (vec3<f32>(x_3449, x_3449, x_3449) * vec3<f32>(x_3451.x, x_3451.y, x_3451.z));
  let x_3454 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3453.x, x_3453.y, x_3453.z, x_3454.w);
  let x_3456 : vec3<f32> = u_xlat27;
  let x_3457 : vec3<f32> = u_xlat2;
  let x_3459 : vec4<f32> = u_xlat8;
  let x_3461 : vec3<f32> = ((x_3456 * x_3457) + vec3<f32>(x_3459.x, x_3459.y, x_3459.z));
  let x_3462 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3461.x, x_3461.y, x_3461.z, x_3462.w);
  let x_3464 : f32 = u_xlat66;
  let x_3466 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3464 * x_3466);
  let x_3468 : vec4<f32> = u_xlat6;
  let x_3471 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3468.x, x_3468.y, x_3468.z), vec3<f32>(x_3471.x, x_3471.y, x_3471.z));
  let x_3474 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3474, 0.0f, 1.0f);
  let x_3476 : f32 = u_xlat66;
  let x_3477 : f32 = u_xlat67;
  u_xlat66 = (x_3476 * x_3477);
  let x_3479 : f32 = u_xlat66;
  let x_3481 : vec4<f32> = u_xlat4;
  let x_3483 : vec3<f32> = (vec3<f32>(x_3479, x_3479, x_3479) * vec3<f32>(x_3481.x, x_3481.y, x_3481.z));
  let x_3484 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3483.x, x_3483.y, x_3483.z, x_3484.w);
  let x_3486 : vec3<f32> = u_xlat25;
  let x_3488 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3490 : vec3<f32> = (x_3486 + vec3<f32>(x_3488.x, x_3488.y, x_3488.z));
  let x_3491 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3490.x, x_3490.y, x_3490.z, x_3491.w);
  let x_3493 : vec4<f32> = u_xlat8;
  let x_3495 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3493.x, x_3493.y, x_3493.z), vec3<f32>(x_3495.x, x_3495.y, x_3495.z));
  let x_3498 : f32 = u_xlat66;
  u_xlat66 = max(x_3498, 1.17549435e-37f);
  let x_3501 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3501);
  let x_3503 : f32 = u_xlat66;
  let x_3505 : vec4<f32> = u_xlat8;
  let x_3507 : vec3<f32> = (vec3<f32>(x_3503, x_3503, x_3503) * vec3<f32>(x_3505.x, x_3505.y, x_3505.z));
  let x_3508 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3507.x, x_3507.y, x_3507.z, x_3508.w);
  let x_3510 : vec4<f32> = u_xlat6;
  let x_3512 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3510.x, x_3510.y, x_3510.z), vec3<f32>(x_3512.x, x_3512.y, x_3512.z));
  let x_3515 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3515, 0.0f, 1.0f);
  let x_3518 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3520 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3518.x, x_3518.y, x_3518.z), vec3<f32>(x_3520.x, x_3520.y, x_3520.z));
  let x_3523 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3523, 0.0f, 1.0f);
  let x_3525 : f32 = u_xlat66;
  let x_3526 : f32 = u_xlat66;
  u_xlat66 = (x_3525 * x_3526);
  let x_3528 : f32 = u_xlat66;
  let x_3530 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3528 * x_3530) + 1.000010014f);
  let x_3534 : f32 = u_xlat67;
  let x_3535 : f32 = u_xlat67;
  u_xlat67 = (x_3534 * x_3535);
  let x_3537 : f32 = u_xlat66;
  let x_3538 : f32 = u_xlat66;
  u_xlat66 = (x_3537 * x_3538);
  let x_3540 : f32 = u_xlat67;
  u_xlat67 = max(x_3540, 0.100000001f);
  let x_3543 : f32 = u_xlat66;
  let x_3544 : f32 = u_xlat67;
  u_xlat66 = (x_3543 * x_3544);
  let x_3547 : f32 = u_xlat29.x;
  let x_3548 : f32 = u_xlat66;
  u_xlat66 = (x_3547 * x_3548);
  let x_3550 : f32 = u_xlat72;
  let x_3551 : f32 = u_xlat66;
  u_xlat66 = (x_3550 / x_3551);
  let x_3553 : f32 = u_xlat66;
  let x_3557 : vec3<f32> = u_xlat2;
  let x_3558 : vec3<f32> = ((vec3<f32>(x_3553, x_3553, x_3553) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3557);
  let x_3559 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3558.x, x_3558.y, x_3558.z, x_3559.w);
  let x_3561 : vec4<f32> = u_xlat4;
  let x_3563 : vec4<f32> = u_xlat8;
  let x_3565 : vec3<f32> = (vec3<f32>(x_3561.x, x_3561.y, x_3561.z) * vec3<f32>(x_3563.x, x_3563.y, x_3563.z));
  let x_3566 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3565.x, x_3565.y, x_3565.z, x_3566.w);
  let x_3569 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3571 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3569, x_3571);
  let x_3573 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3573));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3585 : u32 = u_xlatu_loop_1;
    let x_3586 : u32 = u_xlatu66;
    if ((x_3585 < x_3586)) {
    } else {
      break;
    }
    let x_3589 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3589 >> 2u);
    let x_3592 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3592 & 3u));
    let x_3595 : u32 = u_xlatu68;
    let x_3598 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3595)];
    let x_3608 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3613 : vec4<u32> = indexable[x_3608];
    u_xlat68 = dot(x_3598, bitcast<vec4<f32>>(x_3613));
    let x_3617 : f32 = u_xlat68;
    u_xlati68 = i32(x_3617);
    let x_3619 : vec3<f32> = vs_INTERP0;
    let x_3631 : i32 = u_xlati68;
    let x_3633 : vec4<f32> = x_3630.x_AdditionalLightsPosition[x_3631];
    let x_3636 : i32 = u_xlati68;
    let x_3638 : vec4<f32> = x_3630.x_AdditionalLightsPosition[x_3636];
    u_xlat31 = ((-(x_3619) * vec3<f32>(x_3633.w, x_3633.w, x_3633.w)) + vec3<f32>(x_3638.x, x_3638.y, x_3638.z));
    let x_3641 : vec3<f32> = u_xlat31;
    let x_3642 : vec3<f32> = u_xlat31;
    u_xlat3.x = dot(x_3641, x_3642);
    let x_3646 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3646, 6.10351562e-05f);
    let x_3651 : f32 = u_xlat3.x;
    u_xlat70 = inverseSqrt(x_3651);
    let x_3653 : f32 = u_xlat70;
    let x_3655 : vec3<f32> = u_xlat31;
    let x_3656 : vec3<f32> = (vec3<f32>(x_3653, x_3653, x_3653) * x_3655);
    let x_3657 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3656.x, x_3656.y, x_3656.z, x_3657.w);
    let x_3661 : f32 = u_xlat3.x;
    u_xlat71 = (1.0f / x_3661);
    let x_3664 : f32 = u_xlat3.x;
    let x_3665 : i32 = u_xlati68;
    let x_3667 : f32 = x_3630.x_AdditionalLightsAttenuation[x_3665].x;
    u_xlat3.x = (x_3664 * x_3667);
    let x_3671 : f32 = u_xlat3.x;
    let x_3674 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3671) * x_3674) + 1.0f);
    let x_3679 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3679, 0.0f);
    let x_3683 : f32 = u_xlat3.x;
    let x_3685 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3683 * x_3685);
    let x_3689 : f32 = u_xlat3.x;
    let x_3690 : f32 = u_xlat71;
    u_xlat3.x = (x_3689 * x_3690);
    let x_3693 : i32 = u_xlati68;
    let x_3695 : vec4<f32> = x_3630.x_AdditionalLightsSpotDir[x_3693];
    let x_3697 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3695.x, x_3695.y, x_3695.z), vec3<f32>(x_3697.x, x_3697.y, x_3697.z));
    let x_3700 : f32 = u_xlat71;
    let x_3701 : i32 = u_xlati68;
    let x_3703 : f32 = x_3630.x_AdditionalLightsAttenuation[x_3701].z;
    let x_3705 : i32 = u_xlati68;
    let x_3707 : f32 = x_3630.x_AdditionalLightsAttenuation[x_3705].w;
    u_xlat71 = ((x_3700 * x_3703) + x_3707);
    let x_3709 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3709, 0.0f, 1.0f);
    let x_3711 : f32 = u_xlat71;
    let x_3712 : f32 = u_xlat71;
    u_xlat71 = (x_3711 * x_3712);
    let x_3715 : f32 = u_xlat3.x;
    let x_3716 : f32 = u_xlat71;
    u_xlat3.x = (x_3715 * x_3716);
    let x_3719 : vec2<f32> = u_xlat51;
    let x_3721 : i32 = u_xlati68;
    let x_3723 : vec4<f32> = x_3630.x_AdditionalLightsColor[x_3721];
    let x_3725 : vec3<f32> = (vec3<f32>(x_3719.x, x_3719.x, x_3719.x) * vec3<f32>(x_3723.x, x_3723.y, x_3723.z));
    let x_3726 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3725.x, x_3725.y, x_3725.z, x_3726.w);
    let x_3728 : vec4<f32> = u_xlat6;
    let x_3730 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_3728.x, x_3728.y, x_3728.z), vec3<f32>(x_3730.x, x_3730.y, x_3730.z));
    let x_3733 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3733, 0.0f, 1.0f);
    let x_3735 : f32 = u_xlat68;
    let x_3737 : f32 = u_xlat3.x;
    u_xlat68 = (x_3735 * x_3737);
    let x_3739 : f32 = u_xlat68;
    let x_3741 : vec4<f32> = u_xlat11;
    let x_3743 : vec3<f32> = (vec3<f32>(x_3739, x_3739, x_3739) * vec3<f32>(x_3741.x, x_3741.y, x_3741.z));
    let x_3744 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3743.x, x_3743.y, x_3743.z, x_3744.w);
    let x_3746 : vec3<f32> = u_xlat31;
    let x_3747 : f32 = u_xlat70;
    let x_3750 : vec3<f32> = u_xlat25;
    u_xlat31 = ((x_3746 * vec3<f32>(x_3747, x_3747, x_3747)) + x_3750);
    let x_3752 : vec3<f32> = u_xlat31;
    let x_3753 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3752, x_3753);
    let x_3755 : f32 = u_xlat68;
    u_xlat68 = max(x_3755, 1.17549435e-37f);
    let x_3757 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3757);
    let x_3759 : f32 = u_xlat68;
    let x_3761 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_3759, x_3759, x_3759) * x_3761);
    let x_3763 : vec4<f32> = u_xlat6;
    let x_3765 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(vec3<f32>(x_3763.x, x_3763.y, x_3763.z), x_3765);
    let x_3767 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3767, 0.0f, 1.0f);
    let x_3769 : vec4<f32> = u_xlat10;
    let x_3771 : vec3<f32> = u_xlat31;
    u_xlat3.x = dot(vec3<f32>(x_3769.x, x_3769.y, x_3769.z), x_3771);
    let x_3775 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3775, 0.0f, 1.0f);
    let x_3778 : f32 = u_xlat68;
    let x_3779 : f32 = u_xlat68;
    u_xlat68 = (x_3778 * x_3779);
    let x_3781 : f32 = u_xlat68;
    let x_3783 : f32 = u_xlat9.x;
    u_xlat68 = ((x_3781 * x_3783) + 1.000010014f);
    let x_3787 : f32 = u_xlat3.x;
    let x_3789 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3787 * x_3789);
    let x_3792 : f32 = u_xlat68;
    let x_3793 : f32 = u_xlat68;
    u_xlat68 = (x_3792 * x_3793);
    let x_3796 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3796, 0.100000001f);
    let x_3799 : f32 = u_xlat68;
    let x_3801 : f32 = u_xlat3.x;
    u_xlat68 = (x_3799 * x_3801);
    let x_3804 : f32 = u_xlat29.x;
    let x_3805 : f32 = u_xlat68;
    u_xlat68 = (x_3804 * x_3805);
    let x_3807 : f32 = u_xlat72;
    let x_3808 : f32 = u_xlat68;
    u_xlat68 = (x_3807 / x_3808);
    let x_3810 : f32 = u_xlat68;
    let x_3813 : vec3<f32> = u_xlat2;
    u_xlat31 = ((vec3<f32>(x_3810, x_3810, x_3810) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3813);
    let x_3815 : vec3<f32> = u_xlat31;
    let x_3816 : vec4<f32> = u_xlat11;
    let x_3819 : vec4<f32> = u_xlat8;
    let x_3821 : vec3<f32> = ((x_3815 * vec3<f32>(x_3816.x, x_3816.y, x_3816.z)) + vec3<f32>(x_3819.x, x_3819.y, x_3819.z));
    let x_3822 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3821.x, x_3821.y, x_3821.z, x_3822.w);

    continuing {
      let x_3824 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3824 + bitcast<u32>(1i));
    }
  }
  let x_3826 : vec4<f32> = u_xlat5;
  let x_3828 : vec4<f32> = u_xlat7;
  let x_3831 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_3826.x, x_3826.y, x_3826.z) * vec3<f32>(x_3828.x, x_3828.x, x_3828.x)) + vec3<f32>(x_3831.x, x_3831.y, x_3831.z));
  let x_3834 : vec4<f32> = u_xlat8;
  let x_3836 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3834.x, x_3834.y, x_3834.z) + x_3836);
  let x_3838 : vec4<f32> = vs_INTERP4;
  let x_3840 : vec3<f32> = u_xlat0;
  let x_3842 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3838.w, x_3838.w, x_3838.w) * x_3840) + x_3842);
  let x_3845 : f32 = u_xlat23.x;
  let x_3847 : f32 = u_xlat23.x;
  u_xlat66 = (x_3845 * -(x_3847));
  let x_3850 : f32 = u_xlat66;
  u_xlat66 = exp2(x_3850);
  let x_3852 : vec3<f32> = u_xlat0;
  let x_3855 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_3852 + -(vec3<f32>(x_3855.x, x_3855.y, x_3855.z)));
  let x_3861 : f32 = u_xlat66;
  let x_3863 : vec3<f32> = u_xlat0;
  let x_3866 : vec4<f32> = x_66.unity_FogColor;
  let x_3868 : vec3<f32> = ((vec3<f32>(x_3861, x_3861, x_3861) * x_3863) + vec3<f32>(x_3866.x, x_3866.y, x_3866.z));
  let x_3869 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3868.x, x_3868.y, x_3868.z, x_3869.w);
  let x_3871 : bool = u_xlatb45;
  if (x_3871) {
    let x_3876 : f32 = u_xlat1.x;
    x_3872 = x_3876;
  } else {
    x_3872 = 1.0f;
  }
  let x_3878 : f32 = x_3872;
  SV_Target0.w = x_3878;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0);
}

