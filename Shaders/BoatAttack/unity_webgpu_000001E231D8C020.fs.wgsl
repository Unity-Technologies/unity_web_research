struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_25A083BC_TexelSize : vec4<f32>,
  Texture2D_6EEDD32E_TexelSize : vec4<f32>,
  Texture2D_E9EC22CC_TexelSize : vec4<f32>,
  x_Hue : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(5) var Texture2D_25A083BC : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_25A083BC : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(1) @binding(6) var<uniform> x_190 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_E9EC22CC : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_E9EC22CC : sampler;

@group(0) @binding(6) var Texture2D_6EEDD32E : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_6EEDD32E : sampler;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_359 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_503 : MainLightShadows;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(1) @binding(4) var<uniform> x_2266 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2716 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_2828 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb1 : bool;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb21 : bool;
  var u_xlat21 : f32;
  var u_xlat42 : f32;
  var x_146 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlatb63 : bool;
  var x_211 : f32;
  var x_220 : f32;
  var u_xlat63 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlat65 : f32;
  var u_xlat4 : vec4<f32>;
  var x_487 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu63 : u32;
  var u_xlati63 : i32;
  var u_xlat64 : f32;
  var u_xlat66 : f32;
  var u_xlat23 : f32;
  var u_xlat67 : f32;
  var u_xlat68 : f32;
  var u_xlat44 : f32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb6 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : vec2<bool>;
  var u_xlatb46 : bool;
  var x_2218 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat46 : f32;
  var x_2348 : f32;
  var x_2359 : vec3<f32>;
  var u_xlatu64 : u32;
  var u_xlatb2 : vec2<bool>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu10 : u32;
  var u_xlati31 : i32;
  var u_xlati10 : i32;
  var u_xlati52 : i32;
  var u_xlat31 : vec3<f32>;
  var u_xlatb10 : bool;
  var u_xlatb53 : vec2<bool>;
  var u_xlat53 : vec2<f32>;
  var x_3147 : f32;
  var x_3160 : f32;
  var u_xlat73 : f32;
  var x_3222 : f32;
  var x_3233 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(Texture2D_25A083BC, samplerTexture2D_25A083BC, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_58 : f32 = u_xlat0.y;
  let x_61 : f32 = u_xlat0.z;
  u_xlatb1 = (x_58 >= x_61);
  let x_64 : bool = u_xlatb1;
  u_xlat1.x = select(0.0f, 1.0f, x_64);
  let x_69 : vec4<f32> = u_xlat0;
  let x_70 : vec2<f32> = vec2<f32>(x_69.z, x_69.y);
  let x_71 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_70.x, x_70.y, x_71.z, x_71.w);
  u_xlat2.z = -1.0f;
  u_xlat2.w = 0.666666687f;
  let x_78 : vec4<f32> = u_xlat0;
  let x_80 : vec4<f32> = u_xlat2;
  let x_83 : vec2<f32> = (vec2<f32>(x_78.y, x_78.z) + -(vec2<f32>(x_80.x, x_80.y)));
  let x_84 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  u_xlat3.z = 1.0f;
  u_xlat3.w = -1.0f;
  let x_88 : vec4<f32> = u_xlat1;
  let x_90 : vec4<f32> = u_xlat3;
  let x_92 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec4<f32>(x_88.x, x_88.x, x_88.x, x_88.x) * x_90) + x_92);
  let x_96 : f32 = u_xlat0.x;
  let x_98 : f32 = u_xlat1.x;
  u_xlatb21 = (x_96 >= x_98);
  let x_101 : bool = u_xlatb21;
  u_xlat21 = select(0.0f, 1.0f, x_101);
  let x_103 : vec4<f32> = u_xlat1;
  let x_104 : vec3<f32> = vec3<f32>(x_103.x, x_103.y, x_103.w);
  let x_105 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_104.x, x_104.y, x_104.z, x_105.w);
  let x_108 : f32 = u_xlat0.x;
  u_xlat2.w = x_108;
  let x_110 : vec4<f32> = u_xlat2;
  let x_111 : vec3<f32> = vec3<f32>(x_110.w, x_110.y, x_110.x);
  let x_112 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_111.x, x_111.y, x_112.z, x_111.z);
  let x_114 : vec4<f32> = u_xlat2;
  let x_116 : vec4<f32> = u_xlat1;
  u_xlat1 = (-(x_114) + x_116);
  let x_118 : f32 = u_xlat21;
  let x_120 : vec4<f32> = u_xlat1;
  let x_122 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec4<f32>(x_118, x_118, x_118, x_118) * x_120) + x_122);
  let x_125 : f32 = u_xlat1.y;
  let x_127 : f32 = u_xlat1.w;
  u_xlat0.x = min(x_125, x_127);
  let x_131 : f32 = u_xlat0.x;
  let x_134 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_131) + x_134);
  let x_138 : f32 = u_xlat0.x;
  u_xlatb21 = (x_138 == 0.0f);
  let x_142 : f32 = u_xlat1.x;
  u_xlat42 = (x_142 + 1.00000001e-10f);
  let x_145 : bool = u_xlatb21;
  if (x_145) {
    let x_150 : f32 = u_xlat1.x;
    x_146 = x_150;
  } else {
    let x_152 : f32 = u_xlat42;
    x_146 = x_152;
  }
  let x_153 : f32 = x_146;
  u_xlat21 = x_153;
  let x_155 : f32 = u_xlat1.y;
  let x_158 : f32 = u_xlat1.w;
  u_xlat1.x = (-(x_155) + x_158);
  let x_164 : f32 = u_xlat0.x;
  u_xlat22.x = ((x_164 * 6.0f) + 1.00000001e-10f);
  let x_170 : f32 = u_xlat1.x;
  let x_172 : f32 = u_xlat22.x;
  u_xlat1.x = (x_170 / x_172);
  let x_176 : f32 = u_xlat1.x;
  let x_178 : f32 = u_xlat1.z;
  u_xlat1.x = (x_176 + x_178);
  let x_182 : f32 = u_xlat0.x;
  let x_183 : f32 = u_xlat42;
  u_xlat0.x = (x_182 / x_183);
  let x_187 : f32 = u_xlat0.w;
  let x_193 : f32 = x_190.x_Hue;
  let x_196 : f32 = u_xlat1.x;
  u_xlat42 = ((x_187 * x_193) + abs(x_196));
  let x_200 : f32 = u_xlat42;
  u_xlatb63 = (x_200 < 0.0f);
  let x_202 : f32 = u_xlat42;
  u_xlatb1 = (1.0f < x_202);
  let x_204 : f32 = u_xlat42;
  let x_207 : vec2<f32> = (vec2<f32>(x_204, x_204) + vec2<f32>(1.0f, -1.0f));
  let x_208 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_207.x, x_207.y, x_208.z);
  let x_210 : bool = u_xlatb1;
  if (x_210) {
    let x_215 : f32 = u_xlat22.y;
    x_211 = x_215;
  } else {
    let x_217 : f32 = u_xlat42;
    x_211 = x_217;
  }
  let x_218 : f32 = x_211;
  u_xlat42 = x_218;
  let x_219 : bool = u_xlatb63;
  if (x_219) {
    let x_224 : f32 = u_xlat22.x;
    x_220 = x_224;
  } else {
    let x_226 : f32 = u_xlat42;
    x_220 = x_226;
  }
  let x_227 : f32 = x_220;
  u_xlat42 = x_227;
  let x_228 : f32 = u_xlat42;
  let x_232 : vec3<f32> = (vec3<f32>(x_228, x_228, x_228) + vec3<f32>(1.0f, 0.666666687f, 0.333333343f));
  let x_233 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_232.x, x_232.y, x_232.z, x_233.w);
  let x_235 : vec4<f32> = u_xlat1;
  let x_237 : vec3<f32> = fract(vec3<f32>(x_235.x, x_235.y, x_235.z));
  let x_238 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_237.x, x_237.y, x_237.z, x_238.w);
  let x_240 : vec4<f32> = u_xlat1;
  let x_246 : vec3<f32> = ((vec3<f32>(x_240.x, x_240.y, x_240.z) * vec3<f32>(6.0f, 6.0f, 6.0f)) + vec3<f32>(-3.0f, -3.0f, -3.0f));
  let x_247 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_249 : vec4<f32> = u_xlat1;
  let x_253 : vec3<f32> = (abs(vec3<f32>(x_249.x, x_249.y, x_249.z)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_254 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_253.x, x_253.y, x_253.z, x_254.w);
  let x_256 : vec4<f32> = u_xlat1;
  let x_260 : vec3<f32> = clamp(vec3<f32>(x_256.x, x_256.y, x_256.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_261 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec4<f32> = u_xlat1;
  let x_265 : vec3<f32> = (vec3<f32>(x_263.x, x_263.y, x_263.z) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_266 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_265.x, x_265.y, x_265.z, x_266.w);
  let x_268 : vec4<f32> = u_xlat0;
  let x_270 : vec4<f32> = u_xlat1;
  let x_274 : vec3<f32> = ((vec3<f32>(x_268.x, x_268.x, x_268.x) * vec3<f32>(x_270.x, x_270.y, x_270.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_275 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_274.x, x_275.y, x_274.y, x_274.z);
  let x_277 : vec4<f32> = u_xlat0;
  let x_279 : f32 = u_xlat21;
  let x_281 : vec3<f32> = (vec3<f32>(x_277.x, x_277.z, x_277.w) * vec3<f32>(x_279, x_279, x_279));
  let x_282 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_284 : vec4<f32> = u_xlat0;
  let x_288 : vec3<f32> = clamp(vec3<f32>(x_284.x, x_284.y, x_284.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_289 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_288.x, x_288.y, x_288.z, x_289.w);
  let x_296 : vec4<f32> = vs_INTERP3;
  let x_299 : f32 = x_44.x_GlobalMipBias.x;
  let x_300 : vec4<f32> = textureSampleBias(Texture2D_E9EC22CC, samplerTexture2D_E9EC22CC, vec2<f32>(x_296.x, x_296.y), x_299);
  let x_301 : vec3<f32> = vec3<f32>(x_300.x, x_300.y, x_300.w);
  let x_302 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_301.x, x_301.y, x_301.z, x_302.w);
  let x_305 : f32 = u_xlat1.x;
  let x_307 : f32 = u_xlat1.z;
  u_xlat1.x = (x_305 * x_307);
  let x_310 : vec4<f32> = u_xlat1;
  let x_316 : vec2<f32> = ((vec2<f32>(x_310.x, x_310.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_317 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_316.x, x_316.y, x_317.z, x_317.w);
  let x_320 : vec4<f32> = u_xlat1;
  let x_322 : vec4<f32> = u_xlat1;
  u_xlat63 = dot(vec2<f32>(x_320.x, x_320.y), vec2<f32>(x_322.x, x_322.y));
  let x_325 : f32 = u_xlat63;
  u_xlat63 = min(x_325, 1.0f);
  let x_327 : f32 = u_xlat63;
  u_xlat63 = (-(x_327) + 1.0f);
  let x_330 : f32 = u_xlat63;
  u_xlat63 = sqrt(x_330);
  let x_332 : f32 = u_xlat63;
  u_xlat63 = max(x_332, 1.00000002e-16f);
  let x_340 : vec4<f32> = vs_INTERP3;
  let x_343 : f32 = x_44.x_GlobalMipBias.x;
  let x_344 : vec4<f32> = textureSampleBias(Texture2D_6EEDD32E, samplerTexture2D_6EEDD32E, vec2<f32>(x_340.x, x_340.y), x_343);
  let x_345 : vec3<f32> = vec3<f32>(x_344.x, x_344.w, x_344.y);
  let x_346 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_345.x, x_345.y, x_345.z, x_346.w);
  let x_353 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_353);
  let x_361 : f32 = x_359.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_361 >= 0.0f);
  let x_367 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_367);
  let x_371 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_371);
  let x_375 : f32 = u_xlat43.y;
  let x_377 : f32 = u_xlat43.x;
  u_xlat43.x = (x_375 * x_377);
  let x_382 : vec3<f32> = vs_INTERP1;
  let x_384 : vec4<f32> = vs_INTERP2;
  let x_386 : vec3<f32> = (vec3<f32>(x_382.z, x_382.x, x_382.y) * vec3<f32>(x_384.y, x_384.z, x_384.x));
  let x_387 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_389 : vec3<f32> = vs_INTERP1;
  let x_391 : vec4<f32> = vs_INTERP2;
  let x_394 : vec4<f32> = u_xlat3;
  let x_397 : vec3<f32> = ((vec3<f32>(x_389.y, x_389.z, x_389.x) * vec3<f32>(x_391.z, x_391.x, x_391.y)) + -(vec3<f32>(x_394.x, x_394.y, x_394.z)));
  let x_398 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_397.x, x_397.y, x_397.z, x_398.w);
  let x_400 : vec2<f32> = u_xlat43;
  let x_402 : vec4<f32> = u_xlat3;
  let x_404 : vec3<f32> = (vec3<f32>(x_400.x, x_400.x, x_400.x) * vec3<f32>(x_402.x, x_402.y, x_402.z));
  let x_405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_407 : vec4<f32> = u_xlat1;
  let x_409 : vec4<f32> = u_xlat3;
  u_xlat22 = (vec3<f32>(x_407.y, x_407.y, x_407.y) * vec3<f32>(x_409.x, x_409.y, x_409.z));
  let x_412 : vec4<f32> = u_xlat1;
  let x_414 : vec4<f32> = vs_INTERP2;
  let x_417 : vec3<f32> = u_xlat22;
  let x_418 : vec3<f32> = ((vec3<f32>(x_412.x, x_412.x, x_412.x) * vec3<f32>(x_414.x, x_414.y, x_414.z)) + x_417);
  let x_419 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_418.x, x_418.y, x_418.z, x_419.w);
  let x_421 : f32 = u_xlat63;
  let x_423 : vec3<f32> = vs_INTERP1;
  let x_425 : vec4<f32> = u_xlat1;
  let x_427 : vec3<f32> = ((vec3<f32>(x_421, x_421, x_421) * x_423) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat1;
  let x_432 : vec4<f32> = u_xlat1;
  u_xlat63 = dot(vec3<f32>(x_430.x, x_430.y, x_430.z), vec3<f32>(x_432.x, x_432.y, x_432.z));
  let x_435 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_435);
  let x_437 : f32 = u_xlat63;
  let x_439 : vec4<f32> = u_xlat1;
  let x_441 : vec3<f32> = (vec3<f32>(x_437, x_437, x_437) * vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_446 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb63 = (x_446 == 0.0f);
  let x_449 : vec3<f32> = vs_INTERP0;
  let x_454 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_455 : vec3<f32> = (-(x_449) + x_454);
  let x_456 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_455.x, x_455.y, x_455.z, x_456.w);
  let x_459 : vec4<f32> = u_xlat3;
  let x_461 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_459.x, x_459.y, x_459.z), vec3<f32>(x_461.x, x_461.y, x_461.z));
  let x_464 : f32 = u_xlat65;
  u_xlat65 = inverseSqrt(x_464);
  let x_466 : f32 = u_xlat65;
  let x_468 : vec4<f32> = u_xlat3;
  let x_470 : vec3<f32> = (vec3<f32>(x_466, x_466, x_466) * vec3<f32>(x_468.x, x_468.y, x_468.z));
  let x_471 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_470.x, x_470.y, x_470.z, x_471.w);
  let x_477 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_477;
  let x_480 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_480;
  let x_484 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_484;
  let x_486 : bool = u_xlatb63;
  if (x_486) {
    let x_490 : vec4<f32> = u_xlat3;
    x_487 = vec3<f32>(x_490.x, x_490.y, x_490.z);
  } else {
    let x_493 : vec4<f32> = u_xlat4;
    x_487 = vec3<f32>(x_493.x, x_493.y, x_493.z);
  }
  let x_495 : vec3<f32> = x_487;
  let x_496 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_495.x, x_495.y, x_495.z, x_496.w);
  let x_498 : vec3<f32> = vs_INTERP0;
  let x_506 : vec4<f32> = x_503.x_CascadeShadowSplitSpheres0;
  let x_509 : vec3<f32> = (x_498 + -(vec3<f32>(x_506.x, x_506.y, x_506.z)));
  let x_510 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_509.x, x_509.y, x_509.z, x_510.w);
  let x_513 : vec3<f32> = vs_INTERP0;
  let x_515 : vec4<f32> = x_503.x_CascadeShadowSplitSpheres1;
  let x_518 : vec3<f32> = (x_513 + -(vec3<f32>(x_515.x, x_515.y, x_515.z)));
  let x_519 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_518.x, x_518.y, x_518.z, x_519.w);
  let x_522 : vec3<f32> = vs_INTERP0;
  let x_524 : vec4<f32> = x_503.x_CascadeShadowSplitSpheres2;
  let x_527 : vec3<f32> = (x_522 + -(vec3<f32>(x_524.x, x_524.y, x_524.z)));
  let x_528 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_527.x, x_527.y, x_527.z, x_528.w);
  let x_531 : vec3<f32> = vs_INTERP0;
  let x_534 : vec4<f32> = x_503.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_531 + -(vec3<f32>(x_534.x, x_534.y, x_534.z)));
  let x_538 : vec4<f32> = u_xlat4;
  let x_540 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_538.x, x_538.y, x_538.z), vec3<f32>(x_540.x, x_540.y, x_540.z));
  let x_544 : vec4<f32> = u_xlat5;
  let x_546 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_544.x, x_544.y, x_544.z), vec3<f32>(x_546.x, x_546.y, x_546.z));
  let x_550 : vec4<f32> = u_xlat6;
  let x_552 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_550.x, x_550.y, x_550.z), vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_556 : vec3<f32> = u_xlat7;
  let x_557 : vec3<f32> = u_xlat7;
  u_xlat4.w = dot(x_556, x_557);
  let x_563 : vec4<f32> = u_xlat4;
  let x_566 : vec4<f32> = x_503.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_563 < x_566);
  let x_569 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_569);
  let x_573 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_573);
  let x_577 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_577);
  let x_581 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_581);
  let x_585 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_585);
  let x_590 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_590);
  let x_594 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_594);
  let x_597 : vec4<f32> = u_xlat4;
  let x_599 : vec4<f32> = u_xlat5;
  let x_601 : vec3<f32> = (vec3<f32>(x_597.x, x_597.y, x_597.z) + vec3<f32>(x_599.y, x_599.z, x_599.w));
  let x_602 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_601.x, x_601.y, x_601.z, x_602.w);
  let x_604 : vec4<f32> = u_xlat4;
  let x_607 : vec3<f32> = max(vec3<f32>(x_604.x, x_604.y, x_604.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_608 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_608.x, x_607.x, x_607.y, x_607.z);
  let x_610 : vec4<f32> = u_xlat5;
  u_xlat63 = dot(x_610, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_615 : f32 = u_xlat63;
  u_xlat63 = (-(x_615) + 4.0f);
  let x_620 : f32 = u_xlat63;
  u_xlatu63 = u32(x_620);
  let x_624 : u32 = u_xlatu63;
  u_xlati63 = (bitcast<i32>(x_624) << bitcast<u32>(2i));
  let x_627 : vec3<f32> = vs_INTERP0;
  let x_629 : i32 = u_xlati63;
  let x_632 : i32 = u_xlati63;
  let x_636 : vec4<f32> = x_503.x_MainLightWorldToShadow[((x_629 + 1i) / 4i)][((x_632 + 1i) % 4i)];
  let x_638 : vec3<f32> = (vec3<f32>(x_627.y, x_627.y, x_627.y) * vec3<f32>(x_636.x, x_636.y, x_636.z));
  let x_639 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_638.x, x_638.y, x_638.z, x_639.w);
  let x_641 : i32 = u_xlati63;
  let x_643 : i32 = u_xlati63;
  let x_646 : vec4<f32> = x_503.x_MainLightWorldToShadow[(x_641 / 4i)][(x_643 % 4i)];
  let x_648 : vec3<f32> = vs_INTERP0;
  let x_651 : vec4<f32> = u_xlat4;
  let x_653 : vec3<f32> = ((vec3<f32>(x_646.x, x_646.y, x_646.z) * vec3<f32>(x_648.x, x_648.x, x_648.x)) + vec3<f32>(x_651.x, x_651.y, x_651.z));
  let x_654 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_653.x, x_653.y, x_653.z, x_654.w);
  let x_656 : i32 = u_xlati63;
  let x_659 : i32 = u_xlati63;
  let x_663 : vec4<f32> = x_503.x_MainLightWorldToShadow[((x_656 + 2i) / 4i)][((x_659 + 2i) % 4i)];
  let x_665 : vec3<f32> = vs_INTERP0;
  let x_668 : vec4<f32> = u_xlat4;
  let x_670 : vec3<f32> = ((vec3<f32>(x_663.x, x_663.y, x_663.z) * vec3<f32>(x_665.z, x_665.z, x_665.z)) + vec3<f32>(x_668.x, x_668.y, x_668.z));
  let x_671 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_670.x, x_670.y, x_670.z, x_671.w);
  let x_673 : vec4<f32> = u_xlat4;
  let x_675 : i32 = u_xlati63;
  let x_678 : i32 = u_xlati63;
  let x_682 : vec4<f32> = x_503.x_MainLightWorldToShadow[((x_675 + 3i) / 4i)][((x_678 + 3i) % 4i)];
  let x_684 : vec3<f32> = (vec3<f32>(x_673.x, x_673.y, x_673.z) + vec3<f32>(x_682.x, x_682.y, x_682.z));
  let x_685 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_684.x, x_684.y, x_684.z, x_685.w);
  let x_688 : f32 = vs_INTERP0.y;
  let x_690 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat63 = (x_688 * x_690);
  let x_693 : f32 = x_44.unity_MatrixV[0i].z;
  let x_695 : f32 = vs_INTERP0.x;
  let x_697 : f32 = u_xlat63;
  u_xlat63 = ((x_693 * x_695) + x_697);
  let x_700 : f32 = x_44.unity_MatrixV[2i].z;
  let x_702 : f32 = vs_INTERP0.z;
  let x_704 : f32 = u_xlat63;
  u_xlat63 = ((x_700 * x_702) + x_704);
  let x_706 : f32 = u_xlat63;
  let x_708 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat63 = (x_706 + x_708);
  let x_710 : f32 = u_xlat63;
  let x_714 : f32 = x_44.x_ProjectionParams.y;
  u_xlat63 = (-(x_710) + -(x_714));
  let x_717 : f32 = u_xlat63;
  u_xlat63 = max(x_717, 0.0f);
  let x_719 : f32 = u_xlat63;
  let x_722 : f32 = x_44.unity_FogParams.x;
  u_xlat63 = (x_719 * x_722);
  u_xlat1.w = 1.0f;
  let x_727 : vec4<f32> = x_359.unity_SHAr;
  let x_728 : vec4<f32> = u_xlat1;
  u_xlat5.x = dot(x_727, x_728);
  let x_733 : vec4<f32> = x_359.unity_SHAg;
  let x_734 : vec4<f32> = u_xlat1;
  u_xlat5.y = dot(x_733, x_734);
  let x_739 : vec4<f32> = x_359.unity_SHAb;
  let x_740 : vec4<f32> = u_xlat1;
  u_xlat5.z = dot(x_739, x_740);
  let x_743 : vec4<f32> = u_xlat1;
  let x_745 : vec4<f32> = u_xlat1;
  u_xlat6 = (vec4<f32>(x_743.y, x_743.z, x_743.z, x_743.x) * vec4<f32>(x_745.x, x_745.y, x_745.z, x_745.z));
  let x_750 : vec4<f32> = x_359.unity_SHBr;
  let x_751 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_750, x_751);
  let x_756 : vec4<f32> = x_359.unity_SHBg;
  let x_757 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_756, x_757);
  let x_762 : vec4<f32> = x_359.unity_SHBb;
  let x_763 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_762, x_763);
  let x_768 : f32 = u_xlat1.y;
  let x_770 : f32 = u_xlat1.y;
  u_xlat64 = (x_768 * x_770);
  let x_773 : f32 = u_xlat1.x;
  let x_775 : f32 = u_xlat1.x;
  let x_777 : f32 = u_xlat64;
  u_xlat64 = ((x_773 * x_775) + -(x_777));
  let x_782 : vec4<f32> = x_359.unity_SHC;
  let x_784 : f32 = u_xlat64;
  let x_787 : vec3<f32> = u_xlat7;
  let x_788 : vec3<f32> = ((vec3<f32>(x_782.x, x_782.y, x_782.z) * vec3<f32>(x_784, x_784, x_784)) + x_787);
  let x_789 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_788.x, x_788.y, x_788.z, x_789.w);
  let x_791 : vec4<f32> = u_xlat5;
  let x_793 : vec4<f32> = u_xlat6;
  let x_795 : vec3<f32> = (vec3<f32>(x_791.x, x_791.y, x_791.z) + vec3<f32>(x_793.x, x_793.y, x_793.z));
  let x_796 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_795.x, x_795.y, x_795.z, x_796.w);
  let x_798 : vec4<f32> = u_xlat5;
  let x_800 : vec3<f32> = max(vec3<f32>(x_798.x, x_798.y, x_798.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_801 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_800.x, x_800.y, x_800.z, x_801.w);
  let x_805 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_806 : vec2<f32> = vec2<f32>(x_805.x, x_805.y);
  let x_810 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_806.x, x_806.y));
  let x_811 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_810.x, x_810.y, x_811.z, x_811.w);
  let x_813 : vec4<f32> = u_xlat6;
  let x_815 : vec4<f32> = hlslcc_FragCoord;
  let x_817 : vec2<f32> = (vec2<f32>(x_813.x, x_813.y) * vec2<f32>(x_815.x, x_815.y));
  let x_818 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_817.x, x_817.y, x_818.z, x_818.w);
  let x_821 : f32 = u_xlat6.y;
  let x_824 : f32 = x_44.x_ScaleBiasRt.x;
  let x_827 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat64 = ((x_821 * x_824) + x_827);
  let x_829 : f32 = u_xlat64;
  u_xlat6.z = (-(x_829) + 1.0f);
  let x_833 : vec4<f32> = u_xlat2;
  let x_834 : vec2<f32> = vec2<f32>(x_833.x, x_833.y);
  let x_835 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_834.x, x_834.y, x_835.z, x_835.w);
  let x_837 : vec4<f32> = u_xlat2;
  let x_841 : vec2<f32> = clamp(vec2<f32>(x_837.x, x_837.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_842 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_841.x, x_841.y, x_842.z, x_842.w);
  let x_845 : f32 = u_xlat2.x;
  u_xlat64 = ((-(x_845) * 0.959999979f) + 0.959999979f);
  let x_850 : f32 = u_xlat64;
  u_xlat65 = (-(x_850) + 1.0f);
  let x_853 : vec4<f32> = u_xlat0;
  let x_855 : f32 = u_xlat64;
  u_xlat7 = (vec3<f32>(x_853.x, x_853.y, x_853.z) * vec3<f32>(x_855, x_855, x_855));
  let x_858 : vec4<f32> = u_xlat0;
  let x_862 : vec3<f32> = (vec3<f32>(x_858.x, x_858.y, x_858.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_863 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_862.x, x_862.y, x_862.z, x_863.w);
  let x_865 : vec4<f32> = u_xlat2;
  let x_867 : vec4<f32> = u_xlat0;
  let x_872 : vec3<f32> = ((vec3<f32>(x_865.x, x_865.x, x_865.x) * vec3<f32>(x_867.x, x_867.y, x_867.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_873 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_872.x, x_872.y, x_872.z, x_873.w);
  let x_876 : f32 = u_xlat2.y;
  u_xlat64 = (-(x_876) + 1.0f);
  let x_879 : f32 = u_xlat64;
  let x_880 : f32 = u_xlat64;
  u_xlat2.x = (x_879 * x_880);
  let x_884 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_884, 0.0078125f);
  let x_890 : f32 = u_xlat2.x;
  let x_892 : f32 = u_xlat2.x;
  u_xlat66 = (x_890 * x_892);
  let x_895 : f32 = u_xlat65;
  let x_897 : f32 = u_xlat2.y;
  u_xlat23 = (x_895 + x_897);
  let x_899 : f32 = u_xlat23;
  u_xlat23 = min(x_899, 1.0f);
  let x_902 : f32 = u_xlat2.x;
  u_xlat65 = ((x_902 * 4.0f) + 2.0f);
  let x_911 : vec4<f32> = u_xlat6;
  let x_914 : f32 = x_44.x_GlobalMipBias.x;
  let x_915 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_911.x, x_911.z), x_914);
  u_xlat67 = x_915.x;
  let x_918 : f32 = u_xlat67;
  u_xlat68 = (x_918 + -1.0f);
  let x_921 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_922 : f32 = u_xlat68;
  u_xlat68 = ((x_921 * x_922) + 1.0f);
  let x_927 : f32 = u_xlat2.z;
  let x_928 : f32 = u_xlat67;
  u_xlat44 = min(x_927, x_928);
  let x_932 : f32 = x_503.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_932);
  let x_934 : bool = u_xlatb67;
  if (x_934) {
    let x_938 : f32 = x_503.x_MainLightShadowParams.y;
    u_xlatb67 = (x_938 == 1.0f);
    let x_940 : bool = u_xlatb67;
    if (x_940) {
      let x_943 : vec4<f32> = u_xlat4;
      let x_946 : vec4<f32> = x_503.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_943.x, x_943.y, x_943.x, x_943.y) + x_946);
      let x_949 : vec4<f32> = u_xlat6;
      let x_950 : vec2<f32> = vec2<f32>(x_949.x, x_949.y);
      let x_952 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_950.x, x_950.y, x_952);
      let x_965 : vec3<f32> = txVec0;
      let x_967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_965.xy, x_965.z);
      u_xlat8.x = x_967;
      let x_970 : vec4<f32> = u_xlat6;
      let x_971 : vec2<f32> = vec2<f32>(x_970.z, x_970.w);
      let x_973 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_971.x, x_971.y, x_973);
      let x_980 : vec3<f32> = txVec1;
      let x_982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_980.xy, x_980.z);
      u_xlat8.y = x_982;
      let x_984 : vec4<f32> = u_xlat4;
      let x_987 : vec4<f32> = x_503.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) + x_987);
      let x_990 : vec4<f32> = u_xlat6;
      let x_991 : vec2<f32> = vec2<f32>(x_990.x, x_990.y);
      let x_993 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_991.x, x_991.y, x_993);
      let x_1000 : vec3<f32> = txVec2;
      let x_1002 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1000.xy, x_1000.z);
      u_xlat8.z = x_1002;
      let x_1005 : vec4<f32> = u_xlat6;
      let x_1006 : vec2<f32> = vec2<f32>(x_1005.z, x_1005.w);
      let x_1008 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_1006.x, x_1006.y, x_1008);
      let x_1015 : vec3<f32> = txVec3;
      let x_1017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1015.xy, x_1015.z);
      u_xlat8.w = x_1017;
      let x_1019 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_1019, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1026 : f32 = x_503.x_MainLightShadowParams.y;
      u_xlatb6 = (x_1026 == 2.0f);
      let x_1028 : bool = u_xlatb6;
      if (x_1028) {
        let x_1031 : vec4<f32> = u_xlat4;
        let x_1034 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1039 : vec2<f32> = ((vec2<f32>(x_1031.x, x_1031.y) * vec2<f32>(x_1034.z, x_1034.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1040 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
        let x_1042 : vec4<f32> = u_xlat6;
        let x_1044 : vec2<f32> = floor(vec2<f32>(x_1042.x, x_1042.y));
        let x_1045 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1044.x, x_1044.y, x_1045.z, x_1045.w);
        let x_1048 : vec4<f32> = u_xlat4;
        let x_1051 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1054 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1048.x, x_1048.y) * vec2<f32>(x_1051.z, x_1051.w)) + -(vec2<f32>(x_1054.x, x_1054.y)));
        let x_1058 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1058.x, x_1058.x, x_1058.y, x_1058.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1063 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1063.x, x_1063.x, x_1063.z, x_1063.z) * vec4<f32>(x_1065.x, x_1065.x, x_1065.z, x_1065.z));
        let x_1068 : vec4<f32> = u_xlat9;
        let x_1072 : vec2<f32> = (vec2<f32>(x_1068.y, x_1068.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1073 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1072.x, x_1073.y, x_1072.y, x_1073.w);
        let x_1075 : vec4<f32> = u_xlat9;
        let x_1078 : vec2<f32> = u_xlat48;
        let x_1080 : vec2<f32> = ((vec2<f32>(x_1075.x, x_1075.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1078));
        let x_1081 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1080.x, x_1080.y, x_1081.z, x_1081.w);
        let x_1084 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_1084) + vec2<f32>(1.0f, 1.0f));
        let x_1088 : vec2<f32> = u_xlat48;
        let x_1090 : vec2<f32> = min(x_1088, vec2<f32>(0.0f, 0.0f));
        let x_1091 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1090.x, x_1090.y, x_1091.z, x_1091.w);
        let x_1093 : vec4<f32> = u_xlat10;
        let x_1096 : vec4<f32> = u_xlat10;
        let x_1099 : vec2<f32> = u_xlat51;
        let x_1100 : vec2<f32> = ((-(vec2<f32>(x_1093.x, x_1093.y)) * vec2<f32>(x_1096.x, x_1096.y)) + x_1099);
        let x_1101 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1100.x, x_1100.y, x_1101.z, x_1101.w);
        let x_1103 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_1103, vec2<f32>(0.0f, 0.0f));
        let x_1105 : vec2<f32> = u_xlat48;
        let x_1107 : vec2<f32> = u_xlat48;
        let x_1109 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_1105) * x_1107) + vec2<f32>(x_1109.y, x_1109.w));
        let x_1112 : vec4<f32> = u_xlat10;
        let x_1114 : vec2<f32> = (vec2<f32>(x_1112.x, x_1112.y) + vec2<f32>(1.0f, 1.0f));
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1114.x, x_1114.y, x_1115.z, x_1115.w);
        let x_1117 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_1117 + vec2<f32>(1.0f, 1.0f));
        let x_1120 : vec4<f32> = u_xlat9;
        let x_1124 : vec2<f32> = (vec2<f32>(x_1120.x, x_1120.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1125 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1124.x, x_1124.y, x_1125.z, x_1125.w);
        let x_1127 : vec2<f32> = u_xlat51;
        let x_1128 : vec2<f32> = (x_1127 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1129 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1128.x, x_1128.y, x_1129.z, x_1129.w);
        let x_1131 : vec4<f32> = u_xlat10;
        let x_1133 : vec2<f32> = (vec2<f32>(x_1131.x, x_1131.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1134 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1133.x, x_1133.y, x_1134.z, x_1134.w);
        let x_1137 : vec2<f32> = u_xlat48;
        let x_1138 : vec2<f32> = (x_1137 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1139 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1138.x, x_1138.y, x_1139.z, x_1139.w);
        let x_1141 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_1141.y, x_1141.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1145 : f32 = u_xlat10.x;
        u_xlat11.z = x_1145;
        let x_1148 : f32 = u_xlat48.x;
        u_xlat11.w = x_1148;
        let x_1151 : f32 = u_xlat12.x;
        u_xlat9.z = x_1151;
        let x_1154 : f32 = u_xlat8.x;
        u_xlat9.w = x_1154;
        let x_1157 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1157.z, x_1157.w, x_1157.x, x_1157.z) + vec4<f32>(x_1159.z, x_1159.w, x_1159.x, x_1159.z));
        let x_1163 : f32 = u_xlat11.y;
        u_xlat10.z = x_1163;
        let x_1166 : f32 = u_xlat48.y;
        u_xlat10.w = x_1166;
        let x_1169 : f32 = u_xlat9.y;
        u_xlat12.z = x_1169;
        let x_1172 : f32 = u_xlat8.z;
        u_xlat12.w = x_1172;
        let x_1174 : vec4<f32> = u_xlat10;
        let x_1176 : vec4<f32> = u_xlat12;
        let x_1178 : vec3<f32> = (vec3<f32>(x_1174.z, x_1174.y, x_1174.w) + vec3<f32>(x_1176.z, x_1176.y, x_1176.w));
        let x_1179 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1178.x, x_1178.y, x_1178.z, x_1179.w);
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1183 : vec4<f32> = u_xlat13;
        let x_1185 : vec3<f32> = (vec3<f32>(x_1181.x, x_1181.z, x_1181.w) / vec3<f32>(x_1183.z, x_1183.w, x_1183.y));
        let x_1186 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1185.x, x_1185.y, x_1185.z, x_1186.w);
        let x_1188 : vec4<f32> = u_xlat9;
        let x_1194 : vec3<f32> = (vec3<f32>(x_1188.x, x_1188.y, x_1188.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1195 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1194.x, x_1194.y, x_1194.z, x_1195.w);
        let x_1197 : vec4<f32> = u_xlat12;
        let x_1199 : vec4<f32> = u_xlat8;
        let x_1201 : vec3<f32> = (vec3<f32>(x_1197.z, x_1197.y, x_1197.w) / vec3<f32>(x_1199.x, x_1199.y, x_1199.z));
        let x_1202 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1201.x, x_1201.y, x_1201.z, x_1202.w);
        let x_1204 : vec4<f32> = u_xlat10;
        let x_1206 : vec3<f32> = (vec3<f32>(x_1204.x, x_1204.y, x_1204.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1207 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1206.x, x_1206.y, x_1206.z, x_1207.w);
        let x_1209 : vec4<f32> = u_xlat9;
        let x_1212 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1214 : vec3<f32> = (vec3<f32>(x_1209.y, x_1209.x, x_1209.z) * vec3<f32>(x_1212.x, x_1212.x, x_1212.x));
        let x_1215 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1214.x, x_1214.y, x_1214.z, x_1215.w);
        let x_1217 : vec4<f32> = u_xlat10;
        let x_1220 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1222 : vec3<f32> = (vec3<f32>(x_1217.x, x_1217.y, x_1217.z) * vec3<f32>(x_1220.y, x_1220.y, x_1220.y));
        let x_1223 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1222.x, x_1222.y, x_1222.z, x_1223.w);
        let x_1226 : f32 = u_xlat10.x;
        u_xlat9.w = x_1226;
        let x_1228 : vec4<f32> = u_xlat6;
        let x_1231 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1234 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1228.x, x_1228.y, x_1228.x, x_1228.y) * vec4<f32>(x_1231.x, x_1231.y, x_1231.x, x_1231.y)) + vec4<f32>(x_1234.y, x_1234.w, x_1234.x, x_1234.w));
        let x_1237 : vec4<f32> = u_xlat6;
        let x_1240 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1237.x, x_1237.y) * vec2<f32>(x_1240.x, x_1240.y)) + vec2<f32>(x_1243.z, x_1243.w));
        let x_1247 : f32 = u_xlat9.y;
        u_xlat10.w = x_1247;
        let x_1249 : vec4<f32> = u_xlat10;
        let x_1250 : vec2<f32> = vec2<f32>(x_1249.y, x_1249.z);
        let x_1251 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1251.x, x_1250.x, x_1251.z, x_1250.y);
        let x_1253 : vec4<f32> = u_xlat6;
        let x_1256 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1259 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1253.x, x_1253.y, x_1253.x, x_1253.y) * vec4<f32>(x_1256.x, x_1256.y, x_1256.x, x_1256.y)) + vec4<f32>(x_1259.x, x_1259.y, x_1259.z, x_1259.y));
        let x_1262 : vec4<f32> = u_xlat6;
        let x_1265 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1268 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1262.x, x_1262.y, x_1262.x, x_1262.y) * vec4<f32>(x_1265.x, x_1265.y, x_1265.x, x_1265.y)) + vec4<f32>(x_1268.w, x_1268.y, x_1268.w, x_1268.z));
        let x_1271 : vec4<f32> = u_xlat6;
        let x_1274 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1277 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1271.x, x_1271.y, x_1271.x, x_1271.y) * vec4<f32>(x_1274.x, x_1274.y, x_1274.x, x_1274.y)) + vec4<f32>(x_1277.x, x_1277.w, x_1277.z, x_1277.w));
        let x_1281 : vec4<f32> = u_xlat8;
        let x_1283 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1281.x, x_1281.x, x_1281.x, x_1281.y) * vec4<f32>(x_1283.z, x_1283.w, x_1283.y, x_1283.z));
        let x_1287 : vec4<f32> = u_xlat8;
        let x_1289 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1287.y, x_1287.y, x_1287.z, x_1287.z) * x_1289);
        let x_1292 : f32 = u_xlat8.z;
        let x_1294 : f32 = u_xlat13.y;
        u_xlat6.x = (x_1292 * x_1294);
        let x_1298 : vec4<f32> = u_xlat11;
        let x_1299 : vec2<f32> = vec2<f32>(x_1298.x, x_1298.y);
        let x_1301 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_1299.x, x_1299.y, x_1301);
        let x_1309 : vec3<f32> = txVec4;
        let x_1311 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1309.xy, x_1309.z);
        u_xlat27 = x_1311;
        let x_1313 : vec4<f32> = u_xlat11;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.z, x_1313.w);
        let x_1316 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1324 : vec3<f32> = txVec5;
        let x_1326 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1324.xy, x_1324.z);
        u_xlat70 = x_1326;
        let x_1327 : f32 = u_xlat70;
        let x_1329 : f32 = u_xlat14.y;
        u_xlat70 = (x_1327 * x_1329);
        let x_1332 : f32 = u_xlat14.x;
        let x_1333 : f32 = u_xlat27;
        let x_1335 : f32 = u_xlat70;
        u_xlat27 = ((x_1332 * x_1333) + x_1335);
        let x_1338 : vec2<f32> = u_xlat48;
        let x_1340 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_1338.x, x_1338.y, x_1340);
        let x_1347 : vec3<f32> = txVec6;
        let x_1349 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1347.xy, x_1347.z);
        u_xlat48.x = x_1349;
        let x_1352 : f32 = u_xlat14.z;
        let x_1354 : f32 = u_xlat48.x;
        let x_1356 : f32 = u_xlat27;
        u_xlat27 = ((x_1352 * x_1354) + x_1356);
        let x_1359 : vec4<f32> = u_xlat10;
        let x_1360 : vec2<f32> = vec2<f32>(x_1359.x, x_1359.y);
        let x_1362 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_1360.x, x_1360.y, x_1362);
        let x_1369 : vec3<f32> = txVec7;
        let x_1371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1369.xy, x_1369.z);
        u_xlat48.x = x_1371;
        let x_1374 : f32 = u_xlat14.w;
        let x_1376 : f32 = u_xlat48.x;
        let x_1378 : f32 = u_xlat27;
        u_xlat27 = ((x_1374 * x_1376) + x_1378);
        let x_1381 : vec4<f32> = u_xlat12;
        let x_1382 : vec2<f32> = vec2<f32>(x_1381.x, x_1381.y);
        let x_1384 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_1382.x, x_1382.y, x_1384);
        let x_1391 : vec3<f32> = txVec8;
        let x_1393 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1391.xy, x_1391.z);
        u_xlat48.x = x_1393;
        let x_1396 : f32 = u_xlat15.x;
        let x_1398 : f32 = u_xlat48.x;
        let x_1400 : f32 = u_xlat27;
        u_xlat27 = ((x_1396 * x_1398) + x_1400);
        let x_1403 : vec4<f32> = u_xlat12;
        let x_1404 : vec2<f32> = vec2<f32>(x_1403.z, x_1403.w);
        let x_1406 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_1404.x, x_1404.y, x_1406);
        let x_1413 : vec3<f32> = txVec9;
        let x_1415 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1413.xy, x_1413.z);
        u_xlat48.x = x_1415;
        let x_1418 : f32 = u_xlat15.y;
        let x_1420 : f32 = u_xlat48.x;
        let x_1422 : f32 = u_xlat27;
        u_xlat27 = ((x_1418 * x_1420) + x_1422);
        let x_1425 : vec4<f32> = u_xlat10;
        let x_1426 : vec2<f32> = vec2<f32>(x_1425.z, x_1425.w);
        let x_1428 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_1426.x, x_1426.y, x_1428);
        let x_1435 : vec3<f32> = txVec10;
        let x_1437 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1435.xy, x_1435.z);
        u_xlat48.x = x_1437;
        let x_1440 : f32 = u_xlat15.z;
        let x_1442 : f32 = u_xlat48.x;
        let x_1444 : f32 = u_xlat27;
        u_xlat27 = ((x_1440 * x_1442) + x_1444);
        let x_1447 : vec4<f32> = u_xlat9;
        let x_1448 : vec2<f32> = vec2<f32>(x_1447.x, x_1447.y);
        let x_1450 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_1448.x, x_1448.y, x_1450);
        let x_1457 : vec3<f32> = txVec11;
        let x_1459 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1457.xy, x_1457.z);
        u_xlat48.x = x_1459;
        let x_1462 : f32 = u_xlat15.w;
        let x_1464 : f32 = u_xlat48.x;
        let x_1466 : f32 = u_xlat27;
        u_xlat27 = ((x_1462 * x_1464) + x_1466);
        let x_1469 : vec4<f32> = u_xlat9;
        let x_1470 : vec2<f32> = vec2<f32>(x_1469.z, x_1469.w);
        let x_1472 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_1470.x, x_1470.y, x_1472);
        let x_1479 : vec3<f32> = txVec12;
        let x_1481 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1479.xy, x_1479.z);
        u_xlat48.x = x_1481;
        let x_1484 : f32 = u_xlat6.x;
        let x_1486 : f32 = u_xlat48.x;
        let x_1488 : f32 = u_xlat27;
        u_xlat67 = ((x_1484 * x_1486) + x_1488);
      } else {
        let x_1491 : vec4<f32> = u_xlat4;
        let x_1494 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1497 : vec2<f32> = ((vec2<f32>(x_1491.x, x_1491.y) * vec2<f32>(x_1494.z, x_1494.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1498 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1497.x, x_1497.y, x_1498.z, x_1498.w);
        let x_1500 : vec4<f32> = u_xlat6;
        let x_1502 : vec2<f32> = floor(vec2<f32>(x_1500.x, x_1500.y));
        let x_1503 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1502.x, x_1502.y, x_1503.z, x_1503.w);
        let x_1505 : vec4<f32> = u_xlat4;
        let x_1508 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1511 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1505.x, x_1505.y) * vec2<f32>(x_1508.z, x_1508.w)) + -(vec2<f32>(x_1511.x, x_1511.y)));
        let x_1515 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1515.x, x_1515.x, x_1515.y, x_1515.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1518 : vec4<f32> = u_xlat8;
        let x_1520 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1518.x, x_1518.x, x_1518.z, x_1518.z) * vec4<f32>(x_1520.x, x_1520.x, x_1520.z, x_1520.z));
        let x_1523 : vec4<f32> = u_xlat9;
        let x_1527 : vec2<f32> = (vec2<f32>(x_1523.y, x_1523.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1528 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1528.x, x_1527.x, x_1528.z, x_1527.y);
        let x_1530 : vec4<f32> = u_xlat9;
        let x_1533 : vec2<f32> = u_xlat48;
        let x_1535 : vec2<f32> = ((vec2<f32>(x_1530.x, x_1530.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1533));
        let x_1536 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1535.x, x_1536.y, x_1535.y, x_1536.w);
        let x_1538 : vec2<f32> = u_xlat48;
        let x_1540 : vec2<f32> = (-(x_1538) + vec2<f32>(1.0f, 1.0f));
        let x_1541 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1540.x, x_1540.y, x_1541.z, x_1541.w);
        let x_1543 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1543, vec2<f32>(0.0f, 0.0f));
        let x_1545 : vec2<f32> = u_xlat51;
        let x_1547 : vec2<f32> = u_xlat51;
        let x_1549 : vec4<f32> = u_xlat9;
        let x_1551 : vec2<f32> = ((-(x_1545) * x_1547) + vec2<f32>(x_1549.x, x_1549.y));
        let x_1552 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1551.x, x_1551.y, x_1552.z, x_1552.w);
        let x_1554 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1554, vec2<f32>(0.0f, 0.0f));
        let x_1557 : vec2<f32> = u_xlat51;
        let x_1559 : vec2<f32> = u_xlat51;
        let x_1561 : vec4<f32> = u_xlat8;
        let x_1563 : vec2<f32> = ((-(x_1557) * x_1559) + vec2<f32>(x_1561.y, x_1561.w));
        let x_1564 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1563.x, x_1564.y, x_1563.y);
        let x_1566 : vec4<f32> = u_xlat9;
        let x_1568 : vec2<f32> = (vec2<f32>(x_1566.x, x_1566.y) + vec2<f32>(2.0f, 2.0f));
        let x_1569 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1568.x, x_1568.y, x_1569.z, x_1569.w);
        let x_1571 : vec3<f32> = u_xlat29;
        let x_1573 : vec2<f32> = (vec2<f32>(x_1571.x, x_1571.z) + vec2<f32>(2.0f, 2.0f));
        let x_1574 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1574.x, x_1573.x, x_1574.z, x_1573.y);
        let x_1577 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1577 * 0.081632003f);
        let x_1581 : vec4<f32> = u_xlat8;
        let x_1584 : vec3<f32> = (vec3<f32>(x_1581.z, x_1581.x, x_1581.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1585 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1584.x, x_1584.y, x_1584.z, x_1585.w);
        let x_1587 : vec4<f32> = u_xlat9;
        let x_1590 : vec2<f32> = (vec2<f32>(x_1587.x, x_1587.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1591 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1590.x, x_1590.y, x_1591.z, x_1591.w);
        let x_1594 : f32 = u_xlat12.y;
        u_xlat11.x = x_1594;
        let x_1596 : vec2<f32> = u_xlat48;
        let x_1603 : vec2<f32> = ((vec2<f32>(x_1596.x, x_1596.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1604 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1604.x, x_1603.x, x_1604.z, x_1603.y);
        let x_1606 : vec2<f32> = u_xlat48;
        let x_1610 : vec2<f32> = ((vec2<f32>(x_1606.x, x_1606.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1610.x, x_1611.y, x_1610.y, x_1611.w);
        let x_1614 : f32 = u_xlat8.x;
        u_xlat9.y = x_1614;
        let x_1617 : f32 = u_xlat10.y;
        u_xlat9.w = x_1617;
        let x_1619 : vec4<f32> = u_xlat9;
        let x_1620 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1619 + x_1620);
        let x_1622 : vec2<f32> = u_xlat48;
        let x_1625 : vec2<f32> = ((vec2<f32>(x_1622.y, x_1622.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1626 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1626.x, x_1625.x, x_1626.z, x_1625.y);
        let x_1628 : vec2<f32> = u_xlat48;
        let x_1631 : vec2<f32> = ((vec2<f32>(x_1628.y, x_1628.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1632 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1631.x, x_1632.y, x_1631.y, x_1632.w);
        let x_1635 : f32 = u_xlat8.y;
        u_xlat10.y = x_1635;
        let x_1637 : vec4<f32> = u_xlat10;
        let x_1638 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1637 + x_1638);
        let x_1640 : vec4<f32> = u_xlat9;
        let x_1641 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1640 / x_1641);
        let x_1643 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1643 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1649 : vec4<f32> = u_xlat10;
        let x_1650 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1649 / x_1650);
        let x_1652 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1652 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1654 : vec4<f32> = u_xlat9;
        let x_1657 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1654.w, x_1654.x, x_1654.y, x_1654.z) * vec4<f32>(x_1657.x, x_1657.x, x_1657.x, x_1657.x));
        let x_1660 : vec4<f32> = u_xlat10;
        let x_1663 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1660.x, x_1660.w, x_1660.y, x_1660.z) * vec4<f32>(x_1663.y, x_1663.y, x_1663.y, x_1663.y));
        let x_1666 : vec4<f32> = u_xlat9;
        let x_1667 : vec3<f32> = vec3<f32>(x_1666.y, x_1666.z, x_1666.w);
        let x_1668 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1667.x, x_1668.y, x_1667.y, x_1667.z);
        let x_1671 : f32 = u_xlat10.x;
        u_xlat12.y = x_1671;
        let x_1673 : vec4<f32> = u_xlat6;
        let x_1676 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1679 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1673.x, x_1673.y, x_1673.x, x_1673.y) * vec4<f32>(x_1676.x, x_1676.y, x_1676.x, x_1676.y)) + vec4<f32>(x_1679.x, x_1679.y, x_1679.z, x_1679.y));
        let x_1682 : vec4<f32> = u_xlat6;
        let x_1685 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1688 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1682.x, x_1682.y) * vec2<f32>(x_1685.x, x_1685.y)) + vec2<f32>(x_1688.w, x_1688.y));
        let x_1692 : f32 = u_xlat12.y;
        u_xlat9.y = x_1692;
        let x_1695 : f32 = u_xlat10.z;
        u_xlat12.y = x_1695;
        let x_1697 : vec4<f32> = u_xlat6;
        let x_1700 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1703 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1697.x, x_1697.y, x_1697.x, x_1697.y) * vec4<f32>(x_1700.x, x_1700.y, x_1700.x, x_1700.y)) + vec4<f32>(x_1703.x, x_1703.y, x_1703.z, x_1703.y));
        let x_1706 : vec4<f32> = u_xlat6;
        let x_1709 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1712 : vec4<f32> = u_xlat12;
        let x_1714 : vec2<f32> = ((vec2<f32>(x_1706.x, x_1706.y) * vec2<f32>(x_1709.x, x_1709.y)) + vec2<f32>(x_1712.w, x_1712.y));
        let x_1715 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1714.x, x_1714.y, x_1715.z, x_1715.w);
        let x_1718 : f32 = u_xlat12.y;
        u_xlat9.z = x_1718;
        let x_1721 : vec4<f32> = u_xlat6;
        let x_1724 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1727 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1721.x, x_1721.y, x_1721.x, x_1721.y) * vec4<f32>(x_1724.x, x_1724.y, x_1724.x, x_1724.y)) + vec4<f32>(x_1727.x, x_1727.y, x_1727.x, x_1727.z));
        let x_1731 : f32 = u_xlat10.w;
        u_xlat12.y = x_1731;
        let x_1734 : vec4<f32> = u_xlat6;
        let x_1737 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1740 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1734.x, x_1734.y, x_1734.x, x_1734.y) * vec4<f32>(x_1737.x, x_1737.y, x_1737.x, x_1737.y)) + vec4<f32>(x_1740.x, x_1740.y, x_1740.z, x_1740.y));
        let x_1744 : vec4<f32> = u_xlat6;
        let x_1747 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1750 : vec4<f32> = u_xlat12;
        let x_1752 : vec2<f32> = ((vec2<f32>(x_1744.x, x_1744.y) * vec2<f32>(x_1747.x, x_1747.y)) + vec2<f32>(x_1750.w, x_1750.y));
        let x_1753 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1752.x, x_1752.y, x_1753.z);
        let x_1756 : f32 = u_xlat12.y;
        u_xlat9.w = x_1756;
        let x_1759 : vec4<f32> = u_xlat6;
        let x_1762 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1765 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1759.x, x_1759.y) * vec2<f32>(x_1762.x, x_1762.y)) + vec2<f32>(x_1765.x, x_1765.w));
        let x_1768 : vec4<f32> = u_xlat12;
        let x_1769 : vec3<f32> = vec3<f32>(x_1768.x, x_1768.z, x_1768.w);
        let x_1770 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1769.x, x_1770.y, x_1769.y, x_1769.z);
        let x_1772 : vec4<f32> = u_xlat6;
        let x_1775 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1778 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1772.x, x_1772.y, x_1772.x, x_1772.y) * vec4<f32>(x_1775.x, x_1775.y, x_1775.x, x_1775.y)) + vec4<f32>(x_1778.x, x_1778.y, x_1778.z, x_1778.y));
        let x_1782 : vec4<f32> = u_xlat6;
        let x_1785 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1788 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1782.x, x_1782.y) * vec2<f32>(x_1785.x, x_1785.y)) + vec2<f32>(x_1788.w, x_1788.y));
        let x_1792 : f32 = u_xlat9.x;
        u_xlat10.x = x_1792;
        let x_1794 : vec4<f32> = u_xlat6;
        let x_1797 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1800 : vec4<f32> = u_xlat10;
        let x_1802 : vec2<f32> = ((vec2<f32>(x_1794.x, x_1794.y) * vec2<f32>(x_1797.x, x_1797.y)) + vec2<f32>(x_1800.x, x_1800.y));
        let x_1803 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1802.x, x_1802.y, x_1803.z, x_1803.w);
        let x_1806 : vec4<f32> = u_xlat8;
        let x_1808 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1806.x, x_1806.x, x_1806.x, x_1806.x) * x_1808);
        let x_1811 : vec4<f32> = u_xlat8;
        let x_1813 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1811.y, x_1811.y, x_1811.y, x_1811.y) * x_1813);
        let x_1816 : vec4<f32> = u_xlat8;
        let x_1818 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1816.z, x_1816.z, x_1816.z, x_1816.z) * x_1818);
        let x_1820 : vec4<f32> = u_xlat8;
        let x_1822 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1820.w, x_1820.w, x_1820.w, x_1820.w) * x_1822);
        let x_1825 : vec4<f32> = u_xlat13;
        let x_1826 : vec2<f32> = vec2<f32>(x_1825.x, x_1825.y);
        let x_1828 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1826.x, x_1826.y, x_1828);
        let x_1835 : vec3<f32> = txVec13;
        let x_1837 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1835.xy, x_1835.z);
        u_xlat70 = x_1837;
        let x_1839 : vec4<f32> = u_xlat13;
        let x_1840 : vec2<f32> = vec2<f32>(x_1839.z, x_1839.w);
        let x_1842 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1840.x, x_1840.y, x_1842);
        let x_1849 : vec3<f32> = txVec14;
        let x_1851 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1849.xy, x_1849.z);
        u_xlat9.x = x_1851;
        let x_1854 : f32 = u_xlat9.x;
        let x_1856 : f32 = u_xlat18.y;
        u_xlat9.x = (x_1854 * x_1856);
        let x_1860 : f32 = u_xlat18.x;
        let x_1861 : f32 = u_xlat70;
        let x_1864 : f32 = u_xlat9.x;
        u_xlat70 = ((x_1860 * x_1861) + x_1864);
        let x_1867 : vec2<f32> = u_xlat48;
        let x_1869 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1867.x, x_1867.y, x_1869);
        let x_1876 : vec3<f32> = txVec15;
        let x_1878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1876.xy, x_1876.z);
        u_xlat48.x = x_1878;
        let x_1881 : f32 = u_xlat18.z;
        let x_1883 : f32 = u_xlat48.x;
        let x_1885 : f32 = u_xlat70;
        u_xlat48.x = ((x_1881 * x_1883) + x_1885);
        let x_1889 : vec4<f32> = u_xlat16;
        let x_1890 : vec2<f32> = vec2<f32>(x_1889.x, x_1889.y);
        let x_1892 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1890.x, x_1890.y, x_1892);
        let x_1900 : vec3<f32> = txVec16;
        let x_1902 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1900.xy, x_1900.z);
        u_xlat69 = x_1902;
        let x_1904 : f32 = u_xlat18.w;
        let x_1905 : f32 = u_xlat69;
        let x_1908 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1904 * x_1905) + x_1908);
        let x_1912 : vec4<f32> = u_xlat14;
        let x_1913 : vec2<f32> = vec2<f32>(x_1912.x, x_1912.y);
        let x_1915 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1913.x, x_1913.y, x_1915);
        let x_1922 : vec3<f32> = txVec17;
        let x_1924 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1922.xy, x_1922.z);
        u_xlat69 = x_1924;
        let x_1926 : f32 = u_xlat19.x;
        let x_1927 : f32 = u_xlat69;
        let x_1930 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1926 * x_1927) + x_1930);
        let x_1934 : vec4<f32> = u_xlat14;
        let x_1935 : vec2<f32> = vec2<f32>(x_1934.z, x_1934.w);
        let x_1937 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1935.x, x_1935.y, x_1937);
        let x_1944 : vec3<f32> = txVec18;
        let x_1946 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1944.xy, x_1944.z);
        u_xlat69 = x_1946;
        let x_1948 : f32 = u_xlat19.y;
        let x_1949 : f32 = u_xlat69;
        let x_1952 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1948 * x_1949) + x_1952);
        let x_1956 : vec4<f32> = u_xlat15;
        let x_1957 : vec2<f32> = vec2<f32>(x_1956.x, x_1956.y);
        let x_1959 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1957.x, x_1957.y, x_1959);
        let x_1966 : vec3<f32> = txVec19;
        let x_1968 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1966.xy, x_1966.z);
        u_xlat69 = x_1968;
        let x_1970 : f32 = u_xlat19.z;
        let x_1971 : f32 = u_xlat69;
        let x_1974 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1970 * x_1971) + x_1974);
        let x_1978 : vec4<f32> = u_xlat16;
        let x_1979 : vec2<f32> = vec2<f32>(x_1978.z, x_1978.w);
        let x_1981 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1979.x, x_1979.y, x_1981);
        let x_1988 : vec3<f32> = txVec20;
        let x_1990 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1988.xy, x_1988.z);
        u_xlat69 = x_1990;
        let x_1992 : f32 = u_xlat19.w;
        let x_1993 : f32 = u_xlat69;
        let x_1996 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1992 * x_1993) + x_1996);
        let x_2000 : vec4<f32> = u_xlat17;
        let x_2001 : vec2<f32> = vec2<f32>(x_2000.x, x_2000.y);
        let x_2003 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_2001.x, x_2001.y, x_2003);
        let x_2010 : vec3<f32> = txVec21;
        let x_2012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2010.xy, x_2010.z);
        u_xlat69 = x_2012;
        let x_2014 : f32 = u_xlat20.x;
        let x_2015 : f32 = u_xlat69;
        let x_2018 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2014 * x_2015) + x_2018);
        let x_2022 : vec4<f32> = u_xlat17;
        let x_2023 : vec2<f32> = vec2<f32>(x_2022.z, x_2022.w);
        let x_2025 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_2023.x, x_2023.y, x_2025);
        let x_2032 : vec3<f32> = txVec22;
        let x_2034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2032.xy, x_2032.z);
        u_xlat69 = x_2034;
        let x_2036 : f32 = u_xlat20.y;
        let x_2037 : f32 = u_xlat69;
        let x_2040 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2036 * x_2037) + x_2040);
        let x_2044 : vec3<f32> = u_xlat30;
        let x_2045 : vec2<f32> = vec2<f32>(x_2044.x, x_2044.y);
        let x_2047 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_2045.x, x_2045.y, x_2047);
        let x_2054 : vec3<f32> = txVec23;
        let x_2056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2054.xy, x_2054.z);
        u_xlat69 = x_2056;
        let x_2058 : f32 = u_xlat20.z;
        let x_2059 : f32 = u_xlat69;
        let x_2062 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2058 * x_2059) + x_2062);
        let x_2066 : vec2<f32> = u_xlat57;
        let x_2068 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_2066.x, x_2066.y, x_2068);
        let x_2075 : vec3<f32> = txVec24;
        let x_2077 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2075.xy, x_2075.z);
        u_xlat69 = x_2077;
        let x_2079 : f32 = u_xlat20.w;
        let x_2080 : f32 = u_xlat69;
        let x_2083 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2079 * x_2080) + x_2083);
        let x_2087 : vec4<f32> = u_xlat12;
        let x_2088 : vec2<f32> = vec2<f32>(x_2087.x, x_2087.y);
        let x_2090 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_2088.x, x_2088.y, x_2090);
        let x_2097 : vec3<f32> = txVec25;
        let x_2099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2097.xy, x_2097.z);
        u_xlat69 = x_2099;
        let x_2101 : f32 = u_xlat8.x;
        let x_2102 : f32 = u_xlat69;
        let x_2105 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2101 * x_2102) + x_2105);
        let x_2109 : vec4<f32> = u_xlat12;
        let x_2110 : vec2<f32> = vec2<f32>(x_2109.z, x_2109.w);
        let x_2112 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_2110.x, x_2110.y, x_2112);
        let x_2119 : vec3<f32> = txVec26;
        let x_2121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2119.xy, x_2119.z);
        u_xlat69 = x_2121;
        let x_2123 : f32 = u_xlat8.y;
        let x_2124 : f32 = u_xlat69;
        let x_2127 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2123 * x_2124) + x_2127);
        let x_2131 : vec2<f32> = u_xlat52;
        let x_2133 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_2131.x, x_2131.y, x_2133);
        let x_2140 : vec3<f32> = txVec27;
        let x_2142 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2140.xy, x_2140.z);
        u_xlat69 = x_2142;
        let x_2144 : f32 = u_xlat8.z;
        let x_2145 : f32 = u_xlat69;
        let x_2148 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2144 * x_2145) + x_2148);
        let x_2152 : vec4<f32> = u_xlat6;
        let x_2153 : vec2<f32> = vec2<f32>(x_2152.x, x_2152.y);
        let x_2155 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_2153.x, x_2153.y, x_2155);
        let x_2162 : vec3<f32> = txVec28;
        let x_2164 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2162.xy, x_2162.z);
        u_xlat6.x = x_2164;
        let x_2167 : f32 = u_xlat8.w;
        let x_2169 : f32 = u_xlat6.x;
        let x_2172 : f32 = u_xlat48.x;
        u_xlat67 = ((x_2167 * x_2169) + x_2172);
      }
    }
  } else {
    let x_2176 : vec4<f32> = u_xlat4;
    let x_2177 : vec2<f32> = vec2<f32>(x_2176.x, x_2176.y);
    let x_2179 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_2177.x, x_2177.y, x_2179);
    let x_2186 : vec3<f32> = txVec29;
    let x_2188 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2186.xy, x_2186.z);
    u_xlat67 = x_2188;
  }
  let x_2190 : f32 = x_503.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_2190) + 1.0f);
  let x_2194 : f32 = u_xlat67;
  let x_2196 : f32 = x_503.x_MainLightShadowParams.x;
  let x_2199 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2194 * x_2196) + x_2199);
  let x_2204 : f32 = u_xlat4.z;
  u_xlatb25.x = (0.0f >= x_2204);
  let x_2209 : f32 = u_xlat4.z;
  u_xlatb46 = (x_2209 >= 1.0f);
  let x_2211 : bool = u_xlatb46;
  let x_2213 : bool = u_xlatb25.x;
  u_xlatb25.x = (x_2211 | x_2213);
  let x_2217 : bool = u_xlatb25.x;
  if (x_2217) {
    x_2218 = 1.0f;
  } else {
    let x_2223 : f32 = u_xlat4.x;
    x_2218 = x_2223;
  }
  let x_2224 : f32 = x_2218;
  u_xlat4.x = x_2224;
  let x_2227 : vec3<f32> = vs_INTERP0;
  let x_2229 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat25 = (x_2227 + -(x_2229));
  let x_2232 : vec3<f32> = u_xlat25;
  let x_2233 : vec3<f32> = u_xlat25;
  u_xlat25.x = dot(x_2232, x_2233);
  let x_2237 : f32 = u_xlat25.x;
  let x_2239 : f32 = x_503.x_MainLightShadowParams.z;
  let x_2242 : f32 = x_503.x_MainLightShadowParams.w;
  u_xlat25.x = ((x_2237 * x_2239) + x_2242);
  let x_2246 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_2246, 0.0f, 1.0f);
  let x_2251 : f32 = u_xlat4.x;
  u_xlat46 = (-(x_2251) + 1.0f);
  let x_2255 : f32 = u_xlat25.x;
  let x_2256 : f32 = u_xlat46;
  let x_2259 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2255 * x_2256) + x_2259);
  let x_2268 : f32 = x_2266.x_MainLightCookieTextureFormat;
  u_xlatb25.x = !((x_2268 == -1.0f));
  let x_2272 : bool = u_xlatb25.x;
  if (x_2272) {
    let x_2275 : vec3<f32> = vs_INTERP0;
    let x_2278 : vec4<f32> = x_2266.x_MainLightWorldToLight[1i];
    let x_2280 : vec2<f32> = (vec2<f32>(x_2275.y, x_2275.y) * vec2<f32>(x_2278.x, x_2278.y));
    let x_2281 : vec3<f32> = u_xlat25;
    u_xlat25 = vec3<f32>(x_2280.x, x_2280.y, x_2281.z);
    let x_2284 : vec4<f32> = x_2266.x_MainLightWorldToLight[0i];
    let x_2286 : vec3<f32> = vs_INTERP0;
    let x_2289 : vec3<f32> = u_xlat25;
    let x_2291 : vec2<f32> = ((vec2<f32>(x_2284.x, x_2284.y) * vec2<f32>(x_2286.x, x_2286.x)) + vec2<f32>(x_2289.x, x_2289.y));
    let x_2292 : vec3<f32> = u_xlat25;
    u_xlat25 = vec3<f32>(x_2291.x, x_2291.y, x_2292.z);
    let x_2295 : vec4<f32> = x_2266.x_MainLightWorldToLight[2i];
    let x_2297 : vec3<f32> = vs_INTERP0;
    let x_2300 : vec3<f32> = u_xlat25;
    let x_2302 : vec2<f32> = ((vec2<f32>(x_2295.x, x_2295.y) * vec2<f32>(x_2297.z, x_2297.z)) + vec2<f32>(x_2300.x, x_2300.y));
    let x_2303 : vec3<f32> = u_xlat25;
    u_xlat25 = vec3<f32>(x_2302.x, x_2302.y, x_2303.z);
    let x_2305 : vec3<f32> = u_xlat25;
    let x_2308 : vec4<f32> = x_2266.x_MainLightWorldToLight[3i];
    let x_2310 : vec2<f32> = (vec2<f32>(x_2305.x, x_2305.y) + vec2<f32>(x_2308.x, x_2308.y));
    let x_2311 : vec3<f32> = u_xlat25;
    u_xlat25 = vec3<f32>(x_2310.x, x_2310.y, x_2311.z);
    let x_2313 : vec3<f32> = u_xlat25;
    let x_2316 : vec2<f32> = ((vec2<f32>(x_2313.x, x_2313.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_2317 : vec3<f32> = u_xlat25;
    u_xlat25 = vec3<f32>(x_2316.x, x_2316.y, x_2317.z);
    let x_2324 : vec3<f32> = u_xlat25;
    let x_2327 : f32 = x_44.x_GlobalMipBias.x;
    let x_2328 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_2324.x, x_2324.y), x_2327);
    u_xlat6 = x_2328;
    let x_2330 : f32 = x_2266.x_MainLightCookieTextureFormat;
    let x_2332 : f32 = x_2266.x_MainLightCookieTextureFormat;
    let x_2334 : f32 = x_2266.x_MainLightCookieTextureFormat;
    let x_2336 : f32 = x_2266.x_MainLightCookieTextureFormat;
    let x_2337 : vec4<f32> = vec4<f32>(x_2330, x_2332, x_2334, x_2336);
    let x_2344 : vec4<bool> = (vec4<f32>(x_2337.x, x_2337.y, x_2337.z, x_2337.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb25 = vec2<bool>(x_2344.x, x_2344.y);
    let x_2347 : bool = u_xlatb25.y;
    if (x_2347) {
      let x_2352 : f32 = u_xlat6.w;
      x_2348 = x_2352;
    } else {
      let x_2355 : f32 = u_xlat6.x;
      x_2348 = x_2355;
    }
    let x_2356 : f32 = x_2348;
    u_xlat46 = x_2356;
    let x_2358 : bool = u_xlatb25.x;
    if (x_2358) {
      let x_2362 : vec4<f32> = u_xlat6;
      x_2359 = vec3<f32>(x_2362.x, x_2362.y, x_2362.z);
    } else {
      let x_2365 : f32 = u_xlat46;
      x_2359 = vec3<f32>(x_2365, x_2365, x_2365);
    }
    let x_2367 : vec3<f32> = x_2359;
    u_xlat25 = x_2367;
  } else {
    u_xlat25.x = 1.0f;
    u_xlat25.y = 1.0f;
    u_xlat25.z = 1.0f;
  }
  let x_2372 : vec3<f32> = u_xlat25;
  let x_2374 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat25 = (x_2372 * vec3<f32>(x_2374.x, x_2374.y, x_2374.z));
  let x_2377 : f32 = u_xlat68;
  let x_2379 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_2377, x_2377, x_2377) * x_2379);
  let x_2381 : vec4<f32> = u_xlat3;
  let x_2384 : vec4<f32> = u_xlat1;
  u_xlat6.x = dot(-(vec3<f32>(x_2381.x, x_2381.y, x_2381.z)), vec3<f32>(x_2384.x, x_2384.y, x_2384.z));
  let x_2389 : f32 = u_xlat6.x;
  let x_2391 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2389 + x_2391);
  let x_2394 : vec4<f32> = u_xlat1;
  let x_2396 : vec4<f32> = u_xlat6;
  let x_2400 : vec4<f32> = u_xlat3;
  let x_2403 : vec3<f32> = ((vec3<f32>(x_2394.x, x_2394.y, x_2394.z) * -(vec3<f32>(x_2396.x, x_2396.x, x_2396.x))) + -(vec3<f32>(x_2400.x, x_2400.y, x_2400.z)));
  let x_2404 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2403.x, x_2403.y, x_2403.z, x_2404.w);
  let x_2406 : vec4<f32> = u_xlat1;
  let x_2408 : vec4<f32> = u_xlat3;
  u_xlat69 = dot(vec3<f32>(x_2406.x, x_2406.y, x_2406.z), vec3<f32>(x_2408.x, x_2408.y, x_2408.z));
  let x_2411 : f32 = u_xlat69;
  u_xlat69 = clamp(x_2411, 0.0f, 1.0f);
  let x_2413 : f32 = u_xlat69;
  u_xlat69 = (-(x_2413) + 1.0f);
  let x_2416 : f32 = u_xlat69;
  let x_2417 : f32 = u_xlat69;
  u_xlat69 = (x_2416 * x_2417);
  let x_2419 : f32 = u_xlat69;
  let x_2420 : f32 = u_xlat69;
  u_xlat69 = (x_2419 * x_2420);
  let x_2422 : f32 = u_xlat64;
  u_xlat70 = ((-(x_2422) * 0.699999988f) + 1.700000048f);
  let x_2428 : f32 = u_xlat64;
  let x_2429 : f32 = u_xlat70;
  u_xlat64 = (x_2428 * x_2429);
  let x_2431 : f32 = u_xlat64;
  u_xlat64 = (x_2431 * 6.0f);
  let x_2441 : vec4<f32> = u_xlat6;
  let x_2443 : f32 = u_xlat64;
  let x_2444 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2441.x, x_2441.y, x_2441.z), x_2443);
  u_xlat8 = x_2444;
  let x_2446 : f32 = u_xlat8.w;
  u_xlat64 = (x_2446 + -1.0f);
  let x_2449 : f32 = x_359.unity_SpecCube0_HDR.w;
  let x_2450 : f32 = u_xlat64;
  u_xlat64 = ((x_2449 * x_2450) + 1.0f);
  let x_2453 : f32 = u_xlat64;
  u_xlat64 = max(x_2453, 0.0f);
  let x_2455 : f32 = u_xlat64;
  u_xlat64 = log2(x_2455);
  let x_2457 : f32 = u_xlat64;
  let x_2459 : f32 = x_359.unity_SpecCube0_HDR.y;
  u_xlat64 = (x_2457 * x_2459);
  let x_2461 : f32 = u_xlat64;
  u_xlat64 = exp2(x_2461);
  let x_2463 : f32 = u_xlat64;
  let x_2465 : f32 = x_359.unity_SpecCube0_HDR.x;
  u_xlat64 = (x_2463 * x_2465);
  let x_2467 : vec4<f32> = u_xlat8;
  let x_2469 : f32 = u_xlat64;
  let x_2471 : vec3<f32> = (vec3<f32>(x_2467.x, x_2467.y, x_2467.z) * vec3<f32>(x_2469, x_2469, x_2469));
  let x_2472 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2471.x, x_2471.y, x_2471.z, x_2472.w);
  let x_2474 : vec4<f32> = u_xlat2;
  let x_2476 : vec4<f32> = u_xlat2;
  let x_2480 : vec2<f32> = ((vec2<f32>(x_2474.x, x_2474.x) * vec2<f32>(x_2476.x, x_2476.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2481 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2480.x, x_2480.y, x_2481.z, x_2481.w);
  let x_2484 : f32 = u_xlat8.y;
  u_xlat64 = (1.0f / x_2484);
  let x_2486 : vec4<f32> = u_xlat0;
  let x_2489 : f32 = u_xlat23;
  u_xlat29 = (-(vec3<f32>(x_2486.x, x_2486.y, x_2486.z)) + vec3<f32>(x_2489, x_2489, x_2489));
  let x_2492 : f32 = u_xlat69;
  let x_2494 : vec3<f32> = u_xlat29;
  let x_2496 : vec4<f32> = u_xlat0;
  u_xlat29 = ((vec3<f32>(x_2492, x_2492, x_2492) * x_2494) + vec3<f32>(x_2496.x, x_2496.y, x_2496.z));
  let x_2499 : f32 = u_xlat64;
  let x_2501 : vec3<f32> = u_xlat29;
  u_xlat29 = (vec3<f32>(x_2499, x_2499, x_2499) * x_2501);
  let x_2503 : vec4<f32> = u_xlat6;
  let x_2505 : vec3<f32> = u_xlat29;
  let x_2506 : vec3<f32> = (vec3<f32>(x_2503.x, x_2503.y, x_2503.z) * x_2505);
  let x_2507 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2506.x, x_2506.y, x_2506.z, x_2507.w);
  let x_2509 : vec4<f32> = u_xlat5;
  let x_2511 : vec3<f32> = u_xlat7;
  let x_2513 : vec4<f32> = u_xlat6;
  let x_2515 : vec3<f32> = ((vec3<f32>(x_2509.x, x_2509.y, x_2509.z) * x_2511) + vec3<f32>(x_2513.x, x_2513.y, x_2513.z));
  let x_2516 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2515.x, x_2515.y, x_2515.z, x_2516.w);
  let x_2519 : f32 = u_xlat4.x;
  let x_2521 : f32 = x_359.unity_LightData.z;
  u_xlat64 = (x_2519 * x_2521);
  let x_2523 : vec4<f32> = u_xlat1;
  let x_2526 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_2523.x, x_2523.y, x_2523.z), vec3<f32>(x_2526.x, x_2526.y, x_2526.z));
  let x_2531 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2531, 0.0f, 1.0f);
  let x_2534 : f32 = u_xlat64;
  let x_2536 : f32 = u_xlat2.x;
  u_xlat64 = (x_2534 * x_2536);
  let x_2538 : f32 = u_xlat64;
  let x_2540 : vec3<f32> = u_xlat25;
  let x_2541 : vec3<f32> = (vec3<f32>(x_2538, x_2538, x_2538) * x_2540);
  let x_2542 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2541.x, x_2541.y, x_2541.z, x_2542.w);
  let x_2544 : vec4<f32> = u_xlat3;
  let x_2547 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2549 : vec3<f32> = (vec3<f32>(x_2544.x, x_2544.y, x_2544.z) + vec3<f32>(x_2547.x, x_2547.y, x_2547.z));
  let x_2550 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2549.x, x_2549.y, x_2549.z, x_2550.w);
  let x_2552 : vec4<f32> = u_xlat6;
  let x_2554 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_2552.x, x_2552.y, x_2552.z), vec3<f32>(x_2554.x, x_2554.y, x_2554.z));
  let x_2557 : f32 = u_xlat64;
  u_xlat64 = max(x_2557, 1.17549435e-37f);
  let x_2560 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_2560);
  let x_2562 : f32 = u_xlat64;
  let x_2564 : vec4<f32> = u_xlat6;
  let x_2566 : vec3<f32> = (vec3<f32>(x_2562, x_2562, x_2562) * vec3<f32>(x_2564.x, x_2564.y, x_2564.z));
  let x_2567 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2566.x, x_2566.y, x_2566.z, x_2567.w);
  let x_2569 : vec4<f32> = u_xlat1;
  let x_2571 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_2569.x, x_2569.y, x_2569.z), vec3<f32>(x_2571.x, x_2571.y, x_2571.z));
  let x_2574 : f32 = u_xlat64;
  u_xlat64 = clamp(x_2574, 0.0f, 1.0f);
  let x_2577 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2579 : vec4<f32> = u_xlat6;
  u_xlat2.x = dot(vec3<f32>(x_2577.x, x_2577.y, x_2577.z), vec3<f32>(x_2579.x, x_2579.y, x_2579.z));
  let x_2584 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2584, 0.0f, 1.0f);
  let x_2587 : f32 = u_xlat64;
  let x_2588 : f32 = u_xlat64;
  u_xlat64 = (x_2587 * x_2588);
  let x_2590 : f32 = u_xlat64;
  let x_2592 : f32 = u_xlat8.x;
  u_xlat64 = ((x_2590 * x_2592) + 1.000010014f);
  let x_2597 : f32 = u_xlat2.x;
  let x_2599 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2597 * x_2599);
  let x_2602 : f32 = u_xlat64;
  let x_2603 : f32 = u_xlat64;
  u_xlat64 = (x_2602 * x_2603);
  let x_2606 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_2606, 0.100000001f);
  let x_2610 : f32 = u_xlat64;
  let x_2612 : f32 = u_xlat2.x;
  u_xlat64 = (x_2610 * x_2612);
  let x_2614 : f32 = u_xlat65;
  let x_2615 : f32 = u_xlat64;
  u_xlat64 = (x_2614 * x_2615);
  let x_2617 : f32 = u_xlat66;
  let x_2618 : f32 = u_xlat64;
  u_xlat64 = (x_2617 / x_2618);
  let x_2620 : vec4<f32> = u_xlat0;
  let x_2622 : f32 = u_xlat64;
  let x_2625 : vec3<f32> = u_xlat7;
  let x_2626 : vec3<f32> = ((vec3<f32>(x_2620.x, x_2620.y, x_2620.z) * vec3<f32>(x_2622, x_2622, x_2622)) + x_2625);
  let x_2627 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2626.x, x_2626.y, x_2626.z, x_2627.w);
  let x_2629 : vec4<f32> = u_xlat4;
  let x_2631 : vec4<f32> = u_xlat6;
  let x_2633 : vec3<f32> = (vec3<f32>(x_2629.x, x_2629.y, x_2629.z) * vec3<f32>(x_2631.x, x_2631.y, x_2631.z));
  let x_2634 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2633.x, x_2633.y, x_2633.z, x_2634.w);
  let x_2637 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2639 : f32 = x_359.unity_LightData.y;
  u_xlat64 = min(x_2637, x_2639);
  let x_2642 : f32 = u_xlat64;
  u_xlatu64 = bitcast<u32>(i32(x_2642));
  let x_2647 : f32 = x_2266.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_2649 : f32 = x_2266.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_2651 : f32 = x_2266.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_2653 : f32 = x_2266.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_2654 : vec4<f32> = vec4<f32>(x_2647, x_2649, x_2651, x_2653);
  let x_2660 : vec4<bool> = (vec4<f32>(x_2654.x, x_2654.y, x_2654.z, x_2654.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb2 = vec2<bool>(x_2660.x, x_2660.y);
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2671 : u32 = u_xlatu_loop_1;
    let x_2672 : u32 = u_xlatu64;
    if ((x_2671 < x_2672)) {
    } else {
      break;
    }
    let x_2675 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_2675 >> 2u);
    let x_2678 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_2678 & 3u));
    let x_2681 : u32 = u_xlatu69;
    let x_2684 : vec4<f32> = x_359.unity_LightIndices[bitcast<i32>(x_2681)];
    let x_2694 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2699 : vec4<u32> = indexable[x_2694];
    u_xlat69 = dot(x_2684, bitcast<vec4<f32>>(x_2699));
    let x_2702 : f32 = u_xlat69;
    u_xlatu69 = bitcast<u32>(i32(x_2702));
    let x_2705 : vec3<f32> = vs_INTERP0;
    let x_2717 : u32 = u_xlatu69;
    let x_2720 : vec4<f32> = x_2716.x_AdditionalLightsPosition[bitcast<i32>(x_2717)];
    let x_2723 : u32 = u_xlatu69;
    let x_2726 : vec4<f32> = x_2716.x_AdditionalLightsPosition[bitcast<i32>(x_2723)];
    u_xlat29 = ((-(x_2705) * vec3<f32>(x_2720.w, x_2720.w, x_2720.w)) + vec3<f32>(x_2726.x, x_2726.y, x_2726.z));
    let x_2729 : vec3<f32> = u_xlat29;
    let x_2730 : vec3<f32> = u_xlat29;
    u_xlat70 = dot(x_2729, x_2730);
    let x_2732 : f32 = u_xlat70;
    u_xlat70 = max(x_2732, 6.10351562e-05f);
    let x_2735 : f32 = u_xlat70;
    u_xlat9.x = inverseSqrt(x_2735);
    let x_2738 : vec3<f32> = u_xlat29;
    let x_2739 : vec4<f32> = u_xlat9;
    u_xlat30 = (x_2738 * vec3<f32>(x_2739.x, x_2739.x, x_2739.x));
    let x_2742 : f32 = u_xlat70;
    u_xlat10.x = (1.0f / x_2742);
    let x_2745 : f32 = u_xlat70;
    let x_2746 : u32 = u_xlatu69;
    let x_2749 : f32 = x_2716.x_AdditionalLightsAttenuation[bitcast<i32>(x_2746)].x;
    u_xlat70 = (x_2745 * x_2749);
    let x_2751 : f32 = u_xlat70;
    let x_2753 : f32 = u_xlat70;
    u_xlat70 = ((-(x_2751) * x_2753) + 1.0f);
    let x_2756 : f32 = u_xlat70;
    u_xlat70 = max(x_2756, 0.0f);
    let x_2758 : f32 = u_xlat70;
    let x_2759 : f32 = u_xlat70;
    u_xlat70 = (x_2758 * x_2759);
    let x_2761 : f32 = u_xlat70;
    let x_2763 : f32 = u_xlat10.x;
    u_xlat70 = (x_2761 * x_2763);
    let x_2765 : u32 = u_xlatu69;
    let x_2768 : vec4<f32> = x_2716.x_AdditionalLightsSpotDir[bitcast<i32>(x_2765)];
    let x_2770 : vec3<f32> = u_xlat30;
    u_xlat10.x = dot(vec3<f32>(x_2768.x, x_2768.y, x_2768.z), x_2770);
    let x_2774 : f32 = u_xlat10.x;
    let x_2775 : u32 = u_xlatu69;
    let x_2778 : f32 = x_2716.x_AdditionalLightsAttenuation[bitcast<i32>(x_2775)].z;
    let x_2780 : u32 = u_xlatu69;
    let x_2783 : f32 = x_2716.x_AdditionalLightsAttenuation[bitcast<i32>(x_2780)].w;
    u_xlat10.x = ((x_2774 * x_2778) + x_2783);
    let x_2787 : f32 = u_xlat10.x;
    u_xlat10.x = clamp(x_2787, 0.0f, 1.0f);
    let x_2791 : f32 = u_xlat10.x;
    let x_2793 : f32 = u_xlat10.x;
    u_xlat10.x = (x_2791 * x_2793);
    let x_2796 : f32 = u_xlat70;
    let x_2798 : f32 = u_xlat10.x;
    u_xlat70 = (x_2796 * x_2798);
    let x_2801 : u32 = u_xlatu69;
    u_xlatu10 = (x_2801 >> 5u);
    let x_2804 : u32 = u_xlatu69;
    u_xlati31 = (1i << bitcast<u32>((bitcast<i32>(x_2804) & 31i)));
    let x_2810 : i32 = u_xlati31;
    let x_2812 : u32 = u_xlatu10;
    let x_2815 : f32 = x_2266.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_2812)].el;
    u_xlati10 = bitcast<i32>((bitcast<u32>(x_2810) & bitcast<u32>(x_2815)));
    let x_2819 : i32 = u_xlati10;
    if ((x_2819 != 0i)) {
      let x_2829 : u32 = u_xlatu69;
      let x_2832 : f32 = x_2828.x_AdditionalLightsLightTypes[bitcast<i32>(x_2829)].el;
      u_xlati10 = i32(x_2832);
      let x_2834 : i32 = u_xlati10;
      u_xlati31 = select(1i, 0i, (x_2834 != 0i));
      let x_2838 : u32 = u_xlatu69;
      u_xlati52 = (bitcast<i32>(x_2838) << bitcast<u32>(2i));
      let x_2841 : i32 = u_xlati31;
      if ((x_2841 != 0i)) {
        let x_2845 : vec3<f32> = vs_INTERP0;
        let x_2847 : i32 = u_xlati52;
        let x_2850 : i32 = u_xlati52;
        let x_2854 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_2847 + 1i) / 4i)][((x_2850 + 1i) % 4i)];
        let x_2856 : vec3<f32> = (vec3<f32>(x_2845.y, x_2845.y, x_2845.y) * vec3<f32>(x_2854.x, x_2854.y, x_2854.w));
        let x_2857 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2856.x, x_2856.y, x_2856.z, x_2857.w);
        let x_2859 : i32 = u_xlati52;
        let x_2861 : i32 = u_xlati52;
        let x_2864 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[(x_2859 / 4i)][(x_2861 % 4i)];
        let x_2866 : vec3<f32> = vs_INTERP0;
        let x_2869 : vec4<f32> = u_xlat11;
        let x_2871 : vec3<f32> = ((vec3<f32>(x_2864.x, x_2864.y, x_2864.w) * vec3<f32>(x_2866.x, x_2866.x, x_2866.x)) + vec3<f32>(x_2869.x, x_2869.y, x_2869.z));
        let x_2872 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2871.x, x_2871.y, x_2871.z, x_2872.w);
        let x_2874 : i32 = u_xlati52;
        let x_2877 : i32 = u_xlati52;
        let x_2881 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_2874 + 2i) / 4i)][((x_2877 + 2i) % 4i)];
        let x_2883 : vec3<f32> = vs_INTERP0;
        let x_2886 : vec4<f32> = u_xlat11;
        let x_2888 : vec3<f32> = ((vec3<f32>(x_2881.x, x_2881.y, x_2881.w) * vec3<f32>(x_2883.z, x_2883.z, x_2883.z)) + vec3<f32>(x_2886.x, x_2886.y, x_2886.z));
        let x_2889 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2888.x, x_2888.y, x_2888.z, x_2889.w);
        let x_2891 : vec4<f32> = u_xlat11;
        let x_2893 : i32 = u_xlati52;
        let x_2896 : i32 = u_xlati52;
        let x_2900 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_2893 + 3i) / 4i)][((x_2896 + 3i) % 4i)];
        let x_2902 : vec3<f32> = (vec3<f32>(x_2891.x, x_2891.y, x_2891.z) + vec3<f32>(x_2900.x, x_2900.y, x_2900.w));
        let x_2903 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2902.x, x_2902.y, x_2902.z, x_2903.w);
        let x_2906 : vec4<f32> = u_xlat11;
        let x_2908 : vec4<f32> = u_xlat11;
        let x_2910 : vec2<f32> = (vec2<f32>(x_2906.x, x_2906.y) / vec2<f32>(x_2908.z, x_2908.z));
        let x_2911 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2910.x, x_2911.y, x_2910.y);
        let x_2913 : vec3<f32> = u_xlat31;
        let x_2916 : vec2<f32> = ((vec2<f32>(x_2913.x, x_2913.z) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_2917 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2916.x, x_2917.y, x_2916.y);
        let x_2919 : vec3<f32> = u_xlat31;
        let x_2923 : vec2<f32> = clamp(vec2<f32>(x_2919.x, x_2919.z), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_2924 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2923.x, x_2924.y, x_2923.y);
        let x_2926 : u32 = u_xlatu69;
        let x_2929 : vec4<f32> = x_2828.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_2926)];
        let x_2931 : vec3<f32> = u_xlat31;
        let x_2934 : u32 = u_xlatu69;
        let x_2937 : vec4<f32> = x_2828.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_2934)];
        let x_2939 : vec2<f32> = ((vec2<f32>(x_2929.x, x_2929.y) * vec2<f32>(x_2931.x, x_2931.z)) + vec2<f32>(x_2937.z, x_2937.w));
        let x_2940 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2939.x, x_2940.y, x_2939.y);
      } else {
        let x_2944 : i32 = u_xlati10;
        u_xlatb10 = (x_2944 == 1i);
        let x_2946 : bool = u_xlatb10;
        u_xlati10 = select(0i, 1i, x_2946);
        let x_2948 : i32 = u_xlati10;
        if ((x_2948 != 0i)) {
          let x_2952 : vec3<f32> = vs_INTERP0;
          let x_2954 : i32 = u_xlati52;
          let x_2957 : i32 = u_xlati52;
          let x_2961 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_2954 + 1i) / 4i)][((x_2957 + 1i) % 4i)];
          let x_2963 : vec2<f32> = (vec2<f32>(x_2952.y, x_2952.y) * vec2<f32>(x_2961.x, x_2961.y));
          let x_2964 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_2963.x, x_2963.y, x_2964.z, x_2964.w);
          let x_2966 : i32 = u_xlati52;
          let x_2968 : i32 = u_xlati52;
          let x_2971 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[(x_2966 / 4i)][(x_2968 % 4i)];
          let x_2973 : vec3<f32> = vs_INTERP0;
          let x_2976 : vec4<f32> = u_xlat11;
          let x_2978 : vec2<f32> = ((vec2<f32>(x_2971.x, x_2971.y) * vec2<f32>(x_2973.x, x_2973.x)) + vec2<f32>(x_2976.x, x_2976.y));
          let x_2979 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_2978.x, x_2978.y, x_2979.z, x_2979.w);
          let x_2981 : i32 = u_xlati52;
          let x_2984 : i32 = u_xlati52;
          let x_2988 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_2981 + 2i) / 4i)][((x_2984 + 2i) % 4i)];
          let x_2990 : vec3<f32> = vs_INTERP0;
          let x_2993 : vec4<f32> = u_xlat11;
          let x_2995 : vec2<f32> = ((vec2<f32>(x_2988.x, x_2988.y) * vec2<f32>(x_2990.z, x_2990.z)) + vec2<f32>(x_2993.x, x_2993.y));
          let x_2996 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_2995.x, x_2995.y, x_2996.z, x_2996.w);
          let x_2998 : vec4<f32> = u_xlat11;
          let x_3000 : i32 = u_xlati52;
          let x_3003 : i32 = u_xlati52;
          let x_3007 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_3000 + 3i) / 4i)][((x_3003 + 3i) % 4i)];
          let x_3009 : vec2<f32> = (vec2<f32>(x_2998.x, x_2998.y) + vec2<f32>(x_3007.x, x_3007.y));
          let x_3010 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_3009.x, x_3009.y, x_3010.z, x_3010.w);
          let x_3012 : vec4<f32> = u_xlat11;
          let x_3015 : vec2<f32> = ((vec2<f32>(x_3012.x, x_3012.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3016 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_3015.x, x_3015.y, x_3016.z, x_3016.w);
          let x_3018 : vec4<f32> = u_xlat11;
          let x_3020 : vec2<f32> = fract(vec2<f32>(x_3018.x, x_3018.y));
          let x_3021 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_3020.x, x_3020.y, x_3021.z, x_3021.w);
          let x_3023 : u32 = u_xlatu69;
          let x_3026 : vec4<f32> = x_2828.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3023)];
          let x_3028 : vec4<f32> = u_xlat11;
          let x_3031 : u32 = u_xlatu69;
          let x_3034 : vec4<f32> = x_2828.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3031)];
          let x_3036 : vec2<f32> = ((vec2<f32>(x_3026.x, x_3026.y) * vec2<f32>(x_3028.x, x_3028.y)) + vec2<f32>(x_3034.z, x_3034.w));
          let x_3037 : vec3<f32> = u_xlat31;
          u_xlat31 = vec3<f32>(x_3036.x, x_3037.y, x_3036.y);
        } else {
          let x_3040 : vec3<f32> = vs_INTERP0;
          let x_3042 : i32 = u_xlati52;
          let x_3045 : i32 = u_xlati52;
          let x_3049 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_3042 + 1i) / 4i)][((x_3045 + 1i) % 4i)];
          u_xlat11 = (vec4<f32>(x_3040.y, x_3040.y, x_3040.y, x_3040.y) * x_3049);
          let x_3051 : i32 = u_xlati52;
          let x_3053 : i32 = u_xlati52;
          let x_3056 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[(x_3051 / 4i)][(x_3053 % 4i)];
          let x_3057 : vec3<f32> = vs_INTERP0;
          let x_3060 : vec4<f32> = u_xlat11;
          u_xlat11 = ((x_3056 * vec4<f32>(x_3057.x, x_3057.x, x_3057.x, x_3057.x)) + x_3060);
          let x_3062 : i32 = u_xlati52;
          let x_3065 : i32 = u_xlati52;
          let x_3069 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_3062 + 2i) / 4i)][((x_3065 + 2i) % 4i)];
          let x_3070 : vec3<f32> = vs_INTERP0;
          let x_3073 : vec4<f32> = u_xlat11;
          u_xlat11 = ((x_3069 * vec4<f32>(x_3070.z, x_3070.z, x_3070.z, x_3070.z)) + x_3073);
          let x_3075 : vec4<f32> = u_xlat11;
          let x_3076 : i32 = u_xlati52;
          let x_3079 : i32 = u_xlati52;
          let x_3083 : vec4<f32> = x_2828.x_AdditionalLightsWorldToLights[((x_3076 + 3i) / 4i)][((x_3079 + 3i) % 4i)];
          u_xlat11 = (x_3075 + x_3083);
          let x_3085 : vec4<f32> = u_xlat11;
          let x_3087 : vec4<f32> = u_xlat11;
          let x_3089 : vec3<f32> = (vec3<f32>(x_3085.x, x_3085.y, x_3085.z) / vec3<f32>(x_3087.w, x_3087.w, x_3087.w));
          let x_3090 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_3089.x, x_3089.y, x_3089.z, x_3090.w);
          let x_3092 : vec4<f32> = u_xlat11;
          let x_3094 : vec4<f32> = u_xlat11;
          u_xlat10.x = dot(vec3<f32>(x_3092.x, x_3092.y, x_3092.z), vec3<f32>(x_3094.x, x_3094.y, x_3094.z));
          let x_3099 : f32 = u_xlat10.x;
          u_xlat10.x = inverseSqrt(x_3099);
          let x_3102 : vec4<f32> = u_xlat10;
          let x_3104 : vec4<f32> = u_xlat11;
          let x_3106 : vec3<f32> = (vec3<f32>(x_3102.x, x_3102.x, x_3102.x) * vec3<f32>(x_3104.x, x_3104.y, x_3104.z));
          let x_3107 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_3106.x, x_3106.y, x_3106.z, x_3107.w);
          let x_3109 : vec4<f32> = u_xlat11;
          u_xlat10.x = dot(abs(vec3<f32>(x_3109.x, x_3109.y, x_3109.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_3115 : f32 = u_xlat10.x;
          u_xlat10.x = max(x_3115, 0.000001f);
          let x_3120 : f32 = u_xlat10.x;
          u_xlat10.x = (1.0f / x_3120);
          let x_3123 : vec4<f32> = u_xlat10;
          let x_3125 : vec4<f32> = u_xlat11;
          let x_3127 : vec3<f32> = (vec3<f32>(x_3123.x, x_3123.x, x_3123.x) * vec3<f32>(x_3125.z, x_3125.x, x_3125.y));
          let x_3128 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3127.x, x_3127.y, x_3127.z, x_3128.w);
          let x_3131 : f32 = u_xlat12.x;
          u_xlat12.x = -(x_3131);
          let x_3135 : f32 = u_xlat12.x;
          u_xlat12.x = clamp(x_3135, 0.0f, 1.0f);
          let x_3139 : vec4<f32> = u_xlat12;
          let x_3142 : vec4<bool> = (vec4<f32>(x_3139.y, x_3139.z, x_3139.y, x_3139.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_3142.x, x_3142.y);
          let x_3146 : bool = u_xlatb53.x;
          if (x_3146) {
            let x_3151 : f32 = u_xlat12.x;
            x_3147 = x_3151;
          } else {
            let x_3154 : f32 = u_xlat12.x;
            x_3147 = -(x_3154);
          }
          let x_3156 : f32 = x_3147;
          u_xlat53.x = x_3156;
          let x_3159 : bool = u_xlatb53.y;
          if (x_3159) {
            let x_3164 : f32 = u_xlat12.x;
            x_3160 = x_3164;
          } else {
            let x_3167 : f32 = u_xlat12.x;
            x_3160 = -(x_3167);
          }
          let x_3169 : f32 = x_3160;
          u_xlat53.y = x_3169;
          let x_3171 : vec4<f32> = u_xlat11;
          let x_3173 : vec4<f32> = u_xlat10;
          let x_3176 : vec2<f32> = u_xlat53;
          let x_3177 : vec2<f32> = ((vec2<f32>(x_3171.x, x_3171.y) * vec2<f32>(x_3173.x, x_3173.x)) + x_3176);
          let x_3178 : vec4<f32> = u_xlat10;
          u_xlat10 = vec4<f32>(x_3177.x, x_3178.y, x_3177.y, x_3178.w);
          let x_3180 : vec4<f32> = u_xlat10;
          let x_3183 : vec2<f32> = ((vec2<f32>(x_3180.x, x_3180.z) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3184 : vec4<f32> = u_xlat10;
          u_xlat10 = vec4<f32>(x_3183.x, x_3184.y, x_3183.y, x_3184.w);
          let x_3186 : vec4<f32> = u_xlat10;
          let x_3190 : vec2<f32> = clamp(vec2<f32>(x_3186.x, x_3186.z), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_3191 : vec4<f32> = u_xlat10;
          u_xlat10 = vec4<f32>(x_3190.x, x_3191.y, x_3190.y, x_3191.w);
          let x_3193 : u32 = u_xlatu69;
          let x_3196 : vec4<f32> = x_2828.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3193)];
          let x_3198 : vec4<f32> = u_xlat10;
          let x_3201 : u32 = u_xlatu69;
          let x_3204 : vec4<f32> = x_2828.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3201)];
          let x_3206 : vec2<f32> = ((vec2<f32>(x_3196.x, x_3196.y) * vec2<f32>(x_3198.x, x_3198.z)) + vec2<f32>(x_3204.z, x_3204.w));
          let x_3207 : vec3<f32> = u_xlat31;
          u_xlat31 = vec3<f32>(x_3206.x, x_3207.y, x_3206.y);
        }
      }
      let x_3214 : vec3<f32> = u_xlat31;
      let x_3217 : f32 = x_44.x_GlobalMipBias.x;
      let x_3218 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_3214.x, x_3214.z), x_3217);
      u_xlat10 = x_3218;
      let x_3221 : bool = u_xlatb2.y;
      if (x_3221) {
        let x_3226 : f32 = u_xlat10.w;
        x_3222 = x_3226;
      } else {
        let x_3229 : f32 = u_xlat10.x;
        x_3222 = x_3229;
      }
      let x_3230 : f32 = x_3222;
      u_xlat73 = x_3230;
      let x_3232 : bool = u_xlatb2.x;
      if (x_3232) {
        let x_3236 : vec4<f32> = u_xlat10;
        x_3233 = vec3<f32>(x_3236.x, x_3236.y, x_3236.z);
      } else {
        let x_3239 : f32 = u_xlat73;
        x_3233 = vec3<f32>(x_3239, x_3239, x_3239);
      }
      let x_3241 : vec3<f32> = x_3233;
      let x_3242 : vec4<f32> = u_xlat10;
      u_xlat10 = vec4<f32>(x_3241.x, x_3241.y, x_3241.z, x_3242.w);
    } else {
      u_xlat10.x = 1.0f;
      u_xlat10.y = 1.0f;
      u_xlat10.z = 1.0f;
    }
    let x_3248 : vec4<f32> = u_xlat10;
    let x_3250 : u32 = u_xlatu69;
    let x_3253 : vec4<f32> = x_2716.x_AdditionalLightsColor[bitcast<i32>(x_3250)];
    let x_3255 : vec3<f32> = (vec3<f32>(x_3248.x, x_3248.y, x_3248.z) * vec3<f32>(x_3253.x, x_3253.y, x_3253.z));
    let x_3256 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3255.x, x_3255.y, x_3255.z, x_3256.w);
    let x_3258 : f32 = u_xlat68;
    let x_3260 : vec4<f32> = u_xlat10;
    let x_3262 : vec3<f32> = (vec3<f32>(x_3258, x_3258, x_3258) * vec3<f32>(x_3260.x, x_3260.y, x_3260.z));
    let x_3263 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3262.x, x_3262.y, x_3262.z, x_3263.w);
    let x_3265 : vec4<f32> = u_xlat1;
    let x_3267 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(vec3<f32>(x_3265.x, x_3265.y, x_3265.z), x_3267);
    let x_3269 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3269, 0.0f, 1.0f);
    let x_3271 : f32 = u_xlat69;
    let x_3272 : f32 = u_xlat70;
    u_xlat69 = (x_3271 * x_3272);
    let x_3274 : f32 = u_xlat69;
    let x_3276 : vec4<f32> = u_xlat10;
    let x_3278 : vec3<f32> = (vec3<f32>(x_3274, x_3274, x_3274) * vec3<f32>(x_3276.x, x_3276.y, x_3276.z));
    let x_3279 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3278.x, x_3278.y, x_3278.z, x_3279.w);
    let x_3281 : vec3<f32> = u_xlat29;
    let x_3282 : vec4<f32> = u_xlat9;
    let x_3285 : vec4<f32> = u_xlat3;
    u_xlat29 = ((x_3281 * vec3<f32>(x_3282.x, x_3282.x, x_3282.x)) + vec3<f32>(x_3285.x, x_3285.y, x_3285.z));
    let x_3288 : vec3<f32> = u_xlat29;
    let x_3289 : vec3<f32> = u_xlat29;
    u_xlat69 = dot(x_3288, x_3289);
    let x_3291 : f32 = u_xlat69;
    u_xlat69 = max(x_3291, 1.17549435e-37f);
    let x_3293 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_3293);
    let x_3295 : f32 = u_xlat69;
    let x_3297 : vec3<f32> = u_xlat29;
    u_xlat29 = (vec3<f32>(x_3295, x_3295, x_3295) * x_3297);
    let x_3299 : vec4<f32> = u_xlat1;
    let x_3301 : vec3<f32> = u_xlat29;
    u_xlat69 = dot(vec3<f32>(x_3299.x, x_3299.y, x_3299.z), x_3301);
    let x_3303 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3303, 0.0f, 1.0f);
    let x_3305 : vec3<f32> = u_xlat30;
    let x_3306 : vec3<f32> = u_xlat29;
    u_xlat70 = dot(x_3305, x_3306);
    let x_3308 : f32 = u_xlat70;
    u_xlat70 = clamp(x_3308, 0.0f, 1.0f);
    let x_3310 : f32 = u_xlat69;
    let x_3311 : f32 = u_xlat69;
    u_xlat69 = (x_3310 * x_3311);
    let x_3313 : f32 = u_xlat69;
    let x_3315 : f32 = u_xlat8.x;
    u_xlat69 = ((x_3313 * x_3315) + 1.000010014f);
    let x_3318 : f32 = u_xlat70;
    let x_3319 : f32 = u_xlat70;
    u_xlat70 = (x_3318 * x_3319);
    let x_3321 : f32 = u_xlat69;
    let x_3322 : f32 = u_xlat69;
    u_xlat69 = (x_3321 * x_3322);
    let x_3324 : f32 = u_xlat70;
    u_xlat70 = max(x_3324, 0.100000001f);
    let x_3326 : f32 = u_xlat69;
    let x_3327 : f32 = u_xlat70;
    u_xlat69 = (x_3326 * x_3327);
    let x_3329 : f32 = u_xlat65;
    let x_3330 : f32 = u_xlat69;
    u_xlat69 = (x_3329 * x_3330);
    let x_3332 : f32 = u_xlat66;
    let x_3333 : f32 = u_xlat69;
    u_xlat69 = (x_3332 / x_3333);
    let x_3335 : vec4<f32> = u_xlat0;
    let x_3337 : f32 = u_xlat69;
    let x_3340 : vec3<f32> = u_xlat7;
    u_xlat29 = ((vec3<f32>(x_3335.x, x_3335.y, x_3335.z) * vec3<f32>(x_3337, x_3337, x_3337)) + x_3340);
    let x_3342 : vec3<f32> = u_xlat29;
    let x_3343 : vec4<f32> = u_xlat10;
    let x_3346 : vec4<f32> = u_xlat6;
    let x_3348 : vec3<f32> = ((x_3342 * vec3<f32>(x_3343.x, x_3343.y, x_3343.z)) + vec3<f32>(x_3346.x, x_3346.y, x_3346.z));
    let x_3349 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3348.x, x_3348.y, x_3348.z, x_3349.w);

    continuing {
      let x_3351 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3351 + bitcast<u32>(1i));
    }
  }
  let x_3353 : vec4<f32> = u_xlat5;
  let x_3355 : f32 = u_xlat44;
  let x_3358 : vec4<f32> = u_xlat4;
  let x_3360 : vec3<f32> = ((vec3<f32>(x_3353.x, x_3353.y, x_3353.z) * vec3<f32>(x_3355, x_3355, x_3355)) + vec3<f32>(x_3358.x, x_3358.y, x_3358.z));
  let x_3361 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3360.x, x_3360.y, x_3360.z, x_3361.w);
  let x_3363 : vec4<f32> = u_xlat6;
  let x_3365 : vec4<f32> = u_xlat0;
  let x_3367 : vec3<f32> = (vec3<f32>(x_3363.x, x_3363.y, x_3363.z) + vec3<f32>(x_3365.x, x_3365.y, x_3365.z));
  let x_3368 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3367.x, x_3367.y, x_3367.z, x_3368.w);
  let x_3370 : f32 = u_xlat63;
  let x_3371 : f32 = u_xlat63;
  u_xlat63 = (x_3370 * -(x_3371));
  let x_3374 : f32 = u_xlat63;
  u_xlat63 = exp2(x_3374);
  let x_3376 : vec4<f32> = u_xlat0;
  let x_3380 : vec4<f32> = x_44.unity_FogColor;
  let x_3383 : vec3<f32> = (vec3<f32>(x_3376.x, x_3376.y, x_3376.z) + -(vec3<f32>(x_3380.x, x_3380.y, x_3380.z)));
  let x_3384 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3383.x, x_3383.y, x_3383.z, x_3384.w);
  let x_3388 : f32 = u_xlat63;
  let x_3390 : vec4<f32> = u_xlat0;
  let x_3394 : vec4<f32> = x_44.unity_FogColor;
  let x_3396 : vec3<f32> = ((vec3<f32>(x_3388, x_3388, x_3388) * vec3<f32>(x_3390.x, x_3390.y, x_3390.z)) + vec3<f32>(x_3394.x, x_3394.y, x_3394.z));
  let x_3397 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3396.x, x_3396.y, x_3396.z, x_3397.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0);
}

