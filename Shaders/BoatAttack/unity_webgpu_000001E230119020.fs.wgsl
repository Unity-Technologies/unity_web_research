struct x_Terrain {
  x_NormalScale0 : f32,
  x_NormalScale1 : f32,
  x_NormalScale2 : f32,
  x_NormalScale3 : f32,
  x_Metallic0 : f32,
  x_Metallic1 : f32,
  x_Metallic2 : f32,
  x_Metallic3 : f32,
  x_Smoothness0 : f32,
  x_Smoothness1 : f32,
  x_Smoothness2 : f32,
  x_Smoothness3 : f32,
  x_DiffuseRemapScale0 : vec4<f32>,
  x_DiffuseRemapScale1 : vec4<f32>,
  x_DiffuseRemapScale2 : vec4<f32>,
  x_DiffuseRemapScale3 : vec4<f32>,
  x_MaskMapRemapOffset0 : vec4<f32>,
  x_MaskMapRemapOffset1 : vec4<f32>,
  x_MaskMapRemapOffset2 : vec4<f32>,
  x_MaskMapRemapOffset3 : vec4<f32>,
  x_MaskMapRemapScale0 : vec4<f32>,
  x_MaskMapRemapScale1 : vec4<f32>,
  x_MaskMapRemapScale2 : vec4<f32>,
  x_MaskMapRemapScale3 : vec4<f32>,
  x_Control_ST : vec4<f32>,
  x_Control_TexelSize : vec4<f32>,
  x_DiffuseHasAlpha0 : f32,
  x_DiffuseHasAlpha1 : f32,
  x_DiffuseHasAlpha2 : f32,
  x_DiffuseHasAlpha3 : f32,
  x_LayerHasMask0 : f32,
  x_LayerHasMask1 : f32,
  x_LayerHasMask2 : f32,
  x_LayerHasMask3 : f32,
  x_Splat0_ST : vec4<f32>,
  x_Splat1_ST : vec4<f32>,
  x_Splat2_ST : vec4<f32>,
  x_Splat3_ST : vec4<f32>,
  x_HeightTransition : f32,
  x_NumLayersCount : f32,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(1) @binding(3) var<uniform> x_30 : x_Terrain;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(3) var x_Control : texture_2d<f32>;

@group(0) @binding(16) var sampler_Control : sampler;

@group(1) @binding(0) var<uniform> x_128 : PGlobals;

@group(0) @binding(4) var x_Splat0 : texture_2d<f32>;

@group(0) @binding(17) var sampler_Splat0 : sampler;

var<private> vs_TEXCOORD1 : vec4<f32>;

@group(0) @binding(5) var x_Splat1 : texture_2d<f32>;

@group(0) @binding(6) var x_Splat2 : texture_2d<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

@group(0) @binding(7) var x_Splat3 : texture_2d<f32>;

@group(0) @binding(8) var x_Normal0 : texture_2d<f32>;

@group(0) @binding(18) var sampler_Normal0 : sampler;

@group(0) @binding(9) var x_Normal1 : texture_2d<f32>;

@group(0) @binding(10) var x_Normal2 : texture_2d<f32>;

@group(0) @binding(11) var x_Normal3 : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_842 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(15) var samplerunity_Lightmap : sampler;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(12) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(19) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(13) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(20) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(14) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(2) var<uniform> x_2586 : UnityPerDraw;

@group(1) @binding(1) var<uniform> x_2855 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb64 : bool;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat64 : f32;
  var u_xlat42 : f32;
  var u_xlat21 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu64 : u32;
  var u_xlati64 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat25 : f32;
  var u_xlat46 : f32;
  var u_xlatb4 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var x_2452 : f32;
  var u_xlat23 : f32;
  var u_xlat44 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu4 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati4 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_35 : vec4<f32> = x_30.x_MaskMapRemapScale0;
  let x_42 : vec4<f32> = x_30.x_MaskMapRemapOffset0;
  u_xlat0 = ((vec3<f32>(x_35.x, x_35.y, x_35.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_42.x, x_42.y, x_42.w));
  let x_48 : vec4<f32> = x_30.x_MaskMapRemapScale1;
  let x_53 : vec4<f32> = x_30.x_MaskMapRemapOffset1;
  let x_55 : vec3<f32> = ((vec3<f32>(x_48.x, x_48.y, x_48.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_53.x, x_53.y, x_53.w));
  let x_56 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_55.x, x_55.y, x_55.z, x_56.w);
  let x_61 : vec4<f32> = x_30.x_MaskMapRemapScale2;
  let x_66 : vec4<f32> = x_30.x_MaskMapRemapOffset2;
  let x_68 : vec3<f32> = ((vec3<f32>(x_61.x, x_61.y, x_61.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_66.x, x_66.y, x_66.w));
  let x_69 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_68.x, x_68.y, x_68.z, x_69.w);
  let x_74 : vec4<f32> = x_30.x_MaskMapRemapScale3;
  let x_79 : vec4<f32> = x_30.x_MaskMapRemapOffset3;
  let x_81 : vec3<f32> = ((vec3<f32>(x_74.x, x_74.w, x_74.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_79.x, x_79.w, x_79.y));
  let x_82 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_81.x, x_81.y, x_82.z, x_81.z);
  let x_88 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_92 : vec2<f32> = (vec2<f32>(x_88.z, x_88.w) + vec2<f32>(-1.0f, -1.0f));
  let x_93 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_92.x, x_92.y, x_93.z, x_93.w);
  let x_96 : vec4<f32> = vs_TEXCOORD0;
  let x_98 : vec4<f32> = u_xlat4;
  let x_102 : vec2<f32> = ((vec2<f32>(x_96.x, x_96.y) * vec2<f32>(x_98.x, x_98.y)) + vec2<f32>(0.5f, 0.5f));
  let x_103 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_102.x, x_102.y, x_103.z, x_103.w);
  let x_105 : vec4<f32> = u_xlat4;
  let x_108 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_110 : vec2<f32> = (vec2<f32>(x_105.x, x_105.y) * vec2<f32>(x_108.x, x_108.y));
  let x_111 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_110.x, x_110.y, x_111.z, x_111.w);
  let x_123 : vec4<f32> = u_xlat4;
  let x_133 : f32 = x_128.x_GlobalMipBias.x;
  let x_134 : vec4<f32> = textureSampleBias(x_Control, sampler_Control, vec2<f32>(x_123.x, x_123.y), x_133);
  u_xlat4 = x_134;
  let x_137 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_137, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_147 : vec4<f32> = vs_TEXCOORD1;
  let x_150 : f32 = x_128.x_GlobalMipBias.x;
  let x_151 : vec4<f32> = textureSampleBias(x_Splat0, sampler_Splat0, vec2<f32>(x_147.x, x_147.y), x_150);
  u_xlat5 = x_151;
  let x_157 : vec4<f32> = vs_TEXCOORD1;
  let x_160 : f32 = x_128.x_GlobalMipBias.x;
  let x_161 : vec4<f32> = textureSampleBias(x_Splat1, sampler_Splat0, vec2<f32>(x_157.z, x_157.w), x_160);
  u_xlat6 = x_161;
  let x_168 : vec4<f32> = vs_TEXCOORD2;
  let x_171 : f32 = x_128.x_GlobalMipBias.x;
  let x_172 : vec4<f32> = textureSampleBias(x_Splat2, sampler_Splat0, vec2<f32>(x_168.x, x_168.y), x_171);
  u_xlat7 = x_172;
  let x_178 : vec4<f32> = vs_TEXCOORD2;
  let x_181 : f32 = x_128.x_GlobalMipBias.x;
  let x_182 : vec4<f32> = textureSampleBias(x_Splat3, sampler_Splat0, vec2<f32>(x_178.z, x_178.w), x_181);
  u_xlat8 = x_182;
  let x_185 : f32 = u_xlat5.w;
  u_xlat9.x = x_185;
  let x_188 : f32 = u_xlat6.w;
  u_xlat9.y = x_188;
  let x_192 : f32 = u_xlat7.w;
  u_xlat9.z = x_192;
  let x_196 : f32 = u_xlat8.w;
  u_xlat9.w = x_196;
  let x_199 : vec4<f32> = u_xlat9;
  let x_202 : f32 = x_30.x_Smoothness0;
  let x_205 : f32 = x_30.x_Smoothness1;
  let x_208 : f32 = x_30.x_Smoothness2;
  let x_211 : f32 = x_30.x_Smoothness3;
  u_xlat10 = (x_199 * vec4<f32>(x_202, x_205, x_208, x_211));
  let x_220 : f32 = x_30.x_NumLayersCount;
  u_xlatb64 = (4.0f >= x_220);
  let x_223 : vec4<f32> = u_xlat4;
  u_xlat11 = (-(x_223) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_226 : vec4<f32> = u_xlat9;
  let x_227 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_226 + -(x_227));
  let x_230 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_230 * vec4<f32>(20.0f, 20.0f, 20.0f, 20.0f));
  let x_234 : vec4<f32> = u_xlat11;
  u_xlat11 = clamp(x_234, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_239 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat11;
  u_xlat11 = ((x_239 * vec4<f32>(0.001f, 0.001f, 0.001f, 0.001f)) + x_243);
  let x_246 : vec4<f32> = u_xlat4;
  let x_247 : vec4<f32> = u_xlat11;
  u_xlat12 = (x_246 + -(x_247));
  let x_252 : f32 = u_xlat12.x;
  let x_255 : f32 = x_30.x_DiffuseRemapScale0.w;
  u_xlat13.x = (x_252 * x_255);
  let x_259 : f32 = u_xlat12.y;
  let x_262 : f32 = x_30.x_DiffuseRemapScale1.w;
  u_xlat13.y = (x_259 * x_262);
  let x_266 : f32 = u_xlat12.z;
  let x_269 : f32 = x_30.x_DiffuseRemapScale2.w;
  u_xlat13.z = (x_266 * x_269);
  let x_273 : f32 = u_xlat12.w;
  let x_276 : f32 = x_30.x_DiffuseRemapScale3.w;
  u_xlat13.w = (x_273 * x_276);
  let x_279 : vec4<f32> = u_xlat11;
  let x_280 : vec4<f32> = u_xlat13;
  u_xlat11 = (x_279 + x_280);
  let x_282 : bool = u_xlatb64;
  let x_283 : vec4<f32> = u_xlat11;
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = select(x_284, x_283, vec4<bool>(x_282, x_282, x_282, x_282));
  let x_289 : vec4<f32> = u_xlat4;
  u_xlat64 = dot(x_289, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_291 : f32 = u_xlat64;
  u_xlat64 = (x_291 + 6.10351562e-05f);
  let x_294 : vec4<f32> = u_xlat4;
  let x_295 : f32 = u_xlat64;
  u_xlat4 = (x_294 / vec4<f32>(x_295, x_295, x_295, x_295));
  let x_298 : vec4<f32> = u_xlat4;
  let x_301 : vec4<f32> = x_30.x_DiffuseRemapScale0;
  let x_303 : vec3<f32> = (vec3<f32>(x_298.x, x_298.x, x_298.x) * vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_304 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_303.x, x_303.y, x_303.z, x_304.w);
  let x_306 : vec4<f32> = u_xlat4;
  let x_309 : vec4<f32> = x_30.x_DiffuseRemapScale1;
  let x_311 : vec3<f32> = (vec3<f32>(x_306.y, x_306.y, x_306.y) * vec3<f32>(x_309.x, x_309.y, x_309.z));
  let x_312 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_311.x, x_311.y, x_311.z, x_312.w);
  let x_314 : vec4<f32> = u_xlat6;
  let x_316 : vec4<f32> = u_xlat12;
  let x_318 : vec3<f32> = (vec3<f32>(x_314.x, x_314.y, x_314.z) * vec3<f32>(x_316.x, x_316.y, x_316.z));
  let x_319 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_318.x, x_318.y, x_318.z, x_319.w);
  let x_321 : vec4<f32> = u_xlat5;
  let x_323 : vec4<f32> = u_xlat11;
  let x_326 : vec4<f32> = u_xlat6;
  let x_328 : vec3<f32> = ((vec3<f32>(x_321.x, x_321.y, x_321.z) * vec3<f32>(x_323.x, x_323.y, x_323.z)) + vec3<f32>(x_326.x, x_326.y, x_326.z));
  let x_329 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_328.x, x_328.y, x_328.z, x_329.w);
  let x_331 : vec4<f32> = u_xlat4;
  let x_334 : vec4<f32> = x_30.x_DiffuseRemapScale2;
  let x_336 : vec3<f32> = (vec3<f32>(x_331.z, x_331.z, x_331.z) * vec3<f32>(x_334.x, x_334.y, x_334.z));
  let x_337 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_336.x, x_336.y, x_336.z, x_337.w);
  let x_339 : vec4<f32> = u_xlat7;
  let x_341 : vec4<f32> = u_xlat6;
  let x_344 : vec4<f32> = u_xlat5;
  let x_346 : vec3<f32> = ((vec3<f32>(x_339.x, x_339.y, x_339.z) * vec3<f32>(x_341.x, x_341.y, x_341.z)) + vec3<f32>(x_344.x, x_344.y, x_344.z));
  let x_347 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_346.x, x_346.y, x_346.z, x_347.w);
  let x_349 : vec4<f32> = u_xlat4;
  let x_352 : vec4<f32> = x_30.x_DiffuseRemapScale3;
  let x_354 : vec3<f32> = (vec3<f32>(x_349.w, x_349.w, x_349.w) * vec3<f32>(x_352.x, x_352.y, x_352.z));
  let x_355 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_354.x, x_354.y, x_354.z, x_355.w);
  let x_357 : vec4<f32> = u_xlat8;
  let x_359 : vec4<f32> = u_xlat6;
  let x_362 : vec4<f32> = u_xlat5;
  let x_364 : vec3<f32> = ((vec3<f32>(x_357.x, x_357.y, x_357.z) * vec3<f32>(x_359.x, x_359.y, x_359.z)) + vec3<f32>(x_362.x, x_362.y, x_362.z));
  let x_365 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_364.x, x_364.y, x_364.z, x_365.w);
  let x_372 : vec4<f32> = vs_TEXCOORD1;
  let x_375 : f32 = x_128.x_GlobalMipBias.x;
  let x_376 : vec4<f32> = textureSampleBias(x_Normal0, sampler_Normal0, vec2<f32>(x_372.x, x_372.y), x_375);
  let x_377 : vec3<f32> = vec3<f32>(x_376.x, x_376.y, x_376.w);
  let x_378 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_377.x, x_377.y, x_377.z, x_378.w);
  let x_381 : f32 = u_xlat6.x;
  let x_383 : f32 = u_xlat6.z;
  u_xlat6.x = (x_381 * x_383);
  let x_386 : vec4<f32> = u_xlat6;
  let x_391 : vec2<f32> = ((vec2<f32>(x_386.x, x_386.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_392 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_391.x, x_391.y, x_392.z, x_392.w);
  let x_394 : vec4<f32> = u_xlat6;
  let x_396 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_394.x, x_394.y), vec2<f32>(x_396.x, x_396.y));
  let x_399 : f32 = u_xlat64;
  u_xlat64 = min(x_399, 1.0f);
  let x_401 : f32 = u_xlat64;
  u_xlat64 = (-(x_401) + 1.0f);
  let x_404 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_404);
  let x_406 : f32 = u_xlat64;
  u_xlat7.z = max(x_406, 1.00000002e-16f);
  let x_410 : vec4<f32> = u_xlat6;
  let x_414 : f32 = x_30.x_NormalScale0;
  let x_416 : vec2<f32> = (vec2<f32>(x_410.x, x_410.y) * vec2<f32>(x_414, x_414));
  let x_417 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_416.x, x_416.y, x_417.z, x_417.w);
  let x_423 : vec4<f32> = vs_TEXCOORD1;
  let x_426 : f32 = x_128.x_GlobalMipBias.x;
  let x_427 : vec4<f32> = textureSampleBias(x_Normal1, sampler_Normal0, vec2<f32>(x_423.z, x_423.w), x_426);
  let x_428 : vec3<f32> = vec3<f32>(x_427.x, x_427.y, x_427.w);
  let x_429 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_428.x, x_428.y, x_428.z, x_429.w);
  let x_432 : f32 = u_xlat6.x;
  let x_434 : f32 = u_xlat6.z;
  u_xlat6.x = (x_432 * x_434);
  let x_437 : vec4<f32> = u_xlat6;
  let x_440 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_441.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat6;
  let x_445 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_443.x, x_443.y), vec2<f32>(x_445.x, x_445.y));
  let x_448 : f32 = u_xlat64;
  u_xlat64 = min(x_448, 1.0f);
  let x_450 : f32 = u_xlat64;
  u_xlat64 = (-(x_450) + 1.0f);
  let x_453 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_453);
  let x_455 : f32 = u_xlat64;
  u_xlat8.z = max(x_455, 1.00000002e-16f);
  let x_458 : vec4<f32> = u_xlat6;
  let x_461 : f32 = x_30.x_NormalScale1;
  let x_463 : f32 = x_30.x_NormalScale1;
  let x_464 : vec2<f32> = vec2<f32>(x_461, x_463);
  let x_468 : vec2<f32> = (vec2<f32>(x_458.x, x_458.y) * vec2<f32>(x_464.x, x_464.y));
  let x_469 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_469.z, x_469.w);
  let x_471 : vec4<f32> = u_xlat4;
  let x_473 : vec4<f32> = u_xlat8;
  let x_475 : vec3<f32> = (vec3<f32>(x_471.y, x_471.y, x_471.y) * vec3<f32>(x_473.x, x_473.y, x_473.z));
  let x_476 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_475.x, x_475.y, x_475.z, x_476.w);
  let x_478 : vec4<f32> = u_xlat4;
  let x_480 : vec4<f32> = u_xlat7;
  let x_483 : vec4<f32> = u_xlat6;
  let x_485 : vec3<f32> = ((vec3<f32>(x_478.x, x_478.x, x_478.x) * vec3<f32>(x_480.x, x_480.y, x_480.z)) + vec3<f32>(x_483.x, x_483.y, x_483.z));
  let x_486 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_485.x, x_485.y, x_485.z, x_486.w);
  let x_492 : vec4<f32> = vs_TEXCOORD2;
  let x_495 : f32 = x_128.x_GlobalMipBias.x;
  let x_496 : vec4<f32> = textureSampleBias(x_Normal2, sampler_Normal0, vec2<f32>(x_492.x, x_492.y), x_495);
  let x_497 : vec3<f32> = vec3<f32>(x_496.x, x_496.y, x_496.w);
  let x_498 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_497.x, x_497.y, x_497.z, x_498.w);
  let x_501 : f32 = u_xlat7.x;
  let x_503 : f32 = u_xlat7.z;
  u_xlat7.x = (x_501 * x_503);
  let x_506 : vec4<f32> = u_xlat7;
  let x_509 : vec2<f32> = ((vec2<f32>(x_506.x, x_506.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_510 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
  let x_512 : vec4<f32> = u_xlat7;
  let x_514 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_512.x, x_512.y), vec2<f32>(x_514.x, x_514.y));
  let x_517 : f32 = u_xlat64;
  u_xlat64 = min(x_517, 1.0f);
  let x_519 : f32 = u_xlat64;
  u_xlat64 = (-(x_519) + 1.0f);
  let x_522 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_522);
  let x_524 : f32 = u_xlat64;
  u_xlat8.z = max(x_524, 1.00000002e-16f);
  let x_527 : vec4<f32> = u_xlat7;
  let x_531 : f32 = x_30.x_NormalScale2;
  let x_533 : f32 = x_30.x_NormalScale2;
  let x_534 : vec2<f32> = vec2<f32>(x_531, x_533);
  let x_538 : vec2<f32> = (vec2<f32>(x_527.x, x_527.y) * vec2<f32>(x_534.x, x_534.y));
  let x_539 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_539.z, x_539.w);
  let x_541 : vec4<f32> = u_xlat4;
  let x_543 : vec4<f32> = u_xlat8;
  let x_546 : vec4<f32> = u_xlat6;
  let x_548 : vec3<f32> = ((vec3<f32>(x_541.z, x_541.z, x_541.z) * vec3<f32>(x_543.x, x_543.y, x_543.z)) + vec3<f32>(x_546.x, x_546.y, x_546.z));
  let x_549 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_548.x, x_548.y, x_548.z, x_549.w);
  let x_555 : vec4<f32> = vs_TEXCOORD2;
  let x_558 : f32 = x_128.x_GlobalMipBias.x;
  let x_559 : vec4<f32> = textureSampleBias(x_Normal3, sampler_Normal0, vec2<f32>(x_555.z, x_555.w), x_558);
  let x_560 : vec3<f32> = vec3<f32>(x_559.x, x_559.y, x_559.w);
  let x_561 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_560.x, x_560.y, x_560.z, x_561.w);
  let x_564 : f32 = u_xlat7.x;
  let x_566 : f32 = u_xlat7.z;
  u_xlat7.x = (x_564 * x_566);
  let x_569 : vec4<f32> = u_xlat7;
  let x_572 : vec2<f32> = ((vec2<f32>(x_569.x, x_569.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_573 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_572.x, x_572.y, x_573.z, x_573.w);
  let x_575 : vec4<f32> = u_xlat7;
  let x_577 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_575.x, x_575.y), vec2<f32>(x_577.x, x_577.y));
  let x_580 : f32 = u_xlat64;
  u_xlat64 = min(x_580, 1.0f);
  let x_582 : f32 = u_xlat64;
  u_xlat64 = (-(x_582) + 1.0f);
  let x_585 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_585);
  let x_587 : f32 = u_xlat64;
  u_xlat8.z = max(x_587, 1.00000002e-16f);
  let x_590 : vec4<f32> = u_xlat7;
  let x_594 : f32 = x_30.x_NormalScale3;
  let x_596 : f32 = x_30.x_NormalScale3;
  let x_597 : vec2<f32> = vec2<f32>(x_594, x_596);
  let x_601 : vec2<f32> = (vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_597.x, x_597.y));
  let x_602 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_601.x, x_601.y, x_602.z, x_602.w);
  let x_604 : vec4<f32> = u_xlat4;
  let x_606 : vec4<f32> = u_xlat8;
  let x_609 : vec4<f32> = u_xlat6;
  let x_611 : vec3<f32> = ((vec3<f32>(x_604.w, x_604.w, x_604.w) * vec3<f32>(x_606.x, x_606.y, x_606.z)) + vec3<f32>(x_609.x, x_609.y, x_609.z));
  let x_612 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_611.x, x_611.y, x_611.z, x_612.w);
  let x_615 : f32 = u_xlat6.z;
  u_xlat6.w = (x_615 + 0.00001f);
  let x_619 : vec4<f32> = u_xlat6;
  let x_621 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_619.x, x_619.y, x_619.w), vec3<f32>(x_621.x, x_621.y, x_621.w));
  let x_624 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_624);
  let x_626 : f32 = u_xlat64;
  let x_628 : vec4<f32> = u_xlat6;
  let x_630 : vec3<f32> = (vec3<f32>(x_626, x_626, x_626) * vec3<f32>(x_628.x, x_628.y, x_628.w));
  let x_631 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
  let x_634 : f32 = x_30.x_MaskMapRemapScale0.y;
  u_xlat7.x = x_634;
  let x_637 : f32 = x_30.x_MaskMapRemapScale1.y;
  u_xlat7.y = x_637;
  let x_640 : f32 = x_30.x_MaskMapRemapScale2.y;
  u_xlat7.z = x_640;
  let x_643 : f32 = x_30.x_MaskMapRemapScale3.y;
  u_xlat7.w = x_643;
  let x_646 : f32 = x_30.x_MaskMapRemapOffset0.y;
  u_xlat8.x = x_646;
  let x_649 : f32 = x_30.x_MaskMapRemapOffset1.y;
  u_xlat8.y = x_649;
  let x_652 : f32 = x_30.x_MaskMapRemapOffset2.y;
  u_xlat8.z = x_652;
  let x_655 : f32 = x_30.x_MaskMapRemapOffset3.y;
  u_xlat8.w = x_655;
  let x_657 : vec4<f32> = u_xlat7;
  let x_658 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_657 + x_658);
  let x_661 : f32 = u_xlat0.z;
  u_xlat8.x = x_661;
  let x_664 : f32 = u_xlat1.z;
  u_xlat8.y = x_664;
  let x_667 : f32 = u_xlat2.z;
  u_xlat8.z = x_667;
  let x_670 : f32 = u_xlat3.y;
  u_xlat8.w = x_670;
  let x_672 : vec4<f32> = u_xlat9;
  let x_675 : f32 = x_30.x_Smoothness0;
  let x_677 : f32 = x_30.x_Smoothness1;
  let x_679 : f32 = x_30.x_Smoothness2;
  let x_681 : f32 = x_30.x_Smoothness3;
  let x_684 : vec4<f32> = u_xlat8;
  u_xlat8 = ((-(x_672) * vec4<f32>(x_675, x_677, x_679, x_681)) + x_684);
  let x_688 : f32 = x_30.x_LayerHasMask0;
  let x_691 : f32 = x_30.x_LayerHasMask1;
  let x_694 : f32 = x_30.x_LayerHasMask2;
  let x_697 : f32 = x_30.x_LayerHasMask3;
  let x_699 : vec4<f32> = u_xlat8;
  let x_701 : vec4<f32> = u_xlat10;
  u_xlat8 = ((vec4<f32>(x_688, x_691, x_694, x_697) * x_699) + x_701);
  let x_704 : vec4<f32> = u_xlat4;
  let x_705 : vec4<f32> = u_xlat8;
  u_xlat42 = dot(x_704, x_705);
  let x_708 : f32 = u_xlat0.x;
  u_xlat8.x = x_708;
  let x_711 : f32 = u_xlat1.x;
  u_xlat8.y = x_711;
  let x_714 : f32 = u_xlat2.x;
  u_xlat8.z = x_714;
  let x_717 : f32 = u_xlat3.x;
  u_xlat8.w = x_717;
  let x_719 : vec4<f32> = u_xlat8;
  let x_722 : f32 = x_30.x_Metallic0;
  let x_725 : f32 = x_30.x_Metallic1;
  let x_728 : f32 = x_30.x_Metallic2;
  let x_731 : f32 = x_30.x_Metallic3;
  u_xlat8 = (x_719 + -(vec4<f32>(x_722, x_725, x_728, x_731)));
  let x_736 : f32 = x_30.x_LayerHasMask0;
  let x_738 : f32 = x_30.x_LayerHasMask1;
  let x_740 : f32 = x_30.x_LayerHasMask2;
  let x_742 : f32 = x_30.x_LayerHasMask3;
  let x_744 : vec4<f32> = u_xlat8;
  let x_747 : f32 = x_30.x_Metallic0;
  let x_749 : f32 = x_30.x_Metallic1;
  let x_751 : f32 = x_30.x_Metallic2;
  let x_753 : f32 = x_30.x_Metallic3;
  u_xlat8 = ((vec4<f32>(x_736, x_738, x_740, x_742) * x_744) + vec4<f32>(x_747, x_749, x_751, x_753));
  let x_756 : vec4<f32> = u_xlat4;
  let x_757 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_756, x_757);
  let x_761 : f32 = u_xlat0.y;
  u_xlat3.x = x_761;
  let x_764 : f32 = u_xlat1.y;
  u_xlat3.y = x_764;
  let x_767 : f32 = u_xlat2.y;
  u_xlat3.z = x_767;
  let x_769 : vec4<f32> = u_xlat7;
  let x_771 : vec4<f32> = u_xlat3;
  u_xlat1 = (-(x_769) + x_771);
  let x_774 : f32 = x_30.x_LayerHasMask0;
  let x_776 : f32 = x_30.x_LayerHasMask1;
  let x_778 : f32 = x_30.x_LayerHasMask2;
  let x_780 : f32 = x_30.x_LayerHasMask3;
  let x_782 : vec4<f32> = u_xlat1;
  let x_784 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec4<f32>(x_774, x_776, x_778, x_780) * x_782) + x_784);
  let x_787 : vec4<f32> = u_xlat4;
  let x_788 : vec4<f32> = u_xlat1;
  u_xlat21 = dot(x_787, x_788);
  let x_790 : vec4<f32> = u_xlat6;
  let x_793 : vec4<f32> = vs_TEXCOORD5;
  let x_795 : vec3<f32> = (vec3<f32>(x_790.y, x_790.y, x_790.y) * vec3<f32>(x_793.x, x_793.y, x_793.z));
  let x_796 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_795.x, x_795.y, x_795.z, x_796.w);
  let x_798 : vec4<f32> = u_xlat6;
  let x_801 : vec4<f32> = vs_TEXCOORD4;
  let x_805 : vec4<f32> = u_xlat1;
  let x_807 : vec3<f32> = ((vec3<f32>(x_798.x, x_798.x, x_798.x) * -(vec3<f32>(x_801.x, x_801.y, x_801.z))) + vec3<f32>(x_805.x, x_805.y, x_805.z));
  let x_808 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_807.x, x_807.y, x_807.z, x_808.w);
  let x_810 : vec4<f32> = u_xlat6;
  let x_813 : vec4<f32> = vs_TEXCOORD3;
  let x_816 : vec4<f32> = u_xlat1;
  let x_818 : vec3<f32> = ((vec3<f32>(x_810.z, x_810.z, x_810.z) * vec3<f32>(x_813.x, x_813.y, x_813.z)) + vec3<f32>(x_816.x, x_816.y, x_816.z));
  let x_819 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
  let x_821 : vec4<f32> = u_xlat1;
  let x_823 : vec4<f32> = u_xlat1;
  u_xlat64 = dot(vec3<f32>(x_821.x, x_821.y, x_821.z), vec3<f32>(x_823.x, x_823.y, x_823.z));
  let x_826 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_826);
  let x_828 : f32 = u_xlat64;
  let x_830 : vec4<f32> = u_xlat1;
  let x_832 : vec3<f32> = (vec3<f32>(x_828, x_828, x_828) * vec3<f32>(x_830.x, x_830.y, x_830.z));
  let x_833 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_832.x, x_832.y, x_832.z, x_833.w);
  let x_837 : vec3<f32> = vs_TEXCOORD7;
  let x_844 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres0;
  let x_847 : vec3<f32> = (x_837 + -(vec3<f32>(x_844.x, x_844.y, x_844.z)));
  let x_848 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
  let x_850 : vec3<f32> = vs_TEXCOORD7;
  let x_852 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres1;
  let x_855 : vec3<f32> = (x_850 + -(vec3<f32>(x_852.x, x_852.y, x_852.z)));
  let x_856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
  let x_858 : vec3<f32> = vs_TEXCOORD7;
  let x_860 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres2;
  let x_863 : vec3<f32> = (x_858 + -(vec3<f32>(x_860.x, x_860.y, x_860.z)));
  let x_864 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_863.x, x_863.y, x_863.z, x_864.w);
  let x_866 : vec3<f32> = vs_TEXCOORD7;
  let x_868 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres3;
  let x_871 : vec3<f32> = (x_866 + -(vec3<f32>(x_868.x, x_868.y, x_868.z)));
  let x_872 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_871.x, x_871.y, x_871.z, x_872.w);
  let x_874 : vec4<f32> = u_xlat2;
  let x_876 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_874.x, x_874.y, x_874.z), vec3<f32>(x_876.x, x_876.y, x_876.z));
  let x_880 : vec4<f32> = u_xlat3;
  let x_882 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_880.x, x_880.y, x_880.z), vec3<f32>(x_882.x, x_882.y, x_882.z));
  let x_886 : vec4<f32> = u_xlat4;
  let x_888 : vec4<f32> = u_xlat4;
  u_xlat2.z = dot(vec3<f32>(x_886.x, x_886.y, x_886.z), vec3<f32>(x_888.x, x_888.y, x_888.z));
  let x_892 : vec4<f32> = u_xlat6;
  let x_894 : vec4<f32> = u_xlat6;
  u_xlat2.w = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_900 : vec4<f32> = u_xlat2;
  let x_902 : vec4<f32> = x_842.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_900 < x_902);
  let x_905 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_905);
  let x_909 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_909);
  let x_913 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_913);
  let x_917 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_917);
  let x_921 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_921);
  let x_926 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_926);
  let x_930 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_930);
  let x_933 : vec4<f32> = u_xlat2;
  let x_935 : vec4<f32> = u_xlat3;
  let x_937 : vec3<f32> = (vec3<f32>(x_933.x, x_933.y, x_933.z) + vec3<f32>(x_935.y, x_935.z, x_935.w));
  let x_938 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_937.x, x_937.y, x_937.z, x_938.w);
  let x_940 : vec4<f32> = u_xlat2;
  let x_943 : vec3<f32> = max(vec3<f32>(x_940.x, x_940.y, x_940.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_944 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_944.x, x_943.x, x_943.y, x_943.z);
  let x_946 : vec4<f32> = u_xlat3;
  u_xlat64 = dot(x_946, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_950 : f32 = u_xlat64;
  u_xlat64 = (-(x_950) + 4.0f);
  let x_955 : f32 = u_xlat64;
  u_xlatu64 = u32(x_955);
  let x_959 : u32 = u_xlatu64;
  u_xlati64 = (bitcast<i32>(x_959) << bitcast<u32>(2i));
  let x_962 : vec3<f32> = vs_TEXCOORD7;
  let x_964 : i32 = u_xlati64;
  let x_967 : i32 = u_xlati64;
  let x_971 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_964 + 1i) / 4i)][((x_967 + 1i) % 4i)];
  let x_973 : vec3<f32> = (vec3<f32>(x_962.y, x_962.y, x_962.y) * vec3<f32>(x_971.x, x_971.y, x_971.z));
  let x_974 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_973.x, x_973.y, x_973.z, x_974.w);
  let x_976 : i32 = u_xlati64;
  let x_978 : i32 = u_xlati64;
  let x_981 : vec4<f32> = x_842.x_MainLightWorldToShadow[(x_976 / 4i)][(x_978 % 4i)];
  let x_983 : vec3<f32> = vs_TEXCOORD7;
  let x_986 : vec4<f32> = u_xlat2;
  let x_988 : vec3<f32> = ((vec3<f32>(x_981.x, x_981.y, x_981.z) * vec3<f32>(x_983.x, x_983.x, x_983.x)) + vec3<f32>(x_986.x, x_986.y, x_986.z));
  let x_989 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_988.x, x_988.y, x_988.z, x_989.w);
  let x_991 : i32 = u_xlati64;
  let x_994 : i32 = u_xlati64;
  let x_998 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_991 + 2i) / 4i)][((x_994 + 2i) % 4i)];
  let x_1000 : vec3<f32> = vs_TEXCOORD7;
  let x_1003 : vec4<f32> = u_xlat2;
  let x_1005 : vec3<f32> = ((vec3<f32>(x_998.x, x_998.y, x_998.z) * vec3<f32>(x_1000.z, x_1000.z, x_1000.z)) + vec3<f32>(x_1003.x, x_1003.y, x_1003.z));
  let x_1006 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1005.x, x_1005.y, x_1005.z, x_1006.w);
  let x_1008 : vec4<f32> = u_xlat2;
  let x_1010 : i32 = u_xlati64;
  let x_1013 : i32 = u_xlati64;
  let x_1017 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_1010 + 3i) / 4i)][((x_1013 + 3i) % 4i)];
  let x_1019 : vec3<f32> = (vec3<f32>(x_1008.x, x_1008.y, x_1008.z) + vec3<f32>(x_1017.x, x_1017.y, x_1017.z));
  let x_1020 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1019.x, x_1019.y, x_1019.z, x_1020.w);
  let x_1023 : f32 = vs_TEXCOORD7.y;
  let x_1025 : f32 = x_128.unity_MatrixV[1i].z;
  u_xlat64 = (x_1023 * x_1025);
  let x_1028 : f32 = x_128.unity_MatrixV[0i].z;
  let x_1030 : f32 = vs_TEXCOORD7.x;
  let x_1032 : f32 = u_xlat64;
  u_xlat64 = ((x_1028 * x_1030) + x_1032);
  let x_1035 : f32 = x_128.unity_MatrixV[2i].z;
  let x_1037 : f32 = vs_TEXCOORD7.z;
  let x_1039 : f32 = u_xlat64;
  u_xlat64 = ((x_1035 * x_1037) + x_1039);
  let x_1041 : f32 = u_xlat64;
  let x_1043 : f32 = x_128.unity_MatrixV[3i].z;
  u_xlat64 = (x_1041 + x_1043);
  let x_1045 : f32 = u_xlat64;
  let x_1048 : f32 = x_128.x_ProjectionParams.y;
  u_xlat64 = (-(x_1045) + -(x_1048));
  let x_1051 : f32 = u_xlat64;
  u_xlat64 = max(x_1051, 0.0f);
  let x_1053 : f32 = u_xlat64;
  let x_1055 : f32 = x_128.unity_FogParams.x;
  u_xlat64 = (x_1053 * x_1055);
  let x_1062 : vec4<f32> = vs_TEXCOORD0;
  let x_1065 : f32 = x_128.x_GlobalMipBias.x;
  let x_1066 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, vec2<f32>(x_1062.z, x_1062.w), x_1065);
  u_xlat3 = x_1066;
  let x_1071 : vec4<f32> = vs_TEXCOORD0;
  let x_1074 : f32 = x_128.x_GlobalMipBias.x;
  let x_1075 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, vec2<f32>(x_1071.z, x_1071.w), x_1074);
  let x_1076 : vec3<f32> = vec3<f32>(x_1075.x, x_1075.y, x_1075.z);
  let x_1077 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1076.x, x_1076.y, x_1076.z, x_1077.w);
  let x_1079 : vec4<f32> = u_xlat3;
  let x_1083 : vec3<f32> = (vec3<f32>(x_1079.x, x_1079.y, x_1079.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1084 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1083.x, x_1083.y, x_1083.z, x_1084.w);
  let x_1087 : vec4<f32> = u_xlat1;
  let x_1089 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_1087.x, x_1087.y, x_1087.z), vec3<f32>(x_1089.x, x_1089.y, x_1089.z));
  let x_1092 : f32 = u_xlat65;
  u_xlat65 = (x_1092 + 0.5f);
  let x_1094 : f32 = u_xlat65;
  let x_1096 : vec4<f32> = u_xlat4;
  let x_1098 : vec3<f32> = (vec3<f32>(x_1094, x_1094, x_1094) * vec3<f32>(x_1096.x, x_1096.y, x_1096.z));
  let x_1099 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1098.x, x_1098.y, x_1098.z, x_1099.w);
  let x_1102 : f32 = u_xlat3.w;
  u_xlat65 = max(x_1102, 0.0001f);
  let x_1105 : vec4<f32> = u_xlat3;
  let x_1107 : f32 = u_xlat65;
  let x_1109 : vec3<f32> = (vec3<f32>(x_1105.x, x_1105.y, x_1105.z) / vec3<f32>(x_1107, x_1107, x_1107));
  let x_1110 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1109.x, x_1109.y, x_1109.z, x_1110.w);
  let x_1114 : vec4<f32> = x_128.x_ScaledScreenParams;
  let x_1115 : vec2<f32> = vec2<f32>(x_1114.x, x_1114.y);
  let x_1119 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1115.x, x_1115.y));
  let x_1120 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1119.x, x_1119.y, x_1120.z, x_1120.w);
  let x_1122 : vec4<f32> = u_xlat4;
  let x_1124 : vec4<f32> = hlslcc_FragCoord;
  let x_1126 : vec2<f32> = (vec2<f32>(x_1122.x, x_1122.y) * vec2<f32>(x_1124.x, x_1124.y));
  let x_1127 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1126.x, x_1126.y, x_1127.z, x_1127.w);
  let x_1130 : f32 = u_xlat4.y;
  let x_1132 : f32 = x_128.x_ScaleBiasRt.x;
  let x_1135 : f32 = x_128.x_ScaleBiasRt.y;
  u_xlat65 = ((x_1130 * x_1132) + x_1135);
  let x_1137 : f32 = u_xlat65;
  u_xlat4.z = (-(x_1137) + 1.0f);
  let x_1142 : f32 = u_xlat0.x;
  u_xlat65 = ((-(x_1142) * 0.959999979f) + 0.959999979f);
  let x_1148 : f32 = u_xlat42;
  let x_1149 : f32 = u_xlat65;
  u_xlat66 = (x_1148 + -(x_1149));
  let x_1152 : f32 = u_xlat65;
  let x_1154 : vec4<f32> = u_xlat5;
  let x_1156 : vec3<f32> = (vec3<f32>(x_1152, x_1152, x_1152) * vec3<f32>(x_1154.x, x_1154.y, x_1154.z));
  let x_1157 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1156.x, x_1156.y, x_1156.z, x_1157.w);
  let x_1159 : vec4<f32> = u_xlat5;
  let x_1163 : vec3<f32> = (vec3<f32>(x_1159.x, x_1159.y, x_1159.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_1164 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1163.x, x_1163.y, x_1163.z, x_1164.w);
  let x_1166 : vec3<f32> = u_xlat0;
  let x_1168 : vec4<f32> = u_xlat5;
  let x_1173 : vec3<f32> = ((vec3<f32>(x_1166.x, x_1166.x, x_1166.x) * vec3<f32>(x_1168.x, x_1168.y, x_1168.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_1174 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1173.x, x_1173.y, x_1173.z, x_1174.w);
  let x_1176 : f32 = u_xlat42;
  u_xlat0.x = (-(x_1176) + 1.0f);
  let x_1181 : f32 = u_xlat0.x;
  let x_1183 : f32 = u_xlat0.x;
  u_xlat42 = (x_1181 * x_1183);
  let x_1185 : f32 = u_xlat42;
  u_xlat42 = max(x_1185, 0.0078125f);
  let x_1188 : f32 = u_xlat42;
  let x_1189 : f32 = u_xlat42;
  u_xlat65 = (x_1188 * x_1189);
  let x_1191 : f32 = u_xlat66;
  u_xlat66 = (x_1191 + 1.0f);
  let x_1193 : f32 = u_xlat66;
  u_xlat66 = clamp(x_1193, 0.0f, 1.0f);
  let x_1196 : f32 = u_xlat42;
  u_xlat25 = ((x_1196 * 4.0f) + 2.0f);
  let x_1204 : vec4<f32> = u_xlat4;
  let x_1207 : f32 = x_128.x_GlobalMipBias.x;
  let x_1208 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1204.x, x_1204.z), x_1207);
  u_xlat4.x = x_1208.x;
  let x_1213 : f32 = u_xlat4.x;
  u_xlat46 = (x_1213 + -1.0f);
  let x_1216 : f32 = x_128.x_AmbientOcclusionParam.w;
  let x_1217 : f32 = u_xlat46;
  u_xlat46 = ((x_1216 * x_1217) + 1.0f);
  let x_1220 : f32 = u_xlat21;
  let x_1222 : f32 = u_xlat4.x;
  u_xlat21 = min(x_1220, x_1222);
  let x_1226 : f32 = x_842.x_MainLightShadowParams.y;
  u_xlatb4 = (0.0f < x_1226);
  let x_1228 : bool = u_xlatb4;
  if (x_1228) {
    let x_1232 : f32 = x_842.x_MainLightShadowParams.y;
    u_xlatb4 = (x_1232 == 1.0f);
    let x_1234 : bool = u_xlatb4;
    if (x_1234) {
      let x_1237 : vec4<f32> = u_xlat2;
      let x_1240 : vec4<f32> = x_842.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y) + x_1240);
      let x_1243 : vec4<f32> = u_xlat7;
      let x_1244 : vec2<f32> = vec2<f32>(x_1243.x, x_1243.y);
      let x_1246 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_1244.x, x_1244.y, x_1246);
      let x_1258 : vec3<f32> = txVec0;
      let x_1260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1258.xy, x_1258.z);
      u_xlat8.x = x_1260;
      let x_1263 : vec4<f32> = u_xlat7;
      let x_1264 : vec2<f32> = vec2<f32>(x_1263.z, x_1263.w);
      let x_1266 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_1264.x, x_1264.y, x_1266);
      let x_1273 : vec3<f32> = txVec1;
      let x_1275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1273.xy, x_1273.z);
      u_xlat8.y = x_1275;
      let x_1277 : vec4<f32> = u_xlat2;
      let x_1280 : vec4<f32> = x_842.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1277.x, x_1277.y, x_1277.x, x_1277.y) + x_1280);
      let x_1283 : vec4<f32> = u_xlat7;
      let x_1284 : vec2<f32> = vec2<f32>(x_1283.x, x_1283.y);
      let x_1286 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_1284.x, x_1284.y, x_1286);
      let x_1293 : vec3<f32> = txVec2;
      let x_1295 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1293.xy, x_1293.z);
      u_xlat8.z = x_1295;
      let x_1298 : vec4<f32> = u_xlat7;
      let x_1299 : vec2<f32> = vec2<f32>(x_1298.z, x_1298.w);
      let x_1301 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_1299.x, x_1299.y, x_1301);
      let x_1308 : vec3<f32> = txVec3;
      let x_1310 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1308.xy, x_1308.z);
      u_xlat8.w = x_1310;
      let x_1312 : vec4<f32> = u_xlat8;
      u_xlat4.x = dot(x_1312, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1320 : f32 = x_842.x_MainLightShadowParams.y;
      u_xlatb67 = (x_1320 == 2.0f);
      let x_1322 : bool = u_xlatb67;
      if (x_1322) {
        let x_1325 : vec4<f32> = u_xlat2;
        let x_1328 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1331 : vec2<f32> = ((vec2<f32>(x_1325.x, x_1325.y) * vec2<f32>(x_1328.z, x_1328.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1332 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1331.x, x_1331.y, x_1332.z, x_1332.w);
        let x_1334 : vec4<f32> = u_xlat7;
        let x_1336 : vec2<f32> = floor(vec2<f32>(x_1334.x, x_1334.y));
        let x_1337 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1336.x, x_1336.y, x_1337.z, x_1337.w);
        let x_1341 : vec4<f32> = u_xlat2;
        let x_1344 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1347 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1341.x, x_1341.y) * vec2<f32>(x_1344.z, x_1344.w)) + -(vec2<f32>(x_1347.x, x_1347.y)));
        let x_1351 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1351.x, x_1351.x, x_1351.y, x_1351.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1355 : vec4<f32> = u_xlat8;
        let x_1357 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1355.x, x_1355.x, x_1355.z, x_1355.z) * vec4<f32>(x_1357.x, x_1357.x, x_1357.z, x_1357.z));
        let x_1360 : vec4<f32> = u_xlat9;
        let x_1364 : vec2<f32> = (vec2<f32>(x_1360.y, x_1360.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1365 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1364.x, x_1365.y, x_1364.y, x_1365.w);
        let x_1367 : vec4<f32> = u_xlat9;
        let x_1370 : vec2<f32> = u_xlat49;
        let x_1372 : vec2<f32> = ((vec2<f32>(x_1367.x, x_1367.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1370));
        let x_1373 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1372.x, x_1372.y, x_1373.z, x_1373.w);
        let x_1376 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_1376) + vec2<f32>(1.0f, 1.0f));
        let x_1379 : vec2<f32> = u_xlat49;
        let x_1381 : vec2<f32> = min(x_1379, vec2<f32>(0.0f, 0.0f));
        let x_1382 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1381.x, x_1381.y, x_1382.z, x_1382.w);
        let x_1384 : vec4<f32> = u_xlat10;
        let x_1387 : vec4<f32> = u_xlat10;
        let x_1390 : vec2<f32> = u_xlat51;
        let x_1391 : vec2<f32> = ((-(vec2<f32>(x_1384.x, x_1384.y)) * vec2<f32>(x_1387.x, x_1387.y)) + x_1390);
        let x_1392 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1391.x, x_1391.y, x_1392.z, x_1392.w);
        let x_1394 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_1394, vec2<f32>(0.0f, 0.0f));
        let x_1396 : vec2<f32> = u_xlat49;
        let x_1398 : vec2<f32> = u_xlat49;
        let x_1400 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_1396) * x_1398) + vec2<f32>(x_1400.y, x_1400.w));
        let x_1403 : vec4<f32> = u_xlat10;
        let x_1405 : vec2<f32> = (vec2<f32>(x_1403.x, x_1403.y) + vec2<f32>(1.0f, 1.0f));
        let x_1406 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1405.x, x_1405.y, x_1406.z, x_1406.w);
        let x_1408 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_1408 + vec2<f32>(1.0f, 1.0f));
        let x_1410 : vec4<f32> = u_xlat9;
        let x_1414 : vec2<f32> = (vec2<f32>(x_1410.x, x_1410.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1415 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1414.x, x_1414.y, x_1415.z, x_1415.w);
        let x_1417 : vec2<f32> = u_xlat51;
        let x_1418 : vec2<f32> = (x_1417 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1419 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1418.x, x_1418.y, x_1419.z, x_1419.w);
        let x_1421 : vec4<f32> = u_xlat10;
        let x_1423 : vec2<f32> = (vec2<f32>(x_1421.x, x_1421.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1424 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1423.x, x_1423.y, x_1424.z, x_1424.w);
        let x_1426 : vec2<f32> = u_xlat49;
        let x_1427 : vec2<f32> = (x_1426 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1428 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1427.x, x_1427.y, x_1428.z, x_1428.w);
        let x_1430 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1430.y, x_1430.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1434 : f32 = u_xlat10.x;
        u_xlat11.z = x_1434;
        let x_1437 : f32 = u_xlat49.x;
        u_xlat11.w = x_1437;
        let x_1440 : f32 = u_xlat12.x;
        u_xlat9.z = x_1440;
        let x_1443 : f32 = u_xlat8.x;
        u_xlat9.w = x_1443;
        let x_1445 : vec4<f32> = u_xlat9;
        let x_1447 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1445.z, x_1445.w, x_1445.x, x_1445.z) + vec4<f32>(x_1447.z, x_1447.w, x_1447.x, x_1447.z));
        let x_1451 : f32 = u_xlat11.y;
        u_xlat10.z = x_1451;
        let x_1454 : f32 = u_xlat49.y;
        u_xlat10.w = x_1454;
        let x_1457 : f32 = u_xlat9.y;
        u_xlat12.z = x_1457;
        let x_1460 : f32 = u_xlat8.z;
        u_xlat12.w = x_1460;
        let x_1462 : vec4<f32> = u_xlat10;
        let x_1464 : vec4<f32> = u_xlat12;
        let x_1466 : vec3<f32> = (vec3<f32>(x_1462.z, x_1462.y, x_1462.w) + vec3<f32>(x_1464.z, x_1464.y, x_1464.w));
        let x_1467 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1466.x, x_1466.y, x_1466.z, x_1467.w);
        let x_1469 : vec4<f32> = u_xlat9;
        let x_1471 : vec4<f32> = u_xlat13;
        let x_1473 : vec3<f32> = (vec3<f32>(x_1469.x, x_1469.z, x_1469.w) / vec3<f32>(x_1471.z, x_1471.w, x_1471.y));
        let x_1474 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1473.x, x_1473.y, x_1473.z, x_1474.w);
        let x_1476 : vec4<f32> = u_xlat9;
        let x_1481 : vec3<f32> = (vec3<f32>(x_1476.x, x_1476.y, x_1476.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1482 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1481.x, x_1481.y, x_1481.z, x_1482.w);
        let x_1484 : vec4<f32> = u_xlat12;
        let x_1486 : vec4<f32> = u_xlat8;
        let x_1488 : vec3<f32> = (vec3<f32>(x_1484.z, x_1484.y, x_1484.w) / vec3<f32>(x_1486.x, x_1486.y, x_1486.z));
        let x_1489 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1488.x, x_1488.y, x_1488.z, x_1489.w);
        let x_1491 : vec4<f32> = u_xlat10;
        let x_1493 : vec3<f32> = (vec3<f32>(x_1491.x, x_1491.y, x_1491.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1494 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1493.x, x_1493.y, x_1493.z, x_1494.w);
        let x_1496 : vec4<f32> = u_xlat9;
        let x_1499 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1501 : vec3<f32> = (vec3<f32>(x_1496.y, x_1496.x, x_1496.z) * vec3<f32>(x_1499.x, x_1499.x, x_1499.x));
        let x_1502 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1501.x, x_1501.y, x_1501.z, x_1502.w);
        let x_1504 : vec4<f32> = u_xlat10;
        let x_1507 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1509 : vec3<f32> = (vec3<f32>(x_1504.x, x_1504.y, x_1504.z) * vec3<f32>(x_1507.y, x_1507.y, x_1507.y));
        let x_1510 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1509.x, x_1509.y, x_1509.z, x_1510.w);
        let x_1513 : f32 = u_xlat10.x;
        u_xlat9.w = x_1513;
        let x_1515 : vec4<f32> = u_xlat7;
        let x_1518 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1521 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1515.x, x_1515.y, x_1515.x, x_1515.y) * vec4<f32>(x_1518.x, x_1518.y, x_1518.x, x_1518.y)) + vec4<f32>(x_1521.y, x_1521.w, x_1521.x, x_1521.w));
        let x_1524 : vec4<f32> = u_xlat7;
        let x_1527 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1530 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1524.x, x_1524.y) * vec2<f32>(x_1527.x, x_1527.y)) + vec2<f32>(x_1530.z, x_1530.w));
        let x_1534 : f32 = u_xlat9.y;
        u_xlat10.w = x_1534;
        let x_1536 : vec4<f32> = u_xlat10;
        let x_1537 : vec2<f32> = vec2<f32>(x_1536.y, x_1536.z);
        let x_1538 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1538.x, x_1537.x, x_1538.z, x_1537.y);
        let x_1540 : vec4<f32> = u_xlat7;
        let x_1543 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1546 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1540.x, x_1540.y, x_1540.x, x_1540.y) * vec4<f32>(x_1543.x, x_1543.y, x_1543.x, x_1543.y)) + vec4<f32>(x_1546.x, x_1546.y, x_1546.z, x_1546.y));
        let x_1549 : vec4<f32> = u_xlat7;
        let x_1552 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1555 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1549.x, x_1549.y, x_1549.x, x_1549.y) * vec4<f32>(x_1552.x, x_1552.y, x_1552.x, x_1552.y)) + vec4<f32>(x_1555.w, x_1555.y, x_1555.w, x_1555.z));
        let x_1558 : vec4<f32> = u_xlat7;
        let x_1561 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1564 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1558.x, x_1558.y, x_1558.x, x_1558.y) * vec4<f32>(x_1561.x, x_1561.y, x_1561.x, x_1561.y)) + vec4<f32>(x_1564.x, x_1564.w, x_1564.z, x_1564.w));
        let x_1568 : vec4<f32> = u_xlat8;
        let x_1570 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1568.x, x_1568.x, x_1568.x, x_1568.y) * vec4<f32>(x_1570.z, x_1570.w, x_1570.y, x_1570.z));
        let x_1574 : vec4<f32> = u_xlat8;
        let x_1576 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1574.y, x_1574.y, x_1574.z, x_1574.z) * x_1576);
        let x_1580 : f32 = u_xlat8.z;
        let x_1582 : f32 = u_xlat13.y;
        u_xlat67 = (x_1580 * x_1582);
        let x_1585 : vec4<f32> = u_xlat11;
        let x_1586 : vec2<f32> = vec2<f32>(x_1585.x, x_1585.y);
        let x_1588 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_1586.x, x_1586.y, x_1588);
        let x_1596 : vec3<f32> = txVec4;
        let x_1598 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1596.xy, x_1596.z);
        u_xlat68 = x_1598;
        let x_1600 : vec4<f32> = u_xlat11;
        let x_1601 : vec2<f32> = vec2<f32>(x_1600.z, x_1600.w);
        let x_1603 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1611 : vec3<f32> = txVec5;
        let x_1613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1611.xy, x_1611.z);
        u_xlat69 = x_1613;
        let x_1614 : f32 = u_xlat69;
        let x_1616 : f32 = u_xlat14.y;
        u_xlat69 = (x_1614 * x_1616);
        let x_1619 : f32 = u_xlat14.x;
        let x_1620 : f32 = u_xlat68;
        let x_1622 : f32 = u_xlat69;
        u_xlat68 = ((x_1619 * x_1620) + x_1622);
        let x_1625 : vec2<f32> = u_xlat49;
        let x_1627 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1625.x, x_1625.y, x_1627);
        let x_1634 : vec3<f32> = txVec6;
        let x_1636 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1634.xy, x_1634.z);
        u_xlat69 = x_1636;
        let x_1638 : f32 = u_xlat14.z;
        let x_1639 : f32 = u_xlat69;
        let x_1641 : f32 = u_xlat68;
        u_xlat68 = ((x_1638 * x_1639) + x_1641);
        let x_1644 : vec4<f32> = u_xlat10;
        let x_1645 : vec2<f32> = vec2<f32>(x_1644.x, x_1644.y);
        let x_1647 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1645.x, x_1645.y, x_1647);
        let x_1654 : vec3<f32> = txVec7;
        let x_1656 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1654.xy, x_1654.z);
        u_xlat69 = x_1656;
        let x_1658 : f32 = u_xlat14.w;
        let x_1659 : f32 = u_xlat69;
        let x_1661 : f32 = u_xlat68;
        u_xlat68 = ((x_1658 * x_1659) + x_1661);
        let x_1664 : vec4<f32> = u_xlat12;
        let x_1665 : vec2<f32> = vec2<f32>(x_1664.x, x_1664.y);
        let x_1667 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1665.x, x_1665.y, x_1667);
        let x_1674 : vec3<f32> = txVec8;
        let x_1676 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1674.xy, x_1674.z);
        u_xlat69 = x_1676;
        let x_1678 : f32 = u_xlat15.x;
        let x_1679 : f32 = u_xlat69;
        let x_1681 : f32 = u_xlat68;
        u_xlat68 = ((x_1678 * x_1679) + x_1681);
        let x_1684 : vec4<f32> = u_xlat12;
        let x_1685 : vec2<f32> = vec2<f32>(x_1684.z, x_1684.w);
        let x_1687 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1685.x, x_1685.y, x_1687);
        let x_1694 : vec3<f32> = txVec9;
        let x_1696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1694.xy, x_1694.z);
        u_xlat69 = x_1696;
        let x_1698 : f32 = u_xlat15.y;
        let x_1699 : f32 = u_xlat69;
        let x_1701 : f32 = u_xlat68;
        u_xlat68 = ((x_1698 * x_1699) + x_1701);
        let x_1704 : vec4<f32> = u_xlat10;
        let x_1705 : vec2<f32> = vec2<f32>(x_1704.z, x_1704.w);
        let x_1707 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1705.x, x_1705.y, x_1707);
        let x_1714 : vec3<f32> = txVec10;
        let x_1716 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1714.xy, x_1714.z);
        u_xlat69 = x_1716;
        let x_1718 : f32 = u_xlat15.z;
        let x_1719 : f32 = u_xlat69;
        let x_1721 : f32 = u_xlat68;
        u_xlat68 = ((x_1718 * x_1719) + x_1721);
        let x_1724 : vec4<f32> = u_xlat9;
        let x_1725 : vec2<f32> = vec2<f32>(x_1724.x, x_1724.y);
        let x_1727 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1725.x, x_1725.y, x_1727);
        let x_1734 : vec3<f32> = txVec11;
        let x_1736 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1734.xy, x_1734.z);
        u_xlat69 = x_1736;
        let x_1738 : f32 = u_xlat15.w;
        let x_1739 : f32 = u_xlat69;
        let x_1741 : f32 = u_xlat68;
        u_xlat68 = ((x_1738 * x_1739) + x_1741);
        let x_1744 : vec4<f32> = u_xlat9;
        let x_1745 : vec2<f32> = vec2<f32>(x_1744.z, x_1744.w);
        let x_1747 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1745.x, x_1745.y, x_1747);
        let x_1754 : vec3<f32> = txVec12;
        let x_1756 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1754.xy, x_1754.z);
        u_xlat69 = x_1756;
        let x_1757 : f32 = u_xlat67;
        let x_1758 : f32 = u_xlat69;
        let x_1760 : f32 = u_xlat68;
        u_xlat4.x = ((x_1757 * x_1758) + x_1760);
      } else {
        let x_1764 : vec4<f32> = u_xlat2;
        let x_1767 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1770 : vec2<f32> = ((vec2<f32>(x_1764.x, x_1764.y) * vec2<f32>(x_1767.z, x_1767.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1771 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1770.x, x_1770.y, x_1771.z, x_1771.w);
        let x_1773 : vec4<f32> = u_xlat7;
        let x_1775 : vec2<f32> = floor(vec2<f32>(x_1773.x, x_1773.y));
        let x_1776 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1775.x, x_1775.y, x_1776.z, x_1776.w);
        let x_1778 : vec4<f32> = u_xlat2;
        let x_1781 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1784 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1778.x, x_1778.y) * vec2<f32>(x_1781.z, x_1781.w)) + -(vec2<f32>(x_1784.x, x_1784.y)));
        let x_1788 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1788.x, x_1788.x, x_1788.y, x_1788.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1791 : vec4<f32> = u_xlat8;
        let x_1793 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1791.x, x_1791.x, x_1791.z, x_1791.z) * vec4<f32>(x_1793.x, x_1793.x, x_1793.z, x_1793.z));
        let x_1796 : vec4<f32> = u_xlat9;
        let x_1800 : vec2<f32> = (vec2<f32>(x_1796.y, x_1796.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1801 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1801.x, x_1800.x, x_1801.z, x_1800.y);
        let x_1803 : vec4<f32> = u_xlat9;
        let x_1806 : vec2<f32> = u_xlat49;
        let x_1808 : vec2<f32> = ((vec2<f32>(x_1803.x, x_1803.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1806));
        let x_1809 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1808.x, x_1809.y, x_1808.y, x_1809.w);
        let x_1811 : vec2<f32> = u_xlat49;
        let x_1813 : vec2<f32> = (-(x_1811) + vec2<f32>(1.0f, 1.0f));
        let x_1814 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1813.x, x_1813.y, x_1814.z, x_1814.w);
        let x_1816 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_1816, vec2<f32>(0.0f, 0.0f));
        let x_1818 : vec2<f32> = u_xlat51;
        let x_1820 : vec2<f32> = u_xlat51;
        let x_1822 : vec4<f32> = u_xlat9;
        let x_1824 : vec2<f32> = ((-(x_1818) * x_1820) + vec2<f32>(x_1822.x, x_1822.y));
        let x_1825 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1824.x, x_1824.y, x_1825.z, x_1825.w);
        let x_1827 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_1827, vec2<f32>(0.0f, 0.0f));
        let x_1830 : vec2<f32> = u_xlat51;
        let x_1832 : vec2<f32> = u_xlat51;
        let x_1834 : vec4<f32> = u_xlat8;
        let x_1836 : vec2<f32> = ((-(x_1830) * x_1832) + vec2<f32>(x_1834.y, x_1834.w));
        let x_1837 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1836.x, x_1837.y, x_1836.y);
        let x_1839 : vec4<f32> = u_xlat9;
        let x_1841 : vec2<f32> = (vec2<f32>(x_1839.x, x_1839.y) + vec2<f32>(2.0f, 2.0f));
        let x_1842 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1841.x, x_1841.y, x_1842.z, x_1842.w);
        let x_1844 : vec3<f32> = u_xlat29;
        let x_1846 : vec2<f32> = (vec2<f32>(x_1844.x, x_1844.z) + vec2<f32>(2.0f, 2.0f));
        let x_1847 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1847.x, x_1846.x, x_1847.z, x_1846.y);
        let x_1850 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1850 * 0.081632003f);
        let x_1854 : vec4<f32> = u_xlat8;
        let x_1857 : vec3<f32> = (vec3<f32>(x_1854.z, x_1854.x, x_1854.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1858 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1857.x, x_1857.y, x_1857.z, x_1858.w);
        let x_1860 : vec4<f32> = u_xlat9;
        let x_1863 : vec2<f32> = (vec2<f32>(x_1860.x, x_1860.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1864 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1863.x, x_1863.y, x_1864.z, x_1864.w);
        let x_1867 : f32 = u_xlat12.y;
        u_xlat11.x = x_1867;
        let x_1869 : vec2<f32> = u_xlat49;
        let x_1876 : vec2<f32> = ((vec2<f32>(x_1869.x, x_1869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1877 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1877.x, x_1876.x, x_1877.z, x_1876.y);
        let x_1879 : vec2<f32> = u_xlat49;
        let x_1883 : vec2<f32> = ((vec2<f32>(x_1879.x, x_1879.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1884 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1883.x, x_1884.y, x_1883.y, x_1884.w);
        let x_1887 : f32 = u_xlat8.x;
        u_xlat9.y = x_1887;
        let x_1890 : f32 = u_xlat10.y;
        u_xlat9.w = x_1890;
        let x_1892 : vec4<f32> = u_xlat9;
        let x_1893 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1892 + x_1893);
        let x_1895 : vec2<f32> = u_xlat49;
        let x_1898 : vec2<f32> = ((vec2<f32>(x_1895.y, x_1895.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1899 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1899.x, x_1898.x, x_1899.z, x_1898.y);
        let x_1901 : vec2<f32> = u_xlat49;
        let x_1904 : vec2<f32> = ((vec2<f32>(x_1901.y, x_1901.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1905 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1904.x, x_1905.y, x_1904.y, x_1905.w);
        let x_1908 : f32 = u_xlat8.y;
        u_xlat10.y = x_1908;
        let x_1910 : vec4<f32> = u_xlat10;
        let x_1911 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1910 + x_1911);
        let x_1913 : vec4<f32> = u_xlat9;
        let x_1914 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1913 / x_1914);
        let x_1916 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1916 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1922 : vec4<f32> = u_xlat10;
        let x_1923 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1922 / x_1923);
        let x_1925 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1925 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1927 : vec4<f32> = u_xlat9;
        let x_1930 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1927.w, x_1927.x, x_1927.y, x_1927.z) * vec4<f32>(x_1930.x, x_1930.x, x_1930.x, x_1930.x));
        let x_1933 : vec4<f32> = u_xlat10;
        let x_1936 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1933.x, x_1933.w, x_1933.y, x_1933.z) * vec4<f32>(x_1936.y, x_1936.y, x_1936.y, x_1936.y));
        let x_1939 : vec4<f32> = u_xlat9;
        let x_1940 : vec3<f32> = vec3<f32>(x_1939.y, x_1939.z, x_1939.w);
        let x_1941 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1940.x, x_1941.y, x_1940.y, x_1940.z);
        let x_1944 : f32 = u_xlat10.x;
        u_xlat12.y = x_1944;
        let x_1946 : vec4<f32> = u_xlat7;
        let x_1949 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1952 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1946.x, x_1946.y, x_1946.x, x_1946.y) * vec4<f32>(x_1949.x, x_1949.y, x_1949.x, x_1949.y)) + vec4<f32>(x_1952.x, x_1952.y, x_1952.z, x_1952.y));
        let x_1955 : vec4<f32> = u_xlat7;
        let x_1958 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1961 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1955.x, x_1955.y) * vec2<f32>(x_1958.x, x_1958.y)) + vec2<f32>(x_1961.w, x_1961.y));
        let x_1965 : f32 = u_xlat12.y;
        u_xlat9.y = x_1965;
        let x_1968 : f32 = u_xlat10.z;
        u_xlat12.y = x_1968;
        let x_1970 : vec4<f32> = u_xlat7;
        let x_1973 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1976 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1970.x, x_1970.y, x_1970.x, x_1970.y) * vec4<f32>(x_1973.x, x_1973.y, x_1973.x, x_1973.y)) + vec4<f32>(x_1976.x, x_1976.y, x_1976.z, x_1976.y));
        let x_1979 : vec4<f32> = u_xlat7;
        let x_1982 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1985 : vec4<f32> = u_xlat12;
        let x_1987 : vec2<f32> = ((vec2<f32>(x_1979.x, x_1979.y) * vec2<f32>(x_1982.x, x_1982.y)) + vec2<f32>(x_1985.w, x_1985.y));
        let x_1988 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1987.x, x_1987.y, x_1988.z, x_1988.w);
        let x_1991 : f32 = u_xlat12.y;
        u_xlat9.z = x_1991;
        let x_1994 : vec4<f32> = u_xlat7;
        let x_1997 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2000 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1994.x, x_1994.y, x_1994.x, x_1994.y) * vec4<f32>(x_1997.x, x_1997.y, x_1997.x, x_1997.y)) + vec4<f32>(x_2000.x, x_2000.y, x_2000.x, x_2000.z));
        let x_2004 : f32 = u_xlat10.w;
        u_xlat12.y = x_2004;
        let x_2007 : vec4<f32> = u_xlat7;
        let x_2010 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2013 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2007.x, x_2007.y, x_2007.x, x_2007.y) * vec4<f32>(x_2010.x, x_2010.y, x_2010.x, x_2010.y)) + vec4<f32>(x_2013.x, x_2013.y, x_2013.z, x_2013.y));
        let x_2017 : vec4<f32> = u_xlat7;
        let x_2020 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2023 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_2017.x, x_2017.y) * vec2<f32>(x_2020.x, x_2020.y)) + vec2<f32>(x_2023.w, x_2023.y));
        let x_2027 : f32 = u_xlat12.y;
        u_xlat9.w = x_2027;
        let x_2030 : vec4<f32> = u_xlat7;
        let x_2033 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2036 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2030.x, x_2030.y) * vec2<f32>(x_2033.x, x_2033.y)) + vec2<f32>(x_2036.x, x_2036.w));
        let x_2039 : vec4<f32> = u_xlat12;
        let x_2040 : vec3<f32> = vec3<f32>(x_2039.x, x_2039.z, x_2039.w);
        let x_2041 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2040.x, x_2041.y, x_2040.y, x_2040.z);
        let x_2043 : vec4<f32> = u_xlat7;
        let x_2046 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2049 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2043.x, x_2043.y, x_2043.x, x_2043.y) * vec4<f32>(x_2046.x, x_2046.y, x_2046.x, x_2046.y)) + vec4<f32>(x_2049.x, x_2049.y, x_2049.z, x_2049.y));
        let x_2053 : vec4<f32> = u_xlat7;
        let x_2056 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2059 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2053.x, x_2053.y) * vec2<f32>(x_2056.x, x_2056.y)) + vec2<f32>(x_2059.w, x_2059.y));
        let x_2063 : f32 = u_xlat9.x;
        u_xlat10.x = x_2063;
        let x_2065 : vec4<f32> = u_xlat7;
        let x_2068 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2071 : vec4<f32> = u_xlat10;
        let x_2073 : vec2<f32> = ((vec2<f32>(x_2065.x, x_2065.y) * vec2<f32>(x_2068.x, x_2068.y)) + vec2<f32>(x_2071.x, x_2071.y));
        let x_2074 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2073.x, x_2073.y, x_2074.z, x_2074.w);
        let x_2077 : vec4<f32> = u_xlat8;
        let x_2079 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2077.x, x_2077.x, x_2077.x, x_2077.x) * x_2079);
        let x_2082 : vec4<f32> = u_xlat8;
        let x_2084 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2082.y, x_2082.y, x_2082.y, x_2082.y) * x_2084);
        let x_2087 : vec4<f32> = u_xlat8;
        let x_2089 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2087.z, x_2087.z, x_2087.z, x_2087.z) * x_2089);
        let x_2091 : vec4<f32> = u_xlat8;
        let x_2093 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2091.w, x_2091.w, x_2091.w, x_2091.w) * x_2093);
        let x_2096 : vec4<f32> = u_xlat13;
        let x_2097 : vec2<f32> = vec2<f32>(x_2096.x, x_2096.y);
        let x_2099 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_2097.x, x_2097.y, x_2099);
        let x_2106 : vec3<f32> = txVec13;
        let x_2108 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2106.xy, x_2106.z);
        u_xlat67 = x_2108;
        let x_2110 : vec4<f32> = u_xlat13;
        let x_2111 : vec2<f32> = vec2<f32>(x_2110.z, x_2110.w);
        let x_2113 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_2111.x, x_2111.y, x_2113);
        let x_2120 : vec3<f32> = txVec14;
        let x_2122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2120.xy, x_2120.z);
        u_xlat68 = x_2122;
        let x_2123 : f32 = u_xlat68;
        let x_2125 : f32 = u_xlat18.y;
        u_xlat68 = (x_2123 * x_2125);
        let x_2128 : f32 = u_xlat18.x;
        let x_2129 : f32 = u_xlat67;
        let x_2131 : f32 = u_xlat68;
        u_xlat67 = ((x_2128 * x_2129) + x_2131);
        let x_2134 : vec2<f32> = u_xlat49;
        let x_2136 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_2134.x, x_2134.y, x_2136);
        let x_2143 : vec3<f32> = txVec15;
        let x_2145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2143.xy, x_2143.z);
        u_xlat68 = x_2145;
        let x_2147 : f32 = u_xlat18.z;
        let x_2148 : f32 = u_xlat68;
        let x_2150 : f32 = u_xlat67;
        u_xlat67 = ((x_2147 * x_2148) + x_2150);
        let x_2153 : vec4<f32> = u_xlat16;
        let x_2154 : vec2<f32> = vec2<f32>(x_2153.x, x_2153.y);
        let x_2156 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_2154.x, x_2154.y, x_2156);
        let x_2163 : vec3<f32> = txVec16;
        let x_2165 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2163.xy, x_2163.z);
        u_xlat68 = x_2165;
        let x_2167 : f32 = u_xlat18.w;
        let x_2168 : f32 = u_xlat68;
        let x_2170 : f32 = u_xlat67;
        u_xlat67 = ((x_2167 * x_2168) + x_2170);
        let x_2173 : vec4<f32> = u_xlat14;
        let x_2174 : vec2<f32> = vec2<f32>(x_2173.x, x_2173.y);
        let x_2176 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_2174.x, x_2174.y, x_2176);
        let x_2183 : vec3<f32> = txVec17;
        let x_2185 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2183.xy, x_2183.z);
        u_xlat68 = x_2185;
        let x_2187 : f32 = u_xlat19.x;
        let x_2188 : f32 = u_xlat68;
        let x_2190 : f32 = u_xlat67;
        u_xlat67 = ((x_2187 * x_2188) + x_2190);
        let x_2193 : vec4<f32> = u_xlat14;
        let x_2194 : vec2<f32> = vec2<f32>(x_2193.z, x_2193.w);
        let x_2196 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_2194.x, x_2194.y, x_2196);
        let x_2203 : vec3<f32> = txVec18;
        let x_2205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2203.xy, x_2203.z);
        u_xlat68 = x_2205;
        let x_2207 : f32 = u_xlat19.y;
        let x_2208 : f32 = u_xlat68;
        let x_2210 : f32 = u_xlat67;
        u_xlat67 = ((x_2207 * x_2208) + x_2210);
        let x_2213 : vec4<f32> = u_xlat15;
        let x_2214 : vec2<f32> = vec2<f32>(x_2213.x, x_2213.y);
        let x_2216 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_2214.x, x_2214.y, x_2216);
        let x_2223 : vec3<f32> = txVec19;
        let x_2225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2223.xy, x_2223.z);
        u_xlat68 = x_2225;
        let x_2227 : f32 = u_xlat19.z;
        let x_2228 : f32 = u_xlat68;
        let x_2230 : f32 = u_xlat67;
        u_xlat67 = ((x_2227 * x_2228) + x_2230);
        let x_2233 : vec4<f32> = u_xlat16;
        let x_2234 : vec2<f32> = vec2<f32>(x_2233.z, x_2233.w);
        let x_2236 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_2234.x, x_2234.y, x_2236);
        let x_2243 : vec3<f32> = txVec20;
        let x_2245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2243.xy, x_2243.z);
        u_xlat68 = x_2245;
        let x_2247 : f32 = u_xlat19.w;
        let x_2248 : f32 = u_xlat68;
        let x_2250 : f32 = u_xlat67;
        u_xlat67 = ((x_2247 * x_2248) + x_2250);
        let x_2253 : vec4<f32> = u_xlat17;
        let x_2254 : vec2<f32> = vec2<f32>(x_2253.x, x_2253.y);
        let x_2256 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_2254.x, x_2254.y, x_2256);
        let x_2263 : vec3<f32> = txVec21;
        let x_2265 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2263.xy, x_2263.z);
        u_xlat68 = x_2265;
        let x_2267 : f32 = u_xlat20.x;
        let x_2268 : f32 = u_xlat68;
        let x_2270 : f32 = u_xlat67;
        u_xlat67 = ((x_2267 * x_2268) + x_2270);
        let x_2273 : vec4<f32> = u_xlat17;
        let x_2274 : vec2<f32> = vec2<f32>(x_2273.z, x_2273.w);
        let x_2276 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_2274.x, x_2274.y, x_2276);
        let x_2283 : vec3<f32> = txVec22;
        let x_2285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2283.xy, x_2283.z);
        u_xlat68 = x_2285;
        let x_2287 : f32 = u_xlat20.y;
        let x_2288 : f32 = u_xlat68;
        let x_2290 : f32 = u_xlat67;
        u_xlat67 = ((x_2287 * x_2288) + x_2290);
        let x_2293 : vec2<f32> = u_xlat30;
        let x_2295 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_2293.x, x_2293.y, x_2295);
        let x_2302 : vec3<f32> = txVec23;
        let x_2304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2302.xy, x_2302.z);
        u_xlat68 = x_2304;
        let x_2306 : f32 = u_xlat20.z;
        let x_2307 : f32 = u_xlat68;
        let x_2309 : f32 = u_xlat67;
        u_xlat67 = ((x_2306 * x_2307) + x_2309);
        let x_2312 : vec2<f32> = u_xlat57;
        let x_2314 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_2312.x, x_2312.y, x_2314);
        let x_2321 : vec3<f32> = txVec24;
        let x_2323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2321.xy, x_2321.z);
        u_xlat68 = x_2323;
        let x_2325 : f32 = u_xlat20.w;
        let x_2326 : f32 = u_xlat68;
        let x_2328 : f32 = u_xlat67;
        u_xlat67 = ((x_2325 * x_2326) + x_2328);
        let x_2331 : vec4<f32> = u_xlat12;
        let x_2332 : vec2<f32> = vec2<f32>(x_2331.x, x_2331.y);
        let x_2334 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_2332.x, x_2332.y, x_2334);
        let x_2341 : vec3<f32> = txVec25;
        let x_2343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2341.xy, x_2341.z);
        u_xlat68 = x_2343;
        let x_2345 : f32 = u_xlat8.x;
        let x_2346 : f32 = u_xlat68;
        let x_2348 : f32 = u_xlat67;
        u_xlat67 = ((x_2345 * x_2346) + x_2348);
        let x_2351 : vec4<f32> = u_xlat12;
        let x_2352 : vec2<f32> = vec2<f32>(x_2351.z, x_2351.w);
        let x_2354 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_2352.x, x_2352.y, x_2354);
        let x_2361 : vec3<f32> = txVec26;
        let x_2363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2361.xy, x_2361.z);
        u_xlat68 = x_2363;
        let x_2365 : f32 = u_xlat8.y;
        let x_2366 : f32 = u_xlat68;
        let x_2368 : f32 = u_xlat67;
        u_xlat67 = ((x_2365 * x_2366) + x_2368);
        let x_2371 : vec2<f32> = u_xlat52;
        let x_2373 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_2371.x, x_2371.y, x_2373);
        let x_2380 : vec3<f32> = txVec27;
        let x_2382 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2380.xy, x_2380.z);
        u_xlat68 = x_2382;
        let x_2384 : f32 = u_xlat8.z;
        let x_2385 : f32 = u_xlat68;
        let x_2387 : f32 = u_xlat67;
        u_xlat67 = ((x_2384 * x_2385) + x_2387);
        let x_2390 : vec4<f32> = u_xlat7;
        let x_2391 : vec2<f32> = vec2<f32>(x_2390.x, x_2390.y);
        let x_2393 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_2391.x, x_2391.y, x_2393);
        let x_2400 : vec3<f32> = txVec28;
        let x_2402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2400.xy, x_2400.z);
        u_xlat68 = x_2402;
        let x_2404 : f32 = u_xlat8.w;
        let x_2405 : f32 = u_xlat68;
        let x_2407 : f32 = u_xlat67;
        u_xlat4.x = ((x_2404 * x_2405) + x_2407);
      }
    }
  } else {
    let x_2412 : vec4<f32> = u_xlat2;
    let x_2413 : vec2<f32> = vec2<f32>(x_2412.x, x_2412.y);
    let x_2415 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_2413.x, x_2413.y, x_2415);
    let x_2422 : vec3<f32> = txVec29;
    let x_2424 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2422.xy, x_2422.z);
    u_xlat4.x = x_2424;
  }
  let x_2427 : f32 = x_842.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_2427) + 1.0f);
  let x_2432 : f32 = u_xlat4.x;
  let x_2434 : f32 = x_842.x_MainLightShadowParams.x;
  let x_2437 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2432 * x_2434) + x_2437);
  let x_2442 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_2442);
  let x_2446 : f32 = u_xlat2.z;
  u_xlatb44 = (x_2446 >= 1.0f);
  let x_2448 : bool = u_xlatb44;
  let x_2449 : bool = u_xlatb23;
  u_xlatb23 = (x_2448 | x_2449);
  let x_2451 : bool = u_xlatb23;
  if (x_2451) {
    x_2452 = 1.0f;
  } else {
    let x_2457 : f32 = u_xlat2.x;
    x_2452 = x_2457;
  }
  let x_2458 : f32 = x_2452;
  u_xlat2.x = x_2458;
  let x_2460 : vec3<f32> = vs_TEXCOORD7;
  let x_2463 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  let x_2465 : vec3<f32> = (x_2460 + -(x_2463));
  let x_2466 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2465.x, x_2465.y, x_2465.z, x_2466.w);
  let x_2469 : vec4<f32> = u_xlat7;
  let x_2471 : vec4<f32> = u_xlat7;
  u_xlat23 = dot(vec3<f32>(x_2469.x, x_2469.y, x_2469.z), vec3<f32>(x_2471.x, x_2471.y, x_2471.z));
  let x_2474 : f32 = u_xlat23;
  let x_2476 : f32 = x_842.x_MainLightShadowParams.z;
  let x_2479 : f32 = x_842.x_MainLightShadowParams.w;
  u_xlat23 = ((x_2474 * x_2476) + x_2479);
  let x_2481 : f32 = u_xlat23;
  u_xlat23 = clamp(x_2481, 0.0f, 1.0f);
  let x_2485 : f32 = u_xlat2.x;
  u_xlat44 = (-(x_2485) + 1.0f);
  let x_2488 : f32 = u_xlat23;
  let x_2489 : f32 = u_xlat44;
  let x_2492 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2488 * x_2489) + x_2492);
  let x_2495 : f32 = u_xlat46;
  let x_2498 : vec4<f32> = x_128.x_MainLightColor;
  let x_2500 : vec3<f32> = (vec3<f32>(x_2495, x_2495, x_2495) * vec3<f32>(x_2498.x, x_2498.y, x_2498.z));
  let x_2501 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2500.x, x_2500.y, x_2500.z, x_2501.w);
  let x_2504 : f32 = vs_TEXCOORD3.w;
  u_xlat8.x = x_2504;
  let x_2507 : f32 = vs_TEXCOORD4.w;
  u_xlat8.y = x_2507;
  let x_2510 : f32 = vs_TEXCOORD5.w;
  u_xlat8.z = x_2510;
  let x_2512 : vec4<f32> = u_xlat8;
  let x_2515 : vec4<f32> = u_xlat1;
  u_xlat23 = dot(-(vec3<f32>(x_2512.x, x_2512.y, x_2512.z)), vec3<f32>(x_2515.x, x_2515.y, x_2515.z));
  let x_2518 : f32 = u_xlat23;
  let x_2519 : f32 = u_xlat23;
  u_xlat23 = (x_2518 + x_2519);
  let x_2521 : vec4<f32> = u_xlat1;
  let x_2523 : f32 = u_xlat23;
  let x_2527 : vec4<f32> = u_xlat8;
  let x_2530 : vec3<f32> = ((vec3<f32>(x_2521.x, x_2521.y, x_2521.z) * -(vec3<f32>(x_2523, x_2523, x_2523))) + -(vec3<f32>(x_2527.x, x_2527.y, x_2527.z)));
  let x_2531 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2530.x, x_2530.y, x_2530.z, x_2531.w);
  let x_2533 : vec4<f32> = u_xlat1;
  let x_2535 : vec4<f32> = u_xlat8;
  u_xlat23 = dot(vec3<f32>(x_2533.x, x_2533.y, x_2533.z), vec3<f32>(x_2535.x, x_2535.y, x_2535.z));
  let x_2538 : f32 = u_xlat23;
  u_xlat23 = clamp(x_2538, 0.0f, 1.0f);
  let x_2540 : f32 = u_xlat23;
  u_xlat23 = (-(x_2540) + 1.0f);
  let x_2543 : f32 = u_xlat23;
  let x_2544 : f32 = u_xlat23;
  u_xlat23 = (x_2543 * x_2544);
  let x_2546 : f32 = u_xlat23;
  let x_2547 : f32 = u_xlat23;
  u_xlat23 = (x_2546 * x_2547);
  let x_2550 : f32 = u_xlat0.x;
  u_xlat44 = ((-(x_2550) * 0.699999988f) + 1.700000048f);
  let x_2557 : f32 = u_xlat0.x;
  let x_2558 : f32 = u_xlat44;
  u_xlat0.x = (x_2557 * x_2558);
  let x_2562 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2562 * 6.0f);
  let x_2574 : vec4<f32> = u_xlat9;
  let x_2577 : f32 = u_xlat0.x;
  let x_2578 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2574.x, x_2574.y, x_2574.z), x_2577);
  u_xlat9 = x_2578;
  let x_2580 : f32 = u_xlat9.w;
  u_xlat0.x = (x_2580 + -1.0f);
  let x_2588 : f32 = x_2586.unity_SpecCube0_HDR.w;
  let x_2590 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2588 * x_2590) + 1.0f);
  let x_2595 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2595, 0.0f);
  let x_2599 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2599);
  let x_2603 : f32 = u_xlat0.x;
  let x_2605 : f32 = x_2586.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2603 * x_2605);
  let x_2609 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2609);
  let x_2613 : f32 = u_xlat0.x;
  let x_2615 : f32 = x_2586.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2613 * x_2615);
  let x_2618 : vec4<f32> = u_xlat9;
  let x_2620 : vec3<f32> = u_xlat0;
  let x_2622 : vec3<f32> = (vec3<f32>(x_2618.x, x_2618.y, x_2618.z) * vec3<f32>(x_2620.x, x_2620.x, x_2620.x));
  let x_2623 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2622.x, x_2622.y, x_2622.z, x_2623.w);
  let x_2625 : f32 = u_xlat42;
  let x_2627 : f32 = u_xlat42;
  let x_2631 : vec2<f32> = ((vec2<f32>(x_2625, x_2625) * vec2<f32>(x_2627, x_2627)) + vec2<f32>(-1.0f, 1.0f));
  let x_2632 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_2631.x, x_2632.y, x_2631.y);
  let x_2635 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2635);
  let x_2637 : vec4<f32> = u_xlat5;
  let x_2640 : f32 = u_xlat66;
  let x_2642 : vec3<f32> = (-(vec3<f32>(x_2637.x, x_2637.y, x_2637.z)) + vec3<f32>(x_2640, x_2640, x_2640));
  let x_2643 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2642.x, x_2642.y, x_2642.z, x_2643.w);
  let x_2645 : f32 = u_xlat23;
  let x_2647 : vec4<f32> = u_xlat10;
  let x_2650 : vec4<f32> = u_xlat5;
  let x_2652 : vec3<f32> = ((vec3<f32>(x_2645, x_2645, x_2645) * vec3<f32>(x_2647.x, x_2647.y, x_2647.z)) + vec3<f32>(x_2650.x, x_2650.y, x_2650.z));
  let x_2653 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2652.x, x_2652.y, x_2652.z, x_2653.w);
  let x_2655 : f32 = u_xlat42;
  let x_2657 : vec4<f32> = u_xlat10;
  let x_2659 : vec3<f32> = (vec3<f32>(x_2655, x_2655, x_2655) * vec3<f32>(x_2657.x, x_2657.y, x_2657.z));
  let x_2660 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2659.x, x_2659.y, x_2659.z, x_2660.w);
  let x_2662 : vec4<f32> = u_xlat9;
  let x_2664 : vec4<f32> = u_xlat10;
  let x_2666 : vec3<f32> = (vec3<f32>(x_2662.x, x_2662.y, x_2662.z) * vec3<f32>(x_2664.x, x_2664.y, x_2664.z));
  let x_2667 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2666.x, x_2666.y, x_2666.z, x_2667.w);
  let x_2669 : vec4<f32> = u_xlat3;
  let x_2671 : vec4<f32> = u_xlat6;
  let x_2674 : vec4<f32> = u_xlat9;
  let x_2676 : vec3<f32> = ((vec3<f32>(x_2669.x, x_2669.y, x_2669.z) * vec3<f32>(x_2671.x, x_2671.y, x_2671.z)) + vec3<f32>(x_2674.x, x_2674.y, x_2674.z));
  let x_2677 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2676.x, x_2676.y, x_2676.z, x_2677.w);
  let x_2680 : f32 = u_xlat2.x;
  let x_2682 : f32 = x_2586.unity_LightData.z;
  u_xlat42 = (x_2680 * x_2682);
  let x_2684 : vec4<f32> = u_xlat1;
  let x_2687 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_2684.x, x_2684.y, x_2684.z), vec3<f32>(x_2687.x, x_2687.y, x_2687.z));
  let x_2692 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2692, 0.0f, 1.0f);
  let x_2695 : f32 = u_xlat42;
  let x_2697 : f32 = u_xlat2.x;
  u_xlat42 = (x_2695 * x_2697);
  let x_2699 : f32 = u_xlat42;
  let x_2701 : vec4<f32> = u_xlat7;
  let x_2703 : vec3<f32> = (vec3<f32>(x_2699, x_2699, x_2699) * vec3<f32>(x_2701.x, x_2701.y, x_2701.z));
  let x_2704 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2703.x, x_2703.y, x_2703.z, x_2704.w);
  let x_2706 : vec4<f32> = u_xlat8;
  let x_2709 : vec4<f32> = x_128.x_MainLightPosition;
  let x_2711 : vec3<f32> = (vec3<f32>(x_2706.x, x_2706.y, x_2706.z) + vec3<f32>(x_2709.x, x_2709.y, x_2709.z));
  let x_2712 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2711.x, x_2711.y, x_2711.z, x_2712.w);
  let x_2714 : vec4<f32> = u_xlat7;
  let x_2716 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(vec3<f32>(x_2714.x, x_2714.y, x_2714.z), vec3<f32>(x_2716.x, x_2716.y, x_2716.z));
  let x_2719 : f32 = u_xlat42;
  u_xlat42 = max(x_2719, 1.17549435e-37f);
  let x_2722 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2722);
  let x_2724 : f32 = u_xlat42;
  let x_2726 : vec4<f32> = u_xlat7;
  let x_2728 : vec3<f32> = (vec3<f32>(x_2724, x_2724, x_2724) * vec3<f32>(x_2726.x, x_2726.y, x_2726.z));
  let x_2729 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2728.x, x_2728.y, x_2728.z, x_2729.w);
  let x_2731 : vec4<f32> = u_xlat1;
  let x_2733 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(vec3<f32>(x_2731.x, x_2731.y, x_2731.z), vec3<f32>(x_2733.x, x_2733.y, x_2733.z));
  let x_2736 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2736, 0.0f, 1.0f);
  let x_2739 : vec4<f32> = x_128.x_MainLightPosition;
  let x_2741 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(vec3<f32>(x_2739.x, x_2739.y, x_2739.z), vec3<f32>(x_2741.x, x_2741.y, x_2741.z));
  let x_2744 : f32 = u_xlat66;
  u_xlat66 = clamp(x_2744, 0.0f, 1.0f);
  let x_2746 : f32 = u_xlat42;
  let x_2747 : f32 = u_xlat42;
  u_xlat42 = (x_2746 * x_2747);
  let x_2749 : f32 = u_xlat42;
  let x_2751 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2749 * x_2751) + 1.000010014f);
  let x_2755 : f32 = u_xlat66;
  let x_2756 : f32 = u_xlat66;
  u_xlat66 = (x_2755 * x_2756);
  let x_2758 : f32 = u_xlat42;
  let x_2759 : f32 = u_xlat42;
  u_xlat42 = (x_2758 * x_2759);
  let x_2761 : f32 = u_xlat66;
  u_xlat66 = max(x_2761, 0.100000001f);
  let x_2764 : f32 = u_xlat42;
  let x_2765 : f32 = u_xlat66;
  u_xlat42 = (x_2764 * x_2765);
  let x_2767 : f32 = u_xlat25;
  let x_2768 : f32 = u_xlat42;
  u_xlat42 = (x_2767 * x_2768);
  let x_2770 : f32 = u_xlat65;
  let x_2771 : f32 = u_xlat42;
  u_xlat42 = (x_2770 / x_2771);
  let x_2773 : vec4<f32> = u_xlat5;
  let x_2775 : f32 = u_xlat42;
  let x_2778 : vec4<f32> = u_xlat6;
  let x_2780 : vec3<f32> = ((vec3<f32>(x_2773.x, x_2773.y, x_2773.z) * vec3<f32>(x_2775, x_2775, x_2775)) + vec3<f32>(x_2778.x, x_2778.y, x_2778.z));
  let x_2781 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2780.x, x_2780.y, x_2780.z, x_2781.w);
  let x_2783 : vec4<f32> = u_xlat2;
  let x_2785 : vec4<f32> = u_xlat7;
  let x_2787 : vec3<f32> = (vec3<f32>(x_2783.x, x_2783.y, x_2783.z) * vec3<f32>(x_2785.x, x_2785.y, x_2785.z));
  let x_2788 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2787.x, x_2787.y, x_2787.z, x_2788.w);
  let x_2791 : f32 = x_128.x_AdditionalLightsCount.x;
  let x_2793 : f32 = x_2586.unity_LightData.y;
  u_xlat42 = min(x_2791, x_2793);
  let x_2796 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2796));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2808 : u32 = u_xlatu_loop_1;
    let x_2809 : u32 = u_xlatu42;
    if ((x_2808 < x_2809)) {
    } else {
      break;
    }
    let x_2812 : u32 = u_xlatu_loop_1;
    u_xlatu4 = (x_2812 >> 2u);
    let x_2815 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_2815 & 3u));
    let x_2818 : u32 = u_xlatu4;
    let x_2821 : vec4<f32> = x_2586.unity_LightIndices[bitcast<i32>(x_2818)];
    let x_2831 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2836 : vec4<u32> = indexable[x_2831];
    u_xlat4.x = dot(x_2821, bitcast<vec4<f32>>(x_2836));
    let x_2842 : f32 = u_xlat4.x;
    u_xlati4 = i32(x_2842);
    let x_2844 : vec3<f32> = vs_TEXCOORD7;
    let x_2856 : i32 = u_xlati4;
    let x_2858 : vec4<f32> = x_2855.x_AdditionalLightsPosition[x_2856];
    let x_2861 : i32 = u_xlati4;
    let x_2863 : vec4<f32> = x_2855.x_AdditionalLightsPosition[x_2861];
    let x_2865 : vec3<f32> = ((-(x_2844) * vec3<f32>(x_2858.w, x_2858.w, x_2858.w)) + vec3<f32>(x_2863.x, x_2863.y, x_2863.z));
    let x_2866 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2865.x, x_2865.y, x_2865.z, x_2866.w);
    let x_2868 : vec4<f32> = u_xlat9;
    let x_2870 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_2868.x, x_2868.y, x_2868.z), vec3<f32>(x_2870.x, x_2870.y, x_2870.z));
    let x_2873 : f32 = u_xlat67;
    u_xlat67 = max(x_2873, 6.10351562e-05f);
    let x_2875 : f32 = u_xlat67;
    u_xlat68 = inverseSqrt(x_2875);
    let x_2877 : f32 = u_xlat68;
    let x_2879 : vec4<f32> = u_xlat9;
    let x_2881 : vec3<f32> = (vec3<f32>(x_2877, x_2877, x_2877) * vec3<f32>(x_2879.x, x_2879.y, x_2879.z));
    let x_2882 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2881.x, x_2881.y, x_2881.z, x_2882.w);
    let x_2884 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_2884);
    let x_2886 : f32 = u_xlat67;
    let x_2887 : i32 = u_xlati4;
    let x_2889 : f32 = x_2855.x_AdditionalLightsAttenuation[x_2887].x;
    u_xlat67 = (x_2886 * x_2889);
    let x_2891 : f32 = u_xlat67;
    let x_2893 : f32 = u_xlat67;
    u_xlat67 = ((-(x_2891) * x_2893) + 1.0f);
    let x_2896 : f32 = u_xlat67;
    u_xlat67 = max(x_2896, 0.0f);
    let x_2898 : f32 = u_xlat67;
    let x_2899 : f32 = u_xlat67;
    u_xlat67 = (x_2898 * x_2899);
    let x_2901 : f32 = u_xlat67;
    let x_2902 : f32 = u_xlat69;
    u_xlat67 = (x_2901 * x_2902);
    let x_2904 : i32 = u_xlati4;
    let x_2906 : vec4<f32> = x_2855.x_AdditionalLightsSpotDir[x_2904];
    let x_2908 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_2906.x, x_2906.y, x_2906.z), vec3<f32>(x_2908.x, x_2908.y, x_2908.z));
    let x_2911 : f32 = u_xlat69;
    let x_2912 : i32 = u_xlati4;
    let x_2914 : f32 = x_2855.x_AdditionalLightsAttenuation[x_2912].z;
    let x_2916 : i32 = u_xlati4;
    let x_2918 : f32 = x_2855.x_AdditionalLightsAttenuation[x_2916].w;
    u_xlat69 = ((x_2911 * x_2914) + x_2918);
    let x_2920 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2920, 0.0f, 1.0f);
    let x_2922 : f32 = u_xlat69;
    let x_2923 : f32 = u_xlat69;
    u_xlat69 = (x_2922 * x_2923);
    let x_2925 : f32 = u_xlat67;
    let x_2926 : f32 = u_xlat69;
    u_xlat67 = (x_2925 * x_2926);
    let x_2928 : f32 = u_xlat46;
    let x_2930 : i32 = u_xlati4;
    let x_2932 : vec4<f32> = x_2855.x_AdditionalLightsColor[x_2930];
    let x_2934 : vec3<f32> = (vec3<f32>(x_2928, x_2928, x_2928) * vec3<f32>(x_2932.x, x_2932.y, x_2932.z));
    let x_2935 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2934.x, x_2934.y, x_2934.z, x_2935.w);
    let x_2937 : vec4<f32> = u_xlat1;
    let x_2939 : vec4<f32> = u_xlat10;
    u_xlat4.x = dot(vec3<f32>(x_2937.x, x_2937.y, x_2937.z), vec3<f32>(x_2939.x, x_2939.y, x_2939.z));
    let x_2944 : f32 = u_xlat4.x;
    u_xlat4.x = clamp(x_2944, 0.0f, 1.0f);
    let x_2948 : f32 = u_xlat4.x;
    let x_2949 : f32 = u_xlat67;
    u_xlat4.x = (x_2948 * x_2949);
    let x_2952 : vec4<f32> = u_xlat4;
    let x_2954 : vec4<f32> = u_xlat11;
    let x_2956 : vec3<f32> = (vec3<f32>(x_2952.x, x_2952.x, x_2952.x) * vec3<f32>(x_2954.x, x_2954.y, x_2954.z));
    let x_2957 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2956.x, x_2956.y, x_2956.z, x_2957.w);
    let x_2959 : vec4<f32> = u_xlat9;
    let x_2961 : f32 = u_xlat68;
    let x_2964 : vec4<f32> = u_xlat8;
    let x_2966 : vec3<f32> = ((vec3<f32>(x_2959.x, x_2959.y, x_2959.z) * vec3<f32>(x_2961, x_2961, x_2961)) + vec3<f32>(x_2964.x, x_2964.y, x_2964.z));
    let x_2967 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2966.x, x_2966.y, x_2966.z, x_2967.w);
    let x_2969 : vec4<f32> = u_xlat9;
    let x_2971 : vec4<f32> = u_xlat9;
    u_xlat4.x = dot(vec3<f32>(x_2969.x, x_2969.y, x_2969.z), vec3<f32>(x_2971.x, x_2971.y, x_2971.z));
    let x_2976 : f32 = u_xlat4.x;
    u_xlat4.x = max(x_2976, 1.17549435e-37f);
    let x_2980 : f32 = u_xlat4.x;
    u_xlat4.x = inverseSqrt(x_2980);
    let x_2983 : vec4<f32> = u_xlat4;
    let x_2985 : vec4<f32> = u_xlat9;
    let x_2987 : vec3<f32> = (vec3<f32>(x_2983.x, x_2983.x, x_2983.x) * vec3<f32>(x_2985.x, x_2985.y, x_2985.z));
    let x_2988 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2987.x, x_2987.y, x_2987.z, x_2988.w);
    let x_2990 : vec4<f32> = u_xlat1;
    let x_2992 : vec4<f32> = u_xlat9;
    u_xlat4.x = dot(vec3<f32>(x_2990.x, x_2990.y, x_2990.z), vec3<f32>(x_2992.x, x_2992.y, x_2992.z));
    let x_2997 : f32 = u_xlat4.x;
    u_xlat4.x = clamp(x_2997, 0.0f, 1.0f);
    let x_3000 : vec4<f32> = u_xlat10;
    let x_3002 : vec4<f32> = u_xlat9;
    u_xlat4.w = dot(vec3<f32>(x_3000.x, x_3000.y, x_3000.z), vec3<f32>(x_3002.x, x_3002.y, x_3002.z));
    let x_3007 : f32 = u_xlat4.w;
    u_xlat4.w = clamp(x_3007, 0.0f, 1.0f);
    let x_3010 : vec4<f32> = u_xlat4;
    let x_3012 : vec4<f32> = u_xlat4;
    let x_3014 : vec2<f32> = (vec2<f32>(x_3010.x, x_3010.w) * vec2<f32>(x_3012.x, x_3012.w));
    let x_3015 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3014.x, x_3015.y, x_3015.z, x_3014.y);
    let x_3018 : f32 = u_xlat4.x;
    let x_3020 : f32 = u_xlat0.x;
    u_xlat4.x = ((x_3018 * x_3020) + 1.000010014f);
    let x_3025 : f32 = u_xlat4.x;
    let x_3027 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3025 * x_3027);
    let x_3031 : f32 = u_xlat4.w;
    u_xlat67 = max(x_3031, 0.100000001f);
    let x_3033 : f32 = u_xlat67;
    let x_3035 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3033 * x_3035);
    let x_3038 : f32 = u_xlat25;
    let x_3040 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3038 * x_3040);
    let x_3043 : f32 = u_xlat65;
    let x_3045 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3043 / x_3045);
    let x_3048 : vec4<f32> = u_xlat5;
    let x_3050 : vec4<f32> = u_xlat4;
    let x_3053 : vec4<f32> = u_xlat6;
    let x_3055 : vec3<f32> = ((vec3<f32>(x_3048.x, x_3048.y, x_3048.z) * vec3<f32>(x_3050.x, x_3050.x, x_3050.x)) + vec3<f32>(x_3053.x, x_3053.y, x_3053.z));
    let x_3056 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3055.x, x_3055.y, x_3055.z, x_3056.w);
    let x_3058 : vec4<f32> = u_xlat9;
    let x_3060 : vec4<f32> = u_xlat11;
    let x_3063 : vec4<f32> = u_xlat7;
    let x_3065 : vec3<f32> = ((vec3<f32>(x_3058.x, x_3058.y, x_3058.z) * vec3<f32>(x_3060.x, x_3060.y, x_3060.z)) + vec3<f32>(x_3063.x, x_3063.y, x_3063.z));
    let x_3066 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3065.x, x_3065.y, x_3065.z, x_3066.w);

    continuing {
      let x_3068 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3068 + bitcast<u32>(1i));
    }
  }
  let x_3070 : vec4<f32> = u_xlat3;
  let x_3072 : f32 = u_xlat21;
  let x_3075 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3070.x, x_3070.y, x_3070.z) * vec3<f32>(x_3072, x_3072, x_3072)) + vec3<f32>(x_3075.x, x_3075.y, x_3075.z));
  let x_3078 : vec4<f32> = u_xlat7;
  let x_3080 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3078.x, x_3078.y, x_3078.z) + x_3080);
  let x_3082 : f32 = u_xlat64;
  let x_3083 : f32 = u_xlat64;
  u_xlat1.x = (x_3082 * -(x_3083));
  let x_3088 : f32 = u_xlat1.x;
  u_xlat1.x = exp2(x_3088);
  let x_3091 : vec3<f32> = u_xlat0;
  let x_3092 : f32 = u_xlat63;
  let x_3096 : vec4<f32> = x_128.unity_FogColor;
  u_xlat0 = ((x_3091 * vec3<f32>(x_3092, x_3092, x_3092)) + -(vec3<f32>(x_3096.x, x_3096.y, x_3096.z)));
  let x_3102 : vec4<f32> = u_xlat1;
  let x_3104 : vec3<f32> = u_xlat0;
  let x_3107 : vec4<f32> = x_128.unity_FogColor;
  let x_3109 : vec3<f32> = ((vec3<f32>(x_3102.x, x_3102.x, x_3102.x) * x_3104) + vec3<f32>(x_3107.x, x_3107.y, x_3107.z));
  let x_3110 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3109.x, x_3109.y, x_3109.z, x_3110.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(6) vs_TEXCOORD7_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  main_1();
  return main_out(SV_Target0);
}

