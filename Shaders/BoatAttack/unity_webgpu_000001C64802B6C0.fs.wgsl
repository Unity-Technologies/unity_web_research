type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraNormalsTexture : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var x_235 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var x_513 : vec3<f32>;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var x_784 : vec3<f32>;
  var u_xlat19 : f32;
  var x_1056 : vec3<f32>;
  var x_1306 : vec3<f32>;
  var x_1577 : vec3<f32>;
  var x_1832 : vec3<f32>;
  var x_2102 : vec3<f32>;
  var x_2357 : vec3<f32>;
  var x_2628 : vec3<f32>;
  var x_2883 : vec3<f32>;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3165 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_86 : vec2<f32> = vs_TEXCOORD0;
  let x_88 : f32 = x_33.x_GlobalMipBias.x;
  let x_89 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_86, x_88);
  u_xlat8 = vec3<f32>(x_89.x, x_89.y, x_89.z);
  let x_96 : f32 = vs_TEXCOORD0.y;
  u_xlat1.x = (-(x_96) + 1.0f);
  let x_101 : f32 = u_xlat0;
  let x_104 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat9 = (x_101 * x_104);
  let x_111 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_113 : vec2<f32> = vs_TEXCOORD0;
  let x_118 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_120 : vec3<f32> = ((vec3<f32>(x_111.x, x_111.y, x_111.z) * vec3<f32>(x_113.x, x_113.x, x_113.x)) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_125 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_127 : vec4<f32> = u_xlat1;
  let x_130 : vec4<f32> = u_xlat2;
  let x_132 : vec3<f32> = ((vec3<f32>(x_125.x, x_125.y, x_125.z) * vec3<f32>(x_127.x, x_127.x, x_127.x)) + vec3<f32>(x_130.x, x_130.y, x_130.z));
  let x_133 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_132.x, x_133.y, x_132.y, x_132.z);
  let x_135 : f32 = u_xlat9;
  let x_137 : vec4<f32> = u_xlat1;
  let x_139 : vec3<f32> = (vec3<f32>(x_135, x_135, x_135) * vec3<f32>(x_137.x, x_137.z, x_137.w));
  let x_140 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_139.x, x_139.y, x_139.z, x_140.w);
  let x_142 : vec2<f32> = vs_TEXCOORD0;
  let x_144 : vec4<f32> = x_33.x_ScaledScreenParams;
  let x_146 : vec2<f32> = (x_142 * vec2<f32>(x_144.x, x_144.y));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_147.z, x_147.w);
  let x_151 : vec4<f32> = u_xlat2;
  let x_154 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat18 = (vec2<f32>(x_151.x, x_151.y) * vec2<f32>(x_154.z, x_154.z));
  let x_158 : vec2<f32> = u_xlat18;
  u_xlat25 = dot(x_158, vec2<f32>(0.067110561f, 0.00583715f));
  let x_163 : f32 = u_xlat25;
  u_xlat25 = fract(x_163);
  let x_165 : f32 = u_xlat25;
  u_xlat25 = (x_165 * 52.982917786f);
  let x_168 : f32 = u_xlat25;
  u_xlat25 = fract(x_168);
  let x_170 : f32 = u_xlat25;
  u_xlat18.x = fract(x_170);
  let x_175 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_175 * 2.0f) + -1.0f);
  let x_181 : f32 = u_xlat25;
  u_xlat25 = (x_181 + 0.9296875f);
  let x_184 : f32 = u_xlat25;
  u_xlat25 = (x_184 * 6.283185482f);
  let x_188 : f32 = u_xlat3.z;
  let x_191 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_188) * x_191) + 1.0f);
  let x_196 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_196);
  let x_200 : f32 = u_xlat25;
  u_xlat4.x = sin(x_200);
  let x_204 : f32 = u_xlat25;
  u_xlat5.x = cos(x_204);
  let x_208 : f32 = u_xlat18.x;
  let x_210 : f32 = u_xlat5.x;
  u_xlat3.x = (x_208 * x_210);
  let x_214 : f32 = u_xlat18.x;
  let x_216 : f32 = u_xlat4.x;
  u_xlat3.y = (x_214 * x_216);
  let x_219 : vec4<f32> = u_xlat3;
  let x_223 : vec3<f32> = (vec3<f32>(x_219.x, x_219.y, x_219.z) * vec3<f32>(0.288675129f, 0.288675129f, 0.288675129f));
  let x_224 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_223.x, x_223.y, x_223.z, x_224.w);
  let x_226 : vec3<f32> = u_xlat8;
  let x_228 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(-(x_226), vec3<f32>(x_228.x, x_228.y, x_228.z));
  let x_232 : f32 = u_xlat25;
  u_xlatb25 = (x_232 >= 0.0f);
  let x_234 : bool = u_xlatb25;
  if (x_234) {
    let x_238 : vec4<f32> = u_xlat3;
    x_235 = -(vec3<f32>(x_238.x, x_238.y, x_238.z));
  } else {
    let x_242 : vec4<f32> = u_xlat3;
    x_235 = vec3<f32>(x_242.x, x_242.y, x_242.z);
  }
  let x_244 : vec3<f32> = x_235;
  let x_245 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_244.x, x_244.y, x_244.z, x_245.w);
  let x_247 : vec4<f32> = u_xlat3;
  let x_250 : vec4<f32> = x_33.x_SSAOParams;
  let x_253 : vec4<f32> = u_xlat1;
  let x_255 : vec3<f32> = ((vec3<f32>(x_247.x, x_247.y, x_247.z) * vec3<f32>(x_250.y, x_250.y, x_250.y)) + vec3<f32>(x_253.x, x_253.y, x_253.z));
  let x_256 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_255.x, x_255.y, x_255.z, x_256.w);
  let x_258 : vec4<f32> = u_xlat3;
  let x_262 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_258.y, x_258.y) * vec2<f32>(x_262.x, x_262.y));
  let x_266 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_268 : vec4<f32> = u_xlat3;
  let x_271 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_266.x, x_266.y) * vec2<f32>(x_268.x, x_268.x)) + x_271);
  let x_274 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_276 : vec4<f32> = u_xlat3;
  let x_279 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_274.x, x_274.y) * vec2<f32>(x_276.z, x_276.z)) + x_279);
  let x_283 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_283;
  let x_286 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_286;
  let x_289 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_289;
  let x_291 : vec3<f32> = u_xlat4;
  let x_292 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_291, vec3<f32>(x_292.x, x_292.y, x_292.z));
  let x_295 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_295));
  let x_299 : vec2<f32> = u_xlat18;
  let x_300 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_299 * vec2<f32>(x_300.x, x_300.x)) + vec2<f32>(1.0f, 1.0f));
  let x_305 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_305 * vec2<f32>(0.5f, 0.5f));
  let x_308 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_308, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_315 : vec2<f32> = u_xlat18;
  let x_317 : f32 = x_33.x_GlobalMipBias.x;
  let x_318 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_315, x_317);
  u_xlat3.x = x_318.x;
  let x_323 : f32 = x_33.x_ZBufferParams.z;
  let x_325 : f32 = u_xlat3.x;
  let x_328 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_323 * x_325) + x_328);
  let x_332 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_332);
  let x_335 : f32 = u_xlat25;
  let x_338 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_335) + -(x_338));
  let x_341 : f32 = u_xlat25;
  let x_344 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_341) < x_344);
  let x_346 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_346);
  let x_352 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_352);
  let x_356 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_356);
  let x_359 : f32 = u_xlat25;
  let x_361 : f32 = u_xlat3.x;
  u_xlat25 = (x_359 * x_361);
  let x_365 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_365) + 1.0f);
  let x_369 : f32 = u_xlat11.x;
  let x_371 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_369 * x_371);
  let x_375 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_377 : vec2<f32> = u_xlat18;
  let x_381 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_375.x, x_375.y, x_375.z) * vec3<f32>(x_377.x, x_377.x, x_377.x)) + vec3<f32>(x_381.x, x_381.y, x_381.z));
  let x_385 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_387 : f32 = u_xlat26;
  let x_390 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_385.x, x_385.y, x_385.z) * vec3<f32>(x_387, x_387, x_387)) + x_390);
  let x_392 : vec3<f32> = u_xlat11;
  let x_393 : vec4<f32> = u_xlat3;
  let x_396 : vec4<f32> = u_xlat1;
  let x_399 : vec3<f32> = ((x_392 * vec3<f32>(x_393.x, x_393.x, x_393.x)) + -(vec3<f32>(x_396.x, x_396.y, x_396.z)));
  let x_400 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_399.x, x_399.y, x_399.z, x_400.w);
  let x_402 : vec4<f32> = u_xlat3;
  let x_404 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(vec3<f32>(x_402.x, x_402.y, x_402.z), x_404);
  let x_407 : f32 = u_xlat0;
  let x_412 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_407) * 0.004f) + x_412);
  let x_416 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_416, 0.0f);
  let x_419 : vec4<f32> = u_xlat3;
  let x_421 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_419.x, x_419.y, x_419.z), vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_424 : f32 = u_xlat26;
  u_xlat26 = (x_424 + 0.0001f);
  let x_427 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_427);
  let x_429 : f32 = u_xlat26;
  let x_431 : f32 = u_xlat18.x;
  u_xlat18.x = (x_429 * x_431);
  let x_434 : vec4<f32> = u_xlat2;
  let x_437 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_434.x, x_434.y, x_434.x, x_434.y) * vec4<f32>(x_437.z, x_437.z, x_437.z, x_437.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_446 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec2<f32>(x_446.x, x_446.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_449 : f32 = u_xlat26;
  u_xlat26 = fract(x_449);
  let x_451 : f32 = u_xlat26;
  u_xlat26 = (x_451 * 52.982917786f);
  let x_453 : f32 = u_xlat26;
  u_xlat26 = fract(x_453);
  let x_455 : f32 = u_xlat26;
  let x_460 : vec2<f32> = (vec2<f32>(x_455, x_455) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_461 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_460.x, x_460.y, x_461.z, x_461.w);
  let x_464 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_464);
  let x_466 : f32 = u_xlat26;
  u_xlat5.z = ((x_466 * 2.0f) + -1.0f);
  let x_471 : f32 = u_xlat3.y;
  u_xlat26 = (x_471 * 6.283185482f);
  let x_474 : f32 = u_xlat5.z;
  let x_477 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_474) * x_477) + 1.0f);
  let x_482 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_482);
  let x_486 : f32 = u_xlat26;
  u_xlat6 = sin(x_486);
  let x_489 : f32 = u_xlat26;
  u_xlat7 = cos(x_489);
  let x_492 : f32 = u_xlat3.x;
  let x_493 : f32 = u_xlat7;
  u_xlat5.x = (x_492 * x_493);
  let x_497 : f32 = u_xlat3.x;
  let x_498 : f32 = u_xlat6;
  u_xlat5.y = (x_497 * x_498);
  let x_501 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_501 * vec3<f32>(0.408248305f, 0.408248305f, 0.408248305f));
  let x_505 : vec3<f32> = u_xlat8;
  let x_507 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(-(x_505), x_507);
  let x_510 : f32 = u_xlat26;
  u_xlatb26 = (x_510 >= 0.0f);
  let x_512 : bool = u_xlatb26;
  if (x_512) {
    let x_516 : vec3<f32> = u_xlat5;
    x_513 = -(x_516);
  } else {
    let x_519 : vec3<f32> = u_xlat5;
    x_513 = x_519;
  }
  let x_520 : vec3<f32> = x_513;
  u_xlat5 = x_520;
  let x_521 : vec3<f32> = u_xlat5;
  let x_523 : vec4<f32> = x_33.x_SSAOParams;
  let x_526 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_521 * vec3<f32>(x_523.y, x_523.y, x_523.y)) + vec3<f32>(x_526.x, x_526.y, x_526.z));
  let x_529 : vec3<f32> = u_xlat5;
  let x_532 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_534 : vec2<f32> = (vec2<f32>(x_529.y, x_529.y) * vec2<f32>(x_532.x, x_532.y));
  let x_535 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_534.x, x_534.y, x_535.z, x_535.w);
  let x_538 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_540 : vec3<f32> = u_xlat5;
  let x_543 : vec4<f32> = u_xlat3;
  let x_545 : vec2<f32> = ((vec2<f32>(x_538.x, x_538.y) * vec2<f32>(x_540.x, x_540.x)) + vec2<f32>(x_543.x, x_543.y));
  let x_546 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_545.x, x_545.y, x_546.z, x_546.w);
  let x_549 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_551 : vec3<f32> = u_xlat5;
  let x_554 : vec4<f32> = u_xlat3;
  let x_556 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.y) * vec2<f32>(x_551.z, x_551.z)) + vec2<f32>(x_554.x, x_554.y));
  let x_557 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_556.x, x_556.y, x_557.z, x_557.w);
  let x_559 : vec3<f32> = u_xlat4;
  let x_560 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_559, x_560);
  let x_563 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_563));
  let x_566 : vec4<f32> = u_xlat3;
  let x_568 : f32 = u_xlat28;
  let x_571 : vec2<f32> = ((vec2<f32>(x_566.x, x_566.y) * vec2<f32>(x_568, x_568)) + vec2<f32>(1.0f, 1.0f));
  let x_572 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_571.x, x_571.y, x_572.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat3;
  let x_576 : vec2<f32> = (vec2<f32>(x_574.x, x_574.y) * vec2<f32>(0.5f, 0.5f));
  let x_577 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_576.x, x_576.y, x_577.z, x_577.w);
  let x_579 : vec4<f32> = u_xlat3;
  let x_583 : vec2<f32> = clamp(vec2<f32>(x_579.x, x_579.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_584 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_583.x, x_583.y, x_584.z, x_584.w);
  let x_589 : vec4<f32> = u_xlat3;
  let x_592 : f32 = x_33.x_GlobalMipBias.x;
  let x_593 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_589.x, x_589.y), x_592);
  u_xlat28 = x_593.x;
  let x_596 : f32 = x_33.x_ZBufferParams.z;
  let x_597 : f32 = u_xlat28;
  let x_600 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_596 * x_597) + x_600);
  let x_604 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_604);
  let x_607 : f32 = u_xlat26;
  let x_610 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_607) + -(x_610));
  let x_613 : f32 = u_xlat26;
  let x_616 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_613) < x_616);
  let x_618 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_618);
  let x_621 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_621);
  let x_623 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_623);
  let x_625 : f32 = u_xlat26;
  let x_626 : f32 = u_xlat28;
  u_xlat26 = (x_625 * x_626);
  let x_629 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_629) + 1.0f);
  let x_634 : f32 = u_xlat5.x;
  let x_636 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_634 * x_636);
  let x_639 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_641 : vec4<f32> = u_xlat3;
  let x_645 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_639.x, x_639.y, x_639.z) * vec3<f32>(x_641.x, x_641.x, x_641.x)) + vec3<f32>(x_645.x, x_645.y, x_645.z));
  let x_649 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_651 : vec3<f32> = u_xlat11;
  let x_654 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_649.x, x_649.y, x_649.z) * vec3<f32>(x_651.x, x_651.x, x_651.x)) + x_654);
  let x_656 : vec3<f32> = u_xlat5;
  let x_657 : f32 = u_xlat28;
  let x_660 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_656 * vec3<f32>(x_657, x_657, x_657)) + -(vec3<f32>(x_660.x, x_660.y, x_660.z)));
  let x_664 : vec3<f32> = u_xlat5;
  let x_665 : vec3<f32> = u_xlat8;
  u_xlat3.x = dot(x_664, x_665);
  let x_668 : f32 = u_xlat0;
  let x_672 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_668) * 0.004f) + x_672);
  let x_676 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_676, 0.0f);
  let x_679 : vec3<f32> = u_xlat5;
  let x_680 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_679, x_680);
  let x_684 : f32 = u_xlat11.x;
  u_xlat11.x = (x_684 + 0.0001f);
  let x_688 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_688);
  let x_692 : f32 = u_xlat11.x;
  let x_694 : f32 = u_xlat3.x;
  u_xlat3.x = (x_692 * x_694);
  let x_697 : f32 = u_xlat26;
  let x_699 : f32 = u_xlat3.x;
  u_xlat26 = (x_697 * x_699);
  let x_702 : f32 = u_xlat18.x;
  let x_703 : f32 = u_xlat25;
  let x_705 : f32 = u_xlat26;
  u_xlat25 = ((x_702 * x_703) + x_705);
  let x_707 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_707.z, x_707.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_712 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_712);
  let x_716 : f32 = u_xlat18.x;
  u_xlat18.x = (x_716 * 52.982917786f);
  let x_720 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_720);
  let x_723 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_723.x, x_723.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_730 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_730);
  let x_734 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_734 * 2.0f) + -1.0f);
  let x_739 : f32 = u_xlat18.y;
  u_xlat18.x = (x_739 * 6.283185482f);
  let x_743 : f32 = u_xlat3.z;
  let x_746 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_743) * x_746) + 1.0f);
  let x_749 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_749);
  let x_752 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_752);
  let x_756 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_756);
  let x_758 : f32 = u_xlat26;
  let x_759 : f32 = u_xlat6;
  u_xlat3.x = (x_758 * x_759);
  let x_762 : f32 = u_xlat26;
  let x_764 : f32 = u_xlat5.x;
  u_xlat3.y = (x_762 * x_764);
  let x_767 : vec4<f32> = u_xlat3;
  let x_770 : vec3<f32> = (vec3<f32>(x_767.x, x_767.y, x_767.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_771 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_770.x, x_770.y, x_770.z, x_771.w);
  let x_773 : vec3<f32> = u_xlat8;
  let x_775 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_773), vec3<f32>(x_775.x, x_775.y, x_775.z));
  let x_781 : f32 = u_xlat18.x;
  u_xlatb18 = (x_781 >= 0.0f);
  let x_783 : bool = u_xlatb18;
  if (x_783) {
    let x_787 : vec4<f32> = u_xlat3;
    x_784 = -(vec3<f32>(x_787.x, x_787.y, x_787.z));
  } else {
    let x_791 : vec4<f32> = u_xlat3;
    x_784 = vec3<f32>(x_791.x, x_791.y, x_791.z);
  }
  let x_793 : vec3<f32> = x_784;
  let x_794 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_793.x, x_793.y, x_793.z, x_794.w);
  let x_796 : vec4<f32> = u_xlat3;
  let x_799 : vec4<f32> = x_33.x_SSAOParams;
  let x_802 : vec4<f32> = u_xlat1;
  let x_804 : vec3<f32> = ((vec3<f32>(x_796.x, x_796.y, x_796.z) * vec3<f32>(x_799.y, x_799.y, x_799.y)) + vec3<f32>(x_802.x, x_802.y, x_802.z));
  let x_805 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_804.x, x_804.y, x_804.z, x_805.w);
  let x_807 : vec4<f32> = u_xlat3;
  let x_810 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_807.y, x_807.y) * vec2<f32>(x_810.x, x_810.y));
  let x_814 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_816 : vec4<f32> = u_xlat3;
  let x_819 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_814.x, x_814.y) * vec2<f32>(x_816.x, x_816.x)) + x_819);
  let x_822 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_824 : vec4<f32> = u_xlat3;
  let x_827 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_822.x, x_822.y) * vec2<f32>(x_824.z, x_824.z)) + x_827);
  let x_829 : vec3<f32> = u_xlat4;
  let x_830 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_829, vec3<f32>(x_830.x, x_830.y, x_830.z));
  let x_835 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_835));
  let x_839 : vec2<f32> = u_xlat18;
  let x_840 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_839 * vec2<f32>(x_840.x, x_840.x)) + vec2<f32>(1.0f, 1.0f));
  let x_844 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_844 * vec2<f32>(0.5f, 0.5f));
  let x_846 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_846, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_853 : vec2<f32> = u_xlat18;
  let x_855 : f32 = x_33.x_GlobalMipBias.x;
  let x_856 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_853, x_855);
  u_xlat11.x = x_856.x;
  let x_861 : f32 = x_33.x_ZBufferParams.z;
  let x_863 : f32 = u_xlat11.x;
  let x_866 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_861 * x_863) + x_866);
  let x_868 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_868);
  let x_870 : f32 = u_xlat19;
  let x_873 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_870) + -(x_873));
  let x_878 : f32 = u_xlat3.x;
  let x_881 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_878) < x_881);
  let x_885 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_885);
  let x_889 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_889);
  let x_893 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_893);
  let x_897 : f32 = u_xlat3.y;
  let x_899 : f32 = u_xlat3.x;
  u_xlat3.x = (x_897 * x_899);
  let x_903 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_903) + 1.0f);
  let x_906 : f32 = u_xlat19;
  let x_908 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_906 * x_908);
  let x_912 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_914 : vec2<f32> = u_xlat18;
  let x_918 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_912.x, x_912.y, x_912.z) * vec3<f32>(x_914.x, x_914.x, x_914.x)) + vec3<f32>(x_918.x, x_918.y, x_918.z));
  let x_922 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_924 : f32 = u_xlat26;
  let x_927 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_922.x, x_922.y, x_922.z) * vec3<f32>(x_924, x_924, x_924)) + x_927);
  let x_929 : vec3<f32> = u_xlat5;
  let x_930 : vec3<f32> = u_xlat11;
  let x_933 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_929 * vec3<f32>(x_930.x, x_930.x, x_930.x)) + -(vec3<f32>(x_933.x, x_933.y, x_933.z)));
  let x_937 : vec3<f32> = u_xlat11;
  let x_938 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_937, x_938);
  let x_941 : f32 = u_xlat0;
  let x_945 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_941) * 0.004f) + x_945);
  let x_949 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_949, 0.0f);
  let x_952 : vec3<f32> = u_xlat11;
  let x_953 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_952, x_953);
  let x_955 : f32 = u_xlat26;
  u_xlat26 = (x_955 + 0.0001f);
  let x_957 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_957);
  let x_959 : f32 = u_xlat26;
  let x_961 : f32 = u_xlat18.x;
  u_xlat18.x = (x_959 * x_961);
  let x_965 : f32 = u_xlat18.x;
  let x_967 : f32 = u_xlat3.x;
  let x_969 : f32 = u_xlat25;
  u_xlat25 = ((x_965 * x_967) + x_969);
  let x_971 : vec4<f32> = u_xlat2;
  let x_974 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_971.x, x_971.y, x_971.x, x_971.y) * vec4<f32>(x_974.z, x_974.z, x_974.z, x_974.z)) + vec4<f32>(6.248999596f, 14.600999832f, 8.331999779f, 19.468000412f));
  let x_983 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_983.x, x_983.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_988 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_988);
  let x_992 : f32 = u_xlat18.x;
  u_xlat18.x = (x_992 * 52.982917786f);
  let x_996 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_996);
  let x_999 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_999.x, x_999.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1006 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1006);
  let x_1010 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1010 * 2.0f) + -1.0f);
  let x_1015 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1015 * 6.283185482f);
  let x_1019 : f32 = u_xlat5.z;
  let x_1022 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1019) * x_1022) + 1.0f);
  let x_1025 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1025);
  let x_1028 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1028);
  let x_1032 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1032);
  let x_1034 : f32 = u_xlat26;
  let x_1035 : f32 = u_xlat6;
  u_xlat5.x = (x_1034 * x_1035);
  let x_1038 : f32 = u_xlat26;
  let x_1040 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1038 * x_1040);
  let x_1043 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1043 * vec3<f32>(0.577350259f, 0.577350259f, 0.577350259f));
  let x_1047 : vec3<f32> = u_xlat8;
  let x_1049 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(x_1047), x_1049);
  let x_1053 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1053 >= 0.0f);
  let x_1055 : bool = u_xlatb18;
  if (x_1055) {
    let x_1059 : vec3<f32> = u_xlat5;
    x_1056 = -(x_1059);
  } else {
    let x_1062 : vec3<f32> = u_xlat5;
    x_1056 = x_1062;
  }
  let x_1063 : vec3<f32> = x_1056;
  u_xlat5 = x_1063;
  let x_1064 : vec3<f32> = u_xlat5;
  let x_1066 : vec4<f32> = x_33.x_SSAOParams;
  let x_1069 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1064 * vec3<f32>(x_1066.y, x_1066.y, x_1066.y)) + vec3<f32>(x_1069.x, x_1069.y, x_1069.z));
  let x_1072 : vec3<f32> = u_xlat5;
  let x_1075 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1072.y, x_1072.y) * vec2<f32>(x_1075.x, x_1075.y));
  let x_1079 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1081 : vec3<f32> = u_xlat5;
  let x_1084 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1079.x, x_1079.y) * vec2<f32>(x_1081.x, x_1081.x)) + x_1084);
  let x_1087 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1089 : vec3<f32> = u_xlat5;
  let x_1092 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1087.x, x_1087.y) * vec2<f32>(x_1089.z, x_1089.z)) + x_1092);
  let x_1094 : vec3<f32> = u_xlat4;
  let x_1095 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1094, x_1095);
  let x_1099 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1099));
  let x_1103 : vec2<f32> = u_xlat18;
  let x_1104 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1103 * vec2<f32>(x_1104.x, x_1104.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1108 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1108 * vec2<f32>(0.5f, 0.5f));
  let x_1110 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1110, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1117 : vec2<f32> = u_xlat18;
  let x_1119 : f32 = x_33.x_GlobalMipBias.x;
  let x_1120 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1117, x_1119);
  u_xlat11.x = x_1120.x;
  let x_1124 : f32 = x_33.x_ZBufferParams.z;
  let x_1126 : f32 = u_xlat11.x;
  let x_1129 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1124 * x_1126) + x_1129);
  let x_1131 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1131);
  let x_1134 : f32 = u_xlat3.x;
  let x_1136 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1134) + -(x_1136));
  let x_1141 : f32 = u_xlat3.x;
  let x_1144 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1141) < x_1144);
  let x_1148 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1148);
  let x_1152 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1152);
  let x_1156 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1156);
  let x_1160 : f32 = u_xlat3.y;
  let x_1162 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1160 * x_1162);
  let x_1166 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1166) + 1.0f);
  let x_1169 : f32 = u_xlat28;
  let x_1171 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1169 * x_1171);
  let x_1175 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1177 : vec2<f32> = u_xlat18;
  let x_1181 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1175.x, x_1175.y, x_1175.z) * vec3<f32>(x_1177.x, x_1177.x, x_1177.x)) + vec3<f32>(x_1181.x, x_1181.y, x_1181.z));
  let x_1185 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1187 : f32 = u_xlat26;
  let x_1190 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1185.x, x_1185.y, x_1185.z) * vec3<f32>(x_1187, x_1187, x_1187)) + x_1190);
  let x_1192 : vec3<f32> = u_xlat5;
  let x_1193 : vec3<f32> = u_xlat11;
  let x_1196 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1192 * vec3<f32>(x_1193.x, x_1193.x, x_1193.x)) + -(vec3<f32>(x_1196.x, x_1196.y, x_1196.z)));
  let x_1200 : vec3<f32> = u_xlat5;
  let x_1201 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1200, x_1201);
  let x_1204 : f32 = u_xlat0;
  let x_1208 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1204) * 0.004f) + x_1208);
  let x_1212 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1212, 0.0f);
  let x_1215 : vec3<f32> = u_xlat5;
  let x_1216 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1215, x_1216);
  let x_1218 : f32 = u_xlat26;
  u_xlat26 = (x_1218 + 0.0001f);
  let x_1220 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1220);
  let x_1222 : f32 = u_xlat26;
  let x_1224 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1222 * x_1224);
  let x_1228 : f32 = u_xlat18.x;
  let x_1230 : f32 = u_xlat3.x;
  let x_1232 : f32 = u_xlat25;
  u_xlat25 = ((x_1228 * x_1230) + x_1232);
  let x_1234 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1234.z, x_1234.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1239 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1239);
  let x_1243 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1243 * 52.982917786f);
  let x_1247 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1247);
  let x_1251 : f32 = u_xlat18.x;
  u_xlat26 = (x_1251 + 0.984375f);
  let x_1254 : f32 = u_xlat26;
  u_xlat26 = fract(x_1254);
  let x_1256 : f32 = u_xlat26;
  u_xlat3.z = ((x_1256 * 2.0f) + -1.0f);
  let x_1261 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1261 * 6.283185482f);
  let x_1265 : f32 = u_xlat3.z;
  let x_1268 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1265) * x_1268) + 1.0f);
  let x_1271 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1271);
  let x_1274 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1274);
  let x_1278 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1278);
  let x_1280 : f32 = u_xlat26;
  let x_1281 : f32 = u_xlat6;
  u_xlat3.x = (x_1280 * x_1281);
  let x_1284 : f32 = u_xlat26;
  let x_1286 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1284 * x_1286);
  let x_1289 : vec4<f32> = u_xlat3;
  let x_1293 : vec3<f32> = (vec3<f32>(x_1289.x, x_1289.y, x_1289.z) * vec3<f32>(0.645497262f, 0.645497262f, 0.645497262f));
  let x_1294 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1293.x, x_1293.y, x_1293.z, x_1294.w);
  let x_1296 : vec3<f32> = u_xlat8;
  let x_1298 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_1296), vec3<f32>(x_1298.x, x_1298.y, x_1298.z));
  let x_1303 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1303 >= 0.0f);
  let x_1305 : bool = u_xlatb18;
  if (x_1305) {
    let x_1309 : vec4<f32> = u_xlat3;
    x_1306 = -(vec3<f32>(x_1309.x, x_1309.y, x_1309.z));
  } else {
    let x_1313 : vec4<f32> = u_xlat3;
    x_1306 = vec3<f32>(x_1313.x, x_1313.y, x_1313.z);
  }
  let x_1315 : vec3<f32> = x_1306;
  let x_1316 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1315.x, x_1315.y, x_1315.z, x_1316.w);
  let x_1318 : vec4<f32> = u_xlat3;
  let x_1321 : vec4<f32> = x_33.x_SSAOParams;
  let x_1324 : vec4<f32> = u_xlat1;
  let x_1326 : vec3<f32> = ((vec3<f32>(x_1318.x, x_1318.y, x_1318.z) * vec3<f32>(x_1321.y, x_1321.y, x_1321.y)) + vec3<f32>(x_1324.x, x_1324.y, x_1324.z));
  let x_1327 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1326.x, x_1326.y, x_1326.z, x_1327.w);
  let x_1329 : vec4<f32> = u_xlat3;
  let x_1332 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1329.y, x_1329.y) * vec2<f32>(x_1332.x, x_1332.y));
  let x_1336 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1338 : vec4<f32> = u_xlat3;
  let x_1341 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1336.x, x_1336.y) * vec2<f32>(x_1338.x, x_1338.x)) + x_1341);
  let x_1344 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1346 : vec4<f32> = u_xlat3;
  let x_1349 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1344.x, x_1344.y) * vec2<f32>(x_1346.z, x_1346.z)) + x_1349);
  let x_1351 : vec3<f32> = u_xlat4;
  let x_1352 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1351, vec3<f32>(x_1352.x, x_1352.y, x_1352.z));
  let x_1357 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1357));
  let x_1361 : vec2<f32> = u_xlat18;
  let x_1362 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1361 * vec2<f32>(x_1362.x, x_1362.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1366 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1366 * vec2<f32>(0.5f, 0.5f));
  let x_1368 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1368, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1375 : vec2<f32> = u_xlat18;
  let x_1377 : f32 = x_33.x_GlobalMipBias.x;
  let x_1378 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1375, x_1377);
  u_xlat11.x = x_1378.x;
  let x_1382 : f32 = x_33.x_ZBufferParams.z;
  let x_1384 : f32 = u_xlat11.x;
  let x_1387 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1382 * x_1384) + x_1387);
  let x_1389 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1389);
  let x_1391 : f32 = u_xlat19;
  let x_1394 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1391) + -(x_1394));
  let x_1399 : f32 = u_xlat3.x;
  let x_1402 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1399) < x_1402);
  let x_1406 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1406);
  let x_1410 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1410);
  let x_1414 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1414);
  let x_1418 : f32 = u_xlat3.y;
  let x_1420 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1418 * x_1420);
  let x_1424 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1424) + 1.0f);
  let x_1427 : f32 = u_xlat19;
  let x_1429 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1427 * x_1429);
  let x_1433 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1435 : vec2<f32> = u_xlat18;
  let x_1439 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1433.x, x_1433.y, x_1433.z) * vec3<f32>(x_1435.x, x_1435.x, x_1435.x)) + vec3<f32>(x_1439.x, x_1439.y, x_1439.z));
  let x_1443 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1445 : f32 = u_xlat26;
  let x_1448 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1443.x, x_1443.y, x_1443.z) * vec3<f32>(x_1445, x_1445, x_1445)) + x_1448);
  let x_1450 : vec3<f32> = u_xlat5;
  let x_1451 : vec3<f32> = u_xlat11;
  let x_1454 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_1450 * vec3<f32>(x_1451.x, x_1451.x, x_1451.x)) + -(vec3<f32>(x_1454.x, x_1454.y, x_1454.z)));
  let x_1458 : vec3<f32> = u_xlat11;
  let x_1459 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1458, x_1459);
  let x_1462 : f32 = u_xlat0;
  let x_1466 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1462) * 0.004f) + x_1466);
  let x_1470 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1470, 0.0f);
  let x_1473 : vec3<f32> = u_xlat11;
  let x_1474 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1473, x_1474);
  let x_1476 : f32 = u_xlat26;
  u_xlat26 = (x_1476 + 0.0001f);
  let x_1478 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1478);
  let x_1480 : f32 = u_xlat26;
  let x_1482 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1480 * x_1482);
  let x_1486 : f32 = u_xlat18.x;
  let x_1488 : f32 = u_xlat3.x;
  let x_1490 : f32 = u_xlat25;
  u_xlat25 = ((x_1486 * x_1488) + x_1490);
  let x_1492 : vec4<f32> = u_xlat2;
  let x_1495 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1492.x, x_1492.y, x_1492.x, x_1492.y) * vec4<f32>(x_1495.z, x_1495.z, x_1495.z, x_1495.z)) + vec4<f32>(10.414999962f, 24.335000992f, 12.497999191f, 29.201999664f));
  let x_1504 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1504.x, x_1504.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1509 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1509);
  let x_1513 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1513 * 52.982917786f);
  let x_1517 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1517);
  let x_1520 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1520.x, x_1520.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1527 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1527);
  let x_1531 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1531 * 2.0f) + -1.0f);
  let x_1536 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1536 * 6.283185482f);
  let x_1540 : f32 = u_xlat5.z;
  let x_1543 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1540) * x_1543) + 1.0f);
  let x_1546 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1546);
  let x_1549 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1549);
  let x_1553 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1553);
  let x_1555 : f32 = u_xlat26;
  let x_1556 : f32 = u_xlat6;
  u_xlat5.x = (x_1555 * x_1556);
  let x_1559 : f32 = u_xlat26;
  let x_1561 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1559 * x_1561);
  let x_1564 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1564 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_1568 : vec3<f32> = u_xlat8;
  let x_1570 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(x_1568), x_1570);
  let x_1574 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1574 >= 0.0f);
  let x_1576 : bool = u_xlatb18;
  if (x_1576) {
    let x_1580 : vec3<f32> = u_xlat5;
    x_1577 = -(x_1580);
  } else {
    let x_1583 : vec3<f32> = u_xlat5;
    x_1577 = x_1583;
  }
  let x_1584 : vec3<f32> = x_1577;
  u_xlat5 = x_1584;
  let x_1585 : vec3<f32> = u_xlat5;
  let x_1587 : vec4<f32> = x_33.x_SSAOParams;
  let x_1590 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1585 * vec3<f32>(x_1587.y, x_1587.y, x_1587.y)) + vec3<f32>(x_1590.x, x_1590.y, x_1590.z));
  let x_1593 : vec3<f32> = u_xlat5;
  let x_1596 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1593.y, x_1593.y) * vec2<f32>(x_1596.x, x_1596.y));
  let x_1600 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1602 : vec3<f32> = u_xlat5;
  let x_1605 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1600.x, x_1600.y) * vec2<f32>(x_1602.x, x_1602.x)) + x_1605);
  let x_1608 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1610 : vec3<f32> = u_xlat5;
  let x_1613 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1608.x, x_1608.y) * vec2<f32>(x_1610.z, x_1610.z)) + x_1613);
  let x_1615 : vec3<f32> = u_xlat4;
  let x_1616 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1615, x_1616);
  let x_1620 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1620));
  let x_1624 : vec2<f32> = u_xlat18;
  let x_1625 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1624 * vec2<f32>(x_1625.x, x_1625.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1629 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1629 * vec2<f32>(0.5f, 0.5f));
  let x_1631 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1631, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1638 : vec2<f32> = u_xlat18;
  let x_1640 : f32 = x_33.x_GlobalMipBias.x;
  let x_1641 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1638, x_1640);
  u_xlat11.x = x_1641.x;
  let x_1645 : f32 = x_33.x_ZBufferParams.z;
  let x_1647 : f32 = u_xlat11.x;
  let x_1650 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1645 * x_1647) + x_1650);
  let x_1652 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1652);
  let x_1655 : f32 = u_xlat3.x;
  let x_1657 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1655) + -(x_1657));
  let x_1662 : f32 = u_xlat3.x;
  let x_1665 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1662) < x_1665);
  let x_1669 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1669);
  let x_1673 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1673);
  let x_1677 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1677);
  let x_1681 : f32 = u_xlat3.y;
  let x_1683 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1681 * x_1683);
  let x_1687 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1687) + 1.0f);
  let x_1690 : f32 = u_xlat28;
  let x_1692 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1690 * x_1692);
  let x_1696 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1698 : vec2<f32> = u_xlat18;
  let x_1702 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1696.x, x_1696.y, x_1696.z) * vec3<f32>(x_1698.x, x_1698.x, x_1698.x)) + vec3<f32>(x_1702.x, x_1702.y, x_1702.z));
  let x_1706 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1708 : f32 = u_xlat26;
  let x_1711 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1706.x, x_1706.y, x_1706.z) * vec3<f32>(x_1708, x_1708, x_1708)) + x_1711);
  let x_1713 : vec3<f32> = u_xlat5;
  let x_1714 : vec3<f32> = u_xlat11;
  let x_1717 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1713 * vec3<f32>(x_1714.x, x_1714.x, x_1714.x)) + -(vec3<f32>(x_1717.x, x_1717.y, x_1717.z)));
  let x_1721 : vec3<f32> = u_xlat5;
  let x_1722 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1721, x_1722);
  let x_1725 : f32 = u_xlat0;
  let x_1729 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1725) * 0.004f) + x_1729);
  let x_1733 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1733, 0.0f);
  let x_1736 : vec3<f32> = u_xlat5;
  let x_1737 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1736, x_1737);
  let x_1739 : f32 = u_xlat26;
  u_xlat26 = (x_1739 + 0.0001f);
  let x_1741 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1741);
  let x_1743 : f32 = u_xlat26;
  let x_1745 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1743 * x_1745);
  let x_1749 : f32 = u_xlat18.x;
  let x_1751 : f32 = u_xlat3.x;
  let x_1753 : f32 = u_xlat25;
  u_xlat25 = ((x_1749 * x_1751) + x_1753);
  let x_1755 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1755.z, x_1755.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1760 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1760);
  let x_1764 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1764 * 52.982917786f);
  let x_1768 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1768);
  let x_1771 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1771.x, x_1771.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1778 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1778);
  let x_1782 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1782 * 2.0f) + -1.0f);
  let x_1787 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1787 * 6.283185482f);
  let x_1791 : f32 = u_xlat3.z;
  let x_1794 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1791) * x_1794) + 1.0f);
  let x_1797 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1797);
  let x_1800 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1800);
  let x_1804 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1804);
  let x_1806 : f32 = u_xlat26;
  let x_1807 : f32 = u_xlat6;
  u_xlat3.x = (x_1806 * x_1807);
  let x_1810 : f32 = u_xlat26;
  let x_1812 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1810 * x_1812);
  let x_1815 : vec4<f32> = u_xlat3;
  let x_1819 : vec3<f32> = (vec3<f32>(x_1815.x, x_1815.y, x_1815.z) * vec3<f32>(0.763762653f, 0.763762653f, 0.763762653f));
  let x_1820 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1819.x, x_1819.y, x_1819.z, x_1820.w);
  let x_1822 : vec3<f32> = u_xlat8;
  let x_1824 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_1822), vec3<f32>(x_1824.x, x_1824.y, x_1824.z));
  let x_1829 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1829 >= 0.0f);
  let x_1831 : bool = u_xlatb18;
  if (x_1831) {
    let x_1835 : vec4<f32> = u_xlat3;
    x_1832 = -(vec3<f32>(x_1835.x, x_1835.y, x_1835.z));
  } else {
    let x_1839 : vec4<f32> = u_xlat3;
    x_1832 = vec3<f32>(x_1839.x, x_1839.y, x_1839.z);
  }
  let x_1841 : vec3<f32> = x_1832;
  let x_1842 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1841.x, x_1841.y, x_1841.z, x_1842.w);
  let x_1844 : vec4<f32> = u_xlat3;
  let x_1847 : vec4<f32> = x_33.x_SSAOParams;
  let x_1850 : vec4<f32> = u_xlat1;
  let x_1852 : vec3<f32> = ((vec3<f32>(x_1844.x, x_1844.y, x_1844.z) * vec3<f32>(x_1847.y, x_1847.y, x_1847.y)) + vec3<f32>(x_1850.x, x_1850.y, x_1850.z));
  let x_1853 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1852.x, x_1852.y, x_1852.z, x_1853.w);
  let x_1855 : vec4<f32> = u_xlat3;
  let x_1858 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1855.y, x_1855.y) * vec2<f32>(x_1858.x, x_1858.y));
  let x_1862 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1864 : vec4<f32> = u_xlat3;
  let x_1867 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1862.x, x_1862.y) * vec2<f32>(x_1864.x, x_1864.x)) + x_1867);
  let x_1870 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1872 : vec4<f32> = u_xlat3;
  let x_1875 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1870.x, x_1870.y) * vec2<f32>(x_1872.z, x_1872.z)) + x_1875);
  let x_1877 : vec3<f32> = u_xlat4;
  let x_1878 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1877, vec3<f32>(x_1878.x, x_1878.y, x_1878.z));
  let x_1883 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1883));
  let x_1887 : vec2<f32> = u_xlat18;
  let x_1888 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1887 * vec2<f32>(x_1888.x, x_1888.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1892 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1892 * vec2<f32>(0.5f, 0.5f));
  let x_1894 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1894, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1901 : vec2<f32> = u_xlat18;
  let x_1903 : f32 = x_33.x_GlobalMipBias.x;
  let x_1904 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1901, x_1903);
  u_xlat11.x = x_1904.x;
  let x_1908 : f32 = x_33.x_ZBufferParams.z;
  let x_1910 : f32 = u_xlat11.x;
  let x_1913 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1908 * x_1910) + x_1913);
  let x_1915 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1915);
  let x_1917 : f32 = u_xlat19;
  let x_1920 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1917) + -(x_1920));
  let x_1925 : f32 = u_xlat3.x;
  let x_1928 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1925) < x_1928);
  let x_1932 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1932);
  let x_1936 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1936);
  let x_1940 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1940);
  let x_1944 : f32 = u_xlat3.y;
  let x_1946 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1944 * x_1946);
  let x_1950 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1950) + 1.0f);
  let x_1953 : f32 = u_xlat19;
  let x_1955 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1953 * x_1955);
  let x_1959 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1961 : vec2<f32> = u_xlat18;
  let x_1965 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1959.x, x_1959.y, x_1959.z) * vec3<f32>(x_1961.x, x_1961.x, x_1961.x)) + vec3<f32>(x_1965.x, x_1965.y, x_1965.z));
  let x_1969 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1971 : f32 = u_xlat26;
  let x_1974 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1969.x, x_1969.y, x_1969.z) * vec3<f32>(x_1971, x_1971, x_1971)) + x_1974);
  let x_1976 : vec3<f32> = u_xlat5;
  let x_1977 : vec3<f32> = u_xlat11;
  let x_1980 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_1976 * vec3<f32>(x_1977.x, x_1977.x, x_1977.x)) + -(vec3<f32>(x_1980.x, x_1980.y, x_1980.z)));
  let x_1984 : vec3<f32> = u_xlat11;
  let x_1985 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1984, x_1985);
  let x_1988 : f32 = u_xlat0;
  let x_1992 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1988) * 0.004f) + x_1992);
  let x_1996 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1996, 0.0f);
  let x_1999 : vec3<f32> = u_xlat11;
  let x_2000 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1999, x_2000);
  let x_2002 : f32 = u_xlat26;
  u_xlat26 = (x_2002 + 0.0001f);
  let x_2004 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2004);
  let x_2006 : f32 = u_xlat26;
  let x_2008 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2006 * x_2008);
  let x_2012 : f32 = u_xlat18.x;
  let x_2014 : f32 = u_xlat3.x;
  let x_2016 : f32 = u_xlat25;
  u_xlat25 = ((x_2012 * x_2014) + x_2016);
  let x_2018 : vec4<f32> = u_xlat2;
  let x_2021 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2018.x, x_2018.y, x_2018.x, x_2018.y) * vec4<f32>(x_2021.z, x_2021.z, x_2021.z, x_2021.z)) + vec4<f32>(14.580999374f, 34.069000244f, 16.663999557f, 38.936000824f));
  let x_2030 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2030.x, x_2030.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2035 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2035);
  let x_2039 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2039 * 52.982917786f);
  let x_2043 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2043);
  let x_2046 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2046.x, x_2046.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2052 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2052);
  let x_2056 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2056 * 2.0f) + -1.0f);
  let x_2061 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2061 * 6.283185482f);
  let x_2065 : f32 = u_xlat5.z;
  let x_2068 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2065) * x_2068) + 1.0f);
  let x_2071 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2071);
  let x_2074 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2074);
  let x_2078 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2078);
  let x_2080 : f32 = u_xlat26;
  let x_2081 : f32 = u_xlat6;
  u_xlat5.x = (x_2080 * x_2081);
  let x_2084 : f32 = u_xlat26;
  let x_2086 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2084 * x_2086);
  let x_2089 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2089 * vec3<f32>(0.816496611f, 0.816496611f, 0.816496611f));
  let x_2093 : vec3<f32> = u_xlat8;
  let x_2095 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(x_2093), x_2095);
  let x_2099 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2099 >= 0.0f);
  let x_2101 : bool = u_xlatb18;
  if (x_2101) {
    let x_2105 : vec3<f32> = u_xlat5;
    x_2102 = -(x_2105);
  } else {
    let x_2108 : vec3<f32> = u_xlat5;
    x_2102 = x_2108;
  }
  let x_2109 : vec3<f32> = x_2102;
  u_xlat5 = x_2109;
  let x_2110 : vec3<f32> = u_xlat5;
  let x_2112 : vec4<f32> = x_33.x_SSAOParams;
  let x_2115 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_2110 * vec3<f32>(x_2112.y, x_2112.y, x_2112.y)) + vec3<f32>(x_2115.x, x_2115.y, x_2115.z));
  let x_2118 : vec3<f32> = u_xlat5;
  let x_2121 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2118.y, x_2118.y) * vec2<f32>(x_2121.x, x_2121.y));
  let x_2125 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2127 : vec3<f32> = u_xlat5;
  let x_2130 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2125.x, x_2125.y) * vec2<f32>(x_2127.x, x_2127.x)) + x_2130);
  let x_2133 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2135 : vec3<f32> = u_xlat5;
  let x_2138 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2133.x, x_2133.y) * vec2<f32>(x_2135.z, x_2135.z)) + x_2138);
  let x_2140 : vec3<f32> = u_xlat4;
  let x_2141 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_2140, x_2141);
  let x_2145 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2145));
  let x_2149 : vec2<f32> = u_xlat18;
  let x_2150 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2149 * vec2<f32>(x_2150.x, x_2150.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2154 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2154 * vec2<f32>(0.5f, 0.5f));
  let x_2156 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2156, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2163 : vec2<f32> = u_xlat18;
  let x_2165 : f32 = x_33.x_GlobalMipBias.x;
  let x_2166 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2163, x_2165);
  u_xlat11.x = x_2166.x;
  let x_2170 : f32 = x_33.x_ZBufferParams.z;
  let x_2172 : f32 = u_xlat11.x;
  let x_2175 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2170 * x_2172) + x_2175);
  let x_2177 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2177);
  let x_2180 : f32 = u_xlat3.x;
  let x_2182 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2180) + -(x_2182));
  let x_2187 : f32 = u_xlat3.x;
  let x_2190 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2187) < x_2190);
  let x_2194 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2194);
  let x_2198 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2198);
  let x_2202 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2202);
  let x_2206 : f32 = u_xlat3.y;
  let x_2208 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2206 * x_2208);
  let x_2212 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2212) + 1.0f);
  let x_2215 : f32 = u_xlat28;
  let x_2217 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2215 * x_2217);
  let x_2221 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2223 : vec2<f32> = u_xlat18;
  let x_2227 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2221.x, x_2221.y, x_2221.z) * vec3<f32>(x_2223.x, x_2223.x, x_2223.x)) + vec3<f32>(x_2227.x, x_2227.y, x_2227.z));
  let x_2231 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2233 : f32 = u_xlat26;
  let x_2236 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2231.x, x_2231.y, x_2231.z) * vec3<f32>(x_2233, x_2233, x_2233)) + x_2236);
  let x_2238 : vec3<f32> = u_xlat5;
  let x_2239 : vec3<f32> = u_xlat11;
  let x_2242 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_2238 * vec3<f32>(x_2239.x, x_2239.x, x_2239.x)) + -(vec3<f32>(x_2242.x, x_2242.y, x_2242.z)));
  let x_2246 : vec3<f32> = u_xlat5;
  let x_2247 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_2246, x_2247);
  let x_2250 : f32 = u_xlat0;
  let x_2254 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2250) * 0.004f) + x_2254);
  let x_2258 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2258, 0.0f);
  let x_2261 : vec3<f32> = u_xlat5;
  let x_2262 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2261, x_2262);
  let x_2264 : f32 = u_xlat26;
  u_xlat26 = (x_2264 + 0.0001f);
  let x_2266 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2266);
  let x_2268 : f32 = u_xlat26;
  let x_2270 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2268 * x_2270);
  let x_2274 : f32 = u_xlat18.x;
  let x_2276 : f32 = u_xlat3.x;
  let x_2278 : f32 = u_xlat25;
  u_xlat25 = ((x_2274 * x_2276) + x_2278);
  let x_2280 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2280.z, x_2280.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2285 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2285);
  let x_2289 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2289 * 52.982917786f);
  let x_2293 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2293);
  let x_2296 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2296.x, x_2296.x) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2303 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2303);
  let x_2307 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2307 * 2.0f) + -1.0f);
  let x_2312 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2312 * 6.283185482f);
  let x_2316 : f32 = u_xlat3.z;
  let x_2319 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2316) * x_2319) + 1.0f);
  let x_2322 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2322);
  let x_2325 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2325);
  let x_2329 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2329);
  let x_2331 : f32 = u_xlat26;
  let x_2332 : f32 = u_xlat6;
  u_xlat3.x = (x_2331 * x_2332);
  let x_2335 : f32 = u_xlat26;
  let x_2337 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2335 * x_2337);
  let x_2340 : vec4<f32> = u_xlat3;
  let x_2344 : vec3<f32> = (vec3<f32>(x_2340.x, x_2340.y, x_2340.z) * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_2345 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2344.x, x_2344.y, x_2344.z, x_2345.w);
  let x_2347 : vec3<f32> = u_xlat8;
  let x_2349 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_2347), vec3<f32>(x_2349.x, x_2349.y, x_2349.z));
  let x_2354 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2354 >= 0.0f);
  let x_2356 : bool = u_xlatb18;
  if (x_2356) {
    let x_2360 : vec4<f32> = u_xlat3;
    x_2357 = -(vec3<f32>(x_2360.x, x_2360.y, x_2360.z));
  } else {
    let x_2364 : vec4<f32> = u_xlat3;
    x_2357 = vec3<f32>(x_2364.x, x_2364.y, x_2364.z);
  }
  let x_2366 : vec3<f32> = x_2357;
  let x_2367 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2366.x, x_2366.y, x_2366.z, x_2367.w);
  let x_2369 : vec4<f32> = u_xlat3;
  let x_2372 : vec4<f32> = x_33.x_SSAOParams;
  let x_2375 : vec4<f32> = u_xlat1;
  let x_2377 : vec3<f32> = ((vec3<f32>(x_2369.x, x_2369.y, x_2369.z) * vec3<f32>(x_2372.y, x_2372.y, x_2372.y)) + vec3<f32>(x_2375.x, x_2375.y, x_2375.z));
  let x_2378 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2377.x, x_2377.y, x_2377.z, x_2378.w);
  let x_2380 : vec4<f32> = u_xlat3;
  let x_2383 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2380.y, x_2380.y) * vec2<f32>(x_2383.x, x_2383.y));
  let x_2387 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2389 : vec4<f32> = u_xlat3;
  let x_2392 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2387.x, x_2387.y) * vec2<f32>(x_2389.x, x_2389.x)) + x_2392);
  let x_2395 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2397 : vec4<f32> = u_xlat3;
  let x_2400 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2395.x, x_2395.y) * vec2<f32>(x_2397.z, x_2397.z)) + x_2400);
  let x_2402 : vec3<f32> = u_xlat4;
  let x_2403 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2402, vec3<f32>(x_2403.x, x_2403.y, x_2403.z));
  let x_2408 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2408));
  let x_2412 : vec2<f32> = u_xlat18;
  let x_2413 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2412 * vec2<f32>(x_2413.x, x_2413.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2417 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2417 * vec2<f32>(0.5f, 0.5f));
  let x_2419 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2419, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2426 : vec2<f32> = u_xlat18;
  let x_2428 : f32 = x_33.x_GlobalMipBias.x;
  let x_2429 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2426, x_2428);
  u_xlat11.x = x_2429.x;
  let x_2433 : f32 = x_33.x_ZBufferParams.z;
  let x_2435 : f32 = u_xlat11.x;
  let x_2438 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2433 * x_2435) + x_2438);
  let x_2440 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2440);
  let x_2442 : f32 = u_xlat19;
  let x_2445 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2442) + -(x_2445));
  let x_2450 : f32 = u_xlat3.x;
  let x_2453 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2450) < x_2453);
  let x_2457 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2457);
  let x_2461 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2461);
  let x_2465 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2465);
  let x_2469 : f32 = u_xlat3.y;
  let x_2471 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2469 * x_2471);
  let x_2475 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2475) + 1.0f);
  let x_2478 : f32 = u_xlat19;
  let x_2480 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2478 * x_2480);
  let x_2484 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2486 : vec2<f32> = u_xlat18;
  let x_2490 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2484.x, x_2484.y, x_2484.z) * vec3<f32>(x_2486.x, x_2486.x, x_2486.x)) + vec3<f32>(x_2490.x, x_2490.y, x_2490.z));
  let x_2494 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2496 : f32 = u_xlat26;
  let x_2499 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2494.x, x_2494.y, x_2494.z) * vec3<f32>(x_2496, x_2496, x_2496)) + x_2499);
  let x_2501 : vec3<f32> = u_xlat5;
  let x_2502 : vec3<f32> = u_xlat11;
  let x_2505 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_2501 * vec3<f32>(x_2502.x, x_2502.x, x_2502.x)) + -(vec3<f32>(x_2505.x, x_2505.y, x_2505.z)));
  let x_2509 : vec3<f32> = u_xlat11;
  let x_2510 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_2509, x_2510);
  let x_2513 : f32 = u_xlat0;
  let x_2517 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2513) * 0.004f) + x_2517);
  let x_2521 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2521, 0.0f);
  let x_2524 : vec3<f32> = u_xlat11;
  let x_2525 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2524, x_2525);
  let x_2527 : f32 = u_xlat26;
  u_xlat26 = (x_2527 + 0.0001f);
  let x_2529 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2529);
  let x_2531 : f32 = u_xlat26;
  let x_2533 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2531 * x_2533);
  let x_2537 : f32 = u_xlat18.x;
  let x_2539 : f32 = u_xlat3.x;
  let x_2541 : f32 = u_xlat25;
  u_xlat25 = ((x_2537 * x_2539) + x_2541);
  let x_2543 : vec4<f32> = u_xlat2;
  let x_2546 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2543.x, x_2543.y, x_2543.x, x_2543.y) * vec4<f32>(x_2546.z, x_2546.z, x_2546.z, x_2546.z)) + vec4<f32>(18.746999741f, 43.803001404f, 20.829999924f, 48.670001984f));
  let x_2555 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2555.x, x_2555.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2560 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2560);
  let x_2564 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2564 * 52.982917786f);
  let x_2568 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2568);
  let x_2571 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2571.x, x_2571.x) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2578 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2578);
  let x_2582 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2582 * 2.0f) + -1.0f);
  let x_2587 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2587 * 6.283185482f);
  let x_2591 : f32 = u_xlat5.z;
  let x_2594 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2591) * x_2594) + 1.0f);
  let x_2597 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2597);
  let x_2600 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2600);
  let x_2604 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2604);
  let x_2606 : f32 = u_xlat26;
  let x_2607 : f32 = u_xlat6;
  u_xlat5.x = (x_2606 * x_2607);
  let x_2610 : f32 = u_xlat26;
  let x_2612 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2610 * x_2612);
  let x_2615 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2615 * vec3<f32>(0.912870944f, 0.912870944f, 0.912870944f));
  let x_2619 : vec3<f32> = u_xlat8;
  let x_2621 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(x_2619), x_2621);
  let x_2625 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2625 >= 0.0f);
  let x_2627 : bool = u_xlatb18;
  if (x_2627) {
    let x_2631 : vec3<f32> = u_xlat5;
    x_2628 = -(x_2631);
  } else {
    let x_2634 : vec3<f32> = u_xlat5;
    x_2628 = x_2634;
  }
  let x_2635 : vec3<f32> = x_2628;
  u_xlat5 = x_2635;
  let x_2636 : vec3<f32> = u_xlat5;
  let x_2638 : vec4<f32> = x_33.x_SSAOParams;
  let x_2641 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_2636 * vec3<f32>(x_2638.y, x_2638.y, x_2638.y)) + vec3<f32>(x_2641.x, x_2641.y, x_2641.z));
  let x_2644 : vec3<f32> = u_xlat5;
  let x_2647 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2644.y, x_2644.y) * vec2<f32>(x_2647.x, x_2647.y));
  let x_2651 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2653 : vec3<f32> = u_xlat5;
  let x_2656 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2651.x, x_2651.y) * vec2<f32>(x_2653.x, x_2653.x)) + x_2656);
  let x_2659 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2661 : vec3<f32> = u_xlat5;
  let x_2664 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2659.x, x_2659.y) * vec2<f32>(x_2661.z, x_2661.z)) + x_2664);
  let x_2666 : vec3<f32> = u_xlat4;
  let x_2667 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_2666, x_2667);
  let x_2671 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2671));
  let x_2675 : vec2<f32> = u_xlat18;
  let x_2676 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2675 * vec2<f32>(x_2676.x, x_2676.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2680 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2680 * vec2<f32>(0.5f, 0.5f));
  let x_2682 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2682, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2689 : vec2<f32> = u_xlat18;
  let x_2691 : f32 = x_33.x_GlobalMipBias.x;
  let x_2692 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2689, x_2691);
  u_xlat11.x = x_2692.x;
  let x_2696 : f32 = x_33.x_ZBufferParams.z;
  let x_2698 : f32 = u_xlat11.x;
  let x_2701 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2696 * x_2698) + x_2701);
  let x_2703 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2703);
  let x_2706 : f32 = u_xlat3.x;
  let x_2708 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2706) + -(x_2708));
  let x_2713 : f32 = u_xlat3.x;
  let x_2716 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2713) < x_2716);
  let x_2720 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2720);
  let x_2724 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2724);
  let x_2728 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2728);
  let x_2732 : f32 = u_xlat3.y;
  let x_2734 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2732 * x_2734);
  let x_2738 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2738) + 1.0f);
  let x_2741 : f32 = u_xlat28;
  let x_2743 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2741 * x_2743);
  let x_2747 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2749 : vec2<f32> = u_xlat18;
  let x_2753 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2747.x, x_2747.y, x_2747.z) * vec3<f32>(x_2749.x, x_2749.x, x_2749.x)) + vec3<f32>(x_2753.x, x_2753.y, x_2753.z));
  let x_2757 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2759 : f32 = u_xlat26;
  let x_2762 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2757.x, x_2757.y, x_2757.z) * vec3<f32>(x_2759, x_2759, x_2759)) + x_2762);
  let x_2764 : vec3<f32> = u_xlat5;
  let x_2765 : vec3<f32> = u_xlat11;
  let x_2768 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_2764 * vec3<f32>(x_2765.x, x_2765.x, x_2765.x)) + -(vec3<f32>(x_2768.x, x_2768.y, x_2768.z)));
  let x_2772 : vec3<f32> = u_xlat5;
  let x_2773 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_2772, x_2773);
  let x_2776 : f32 = u_xlat0;
  let x_2780 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2776) * 0.004f) + x_2780);
  let x_2784 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2784, 0.0f);
  let x_2787 : vec3<f32> = u_xlat5;
  let x_2788 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2787, x_2788);
  let x_2790 : f32 = u_xlat26;
  u_xlat26 = (x_2790 + 0.0001f);
  let x_2792 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2792);
  let x_2794 : f32 = u_xlat26;
  let x_2796 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2794 * x_2796);
  let x_2800 : f32 = u_xlat18.x;
  let x_2802 : f32 = u_xlat3.x;
  let x_2804 : f32 = u_xlat25;
  u_xlat25 = ((x_2800 * x_2802) + x_2804);
  let x_2806 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2806.z, x_2806.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2811 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2811);
  let x_2815 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2815 * 52.982917786f);
  let x_2819 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2819);
  let x_2822 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2822.x, x_2822.x) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_2829 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2829);
  let x_2833 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2833 * 2.0f) + -1.0f);
  let x_2838 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2838 * 6.283185482f);
  let x_2842 : f32 = u_xlat3.z;
  let x_2845 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2842) * x_2845) + 1.0f);
  let x_2848 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2848);
  let x_2851 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2851);
  let x_2855 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2855);
  let x_2857 : f32 = u_xlat26;
  let x_2858 : f32 = u_xlat6;
  u_xlat3.x = (x_2857 * x_2858);
  let x_2861 : f32 = u_xlat26;
  let x_2863 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2861 * x_2863);
  let x_2866 : vec4<f32> = u_xlat3;
  let x_2870 : vec3<f32> = (vec3<f32>(x_2866.x, x_2866.y, x_2866.z) * vec3<f32>(0.957427144f, 0.957427144f, 0.957427144f));
  let x_2871 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2870.x, x_2870.y, x_2870.z, x_2871.w);
  let x_2873 : vec3<f32> = u_xlat8;
  let x_2875 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_2873), vec3<f32>(x_2875.x, x_2875.y, x_2875.z));
  let x_2880 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2880 >= 0.0f);
  let x_2882 : bool = u_xlatb18;
  if (x_2882) {
    let x_2886 : vec4<f32> = u_xlat3;
    x_2883 = -(vec3<f32>(x_2886.x, x_2886.y, x_2886.z));
  } else {
    let x_2890 : vec4<f32> = u_xlat3;
    x_2883 = vec3<f32>(x_2890.x, x_2890.y, x_2890.z);
  }
  let x_2892 : vec3<f32> = x_2883;
  let x_2893 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2892.x, x_2892.y, x_2892.z, x_2893.w);
  let x_2895 : vec4<f32> = u_xlat3;
  let x_2898 : vec4<f32> = x_33.x_SSAOParams;
  let x_2901 : vec4<f32> = u_xlat1;
  let x_2903 : vec3<f32> = ((vec3<f32>(x_2895.x, x_2895.y, x_2895.z) * vec3<f32>(x_2898.y, x_2898.y, x_2898.y)) + vec3<f32>(x_2901.x, x_2901.y, x_2901.z));
  let x_2904 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2903.x, x_2903.y, x_2903.z, x_2904.w);
  let x_2906 : vec4<f32> = u_xlat3;
  let x_2909 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2906.y, x_2906.y) * vec2<f32>(x_2909.x, x_2909.y));
  let x_2913 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2915 : vec4<f32> = u_xlat3;
  let x_2918 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2913.x, x_2913.y) * vec2<f32>(x_2915.x, x_2915.x)) + x_2918);
  let x_2921 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2923 : vec4<f32> = u_xlat3;
  let x_2926 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2921.x, x_2921.y) * vec2<f32>(x_2923.z, x_2923.z)) + x_2926);
  let x_2928 : vec3<f32> = u_xlat4;
  let x_2929 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2928, vec3<f32>(x_2929.x, x_2929.y, x_2929.z));
  let x_2934 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2934));
  let x_2938 : vec2<f32> = u_xlat18;
  let x_2939 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2938 * vec2<f32>(x_2939.x, x_2939.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2943 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2943 * vec2<f32>(0.5f, 0.5f));
  let x_2945 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2945, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2952 : vec2<f32> = u_xlat18;
  let x_2954 : f32 = x_33.x_GlobalMipBias.x;
  let x_2955 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2952, x_2954);
  u_xlat11.x = x_2955.x;
  let x_2959 : f32 = x_33.x_ZBufferParams.z;
  let x_2961 : f32 = u_xlat11.x;
  let x_2964 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2959 * x_2961) + x_2964);
  let x_2966 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2966);
  let x_2968 : f32 = u_xlat19;
  let x_2971 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2968) + -(x_2971));
  let x_2976 : f32 = u_xlat3.x;
  let x_2979 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2976) < x_2979);
  let x_2983 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2983);
  let x_2987 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2987);
  let x_2991 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2991);
  let x_2995 : f32 = u_xlat3.y;
  let x_2997 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2995 * x_2997);
  let x_3001 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3001) + 1.0f);
  let x_3004 : f32 = u_xlat19;
  let x_3006 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3004 * x_3006);
  let x_3010 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3012 : vec2<f32> = u_xlat18;
  let x_3016 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_3010.x, x_3010.y, x_3010.z) * vec3<f32>(x_3012.x, x_3012.x, x_3012.x)) + vec3<f32>(x_3016.x, x_3016.y, x_3016.z));
  let x_3020 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3022 : f32 = u_xlat26;
  let x_3025 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_3020.x, x_3020.y, x_3020.z) * vec3<f32>(x_3022, x_3022, x_3022)) + x_3025);
  let x_3027 : vec3<f32> = u_xlat5;
  let x_3028 : vec3<f32> = u_xlat11;
  let x_3031 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_3027 * vec3<f32>(x_3028.x, x_3028.x, x_3028.x)) + -(vec3<f32>(x_3031.x, x_3031.y, x_3031.z)));
  let x_3035 : vec3<f32> = u_xlat11;
  let x_3036 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_3035, x_3036);
  let x_3039 : f32 = u_xlat0;
  let x_3043 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3039) * 0.004f) + x_3043);
  let x_3047 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3047, 0.0f);
  let x_3050 : vec3<f32> = u_xlat11;
  let x_3051 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_3050, x_3051);
  let x_3053 : f32 = u_xlat26;
  u_xlat26 = (x_3053 + 0.0001f);
  let x_3055 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3055);
  let x_3057 : f32 = u_xlat26;
  let x_3059 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3057 * x_3059);
  let x_3063 : f32 = u_xlat18.x;
  let x_3065 : f32 = u_xlat3.x;
  let x_3067 : f32 = u_xlat25;
  u_xlat25 = ((x_3063 * x_3065) + x_3067);
  let x_3069 : vec4<f32> = u_xlat2;
  let x_3072 : vec4<f32> = x_33.x_SSAOParams;
  let x_3078 : vec2<f32> = ((vec2<f32>(x_3069.x, x_3069.y) * vec2<f32>(x_3072.z, x_3072.z)) + vec2<f32>(22.913000107f, 53.537002563f));
  let x_3079 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3078.x, x_3078.y, x_3079.z, x_3079.w);
  let x_3081 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec2<f32>(x_3081.x, x_3081.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_3086 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3086);
  let x_3090 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3090 * 52.982917786f);
  let x_3094 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3094);
  let x_3097 : vec4<f32> = u_xlat2;
  let x_3101 : vec2<f32> = (vec2<f32>(x_3097.x, x_3097.x) + vec2<f32>(0.984375f, 0.125f));
  let x_3102 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3101.x, x_3101.y, x_3102.z, x_3102.w);
  let x_3105 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3105);
  let x_3109 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_3109 * 2.0f) + -1.0f);
  let x_3114 : f32 = u_xlat2.y;
  u_xlat2.x = (x_3114 * 6.283185482f);
  let x_3119 : f32 = u_xlat3.z;
  let x_3122 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_3119) * x_3122) + 1.0f);
  let x_3127 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_3127);
  let x_3131 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_3131);
  let x_3135 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_3135);
  let x_3139 : f32 = u_xlat10.x;
  let x_3141 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3139 * x_3141);
  let x_3145 : f32 = u_xlat2.x;
  let x_3147 : f32 = u_xlat10.x;
  u_xlat3.y = (x_3145 * x_3147);
  let x_3150 : vec3<f32> = u_xlat8;
  let x_3152 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(x_3150), vec3<f32>(x_3152.x, x_3152.y, x_3152.z));
  let x_3160 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_3160 >= 0.0f);
  let x_3164 : bool = u_xlatb2.x;
  if (x_3164) {
    let x_3168 : vec4<f32> = u_xlat3;
    x_3165 = -(vec3<f32>(x_3168.x, x_3168.y, x_3168.z));
  } else {
    let x_3172 : vec4<f32> = u_xlat3;
    x_3165 = vec3<f32>(x_3172.x, x_3172.y, x_3172.z);
  }
  let x_3174 : vec3<f32> = x_3165;
  let x_3175 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3174.x, x_3174.y, x_3174.z, x_3175.w);
  let x_3177 : vec4<f32> = u_xlat2;
  let x_3180 : vec4<f32> = x_33.x_SSAOParams;
  let x_3183 : vec4<f32> = u_xlat1;
  let x_3185 : vec3<f32> = ((vec3<f32>(x_3177.x, x_3177.y, x_3177.z) * vec3<f32>(x_3180.y, x_3180.y, x_3180.y)) + vec3<f32>(x_3183.x, x_3183.y, x_3183.z));
  let x_3186 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3185.x, x_3185.y, x_3185.z, x_3186.w);
  let x_3188 : vec4<f32> = u_xlat2;
  let x_3191 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_3193 : vec2<f32> = (vec2<f32>(x_3188.y, x_3188.y) * vec2<f32>(x_3191.x, x_3191.y));
  let x_3194 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3193.x, x_3193.y, x_3194.z, x_3194.w);
  let x_3197 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3199 : vec4<f32> = u_xlat2;
  let x_3202 : vec4<f32> = u_xlat3;
  let x_3204 : vec2<f32> = ((vec2<f32>(x_3197.x, x_3197.y) * vec2<f32>(x_3199.x, x_3199.x)) + vec2<f32>(x_3202.x, x_3202.y));
  let x_3205 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3204.x, x_3204.y, x_3205.z, x_3205.w);
  let x_3208 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3210 : vec4<f32> = u_xlat2;
  let x_3213 : vec4<f32> = u_xlat3;
  let x_3215 : vec2<f32> = ((vec2<f32>(x_3208.x, x_3208.y) * vec2<f32>(x_3210.z, x_3210.z)) + vec2<f32>(x_3213.x, x_3213.y));
  let x_3216 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3215.x, x_3215.y, x_3216.z, x_3216.w);
  let x_3218 : vec3<f32> = u_xlat4;
  let x_3219 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_3218, vec3<f32>(x_3219.x, x_3219.y, x_3219.z));
  let x_3224 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_3224));
  let x_3228 : vec4<f32> = u_xlat3;
  let x_3230 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_3228.x, x_3228.y) * vec2<f32>(x_3230.x, x_3230.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3234 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_3234 * vec2<f32>(0.5f, 0.5f));
  let x_3236 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_3236, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3243 : vec2<f32> = u_xlat10;
  let x_3245 : f32 = x_33.x_GlobalMipBias.x;
  let x_3246 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3243, x_3245);
  u_xlat26 = x_3246.x;
  let x_3249 : f32 = x_33.x_ZBufferParams.z;
  let x_3250 : f32 = u_xlat26;
  let x_3253 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_3249 * x_3250) + x_3253);
  let x_3257 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3257);
  let x_3261 : f32 = u_xlat2.x;
  let x_3264 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_3261) + -(x_3264));
  let x_3269 : f32 = u_xlat2.x;
  let x_3272 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_3269) < x_3272);
  let x_3275 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_3275);
  let x_3279 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_3279);
  let x_3283 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_3283);
  let x_3287 : f32 = u_xlat2.w;
  let x_3289 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3287 * x_3289);
  let x_3293 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_3293) + 1.0f);
  let x_3298 : f32 = u_xlat3.x;
  let x_3300 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_3298 * x_3300);
  let x_3303 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3305 : vec2<f32> = u_xlat10;
  let x_3309 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3311 : vec3<f32> = ((vec3<f32>(x_3303.x, x_3303.y, x_3303.z) * vec3<f32>(x_3305.x, x_3305.x, x_3305.x)) + vec3<f32>(x_3309.x, x_3309.y, x_3309.z));
  let x_3312 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3311.x, x_3311.y, x_3311.z, x_3312.w);
  let x_3315 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3317 : vec2<f32> = u_xlat18;
  let x_3320 : vec4<f32> = u_xlat3;
  let x_3322 : vec3<f32> = ((vec3<f32>(x_3315.x, x_3315.y, x_3315.z) * vec3<f32>(x_3317.x, x_3317.x, x_3317.x)) + vec3<f32>(x_3320.x, x_3320.y, x_3320.z));
  let x_3323 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3322.x, x_3322.y, x_3322.z, x_3323.w);
  let x_3325 : vec4<f32> = u_xlat3;
  let x_3327 : f32 = u_xlat26;
  let x_3330 : vec4<f32> = u_xlat1;
  let x_3333 : vec3<f32> = ((vec3<f32>(x_3325.x, x_3325.y, x_3325.z) * vec3<f32>(x_3327, x_3327, x_3327)) + -(vec3<f32>(x_3330.x, x_3330.y, x_3330.z)));
  let x_3334 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_3333.x, x_3333.y, x_3333.z, x_3334.w);
  let x_3336 : vec4<f32> = u_xlat1;
  let x_3338 : vec3<f32> = u_xlat8;
  u_xlat10.x = dot(vec3<f32>(x_3336.x, x_3336.y, x_3336.z), x_3338);
  let x_3341 : f32 = u_xlat0;
  let x_3345 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_3341) * 0.004f) + x_3345);
  let x_3349 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_3349, 0.0f);
  let x_3352 : vec4<f32> = u_xlat1;
  let x_3354 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_3352.x, x_3352.y, x_3352.z), vec3<f32>(x_3354.x, x_3354.y, x_3354.z));
  let x_3359 : f32 = u_xlat1.x;
  u_xlat1.x = (x_3359 + 0.0001f);
  let x_3363 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_3363);
  let x_3367 : f32 = u_xlat1.x;
  let x_3369 : f32 = u_xlat10.x;
  u_xlat1.x = (x_3367 * x_3369);
  let x_3373 : f32 = u_xlat1.x;
  let x_3375 : f32 = u_xlat2.x;
  let x_3377 : f32 = u_xlat25;
  u_xlat1.x = ((x_3373 * x_3375) + x_3377);
  let x_3381 : f32 = u_xlat1.x;
  let x_3383 : f32 = x_33.x_SSAOParams.y;
  u_xlat1.x = (x_3381 * x_3383);
  let x_3387 : f32 = x_33.x_SSAOParams.w;
  u_xlat9 = (1.0f / x_3387);
  let x_3389 : f32 = u_xlat0;
  let x_3391 : f32 = u_xlat9;
  u_xlat0 = ((-(x_3389) * x_3391) + 1.0f);
  let x_3394 : f32 = u_xlat0;
  let x_3395 : f32 = u_xlat0;
  u_xlat0 = (x_3394 * x_3395);
  let x_3398 : f32 = u_xlat1.x;
  let x_3400 : f32 = x_33.x_SSAOParams.x;
  u_xlat1.x = (x_3398 * x_3400);
  let x_3403 : f32 = u_xlat0;
  let x_3405 : f32 = u_xlat1.x;
  u_xlat0 = (x_3403 * x_3405);
  let x_3407 : f32 = u_xlat0;
  u_xlat0 = (x_3407 * 0.083333336f);
  let x_3410 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3410, 0.0f, 1.0f);
  let x_3412 : f32 = u_xlat0;
  u_xlat0 = log2(x_3412);
  let x_3414 : f32 = u_xlat0;
  u_xlat0 = (x_3414 * 0.600000024f);
  let x_3417 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3417);
  let x_3421 : vec3<f32> = u_xlat8;
  let x_3423 : vec3<f32> = ((x_3421 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3424 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3424.x, x_3423.x, x_3423.y, x_3423.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

