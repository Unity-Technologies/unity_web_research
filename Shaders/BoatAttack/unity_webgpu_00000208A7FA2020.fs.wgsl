struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_25A083BC_TexelSize : vec4<f32>,
  Texture2D_6EEDD32E_TexelSize : vec4<f32>,
  Texture2D_E9EC22CC_TexelSize : vec4<f32>,
  x_Hue : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(5) var Texture2D_25A083BC : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_25A083BC : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(1) @binding(4) var<uniform> x_190 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_E9EC22CC : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_E9EC22CC : sampler;

@group(0) @binding(6) var Texture2D_6EEDD32E : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_6EEDD32E : sampler;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_359 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_515 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2503 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb1 : bool;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb21 : bool;
  var u_xlat21 : f32;
  var u_xlat42 : f32;
  var x_146 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlatb63 : bool;
  var x_211 : f32;
  var x_220 : f32;
  var u_xlat63 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlat64 : f32;
  var u_xlat4 : vec3<f32>;
  var x_475 : f32;
  var x_488 : f32;
  var x_499 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlatb3 : vec4<bool>;
  var u_xlatu63 : u32;
  var u_xlati63 : i32;
  var u_xlat23 : f32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat44 : f32;
  var u_xlatb66 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb45 : bool;
  var x_2154 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat69 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu2 : u32;
  var u_xlati66 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati2 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(Texture2D_25A083BC, samplerTexture2D_25A083BC, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_58 : f32 = u_xlat0.y;
  let x_61 : f32 = u_xlat0.z;
  u_xlatb1 = (x_58 >= x_61);
  let x_64 : bool = u_xlatb1;
  u_xlat1.x = select(0.0f, 1.0f, x_64);
  let x_69 : vec4<f32> = u_xlat0;
  let x_70 : vec2<f32> = vec2<f32>(x_69.z, x_69.y);
  let x_71 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_70.x, x_70.y, x_71.z, x_71.w);
  u_xlat2.z = -1.0f;
  u_xlat2.w = 0.666666687f;
  let x_78 : vec4<f32> = u_xlat0;
  let x_80 : vec4<f32> = u_xlat2;
  let x_83 : vec2<f32> = (vec2<f32>(x_78.y, x_78.z) + -(vec2<f32>(x_80.x, x_80.y)));
  let x_84 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  u_xlat3.z = 1.0f;
  u_xlat3.w = -1.0f;
  let x_88 : vec4<f32> = u_xlat1;
  let x_90 : vec4<f32> = u_xlat3;
  let x_92 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec4<f32>(x_88.x, x_88.x, x_88.x, x_88.x) * x_90) + x_92);
  let x_96 : f32 = u_xlat0.x;
  let x_98 : f32 = u_xlat1.x;
  u_xlatb21 = (x_96 >= x_98);
  let x_101 : bool = u_xlatb21;
  u_xlat21 = select(0.0f, 1.0f, x_101);
  let x_103 : vec4<f32> = u_xlat1;
  let x_104 : vec3<f32> = vec3<f32>(x_103.x, x_103.y, x_103.w);
  let x_105 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_104.x, x_104.y, x_104.z, x_105.w);
  let x_108 : f32 = u_xlat0.x;
  u_xlat2.w = x_108;
  let x_110 : vec4<f32> = u_xlat2;
  let x_111 : vec3<f32> = vec3<f32>(x_110.w, x_110.y, x_110.x);
  let x_112 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_111.x, x_111.y, x_112.z, x_111.z);
  let x_114 : vec4<f32> = u_xlat2;
  let x_116 : vec4<f32> = u_xlat1;
  u_xlat1 = (-(x_114) + x_116);
  let x_118 : f32 = u_xlat21;
  let x_120 : vec4<f32> = u_xlat1;
  let x_122 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec4<f32>(x_118, x_118, x_118, x_118) * x_120) + x_122);
  let x_125 : f32 = u_xlat1.y;
  let x_127 : f32 = u_xlat1.w;
  u_xlat0.x = min(x_125, x_127);
  let x_131 : f32 = u_xlat0.x;
  let x_134 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_131) + x_134);
  let x_138 : f32 = u_xlat0.x;
  u_xlatb21 = (x_138 == 0.0f);
  let x_142 : f32 = u_xlat1.x;
  u_xlat42 = (x_142 + 1.00000001e-10f);
  let x_145 : bool = u_xlatb21;
  if (x_145) {
    let x_150 : f32 = u_xlat1.x;
    x_146 = x_150;
  } else {
    let x_152 : f32 = u_xlat42;
    x_146 = x_152;
  }
  let x_153 : f32 = x_146;
  u_xlat21 = x_153;
  let x_155 : f32 = u_xlat1.y;
  let x_158 : f32 = u_xlat1.w;
  u_xlat1.x = (-(x_155) + x_158);
  let x_164 : f32 = u_xlat0.x;
  u_xlat22.x = ((x_164 * 6.0f) + 1.00000001e-10f);
  let x_170 : f32 = u_xlat1.x;
  let x_172 : f32 = u_xlat22.x;
  u_xlat1.x = (x_170 / x_172);
  let x_176 : f32 = u_xlat1.x;
  let x_178 : f32 = u_xlat1.z;
  u_xlat1.x = (x_176 + x_178);
  let x_182 : f32 = u_xlat0.x;
  let x_183 : f32 = u_xlat42;
  u_xlat0.x = (x_182 / x_183);
  let x_187 : f32 = u_xlat0.w;
  let x_193 : f32 = x_190.x_Hue;
  let x_196 : f32 = u_xlat1.x;
  u_xlat42 = ((x_187 * x_193) + abs(x_196));
  let x_200 : f32 = u_xlat42;
  u_xlatb63 = (x_200 < 0.0f);
  let x_202 : f32 = u_xlat42;
  u_xlatb1 = (1.0f < x_202);
  let x_204 : f32 = u_xlat42;
  let x_207 : vec2<f32> = (vec2<f32>(x_204, x_204) + vec2<f32>(1.0f, -1.0f));
  let x_208 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_207.x, x_207.y, x_208.z);
  let x_210 : bool = u_xlatb1;
  if (x_210) {
    let x_215 : f32 = u_xlat22.y;
    x_211 = x_215;
  } else {
    let x_217 : f32 = u_xlat42;
    x_211 = x_217;
  }
  let x_218 : f32 = x_211;
  u_xlat42 = x_218;
  let x_219 : bool = u_xlatb63;
  if (x_219) {
    let x_224 : f32 = u_xlat22.x;
    x_220 = x_224;
  } else {
    let x_226 : f32 = u_xlat42;
    x_220 = x_226;
  }
  let x_227 : f32 = x_220;
  u_xlat42 = x_227;
  let x_228 : f32 = u_xlat42;
  let x_232 : vec3<f32> = (vec3<f32>(x_228, x_228, x_228) + vec3<f32>(1.0f, 0.666666687f, 0.333333343f));
  let x_233 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_232.x, x_232.y, x_232.z, x_233.w);
  let x_235 : vec4<f32> = u_xlat1;
  let x_237 : vec3<f32> = fract(vec3<f32>(x_235.x, x_235.y, x_235.z));
  let x_238 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_237.x, x_237.y, x_237.z, x_238.w);
  let x_240 : vec4<f32> = u_xlat1;
  let x_246 : vec3<f32> = ((vec3<f32>(x_240.x, x_240.y, x_240.z) * vec3<f32>(6.0f, 6.0f, 6.0f)) + vec3<f32>(-3.0f, -3.0f, -3.0f));
  let x_247 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_249 : vec4<f32> = u_xlat1;
  let x_253 : vec3<f32> = (abs(vec3<f32>(x_249.x, x_249.y, x_249.z)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_254 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_253.x, x_253.y, x_253.z, x_254.w);
  let x_256 : vec4<f32> = u_xlat1;
  let x_260 : vec3<f32> = clamp(vec3<f32>(x_256.x, x_256.y, x_256.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_261 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec4<f32> = u_xlat1;
  let x_265 : vec3<f32> = (vec3<f32>(x_263.x, x_263.y, x_263.z) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_266 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_265.x, x_265.y, x_265.z, x_266.w);
  let x_268 : vec4<f32> = u_xlat0;
  let x_270 : vec4<f32> = u_xlat1;
  let x_274 : vec3<f32> = ((vec3<f32>(x_268.x, x_268.x, x_268.x) * vec3<f32>(x_270.x, x_270.y, x_270.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_275 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_274.x, x_275.y, x_274.y, x_274.z);
  let x_277 : vec4<f32> = u_xlat0;
  let x_279 : f32 = u_xlat21;
  let x_281 : vec3<f32> = (vec3<f32>(x_277.x, x_277.z, x_277.w) * vec3<f32>(x_279, x_279, x_279));
  let x_282 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_284 : vec4<f32> = u_xlat0;
  let x_288 : vec3<f32> = clamp(vec3<f32>(x_284.x, x_284.y, x_284.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_289 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_288.x, x_288.y, x_288.z, x_289.w);
  let x_296 : vec4<f32> = vs_INTERP3;
  let x_299 : f32 = x_44.x_GlobalMipBias.x;
  let x_300 : vec4<f32> = textureSampleBias(Texture2D_E9EC22CC, samplerTexture2D_E9EC22CC, vec2<f32>(x_296.x, x_296.y), x_299);
  let x_301 : vec3<f32> = vec3<f32>(x_300.x, x_300.y, x_300.w);
  let x_302 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_301.x, x_301.y, x_301.z, x_302.w);
  let x_305 : f32 = u_xlat1.x;
  let x_307 : f32 = u_xlat1.z;
  u_xlat1.x = (x_305 * x_307);
  let x_310 : vec4<f32> = u_xlat1;
  let x_316 : vec2<f32> = ((vec2<f32>(x_310.x, x_310.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_317 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_316.x, x_316.y, x_317.z, x_317.w);
  let x_320 : vec4<f32> = u_xlat1;
  let x_322 : vec4<f32> = u_xlat1;
  u_xlat63 = dot(vec2<f32>(x_320.x, x_320.y), vec2<f32>(x_322.x, x_322.y));
  let x_325 : f32 = u_xlat63;
  u_xlat63 = min(x_325, 1.0f);
  let x_327 : f32 = u_xlat63;
  u_xlat63 = (-(x_327) + 1.0f);
  let x_330 : f32 = u_xlat63;
  u_xlat63 = sqrt(x_330);
  let x_332 : f32 = u_xlat63;
  u_xlat63 = max(x_332, 1.00000002e-16f);
  let x_340 : vec4<f32> = vs_INTERP3;
  let x_343 : f32 = x_44.x_GlobalMipBias.x;
  let x_344 : vec4<f32> = textureSampleBias(Texture2D_6EEDD32E, samplerTexture2D_6EEDD32E, vec2<f32>(x_340.x, x_340.y), x_343);
  let x_345 : vec3<f32> = vec3<f32>(x_344.x, x_344.w, x_344.y);
  let x_346 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_345.x, x_345.y, x_345.z, x_346.w);
  let x_353 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_353);
  let x_361 : f32 = x_359.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_361 >= 0.0f);
  let x_367 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_367);
  let x_371 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_371);
  let x_375 : f32 = u_xlat43.y;
  let x_377 : f32 = u_xlat43.x;
  u_xlat43.x = (x_375 * x_377);
  let x_382 : vec3<f32> = vs_INTERP1;
  let x_384 : vec4<f32> = vs_INTERP2;
  let x_386 : vec3<f32> = (vec3<f32>(x_382.z, x_382.x, x_382.y) * vec3<f32>(x_384.y, x_384.z, x_384.x));
  let x_387 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_389 : vec3<f32> = vs_INTERP1;
  let x_391 : vec4<f32> = vs_INTERP2;
  let x_394 : vec4<f32> = u_xlat3;
  let x_397 : vec3<f32> = ((vec3<f32>(x_389.y, x_389.z, x_389.x) * vec3<f32>(x_391.z, x_391.x, x_391.y)) + -(vec3<f32>(x_394.x, x_394.y, x_394.z)));
  let x_398 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_397.x, x_397.y, x_397.z, x_398.w);
  let x_400 : vec2<f32> = u_xlat43;
  let x_402 : vec4<f32> = u_xlat3;
  let x_404 : vec3<f32> = (vec3<f32>(x_400.x, x_400.x, x_400.x) * vec3<f32>(x_402.x, x_402.y, x_402.z));
  let x_405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_407 : vec4<f32> = u_xlat1;
  let x_409 : vec4<f32> = u_xlat3;
  u_xlat22 = (vec3<f32>(x_407.y, x_407.y, x_407.y) * vec3<f32>(x_409.x, x_409.y, x_409.z));
  let x_412 : vec4<f32> = u_xlat1;
  let x_414 : vec4<f32> = vs_INTERP2;
  let x_417 : vec3<f32> = u_xlat22;
  let x_418 : vec3<f32> = ((vec3<f32>(x_412.x, x_412.x, x_412.x) * vec3<f32>(x_414.x, x_414.y, x_414.z)) + x_417);
  let x_419 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_418.x, x_418.y, x_418.z, x_419.w);
  let x_421 : f32 = u_xlat63;
  let x_423 : vec3<f32> = vs_INTERP1;
  let x_425 : vec4<f32> = u_xlat1;
  let x_427 : vec3<f32> = ((vec3<f32>(x_421, x_421, x_421) * x_423) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat1;
  let x_432 : vec4<f32> = u_xlat1;
  u_xlat63 = dot(vec3<f32>(x_430.x, x_430.y, x_430.z), vec3<f32>(x_432.x, x_432.y, x_432.z));
  let x_435 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_435);
  let x_437 : f32 = u_xlat63;
  let x_439 : vec4<f32> = u_xlat1;
  let x_441 : vec3<f32> = (vec3<f32>(x_437, x_437, x_437) * vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_446 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb63 = (x_446 == 0.0f);
  let x_449 : vec3<f32> = vs_INTERP0;
  let x_454 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_455 : vec3<f32> = (-(x_449) + x_454);
  let x_456 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_455.x, x_455.y, x_455.z, x_456.w);
  let x_459 : vec4<f32> = u_xlat3;
  let x_461 : vec4<f32> = u_xlat3;
  u_xlat64 = dot(vec3<f32>(x_459.x, x_459.y, x_459.z), vec3<f32>(x_461.x, x_461.y, x_461.z));
  let x_464 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_464);
  let x_466 : f32 = u_xlat64;
  let x_468 : vec4<f32> = u_xlat3;
  let x_470 : vec3<f32> = (vec3<f32>(x_466, x_466, x_466) * vec3<f32>(x_468.x, x_468.y, x_468.z));
  let x_471 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_470.x, x_470.y, x_470.z, x_471.w);
  let x_474 : bool = u_xlatb63;
  if (x_474) {
    let x_479 : f32 = u_xlat3.x;
    x_475 = x_479;
  } else {
    let x_484 : f32 = x_44.unity_MatrixV[0i].z;
    x_475 = x_484;
  }
  let x_485 : f32 = x_475;
  u_xlat4.x = x_485;
  let x_487 : bool = u_xlatb63;
  if (x_487) {
    let x_492 : f32 = u_xlat3.y;
    x_488 = x_492;
  } else {
    let x_495 : f32 = x_44.unity_MatrixV[1i].z;
    x_488 = x_495;
  }
  let x_496 : f32 = x_488;
  u_xlat4.y = x_496;
  let x_498 : bool = u_xlatb63;
  if (x_498) {
    let x_503 : f32 = u_xlat3.z;
    x_499 = x_503;
  } else {
    let x_507 : f32 = x_44.unity_MatrixV[2i].z;
    x_499 = x_507;
  }
  let x_508 : f32 = x_499;
  u_xlat4.z = x_508;
  let x_510 : vec3<f32> = vs_INTERP0;
  let x_518 : vec4<f32> = x_515.x_CascadeShadowSplitSpheres0;
  let x_521 : vec3<f32> = (x_510 + -(vec3<f32>(x_518.x, x_518.y, x_518.z)));
  let x_522 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_521.x, x_521.y, x_521.z, x_522.w);
  let x_525 : vec3<f32> = vs_INTERP0;
  let x_527 : vec4<f32> = x_515.x_CascadeShadowSplitSpheres1;
  let x_530 : vec3<f32> = (x_525 + -(vec3<f32>(x_527.x, x_527.y, x_527.z)));
  let x_531 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_530.x, x_530.y, x_530.z, x_531.w);
  let x_534 : vec3<f32> = vs_INTERP0;
  let x_536 : vec4<f32> = x_515.x_CascadeShadowSplitSpheres2;
  let x_539 : vec3<f32> = (x_534 + -(vec3<f32>(x_536.x, x_536.y, x_536.z)));
  let x_540 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_543 : vec3<f32> = vs_INTERP0;
  let x_546 : vec4<f32> = x_515.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_543 + -(vec3<f32>(x_546.x, x_546.y, x_546.z)));
  let x_550 : vec4<f32> = u_xlat3;
  let x_552 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_550.x, x_550.y, x_550.z), vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_556 : vec4<f32> = u_xlat5;
  let x_558 : vec4<f32> = u_xlat5;
  u_xlat3.y = dot(vec3<f32>(x_556.x, x_556.y, x_556.z), vec3<f32>(x_558.x, x_558.y, x_558.z));
  let x_562 : vec4<f32> = u_xlat6;
  let x_564 : vec4<f32> = u_xlat6;
  u_xlat3.z = dot(vec3<f32>(x_562.x, x_562.y, x_562.z), vec3<f32>(x_564.x, x_564.y, x_564.z));
  let x_568 : vec3<f32> = u_xlat7;
  let x_569 : vec3<f32> = u_xlat7;
  u_xlat3.w = dot(x_568, x_569);
  let x_575 : vec4<f32> = u_xlat3;
  let x_578 : vec4<f32> = x_515.x_CascadeShadowSplitSphereRadii;
  u_xlatb3 = (x_575 < x_578);
  let x_581 : bool = u_xlatb3.x;
  u_xlat5.x = select(0.0f, 1.0f, x_581);
  let x_585 : bool = u_xlatb3.y;
  u_xlat5.y = select(0.0f, 1.0f, x_585);
  let x_589 : bool = u_xlatb3.z;
  u_xlat5.z = select(0.0f, 1.0f, x_589);
  let x_593 : bool = u_xlatb3.w;
  u_xlat5.w = select(0.0f, 1.0f, x_593);
  let x_597 : bool = u_xlatb3.x;
  u_xlat3.x = select(-0.0f, -1.0f, x_597);
  let x_602 : bool = u_xlatb3.y;
  u_xlat3.y = select(-0.0f, -1.0f, x_602);
  let x_606 : bool = u_xlatb3.z;
  u_xlat3.z = select(-0.0f, -1.0f, x_606);
  let x_609 : vec4<f32> = u_xlat3;
  let x_611 : vec4<f32> = u_xlat5;
  let x_613 : vec3<f32> = (vec3<f32>(x_609.x, x_609.y, x_609.z) + vec3<f32>(x_611.y, x_611.z, x_611.w));
  let x_614 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_613.x, x_613.y, x_613.z, x_614.w);
  let x_616 : vec4<f32> = u_xlat3;
  let x_619 : vec3<f32> = max(vec3<f32>(x_616.x, x_616.y, x_616.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_620 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_620.x, x_619.x, x_619.y, x_619.z);
  let x_622 : vec4<f32> = u_xlat5;
  u_xlat63 = dot(x_622, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_627 : f32 = u_xlat63;
  u_xlat63 = (-(x_627) + 4.0f);
  let x_632 : f32 = u_xlat63;
  u_xlatu63 = u32(x_632);
  let x_636 : u32 = u_xlatu63;
  u_xlati63 = (bitcast<i32>(x_636) << bitcast<u32>(2i));
  let x_639 : vec3<f32> = vs_INTERP0;
  let x_641 : i32 = u_xlati63;
  let x_644 : i32 = u_xlati63;
  let x_648 : vec4<f32> = x_515.x_MainLightWorldToShadow[((x_641 + 1i) / 4i)][((x_644 + 1i) % 4i)];
  let x_650 : vec3<f32> = (vec3<f32>(x_639.y, x_639.y, x_639.y) * vec3<f32>(x_648.x, x_648.y, x_648.z));
  let x_651 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_650.x, x_650.y, x_650.z, x_651.w);
  let x_653 : i32 = u_xlati63;
  let x_655 : i32 = u_xlati63;
  let x_658 : vec4<f32> = x_515.x_MainLightWorldToShadow[(x_653 / 4i)][(x_655 % 4i)];
  let x_660 : vec3<f32> = vs_INTERP0;
  let x_663 : vec4<f32> = u_xlat3;
  let x_665 : vec3<f32> = ((vec3<f32>(x_658.x, x_658.y, x_658.z) * vec3<f32>(x_660.x, x_660.x, x_660.x)) + vec3<f32>(x_663.x, x_663.y, x_663.z));
  let x_666 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_665.x, x_665.y, x_665.z, x_666.w);
  let x_668 : i32 = u_xlati63;
  let x_671 : i32 = u_xlati63;
  let x_675 : vec4<f32> = x_515.x_MainLightWorldToShadow[((x_668 + 2i) / 4i)][((x_671 + 2i) % 4i)];
  let x_677 : vec3<f32> = vs_INTERP0;
  let x_680 : vec4<f32> = u_xlat3;
  let x_682 : vec3<f32> = ((vec3<f32>(x_675.x, x_675.y, x_675.z) * vec3<f32>(x_677.z, x_677.z, x_677.z)) + vec3<f32>(x_680.x, x_680.y, x_680.z));
  let x_683 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_682.x, x_682.y, x_682.z, x_683.w);
  let x_685 : vec4<f32> = u_xlat3;
  let x_687 : i32 = u_xlati63;
  let x_690 : i32 = u_xlati63;
  let x_694 : vec4<f32> = x_515.x_MainLightWorldToShadow[((x_687 + 3i) / 4i)][((x_690 + 3i) % 4i)];
  let x_696 : vec3<f32> = (vec3<f32>(x_685.x, x_685.y, x_685.z) + vec3<f32>(x_694.x, x_694.y, x_694.z));
  let x_697 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_696.x, x_696.y, x_696.z, x_697.w);
  let x_706 : vec2<f32> = vs_INTERP4;
  let x_708 : f32 = x_44.x_GlobalMipBias.x;
  let x_709 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_706, x_708);
  u_xlat5 = x_709;
  let x_714 : vec2<f32> = vs_INTERP4;
  let x_716 : f32 = x_44.x_GlobalMipBias.x;
  let x_717 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_714, x_716);
  let x_718 : vec3<f32> = vec3<f32>(x_717.x, x_717.y, x_717.z);
  let x_719 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_718.x, x_718.y, x_718.z, x_719.w);
  let x_721 : vec4<f32> = u_xlat5;
  let x_725 : vec3<f32> = (vec3<f32>(x_721.x, x_721.y, x_721.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_726 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_725.x, x_725.y, x_725.z, x_726.w);
  let x_728 : vec4<f32> = u_xlat1;
  let x_730 : vec4<f32> = u_xlat5;
  u_xlat63 = dot(vec3<f32>(x_728.x, x_728.y, x_728.z), vec3<f32>(x_730.x, x_730.y, x_730.z));
  let x_733 : f32 = u_xlat63;
  u_xlat63 = (x_733 + 0.5f);
  let x_736 : f32 = u_xlat63;
  let x_738 : vec4<f32> = u_xlat6;
  let x_740 : vec3<f32> = (vec3<f32>(x_736, x_736, x_736) * vec3<f32>(x_738.x, x_738.y, x_738.z));
  let x_741 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_740.x, x_740.y, x_740.z, x_741.w);
  let x_744 : f32 = u_xlat5.w;
  u_xlat63 = max(x_744, 0.0001f);
  let x_747 : vec4<f32> = u_xlat5;
  let x_749 : f32 = u_xlat63;
  let x_751 : vec3<f32> = (vec3<f32>(x_747.x, x_747.y, x_747.z) / vec3<f32>(x_749, x_749, x_749));
  let x_752 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_751.x, x_751.y, x_751.z, x_752.w);
  let x_756 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_757 : vec2<f32> = vec2<f32>(x_756.x, x_756.y);
  let x_761 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_757.x, x_757.y));
  let x_762 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
  let x_764 : vec4<f32> = u_xlat6;
  let x_766 : vec4<f32> = hlslcc_FragCoord;
  let x_768 : vec2<f32> = (vec2<f32>(x_764.x, x_764.y) * vec2<f32>(x_766.x, x_766.y));
  let x_769 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_768.x, x_768.y, x_769.z, x_769.w);
  let x_772 : f32 = u_xlat6.y;
  let x_775 : f32 = x_44.x_ScaleBiasRt.x;
  let x_778 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat63 = ((x_772 * x_775) + x_778);
  let x_780 : f32 = u_xlat63;
  u_xlat6.z = (-(x_780) + 1.0f);
  let x_784 : vec4<f32> = u_xlat2;
  let x_785 : vec2<f32> = vec2<f32>(x_784.x, x_784.y);
  let x_786 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_785.x, x_785.y, x_786.z, x_786.w);
  let x_788 : vec4<f32> = u_xlat2;
  let x_792 : vec2<f32> = clamp(vec2<f32>(x_788.x, x_788.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_793 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_792.x, x_792.y, x_793.z, x_793.w);
  let x_796 : f32 = u_xlat2.x;
  u_xlat63 = ((-(x_796) * 0.959999979f) + 0.959999979f);
  let x_801 : f32 = u_xlat63;
  let x_804 : f32 = u_xlat2.y;
  u_xlat64 = (-(x_801) + x_804);
  let x_806 : f32 = u_xlat63;
  let x_808 : vec4<f32> = u_xlat0;
  u_xlat7 = (vec3<f32>(x_806, x_806, x_806) * vec3<f32>(x_808.x, x_808.y, x_808.z));
  let x_811 : vec4<f32> = u_xlat0;
  let x_815 : vec3<f32> = (vec3<f32>(x_811.x, x_811.y, x_811.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_816 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_815.x, x_815.y, x_815.z, x_816.w);
  let x_818 : vec4<f32> = u_xlat2;
  let x_820 : vec4<f32> = u_xlat0;
  let x_825 : vec3<f32> = ((vec3<f32>(x_818.x, x_818.x, x_818.x) * vec3<f32>(x_820.x, x_820.y, x_820.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_826 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_825.x, x_825.y, x_825.z, x_826.w);
  let x_829 : f32 = u_xlat2.y;
  u_xlat63 = (-(x_829) + 1.0f);
  let x_832 : f32 = u_xlat63;
  let x_833 : f32 = u_xlat63;
  u_xlat2.x = (x_832 * x_833);
  let x_837 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_837, 0.0078125f);
  let x_843 : f32 = u_xlat2.x;
  let x_845 : f32 = u_xlat2.x;
  u_xlat23 = (x_843 * x_845);
  let x_847 : f32 = u_xlat64;
  u_xlat64 = (x_847 + 1.0f);
  let x_849 : f32 = u_xlat64;
  u_xlat64 = min(x_849, 1.0f);
  let x_853 : f32 = u_xlat2.x;
  u_xlat65 = ((x_853 * 4.0f) + 2.0f);
  let x_862 : vec4<f32> = u_xlat6;
  let x_865 : f32 = x_44.x_GlobalMipBias.x;
  let x_866 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_862.x, x_862.z), x_865);
  u_xlat66 = x_866.x;
  let x_869 : f32 = u_xlat66;
  u_xlat67 = (x_869 + -1.0f);
  let x_872 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_873 : f32 = u_xlat67;
  u_xlat67 = ((x_872 * x_873) + 1.0f);
  let x_878 : f32 = u_xlat2.z;
  let x_879 : f32 = u_xlat66;
  u_xlat44 = min(x_878, x_879);
  let x_883 : f32 = x_515.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_883);
  let x_885 : bool = u_xlatb66;
  if (x_885) {
    let x_889 : f32 = x_515.x_MainLightShadowParams.y;
    u_xlatb66 = (x_889 == 1.0f);
    let x_891 : bool = u_xlatb66;
    if (x_891) {
      let x_894 : vec4<f32> = u_xlat3;
      let x_897 : vec4<f32> = x_515.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_894.x, x_894.y, x_894.x, x_894.y) + x_897);
      let x_900 : vec4<f32> = u_xlat6;
      let x_901 : vec2<f32> = vec2<f32>(x_900.x, x_900.y);
      let x_903 : f32 = u_xlat3.z;
      txVec0 = vec3<f32>(x_901.x, x_901.y, x_903);
      let x_916 : vec3<f32> = txVec0;
      let x_918 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_916.xy, x_916.z);
      u_xlat8.x = x_918;
      let x_921 : vec4<f32> = u_xlat6;
      let x_922 : vec2<f32> = vec2<f32>(x_921.z, x_921.w);
      let x_924 : f32 = u_xlat3.z;
      txVec1 = vec3<f32>(x_922.x, x_922.y, x_924);
      let x_931 : vec3<f32> = txVec1;
      let x_933 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_931.xy, x_931.z);
      u_xlat8.y = x_933;
      let x_935 : vec4<f32> = u_xlat3;
      let x_938 : vec4<f32> = x_515.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_935.x, x_935.y, x_935.x, x_935.y) + x_938);
      let x_941 : vec4<f32> = u_xlat6;
      let x_942 : vec2<f32> = vec2<f32>(x_941.x, x_941.y);
      let x_944 : f32 = u_xlat3.z;
      txVec2 = vec3<f32>(x_942.x, x_942.y, x_944);
      let x_951 : vec3<f32> = txVec2;
      let x_953 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_951.xy, x_951.z);
      u_xlat8.z = x_953;
      let x_956 : vec4<f32> = u_xlat6;
      let x_957 : vec2<f32> = vec2<f32>(x_956.z, x_956.w);
      let x_959 : f32 = u_xlat3.z;
      txVec3 = vec3<f32>(x_957.x, x_957.y, x_959);
      let x_966 : vec3<f32> = txVec3;
      let x_968 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_966.xy, x_966.z);
      u_xlat8.w = x_968;
      let x_970 : vec4<f32> = u_xlat8;
      u_xlat66 = dot(x_970, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_977 : f32 = x_515.x_MainLightShadowParams.y;
      u_xlatb68 = (x_977 == 2.0f);
      let x_979 : bool = u_xlatb68;
      if (x_979) {
        let x_982 : vec4<f32> = u_xlat3;
        let x_985 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_989 : vec2<f32> = ((vec2<f32>(x_982.x, x_982.y) * vec2<f32>(x_985.z, x_985.w)) + vec2<f32>(0.5f, 0.5f));
        let x_990 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_989.x, x_989.y, x_990.z, x_990.w);
        let x_992 : vec4<f32> = u_xlat6;
        let x_994 : vec2<f32> = floor(vec2<f32>(x_992.x, x_992.y));
        let x_995 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_994.x, x_994.y, x_995.z, x_995.w);
        let x_998 : vec4<f32> = u_xlat3;
        let x_1001 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1004 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_998.x, x_998.y) * vec2<f32>(x_1001.z, x_1001.w)) + -(vec2<f32>(x_1004.x, x_1004.y)));
        let x_1008 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1008.x, x_1008.x, x_1008.y, x_1008.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1013 : vec4<f32> = u_xlat8;
        let x_1015 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1013.x, x_1013.x, x_1013.z, x_1013.z) * vec4<f32>(x_1015.x, x_1015.x, x_1015.z, x_1015.z));
        let x_1018 : vec4<f32> = u_xlat9;
        let x_1022 : vec2<f32> = (vec2<f32>(x_1018.y, x_1018.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1023 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1022.x, x_1023.y, x_1022.y, x_1023.w);
        let x_1025 : vec4<f32> = u_xlat9;
        let x_1028 : vec2<f32> = u_xlat48;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1025.x, x_1025.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1028));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1030.x, x_1030.y, x_1031.z, x_1031.w);
        let x_1034 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_1034) + vec2<f32>(1.0f, 1.0f));
        let x_1038 : vec2<f32> = u_xlat48;
        let x_1040 : vec2<f32> = min(x_1038, vec2<f32>(0.0f, 0.0f));
        let x_1041 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1040.x, x_1040.y, x_1041.z, x_1041.w);
        let x_1043 : vec4<f32> = u_xlat10;
        let x_1046 : vec4<f32> = u_xlat10;
        let x_1049 : vec2<f32> = u_xlat51;
        let x_1050 : vec2<f32> = ((-(vec2<f32>(x_1043.x, x_1043.y)) * vec2<f32>(x_1046.x, x_1046.y)) + x_1049);
        let x_1051 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1050.x, x_1050.y, x_1051.z, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_1053, vec2<f32>(0.0f, 0.0f));
        let x_1055 : vec2<f32> = u_xlat48;
        let x_1057 : vec2<f32> = u_xlat48;
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_1055) * x_1057) + vec2<f32>(x_1059.y, x_1059.w));
        let x_1062 : vec4<f32> = u_xlat10;
        let x_1064 : vec2<f32> = (vec2<f32>(x_1062.x, x_1062.y) + vec2<f32>(1.0f, 1.0f));
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1064.x, x_1064.y, x_1065.z, x_1065.w);
        let x_1067 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_1067 + vec2<f32>(1.0f, 1.0f));
        let x_1070 : vec4<f32> = u_xlat9;
        let x_1074 : vec2<f32> = (vec2<f32>(x_1070.x, x_1070.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1075 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1074.x, x_1074.y, x_1075.z, x_1075.w);
        let x_1077 : vec2<f32> = u_xlat51;
        let x_1078 : vec2<f32> = (x_1077 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1078.x, x_1078.y, x_1079.z, x_1079.w);
        let x_1081 : vec4<f32> = u_xlat10;
        let x_1083 : vec2<f32> = (vec2<f32>(x_1081.x, x_1081.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1084 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1083.x, x_1083.y, x_1084.z, x_1084.w);
        let x_1087 : vec2<f32> = u_xlat48;
        let x_1088 : vec2<f32> = (x_1087 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1089 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1088.x, x_1088.y, x_1089.z, x_1089.w);
        let x_1091 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_1091.y, x_1091.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1095 : f32 = u_xlat10.x;
        u_xlat11.z = x_1095;
        let x_1098 : f32 = u_xlat48.x;
        u_xlat11.w = x_1098;
        let x_1101 : f32 = u_xlat12.x;
        u_xlat9.z = x_1101;
        let x_1104 : f32 = u_xlat8.x;
        u_xlat9.w = x_1104;
        let x_1107 : vec4<f32> = u_xlat9;
        let x_1109 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1107.z, x_1107.w, x_1107.x, x_1107.z) + vec4<f32>(x_1109.z, x_1109.w, x_1109.x, x_1109.z));
        let x_1113 : f32 = u_xlat11.y;
        u_xlat10.z = x_1113;
        let x_1116 : f32 = u_xlat48.y;
        u_xlat10.w = x_1116;
        let x_1119 : f32 = u_xlat9.y;
        u_xlat12.z = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat12.w = x_1122;
        let x_1124 : vec4<f32> = u_xlat10;
        let x_1126 : vec4<f32> = u_xlat12;
        let x_1128 : vec3<f32> = (vec3<f32>(x_1124.z, x_1124.y, x_1124.w) + vec3<f32>(x_1126.z, x_1126.y, x_1126.w));
        let x_1129 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1128.x, x_1128.y, x_1128.z, x_1129.w);
        let x_1131 : vec4<f32> = u_xlat9;
        let x_1133 : vec4<f32> = u_xlat13;
        let x_1135 : vec3<f32> = (vec3<f32>(x_1131.x, x_1131.z, x_1131.w) / vec3<f32>(x_1133.z, x_1133.w, x_1133.y));
        let x_1136 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1135.x, x_1135.y, x_1135.z, x_1136.w);
        let x_1138 : vec4<f32> = u_xlat9;
        let x_1143 : vec3<f32> = (vec3<f32>(x_1138.x, x_1138.y, x_1138.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1144 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1143.x, x_1143.y, x_1143.z, x_1144.w);
        let x_1146 : vec4<f32> = u_xlat12;
        let x_1148 : vec4<f32> = u_xlat8;
        let x_1150 : vec3<f32> = (vec3<f32>(x_1146.z, x_1146.y, x_1146.w) / vec3<f32>(x_1148.x, x_1148.y, x_1148.z));
        let x_1151 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1150.x, x_1150.y, x_1150.z, x_1151.w);
        let x_1153 : vec4<f32> = u_xlat10;
        let x_1155 : vec3<f32> = (vec3<f32>(x_1153.x, x_1153.y, x_1153.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1156 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1155.x, x_1155.y, x_1155.z, x_1156.w);
        let x_1158 : vec4<f32> = u_xlat9;
        let x_1161 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1163 : vec3<f32> = (vec3<f32>(x_1158.y, x_1158.x, x_1158.z) * vec3<f32>(x_1161.x, x_1161.x, x_1161.x));
        let x_1164 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1163.x, x_1163.y, x_1163.z, x_1164.w);
        let x_1166 : vec4<f32> = u_xlat10;
        let x_1169 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1171 : vec3<f32> = (vec3<f32>(x_1166.x, x_1166.y, x_1166.z) * vec3<f32>(x_1169.y, x_1169.y, x_1169.y));
        let x_1172 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1171.x, x_1171.y, x_1171.z, x_1172.w);
        let x_1175 : f32 = u_xlat10.x;
        u_xlat9.w = x_1175;
        let x_1177 : vec4<f32> = u_xlat6;
        let x_1180 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1183 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1177.x, x_1177.y, x_1177.x, x_1177.y) * vec4<f32>(x_1180.x, x_1180.y, x_1180.x, x_1180.y)) + vec4<f32>(x_1183.y, x_1183.w, x_1183.x, x_1183.w));
        let x_1186 : vec4<f32> = u_xlat6;
        let x_1189 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1192 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1186.x, x_1186.y) * vec2<f32>(x_1189.x, x_1189.y)) + vec2<f32>(x_1192.z, x_1192.w));
        let x_1196 : f32 = u_xlat9.y;
        u_xlat10.w = x_1196;
        let x_1198 : vec4<f32> = u_xlat10;
        let x_1199 : vec2<f32> = vec2<f32>(x_1198.y, x_1198.z);
        let x_1200 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1200.x, x_1199.x, x_1200.z, x_1199.y);
        let x_1202 : vec4<f32> = u_xlat6;
        let x_1205 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1208 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1202.x, x_1202.y, x_1202.x, x_1202.y) * vec4<f32>(x_1205.x, x_1205.y, x_1205.x, x_1205.y)) + vec4<f32>(x_1208.x, x_1208.y, x_1208.z, x_1208.y));
        let x_1211 : vec4<f32> = u_xlat6;
        let x_1214 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1217 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1211.x, x_1211.y, x_1211.x, x_1211.y) * vec4<f32>(x_1214.x, x_1214.y, x_1214.x, x_1214.y)) + vec4<f32>(x_1217.w, x_1217.y, x_1217.w, x_1217.z));
        let x_1220 : vec4<f32> = u_xlat6;
        let x_1223 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1226 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1220.x, x_1220.y, x_1220.x, x_1220.y) * vec4<f32>(x_1223.x, x_1223.y, x_1223.x, x_1223.y)) + vec4<f32>(x_1226.x, x_1226.w, x_1226.z, x_1226.w));
        let x_1230 : vec4<f32> = u_xlat8;
        let x_1232 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1230.x, x_1230.x, x_1230.x, x_1230.y) * vec4<f32>(x_1232.z, x_1232.w, x_1232.y, x_1232.z));
        let x_1236 : vec4<f32> = u_xlat8;
        let x_1238 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.z, x_1236.z) * x_1238);
        let x_1242 : f32 = u_xlat8.z;
        let x_1244 : f32 = u_xlat13.y;
        u_xlat68 = (x_1242 * x_1244);
        let x_1247 : vec4<f32> = u_xlat11;
        let x_1248 : vec2<f32> = vec2<f32>(x_1247.x, x_1247.y);
        let x_1250 : f32 = u_xlat3.z;
        txVec4 = vec3<f32>(x_1248.x, x_1248.y, x_1250);
        let x_1257 : vec3<f32> = txVec4;
        let x_1259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1257.xy, x_1257.z);
        u_xlat6.x = x_1259;
        let x_1262 : vec4<f32> = u_xlat11;
        let x_1263 : vec2<f32> = vec2<f32>(x_1262.z, x_1262.w);
        let x_1265 : f32 = u_xlat3.z;
        txVec5 = vec3<f32>(x_1263.x, x_1263.y, x_1265);
        let x_1273 : vec3<f32> = txVec5;
        let x_1275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1273.xy, x_1273.z);
        u_xlat27 = x_1275;
        let x_1276 : f32 = u_xlat27;
        let x_1278 : f32 = u_xlat14.y;
        u_xlat27 = (x_1276 * x_1278);
        let x_1281 : f32 = u_xlat14.x;
        let x_1283 : f32 = u_xlat6.x;
        let x_1285 : f32 = u_xlat27;
        u_xlat6.x = ((x_1281 * x_1283) + x_1285);
        let x_1289 : vec2<f32> = u_xlat48;
        let x_1291 : f32 = u_xlat3.z;
        txVec6 = vec3<f32>(x_1289.x, x_1289.y, x_1291);
        let x_1298 : vec3<f32> = txVec6;
        let x_1300 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1298.xy, x_1298.z);
        u_xlat27 = x_1300;
        let x_1302 : f32 = u_xlat14.z;
        let x_1303 : f32 = u_xlat27;
        let x_1306 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1302 * x_1303) + x_1306);
        let x_1310 : vec4<f32> = u_xlat10;
        let x_1311 : vec2<f32> = vec2<f32>(x_1310.x, x_1310.y);
        let x_1313 : f32 = u_xlat3.z;
        txVec7 = vec3<f32>(x_1311.x, x_1311.y, x_1313);
        let x_1320 : vec3<f32> = txVec7;
        let x_1322 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1320.xy, x_1320.z);
        u_xlat27 = x_1322;
        let x_1324 : f32 = u_xlat14.w;
        let x_1325 : f32 = u_xlat27;
        let x_1328 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1324 * x_1325) + x_1328);
        let x_1332 : vec4<f32> = u_xlat12;
        let x_1333 : vec2<f32> = vec2<f32>(x_1332.x, x_1332.y);
        let x_1335 : f32 = u_xlat3.z;
        txVec8 = vec3<f32>(x_1333.x, x_1333.y, x_1335);
        let x_1342 : vec3<f32> = txVec8;
        let x_1344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1342.xy, x_1342.z);
        u_xlat27 = x_1344;
        let x_1346 : f32 = u_xlat15.x;
        let x_1347 : f32 = u_xlat27;
        let x_1350 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1346 * x_1347) + x_1350);
        let x_1354 : vec4<f32> = u_xlat12;
        let x_1355 : vec2<f32> = vec2<f32>(x_1354.z, x_1354.w);
        let x_1357 : f32 = u_xlat3.z;
        txVec9 = vec3<f32>(x_1355.x, x_1355.y, x_1357);
        let x_1364 : vec3<f32> = txVec9;
        let x_1366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1364.xy, x_1364.z);
        u_xlat27 = x_1366;
        let x_1368 : f32 = u_xlat15.y;
        let x_1369 : f32 = u_xlat27;
        let x_1372 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1368 * x_1369) + x_1372);
        let x_1376 : vec4<f32> = u_xlat10;
        let x_1377 : vec2<f32> = vec2<f32>(x_1376.z, x_1376.w);
        let x_1379 : f32 = u_xlat3.z;
        txVec10 = vec3<f32>(x_1377.x, x_1377.y, x_1379);
        let x_1386 : vec3<f32> = txVec10;
        let x_1388 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1386.xy, x_1386.z);
        u_xlat27 = x_1388;
        let x_1390 : f32 = u_xlat15.z;
        let x_1391 : f32 = u_xlat27;
        let x_1394 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1390 * x_1391) + x_1394);
        let x_1398 : vec4<f32> = u_xlat9;
        let x_1399 : vec2<f32> = vec2<f32>(x_1398.x, x_1398.y);
        let x_1401 : f32 = u_xlat3.z;
        txVec11 = vec3<f32>(x_1399.x, x_1399.y, x_1401);
        let x_1408 : vec3<f32> = txVec11;
        let x_1410 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1408.xy, x_1408.z);
        u_xlat27 = x_1410;
        let x_1412 : f32 = u_xlat15.w;
        let x_1413 : f32 = u_xlat27;
        let x_1416 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1412 * x_1413) + x_1416);
        let x_1420 : vec4<f32> = u_xlat9;
        let x_1421 : vec2<f32> = vec2<f32>(x_1420.z, x_1420.w);
        let x_1423 : f32 = u_xlat3.z;
        txVec12 = vec3<f32>(x_1421.x, x_1421.y, x_1423);
        let x_1430 : vec3<f32> = txVec12;
        let x_1432 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1430.xy, x_1430.z);
        u_xlat27 = x_1432;
        let x_1433 : f32 = u_xlat68;
        let x_1434 : f32 = u_xlat27;
        let x_1437 : f32 = u_xlat6.x;
        u_xlat66 = ((x_1433 * x_1434) + x_1437);
      } else {
        let x_1440 : vec4<f32> = u_xlat3;
        let x_1443 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1446 : vec2<f32> = ((vec2<f32>(x_1440.x, x_1440.y) * vec2<f32>(x_1443.z, x_1443.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1447 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1446.x, x_1446.y, x_1447.z, x_1447.w);
        let x_1449 : vec4<f32> = u_xlat6;
        let x_1451 : vec2<f32> = floor(vec2<f32>(x_1449.x, x_1449.y));
        let x_1452 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1451.x, x_1451.y, x_1452.z, x_1452.w);
        let x_1454 : vec4<f32> = u_xlat3;
        let x_1457 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1460 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1454.x, x_1454.y) * vec2<f32>(x_1457.z, x_1457.w)) + -(vec2<f32>(x_1460.x, x_1460.y)));
        let x_1464 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1464.x, x_1464.x, x_1464.y, x_1464.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1467 : vec4<f32> = u_xlat8;
        let x_1469 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1467.x, x_1467.x, x_1467.z, x_1467.z) * vec4<f32>(x_1469.x, x_1469.x, x_1469.z, x_1469.z));
        let x_1472 : vec4<f32> = u_xlat9;
        let x_1476 : vec2<f32> = (vec2<f32>(x_1472.y, x_1472.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1477 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1477.x, x_1476.x, x_1477.z, x_1476.y);
        let x_1479 : vec4<f32> = u_xlat9;
        let x_1482 : vec2<f32> = u_xlat48;
        let x_1484 : vec2<f32> = ((vec2<f32>(x_1479.x, x_1479.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1482));
        let x_1485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1484.x, x_1485.y, x_1484.y, x_1485.w);
        let x_1487 : vec2<f32> = u_xlat48;
        let x_1489 : vec2<f32> = (-(x_1487) + vec2<f32>(1.0f, 1.0f));
        let x_1490 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1489.x, x_1489.y, x_1490.z, x_1490.w);
        let x_1492 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1492, vec2<f32>(0.0f, 0.0f));
        let x_1494 : vec2<f32> = u_xlat51;
        let x_1496 : vec2<f32> = u_xlat51;
        let x_1498 : vec4<f32> = u_xlat9;
        let x_1500 : vec2<f32> = ((-(x_1494) * x_1496) + vec2<f32>(x_1498.x, x_1498.y));
        let x_1501 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1500.x, x_1500.y, x_1501.z, x_1501.w);
        let x_1503 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1503, vec2<f32>(0.0f, 0.0f));
        let x_1506 : vec2<f32> = u_xlat51;
        let x_1508 : vec2<f32> = u_xlat51;
        let x_1510 : vec4<f32> = u_xlat8;
        let x_1512 : vec2<f32> = ((-(x_1506) * x_1508) + vec2<f32>(x_1510.y, x_1510.w));
        let x_1513 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1512.x, x_1513.y, x_1512.y);
        let x_1515 : vec4<f32> = u_xlat9;
        let x_1517 : vec2<f32> = (vec2<f32>(x_1515.x, x_1515.y) + vec2<f32>(2.0f, 2.0f));
        let x_1518 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1517.x, x_1517.y, x_1518.z, x_1518.w);
        let x_1520 : vec3<f32> = u_xlat29;
        let x_1522 : vec2<f32> = (vec2<f32>(x_1520.x, x_1520.z) + vec2<f32>(2.0f, 2.0f));
        let x_1523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1523.x, x_1522.x, x_1523.z, x_1522.y);
        let x_1526 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1526 * 0.081632003f);
        let x_1530 : vec4<f32> = u_xlat8;
        let x_1533 : vec3<f32> = (vec3<f32>(x_1530.z, x_1530.x, x_1530.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1534 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1533.x, x_1533.y, x_1533.z, x_1534.w);
        let x_1536 : vec4<f32> = u_xlat9;
        let x_1539 : vec2<f32> = (vec2<f32>(x_1536.x, x_1536.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1540 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1539.x, x_1539.y, x_1540.z, x_1540.w);
        let x_1543 : f32 = u_xlat12.y;
        u_xlat11.x = x_1543;
        let x_1545 : vec2<f32> = u_xlat48;
        let x_1552 : vec2<f32> = ((vec2<f32>(x_1545.x, x_1545.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1553 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1553.x, x_1552.x, x_1553.z, x_1552.y);
        let x_1555 : vec2<f32> = u_xlat48;
        let x_1559 : vec2<f32> = ((vec2<f32>(x_1555.x, x_1555.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1559.x, x_1560.y, x_1559.y, x_1560.w);
        let x_1563 : f32 = u_xlat8.x;
        u_xlat9.y = x_1563;
        let x_1566 : f32 = u_xlat10.y;
        u_xlat9.w = x_1566;
        let x_1568 : vec4<f32> = u_xlat9;
        let x_1569 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1568 + x_1569);
        let x_1571 : vec2<f32> = u_xlat48;
        let x_1574 : vec2<f32> = ((vec2<f32>(x_1571.y, x_1571.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1575 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1575.x, x_1574.x, x_1575.z, x_1574.y);
        let x_1577 : vec2<f32> = u_xlat48;
        let x_1580 : vec2<f32> = ((vec2<f32>(x_1577.y, x_1577.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1581 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1580.x, x_1581.y, x_1580.y, x_1581.w);
        let x_1584 : f32 = u_xlat8.y;
        u_xlat10.y = x_1584;
        let x_1586 : vec4<f32> = u_xlat10;
        let x_1587 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1586 + x_1587);
        let x_1589 : vec4<f32> = u_xlat9;
        let x_1590 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1589 / x_1590);
        let x_1592 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1592 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1598 : vec4<f32> = u_xlat10;
        let x_1599 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1598 / x_1599);
        let x_1601 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1601 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1603 : vec4<f32> = u_xlat9;
        let x_1606 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1603.w, x_1603.x, x_1603.y, x_1603.z) * vec4<f32>(x_1606.x, x_1606.x, x_1606.x, x_1606.x));
        let x_1609 : vec4<f32> = u_xlat10;
        let x_1612 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1609.x, x_1609.w, x_1609.y, x_1609.z) * vec4<f32>(x_1612.y, x_1612.y, x_1612.y, x_1612.y));
        let x_1615 : vec4<f32> = u_xlat9;
        let x_1616 : vec3<f32> = vec3<f32>(x_1615.y, x_1615.z, x_1615.w);
        let x_1617 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1616.x, x_1617.y, x_1616.y, x_1616.z);
        let x_1620 : f32 = u_xlat10.x;
        u_xlat12.y = x_1620;
        let x_1622 : vec4<f32> = u_xlat6;
        let x_1625 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1628 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1622.x, x_1622.y, x_1622.x, x_1622.y) * vec4<f32>(x_1625.x, x_1625.y, x_1625.x, x_1625.y)) + vec4<f32>(x_1628.x, x_1628.y, x_1628.z, x_1628.y));
        let x_1631 : vec4<f32> = u_xlat6;
        let x_1634 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1637 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1631.x, x_1631.y) * vec2<f32>(x_1634.x, x_1634.y)) + vec2<f32>(x_1637.w, x_1637.y));
        let x_1641 : f32 = u_xlat12.y;
        u_xlat9.y = x_1641;
        let x_1644 : f32 = u_xlat10.z;
        u_xlat12.y = x_1644;
        let x_1646 : vec4<f32> = u_xlat6;
        let x_1649 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1652 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1646.x, x_1646.y, x_1646.x, x_1646.y) * vec4<f32>(x_1649.x, x_1649.y, x_1649.x, x_1649.y)) + vec4<f32>(x_1652.x, x_1652.y, x_1652.z, x_1652.y));
        let x_1655 : vec4<f32> = u_xlat6;
        let x_1658 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1661 : vec4<f32> = u_xlat12;
        let x_1663 : vec2<f32> = ((vec2<f32>(x_1655.x, x_1655.y) * vec2<f32>(x_1658.x, x_1658.y)) + vec2<f32>(x_1661.w, x_1661.y));
        let x_1664 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1663.x, x_1663.y, x_1664.z, x_1664.w);
        let x_1667 : f32 = u_xlat12.y;
        u_xlat9.z = x_1667;
        let x_1670 : vec4<f32> = u_xlat6;
        let x_1673 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1676 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1670.x, x_1670.y, x_1670.x, x_1670.y) * vec4<f32>(x_1673.x, x_1673.y, x_1673.x, x_1673.y)) + vec4<f32>(x_1676.x, x_1676.y, x_1676.x, x_1676.z));
        let x_1680 : f32 = u_xlat10.w;
        u_xlat12.y = x_1680;
        let x_1683 : vec4<f32> = u_xlat6;
        let x_1686 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1689 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1683.x, x_1683.y, x_1683.x, x_1683.y) * vec4<f32>(x_1686.x, x_1686.y, x_1686.x, x_1686.y)) + vec4<f32>(x_1689.x, x_1689.y, x_1689.z, x_1689.y));
        let x_1693 : vec4<f32> = u_xlat6;
        let x_1696 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1699 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1693.x, x_1693.y) * vec2<f32>(x_1696.x, x_1696.y)) + vec2<f32>(x_1699.w, x_1699.y));
        let x_1703 : f32 = u_xlat12.y;
        u_xlat9.w = x_1703;
        let x_1706 : vec4<f32> = u_xlat6;
        let x_1709 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1712 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1706.x, x_1706.y) * vec2<f32>(x_1709.x, x_1709.y)) + vec2<f32>(x_1712.x, x_1712.w));
        let x_1715 : vec4<f32> = u_xlat12;
        let x_1716 : vec3<f32> = vec3<f32>(x_1715.x, x_1715.z, x_1715.w);
        let x_1717 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1716.x, x_1717.y, x_1716.y, x_1716.z);
        let x_1719 : vec4<f32> = u_xlat6;
        let x_1722 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1725 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1719.x, x_1719.y, x_1719.x, x_1719.y) * vec4<f32>(x_1722.x, x_1722.y, x_1722.x, x_1722.y)) + vec4<f32>(x_1725.x, x_1725.y, x_1725.z, x_1725.y));
        let x_1729 : vec4<f32> = u_xlat6;
        let x_1732 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1735 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1729.x, x_1729.y) * vec2<f32>(x_1732.x, x_1732.y)) + vec2<f32>(x_1735.w, x_1735.y));
        let x_1739 : f32 = u_xlat9.x;
        u_xlat10.x = x_1739;
        let x_1741 : vec4<f32> = u_xlat6;
        let x_1744 : vec4<f32> = x_515.x_MainLightShadowmapSize;
        let x_1747 : vec4<f32> = u_xlat10;
        let x_1749 : vec2<f32> = ((vec2<f32>(x_1741.x, x_1741.y) * vec2<f32>(x_1744.x, x_1744.y)) + vec2<f32>(x_1747.x, x_1747.y));
        let x_1750 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1749.x, x_1749.y, x_1750.z, x_1750.w);
        let x_1753 : vec4<f32> = u_xlat8;
        let x_1755 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1753.x, x_1753.x, x_1753.x, x_1753.x) * x_1755);
        let x_1758 : vec4<f32> = u_xlat8;
        let x_1760 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1758.y, x_1758.y, x_1758.y, x_1758.y) * x_1760);
        let x_1763 : vec4<f32> = u_xlat8;
        let x_1765 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1763.z, x_1763.z, x_1763.z, x_1763.z) * x_1765);
        let x_1767 : vec4<f32> = u_xlat8;
        let x_1769 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1767.w, x_1767.w, x_1767.w, x_1767.w) * x_1769);
        let x_1772 : vec4<f32> = u_xlat13;
        let x_1773 : vec2<f32> = vec2<f32>(x_1772.x, x_1772.y);
        let x_1775 : f32 = u_xlat3.z;
        txVec13 = vec3<f32>(x_1773.x, x_1773.y, x_1775);
        let x_1782 : vec3<f32> = txVec13;
        let x_1784 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1782.xy, x_1782.z);
        u_xlat68 = x_1784;
        let x_1786 : vec4<f32> = u_xlat13;
        let x_1787 : vec2<f32> = vec2<f32>(x_1786.z, x_1786.w);
        let x_1789 : f32 = u_xlat3.z;
        txVec14 = vec3<f32>(x_1787.x, x_1787.y, x_1789);
        let x_1797 : vec3<f32> = txVec14;
        let x_1799 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1797.xy, x_1797.z);
        u_xlat70 = x_1799;
        let x_1800 : f32 = u_xlat70;
        let x_1802 : f32 = u_xlat18.y;
        u_xlat70 = (x_1800 * x_1802);
        let x_1805 : f32 = u_xlat18.x;
        let x_1806 : f32 = u_xlat68;
        let x_1808 : f32 = u_xlat70;
        u_xlat68 = ((x_1805 * x_1806) + x_1808);
        let x_1811 : vec2<f32> = u_xlat48;
        let x_1813 : f32 = u_xlat3.z;
        txVec15 = vec3<f32>(x_1811.x, x_1811.y, x_1813);
        let x_1820 : vec3<f32> = txVec15;
        let x_1822 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1820.xy, x_1820.z);
        u_xlat48.x = x_1822;
        let x_1825 : f32 = u_xlat18.z;
        let x_1827 : f32 = u_xlat48.x;
        let x_1829 : f32 = u_xlat68;
        u_xlat68 = ((x_1825 * x_1827) + x_1829);
        let x_1832 : vec4<f32> = u_xlat16;
        let x_1833 : vec2<f32> = vec2<f32>(x_1832.x, x_1832.y);
        let x_1835 : f32 = u_xlat3.z;
        txVec16 = vec3<f32>(x_1833.x, x_1833.y, x_1835);
        let x_1842 : vec3<f32> = txVec16;
        let x_1844 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1842.xy, x_1842.z);
        u_xlat48.x = x_1844;
        let x_1847 : f32 = u_xlat18.w;
        let x_1849 : f32 = u_xlat48.x;
        let x_1851 : f32 = u_xlat68;
        u_xlat68 = ((x_1847 * x_1849) + x_1851);
        let x_1854 : vec4<f32> = u_xlat14;
        let x_1855 : vec2<f32> = vec2<f32>(x_1854.x, x_1854.y);
        let x_1857 : f32 = u_xlat3.z;
        txVec17 = vec3<f32>(x_1855.x, x_1855.y, x_1857);
        let x_1864 : vec3<f32> = txVec17;
        let x_1866 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1864.xy, x_1864.z);
        u_xlat48.x = x_1866;
        let x_1869 : f32 = u_xlat19.x;
        let x_1871 : f32 = u_xlat48.x;
        let x_1873 : f32 = u_xlat68;
        u_xlat68 = ((x_1869 * x_1871) + x_1873);
        let x_1876 : vec4<f32> = u_xlat14;
        let x_1877 : vec2<f32> = vec2<f32>(x_1876.z, x_1876.w);
        let x_1879 : f32 = u_xlat3.z;
        txVec18 = vec3<f32>(x_1877.x, x_1877.y, x_1879);
        let x_1886 : vec3<f32> = txVec18;
        let x_1888 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1886.xy, x_1886.z);
        u_xlat48.x = x_1888;
        let x_1891 : f32 = u_xlat19.y;
        let x_1893 : f32 = u_xlat48.x;
        let x_1895 : f32 = u_xlat68;
        u_xlat68 = ((x_1891 * x_1893) + x_1895);
        let x_1898 : vec4<f32> = u_xlat15;
        let x_1899 : vec2<f32> = vec2<f32>(x_1898.x, x_1898.y);
        let x_1901 : f32 = u_xlat3.z;
        txVec19 = vec3<f32>(x_1899.x, x_1899.y, x_1901);
        let x_1908 : vec3<f32> = txVec19;
        let x_1910 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1908.xy, x_1908.z);
        u_xlat48.x = x_1910;
        let x_1913 : f32 = u_xlat19.z;
        let x_1915 : f32 = u_xlat48.x;
        let x_1917 : f32 = u_xlat68;
        u_xlat68 = ((x_1913 * x_1915) + x_1917);
        let x_1920 : vec4<f32> = u_xlat16;
        let x_1921 : vec2<f32> = vec2<f32>(x_1920.z, x_1920.w);
        let x_1923 : f32 = u_xlat3.z;
        txVec20 = vec3<f32>(x_1921.x, x_1921.y, x_1923);
        let x_1930 : vec3<f32> = txVec20;
        let x_1932 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1930.xy, x_1930.z);
        u_xlat48.x = x_1932;
        let x_1935 : f32 = u_xlat19.w;
        let x_1937 : f32 = u_xlat48.x;
        let x_1939 : f32 = u_xlat68;
        u_xlat68 = ((x_1935 * x_1937) + x_1939);
        let x_1942 : vec4<f32> = u_xlat17;
        let x_1943 : vec2<f32> = vec2<f32>(x_1942.x, x_1942.y);
        let x_1945 : f32 = u_xlat3.z;
        txVec21 = vec3<f32>(x_1943.x, x_1943.y, x_1945);
        let x_1952 : vec3<f32> = txVec21;
        let x_1954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1952.xy, x_1952.z);
        u_xlat48.x = x_1954;
        let x_1957 : f32 = u_xlat20.x;
        let x_1959 : f32 = u_xlat48.x;
        let x_1961 : f32 = u_xlat68;
        u_xlat68 = ((x_1957 * x_1959) + x_1961);
        let x_1964 : vec4<f32> = u_xlat17;
        let x_1965 : vec2<f32> = vec2<f32>(x_1964.z, x_1964.w);
        let x_1967 : f32 = u_xlat3.z;
        txVec22 = vec3<f32>(x_1965.x, x_1965.y, x_1967);
        let x_1974 : vec3<f32> = txVec22;
        let x_1976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1974.xy, x_1974.z);
        u_xlat48.x = x_1976;
        let x_1979 : f32 = u_xlat20.y;
        let x_1981 : f32 = u_xlat48.x;
        let x_1983 : f32 = u_xlat68;
        u_xlat68 = ((x_1979 * x_1981) + x_1983);
        let x_1986 : vec2<f32> = u_xlat30;
        let x_1988 : f32 = u_xlat3.z;
        txVec23 = vec3<f32>(x_1986.x, x_1986.y, x_1988);
        let x_1995 : vec3<f32> = txVec23;
        let x_1997 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1995.xy, x_1995.z);
        u_xlat48.x = x_1997;
        let x_2000 : f32 = u_xlat20.z;
        let x_2002 : f32 = u_xlat48.x;
        let x_2004 : f32 = u_xlat68;
        u_xlat68 = ((x_2000 * x_2002) + x_2004);
        let x_2007 : vec2<f32> = u_xlat57;
        let x_2009 : f32 = u_xlat3.z;
        txVec24 = vec3<f32>(x_2007.x, x_2007.y, x_2009);
        let x_2016 : vec3<f32> = txVec24;
        let x_2018 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2016.xy, x_2016.z);
        u_xlat48.x = x_2018;
        let x_2021 : f32 = u_xlat20.w;
        let x_2023 : f32 = u_xlat48.x;
        let x_2025 : f32 = u_xlat68;
        u_xlat68 = ((x_2021 * x_2023) + x_2025);
        let x_2028 : vec4<f32> = u_xlat12;
        let x_2029 : vec2<f32> = vec2<f32>(x_2028.x, x_2028.y);
        let x_2031 : f32 = u_xlat3.z;
        txVec25 = vec3<f32>(x_2029.x, x_2029.y, x_2031);
        let x_2038 : vec3<f32> = txVec25;
        let x_2040 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2038.xy, x_2038.z);
        u_xlat48.x = x_2040;
        let x_2043 : f32 = u_xlat8.x;
        let x_2045 : f32 = u_xlat48.x;
        let x_2047 : f32 = u_xlat68;
        u_xlat68 = ((x_2043 * x_2045) + x_2047);
        let x_2050 : vec4<f32> = u_xlat12;
        let x_2051 : vec2<f32> = vec2<f32>(x_2050.z, x_2050.w);
        let x_2053 : f32 = u_xlat3.z;
        txVec26 = vec3<f32>(x_2051.x, x_2051.y, x_2053);
        let x_2060 : vec3<f32> = txVec26;
        let x_2062 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2060.xy, x_2060.z);
        u_xlat48.x = x_2062;
        let x_2065 : f32 = u_xlat8.y;
        let x_2067 : f32 = u_xlat48.x;
        let x_2069 : f32 = u_xlat68;
        u_xlat68 = ((x_2065 * x_2067) + x_2069);
        let x_2072 : vec2<f32> = u_xlat52;
        let x_2074 : f32 = u_xlat3.z;
        txVec27 = vec3<f32>(x_2072.x, x_2072.y, x_2074);
        let x_2081 : vec3<f32> = txVec27;
        let x_2083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2081.xy, x_2081.z);
        u_xlat48.x = x_2083;
        let x_2086 : f32 = u_xlat8.z;
        let x_2088 : f32 = u_xlat48.x;
        let x_2090 : f32 = u_xlat68;
        u_xlat68 = ((x_2086 * x_2088) + x_2090);
        let x_2093 : vec4<f32> = u_xlat6;
        let x_2094 : vec2<f32> = vec2<f32>(x_2093.x, x_2093.y);
        let x_2096 : f32 = u_xlat3.z;
        txVec28 = vec3<f32>(x_2094.x, x_2094.y, x_2096);
        let x_2103 : vec3<f32> = txVec28;
        let x_2105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2103.xy, x_2103.z);
        u_xlat6.x = x_2105;
        let x_2108 : f32 = u_xlat8.w;
        let x_2110 : f32 = u_xlat6.x;
        let x_2112 : f32 = u_xlat68;
        u_xlat66 = ((x_2108 * x_2110) + x_2112);
      }
    }
  } else {
    let x_2116 : vec4<f32> = u_xlat3;
    let x_2117 : vec2<f32> = vec2<f32>(x_2116.x, x_2116.y);
    let x_2119 : f32 = u_xlat3.z;
    txVec29 = vec3<f32>(x_2117.x, x_2117.y, x_2119);
    let x_2126 : vec3<f32> = txVec29;
    let x_2128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2126.xy, x_2126.z);
    u_xlat66 = x_2128;
  }
  let x_2130 : f32 = x_515.x_MainLightShadowParams.x;
  u_xlat3.x = (-(x_2130) + 1.0f);
  let x_2134 : f32 = u_xlat66;
  let x_2136 : f32 = x_515.x_MainLightShadowParams.x;
  let x_2139 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_2134 * x_2136) + x_2139);
  let x_2144 : f32 = u_xlat3.z;
  u_xlatb24 = (0.0f >= x_2144);
  let x_2148 : f32 = u_xlat3.z;
  u_xlatb45 = (x_2148 >= 1.0f);
  let x_2150 : bool = u_xlatb45;
  let x_2151 : bool = u_xlatb24;
  u_xlatb24 = (x_2150 | x_2151);
  let x_2153 : bool = u_xlatb24;
  if (x_2153) {
    x_2154 = 1.0f;
  } else {
    let x_2159 : f32 = u_xlat3.x;
    x_2154 = x_2159;
  }
  let x_2160 : f32 = x_2154;
  u_xlat3.x = x_2160;
  let x_2163 : vec3<f32> = vs_INTERP0;
  let x_2165 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat24 = (x_2163 + -(x_2165));
  let x_2168 : vec3<f32> = u_xlat24;
  let x_2169 : vec3<f32> = u_xlat24;
  u_xlat24.x = dot(x_2168, x_2169);
  let x_2173 : f32 = u_xlat24.x;
  let x_2175 : f32 = x_515.x_MainLightShadowParams.z;
  let x_2178 : f32 = x_515.x_MainLightShadowParams.w;
  u_xlat24.x = ((x_2173 * x_2175) + x_2178);
  let x_2182 : f32 = u_xlat24.x;
  u_xlat24.x = clamp(x_2182, 0.0f, 1.0f);
  let x_2187 : f32 = u_xlat3.x;
  u_xlat45 = (-(x_2187) + 1.0f);
  let x_2191 : f32 = u_xlat24.x;
  let x_2192 : f32 = u_xlat45;
  let x_2195 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_2191 * x_2192) + x_2195);
  let x_2198 : f32 = u_xlat67;
  let x_2201 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat24 = (vec3<f32>(x_2198, x_2198, x_2198) * vec3<f32>(x_2201.x, x_2201.y, x_2201.z));
  let x_2204 : vec3<f32> = u_xlat4;
  let x_2206 : vec4<f32> = u_xlat1;
  u_xlat68 = dot(-(x_2204), vec3<f32>(x_2206.x, x_2206.y, x_2206.z));
  let x_2209 : f32 = u_xlat68;
  let x_2210 : f32 = u_xlat68;
  u_xlat68 = (x_2209 + x_2210);
  let x_2212 : vec4<f32> = u_xlat1;
  let x_2214 : f32 = u_xlat68;
  let x_2218 : vec3<f32> = u_xlat4;
  let x_2220 : vec3<f32> = ((vec3<f32>(x_2212.x, x_2212.y, x_2212.z) * -(vec3<f32>(x_2214, x_2214, x_2214))) + -(x_2218));
  let x_2221 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2220.x, x_2220.y, x_2220.z, x_2221.w);
  let x_2223 : vec4<f32> = u_xlat1;
  let x_2225 : vec3<f32> = u_xlat4;
  u_xlat68 = dot(vec3<f32>(x_2223.x, x_2223.y, x_2223.z), x_2225);
  let x_2227 : f32 = u_xlat68;
  u_xlat68 = clamp(x_2227, 0.0f, 1.0f);
  let x_2229 : f32 = u_xlat68;
  u_xlat68 = (-(x_2229) + 1.0f);
  let x_2232 : f32 = u_xlat68;
  let x_2233 : f32 = u_xlat68;
  u_xlat68 = (x_2232 * x_2233);
  let x_2235 : f32 = u_xlat68;
  let x_2236 : f32 = u_xlat68;
  u_xlat68 = (x_2235 * x_2236);
  let x_2239 : f32 = u_xlat63;
  u_xlat69 = ((-(x_2239) * 0.699999988f) + 1.700000048f);
  let x_2245 : f32 = u_xlat63;
  let x_2246 : f32 = u_xlat69;
  u_xlat63 = (x_2245 * x_2246);
  let x_2248 : f32 = u_xlat63;
  u_xlat63 = (x_2248 * 6.0f);
  let x_2258 : vec4<f32> = u_xlat6;
  let x_2260 : f32 = u_xlat63;
  let x_2261 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2258.x, x_2258.y, x_2258.z), x_2260);
  u_xlat6 = x_2261;
  let x_2263 : f32 = u_xlat6.w;
  u_xlat63 = (x_2263 + -1.0f);
  let x_2266 : f32 = x_359.unity_SpecCube0_HDR.w;
  let x_2267 : f32 = u_xlat63;
  u_xlat63 = ((x_2266 * x_2267) + 1.0f);
  let x_2270 : f32 = u_xlat63;
  u_xlat63 = max(x_2270, 0.0f);
  let x_2272 : f32 = u_xlat63;
  u_xlat63 = log2(x_2272);
  let x_2274 : f32 = u_xlat63;
  let x_2276 : f32 = x_359.unity_SpecCube0_HDR.y;
  u_xlat63 = (x_2274 * x_2276);
  let x_2278 : f32 = u_xlat63;
  u_xlat63 = exp2(x_2278);
  let x_2280 : f32 = u_xlat63;
  let x_2282 : f32 = x_359.unity_SpecCube0_HDR.x;
  u_xlat63 = (x_2280 * x_2282);
  let x_2284 : vec4<f32> = u_xlat6;
  let x_2286 : f32 = u_xlat63;
  let x_2288 : vec3<f32> = (vec3<f32>(x_2284.x, x_2284.y, x_2284.z) * vec3<f32>(x_2286, x_2286, x_2286));
  let x_2289 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2288.x, x_2288.y, x_2288.z, x_2289.w);
  let x_2291 : vec4<f32> = u_xlat2;
  let x_2293 : vec4<f32> = u_xlat2;
  let x_2297 : vec2<f32> = ((vec2<f32>(x_2291.x, x_2291.x) * vec2<f32>(x_2293.x, x_2293.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2298 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2297.x, x_2297.y, x_2298.z, x_2298.w);
  let x_2301 : f32 = u_xlat8.y;
  u_xlat63 = (1.0f / x_2301);
  let x_2303 : vec4<f32> = u_xlat0;
  let x_2306 : f32 = u_xlat64;
  u_xlat29 = (-(vec3<f32>(x_2303.x, x_2303.y, x_2303.z)) + vec3<f32>(x_2306, x_2306, x_2306));
  let x_2309 : f32 = u_xlat68;
  let x_2311 : vec3<f32> = u_xlat29;
  let x_2313 : vec4<f32> = u_xlat0;
  u_xlat29 = ((vec3<f32>(x_2309, x_2309, x_2309) * x_2311) + vec3<f32>(x_2313.x, x_2313.y, x_2313.z));
  let x_2316 : f32 = u_xlat63;
  let x_2318 : vec3<f32> = u_xlat29;
  u_xlat29 = (vec3<f32>(x_2316, x_2316, x_2316) * x_2318);
  let x_2320 : vec4<f32> = u_xlat6;
  let x_2322 : vec3<f32> = u_xlat29;
  let x_2323 : vec3<f32> = (vec3<f32>(x_2320.x, x_2320.y, x_2320.z) * x_2322);
  let x_2324 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2323.x, x_2323.y, x_2323.z, x_2324.w);
  let x_2326 : vec4<f32> = u_xlat5;
  let x_2328 : vec3<f32> = u_xlat7;
  let x_2330 : vec4<f32> = u_xlat6;
  let x_2332 : vec3<f32> = ((vec3<f32>(x_2326.x, x_2326.y, x_2326.z) * x_2328) + vec3<f32>(x_2330.x, x_2330.y, x_2330.z));
  let x_2333 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2332.x, x_2332.y, x_2332.z, x_2333.w);
  let x_2336 : f32 = u_xlat3.x;
  let x_2338 : f32 = x_359.unity_LightData.z;
  u_xlat63 = (x_2336 * x_2338);
  let x_2340 : vec4<f32> = u_xlat1;
  let x_2343 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_2340.x, x_2340.y, x_2340.z), vec3<f32>(x_2343.x, x_2343.y, x_2343.z));
  let x_2346 : f32 = u_xlat64;
  u_xlat64 = clamp(x_2346, 0.0f, 1.0f);
  let x_2348 : f32 = u_xlat63;
  let x_2349 : f32 = u_xlat64;
  u_xlat63 = (x_2348 * x_2349);
  let x_2351 : f32 = u_xlat63;
  let x_2353 : vec3<f32> = u_xlat24;
  let x_2354 : vec3<f32> = (vec3<f32>(x_2351, x_2351, x_2351) * x_2353);
  let x_2355 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2354.x, x_2354.y, x_2354.z, x_2355.w);
  let x_2357 : vec3<f32> = u_xlat4;
  let x_2359 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2361 : vec3<f32> = (x_2357 + vec3<f32>(x_2359.x, x_2359.y, x_2359.z));
  let x_2362 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2361.x, x_2361.y, x_2361.z, x_2362.w);
  let x_2364 : vec4<f32> = u_xlat6;
  let x_2366 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(vec3<f32>(x_2364.x, x_2364.y, x_2364.z), vec3<f32>(x_2366.x, x_2366.y, x_2366.z));
  let x_2369 : f32 = u_xlat63;
  u_xlat63 = max(x_2369, 1.17549435e-37f);
  let x_2372 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_2372);
  let x_2374 : f32 = u_xlat63;
  let x_2376 : vec4<f32> = u_xlat6;
  let x_2378 : vec3<f32> = (vec3<f32>(x_2374, x_2374, x_2374) * vec3<f32>(x_2376.x, x_2376.y, x_2376.z));
  let x_2379 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2378.x, x_2378.y, x_2378.z, x_2379.w);
  let x_2381 : vec4<f32> = u_xlat1;
  let x_2383 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(vec3<f32>(x_2381.x, x_2381.y, x_2381.z), vec3<f32>(x_2383.x, x_2383.y, x_2383.z));
  let x_2386 : f32 = u_xlat63;
  u_xlat63 = clamp(x_2386, 0.0f, 1.0f);
  let x_2389 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2391 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_2389.x, x_2389.y, x_2389.z), vec3<f32>(x_2391.x, x_2391.y, x_2391.z));
  let x_2394 : f32 = u_xlat64;
  u_xlat64 = clamp(x_2394, 0.0f, 1.0f);
  let x_2396 : f32 = u_xlat63;
  let x_2397 : f32 = u_xlat63;
  u_xlat63 = (x_2396 * x_2397);
  let x_2399 : f32 = u_xlat63;
  let x_2401 : f32 = u_xlat8.x;
  u_xlat63 = ((x_2399 * x_2401) + 1.000010014f);
  let x_2405 : f32 = u_xlat64;
  let x_2406 : f32 = u_xlat64;
  u_xlat64 = (x_2405 * x_2406);
  let x_2408 : f32 = u_xlat63;
  let x_2409 : f32 = u_xlat63;
  u_xlat63 = (x_2408 * x_2409);
  let x_2411 : f32 = u_xlat64;
  u_xlat64 = max(x_2411, 0.100000001f);
  let x_2414 : f32 = u_xlat63;
  let x_2415 : f32 = u_xlat64;
  u_xlat63 = (x_2414 * x_2415);
  let x_2417 : f32 = u_xlat65;
  let x_2418 : f32 = u_xlat63;
  u_xlat63 = (x_2417 * x_2418);
  let x_2420 : f32 = u_xlat23;
  let x_2421 : f32 = u_xlat63;
  u_xlat63 = (x_2420 / x_2421);
  let x_2423 : vec4<f32> = u_xlat0;
  let x_2425 : f32 = u_xlat63;
  let x_2428 : vec3<f32> = u_xlat7;
  let x_2429 : vec3<f32> = ((vec3<f32>(x_2423.x, x_2423.y, x_2423.z) * vec3<f32>(x_2425, x_2425, x_2425)) + x_2428);
  let x_2430 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2429.x, x_2429.y, x_2429.z, x_2430.w);
  let x_2432 : vec4<f32> = u_xlat3;
  let x_2434 : vec4<f32> = u_xlat6;
  let x_2436 : vec3<f32> = (vec3<f32>(x_2432.x, x_2432.y, x_2432.z) * vec3<f32>(x_2434.x, x_2434.y, x_2434.z));
  let x_2437 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2436.x, x_2436.y, x_2436.z, x_2437.w);
  let x_2440 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2442 : f32 = x_359.unity_LightData.y;
  u_xlat63 = min(x_2440, x_2442);
  let x_2444 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_2444));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2456 : u32 = u_xlatu_loop_1;
    let x_2457 : u32 = u_xlatu63;
    if ((x_2456 < x_2457)) {
    } else {
      break;
    }
    let x_2460 : u32 = u_xlatu_loop_1;
    u_xlatu2 = (x_2460 >> 2u);
    let x_2463 : u32 = u_xlatu_loop_1;
    u_xlati66 = bitcast<i32>((x_2463 & 3u));
    let x_2466 : u32 = u_xlatu2;
    let x_2469 : vec4<f32> = x_359.unity_LightIndices[bitcast<i32>(x_2466)];
    let x_2479 : i32 = u_xlati66;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2484 : vec4<u32> = indexable[x_2479];
    u_xlat2.x = dot(x_2469, bitcast<vec4<f32>>(x_2484));
    let x_2490 : f32 = u_xlat2.x;
    u_xlati2 = i32(x_2490);
    let x_2492 : vec3<f32> = vs_INTERP0;
    let x_2504 : i32 = u_xlati2;
    let x_2506 : vec4<f32> = x_2503.x_AdditionalLightsPosition[x_2504];
    let x_2509 : i32 = u_xlati2;
    let x_2511 : vec4<f32> = x_2503.x_AdditionalLightsPosition[x_2509];
    u_xlat29 = ((-(x_2492) * vec3<f32>(x_2506.w, x_2506.w, x_2506.w)) + vec3<f32>(x_2511.x, x_2511.y, x_2511.z));
    let x_2514 : vec3<f32> = u_xlat29;
    let x_2515 : vec3<f32> = u_xlat29;
    u_xlat66 = dot(x_2514, x_2515);
    let x_2517 : f32 = u_xlat66;
    u_xlat66 = max(x_2517, 6.10351562e-05f);
    let x_2520 : f32 = u_xlat66;
    u_xlat68 = inverseSqrt(x_2520);
    let x_2522 : f32 = u_xlat68;
    let x_2524 : vec3<f32> = u_xlat29;
    let x_2525 : vec3<f32> = (vec3<f32>(x_2522, x_2522, x_2522) * x_2524);
    let x_2526 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2525.x, x_2525.y, x_2525.z, x_2526.w);
    let x_2528 : f32 = u_xlat66;
    u_xlat69 = (1.0f / x_2528);
    let x_2530 : f32 = u_xlat66;
    let x_2531 : i32 = u_xlati2;
    let x_2533 : f32 = x_2503.x_AdditionalLightsAttenuation[x_2531].x;
    u_xlat66 = (x_2530 * x_2533);
    let x_2535 : f32 = u_xlat66;
    let x_2537 : f32 = u_xlat66;
    u_xlat66 = ((-(x_2535) * x_2537) + 1.0f);
    let x_2540 : f32 = u_xlat66;
    u_xlat66 = max(x_2540, 0.0f);
    let x_2542 : f32 = u_xlat66;
    let x_2543 : f32 = u_xlat66;
    u_xlat66 = (x_2542 * x_2543);
    let x_2545 : f32 = u_xlat66;
    let x_2546 : f32 = u_xlat69;
    u_xlat66 = (x_2545 * x_2546);
    let x_2548 : i32 = u_xlati2;
    let x_2550 : vec4<f32> = x_2503.x_AdditionalLightsSpotDir[x_2548];
    let x_2552 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_2550.x, x_2550.y, x_2550.z), vec3<f32>(x_2552.x, x_2552.y, x_2552.z));
    let x_2555 : f32 = u_xlat69;
    let x_2556 : i32 = u_xlati2;
    let x_2558 : f32 = x_2503.x_AdditionalLightsAttenuation[x_2556].z;
    let x_2560 : i32 = u_xlati2;
    let x_2562 : f32 = x_2503.x_AdditionalLightsAttenuation[x_2560].w;
    u_xlat69 = ((x_2555 * x_2558) + x_2562);
    let x_2564 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2564, 0.0f, 1.0f);
    let x_2566 : f32 = u_xlat69;
    let x_2567 : f32 = u_xlat69;
    u_xlat69 = (x_2566 * x_2567);
    let x_2569 : f32 = u_xlat66;
    let x_2570 : f32 = u_xlat69;
    u_xlat66 = (x_2569 * x_2570);
    let x_2572 : f32 = u_xlat67;
    let x_2574 : i32 = u_xlati2;
    let x_2576 : vec4<f32> = x_2503.x_AdditionalLightsColor[x_2574];
    let x_2578 : vec3<f32> = (vec3<f32>(x_2572, x_2572, x_2572) * vec3<f32>(x_2576.x, x_2576.y, x_2576.z));
    let x_2579 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2578.x, x_2578.y, x_2578.z, x_2579.w);
    let x_2581 : vec4<f32> = u_xlat1;
    let x_2583 : vec4<f32> = u_xlat9;
    u_xlat2.x = dot(vec3<f32>(x_2581.x, x_2581.y, x_2581.z), vec3<f32>(x_2583.x, x_2583.y, x_2583.z));
    let x_2588 : f32 = u_xlat2.x;
    u_xlat2.x = clamp(x_2588, 0.0f, 1.0f);
    let x_2592 : f32 = u_xlat2.x;
    let x_2593 : f32 = u_xlat66;
    u_xlat2.x = (x_2592 * x_2593);
    let x_2596 : vec4<f32> = u_xlat2;
    let x_2598 : vec4<f32> = u_xlat10;
    let x_2600 : vec3<f32> = (vec3<f32>(x_2596.x, x_2596.x, x_2596.x) * vec3<f32>(x_2598.x, x_2598.y, x_2598.z));
    let x_2601 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2600.x, x_2600.y, x_2600.z, x_2601.w);
    let x_2603 : vec3<f32> = u_xlat29;
    let x_2604 : f32 = u_xlat68;
    let x_2607 : vec3<f32> = u_xlat4;
    u_xlat29 = ((x_2603 * vec3<f32>(x_2604, x_2604, x_2604)) + x_2607);
    let x_2609 : vec3<f32> = u_xlat29;
    let x_2610 : vec3<f32> = u_xlat29;
    u_xlat2.x = dot(x_2609, x_2610);
    let x_2614 : f32 = u_xlat2.x;
    u_xlat2.x = max(x_2614, 1.17549435e-37f);
    let x_2618 : f32 = u_xlat2.x;
    u_xlat2.x = inverseSqrt(x_2618);
    let x_2621 : vec4<f32> = u_xlat2;
    let x_2623 : vec3<f32> = u_xlat29;
    u_xlat29 = (vec3<f32>(x_2621.x, x_2621.x, x_2621.x) * x_2623);
    let x_2625 : vec4<f32> = u_xlat1;
    let x_2627 : vec3<f32> = u_xlat29;
    u_xlat2.x = dot(vec3<f32>(x_2625.x, x_2625.y, x_2625.z), x_2627);
    let x_2631 : f32 = u_xlat2.x;
    u_xlat2.x = clamp(x_2631, 0.0f, 1.0f);
    let x_2634 : vec4<f32> = u_xlat9;
    let x_2636 : vec3<f32> = u_xlat29;
    u_xlat66 = dot(vec3<f32>(x_2634.x, x_2634.y, x_2634.z), x_2636);
    let x_2638 : f32 = u_xlat66;
    u_xlat66 = clamp(x_2638, 0.0f, 1.0f);
    let x_2641 : f32 = u_xlat2.x;
    let x_2643 : f32 = u_xlat2.x;
    u_xlat2.x = (x_2641 * x_2643);
    let x_2647 : f32 = u_xlat2.x;
    let x_2649 : f32 = u_xlat8.x;
    u_xlat2.x = ((x_2647 * x_2649) + 1.000010014f);
    let x_2653 : f32 = u_xlat66;
    let x_2654 : f32 = u_xlat66;
    u_xlat66 = (x_2653 * x_2654);
    let x_2657 : f32 = u_xlat2.x;
    let x_2659 : f32 = u_xlat2.x;
    u_xlat2.x = (x_2657 * x_2659);
    let x_2662 : f32 = u_xlat66;
    u_xlat66 = max(x_2662, 0.100000001f);
    let x_2665 : f32 = u_xlat2.x;
    let x_2666 : f32 = u_xlat66;
    u_xlat2.x = (x_2665 * x_2666);
    let x_2669 : f32 = u_xlat65;
    let x_2671 : f32 = u_xlat2.x;
    u_xlat2.x = (x_2669 * x_2671);
    let x_2674 : f32 = u_xlat23;
    let x_2676 : f32 = u_xlat2.x;
    u_xlat2.x = (x_2674 / x_2676);
    let x_2679 : vec4<f32> = u_xlat0;
    let x_2681 : vec4<f32> = u_xlat2;
    let x_2684 : vec3<f32> = u_xlat7;
    u_xlat29 = ((vec3<f32>(x_2679.x, x_2679.y, x_2679.z) * vec3<f32>(x_2681.x, x_2681.x, x_2681.x)) + x_2684);
    let x_2686 : vec3<f32> = u_xlat29;
    let x_2687 : vec4<f32> = u_xlat10;
    let x_2690 : vec4<f32> = u_xlat6;
    let x_2692 : vec3<f32> = ((x_2686 * vec3<f32>(x_2687.x, x_2687.y, x_2687.z)) + vec3<f32>(x_2690.x, x_2690.y, x_2690.z));
    let x_2693 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2692.x, x_2692.y, x_2692.z, x_2693.w);

    continuing {
      let x_2695 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2695 + bitcast<u32>(1i));
    }
  }
  let x_2697 : vec4<f32> = u_xlat5;
  let x_2699 : f32 = u_xlat44;
  let x_2702 : vec4<f32> = u_xlat3;
  let x_2704 : vec3<f32> = ((vec3<f32>(x_2697.x, x_2697.y, x_2697.z) * vec3<f32>(x_2699, x_2699, x_2699)) + vec3<f32>(x_2702.x, x_2702.y, x_2702.z));
  let x_2705 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2704.x, x_2704.y, x_2704.z, x_2705.w);
  let x_2709 : vec4<f32> = u_xlat6;
  let x_2711 : vec4<f32> = u_xlat0;
  let x_2713 : vec3<f32> = (vec3<f32>(x_2709.x, x_2709.y, x_2709.z) + vec3<f32>(x_2711.x, x_2711.y, x_2711.z));
  let x_2714 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2713.x, x_2713.y, x_2713.z, x_2714.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

