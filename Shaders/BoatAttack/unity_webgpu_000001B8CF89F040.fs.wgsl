struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_25A083BC_TexelSize : vec4<f32>,
  Texture2D_6EEDD32E_TexelSize : vec4<f32>,
  Texture2D_E9EC22CC_TexelSize : vec4<f32>,
  x_Hue : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(5) var Texture2D_25A083BC : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_25A083BC : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(1) @binding(4) var<uniform> x_190 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_E9EC22CC : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_E9EC22CC : sampler;

@group(0) @binding(6) var Texture2D_6EEDD32E : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_6EEDD32E : sampler;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_359 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_503 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2554 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb1 : bool;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb21 : bool;
  var u_xlat21 : f32;
  var u_xlat42 : f32;
  var x_146 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlatb63 : bool;
  var x_211 : f32;
  var x_220 : f32;
  var u_xlat63 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlat64 : f32;
  var u_xlat4 : vec4<f32>;
  var x_487 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu63 : u32;
  var u_xlati63 : i32;
  var u_xlat65 : f32;
  var u_xlat23 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat68 : f32;
  var u_xlat44 : f32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb6 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var x_2186 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat46 : f32;
  var u_xlatu64 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(Texture2D_25A083BC, samplerTexture2D_25A083BC, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_58 : f32 = u_xlat0.y;
  let x_61 : f32 = u_xlat0.z;
  u_xlatb1 = (x_58 >= x_61);
  let x_64 : bool = u_xlatb1;
  u_xlat1.x = select(0.0f, 1.0f, x_64);
  let x_69 : vec4<f32> = u_xlat0;
  let x_70 : vec2<f32> = vec2<f32>(x_69.z, x_69.y);
  let x_71 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_70.x, x_70.y, x_71.z, x_71.w);
  u_xlat2.z = -1.0f;
  u_xlat2.w = 0.666666687f;
  let x_78 : vec4<f32> = u_xlat0;
  let x_80 : vec4<f32> = u_xlat2;
  let x_83 : vec2<f32> = (vec2<f32>(x_78.y, x_78.z) + -(vec2<f32>(x_80.x, x_80.y)));
  let x_84 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  u_xlat3.z = 1.0f;
  u_xlat3.w = -1.0f;
  let x_88 : vec4<f32> = u_xlat1;
  let x_90 : vec4<f32> = u_xlat3;
  let x_92 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec4<f32>(x_88.x, x_88.x, x_88.x, x_88.x) * x_90) + x_92);
  let x_96 : f32 = u_xlat0.x;
  let x_98 : f32 = u_xlat1.x;
  u_xlatb21 = (x_96 >= x_98);
  let x_101 : bool = u_xlatb21;
  u_xlat21 = select(0.0f, 1.0f, x_101);
  let x_103 : vec4<f32> = u_xlat1;
  let x_104 : vec3<f32> = vec3<f32>(x_103.x, x_103.y, x_103.w);
  let x_105 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_104.x, x_104.y, x_104.z, x_105.w);
  let x_108 : f32 = u_xlat0.x;
  u_xlat2.w = x_108;
  let x_110 : vec4<f32> = u_xlat2;
  let x_111 : vec3<f32> = vec3<f32>(x_110.w, x_110.y, x_110.x);
  let x_112 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_111.x, x_111.y, x_112.z, x_111.z);
  let x_114 : vec4<f32> = u_xlat2;
  let x_116 : vec4<f32> = u_xlat1;
  u_xlat1 = (-(x_114) + x_116);
  let x_118 : f32 = u_xlat21;
  let x_120 : vec4<f32> = u_xlat1;
  let x_122 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec4<f32>(x_118, x_118, x_118, x_118) * x_120) + x_122);
  let x_125 : f32 = u_xlat1.y;
  let x_127 : f32 = u_xlat1.w;
  u_xlat0.x = min(x_125, x_127);
  let x_131 : f32 = u_xlat0.x;
  let x_134 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_131) + x_134);
  let x_138 : f32 = u_xlat0.x;
  u_xlatb21 = (x_138 == 0.0f);
  let x_142 : f32 = u_xlat1.x;
  u_xlat42 = (x_142 + 1.00000001e-10f);
  let x_145 : bool = u_xlatb21;
  if (x_145) {
    let x_150 : f32 = u_xlat1.x;
    x_146 = x_150;
  } else {
    let x_152 : f32 = u_xlat42;
    x_146 = x_152;
  }
  let x_153 : f32 = x_146;
  u_xlat21 = x_153;
  let x_155 : f32 = u_xlat1.y;
  let x_158 : f32 = u_xlat1.w;
  u_xlat1.x = (-(x_155) + x_158);
  let x_164 : f32 = u_xlat0.x;
  u_xlat22.x = ((x_164 * 6.0f) + 1.00000001e-10f);
  let x_170 : f32 = u_xlat1.x;
  let x_172 : f32 = u_xlat22.x;
  u_xlat1.x = (x_170 / x_172);
  let x_176 : f32 = u_xlat1.x;
  let x_178 : f32 = u_xlat1.z;
  u_xlat1.x = (x_176 + x_178);
  let x_182 : f32 = u_xlat0.x;
  let x_183 : f32 = u_xlat42;
  u_xlat0.x = (x_182 / x_183);
  let x_187 : f32 = u_xlat0.w;
  let x_193 : f32 = x_190.x_Hue;
  let x_196 : f32 = u_xlat1.x;
  u_xlat42 = ((x_187 * x_193) + abs(x_196));
  let x_200 : f32 = u_xlat42;
  u_xlatb63 = (x_200 < 0.0f);
  let x_202 : f32 = u_xlat42;
  u_xlatb1 = (1.0f < x_202);
  let x_204 : f32 = u_xlat42;
  let x_207 : vec2<f32> = (vec2<f32>(x_204, x_204) + vec2<f32>(1.0f, -1.0f));
  let x_208 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_207.x, x_207.y, x_208.z);
  let x_210 : bool = u_xlatb1;
  if (x_210) {
    let x_215 : f32 = u_xlat22.y;
    x_211 = x_215;
  } else {
    let x_217 : f32 = u_xlat42;
    x_211 = x_217;
  }
  let x_218 : f32 = x_211;
  u_xlat42 = x_218;
  let x_219 : bool = u_xlatb63;
  if (x_219) {
    let x_224 : f32 = u_xlat22.x;
    x_220 = x_224;
  } else {
    let x_226 : f32 = u_xlat42;
    x_220 = x_226;
  }
  let x_227 : f32 = x_220;
  u_xlat42 = x_227;
  let x_228 : f32 = u_xlat42;
  let x_232 : vec3<f32> = (vec3<f32>(x_228, x_228, x_228) + vec3<f32>(1.0f, 0.666666687f, 0.333333343f));
  let x_233 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_232.x, x_232.y, x_232.z, x_233.w);
  let x_235 : vec4<f32> = u_xlat1;
  let x_237 : vec3<f32> = fract(vec3<f32>(x_235.x, x_235.y, x_235.z));
  let x_238 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_237.x, x_237.y, x_237.z, x_238.w);
  let x_240 : vec4<f32> = u_xlat1;
  let x_246 : vec3<f32> = ((vec3<f32>(x_240.x, x_240.y, x_240.z) * vec3<f32>(6.0f, 6.0f, 6.0f)) + vec3<f32>(-3.0f, -3.0f, -3.0f));
  let x_247 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_249 : vec4<f32> = u_xlat1;
  let x_253 : vec3<f32> = (abs(vec3<f32>(x_249.x, x_249.y, x_249.z)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_254 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_253.x, x_253.y, x_253.z, x_254.w);
  let x_256 : vec4<f32> = u_xlat1;
  let x_260 : vec3<f32> = clamp(vec3<f32>(x_256.x, x_256.y, x_256.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_261 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec4<f32> = u_xlat1;
  let x_265 : vec3<f32> = (vec3<f32>(x_263.x, x_263.y, x_263.z) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_266 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_265.x, x_265.y, x_265.z, x_266.w);
  let x_268 : vec4<f32> = u_xlat0;
  let x_270 : vec4<f32> = u_xlat1;
  let x_274 : vec3<f32> = ((vec3<f32>(x_268.x, x_268.x, x_268.x) * vec3<f32>(x_270.x, x_270.y, x_270.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_275 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_274.x, x_275.y, x_274.y, x_274.z);
  let x_277 : vec4<f32> = u_xlat0;
  let x_279 : f32 = u_xlat21;
  let x_281 : vec3<f32> = (vec3<f32>(x_277.x, x_277.z, x_277.w) * vec3<f32>(x_279, x_279, x_279));
  let x_282 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_284 : vec4<f32> = u_xlat0;
  let x_288 : vec3<f32> = clamp(vec3<f32>(x_284.x, x_284.y, x_284.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_289 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_288.x, x_288.y, x_288.z, x_289.w);
  let x_296 : vec4<f32> = vs_INTERP3;
  let x_299 : f32 = x_44.x_GlobalMipBias.x;
  let x_300 : vec4<f32> = textureSampleBias(Texture2D_E9EC22CC, samplerTexture2D_E9EC22CC, vec2<f32>(x_296.x, x_296.y), x_299);
  let x_301 : vec3<f32> = vec3<f32>(x_300.x, x_300.y, x_300.w);
  let x_302 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_301.x, x_301.y, x_301.z, x_302.w);
  let x_305 : f32 = u_xlat1.x;
  let x_307 : f32 = u_xlat1.z;
  u_xlat1.x = (x_305 * x_307);
  let x_310 : vec4<f32> = u_xlat1;
  let x_316 : vec2<f32> = ((vec2<f32>(x_310.x, x_310.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_317 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_316.x, x_316.y, x_317.z, x_317.w);
  let x_320 : vec4<f32> = u_xlat1;
  let x_322 : vec4<f32> = u_xlat1;
  u_xlat63 = dot(vec2<f32>(x_320.x, x_320.y), vec2<f32>(x_322.x, x_322.y));
  let x_325 : f32 = u_xlat63;
  u_xlat63 = min(x_325, 1.0f);
  let x_327 : f32 = u_xlat63;
  u_xlat63 = (-(x_327) + 1.0f);
  let x_330 : f32 = u_xlat63;
  u_xlat63 = sqrt(x_330);
  let x_332 : f32 = u_xlat63;
  u_xlat63 = max(x_332, 1.00000002e-16f);
  let x_340 : vec4<f32> = vs_INTERP3;
  let x_343 : f32 = x_44.x_GlobalMipBias.x;
  let x_344 : vec4<f32> = textureSampleBias(Texture2D_6EEDD32E, samplerTexture2D_6EEDD32E, vec2<f32>(x_340.x, x_340.y), x_343);
  let x_345 : vec3<f32> = vec3<f32>(x_344.x, x_344.w, x_344.y);
  let x_346 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_345.x, x_345.y, x_345.z, x_346.w);
  let x_353 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_353);
  let x_361 : f32 = x_359.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_361 >= 0.0f);
  let x_367 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_367);
  let x_371 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_371);
  let x_375 : f32 = u_xlat43.y;
  let x_377 : f32 = u_xlat43.x;
  u_xlat43.x = (x_375 * x_377);
  let x_382 : vec3<f32> = vs_INTERP1;
  let x_384 : vec4<f32> = vs_INTERP2;
  let x_386 : vec3<f32> = (vec3<f32>(x_382.z, x_382.x, x_382.y) * vec3<f32>(x_384.y, x_384.z, x_384.x));
  let x_387 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_389 : vec3<f32> = vs_INTERP1;
  let x_391 : vec4<f32> = vs_INTERP2;
  let x_394 : vec4<f32> = u_xlat3;
  let x_397 : vec3<f32> = ((vec3<f32>(x_389.y, x_389.z, x_389.x) * vec3<f32>(x_391.z, x_391.x, x_391.y)) + -(vec3<f32>(x_394.x, x_394.y, x_394.z)));
  let x_398 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_397.x, x_397.y, x_397.z, x_398.w);
  let x_400 : vec2<f32> = u_xlat43;
  let x_402 : vec4<f32> = u_xlat3;
  let x_404 : vec3<f32> = (vec3<f32>(x_400.x, x_400.x, x_400.x) * vec3<f32>(x_402.x, x_402.y, x_402.z));
  let x_405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_407 : vec4<f32> = u_xlat1;
  let x_409 : vec4<f32> = u_xlat3;
  u_xlat22 = (vec3<f32>(x_407.y, x_407.y, x_407.y) * vec3<f32>(x_409.x, x_409.y, x_409.z));
  let x_412 : vec4<f32> = u_xlat1;
  let x_414 : vec4<f32> = vs_INTERP2;
  let x_417 : vec3<f32> = u_xlat22;
  let x_418 : vec3<f32> = ((vec3<f32>(x_412.x, x_412.x, x_412.x) * vec3<f32>(x_414.x, x_414.y, x_414.z)) + x_417);
  let x_419 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_418.x, x_418.y, x_418.z, x_419.w);
  let x_421 : f32 = u_xlat63;
  let x_423 : vec3<f32> = vs_INTERP1;
  let x_425 : vec4<f32> = u_xlat1;
  let x_427 : vec3<f32> = ((vec3<f32>(x_421, x_421, x_421) * x_423) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat1;
  let x_432 : vec4<f32> = u_xlat1;
  u_xlat63 = dot(vec3<f32>(x_430.x, x_430.y, x_430.z), vec3<f32>(x_432.x, x_432.y, x_432.z));
  let x_435 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_435);
  let x_437 : f32 = u_xlat63;
  let x_439 : vec4<f32> = u_xlat1;
  let x_441 : vec3<f32> = (vec3<f32>(x_437, x_437, x_437) * vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_446 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb63 = (x_446 == 0.0f);
  let x_449 : vec3<f32> = vs_INTERP0;
  let x_454 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_455 : vec3<f32> = (-(x_449) + x_454);
  let x_456 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_455.x, x_455.y, x_455.z, x_456.w);
  let x_459 : vec4<f32> = u_xlat3;
  let x_461 : vec4<f32> = u_xlat3;
  u_xlat64 = dot(vec3<f32>(x_459.x, x_459.y, x_459.z), vec3<f32>(x_461.x, x_461.y, x_461.z));
  let x_464 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_464);
  let x_466 : f32 = u_xlat64;
  let x_468 : vec4<f32> = u_xlat3;
  let x_470 : vec3<f32> = (vec3<f32>(x_466, x_466, x_466) * vec3<f32>(x_468.x, x_468.y, x_468.z));
  let x_471 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_470.x, x_470.y, x_470.z, x_471.w);
  let x_477 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_477;
  let x_480 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_480;
  let x_484 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_484;
  let x_486 : bool = u_xlatb63;
  if (x_486) {
    let x_490 : vec4<f32> = u_xlat3;
    x_487 = vec3<f32>(x_490.x, x_490.y, x_490.z);
  } else {
    let x_493 : vec4<f32> = u_xlat4;
    x_487 = vec3<f32>(x_493.x, x_493.y, x_493.z);
  }
  let x_495 : vec3<f32> = x_487;
  let x_496 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_495.x, x_495.y, x_495.z, x_496.w);
  let x_498 : vec3<f32> = vs_INTERP0;
  let x_506 : vec4<f32> = x_503.x_CascadeShadowSplitSpheres0;
  let x_509 : vec3<f32> = (x_498 + -(vec3<f32>(x_506.x, x_506.y, x_506.z)));
  let x_510 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_509.x, x_509.y, x_509.z, x_510.w);
  let x_513 : vec3<f32> = vs_INTERP0;
  let x_515 : vec4<f32> = x_503.x_CascadeShadowSplitSpheres1;
  let x_518 : vec3<f32> = (x_513 + -(vec3<f32>(x_515.x, x_515.y, x_515.z)));
  let x_519 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_518.x, x_518.y, x_518.z, x_519.w);
  let x_522 : vec3<f32> = vs_INTERP0;
  let x_524 : vec4<f32> = x_503.x_CascadeShadowSplitSpheres2;
  let x_527 : vec3<f32> = (x_522 + -(vec3<f32>(x_524.x, x_524.y, x_524.z)));
  let x_528 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_527.x, x_527.y, x_527.z, x_528.w);
  let x_531 : vec3<f32> = vs_INTERP0;
  let x_534 : vec4<f32> = x_503.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_531 + -(vec3<f32>(x_534.x, x_534.y, x_534.z)));
  let x_538 : vec4<f32> = u_xlat4;
  let x_540 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_538.x, x_538.y, x_538.z), vec3<f32>(x_540.x, x_540.y, x_540.z));
  let x_544 : vec4<f32> = u_xlat5;
  let x_546 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_544.x, x_544.y, x_544.z), vec3<f32>(x_546.x, x_546.y, x_546.z));
  let x_550 : vec4<f32> = u_xlat6;
  let x_552 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_550.x, x_550.y, x_550.z), vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_556 : vec3<f32> = u_xlat7;
  let x_557 : vec3<f32> = u_xlat7;
  u_xlat4.w = dot(x_556, x_557);
  let x_563 : vec4<f32> = u_xlat4;
  let x_566 : vec4<f32> = x_503.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_563 < x_566);
  let x_569 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_569);
  let x_573 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_573);
  let x_577 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_577);
  let x_581 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_581);
  let x_585 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_585);
  let x_590 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_590);
  let x_594 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_594);
  let x_597 : vec4<f32> = u_xlat4;
  let x_599 : vec4<f32> = u_xlat5;
  let x_601 : vec3<f32> = (vec3<f32>(x_597.x, x_597.y, x_597.z) + vec3<f32>(x_599.y, x_599.z, x_599.w));
  let x_602 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_601.x, x_601.y, x_601.z, x_602.w);
  let x_604 : vec4<f32> = u_xlat4;
  let x_607 : vec3<f32> = max(vec3<f32>(x_604.x, x_604.y, x_604.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_608 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_608.x, x_607.x, x_607.y, x_607.z);
  let x_610 : vec4<f32> = u_xlat5;
  u_xlat63 = dot(x_610, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_615 : f32 = u_xlat63;
  u_xlat63 = (-(x_615) + 4.0f);
  let x_620 : f32 = u_xlat63;
  u_xlatu63 = u32(x_620);
  let x_624 : u32 = u_xlatu63;
  u_xlati63 = (bitcast<i32>(x_624) << bitcast<u32>(2i));
  let x_627 : vec3<f32> = vs_INTERP0;
  let x_629 : i32 = u_xlati63;
  let x_632 : i32 = u_xlati63;
  let x_636 : vec4<f32> = x_503.x_MainLightWorldToShadow[((x_629 + 1i) / 4i)][((x_632 + 1i) % 4i)];
  let x_638 : vec3<f32> = (vec3<f32>(x_627.y, x_627.y, x_627.y) * vec3<f32>(x_636.x, x_636.y, x_636.z));
  let x_639 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_638.x, x_638.y, x_638.z, x_639.w);
  let x_641 : i32 = u_xlati63;
  let x_643 : i32 = u_xlati63;
  let x_646 : vec4<f32> = x_503.x_MainLightWorldToShadow[(x_641 / 4i)][(x_643 % 4i)];
  let x_648 : vec3<f32> = vs_INTERP0;
  let x_651 : vec4<f32> = u_xlat4;
  let x_653 : vec3<f32> = ((vec3<f32>(x_646.x, x_646.y, x_646.z) * vec3<f32>(x_648.x, x_648.x, x_648.x)) + vec3<f32>(x_651.x, x_651.y, x_651.z));
  let x_654 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_653.x, x_653.y, x_653.z, x_654.w);
  let x_656 : i32 = u_xlati63;
  let x_659 : i32 = u_xlati63;
  let x_663 : vec4<f32> = x_503.x_MainLightWorldToShadow[((x_656 + 2i) / 4i)][((x_659 + 2i) % 4i)];
  let x_665 : vec3<f32> = vs_INTERP0;
  let x_668 : vec4<f32> = u_xlat4;
  let x_670 : vec3<f32> = ((vec3<f32>(x_663.x, x_663.y, x_663.z) * vec3<f32>(x_665.z, x_665.z, x_665.z)) + vec3<f32>(x_668.x, x_668.y, x_668.z));
  let x_671 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_670.x, x_670.y, x_670.z, x_671.w);
  let x_673 : vec4<f32> = u_xlat4;
  let x_675 : i32 = u_xlati63;
  let x_678 : i32 = u_xlati63;
  let x_682 : vec4<f32> = x_503.x_MainLightWorldToShadow[((x_675 + 3i) / 4i)][((x_678 + 3i) % 4i)];
  let x_684 : vec3<f32> = (vec3<f32>(x_673.x, x_673.y, x_673.z) + vec3<f32>(x_682.x, x_682.y, x_682.z));
  let x_685 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_684.x, x_684.y, x_684.z, x_685.w);
  let x_688 : f32 = vs_INTERP0.y;
  let x_690 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat63 = (x_688 * x_690);
  let x_693 : f32 = x_44.unity_MatrixV[0i].z;
  let x_695 : f32 = vs_INTERP0.x;
  let x_697 : f32 = u_xlat63;
  u_xlat63 = ((x_693 * x_695) + x_697);
  let x_700 : f32 = x_44.unity_MatrixV[2i].z;
  let x_702 : f32 = vs_INTERP0.z;
  let x_704 : f32 = u_xlat63;
  u_xlat63 = ((x_700 * x_702) + x_704);
  let x_706 : f32 = u_xlat63;
  let x_708 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat63 = (x_706 + x_708);
  let x_710 : f32 = u_xlat63;
  let x_714 : f32 = x_44.x_ProjectionParams.y;
  u_xlat63 = (-(x_710) + -(x_714));
  let x_717 : f32 = u_xlat63;
  u_xlat63 = max(x_717, 0.0f);
  let x_719 : f32 = u_xlat63;
  let x_722 : f32 = x_44.unity_FogParams.x;
  u_xlat63 = (x_719 * x_722);
  let x_731 : vec2<f32> = vs_INTERP4;
  let x_733 : f32 = x_44.x_GlobalMipBias.x;
  let x_734 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_731, x_733);
  u_xlat5 = x_734;
  let x_739 : vec2<f32> = vs_INTERP4;
  let x_741 : f32 = x_44.x_GlobalMipBias.x;
  let x_742 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_739, x_741);
  let x_743 : vec3<f32> = vec3<f32>(x_742.x, x_742.y, x_742.z);
  let x_744 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_743.x, x_743.y, x_743.z, x_744.w);
  let x_746 : vec4<f32> = u_xlat5;
  let x_750 : vec3<f32> = (vec3<f32>(x_746.x, x_746.y, x_746.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_751 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_750.x, x_750.y, x_750.z, x_751.w);
  let x_753 : vec4<f32> = u_xlat1;
  let x_755 : vec4<f32> = u_xlat5;
  u_xlat64 = dot(vec3<f32>(x_753.x, x_753.y, x_753.z), vec3<f32>(x_755.x, x_755.y, x_755.z));
  let x_758 : f32 = u_xlat64;
  u_xlat64 = (x_758 + 0.5f);
  let x_761 : f32 = u_xlat64;
  let x_763 : vec4<f32> = u_xlat6;
  let x_765 : vec3<f32> = (vec3<f32>(x_761, x_761, x_761) * vec3<f32>(x_763.x, x_763.y, x_763.z));
  let x_766 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_765.x, x_765.y, x_765.z, x_766.w);
  let x_769 : f32 = u_xlat5.w;
  u_xlat64 = max(x_769, 0.0001f);
  let x_772 : vec4<f32> = u_xlat5;
  let x_774 : f32 = u_xlat64;
  let x_776 : vec3<f32> = (vec3<f32>(x_772.x, x_772.y, x_772.z) / vec3<f32>(x_774, x_774, x_774));
  let x_777 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_776.x, x_776.y, x_776.z, x_777.w);
  let x_781 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_782 : vec2<f32> = vec2<f32>(x_781.x, x_781.y);
  let x_786 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_782.x, x_782.y));
  let x_787 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_786.x, x_786.y, x_787.z, x_787.w);
  let x_789 : vec4<f32> = u_xlat6;
  let x_791 : vec4<f32> = hlslcc_FragCoord;
  let x_793 : vec2<f32> = (vec2<f32>(x_789.x, x_789.y) * vec2<f32>(x_791.x, x_791.y));
  let x_794 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_793.x, x_793.y, x_794.z, x_794.w);
  let x_797 : f32 = u_xlat6.y;
  let x_800 : f32 = x_44.x_ScaleBiasRt.x;
  let x_803 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat64 = ((x_797 * x_800) + x_803);
  let x_805 : f32 = u_xlat64;
  u_xlat6.z = (-(x_805) + 1.0f);
  let x_809 : vec4<f32> = u_xlat2;
  let x_810 : vec2<f32> = vec2<f32>(x_809.x, x_809.y);
  let x_811 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_810.x, x_810.y, x_811.z, x_811.w);
  let x_813 : vec4<f32> = u_xlat2;
  let x_817 : vec2<f32> = clamp(vec2<f32>(x_813.x, x_813.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_818 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_817.x, x_817.y, x_818.z, x_818.w);
  let x_821 : f32 = u_xlat2.x;
  u_xlat64 = ((-(x_821) * 0.959999979f) + 0.959999979f);
  let x_827 : f32 = u_xlat64;
  let x_830 : f32 = u_xlat2.y;
  u_xlat65 = (-(x_827) + x_830);
  let x_832 : vec4<f32> = u_xlat0;
  let x_834 : f32 = u_xlat64;
  u_xlat7 = (vec3<f32>(x_832.x, x_832.y, x_832.z) * vec3<f32>(x_834, x_834, x_834));
  let x_837 : vec4<f32> = u_xlat0;
  let x_841 : vec3<f32> = (vec3<f32>(x_837.x, x_837.y, x_837.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_842 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_841.x, x_841.y, x_841.z, x_842.w);
  let x_844 : vec4<f32> = u_xlat2;
  let x_846 : vec4<f32> = u_xlat0;
  let x_851 : vec3<f32> = ((vec3<f32>(x_844.x, x_844.x, x_844.x) * vec3<f32>(x_846.x, x_846.y, x_846.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_852 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_851.x, x_851.y, x_851.z, x_852.w);
  let x_855 : f32 = u_xlat2.y;
  u_xlat64 = (-(x_855) + 1.0f);
  let x_858 : f32 = u_xlat64;
  let x_859 : f32 = u_xlat64;
  u_xlat2.x = (x_858 * x_859);
  let x_863 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_863, 0.0078125f);
  let x_869 : f32 = u_xlat2.x;
  let x_871 : f32 = u_xlat2.x;
  u_xlat23 = (x_869 * x_871);
  let x_873 : f32 = u_xlat65;
  u_xlat65 = (x_873 + 1.0f);
  let x_875 : f32 = u_xlat65;
  u_xlat65 = min(x_875, 1.0f);
  let x_879 : f32 = u_xlat2.x;
  u_xlat66 = ((x_879 * 4.0f) + 2.0f);
  let x_888 : vec4<f32> = u_xlat6;
  let x_891 : f32 = x_44.x_GlobalMipBias.x;
  let x_892 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_888.x, x_888.z), x_891);
  u_xlat67 = x_892.x;
  let x_895 : f32 = u_xlat67;
  u_xlat68 = (x_895 + -1.0f);
  let x_898 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_899 : f32 = u_xlat68;
  u_xlat68 = ((x_898 * x_899) + 1.0f);
  let x_904 : f32 = u_xlat2.z;
  let x_905 : f32 = u_xlat67;
  u_xlat44 = min(x_904, x_905);
  let x_909 : f32 = x_503.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_909);
  let x_911 : bool = u_xlatb67;
  if (x_911) {
    let x_915 : f32 = x_503.x_MainLightShadowParams.y;
    u_xlatb67 = (x_915 == 1.0f);
    let x_917 : bool = u_xlatb67;
    if (x_917) {
      let x_920 : vec4<f32> = u_xlat4;
      let x_923 : vec4<f32> = x_503.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_920.x, x_920.y, x_920.x, x_920.y) + x_923);
      let x_926 : vec4<f32> = u_xlat6;
      let x_927 : vec2<f32> = vec2<f32>(x_926.x, x_926.y);
      let x_929 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_927.x, x_927.y, x_929);
      let x_942 : vec3<f32> = txVec0;
      let x_944 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_942.xy, x_942.z);
      u_xlat8.x = x_944;
      let x_947 : vec4<f32> = u_xlat6;
      let x_948 : vec2<f32> = vec2<f32>(x_947.z, x_947.w);
      let x_950 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_948.x, x_948.y, x_950);
      let x_957 : vec3<f32> = txVec1;
      let x_959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_957.xy, x_957.z);
      u_xlat8.y = x_959;
      let x_961 : vec4<f32> = u_xlat4;
      let x_964 : vec4<f32> = x_503.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_961.x, x_961.y, x_961.x, x_961.y) + x_964);
      let x_967 : vec4<f32> = u_xlat6;
      let x_968 : vec2<f32> = vec2<f32>(x_967.x, x_967.y);
      let x_970 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_968.x, x_968.y, x_970);
      let x_977 : vec3<f32> = txVec2;
      let x_979 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_977.xy, x_977.z);
      u_xlat8.z = x_979;
      let x_982 : vec4<f32> = u_xlat6;
      let x_983 : vec2<f32> = vec2<f32>(x_982.z, x_982.w);
      let x_985 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_983.x, x_983.y, x_985);
      let x_992 : vec3<f32> = txVec3;
      let x_994 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_992.xy, x_992.z);
      u_xlat8.w = x_994;
      let x_996 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_996, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1003 : f32 = x_503.x_MainLightShadowParams.y;
      u_xlatb6 = (x_1003 == 2.0f);
      let x_1005 : bool = u_xlatb6;
      if (x_1005) {
        let x_1008 : vec4<f32> = u_xlat4;
        let x_1011 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1015 : vec2<f32> = ((vec2<f32>(x_1008.x, x_1008.y) * vec2<f32>(x_1011.z, x_1011.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1016 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1015.x, x_1015.y, x_1016.z, x_1016.w);
        let x_1018 : vec4<f32> = u_xlat6;
        let x_1020 : vec2<f32> = floor(vec2<f32>(x_1018.x, x_1018.y));
        let x_1021 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1020.x, x_1020.y, x_1021.z, x_1021.w);
        let x_1024 : vec4<f32> = u_xlat4;
        let x_1027 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1030 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1024.x, x_1024.y) * vec2<f32>(x_1027.z, x_1027.w)) + -(vec2<f32>(x_1030.x, x_1030.y)));
        let x_1034 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1034.x, x_1034.x, x_1034.y, x_1034.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1039 : vec4<f32> = u_xlat8;
        let x_1041 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1039.x, x_1039.x, x_1039.z, x_1039.z) * vec4<f32>(x_1041.x, x_1041.x, x_1041.z, x_1041.z));
        let x_1044 : vec4<f32> = u_xlat9;
        let x_1048 : vec2<f32> = (vec2<f32>(x_1044.y, x_1044.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1048.x, x_1049.y, x_1048.y, x_1049.w);
        let x_1051 : vec4<f32> = u_xlat9;
        let x_1054 : vec2<f32> = u_xlat48;
        let x_1056 : vec2<f32> = ((vec2<f32>(x_1051.x, x_1051.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1054));
        let x_1057 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1056.x, x_1056.y, x_1057.z, x_1057.w);
        let x_1060 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_1060) + vec2<f32>(1.0f, 1.0f));
        let x_1064 : vec2<f32> = u_xlat48;
        let x_1066 : vec2<f32> = min(x_1064, vec2<f32>(0.0f, 0.0f));
        let x_1067 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1066.x, x_1066.y, x_1067.z, x_1067.w);
        let x_1069 : vec4<f32> = u_xlat10;
        let x_1072 : vec4<f32> = u_xlat10;
        let x_1075 : vec2<f32> = u_xlat51;
        let x_1076 : vec2<f32> = ((-(vec2<f32>(x_1069.x, x_1069.y)) * vec2<f32>(x_1072.x, x_1072.y)) + x_1075);
        let x_1077 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1076.x, x_1076.y, x_1077.z, x_1077.w);
        let x_1079 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_1079, vec2<f32>(0.0f, 0.0f));
        let x_1081 : vec2<f32> = u_xlat48;
        let x_1083 : vec2<f32> = u_xlat48;
        let x_1085 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_1081) * x_1083) + vec2<f32>(x_1085.y, x_1085.w));
        let x_1088 : vec4<f32> = u_xlat10;
        let x_1090 : vec2<f32> = (vec2<f32>(x_1088.x, x_1088.y) + vec2<f32>(1.0f, 1.0f));
        let x_1091 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1090.x, x_1090.y, x_1091.z, x_1091.w);
        let x_1093 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_1093 + vec2<f32>(1.0f, 1.0f));
        let x_1096 : vec4<f32> = u_xlat9;
        let x_1100 : vec2<f32> = (vec2<f32>(x_1096.x, x_1096.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1101 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1100.x, x_1100.y, x_1101.z, x_1101.w);
        let x_1103 : vec2<f32> = u_xlat51;
        let x_1104 : vec2<f32> = (x_1103 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1105 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1104.x, x_1104.y, x_1105.z, x_1105.w);
        let x_1107 : vec4<f32> = u_xlat10;
        let x_1109 : vec2<f32> = (vec2<f32>(x_1107.x, x_1107.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1110 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1109.x, x_1109.y, x_1110.z, x_1110.w);
        let x_1113 : vec2<f32> = u_xlat48;
        let x_1114 : vec2<f32> = (x_1113 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1115 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1114.x, x_1114.y, x_1115.z, x_1115.w);
        let x_1117 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_1117.y, x_1117.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1121 : f32 = u_xlat10.x;
        u_xlat11.z = x_1121;
        let x_1124 : f32 = u_xlat48.x;
        u_xlat11.w = x_1124;
        let x_1127 : f32 = u_xlat12.x;
        u_xlat9.z = x_1127;
        let x_1130 : f32 = u_xlat8.x;
        u_xlat9.w = x_1130;
        let x_1133 : vec4<f32> = u_xlat9;
        let x_1135 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1133.z, x_1133.w, x_1133.x, x_1133.z) + vec4<f32>(x_1135.z, x_1135.w, x_1135.x, x_1135.z));
        let x_1139 : f32 = u_xlat11.y;
        u_xlat10.z = x_1139;
        let x_1142 : f32 = u_xlat48.y;
        u_xlat10.w = x_1142;
        let x_1145 : f32 = u_xlat9.y;
        u_xlat12.z = x_1145;
        let x_1148 : f32 = u_xlat8.z;
        u_xlat12.w = x_1148;
        let x_1150 : vec4<f32> = u_xlat10;
        let x_1152 : vec4<f32> = u_xlat12;
        let x_1154 : vec3<f32> = (vec3<f32>(x_1150.z, x_1150.y, x_1150.w) + vec3<f32>(x_1152.z, x_1152.y, x_1152.w));
        let x_1155 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1154.x, x_1154.y, x_1154.z, x_1155.w);
        let x_1157 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat13;
        let x_1161 : vec3<f32> = (vec3<f32>(x_1157.x, x_1157.z, x_1157.w) / vec3<f32>(x_1159.z, x_1159.w, x_1159.y));
        let x_1162 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1161.x, x_1161.y, x_1161.z, x_1162.w);
        let x_1164 : vec4<f32> = u_xlat9;
        let x_1169 : vec3<f32> = (vec3<f32>(x_1164.x, x_1164.y, x_1164.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1170 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1169.x, x_1169.y, x_1169.z, x_1170.w);
        let x_1172 : vec4<f32> = u_xlat12;
        let x_1174 : vec4<f32> = u_xlat8;
        let x_1176 : vec3<f32> = (vec3<f32>(x_1172.z, x_1172.y, x_1172.w) / vec3<f32>(x_1174.x, x_1174.y, x_1174.z));
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1176.x, x_1176.y, x_1176.z, x_1177.w);
        let x_1179 : vec4<f32> = u_xlat10;
        let x_1181 : vec3<f32> = (vec3<f32>(x_1179.x, x_1179.y, x_1179.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1182 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1181.x, x_1181.y, x_1181.z, x_1182.w);
        let x_1184 : vec4<f32> = u_xlat9;
        let x_1187 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1189 : vec3<f32> = (vec3<f32>(x_1184.y, x_1184.x, x_1184.z) * vec3<f32>(x_1187.x, x_1187.x, x_1187.x));
        let x_1190 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1189.x, x_1189.y, x_1189.z, x_1190.w);
        let x_1192 : vec4<f32> = u_xlat10;
        let x_1195 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1197 : vec3<f32> = (vec3<f32>(x_1192.x, x_1192.y, x_1192.z) * vec3<f32>(x_1195.y, x_1195.y, x_1195.y));
        let x_1198 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1197.x, x_1197.y, x_1197.z, x_1198.w);
        let x_1201 : f32 = u_xlat10.x;
        u_xlat9.w = x_1201;
        let x_1203 : vec4<f32> = u_xlat6;
        let x_1206 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1209 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1203.x, x_1203.y, x_1203.x, x_1203.y) * vec4<f32>(x_1206.x, x_1206.y, x_1206.x, x_1206.y)) + vec4<f32>(x_1209.y, x_1209.w, x_1209.x, x_1209.w));
        let x_1212 : vec4<f32> = u_xlat6;
        let x_1215 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1212.x, x_1212.y) * vec2<f32>(x_1215.x, x_1215.y)) + vec2<f32>(x_1218.z, x_1218.w));
        let x_1222 : f32 = u_xlat9.y;
        u_xlat10.w = x_1222;
        let x_1224 : vec4<f32> = u_xlat10;
        let x_1225 : vec2<f32> = vec2<f32>(x_1224.y, x_1224.z);
        let x_1226 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1226.x, x_1225.x, x_1226.z, x_1225.y);
        let x_1228 : vec4<f32> = u_xlat6;
        let x_1231 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1234 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1228.x, x_1228.y, x_1228.x, x_1228.y) * vec4<f32>(x_1231.x, x_1231.y, x_1231.x, x_1231.y)) + vec4<f32>(x_1234.x, x_1234.y, x_1234.z, x_1234.y));
        let x_1237 : vec4<f32> = u_xlat6;
        let x_1240 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1243 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y) * vec4<f32>(x_1240.x, x_1240.y, x_1240.x, x_1240.y)) + vec4<f32>(x_1243.w, x_1243.y, x_1243.w, x_1243.z));
        let x_1246 : vec4<f32> = u_xlat6;
        let x_1249 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1252 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1246.x, x_1246.y, x_1246.x, x_1246.y) * vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y)) + vec4<f32>(x_1252.x, x_1252.w, x_1252.z, x_1252.w));
        let x_1256 : vec4<f32> = u_xlat8;
        let x_1258 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1256.x, x_1256.x, x_1256.x, x_1256.y) * vec4<f32>(x_1258.z, x_1258.w, x_1258.y, x_1258.z));
        let x_1262 : vec4<f32> = u_xlat8;
        let x_1264 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1262.y, x_1262.y, x_1262.z, x_1262.z) * x_1264);
        let x_1267 : f32 = u_xlat8.z;
        let x_1269 : f32 = u_xlat13.y;
        u_xlat6.x = (x_1267 * x_1269);
        let x_1273 : vec4<f32> = u_xlat11;
        let x_1274 : vec2<f32> = vec2<f32>(x_1273.x, x_1273.y);
        let x_1276 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_1274.x, x_1274.y, x_1276);
        let x_1284 : vec3<f32> = txVec4;
        let x_1286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1284.xy, x_1284.z);
        u_xlat27 = x_1286;
        let x_1288 : vec4<f32> = u_xlat11;
        let x_1289 : vec2<f32> = vec2<f32>(x_1288.z, x_1288.w);
        let x_1291 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_1289.x, x_1289.y, x_1291);
        let x_1299 : vec3<f32> = txVec5;
        let x_1301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1299.xy, x_1299.z);
        u_xlat70 = x_1301;
        let x_1302 : f32 = u_xlat70;
        let x_1304 : f32 = u_xlat14.y;
        u_xlat70 = (x_1302 * x_1304);
        let x_1307 : f32 = u_xlat14.x;
        let x_1308 : f32 = u_xlat27;
        let x_1310 : f32 = u_xlat70;
        u_xlat27 = ((x_1307 * x_1308) + x_1310);
        let x_1313 : vec2<f32> = u_xlat48;
        let x_1315 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_1313.x, x_1313.y, x_1315);
        let x_1322 : vec3<f32> = txVec6;
        let x_1324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1322.xy, x_1322.z);
        u_xlat48.x = x_1324;
        let x_1327 : f32 = u_xlat14.z;
        let x_1329 : f32 = u_xlat48.x;
        let x_1331 : f32 = u_xlat27;
        u_xlat27 = ((x_1327 * x_1329) + x_1331);
        let x_1334 : vec4<f32> = u_xlat10;
        let x_1335 : vec2<f32> = vec2<f32>(x_1334.x, x_1334.y);
        let x_1337 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_1335.x, x_1335.y, x_1337);
        let x_1344 : vec3<f32> = txVec7;
        let x_1346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1344.xy, x_1344.z);
        u_xlat48.x = x_1346;
        let x_1349 : f32 = u_xlat14.w;
        let x_1351 : f32 = u_xlat48.x;
        let x_1353 : f32 = u_xlat27;
        u_xlat27 = ((x_1349 * x_1351) + x_1353);
        let x_1356 : vec4<f32> = u_xlat12;
        let x_1357 : vec2<f32> = vec2<f32>(x_1356.x, x_1356.y);
        let x_1359 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_1357.x, x_1357.y, x_1359);
        let x_1366 : vec3<f32> = txVec8;
        let x_1368 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1366.xy, x_1366.z);
        u_xlat48.x = x_1368;
        let x_1371 : f32 = u_xlat15.x;
        let x_1373 : f32 = u_xlat48.x;
        let x_1375 : f32 = u_xlat27;
        u_xlat27 = ((x_1371 * x_1373) + x_1375);
        let x_1378 : vec4<f32> = u_xlat12;
        let x_1379 : vec2<f32> = vec2<f32>(x_1378.z, x_1378.w);
        let x_1381 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_1379.x, x_1379.y, x_1381);
        let x_1388 : vec3<f32> = txVec9;
        let x_1390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1388.xy, x_1388.z);
        u_xlat48.x = x_1390;
        let x_1393 : f32 = u_xlat15.y;
        let x_1395 : f32 = u_xlat48.x;
        let x_1397 : f32 = u_xlat27;
        u_xlat27 = ((x_1393 * x_1395) + x_1397);
        let x_1400 : vec4<f32> = u_xlat10;
        let x_1401 : vec2<f32> = vec2<f32>(x_1400.z, x_1400.w);
        let x_1403 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_1401.x, x_1401.y, x_1403);
        let x_1410 : vec3<f32> = txVec10;
        let x_1412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1410.xy, x_1410.z);
        u_xlat48.x = x_1412;
        let x_1415 : f32 = u_xlat15.z;
        let x_1417 : f32 = u_xlat48.x;
        let x_1419 : f32 = u_xlat27;
        u_xlat27 = ((x_1415 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat9;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.x, x_1422.y);
        let x_1425 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec11;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat48.x = x_1434;
        let x_1437 : f32 = u_xlat15.w;
        let x_1439 : f32 = u_xlat48.x;
        let x_1441 : f32 = u_xlat27;
        u_xlat27 = ((x_1437 * x_1439) + x_1441);
        let x_1444 : vec4<f32> = u_xlat9;
        let x_1445 : vec2<f32> = vec2<f32>(x_1444.z, x_1444.w);
        let x_1447 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_1445.x, x_1445.y, x_1447);
        let x_1454 : vec3<f32> = txVec12;
        let x_1456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1454.xy, x_1454.z);
        u_xlat48.x = x_1456;
        let x_1459 : f32 = u_xlat6.x;
        let x_1461 : f32 = u_xlat48.x;
        let x_1463 : f32 = u_xlat27;
        u_xlat67 = ((x_1459 * x_1461) + x_1463);
      } else {
        let x_1466 : vec4<f32> = u_xlat4;
        let x_1469 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1472 : vec2<f32> = ((vec2<f32>(x_1466.x, x_1466.y) * vec2<f32>(x_1469.z, x_1469.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1473 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1472.x, x_1472.y, x_1473.z, x_1473.w);
        let x_1475 : vec4<f32> = u_xlat6;
        let x_1477 : vec2<f32> = floor(vec2<f32>(x_1475.x, x_1475.y));
        let x_1478 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1477.x, x_1477.y, x_1478.z, x_1478.w);
        let x_1480 : vec4<f32> = u_xlat4;
        let x_1483 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1486 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1480.x, x_1480.y) * vec2<f32>(x_1483.z, x_1483.w)) + -(vec2<f32>(x_1486.x, x_1486.y)));
        let x_1490 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1490.x, x_1490.x, x_1490.y, x_1490.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1493 : vec4<f32> = u_xlat8;
        let x_1495 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1493.x, x_1493.x, x_1493.z, x_1493.z) * vec4<f32>(x_1495.x, x_1495.x, x_1495.z, x_1495.z));
        let x_1498 : vec4<f32> = u_xlat9;
        let x_1502 : vec2<f32> = (vec2<f32>(x_1498.y, x_1498.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1503 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1503.x, x_1502.x, x_1503.z, x_1502.y);
        let x_1505 : vec4<f32> = u_xlat9;
        let x_1508 : vec2<f32> = u_xlat48;
        let x_1510 : vec2<f32> = ((vec2<f32>(x_1505.x, x_1505.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1508));
        let x_1511 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1510.x, x_1511.y, x_1510.y, x_1511.w);
        let x_1513 : vec2<f32> = u_xlat48;
        let x_1515 : vec2<f32> = (-(x_1513) + vec2<f32>(1.0f, 1.0f));
        let x_1516 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1515.x, x_1515.y, x_1516.z, x_1516.w);
        let x_1518 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1518, vec2<f32>(0.0f, 0.0f));
        let x_1520 : vec2<f32> = u_xlat51;
        let x_1522 : vec2<f32> = u_xlat51;
        let x_1524 : vec4<f32> = u_xlat9;
        let x_1526 : vec2<f32> = ((-(x_1520) * x_1522) + vec2<f32>(x_1524.x, x_1524.y));
        let x_1527 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1526.x, x_1526.y, x_1527.z, x_1527.w);
        let x_1529 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1529, vec2<f32>(0.0f, 0.0f));
        let x_1532 : vec2<f32> = u_xlat51;
        let x_1534 : vec2<f32> = u_xlat51;
        let x_1536 : vec4<f32> = u_xlat8;
        let x_1538 : vec2<f32> = ((-(x_1532) * x_1534) + vec2<f32>(x_1536.y, x_1536.w));
        let x_1539 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1538.x, x_1539.y, x_1538.y);
        let x_1541 : vec4<f32> = u_xlat9;
        let x_1543 : vec2<f32> = (vec2<f32>(x_1541.x, x_1541.y) + vec2<f32>(2.0f, 2.0f));
        let x_1544 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1543.x, x_1543.y, x_1544.z, x_1544.w);
        let x_1546 : vec3<f32> = u_xlat29;
        let x_1548 : vec2<f32> = (vec2<f32>(x_1546.x, x_1546.z) + vec2<f32>(2.0f, 2.0f));
        let x_1549 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1549.x, x_1548.x, x_1549.z, x_1548.y);
        let x_1552 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1552 * 0.081632003f);
        let x_1556 : vec4<f32> = u_xlat8;
        let x_1559 : vec3<f32> = (vec3<f32>(x_1556.z, x_1556.x, x_1556.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1560 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1559.x, x_1559.y, x_1559.z, x_1560.w);
        let x_1562 : vec4<f32> = u_xlat9;
        let x_1565 : vec2<f32> = (vec2<f32>(x_1562.x, x_1562.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1566 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1565.x, x_1565.y, x_1566.z, x_1566.w);
        let x_1569 : f32 = u_xlat12.y;
        u_xlat11.x = x_1569;
        let x_1571 : vec2<f32> = u_xlat48;
        let x_1578 : vec2<f32> = ((vec2<f32>(x_1571.x, x_1571.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1579 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1579.x, x_1578.x, x_1579.z, x_1578.y);
        let x_1581 : vec2<f32> = u_xlat48;
        let x_1585 : vec2<f32> = ((vec2<f32>(x_1581.x, x_1581.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1586 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1585.x, x_1586.y, x_1585.y, x_1586.w);
        let x_1589 : f32 = u_xlat8.x;
        u_xlat9.y = x_1589;
        let x_1592 : f32 = u_xlat10.y;
        u_xlat9.w = x_1592;
        let x_1594 : vec4<f32> = u_xlat9;
        let x_1595 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1594 + x_1595);
        let x_1597 : vec2<f32> = u_xlat48;
        let x_1600 : vec2<f32> = ((vec2<f32>(x_1597.y, x_1597.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1601 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1601.x, x_1600.x, x_1601.z, x_1600.y);
        let x_1603 : vec2<f32> = u_xlat48;
        let x_1606 : vec2<f32> = ((vec2<f32>(x_1603.y, x_1603.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1607 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1606.x, x_1607.y, x_1606.y, x_1607.w);
        let x_1610 : f32 = u_xlat8.y;
        u_xlat10.y = x_1610;
        let x_1612 : vec4<f32> = u_xlat10;
        let x_1613 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1612 + x_1613);
        let x_1615 : vec4<f32> = u_xlat9;
        let x_1616 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1615 / x_1616);
        let x_1618 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1618 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1624 : vec4<f32> = u_xlat10;
        let x_1625 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1624 / x_1625);
        let x_1627 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1627 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1629 : vec4<f32> = u_xlat9;
        let x_1632 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1629.w, x_1629.x, x_1629.y, x_1629.z) * vec4<f32>(x_1632.x, x_1632.x, x_1632.x, x_1632.x));
        let x_1635 : vec4<f32> = u_xlat10;
        let x_1638 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1635.x, x_1635.w, x_1635.y, x_1635.z) * vec4<f32>(x_1638.y, x_1638.y, x_1638.y, x_1638.y));
        let x_1641 : vec4<f32> = u_xlat9;
        let x_1642 : vec3<f32> = vec3<f32>(x_1641.y, x_1641.z, x_1641.w);
        let x_1643 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1642.x, x_1643.y, x_1642.y, x_1642.z);
        let x_1646 : f32 = u_xlat10.x;
        u_xlat12.y = x_1646;
        let x_1648 : vec4<f32> = u_xlat6;
        let x_1651 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1654 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1648.x, x_1648.y, x_1648.x, x_1648.y) * vec4<f32>(x_1651.x, x_1651.y, x_1651.x, x_1651.y)) + vec4<f32>(x_1654.x, x_1654.y, x_1654.z, x_1654.y));
        let x_1657 : vec4<f32> = u_xlat6;
        let x_1660 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1663 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1657.x, x_1657.y) * vec2<f32>(x_1660.x, x_1660.y)) + vec2<f32>(x_1663.w, x_1663.y));
        let x_1667 : f32 = u_xlat12.y;
        u_xlat9.y = x_1667;
        let x_1670 : f32 = u_xlat10.z;
        u_xlat12.y = x_1670;
        let x_1672 : vec4<f32> = u_xlat6;
        let x_1675 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1678 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1672.x, x_1672.y, x_1672.x, x_1672.y) * vec4<f32>(x_1675.x, x_1675.y, x_1675.x, x_1675.y)) + vec4<f32>(x_1678.x, x_1678.y, x_1678.z, x_1678.y));
        let x_1681 : vec4<f32> = u_xlat6;
        let x_1684 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1687 : vec4<f32> = u_xlat12;
        let x_1689 : vec2<f32> = ((vec2<f32>(x_1681.x, x_1681.y) * vec2<f32>(x_1684.x, x_1684.y)) + vec2<f32>(x_1687.w, x_1687.y));
        let x_1690 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1689.x, x_1689.y, x_1690.z, x_1690.w);
        let x_1693 : f32 = u_xlat12.y;
        u_xlat9.z = x_1693;
        let x_1696 : vec4<f32> = u_xlat6;
        let x_1699 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1702 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1696.x, x_1696.y, x_1696.x, x_1696.y) * vec4<f32>(x_1699.x, x_1699.y, x_1699.x, x_1699.y)) + vec4<f32>(x_1702.x, x_1702.y, x_1702.x, x_1702.z));
        let x_1706 : f32 = u_xlat10.w;
        u_xlat12.y = x_1706;
        let x_1709 : vec4<f32> = u_xlat6;
        let x_1712 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1715 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1709.x, x_1709.y, x_1709.x, x_1709.y) * vec4<f32>(x_1712.x, x_1712.y, x_1712.x, x_1712.y)) + vec4<f32>(x_1715.x, x_1715.y, x_1715.z, x_1715.y));
        let x_1719 : vec4<f32> = u_xlat6;
        let x_1722 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1725 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1719.x, x_1719.y) * vec2<f32>(x_1722.x, x_1722.y)) + vec2<f32>(x_1725.w, x_1725.y));
        let x_1729 : f32 = u_xlat12.y;
        u_xlat9.w = x_1729;
        let x_1732 : vec4<f32> = u_xlat6;
        let x_1735 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1738 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1732.x, x_1732.y) * vec2<f32>(x_1735.x, x_1735.y)) + vec2<f32>(x_1738.x, x_1738.w));
        let x_1741 : vec4<f32> = u_xlat12;
        let x_1742 : vec3<f32> = vec3<f32>(x_1741.x, x_1741.z, x_1741.w);
        let x_1743 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1742.x, x_1743.y, x_1742.y, x_1742.z);
        let x_1745 : vec4<f32> = u_xlat6;
        let x_1748 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1751 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1745.x, x_1745.y, x_1745.x, x_1745.y) * vec4<f32>(x_1748.x, x_1748.y, x_1748.x, x_1748.y)) + vec4<f32>(x_1751.x, x_1751.y, x_1751.z, x_1751.y));
        let x_1755 : vec4<f32> = u_xlat6;
        let x_1758 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1761 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1755.x, x_1755.y) * vec2<f32>(x_1758.x, x_1758.y)) + vec2<f32>(x_1761.w, x_1761.y));
        let x_1765 : f32 = u_xlat9.x;
        u_xlat10.x = x_1765;
        let x_1767 : vec4<f32> = u_xlat6;
        let x_1770 : vec4<f32> = x_503.x_MainLightShadowmapSize;
        let x_1773 : vec4<f32> = u_xlat10;
        let x_1775 : vec2<f32> = ((vec2<f32>(x_1767.x, x_1767.y) * vec2<f32>(x_1770.x, x_1770.y)) + vec2<f32>(x_1773.x, x_1773.y));
        let x_1776 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1775.x, x_1775.y, x_1776.z, x_1776.w);
        let x_1779 : vec4<f32> = u_xlat8;
        let x_1781 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1779.x, x_1779.x, x_1779.x, x_1779.x) * x_1781);
        let x_1784 : vec4<f32> = u_xlat8;
        let x_1786 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1784.y, x_1784.y, x_1784.y, x_1784.y) * x_1786);
        let x_1789 : vec4<f32> = u_xlat8;
        let x_1791 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1789.z, x_1789.z, x_1789.z, x_1789.z) * x_1791);
        let x_1793 : vec4<f32> = u_xlat8;
        let x_1795 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1793.w, x_1793.w, x_1793.w, x_1793.w) * x_1795);
        let x_1798 : vec4<f32> = u_xlat13;
        let x_1799 : vec2<f32> = vec2<f32>(x_1798.x, x_1798.y);
        let x_1801 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1799.x, x_1799.y, x_1801);
        let x_1808 : vec3<f32> = txVec13;
        let x_1810 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1808.xy, x_1808.z);
        u_xlat70 = x_1810;
        let x_1812 : vec4<f32> = u_xlat13;
        let x_1813 : vec2<f32> = vec2<f32>(x_1812.z, x_1812.w);
        let x_1815 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1813.x, x_1813.y, x_1815);
        let x_1822 : vec3<f32> = txVec14;
        let x_1824 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1822.xy, x_1822.z);
        u_xlat9.x = x_1824;
        let x_1827 : f32 = u_xlat9.x;
        let x_1829 : f32 = u_xlat18.y;
        u_xlat9.x = (x_1827 * x_1829);
        let x_1833 : f32 = u_xlat18.x;
        let x_1834 : f32 = u_xlat70;
        let x_1837 : f32 = u_xlat9.x;
        u_xlat70 = ((x_1833 * x_1834) + x_1837);
        let x_1840 : vec2<f32> = u_xlat48;
        let x_1842 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1840.x, x_1840.y, x_1842);
        let x_1849 : vec3<f32> = txVec15;
        let x_1851 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1849.xy, x_1849.z);
        u_xlat48.x = x_1851;
        let x_1854 : f32 = u_xlat18.z;
        let x_1856 : f32 = u_xlat48.x;
        let x_1858 : f32 = u_xlat70;
        u_xlat48.x = ((x_1854 * x_1856) + x_1858);
        let x_1862 : vec4<f32> = u_xlat16;
        let x_1863 : vec2<f32> = vec2<f32>(x_1862.x, x_1862.y);
        let x_1865 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1863.x, x_1863.y, x_1865);
        let x_1873 : vec3<f32> = txVec16;
        let x_1875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1873.xy, x_1873.z);
        u_xlat69 = x_1875;
        let x_1877 : f32 = u_xlat18.w;
        let x_1878 : f32 = u_xlat69;
        let x_1881 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1877 * x_1878) + x_1881);
        let x_1885 : vec4<f32> = u_xlat14;
        let x_1886 : vec2<f32> = vec2<f32>(x_1885.x, x_1885.y);
        let x_1888 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1886.x, x_1886.y, x_1888);
        let x_1895 : vec3<f32> = txVec17;
        let x_1897 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1895.xy, x_1895.z);
        u_xlat69 = x_1897;
        let x_1899 : f32 = u_xlat19.x;
        let x_1900 : f32 = u_xlat69;
        let x_1903 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1899 * x_1900) + x_1903);
        let x_1907 : vec4<f32> = u_xlat14;
        let x_1908 : vec2<f32> = vec2<f32>(x_1907.z, x_1907.w);
        let x_1910 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1908.x, x_1908.y, x_1910);
        let x_1917 : vec3<f32> = txVec18;
        let x_1919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1917.xy, x_1917.z);
        u_xlat69 = x_1919;
        let x_1921 : f32 = u_xlat19.y;
        let x_1922 : f32 = u_xlat69;
        let x_1925 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1921 * x_1922) + x_1925);
        let x_1929 : vec4<f32> = u_xlat15;
        let x_1930 : vec2<f32> = vec2<f32>(x_1929.x, x_1929.y);
        let x_1932 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1930.x, x_1930.y, x_1932);
        let x_1939 : vec3<f32> = txVec19;
        let x_1941 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1939.xy, x_1939.z);
        u_xlat69 = x_1941;
        let x_1943 : f32 = u_xlat19.z;
        let x_1944 : f32 = u_xlat69;
        let x_1947 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1943 * x_1944) + x_1947);
        let x_1951 : vec4<f32> = u_xlat16;
        let x_1952 : vec2<f32> = vec2<f32>(x_1951.z, x_1951.w);
        let x_1954 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1952.x, x_1952.y, x_1954);
        let x_1961 : vec3<f32> = txVec20;
        let x_1963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1961.xy, x_1961.z);
        u_xlat69 = x_1963;
        let x_1965 : f32 = u_xlat19.w;
        let x_1966 : f32 = u_xlat69;
        let x_1969 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1965 * x_1966) + x_1969);
        let x_1973 : vec4<f32> = u_xlat17;
        let x_1974 : vec2<f32> = vec2<f32>(x_1973.x, x_1973.y);
        let x_1976 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1974.x, x_1974.y, x_1976);
        let x_1983 : vec3<f32> = txVec21;
        let x_1985 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1983.xy, x_1983.z);
        u_xlat69 = x_1985;
        let x_1987 : f32 = u_xlat20.x;
        let x_1988 : f32 = u_xlat69;
        let x_1991 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1987 * x_1988) + x_1991);
        let x_1995 : vec4<f32> = u_xlat17;
        let x_1996 : vec2<f32> = vec2<f32>(x_1995.z, x_1995.w);
        let x_1998 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1996.x, x_1996.y, x_1998);
        let x_2005 : vec3<f32> = txVec22;
        let x_2007 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2005.xy, x_2005.z);
        u_xlat69 = x_2007;
        let x_2009 : f32 = u_xlat20.y;
        let x_2010 : f32 = u_xlat69;
        let x_2013 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2009 * x_2010) + x_2013);
        let x_2017 : vec2<f32> = u_xlat30;
        let x_2019 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_2017.x, x_2017.y, x_2019);
        let x_2026 : vec3<f32> = txVec23;
        let x_2028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2026.xy, x_2026.z);
        u_xlat69 = x_2028;
        let x_2030 : f32 = u_xlat20.z;
        let x_2031 : f32 = u_xlat69;
        let x_2034 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2030 * x_2031) + x_2034);
        let x_2038 : vec2<f32> = u_xlat57;
        let x_2040 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_2038.x, x_2038.y, x_2040);
        let x_2047 : vec3<f32> = txVec24;
        let x_2049 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2047.xy, x_2047.z);
        u_xlat69 = x_2049;
        let x_2051 : f32 = u_xlat20.w;
        let x_2052 : f32 = u_xlat69;
        let x_2055 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2051 * x_2052) + x_2055);
        let x_2059 : vec4<f32> = u_xlat12;
        let x_2060 : vec2<f32> = vec2<f32>(x_2059.x, x_2059.y);
        let x_2062 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_2060.x, x_2060.y, x_2062);
        let x_2069 : vec3<f32> = txVec25;
        let x_2071 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2069.xy, x_2069.z);
        u_xlat69 = x_2071;
        let x_2073 : f32 = u_xlat8.x;
        let x_2074 : f32 = u_xlat69;
        let x_2077 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2073 * x_2074) + x_2077);
        let x_2081 : vec4<f32> = u_xlat12;
        let x_2082 : vec2<f32> = vec2<f32>(x_2081.z, x_2081.w);
        let x_2084 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_2082.x, x_2082.y, x_2084);
        let x_2091 : vec3<f32> = txVec26;
        let x_2093 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2091.xy, x_2091.z);
        u_xlat69 = x_2093;
        let x_2095 : f32 = u_xlat8.y;
        let x_2096 : f32 = u_xlat69;
        let x_2099 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2095 * x_2096) + x_2099);
        let x_2103 : vec2<f32> = u_xlat52;
        let x_2105 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_2103.x, x_2103.y, x_2105);
        let x_2112 : vec3<f32> = txVec27;
        let x_2114 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2112.xy, x_2112.z);
        u_xlat69 = x_2114;
        let x_2116 : f32 = u_xlat8.z;
        let x_2117 : f32 = u_xlat69;
        let x_2120 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2116 * x_2117) + x_2120);
        let x_2124 : vec4<f32> = u_xlat6;
        let x_2125 : vec2<f32> = vec2<f32>(x_2124.x, x_2124.y);
        let x_2127 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_2125.x, x_2125.y, x_2127);
        let x_2134 : vec3<f32> = txVec28;
        let x_2136 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2134.xy, x_2134.z);
        u_xlat6.x = x_2136;
        let x_2139 : f32 = u_xlat8.w;
        let x_2141 : f32 = u_xlat6.x;
        let x_2144 : f32 = u_xlat48.x;
        u_xlat67 = ((x_2139 * x_2141) + x_2144);
      }
    }
  } else {
    let x_2148 : vec4<f32> = u_xlat4;
    let x_2149 : vec2<f32> = vec2<f32>(x_2148.x, x_2148.y);
    let x_2151 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_2149.x, x_2149.y, x_2151);
    let x_2158 : vec3<f32> = txVec29;
    let x_2160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2158.xy, x_2158.z);
    u_xlat67 = x_2160;
  }
  let x_2162 : f32 = x_503.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_2162) + 1.0f);
  let x_2166 : f32 = u_xlat67;
  let x_2168 : f32 = x_503.x_MainLightShadowParams.x;
  let x_2171 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2166 * x_2168) + x_2171);
  let x_2176 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_2176);
  let x_2180 : f32 = u_xlat4.z;
  u_xlatb46 = (x_2180 >= 1.0f);
  let x_2182 : bool = u_xlatb46;
  let x_2183 : bool = u_xlatb25;
  u_xlatb25 = (x_2182 | x_2183);
  let x_2185 : bool = u_xlatb25;
  if (x_2185) {
    x_2186 = 1.0f;
  } else {
    let x_2191 : f32 = u_xlat4.x;
    x_2186 = x_2191;
  }
  let x_2192 : f32 = x_2186;
  u_xlat4.x = x_2192;
  let x_2195 : vec3<f32> = vs_INTERP0;
  let x_2197 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat25 = (x_2195 + -(x_2197));
  let x_2200 : vec3<f32> = u_xlat25;
  let x_2201 : vec3<f32> = u_xlat25;
  u_xlat25.x = dot(x_2200, x_2201);
  let x_2205 : f32 = u_xlat25.x;
  let x_2207 : f32 = x_503.x_MainLightShadowParams.z;
  let x_2210 : f32 = x_503.x_MainLightShadowParams.w;
  u_xlat25.x = ((x_2205 * x_2207) + x_2210);
  let x_2214 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_2214, 0.0f, 1.0f);
  let x_2219 : f32 = u_xlat4.x;
  u_xlat46 = (-(x_2219) + 1.0f);
  let x_2223 : f32 = u_xlat25.x;
  let x_2224 : f32 = u_xlat46;
  let x_2227 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2223 * x_2224) + x_2227);
  let x_2230 : f32 = u_xlat68;
  let x_2233 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_2230, x_2230, x_2230) * vec3<f32>(x_2233.x, x_2233.y, x_2233.z));
  let x_2236 : vec4<f32> = u_xlat3;
  let x_2239 : vec4<f32> = u_xlat1;
  u_xlat6.x = dot(-(vec3<f32>(x_2236.x, x_2236.y, x_2236.z)), vec3<f32>(x_2239.x, x_2239.y, x_2239.z));
  let x_2244 : f32 = u_xlat6.x;
  let x_2246 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2244 + x_2246);
  let x_2249 : vec4<f32> = u_xlat1;
  let x_2251 : vec4<f32> = u_xlat6;
  let x_2255 : vec4<f32> = u_xlat3;
  let x_2258 : vec3<f32> = ((vec3<f32>(x_2249.x, x_2249.y, x_2249.z) * -(vec3<f32>(x_2251.x, x_2251.x, x_2251.x))) + -(vec3<f32>(x_2255.x, x_2255.y, x_2255.z)));
  let x_2259 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2258.x, x_2258.y, x_2258.z, x_2259.w);
  let x_2261 : vec4<f32> = u_xlat1;
  let x_2263 : vec4<f32> = u_xlat3;
  u_xlat69 = dot(vec3<f32>(x_2261.x, x_2261.y, x_2261.z), vec3<f32>(x_2263.x, x_2263.y, x_2263.z));
  let x_2266 : f32 = u_xlat69;
  u_xlat69 = clamp(x_2266, 0.0f, 1.0f);
  let x_2268 : f32 = u_xlat69;
  u_xlat69 = (-(x_2268) + 1.0f);
  let x_2271 : f32 = u_xlat69;
  let x_2272 : f32 = u_xlat69;
  u_xlat69 = (x_2271 * x_2272);
  let x_2274 : f32 = u_xlat69;
  let x_2275 : f32 = u_xlat69;
  u_xlat69 = (x_2274 * x_2275);
  let x_2277 : f32 = u_xlat64;
  u_xlat70 = ((-(x_2277) * 0.699999988f) + 1.700000048f);
  let x_2283 : f32 = u_xlat64;
  let x_2284 : f32 = u_xlat70;
  u_xlat64 = (x_2283 * x_2284);
  let x_2286 : f32 = u_xlat64;
  u_xlat64 = (x_2286 * 6.0f);
  let x_2296 : vec4<f32> = u_xlat6;
  let x_2298 : f32 = u_xlat64;
  let x_2299 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2296.x, x_2296.y, x_2296.z), x_2298);
  u_xlat8 = x_2299;
  let x_2301 : f32 = u_xlat8.w;
  u_xlat64 = (x_2301 + -1.0f);
  let x_2304 : f32 = x_359.unity_SpecCube0_HDR.w;
  let x_2305 : f32 = u_xlat64;
  u_xlat64 = ((x_2304 * x_2305) + 1.0f);
  let x_2308 : f32 = u_xlat64;
  u_xlat64 = max(x_2308, 0.0f);
  let x_2310 : f32 = u_xlat64;
  u_xlat64 = log2(x_2310);
  let x_2312 : f32 = u_xlat64;
  let x_2314 : f32 = x_359.unity_SpecCube0_HDR.y;
  u_xlat64 = (x_2312 * x_2314);
  let x_2316 : f32 = u_xlat64;
  u_xlat64 = exp2(x_2316);
  let x_2318 : f32 = u_xlat64;
  let x_2320 : f32 = x_359.unity_SpecCube0_HDR.x;
  u_xlat64 = (x_2318 * x_2320);
  let x_2322 : vec4<f32> = u_xlat8;
  let x_2324 : f32 = u_xlat64;
  let x_2326 : vec3<f32> = (vec3<f32>(x_2322.x, x_2322.y, x_2322.z) * vec3<f32>(x_2324, x_2324, x_2324));
  let x_2327 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2326.x, x_2326.y, x_2326.z, x_2327.w);
  let x_2329 : vec4<f32> = u_xlat2;
  let x_2331 : vec4<f32> = u_xlat2;
  let x_2335 : vec2<f32> = ((vec2<f32>(x_2329.x, x_2329.x) * vec2<f32>(x_2331.x, x_2331.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2336 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2335.x, x_2335.y, x_2336.z, x_2336.w);
  let x_2339 : f32 = u_xlat8.y;
  u_xlat64 = (1.0f / x_2339);
  let x_2341 : vec4<f32> = u_xlat0;
  let x_2344 : f32 = u_xlat65;
  u_xlat29 = (-(vec3<f32>(x_2341.x, x_2341.y, x_2341.z)) + vec3<f32>(x_2344, x_2344, x_2344));
  let x_2347 : f32 = u_xlat69;
  let x_2349 : vec3<f32> = u_xlat29;
  let x_2351 : vec4<f32> = u_xlat0;
  u_xlat29 = ((vec3<f32>(x_2347, x_2347, x_2347) * x_2349) + vec3<f32>(x_2351.x, x_2351.y, x_2351.z));
  let x_2354 : f32 = u_xlat64;
  let x_2356 : vec3<f32> = u_xlat29;
  u_xlat29 = (vec3<f32>(x_2354, x_2354, x_2354) * x_2356);
  let x_2358 : vec4<f32> = u_xlat6;
  let x_2360 : vec3<f32> = u_xlat29;
  let x_2361 : vec3<f32> = (vec3<f32>(x_2358.x, x_2358.y, x_2358.z) * x_2360);
  let x_2362 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2361.x, x_2361.y, x_2361.z, x_2362.w);
  let x_2364 : vec4<f32> = u_xlat5;
  let x_2366 : vec3<f32> = u_xlat7;
  let x_2368 : vec4<f32> = u_xlat6;
  let x_2370 : vec3<f32> = ((vec3<f32>(x_2364.x, x_2364.y, x_2364.z) * x_2366) + vec3<f32>(x_2368.x, x_2368.y, x_2368.z));
  let x_2371 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2370.x, x_2370.y, x_2370.z, x_2371.w);
  let x_2374 : f32 = u_xlat4.x;
  let x_2376 : f32 = x_359.unity_LightData.z;
  u_xlat64 = (x_2374 * x_2376);
  let x_2378 : vec4<f32> = u_xlat1;
  let x_2381 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_2378.x, x_2378.y, x_2378.z), vec3<f32>(x_2381.x, x_2381.y, x_2381.z));
  let x_2386 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2386, 0.0f, 1.0f);
  let x_2389 : f32 = u_xlat64;
  let x_2391 : f32 = u_xlat2.x;
  u_xlat64 = (x_2389 * x_2391);
  let x_2393 : f32 = u_xlat64;
  let x_2395 : vec3<f32> = u_xlat25;
  let x_2396 : vec3<f32> = (vec3<f32>(x_2393, x_2393, x_2393) * x_2395);
  let x_2397 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2396.x, x_2396.y, x_2396.z, x_2397.w);
  let x_2399 : vec4<f32> = u_xlat3;
  let x_2402 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2404 : vec3<f32> = (vec3<f32>(x_2399.x, x_2399.y, x_2399.z) + vec3<f32>(x_2402.x, x_2402.y, x_2402.z));
  let x_2405 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2404.x, x_2404.y, x_2404.z, x_2405.w);
  let x_2407 : vec4<f32> = u_xlat6;
  let x_2409 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_2407.x, x_2407.y, x_2407.z), vec3<f32>(x_2409.x, x_2409.y, x_2409.z));
  let x_2412 : f32 = u_xlat64;
  u_xlat64 = max(x_2412, 1.17549435e-37f);
  let x_2415 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_2415);
  let x_2417 : f32 = u_xlat64;
  let x_2419 : vec4<f32> = u_xlat6;
  let x_2421 : vec3<f32> = (vec3<f32>(x_2417, x_2417, x_2417) * vec3<f32>(x_2419.x, x_2419.y, x_2419.z));
  let x_2422 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2421.x, x_2421.y, x_2421.z, x_2422.w);
  let x_2424 : vec4<f32> = u_xlat1;
  let x_2426 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_2424.x, x_2424.y, x_2424.z), vec3<f32>(x_2426.x, x_2426.y, x_2426.z));
  let x_2429 : f32 = u_xlat64;
  u_xlat64 = clamp(x_2429, 0.0f, 1.0f);
  let x_2432 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2434 : vec4<f32> = u_xlat6;
  u_xlat2.x = dot(vec3<f32>(x_2432.x, x_2432.y, x_2432.z), vec3<f32>(x_2434.x, x_2434.y, x_2434.z));
  let x_2439 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2439, 0.0f, 1.0f);
  let x_2442 : f32 = u_xlat64;
  let x_2443 : f32 = u_xlat64;
  u_xlat64 = (x_2442 * x_2443);
  let x_2445 : f32 = u_xlat64;
  let x_2447 : f32 = u_xlat8.x;
  u_xlat64 = ((x_2445 * x_2447) + 1.000010014f);
  let x_2452 : f32 = u_xlat2.x;
  let x_2454 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2452 * x_2454);
  let x_2457 : f32 = u_xlat64;
  let x_2458 : f32 = u_xlat64;
  u_xlat64 = (x_2457 * x_2458);
  let x_2461 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_2461, 0.100000001f);
  let x_2465 : f32 = u_xlat64;
  let x_2467 : f32 = u_xlat2.x;
  u_xlat64 = (x_2465 * x_2467);
  let x_2469 : f32 = u_xlat66;
  let x_2470 : f32 = u_xlat64;
  u_xlat64 = (x_2469 * x_2470);
  let x_2472 : f32 = u_xlat23;
  let x_2473 : f32 = u_xlat64;
  u_xlat64 = (x_2472 / x_2473);
  let x_2475 : vec4<f32> = u_xlat0;
  let x_2477 : f32 = u_xlat64;
  let x_2480 : vec3<f32> = u_xlat7;
  let x_2481 : vec3<f32> = ((vec3<f32>(x_2475.x, x_2475.y, x_2475.z) * vec3<f32>(x_2477, x_2477, x_2477)) + x_2480);
  let x_2482 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2481.x, x_2481.y, x_2481.z, x_2482.w);
  let x_2484 : vec4<f32> = u_xlat4;
  let x_2486 : vec4<f32> = u_xlat6;
  let x_2488 : vec3<f32> = (vec3<f32>(x_2484.x, x_2484.y, x_2484.z) * vec3<f32>(x_2486.x, x_2486.y, x_2486.z));
  let x_2489 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2488.x, x_2488.y, x_2488.z, x_2489.w);
  let x_2492 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2494 : f32 = x_359.unity_LightData.y;
  u_xlat64 = min(x_2492, x_2494);
  let x_2497 : f32 = u_xlat64;
  u_xlatu64 = bitcast<u32>(i32(x_2497));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2509 : u32 = u_xlatu_loop_1;
    let x_2510 : u32 = u_xlatu64;
    if ((x_2509 < x_2510)) {
    } else {
      break;
    }
    let x_2513 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_2513 >> 2u);
    let x_2516 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_2516 & 3u));
    let x_2519 : u32 = u_xlatu65;
    let x_2522 : vec4<f32> = x_359.unity_LightIndices[bitcast<i32>(x_2519)];
    let x_2532 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2537 : vec4<u32> = indexable[x_2532];
    u_xlat65 = dot(x_2522, bitcast<vec4<f32>>(x_2537));
    let x_2541 : f32 = u_xlat65;
    u_xlati65 = i32(x_2541);
    let x_2543 : vec3<f32> = vs_INTERP0;
    let x_2555 : i32 = u_xlati65;
    let x_2557 : vec4<f32> = x_2554.x_AdditionalLightsPosition[x_2555];
    let x_2560 : i32 = u_xlati65;
    let x_2562 : vec4<f32> = x_2554.x_AdditionalLightsPosition[x_2560];
    u_xlat29 = ((-(x_2543) * vec3<f32>(x_2557.w, x_2557.w, x_2557.w)) + vec3<f32>(x_2562.x, x_2562.y, x_2562.z));
    let x_2565 : vec3<f32> = u_xlat29;
    let x_2566 : vec3<f32> = u_xlat29;
    u_xlat67 = dot(x_2565, x_2566);
    let x_2568 : f32 = u_xlat67;
    u_xlat67 = max(x_2568, 6.10351562e-05f);
    let x_2571 : f32 = u_xlat67;
    u_xlat69 = inverseSqrt(x_2571);
    let x_2573 : f32 = u_xlat69;
    let x_2575 : vec3<f32> = u_xlat29;
    let x_2576 : vec3<f32> = (vec3<f32>(x_2573, x_2573, x_2573) * x_2575);
    let x_2577 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2576.x, x_2576.y, x_2576.z, x_2577.w);
    let x_2579 : f32 = u_xlat67;
    u_xlat70 = (1.0f / x_2579);
    let x_2581 : f32 = u_xlat67;
    let x_2582 : i32 = u_xlati65;
    let x_2584 : f32 = x_2554.x_AdditionalLightsAttenuation[x_2582].x;
    u_xlat67 = (x_2581 * x_2584);
    let x_2586 : f32 = u_xlat67;
    let x_2588 : f32 = u_xlat67;
    u_xlat67 = ((-(x_2586) * x_2588) + 1.0f);
    let x_2591 : f32 = u_xlat67;
    u_xlat67 = max(x_2591, 0.0f);
    let x_2593 : f32 = u_xlat67;
    let x_2594 : f32 = u_xlat67;
    u_xlat67 = (x_2593 * x_2594);
    let x_2596 : f32 = u_xlat67;
    let x_2597 : f32 = u_xlat70;
    u_xlat67 = (x_2596 * x_2597);
    let x_2599 : i32 = u_xlati65;
    let x_2601 : vec4<f32> = x_2554.x_AdditionalLightsSpotDir[x_2599];
    let x_2603 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_2601.x, x_2601.y, x_2601.z), vec3<f32>(x_2603.x, x_2603.y, x_2603.z));
    let x_2606 : f32 = u_xlat70;
    let x_2607 : i32 = u_xlati65;
    let x_2609 : f32 = x_2554.x_AdditionalLightsAttenuation[x_2607].z;
    let x_2611 : i32 = u_xlati65;
    let x_2613 : f32 = x_2554.x_AdditionalLightsAttenuation[x_2611].w;
    u_xlat70 = ((x_2606 * x_2609) + x_2613);
    let x_2615 : f32 = u_xlat70;
    u_xlat70 = clamp(x_2615, 0.0f, 1.0f);
    let x_2617 : f32 = u_xlat70;
    let x_2618 : f32 = u_xlat70;
    u_xlat70 = (x_2617 * x_2618);
    let x_2620 : f32 = u_xlat67;
    let x_2621 : f32 = u_xlat70;
    u_xlat67 = (x_2620 * x_2621);
    let x_2623 : f32 = u_xlat68;
    let x_2625 : i32 = u_xlati65;
    let x_2627 : vec4<f32> = x_2554.x_AdditionalLightsColor[x_2625];
    let x_2629 : vec3<f32> = (vec3<f32>(x_2623, x_2623, x_2623) * vec3<f32>(x_2627.x, x_2627.y, x_2627.z));
    let x_2630 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2629.x, x_2629.y, x_2629.z, x_2630.w);
    let x_2632 : vec4<f32> = u_xlat1;
    let x_2634 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2632.x, x_2632.y, x_2632.z), vec3<f32>(x_2634.x, x_2634.y, x_2634.z));
    let x_2637 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2637, 0.0f, 1.0f);
    let x_2639 : f32 = u_xlat65;
    let x_2640 : f32 = u_xlat67;
    u_xlat65 = (x_2639 * x_2640);
    let x_2642 : f32 = u_xlat65;
    let x_2644 : vec4<f32> = u_xlat10;
    let x_2646 : vec3<f32> = (vec3<f32>(x_2642, x_2642, x_2642) * vec3<f32>(x_2644.x, x_2644.y, x_2644.z));
    let x_2647 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2646.x, x_2646.y, x_2646.z, x_2647.w);
    let x_2649 : vec3<f32> = u_xlat29;
    let x_2650 : f32 = u_xlat69;
    let x_2653 : vec4<f32> = u_xlat3;
    u_xlat29 = ((x_2649 * vec3<f32>(x_2650, x_2650, x_2650)) + vec3<f32>(x_2653.x, x_2653.y, x_2653.z));
    let x_2656 : vec3<f32> = u_xlat29;
    let x_2657 : vec3<f32> = u_xlat29;
    u_xlat65 = dot(x_2656, x_2657);
    let x_2659 : f32 = u_xlat65;
    u_xlat65 = max(x_2659, 1.17549435e-37f);
    let x_2661 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_2661);
    let x_2663 : f32 = u_xlat65;
    let x_2665 : vec3<f32> = u_xlat29;
    u_xlat29 = (vec3<f32>(x_2663, x_2663, x_2663) * x_2665);
    let x_2667 : vec4<f32> = u_xlat1;
    let x_2669 : vec3<f32> = u_xlat29;
    u_xlat65 = dot(vec3<f32>(x_2667.x, x_2667.y, x_2667.z), x_2669);
    let x_2671 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2671, 0.0f, 1.0f);
    let x_2673 : vec4<f32> = u_xlat9;
    let x_2675 : vec3<f32> = u_xlat29;
    u_xlat67 = dot(vec3<f32>(x_2673.x, x_2673.y, x_2673.z), x_2675);
    let x_2677 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2677, 0.0f, 1.0f);
    let x_2679 : f32 = u_xlat65;
    let x_2680 : f32 = u_xlat65;
    u_xlat65 = (x_2679 * x_2680);
    let x_2682 : f32 = u_xlat65;
    let x_2684 : f32 = u_xlat8.x;
    u_xlat65 = ((x_2682 * x_2684) + 1.000010014f);
    let x_2687 : f32 = u_xlat67;
    let x_2688 : f32 = u_xlat67;
    u_xlat67 = (x_2687 * x_2688);
    let x_2690 : f32 = u_xlat65;
    let x_2691 : f32 = u_xlat65;
    u_xlat65 = (x_2690 * x_2691);
    let x_2693 : f32 = u_xlat67;
    u_xlat67 = max(x_2693, 0.100000001f);
    let x_2695 : f32 = u_xlat65;
    let x_2696 : f32 = u_xlat67;
    u_xlat65 = (x_2695 * x_2696);
    let x_2698 : f32 = u_xlat66;
    let x_2699 : f32 = u_xlat65;
    u_xlat65 = (x_2698 * x_2699);
    let x_2701 : f32 = u_xlat23;
    let x_2702 : f32 = u_xlat65;
    u_xlat65 = (x_2701 / x_2702);
    let x_2704 : vec4<f32> = u_xlat0;
    let x_2706 : f32 = u_xlat65;
    let x_2709 : vec3<f32> = u_xlat7;
    u_xlat29 = ((vec3<f32>(x_2704.x, x_2704.y, x_2704.z) * vec3<f32>(x_2706, x_2706, x_2706)) + x_2709);
    let x_2711 : vec3<f32> = u_xlat29;
    let x_2712 : vec4<f32> = u_xlat10;
    let x_2715 : vec4<f32> = u_xlat6;
    let x_2717 : vec3<f32> = ((x_2711 * vec3<f32>(x_2712.x, x_2712.y, x_2712.z)) + vec3<f32>(x_2715.x, x_2715.y, x_2715.z));
    let x_2718 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2717.x, x_2717.y, x_2717.z, x_2718.w);

    continuing {
      let x_2720 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2720 + bitcast<u32>(1i));
    }
  }
  let x_2722 : vec4<f32> = u_xlat5;
  let x_2724 : f32 = u_xlat44;
  let x_2727 : vec4<f32> = u_xlat4;
  let x_2729 : vec3<f32> = ((vec3<f32>(x_2722.x, x_2722.y, x_2722.z) * vec3<f32>(x_2724, x_2724, x_2724)) + vec3<f32>(x_2727.x, x_2727.y, x_2727.z));
  let x_2730 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2729.x, x_2729.y, x_2729.z, x_2730.w);
  let x_2732 : vec4<f32> = u_xlat6;
  let x_2734 : vec4<f32> = u_xlat0;
  let x_2736 : vec3<f32> = (vec3<f32>(x_2732.x, x_2732.y, x_2732.z) + vec3<f32>(x_2734.x, x_2734.y, x_2734.z));
  let x_2737 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2736.x, x_2736.y, x_2736.z, x_2737.w);
  let x_2739 : f32 = u_xlat63;
  let x_2740 : f32 = u_xlat63;
  u_xlat63 = (x_2739 * -(x_2740));
  let x_2743 : f32 = u_xlat63;
  u_xlat63 = exp2(x_2743);
  let x_2745 : vec4<f32> = u_xlat0;
  let x_2749 : vec4<f32> = x_44.unity_FogColor;
  let x_2752 : vec3<f32> = (vec3<f32>(x_2745.x, x_2745.y, x_2745.z) + -(vec3<f32>(x_2749.x, x_2749.y, x_2749.z)));
  let x_2753 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2752.x, x_2752.y, x_2752.z, x_2753.w);
  let x_2757 : f32 = u_xlat63;
  let x_2759 : vec4<f32> = u_xlat0;
  let x_2763 : vec4<f32> = x_44.unity_FogColor;
  let x_2765 : vec3<f32> = ((vec3<f32>(x_2757, x_2757, x_2757) * vec3<f32>(x_2759.x, x_2759.y, x_2759.z)) + vec3<f32>(x_2763.x, x_2763.y, x_2763.z));
  let x_2766 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2765.x, x_2765.y, x_2765.z, x_2766.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

