type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_158 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_277 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_378 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3363 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3870 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3980 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_184 : f32;
  var x_197 : f32;
  var x_209 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb46 : bool;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var x_1720 : f32;
  var u_xlatu3 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu68 : u32;
  var u_xlati46 : i32;
  var u_xlat46 : vec2<f32>;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var x_1845 : f32;
  var x_1898 : f32;
  var u_xlat69 : f32;
  var u_xlat26 : vec2<f32>;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat71 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3313 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3446 : f32;
  var x_3458 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat73 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4272 : f32;
  var x_4285 : f32;
  var x_4337 : f32;
  var x_4348 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_148 : vec3<f32> = u_xlat22;
  let x_149 : vec3<f32> = u_xlat0;
  let x_151 : vec3<f32> = (x_148 * vec3<f32>(x_149.x, x_149.x, x_149.x));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_151.z, x_152.w);
  let x_161 : f32 = x_158.unity_OrthoParams.w;
  u_xlatb0 = (x_161 == 0.0f);
  let x_165 : vec3<f32> = vs_INTERP0;
  let x_170 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_165) + x_170);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_173, x_174);
  let x_176 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_176);
  let x_178 : f32 = u_xlat67;
  let x_180 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_178, x_178, x_178) * x_180);
  let x_183 : bool = u_xlatb0;
  if (x_183) {
    let x_188 : f32 = u_xlat4.x;
    x_184 = x_188;
  } else {
    let x_193 : f32 = x_158.unity_MatrixV[0i].z;
    x_184 = x_193;
  }
  let x_194 : f32 = x_184;
  u_xlat5.x = x_194;
  let x_196 : bool = u_xlatb0;
  if (x_196) {
    let x_201 : f32 = u_xlat4.y;
    x_197 = x_201;
  } else {
    let x_205 : f32 = x_158.unity_MatrixV[1i].z;
    x_197 = x_205;
  }
  let x_206 : f32 = x_197;
  u_xlat5.y = x_206;
  let x_208 : bool = u_xlatb0;
  if (x_208) {
    let x_213 : f32 = u_xlat4.z;
    x_209 = x_213;
  } else {
    let x_217 : f32 = x_158.unity_MatrixV[2i].z;
    x_209 = x_217;
  }
  let x_218 : f32 = x_209;
  u_xlat5.z = x_218;
  let x_220 : vec3<f32> = u_xlat5;
  let x_224 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat4 = (vec3<f32>(x_220.y, x_220.y, x_220.y) * vec3<f32>(x_224.x, x_224.y, x_224.z));
  let x_228 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_230 : vec3<f32> = u_xlat5;
  let x_233 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_230.x, x_230.x, x_230.x)) + x_233);
  let x_236 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_238 : vec3<f32> = u_xlat5;
  let x_241 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_236.x, x_236.y, x_236.z) * vec3<f32>(x_238.z, x_238.z, x_238.z)) + x_241);
  let x_243 : vec3<f32> = u_xlat4;
  let x_244 : vec3<f32> = u_xlat4;
  u_xlat0.x = dot(x_243, x_244);
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_248);
  let x_251 : vec3<f32> = u_xlat0;
  let x_253 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_251.x, x_251.x, x_251.x) * x_253);
  let x_267 : vec4<f32> = vs_INTERP3;
  let x_270 : f32 = x_158.x_GlobalMipBias.x;
  let x_271 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_267.x, x_267.y), x_270);
  u_xlat6 = x_271;
  let x_273 : vec4<f32> = u_xlat6;
  let x_279 : vec4<f32> = x_277.Color_C30C7CA3;
  let x_281 : vec3<f32> = (vec3<f32>(x_273.x, x_273.y, x_273.z) * vec3<f32>(x_279.x, x_279.y, x_279.z));
  let x_282 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_290 : vec4<f32> = vs_INTERP3;
  let x_293 : f32 = x_158.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat8 = vec4<f32>(x_294.w, x_294.x, x_294.y, x_294.z);
  let x_297 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_297.y, x_297.z, x_297.w, x_297.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_304 : vec4<f32> = u_xlat9;
  let x_305 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_304, x_305);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_309);
  let x_313 : vec3<f32> = u_xlat0;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_313.x, x_313.x, x_313.x) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_320 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_320 * 200.0f);
  let x_325 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_325, 1.0f);
  let x_328 : vec3<f32> = u_xlat0;
  let x_330 : vec4<f32> = u_xlat6;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.x, x_328.x, x_328.x) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = u_xlat30;
  let x_339 : vec3<f32> = (vec3<f32>(x_335.x, x_335.y, x_335.z) * vec3<f32>(x_337.y, x_337.y, x_337.y));
  let x_340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_339.x, x_339.y, x_339.z, x_340.w);
  let x_342 : vec3<f32> = u_xlat30;
  let x_344 : vec3<f32> = u_xlat2;
  let x_346 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_342.x, x_342.x, x_342.x) * x_344) + vec3<f32>(x_346.x, x_346.y, x_346.z));
  let x_349 : vec3<f32> = u_xlat30;
  let x_351 : vec3<f32> = u_xlat1;
  let x_353 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_349.z, x_349.z, x_349.z) * x_351) + x_353);
  let x_355 : vec3<f32> = u_xlat1;
  let x_356 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_355, x_356);
  let x_360 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_360, 1.17549435e-37f);
  let x_365 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_365);
  let x_368 : vec3<f32> = u_xlat0;
  let x_370 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_368.x, x_368.x, x_368.x) * x_370);
  let x_372 : vec3<f32> = vs_INTERP0;
  let x_380 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_372.y, x_372.y, x_372.y) * vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_384 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][0i];
  let x_386 : vec3<f32> = vs_INTERP0;
  let x_389 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_384.x, x_384.y, x_384.z) * vec3<f32>(x_386.x, x_386.x, x_386.x)) + x_389);
  let x_392 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][2i];
  let x_394 : vec3<f32> = vs_INTERP0;
  let x_397 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_392.x, x_392.y, x_392.z) * vec3<f32>(x_394.z, x_394.z, x_394.z)) + x_397);
  let x_399 : vec3<f32> = u_xlat2;
  let x_401 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_399 + vec3<f32>(x_401.x, x_401.y, x_401.z));
  let x_406 : f32 = x_378.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_406);
  let x_408 : bool = u_xlatb0;
  if (x_408) {
    let x_413 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb67 = (x_413 == 1.0f);
    let x_415 : bool = u_xlatb67;
    if (x_415) {
      let x_418 : vec3<f32> = u_xlat2;
      let x_422 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_418.x, x_418.y, x_418.x, x_418.y) + x_422);
      let x_425 : vec4<f32> = u_xlat3;
      let x_426 : vec2<f32> = vec2<f32>(x_425.x, x_425.y);
      let x_428 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_426.x, x_426.y, x_428);
      let x_440 : vec3<f32> = txVec0;
      let x_442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_440.xy, x_440.z);
      u_xlat9.x = x_442;
      let x_445 : vec4<f32> = u_xlat3;
      let x_446 : vec2<f32> = vec2<f32>(x_445.z, x_445.w);
      let x_448 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_446.x, x_446.y, x_448);
      let x_455 : vec3<f32> = txVec1;
      let x_457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_455.xy, x_455.z);
      u_xlat9.y = x_457;
      let x_459 : vec3<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_476 : vec3<f32> = txVec2;
      let x_478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_476.xy, x_476.z);
      u_xlat9.z = x_478;
      let x_481 : vec4<f32> = u_xlat3;
      let x_482 : vec2<f32> = vec2<f32>(x_481.z, x_481.w);
      let x_484 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_482.x, x_482.y, x_484);
      let x_491 : vec3<f32> = txVec3;
      let x_493 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_491.xy, x_491.z);
      u_xlat9.w = x_493;
      let x_495 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_495, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_502 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb68 = (x_502 == 2.0f);
      let x_504 : bool = u_xlatb68;
      if (x_504) {
        let x_507 : vec3<f32> = u_xlat2;
        let x_510 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_515 : vec2<f32> = ((vec2<f32>(x_507.x, x_507.y) * vec2<f32>(x_510.z, x_510.w)) + vec2<f32>(0.5f, 0.5f));
        let x_516 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_515.x, x_515.y, x_516.z, x_516.w);
        let x_518 : vec4<f32> = u_xlat3;
        let x_520 : vec2<f32> = floor(vec2<f32>(x_518.x, x_518.y));
        let x_521 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_520.x, x_520.y, x_521.z, x_521.w);
        let x_525 : vec3<f32> = u_xlat2;
        let x_528 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_531 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_525.x, x_525.y) * vec2<f32>(x_528.z, x_528.w)) + -(vec2<f32>(x_531.x, x_531.y)));
        let x_535 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_535.x, x_535.x, x_535.y, x_535.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_540 : vec4<f32> = u_xlat9;
        let x_542 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_540.x, x_540.x, x_540.z, x_540.z) * vec4<f32>(x_542.x, x_542.x, x_542.z, x_542.z));
        let x_545 : vec4<f32> = u_xlat10;
        let x_549 : vec2<f32> = (vec2<f32>(x_545.y, x_545.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_550 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_549.x, x_550.y, x_549.y, x_550.w);
        let x_552 : vec4<f32> = u_xlat10;
        let x_555 : vec2<f32> = u_xlat47;
        let x_557 : vec2<f32> = ((vec2<f32>(x_552.x, x_552.z) * vec2<f32>(0.5f, 0.5f)) + -(x_555));
        let x_558 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_561 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_561) + vec2<f32>(1.0f, 1.0f));
        let x_566 : vec2<f32> = u_xlat47;
        let x_568 : vec2<f32> = min(x_566, vec2<f32>(0.0f, 0.0f));
        let x_569 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_568.x, x_568.y, x_569.z, x_569.w);
        let x_571 : vec4<f32> = u_xlat11;
        let x_574 : vec4<f32> = u_xlat11;
        let x_577 : vec2<f32> = u_xlat54;
        let x_578 : vec2<f32> = ((-(vec2<f32>(x_571.x, x_571.y)) * vec2<f32>(x_574.x, x_574.y)) + x_577);
        let x_579 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_578.x, x_578.y, x_579.z, x_579.w);
        let x_581 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_581, vec2<f32>(0.0f, 0.0f));
        let x_583 : vec2<f32> = u_xlat47;
        let x_585 : vec2<f32> = u_xlat47;
        let x_587 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_583) * x_585) + vec2<f32>(x_587.y, x_587.w));
        let x_590 : vec4<f32> = u_xlat11;
        let x_592 : vec2<f32> = (vec2<f32>(x_590.x, x_590.y) + vec2<f32>(1.0f, 1.0f));
        let x_593 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_592.x, x_592.y, x_593.z, x_593.w);
        let x_595 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_595 + vec2<f32>(1.0f, 1.0f));
        let x_598 : vec4<f32> = u_xlat10;
        let x_602 : vec2<f32> = (vec2<f32>(x_598.x, x_598.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_603 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_602.x, x_602.y, x_603.z, x_603.w);
        let x_605 : vec2<f32> = u_xlat54;
        let x_606 : vec2<f32> = (x_605 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_607 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_606.x, x_606.y, x_607.z, x_607.w);
        let x_609 : vec4<f32> = u_xlat11;
        let x_611 : vec2<f32> = (vec2<f32>(x_609.x, x_609.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_612 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_611.x, x_611.y, x_612.z, x_612.w);
        let x_615 : vec2<f32> = u_xlat47;
        let x_616 : vec2<f32> = (x_615 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_617 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_616.x, x_616.y, x_617.z, x_617.w);
        let x_619 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_619.y, x_619.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_623 : f32 = u_xlat11.x;
        u_xlat12.z = x_623;
        let x_626 : f32 = u_xlat47.x;
        u_xlat12.w = x_626;
        let x_629 : f32 = u_xlat13.x;
        u_xlat10.z = x_629;
        let x_632 : f32 = u_xlat9.x;
        u_xlat10.w = x_632;
        let x_635 : vec4<f32> = u_xlat10;
        let x_637 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_635.z, x_635.w, x_635.x, x_635.z) + vec4<f32>(x_637.z, x_637.w, x_637.x, x_637.z));
        let x_641 : f32 = u_xlat12.y;
        u_xlat11.z = x_641;
        let x_644 : f32 = u_xlat47.y;
        u_xlat11.w = x_644;
        let x_647 : f32 = u_xlat10.y;
        u_xlat13.z = x_647;
        let x_650 : f32 = u_xlat9.z;
        u_xlat13.w = x_650;
        let x_652 : vec4<f32> = u_xlat11;
        let x_654 : vec4<f32> = u_xlat13;
        let x_656 : vec3<f32> = (vec3<f32>(x_652.z, x_652.y, x_652.w) + vec3<f32>(x_654.z, x_654.y, x_654.w));
        let x_657 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_656.x, x_656.y, x_656.z, x_657.w);
        let x_659 : vec4<f32> = u_xlat10;
        let x_661 : vec4<f32> = u_xlat14;
        let x_663 : vec3<f32> = (vec3<f32>(x_659.x, x_659.z, x_659.w) / vec3<f32>(x_661.z, x_661.w, x_661.y));
        let x_664 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_663.x, x_663.y, x_663.z, x_664.w);
        let x_666 : vec4<f32> = u_xlat10;
        let x_672 : vec3<f32> = (vec3<f32>(x_666.x, x_666.y, x_666.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_673 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_672.x, x_672.y, x_672.z, x_673.w);
        let x_675 : vec4<f32> = u_xlat13;
        let x_677 : vec4<f32> = u_xlat9;
        let x_679 : vec3<f32> = (vec3<f32>(x_675.z, x_675.y, x_675.w) / vec3<f32>(x_677.x, x_677.y, x_677.z));
        let x_680 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_679.x, x_679.y, x_679.z, x_680.w);
        let x_682 : vec4<f32> = u_xlat11;
        let x_684 : vec3<f32> = (vec3<f32>(x_682.x, x_682.y, x_682.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_685 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_684.x, x_684.y, x_684.z, x_685.w);
        let x_687 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_692 : vec3<f32> = (vec3<f32>(x_687.y, x_687.x, x_687.z) * vec3<f32>(x_690.x, x_690.x, x_690.x));
        let x_693 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat11;
        let x_698 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_700 : vec3<f32> = (vec3<f32>(x_695.x, x_695.y, x_695.z) * vec3<f32>(x_698.y, x_698.y, x_698.y));
        let x_701 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_700.x, x_700.y, x_700.z, x_701.w);
        let x_704 : f32 = u_xlat11.x;
        u_xlat10.w = x_704;
        let x_706 : vec4<f32> = u_xlat3;
        let x_709 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_712 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_706.x, x_706.y, x_706.x, x_706.y) * vec4<f32>(x_709.x, x_709.y, x_709.x, x_709.y)) + vec4<f32>(x_712.y, x_712.w, x_712.x, x_712.w));
        let x_715 : vec4<f32> = u_xlat3;
        let x_718 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_715.x, x_715.y) * vec2<f32>(x_718.x, x_718.y)) + vec2<f32>(x_721.z, x_721.w));
        let x_725 : f32 = u_xlat10.y;
        u_xlat11.w = x_725;
        let x_727 : vec4<f32> = u_xlat11;
        let x_728 : vec2<f32> = vec2<f32>(x_727.y, x_727.z);
        let x_729 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_729.x, x_728.x, x_729.z, x_728.y);
        let x_731 : vec4<f32> = u_xlat3;
        let x_734 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_731.x, x_731.y, x_731.x, x_731.y) * vec4<f32>(x_734.x, x_734.y, x_734.x, x_734.y)) + vec4<f32>(x_737.x, x_737.y, x_737.z, x_737.y));
        let x_740 : vec4<f32> = u_xlat3;
        let x_743 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_746 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_740.x, x_740.y, x_740.x, x_740.y) * vec4<f32>(x_743.x, x_743.y, x_743.x, x_743.y)) + vec4<f32>(x_746.w, x_746.y, x_746.w, x_746.z));
        let x_749 : vec4<f32> = u_xlat3;
        let x_752 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_755 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_749.x, x_749.y, x_749.x, x_749.y) * vec4<f32>(x_752.x, x_752.y, x_752.x, x_752.y)) + vec4<f32>(x_755.x, x_755.w, x_755.z, x_755.w));
        let x_759 : vec4<f32> = u_xlat9;
        let x_761 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_759.x, x_759.x, x_759.x, x_759.y) * vec4<f32>(x_761.z, x_761.w, x_761.y, x_761.z));
        let x_765 : vec4<f32> = u_xlat9;
        let x_767 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_765.y, x_765.y, x_765.z, x_765.z) * x_767);
        let x_771 : f32 = u_xlat9.z;
        let x_773 : f32 = u_xlat14.y;
        u_xlat68 = (x_771 * x_773);
        let x_776 : vec4<f32> = u_xlat12;
        let x_777 : vec2<f32> = vec2<f32>(x_776.x, x_776.y);
        let x_779 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_777.x, x_777.y, x_779);
        let x_786 : vec3<f32> = txVec4;
        let x_788 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_786.xy, x_786.z);
        u_xlat3.x = x_788;
        let x_791 : vec4<f32> = u_xlat12;
        let x_792 : vec2<f32> = vec2<f32>(x_791.z, x_791.w);
        let x_794 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_792.x, x_792.y, x_794);
        let x_802 : vec3<f32> = txVec5;
        let x_804 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_802.xy, x_802.z);
        u_xlat25 = x_804;
        let x_805 : f32 = u_xlat25;
        let x_807 : f32 = u_xlat15.y;
        u_xlat25 = (x_805 * x_807);
        let x_810 : f32 = u_xlat15.x;
        let x_812 : f32 = u_xlat3.x;
        let x_814 : f32 = u_xlat25;
        u_xlat3.x = ((x_810 * x_812) + x_814);
        let x_818 : vec2<f32> = u_xlat47;
        let x_820 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_818.x, x_818.y, x_820);
        let x_827 : vec3<f32> = txVec6;
        let x_829 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_827.xy, x_827.z);
        u_xlat25 = x_829;
        let x_831 : f32 = u_xlat15.z;
        let x_832 : f32 = u_xlat25;
        let x_835 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_831 * x_832) + x_835);
        let x_839 : vec4<f32> = u_xlat11;
        let x_840 : vec2<f32> = vec2<f32>(x_839.x, x_839.y);
        let x_842 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_840.x, x_840.y, x_842);
        let x_849 : vec3<f32> = txVec7;
        let x_851 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_849.xy, x_849.z);
        u_xlat25 = x_851;
        let x_853 : f32 = u_xlat15.w;
        let x_854 : f32 = u_xlat25;
        let x_857 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_853 * x_854) + x_857);
        let x_861 : vec4<f32> = u_xlat13;
        let x_862 : vec2<f32> = vec2<f32>(x_861.x, x_861.y);
        let x_864 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_862.x, x_862.y, x_864);
        let x_871 : vec3<f32> = txVec8;
        let x_873 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_871.xy, x_871.z);
        u_xlat25 = x_873;
        let x_875 : f32 = u_xlat16.x;
        let x_876 : f32 = u_xlat25;
        let x_879 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_875 * x_876) + x_879);
        let x_883 : vec4<f32> = u_xlat13;
        let x_884 : vec2<f32> = vec2<f32>(x_883.z, x_883.w);
        let x_886 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_884.x, x_884.y, x_886);
        let x_893 : vec3<f32> = txVec9;
        let x_895 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_893.xy, x_893.z);
        u_xlat25 = x_895;
        let x_897 : f32 = u_xlat16.y;
        let x_898 : f32 = u_xlat25;
        let x_901 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_897 * x_898) + x_901);
        let x_905 : vec4<f32> = u_xlat11;
        let x_906 : vec2<f32> = vec2<f32>(x_905.z, x_905.w);
        let x_908 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_906.x, x_906.y, x_908);
        let x_915 : vec3<f32> = txVec10;
        let x_917 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_915.xy, x_915.z);
        u_xlat25 = x_917;
        let x_919 : f32 = u_xlat16.z;
        let x_920 : f32 = u_xlat25;
        let x_923 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_919 * x_920) + x_923);
        let x_927 : vec4<f32> = u_xlat10;
        let x_928 : vec2<f32> = vec2<f32>(x_927.x, x_927.y);
        let x_930 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_928.x, x_928.y, x_930);
        let x_937 : vec3<f32> = txVec11;
        let x_939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_937.xy, x_937.z);
        u_xlat25 = x_939;
        let x_941 : f32 = u_xlat16.w;
        let x_942 : f32 = u_xlat25;
        let x_945 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_941 * x_942) + x_945);
        let x_949 : vec4<f32> = u_xlat10;
        let x_950 : vec2<f32> = vec2<f32>(x_949.z, x_949.w);
        let x_952 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_950.x, x_950.y, x_952);
        let x_959 : vec3<f32> = txVec12;
        let x_961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_959.xy, x_959.z);
        u_xlat25 = x_961;
        let x_962 : f32 = u_xlat68;
        let x_963 : f32 = u_xlat25;
        let x_966 : f32 = u_xlat3.x;
        u_xlat67 = ((x_962 * x_963) + x_966);
      } else {
        let x_969 : vec3<f32> = u_xlat2;
        let x_972 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_975 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.z, x_972.w)) + vec2<f32>(0.5f, 0.5f));
        let x_976 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_975.x, x_975.y, x_976.z, x_976.w);
        let x_978 : vec4<f32> = u_xlat3;
        let x_980 : vec2<f32> = floor(vec2<f32>(x_978.x, x_978.y));
        let x_981 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_980.x, x_980.y, x_981.z, x_981.w);
        let x_983 : vec3<f32> = u_xlat2;
        let x_986 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_989 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_983.x, x_983.y) * vec2<f32>(x_986.z, x_986.w)) + -(vec2<f32>(x_989.x, x_989.y)));
        let x_993 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_993.x, x_993.x, x_993.y, x_993.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_996 : vec4<f32> = u_xlat9;
        let x_998 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_996.x, x_996.x, x_996.z, x_996.z) * vec4<f32>(x_998.x, x_998.x, x_998.z, x_998.z));
        let x_1001 : vec4<f32> = u_xlat10;
        let x_1005 : vec2<f32> = (vec2<f32>(x_1001.y, x_1001.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1006 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1006.x, x_1005.x, x_1006.z, x_1005.y);
        let x_1008 : vec4<f32> = u_xlat10;
        let x_1011 : vec2<f32> = u_xlat47;
        let x_1013 : vec2<f32> = ((vec2<f32>(x_1008.x, x_1008.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1011));
        let x_1014 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1013.x, x_1014.y, x_1013.y, x_1014.w);
        let x_1016 : vec2<f32> = u_xlat47;
        let x_1018 : vec2<f32> = (-(x_1016) + vec2<f32>(1.0f, 1.0f));
        let x_1019 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1018.x, x_1018.y, x_1019.z, x_1019.w);
        let x_1021 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1021, vec2<f32>(0.0f, 0.0f));
        let x_1023 : vec2<f32> = u_xlat54;
        let x_1025 : vec2<f32> = u_xlat54;
        let x_1027 : vec4<f32> = u_xlat10;
        let x_1029 : vec2<f32> = ((-(x_1023) * x_1025) + vec2<f32>(x_1027.x, x_1027.y));
        let x_1030 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
        let x_1032 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1032, vec2<f32>(0.0f, 0.0f));
        let x_1035 : vec2<f32> = u_xlat54;
        let x_1037 : vec2<f32> = u_xlat54;
        let x_1039 : vec4<f32> = u_xlat9;
        let x_1041 : vec2<f32> = ((-(x_1035) * x_1037) + vec2<f32>(x_1039.y, x_1039.w));
        let x_1042 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1041.x, x_1042.y, x_1041.y);
        let x_1044 : vec4<f32> = u_xlat10;
        let x_1047 : vec2<f32> = (vec2<f32>(x_1044.x, x_1044.y) + vec2<f32>(2.0f, 2.0f));
        let x_1048 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1047.x, x_1047.y, x_1048.z, x_1048.w);
        let x_1050 : vec3<f32> = u_xlat31;
        let x_1052 : vec2<f32> = (vec2<f32>(x_1050.x, x_1050.z) + vec2<f32>(2.0f, 2.0f));
        let x_1053 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1056 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1056 * 0.081632003f);
        let x_1060 : vec4<f32> = u_xlat9;
        let x_1063 : vec3<f32> = (vec3<f32>(x_1060.z, x_1060.x, x_1060.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1064 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1063.x, x_1063.y, x_1063.z, x_1064.w);
        let x_1066 : vec4<f32> = u_xlat10;
        let x_1069 : vec2<f32> = (vec2<f32>(x_1066.x, x_1066.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1070 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1069.x, x_1069.y, x_1070.z, x_1070.w);
        let x_1073 : f32 = u_xlat13.y;
        u_xlat12.x = x_1073;
        let x_1075 : vec2<f32> = u_xlat47;
        let x_1082 : vec2<f32> = ((vec2<f32>(x_1075.x, x_1075.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1083 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1083.x, x_1082.x, x_1083.z, x_1082.y);
        let x_1085 : vec2<f32> = u_xlat47;
        let x_1089 : vec2<f32> = ((vec2<f32>(x_1085.x, x_1085.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1090 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1089.x, x_1090.y, x_1089.y, x_1090.w);
        let x_1093 : f32 = u_xlat9.x;
        u_xlat10.y = x_1093;
        let x_1096 : f32 = u_xlat11.y;
        u_xlat10.w = x_1096;
        let x_1098 : vec4<f32> = u_xlat10;
        let x_1099 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1098 + x_1099);
        let x_1101 : vec2<f32> = u_xlat47;
        let x_1104 : vec2<f32> = ((vec2<f32>(x_1101.y, x_1101.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1105 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1105.x, x_1104.x, x_1105.z, x_1104.y);
        let x_1107 : vec2<f32> = u_xlat47;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1107.y, x_1107.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat9.y;
        u_xlat11.y = x_1114;
        let x_1116 : vec4<f32> = u_xlat11;
        let x_1117 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1116 + x_1117);
        let x_1119 : vec4<f32> = u_xlat10;
        let x_1120 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1119 / x_1120);
        let x_1122 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1122 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1128 : vec4<f32> = u_xlat11;
        let x_1129 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1128 / x_1129);
        let x_1131 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1131 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1133 : vec4<f32> = u_xlat10;
        let x_1136 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1133.w, x_1133.x, x_1133.y, x_1133.z) * vec4<f32>(x_1136.x, x_1136.x, x_1136.x, x_1136.x));
        let x_1139 : vec4<f32> = u_xlat11;
        let x_1142 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1139.x, x_1139.w, x_1139.y, x_1139.z) * vec4<f32>(x_1142.y, x_1142.y, x_1142.y, x_1142.y));
        let x_1145 : vec4<f32> = u_xlat10;
        let x_1146 : vec3<f32> = vec3<f32>(x_1145.y, x_1145.z, x_1145.w);
        let x_1147 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1146.z);
        let x_1150 : f32 = u_xlat11.x;
        u_xlat13.y = x_1150;
        let x_1152 : vec4<f32> = u_xlat3;
        let x_1155 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1158 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1152.x, x_1152.y, x_1152.x, x_1152.y) * vec4<f32>(x_1155.x, x_1155.y, x_1155.x, x_1155.y)) + vec4<f32>(x_1158.x, x_1158.y, x_1158.z, x_1158.y));
        let x_1161 : vec4<f32> = u_xlat3;
        let x_1164 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1161.x, x_1161.y) * vec2<f32>(x_1164.x, x_1164.y)) + vec2<f32>(x_1167.w, x_1167.y));
        let x_1171 : f32 = u_xlat13.y;
        u_xlat10.y = x_1171;
        let x_1174 : f32 = u_xlat11.z;
        u_xlat13.y = x_1174;
        let x_1176 : vec4<f32> = u_xlat3;
        let x_1179 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1182 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y) * vec4<f32>(x_1179.x, x_1179.y, x_1179.x, x_1179.y)) + vec4<f32>(x_1182.x, x_1182.y, x_1182.z, x_1182.y));
        let x_1185 : vec4<f32> = u_xlat3;
        let x_1188 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1191 : vec4<f32> = u_xlat13;
        let x_1193 : vec2<f32> = ((vec2<f32>(x_1185.x, x_1185.y) * vec2<f32>(x_1188.x, x_1188.y)) + vec2<f32>(x_1191.w, x_1191.y));
        let x_1194 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1193.x, x_1193.y, x_1194.z, x_1194.w);
        let x_1197 : f32 = u_xlat13.y;
        u_xlat10.z = x_1197;
        let x_1200 : vec4<f32> = u_xlat3;
        let x_1203 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1206 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y) * vec4<f32>(x_1203.x, x_1203.y, x_1203.x, x_1203.y)) + vec4<f32>(x_1206.x, x_1206.y, x_1206.x, x_1206.z));
        let x_1210 : f32 = u_xlat11.w;
        u_xlat13.y = x_1210;
        let x_1213 : vec4<f32> = u_xlat3;
        let x_1216 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1219 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1213.x, x_1213.y, x_1213.x, x_1213.y) * vec4<f32>(x_1216.x, x_1216.y, x_1216.x, x_1216.y)) + vec4<f32>(x_1219.x, x_1219.y, x_1219.z, x_1219.y));
        let x_1223 : vec4<f32> = u_xlat3;
        let x_1226 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1229 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1223.x, x_1223.y) * vec2<f32>(x_1226.x, x_1226.y)) + vec2<f32>(x_1229.w, x_1229.y));
        let x_1233 : f32 = u_xlat13.y;
        u_xlat10.w = x_1233;
        let x_1236 : vec4<f32> = u_xlat3;
        let x_1239 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1236.x, x_1236.y) * vec2<f32>(x_1239.x, x_1239.y)) + vec2<f32>(x_1242.x, x_1242.w));
        let x_1245 : vec4<f32> = u_xlat13;
        let x_1246 : vec3<f32> = vec3<f32>(x_1245.x, x_1245.z, x_1245.w);
        let x_1247 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1246.x, x_1247.y, x_1246.y, x_1246.z);
        let x_1249 : vec4<f32> = u_xlat3;
        let x_1252 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1255 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y) * vec4<f32>(x_1252.x, x_1252.y, x_1252.x, x_1252.y)) + vec4<f32>(x_1255.x, x_1255.y, x_1255.z, x_1255.y));
        let x_1259 : vec4<f32> = u_xlat3;
        let x_1262 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.w, x_1265.y));
        let x_1269 : f32 = u_xlat10.x;
        u_xlat11.x = x_1269;
        let x_1271 : vec4<f32> = u_xlat3;
        let x_1274 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1277 : vec4<f32> = u_xlat11;
        let x_1279 : vec2<f32> = ((vec2<f32>(x_1271.x, x_1271.y) * vec2<f32>(x_1274.x, x_1274.y)) + vec2<f32>(x_1277.x, x_1277.y));
        let x_1280 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1279.x, x_1279.y, x_1280.z, x_1280.w);
        let x_1283 : vec4<f32> = u_xlat9;
        let x_1285 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1283.x, x_1283.x, x_1283.x, x_1283.x) * x_1285);
        let x_1288 : vec4<f32> = u_xlat9;
        let x_1290 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1288.y, x_1288.y, x_1288.y, x_1288.y) * x_1290);
        let x_1293 : vec4<f32> = u_xlat9;
        let x_1295 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1293.z, x_1293.z, x_1293.z, x_1293.z) * x_1295);
        let x_1297 : vec4<f32> = u_xlat9;
        let x_1299 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1297.w, x_1297.w, x_1297.w, x_1297.w) * x_1299);
        let x_1302 : vec4<f32> = u_xlat14;
        let x_1303 : vec2<f32> = vec2<f32>(x_1302.x, x_1302.y);
        let x_1305 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec13;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat68 = x_1314;
        let x_1316 : vec4<f32> = u_xlat14;
        let x_1317 : vec2<f32> = vec2<f32>(x_1316.z, x_1316.w);
        let x_1319 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1317.x, x_1317.y, x_1319);
        let x_1327 : vec3<f32> = txVec14;
        let x_1329 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1327.xy, x_1327.z);
        u_xlat70 = x_1329;
        let x_1330 : f32 = u_xlat70;
        let x_1332 : f32 = u_xlat19.y;
        u_xlat70 = (x_1330 * x_1332);
        let x_1335 : f32 = u_xlat19.x;
        let x_1336 : f32 = u_xlat68;
        let x_1338 : f32 = u_xlat70;
        u_xlat68 = ((x_1335 * x_1336) + x_1338);
        let x_1341 : vec2<f32> = u_xlat47;
        let x_1343 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1341.x, x_1341.y, x_1343);
        let x_1350 : vec3<f32> = txVec15;
        let x_1352 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1350.xy, x_1350.z);
        u_xlat47.x = x_1352;
        let x_1355 : f32 = u_xlat19.z;
        let x_1357 : f32 = u_xlat47.x;
        let x_1359 : f32 = u_xlat68;
        u_xlat68 = ((x_1355 * x_1357) + x_1359);
        let x_1362 : vec4<f32> = u_xlat17;
        let x_1363 : vec2<f32> = vec2<f32>(x_1362.x, x_1362.y);
        let x_1365 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec16;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat47.x = x_1374;
        let x_1377 : f32 = u_xlat19.w;
        let x_1379 : f32 = u_xlat47.x;
        let x_1381 : f32 = u_xlat68;
        u_xlat68 = ((x_1377 * x_1379) + x_1381);
        let x_1384 : vec4<f32> = u_xlat15;
        let x_1385 : vec2<f32> = vec2<f32>(x_1384.x, x_1384.y);
        let x_1387 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1385.x, x_1385.y, x_1387);
        let x_1394 : vec3<f32> = txVec17;
        let x_1396 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1394.xy, x_1394.z);
        u_xlat47.x = x_1396;
        let x_1399 : f32 = u_xlat20.x;
        let x_1401 : f32 = u_xlat47.x;
        let x_1403 : f32 = u_xlat68;
        u_xlat68 = ((x_1399 * x_1401) + x_1403);
        let x_1406 : vec4<f32> = u_xlat15;
        let x_1407 : vec2<f32> = vec2<f32>(x_1406.z, x_1406.w);
        let x_1409 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1407.x, x_1407.y, x_1409);
        let x_1416 : vec3<f32> = txVec18;
        let x_1418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1416.xy, x_1416.z);
        u_xlat47.x = x_1418;
        let x_1421 : f32 = u_xlat20.y;
        let x_1423 : f32 = u_xlat47.x;
        let x_1425 : f32 = u_xlat68;
        u_xlat68 = ((x_1421 * x_1423) + x_1425);
        let x_1428 : vec4<f32> = u_xlat16;
        let x_1429 : vec2<f32> = vec2<f32>(x_1428.x, x_1428.y);
        let x_1431 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1429.x, x_1429.y, x_1431);
        let x_1438 : vec3<f32> = txVec19;
        let x_1440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1438.xy, x_1438.z);
        u_xlat47.x = x_1440;
        let x_1443 : f32 = u_xlat20.z;
        let x_1445 : f32 = u_xlat47.x;
        let x_1447 : f32 = u_xlat68;
        u_xlat68 = ((x_1443 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat17;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.z, x_1450.w);
        let x_1453 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec20;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat47.x = x_1462;
        let x_1465 : f32 = u_xlat20.w;
        let x_1467 : f32 = u_xlat47.x;
        let x_1469 : f32 = u_xlat68;
        u_xlat68 = ((x_1465 * x_1467) + x_1469);
        let x_1472 : vec4<f32> = u_xlat18;
        let x_1473 : vec2<f32> = vec2<f32>(x_1472.x, x_1472.y);
        let x_1475 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1473.x, x_1473.y, x_1475);
        let x_1482 : vec3<f32> = txVec21;
        let x_1484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1482.xy, x_1482.z);
        u_xlat47.x = x_1484;
        let x_1487 : f32 = u_xlat21.x;
        let x_1489 : f32 = u_xlat47.x;
        let x_1491 : f32 = u_xlat68;
        u_xlat68 = ((x_1487 * x_1489) + x_1491);
        let x_1494 : vec4<f32> = u_xlat18;
        let x_1495 : vec2<f32> = vec2<f32>(x_1494.z, x_1494.w);
        let x_1497 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1495.x, x_1495.y, x_1497);
        let x_1504 : vec3<f32> = txVec22;
        let x_1506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1504.xy, x_1504.z);
        u_xlat47.x = x_1506;
        let x_1509 : f32 = u_xlat21.y;
        let x_1511 : f32 = u_xlat47.x;
        let x_1513 : f32 = u_xlat68;
        u_xlat68 = ((x_1509 * x_1511) + x_1513);
        let x_1516 : vec2<f32> = u_xlat32;
        let x_1518 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1516.x, x_1516.y, x_1518);
        let x_1525 : vec3<f32> = txVec23;
        let x_1527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1525.xy, x_1525.z);
        u_xlat47.x = x_1527;
        let x_1530 : f32 = u_xlat21.z;
        let x_1532 : f32 = u_xlat47.x;
        let x_1534 : f32 = u_xlat68;
        u_xlat68 = ((x_1530 * x_1532) + x_1534);
        let x_1537 : vec2<f32> = u_xlat60;
        let x_1539 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1537.x, x_1537.y, x_1539);
        let x_1546 : vec3<f32> = txVec24;
        let x_1548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1546.xy, x_1546.z);
        u_xlat47.x = x_1548;
        let x_1551 : f32 = u_xlat21.w;
        let x_1553 : f32 = u_xlat47.x;
        let x_1555 : f32 = u_xlat68;
        u_xlat68 = ((x_1551 * x_1553) + x_1555);
        let x_1558 : vec4<f32> = u_xlat13;
        let x_1559 : vec2<f32> = vec2<f32>(x_1558.x, x_1558.y);
        let x_1561 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1559.x, x_1559.y, x_1561);
        let x_1568 : vec3<f32> = txVec25;
        let x_1570 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1568.xy, x_1568.z);
        u_xlat47.x = x_1570;
        let x_1573 : f32 = u_xlat9.x;
        let x_1575 : f32 = u_xlat47.x;
        let x_1577 : f32 = u_xlat68;
        u_xlat68 = ((x_1573 * x_1575) + x_1577);
        let x_1580 : vec4<f32> = u_xlat13;
        let x_1581 : vec2<f32> = vec2<f32>(x_1580.z, x_1580.w);
        let x_1583 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1581.x, x_1581.y, x_1583);
        let x_1590 : vec3<f32> = txVec26;
        let x_1592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1590.xy, x_1590.z);
        u_xlat47.x = x_1592;
        let x_1595 : f32 = u_xlat9.y;
        let x_1597 : f32 = u_xlat47.x;
        let x_1599 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1597) + x_1599);
        let x_1602 : vec2<f32> = u_xlat55;
        let x_1604 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1602.x, x_1602.y, x_1604);
        let x_1611 : vec3<f32> = txVec27;
        let x_1613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1611.xy, x_1611.z);
        u_xlat47.x = x_1613;
        let x_1616 : f32 = u_xlat9.z;
        let x_1618 : f32 = u_xlat47.x;
        let x_1620 : f32 = u_xlat68;
        u_xlat68 = ((x_1616 * x_1618) + x_1620);
        let x_1623 : vec4<f32> = u_xlat3;
        let x_1624 : vec2<f32> = vec2<f32>(x_1623.x, x_1623.y);
        let x_1626 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1624.x, x_1624.y, x_1626);
        let x_1633 : vec3<f32> = txVec28;
        let x_1635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1633.xy, x_1633.z);
        u_xlat3.x = x_1635;
        let x_1638 : f32 = u_xlat9.w;
        let x_1640 : f32 = u_xlat3.x;
        let x_1642 : f32 = u_xlat68;
        u_xlat67 = ((x_1638 * x_1640) + x_1642);
      }
    }
  } else {
    let x_1646 : vec3<f32> = u_xlat2;
    let x_1647 : vec2<f32> = vec2<f32>(x_1646.x, x_1646.y);
    let x_1649 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1647.x, x_1647.y, x_1649);
    let x_1656 : vec3<f32> = txVec29;
    let x_1658 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1656.xy, x_1656.z);
    u_xlat67 = x_1658;
  }
  let x_1660 : f32 = x_378.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1660) + 1.0f);
  let x_1664 : f32 = u_xlat67;
  let x_1666 : f32 = x_378.x_MainLightShadowParams.x;
  let x_1669 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1664 * x_1666) + x_1669);
  let x_1673 : f32 = u_xlat2.z;
  u_xlatb24 = (0.0f >= x_1673);
  let x_1677 : f32 = u_xlat2.z;
  u_xlatb46 = (x_1677 >= 1.0f);
  let x_1679 : bool = u_xlatb46;
  let x_1680 : bool = u_xlatb24;
  u_xlatb24 = (x_1679 | x_1680);
  let x_1682 : bool = u_xlatb24;
  let x_1683 : f32 = u_xlat67;
  u_xlat67 = select(x_1683, 1.0f, x_1682);
  let x_1685 : vec3<f32> = u_xlat1;
  let x_1687 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat1.x = dot(x_1685, -(vec3<f32>(x_1687.x, x_1687.y, x_1687.z)));
  let x_1693 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1693, 0.0f, 1.0f);
  let x_1697 : f32 = u_xlat67;
  let x_1701 : vec4<f32> = x_158.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1697, x_1697, x_1697) * vec3<f32>(x_1701.x, x_1701.y, x_1701.z));
  let x_1704 : vec3<f32> = u_xlat23;
  let x_1705 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1704 * vec3<f32>(x_1705.x, x_1705.x, x_1705.x));
  let x_1708 : vec3<f32> = u_xlat1;
  let x_1709 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1708 * vec3<f32>(x_1709.x, x_1709.y, x_1709.z));
  let x_1713 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1713 < 0.0f);
  let x_1717 : f32 = x_95.unity_LODFade.x;
  u_xlat24 = (x_1717 + 1.0f);
  let x_1719 : bool = u_xlatb67;
  if (x_1719) {
    let x_1723 : f32 = u_xlat24;
    x_1720 = x_1723;
  } else {
    let x_1726 : f32 = x_95.unity_LODFade.x;
    x_1720 = x_1726;
  }
  let x_1727 : f32 = x_1720;
  u_xlat67 = x_1727;
  let x_1728 : f32 = u_xlat67;
  u_xlatb24 = (0.5f >= x_1728);
  let x_1730 : vec3<f32> = u_xlat4;
  let x_1734 : vec4<f32> = x_158.x_ScreenParams;
  let x_1736 : vec3<f32> = (abs(x_1730) * vec3<f32>(x_1734.x, x_1734.y, x_1734.x));
  let x_1737 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1736.x, x_1736.y, x_1736.z, x_1737.w);
  let x_1742 : vec4<f32> = u_xlat3;
  u_xlatu3 = vec3<u32>(vec3<f32>(x_1742.x, x_1742.y, x_1742.z));
  let x_1747 : u32 = u_xlatu3.z;
  u_xlatu46 = (x_1747 * 1025u);
  let x_1751 : u32 = u_xlatu46;
  u_xlatu68 = (x_1751 >> 6u);
  let x_1755 : u32 = u_xlatu68;
  let x_1756 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1755 ^ x_1756));
  let x_1759 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1759) * 9u);
  let x_1763 : u32 = u_xlatu46;
  u_xlatu68 = (x_1763 >> 11u);
  let x_1766 : u32 = u_xlatu68;
  let x_1767 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1766 ^ x_1767));
  let x_1770 : i32 = u_xlati46;
  u_xlati46 = (x_1770 * 32769i);
  let x_1773 : i32 = u_xlati46;
  let x_1776 : u32 = u_xlatu3.y;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1773) ^ x_1776));
  let x_1779 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1779) * 1025u);
  let x_1782 : u32 = u_xlatu46;
  u_xlatu68 = (x_1782 >> 6u);
  let x_1784 : u32 = u_xlatu68;
  let x_1785 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1784 ^ x_1785));
  let x_1788 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1788) * 9u);
  let x_1791 : u32 = u_xlatu46;
  u_xlatu68 = (x_1791 >> 11u);
  let x_1793 : u32 = u_xlatu68;
  let x_1794 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1793 ^ x_1794));
  let x_1797 : i32 = u_xlati46;
  u_xlati46 = (x_1797 * 32769i);
  let x_1799 : i32 = u_xlati46;
  let x_1802 : u32 = u_xlatu3.x;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1799) ^ x_1802));
  let x_1805 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1805) * 1025u);
  let x_1808 : u32 = u_xlatu46;
  u_xlatu68 = (x_1808 >> 6u);
  let x_1810 : u32 = u_xlatu68;
  let x_1811 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1810 ^ x_1811));
  let x_1814 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1814) * 9u);
  let x_1817 : u32 = u_xlatu46;
  u_xlatu68 = (x_1817 >> 11u);
  let x_1819 : u32 = u_xlatu68;
  let x_1820 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1819 ^ x_1820));
  let x_1823 : i32 = u_xlati46;
  u_xlati46 = (x_1823 * 32769i);
  param = 1065353216i;
  let x_1830 : i32 = u_xlati46;
  param_1 = x_1830;
  param_2 = 0i;
  param_3 = 23i;
  let x_1833 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat46.x = bitcast<f32>(x_1833);
  let x_1837 : f32 = u_xlat46.x;
  u_xlat46.x = (x_1837 + -1.0f);
  let x_1841 : f32 = u_xlat46.x;
  u_xlat68 = (-(x_1841) + 1.0f);
  let x_1844 : bool = u_xlatb24;
  if (x_1844) {
    let x_1849 : f32 = u_xlat46.x;
    x_1845 = x_1849;
  } else {
    let x_1851 : f32 = u_xlat68;
    x_1845 = x_1851;
  }
  let x_1852 : f32 = x_1845;
  u_xlat24 = x_1852;
  let x_1853 : f32 = u_xlat67;
  let x_1855 : f32 = u_xlat24;
  u_xlat67 = ((x_1853 * 2.0f) + -(x_1855));
  let x_1858 : f32 = u_xlat67;
  let x_1860 : f32 = u_xlat6.w;
  u_xlat24 = (x_1858 * x_1860);
  let x_1862 : f32 = u_xlat24;
  u_xlatb46 = (x_1862 >= 0.400000006f);
  let x_1865 : bool = u_xlatb46;
  let x_1866 : f32 = u_xlat24;
  u_xlat46.x = select(0.0f, x_1866, x_1865);
  let x_1870 : f32 = u_xlat6.w;
  let x_1871 : f32 = u_xlat67;
  u_xlat67 = ((x_1870 * x_1871) + -0.400000006f);
  let x_1875 : f32 = u_xlat24;
  u_xlat68 = dpdxCoarse(x_1875);
  let x_1877 : f32 = u_xlat24;
  u_xlat24 = dpdyCoarse(x_1877);
  let x_1879 : f32 = u_xlat24;
  let x_1881 : f32 = u_xlat68;
  u_xlat24 = (abs(x_1879) + abs(x_1881));
  let x_1884 : f32 = u_xlat24;
  u_xlat24 = max(x_1884, 0.0001f);
  let x_1887 : f32 = u_xlat67;
  let x_1888 : f32 = u_xlat24;
  u_xlat67 = (x_1887 / x_1888);
  let x_1890 : f32 = u_xlat67;
  u_xlat67 = (x_1890 + 0.5f);
  let x_1892 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1892, 0.0f, 1.0f);
  let x_1895 : f32 = x_158.x_AlphaToMaskAvailable;
  u_xlatb24 = !((x_1895 == 0.0f));
  let x_1897 : bool = u_xlatb24;
  if (x_1897) {
    let x_1901 : f32 = u_xlat67;
    x_1898 = x_1901;
  } else {
    let x_1904 : f32 = u_xlat46.x;
    x_1898 = x_1904;
  }
  let x_1905 : f32 = x_1898;
  u_xlat67 = x_1905;
  let x_1906 : f32 = u_xlat67;
  u_xlat46.x = (x_1906 + -0.0001f);
  let x_1911 : f32 = u_xlat46.x;
  u_xlatb46 = (x_1911 < 0.0f);
  let x_1913 : bool = u_xlatb46;
  if (((select(0i, 1i, x_1913) * -1i) != 0i)) {
    discard;
  }
  let x_1921 : vec3<f32> = u_xlat22;
  let x_1922 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_1921 * vec3<f32>(x_1922.y, x_1922.y, x_1922.y));
  let x_1925 : vec3<f32> = u_xlat30;
  let x_1927 : vec4<f32> = vs_INTERP2;
  let x_1930 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1925.x, x_1925.x, x_1925.x) * vec3<f32>(x_1927.x, x_1927.y, x_1927.z)) + x_1930);
  let x_1932 : vec3<f32> = u_xlat30;
  let x_1934 : vec3<f32> = vs_INTERP1;
  let x_1936 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1932.z, x_1932.z, x_1932.z) * x_1934) + x_1936);
  let x_1938 : vec3<f32> = u_xlat22;
  let x_1939 : vec3<f32> = u_xlat22;
  u_xlat46.x = dot(x_1938, x_1939);
  let x_1943 : f32 = u_xlat46.x;
  u_xlat46.x = inverseSqrt(x_1943);
  let x_1946 : vec3<f32> = u_xlat22;
  let x_1947 : vec2<f32> = u_xlat46;
  u_xlat22 = (x_1946 * vec3<f32>(x_1947.x, x_1947.x, x_1947.x));
  let x_1957 : vec2<f32> = vs_INTERP5;
  let x_1959 : f32 = x_158.x_GlobalMipBias.x;
  let x_1960 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1957, x_1959);
  u_xlat3 = x_1960;
  let x_1965 : vec2<f32> = vs_INTERP5;
  let x_1967 : f32 = x_158.x_GlobalMipBias.x;
  let x_1968 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1965, x_1967);
  u_xlat4 = vec3<f32>(x_1968.x, x_1968.y, x_1968.z);
  let x_1970 : vec4<f32> = u_xlat3;
  let x_1973 : vec3<f32> = (vec3<f32>(x_1970.x, x_1970.y, x_1970.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1974 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1973.x, x_1973.y, x_1973.z, x_1974.w);
  let x_1976 : vec3<f32> = u_xlat22;
  let x_1977 : vec4<f32> = u_xlat3;
  u_xlat46.x = dot(x_1976, vec3<f32>(x_1977.x, x_1977.y, x_1977.z));
  let x_1982 : f32 = u_xlat46.x;
  u_xlat46.x = (x_1982 + 0.5f);
  let x_1985 : vec2<f32> = u_xlat46;
  let x_1987 : vec3<f32> = u_xlat4;
  let x_1988 : vec3<f32> = (vec3<f32>(x_1985.x, x_1985.x, x_1985.x) * x_1987);
  let x_1989 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1988.x, x_1988.y, x_1988.z, x_1989.w);
  let x_1992 : f32 = u_xlat3.w;
  u_xlat46.x = max(x_1992, 0.0001f);
  let x_1995 : vec4<f32> = u_xlat3;
  let x_1997 : vec2<f32> = u_xlat46;
  let x_1999 : vec3<f32> = (vec3<f32>(x_1995.x, x_1995.y, x_1995.z) / vec3<f32>(x_1997.x, x_1997.x, x_1997.x));
  let x_2000 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1999.x, x_1999.y, x_1999.z, x_2000.w);
  let x_2003 : vec4<f32> = x_158.x_ScaledScreenParams;
  let x_2004 : vec2<f32> = vec2<f32>(x_2003.x, x_2003.y);
  u_xlat46 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2004.x, x_2004.y));
  let x_2009 : vec2<f32> = u_xlat46;
  let x_2010 : vec4<f32> = hlslcc_FragCoord;
  let x_2012 : vec2<f32> = (x_2009 * vec2<f32>(x_2010.x, x_2010.y));
  let x_2013 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_2012.x, x_2012.y, x_2013.z);
  let x_2016 : f32 = u_xlat4.y;
  let x_2019 : f32 = x_158.x_ScaleBiasRt.x;
  let x_2022 : f32 = x_158.x_ScaleBiasRt.y;
  u_xlat46.x = ((x_2016 * x_2019) + x_2022);
  let x_2026 : f32 = u_xlat46.x;
  u_xlat4.z = (-(x_2026) + 1.0f);
  let x_2031 : f32 = u_xlat8.x;
  u_xlat8.x = x_2031;
  let x_2034 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2034, 0.0f, 1.0f);
  let x_2037 : f32 = u_xlat67;
  u_xlat67 = x_2037;
  let x_2038 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2038, 0.0f, 1.0f);
  let x_2040 : vec4<f32> = u_xlat7;
  let x_2044 : vec3<f32> = (vec3<f32>(x_2040.x, x_2040.y, x_2040.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2045 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2044.x, x_2044.y, x_2044.z, x_2045.w);
  let x_2048 : f32 = u_xlat8.x;
  u_xlat46.x = (-(x_2048) + 1.0f);
  let x_2053 : f32 = u_xlat46.x;
  let x_2055 : f32 = u_xlat46.x;
  u_xlat68 = (x_2053 * x_2055);
  let x_2057 : f32 = u_xlat68;
  u_xlat68 = max(x_2057, 0.0078125f);
  let x_2061 : f32 = u_xlat68;
  let x_2062 : f32 = u_xlat68;
  u_xlat69 = (x_2061 * x_2062);
  let x_2066 : f32 = u_xlat8.x;
  u_xlat26.x = (x_2066 + 0.040000021f);
  let x_2071 : f32 = u_xlat26.x;
  u_xlat4.y = min(x_2071, 1.0f);
  let x_2074 : f32 = u_xlat68;
  u_xlat70 = ((x_2074 * 4.0f) + 2.0f);
  let x_2083 : vec3<f32> = u_xlat4;
  let x_2086 : f32 = x_158.x_GlobalMipBias.x;
  let x_2087 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2083.x, x_2083.z), x_2086);
  u_xlat4.x = x_2087.x;
  let x_2090 : vec3<f32> = u_xlat4;
  u_xlat26 = (vec2<f32>(x_2090.y, x_2090.x) + vec2<f32>(-0.039999999f, -1.0f));
  let x_2098 : f32 = x_158.x_AmbientOcclusionParam.w;
  let x_2100 : f32 = u_xlat26.y;
  u_xlat48 = ((x_2098 * x_2100) + 1.0f);
  let x_2104 : f32 = u_xlat4.x;
  let x_2106 : f32 = vs_INTERP4.w;
  u_xlat4.x = min(x_2104, x_2106);
  let x_2109 : bool = u_xlatb0;
  if (x_2109) {
    let x_2113 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2113 == 1.0f);
    let x_2115 : bool = u_xlatb0;
    if (x_2115) {
      let x_2119 : vec4<f32> = vs_INTERP9;
      let x_2122 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2119.x, x_2119.y, x_2119.x, x_2119.y) + x_2122);
      let x_2125 : vec4<f32> = u_xlat7;
      let x_2126 : vec2<f32> = vec2<f32>(x_2125.x, x_2125.y);
      let x_2128 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2126.x, x_2126.y, x_2128);
      let x_2135 : vec3<f32> = txVec30;
      let x_2137 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2135.xy, x_2135.z);
      u_xlat8.x = x_2137;
      let x_2140 : vec4<f32> = u_xlat7;
      let x_2141 : vec2<f32> = vec2<f32>(x_2140.z, x_2140.w);
      let x_2143 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2141.x, x_2141.y, x_2143);
      let x_2150 : vec3<f32> = txVec31;
      let x_2152 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2150.xy, x_2150.z);
      u_xlat8.y = x_2152;
      let x_2154 : vec4<f32> = vs_INTERP9;
      let x_2157 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2154.x, x_2154.y, x_2154.x, x_2154.y) + x_2157);
      let x_2160 : vec4<f32> = u_xlat7;
      let x_2161 : vec2<f32> = vec2<f32>(x_2160.x, x_2160.y);
      let x_2163 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2161.x, x_2161.y, x_2163);
      let x_2170 : vec3<f32> = txVec32;
      let x_2172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2170.xy, x_2170.z);
      u_xlat8.z = x_2172;
      let x_2175 : vec4<f32> = u_xlat7;
      let x_2176 : vec2<f32> = vec2<f32>(x_2175.z, x_2175.w);
      let x_2178 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2176.x, x_2176.y, x_2178);
      let x_2185 : vec3<f32> = txVec33;
      let x_2187 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2185.xy, x_2185.z);
      u_xlat8.w = x_2187;
      let x_2189 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2189, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2195 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb71 = (x_2195 == 2.0f);
      let x_2197 : bool = u_xlatb71;
      if (x_2197) {
        let x_2200 : vec4<f32> = vs_INTERP9;
        let x_2203 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2206 : vec2<f32> = ((vec2<f32>(x_2200.x, x_2200.y) * vec2<f32>(x_2203.z, x_2203.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2207 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2206.x, x_2206.y, x_2207.z, x_2207.w);
        let x_2209 : vec4<f32> = u_xlat7;
        let x_2211 : vec2<f32> = floor(vec2<f32>(x_2209.x, x_2209.y));
        let x_2212 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2211.x, x_2211.y, x_2212.z, x_2212.w);
        let x_2215 : vec4<f32> = vs_INTERP9;
        let x_2218 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2221 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2215.x, x_2215.y) * vec2<f32>(x_2218.z, x_2218.w)) + -(vec2<f32>(x_2221.x, x_2221.y)));
        let x_2225 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2225.x, x_2225.x, x_2225.y, x_2225.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2228 : vec4<f32> = u_xlat8;
        let x_2230 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2228.x, x_2228.x, x_2228.z, x_2228.z) * vec4<f32>(x_2230.x, x_2230.x, x_2230.z, x_2230.z));
        let x_2233 : vec4<f32> = u_xlat9;
        let x_2235 : vec2<f32> = (vec2<f32>(x_2233.y, x_2233.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2236 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2235.x, x_2236.y, x_2235.y, x_2236.w);
        let x_2238 : vec4<f32> = u_xlat9;
        let x_2241 : vec2<f32> = u_xlat51;
        let x_2243 : vec2<f32> = ((vec2<f32>(x_2238.x, x_2238.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2241));
        let x_2244 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2243.x, x_2243.y, x_2244.z, x_2244.w);
        let x_2247 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_2247) + vec2<f32>(1.0f, 1.0f));
        let x_2250 : vec2<f32> = u_xlat51;
        let x_2251 : vec2<f32> = min(x_2250, vec2<f32>(0.0f, 0.0f));
        let x_2252 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2251.x, x_2251.y, x_2252.z, x_2252.w);
        let x_2254 : vec4<f32> = u_xlat10;
        let x_2257 : vec4<f32> = u_xlat10;
        let x_2260 : vec2<f32> = u_xlat53;
        let x_2261 : vec2<f32> = ((-(vec2<f32>(x_2254.x, x_2254.y)) * vec2<f32>(x_2257.x, x_2257.y)) + x_2260);
        let x_2262 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2261.x, x_2261.y, x_2262.z, x_2262.w);
        let x_2264 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_2264, vec2<f32>(0.0f, 0.0f));
        let x_2266 : vec2<f32> = u_xlat51;
        let x_2268 : vec2<f32> = u_xlat51;
        let x_2270 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_2266) * x_2268) + vec2<f32>(x_2270.y, x_2270.w));
        let x_2273 : vec4<f32> = u_xlat10;
        let x_2275 : vec2<f32> = (vec2<f32>(x_2273.x, x_2273.y) + vec2<f32>(1.0f, 1.0f));
        let x_2276 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2275.x, x_2275.y, x_2276.z, x_2276.w);
        let x_2278 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2278 + vec2<f32>(1.0f, 1.0f));
        let x_2280 : vec4<f32> = u_xlat9;
        let x_2282 : vec2<f32> = (vec2<f32>(x_2280.x, x_2280.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2283 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2282.x, x_2282.y, x_2283.z, x_2283.w);
        let x_2285 : vec2<f32> = u_xlat53;
        let x_2286 : vec2<f32> = (x_2285 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2287 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2286.x, x_2286.y, x_2287.z, x_2287.w);
        let x_2289 : vec4<f32> = u_xlat10;
        let x_2291 : vec2<f32> = (vec2<f32>(x_2289.x, x_2289.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2292 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2291.x, x_2291.y, x_2292.z, x_2292.w);
        let x_2294 : vec2<f32> = u_xlat51;
        let x_2295 : vec2<f32> = (x_2294 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2296 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2295.x, x_2295.y, x_2296.z, x_2296.w);
        let x_2298 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_2298.y, x_2298.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2302 : f32 = u_xlat10.x;
        u_xlat11.z = x_2302;
        let x_2305 : f32 = u_xlat51.x;
        u_xlat11.w = x_2305;
        let x_2308 : f32 = u_xlat12.x;
        u_xlat9.z = x_2308;
        let x_2311 : f32 = u_xlat8.x;
        u_xlat9.w = x_2311;
        let x_2313 : vec4<f32> = u_xlat9;
        let x_2315 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2313.z, x_2313.w, x_2313.x, x_2313.z) + vec4<f32>(x_2315.z, x_2315.w, x_2315.x, x_2315.z));
        let x_2319 : f32 = u_xlat11.y;
        u_xlat10.z = x_2319;
        let x_2322 : f32 = u_xlat51.y;
        u_xlat10.w = x_2322;
        let x_2325 : f32 = u_xlat9.y;
        u_xlat12.z = x_2325;
        let x_2328 : f32 = u_xlat8.z;
        u_xlat12.w = x_2328;
        let x_2330 : vec4<f32> = u_xlat10;
        let x_2332 : vec4<f32> = u_xlat12;
        let x_2334 : vec3<f32> = (vec3<f32>(x_2330.z, x_2330.y, x_2330.w) + vec3<f32>(x_2332.z, x_2332.y, x_2332.w));
        let x_2335 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2334.x, x_2334.y, x_2334.z, x_2335.w);
        let x_2337 : vec4<f32> = u_xlat9;
        let x_2339 : vec4<f32> = u_xlat13;
        let x_2341 : vec3<f32> = (vec3<f32>(x_2337.x, x_2337.z, x_2337.w) / vec3<f32>(x_2339.z, x_2339.w, x_2339.y));
        let x_2342 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2341.x, x_2341.y, x_2341.z, x_2342.w);
        let x_2344 : vec4<f32> = u_xlat9;
        let x_2346 : vec3<f32> = (vec3<f32>(x_2344.x, x_2344.y, x_2344.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2347 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2346.x, x_2346.y, x_2346.z, x_2347.w);
        let x_2349 : vec4<f32> = u_xlat12;
        let x_2351 : vec4<f32> = u_xlat8;
        let x_2353 : vec3<f32> = (vec3<f32>(x_2349.z, x_2349.y, x_2349.w) / vec3<f32>(x_2351.x, x_2351.y, x_2351.z));
        let x_2354 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2353.x, x_2353.y, x_2353.z, x_2354.w);
        let x_2356 : vec4<f32> = u_xlat10;
        let x_2358 : vec3<f32> = (vec3<f32>(x_2356.x, x_2356.y, x_2356.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2359 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2358.x, x_2358.y, x_2358.z, x_2359.w);
        let x_2361 : vec4<f32> = u_xlat9;
        let x_2364 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2366 : vec3<f32> = (vec3<f32>(x_2361.y, x_2361.x, x_2361.z) * vec3<f32>(x_2364.x, x_2364.x, x_2364.x));
        let x_2367 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2366.x, x_2366.y, x_2366.z, x_2367.w);
        let x_2369 : vec4<f32> = u_xlat10;
        let x_2372 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2374 : vec3<f32> = (vec3<f32>(x_2369.x, x_2369.y, x_2369.z) * vec3<f32>(x_2372.y, x_2372.y, x_2372.y));
        let x_2375 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2374.x, x_2374.y, x_2374.z, x_2375.w);
        let x_2378 : f32 = u_xlat10.x;
        u_xlat9.w = x_2378;
        let x_2380 : vec4<f32> = u_xlat7;
        let x_2383 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2386 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2380.x, x_2380.y, x_2380.x, x_2380.y) * vec4<f32>(x_2383.x, x_2383.y, x_2383.x, x_2383.y)) + vec4<f32>(x_2386.y, x_2386.w, x_2386.x, x_2386.w));
        let x_2389 : vec4<f32> = u_xlat7;
        let x_2392 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2395 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_2389.x, x_2389.y) * vec2<f32>(x_2392.x, x_2392.y)) + vec2<f32>(x_2395.z, x_2395.w));
        let x_2399 : f32 = u_xlat9.y;
        u_xlat10.w = x_2399;
        let x_2401 : vec4<f32> = u_xlat10;
        let x_2402 : vec2<f32> = vec2<f32>(x_2401.y, x_2401.z);
        let x_2403 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2403.x, x_2402.x, x_2403.z, x_2402.y);
        let x_2405 : vec4<f32> = u_xlat7;
        let x_2408 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2411 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2405.x, x_2405.y, x_2405.x, x_2405.y) * vec4<f32>(x_2408.x, x_2408.y, x_2408.x, x_2408.y)) + vec4<f32>(x_2411.x, x_2411.y, x_2411.z, x_2411.y));
        let x_2414 : vec4<f32> = u_xlat7;
        let x_2417 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2420 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2414.x, x_2414.y, x_2414.x, x_2414.y) * vec4<f32>(x_2417.x, x_2417.y, x_2417.x, x_2417.y)) + vec4<f32>(x_2420.w, x_2420.y, x_2420.w, x_2420.z));
        let x_2423 : vec4<f32> = u_xlat7;
        let x_2426 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2429 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2423.x, x_2423.y, x_2423.x, x_2423.y) * vec4<f32>(x_2426.x, x_2426.y, x_2426.x, x_2426.y)) + vec4<f32>(x_2429.x, x_2429.w, x_2429.z, x_2429.w));
        let x_2432 : vec4<f32> = u_xlat8;
        let x_2434 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2432.x, x_2432.x, x_2432.x, x_2432.y) * vec4<f32>(x_2434.z, x_2434.w, x_2434.y, x_2434.z));
        let x_2437 : vec4<f32> = u_xlat8;
        let x_2439 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2437.y, x_2437.y, x_2437.z, x_2437.z) * x_2439);
        let x_2443 : f32 = u_xlat8.z;
        let x_2445 : f32 = u_xlat13.y;
        u_xlat71 = (x_2443 * x_2445);
        let x_2448 : vec4<f32> = u_xlat11;
        let x_2449 : vec2<f32> = vec2<f32>(x_2448.x, x_2448.y);
        let x_2451 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2449.x, x_2449.y, x_2451);
        let x_2459 : vec3<f32> = txVec34;
        let x_2461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2459.xy, x_2459.z);
        u_xlat72 = x_2461;
        let x_2463 : vec4<f32> = u_xlat11;
        let x_2464 : vec2<f32> = vec2<f32>(x_2463.z, x_2463.w);
        let x_2466 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2464.x, x_2464.y, x_2466);
        let x_2473 : vec3<f32> = txVec35;
        let x_2475 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2473.xy, x_2473.z);
        u_xlat7.x = x_2475;
        let x_2478 : f32 = u_xlat7.x;
        let x_2480 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2478 * x_2480);
        let x_2484 : f32 = u_xlat14.x;
        let x_2485 : f32 = u_xlat72;
        let x_2488 : f32 = u_xlat7.x;
        u_xlat72 = ((x_2484 * x_2485) + x_2488);
        let x_2491 : vec2<f32> = u_xlat51;
        let x_2493 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2491.x, x_2491.y, x_2493);
        let x_2500 : vec3<f32> = txVec36;
        let x_2502 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2500.xy, x_2500.z);
        u_xlat7.x = x_2502;
        let x_2505 : f32 = u_xlat14.z;
        let x_2507 : f32 = u_xlat7.x;
        let x_2509 : f32 = u_xlat72;
        u_xlat72 = ((x_2505 * x_2507) + x_2509);
        let x_2512 : vec4<f32> = u_xlat10;
        let x_2513 : vec2<f32> = vec2<f32>(x_2512.x, x_2512.y);
        let x_2515 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2513.x, x_2513.y, x_2515);
        let x_2522 : vec3<f32> = txVec37;
        let x_2524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2522.xy, x_2522.z);
        u_xlat7.x = x_2524;
        let x_2527 : f32 = u_xlat14.w;
        let x_2529 : f32 = u_xlat7.x;
        let x_2531 : f32 = u_xlat72;
        u_xlat72 = ((x_2527 * x_2529) + x_2531);
        let x_2534 : vec4<f32> = u_xlat12;
        let x_2535 : vec2<f32> = vec2<f32>(x_2534.x, x_2534.y);
        let x_2537 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2535.x, x_2535.y, x_2537);
        let x_2544 : vec3<f32> = txVec38;
        let x_2546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2544.xy, x_2544.z);
        u_xlat7.x = x_2546;
        let x_2549 : f32 = u_xlat15.x;
        let x_2551 : f32 = u_xlat7.x;
        let x_2553 : f32 = u_xlat72;
        u_xlat72 = ((x_2549 * x_2551) + x_2553);
        let x_2556 : vec4<f32> = u_xlat12;
        let x_2557 : vec2<f32> = vec2<f32>(x_2556.z, x_2556.w);
        let x_2559 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2557.x, x_2557.y, x_2559);
        let x_2566 : vec3<f32> = txVec39;
        let x_2568 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2566.xy, x_2566.z);
        u_xlat7.x = x_2568;
        let x_2571 : f32 = u_xlat15.y;
        let x_2573 : f32 = u_xlat7.x;
        let x_2575 : f32 = u_xlat72;
        u_xlat72 = ((x_2571 * x_2573) + x_2575);
        let x_2578 : vec4<f32> = u_xlat10;
        let x_2579 : vec2<f32> = vec2<f32>(x_2578.z, x_2578.w);
        let x_2581 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2579.x, x_2579.y, x_2581);
        let x_2588 : vec3<f32> = txVec40;
        let x_2590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2588.xy, x_2588.z);
        u_xlat7.x = x_2590;
        let x_2593 : f32 = u_xlat15.z;
        let x_2595 : f32 = u_xlat7.x;
        let x_2597 : f32 = u_xlat72;
        u_xlat72 = ((x_2593 * x_2595) + x_2597);
        let x_2600 : vec4<f32> = u_xlat9;
        let x_2601 : vec2<f32> = vec2<f32>(x_2600.x, x_2600.y);
        let x_2603 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2601.x, x_2601.y, x_2603);
        let x_2610 : vec3<f32> = txVec41;
        let x_2612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2610.xy, x_2610.z);
        u_xlat7.x = x_2612;
        let x_2615 : f32 = u_xlat15.w;
        let x_2617 : f32 = u_xlat7.x;
        let x_2619 : f32 = u_xlat72;
        u_xlat72 = ((x_2615 * x_2617) + x_2619);
        let x_2622 : vec4<f32> = u_xlat9;
        let x_2623 : vec2<f32> = vec2<f32>(x_2622.z, x_2622.w);
        let x_2625 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2623.x, x_2623.y, x_2625);
        let x_2632 : vec3<f32> = txVec42;
        let x_2634 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2632.xy, x_2632.z);
        u_xlat7.x = x_2634;
        let x_2636 : f32 = u_xlat71;
        let x_2638 : f32 = u_xlat7.x;
        let x_2640 : f32 = u_xlat72;
        u_xlat0.x = ((x_2636 * x_2638) + x_2640);
      } else {
        let x_2644 : vec4<f32> = vs_INTERP9;
        let x_2647 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2650 : vec2<f32> = ((vec2<f32>(x_2644.x, x_2644.y) * vec2<f32>(x_2647.z, x_2647.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2651 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2650.x, x_2650.y, x_2651.z, x_2651.w);
        let x_2653 : vec4<f32> = u_xlat7;
        let x_2655 : vec2<f32> = floor(vec2<f32>(x_2653.x, x_2653.y));
        let x_2656 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2655.x, x_2655.y, x_2656.z, x_2656.w);
        let x_2658 : vec4<f32> = vs_INTERP9;
        let x_2661 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2664 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2658.x, x_2658.y) * vec2<f32>(x_2661.z, x_2661.w)) + -(vec2<f32>(x_2664.x, x_2664.y)));
        let x_2668 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2668.x, x_2668.x, x_2668.y, x_2668.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2671 : vec4<f32> = u_xlat8;
        let x_2673 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2671.x, x_2671.x, x_2671.z, x_2671.z) * vec4<f32>(x_2673.x, x_2673.x, x_2673.z, x_2673.z));
        let x_2676 : vec4<f32> = u_xlat9;
        let x_2678 : vec2<f32> = (vec2<f32>(x_2676.y, x_2676.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2679 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2679.x, x_2678.x, x_2679.z, x_2678.y);
        let x_2681 : vec4<f32> = u_xlat9;
        let x_2684 : vec2<f32> = u_xlat51;
        let x_2686 : vec2<f32> = ((vec2<f32>(x_2681.x, x_2681.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2684));
        let x_2687 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2686.x, x_2687.y, x_2686.y, x_2687.w);
        let x_2689 : vec2<f32> = u_xlat51;
        let x_2691 : vec2<f32> = (-(x_2689) + vec2<f32>(1.0f, 1.0f));
        let x_2692 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2691.x, x_2691.y, x_2692.z, x_2692.w);
        let x_2694 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_2694, vec2<f32>(0.0f, 0.0f));
        let x_2696 : vec2<f32> = u_xlat53;
        let x_2698 : vec2<f32> = u_xlat53;
        let x_2700 : vec4<f32> = u_xlat9;
        let x_2702 : vec2<f32> = ((-(x_2696) * x_2698) + vec2<f32>(x_2700.x, x_2700.y));
        let x_2703 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2702.x, x_2702.y, x_2703.z, x_2703.w);
        let x_2705 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_2705, vec2<f32>(0.0f, 0.0f));
        let x_2707 : vec2<f32> = u_xlat53;
        let x_2709 : vec2<f32> = u_xlat53;
        let x_2711 : vec4<f32> = u_xlat8;
        let x_2713 : vec2<f32> = ((-(x_2707) * x_2709) + vec2<f32>(x_2711.y, x_2711.w));
        let x_2714 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2713.x, x_2714.y, x_2713.y);
        let x_2716 : vec4<f32> = u_xlat9;
        let x_2718 : vec2<f32> = (vec2<f32>(x_2716.x, x_2716.y) + vec2<f32>(2.0f, 2.0f));
        let x_2719 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2718.x, x_2718.y, x_2719.z, x_2719.w);
        let x_2721 : vec3<f32> = u_xlat30;
        let x_2723 : vec2<f32> = (vec2<f32>(x_2721.x, x_2721.z) + vec2<f32>(2.0f, 2.0f));
        let x_2724 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2724.x, x_2723.x, x_2724.z, x_2723.y);
        let x_2727 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2727 * 0.081632003f);
        let x_2730 : vec4<f32> = u_xlat8;
        let x_2732 : vec3<f32> = (vec3<f32>(x_2730.z, x_2730.x, x_2730.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2733 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2732.x, x_2732.y, x_2732.z, x_2733.w);
        let x_2735 : vec4<f32> = u_xlat9;
        let x_2737 : vec2<f32> = (vec2<f32>(x_2735.x, x_2735.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2738 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2737.x, x_2737.y, x_2738.z, x_2738.w);
        let x_2741 : f32 = u_xlat12.y;
        u_xlat11.x = x_2741;
        let x_2743 : vec2<f32> = u_xlat51;
        let x_2746 : vec2<f32> = ((vec2<f32>(x_2743.x, x_2743.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2747 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2747.x, x_2746.x, x_2747.z, x_2746.y);
        let x_2749 : vec2<f32> = u_xlat51;
        let x_2752 : vec2<f32> = ((vec2<f32>(x_2749.x, x_2749.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2753 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2752.x, x_2753.y, x_2752.y, x_2753.w);
        let x_2756 : f32 = u_xlat8.x;
        u_xlat9.y = x_2756;
        let x_2759 : f32 = u_xlat10.y;
        u_xlat9.w = x_2759;
        let x_2761 : vec4<f32> = u_xlat9;
        let x_2762 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2761 + x_2762);
        let x_2764 : vec2<f32> = u_xlat51;
        let x_2767 : vec2<f32> = ((vec2<f32>(x_2764.y, x_2764.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2768 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2768.x, x_2767.x, x_2768.z, x_2767.y);
        let x_2770 : vec2<f32> = u_xlat51;
        let x_2773 : vec2<f32> = ((vec2<f32>(x_2770.y, x_2770.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2774 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2773.x, x_2774.y, x_2773.y, x_2774.w);
        let x_2777 : f32 = u_xlat8.y;
        u_xlat10.y = x_2777;
        let x_2779 : vec4<f32> = u_xlat10;
        let x_2780 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2779 + x_2780);
        let x_2782 : vec4<f32> = u_xlat9;
        let x_2783 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2782 / x_2783);
        let x_2785 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2785 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2787 : vec4<f32> = u_xlat10;
        let x_2788 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2787 / x_2788);
        let x_2790 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2790 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2792 : vec4<f32> = u_xlat9;
        let x_2795 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2792.w, x_2792.x, x_2792.y, x_2792.z) * vec4<f32>(x_2795.x, x_2795.x, x_2795.x, x_2795.x));
        let x_2798 : vec4<f32> = u_xlat10;
        let x_2801 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2798.x, x_2798.w, x_2798.y, x_2798.z) * vec4<f32>(x_2801.y, x_2801.y, x_2801.y, x_2801.y));
        let x_2804 : vec4<f32> = u_xlat9;
        let x_2805 : vec3<f32> = vec3<f32>(x_2804.y, x_2804.z, x_2804.w);
        let x_2806 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2805.x, x_2806.y, x_2805.y, x_2805.z);
        let x_2809 : f32 = u_xlat10.x;
        u_xlat12.y = x_2809;
        let x_2811 : vec4<f32> = u_xlat7;
        let x_2814 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2817 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2811.x, x_2811.y, x_2811.x, x_2811.y) * vec4<f32>(x_2814.x, x_2814.y, x_2814.x, x_2814.y)) + vec4<f32>(x_2817.x, x_2817.y, x_2817.z, x_2817.y));
        let x_2820 : vec4<f32> = u_xlat7;
        let x_2823 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2826 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_2820.x, x_2820.y) * vec2<f32>(x_2823.x, x_2823.y)) + vec2<f32>(x_2826.w, x_2826.y));
        let x_2830 : f32 = u_xlat12.y;
        u_xlat9.y = x_2830;
        let x_2833 : f32 = u_xlat10.z;
        u_xlat12.y = x_2833;
        let x_2835 : vec4<f32> = u_xlat7;
        let x_2838 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2841 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2835.x, x_2835.y, x_2835.x, x_2835.y) * vec4<f32>(x_2838.x, x_2838.y, x_2838.x, x_2838.y)) + vec4<f32>(x_2841.x, x_2841.y, x_2841.z, x_2841.y));
        let x_2844 : vec4<f32> = u_xlat7;
        let x_2847 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2850 : vec4<f32> = u_xlat12;
        let x_2852 : vec2<f32> = ((vec2<f32>(x_2844.x, x_2844.y) * vec2<f32>(x_2847.x, x_2847.y)) + vec2<f32>(x_2850.w, x_2850.y));
        let x_2853 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2852.x, x_2852.y, x_2853.z, x_2853.w);
        let x_2856 : f32 = u_xlat12.y;
        u_xlat9.z = x_2856;
        let x_2858 : vec4<f32> = u_xlat7;
        let x_2861 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2864 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2858.x, x_2858.y, x_2858.x, x_2858.y) * vec4<f32>(x_2861.x, x_2861.y, x_2861.x, x_2861.y)) + vec4<f32>(x_2864.x, x_2864.y, x_2864.x, x_2864.z));
        let x_2868 : f32 = u_xlat10.w;
        u_xlat12.y = x_2868;
        let x_2870 : vec4<f32> = u_xlat7;
        let x_2873 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2876 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2870.x, x_2870.y, x_2870.x, x_2870.y) * vec4<f32>(x_2873.x, x_2873.y, x_2873.x, x_2873.y)) + vec4<f32>(x_2876.x, x_2876.y, x_2876.z, x_2876.y));
        let x_2879 : vec4<f32> = u_xlat7;
        let x_2882 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2885 : vec4<f32> = u_xlat12;
        let x_2887 : vec2<f32> = ((vec2<f32>(x_2879.x, x_2879.y) * vec2<f32>(x_2882.x, x_2882.y)) + vec2<f32>(x_2885.w, x_2885.y));
        let x_2888 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2887.x, x_2887.y, x_2888.z);
        let x_2891 : f32 = u_xlat12.y;
        u_xlat9.w = x_2891;
        let x_2894 : vec4<f32> = u_xlat7;
        let x_2897 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2900 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_2894.x, x_2894.y) * vec2<f32>(x_2897.x, x_2897.y)) + vec2<f32>(x_2900.x, x_2900.w));
        let x_2903 : vec4<f32> = u_xlat12;
        let x_2904 : vec3<f32> = vec3<f32>(x_2903.x, x_2903.z, x_2903.w);
        let x_2905 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2904.x, x_2905.y, x_2904.y, x_2904.z);
        let x_2907 : vec4<f32> = u_xlat7;
        let x_2910 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2913 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2907.x, x_2907.y, x_2907.x, x_2907.y) * vec4<f32>(x_2910.x, x_2910.y, x_2910.x, x_2910.y)) + vec4<f32>(x_2913.x, x_2913.y, x_2913.z, x_2913.y));
        let x_2916 : vec4<f32> = u_xlat7;
        let x_2919 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2922 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_2916.x, x_2916.y) * vec2<f32>(x_2919.x, x_2919.y)) + vec2<f32>(x_2922.w, x_2922.y));
        let x_2926 : f32 = u_xlat9.x;
        u_xlat10.x = x_2926;
        let x_2928 : vec4<f32> = u_xlat7;
        let x_2931 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2934 : vec4<f32> = u_xlat10;
        let x_2936 : vec2<f32> = ((vec2<f32>(x_2928.x, x_2928.y) * vec2<f32>(x_2931.x, x_2931.y)) + vec2<f32>(x_2934.x, x_2934.y));
        let x_2937 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2936.x, x_2936.y, x_2937.z, x_2937.w);
        let x_2939 : vec4<f32> = u_xlat8;
        let x_2941 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2939.x, x_2939.x, x_2939.x, x_2939.x) * x_2941);
        let x_2943 : vec4<f32> = u_xlat8;
        let x_2945 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2943.y, x_2943.y, x_2943.y, x_2943.y) * x_2945);
        let x_2947 : vec4<f32> = u_xlat8;
        let x_2949 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2947.z, x_2947.z, x_2947.z, x_2947.z) * x_2949);
        let x_2951 : vec4<f32> = u_xlat8;
        let x_2953 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2951.w, x_2951.w, x_2951.w, x_2951.w) * x_2953);
        let x_2956 : vec4<f32> = u_xlat13;
        let x_2957 : vec2<f32> = vec2<f32>(x_2956.x, x_2956.y);
        let x_2959 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2957.x, x_2957.y, x_2959);
        let x_2966 : vec3<f32> = txVec43;
        let x_2968 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2966.xy, x_2966.z);
        u_xlat71 = x_2968;
        let x_2970 : vec4<f32> = u_xlat13;
        let x_2971 : vec2<f32> = vec2<f32>(x_2970.z, x_2970.w);
        let x_2973 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2971.x, x_2971.y, x_2973);
        let x_2980 : vec3<f32> = txVec44;
        let x_2982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2980.xy, x_2980.z);
        u_xlat72 = x_2982;
        let x_2983 : f32 = u_xlat72;
        let x_2985 : f32 = u_xlat18.y;
        u_xlat72 = (x_2983 * x_2985);
        let x_2988 : f32 = u_xlat18.x;
        let x_2989 : f32 = u_xlat71;
        let x_2991 : f32 = u_xlat72;
        u_xlat71 = ((x_2988 * x_2989) + x_2991);
        let x_2994 : vec2<f32> = u_xlat51;
        let x_2996 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2994.x, x_2994.y, x_2996);
        let x_3003 : vec3<f32> = txVec45;
        let x_3005 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3003.xy, x_3003.z);
        u_xlat72 = x_3005;
        let x_3007 : f32 = u_xlat18.z;
        let x_3008 : f32 = u_xlat72;
        let x_3010 : f32 = u_xlat71;
        u_xlat71 = ((x_3007 * x_3008) + x_3010);
        let x_3013 : vec4<f32> = u_xlat16;
        let x_3014 : vec2<f32> = vec2<f32>(x_3013.x, x_3013.y);
        let x_3016 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_3014.x, x_3014.y, x_3016);
        let x_3023 : vec3<f32> = txVec46;
        let x_3025 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3023.xy, x_3023.z);
        u_xlat72 = x_3025;
        let x_3027 : f32 = u_xlat18.w;
        let x_3028 : f32 = u_xlat72;
        let x_3030 : f32 = u_xlat71;
        u_xlat71 = ((x_3027 * x_3028) + x_3030);
        let x_3033 : vec4<f32> = u_xlat14;
        let x_3034 : vec2<f32> = vec2<f32>(x_3033.x, x_3033.y);
        let x_3036 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3034.x, x_3034.y, x_3036);
        let x_3043 : vec3<f32> = txVec47;
        let x_3045 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3043.xy, x_3043.z);
        u_xlat72 = x_3045;
        let x_3047 : f32 = u_xlat19.x;
        let x_3048 : f32 = u_xlat72;
        let x_3050 : f32 = u_xlat71;
        u_xlat71 = ((x_3047 * x_3048) + x_3050);
        let x_3053 : vec4<f32> = u_xlat14;
        let x_3054 : vec2<f32> = vec2<f32>(x_3053.z, x_3053.w);
        let x_3056 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3054.x, x_3054.y, x_3056);
        let x_3063 : vec3<f32> = txVec48;
        let x_3065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3063.xy, x_3063.z);
        u_xlat72 = x_3065;
        let x_3067 : f32 = u_xlat19.y;
        let x_3068 : f32 = u_xlat72;
        let x_3070 : f32 = u_xlat71;
        u_xlat71 = ((x_3067 * x_3068) + x_3070);
        let x_3073 : vec4<f32> = u_xlat15;
        let x_3074 : vec2<f32> = vec2<f32>(x_3073.x, x_3073.y);
        let x_3076 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3074.x, x_3074.y, x_3076);
        let x_3083 : vec3<f32> = txVec49;
        let x_3085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3083.xy, x_3083.z);
        u_xlat72 = x_3085;
        let x_3087 : f32 = u_xlat19.z;
        let x_3088 : f32 = u_xlat72;
        let x_3090 : f32 = u_xlat71;
        u_xlat71 = ((x_3087 * x_3088) + x_3090);
        let x_3093 : vec4<f32> = u_xlat16;
        let x_3094 : vec2<f32> = vec2<f32>(x_3093.z, x_3093.w);
        let x_3096 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3094.x, x_3094.y, x_3096);
        let x_3103 : vec3<f32> = txVec50;
        let x_3105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3103.xy, x_3103.z);
        u_xlat72 = x_3105;
        let x_3107 : f32 = u_xlat19.w;
        let x_3108 : f32 = u_xlat72;
        let x_3110 : f32 = u_xlat71;
        u_xlat71 = ((x_3107 * x_3108) + x_3110);
        let x_3113 : vec4<f32> = u_xlat17;
        let x_3114 : vec2<f32> = vec2<f32>(x_3113.x, x_3113.y);
        let x_3116 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3114.x, x_3114.y, x_3116);
        let x_3123 : vec3<f32> = txVec51;
        let x_3125 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3123.xy, x_3123.z);
        u_xlat72 = x_3125;
        let x_3127 : f32 = u_xlat20.x;
        let x_3128 : f32 = u_xlat72;
        let x_3130 : f32 = u_xlat71;
        u_xlat71 = ((x_3127 * x_3128) + x_3130);
        let x_3133 : vec4<f32> = u_xlat17;
        let x_3134 : vec2<f32> = vec2<f32>(x_3133.z, x_3133.w);
        let x_3136 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3134.x, x_3134.y, x_3136);
        let x_3143 : vec3<f32> = txVec52;
        let x_3145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3143.xy, x_3143.z);
        u_xlat72 = x_3145;
        let x_3147 : f32 = u_xlat20.y;
        let x_3148 : f32 = u_xlat72;
        let x_3150 : f32 = u_xlat71;
        u_xlat71 = ((x_3147 * x_3148) + x_3150);
        let x_3153 : vec3<f32> = u_xlat31;
        let x_3154 : vec2<f32> = vec2<f32>(x_3153.x, x_3153.y);
        let x_3156 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3154.x, x_3154.y, x_3156);
        let x_3163 : vec3<f32> = txVec53;
        let x_3165 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3163.xy, x_3163.z);
        u_xlat72 = x_3165;
        let x_3167 : f32 = u_xlat20.z;
        let x_3168 : f32 = u_xlat72;
        let x_3170 : f32 = u_xlat71;
        u_xlat71 = ((x_3167 * x_3168) + x_3170);
        let x_3173 : vec2<f32> = u_xlat59;
        let x_3175 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3173.x, x_3173.y, x_3175);
        let x_3182 : vec3<f32> = txVec54;
        let x_3184 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3182.xy, x_3182.z);
        u_xlat72 = x_3184;
        let x_3186 : f32 = u_xlat20.w;
        let x_3187 : f32 = u_xlat72;
        let x_3189 : f32 = u_xlat71;
        u_xlat71 = ((x_3186 * x_3187) + x_3189);
        let x_3192 : vec4<f32> = u_xlat12;
        let x_3193 : vec2<f32> = vec2<f32>(x_3192.x, x_3192.y);
        let x_3195 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3193.x, x_3193.y, x_3195);
        let x_3202 : vec3<f32> = txVec55;
        let x_3204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3202.xy, x_3202.z);
        u_xlat72 = x_3204;
        let x_3206 : f32 = u_xlat8.x;
        let x_3207 : f32 = u_xlat72;
        let x_3209 : f32 = u_xlat71;
        u_xlat71 = ((x_3206 * x_3207) + x_3209);
        let x_3212 : vec4<f32> = u_xlat12;
        let x_3213 : vec2<f32> = vec2<f32>(x_3212.z, x_3212.w);
        let x_3215 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3213.x, x_3213.y, x_3215);
        let x_3222 : vec3<f32> = txVec56;
        let x_3224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3222.xy, x_3222.z);
        u_xlat72 = x_3224;
        let x_3226 : f32 = u_xlat8.y;
        let x_3227 : f32 = u_xlat72;
        let x_3229 : f32 = u_xlat71;
        u_xlat71 = ((x_3226 * x_3227) + x_3229);
        let x_3232 : vec2<f32> = u_xlat54;
        let x_3234 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3232.x, x_3232.y, x_3234);
        let x_3241 : vec3<f32> = txVec57;
        let x_3243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3241.xy, x_3241.z);
        u_xlat72 = x_3243;
        let x_3245 : f32 = u_xlat8.z;
        let x_3246 : f32 = u_xlat72;
        let x_3248 : f32 = u_xlat71;
        u_xlat71 = ((x_3245 * x_3246) + x_3248);
        let x_3251 : vec4<f32> = u_xlat7;
        let x_3252 : vec2<f32> = vec2<f32>(x_3251.x, x_3251.y);
        let x_3254 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3252.x, x_3252.y, x_3254);
        let x_3261 : vec3<f32> = txVec58;
        let x_3263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3261.xy, x_3261.z);
        u_xlat72 = x_3263;
        let x_3265 : f32 = u_xlat8.w;
        let x_3266 : f32 = u_xlat72;
        let x_3268 : f32 = u_xlat71;
        u_xlat0.x = ((x_3265 * x_3266) + x_3268);
      }
    }
  } else {
    let x_3273 : vec4<f32> = vs_INTERP9;
    let x_3274 : vec2<f32> = vec2<f32>(x_3273.x, x_3273.y);
    let x_3276 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3274.x, x_3274.y, x_3276);
    let x_3283 : vec3<f32> = txVec59;
    let x_3285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3283.xy, x_3283.z);
    u_xlat0.x = x_3285;
  }
  let x_3288 : f32 = u_xlat0.x;
  let x_3290 : f32 = x_378.x_MainLightShadowParams.x;
  let x_3293 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3288 * x_3290) + x_3293);
  let x_3300 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3300);
  let x_3304 : f32 = vs_INTERP9.z;
  u_xlatb71 = (x_3304 >= 1.0f);
  let x_3307 : bool = u_xlatb2.x;
  let x_3308 : bool = u_xlatb71;
  u_xlatb2.x = (x_3307 | x_3308);
  let x_3312 : bool = u_xlatb2.x;
  if (x_3312) {
    x_3313 = 1.0f;
  } else {
    let x_3318 : f32 = u_xlat0.x;
    x_3313 = x_3318;
  }
  let x_3319 : f32 = x_3313;
  u_xlat0.x = x_3319;
  let x_3321 : vec3<f32> = vs_INTERP0;
  let x_3323 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  let x_3325 : vec3<f32> = (x_3321 + -(x_3323));
  let x_3326 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3325.x, x_3325.y, x_3325.z, x_3326.w);
  let x_3328 : vec4<f32> = u_xlat7;
  let x_3330 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3328.x, x_3328.y, x_3328.z), vec3<f32>(x_3330.x, x_3330.y, x_3330.z));
  let x_3335 : f32 = u_xlat2.x;
  let x_3337 : f32 = x_378.x_MainLightShadowParams.z;
  let x_3340 : f32 = x_378.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3335 * x_3337) + x_3340);
  let x_3344 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3344, 0.0f, 1.0f);
  let x_3348 : f32 = u_xlat0.x;
  u_xlat71 = (-(x_3348) + 1.0f);
  let x_3352 : f32 = u_xlat2.x;
  let x_3353 : f32 = u_xlat71;
  let x_3356 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3352 * x_3353) + x_3356);
  let x_3365 : f32 = x_3363.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3365 == -1.0f));
  let x_3369 : bool = u_xlatb2.x;
  if (x_3369) {
    let x_3372 : vec3<f32> = vs_INTERP0;
    let x_3375 : vec4<f32> = x_3363.x_MainLightWorldToLight[1i];
    let x_3377 : vec2<f32> = (vec2<f32>(x_3372.y, x_3372.y) * vec2<f32>(x_3375.x, x_3375.y));
    let x_3378 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3377.x, x_3377.y, x_3378.z, x_3378.w);
    let x_3381 : vec4<f32> = x_3363.x_MainLightWorldToLight[0i];
    let x_3383 : vec3<f32> = vs_INTERP0;
    let x_3386 : vec4<f32> = u_xlat7;
    let x_3388 : vec2<f32> = ((vec2<f32>(x_3381.x, x_3381.y) * vec2<f32>(x_3383.x, x_3383.x)) + vec2<f32>(x_3386.x, x_3386.y));
    let x_3389 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3388.x, x_3388.y, x_3389.z, x_3389.w);
    let x_3392 : vec4<f32> = x_3363.x_MainLightWorldToLight[2i];
    let x_3394 : vec3<f32> = vs_INTERP0;
    let x_3397 : vec4<f32> = u_xlat7;
    let x_3399 : vec2<f32> = ((vec2<f32>(x_3392.x, x_3392.y) * vec2<f32>(x_3394.z, x_3394.z)) + vec2<f32>(x_3397.x, x_3397.y));
    let x_3400 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3399.x, x_3399.y, x_3400.z, x_3400.w);
    let x_3402 : vec4<f32> = u_xlat7;
    let x_3405 : vec4<f32> = x_3363.x_MainLightWorldToLight[3i];
    let x_3407 : vec2<f32> = (vec2<f32>(x_3402.x, x_3402.y) + vec2<f32>(x_3405.x, x_3405.y));
    let x_3408 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3407.x, x_3407.y, x_3408.z, x_3408.w);
    let x_3410 : vec4<f32> = u_xlat7;
    let x_3413 : vec2<f32> = ((vec2<f32>(x_3410.x, x_3410.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3414 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3413.x, x_3413.y, x_3414.z, x_3414.w);
    let x_3421 : vec4<f32> = u_xlat7;
    let x_3424 : f32 = x_158.x_GlobalMipBias.x;
    let x_3425 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3421.x, x_3421.y), x_3424);
    u_xlat7 = x_3425;
    let x_3428 : f32 = x_3363.x_MainLightCookieTextureFormat;
    let x_3430 : f32 = x_3363.x_MainLightCookieTextureFormat;
    let x_3432 : f32 = x_3363.x_MainLightCookieTextureFormat;
    let x_3434 : f32 = x_3363.x_MainLightCookieTextureFormat;
    let x_3435 : vec4<f32> = vec4<f32>(x_3428, x_3430, x_3432, x_3434);
    let x_3442 : vec4<bool> = (vec4<f32>(x_3435.x, x_3435.y, x_3435.z, x_3435.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3442.x, x_3442.y);
    let x_3445 : bool = u_xlatb8.y;
    if (x_3445) {
      let x_3450 : f32 = u_xlat7.w;
      x_3446 = x_3450;
    } else {
      let x_3453 : f32 = u_xlat7.x;
      x_3446 = x_3453;
    }
    let x_3454 : f32 = x_3446;
    u_xlat2.x = x_3454;
    let x_3457 : bool = u_xlatb8.x;
    if (x_3457) {
      let x_3461 : vec4<f32> = u_xlat7;
      x_3458 = vec3<f32>(x_3461.x, x_3461.y, x_3461.z);
    } else {
      let x_3464 : vec3<f32> = u_xlat2;
      x_3458 = vec3<f32>(x_3464.x, x_3464.x, x_3464.x);
    }
    let x_3466 : vec3<f32> = x_3458;
    let x_3467 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3466.x, x_3466.y, x_3466.z, x_3467.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3473 : vec4<f32> = u_xlat7;
  let x_3476 : vec4<f32> = x_158.x_MainLightColor;
  let x_3478 : vec3<f32> = (vec3<f32>(x_3473.x, x_3473.y, x_3473.z) * vec3<f32>(x_3476.x, x_3476.y, x_3476.z));
  let x_3479 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3478.x, x_3478.y, x_3478.z, x_3479.w);
  let x_3481 : f32 = u_xlat48;
  let x_3483 : vec4<f32> = u_xlat7;
  let x_3485 : vec3<f32> = (vec3<f32>(x_3481, x_3481, x_3481) * vec3<f32>(x_3483.x, x_3483.y, x_3483.z));
  let x_3486 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3485.x, x_3485.y, x_3485.z, x_3486.w);
  let x_3488 : vec3<f32> = u_xlat5;
  let x_3490 : vec3<f32> = u_xlat22;
  u_xlat2.x = dot(-(x_3488), x_3490);
  let x_3494 : f32 = u_xlat2.x;
  let x_3496 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3494 + x_3496);
  let x_3499 : vec3<f32> = u_xlat22;
  let x_3500 : vec3<f32> = u_xlat2;
  let x_3504 : vec3<f32> = u_xlat5;
  let x_3506 : vec3<f32> = ((x_3499 * -(vec3<f32>(x_3500.x, x_3500.x, x_3500.x))) + -(x_3504));
  let x_3507 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3506.x, x_3506.y, x_3506.z, x_3507.w);
  let x_3509 : vec3<f32> = u_xlat22;
  let x_3510 : vec3<f32> = u_xlat5;
  u_xlat2.x = dot(x_3509, x_3510);
  let x_3514 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3514, 0.0f, 1.0f);
  let x_3518 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3518) + 1.0f);
  let x_3523 : f32 = u_xlat2.x;
  let x_3525 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3523 * x_3525);
  let x_3529 : f32 = u_xlat2.x;
  let x_3531 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3529 * x_3531);
  let x_3535 : f32 = u_xlat46.x;
  u_xlat71 = ((-(x_3535) * 0.699999988f) + 1.700000048f);
  let x_3542 : f32 = u_xlat46.x;
  let x_3543 : f32 = u_xlat71;
  u_xlat46.x = (x_3542 * x_3543);
  let x_3547 : f32 = u_xlat46.x;
  u_xlat46.x = (x_3547 * 6.0f);
  let x_3559 : vec4<f32> = u_xlat8;
  let x_3562 : f32 = u_xlat46.x;
  let x_3563 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3559.x, x_3559.y, x_3559.z), x_3562);
  u_xlat8 = x_3563;
  let x_3565 : f32 = u_xlat8.w;
  u_xlat46.x = (x_3565 + -1.0f);
  let x_3569 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3571 : f32 = u_xlat46.x;
  u_xlat46.x = ((x_3569 * x_3571) + 1.0f);
  let x_3576 : f32 = u_xlat46.x;
  u_xlat46.x = max(x_3576, 0.0f);
  let x_3580 : f32 = u_xlat46.x;
  u_xlat46.x = log2(x_3580);
  let x_3584 : f32 = u_xlat46.x;
  let x_3586 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat46.x = (x_3584 * x_3586);
  let x_3590 : f32 = u_xlat46.x;
  u_xlat46.x = exp2(x_3590);
  let x_3594 : f32 = u_xlat46.x;
  let x_3596 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat46.x = (x_3594 * x_3596);
  let x_3599 : vec4<f32> = u_xlat8;
  let x_3601 : vec2<f32> = u_xlat46;
  let x_3603 : vec3<f32> = (vec3<f32>(x_3599.x, x_3599.y, x_3599.z) * vec3<f32>(x_3601.x, x_3601.x, x_3601.x));
  let x_3604 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3603.x, x_3603.y, x_3603.z, x_3604.w);
  let x_3606 : f32 = u_xlat68;
  let x_3608 : f32 = u_xlat68;
  u_xlat46 = ((vec2<f32>(x_3606, x_3606) * vec2<f32>(x_3608, x_3608)) + vec2<f32>(-1.0f, 1.0f));
  let x_3614 : f32 = u_xlat46.y;
  u_xlat68 = (1.0f / x_3614);
  let x_3617 : f32 = u_xlat2.x;
  let x_3619 : f32 = u_xlat26.x;
  u_xlat2.x = ((x_3617 * x_3619) + 0.039999999f);
  let x_3625 : f32 = u_xlat2.x;
  let x_3626 : f32 = u_xlat68;
  u_xlat2.x = (x_3625 * x_3626);
  let x_3629 : vec3<f32> = u_xlat2;
  let x_3631 : vec4<f32> = u_xlat8;
  let x_3633 : vec3<f32> = (vec3<f32>(x_3629.x, x_3629.x, x_3629.x) * vec3<f32>(x_3631.x, x_3631.y, x_3631.z));
  let x_3634 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3633.x, x_3633.y, x_3633.z, x_3634.w);
  let x_3636 : vec4<f32> = u_xlat3;
  let x_3638 : vec4<f32> = u_xlat6;
  let x_3641 : vec4<f32> = u_xlat8;
  let x_3643 : vec3<f32> = ((vec3<f32>(x_3636.x, x_3636.y, x_3636.z) * vec3<f32>(x_3638.x, x_3638.y, x_3638.z)) + vec3<f32>(x_3641.x, x_3641.y, x_3641.z));
  let x_3644 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3643.x, x_3643.y, x_3643.z, x_3644.w);
  let x_3647 : f32 = u_xlat0.x;
  let x_3649 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3647 * x_3649);
  let x_3652 : vec3<f32> = u_xlat22;
  let x_3654 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat2.x = dot(x_3652, vec3<f32>(x_3654.x, x_3654.y, x_3654.z));
  let x_3659 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3659, 0.0f, 1.0f);
  let x_3663 : f32 = u_xlat0.x;
  let x_3665 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3663 * x_3665);
  let x_3668 : vec3<f32> = u_xlat0;
  let x_3670 : vec4<f32> = u_xlat7;
  let x_3672 : vec3<f32> = (vec3<f32>(x_3668.x, x_3668.x, x_3668.x) * vec3<f32>(x_3670.x, x_3670.y, x_3670.z));
  let x_3673 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3672.x, x_3672.y, x_3672.z, x_3673.w);
  let x_3675 : vec3<f32> = u_xlat5;
  let x_3677 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3679 : vec3<f32> = (x_3675 + vec3<f32>(x_3677.x, x_3677.y, x_3677.z));
  let x_3680 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3679.x, x_3679.y, x_3679.z, x_3680.w);
  let x_3682 : vec4<f32> = u_xlat8;
  let x_3684 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3682.x, x_3682.y, x_3682.z), vec3<f32>(x_3684.x, x_3684.y, x_3684.z));
  let x_3689 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3689, 1.17549435e-37f);
  let x_3693 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3693);
  let x_3696 : vec3<f32> = u_xlat0;
  let x_3698 : vec4<f32> = u_xlat8;
  let x_3700 : vec3<f32> = (vec3<f32>(x_3696.x, x_3696.x, x_3696.x) * vec3<f32>(x_3698.x, x_3698.y, x_3698.z));
  let x_3701 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3700.x, x_3700.y, x_3700.z, x_3701.w);
  let x_3703 : vec3<f32> = u_xlat22;
  let x_3704 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3703, vec3<f32>(x_3704.x, x_3704.y, x_3704.z));
  let x_3709 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3709, 0.0f, 1.0f);
  let x_3713 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3715 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3713.x, x_3713.y, x_3713.z), vec3<f32>(x_3715.x, x_3715.y, x_3715.z));
  let x_3720 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3720, 0.0f, 1.0f);
  let x_3724 : f32 = u_xlat0.x;
  let x_3726 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3724 * x_3726);
  let x_3730 : f32 = u_xlat0.x;
  let x_3732 : f32 = u_xlat46.x;
  u_xlat0.x = ((x_3730 * x_3732) + 1.000010014f);
  let x_3738 : f32 = u_xlat2.x;
  let x_3740 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3738 * x_3740);
  let x_3744 : f32 = u_xlat0.x;
  let x_3746 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3744 * x_3746);
  let x_3750 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3750, 0.100000001f);
  let x_3755 : f32 = u_xlat0.x;
  let x_3757 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3755 * x_3757);
  let x_3760 : f32 = u_xlat70;
  let x_3762 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3760 * x_3762);
  let x_3765 : f32 = u_xlat69;
  let x_3767 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3765 / x_3767);
  let x_3770 : vec3<f32> = u_xlat0;
  let x_3774 : vec4<f32> = u_xlat6;
  let x_3776 : vec3<f32> = ((vec3<f32>(x_3770.x, x_3770.x, x_3770.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3774.x, x_3774.y, x_3774.z));
  let x_3777 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3776.x, x_3776.y, x_3776.z, x_3777.w);
  let x_3779 : vec4<f32> = u_xlat7;
  let x_3781 : vec4<f32> = u_xlat8;
  let x_3783 : vec3<f32> = (vec3<f32>(x_3779.x, x_3779.y, x_3779.z) * vec3<f32>(x_3781.x, x_3781.y, x_3781.z));
  let x_3784 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3783.x, x_3783.y, x_3783.z, x_3784.w);
  let x_3787 : f32 = x_158.x_AdditionalLightsCount.x;
  let x_3789 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3787, x_3789);
  let x_3794 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3794));
  let x_3798 : f32 = x_3363.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3800 : f32 = x_3363.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3802 : f32 = x_3363.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3804 : f32 = x_3363.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3805 : vec4<f32> = vec4<f32>(x_3798, x_3800, x_3802, x_3804);
  let x_3812 : vec4<bool> = (vec4<f32>(x_3805.x, x_3805.y, x_3805.z, x_3805.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3813 : vec2<bool> = vec2<bool>(x_3812.x, x_3812.w);
  let x_3814 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3813.x, x_3814.y, x_3814.z, x_3813.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3825 : u32 = u_xlatu_loop_1;
    let x_3826 : u32 = u_xlatu0;
    if ((x_3825 < x_3826)) {
    } else {
      break;
    }
    let x_3829 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3829 >> 2u);
    let x_3832 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3832 & 3u));
    let x_3835 : u32 = u_xlatu71;
    let x_3838 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3835)];
    let x_3848 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3853 : vec4<u32> = indexable[x_3848];
    u_xlat71 = dot(x_3838, bitcast<vec4<f32>>(x_3853));
    let x_3856 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3856));
    let x_3859 : vec3<f32> = vs_INTERP0;
    let x_3871 : u32 = u_xlatu71;
    let x_3874 : vec4<f32> = x_3870.x_AdditionalLightsPosition[bitcast<i32>(x_3871)];
    let x_3877 : u32 = u_xlatu71;
    let x_3880 : vec4<f32> = x_3870.x_AdditionalLightsPosition[bitcast<i32>(x_3877)];
    let x_3882 : vec3<f32> = ((-(x_3859) * vec3<f32>(x_3874.w, x_3874.w, x_3874.w)) + vec3<f32>(x_3880.x, x_3880.y, x_3880.z));
    let x_3883 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3882.x, x_3882.y, x_3882.z, x_3883.w);
    let x_3885 : vec4<f32> = u_xlat9;
    let x_3887 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3885.x, x_3885.y, x_3885.z), vec3<f32>(x_3887.x, x_3887.y, x_3887.z));
    let x_3890 : f32 = u_xlat72;
    u_xlat72 = max(x_3890, 6.10351562e-05f);
    let x_3894 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3894);
    let x_3896 : f32 = u_xlat73;
    let x_3898 : vec4<f32> = u_xlat9;
    let x_3900 : vec3<f32> = (vec3<f32>(x_3896, x_3896, x_3896) * vec3<f32>(x_3898.x, x_3898.y, x_3898.z));
    let x_3901 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3900.x, x_3900.y, x_3900.z, x_3901.w);
    let x_3904 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3904);
    let x_3906 : f32 = u_xlat72;
    let x_3907 : u32 = u_xlatu71;
    let x_3910 : f32 = x_3870.x_AdditionalLightsAttenuation[bitcast<i32>(x_3907)].x;
    u_xlat72 = (x_3906 * x_3910);
    let x_3912 : f32 = u_xlat72;
    let x_3914 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3912) * x_3914) + 1.0f);
    let x_3917 : f32 = u_xlat72;
    u_xlat72 = max(x_3917, 0.0f);
    let x_3919 : f32 = u_xlat72;
    let x_3920 : f32 = u_xlat72;
    u_xlat72 = (x_3919 * x_3920);
    let x_3922 : f32 = u_xlat72;
    let x_3923 : f32 = u_xlat74;
    u_xlat72 = (x_3922 * x_3923);
    let x_3925 : u32 = u_xlatu71;
    let x_3928 : vec4<f32> = x_3870.x_AdditionalLightsSpotDir[bitcast<i32>(x_3925)];
    let x_3930 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3928.x, x_3928.y, x_3928.z), vec3<f32>(x_3930.x, x_3930.y, x_3930.z));
    let x_3933 : f32 = u_xlat74;
    let x_3934 : u32 = u_xlatu71;
    let x_3937 : f32 = x_3870.x_AdditionalLightsAttenuation[bitcast<i32>(x_3934)].z;
    let x_3939 : u32 = u_xlatu71;
    let x_3942 : f32 = x_3870.x_AdditionalLightsAttenuation[bitcast<i32>(x_3939)].w;
    u_xlat74 = ((x_3933 * x_3937) + x_3942);
    let x_3944 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3944, 0.0f, 1.0f);
    let x_3946 : f32 = u_xlat74;
    let x_3947 : f32 = u_xlat74;
    u_xlat74 = (x_3946 * x_3947);
    let x_3949 : f32 = u_xlat72;
    let x_3950 : f32 = u_xlat74;
    u_xlat72 = (x_3949 * x_3950);
    let x_3953 : u32 = u_xlatu71;
    u_xlatu74 = (x_3953 >> 5u);
    let x_3956 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3956) & 31i)));
    let x_3962 : i32 = u_xlati75;
    let x_3964 : u32 = u_xlatu74;
    let x_3967 : f32 = x_3363.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3964)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3962) & bitcast<u32>(x_3967)));
    let x_3971 : i32 = u_xlati74;
    if ((x_3971 != 0i)) {
      let x_3981 : u32 = u_xlatu71;
      let x_3984 : f32 = x_3980.x_AdditionalLightsLightTypes[bitcast<i32>(x_3981)].el;
      u_xlati74 = i32(x_3984);
      let x_3986 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3986 != 0i));
      let x_3990 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_3990) << bitcast<u32>(2i));
      let x_3993 : i32 = u_xlati75;
      if ((x_3993 != 0i)) {
        let x_3997 : vec3<f32> = vs_INTERP0;
        let x_3999 : i32 = u_xlati76;
        let x_4002 : i32 = u_xlati76;
        let x_4006 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_3999 + 1i) / 4i)][((x_4002 + 1i) % 4i)];
        let x_4008 : vec3<f32> = (vec3<f32>(x_3997.y, x_3997.y, x_3997.y) * vec3<f32>(x_4006.x, x_4006.y, x_4006.w));
        let x_4009 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4008.x, x_4008.y, x_4008.z, x_4009.w);
        let x_4011 : i32 = u_xlati76;
        let x_4013 : i32 = u_xlati76;
        let x_4016 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[(x_4011 / 4i)][(x_4013 % 4i)];
        let x_4018 : vec3<f32> = vs_INTERP0;
        let x_4021 : vec4<f32> = u_xlat11;
        let x_4023 : vec3<f32> = ((vec3<f32>(x_4016.x, x_4016.y, x_4016.w) * vec3<f32>(x_4018.x, x_4018.x, x_4018.x)) + vec3<f32>(x_4021.x, x_4021.y, x_4021.z));
        let x_4024 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4023.x, x_4023.y, x_4023.z, x_4024.w);
        let x_4026 : i32 = u_xlati76;
        let x_4029 : i32 = u_xlati76;
        let x_4033 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4026 + 2i) / 4i)][((x_4029 + 2i) % 4i)];
        let x_4035 : vec3<f32> = vs_INTERP0;
        let x_4038 : vec4<f32> = u_xlat11;
        let x_4040 : vec3<f32> = ((vec3<f32>(x_4033.x, x_4033.y, x_4033.w) * vec3<f32>(x_4035.z, x_4035.z, x_4035.z)) + vec3<f32>(x_4038.x, x_4038.y, x_4038.z));
        let x_4041 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4040.x, x_4040.y, x_4040.z, x_4041.w);
        let x_4043 : vec4<f32> = u_xlat11;
        let x_4045 : i32 = u_xlati76;
        let x_4048 : i32 = u_xlati76;
        let x_4052 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4045 + 3i) / 4i)][((x_4048 + 3i) % 4i)];
        let x_4054 : vec3<f32> = (vec3<f32>(x_4043.x, x_4043.y, x_4043.z) + vec3<f32>(x_4052.x, x_4052.y, x_4052.w));
        let x_4055 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4054.x, x_4054.y, x_4054.z, x_4055.w);
        let x_4057 : vec4<f32> = u_xlat11;
        let x_4059 : vec4<f32> = u_xlat11;
        let x_4061 : vec2<f32> = (vec2<f32>(x_4057.x, x_4057.y) / vec2<f32>(x_4059.z, x_4059.z));
        let x_4062 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4061.x, x_4061.y, x_4062.z, x_4062.w);
        let x_4064 : vec4<f32> = u_xlat11;
        let x_4067 : vec2<f32> = ((vec2<f32>(x_4064.x, x_4064.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4068 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4067.x, x_4067.y, x_4068.z, x_4068.w);
        let x_4070 : vec4<f32> = u_xlat11;
        let x_4074 : vec2<f32> = clamp(vec2<f32>(x_4070.x, x_4070.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4075 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4074.x, x_4074.y, x_4075.z, x_4075.w);
        let x_4077 : u32 = u_xlatu71;
        let x_4080 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4077)];
        let x_4082 : vec4<f32> = u_xlat11;
        let x_4085 : u32 = u_xlatu71;
        let x_4088 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4085)];
        let x_4090 : vec2<f32> = ((vec2<f32>(x_4080.x, x_4080.y) * vec2<f32>(x_4082.x, x_4082.y)) + vec2<f32>(x_4088.z, x_4088.w));
        let x_4091 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4090.x, x_4090.y, x_4091.z, x_4091.w);
      } else {
        let x_4095 : i32 = u_xlati74;
        u_xlatb74 = (x_4095 == 1i);
        let x_4097 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4097);
        let x_4099 : i32 = u_xlati74;
        if ((x_4099 != 0i)) {
          let x_4103 : vec3<f32> = vs_INTERP0;
          let x_4105 : i32 = u_xlati76;
          let x_4108 : i32 = u_xlati76;
          let x_4112 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4105 + 1i) / 4i)][((x_4108 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4103.y, x_4103.y) * vec2<f32>(x_4112.x, x_4112.y));
          let x_4115 : i32 = u_xlati76;
          let x_4117 : i32 = u_xlati76;
          let x_4120 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[(x_4115 / 4i)][(x_4117 % 4i)];
          let x_4122 : vec3<f32> = vs_INTERP0;
          let x_4125 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4120.x, x_4120.y) * vec2<f32>(x_4122.x, x_4122.x)) + x_4125);
          let x_4127 : i32 = u_xlati76;
          let x_4130 : i32 = u_xlati76;
          let x_4134 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4127 + 2i) / 4i)][((x_4130 + 2i) % 4i)];
          let x_4136 : vec3<f32> = vs_INTERP0;
          let x_4139 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4134.x, x_4134.y) * vec2<f32>(x_4136.z, x_4136.z)) + x_4139);
          let x_4141 : vec2<f32> = u_xlat55;
          let x_4142 : i32 = u_xlati76;
          let x_4145 : i32 = u_xlati76;
          let x_4149 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4142 + 3i) / 4i)][((x_4145 + 3i) % 4i)];
          u_xlat55 = (x_4141 + vec2<f32>(x_4149.x, x_4149.y));
          let x_4152 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4152 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4155 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4155);
          let x_4157 : u32 = u_xlatu71;
          let x_4160 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4157)];
          let x_4162 : vec2<f32> = u_xlat55;
          let x_4164 : u32 = u_xlatu71;
          let x_4167 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4164)];
          let x_4169 : vec2<f32> = ((vec2<f32>(x_4160.x, x_4160.y) * x_4162) + vec2<f32>(x_4167.z, x_4167.w));
          let x_4170 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4169.x, x_4169.y, x_4170.z, x_4170.w);
        } else {
          let x_4173 : vec3<f32> = vs_INTERP0;
          let x_4175 : i32 = u_xlati76;
          let x_4178 : i32 = u_xlati76;
          let x_4182 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4175 + 1i) / 4i)][((x_4178 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4173.y, x_4173.y, x_4173.y, x_4173.y) * x_4182);
          let x_4184 : i32 = u_xlati76;
          let x_4186 : i32 = u_xlati76;
          let x_4189 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[(x_4184 / 4i)][(x_4186 % 4i)];
          let x_4190 : vec3<f32> = vs_INTERP0;
          let x_4193 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4189 * vec4<f32>(x_4190.x, x_4190.x, x_4190.x, x_4190.x)) + x_4193);
          let x_4195 : i32 = u_xlati76;
          let x_4198 : i32 = u_xlati76;
          let x_4202 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4195 + 2i) / 4i)][((x_4198 + 2i) % 4i)];
          let x_4203 : vec3<f32> = vs_INTERP0;
          let x_4206 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4202 * vec4<f32>(x_4203.z, x_4203.z, x_4203.z, x_4203.z)) + x_4206);
          let x_4208 : vec4<f32> = u_xlat12;
          let x_4209 : i32 = u_xlati76;
          let x_4212 : i32 = u_xlati76;
          let x_4216 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4209 + 3i) / 4i)][((x_4212 + 3i) % 4i)];
          u_xlat12 = (x_4208 + x_4216);
          let x_4218 : vec4<f32> = u_xlat12;
          let x_4220 : vec4<f32> = u_xlat12;
          let x_4222 : vec3<f32> = (vec3<f32>(x_4218.x, x_4218.y, x_4218.z) / vec3<f32>(x_4220.w, x_4220.w, x_4220.w));
          let x_4223 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4222.x, x_4222.y, x_4222.z, x_4223.w);
          let x_4225 : vec4<f32> = u_xlat12;
          let x_4227 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4225.x, x_4225.y, x_4225.z), vec3<f32>(x_4227.x, x_4227.y, x_4227.z));
          let x_4230 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4230);
          let x_4232 : f32 = u_xlat74;
          let x_4234 : vec4<f32> = u_xlat12;
          let x_4236 : vec3<f32> = (vec3<f32>(x_4232, x_4232, x_4232) * vec3<f32>(x_4234.x, x_4234.y, x_4234.z));
          let x_4237 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4236.x, x_4236.y, x_4236.z, x_4237.w);
          let x_4239 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4239.x, x_4239.y, x_4239.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4244 : f32 = u_xlat74;
          u_xlat74 = max(x_4244, 0.000001f);
          let x_4247 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4247);
          let x_4249 : f32 = u_xlat74;
          let x_4251 : vec4<f32> = u_xlat12;
          let x_4253 : vec3<f32> = (vec3<f32>(x_4249, x_4249, x_4249) * vec3<f32>(x_4251.z, x_4251.x, x_4251.y));
          let x_4254 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4253.x, x_4253.y, x_4253.z, x_4254.w);
          let x_4257 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4257);
          let x_4261 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4261, 0.0f, 1.0f);
          let x_4265 : vec4<f32> = u_xlat13;
          let x_4268 : vec4<bool> = (vec4<f32>(x_4265.y, x_4265.z, x_4265.y, x_4265.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4268.x, x_4268.y);
          let x_4271 : bool = u_xlatb55.x;
          if (x_4271) {
            let x_4276 : f32 = u_xlat13.x;
            x_4272 = x_4276;
          } else {
            let x_4279 : f32 = u_xlat13.x;
            x_4272 = -(x_4279);
          }
          let x_4281 : f32 = x_4272;
          u_xlat55.x = x_4281;
          let x_4284 : bool = u_xlatb55.y;
          if (x_4284) {
            let x_4289 : f32 = u_xlat13.x;
            x_4285 = x_4289;
          } else {
            let x_4292 : f32 = u_xlat13.x;
            x_4285 = -(x_4292);
          }
          let x_4294 : f32 = x_4285;
          u_xlat55.y = x_4294;
          let x_4296 : vec4<f32> = u_xlat12;
          let x_4298 : f32 = u_xlat74;
          let x_4301 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4296.x, x_4296.y) * vec2<f32>(x_4298, x_4298)) + x_4301);
          let x_4303 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4303 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4306 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4306, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4310 : u32 = u_xlatu71;
          let x_4313 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4310)];
          let x_4315 : vec2<f32> = u_xlat55;
          let x_4317 : u32 = u_xlatu71;
          let x_4320 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4317)];
          let x_4322 : vec2<f32> = ((vec2<f32>(x_4313.x, x_4313.y) * x_4315) + vec2<f32>(x_4320.z, x_4320.w));
          let x_4323 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4322.x, x_4322.y, x_4323.z, x_4323.w);
        }
      }
      let x_4330 : vec4<f32> = u_xlat11;
      let x_4333 : f32 = x_158.x_GlobalMipBias.x;
      let x_4334 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4330.x, x_4330.y), x_4333);
      u_xlat11 = x_4334;
      let x_4336 : bool = u_xlatb2.w;
      if (x_4336) {
        let x_4341 : f32 = u_xlat11.w;
        x_4337 = x_4341;
      } else {
        let x_4344 : f32 = u_xlat11.x;
        x_4337 = x_4344;
      }
      let x_4345 : f32 = x_4337;
      u_xlat74 = x_4345;
      let x_4347 : bool = u_xlatb2.x;
      if (x_4347) {
        let x_4351 : vec4<f32> = u_xlat11;
        x_4348 = vec3<f32>(x_4351.x, x_4351.y, x_4351.z);
      } else {
        let x_4354 : f32 = u_xlat74;
        x_4348 = vec3<f32>(x_4354, x_4354, x_4354);
      }
      let x_4356 : vec3<f32> = x_4348;
      let x_4357 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4356.x, x_4356.y, x_4356.z, x_4357.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4363 : vec4<f32> = u_xlat11;
    let x_4365 : u32 = u_xlatu71;
    let x_4368 : vec4<f32> = x_3870.x_AdditionalLightsColor[bitcast<i32>(x_4365)];
    let x_4370 : vec3<f32> = (vec3<f32>(x_4363.x, x_4363.y, x_4363.z) * vec3<f32>(x_4368.x, x_4368.y, x_4368.z));
    let x_4371 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4370.x, x_4370.y, x_4370.z, x_4371.w);
    let x_4373 : f32 = u_xlat48;
    let x_4375 : vec4<f32> = u_xlat11;
    let x_4377 : vec3<f32> = (vec3<f32>(x_4373, x_4373, x_4373) * vec3<f32>(x_4375.x, x_4375.y, x_4375.z));
    let x_4378 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4377.x, x_4377.y, x_4377.z, x_4378.w);
    let x_4380 : vec3<f32> = u_xlat22;
    let x_4381 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(x_4380, vec3<f32>(x_4381.x, x_4381.y, x_4381.z));
    let x_4384 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4384, 0.0f, 1.0f);
    let x_4386 : f32 = u_xlat71;
    let x_4387 : f32 = u_xlat72;
    u_xlat71 = (x_4386 * x_4387);
    let x_4389 : f32 = u_xlat71;
    let x_4391 : vec4<f32> = u_xlat11;
    let x_4393 : vec3<f32> = (vec3<f32>(x_4389, x_4389, x_4389) * vec3<f32>(x_4391.x, x_4391.y, x_4391.z));
    let x_4394 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4393.x, x_4393.y, x_4393.z, x_4394.w);
    let x_4396 : vec4<f32> = u_xlat9;
    let x_4398 : f32 = u_xlat73;
    let x_4401 : vec3<f32> = u_xlat5;
    let x_4402 : vec3<f32> = ((vec3<f32>(x_4396.x, x_4396.y, x_4396.z) * vec3<f32>(x_4398, x_4398, x_4398)) + x_4401);
    let x_4403 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4402.x, x_4402.y, x_4402.z, x_4403.w);
    let x_4405 : vec4<f32> = u_xlat9;
    let x_4407 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4405.x, x_4405.y, x_4405.z), vec3<f32>(x_4407.x, x_4407.y, x_4407.z));
    let x_4410 : f32 = u_xlat71;
    u_xlat71 = max(x_4410, 1.17549435e-37f);
    let x_4412 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4412);
    let x_4414 : f32 = u_xlat71;
    let x_4416 : vec4<f32> = u_xlat9;
    let x_4418 : vec3<f32> = (vec3<f32>(x_4414, x_4414, x_4414) * vec3<f32>(x_4416.x, x_4416.y, x_4416.z));
    let x_4419 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4418.x, x_4418.y, x_4418.z, x_4419.w);
    let x_4421 : vec3<f32> = u_xlat22;
    let x_4422 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(x_4421, vec3<f32>(x_4422.x, x_4422.y, x_4422.z));
    let x_4425 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4425, 0.0f, 1.0f);
    let x_4427 : vec4<f32> = u_xlat10;
    let x_4429 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4427.x, x_4427.y, x_4427.z), vec3<f32>(x_4429.x, x_4429.y, x_4429.z));
    let x_4432 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4432, 0.0f, 1.0f);
    let x_4434 : f32 = u_xlat71;
    let x_4435 : f32 = u_xlat71;
    u_xlat71 = (x_4434 * x_4435);
    let x_4437 : f32 = u_xlat71;
    let x_4439 : f32 = u_xlat46.x;
    u_xlat71 = ((x_4437 * x_4439) + 1.000010014f);
    let x_4442 : f32 = u_xlat72;
    let x_4443 : f32 = u_xlat72;
    u_xlat72 = (x_4442 * x_4443);
    let x_4445 : f32 = u_xlat71;
    let x_4446 : f32 = u_xlat71;
    u_xlat71 = (x_4445 * x_4446);
    let x_4448 : f32 = u_xlat72;
    u_xlat72 = max(x_4448, 0.100000001f);
    let x_4450 : f32 = u_xlat71;
    let x_4451 : f32 = u_xlat72;
    u_xlat71 = (x_4450 * x_4451);
    let x_4453 : f32 = u_xlat70;
    let x_4454 : f32 = u_xlat71;
    u_xlat71 = (x_4453 * x_4454);
    let x_4456 : f32 = u_xlat69;
    let x_4457 : f32 = u_xlat71;
    u_xlat71 = (x_4456 / x_4457);
    let x_4459 : f32 = u_xlat71;
    let x_4462 : vec4<f32> = u_xlat6;
    let x_4464 : vec3<f32> = ((vec3<f32>(x_4459, x_4459, x_4459) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_4462.x, x_4462.y, x_4462.z));
    let x_4465 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4464.x, x_4464.y, x_4464.z, x_4465.w);
    let x_4467 : vec4<f32> = u_xlat9;
    let x_4469 : vec4<f32> = u_xlat11;
    let x_4472 : vec4<f32> = u_xlat8;
    let x_4474 : vec3<f32> = ((vec3<f32>(x_4467.x, x_4467.y, x_4467.z) * vec3<f32>(x_4469.x, x_4469.y, x_4469.z)) + vec3<f32>(x_4472.x, x_4472.y, x_4472.z));
    let x_4475 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4474.x, x_4474.y, x_4474.z, x_4475.w);

    continuing {
      let x_4477 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4477 + bitcast<u32>(1i));
    }
  }
  let x_4479 : vec4<f32> = u_xlat3;
  let x_4481 : vec3<f32> = u_xlat4;
  let x_4484 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_4479.x, x_4479.y, x_4479.z) * vec3<f32>(x_4481.x, x_4481.x, x_4481.x)) + vec3<f32>(x_4484.x, x_4484.y, x_4484.z));
  let x_4487 : vec4<f32> = u_xlat8;
  let x_4489 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4487.x, x_4487.y, x_4487.z) + x_4489);
  let x_4493 : vec4<f32> = vs_INTERP4;
  let x_4495 : vec3<f32> = u_xlat1;
  let x_4497 : vec3<f32> = u_xlat0;
  let x_4498 : vec3<f32> = ((vec3<f32>(x_4493.w, x_4493.w, x_4493.w) * x_4495) + x_4497);
  let x_4499 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4498.x, x_4498.y, x_4498.z, x_4499.w);
  let x_4501 : bool = u_xlatb24;
  let x_4502 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4502, x_4501);
  let x_4508 : u32 = x_158.x_RenderingLayerMaxInt;
  let x_4510 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4508 & bitcast<u32>(x_4510));
  let x_4513 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4513);
  let x_4518 : f32 = u_xlat0.x;
  let x_4520 : f32 = x_158.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4518 * x_4520);
  let x_4524 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4524, 0.0f, 1.0f);
  let x_4528 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4528.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

