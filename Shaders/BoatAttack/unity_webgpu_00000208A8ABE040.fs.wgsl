type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(4) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3571 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1592 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat44 : f32;
  var x_1637 : f32;
  var x_1715 : f32;
  var x_1727 : f32;
  var x_1738 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : bool;
  var x_3142 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat29 = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1108 : f32 = u_xlat11.y;
        u_xlat8.w = x_1108;
        let x_1111 : vec4<f32> = u_xlat3;
        let x_1114 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1117 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(x_1114.x, x_1114.y)) + vec2<f32>(x_1117.x, x_1117.w));
        let x_1120 : vec4<f32> = u_xlat11;
        let x_1121 : vec3<f32> = vec3<f32>(x_1120.x, x_1120.z, x_1120.w);
        let x_1122 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1121.x, x_1122.y, x_1121.y, x_1121.z);
        let x_1124 : vec4<f32> = u_xlat3;
        let x_1127 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1134 : vec4<f32> = u_xlat3;
        let x_1137 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1140 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1134.x, x_1134.y) * vec2<f32>(x_1137.x, x_1137.y)) + vec2<f32>(x_1140.w, x_1140.y));
        let x_1144 : f32 = u_xlat8.x;
        u_xlat9.x = x_1144;
        let x_1146 : vec4<f32> = u_xlat3;
        let x_1149 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1152 : vec4<f32> = u_xlat9;
        let x_1154 : vec2<f32> = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1149.x, x_1149.y)) + vec2<f32>(x_1152.x, x_1152.y));
        let x_1155 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1154.x, x_1154.y, x_1155.z, x_1155.w);
        let x_1158 : vec4<f32> = u_xlat7;
        let x_1160 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1158.x, x_1158.x, x_1158.x, x_1158.x) * x_1160);
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1165 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y) * x_1165);
        let x_1168 : vec4<f32> = u_xlat7;
        let x_1170 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1168.z, x_1168.z, x_1168.z, x_1168.z) * x_1170);
        let x_1172 : vec4<f32> = u_xlat7;
        let x_1174 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1172.w, x_1172.w, x_1172.w, x_1172.w) * x_1174);
        let x_1177 : vec4<f32> = u_xlat12;
        let x_1178 : vec2<f32> = vec2<f32>(x_1177.x, x_1177.y);
        let x_1180 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1178.x, x_1178.y, x_1180);
        let x_1187 : vec3<f32> = txVec13;
        let x_1189 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1187.xy, x_1187.z);
        u_xlat65 = x_1189;
        let x_1191 : vec4<f32> = u_xlat12;
        let x_1192 : vec2<f32> = vec2<f32>(x_1191.z, x_1191.w);
        let x_1194 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1192.x, x_1192.y, x_1194);
        let x_1202 : vec3<f32> = txVec14;
        let x_1204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1202.xy, x_1202.z);
        u_xlat68 = x_1204;
        let x_1205 : f32 = u_xlat68;
        let x_1207 : f32 = u_xlat17.y;
        u_xlat68 = (x_1205 * x_1207);
        let x_1210 : f32 = u_xlat17.x;
        let x_1211 : f32 = u_xlat65;
        let x_1213 : f32 = u_xlat68;
        u_xlat65 = ((x_1210 * x_1211) + x_1213);
        let x_1216 : vec2<f32> = u_xlat45;
        let x_1218 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec15;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat45.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat45.x;
        let x_1234 : f32 = u_xlat65;
        u_xlat65 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat15;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.x, x_1237.y);
        let x_1240 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec16;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat45.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat45.x;
        let x_1256 : f32 = u_xlat65;
        u_xlat65 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat13;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec17;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat45.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat45.x;
        let x_1278 : f32 = u_xlat65;
        u_xlat65 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat13;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec18;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat45.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat45.x;
        let x_1300 : f32 = u_xlat65;
        u_xlat65 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec4<f32> = u_xlat14;
        let x_1304 : vec2<f32> = vec2<f32>(x_1303.x, x_1303.y);
        let x_1306 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1304.x, x_1304.y, x_1306);
        let x_1313 : vec3<f32> = txVec19;
        let x_1315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1313.xy, x_1313.z);
        u_xlat45.x = x_1315;
        let x_1318 : f32 = u_xlat18.z;
        let x_1320 : f32 = u_xlat45.x;
        let x_1322 : f32 = u_xlat65;
        u_xlat65 = ((x_1318 * x_1320) + x_1322);
        let x_1325 : vec4<f32> = u_xlat15;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.z, x_1325.w);
        let x_1328 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec20;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat45.x = x_1337;
        let x_1340 : f32 = u_xlat18.w;
        let x_1342 : f32 = u_xlat45.x;
        let x_1344 : f32 = u_xlat65;
        u_xlat65 = ((x_1340 * x_1342) + x_1344);
        let x_1347 : vec4<f32> = u_xlat16;
        let x_1348 : vec2<f32> = vec2<f32>(x_1347.x, x_1347.y);
        let x_1350 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1348.x, x_1348.y, x_1350);
        let x_1357 : vec3<f32> = txVec21;
        let x_1359 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1357.xy, x_1357.z);
        u_xlat45.x = x_1359;
        let x_1362 : f32 = u_xlat19.x;
        let x_1364 : f32 = u_xlat45.x;
        let x_1366 : f32 = u_xlat65;
        u_xlat65 = ((x_1362 * x_1364) + x_1366);
        let x_1369 : vec4<f32> = u_xlat16;
        let x_1370 : vec2<f32> = vec2<f32>(x_1369.z, x_1369.w);
        let x_1372 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1370.x, x_1370.y, x_1372);
        let x_1379 : vec3<f32> = txVec22;
        let x_1381 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1379.xy, x_1379.z);
        u_xlat45.x = x_1381;
        let x_1384 : f32 = u_xlat19.y;
        let x_1386 : f32 = u_xlat45.x;
        let x_1388 : f32 = u_xlat65;
        u_xlat65 = ((x_1384 * x_1386) + x_1388);
        let x_1391 : vec2<f32> = u_xlat29;
        let x_1393 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec23;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat45.x = x_1402;
        let x_1405 : f32 = u_xlat19.z;
        let x_1407 : f32 = u_xlat45.x;
        let x_1409 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1407) + x_1409);
        let x_1412 : vec2<f32> = u_xlat56;
        let x_1414 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1412.x, x_1412.y, x_1414);
        let x_1421 : vec3<f32> = txVec24;
        let x_1423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1421.xy, x_1421.z);
        u_xlat45.x = x_1423;
        let x_1426 : f32 = u_xlat19.w;
        let x_1428 : f32 = u_xlat45.x;
        let x_1430 : f32 = u_xlat65;
        u_xlat65 = ((x_1426 * x_1428) + x_1430);
        let x_1433 : vec4<f32> = u_xlat11;
        let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
        let x_1436 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
        let x_1443 : vec3<f32> = txVec25;
        let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
        u_xlat45.x = x_1445;
        let x_1448 : f32 = u_xlat7.x;
        let x_1450 : f32 = u_xlat45.x;
        let x_1452 : f32 = u_xlat65;
        u_xlat65 = ((x_1448 * x_1450) + x_1452);
        let x_1455 : vec4<f32> = u_xlat11;
        let x_1456 : vec2<f32> = vec2<f32>(x_1455.z, x_1455.w);
        let x_1458 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1456.x, x_1456.y, x_1458);
        let x_1465 : vec3<f32> = txVec26;
        let x_1467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1465.xy, x_1465.z);
        u_xlat45.x = x_1467;
        let x_1470 : f32 = u_xlat7.y;
        let x_1472 : f32 = u_xlat45.x;
        let x_1474 : f32 = u_xlat65;
        u_xlat65 = ((x_1470 * x_1472) + x_1474);
        let x_1477 : vec2<f32> = u_xlat51;
        let x_1479 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec27;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat45.x = x_1488;
        let x_1491 : f32 = u_xlat7.z;
        let x_1493 : f32 = u_xlat45.x;
        let x_1495 : f32 = u_xlat65;
        u_xlat65 = ((x_1491 * x_1493) + x_1495);
        let x_1498 : vec4<f32> = u_xlat3;
        let x_1499 : vec2<f32> = vec2<f32>(x_1498.x, x_1498.y);
        let x_1501 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1499.x, x_1499.y, x_1501);
        let x_1508 : vec3<f32> = txVec28;
        let x_1510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1508.xy, x_1508.z);
        u_xlat3.x = x_1510;
        let x_1513 : f32 = u_xlat7.w;
        let x_1515 : f32 = u_xlat3.x;
        let x_1517 : f32 = u_xlat65;
        u_xlat64 = ((x_1513 * x_1515) + x_1517);
      }
    }
  } else {
    let x_1521 : vec3<f32> = u_xlat2;
    let x_1522 : vec2<f32> = vec2<f32>(x_1521.x, x_1521.y);
    let x_1524 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1522.x, x_1522.y, x_1524);
    let x_1531 : vec3<f32> = txVec29;
    let x_1533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1531.xy, x_1531.z);
    u_xlat64 = x_1533;
  }
  let x_1535 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1535) + 1.0f);
  let x_1539 : f32 = u_xlat64;
  let x_1541 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1544 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1539 * x_1541) + x_1544);
  let x_1548 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1548);
  let x_1552 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1552 >= 1.0f);
  let x_1554 : bool = u_xlatb44;
  let x_1555 : bool = u_xlatb23;
  u_xlatb23 = (x_1554 | x_1555);
  let x_1557 : bool = u_xlatb23;
  let x_1558 : f32 = u_xlat64;
  u_xlat64 = select(x_1558, 1.0f, x_1557);
  let x_1560 : vec3<f32> = u_xlat1;
  let x_1562 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1560, -(vec3<f32>(x_1562.x, x_1562.y, x_1562.z)));
  let x_1568 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1568, 0.0f, 1.0f);
  let x_1572 : f32 = u_xlat64;
  let x_1576 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1572, x_1572, x_1572) * vec3<f32>(x_1576.x, x_1576.y, x_1576.z));
  let x_1579 : vec3<f32> = u_xlat22;
  let x_1580 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1579 * vec3<f32>(x_1580.x, x_1580.x, x_1580.x));
  let x_1583 : vec3<f32> = u_xlat1;
  let x_1584 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1583 * vec3<f32>(x_1584.x, x_1584.y, x_1584.z));
  let x_1588 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1588 >= 0.400000006f);
  let x_1591 : bool = u_xlatb64;
  if (x_1591) {
    let x_1596 : f32 = u_xlat4.w;
    x_1592 = x_1596;
  } else {
    x_1592 = 0.0f;
  }
  let x_1598 : f32 = x_1592;
  u_xlat64 = x_1598;
  let x_1601 : f32 = u_xlat4.w;
  u_xlat23.x = (x_1601 + -0.400000006f);
  let x_1607 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1607);
  let x_1610 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1610);
  let x_1612 : f32 = u_xlat65;
  let x_1614 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1612) + abs(x_1614));
  let x_1617 : f32 = u_xlat44;
  u_xlat44 = max(x_1617, 0.0001f);
  let x_1621 : f32 = u_xlat23.x;
  let x_1622 : f32 = u_xlat44;
  u_xlat23.x = (x_1621 / x_1622);
  let x_1626 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1626 + 0.5f);
  let x_1630 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1630, 0.0f, 1.0f);
  let x_1634 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1634 == 0.0f));
  let x_1636 : bool = u_xlatb44;
  if (x_1636) {
    let x_1641 : f32 = u_xlat23.x;
    x_1637 = x_1641;
  } else {
    let x_1643 : f32 = u_xlat64;
    x_1637 = x_1643;
  }
  let x_1644 : f32 = x_1637;
  u_xlat64 = x_1644;
  let x_1645 : f32 = u_xlat64;
  u_xlat23.x = (x_1645 + -0.0001f);
  let x_1650 : f32 = u_xlat23.x;
  u_xlatb23 = (x_1650 < 0.0f);
  let x_1652 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1652) * -1i) != 0i)) {
    discard;
  }
  let x_1660 : vec3<f32> = u_xlat21;
  let x_1661 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1660 * vec3<f32>(x_1661.y, x_1661.y, x_1661.y));
  let x_1664 : vec3<f32> = u_xlat27;
  let x_1666 : vec4<f32> = vs_INTERP2;
  let x_1669 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1664.x, x_1664.x, x_1664.x) * vec3<f32>(x_1666.x, x_1666.y, x_1666.z)) + x_1669);
  let x_1671 : vec3<f32> = u_xlat27;
  let x_1673 : vec3<f32> = vs_INTERP1;
  let x_1675 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1671.z, x_1671.z, x_1671.z) * x_1673) + x_1675);
  let x_1677 : vec3<f32> = u_xlat21;
  let x_1678 : vec3<f32> = u_xlat21;
  u_xlat23.x = dot(x_1677, x_1678);
  let x_1682 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1682);
  let x_1685 : vec3<f32> = u_xlat21;
  let x_1686 : vec3<f32> = u_xlat23;
  u_xlat21 = (x_1685 * vec3<f32>(x_1686.x, x_1686.x, x_1686.x));
  let x_1690 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb23 = (x_1690 == 0.0f);
  let x_1692 : vec3<f32> = vs_INTERP0;
  let x_1696 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1697 : vec3<f32> = (-(x_1692) + x_1696);
  let x_1698 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1697.x, x_1697.y, x_1697.z, x_1698.w);
  let x_1700 : vec4<f32> = u_xlat3;
  let x_1702 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_1700.x, x_1700.y, x_1700.z), vec3<f32>(x_1702.x, x_1702.y, x_1702.z));
  let x_1705 : f32 = u_xlat65;
  u_xlat65 = inverseSqrt(x_1705);
  let x_1707 : f32 = u_xlat65;
  let x_1709 : vec4<f32> = u_xlat3;
  let x_1711 : vec3<f32> = (vec3<f32>(x_1707, x_1707, x_1707) * vec3<f32>(x_1709.x, x_1709.y, x_1709.z));
  let x_1712 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1711.x, x_1711.y, x_1711.z, x_1712.w);
  let x_1714 : bool = u_xlatb23;
  if (x_1714) {
    let x_1719 : f32 = u_xlat3.x;
    x_1715 = x_1719;
  } else {
    let x_1723 : f32 = x_137.unity_MatrixV[0i].z;
    x_1715 = x_1723;
  }
  let x_1724 : f32 = x_1715;
  u_xlat4.x = x_1724;
  let x_1726 : bool = u_xlatb23;
  if (x_1726) {
    let x_1731 : f32 = u_xlat3.y;
    x_1727 = x_1731;
  } else {
    let x_1734 : f32 = x_137.unity_MatrixV[1i].z;
    x_1727 = x_1734;
  }
  let x_1735 : f32 = x_1727;
  u_xlat4.y = x_1735;
  let x_1737 : bool = u_xlatb23;
  if (x_1737) {
    let x_1742 : f32 = u_xlat3.z;
    x_1738 = x_1742;
  } else {
    let x_1745 : f32 = x_137.unity_MatrixV[2i].z;
    x_1738 = x_1745;
  }
  let x_1746 : f32 = x_1738;
  u_xlat4.z = x_1746;
  let x_1755 : vec2<f32> = vs_INTERP5;
  let x_1757 : f32 = x_137.x_GlobalMipBias.x;
  let x_1758 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1755, x_1757);
  u_xlat3 = x_1758;
  let x_1763 : vec2<f32> = vs_INTERP5;
  let x_1765 : f32 = x_137.x_GlobalMipBias.x;
  let x_1766 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1763, x_1765);
  u_xlat27 = vec3<f32>(x_1766.x, x_1766.y, x_1766.z);
  let x_1768 : vec4<f32> = u_xlat3;
  let x_1771 : vec3<f32> = (vec3<f32>(x_1768.x, x_1768.y, x_1768.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1772 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1771.x, x_1771.y, x_1771.z, x_1772.w);
  let x_1774 : vec3<f32> = u_xlat21;
  let x_1775 : vec4<f32> = u_xlat3;
  u_xlat23.x = dot(x_1774, vec3<f32>(x_1775.x, x_1775.y, x_1775.z));
  let x_1780 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1780 + 0.5f);
  let x_1783 : vec3<f32> = u_xlat23;
  let x_1785 : vec3<f32> = u_xlat27;
  let x_1786 : vec3<f32> = (vec3<f32>(x_1783.x, x_1783.x, x_1783.x) * x_1785);
  let x_1787 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1786.x, x_1786.y, x_1786.z, x_1787.w);
  let x_1790 : f32 = u_xlat3.w;
  u_xlat23.x = max(x_1790, 0.0001f);
  let x_1793 : vec4<f32> = u_xlat3;
  let x_1795 : vec3<f32> = u_xlat23;
  let x_1797 : vec3<f32> = (vec3<f32>(x_1793.x, x_1793.y, x_1793.z) / vec3<f32>(x_1795.x, x_1795.x, x_1795.x));
  let x_1798 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1797.x, x_1797.y, x_1797.z, x_1798.w);
  let x_1801 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1802 : vec2<f32> = vec2<f32>(x_1801.x, x_1801.y);
  let x_1806 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1802.x, x_1802.y));
  let x_1807 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1806.x, x_1807.y, x_1806.y);
  let x_1809 : vec3<f32> = u_xlat23;
  let x_1811 : vec4<f32> = hlslcc_FragCoord;
  let x_1813 : vec2<f32> = (vec2<f32>(x_1809.x, x_1809.z) * vec2<f32>(x_1811.x, x_1811.y));
  let x_1814 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1813.x, x_1813.y, x_1814.z, x_1814.w);
  let x_1817 : f32 = u_xlat7.y;
  let x_1819 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1822 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1817 * x_1819) + x_1822);
  let x_1826 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1826) + 1.0f);
  let x_1831 : f32 = u_xlat6.x;
  u_xlat6.x = x_1831;
  let x_1834 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1834, 0.0f, 1.0f);
  let x_1837 : f32 = u_xlat64;
  u_xlat64 = min(x_1837, 1.0f);
  let x_1839 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1839 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1844 : f32 = u_xlat6.x;
  u_xlat23.x = (-(x_1844) + 1.0f);
  let x_1849 : f32 = u_xlat23.x;
  let x_1851 : f32 = u_xlat23.x;
  u_xlat65 = (x_1849 * x_1851);
  let x_1853 : f32 = u_xlat65;
  u_xlat65 = max(x_1853, 0.0078125f);
  let x_1857 : f32 = u_xlat65;
  let x_1858 : f32 = u_xlat65;
  u_xlat66 = (x_1857 * x_1858);
  let x_1862 : f32 = u_xlat6.x;
  u_xlat67 = (x_1862 + 0.040000021f);
  let x_1865 : f32 = u_xlat67;
  u_xlat67 = min(x_1865, 1.0f);
  let x_1867 : f32 = u_xlat65;
  u_xlat68 = ((x_1867 * 4.0f) + 2.0f);
  let x_1876 : vec4<f32> = u_xlat7;
  let x_1879 : f32 = x_137.x_GlobalMipBias.x;
  let x_1880 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1876.x, x_1876.z), x_1879);
  u_xlat6.x = x_1880.x;
  let x_1884 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1884 + -1.0f);
  let x_1889 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1891 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1889 * x_1891) + 1.0f);
  let x_1896 : f32 = u_xlat6.x;
  let x_1898 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1896, x_1898);
  let x_1901 : bool = u_xlatb0;
  if (x_1901) {
    let x_1905 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1905 == 1.0f);
    let x_1907 : bool = u_xlatb0;
    if (x_1907) {
      let x_1911 : vec4<f32> = vs_INTERP9;
      let x_1914 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1911.x, x_1911.y, x_1911.x, x_1911.y) + x_1914);
      let x_1917 : vec4<f32> = u_xlat7;
      let x_1918 : vec2<f32> = vec2<f32>(x_1917.x, x_1917.y);
      let x_1920 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1918.x, x_1918.y, x_1920);
      let x_1927 : vec3<f32> = txVec30;
      let x_1929 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1927.xy, x_1927.z);
      u_xlat8.x = x_1929;
      let x_1932 : vec4<f32> = u_xlat7;
      let x_1933 : vec2<f32> = vec2<f32>(x_1932.z, x_1932.w);
      let x_1935 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1933.x, x_1933.y, x_1935);
      let x_1942 : vec3<f32> = txVec31;
      let x_1944 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1942.xy, x_1942.z);
      u_xlat8.y = x_1944;
      let x_1946 : vec4<f32> = vs_INTERP9;
      let x_1949 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1946.x, x_1946.y, x_1946.x, x_1946.y) + x_1949);
      let x_1952 : vec4<f32> = u_xlat7;
      let x_1953 : vec2<f32> = vec2<f32>(x_1952.x, x_1952.y);
      let x_1955 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1953.x, x_1953.y, x_1955);
      let x_1962 : vec3<f32> = txVec32;
      let x_1964 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1962.xy, x_1962.z);
      u_xlat8.z = x_1964;
      let x_1967 : vec4<f32> = u_xlat7;
      let x_1968 : vec2<f32> = vec2<f32>(x_1967.z, x_1967.w);
      let x_1970 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1968.x, x_1968.y, x_1970);
      let x_1977 : vec3<f32> = txVec33;
      let x_1979 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1977.xy, x_1977.z);
      u_xlat8.w = x_1979;
      let x_1981 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_1981, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1987 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb48 = (x_1987 == 2.0f);
      let x_1989 : bool = u_xlatb48;
      if (x_1989) {
        let x_1993 : vec4<f32> = vs_INTERP9;
        let x_1996 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1993.x, x_1993.y) * vec2<f32>(x_1996.z, x_1996.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2000 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2000);
        let x_2002 : vec4<f32> = vs_INTERP9;
        let x_2005 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2008 : vec2<f32> = u_xlat48;
        let x_2010 : vec2<f32> = ((vec2<f32>(x_2002.x, x_2002.y) * vec2<f32>(x_2005.z, x_2005.w)) + -(x_2008));
        let x_2011 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2010.x, x_2010.y, x_2011.z, x_2011.w);
        let x_2013 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2013.x, x_2013.x, x_2013.y, x_2013.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2016 : vec4<f32> = u_xlat8;
        let x_2018 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2016.x, x_2016.x, x_2016.z, x_2016.z) * vec4<f32>(x_2018.x, x_2018.x, x_2018.z, x_2018.z));
        let x_2022 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2022.y, x_2022.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2025 : vec4<f32> = u_xlat9;
        let x_2028 : vec4<f32> = u_xlat7;
        let x_2031 : vec2<f32> = ((vec2<f32>(x_2025.x, x_2025.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2028.x, x_2028.y)));
        let x_2032 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2031.x, x_2032.y, x_2031.y, x_2032.w);
        let x_2034 : vec4<f32> = u_xlat7;
        let x_2037 : vec2<f32> = (-(vec2<f32>(x_2034.x, x_2034.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2038 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2037.x, x_2037.y, x_2038.z, x_2038.w);
        let x_2040 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2040.x, x_2040.y), vec2<f32>(0.0f, 0.0f));
        let x_2043 : vec2<f32> = u_xlat51;
        let x_2045 : vec2<f32> = u_xlat51;
        let x_2047 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2043) * x_2045) + vec2<f32>(x_2047.x, x_2047.y));
        let x_2050 : vec4<f32> = u_xlat7;
        let x_2052 : vec2<f32> = max(vec2<f32>(x_2050.x, x_2050.y), vec2<f32>(0.0f, 0.0f));
        let x_2053 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2052.x, x_2052.y, x_2053.z, x_2053.w);
        let x_2055 : vec4<f32> = u_xlat7;
        let x_2058 : vec4<f32> = u_xlat7;
        let x_2061 : vec4<f32> = u_xlat8;
        let x_2063 : vec2<f32> = ((-(vec2<f32>(x_2055.x, x_2055.y)) * vec2<f32>(x_2058.x, x_2058.y)) + vec2<f32>(x_2061.y, x_2061.w));
        let x_2064 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2063.x, x_2063.y, x_2064.z, x_2064.w);
        let x_2066 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2066 + vec2<f32>(1.0f, 1.0f));
        let x_2068 : vec4<f32> = u_xlat7;
        let x_2070 : vec2<f32> = (vec2<f32>(x_2068.x, x_2068.y) + vec2<f32>(1.0f, 1.0f));
        let x_2071 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2070.x, x_2070.y, x_2071.z, x_2071.w);
        let x_2073 : vec4<f32> = u_xlat8;
        let x_2075 : vec2<f32> = (vec2<f32>(x_2073.x, x_2073.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2076 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2075.x, x_2075.y, x_2076.z, x_2076.w);
        let x_2078 : vec4<f32> = u_xlat9;
        let x_2080 : vec2<f32> = (vec2<f32>(x_2078.x, x_2078.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2081 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2080.x, x_2080.y, x_2081.z, x_2081.w);
        let x_2083 : vec2<f32> = u_xlat51;
        let x_2084 : vec2<f32> = (x_2083 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2085 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2084.x, x_2084.y, x_2085.z, x_2085.w);
        let x_2087 : vec4<f32> = u_xlat7;
        let x_2089 : vec2<f32> = (vec2<f32>(x_2087.x, x_2087.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2090 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2089.x, x_2089.y, x_2090.z, x_2090.w);
        let x_2092 : vec4<f32> = u_xlat8;
        let x_2094 : vec2<f32> = (vec2<f32>(x_2092.y, x_2092.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2095 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2094.x, x_2094.y, x_2095.z, x_2095.w);
        let x_2098 : f32 = u_xlat9.x;
        u_xlat10.z = x_2098;
        let x_2101 : f32 = u_xlat7.x;
        u_xlat10.w = x_2101;
        let x_2104 : f32 = u_xlat12.x;
        u_xlat11.z = x_2104;
        let x_2107 : f32 = u_xlat49.x;
        u_xlat11.w = x_2107;
        let x_2109 : vec4<f32> = u_xlat10;
        let x_2111 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2109.z, x_2109.w, x_2109.x, x_2109.z) + vec4<f32>(x_2111.z, x_2111.w, x_2111.x, x_2111.z));
        let x_2115 : f32 = u_xlat10.y;
        u_xlat9.z = x_2115;
        let x_2118 : f32 = u_xlat7.y;
        u_xlat9.w = x_2118;
        let x_2121 : f32 = u_xlat11.y;
        u_xlat12.z = x_2121;
        let x_2124 : f32 = u_xlat49.y;
        u_xlat12.w = x_2124;
        let x_2126 : vec4<f32> = u_xlat9;
        let x_2128 : vec4<f32> = u_xlat12;
        let x_2130 : vec3<f32> = (vec3<f32>(x_2126.z, x_2126.y, x_2126.w) + vec3<f32>(x_2128.z, x_2128.y, x_2128.w));
        let x_2131 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2130.x, x_2130.y, x_2130.z, x_2131.w);
        let x_2133 : vec4<f32> = u_xlat11;
        let x_2135 : vec4<f32> = u_xlat8;
        let x_2137 : vec3<f32> = (vec3<f32>(x_2133.x, x_2133.z, x_2133.w) / vec3<f32>(x_2135.z, x_2135.w, x_2135.y));
        let x_2138 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2137.x, x_2137.y, x_2137.z, x_2138.w);
        let x_2140 : vec4<f32> = u_xlat9;
        let x_2142 : vec3<f32> = (vec3<f32>(x_2140.x, x_2140.y, x_2140.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2143 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2142.x, x_2142.y, x_2142.z, x_2143.w);
        let x_2145 : vec4<f32> = u_xlat12;
        let x_2147 : vec4<f32> = u_xlat7;
        let x_2149 : vec3<f32> = (vec3<f32>(x_2145.z, x_2145.y, x_2145.w) / vec3<f32>(x_2147.x, x_2147.y, x_2147.z));
        let x_2150 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2149.x, x_2149.y, x_2149.z, x_2150.w);
        let x_2152 : vec4<f32> = u_xlat10;
        let x_2154 : vec3<f32> = (vec3<f32>(x_2152.x, x_2152.y, x_2152.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2155 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2154.x, x_2154.y, x_2154.z, x_2155.w);
        let x_2157 : vec4<f32> = u_xlat9;
        let x_2160 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2162 : vec3<f32> = (vec3<f32>(x_2157.y, x_2157.x, x_2157.z) * vec3<f32>(x_2160.x, x_2160.x, x_2160.x));
        let x_2163 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2162.x, x_2162.y, x_2162.z, x_2163.w);
        let x_2165 : vec4<f32> = u_xlat10;
        let x_2168 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2170 : vec3<f32> = (vec3<f32>(x_2165.x, x_2165.y, x_2165.z) * vec3<f32>(x_2168.y, x_2168.y, x_2168.y));
        let x_2171 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2170.x, x_2170.y, x_2170.z, x_2171.w);
        let x_2174 : f32 = u_xlat10.x;
        u_xlat9.w = x_2174;
        let x_2176 : vec2<f32> = u_xlat48;
        let x_2179 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2182 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2176.x, x_2176.y, x_2176.x, x_2176.y) * vec4<f32>(x_2179.x, x_2179.y, x_2179.x, x_2179.y)) + vec4<f32>(x_2182.y, x_2182.w, x_2182.x, x_2182.w));
        let x_2185 : vec2<f32> = u_xlat48;
        let x_2187 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2190 : vec4<f32> = u_xlat9;
        let x_2192 : vec2<f32> = ((x_2185 * vec2<f32>(x_2187.x, x_2187.y)) + vec2<f32>(x_2190.z, x_2190.w));
        let x_2193 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2192.x, x_2192.y, x_2193.z, x_2193.w);
        let x_2196 : f32 = u_xlat9.y;
        u_xlat10.w = x_2196;
        let x_2198 : vec4<f32> = u_xlat10;
        let x_2199 : vec2<f32> = vec2<f32>(x_2198.y, x_2198.z);
        let x_2200 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2200.x, x_2199.x, x_2200.z, x_2199.y);
        let x_2202 : vec2<f32> = u_xlat48;
        let x_2205 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2208 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2202.x, x_2202.y, x_2202.x, x_2202.y) * vec4<f32>(x_2205.x, x_2205.y, x_2205.x, x_2205.y)) + vec4<f32>(x_2208.x, x_2208.y, x_2208.z, x_2208.y));
        let x_2211 : vec2<f32> = u_xlat48;
        let x_2214 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2217 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2211.x, x_2211.y, x_2211.x, x_2211.y) * vec4<f32>(x_2214.x, x_2214.y, x_2214.x, x_2214.y)) + vec4<f32>(x_2217.w, x_2217.y, x_2217.w, x_2217.z));
        let x_2220 : vec2<f32> = u_xlat48;
        let x_2223 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2226 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2220.x, x_2220.y, x_2220.x, x_2220.y) * vec4<f32>(x_2223.x, x_2223.y, x_2223.x, x_2223.y)) + vec4<f32>(x_2226.x, x_2226.w, x_2226.z, x_2226.w));
        let x_2229 : vec4<f32> = u_xlat7;
        let x_2231 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2229.x, x_2229.x, x_2229.x, x_2229.y) * vec4<f32>(x_2231.z, x_2231.w, x_2231.y, x_2231.z));
        let x_2234 : vec4<f32> = u_xlat7;
        let x_2236 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2234.y, x_2234.y, x_2234.z, x_2234.z) * x_2236);
        let x_2239 : f32 = u_xlat7.z;
        let x_2241 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2239 * x_2241);
        let x_2245 : vec4<f32> = u_xlat11;
        let x_2246 : vec2<f32> = vec2<f32>(x_2245.x, x_2245.y);
        let x_2248 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2246.x, x_2246.y, x_2248);
        let x_2256 : vec3<f32> = txVec34;
        let x_2258 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2256.xy, x_2256.z);
        u_xlat69 = x_2258;
        let x_2260 : vec4<f32> = u_xlat11;
        let x_2261 : vec2<f32> = vec2<f32>(x_2260.z, x_2260.w);
        let x_2263 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2261.x, x_2261.y, x_2263);
        let x_2270 : vec3<f32> = txVec35;
        let x_2272 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2270.xy, x_2270.z);
        u_xlat7.x = x_2272;
        let x_2275 : f32 = u_xlat7.x;
        let x_2277 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2275 * x_2277);
        let x_2281 : f32 = u_xlat14.x;
        let x_2282 : f32 = u_xlat69;
        let x_2285 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2281 * x_2282) + x_2285);
        let x_2288 : vec4<f32> = u_xlat12;
        let x_2289 : vec2<f32> = vec2<f32>(x_2288.x, x_2288.y);
        let x_2291 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2289.x, x_2289.y, x_2291);
        let x_2298 : vec3<f32> = txVec36;
        let x_2300 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2298.xy, x_2298.z);
        u_xlat7.x = x_2300;
        let x_2303 : f32 = u_xlat14.z;
        let x_2305 : f32 = u_xlat7.x;
        let x_2307 : f32 = u_xlat69;
        u_xlat69 = ((x_2303 * x_2305) + x_2307);
        let x_2310 : vec4<f32> = u_xlat10;
        let x_2311 : vec2<f32> = vec2<f32>(x_2310.x, x_2310.y);
        let x_2313 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2311.x, x_2311.y, x_2313);
        let x_2320 : vec3<f32> = txVec37;
        let x_2322 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2320.xy, x_2320.z);
        u_xlat7.x = x_2322;
        let x_2325 : f32 = u_xlat14.w;
        let x_2327 : f32 = u_xlat7.x;
        let x_2329 : f32 = u_xlat69;
        u_xlat69 = ((x_2325 * x_2327) + x_2329);
        let x_2332 : vec4<f32> = u_xlat13;
        let x_2333 : vec2<f32> = vec2<f32>(x_2332.x, x_2332.y);
        let x_2335 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2333.x, x_2333.y, x_2335);
        let x_2342 : vec3<f32> = txVec38;
        let x_2344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2342.xy, x_2342.z);
        u_xlat7.x = x_2344;
        let x_2347 : f32 = u_xlat15.x;
        let x_2349 : f32 = u_xlat7.x;
        let x_2351 : f32 = u_xlat69;
        u_xlat69 = ((x_2347 * x_2349) + x_2351);
        let x_2354 : vec4<f32> = u_xlat13;
        let x_2355 : vec2<f32> = vec2<f32>(x_2354.z, x_2354.w);
        let x_2357 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2355.x, x_2355.y, x_2357);
        let x_2364 : vec3<f32> = txVec39;
        let x_2366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2364.xy, x_2364.z);
        u_xlat7.x = x_2366;
        let x_2369 : f32 = u_xlat15.y;
        let x_2371 : f32 = u_xlat7.x;
        let x_2373 : f32 = u_xlat69;
        u_xlat69 = ((x_2369 * x_2371) + x_2373);
        let x_2376 : vec4<f32> = u_xlat10;
        let x_2377 : vec2<f32> = vec2<f32>(x_2376.z, x_2376.w);
        let x_2379 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2377.x, x_2377.y, x_2379);
        let x_2386 : vec3<f32> = txVec40;
        let x_2388 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2386.xy, x_2386.z);
        u_xlat7.x = x_2388;
        let x_2391 : f32 = u_xlat15.z;
        let x_2393 : f32 = u_xlat7.x;
        let x_2395 : f32 = u_xlat69;
        u_xlat69 = ((x_2391 * x_2393) + x_2395);
        let x_2398 : vec4<f32> = u_xlat9;
        let x_2399 : vec2<f32> = vec2<f32>(x_2398.x, x_2398.y);
        let x_2401 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2399.x, x_2399.y, x_2401);
        let x_2408 : vec3<f32> = txVec41;
        let x_2410 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2408.xy, x_2408.z);
        u_xlat7.x = x_2410;
        let x_2413 : f32 = u_xlat15.w;
        let x_2415 : f32 = u_xlat7.x;
        let x_2417 : f32 = u_xlat69;
        u_xlat69 = ((x_2413 * x_2415) + x_2417);
        let x_2420 : vec4<f32> = u_xlat9;
        let x_2421 : vec2<f32> = vec2<f32>(x_2420.z, x_2420.w);
        let x_2423 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2421.x, x_2421.y, x_2423);
        let x_2430 : vec3<f32> = txVec42;
        let x_2432 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2430.xy, x_2430.z);
        u_xlat7.x = x_2432;
        let x_2435 : f32 = u_xlat48.x;
        let x_2437 : f32 = u_xlat7.x;
        let x_2439 : f32 = u_xlat69;
        u_xlat0.x = ((x_2435 * x_2437) + x_2439);
      } else {
        let x_2443 : vec4<f32> = vs_INTERP9;
        let x_2446 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2443.x, x_2443.y) * vec2<f32>(x_2446.z, x_2446.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2450 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2450);
        let x_2452 : vec4<f32> = vs_INTERP9;
        let x_2455 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2458 : vec2<f32> = u_xlat48;
        let x_2460 : vec2<f32> = ((vec2<f32>(x_2452.x, x_2452.y) * vec2<f32>(x_2455.z, x_2455.w)) + -(x_2458));
        let x_2461 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2460.x, x_2460.y, x_2461.z, x_2461.w);
        let x_2463 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2463.x, x_2463.x, x_2463.y, x_2463.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2466 : vec4<f32> = u_xlat8;
        let x_2468 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2466.x, x_2466.x, x_2466.z, x_2466.z) * vec4<f32>(x_2468.x, x_2468.x, x_2468.z, x_2468.z));
        let x_2471 : vec4<f32> = u_xlat9;
        let x_2473 : vec2<f32> = (vec2<f32>(x_2471.y, x_2471.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2474 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2474.x, x_2473.x, x_2474.z, x_2473.y);
        let x_2476 : vec4<f32> = u_xlat9;
        let x_2479 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2476.x, x_2476.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2479.x, x_2479.y)));
        let x_2483 : vec4<f32> = u_xlat7;
        let x_2486 : vec2<f32> = (-(vec2<f32>(x_2483.x, x_2483.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2487 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2486.x, x_2487.y, x_2486.y, x_2487.w);
        let x_2489 : vec4<f32> = u_xlat7;
        let x_2491 : vec2<f32> = min(vec2<f32>(x_2489.x, x_2489.y), vec2<f32>(0.0f, 0.0f));
        let x_2492 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2491.x, x_2491.y, x_2492.z, x_2492.w);
        let x_2494 : vec4<f32> = u_xlat9;
        let x_2497 : vec4<f32> = u_xlat9;
        let x_2500 : vec4<f32> = u_xlat8;
        let x_2502 : vec2<f32> = ((-(vec2<f32>(x_2494.x, x_2494.y)) * vec2<f32>(x_2497.x, x_2497.y)) + vec2<f32>(x_2500.x, x_2500.z));
        let x_2503 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2502.x, x_2503.y, x_2502.y, x_2503.w);
        let x_2505 : vec4<f32> = u_xlat7;
        let x_2507 : vec2<f32> = max(vec2<f32>(x_2505.x, x_2505.y), vec2<f32>(0.0f, 0.0f));
        let x_2508 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2507.x, x_2507.y, x_2508.z, x_2508.w);
        let x_2510 : vec4<f32> = u_xlat9;
        let x_2513 : vec4<f32> = u_xlat9;
        let x_2516 : vec4<f32> = u_xlat8;
        let x_2518 : vec2<f32> = ((-(vec2<f32>(x_2510.x, x_2510.y)) * vec2<f32>(x_2513.x, x_2513.y)) + vec2<f32>(x_2516.y, x_2516.w));
        let x_2519 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2519.x, x_2518.x, x_2519.z, x_2518.y);
        let x_2521 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2521 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2524 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2524 * 0.081632003f);
        let x_2527 : vec2<f32> = u_xlat49;
        let x_2529 : vec2<f32> = (vec2<f32>(x_2527.y, x_2527.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2530 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2529.x, x_2529.y, x_2530.z, x_2530.w);
        let x_2532 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2532.x, x_2532.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2536 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2536 * 0.081632003f);
        let x_2540 : f32 = u_xlat11.y;
        u_xlat9.x = x_2540;
        let x_2542 : vec4<f32> = u_xlat7;
        let x_2545 : vec2<f32> = ((vec2<f32>(x_2542.x, x_2542.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2546 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2546.x, x_2545.x, x_2546.z, x_2545.y);
        let x_2548 : vec4<f32> = u_xlat7;
        let x_2551 : vec2<f32> = ((vec2<f32>(x_2548.x, x_2548.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2552 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2551.x, x_2552.y, x_2551.y, x_2552.w);
        let x_2555 : f32 = u_xlat49.x;
        u_xlat8.y = x_2555;
        let x_2558 : f32 = u_xlat10.y;
        u_xlat8.w = x_2558;
        let x_2560 : vec4<f32> = u_xlat8;
        let x_2561 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2560 + x_2561);
        let x_2563 : vec4<f32> = u_xlat7;
        let x_2566 : vec2<f32> = ((vec2<f32>(x_2563.y, x_2563.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2567 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2567.x, x_2566.x, x_2567.z, x_2566.y);
        let x_2569 : vec4<f32> = u_xlat7;
        let x_2572 : vec2<f32> = ((vec2<f32>(x_2569.y, x_2569.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2573 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2572.x, x_2573.y, x_2572.y, x_2573.w);
        let x_2576 : f32 = u_xlat49.y;
        u_xlat10.y = x_2576;
        let x_2578 : vec4<f32> = u_xlat10;
        let x_2579 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2578 + x_2579);
        let x_2581 : vec4<f32> = u_xlat8;
        let x_2582 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2581 / x_2582);
        let x_2584 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2584 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2586 : vec4<f32> = u_xlat10;
        let x_2587 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2586 / x_2587);
        let x_2589 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2589 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2591 : vec4<f32> = u_xlat8;
        let x_2594 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2591.w, x_2591.x, x_2591.y, x_2591.z) * vec4<f32>(x_2594.x, x_2594.x, x_2594.x, x_2594.x));
        let x_2597 : vec4<f32> = u_xlat10;
        let x_2600 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2597.x, x_2597.w, x_2597.y, x_2597.z) * vec4<f32>(x_2600.y, x_2600.y, x_2600.y, x_2600.y));
        let x_2603 : vec4<f32> = u_xlat8;
        let x_2604 : vec3<f32> = vec3<f32>(x_2603.y, x_2603.z, x_2603.w);
        let x_2605 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2604.x, x_2605.y, x_2604.y, x_2604.z);
        let x_2608 : f32 = u_xlat10.x;
        u_xlat11.y = x_2608;
        let x_2610 : vec2<f32> = u_xlat48;
        let x_2613 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2616 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2610.x, x_2610.y, x_2610.x, x_2610.y) * vec4<f32>(x_2613.x, x_2613.y, x_2613.x, x_2613.y)) + vec4<f32>(x_2616.x, x_2616.y, x_2616.z, x_2616.y));
        let x_2619 : vec2<f32> = u_xlat48;
        let x_2621 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2624 : vec4<f32> = u_xlat11;
        let x_2626 : vec2<f32> = ((x_2619 * vec2<f32>(x_2621.x, x_2621.y)) + vec2<f32>(x_2624.w, x_2624.y));
        let x_2627 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2626.x, x_2626.y, x_2627.z, x_2627.w);
        let x_2630 : f32 = u_xlat11.y;
        u_xlat8.y = x_2630;
        let x_2633 : f32 = u_xlat10.z;
        u_xlat11.y = x_2633;
        let x_2635 : vec2<f32> = u_xlat48;
        let x_2638 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2641 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2635.x, x_2635.y, x_2635.x, x_2635.y) * vec4<f32>(x_2638.x, x_2638.y, x_2638.x, x_2638.y)) + vec4<f32>(x_2641.x, x_2641.y, x_2641.z, x_2641.y));
        let x_2645 : vec2<f32> = u_xlat48;
        let x_2647 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2650 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2645 * vec2<f32>(x_2647.x, x_2647.y)) + vec2<f32>(x_2650.w, x_2650.y));
        let x_2654 : f32 = u_xlat11.y;
        u_xlat8.z = x_2654;
        let x_2656 : vec2<f32> = u_xlat48;
        let x_2659 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2662 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2656.x, x_2656.y, x_2656.x, x_2656.y) * vec4<f32>(x_2659.x, x_2659.y, x_2659.x, x_2659.y)) + vec4<f32>(x_2662.x, x_2662.y, x_2662.x, x_2662.z));
        let x_2666 : f32 = u_xlat10.w;
        u_xlat11.y = x_2666;
        let x_2668 : vec2<f32> = u_xlat48;
        let x_2671 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2674 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2668.x, x_2668.y, x_2668.x, x_2668.y) * vec4<f32>(x_2671.x, x_2671.y, x_2671.x, x_2671.y)) + vec4<f32>(x_2674.x, x_2674.y, x_2674.z, x_2674.y));
        let x_2677 : vec2<f32> = u_xlat48;
        let x_2679 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2682 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2677 * vec2<f32>(x_2679.x, x_2679.y)) + vec2<f32>(x_2682.w, x_2682.y));
        let x_2686 : f32 = u_xlat11.y;
        u_xlat8.w = x_2686;
        let x_2688 : vec2<f32> = u_xlat48;
        let x_2690 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2693 : vec4<f32> = u_xlat8;
        let x_2695 : vec2<f32> = ((x_2688 * vec2<f32>(x_2690.x, x_2690.y)) + vec2<f32>(x_2693.x, x_2693.w));
        let x_2696 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2695.x, x_2695.y, x_2696.z, x_2696.w);
        let x_2698 : vec4<f32> = u_xlat11;
        let x_2699 : vec3<f32> = vec3<f32>(x_2698.x, x_2698.z, x_2698.w);
        let x_2700 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2699.x, x_2700.y, x_2699.y, x_2699.z);
        let x_2702 : vec2<f32> = u_xlat48;
        let x_2705 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2708 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2702.x, x_2702.y, x_2702.x, x_2702.y) * vec4<f32>(x_2705.x, x_2705.y, x_2705.x, x_2705.y)) + vec4<f32>(x_2708.x, x_2708.y, x_2708.z, x_2708.y));
        let x_2712 : vec2<f32> = u_xlat48;
        let x_2714 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2717 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2712 * vec2<f32>(x_2714.x, x_2714.y)) + vec2<f32>(x_2717.w, x_2717.y));
        let x_2721 : f32 = u_xlat8.x;
        u_xlat10.x = x_2721;
        let x_2723 : vec2<f32> = u_xlat48;
        let x_2725 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2728 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2723 * vec2<f32>(x_2725.x, x_2725.y)) + vec2<f32>(x_2728.x, x_2728.y));
        let x_2731 : vec4<f32> = u_xlat7;
        let x_2733 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2731.x, x_2731.x, x_2731.x, x_2731.x) * x_2733);
        let x_2735 : vec4<f32> = u_xlat7;
        let x_2737 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2735.y, x_2735.y, x_2735.y, x_2735.y) * x_2737);
        let x_2740 : vec4<f32> = u_xlat7;
        let x_2742 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2740.z, x_2740.z, x_2740.z, x_2740.z) * x_2742);
        let x_2744 : vec4<f32> = u_xlat7;
        let x_2746 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2744.w, x_2744.w, x_2744.w, x_2744.w) * x_2746);
        let x_2749 : vec4<f32> = u_xlat12;
        let x_2750 : vec2<f32> = vec2<f32>(x_2749.x, x_2749.y);
        let x_2752 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2750.x, x_2750.y, x_2752);
        let x_2759 : vec3<f32> = txVec43;
        let x_2761 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2759.xy, x_2759.z);
        u_xlat8.x = x_2761;
        let x_2764 : vec4<f32> = u_xlat12;
        let x_2765 : vec2<f32> = vec2<f32>(x_2764.z, x_2764.w);
        let x_2767 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2765.x, x_2765.y, x_2767);
        let x_2775 : vec3<f32> = txVec44;
        let x_2777 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2775.xy, x_2775.z);
        u_xlat71 = x_2777;
        let x_2778 : f32 = u_xlat71;
        let x_2780 : f32 = u_xlat18.y;
        u_xlat71 = (x_2778 * x_2780);
        let x_2783 : f32 = u_xlat18.x;
        let x_2785 : f32 = u_xlat8.x;
        let x_2787 : f32 = u_xlat71;
        u_xlat8.x = ((x_2783 * x_2785) + x_2787);
        let x_2791 : vec4<f32> = u_xlat13;
        let x_2792 : vec2<f32> = vec2<f32>(x_2791.x, x_2791.y);
        let x_2794 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2792.x, x_2792.y, x_2794);
        let x_2801 : vec3<f32> = txVec45;
        let x_2803 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2801.xy, x_2801.z);
        u_xlat71 = x_2803;
        let x_2805 : f32 = u_xlat18.z;
        let x_2806 : f32 = u_xlat71;
        let x_2809 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2805 * x_2806) + x_2809);
        let x_2813 : vec4<f32> = u_xlat15;
        let x_2814 : vec2<f32> = vec2<f32>(x_2813.x, x_2813.y);
        let x_2816 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2814.x, x_2814.y, x_2816);
        let x_2823 : vec3<f32> = txVec46;
        let x_2825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2823.xy, x_2823.z);
        u_xlat71 = x_2825;
        let x_2827 : f32 = u_xlat18.w;
        let x_2828 : f32 = u_xlat71;
        let x_2831 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2827 * x_2828) + x_2831);
        let x_2835 : vec4<f32> = u_xlat14;
        let x_2836 : vec2<f32> = vec2<f32>(x_2835.x, x_2835.y);
        let x_2838 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2836.x, x_2836.y, x_2838);
        let x_2845 : vec3<f32> = txVec47;
        let x_2847 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2845.xy, x_2845.z);
        u_xlat71 = x_2847;
        let x_2849 : f32 = u_xlat19.x;
        let x_2850 : f32 = u_xlat71;
        let x_2853 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2849 * x_2850) + x_2853);
        let x_2857 : vec4<f32> = u_xlat14;
        let x_2858 : vec2<f32> = vec2<f32>(x_2857.z, x_2857.w);
        let x_2860 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2858.x, x_2858.y, x_2860);
        let x_2867 : vec3<f32> = txVec48;
        let x_2869 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2867.xy, x_2867.z);
        u_xlat71 = x_2869;
        let x_2871 : f32 = u_xlat19.y;
        let x_2872 : f32 = u_xlat71;
        let x_2875 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2871 * x_2872) + x_2875);
        let x_2879 : vec2<f32> = u_xlat55;
        let x_2881 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2879.x, x_2879.y, x_2881);
        let x_2888 : vec3<f32> = txVec49;
        let x_2890 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2888.xy, x_2888.z);
        u_xlat71 = x_2890;
        let x_2892 : f32 = u_xlat19.z;
        let x_2893 : f32 = u_xlat71;
        let x_2896 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2892 * x_2893) + x_2896);
        let x_2900 : vec4<f32> = u_xlat15;
        let x_2901 : vec2<f32> = vec2<f32>(x_2900.z, x_2900.w);
        let x_2903 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2901.x, x_2901.y, x_2903);
        let x_2910 : vec3<f32> = txVec50;
        let x_2912 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2910.xy, x_2910.z);
        u_xlat71 = x_2912;
        let x_2914 : f32 = u_xlat19.w;
        let x_2915 : f32 = u_xlat71;
        let x_2918 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2914 * x_2915) + x_2918);
        let x_2922 : vec4<f32> = u_xlat16;
        let x_2923 : vec2<f32> = vec2<f32>(x_2922.x, x_2922.y);
        let x_2925 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2923.x, x_2923.y, x_2925);
        let x_2932 : vec3<f32> = txVec51;
        let x_2934 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2932.xy, x_2932.z);
        u_xlat71 = x_2934;
        let x_2936 : f32 = u_xlat20.x;
        let x_2937 : f32 = u_xlat71;
        let x_2940 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2936 * x_2937) + x_2940);
        let x_2944 : vec4<f32> = u_xlat16;
        let x_2945 : vec2<f32> = vec2<f32>(x_2944.z, x_2944.w);
        let x_2947 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2945.x, x_2945.y, x_2947);
        let x_2954 : vec3<f32> = txVec52;
        let x_2956 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2954.xy, x_2954.z);
        u_xlat71 = x_2956;
        let x_2958 : f32 = u_xlat20.y;
        let x_2959 : f32 = u_xlat71;
        let x_2962 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2958 * x_2959) + x_2962);
        let x_2966 : vec2<f32> = u_xlat29;
        let x_2968 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2966.x, x_2966.y, x_2968);
        let x_2975 : vec3<f32> = txVec53;
        let x_2977 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2975.xy, x_2975.z);
        u_xlat29.x = x_2977;
        let x_2980 : f32 = u_xlat20.z;
        let x_2982 : f32 = u_xlat29.x;
        let x_2985 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2980 * x_2982) + x_2985);
        let x_2989 : vec4<f32> = u_xlat17;
        let x_2990 : vec2<f32> = vec2<f32>(x_2989.x, x_2989.y);
        let x_2992 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2990.x, x_2990.y, x_2992);
        let x_2999 : vec3<f32> = txVec54;
        let x_3001 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2999.xy, x_2999.z);
        u_xlat29.x = x_3001;
        let x_3004 : f32 = u_xlat20.w;
        let x_3006 : f32 = u_xlat29.x;
        let x_3009 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3004 * x_3006) + x_3009);
        let x_3013 : vec4<f32> = u_xlat11;
        let x_3014 : vec2<f32> = vec2<f32>(x_3013.x, x_3013.y);
        let x_3016 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3014.x, x_3014.y, x_3016);
        let x_3023 : vec3<f32> = txVec55;
        let x_3025 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3023.xy, x_3023.z);
        u_xlat29.x = x_3025;
        let x_3028 : f32 = u_xlat7.x;
        let x_3030 : f32 = u_xlat29.x;
        let x_3033 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3028 * x_3030) + x_3033);
        let x_3037 : vec4<f32> = u_xlat11;
        let x_3038 : vec2<f32> = vec2<f32>(x_3037.z, x_3037.w);
        let x_3040 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3038.x, x_3038.y, x_3040);
        let x_3047 : vec3<f32> = txVec56;
        let x_3049 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3047.xy, x_3047.z);
        u_xlat8.x = x_3049;
        let x_3052 : f32 = u_xlat7.y;
        let x_3054 : f32 = u_xlat8.x;
        let x_3057 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3052 * x_3054) + x_3057);
        let x_3061 : vec2<f32> = u_xlat52;
        let x_3063 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3061.x, x_3061.y, x_3063);
        let x_3070 : vec3<f32> = txVec57;
        let x_3072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3070.xy, x_3070.z);
        u_xlat28.x = x_3072;
        let x_3075 : f32 = u_xlat7.z;
        let x_3077 : f32 = u_xlat28.x;
        let x_3080 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3075 * x_3077) + x_3080);
        let x_3084 : vec2<f32> = u_xlat48;
        let x_3086 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3084.x, x_3084.y, x_3086);
        let x_3093 : vec3<f32> = txVec58;
        let x_3095 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3093.xy, x_3093.z);
        u_xlat48.x = x_3095;
        let x_3098 : f32 = u_xlat7.w;
        let x_3100 : f32 = u_xlat48.x;
        let x_3103 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_3098 * x_3100) + x_3103);
      }
    }
  } else {
    let x_3108 : vec4<f32> = vs_INTERP9;
    let x_3109 : vec2<f32> = vec2<f32>(x_3108.x, x_3108.y);
    let x_3111 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3109.x, x_3109.y, x_3111);
    let x_3118 : vec3<f32> = txVec59;
    let x_3120 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3118.xy, x_3118.z);
    u_xlat0.x = x_3120;
  }
  let x_3123 : f32 = u_xlat0.x;
  let x_3125 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3128 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3123 * x_3125) + x_3128);
  let x_3133 : f32 = vs_INTERP9.z;
  u_xlatb2 = (0.0f >= x_3133);
  let x_3136 : f32 = vs_INTERP9.z;
  u_xlatb48 = (x_3136 >= 1.0f);
  let x_3138 : bool = u_xlatb2;
  let x_3139 : bool = u_xlatb48;
  u_xlatb2 = (x_3138 | x_3139);
  let x_3141 : bool = u_xlatb2;
  if (x_3141) {
    x_3142 = 1.0f;
  } else {
    let x_3147 : f32 = u_xlat0.x;
    x_3142 = x_3147;
  }
  let x_3148 : f32 = x_3142;
  u_xlat0.x = x_3148;
  let x_3150 : vec3<f32> = vs_INTERP0;
  let x_3152 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3154 : vec3<f32> = (x_3150 + -(x_3152));
  let x_3155 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3154.x, x_3154.y, x_3154.z, x_3155.w);
  let x_3157 : vec4<f32> = u_xlat7;
  let x_3159 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3157.x, x_3157.y, x_3157.z), vec3<f32>(x_3159.x, x_3159.y, x_3159.z));
  let x_3164 : f32 = u_xlat2.x;
  let x_3166 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3169 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3164 * x_3166) + x_3169);
  let x_3173 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3173, 0.0f, 1.0f);
  let x_3177 : f32 = u_xlat0.x;
  u_xlat48.x = (-(x_3177) + 1.0f);
  let x_3182 : f32 = u_xlat2.x;
  let x_3184 : f32 = u_xlat48.x;
  let x_3187 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3182 * x_3184) + x_3187);
  let x_3190 : vec3<f32> = u_xlat27;
  let x_3193 : vec4<f32> = x_137.x_MainLightColor;
  let x_3195 : vec3<f32> = (vec3<f32>(x_3190.x, x_3190.x, x_3190.x) * vec3<f32>(x_3193.x, x_3193.y, x_3193.z));
  let x_3196 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3195.x, x_3195.y, x_3195.z, x_3196.w);
  let x_3198 : vec4<f32> = u_xlat4;
  let x_3201 : vec3<f32> = u_xlat21;
  u_xlat2.x = dot(-(vec3<f32>(x_3198.x, x_3198.y, x_3198.z)), x_3201);
  let x_3205 : f32 = u_xlat2.x;
  let x_3207 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3205 + x_3207);
  let x_3210 : vec3<f32> = u_xlat21;
  let x_3211 : vec3<f32> = u_xlat2;
  let x_3215 : vec4<f32> = u_xlat4;
  let x_3218 : vec3<f32> = ((x_3210 * -(vec3<f32>(x_3211.x, x_3211.x, x_3211.x))) + -(vec3<f32>(x_3215.x, x_3215.y, x_3215.z)));
  let x_3219 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3218.x, x_3218.y, x_3218.z, x_3219.w);
  let x_3221 : vec3<f32> = u_xlat21;
  let x_3222 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(x_3221, vec3<f32>(x_3222.x, x_3222.y, x_3222.z));
  let x_3227 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3227, 0.0f, 1.0f);
  let x_3231 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3231) + 1.0f);
  let x_3236 : f32 = u_xlat2.x;
  let x_3238 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3236 * x_3238);
  let x_3242 : f32 = u_xlat2.x;
  let x_3244 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3242 * x_3244);
  let x_3248 : f32 = u_xlat23.x;
  u_xlat48.x = ((-(x_3248) * 0.699999988f) + 1.700000048f);
  let x_3256 : f32 = u_xlat23.x;
  let x_3258 : f32 = u_xlat48.x;
  u_xlat23.x = (x_3256 * x_3258);
  let x_3262 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3262 * 6.0f);
  let x_3274 : vec4<f32> = u_xlat8;
  let x_3277 : f32 = u_xlat23.x;
  let x_3278 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3274.x, x_3274.y, x_3274.z), x_3277);
  u_xlat8 = x_3278;
  let x_3280 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3280 + -1.0f);
  let x_3284 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3286 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3284 * x_3286) + 1.0f);
  let x_3291 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3291, 0.0f);
  let x_3295 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3295);
  let x_3299 : f32 = u_xlat23.x;
  let x_3301 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3299 * x_3301);
  let x_3305 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3305);
  let x_3309 : f32 = u_xlat23.x;
  let x_3311 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3309 * x_3311);
  let x_3314 : vec4<f32> = u_xlat8;
  let x_3316 : vec3<f32> = u_xlat23;
  let x_3318 : vec3<f32> = (vec3<f32>(x_3314.x, x_3314.y, x_3314.z) * vec3<f32>(x_3316.x, x_3316.x, x_3316.x));
  let x_3319 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3318.x, x_3318.y, x_3318.z, x_3319.w);
  let x_3321 : f32 = u_xlat65;
  let x_3323 : f32 = u_xlat65;
  let x_3327 : vec2<f32> = ((vec2<f32>(x_3321, x_3321) * vec2<f32>(x_3323, x_3323)) + vec2<f32>(-1.0f, 1.0f));
  let x_3328 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3327.x, x_3328.y, x_3327.y);
  let x_3331 : f32 = u_xlat23.z;
  u_xlat65 = (1.0f / x_3331);
  let x_3333 : f32 = u_xlat67;
  u_xlat67 = (x_3333 + -0.039999999f);
  let x_3337 : f32 = u_xlat2.x;
  let x_3338 : f32 = u_xlat67;
  u_xlat2.x = ((x_3337 * x_3338) + 0.039999999f);
  let x_3344 : f32 = u_xlat2.x;
  let x_3345 : f32 = u_xlat65;
  u_xlat2.x = (x_3344 * x_3345);
  let x_3348 : vec3<f32> = u_xlat2;
  let x_3350 : vec4<f32> = u_xlat8;
  let x_3352 : vec3<f32> = (vec3<f32>(x_3348.x, x_3348.x, x_3348.x) * vec3<f32>(x_3350.x, x_3350.y, x_3350.z));
  let x_3353 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3352.x, x_3352.y, x_3352.z, x_3353.w);
  let x_3355 : vec4<f32> = u_xlat3;
  let x_3357 : vec3<f32> = u_xlat5;
  let x_3359 : vec4<f32> = u_xlat8;
  let x_3361 : vec3<f32> = ((vec3<f32>(x_3355.x, x_3355.y, x_3355.z) * x_3357) + vec3<f32>(x_3359.x, x_3359.y, x_3359.z));
  let x_3362 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3361.x, x_3361.y, x_3361.z, x_3362.w);
  let x_3365 : f32 = u_xlat0.x;
  let x_3367 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3365 * x_3367);
  let x_3370 : vec3<f32> = u_xlat21;
  let x_3372 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(x_3370, vec3<f32>(x_3372.x, x_3372.y, x_3372.z));
  let x_3377 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3377, 0.0f, 1.0f);
  let x_3381 : f32 = u_xlat0.x;
  let x_3383 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3381 * x_3383);
  let x_3386 : vec3<f32> = u_xlat0;
  let x_3388 : vec4<f32> = u_xlat7;
  let x_3390 : vec3<f32> = (vec3<f32>(x_3386.x, x_3386.x, x_3386.x) * vec3<f32>(x_3388.x, x_3388.y, x_3388.z));
  let x_3391 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3390.x, x_3390.y, x_3390.z, x_3391.w);
  let x_3393 : vec4<f32> = u_xlat4;
  let x_3396 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3398 : vec3<f32> = (vec3<f32>(x_3393.x, x_3393.y, x_3393.z) + vec3<f32>(x_3396.x, x_3396.y, x_3396.z));
  let x_3399 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3398.x, x_3398.y, x_3398.z, x_3399.w);
  let x_3401 : vec4<f32> = u_xlat8;
  let x_3403 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3401.x, x_3401.y, x_3401.z), vec3<f32>(x_3403.x, x_3403.y, x_3403.z));
  let x_3408 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3408, 1.17549435e-37f);
  let x_3412 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3412);
  let x_3415 : vec3<f32> = u_xlat0;
  let x_3417 : vec4<f32> = u_xlat8;
  let x_3419 : vec3<f32> = (vec3<f32>(x_3415.x, x_3415.x, x_3415.x) * vec3<f32>(x_3417.x, x_3417.y, x_3417.z));
  let x_3420 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3419.x, x_3419.y, x_3419.z, x_3420.w);
  let x_3422 : vec3<f32> = u_xlat21;
  let x_3423 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3422, vec3<f32>(x_3423.x, x_3423.y, x_3423.z));
  let x_3428 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3428, 0.0f, 1.0f);
  let x_3432 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3434 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3432.x, x_3432.y, x_3432.z), vec3<f32>(x_3434.x, x_3434.y, x_3434.z));
  let x_3439 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3439, 0.0f, 1.0f);
  let x_3443 : f32 = u_xlat0.x;
  let x_3445 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3443 * x_3445);
  let x_3449 : f32 = u_xlat0.x;
  let x_3451 : f32 = u_xlat23.x;
  u_xlat0.x = ((x_3449 * x_3451) + 1.000010014f);
  let x_3457 : f32 = u_xlat2.x;
  let x_3459 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3457 * x_3459);
  let x_3463 : f32 = u_xlat0.x;
  let x_3465 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3463 * x_3465);
  let x_3469 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3469, 0.100000001f);
  let x_3474 : f32 = u_xlat0.x;
  let x_3476 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3474 * x_3476);
  let x_3479 : f32 = u_xlat68;
  let x_3481 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3479 * x_3481);
  let x_3484 : f32 = u_xlat66;
  let x_3486 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3484 / x_3486);
  let x_3489 : vec3<f32> = u_xlat0;
  let x_3493 : vec3<f32> = u_xlat5;
  let x_3494 : vec3<f32> = ((vec3<f32>(x_3489.x, x_3489.x, x_3489.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3493);
  let x_3495 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3494.x, x_3494.y, x_3494.z, x_3495.w);
  let x_3497 : vec4<f32> = u_xlat7;
  let x_3499 : vec4<f32> = u_xlat8;
  let x_3501 : vec3<f32> = (vec3<f32>(x_3497.x, x_3497.y, x_3497.z) * vec3<f32>(x_3499.x, x_3499.y, x_3499.z));
  let x_3502 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3501.x, x_3501.y, x_3501.z, x_3502.w);
  let x_3505 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3507 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3505, x_3507);
  let x_3513 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3513));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3525 : u32 = u_xlatu_loop_1;
    let x_3526 : u32 = u_xlatu0;
    if ((x_3525 < x_3526)) {
    } else {
      break;
    }
    let x_3529 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3529 >> 2u);
    let x_3533 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3533 & 3u));
    let x_3536 : u32 = u_xlatu65;
    let x_3539 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3536)];
    let x_3549 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3554 : vec4<u32> = indexable[x_3549];
    u_xlat65 = dot(x_3539, bitcast<vec4<f32>>(x_3554));
    let x_3558 : f32 = u_xlat65;
    u_xlati65 = i32(x_3558);
    let x_3560 : vec3<f32> = vs_INTERP0;
    let x_3572 : i32 = u_xlati65;
    let x_3574 : vec4<f32> = x_3571.x_AdditionalLightsPosition[x_3572];
    let x_3577 : i32 = u_xlati65;
    let x_3579 : vec4<f32> = x_3571.x_AdditionalLightsPosition[x_3577];
    let x_3581 : vec3<f32> = ((-(x_3560) * vec3<f32>(x_3574.w, x_3574.w, x_3574.w)) + vec3<f32>(x_3579.x, x_3579.y, x_3579.z));
    let x_3582 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3581.x, x_3581.y, x_3581.z, x_3582.w);
    let x_3584 : vec4<f32> = u_xlat9;
    let x_3586 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3584.x, x_3584.y, x_3584.z), vec3<f32>(x_3586.x, x_3586.y, x_3586.z));
    let x_3589 : f32 = u_xlat67;
    u_xlat67 = max(x_3589, 6.10351562e-05f);
    let x_3592 : f32 = u_xlat67;
    u_xlat48.x = inverseSqrt(x_3592);
    let x_3595 : vec2<f32> = u_xlat48;
    let x_3597 : vec4<f32> = u_xlat9;
    let x_3599 : vec3<f32> = (vec3<f32>(x_3595.x, x_3595.x, x_3595.x) * vec3<f32>(x_3597.x, x_3597.y, x_3597.z));
    let x_3600 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3599.x, x_3599.y, x_3599.z, x_3600.w);
    let x_3602 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_3602);
    let x_3604 : f32 = u_xlat67;
    let x_3605 : i32 = u_xlati65;
    let x_3607 : f32 = x_3571.x_AdditionalLightsAttenuation[x_3605].x;
    u_xlat67 = (x_3604 * x_3607);
    let x_3609 : f32 = u_xlat67;
    let x_3611 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3609) * x_3611) + 1.0f);
    let x_3614 : f32 = u_xlat67;
    u_xlat67 = max(x_3614, 0.0f);
    let x_3616 : f32 = u_xlat67;
    let x_3617 : f32 = u_xlat67;
    u_xlat67 = (x_3616 * x_3617);
    let x_3619 : f32 = u_xlat67;
    let x_3620 : f32 = u_xlat69;
    u_xlat67 = (x_3619 * x_3620);
    let x_3622 : i32 = u_xlati65;
    let x_3624 : vec4<f32> = x_3571.x_AdditionalLightsSpotDir[x_3622];
    let x_3626 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3624.x, x_3624.y, x_3624.z), vec3<f32>(x_3626.x, x_3626.y, x_3626.z));
    let x_3629 : f32 = u_xlat69;
    let x_3630 : i32 = u_xlati65;
    let x_3632 : f32 = x_3571.x_AdditionalLightsAttenuation[x_3630].z;
    let x_3634 : i32 = u_xlati65;
    let x_3636 : f32 = x_3571.x_AdditionalLightsAttenuation[x_3634].w;
    u_xlat69 = ((x_3629 * x_3632) + x_3636);
    let x_3638 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3638, 0.0f, 1.0f);
    let x_3640 : f32 = u_xlat69;
    let x_3641 : f32 = u_xlat69;
    u_xlat69 = (x_3640 * x_3641);
    let x_3643 : f32 = u_xlat67;
    let x_3644 : f32 = u_xlat69;
    u_xlat67 = (x_3643 * x_3644);
    let x_3646 : vec3<f32> = u_xlat27;
    let x_3648 : i32 = u_xlati65;
    let x_3650 : vec4<f32> = x_3571.x_AdditionalLightsColor[x_3648];
    let x_3652 : vec3<f32> = (vec3<f32>(x_3646.x, x_3646.x, x_3646.x) * vec3<f32>(x_3650.x, x_3650.y, x_3650.z));
    let x_3653 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3652.x, x_3652.y, x_3652.z, x_3653.w);
    let x_3655 : vec3<f32> = u_xlat21;
    let x_3656 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(x_3655, vec3<f32>(x_3656.x, x_3656.y, x_3656.z));
    let x_3659 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3659, 0.0f, 1.0f);
    let x_3661 : f32 = u_xlat65;
    let x_3662 : f32 = u_xlat67;
    u_xlat65 = (x_3661 * x_3662);
    let x_3664 : f32 = u_xlat65;
    let x_3666 : vec4<f32> = u_xlat11;
    let x_3668 : vec3<f32> = (vec3<f32>(x_3664, x_3664, x_3664) * vec3<f32>(x_3666.x, x_3666.y, x_3666.z));
    let x_3669 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3668.x, x_3668.y, x_3668.z, x_3669.w);
    let x_3671 : vec4<f32> = u_xlat9;
    let x_3673 : vec2<f32> = u_xlat48;
    let x_3676 : vec4<f32> = u_xlat4;
    let x_3678 : vec3<f32> = ((vec3<f32>(x_3671.x, x_3671.y, x_3671.z) * vec3<f32>(x_3673.x, x_3673.x, x_3673.x)) + vec3<f32>(x_3676.x, x_3676.y, x_3676.z));
    let x_3679 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3678.x, x_3678.y, x_3678.z, x_3679.w);
    let x_3681 : vec4<f32> = u_xlat9;
    let x_3683 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3681.x, x_3681.y, x_3681.z), vec3<f32>(x_3683.x, x_3683.y, x_3683.z));
    let x_3686 : f32 = u_xlat65;
    u_xlat65 = max(x_3686, 1.17549435e-37f);
    let x_3688 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3688);
    let x_3690 : f32 = u_xlat65;
    let x_3692 : vec4<f32> = u_xlat9;
    let x_3694 : vec3<f32> = (vec3<f32>(x_3690, x_3690, x_3690) * vec3<f32>(x_3692.x, x_3692.y, x_3692.z));
    let x_3695 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3694.x, x_3694.y, x_3694.z, x_3695.w);
    let x_3697 : vec3<f32> = u_xlat21;
    let x_3698 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(x_3697, vec3<f32>(x_3698.x, x_3698.y, x_3698.z));
    let x_3701 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3701, 0.0f, 1.0f);
    let x_3703 : vec4<f32> = u_xlat10;
    let x_3705 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3703.x, x_3703.y, x_3703.z), vec3<f32>(x_3705.x, x_3705.y, x_3705.z));
    let x_3708 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3708, 0.0f, 1.0f);
    let x_3710 : f32 = u_xlat65;
    let x_3711 : f32 = u_xlat65;
    u_xlat65 = (x_3710 * x_3711);
    let x_3713 : f32 = u_xlat65;
    let x_3715 : f32 = u_xlat23.x;
    u_xlat65 = ((x_3713 * x_3715) + 1.000010014f);
    let x_3718 : f32 = u_xlat67;
    let x_3719 : f32 = u_xlat67;
    u_xlat67 = (x_3718 * x_3719);
    let x_3721 : f32 = u_xlat65;
    let x_3722 : f32 = u_xlat65;
    u_xlat65 = (x_3721 * x_3722);
    let x_3724 : f32 = u_xlat67;
    u_xlat67 = max(x_3724, 0.100000001f);
    let x_3726 : f32 = u_xlat65;
    let x_3727 : f32 = u_xlat67;
    u_xlat65 = (x_3726 * x_3727);
    let x_3729 : f32 = u_xlat68;
    let x_3730 : f32 = u_xlat65;
    u_xlat65 = (x_3729 * x_3730);
    let x_3732 : f32 = u_xlat66;
    let x_3733 : f32 = u_xlat65;
    u_xlat65 = (x_3732 / x_3733);
    let x_3735 : f32 = u_xlat65;
    let x_3738 : vec3<f32> = u_xlat5;
    let x_3739 : vec3<f32> = ((vec3<f32>(x_3735, x_3735, x_3735) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3738);
    let x_3740 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3739.x, x_3739.y, x_3739.z, x_3740.w);
    let x_3742 : vec4<f32> = u_xlat9;
    let x_3744 : vec4<f32> = u_xlat11;
    let x_3747 : vec4<f32> = u_xlat8;
    let x_3749 : vec3<f32> = ((vec3<f32>(x_3742.x, x_3742.y, x_3742.z) * vec3<f32>(x_3744.x, x_3744.y, x_3744.z)) + vec3<f32>(x_3747.x, x_3747.y, x_3747.z));
    let x_3750 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3749.x, x_3749.y, x_3749.z, x_3750.w);

    continuing {
      let x_3752 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3752 + bitcast<u32>(1i));
    }
  }
  let x_3754 : vec4<f32> = u_xlat3;
  let x_3756 : vec4<f32> = u_xlat6;
  let x_3759 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_3754.x, x_3754.y, x_3754.z) * vec3<f32>(x_3756.x, x_3756.x, x_3756.x)) + vec3<f32>(x_3759.x, x_3759.y, x_3759.z));
  let x_3762 : vec4<f32> = u_xlat8;
  let x_3764 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3762.x, x_3762.y, x_3762.z) + x_3764);
  let x_3768 : vec4<f32> = vs_INTERP4;
  let x_3770 : vec3<f32> = u_xlat1;
  let x_3772 : vec3<f32> = u_xlat0;
  let x_3773 : vec3<f32> = ((vec3<f32>(x_3768.w, x_3768.w, x_3768.w) * x_3770) + x_3772);
  let x_3774 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3773.x, x_3773.y, x_3773.z, x_3774.w);
  let x_3776 : bool = u_xlatb44;
  let x_3777 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_3777, x_3776);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

