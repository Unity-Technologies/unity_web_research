struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_271 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3793 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1726 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu45 : u32;
  var u_xlatu25 : u32;
  var u_xlati45 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : f32;
  var x_1858 : f32;
  var u_xlatb45 : vec2<bool>;
  var u_xlat45 : vec2<f32>;
  var u_xlatb23 : bool;
  var x_1930 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : bool;
  var u_xlat52 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat71 : f32;
  var x_4011 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb66;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb66;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb66;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat66 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat66;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat66;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat66;
  u_xlat66 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat66;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_273 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres0;
  let x_276 : vec3<f32> = (x_266 + -(vec3<f32>(x_273.x, x_273.y, x_273.z)));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres1;
  let x_285 : vec3<f32> = (x_280 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_289 : vec3<f32> = vs_INTERP0;
  let x_292 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres2;
  let x_295 : vec3<f32> = (x_289 + -(vec3<f32>(x_292.x, x_292.y, x_292.z)));
  let x_296 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_295.x, x_295.y, x_295.z, x_296.w);
  let x_299 : vec3<f32> = vs_INTERP0;
  let x_302 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres3;
  let x_305 : vec3<f32> = (x_299 + -(vec3<f32>(x_302.x, x_302.y, x_302.z)));
  let x_306 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_305.x, x_305.y, x_305.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat6;
  let x_310 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_308.x, x_308.y, x_308.z), vec3<f32>(x_310.x, x_310.y, x_310.z));
  let x_314 : vec4<f32> = u_xlat7;
  let x_316 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_314.x, x_314.y, x_314.z), vec3<f32>(x_316.x, x_316.y, x_316.z));
  let x_320 : vec4<f32> = u_xlat8;
  let x_322 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_320.x, x_320.y, x_320.z), vec3<f32>(x_322.x, x_322.y, x_322.z));
  let x_326 : vec4<f32> = u_xlat9;
  let x_328 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_326.x, x_326.y, x_326.z), vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_335 : vec4<f32> = u_xlat6;
  let x_338 : vec4<f32> = x_271.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_335 < x_338);
  let x_341 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_341);
  let x_345 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_345);
  let x_349 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_349);
  let x_353 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_353);
  let x_357 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_357);
  let x_362 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_362);
  let x_366 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_366);
  let x_369 : vec4<f32> = u_xlat6;
  let x_371 : vec4<f32> = u_xlat7;
  let x_373 : vec3<f32> = (vec3<f32>(x_369.x, x_369.y, x_369.z) + vec3<f32>(x_371.y, x_371.z, x_371.w));
  let x_374 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_376 : vec4<f32> = u_xlat6;
  let x_379 : vec3<f32> = max(vec3<f32>(x_376.x, x_376.y, x_376.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_380 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_380.x, x_379.x, x_379.y, x_379.z);
  let x_382 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_382, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_387 : f32 = u_xlat66;
  u_xlat66 = (-(x_387) + 4.0f);
  let x_391 : f32 = u_xlat66;
  u_xlatu66 = u32(x_391);
  let x_394 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_394) << bitcast<u32>(2i));
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : i32 = u_xlati66;
  let x_402 : i32 = u_xlati66;
  let x_406 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_399 + 1i) / 4i)][((x_402 + 1i) % 4i)];
  let x_408 : vec3<f32> = (vec3<f32>(x_397.y, x_397.y, x_397.y) * vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_409 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_408.x, x_408.y, x_408.z, x_409.w);
  let x_411 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_416 : vec4<f32> = x_271.x_MainLightWorldToShadow[(x_411 / 4i)][(x_413 % 4i)];
  let x_418 : vec3<f32> = vs_INTERP0;
  let x_421 : vec4<f32> = u_xlat6;
  let x_423 : vec3<f32> = ((vec3<f32>(x_416.x, x_416.y, x_416.z) * vec3<f32>(x_418.x, x_418.x, x_418.x)) + vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_424 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_423.x, x_423.y, x_423.z, x_424.w);
  let x_426 : i32 = u_xlati66;
  let x_429 : i32 = u_xlati66;
  let x_433 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_426 + 2i) / 4i)][((x_429 + 2i) % 4i)];
  let x_435 : vec3<f32> = vs_INTERP0;
  let x_438 : vec4<f32> = u_xlat6;
  let x_440 : vec3<f32> = ((vec3<f32>(x_433.x, x_433.y, x_433.z) * vec3<f32>(x_435.z, x_435.z, x_435.z)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat6;
  let x_445 : i32 = u_xlati66;
  let x_448 : i32 = u_xlati66;
  let x_452 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_445 + 3i) / 4i)][((x_448 + 3i) % 4i)];
  let x_454 : vec3<f32> = (vec3<f32>(x_443.x, x_443.y, x_443.z) + vec3<f32>(x_452.x, x_452.y, x_452.z));
  let x_455 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_459 : f32 = x_271.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_459);
  let x_461 : bool = u_xlatb66;
  if (x_461) {
    let x_466 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb67 = (x_466 == 1.0f);
    let x_468 : bool = u_xlatb67;
    if (x_468) {
      let x_471 : vec4<f32> = u_xlat6;
      let x_475 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_471.x, x_471.y, x_471.x, x_471.y) + x_475);
      let x_478 : vec4<f32> = u_xlat7;
      let x_479 : vec2<f32> = vec2<f32>(x_478.x, x_478.y);
      let x_481 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_479.x, x_479.y, x_481);
      let x_493 : vec3<f32> = txVec0;
      let x_495 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_493.xy, x_493.z);
      u_xlat8.x = x_495;
      let x_498 : vec4<f32> = u_xlat7;
      let x_499 : vec2<f32> = vec2<f32>(x_498.z, x_498.w);
      let x_501 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_499.x, x_499.y, x_501);
      let x_508 : vec3<f32> = txVec1;
      let x_510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_508.xy, x_508.z);
      u_xlat8.y = x_510;
      let x_512 : vec4<f32> = u_xlat6;
      let x_515 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_512.x, x_512.y, x_512.x, x_512.y) + x_515);
      let x_518 : vec4<f32> = u_xlat7;
      let x_519 : vec2<f32> = vec2<f32>(x_518.x, x_518.y);
      let x_521 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_519.x, x_519.y, x_521);
      let x_528 : vec3<f32> = txVec2;
      let x_530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_528.xy, x_528.z);
      u_xlat8.z = x_530;
      let x_533 : vec4<f32> = u_xlat7;
      let x_534 : vec2<f32> = vec2<f32>(x_533.z, x_533.w);
      let x_536 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_534.x, x_534.y, x_536);
      let x_543 : vec3<f32> = txVec3;
      let x_545 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_543.xy, x_543.z);
      u_xlat8.w = x_545;
      let x_547 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_547, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_554 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb68 = (x_554 == 2.0f);
      let x_556 : bool = u_xlatb68;
      if (x_556) {
        let x_559 : vec4<f32> = u_xlat6;
        let x_562 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_567 : vec2<f32> = ((vec2<f32>(x_559.x, x_559.y) * vec2<f32>(x_562.z, x_562.w)) + vec2<f32>(0.5f, 0.5f));
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_567.x, x_567.y, x_568.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat7;
        let x_572 : vec2<f32> = floor(vec2<f32>(x_570.x, x_570.y));
        let x_573 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_572.x, x_572.y, x_573.z, x_573.w);
        let x_577 : vec4<f32> = u_xlat6;
        let x_580 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_583 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_577.x, x_577.y) * vec2<f32>(x_580.z, x_580.w)) + -(vec2<f32>(x_583.x, x_583.y)));
        let x_587 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_587.x, x_587.x, x_587.y, x_587.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_591 : vec4<f32> = u_xlat8;
        let x_593 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_591.x, x_591.x, x_591.z, x_591.z) * vec4<f32>(x_593.x, x_593.x, x_593.z, x_593.z));
        let x_596 : vec4<f32> = u_xlat9;
        let x_600 : vec2<f32> = (vec2<f32>(x_596.y, x_596.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_601 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_600.x, x_601.y, x_600.y, x_601.w);
        let x_603 : vec4<f32> = u_xlat9;
        let x_606 : vec2<f32> = u_xlat51;
        let x_608 : vec2<f32> = ((vec2<f32>(x_603.x, x_603.z) * vec2<f32>(0.5f, 0.5f)) + -(x_606));
        let x_609 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_608.x, x_608.y, x_609.z, x_609.w);
        let x_612 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_612) + vec2<f32>(1.0f, 1.0f));
        let x_617 : vec2<f32> = u_xlat51;
        let x_619 : vec2<f32> = min(x_617, vec2<f32>(0.0f, 0.0f));
        let x_620 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_619.x, x_619.y, x_620.z, x_620.w);
        let x_622 : vec4<f32> = u_xlat10;
        let x_625 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = u_xlat53;
        let x_629 : vec2<f32> = ((-(vec2<f32>(x_622.x, x_622.y)) * vec2<f32>(x_625.x, x_625.y)) + x_628);
        let x_630 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_629.x, x_629.y, x_630.z, x_630.w);
        let x_632 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_632, vec2<f32>(0.0f, 0.0f));
        let x_634 : vec2<f32> = u_xlat51;
        let x_636 : vec2<f32> = u_xlat51;
        let x_638 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_634) * x_636) + vec2<f32>(x_638.y, x_638.w));
        let x_641 : vec4<f32> = u_xlat10;
        let x_643 : vec2<f32> = (vec2<f32>(x_641.x, x_641.y) + vec2<f32>(1.0f, 1.0f));
        let x_644 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_643.x, x_643.y, x_644.z, x_644.w);
        let x_646 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_646 + vec2<f32>(1.0f, 1.0f));
        let x_649 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_649.x, x_649.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_656 : vec2<f32> = u_xlat53;
        let x_657 : vec2<f32> = (x_656 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_658 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_657.x, x_657.y, x_658.z, x_658.w);
        let x_660 : vec4<f32> = u_xlat10;
        let x_662 : vec2<f32> = (vec2<f32>(x_660.x, x_660.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_663 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_662.x, x_662.y, x_663.z, x_663.w);
        let x_666 : vec2<f32> = u_xlat51;
        let x_667 : vec2<f32> = (x_666 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_668 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_667.x, x_667.y, x_668.z, x_668.w);
        let x_670 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_670.y, x_670.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_674 : f32 = u_xlat10.x;
        u_xlat11.z = x_674;
        let x_677 : f32 = u_xlat51.x;
        u_xlat11.w = x_677;
        let x_680 : f32 = u_xlat12.x;
        u_xlat9.z = x_680;
        let x_683 : f32 = u_xlat8.x;
        u_xlat9.w = x_683;
        let x_686 : vec4<f32> = u_xlat9;
        let x_688 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_686.z, x_686.w, x_686.x, x_686.z) + vec4<f32>(x_688.z, x_688.w, x_688.x, x_688.z));
        let x_692 : f32 = u_xlat11.y;
        u_xlat10.z = x_692;
        let x_695 : f32 = u_xlat51.y;
        u_xlat10.w = x_695;
        let x_698 : f32 = u_xlat9.y;
        u_xlat12.z = x_698;
        let x_701 : f32 = u_xlat8.z;
        u_xlat12.w = x_701;
        let x_703 : vec4<f32> = u_xlat10;
        let x_705 : vec4<f32> = u_xlat12;
        let x_707 : vec3<f32> = (vec3<f32>(x_703.z, x_703.y, x_703.w) + vec3<f32>(x_705.z, x_705.y, x_705.w));
        let x_708 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
        let x_710 : vec4<f32> = u_xlat9;
        let x_712 : vec4<f32> = u_xlat13;
        let x_714 : vec3<f32> = (vec3<f32>(x_710.x, x_710.z, x_710.w) / vec3<f32>(x_712.z, x_712.w, x_712.y));
        let x_715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat9;
        let x_723 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_723.x, x_723.y, x_723.z, x_724.w);
        let x_726 : vec4<f32> = u_xlat12;
        let x_728 : vec4<f32> = u_xlat8;
        let x_730 : vec3<f32> = (vec3<f32>(x_726.z, x_726.y, x_726.w) / vec3<f32>(x_728.x, x_728.y, x_728.z));
        let x_731 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_730.x, x_730.y, x_730.z, x_731.w);
        let x_733 : vec4<f32> = u_xlat10;
        let x_735 : vec3<f32> = (vec3<f32>(x_733.x, x_733.y, x_733.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_736 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_735.x, x_735.y, x_735.z, x_736.w);
        let x_738 : vec4<f32> = u_xlat9;
        let x_741 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_743 : vec3<f32> = (vec3<f32>(x_738.y, x_738.x, x_738.z) * vec3<f32>(x_741.x, x_741.x, x_741.x));
        let x_744 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_743.x, x_743.y, x_743.z, x_744.w);
        let x_746 : vec4<f32> = u_xlat10;
        let x_749 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_751 : vec3<f32> = (vec3<f32>(x_746.x, x_746.y, x_746.z) * vec3<f32>(x_749.y, x_749.y, x_749.y));
        let x_752 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_751.x, x_751.y, x_751.z, x_752.w);
        let x_755 : f32 = u_xlat10.x;
        u_xlat9.w = x_755;
        let x_757 : vec4<f32> = u_xlat7;
        let x_760 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_757.x, x_757.y, x_757.x, x_757.y) * vec4<f32>(x_760.x, x_760.y, x_760.x, x_760.y)) + vec4<f32>(x_763.y, x_763.w, x_763.x, x_763.w));
        let x_766 : vec4<f32> = u_xlat7;
        let x_769 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_772 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_766.x, x_766.y) * vec2<f32>(x_769.x, x_769.y)) + vec2<f32>(x_772.z, x_772.w));
        let x_776 : f32 = u_xlat9.y;
        u_xlat10.w = x_776;
        let x_778 : vec4<f32> = u_xlat10;
        let x_779 : vec2<f32> = vec2<f32>(x_778.y, x_778.z);
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_780.x, x_779.x, x_780.z, x_779.y);
        let x_782 : vec4<f32> = u_xlat7;
        let x_785 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.x, x_788.y, x_788.z, x_788.y));
        let x_791 : vec4<f32> = u_xlat7;
        let x_794 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.w, x_797.y, x_797.w, x_797.z));
        let x_800 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_806 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_800.x, x_800.y, x_800.x, x_800.y) * vec4<f32>(x_803.x, x_803.y, x_803.x, x_803.y)) + vec4<f32>(x_806.x, x_806.w, x_806.z, x_806.w));
        let x_810 : vec4<f32> = u_xlat8;
        let x_812 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_810.x, x_810.x, x_810.x, x_810.y) * vec4<f32>(x_812.z, x_812.w, x_812.y, x_812.z));
        let x_816 : vec4<f32> = u_xlat8;
        let x_818 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_816.y, x_816.y, x_816.z, x_816.z) * x_818);
        let x_822 : f32 = u_xlat8.z;
        let x_824 : f32 = u_xlat13.y;
        u_xlat68 = (x_822 * x_824);
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.x, x_827.y);
        let x_830 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec4;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat70 = x_840;
        let x_842 : vec4<f32> = u_xlat11;
        let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
        let x_845 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_853 : vec3<f32> = txVec5;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat72 = x_855;
        let x_856 : f32 = u_xlat72;
        let x_858 : f32 = u_xlat14.y;
        u_xlat72 = (x_856 * x_858);
        let x_861 : f32 = u_xlat14.x;
        let x_862 : f32 = u_xlat70;
        let x_864 : f32 = u_xlat72;
        u_xlat70 = ((x_861 * x_862) + x_864);
        let x_867 : vec2<f32> = u_xlat51;
        let x_869 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_867.x, x_867.y, x_869);
        let x_876 : vec3<f32> = txVec6;
        let x_878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_876.xy, x_876.z);
        u_xlat72 = x_878;
        let x_880 : f32 = u_xlat14.z;
        let x_881 : f32 = u_xlat72;
        let x_883 : f32 = u_xlat70;
        u_xlat70 = ((x_880 * x_881) + x_883);
        let x_886 : vec4<f32> = u_xlat10;
        let x_887 : vec2<f32> = vec2<f32>(x_886.x, x_886.y);
        let x_889 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_887.x, x_887.y, x_889);
        let x_896 : vec3<f32> = txVec7;
        let x_898 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_896.xy, x_896.z);
        u_xlat72 = x_898;
        let x_900 : f32 = u_xlat14.w;
        let x_901 : f32 = u_xlat72;
        let x_903 : f32 = u_xlat70;
        u_xlat70 = ((x_900 * x_901) + x_903);
        let x_906 : vec4<f32> = u_xlat12;
        let x_907 : vec2<f32> = vec2<f32>(x_906.x, x_906.y);
        let x_909 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_907.x, x_907.y, x_909);
        let x_916 : vec3<f32> = txVec8;
        let x_918 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_916.xy, x_916.z);
        u_xlat72 = x_918;
        let x_920 : f32 = u_xlat15.x;
        let x_921 : f32 = u_xlat72;
        let x_923 : f32 = u_xlat70;
        u_xlat70 = ((x_920 * x_921) + x_923);
        let x_926 : vec4<f32> = u_xlat12;
        let x_927 : vec2<f32> = vec2<f32>(x_926.z, x_926.w);
        let x_929 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_927.x, x_927.y, x_929);
        let x_936 : vec3<f32> = txVec9;
        let x_938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_936.xy, x_936.z);
        u_xlat72 = x_938;
        let x_940 : f32 = u_xlat15.y;
        let x_941 : f32 = u_xlat72;
        let x_943 : f32 = u_xlat70;
        u_xlat70 = ((x_940 * x_941) + x_943);
        let x_946 : vec4<f32> = u_xlat10;
        let x_947 : vec2<f32> = vec2<f32>(x_946.z, x_946.w);
        let x_949 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_947.x, x_947.y, x_949);
        let x_956 : vec3<f32> = txVec10;
        let x_958 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_956.xy, x_956.z);
        u_xlat72 = x_958;
        let x_960 : f32 = u_xlat15.z;
        let x_961 : f32 = u_xlat72;
        let x_963 : f32 = u_xlat70;
        u_xlat70 = ((x_960 * x_961) + x_963);
        let x_966 : vec4<f32> = u_xlat9;
        let x_967 : vec2<f32> = vec2<f32>(x_966.x, x_966.y);
        let x_969 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_967.x, x_967.y, x_969);
        let x_976 : vec3<f32> = txVec11;
        let x_978 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_976.xy, x_976.z);
        u_xlat72 = x_978;
        let x_980 : f32 = u_xlat15.w;
        let x_981 : f32 = u_xlat72;
        let x_983 : f32 = u_xlat70;
        u_xlat70 = ((x_980 * x_981) + x_983);
        let x_986 : vec4<f32> = u_xlat9;
        let x_987 : vec2<f32> = vec2<f32>(x_986.z, x_986.w);
        let x_989 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_987.x, x_987.y, x_989);
        let x_996 : vec3<f32> = txVec12;
        let x_998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_996.xy, x_996.z);
        u_xlat72 = x_998;
        let x_999 : f32 = u_xlat68;
        let x_1000 : f32 = u_xlat72;
        let x_1002 : f32 = u_xlat70;
        u_xlat67 = ((x_999 * x_1000) + x_1002);
      } else {
        let x_1005 : vec4<f32> = u_xlat6;
        let x_1008 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1011 : vec2<f32> = ((vec2<f32>(x_1005.x, x_1005.y) * vec2<f32>(x_1008.z, x_1008.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1012 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1011.x, x_1011.y, x_1012.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1016 : vec2<f32> = floor(vec2<f32>(x_1014.x, x_1014.y));
        let x_1017 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1016.x, x_1016.y, x_1017.z, x_1017.w);
        let x_1019 : vec4<f32> = u_xlat6;
        let x_1022 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1025 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1019.x, x_1019.y) * vec2<f32>(x_1022.z, x_1022.w)) + -(vec2<f32>(x_1025.x, x_1025.y)));
        let x_1029 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1029.x, x_1029.x, x_1029.y, x_1029.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1032 : vec4<f32> = u_xlat8;
        let x_1034 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1032.x, x_1032.x, x_1032.z, x_1032.z) * vec4<f32>(x_1034.x, x_1034.x, x_1034.z, x_1034.z));
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1041 : vec2<f32> = (vec2<f32>(x_1037.y, x_1037.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1042 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1042.x, x_1041.x, x_1042.z, x_1041.y);
        let x_1044 : vec4<f32> = u_xlat9;
        let x_1047 : vec2<f32> = u_xlat51;
        let x_1049 : vec2<f32> = ((vec2<f32>(x_1044.x, x_1044.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1047));
        let x_1050 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1049.x, x_1050.y, x_1049.y, x_1050.w);
        let x_1052 : vec2<f32> = u_xlat51;
        let x_1054 : vec2<f32> = (-(x_1052) + vec2<f32>(1.0f, 1.0f));
        let x_1055 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1054.x, x_1054.y, x_1055.z, x_1055.w);
        let x_1057 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1057, vec2<f32>(0.0f, 0.0f));
        let x_1059 : vec2<f32> = u_xlat53;
        let x_1061 : vec2<f32> = u_xlat53;
        let x_1063 : vec4<f32> = u_xlat9;
        let x_1065 : vec2<f32> = ((-(x_1059) * x_1061) + vec2<f32>(x_1063.x, x_1063.y));
        let x_1066 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1065.x, x_1065.y, x_1066.z, x_1066.w);
        let x_1068 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1068, vec2<f32>(0.0f, 0.0f));
        let x_1071 : vec2<f32> = u_xlat53;
        let x_1073 : vec2<f32> = u_xlat53;
        let x_1075 : vec4<f32> = u_xlat8;
        let x_1077 : vec2<f32> = ((-(x_1071) * x_1073) + vec2<f32>(x_1075.y, x_1075.w));
        let x_1078 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1077.x, x_1078.y, x_1077.y);
        let x_1080 : vec4<f32> = u_xlat9;
        let x_1083 : vec2<f32> = (vec2<f32>(x_1080.x, x_1080.y) + vec2<f32>(2.0f, 2.0f));
        let x_1084 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1083.x, x_1083.y, x_1084.z, x_1084.w);
        let x_1086 : vec3<f32> = u_xlat30;
        let x_1088 : vec2<f32> = (vec2<f32>(x_1086.x, x_1086.z) + vec2<f32>(2.0f, 2.0f));
        let x_1089 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1088.x, x_1089.z, x_1088.y);
        let x_1092 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1092 * 0.081632003f);
        let x_1096 : vec4<f32> = u_xlat8;
        let x_1099 : vec3<f32> = (vec3<f32>(x_1096.z, x_1096.x, x_1096.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1100 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1099.x, x_1099.y, x_1099.z, x_1100.w);
        let x_1102 : vec4<f32> = u_xlat9;
        let x_1105 : vec2<f32> = (vec2<f32>(x_1102.x, x_1102.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1106 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1105.x, x_1105.y, x_1106.z, x_1106.w);
        let x_1109 : f32 = u_xlat12.y;
        u_xlat11.x = x_1109;
        let x_1111 : vec2<f32> = u_xlat51;
        let x_1118 : vec2<f32> = ((vec2<f32>(x_1111.x, x_1111.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1119 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1119.x, x_1118.x, x_1119.z, x_1118.y);
        let x_1121 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1121.x, x_1121.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1126 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1125.x, x_1126.y, x_1125.y, x_1126.w);
        let x_1129 : f32 = u_xlat8.x;
        u_xlat9.y = x_1129;
        let x_1132 : f32 = u_xlat10.y;
        u_xlat9.w = x_1132;
        let x_1134 : vec4<f32> = u_xlat9;
        let x_1135 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1134 + x_1135);
        let x_1137 : vec2<f32> = u_xlat51;
        let x_1140 : vec2<f32> = ((vec2<f32>(x_1137.y, x_1137.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1141 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1141.x, x_1140.x, x_1141.z, x_1140.y);
        let x_1143 : vec2<f32> = u_xlat51;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1143.y, x_1143.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1147 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1147.w);
        let x_1150 : f32 = u_xlat8.y;
        u_xlat10.y = x_1150;
        let x_1152 : vec4<f32> = u_xlat10;
        let x_1153 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1152 + x_1153);
        let x_1155 : vec4<f32> = u_xlat9;
        let x_1156 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1155 / x_1156);
        let x_1158 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1158 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1164 : vec4<f32> = u_xlat10;
        let x_1165 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1164 / x_1165);
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1167 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1169 : vec4<f32> = u_xlat9;
        let x_1172 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1169.w, x_1169.x, x_1169.y, x_1169.z) * vec4<f32>(x_1172.x, x_1172.x, x_1172.x, x_1172.x));
        let x_1175 : vec4<f32> = u_xlat10;
        let x_1178 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1175.x, x_1175.w, x_1175.y, x_1175.z) * vec4<f32>(x_1178.y, x_1178.y, x_1178.y, x_1178.y));
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1182 : vec3<f32> = vec3<f32>(x_1181.y, x_1181.z, x_1181.w);
        let x_1183 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1182.x, x_1183.y, x_1182.y, x_1182.z);
        let x_1186 : f32 = u_xlat10.x;
        u_xlat12.y = x_1186;
        let x_1188 : vec4<f32> = u_xlat7;
        let x_1191 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1194 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1188.x, x_1188.y, x_1188.x, x_1188.y) * vec4<f32>(x_1191.x, x_1191.y, x_1191.x, x_1191.y)) + vec4<f32>(x_1194.x, x_1194.y, x_1194.z, x_1194.y));
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1197.x, x_1197.y) * vec2<f32>(x_1200.x, x_1200.y)) + vec2<f32>(x_1203.w, x_1203.y));
        let x_1207 : f32 = u_xlat12.y;
        u_xlat9.y = x_1207;
        let x_1210 : f32 = u_xlat10.z;
        u_xlat12.y = x_1210;
        let x_1212 : vec4<f32> = u_xlat7;
        let x_1215 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat12;
        let x_1229 : vec2<f32> = ((vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(x_1224.x, x_1224.y)) + vec2<f32>(x_1227.w, x_1227.y));
        let x_1230 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
        let x_1233 : f32 = u_xlat12.y;
        u_xlat9.z = x_1233;
        let x_1236 : vec4<f32> = u_xlat7;
        let x_1239 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y) * vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y)) + vec4<f32>(x_1242.x, x_1242.y, x_1242.x, x_1242.z));
        let x_1246 : f32 = u_xlat10.w;
        u_xlat12.y = x_1246;
        let x_1249 : vec4<f32> = u_xlat7;
        let x_1252 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1255 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y) * vec4<f32>(x_1252.x, x_1252.y, x_1252.x, x_1252.y)) + vec4<f32>(x_1255.x, x_1255.y, x_1255.z, x_1255.y));
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat12;
        u_xlat31 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.w, x_1265.y));
        let x_1269 : f32 = u_xlat12.y;
        u_xlat9.w = x_1269;
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1272.x, x_1272.y) * vec2<f32>(x_1275.x, x_1275.y)) + vec2<f32>(x_1278.x, x_1278.w));
        let x_1281 : vec4<f32> = u_xlat12;
        let x_1282 : vec3<f32> = vec3<f32>(x_1281.x, x_1281.z, x_1281.w);
        let x_1283 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1282.x, x_1283.y, x_1282.y, x_1282.z);
        let x_1285 : vec4<f32> = u_xlat7;
        let x_1288 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1291 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1285.x, x_1285.y, x_1285.x, x_1285.y) * vec4<f32>(x_1288.x, x_1288.y, x_1288.x, x_1288.y)) + vec4<f32>(x_1291.x, x_1291.y, x_1291.z, x_1291.y));
        let x_1295 : vec4<f32> = u_xlat7;
        let x_1298 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1301 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1295.x, x_1295.y) * vec2<f32>(x_1298.x, x_1298.y)) + vec2<f32>(x_1301.w, x_1301.y));
        let x_1305 : f32 = u_xlat9.x;
        u_xlat10.x = x_1305;
        let x_1307 : vec4<f32> = u_xlat7;
        let x_1310 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1313 : vec4<f32> = u_xlat10;
        let x_1315 : vec2<f32> = ((vec2<f32>(x_1307.x, x_1307.y) * vec2<f32>(x_1310.x, x_1310.y)) + vec2<f32>(x_1313.x, x_1313.y));
        let x_1316 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1315.x, x_1315.y, x_1316.z, x_1316.w);
        let x_1319 : vec4<f32> = u_xlat8;
        let x_1321 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1319.x, x_1319.x, x_1319.x, x_1319.x) * x_1321);
        let x_1324 : vec4<f32> = u_xlat8;
        let x_1326 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1324.y, x_1324.y, x_1324.y, x_1324.y) * x_1326);
        let x_1329 : vec4<f32> = u_xlat8;
        let x_1331 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1329.z, x_1329.z, x_1329.z, x_1329.z) * x_1331);
        let x_1333 : vec4<f32> = u_xlat8;
        let x_1335 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1333.w, x_1333.w, x_1333.w, x_1333.w) * x_1335);
        let x_1338 : vec4<f32> = u_xlat13;
        let x_1339 : vec2<f32> = vec2<f32>(x_1338.x, x_1338.y);
        let x_1341 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1339.x, x_1339.y, x_1341);
        let x_1348 : vec3<f32> = txVec13;
        let x_1350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1348.xy, x_1348.z);
        u_xlat68 = x_1350;
        let x_1352 : vec4<f32> = u_xlat13;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.z, x_1352.w);
        let x_1355 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec14;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat70 = x_1364;
        let x_1365 : f32 = u_xlat70;
        let x_1367 : f32 = u_xlat18.y;
        u_xlat70 = (x_1365 * x_1367);
        let x_1370 : f32 = u_xlat18.x;
        let x_1371 : f32 = u_xlat68;
        let x_1373 : f32 = u_xlat70;
        u_xlat68 = ((x_1370 * x_1371) + x_1373);
        let x_1376 : vec2<f32> = u_xlat51;
        let x_1378 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1376.x, x_1376.y, x_1378);
        let x_1385 : vec3<f32> = txVec15;
        let x_1387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1385.xy, x_1385.z);
        u_xlat70 = x_1387;
        let x_1389 : f32 = u_xlat18.z;
        let x_1390 : f32 = u_xlat70;
        let x_1392 : f32 = u_xlat68;
        u_xlat68 = ((x_1389 * x_1390) + x_1392);
        let x_1395 : vec4<f32> = u_xlat16;
        let x_1396 : vec2<f32> = vec2<f32>(x_1395.x, x_1395.y);
        let x_1398 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1396.x, x_1396.y, x_1398);
        let x_1405 : vec3<f32> = txVec16;
        let x_1407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1405.xy, x_1405.z);
        u_xlat70 = x_1407;
        let x_1409 : f32 = u_xlat18.w;
        let x_1410 : f32 = u_xlat70;
        let x_1412 : f32 = u_xlat68;
        u_xlat68 = ((x_1409 * x_1410) + x_1412);
        let x_1415 : vec4<f32> = u_xlat14;
        let x_1416 : vec2<f32> = vec2<f32>(x_1415.x, x_1415.y);
        let x_1418 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1416.x, x_1416.y, x_1418);
        let x_1425 : vec3<f32> = txVec17;
        let x_1427 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1425.xy, x_1425.z);
        u_xlat70 = x_1427;
        let x_1429 : f32 = u_xlat19.x;
        let x_1430 : f32 = u_xlat70;
        let x_1432 : f32 = u_xlat68;
        u_xlat68 = ((x_1429 * x_1430) + x_1432);
        let x_1435 : vec4<f32> = u_xlat14;
        let x_1436 : vec2<f32> = vec2<f32>(x_1435.z, x_1435.w);
        let x_1438 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1436.x, x_1436.y, x_1438);
        let x_1445 : vec3<f32> = txVec18;
        let x_1447 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1445.xy, x_1445.z);
        u_xlat70 = x_1447;
        let x_1449 : f32 = u_xlat19.y;
        let x_1450 : f32 = u_xlat70;
        let x_1452 : f32 = u_xlat68;
        u_xlat68 = ((x_1449 * x_1450) + x_1452);
        let x_1455 : vec4<f32> = u_xlat15;
        let x_1456 : vec2<f32> = vec2<f32>(x_1455.x, x_1455.y);
        let x_1458 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1456.x, x_1456.y, x_1458);
        let x_1465 : vec3<f32> = txVec19;
        let x_1467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1465.xy, x_1465.z);
        u_xlat70 = x_1467;
        let x_1469 : f32 = u_xlat19.z;
        let x_1470 : f32 = u_xlat70;
        let x_1472 : f32 = u_xlat68;
        u_xlat68 = ((x_1469 * x_1470) + x_1472);
        let x_1475 : vec4<f32> = u_xlat16;
        let x_1476 : vec2<f32> = vec2<f32>(x_1475.z, x_1475.w);
        let x_1478 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1476.x, x_1476.y, x_1478);
        let x_1485 : vec3<f32> = txVec20;
        let x_1487 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1485.xy, x_1485.z);
        u_xlat70 = x_1487;
        let x_1489 : f32 = u_xlat19.w;
        let x_1490 : f32 = u_xlat70;
        let x_1492 : f32 = u_xlat68;
        u_xlat68 = ((x_1489 * x_1490) + x_1492);
        let x_1495 : vec4<f32> = u_xlat17;
        let x_1496 : vec2<f32> = vec2<f32>(x_1495.x, x_1495.y);
        let x_1498 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1496.x, x_1496.y, x_1498);
        let x_1505 : vec3<f32> = txVec21;
        let x_1507 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1505.xy, x_1505.z);
        u_xlat70 = x_1507;
        let x_1509 : f32 = u_xlat20.x;
        let x_1510 : f32 = u_xlat70;
        let x_1512 : f32 = u_xlat68;
        u_xlat68 = ((x_1509 * x_1510) + x_1512);
        let x_1515 : vec4<f32> = u_xlat17;
        let x_1516 : vec2<f32> = vec2<f32>(x_1515.z, x_1515.w);
        let x_1518 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1516.x, x_1516.y, x_1518);
        let x_1525 : vec3<f32> = txVec22;
        let x_1527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1525.xy, x_1525.z);
        u_xlat70 = x_1527;
        let x_1529 : f32 = u_xlat20.y;
        let x_1530 : f32 = u_xlat70;
        let x_1532 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1530) + x_1532);
        let x_1535 : vec2<f32> = u_xlat31;
        let x_1537 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1535.x, x_1535.y, x_1537);
        let x_1544 : vec3<f32> = txVec23;
        let x_1546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1544.xy, x_1544.z);
        u_xlat70 = x_1546;
        let x_1548 : f32 = u_xlat20.z;
        let x_1549 : f32 = u_xlat70;
        let x_1551 : f32 = u_xlat68;
        u_xlat68 = ((x_1548 * x_1549) + x_1551);
        let x_1554 : vec2<f32> = u_xlat59;
        let x_1556 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1554.x, x_1554.y, x_1556);
        let x_1563 : vec3<f32> = txVec24;
        let x_1565 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1563.xy, x_1563.z);
        u_xlat70 = x_1565;
        let x_1567 : f32 = u_xlat20.w;
        let x_1568 : f32 = u_xlat70;
        let x_1570 : f32 = u_xlat68;
        u_xlat68 = ((x_1567 * x_1568) + x_1570);
        let x_1573 : vec4<f32> = u_xlat12;
        let x_1574 : vec2<f32> = vec2<f32>(x_1573.x, x_1573.y);
        let x_1576 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1574.x, x_1574.y, x_1576);
        let x_1583 : vec3<f32> = txVec25;
        let x_1585 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1583.xy, x_1583.z);
        u_xlat70 = x_1585;
        let x_1587 : f32 = u_xlat8.x;
        let x_1588 : f32 = u_xlat70;
        let x_1590 : f32 = u_xlat68;
        u_xlat68 = ((x_1587 * x_1588) + x_1590);
        let x_1593 : vec4<f32> = u_xlat12;
        let x_1594 : vec2<f32> = vec2<f32>(x_1593.z, x_1593.w);
        let x_1596 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1594.x, x_1594.y, x_1596);
        let x_1603 : vec3<f32> = txVec26;
        let x_1605 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1603.xy, x_1603.z);
        u_xlat70 = x_1605;
        let x_1607 : f32 = u_xlat8.y;
        let x_1608 : f32 = u_xlat70;
        let x_1610 : f32 = u_xlat68;
        u_xlat68 = ((x_1607 * x_1608) + x_1610);
        let x_1613 : vec2<f32> = u_xlat54;
        let x_1615 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1613.x, x_1613.y, x_1615);
        let x_1622 : vec3<f32> = txVec27;
        let x_1624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1622.xy, x_1622.z);
        u_xlat70 = x_1624;
        let x_1626 : f32 = u_xlat8.z;
        let x_1627 : f32 = u_xlat70;
        let x_1629 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1627) + x_1629);
        let x_1632 : vec4<f32> = u_xlat7;
        let x_1633 : vec2<f32> = vec2<f32>(x_1632.x, x_1632.y);
        let x_1635 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1633.x, x_1633.y, x_1635);
        let x_1642 : vec3<f32> = txVec28;
        let x_1644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1642.xy, x_1642.z);
        u_xlat70 = x_1644;
        let x_1646 : f32 = u_xlat8.w;
        let x_1647 : f32 = u_xlat70;
        let x_1649 : f32 = u_xlat68;
        u_xlat67 = ((x_1646 * x_1647) + x_1649);
      }
    }
  } else {
    let x_1653 : vec4<f32> = u_xlat6;
    let x_1654 : vec2<f32> = vec2<f32>(x_1653.x, x_1653.y);
    let x_1656 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1654.x, x_1654.y, x_1656);
    let x_1663 : vec3<f32> = txVec29;
    let x_1665 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1663.xy, x_1663.z);
    u_xlat67 = x_1665;
  }
  let x_1667 : f32 = x_271.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1667) + 1.0f);
  let x_1670 : f32 = u_xlat67;
  let x_1672 : f32 = x_271.x_MainLightShadowParams.x;
  let x_1674 : f32 = u_xlat68;
  u_xlat67 = ((x_1670 * x_1672) + x_1674);
  let x_1678 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1678);
  let x_1682 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1682 >= 1.0f);
  let x_1684 : bool = u_xlatb70;
  let x_1685 : bool = u_xlatb72;
  u_xlatb70 = (x_1684 | x_1685);
  let x_1687 : bool = u_xlatb70;
  let x_1688 : f32 = u_xlat67;
  u_xlat67 = select(x_1688, 1.0f, x_1687);
  let x_1690 : vec3<f32> = u_xlat0;
  let x_1692 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1690, -(vec3<f32>(x_1692.x, x_1692.y, x_1692.z)));
  let x_1698 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1698, 0.0f, 1.0f);
  let x_1701 : f32 = u_xlat67;
  let x_1704 : vec4<f32> = x_90.x_MainLightColor;
  let x_1706 : vec3<f32> = (vec3<f32>(x_1701, x_1701, x_1701) * vec3<f32>(x_1704.x, x_1704.y, x_1704.z));
  let x_1707 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1706.x, x_1706.y, x_1706.z, x_1707.w);
  let x_1709 : vec3<f32> = u_xlat0;
  let x_1711 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1709.x, x_1709.x, x_1709.x) * vec3<f32>(x_1711.x, x_1711.y, x_1711.z));
  let x_1714 : vec3<f32> = u_xlat0;
  let x_1715 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1714 * vec3<f32>(x_1715.x, x_1715.y, x_1715.z));
  let x_1719 : f32 = x_161.unity_LODFade.x;
  u_xlatb67 = (x_1719 < 0.0f);
  let x_1722 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1722 + 1.0f);
  let x_1725 : bool = u_xlatb67;
  if (x_1725) {
    let x_1730 : f32 = u_xlat3.x;
    x_1726 = x_1730;
  } else {
    let x_1733 : f32 = x_161.unity_LODFade.x;
    x_1726 = x_1733;
  }
  let x_1734 : f32 = x_1726;
  u_xlat67 = x_1734;
  let x_1736 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1736);
  let x_1738 : vec3<f32> = u_xlat1;
  let x_1741 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1738) * vec3<f32>(x_1741.x, x_1741.y, x_1741.x));
  let x_1747 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1747);
  let x_1751 : u32 = u_xlatu1.z;
  u_xlatu45 = (x_1751 * 1025u);
  let x_1755 : u32 = u_xlatu45;
  u_xlatu25 = (x_1755 >> 6u);
  let x_1759 : u32 = u_xlatu45;
  let x_1760 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1759 ^ x_1760));
  let x_1763 : i32 = u_xlati45;
  u_xlatu45 = (bitcast<u32>(x_1763) * 9u);
  let x_1767 : u32 = u_xlatu45;
  u_xlatu25 = (x_1767 >> 11u);
  let x_1770 : u32 = u_xlatu45;
  let x_1771 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1770 ^ x_1771));
  let x_1774 : i32 = u_xlati45;
  u_xlati45 = (x_1774 * 32769i);
  let x_1778 : i32 = u_xlati45;
  let x_1781 : u32 = u_xlatu1.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1778) ^ x_1781));
  let x_1785 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1785) * 1025u);
  let x_1788 : u32 = u_xlatu23;
  u_xlatu45 = (x_1788 >> 6u);
  let x_1790 : u32 = u_xlatu45;
  let x_1791 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1790 ^ x_1791));
  let x_1794 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1794) * 9u);
  let x_1797 : u32 = u_xlatu23;
  u_xlatu45 = (x_1797 >> 11u);
  let x_1799 : u32 = u_xlatu45;
  let x_1800 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1799 ^ x_1800));
  let x_1803 : i32 = u_xlati23;
  u_xlati23 = (x_1803 * 32769i);
  let x_1806 : i32 = u_xlati23;
  let x_1809 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1806) ^ x_1809));
  let x_1812 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1812) * 1025u);
  let x_1817 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1817 >> 6u);
  let x_1819 : u32 = u_xlatu23;
  let x_1821 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1819 ^ x_1821));
  let x_1824 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1824) * 9u);
  let x_1829 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1829 >> 11u);
  let x_1831 : u32 = u_xlatu23;
  let x_1833 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1831 ^ x_1833));
  let x_1836 : i32 = u_xlati1;
  u_xlati1 = (x_1836 * 32769i);
  param = 1065353216i;
  let x_1842 : i32 = u_xlati1;
  param_1 = x_1842;
  param_2 = 0i;
  param_3 = 23i;
  let x_1845 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1845);
  let x_1849 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1849 + -1.0f);
  let x_1854 : f32 = u_xlat1.x;
  u_xlat23 = (-(x_1854) + 1.0f);
  let x_1857 : bool = u_xlatb3;
  if (x_1857) {
    let x_1862 : f32 = u_xlat1.x;
    x_1858 = x_1862;
  } else {
    let x_1864 : f32 = u_xlat23;
    x_1858 = x_1864;
  }
  let x_1865 : f32 = x_1858;
  u_xlat1.x = x_1865;
  let x_1867 : f32 = u_xlat67;
  let x_1870 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1867 * 2.0f) + -(x_1870));
  let x_1875 : f32 = u_xlat1.x;
  let x_1877 : f32 = u_xlat3.w;
  u_xlat23 = (x_1875 * x_1877);
  let x_1882 : f32 = u_xlat23;
  u_xlatb45.x = (x_1882 >= 0.400000006f);
  let x_1888 : bool = u_xlatb45.x;
  let x_1889 : f32 = u_xlat23;
  u_xlat45.x = select(0.0f, x_1889, x_1888);
  let x_1893 : f32 = u_xlat3.w;
  let x_1895 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1893 * x_1895) + -0.400000006f);
  let x_1900 : f32 = u_xlat23;
  u_xlat67 = dpdxCoarse(x_1900);
  let x_1902 : f32 = u_xlat23;
  u_xlat23 = dpdyCoarse(x_1902);
  let x_1904 : f32 = u_xlat23;
  let x_1906 : f32 = u_xlat67;
  u_xlat23 = (abs(x_1904) + abs(x_1906));
  let x_1909 : f32 = u_xlat23;
  u_xlat23 = max(x_1909, 0.0001f);
  let x_1913 : f32 = u_xlat1.x;
  let x_1914 : f32 = u_xlat23;
  u_xlat1.x = (x_1913 / x_1914);
  let x_1918 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1918 + 0.5f);
  let x_1922 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1922, 0.0f, 1.0f);
  let x_1927 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb23 = !((x_1927 == 0.0f));
  let x_1929 : bool = u_xlatb23;
  if (x_1929) {
    let x_1934 : f32 = u_xlat1.x;
    x_1930 = x_1934;
  } else {
    let x_1937 : f32 = u_xlat45.x;
    x_1930 = x_1937;
  }
  let x_1938 : f32 = x_1930;
  u_xlat1.x = x_1938;
  let x_1941 : f32 = u_xlat1.x;
  u_xlat45.x = (x_1941 + -0.0001f);
  let x_1946 : f32 = u_xlat45.x;
  u_xlatb45.x = (x_1946 < 0.0f);
  let x_1950 : bool = u_xlatb45.x;
  if (((select(0i, 1i, x_1950) * -1i) != 0i)) {
    discard;
  }
  let x_1960 : f32 = vs_INTERP2.w;
  u_xlatb45.x = (0.0f < x_1960);
  let x_1964 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb45.y = (x_1964 >= 0.0f);
  let x_1968 : bool = u_xlatb45.x;
  u_xlat45.x = select(-1.0f, 1.0f, x_1968);
  let x_1972 : bool = u_xlatb45.y;
  u_xlat45.y = select(-1.0f, 1.0f, x_1972);
  let x_1976 : f32 = u_xlat45.y;
  let x_1978 : f32 = u_xlat45.x;
  u_xlat45.x = (x_1976 * x_1978);
  let x_1981 : vec3<f32> = vs_INTERP1;
  let x_1983 : vec4<f32> = vs_INTERP2;
  let x_1985 : vec3<f32> = (vec3<f32>(x_1981.z, x_1981.x, x_1981.y) * vec3<f32>(x_1983.y, x_1983.z, x_1983.x));
  let x_1986 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1985.x, x_1985.y, x_1985.z, x_1986.w);
  let x_1988 : vec3<f32> = vs_INTERP1;
  let x_1990 : vec4<f32> = vs_INTERP2;
  let x_1993 : vec4<f32> = u_xlat3;
  let x_1996 : vec3<f32> = ((vec3<f32>(x_1988.y, x_1988.z, x_1988.x) * vec3<f32>(x_1990.z, x_1990.x, x_1990.y)) + -(vec3<f32>(x_1993.x, x_1993.y, x_1993.z)));
  let x_1997 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1997.w);
  let x_1999 : vec2<f32> = u_xlat45;
  let x_2001 : vec4<f32> = u_xlat3;
  let x_2003 : vec3<f32> = (vec3<f32>(x_1999.x, x_1999.x, x_1999.x) * vec3<f32>(x_2001.x, x_2001.y, x_2001.z));
  let x_2004 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2003.x, x_2003.y, x_2003.z, x_2004.w);
  let x_2006 : vec4<f32> = u_xlat3;
  let x_2008 : vec3<f32> = u_xlat27;
  let x_2010 : vec3<f32> = (vec3<f32>(x_2006.x, x_2006.y, x_2006.z) * vec3<f32>(x_2008.y, x_2008.y, x_2008.y));
  let x_2011 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2010.x, x_2010.y, x_2010.z, x_2011.w);
  let x_2013 : vec3<f32> = u_xlat27;
  let x_2015 : vec4<f32> = vs_INTERP2;
  let x_2018 : vec4<f32> = u_xlat3;
  let x_2020 : vec3<f32> = ((vec3<f32>(x_2013.x, x_2013.x, x_2013.x) * vec3<f32>(x_2015.x, x_2015.y, x_2015.z)) + vec3<f32>(x_2018.x, x_2018.y, x_2018.z));
  let x_2021 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2020.x, x_2020.y, x_2020.z, x_2021.w);
  let x_2023 : vec3<f32> = u_xlat27;
  let x_2025 : vec3<f32> = vs_INTERP1;
  let x_2027 : vec4<f32> = u_xlat3;
  let x_2029 : vec3<f32> = ((vec3<f32>(x_2023.z, x_2023.z, x_2023.z) * x_2025) + vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
  let x_2030 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2029.x, x_2029.y, x_2029.z, x_2030.w);
  let x_2032 : vec4<f32> = u_xlat3;
  let x_2034 : vec4<f32> = u_xlat3;
  u_xlat45.x = dot(vec3<f32>(x_2032.x, x_2032.y, x_2032.z), vec3<f32>(x_2034.x, x_2034.y, x_2034.z));
  let x_2039 : f32 = u_xlat45.x;
  u_xlat45.x = inverseSqrt(x_2039);
  let x_2042 : vec2<f32> = u_xlat45;
  let x_2044 : vec4<f32> = u_xlat3;
  let x_2046 : vec3<f32> = (vec3<f32>(x_2042.x, x_2042.x, x_2042.x) * vec3<f32>(x_2044.x, x_2044.y, x_2044.z));
  let x_2047 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2046.x, x_2046.y, x_2046.z, x_2047.w);
  u_xlat3.w = 1.0f;
  let x_2052 : vec4<f32> = x_161.unity_SHAr;
  let x_2053 : vec4<f32> = u_xlat3;
  u_xlat7.x = dot(x_2052, x_2053);
  let x_2058 : vec4<f32> = x_161.unity_SHAg;
  let x_2059 : vec4<f32> = u_xlat3;
  u_xlat7.y = dot(x_2058, x_2059);
  let x_2064 : vec4<f32> = x_161.unity_SHAb;
  let x_2065 : vec4<f32> = u_xlat3;
  u_xlat7.z = dot(x_2064, x_2065);
  let x_2068 : vec4<f32> = u_xlat3;
  let x_2070 : vec4<f32> = u_xlat3;
  u_xlat8 = (vec4<f32>(x_2068.y, x_2068.z, x_2068.z, x_2068.x) * vec4<f32>(x_2070.x, x_2070.y, x_2070.z, x_2070.z));
  let x_2075 : vec4<f32> = x_161.unity_SHBr;
  let x_2076 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_2075, x_2076);
  let x_2081 : vec4<f32> = x_161.unity_SHBg;
  let x_2082 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_2081, x_2082);
  let x_2086 : vec4<f32> = x_161.unity_SHBb;
  let x_2087 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_2086, x_2087);
  let x_2091 : f32 = u_xlat3.y;
  let x_2093 : f32 = u_xlat3.y;
  u_xlat45.x = (x_2091 * x_2093);
  let x_2097 : f32 = u_xlat3.x;
  let x_2099 : f32 = u_xlat3.x;
  let x_2102 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_2097 * x_2099) + -(x_2102));
  let x_2108 : vec4<f32> = x_161.unity_SHC;
  let x_2110 : vec2<f32> = u_xlat45;
  let x_2113 : vec4<f32> = u_xlat9;
  u_xlat27 = ((vec3<f32>(x_2108.x, x_2108.y, x_2108.z) * vec3<f32>(x_2110.x, x_2110.x, x_2110.x)) + vec3<f32>(x_2113.x, x_2113.y, x_2113.z));
  let x_2116 : vec3<f32> = u_xlat27;
  let x_2117 : vec4<f32> = u_xlat7;
  u_xlat27 = (x_2116 + vec3<f32>(x_2117.x, x_2117.y, x_2117.z));
  let x_2120 : vec3<f32> = u_xlat27;
  u_xlat27 = max(x_2120, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2123 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2124 : vec2<f32> = vec2<f32>(x_2123.x, x_2123.y);
  u_xlat45 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2124.x, x_2124.y));
  let x_2129 : vec2<f32> = u_xlat45;
  let x_2130 : vec4<f32> = hlslcc_FragCoord;
  let x_2132 : vec2<f32> = (x_2129 * vec2<f32>(x_2130.x, x_2130.y));
  let x_2133 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2132.x, x_2132.y, x_2133.z, x_2133.w);
  let x_2136 : f32 = u_xlat7.y;
  let x_2139 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2142 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat45.x = ((x_2136 * x_2139) + x_2142);
  let x_2146 : f32 = u_xlat45.x;
  u_xlat7.z = (-(x_2146) + 1.0f);
  let x_2151 : f32 = u_xlat5.x;
  u_xlat5.x = x_2151;
  let x_2154 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2154, 0.0f, 1.0f);
  let x_2158 : f32 = u_xlat1.x;
  u_xlat1.x = x_2158;
  let x_2161 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2161, 0.0f, 1.0f);
  let x_2164 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2164 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2169 : f32 = u_xlat5.x;
  u_xlat45.x = (-(x_2169) + 1.0f);
  let x_2174 : f32 = u_xlat45.x;
  let x_2176 : f32 = u_xlat45.x;
  u_xlat67 = (x_2174 * x_2176);
  let x_2178 : f32 = u_xlat67;
  u_xlat67 = max(x_2178, 0.0078125f);
  let x_2182 : f32 = u_xlat67;
  let x_2183 : f32 = u_xlat67;
  u_xlat69 = (x_2182 * x_2183);
  let x_2186 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2186 + 0.040000021f);
  let x_2191 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2191, 1.0f);
  let x_2194 : f32 = u_xlat67;
  u_xlat72 = ((x_2194 * 4.0f) + 2.0f);
  let x_2202 : vec4<f32> = u_xlat7;
  let x_2205 : f32 = x_90.x_GlobalMipBias.x;
  let x_2206 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2202.x, x_2202.z), x_2205);
  u_xlat7.x = x_2206.x;
  let x_2211 : f32 = u_xlat7.x;
  u_xlat29 = (x_2211 + -1.0f);
  let x_2214 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2215 : f32 = u_xlat29;
  u_xlat29 = ((x_2214 * x_2215) + 1.0f);
  let x_2219 : f32 = u_xlat7.x;
  let x_2221 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2219, x_2221);
  let x_2224 : bool = u_xlatb66;
  if (x_2224) {
    let x_2228 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2228 == 1.0f);
    let x_2230 : bool = u_xlatb66;
    if (x_2230) {
      let x_2233 : vec4<f32> = u_xlat6;
      let x_2236 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2233.x, x_2233.y, x_2233.x, x_2233.y) + x_2236);
      let x_2239 : vec4<f32> = u_xlat8;
      let x_2240 : vec2<f32> = vec2<f32>(x_2239.x, x_2239.y);
      let x_2242 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2240.x, x_2240.y, x_2242);
      let x_2249 : vec3<f32> = txVec30;
      let x_2251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2249.xy, x_2249.z);
      u_xlat9.x = x_2251;
      let x_2254 : vec4<f32> = u_xlat8;
      let x_2255 : vec2<f32> = vec2<f32>(x_2254.z, x_2254.w);
      let x_2257 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2255.x, x_2255.y, x_2257);
      let x_2264 : vec3<f32> = txVec31;
      let x_2266 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2264.xy, x_2264.z);
      u_xlat9.y = x_2266;
      let x_2268 : vec4<f32> = u_xlat6;
      let x_2271 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2268.x, x_2268.y, x_2268.x, x_2268.y) + x_2271);
      let x_2274 : vec4<f32> = u_xlat8;
      let x_2275 : vec2<f32> = vec2<f32>(x_2274.x, x_2274.y);
      let x_2277 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2275.x, x_2275.y, x_2277);
      let x_2284 : vec3<f32> = txVec32;
      let x_2286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2284.xy, x_2284.z);
      u_xlat9.z = x_2286;
      let x_2289 : vec4<f32> = u_xlat8;
      let x_2290 : vec2<f32> = vec2<f32>(x_2289.z, x_2289.w);
      let x_2292 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2290.x, x_2290.y, x_2292);
      let x_2299 : vec3<f32> = txVec33;
      let x_2301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2299.xy, x_2299.z);
      u_xlat9.w = x_2301;
      let x_2303 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2303, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2308 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb51 = (x_2308 == 2.0f);
      let x_2310 : bool = u_xlatb51;
      if (x_2310) {
        let x_2313 : vec4<f32> = u_xlat6;
        let x_2316 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2313.x, x_2313.y) * vec2<f32>(x_2316.z, x_2316.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2320 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2320);
        let x_2322 : vec4<f32> = u_xlat6;
        let x_2325 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2328 : vec2<f32> = u_xlat51;
        let x_2330 : vec2<f32> = ((vec2<f32>(x_2322.x, x_2322.y) * vec2<f32>(x_2325.z, x_2325.w)) + -(x_2328));
        let x_2331 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2330.x, x_2330.y, x_2331.z, x_2331.w);
        let x_2333 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2333.x, x_2333.x, x_2333.y, x_2333.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2336 : vec4<f32> = u_xlat9;
        let x_2338 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2336.x, x_2336.x, x_2336.z, x_2336.z) * vec4<f32>(x_2338.x, x_2338.x, x_2338.z, x_2338.z));
        let x_2342 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2342.y, x_2342.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2345 : vec4<f32> = u_xlat10;
        let x_2348 : vec4<f32> = u_xlat8;
        let x_2351 : vec2<f32> = ((vec2<f32>(x_2345.x, x_2345.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2348.x, x_2348.y)));
        let x_2352 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2351.x, x_2352.y, x_2351.y, x_2352.w);
        let x_2354 : vec4<f32> = u_xlat8;
        let x_2357 : vec2<f32> = (-(vec2<f32>(x_2354.x, x_2354.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2358 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2357.x, x_2357.y, x_2358.z, x_2358.w);
        let x_2360 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2360.x, x_2360.y), vec2<f32>(0.0f, 0.0f));
        let x_2363 : vec2<f32> = u_xlat54;
        let x_2365 : vec2<f32> = u_xlat54;
        let x_2367 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2363) * x_2365) + vec2<f32>(x_2367.x, x_2367.y));
        let x_2370 : vec4<f32> = u_xlat8;
        let x_2372 : vec2<f32> = max(vec2<f32>(x_2370.x, x_2370.y), vec2<f32>(0.0f, 0.0f));
        let x_2373 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2372.x, x_2372.y, x_2373.z, x_2373.w);
        let x_2375 : vec4<f32> = u_xlat8;
        let x_2378 : vec4<f32> = u_xlat8;
        let x_2381 : vec4<f32> = u_xlat9;
        let x_2383 : vec2<f32> = ((-(vec2<f32>(x_2375.x, x_2375.y)) * vec2<f32>(x_2378.x, x_2378.y)) + vec2<f32>(x_2381.y, x_2381.w));
        let x_2384 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2383.x, x_2383.y, x_2384.z, x_2384.w);
        let x_2386 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2386 + vec2<f32>(1.0f, 1.0f));
        let x_2388 : vec4<f32> = u_xlat8;
        let x_2390 : vec2<f32> = (vec2<f32>(x_2388.x, x_2388.y) + vec2<f32>(1.0f, 1.0f));
        let x_2391 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2390.x, x_2390.y, x_2391.z, x_2391.w);
        let x_2393 : vec4<f32> = u_xlat9;
        let x_2395 : vec2<f32> = (vec2<f32>(x_2393.x, x_2393.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2396 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2395.x, x_2395.y, x_2396.z, x_2396.w);
        let x_2398 : vec4<f32> = u_xlat10;
        let x_2400 : vec2<f32> = (vec2<f32>(x_2398.x, x_2398.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2401 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2400.x, x_2400.y, x_2401.z, x_2401.w);
        let x_2403 : vec2<f32> = u_xlat54;
        let x_2404 : vec2<f32> = (x_2403 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2405 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2404.x, x_2404.y, x_2405.z, x_2405.w);
        let x_2407 : vec4<f32> = u_xlat8;
        let x_2409 : vec2<f32> = (vec2<f32>(x_2407.x, x_2407.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2410 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2409.x, x_2409.y, x_2410.z, x_2410.w);
        let x_2412 : vec4<f32> = u_xlat9;
        let x_2414 : vec2<f32> = (vec2<f32>(x_2412.y, x_2412.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2415 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2414.x, x_2414.y, x_2415.z, x_2415.w);
        let x_2418 : f32 = u_xlat10.x;
        u_xlat11.z = x_2418;
        let x_2421 : f32 = u_xlat8.x;
        u_xlat11.w = x_2421;
        let x_2424 : f32 = u_xlat13.x;
        u_xlat12.z = x_2424;
        let x_2427 : f32 = u_xlat52.x;
        u_xlat12.w = x_2427;
        let x_2429 : vec4<f32> = u_xlat11;
        let x_2431 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2429.z, x_2429.w, x_2429.x, x_2429.z) + vec4<f32>(x_2431.z, x_2431.w, x_2431.x, x_2431.z));
        let x_2435 : f32 = u_xlat11.y;
        u_xlat10.z = x_2435;
        let x_2438 : f32 = u_xlat8.y;
        u_xlat10.w = x_2438;
        let x_2441 : f32 = u_xlat12.y;
        u_xlat13.z = x_2441;
        let x_2444 : f32 = u_xlat52.y;
        u_xlat13.w = x_2444;
        let x_2446 : vec4<f32> = u_xlat10;
        let x_2448 : vec4<f32> = u_xlat13;
        let x_2450 : vec3<f32> = (vec3<f32>(x_2446.z, x_2446.y, x_2446.w) + vec3<f32>(x_2448.z, x_2448.y, x_2448.w));
        let x_2451 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2450.x, x_2450.y, x_2450.z, x_2451.w);
        let x_2453 : vec4<f32> = u_xlat12;
        let x_2455 : vec4<f32> = u_xlat9;
        let x_2457 : vec3<f32> = (vec3<f32>(x_2453.x, x_2453.z, x_2453.w) / vec3<f32>(x_2455.z, x_2455.w, x_2455.y));
        let x_2458 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2457.x, x_2457.y, x_2457.z, x_2458.w);
        let x_2460 : vec4<f32> = u_xlat10;
        let x_2462 : vec3<f32> = (vec3<f32>(x_2460.x, x_2460.y, x_2460.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2463 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2462.x, x_2462.y, x_2462.z, x_2463.w);
        let x_2465 : vec4<f32> = u_xlat13;
        let x_2467 : vec4<f32> = u_xlat8;
        let x_2469 : vec3<f32> = (vec3<f32>(x_2465.z, x_2465.y, x_2465.w) / vec3<f32>(x_2467.x, x_2467.y, x_2467.z));
        let x_2470 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2469.x, x_2469.y, x_2469.z, x_2470.w);
        let x_2472 : vec4<f32> = u_xlat11;
        let x_2474 : vec3<f32> = (vec3<f32>(x_2472.x, x_2472.y, x_2472.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2475 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2474.x, x_2474.y, x_2474.z, x_2475.w);
        let x_2477 : vec4<f32> = u_xlat10;
        let x_2480 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2482 : vec3<f32> = (vec3<f32>(x_2477.y, x_2477.x, x_2477.z) * vec3<f32>(x_2480.x, x_2480.x, x_2480.x));
        let x_2483 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2482.x, x_2482.y, x_2482.z, x_2483.w);
        let x_2485 : vec4<f32> = u_xlat11;
        let x_2488 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2490 : vec3<f32> = (vec3<f32>(x_2485.x, x_2485.y, x_2485.z) * vec3<f32>(x_2488.y, x_2488.y, x_2488.y));
        let x_2491 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2490.x, x_2490.y, x_2490.z, x_2491.w);
        let x_2494 : f32 = u_xlat11.x;
        u_xlat10.w = x_2494;
        let x_2496 : vec2<f32> = u_xlat51;
        let x_2499 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2502 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2496.x, x_2496.y, x_2496.x, x_2496.y) * vec4<f32>(x_2499.x, x_2499.y, x_2499.x, x_2499.y)) + vec4<f32>(x_2502.y, x_2502.w, x_2502.x, x_2502.w));
        let x_2505 : vec2<f32> = u_xlat51;
        let x_2507 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2510 : vec4<f32> = u_xlat10;
        let x_2512 : vec2<f32> = ((x_2505 * vec2<f32>(x_2507.x, x_2507.y)) + vec2<f32>(x_2510.z, x_2510.w));
        let x_2513 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2512.x, x_2512.y, x_2513.z, x_2513.w);
        let x_2516 : f32 = u_xlat10.y;
        u_xlat11.w = x_2516;
        let x_2518 : vec4<f32> = u_xlat11;
        let x_2519 : vec2<f32> = vec2<f32>(x_2518.y, x_2518.z);
        let x_2520 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2520.x, x_2519.x, x_2520.z, x_2519.y);
        let x_2522 : vec2<f32> = u_xlat51;
        let x_2525 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2528 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2522.x, x_2522.y, x_2522.x, x_2522.y) * vec4<f32>(x_2525.x, x_2525.y, x_2525.x, x_2525.y)) + vec4<f32>(x_2528.x, x_2528.y, x_2528.z, x_2528.y));
        let x_2531 : vec2<f32> = u_xlat51;
        let x_2534 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2537 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2531.x, x_2531.y, x_2531.x, x_2531.y) * vec4<f32>(x_2534.x, x_2534.y, x_2534.x, x_2534.y)) + vec4<f32>(x_2537.w, x_2537.y, x_2537.w, x_2537.z));
        let x_2540 : vec2<f32> = u_xlat51;
        let x_2543 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2546 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2540.x, x_2540.y, x_2540.x, x_2540.y) * vec4<f32>(x_2543.x, x_2543.y, x_2543.x, x_2543.y)) + vec4<f32>(x_2546.x, x_2546.w, x_2546.z, x_2546.w));
        let x_2549 : vec4<f32> = u_xlat8;
        let x_2551 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2549.x, x_2549.x, x_2549.x, x_2549.y) * vec4<f32>(x_2551.z, x_2551.w, x_2551.y, x_2551.z));
        let x_2554 : vec4<f32> = u_xlat8;
        let x_2556 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2554.y, x_2554.y, x_2554.z, x_2554.z) * x_2556);
        let x_2559 : f32 = u_xlat8.z;
        let x_2561 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2559 * x_2561);
        let x_2565 : vec4<f32> = u_xlat12;
        let x_2566 : vec2<f32> = vec2<f32>(x_2565.x, x_2565.y);
        let x_2568 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2566.x, x_2566.y, x_2568);
        let x_2576 : vec3<f32> = txVec34;
        let x_2578 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2576.xy, x_2576.z);
        u_xlat73 = x_2578;
        let x_2580 : vec4<f32> = u_xlat12;
        let x_2581 : vec2<f32> = vec2<f32>(x_2580.z, x_2580.w);
        let x_2583 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2581.x, x_2581.y, x_2583);
        let x_2590 : vec3<f32> = txVec35;
        let x_2592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2590.xy, x_2590.z);
        u_xlat8.x = x_2592;
        let x_2595 : f32 = u_xlat8.x;
        let x_2597 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2595 * x_2597);
        let x_2601 : f32 = u_xlat15.x;
        let x_2602 : f32 = u_xlat73;
        let x_2605 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2601 * x_2602) + x_2605);
        let x_2608 : vec4<f32> = u_xlat13;
        let x_2609 : vec2<f32> = vec2<f32>(x_2608.x, x_2608.y);
        let x_2611 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2609.x, x_2609.y, x_2611);
        let x_2618 : vec3<f32> = txVec36;
        let x_2620 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2618.xy, x_2618.z);
        u_xlat8.x = x_2620;
        let x_2623 : f32 = u_xlat15.z;
        let x_2625 : f32 = u_xlat8.x;
        let x_2627 : f32 = u_xlat73;
        u_xlat73 = ((x_2623 * x_2625) + x_2627);
        let x_2630 : vec4<f32> = u_xlat11;
        let x_2631 : vec2<f32> = vec2<f32>(x_2630.x, x_2630.y);
        let x_2633 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2631.x, x_2631.y, x_2633);
        let x_2640 : vec3<f32> = txVec37;
        let x_2642 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2640.xy, x_2640.z);
        u_xlat8.x = x_2642;
        let x_2645 : f32 = u_xlat15.w;
        let x_2647 : f32 = u_xlat8.x;
        let x_2649 : f32 = u_xlat73;
        u_xlat73 = ((x_2645 * x_2647) + x_2649);
        let x_2652 : vec4<f32> = u_xlat14;
        let x_2653 : vec2<f32> = vec2<f32>(x_2652.x, x_2652.y);
        let x_2655 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2653.x, x_2653.y, x_2655);
        let x_2662 : vec3<f32> = txVec38;
        let x_2664 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2662.xy, x_2662.z);
        u_xlat8.x = x_2664;
        let x_2667 : f32 = u_xlat16.x;
        let x_2669 : f32 = u_xlat8.x;
        let x_2671 : f32 = u_xlat73;
        u_xlat73 = ((x_2667 * x_2669) + x_2671);
        let x_2674 : vec4<f32> = u_xlat14;
        let x_2675 : vec2<f32> = vec2<f32>(x_2674.z, x_2674.w);
        let x_2677 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2675.x, x_2675.y, x_2677);
        let x_2684 : vec3<f32> = txVec39;
        let x_2686 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2684.xy, x_2684.z);
        u_xlat8.x = x_2686;
        let x_2689 : f32 = u_xlat16.y;
        let x_2691 : f32 = u_xlat8.x;
        let x_2693 : f32 = u_xlat73;
        u_xlat73 = ((x_2689 * x_2691) + x_2693);
        let x_2696 : vec4<f32> = u_xlat11;
        let x_2697 : vec2<f32> = vec2<f32>(x_2696.z, x_2696.w);
        let x_2699 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2697.x, x_2697.y, x_2699);
        let x_2706 : vec3<f32> = txVec40;
        let x_2708 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2706.xy, x_2706.z);
        u_xlat8.x = x_2708;
        let x_2711 : f32 = u_xlat16.z;
        let x_2713 : f32 = u_xlat8.x;
        let x_2715 : f32 = u_xlat73;
        u_xlat73 = ((x_2711 * x_2713) + x_2715);
        let x_2718 : vec4<f32> = u_xlat10;
        let x_2719 : vec2<f32> = vec2<f32>(x_2718.x, x_2718.y);
        let x_2721 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2719.x, x_2719.y, x_2721);
        let x_2728 : vec3<f32> = txVec41;
        let x_2730 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2728.xy, x_2728.z);
        u_xlat8.x = x_2730;
        let x_2733 : f32 = u_xlat16.w;
        let x_2735 : f32 = u_xlat8.x;
        let x_2737 : f32 = u_xlat73;
        u_xlat73 = ((x_2733 * x_2735) + x_2737);
        let x_2740 : vec4<f32> = u_xlat10;
        let x_2741 : vec2<f32> = vec2<f32>(x_2740.z, x_2740.w);
        let x_2743 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2741.x, x_2741.y, x_2743);
        let x_2750 : vec3<f32> = txVec42;
        let x_2752 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2750.xy, x_2750.z);
        u_xlat8.x = x_2752;
        let x_2755 : f32 = u_xlat51.x;
        let x_2757 : f32 = u_xlat8.x;
        let x_2759 : f32 = u_xlat73;
        u_xlat66 = ((x_2755 * x_2757) + x_2759);
      } else {
        let x_2762 : vec4<f32> = u_xlat6;
        let x_2765 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2762.x, x_2762.y) * vec2<f32>(x_2765.z, x_2765.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2769 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2769);
        let x_2771 : vec4<f32> = u_xlat6;
        let x_2774 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2777 : vec2<f32> = u_xlat51;
        let x_2779 : vec2<f32> = ((vec2<f32>(x_2771.x, x_2771.y) * vec2<f32>(x_2774.z, x_2774.w)) + -(x_2777));
        let x_2780 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2779.x, x_2779.y, x_2780.z, x_2780.w);
        let x_2782 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2782.x, x_2782.x, x_2782.y, x_2782.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2785 : vec4<f32> = u_xlat9;
        let x_2787 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2785.x, x_2785.x, x_2785.z, x_2785.z) * vec4<f32>(x_2787.x, x_2787.x, x_2787.z, x_2787.z));
        let x_2790 : vec4<f32> = u_xlat10;
        let x_2792 : vec2<f32> = (vec2<f32>(x_2790.y, x_2790.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2793 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2793.x, x_2792.x, x_2793.z, x_2792.y);
        let x_2795 : vec4<f32> = u_xlat10;
        let x_2798 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2795.x, x_2795.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2798.x, x_2798.y)));
        let x_2802 : vec4<f32> = u_xlat8;
        let x_2805 : vec2<f32> = (-(vec2<f32>(x_2802.x, x_2802.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2806 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2805.x, x_2806.y, x_2805.y, x_2806.w);
        let x_2808 : vec4<f32> = u_xlat8;
        let x_2810 : vec2<f32> = min(vec2<f32>(x_2808.x, x_2808.y), vec2<f32>(0.0f, 0.0f));
        let x_2811 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2810.x, x_2810.y, x_2811.z, x_2811.w);
        let x_2813 : vec4<f32> = u_xlat10;
        let x_2816 : vec4<f32> = u_xlat10;
        let x_2819 : vec4<f32> = u_xlat9;
        let x_2821 : vec2<f32> = ((-(vec2<f32>(x_2813.x, x_2813.y)) * vec2<f32>(x_2816.x, x_2816.y)) + vec2<f32>(x_2819.x, x_2819.z));
        let x_2822 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2821.x, x_2822.y, x_2821.y, x_2822.w);
        let x_2824 : vec4<f32> = u_xlat8;
        let x_2826 : vec2<f32> = max(vec2<f32>(x_2824.x, x_2824.y), vec2<f32>(0.0f, 0.0f));
        let x_2827 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2826.x, x_2826.y, x_2827.z, x_2827.w);
        let x_2829 : vec4<f32> = u_xlat10;
        let x_2832 : vec4<f32> = u_xlat10;
        let x_2835 : vec4<f32> = u_xlat9;
        let x_2837 : vec2<f32> = ((-(vec2<f32>(x_2829.x, x_2829.y)) * vec2<f32>(x_2832.x, x_2832.y)) + vec2<f32>(x_2835.y, x_2835.w));
        let x_2838 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2838.x, x_2837.x, x_2838.z, x_2837.y);
        let x_2840 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2840 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2843 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2843 * 0.081632003f);
        let x_2846 : vec2<f32> = u_xlat52;
        let x_2848 : vec2<f32> = (vec2<f32>(x_2846.y, x_2846.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2849 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2848.x, x_2848.y, x_2849.z, x_2849.w);
        let x_2851 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2851.x, x_2851.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2855 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2855 * 0.081632003f);
        let x_2859 : f32 = u_xlat12.y;
        u_xlat10.x = x_2859;
        let x_2861 : vec4<f32> = u_xlat8;
        let x_2864 : vec2<f32> = ((vec2<f32>(x_2861.x, x_2861.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2865 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2865.x, x_2864.x, x_2865.z, x_2864.y);
        let x_2867 : vec4<f32> = u_xlat8;
        let x_2870 : vec2<f32> = ((vec2<f32>(x_2867.x, x_2867.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2871 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2870.x, x_2871.y, x_2870.y, x_2871.w);
        let x_2874 : f32 = u_xlat52.x;
        u_xlat9.y = x_2874;
        let x_2877 : f32 = u_xlat11.y;
        u_xlat9.w = x_2877;
        let x_2879 : vec4<f32> = u_xlat9;
        let x_2880 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2879 + x_2880);
        let x_2882 : vec4<f32> = u_xlat8;
        let x_2885 : vec2<f32> = ((vec2<f32>(x_2882.y, x_2882.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2886 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2886.x, x_2885.x, x_2886.z, x_2885.y);
        let x_2888 : vec4<f32> = u_xlat8;
        let x_2891 : vec2<f32> = ((vec2<f32>(x_2888.y, x_2888.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2892 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2891.x, x_2892.y, x_2891.y, x_2892.w);
        let x_2895 : f32 = u_xlat52.y;
        u_xlat11.y = x_2895;
        let x_2897 : vec4<f32> = u_xlat11;
        let x_2898 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2897 + x_2898);
        let x_2900 : vec4<f32> = u_xlat9;
        let x_2901 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2900 / x_2901);
        let x_2903 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2903 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2905 : vec4<f32> = u_xlat11;
        let x_2906 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2905 / x_2906);
        let x_2908 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2908 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2910 : vec4<f32> = u_xlat9;
        let x_2913 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2910.w, x_2910.x, x_2910.y, x_2910.z) * vec4<f32>(x_2913.x, x_2913.x, x_2913.x, x_2913.x));
        let x_2916 : vec4<f32> = u_xlat11;
        let x_2919 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2916.x, x_2916.w, x_2916.y, x_2916.z) * vec4<f32>(x_2919.y, x_2919.y, x_2919.y, x_2919.y));
        let x_2922 : vec4<f32> = u_xlat9;
        let x_2923 : vec3<f32> = vec3<f32>(x_2922.y, x_2922.z, x_2922.w);
        let x_2924 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2923.x, x_2924.y, x_2923.y, x_2923.z);
        let x_2927 : f32 = u_xlat11.x;
        u_xlat12.y = x_2927;
        let x_2929 : vec2<f32> = u_xlat51;
        let x_2932 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2935 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2929.x, x_2929.y, x_2929.x, x_2929.y) * vec4<f32>(x_2932.x, x_2932.y, x_2932.x, x_2932.y)) + vec4<f32>(x_2935.x, x_2935.y, x_2935.z, x_2935.y));
        let x_2938 : vec2<f32> = u_xlat51;
        let x_2940 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2943 : vec4<f32> = u_xlat12;
        let x_2945 : vec2<f32> = ((x_2938 * vec2<f32>(x_2940.x, x_2940.y)) + vec2<f32>(x_2943.w, x_2943.y));
        let x_2946 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2945.x, x_2945.y, x_2946.z, x_2946.w);
        let x_2949 : f32 = u_xlat12.y;
        u_xlat9.y = x_2949;
        let x_2952 : f32 = u_xlat11.z;
        u_xlat12.y = x_2952;
        let x_2954 : vec2<f32> = u_xlat51;
        let x_2957 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2960 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2954.x, x_2954.y, x_2954.x, x_2954.y) * vec4<f32>(x_2957.x, x_2957.y, x_2957.x, x_2957.y)) + vec4<f32>(x_2960.x, x_2960.y, x_2960.z, x_2960.y));
        let x_2964 : vec2<f32> = u_xlat51;
        let x_2966 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2969 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2964 * vec2<f32>(x_2966.x, x_2966.y)) + vec2<f32>(x_2969.w, x_2969.y));
        let x_2973 : f32 = u_xlat12.y;
        u_xlat9.z = x_2973;
        let x_2975 : vec2<f32> = u_xlat51;
        let x_2978 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2981 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2975.x, x_2975.y, x_2975.x, x_2975.y) * vec4<f32>(x_2978.x, x_2978.y, x_2978.x, x_2978.y)) + vec4<f32>(x_2981.x, x_2981.y, x_2981.x, x_2981.z));
        let x_2985 : f32 = u_xlat11.w;
        u_xlat12.y = x_2985;
        let x_2987 : vec2<f32> = u_xlat51;
        let x_2990 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2993 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2987.x, x_2987.y, x_2987.x, x_2987.y) * vec4<f32>(x_2990.x, x_2990.y, x_2990.x, x_2990.y)) + vec4<f32>(x_2993.x, x_2993.y, x_2993.z, x_2993.y));
        let x_2996 : vec2<f32> = u_xlat51;
        let x_2998 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3001 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2996 * vec2<f32>(x_2998.x, x_2998.y)) + vec2<f32>(x_3001.w, x_3001.y));
        let x_3005 : f32 = u_xlat12.y;
        u_xlat9.w = x_3005;
        let x_3007 : vec2<f32> = u_xlat51;
        let x_3009 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3012 : vec4<f32> = u_xlat9;
        let x_3014 : vec2<f32> = ((x_3007 * vec2<f32>(x_3009.x, x_3009.y)) + vec2<f32>(x_3012.x, x_3012.w));
        let x_3015 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_3014.x, x_3014.y, x_3015.z, x_3015.w);
        let x_3017 : vec4<f32> = u_xlat12;
        let x_3018 : vec3<f32> = vec3<f32>(x_3017.x, x_3017.z, x_3017.w);
        let x_3019 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3018.x, x_3019.y, x_3018.y, x_3018.z);
        let x_3021 : vec2<f32> = u_xlat51;
        let x_3024 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3027 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_3021.x, x_3021.y, x_3021.x, x_3021.y) * vec4<f32>(x_3024.x, x_3024.y, x_3024.x, x_3024.y)) + vec4<f32>(x_3027.x, x_3027.y, x_3027.z, x_3027.y));
        let x_3031 : vec2<f32> = u_xlat51;
        let x_3033 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3036 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_3031 * vec2<f32>(x_3033.x, x_3033.y)) + vec2<f32>(x_3036.w, x_3036.y));
        let x_3040 : f32 = u_xlat9.x;
        u_xlat11.x = x_3040;
        let x_3042 : vec2<f32> = u_xlat51;
        let x_3044 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3047 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_3042 * vec2<f32>(x_3044.x, x_3044.y)) + vec2<f32>(x_3047.x, x_3047.y));
        let x_3050 : vec4<f32> = u_xlat8;
        let x_3052 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_3050.x, x_3050.x, x_3050.x, x_3050.x) * x_3052);
        let x_3054 : vec4<f32> = u_xlat8;
        let x_3056 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_3054.y, x_3054.y, x_3054.y, x_3054.y) * x_3056);
        let x_3059 : vec4<f32> = u_xlat8;
        let x_3061 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_3059.z, x_3059.z, x_3059.z, x_3059.z) * x_3061);
        let x_3063 : vec4<f32> = u_xlat8;
        let x_3065 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_3063.w, x_3063.w, x_3063.w, x_3063.w) * x_3065);
        let x_3068 : vec4<f32> = u_xlat13;
        let x_3069 : vec2<f32> = vec2<f32>(x_3068.x, x_3068.y);
        let x_3071 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3069.x, x_3069.y, x_3071);
        let x_3078 : vec3<f32> = txVec43;
        let x_3080 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3078.xy, x_3078.z);
        u_xlat9.x = x_3080;
        let x_3083 : vec4<f32> = u_xlat13;
        let x_3084 : vec2<f32> = vec2<f32>(x_3083.z, x_3083.w);
        let x_3086 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3084.x, x_3084.y, x_3086);
        let x_3094 : vec3<f32> = txVec44;
        let x_3096 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3094.xy, x_3094.z);
        u_xlat75 = x_3096;
        let x_3097 : f32 = u_xlat75;
        let x_3099 : f32 = u_xlat19.y;
        u_xlat75 = (x_3097 * x_3099);
        let x_3102 : f32 = u_xlat19.x;
        let x_3104 : f32 = u_xlat9.x;
        let x_3106 : f32 = u_xlat75;
        u_xlat9.x = ((x_3102 * x_3104) + x_3106);
        let x_3110 : vec4<f32> = u_xlat14;
        let x_3111 : vec2<f32> = vec2<f32>(x_3110.x, x_3110.y);
        let x_3113 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3111.x, x_3111.y, x_3113);
        let x_3120 : vec3<f32> = txVec45;
        let x_3122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3120.xy, x_3120.z);
        u_xlat75 = x_3122;
        let x_3124 : f32 = u_xlat19.z;
        let x_3125 : f32 = u_xlat75;
        let x_3128 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3124 * x_3125) + x_3128);
        let x_3132 : vec4<f32> = u_xlat16;
        let x_3133 : vec2<f32> = vec2<f32>(x_3132.x, x_3132.y);
        let x_3135 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3133.x, x_3133.y, x_3135);
        let x_3142 : vec3<f32> = txVec46;
        let x_3144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3142.xy, x_3142.z);
        u_xlat75 = x_3144;
        let x_3146 : f32 = u_xlat19.w;
        let x_3147 : f32 = u_xlat75;
        let x_3150 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3146 * x_3147) + x_3150);
        let x_3154 : vec4<f32> = u_xlat15;
        let x_3155 : vec2<f32> = vec2<f32>(x_3154.x, x_3154.y);
        let x_3157 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3155.x, x_3155.y, x_3157);
        let x_3164 : vec3<f32> = txVec47;
        let x_3166 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3164.xy, x_3164.z);
        u_xlat75 = x_3166;
        let x_3168 : f32 = u_xlat20.x;
        let x_3169 : f32 = u_xlat75;
        let x_3172 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3168 * x_3169) + x_3172);
        let x_3176 : vec4<f32> = u_xlat15;
        let x_3177 : vec2<f32> = vec2<f32>(x_3176.z, x_3176.w);
        let x_3179 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3177.x, x_3177.y, x_3179);
        let x_3186 : vec3<f32> = txVec48;
        let x_3188 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3186.xy, x_3186.z);
        u_xlat75 = x_3188;
        let x_3190 : f32 = u_xlat20.y;
        let x_3191 : f32 = u_xlat75;
        let x_3194 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3190 * x_3191) + x_3194);
        let x_3198 : vec2<f32> = u_xlat58;
        let x_3200 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3198.x, x_3198.y, x_3200);
        let x_3207 : vec3<f32> = txVec49;
        let x_3209 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3207.xy, x_3207.z);
        u_xlat75 = x_3209;
        let x_3211 : f32 = u_xlat20.z;
        let x_3212 : f32 = u_xlat75;
        let x_3215 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3211 * x_3212) + x_3215);
        let x_3219 : vec4<f32> = u_xlat16;
        let x_3220 : vec2<f32> = vec2<f32>(x_3219.z, x_3219.w);
        let x_3222 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3220.x, x_3220.y, x_3222);
        let x_3229 : vec3<f32> = txVec50;
        let x_3231 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3229.xy, x_3229.z);
        u_xlat75 = x_3231;
        let x_3233 : f32 = u_xlat20.w;
        let x_3234 : f32 = u_xlat75;
        let x_3237 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3233 * x_3234) + x_3237);
        let x_3241 : vec4<f32> = u_xlat17;
        let x_3242 : vec2<f32> = vec2<f32>(x_3241.x, x_3241.y);
        let x_3244 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3242.x, x_3242.y, x_3244);
        let x_3251 : vec3<f32> = txVec51;
        let x_3253 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3251.xy, x_3251.z);
        u_xlat75 = x_3253;
        let x_3255 : f32 = u_xlat21.x;
        let x_3256 : f32 = u_xlat75;
        let x_3259 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3255 * x_3256) + x_3259);
        let x_3263 : vec4<f32> = u_xlat17;
        let x_3264 : vec2<f32> = vec2<f32>(x_3263.z, x_3263.w);
        let x_3266 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3264.x, x_3264.y, x_3266);
        let x_3273 : vec3<f32> = txVec52;
        let x_3275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3273.xy, x_3273.z);
        u_xlat75 = x_3275;
        let x_3277 : f32 = u_xlat21.y;
        let x_3278 : f32 = u_xlat75;
        let x_3281 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3277 * x_3278) + x_3281);
        let x_3285 : vec2<f32> = u_xlat31;
        let x_3287 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3285.x, x_3285.y, x_3287);
        let x_3294 : vec3<f32> = txVec53;
        let x_3296 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3294.xy, x_3294.z);
        u_xlat31.x = x_3296;
        let x_3299 : f32 = u_xlat21.z;
        let x_3301 : f32 = u_xlat31.x;
        let x_3304 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3299 * x_3301) + x_3304);
        let x_3308 : vec4<f32> = u_xlat18;
        let x_3309 : vec2<f32> = vec2<f32>(x_3308.x, x_3308.y);
        let x_3311 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3309.x, x_3309.y, x_3311);
        let x_3318 : vec3<f32> = txVec54;
        let x_3320 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3318.xy, x_3318.z);
        u_xlat31.x = x_3320;
        let x_3323 : f32 = u_xlat21.w;
        let x_3325 : f32 = u_xlat31.x;
        let x_3328 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3323 * x_3325) + x_3328);
        let x_3332 : vec4<f32> = u_xlat12;
        let x_3333 : vec2<f32> = vec2<f32>(x_3332.x, x_3332.y);
        let x_3335 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3333.x, x_3333.y, x_3335);
        let x_3342 : vec3<f32> = txVec55;
        let x_3344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3342.xy, x_3342.z);
        u_xlat31.x = x_3344;
        let x_3347 : f32 = u_xlat8.x;
        let x_3349 : f32 = u_xlat31.x;
        let x_3352 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3347 * x_3349) + x_3352);
        let x_3356 : vec4<f32> = u_xlat12;
        let x_3357 : vec2<f32> = vec2<f32>(x_3356.z, x_3356.w);
        let x_3359 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3357.x, x_3357.y, x_3359);
        let x_3366 : vec3<f32> = txVec56;
        let x_3368 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3366.xy, x_3366.z);
        u_xlat9.x = x_3368;
        let x_3371 : f32 = u_xlat8.y;
        let x_3373 : f32 = u_xlat9.x;
        let x_3376 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3371 * x_3373) + x_3376);
        let x_3380 : vec2<f32> = u_xlat55;
        let x_3382 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3380.x, x_3380.y, x_3382);
        let x_3389 : vec3<f32> = txVec57;
        let x_3391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3389.xy, x_3389.z);
        u_xlat30.x = x_3391;
        let x_3394 : f32 = u_xlat8.z;
        let x_3396 : f32 = u_xlat30.x;
        let x_3399 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3394 * x_3396) + x_3399);
        let x_3403 : vec2<f32> = u_xlat51;
        let x_3405 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3403.x, x_3403.y, x_3405);
        let x_3412 : vec3<f32> = txVec58;
        let x_3414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3412.xy, x_3412.z);
        u_xlat51.x = x_3414;
        let x_3417 : f32 = u_xlat8.w;
        let x_3419 : f32 = u_xlat51.x;
        let x_3422 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3417 * x_3419) + x_3422);
      }
    }
  } else {
    let x_3426 : vec4<f32> = u_xlat6;
    let x_3427 : vec2<f32> = vec2<f32>(x_3426.x, x_3426.y);
    let x_3429 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3427.x, x_3427.y, x_3429);
    let x_3436 : vec3<f32> = txVec59;
    let x_3438 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3436.xy, x_3436.z);
    u_xlat66 = x_3438;
  }
  let x_3439 : f32 = u_xlat66;
  let x_3441 : f32 = x_271.x_MainLightShadowParams.x;
  let x_3443 : f32 = u_xlat68;
  u_xlat66 = ((x_3439 * x_3441) + x_3443);
  let x_3445 : bool = u_xlatb70;
  let x_3446 : f32 = u_xlat66;
  u_xlat66 = select(x_3446, 1.0f, x_3445);
  let x_3448 : vec3<f32> = vs_INTERP0;
  let x_3450 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3452 : vec3<f32> = (x_3448 + -(x_3450));
  let x_3453 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3452.x, x_3452.y, x_3452.z, x_3453.w);
  let x_3455 : vec4<f32> = u_xlat6;
  let x_3457 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3455.x, x_3455.y, x_3455.z), vec3<f32>(x_3457.x, x_3457.y, x_3457.z));
  let x_3460 : f32 = u_xlat68;
  let x_3462 : f32 = x_271.x_MainLightShadowParams.z;
  let x_3465 : f32 = x_271.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3460 * x_3462) + x_3465);
  let x_3467 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3467, 0.0f, 1.0f);
  let x_3469 : f32 = u_xlat66;
  u_xlat70 = (-(x_3469) + 1.0f);
  let x_3472 : f32 = u_xlat68;
  let x_3473 : f32 = u_xlat70;
  let x_3475 : f32 = u_xlat66;
  u_xlat66 = ((x_3472 * x_3473) + x_3475);
  let x_3477 : f32 = u_xlat29;
  let x_3480 : vec4<f32> = x_90.x_MainLightColor;
  let x_3482 : vec3<f32> = (vec3<f32>(x_3477, x_3477, x_3477) * vec3<f32>(x_3480.x, x_3480.y, x_3480.z));
  let x_3483 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3482.x, x_3482.y, x_3482.z, x_3483.w);
  let x_3485 : vec3<f32> = u_xlat2;
  let x_3487 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3485), vec3<f32>(x_3487.x, x_3487.y, x_3487.z));
  let x_3490 : f32 = u_xlat68;
  let x_3491 : f32 = u_xlat68;
  u_xlat68 = (x_3490 + x_3491);
  let x_3493 : vec4<f32> = u_xlat3;
  let x_3495 : f32 = u_xlat68;
  let x_3499 : vec3<f32> = u_xlat2;
  let x_3501 : vec3<f32> = ((vec3<f32>(x_3493.x, x_3493.y, x_3493.z) * -(vec3<f32>(x_3495, x_3495, x_3495))) + -(x_3499));
  let x_3502 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3501.x, x_3501.y, x_3501.z, x_3502.w);
  let x_3504 : vec4<f32> = u_xlat3;
  let x_3506 : vec3<f32> = u_xlat2;
  u_xlat68 = dot(vec3<f32>(x_3504.x, x_3504.y, x_3504.z), x_3506);
  let x_3508 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3508, 0.0f, 1.0f);
  let x_3510 : f32 = u_xlat68;
  u_xlat68 = (-(x_3510) + 1.0f);
  let x_3513 : f32 = u_xlat68;
  let x_3514 : f32 = u_xlat68;
  u_xlat68 = (x_3513 * x_3514);
  let x_3516 : f32 = u_xlat68;
  let x_3517 : f32 = u_xlat68;
  u_xlat68 = (x_3516 * x_3517);
  let x_3520 : f32 = u_xlat45.x;
  u_xlat70 = ((-(x_3520) * 0.699999988f) + 1.700000048f);
  let x_3527 : f32 = u_xlat45.x;
  let x_3528 : f32 = u_xlat70;
  u_xlat45.x = (x_3527 * x_3528);
  let x_3532 : f32 = u_xlat45.x;
  u_xlat45.x = (x_3532 * 6.0f);
  let x_3544 : vec4<f32> = u_xlat8;
  let x_3547 : f32 = u_xlat45.x;
  let x_3548 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3544.x, x_3544.y, x_3544.z), x_3547);
  u_xlat8 = x_3548;
  let x_3550 : f32 = u_xlat8.w;
  u_xlat45.x = (x_3550 + -1.0f);
  let x_3554 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3556 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_3554 * x_3556) + 1.0f);
  let x_3561 : f32 = u_xlat45.x;
  u_xlat45.x = max(x_3561, 0.0f);
  let x_3565 : f32 = u_xlat45.x;
  u_xlat45.x = log2(x_3565);
  let x_3569 : f32 = u_xlat45.x;
  let x_3571 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat45.x = (x_3569 * x_3571);
  let x_3575 : f32 = u_xlat45.x;
  u_xlat45.x = exp2(x_3575);
  let x_3579 : f32 = u_xlat45.x;
  let x_3581 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat45.x = (x_3579 * x_3581);
  let x_3584 : vec4<f32> = u_xlat8;
  let x_3586 : vec2<f32> = u_xlat45;
  let x_3588 : vec3<f32> = (vec3<f32>(x_3584.x, x_3584.y, x_3584.z) * vec3<f32>(x_3586.x, x_3586.x, x_3586.x));
  let x_3589 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3588.x, x_3588.y, x_3588.z, x_3589.w);
  let x_3591 : f32 = u_xlat67;
  let x_3593 : f32 = u_xlat67;
  u_xlat45 = ((vec2<f32>(x_3591, x_3591) * vec2<f32>(x_3593, x_3593)) + vec2<f32>(-1.0f, 1.0f));
  let x_3599 : f32 = u_xlat45.y;
  u_xlat67 = (1.0f / x_3599);
  let x_3602 : f32 = u_xlat5.x;
  u_xlat70 = (x_3602 + -0.039999999f);
  let x_3605 : f32 = u_xlat68;
  let x_3606 : f32 = u_xlat70;
  u_xlat68 = ((x_3605 * x_3606) + 0.039999999f);
  let x_3610 : f32 = u_xlat67;
  let x_3611 : f32 = u_xlat68;
  u_xlat67 = (x_3610 * x_3611);
  let x_3613 : f32 = u_xlat67;
  let x_3615 : vec4<f32> = u_xlat8;
  let x_3617 : vec3<f32> = (vec3<f32>(x_3613, x_3613, x_3613) * vec3<f32>(x_3615.x, x_3615.y, x_3615.z));
  let x_3618 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3617.x, x_3617.y, x_3617.z, x_3618.w);
  let x_3620 : vec3<f32> = u_xlat27;
  let x_3621 : vec3<f32> = u_xlat4;
  let x_3623 : vec4<f32> = u_xlat8;
  let x_3625 : vec3<f32> = ((x_3620 * x_3621) + vec3<f32>(x_3623.x, x_3623.y, x_3623.z));
  let x_3626 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3625.x, x_3625.y, x_3625.z, x_3626.w);
  let x_3628 : f32 = u_xlat66;
  let x_3630 : f32 = x_161.unity_LightData.z;
  u_xlat66 = (x_3628 * x_3630);
  let x_3632 : vec4<f32> = u_xlat3;
  let x_3635 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3632.x, x_3632.y, x_3632.z), vec3<f32>(x_3635.x, x_3635.y, x_3635.z));
  let x_3638 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3638, 0.0f, 1.0f);
  let x_3640 : f32 = u_xlat66;
  let x_3641 : f32 = u_xlat67;
  u_xlat66 = (x_3640 * x_3641);
  let x_3643 : f32 = u_xlat66;
  let x_3645 : vec4<f32> = u_xlat6;
  let x_3647 : vec3<f32> = (vec3<f32>(x_3643, x_3643, x_3643) * vec3<f32>(x_3645.x, x_3645.y, x_3645.z));
  let x_3648 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3647.x, x_3647.y, x_3647.z, x_3648.w);
  let x_3650 : vec3<f32> = u_xlat2;
  let x_3652 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3654 : vec3<f32> = (x_3650 + vec3<f32>(x_3652.x, x_3652.y, x_3652.z));
  let x_3655 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3654.x, x_3654.y, x_3654.z, x_3655.w);
  let x_3657 : vec4<f32> = u_xlat8;
  let x_3659 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3657.x, x_3657.y, x_3657.z), vec3<f32>(x_3659.x, x_3659.y, x_3659.z));
  let x_3662 : f32 = u_xlat66;
  u_xlat66 = max(x_3662, 1.17549435e-37f);
  let x_3665 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3665);
  let x_3667 : f32 = u_xlat66;
  let x_3669 : vec4<f32> = u_xlat8;
  let x_3671 : vec3<f32> = (vec3<f32>(x_3667, x_3667, x_3667) * vec3<f32>(x_3669.x, x_3669.y, x_3669.z));
  let x_3672 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3671.x, x_3671.y, x_3671.z, x_3672.w);
  let x_3674 : vec4<f32> = u_xlat3;
  let x_3676 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3674.x, x_3674.y, x_3674.z), vec3<f32>(x_3676.x, x_3676.y, x_3676.z));
  let x_3679 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3679, 0.0f, 1.0f);
  let x_3682 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3684 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3682.x, x_3682.y, x_3682.z), vec3<f32>(x_3684.x, x_3684.y, x_3684.z));
  let x_3687 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3687, 0.0f, 1.0f);
  let x_3689 : f32 = u_xlat66;
  let x_3690 : f32 = u_xlat66;
  u_xlat66 = (x_3689 * x_3690);
  let x_3692 : f32 = u_xlat66;
  let x_3694 : f32 = u_xlat45.x;
  u_xlat66 = ((x_3692 * x_3694) + 1.000010014f);
  let x_3698 : f32 = u_xlat67;
  let x_3699 : f32 = u_xlat67;
  u_xlat67 = (x_3698 * x_3699);
  let x_3701 : f32 = u_xlat66;
  let x_3702 : f32 = u_xlat66;
  u_xlat66 = (x_3701 * x_3702);
  let x_3704 : f32 = u_xlat67;
  u_xlat67 = max(x_3704, 0.100000001f);
  let x_3707 : f32 = u_xlat66;
  let x_3708 : f32 = u_xlat67;
  u_xlat66 = (x_3707 * x_3708);
  let x_3710 : f32 = u_xlat72;
  let x_3711 : f32 = u_xlat66;
  u_xlat66 = (x_3710 * x_3711);
  let x_3713 : f32 = u_xlat69;
  let x_3714 : f32 = u_xlat66;
  u_xlat66 = (x_3713 / x_3714);
  let x_3716 : f32 = u_xlat66;
  let x_3720 : vec3<f32> = u_xlat4;
  let x_3721 : vec3<f32> = ((vec3<f32>(x_3716, x_3716, x_3716) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3720);
  let x_3722 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3721.x, x_3721.y, x_3721.z, x_3722.w);
  let x_3724 : vec4<f32> = u_xlat6;
  let x_3726 : vec4<f32> = u_xlat8;
  let x_3728 : vec3<f32> = (vec3<f32>(x_3724.x, x_3724.y, x_3724.z) * vec3<f32>(x_3726.x, x_3726.y, x_3726.z));
  let x_3729 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3728.x, x_3728.y, x_3728.z, x_3729.w);
  let x_3732 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3734 : f32 = x_161.unity_LightData.y;
  u_xlat66 = min(x_3732, x_3734);
  let x_3736 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3736));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3748 : u32 = u_xlatu_loop_1;
    let x_3749 : u32 = u_xlatu66;
    if ((x_3748 < x_3749)) {
    } else {
      break;
    }
    let x_3752 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3752 >> 2u);
    let x_3755 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3755 & 3u));
    let x_3758 : u32 = u_xlatu68;
    let x_3761 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3758)];
    let x_3771 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3776 : vec4<u32> = indexable[x_3771];
    u_xlat68 = dot(x_3761, bitcast<vec4<f32>>(x_3776));
    let x_3780 : f32 = u_xlat68;
    u_xlati68 = i32(x_3780);
    let x_3782 : vec3<f32> = vs_INTERP0;
    let x_3794 : i32 = u_xlati68;
    let x_3796 : vec4<f32> = x_3793.x_AdditionalLightsPosition[x_3794];
    let x_3799 : i32 = u_xlati68;
    let x_3801 : vec4<f32> = x_3793.x_AdditionalLightsPosition[x_3799];
    let x_3803 : vec3<f32> = ((-(x_3782) * vec3<f32>(x_3796.w, x_3796.w, x_3796.w)) + vec3<f32>(x_3801.x, x_3801.y, x_3801.z));
    let x_3804 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3803.x, x_3803.y, x_3803.z, x_3804.w);
    let x_3806 : vec4<f32> = u_xlat9;
    let x_3808 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3806.x, x_3806.y, x_3806.z), vec3<f32>(x_3808.x, x_3808.y, x_3808.z));
    let x_3811 : f32 = u_xlat70;
    u_xlat70 = max(x_3811, 6.10351562e-05f);
    let x_3815 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3815);
    let x_3817 : f32 = u_xlat71;
    let x_3819 : vec4<f32> = u_xlat9;
    let x_3821 : vec3<f32> = (vec3<f32>(x_3817, x_3817, x_3817) * vec3<f32>(x_3819.x, x_3819.y, x_3819.z));
    let x_3822 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3821.x, x_3821.y, x_3821.z, x_3822.w);
    let x_3824 : f32 = u_xlat70;
    u_xlat51.x = (1.0f / x_3824);
    let x_3827 : f32 = u_xlat70;
    let x_3828 : i32 = u_xlati68;
    let x_3830 : f32 = x_3793.x_AdditionalLightsAttenuation[x_3828].x;
    u_xlat70 = (x_3827 * x_3830);
    let x_3832 : f32 = u_xlat70;
    let x_3834 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3832) * x_3834) + 1.0f);
    let x_3837 : f32 = u_xlat70;
    u_xlat70 = max(x_3837, 0.0f);
    let x_3839 : f32 = u_xlat70;
    let x_3840 : f32 = u_xlat70;
    u_xlat70 = (x_3839 * x_3840);
    let x_3842 : f32 = u_xlat70;
    let x_3844 : f32 = u_xlat51.x;
    u_xlat70 = (x_3842 * x_3844);
    let x_3846 : i32 = u_xlati68;
    let x_3848 : vec4<f32> = x_3793.x_AdditionalLightsSpotDir[x_3846];
    let x_3850 : vec4<f32> = u_xlat10;
    u_xlat51.x = dot(vec3<f32>(x_3848.x, x_3848.y, x_3848.z), vec3<f32>(x_3850.x, x_3850.y, x_3850.z));
    let x_3855 : f32 = u_xlat51.x;
    let x_3856 : i32 = u_xlati68;
    let x_3858 : f32 = x_3793.x_AdditionalLightsAttenuation[x_3856].z;
    let x_3860 : i32 = u_xlati68;
    let x_3862 : f32 = x_3793.x_AdditionalLightsAttenuation[x_3860].w;
    u_xlat51.x = ((x_3855 * x_3858) + x_3862);
    let x_3866 : f32 = u_xlat51.x;
    u_xlat51.x = clamp(x_3866, 0.0f, 1.0f);
    let x_3870 : f32 = u_xlat51.x;
    let x_3872 : f32 = u_xlat51.x;
    u_xlat51.x = (x_3870 * x_3872);
    let x_3875 : f32 = u_xlat70;
    let x_3877 : f32 = u_xlat51.x;
    u_xlat70 = (x_3875 * x_3877);
    let x_3879 : f32 = u_xlat29;
    let x_3881 : i32 = u_xlati68;
    let x_3883 : vec4<f32> = x_3793.x_AdditionalLightsColor[x_3881];
    let x_3885 : vec3<f32> = (vec3<f32>(x_3879, x_3879, x_3879) * vec3<f32>(x_3883.x, x_3883.y, x_3883.z));
    let x_3886 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3885.x, x_3885.y, x_3885.z, x_3886.w);
    let x_3888 : vec4<f32> = u_xlat3;
    let x_3890 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_3888.x, x_3888.y, x_3888.z), vec3<f32>(x_3890.x, x_3890.y, x_3890.z));
    let x_3893 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3893, 0.0f, 1.0f);
    let x_3895 : f32 = u_xlat68;
    let x_3896 : f32 = u_xlat70;
    u_xlat68 = (x_3895 * x_3896);
    let x_3898 : f32 = u_xlat68;
    let x_3900 : vec4<f32> = u_xlat11;
    let x_3902 : vec3<f32> = (vec3<f32>(x_3898, x_3898, x_3898) * vec3<f32>(x_3900.x, x_3900.y, x_3900.z));
    let x_3903 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3902.x, x_3902.y, x_3902.z, x_3903.w);
    let x_3905 : vec4<f32> = u_xlat9;
    let x_3907 : f32 = u_xlat71;
    let x_3910 : vec3<f32> = u_xlat2;
    let x_3911 : vec3<f32> = ((vec3<f32>(x_3905.x, x_3905.y, x_3905.z) * vec3<f32>(x_3907, x_3907, x_3907)) + x_3910);
    let x_3912 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3911.x, x_3911.y, x_3911.z, x_3912.w);
    let x_3914 : vec4<f32> = u_xlat9;
    let x_3916 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_3914.x, x_3914.y, x_3914.z), vec3<f32>(x_3916.x, x_3916.y, x_3916.z));
    let x_3919 : f32 = u_xlat68;
    u_xlat68 = max(x_3919, 1.17549435e-37f);
    let x_3921 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3921);
    let x_3923 : f32 = u_xlat68;
    let x_3925 : vec4<f32> = u_xlat9;
    let x_3927 : vec3<f32> = (vec3<f32>(x_3923, x_3923, x_3923) * vec3<f32>(x_3925.x, x_3925.y, x_3925.z));
    let x_3928 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3927.x, x_3927.y, x_3927.z, x_3928.w);
    let x_3930 : vec4<f32> = u_xlat3;
    let x_3932 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_3930.x, x_3930.y, x_3930.z), vec3<f32>(x_3932.x, x_3932.y, x_3932.z));
    let x_3935 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3935, 0.0f, 1.0f);
    let x_3937 : vec4<f32> = u_xlat10;
    let x_3939 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3937.x, x_3937.y, x_3937.z), vec3<f32>(x_3939.x, x_3939.y, x_3939.z));
    let x_3942 : f32 = u_xlat70;
    u_xlat70 = clamp(x_3942, 0.0f, 1.0f);
    let x_3944 : f32 = u_xlat68;
    let x_3945 : f32 = u_xlat68;
    u_xlat68 = (x_3944 * x_3945);
    let x_3947 : f32 = u_xlat68;
    let x_3949 : f32 = u_xlat45.x;
    u_xlat68 = ((x_3947 * x_3949) + 1.000010014f);
    let x_3952 : f32 = u_xlat70;
    let x_3953 : f32 = u_xlat70;
    u_xlat70 = (x_3952 * x_3953);
    let x_3955 : f32 = u_xlat68;
    let x_3956 : f32 = u_xlat68;
    u_xlat68 = (x_3955 * x_3956);
    let x_3958 : f32 = u_xlat70;
    u_xlat70 = max(x_3958, 0.100000001f);
    let x_3960 : f32 = u_xlat68;
    let x_3961 : f32 = u_xlat70;
    u_xlat68 = (x_3960 * x_3961);
    let x_3963 : f32 = u_xlat72;
    let x_3964 : f32 = u_xlat68;
    u_xlat68 = (x_3963 * x_3964);
    let x_3966 : f32 = u_xlat69;
    let x_3967 : f32 = u_xlat68;
    u_xlat68 = (x_3966 / x_3967);
    let x_3969 : f32 = u_xlat68;
    let x_3972 : vec3<f32> = u_xlat4;
    let x_3973 : vec3<f32> = ((vec3<f32>(x_3969, x_3969, x_3969) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3972);
    let x_3974 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3973.x, x_3973.y, x_3973.z, x_3974.w);
    let x_3976 : vec4<f32> = u_xlat9;
    let x_3978 : vec4<f32> = u_xlat11;
    let x_3981 : vec4<f32> = u_xlat8;
    let x_3983 : vec3<f32> = ((vec3<f32>(x_3976.x, x_3976.y, x_3976.z) * vec3<f32>(x_3978.x, x_3978.y, x_3978.z)) + vec3<f32>(x_3981.x, x_3981.y, x_3981.z));
    let x_3984 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3983.x, x_3983.y, x_3983.z, x_3984.w);

    continuing {
      let x_3986 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3986 + bitcast<u32>(1i));
    }
  }
  let x_3988 : vec4<f32> = u_xlat5;
  let x_3990 : vec4<f32> = u_xlat7;
  let x_3993 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_3988.x, x_3988.y, x_3988.z) * vec3<f32>(x_3990.x, x_3990.x, x_3990.x)) + vec3<f32>(x_3993.x, x_3993.y, x_3993.z));
  let x_3996 : vec4<f32> = u_xlat8;
  let x_3998 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3996.x, x_3996.y, x_3996.z) + x_3998);
  let x_4002 : vec4<f32> = vs_INTERP4;
  let x_4004 : vec3<f32> = u_xlat0;
  let x_4006 : vec3<f32> = u_xlat2;
  let x_4007 : vec3<f32> = ((vec3<f32>(x_4002.w, x_4002.w, x_4002.w) * x_4004) + x_4006);
  let x_4008 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4007.x, x_4007.y, x_4007.z, x_4008.w);
  let x_4010 : bool = u_xlatb23;
  if (x_4010) {
    let x_4015 : f32 = u_xlat1.x;
    x_4011 = x_4015;
  } else {
    x_4011 = 1.0f;
  }
  let x_4017 : f32 = x_4011;
  SV_Target0.w = x_4017;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0);
}

