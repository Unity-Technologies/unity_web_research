type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1_TexelSize : vec4<f32>,
  x_MainTex_TexelSize : vec4<f32>,
  Texture2D_DE8BF47E_TexelSize : vec4<f32>,
  Vector1_6E11FCEA : f32,
  Vector1_A492C01C : f32,
  Vector1_8B35DE98 : f32,
  @size(4)
  padding_2 : u32,
  Texture2D_C005B064_TexelSize : vec4<f32>,
  Texture2D_D7D66558_TexelSize : vec4<f32>,
  Vector1_90E376AD : f32,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_59 : UnityPerDraw;

@group(0) @binding(4) var x_MainTex : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainTex : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_146 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(7) var Texture2D_D7D66558 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D7D66558 : sampler;

@group(1) @binding(4) var<uniform> x_206 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_DE8BF47E : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_DE8BF47E : sampler;

@group(0) @binding(6) var Texture2D_C005B064 : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_C005B064 : sampler;

@group(0) @binding(3) var x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1 : texture_2d<f32>;

@group(0) @binding(11) var sampler_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1 : sampler;

@group(1) @binding(3) var<uniform> x_690 : MainLightShadows;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2689 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat64 : f32;
  var u_xlat65 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat22 : vec2<f32>;
  var u_xlat25 : vec3<f32>;
  var u_xlat42 : f32;
  var x_650 : f32;
  var x_663 : f32;
  var x_675 : f32;
  var u_xlat8 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu21 : u32;
  var u_xlati21 : i32;
  var u_xlat68 : f32;
  var u_xlatb27 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb42 : bool;
  var u_xlatb63 : bool;
  var x_2332 : f32;
  var u_xlat63 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati7 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat70 : f32;
  var u_xlat50 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_29 : vec3<f32> = vs_INTERP1;
  let x_30 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_29, x_30);
  let x_36 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_36);
  let x_40 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_40);
  let x_50 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_50);
  let x_64 : f32 = x_59.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_64 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  let x_90 : vec3<f32> = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_90.x, x_90.y, x_90.z, x_91.w);
  let x_93 : vec3<f32> = vs_INTERP1;
  let x_95 : vec4<f32> = vs_INTERP2;
  let x_98 : vec4<f32> = u_xlat1;
  let x_101 : vec3<f32> = ((vec3<f32>(x_93.y, x_93.z, x_93.x) * vec3<f32>(x_95.z, x_95.x, x_95.y)) + -(vec3<f32>(x_98.x, x_98.y, x_98.z)));
  let x_102 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_101.x, x_101.y, x_101.z, x_102.w);
  let x_104 : vec3<f32> = u_xlat21;
  let x_106 : vec4<f32> = u_xlat1;
  let x_108 : vec3<f32> = (vec3<f32>(x_104.x, x_104.x, x_104.x) * vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_109.x, x_108.x, x_108.y, x_108.z);
  let x_111 : vec4<f32> = u_xlat0;
  let x_113 : vec3<f32> = vs_INTERP1;
  let x_114 : vec3<f32> = (vec3<f32>(x_111.x, x_111.x, x_111.x) * x_113);
  let x_115 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_114.x, x_114.y, x_114.z, x_115.w);
  let x_118 : vec4<f32> = u_xlat0;
  let x_120 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_118.x, x_118.x, x_118.x) * vec3<f32>(x_120.x, x_120.y, x_120.z));
  let x_124 : vec4<f32> = u_xlat0;
  let x_126 : vec4<f32> = u_xlat0;
  u_xlat3 = (vec3<f32>(x_124.y, x_124.z, x_124.w) * vec3<f32>(x_126.x, x_126.x, x_126.x));
  let x_142 : vec4<f32> = vs_INTERP3;
  let x_149 : f32 = x_146.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_142.x, x_142.y), x_149);
  u_xlat4 = x_150;
  let x_152 : f32 = u_xlat4.w;
  u_xlat0.x = (x_152 + -0.5f);
  let x_158 : f32 = u_xlat0.x;
  let x_163 : f32 = vs_INTERP0.y;
  u_xlat64 = ((x_158 * 4.0f) + x_163);
  let x_165 : f32 = u_xlat64;
  u_xlat64 = (x_165 * 0.330000013f);
  let x_170 : f32 = vs_INTERP0.y;
  u_xlat65 = (x_170 + 1.0f);
  let x_172 : f32 = u_xlat65;
  u_xlat65 = ((x_172 * -1.333333373f) + 1.0f);
  let x_176 : f32 = u_xlat64;
  let x_177 : f32 = u_xlat65;
  u_xlat64 = max(x_176, x_177);
  let x_179 : f32 = u_xlat64;
  u_xlat1.w = max(x_179, 0.100000001f);
  let x_184 : vec4<f32> = vs_INTERP3;
  let x_187 : vec2<f32> = (vec2<f32>(x_184.x, x_184.y) * vec2<f32>(4.0f, 4.0f));
  let x_188 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_187.x, x_187.y, x_188.z);
  let x_196 : vec3<f32> = u_xlat5;
  let x_199 : f32 = x_146.x_GlobalMipBias.x;
  let x_200 : vec4<f32> = textureSampleBias(Texture2D_D7D66558, samplerTexture2D_D7D66558, vec2<f32>(x_196.x, x_196.y), x_199);
  let x_201 : vec3<f32> = vec3<f32>(x_200.x, x_200.y, x_200.z);
  let x_202 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_209 : f32 = x_206.Vector1_8B35DE98;
  u_xlat65 = ((-(x_209) * 0.011111f) + 0.949999988f);
  let x_218 : f32 = x_206.Vector1_A492C01C;
  u_xlat66 = (x_218 + -10.0f);
  let x_221 : f32 = u_xlat66;
  let x_224 : f32 = vs_INTERP0.y;
  u_xlat66 = (-(x_221) + x_224);
  let x_226 : f32 = u_xlat66;
  u_xlat66 = (x_226 * 0.050000001f);
  let x_229 : f32 = u_xlat66;
  u_xlat66 = clamp(x_229, 0.0f, 1.0f);
  let x_232 : f32 = u_xlat66;
  u_xlat67 = ((x_232 * -2.0f) + 3.0f);
  let x_237 : f32 = u_xlat66;
  let x_238 : f32 = u_xlat66;
  u_xlat66 = (x_237 * x_238);
  let x_240 : f32 = u_xlat66;
  let x_241 : f32 = u_xlat67;
  u_xlat66 = (x_240 * x_241);
  let x_249 : vec4<f32> = vs_INTERP3;
  let x_252 : f32 = x_146.x_GlobalMipBias.x;
  let x_253 : vec4<f32> = textureSampleBias(Texture2D_DE8BF47E, samplerTexture2D_DE8BF47E, vec2<f32>(x_249.x, x_249.y), x_252);
  u_xlat7 = x_253;
  let x_255 : vec4<f32> = u_xlat7;
  u_xlat28 = ((vec3<f32>(x_255.w, x_255.y, x_255.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_262 : vec3<f32> = u_xlat3;
  let x_263 : vec3<f32> = u_xlat28;
  u_xlat3 = (x_262 * vec3<f32>(x_263.y, x_263.y, x_263.y));
  let x_266 : vec3<f32> = u_xlat28;
  let x_268 : vec3<f32> = u_xlat2;
  let x_270 : vec3<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_266.x, x_266.x, x_266.x) * x_268) + x_270);
  let x_272 : vec3<f32> = u_xlat28;
  let x_274 : vec4<f32> = u_xlat1;
  let x_277 : vec3<f32> = u_xlat2;
  let x_278 : vec3<f32> = ((vec3<f32>(x_272.z, x_272.z, x_272.z) * vec3<f32>(x_274.x, x_274.y, x_274.z)) + x_277);
  let x_279 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_278.x, x_278.y, x_278.z, x_279.w);
  let x_281 : vec4<f32> = u_xlat1;
  let x_283 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_281.x, x_281.y, x_281.z), vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_288 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_288, 1.17549435e-37f);
  let x_293 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_293);
  let x_297 : f32 = u_xlat1.x;
  let x_299 : f32 = u_xlat1.y;
  u_xlat1.x = (x_297 * x_299);
  let x_302 : f32 = u_xlat66;
  let x_304 : f32 = u_xlat1.x;
  let x_306 : f32 = u_xlat65;
  u_xlat1.x = ((x_302 * x_304) + -(x_306));
  let x_311 : f32 = u_xlat1.x;
  u_xlat1.x = (x_311 * 10.0f);
  let x_316 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_316, 0.0f, 1.0f);
  let x_322 : f32 = u_xlat1.x;
  u_xlat22.x = ((x_322 * -2.0f) + 3.0f);
  let x_327 : f32 = u_xlat1.x;
  let x_329 : f32 = u_xlat1.x;
  u_xlat1.x = (x_327 * x_329);
  let x_333 : f32 = u_xlat1.x;
  let x_335 : f32 = u_xlat22.x;
  u_xlat1.x = (x_333 * x_335);
  let x_338 : vec4<f32> = u_xlat1;
  let x_341 : vec2<f32> = min(vec2<f32>(x_338.x, x_338.w), vec2<f32>(1.0f, 1.0f));
  let x_342 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_341.x, x_342.y, x_342.z, x_341.y);
  let x_345 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_345) + 1.0f);
  let x_349 : vec4<f32> = u_xlat4;
  let x_351 : vec4<f32> = u_xlat6;
  u_xlat2 = (vec3<f32>(x_349.x, x_349.y, x_349.z) + -(vec3<f32>(x_351.x, x_351.y, x_351.z)));
  let x_355 : vec4<f32> = u_xlat1;
  let x_357 : vec3<f32> = u_xlat2;
  let x_359 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_355.x, x_355.x, x_355.x) * x_357) + vec3<f32>(x_359.x, x_359.y, x_359.z));
  let x_362 : vec4<f32> = u_xlat1;
  let x_364 : vec3<f32> = u_xlat2;
  u_xlat3 = (vec3<f32>(x_362.w, x_362.w, x_362.w) * x_364);
  let x_372 : vec3<f32> = u_xlat5;
  let x_375 : f32 = x_146.x_GlobalMipBias.x;
  let x_376 : vec4<f32> = textureSampleBias(Texture2D_C005B064, samplerTexture2D_C005B064, vec2<f32>(x_372.x, x_372.y), x_375);
  u_xlat25 = vec3<f32>(x_376.x, x_376.y, x_376.w);
  let x_379 : f32 = u_xlat25.x;
  let x_381 : f32 = u_xlat25.z;
  u_xlat25.x = (x_379 * x_381);
  let x_384 : vec3<f32> = u_xlat25;
  let x_389 : vec2<f32> = ((vec2<f32>(x_384.x, x_384.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_390 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_389.x, x_389.y, x_390.z);
  let x_392 : vec3<f32> = u_xlat5;
  let x_394 : vec3<f32> = u_xlat5;
  u_xlat22.x = dot(vec2<f32>(x_392.x, x_392.y), vec2<f32>(x_394.x, x_394.y));
  let x_399 : f32 = u_xlat22.x;
  u_xlat22.x = min(x_399, 1.0f);
  let x_403 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_403) + 1.0f);
  let x_408 : f32 = u_xlat22.x;
  u_xlat22.x = sqrt(x_408);
  let x_412 : f32 = u_xlat22.x;
  u_xlat5.z = max(x_412, 1.00000002e-16f);
  let x_419 : vec4<f32> = x_59.unity_ObjectToWorld[0i];
  let x_422 : vec4<f32> = x_59.unity_ObjectToWorld[0i];
  u_xlat22.x = dot(vec3<f32>(x_419.x, x_419.y, x_419.z), vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_427 : f32 = u_xlat22.x;
  u_xlat6.x = sqrt(x_427);
  let x_431 : vec4<f32> = x_59.unity_ObjectToWorld[1i];
  let x_434 : vec4<f32> = x_59.unity_ObjectToWorld[1i];
  u_xlat22.x = dot(vec3<f32>(x_431.x, x_431.y, x_431.z), vec3<f32>(x_434.x, x_434.y, x_434.z));
  let x_439 : f32 = u_xlat22.x;
  u_xlat6.y = sqrt(x_439);
  let x_444 : vec4<f32> = x_59.unity_ObjectToWorld[2i];
  let x_447 : vec4<f32> = x_59.unity_ObjectToWorld[2i];
  u_xlat22.x = dot(vec3<f32>(x_444.x, x_444.y, x_444.z), vec3<f32>(x_447.x, x_447.y, x_447.z));
  let x_452 : f32 = u_xlat22.x;
  u_xlat6.z = sqrt(x_452);
  let x_455 : vec4<f32> = u_xlat6;
  let x_457 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(vec3<f32>(x_455.x, x_455.y, x_455.z), vec3<f32>(x_457.x, x_457.y, x_457.z));
  let x_462 : f32 = u_xlat22.x;
  u_xlat22.x = sqrt(x_462);
  let x_466 : f32 = u_xlat22.x;
  let x_469 : f32 = x_206.Vector1_90E376AD;
  u_xlat22.x = (x_466 * x_469);
  let x_473 : f32 = u_xlat22.x;
  u_xlat22.x = (x_473 * 30.0f);
  let x_477 : vec2<f32> = u_xlat22;
  let x_479 : vec4<f32> = vs_INTERP3;
  u_xlat22 = (vec2<f32>(x_477.x, x_477.x) * vec2<f32>(x_479.x, x_479.y));
  let x_487 : vec2<f32> = u_xlat22;
  let x_489 : f32 = x_146.x_GlobalMipBias.x;
  let x_490 : vec4<f32> = textureSampleBias(x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1, sampler_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1, x_487, x_489);
  u_xlat25 = vec3<f32>(x_490.x, x_490.y, x_490.w);
  let x_493 : f32 = u_xlat25.x;
  let x_495 : f32 = u_xlat25.z;
  u_xlat25.x = (x_493 * x_495);
  let x_498 : vec3<f32> = u_xlat25;
  u_xlat22 = ((vec2<f32>(x_498.x, x_498.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_502 : vec2<f32> = u_xlat22;
  let x_503 : vec2<f32> = u_xlat22;
  u_xlat65 = dot(x_502, x_503);
  let x_505 : f32 = u_xlat65;
  u_xlat65 = min(x_505, 1.0f);
  let x_507 : f32 = u_xlat65;
  u_xlat65 = (-(x_507) + 1.0f);
  let x_510 : f32 = u_xlat65;
  u_xlat65 = sqrt(x_510);
  let x_512 : f32 = u_xlat65;
  u_xlat65 = max(x_512, 1.00000002e-16f);
  let x_514 : vec2<f32> = u_xlat22;
  let x_515 : vec3<f32> = u_xlat28;
  let x_517 : vec2<f32> = (x_514 + vec2<f32>(x_515.x, x_515.y));
  let x_518 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_517.x, x_517.y, x_518.z, x_518.w);
  let x_520 : f32 = u_xlat65;
  let x_522 : f32 = u_xlat28.z;
  u_xlat6.z = (x_520 * x_522);
  let x_525 : vec4<f32> = u_xlat6;
  let x_527 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(vec3<f32>(x_525.x, x_525.y, x_525.z), vec3<f32>(x_527.x, x_527.y, x_527.z));
  let x_532 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_532, 1.17549435e-37f);
  let x_536 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_536);
  let x_539 : vec4<f32> = u_xlat6;
  let x_541 : vec2<f32> = u_xlat22;
  let x_544 : vec3<f32> = u_xlat5;
  u_xlat25 = ((vec3<f32>(x_539.x, x_539.y, x_539.z) * vec3<f32>(x_541.x, x_541.x, x_541.x)) + -(x_544));
  let x_547 : vec4<f32> = u_xlat1;
  let x_549 : vec3<f32> = u_xlat25;
  let x_551 : vec3<f32> = u_xlat5;
  let x_552 : vec3<f32> = ((vec3<f32>(x_547.x, x_547.x, x_547.x) * x_549) + x_551);
  let x_553 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_553.x, x_552.x, x_552.y, x_552.z);
  let x_556 : f32 = u_xlat0.x;
  u_xlat0.x = (-(abs(x_556)) + 1.0f);
  let x_561 : vec4<f32> = u_xlat0;
  let x_562 : vec4<f32> = u_xlat4;
  u_xlat0 = (x_561 * vec4<f32>(x_562.x, x_562.z, x_562.z, x_562.z));
  let x_566 : f32 = u_xlat0.x;
  let x_568 : f32 = x_206.Vector1_6E11FCEA;
  u_xlat0.x = (x_566 * x_568);
  let x_572 : f32 = u_xlat1.x;
  let x_574 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_572 * x_574) + -0.850000024f);
  let x_580 : f32 = u_xlat1.w;
  let x_582 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_580 * x_582) + 0.850000024f);
  let x_588 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_588, 0.0f, 1.0f);
  let x_591 : vec4<f32> = u_xlat4;
  let x_593 : vec4<f32> = vs_INTERP2;
  let x_596 : vec4<f32> = u_xlat0;
  u_xlat21 = ((vec3<f32>(x_591.y, x_591.y, x_591.y) * vec3<f32>(x_593.x, x_593.y, x_593.z)) + vec3<f32>(x_596.y, x_596.z, x_596.w));
  let x_599 : vec4<f32> = u_xlat4;
  let x_601 : vec3<f32> = vs_INTERP1;
  let x_603 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_599.w, x_599.w, x_599.w) * x_601) + x_603);
  let x_605 : vec3<f32> = u_xlat21;
  let x_606 : vec3<f32> = u_xlat21;
  u_xlat1.x = dot(x_605, x_606);
  let x_610 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_610);
  let x_613 : vec3<f32> = u_xlat21;
  let x_614 : vec4<f32> = u_xlat1;
  let x_616 : vec3<f32> = (x_613 * vec3<f32>(x_614.x, x_614.x, x_614.x));
  let x_617 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_616.x, x_616.y, x_616.z, x_617.w);
  let x_621 : f32 = x_146.unity_OrthoParams.w;
  u_xlatb21.x = (x_621 == 0.0f);
  let x_624 : vec3<f32> = vs_INTERP0;
  let x_629 : vec3<f32> = x_146.x_WorldSpaceCameraPos;
  let x_630 : vec3<f32> = (-(x_624) + x_629);
  let x_631 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
  let x_634 : vec4<f32> = u_xlat1;
  let x_636 : vec4<f32> = u_xlat1;
  u_xlat42 = dot(vec3<f32>(x_634.x, x_634.y, x_634.z), vec3<f32>(x_636.x, x_636.y, x_636.z));
  let x_639 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_639);
  let x_641 : f32 = u_xlat42;
  let x_643 : vec4<f32> = u_xlat1;
  let x_645 : vec3<f32> = (vec3<f32>(x_641, x_641, x_641) * vec3<f32>(x_643.x, x_643.y, x_643.z));
  let x_646 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_645.x, x_645.y, x_645.z, x_646.w);
  let x_649 : bool = u_xlatb21.x;
  if (x_649) {
    let x_654 : f32 = u_xlat1.x;
    x_650 = x_654;
  } else {
    let x_658 : f32 = x_146.unity_MatrixV[0i].z;
    x_650 = x_658;
  }
  let x_659 : f32 = x_650;
  u_xlat5.x = x_659;
  let x_662 : bool = u_xlatb21.x;
  if (x_662) {
    let x_667 : f32 = u_xlat1.y;
    x_663 = x_667;
  } else {
    let x_670 : f32 = x_146.unity_MatrixV[1i].z;
    x_663 = x_670;
  }
  let x_671 : f32 = x_663;
  u_xlat5.y = x_671;
  let x_674 : bool = u_xlatb21.x;
  if (x_674) {
    let x_679 : f32 = u_xlat1.z;
    x_675 = x_679;
  } else {
    let x_682 : f32 = x_146.unity_MatrixV[2i].z;
    x_675 = x_682;
  }
  let x_683 : f32 = x_675;
  u_xlat5.z = x_683;
  let x_685 : vec3<f32> = vs_INTERP0;
  let x_692 : vec4<f32> = x_690.x_CascadeShadowSplitSpheres0;
  u_xlat21 = (x_685 + -(vec3<f32>(x_692.x, x_692.y, x_692.z)));
  let x_696 : vec3<f32> = vs_INTERP0;
  let x_698 : vec4<f32> = x_690.x_CascadeShadowSplitSpheres1;
  let x_701 : vec3<f32> = (x_696 + -(vec3<f32>(x_698.x, x_698.y, x_698.z)));
  let x_702 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_701.x, x_701.y, x_701.z, x_702.w);
  let x_704 : vec3<f32> = vs_INTERP0;
  let x_706 : vec4<f32> = x_690.x_CascadeShadowSplitSpheres2;
  let x_709 : vec3<f32> = (x_704 + -(vec3<f32>(x_706.x, x_706.y, x_706.z)));
  let x_710 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_709.x, x_709.y, x_709.z, x_710.w);
  let x_712 : vec3<f32> = vs_INTERP0;
  let x_714 : vec4<f32> = x_690.x_CascadeShadowSplitSpheres3;
  u_xlat28 = (x_712 + -(vec3<f32>(x_714.x, x_714.y, x_714.z)));
  let x_719 : vec3<f32> = u_xlat21;
  let x_720 : vec3<f32> = u_xlat21;
  u_xlat8.x = dot(x_719, x_720);
  let x_723 : vec4<f32> = u_xlat1;
  let x_725 : vec4<f32> = u_xlat1;
  u_xlat8.y = dot(vec3<f32>(x_723.x, x_723.y, x_723.z), vec3<f32>(x_725.x, x_725.y, x_725.z));
  let x_729 : vec4<f32> = u_xlat6;
  let x_731 : vec4<f32> = u_xlat6;
  u_xlat8.z = dot(vec3<f32>(x_729.x, x_729.y, x_729.z), vec3<f32>(x_731.x, x_731.y, x_731.z));
  let x_735 : vec3<f32> = u_xlat28;
  let x_736 : vec3<f32> = u_xlat28;
  u_xlat8.w = dot(x_735, x_736);
  let x_742 : vec4<f32> = u_xlat8;
  let x_744 : vec4<f32> = x_690.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_742 < x_744);
  let x_747 : bool = u_xlatb6.x;
  u_xlat8.x = select(0.0f, 1.0f, x_747);
  let x_751 : bool = u_xlatb6.y;
  u_xlat8.y = select(0.0f, 1.0f, x_751);
  let x_755 : bool = u_xlatb6.z;
  u_xlat8.z = select(0.0f, 1.0f, x_755);
  let x_759 : bool = u_xlatb6.w;
  u_xlat8.w = select(0.0f, 1.0f, x_759);
  let x_763 : bool = u_xlatb6.x;
  u_xlat21.x = select(-0.0f, -1.0f, x_763);
  let x_768 : bool = u_xlatb6.y;
  u_xlat21.y = select(-0.0f, -1.0f, x_768);
  let x_772 : bool = u_xlatb6.z;
  u_xlat21.z = select(-0.0f, -1.0f, x_772);
  let x_775 : vec3<f32> = u_xlat21;
  let x_776 : vec4<f32> = u_xlat8;
  u_xlat21 = (x_775 + vec3<f32>(x_776.y, x_776.z, x_776.w));
  let x_779 : vec3<f32> = u_xlat21;
  let x_781 : vec3<f32> = max(x_779, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_782 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_782.x, x_781.x, x_781.y, x_781.z);
  let x_784 : vec4<f32> = u_xlat8;
  u_xlat21.x = dot(x_784, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_789 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_789) + 4.0f);
  let x_796 : f32 = u_xlat21.x;
  u_xlatu21 = u32(x_796);
  let x_800 : u32 = u_xlatu21;
  u_xlati21 = (bitcast<i32>(x_800) << bitcast<u32>(2i));
  let x_803 : vec3<f32> = vs_INTERP0;
  let x_805 : i32 = u_xlati21;
  let x_808 : i32 = u_xlati21;
  let x_812 : vec4<f32> = x_690.x_MainLightWorldToShadow[((x_805 + 1i) / 4i)][((x_808 + 1i) % 4i)];
  let x_814 : vec3<f32> = (vec3<f32>(x_803.y, x_803.y, x_803.y) * vec3<f32>(x_812.x, x_812.y, x_812.z));
  let x_815 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_814.x, x_814.y, x_814.z, x_815.w);
  let x_817 : i32 = u_xlati21;
  let x_819 : i32 = u_xlati21;
  let x_822 : vec4<f32> = x_690.x_MainLightWorldToShadow[(x_817 / 4i)][(x_819 % 4i)];
  let x_824 : vec3<f32> = vs_INTERP0;
  let x_827 : vec4<f32> = u_xlat1;
  let x_829 : vec3<f32> = ((vec3<f32>(x_822.x, x_822.y, x_822.z) * vec3<f32>(x_824.x, x_824.x, x_824.x)) + vec3<f32>(x_827.x, x_827.y, x_827.z));
  let x_830 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_829.x, x_829.y, x_829.z, x_830.w);
  let x_832 : i32 = u_xlati21;
  let x_835 : i32 = u_xlati21;
  let x_839 : vec4<f32> = x_690.x_MainLightWorldToShadow[((x_832 + 2i) / 4i)][((x_835 + 2i) % 4i)];
  let x_841 : vec3<f32> = vs_INTERP0;
  let x_844 : vec4<f32> = u_xlat1;
  let x_846 : vec3<f32> = ((vec3<f32>(x_839.x, x_839.y, x_839.z) * vec3<f32>(x_841.z, x_841.z, x_841.z)) + vec3<f32>(x_844.x, x_844.y, x_844.z));
  let x_847 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_846.x, x_846.y, x_846.z, x_847.w);
  let x_849 : vec4<f32> = u_xlat1;
  let x_851 : i32 = u_xlati21;
  let x_854 : i32 = u_xlati21;
  let x_858 : vec4<f32> = x_690.x_MainLightWorldToShadow[((x_851 + 3i) / 4i)][((x_854 + 3i) % 4i)];
  u_xlat21 = (vec3<f32>(x_849.x, x_849.y, x_849.z) + vec3<f32>(x_858.x, x_858.y, x_858.z));
  u_xlat4.w = 1.0f;
  let x_864 : vec4<f32> = x_59.unity_SHAr;
  let x_865 : vec4<f32> = u_xlat4;
  u_xlat1.x = dot(x_864, x_865);
  let x_870 : vec4<f32> = x_59.unity_SHAg;
  let x_871 : vec4<f32> = u_xlat4;
  u_xlat1.y = dot(x_870, x_871);
  let x_876 : vec4<f32> = x_59.unity_SHAb;
  let x_877 : vec4<f32> = u_xlat4;
  u_xlat1.z = dot(x_876, x_877);
  let x_880 : vec4<f32> = u_xlat4;
  let x_882 : vec4<f32> = u_xlat4;
  u_xlat6 = (vec4<f32>(x_880.y, x_880.z, x_880.z, x_880.x) * vec4<f32>(x_882.x, x_882.y, x_882.z, x_882.z));
  let x_887 : vec4<f32> = x_59.unity_SHBr;
  let x_888 : vec4<f32> = u_xlat6;
  u_xlat8.x = dot(x_887, x_888);
  let x_893 : vec4<f32> = x_59.unity_SHBg;
  let x_894 : vec4<f32> = u_xlat6;
  u_xlat8.y = dot(x_893, x_894);
  let x_899 : vec4<f32> = x_59.unity_SHBb;
  let x_900 : vec4<f32> = u_xlat6;
  u_xlat8.z = dot(x_899, x_900);
  let x_904 : f32 = u_xlat4.y;
  let x_906 : f32 = u_xlat4.y;
  u_xlat65 = (x_904 * x_906);
  let x_909 : f32 = u_xlat4.x;
  let x_911 : f32 = u_xlat4.x;
  let x_913 : f32 = u_xlat65;
  u_xlat65 = ((x_909 * x_911) + -(x_913));
  let x_918 : vec4<f32> = x_59.unity_SHC;
  let x_920 : f32 = u_xlat65;
  let x_923 : vec4<f32> = u_xlat8;
  let x_925 : vec3<f32> = ((vec3<f32>(x_918.x, x_918.y, x_918.z) * vec3<f32>(x_920, x_920, x_920)) + vec3<f32>(x_923.x, x_923.y, x_923.z));
  let x_926 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_925.x, x_925.y, x_925.z, x_926.w);
  let x_928 : vec4<f32> = u_xlat1;
  let x_930 : vec4<f32> = u_xlat6;
  let x_932 : vec3<f32> = (vec3<f32>(x_928.x, x_928.y, x_928.z) + vec3<f32>(x_930.x, x_930.y, x_930.z));
  let x_933 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_932.x, x_932.y, x_932.z, x_933.w);
  let x_935 : vec4<f32> = u_xlat1;
  let x_937 : vec3<f32> = max(vec3<f32>(x_935.x, x_935.y, x_935.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_938 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_937.x, x_937.y, x_937.z, x_938.w);
  let x_941 : vec4<f32> = x_146.x_ScaledScreenParams;
  let x_942 : vec2<f32> = vec2<f32>(x_941.x, x_941.y);
  let x_946 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_942.x, x_942.y));
  let x_947 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_946.x, x_946.y, x_947.z, x_947.w);
  let x_949 : vec4<f32> = u_xlat6;
  let x_951 : vec4<f32> = hlslcc_FragCoord;
  let x_953 : vec2<f32> = (vec2<f32>(x_949.x, x_949.y) * vec2<f32>(x_951.x, x_951.y));
  let x_954 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_953.x, x_953.y, x_954.z, x_954.w);
  let x_957 : f32 = u_xlat6.y;
  let x_959 : f32 = x_146.x_ScaleBiasRt.x;
  let x_962 : f32 = x_146.x_ScaleBiasRt.y;
  u_xlat65 = ((x_957 * x_959) + x_962);
  let x_964 : f32 = u_xlat65;
  u_xlat6.z = (-(x_964) + 1.0f);
  let x_968 : vec3<f32> = u_xlat3;
  u_xlat3 = (x_968 * vec3<f32>(0.863999963f, 0.863999963f, 0.863999963f));
  let x_972 : vec4<f32> = u_xlat1;
  let x_974 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_972.w, x_972.w, x_972.w) * x_974) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_979 : vec3<f32> = u_xlat2;
  u_xlat2 = ((x_979 * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_986 : f32 = u_xlat0.x;
  u_xlat64 = (-(x_986) + 1.0f);
  let x_989 : f32 = u_xlat64;
  let x_990 : f32 = u_xlat64;
  u_xlat65 = (x_989 * x_990);
  let x_992 : f32 = u_xlat65;
  u_xlat65 = max(x_992, 0.0078125f);
  let x_995 : f32 = u_xlat65;
  let x_996 : f32 = u_xlat65;
  u_xlat66 = (x_995 * x_996);
  let x_999 : f32 = u_xlat0.x;
  u_xlat0.x = (x_999 + 0.136000037f);
  let x_1004 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_1004, 1.0f);
  let x_1007 : f32 = u_xlat65;
  u_xlat67 = ((x_1007 * 4.0f) + 2.0f);
  let x_1016 : vec4<f32> = u_xlat6;
  let x_1019 : f32 = x_146.x_GlobalMipBias.x;
  let x_1020 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1016.x, x_1016.z), x_1019);
  u_xlat68 = x_1020.x;
  let x_1022 : f32 = u_xlat68;
  u_xlat6.x = (x_1022 + -1.0f);
  let x_1026 : f32 = x_146.x_AmbientOcclusionParam.w;
  let x_1028 : f32 = u_xlat6.x;
  u_xlat6.x = ((x_1026 * x_1028) + 1.0f);
  let x_1033 : f32 = u_xlat7.x;
  let x_1034 : f32 = u_xlat68;
  u_xlat68 = min(x_1033, x_1034);
  let x_1038 : f32 = x_690.x_MainLightShadowParams.y;
  u_xlatb27 = (0.0f < x_1038);
  let x_1040 : bool = u_xlatb27;
  if (x_1040) {
    let x_1044 : f32 = x_690.x_MainLightShadowParams.y;
    u_xlatb27 = (x_1044 == 1.0f);
    let x_1046 : bool = u_xlatb27;
    if (x_1046) {
      let x_1049 : vec3<f32> = u_xlat21;
      let x_1052 : vec4<f32> = x_690.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1049.x, x_1049.y, x_1049.x, x_1049.y) + x_1052);
      let x_1055 : vec4<f32> = u_xlat7;
      let x_1056 : vec2<f32> = vec2<f32>(x_1055.x, x_1055.y);
      let x_1058 : f32 = u_xlat21.z;
      txVec0 = vec3<f32>(x_1056.x, x_1056.y, x_1058);
      let x_1070 : vec3<f32> = txVec0;
      let x_1072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1070.xy, x_1070.z);
      u_xlat8.x = x_1072;
      let x_1075 : vec4<f32> = u_xlat7;
      let x_1076 : vec2<f32> = vec2<f32>(x_1075.z, x_1075.w);
      let x_1078 : f32 = u_xlat21.z;
      txVec1 = vec3<f32>(x_1076.x, x_1076.y, x_1078);
      let x_1085 : vec3<f32> = txVec1;
      let x_1087 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1085.xy, x_1085.z);
      u_xlat8.y = x_1087;
      let x_1089 : vec3<f32> = u_xlat21;
      let x_1092 : vec4<f32> = x_690.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1089.x, x_1089.y, x_1089.x, x_1089.y) + x_1092);
      let x_1095 : vec4<f32> = u_xlat7;
      let x_1096 : vec2<f32> = vec2<f32>(x_1095.x, x_1095.y);
      let x_1098 : f32 = u_xlat21.z;
      txVec2 = vec3<f32>(x_1096.x, x_1096.y, x_1098);
      let x_1105 : vec3<f32> = txVec2;
      let x_1107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1105.xy, x_1105.z);
      u_xlat8.z = x_1107;
      let x_1110 : vec4<f32> = u_xlat7;
      let x_1111 : vec2<f32> = vec2<f32>(x_1110.z, x_1110.w);
      let x_1113 : f32 = u_xlat21.z;
      txVec3 = vec3<f32>(x_1111.x, x_1111.y, x_1113);
      let x_1120 : vec3<f32> = txVec3;
      let x_1122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1120.xy, x_1120.z);
      u_xlat8.w = x_1122;
      let x_1125 : vec4<f32> = u_xlat8;
      u_xlat27.x = dot(x_1125, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1133 : f32 = x_690.x_MainLightShadowParams.y;
      u_xlatb48 = (x_1133 == 2.0f);
      let x_1135 : bool = u_xlatb48;
      if (x_1135) {
        let x_1139 : vec3<f32> = u_xlat21;
        let x_1142 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1139.x, x_1139.y) * vec2<f32>(x_1142.z, x_1142.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1148 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1148);
        let x_1150 : vec3<f32> = u_xlat21;
        let x_1153 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1156 : vec2<f32> = u_xlat48;
        let x_1158 : vec2<f32> = ((vec2<f32>(x_1150.x, x_1150.y) * vec2<f32>(x_1153.z, x_1153.w)) + -(x_1156));
        let x_1159 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1158.x, x_1158.y, x_1159.z, x_1159.w);
        let x_1161 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1161.x, x_1161.x, x_1161.y, x_1161.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1166 : vec4<f32> = u_xlat8;
        let x_1168 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1166.x, x_1166.x, x_1166.z, x_1166.z) * vec4<f32>(x_1168.x, x_1168.x, x_1168.z, x_1168.z));
        let x_1172 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1172.y, x_1172.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1177 : vec4<f32> = u_xlat9;
        let x_1180 : vec4<f32> = u_xlat7;
        let x_1183 : vec2<f32> = ((vec2<f32>(x_1177.x, x_1177.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1180.x, x_1180.y)));
        let x_1184 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1183.x, x_1184.y, x_1183.y, x_1184.w);
        let x_1186 : vec4<f32> = u_xlat7;
        let x_1189 : vec2<f32> = (-(vec2<f32>(x_1186.x, x_1186.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1190 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1189.x, x_1189.y, x_1190.z, x_1190.w);
        let x_1193 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_1193.x, x_1193.y), vec2<f32>(0.0f, 0.0f));
        let x_1197 : vec2<f32> = u_xlat51;
        let x_1199 : vec2<f32> = u_xlat51;
        let x_1201 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_1197) * x_1199) + vec2<f32>(x_1201.x, x_1201.y));
        let x_1204 : vec4<f32> = u_xlat7;
        let x_1206 : vec2<f32> = max(vec2<f32>(x_1204.x, x_1204.y), vec2<f32>(0.0f, 0.0f));
        let x_1207 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1206.x, x_1206.y, x_1207.z, x_1207.w);
        let x_1209 : vec4<f32> = u_xlat7;
        let x_1212 : vec4<f32> = u_xlat7;
        let x_1215 : vec4<f32> = u_xlat8;
        let x_1217 : vec2<f32> = ((-(vec2<f32>(x_1209.x, x_1209.y)) * vec2<f32>(x_1212.x, x_1212.y)) + vec2<f32>(x_1215.y, x_1215.w));
        let x_1218 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1217.x, x_1217.y, x_1218.z, x_1218.w);
        let x_1220 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_1220 + vec2<f32>(1.0f, 1.0f));
        let x_1222 : vec4<f32> = u_xlat7;
        let x_1224 : vec2<f32> = (vec2<f32>(x_1222.x, x_1222.y) + vec2<f32>(1.0f, 1.0f));
        let x_1225 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1224.x, x_1224.y, x_1225.z, x_1225.w);
        let x_1228 : vec4<f32> = u_xlat8;
        let x_1232 : vec2<f32> = (vec2<f32>(x_1228.x, x_1228.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1233 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1232.x, x_1232.y, x_1233.z, x_1233.w);
        let x_1236 : vec4<f32> = u_xlat9;
        let x_1238 : vec2<f32> = (vec2<f32>(x_1236.x, x_1236.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1239 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1238.x, x_1238.y, x_1239.z, x_1239.w);
        let x_1241 : vec2<f32> = u_xlat51;
        let x_1242 : vec2<f32> = (x_1241 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1242.x, x_1242.y, x_1243.z, x_1243.w);
        let x_1246 : vec4<f32> = u_xlat7;
        let x_1248 : vec2<f32> = (vec2<f32>(x_1246.x, x_1246.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1249 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1248.x, x_1248.y, x_1249.z, x_1249.w);
        let x_1251 : vec4<f32> = u_xlat8;
        let x_1253 : vec2<f32> = (vec2<f32>(x_1251.y, x_1251.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1254 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1253.x, x_1253.y, x_1254.z, x_1254.w);
        let x_1257 : f32 = u_xlat9.x;
        u_xlat10.z = x_1257;
        let x_1260 : f32 = u_xlat7.x;
        u_xlat10.w = x_1260;
        let x_1263 : f32 = u_xlat12.x;
        u_xlat11.z = x_1263;
        let x_1266 : f32 = u_xlat49.x;
        u_xlat11.w = x_1266;
        let x_1268 : vec4<f32> = u_xlat10;
        let x_1270 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1268.z, x_1268.w, x_1268.x, x_1268.z) + vec4<f32>(x_1270.z, x_1270.w, x_1270.x, x_1270.z));
        let x_1274 : f32 = u_xlat10.y;
        u_xlat9.z = x_1274;
        let x_1277 : f32 = u_xlat7.y;
        u_xlat9.w = x_1277;
        let x_1280 : f32 = u_xlat11.y;
        u_xlat12.z = x_1280;
        let x_1283 : f32 = u_xlat49.y;
        u_xlat12.w = x_1283;
        let x_1285 : vec4<f32> = u_xlat9;
        let x_1287 : vec4<f32> = u_xlat12;
        let x_1289 : vec3<f32> = (vec3<f32>(x_1285.z, x_1285.y, x_1285.w) + vec3<f32>(x_1287.z, x_1287.y, x_1287.w));
        let x_1290 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1289.x, x_1289.y, x_1289.z, x_1290.w);
        let x_1292 : vec4<f32> = u_xlat11;
        let x_1294 : vec4<f32> = u_xlat8;
        let x_1296 : vec3<f32> = (vec3<f32>(x_1292.x, x_1292.z, x_1292.w) / vec3<f32>(x_1294.z, x_1294.w, x_1294.y));
        let x_1297 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1296.x, x_1296.y, x_1296.z, x_1297.w);
        let x_1299 : vec4<f32> = u_xlat9;
        let x_1304 : vec3<f32> = (vec3<f32>(x_1299.x, x_1299.y, x_1299.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1305 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1304.x, x_1304.y, x_1304.z, x_1305.w);
        let x_1307 : vec4<f32> = u_xlat12;
        let x_1309 : vec4<f32> = u_xlat7;
        let x_1311 : vec3<f32> = (vec3<f32>(x_1307.z, x_1307.y, x_1307.w) / vec3<f32>(x_1309.x, x_1309.y, x_1309.z));
        let x_1312 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1311.x, x_1311.y, x_1311.z, x_1312.w);
        let x_1314 : vec4<f32> = u_xlat10;
        let x_1316 : vec3<f32> = (vec3<f32>(x_1314.x, x_1314.y, x_1314.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1317 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1316.x, x_1316.y, x_1316.z, x_1317.w);
        let x_1319 : vec4<f32> = u_xlat9;
        let x_1322 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1324 : vec3<f32> = (vec3<f32>(x_1319.y, x_1319.x, x_1319.z) * vec3<f32>(x_1322.x, x_1322.x, x_1322.x));
        let x_1325 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1324.x, x_1324.y, x_1324.z, x_1325.w);
        let x_1327 : vec4<f32> = u_xlat10;
        let x_1330 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1332 : vec3<f32> = (vec3<f32>(x_1327.x, x_1327.y, x_1327.z) * vec3<f32>(x_1330.y, x_1330.y, x_1330.y));
        let x_1333 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1332.x, x_1332.y, x_1332.z, x_1333.w);
        let x_1336 : f32 = u_xlat10.x;
        u_xlat9.w = x_1336;
        let x_1338 : vec2<f32> = u_xlat48;
        let x_1341 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1344 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1338.x, x_1338.y, x_1338.x, x_1338.y) * vec4<f32>(x_1341.x, x_1341.y, x_1341.x, x_1341.y)) + vec4<f32>(x_1344.y, x_1344.w, x_1344.x, x_1344.w));
        let x_1347 : vec2<f32> = u_xlat48;
        let x_1349 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1352 : vec4<f32> = u_xlat9;
        let x_1354 : vec2<f32> = ((x_1347 * vec2<f32>(x_1349.x, x_1349.y)) + vec2<f32>(x_1352.z, x_1352.w));
        let x_1355 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1354.x, x_1354.y, x_1355.z, x_1355.w);
        let x_1358 : f32 = u_xlat9.y;
        u_xlat10.w = x_1358;
        let x_1360 : vec4<f32> = u_xlat10;
        let x_1361 : vec2<f32> = vec2<f32>(x_1360.y, x_1360.z);
        let x_1362 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1362.x, x_1361.x, x_1362.z, x_1361.y);
        let x_1365 : vec2<f32> = u_xlat48;
        let x_1368 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1371 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_1365.x, x_1365.y, x_1365.x, x_1365.y) * vec4<f32>(x_1368.x, x_1368.y, x_1368.x, x_1368.y)) + vec4<f32>(x_1371.x, x_1371.y, x_1371.z, x_1371.y));
        let x_1374 : vec2<f32> = u_xlat48;
        let x_1377 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1380 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1374.x, x_1374.y, x_1374.x, x_1374.y) * vec4<f32>(x_1377.x, x_1377.y, x_1377.x, x_1377.y)) + vec4<f32>(x_1380.w, x_1380.y, x_1380.w, x_1380.z));
        let x_1383 : vec2<f32> = u_xlat48;
        let x_1386 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1389 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1383.x, x_1383.y, x_1383.x, x_1383.y) * vec4<f32>(x_1386.x, x_1386.y, x_1386.x, x_1386.y)) + vec4<f32>(x_1389.x, x_1389.w, x_1389.z, x_1389.w));
        let x_1393 : vec4<f32> = u_xlat7;
        let x_1395 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_1393.x, x_1393.x, x_1393.x, x_1393.y) * vec4<f32>(x_1395.z, x_1395.w, x_1395.y, x_1395.z));
        let x_1399 : vec4<f32> = u_xlat7;
        let x_1401 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_1399.y, x_1399.y, x_1399.z, x_1399.z) * x_1401);
        let x_1404 : f32 = u_xlat7.z;
        let x_1406 : f32 = u_xlat8.y;
        u_xlat48.x = (x_1404 * x_1406);
        let x_1410 : vec4<f32> = u_xlat11;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat21.z;
        txVec4 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1421 : vec3<f32> = txVec4;
        let x_1423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1421.xy, x_1421.z);
        u_xlat69 = x_1423;
        let x_1425 : vec4<f32> = u_xlat11;
        let x_1426 : vec2<f32> = vec2<f32>(x_1425.z, x_1425.w);
        let x_1428 : f32 = u_xlat21.z;
        txVec5 = vec3<f32>(x_1426.x, x_1426.y, x_1428);
        let x_1435 : vec3<f32> = txVec5;
        let x_1437 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1435.xy, x_1435.z);
        u_xlat7.x = x_1437;
        let x_1440 : f32 = u_xlat7.x;
        let x_1442 : f32 = u_xlat14.y;
        u_xlat7.x = (x_1440 * x_1442);
        let x_1446 : f32 = u_xlat14.x;
        let x_1447 : f32 = u_xlat69;
        let x_1450 : f32 = u_xlat7.x;
        u_xlat69 = ((x_1446 * x_1447) + x_1450);
        let x_1453 : vec4<f32> = u_xlat12;
        let x_1454 : vec2<f32> = vec2<f32>(x_1453.x, x_1453.y);
        let x_1456 : f32 = u_xlat21.z;
        txVec6 = vec3<f32>(x_1454.x, x_1454.y, x_1456);
        let x_1463 : vec3<f32> = txVec6;
        let x_1465 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1463.xy, x_1463.z);
        u_xlat7.x = x_1465;
        let x_1468 : f32 = u_xlat14.z;
        let x_1470 : f32 = u_xlat7.x;
        let x_1472 : f32 = u_xlat69;
        u_xlat69 = ((x_1468 * x_1470) + x_1472);
        let x_1475 : vec4<f32> = u_xlat10;
        let x_1476 : vec2<f32> = vec2<f32>(x_1475.x, x_1475.y);
        let x_1478 : f32 = u_xlat21.z;
        txVec7 = vec3<f32>(x_1476.x, x_1476.y, x_1478);
        let x_1485 : vec3<f32> = txVec7;
        let x_1487 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1485.xy, x_1485.z);
        u_xlat7.x = x_1487;
        let x_1490 : f32 = u_xlat14.w;
        let x_1492 : f32 = u_xlat7.x;
        let x_1494 : f32 = u_xlat69;
        u_xlat69 = ((x_1490 * x_1492) + x_1494);
        let x_1497 : vec4<f32> = u_xlat13;
        let x_1498 : vec2<f32> = vec2<f32>(x_1497.x, x_1497.y);
        let x_1500 : f32 = u_xlat21.z;
        txVec8 = vec3<f32>(x_1498.x, x_1498.y, x_1500);
        let x_1507 : vec3<f32> = txVec8;
        let x_1509 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1507.xy, x_1507.z);
        u_xlat7.x = x_1509;
        let x_1512 : f32 = u_xlat15.x;
        let x_1514 : f32 = u_xlat7.x;
        let x_1516 : f32 = u_xlat69;
        u_xlat69 = ((x_1512 * x_1514) + x_1516);
        let x_1519 : vec4<f32> = u_xlat13;
        let x_1520 : vec2<f32> = vec2<f32>(x_1519.z, x_1519.w);
        let x_1522 : f32 = u_xlat21.z;
        txVec9 = vec3<f32>(x_1520.x, x_1520.y, x_1522);
        let x_1529 : vec3<f32> = txVec9;
        let x_1531 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1529.xy, x_1529.z);
        u_xlat7.x = x_1531;
        let x_1534 : f32 = u_xlat15.y;
        let x_1536 : f32 = u_xlat7.x;
        let x_1538 : f32 = u_xlat69;
        u_xlat69 = ((x_1534 * x_1536) + x_1538);
        let x_1541 : vec4<f32> = u_xlat10;
        let x_1542 : vec2<f32> = vec2<f32>(x_1541.z, x_1541.w);
        let x_1544 : f32 = u_xlat21.z;
        txVec10 = vec3<f32>(x_1542.x, x_1542.y, x_1544);
        let x_1551 : vec3<f32> = txVec10;
        let x_1553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1551.xy, x_1551.z);
        u_xlat7.x = x_1553;
        let x_1556 : f32 = u_xlat15.z;
        let x_1558 : f32 = u_xlat7.x;
        let x_1560 : f32 = u_xlat69;
        u_xlat69 = ((x_1556 * x_1558) + x_1560);
        let x_1563 : vec4<f32> = u_xlat9;
        let x_1564 : vec2<f32> = vec2<f32>(x_1563.x, x_1563.y);
        let x_1566 : f32 = u_xlat21.z;
        txVec11 = vec3<f32>(x_1564.x, x_1564.y, x_1566);
        let x_1573 : vec3<f32> = txVec11;
        let x_1575 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1573.xy, x_1573.z);
        u_xlat7.x = x_1575;
        let x_1578 : f32 = u_xlat15.w;
        let x_1580 : f32 = u_xlat7.x;
        let x_1582 : f32 = u_xlat69;
        u_xlat69 = ((x_1578 * x_1580) + x_1582);
        let x_1585 : vec4<f32> = u_xlat9;
        let x_1586 : vec2<f32> = vec2<f32>(x_1585.z, x_1585.w);
        let x_1588 : f32 = u_xlat21.z;
        txVec12 = vec3<f32>(x_1586.x, x_1586.y, x_1588);
        let x_1595 : vec3<f32> = txVec12;
        let x_1597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1595.xy, x_1595.z);
        u_xlat7.x = x_1597;
        let x_1600 : f32 = u_xlat48.x;
        let x_1602 : f32 = u_xlat7.x;
        let x_1604 : f32 = u_xlat69;
        u_xlat27.x = ((x_1600 * x_1602) + x_1604);
      } else {
        let x_1608 : vec3<f32> = u_xlat21;
        let x_1611 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1608.x, x_1608.y) * vec2<f32>(x_1611.z, x_1611.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1615 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1615);
        let x_1617 : vec3<f32> = u_xlat21;
        let x_1620 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1623 : vec2<f32> = u_xlat48;
        let x_1625 : vec2<f32> = ((vec2<f32>(x_1617.x, x_1617.y) * vec2<f32>(x_1620.z, x_1620.w)) + -(x_1623));
        let x_1626 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1625.x, x_1625.y, x_1626.z, x_1626.w);
        let x_1628 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1628.x, x_1628.x, x_1628.y, x_1628.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1631 : vec4<f32> = u_xlat8;
        let x_1633 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1631.x, x_1631.x, x_1631.z, x_1631.z) * vec4<f32>(x_1633.x, x_1633.x, x_1633.z, x_1633.z));
        let x_1636 : vec4<f32> = u_xlat9;
        let x_1640 : vec2<f32> = (vec2<f32>(x_1636.y, x_1636.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1641 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1641.x, x_1640.x, x_1641.z, x_1640.y);
        let x_1643 : vec4<f32> = u_xlat9;
        let x_1646 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1643.x, x_1643.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1646.x, x_1646.y)));
        let x_1650 : vec4<f32> = u_xlat7;
        let x_1653 : vec2<f32> = (-(vec2<f32>(x_1650.x, x_1650.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1654 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1653.x, x_1654.y, x_1653.y, x_1654.w);
        let x_1656 : vec4<f32> = u_xlat7;
        let x_1658 : vec2<f32> = min(vec2<f32>(x_1656.x, x_1656.y), vec2<f32>(0.0f, 0.0f));
        let x_1659 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1658.x, x_1658.y, x_1659.z, x_1659.w);
        let x_1661 : vec4<f32> = u_xlat9;
        let x_1664 : vec4<f32> = u_xlat9;
        let x_1667 : vec4<f32> = u_xlat8;
        let x_1669 : vec2<f32> = ((-(vec2<f32>(x_1661.x, x_1661.y)) * vec2<f32>(x_1664.x, x_1664.y)) + vec2<f32>(x_1667.x, x_1667.z));
        let x_1670 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1669.x, x_1670.y, x_1669.y, x_1670.w);
        let x_1672 : vec4<f32> = u_xlat7;
        let x_1674 : vec2<f32> = max(vec2<f32>(x_1672.x, x_1672.y), vec2<f32>(0.0f, 0.0f));
        let x_1675 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1674.x, x_1674.y, x_1675.z, x_1675.w);
        let x_1677 : vec4<f32> = u_xlat9;
        let x_1680 : vec4<f32> = u_xlat9;
        let x_1683 : vec4<f32> = u_xlat8;
        let x_1685 : vec2<f32> = ((-(vec2<f32>(x_1677.x, x_1677.y)) * vec2<f32>(x_1680.x, x_1680.y)) + vec2<f32>(x_1683.y, x_1683.w));
        let x_1686 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1686.x, x_1685.x, x_1686.z, x_1685.y);
        let x_1688 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1688 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1692 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1692 * 0.081632003f);
        let x_1696 : vec2<f32> = u_xlat49;
        let x_1699 : vec2<f32> = (vec2<f32>(x_1696.y, x_1696.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1700 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1699.x, x_1699.y, x_1700.z, x_1700.w);
        let x_1702 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1702.x, x_1702.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1706 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1706 * 0.081632003f);
        let x_1710 : f32 = u_xlat11.y;
        u_xlat9.x = x_1710;
        let x_1712 : vec4<f32> = u_xlat7;
        let x_1719 : vec2<f32> = ((vec2<f32>(x_1712.x, x_1712.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1720 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1720.x, x_1719.x, x_1720.z, x_1719.y);
        let x_1722 : vec4<f32> = u_xlat7;
        let x_1726 : vec2<f32> = ((vec2<f32>(x_1722.x, x_1722.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1727 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1726.x, x_1727.y, x_1726.y, x_1727.w);
        let x_1730 : f32 = u_xlat49.x;
        u_xlat8.y = x_1730;
        let x_1733 : f32 = u_xlat10.y;
        u_xlat8.w = x_1733;
        let x_1735 : vec4<f32> = u_xlat8;
        let x_1736 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1735 + x_1736);
        let x_1738 : vec4<f32> = u_xlat7;
        let x_1741 : vec2<f32> = ((vec2<f32>(x_1738.y, x_1738.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1742 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1742.x, x_1741.x, x_1742.z, x_1741.y);
        let x_1744 : vec4<f32> = u_xlat7;
        let x_1747 : vec2<f32> = ((vec2<f32>(x_1744.y, x_1744.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1748 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1747.x, x_1748.y, x_1747.y, x_1748.w);
        let x_1751 : f32 = u_xlat49.y;
        u_xlat10.y = x_1751;
        let x_1753 : vec4<f32> = u_xlat10;
        let x_1754 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1753 + x_1754);
        let x_1756 : vec4<f32> = u_xlat8;
        let x_1757 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1756 / x_1757);
        let x_1759 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1759 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1765 : vec4<f32> = u_xlat10;
        let x_1766 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1765 / x_1766);
        let x_1768 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1768 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1770 : vec4<f32> = u_xlat8;
        let x_1773 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1770.w, x_1770.x, x_1770.y, x_1770.z) * vec4<f32>(x_1773.x, x_1773.x, x_1773.x, x_1773.x));
        let x_1776 : vec4<f32> = u_xlat10;
        let x_1779 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1776.x, x_1776.w, x_1776.y, x_1776.z) * vec4<f32>(x_1779.y, x_1779.y, x_1779.y, x_1779.y));
        let x_1782 : vec4<f32> = u_xlat8;
        let x_1783 : vec3<f32> = vec3<f32>(x_1782.y, x_1782.z, x_1782.w);
        let x_1784 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1783.x, x_1784.y, x_1783.y, x_1783.z);
        let x_1787 : f32 = u_xlat10.x;
        u_xlat11.y = x_1787;
        let x_1789 : vec2<f32> = u_xlat48;
        let x_1792 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1795 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1789.x, x_1789.y, x_1789.x, x_1789.y) * vec4<f32>(x_1792.x, x_1792.y, x_1792.x, x_1792.y)) + vec4<f32>(x_1795.x, x_1795.y, x_1795.z, x_1795.y));
        let x_1798 : vec2<f32> = u_xlat48;
        let x_1800 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1803 : vec4<f32> = u_xlat11;
        let x_1805 : vec2<f32> = ((x_1798 * vec2<f32>(x_1800.x, x_1800.y)) + vec2<f32>(x_1803.w, x_1803.y));
        let x_1806 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1805.x, x_1805.y, x_1806.z, x_1806.w);
        let x_1809 : f32 = u_xlat11.y;
        u_xlat8.y = x_1809;
        let x_1812 : f32 = u_xlat10.z;
        u_xlat11.y = x_1812;
        let x_1814 : vec2<f32> = u_xlat48;
        let x_1817 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1820 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1814.x, x_1814.y, x_1814.x, x_1814.y) * vec4<f32>(x_1817.x, x_1817.y, x_1817.x, x_1817.y)) + vec4<f32>(x_1820.x, x_1820.y, x_1820.z, x_1820.y));
        let x_1824 : vec2<f32> = u_xlat48;
        let x_1826 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1829 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_1824 * vec2<f32>(x_1826.x, x_1826.y)) + vec2<f32>(x_1829.w, x_1829.y));
        let x_1833 : f32 = u_xlat11.y;
        u_xlat8.z = x_1833;
        let x_1835 : vec2<f32> = u_xlat48;
        let x_1838 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1841 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1835.x, x_1835.y, x_1835.x, x_1835.y) * vec4<f32>(x_1838.x, x_1838.y, x_1838.x, x_1838.y)) + vec4<f32>(x_1841.x, x_1841.y, x_1841.x, x_1841.z));
        let x_1845 : f32 = u_xlat10.w;
        u_xlat11.y = x_1845;
        let x_1848 : vec2<f32> = u_xlat48;
        let x_1851 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1854 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1848.x, x_1848.y, x_1848.x, x_1848.y) * vec4<f32>(x_1851.x, x_1851.y, x_1851.x, x_1851.y)) + vec4<f32>(x_1854.x, x_1854.y, x_1854.z, x_1854.y));
        let x_1858 : vec2<f32> = u_xlat48;
        let x_1860 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1863 : vec4<f32> = u_xlat11;
        let x_1865 : vec2<f32> = ((x_1858 * vec2<f32>(x_1860.x, x_1860.y)) + vec2<f32>(x_1863.w, x_1863.y));
        let x_1866 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1865.x, x_1865.y, x_1866.z);
        let x_1869 : f32 = u_xlat11.y;
        u_xlat8.w = x_1869;
        let x_1872 : vec2<f32> = u_xlat48;
        let x_1874 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1877 : vec4<f32> = u_xlat8;
        u_xlat17 = ((x_1872 * vec2<f32>(x_1874.x, x_1874.y)) + vec2<f32>(x_1877.x, x_1877.w));
        let x_1880 : vec4<f32> = u_xlat11;
        let x_1881 : vec3<f32> = vec3<f32>(x_1880.x, x_1880.z, x_1880.w);
        let x_1882 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1881.x, x_1882.y, x_1881.y, x_1881.z);
        let x_1884 : vec2<f32> = u_xlat48;
        let x_1887 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1890 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1884.x, x_1884.y, x_1884.x, x_1884.y) * vec4<f32>(x_1887.x, x_1887.y, x_1887.x, x_1887.y)) + vec4<f32>(x_1890.x, x_1890.y, x_1890.z, x_1890.y));
        let x_1894 : vec2<f32> = u_xlat48;
        let x_1896 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1899 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_1894 * vec2<f32>(x_1896.x, x_1896.y)) + vec2<f32>(x_1899.w, x_1899.y));
        let x_1903 : f32 = u_xlat8.x;
        u_xlat10.x = x_1903;
        let x_1905 : vec2<f32> = u_xlat48;
        let x_1907 : vec4<f32> = x_690.x_MainLightShadowmapSize;
        let x_1910 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_1905 * vec2<f32>(x_1907.x, x_1907.y)) + vec2<f32>(x_1910.x, x_1910.y));
        let x_1914 : vec4<f32> = u_xlat7;
        let x_1916 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1914.x, x_1914.x, x_1914.x, x_1914.x) * x_1916);
        let x_1919 : vec4<f32> = u_xlat7;
        let x_1921 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_1919.y, x_1919.y, x_1919.y, x_1919.y) * x_1921);
        let x_1924 : vec4<f32> = u_xlat7;
        let x_1926 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_1924.z, x_1924.z, x_1924.z, x_1924.z) * x_1926);
        let x_1928 : vec4<f32> = u_xlat7;
        let x_1930 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_1928.w, x_1928.w, x_1928.w, x_1928.w) * x_1930);
        let x_1933 : vec4<f32> = u_xlat12;
        let x_1934 : vec2<f32> = vec2<f32>(x_1933.x, x_1933.y);
        let x_1936 : f32 = u_xlat21.z;
        txVec13 = vec3<f32>(x_1934.x, x_1934.y, x_1936);
        let x_1943 : vec3<f32> = txVec13;
        let x_1945 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1943.xy, x_1943.z);
        u_xlat8.x = x_1945;
        let x_1948 : vec4<f32> = u_xlat12;
        let x_1949 : vec2<f32> = vec2<f32>(x_1948.z, x_1948.w);
        let x_1951 : f32 = u_xlat21.z;
        txVec14 = vec3<f32>(x_1949.x, x_1949.y, x_1951);
        let x_1959 : vec3<f32> = txVec14;
        let x_1961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1959.xy, x_1959.z);
        u_xlat71 = x_1961;
        let x_1962 : f32 = u_xlat71;
        let x_1964 : f32 = u_xlat18.y;
        u_xlat71 = (x_1962 * x_1964);
        let x_1967 : f32 = u_xlat18.x;
        let x_1969 : f32 = u_xlat8.x;
        let x_1971 : f32 = u_xlat71;
        u_xlat8.x = ((x_1967 * x_1969) + x_1971);
        let x_1975 : vec4<f32> = u_xlat13;
        let x_1976 : vec2<f32> = vec2<f32>(x_1975.x, x_1975.y);
        let x_1978 : f32 = u_xlat21.z;
        txVec15 = vec3<f32>(x_1976.x, x_1976.y, x_1978);
        let x_1985 : vec3<f32> = txVec15;
        let x_1987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1985.xy, x_1985.z);
        u_xlat71 = x_1987;
        let x_1989 : f32 = u_xlat18.z;
        let x_1990 : f32 = u_xlat71;
        let x_1993 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_1989 * x_1990) + x_1993);
        let x_1997 : vec4<f32> = u_xlat15;
        let x_1998 : vec2<f32> = vec2<f32>(x_1997.x, x_1997.y);
        let x_2000 : f32 = u_xlat21.z;
        txVec16 = vec3<f32>(x_1998.x, x_1998.y, x_2000);
        let x_2007 : vec3<f32> = txVec16;
        let x_2009 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2007.xy, x_2007.z);
        u_xlat71 = x_2009;
        let x_2011 : f32 = u_xlat18.w;
        let x_2012 : f32 = u_xlat71;
        let x_2015 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2011 * x_2012) + x_2015);
        let x_2019 : vec4<f32> = u_xlat14;
        let x_2020 : vec2<f32> = vec2<f32>(x_2019.x, x_2019.y);
        let x_2022 : f32 = u_xlat21.z;
        txVec17 = vec3<f32>(x_2020.x, x_2020.y, x_2022);
        let x_2029 : vec3<f32> = txVec17;
        let x_2031 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2029.xy, x_2029.z);
        u_xlat71 = x_2031;
        let x_2033 : f32 = u_xlat19.x;
        let x_2034 : f32 = u_xlat71;
        let x_2037 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2033 * x_2034) + x_2037);
        let x_2041 : vec4<f32> = u_xlat14;
        let x_2042 : vec2<f32> = vec2<f32>(x_2041.z, x_2041.w);
        let x_2044 : f32 = u_xlat21.z;
        txVec18 = vec3<f32>(x_2042.x, x_2042.y, x_2044);
        let x_2051 : vec3<f32> = txVec18;
        let x_2053 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2051.xy, x_2051.z);
        u_xlat71 = x_2053;
        let x_2055 : f32 = u_xlat19.y;
        let x_2056 : f32 = u_xlat71;
        let x_2059 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2055 * x_2056) + x_2059);
        let x_2063 : vec2<f32> = u_xlat55;
        let x_2065 : f32 = u_xlat21.z;
        txVec19 = vec3<f32>(x_2063.x, x_2063.y, x_2065);
        let x_2072 : vec3<f32> = txVec19;
        let x_2074 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2072.xy, x_2072.z);
        u_xlat71 = x_2074;
        let x_2076 : f32 = u_xlat19.z;
        let x_2077 : f32 = u_xlat71;
        let x_2080 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2076 * x_2077) + x_2080);
        let x_2084 : vec4<f32> = u_xlat15;
        let x_2085 : vec2<f32> = vec2<f32>(x_2084.z, x_2084.w);
        let x_2087 : f32 = u_xlat21.z;
        txVec20 = vec3<f32>(x_2085.x, x_2085.y, x_2087);
        let x_2094 : vec3<f32> = txVec20;
        let x_2096 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2094.xy, x_2094.z);
        u_xlat71 = x_2096;
        let x_2098 : f32 = u_xlat19.w;
        let x_2099 : f32 = u_xlat71;
        let x_2102 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2098 * x_2099) + x_2102);
        let x_2106 : vec4<f32> = u_xlat16;
        let x_2107 : vec2<f32> = vec2<f32>(x_2106.x, x_2106.y);
        let x_2109 : f32 = u_xlat21.z;
        txVec21 = vec3<f32>(x_2107.x, x_2107.y, x_2109);
        let x_2116 : vec3<f32> = txVec21;
        let x_2118 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2116.xy, x_2116.z);
        u_xlat71 = x_2118;
        let x_2120 : f32 = u_xlat20.x;
        let x_2121 : f32 = u_xlat71;
        let x_2124 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2120 * x_2121) + x_2124);
        let x_2128 : vec4<f32> = u_xlat16;
        let x_2129 : vec2<f32> = vec2<f32>(x_2128.z, x_2128.w);
        let x_2131 : f32 = u_xlat21.z;
        txVec22 = vec3<f32>(x_2129.x, x_2129.y, x_2131);
        let x_2138 : vec3<f32> = txVec22;
        let x_2140 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2138.xy, x_2138.z);
        u_xlat71 = x_2140;
        let x_2142 : f32 = u_xlat20.y;
        let x_2143 : f32 = u_xlat71;
        let x_2146 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2142 * x_2143) + x_2146);
        let x_2150 : vec3<f32> = u_xlat29;
        let x_2151 : vec2<f32> = vec2<f32>(x_2150.x, x_2150.y);
        let x_2153 : f32 = u_xlat21.z;
        txVec23 = vec3<f32>(x_2151.x, x_2151.y, x_2153);
        let x_2160 : vec3<f32> = txVec23;
        let x_2162 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2160.xy, x_2160.z);
        u_xlat29.x = x_2162;
        let x_2165 : f32 = u_xlat20.z;
        let x_2167 : f32 = u_xlat29.x;
        let x_2170 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2165 * x_2167) + x_2170);
        let x_2174 : vec2<f32> = u_xlat17;
        let x_2176 : f32 = u_xlat21.z;
        txVec24 = vec3<f32>(x_2174.x, x_2174.y, x_2176);
        let x_2183 : vec3<f32> = txVec24;
        let x_2185 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2183.xy, x_2183.z);
        u_xlat29.x = x_2185;
        let x_2188 : f32 = u_xlat20.w;
        let x_2190 : f32 = u_xlat29.x;
        let x_2193 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2188 * x_2190) + x_2193);
        let x_2197 : vec4<f32> = u_xlat11;
        let x_2198 : vec2<f32> = vec2<f32>(x_2197.x, x_2197.y);
        let x_2200 : f32 = u_xlat21.z;
        txVec25 = vec3<f32>(x_2198.x, x_2198.y, x_2200);
        let x_2207 : vec3<f32> = txVec25;
        let x_2209 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2207.xy, x_2207.z);
        u_xlat29.x = x_2209;
        let x_2212 : f32 = u_xlat7.x;
        let x_2214 : f32 = u_xlat29.x;
        let x_2217 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_2212 * x_2214) + x_2217);
        let x_2221 : vec4<f32> = u_xlat11;
        let x_2222 : vec2<f32> = vec2<f32>(x_2221.z, x_2221.w);
        let x_2224 : f32 = u_xlat21.z;
        txVec26 = vec3<f32>(x_2222.x, x_2222.y, x_2224);
        let x_2231 : vec3<f32> = txVec26;
        let x_2233 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2231.xy, x_2231.z);
        u_xlat8.x = x_2233;
        let x_2236 : f32 = u_xlat7.y;
        let x_2238 : f32 = u_xlat8.x;
        let x_2241 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2236 * x_2238) + x_2241);
        let x_2245 : vec2<f32> = u_xlat52;
        let x_2247 : f32 = u_xlat21.z;
        txVec27 = vec3<f32>(x_2245.x, x_2245.y, x_2247);
        let x_2254 : vec3<f32> = txVec27;
        let x_2256 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2254.xy, x_2254.z);
        u_xlat28.x = x_2256;
        let x_2259 : f32 = u_xlat7.z;
        let x_2261 : f32 = u_xlat28.x;
        let x_2264 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2259 * x_2261) + x_2264);
        let x_2268 : vec2<f32> = u_xlat48;
        let x_2270 : f32 = u_xlat21.z;
        txVec28 = vec3<f32>(x_2268.x, x_2268.y, x_2270);
        let x_2277 : vec3<f32> = txVec28;
        let x_2279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2277.xy, x_2277.z);
        u_xlat48.x = x_2279;
        let x_2282 : f32 = u_xlat7.w;
        let x_2284 : f32 = u_xlat48.x;
        let x_2287 : f32 = u_xlat7.x;
        u_xlat27.x = ((x_2282 * x_2284) + x_2287);
      }
    }
  } else {
    let x_2292 : vec3<f32> = u_xlat21;
    let x_2293 : vec2<f32> = vec2<f32>(x_2292.x, x_2292.y);
    let x_2295 : f32 = u_xlat21.z;
    txVec29 = vec3<f32>(x_2293.x, x_2293.y, x_2295);
    let x_2302 : vec3<f32> = txVec29;
    let x_2304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2302.xy, x_2302.z);
    u_xlat27.x = x_2304;
  }
  let x_2307 : f32 = x_690.x_MainLightShadowParams.x;
  u_xlat21.x = (-(x_2307) + 1.0f);
  let x_2312 : f32 = u_xlat27.x;
  let x_2314 : f32 = x_690.x_MainLightShadowParams.x;
  let x_2317 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_2312 * x_2314) + x_2317);
  let x_2322 : f32 = u_xlat21.z;
  u_xlatb42 = (0.0f >= x_2322);
  let x_2326 : f32 = u_xlat21.z;
  u_xlatb63 = (x_2326 >= 1.0f);
  let x_2328 : bool = u_xlatb63;
  let x_2329 : bool = u_xlatb42;
  u_xlatb42 = (x_2328 | x_2329);
  let x_2331 : bool = u_xlatb42;
  if (x_2331) {
    x_2332 = 1.0f;
  } else {
    let x_2337 : f32 = u_xlat21.x;
    x_2332 = x_2337;
  }
  let x_2338 : f32 = x_2332;
  u_xlat21.x = x_2338;
  let x_2340 : vec3<f32> = vs_INTERP0;
  let x_2342 : vec3<f32> = x_146.x_WorldSpaceCameraPos;
  u_xlat27 = (x_2340 + -(x_2342));
  let x_2345 : vec3<f32> = u_xlat27;
  let x_2346 : vec3<f32> = u_xlat27;
  u_xlat42 = dot(x_2345, x_2346);
  let x_2348 : f32 = u_xlat42;
  let x_2350 : f32 = x_690.x_MainLightShadowParams.z;
  let x_2353 : f32 = x_690.x_MainLightShadowParams.w;
  u_xlat42 = ((x_2348 * x_2350) + x_2353);
  let x_2355 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2355, 0.0f, 1.0f);
  let x_2359 : f32 = u_xlat21.x;
  u_xlat63 = (-(x_2359) + 1.0f);
  let x_2362 : f32 = u_xlat42;
  let x_2363 : f32 = u_xlat63;
  let x_2366 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_2362 * x_2363) + x_2366);
  let x_2369 : vec4<f32> = u_xlat6;
  let x_2372 : vec4<f32> = x_146.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_2369.x, x_2369.x, x_2369.x) * vec3<f32>(x_2372.x, x_2372.y, x_2372.z));
  let x_2375 : vec3<f32> = u_xlat5;
  let x_2377 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(-(x_2375), vec3<f32>(x_2377.x, x_2377.y, x_2377.z));
  let x_2380 : f32 = u_xlat42;
  let x_2381 : f32 = u_xlat42;
  u_xlat42 = (x_2380 + x_2381);
  let x_2383 : vec4<f32> = u_xlat4;
  let x_2385 : f32 = u_xlat42;
  let x_2389 : vec3<f32> = u_xlat5;
  let x_2391 : vec3<f32> = ((vec3<f32>(x_2383.x, x_2383.y, x_2383.z) * -(vec3<f32>(x_2385, x_2385, x_2385))) + -(x_2389));
  let x_2392 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2391.x, x_2391.y, x_2391.z, x_2392.w);
  let x_2394 : vec4<f32> = u_xlat4;
  let x_2396 : vec3<f32> = u_xlat5;
  u_xlat42 = dot(vec3<f32>(x_2394.x, x_2394.y, x_2394.z), x_2396);
  let x_2398 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2398, 0.0f, 1.0f);
  let x_2400 : f32 = u_xlat42;
  u_xlat42 = (-(x_2400) + 1.0f);
  let x_2403 : f32 = u_xlat42;
  let x_2404 : f32 = u_xlat42;
  u_xlat42 = (x_2403 * x_2404);
  let x_2406 : f32 = u_xlat42;
  let x_2407 : f32 = u_xlat42;
  u_xlat42 = (x_2406 * x_2407);
  let x_2409 : f32 = u_xlat64;
  u_xlat63 = ((-(x_2409) * 0.699999988f) + 1.700000048f);
  let x_2415 : f32 = u_xlat63;
  let x_2416 : f32 = u_xlat64;
  u_xlat63 = (x_2415 * x_2416);
  let x_2418 : f32 = u_xlat63;
  u_xlat63 = (x_2418 * 6.0f);
  let x_2429 : vec4<f32> = u_xlat7;
  let x_2431 : f32 = u_xlat63;
  let x_2432 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2429.x, x_2429.y, x_2429.z), x_2431);
  u_xlat7 = x_2432;
  let x_2434 : f32 = u_xlat7.w;
  u_xlat63 = (x_2434 + -1.0f);
  let x_2437 : f32 = x_59.unity_SpecCube0_HDR.w;
  let x_2438 : f32 = u_xlat63;
  u_xlat63 = ((x_2437 * x_2438) + 1.0f);
  let x_2441 : f32 = u_xlat63;
  u_xlat63 = max(x_2441, 0.0f);
  let x_2443 : f32 = u_xlat63;
  u_xlat63 = log2(x_2443);
  let x_2445 : f32 = u_xlat63;
  let x_2447 : f32 = x_59.unity_SpecCube0_HDR.y;
  u_xlat63 = (x_2445 * x_2447);
  let x_2449 : f32 = u_xlat63;
  u_xlat63 = exp2(x_2449);
  let x_2451 : f32 = u_xlat63;
  let x_2453 : f32 = x_59.unity_SpecCube0_HDR.x;
  u_xlat63 = (x_2451 * x_2453);
  let x_2455 : vec4<f32> = u_xlat7;
  let x_2457 : f32 = u_xlat63;
  let x_2459 : vec3<f32> = (vec3<f32>(x_2455.x, x_2455.y, x_2455.z) * vec3<f32>(x_2457, x_2457, x_2457));
  let x_2460 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2459.x, x_2459.y, x_2459.z, x_2460.w);
  let x_2462 : f32 = u_xlat65;
  let x_2464 : f32 = u_xlat65;
  let x_2468 : vec2<f32> = ((vec2<f32>(x_2462, x_2462) * vec2<f32>(x_2464, x_2464)) + vec2<f32>(-1.0f, 1.0f));
  let x_2469 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2468.x, x_2468.y, x_2469.z, x_2469.w);
  let x_2472 : f32 = u_xlat8.y;
  u_xlat63 = (1.0f / x_2472);
  let x_2474 : vec3<f32> = u_xlat2;
  let x_2476 : vec4<f32> = u_xlat0;
  u_xlat29 = (-(x_2474) + vec3<f32>(x_2476.x, x_2476.x, x_2476.x));
  let x_2479 : f32 = u_xlat42;
  let x_2481 : vec3<f32> = u_xlat29;
  let x_2483 : vec3<f32> = u_xlat2;
  u_xlat29 = ((vec3<f32>(x_2479, x_2479, x_2479) * x_2481) + x_2483);
  let x_2485 : f32 = u_xlat63;
  let x_2487 : vec3<f32> = u_xlat29;
  let x_2488 : vec3<f32> = (vec3<f32>(x_2485, x_2485, x_2485) * x_2487);
  let x_2489 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2488.x, x_2489.y, x_2488.y, x_2488.z);
  let x_2491 : vec4<f32> = u_xlat0;
  let x_2493 : vec4<f32> = u_xlat7;
  let x_2495 : vec3<f32> = (vec3<f32>(x_2491.x, x_2491.z, x_2491.w) * vec3<f32>(x_2493.x, x_2493.y, x_2493.z));
  let x_2496 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2495.x, x_2496.y, x_2495.y, x_2495.z);
  let x_2498 : vec4<f32> = u_xlat1;
  let x_2500 : vec3<f32> = u_xlat3;
  let x_2502 : vec4<f32> = u_xlat0;
  let x_2504 : vec3<f32> = ((vec3<f32>(x_2498.x, x_2498.y, x_2498.z) * x_2500) + vec3<f32>(x_2502.x, x_2502.z, x_2502.w));
  let x_2505 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2504.x, x_2505.y, x_2504.y, x_2504.z);
  let x_2508 : f32 = u_xlat21.x;
  let x_2510 : f32 = x_59.unity_LightData.z;
  u_xlat21.x = (x_2508 * x_2510);
  let x_2513 : vec4<f32> = u_xlat4;
  let x_2516 : vec4<f32> = x_146.x_MainLightPosition;
  u_xlat1.x = dot(vec3<f32>(x_2513.x, x_2513.y, x_2513.z), vec3<f32>(x_2516.x, x_2516.y, x_2516.z));
  let x_2521 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2521, 0.0f, 1.0f);
  let x_2525 : f32 = u_xlat21.x;
  let x_2527 : f32 = u_xlat1.x;
  u_xlat21.x = (x_2525 * x_2527);
  let x_2530 : vec3<f32> = u_xlat21;
  let x_2532 : vec3<f32> = u_xlat27;
  let x_2533 : vec3<f32> = (vec3<f32>(x_2530.x, x_2530.x, x_2530.x) * x_2532);
  let x_2534 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2533.x, x_2533.y, x_2533.z, x_2534.w);
  let x_2536 : vec3<f32> = u_xlat5;
  let x_2538 : vec4<f32> = x_146.x_MainLightPosition;
  u_xlat27 = (x_2536 + vec3<f32>(x_2538.x, x_2538.y, x_2538.z));
  let x_2541 : vec3<f32> = u_xlat27;
  let x_2542 : vec3<f32> = u_xlat27;
  u_xlat21.x = dot(x_2541, x_2542);
  let x_2546 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_2546, 1.17549435e-37f);
  let x_2550 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_2550);
  let x_2553 : vec3<f32> = u_xlat21;
  let x_2555 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_2553.x, x_2553.x, x_2553.x) * x_2555);
  let x_2557 : vec4<f32> = u_xlat4;
  let x_2559 : vec3<f32> = u_xlat27;
  u_xlat21.x = dot(vec3<f32>(x_2557.x, x_2557.y, x_2557.z), x_2559);
  let x_2563 : f32 = u_xlat21.x;
  u_xlat21.x = clamp(x_2563, 0.0f, 1.0f);
  let x_2567 : vec4<f32> = x_146.x_MainLightPosition;
  let x_2569 : vec3<f32> = u_xlat27;
  u_xlat64 = dot(vec3<f32>(x_2567.x, x_2567.y, x_2567.z), x_2569);
  let x_2571 : f32 = u_xlat64;
  u_xlat64 = clamp(x_2571, 0.0f, 1.0f);
  let x_2574 : f32 = u_xlat21.x;
  let x_2576 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2574 * x_2576);
  let x_2580 : f32 = u_xlat21.x;
  let x_2582 : f32 = u_xlat8.x;
  u_xlat21.x = ((x_2580 * x_2582) + 1.000010014f);
  let x_2587 : f32 = u_xlat64;
  let x_2588 : f32 = u_xlat64;
  u_xlat64 = (x_2587 * x_2588);
  let x_2591 : f32 = u_xlat21.x;
  let x_2593 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2591 * x_2593);
  let x_2596 : f32 = u_xlat64;
  u_xlat64 = max(x_2596, 0.100000001f);
  let x_2599 : f32 = u_xlat21.x;
  let x_2600 : f32 = u_xlat64;
  u_xlat21.x = (x_2599 * x_2600);
  let x_2603 : f32 = u_xlat67;
  let x_2605 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2603 * x_2605);
  let x_2608 : f32 = u_xlat66;
  let x_2610 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2608 / x_2610);
  let x_2613 : vec3<f32> = u_xlat2;
  let x_2614 : vec3<f32> = u_xlat21;
  let x_2617 : vec3<f32> = u_xlat3;
  u_xlat27 = ((x_2613 * vec3<f32>(x_2614.x, x_2614.x, x_2614.x)) + x_2617);
  let x_2619 : vec4<f32> = u_xlat1;
  let x_2621 : vec3<f32> = u_xlat27;
  let x_2622 : vec3<f32> = (vec3<f32>(x_2619.x, x_2619.y, x_2619.z) * x_2621);
  let x_2623 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2622.x, x_2622.y, x_2622.z, x_2623.w);
  let x_2626 : f32 = x_146.x_AdditionalLightsCount.x;
  let x_2628 : f32 = x_59.unity_LightData.y;
  u_xlat21.x = min(x_2626, x_2628);
  let x_2632 : f32 = u_xlat21.x;
  u_xlatu21 = bitcast<u32>(i32(x_2632));
  u_xlat27.x = 0.0f;
  u_xlat27.y = 0.0f;
  u_xlat27.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2644 : u32 = u_xlatu_loop_1;
    let x_2645 : u32 = u_xlatu21;
    if ((x_2644 < x_2645)) {
    } else {
      break;
    }
    let x_2648 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_2648 >> 2u);
    let x_2651 : u32 = u_xlatu_loop_1;
    u_xlati7 = bitcast<i32>((x_2651 & 3u));
    let x_2654 : u32 = u_xlatu65;
    let x_2657 : vec4<f32> = x_59.unity_LightIndices[bitcast<i32>(x_2654)];
    let x_2667 : i32 = u_xlati7;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2672 : vec4<u32> = indexable[x_2667];
    u_xlat65 = dot(x_2657, bitcast<vec4<f32>>(x_2672));
    let x_2676 : f32 = u_xlat65;
    u_xlati65 = i32(x_2676);
    let x_2678 : vec3<f32> = vs_INTERP0;
    let x_2690 : i32 = u_xlati65;
    let x_2692 : vec4<f32> = x_2689.x_AdditionalLightsPosition[x_2690];
    let x_2695 : i32 = u_xlati65;
    let x_2697 : vec4<f32> = x_2689.x_AdditionalLightsPosition[x_2695];
    let x_2699 : vec3<f32> = ((-(x_2678) * vec3<f32>(x_2692.w, x_2692.w, x_2692.w)) + vec3<f32>(x_2697.x, x_2697.y, x_2697.z));
    let x_2700 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2699.x, x_2699.y, x_2699.z, x_2700.w);
    let x_2703 : vec4<f32> = u_xlat7;
    let x_2705 : vec4<f32> = u_xlat7;
    u_xlat70 = dot(vec3<f32>(x_2703.x, x_2703.y, x_2703.z), vec3<f32>(x_2705.x, x_2705.y, x_2705.z));
    let x_2708 : f32 = u_xlat70;
    u_xlat70 = max(x_2708, 6.10351562e-05f);
    let x_2711 : f32 = u_xlat70;
    u_xlat29.x = inverseSqrt(x_2711);
    let x_2714 : vec4<f32> = u_xlat7;
    let x_2716 : vec3<f32> = u_xlat29;
    let x_2718 : vec3<f32> = (vec3<f32>(x_2714.x, x_2714.y, x_2714.z) * vec3<f32>(x_2716.x, x_2716.x, x_2716.x));
    let x_2719 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2718.x, x_2718.y, x_2718.z, x_2719.w);
    let x_2722 : f32 = u_xlat70;
    u_xlat50 = (1.0f / x_2722);
    let x_2724 : f32 = u_xlat70;
    let x_2725 : i32 = u_xlati65;
    let x_2727 : f32 = x_2689.x_AdditionalLightsAttenuation[x_2725].x;
    u_xlat70 = (x_2724 * x_2727);
    let x_2729 : f32 = u_xlat70;
    let x_2731 : f32 = u_xlat70;
    u_xlat70 = ((-(x_2729) * x_2731) + 1.0f);
    let x_2734 : f32 = u_xlat70;
    u_xlat70 = max(x_2734, 0.0f);
    let x_2736 : f32 = u_xlat70;
    let x_2737 : f32 = u_xlat70;
    u_xlat70 = (x_2736 * x_2737);
    let x_2739 : f32 = u_xlat70;
    let x_2740 : f32 = u_xlat50;
    u_xlat70 = (x_2739 * x_2740);
    let x_2742 : i32 = u_xlati65;
    let x_2744 : vec4<f32> = x_2689.x_AdditionalLightsSpotDir[x_2742];
    let x_2746 : vec4<f32> = u_xlat9;
    u_xlat50 = dot(vec3<f32>(x_2744.x, x_2744.y, x_2744.z), vec3<f32>(x_2746.x, x_2746.y, x_2746.z));
    let x_2749 : f32 = u_xlat50;
    let x_2750 : i32 = u_xlati65;
    let x_2752 : f32 = x_2689.x_AdditionalLightsAttenuation[x_2750].z;
    let x_2754 : i32 = u_xlati65;
    let x_2756 : f32 = x_2689.x_AdditionalLightsAttenuation[x_2754].w;
    u_xlat50 = ((x_2749 * x_2752) + x_2756);
    let x_2758 : f32 = u_xlat50;
    u_xlat50 = clamp(x_2758, 0.0f, 1.0f);
    let x_2760 : f32 = u_xlat50;
    let x_2761 : f32 = u_xlat50;
    u_xlat50 = (x_2760 * x_2761);
    let x_2763 : f32 = u_xlat70;
    let x_2764 : f32 = u_xlat50;
    u_xlat70 = (x_2763 * x_2764);
    let x_2766 : vec4<f32> = u_xlat6;
    let x_2768 : i32 = u_xlati65;
    let x_2770 : vec4<f32> = x_2689.x_AdditionalLightsColor[x_2768];
    let x_2772 : vec3<f32> = (vec3<f32>(x_2766.x, x_2766.x, x_2766.x) * vec3<f32>(x_2770.x, x_2770.y, x_2770.z));
    let x_2773 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2772.x, x_2772.y, x_2772.z, x_2773.w);
    let x_2775 : vec4<f32> = u_xlat4;
    let x_2777 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2775.x, x_2775.y, x_2775.z), vec3<f32>(x_2777.x, x_2777.y, x_2777.z));
    let x_2780 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2780, 0.0f, 1.0f);
    let x_2782 : f32 = u_xlat65;
    let x_2783 : f32 = u_xlat70;
    u_xlat65 = (x_2782 * x_2783);
    let x_2785 : f32 = u_xlat65;
    let x_2787 : vec4<f32> = u_xlat10;
    let x_2789 : vec3<f32> = (vec3<f32>(x_2785, x_2785, x_2785) * vec3<f32>(x_2787.x, x_2787.y, x_2787.z));
    let x_2790 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2789.x, x_2789.y, x_2789.z, x_2790.w);
    let x_2792 : vec4<f32> = u_xlat7;
    let x_2794 : vec3<f32> = u_xlat29;
    let x_2797 : vec3<f32> = u_xlat5;
    let x_2798 : vec3<f32> = ((vec3<f32>(x_2792.x, x_2792.y, x_2792.z) * vec3<f32>(x_2794.x, x_2794.x, x_2794.x)) + x_2797);
    let x_2799 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2798.x, x_2798.y, x_2798.z, x_2799.w);
    let x_2801 : vec4<f32> = u_xlat7;
    let x_2803 : vec4<f32> = u_xlat7;
    u_xlat65 = dot(vec3<f32>(x_2801.x, x_2801.y, x_2801.z), vec3<f32>(x_2803.x, x_2803.y, x_2803.z));
    let x_2806 : f32 = u_xlat65;
    u_xlat65 = max(x_2806, 1.17549435e-37f);
    let x_2808 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_2808);
    let x_2810 : f32 = u_xlat65;
    let x_2812 : vec4<f32> = u_xlat7;
    let x_2814 : vec3<f32> = (vec3<f32>(x_2810, x_2810, x_2810) * vec3<f32>(x_2812.x, x_2812.y, x_2812.z));
    let x_2815 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2814.x, x_2814.y, x_2814.z, x_2815.w);
    let x_2817 : vec4<f32> = u_xlat4;
    let x_2819 : vec4<f32> = u_xlat7;
    u_xlat65 = dot(vec3<f32>(x_2817.x, x_2817.y, x_2817.z), vec3<f32>(x_2819.x, x_2819.y, x_2819.z));
    let x_2822 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2822, 0.0f, 1.0f);
    let x_2824 : vec4<f32> = u_xlat9;
    let x_2826 : vec4<f32> = u_xlat7;
    u_xlat7.x = dot(vec3<f32>(x_2824.x, x_2824.y, x_2824.z), vec3<f32>(x_2826.x, x_2826.y, x_2826.z));
    let x_2831 : f32 = u_xlat7.x;
    u_xlat7.x = clamp(x_2831, 0.0f, 1.0f);
    let x_2834 : f32 = u_xlat65;
    let x_2835 : f32 = u_xlat65;
    u_xlat65 = (x_2834 * x_2835);
    let x_2837 : f32 = u_xlat65;
    let x_2839 : f32 = u_xlat8.x;
    u_xlat65 = ((x_2837 * x_2839) + 1.000010014f);
    let x_2843 : f32 = u_xlat7.x;
    let x_2845 : f32 = u_xlat7.x;
    u_xlat7.x = (x_2843 * x_2845);
    let x_2848 : f32 = u_xlat65;
    let x_2849 : f32 = u_xlat65;
    u_xlat65 = (x_2848 * x_2849);
    let x_2852 : f32 = u_xlat7.x;
    u_xlat7.x = max(x_2852, 0.100000001f);
    let x_2855 : f32 = u_xlat65;
    let x_2857 : f32 = u_xlat7.x;
    u_xlat65 = (x_2855 * x_2857);
    let x_2859 : f32 = u_xlat67;
    let x_2860 : f32 = u_xlat65;
    u_xlat65 = (x_2859 * x_2860);
    let x_2862 : f32 = u_xlat66;
    let x_2863 : f32 = u_xlat65;
    u_xlat65 = (x_2862 / x_2863);
    let x_2865 : vec3<f32> = u_xlat2;
    let x_2866 : f32 = u_xlat65;
    let x_2869 : vec3<f32> = u_xlat3;
    let x_2870 : vec3<f32> = ((x_2865 * vec3<f32>(x_2866, x_2866, x_2866)) + x_2869);
    let x_2871 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2870.x, x_2870.y, x_2870.z, x_2871.w);
    let x_2873 : vec4<f32> = u_xlat7;
    let x_2875 : vec4<f32> = u_xlat10;
    let x_2878 : vec3<f32> = u_xlat27;
    u_xlat27 = ((vec3<f32>(x_2873.x, x_2873.y, x_2873.z) * vec3<f32>(x_2875.x, x_2875.y, x_2875.z)) + x_2878);

    continuing {
      let x_2880 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2880 + bitcast<u32>(1i));
    }
  }
  let x_2882 : vec4<f32> = u_xlat0;
  let x_2884 : f32 = u_xlat68;
  let x_2887 : vec4<f32> = u_xlat1;
  let x_2889 : vec3<f32> = ((vec3<f32>(x_2882.x, x_2882.z, x_2882.w) * vec3<f32>(x_2884, x_2884, x_2884)) + vec3<f32>(x_2887.x, x_2887.y, x_2887.z));
  let x_2890 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2889.x, x_2889.y, x_2889.z, x_2890.w);
  let x_2894 : vec3<f32> = u_xlat27;
  let x_2895 : vec4<f32> = u_xlat0;
  let x_2897 : vec3<f32> = (x_2894 + vec3<f32>(x_2895.x, x_2895.y, x_2895.z));
  let x_2898 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2897.x, x_2897.y, x_2897.z, x_2898.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0);
}

