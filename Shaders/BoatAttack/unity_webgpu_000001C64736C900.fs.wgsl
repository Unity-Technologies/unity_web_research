type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraNormalsTexture : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var x_233 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var x_519 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var x_791 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var x_1058 : vec3<f32>;
  var u_xlatb11 : bool;
  var x_1306 : vec3<f32>;
  var x_1571 : vec3<f32>;
  var x_1823 : vec3<f32>;
  var x_2087 : vec3<f32>;
  var x_2339 : vec3<f32>;
  var x_2604 : vec3<f32>;
  var x_2856 : vec3<f32>;
  var x_3122 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_95 : vec2<f32> = vs_TEXCOORD0;
  let x_97 : f32 = x_34.x_GlobalMipBias.x;
  let x_98 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_95, x_97);
  u_xlat1 = vec3<f32>(x_98.x, x_98.y, x_98.z);
  let x_104 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_104) + 1.0f);
  let x_110 : f32 = u_xlat0;
  let x_112 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_110 * x_112);
  let x_119 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_121 : vec2<f32> = vs_TEXCOORD0;
  let x_126 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat2 = ((vec3<f32>(x_119.x, x_119.y, x_119.z) * vec3<f32>(x_121.x, x_121.x, x_121.x)) + vec3<f32>(x_126.x, x_126.y, x_126.z));
  let x_131 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_133 : vec2<f32> = u_xlat14;
  let x_136 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_131.x, x_131.y, x_131.z) * vec3<f32>(x_133.x, x_133.x, x_133.x)) + x_136);
  let x_140 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_142 : f32 = u_xlat21;
  let x_145 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_140.x, x_140.y, x_140.z) * vec3<f32>(x_142, x_142, x_142)) + x_145);
  let x_147 : vec2<f32> = vs_TEXCOORD0;
  let x_149 : vec4<f32> = x_34.x_ScaledScreenParams;
  u_xlat14 = (x_147 * vec2<f32>(x_149.x, x_149.y));
  let x_154 : vec2<f32> = u_xlat14;
  let x_156 : vec4<f32> = x_34.x_SSAOParams;
  let x_158 : vec2<f32> = (x_154 * vec2<f32>(x_156.z, x_156.z));
  let x_159 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_158.x, x_158.y, x_159.z, x_159.w);
  let x_162 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec2<f32>(x_162.x, x_162.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_168 : f32 = u_xlat22;
  u_xlat22 = fract(x_168);
  let x_170 : f32 = u_xlat22;
  u_xlat22 = (x_170 * 52.982917786f);
  let x_173 : f32 = u_xlat22;
  u_xlat22 = fract(x_173);
  let x_176 : f32 = u_xlat22;
  u_xlat23 = fract(x_176);
  let x_178 : f32 = u_xlat23;
  u_xlat3.z = ((x_178 * 2.0f) + -1.0f);
  let x_184 : f32 = u_xlat22;
  u_xlat22 = (x_184 + 0.9296875f);
  let x_187 : f32 = u_xlat22;
  u_xlat22 = (x_187 * 6.283185482f);
  let x_191 : f32 = u_xlat3.z;
  let x_194 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_191) * x_194) + 1.0f);
  let x_197 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_197);
  let x_200 : f32 = u_xlat22;
  u_xlat4.x = sin(x_200);
  let x_204 : f32 = u_xlat22;
  u_xlat5.x = cos(x_204);
  let x_207 : f32 = u_xlat23;
  let x_209 : f32 = u_xlat5.x;
  u_xlat3.x = (x_207 * x_209);
  let x_212 : f32 = u_xlat23;
  let x_214 : f32 = u_xlat4.x;
  u_xlat3.y = (x_212 * x_214);
  let x_217 : vec4<f32> = u_xlat3;
  let x_221 : vec3<f32> = (vec3<f32>(x_217.x, x_217.y, x_217.z) * vec3<f32>(0.288675129f, 0.288675129f, 0.288675129f));
  let x_222 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_221.x, x_221.y, x_221.z, x_222.w);
  let x_224 : vec3<f32> = u_xlat1;
  let x_226 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(-(x_224), vec3<f32>(x_226.x, x_226.y, x_226.z));
  let x_230 : f32 = u_xlat22;
  u_xlatb22 = (x_230 >= 0.0f);
  let x_232 : bool = u_xlatb22;
  if (x_232) {
    let x_236 : vec4<f32> = u_xlat3;
    x_233 = -(vec3<f32>(x_236.x, x_236.y, x_236.z));
  } else {
    let x_240 : vec4<f32> = u_xlat3;
    x_233 = vec3<f32>(x_240.x, x_240.y, x_240.z);
  }
  let x_242 : vec3<f32> = x_233;
  let x_243 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_242.x, x_242.y, x_242.z, x_243.w);
  let x_245 : vec4<f32> = u_xlat3;
  let x_248 : vec4<f32> = x_34.x_SSAOParams;
  let x_251 : vec3<f32> = u_xlat2;
  let x_252 : vec3<f32> = ((vec3<f32>(x_245.x, x_245.y, x_245.z) * vec3<f32>(x_248.y, x_248.y, x_248.y)) + x_251);
  let x_253 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_252.x, x_252.y, x_252.z, x_253.w);
  let x_256 : vec4<f32> = u_xlat3;
  let x_260 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_262 : vec2<f32> = (vec2<f32>(x_256.y, x_256.y) * vec2<f32>(x_260.x, x_260.y));
  let x_263 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_262.x, x_263.y, x_262.y);
  let x_266 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_268 : vec4<f32> = u_xlat3;
  let x_271 : vec3<f32> = u_xlat10;
  let x_273 : vec2<f32> = ((vec2<f32>(x_266.x, x_266.y) * vec2<f32>(x_268.x, x_268.x)) + vec2<f32>(x_271.x, x_271.z));
  let x_274 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_273.x, x_273.y, x_274.z, x_274.w);
  let x_277 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_279 : vec4<f32> = u_xlat3;
  let x_282 : vec4<f32> = u_xlat3;
  let x_284 : vec2<f32> = ((vec2<f32>(x_277.x, x_277.y) * vec2<f32>(x_279.z, x_279.z)) + vec2<f32>(x_282.x, x_282.y));
  let x_285 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_284.x, x_284.y, x_285.z, x_285.w);
  let x_287 : vec4<f32> = u_xlat3;
  let x_290 : vec2<f32> = (vec2<f32>(x_287.x, x_287.y) + vec2<f32>(1.0f, 1.0f));
  let x_291 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_290.x, x_290.y, x_291.z, x_291.w);
  let x_293 : vec4<f32> = u_xlat3;
  let x_296 : vec2<f32> = (vec2<f32>(x_293.x, x_293.y) * vec2<f32>(0.5f, 0.5f));
  let x_297 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_296.x, x_296.y, x_297.z, x_297.w);
  let x_299 : vec4<f32> = u_xlat3;
  let x_303 : vec2<f32> = clamp(vec2<f32>(x_299.x, x_299.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_304 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_303.x, x_303.y, x_304.z, x_304.w);
  let x_309 : vec4<f32> = u_xlat3;
  let x_312 : f32 = x_34.x_GlobalMipBias.x;
  let x_313 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_309.x, x_309.y), x_312);
  u_xlat22 = x_313.x;
  let x_316 : f32 = u_xlat7.x;
  let x_318 : f32 = u_xlat22;
  let x_321 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_316) * x_318) + x_321);
  let x_324 : f32 = u_xlat0;
  let x_325 : f32 = u_xlat23;
  u_xlat17 = (x_324 + -(x_325));
  let x_329 : f32 = u_xlat17;
  let x_332 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_329) < x_332);
  let x_334 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_334);
  let x_336 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_336);
  let x_338 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_338);
  let x_340 : f32 = u_xlat22;
  let x_341 : f32 = u_xlat17;
  u_xlat22 = (x_340 * x_341);
  let x_344 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_344) + 1.0f);
  let x_348 : f32 = u_xlat23;
  let x_350 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_348 * x_350);
  let x_353 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_355 : vec4<f32> = u_xlat3;
  let x_359 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_361 : vec3<f32> = ((vec3<f32>(x_353.x, x_353.y, x_353.z) * vec3<f32>(x_355.x, x_355.x, x_355.x)) + vec3<f32>(x_359.x, x_359.y, x_359.z));
  let x_362 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_361.x, x_362.y, x_361.y, x_361.z);
  let x_365 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_367 : vec3<f32> = u_xlat10;
  let x_370 : vec4<f32> = u_xlat3;
  let x_372 : vec3<f32> = ((vec3<f32>(x_365.x, x_365.y, x_365.z) * vec3<f32>(x_367.x, x_367.x, x_367.x)) + vec3<f32>(x_370.x, x_370.z, x_370.w));
  let x_373 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_372.x, x_372.y, x_372.z, x_373.w);
  let x_376 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_378 : f32 = u_xlat23;
  let x_381 : vec4<f32> = u_xlat3;
  let x_383 : vec3<f32> = ((vec3<f32>(x_376.x, x_376.y, x_376.z) * vec3<f32>(x_378, x_378, x_378)) + vec3<f32>(x_381.x, x_381.y, x_381.z));
  let x_384 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_383.x, x_383.y, x_383.z, x_384.w);
  let x_386 : vec3<f32> = u_xlat2;
  let x_388 : vec4<f32> = u_xlat3;
  let x_390 : vec3<f32> = (-(x_386) + vec3<f32>(x_388.x, x_388.y, x_388.z));
  let x_391 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_390.z, x_391.w);
  let x_393 : vec4<f32> = u_xlat3;
  let x_395 : vec3<f32> = u_xlat1;
  u_xlat23 = dot(vec3<f32>(x_393.x, x_393.y, x_393.z), x_395);
  let x_397 : f32 = u_xlat0;
  let x_401 : f32 = u_xlat23;
  u_xlat23 = ((-(x_397) * 0.004f) + x_401);
  let x_403 : f32 = u_xlat23;
  u_xlat23 = max(x_403, 0.0f);
  let x_405 : vec4<f32> = u_xlat3;
  let x_407 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_405.x, x_405.y, x_405.z), vec3<f32>(x_407.x, x_407.y, x_407.z));
  let x_412 : f32 = u_xlat3.x;
  u_xlat3.x = (x_412 + 0.0001f);
  let x_417 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_417);
  let x_420 : f32 = u_xlat23;
  let x_422 : f32 = u_xlat3.x;
  u_xlat23 = (x_420 * x_422);
  let x_424 : vec2<f32> = u_xlat14;
  let x_427 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_424.x, x_424.y, x_424.x, x_424.y) * vec4<f32>(x_427.z, x_427.z, x_427.z, x_427.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_436 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec2<f32>(x_436.x, x_436.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_441 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_441);
  let x_445 : f32 = u_xlat3.x;
  u_xlat3.x = (x_445 * 52.982917786f);
  let x_449 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_449);
  let x_452 : vec4<f32> = u_xlat3;
  let x_457 : vec2<f32> = (vec2<f32>(x_452.x, x_452.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_458 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_457.x, x_457.y, x_458.z, x_458.w);
  let x_461 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_461);
  let x_465 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_465 * 2.0f) + -1.0f);
  let x_470 : f32 = u_xlat3.y;
  u_xlat3.x = (x_470 * 6.283185482f);
  let x_474 : f32 = u_xlat4.z;
  let x_477 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_474) * x_477) + 1.0f);
  let x_482 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_482);
  let x_486 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_486);
  let x_490 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_490);
  let x_494 : f32 = u_xlat10.x;
  let x_496 : f32 = u_xlat5.x;
  u_xlat4.x = (x_494 * x_496);
  let x_500 : f32 = u_xlat3.x;
  let x_502 : f32 = u_xlat10.x;
  u_xlat4.y = (x_500 * x_502);
  let x_505 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_505 * vec3<f32>(0.408248305f, 0.408248305f, 0.408248305f));
  let x_509 : vec3<f32> = u_xlat1;
  let x_511 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(-(x_509), x_511);
  let x_516 : f32 = u_xlat3.x;
  u_xlatb3 = (x_516 >= 0.0f);
  let x_518 : bool = u_xlatb3;
  if (x_518) {
    let x_522 : vec3<f32> = u_xlat4;
    x_519 = -(x_522);
  } else {
    let x_525 : vec3<f32> = u_xlat4;
    x_519 = x_525;
  }
  let x_526 : vec3<f32> = x_519;
  u_xlat4 = x_526;
  let x_527 : vec3<f32> = u_xlat4;
  let x_529 : vec4<f32> = x_34.x_SSAOParams;
  let x_532 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_527 * vec3<f32>(x_529.y, x_529.y, x_529.y)) + x_532);
  let x_534 : vec3<f32> = u_xlat4;
  let x_537 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_539 : vec2<f32> = (vec2<f32>(x_534.y, x_534.y) * vec2<f32>(x_537.x, x_537.y));
  let x_540 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_539.x, x_539.y, x_540.z, x_540.w);
  let x_543 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_545 : vec3<f32> = u_xlat4;
  let x_548 : vec4<f32> = u_xlat3;
  let x_550 : vec2<f32> = ((vec2<f32>(x_543.x, x_543.y) * vec2<f32>(x_545.x, x_545.x)) + vec2<f32>(x_548.x, x_548.y));
  let x_551 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_550.x, x_550.y, x_551.z, x_551.w);
  let x_554 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_556 : vec3<f32> = u_xlat4;
  let x_559 : vec4<f32> = u_xlat3;
  let x_561 : vec2<f32> = ((vec2<f32>(x_554.x, x_554.y) * vec2<f32>(x_556.z, x_556.z)) + vec2<f32>(x_559.x, x_559.y));
  let x_562 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_561.x, x_561.y, x_562.z, x_562.w);
  let x_564 : vec4<f32> = u_xlat3;
  let x_566 : vec2<f32> = (vec2<f32>(x_564.x, x_564.y) + vec2<f32>(1.0f, 1.0f));
  let x_567 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_566.x, x_566.y, x_567.z, x_567.w);
  let x_569 : vec4<f32> = u_xlat3;
  let x_571 : vec2<f32> = (vec2<f32>(x_569.x, x_569.y) * vec2<f32>(0.5f, 0.5f));
  let x_572 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_571.x, x_571.y, x_572.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat3;
  let x_578 : vec2<f32> = clamp(vec2<f32>(x_574.x, x_574.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_579 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_578.x, x_578.y, x_579.z, x_579.w);
  let x_584 : vec4<f32> = u_xlat3;
  let x_587 : f32 = x_34.x_GlobalMipBias.x;
  let x_588 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_584.x, x_584.y), x_587);
  u_xlat4.x = x_588.x;
  let x_593 : f32 = u_xlat7.x;
  let x_596 : f32 = u_xlat4.x;
  let x_599 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_593) * x_596) + x_599);
  let x_603 : f32 = u_xlat0;
  let x_605 : f32 = u_xlat11.x;
  u_xlat18 = (x_603 + -(x_605));
  let x_611 : f32 = u_xlat18;
  let x_614 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_611) < x_614);
  let x_618 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_618);
  let x_622 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_622);
  let x_626 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_626);
  let x_630 : f32 = u_xlat4.x;
  let x_632 : f32 = u_xlat4.z;
  u_xlat4.x = (x_630 * x_632);
  let x_636 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_636) + 1.0f);
  let x_641 : f32 = u_xlat11.x;
  let x_643 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_641 * x_643);
  let x_647 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_649 : vec4<f32> = u_xlat3;
  let x_653 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_647.x, x_647.y, x_647.z) * vec3<f32>(x_649.x, x_649.x, x_649.x)) + vec3<f32>(x_653.x, x_653.y, x_653.z));
  let x_657 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_659 : vec3<f32> = u_xlat10;
  let x_662 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_657.x, x_657.y, x_657.z) * vec3<f32>(x_659.x, x_659.x, x_659.x)) + x_662);
  let x_665 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_667 : vec3<f32> = u_xlat11;
  let x_670 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_665.x, x_665.y, x_665.z) * vec3<f32>(x_667.x, x_667.x, x_667.x)) + x_670);
  let x_672 : vec3<f32> = u_xlat2;
  let x_674 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_672) + x_674);
  let x_676 : vec3<f32> = u_xlat11;
  let x_677 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_676, x_677);
  let x_680 : f32 = u_xlat0;
  let x_684 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_680) * 0.004f) + x_684);
  let x_688 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_688, 0.0f);
  let x_691 : vec3<f32> = u_xlat11;
  let x_692 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_691, x_692);
  let x_696 : f32 = u_xlat10.x;
  u_xlat10.x = (x_696 + 0.0001f);
  let x_700 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_700);
  let x_704 : f32 = u_xlat10.x;
  let x_706 : f32 = u_xlat3.x;
  u_xlat3.x = (x_704 * x_706);
  let x_710 : f32 = u_xlat4.x;
  let x_712 : f32 = u_xlat3.x;
  u_xlat3.x = (x_710 * x_712);
  let x_715 : f32 = u_xlat23;
  let x_716 : f32 = u_xlat22;
  let x_719 : f32 = u_xlat3.x;
  u_xlat22 = ((x_715 * x_716) + x_719);
  let x_721 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_721.z, x_721.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_724 : f32 = u_xlat23;
  u_xlat23 = fract(x_724);
  let x_726 : f32 = u_xlat23;
  u_xlat23 = (x_726 * 52.982917786f);
  let x_728 : f32 = u_xlat23;
  u_xlat23 = fract(x_728);
  let x_730 : f32 = u_xlat23;
  let x_735 : vec2<f32> = (vec2<f32>(x_730, x_730) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_736 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_735.x, x_735.y, x_736.z, x_736.w);
  let x_739 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_739);
  let x_741 : f32 = u_xlat23;
  u_xlat4.z = ((x_741 * 2.0f) + -1.0f);
  let x_746 : f32 = u_xlat3.y;
  u_xlat23 = (x_746 * 6.283185482f);
  let x_749 : f32 = u_xlat4.z;
  let x_752 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_749) * x_752) + 1.0f);
  let x_757 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_757);
  let x_760 : f32 = u_xlat23;
  u_xlat5.x = sin(x_760);
  let x_764 : f32 = u_xlat23;
  u_xlat6 = cos(x_764);
  let x_767 : f32 = u_xlat3.x;
  let x_768 : f32 = u_xlat6;
  u_xlat4.x = (x_767 * x_768);
  let x_772 : f32 = u_xlat3.x;
  let x_774 : f32 = u_xlat5.x;
  u_xlat4.y = (x_772 * x_774);
  let x_777 : vec3<f32> = u_xlat4;
  let x_779 : vec3<f32> = (x_777 * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_780 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_779.x, x_779.y, x_779.z, x_780.w);
  let x_782 : vec3<f32> = u_xlat1;
  let x_784 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_782), vec3<f32>(x_784.x, x_784.y, x_784.z));
  let x_788 : f32 = u_xlat23;
  u_xlatb23 = (x_788 >= 0.0f);
  let x_790 : bool = u_xlatb23;
  if (x_790) {
    let x_794 : vec4<f32> = u_xlat3;
    x_791 = -(vec3<f32>(x_794.x, x_794.y, x_794.z));
  } else {
    let x_798 : vec4<f32> = u_xlat3;
    x_791 = vec3<f32>(x_798.x, x_798.y, x_798.z);
  }
  let x_800 : vec3<f32> = x_791;
  let x_801 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_800.x, x_800.y, x_800.z, x_801.w);
  let x_803 : vec4<f32> = u_xlat3;
  let x_806 : vec4<f32> = x_34.x_SSAOParams;
  let x_809 : vec3<f32> = u_xlat2;
  let x_810 : vec3<f32> = ((vec3<f32>(x_803.x, x_803.y, x_803.z) * vec3<f32>(x_806.y, x_806.y, x_806.y)) + x_809);
  let x_811 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_810.x, x_810.y, x_810.z, x_811.w);
  let x_813 : vec4<f32> = u_xlat3;
  let x_816 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_818 : vec2<f32> = (vec2<f32>(x_813.y, x_813.y) * vec2<f32>(x_816.x, x_816.y));
  let x_819 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_818.x, x_819.y, x_818.y);
  let x_822 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_824 : vec4<f32> = u_xlat3;
  let x_827 : vec3<f32> = u_xlat10;
  let x_829 : vec2<f32> = ((vec2<f32>(x_822.x, x_822.y) * vec2<f32>(x_824.x, x_824.x)) + vec2<f32>(x_827.x, x_827.z));
  let x_830 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_829.x, x_829.y, x_830.z, x_830.w);
  let x_833 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_835 : vec4<f32> = u_xlat3;
  let x_838 : vec4<f32> = u_xlat3;
  let x_840 : vec2<f32> = ((vec2<f32>(x_833.x, x_833.y) * vec2<f32>(x_835.z, x_835.z)) + vec2<f32>(x_838.x, x_838.y));
  let x_841 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_840.x, x_840.y, x_841.z, x_841.w);
  let x_843 : vec4<f32> = u_xlat3;
  let x_845 : vec2<f32> = (vec2<f32>(x_843.x, x_843.y) + vec2<f32>(1.0f, 1.0f));
  let x_846 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_845.x, x_845.y, x_846.z, x_846.w);
  let x_848 : vec4<f32> = u_xlat3;
  let x_850 : vec2<f32> = (vec2<f32>(x_848.x, x_848.y) * vec2<f32>(0.5f, 0.5f));
  let x_851 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
  let x_853 : vec4<f32> = u_xlat3;
  let x_857 : vec2<f32> = clamp(vec2<f32>(x_853.x, x_853.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_858 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_857.x, x_857.y, x_858.z, x_858.w);
  let x_863 : vec4<f32> = u_xlat3;
  let x_866 : f32 = x_34.x_GlobalMipBias.x;
  let x_867 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_863.x, x_863.y), x_866);
  u_xlat23 = x_867.x;
  let x_870 : f32 = u_xlat7.x;
  let x_872 : f32 = u_xlat23;
  let x_875 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_870) * x_872) + x_875);
  let x_878 : f32 = u_xlat0;
  let x_879 : f32 = u_xlat17;
  u_xlat24 = (x_878 + -(x_879));
  let x_883 : f32 = u_xlat24;
  let x_886 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_883) < x_886);
  let x_888 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_888);
  let x_890 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_890);
  let x_892 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_892);
  let x_894 : f32 = u_xlat23;
  let x_895 : f32 = u_xlat24;
  u_xlat23 = (x_894 * x_895);
  let x_898 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_898) + 1.0f);
  let x_902 : f32 = u_xlat17;
  let x_904 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_902 * x_904);
  let x_907 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_909 : vec4<f32> = u_xlat3;
  let x_913 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_907.x, x_907.y, x_907.z) * vec3<f32>(x_909.x, x_909.x, x_909.x)) + vec3<f32>(x_913.x, x_913.y, x_913.z));
  let x_917 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_919 : vec3<f32> = u_xlat10;
  let x_922 : vec3<f32> = u_xlat4;
  let x_923 : vec3<f32> = ((vec3<f32>(x_917.x, x_917.y, x_917.z) * vec3<f32>(x_919.x, x_919.x, x_919.x)) + x_922);
  let x_924 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_923.z);
  let x_927 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_929 : f32 = u_xlat17;
  let x_932 : vec4<f32> = u_xlat3;
  let x_934 : vec3<f32> = ((vec3<f32>(x_927.x, x_927.y, x_927.z) * vec3<f32>(x_929, x_929, x_929)) + vec3<f32>(x_932.x, x_932.y, x_932.w));
  let x_935 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_934.x, x_934.y, x_934.z, x_935.w);
  let x_937 : vec3<f32> = u_xlat2;
  let x_939 : vec4<f32> = u_xlat3;
  let x_941 : vec3<f32> = (-(x_937) + vec3<f32>(x_939.x, x_939.y, x_939.z));
  let x_942 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_941.x, x_941.y, x_941.z, x_942.w);
  let x_944 : vec4<f32> = u_xlat3;
  let x_946 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_944.x, x_944.y, x_944.z), x_946);
  let x_948 : f32 = u_xlat0;
  let x_951 : f32 = u_xlat24;
  u_xlat24 = ((-(x_948) * 0.004f) + x_951);
  let x_953 : f32 = u_xlat24;
  u_xlat24 = max(x_953, 0.0f);
  let x_955 : vec4<f32> = u_xlat3;
  let x_957 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_955.x, x_955.y, x_955.z), vec3<f32>(x_957.x, x_957.y, x_957.z));
  let x_962 : f32 = u_xlat3.x;
  u_xlat3.x = (x_962 + 0.0001f);
  let x_966 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_966);
  let x_970 : f32 = u_xlat3.x;
  let x_971 : f32 = u_xlat24;
  u_xlat3.x = (x_970 * x_971);
  let x_975 : f32 = u_xlat3.x;
  let x_976 : f32 = u_xlat23;
  let x_978 : f32 = u_xlat22;
  u_xlat22 = ((x_975 * x_976) + x_978);
  let x_980 : vec2<f32> = u_xlat14;
  let x_983 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_980.x, x_980.y, x_980.x, x_980.y) * vec4<f32>(x_983.z, x_983.z, x_983.z, x_983.z)) + vec4<f32>(6.248999596f, 14.600999832f, 8.331999779f, 19.468000412f));
  let x_992 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_992.x, x_992.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_995 : f32 = u_xlat23;
  u_xlat23 = fract(x_995);
  let x_997 : f32 = u_xlat23;
  u_xlat23 = (x_997 * 52.982917786f);
  let x_999 : f32 = u_xlat23;
  u_xlat23 = fract(x_999);
  let x_1001 : f32 = u_xlat23;
  let x_1006 : vec2<f32> = (vec2<f32>(x_1001, x_1001) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1007 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1006.x, x_1006.y, x_1007.z, x_1007.w);
  let x_1010 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1010);
  let x_1012 : f32 = u_xlat23;
  u_xlat4.z = ((x_1012 * 2.0f) + -1.0f);
  let x_1017 : f32 = u_xlat3.y;
  u_xlat23 = (x_1017 * 6.283185482f);
  let x_1020 : f32 = u_xlat4.z;
  let x_1023 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1020) * x_1023) + 1.0f);
  let x_1028 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1028);
  let x_1031 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1031);
  let x_1034 : f32 = u_xlat23;
  u_xlat6 = cos(x_1034);
  let x_1037 : f32 = u_xlat3.x;
  let x_1038 : f32 = u_xlat6;
  u_xlat4.x = (x_1037 * x_1038);
  let x_1042 : f32 = u_xlat3.x;
  let x_1044 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1042 * x_1044);
  let x_1047 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1047 * vec3<f32>(0.577350259f, 0.577350259f, 0.577350259f));
  let x_1051 : vec3<f32> = u_xlat1;
  let x_1053 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(x_1051), x_1053);
  let x_1055 : f32 = u_xlat23;
  u_xlatb23 = (x_1055 >= 0.0f);
  let x_1057 : bool = u_xlatb23;
  if (x_1057) {
    let x_1061 : vec3<f32> = u_xlat4;
    x_1058 = -(x_1061);
  } else {
    let x_1064 : vec3<f32> = u_xlat4;
    x_1058 = x_1064;
  }
  let x_1065 : vec3<f32> = x_1058;
  u_xlat4 = x_1065;
  let x_1066 : vec3<f32> = u_xlat4;
  let x_1068 : vec4<f32> = x_34.x_SSAOParams;
  let x_1071 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_1066 * vec3<f32>(x_1068.y, x_1068.y, x_1068.y)) + x_1071);
  let x_1073 : vec3<f32> = u_xlat4;
  let x_1076 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1078 : vec2<f32> = (vec2<f32>(x_1073.y, x_1073.y) * vec2<f32>(x_1076.x, x_1076.y));
  let x_1079 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1078.x, x_1078.y, x_1079.z, x_1079.w);
  let x_1082 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1084 : vec3<f32> = u_xlat4;
  let x_1087 : vec4<f32> = u_xlat3;
  let x_1089 : vec2<f32> = ((vec2<f32>(x_1082.x, x_1082.y) * vec2<f32>(x_1084.x, x_1084.x)) + vec2<f32>(x_1087.x, x_1087.y));
  let x_1090 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1089.x, x_1089.y, x_1090.z, x_1090.w);
  let x_1093 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1095 : vec3<f32> = u_xlat4;
  let x_1098 : vec4<f32> = u_xlat3;
  let x_1100 : vec2<f32> = ((vec2<f32>(x_1093.x, x_1093.y) * vec2<f32>(x_1095.z, x_1095.z)) + vec2<f32>(x_1098.x, x_1098.y));
  let x_1101 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1100.x, x_1100.y, x_1101.z, x_1101.w);
  let x_1103 : vec4<f32> = u_xlat3;
  let x_1105 : vec2<f32> = (vec2<f32>(x_1103.x, x_1103.y) + vec2<f32>(1.0f, 1.0f));
  let x_1106 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1105.x, x_1105.y, x_1106.z, x_1106.w);
  let x_1108 : vec4<f32> = u_xlat3;
  let x_1110 : vec2<f32> = (vec2<f32>(x_1108.x, x_1108.y) * vec2<f32>(0.5f, 0.5f));
  let x_1111 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1110.x, x_1110.y, x_1111.z, x_1111.w);
  let x_1113 : vec4<f32> = u_xlat3;
  let x_1117 : vec2<f32> = clamp(vec2<f32>(x_1113.x, x_1113.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1117.x, x_1117.y, x_1118.z, x_1118.w);
  let x_1123 : vec4<f32> = u_xlat3;
  let x_1126 : f32 = x_34.x_GlobalMipBias.x;
  let x_1127 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1123.x, x_1123.y), x_1126);
  u_xlat23 = x_1127.x;
  let x_1130 : f32 = u_xlat7.x;
  let x_1132 : f32 = u_xlat23;
  let x_1135 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1130) * x_1132) + x_1135);
  let x_1138 : f32 = u_xlat0;
  let x_1140 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1138 + -(x_1140));
  let x_1146 : f32 = u_xlat11.x;
  let x_1149 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1146) < x_1149);
  let x_1151 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1151);
  let x_1154 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1154);
  let x_1156 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1156);
  let x_1158 : f32 = u_xlat23;
  let x_1160 : f32 = u_xlat11.x;
  u_xlat23 = (x_1158 * x_1160);
  let x_1163 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1163) + 1.0f);
  let x_1168 : f32 = u_xlat4.x;
  let x_1170 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1168 * x_1170);
  let x_1174 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1176 : vec4<f32> = u_xlat3;
  let x_1180 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1174.x, x_1174.y, x_1174.z) * vec3<f32>(x_1176.x, x_1176.x, x_1176.x)) + vec3<f32>(x_1180.x, x_1180.y, x_1180.z));
  let x_1184 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1186 : vec3<f32> = u_xlat10;
  let x_1189 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1184.x, x_1184.y, x_1184.z) * vec3<f32>(x_1186.x, x_1186.x, x_1186.x)) + x_1189);
  let x_1192 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1194 : vec3<f32> = u_xlat4;
  let x_1197 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1192.x, x_1192.y, x_1192.z) * vec3<f32>(x_1194.x, x_1194.x, x_1194.x)) + x_1197);
  let x_1199 : vec3<f32> = u_xlat2;
  let x_1201 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1199) + x_1201);
  let x_1203 : vec3<f32> = u_xlat4;
  let x_1204 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_1203, x_1204);
  let x_1207 : f32 = u_xlat0;
  let x_1211 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1207) * 0.004f) + x_1211);
  let x_1215 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1215, 0.0f);
  let x_1218 : vec3<f32> = u_xlat4;
  let x_1219 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1218, x_1219);
  let x_1223 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1223 + 0.0001f);
  let x_1227 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1227);
  let x_1231 : f32 = u_xlat10.x;
  let x_1233 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1231 * x_1233);
  let x_1237 : f32 = u_xlat3.x;
  let x_1238 : f32 = u_xlat23;
  let x_1240 : f32 = u_xlat22;
  u_xlat22 = ((x_1237 * x_1238) + x_1240);
  let x_1242 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1242.z, x_1242.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1245 : f32 = u_xlat23;
  u_xlat23 = fract(x_1245);
  let x_1247 : f32 = u_xlat23;
  u_xlat23 = (x_1247 * 52.982917786f);
  let x_1249 : f32 = u_xlat23;
  u_xlat23 = fract(x_1249);
  let x_1251 : f32 = u_xlat23;
  u_xlat3.x = (x_1251 + 0.984375f);
  let x_1256 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1256);
  let x_1260 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1260 * 2.0f) + -1.0f);
  let x_1264 : f32 = u_xlat23;
  u_xlat23 = (x_1264 * 6.283185482f);
  let x_1267 : f32 = u_xlat3.z;
  let x_1270 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1267) * x_1270) + 1.0f);
  let x_1273 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1273);
  let x_1275 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1275);
  let x_1278 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1278);
  let x_1281 : f32 = u_xlat24;
  let x_1283 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1281 * x_1283);
  let x_1286 : f32 = u_xlat24;
  let x_1288 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1286 * x_1288);
  let x_1291 : vec4<f32> = u_xlat3;
  let x_1295 : vec3<f32> = (vec3<f32>(x_1291.x, x_1291.y, x_1291.z) * vec3<f32>(0.645497262f, 0.645497262f, 0.645497262f));
  let x_1296 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1295.x, x_1295.y, x_1295.z, x_1296.w);
  let x_1298 : vec3<f32> = u_xlat1;
  let x_1300 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_1298), vec3<f32>(x_1300.x, x_1300.y, x_1300.z));
  let x_1303 : f32 = u_xlat23;
  u_xlatb23 = (x_1303 >= 0.0f);
  let x_1305 : bool = u_xlatb23;
  if (x_1305) {
    let x_1309 : vec4<f32> = u_xlat3;
    x_1306 = -(vec3<f32>(x_1309.x, x_1309.y, x_1309.z));
  } else {
    let x_1313 : vec4<f32> = u_xlat3;
    x_1306 = vec3<f32>(x_1313.x, x_1313.y, x_1313.z);
  }
  let x_1315 : vec3<f32> = x_1306;
  let x_1316 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1315.x, x_1315.y, x_1315.z, x_1316.w);
  let x_1318 : vec4<f32> = u_xlat3;
  let x_1321 : vec4<f32> = x_34.x_SSAOParams;
  let x_1324 : vec3<f32> = u_xlat2;
  let x_1325 : vec3<f32> = ((vec3<f32>(x_1318.x, x_1318.y, x_1318.z) * vec3<f32>(x_1321.y, x_1321.y, x_1321.y)) + x_1324);
  let x_1326 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1325.x, x_1325.y, x_1325.z, x_1326.w);
  let x_1328 : vec4<f32> = u_xlat3;
  let x_1331 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1333 : vec2<f32> = (vec2<f32>(x_1328.y, x_1328.y) * vec2<f32>(x_1331.x, x_1331.y));
  let x_1334 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1333.x, x_1334.y, x_1333.y);
  let x_1337 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1339 : vec4<f32> = u_xlat3;
  let x_1342 : vec3<f32> = u_xlat10;
  let x_1344 : vec2<f32> = ((vec2<f32>(x_1337.x, x_1337.y) * vec2<f32>(x_1339.x, x_1339.x)) + vec2<f32>(x_1342.x, x_1342.z));
  let x_1345 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1344.x, x_1344.y, x_1345.z, x_1345.w);
  let x_1348 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1350 : vec4<f32> = u_xlat3;
  let x_1353 : vec4<f32> = u_xlat3;
  let x_1355 : vec2<f32> = ((vec2<f32>(x_1348.x, x_1348.y) * vec2<f32>(x_1350.z, x_1350.z)) + vec2<f32>(x_1353.x, x_1353.y));
  let x_1356 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1355.x, x_1355.y, x_1356.z, x_1356.w);
  let x_1358 : vec4<f32> = u_xlat3;
  let x_1360 : vec2<f32> = (vec2<f32>(x_1358.x, x_1358.y) + vec2<f32>(1.0f, 1.0f));
  let x_1361 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1360.x, x_1360.y, x_1361.z, x_1361.w);
  let x_1363 : vec4<f32> = u_xlat3;
  let x_1365 : vec2<f32> = (vec2<f32>(x_1363.x, x_1363.y) * vec2<f32>(0.5f, 0.5f));
  let x_1366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1365.x, x_1365.y, x_1366.z, x_1366.w);
  let x_1368 : vec4<f32> = u_xlat3;
  let x_1372 : vec2<f32> = clamp(vec2<f32>(x_1368.x, x_1368.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1373 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1372.x, x_1372.y, x_1373.z, x_1373.w);
  let x_1378 : vec4<f32> = u_xlat3;
  let x_1381 : f32 = x_34.x_GlobalMipBias.x;
  let x_1382 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1378.x, x_1378.y), x_1381);
  u_xlat23 = x_1382.x;
  let x_1385 : f32 = u_xlat7.x;
  let x_1387 : f32 = u_xlat23;
  let x_1390 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1385) * x_1387) + x_1390);
  let x_1392 : f32 = u_xlat0;
  let x_1393 : f32 = u_xlat17;
  u_xlat24 = (x_1392 + -(x_1393));
  let x_1396 : f32 = u_xlat24;
  let x_1399 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1396) < x_1399);
  let x_1401 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1401);
  let x_1403 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1403);
  let x_1405 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1405);
  let x_1407 : f32 = u_xlat23;
  let x_1408 : f32 = u_xlat24;
  u_xlat23 = (x_1407 * x_1408);
  let x_1411 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1411) + 1.0f);
  let x_1415 : f32 = u_xlat17;
  let x_1417 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1415 * x_1417);
  let x_1420 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1422 : vec4<f32> = u_xlat3;
  let x_1426 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1420.x, x_1420.y, x_1420.z) * vec3<f32>(x_1422.x, x_1422.x, x_1422.x)) + vec3<f32>(x_1426.x, x_1426.y, x_1426.z));
  let x_1430 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1432 : vec3<f32> = u_xlat10;
  let x_1435 : vec3<f32> = u_xlat4;
  let x_1436 : vec3<f32> = ((vec3<f32>(x_1430.x, x_1430.y, x_1430.z) * vec3<f32>(x_1432.x, x_1432.x, x_1432.x)) + x_1435);
  let x_1437 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1436.x, x_1436.y, x_1437.z, x_1436.z);
  let x_1440 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1442 : f32 = u_xlat17;
  let x_1445 : vec4<f32> = u_xlat3;
  let x_1447 : vec3<f32> = ((vec3<f32>(x_1440.x, x_1440.y, x_1440.z) * vec3<f32>(x_1442, x_1442, x_1442)) + vec3<f32>(x_1445.x, x_1445.y, x_1445.w));
  let x_1448 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1447.x, x_1447.y, x_1447.z, x_1448.w);
  let x_1450 : vec3<f32> = u_xlat2;
  let x_1452 : vec4<f32> = u_xlat3;
  let x_1454 : vec3<f32> = (-(x_1450) + vec3<f32>(x_1452.x, x_1452.y, x_1452.z));
  let x_1455 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1454.x, x_1454.y, x_1454.z, x_1455.w);
  let x_1457 : vec4<f32> = u_xlat3;
  let x_1459 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_1457.x, x_1457.y, x_1457.z), x_1459);
  let x_1461 : f32 = u_xlat0;
  let x_1464 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1461) * 0.004f) + x_1464);
  let x_1466 : f32 = u_xlat24;
  u_xlat24 = max(x_1466, 0.0f);
  let x_1468 : vec4<f32> = u_xlat3;
  let x_1470 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1468.x, x_1468.y, x_1468.z), vec3<f32>(x_1470.x, x_1470.y, x_1470.z));
  let x_1475 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1475 + 0.0001f);
  let x_1479 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1479);
  let x_1483 : f32 = u_xlat3.x;
  let x_1484 : f32 = u_xlat24;
  u_xlat3.x = (x_1483 * x_1484);
  let x_1488 : f32 = u_xlat3.x;
  let x_1489 : f32 = u_xlat23;
  let x_1491 : f32 = u_xlat22;
  u_xlat22 = ((x_1488 * x_1489) + x_1491);
  let x_1493 : vec2<f32> = u_xlat14;
  let x_1496 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1493.x, x_1493.y, x_1493.x, x_1493.y) * vec4<f32>(x_1496.z, x_1496.z, x_1496.z, x_1496.z)) + vec4<f32>(10.414999962f, 24.335000992f, 12.497999191f, 29.201999664f));
  let x_1505 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1505.x, x_1505.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1508 : f32 = u_xlat23;
  u_xlat23 = fract(x_1508);
  let x_1510 : f32 = u_xlat23;
  u_xlat23 = (x_1510 * 52.982917786f);
  let x_1512 : f32 = u_xlat23;
  u_xlat23 = fract(x_1512);
  let x_1514 : f32 = u_xlat23;
  let x_1519 : vec2<f32> = (vec2<f32>(x_1514, x_1514) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1520 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1519.x, x_1519.y, x_1520.z, x_1520.w);
  let x_1523 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1523);
  let x_1525 : f32 = u_xlat23;
  u_xlat4.z = ((x_1525 * 2.0f) + -1.0f);
  let x_1530 : f32 = u_xlat3.y;
  u_xlat23 = (x_1530 * 6.283185482f);
  let x_1533 : f32 = u_xlat4.z;
  let x_1536 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1533) * x_1536) + 1.0f);
  let x_1541 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1541);
  let x_1544 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1544);
  let x_1547 : f32 = u_xlat23;
  u_xlat6 = cos(x_1547);
  let x_1550 : f32 = u_xlat3.x;
  let x_1551 : f32 = u_xlat6;
  u_xlat4.x = (x_1550 * x_1551);
  let x_1555 : f32 = u_xlat3.x;
  let x_1557 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1555 * x_1557);
  let x_1560 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1560 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_1564 : vec3<f32> = u_xlat1;
  let x_1566 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(x_1564), x_1566);
  let x_1568 : f32 = u_xlat23;
  u_xlatb23 = (x_1568 >= 0.0f);
  let x_1570 : bool = u_xlatb23;
  if (x_1570) {
    let x_1574 : vec3<f32> = u_xlat4;
    x_1571 = -(x_1574);
  } else {
    let x_1577 : vec3<f32> = u_xlat4;
    x_1571 = x_1577;
  }
  let x_1578 : vec3<f32> = x_1571;
  u_xlat4 = x_1578;
  let x_1579 : vec3<f32> = u_xlat4;
  let x_1581 : vec4<f32> = x_34.x_SSAOParams;
  let x_1584 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_1579 * vec3<f32>(x_1581.y, x_1581.y, x_1581.y)) + x_1584);
  let x_1586 : vec3<f32> = u_xlat4;
  let x_1589 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1591 : vec2<f32> = (vec2<f32>(x_1586.y, x_1586.y) * vec2<f32>(x_1589.x, x_1589.y));
  let x_1592 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1591.x, x_1591.y, x_1592.z, x_1592.w);
  let x_1595 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1597 : vec3<f32> = u_xlat4;
  let x_1600 : vec4<f32> = u_xlat3;
  let x_1602 : vec2<f32> = ((vec2<f32>(x_1595.x, x_1595.y) * vec2<f32>(x_1597.x, x_1597.x)) + vec2<f32>(x_1600.x, x_1600.y));
  let x_1603 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1602.x, x_1602.y, x_1603.z, x_1603.w);
  let x_1606 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1608 : vec3<f32> = u_xlat4;
  let x_1611 : vec4<f32> = u_xlat3;
  let x_1613 : vec2<f32> = ((vec2<f32>(x_1606.x, x_1606.y) * vec2<f32>(x_1608.z, x_1608.z)) + vec2<f32>(x_1611.x, x_1611.y));
  let x_1614 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1613.x, x_1613.y, x_1614.z, x_1614.w);
  let x_1616 : vec4<f32> = u_xlat3;
  let x_1618 : vec2<f32> = (vec2<f32>(x_1616.x, x_1616.y) + vec2<f32>(1.0f, 1.0f));
  let x_1619 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1618.x, x_1618.y, x_1619.z, x_1619.w);
  let x_1621 : vec4<f32> = u_xlat3;
  let x_1623 : vec2<f32> = (vec2<f32>(x_1621.x, x_1621.y) * vec2<f32>(0.5f, 0.5f));
  let x_1624 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1623.x, x_1623.y, x_1624.z, x_1624.w);
  let x_1626 : vec4<f32> = u_xlat3;
  let x_1630 : vec2<f32> = clamp(vec2<f32>(x_1626.x, x_1626.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1631 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1630.x, x_1630.y, x_1631.z, x_1631.w);
  let x_1636 : vec4<f32> = u_xlat3;
  let x_1639 : f32 = x_34.x_GlobalMipBias.x;
  let x_1640 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1636.x, x_1636.y), x_1639);
  u_xlat23 = x_1640.x;
  let x_1643 : f32 = u_xlat7.x;
  let x_1645 : f32 = u_xlat23;
  let x_1648 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1643) * x_1645) + x_1648);
  let x_1651 : f32 = u_xlat0;
  let x_1653 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1651 + -(x_1653));
  let x_1658 : f32 = u_xlat11.x;
  let x_1661 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1658) < x_1661);
  let x_1663 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1663);
  let x_1666 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1666);
  let x_1668 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1668);
  let x_1670 : f32 = u_xlat23;
  let x_1672 : f32 = u_xlat11.x;
  u_xlat23 = (x_1670 * x_1672);
  let x_1675 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1675) + 1.0f);
  let x_1680 : f32 = u_xlat4.x;
  let x_1682 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1680 * x_1682);
  let x_1686 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1688 : vec4<f32> = u_xlat3;
  let x_1692 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1686.x, x_1686.y, x_1686.z) * vec3<f32>(x_1688.x, x_1688.x, x_1688.x)) + vec3<f32>(x_1692.x, x_1692.y, x_1692.z));
  let x_1696 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1698 : vec3<f32> = u_xlat10;
  let x_1701 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1696.x, x_1696.y, x_1696.z) * vec3<f32>(x_1698.x, x_1698.x, x_1698.x)) + x_1701);
  let x_1704 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1706 : vec3<f32> = u_xlat4;
  let x_1709 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1704.x, x_1704.y, x_1704.z) * vec3<f32>(x_1706.x, x_1706.x, x_1706.x)) + x_1709);
  let x_1711 : vec3<f32> = u_xlat2;
  let x_1713 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1711) + x_1713);
  let x_1715 : vec3<f32> = u_xlat4;
  let x_1716 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_1715, x_1716);
  let x_1719 : f32 = u_xlat0;
  let x_1723 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1719) * 0.004f) + x_1723);
  let x_1727 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1727, 0.0f);
  let x_1730 : vec3<f32> = u_xlat4;
  let x_1731 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1730, x_1731);
  let x_1735 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1735 + 0.0001f);
  let x_1739 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1739);
  let x_1743 : f32 = u_xlat10.x;
  let x_1745 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1743 * x_1745);
  let x_1749 : f32 = u_xlat3.x;
  let x_1750 : f32 = u_xlat23;
  let x_1752 : f32 = u_xlat22;
  u_xlat22 = ((x_1749 * x_1750) + x_1752);
  let x_1754 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1754.z, x_1754.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1757 : f32 = u_xlat23;
  u_xlat23 = fract(x_1757);
  let x_1759 : f32 = u_xlat23;
  u_xlat23 = (x_1759 * 52.982917786f);
  let x_1761 : f32 = u_xlat23;
  u_xlat23 = fract(x_1761);
  let x_1763 : f32 = u_xlat23;
  let x_1768 : vec2<f32> = (vec2<f32>(x_1763, x_1763) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1769 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1768.x, x_1768.y, x_1769.z, x_1769.w);
  let x_1772 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1772);
  let x_1774 : f32 = u_xlat23;
  u_xlat4.z = ((x_1774 * 2.0f) + -1.0f);
  let x_1779 : f32 = u_xlat3.y;
  u_xlat23 = (x_1779 * 6.283185482f);
  let x_1782 : f32 = u_xlat4.z;
  let x_1785 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1782) * x_1785) + 1.0f);
  let x_1790 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1790);
  let x_1793 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1793);
  let x_1796 : f32 = u_xlat23;
  u_xlat6 = cos(x_1796);
  let x_1799 : f32 = u_xlat3.x;
  let x_1800 : f32 = u_xlat6;
  u_xlat4.x = (x_1799 * x_1800);
  let x_1804 : f32 = u_xlat3.x;
  let x_1806 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1804 * x_1806);
  let x_1809 : vec3<f32> = u_xlat4;
  let x_1812 : vec3<f32> = (x_1809 * vec3<f32>(0.763762653f, 0.763762653f, 0.763762653f));
  let x_1813 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1812.x, x_1812.y, x_1812.z, x_1813.w);
  let x_1815 : vec3<f32> = u_xlat1;
  let x_1817 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_1815), vec3<f32>(x_1817.x, x_1817.y, x_1817.z));
  let x_1820 : f32 = u_xlat23;
  u_xlatb23 = (x_1820 >= 0.0f);
  let x_1822 : bool = u_xlatb23;
  if (x_1822) {
    let x_1826 : vec4<f32> = u_xlat3;
    x_1823 = -(vec3<f32>(x_1826.x, x_1826.y, x_1826.z));
  } else {
    let x_1830 : vec4<f32> = u_xlat3;
    x_1823 = vec3<f32>(x_1830.x, x_1830.y, x_1830.z);
  }
  let x_1832 : vec3<f32> = x_1823;
  let x_1833 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1832.x, x_1832.y, x_1832.z, x_1833.w);
  let x_1835 : vec4<f32> = u_xlat3;
  let x_1838 : vec4<f32> = x_34.x_SSAOParams;
  let x_1841 : vec3<f32> = u_xlat2;
  let x_1842 : vec3<f32> = ((vec3<f32>(x_1835.x, x_1835.y, x_1835.z) * vec3<f32>(x_1838.y, x_1838.y, x_1838.y)) + x_1841);
  let x_1843 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1842.z, x_1843.w);
  let x_1845 : vec4<f32> = u_xlat3;
  let x_1848 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1850 : vec2<f32> = (vec2<f32>(x_1845.y, x_1845.y) * vec2<f32>(x_1848.x, x_1848.y));
  let x_1851 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1850.x, x_1851.y, x_1850.y);
  let x_1854 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1856 : vec4<f32> = u_xlat3;
  let x_1859 : vec3<f32> = u_xlat10;
  let x_1861 : vec2<f32> = ((vec2<f32>(x_1854.x, x_1854.y) * vec2<f32>(x_1856.x, x_1856.x)) + vec2<f32>(x_1859.x, x_1859.z));
  let x_1862 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1861.x, x_1861.y, x_1862.z, x_1862.w);
  let x_1865 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1867 : vec4<f32> = u_xlat3;
  let x_1870 : vec4<f32> = u_xlat3;
  let x_1872 : vec2<f32> = ((vec2<f32>(x_1865.x, x_1865.y) * vec2<f32>(x_1867.z, x_1867.z)) + vec2<f32>(x_1870.x, x_1870.y));
  let x_1873 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1872.x, x_1872.y, x_1873.z, x_1873.w);
  let x_1875 : vec4<f32> = u_xlat3;
  let x_1877 : vec2<f32> = (vec2<f32>(x_1875.x, x_1875.y) + vec2<f32>(1.0f, 1.0f));
  let x_1878 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1877.x, x_1877.y, x_1878.z, x_1878.w);
  let x_1880 : vec4<f32> = u_xlat3;
  let x_1882 : vec2<f32> = (vec2<f32>(x_1880.x, x_1880.y) * vec2<f32>(0.5f, 0.5f));
  let x_1883 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1882.x, x_1882.y, x_1883.z, x_1883.w);
  let x_1885 : vec4<f32> = u_xlat3;
  let x_1889 : vec2<f32> = clamp(vec2<f32>(x_1885.x, x_1885.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1890 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1889.x, x_1889.y, x_1890.z, x_1890.w);
  let x_1895 : vec4<f32> = u_xlat3;
  let x_1898 : f32 = x_34.x_GlobalMipBias.x;
  let x_1899 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1895.x, x_1895.y), x_1898);
  u_xlat23 = x_1899.x;
  let x_1902 : f32 = u_xlat7.x;
  let x_1904 : f32 = u_xlat23;
  let x_1907 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1902) * x_1904) + x_1907);
  let x_1909 : f32 = u_xlat0;
  let x_1910 : f32 = u_xlat17;
  u_xlat24 = (x_1909 + -(x_1910));
  let x_1913 : f32 = u_xlat24;
  let x_1916 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1913) < x_1916);
  let x_1918 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1918);
  let x_1920 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1920);
  let x_1922 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1922);
  let x_1924 : f32 = u_xlat23;
  let x_1925 : f32 = u_xlat24;
  u_xlat23 = (x_1924 * x_1925);
  let x_1928 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1928) + 1.0f);
  let x_1932 : f32 = u_xlat17;
  let x_1934 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1932 * x_1934);
  let x_1937 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1939 : vec4<f32> = u_xlat3;
  let x_1943 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1937.x, x_1937.y, x_1937.z) * vec3<f32>(x_1939.x, x_1939.x, x_1939.x)) + vec3<f32>(x_1943.x, x_1943.y, x_1943.z));
  let x_1947 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1949 : vec3<f32> = u_xlat10;
  let x_1952 : vec3<f32> = u_xlat4;
  let x_1953 : vec3<f32> = ((vec3<f32>(x_1947.x, x_1947.y, x_1947.z) * vec3<f32>(x_1949.x, x_1949.x, x_1949.x)) + x_1952);
  let x_1954 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1953.x, x_1953.y, x_1954.z, x_1953.z);
  let x_1957 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1959 : f32 = u_xlat17;
  let x_1962 : vec4<f32> = u_xlat3;
  let x_1964 : vec3<f32> = ((vec3<f32>(x_1957.x, x_1957.y, x_1957.z) * vec3<f32>(x_1959, x_1959, x_1959)) + vec3<f32>(x_1962.x, x_1962.y, x_1962.w));
  let x_1965 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1964.x, x_1964.y, x_1964.z, x_1965.w);
  let x_1967 : vec3<f32> = u_xlat2;
  let x_1969 : vec4<f32> = u_xlat3;
  let x_1971 : vec3<f32> = (-(x_1967) + vec3<f32>(x_1969.x, x_1969.y, x_1969.z));
  let x_1972 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1971.x, x_1971.y, x_1971.z, x_1972.w);
  let x_1974 : vec4<f32> = u_xlat3;
  let x_1976 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_1974.x, x_1974.y, x_1974.z), x_1976);
  let x_1978 : f32 = u_xlat0;
  let x_1981 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1978) * 0.004f) + x_1981);
  let x_1983 : f32 = u_xlat24;
  u_xlat24 = max(x_1983, 0.0f);
  let x_1985 : vec4<f32> = u_xlat3;
  let x_1987 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1985.x, x_1985.y, x_1985.z), vec3<f32>(x_1987.x, x_1987.y, x_1987.z));
  let x_1992 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1992 + 0.0001f);
  let x_1996 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1996);
  let x_2000 : f32 = u_xlat3.x;
  let x_2001 : f32 = u_xlat24;
  u_xlat3.x = (x_2000 * x_2001);
  let x_2005 : f32 = u_xlat3.x;
  let x_2006 : f32 = u_xlat23;
  let x_2008 : f32 = u_xlat22;
  u_xlat22 = ((x_2005 * x_2006) + x_2008);
  let x_2010 : vec2<f32> = u_xlat14;
  let x_2013 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2010.x, x_2010.y, x_2010.x, x_2010.y) * vec4<f32>(x_2013.z, x_2013.z, x_2013.z, x_2013.z)) + vec4<f32>(14.580999374f, 34.069000244f, 16.663999557f, 38.936000824f));
  let x_2022 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2022.x, x_2022.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2025 : f32 = u_xlat23;
  u_xlat23 = fract(x_2025);
  let x_2027 : f32 = u_xlat23;
  u_xlat23 = (x_2027 * 52.982917786f);
  let x_2029 : f32 = u_xlat23;
  u_xlat23 = fract(x_2029);
  let x_2031 : f32 = u_xlat23;
  let x_2035 : vec2<f32> = (vec2<f32>(x_2031, x_2031) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2036 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2035.x, x_2035.y, x_2036.z, x_2036.w);
  let x_2039 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2039);
  let x_2041 : f32 = u_xlat23;
  u_xlat4.z = ((x_2041 * 2.0f) + -1.0f);
  let x_2046 : f32 = u_xlat3.y;
  u_xlat23 = (x_2046 * 6.283185482f);
  let x_2049 : f32 = u_xlat4.z;
  let x_2052 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2049) * x_2052) + 1.0f);
  let x_2057 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2057);
  let x_2060 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2060);
  let x_2063 : f32 = u_xlat23;
  u_xlat6 = cos(x_2063);
  let x_2066 : f32 = u_xlat3.x;
  let x_2067 : f32 = u_xlat6;
  u_xlat4.x = (x_2066 * x_2067);
  let x_2071 : f32 = u_xlat3.x;
  let x_2073 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2071 * x_2073);
  let x_2076 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2076 * vec3<f32>(0.816496611f, 0.816496611f, 0.816496611f));
  let x_2080 : vec3<f32> = u_xlat1;
  let x_2082 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(x_2080), x_2082);
  let x_2084 : f32 = u_xlat23;
  u_xlatb23 = (x_2084 >= 0.0f);
  let x_2086 : bool = u_xlatb23;
  if (x_2086) {
    let x_2090 : vec3<f32> = u_xlat4;
    x_2087 = -(x_2090);
  } else {
    let x_2093 : vec3<f32> = u_xlat4;
    x_2087 = x_2093;
  }
  let x_2094 : vec3<f32> = x_2087;
  u_xlat4 = x_2094;
  let x_2095 : vec3<f32> = u_xlat4;
  let x_2097 : vec4<f32> = x_34.x_SSAOParams;
  let x_2100 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_2095 * vec3<f32>(x_2097.y, x_2097.y, x_2097.y)) + x_2100);
  let x_2102 : vec3<f32> = u_xlat4;
  let x_2105 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2107 : vec2<f32> = (vec2<f32>(x_2102.y, x_2102.y) * vec2<f32>(x_2105.x, x_2105.y));
  let x_2108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2107.x, x_2107.y, x_2108.z, x_2108.w);
  let x_2111 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2113 : vec3<f32> = u_xlat4;
  let x_2116 : vec4<f32> = u_xlat3;
  let x_2118 : vec2<f32> = ((vec2<f32>(x_2111.x, x_2111.y) * vec2<f32>(x_2113.x, x_2113.x)) + vec2<f32>(x_2116.x, x_2116.y));
  let x_2119 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2118.x, x_2118.y, x_2119.z, x_2119.w);
  let x_2122 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2124 : vec3<f32> = u_xlat4;
  let x_2127 : vec4<f32> = u_xlat3;
  let x_2129 : vec2<f32> = ((vec2<f32>(x_2122.x, x_2122.y) * vec2<f32>(x_2124.z, x_2124.z)) + vec2<f32>(x_2127.x, x_2127.y));
  let x_2130 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2129.x, x_2129.y, x_2130.z, x_2130.w);
  let x_2132 : vec4<f32> = u_xlat3;
  let x_2134 : vec2<f32> = (vec2<f32>(x_2132.x, x_2132.y) + vec2<f32>(1.0f, 1.0f));
  let x_2135 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2134.x, x_2134.y, x_2135.z, x_2135.w);
  let x_2137 : vec4<f32> = u_xlat3;
  let x_2139 : vec2<f32> = (vec2<f32>(x_2137.x, x_2137.y) * vec2<f32>(0.5f, 0.5f));
  let x_2140 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2139.x, x_2139.y, x_2140.z, x_2140.w);
  let x_2142 : vec4<f32> = u_xlat3;
  let x_2146 : vec2<f32> = clamp(vec2<f32>(x_2142.x, x_2142.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2147 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2146.x, x_2146.y, x_2147.z, x_2147.w);
  let x_2152 : vec4<f32> = u_xlat3;
  let x_2155 : f32 = x_34.x_GlobalMipBias.x;
  let x_2156 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2152.x, x_2152.y), x_2155);
  u_xlat23 = x_2156.x;
  let x_2159 : f32 = u_xlat7.x;
  let x_2161 : f32 = u_xlat23;
  let x_2164 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2159) * x_2161) + x_2164);
  let x_2167 : f32 = u_xlat0;
  let x_2169 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2167 + -(x_2169));
  let x_2174 : f32 = u_xlat11.x;
  let x_2177 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2174) < x_2177);
  let x_2179 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2179);
  let x_2182 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2182);
  let x_2184 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2184);
  let x_2186 : f32 = u_xlat23;
  let x_2188 : f32 = u_xlat11.x;
  u_xlat23 = (x_2186 * x_2188);
  let x_2191 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2191) + 1.0f);
  let x_2196 : f32 = u_xlat4.x;
  let x_2198 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2196 * x_2198);
  let x_2202 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2204 : vec4<f32> = u_xlat3;
  let x_2208 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2202.x, x_2202.y, x_2202.z) * vec3<f32>(x_2204.x, x_2204.x, x_2204.x)) + vec3<f32>(x_2208.x, x_2208.y, x_2208.z));
  let x_2212 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2214 : vec3<f32> = u_xlat10;
  let x_2217 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2212.x, x_2212.y, x_2212.z) * vec3<f32>(x_2214.x, x_2214.x, x_2214.x)) + x_2217);
  let x_2220 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2222 : vec3<f32> = u_xlat4;
  let x_2225 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2220.x, x_2220.y, x_2220.z) * vec3<f32>(x_2222.x, x_2222.x, x_2222.x)) + x_2225);
  let x_2227 : vec3<f32> = u_xlat2;
  let x_2229 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2227) + x_2229);
  let x_2231 : vec3<f32> = u_xlat4;
  let x_2232 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_2231, x_2232);
  let x_2235 : f32 = u_xlat0;
  let x_2239 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2235) * 0.004f) + x_2239);
  let x_2243 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2243, 0.0f);
  let x_2246 : vec3<f32> = u_xlat4;
  let x_2247 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2246, x_2247);
  let x_2251 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2251 + 0.0001f);
  let x_2255 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2255);
  let x_2259 : f32 = u_xlat10.x;
  let x_2261 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2259 * x_2261);
  let x_2265 : f32 = u_xlat3.x;
  let x_2266 : f32 = u_xlat23;
  let x_2268 : f32 = u_xlat22;
  u_xlat22 = ((x_2265 * x_2266) + x_2268);
  let x_2270 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2270.z, x_2270.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2273 : f32 = u_xlat23;
  u_xlat23 = fract(x_2273);
  let x_2275 : f32 = u_xlat23;
  u_xlat23 = (x_2275 * 52.982917786f);
  let x_2277 : f32 = u_xlat23;
  u_xlat23 = fract(x_2277);
  let x_2279 : f32 = u_xlat23;
  let x_2284 : vec2<f32> = (vec2<f32>(x_2279, x_2279) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2285 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2284.x, x_2284.y, x_2285.z, x_2285.w);
  let x_2288 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2288);
  let x_2290 : f32 = u_xlat23;
  u_xlat4.z = ((x_2290 * 2.0f) + -1.0f);
  let x_2295 : f32 = u_xlat3.y;
  u_xlat23 = (x_2295 * 6.283185482f);
  let x_2298 : f32 = u_xlat4.z;
  let x_2301 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2298) * x_2301) + 1.0f);
  let x_2306 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2306);
  let x_2309 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2309);
  let x_2312 : f32 = u_xlat23;
  u_xlat6 = cos(x_2312);
  let x_2315 : f32 = u_xlat3.x;
  let x_2316 : f32 = u_xlat6;
  u_xlat4.x = (x_2315 * x_2316);
  let x_2320 : f32 = u_xlat3.x;
  let x_2322 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2320 * x_2322);
  let x_2325 : vec3<f32> = u_xlat4;
  let x_2328 : vec3<f32> = (x_2325 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_2329 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2328.x, x_2328.y, x_2328.z, x_2329.w);
  let x_2331 : vec3<f32> = u_xlat1;
  let x_2333 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_2331), vec3<f32>(x_2333.x, x_2333.y, x_2333.z));
  let x_2336 : f32 = u_xlat23;
  u_xlatb23 = (x_2336 >= 0.0f);
  let x_2338 : bool = u_xlatb23;
  if (x_2338) {
    let x_2342 : vec4<f32> = u_xlat3;
    x_2339 = -(vec3<f32>(x_2342.x, x_2342.y, x_2342.z));
  } else {
    let x_2346 : vec4<f32> = u_xlat3;
    x_2339 = vec3<f32>(x_2346.x, x_2346.y, x_2346.z);
  }
  let x_2348 : vec3<f32> = x_2339;
  let x_2349 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2348.x, x_2348.y, x_2348.z, x_2349.w);
  let x_2351 : vec4<f32> = u_xlat3;
  let x_2354 : vec4<f32> = x_34.x_SSAOParams;
  let x_2357 : vec3<f32> = u_xlat2;
  let x_2358 : vec3<f32> = ((vec3<f32>(x_2351.x, x_2351.y, x_2351.z) * vec3<f32>(x_2354.y, x_2354.y, x_2354.y)) + x_2357);
  let x_2359 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2358.x, x_2358.y, x_2358.z, x_2359.w);
  let x_2361 : vec4<f32> = u_xlat3;
  let x_2364 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2366 : vec2<f32> = (vec2<f32>(x_2361.y, x_2361.y) * vec2<f32>(x_2364.x, x_2364.y));
  let x_2367 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2366.x, x_2367.y, x_2366.y);
  let x_2370 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2372 : vec4<f32> = u_xlat3;
  let x_2375 : vec3<f32> = u_xlat10;
  let x_2377 : vec2<f32> = ((vec2<f32>(x_2370.x, x_2370.y) * vec2<f32>(x_2372.x, x_2372.x)) + vec2<f32>(x_2375.x, x_2375.z));
  let x_2378 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2377.x, x_2377.y, x_2378.z, x_2378.w);
  let x_2381 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2383 : vec4<f32> = u_xlat3;
  let x_2386 : vec4<f32> = u_xlat3;
  let x_2388 : vec2<f32> = ((vec2<f32>(x_2381.x, x_2381.y) * vec2<f32>(x_2383.z, x_2383.z)) + vec2<f32>(x_2386.x, x_2386.y));
  let x_2389 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2388.x, x_2388.y, x_2389.z, x_2389.w);
  let x_2391 : vec4<f32> = u_xlat3;
  let x_2393 : vec2<f32> = (vec2<f32>(x_2391.x, x_2391.y) + vec2<f32>(1.0f, 1.0f));
  let x_2394 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2393.x, x_2393.y, x_2394.z, x_2394.w);
  let x_2396 : vec4<f32> = u_xlat3;
  let x_2398 : vec2<f32> = (vec2<f32>(x_2396.x, x_2396.y) * vec2<f32>(0.5f, 0.5f));
  let x_2399 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2398.x, x_2398.y, x_2399.z, x_2399.w);
  let x_2401 : vec4<f32> = u_xlat3;
  let x_2405 : vec2<f32> = clamp(vec2<f32>(x_2401.x, x_2401.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2406 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2405.x, x_2405.y, x_2406.z, x_2406.w);
  let x_2411 : vec4<f32> = u_xlat3;
  let x_2414 : f32 = x_34.x_GlobalMipBias.x;
  let x_2415 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2411.x, x_2411.y), x_2414);
  u_xlat23 = x_2415.x;
  let x_2418 : f32 = u_xlat7.x;
  let x_2420 : f32 = u_xlat23;
  let x_2423 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2418) * x_2420) + x_2423);
  let x_2425 : f32 = u_xlat0;
  let x_2426 : f32 = u_xlat17;
  u_xlat24 = (x_2425 + -(x_2426));
  let x_2429 : f32 = u_xlat24;
  let x_2432 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2429) < x_2432);
  let x_2434 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2434);
  let x_2436 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2436);
  let x_2438 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2438);
  let x_2440 : f32 = u_xlat23;
  let x_2441 : f32 = u_xlat24;
  u_xlat23 = (x_2440 * x_2441);
  let x_2444 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2444) + 1.0f);
  let x_2448 : f32 = u_xlat17;
  let x_2450 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2448 * x_2450);
  let x_2453 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2455 : vec4<f32> = u_xlat3;
  let x_2459 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2453.x, x_2453.y, x_2453.z) * vec3<f32>(x_2455.x, x_2455.x, x_2455.x)) + vec3<f32>(x_2459.x, x_2459.y, x_2459.z));
  let x_2463 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2465 : vec3<f32> = u_xlat10;
  let x_2468 : vec3<f32> = u_xlat4;
  let x_2469 : vec3<f32> = ((vec3<f32>(x_2463.x, x_2463.y, x_2463.z) * vec3<f32>(x_2465.x, x_2465.x, x_2465.x)) + x_2468);
  let x_2470 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2469.x, x_2469.y, x_2470.z, x_2469.z);
  let x_2473 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2475 : f32 = u_xlat17;
  let x_2478 : vec4<f32> = u_xlat3;
  let x_2480 : vec3<f32> = ((vec3<f32>(x_2473.x, x_2473.y, x_2473.z) * vec3<f32>(x_2475, x_2475, x_2475)) + vec3<f32>(x_2478.x, x_2478.y, x_2478.w));
  let x_2481 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2480.x, x_2480.y, x_2480.z, x_2481.w);
  let x_2483 : vec3<f32> = u_xlat2;
  let x_2485 : vec4<f32> = u_xlat3;
  let x_2487 : vec3<f32> = (-(x_2483) + vec3<f32>(x_2485.x, x_2485.y, x_2485.z));
  let x_2488 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2487.x, x_2487.y, x_2487.z, x_2488.w);
  let x_2490 : vec4<f32> = u_xlat3;
  let x_2492 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_2490.x, x_2490.y, x_2490.z), x_2492);
  let x_2494 : f32 = u_xlat0;
  let x_2497 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2494) * 0.004f) + x_2497);
  let x_2499 : f32 = u_xlat24;
  u_xlat24 = max(x_2499, 0.0f);
  let x_2501 : vec4<f32> = u_xlat3;
  let x_2503 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2501.x, x_2501.y, x_2501.z), vec3<f32>(x_2503.x, x_2503.y, x_2503.z));
  let x_2508 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2508 + 0.0001f);
  let x_2512 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2512);
  let x_2516 : f32 = u_xlat3.x;
  let x_2517 : f32 = u_xlat24;
  u_xlat3.x = (x_2516 * x_2517);
  let x_2521 : f32 = u_xlat3.x;
  let x_2522 : f32 = u_xlat23;
  let x_2524 : f32 = u_xlat22;
  u_xlat22 = ((x_2521 * x_2522) + x_2524);
  let x_2526 : vec2<f32> = u_xlat14;
  let x_2529 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2526.x, x_2526.y, x_2526.x, x_2526.y) * vec4<f32>(x_2529.z, x_2529.z, x_2529.z, x_2529.z)) + vec4<f32>(18.746999741f, 43.803001404f, 20.829999924f, 48.670001984f));
  let x_2538 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2538.x, x_2538.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2541 : f32 = u_xlat23;
  u_xlat23 = fract(x_2541);
  let x_2543 : f32 = u_xlat23;
  u_xlat23 = (x_2543 * 52.982917786f);
  let x_2545 : f32 = u_xlat23;
  u_xlat23 = fract(x_2545);
  let x_2547 : f32 = u_xlat23;
  let x_2552 : vec2<f32> = (vec2<f32>(x_2547, x_2547) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2553 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2552.x, x_2552.y, x_2553.z, x_2553.w);
  let x_2556 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2556);
  let x_2558 : f32 = u_xlat23;
  u_xlat4.z = ((x_2558 * 2.0f) + -1.0f);
  let x_2563 : f32 = u_xlat3.y;
  u_xlat23 = (x_2563 * 6.283185482f);
  let x_2566 : f32 = u_xlat4.z;
  let x_2569 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2566) * x_2569) + 1.0f);
  let x_2574 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2574);
  let x_2577 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2577);
  let x_2580 : f32 = u_xlat23;
  u_xlat6 = cos(x_2580);
  let x_2583 : f32 = u_xlat3.x;
  let x_2584 : f32 = u_xlat6;
  u_xlat4.x = (x_2583 * x_2584);
  let x_2588 : f32 = u_xlat3.x;
  let x_2590 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2588 * x_2590);
  let x_2593 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2593 * vec3<f32>(0.912870944f, 0.912870944f, 0.912870944f));
  let x_2597 : vec3<f32> = u_xlat1;
  let x_2599 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(x_2597), x_2599);
  let x_2601 : f32 = u_xlat23;
  u_xlatb23 = (x_2601 >= 0.0f);
  let x_2603 : bool = u_xlatb23;
  if (x_2603) {
    let x_2607 : vec3<f32> = u_xlat4;
    x_2604 = -(x_2607);
  } else {
    let x_2610 : vec3<f32> = u_xlat4;
    x_2604 = x_2610;
  }
  let x_2611 : vec3<f32> = x_2604;
  u_xlat4 = x_2611;
  let x_2612 : vec3<f32> = u_xlat4;
  let x_2614 : vec4<f32> = x_34.x_SSAOParams;
  let x_2617 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_2612 * vec3<f32>(x_2614.y, x_2614.y, x_2614.y)) + x_2617);
  let x_2619 : vec3<f32> = u_xlat4;
  let x_2622 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2624 : vec2<f32> = (vec2<f32>(x_2619.y, x_2619.y) * vec2<f32>(x_2622.x, x_2622.y));
  let x_2625 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2624.x, x_2624.y, x_2625.z, x_2625.w);
  let x_2628 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2630 : vec3<f32> = u_xlat4;
  let x_2633 : vec4<f32> = u_xlat3;
  let x_2635 : vec2<f32> = ((vec2<f32>(x_2628.x, x_2628.y) * vec2<f32>(x_2630.x, x_2630.x)) + vec2<f32>(x_2633.x, x_2633.y));
  let x_2636 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2635.x, x_2635.y, x_2636.z, x_2636.w);
  let x_2639 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2641 : vec3<f32> = u_xlat4;
  let x_2644 : vec4<f32> = u_xlat3;
  let x_2646 : vec2<f32> = ((vec2<f32>(x_2639.x, x_2639.y) * vec2<f32>(x_2641.z, x_2641.z)) + vec2<f32>(x_2644.x, x_2644.y));
  let x_2647 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2646.x, x_2646.y, x_2647.z, x_2647.w);
  let x_2649 : vec4<f32> = u_xlat3;
  let x_2651 : vec2<f32> = (vec2<f32>(x_2649.x, x_2649.y) + vec2<f32>(1.0f, 1.0f));
  let x_2652 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2651.x, x_2651.y, x_2652.z, x_2652.w);
  let x_2654 : vec4<f32> = u_xlat3;
  let x_2656 : vec2<f32> = (vec2<f32>(x_2654.x, x_2654.y) * vec2<f32>(0.5f, 0.5f));
  let x_2657 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2656.x, x_2656.y, x_2657.z, x_2657.w);
  let x_2659 : vec4<f32> = u_xlat3;
  let x_2663 : vec2<f32> = clamp(vec2<f32>(x_2659.x, x_2659.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2664 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2663.x, x_2663.y, x_2664.z, x_2664.w);
  let x_2669 : vec4<f32> = u_xlat3;
  let x_2672 : f32 = x_34.x_GlobalMipBias.x;
  let x_2673 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2669.x, x_2669.y), x_2672);
  u_xlat23 = x_2673.x;
  let x_2676 : f32 = u_xlat7.x;
  let x_2678 : f32 = u_xlat23;
  let x_2681 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2676) * x_2678) + x_2681);
  let x_2684 : f32 = u_xlat0;
  let x_2686 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2684 + -(x_2686));
  let x_2691 : f32 = u_xlat11.x;
  let x_2694 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2691) < x_2694);
  let x_2696 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2696);
  let x_2699 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2699);
  let x_2701 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2701);
  let x_2703 : f32 = u_xlat23;
  let x_2705 : f32 = u_xlat11.x;
  u_xlat23 = (x_2703 * x_2705);
  let x_2708 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2708) + 1.0f);
  let x_2713 : f32 = u_xlat4.x;
  let x_2715 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2713 * x_2715);
  let x_2719 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2721 : vec4<f32> = u_xlat3;
  let x_2725 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2719.x, x_2719.y, x_2719.z) * vec3<f32>(x_2721.x, x_2721.x, x_2721.x)) + vec3<f32>(x_2725.x, x_2725.y, x_2725.z));
  let x_2729 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2731 : vec3<f32> = u_xlat10;
  let x_2734 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2729.x, x_2729.y, x_2729.z) * vec3<f32>(x_2731.x, x_2731.x, x_2731.x)) + x_2734);
  let x_2737 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2739 : vec3<f32> = u_xlat4;
  let x_2742 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2737.x, x_2737.y, x_2737.z) * vec3<f32>(x_2739.x, x_2739.x, x_2739.x)) + x_2742);
  let x_2744 : vec3<f32> = u_xlat2;
  let x_2746 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2744) + x_2746);
  let x_2748 : vec3<f32> = u_xlat4;
  let x_2749 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_2748, x_2749);
  let x_2752 : f32 = u_xlat0;
  let x_2756 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2752) * 0.004f) + x_2756);
  let x_2760 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2760, 0.0f);
  let x_2763 : vec3<f32> = u_xlat4;
  let x_2764 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2763, x_2764);
  let x_2768 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2768 + 0.0001f);
  let x_2772 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2772);
  let x_2776 : f32 = u_xlat10.x;
  let x_2778 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2776 * x_2778);
  let x_2782 : f32 = u_xlat3.x;
  let x_2783 : f32 = u_xlat23;
  let x_2785 : f32 = u_xlat22;
  u_xlat22 = ((x_2782 * x_2783) + x_2785);
  let x_2787 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2787.z, x_2787.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2790 : f32 = u_xlat23;
  u_xlat23 = fract(x_2790);
  let x_2792 : f32 = u_xlat23;
  u_xlat23 = (x_2792 * 52.982917786f);
  let x_2794 : f32 = u_xlat23;
  u_xlat23 = fract(x_2794);
  let x_2796 : f32 = u_xlat23;
  let x_2801 : vec2<f32> = (vec2<f32>(x_2796, x_2796) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_2802 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2801.x, x_2801.y, x_2802.z, x_2802.w);
  let x_2805 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2805);
  let x_2807 : f32 = u_xlat23;
  u_xlat4.z = ((x_2807 * 2.0f) + -1.0f);
  let x_2812 : f32 = u_xlat3.y;
  u_xlat23 = (x_2812 * 6.283185482f);
  let x_2815 : f32 = u_xlat4.z;
  let x_2818 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2815) * x_2818) + 1.0f);
  let x_2823 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2823);
  let x_2826 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2826);
  let x_2829 : f32 = u_xlat23;
  u_xlat6 = cos(x_2829);
  let x_2832 : f32 = u_xlat3.x;
  let x_2833 : f32 = u_xlat6;
  u_xlat4.x = (x_2832 * x_2833);
  let x_2837 : f32 = u_xlat3.x;
  let x_2839 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2837 * x_2839);
  let x_2842 : vec3<f32> = u_xlat4;
  let x_2845 : vec3<f32> = (x_2842 * vec3<f32>(0.957427144f, 0.957427144f, 0.957427144f));
  let x_2846 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2845.x, x_2845.y, x_2845.z, x_2846.w);
  let x_2848 : vec3<f32> = u_xlat1;
  let x_2850 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_2848), vec3<f32>(x_2850.x, x_2850.y, x_2850.z));
  let x_2853 : f32 = u_xlat23;
  u_xlatb23 = (x_2853 >= 0.0f);
  let x_2855 : bool = u_xlatb23;
  if (x_2855) {
    let x_2859 : vec4<f32> = u_xlat3;
    x_2856 = -(vec3<f32>(x_2859.x, x_2859.y, x_2859.z));
  } else {
    let x_2863 : vec4<f32> = u_xlat3;
    x_2856 = vec3<f32>(x_2863.x, x_2863.y, x_2863.z);
  }
  let x_2865 : vec3<f32> = x_2856;
  let x_2866 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2865.x, x_2865.y, x_2865.z, x_2866.w);
  let x_2868 : vec4<f32> = u_xlat3;
  let x_2871 : vec4<f32> = x_34.x_SSAOParams;
  let x_2874 : vec3<f32> = u_xlat2;
  let x_2875 : vec3<f32> = ((vec3<f32>(x_2868.x, x_2868.y, x_2868.z) * vec3<f32>(x_2871.y, x_2871.y, x_2871.y)) + x_2874);
  let x_2876 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2875.x, x_2875.y, x_2875.z, x_2876.w);
  let x_2878 : vec4<f32> = u_xlat3;
  let x_2881 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2883 : vec2<f32> = (vec2<f32>(x_2878.y, x_2878.y) * vec2<f32>(x_2881.x, x_2881.y));
  let x_2884 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2883.x, x_2884.y, x_2883.y);
  let x_2887 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2889 : vec4<f32> = u_xlat3;
  let x_2892 : vec3<f32> = u_xlat10;
  let x_2894 : vec2<f32> = ((vec2<f32>(x_2887.x, x_2887.y) * vec2<f32>(x_2889.x, x_2889.x)) + vec2<f32>(x_2892.x, x_2892.z));
  let x_2895 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2894.x, x_2894.y, x_2895.z, x_2895.w);
  let x_2898 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2900 : vec4<f32> = u_xlat3;
  let x_2903 : vec4<f32> = u_xlat3;
  let x_2905 : vec2<f32> = ((vec2<f32>(x_2898.x, x_2898.y) * vec2<f32>(x_2900.z, x_2900.z)) + vec2<f32>(x_2903.x, x_2903.y));
  let x_2906 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2905.x, x_2905.y, x_2906.z, x_2906.w);
  let x_2908 : vec4<f32> = u_xlat3;
  let x_2910 : vec2<f32> = (vec2<f32>(x_2908.x, x_2908.y) + vec2<f32>(1.0f, 1.0f));
  let x_2911 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2910.x, x_2910.y, x_2911.z, x_2911.w);
  let x_2913 : vec4<f32> = u_xlat3;
  let x_2915 : vec2<f32> = (vec2<f32>(x_2913.x, x_2913.y) * vec2<f32>(0.5f, 0.5f));
  let x_2916 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2915.x, x_2915.y, x_2916.z, x_2916.w);
  let x_2918 : vec4<f32> = u_xlat3;
  let x_2922 : vec2<f32> = clamp(vec2<f32>(x_2918.x, x_2918.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2923 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2922.x, x_2922.y, x_2923.z, x_2923.w);
  let x_2928 : vec4<f32> = u_xlat3;
  let x_2931 : f32 = x_34.x_GlobalMipBias.x;
  let x_2932 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2928.x, x_2928.y), x_2931);
  u_xlat23 = x_2932.x;
  let x_2935 : f32 = u_xlat7.x;
  let x_2937 : f32 = u_xlat23;
  let x_2940 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2935) * x_2937) + x_2940);
  let x_2942 : f32 = u_xlat0;
  let x_2943 : f32 = u_xlat17;
  u_xlat24 = (x_2942 + -(x_2943));
  let x_2946 : f32 = u_xlat24;
  let x_2949 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2946) < x_2949);
  let x_2951 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2951);
  let x_2953 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2953);
  let x_2955 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2955);
  let x_2957 : f32 = u_xlat23;
  let x_2958 : f32 = u_xlat24;
  u_xlat23 = (x_2957 * x_2958);
  let x_2961 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2961) + 1.0f);
  let x_2965 : f32 = u_xlat17;
  let x_2967 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2965 * x_2967);
  let x_2970 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2972 : vec4<f32> = u_xlat3;
  let x_2976 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2970.x, x_2970.y, x_2970.z) * vec3<f32>(x_2972.x, x_2972.x, x_2972.x)) + vec3<f32>(x_2976.x, x_2976.y, x_2976.z));
  let x_2980 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2982 : vec3<f32> = u_xlat10;
  let x_2985 : vec3<f32> = u_xlat4;
  let x_2986 : vec3<f32> = ((vec3<f32>(x_2980.x, x_2980.y, x_2980.z) * vec3<f32>(x_2982.x, x_2982.x, x_2982.x)) + x_2985);
  let x_2987 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2986.x, x_2986.y, x_2987.z, x_2986.z);
  let x_2990 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2992 : f32 = u_xlat17;
  let x_2995 : vec4<f32> = u_xlat3;
  let x_2997 : vec3<f32> = ((vec3<f32>(x_2990.x, x_2990.y, x_2990.z) * vec3<f32>(x_2992, x_2992, x_2992)) + vec3<f32>(x_2995.x, x_2995.y, x_2995.w));
  let x_2998 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2997.x, x_2997.y, x_2997.z, x_2998.w);
  let x_3000 : vec3<f32> = u_xlat2;
  let x_3002 : vec4<f32> = u_xlat3;
  let x_3004 : vec3<f32> = (-(x_3000) + vec3<f32>(x_3002.x, x_3002.y, x_3002.z));
  let x_3005 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3004.x, x_3004.y, x_3004.z, x_3005.w);
  let x_3007 : vec4<f32> = u_xlat3;
  let x_3009 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_3007.x, x_3007.y, x_3007.z), x_3009);
  let x_3011 : f32 = u_xlat0;
  let x_3014 : f32 = u_xlat24;
  u_xlat24 = ((-(x_3011) * 0.004f) + x_3014);
  let x_3016 : f32 = u_xlat24;
  u_xlat24 = max(x_3016, 0.0f);
  let x_3018 : vec4<f32> = u_xlat3;
  let x_3020 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_3018.x, x_3018.y, x_3018.z), vec3<f32>(x_3020.x, x_3020.y, x_3020.z));
  let x_3025 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3025 + 0.0001f);
  let x_3029 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3029);
  let x_3033 : f32 = u_xlat3.x;
  let x_3034 : f32 = u_xlat24;
  u_xlat3.x = (x_3033 * x_3034);
  let x_3038 : f32 = u_xlat3.x;
  let x_3039 : f32 = u_xlat23;
  let x_3041 : f32 = u_xlat22;
  u_xlat22 = ((x_3038 * x_3039) + x_3041);
  let x_3043 : vec2<f32> = u_xlat14;
  let x_3045 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat14 = ((x_3043 * vec2<f32>(x_3045.z, x_3045.z)) + vec2<f32>(22.913000107f, 53.537002563f));
  let x_3052 : vec2<f32> = u_xlat14;
  u_xlat14.x = dot(x_3052, vec2<f32>(0.067110561f, 0.00583715f));
  let x_3056 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_3056);
  let x_3060 : f32 = u_xlat14.x;
  u_xlat14.x = (x_3060 * 52.982917786f);
  let x_3064 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_3064);
  let x_3067 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_3067.x, x_3067.x) + vec2<f32>(0.984375f, 0.125f));
  let x_3073 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_3073);
  let x_3077 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_3077 * 2.0f) + -1.0f);
  let x_3082 : f32 = u_xlat14.y;
  u_xlat14.x = (x_3082 * 6.283185482f);
  let x_3086 : f32 = u_xlat3.z;
  let x_3089 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_3086) * x_3089) + 1.0f);
  let x_3092 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_3092);
  let x_3095 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_3095);
  let x_3099 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_3099);
  let x_3102 : f32 = u_xlat21;
  let x_3104 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3102 * x_3104);
  let x_3107 : f32 = u_xlat21;
  let x_3109 : f32 = u_xlat4.x;
  u_xlat3.y = (x_3107 * x_3109);
  let x_3112 : vec3<f32> = u_xlat1;
  let x_3114 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(-(x_3112), vec3<f32>(x_3114.x, x_3114.y, x_3114.z));
  let x_3119 : f32 = u_xlat14.x;
  u_xlatb14 = (x_3119 >= 0.0f);
  let x_3121 : bool = u_xlatb14;
  if (x_3121) {
    let x_3125 : vec4<f32> = u_xlat3;
    x_3122 = -(vec3<f32>(x_3125.x, x_3125.y, x_3125.z));
  } else {
    let x_3129 : vec4<f32> = u_xlat3;
    x_3122 = vec3<f32>(x_3129.x, x_3129.y, x_3129.z);
  }
  let x_3131 : vec3<f32> = x_3122;
  let x_3132 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3131.x, x_3131.y, x_3131.z, x_3132.w);
  let x_3134 : vec4<f32> = u_xlat3;
  let x_3137 : vec4<f32> = x_34.x_SSAOParams;
  let x_3140 : vec3<f32> = u_xlat2;
  let x_3141 : vec3<f32> = ((vec3<f32>(x_3134.x, x_3134.y, x_3134.z) * vec3<f32>(x_3137.y, x_3137.y, x_3137.y)) + x_3140);
  let x_3142 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3141.x, x_3141.y, x_3141.z, x_3142.w);
  let x_3144 : vec4<f32> = u_xlat3;
  let x_3147 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_3144.y, x_3144.y) * vec2<f32>(x_3147.x, x_3147.y));
  let x_3151 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_3153 : vec4<f32> = u_xlat3;
  let x_3156 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_3151.x, x_3151.y) * vec2<f32>(x_3153.x, x_3153.x)) + x_3156);
  let x_3159 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_3161 : vec4<f32> = u_xlat3;
  let x_3164 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_3159.x, x_3159.y) * vec2<f32>(x_3161.z, x_3161.z)) + x_3164);
  let x_3166 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_3166 + vec2<f32>(1.0f, 1.0f));
  let x_3168 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_3168 * vec2<f32>(0.5f, 0.5f));
  let x_3170 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_3170, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3177 : vec2<f32> = u_xlat14;
  let x_3179 : f32 = x_34.x_GlobalMipBias.x;
  let x_3180 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3177, x_3179);
  u_xlat23 = x_3180.x;
  let x_3183 : f32 = u_xlat7.x;
  let x_3185 : f32 = u_xlat23;
  let x_3188 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_3183) * x_3185) + x_3188);
  let x_3192 : f32 = u_xlat7.x;
  let x_3194 : f32 = u_xlat0;
  u_xlat3.x = (-(x_3192) + x_3194);
  let x_3198 : f32 = u_xlat3.x;
  let x_3201 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_3198) < x_3201);
  let x_3203 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_3203);
  let x_3206 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_3206);
  let x_3208 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_3208);
  let x_3210 : f32 = u_xlat23;
  let x_3212 : f32 = u_xlat3.x;
  u_xlat23 = (x_3210 * x_3212);
  let x_3215 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_3215) + 1.0f);
  let x_3219 : f32 = u_xlat7.x;
  let x_3221 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_3219 * x_3221);
  let x_3225 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_3227 : vec2<f32> = u_xlat14;
  let x_3231 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_3233 : vec3<f32> = ((vec3<f32>(x_3225.x, x_3225.y, x_3225.z) * vec3<f32>(x_3227.x, x_3227.x, x_3227.x)) + vec3<f32>(x_3231.x, x_3231.y, x_3231.z));
  let x_3234 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3233.x, x_3233.y, x_3233.z, x_3234.w);
  let x_3237 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_3239 : f32 = u_xlat21;
  let x_3242 : vec4<f32> = u_xlat3;
  let x_3244 : vec3<f32> = ((vec3<f32>(x_3237.x, x_3237.y, x_3237.z) * vec3<f32>(x_3239, x_3239, x_3239)) + vec3<f32>(x_3242.x, x_3242.y, x_3242.z));
  let x_3245 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3244.x, x_3244.y, x_3244.z, x_3245.w);
  let x_3248 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_3250 : vec3<f32> = u_xlat7;
  let x_3253 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_3248.x, x_3248.y, x_3248.z) * vec3<f32>(x_3250.x, x_3250.x, x_3250.x)) + vec3<f32>(x_3253.x, x_3253.y, x_3253.z));
  let x_3256 : vec3<f32> = u_xlat2;
  let x_3258 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_3256) + x_3258);
  let x_3260 : vec3<f32> = u_xlat7;
  let x_3261 : vec3<f32> = u_xlat1;
  u_xlat2.x = dot(x_3260, x_3261);
  let x_3264 : f32 = u_xlat0;
  let x_3268 : f32 = u_xlat2.x;
  u_xlat2.x = ((-(x_3264) * 0.004f) + x_3268);
  let x_3272 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3272, 0.0f);
  let x_3275 : vec3<f32> = u_xlat7;
  let x_3276 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_3275, x_3276);
  let x_3280 : f32 = u_xlat7.x;
  u_xlat7.x = (x_3280 + 0.0001f);
  let x_3284 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_3284);
  let x_3288 : f32 = u_xlat7.x;
  let x_3290 : f32 = u_xlat2.x;
  u_xlat7.x = (x_3288 * x_3290);
  let x_3294 : f32 = u_xlat7.x;
  let x_3295 : f32 = u_xlat23;
  let x_3297 : f32 = u_xlat22;
  u_xlat7.x = ((x_3294 * x_3295) + x_3297);
  let x_3301 : f32 = u_xlat7.x;
  let x_3303 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_3301 * x_3303);
  let x_3307 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_3307);
  let x_3310 : f32 = u_xlat0;
  let x_3313 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_3310) * x_3313) + 1.0f);
  let x_3316 : f32 = u_xlat0;
  let x_3317 : f32 = u_xlat0;
  u_xlat0 = (x_3316 * x_3317);
  let x_3320 : f32 = u_xlat7.x;
  let x_3322 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_3320 * x_3322);
  let x_3325 : f32 = u_xlat0;
  let x_3327 : f32 = u_xlat7.x;
  u_xlat0 = (x_3325 * x_3327);
  let x_3329 : f32 = u_xlat0;
  u_xlat0 = (x_3329 * 0.083333336f);
  let x_3332 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3332, 0.0f, 1.0f);
  let x_3334 : f32 = u_xlat0;
  u_xlat0 = log2(x_3334);
  let x_3336 : f32 = u_xlat0;
  u_xlat0 = (x_3336 * 0.600000024f);
  let x_3339 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3339);
  let x_3343 : vec3<f32> = u_xlat1;
  let x_3345 : vec3<f32> = ((x_3343 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3346 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3346.x, x_3345.x, x_3345.y, x_3345.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

