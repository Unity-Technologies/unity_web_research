struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScaleBiasRt : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_43 : PGlobals;

@group(0) @binding(4) var x_MetallicTex : texture_2d<f32>;

@group(0) @binding(10) var sampler_MetallicTex : sampler;

var<private> vs_TEXCOORD3 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(5) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_267 : MainLightShadows;

var<private> vs_TEXCOORD8 : vec4<f32>;

@group(0) @binding(6) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD7 : vec3<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(2) var<uniform> x_1681 : UnityPerDraw;

@group(1) @binding(1) var<uniform> x_1923 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : f32;
  var u_xlat20 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat59 : f32;
  var u_xlat22 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlat60 : f32;
  var u_xlat57 : f32;
  var u_xlat41 : f32;
  var u_xlatb61 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat61 : f32;
  var u_xlatb5 : bool;
  var u_xlat43 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat25 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat26 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat46 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat64 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat62 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlat63 : f32;
  var u_xlat27 : vec3<f32>;
  var u_xlatu57 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu59 : u32;
  var u_xlati61 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati59 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_TEXCOORD0;
  let x_49 : f32 = x_43.x_GlobalMipBias.x;
  let x_50 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_39.x, x_39.y), x_49);
  u_xlat0 = x_50;
  let x_58 : vec4<f32> = vs_TEXCOORD0;
  let x_61 : f32 = x_43.x_GlobalMipBias.x;
  let x_62 : vec4<f32> = textureSampleBias(x_MetallicTex, sampler_MetallicTex, vec2<f32>(x_58.x, x_58.y), x_61);
  u_xlat1 = x_62.x;
  let x_67 : vec4<f32> = vs_TEXCOORD3;
  let x_69 : vec4<f32> = vs_TEXCOORD3;
  u_xlat20.x = dot(vec3<f32>(x_67.x, x_67.y, x_67.z), vec3<f32>(x_69.x, x_69.y, x_69.z));
  let x_74 : f32 = u_xlat20.x;
  u_xlat20.x = inverseSqrt(x_74);
  let x_77 : vec3<f32> = u_xlat20;
  let x_79 : vec4<f32> = vs_TEXCOORD3;
  u_xlat20 = (vec3<f32>(x_77.x, x_77.x, x_77.x) * vec3<f32>(x_79.x, x_79.y, x_79.z));
  let x_88 : vec4<f32> = vs_TEXCOORD0;
  let x_91 : f32 = x_43.x_GlobalMipBias.x;
  let x_92 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, vec2<f32>(x_88.z, x_88.w), x_91);
  u_xlat2 = x_92;
  let x_98 : vec4<f32> = vs_TEXCOORD0;
  let x_101 : f32 = x_43.x_GlobalMipBias.x;
  let x_102 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, vec2<f32>(x_98.z, x_98.w), x_101);
  u_xlat3 = vec3<f32>(x_102.x, x_102.y, x_102.z);
  let x_104 : vec4<f32> = u_xlat2;
  let x_108 : vec3<f32> = (vec3<f32>(x_104.x, x_104.y, x_104.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_109 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_111 : vec3<f32> = u_xlat20;
  let x_112 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_111, vec3<f32>(x_112.x, x_112.y, x_112.z));
  let x_117 : f32 = u_xlat2.x;
  u_xlat2.x = (x_117 + 0.5f);
  let x_121 : vec4<f32> = u_xlat2;
  let x_123 : vec3<f32> = u_xlat3;
  let x_124 : vec3<f32> = (vec3<f32>(x_121.x, x_121.x, x_121.x) * x_123);
  let x_125 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_124.x, x_124.y, x_124.z, x_125.w);
  let x_129 : f32 = u_xlat2.w;
  u_xlat59 = max(x_129, 0.0001f);
  let x_132 : vec4<f32> = u_xlat2;
  let x_134 : f32 = u_xlat59;
  let x_136 : vec3<f32> = (vec3<f32>(x_132.x, x_132.y, x_132.z) / vec3<f32>(x_134, x_134, x_134));
  let x_137 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_136.x, x_136.y, x_136.z, x_137.w);
  let x_143 : vec4<f32> = x_43.x_ScaledScreenParams;
  let x_144 : vec2<f32> = vec2<f32>(x_143.x, x_143.y);
  let x_148 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_144.x, x_144.y));
  let x_149 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_148.x, x_148.y, x_149.z);
  let x_151 : vec3<f32> = u_xlat3;
  let x_153 : vec4<f32> = hlslcc_FragCoord;
  let x_155 : vec2<f32> = (vec2<f32>(x_151.x, x_151.y) * vec2<f32>(x_153.x, x_153.y));
  let x_156 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_155.x, x_155.y, x_156.z);
  let x_160 : f32 = u_xlat3.y;
  let x_163 : f32 = x_43.x_ScaleBiasRt.x;
  let x_166 : f32 = x_43.x_ScaleBiasRt.y;
  u_xlat59 = ((x_160 * x_163) + x_166);
  let x_168 : f32 = u_xlat59;
  u_xlat3.z = (-(x_168) + 1.0f);
  let x_173 : f32 = u_xlat1;
  u_xlat59 = ((-(x_173) * 0.959999979f) + 0.959999979f);
  let x_179 : f32 = u_xlat59;
  u_xlat22 = (-(x_179) + 1.0f);
  let x_183 : vec4<f32> = u_xlat0;
  let x_185 : f32 = u_xlat59;
  u_xlat4 = (vec3<f32>(x_183.x, x_183.y, x_183.z) * vec3<f32>(x_185, x_185, x_185));
  let x_188 : vec4<f32> = u_xlat0;
  let x_192 : vec3<f32> = (vec3<f32>(x_188.x, x_188.y, x_188.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_193 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_192.x, x_192.y, x_192.z, x_193.w);
  let x_195 : f32 = u_xlat1;
  let x_197 : vec4<f32> = u_xlat0;
  let x_202 : vec3<f32> = ((vec3<f32>(x_195, x_195, x_195) * vec3<f32>(x_197.x, x_197.y, x_197.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_203 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_202.x, x_202.y, x_202.z, x_203.w);
  let x_206 : f32 = u_xlat0.w;
  u_xlat1 = (-(x_206) + 1.0f);
  let x_209 : f32 = u_xlat1;
  let x_210 : f32 = u_xlat1;
  u_xlat59 = (x_209 * x_210);
  let x_212 : f32 = u_xlat59;
  u_xlat59 = max(x_212, 0.0078125f);
  let x_216 : f32 = u_xlat59;
  let x_217 : f32 = u_xlat59;
  u_xlat60 = (x_216 * x_217);
  let x_221 : f32 = u_xlat0.w;
  let x_222 : f32 = u_xlat22;
  u_xlat57 = (x_221 + x_222);
  let x_224 : f32 = u_xlat57;
  u_xlat57 = clamp(x_224, 0.0f, 1.0f);
  let x_227 : f32 = u_xlat59;
  u_xlat22 = ((x_227 * 4.0f) + 2.0f);
  let x_237 : vec3<f32> = u_xlat3;
  let x_240 : f32 = x_43.x_GlobalMipBias.x;
  let x_241 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_237.x, x_237.z), x_240);
  u_xlat3.x = x_241.x;
  let x_246 : f32 = u_xlat3.x;
  u_xlat41 = (x_246 + -1.0f);
  let x_251 : f32 = x_43.x_AmbientOcclusionParam.w;
  let x_252 : f32 = u_xlat41;
  u_xlat41 = ((x_251 * x_252) + 1.0f);
  let x_256 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_256, 1.0f);
  let x_270 : f32 = x_267.x_MainLightShadowParams.y;
  u_xlatb61 = (0.0f < x_270);
  let x_272 : bool = u_xlatb61;
  if (x_272) {
    let x_276 : f32 = x_267.x_MainLightShadowParams.y;
    u_xlatb61 = (x_276 == 1.0f);
    let x_278 : bool = u_xlatb61;
    if (x_278) {
      let x_283 : vec4<f32> = vs_TEXCOORD8;
      let x_287 : vec4<f32> = x_267.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_283.x, x_283.y, x_283.x, x_283.y) + x_287);
      let x_290 : vec4<f32> = u_xlat5;
      let x_291 : vec2<f32> = vec2<f32>(x_290.x, x_290.y);
      let x_293 : f32 = vs_TEXCOORD8.z;
      txVec0 = vec3<f32>(x_291.x, x_291.y, x_293);
      let x_306 : vec3<f32> = txVec0;
      let x_308 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_306.xy, x_306.z);
      u_xlat6.x = x_308;
      let x_311 : vec4<f32> = u_xlat5;
      let x_312 : vec2<f32> = vec2<f32>(x_311.z, x_311.w);
      let x_314 : f32 = vs_TEXCOORD8.z;
      txVec1 = vec3<f32>(x_312.x, x_312.y, x_314);
      let x_321 : vec3<f32> = txVec1;
      let x_323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_321.xy, x_321.z);
      u_xlat6.y = x_323;
      let x_325 : vec4<f32> = vs_TEXCOORD8;
      let x_328 : vec4<f32> = x_267.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_328);
      let x_331 : vec4<f32> = u_xlat5;
      let x_332 : vec2<f32> = vec2<f32>(x_331.x, x_331.y);
      let x_334 : f32 = vs_TEXCOORD8.z;
      txVec2 = vec3<f32>(x_332.x, x_332.y, x_334);
      let x_341 : vec3<f32> = txVec2;
      let x_343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_341.xy, x_341.z);
      u_xlat6.z = x_343;
      let x_346 : vec4<f32> = u_xlat5;
      let x_347 : vec2<f32> = vec2<f32>(x_346.z, x_346.w);
      let x_349 : f32 = vs_TEXCOORD8.z;
      txVec3 = vec3<f32>(x_347.x, x_347.y, x_349);
      let x_356 : vec3<f32> = txVec3;
      let x_358 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_356.xy, x_356.z);
      u_xlat6.w = x_358;
      let x_361 : vec4<f32> = u_xlat6;
      u_xlat61 = dot(x_361, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_368 : f32 = x_267.x_MainLightShadowParams.y;
      u_xlatb5 = (x_368 == 2.0f);
      let x_370 : bool = u_xlatb5;
      if (x_370) {
        let x_373 : vec4<f32> = vs_TEXCOORD8;
        let x_377 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_381 : vec2<f32> = ((vec2<f32>(x_373.x, x_373.y) * vec2<f32>(x_377.z, x_377.w)) + vec2<f32>(0.5f, 0.5f));
        let x_382 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_381.x, x_381.y, x_382.z, x_382.w);
        let x_384 : vec4<f32> = u_xlat5;
        let x_386 : vec2<f32> = floor(vec2<f32>(x_384.x, x_384.y));
        let x_387 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_391 : vec4<f32> = vs_TEXCOORD8;
        let x_394 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_397 : vec4<f32> = u_xlat5;
        u_xlat43 = ((vec2<f32>(x_391.x, x_391.y) * vec2<f32>(x_394.z, x_394.w)) + -(vec2<f32>(x_397.x, x_397.y)));
        let x_401 : vec2<f32> = u_xlat43;
        u_xlat6 = (vec4<f32>(x_401.x, x_401.x, x_401.y, x_401.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_406 : vec4<f32> = u_xlat6;
        let x_408 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_406.x, x_406.x, x_406.z, x_406.z) * vec4<f32>(x_408.x, x_408.x, x_408.z, x_408.z));
        let x_411 : vec4<f32> = u_xlat7;
        let x_415 : vec2<f32> = (vec2<f32>(x_411.y, x_411.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_416 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_415.x, x_416.y, x_415.y, x_416.w);
        let x_418 : vec4<f32> = u_xlat7;
        let x_421 : vec2<f32> = u_xlat43;
        let x_423 : vec2<f32> = ((vec2<f32>(x_418.x, x_418.z) * vec2<f32>(0.5f, 0.5f)) + -(x_421));
        let x_424 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_423.x, x_423.y, x_424.z, x_424.w);
        let x_427 : vec2<f32> = u_xlat43;
        u_xlat45 = (-(x_427) + vec2<f32>(1.0f, 1.0f));
        let x_431 : vec2<f32> = u_xlat43;
        let x_433 : vec2<f32> = min(x_431, vec2<f32>(0.0f, 0.0f));
        let x_434 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_433.x, x_433.y, x_434.z, x_434.w);
        let x_436 : vec4<f32> = u_xlat8;
        let x_439 : vec4<f32> = u_xlat8;
        let x_442 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = ((-(vec2<f32>(x_436.x, x_436.y)) * vec2<f32>(x_439.x, x_439.y)) + x_442);
        let x_444 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec2<f32> = u_xlat43;
        u_xlat43 = max(x_446, vec2<f32>(0.0f, 0.0f));
        let x_448 : vec2<f32> = u_xlat43;
        let x_450 : vec2<f32> = u_xlat43;
        let x_452 : vec4<f32> = u_xlat6;
        u_xlat43 = ((-(x_448) * x_450) + vec2<f32>(x_452.y, x_452.w));
        let x_455 : vec4<f32> = u_xlat8;
        let x_457 : vec2<f32> = (vec2<f32>(x_455.x, x_455.y) + vec2<f32>(1.0f, 1.0f));
        let x_458 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_457.x, x_457.y, x_458.z, x_458.w);
        let x_460 : vec2<f32> = u_xlat43;
        u_xlat43 = (x_460 + vec2<f32>(1.0f, 1.0f));
        let x_463 : vec4<f32> = u_xlat7;
        let x_467 : vec2<f32> = (vec2<f32>(x_463.x, x_463.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        let x_471 : vec2<f32> = (x_470 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_472 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_471.x, x_471.y, x_472.z, x_472.w);
        let x_474 : vec4<f32> = u_xlat8;
        let x_476 : vec2<f32> = (vec2<f32>(x_474.x, x_474.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_477 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
        let x_480 : vec2<f32> = u_xlat43;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat6;
        u_xlat43 = (vec2<f32>(x_484.y, x_484.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_488 : f32 = u_xlat8.x;
        u_xlat9.z = x_488;
        let x_491 : f32 = u_xlat43.x;
        u_xlat9.w = x_491;
        let x_494 : f32 = u_xlat10.x;
        u_xlat7.z = x_494;
        let x_497 : f32 = u_xlat6.x;
        u_xlat7.w = x_497;
        let x_500 : vec4<f32> = u_xlat7;
        let x_502 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_500.z, x_500.w, x_500.x, x_500.z) + vec4<f32>(x_502.z, x_502.w, x_502.x, x_502.z));
        let x_506 : f32 = u_xlat9.y;
        u_xlat8.z = x_506;
        let x_509 : f32 = u_xlat43.y;
        u_xlat8.w = x_509;
        let x_512 : f32 = u_xlat7.y;
        u_xlat10.z = x_512;
        let x_515 : f32 = u_xlat6.z;
        u_xlat10.w = x_515;
        let x_517 : vec4<f32> = u_xlat8;
        let x_519 : vec4<f32> = u_xlat10;
        let x_521 : vec3<f32> = (vec3<f32>(x_517.z, x_517.y, x_517.w) + vec3<f32>(x_519.z, x_519.y, x_519.w));
        let x_522 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_521.x, x_521.y, x_521.z, x_522.w);
        let x_524 : vec4<f32> = u_xlat7;
        let x_526 : vec4<f32> = u_xlat11;
        let x_528 : vec3<f32> = (vec3<f32>(x_524.x, x_524.z, x_524.w) / vec3<f32>(x_526.z, x_526.w, x_526.y));
        let x_529 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_528.x, x_528.y, x_528.z, x_529.w);
        let x_531 : vec4<f32> = u_xlat7;
        let x_536 : vec3<f32> = (vec3<f32>(x_531.x, x_531.y, x_531.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_536.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat10;
        let x_541 : vec4<f32> = u_xlat6;
        let x_543 : vec3<f32> = (vec3<f32>(x_539.z, x_539.y, x_539.w) / vec3<f32>(x_541.x, x_541.y, x_541.z));
        let x_544 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_543.x, x_543.y, x_543.z, x_544.w);
        let x_546 : vec4<f32> = u_xlat8;
        let x_548 : vec3<f32> = (vec3<f32>(x_546.x, x_546.y, x_546.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_549 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_548.x, x_548.y, x_548.z, x_549.w);
        let x_551 : vec4<f32> = u_xlat7;
        let x_554 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_556 : vec3<f32> = (vec3<f32>(x_551.y, x_551.x, x_551.z) * vec3<f32>(x_554.x, x_554.x, x_554.x));
        let x_557 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_556.x, x_556.y, x_556.z, x_557.w);
        let x_559 : vec4<f32> = u_xlat8;
        let x_562 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_564 : vec3<f32> = (vec3<f32>(x_559.x, x_559.y, x_559.z) * vec3<f32>(x_562.y, x_562.y, x_562.y));
        let x_565 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_568 : f32 = u_xlat8.x;
        u_xlat7.w = x_568;
        let x_570 : vec4<f32> = u_xlat5;
        let x_573 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_576 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_570.x, x_570.y, x_570.x, x_570.y) * vec4<f32>(x_573.x, x_573.y, x_573.x, x_573.y)) + vec4<f32>(x_576.y, x_576.w, x_576.x, x_576.w));
        let x_579 : vec4<f32> = u_xlat5;
        let x_582 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_585 : vec4<f32> = u_xlat7;
        u_xlat43 = ((vec2<f32>(x_579.x, x_579.y) * vec2<f32>(x_582.x, x_582.y)) + vec2<f32>(x_585.z, x_585.w));
        let x_589 : f32 = u_xlat7.y;
        u_xlat8.w = x_589;
        let x_591 : vec4<f32> = u_xlat8;
        let x_592 : vec2<f32> = vec2<f32>(x_591.y, x_591.z);
        let x_593 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_592.x, x_593.z, x_592.y);
        let x_595 : vec4<f32> = u_xlat5;
        let x_598 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_601 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_595.x, x_595.y, x_595.x, x_595.y) * vec4<f32>(x_598.x, x_598.y, x_598.x, x_598.y)) + vec4<f32>(x_601.x, x_601.y, x_601.z, x_601.y));
        let x_604 : vec4<f32> = u_xlat5;
        let x_607 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_604.x, x_604.y, x_604.x, x_604.y) * vec4<f32>(x_607.x, x_607.y, x_607.x, x_607.y)) + vec4<f32>(x_610.w, x_610.y, x_610.w, x_610.z));
        let x_613 : vec4<f32> = u_xlat5;
        let x_616 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_619 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_613.x, x_613.y, x_613.x, x_613.y) * vec4<f32>(x_616.x, x_616.y, x_616.x, x_616.y)) + vec4<f32>(x_619.x, x_619.w, x_619.z, x_619.w));
        let x_623 : vec4<f32> = u_xlat6;
        let x_625 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_623.x, x_623.x, x_623.x, x_623.y) * vec4<f32>(x_625.z, x_625.w, x_625.y, x_625.z));
        let x_629 : vec4<f32> = u_xlat6;
        let x_631 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_629.y, x_629.y, x_629.z, x_629.z) * x_631);
        let x_634 : f32 = u_xlat6.z;
        let x_636 : f32 = u_xlat11.y;
        u_xlat5.x = (x_634 * x_636);
        let x_640 : vec4<f32> = u_xlat9;
        let x_641 : vec2<f32> = vec2<f32>(x_640.x, x_640.y);
        let x_643 : f32 = vs_TEXCOORD8.z;
        txVec4 = vec3<f32>(x_641.x, x_641.y, x_643);
        let x_651 : vec3<f32> = txVec4;
        let x_653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_651.xy, x_651.z);
        u_xlat24 = x_653;
        let x_655 : vec4<f32> = u_xlat9;
        let x_656 : vec2<f32> = vec2<f32>(x_655.z, x_655.w);
        let x_658 : f32 = vs_TEXCOORD8.z;
        txVec5 = vec3<f32>(x_656.x, x_656.y, x_658);
        let x_665 : vec3<f32> = txVec5;
        let x_667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_665.xy, x_665.z);
        u_xlat6.x = x_667;
        let x_670 : f32 = u_xlat6.x;
        let x_672 : f32 = u_xlat12.y;
        u_xlat6.x = (x_670 * x_672);
        let x_676 : f32 = u_xlat12.x;
        let x_677 : f32 = u_xlat24;
        let x_680 : f32 = u_xlat6.x;
        u_xlat24 = ((x_676 * x_677) + x_680);
        let x_683 : vec2<f32> = u_xlat43;
        let x_685 : f32 = vs_TEXCOORD8.z;
        txVec6 = vec3<f32>(x_683.x, x_683.y, x_685);
        let x_692 : vec3<f32> = txVec6;
        let x_694 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_692.xy, x_692.z);
        u_xlat43.x = x_694;
        let x_697 : f32 = u_xlat12.z;
        let x_699 : f32 = u_xlat43.x;
        let x_701 : f32 = u_xlat24;
        u_xlat24 = ((x_697 * x_699) + x_701);
        let x_704 : vec4<f32> = u_xlat8;
        let x_705 : vec2<f32> = vec2<f32>(x_704.x, x_704.y);
        let x_707 : f32 = vs_TEXCOORD8.z;
        txVec7 = vec3<f32>(x_705.x, x_705.y, x_707);
        let x_714 : vec3<f32> = txVec7;
        let x_716 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_714.xy, x_714.z);
        u_xlat43.x = x_716;
        let x_719 : f32 = u_xlat12.w;
        let x_721 : f32 = u_xlat43.x;
        let x_723 : f32 = u_xlat24;
        u_xlat24 = ((x_719 * x_721) + x_723);
        let x_726 : vec4<f32> = u_xlat10;
        let x_727 : vec2<f32> = vec2<f32>(x_726.x, x_726.y);
        let x_729 : f32 = vs_TEXCOORD8.z;
        txVec8 = vec3<f32>(x_727.x, x_727.y, x_729);
        let x_736 : vec3<f32> = txVec8;
        let x_738 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_736.xy, x_736.z);
        u_xlat43.x = x_738;
        let x_741 : f32 = u_xlat13.x;
        let x_743 : f32 = u_xlat43.x;
        let x_745 : f32 = u_xlat24;
        u_xlat24 = ((x_741 * x_743) + x_745);
        let x_748 : vec4<f32> = u_xlat10;
        let x_749 : vec2<f32> = vec2<f32>(x_748.z, x_748.w);
        let x_751 : f32 = vs_TEXCOORD8.z;
        txVec9 = vec3<f32>(x_749.x, x_749.y, x_751);
        let x_758 : vec3<f32> = txVec9;
        let x_760 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_758.xy, x_758.z);
        u_xlat43.x = x_760;
        let x_763 : f32 = u_xlat13.y;
        let x_765 : f32 = u_xlat43.x;
        let x_767 : f32 = u_xlat24;
        u_xlat24 = ((x_763 * x_765) + x_767);
        let x_770 : vec4<f32> = u_xlat8;
        let x_771 : vec2<f32> = vec2<f32>(x_770.z, x_770.w);
        let x_773 : f32 = vs_TEXCOORD8.z;
        txVec10 = vec3<f32>(x_771.x, x_771.y, x_773);
        let x_780 : vec3<f32> = txVec10;
        let x_782 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_780.xy, x_780.z);
        u_xlat43.x = x_782;
        let x_785 : f32 = u_xlat13.z;
        let x_787 : f32 = u_xlat43.x;
        let x_789 : f32 = u_xlat24;
        u_xlat24 = ((x_785 * x_787) + x_789);
        let x_792 : vec4<f32> = u_xlat7;
        let x_793 : vec2<f32> = vec2<f32>(x_792.x, x_792.y);
        let x_795 : f32 = vs_TEXCOORD8.z;
        txVec11 = vec3<f32>(x_793.x, x_793.y, x_795);
        let x_802 : vec3<f32> = txVec11;
        let x_804 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_802.xy, x_802.z);
        u_xlat43.x = x_804;
        let x_807 : f32 = u_xlat13.w;
        let x_809 : f32 = u_xlat43.x;
        let x_811 : f32 = u_xlat24;
        u_xlat24 = ((x_807 * x_809) + x_811);
        let x_814 : vec4<f32> = u_xlat7;
        let x_815 : vec2<f32> = vec2<f32>(x_814.z, x_814.w);
        let x_817 : f32 = vs_TEXCOORD8.z;
        txVec12 = vec3<f32>(x_815.x, x_815.y, x_817);
        let x_824 : vec3<f32> = txVec12;
        let x_826 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_824.xy, x_824.z);
        u_xlat43.x = x_826;
        let x_829 : f32 = u_xlat5.x;
        let x_831 : f32 = u_xlat43.x;
        let x_833 : f32 = u_xlat24;
        u_xlat61 = ((x_829 * x_831) + x_833);
      } else {
        let x_836 : vec4<f32> = vs_TEXCOORD8;
        let x_839 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_842 : vec2<f32> = ((vec2<f32>(x_836.x, x_836.y) * vec2<f32>(x_839.z, x_839.w)) + vec2<f32>(0.5f, 0.5f));
        let x_843 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_842.x, x_842.y, x_843.z, x_843.w);
        let x_845 : vec4<f32> = u_xlat5;
        let x_847 : vec2<f32> = floor(vec2<f32>(x_845.x, x_845.y));
        let x_848 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_847.x, x_847.y, x_848.z, x_848.w);
        let x_850 : vec4<f32> = vs_TEXCOORD8;
        let x_853 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_856 : vec4<f32> = u_xlat5;
        u_xlat43 = ((vec2<f32>(x_850.x, x_850.y) * vec2<f32>(x_853.z, x_853.w)) + -(vec2<f32>(x_856.x, x_856.y)));
        let x_860 : vec2<f32> = u_xlat43;
        u_xlat6 = (vec4<f32>(x_860.x, x_860.x, x_860.y, x_860.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_863 : vec4<f32> = u_xlat6;
        let x_865 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_863.x, x_863.x, x_863.z, x_863.z) * vec4<f32>(x_865.x, x_865.x, x_865.z, x_865.z));
        let x_868 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = (vec2<f32>(x_868.y, x_868.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_873 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_873.x, x_872.x, x_873.z, x_872.y);
        let x_875 : vec4<f32> = u_xlat7;
        let x_878 : vec2<f32> = u_xlat43;
        let x_880 : vec2<f32> = ((vec2<f32>(x_875.x, x_875.z) * vec2<f32>(0.5f, 0.5f)) + -(x_878));
        let x_881 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_880.x, x_881.y, x_880.y, x_881.w);
        let x_883 : vec2<f32> = u_xlat43;
        let x_885 : vec2<f32> = (-(x_883) + vec2<f32>(1.0f, 1.0f));
        let x_886 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_885.x, x_885.y, x_886.z, x_886.w);
        let x_888 : vec2<f32> = u_xlat43;
        u_xlat45 = min(x_888, vec2<f32>(0.0f, 0.0f));
        let x_890 : vec2<f32> = u_xlat45;
        let x_892 : vec2<f32> = u_xlat45;
        let x_894 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = ((-(x_890) * x_892) + vec2<f32>(x_894.x, x_894.y));
        let x_897 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_896.x, x_896.y, x_897.z, x_897.w);
        let x_899 : vec2<f32> = u_xlat43;
        u_xlat45 = max(x_899, vec2<f32>(0.0f, 0.0f));
        let x_902 : vec2<f32> = u_xlat45;
        let x_904 : vec2<f32> = u_xlat45;
        let x_906 : vec4<f32> = u_xlat6;
        let x_908 : vec2<f32> = ((-(x_902) * x_904) + vec2<f32>(x_906.y, x_906.w));
        let x_909 : vec3<f32> = u_xlat25;
        u_xlat25 = vec3<f32>(x_908.x, x_909.y, x_908.y);
        let x_911 : vec4<f32> = u_xlat7;
        let x_914 : vec2<f32> = (vec2<f32>(x_911.x, x_911.y) + vec2<f32>(2.0f, 2.0f));
        let x_915 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_914.x, x_914.y, x_915.z, x_915.w);
        let x_917 : vec3<f32> = u_xlat25;
        let x_919 : vec2<f32> = (vec2<f32>(x_917.x, x_917.z) + vec2<f32>(2.0f, 2.0f));
        let x_920 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_920.x, x_919.x, x_920.z, x_919.y);
        let x_923 : f32 = u_xlat6.y;
        u_xlat9.z = (x_923 * 0.081632003f);
        let x_927 : vec4<f32> = u_xlat6;
        let x_930 : vec3<f32> = (vec3<f32>(x_927.z, x_927.x, x_927.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_930.y, x_930.z, x_931.w);
        let x_933 : vec4<f32> = u_xlat7;
        let x_936 : vec2<f32> = (vec2<f32>(x_933.x, x_933.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_937 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_936.x, x_936.y, x_937.z, x_937.w);
        let x_940 : f32 = u_xlat10.y;
        u_xlat9.x = x_940;
        let x_942 : vec2<f32> = u_xlat43;
        let x_949 : vec2<f32> = ((vec2<f32>(x_942.x, x_942.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_950 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_950.x, x_949.x, x_950.z, x_949.y);
        let x_952 : vec2<f32> = u_xlat43;
        let x_956 : vec2<f32> = ((vec2<f32>(x_952.x, x_952.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_957 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_956.x, x_957.y, x_956.y, x_957.w);
        let x_960 : f32 = u_xlat6.x;
        u_xlat7.y = x_960;
        let x_963 : f32 = u_xlat8.y;
        u_xlat7.w = x_963;
        let x_965 : vec4<f32> = u_xlat7;
        let x_966 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_965 + x_966);
        let x_968 : vec2<f32> = u_xlat43;
        let x_971 : vec2<f32> = ((vec2<f32>(x_968.y, x_968.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_972 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_972.x, x_971.x, x_972.z, x_971.y);
        let x_974 : vec2<f32> = u_xlat43;
        let x_977 : vec2<f32> = ((vec2<f32>(x_974.y, x_974.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_978 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_977.x, x_978.y, x_977.y, x_978.w);
        let x_981 : f32 = u_xlat6.y;
        u_xlat8.y = x_981;
        let x_983 : vec4<f32> = u_xlat8;
        let x_984 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_983 + x_984);
        let x_986 : vec4<f32> = u_xlat7;
        let x_987 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_986 / x_987);
        let x_989 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_989 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_995 : vec4<f32> = u_xlat8;
        let x_996 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_995 / x_996);
        let x_998 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_998 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1000 : vec4<f32> = u_xlat7;
        let x_1003 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1000.w, x_1000.x, x_1000.y, x_1000.z) * vec4<f32>(x_1003.x, x_1003.x, x_1003.x, x_1003.x));
        let x_1006 : vec4<f32> = u_xlat8;
        let x_1009 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1006.x, x_1006.w, x_1006.y, x_1006.z) * vec4<f32>(x_1009.y, x_1009.y, x_1009.y, x_1009.y));
        let x_1012 : vec4<f32> = u_xlat7;
        let x_1013 : vec3<f32> = vec3<f32>(x_1012.y, x_1012.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1013.x, x_1014.y, x_1013.y, x_1013.z);
        let x_1017 : f32 = u_xlat8.x;
        u_xlat10.y = x_1017;
        let x_1019 : vec4<f32> = u_xlat5;
        let x_1022 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1025 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1019.x, x_1019.y, x_1019.x, x_1019.y) * vec4<f32>(x_1022.x, x_1022.y, x_1022.x, x_1022.y)) + vec4<f32>(x_1025.x, x_1025.y, x_1025.z, x_1025.y));
        let x_1028 : vec4<f32> = u_xlat5;
        let x_1031 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1034 : vec4<f32> = u_xlat10;
        u_xlat43 = ((vec2<f32>(x_1028.x, x_1028.y) * vec2<f32>(x_1031.x, x_1031.y)) + vec2<f32>(x_1034.w, x_1034.y));
        let x_1038 : f32 = u_xlat10.y;
        u_xlat7.y = x_1038;
        let x_1041 : f32 = u_xlat8.z;
        u_xlat10.y = x_1041;
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1043.x, x_1043.y, x_1043.x, x_1043.y) * vec4<f32>(x_1046.x, x_1046.y, x_1046.x, x_1046.y)) + vec4<f32>(x_1049.x, x_1049.y, x_1049.z, x_1049.y));
        let x_1052 : vec4<f32> = u_xlat5;
        let x_1055 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1058 : vec4<f32> = u_xlat10;
        let x_1060 : vec2<f32> = ((vec2<f32>(x_1052.x, x_1052.y) * vec2<f32>(x_1055.x, x_1055.y)) + vec2<f32>(x_1058.w, x_1058.y));
        let x_1061 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1060.x, x_1060.y, x_1061.z, x_1061.w);
        let x_1064 : f32 = u_xlat10.y;
        u_xlat7.z = x_1064;
        let x_1067 : vec4<f32> = u_xlat5;
        let x_1070 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1073 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1067.x, x_1067.y, x_1067.x, x_1067.y) * vec4<f32>(x_1070.x, x_1070.y, x_1070.x, x_1070.y)) + vec4<f32>(x_1073.x, x_1073.y, x_1073.x, x_1073.z));
        let x_1077 : f32 = u_xlat8.w;
        u_xlat10.y = x_1077;
        let x_1080 : vec4<f32> = u_xlat5;
        let x_1083 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1086 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1080.x, x_1080.y, x_1080.x, x_1080.y) * vec4<f32>(x_1083.x, x_1083.y, x_1083.x, x_1083.y)) + vec4<f32>(x_1086.x, x_1086.y, x_1086.z, x_1086.y));
        let x_1090 : vec4<f32> = u_xlat5;
        let x_1093 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1096 : vec4<f32> = u_xlat10;
        u_xlat26 = ((vec2<f32>(x_1090.x, x_1090.y) * vec2<f32>(x_1093.x, x_1093.y)) + vec2<f32>(x_1096.w, x_1096.y));
        let x_1100 : f32 = u_xlat10.y;
        u_xlat7.w = x_1100;
        let x_1103 : vec4<f32> = u_xlat5;
        let x_1106 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1109 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1103.x, x_1103.y) * vec2<f32>(x_1106.x, x_1106.y)) + vec2<f32>(x_1109.x, x_1109.w));
        let x_1112 : vec4<f32> = u_xlat10;
        let x_1113 : vec3<f32> = vec3<f32>(x_1112.x, x_1112.z, x_1112.w);
        let x_1114 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1113.x, x_1114.y, x_1113.y, x_1113.z);
        let x_1116 : vec4<f32> = u_xlat5;
        let x_1119 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1116.x, x_1116.y, x_1116.x, x_1116.y) * vec4<f32>(x_1119.x, x_1119.y, x_1119.x, x_1119.y)) + vec4<f32>(x_1122.x, x_1122.y, x_1122.z, x_1122.y));
        let x_1126 : vec4<f32> = u_xlat5;
        let x_1129 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1132 : vec4<f32> = u_xlat8;
        u_xlat46 = ((vec2<f32>(x_1126.x, x_1126.y) * vec2<f32>(x_1129.x, x_1129.y)) + vec2<f32>(x_1132.w, x_1132.y));
        let x_1136 : f32 = u_xlat7.x;
        u_xlat8.x = x_1136;
        let x_1138 : vec4<f32> = u_xlat5;
        let x_1141 : vec4<f32> = x_267.x_MainLightShadowmapSize;
        let x_1144 : vec4<f32> = u_xlat8;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1141.x, x_1141.y)) + vec2<f32>(x_1144.x, x_1144.y));
        let x_1147 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1146.x, x_1146.y, x_1147.z, x_1147.w);
        let x_1150 : vec4<f32> = u_xlat6;
        let x_1152 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1150.x, x_1150.x, x_1150.x, x_1150.x) * x_1152);
        let x_1155 : vec4<f32> = u_xlat6;
        let x_1157 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1155.y, x_1155.y, x_1155.y, x_1155.y) * x_1157);
        let x_1160 : vec4<f32> = u_xlat6;
        let x_1162 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1160.z, x_1160.z, x_1160.z, x_1160.z) * x_1162);
        let x_1164 : vec4<f32> = u_xlat6;
        let x_1166 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1164.w, x_1164.w, x_1164.w, x_1164.w) * x_1166);
        let x_1169 : vec4<f32> = u_xlat11;
        let x_1170 : vec2<f32> = vec2<f32>(x_1169.x, x_1169.y);
        let x_1172 : f32 = vs_TEXCOORD8.z;
        txVec13 = vec3<f32>(x_1170.x, x_1170.y, x_1172);
        let x_1179 : vec3<f32> = txVec13;
        let x_1181 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1179.xy, x_1179.z);
        u_xlat7.x = x_1181;
        let x_1184 : vec4<f32> = u_xlat11;
        let x_1185 : vec2<f32> = vec2<f32>(x_1184.z, x_1184.w);
        let x_1187 : f32 = vs_TEXCOORD8.z;
        txVec14 = vec3<f32>(x_1185.x, x_1185.y, x_1187);
        let x_1195 : vec3<f32> = txVec14;
        let x_1197 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1195.xy, x_1195.z);
        u_xlat64 = x_1197;
        let x_1198 : f32 = u_xlat64;
        let x_1200 : f32 = u_xlat16.y;
        u_xlat64 = (x_1198 * x_1200);
        let x_1203 : f32 = u_xlat16.x;
        let x_1205 : f32 = u_xlat7.x;
        let x_1207 : f32 = u_xlat64;
        u_xlat7.x = ((x_1203 * x_1205) + x_1207);
        let x_1211 : vec2<f32> = u_xlat43;
        let x_1213 : f32 = vs_TEXCOORD8.z;
        txVec15 = vec3<f32>(x_1211.x, x_1211.y, x_1213);
        let x_1220 : vec3<f32> = txVec15;
        let x_1222 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1220.xy, x_1220.z);
        u_xlat43.x = x_1222;
        let x_1225 : f32 = u_xlat16.z;
        let x_1227 : f32 = u_xlat43.x;
        let x_1230 : f32 = u_xlat7.x;
        u_xlat43.x = ((x_1225 * x_1227) + x_1230);
        let x_1234 : vec4<f32> = u_xlat14;
        let x_1235 : vec2<f32> = vec2<f32>(x_1234.x, x_1234.y);
        let x_1237 : f32 = vs_TEXCOORD8.z;
        txVec16 = vec3<f32>(x_1235.x, x_1235.y, x_1237);
        let x_1245 : vec3<f32> = txVec16;
        let x_1247 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1245.xy, x_1245.z);
        u_xlat62 = x_1247;
        let x_1249 : f32 = u_xlat16.w;
        let x_1250 : f32 = u_xlat62;
        let x_1253 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1249 * x_1250) + x_1253);
        let x_1257 : vec4<f32> = u_xlat12;
        let x_1258 : vec2<f32> = vec2<f32>(x_1257.x, x_1257.y);
        let x_1260 : f32 = vs_TEXCOORD8.z;
        txVec17 = vec3<f32>(x_1258.x, x_1258.y, x_1260);
        let x_1267 : vec3<f32> = txVec17;
        let x_1269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1267.xy, x_1267.z);
        u_xlat62 = x_1269;
        let x_1271 : f32 = u_xlat17.x;
        let x_1272 : f32 = u_xlat62;
        let x_1275 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1271 * x_1272) + x_1275);
        let x_1279 : vec4<f32> = u_xlat12;
        let x_1280 : vec2<f32> = vec2<f32>(x_1279.z, x_1279.w);
        let x_1282 : f32 = vs_TEXCOORD8.z;
        txVec18 = vec3<f32>(x_1280.x, x_1280.y, x_1282);
        let x_1289 : vec3<f32> = txVec18;
        let x_1291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1289.xy, x_1289.z);
        u_xlat62 = x_1291;
        let x_1293 : f32 = u_xlat17.y;
        let x_1294 : f32 = u_xlat62;
        let x_1297 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1293 * x_1294) + x_1297);
        let x_1301 : vec4<f32> = u_xlat13;
        let x_1302 : vec2<f32> = vec2<f32>(x_1301.x, x_1301.y);
        let x_1304 : f32 = vs_TEXCOORD8.z;
        txVec19 = vec3<f32>(x_1302.x, x_1302.y, x_1304);
        let x_1311 : vec3<f32> = txVec19;
        let x_1313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1311.xy, x_1311.z);
        u_xlat62 = x_1313;
        let x_1315 : f32 = u_xlat17.z;
        let x_1316 : f32 = u_xlat62;
        let x_1319 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1315 * x_1316) + x_1319);
        let x_1323 : vec4<f32> = u_xlat14;
        let x_1324 : vec2<f32> = vec2<f32>(x_1323.z, x_1323.w);
        let x_1326 : f32 = vs_TEXCOORD8.z;
        txVec20 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec20;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat62 = x_1335;
        let x_1337 : f32 = u_xlat17.w;
        let x_1338 : f32 = u_xlat62;
        let x_1341 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1337 * x_1338) + x_1341);
        let x_1345 : vec4<f32> = u_xlat15;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = vs_TEXCOORD8.z;
        txVec21 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec21;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat62 = x_1357;
        let x_1359 : f32 = u_xlat18.x;
        let x_1360 : f32 = u_xlat62;
        let x_1363 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1359 * x_1360) + x_1363);
        let x_1367 : vec4<f32> = u_xlat15;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = vs_TEXCOORD8.z;
        txVec22 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec22;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat62 = x_1379;
        let x_1381 : f32 = u_xlat18.y;
        let x_1382 : f32 = u_xlat62;
        let x_1385 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1381 * x_1382) + x_1385);
        let x_1389 : vec2<f32> = u_xlat26;
        let x_1391 : f32 = vs_TEXCOORD8.z;
        txVec23 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec23;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat62 = x_1400;
        let x_1402 : f32 = u_xlat18.z;
        let x_1403 : f32 = u_xlat62;
        let x_1406 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1402 * x_1403) + x_1406);
        let x_1410 : vec2<f32> = u_xlat51;
        let x_1412 : f32 = vs_TEXCOORD8.z;
        txVec24 = vec3<f32>(x_1410.x, x_1410.y, x_1412);
        let x_1419 : vec3<f32> = txVec24;
        let x_1421 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1419.xy, x_1419.z);
        u_xlat62 = x_1421;
        let x_1423 : f32 = u_xlat18.w;
        let x_1424 : f32 = u_xlat62;
        let x_1427 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1423 * x_1424) + x_1427);
        let x_1431 : vec4<f32> = u_xlat10;
        let x_1432 : vec2<f32> = vec2<f32>(x_1431.x, x_1431.y);
        let x_1434 : f32 = vs_TEXCOORD8.z;
        txVec25 = vec3<f32>(x_1432.x, x_1432.y, x_1434);
        let x_1441 : vec3<f32> = txVec25;
        let x_1443 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1441.xy, x_1441.z);
        u_xlat62 = x_1443;
        let x_1445 : f32 = u_xlat6.x;
        let x_1446 : f32 = u_xlat62;
        let x_1449 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1445 * x_1446) + x_1449);
        let x_1453 : vec4<f32> = u_xlat10;
        let x_1454 : vec2<f32> = vec2<f32>(x_1453.z, x_1453.w);
        let x_1456 : f32 = vs_TEXCOORD8.z;
        txVec26 = vec3<f32>(x_1454.x, x_1454.y, x_1456);
        let x_1463 : vec3<f32> = txVec26;
        let x_1465 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1463.xy, x_1463.z);
        u_xlat62 = x_1465;
        let x_1467 : f32 = u_xlat6.y;
        let x_1468 : f32 = u_xlat62;
        let x_1471 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1467 * x_1468) + x_1471);
        let x_1475 : vec2<f32> = u_xlat46;
        let x_1477 : f32 = vs_TEXCOORD8.z;
        txVec27 = vec3<f32>(x_1475.x, x_1475.y, x_1477);
        let x_1484 : vec3<f32> = txVec27;
        let x_1486 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1484.xy, x_1484.z);
        u_xlat62 = x_1486;
        let x_1488 : f32 = u_xlat6.z;
        let x_1489 : f32 = u_xlat62;
        let x_1492 : f32 = u_xlat43.x;
        u_xlat43.x = ((x_1488 * x_1489) + x_1492);
        let x_1496 : vec4<f32> = u_xlat5;
        let x_1497 : vec2<f32> = vec2<f32>(x_1496.x, x_1496.y);
        let x_1499 : f32 = vs_TEXCOORD8.z;
        txVec28 = vec3<f32>(x_1497.x, x_1497.y, x_1499);
        let x_1506 : vec3<f32> = txVec28;
        let x_1508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1506.xy, x_1506.z);
        u_xlat5.x = x_1508;
        let x_1511 : f32 = u_xlat6.w;
        let x_1513 : f32 = u_xlat5.x;
        let x_1516 : f32 = u_xlat43.x;
        u_xlat61 = ((x_1511 * x_1513) + x_1516);
      }
    }
  } else {
    let x_1520 : vec4<f32> = vs_TEXCOORD8;
    let x_1521 : vec2<f32> = vec2<f32>(x_1520.x, x_1520.y);
    let x_1523 : f32 = vs_TEXCOORD8.z;
    txVec29 = vec3<f32>(x_1521.x, x_1521.y, x_1523);
    let x_1530 : vec3<f32> = txVec29;
    let x_1532 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1530.xy, x_1530.z);
    u_xlat61 = x_1532;
  }
  let x_1534 : f32 = x_267.x_MainLightShadowParams.x;
  u_xlat5.x = (-(x_1534) + 1.0f);
  let x_1538 : f32 = u_xlat61;
  let x_1540 : f32 = x_267.x_MainLightShadowParams.x;
  let x_1543 : f32 = u_xlat5.x;
  u_xlat61 = ((x_1538 * x_1540) + x_1543);
  let x_1546 : f32 = vs_TEXCOORD8.z;
  u_xlatb5 = (0.0f >= x_1546);
  let x_1550 : f32 = vs_TEXCOORD8.z;
  u_xlatb24 = (x_1550 >= 1.0f);
  let x_1552 : bool = u_xlatb24;
  let x_1553 : bool = u_xlatb5;
  u_xlatb5 = (x_1552 | x_1553);
  let x_1555 : bool = u_xlatb5;
  let x_1556 : f32 = u_xlat61;
  u_xlat61 = select(x_1556, 1.0f, x_1555);
  let x_1560 : vec3<f32> = vs_TEXCOORD7;
  let x_1563 : vec3<f32> = x_43.x_WorldSpaceCameraPos;
  let x_1565 : vec3<f32> = (x_1560 + -(x_1563));
  let x_1566 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1565.x, x_1565.y, x_1565.z, x_1566.w);
  let x_1568 : vec4<f32> = u_xlat5;
  let x_1570 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec3<f32>(x_1568.x, x_1568.y, x_1568.z), vec3<f32>(x_1570.x, x_1570.y, x_1570.z));
  let x_1575 : f32 = u_xlat5.x;
  let x_1577 : f32 = x_267.x_MainLightShadowParams.z;
  let x_1580 : f32 = x_267.x_MainLightShadowParams.w;
  u_xlat5.x = ((x_1575 * x_1577) + x_1580);
  let x_1584 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1584, 0.0f, 1.0f);
  let x_1587 : f32 = u_xlat61;
  u_xlat24 = (-(x_1587) + 1.0f);
  let x_1591 : f32 = u_xlat5.x;
  let x_1592 : f32 = u_xlat24;
  let x_1594 : f32 = u_xlat61;
  u_xlat61 = ((x_1591 * x_1592) + x_1594);
  let x_1596 : f32 = u_xlat41;
  let x_1600 : vec4<f32> = x_43.x_MainLightColor;
  let x_1602 : vec3<f32> = (vec3<f32>(x_1596, x_1596, x_1596) * vec3<f32>(x_1600.x, x_1600.y, x_1600.z));
  let x_1603 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1602.x, x_1602.y, x_1602.z, x_1603.w);
  let x_1606 : f32 = vs_TEXCOORD3.w;
  u_xlat6.x = x_1606;
  let x_1610 : f32 = vs_TEXCOORD4.w;
  u_xlat6.y = x_1610;
  let x_1614 : f32 = vs_TEXCOORD5.w;
  u_xlat6.z = x_1614;
  let x_1616 : vec4<f32> = u_xlat6;
  let x_1619 : vec3<f32> = u_xlat20;
  u_xlat62 = dot(-(vec3<f32>(x_1616.x, x_1616.y, x_1616.z)), x_1619);
  let x_1621 : f32 = u_xlat62;
  let x_1622 : f32 = u_xlat62;
  u_xlat62 = (x_1621 + x_1622);
  let x_1624 : vec3<f32> = u_xlat20;
  let x_1625 : f32 = u_xlat62;
  let x_1629 : vec4<f32> = u_xlat6;
  let x_1632 : vec3<f32> = ((x_1624 * -(vec3<f32>(x_1625, x_1625, x_1625))) + -(vec3<f32>(x_1629.x, x_1629.y, x_1629.z)));
  let x_1633 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1632.x, x_1632.y, x_1632.z, x_1633.w);
  let x_1635 : vec3<f32> = u_xlat20;
  let x_1636 : vec4<f32> = u_xlat6;
  u_xlat62 = dot(x_1635, vec3<f32>(x_1636.x, x_1636.y, x_1636.z));
  let x_1639 : f32 = u_xlat62;
  u_xlat62 = clamp(x_1639, 0.0f, 1.0f);
  let x_1641 : f32 = u_xlat62;
  u_xlat62 = (-(x_1641) + 1.0f);
  let x_1644 : f32 = u_xlat62;
  let x_1645 : f32 = u_xlat62;
  u_xlat62 = (x_1644 * x_1645);
  let x_1647 : f32 = u_xlat62;
  let x_1648 : f32 = u_xlat62;
  u_xlat62 = (x_1647 * x_1648);
  let x_1651 : f32 = u_xlat1;
  u_xlat63 = ((-(x_1651) * 0.699999988f) + 1.700000048f);
  let x_1657 : f32 = u_xlat1;
  let x_1658 : f32 = u_xlat63;
  u_xlat1 = (x_1657 * x_1658);
  let x_1660 : f32 = u_xlat1;
  u_xlat1 = (x_1660 * 6.0f);
  let x_1671 : vec4<f32> = u_xlat7;
  let x_1673 : f32 = u_xlat1;
  let x_1674 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1671.x, x_1671.y, x_1671.z), x_1673);
  u_xlat7 = x_1674;
  let x_1676 : f32 = u_xlat7.w;
  u_xlat1 = (x_1676 + -1.0f);
  let x_1683 : f32 = x_1681.unity_SpecCube0_HDR.w;
  let x_1684 : f32 = u_xlat1;
  u_xlat1 = ((x_1683 * x_1684) + 1.0f);
  let x_1687 : f32 = u_xlat1;
  u_xlat1 = max(x_1687, 0.0f);
  let x_1689 : f32 = u_xlat1;
  u_xlat1 = log2(x_1689);
  let x_1691 : f32 = u_xlat1;
  let x_1693 : f32 = x_1681.unity_SpecCube0_HDR.y;
  u_xlat1 = (x_1691 * x_1693);
  let x_1695 : f32 = u_xlat1;
  u_xlat1 = exp2(x_1695);
  let x_1697 : f32 = u_xlat1;
  let x_1699 : f32 = x_1681.unity_SpecCube0_HDR.x;
  u_xlat1 = (x_1697 * x_1699);
  let x_1701 : vec4<f32> = u_xlat7;
  let x_1703 : f32 = u_xlat1;
  let x_1705 : vec3<f32> = (vec3<f32>(x_1701.x, x_1701.y, x_1701.z) * vec3<f32>(x_1703, x_1703, x_1703));
  let x_1706 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1705.x, x_1705.y, x_1705.z, x_1706.w);
  let x_1708 : f32 = u_xlat59;
  let x_1710 : f32 = u_xlat59;
  let x_1714 : vec2<f32> = ((vec2<f32>(x_1708, x_1708) * vec2<f32>(x_1710, x_1710)) + vec2<f32>(-1.0f, 1.0f));
  let x_1715 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1714.x, x_1714.y, x_1715.z, x_1715.w);
  let x_1718 : f32 = u_xlat8.y;
  u_xlat1 = (1.0f / x_1718);
  let x_1721 : vec4<f32> = u_xlat0;
  let x_1724 : f32 = u_xlat57;
  u_xlat27 = (-(vec3<f32>(x_1721.x, x_1721.y, x_1721.z)) + vec3<f32>(x_1724, x_1724, x_1724));
  let x_1727 : f32 = u_xlat62;
  let x_1729 : vec3<f32> = u_xlat27;
  let x_1731 : vec4<f32> = u_xlat0;
  u_xlat27 = ((vec3<f32>(x_1727, x_1727, x_1727) * x_1729) + vec3<f32>(x_1731.x, x_1731.y, x_1731.z));
  let x_1734 : f32 = u_xlat1;
  let x_1736 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1734, x_1734, x_1734) * x_1736);
  let x_1738 : vec4<f32> = u_xlat7;
  let x_1740 : vec3<f32> = u_xlat27;
  let x_1741 : vec3<f32> = (vec3<f32>(x_1738.x, x_1738.y, x_1738.z) * x_1740);
  let x_1742 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1741.x, x_1741.y, x_1741.z, x_1742.w);
  let x_1744 : vec4<f32> = u_xlat2;
  let x_1746 : vec3<f32> = u_xlat4;
  let x_1748 : vec4<f32> = u_xlat7;
  let x_1750 : vec3<f32> = ((vec3<f32>(x_1744.x, x_1744.y, x_1744.z) * x_1746) + vec3<f32>(x_1748.x, x_1748.y, x_1748.z));
  let x_1751 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1750.x, x_1750.y, x_1750.z, x_1751.w);
  let x_1753 : f32 = u_xlat61;
  let x_1756 : f32 = x_1681.unity_LightData.z;
  u_xlat57 = (x_1753 * x_1756);
  let x_1758 : vec3<f32> = u_xlat20;
  let x_1761 : vec4<f32> = x_43.x_MainLightPosition;
  u_xlat1 = dot(x_1758, vec3<f32>(x_1761.x, x_1761.y, x_1761.z));
  let x_1764 : f32 = u_xlat1;
  u_xlat1 = clamp(x_1764, 0.0f, 1.0f);
  let x_1766 : f32 = u_xlat57;
  let x_1767 : f32 = u_xlat1;
  u_xlat57 = (x_1766 * x_1767);
  let x_1769 : f32 = u_xlat57;
  let x_1771 : vec4<f32> = u_xlat5;
  let x_1773 : vec3<f32> = (vec3<f32>(x_1769, x_1769, x_1769) * vec3<f32>(x_1771.x, x_1771.y, x_1771.z));
  let x_1774 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1773.x, x_1773.y, x_1773.z, x_1774.w);
  let x_1776 : vec4<f32> = u_xlat6;
  let x_1779 : vec4<f32> = x_43.x_MainLightPosition;
  let x_1781 : vec3<f32> = (vec3<f32>(x_1776.x, x_1776.y, x_1776.z) + vec3<f32>(x_1779.x, x_1779.y, x_1779.z));
  let x_1782 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1781.x, x_1781.y, x_1781.z, x_1782.w);
  let x_1784 : vec4<f32> = u_xlat7;
  let x_1786 : vec4<f32> = u_xlat7;
  u_xlat57 = dot(vec3<f32>(x_1784.x, x_1784.y, x_1784.z), vec3<f32>(x_1786.x, x_1786.y, x_1786.z));
  let x_1789 : f32 = u_xlat57;
  u_xlat57 = max(x_1789, 1.17549435e-37f);
  let x_1792 : f32 = u_xlat57;
  u_xlat57 = inverseSqrt(x_1792);
  let x_1794 : f32 = u_xlat57;
  let x_1796 : vec4<f32> = u_xlat7;
  let x_1798 : vec3<f32> = (vec3<f32>(x_1794, x_1794, x_1794) * vec3<f32>(x_1796.x, x_1796.y, x_1796.z));
  let x_1799 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1798.x, x_1798.y, x_1798.z, x_1799.w);
  let x_1801 : vec3<f32> = u_xlat20;
  let x_1802 : vec4<f32> = u_xlat7;
  u_xlat57 = dot(x_1801, vec3<f32>(x_1802.x, x_1802.y, x_1802.z));
  let x_1805 : f32 = u_xlat57;
  u_xlat57 = clamp(x_1805, 0.0f, 1.0f);
  let x_1808 : vec4<f32> = x_43.x_MainLightPosition;
  let x_1810 : vec4<f32> = u_xlat7;
  u_xlat1 = dot(vec3<f32>(x_1808.x, x_1808.y, x_1808.z), vec3<f32>(x_1810.x, x_1810.y, x_1810.z));
  let x_1813 : f32 = u_xlat1;
  u_xlat1 = clamp(x_1813, 0.0f, 1.0f);
  let x_1815 : f32 = u_xlat57;
  let x_1816 : f32 = u_xlat57;
  u_xlat57 = (x_1815 * x_1816);
  let x_1818 : f32 = u_xlat57;
  let x_1820 : f32 = u_xlat8.x;
  u_xlat57 = ((x_1818 * x_1820) + 1.000010014f);
  let x_1824 : f32 = u_xlat1;
  let x_1825 : f32 = u_xlat1;
  u_xlat1 = (x_1824 * x_1825);
  let x_1827 : f32 = u_xlat57;
  let x_1828 : f32 = u_xlat57;
  u_xlat57 = (x_1827 * x_1828);
  let x_1830 : f32 = u_xlat1;
  u_xlat1 = max(x_1830, 0.100000001f);
  let x_1833 : f32 = u_xlat57;
  let x_1834 : f32 = u_xlat1;
  u_xlat57 = (x_1833 * x_1834);
  let x_1836 : f32 = u_xlat22;
  let x_1837 : f32 = u_xlat57;
  u_xlat57 = (x_1836 * x_1837);
  let x_1839 : f32 = u_xlat60;
  let x_1840 : f32 = u_xlat57;
  u_xlat57 = (x_1839 / x_1840);
  let x_1842 : vec4<f32> = u_xlat0;
  let x_1844 : f32 = u_xlat57;
  let x_1847 : vec3<f32> = u_xlat4;
  let x_1848 : vec3<f32> = ((vec3<f32>(x_1842.x, x_1842.y, x_1842.z) * vec3<f32>(x_1844, x_1844, x_1844)) + x_1847);
  let x_1849 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1848.x, x_1848.y, x_1848.z, x_1849.w);
  let x_1851 : vec4<f32> = u_xlat5;
  let x_1853 : vec4<f32> = u_xlat7;
  let x_1855 : vec3<f32> = (vec3<f32>(x_1851.x, x_1851.y, x_1851.z) * vec3<f32>(x_1853.x, x_1853.y, x_1853.z));
  let x_1856 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1855.x, x_1855.y, x_1855.z, x_1856.w);
  let x_1859 : f32 = x_43.x_AdditionalLightsCount.x;
  let x_1861 : f32 = x_1681.unity_LightData.y;
  u_xlat57 = min(x_1859, x_1861);
  let x_1865 : f32 = u_xlat57;
  u_xlatu57 = bitcast<u32>(i32(x_1865));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_1877 : u32 = u_xlatu_loop_1;
    let x_1878 : u32 = u_xlatu57;
    if ((x_1877 < x_1878)) {
    } else {
      break;
    }
    let x_1881 : u32 = u_xlatu_loop_1;
    u_xlatu59 = (x_1881 >> 2u);
    let x_1885 : u32 = u_xlatu_loop_1;
    u_xlati61 = bitcast<i32>((x_1885 & 3u));
    let x_1888 : u32 = u_xlatu59;
    let x_1891 : vec4<f32> = x_1681.unity_LightIndices[bitcast<i32>(x_1888)];
    let x_1901 : i32 = u_xlati61;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_1906 : vec4<u32> = indexable[x_1901];
    u_xlat59 = dot(x_1891, bitcast<vec4<f32>>(x_1906));
    let x_1910 : f32 = u_xlat59;
    u_xlati59 = i32(x_1910);
    let x_1912 : vec3<f32> = vs_TEXCOORD7;
    let x_1924 : i32 = u_xlati59;
    let x_1926 : vec4<f32> = x_1923.x_AdditionalLightsPosition[x_1924];
    let x_1929 : i32 = u_xlati59;
    let x_1931 : vec4<f32> = x_1923.x_AdditionalLightsPosition[x_1929];
    u_xlat27 = ((-(x_1912) * vec3<f32>(x_1926.w, x_1926.w, x_1926.w)) + vec3<f32>(x_1931.x, x_1931.y, x_1931.z));
    let x_1934 : vec3<f32> = u_xlat27;
    let x_1935 : vec3<f32> = u_xlat27;
    u_xlat61 = dot(x_1934, x_1935);
    let x_1937 : f32 = u_xlat61;
    u_xlat61 = max(x_1937, 6.10351562e-05f);
    let x_1940 : f32 = u_xlat61;
    u_xlat62 = inverseSqrt(x_1940);
    let x_1942 : f32 = u_xlat62;
    let x_1944 : vec3<f32> = u_xlat27;
    let x_1945 : vec3<f32> = (vec3<f32>(x_1942, x_1942, x_1942) * x_1944);
    let x_1946 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_1945.x, x_1945.y, x_1945.z, x_1946.w);
    let x_1948 : f32 = u_xlat61;
    u_xlat63 = (1.0f / x_1948);
    let x_1950 : f32 = u_xlat61;
    let x_1951 : i32 = u_xlati59;
    let x_1953 : f32 = x_1923.x_AdditionalLightsAttenuation[x_1951].x;
    u_xlat61 = (x_1950 * x_1953);
    let x_1955 : f32 = u_xlat61;
    let x_1957 : f32 = u_xlat61;
    u_xlat61 = ((-(x_1955) * x_1957) + 1.0f);
    let x_1960 : f32 = u_xlat61;
    u_xlat61 = max(x_1960, 0.0f);
    let x_1962 : f32 = u_xlat61;
    let x_1963 : f32 = u_xlat61;
    u_xlat61 = (x_1962 * x_1963);
    let x_1965 : f32 = u_xlat61;
    let x_1966 : f32 = u_xlat63;
    u_xlat61 = (x_1965 * x_1966);
    let x_1968 : i32 = u_xlati59;
    let x_1970 : vec4<f32> = x_1923.x_AdditionalLightsSpotDir[x_1968];
    let x_1972 : vec4<f32> = u_xlat9;
    u_xlat63 = dot(vec3<f32>(x_1970.x, x_1970.y, x_1970.z), vec3<f32>(x_1972.x, x_1972.y, x_1972.z));
    let x_1975 : f32 = u_xlat63;
    let x_1976 : i32 = u_xlati59;
    let x_1978 : f32 = x_1923.x_AdditionalLightsAttenuation[x_1976].z;
    let x_1980 : i32 = u_xlati59;
    let x_1982 : f32 = x_1923.x_AdditionalLightsAttenuation[x_1980].w;
    u_xlat63 = ((x_1975 * x_1978) + x_1982);
    let x_1984 : f32 = u_xlat63;
    u_xlat63 = clamp(x_1984, 0.0f, 1.0f);
    let x_1986 : f32 = u_xlat63;
    let x_1987 : f32 = u_xlat63;
    u_xlat63 = (x_1986 * x_1987);
    let x_1989 : f32 = u_xlat61;
    let x_1990 : f32 = u_xlat63;
    u_xlat61 = (x_1989 * x_1990);
    let x_1992 : f32 = u_xlat41;
    let x_1994 : i32 = u_xlati59;
    let x_1996 : vec4<f32> = x_1923.x_AdditionalLightsColor[x_1994];
    let x_1998 : vec3<f32> = (vec3<f32>(x_1992, x_1992, x_1992) * vec3<f32>(x_1996.x, x_1996.y, x_1996.z));
    let x_1999 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_1998.x, x_1998.y, x_1998.z, x_1999.w);
    let x_2001 : vec3<f32> = u_xlat20;
    let x_2002 : vec4<f32> = u_xlat9;
    u_xlat59 = dot(x_2001, vec3<f32>(x_2002.x, x_2002.y, x_2002.z));
    let x_2005 : f32 = u_xlat59;
    u_xlat59 = clamp(x_2005, 0.0f, 1.0f);
    let x_2007 : f32 = u_xlat59;
    let x_2008 : f32 = u_xlat61;
    u_xlat59 = (x_2007 * x_2008);
    let x_2010 : f32 = u_xlat59;
    let x_2012 : vec4<f32> = u_xlat10;
    let x_2014 : vec3<f32> = (vec3<f32>(x_2010, x_2010, x_2010) * vec3<f32>(x_2012.x, x_2012.y, x_2012.z));
    let x_2015 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2014.x, x_2014.y, x_2014.z, x_2015.w);
    let x_2017 : vec3<f32> = u_xlat27;
    let x_2018 : f32 = u_xlat62;
    let x_2021 : vec4<f32> = u_xlat6;
    u_xlat27 = ((x_2017 * vec3<f32>(x_2018, x_2018, x_2018)) + vec3<f32>(x_2021.x, x_2021.y, x_2021.z));
    let x_2024 : vec3<f32> = u_xlat27;
    let x_2025 : vec3<f32> = u_xlat27;
    u_xlat59 = dot(x_2024, x_2025);
    let x_2027 : f32 = u_xlat59;
    u_xlat59 = max(x_2027, 1.17549435e-37f);
    let x_2029 : f32 = u_xlat59;
    u_xlat59 = inverseSqrt(x_2029);
    let x_2031 : f32 = u_xlat59;
    let x_2033 : vec3<f32> = u_xlat27;
    u_xlat27 = (vec3<f32>(x_2031, x_2031, x_2031) * x_2033);
    let x_2035 : vec3<f32> = u_xlat20;
    let x_2036 : vec3<f32> = u_xlat27;
    u_xlat59 = dot(x_2035, x_2036);
    let x_2038 : f32 = u_xlat59;
    u_xlat59 = clamp(x_2038, 0.0f, 1.0f);
    let x_2040 : vec4<f32> = u_xlat9;
    let x_2042 : vec3<f32> = u_xlat27;
    u_xlat61 = dot(vec3<f32>(x_2040.x, x_2040.y, x_2040.z), x_2042);
    let x_2044 : f32 = u_xlat61;
    u_xlat61 = clamp(x_2044, 0.0f, 1.0f);
    let x_2046 : f32 = u_xlat59;
    let x_2047 : f32 = u_xlat59;
    u_xlat59 = (x_2046 * x_2047);
    let x_2049 : f32 = u_xlat59;
    let x_2051 : f32 = u_xlat8.x;
    u_xlat59 = ((x_2049 * x_2051) + 1.000010014f);
    let x_2054 : f32 = u_xlat61;
    let x_2055 : f32 = u_xlat61;
    u_xlat61 = (x_2054 * x_2055);
    let x_2057 : f32 = u_xlat59;
    let x_2058 : f32 = u_xlat59;
    u_xlat59 = (x_2057 * x_2058);
    let x_2060 : f32 = u_xlat61;
    u_xlat61 = max(x_2060, 0.100000001f);
    let x_2062 : f32 = u_xlat59;
    let x_2063 : f32 = u_xlat61;
    u_xlat59 = (x_2062 * x_2063);
    let x_2065 : f32 = u_xlat22;
    let x_2066 : f32 = u_xlat59;
    u_xlat59 = (x_2065 * x_2066);
    let x_2068 : f32 = u_xlat60;
    let x_2069 : f32 = u_xlat59;
    u_xlat59 = (x_2068 / x_2069);
    let x_2071 : vec4<f32> = u_xlat0;
    let x_2073 : f32 = u_xlat59;
    let x_2076 : vec3<f32> = u_xlat4;
    u_xlat27 = ((vec3<f32>(x_2071.x, x_2071.y, x_2071.z) * vec3<f32>(x_2073, x_2073, x_2073)) + x_2076);
    let x_2078 : vec3<f32> = u_xlat27;
    let x_2079 : vec4<f32> = u_xlat10;
    let x_2082 : vec4<f32> = u_xlat7;
    let x_2084 : vec3<f32> = ((x_2078 * vec3<f32>(x_2079.x, x_2079.y, x_2079.z)) + vec3<f32>(x_2082.x, x_2082.y, x_2082.z));
    let x_2085 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2084.x, x_2084.y, x_2084.z, x_2085.w);

    continuing {
      let x_2087 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2087 + bitcast<u32>(1i));
    }
  }
  let x_2089 : vec4<f32> = u_xlat2;
  let x_2091 : vec3<f32> = u_xlat3;
  let x_2094 : vec4<f32> = u_xlat5;
  let x_2096 : vec3<f32> = ((vec3<f32>(x_2089.x, x_2089.y, x_2089.z) * vec3<f32>(x_2091.x, x_2091.x, x_2091.x)) + vec3<f32>(x_2094.x, x_2094.y, x_2094.z));
  let x_2097 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2096.x, x_2096.y, x_2096.z, x_2097.w);
  let x_2101 : vec4<f32> = u_xlat7;
  let x_2103 : vec4<f32> = u_xlat0;
  let x_2105 : vec3<f32> = (vec3<f32>(x_2101.x, x_2101.y, x_2101.z) + vec3<f32>(x_2103.x, x_2103.y, x_2103.z));
  let x_2106 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2105.x, x_2105.y, x_2105.z, x_2106.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD3_param : vec4<f32>, @location(5) vs_TEXCOORD8_param : vec4<f32>, @location(4) vs_TEXCOORD7_param : vec3<f32>, @location(2) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD5_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD8 = vs_TEXCOORD8_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  main_1();
  return main_out(SV_Target0);
}

