struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(4) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(5) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_289 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_423 : MainLightShadows;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(7) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2509 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlat5 : vec4<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_410 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlatu21 : u32;
  var u_xlati21 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat68 : f32;
  var u_xlat63 : f32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb6 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var x_2119 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat46 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu67 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati67 : i32;
  var u_xlat71 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  let x_100 : vec3<f32> = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_100.x, x_100.y, x_100.z, x_101.w);
  let x_103 : vec4<f32> = u_xlat3;
  let x_105 : vec4<f32> = u_xlat3;
  let x_107 : vec3<f32> = (vec3<f32>(x_103.x, x_103.y, x_103.z) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_111 : vec3<f32> = u_xlat2;
  let x_113 : vec3<f32> = (-(x_111) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_116 : vec4<f32> = u_xlat3;
  let x_119 : vec4<f32> = u_xlat4;
  let x_122 : vec3<f32> = ((-(vec3<f32>(x_116.x, x_116.y, x_116.z)) * vec3<f32>(x_119.x, x_119.y, x_119.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_123 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_122.x, x_122.y, x_122.z, x_123.w);
  let x_125 : vec4<f32> = u_xlat0;
  let x_127 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_125.x, x_125.y, x_125.z) * x_127);
  let x_129 : vec3<f32> = u_xlat2;
  let x_130 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_129 + x_130);
  let x_138 : vec4<f32> = u_xlat0;
  let x_140 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_138.x, x_138.y, x_138.z, x_138.x));
  let x_142 : vec3<bool> = vec3<bool>(x_140.x, x_140.y, x_140.z);
  let x_143 : vec4<bool> = u_xlatb4;
  u_xlatb4 = vec4<bool>(x_142.x, x_142.y, x_142.z, x_143.w);
  let x_148 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_148);
  let x_153 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_153);
  let x_157 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_157);
  let x_161 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_161);
  let x_165 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_165);
  let x_169 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_169);
  let x_172 : vec4<f32> = u_xlat3;
  let x_174 : vec4<f32> = u_xlat4;
  let x_176 : vec3<f32> = (vec3<f32>(x_172.x, x_172.y, x_172.z) * vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_179 : vec3<f32> = u_xlat2;
  let x_180 : vec4<f32> = u_xlat5;
  let x_183 : vec4<f32> = u_xlat3;
  u_xlat2 = ((x_179 * vec3<f32>(x_180.x, x_180.y, x_180.z)) + vec3<f32>(x_183.x, x_183.y, x_183.z));
  let x_186 : vec4<f32> = u_xlat0;
  let x_189 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_186.x, x_186.y, x_186.z)) + x_189);
  let x_191 : f32 = u_xlat43;
  let x_193 : vec3<f32> = u_xlat2;
  let x_195 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_191, x_191, x_191) * x_193) + vec3<f32>(x_195.x, x_195.y, x_195.z));
  let x_199 : f32 = u_xlat0.x;
  u_xlat0.x = (x_199 + -0.150000006f);
  let x_204 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_204);
  let x_208 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_208) + 1.0f);
  let x_212 : vec4<f32> = u_xlat0;
  let x_217 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_212.x, x_212.x, x_212.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_217);
  let x_223 : vec4<f32> = vs_INTERP3;
  let x_226 : f32 = x_44.x_GlobalMipBias.x;
  let x_227 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_223.x, x_223.y), x_226);
  let x_228 : vec3<f32> = vec3<f32>(x_227.x, x_227.y, x_227.w);
  let x_229 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_228.x, x_228.y, x_228.z, x_229.w);
  let x_232 : f32 = u_xlat3.x;
  let x_234 : f32 = u_xlat3.z;
  u_xlat3.x = (x_232 * x_234);
  let x_239 : vec4<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_239.x, x_239.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_247 : vec2<f32> = u_xlat21;
  let x_248 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_247, x_248);
  let x_250 : f32 = u_xlat43;
  u_xlat43 = min(x_250, 1.0f);
  let x_252 : f32 = u_xlat43;
  u_xlat43 = (-(x_252) + 1.0f);
  let x_255 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_255);
  let x_257 : f32 = u_xlat43;
  u_xlat43 = max(x_257, 1.00000002e-16f);
  let x_261 : f32 = u_xlat1.x;
  let x_263 : f32 = u_xlat0.x;
  u_xlat0.x = (x_261 + x_263);
  let x_267 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_267, 0.0f, 1.0f);
  let x_271 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_271, 0.0f);
  let x_275 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_275, 0.850000024f);
  let x_283 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_283);
  let x_291 : f32 = x_289.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_291 >= 0.0f);
  let x_296 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_296);
  let x_300 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_300);
  let x_304 : f32 = u_xlat22.z;
  let x_306 : f32 = u_xlat22.x;
  u_xlat22.x = (x_304 * x_306);
  let x_311 : vec3<f32> = vs_INTERP1;
  let x_313 : vec4<f32> = vs_INTERP2;
  let x_315 : vec3<f32> = (vec3<f32>(x_311.z, x_311.x, x_311.y) * vec3<f32>(x_313.y, x_313.z, x_313.x));
  let x_316 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec3<f32> = vs_INTERP1;
  let x_320 : vec4<f32> = vs_INTERP2;
  let x_323 : vec4<f32> = u_xlat3;
  let x_326 : vec3<f32> = ((vec3<f32>(x_318.y, x_318.z, x_318.x) * vec3<f32>(x_320.z, x_320.x, x_320.y)) + -(vec3<f32>(x_323.x, x_323.y, x_323.z)));
  let x_327 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_326.x, x_326.y, x_326.z, x_327.w);
  let x_329 : vec3<f32> = u_xlat22;
  let x_331 : vec4<f32> = u_xlat3;
  let x_333 : vec3<f32> = (vec3<f32>(x_329.x, x_329.x, x_329.x) * vec3<f32>(x_331.x, x_331.y, x_331.z));
  let x_334 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_333.x, x_333.y, x_333.z, x_334.w);
  let x_336 : vec2<f32> = u_xlat21;
  let x_338 : vec4<f32> = u_xlat3;
  let x_340 : vec3<f32> = (vec3<f32>(x_336.y, x_336.y, x_336.y) * vec3<f32>(x_338.x, x_338.y, x_338.z));
  let x_341 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_340.x, x_340.y, x_340.z, x_341.w);
  let x_343 : vec2<f32> = u_xlat21;
  let x_345 : vec4<f32> = vs_INTERP2;
  let x_348 : vec4<f32> = u_xlat3;
  let x_350 : vec3<f32> = ((vec3<f32>(x_343.x, x_343.x, x_343.x) * vec3<f32>(x_345.x, x_345.y, x_345.z)) + vec3<f32>(x_348.x, x_348.y, x_348.z));
  let x_351 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_350.x, x_350.y, x_350.z, x_351.w);
  let x_353 : f32 = u_xlat43;
  let x_355 : vec3<f32> = vs_INTERP1;
  let x_357 : vec4<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_353, x_353, x_353) * x_355) + vec3<f32>(x_357.x, x_357.y, x_357.z));
  let x_360 : vec3<f32> = u_xlat22;
  let x_361 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_360, x_361);
  let x_365 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_365);
  let x_368 : vec2<f32> = u_xlat21;
  let x_370 : vec3<f32> = u_xlat22;
  let x_371 : vec3<f32> = (vec3<f32>(x_368.x, x_368.x, x_368.x) * x_370);
  let x_372 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_371.x, x_371.y, x_371.z, x_372.w);
  let x_377 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_377 == 0.0f);
  let x_380 : vec3<f32> = vs_INTERP0;
  let x_385 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat22 = (-(x_380) + x_385);
  let x_388 : vec3<f32> = u_xlat22;
  let x_389 : vec3<f32> = u_xlat22;
  u_xlat42 = dot(x_388, x_389);
  let x_391 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_391);
  let x_393 : f32 = u_xlat42;
  let x_395 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_393, x_393, x_393) * x_395);
  let x_400 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_400;
  let x_403 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_403;
  let x_407 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_407;
  let x_409 : bool = u_xlatb21;
  if (x_409) {
    let x_413 : vec3<f32> = u_xlat22;
    x_410 = x_413;
  } else {
    let x_415 : vec4<f32> = u_xlat4;
    x_410 = vec3<f32>(x_415.x, x_415.y, x_415.z);
  }
  let x_417 : vec3<f32> = x_410;
  u_xlat22 = x_417;
  let x_418 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = x_423.x_CascadeShadowSplitSpheres0;
  let x_428 : vec3<f32> = (x_418 + -(vec3<f32>(x_425.x, x_425.y, x_425.z)));
  let x_429 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_428.x, x_428.y, x_428.z, x_429.w);
  let x_431 : vec3<f32> = vs_INTERP0;
  let x_433 : vec4<f32> = x_423.x_CascadeShadowSplitSpheres1;
  let x_436 : vec3<f32> = (x_431 + -(vec3<f32>(x_433.x, x_433.y, x_433.z)));
  let x_437 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_436.x, x_436.y, x_436.z, x_437.w);
  let x_440 : vec3<f32> = vs_INTERP0;
  let x_442 : vec4<f32> = x_423.x_CascadeShadowSplitSpheres2;
  let x_445 : vec3<f32> = (x_440 + -(vec3<f32>(x_442.x, x_442.y, x_442.z)));
  let x_446 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_445.x, x_445.y, x_445.z, x_446.w);
  let x_449 : vec3<f32> = vs_INTERP0;
  let x_451 : vec4<f32> = x_423.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_449 + -(vec3<f32>(x_451.x, x_451.y, x_451.z)));
  let x_455 : vec4<f32> = u_xlat4;
  let x_457 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_455.x, x_455.y, x_455.z), vec3<f32>(x_457.x, x_457.y, x_457.z));
  let x_461 : vec4<f32> = u_xlat5;
  let x_463 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_461.x, x_461.y, x_461.z), vec3<f32>(x_463.x, x_463.y, x_463.z));
  let x_467 : vec4<f32> = u_xlat6;
  let x_469 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_467.x, x_467.y, x_467.z), vec3<f32>(x_469.x, x_469.y, x_469.z));
  let x_473 : vec3<f32> = u_xlat7;
  let x_474 : vec3<f32> = u_xlat7;
  u_xlat4.w = dot(x_473, x_474);
  let x_477 : vec4<f32> = u_xlat4;
  let x_480 : vec4<f32> = x_423.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_477 < x_480);
  let x_483 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_483);
  let x_487 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_487);
  let x_491 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_491);
  let x_495 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_495);
  let x_499 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_499);
  let x_504 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_504);
  let x_508 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_508);
  let x_511 : vec4<f32> = u_xlat4;
  let x_513 : vec4<f32> = u_xlat5;
  let x_515 : vec3<f32> = (vec3<f32>(x_511.x, x_511.y, x_511.z) + vec3<f32>(x_513.y, x_513.z, x_513.w));
  let x_516 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_515.x, x_515.y, x_515.z, x_516.w);
  let x_518 : vec4<f32> = u_xlat4;
  let x_521 : vec3<f32> = max(vec3<f32>(x_518.x, x_518.y, x_518.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_522 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_522.x, x_521.x, x_521.y, x_521.z);
  let x_524 : vec4<f32> = u_xlat5;
  u_xlat21.x = dot(x_524, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_531 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_531) + 4.0f);
  let x_538 : f32 = u_xlat21.x;
  u_xlatu21 = u32(x_538);
  let x_542 : u32 = u_xlatu21;
  u_xlati21 = (bitcast<i32>(x_542) << bitcast<u32>(2i));
  let x_545 : vec3<f32> = vs_INTERP0;
  let x_547 : i32 = u_xlati21;
  let x_550 : i32 = u_xlati21;
  let x_554 : vec4<f32> = x_423.x_MainLightWorldToShadow[((x_547 + 1i) / 4i)][((x_550 + 1i) % 4i)];
  let x_556 : vec3<f32> = (vec3<f32>(x_545.y, x_545.y, x_545.y) * vec3<f32>(x_554.x, x_554.y, x_554.z));
  let x_557 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_556.x, x_556.y, x_556.z, x_557.w);
  let x_559 : i32 = u_xlati21;
  let x_561 : i32 = u_xlati21;
  let x_564 : vec4<f32> = x_423.x_MainLightWorldToShadow[(x_559 / 4i)][(x_561 % 4i)];
  let x_566 : vec3<f32> = vs_INTERP0;
  let x_569 : vec4<f32> = u_xlat4;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.x, x_564.y, x_564.z) * vec3<f32>(x_566.x, x_566.x, x_566.x)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : i32 = u_xlati21;
  let x_577 : i32 = u_xlati21;
  let x_581 : vec4<f32> = x_423.x_MainLightWorldToShadow[((x_574 + 2i) / 4i)][((x_577 + 2i) % 4i)];
  let x_583 : vec3<f32> = vs_INTERP0;
  let x_586 : vec4<f32> = u_xlat4;
  let x_588 : vec3<f32> = ((vec3<f32>(x_581.x, x_581.y, x_581.z) * vec3<f32>(x_583.z, x_583.z, x_583.z)) + vec3<f32>(x_586.x, x_586.y, x_586.z));
  let x_589 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_588.x, x_588.y, x_588.z, x_589.w);
  let x_591 : vec4<f32> = u_xlat4;
  let x_593 : i32 = u_xlati21;
  let x_596 : i32 = u_xlati21;
  let x_600 : vec4<f32> = x_423.x_MainLightWorldToShadow[((x_593 + 3i) / 4i)][((x_596 + 3i) % 4i)];
  let x_602 : vec3<f32> = (vec3<f32>(x_591.x, x_591.y, x_591.z) + vec3<f32>(x_600.x, x_600.y, x_600.z));
  let x_603 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
  let x_606 : f32 = vs_INTERP0.y;
  let x_608 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat21.x = (x_606 * x_608);
  let x_612 : f32 = x_44.unity_MatrixV[0i].z;
  let x_614 : f32 = vs_INTERP0.x;
  let x_617 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_612 * x_614) + x_617);
  let x_621 : f32 = x_44.unity_MatrixV[2i].z;
  let x_623 : f32 = vs_INTERP0.z;
  let x_626 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_621 * x_623) + x_626);
  let x_630 : f32 = u_xlat21.x;
  let x_632 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat21.x = (x_630 + x_632);
  let x_636 : f32 = u_xlat21.x;
  let x_640 : f32 = x_44.x_ProjectionParams.y;
  u_xlat21.x = (-(x_636) + -(x_640));
  let x_645 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_645, 0.0f);
  let x_649 : f32 = u_xlat21.x;
  let x_652 : f32 = x_44.unity_FogParams.x;
  u_xlat21.x = (x_649 * x_652);
  u_xlat3.w = 1.0f;
  let x_658 : vec4<f32> = x_289.unity_SHAr;
  let x_659 : vec4<f32> = u_xlat3;
  u_xlat5.x = dot(x_658, x_659);
  let x_664 : vec4<f32> = x_289.unity_SHAg;
  let x_665 : vec4<f32> = u_xlat3;
  u_xlat5.y = dot(x_664, x_665);
  let x_670 : vec4<f32> = x_289.unity_SHAb;
  let x_671 : vec4<f32> = u_xlat3;
  u_xlat5.z = dot(x_670, x_671);
  let x_674 : vec4<f32> = u_xlat3;
  let x_676 : vec4<f32> = u_xlat3;
  u_xlat6 = (vec4<f32>(x_674.y, x_674.z, x_674.z, x_674.x) * vec4<f32>(x_676.x, x_676.y, x_676.z, x_676.z));
  let x_681 : vec4<f32> = x_289.unity_SHBr;
  let x_682 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_681, x_682);
  let x_687 : vec4<f32> = x_289.unity_SHBg;
  let x_688 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_687, x_688);
  let x_693 : vec4<f32> = x_289.unity_SHBb;
  let x_694 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_693, x_694);
  let x_698 : f32 = u_xlat3.y;
  let x_700 : f32 = u_xlat3.y;
  u_xlat42 = (x_698 * x_700);
  let x_703 : f32 = u_xlat3.x;
  let x_705 : f32 = u_xlat3.x;
  let x_707 : f32 = u_xlat42;
  u_xlat42 = ((x_703 * x_705) + -(x_707));
  let x_712 : vec4<f32> = x_289.unity_SHC;
  let x_714 : f32 = u_xlat42;
  let x_717 : vec3<f32> = u_xlat7;
  let x_718 : vec3<f32> = ((vec3<f32>(x_712.x, x_712.y, x_712.z) * vec3<f32>(x_714, x_714, x_714)) + x_717);
  let x_719 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_718.x, x_718.y, x_718.z, x_719.w);
  let x_721 : vec4<f32> = u_xlat5;
  let x_723 : vec4<f32> = u_xlat6;
  let x_725 : vec3<f32> = (vec3<f32>(x_721.x, x_721.y, x_721.z) + vec3<f32>(x_723.x, x_723.y, x_723.z));
  let x_726 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_725.x, x_725.y, x_725.z, x_726.w);
  let x_728 : vec4<f32> = u_xlat5;
  let x_730 : vec3<f32> = max(vec3<f32>(x_728.x, x_728.y, x_728.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_731 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_730.x, x_730.y, x_730.z, x_731.w);
  let x_735 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_736 : vec2<f32> = vec2<f32>(x_735.x, x_735.y);
  let x_740 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_736.x, x_736.y));
  let x_741 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
  let x_743 : vec4<f32> = u_xlat6;
  let x_745 : vec4<f32> = hlslcc_FragCoord;
  let x_747 : vec2<f32> = (vec2<f32>(x_743.x, x_743.y) * vec2<f32>(x_745.x, x_745.y));
  let x_748 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
  let x_751 : f32 = u_xlat6.y;
  let x_754 : f32 = x_44.x_ScaleBiasRt.x;
  let x_757 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat42 = ((x_751 * x_754) + x_757);
  let x_759 : f32 = u_xlat42;
  u_xlat6.z = (-(x_759) + 1.0f);
  let x_764 : f32 = u_xlat0.x;
  u_xlat42 = ((-(x_764) * 0.959999979f) + 0.959999979f);
  let x_770 : f32 = u_xlat42;
  u_xlat65 = (-(x_770) + 1.0f);
  let x_773 : f32 = u_xlat42;
  let x_775 : vec3<f32> = u_xlat2;
  u_xlat7 = (vec3<f32>(x_773, x_773, x_773) * x_775);
  let x_777 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_777 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_781 : vec4<f32> = u_xlat0;
  let x_783 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_781.x, x_781.x, x_781.x) * x_783) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_789 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_789) + 1.0f);
  let x_794 : f32 = u_xlat0.x;
  let x_796 : f32 = u_xlat0.x;
  u_xlat42 = (x_794 * x_796);
  let x_799 : f32 = u_xlat42;
  let x_800 : f32 = u_xlat42;
  u_xlat66 = (x_799 * x_800);
  let x_803 : f32 = u_xlat1.x;
  let x_804 : f32 = u_xlat65;
  u_xlat1.x = (x_803 + x_804);
  let x_808 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_808, 1.0f);
  let x_811 : f32 = u_xlat42;
  u_xlat65 = ((x_811 * 4.0f) + 2.0f);
  let x_820 : vec4<f32> = u_xlat6;
  let x_823 : f32 = x_44.x_GlobalMipBias.x;
  let x_824 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_820.x, x_820.z), x_823);
  u_xlat67 = x_824.x;
  let x_827 : f32 = u_xlat67;
  u_xlat68 = (x_827 + -1.0f);
  let x_830 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_831 : f32 = u_xlat68;
  u_xlat68 = ((x_830 * x_831) + 1.0f);
  let x_836 : f32 = u_xlat0.w;
  let x_837 : f32 = u_xlat67;
  u_xlat63 = min(x_836, x_837);
  let x_841 : f32 = x_423.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_841);
  let x_843 : bool = u_xlatb67;
  if (x_843) {
    let x_847 : f32 = x_423.x_MainLightShadowParams.y;
    u_xlatb67 = (x_847 == 1.0f);
    let x_849 : bool = u_xlatb67;
    if (x_849) {
      let x_852 : vec4<f32> = u_xlat4;
      let x_855 : vec4<f32> = x_423.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_852.x, x_852.y, x_852.x, x_852.y) + x_855);
      let x_858 : vec4<f32> = u_xlat6;
      let x_859 : vec2<f32> = vec2<f32>(x_858.x, x_858.y);
      let x_861 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_859.x, x_859.y, x_861);
      let x_874 : vec3<f32> = txVec0;
      let x_876 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_874.xy, x_874.z);
      u_xlat8.x = x_876;
      let x_879 : vec4<f32> = u_xlat6;
      let x_880 : vec2<f32> = vec2<f32>(x_879.z, x_879.w);
      let x_882 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_880.x, x_880.y, x_882);
      let x_889 : vec3<f32> = txVec1;
      let x_891 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_889.xy, x_889.z);
      u_xlat8.y = x_891;
      let x_893 : vec4<f32> = u_xlat4;
      let x_896 : vec4<f32> = x_423.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_893.x, x_893.y, x_893.x, x_893.y) + x_896);
      let x_899 : vec4<f32> = u_xlat6;
      let x_900 : vec2<f32> = vec2<f32>(x_899.x, x_899.y);
      let x_902 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_900.x, x_900.y, x_902);
      let x_909 : vec3<f32> = txVec2;
      let x_911 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_909.xy, x_909.z);
      u_xlat8.z = x_911;
      let x_914 : vec4<f32> = u_xlat6;
      let x_915 : vec2<f32> = vec2<f32>(x_914.z, x_914.w);
      let x_917 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_915.x, x_915.y, x_917);
      let x_924 : vec3<f32> = txVec3;
      let x_926 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_924.xy, x_924.z);
      u_xlat8.w = x_926;
      let x_928 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_928, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_935 : f32 = x_423.x_MainLightShadowParams.y;
      u_xlatb6 = (x_935 == 2.0f);
      let x_937 : bool = u_xlatb6;
      if (x_937) {
        let x_940 : vec4<f32> = u_xlat4;
        let x_943 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_947 : vec2<f32> = ((vec2<f32>(x_940.x, x_940.y) * vec2<f32>(x_943.z, x_943.w)) + vec2<f32>(0.5f, 0.5f));
        let x_948 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_947.x, x_947.y, x_948.z, x_948.w);
        let x_950 : vec4<f32> = u_xlat6;
        let x_952 : vec2<f32> = floor(vec2<f32>(x_950.x, x_950.y));
        let x_953 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_952.x, x_952.y, x_953.z, x_953.w);
        let x_956 : vec4<f32> = u_xlat4;
        let x_959 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_956.x, x_956.y) * vec2<f32>(x_959.z, x_959.w)) + -(vec2<f32>(x_962.x, x_962.y)));
        let x_966 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_966.x, x_966.x, x_966.y, x_966.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_971 : vec4<f32> = u_xlat8;
        let x_973 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_971.x, x_971.x, x_971.z, x_971.z) * vec4<f32>(x_973.x, x_973.x, x_973.z, x_973.z));
        let x_976 : vec4<f32> = u_xlat9;
        let x_980 : vec2<f32> = (vec2<f32>(x_976.y, x_976.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_981 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_980.x, x_981.y, x_980.y, x_981.w);
        let x_983 : vec4<f32> = u_xlat9;
        let x_986 : vec2<f32> = u_xlat48;
        let x_988 : vec2<f32> = ((vec2<f32>(x_983.x, x_983.z) * vec2<f32>(0.5f, 0.5f)) + -(x_986));
        let x_989 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_988.x, x_988.y, x_989.z, x_989.w);
        let x_992 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_992) + vec2<f32>(1.0f, 1.0f));
        let x_996 : vec2<f32> = u_xlat48;
        let x_998 : vec2<f32> = min(x_996, vec2<f32>(0.0f, 0.0f));
        let x_999 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_998.x, x_998.y, x_999.z, x_999.w);
        let x_1001 : vec4<f32> = u_xlat10;
        let x_1004 : vec4<f32> = u_xlat10;
        let x_1007 : vec2<f32> = u_xlat51;
        let x_1008 : vec2<f32> = ((-(vec2<f32>(x_1001.x, x_1001.y)) * vec2<f32>(x_1004.x, x_1004.y)) + x_1007);
        let x_1009 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1008.x, x_1008.y, x_1009.z, x_1009.w);
        let x_1011 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_1011, vec2<f32>(0.0f, 0.0f));
        let x_1013 : vec2<f32> = u_xlat48;
        let x_1015 : vec2<f32> = u_xlat48;
        let x_1017 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_1013) * x_1015) + vec2<f32>(x_1017.y, x_1017.w));
        let x_1020 : vec4<f32> = u_xlat10;
        let x_1022 : vec2<f32> = (vec2<f32>(x_1020.x, x_1020.y) + vec2<f32>(1.0f, 1.0f));
        let x_1023 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1022.x, x_1022.y, x_1023.z, x_1023.w);
        let x_1025 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_1025 + vec2<f32>(1.0f, 1.0f));
        let x_1028 : vec4<f32> = u_xlat9;
        let x_1032 : vec2<f32> = (vec2<f32>(x_1028.x, x_1028.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1032.x, x_1032.y, x_1033.z, x_1033.w);
        let x_1035 : vec2<f32> = u_xlat51;
        let x_1036 : vec2<f32> = (x_1035 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1037 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1036.x, x_1036.y, x_1037.z, x_1037.w);
        let x_1039 : vec4<f32> = u_xlat10;
        let x_1041 : vec2<f32> = (vec2<f32>(x_1039.x, x_1039.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1042 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1041.x, x_1041.y, x_1042.z, x_1042.w);
        let x_1045 : vec2<f32> = u_xlat48;
        let x_1046 : vec2<f32> = (x_1045 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1047 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1046.x, x_1046.y, x_1047.z, x_1047.w);
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_1049.y, x_1049.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1053 : f32 = u_xlat10.x;
        u_xlat11.z = x_1053;
        let x_1056 : f32 = u_xlat48.x;
        u_xlat11.w = x_1056;
        let x_1059 : f32 = u_xlat12.x;
        u_xlat9.z = x_1059;
        let x_1062 : f32 = u_xlat8.x;
        u_xlat9.w = x_1062;
        let x_1065 : vec4<f32> = u_xlat9;
        let x_1067 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1065.z, x_1065.w, x_1065.x, x_1065.z) + vec4<f32>(x_1067.z, x_1067.w, x_1067.x, x_1067.z));
        let x_1071 : f32 = u_xlat11.y;
        u_xlat10.z = x_1071;
        let x_1074 : f32 = u_xlat48.y;
        u_xlat10.w = x_1074;
        let x_1077 : f32 = u_xlat9.y;
        u_xlat12.z = x_1077;
        let x_1080 : f32 = u_xlat8.z;
        u_xlat12.w = x_1080;
        let x_1082 : vec4<f32> = u_xlat10;
        let x_1084 : vec4<f32> = u_xlat12;
        let x_1086 : vec3<f32> = (vec3<f32>(x_1082.z, x_1082.y, x_1082.w) + vec3<f32>(x_1084.z, x_1084.y, x_1084.w));
        let x_1087 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1086.x, x_1086.y, x_1086.z, x_1087.w);
        let x_1089 : vec4<f32> = u_xlat9;
        let x_1091 : vec4<f32> = u_xlat13;
        let x_1093 : vec3<f32> = (vec3<f32>(x_1089.x, x_1089.z, x_1089.w) / vec3<f32>(x_1091.z, x_1091.w, x_1091.y));
        let x_1094 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1093.x, x_1093.y, x_1093.z, x_1094.w);
        let x_1096 : vec4<f32> = u_xlat9;
        let x_1102 : vec3<f32> = (vec3<f32>(x_1096.x, x_1096.y, x_1096.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1103 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1102.x, x_1102.y, x_1102.z, x_1103.w);
        let x_1105 : vec4<f32> = u_xlat12;
        let x_1107 : vec4<f32> = u_xlat8;
        let x_1109 : vec3<f32> = (vec3<f32>(x_1105.z, x_1105.y, x_1105.w) / vec3<f32>(x_1107.x, x_1107.y, x_1107.z));
        let x_1110 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1109.x, x_1109.y, x_1109.z, x_1110.w);
        let x_1112 : vec4<f32> = u_xlat10;
        let x_1114 : vec3<f32> = (vec3<f32>(x_1112.x, x_1112.y, x_1112.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1114.x, x_1114.y, x_1114.z, x_1115.w);
        let x_1117 : vec4<f32> = u_xlat9;
        let x_1120 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1122 : vec3<f32> = (vec3<f32>(x_1117.y, x_1117.x, x_1117.z) * vec3<f32>(x_1120.x, x_1120.x, x_1120.x));
        let x_1123 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1122.x, x_1122.y, x_1122.z, x_1123.w);
        let x_1125 : vec4<f32> = u_xlat10;
        let x_1128 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1130 : vec3<f32> = (vec3<f32>(x_1125.x, x_1125.y, x_1125.z) * vec3<f32>(x_1128.y, x_1128.y, x_1128.y));
        let x_1131 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1131.w);
        let x_1134 : f32 = u_xlat10.x;
        u_xlat9.w = x_1134;
        let x_1136 : vec4<f32> = u_xlat6;
        let x_1139 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1136.x, x_1136.y, x_1136.x, x_1136.y) * vec4<f32>(x_1139.x, x_1139.y, x_1139.x, x_1139.y)) + vec4<f32>(x_1142.y, x_1142.w, x_1142.x, x_1142.w));
        let x_1145 : vec4<f32> = u_xlat6;
        let x_1148 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1151 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1145.x, x_1145.y) * vec2<f32>(x_1148.x, x_1148.y)) + vec2<f32>(x_1151.z, x_1151.w));
        let x_1155 : f32 = u_xlat9.y;
        u_xlat10.w = x_1155;
        let x_1157 : vec4<f32> = u_xlat10;
        let x_1158 : vec2<f32> = vec2<f32>(x_1157.y, x_1157.z);
        let x_1159 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1159.x, x_1158.x, x_1159.z, x_1158.y);
        let x_1161 : vec4<f32> = u_xlat6;
        let x_1164 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1170 : vec4<f32> = u_xlat6;
        let x_1173 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1176 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1170.x, x_1170.y, x_1170.x, x_1170.y) * vec4<f32>(x_1173.x, x_1173.y, x_1173.x, x_1173.y)) + vec4<f32>(x_1176.w, x_1176.y, x_1176.w, x_1176.z));
        let x_1179 : vec4<f32> = u_xlat6;
        let x_1182 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1185 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1179.x, x_1179.y, x_1179.x, x_1179.y) * vec4<f32>(x_1182.x, x_1182.y, x_1182.x, x_1182.y)) + vec4<f32>(x_1185.x, x_1185.w, x_1185.z, x_1185.w));
        let x_1189 : vec4<f32> = u_xlat8;
        let x_1191 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1189.x, x_1189.x, x_1189.x, x_1189.y) * vec4<f32>(x_1191.z, x_1191.w, x_1191.y, x_1191.z));
        let x_1195 : vec4<f32> = u_xlat8;
        let x_1197 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1195.y, x_1195.y, x_1195.z, x_1195.z) * x_1197);
        let x_1200 : f32 = u_xlat8.z;
        let x_1202 : f32 = u_xlat13.y;
        u_xlat6.x = (x_1200 * x_1202);
        let x_1206 : vec4<f32> = u_xlat11;
        let x_1207 : vec2<f32> = vec2<f32>(x_1206.x, x_1206.y);
        let x_1209 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_1207.x, x_1207.y, x_1209);
        let x_1217 : vec3<f32> = txVec4;
        let x_1219 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1217.xy, x_1217.z);
        u_xlat27 = x_1219;
        let x_1221 : vec4<f32> = u_xlat11;
        let x_1222 : vec2<f32> = vec2<f32>(x_1221.z, x_1221.w);
        let x_1224 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_1222.x, x_1222.y, x_1224);
        let x_1232 : vec3<f32> = txVec5;
        let x_1234 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1232.xy, x_1232.z);
        u_xlat70 = x_1234;
        let x_1235 : f32 = u_xlat70;
        let x_1237 : f32 = u_xlat14.y;
        u_xlat70 = (x_1235 * x_1237);
        let x_1240 : f32 = u_xlat14.x;
        let x_1241 : f32 = u_xlat27;
        let x_1243 : f32 = u_xlat70;
        u_xlat27 = ((x_1240 * x_1241) + x_1243);
        let x_1246 : vec2<f32> = u_xlat48;
        let x_1248 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_1246.x, x_1246.y, x_1248);
        let x_1255 : vec3<f32> = txVec6;
        let x_1257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1255.xy, x_1255.z);
        u_xlat48.x = x_1257;
        let x_1260 : f32 = u_xlat14.z;
        let x_1262 : f32 = u_xlat48.x;
        let x_1264 : f32 = u_xlat27;
        u_xlat27 = ((x_1260 * x_1262) + x_1264);
        let x_1267 : vec4<f32> = u_xlat10;
        let x_1268 : vec2<f32> = vec2<f32>(x_1267.x, x_1267.y);
        let x_1270 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_1268.x, x_1268.y, x_1270);
        let x_1277 : vec3<f32> = txVec7;
        let x_1279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1277.xy, x_1277.z);
        u_xlat48.x = x_1279;
        let x_1282 : f32 = u_xlat14.w;
        let x_1284 : f32 = u_xlat48.x;
        let x_1286 : f32 = u_xlat27;
        u_xlat27 = ((x_1282 * x_1284) + x_1286);
        let x_1289 : vec4<f32> = u_xlat12;
        let x_1290 : vec2<f32> = vec2<f32>(x_1289.x, x_1289.y);
        let x_1292 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_1290.x, x_1290.y, x_1292);
        let x_1299 : vec3<f32> = txVec8;
        let x_1301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1299.xy, x_1299.z);
        u_xlat48.x = x_1301;
        let x_1304 : f32 = u_xlat15.x;
        let x_1306 : f32 = u_xlat48.x;
        let x_1308 : f32 = u_xlat27;
        u_xlat27 = ((x_1304 * x_1306) + x_1308);
        let x_1311 : vec4<f32> = u_xlat12;
        let x_1312 : vec2<f32> = vec2<f32>(x_1311.z, x_1311.w);
        let x_1314 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_1312.x, x_1312.y, x_1314);
        let x_1321 : vec3<f32> = txVec9;
        let x_1323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1321.xy, x_1321.z);
        u_xlat48.x = x_1323;
        let x_1326 : f32 = u_xlat15.y;
        let x_1328 : f32 = u_xlat48.x;
        let x_1330 : f32 = u_xlat27;
        u_xlat27 = ((x_1326 * x_1328) + x_1330);
        let x_1333 : vec4<f32> = u_xlat10;
        let x_1334 : vec2<f32> = vec2<f32>(x_1333.z, x_1333.w);
        let x_1336 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_1334.x, x_1334.y, x_1336);
        let x_1343 : vec3<f32> = txVec10;
        let x_1345 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1343.xy, x_1343.z);
        u_xlat48.x = x_1345;
        let x_1348 : f32 = u_xlat15.z;
        let x_1350 : f32 = u_xlat48.x;
        let x_1352 : f32 = u_xlat27;
        u_xlat27 = ((x_1348 * x_1350) + x_1352);
        let x_1355 : vec4<f32> = u_xlat9;
        let x_1356 : vec2<f32> = vec2<f32>(x_1355.x, x_1355.y);
        let x_1358 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_1356.x, x_1356.y, x_1358);
        let x_1365 : vec3<f32> = txVec11;
        let x_1367 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1365.xy, x_1365.z);
        u_xlat48.x = x_1367;
        let x_1370 : f32 = u_xlat15.w;
        let x_1372 : f32 = u_xlat48.x;
        let x_1374 : f32 = u_xlat27;
        u_xlat27 = ((x_1370 * x_1372) + x_1374);
        let x_1377 : vec4<f32> = u_xlat9;
        let x_1378 : vec2<f32> = vec2<f32>(x_1377.z, x_1377.w);
        let x_1380 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_1378.x, x_1378.y, x_1380);
        let x_1387 : vec3<f32> = txVec12;
        let x_1389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1387.xy, x_1387.z);
        u_xlat48.x = x_1389;
        let x_1392 : f32 = u_xlat6.x;
        let x_1394 : f32 = u_xlat48.x;
        let x_1396 : f32 = u_xlat27;
        u_xlat67 = ((x_1392 * x_1394) + x_1396);
      } else {
        let x_1399 : vec4<f32> = u_xlat4;
        let x_1402 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1405 : vec2<f32> = ((vec2<f32>(x_1399.x, x_1399.y) * vec2<f32>(x_1402.z, x_1402.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1406 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1405.x, x_1405.y, x_1406.z, x_1406.w);
        let x_1408 : vec4<f32> = u_xlat6;
        let x_1410 : vec2<f32> = floor(vec2<f32>(x_1408.x, x_1408.y));
        let x_1411 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1410.x, x_1410.y, x_1411.z, x_1411.w);
        let x_1413 : vec4<f32> = u_xlat4;
        let x_1416 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1419 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1413.x, x_1413.y) * vec2<f32>(x_1416.z, x_1416.w)) + -(vec2<f32>(x_1419.x, x_1419.y)));
        let x_1423 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1423.x, x_1423.x, x_1423.y, x_1423.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1426 : vec4<f32> = u_xlat8;
        let x_1428 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1426.x, x_1426.x, x_1426.z, x_1426.z) * vec4<f32>(x_1428.x, x_1428.x, x_1428.z, x_1428.z));
        let x_1431 : vec4<f32> = u_xlat9;
        let x_1435 : vec2<f32> = (vec2<f32>(x_1431.y, x_1431.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1436 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1436.x, x_1435.x, x_1436.z, x_1435.y);
        let x_1438 : vec4<f32> = u_xlat9;
        let x_1441 : vec2<f32> = u_xlat48;
        let x_1443 : vec2<f32> = ((vec2<f32>(x_1438.x, x_1438.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1441));
        let x_1444 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1443.x, x_1444.y, x_1443.y, x_1444.w);
        let x_1446 : vec2<f32> = u_xlat48;
        let x_1448 : vec2<f32> = (-(x_1446) + vec2<f32>(1.0f, 1.0f));
        let x_1449 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1448.x, x_1448.y, x_1449.z, x_1449.w);
        let x_1451 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1451, vec2<f32>(0.0f, 0.0f));
        let x_1453 : vec2<f32> = u_xlat51;
        let x_1455 : vec2<f32> = u_xlat51;
        let x_1457 : vec4<f32> = u_xlat9;
        let x_1459 : vec2<f32> = ((-(x_1453) * x_1455) + vec2<f32>(x_1457.x, x_1457.y));
        let x_1460 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1459.x, x_1459.y, x_1460.z, x_1460.w);
        let x_1462 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1462, vec2<f32>(0.0f, 0.0f));
        let x_1465 : vec2<f32> = u_xlat51;
        let x_1467 : vec2<f32> = u_xlat51;
        let x_1469 : vec4<f32> = u_xlat8;
        let x_1471 : vec2<f32> = ((-(x_1465) * x_1467) + vec2<f32>(x_1469.y, x_1469.w));
        let x_1472 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1471.x, x_1472.y, x_1471.y);
        let x_1474 : vec4<f32> = u_xlat9;
        let x_1476 : vec2<f32> = (vec2<f32>(x_1474.x, x_1474.y) + vec2<f32>(2.0f, 2.0f));
        let x_1477 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1476.x, x_1476.y, x_1477.z, x_1477.w);
        let x_1479 : vec3<f32> = u_xlat29;
        let x_1481 : vec2<f32> = (vec2<f32>(x_1479.x, x_1479.z) + vec2<f32>(2.0f, 2.0f));
        let x_1482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1482.x, x_1481.x, x_1482.z, x_1481.y);
        let x_1485 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1485 * 0.081632003f);
        let x_1489 : vec4<f32> = u_xlat8;
        let x_1492 : vec3<f32> = (vec3<f32>(x_1489.z, x_1489.x, x_1489.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1493 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1492.x, x_1492.y, x_1492.z, x_1493.w);
        let x_1495 : vec4<f32> = u_xlat9;
        let x_1498 : vec2<f32> = (vec2<f32>(x_1495.x, x_1495.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1498.x, x_1498.y, x_1499.z, x_1499.w);
        let x_1502 : f32 = u_xlat12.y;
        u_xlat11.x = x_1502;
        let x_1504 : vec2<f32> = u_xlat48;
        let x_1511 : vec2<f32> = ((vec2<f32>(x_1504.x, x_1504.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1512 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1512.x, x_1511.x, x_1512.z, x_1511.y);
        let x_1514 : vec2<f32> = u_xlat48;
        let x_1518 : vec2<f32> = ((vec2<f32>(x_1514.x, x_1514.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1519 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1518.x, x_1519.y, x_1518.y, x_1519.w);
        let x_1522 : f32 = u_xlat8.x;
        u_xlat9.y = x_1522;
        let x_1525 : f32 = u_xlat10.y;
        u_xlat9.w = x_1525;
        let x_1527 : vec4<f32> = u_xlat9;
        let x_1528 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1527 + x_1528);
        let x_1530 : vec2<f32> = u_xlat48;
        let x_1533 : vec2<f32> = ((vec2<f32>(x_1530.y, x_1530.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1534 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1534.x, x_1533.x, x_1534.z, x_1533.y);
        let x_1536 : vec2<f32> = u_xlat48;
        let x_1539 : vec2<f32> = ((vec2<f32>(x_1536.y, x_1536.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1540 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1539.x, x_1540.y, x_1539.y, x_1540.w);
        let x_1543 : f32 = u_xlat8.y;
        u_xlat10.y = x_1543;
        let x_1545 : vec4<f32> = u_xlat10;
        let x_1546 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1545 + x_1546);
        let x_1548 : vec4<f32> = u_xlat9;
        let x_1549 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1548 / x_1549);
        let x_1551 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1551 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1557 : vec4<f32> = u_xlat10;
        let x_1558 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1557 / x_1558);
        let x_1560 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1560 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1562 : vec4<f32> = u_xlat9;
        let x_1565 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1562.w, x_1562.x, x_1562.y, x_1562.z) * vec4<f32>(x_1565.x, x_1565.x, x_1565.x, x_1565.x));
        let x_1568 : vec4<f32> = u_xlat10;
        let x_1571 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1568.x, x_1568.w, x_1568.y, x_1568.z) * vec4<f32>(x_1571.y, x_1571.y, x_1571.y, x_1571.y));
        let x_1574 : vec4<f32> = u_xlat9;
        let x_1575 : vec3<f32> = vec3<f32>(x_1574.y, x_1574.z, x_1574.w);
        let x_1576 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1575.x, x_1576.y, x_1575.y, x_1575.z);
        let x_1579 : f32 = u_xlat10.x;
        u_xlat12.y = x_1579;
        let x_1581 : vec4<f32> = u_xlat6;
        let x_1584 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1587 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1581.x, x_1581.y, x_1581.x, x_1581.y) * vec4<f32>(x_1584.x, x_1584.y, x_1584.x, x_1584.y)) + vec4<f32>(x_1587.x, x_1587.y, x_1587.z, x_1587.y));
        let x_1590 : vec4<f32> = u_xlat6;
        let x_1593 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1596 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1590.x, x_1590.y) * vec2<f32>(x_1593.x, x_1593.y)) + vec2<f32>(x_1596.w, x_1596.y));
        let x_1600 : f32 = u_xlat12.y;
        u_xlat9.y = x_1600;
        let x_1603 : f32 = u_xlat10.z;
        u_xlat12.y = x_1603;
        let x_1605 : vec4<f32> = u_xlat6;
        let x_1608 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1611 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1605.x, x_1605.y, x_1605.x, x_1605.y) * vec4<f32>(x_1608.x, x_1608.y, x_1608.x, x_1608.y)) + vec4<f32>(x_1611.x, x_1611.y, x_1611.z, x_1611.y));
        let x_1614 : vec4<f32> = u_xlat6;
        let x_1617 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1620 : vec4<f32> = u_xlat12;
        let x_1622 : vec2<f32> = ((vec2<f32>(x_1614.x, x_1614.y) * vec2<f32>(x_1617.x, x_1617.y)) + vec2<f32>(x_1620.w, x_1620.y));
        let x_1623 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1622.x, x_1622.y, x_1623.z, x_1623.w);
        let x_1626 : f32 = u_xlat12.y;
        u_xlat9.z = x_1626;
        let x_1629 : vec4<f32> = u_xlat6;
        let x_1632 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1635 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1629.x, x_1629.y, x_1629.x, x_1629.y) * vec4<f32>(x_1632.x, x_1632.y, x_1632.x, x_1632.y)) + vec4<f32>(x_1635.x, x_1635.y, x_1635.x, x_1635.z));
        let x_1639 : f32 = u_xlat10.w;
        u_xlat12.y = x_1639;
        let x_1642 : vec4<f32> = u_xlat6;
        let x_1645 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1648 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1642.x, x_1642.y, x_1642.x, x_1642.y) * vec4<f32>(x_1645.x, x_1645.y, x_1645.x, x_1645.y)) + vec4<f32>(x_1648.x, x_1648.y, x_1648.z, x_1648.y));
        let x_1652 : vec4<f32> = u_xlat6;
        let x_1655 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1658 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1652.x, x_1652.y) * vec2<f32>(x_1655.x, x_1655.y)) + vec2<f32>(x_1658.w, x_1658.y));
        let x_1662 : f32 = u_xlat12.y;
        u_xlat9.w = x_1662;
        let x_1665 : vec4<f32> = u_xlat6;
        let x_1668 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1671 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1665.x, x_1665.y) * vec2<f32>(x_1668.x, x_1668.y)) + vec2<f32>(x_1671.x, x_1671.w));
        let x_1674 : vec4<f32> = u_xlat12;
        let x_1675 : vec3<f32> = vec3<f32>(x_1674.x, x_1674.z, x_1674.w);
        let x_1676 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1675.x, x_1676.y, x_1675.y, x_1675.z);
        let x_1678 : vec4<f32> = u_xlat6;
        let x_1681 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1684 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1678.x, x_1678.y, x_1678.x, x_1678.y) * vec4<f32>(x_1681.x, x_1681.y, x_1681.x, x_1681.y)) + vec4<f32>(x_1684.x, x_1684.y, x_1684.z, x_1684.y));
        let x_1688 : vec4<f32> = u_xlat6;
        let x_1691 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1694 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1688.x, x_1688.y) * vec2<f32>(x_1691.x, x_1691.y)) + vec2<f32>(x_1694.w, x_1694.y));
        let x_1698 : f32 = u_xlat9.x;
        u_xlat10.x = x_1698;
        let x_1700 : vec4<f32> = u_xlat6;
        let x_1703 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1706 : vec4<f32> = u_xlat10;
        let x_1708 : vec2<f32> = ((vec2<f32>(x_1700.x, x_1700.y) * vec2<f32>(x_1703.x, x_1703.y)) + vec2<f32>(x_1706.x, x_1706.y));
        let x_1709 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1708.x, x_1708.y, x_1709.z, x_1709.w);
        let x_1712 : vec4<f32> = u_xlat8;
        let x_1714 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1712.x, x_1712.x, x_1712.x, x_1712.x) * x_1714);
        let x_1717 : vec4<f32> = u_xlat8;
        let x_1719 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1717.y, x_1717.y, x_1717.y, x_1717.y) * x_1719);
        let x_1722 : vec4<f32> = u_xlat8;
        let x_1724 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1722.z, x_1722.z, x_1722.z, x_1722.z) * x_1724);
        let x_1726 : vec4<f32> = u_xlat8;
        let x_1728 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1726.w, x_1726.w, x_1726.w, x_1726.w) * x_1728);
        let x_1731 : vec4<f32> = u_xlat13;
        let x_1732 : vec2<f32> = vec2<f32>(x_1731.x, x_1731.y);
        let x_1734 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1732.x, x_1732.y, x_1734);
        let x_1741 : vec3<f32> = txVec13;
        let x_1743 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1741.xy, x_1741.z);
        u_xlat70 = x_1743;
        let x_1745 : vec4<f32> = u_xlat13;
        let x_1746 : vec2<f32> = vec2<f32>(x_1745.z, x_1745.w);
        let x_1748 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1746.x, x_1746.y, x_1748);
        let x_1755 : vec3<f32> = txVec14;
        let x_1757 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1755.xy, x_1755.z);
        u_xlat9.x = x_1757;
        let x_1760 : f32 = u_xlat9.x;
        let x_1762 : f32 = u_xlat18.y;
        u_xlat9.x = (x_1760 * x_1762);
        let x_1766 : f32 = u_xlat18.x;
        let x_1767 : f32 = u_xlat70;
        let x_1770 : f32 = u_xlat9.x;
        u_xlat70 = ((x_1766 * x_1767) + x_1770);
        let x_1773 : vec2<f32> = u_xlat48;
        let x_1775 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1773.x, x_1773.y, x_1775);
        let x_1782 : vec3<f32> = txVec15;
        let x_1784 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1782.xy, x_1782.z);
        u_xlat48.x = x_1784;
        let x_1787 : f32 = u_xlat18.z;
        let x_1789 : f32 = u_xlat48.x;
        let x_1791 : f32 = u_xlat70;
        u_xlat48.x = ((x_1787 * x_1789) + x_1791);
        let x_1795 : vec4<f32> = u_xlat16;
        let x_1796 : vec2<f32> = vec2<f32>(x_1795.x, x_1795.y);
        let x_1798 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1796.x, x_1796.y, x_1798);
        let x_1806 : vec3<f32> = txVec16;
        let x_1808 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1806.xy, x_1806.z);
        u_xlat69 = x_1808;
        let x_1810 : f32 = u_xlat18.w;
        let x_1811 : f32 = u_xlat69;
        let x_1814 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1810 * x_1811) + x_1814);
        let x_1818 : vec4<f32> = u_xlat14;
        let x_1819 : vec2<f32> = vec2<f32>(x_1818.x, x_1818.y);
        let x_1821 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1819.x, x_1819.y, x_1821);
        let x_1828 : vec3<f32> = txVec17;
        let x_1830 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1828.xy, x_1828.z);
        u_xlat69 = x_1830;
        let x_1832 : f32 = u_xlat19.x;
        let x_1833 : f32 = u_xlat69;
        let x_1836 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1832 * x_1833) + x_1836);
        let x_1840 : vec4<f32> = u_xlat14;
        let x_1841 : vec2<f32> = vec2<f32>(x_1840.z, x_1840.w);
        let x_1843 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1841.x, x_1841.y, x_1843);
        let x_1850 : vec3<f32> = txVec18;
        let x_1852 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1850.xy, x_1850.z);
        u_xlat69 = x_1852;
        let x_1854 : f32 = u_xlat19.y;
        let x_1855 : f32 = u_xlat69;
        let x_1858 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1854 * x_1855) + x_1858);
        let x_1862 : vec4<f32> = u_xlat15;
        let x_1863 : vec2<f32> = vec2<f32>(x_1862.x, x_1862.y);
        let x_1865 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1863.x, x_1863.y, x_1865);
        let x_1872 : vec3<f32> = txVec19;
        let x_1874 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1872.xy, x_1872.z);
        u_xlat69 = x_1874;
        let x_1876 : f32 = u_xlat19.z;
        let x_1877 : f32 = u_xlat69;
        let x_1880 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1876 * x_1877) + x_1880);
        let x_1884 : vec4<f32> = u_xlat16;
        let x_1885 : vec2<f32> = vec2<f32>(x_1884.z, x_1884.w);
        let x_1887 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1885.x, x_1885.y, x_1887);
        let x_1894 : vec3<f32> = txVec20;
        let x_1896 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1894.xy, x_1894.z);
        u_xlat69 = x_1896;
        let x_1898 : f32 = u_xlat19.w;
        let x_1899 : f32 = u_xlat69;
        let x_1902 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1898 * x_1899) + x_1902);
        let x_1906 : vec4<f32> = u_xlat17;
        let x_1907 : vec2<f32> = vec2<f32>(x_1906.x, x_1906.y);
        let x_1909 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1907.x, x_1907.y, x_1909);
        let x_1916 : vec3<f32> = txVec21;
        let x_1918 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1916.xy, x_1916.z);
        u_xlat69 = x_1918;
        let x_1920 : f32 = u_xlat20.x;
        let x_1921 : f32 = u_xlat69;
        let x_1924 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1920 * x_1921) + x_1924);
        let x_1928 : vec4<f32> = u_xlat17;
        let x_1929 : vec2<f32> = vec2<f32>(x_1928.z, x_1928.w);
        let x_1931 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1929.x, x_1929.y, x_1931);
        let x_1938 : vec3<f32> = txVec22;
        let x_1940 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1938.xy, x_1938.z);
        u_xlat69 = x_1940;
        let x_1942 : f32 = u_xlat20.y;
        let x_1943 : f32 = u_xlat69;
        let x_1946 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1942 * x_1943) + x_1946);
        let x_1950 : vec2<f32> = u_xlat30;
        let x_1952 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1950.x, x_1950.y, x_1952);
        let x_1959 : vec3<f32> = txVec23;
        let x_1961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1959.xy, x_1959.z);
        u_xlat69 = x_1961;
        let x_1963 : f32 = u_xlat20.z;
        let x_1964 : f32 = u_xlat69;
        let x_1967 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1963 * x_1964) + x_1967);
        let x_1971 : vec2<f32> = u_xlat57;
        let x_1973 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1971.x, x_1971.y, x_1973);
        let x_1980 : vec3<f32> = txVec24;
        let x_1982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1980.xy, x_1980.z);
        u_xlat69 = x_1982;
        let x_1984 : f32 = u_xlat20.w;
        let x_1985 : f32 = u_xlat69;
        let x_1988 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1984 * x_1985) + x_1988);
        let x_1992 : vec4<f32> = u_xlat12;
        let x_1993 : vec2<f32> = vec2<f32>(x_1992.x, x_1992.y);
        let x_1995 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1993.x, x_1993.y, x_1995);
        let x_2002 : vec3<f32> = txVec25;
        let x_2004 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2002.xy, x_2002.z);
        u_xlat69 = x_2004;
        let x_2006 : f32 = u_xlat8.x;
        let x_2007 : f32 = u_xlat69;
        let x_2010 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2006 * x_2007) + x_2010);
        let x_2014 : vec4<f32> = u_xlat12;
        let x_2015 : vec2<f32> = vec2<f32>(x_2014.z, x_2014.w);
        let x_2017 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_2015.x, x_2015.y, x_2017);
        let x_2024 : vec3<f32> = txVec26;
        let x_2026 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2024.xy, x_2024.z);
        u_xlat69 = x_2026;
        let x_2028 : f32 = u_xlat8.y;
        let x_2029 : f32 = u_xlat69;
        let x_2032 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2028 * x_2029) + x_2032);
        let x_2036 : vec2<f32> = u_xlat52;
        let x_2038 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_2036.x, x_2036.y, x_2038);
        let x_2045 : vec3<f32> = txVec27;
        let x_2047 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2045.xy, x_2045.z);
        u_xlat69 = x_2047;
        let x_2049 : f32 = u_xlat8.z;
        let x_2050 : f32 = u_xlat69;
        let x_2053 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2049 * x_2050) + x_2053);
        let x_2057 : vec4<f32> = u_xlat6;
        let x_2058 : vec2<f32> = vec2<f32>(x_2057.x, x_2057.y);
        let x_2060 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_2058.x, x_2058.y, x_2060);
        let x_2067 : vec3<f32> = txVec28;
        let x_2069 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2067.xy, x_2067.z);
        u_xlat6.x = x_2069;
        let x_2072 : f32 = u_xlat8.w;
        let x_2074 : f32 = u_xlat6.x;
        let x_2077 : f32 = u_xlat48.x;
        u_xlat67 = ((x_2072 * x_2074) + x_2077);
      }
    }
  } else {
    let x_2081 : vec4<f32> = u_xlat4;
    let x_2082 : vec2<f32> = vec2<f32>(x_2081.x, x_2081.y);
    let x_2084 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_2082.x, x_2082.y, x_2084);
    let x_2091 : vec3<f32> = txVec29;
    let x_2093 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2091.xy, x_2091.z);
    u_xlat67 = x_2093;
  }
  let x_2095 : f32 = x_423.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_2095) + 1.0f);
  let x_2099 : f32 = u_xlat67;
  let x_2101 : f32 = x_423.x_MainLightShadowParams.x;
  let x_2104 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2099 * x_2101) + x_2104);
  let x_2109 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_2109);
  let x_2113 : f32 = u_xlat4.z;
  u_xlatb46 = (x_2113 >= 1.0f);
  let x_2115 : bool = u_xlatb46;
  let x_2116 : bool = u_xlatb25;
  u_xlatb25 = (x_2115 | x_2116);
  let x_2118 : bool = u_xlatb25;
  if (x_2118) {
    x_2119 = 1.0f;
  } else {
    let x_2124 : f32 = u_xlat4.x;
    x_2119 = x_2124;
  }
  let x_2125 : f32 = x_2119;
  u_xlat4.x = x_2125;
  let x_2128 : vec3<f32> = vs_INTERP0;
  let x_2130 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat25 = (x_2128 + -(x_2130));
  let x_2133 : vec3<f32> = u_xlat25;
  let x_2134 : vec3<f32> = u_xlat25;
  u_xlat25.x = dot(x_2133, x_2134);
  let x_2138 : f32 = u_xlat25.x;
  let x_2140 : f32 = x_423.x_MainLightShadowParams.z;
  let x_2143 : f32 = x_423.x_MainLightShadowParams.w;
  u_xlat25.x = ((x_2138 * x_2140) + x_2143);
  let x_2147 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_2147, 0.0f, 1.0f);
  let x_2152 : f32 = u_xlat4.x;
  u_xlat46 = (-(x_2152) + 1.0f);
  let x_2156 : f32 = u_xlat25.x;
  let x_2157 : f32 = u_xlat46;
  let x_2160 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2156 * x_2157) + x_2160);
  let x_2163 : f32 = u_xlat68;
  let x_2166 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_2163, x_2163, x_2163) * vec3<f32>(x_2166.x, x_2166.y, x_2166.z));
  let x_2169 : vec3<f32> = u_xlat22;
  let x_2171 : vec4<f32> = u_xlat3;
  u_xlat6.x = dot(-(x_2169), vec3<f32>(x_2171.x, x_2171.y, x_2171.z));
  let x_2176 : f32 = u_xlat6.x;
  let x_2178 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2176 + x_2178);
  let x_2181 : vec4<f32> = u_xlat3;
  let x_2183 : vec4<f32> = u_xlat6;
  let x_2187 : vec3<f32> = u_xlat22;
  let x_2189 : vec3<f32> = ((vec3<f32>(x_2181.x, x_2181.y, x_2181.z) * -(vec3<f32>(x_2183.x, x_2183.x, x_2183.x))) + -(x_2187));
  let x_2190 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2189.x, x_2189.y, x_2189.z, x_2190.w);
  let x_2192 : vec4<f32> = u_xlat3;
  let x_2194 : vec3<f32> = u_xlat22;
  u_xlat69 = dot(vec3<f32>(x_2192.x, x_2192.y, x_2192.z), x_2194);
  let x_2196 : f32 = u_xlat69;
  u_xlat69 = clamp(x_2196, 0.0f, 1.0f);
  let x_2198 : f32 = u_xlat69;
  u_xlat69 = (-(x_2198) + 1.0f);
  let x_2201 : f32 = u_xlat69;
  let x_2202 : f32 = u_xlat69;
  u_xlat69 = (x_2201 * x_2202);
  let x_2204 : f32 = u_xlat69;
  let x_2205 : f32 = u_xlat69;
  u_xlat69 = (x_2204 * x_2205);
  let x_2208 : f32 = u_xlat0.x;
  u_xlat70 = ((-(x_2208) * 0.699999988f) + 1.700000048f);
  let x_2215 : f32 = u_xlat0.x;
  let x_2216 : f32 = u_xlat70;
  u_xlat0.x = (x_2215 * x_2216);
  let x_2220 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2220 * 6.0f);
  let x_2232 : vec4<f32> = u_xlat6;
  let x_2235 : f32 = u_xlat0.x;
  let x_2236 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2232.x, x_2232.y, x_2232.z), x_2235);
  u_xlat8 = x_2236;
  let x_2238 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2238 + -1.0f);
  let x_2242 : f32 = x_289.unity_SpecCube0_HDR.w;
  let x_2244 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2242 * x_2244) + 1.0f);
  let x_2249 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2249, 0.0f);
  let x_2253 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2253);
  let x_2257 : f32 = u_xlat0.x;
  let x_2259 : f32 = x_289.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2257 * x_2259);
  let x_2263 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2263);
  let x_2267 : f32 = u_xlat0.x;
  let x_2269 : f32 = x_289.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2267 * x_2269);
  let x_2272 : vec4<f32> = u_xlat8;
  let x_2274 : vec4<f32> = u_xlat0;
  let x_2276 : vec3<f32> = (vec3<f32>(x_2272.x, x_2272.y, x_2272.z) * vec3<f32>(x_2274.x, x_2274.x, x_2274.x));
  let x_2277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2276.x, x_2276.y, x_2276.z, x_2277.w);
  let x_2279 : f32 = u_xlat42;
  let x_2281 : f32 = u_xlat42;
  let x_2285 : vec2<f32> = ((vec2<f32>(x_2279, x_2279) * vec2<f32>(x_2281, x_2281)) + vec2<f32>(-1.0f, 1.0f));
  let x_2286 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2285.x, x_2286.y, x_2285.y, x_2286.w);
  let x_2289 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2289);
  let x_2291 : vec3<f32> = u_xlat2;
  let x_2293 : vec4<f32> = u_xlat1;
  let x_2295 : vec3<f32> = (-(x_2291) + vec3<f32>(x_2293.x, x_2293.x, x_2293.x));
  let x_2296 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2295.x, x_2295.y, x_2295.z, x_2296.w);
  let x_2298 : f32 = u_xlat69;
  let x_2300 : vec4<f32> = u_xlat8;
  let x_2303 : vec3<f32> = u_xlat2;
  let x_2304 : vec3<f32> = ((vec3<f32>(x_2298, x_2298, x_2298) * vec3<f32>(x_2300.x, x_2300.y, x_2300.z)) + x_2303);
  let x_2305 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2304.x, x_2304.y, x_2304.z, x_2305.w);
  let x_2307 : f32 = u_xlat42;
  let x_2309 : vec4<f32> = u_xlat8;
  let x_2311 : vec3<f32> = (vec3<f32>(x_2307, x_2307, x_2307) * vec3<f32>(x_2309.x, x_2309.y, x_2309.z));
  let x_2312 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2311.x, x_2311.y, x_2311.z, x_2312.w);
  let x_2314 : vec4<f32> = u_xlat6;
  let x_2316 : vec4<f32> = u_xlat8;
  let x_2318 : vec3<f32> = (vec3<f32>(x_2314.x, x_2314.y, x_2314.z) * vec3<f32>(x_2316.x, x_2316.y, x_2316.z));
  let x_2319 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2318.x, x_2318.y, x_2318.z, x_2319.w);
  let x_2321 : vec4<f32> = u_xlat5;
  let x_2323 : vec3<f32> = u_xlat7;
  let x_2325 : vec4<f32> = u_xlat6;
  let x_2327 : vec3<f32> = ((vec3<f32>(x_2321.x, x_2321.y, x_2321.z) * x_2323) + vec3<f32>(x_2325.x, x_2325.y, x_2325.z));
  let x_2328 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2327.x, x_2327.y, x_2327.z, x_2328.w);
  let x_2331 : f32 = u_xlat4.x;
  let x_2333 : f32 = x_289.unity_LightData.z;
  u_xlat42 = (x_2331 * x_2333);
  let x_2335 : vec4<f32> = u_xlat3;
  let x_2338 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat1.x = dot(vec3<f32>(x_2335.x, x_2335.y, x_2335.z), vec3<f32>(x_2338.x, x_2338.y, x_2338.z));
  let x_2343 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2343, 0.0f, 1.0f);
  let x_2346 : f32 = u_xlat42;
  let x_2348 : f32 = u_xlat1.x;
  u_xlat42 = (x_2346 * x_2348);
  let x_2350 : f32 = u_xlat42;
  let x_2352 : vec3<f32> = u_xlat25;
  let x_2353 : vec3<f32> = (vec3<f32>(x_2350, x_2350, x_2350) * x_2352);
  let x_2354 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2353.x, x_2353.y, x_2353.z, x_2354.w);
  let x_2356 : vec3<f32> = u_xlat22;
  let x_2358 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2360 : vec3<f32> = (x_2356 + vec3<f32>(x_2358.x, x_2358.y, x_2358.z));
  let x_2361 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2360.x, x_2360.y, x_2360.z, x_2361.w);
  let x_2363 : vec4<f32> = u_xlat6;
  let x_2365 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(vec3<f32>(x_2363.x, x_2363.y, x_2363.z), vec3<f32>(x_2365.x, x_2365.y, x_2365.z));
  let x_2368 : f32 = u_xlat42;
  u_xlat42 = max(x_2368, 1.17549435e-37f);
  let x_2371 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2371);
  let x_2373 : f32 = u_xlat42;
  let x_2375 : vec4<f32> = u_xlat6;
  let x_2377 : vec3<f32> = (vec3<f32>(x_2373, x_2373, x_2373) * vec3<f32>(x_2375.x, x_2375.y, x_2375.z));
  let x_2378 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2377.x, x_2377.y, x_2377.z, x_2378.w);
  let x_2380 : vec4<f32> = u_xlat3;
  let x_2382 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(vec3<f32>(x_2380.x, x_2380.y, x_2380.z), vec3<f32>(x_2382.x, x_2382.y, x_2382.z));
  let x_2385 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2385, 0.0f, 1.0f);
  let x_2388 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2390 : vec4<f32> = u_xlat6;
  u_xlat1.x = dot(vec3<f32>(x_2388.x, x_2388.y, x_2388.z), vec3<f32>(x_2390.x, x_2390.y, x_2390.z));
  let x_2395 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2395, 0.0f, 1.0f);
  let x_2398 : f32 = u_xlat42;
  let x_2399 : f32 = u_xlat42;
  u_xlat42 = (x_2398 * x_2399);
  let x_2401 : f32 = u_xlat42;
  let x_2403 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2401 * x_2403) + 1.000010014f);
  let x_2408 : f32 = u_xlat1.x;
  let x_2410 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2408 * x_2410);
  let x_2413 : f32 = u_xlat42;
  let x_2414 : f32 = u_xlat42;
  u_xlat42 = (x_2413 * x_2414);
  let x_2417 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2417, 0.100000001f);
  let x_2421 : f32 = u_xlat42;
  let x_2423 : f32 = u_xlat1.x;
  u_xlat42 = (x_2421 * x_2423);
  let x_2425 : f32 = u_xlat65;
  let x_2426 : f32 = u_xlat42;
  u_xlat42 = (x_2425 * x_2426);
  let x_2428 : f32 = u_xlat66;
  let x_2429 : f32 = u_xlat42;
  u_xlat42 = (x_2428 / x_2429);
  let x_2431 : vec3<f32> = u_xlat2;
  let x_2432 : f32 = u_xlat42;
  let x_2435 : vec3<f32> = u_xlat7;
  let x_2436 : vec3<f32> = ((x_2431 * vec3<f32>(x_2432, x_2432, x_2432)) + x_2435);
  let x_2437 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2436.x, x_2436.y, x_2436.z, x_2437.w);
  let x_2439 : vec4<f32> = u_xlat4;
  let x_2441 : vec4<f32> = u_xlat6;
  let x_2443 : vec3<f32> = (vec3<f32>(x_2439.x, x_2439.y, x_2439.z) * vec3<f32>(x_2441.x, x_2441.y, x_2441.z));
  let x_2444 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2443.x, x_2443.y, x_2443.z, x_2444.w);
  let x_2447 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2449 : f32 = x_289.unity_LightData.y;
  u_xlat42 = min(x_2447, x_2449);
  let x_2452 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2452));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2464 : u32 = u_xlatu_loop_1;
    let x_2465 : u32 = u_xlatu42;
    if ((x_2464 < x_2465)) {
    } else {
      break;
    }
    let x_2468 : u32 = u_xlatu_loop_1;
    u_xlatu67 = (x_2468 >> 2u);
    let x_2471 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2471 & 3u));
    let x_2474 : u32 = u_xlatu67;
    let x_2477 : vec4<f32> = x_289.unity_LightIndices[bitcast<i32>(x_2474)];
    let x_2487 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2492 : vec4<u32> = indexable[x_2487];
    u_xlat67 = dot(x_2477, bitcast<vec4<f32>>(x_2492));
    let x_2496 : f32 = u_xlat67;
    u_xlati67 = i32(x_2496);
    let x_2498 : vec3<f32> = vs_INTERP0;
    let x_2510 : i32 = u_xlati67;
    let x_2512 : vec4<f32> = x_2509.x_AdditionalLightsPosition[x_2510];
    let x_2515 : i32 = u_xlati67;
    let x_2517 : vec4<f32> = x_2509.x_AdditionalLightsPosition[x_2515];
    let x_2519 : vec3<f32> = ((-(x_2498) * vec3<f32>(x_2512.w, x_2512.w, x_2512.w)) + vec3<f32>(x_2517.x, x_2517.y, x_2517.z));
    let x_2520 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2519.x, x_2519.y, x_2519.z, x_2520.w);
    let x_2522 : vec4<f32> = u_xlat8;
    let x_2524 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2522.x, x_2522.y, x_2522.z), vec3<f32>(x_2524.x, x_2524.y, x_2524.z));
    let x_2527 : f32 = u_xlat69;
    u_xlat69 = max(x_2527, 6.10351562e-05f);
    let x_2530 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2530);
    let x_2532 : f32 = u_xlat70;
    let x_2534 : vec4<f32> = u_xlat8;
    let x_2536 : vec3<f32> = (vec3<f32>(x_2532, x_2532, x_2532) * vec3<f32>(x_2534.x, x_2534.y, x_2534.z));
    let x_2537 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2536.x, x_2536.y, x_2536.z, x_2537.w);
    let x_2540 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2540);
    let x_2542 : f32 = u_xlat69;
    let x_2543 : i32 = u_xlati67;
    let x_2545 : f32 = x_2509.x_AdditionalLightsAttenuation[x_2543].x;
    u_xlat69 = (x_2542 * x_2545);
    let x_2547 : f32 = u_xlat69;
    let x_2549 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2547) * x_2549) + 1.0f);
    let x_2552 : f32 = u_xlat69;
    u_xlat69 = max(x_2552, 0.0f);
    let x_2554 : f32 = u_xlat69;
    let x_2555 : f32 = u_xlat69;
    u_xlat69 = (x_2554 * x_2555);
    let x_2557 : f32 = u_xlat69;
    let x_2558 : f32 = u_xlat71;
    u_xlat69 = (x_2557 * x_2558);
    let x_2560 : i32 = u_xlati67;
    let x_2562 : vec4<f32> = x_2509.x_AdditionalLightsSpotDir[x_2560];
    let x_2564 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2562.x, x_2562.y, x_2562.z), vec3<f32>(x_2564.x, x_2564.y, x_2564.z));
    let x_2567 : f32 = u_xlat71;
    let x_2568 : i32 = u_xlati67;
    let x_2570 : f32 = x_2509.x_AdditionalLightsAttenuation[x_2568].z;
    let x_2572 : i32 = u_xlati67;
    let x_2574 : f32 = x_2509.x_AdditionalLightsAttenuation[x_2572].w;
    u_xlat71 = ((x_2567 * x_2570) + x_2574);
    let x_2576 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2576, 0.0f, 1.0f);
    let x_2578 : f32 = u_xlat71;
    let x_2579 : f32 = u_xlat71;
    u_xlat71 = (x_2578 * x_2579);
    let x_2581 : f32 = u_xlat69;
    let x_2582 : f32 = u_xlat71;
    u_xlat69 = (x_2581 * x_2582);
    let x_2584 : f32 = u_xlat68;
    let x_2586 : i32 = u_xlati67;
    let x_2588 : vec4<f32> = x_2509.x_AdditionalLightsColor[x_2586];
    let x_2590 : vec3<f32> = (vec3<f32>(x_2584, x_2584, x_2584) * vec3<f32>(x_2588.x, x_2588.y, x_2588.z));
    let x_2591 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2590.x, x_2590.y, x_2590.z, x_2591.w);
    let x_2593 : vec4<f32> = u_xlat3;
    let x_2595 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_2593.x, x_2593.y, x_2593.z), vec3<f32>(x_2595.x, x_2595.y, x_2595.z));
    let x_2598 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2598, 0.0f, 1.0f);
    let x_2600 : f32 = u_xlat67;
    let x_2601 : f32 = u_xlat69;
    u_xlat67 = (x_2600 * x_2601);
    let x_2603 : f32 = u_xlat67;
    let x_2605 : vec4<f32> = u_xlat10;
    let x_2607 : vec3<f32> = (vec3<f32>(x_2603, x_2603, x_2603) * vec3<f32>(x_2605.x, x_2605.y, x_2605.z));
    let x_2608 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2607.x, x_2607.y, x_2607.z, x_2608.w);
    let x_2610 : vec4<f32> = u_xlat8;
    let x_2612 : f32 = u_xlat70;
    let x_2615 : vec3<f32> = u_xlat22;
    let x_2616 : vec3<f32> = ((vec3<f32>(x_2610.x, x_2610.y, x_2610.z) * vec3<f32>(x_2612, x_2612, x_2612)) + x_2615);
    let x_2617 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2616.x, x_2616.y, x_2616.z, x_2617.w);
    let x_2619 : vec4<f32> = u_xlat8;
    let x_2621 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2619.x, x_2619.y, x_2619.z), vec3<f32>(x_2621.x, x_2621.y, x_2621.z));
    let x_2624 : f32 = u_xlat67;
    u_xlat67 = max(x_2624, 1.17549435e-37f);
    let x_2626 : f32 = u_xlat67;
    u_xlat67 = inverseSqrt(x_2626);
    let x_2628 : f32 = u_xlat67;
    let x_2630 : vec4<f32> = u_xlat8;
    let x_2632 : vec3<f32> = (vec3<f32>(x_2628, x_2628, x_2628) * vec3<f32>(x_2630.x, x_2630.y, x_2630.z));
    let x_2633 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2632.x, x_2632.y, x_2632.z, x_2633.w);
    let x_2635 : vec4<f32> = u_xlat3;
    let x_2637 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2635.x, x_2635.y, x_2635.z), vec3<f32>(x_2637.x, x_2637.y, x_2637.z));
    let x_2640 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2640, 0.0f, 1.0f);
    let x_2642 : vec4<f32> = u_xlat9;
    let x_2644 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2642.x, x_2642.y, x_2642.z), vec3<f32>(x_2644.x, x_2644.y, x_2644.z));
    let x_2647 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2647, 0.0f, 1.0f);
    let x_2649 : f32 = u_xlat67;
    let x_2650 : f32 = u_xlat67;
    u_xlat67 = (x_2649 * x_2650);
    let x_2652 : f32 = u_xlat67;
    let x_2654 : f32 = u_xlat0.x;
    u_xlat67 = ((x_2652 * x_2654) + 1.000010014f);
    let x_2657 : f32 = u_xlat69;
    let x_2658 : f32 = u_xlat69;
    u_xlat69 = (x_2657 * x_2658);
    let x_2660 : f32 = u_xlat67;
    let x_2661 : f32 = u_xlat67;
    u_xlat67 = (x_2660 * x_2661);
    let x_2663 : f32 = u_xlat69;
    u_xlat69 = max(x_2663, 0.100000001f);
    let x_2665 : f32 = u_xlat67;
    let x_2666 : f32 = u_xlat69;
    u_xlat67 = (x_2665 * x_2666);
    let x_2668 : f32 = u_xlat65;
    let x_2669 : f32 = u_xlat67;
    u_xlat67 = (x_2668 * x_2669);
    let x_2671 : f32 = u_xlat66;
    let x_2672 : f32 = u_xlat67;
    u_xlat67 = (x_2671 / x_2672);
    let x_2674 : vec3<f32> = u_xlat2;
    let x_2675 : f32 = u_xlat67;
    let x_2678 : vec3<f32> = u_xlat7;
    let x_2679 : vec3<f32> = ((x_2674 * vec3<f32>(x_2675, x_2675, x_2675)) + x_2678);
    let x_2680 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2679.x, x_2679.y, x_2679.z, x_2680.w);
    let x_2682 : vec4<f32> = u_xlat8;
    let x_2684 : vec4<f32> = u_xlat10;
    let x_2687 : vec4<f32> = u_xlat6;
    let x_2689 : vec3<f32> = ((vec3<f32>(x_2682.x, x_2682.y, x_2682.z) * vec3<f32>(x_2684.x, x_2684.y, x_2684.z)) + vec3<f32>(x_2687.x, x_2687.y, x_2687.z));
    let x_2690 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2689.x, x_2689.y, x_2689.z, x_2690.w);

    continuing {
      let x_2692 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2692 + bitcast<u32>(1i));
    }
  }
  let x_2694 : vec4<f32> = u_xlat5;
  let x_2696 : f32 = u_xlat63;
  let x_2699 : vec4<f32> = u_xlat4;
  let x_2701 : vec3<f32> = ((vec3<f32>(x_2694.x, x_2694.y, x_2694.z) * vec3<f32>(x_2696, x_2696, x_2696)) + vec3<f32>(x_2699.x, x_2699.y, x_2699.z));
  let x_2702 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2701.x, x_2702.y, x_2701.y, x_2701.z);
  let x_2704 : vec4<f32> = u_xlat6;
  let x_2706 : vec4<f32> = u_xlat0;
  let x_2708 : vec3<f32> = (vec3<f32>(x_2704.x, x_2704.y, x_2704.z) + vec3<f32>(x_2706.x, x_2706.z, x_2706.w));
  let x_2709 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2708.x, x_2709.y, x_2708.y, x_2708.z);
  let x_2712 : f32 = u_xlat21.x;
  let x_2714 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2712 * -(x_2714));
  let x_2719 : f32 = u_xlat21.x;
  u_xlat21.x = exp2(x_2719);
  let x_2722 : vec4<f32> = u_xlat0;
  let x_2726 : vec4<f32> = x_44.unity_FogColor;
  let x_2729 : vec3<f32> = (vec3<f32>(x_2722.x, x_2722.z, x_2722.w) + -(vec3<f32>(x_2726.x, x_2726.y, x_2726.z)));
  let x_2730 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2729.x, x_2730.y, x_2729.y, x_2729.z);
  let x_2734 : vec2<f32> = u_xlat21;
  let x_2736 : vec4<f32> = u_xlat0;
  let x_2740 : vec4<f32> = x_44.unity_FogColor;
  let x_2742 : vec3<f32> = ((vec3<f32>(x_2734.x, x_2734.x, x_2734.x) * vec3<f32>(x_2736.x, x_2736.z, x_2736.w)) + vec3<f32>(x_2740.x, x_2740.y, x_2740.z));
  let x_2743 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2742.x, x_2742.y, x_2742.z, x_2743.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0);
}

