type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(6) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3206 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3709 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3818 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1592 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat44 : f32;
  var x_1637 : f32;
  var x_1716 : f32;
  var x_1728 : f32;
  var x_1739 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3154 : f32;
  var x_3273 : f32;
  var x_3285 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu48 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4111 : f32;
  var x_4124 : f32;
  var x_4176 : f32;
  var x_4187 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat29 = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1108 : f32 = u_xlat11.y;
        u_xlat8.w = x_1108;
        let x_1111 : vec4<f32> = u_xlat3;
        let x_1114 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1117 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(x_1114.x, x_1114.y)) + vec2<f32>(x_1117.x, x_1117.w));
        let x_1120 : vec4<f32> = u_xlat11;
        let x_1121 : vec3<f32> = vec3<f32>(x_1120.x, x_1120.z, x_1120.w);
        let x_1122 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1121.x, x_1122.y, x_1121.y, x_1121.z);
        let x_1124 : vec4<f32> = u_xlat3;
        let x_1127 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1134 : vec4<f32> = u_xlat3;
        let x_1137 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1140 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1134.x, x_1134.y) * vec2<f32>(x_1137.x, x_1137.y)) + vec2<f32>(x_1140.w, x_1140.y));
        let x_1144 : f32 = u_xlat8.x;
        u_xlat9.x = x_1144;
        let x_1146 : vec4<f32> = u_xlat3;
        let x_1149 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1152 : vec4<f32> = u_xlat9;
        let x_1154 : vec2<f32> = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1149.x, x_1149.y)) + vec2<f32>(x_1152.x, x_1152.y));
        let x_1155 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1154.x, x_1154.y, x_1155.z, x_1155.w);
        let x_1158 : vec4<f32> = u_xlat7;
        let x_1160 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1158.x, x_1158.x, x_1158.x, x_1158.x) * x_1160);
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1165 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y) * x_1165);
        let x_1168 : vec4<f32> = u_xlat7;
        let x_1170 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1168.z, x_1168.z, x_1168.z, x_1168.z) * x_1170);
        let x_1172 : vec4<f32> = u_xlat7;
        let x_1174 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1172.w, x_1172.w, x_1172.w, x_1172.w) * x_1174);
        let x_1177 : vec4<f32> = u_xlat12;
        let x_1178 : vec2<f32> = vec2<f32>(x_1177.x, x_1177.y);
        let x_1180 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1178.x, x_1178.y, x_1180);
        let x_1187 : vec3<f32> = txVec13;
        let x_1189 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1187.xy, x_1187.z);
        u_xlat65 = x_1189;
        let x_1191 : vec4<f32> = u_xlat12;
        let x_1192 : vec2<f32> = vec2<f32>(x_1191.z, x_1191.w);
        let x_1194 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1192.x, x_1192.y, x_1194);
        let x_1202 : vec3<f32> = txVec14;
        let x_1204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1202.xy, x_1202.z);
        u_xlat68 = x_1204;
        let x_1205 : f32 = u_xlat68;
        let x_1207 : f32 = u_xlat17.y;
        u_xlat68 = (x_1205 * x_1207);
        let x_1210 : f32 = u_xlat17.x;
        let x_1211 : f32 = u_xlat65;
        let x_1213 : f32 = u_xlat68;
        u_xlat65 = ((x_1210 * x_1211) + x_1213);
        let x_1216 : vec2<f32> = u_xlat45;
        let x_1218 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec15;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat45.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat45.x;
        let x_1234 : f32 = u_xlat65;
        u_xlat65 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat15;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.x, x_1237.y);
        let x_1240 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec16;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat45.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat45.x;
        let x_1256 : f32 = u_xlat65;
        u_xlat65 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat13;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec17;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat45.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat45.x;
        let x_1278 : f32 = u_xlat65;
        u_xlat65 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat13;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec18;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat45.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat45.x;
        let x_1300 : f32 = u_xlat65;
        u_xlat65 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec4<f32> = u_xlat14;
        let x_1304 : vec2<f32> = vec2<f32>(x_1303.x, x_1303.y);
        let x_1306 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1304.x, x_1304.y, x_1306);
        let x_1313 : vec3<f32> = txVec19;
        let x_1315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1313.xy, x_1313.z);
        u_xlat45.x = x_1315;
        let x_1318 : f32 = u_xlat18.z;
        let x_1320 : f32 = u_xlat45.x;
        let x_1322 : f32 = u_xlat65;
        u_xlat65 = ((x_1318 * x_1320) + x_1322);
        let x_1325 : vec4<f32> = u_xlat15;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.z, x_1325.w);
        let x_1328 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec20;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat45.x = x_1337;
        let x_1340 : f32 = u_xlat18.w;
        let x_1342 : f32 = u_xlat45.x;
        let x_1344 : f32 = u_xlat65;
        u_xlat65 = ((x_1340 * x_1342) + x_1344);
        let x_1347 : vec4<f32> = u_xlat16;
        let x_1348 : vec2<f32> = vec2<f32>(x_1347.x, x_1347.y);
        let x_1350 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1348.x, x_1348.y, x_1350);
        let x_1357 : vec3<f32> = txVec21;
        let x_1359 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1357.xy, x_1357.z);
        u_xlat45.x = x_1359;
        let x_1362 : f32 = u_xlat19.x;
        let x_1364 : f32 = u_xlat45.x;
        let x_1366 : f32 = u_xlat65;
        u_xlat65 = ((x_1362 * x_1364) + x_1366);
        let x_1369 : vec4<f32> = u_xlat16;
        let x_1370 : vec2<f32> = vec2<f32>(x_1369.z, x_1369.w);
        let x_1372 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1370.x, x_1370.y, x_1372);
        let x_1379 : vec3<f32> = txVec22;
        let x_1381 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1379.xy, x_1379.z);
        u_xlat45.x = x_1381;
        let x_1384 : f32 = u_xlat19.y;
        let x_1386 : f32 = u_xlat45.x;
        let x_1388 : f32 = u_xlat65;
        u_xlat65 = ((x_1384 * x_1386) + x_1388);
        let x_1391 : vec2<f32> = u_xlat29;
        let x_1393 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec23;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat45.x = x_1402;
        let x_1405 : f32 = u_xlat19.z;
        let x_1407 : f32 = u_xlat45.x;
        let x_1409 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1407) + x_1409);
        let x_1412 : vec2<f32> = u_xlat56;
        let x_1414 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1412.x, x_1412.y, x_1414);
        let x_1421 : vec3<f32> = txVec24;
        let x_1423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1421.xy, x_1421.z);
        u_xlat45.x = x_1423;
        let x_1426 : f32 = u_xlat19.w;
        let x_1428 : f32 = u_xlat45.x;
        let x_1430 : f32 = u_xlat65;
        u_xlat65 = ((x_1426 * x_1428) + x_1430);
        let x_1433 : vec4<f32> = u_xlat11;
        let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
        let x_1436 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
        let x_1443 : vec3<f32> = txVec25;
        let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
        u_xlat45.x = x_1445;
        let x_1448 : f32 = u_xlat7.x;
        let x_1450 : f32 = u_xlat45.x;
        let x_1452 : f32 = u_xlat65;
        u_xlat65 = ((x_1448 * x_1450) + x_1452);
        let x_1455 : vec4<f32> = u_xlat11;
        let x_1456 : vec2<f32> = vec2<f32>(x_1455.z, x_1455.w);
        let x_1458 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1456.x, x_1456.y, x_1458);
        let x_1465 : vec3<f32> = txVec26;
        let x_1467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1465.xy, x_1465.z);
        u_xlat45.x = x_1467;
        let x_1470 : f32 = u_xlat7.y;
        let x_1472 : f32 = u_xlat45.x;
        let x_1474 : f32 = u_xlat65;
        u_xlat65 = ((x_1470 * x_1472) + x_1474);
        let x_1477 : vec2<f32> = u_xlat51;
        let x_1479 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec27;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat45.x = x_1488;
        let x_1491 : f32 = u_xlat7.z;
        let x_1493 : f32 = u_xlat45.x;
        let x_1495 : f32 = u_xlat65;
        u_xlat65 = ((x_1491 * x_1493) + x_1495);
        let x_1498 : vec4<f32> = u_xlat3;
        let x_1499 : vec2<f32> = vec2<f32>(x_1498.x, x_1498.y);
        let x_1501 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1499.x, x_1499.y, x_1501);
        let x_1508 : vec3<f32> = txVec28;
        let x_1510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1508.xy, x_1508.z);
        u_xlat3.x = x_1510;
        let x_1513 : f32 = u_xlat7.w;
        let x_1515 : f32 = u_xlat3.x;
        let x_1517 : f32 = u_xlat65;
        u_xlat64 = ((x_1513 * x_1515) + x_1517);
      }
    }
  } else {
    let x_1521 : vec3<f32> = u_xlat2;
    let x_1522 : vec2<f32> = vec2<f32>(x_1521.x, x_1521.y);
    let x_1524 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1522.x, x_1522.y, x_1524);
    let x_1531 : vec3<f32> = txVec29;
    let x_1533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1531.xy, x_1531.z);
    u_xlat64 = x_1533;
  }
  let x_1535 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1535) + 1.0f);
  let x_1539 : f32 = u_xlat64;
  let x_1541 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1544 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1539 * x_1541) + x_1544);
  let x_1548 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1548);
  let x_1552 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1552 >= 1.0f);
  let x_1554 : bool = u_xlatb44;
  let x_1555 : bool = u_xlatb23;
  u_xlatb23 = (x_1554 | x_1555);
  let x_1557 : bool = u_xlatb23;
  let x_1558 : f32 = u_xlat64;
  u_xlat64 = select(x_1558, 1.0f, x_1557);
  let x_1560 : vec3<f32> = u_xlat1;
  let x_1562 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1560, -(vec3<f32>(x_1562.x, x_1562.y, x_1562.z)));
  let x_1568 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1568, 0.0f, 1.0f);
  let x_1572 : f32 = u_xlat64;
  let x_1576 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1572, x_1572, x_1572) * vec3<f32>(x_1576.x, x_1576.y, x_1576.z));
  let x_1579 : vec3<f32> = u_xlat22;
  let x_1580 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1579 * vec3<f32>(x_1580.x, x_1580.x, x_1580.x));
  let x_1583 : vec3<f32> = u_xlat1;
  let x_1584 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1583 * vec3<f32>(x_1584.x, x_1584.y, x_1584.z));
  let x_1588 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1588 >= 0.400000006f);
  let x_1591 : bool = u_xlatb64;
  if (x_1591) {
    let x_1596 : f32 = u_xlat4.w;
    x_1592 = x_1596;
  } else {
    x_1592 = 0.0f;
  }
  let x_1598 : f32 = x_1592;
  u_xlat64 = x_1598;
  let x_1601 : f32 = u_xlat4.w;
  u_xlat23.x = (x_1601 + -0.400000006f);
  let x_1607 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1607);
  let x_1610 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1610);
  let x_1612 : f32 = u_xlat65;
  let x_1614 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1612) + abs(x_1614));
  let x_1617 : f32 = u_xlat44;
  u_xlat44 = max(x_1617, 0.0001f);
  let x_1621 : f32 = u_xlat23.x;
  let x_1622 : f32 = u_xlat44;
  u_xlat23.x = (x_1621 / x_1622);
  let x_1626 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1626 + 0.5f);
  let x_1630 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1630, 0.0f, 1.0f);
  let x_1634 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1634 == 0.0f));
  let x_1636 : bool = u_xlatb44;
  if (x_1636) {
    let x_1641 : f32 = u_xlat23.x;
    x_1637 = x_1641;
  } else {
    let x_1643 : f32 = u_xlat64;
    x_1637 = x_1643;
  }
  let x_1644 : f32 = x_1637;
  u_xlat64 = x_1644;
  let x_1645 : f32 = u_xlat64;
  u_xlat23.x = (x_1645 + -0.0001f);
  let x_1650 : f32 = u_xlat23.x;
  u_xlatb23 = (x_1650 < 0.0f);
  let x_1652 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1652) * -1i) != 0i)) {
    discard;
  }
  let x_1660 : vec3<f32> = u_xlat21;
  let x_1661 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1660 * vec3<f32>(x_1661.y, x_1661.y, x_1661.y));
  let x_1664 : vec3<f32> = u_xlat27;
  let x_1666 : vec4<f32> = vs_INTERP2;
  let x_1669 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1664.x, x_1664.x, x_1664.x) * vec3<f32>(x_1666.x, x_1666.y, x_1666.z)) + x_1669);
  let x_1671 : vec3<f32> = u_xlat27;
  let x_1673 : vec3<f32> = vs_INTERP1;
  let x_1675 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1671.z, x_1671.z, x_1671.z) * x_1673) + x_1675);
  let x_1677 : vec3<f32> = u_xlat21;
  let x_1678 : vec3<f32> = u_xlat21;
  u_xlat23.x = dot(x_1677, x_1678);
  let x_1682 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1682);
  let x_1685 : vec3<f32> = u_xlat21;
  let x_1686 : vec3<f32> = u_xlat23;
  u_xlat21 = (x_1685 * vec3<f32>(x_1686.x, x_1686.x, x_1686.x));
  let x_1691 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb23 = (x_1691 == 0.0f);
  let x_1693 : vec3<f32> = vs_INTERP0;
  let x_1697 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1698 : vec3<f32> = (-(x_1693) + x_1697);
  let x_1699 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1698.x, x_1698.y, x_1698.z, x_1699.w);
  let x_1701 : vec4<f32> = u_xlat3;
  let x_1703 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_1701.x, x_1701.y, x_1701.z), vec3<f32>(x_1703.x, x_1703.y, x_1703.z));
  let x_1706 : f32 = u_xlat65;
  u_xlat65 = inverseSqrt(x_1706);
  let x_1708 : f32 = u_xlat65;
  let x_1710 : vec4<f32> = u_xlat3;
  let x_1712 : vec3<f32> = (vec3<f32>(x_1708, x_1708, x_1708) * vec3<f32>(x_1710.x, x_1710.y, x_1710.z));
  let x_1713 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1712.x, x_1712.y, x_1712.z, x_1713.w);
  let x_1715 : bool = u_xlatb23;
  if (x_1715) {
    let x_1720 : f32 = u_xlat3.x;
    x_1716 = x_1720;
  } else {
    let x_1724 : f32 = x_137.unity_MatrixV[0i].z;
    x_1716 = x_1724;
  }
  let x_1725 : f32 = x_1716;
  u_xlat4.x = x_1725;
  let x_1727 : bool = u_xlatb23;
  if (x_1727) {
    let x_1732 : f32 = u_xlat3.y;
    x_1728 = x_1732;
  } else {
    let x_1735 : f32 = x_137.unity_MatrixV[1i].z;
    x_1728 = x_1735;
  }
  let x_1736 : f32 = x_1728;
  u_xlat4.y = x_1736;
  let x_1738 : bool = u_xlatb23;
  if (x_1738) {
    let x_1743 : f32 = u_xlat3.z;
    x_1739 = x_1743;
  } else {
    let x_1746 : f32 = x_137.unity_MatrixV[2i].z;
    x_1739 = x_1746;
  }
  let x_1747 : f32 = x_1739;
  u_xlat4.z = x_1747;
  let x_1756 : vec2<f32> = vs_INTERP5;
  let x_1758 : f32 = x_137.x_GlobalMipBias.x;
  let x_1759 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1756, x_1758);
  u_xlat3 = x_1759;
  let x_1764 : vec2<f32> = vs_INTERP5;
  let x_1766 : f32 = x_137.x_GlobalMipBias.x;
  let x_1767 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1764, x_1766);
  u_xlat27 = vec3<f32>(x_1767.x, x_1767.y, x_1767.z);
  let x_1769 : vec4<f32> = u_xlat3;
  let x_1772 : vec3<f32> = (vec3<f32>(x_1769.x, x_1769.y, x_1769.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1773 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1772.x, x_1772.y, x_1772.z, x_1773.w);
  let x_1775 : vec3<f32> = u_xlat21;
  let x_1776 : vec4<f32> = u_xlat3;
  u_xlat23.x = dot(x_1775, vec3<f32>(x_1776.x, x_1776.y, x_1776.z));
  let x_1781 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1781 + 0.5f);
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  let x_1787 : vec3<f32> = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1787.x, x_1787.y, x_1787.z, x_1788.w);
  let x_1791 : f32 = u_xlat3.w;
  u_xlat23.x = max(x_1791, 0.0001f);
  let x_1794 : vec4<f32> = u_xlat3;
  let x_1796 : vec3<f32> = u_xlat23;
  let x_1798 : vec3<f32> = (vec3<f32>(x_1794.x, x_1794.y, x_1794.z) / vec3<f32>(x_1796.x, x_1796.x, x_1796.x));
  let x_1799 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1798.x, x_1798.y, x_1798.z, x_1799.w);
  let x_1802 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1803 : vec2<f32> = vec2<f32>(x_1802.x, x_1802.y);
  let x_1807 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1803.x, x_1803.y));
  let x_1808 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1807.x, x_1808.y, x_1807.y);
  let x_1810 : vec3<f32> = u_xlat23;
  let x_1812 : vec4<f32> = hlslcc_FragCoord;
  let x_1814 : vec2<f32> = (vec2<f32>(x_1810.x, x_1810.z) * vec2<f32>(x_1812.x, x_1812.y));
  let x_1815 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1814.x, x_1814.y, x_1815.z, x_1815.w);
  let x_1818 : f32 = u_xlat7.y;
  let x_1821 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1824 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1818 * x_1821) + x_1824);
  let x_1828 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1828) + 1.0f);
  let x_1833 : f32 = u_xlat6.x;
  u_xlat6.x = x_1833;
  let x_1836 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1836, 0.0f, 1.0f);
  let x_1839 : f32 = u_xlat64;
  u_xlat64 = min(x_1839, 1.0f);
  let x_1841 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1841 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1846 : f32 = u_xlat6.x;
  u_xlat23.x = (-(x_1846) + 1.0f);
  let x_1851 : f32 = u_xlat23.x;
  let x_1853 : f32 = u_xlat23.x;
  u_xlat65 = (x_1851 * x_1853);
  let x_1855 : f32 = u_xlat65;
  u_xlat65 = max(x_1855, 0.0078125f);
  let x_1859 : f32 = u_xlat65;
  let x_1860 : f32 = u_xlat65;
  u_xlat66 = (x_1859 * x_1860);
  let x_1864 : f32 = u_xlat6.x;
  u_xlat67 = (x_1864 + 0.040000021f);
  let x_1867 : f32 = u_xlat67;
  u_xlat67 = min(x_1867, 1.0f);
  let x_1869 : f32 = u_xlat65;
  u_xlat68 = ((x_1869 * 4.0f) + 2.0f);
  let x_1878 : vec4<f32> = u_xlat7;
  let x_1881 : f32 = x_137.x_GlobalMipBias.x;
  let x_1882 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1878.x, x_1878.z), x_1881);
  u_xlat6.x = x_1882.x;
  let x_1886 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1886 + -1.0f);
  let x_1891 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1893 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1891 * x_1893) + 1.0f);
  let x_1898 : f32 = u_xlat6.x;
  let x_1900 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1898, x_1900);
  let x_1903 : bool = u_xlatb0;
  if (x_1903) {
    let x_1907 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1907 == 1.0f);
    let x_1909 : bool = u_xlatb0;
    if (x_1909) {
      let x_1913 : vec4<f32> = vs_INTERP9;
      let x_1916 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1913.x, x_1913.y, x_1913.x, x_1913.y) + x_1916);
      let x_1919 : vec4<f32> = u_xlat7;
      let x_1920 : vec2<f32> = vec2<f32>(x_1919.x, x_1919.y);
      let x_1922 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1920.x, x_1920.y, x_1922);
      let x_1929 : vec3<f32> = txVec30;
      let x_1931 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1929.xy, x_1929.z);
      u_xlat8.x = x_1931;
      let x_1934 : vec4<f32> = u_xlat7;
      let x_1935 : vec2<f32> = vec2<f32>(x_1934.z, x_1934.w);
      let x_1937 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1935.x, x_1935.y, x_1937);
      let x_1944 : vec3<f32> = txVec31;
      let x_1946 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1944.xy, x_1944.z);
      u_xlat8.y = x_1946;
      let x_1948 : vec4<f32> = vs_INTERP9;
      let x_1951 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1948.x, x_1948.y, x_1948.x, x_1948.y) + x_1951);
      let x_1954 : vec4<f32> = u_xlat7;
      let x_1955 : vec2<f32> = vec2<f32>(x_1954.x, x_1954.y);
      let x_1957 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1955.x, x_1955.y, x_1957);
      let x_1964 : vec3<f32> = txVec32;
      let x_1966 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1964.xy, x_1964.z);
      u_xlat8.z = x_1966;
      let x_1969 : vec4<f32> = u_xlat7;
      let x_1970 : vec2<f32> = vec2<f32>(x_1969.z, x_1969.w);
      let x_1972 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1970.x, x_1970.y, x_1972);
      let x_1979 : vec3<f32> = txVec33;
      let x_1981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1979.xy, x_1979.z);
      u_xlat8.w = x_1981;
      let x_1983 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_1983, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1989 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_1989 == 2.0f);
      let x_1993 : bool = u_xlatb48.x;
      if (x_1993) {
        let x_1997 : vec4<f32> = vs_INTERP9;
        let x_2000 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1997.x, x_1997.y) * vec2<f32>(x_2000.z, x_2000.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2004 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2004);
        let x_2006 : vec4<f32> = vs_INTERP9;
        let x_2009 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2012 : vec2<f32> = u_xlat48;
        let x_2014 : vec2<f32> = ((vec2<f32>(x_2006.x, x_2006.y) * vec2<f32>(x_2009.z, x_2009.w)) + -(x_2012));
        let x_2015 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2014.x, x_2014.y, x_2015.z, x_2015.w);
        let x_2017 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2017.x, x_2017.x, x_2017.y, x_2017.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2020 : vec4<f32> = u_xlat8;
        let x_2022 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2020.x, x_2020.x, x_2020.z, x_2020.z) * vec4<f32>(x_2022.x, x_2022.x, x_2022.z, x_2022.z));
        let x_2026 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2026.y, x_2026.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2029 : vec4<f32> = u_xlat9;
        let x_2032 : vec4<f32> = u_xlat7;
        let x_2035 : vec2<f32> = ((vec2<f32>(x_2029.x, x_2029.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2032.x, x_2032.y)));
        let x_2036 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2035.x, x_2036.y, x_2035.y, x_2036.w);
        let x_2038 : vec4<f32> = u_xlat7;
        let x_2041 : vec2<f32> = (-(vec2<f32>(x_2038.x, x_2038.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2042 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2041.x, x_2041.y, x_2042.z, x_2042.w);
        let x_2044 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2044.x, x_2044.y), vec2<f32>(0.0f, 0.0f));
        let x_2047 : vec2<f32> = u_xlat51;
        let x_2049 : vec2<f32> = u_xlat51;
        let x_2051 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2047) * x_2049) + vec2<f32>(x_2051.x, x_2051.y));
        let x_2054 : vec4<f32> = u_xlat7;
        let x_2056 : vec2<f32> = max(vec2<f32>(x_2054.x, x_2054.y), vec2<f32>(0.0f, 0.0f));
        let x_2057 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2056.x, x_2056.y, x_2057.z, x_2057.w);
        let x_2059 : vec4<f32> = u_xlat7;
        let x_2062 : vec4<f32> = u_xlat7;
        let x_2065 : vec4<f32> = u_xlat8;
        let x_2067 : vec2<f32> = ((-(vec2<f32>(x_2059.x, x_2059.y)) * vec2<f32>(x_2062.x, x_2062.y)) + vec2<f32>(x_2065.y, x_2065.w));
        let x_2068 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2067.x, x_2067.y, x_2068.z, x_2068.w);
        let x_2070 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2070 + vec2<f32>(1.0f, 1.0f));
        let x_2072 : vec4<f32> = u_xlat7;
        let x_2074 : vec2<f32> = (vec2<f32>(x_2072.x, x_2072.y) + vec2<f32>(1.0f, 1.0f));
        let x_2075 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2074.x, x_2074.y, x_2075.z, x_2075.w);
        let x_2077 : vec4<f32> = u_xlat8;
        let x_2079 : vec2<f32> = (vec2<f32>(x_2077.x, x_2077.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2080 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2079.x, x_2079.y, x_2080.z, x_2080.w);
        let x_2082 : vec4<f32> = u_xlat9;
        let x_2084 : vec2<f32> = (vec2<f32>(x_2082.x, x_2082.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2085 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2084.x, x_2084.y, x_2085.z, x_2085.w);
        let x_2087 : vec2<f32> = u_xlat51;
        let x_2088 : vec2<f32> = (x_2087 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2089 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2088.x, x_2088.y, x_2089.z, x_2089.w);
        let x_2091 : vec4<f32> = u_xlat7;
        let x_2093 : vec2<f32> = (vec2<f32>(x_2091.x, x_2091.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2094 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2093.x, x_2093.y, x_2094.z, x_2094.w);
        let x_2096 : vec4<f32> = u_xlat8;
        let x_2098 : vec2<f32> = (vec2<f32>(x_2096.y, x_2096.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2099 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2098.x, x_2098.y, x_2099.z, x_2099.w);
        let x_2102 : f32 = u_xlat9.x;
        u_xlat10.z = x_2102;
        let x_2105 : f32 = u_xlat7.x;
        u_xlat10.w = x_2105;
        let x_2108 : f32 = u_xlat12.x;
        u_xlat11.z = x_2108;
        let x_2111 : f32 = u_xlat49.x;
        u_xlat11.w = x_2111;
        let x_2113 : vec4<f32> = u_xlat10;
        let x_2115 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2113.z, x_2113.w, x_2113.x, x_2113.z) + vec4<f32>(x_2115.z, x_2115.w, x_2115.x, x_2115.z));
        let x_2119 : f32 = u_xlat10.y;
        u_xlat9.z = x_2119;
        let x_2122 : f32 = u_xlat7.y;
        u_xlat9.w = x_2122;
        let x_2125 : f32 = u_xlat11.y;
        u_xlat12.z = x_2125;
        let x_2128 : f32 = u_xlat49.y;
        u_xlat12.w = x_2128;
        let x_2130 : vec4<f32> = u_xlat9;
        let x_2132 : vec4<f32> = u_xlat12;
        let x_2134 : vec3<f32> = (vec3<f32>(x_2130.z, x_2130.y, x_2130.w) + vec3<f32>(x_2132.z, x_2132.y, x_2132.w));
        let x_2135 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2134.x, x_2134.y, x_2134.z, x_2135.w);
        let x_2137 : vec4<f32> = u_xlat11;
        let x_2139 : vec4<f32> = u_xlat8;
        let x_2141 : vec3<f32> = (vec3<f32>(x_2137.x, x_2137.z, x_2137.w) / vec3<f32>(x_2139.z, x_2139.w, x_2139.y));
        let x_2142 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2141.x, x_2141.y, x_2141.z, x_2142.w);
        let x_2144 : vec4<f32> = u_xlat9;
        let x_2146 : vec3<f32> = (vec3<f32>(x_2144.x, x_2144.y, x_2144.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2147 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2146.x, x_2146.y, x_2146.z, x_2147.w);
        let x_2149 : vec4<f32> = u_xlat12;
        let x_2151 : vec4<f32> = u_xlat7;
        let x_2153 : vec3<f32> = (vec3<f32>(x_2149.z, x_2149.y, x_2149.w) / vec3<f32>(x_2151.x, x_2151.y, x_2151.z));
        let x_2154 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2153.x, x_2153.y, x_2153.z, x_2154.w);
        let x_2156 : vec4<f32> = u_xlat10;
        let x_2158 : vec3<f32> = (vec3<f32>(x_2156.x, x_2156.y, x_2156.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2159 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2158.x, x_2158.y, x_2158.z, x_2159.w);
        let x_2161 : vec4<f32> = u_xlat9;
        let x_2164 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2166 : vec3<f32> = (vec3<f32>(x_2161.y, x_2161.x, x_2161.z) * vec3<f32>(x_2164.x, x_2164.x, x_2164.x));
        let x_2167 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2166.x, x_2166.y, x_2166.z, x_2167.w);
        let x_2169 : vec4<f32> = u_xlat10;
        let x_2172 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2174 : vec3<f32> = (vec3<f32>(x_2169.x, x_2169.y, x_2169.z) * vec3<f32>(x_2172.y, x_2172.y, x_2172.y));
        let x_2175 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2174.x, x_2174.y, x_2174.z, x_2175.w);
        let x_2178 : f32 = u_xlat10.x;
        u_xlat9.w = x_2178;
        let x_2180 : vec2<f32> = u_xlat48;
        let x_2183 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2186 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2180.x, x_2180.y, x_2180.x, x_2180.y) * vec4<f32>(x_2183.x, x_2183.y, x_2183.x, x_2183.y)) + vec4<f32>(x_2186.y, x_2186.w, x_2186.x, x_2186.w));
        let x_2189 : vec2<f32> = u_xlat48;
        let x_2191 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2194 : vec4<f32> = u_xlat9;
        let x_2196 : vec2<f32> = ((x_2189 * vec2<f32>(x_2191.x, x_2191.y)) + vec2<f32>(x_2194.z, x_2194.w));
        let x_2197 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2196.x, x_2196.y, x_2197.z, x_2197.w);
        let x_2200 : f32 = u_xlat9.y;
        u_xlat10.w = x_2200;
        let x_2202 : vec4<f32> = u_xlat10;
        let x_2203 : vec2<f32> = vec2<f32>(x_2202.y, x_2202.z);
        let x_2204 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2204.x, x_2203.x, x_2204.z, x_2203.y);
        let x_2206 : vec2<f32> = u_xlat48;
        let x_2209 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2212 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2206.x, x_2206.y, x_2206.x, x_2206.y) * vec4<f32>(x_2209.x, x_2209.y, x_2209.x, x_2209.y)) + vec4<f32>(x_2212.x, x_2212.y, x_2212.z, x_2212.y));
        let x_2215 : vec2<f32> = u_xlat48;
        let x_2218 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2221 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2215.x, x_2215.y, x_2215.x, x_2215.y) * vec4<f32>(x_2218.x, x_2218.y, x_2218.x, x_2218.y)) + vec4<f32>(x_2221.w, x_2221.y, x_2221.w, x_2221.z));
        let x_2224 : vec2<f32> = u_xlat48;
        let x_2227 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2230 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2224.x, x_2224.y, x_2224.x, x_2224.y) * vec4<f32>(x_2227.x, x_2227.y, x_2227.x, x_2227.y)) + vec4<f32>(x_2230.x, x_2230.w, x_2230.z, x_2230.w));
        let x_2233 : vec4<f32> = u_xlat7;
        let x_2235 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2233.x, x_2233.x, x_2233.x, x_2233.y) * vec4<f32>(x_2235.z, x_2235.w, x_2235.y, x_2235.z));
        let x_2238 : vec4<f32> = u_xlat7;
        let x_2240 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2238.y, x_2238.y, x_2238.z, x_2238.z) * x_2240);
        let x_2243 : f32 = u_xlat7.z;
        let x_2245 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2243 * x_2245);
        let x_2249 : vec4<f32> = u_xlat11;
        let x_2250 : vec2<f32> = vec2<f32>(x_2249.x, x_2249.y);
        let x_2252 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2250.x, x_2250.y, x_2252);
        let x_2260 : vec3<f32> = txVec34;
        let x_2262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2260.xy, x_2260.z);
        u_xlat69 = x_2262;
        let x_2264 : vec4<f32> = u_xlat11;
        let x_2265 : vec2<f32> = vec2<f32>(x_2264.z, x_2264.w);
        let x_2267 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2265.x, x_2265.y, x_2267);
        let x_2274 : vec3<f32> = txVec35;
        let x_2276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2274.xy, x_2274.z);
        u_xlat7.x = x_2276;
        let x_2279 : f32 = u_xlat7.x;
        let x_2281 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2279 * x_2281);
        let x_2285 : f32 = u_xlat14.x;
        let x_2286 : f32 = u_xlat69;
        let x_2289 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2285 * x_2286) + x_2289);
        let x_2292 : vec4<f32> = u_xlat12;
        let x_2293 : vec2<f32> = vec2<f32>(x_2292.x, x_2292.y);
        let x_2295 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2293.x, x_2293.y, x_2295);
        let x_2302 : vec3<f32> = txVec36;
        let x_2304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2302.xy, x_2302.z);
        u_xlat7.x = x_2304;
        let x_2307 : f32 = u_xlat14.z;
        let x_2309 : f32 = u_xlat7.x;
        let x_2311 : f32 = u_xlat69;
        u_xlat69 = ((x_2307 * x_2309) + x_2311);
        let x_2314 : vec4<f32> = u_xlat10;
        let x_2315 : vec2<f32> = vec2<f32>(x_2314.x, x_2314.y);
        let x_2317 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2315.x, x_2315.y, x_2317);
        let x_2324 : vec3<f32> = txVec37;
        let x_2326 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2324.xy, x_2324.z);
        u_xlat7.x = x_2326;
        let x_2329 : f32 = u_xlat14.w;
        let x_2331 : f32 = u_xlat7.x;
        let x_2333 : f32 = u_xlat69;
        u_xlat69 = ((x_2329 * x_2331) + x_2333);
        let x_2336 : vec4<f32> = u_xlat13;
        let x_2337 : vec2<f32> = vec2<f32>(x_2336.x, x_2336.y);
        let x_2339 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2337.x, x_2337.y, x_2339);
        let x_2346 : vec3<f32> = txVec38;
        let x_2348 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2346.xy, x_2346.z);
        u_xlat7.x = x_2348;
        let x_2351 : f32 = u_xlat15.x;
        let x_2353 : f32 = u_xlat7.x;
        let x_2355 : f32 = u_xlat69;
        u_xlat69 = ((x_2351 * x_2353) + x_2355);
        let x_2358 : vec4<f32> = u_xlat13;
        let x_2359 : vec2<f32> = vec2<f32>(x_2358.z, x_2358.w);
        let x_2361 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2359.x, x_2359.y, x_2361);
        let x_2368 : vec3<f32> = txVec39;
        let x_2370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2368.xy, x_2368.z);
        u_xlat7.x = x_2370;
        let x_2373 : f32 = u_xlat15.y;
        let x_2375 : f32 = u_xlat7.x;
        let x_2377 : f32 = u_xlat69;
        u_xlat69 = ((x_2373 * x_2375) + x_2377);
        let x_2380 : vec4<f32> = u_xlat10;
        let x_2381 : vec2<f32> = vec2<f32>(x_2380.z, x_2380.w);
        let x_2383 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2381.x, x_2381.y, x_2383);
        let x_2390 : vec3<f32> = txVec40;
        let x_2392 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2390.xy, x_2390.z);
        u_xlat7.x = x_2392;
        let x_2395 : f32 = u_xlat15.z;
        let x_2397 : f32 = u_xlat7.x;
        let x_2399 : f32 = u_xlat69;
        u_xlat69 = ((x_2395 * x_2397) + x_2399);
        let x_2402 : vec4<f32> = u_xlat9;
        let x_2403 : vec2<f32> = vec2<f32>(x_2402.x, x_2402.y);
        let x_2405 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2403.x, x_2403.y, x_2405);
        let x_2412 : vec3<f32> = txVec41;
        let x_2414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2412.xy, x_2412.z);
        u_xlat7.x = x_2414;
        let x_2417 : f32 = u_xlat15.w;
        let x_2419 : f32 = u_xlat7.x;
        let x_2421 : f32 = u_xlat69;
        u_xlat69 = ((x_2417 * x_2419) + x_2421);
        let x_2424 : vec4<f32> = u_xlat9;
        let x_2425 : vec2<f32> = vec2<f32>(x_2424.z, x_2424.w);
        let x_2427 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2425.x, x_2425.y, x_2427);
        let x_2434 : vec3<f32> = txVec42;
        let x_2436 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2434.xy, x_2434.z);
        u_xlat7.x = x_2436;
        let x_2439 : f32 = u_xlat48.x;
        let x_2441 : f32 = u_xlat7.x;
        let x_2443 : f32 = u_xlat69;
        u_xlat0.x = ((x_2439 * x_2441) + x_2443);
      } else {
        let x_2447 : vec4<f32> = vs_INTERP9;
        let x_2450 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2447.x, x_2447.y) * vec2<f32>(x_2450.z, x_2450.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2454 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2454);
        let x_2456 : vec4<f32> = vs_INTERP9;
        let x_2459 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2462 : vec2<f32> = u_xlat48;
        let x_2464 : vec2<f32> = ((vec2<f32>(x_2456.x, x_2456.y) * vec2<f32>(x_2459.z, x_2459.w)) + -(x_2462));
        let x_2465 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2464.x, x_2464.y, x_2465.z, x_2465.w);
        let x_2467 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2467.x, x_2467.x, x_2467.y, x_2467.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2470 : vec4<f32> = u_xlat8;
        let x_2472 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2470.x, x_2470.x, x_2470.z, x_2470.z) * vec4<f32>(x_2472.x, x_2472.x, x_2472.z, x_2472.z));
        let x_2475 : vec4<f32> = u_xlat9;
        let x_2477 : vec2<f32> = (vec2<f32>(x_2475.y, x_2475.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2478.x, x_2477.x, x_2478.z, x_2477.y);
        let x_2480 : vec4<f32> = u_xlat9;
        let x_2483 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2480.x, x_2480.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2483.x, x_2483.y)));
        let x_2487 : vec4<f32> = u_xlat7;
        let x_2490 : vec2<f32> = (-(vec2<f32>(x_2487.x, x_2487.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2491 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2490.x, x_2491.y, x_2490.y, x_2491.w);
        let x_2493 : vec4<f32> = u_xlat7;
        let x_2495 : vec2<f32> = min(vec2<f32>(x_2493.x, x_2493.y), vec2<f32>(0.0f, 0.0f));
        let x_2496 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2495.x, x_2495.y, x_2496.z, x_2496.w);
        let x_2498 : vec4<f32> = u_xlat9;
        let x_2501 : vec4<f32> = u_xlat9;
        let x_2504 : vec4<f32> = u_xlat8;
        let x_2506 : vec2<f32> = ((-(vec2<f32>(x_2498.x, x_2498.y)) * vec2<f32>(x_2501.x, x_2501.y)) + vec2<f32>(x_2504.x, x_2504.z));
        let x_2507 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2506.x, x_2507.y, x_2506.y, x_2507.w);
        let x_2509 : vec4<f32> = u_xlat7;
        let x_2511 : vec2<f32> = max(vec2<f32>(x_2509.x, x_2509.y), vec2<f32>(0.0f, 0.0f));
        let x_2512 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2511.x, x_2511.y, x_2512.z, x_2512.w);
        let x_2514 : vec4<f32> = u_xlat9;
        let x_2517 : vec4<f32> = u_xlat9;
        let x_2520 : vec4<f32> = u_xlat8;
        let x_2522 : vec2<f32> = ((-(vec2<f32>(x_2514.x, x_2514.y)) * vec2<f32>(x_2517.x, x_2517.y)) + vec2<f32>(x_2520.y, x_2520.w));
        let x_2523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2523.x, x_2522.x, x_2523.z, x_2522.y);
        let x_2525 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2525 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2528 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2528 * 0.081632003f);
        let x_2531 : vec2<f32> = u_xlat49;
        let x_2533 : vec2<f32> = (vec2<f32>(x_2531.y, x_2531.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2534 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2533.x, x_2533.y, x_2534.z, x_2534.w);
        let x_2536 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2536.x, x_2536.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2540 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2540 * 0.081632003f);
        let x_2544 : f32 = u_xlat11.y;
        u_xlat9.x = x_2544;
        let x_2546 : vec4<f32> = u_xlat7;
        let x_2549 : vec2<f32> = ((vec2<f32>(x_2546.x, x_2546.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2550 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2550.x, x_2549.x, x_2550.z, x_2549.y);
        let x_2552 : vec4<f32> = u_xlat7;
        let x_2555 : vec2<f32> = ((vec2<f32>(x_2552.x, x_2552.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2556 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2555.x, x_2556.y, x_2555.y, x_2556.w);
        let x_2559 : f32 = u_xlat49.x;
        u_xlat8.y = x_2559;
        let x_2562 : f32 = u_xlat10.y;
        u_xlat8.w = x_2562;
        let x_2564 : vec4<f32> = u_xlat8;
        let x_2565 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2564 + x_2565);
        let x_2567 : vec4<f32> = u_xlat7;
        let x_2570 : vec2<f32> = ((vec2<f32>(x_2567.y, x_2567.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2571 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2571.x, x_2570.x, x_2571.z, x_2570.y);
        let x_2573 : vec4<f32> = u_xlat7;
        let x_2576 : vec2<f32> = ((vec2<f32>(x_2573.y, x_2573.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2577 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2576.x, x_2577.y, x_2576.y, x_2577.w);
        let x_2580 : f32 = u_xlat49.y;
        u_xlat10.y = x_2580;
        let x_2582 : vec4<f32> = u_xlat10;
        let x_2583 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2582 + x_2583);
        let x_2585 : vec4<f32> = u_xlat8;
        let x_2586 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2585 / x_2586);
        let x_2588 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2588 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2590 : vec4<f32> = u_xlat10;
        let x_2591 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2590 / x_2591);
        let x_2593 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2593 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2595 : vec4<f32> = u_xlat8;
        let x_2598 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2595.w, x_2595.x, x_2595.y, x_2595.z) * vec4<f32>(x_2598.x, x_2598.x, x_2598.x, x_2598.x));
        let x_2601 : vec4<f32> = u_xlat10;
        let x_2604 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2601.x, x_2601.w, x_2601.y, x_2601.z) * vec4<f32>(x_2604.y, x_2604.y, x_2604.y, x_2604.y));
        let x_2607 : vec4<f32> = u_xlat8;
        let x_2608 : vec3<f32> = vec3<f32>(x_2607.y, x_2607.z, x_2607.w);
        let x_2609 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2608.x, x_2609.y, x_2608.y, x_2608.z);
        let x_2612 : f32 = u_xlat10.x;
        u_xlat11.y = x_2612;
        let x_2614 : vec2<f32> = u_xlat48;
        let x_2617 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2620 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2614.x, x_2614.y, x_2614.x, x_2614.y) * vec4<f32>(x_2617.x, x_2617.y, x_2617.x, x_2617.y)) + vec4<f32>(x_2620.x, x_2620.y, x_2620.z, x_2620.y));
        let x_2623 : vec2<f32> = u_xlat48;
        let x_2625 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2628 : vec4<f32> = u_xlat11;
        let x_2630 : vec2<f32> = ((x_2623 * vec2<f32>(x_2625.x, x_2625.y)) + vec2<f32>(x_2628.w, x_2628.y));
        let x_2631 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2630.x, x_2630.y, x_2631.z, x_2631.w);
        let x_2634 : f32 = u_xlat11.y;
        u_xlat8.y = x_2634;
        let x_2637 : f32 = u_xlat10.z;
        u_xlat11.y = x_2637;
        let x_2639 : vec2<f32> = u_xlat48;
        let x_2642 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2645 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2639.x, x_2639.y, x_2639.x, x_2639.y) * vec4<f32>(x_2642.x, x_2642.y, x_2642.x, x_2642.y)) + vec4<f32>(x_2645.x, x_2645.y, x_2645.z, x_2645.y));
        let x_2649 : vec2<f32> = u_xlat48;
        let x_2651 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2654 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2649 * vec2<f32>(x_2651.x, x_2651.y)) + vec2<f32>(x_2654.w, x_2654.y));
        let x_2658 : f32 = u_xlat11.y;
        u_xlat8.z = x_2658;
        let x_2660 : vec2<f32> = u_xlat48;
        let x_2663 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2666 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2660.x, x_2660.y, x_2660.x, x_2660.y) * vec4<f32>(x_2663.x, x_2663.y, x_2663.x, x_2663.y)) + vec4<f32>(x_2666.x, x_2666.y, x_2666.x, x_2666.z));
        let x_2670 : f32 = u_xlat10.w;
        u_xlat11.y = x_2670;
        let x_2672 : vec2<f32> = u_xlat48;
        let x_2675 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2678 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2672.x, x_2672.y, x_2672.x, x_2672.y) * vec4<f32>(x_2675.x, x_2675.y, x_2675.x, x_2675.y)) + vec4<f32>(x_2678.x, x_2678.y, x_2678.z, x_2678.y));
        let x_2681 : vec2<f32> = u_xlat48;
        let x_2683 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2686 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2681 * vec2<f32>(x_2683.x, x_2683.y)) + vec2<f32>(x_2686.w, x_2686.y));
        let x_2690 : f32 = u_xlat11.y;
        u_xlat8.w = x_2690;
        let x_2692 : vec2<f32> = u_xlat48;
        let x_2694 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2697 : vec4<f32> = u_xlat8;
        let x_2699 : vec2<f32> = ((x_2692 * vec2<f32>(x_2694.x, x_2694.y)) + vec2<f32>(x_2697.x, x_2697.w));
        let x_2700 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2699.x, x_2699.y, x_2700.z, x_2700.w);
        let x_2702 : vec4<f32> = u_xlat11;
        let x_2703 : vec3<f32> = vec3<f32>(x_2702.x, x_2702.z, x_2702.w);
        let x_2704 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2703.x, x_2704.y, x_2703.y, x_2703.z);
        let x_2706 : vec2<f32> = u_xlat48;
        let x_2709 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2712 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2706.x, x_2706.y, x_2706.x, x_2706.y) * vec4<f32>(x_2709.x, x_2709.y, x_2709.x, x_2709.y)) + vec4<f32>(x_2712.x, x_2712.y, x_2712.z, x_2712.y));
        let x_2716 : vec2<f32> = u_xlat48;
        let x_2718 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2721 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2716 * vec2<f32>(x_2718.x, x_2718.y)) + vec2<f32>(x_2721.w, x_2721.y));
        let x_2725 : f32 = u_xlat8.x;
        u_xlat10.x = x_2725;
        let x_2727 : vec2<f32> = u_xlat48;
        let x_2729 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2732 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2727 * vec2<f32>(x_2729.x, x_2729.y)) + vec2<f32>(x_2732.x, x_2732.y));
        let x_2735 : vec4<f32> = u_xlat7;
        let x_2737 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2735.x, x_2735.x, x_2735.x, x_2735.x) * x_2737);
        let x_2739 : vec4<f32> = u_xlat7;
        let x_2741 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2739.y, x_2739.y, x_2739.y, x_2739.y) * x_2741);
        let x_2744 : vec4<f32> = u_xlat7;
        let x_2746 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2744.z, x_2744.z, x_2744.z, x_2744.z) * x_2746);
        let x_2748 : vec4<f32> = u_xlat7;
        let x_2750 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2748.w, x_2748.w, x_2748.w, x_2748.w) * x_2750);
        let x_2753 : vec4<f32> = u_xlat12;
        let x_2754 : vec2<f32> = vec2<f32>(x_2753.x, x_2753.y);
        let x_2756 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2754.x, x_2754.y, x_2756);
        let x_2763 : vec3<f32> = txVec43;
        let x_2765 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2763.xy, x_2763.z);
        u_xlat8.x = x_2765;
        let x_2768 : vec4<f32> = u_xlat12;
        let x_2769 : vec2<f32> = vec2<f32>(x_2768.z, x_2768.w);
        let x_2771 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2769.x, x_2769.y, x_2771);
        let x_2779 : vec3<f32> = txVec44;
        let x_2781 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2779.xy, x_2779.z);
        u_xlat71 = x_2781;
        let x_2782 : f32 = u_xlat71;
        let x_2784 : f32 = u_xlat18.y;
        u_xlat71 = (x_2782 * x_2784);
        let x_2787 : f32 = u_xlat18.x;
        let x_2789 : f32 = u_xlat8.x;
        let x_2791 : f32 = u_xlat71;
        u_xlat8.x = ((x_2787 * x_2789) + x_2791);
        let x_2795 : vec4<f32> = u_xlat13;
        let x_2796 : vec2<f32> = vec2<f32>(x_2795.x, x_2795.y);
        let x_2798 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2796.x, x_2796.y, x_2798);
        let x_2805 : vec3<f32> = txVec45;
        let x_2807 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2805.xy, x_2805.z);
        u_xlat71 = x_2807;
        let x_2809 : f32 = u_xlat18.z;
        let x_2810 : f32 = u_xlat71;
        let x_2813 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2809 * x_2810) + x_2813);
        let x_2817 : vec4<f32> = u_xlat15;
        let x_2818 : vec2<f32> = vec2<f32>(x_2817.x, x_2817.y);
        let x_2820 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2818.x, x_2818.y, x_2820);
        let x_2827 : vec3<f32> = txVec46;
        let x_2829 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2827.xy, x_2827.z);
        u_xlat71 = x_2829;
        let x_2831 : f32 = u_xlat18.w;
        let x_2832 : f32 = u_xlat71;
        let x_2835 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2831 * x_2832) + x_2835);
        let x_2839 : vec4<f32> = u_xlat14;
        let x_2840 : vec2<f32> = vec2<f32>(x_2839.x, x_2839.y);
        let x_2842 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2840.x, x_2840.y, x_2842);
        let x_2849 : vec3<f32> = txVec47;
        let x_2851 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2849.xy, x_2849.z);
        u_xlat71 = x_2851;
        let x_2853 : f32 = u_xlat19.x;
        let x_2854 : f32 = u_xlat71;
        let x_2857 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2853 * x_2854) + x_2857);
        let x_2861 : vec4<f32> = u_xlat14;
        let x_2862 : vec2<f32> = vec2<f32>(x_2861.z, x_2861.w);
        let x_2864 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2862.x, x_2862.y, x_2864);
        let x_2871 : vec3<f32> = txVec48;
        let x_2873 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2871.xy, x_2871.z);
        u_xlat71 = x_2873;
        let x_2875 : f32 = u_xlat19.y;
        let x_2876 : f32 = u_xlat71;
        let x_2879 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2875 * x_2876) + x_2879);
        let x_2883 : vec2<f32> = u_xlat55;
        let x_2885 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2883.x, x_2883.y, x_2885);
        let x_2892 : vec3<f32> = txVec49;
        let x_2894 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2892.xy, x_2892.z);
        u_xlat71 = x_2894;
        let x_2896 : f32 = u_xlat19.z;
        let x_2897 : f32 = u_xlat71;
        let x_2900 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2896 * x_2897) + x_2900);
        let x_2904 : vec4<f32> = u_xlat15;
        let x_2905 : vec2<f32> = vec2<f32>(x_2904.z, x_2904.w);
        let x_2907 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2905.x, x_2905.y, x_2907);
        let x_2914 : vec3<f32> = txVec50;
        let x_2916 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2914.xy, x_2914.z);
        u_xlat71 = x_2916;
        let x_2918 : f32 = u_xlat19.w;
        let x_2919 : f32 = u_xlat71;
        let x_2922 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2918 * x_2919) + x_2922);
        let x_2926 : vec4<f32> = u_xlat16;
        let x_2927 : vec2<f32> = vec2<f32>(x_2926.x, x_2926.y);
        let x_2929 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2927.x, x_2927.y, x_2929);
        let x_2936 : vec3<f32> = txVec51;
        let x_2938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2936.xy, x_2936.z);
        u_xlat71 = x_2938;
        let x_2940 : f32 = u_xlat20.x;
        let x_2941 : f32 = u_xlat71;
        let x_2944 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2940 * x_2941) + x_2944);
        let x_2948 : vec4<f32> = u_xlat16;
        let x_2949 : vec2<f32> = vec2<f32>(x_2948.z, x_2948.w);
        let x_2951 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2949.x, x_2949.y, x_2951);
        let x_2958 : vec3<f32> = txVec52;
        let x_2960 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2958.xy, x_2958.z);
        u_xlat71 = x_2960;
        let x_2962 : f32 = u_xlat20.y;
        let x_2963 : f32 = u_xlat71;
        let x_2966 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2962 * x_2963) + x_2966);
        let x_2970 : vec2<f32> = u_xlat29;
        let x_2972 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2970.x, x_2970.y, x_2972);
        let x_2979 : vec3<f32> = txVec53;
        let x_2981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2979.xy, x_2979.z);
        u_xlat29.x = x_2981;
        let x_2984 : f32 = u_xlat20.z;
        let x_2986 : f32 = u_xlat29.x;
        let x_2989 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2984 * x_2986) + x_2989);
        let x_2993 : vec4<f32> = u_xlat17;
        let x_2994 : vec2<f32> = vec2<f32>(x_2993.x, x_2993.y);
        let x_2996 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2994.x, x_2994.y, x_2996);
        let x_3003 : vec3<f32> = txVec54;
        let x_3005 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3003.xy, x_3003.z);
        u_xlat29.x = x_3005;
        let x_3008 : f32 = u_xlat20.w;
        let x_3010 : f32 = u_xlat29.x;
        let x_3013 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3008 * x_3010) + x_3013);
        let x_3017 : vec4<f32> = u_xlat11;
        let x_3018 : vec2<f32> = vec2<f32>(x_3017.x, x_3017.y);
        let x_3020 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3018.x, x_3018.y, x_3020);
        let x_3027 : vec3<f32> = txVec55;
        let x_3029 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3027.xy, x_3027.z);
        u_xlat29.x = x_3029;
        let x_3032 : f32 = u_xlat7.x;
        let x_3034 : f32 = u_xlat29.x;
        let x_3037 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3032 * x_3034) + x_3037);
        let x_3041 : vec4<f32> = u_xlat11;
        let x_3042 : vec2<f32> = vec2<f32>(x_3041.z, x_3041.w);
        let x_3044 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3042.x, x_3042.y, x_3044);
        let x_3051 : vec3<f32> = txVec56;
        let x_3053 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3051.xy, x_3051.z);
        u_xlat8.x = x_3053;
        let x_3056 : f32 = u_xlat7.y;
        let x_3058 : f32 = u_xlat8.x;
        let x_3061 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3056 * x_3058) + x_3061);
        let x_3065 : vec2<f32> = u_xlat52;
        let x_3067 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3065.x, x_3065.y, x_3067);
        let x_3074 : vec3<f32> = txVec57;
        let x_3076 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3074.xy, x_3074.z);
        u_xlat28.x = x_3076;
        let x_3079 : f32 = u_xlat7.z;
        let x_3081 : f32 = u_xlat28.x;
        let x_3084 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3079 * x_3081) + x_3084);
        let x_3088 : vec2<f32> = u_xlat48;
        let x_3090 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3088.x, x_3088.y, x_3090);
        let x_3097 : vec3<f32> = txVec58;
        let x_3099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3097.xy, x_3097.z);
        u_xlat48.x = x_3099;
        let x_3102 : f32 = u_xlat7.w;
        let x_3104 : f32 = u_xlat48.x;
        let x_3107 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_3102 * x_3104) + x_3107);
      }
    }
  } else {
    let x_3112 : vec4<f32> = vs_INTERP9;
    let x_3113 : vec2<f32> = vec2<f32>(x_3112.x, x_3112.y);
    let x_3115 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3113.x, x_3113.y, x_3115);
    let x_3122 : vec3<f32> = txVec59;
    let x_3124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3122.xy, x_3122.z);
    u_xlat0.x = x_3124;
  }
  let x_3127 : f32 = u_xlat0.x;
  let x_3129 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3132 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3127 * x_3129) + x_3132);
  let x_3139 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3139);
  let x_3143 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3143 >= 1.0f);
  let x_3147 : bool = u_xlatb2.x;
  let x_3149 : bool = u_xlatb48.x;
  u_xlatb2.x = (x_3147 | x_3149);
  let x_3153 : bool = u_xlatb2.x;
  if (x_3153) {
    x_3154 = 1.0f;
  } else {
    let x_3159 : f32 = u_xlat0.x;
    x_3154 = x_3159;
  }
  let x_3160 : f32 = x_3154;
  u_xlat0.x = x_3160;
  let x_3162 : vec3<f32> = vs_INTERP0;
  let x_3164 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3166 : vec3<f32> = (x_3162 + -(x_3164));
  let x_3167 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3166.x, x_3166.y, x_3166.z, x_3167.w);
  let x_3169 : vec4<f32> = u_xlat7;
  let x_3171 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3169.x, x_3169.y, x_3169.z), vec3<f32>(x_3171.x, x_3171.y, x_3171.z));
  let x_3176 : f32 = u_xlat2.x;
  let x_3178 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3181 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3176 * x_3178) + x_3181);
  let x_3185 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3185, 0.0f, 1.0f);
  let x_3189 : f32 = u_xlat0.x;
  u_xlat48.x = (-(x_3189) + 1.0f);
  let x_3194 : f32 = u_xlat2.x;
  let x_3196 : f32 = u_xlat48.x;
  let x_3199 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3194 * x_3196) + x_3199);
  let x_3208 : f32 = x_3206.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3208 == -1.0f));
  let x_3212 : bool = u_xlatb2.x;
  if (x_3212) {
    let x_3215 : vec3<f32> = vs_INTERP0;
    let x_3218 : vec4<f32> = x_3206.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3215.y, x_3215.y) * vec2<f32>(x_3218.x, x_3218.y));
    let x_3222 : vec4<f32> = x_3206.x_MainLightWorldToLight[0i];
    let x_3224 : vec3<f32> = vs_INTERP0;
    let x_3227 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3222.x, x_3222.y) * vec2<f32>(x_3224.x, x_3224.x)) + x_3227);
    let x_3230 : vec4<f32> = x_3206.x_MainLightWorldToLight[2i];
    let x_3232 : vec3<f32> = vs_INTERP0;
    let x_3235 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3230.x, x_3230.y) * vec2<f32>(x_3232.z, x_3232.z)) + x_3235);
    let x_3237 : vec2<f32> = u_xlat48;
    let x_3239 : vec4<f32> = x_3206.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3237 + vec2<f32>(x_3239.x, x_3239.y));
    let x_3242 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3242 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3250 : vec2<f32> = u_xlat48;
    let x_3252 : f32 = x_137.x_GlobalMipBias.x;
    let x_3253 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3250, x_3252);
    u_xlat7 = x_3253;
    let x_3255 : f32 = x_3206.x_MainLightCookieTextureFormat;
    let x_3257 : f32 = x_3206.x_MainLightCookieTextureFormat;
    let x_3259 : f32 = x_3206.x_MainLightCookieTextureFormat;
    let x_3261 : f32 = x_3206.x_MainLightCookieTextureFormat;
    let x_3262 : vec4<f32> = vec4<f32>(x_3255, x_3257, x_3259, x_3261);
    let x_3269 : vec4<bool> = (vec4<f32>(x_3262.x, x_3262.y, x_3262.z, x_3262.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3269.x, x_3269.y);
    let x_3272 : bool = u_xlatb48.y;
    if (x_3272) {
      let x_3277 : f32 = u_xlat7.w;
      x_3273 = x_3277;
    } else {
      let x_3280 : f32 = u_xlat7.x;
      x_3273 = x_3280;
    }
    let x_3281 : f32 = x_3273;
    u_xlat2.x = x_3281;
    let x_3284 : bool = u_xlatb48.x;
    if (x_3284) {
      let x_3288 : vec4<f32> = u_xlat7;
      x_3285 = vec3<f32>(x_3288.x, x_3288.y, x_3288.z);
    } else {
      let x_3291 : vec3<f32> = u_xlat2;
      x_3285 = vec3<f32>(x_3291.x, x_3291.x, x_3291.x);
    }
    let x_3293 : vec3<f32> = x_3285;
    let x_3294 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3293.x, x_3293.y, x_3293.z, x_3294.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3300 : vec4<f32> = u_xlat7;
  let x_3303 : vec4<f32> = x_137.x_MainLightColor;
  let x_3305 : vec3<f32> = (vec3<f32>(x_3300.x, x_3300.y, x_3300.z) * vec3<f32>(x_3303.x, x_3303.y, x_3303.z));
  let x_3306 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3305.x, x_3305.y, x_3305.z, x_3306.w);
  let x_3308 : vec3<f32> = u_xlat27;
  let x_3310 : vec4<f32> = u_xlat7;
  let x_3312 : vec3<f32> = (vec3<f32>(x_3308.x, x_3308.x, x_3308.x) * vec3<f32>(x_3310.x, x_3310.y, x_3310.z));
  let x_3313 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3312.x, x_3312.y, x_3312.z, x_3313.w);
  let x_3315 : vec4<f32> = u_xlat4;
  let x_3318 : vec3<f32> = u_xlat21;
  u_xlat2.x = dot(-(vec3<f32>(x_3315.x, x_3315.y, x_3315.z)), x_3318);
  let x_3322 : f32 = u_xlat2.x;
  let x_3324 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3322 + x_3324);
  let x_3327 : vec3<f32> = u_xlat21;
  let x_3328 : vec3<f32> = u_xlat2;
  let x_3332 : vec4<f32> = u_xlat4;
  let x_3335 : vec3<f32> = ((x_3327 * -(vec3<f32>(x_3328.x, x_3328.x, x_3328.x))) + -(vec3<f32>(x_3332.x, x_3332.y, x_3332.z)));
  let x_3336 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3335.x, x_3335.y, x_3335.z, x_3336.w);
  let x_3338 : vec3<f32> = u_xlat21;
  let x_3339 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(x_3338, vec3<f32>(x_3339.x, x_3339.y, x_3339.z));
  let x_3344 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3344, 0.0f, 1.0f);
  let x_3348 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3348) + 1.0f);
  let x_3353 : f32 = u_xlat2.x;
  let x_3355 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3353 * x_3355);
  let x_3359 : f32 = u_xlat2.x;
  let x_3361 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3359 * x_3361);
  let x_3365 : f32 = u_xlat23.x;
  u_xlat48.x = ((-(x_3365) * 0.699999988f) + 1.700000048f);
  let x_3373 : f32 = u_xlat23.x;
  let x_3375 : f32 = u_xlat48.x;
  u_xlat23.x = (x_3373 * x_3375);
  let x_3379 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3379 * 6.0f);
  let x_3391 : vec4<f32> = u_xlat8;
  let x_3394 : f32 = u_xlat23.x;
  let x_3395 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3391.x, x_3391.y, x_3391.z), x_3394);
  u_xlat8 = x_3395;
  let x_3397 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3397 + -1.0f);
  let x_3401 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3403 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3401 * x_3403) + 1.0f);
  let x_3408 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3408, 0.0f);
  let x_3412 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3412);
  let x_3416 : f32 = u_xlat23.x;
  let x_3418 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3416 * x_3418);
  let x_3422 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3422);
  let x_3426 : f32 = u_xlat23.x;
  let x_3428 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3426 * x_3428);
  let x_3431 : vec4<f32> = u_xlat8;
  let x_3433 : vec3<f32> = u_xlat23;
  let x_3435 : vec3<f32> = (vec3<f32>(x_3431.x, x_3431.y, x_3431.z) * vec3<f32>(x_3433.x, x_3433.x, x_3433.x));
  let x_3436 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3435.x, x_3435.y, x_3435.z, x_3436.w);
  let x_3438 : f32 = u_xlat65;
  let x_3440 : f32 = u_xlat65;
  let x_3444 : vec2<f32> = ((vec2<f32>(x_3438, x_3438) * vec2<f32>(x_3440, x_3440)) + vec2<f32>(-1.0f, 1.0f));
  let x_3445 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3444.x, x_3445.y, x_3444.y);
  let x_3448 : f32 = u_xlat23.z;
  u_xlat65 = (1.0f / x_3448);
  let x_3450 : f32 = u_xlat67;
  u_xlat67 = (x_3450 + -0.039999999f);
  let x_3454 : f32 = u_xlat2.x;
  let x_3455 : f32 = u_xlat67;
  u_xlat2.x = ((x_3454 * x_3455) + 0.039999999f);
  let x_3461 : f32 = u_xlat2.x;
  let x_3462 : f32 = u_xlat65;
  u_xlat2.x = (x_3461 * x_3462);
  let x_3465 : vec3<f32> = u_xlat2;
  let x_3467 : vec4<f32> = u_xlat8;
  let x_3469 : vec3<f32> = (vec3<f32>(x_3465.x, x_3465.x, x_3465.x) * vec3<f32>(x_3467.x, x_3467.y, x_3467.z));
  let x_3470 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3469.x, x_3469.y, x_3469.z, x_3470.w);
  let x_3472 : vec4<f32> = u_xlat3;
  let x_3474 : vec3<f32> = u_xlat5;
  let x_3476 : vec4<f32> = u_xlat8;
  let x_3478 : vec3<f32> = ((vec3<f32>(x_3472.x, x_3472.y, x_3472.z) * x_3474) + vec3<f32>(x_3476.x, x_3476.y, x_3476.z));
  let x_3479 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3478.x, x_3478.y, x_3478.z, x_3479.w);
  let x_3482 : f32 = u_xlat0.x;
  let x_3484 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3482 * x_3484);
  let x_3487 : vec3<f32> = u_xlat21;
  let x_3489 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(x_3487, vec3<f32>(x_3489.x, x_3489.y, x_3489.z));
  let x_3494 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3494, 0.0f, 1.0f);
  let x_3498 : f32 = u_xlat0.x;
  let x_3500 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3498 * x_3500);
  let x_3503 : vec3<f32> = u_xlat0;
  let x_3505 : vec4<f32> = u_xlat7;
  let x_3507 : vec3<f32> = (vec3<f32>(x_3503.x, x_3503.x, x_3503.x) * vec3<f32>(x_3505.x, x_3505.y, x_3505.z));
  let x_3508 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3507.x, x_3507.y, x_3507.z, x_3508.w);
  let x_3510 : vec4<f32> = u_xlat4;
  let x_3513 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3515 : vec3<f32> = (vec3<f32>(x_3510.x, x_3510.y, x_3510.z) + vec3<f32>(x_3513.x, x_3513.y, x_3513.z));
  let x_3516 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3515.x, x_3515.y, x_3515.z, x_3516.w);
  let x_3518 : vec4<f32> = u_xlat8;
  let x_3520 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3518.x, x_3518.y, x_3518.z), vec3<f32>(x_3520.x, x_3520.y, x_3520.z));
  let x_3525 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3525, 1.17549435e-37f);
  let x_3529 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3529);
  let x_3532 : vec3<f32> = u_xlat0;
  let x_3534 : vec4<f32> = u_xlat8;
  let x_3536 : vec3<f32> = (vec3<f32>(x_3532.x, x_3532.x, x_3532.x) * vec3<f32>(x_3534.x, x_3534.y, x_3534.z));
  let x_3537 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3536.x, x_3536.y, x_3536.z, x_3537.w);
  let x_3539 : vec3<f32> = u_xlat21;
  let x_3540 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3539, vec3<f32>(x_3540.x, x_3540.y, x_3540.z));
  let x_3545 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3545, 0.0f, 1.0f);
  let x_3549 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3551 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3549.x, x_3549.y, x_3549.z), vec3<f32>(x_3551.x, x_3551.y, x_3551.z));
  let x_3556 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3556, 0.0f, 1.0f);
  let x_3560 : f32 = u_xlat0.x;
  let x_3562 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3560 * x_3562);
  let x_3566 : f32 = u_xlat0.x;
  let x_3568 : f32 = u_xlat23.x;
  u_xlat0.x = ((x_3566 * x_3568) + 1.000010014f);
  let x_3574 : f32 = u_xlat2.x;
  let x_3576 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3574 * x_3576);
  let x_3580 : f32 = u_xlat0.x;
  let x_3582 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3580 * x_3582);
  let x_3586 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3586, 0.100000001f);
  let x_3591 : f32 = u_xlat0.x;
  let x_3593 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3591 * x_3593);
  let x_3596 : f32 = u_xlat68;
  let x_3598 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3596 * x_3598);
  let x_3601 : f32 = u_xlat66;
  let x_3603 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3601 / x_3603);
  let x_3606 : vec3<f32> = u_xlat0;
  let x_3610 : vec3<f32> = u_xlat5;
  let x_3611 : vec3<f32> = ((vec3<f32>(x_3606.x, x_3606.x, x_3606.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3610);
  let x_3612 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3611.x, x_3611.y, x_3611.z, x_3612.w);
  let x_3614 : vec4<f32> = u_xlat7;
  let x_3616 : vec4<f32> = u_xlat8;
  let x_3618 : vec3<f32> = (vec3<f32>(x_3614.x, x_3614.y, x_3614.z) * vec3<f32>(x_3616.x, x_3616.y, x_3616.z));
  let x_3619 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3618.x, x_3618.y, x_3618.z, x_3619.w);
  let x_3622 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3624 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3622, x_3624);
  let x_3630 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3630));
  let x_3634 : f32 = x_3206.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3636 : f32 = x_3206.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3638 : f32 = x_3206.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3640 : f32 = x_3206.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3641 : vec4<f32> = vec4<f32>(x_3634, x_3636, x_3638, x_3640);
  let x_3648 : vec4<bool> = (vec4<f32>(x_3641.x, x_3641.y, x_3641.z, x_3641.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3649 : vec2<bool> = vec2<bool>(x_3648.x, x_3648.w);
  let x_3650 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3649.x, x_3650.y, x_3650.z, x_3649.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3661 : u32 = u_xlatu_loop_1;
    let x_3662 : u32 = u_xlatu0;
    if ((x_3661 < x_3662)) {
    } else {
      break;
    }
    let x_3665 : u32 = u_xlatu_loop_1;
    u_xlatu48 = (x_3665 >> 2u);
    let x_3669 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3669 & 3u));
    let x_3672 : u32 = u_xlatu48;
    let x_3675 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3672)];
    let x_3685 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3690 : vec4<u32> = indexable[x_3685];
    u_xlat48.x = dot(x_3675, bitcast<vec4<f32>>(x_3690));
    let x_3695 : f32 = u_xlat48.x;
    u_xlatu48 = bitcast<u32>(i32(x_3695));
    let x_3698 : vec3<f32> = vs_INTERP0;
    let x_3710 : u32 = u_xlatu48;
    let x_3713 : vec4<f32> = x_3709.x_AdditionalLightsPosition[bitcast<i32>(x_3710)];
    let x_3716 : u32 = u_xlatu48;
    let x_3719 : vec4<f32> = x_3709.x_AdditionalLightsPosition[bitcast<i32>(x_3716)];
    let x_3721 : vec3<f32> = ((-(x_3698) * vec3<f32>(x_3713.w, x_3713.w, x_3713.w)) + vec3<f32>(x_3719.x, x_3719.y, x_3719.z));
    let x_3722 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3721.x, x_3721.y, x_3721.z, x_3722.w);
    let x_3724 : vec4<f32> = u_xlat9;
    let x_3726 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3724.x, x_3724.y, x_3724.z), vec3<f32>(x_3726.x, x_3726.y, x_3726.z));
    let x_3729 : f32 = u_xlat69;
    u_xlat69 = max(x_3729, 6.10351562e-05f);
    let x_3733 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3733);
    let x_3735 : f32 = u_xlat70;
    let x_3737 : vec4<f32> = u_xlat9;
    let x_3739 : vec3<f32> = (vec3<f32>(x_3735, x_3735, x_3735) * vec3<f32>(x_3737.x, x_3737.y, x_3737.z));
    let x_3740 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3739.x, x_3739.y, x_3739.z, x_3740.w);
    let x_3742 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3742);
    let x_3744 : f32 = u_xlat69;
    let x_3745 : u32 = u_xlatu48;
    let x_3748 : f32 = x_3709.x_AdditionalLightsAttenuation[bitcast<i32>(x_3745)].x;
    u_xlat69 = (x_3744 * x_3748);
    let x_3750 : f32 = u_xlat69;
    let x_3752 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3750) * x_3752) + 1.0f);
    let x_3755 : f32 = u_xlat69;
    u_xlat69 = max(x_3755, 0.0f);
    let x_3757 : f32 = u_xlat69;
    let x_3758 : f32 = u_xlat69;
    u_xlat69 = (x_3757 * x_3758);
    let x_3760 : f32 = u_xlat69;
    let x_3761 : f32 = u_xlat71;
    u_xlat69 = (x_3760 * x_3761);
    let x_3763 : u32 = u_xlatu48;
    let x_3766 : vec4<f32> = x_3709.x_AdditionalLightsSpotDir[bitcast<i32>(x_3763)];
    let x_3768 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3766.x, x_3766.y, x_3766.z), vec3<f32>(x_3768.x, x_3768.y, x_3768.z));
    let x_3771 : f32 = u_xlat71;
    let x_3772 : u32 = u_xlatu48;
    let x_3775 : f32 = x_3709.x_AdditionalLightsAttenuation[bitcast<i32>(x_3772)].z;
    let x_3777 : u32 = u_xlatu48;
    let x_3780 : f32 = x_3709.x_AdditionalLightsAttenuation[bitcast<i32>(x_3777)].w;
    u_xlat71 = ((x_3771 * x_3775) + x_3780);
    let x_3782 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3782, 0.0f, 1.0f);
    let x_3784 : f32 = u_xlat71;
    let x_3785 : f32 = u_xlat71;
    u_xlat71 = (x_3784 * x_3785);
    let x_3787 : f32 = u_xlat69;
    let x_3788 : f32 = u_xlat71;
    u_xlat69 = (x_3787 * x_3788);
    let x_3791 : u32 = u_xlatu48;
    u_xlatu71 = (x_3791 >> 5u);
    let x_3794 : u32 = u_xlatu48;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3794) & 31i)));
    let x_3800 : i32 = u_xlati72;
    let x_3802 : u32 = u_xlatu71;
    let x_3805 : f32 = x_3206.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3802)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3800) & bitcast<u32>(x_3805)));
    let x_3809 : i32 = u_xlati71;
    if ((x_3809 != 0i)) {
      let x_3819 : u32 = u_xlatu48;
      let x_3822 : f32 = x_3818.x_AdditionalLightsLightTypes[bitcast<i32>(x_3819)].el;
      u_xlati71 = i32(x_3822);
      let x_3824 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3824 != 0i));
      let x_3828 : u32 = u_xlatu48;
      u_xlati73 = (bitcast<i32>(x_3828) << bitcast<u32>(2i));
      let x_3831 : i32 = u_xlati72;
      if ((x_3831 != 0i)) {
        let x_3835 : vec3<f32> = vs_INTERP0;
        let x_3837 : i32 = u_xlati73;
        let x_3840 : i32 = u_xlati73;
        let x_3844 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_3837 + 1i) / 4i)][((x_3840 + 1i) % 4i)];
        let x_3846 : vec3<f32> = (vec3<f32>(x_3835.y, x_3835.y, x_3835.y) * vec3<f32>(x_3844.x, x_3844.y, x_3844.w));
        let x_3847 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3846.x, x_3846.y, x_3846.z, x_3847.w);
        let x_3849 : i32 = u_xlati73;
        let x_3851 : i32 = u_xlati73;
        let x_3854 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[(x_3849 / 4i)][(x_3851 % 4i)];
        let x_3856 : vec3<f32> = vs_INTERP0;
        let x_3859 : vec4<f32> = u_xlat11;
        let x_3861 : vec3<f32> = ((vec3<f32>(x_3854.x, x_3854.y, x_3854.w) * vec3<f32>(x_3856.x, x_3856.x, x_3856.x)) + vec3<f32>(x_3859.x, x_3859.y, x_3859.z));
        let x_3862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3861.x, x_3861.y, x_3861.z, x_3862.w);
        let x_3864 : i32 = u_xlati73;
        let x_3867 : i32 = u_xlati73;
        let x_3871 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_3864 + 2i) / 4i)][((x_3867 + 2i) % 4i)];
        let x_3873 : vec3<f32> = vs_INTERP0;
        let x_3876 : vec4<f32> = u_xlat11;
        let x_3878 : vec3<f32> = ((vec3<f32>(x_3871.x, x_3871.y, x_3871.w) * vec3<f32>(x_3873.z, x_3873.z, x_3873.z)) + vec3<f32>(x_3876.x, x_3876.y, x_3876.z));
        let x_3879 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3878.x, x_3878.y, x_3878.z, x_3879.w);
        let x_3881 : vec4<f32> = u_xlat11;
        let x_3883 : i32 = u_xlati73;
        let x_3886 : i32 = u_xlati73;
        let x_3890 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_3883 + 3i) / 4i)][((x_3886 + 3i) % 4i)];
        let x_3892 : vec3<f32> = (vec3<f32>(x_3881.x, x_3881.y, x_3881.z) + vec3<f32>(x_3890.x, x_3890.y, x_3890.w));
        let x_3893 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3892.x, x_3892.y, x_3892.z, x_3893.w);
        let x_3895 : vec4<f32> = u_xlat11;
        let x_3897 : vec4<f32> = u_xlat11;
        let x_3899 : vec2<f32> = (vec2<f32>(x_3895.x, x_3895.y) / vec2<f32>(x_3897.z, x_3897.z));
        let x_3900 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3899.x, x_3899.y, x_3900.z, x_3900.w);
        let x_3902 : vec4<f32> = u_xlat11;
        let x_3905 : vec2<f32> = ((vec2<f32>(x_3902.x, x_3902.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3906 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3905.x, x_3905.y, x_3906.z, x_3906.w);
        let x_3908 : vec4<f32> = u_xlat11;
        let x_3912 : vec2<f32> = clamp(vec2<f32>(x_3908.x, x_3908.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3913 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3912.x, x_3912.y, x_3913.z, x_3913.w);
        let x_3915 : u32 = u_xlatu48;
        let x_3918 : vec4<f32> = x_3818.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3915)];
        let x_3920 : vec4<f32> = u_xlat11;
        let x_3923 : u32 = u_xlatu48;
        let x_3926 : vec4<f32> = x_3818.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3923)];
        let x_3928 : vec2<f32> = ((vec2<f32>(x_3918.x, x_3918.y) * vec2<f32>(x_3920.x, x_3920.y)) + vec2<f32>(x_3926.z, x_3926.w));
        let x_3929 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3928.x, x_3928.y, x_3929.z, x_3929.w);
      } else {
        let x_3933 : i32 = u_xlati71;
        u_xlatb71 = (x_3933 == 1i);
        let x_3935 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3935);
        let x_3937 : i32 = u_xlati71;
        if ((x_3937 != 0i)) {
          let x_3942 : vec3<f32> = vs_INTERP0;
          let x_3944 : i32 = u_xlati73;
          let x_3947 : i32 = u_xlati73;
          let x_3951 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_3944 + 1i) / 4i)][((x_3947 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_3942.y, x_3942.y) * vec2<f32>(x_3951.x, x_3951.y));
          let x_3954 : i32 = u_xlati73;
          let x_3956 : i32 = u_xlati73;
          let x_3959 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[(x_3954 / 4i)][(x_3956 % 4i)];
          let x_3961 : vec3<f32> = vs_INTERP0;
          let x_3964 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3959.x, x_3959.y) * vec2<f32>(x_3961.x, x_3961.x)) + x_3964);
          let x_3966 : i32 = u_xlati73;
          let x_3969 : i32 = u_xlati73;
          let x_3973 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_3966 + 2i) / 4i)][((x_3969 + 2i) % 4i)];
          let x_3975 : vec3<f32> = vs_INTERP0;
          let x_3978 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3973.x, x_3973.y) * vec2<f32>(x_3975.z, x_3975.z)) + x_3978);
          let x_3980 : vec2<f32> = u_xlat53;
          let x_3981 : i32 = u_xlati73;
          let x_3984 : i32 = u_xlati73;
          let x_3988 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_3981 + 3i) / 4i)][((x_3984 + 3i) % 4i)];
          u_xlat53 = (x_3980 + vec2<f32>(x_3988.x, x_3988.y));
          let x_3991 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_3991 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3994 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_3994);
          let x_3996 : u32 = u_xlatu48;
          let x_3999 : vec4<f32> = x_3818.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3996)];
          let x_4001 : vec2<f32> = u_xlat53;
          let x_4003 : u32 = u_xlatu48;
          let x_4006 : vec4<f32> = x_3818.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4003)];
          let x_4008 : vec2<f32> = ((vec2<f32>(x_3999.x, x_3999.y) * x_4001) + vec2<f32>(x_4006.z, x_4006.w));
          let x_4009 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4008.x, x_4008.y, x_4009.z, x_4009.w);
        } else {
          let x_4012 : vec3<f32> = vs_INTERP0;
          let x_4014 : i32 = u_xlati73;
          let x_4017 : i32 = u_xlati73;
          let x_4021 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_4014 + 1i) / 4i)][((x_4017 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4012.y, x_4012.y, x_4012.y, x_4012.y) * x_4021);
          let x_4023 : i32 = u_xlati73;
          let x_4025 : i32 = u_xlati73;
          let x_4028 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[(x_4023 / 4i)][(x_4025 % 4i)];
          let x_4029 : vec3<f32> = vs_INTERP0;
          let x_4032 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4028 * vec4<f32>(x_4029.x, x_4029.x, x_4029.x, x_4029.x)) + x_4032);
          let x_4034 : i32 = u_xlati73;
          let x_4037 : i32 = u_xlati73;
          let x_4041 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_4034 + 2i) / 4i)][((x_4037 + 2i) % 4i)];
          let x_4042 : vec3<f32> = vs_INTERP0;
          let x_4045 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4041 * vec4<f32>(x_4042.z, x_4042.z, x_4042.z, x_4042.z)) + x_4045);
          let x_4047 : vec4<f32> = u_xlat12;
          let x_4048 : i32 = u_xlati73;
          let x_4051 : i32 = u_xlati73;
          let x_4055 : vec4<f32> = x_3818.x_AdditionalLightsWorldToLights[((x_4048 + 3i) / 4i)][((x_4051 + 3i) % 4i)];
          u_xlat12 = (x_4047 + x_4055);
          let x_4057 : vec4<f32> = u_xlat12;
          let x_4059 : vec4<f32> = u_xlat12;
          let x_4061 : vec3<f32> = (vec3<f32>(x_4057.x, x_4057.y, x_4057.z) / vec3<f32>(x_4059.w, x_4059.w, x_4059.w));
          let x_4062 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4061.x, x_4061.y, x_4061.z, x_4062.w);
          let x_4064 : vec4<f32> = u_xlat12;
          let x_4066 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4064.x, x_4064.y, x_4064.z), vec3<f32>(x_4066.x, x_4066.y, x_4066.z));
          let x_4069 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4069);
          let x_4071 : f32 = u_xlat71;
          let x_4073 : vec4<f32> = u_xlat12;
          let x_4075 : vec3<f32> = (vec3<f32>(x_4071, x_4071, x_4071) * vec3<f32>(x_4073.x, x_4073.y, x_4073.z));
          let x_4076 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4075.x, x_4075.y, x_4075.z, x_4076.w);
          let x_4078 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4078.x, x_4078.y, x_4078.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4083 : f32 = u_xlat71;
          u_xlat71 = max(x_4083, 0.000001f);
          let x_4086 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4086);
          let x_4088 : f32 = u_xlat71;
          let x_4090 : vec4<f32> = u_xlat12;
          let x_4092 : vec3<f32> = (vec3<f32>(x_4088, x_4088, x_4088) * vec3<f32>(x_4090.z, x_4090.x, x_4090.y));
          let x_4093 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4092.x, x_4092.y, x_4092.z, x_4093.w);
          let x_4096 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4096);
          let x_4100 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4100, 0.0f, 1.0f);
          let x_4104 : vec4<f32> = u_xlat13;
          let x_4107 : vec4<bool> = (vec4<f32>(x_4104.y, x_4104.z, x_4104.y, x_4104.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4107.x, x_4107.y);
          let x_4110 : bool = u_xlatb53.x;
          if (x_4110) {
            let x_4115 : f32 = u_xlat13.x;
            x_4111 = x_4115;
          } else {
            let x_4118 : f32 = u_xlat13.x;
            x_4111 = -(x_4118);
          }
          let x_4120 : f32 = x_4111;
          u_xlat53.x = x_4120;
          let x_4123 : bool = u_xlatb53.y;
          if (x_4123) {
            let x_4128 : f32 = u_xlat13.x;
            x_4124 = x_4128;
          } else {
            let x_4131 : f32 = u_xlat13.x;
            x_4124 = -(x_4131);
          }
          let x_4133 : f32 = x_4124;
          u_xlat53.y = x_4133;
          let x_4135 : vec4<f32> = u_xlat12;
          let x_4137 : f32 = u_xlat71;
          let x_4140 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4135.x, x_4135.y) * vec2<f32>(x_4137, x_4137)) + x_4140);
          let x_4142 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4142 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4145 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4145, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4149 : u32 = u_xlatu48;
          let x_4152 : vec4<f32> = x_3818.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4149)];
          let x_4154 : vec2<f32> = u_xlat53;
          let x_4156 : u32 = u_xlatu48;
          let x_4159 : vec4<f32> = x_3818.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4156)];
          let x_4161 : vec2<f32> = ((vec2<f32>(x_4152.x, x_4152.y) * x_4154) + vec2<f32>(x_4159.z, x_4159.w));
          let x_4162 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4161.x, x_4161.y, x_4162.z, x_4162.w);
        }
      }
      let x_4169 : vec4<f32> = u_xlat11;
      let x_4172 : f32 = x_137.x_GlobalMipBias.x;
      let x_4173 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4169.x, x_4169.y), x_4172);
      u_xlat11 = x_4173;
      let x_4175 : bool = u_xlatb2.w;
      if (x_4175) {
        let x_4180 : f32 = u_xlat11.w;
        x_4176 = x_4180;
      } else {
        let x_4183 : f32 = u_xlat11.x;
        x_4176 = x_4183;
      }
      let x_4184 : f32 = x_4176;
      u_xlat71 = x_4184;
      let x_4186 : bool = u_xlatb2.x;
      if (x_4186) {
        let x_4190 : vec4<f32> = u_xlat11;
        x_4187 = vec3<f32>(x_4190.x, x_4190.y, x_4190.z);
      } else {
        let x_4193 : f32 = u_xlat71;
        x_4187 = vec3<f32>(x_4193, x_4193, x_4193);
      }
      let x_4195 : vec3<f32> = x_4187;
      let x_4196 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4195.x, x_4195.y, x_4195.z, x_4196.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4202 : vec4<f32> = u_xlat11;
    let x_4204 : u32 = u_xlatu48;
    let x_4207 : vec4<f32> = x_3709.x_AdditionalLightsColor[bitcast<i32>(x_4204)];
    let x_4209 : vec3<f32> = (vec3<f32>(x_4202.x, x_4202.y, x_4202.z) * vec3<f32>(x_4207.x, x_4207.y, x_4207.z));
    let x_4210 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4209.x, x_4209.y, x_4209.z, x_4210.w);
    let x_4212 : vec3<f32> = u_xlat27;
    let x_4214 : vec4<f32> = u_xlat11;
    let x_4216 : vec3<f32> = (vec3<f32>(x_4212.x, x_4212.x, x_4212.x) * vec3<f32>(x_4214.x, x_4214.y, x_4214.z));
    let x_4217 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4216.x, x_4216.y, x_4216.z, x_4217.w);
    let x_4219 : vec3<f32> = u_xlat21;
    let x_4220 : vec4<f32> = u_xlat10;
    u_xlat48.x = dot(x_4219, vec3<f32>(x_4220.x, x_4220.y, x_4220.z));
    let x_4225 : f32 = u_xlat48.x;
    u_xlat48.x = clamp(x_4225, 0.0f, 1.0f);
    let x_4229 : f32 = u_xlat48.x;
    let x_4230 : f32 = u_xlat69;
    u_xlat48.x = (x_4229 * x_4230);
    let x_4233 : vec2<f32> = u_xlat48;
    let x_4235 : vec4<f32> = u_xlat11;
    let x_4237 : vec3<f32> = (vec3<f32>(x_4233.x, x_4233.x, x_4233.x) * vec3<f32>(x_4235.x, x_4235.y, x_4235.z));
    let x_4238 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4237.x, x_4237.y, x_4237.z, x_4238.w);
    let x_4240 : vec4<f32> = u_xlat9;
    let x_4242 : f32 = u_xlat70;
    let x_4245 : vec4<f32> = u_xlat4;
    let x_4247 : vec3<f32> = ((vec3<f32>(x_4240.x, x_4240.y, x_4240.z) * vec3<f32>(x_4242, x_4242, x_4242)) + vec3<f32>(x_4245.x, x_4245.y, x_4245.z));
    let x_4248 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4247.x, x_4247.y, x_4247.z, x_4248.w);
    let x_4250 : vec4<f32> = u_xlat9;
    let x_4252 : vec4<f32> = u_xlat9;
    u_xlat48.x = dot(vec3<f32>(x_4250.x, x_4250.y, x_4250.z), vec3<f32>(x_4252.x, x_4252.y, x_4252.z));
    let x_4257 : f32 = u_xlat48.x;
    u_xlat48.x = max(x_4257, 1.17549435e-37f);
    let x_4261 : f32 = u_xlat48.x;
    u_xlat48.x = inverseSqrt(x_4261);
    let x_4264 : vec2<f32> = u_xlat48;
    let x_4266 : vec4<f32> = u_xlat9;
    let x_4268 : vec3<f32> = (vec3<f32>(x_4264.x, x_4264.x, x_4264.x) * vec3<f32>(x_4266.x, x_4266.y, x_4266.z));
    let x_4269 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4268.x, x_4268.y, x_4268.z, x_4269.w);
    let x_4271 : vec3<f32> = u_xlat21;
    let x_4272 : vec4<f32> = u_xlat9;
    u_xlat48.x = dot(x_4271, vec3<f32>(x_4272.x, x_4272.y, x_4272.z));
    let x_4277 : f32 = u_xlat48.x;
    u_xlat48.x = clamp(x_4277, 0.0f, 1.0f);
    let x_4280 : vec4<f32> = u_xlat10;
    let x_4282 : vec4<f32> = u_xlat9;
    u_xlat48.y = dot(vec3<f32>(x_4280.x, x_4280.y, x_4280.z), vec3<f32>(x_4282.x, x_4282.y, x_4282.z));
    let x_4287 : f32 = u_xlat48.y;
    u_xlat48.y = clamp(x_4287, 0.0f, 1.0f);
    let x_4290 : vec2<f32> = u_xlat48;
    let x_4291 : vec2<f32> = u_xlat48;
    u_xlat48 = (x_4290 * x_4291);
    let x_4294 : f32 = u_xlat48.x;
    let x_4296 : f32 = u_xlat23.x;
    u_xlat48.x = ((x_4294 * x_4296) + 1.000010014f);
    let x_4301 : f32 = u_xlat48.x;
    let x_4303 : f32 = u_xlat48.x;
    u_xlat48.x = (x_4301 * x_4303);
    let x_4307 : f32 = u_xlat48.y;
    u_xlat69 = max(x_4307, 0.100000001f);
    let x_4309 : f32 = u_xlat69;
    let x_4311 : f32 = u_xlat48.x;
    u_xlat48.x = (x_4309 * x_4311);
    let x_4314 : f32 = u_xlat68;
    let x_4316 : f32 = u_xlat48.x;
    u_xlat48.x = (x_4314 * x_4316);
    let x_4319 : f32 = u_xlat66;
    let x_4321 : f32 = u_xlat48.x;
    u_xlat48.x = (x_4319 / x_4321);
    let x_4324 : vec2<f32> = u_xlat48;
    let x_4327 : vec3<f32> = u_xlat5;
    let x_4328 : vec3<f32> = ((vec3<f32>(x_4324.x, x_4324.x, x_4324.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4327);
    let x_4329 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4328.x, x_4328.y, x_4328.z, x_4329.w);
    let x_4331 : vec4<f32> = u_xlat9;
    let x_4333 : vec4<f32> = u_xlat11;
    let x_4336 : vec4<f32> = u_xlat8;
    let x_4338 : vec3<f32> = ((vec3<f32>(x_4331.x, x_4331.y, x_4331.z) * vec3<f32>(x_4333.x, x_4333.y, x_4333.z)) + vec3<f32>(x_4336.x, x_4336.y, x_4336.z));
    let x_4339 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4338.x, x_4338.y, x_4338.z, x_4339.w);

    continuing {
      let x_4341 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4341 + bitcast<u32>(1i));
    }
  }
  let x_4343 : vec4<f32> = u_xlat3;
  let x_4345 : vec4<f32> = u_xlat6;
  let x_4348 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_4343.x, x_4343.y, x_4343.z) * vec3<f32>(x_4345.x, x_4345.x, x_4345.x)) + vec3<f32>(x_4348.x, x_4348.y, x_4348.z));
  let x_4351 : vec4<f32> = u_xlat8;
  let x_4353 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4351.x, x_4351.y, x_4351.z) + x_4353);
  let x_4357 : vec4<f32> = vs_INTERP4;
  let x_4359 : vec3<f32> = u_xlat1;
  let x_4361 : vec3<f32> = u_xlat0;
  let x_4362 : vec3<f32> = ((vec3<f32>(x_4357.w, x_4357.w, x_4357.w) * x_4359) + x_4361);
  let x_4363 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4362.x, x_4362.y, x_4362.z, x_4363.w);
  let x_4365 : bool = u_xlatb44;
  let x_4366 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_4366, x_4365);
  let x_4372 : u32 = x_137.x_RenderingLayerMaxInt;
  let x_4374 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_4372 & bitcast<u32>(x_4374));
  let x_4377 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4377);
  let x_4382 : f32 = u_xlat0.x;
  let x_4384 : f32 = x_137.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4382 * x_4384);
  let x_4388 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4388, 0.0f, 1.0f);
  let x_4392 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4392.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

