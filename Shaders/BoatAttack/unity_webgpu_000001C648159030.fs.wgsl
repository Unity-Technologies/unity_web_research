struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3258 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3714 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3824 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1838 : f32;
  var x_1851 : f32;
  var x_1863 : f32;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : vec2<bool>;
  var u_xlat54 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var x_3340 : f32;
  var x_3351 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4116 : f32;
  var x_4129 : f32;
  var x_4181 : f32;
  var x_4192 : vec3<f32>;
  var x_4373 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1818 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1818 == 0.0f);
  let x_1821 : vec3<f32> = vs_INTERP0;
  let x_1825 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1821) + x_1825);
  let x_1827 : vec3<f32> = u_xlat27;
  let x_1828 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1827, x_1828);
  let x_1830 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1830);
  let x_1832 : f32 = u_xlat67;
  let x_1834 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1832, x_1832, x_1832) * x_1834);
  let x_1837 : bool = u_xlatb23.x;
  if (x_1837) {
    let x_1842 : f32 = u_xlat27.x;
    x_1838 = x_1842;
  } else {
    let x_1846 : f32 = x_66.unity_MatrixV[0i].z;
    x_1838 = x_1846;
  }
  let x_1847 : f32 = x_1838;
  u_xlat6.x = x_1847;
  let x_1850 : bool = u_xlatb23.x;
  if (x_1850) {
    let x_1855 : f32 = u_xlat27.y;
    x_1851 = x_1855;
  } else {
    let x_1858 : f32 = x_66.unity_MatrixV[1i].z;
    x_1851 = x_1858;
  }
  let x_1859 : f32 = x_1851;
  u_xlat6.y = x_1859;
  let x_1862 : bool = u_xlatb23.x;
  if (x_1862) {
    let x_1867 : f32 = u_xlat27.z;
    x_1863 = x_1867;
  } else {
    let x_1870 : f32 = x_66.unity_MatrixV[2i].z;
    x_1863 = x_1870;
  }
  let x_1871 : f32 = x_1863;
  u_xlat6.z = x_1871;
  let x_1880 : vec2<f32> = vs_INTERP5;
  let x_1882 : f32 = x_66.x_GlobalMipBias.x;
  let x_1883 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1880, x_1882);
  u_xlat27 = vec3<f32>(x_1883.x, x_1883.y, x_1883.z);
  let x_1886 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1887 : vec2<f32> = vec2<f32>(x_1886.x, x_1886.y);
  let x_1891 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1887.x, x_1887.y));
  let x_1892 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1891.x, x_1892.y, x_1891.y);
  let x_1894 : vec3<f32> = u_xlat23;
  let x_1896 : vec4<f32> = hlslcc_FragCoord;
  let x_1898 : vec2<f32> = (vec2<f32>(x_1894.x, x_1894.z) * vec2<f32>(x_1896.x, x_1896.y));
  let x_1899 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1898.x, x_1898.y, x_1899.z, x_1899.w);
  let x_1902 : f32 = u_xlat7.y;
  let x_1904 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1907 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1902 * x_1904) + x_1907);
  let x_1911 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1911) + 1.0f);
  let x_1916 : f32 = u_xlat3.x;
  u_xlat3.x = x_1916;
  let x_1919 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1919, 0.0f, 1.0f);
  let x_1923 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1923, 1.0f);
  let x_1926 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1926 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1931 : f32 = u_xlat3.x;
  u_xlat23.x = (-(x_1931) + 1.0f);
  let x_1936 : f32 = u_xlat23.x;
  let x_1938 : f32 = u_xlat23.x;
  u_xlat67 = (x_1936 * x_1938);
  let x_1940 : f32 = u_xlat67;
  u_xlat67 = max(x_1940, 0.0078125f);
  let x_1943 : f32 = u_xlat67;
  let x_1944 : f32 = u_xlat67;
  u_xlat68 = (x_1943 * x_1944);
  let x_1947 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1947 + 0.040000021f);
  let x_1952 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1952, 1.0f);
  let x_1956 : f32 = u_xlat67;
  u_xlat72 = ((x_1956 * 4.0f) + 2.0f);
  let x_1964 : vec4<f32> = u_xlat7;
  let x_1967 : f32 = x_66.x_GlobalMipBias.x;
  let x_1968 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1964.x, x_1964.z), x_1967);
  u_xlat7.x = x_1968.x;
  let x_1972 : f32 = u_xlat7.x;
  u_xlat29.x = (x_1972 + -1.0f);
  let x_1976 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1978 : f32 = u_xlat29.x;
  u_xlat29.x = ((x_1976 * x_1978) + 1.0f);
  let x_1983 : f32 = u_xlat7.x;
  let x_1985 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_1983, x_1985);
  let x_1988 : bool = u_xlatb66;
  if (x_1988) {
    let x_1992 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_1992 == 1.0f);
    let x_1994 : bool = u_xlatb66;
    if (x_1994) {
      let x_1997 : vec4<f32> = u_xlat4;
      let x_2000 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_1997.x, x_1997.y, x_1997.x, x_1997.y) + x_2000);
      let x_2003 : vec4<f32> = u_xlat8;
      let x_2004 : vec2<f32> = vec2<f32>(x_2003.x, x_2003.y);
      let x_2006 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2004.x, x_2004.y, x_2006);
      let x_2013 : vec3<f32> = txVec30;
      let x_2015 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2013.xy, x_2013.z);
      u_xlat9.x = x_2015;
      let x_2018 : vec4<f32> = u_xlat8;
      let x_2019 : vec2<f32> = vec2<f32>(x_2018.z, x_2018.w);
      let x_2021 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2019.x, x_2019.y, x_2021);
      let x_2028 : vec3<f32> = txVec31;
      let x_2030 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2028.xy, x_2028.z);
      u_xlat9.y = x_2030;
      let x_2032 : vec4<f32> = u_xlat4;
      let x_2035 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2032.x, x_2032.y, x_2032.x, x_2032.y) + x_2035);
      let x_2038 : vec4<f32> = u_xlat8;
      let x_2039 : vec2<f32> = vec2<f32>(x_2038.x, x_2038.y);
      let x_2041 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2039.x, x_2039.y, x_2041);
      let x_2048 : vec3<f32> = txVec32;
      let x_2050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2048.xy, x_2048.z);
      u_xlat9.z = x_2050;
      let x_2053 : vec4<f32> = u_xlat8;
      let x_2054 : vec2<f32> = vec2<f32>(x_2053.z, x_2053.w);
      let x_2056 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2054.x, x_2054.y, x_2056);
      let x_2063 : vec3<f32> = txVec33;
      let x_2065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2063.xy, x_2063.z);
      u_xlat9.w = x_2065;
      let x_2067 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2067, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2074 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb51.x = (x_2074 == 2.0f);
      let x_2078 : bool = u_xlatb51.x;
      if (x_2078) {
        let x_2081 : vec4<f32> = u_xlat4;
        let x_2084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2081.x, x_2081.y) * vec2<f32>(x_2084.z, x_2084.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2088 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2088);
        let x_2090 : vec4<f32> = u_xlat4;
        let x_2093 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2096 : vec2<f32> = u_xlat51;
        let x_2098 : vec2<f32> = ((vec2<f32>(x_2090.x, x_2090.y) * vec2<f32>(x_2093.z, x_2093.w)) + -(x_2096));
        let x_2099 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2098.x, x_2098.y, x_2099.z, x_2099.w);
        let x_2101 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2101.x, x_2101.x, x_2101.y, x_2101.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2104 : vec4<f32> = u_xlat9;
        let x_2106 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2104.x, x_2104.x, x_2104.z, x_2104.z) * vec4<f32>(x_2106.x, x_2106.x, x_2106.z, x_2106.z));
        let x_2109 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2109.y, x_2109.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2112 : vec4<f32> = u_xlat10;
        let x_2115 : vec4<f32> = u_xlat8;
        let x_2118 : vec2<f32> = ((vec2<f32>(x_2112.x, x_2112.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2115.x, x_2115.y)));
        let x_2119 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2118.x, x_2119.y, x_2118.y, x_2119.w);
        let x_2121 : vec4<f32> = u_xlat8;
        let x_2124 : vec2<f32> = (-(vec2<f32>(x_2121.x, x_2121.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2125 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2124.x, x_2124.y, x_2125.z, x_2125.w);
        let x_2128 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2128.x, x_2128.y), vec2<f32>(0.0f, 0.0f));
        let x_2131 : vec2<f32> = u_xlat54;
        let x_2133 : vec2<f32> = u_xlat54;
        let x_2135 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2131) * x_2133) + vec2<f32>(x_2135.x, x_2135.y));
        let x_2138 : vec4<f32> = u_xlat8;
        let x_2140 : vec2<f32> = max(vec2<f32>(x_2138.x, x_2138.y), vec2<f32>(0.0f, 0.0f));
        let x_2141 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2140.x, x_2140.y, x_2141.z, x_2141.w);
        let x_2143 : vec4<f32> = u_xlat8;
        let x_2146 : vec4<f32> = u_xlat8;
        let x_2149 : vec4<f32> = u_xlat9;
        let x_2151 : vec2<f32> = ((-(vec2<f32>(x_2143.x, x_2143.y)) * vec2<f32>(x_2146.x, x_2146.y)) + vec2<f32>(x_2149.y, x_2149.w));
        let x_2152 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2151.x, x_2151.y, x_2152.z, x_2152.w);
        let x_2154 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2154 + vec2<f32>(1.0f, 1.0f));
        let x_2156 : vec4<f32> = u_xlat8;
        let x_2158 : vec2<f32> = (vec2<f32>(x_2156.x, x_2156.y) + vec2<f32>(1.0f, 1.0f));
        let x_2159 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2158.x, x_2158.y, x_2159.z, x_2159.w);
        let x_2161 : vec4<f32> = u_xlat9;
        let x_2163 : vec2<f32> = (vec2<f32>(x_2161.x, x_2161.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2164 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2163.x, x_2163.y, x_2164.z, x_2164.w);
        let x_2166 : vec4<f32> = u_xlat10;
        let x_2168 : vec2<f32> = (vec2<f32>(x_2166.x, x_2166.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2169 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2168.x, x_2168.y, x_2169.z, x_2169.w);
        let x_2171 : vec2<f32> = u_xlat54;
        let x_2172 : vec2<f32> = (x_2171 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2173 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2172.x, x_2172.y, x_2173.z, x_2173.w);
        let x_2175 : vec4<f32> = u_xlat8;
        let x_2177 : vec2<f32> = (vec2<f32>(x_2175.x, x_2175.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2178 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2177.x, x_2177.y, x_2178.z, x_2178.w);
        let x_2180 : vec4<f32> = u_xlat9;
        let x_2182 : vec2<f32> = (vec2<f32>(x_2180.y, x_2180.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2183 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2182.x, x_2182.y, x_2183.z, x_2183.w);
        let x_2186 : f32 = u_xlat10.x;
        u_xlat11.z = x_2186;
        let x_2189 : f32 = u_xlat8.x;
        u_xlat11.w = x_2189;
        let x_2192 : f32 = u_xlat13.x;
        u_xlat12.z = x_2192;
        let x_2195 : f32 = u_xlat52.x;
        u_xlat12.w = x_2195;
        let x_2197 : vec4<f32> = u_xlat11;
        let x_2199 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2197.z, x_2197.w, x_2197.x, x_2197.z) + vec4<f32>(x_2199.z, x_2199.w, x_2199.x, x_2199.z));
        let x_2203 : f32 = u_xlat11.y;
        u_xlat10.z = x_2203;
        let x_2206 : f32 = u_xlat8.y;
        u_xlat10.w = x_2206;
        let x_2209 : f32 = u_xlat12.y;
        u_xlat13.z = x_2209;
        let x_2212 : f32 = u_xlat52.y;
        u_xlat13.w = x_2212;
        let x_2214 : vec4<f32> = u_xlat10;
        let x_2216 : vec4<f32> = u_xlat13;
        let x_2218 : vec3<f32> = (vec3<f32>(x_2214.z, x_2214.y, x_2214.w) + vec3<f32>(x_2216.z, x_2216.y, x_2216.w));
        let x_2219 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2218.x, x_2218.y, x_2218.z, x_2219.w);
        let x_2221 : vec4<f32> = u_xlat12;
        let x_2223 : vec4<f32> = u_xlat9;
        let x_2225 : vec3<f32> = (vec3<f32>(x_2221.x, x_2221.z, x_2221.w) / vec3<f32>(x_2223.z, x_2223.w, x_2223.y));
        let x_2226 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2225.x, x_2225.y, x_2225.z, x_2226.w);
        let x_2228 : vec4<f32> = u_xlat10;
        let x_2230 : vec3<f32> = (vec3<f32>(x_2228.x, x_2228.y, x_2228.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2231 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2230.x, x_2230.y, x_2230.z, x_2231.w);
        let x_2233 : vec4<f32> = u_xlat13;
        let x_2235 : vec4<f32> = u_xlat8;
        let x_2237 : vec3<f32> = (vec3<f32>(x_2233.z, x_2233.y, x_2233.w) / vec3<f32>(x_2235.x, x_2235.y, x_2235.z));
        let x_2238 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2237.x, x_2237.y, x_2237.z, x_2238.w);
        let x_2240 : vec4<f32> = u_xlat11;
        let x_2242 : vec3<f32> = (vec3<f32>(x_2240.x, x_2240.y, x_2240.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2243 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2242.x, x_2242.y, x_2242.z, x_2243.w);
        let x_2245 : vec4<f32> = u_xlat10;
        let x_2248 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2250 : vec3<f32> = (vec3<f32>(x_2245.y, x_2245.x, x_2245.z) * vec3<f32>(x_2248.x, x_2248.x, x_2248.x));
        let x_2251 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2250.x, x_2250.y, x_2250.z, x_2251.w);
        let x_2253 : vec4<f32> = u_xlat11;
        let x_2256 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2258 : vec3<f32> = (vec3<f32>(x_2253.x, x_2253.y, x_2253.z) * vec3<f32>(x_2256.y, x_2256.y, x_2256.y));
        let x_2259 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2258.x, x_2258.y, x_2258.z, x_2259.w);
        let x_2262 : f32 = u_xlat11.x;
        u_xlat10.w = x_2262;
        let x_2264 : vec2<f32> = u_xlat51;
        let x_2267 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2270 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2264.x, x_2264.y, x_2264.x, x_2264.y) * vec4<f32>(x_2267.x, x_2267.y, x_2267.x, x_2267.y)) + vec4<f32>(x_2270.y, x_2270.w, x_2270.x, x_2270.w));
        let x_2273 : vec2<f32> = u_xlat51;
        let x_2275 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2278 : vec4<f32> = u_xlat10;
        let x_2280 : vec2<f32> = ((x_2273 * vec2<f32>(x_2275.x, x_2275.y)) + vec2<f32>(x_2278.z, x_2278.w));
        let x_2281 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2280.x, x_2280.y, x_2281.z, x_2281.w);
        let x_2284 : f32 = u_xlat10.y;
        u_xlat11.w = x_2284;
        let x_2286 : vec4<f32> = u_xlat11;
        let x_2287 : vec2<f32> = vec2<f32>(x_2286.y, x_2286.z);
        let x_2288 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2288.x, x_2287.x, x_2288.z, x_2287.y);
        let x_2290 : vec2<f32> = u_xlat51;
        let x_2293 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2296 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2290.x, x_2290.y, x_2290.x, x_2290.y) * vec4<f32>(x_2293.x, x_2293.y, x_2293.x, x_2293.y)) + vec4<f32>(x_2296.x, x_2296.y, x_2296.z, x_2296.y));
        let x_2299 : vec2<f32> = u_xlat51;
        let x_2302 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2305 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2299.x, x_2299.y, x_2299.x, x_2299.y) * vec4<f32>(x_2302.x, x_2302.y, x_2302.x, x_2302.y)) + vec4<f32>(x_2305.w, x_2305.y, x_2305.w, x_2305.z));
        let x_2308 : vec2<f32> = u_xlat51;
        let x_2311 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2314 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2308.x, x_2308.y, x_2308.x, x_2308.y) * vec4<f32>(x_2311.x, x_2311.y, x_2311.x, x_2311.y)) + vec4<f32>(x_2314.x, x_2314.w, x_2314.z, x_2314.w));
        let x_2317 : vec4<f32> = u_xlat8;
        let x_2319 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2317.x, x_2317.x, x_2317.x, x_2317.y) * vec4<f32>(x_2319.z, x_2319.w, x_2319.y, x_2319.z));
        let x_2322 : vec4<f32> = u_xlat8;
        let x_2324 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2322.y, x_2322.y, x_2322.z, x_2322.z) * x_2324);
        let x_2327 : f32 = u_xlat8.z;
        let x_2329 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2327 * x_2329);
        let x_2333 : vec4<f32> = u_xlat12;
        let x_2334 : vec2<f32> = vec2<f32>(x_2333.x, x_2333.y);
        let x_2336 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2334.x, x_2334.y, x_2336);
        let x_2344 : vec3<f32> = txVec34;
        let x_2346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2344.xy, x_2344.z);
        u_xlat73 = x_2346;
        let x_2348 : vec4<f32> = u_xlat12;
        let x_2349 : vec2<f32> = vec2<f32>(x_2348.z, x_2348.w);
        let x_2351 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2349.x, x_2349.y, x_2351);
        let x_2358 : vec3<f32> = txVec35;
        let x_2360 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2358.xy, x_2358.z);
        u_xlat8.x = x_2360;
        let x_2363 : f32 = u_xlat8.x;
        let x_2365 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2363 * x_2365);
        let x_2369 : f32 = u_xlat15.x;
        let x_2370 : f32 = u_xlat73;
        let x_2373 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2369 * x_2370) + x_2373);
        let x_2376 : vec4<f32> = u_xlat13;
        let x_2377 : vec2<f32> = vec2<f32>(x_2376.x, x_2376.y);
        let x_2379 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2377.x, x_2377.y, x_2379);
        let x_2386 : vec3<f32> = txVec36;
        let x_2388 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2386.xy, x_2386.z);
        u_xlat8.x = x_2388;
        let x_2391 : f32 = u_xlat15.z;
        let x_2393 : f32 = u_xlat8.x;
        let x_2395 : f32 = u_xlat73;
        u_xlat73 = ((x_2391 * x_2393) + x_2395);
        let x_2398 : vec4<f32> = u_xlat11;
        let x_2399 : vec2<f32> = vec2<f32>(x_2398.x, x_2398.y);
        let x_2401 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2399.x, x_2399.y, x_2401);
        let x_2408 : vec3<f32> = txVec37;
        let x_2410 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2408.xy, x_2408.z);
        u_xlat8.x = x_2410;
        let x_2413 : f32 = u_xlat15.w;
        let x_2415 : f32 = u_xlat8.x;
        let x_2417 : f32 = u_xlat73;
        u_xlat73 = ((x_2413 * x_2415) + x_2417);
        let x_2420 : vec4<f32> = u_xlat14;
        let x_2421 : vec2<f32> = vec2<f32>(x_2420.x, x_2420.y);
        let x_2423 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2421.x, x_2421.y, x_2423);
        let x_2430 : vec3<f32> = txVec38;
        let x_2432 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2430.xy, x_2430.z);
        u_xlat8.x = x_2432;
        let x_2435 : f32 = u_xlat16.x;
        let x_2437 : f32 = u_xlat8.x;
        let x_2439 : f32 = u_xlat73;
        u_xlat73 = ((x_2435 * x_2437) + x_2439);
        let x_2442 : vec4<f32> = u_xlat14;
        let x_2443 : vec2<f32> = vec2<f32>(x_2442.z, x_2442.w);
        let x_2445 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2443.x, x_2443.y, x_2445);
        let x_2452 : vec3<f32> = txVec39;
        let x_2454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2452.xy, x_2452.z);
        u_xlat8.x = x_2454;
        let x_2457 : f32 = u_xlat16.y;
        let x_2459 : f32 = u_xlat8.x;
        let x_2461 : f32 = u_xlat73;
        u_xlat73 = ((x_2457 * x_2459) + x_2461);
        let x_2464 : vec4<f32> = u_xlat11;
        let x_2465 : vec2<f32> = vec2<f32>(x_2464.z, x_2464.w);
        let x_2467 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2465.x, x_2465.y, x_2467);
        let x_2474 : vec3<f32> = txVec40;
        let x_2476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2474.xy, x_2474.z);
        u_xlat8.x = x_2476;
        let x_2479 : f32 = u_xlat16.z;
        let x_2481 : f32 = u_xlat8.x;
        let x_2483 : f32 = u_xlat73;
        u_xlat73 = ((x_2479 * x_2481) + x_2483);
        let x_2486 : vec4<f32> = u_xlat10;
        let x_2487 : vec2<f32> = vec2<f32>(x_2486.x, x_2486.y);
        let x_2489 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2487.x, x_2487.y, x_2489);
        let x_2496 : vec3<f32> = txVec41;
        let x_2498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2496.xy, x_2496.z);
        u_xlat8.x = x_2498;
        let x_2501 : f32 = u_xlat16.w;
        let x_2503 : f32 = u_xlat8.x;
        let x_2505 : f32 = u_xlat73;
        u_xlat73 = ((x_2501 * x_2503) + x_2505);
        let x_2508 : vec4<f32> = u_xlat10;
        let x_2509 : vec2<f32> = vec2<f32>(x_2508.z, x_2508.w);
        let x_2511 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2509.x, x_2509.y, x_2511);
        let x_2518 : vec3<f32> = txVec42;
        let x_2520 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2518.xy, x_2518.z);
        u_xlat8.x = x_2520;
        let x_2523 : f32 = u_xlat51.x;
        let x_2525 : f32 = u_xlat8.x;
        let x_2527 : f32 = u_xlat73;
        u_xlat66 = ((x_2523 * x_2525) + x_2527);
      } else {
        let x_2530 : vec4<f32> = u_xlat4;
        let x_2533 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2530.x, x_2530.y) * vec2<f32>(x_2533.z, x_2533.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2537 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2537);
        let x_2539 : vec4<f32> = u_xlat4;
        let x_2542 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2545 : vec2<f32> = u_xlat51;
        let x_2547 : vec2<f32> = ((vec2<f32>(x_2539.x, x_2539.y) * vec2<f32>(x_2542.z, x_2542.w)) + -(x_2545));
        let x_2548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2547.x, x_2547.y, x_2548.z, x_2548.w);
        let x_2550 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2550.x, x_2550.x, x_2550.y, x_2550.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2553 : vec4<f32> = u_xlat9;
        let x_2555 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2553.x, x_2553.x, x_2553.z, x_2553.z) * vec4<f32>(x_2555.x, x_2555.x, x_2555.z, x_2555.z));
        let x_2558 : vec4<f32> = u_xlat10;
        let x_2560 : vec2<f32> = (vec2<f32>(x_2558.y, x_2558.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2561 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2561.x, x_2560.x, x_2561.z, x_2560.y);
        let x_2563 : vec4<f32> = u_xlat10;
        let x_2566 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2563.x, x_2563.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2566.x, x_2566.y)));
        let x_2570 : vec4<f32> = u_xlat8;
        let x_2573 : vec2<f32> = (-(vec2<f32>(x_2570.x, x_2570.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2574 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2573.x, x_2574.y, x_2573.y, x_2574.w);
        let x_2576 : vec4<f32> = u_xlat8;
        let x_2578 : vec2<f32> = min(vec2<f32>(x_2576.x, x_2576.y), vec2<f32>(0.0f, 0.0f));
        let x_2579 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2578.x, x_2578.y, x_2579.z, x_2579.w);
        let x_2581 : vec4<f32> = u_xlat10;
        let x_2584 : vec4<f32> = u_xlat10;
        let x_2587 : vec4<f32> = u_xlat9;
        let x_2589 : vec2<f32> = ((-(vec2<f32>(x_2581.x, x_2581.y)) * vec2<f32>(x_2584.x, x_2584.y)) + vec2<f32>(x_2587.x, x_2587.z));
        let x_2590 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2589.x, x_2590.y, x_2589.y, x_2590.w);
        let x_2592 : vec4<f32> = u_xlat8;
        let x_2594 : vec2<f32> = max(vec2<f32>(x_2592.x, x_2592.y), vec2<f32>(0.0f, 0.0f));
        let x_2595 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2594.x, x_2594.y, x_2595.z, x_2595.w);
        let x_2597 : vec4<f32> = u_xlat10;
        let x_2600 : vec4<f32> = u_xlat10;
        let x_2603 : vec4<f32> = u_xlat9;
        let x_2605 : vec2<f32> = ((-(vec2<f32>(x_2597.x, x_2597.y)) * vec2<f32>(x_2600.x, x_2600.y)) + vec2<f32>(x_2603.y, x_2603.w));
        let x_2606 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2606.x, x_2605.x, x_2606.z, x_2605.y);
        let x_2608 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2608 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2611 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2611 * 0.081632003f);
        let x_2614 : vec2<f32> = u_xlat52;
        let x_2616 : vec2<f32> = (vec2<f32>(x_2614.y, x_2614.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2617 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2616.x, x_2616.y, x_2617.z, x_2617.w);
        let x_2619 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2619.x, x_2619.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2623 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2623 * 0.081632003f);
        let x_2627 : f32 = u_xlat12.y;
        u_xlat10.x = x_2627;
        let x_2629 : vec4<f32> = u_xlat8;
        let x_2632 : vec2<f32> = ((vec2<f32>(x_2629.x, x_2629.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2633 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2633.x, x_2632.x, x_2633.z, x_2632.y);
        let x_2635 : vec4<f32> = u_xlat8;
        let x_2638 : vec2<f32> = ((vec2<f32>(x_2635.x, x_2635.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2639 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2638.x, x_2639.y, x_2638.y, x_2639.w);
        let x_2642 : f32 = u_xlat52.x;
        u_xlat9.y = x_2642;
        let x_2645 : f32 = u_xlat11.y;
        u_xlat9.w = x_2645;
        let x_2647 : vec4<f32> = u_xlat9;
        let x_2648 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2647 + x_2648);
        let x_2650 : vec4<f32> = u_xlat8;
        let x_2653 : vec2<f32> = ((vec2<f32>(x_2650.y, x_2650.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2654 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2654.x, x_2653.x, x_2654.z, x_2653.y);
        let x_2656 : vec4<f32> = u_xlat8;
        let x_2659 : vec2<f32> = ((vec2<f32>(x_2656.y, x_2656.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2660 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2659.x, x_2660.y, x_2659.y, x_2660.w);
        let x_2663 : f32 = u_xlat52.y;
        u_xlat11.y = x_2663;
        let x_2665 : vec4<f32> = u_xlat11;
        let x_2666 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2665 + x_2666);
        let x_2668 : vec4<f32> = u_xlat9;
        let x_2669 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2668 / x_2669);
        let x_2671 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2671 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2673 : vec4<f32> = u_xlat11;
        let x_2674 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2673 / x_2674);
        let x_2676 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2676 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2678 : vec4<f32> = u_xlat9;
        let x_2681 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2678.w, x_2678.x, x_2678.y, x_2678.z) * vec4<f32>(x_2681.x, x_2681.x, x_2681.x, x_2681.x));
        let x_2684 : vec4<f32> = u_xlat11;
        let x_2687 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2684.x, x_2684.w, x_2684.y, x_2684.z) * vec4<f32>(x_2687.y, x_2687.y, x_2687.y, x_2687.y));
        let x_2690 : vec4<f32> = u_xlat9;
        let x_2691 : vec3<f32> = vec3<f32>(x_2690.y, x_2690.z, x_2690.w);
        let x_2692 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2691.x, x_2692.y, x_2691.y, x_2691.z);
        let x_2695 : f32 = u_xlat11.x;
        u_xlat12.y = x_2695;
        let x_2697 : vec2<f32> = u_xlat51;
        let x_2700 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2703 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2697.x, x_2697.y, x_2697.x, x_2697.y) * vec4<f32>(x_2700.x, x_2700.y, x_2700.x, x_2700.y)) + vec4<f32>(x_2703.x, x_2703.y, x_2703.z, x_2703.y));
        let x_2706 : vec2<f32> = u_xlat51;
        let x_2708 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2711 : vec4<f32> = u_xlat12;
        let x_2713 : vec2<f32> = ((x_2706 * vec2<f32>(x_2708.x, x_2708.y)) + vec2<f32>(x_2711.w, x_2711.y));
        let x_2714 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2713.x, x_2713.y, x_2714.z, x_2714.w);
        let x_2717 : f32 = u_xlat12.y;
        u_xlat9.y = x_2717;
        let x_2720 : f32 = u_xlat11.z;
        u_xlat12.y = x_2720;
        let x_2722 : vec2<f32> = u_xlat51;
        let x_2725 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2728 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2722.x, x_2722.y, x_2722.x, x_2722.y) * vec4<f32>(x_2725.x, x_2725.y, x_2725.x, x_2725.y)) + vec4<f32>(x_2728.x, x_2728.y, x_2728.z, x_2728.y));
        let x_2732 : vec2<f32> = u_xlat51;
        let x_2734 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2737 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2732 * vec2<f32>(x_2734.x, x_2734.y)) + vec2<f32>(x_2737.w, x_2737.y));
        let x_2741 : f32 = u_xlat12.y;
        u_xlat9.z = x_2741;
        let x_2743 : vec2<f32> = u_xlat51;
        let x_2746 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2749 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2743.x, x_2743.y, x_2743.x, x_2743.y) * vec4<f32>(x_2746.x, x_2746.y, x_2746.x, x_2746.y)) + vec4<f32>(x_2749.x, x_2749.y, x_2749.x, x_2749.z));
        let x_2753 : f32 = u_xlat11.w;
        u_xlat12.y = x_2753;
        let x_2755 : vec2<f32> = u_xlat51;
        let x_2758 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2761 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2755.x, x_2755.y, x_2755.x, x_2755.y) * vec4<f32>(x_2758.x, x_2758.y, x_2758.x, x_2758.y)) + vec4<f32>(x_2761.x, x_2761.y, x_2761.z, x_2761.y));
        let x_2765 : vec2<f32> = u_xlat51;
        let x_2767 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2770 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2765 * vec2<f32>(x_2767.x, x_2767.y)) + vec2<f32>(x_2770.w, x_2770.y));
        let x_2774 : f32 = u_xlat12.y;
        u_xlat9.w = x_2774;
        let x_2776 : vec2<f32> = u_xlat51;
        let x_2778 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2781 : vec4<f32> = u_xlat9;
        let x_2783 : vec2<f32> = ((x_2776 * vec2<f32>(x_2778.x, x_2778.y)) + vec2<f32>(x_2781.x, x_2781.w));
        let x_2784 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2783.x, x_2783.y, x_2784.z, x_2784.w);
        let x_2786 : vec4<f32> = u_xlat12;
        let x_2787 : vec3<f32> = vec3<f32>(x_2786.x, x_2786.z, x_2786.w);
        let x_2788 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2787.x, x_2788.y, x_2787.y, x_2787.z);
        let x_2790 : vec2<f32> = u_xlat51;
        let x_2793 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2796 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2790.x, x_2790.y, x_2790.x, x_2790.y) * vec4<f32>(x_2793.x, x_2793.y, x_2793.x, x_2793.y)) + vec4<f32>(x_2796.x, x_2796.y, x_2796.z, x_2796.y));
        let x_2800 : vec2<f32> = u_xlat51;
        let x_2802 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2805 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2800 * vec2<f32>(x_2802.x, x_2802.y)) + vec2<f32>(x_2805.w, x_2805.y));
        let x_2809 : f32 = u_xlat9.x;
        u_xlat11.x = x_2809;
        let x_2811 : vec2<f32> = u_xlat51;
        let x_2813 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2816 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_2811 * vec2<f32>(x_2813.x, x_2813.y)) + vec2<f32>(x_2816.x, x_2816.y));
        let x_2820 : vec4<f32> = u_xlat8;
        let x_2822 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2820.x, x_2820.x, x_2820.x, x_2820.x) * x_2822);
        let x_2825 : vec4<f32> = u_xlat8;
        let x_2827 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2825.y, x_2825.y, x_2825.y, x_2825.y) * x_2827);
        let x_2830 : vec4<f32> = u_xlat8;
        let x_2832 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_2830.z, x_2830.z, x_2830.z, x_2830.z) * x_2832);
        let x_2834 : vec4<f32> = u_xlat8;
        let x_2836 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_2834.w, x_2834.w, x_2834.w, x_2834.w) * x_2836);
        let x_2839 : vec4<f32> = u_xlat13;
        let x_2840 : vec2<f32> = vec2<f32>(x_2839.x, x_2839.y);
        let x_2842 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2840.x, x_2840.y, x_2842);
        let x_2849 : vec3<f32> = txVec43;
        let x_2851 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2849.xy, x_2849.z);
        u_xlat9.x = x_2851;
        let x_2854 : vec4<f32> = u_xlat13;
        let x_2855 : vec2<f32> = vec2<f32>(x_2854.z, x_2854.w);
        let x_2857 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2855.x, x_2855.y, x_2857);
        let x_2865 : vec3<f32> = txVec44;
        let x_2867 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2865.xy, x_2865.z);
        u_xlat75 = x_2867;
        let x_2868 : f32 = u_xlat75;
        let x_2870 : f32 = u_xlat19.y;
        u_xlat75 = (x_2868 * x_2870);
        let x_2873 : f32 = u_xlat19.x;
        let x_2875 : f32 = u_xlat9.x;
        let x_2877 : f32 = u_xlat75;
        u_xlat9.x = ((x_2873 * x_2875) + x_2877);
        let x_2881 : vec4<f32> = u_xlat14;
        let x_2882 : vec2<f32> = vec2<f32>(x_2881.x, x_2881.y);
        let x_2884 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2882.x, x_2882.y, x_2884);
        let x_2891 : vec3<f32> = txVec45;
        let x_2893 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2891.xy, x_2891.z);
        u_xlat75 = x_2893;
        let x_2895 : f32 = u_xlat19.z;
        let x_2896 : f32 = u_xlat75;
        let x_2899 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2895 * x_2896) + x_2899);
        let x_2903 : vec4<f32> = u_xlat16;
        let x_2904 : vec2<f32> = vec2<f32>(x_2903.x, x_2903.y);
        let x_2906 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2904.x, x_2904.y, x_2906);
        let x_2913 : vec3<f32> = txVec46;
        let x_2915 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2913.xy, x_2913.z);
        u_xlat75 = x_2915;
        let x_2917 : f32 = u_xlat19.w;
        let x_2918 : f32 = u_xlat75;
        let x_2921 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2917 * x_2918) + x_2921);
        let x_2925 : vec4<f32> = u_xlat15;
        let x_2926 : vec2<f32> = vec2<f32>(x_2925.x, x_2925.y);
        let x_2928 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2926.x, x_2926.y, x_2928);
        let x_2935 : vec3<f32> = txVec47;
        let x_2937 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2935.xy, x_2935.z);
        u_xlat75 = x_2937;
        let x_2939 : f32 = u_xlat20.x;
        let x_2940 : f32 = u_xlat75;
        let x_2943 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2939 * x_2940) + x_2943);
        let x_2947 : vec4<f32> = u_xlat15;
        let x_2948 : vec2<f32> = vec2<f32>(x_2947.z, x_2947.w);
        let x_2950 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2948.x, x_2948.y, x_2950);
        let x_2957 : vec3<f32> = txVec48;
        let x_2959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2957.xy, x_2957.z);
        u_xlat75 = x_2959;
        let x_2961 : f32 = u_xlat20.y;
        let x_2962 : f32 = u_xlat75;
        let x_2965 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2961 * x_2962) + x_2965);
        let x_2969 : vec2<f32> = u_xlat58;
        let x_2971 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_2969.x, x_2969.y, x_2971);
        let x_2978 : vec3<f32> = txVec49;
        let x_2980 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2978.xy, x_2978.z);
        u_xlat75 = x_2980;
        let x_2982 : f32 = u_xlat20.z;
        let x_2983 : f32 = u_xlat75;
        let x_2986 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2982 * x_2983) + x_2986);
        let x_2990 : vec4<f32> = u_xlat16;
        let x_2991 : vec2<f32> = vec2<f32>(x_2990.z, x_2990.w);
        let x_2993 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_2991.x, x_2991.y, x_2993);
        let x_3000 : vec3<f32> = txVec50;
        let x_3002 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3000.xy, x_3000.z);
        u_xlat75 = x_3002;
        let x_3004 : f32 = u_xlat20.w;
        let x_3005 : f32 = u_xlat75;
        let x_3008 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3004 * x_3005) + x_3008);
        let x_3012 : vec4<f32> = u_xlat17;
        let x_3013 : vec2<f32> = vec2<f32>(x_3012.x, x_3012.y);
        let x_3015 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3013.x, x_3013.y, x_3015);
        let x_3022 : vec3<f32> = txVec51;
        let x_3024 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3022.xy, x_3022.z);
        u_xlat75 = x_3024;
        let x_3026 : f32 = u_xlat21.x;
        let x_3027 : f32 = u_xlat75;
        let x_3030 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3026 * x_3027) + x_3030);
        let x_3034 : vec4<f32> = u_xlat17;
        let x_3035 : vec2<f32> = vec2<f32>(x_3034.z, x_3034.w);
        let x_3037 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3035.x, x_3035.y, x_3037);
        let x_3044 : vec3<f32> = txVec52;
        let x_3046 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3044.xy, x_3044.z);
        u_xlat75 = x_3046;
        let x_3048 : f32 = u_xlat21.y;
        let x_3049 : f32 = u_xlat75;
        let x_3052 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3048 * x_3049) + x_3052);
        let x_3056 : vec2<f32> = u_xlat31;
        let x_3058 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3056.x, x_3056.y, x_3058);
        let x_3065 : vec3<f32> = txVec53;
        let x_3067 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3065.xy, x_3065.z);
        u_xlat31.x = x_3067;
        let x_3070 : f32 = u_xlat21.z;
        let x_3072 : f32 = u_xlat31.x;
        let x_3075 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3070 * x_3072) + x_3075);
        let x_3079 : vec4<f32> = u_xlat18;
        let x_3080 : vec2<f32> = vec2<f32>(x_3079.x, x_3079.y);
        let x_3082 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3080.x, x_3080.y, x_3082);
        let x_3089 : vec3<f32> = txVec54;
        let x_3091 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3089.xy, x_3089.z);
        u_xlat31.x = x_3091;
        let x_3094 : f32 = u_xlat21.w;
        let x_3096 : f32 = u_xlat31.x;
        let x_3099 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3094 * x_3096) + x_3099);
        let x_3103 : vec4<f32> = u_xlat12;
        let x_3104 : vec2<f32> = vec2<f32>(x_3103.x, x_3103.y);
        let x_3106 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3104.x, x_3104.y, x_3106);
        let x_3113 : vec3<f32> = txVec55;
        let x_3115 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3113.xy, x_3113.z);
        u_xlat31.x = x_3115;
        let x_3118 : f32 = u_xlat8.x;
        let x_3120 : f32 = u_xlat31.x;
        let x_3123 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3118 * x_3120) + x_3123);
        let x_3127 : vec4<f32> = u_xlat12;
        let x_3128 : vec2<f32> = vec2<f32>(x_3127.z, x_3127.w);
        let x_3130 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3128.x, x_3128.y, x_3130);
        let x_3137 : vec3<f32> = txVec56;
        let x_3139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3137.xy, x_3137.z);
        u_xlat9.x = x_3139;
        let x_3142 : f32 = u_xlat8.y;
        let x_3144 : f32 = u_xlat9.x;
        let x_3147 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3142 * x_3144) + x_3147);
        let x_3151 : vec2<f32> = u_xlat55;
        let x_3153 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3151.x, x_3151.y, x_3153);
        let x_3161 : vec3<f32> = txVec57;
        let x_3163 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3161.xy, x_3161.z);
        u_xlat30 = x_3163;
        let x_3165 : f32 = u_xlat8.z;
        let x_3166 : f32 = u_xlat30;
        let x_3169 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3165 * x_3166) + x_3169);
        let x_3173 : vec2<f32> = u_xlat51;
        let x_3175 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3173.x, x_3173.y, x_3175);
        let x_3182 : vec3<f32> = txVec58;
        let x_3184 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3182.xy, x_3182.z);
        u_xlat51.x = x_3184;
        let x_3187 : f32 = u_xlat8.w;
        let x_3189 : f32 = u_xlat51.x;
        let x_3192 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3187 * x_3189) + x_3192);
      }
    }
  } else {
    let x_3196 : vec4<f32> = u_xlat4;
    let x_3197 : vec2<f32> = vec2<f32>(x_3196.x, x_3196.y);
    let x_3199 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3197.x, x_3197.y, x_3199);
    let x_3206 : vec3<f32> = txVec59;
    let x_3208 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3206.xy, x_3206.z);
    u_xlat66 = x_3208;
  }
  let x_3209 : f32 = u_xlat66;
  let x_3211 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3213 : f32 = u_xlat70;
  u_xlat66 = ((x_3209 * x_3211) + x_3213);
  let x_3215 : bool = u_xlatb5;
  let x_3216 : f32 = u_xlat66;
  u_xlat66 = select(x_3216, 1.0f, x_3215);
  let x_3218 : vec3<f32> = vs_INTERP0;
  let x_3220 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3222 : vec3<f32> = (x_3218 + -(x_3220));
  let x_3223 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3222.x, x_3222.y, x_3222.z, x_3223.w);
  let x_3225 : vec4<f32> = u_xlat4;
  let x_3227 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3225.x, x_3225.y, x_3225.z), vec3<f32>(x_3227.x, x_3227.y, x_3227.z));
  let x_3232 : f32 = u_xlat4.x;
  let x_3234 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3237 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3232 * x_3234) + x_3237);
  let x_3241 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3241, 0.0f, 1.0f);
  let x_3245 : f32 = u_xlat66;
  u_xlat26 = (-(x_3245) + 1.0f);
  let x_3249 : f32 = u_xlat4.x;
  let x_3250 : f32 = u_xlat26;
  let x_3252 : f32 = u_xlat66;
  u_xlat66 = ((x_3249 * x_3250) + x_3252);
  let x_3260 : f32 = x_3258.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3260 == -1.0f));
  let x_3264 : bool = u_xlatb4.x;
  if (x_3264) {
    let x_3267 : vec3<f32> = vs_INTERP0;
    let x_3270 : vec4<f32> = x_3258.x_MainLightWorldToLight[1i];
    let x_3272 : vec2<f32> = (vec2<f32>(x_3267.y, x_3267.y) * vec2<f32>(x_3270.x, x_3270.y));
    let x_3273 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3272.x, x_3272.y, x_3273.z, x_3273.w);
    let x_3276 : vec4<f32> = x_3258.x_MainLightWorldToLight[0i];
    let x_3278 : vec3<f32> = vs_INTERP0;
    let x_3281 : vec4<f32> = u_xlat4;
    let x_3283 : vec2<f32> = ((vec2<f32>(x_3276.x, x_3276.y) * vec2<f32>(x_3278.x, x_3278.x)) + vec2<f32>(x_3281.x, x_3281.y));
    let x_3284 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3283.x, x_3283.y, x_3284.z, x_3284.w);
    let x_3287 : vec4<f32> = x_3258.x_MainLightWorldToLight[2i];
    let x_3289 : vec3<f32> = vs_INTERP0;
    let x_3292 : vec4<f32> = u_xlat4;
    let x_3294 : vec2<f32> = ((vec2<f32>(x_3287.x, x_3287.y) * vec2<f32>(x_3289.z, x_3289.z)) + vec2<f32>(x_3292.x, x_3292.y));
    let x_3295 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3294.x, x_3294.y, x_3295.z, x_3295.w);
    let x_3297 : vec4<f32> = u_xlat4;
    let x_3300 : vec4<f32> = x_3258.x_MainLightWorldToLight[3i];
    let x_3302 : vec2<f32> = (vec2<f32>(x_3297.x, x_3297.y) + vec2<f32>(x_3300.x, x_3300.y));
    let x_3303 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3302.x, x_3302.y, x_3303.z, x_3303.w);
    let x_3305 : vec4<f32> = u_xlat4;
    let x_3308 : vec2<f32> = ((vec2<f32>(x_3305.x, x_3305.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3309 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3308.x, x_3308.y, x_3309.z, x_3309.w);
    let x_3316 : vec4<f32> = u_xlat4;
    let x_3319 : f32 = x_66.x_GlobalMipBias.x;
    let x_3320 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3316.x, x_3316.y), x_3319);
    u_xlat4 = x_3320;
    let x_3322 : f32 = x_3258.x_MainLightCookieTextureFormat;
    let x_3324 : f32 = x_3258.x_MainLightCookieTextureFormat;
    let x_3326 : f32 = x_3258.x_MainLightCookieTextureFormat;
    let x_3328 : f32 = x_3258.x_MainLightCookieTextureFormat;
    let x_3329 : vec4<f32> = vec4<f32>(x_3322, x_3324, x_3326, x_3328);
    let x_3336 : vec4<bool> = (vec4<f32>(x_3329.x, x_3329.y, x_3329.z, x_3329.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb51 = vec2<bool>(x_3336.x, x_3336.y);
    let x_3339 : bool = u_xlatb51.y;
    if (x_3339) {
      let x_3344 : f32 = u_xlat4.w;
      x_3340 = x_3344;
    } else {
      let x_3347 : f32 = u_xlat4.x;
      x_3340 = x_3347;
    }
    let x_3348 : f32 = x_3340;
    u_xlat70 = x_3348;
    let x_3350 : bool = u_xlatb51.x;
    if (x_3350) {
      let x_3354 : vec4<f32> = u_xlat4;
      x_3351 = vec3<f32>(x_3354.x, x_3354.y, x_3354.z);
    } else {
      let x_3357 : f32 = u_xlat70;
      x_3351 = vec3<f32>(x_3357, x_3357, x_3357);
    }
    let x_3359 : vec3<f32> = x_3351;
    let x_3360 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3359.x, x_3359.y, x_3359.z, x_3360.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3366 : vec4<f32> = u_xlat4;
  let x_3369 : vec4<f32> = x_66.x_MainLightColor;
  let x_3371 : vec3<f32> = (vec3<f32>(x_3366.x, x_3366.y, x_3366.z) * vec3<f32>(x_3369.x, x_3369.y, x_3369.z));
  let x_3372 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3371.x, x_3371.y, x_3371.z, x_3372.w);
  let x_3374 : vec2<f32> = u_xlat29;
  let x_3376 : vec4<f32> = u_xlat4;
  let x_3378 : vec3<f32> = (vec3<f32>(x_3374.x, x_3374.x, x_3374.x) * vec3<f32>(x_3376.x, x_3376.y, x_3376.z));
  let x_3379 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3378.x, x_3378.y, x_3378.z, x_3379.w);
  let x_3381 : vec4<f32> = u_xlat6;
  let x_3384 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(vec3<f32>(x_3381.x, x_3381.y, x_3381.z)), x_3384);
  let x_3386 : f32 = u_xlat70;
  let x_3387 : f32 = u_xlat70;
  u_xlat70 = (x_3386 + x_3387);
  let x_3389 : vec3<f32> = u_xlat25;
  let x_3390 : f32 = u_xlat70;
  let x_3394 : vec4<f32> = u_xlat6;
  let x_3397 : vec3<f32> = ((x_3389 * -(vec3<f32>(x_3390, x_3390, x_3390))) + -(vec3<f32>(x_3394.x, x_3394.y, x_3394.z)));
  let x_3398 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3397.x, x_3397.y, x_3397.z, x_3398.w);
  let x_3400 : vec3<f32> = u_xlat25;
  let x_3401 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(x_3400, vec3<f32>(x_3401.x, x_3401.y, x_3401.z));
  let x_3404 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3404, 0.0f, 1.0f);
  let x_3406 : f32 = u_xlat70;
  u_xlat70 = (-(x_3406) + 1.0f);
  let x_3409 : f32 = u_xlat70;
  let x_3410 : f32 = u_xlat70;
  u_xlat70 = (x_3409 * x_3410);
  let x_3412 : f32 = u_xlat70;
  let x_3413 : f32 = u_xlat70;
  u_xlat70 = (x_3412 * x_3413);
  let x_3416 : f32 = u_xlat23.x;
  u_xlat5.x = ((-(x_3416) * 0.699999988f) + 1.700000048f);
  let x_3424 : f32 = u_xlat23.x;
  let x_3426 : f32 = u_xlat5.x;
  u_xlat23.x = (x_3424 * x_3426);
  let x_3430 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3430 * 6.0f);
  let x_3442 : vec4<f32> = u_xlat8;
  let x_3445 : f32 = u_xlat23.x;
  let x_3446 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3442.x, x_3442.y, x_3442.z), x_3445);
  u_xlat8 = x_3446;
  let x_3448 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3448 + -1.0f);
  let x_3452 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3454 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3452 * x_3454) + 1.0f);
  let x_3459 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3459, 0.0f);
  let x_3463 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3463);
  let x_3467 : f32 = u_xlat23.x;
  let x_3469 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3467 * x_3469);
  let x_3473 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3473);
  let x_3477 : f32 = u_xlat23.x;
  let x_3479 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3477 * x_3479);
  let x_3482 : vec4<f32> = u_xlat8;
  let x_3484 : vec3<f32> = u_xlat23;
  let x_3486 : vec3<f32> = (vec3<f32>(x_3482.x, x_3482.y, x_3482.z) * vec3<f32>(x_3484.x, x_3484.x, x_3484.x));
  let x_3487 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3486.x, x_3486.y, x_3486.z, x_3487.w);
  let x_3489 : f32 = u_xlat67;
  let x_3491 : f32 = u_xlat67;
  let x_3495 : vec2<f32> = ((vec2<f32>(x_3489, x_3489) * vec2<f32>(x_3491, x_3491)) + vec2<f32>(-1.0f, 1.0f));
  let x_3496 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3495.x, x_3496.y, x_3495.y);
  let x_3499 : f32 = u_xlat23.z;
  u_xlat67 = (1.0f / x_3499);
  let x_3502 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3502 + -0.039999999f);
  let x_3506 : f32 = u_xlat70;
  let x_3508 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3506 * x_3508) + 0.039999999f);
  let x_3513 : f32 = u_xlat67;
  let x_3515 : f32 = u_xlat3.x;
  u_xlat67 = (x_3513 * x_3515);
  let x_3517 : f32 = u_xlat67;
  let x_3519 : vec4<f32> = u_xlat8;
  let x_3521 : vec3<f32> = (vec3<f32>(x_3517, x_3517, x_3517) * vec3<f32>(x_3519.x, x_3519.y, x_3519.z));
  let x_3522 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3521.x, x_3521.y, x_3521.z, x_3522.w);
  let x_3524 : vec3<f32> = u_xlat27;
  let x_3525 : vec3<f32> = u_xlat2;
  let x_3527 : vec4<f32> = u_xlat8;
  let x_3529 : vec3<f32> = ((x_3524 * x_3525) + vec3<f32>(x_3527.x, x_3527.y, x_3527.z));
  let x_3530 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3529.x, x_3529.y, x_3529.z, x_3530.w);
  let x_3532 : f32 = u_xlat66;
  let x_3534 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3532 * x_3534);
  let x_3536 : vec3<f32> = u_xlat25;
  let x_3538 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3536, vec3<f32>(x_3538.x, x_3538.y, x_3538.z));
  let x_3541 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3541, 0.0f, 1.0f);
  let x_3543 : f32 = u_xlat66;
  let x_3544 : f32 = u_xlat67;
  u_xlat66 = (x_3543 * x_3544);
  let x_3546 : f32 = u_xlat66;
  let x_3548 : vec4<f32> = u_xlat4;
  let x_3550 : vec3<f32> = (vec3<f32>(x_3546, x_3546, x_3546) * vec3<f32>(x_3548.x, x_3548.y, x_3548.z));
  let x_3551 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3550.x, x_3550.y, x_3550.z, x_3551.w);
  let x_3553 : vec4<f32> = u_xlat6;
  let x_3556 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3558 : vec3<f32> = (vec3<f32>(x_3553.x, x_3553.y, x_3553.z) + vec3<f32>(x_3556.x, x_3556.y, x_3556.z));
  let x_3559 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3558.x, x_3558.y, x_3558.z, x_3559.w);
  let x_3561 : vec4<f32> = u_xlat8;
  let x_3563 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3561.x, x_3561.y, x_3561.z), vec3<f32>(x_3563.x, x_3563.y, x_3563.z));
  let x_3566 : f32 = u_xlat66;
  u_xlat66 = max(x_3566, 1.17549435e-37f);
  let x_3569 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3569);
  let x_3571 : f32 = u_xlat66;
  let x_3573 : vec4<f32> = u_xlat8;
  let x_3575 : vec3<f32> = (vec3<f32>(x_3571, x_3571, x_3571) * vec3<f32>(x_3573.x, x_3573.y, x_3573.z));
  let x_3576 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3575.x, x_3575.y, x_3575.z, x_3576.w);
  let x_3578 : vec3<f32> = u_xlat25;
  let x_3579 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3578, vec3<f32>(x_3579.x, x_3579.y, x_3579.z));
  let x_3582 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3582, 0.0f, 1.0f);
  let x_3585 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3587 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3585.x, x_3585.y, x_3585.z), vec3<f32>(x_3587.x, x_3587.y, x_3587.z));
  let x_3590 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3590, 0.0f, 1.0f);
  let x_3592 : f32 = u_xlat66;
  let x_3593 : f32 = u_xlat66;
  u_xlat66 = (x_3592 * x_3593);
  let x_3595 : f32 = u_xlat66;
  let x_3597 : f32 = u_xlat23.x;
  u_xlat66 = ((x_3595 * x_3597) + 1.000010014f);
  let x_3601 : f32 = u_xlat67;
  let x_3602 : f32 = u_xlat67;
  u_xlat67 = (x_3601 * x_3602);
  let x_3604 : f32 = u_xlat66;
  let x_3605 : f32 = u_xlat66;
  u_xlat66 = (x_3604 * x_3605);
  let x_3607 : f32 = u_xlat67;
  u_xlat67 = max(x_3607, 0.100000001f);
  let x_3610 : f32 = u_xlat66;
  let x_3611 : f32 = u_xlat67;
  u_xlat66 = (x_3610 * x_3611);
  let x_3613 : f32 = u_xlat72;
  let x_3614 : f32 = u_xlat66;
  u_xlat66 = (x_3613 * x_3614);
  let x_3616 : f32 = u_xlat68;
  let x_3617 : f32 = u_xlat66;
  u_xlat66 = (x_3616 / x_3617);
  let x_3619 : f32 = u_xlat66;
  let x_3623 : vec3<f32> = u_xlat2;
  let x_3624 : vec3<f32> = ((vec3<f32>(x_3619, x_3619, x_3619) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3623);
  let x_3625 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3624.x, x_3624.y, x_3624.z, x_3625.w);
  let x_3627 : vec4<f32> = u_xlat4;
  let x_3629 : vec4<f32> = u_xlat8;
  let x_3631 : vec3<f32> = (vec3<f32>(x_3627.x, x_3627.y, x_3627.z) * vec3<f32>(x_3629.x, x_3629.y, x_3629.z));
  let x_3632 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3631.x, x_3631.y, x_3631.z, x_3632.w);
  let x_3635 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3637 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3635, x_3637);
  let x_3639 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3639));
  let x_3643 : f32 = x_3258.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3645 : f32 = x_3258.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3647 : f32 = x_3258.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3649 : f32 = x_3258.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3650 : vec4<f32> = vec4<f32>(x_3643, x_3645, x_3647, x_3649);
  let x_3656 : vec4<bool> = (vec4<f32>(x_3650.x, x_3650.y, x_3650.z, x_3650.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb51 = vec2<bool>(x_3656.x, x_3656.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3667 : u32 = u_xlatu_loop_1;
    let x_3668 : u32 = u_xlatu66;
    if ((x_3667 < x_3668)) {
    } else {
      break;
    }
    let x_3671 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3671 >> 2u);
    let x_3674 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3674 & 3u));
    let x_3677 : u32 = u_xlatu3;
    let x_3680 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3677)];
    let x_3690 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3695 : vec4<u32> = indexable[x_3690];
    u_xlat3.x = dot(x_3680, bitcast<vec4<f32>>(x_3695));
    let x_3700 : f32 = u_xlat3.x;
    u_xlatu3 = bitcast<u32>(i32(x_3700));
    let x_3703 : vec3<f32> = vs_INTERP0;
    let x_3715 : u32 = u_xlatu3;
    let x_3718 : vec4<f32> = x_3714.x_AdditionalLightsPosition[bitcast<i32>(x_3715)];
    let x_3721 : u32 = u_xlatu3;
    let x_3724 : vec4<f32> = x_3714.x_AdditionalLightsPosition[bitcast<i32>(x_3721)];
    let x_3726 : vec3<f32> = ((-(x_3703) * vec3<f32>(x_3718.w, x_3718.w, x_3718.w)) + vec3<f32>(x_3724.x, x_3724.y, x_3724.z));
    let x_3727 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3726.x, x_3726.y, x_3726.z, x_3727.w);
    let x_3729 : vec4<f32> = u_xlat9;
    let x_3731 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3729.x, x_3729.y, x_3729.z), vec3<f32>(x_3731.x, x_3731.y, x_3731.z));
    let x_3734 : f32 = u_xlat70;
    u_xlat70 = max(x_3734, 6.10351562e-05f);
    let x_3738 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3738);
    let x_3740 : f32 = u_xlat71;
    let x_3742 : vec4<f32> = u_xlat9;
    let x_3744 : vec3<f32> = (vec3<f32>(x_3740, x_3740, x_3740) * vec3<f32>(x_3742.x, x_3742.y, x_3742.z));
    let x_3745 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3744.x, x_3744.y, x_3744.z, x_3745.w);
    let x_3748 : f32 = u_xlat70;
    u_xlat74 = (1.0f / x_3748);
    let x_3750 : f32 = u_xlat70;
    let x_3751 : u32 = u_xlatu3;
    let x_3754 : f32 = x_3714.x_AdditionalLightsAttenuation[bitcast<i32>(x_3751)].x;
    u_xlat70 = (x_3750 * x_3754);
    let x_3756 : f32 = u_xlat70;
    let x_3758 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3756) * x_3758) + 1.0f);
    let x_3761 : f32 = u_xlat70;
    u_xlat70 = max(x_3761, 0.0f);
    let x_3763 : f32 = u_xlat70;
    let x_3764 : f32 = u_xlat70;
    u_xlat70 = (x_3763 * x_3764);
    let x_3766 : f32 = u_xlat70;
    let x_3767 : f32 = u_xlat74;
    u_xlat70 = (x_3766 * x_3767);
    let x_3769 : u32 = u_xlatu3;
    let x_3772 : vec4<f32> = x_3714.x_AdditionalLightsSpotDir[bitcast<i32>(x_3769)];
    let x_3774 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3772.x, x_3772.y, x_3772.z), vec3<f32>(x_3774.x, x_3774.y, x_3774.z));
    let x_3777 : f32 = u_xlat74;
    let x_3778 : u32 = u_xlatu3;
    let x_3781 : f32 = x_3714.x_AdditionalLightsAttenuation[bitcast<i32>(x_3778)].z;
    let x_3783 : u32 = u_xlatu3;
    let x_3786 : f32 = x_3714.x_AdditionalLightsAttenuation[bitcast<i32>(x_3783)].w;
    u_xlat74 = ((x_3777 * x_3781) + x_3786);
    let x_3788 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3788, 0.0f, 1.0f);
    let x_3790 : f32 = u_xlat74;
    let x_3791 : f32 = u_xlat74;
    u_xlat74 = (x_3790 * x_3791);
    let x_3793 : f32 = u_xlat70;
    let x_3794 : f32 = u_xlat74;
    u_xlat70 = (x_3793 * x_3794);
    let x_3797 : u32 = u_xlatu3;
    u_xlatu74 = (x_3797 >> 5u);
    let x_3800 : u32 = u_xlatu3;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3800) & 31i)));
    let x_3806 : i32 = u_xlati75;
    let x_3808 : u32 = u_xlatu74;
    let x_3811 : f32 = x_3258.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3808)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3806) & bitcast<u32>(x_3811)));
    let x_3815 : i32 = u_xlati74;
    if ((x_3815 != 0i)) {
      let x_3825 : u32 = u_xlatu3;
      let x_3828 : f32 = x_3824.x_AdditionalLightsLightTypes[bitcast<i32>(x_3825)].el;
      u_xlati74 = i32(x_3828);
      let x_3830 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3830 != 0i));
      let x_3834 : u32 = u_xlatu3;
      u_xlati76 = (bitcast<i32>(x_3834) << bitcast<u32>(2i));
      let x_3837 : i32 = u_xlati75;
      if ((x_3837 != 0i)) {
        let x_3841 : vec3<f32> = vs_INTERP0;
        let x_3843 : i32 = u_xlati76;
        let x_3846 : i32 = u_xlati76;
        let x_3850 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_3843 + 1i) / 4i)][((x_3846 + 1i) % 4i)];
        let x_3852 : vec3<f32> = (vec3<f32>(x_3841.y, x_3841.y, x_3841.y) * vec3<f32>(x_3850.x, x_3850.y, x_3850.w));
        let x_3853 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3852.x, x_3852.y, x_3852.z, x_3853.w);
        let x_3855 : i32 = u_xlati76;
        let x_3857 : i32 = u_xlati76;
        let x_3860 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[(x_3855 / 4i)][(x_3857 % 4i)];
        let x_3862 : vec3<f32> = vs_INTERP0;
        let x_3865 : vec4<f32> = u_xlat11;
        let x_3867 : vec3<f32> = ((vec3<f32>(x_3860.x, x_3860.y, x_3860.w) * vec3<f32>(x_3862.x, x_3862.x, x_3862.x)) + vec3<f32>(x_3865.x, x_3865.y, x_3865.z));
        let x_3868 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3867.x, x_3867.y, x_3867.z, x_3868.w);
        let x_3870 : i32 = u_xlati76;
        let x_3873 : i32 = u_xlati76;
        let x_3877 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_3870 + 2i) / 4i)][((x_3873 + 2i) % 4i)];
        let x_3879 : vec3<f32> = vs_INTERP0;
        let x_3882 : vec4<f32> = u_xlat11;
        let x_3884 : vec3<f32> = ((vec3<f32>(x_3877.x, x_3877.y, x_3877.w) * vec3<f32>(x_3879.z, x_3879.z, x_3879.z)) + vec3<f32>(x_3882.x, x_3882.y, x_3882.z));
        let x_3885 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3884.x, x_3884.y, x_3884.z, x_3885.w);
        let x_3887 : vec4<f32> = u_xlat11;
        let x_3889 : i32 = u_xlati76;
        let x_3892 : i32 = u_xlati76;
        let x_3896 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_3889 + 3i) / 4i)][((x_3892 + 3i) % 4i)];
        let x_3898 : vec3<f32> = (vec3<f32>(x_3887.x, x_3887.y, x_3887.z) + vec3<f32>(x_3896.x, x_3896.y, x_3896.w));
        let x_3899 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3898.x, x_3898.y, x_3898.z, x_3899.w);
        let x_3901 : vec4<f32> = u_xlat11;
        let x_3903 : vec4<f32> = u_xlat11;
        let x_3905 : vec2<f32> = (vec2<f32>(x_3901.x, x_3901.y) / vec2<f32>(x_3903.z, x_3903.z));
        let x_3906 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3905.x, x_3905.y, x_3906.z, x_3906.w);
        let x_3908 : vec4<f32> = u_xlat11;
        let x_3911 : vec2<f32> = ((vec2<f32>(x_3908.x, x_3908.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3912 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3911.x, x_3911.y, x_3912.z, x_3912.w);
        let x_3914 : vec4<f32> = u_xlat11;
        let x_3918 : vec2<f32> = clamp(vec2<f32>(x_3914.x, x_3914.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3919 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3918.x, x_3918.y, x_3919.z, x_3919.w);
        let x_3921 : u32 = u_xlatu3;
        let x_3924 : vec4<f32> = x_3824.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3921)];
        let x_3926 : vec4<f32> = u_xlat11;
        let x_3929 : u32 = u_xlatu3;
        let x_3932 : vec4<f32> = x_3824.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3929)];
        let x_3934 : vec2<f32> = ((vec2<f32>(x_3924.x, x_3924.y) * vec2<f32>(x_3926.x, x_3926.y)) + vec2<f32>(x_3932.z, x_3932.w));
        let x_3935 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3934.x, x_3934.y, x_3935.z, x_3935.w);
      } else {
        let x_3939 : i32 = u_xlati74;
        u_xlatb74 = (x_3939 == 1i);
        let x_3941 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_3941);
        let x_3943 : i32 = u_xlati74;
        if ((x_3943 != 0i)) {
          let x_3947 : vec3<f32> = vs_INTERP0;
          let x_3949 : i32 = u_xlati76;
          let x_3952 : i32 = u_xlati76;
          let x_3956 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_3949 + 1i) / 4i)][((x_3952 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_3947.y, x_3947.y) * vec2<f32>(x_3956.x, x_3956.y));
          let x_3959 : i32 = u_xlati76;
          let x_3961 : i32 = u_xlati76;
          let x_3964 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[(x_3959 / 4i)][(x_3961 % 4i)];
          let x_3966 : vec3<f32> = vs_INTERP0;
          let x_3969 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_3964.x, x_3964.y) * vec2<f32>(x_3966.x, x_3966.x)) + x_3969);
          let x_3971 : i32 = u_xlati76;
          let x_3974 : i32 = u_xlati76;
          let x_3978 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_3971 + 2i) / 4i)][((x_3974 + 2i) % 4i)];
          let x_3980 : vec3<f32> = vs_INTERP0;
          let x_3983 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_3978.x, x_3978.y) * vec2<f32>(x_3980.z, x_3980.z)) + x_3983);
          let x_3985 : vec2<f32> = u_xlat55;
          let x_3986 : i32 = u_xlati76;
          let x_3989 : i32 = u_xlati76;
          let x_3993 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_3986 + 3i) / 4i)][((x_3989 + 3i) % 4i)];
          u_xlat55 = (x_3985 + vec2<f32>(x_3993.x, x_3993.y));
          let x_3996 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_3996 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3999 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_3999);
          let x_4001 : u32 = u_xlatu3;
          let x_4004 : vec4<f32> = x_3824.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4001)];
          let x_4006 : vec2<f32> = u_xlat55;
          let x_4008 : u32 = u_xlatu3;
          let x_4011 : vec4<f32> = x_3824.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4008)];
          let x_4013 : vec2<f32> = ((vec2<f32>(x_4004.x, x_4004.y) * x_4006) + vec2<f32>(x_4011.z, x_4011.w));
          let x_4014 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4013.x, x_4013.y, x_4014.z, x_4014.w);
        } else {
          let x_4017 : vec3<f32> = vs_INTERP0;
          let x_4019 : i32 = u_xlati76;
          let x_4022 : i32 = u_xlati76;
          let x_4026 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_4019 + 1i) / 4i)][((x_4022 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4017.y, x_4017.y, x_4017.y, x_4017.y) * x_4026);
          let x_4028 : i32 = u_xlati76;
          let x_4030 : i32 = u_xlati76;
          let x_4033 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[(x_4028 / 4i)][(x_4030 % 4i)];
          let x_4034 : vec3<f32> = vs_INTERP0;
          let x_4037 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4033 * vec4<f32>(x_4034.x, x_4034.x, x_4034.x, x_4034.x)) + x_4037);
          let x_4039 : i32 = u_xlati76;
          let x_4042 : i32 = u_xlati76;
          let x_4046 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_4039 + 2i) / 4i)][((x_4042 + 2i) % 4i)];
          let x_4047 : vec3<f32> = vs_INTERP0;
          let x_4050 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4046 * vec4<f32>(x_4047.z, x_4047.z, x_4047.z, x_4047.z)) + x_4050);
          let x_4052 : vec4<f32> = u_xlat12;
          let x_4053 : i32 = u_xlati76;
          let x_4056 : i32 = u_xlati76;
          let x_4060 : vec4<f32> = x_3824.x_AdditionalLightsWorldToLights[((x_4053 + 3i) / 4i)][((x_4056 + 3i) % 4i)];
          u_xlat12 = (x_4052 + x_4060);
          let x_4062 : vec4<f32> = u_xlat12;
          let x_4064 : vec4<f32> = u_xlat12;
          let x_4066 : vec3<f32> = (vec3<f32>(x_4062.x, x_4062.y, x_4062.z) / vec3<f32>(x_4064.w, x_4064.w, x_4064.w));
          let x_4067 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4066.x, x_4066.y, x_4066.z, x_4067.w);
          let x_4069 : vec4<f32> = u_xlat12;
          let x_4071 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4069.x, x_4069.y, x_4069.z), vec3<f32>(x_4071.x, x_4071.y, x_4071.z));
          let x_4074 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4074);
          let x_4076 : f32 = u_xlat74;
          let x_4078 : vec4<f32> = u_xlat12;
          let x_4080 : vec3<f32> = (vec3<f32>(x_4076, x_4076, x_4076) * vec3<f32>(x_4078.x, x_4078.y, x_4078.z));
          let x_4081 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4080.x, x_4080.y, x_4080.z, x_4081.w);
          let x_4083 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4083.x, x_4083.y, x_4083.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4088 : f32 = u_xlat74;
          u_xlat74 = max(x_4088, 0.000001f);
          let x_4091 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4091);
          let x_4093 : f32 = u_xlat74;
          let x_4095 : vec4<f32> = u_xlat12;
          let x_4097 : vec3<f32> = (vec3<f32>(x_4093, x_4093, x_4093) * vec3<f32>(x_4095.z, x_4095.x, x_4095.y));
          let x_4098 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4097.x, x_4097.y, x_4097.z, x_4098.w);
          let x_4101 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4101);
          let x_4105 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4105, 0.0f, 1.0f);
          let x_4109 : vec4<f32> = u_xlat13;
          let x_4112 : vec4<bool> = (vec4<f32>(x_4109.y, x_4109.z, x_4109.y, x_4109.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4112.x, x_4112.y);
          let x_4115 : bool = u_xlatb55.x;
          if (x_4115) {
            let x_4120 : f32 = u_xlat13.x;
            x_4116 = x_4120;
          } else {
            let x_4123 : f32 = u_xlat13.x;
            x_4116 = -(x_4123);
          }
          let x_4125 : f32 = x_4116;
          u_xlat55.x = x_4125;
          let x_4128 : bool = u_xlatb55.y;
          if (x_4128) {
            let x_4133 : f32 = u_xlat13.x;
            x_4129 = x_4133;
          } else {
            let x_4136 : f32 = u_xlat13.x;
            x_4129 = -(x_4136);
          }
          let x_4138 : f32 = x_4129;
          u_xlat55.y = x_4138;
          let x_4140 : vec4<f32> = u_xlat12;
          let x_4142 : f32 = u_xlat74;
          let x_4145 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4140.x, x_4140.y) * vec2<f32>(x_4142, x_4142)) + x_4145);
          let x_4147 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4147 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4150 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4150, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4154 : u32 = u_xlatu3;
          let x_4157 : vec4<f32> = x_3824.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4154)];
          let x_4159 : vec2<f32> = u_xlat55;
          let x_4161 : u32 = u_xlatu3;
          let x_4164 : vec4<f32> = x_3824.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4161)];
          let x_4166 : vec2<f32> = ((vec2<f32>(x_4157.x, x_4157.y) * x_4159) + vec2<f32>(x_4164.z, x_4164.w));
          let x_4167 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4166.x, x_4166.y, x_4167.z, x_4167.w);
        }
      }
      let x_4174 : vec4<f32> = u_xlat11;
      let x_4177 : f32 = x_66.x_GlobalMipBias.x;
      let x_4178 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4174.x, x_4174.y), x_4177);
      u_xlat11 = x_4178;
      let x_4180 : bool = u_xlatb51.y;
      if (x_4180) {
        let x_4185 : f32 = u_xlat11.w;
        x_4181 = x_4185;
      } else {
        let x_4188 : f32 = u_xlat11.x;
        x_4181 = x_4188;
      }
      let x_4189 : f32 = x_4181;
      u_xlat74 = x_4189;
      let x_4191 : bool = u_xlatb51.x;
      if (x_4191) {
        let x_4195 : vec4<f32> = u_xlat11;
        x_4192 = vec3<f32>(x_4195.x, x_4195.y, x_4195.z);
      } else {
        let x_4198 : f32 = u_xlat74;
        x_4192 = vec3<f32>(x_4198, x_4198, x_4198);
      }
      let x_4200 : vec3<f32> = x_4192;
      let x_4201 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4200.x, x_4200.y, x_4200.z, x_4201.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4207 : vec4<f32> = u_xlat11;
    let x_4209 : u32 = u_xlatu3;
    let x_4212 : vec4<f32> = x_3714.x_AdditionalLightsColor[bitcast<i32>(x_4209)];
    let x_4214 : vec3<f32> = (vec3<f32>(x_4207.x, x_4207.y, x_4207.z) * vec3<f32>(x_4212.x, x_4212.y, x_4212.z));
    let x_4215 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4214.x, x_4214.y, x_4214.z, x_4215.w);
    let x_4217 : vec2<f32> = u_xlat29;
    let x_4219 : vec4<f32> = u_xlat11;
    let x_4221 : vec3<f32> = (vec3<f32>(x_4217.x, x_4217.x, x_4217.x) * vec3<f32>(x_4219.x, x_4219.y, x_4219.z));
    let x_4222 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4221.x, x_4221.y, x_4221.z, x_4222.w);
    let x_4224 : vec3<f32> = u_xlat25;
    let x_4225 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_4224, vec3<f32>(x_4225.x, x_4225.y, x_4225.z));
    let x_4230 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4230, 0.0f, 1.0f);
    let x_4234 : f32 = u_xlat3.x;
    let x_4235 : f32 = u_xlat70;
    u_xlat3.x = (x_4234 * x_4235);
    let x_4238 : vec4<f32> = u_xlat3;
    let x_4240 : vec4<f32> = u_xlat11;
    let x_4242 : vec3<f32> = (vec3<f32>(x_4238.x, x_4238.x, x_4238.x) * vec3<f32>(x_4240.x, x_4240.y, x_4240.z));
    let x_4243 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4242.x, x_4242.y, x_4242.z, x_4243.w);
    let x_4245 : vec4<f32> = u_xlat9;
    let x_4247 : f32 = u_xlat71;
    let x_4250 : vec4<f32> = u_xlat6;
    let x_4252 : vec3<f32> = ((vec3<f32>(x_4245.x, x_4245.y, x_4245.z) * vec3<f32>(x_4247, x_4247, x_4247)) + vec3<f32>(x_4250.x, x_4250.y, x_4250.z));
    let x_4253 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4252.x, x_4252.y, x_4252.z, x_4253.w);
    let x_4255 : vec4<f32> = u_xlat9;
    let x_4257 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_4255.x, x_4255.y, x_4255.z), vec3<f32>(x_4257.x, x_4257.y, x_4257.z));
    let x_4262 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4262, 1.17549435e-37f);
    let x_4266 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_4266);
    let x_4269 : vec4<f32> = u_xlat3;
    let x_4271 : vec4<f32> = u_xlat9;
    let x_4273 : vec3<f32> = (vec3<f32>(x_4269.x, x_4269.x, x_4269.x) * vec3<f32>(x_4271.x, x_4271.y, x_4271.z));
    let x_4274 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4273.x, x_4273.y, x_4273.z, x_4274.w);
    let x_4276 : vec3<f32> = u_xlat25;
    let x_4277 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_4276, vec3<f32>(x_4277.x, x_4277.y, x_4277.z));
    let x_4282 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4282, 0.0f, 1.0f);
    let x_4285 : vec4<f32> = u_xlat10;
    let x_4287 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4285.x, x_4285.y, x_4285.z), vec3<f32>(x_4287.x, x_4287.y, x_4287.z));
    let x_4290 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4290, 0.0f, 1.0f);
    let x_4293 : f32 = u_xlat3.x;
    let x_4295 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4293 * x_4295);
    let x_4299 : f32 = u_xlat3.x;
    let x_4301 : f32 = u_xlat23.x;
    u_xlat3.x = ((x_4299 * x_4301) + 1.000010014f);
    let x_4305 : f32 = u_xlat70;
    let x_4306 : f32 = u_xlat70;
    u_xlat70 = (x_4305 * x_4306);
    let x_4309 : f32 = u_xlat3.x;
    let x_4311 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4309 * x_4311);
    let x_4314 : f32 = u_xlat70;
    u_xlat70 = max(x_4314, 0.100000001f);
    let x_4317 : f32 = u_xlat3.x;
    let x_4318 : f32 = u_xlat70;
    u_xlat3.x = (x_4317 * x_4318);
    let x_4321 : f32 = u_xlat72;
    let x_4323 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4321 * x_4323);
    let x_4326 : f32 = u_xlat68;
    let x_4328 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4326 / x_4328);
    let x_4331 : vec4<f32> = u_xlat3;
    let x_4334 : vec3<f32> = u_xlat2;
    let x_4335 : vec3<f32> = ((vec3<f32>(x_4331.x, x_4331.x, x_4331.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4334);
    let x_4336 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4335.x, x_4335.y, x_4335.z, x_4336.w);
    let x_4338 : vec4<f32> = u_xlat9;
    let x_4340 : vec4<f32> = u_xlat11;
    let x_4343 : vec4<f32> = u_xlat8;
    let x_4345 : vec3<f32> = ((vec3<f32>(x_4338.x, x_4338.y, x_4338.z) * vec3<f32>(x_4340.x, x_4340.y, x_4340.z)) + vec3<f32>(x_4343.x, x_4343.y, x_4343.z));
    let x_4346 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4345.x, x_4345.y, x_4345.z, x_4346.w);

    continuing {
      let x_4348 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4348 + bitcast<u32>(1i));
    }
  }
  let x_4350 : vec4<f32> = u_xlat5;
  let x_4352 : vec4<f32> = u_xlat7;
  let x_4355 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4350.x, x_4350.y, x_4350.z) * vec3<f32>(x_4352.x, x_4352.x, x_4352.x)) + vec3<f32>(x_4355.x, x_4355.y, x_4355.z));
  let x_4358 : vec4<f32> = u_xlat8;
  let x_4360 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4358.x, x_4358.y, x_4358.z) + x_4360);
  let x_4364 : vec4<f32> = vs_INTERP4;
  let x_4366 : vec3<f32> = u_xlat0;
  let x_4368 : vec3<f32> = u_xlat2;
  let x_4369 : vec3<f32> = ((vec3<f32>(x_4364.w, x_4364.w, x_4364.w) * x_4366) + x_4368);
  let x_4370 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4369.x, x_4369.y, x_4369.z, x_4370.w);
  let x_4372 : bool = u_xlatb45;
  if (x_4372) {
    let x_4377 : f32 = u_xlat1.x;
    x_4373 = x_4377;
  } else {
    x_4373 = 1.0f;
  }
  let x_4379 : f32 = x_4373;
  SV_Target0.w = x_4379;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

