type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var x_249 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var x_524 : vec3<f32>;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var x_794 : vec3<f32>;
  var u_xlat19 : f32;
  var x_1064 : vec3<f32>;
  var x_1312 : vec3<f32>;
  var x_1581 : vec3<f32>;
  var x_1834 : vec3<f32>;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_2114 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_99 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_101 : vec2<f32> = vs_TEXCOORD0;
  let x_106 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_111 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_113 : vec3<f32> = u_xlat8;
  let x_116 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_111.x, x_111.y, x_111.z) * vec3<f32>(x_113.x, x_113.x, x_113.x)) + x_116);
  let x_118 : f32 = u_xlat16;
  let x_120 : vec3<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_118, x_118, x_118) * x_120);
  let x_122 : vec3<f32> = u_xlat8;
  u_xlat1 = dpdyCoarse(vec3<f32>(x_122.z, x_122.x, x_122.y));
  let x_127 : vec3<f32> = u_xlat8;
  let x_129 : vec3<f32> = dpdxCoarse(vec3<f32>(x_127.y, x_127.z, x_127.x));
  let x_130 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = u_xlat1;
  let x_134 : vec4<f32> = u_xlat2;
  let x_136 : vec3<f32> = (x_133 * vec3<f32>(x_134.x, x_134.y, x_134.z));
  let x_137 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_136.x, x_136.y, x_136.z, x_137.w);
  let x_139 : vec3<f32> = u_xlat1;
  let x_141 : vec4<f32> = u_xlat2;
  let x_144 : vec4<f32> = u_xlat3;
  u_xlat1 = ((vec3<f32>(x_139.z, x_139.x, x_139.y) * vec3<f32>(x_141.y, x_141.z, x_141.x)) + -(vec3<f32>(x_144.x, x_144.y, x_144.z)));
  let x_149 : vec3<f32> = u_xlat1;
  let x_150 : vec3<f32> = u_xlat1;
  u_xlat25 = dot(x_149, x_150);
  let x_152 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_152);
  let x_154 : f32 = u_xlat25;
  let x_156 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_154, x_154, x_154) * x_156);
  let x_158 : vec2<f32> = vs_TEXCOORD0;
  let x_160 : vec4<f32> = x_33.x_ScaledScreenParams;
  let x_162 : vec2<f32> = (x_158 * vec2<f32>(x_160.x, x_160.y));
  let x_163 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_162.x, x_162.y, x_163.z, x_163.w);
  let x_167 : vec4<f32> = u_xlat2;
  let x_170 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat18 = (vec2<f32>(x_167.x, x_167.y) * vec2<f32>(x_170.z, x_170.z));
  let x_173 : vec2<f32> = u_xlat18;
  u_xlat25 = dot(x_173, vec2<f32>(0.067110561f, 0.00583715f));
  let x_178 : f32 = u_xlat25;
  u_xlat25 = fract(x_178);
  let x_180 : f32 = u_xlat25;
  u_xlat25 = (x_180 * 52.982917786f);
  let x_183 : f32 = u_xlat25;
  u_xlat25 = fract(x_183);
  let x_185 : f32 = u_xlat25;
  u_xlat18.x = fract(x_185);
  let x_189 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_189 * 2.0f) + -1.0f);
  let x_195 : f32 = u_xlat25;
  u_xlat25 = (x_195 + 0.9296875f);
  let x_198 : f32 = u_xlat25;
  u_xlat25 = (x_198 * 6.283185482f);
  let x_202 : f32 = u_xlat3.z;
  let x_205 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_202) * x_205) + 1.0f);
  let x_210 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_210);
  let x_214 : f32 = u_xlat25;
  u_xlat4.x = sin(x_214);
  let x_218 : f32 = u_xlat25;
  u_xlat5.x = cos(x_218);
  let x_222 : f32 = u_xlat18.x;
  let x_224 : f32 = u_xlat5.x;
  u_xlat3.x = (x_222 * x_224);
  let x_228 : f32 = u_xlat18.x;
  let x_230 : f32 = u_xlat4.x;
  u_xlat3.y = (x_228 * x_230);
  let x_233 : vec4<f32> = u_xlat3;
  let x_237 : vec3<f32> = (vec3<f32>(x_233.x, x_233.y, x_233.z) * vec3<f32>(0.353553385f, 0.353553385f, 0.353553385f));
  let x_238 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_237.x, x_237.y, x_237.z, x_238.w);
  let x_240 : vec3<f32> = u_xlat1;
  let x_242 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(-(x_240), vec3<f32>(x_242.x, x_242.y, x_242.z));
  let x_246 : f32 = u_xlat25;
  u_xlatb25 = (x_246 >= 0.0f);
  let x_248 : bool = u_xlatb25;
  if (x_248) {
    let x_252 : vec4<f32> = u_xlat3;
    x_249 = -(vec3<f32>(x_252.x, x_252.y, x_252.z));
  } else {
    let x_256 : vec4<f32> = u_xlat3;
    x_249 = vec3<f32>(x_256.x, x_256.y, x_256.z);
  }
  let x_258 : vec3<f32> = x_249;
  let x_259 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec4<f32> = u_xlat3;
  let x_264 : vec4<f32> = x_33.x_SSAOParams;
  let x_267 : vec3<f32> = u_xlat8;
  let x_268 : vec3<f32> = ((vec3<f32>(x_261.x, x_261.y, x_261.z) * vec3<f32>(x_264.y, x_264.y, x_264.y)) + x_267);
  let x_269 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_268.x, x_268.y, x_268.z, x_269.w);
  let x_271 : vec4<f32> = u_xlat3;
  let x_275 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_271.y, x_271.y) * vec2<f32>(x_275.x, x_275.y));
  let x_279 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_281 : vec4<f32> = u_xlat3;
  let x_284 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_279.x, x_279.y) * vec2<f32>(x_281.x, x_281.x)) + x_284);
  let x_287 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_289 : vec4<f32> = u_xlat3;
  let x_292 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_287.x, x_287.y) * vec2<f32>(x_289.z, x_289.z)) + x_292);
  let x_296 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_296;
  let x_299 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_299;
  let x_302 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_302;
  let x_304 : vec3<f32> = u_xlat4;
  let x_305 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_304, vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_308));
  let x_312 : vec2<f32> = u_xlat18;
  let x_313 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_312 * vec2<f32>(x_313.x, x_313.x)) + vec2<f32>(1.0f, 1.0f));
  let x_318 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_318 * vec2<f32>(0.5f, 0.5f));
  let x_321 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_321, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_328 : vec2<f32> = u_xlat18;
  let x_330 : f32 = x_33.x_GlobalMipBias.x;
  let x_331 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_328, x_330);
  u_xlat3.x = x_331.x;
  let x_336 : f32 = x_33.x_ZBufferParams.z;
  let x_338 : f32 = u_xlat3.x;
  let x_341 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_336 * x_338) + x_341);
  let x_345 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_345);
  let x_348 : f32 = u_xlat25;
  let x_351 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_348) + -(x_351));
  let x_354 : f32 = u_xlat25;
  let x_357 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_354) < x_357);
  let x_359 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_359);
  let x_365 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_365);
  let x_369 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_369);
  let x_372 : f32 = u_xlat25;
  let x_374 : f32 = u_xlat3.x;
  u_xlat25 = (x_372 * x_374);
  let x_378 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_378) + 1.0f);
  let x_382 : f32 = u_xlat11.x;
  let x_384 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_382 * x_384);
  let x_388 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_390 : vec2<f32> = u_xlat18;
  let x_394 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_388.x, x_388.y, x_388.z) * vec3<f32>(x_390.x, x_390.x, x_390.x)) + vec3<f32>(x_394.x, x_394.y, x_394.z));
  let x_398 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_400 : f32 = u_xlat26;
  let x_403 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_398.x, x_398.y, x_398.z) * vec3<f32>(x_400, x_400, x_400)) + x_403);
  let x_405 : vec3<f32> = u_xlat11;
  let x_406 : vec4<f32> = u_xlat3;
  let x_409 : vec3<f32> = u_xlat8;
  let x_411 : vec3<f32> = ((x_405 * vec3<f32>(x_406.x, x_406.x, x_406.x)) + -(x_409));
  let x_412 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_411.x, x_411.y, x_411.z, x_412.w);
  let x_414 : vec4<f32> = u_xlat3;
  let x_416 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_414.x, x_414.y, x_414.z), x_416);
  let x_419 : f32 = u_xlat0;
  let x_424 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_419) * 0.004f) + x_424);
  let x_428 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_428, 0.0f);
  let x_431 : vec4<f32> = u_xlat3;
  let x_433 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_431.x, x_431.y, x_431.z), vec3<f32>(x_433.x, x_433.y, x_433.z));
  let x_436 : f32 = u_xlat26;
  u_xlat26 = (x_436 + 0.0001f);
  let x_439 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_439);
  let x_441 : f32 = u_xlat26;
  let x_443 : f32 = u_xlat18.x;
  u_xlat18.x = (x_441 * x_443);
  let x_446 : vec4<f32> = u_xlat2;
  let x_449 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_446.x, x_446.y, x_446.x, x_446.y) * vec4<f32>(x_449.z, x_449.z, x_449.z, x_449.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_458 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec2<f32>(x_458.x, x_458.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_461 : f32 = u_xlat26;
  u_xlat26 = fract(x_461);
  let x_463 : f32 = u_xlat26;
  u_xlat26 = (x_463 * 52.982917786f);
  let x_465 : f32 = u_xlat26;
  u_xlat26 = fract(x_465);
  let x_467 : f32 = u_xlat26;
  let x_472 : vec2<f32> = (vec2<f32>(x_467, x_467) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_473 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_472.x, x_472.y, x_473.z, x_473.w);
  let x_476 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_476);
  let x_478 : f32 = u_xlat26;
  u_xlat5.z = ((x_478 * 2.0f) + -1.0f);
  let x_483 : f32 = u_xlat3.y;
  u_xlat26 = (x_483 * 6.283185482f);
  let x_486 : f32 = u_xlat5.z;
  let x_489 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_486) * x_489) + 1.0f);
  let x_494 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_494);
  let x_498 : f32 = u_xlat26;
  u_xlat6 = sin(x_498);
  let x_501 : f32 = u_xlat26;
  u_xlat7 = cos(x_501);
  let x_504 : f32 = u_xlat3.x;
  let x_505 : f32 = u_xlat7;
  u_xlat5.x = (x_504 * x_505);
  let x_509 : f32 = u_xlat3.x;
  let x_510 : f32 = u_xlat6;
  u_xlat5.y = (x_509 * x_510);
  let x_513 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_513 * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_516 : vec3<f32> = u_xlat1;
  let x_518 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(-(x_516), x_518);
  let x_521 : f32 = u_xlat26;
  u_xlatb26 = (x_521 >= 0.0f);
  let x_523 : bool = u_xlatb26;
  if (x_523) {
    let x_527 : vec3<f32> = u_xlat5;
    x_524 = -(x_527);
  } else {
    let x_530 : vec3<f32> = u_xlat5;
    x_524 = x_530;
  }
  let x_531 : vec3<f32> = x_524;
  u_xlat5 = x_531;
  let x_532 : vec3<f32> = u_xlat5;
  let x_534 : vec4<f32> = x_33.x_SSAOParams;
  let x_537 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_532 * vec3<f32>(x_534.y, x_534.y, x_534.y)) + x_537);
  let x_539 : vec3<f32> = u_xlat5;
  let x_542 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_544 : vec2<f32> = (vec2<f32>(x_539.y, x_539.y) * vec2<f32>(x_542.x, x_542.y));
  let x_545 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_544.x, x_544.y, x_545.z, x_545.w);
  let x_548 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_550 : vec3<f32> = u_xlat5;
  let x_553 : vec4<f32> = u_xlat3;
  let x_555 : vec2<f32> = ((vec2<f32>(x_548.x, x_548.y) * vec2<f32>(x_550.x, x_550.x)) + vec2<f32>(x_553.x, x_553.y));
  let x_556 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_555.x, x_555.y, x_556.z, x_556.w);
  let x_559 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_561 : vec3<f32> = u_xlat5;
  let x_564 : vec4<f32> = u_xlat3;
  let x_566 : vec2<f32> = ((vec2<f32>(x_559.x, x_559.y) * vec2<f32>(x_561.z, x_561.z)) + vec2<f32>(x_564.x, x_564.y));
  let x_567 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_566.x, x_566.y, x_567.z, x_567.w);
  let x_569 : vec3<f32> = u_xlat4;
  let x_570 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_569, x_570);
  let x_573 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_573));
  let x_576 : vec4<f32> = u_xlat3;
  let x_578 : f32 = u_xlat28;
  let x_581 : vec2<f32> = ((vec2<f32>(x_576.x, x_576.y) * vec2<f32>(x_578, x_578)) + vec2<f32>(1.0f, 1.0f));
  let x_582 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_581.x, x_581.y, x_582.z, x_582.w);
  let x_584 : vec4<f32> = u_xlat3;
  let x_586 : vec2<f32> = (vec2<f32>(x_584.x, x_584.y) * vec2<f32>(0.5f, 0.5f));
  let x_587 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_586.x, x_586.y, x_587.z, x_587.w);
  let x_589 : vec4<f32> = u_xlat3;
  let x_593 : vec2<f32> = clamp(vec2<f32>(x_589.x, x_589.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_594 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
  let x_599 : vec4<f32> = u_xlat3;
  let x_602 : f32 = x_33.x_GlobalMipBias.x;
  let x_603 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_599.x, x_599.y), x_602);
  u_xlat28 = x_603.x;
  let x_606 : f32 = x_33.x_ZBufferParams.z;
  let x_607 : f32 = u_xlat28;
  let x_610 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_606 * x_607) + x_610);
  let x_614 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_614);
  let x_617 : f32 = u_xlat26;
  let x_620 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_617) + -(x_620));
  let x_623 : f32 = u_xlat26;
  let x_626 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_623) < x_626);
  let x_628 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_628);
  let x_631 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_631);
  let x_633 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_633);
  let x_635 : f32 = u_xlat26;
  let x_636 : f32 = u_xlat28;
  u_xlat26 = (x_635 * x_636);
  let x_639 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_639) + 1.0f);
  let x_644 : f32 = u_xlat5.x;
  let x_646 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_644 * x_646);
  let x_649 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_651 : vec4<f32> = u_xlat3;
  let x_655 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_649.x, x_649.y, x_649.z) * vec3<f32>(x_651.x, x_651.x, x_651.x)) + vec3<f32>(x_655.x, x_655.y, x_655.z));
  let x_659 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_661 : vec3<f32> = u_xlat11;
  let x_664 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_659.x, x_659.y, x_659.z) * vec3<f32>(x_661.x, x_661.x, x_661.x)) + x_664);
  let x_666 : vec3<f32> = u_xlat5;
  let x_667 : f32 = u_xlat28;
  let x_670 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_666 * vec3<f32>(x_667, x_667, x_667)) + -(x_670));
  let x_673 : vec3<f32> = u_xlat5;
  let x_674 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_673, x_674);
  let x_677 : f32 = u_xlat0;
  let x_681 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_677) * 0.004f) + x_681);
  let x_685 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_685, 0.0f);
  let x_688 : vec3<f32> = u_xlat5;
  let x_689 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_688, x_689);
  let x_693 : f32 = u_xlat11.x;
  u_xlat11.x = (x_693 + 0.0001f);
  let x_697 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_697);
  let x_701 : f32 = u_xlat11.x;
  let x_703 : f32 = u_xlat3.x;
  u_xlat3.x = (x_701 * x_703);
  let x_706 : f32 = u_xlat26;
  let x_708 : f32 = u_xlat3.x;
  u_xlat26 = (x_706 * x_708);
  let x_711 : f32 = u_xlat18.x;
  let x_712 : f32 = u_xlat25;
  let x_714 : f32 = u_xlat26;
  u_xlat25 = ((x_711 * x_712) + x_714);
  let x_716 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_716.z, x_716.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_721 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_721);
  let x_725 : f32 = u_xlat18.x;
  u_xlat18.x = (x_725 * 52.982917786f);
  let x_729 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_729);
  let x_732 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_732.x, x_732.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_739 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_739);
  let x_743 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_743 * 2.0f) + -1.0f);
  let x_748 : f32 = u_xlat18.y;
  u_xlat18.x = (x_748 * 6.283185482f);
  let x_752 : f32 = u_xlat3.z;
  let x_755 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_752) * x_755) + 1.0f);
  let x_758 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_758);
  let x_761 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_761);
  let x_765 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_765);
  let x_767 : f32 = u_xlat26;
  let x_768 : f32 = u_xlat6;
  u_xlat3.x = (x_767 * x_768);
  let x_771 : f32 = u_xlat26;
  let x_773 : f32 = u_xlat5.x;
  u_xlat3.y = (x_771 * x_773);
  let x_776 : vec4<f32> = u_xlat3;
  let x_780 : vec3<f32> = (vec3<f32>(x_776.x, x_776.y, x_776.z) * vec3<f32>(0.612372458f, 0.612372458f, 0.612372458f));
  let x_781 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_780.x, x_780.y, x_780.z, x_781.w);
  let x_783 : vec3<f32> = u_xlat1;
  let x_785 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_783), vec3<f32>(x_785.x, x_785.y, x_785.z));
  let x_791 : f32 = u_xlat18.x;
  u_xlatb18 = (x_791 >= 0.0f);
  let x_793 : bool = u_xlatb18;
  if (x_793) {
    let x_797 : vec4<f32> = u_xlat3;
    x_794 = -(vec3<f32>(x_797.x, x_797.y, x_797.z));
  } else {
    let x_801 : vec4<f32> = u_xlat3;
    x_794 = vec3<f32>(x_801.x, x_801.y, x_801.z);
  }
  let x_803 : vec3<f32> = x_794;
  let x_804 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_803.x, x_803.y, x_803.z, x_804.w);
  let x_806 : vec4<f32> = u_xlat3;
  let x_809 : vec4<f32> = x_33.x_SSAOParams;
  let x_812 : vec3<f32> = u_xlat8;
  let x_813 : vec3<f32> = ((vec3<f32>(x_806.x, x_806.y, x_806.z) * vec3<f32>(x_809.y, x_809.y, x_809.y)) + x_812);
  let x_814 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_813.x, x_813.y, x_813.z, x_814.w);
  let x_816 : vec4<f32> = u_xlat3;
  let x_819 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_816.y, x_816.y) * vec2<f32>(x_819.x, x_819.y));
  let x_823 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_825 : vec4<f32> = u_xlat3;
  let x_828 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_823.x, x_823.y) * vec2<f32>(x_825.x, x_825.x)) + x_828);
  let x_831 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_833 : vec4<f32> = u_xlat3;
  let x_836 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_831.x, x_831.y) * vec2<f32>(x_833.z, x_833.z)) + x_836);
  let x_838 : vec3<f32> = u_xlat4;
  let x_839 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_838, vec3<f32>(x_839.x, x_839.y, x_839.z));
  let x_844 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_844));
  let x_848 : vec2<f32> = u_xlat18;
  let x_849 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_848 * vec2<f32>(x_849.x, x_849.x)) + vec2<f32>(1.0f, 1.0f));
  let x_853 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_853 * vec2<f32>(0.5f, 0.5f));
  let x_855 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_855, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_862 : vec2<f32> = u_xlat18;
  let x_864 : f32 = x_33.x_GlobalMipBias.x;
  let x_865 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_862, x_864);
  u_xlat11.x = x_865.x;
  let x_870 : f32 = x_33.x_ZBufferParams.z;
  let x_872 : f32 = u_xlat11.x;
  let x_875 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_870 * x_872) + x_875);
  let x_877 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_877);
  let x_879 : f32 = u_xlat19;
  let x_882 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_879) + -(x_882));
  let x_887 : f32 = u_xlat3.x;
  let x_890 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_887) < x_890);
  let x_894 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_894);
  let x_898 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_898);
  let x_902 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_902);
  let x_906 : f32 = u_xlat3.y;
  let x_908 : f32 = u_xlat3.x;
  u_xlat3.x = (x_906 * x_908);
  let x_912 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_912) + 1.0f);
  let x_915 : f32 = u_xlat19;
  let x_917 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_915 * x_917);
  let x_921 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_923 : vec2<f32> = u_xlat18;
  let x_927 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_921.x, x_921.y, x_921.z) * vec3<f32>(x_923.x, x_923.x, x_923.x)) + vec3<f32>(x_927.x, x_927.y, x_927.z));
  let x_931 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_933 : f32 = u_xlat26;
  let x_936 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_931.x, x_931.y, x_931.z) * vec3<f32>(x_933, x_933, x_933)) + x_936);
  let x_938 : vec3<f32> = u_xlat5;
  let x_939 : vec3<f32> = u_xlat11;
  let x_942 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_938 * vec3<f32>(x_939.x, x_939.x, x_939.x)) + -(x_942));
  let x_945 : vec3<f32> = u_xlat11;
  let x_946 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_945, x_946);
  let x_949 : f32 = u_xlat0;
  let x_953 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_949) * 0.004f) + x_953);
  let x_957 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_957, 0.0f);
  let x_960 : vec3<f32> = u_xlat11;
  let x_961 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_960, x_961);
  let x_963 : f32 = u_xlat26;
  u_xlat26 = (x_963 + 0.0001f);
  let x_965 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_965);
  let x_967 : f32 = u_xlat26;
  let x_969 : f32 = u_xlat18.x;
  u_xlat18.x = (x_967 * x_969);
  let x_973 : f32 = u_xlat18.x;
  let x_975 : f32 = u_xlat3.x;
  let x_977 : f32 = u_xlat25;
  u_xlat25 = ((x_973 * x_975) + x_977);
  let x_979 : vec4<f32> = u_xlat2;
  let x_982 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_979.x, x_979.y, x_979.x, x_979.y) * vec4<f32>(x_982.z, x_982.z, x_982.z, x_982.z)) + vec4<f32>(6.248999596f, 14.600999832f, 8.331999779f, 19.468000412f));
  let x_991 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_991.x, x_991.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_996 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_996);
  let x_1000 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1000 * 52.982917786f);
  let x_1004 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1004);
  let x_1007 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1007.x, x_1007.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1014 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1014);
  let x_1018 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1018 * 2.0f) + -1.0f);
  let x_1023 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1023 * 6.283185482f);
  let x_1027 : f32 = u_xlat5.z;
  let x_1030 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1027) * x_1030) + 1.0f);
  let x_1033 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1033);
  let x_1036 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1036);
  let x_1040 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1040);
  let x_1042 : f32 = u_xlat26;
  let x_1043 : f32 = u_xlat6;
  u_xlat5.x = (x_1042 * x_1043);
  let x_1046 : f32 = u_xlat26;
  let x_1048 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1046 * x_1048);
  let x_1051 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1051 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_1055 : vec3<f32> = u_xlat1;
  let x_1057 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(x_1055), x_1057);
  let x_1061 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1061 >= 0.0f);
  let x_1063 : bool = u_xlatb18;
  if (x_1063) {
    let x_1067 : vec3<f32> = u_xlat5;
    x_1064 = -(x_1067);
  } else {
    let x_1070 : vec3<f32> = u_xlat5;
    x_1064 = x_1070;
  }
  let x_1071 : vec3<f32> = x_1064;
  u_xlat5 = x_1071;
  let x_1072 : vec3<f32> = u_xlat5;
  let x_1074 : vec4<f32> = x_33.x_SSAOParams;
  let x_1077 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1072 * vec3<f32>(x_1074.y, x_1074.y, x_1074.y)) + x_1077);
  let x_1079 : vec3<f32> = u_xlat5;
  let x_1082 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1079.y, x_1079.y) * vec2<f32>(x_1082.x, x_1082.y));
  let x_1086 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1088 : vec3<f32> = u_xlat5;
  let x_1091 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1086.x, x_1086.y) * vec2<f32>(x_1088.x, x_1088.x)) + x_1091);
  let x_1094 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1096 : vec3<f32> = u_xlat5;
  let x_1099 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1094.x, x_1094.y) * vec2<f32>(x_1096.z, x_1096.z)) + x_1099);
  let x_1101 : vec3<f32> = u_xlat4;
  let x_1102 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1101, x_1102);
  let x_1106 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1106));
  let x_1110 : vec2<f32> = u_xlat18;
  let x_1111 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1110 * vec2<f32>(x_1111.x, x_1111.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1115 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1115 * vec2<f32>(0.5f, 0.5f));
  let x_1117 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1117, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1124 : vec2<f32> = u_xlat18;
  let x_1126 : f32 = x_33.x_GlobalMipBias.x;
  let x_1127 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1124, x_1126);
  u_xlat11.x = x_1127.x;
  let x_1131 : f32 = x_33.x_ZBufferParams.z;
  let x_1133 : f32 = u_xlat11.x;
  let x_1136 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1131 * x_1133) + x_1136);
  let x_1138 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1138);
  let x_1141 : f32 = u_xlat3.x;
  let x_1143 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1141) + -(x_1143));
  let x_1148 : f32 = u_xlat3.x;
  let x_1151 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1148) < x_1151);
  let x_1155 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1155);
  let x_1159 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1159);
  let x_1163 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1163);
  let x_1167 : f32 = u_xlat3.y;
  let x_1169 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1167 * x_1169);
  let x_1173 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1173) + 1.0f);
  let x_1176 : f32 = u_xlat28;
  let x_1178 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1176 * x_1178);
  let x_1182 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1184 : vec2<f32> = u_xlat18;
  let x_1188 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1182.x, x_1182.y, x_1182.z) * vec3<f32>(x_1184.x, x_1184.x, x_1184.x)) + vec3<f32>(x_1188.x, x_1188.y, x_1188.z));
  let x_1192 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1194 : f32 = u_xlat26;
  let x_1197 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1192.x, x_1192.y, x_1192.z) * vec3<f32>(x_1194, x_1194, x_1194)) + x_1197);
  let x_1199 : vec3<f32> = u_xlat5;
  let x_1200 : vec3<f32> = u_xlat11;
  let x_1203 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1199 * vec3<f32>(x_1200.x, x_1200.x, x_1200.x)) + -(x_1203));
  let x_1206 : vec3<f32> = u_xlat5;
  let x_1207 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1206, x_1207);
  let x_1210 : f32 = u_xlat0;
  let x_1214 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1210) * 0.004f) + x_1214);
  let x_1218 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1218, 0.0f);
  let x_1221 : vec3<f32> = u_xlat5;
  let x_1222 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1221, x_1222);
  let x_1224 : f32 = u_xlat26;
  u_xlat26 = (x_1224 + 0.0001f);
  let x_1226 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1226);
  let x_1228 : f32 = u_xlat26;
  let x_1230 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1228 * x_1230);
  let x_1234 : f32 = u_xlat18.x;
  let x_1236 : f32 = u_xlat3.x;
  let x_1238 : f32 = u_xlat25;
  u_xlat25 = ((x_1234 * x_1236) + x_1238);
  let x_1240 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1240.z, x_1240.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1245 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1245);
  let x_1249 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1249 * 52.982917786f);
  let x_1253 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1253);
  let x_1257 : f32 = u_xlat18.x;
  u_xlat26 = (x_1257 + 0.984375f);
  let x_1260 : f32 = u_xlat26;
  u_xlat26 = fract(x_1260);
  let x_1262 : f32 = u_xlat26;
  u_xlat3.z = ((x_1262 * 2.0f) + -1.0f);
  let x_1267 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1267 * 6.283185482f);
  let x_1271 : f32 = u_xlat3.z;
  let x_1274 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1271) * x_1274) + 1.0f);
  let x_1277 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1277);
  let x_1280 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1280);
  let x_1284 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1284);
  let x_1286 : f32 = u_xlat26;
  let x_1287 : f32 = u_xlat6;
  u_xlat3.x = (x_1286 * x_1287);
  let x_1290 : f32 = u_xlat26;
  let x_1292 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1290 * x_1292);
  let x_1295 : vec4<f32> = u_xlat3;
  let x_1299 : vec3<f32> = (vec3<f32>(x_1295.x, x_1295.y, x_1295.z) * vec3<f32>(0.790569425f, 0.790569425f, 0.790569425f));
  let x_1300 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1299.x, x_1299.y, x_1299.z, x_1300.w);
  let x_1302 : vec3<f32> = u_xlat1;
  let x_1304 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_1302), vec3<f32>(x_1304.x, x_1304.y, x_1304.z));
  let x_1309 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1309 >= 0.0f);
  let x_1311 : bool = u_xlatb18;
  if (x_1311) {
    let x_1315 : vec4<f32> = u_xlat3;
    x_1312 = -(vec3<f32>(x_1315.x, x_1315.y, x_1315.z));
  } else {
    let x_1319 : vec4<f32> = u_xlat3;
    x_1312 = vec3<f32>(x_1319.x, x_1319.y, x_1319.z);
  }
  let x_1321 : vec3<f32> = x_1312;
  let x_1322 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1321.x, x_1321.y, x_1321.z, x_1322.w);
  let x_1324 : vec4<f32> = u_xlat3;
  let x_1327 : vec4<f32> = x_33.x_SSAOParams;
  let x_1330 : vec3<f32> = u_xlat8;
  let x_1331 : vec3<f32> = ((vec3<f32>(x_1324.x, x_1324.y, x_1324.z) * vec3<f32>(x_1327.y, x_1327.y, x_1327.y)) + x_1330);
  let x_1332 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1331.x, x_1331.y, x_1331.z, x_1332.w);
  let x_1334 : vec4<f32> = u_xlat3;
  let x_1337 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1334.y, x_1334.y) * vec2<f32>(x_1337.x, x_1337.y));
  let x_1341 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1343 : vec4<f32> = u_xlat3;
  let x_1346 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1341.x, x_1341.y) * vec2<f32>(x_1343.x, x_1343.x)) + x_1346);
  let x_1349 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1351 : vec4<f32> = u_xlat3;
  let x_1354 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1349.x, x_1349.y) * vec2<f32>(x_1351.z, x_1351.z)) + x_1354);
  let x_1356 : vec3<f32> = u_xlat4;
  let x_1357 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1356, vec3<f32>(x_1357.x, x_1357.y, x_1357.z));
  let x_1362 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1362));
  let x_1366 : vec2<f32> = u_xlat18;
  let x_1367 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1366 * vec2<f32>(x_1367.x, x_1367.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1371 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1371 * vec2<f32>(0.5f, 0.5f));
  let x_1373 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1373, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1380 : vec2<f32> = u_xlat18;
  let x_1382 : f32 = x_33.x_GlobalMipBias.x;
  let x_1383 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1380, x_1382);
  u_xlat11.x = x_1383.x;
  let x_1387 : f32 = x_33.x_ZBufferParams.z;
  let x_1389 : f32 = u_xlat11.x;
  let x_1392 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1387 * x_1389) + x_1392);
  let x_1394 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1394);
  let x_1396 : f32 = u_xlat19;
  let x_1399 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1396) + -(x_1399));
  let x_1404 : f32 = u_xlat3.x;
  let x_1407 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1404) < x_1407);
  let x_1411 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1411);
  let x_1415 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1415);
  let x_1419 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1419);
  let x_1423 : f32 = u_xlat3.y;
  let x_1425 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1423 * x_1425);
  let x_1429 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1429) + 1.0f);
  let x_1432 : f32 = u_xlat19;
  let x_1434 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1432 * x_1434);
  let x_1438 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1440 : vec2<f32> = u_xlat18;
  let x_1444 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1438.x, x_1438.y, x_1438.z) * vec3<f32>(x_1440.x, x_1440.x, x_1440.x)) + vec3<f32>(x_1444.x, x_1444.y, x_1444.z));
  let x_1448 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1450 : f32 = u_xlat26;
  let x_1453 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1448.x, x_1448.y, x_1448.z) * vec3<f32>(x_1450, x_1450, x_1450)) + x_1453);
  let x_1455 : vec3<f32> = u_xlat5;
  let x_1456 : vec3<f32> = u_xlat11;
  let x_1459 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1455 * vec3<f32>(x_1456.x, x_1456.x, x_1456.x)) + -(x_1459));
  let x_1462 : vec3<f32> = u_xlat11;
  let x_1463 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1462, x_1463);
  let x_1466 : f32 = u_xlat0;
  let x_1470 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1466) * 0.004f) + x_1470);
  let x_1474 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1474, 0.0f);
  let x_1477 : vec3<f32> = u_xlat11;
  let x_1478 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1477, x_1478);
  let x_1480 : f32 = u_xlat26;
  u_xlat26 = (x_1480 + 0.0001f);
  let x_1482 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1482);
  let x_1484 : f32 = u_xlat26;
  let x_1486 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1484 * x_1486);
  let x_1490 : f32 = u_xlat18.x;
  let x_1492 : f32 = u_xlat3.x;
  let x_1494 : f32 = u_xlat25;
  u_xlat25 = ((x_1490 * x_1492) + x_1494);
  let x_1496 : vec4<f32> = u_xlat2;
  let x_1499 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1496.x, x_1496.y, x_1496.x, x_1496.y) * vec4<f32>(x_1499.z, x_1499.z, x_1499.z, x_1499.z)) + vec4<f32>(10.414999962f, 24.335000992f, 12.497999191f, 29.201999664f));
  let x_1508 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1508.x, x_1508.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1513 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1513);
  let x_1517 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1517 * 52.982917786f);
  let x_1521 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1521);
  let x_1524 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1524.x, x_1524.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1531 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1531);
  let x_1535 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1535 * 2.0f) + -1.0f);
  let x_1540 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1540 * 6.283185482f);
  let x_1544 : f32 = u_xlat5.z;
  let x_1547 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1544) * x_1547) + 1.0f);
  let x_1550 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1550);
  let x_1553 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1553);
  let x_1557 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1557);
  let x_1559 : f32 = u_xlat26;
  let x_1560 : f32 = u_xlat6;
  u_xlat5.x = (x_1559 * x_1560);
  let x_1563 : f32 = u_xlat26;
  let x_1565 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1563 * x_1565);
  let x_1568 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1568 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_1572 : vec3<f32> = u_xlat1;
  let x_1574 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(x_1572), x_1574);
  let x_1578 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1578 >= 0.0f);
  let x_1580 : bool = u_xlatb18;
  if (x_1580) {
    let x_1584 : vec3<f32> = u_xlat5;
    x_1581 = -(x_1584);
  } else {
    let x_1587 : vec3<f32> = u_xlat5;
    x_1581 = x_1587;
  }
  let x_1588 : vec3<f32> = x_1581;
  u_xlat5 = x_1588;
  let x_1589 : vec3<f32> = u_xlat5;
  let x_1591 : vec4<f32> = x_33.x_SSAOParams;
  let x_1594 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1589 * vec3<f32>(x_1591.y, x_1591.y, x_1591.y)) + x_1594);
  let x_1596 : vec3<f32> = u_xlat5;
  let x_1599 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1596.y, x_1596.y) * vec2<f32>(x_1599.x, x_1599.y));
  let x_1603 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1605 : vec3<f32> = u_xlat5;
  let x_1608 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1603.x, x_1603.y) * vec2<f32>(x_1605.x, x_1605.x)) + x_1608);
  let x_1611 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1613 : vec3<f32> = u_xlat5;
  let x_1616 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1611.x, x_1611.y) * vec2<f32>(x_1613.z, x_1613.z)) + x_1616);
  let x_1618 : vec3<f32> = u_xlat4;
  let x_1619 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1618, x_1619);
  let x_1623 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1623));
  let x_1627 : vec2<f32> = u_xlat18;
  let x_1628 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1627 * vec2<f32>(x_1628.x, x_1628.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1632 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1632 * vec2<f32>(0.5f, 0.5f));
  let x_1634 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1634, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1641 : vec2<f32> = u_xlat18;
  let x_1643 : f32 = x_33.x_GlobalMipBias.x;
  let x_1644 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1641, x_1643);
  u_xlat11.x = x_1644.x;
  let x_1648 : f32 = x_33.x_ZBufferParams.z;
  let x_1650 : f32 = u_xlat11.x;
  let x_1653 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1648 * x_1650) + x_1653);
  let x_1655 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1655);
  let x_1658 : f32 = u_xlat3.x;
  let x_1660 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1658) + -(x_1660));
  let x_1665 : f32 = u_xlat3.x;
  let x_1668 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1665) < x_1668);
  let x_1672 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1672);
  let x_1676 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1676);
  let x_1680 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1680);
  let x_1684 : f32 = u_xlat3.y;
  let x_1686 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1684 * x_1686);
  let x_1690 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1690) + 1.0f);
  let x_1693 : f32 = u_xlat28;
  let x_1695 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1693 * x_1695);
  let x_1699 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1701 : vec2<f32> = u_xlat18;
  let x_1705 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1699.x, x_1699.y, x_1699.z) * vec3<f32>(x_1701.x, x_1701.x, x_1701.x)) + vec3<f32>(x_1705.x, x_1705.y, x_1705.z));
  let x_1709 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1711 : f32 = u_xlat26;
  let x_1714 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1709.x, x_1709.y, x_1709.z) * vec3<f32>(x_1711, x_1711, x_1711)) + x_1714);
  let x_1716 : vec3<f32> = u_xlat5;
  let x_1717 : vec3<f32> = u_xlat11;
  let x_1720 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1716 * vec3<f32>(x_1717.x, x_1717.x, x_1717.x)) + -(x_1720));
  let x_1723 : vec3<f32> = u_xlat5;
  let x_1724 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1723, x_1724);
  let x_1727 : f32 = u_xlat0;
  let x_1731 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1727) * 0.004f) + x_1731);
  let x_1735 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1735, 0.0f);
  let x_1738 : vec3<f32> = u_xlat5;
  let x_1739 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1738, x_1739);
  let x_1741 : f32 = u_xlat26;
  u_xlat26 = (x_1741 + 0.0001f);
  let x_1743 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1743);
  let x_1745 : f32 = u_xlat26;
  let x_1747 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1745 * x_1747);
  let x_1751 : f32 = u_xlat18.x;
  let x_1753 : f32 = u_xlat3.x;
  let x_1755 : f32 = u_xlat25;
  u_xlat25 = ((x_1751 * x_1753) + x_1755);
  let x_1757 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1757.z, x_1757.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1762 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1762);
  let x_1766 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1766 * 52.982917786f);
  let x_1770 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1770);
  let x_1773 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1773.x, x_1773.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1780 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1780);
  let x_1784 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1784 * 2.0f) + -1.0f);
  let x_1789 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1789 * 6.283185482f);
  let x_1793 : f32 = u_xlat3.z;
  let x_1796 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1793) * x_1796) + 1.0f);
  let x_1799 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1799);
  let x_1802 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1802);
  let x_1806 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1806);
  let x_1808 : f32 = u_xlat26;
  let x_1809 : f32 = u_xlat6;
  u_xlat3.x = (x_1808 * x_1809);
  let x_1812 : f32 = u_xlat26;
  let x_1814 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1812 * x_1814);
  let x_1817 : vec4<f32> = u_xlat3;
  let x_1821 : vec3<f32> = (vec3<f32>(x_1817.x, x_1817.y, x_1817.z) * vec3<f32>(0.935414374f, 0.935414374f, 0.935414374f));
  let x_1822 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1821.x, x_1821.y, x_1821.z, x_1822.w);
  let x_1824 : vec3<f32> = u_xlat1;
  let x_1826 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_1824), vec3<f32>(x_1826.x, x_1826.y, x_1826.z));
  let x_1831 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1831 >= 0.0f);
  let x_1833 : bool = u_xlatb18;
  if (x_1833) {
    let x_1837 : vec4<f32> = u_xlat3;
    x_1834 = -(vec3<f32>(x_1837.x, x_1837.y, x_1837.z));
  } else {
    let x_1841 : vec4<f32> = u_xlat3;
    x_1834 = vec3<f32>(x_1841.x, x_1841.y, x_1841.z);
  }
  let x_1843 : vec3<f32> = x_1834;
  let x_1844 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1843.x, x_1843.y, x_1843.z, x_1844.w);
  let x_1846 : vec4<f32> = u_xlat3;
  let x_1849 : vec4<f32> = x_33.x_SSAOParams;
  let x_1852 : vec3<f32> = u_xlat8;
  let x_1853 : vec3<f32> = ((vec3<f32>(x_1846.x, x_1846.y, x_1846.z) * vec3<f32>(x_1849.y, x_1849.y, x_1849.y)) + x_1852);
  let x_1854 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1853.x, x_1853.y, x_1853.z, x_1854.w);
  let x_1856 : vec4<f32> = u_xlat3;
  let x_1859 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1856.y, x_1856.y) * vec2<f32>(x_1859.x, x_1859.y));
  let x_1863 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1865 : vec4<f32> = u_xlat3;
  let x_1868 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1863.x, x_1863.y) * vec2<f32>(x_1865.x, x_1865.x)) + x_1868);
  let x_1871 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1873 : vec4<f32> = u_xlat3;
  let x_1876 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1871.x, x_1871.y) * vec2<f32>(x_1873.z, x_1873.z)) + x_1876);
  let x_1878 : vec3<f32> = u_xlat4;
  let x_1879 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1878, vec3<f32>(x_1879.x, x_1879.y, x_1879.z));
  let x_1884 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1884));
  let x_1888 : vec2<f32> = u_xlat18;
  let x_1889 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1888 * vec2<f32>(x_1889.x, x_1889.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1893 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1893 * vec2<f32>(0.5f, 0.5f));
  let x_1895 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1895, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1902 : vec2<f32> = u_xlat18;
  let x_1904 : f32 = x_33.x_GlobalMipBias.x;
  let x_1905 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1902, x_1904);
  u_xlat11.x = x_1905.x;
  let x_1909 : f32 = x_33.x_ZBufferParams.z;
  let x_1911 : f32 = u_xlat11.x;
  let x_1914 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1909 * x_1911) + x_1914);
  let x_1916 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1916);
  let x_1918 : f32 = u_xlat19;
  let x_1921 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1918) + -(x_1921));
  let x_1926 : f32 = u_xlat3.x;
  let x_1929 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1926) < x_1929);
  let x_1933 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1933);
  let x_1937 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1937);
  let x_1941 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1941);
  let x_1945 : f32 = u_xlat3.y;
  let x_1947 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1945 * x_1947);
  let x_1951 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1951) + 1.0f);
  let x_1954 : f32 = u_xlat19;
  let x_1956 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1954 * x_1956);
  let x_1960 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1962 : vec2<f32> = u_xlat18;
  let x_1966 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1960.x, x_1960.y, x_1960.z) * vec3<f32>(x_1962.x, x_1962.x, x_1962.x)) + vec3<f32>(x_1966.x, x_1966.y, x_1966.z));
  let x_1970 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1972 : f32 = u_xlat26;
  let x_1975 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1970.x, x_1970.y, x_1970.z) * vec3<f32>(x_1972, x_1972, x_1972)) + x_1975);
  let x_1977 : vec3<f32> = u_xlat5;
  let x_1978 : vec3<f32> = u_xlat11;
  let x_1981 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1977 * vec3<f32>(x_1978.x, x_1978.x, x_1978.x)) + -(x_1981));
  let x_1984 : vec3<f32> = u_xlat11;
  let x_1985 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1984, x_1985);
  let x_1988 : f32 = u_xlat0;
  let x_1992 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1988) * 0.004f) + x_1992);
  let x_1996 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1996, 0.0f);
  let x_1999 : vec3<f32> = u_xlat11;
  let x_2000 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1999, x_2000);
  let x_2002 : f32 = u_xlat26;
  u_xlat26 = (x_2002 + 0.0001f);
  let x_2004 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2004);
  let x_2006 : f32 = u_xlat26;
  let x_2008 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2006 * x_2008);
  let x_2012 : f32 = u_xlat18.x;
  let x_2014 : f32 = u_xlat3.x;
  let x_2016 : f32 = u_xlat25;
  u_xlat25 = ((x_2012 * x_2014) + x_2016);
  let x_2018 : vec4<f32> = u_xlat2;
  let x_2021 : vec4<f32> = x_33.x_SSAOParams;
  let x_2027 : vec2<f32> = ((vec2<f32>(x_2018.x, x_2018.y) * vec2<f32>(x_2021.z, x_2021.z)) + vec2<f32>(14.580999374f, 34.069000244f));
  let x_2028 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2027.x, x_2027.y, x_2028.z, x_2028.w);
  let x_2030 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec2<f32>(x_2030.x, x_2030.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2035 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_2035);
  let x_2039 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2039 * 52.982917786f);
  let x_2043 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_2043);
  let x_2046 : vec4<f32> = u_xlat2;
  let x_2050 : vec2<f32> = (vec2<f32>(x_2046.x, x_2046.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2051 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2050.x, x_2050.y, x_2051.z, x_2051.w);
  let x_2054 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_2054);
  let x_2058 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_2058 * 2.0f) + -1.0f);
  let x_2063 : f32 = u_xlat2.y;
  u_xlat2.x = (x_2063 * 6.283185482f);
  let x_2068 : f32 = u_xlat3.z;
  let x_2071 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_2068) * x_2071) + 1.0f);
  let x_2076 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_2076);
  let x_2080 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_2080);
  let x_2084 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_2084);
  let x_2088 : f32 = u_xlat10.x;
  let x_2090 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2088 * x_2090);
  let x_2094 : f32 = u_xlat2.x;
  let x_2096 : f32 = u_xlat10.x;
  u_xlat3.y = (x_2094 * x_2096);
  let x_2099 : vec3<f32> = u_xlat1;
  let x_2101 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(x_2099), vec3<f32>(x_2101.x, x_2101.y, x_2101.z));
  let x_2109 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_2109 >= 0.0f);
  let x_2113 : bool = u_xlatb2.x;
  if (x_2113) {
    let x_2117 : vec4<f32> = u_xlat3;
    x_2114 = -(vec3<f32>(x_2117.x, x_2117.y, x_2117.z));
  } else {
    let x_2121 : vec4<f32> = u_xlat3;
    x_2114 = vec3<f32>(x_2121.x, x_2121.y, x_2121.z);
  }
  let x_2123 : vec3<f32> = x_2114;
  let x_2124 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2123.x, x_2123.y, x_2123.z, x_2124.w);
  let x_2126 : vec4<f32> = u_xlat2;
  let x_2129 : vec4<f32> = x_33.x_SSAOParams;
  let x_2132 : vec3<f32> = u_xlat8;
  let x_2133 : vec3<f32> = ((vec3<f32>(x_2126.x, x_2126.y, x_2126.z) * vec3<f32>(x_2129.y, x_2129.y, x_2129.y)) + x_2132);
  let x_2134 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2133.x, x_2133.y, x_2133.z, x_2134.w);
  let x_2136 : vec4<f32> = u_xlat2;
  let x_2139 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_2141 : vec2<f32> = (vec2<f32>(x_2136.y, x_2136.y) * vec2<f32>(x_2139.x, x_2139.y));
  let x_2142 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2141.x, x_2141.y, x_2142.z, x_2142.w);
  let x_2145 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2147 : vec4<f32> = u_xlat2;
  let x_2150 : vec4<f32> = u_xlat3;
  let x_2152 : vec2<f32> = ((vec2<f32>(x_2145.x, x_2145.y) * vec2<f32>(x_2147.x, x_2147.x)) + vec2<f32>(x_2150.x, x_2150.y));
  let x_2153 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2152.x, x_2152.y, x_2153.z, x_2153.w);
  let x_2156 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2158 : vec4<f32> = u_xlat2;
  let x_2161 : vec4<f32> = u_xlat3;
  let x_2163 : vec2<f32> = ((vec2<f32>(x_2156.x, x_2156.y) * vec2<f32>(x_2158.z, x_2158.z)) + vec2<f32>(x_2161.x, x_2161.y));
  let x_2164 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2163.x, x_2163.y, x_2164.z, x_2164.w);
  let x_2166 : vec3<f32> = u_xlat4;
  let x_2167 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_2166, vec3<f32>(x_2167.x, x_2167.y, x_2167.z));
  let x_2172 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_2172));
  let x_2176 : vec4<f32> = u_xlat3;
  let x_2178 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_2176.x, x_2176.y) * vec2<f32>(x_2178.x, x_2178.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2182 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_2182 * vec2<f32>(0.5f, 0.5f));
  let x_2184 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_2184, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2191 : vec2<f32> = u_xlat10;
  let x_2193 : f32 = x_33.x_GlobalMipBias.x;
  let x_2194 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2191, x_2193);
  u_xlat26 = x_2194.x;
  let x_2197 : f32 = x_33.x_ZBufferParams.z;
  let x_2198 : f32 = u_xlat26;
  let x_2201 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_2197 * x_2198) + x_2201);
  let x_2205 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2205);
  let x_2209 : f32 = u_xlat2.x;
  let x_2212 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_2209) + -(x_2212));
  let x_2217 : f32 = u_xlat2.x;
  let x_2220 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_2217) < x_2220);
  let x_2223 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_2223);
  let x_2227 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_2227);
  let x_2231 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_2231);
  let x_2235 : f32 = u_xlat2.w;
  let x_2237 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2235 * x_2237);
  let x_2241 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_2241) + 1.0f);
  let x_2246 : f32 = u_xlat3.x;
  let x_2248 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_2246 * x_2248);
  let x_2251 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2253 : vec2<f32> = u_xlat10;
  let x_2257 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2259 : vec3<f32> = ((vec3<f32>(x_2251.x, x_2251.y, x_2251.z) * vec3<f32>(x_2253.x, x_2253.x, x_2253.x)) + vec3<f32>(x_2257.x, x_2257.y, x_2257.z));
  let x_2260 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2259.x, x_2259.y, x_2259.z, x_2260.w);
  let x_2263 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2265 : vec2<f32> = u_xlat18;
  let x_2268 : vec4<f32> = u_xlat3;
  let x_2270 : vec3<f32> = ((vec3<f32>(x_2263.x, x_2263.y, x_2263.z) * vec3<f32>(x_2265.x, x_2265.x, x_2265.x)) + vec3<f32>(x_2268.x, x_2268.y, x_2268.z));
  let x_2271 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2270.x, x_2270.y, x_2270.z, x_2271.w);
  let x_2273 : vec4<f32> = u_xlat3;
  let x_2275 : f32 = u_xlat26;
  let x_2278 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_2273.x, x_2273.y, x_2273.z) * vec3<f32>(x_2275, x_2275, x_2275)) + -(x_2278));
  let x_2281 : vec3<f32> = u_xlat8;
  let x_2282 : vec3<f32> = u_xlat1;
  u_xlat10.x = dot(x_2281, x_2282);
  let x_2285 : f32 = u_xlat0;
  let x_2289 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_2285) * 0.004f) + x_2289);
  let x_2293 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_2293, 0.0f);
  let x_2296 : vec3<f32> = u_xlat8;
  let x_2297 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_2296, x_2297);
  let x_2301 : f32 = u_xlat8.x;
  u_xlat8.x = (x_2301 + 0.0001f);
  let x_2305 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_2305);
  let x_2309 : f32 = u_xlat8.x;
  let x_2311 : f32 = u_xlat10.x;
  u_xlat8.x = (x_2309 * x_2311);
  let x_2315 : f32 = u_xlat8.x;
  let x_2317 : f32 = u_xlat2.x;
  let x_2319 : f32 = u_xlat25;
  u_xlat8.x = ((x_2315 * x_2317) + x_2319);
  let x_2323 : f32 = u_xlat8.x;
  let x_2325 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_2323 * x_2325);
  let x_2329 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_2329);
  let x_2331 : f32 = u_xlat0;
  let x_2333 : f32 = u_xlat16;
  u_xlat0 = ((-(x_2331) * x_2333) + 1.0f);
  let x_2336 : f32 = u_xlat0;
  let x_2337 : f32 = u_xlat0;
  u_xlat0 = (x_2336 * x_2337);
  let x_2340 : f32 = u_xlat8.x;
  let x_2342 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_2340 * x_2342);
  let x_2345 : f32 = u_xlat0;
  let x_2347 : f32 = u_xlat8.x;
  u_xlat0 = (x_2345 * x_2347);
  let x_2349 : f32 = u_xlat0;
  u_xlat0 = (x_2349 * 0.125f);
  let x_2352 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2352, 0.0f, 1.0f);
  let x_2354 : f32 = u_xlat0;
  u_xlat0 = log2(x_2354);
  let x_2356 : f32 = u_xlat0;
  u_xlat0 = (x_2356 * 0.600000024f);
  let x_2359 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2359);
  let x_2363 : vec3<f32> = u_xlat1;
  let x_2365 : vec3<f32> = ((x_2363 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2366 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2366.x, x_2365.x, x_2365.y, x_2365.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

