#version 440
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(origin_upper_left) in vec4 gl_FragCoord;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
precise vec4 u_xlat_precise_vec4;
precise ivec4 u_xlat_precise_ivec4;
precise bvec4 u_xlat_precise_bvec4;
precise uvec4 u_xlat_precise_uvec4;
const uvec4 ImmCB_0[] = uvec4[4] (
	uvec4(0x3F800000, 0x0, 0x0, 0x0),
	uvec4(0x0, 0x3F800000, 0x0, 0x0),
	uvec4(0x0, 0x0, 0x3F800000, 0x0),
	uvec4(0x0, 0x0, 0x0, 0x3F800000));
layout(set = 1, binding = 0, std140) uniform PGlobals {
	vec4 _ScaledScreenParams;
	vec2 _GlobalMipBias;
	vec4 _MainLightPosition;
	vec4 _MainLightColor;
	vec4 _AmbientOcclusionParam;
	vec4 _AdditionalLightsCount;
	vec3 _WorldSpaceCameraPos;
	vec4 _ProjectionParams;
	vec4 _ScaleBiasRt;
	vec4 unity_FogParams;
	vec4 unity_FogColor;
	mat4x4 unity_MatrixV;
};
layout(set = 1, binding = 1, std140) uniform AdditionalLights {
	vec4 _AdditionalLightsPosition[256];
	vec4 _AdditionalLightsColor[256];
	vec4 _AdditionalLightsAttenuation[256];
	vec4 _AdditionalLightsSpotDir[256];
	vec4 _AdditionalLightsOcclusionProbes[256];
	float _AdditionalLightsLayerMasks[256];
};
layout(set = 1, binding = 2, std140) uniform UnityPerDraw {
	mat4x4 unity_ObjectToWorld;
	mat4x4 unity_WorldToObject;
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_RenderingLayer;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_SpecCube1_HDR;
	vec4 unity_SpecCube0_BoxMax;
	vec4 unity_SpecCube0_BoxMin;
	vec4 unity_SpecCube0_ProbePosition;
	vec4 unity_SpecCube1_BoxMax;
	vec4 unity_SpecCube1_BoxMin;
	vec4 unity_SpecCube1_ProbePosition;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
	vec4 unity_RendererBounds_Min;
	vec4 unity_RendererBounds_Max;
	mat4x4 unity_MatrixPreviousM;
	mat4x4 unity_MatrixPreviousMI;
	vec4 unity_MotionVectorsParams;
	vec4 unity_SpriteColor;
	vec4 unity_SpriteProps;
};
layout(set = 1, binding = 3, std140) uniform MainLightShadows {
	mat4x4 _MainLightWorldToShadow[5];
	vec4 _CascadeShadowSplitSpheres0;
	vec4 _CascadeShadowSplitSpheres1;
	vec4 _CascadeShadowSplitSpheres2;
	vec4 _CascadeShadowSplitSpheres3;
	vec4 _CascadeShadowSplitSphereRadii;
	vec4 _MainLightShadowOffset0;
	vec4 _MainLightShadowOffset1;
	vec4 _MainLightShadowParams;
	vec4 _MainLightShadowmapSize;
};
layout(set = 1, binding = 4, std140) uniform LightCookies {
	mat4x4 _MainLightWorldToLight;
	float _AdditionalLightsCookieEnableBits[8];
	float _MainLightCookieTextureFormat;
	float _AdditionalLightsCookieAtlasTextureFormat;
};
layout(set = 1, binding = 5, std140) uniform AdditionalLightsCookies {
	mat4x4 _AdditionalLightsWorldToLights[256];
	vec4 _AdditionalLightsCookieAtlasUVRects[256];
	float _AdditionalLightsLightTypes[256];
};
layout(set = 0, binding = 0) uniform mediump textureCube unity_SpecCube0;
layout(set = 0, binding = 1) uniform mediump texture2D _MainTex;
layout(set = 0, binding = 2) uniform mediump texture2D _MetallicTex;
layout(set = 0, binding = 3) uniform mediump texture2D _ScreenSpaceOcclusionTexture;
layout(set = 0, binding = 4) uniform mediump texture2D _MainLightShadowmapTexture;
layout(set = 0, binding = 5) uniform mediump texture2D _MainLightCookieTexture;
layout(set = 0, binding = 6) uniform mediump texture2D _AdditionalLightsCookieAtlasTexture;
layout(location = 0) in highp vec4 vs_TEXCOORD0;
layout(location = 1) in highp vec4 vs_TEXCOORD3;
layout(location = 2) in highp vec4 vs_TEXCOORD4;
layout(location = 3) in highp vec4 vs_TEXCOORD5;
layout(location = 4) in highp vec3 vs_TEXCOORD7;
layout(location = 5) in highp vec4 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
layout(set = 0, binding = 7) uniform mediump  sampler samplerunity_SpecCube0;
layout(set = 0, binding = 8) uniform mediump  sampler sampler_MainTex;
layout(set = 0, binding = 9) uniform mediump  sampler sampler_MetallicTex;
layout(set = 0, binding = 10) uniform mediump  sampler sampler_ScreenSpaceOcclusionTexture;
layout(set = 0, binding = 11) uniform mediump  samplerShadow sampler_MainLightShadowmapTexture;
layout(set = 0, binding = 12) uniform mediump  sampler sampler_MainLightCookieTexture;
layout(set = 0, binding = 13) uniform mediump  sampler sampler_AdditionalLightsCookieAtlasTexture;
void main()
{
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bvec2 u_xlatb6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
vec4 u_xlat11;
vec4 u_xlat12;
vec4 u_xlat13;
vec4 u_xlat14;
vec4 u_xlat15;
vec2 u_xlat16;
vec4 u_xlat17;
vec4 u_xlat18;
vec4 u_xlat19;
float u_xlat21;
vec3 u_xlat24;
bool u_xlatb24;
vec2 u_xlat27;
vec2 u_xlat41;
uint u_xlatu41;
vec2 u_xlat44;
bvec2 u_xlatb44;
vec2 u_xlat46;
int u_xlati46;
vec2 u_xlat48;
vec2 u_xlat49;
vec2 u_xlat51;
bvec2 u_xlatb51;
vec2 u_xlat52;
float u_xlat60;
uint u_xlatu60;
float u_xlat61;
float u_xlat62;
float u_xlat63;
float u_xlat64;
bool u_xlatb64;
float u_xlat65;
uint u_xlatu65;
bool u_xlatb65;
float u_xlat66;
float u_xlat67;
int u_xlati67;
uint u_xlatu67;
bool u_xlatb67;
int u_xlati68;
int u_xlati69;
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat0 = texture(sampler2D(_MainTex, sampler_MainTex), vs_TEXCOORD0.xy, _GlobalMipBias.x);
    u_xlat1.x = texture(sampler2D(_MetallicTex, sampler_MetallicTex), vs_TEXCOORD0.xy, _GlobalMipBias.x).x;
    u_xlat21 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD3.xyz;
    u_xlat21 = vs_TEXCOORD7.y * unity_MatrixV[1].z;
    u_xlat21 = unity_MatrixV[0].z * vs_TEXCOORD7.x + u_xlat21;
    u_xlat21 = unity_MatrixV[2].z * vs_TEXCOORD7.z + u_xlat21;
    u_xlat21 = u_xlat21 + unity_MatrixV[3].z;
    u_xlat21 = (-u_xlat21) + (-_ProjectionParams.y);
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat21 = u_xlat21 * unity_FogParams.x;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat5.x = dot(unity_SHBr, u_xlat4);
    u_xlat5.y = dot(unity_SHBg, u_xlat4);
    u_xlat5.z = dot(unity_SHBb, u_xlat4);
    u_xlat41.x = u_xlat2.y * u_xlat2.y;
    u_xlat41.x = u_xlat2.x * u_xlat2.x + (-u_xlat41.x);
    u_xlat4.xyz = unity_SHC.xyz * u_xlat41.xxx + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat41.xy = vec2(1.0) / vec2(_ScaledScreenParams.xy);
    u_xlat4.xy = u_xlat41.xy * hlslcc_FragCoord.xy;
    u_xlat41.x = u_xlat4.y * _ScaleBiasRt.x + _ScaleBiasRt.y;
    u_xlat4.z = (-u_xlat41.x) + 1.0;
    u_xlat41.x = (-u_xlat1.x) * 0.959999979 + 0.959999979;
    u_xlat61 = (-u_xlat41.x) + 1.0;
    u_xlat5.xyz = u_xlat0.xyz * u_xlat41.xxx;
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat1.x = (-u_xlat0.w) + 1.0;
    u_xlat41.x = u_xlat1.x * u_xlat1.x;
    u_xlat41.x = max(u_xlat41.x, 0.0078125);
    u_xlat62 = u_xlat41.x * u_xlat41.x;
    u_xlat60 = u_xlat0.w + u_xlat61;
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
    u_xlat61 = u_xlat41.x * 4.0 + 2.0;
    u_xlat63 = texture(sampler2D(_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture), u_xlat4.xz, _GlobalMipBias.x).x;
    u_xlat4.x = u_xlat63 + -1.0;
    u_xlat4.x = _AmbientOcclusionParam.w * u_xlat4.x + 1.0;
    u_xlat63 = min(u_xlat63, 1.0);
    u_xlatb24 = 0.0<_MainLightShadowParams.y;
    if(u_xlatb24){
        u_xlatb24 = _MainLightShadowParams.y==1.0;
        if(u_xlatb24){
            u_xlat6 = vs_TEXCOORD8.xyxy + _MainLightShadowOffset0;
            vec3 txVec0 = vec3(u_xlat6.xy,vs_TEXCOORD8.z);
            u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec0, 0.0);
            vec3 txVec1 = vec3(u_xlat6.zw,vs_TEXCOORD8.z);
            u_xlat7.y = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec1, 0.0);
            u_xlat6 = vs_TEXCOORD8.xyxy + _MainLightShadowOffset1;
            vec3 txVec2 = vec3(u_xlat6.xy,vs_TEXCOORD8.z);
            u_xlat7.z = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec2, 0.0);
            vec3 txVec3 = vec3(u_xlat6.zw,vs_TEXCOORD8.z);
            u_xlat7.w = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec3, 0.0);
            u_xlat24.x = dot(u_xlat7, vec4(0.25, 0.25, 0.25, 0.25));
        } else {
            u_xlatb44.x = _MainLightShadowParams.y==2.0;
            if(u_xlatb44.x){
                u_xlat44.xy = vs_TEXCOORD8.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat44.xy = floor(u_xlat44.xy);
                u_xlat6.xy = vs_TEXCOORD8.xy * _MainLightShadowmapSize.zw + (-u_xlat44.xy);
                u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
                u_xlat46.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
                u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
                u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
                u_xlat48.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
                u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat8.xy;
                u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
                u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
                u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
                u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
                u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
                u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
                u_xlat8.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
                u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
                u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
                u_xlat9.z = u_xlat8.x;
                u_xlat9.w = u_xlat6.x;
                u_xlat10.z = u_xlat11.x;
                u_xlat10.w = u_xlat46.x;
                u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
                u_xlat8.z = u_xlat9.y;
                u_xlat8.w = u_xlat6.y;
                u_xlat11.z = u_xlat10.y;
                u_xlat11.w = u_xlat46.y;
                u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
                u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
                u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
                u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
                u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
                u_xlat8.w = u_xlat9.x;
                u_xlat10 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
                u_xlat11.xy = u_xlat44.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
                u_xlat9.w = u_xlat8.y;
                u_xlat8.yw = u_xlat9.yz;
                u_xlat12 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
                u_xlat9 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
                u_xlat8 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
                u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
                u_xlat14 = u_xlat6.yyzz * u_xlat7;
                u_xlat44.x = u_xlat6.z * u_xlat7.y;
                vec3 txVec4 = vec3(u_xlat10.xy,vs_TEXCOORD8.z);
                u_xlat64 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec4, 0.0);
                vec3 txVec5 = vec3(u_xlat10.zw,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec5, 0.0);
                u_xlat65 = u_xlat65 * u_xlat13.y;
                u_xlat64 = u_xlat13.x * u_xlat64 + u_xlat65;
                vec3 txVec6 = vec3(u_xlat11.xy,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec6, 0.0);
                u_xlat64 = u_xlat13.z * u_xlat65 + u_xlat64;
                vec3 txVec7 = vec3(u_xlat9.xy,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec7, 0.0);
                u_xlat64 = u_xlat13.w * u_xlat65 + u_xlat64;
                vec3 txVec8 = vec3(u_xlat12.xy,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec8, 0.0);
                u_xlat64 = u_xlat14.x * u_xlat65 + u_xlat64;
                vec3 txVec9 = vec3(u_xlat12.zw,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec9, 0.0);
                u_xlat64 = u_xlat14.y * u_xlat65 + u_xlat64;
                vec3 txVec10 = vec3(u_xlat9.zw,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec10, 0.0);
                u_xlat64 = u_xlat14.z * u_xlat65 + u_xlat64;
                vec3 txVec11 = vec3(u_xlat8.xy,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec11, 0.0);
                u_xlat64 = u_xlat14.w * u_xlat65 + u_xlat64;
                vec3 txVec12 = vec3(u_xlat8.zw,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec12, 0.0);
                u_xlat24.x = u_xlat44.x * u_xlat65 + u_xlat64;
            } else {
                u_xlat44.xy = vs_TEXCOORD8.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat44.xy = floor(u_xlat44.xy);
                u_xlat6.xy = vs_TEXCOORD8.xy * _MainLightShadowmapSize.zw + (-u_xlat44.xy);
                u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
                u_xlat9.yw = u_xlat8.yw * vec2(0.0408160016, 0.0408160016);
                u_xlat46.xy = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
                u_xlat7.xz = (-u_xlat6.xy) + vec2(1.0, 1.0);
                u_xlat8.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
                u_xlat7.xz = (-u_xlat8.xy) * u_xlat8.xy + u_xlat7.xz;
                u_xlat8.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
                u_xlat7.yw = (-u_xlat8.xy) * u_xlat8.xy + u_xlat7.yw;
                u_xlat7 = u_xlat7 + vec4(2.0, 2.0, 2.0, 2.0);
                u_xlat8.z = u_xlat7.y * 0.0816320032;
                u_xlat10.xy = u_xlat46.yx * vec2(0.0816320032, 0.0816320032);
                u_xlat46.xy = u_xlat7.xz * vec2(0.0816320032, 0.0816320032);
                u_xlat10.z = u_xlat7.w * 0.0816320032;
                u_xlat8.x = u_xlat10.y;
                u_xlat8.yw = u_xlat6.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat7.xz = u_xlat6.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat7.y = u_xlat46.x;
                u_xlat7.w = u_xlat9.y;
                u_xlat8 = u_xlat7 + u_xlat8;
                u_xlat10.yw = u_xlat6.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat9.xz = u_xlat6.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat9.y = u_xlat46.y;
                u_xlat6 = u_xlat9 + u_xlat10;
                u_xlat7 = u_xlat7 / u_xlat8;
                u_xlat7 = u_xlat7 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat9 = u_xlat9 / u_xlat6;
                u_xlat9 = u_xlat9 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat7 = u_xlat7.wxyz * _MainLightShadowmapSize.xxxx;
                u_xlat9 = u_xlat9.xwyz * _MainLightShadowmapSize.yyyy;
                u_xlat10.xzw = u_xlat7.yzw;
                u_xlat10.y = u_xlat9.x;
                u_xlat11 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat12.xy = u_xlat44.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.y = u_xlat10.y;
                u_xlat10.y = u_xlat9.z;
                u_xlat13 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat52.xy = u_xlat44.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.z = u_xlat10.y;
                u_xlat14 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyxz;
                u_xlat10.y = u_xlat9.w;
                u_xlat15 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat27.xy = u_xlat44.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.w = u_xlat10.y;
                u_xlat16.xy = u_xlat44.xy * _MainLightShadowmapSize.xy + u_xlat7.xw;
                u_xlat9.xzw = u_xlat10.xzw;
                u_xlat10 = u_xlat44.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.xyzy;
                u_xlat49.xy = u_xlat44.xy * _MainLightShadowmapSize.xy + u_xlat9.wy;
                u_xlat9.x = u_xlat7.x;
                u_xlat44.xy = u_xlat44.xy * _MainLightShadowmapSize.xy + u_xlat9.xy;
                u_xlat17 = u_xlat6.xxxx * u_xlat8;
                u_xlat18 = u_xlat6.yyyy * u_xlat8;
                u_xlat19 = u_xlat6.zzzz * u_xlat8;
                u_xlat6 = u_xlat6.wwww * u_xlat8;
                vec3 txVec13 = vec3(u_xlat11.xy,vs_TEXCOORD8.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec13, 0.0);
                vec3 txVec14 = vec3(u_xlat11.zw,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec14, 0.0);
                u_xlat7.x = u_xlat7.x * u_xlat17.y;
                u_xlat65 = u_xlat17.x * u_xlat65 + u_xlat7.x;
                vec3 txVec15 = vec3(u_xlat12.xy,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec15, 0.0);
                u_xlat65 = u_xlat17.z * u_xlat7.x + u_xlat65;
                vec3 txVec16 = vec3(u_xlat14.xy,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec16, 0.0);
                u_xlat65 = u_xlat17.w * u_xlat7.x + u_xlat65;
                vec3 txVec17 = vec3(u_xlat13.xy,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec17, 0.0);
                u_xlat65 = u_xlat18.x * u_xlat7.x + u_xlat65;
                vec3 txVec18 = vec3(u_xlat13.zw,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec18, 0.0);
                u_xlat65 = u_xlat18.y * u_xlat7.x + u_xlat65;
                vec3 txVec19 = vec3(u_xlat52.xy,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec19, 0.0);
                u_xlat65 = u_xlat18.z * u_xlat7.x + u_xlat65;
                vec3 txVec20 = vec3(u_xlat14.zw,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec20, 0.0);
                u_xlat65 = u_xlat18.w * u_xlat7.x + u_xlat65;
                vec3 txVec21 = vec3(u_xlat15.xy,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec21, 0.0);
                u_xlat65 = u_xlat19.x * u_xlat7.x + u_xlat65;
                vec3 txVec22 = vec3(u_xlat15.zw,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec22, 0.0);
                u_xlat65 = u_xlat19.y * u_xlat7.x + u_xlat65;
                vec3 txVec23 = vec3(u_xlat27.xy,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec23, 0.0);
                u_xlat65 = u_xlat19.z * u_xlat7.x + u_xlat65;
                vec3 txVec24 = vec3(u_xlat16.xy,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec24, 0.0);
                u_xlat65 = u_xlat19.w * u_xlat7.x + u_xlat65;
                vec3 txVec25 = vec3(u_xlat10.xy,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec25, 0.0);
                u_xlat65 = u_xlat6.x * u_xlat7.x + u_xlat65;
                vec3 txVec26 = vec3(u_xlat10.zw,vs_TEXCOORD8.z);
                u_xlat6.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec26, 0.0);
                u_xlat65 = u_xlat6.y * u_xlat6.x + u_xlat65;
                vec3 txVec27 = vec3(u_xlat49.xy,vs_TEXCOORD8.z);
                u_xlat6.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec27, 0.0);
                u_xlat65 = u_xlat6.z * u_xlat6.x + u_xlat65;
                vec3 txVec28 = vec3(u_xlat44.xy,vs_TEXCOORD8.z);
                u_xlat44.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec28, 0.0);
                u_xlat24.x = u_xlat6.w * u_xlat44.x + u_xlat65;
            }
        }
    } else {
        vec3 txVec29 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
        u_xlat24.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec29, 0.0);
    }
    u_xlat44.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat24.x = u_xlat24.x * _MainLightShadowParams.x + u_xlat44.x;
    u_xlatb44.x = 0.0>=vs_TEXCOORD8.z;
    u_xlatb64 = vs_TEXCOORD8.z>=1.0;
    u_xlatb44.x = u_xlatb64 || u_xlatb44.x;
    u_xlat24.x = (u_xlatb44.x) ? 1.0 : u_xlat24.x;
    u_xlat6.xyz = vs_TEXCOORD7.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat44.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat44.x = u_xlat44.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat44.x = clamp(u_xlat44.x, 0.0, 1.0);
    u_xlat64 = (-u_xlat24.x) + 1.0;
    u_xlat24.x = u_xlat44.x * u_xlat64 + u_xlat24.x;
    u_xlatb44.x = _MainLightCookieTextureFormat!=-1.0;
    if(u_xlatb44.x){
        u_xlat44.xy = vs_TEXCOORD7.yy * _MainLightWorldToLight[1].xy;
        u_xlat44.xy = _MainLightWorldToLight[0].xy * vs_TEXCOORD7.xx + u_xlat44.xy;
        u_xlat44.xy = _MainLightWorldToLight[2].xy * vs_TEXCOORD7.zz + u_xlat44.xy;
        u_xlat44.xy = u_xlat44.xy + _MainLightWorldToLight[3].xy;
        u_xlat44.xy = u_xlat44.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat6 = texture(sampler2D(_MainLightCookieTexture, sampler_MainLightCookieTexture), u_xlat44.xy, _GlobalMipBias.x);
        u_xlatb44.xy = equal(vec4(vec4(_MainLightCookieTextureFormat, _MainLightCookieTextureFormat, _MainLightCookieTextureFormat, _MainLightCookieTextureFormat)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
        u_xlat64 = (u_xlatb44.y) ? u_xlat6.w : u_xlat6.x;
        u_xlat6.xyz = (u_xlatb44.x) ? u_xlat6.xyz : vec3(u_xlat64);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
    }
    u_xlat6.xyz = u_xlat6.xyz * _MainLightColor.xyz;
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz;
    u_xlat7.x = vs_TEXCOORD3.w;
    u_xlat7.y = vs_TEXCOORD4.w;
    u_xlat7.z = vs_TEXCOORD5.w;
    u_xlat44.x = dot((-u_xlat7.xyz), u_xlat2.xyz);
    u_xlat44.x = u_xlat44.x + u_xlat44.x;
    u_xlat8.xyz = u_xlat2.xyz * (-u_xlat44.xxx) + (-u_xlat7.xyz);
    u_xlat44.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat44.x = clamp(u_xlat44.x, 0.0, 1.0);
    u_xlat44.x = (-u_xlat44.x) + 1.0;
    u_xlat44.x = u_xlat44.x * u_xlat44.x;
    u_xlat44.x = u_xlat44.x * u_xlat44.x;
    u_xlat64 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat1.x = u_xlat1.x * u_xlat64;
    u_xlat1.x = u_xlat1.x * 6.0;
    u_xlat8 = textureLod(samplerCube(unity_SpecCube0, samplerunity_SpecCube0), u_xlat8.xyz, u_xlat1.x);
    u_xlat1.x = u_xlat8.w + -1.0;
    u_xlat1.x = unity_SpecCube0_HDR.w * u_xlat1.x + 1.0;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.y;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.xz = u_xlat41.xx * u_xlat41.xx + vec2(-1.0, 1.0);
    u_xlat41.x = float(1.0) / u_xlat1.z;
    u_xlat9.xyz = (-u_xlat0.xyz) + vec3(u_xlat60);
    u_xlat9.xyz = u_xlat44.xxx * u_xlat9.xyz + u_xlat0.xyz;
    u_xlat9.xyz = u_xlat41.xxx * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz + u_xlat8.xyz;
    u_xlat60 = u_xlat24.x * unity_LightData.z;
    u_xlat41.x = dot(u_xlat2.xyz, _MainLightPosition.xyz);
    u_xlat41.x = clamp(u_xlat41.x, 0.0, 1.0);
    u_xlat60 = u_xlat60 * u_xlat41.x;
    u_xlat24.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat7.xyz + _MainLightPosition.xyz;
    u_xlat60 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat60 = max(u_xlat60, 1.17549435e-37);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat60 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
    u_xlat41.x = dot(_MainLightPosition.xyz, u_xlat6.xyz);
    u_xlat41.x = clamp(u_xlat41.x, 0.0, 1.0);
    u_xlat60 = u_xlat60 * u_xlat60;
    u_xlat60 = u_xlat60 * u_xlat1.x + 1.00001001;
    u_xlat41.x = u_xlat41.x * u_xlat41.x;
    u_xlat60 = u_xlat60 * u_xlat60;
    u_xlat41.x = max(u_xlat41.x, 0.100000001);
    u_xlat60 = u_xlat60 * u_xlat41.x;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat62 / u_xlat60;
    u_xlat6.xyz = u_xlat0.xyz * vec3(u_xlat60) + u_xlat5.xyz;
    u_xlat24.xyz = u_xlat24.xyz * u_xlat6.xyz;
    u_xlat60 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu60 =  uint(int(u_xlat60));
    u_xlatb6.xy = equal(vec4(vec4(_AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = float(0.0);
    u_xlat8.y = float(0.0);
    u_xlat8.z = float(0.0);
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu60 ; u_xlatu_loop_1++)
    {
        u_xlatu65 = u_xlatu_loop_1 >> (2u & uint(0x1F));
        u_xlati46 = int(u_xlatu_loop_1 & 3u);
        u_xlat65 = dot(unity_LightIndices[int(u_xlatu65)], uintBitsToFloat(ImmCB_0[u_xlati46]));
        u_xlatu65 =  uint(int(u_xlat65));
        u_xlat9.xyz = (-vs_TEXCOORD7.xyz) * _AdditionalLightsPosition[int(u_xlatu65)].www + _AdditionalLightsPosition[int(u_xlatu65)].xyz;
        u_xlat46.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat46.x = max(u_xlat46.x, 6.10351562e-05);
        u_xlat66 = inversesqrt(u_xlat46.x);
        u_xlat10.xyz = vec3(u_xlat66) * u_xlat9.xyz;
        u_xlat67 = float(1.0) / float(u_xlat46.x);
        u_xlat46.x = u_xlat46.x * _AdditionalLightsAttenuation[int(u_xlatu65)].x;
        u_xlat46.x = (-u_xlat46.x) * u_xlat46.x + 1.0;
        u_xlat46.x = max(u_xlat46.x, 0.0);
        u_xlat46.x = u_xlat46.x * u_xlat46.x;
        u_xlat46.x = u_xlat46.x * u_xlat67;
        u_xlat67 = dot(_AdditionalLightsSpotDir[int(u_xlatu65)].xyz, u_xlat10.xyz);
        u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[int(u_xlatu65)].z + _AdditionalLightsAttenuation[int(u_xlatu65)].w;
        u_xlat67 = clamp(u_xlat67, 0.0, 1.0);
        u_xlat67 = u_xlat67 * u_xlat67;
        u_xlat46.x = u_xlat46.x * u_xlat67;
        u_xlatu67 = u_xlatu65 >> (5u & uint(0x1F));
        u_xlati68 = 1 << (int(u_xlatu65) & int(0x1F));
        u_xlati67 = int(uint(u_xlati68) & floatBitsToUint(_AdditionalLightsCookieEnableBits[int(u_xlatu67)]));
        if(u_xlati67 != 0) {
            u_xlati67 = int(_AdditionalLightsLightTypes[int(u_xlatu65)]);
            u_xlati68 = (u_xlati67 != 0) ? 0 : 1;
            u_xlati69 = int(u_xlatu65) << (2 & int(0x1F));
            if(u_xlati68 != 0) {
                u_xlat11.xyz = vs_TEXCOORD7.yyy * _AdditionalLightsWorldToLights[(u_xlati69 + 1) / 4][(u_xlati69 + 1) % 4].xyw;
                u_xlat11.xyz = _AdditionalLightsWorldToLights[u_xlati69 / 4][u_xlati69 % 4].xyw * vs_TEXCOORD7.xxx + u_xlat11.xyz;
                u_xlat11.xyz = _AdditionalLightsWorldToLights[(u_xlati69 + 2) / 4][(u_xlati69 + 2) % 4].xyw * vs_TEXCOORD7.zzz + u_xlat11.xyz;
                u_xlat11.xyz = u_xlat11.xyz + _AdditionalLightsWorldToLights[(u_xlati69 + 3) / 4][(u_xlati69 + 3) % 4].xyw;
                u_xlat11.xy = u_xlat11.xy / u_xlat11.zz;
                u_xlat11.xy = u_xlat11.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                u_xlat11.xy = clamp(u_xlat11.xy, 0.0, 1.0);
                u_xlat11.xy = _AdditionalLightsCookieAtlasUVRects[int(u_xlatu65)].xy * u_xlat11.xy + _AdditionalLightsCookieAtlasUVRects[int(u_xlatu65)].zw;
            } else {
                u_xlatb67 = u_xlati67==1;
                u_xlati67 = u_xlatb67 ? 1 : int(0);
                if(u_xlati67 != 0) {
                    u_xlat51.xy = vs_TEXCOORD7.yy * _AdditionalLightsWorldToLights[(u_xlati69 + 1) / 4][(u_xlati69 + 1) % 4].xy;
                    u_xlat51.xy = _AdditionalLightsWorldToLights[u_xlati69 / 4][u_xlati69 % 4].xy * vs_TEXCOORD7.xx + u_xlat51.xy;
                    u_xlat51.xy = _AdditionalLightsWorldToLights[(u_xlati69 + 2) / 4][(u_xlati69 + 2) % 4].xy * vs_TEXCOORD7.zz + u_xlat51.xy;
                    u_xlat51.xy = u_xlat51.xy + _AdditionalLightsWorldToLights[(u_xlati69 + 3) / 4][(u_xlati69 + 3) % 4].xy;
                    u_xlat51.xy = u_xlat51.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                    u_xlat51.xy = fract(u_xlat51.xy);
                    u_xlat11.xy = _AdditionalLightsCookieAtlasUVRects[int(u_xlatu65)].xy * u_xlat51.xy + _AdditionalLightsCookieAtlasUVRects[int(u_xlatu65)].zw;
                } else {
                    u_xlat12 = vs_TEXCOORD7.yyyy * _AdditionalLightsWorldToLights[(u_xlati69 + 1) / 4][(u_xlati69 + 1) % 4];
                    u_xlat12 = _AdditionalLightsWorldToLights[u_xlati69 / 4][u_xlati69 % 4] * vs_TEXCOORD7.xxxx + u_xlat12;
                    u_xlat12 = _AdditionalLightsWorldToLights[(u_xlati69 + 2) / 4][(u_xlati69 + 2) % 4] * vs_TEXCOORD7.zzzz + u_xlat12;
                    u_xlat12 = u_xlat12 + _AdditionalLightsWorldToLights[(u_xlati69 + 3) / 4][(u_xlati69 + 3) % 4];
                    u_xlat12.xyz = u_xlat12.xyz / u_xlat12.www;
                    u_xlat67 = dot(u_xlat12.xyz, u_xlat12.xyz);
                    u_xlat67 = inversesqrt(u_xlat67);
                    u_xlat12.xyz = vec3(u_xlat67) * u_xlat12.xyz;
                    u_xlat67 = dot(abs(u_xlat12.xyz), vec3(1.0, 1.0, 1.0));
                    u_xlat67 = max(u_xlat67, 9.99999997e-07);
                    u_xlat67 = float(1.0) / float(u_xlat67);
                    u_xlat13.xyz = vec3(u_xlat67) * u_xlat12.zxy;
                    u_xlat13.x = (-u_xlat13.x);
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlatb51.xy = greaterThanEqual(u_xlat13.yzyz, vec4(0.0, 0.0, 0.0, 0.0)).xy;
                    u_xlat51.x = (u_xlatb51.x) ? u_xlat13.x : (-u_xlat13.x);
                    u_xlat51.y = (u_xlatb51.y) ? u_xlat13.x : (-u_xlat13.x);
                    u_xlat51.xy = u_xlat12.xy * vec2(u_xlat67) + u_xlat51.xy;
                    u_xlat51.xy = u_xlat51.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                    u_xlat51.xy = clamp(u_xlat51.xy, 0.0, 1.0);
                    u_xlat11.xy = _AdditionalLightsCookieAtlasUVRects[int(u_xlatu65)].xy * u_xlat51.xy + _AdditionalLightsCookieAtlasUVRects[int(u_xlatu65)].zw;
                }
            }
            u_xlat11 = texture(sampler2D(_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture), u_xlat11.xy, _GlobalMipBias.x);
            u_xlat67 = (u_xlatb6.y) ? u_xlat11.w : u_xlat11.x;
            u_xlat11.xyz = (u_xlatb6.x) ? u_xlat11.xyz : vec3(u_xlat67);
        } else {
            u_xlat11.x = float(1.0);
            u_xlat11.y = float(1.0);
            u_xlat11.z = float(1.0);
        }
        u_xlat11.xyz = u_xlat11.xyz * _AdditionalLightsColor[int(u_xlatu65)].xyz;
        u_xlat11.xyz = u_xlat4.xxx * u_xlat11.xyz;
        u_xlat65 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat65 = clamp(u_xlat65, 0.0, 1.0);
        u_xlat65 = u_xlat65 * u_xlat46.x;
        u_xlat11.xyz = vec3(u_xlat65) * u_xlat11.xyz;
        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat66) + u_xlat7.xyz;
        u_xlat65 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat65 = max(u_xlat65, 1.17549435e-37);
        u_xlat65 = inversesqrt(u_xlat65);
        u_xlat9.xyz = vec3(u_xlat65) * u_xlat9.xyz;
        u_xlat65 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat65 = clamp(u_xlat65, 0.0, 1.0);
        u_xlat46.x = dot(u_xlat10.xyz, u_xlat9.xyz);
        u_xlat46.x = clamp(u_xlat46.x, 0.0, 1.0);
        u_xlat65 = u_xlat65 * u_xlat65;
        u_xlat65 = u_xlat65 * u_xlat1.x + 1.00001001;
        u_xlat46.x = u_xlat46.x * u_xlat46.x;
        u_xlat65 = u_xlat65 * u_xlat65;
        u_xlat46.x = max(u_xlat46.x, 0.100000001);
        u_xlat65 = u_xlat65 * u_xlat46.x;
        u_xlat65 = u_xlat61 * u_xlat65;
        u_xlat65 = u_xlat62 / u_xlat65;
        u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat65) + u_xlat5.xyz;
        u_xlat8.xyz = u_xlat9.xyz * u_xlat11.xyz + u_xlat8.xyz;
    }
    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat63) + u_xlat24.xyz;
    u_xlat0.xyz = u_xlat8.xyz + u_xlat0.xyz;
    u_xlat60 = u_xlat21 * (-u_xlat21);
    u_xlat60 = exp2(u_xlat60);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat60) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

