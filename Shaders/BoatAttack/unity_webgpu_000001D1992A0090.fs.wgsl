struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3356 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3788 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3897 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1584 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1717 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1789 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3422 : f32;
  var x_3433 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4190 : f32;
  var x_4203 : f32;
  var x_4255 : f32;
  var x_4266 : vec3<f32>;
  var x_4421 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_371 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_371);
      let x_374 : vec4<f32> = u_xlat7;
      let x_375 : vec2<f32> = vec2<f32>(x_374.x, x_374.y);
      let x_377 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec2;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat8.z = x_386;
      let x_389 : vec4<f32> = u_xlat7;
      let x_390 : vec2<f32> = vec2<f32>(x_389.z, x_389.w);
      let x_392 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_390.x, x_390.y, x_392);
      let x_399 : vec3<f32> = txVec3;
      let x_401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_399.xy, x_399.z);
      u_xlat8.w = x_401;
      let x_403 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_403, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_410 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_410 == 2.0f);
      let x_412 : bool = u_xlatb65;
      if (x_412) {
        let x_415 : vec4<f32> = u_xlat6;
        let x_418 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_423 : vec2<f32> = ((vec2<f32>(x_415.x, x_415.y) * vec2<f32>(x_418.z, x_418.w)) + vec2<f32>(0.5f, 0.5f));
        let x_424 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_423.x, x_423.y, x_424.z, x_424.w);
        let x_426 : vec4<f32> = u_xlat7;
        let x_428 : vec2<f32> = floor(vec2<f32>(x_426.x, x_426.y));
        let x_429 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_428.x, x_428.y, x_429.z, x_429.w);
        let x_433 : vec4<f32> = u_xlat6;
        let x_436 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_439 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_433.x, x_433.y) * vec2<f32>(x_436.z, x_436.w)) + -(vec2<f32>(x_439.x, x_439.y)));
        let x_443 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_443.x, x_443.x, x_443.y, x_443.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_448 : vec4<f32> = u_xlat8;
        let x_450 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_448.x, x_448.x, x_448.z, x_448.z) * vec4<f32>(x_450.x, x_450.x, x_450.z, x_450.z));
        let x_453 : vec4<f32> = u_xlat9;
        let x_457 : vec2<f32> = (vec2<f32>(x_453.y, x_453.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_458 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_457.x, x_458.y, x_457.y, x_458.w);
        let x_460 : vec4<f32> = u_xlat9;
        let x_463 : vec2<f32> = u_xlat49;
        let x_465 : vec2<f32> = ((vec2<f32>(x_460.x, x_460.z) * vec2<f32>(0.5f, 0.5f)) + -(x_463));
        let x_466 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_465.x, x_465.y, x_466.z, x_466.w);
        let x_469 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_469) + vec2<f32>(1.0f, 1.0f));
        let x_474 : vec2<f32> = u_xlat49;
        let x_476 : vec2<f32> = min(x_474, vec2<f32>(0.0f, 0.0f));
        let x_477 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat10;
        let x_482 : vec4<f32> = u_xlat10;
        let x_485 : vec2<f32> = u_xlat51;
        let x_486 : vec2<f32> = ((-(vec2<f32>(x_479.x, x_479.y)) * vec2<f32>(x_482.x, x_482.y)) + x_485);
        let x_487 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_489 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_489, vec2<f32>(0.0f, 0.0f));
        let x_491 : vec2<f32> = u_xlat49;
        let x_493 : vec2<f32> = u_xlat49;
        let x_495 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_491) * x_493) + vec2<f32>(x_495.y, x_495.w));
        let x_498 : vec4<f32> = u_xlat10;
        let x_500 : vec2<f32> = (vec2<f32>(x_498.x, x_498.y) + vec2<f32>(1.0f, 1.0f));
        let x_501 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_500.x, x_500.y, x_501.z, x_501.w);
        let x_503 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_503 + vec2<f32>(1.0f, 1.0f));
        let x_506 : vec4<f32> = u_xlat9;
        let x_510 : vec2<f32> = (vec2<f32>(x_506.x, x_506.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_511 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_510.x, x_510.y, x_511.z, x_511.w);
        let x_513 : vec2<f32> = u_xlat51;
        let x_514 : vec2<f32> = (x_513 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_515 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_514.x, x_514.y, x_515.z, x_515.w);
        let x_517 : vec4<f32> = u_xlat10;
        let x_519 : vec2<f32> = (vec2<f32>(x_517.x, x_517.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_520 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
        let x_523 : vec2<f32> = u_xlat49;
        let x_524 : vec2<f32> = (x_523 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_525 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_525.w);
        let x_527 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_527.y, x_527.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_531 : f32 = u_xlat10.x;
        u_xlat11.z = x_531;
        let x_534 : f32 = u_xlat49.x;
        u_xlat11.w = x_534;
        let x_537 : f32 = u_xlat12.x;
        u_xlat9.z = x_537;
        let x_540 : f32 = u_xlat8.x;
        u_xlat9.w = x_540;
        let x_543 : vec4<f32> = u_xlat9;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_543.z, x_543.w, x_543.x, x_543.z) + vec4<f32>(x_545.z, x_545.w, x_545.x, x_545.z));
        let x_549 : f32 = u_xlat11.y;
        u_xlat10.z = x_549;
        let x_552 : f32 = u_xlat49.y;
        u_xlat10.w = x_552;
        let x_555 : f32 = u_xlat9.y;
        u_xlat12.z = x_555;
        let x_558 : f32 = u_xlat8.z;
        u_xlat12.w = x_558;
        let x_560 : vec4<f32> = u_xlat10;
        let x_562 : vec4<f32> = u_xlat12;
        let x_564 : vec3<f32> = (vec3<f32>(x_560.z, x_560.y, x_560.w) + vec3<f32>(x_562.z, x_562.y, x_562.w));
        let x_565 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat9;
        let x_569 : vec4<f32> = u_xlat13;
        let x_571 : vec3<f32> = (vec3<f32>(x_567.x, x_567.z, x_567.w) / vec3<f32>(x_569.z, x_569.w, x_569.y));
        let x_572 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
        let x_574 : vec4<f32> = u_xlat9;
        let x_580 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_581 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_580.x, x_580.y, x_580.z, x_581.w);
        let x_583 : vec4<f32> = u_xlat12;
        let x_585 : vec4<f32> = u_xlat8;
        let x_587 : vec3<f32> = (vec3<f32>(x_583.z, x_583.y, x_583.w) / vec3<f32>(x_585.x, x_585.y, x_585.z));
        let x_588 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_587.x, x_587.y, x_587.z, x_588.w);
        let x_590 : vec4<f32> = u_xlat10;
        let x_592 : vec3<f32> = (vec3<f32>(x_590.x, x_590.y, x_590.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_595 : vec4<f32> = u_xlat9;
        let x_598 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_600 : vec3<f32> = (vec3<f32>(x_595.y, x_595.x, x_595.z) * vec3<f32>(x_598.x, x_598.x, x_598.x));
        let x_601 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_600.x, x_600.y, x_600.z, x_601.w);
        let x_603 : vec4<f32> = u_xlat10;
        let x_606 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_608 : vec3<f32> = (vec3<f32>(x_603.x, x_603.y, x_603.z) * vec3<f32>(x_606.y, x_606.y, x_606.y));
        let x_609 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_608.x, x_608.y, x_608.z, x_609.w);
        let x_612 : f32 = u_xlat10.x;
        u_xlat9.w = x_612;
        let x_614 : vec4<f32> = u_xlat7;
        let x_617 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_620 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y) * vec4<f32>(x_617.x, x_617.y, x_617.x, x_617.y)) + vec4<f32>(x_620.y, x_620.w, x_620.x, x_620.w));
        let x_623 : vec4<f32> = u_xlat7;
        let x_626 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_623.x, x_623.y) * vec2<f32>(x_626.x, x_626.y)) + vec2<f32>(x_629.z, x_629.w));
        let x_633 : f32 = u_xlat9.y;
        u_xlat10.w = x_633;
        let x_635 : vec4<f32> = u_xlat10;
        let x_636 : vec2<f32> = vec2<f32>(x_635.y, x_635.z);
        let x_637 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_637.x, x_636.x, x_637.z, x_636.y);
        let x_639 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_645 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y) * vec4<f32>(x_642.x, x_642.y, x_642.x, x_642.y)) + vec4<f32>(x_645.x, x_645.y, x_645.z, x_645.y));
        let x_648 : vec4<f32> = u_xlat7;
        let x_651 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_654 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_648.x, x_648.y, x_648.x, x_648.y) * vec4<f32>(x_651.x, x_651.y, x_651.x, x_651.y)) + vec4<f32>(x_654.w, x_654.y, x_654.w, x_654.z));
        let x_657 : vec4<f32> = u_xlat7;
        let x_660 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_663 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_657.x, x_657.y, x_657.x, x_657.y) * vec4<f32>(x_660.x, x_660.y, x_660.x, x_660.y)) + vec4<f32>(x_663.x, x_663.w, x_663.z, x_663.w));
        let x_667 : vec4<f32> = u_xlat8;
        let x_669 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_667.x, x_667.x, x_667.x, x_667.y) * vec4<f32>(x_669.z, x_669.w, x_669.y, x_669.z));
        let x_673 : vec4<f32> = u_xlat8;
        let x_675 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_673.y, x_673.y, x_673.z, x_673.z) * x_675);
        let x_679 : f32 = u_xlat8.z;
        let x_681 : f32 = u_xlat13.y;
        u_xlat65 = (x_679 * x_681);
        let x_684 : vec4<f32> = u_xlat11;
        let x_685 : vec2<f32> = vec2<f32>(x_684.x, x_684.y);
        let x_687 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_685.x, x_685.y, x_687);
        let x_695 : vec3<f32> = txVec4;
        let x_697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_695.xy, x_695.z);
        u_xlat67 = x_697;
        let x_699 : vec4<f32> = u_xlat11;
        let x_700 : vec2<f32> = vec2<f32>(x_699.z, x_699.w);
        let x_702 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_700.x, x_700.y, x_702);
        let x_710 : vec3<f32> = txVec5;
        let x_712 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_710.xy, x_710.z);
        u_xlat69 = x_712;
        let x_713 : f32 = u_xlat69;
        let x_715 : f32 = u_xlat14.y;
        u_xlat69 = (x_713 * x_715);
        let x_718 : f32 = u_xlat14.x;
        let x_719 : f32 = u_xlat67;
        let x_721 : f32 = u_xlat69;
        u_xlat67 = ((x_718 * x_719) + x_721);
        let x_724 : vec2<f32> = u_xlat49;
        let x_726 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_724.x, x_724.y, x_726);
        let x_733 : vec3<f32> = txVec6;
        let x_735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_733.xy, x_733.z);
        u_xlat69 = x_735;
        let x_737 : f32 = u_xlat14.z;
        let x_738 : f32 = u_xlat69;
        let x_740 : f32 = u_xlat67;
        u_xlat67 = ((x_737 * x_738) + x_740);
        let x_743 : vec4<f32> = u_xlat10;
        let x_744 : vec2<f32> = vec2<f32>(x_743.x, x_743.y);
        let x_746 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_744.x, x_744.y, x_746);
        let x_753 : vec3<f32> = txVec7;
        let x_755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_753.xy, x_753.z);
        u_xlat69 = x_755;
        let x_757 : f32 = u_xlat14.w;
        let x_758 : f32 = u_xlat69;
        let x_760 : f32 = u_xlat67;
        u_xlat67 = ((x_757 * x_758) + x_760);
        let x_763 : vec4<f32> = u_xlat12;
        let x_764 : vec2<f32> = vec2<f32>(x_763.x, x_763.y);
        let x_766 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_764.x, x_764.y, x_766);
        let x_773 : vec3<f32> = txVec8;
        let x_775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_773.xy, x_773.z);
        u_xlat69 = x_775;
        let x_777 : f32 = u_xlat15.x;
        let x_778 : f32 = u_xlat69;
        let x_780 : f32 = u_xlat67;
        u_xlat67 = ((x_777 * x_778) + x_780);
        let x_783 : vec4<f32> = u_xlat12;
        let x_784 : vec2<f32> = vec2<f32>(x_783.z, x_783.w);
        let x_786 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_784.x, x_784.y, x_786);
        let x_793 : vec3<f32> = txVec9;
        let x_795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_793.xy, x_793.z);
        u_xlat69 = x_795;
        let x_797 : f32 = u_xlat15.y;
        let x_798 : f32 = u_xlat69;
        let x_800 : f32 = u_xlat67;
        u_xlat67 = ((x_797 * x_798) + x_800);
        let x_803 : vec4<f32> = u_xlat10;
        let x_804 : vec2<f32> = vec2<f32>(x_803.z, x_803.w);
        let x_806 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_804.x, x_804.y, x_806);
        let x_813 : vec3<f32> = txVec10;
        let x_815 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_813.xy, x_813.z);
        u_xlat69 = x_815;
        let x_817 : f32 = u_xlat15.z;
        let x_818 : f32 = u_xlat69;
        let x_820 : f32 = u_xlat67;
        u_xlat67 = ((x_817 * x_818) + x_820);
        let x_823 : vec4<f32> = u_xlat9;
        let x_824 : vec2<f32> = vec2<f32>(x_823.x, x_823.y);
        let x_826 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec11;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat69 = x_835;
        let x_837 : f32 = u_xlat15.w;
        let x_838 : f32 = u_xlat69;
        let x_840 : f32 = u_xlat67;
        u_xlat67 = ((x_837 * x_838) + x_840);
        let x_843 : vec4<f32> = u_xlat9;
        let x_844 : vec2<f32> = vec2<f32>(x_843.z, x_843.w);
        let x_846 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_844.x, x_844.y, x_846);
        let x_853 : vec3<f32> = txVec12;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat69 = x_855;
        let x_856 : f32 = u_xlat65;
        let x_857 : f32 = u_xlat69;
        let x_859 : f32 = u_xlat67;
        u_xlat64 = ((x_856 * x_857) + x_859);
      } else {
        let x_862 : vec4<f32> = u_xlat6;
        let x_865 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_868 : vec2<f32> = ((vec2<f32>(x_862.x, x_862.y) * vec2<f32>(x_865.z, x_865.w)) + vec2<f32>(0.5f, 0.5f));
        let x_869 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_868.x, x_868.y, x_869.z, x_869.w);
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec2<f32> = floor(vec2<f32>(x_871.x, x_871.y));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_873.y, x_874.z, x_874.w);
        let x_876 : vec4<f32> = u_xlat6;
        let x_879 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_879.z, x_879.w)) + -(vec2<f32>(x_882.x, x_882.y)));
        let x_886 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_886.x, x_886.x, x_886.y, x_886.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_889 : vec4<f32> = u_xlat8;
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_889.x, x_889.x, x_889.z, x_889.z) * vec4<f32>(x_891.x, x_891.x, x_891.z, x_891.z));
        let x_894 : vec4<f32> = u_xlat9;
        let x_898 : vec2<f32> = (vec2<f32>(x_894.y, x_894.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_899 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_899.x, x_898.x, x_899.z, x_898.y);
        let x_901 : vec4<f32> = u_xlat9;
        let x_904 : vec2<f32> = u_xlat49;
        let x_906 : vec2<f32> = ((vec2<f32>(x_901.x, x_901.z) * vec2<f32>(0.5f, 0.5f)) + -(x_904));
        let x_907 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_906.x, x_907.y, x_906.y, x_907.w);
        let x_909 : vec2<f32> = u_xlat49;
        let x_911 : vec2<f32> = (-(x_909) + vec2<f32>(1.0f, 1.0f));
        let x_912 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_911.x, x_911.y, x_912.z, x_912.w);
        let x_914 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_914, vec2<f32>(0.0f, 0.0f));
        let x_916 : vec2<f32> = u_xlat51;
        let x_918 : vec2<f32> = u_xlat51;
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec2<f32> = ((-(x_916) * x_918) + vec2<f32>(x_920.x, x_920.y));
        let x_923 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_925, vec2<f32>(0.0f, 0.0f));
        let x_928 : vec2<f32> = u_xlat51;
        let x_930 : vec2<f32> = u_xlat51;
        let x_932 : vec4<f32> = u_xlat8;
        let x_934 : vec2<f32> = ((-(x_928) * x_930) + vec2<f32>(x_932.y, x_932.w));
        let x_935 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_934.x, x_935.y, x_934.y);
        let x_937 : vec4<f32> = u_xlat9;
        let x_940 : vec2<f32> = (vec2<f32>(x_937.x, x_937.y) + vec2<f32>(2.0f, 2.0f));
        let x_941 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_940.x, x_940.y, x_941.z, x_941.w);
        let x_943 : vec3<f32> = u_xlat29;
        let x_945 : vec2<f32> = (vec2<f32>(x_943.x, x_943.z) + vec2<f32>(2.0f, 2.0f));
        let x_946 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_946.x, x_945.x, x_946.z, x_945.y);
        let x_949 : f32 = u_xlat8.y;
        u_xlat11.z = (x_949 * 0.081632003f);
        let x_953 : vec4<f32> = u_xlat8;
        let x_956 : vec3<f32> = (vec3<f32>(x_953.z, x_953.x, x_953.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_957 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_956.x, x_956.y, x_956.z, x_957.w);
        let x_959 : vec4<f32> = u_xlat9;
        let x_962 : vec2<f32> = (vec2<f32>(x_959.x, x_959.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_963 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_962.x, x_962.y, x_963.z, x_963.w);
        let x_966 : f32 = u_xlat12.y;
        u_xlat11.x = x_966;
        let x_968 : vec2<f32> = u_xlat49;
        let x_975 : vec2<f32> = ((vec2<f32>(x_968.x, x_968.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_976.x, x_975.x, x_976.z, x_975.y);
        let x_978 : vec2<f32> = u_xlat49;
        let x_982 : vec2<f32> = ((vec2<f32>(x_978.x, x_978.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_983 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_982.x, x_983.y, x_982.y, x_983.w);
        let x_986 : f32 = u_xlat8.x;
        u_xlat9.y = x_986;
        let x_989 : f32 = u_xlat10.y;
        u_xlat9.w = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_991 + x_992);
        let x_994 : vec2<f32> = u_xlat49;
        let x_997 : vec2<f32> = ((vec2<f32>(x_994.y, x_994.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_998 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_998.x, x_997.x, x_998.z, x_997.y);
        let x_1000 : vec2<f32> = u_xlat49;
        let x_1003 : vec2<f32> = ((vec2<f32>(x_1000.y, x_1000.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1004 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1003.x, x_1004.y, x_1003.y, x_1004.w);
        let x_1007 : f32 = u_xlat8.y;
        u_xlat10.y = x_1007;
        let x_1009 : vec4<f32> = u_xlat10;
        let x_1010 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1009 + x_1010);
        let x_1012 : vec4<f32> = u_xlat9;
        let x_1013 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1012 / x_1013);
        let x_1015 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1015 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1021 : vec4<f32> = u_xlat10;
        let x_1022 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1021 / x_1022);
        let x_1024 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1024 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1026 : vec4<f32> = u_xlat9;
        let x_1029 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1026.w, x_1026.x, x_1026.y, x_1026.z) * vec4<f32>(x_1029.x, x_1029.x, x_1029.x, x_1029.x));
        let x_1032 : vec4<f32> = u_xlat10;
        let x_1035 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1032.x, x_1032.w, x_1032.y, x_1032.z) * vec4<f32>(x_1035.y, x_1035.y, x_1035.y, x_1035.y));
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1039 : vec3<f32> = vec3<f32>(x_1038.y, x_1038.z, x_1038.w);
        let x_1040 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1039.x, x_1040.y, x_1039.y, x_1039.z);
        let x_1043 : f32 = u_xlat10.x;
        u_xlat12.y = x_1043;
        let x_1045 : vec4<f32> = u_xlat7;
        let x_1048 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1051 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1045.x, x_1045.y, x_1045.x, x_1045.y) * vec4<f32>(x_1048.x, x_1048.y, x_1048.x, x_1048.y)) + vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1051.y));
        let x_1054 : vec4<f32> = u_xlat7;
        let x_1057 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1060 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1054.x, x_1054.y) * vec2<f32>(x_1057.x, x_1057.y)) + vec2<f32>(x_1060.w, x_1060.y));
        let x_1064 : f32 = u_xlat12.y;
        u_xlat9.y = x_1064;
        let x_1067 : f32 = u_xlat10.z;
        u_xlat12.y = x_1067;
        let x_1069 : vec4<f32> = u_xlat7;
        let x_1072 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1075 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1069.x, x_1069.y, x_1069.x, x_1069.y) * vec4<f32>(x_1072.x, x_1072.y, x_1072.x, x_1072.y)) + vec4<f32>(x_1075.x, x_1075.y, x_1075.z, x_1075.y));
        let x_1078 : vec4<f32> = u_xlat7;
        let x_1081 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1084 : vec4<f32> = u_xlat12;
        let x_1086 : vec2<f32> = ((vec2<f32>(x_1078.x, x_1078.y) * vec2<f32>(x_1081.x, x_1081.y)) + vec2<f32>(x_1084.w, x_1084.y));
        let x_1087 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
        let x_1090 : f32 = u_xlat12.y;
        u_xlat9.z = x_1090;
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1096 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1099 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.y) * vec4<f32>(x_1096.x, x_1096.y, x_1096.x, x_1096.y)) + vec4<f32>(x_1099.x, x_1099.y, x_1099.x, x_1099.z));
        let x_1103 : f32 = u_xlat10.w;
        u_xlat12.y = x_1103;
        let x_1106 : vec4<f32> = u_xlat7;
        let x_1109 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1112 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1106.x, x_1106.y, x_1106.x, x_1106.y) * vec4<f32>(x_1109.x, x_1109.y, x_1109.x, x_1109.y)) + vec4<f32>(x_1112.x, x_1112.y, x_1112.z, x_1112.y));
        let x_1116 : vec4<f32> = u_xlat7;
        let x_1119 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1119.x, x_1119.y)) + vec2<f32>(x_1122.w, x_1122.y));
        let x_1126 : f32 = u_xlat12.y;
        u_xlat9.w = x_1126;
        let x_1129 : vec4<f32> = u_xlat7;
        let x_1132 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1135 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1129.x, x_1129.y) * vec2<f32>(x_1132.x, x_1132.y)) + vec2<f32>(x_1135.x, x_1135.w));
        let x_1138 : vec4<f32> = u_xlat12;
        let x_1139 : vec3<f32> = vec3<f32>(x_1138.x, x_1138.z, x_1138.w);
        let x_1140 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1139.x, x_1140.y, x_1139.y, x_1139.z);
        let x_1142 : vec4<f32> = u_xlat7;
        let x_1145 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1148 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1142.x, x_1142.y, x_1142.x, x_1142.y) * vec4<f32>(x_1145.x, x_1145.y, x_1145.x, x_1145.y)) + vec4<f32>(x_1148.x, x_1148.y, x_1148.z, x_1148.y));
        let x_1152 : vec4<f32> = u_xlat7;
        let x_1155 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1158 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1152.x, x_1152.y) * vec2<f32>(x_1155.x, x_1155.y)) + vec2<f32>(x_1158.w, x_1158.y));
        let x_1162 : f32 = u_xlat9.x;
        u_xlat10.x = x_1162;
        let x_1164 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1170 : vec4<f32> = u_xlat10;
        let x_1172 : vec2<f32> = ((vec2<f32>(x_1164.x, x_1164.y) * vec2<f32>(x_1167.x, x_1167.y)) + vec2<f32>(x_1170.x, x_1170.y));
        let x_1173 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1172.x, x_1172.y, x_1173.z, x_1173.w);
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1176.x, x_1176.x, x_1176.x, x_1176.x) * x_1178);
        let x_1181 : vec4<f32> = u_xlat8;
        let x_1183 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1181.y, x_1181.y, x_1181.y, x_1181.y) * x_1183);
        let x_1186 : vec4<f32> = u_xlat8;
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1186.z, x_1186.z, x_1186.z, x_1186.z) * x_1188);
        let x_1190 : vec4<f32> = u_xlat8;
        let x_1192 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1190.w, x_1190.w, x_1190.w, x_1190.w) * x_1192);
        let x_1195 : vec4<f32> = u_xlat13;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.x, x_1195.y);
        let x_1198 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec13;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat65 = x_1207;
        let x_1209 : vec4<f32> = u_xlat13;
        let x_1210 : vec2<f32> = vec2<f32>(x_1209.z, x_1209.w);
        let x_1212 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1210.x, x_1210.y, x_1212);
        let x_1219 : vec3<f32> = txVec14;
        let x_1221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1219.xy, x_1219.z);
        u_xlat67 = x_1221;
        let x_1222 : f32 = u_xlat67;
        let x_1224 : f32 = u_xlat18.y;
        u_xlat67 = (x_1222 * x_1224);
        let x_1227 : f32 = u_xlat18.x;
        let x_1228 : f32 = u_xlat65;
        let x_1230 : f32 = u_xlat67;
        u_xlat65 = ((x_1227 * x_1228) + x_1230);
        let x_1233 : vec2<f32> = u_xlat49;
        let x_1235 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1233.x, x_1233.y, x_1235);
        let x_1242 : vec3<f32> = txVec15;
        let x_1244 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1242.xy, x_1242.z);
        u_xlat67 = x_1244;
        let x_1246 : f32 = u_xlat18.z;
        let x_1247 : f32 = u_xlat67;
        let x_1249 : f32 = u_xlat65;
        u_xlat65 = ((x_1246 * x_1247) + x_1249);
        let x_1252 : vec4<f32> = u_xlat16;
        let x_1253 : vec2<f32> = vec2<f32>(x_1252.x, x_1252.y);
        let x_1255 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1253.x, x_1253.y, x_1255);
        let x_1262 : vec3<f32> = txVec16;
        let x_1264 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1262.xy, x_1262.z);
        u_xlat67 = x_1264;
        let x_1266 : f32 = u_xlat18.w;
        let x_1267 : f32 = u_xlat67;
        let x_1269 : f32 = u_xlat65;
        u_xlat65 = ((x_1266 * x_1267) + x_1269);
        let x_1272 : vec4<f32> = u_xlat14;
        let x_1273 : vec2<f32> = vec2<f32>(x_1272.x, x_1272.y);
        let x_1275 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1273.x, x_1273.y, x_1275);
        let x_1282 : vec3<f32> = txVec17;
        let x_1284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1282.xy, x_1282.z);
        u_xlat67 = x_1284;
        let x_1286 : f32 = u_xlat19.x;
        let x_1287 : f32 = u_xlat67;
        let x_1289 : f32 = u_xlat65;
        u_xlat65 = ((x_1286 * x_1287) + x_1289);
        let x_1292 : vec4<f32> = u_xlat14;
        let x_1293 : vec2<f32> = vec2<f32>(x_1292.z, x_1292.w);
        let x_1295 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1293.x, x_1293.y, x_1295);
        let x_1302 : vec3<f32> = txVec18;
        let x_1304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1302.xy, x_1302.z);
        u_xlat67 = x_1304;
        let x_1306 : f32 = u_xlat19.y;
        let x_1307 : f32 = u_xlat67;
        let x_1309 : f32 = u_xlat65;
        u_xlat65 = ((x_1306 * x_1307) + x_1309);
        let x_1312 : vec4<f32> = u_xlat15;
        let x_1313 : vec2<f32> = vec2<f32>(x_1312.x, x_1312.y);
        let x_1315 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1313.x, x_1313.y, x_1315);
        let x_1322 : vec3<f32> = txVec19;
        let x_1324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1322.xy, x_1322.z);
        u_xlat67 = x_1324;
        let x_1326 : f32 = u_xlat19.z;
        let x_1327 : f32 = u_xlat67;
        let x_1329 : f32 = u_xlat65;
        u_xlat65 = ((x_1326 * x_1327) + x_1329);
        let x_1332 : vec4<f32> = u_xlat16;
        let x_1333 : vec2<f32> = vec2<f32>(x_1332.z, x_1332.w);
        let x_1335 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1333.x, x_1333.y, x_1335);
        let x_1342 : vec3<f32> = txVec20;
        let x_1344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1342.xy, x_1342.z);
        u_xlat67 = x_1344;
        let x_1346 : f32 = u_xlat19.w;
        let x_1347 : f32 = u_xlat67;
        let x_1349 : f32 = u_xlat65;
        u_xlat65 = ((x_1346 * x_1347) + x_1349);
        let x_1352 : vec4<f32> = u_xlat17;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.x, x_1352.y);
        let x_1355 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec21;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat67 = x_1364;
        let x_1366 : f32 = u_xlat20.x;
        let x_1367 : f32 = u_xlat67;
        let x_1369 : f32 = u_xlat65;
        u_xlat65 = ((x_1366 * x_1367) + x_1369);
        let x_1372 : vec4<f32> = u_xlat17;
        let x_1373 : vec2<f32> = vec2<f32>(x_1372.z, x_1372.w);
        let x_1375 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1373.x, x_1373.y, x_1375);
        let x_1382 : vec3<f32> = txVec22;
        let x_1384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1382.xy, x_1382.z);
        u_xlat67 = x_1384;
        let x_1386 : f32 = u_xlat20.y;
        let x_1387 : f32 = u_xlat67;
        let x_1389 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1387) + x_1389);
        let x_1392 : vec2<f32> = u_xlat30;
        let x_1394 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1392.x, x_1392.y, x_1394);
        let x_1401 : vec3<f32> = txVec23;
        let x_1403 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1401.xy, x_1401.z);
        u_xlat67 = x_1403;
        let x_1405 : f32 = u_xlat20.z;
        let x_1406 : f32 = u_xlat67;
        let x_1408 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1406) + x_1408);
        let x_1411 : vec2<f32> = u_xlat57;
        let x_1413 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec24;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat67 = x_1422;
        let x_1424 : f32 = u_xlat20.w;
        let x_1425 : f32 = u_xlat67;
        let x_1427 : f32 = u_xlat65;
        u_xlat65 = ((x_1424 * x_1425) + x_1427);
        let x_1430 : vec4<f32> = u_xlat12;
        let x_1431 : vec2<f32> = vec2<f32>(x_1430.x, x_1430.y);
        let x_1433 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1431.x, x_1431.y, x_1433);
        let x_1440 : vec3<f32> = txVec25;
        let x_1442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1440.xy, x_1440.z);
        u_xlat67 = x_1442;
        let x_1444 : f32 = u_xlat8.x;
        let x_1445 : f32 = u_xlat67;
        let x_1447 : f32 = u_xlat65;
        u_xlat65 = ((x_1444 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat12;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.z, x_1450.w);
        let x_1453 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec26;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat67 = x_1462;
        let x_1464 : f32 = u_xlat8.y;
        let x_1465 : f32 = u_xlat67;
        let x_1467 : f32 = u_xlat65;
        u_xlat65 = ((x_1464 * x_1465) + x_1467);
        let x_1470 : vec2<f32> = u_xlat52;
        let x_1472 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1470.x, x_1470.y, x_1472);
        let x_1479 : vec3<f32> = txVec27;
        let x_1481 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1479.xy, x_1479.z);
        u_xlat67 = x_1481;
        let x_1483 : f32 = u_xlat8.z;
        let x_1484 : f32 = u_xlat67;
        let x_1486 : f32 = u_xlat65;
        u_xlat65 = ((x_1483 * x_1484) + x_1486);
        let x_1489 : vec4<f32> = u_xlat7;
        let x_1490 : vec2<f32> = vec2<f32>(x_1489.x, x_1489.y);
        let x_1492 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1490.x, x_1490.y, x_1492);
        let x_1499 : vec3<f32> = txVec28;
        let x_1501 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1499.xy, x_1499.z);
        u_xlat67 = x_1501;
        let x_1503 : f32 = u_xlat8.w;
        let x_1504 : f32 = u_xlat67;
        let x_1506 : f32 = u_xlat65;
        u_xlat64 = ((x_1503 * x_1504) + x_1506);
      }
    }
  } else {
    let x_1510 : vec4<f32> = u_xlat6;
    let x_1511 : vec2<f32> = vec2<f32>(x_1510.x, x_1510.y);
    let x_1513 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
    let x_1520 : vec3<f32> = txVec29;
    let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
    u_xlat64 = x_1522;
  }
  let x_1524 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1524) + 1.0f);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1531 : f32 = u_xlat65;
  u_xlat64 = ((x_1527 * x_1529) + x_1531);
  let x_1535 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1535);
  let x_1539 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1539 >= 1.0f);
  let x_1541 : bool = u_xlatb67;
  let x_1542 : bool = u_xlatb6;
  u_xlatb67 = (x_1541 | x_1542);
  let x_1544 : bool = u_xlatb67;
  let x_1545 : f32 = u_xlat64;
  u_xlat64 = select(x_1545, 1.0f, x_1544);
  let x_1547 : vec3<f32> = u_xlat0;
  let x_1549 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1547, -(vec3<f32>(x_1549.x, x_1549.y, x_1549.z)));
  let x_1555 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1555, 0.0f, 1.0f);
  let x_1558 : f32 = u_xlat64;
  let x_1562 : vec4<f32> = x_90.x_MainLightColor;
  let x_1564 : vec3<f32> = (vec3<f32>(x_1558, x_1558, x_1558) * vec3<f32>(x_1562.x, x_1562.y, x_1562.z));
  let x_1565 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1564.x, x_1564.y, x_1564.z, x_1565.w);
  let x_1567 : vec3<f32> = u_xlat0;
  let x_1569 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1567.x, x_1567.x, x_1567.x) * vec3<f32>(x_1569.x, x_1569.y, x_1569.z));
  let x_1572 : vec3<f32> = u_xlat0;
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1572 * vec3<f32>(x_1573.x, x_1573.y, x_1573.z));
  let x_1577 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1577 < 0.0f);
  let x_1580 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1580 + 1.0f);
  let x_1583 : bool = u_xlatb64;
  if (x_1583) {
    let x_1588 : f32 = u_xlat3.x;
    x_1584 = x_1588;
  } else {
    let x_1591 : f32 = x_161.unity_LODFade.x;
    x_1584 = x_1591;
  }
  let x_1592 : f32 = x_1584;
  u_xlat64 = x_1592;
  let x_1594 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1594);
  let x_1596 : vec3<f32> = u_xlat1;
  let x_1600 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1596) * vec3<f32>(x_1600.x, x_1600.y, x_1600.x));
  let x_1606 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1606);
  let x_1610 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1610 * 1025u);
  let x_1614 : u32 = u_xlatu43;
  u_xlatu24 = (x_1614 >> 6u);
  let x_1618 : u32 = u_xlatu43;
  let x_1619 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1618 ^ x_1619));
  let x_1622 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1622) * 9u);
  let x_1626 : u32 = u_xlatu43;
  u_xlatu24 = (x_1626 >> 11u);
  let x_1629 : u32 = u_xlatu43;
  let x_1630 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1629 ^ x_1630));
  let x_1633 : i32 = u_xlati43;
  u_xlati43 = (x_1633 * 32769i);
  let x_1637 : i32 = u_xlati43;
  let x_1640 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1637) ^ x_1640));
  let x_1644 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1644) * 1025u);
  let x_1647 : u32 = u_xlatu22;
  u_xlatu43 = (x_1647 >> 6u);
  let x_1649 : u32 = u_xlatu43;
  let x_1650 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1649 ^ x_1650));
  let x_1653 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1653) * 9u);
  let x_1656 : u32 = u_xlatu22;
  u_xlatu43 = (x_1656 >> 11u);
  let x_1658 : u32 = u_xlatu43;
  let x_1659 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1658 ^ x_1659));
  let x_1662 : i32 = u_xlati22;
  u_xlati22 = (x_1662 * 32769i);
  let x_1665 : i32 = u_xlati22;
  let x_1668 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1665) ^ x_1668));
  let x_1671 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1671) * 1025u);
  let x_1676 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1676 >> 6u);
  let x_1678 : u32 = u_xlatu22;
  let x_1680 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1678 ^ x_1680));
  let x_1683 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1683) * 9u);
  let x_1688 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1688 >> 11u);
  let x_1690 : u32 = u_xlatu22;
  let x_1692 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1690 ^ x_1692));
  let x_1695 : i32 = u_xlati1;
  u_xlati1 = (x_1695 * 32769i);
  param = 1065353216i;
  let x_1701 : i32 = u_xlati1;
  param_1 = x_1701;
  param_2 = 0i;
  param_3 = 23i;
  let x_1704 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1704);
  let x_1708 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1708 + -1.0f);
  let x_1713 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1713) + 1.0f);
  let x_1716 : bool = u_xlatb3;
  if (x_1716) {
    let x_1721 : f32 = u_xlat1.x;
    x_1717 = x_1721;
  } else {
    let x_1723 : f32 = u_xlat22;
    x_1717 = x_1723;
  }
  let x_1724 : f32 = x_1717;
  u_xlat1.x = x_1724;
  let x_1726 : f32 = u_xlat64;
  let x_1729 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1726 * 2.0f) + -(x_1729));
  let x_1734 : f32 = u_xlat1.x;
  let x_1736 : f32 = u_xlat3.w;
  u_xlat22 = (x_1734 * x_1736);
  let x_1741 : f32 = u_xlat22;
  u_xlatb43.x = (x_1741 >= 0.400000006f);
  let x_1747 : bool = u_xlatb43.x;
  let x_1748 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1748, x_1747);
  let x_1752 : f32 = u_xlat3.w;
  let x_1754 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1752 * x_1754) + -0.400000006f);
  let x_1759 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1761);
  let x_1763 : f32 = u_xlat22;
  let x_1765 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1763) + abs(x_1765));
  let x_1768 : f32 = u_xlat22;
  u_xlat22 = max(x_1768, 0.0001f);
  let x_1772 : f32 = u_xlat1.x;
  let x_1773 : f32 = u_xlat22;
  u_xlat1.x = (x_1772 / x_1773);
  let x_1777 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1777 + 0.5f);
  let x_1781 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1781, 0.0f, 1.0f);
  let x_1786 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1786 == 0.0f));
  let x_1788 : bool = u_xlatb22;
  if (x_1788) {
    let x_1793 : f32 = u_xlat1.x;
    x_1789 = x_1793;
  } else {
    let x_1796 : f32 = u_xlat43.x;
    x_1789 = x_1796;
  }
  let x_1797 : f32 = x_1789;
  u_xlat1.x = x_1797;
  let x_1800 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1800 + -0.0001f);
  let x_1805 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1805 < 0.0f);
  let x_1809 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1809) * -1i) != 0i)) {
    discard;
  }
  let x_1819 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1819);
  let x_1823 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1823 >= 0.0f);
  let x_1827 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1827);
  let x_1831 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1831);
  let x_1835 : f32 = u_xlat43.y;
  let x_1837 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1835 * x_1837);
  let x_1840 : vec3<f32> = vs_INTERP1;
  let x_1842 : vec4<f32> = vs_INTERP2;
  let x_1844 : vec3<f32> = (vec3<f32>(x_1840.z, x_1840.x, x_1840.y) * vec3<f32>(x_1842.y, x_1842.z, x_1842.x));
  let x_1845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1844.x, x_1844.y, x_1844.z, x_1845.w);
  let x_1847 : vec3<f32> = vs_INTERP1;
  let x_1849 : vec4<f32> = vs_INTERP2;
  let x_1852 : vec4<f32> = u_xlat3;
  let x_1855 : vec3<f32> = ((vec3<f32>(x_1847.y, x_1847.z, x_1847.x) * vec3<f32>(x_1849.z, x_1849.x, x_1849.y)) + -(vec3<f32>(x_1852.x, x_1852.y, x_1852.z)));
  let x_1856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1855.x, x_1855.y, x_1855.z, x_1856.w);
  let x_1858 : vec2<f32> = u_xlat43;
  let x_1860 : vec4<f32> = u_xlat3;
  let x_1862 : vec3<f32> = (vec3<f32>(x_1858.x, x_1858.x, x_1858.x) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z));
  let x_1863 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1862.x, x_1862.y, x_1862.z, x_1863.w);
  let x_1865 : vec4<f32> = u_xlat3;
  let x_1867 : vec3<f32> = u_xlat26;
  let x_1869 : vec3<f32> = (vec3<f32>(x_1865.x, x_1865.y, x_1865.z) * vec3<f32>(x_1867.y, x_1867.y, x_1867.y));
  let x_1870 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1869.x, x_1869.y, x_1869.z, x_1870.w);
  let x_1872 : vec3<f32> = u_xlat26;
  let x_1874 : vec4<f32> = vs_INTERP2;
  let x_1877 : vec4<f32> = u_xlat3;
  let x_1879 : vec3<f32> = ((vec3<f32>(x_1872.x, x_1872.x, x_1872.x) * vec3<f32>(x_1874.x, x_1874.y, x_1874.z)) + vec3<f32>(x_1877.x, x_1877.y, x_1877.z));
  let x_1880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1879.x, x_1879.y, x_1879.z, x_1880.w);
  let x_1882 : vec3<f32> = u_xlat26;
  let x_1884 : vec3<f32> = vs_INTERP1;
  let x_1886 : vec4<f32> = u_xlat3;
  let x_1888 : vec3<f32> = ((vec3<f32>(x_1882.z, x_1882.z, x_1882.z) * x_1884) + vec3<f32>(x_1886.x, x_1886.y, x_1886.z));
  let x_1889 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
  let x_1891 : vec4<f32> = u_xlat3;
  let x_1893 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1891.x, x_1891.y, x_1891.z), vec3<f32>(x_1893.x, x_1893.y, x_1893.z));
  let x_1898 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1898);
  let x_1901 : vec2<f32> = u_xlat43;
  let x_1903 : vec4<f32> = u_xlat3;
  let x_1905 : vec3<f32> = (vec3<f32>(x_1901.x, x_1901.x, x_1901.x) * vec3<f32>(x_1903.x, x_1903.y, x_1903.z));
  let x_1906 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1905.x, x_1905.y, x_1905.z, x_1906.w);
  u_xlat3.w = 1.0f;
  let x_1911 : vec4<f32> = x_161.unity_SHAr;
  let x_1912 : vec4<f32> = u_xlat3;
  u_xlat6.x = dot(x_1911, x_1912);
  let x_1917 : vec4<f32> = x_161.unity_SHAg;
  let x_1918 : vec4<f32> = u_xlat3;
  u_xlat6.y = dot(x_1917, x_1918);
  let x_1923 : vec4<f32> = x_161.unity_SHAb;
  let x_1924 : vec4<f32> = u_xlat3;
  u_xlat6.z = dot(x_1923, x_1924);
  let x_1927 : vec4<f32> = u_xlat3;
  let x_1929 : vec4<f32> = u_xlat3;
  u_xlat7 = (vec4<f32>(x_1927.y, x_1927.z, x_1927.z, x_1927.x) * vec4<f32>(x_1929.x, x_1929.y, x_1929.z, x_1929.z));
  let x_1934 : vec4<f32> = x_161.unity_SHBr;
  let x_1935 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(x_1934, x_1935);
  let x_1940 : vec4<f32> = x_161.unity_SHBg;
  let x_1941 : vec4<f32> = u_xlat7;
  u_xlat8.y = dot(x_1940, x_1941);
  let x_1945 : vec4<f32> = x_161.unity_SHBb;
  let x_1946 : vec4<f32> = u_xlat7;
  u_xlat8.z = dot(x_1945, x_1946);
  let x_1950 : f32 = u_xlat3.y;
  let x_1952 : f32 = u_xlat3.y;
  u_xlat43.x = (x_1950 * x_1952);
  let x_1956 : f32 = u_xlat3.x;
  let x_1958 : f32 = u_xlat3.x;
  let x_1961 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_1956 * x_1958) + -(x_1961));
  let x_1967 : vec4<f32> = x_161.unity_SHC;
  let x_1969 : vec2<f32> = u_xlat43;
  let x_1972 : vec4<f32> = u_xlat8;
  u_xlat26 = ((vec3<f32>(x_1967.x, x_1967.y, x_1967.z) * vec3<f32>(x_1969.x, x_1969.x, x_1969.x)) + vec3<f32>(x_1972.x, x_1972.y, x_1972.z));
  let x_1975 : vec3<f32> = u_xlat26;
  let x_1976 : vec4<f32> = u_xlat6;
  u_xlat26 = (x_1975 + vec3<f32>(x_1976.x, x_1976.y, x_1976.z));
  let x_1979 : vec3<f32> = u_xlat26;
  u_xlat26 = max(x_1979, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1983 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1984 : vec2<f32> = vec2<f32>(x_1983.x, x_1983.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1984.x, x_1984.y));
  let x_1989 : vec2<f32> = u_xlat43;
  let x_1990 : vec4<f32> = hlslcc_FragCoord;
  let x_1992 : vec2<f32> = (x_1989 * vec2<f32>(x_1990.x, x_1990.y));
  let x_1993 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1992.x, x_1992.y, x_1993.z, x_1993.w);
  let x_1996 : f32 = u_xlat6.y;
  let x_1999 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2002 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1996 * x_1999) + x_2002);
  let x_2006 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_2006) + 1.0f);
  let x_2011 : f32 = u_xlat5.x;
  u_xlat5.x = x_2011;
  let x_2014 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2014, 0.0f, 1.0f);
  let x_2018 : f32 = u_xlat1.x;
  u_xlat1.x = x_2018;
  let x_2021 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2021, 0.0f, 1.0f);
  let x_2024 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2024 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2029 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_2029) + 1.0f);
  let x_2034 : f32 = u_xlat43.x;
  let x_2036 : f32 = u_xlat43.x;
  u_xlat64 = (x_2034 * x_2036);
  let x_2038 : f32 = u_xlat64;
  u_xlat64 = max(x_2038, 0.0078125f);
  let x_2042 : f32 = u_xlat64;
  let x_2043 : f32 = u_xlat64;
  u_xlat66 = (x_2042 * x_2043);
  let x_2046 : f32 = u_xlat5.x;
  u_xlat67 = (x_2046 + 0.040000021f);
  let x_2049 : f32 = u_xlat67;
  u_xlat67 = min(x_2049, 1.0f);
  let x_2051 : f32 = u_xlat64;
  u_xlat5.x = ((x_2051 * 4.0f) + 2.0f);
  let x_2061 : vec4<f32> = u_xlat6;
  let x_2064 : f32 = x_90.x_GlobalMipBias.x;
  let x_2065 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2061.x, x_2061.z), x_2064);
  u_xlat6.x = x_2065.x;
  let x_2070 : f32 = u_xlat6.x;
  u_xlat27 = (x_2070 + -1.0f);
  let x_2074 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2075 : f32 = u_xlat27;
  u_xlat27 = ((x_2074 * x_2075) + 1.0f);
  let x_2079 : f32 = u_xlat6.x;
  let x_2081 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2079, x_2081);
  let x_2084 : bool = u_xlatb63;
  if (x_2084) {
    let x_2088 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2088 == 1.0f);
    let x_2090 : bool = u_xlatb63;
    if (x_2090) {
      let x_2094 : vec4<f32> = vs_INTERP9;
      let x_2097 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2094.x, x_2094.y, x_2094.x, x_2094.y) + x_2097);
      let x_2100 : vec4<f32> = u_xlat7;
      let x_2101 : vec2<f32> = vec2<f32>(x_2100.x, x_2100.y);
      let x_2103 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2101.x, x_2101.y, x_2103);
      let x_2110 : vec3<f32> = txVec30;
      let x_2112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2110.xy, x_2110.z);
      u_xlat8.x = x_2112;
      let x_2115 : vec4<f32> = u_xlat7;
      let x_2116 : vec2<f32> = vec2<f32>(x_2115.z, x_2115.w);
      let x_2118 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2116.x, x_2116.y, x_2118);
      let x_2125 : vec3<f32> = txVec31;
      let x_2127 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2125.xy, x_2125.z);
      u_xlat8.y = x_2127;
      let x_2129 : vec4<f32> = vs_INTERP9;
      let x_2132 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2129.x, x_2129.y, x_2129.x, x_2129.y) + x_2132);
      let x_2135 : vec4<f32> = u_xlat7;
      let x_2136 : vec2<f32> = vec2<f32>(x_2135.x, x_2135.y);
      let x_2138 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2136.x, x_2136.y, x_2138);
      let x_2145 : vec3<f32> = txVec32;
      let x_2147 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2145.xy, x_2145.z);
      u_xlat8.z = x_2147;
      let x_2150 : vec4<f32> = u_xlat7;
      let x_2151 : vec2<f32> = vec2<f32>(x_2150.z, x_2150.w);
      let x_2153 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2151.x, x_2151.y, x_2153);
      let x_2160 : vec3<f32> = txVec33;
      let x_2162 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2160.xy, x_2160.z);
      u_xlat8.w = x_2162;
      let x_2164 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2164, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2169 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_2169 == 2.0f);
      let x_2173 : bool = u_xlatb48.x;
      if (x_2173) {
        let x_2177 : vec4<f32> = vs_INTERP9;
        let x_2180 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2177.x, x_2177.y) * vec2<f32>(x_2180.z, x_2180.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2184 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2184);
        let x_2186 : vec4<f32> = vs_INTERP9;
        let x_2189 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2192 : vec2<f32> = u_xlat48;
        let x_2194 : vec2<f32> = ((vec2<f32>(x_2186.x, x_2186.y) * vec2<f32>(x_2189.z, x_2189.w)) + -(x_2192));
        let x_2195 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2194.x, x_2194.y, x_2195.z, x_2195.w);
        let x_2197 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2197.x, x_2197.x, x_2197.y, x_2197.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2200 : vec4<f32> = u_xlat8;
        let x_2202 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2200.x, x_2200.x, x_2200.z, x_2200.z) * vec4<f32>(x_2202.x, x_2202.x, x_2202.z, x_2202.z));
        let x_2205 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2205.y, x_2205.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2208 : vec4<f32> = u_xlat9;
        let x_2211 : vec4<f32> = u_xlat7;
        let x_2214 : vec2<f32> = ((vec2<f32>(x_2208.x, x_2208.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2211.x, x_2211.y)));
        let x_2215 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2214.x, x_2215.y, x_2214.y, x_2215.w);
        let x_2217 : vec4<f32> = u_xlat7;
        let x_2220 : vec2<f32> = (-(vec2<f32>(x_2217.x, x_2217.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2221 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2220.x, x_2220.y, x_2221.z, x_2221.w);
        let x_2223 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2223.x, x_2223.y), vec2<f32>(0.0f, 0.0f));
        let x_2226 : vec2<f32> = u_xlat51;
        let x_2228 : vec2<f32> = u_xlat51;
        let x_2230 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2226) * x_2228) + vec2<f32>(x_2230.x, x_2230.y));
        let x_2233 : vec4<f32> = u_xlat7;
        let x_2235 : vec2<f32> = max(vec2<f32>(x_2233.x, x_2233.y), vec2<f32>(0.0f, 0.0f));
        let x_2236 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2235.x, x_2235.y, x_2236.z, x_2236.w);
        let x_2238 : vec4<f32> = u_xlat7;
        let x_2241 : vec4<f32> = u_xlat7;
        let x_2244 : vec4<f32> = u_xlat8;
        let x_2246 : vec2<f32> = ((-(vec2<f32>(x_2238.x, x_2238.y)) * vec2<f32>(x_2241.x, x_2241.y)) + vec2<f32>(x_2244.y, x_2244.w));
        let x_2247 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2246.x, x_2246.y, x_2247.z, x_2247.w);
        let x_2249 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2249 + vec2<f32>(1.0f, 1.0f));
        let x_2251 : vec4<f32> = u_xlat7;
        let x_2253 : vec2<f32> = (vec2<f32>(x_2251.x, x_2251.y) + vec2<f32>(1.0f, 1.0f));
        let x_2254 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2253.x, x_2253.y, x_2254.z, x_2254.w);
        let x_2256 : vec4<f32> = u_xlat8;
        let x_2258 : vec2<f32> = (vec2<f32>(x_2256.x, x_2256.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2259 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2258.x, x_2258.y, x_2259.z, x_2259.w);
        let x_2261 : vec4<f32> = u_xlat9;
        let x_2263 : vec2<f32> = (vec2<f32>(x_2261.x, x_2261.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2264 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2263.x, x_2263.y, x_2264.z, x_2264.w);
        let x_2266 : vec2<f32> = u_xlat51;
        let x_2267 : vec2<f32> = (x_2266 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2268 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2267.x, x_2267.y, x_2268.z, x_2268.w);
        let x_2270 : vec4<f32> = u_xlat7;
        let x_2272 : vec2<f32> = (vec2<f32>(x_2270.x, x_2270.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2273 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2272.x, x_2272.y, x_2273.z, x_2273.w);
        let x_2275 : vec4<f32> = u_xlat8;
        let x_2277 : vec2<f32> = (vec2<f32>(x_2275.y, x_2275.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2278 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2277.x, x_2277.y, x_2278.z, x_2278.w);
        let x_2281 : f32 = u_xlat9.x;
        u_xlat10.z = x_2281;
        let x_2284 : f32 = u_xlat7.x;
        u_xlat10.w = x_2284;
        let x_2287 : f32 = u_xlat12.x;
        u_xlat11.z = x_2287;
        let x_2290 : f32 = u_xlat49.x;
        u_xlat11.w = x_2290;
        let x_2292 : vec4<f32> = u_xlat10;
        let x_2294 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2292.z, x_2292.w, x_2292.x, x_2292.z) + vec4<f32>(x_2294.z, x_2294.w, x_2294.x, x_2294.z));
        let x_2298 : f32 = u_xlat10.y;
        u_xlat9.z = x_2298;
        let x_2301 : f32 = u_xlat7.y;
        u_xlat9.w = x_2301;
        let x_2304 : f32 = u_xlat11.y;
        u_xlat12.z = x_2304;
        let x_2307 : f32 = u_xlat49.y;
        u_xlat12.w = x_2307;
        let x_2309 : vec4<f32> = u_xlat9;
        let x_2311 : vec4<f32> = u_xlat12;
        let x_2313 : vec3<f32> = (vec3<f32>(x_2309.z, x_2309.y, x_2309.w) + vec3<f32>(x_2311.z, x_2311.y, x_2311.w));
        let x_2314 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2313.x, x_2313.y, x_2313.z, x_2314.w);
        let x_2316 : vec4<f32> = u_xlat11;
        let x_2318 : vec4<f32> = u_xlat8;
        let x_2320 : vec3<f32> = (vec3<f32>(x_2316.x, x_2316.z, x_2316.w) / vec3<f32>(x_2318.z, x_2318.w, x_2318.y));
        let x_2321 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2320.x, x_2320.y, x_2320.z, x_2321.w);
        let x_2323 : vec4<f32> = u_xlat9;
        let x_2325 : vec3<f32> = (vec3<f32>(x_2323.x, x_2323.y, x_2323.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2326 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2325.x, x_2325.y, x_2325.z, x_2326.w);
        let x_2328 : vec4<f32> = u_xlat12;
        let x_2330 : vec4<f32> = u_xlat7;
        let x_2332 : vec3<f32> = (vec3<f32>(x_2328.z, x_2328.y, x_2328.w) / vec3<f32>(x_2330.x, x_2330.y, x_2330.z));
        let x_2333 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2332.x, x_2332.y, x_2332.z, x_2333.w);
        let x_2335 : vec4<f32> = u_xlat10;
        let x_2337 : vec3<f32> = (vec3<f32>(x_2335.x, x_2335.y, x_2335.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2338 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2337.x, x_2337.y, x_2337.z, x_2338.w);
        let x_2340 : vec4<f32> = u_xlat9;
        let x_2343 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2345 : vec3<f32> = (vec3<f32>(x_2340.y, x_2340.x, x_2340.z) * vec3<f32>(x_2343.x, x_2343.x, x_2343.x));
        let x_2346 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2345.x, x_2345.y, x_2345.z, x_2346.w);
        let x_2348 : vec4<f32> = u_xlat10;
        let x_2351 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2353 : vec3<f32> = (vec3<f32>(x_2348.x, x_2348.y, x_2348.z) * vec3<f32>(x_2351.y, x_2351.y, x_2351.y));
        let x_2354 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2353.x, x_2353.y, x_2353.z, x_2354.w);
        let x_2357 : f32 = u_xlat10.x;
        u_xlat9.w = x_2357;
        let x_2359 : vec2<f32> = u_xlat48;
        let x_2362 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2365 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2359.x, x_2359.y, x_2359.x, x_2359.y) * vec4<f32>(x_2362.x, x_2362.y, x_2362.x, x_2362.y)) + vec4<f32>(x_2365.y, x_2365.w, x_2365.x, x_2365.w));
        let x_2368 : vec2<f32> = u_xlat48;
        let x_2370 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2373 : vec4<f32> = u_xlat9;
        let x_2375 : vec2<f32> = ((x_2368 * vec2<f32>(x_2370.x, x_2370.y)) + vec2<f32>(x_2373.z, x_2373.w));
        let x_2376 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2375.x, x_2375.y, x_2376.z, x_2376.w);
        let x_2379 : f32 = u_xlat9.y;
        u_xlat10.w = x_2379;
        let x_2381 : vec4<f32> = u_xlat10;
        let x_2382 : vec2<f32> = vec2<f32>(x_2381.y, x_2381.z);
        let x_2383 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2383.x, x_2382.x, x_2383.z, x_2382.y);
        let x_2385 : vec2<f32> = u_xlat48;
        let x_2388 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2391 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2385.x, x_2385.y, x_2385.x, x_2385.y) * vec4<f32>(x_2388.x, x_2388.y, x_2388.x, x_2388.y)) + vec4<f32>(x_2391.x, x_2391.y, x_2391.z, x_2391.y));
        let x_2394 : vec2<f32> = u_xlat48;
        let x_2397 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2400 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2394.x, x_2394.y, x_2394.x, x_2394.y) * vec4<f32>(x_2397.x, x_2397.y, x_2397.x, x_2397.y)) + vec4<f32>(x_2400.w, x_2400.y, x_2400.w, x_2400.z));
        let x_2403 : vec2<f32> = u_xlat48;
        let x_2406 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2409 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2403.x, x_2403.y, x_2403.x, x_2403.y) * vec4<f32>(x_2406.x, x_2406.y, x_2406.x, x_2406.y)) + vec4<f32>(x_2409.x, x_2409.w, x_2409.z, x_2409.w));
        let x_2412 : vec4<f32> = u_xlat7;
        let x_2414 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2412.x, x_2412.x, x_2412.x, x_2412.y) * vec4<f32>(x_2414.z, x_2414.w, x_2414.y, x_2414.z));
        let x_2417 : vec4<f32> = u_xlat7;
        let x_2419 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2417.y, x_2417.y, x_2417.z, x_2417.z) * x_2419);
        let x_2422 : f32 = u_xlat7.z;
        let x_2424 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2422 * x_2424);
        let x_2428 : vec4<f32> = u_xlat11;
        let x_2429 : vec2<f32> = vec2<f32>(x_2428.x, x_2428.y);
        let x_2431 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2429.x, x_2429.y, x_2431);
        let x_2438 : vec3<f32> = txVec34;
        let x_2440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2438.xy, x_2438.z);
        u_xlat69 = x_2440;
        let x_2442 : vec4<f32> = u_xlat11;
        let x_2443 : vec2<f32> = vec2<f32>(x_2442.z, x_2442.w);
        let x_2445 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2443.x, x_2443.y, x_2445);
        let x_2452 : vec3<f32> = txVec35;
        let x_2454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2452.xy, x_2452.z);
        u_xlat7.x = x_2454;
        let x_2457 : f32 = u_xlat7.x;
        let x_2459 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2457 * x_2459);
        let x_2463 : f32 = u_xlat14.x;
        let x_2464 : f32 = u_xlat69;
        let x_2467 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2463 * x_2464) + x_2467);
        let x_2470 : vec4<f32> = u_xlat12;
        let x_2471 : vec2<f32> = vec2<f32>(x_2470.x, x_2470.y);
        let x_2473 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2471.x, x_2471.y, x_2473);
        let x_2480 : vec3<f32> = txVec36;
        let x_2482 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2480.xy, x_2480.z);
        u_xlat7.x = x_2482;
        let x_2485 : f32 = u_xlat14.z;
        let x_2487 : f32 = u_xlat7.x;
        let x_2489 : f32 = u_xlat69;
        u_xlat69 = ((x_2485 * x_2487) + x_2489);
        let x_2492 : vec4<f32> = u_xlat10;
        let x_2493 : vec2<f32> = vec2<f32>(x_2492.x, x_2492.y);
        let x_2495 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2493.x, x_2493.y, x_2495);
        let x_2502 : vec3<f32> = txVec37;
        let x_2504 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2502.xy, x_2502.z);
        u_xlat7.x = x_2504;
        let x_2507 : f32 = u_xlat14.w;
        let x_2509 : f32 = u_xlat7.x;
        let x_2511 : f32 = u_xlat69;
        u_xlat69 = ((x_2507 * x_2509) + x_2511);
        let x_2514 : vec4<f32> = u_xlat13;
        let x_2515 : vec2<f32> = vec2<f32>(x_2514.x, x_2514.y);
        let x_2517 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2515.x, x_2515.y, x_2517);
        let x_2524 : vec3<f32> = txVec38;
        let x_2526 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2524.xy, x_2524.z);
        u_xlat7.x = x_2526;
        let x_2529 : f32 = u_xlat15.x;
        let x_2531 : f32 = u_xlat7.x;
        let x_2533 : f32 = u_xlat69;
        u_xlat69 = ((x_2529 * x_2531) + x_2533);
        let x_2536 : vec4<f32> = u_xlat13;
        let x_2537 : vec2<f32> = vec2<f32>(x_2536.z, x_2536.w);
        let x_2539 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2537.x, x_2537.y, x_2539);
        let x_2546 : vec3<f32> = txVec39;
        let x_2548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2546.xy, x_2546.z);
        u_xlat7.x = x_2548;
        let x_2551 : f32 = u_xlat15.y;
        let x_2553 : f32 = u_xlat7.x;
        let x_2555 : f32 = u_xlat69;
        u_xlat69 = ((x_2551 * x_2553) + x_2555);
        let x_2558 : vec4<f32> = u_xlat10;
        let x_2559 : vec2<f32> = vec2<f32>(x_2558.z, x_2558.w);
        let x_2561 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2559.x, x_2559.y, x_2561);
        let x_2568 : vec3<f32> = txVec40;
        let x_2570 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2568.xy, x_2568.z);
        u_xlat7.x = x_2570;
        let x_2573 : f32 = u_xlat15.z;
        let x_2575 : f32 = u_xlat7.x;
        let x_2577 : f32 = u_xlat69;
        u_xlat69 = ((x_2573 * x_2575) + x_2577);
        let x_2580 : vec4<f32> = u_xlat9;
        let x_2581 : vec2<f32> = vec2<f32>(x_2580.x, x_2580.y);
        let x_2583 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2581.x, x_2581.y, x_2583);
        let x_2590 : vec3<f32> = txVec41;
        let x_2592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2590.xy, x_2590.z);
        u_xlat7.x = x_2592;
        let x_2595 : f32 = u_xlat15.w;
        let x_2597 : f32 = u_xlat7.x;
        let x_2599 : f32 = u_xlat69;
        u_xlat69 = ((x_2595 * x_2597) + x_2599);
        let x_2602 : vec4<f32> = u_xlat9;
        let x_2603 : vec2<f32> = vec2<f32>(x_2602.z, x_2602.w);
        let x_2605 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2603.x, x_2603.y, x_2605);
        let x_2612 : vec3<f32> = txVec42;
        let x_2614 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2612.xy, x_2612.z);
        u_xlat7.x = x_2614;
        let x_2617 : f32 = u_xlat48.x;
        let x_2619 : f32 = u_xlat7.x;
        let x_2621 : f32 = u_xlat69;
        u_xlat63 = ((x_2617 * x_2619) + x_2621);
      } else {
        let x_2624 : vec4<f32> = vs_INTERP9;
        let x_2627 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2624.x, x_2624.y) * vec2<f32>(x_2627.z, x_2627.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2631 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2631);
        let x_2633 : vec4<f32> = vs_INTERP9;
        let x_2636 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2639 : vec2<f32> = u_xlat48;
        let x_2641 : vec2<f32> = ((vec2<f32>(x_2633.x, x_2633.y) * vec2<f32>(x_2636.z, x_2636.w)) + -(x_2639));
        let x_2642 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2641.x, x_2641.y, x_2642.z, x_2642.w);
        let x_2644 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2644.x, x_2644.x, x_2644.y, x_2644.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2647 : vec4<f32> = u_xlat8;
        let x_2649 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2647.x, x_2647.x, x_2647.z, x_2647.z) * vec4<f32>(x_2649.x, x_2649.x, x_2649.z, x_2649.z));
        let x_2652 : vec4<f32> = u_xlat9;
        let x_2654 : vec2<f32> = (vec2<f32>(x_2652.y, x_2652.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2655 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2655.x, x_2654.x, x_2655.z, x_2654.y);
        let x_2657 : vec4<f32> = u_xlat9;
        let x_2660 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2657.x, x_2657.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2660.x, x_2660.y)));
        let x_2664 : vec4<f32> = u_xlat7;
        let x_2667 : vec2<f32> = (-(vec2<f32>(x_2664.x, x_2664.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2668 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2667.x, x_2668.y, x_2667.y, x_2668.w);
        let x_2670 : vec4<f32> = u_xlat7;
        let x_2672 : vec2<f32> = min(vec2<f32>(x_2670.x, x_2670.y), vec2<f32>(0.0f, 0.0f));
        let x_2673 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2672.x, x_2672.y, x_2673.z, x_2673.w);
        let x_2675 : vec4<f32> = u_xlat9;
        let x_2678 : vec4<f32> = u_xlat9;
        let x_2681 : vec4<f32> = u_xlat8;
        let x_2683 : vec2<f32> = ((-(vec2<f32>(x_2675.x, x_2675.y)) * vec2<f32>(x_2678.x, x_2678.y)) + vec2<f32>(x_2681.x, x_2681.z));
        let x_2684 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2683.x, x_2684.y, x_2683.y, x_2684.w);
        let x_2686 : vec4<f32> = u_xlat7;
        let x_2688 : vec2<f32> = max(vec2<f32>(x_2686.x, x_2686.y), vec2<f32>(0.0f, 0.0f));
        let x_2689 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2688.x, x_2688.y, x_2689.z, x_2689.w);
        let x_2691 : vec4<f32> = u_xlat9;
        let x_2694 : vec4<f32> = u_xlat9;
        let x_2697 : vec4<f32> = u_xlat8;
        let x_2699 : vec2<f32> = ((-(vec2<f32>(x_2691.x, x_2691.y)) * vec2<f32>(x_2694.x, x_2694.y)) + vec2<f32>(x_2697.y, x_2697.w));
        let x_2700 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2700.x, x_2699.x, x_2700.z, x_2699.y);
        let x_2702 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2702 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2705 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2705 * 0.081632003f);
        let x_2708 : vec2<f32> = u_xlat49;
        let x_2710 : vec2<f32> = (vec2<f32>(x_2708.y, x_2708.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2711 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2710.x, x_2710.y, x_2711.z, x_2711.w);
        let x_2713 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2713.x, x_2713.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2717 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2717 * 0.081632003f);
        let x_2721 : f32 = u_xlat11.y;
        u_xlat9.x = x_2721;
        let x_2723 : vec4<f32> = u_xlat7;
        let x_2726 : vec2<f32> = ((vec2<f32>(x_2723.x, x_2723.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2727.x, x_2726.x, x_2727.z, x_2726.y);
        let x_2729 : vec4<f32> = u_xlat7;
        let x_2732 : vec2<f32> = ((vec2<f32>(x_2729.x, x_2729.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2733 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2732.x, x_2733.y, x_2732.y, x_2733.w);
        let x_2736 : f32 = u_xlat49.x;
        u_xlat8.y = x_2736;
        let x_2739 : f32 = u_xlat10.y;
        u_xlat8.w = x_2739;
        let x_2741 : vec4<f32> = u_xlat8;
        let x_2742 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2741 + x_2742);
        let x_2744 : vec4<f32> = u_xlat7;
        let x_2747 : vec2<f32> = ((vec2<f32>(x_2744.y, x_2744.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2748 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2748.x, x_2747.x, x_2748.z, x_2747.y);
        let x_2750 : vec4<f32> = u_xlat7;
        let x_2753 : vec2<f32> = ((vec2<f32>(x_2750.y, x_2750.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2754 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2753.x, x_2754.y, x_2753.y, x_2754.w);
        let x_2757 : f32 = u_xlat49.y;
        u_xlat10.y = x_2757;
        let x_2759 : vec4<f32> = u_xlat10;
        let x_2760 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2759 + x_2760);
        let x_2762 : vec4<f32> = u_xlat8;
        let x_2763 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2762 / x_2763);
        let x_2765 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2765 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2767 : vec4<f32> = u_xlat10;
        let x_2768 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2767 / x_2768);
        let x_2770 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2770 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2772 : vec4<f32> = u_xlat8;
        let x_2775 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2772.w, x_2772.x, x_2772.y, x_2772.z) * vec4<f32>(x_2775.x, x_2775.x, x_2775.x, x_2775.x));
        let x_2778 : vec4<f32> = u_xlat10;
        let x_2781 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2778.x, x_2778.w, x_2778.y, x_2778.z) * vec4<f32>(x_2781.y, x_2781.y, x_2781.y, x_2781.y));
        let x_2784 : vec4<f32> = u_xlat8;
        let x_2785 : vec3<f32> = vec3<f32>(x_2784.y, x_2784.z, x_2784.w);
        let x_2786 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2785.x, x_2786.y, x_2785.y, x_2785.z);
        let x_2789 : f32 = u_xlat10.x;
        u_xlat11.y = x_2789;
        let x_2791 : vec2<f32> = u_xlat48;
        let x_2794 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2797 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2791.x, x_2791.y, x_2791.x, x_2791.y) * vec4<f32>(x_2794.x, x_2794.y, x_2794.x, x_2794.y)) + vec4<f32>(x_2797.x, x_2797.y, x_2797.z, x_2797.y));
        let x_2800 : vec2<f32> = u_xlat48;
        let x_2802 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2805 : vec4<f32> = u_xlat11;
        let x_2807 : vec2<f32> = ((x_2800 * vec2<f32>(x_2802.x, x_2802.y)) + vec2<f32>(x_2805.w, x_2805.y));
        let x_2808 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2807.x, x_2807.y, x_2808.z, x_2808.w);
        let x_2811 : f32 = u_xlat11.y;
        u_xlat8.y = x_2811;
        let x_2814 : f32 = u_xlat10.z;
        u_xlat11.y = x_2814;
        let x_2816 : vec2<f32> = u_xlat48;
        let x_2819 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2822 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2816.x, x_2816.y, x_2816.x, x_2816.y) * vec4<f32>(x_2819.x, x_2819.y, x_2819.x, x_2819.y)) + vec4<f32>(x_2822.x, x_2822.y, x_2822.z, x_2822.y));
        let x_2826 : vec2<f32> = u_xlat48;
        let x_2828 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2831 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2826 * vec2<f32>(x_2828.x, x_2828.y)) + vec2<f32>(x_2831.w, x_2831.y));
        let x_2835 : f32 = u_xlat11.y;
        u_xlat8.z = x_2835;
        let x_2837 : vec2<f32> = u_xlat48;
        let x_2840 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2843 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2837.x, x_2837.y, x_2837.x, x_2837.y) * vec4<f32>(x_2840.x, x_2840.y, x_2840.x, x_2840.y)) + vec4<f32>(x_2843.x, x_2843.y, x_2843.x, x_2843.z));
        let x_2847 : f32 = u_xlat10.w;
        u_xlat11.y = x_2847;
        let x_2849 : vec2<f32> = u_xlat48;
        let x_2852 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2855 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2849.x, x_2849.y, x_2849.x, x_2849.y) * vec4<f32>(x_2852.x, x_2852.y, x_2852.x, x_2852.y)) + vec4<f32>(x_2855.x, x_2855.y, x_2855.z, x_2855.y));
        let x_2858 : vec2<f32> = u_xlat48;
        let x_2860 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2863 : vec4<f32> = u_xlat11;
        let x_2865 : vec2<f32> = ((x_2858 * vec2<f32>(x_2860.x, x_2860.y)) + vec2<f32>(x_2863.w, x_2863.y));
        let x_2866 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2865.x, x_2865.y, x_2866.z);
        let x_2869 : f32 = u_xlat11.y;
        u_xlat8.w = x_2869;
        let x_2871 : vec2<f32> = u_xlat48;
        let x_2873 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2876 : vec4<f32> = u_xlat8;
        let x_2878 : vec2<f32> = ((x_2871 * vec2<f32>(x_2873.x, x_2873.y)) + vec2<f32>(x_2876.x, x_2876.w));
        let x_2879 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2878.x, x_2878.y, x_2879.z, x_2879.w);
        let x_2881 : vec4<f32> = u_xlat11;
        let x_2882 : vec3<f32> = vec3<f32>(x_2881.x, x_2881.z, x_2881.w);
        let x_2883 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2882.x, x_2883.y, x_2882.y, x_2882.z);
        let x_2885 : vec2<f32> = u_xlat48;
        let x_2888 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2891 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2885.x, x_2885.y, x_2885.x, x_2885.y) * vec4<f32>(x_2888.x, x_2888.y, x_2888.x, x_2888.y)) + vec4<f32>(x_2891.x, x_2891.y, x_2891.z, x_2891.y));
        let x_2894 : vec2<f32> = u_xlat48;
        let x_2896 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2899 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2894 * vec2<f32>(x_2896.x, x_2896.y)) + vec2<f32>(x_2899.w, x_2899.y));
        let x_2903 : f32 = u_xlat8.x;
        u_xlat10.x = x_2903;
        let x_2905 : vec2<f32> = u_xlat48;
        let x_2907 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2910 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2905 * vec2<f32>(x_2907.x, x_2907.y)) + vec2<f32>(x_2910.x, x_2910.y));
        let x_2913 : vec4<f32> = u_xlat7;
        let x_2915 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2913.x, x_2913.x, x_2913.x, x_2913.x) * x_2915);
        let x_2917 : vec4<f32> = u_xlat7;
        let x_2919 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2917.y, x_2917.y, x_2917.y, x_2917.y) * x_2919);
        let x_2921 : vec4<f32> = u_xlat7;
        let x_2923 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2921.z, x_2921.z, x_2921.z, x_2921.z) * x_2923);
        let x_2925 : vec4<f32> = u_xlat7;
        let x_2927 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2925.w, x_2925.w, x_2925.w, x_2925.w) * x_2927);
        let x_2930 : vec4<f32> = u_xlat12;
        let x_2931 : vec2<f32> = vec2<f32>(x_2930.x, x_2930.y);
        let x_2933 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2931.x, x_2931.y, x_2933);
        let x_2940 : vec3<f32> = txVec43;
        let x_2942 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2940.xy, x_2940.z);
        u_xlat8.x = x_2942;
        let x_2945 : vec4<f32> = u_xlat12;
        let x_2946 : vec2<f32> = vec2<f32>(x_2945.z, x_2945.w);
        let x_2948 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2946.x, x_2946.y, x_2948);
        let x_2956 : vec3<f32> = txVec44;
        let x_2958 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2956.xy, x_2956.z);
        u_xlat71 = x_2958;
        let x_2959 : f32 = u_xlat71;
        let x_2961 : f32 = u_xlat18.y;
        u_xlat71 = (x_2959 * x_2961);
        let x_2964 : f32 = u_xlat18.x;
        let x_2966 : f32 = u_xlat8.x;
        let x_2968 : f32 = u_xlat71;
        u_xlat8.x = ((x_2964 * x_2966) + x_2968);
        let x_2972 : vec4<f32> = u_xlat13;
        let x_2973 : vec2<f32> = vec2<f32>(x_2972.x, x_2972.y);
        let x_2975 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2973.x, x_2973.y, x_2975);
        let x_2982 : vec3<f32> = txVec45;
        let x_2984 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2982.xy, x_2982.z);
        u_xlat71 = x_2984;
        let x_2986 : f32 = u_xlat18.z;
        let x_2987 : f32 = u_xlat71;
        let x_2990 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2986 * x_2987) + x_2990);
        let x_2994 : vec4<f32> = u_xlat15;
        let x_2995 : vec2<f32> = vec2<f32>(x_2994.x, x_2994.y);
        let x_2997 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2995.x, x_2995.y, x_2997);
        let x_3004 : vec3<f32> = txVec46;
        let x_3006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3004.xy, x_3004.z);
        u_xlat71 = x_3006;
        let x_3008 : f32 = u_xlat18.w;
        let x_3009 : f32 = u_xlat71;
        let x_3012 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3008 * x_3009) + x_3012);
        let x_3016 : vec4<f32> = u_xlat14;
        let x_3017 : vec2<f32> = vec2<f32>(x_3016.x, x_3016.y);
        let x_3019 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3017.x, x_3017.y, x_3019);
        let x_3026 : vec3<f32> = txVec47;
        let x_3028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3026.xy, x_3026.z);
        u_xlat71 = x_3028;
        let x_3030 : f32 = u_xlat19.x;
        let x_3031 : f32 = u_xlat71;
        let x_3034 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3030 * x_3031) + x_3034);
        let x_3038 : vec4<f32> = u_xlat14;
        let x_3039 : vec2<f32> = vec2<f32>(x_3038.z, x_3038.w);
        let x_3041 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3039.x, x_3039.y, x_3041);
        let x_3048 : vec3<f32> = txVec48;
        let x_3050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3048.xy, x_3048.z);
        u_xlat71 = x_3050;
        let x_3052 : f32 = u_xlat19.y;
        let x_3053 : f32 = u_xlat71;
        let x_3056 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3052 * x_3053) + x_3056);
        let x_3060 : vec2<f32> = u_xlat55;
        let x_3062 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3060.x, x_3060.y, x_3062);
        let x_3069 : vec3<f32> = txVec49;
        let x_3071 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3069.xy, x_3069.z);
        u_xlat71 = x_3071;
        let x_3073 : f32 = u_xlat19.z;
        let x_3074 : f32 = u_xlat71;
        let x_3077 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3073 * x_3074) + x_3077);
        let x_3081 : vec4<f32> = u_xlat15;
        let x_3082 : vec2<f32> = vec2<f32>(x_3081.z, x_3081.w);
        let x_3084 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3082.x, x_3082.y, x_3084);
        let x_3091 : vec3<f32> = txVec50;
        let x_3093 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3091.xy, x_3091.z);
        u_xlat71 = x_3093;
        let x_3095 : f32 = u_xlat19.w;
        let x_3096 : f32 = u_xlat71;
        let x_3099 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3095 * x_3096) + x_3099);
        let x_3103 : vec4<f32> = u_xlat16;
        let x_3104 : vec2<f32> = vec2<f32>(x_3103.x, x_3103.y);
        let x_3106 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3104.x, x_3104.y, x_3106);
        let x_3113 : vec3<f32> = txVec51;
        let x_3115 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3113.xy, x_3113.z);
        u_xlat71 = x_3115;
        let x_3117 : f32 = u_xlat20.x;
        let x_3118 : f32 = u_xlat71;
        let x_3121 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3117 * x_3118) + x_3121);
        let x_3125 : vec4<f32> = u_xlat16;
        let x_3126 : vec2<f32> = vec2<f32>(x_3125.z, x_3125.w);
        let x_3128 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3126.x, x_3126.y, x_3128);
        let x_3135 : vec3<f32> = txVec52;
        let x_3137 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3135.xy, x_3135.z);
        u_xlat71 = x_3137;
        let x_3139 : f32 = u_xlat20.y;
        let x_3140 : f32 = u_xlat71;
        let x_3143 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3139 * x_3140) + x_3143);
        let x_3147 : vec3<f32> = u_xlat29;
        let x_3148 : vec2<f32> = vec2<f32>(x_3147.x, x_3147.y);
        let x_3150 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3148.x, x_3148.y, x_3150);
        let x_3157 : vec3<f32> = txVec53;
        let x_3159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3157.xy, x_3157.z);
        u_xlat29.x = x_3159;
        let x_3162 : f32 = u_xlat20.z;
        let x_3164 : f32 = u_xlat29.x;
        let x_3167 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3162 * x_3164) + x_3167);
        let x_3171 : vec4<f32> = u_xlat17;
        let x_3172 : vec2<f32> = vec2<f32>(x_3171.x, x_3171.y);
        let x_3174 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3172.x, x_3172.y, x_3174);
        let x_3181 : vec3<f32> = txVec54;
        let x_3183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3181.xy, x_3181.z);
        u_xlat29.x = x_3183;
        let x_3186 : f32 = u_xlat20.w;
        let x_3188 : f32 = u_xlat29.x;
        let x_3191 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3186 * x_3188) + x_3191);
        let x_3195 : vec4<f32> = u_xlat11;
        let x_3196 : vec2<f32> = vec2<f32>(x_3195.x, x_3195.y);
        let x_3198 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3196.x, x_3196.y, x_3198);
        let x_3205 : vec3<f32> = txVec55;
        let x_3207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3205.xy, x_3205.z);
        u_xlat29.x = x_3207;
        let x_3210 : f32 = u_xlat7.x;
        let x_3212 : f32 = u_xlat29.x;
        let x_3215 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3210 * x_3212) + x_3215);
        let x_3219 : vec4<f32> = u_xlat11;
        let x_3220 : vec2<f32> = vec2<f32>(x_3219.z, x_3219.w);
        let x_3222 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3220.x, x_3220.y, x_3222);
        let x_3229 : vec3<f32> = txVec56;
        let x_3231 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3229.xy, x_3229.z);
        u_xlat8.x = x_3231;
        let x_3234 : f32 = u_xlat7.y;
        let x_3236 : f32 = u_xlat8.x;
        let x_3239 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3234 * x_3236) + x_3239);
        let x_3243 : vec2<f32> = u_xlat52;
        let x_3245 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3243.x, x_3243.y, x_3245);
        let x_3253 : vec3<f32> = txVec57;
        let x_3255 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3253.xy, x_3253.z);
        u_xlat28 = x_3255;
        let x_3257 : f32 = u_xlat7.z;
        let x_3258 : f32 = u_xlat28;
        let x_3261 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3257 * x_3258) + x_3261);
        let x_3265 : vec2<f32> = u_xlat48;
        let x_3267 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3265.x, x_3265.y, x_3267);
        let x_3274 : vec3<f32> = txVec58;
        let x_3276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3274.xy, x_3274.z);
        u_xlat48.x = x_3276;
        let x_3279 : f32 = u_xlat7.w;
        let x_3281 : f32 = u_xlat48.x;
        let x_3284 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3279 * x_3281) + x_3284);
      }
    }
  } else {
    let x_3288 : vec4<f32> = vs_INTERP9;
    let x_3289 : vec2<f32> = vec2<f32>(x_3288.x, x_3288.y);
    let x_3291 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3289.x, x_3289.y, x_3291);
    let x_3298 : vec3<f32> = txVec59;
    let x_3300 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3298.xy, x_3298.z);
    u_xlat63 = x_3300;
  }
  let x_3301 : f32 = u_xlat63;
  let x_3303 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3305 : f32 = u_xlat65;
  u_xlat63 = ((x_3301 * x_3303) + x_3305);
  let x_3308 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3308);
  let x_3311 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3311 >= 1.0f);
  let x_3314 : bool = u_xlatb65;
  let x_3316 : bool = u_xlatb48.x;
  u_xlatb65 = (x_3314 | x_3316);
  let x_3318 : bool = u_xlatb65;
  let x_3319 : f32 = u_xlat63;
  u_xlat63 = select(x_3319, 1.0f, x_3318);
  let x_3321 : vec3<f32> = vs_INTERP0;
  let x_3323 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3325 : vec3<f32> = (x_3321 + -(x_3323));
  let x_3326 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3325.x, x_3325.y, x_3325.z, x_3326.w);
  let x_3328 : vec4<f32> = u_xlat7;
  let x_3330 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3328.x, x_3328.y, x_3328.z), vec3<f32>(x_3330.x, x_3330.y, x_3330.z));
  let x_3333 : f32 = u_xlat65;
  let x_3335 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3338 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3333 * x_3335) + x_3338);
  let x_3340 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3340, 0.0f, 1.0f);
  let x_3342 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3342) + 1.0f);
  let x_3346 : f32 = u_xlat65;
  let x_3348 : f32 = u_xlat48.x;
  let x_3350 : f32 = u_xlat63;
  u_xlat63 = ((x_3346 * x_3348) + x_3350);
  let x_3358 : f32 = x_3356.x_MainLightCookieTextureFormat;
  u_xlatb65 = !((x_3358 == -1.0f));
  let x_3360 : bool = u_xlatb65;
  if (x_3360) {
    let x_3363 : vec3<f32> = vs_INTERP0;
    let x_3366 : vec4<f32> = x_3356.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3363.y, x_3363.y) * vec2<f32>(x_3366.x, x_3366.y));
    let x_3370 : vec4<f32> = x_3356.x_MainLightWorldToLight[0i];
    let x_3372 : vec3<f32> = vs_INTERP0;
    let x_3375 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3370.x, x_3370.y) * vec2<f32>(x_3372.x, x_3372.x)) + x_3375);
    let x_3378 : vec4<f32> = x_3356.x_MainLightWorldToLight[2i];
    let x_3380 : vec3<f32> = vs_INTERP0;
    let x_3383 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3378.x, x_3378.y) * vec2<f32>(x_3380.z, x_3380.z)) + x_3383);
    let x_3385 : vec2<f32> = u_xlat48;
    let x_3387 : vec4<f32> = x_3356.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3385 + vec2<f32>(x_3387.x, x_3387.y));
    let x_3390 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3390 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3398 : vec2<f32> = u_xlat48;
    let x_3400 : f32 = x_90.x_GlobalMipBias.x;
    let x_3401 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3398, x_3400);
    u_xlat7 = x_3401;
    let x_3403 : f32 = x_3356.x_MainLightCookieTextureFormat;
    let x_3405 : f32 = x_3356.x_MainLightCookieTextureFormat;
    let x_3407 : f32 = x_3356.x_MainLightCookieTextureFormat;
    let x_3409 : f32 = x_3356.x_MainLightCookieTextureFormat;
    let x_3410 : vec4<f32> = vec4<f32>(x_3403, x_3405, x_3407, x_3409);
    let x_3418 : vec4<bool> = (vec4<f32>(x_3410.x, x_3410.y, x_3410.z, x_3410.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3418.x, x_3418.y);
    let x_3421 : bool = u_xlatb48.y;
    if (x_3421) {
      let x_3426 : f32 = u_xlat7.w;
      x_3422 = x_3426;
    } else {
      let x_3429 : f32 = u_xlat7.x;
      x_3422 = x_3429;
    }
    let x_3430 : f32 = x_3422;
    u_xlat65 = x_3430;
    let x_3432 : bool = u_xlatb48.x;
    if (x_3432) {
      let x_3436 : vec4<f32> = u_xlat7;
      x_3433 = vec3<f32>(x_3436.x, x_3436.y, x_3436.z);
    } else {
      let x_3439 : f32 = u_xlat65;
      x_3433 = vec3<f32>(x_3439, x_3439, x_3439);
    }
    let x_3441 : vec3<f32> = x_3433;
    let x_3442 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3441.x, x_3441.y, x_3441.z, x_3442.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3448 : vec4<f32> = u_xlat7;
  let x_3451 : vec4<f32> = x_90.x_MainLightColor;
  let x_3453 : vec3<f32> = (vec3<f32>(x_3448.x, x_3448.y, x_3448.z) * vec3<f32>(x_3451.x, x_3451.y, x_3451.z));
  let x_3454 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3453.x, x_3453.y, x_3453.z, x_3454.w);
  let x_3456 : f32 = u_xlat27;
  let x_3458 : vec4<f32> = u_xlat7;
  let x_3460 : vec3<f32> = (vec3<f32>(x_3456, x_3456, x_3456) * vec3<f32>(x_3458.x, x_3458.y, x_3458.z));
  let x_3461 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3460.x, x_3460.y, x_3460.z, x_3461.w);
  let x_3463 : vec3<f32> = u_xlat2;
  let x_3465 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3463), vec3<f32>(x_3465.x, x_3465.y, x_3465.z));
  let x_3468 : f32 = u_xlat65;
  let x_3469 : f32 = u_xlat65;
  u_xlat65 = (x_3468 + x_3469);
  let x_3471 : vec4<f32> = u_xlat3;
  let x_3473 : f32 = u_xlat65;
  let x_3477 : vec3<f32> = u_xlat2;
  let x_3479 : vec3<f32> = ((vec3<f32>(x_3471.x, x_3471.y, x_3471.z) * -(vec3<f32>(x_3473, x_3473, x_3473))) + -(x_3477));
  let x_3480 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3479.x, x_3479.y, x_3479.z, x_3480.w);
  let x_3482 : vec4<f32> = u_xlat3;
  let x_3484 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3482.x, x_3482.y, x_3482.z), x_3484);
  let x_3486 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3486, 0.0f, 1.0f);
  let x_3488 : f32 = u_xlat65;
  u_xlat65 = (-(x_3488) + 1.0f);
  let x_3491 : f32 = u_xlat65;
  let x_3492 : f32 = u_xlat65;
  u_xlat65 = (x_3491 * x_3492);
  let x_3494 : f32 = u_xlat65;
  let x_3495 : f32 = u_xlat65;
  u_xlat65 = (x_3494 * x_3495);
  let x_3498 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3498) * 0.699999988f) + 1.700000048f);
  let x_3506 : f32 = u_xlat43.x;
  let x_3508 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3506 * x_3508);
  let x_3512 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3512 * 6.0f);
  let x_3524 : vec4<f32> = u_xlat8;
  let x_3527 : f32 = u_xlat43.x;
  let x_3528 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3524.x, x_3524.y, x_3524.z), x_3527);
  u_xlat8 = x_3528;
  let x_3530 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3530 + -1.0f);
  let x_3534 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3536 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3534 * x_3536) + 1.0f);
  let x_3541 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3541, 0.0f);
  let x_3545 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3545);
  let x_3549 : f32 = u_xlat43.x;
  let x_3551 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3549 * x_3551);
  let x_3555 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3555);
  let x_3559 : f32 = u_xlat43.x;
  let x_3561 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3559 * x_3561);
  let x_3564 : vec4<f32> = u_xlat8;
  let x_3566 : vec2<f32> = u_xlat43;
  let x_3568 : vec3<f32> = (vec3<f32>(x_3564.x, x_3564.y, x_3564.z) * vec3<f32>(x_3566.x, x_3566.x, x_3566.x));
  let x_3569 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3568.x, x_3568.y, x_3568.z, x_3569.w);
  let x_3571 : f32 = u_xlat64;
  let x_3573 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3571, x_3571) * vec2<f32>(x_3573, x_3573)) + vec2<f32>(-1.0f, 1.0f));
  let x_3579 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3579);
  let x_3581 : f32 = u_xlat67;
  u_xlat67 = (x_3581 + -0.039999999f);
  let x_3584 : f32 = u_xlat65;
  let x_3585 : f32 = u_xlat67;
  u_xlat65 = ((x_3584 * x_3585) + 0.039999999f);
  let x_3589 : f32 = u_xlat64;
  let x_3590 : f32 = u_xlat65;
  u_xlat64 = (x_3589 * x_3590);
  let x_3592 : f32 = u_xlat64;
  let x_3594 : vec4<f32> = u_xlat8;
  let x_3596 : vec3<f32> = (vec3<f32>(x_3592, x_3592, x_3592) * vec3<f32>(x_3594.x, x_3594.y, x_3594.z));
  let x_3597 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3596.x, x_3596.y, x_3596.z, x_3597.w);
  let x_3599 : vec3<f32> = u_xlat26;
  let x_3600 : vec3<f32> = u_xlat4;
  let x_3602 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3599 * x_3600) + vec3<f32>(x_3602.x, x_3602.y, x_3602.z));
  let x_3605 : f32 = u_xlat63;
  let x_3607 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3605 * x_3607);
  let x_3609 : vec4<f32> = u_xlat3;
  let x_3612 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3609.x, x_3609.y, x_3609.z), vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
  let x_3615 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3615, 0.0f, 1.0f);
  let x_3617 : f32 = u_xlat63;
  let x_3618 : f32 = u_xlat64;
  u_xlat63 = (x_3617 * x_3618);
  let x_3620 : f32 = u_xlat63;
  let x_3622 : vec4<f32> = u_xlat7;
  let x_3624 : vec3<f32> = (vec3<f32>(x_3620, x_3620, x_3620) * vec3<f32>(x_3622.x, x_3622.y, x_3622.z));
  let x_3625 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3624.x, x_3624.y, x_3624.z, x_3625.w);
  let x_3627 : vec3<f32> = u_xlat2;
  let x_3629 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3631 : vec3<f32> = (x_3627 + vec3<f32>(x_3629.x, x_3629.y, x_3629.z));
  let x_3632 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3631.x, x_3631.y, x_3631.z, x_3632.w);
  let x_3634 : vec4<f32> = u_xlat8;
  let x_3636 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3634.x, x_3634.y, x_3634.z), vec3<f32>(x_3636.x, x_3636.y, x_3636.z));
  let x_3639 : f32 = u_xlat63;
  u_xlat63 = max(x_3639, 1.17549435e-37f);
  let x_3642 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3642);
  let x_3644 : f32 = u_xlat63;
  let x_3646 : vec4<f32> = u_xlat8;
  let x_3648 : vec3<f32> = (vec3<f32>(x_3644, x_3644, x_3644) * vec3<f32>(x_3646.x, x_3646.y, x_3646.z));
  let x_3649 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3648.x, x_3648.y, x_3648.z, x_3649.w);
  let x_3651 : vec4<f32> = u_xlat3;
  let x_3653 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3651.x, x_3651.y, x_3651.z), vec3<f32>(x_3653.x, x_3653.y, x_3653.z));
  let x_3656 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3656, 0.0f, 1.0f);
  let x_3659 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3661 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3659.x, x_3659.y, x_3659.z), vec3<f32>(x_3661.x, x_3661.y, x_3661.z));
  let x_3664 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3664, 0.0f, 1.0f);
  let x_3666 : f32 = u_xlat63;
  let x_3667 : f32 = u_xlat63;
  u_xlat63 = (x_3666 * x_3667);
  let x_3669 : f32 = u_xlat63;
  let x_3671 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3669 * x_3671) + 1.000010014f);
  let x_3675 : f32 = u_xlat64;
  let x_3676 : f32 = u_xlat64;
  u_xlat64 = (x_3675 * x_3676);
  let x_3678 : f32 = u_xlat63;
  let x_3679 : f32 = u_xlat63;
  u_xlat63 = (x_3678 * x_3679);
  let x_3681 : f32 = u_xlat64;
  u_xlat64 = max(x_3681, 0.100000001f);
  let x_3684 : f32 = u_xlat63;
  let x_3685 : f32 = u_xlat64;
  u_xlat63 = (x_3684 * x_3685);
  let x_3688 : f32 = u_xlat5.x;
  let x_3689 : f32 = u_xlat63;
  u_xlat63 = (x_3688 * x_3689);
  let x_3691 : f32 = u_xlat66;
  let x_3692 : f32 = u_xlat63;
  u_xlat63 = (x_3691 / x_3692);
  let x_3694 : f32 = u_xlat63;
  let x_3698 : vec3<f32> = u_xlat4;
  let x_3699 : vec3<f32> = ((vec3<f32>(x_3694, x_3694, x_3694) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3698);
  let x_3700 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3699.x, x_3699.y, x_3699.z, x_3700.w);
  let x_3702 : vec4<f32> = u_xlat7;
  let x_3704 : vec4<f32> = u_xlat8;
  let x_3706 : vec3<f32> = (vec3<f32>(x_3702.x, x_3702.y, x_3702.z) * vec3<f32>(x_3704.x, x_3704.y, x_3704.z));
  let x_3707 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3706.x, x_3706.y, x_3706.z, x_3707.w);
  let x_3710 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3712 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3710, x_3712);
  let x_3715 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3715));
  let x_3719 : f32 = x_3356.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3721 : f32 = x_3356.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3723 : f32 = x_3356.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3725 : f32 = x_3356.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3726 : vec4<f32> = vec4<f32>(x_3719, x_3721, x_3723, x_3725);
  let x_3732 : vec4<bool> = (vec4<f32>(x_3726.x, x_3726.y, x_3726.z, x_3726.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3732.x, x_3732.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3743 : u32 = u_xlatu_loop_1;
    let x_3744 : u32 = u_xlatu63;
    if ((x_3743 < x_3744)) {
    } else {
      break;
    }
    let x_3747 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3747 >> 2u);
    let x_3750 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3750 & 3u));
    let x_3753 : u32 = u_xlatu65;
    let x_3756 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3753)];
    let x_3766 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3771 : vec4<u32> = indexable[x_3766];
    u_xlat65 = dot(x_3756, bitcast<vec4<f32>>(x_3771));
    let x_3774 : f32 = u_xlat65;
    u_xlatu65 = bitcast<u32>(i32(x_3774));
    let x_3777 : vec3<f32> = vs_INTERP0;
    let x_3789 : u32 = u_xlatu65;
    let x_3792 : vec4<f32> = x_3788.x_AdditionalLightsPosition[bitcast<i32>(x_3789)];
    let x_3795 : u32 = u_xlatu65;
    let x_3798 : vec4<f32> = x_3788.x_AdditionalLightsPosition[bitcast<i32>(x_3795)];
    let x_3800 : vec3<f32> = ((-(x_3777) * vec3<f32>(x_3792.w, x_3792.w, x_3792.w)) + vec3<f32>(x_3798.x, x_3798.y, x_3798.z));
    let x_3801 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3800.x, x_3800.y, x_3800.z, x_3801.w);
    let x_3803 : vec4<f32> = u_xlat9;
    let x_3805 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3803.x, x_3803.y, x_3803.z), vec3<f32>(x_3805.x, x_3805.y, x_3805.z));
    let x_3808 : f32 = u_xlat67;
    u_xlat67 = max(x_3808, 6.10351562e-05f);
    let x_3812 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3812);
    let x_3814 : f32 = u_xlat70;
    let x_3816 : vec4<f32> = u_xlat9;
    let x_3818 : vec3<f32> = (vec3<f32>(x_3814, x_3814, x_3814) * vec3<f32>(x_3816.x, x_3816.y, x_3816.z));
    let x_3819 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3818.x, x_3818.y, x_3818.z, x_3819.w);
    let x_3821 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3821);
    let x_3823 : f32 = u_xlat67;
    let x_3824 : u32 = u_xlatu65;
    let x_3827 : f32 = x_3788.x_AdditionalLightsAttenuation[bitcast<i32>(x_3824)].x;
    u_xlat67 = (x_3823 * x_3827);
    let x_3829 : f32 = u_xlat67;
    let x_3831 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3829) * x_3831) + 1.0f);
    let x_3834 : f32 = u_xlat67;
    u_xlat67 = max(x_3834, 0.0f);
    let x_3836 : f32 = u_xlat67;
    let x_3837 : f32 = u_xlat67;
    u_xlat67 = (x_3836 * x_3837);
    let x_3839 : f32 = u_xlat67;
    let x_3840 : f32 = u_xlat71;
    u_xlat67 = (x_3839 * x_3840);
    let x_3842 : u32 = u_xlatu65;
    let x_3845 : vec4<f32> = x_3788.x_AdditionalLightsSpotDir[bitcast<i32>(x_3842)];
    let x_3847 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3845.x, x_3845.y, x_3845.z), vec3<f32>(x_3847.x, x_3847.y, x_3847.z));
    let x_3850 : f32 = u_xlat71;
    let x_3851 : u32 = u_xlatu65;
    let x_3854 : f32 = x_3788.x_AdditionalLightsAttenuation[bitcast<i32>(x_3851)].z;
    let x_3856 : u32 = u_xlatu65;
    let x_3859 : f32 = x_3788.x_AdditionalLightsAttenuation[bitcast<i32>(x_3856)].w;
    u_xlat71 = ((x_3850 * x_3854) + x_3859);
    let x_3861 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3861, 0.0f, 1.0f);
    let x_3863 : f32 = u_xlat71;
    let x_3864 : f32 = u_xlat71;
    u_xlat71 = (x_3863 * x_3864);
    let x_3866 : f32 = u_xlat67;
    let x_3867 : f32 = u_xlat71;
    u_xlat67 = (x_3866 * x_3867);
    let x_3870 : u32 = u_xlatu65;
    u_xlatu71 = (x_3870 >> 5u);
    let x_3873 : u32 = u_xlatu65;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3873) & 31i)));
    let x_3879 : i32 = u_xlati72;
    let x_3881 : u32 = u_xlatu71;
    let x_3884 : f32 = x_3356.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3881)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3879) & bitcast<u32>(x_3884)));
    let x_3888 : i32 = u_xlati71;
    if ((x_3888 != 0i)) {
      let x_3898 : u32 = u_xlatu65;
      let x_3901 : f32 = x_3897.x_AdditionalLightsLightTypes[bitcast<i32>(x_3898)].el;
      u_xlati71 = i32(x_3901);
      let x_3903 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3903 != 0i));
      let x_3907 : u32 = u_xlatu65;
      u_xlati73 = (bitcast<i32>(x_3907) << bitcast<u32>(2i));
      let x_3910 : i32 = u_xlati72;
      if ((x_3910 != 0i)) {
        let x_3914 : vec3<f32> = vs_INTERP0;
        let x_3916 : i32 = u_xlati73;
        let x_3919 : i32 = u_xlati73;
        let x_3923 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_3916 + 1i) / 4i)][((x_3919 + 1i) % 4i)];
        let x_3925 : vec3<f32> = (vec3<f32>(x_3914.y, x_3914.y, x_3914.y) * vec3<f32>(x_3923.x, x_3923.y, x_3923.w));
        let x_3926 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3925.x, x_3925.y, x_3925.z, x_3926.w);
        let x_3928 : i32 = u_xlati73;
        let x_3930 : i32 = u_xlati73;
        let x_3933 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[(x_3928 / 4i)][(x_3930 % 4i)];
        let x_3935 : vec3<f32> = vs_INTERP0;
        let x_3938 : vec4<f32> = u_xlat11;
        let x_3940 : vec3<f32> = ((vec3<f32>(x_3933.x, x_3933.y, x_3933.w) * vec3<f32>(x_3935.x, x_3935.x, x_3935.x)) + vec3<f32>(x_3938.x, x_3938.y, x_3938.z));
        let x_3941 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3940.x, x_3940.y, x_3940.z, x_3941.w);
        let x_3943 : i32 = u_xlati73;
        let x_3946 : i32 = u_xlati73;
        let x_3950 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_3943 + 2i) / 4i)][((x_3946 + 2i) % 4i)];
        let x_3952 : vec3<f32> = vs_INTERP0;
        let x_3955 : vec4<f32> = u_xlat11;
        let x_3957 : vec3<f32> = ((vec3<f32>(x_3950.x, x_3950.y, x_3950.w) * vec3<f32>(x_3952.z, x_3952.z, x_3952.z)) + vec3<f32>(x_3955.x, x_3955.y, x_3955.z));
        let x_3958 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3957.x, x_3957.y, x_3957.z, x_3958.w);
        let x_3960 : vec4<f32> = u_xlat11;
        let x_3962 : i32 = u_xlati73;
        let x_3965 : i32 = u_xlati73;
        let x_3969 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_3962 + 3i) / 4i)][((x_3965 + 3i) % 4i)];
        let x_3971 : vec3<f32> = (vec3<f32>(x_3960.x, x_3960.y, x_3960.z) + vec3<f32>(x_3969.x, x_3969.y, x_3969.w));
        let x_3972 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3971.x, x_3971.y, x_3971.z, x_3972.w);
        let x_3974 : vec4<f32> = u_xlat11;
        let x_3976 : vec4<f32> = u_xlat11;
        let x_3978 : vec2<f32> = (vec2<f32>(x_3974.x, x_3974.y) / vec2<f32>(x_3976.z, x_3976.z));
        let x_3979 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3978.x, x_3978.y, x_3979.z, x_3979.w);
        let x_3981 : vec4<f32> = u_xlat11;
        let x_3984 : vec2<f32> = ((vec2<f32>(x_3981.x, x_3981.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3985 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3984.x, x_3984.y, x_3985.z, x_3985.w);
        let x_3987 : vec4<f32> = u_xlat11;
        let x_3991 : vec2<f32> = clamp(vec2<f32>(x_3987.x, x_3987.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3992 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3991.x, x_3991.y, x_3992.z, x_3992.w);
        let x_3994 : u32 = u_xlatu65;
        let x_3997 : vec4<f32> = x_3897.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3994)];
        let x_3999 : vec4<f32> = u_xlat11;
        let x_4002 : u32 = u_xlatu65;
        let x_4005 : vec4<f32> = x_3897.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4002)];
        let x_4007 : vec2<f32> = ((vec2<f32>(x_3997.x, x_3997.y) * vec2<f32>(x_3999.x, x_3999.y)) + vec2<f32>(x_4005.z, x_4005.w));
        let x_4008 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4007.x, x_4007.y, x_4008.z, x_4008.w);
      } else {
        let x_4012 : i32 = u_xlati71;
        u_xlatb71 = (x_4012 == 1i);
        let x_4014 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_4014);
        let x_4016 : i32 = u_xlati71;
        if ((x_4016 != 0i)) {
          let x_4021 : vec3<f32> = vs_INTERP0;
          let x_4023 : i32 = u_xlati73;
          let x_4026 : i32 = u_xlati73;
          let x_4030 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_4023 + 1i) / 4i)][((x_4026 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_4021.y, x_4021.y) * vec2<f32>(x_4030.x, x_4030.y));
          let x_4033 : i32 = u_xlati73;
          let x_4035 : i32 = u_xlati73;
          let x_4038 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[(x_4033 / 4i)][(x_4035 % 4i)];
          let x_4040 : vec3<f32> = vs_INTERP0;
          let x_4043 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4038.x, x_4038.y) * vec2<f32>(x_4040.x, x_4040.x)) + x_4043);
          let x_4045 : i32 = u_xlati73;
          let x_4048 : i32 = u_xlati73;
          let x_4052 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_4045 + 2i) / 4i)][((x_4048 + 2i) % 4i)];
          let x_4054 : vec3<f32> = vs_INTERP0;
          let x_4057 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4052.x, x_4052.y) * vec2<f32>(x_4054.z, x_4054.z)) + x_4057);
          let x_4059 : vec2<f32> = u_xlat53;
          let x_4060 : i32 = u_xlati73;
          let x_4063 : i32 = u_xlati73;
          let x_4067 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_4060 + 3i) / 4i)][((x_4063 + 3i) % 4i)];
          u_xlat53 = (x_4059 + vec2<f32>(x_4067.x, x_4067.y));
          let x_4070 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4070 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4073 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_4073);
          let x_4075 : u32 = u_xlatu65;
          let x_4078 : vec4<f32> = x_3897.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4075)];
          let x_4080 : vec2<f32> = u_xlat53;
          let x_4082 : u32 = u_xlatu65;
          let x_4085 : vec4<f32> = x_3897.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4082)];
          let x_4087 : vec2<f32> = ((vec2<f32>(x_4078.x, x_4078.y) * x_4080) + vec2<f32>(x_4085.z, x_4085.w));
          let x_4088 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4087.x, x_4087.y, x_4088.z, x_4088.w);
        } else {
          let x_4091 : vec3<f32> = vs_INTERP0;
          let x_4093 : i32 = u_xlati73;
          let x_4096 : i32 = u_xlati73;
          let x_4100 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_4093 + 1i) / 4i)][((x_4096 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4091.y, x_4091.y, x_4091.y, x_4091.y) * x_4100);
          let x_4102 : i32 = u_xlati73;
          let x_4104 : i32 = u_xlati73;
          let x_4107 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[(x_4102 / 4i)][(x_4104 % 4i)];
          let x_4108 : vec3<f32> = vs_INTERP0;
          let x_4111 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4107 * vec4<f32>(x_4108.x, x_4108.x, x_4108.x, x_4108.x)) + x_4111);
          let x_4113 : i32 = u_xlati73;
          let x_4116 : i32 = u_xlati73;
          let x_4120 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_4113 + 2i) / 4i)][((x_4116 + 2i) % 4i)];
          let x_4121 : vec3<f32> = vs_INTERP0;
          let x_4124 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4120 * vec4<f32>(x_4121.z, x_4121.z, x_4121.z, x_4121.z)) + x_4124);
          let x_4126 : vec4<f32> = u_xlat12;
          let x_4127 : i32 = u_xlati73;
          let x_4130 : i32 = u_xlati73;
          let x_4134 : vec4<f32> = x_3897.x_AdditionalLightsWorldToLights[((x_4127 + 3i) / 4i)][((x_4130 + 3i) % 4i)];
          u_xlat12 = (x_4126 + x_4134);
          let x_4136 : vec4<f32> = u_xlat12;
          let x_4138 : vec4<f32> = u_xlat12;
          let x_4140 : vec3<f32> = (vec3<f32>(x_4136.x, x_4136.y, x_4136.z) / vec3<f32>(x_4138.w, x_4138.w, x_4138.w));
          let x_4141 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4140.x, x_4140.y, x_4140.z, x_4141.w);
          let x_4143 : vec4<f32> = u_xlat12;
          let x_4145 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4143.x, x_4143.y, x_4143.z), vec3<f32>(x_4145.x, x_4145.y, x_4145.z));
          let x_4148 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4148);
          let x_4150 : f32 = u_xlat71;
          let x_4152 : vec4<f32> = u_xlat12;
          let x_4154 : vec3<f32> = (vec3<f32>(x_4150, x_4150, x_4150) * vec3<f32>(x_4152.x, x_4152.y, x_4152.z));
          let x_4155 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4154.x, x_4154.y, x_4154.z, x_4155.w);
          let x_4157 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4157.x, x_4157.y, x_4157.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4162 : f32 = u_xlat71;
          u_xlat71 = max(x_4162, 0.000001f);
          let x_4165 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4165);
          let x_4167 : f32 = u_xlat71;
          let x_4169 : vec4<f32> = u_xlat12;
          let x_4171 : vec3<f32> = (vec3<f32>(x_4167, x_4167, x_4167) * vec3<f32>(x_4169.z, x_4169.x, x_4169.y));
          let x_4172 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4171.x, x_4171.y, x_4171.z, x_4172.w);
          let x_4175 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4175);
          let x_4179 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4179, 0.0f, 1.0f);
          let x_4183 : vec4<f32> = u_xlat13;
          let x_4186 : vec4<bool> = (vec4<f32>(x_4183.y, x_4183.z, x_4183.y, x_4183.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4186.x, x_4186.y);
          let x_4189 : bool = u_xlatb53.x;
          if (x_4189) {
            let x_4194 : f32 = u_xlat13.x;
            x_4190 = x_4194;
          } else {
            let x_4197 : f32 = u_xlat13.x;
            x_4190 = -(x_4197);
          }
          let x_4199 : f32 = x_4190;
          u_xlat53.x = x_4199;
          let x_4202 : bool = u_xlatb53.y;
          if (x_4202) {
            let x_4207 : f32 = u_xlat13.x;
            x_4203 = x_4207;
          } else {
            let x_4210 : f32 = u_xlat13.x;
            x_4203 = -(x_4210);
          }
          let x_4212 : f32 = x_4203;
          u_xlat53.y = x_4212;
          let x_4214 : vec4<f32> = u_xlat12;
          let x_4216 : f32 = u_xlat71;
          let x_4219 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4214.x, x_4214.y) * vec2<f32>(x_4216, x_4216)) + x_4219);
          let x_4221 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4221 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4224 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4224, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4228 : u32 = u_xlatu65;
          let x_4231 : vec4<f32> = x_3897.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4228)];
          let x_4233 : vec2<f32> = u_xlat53;
          let x_4235 : u32 = u_xlatu65;
          let x_4238 : vec4<f32> = x_3897.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4235)];
          let x_4240 : vec2<f32> = ((vec2<f32>(x_4231.x, x_4231.y) * x_4233) + vec2<f32>(x_4238.z, x_4238.w));
          let x_4241 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4240.x, x_4240.y, x_4241.z, x_4241.w);
        }
      }
      let x_4248 : vec4<f32> = u_xlat11;
      let x_4251 : f32 = x_90.x_GlobalMipBias.x;
      let x_4252 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4248.x, x_4248.y), x_4251);
      u_xlat11 = x_4252;
      let x_4254 : bool = u_xlatb48.y;
      if (x_4254) {
        let x_4259 : f32 = u_xlat11.w;
        x_4255 = x_4259;
      } else {
        let x_4262 : f32 = u_xlat11.x;
        x_4255 = x_4262;
      }
      let x_4263 : f32 = x_4255;
      u_xlat71 = x_4263;
      let x_4265 : bool = u_xlatb48.x;
      if (x_4265) {
        let x_4269 : vec4<f32> = u_xlat11;
        x_4266 = vec3<f32>(x_4269.x, x_4269.y, x_4269.z);
      } else {
        let x_4272 : f32 = u_xlat71;
        x_4266 = vec3<f32>(x_4272, x_4272, x_4272);
      }
      let x_4274 : vec3<f32> = x_4266;
      let x_4275 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4274.x, x_4274.y, x_4274.z, x_4275.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4281 : vec4<f32> = u_xlat11;
    let x_4283 : u32 = u_xlatu65;
    let x_4286 : vec4<f32> = x_3788.x_AdditionalLightsColor[bitcast<i32>(x_4283)];
    let x_4288 : vec3<f32> = (vec3<f32>(x_4281.x, x_4281.y, x_4281.z) * vec3<f32>(x_4286.x, x_4286.y, x_4286.z));
    let x_4289 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4288.x, x_4288.y, x_4288.z, x_4289.w);
    let x_4291 : f32 = u_xlat27;
    let x_4293 : vec4<f32> = u_xlat11;
    let x_4295 : vec3<f32> = (vec3<f32>(x_4291, x_4291, x_4291) * vec3<f32>(x_4293.x, x_4293.y, x_4293.z));
    let x_4296 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4295.x, x_4295.y, x_4295.z, x_4296.w);
    let x_4298 : vec4<f32> = u_xlat3;
    let x_4300 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_4298.x, x_4298.y, x_4298.z), vec3<f32>(x_4300.x, x_4300.y, x_4300.z));
    let x_4303 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4303, 0.0f, 1.0f);
    let x_4305 : f32 = u_xlat65;
    let x_4306 : f32 = u_xlat67;
    u_xlat65 = (x_4305 * x_4306);
    let x_4308 : f32 = u_xlat65;
    let x_4310 : vec4<f32> = u_xlat11;
    let x_4312 : vec3<f32> = (vec3<f32>(x_4308, x_4308, x_4308) * vec3<f32>(x_4310.x, x_4310.y, x_4310.z));
    let x_4313 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4312.x, x_4312.y, x_4312.z, x_4313.w);
    let x_4315 : vec4<f32> = u_xlat9;
    let x_4317 : f32 = u_xlat70;
    let x_4320 : vec3<f32> = u_xlat2;
    let x_4321 : vec3<f32> = ((vec3<f32>(x_4315.x, x_4315.y, x_4315.z) * vec3<f32>(x_4317, x_4317, x_4317)) + x_4320);
    let x_4322 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4321.x, x_4321.y, x_4321.z, x_4322.w);
    let x_4324 : vec4<f32> = u_xlat9;
    let x_4326 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4324.x, x_4324.y, x_4324.z), vec3<f32>(x_4326.x, x_4326.y, x_4326.z));
    let x_4329 : f32 = u_xlat65;
    u_xlat65 = max(x_4329, 1.17549435e-37f);
    let x_4331 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_4331);
    let x_4333 : f32 = u_xlat65;
    let x_4335 : vec4<f32> = u_xlat9;
    let x_4337 : vec3<f32> = (vec3<f32>(x_4333, x_4333, x_4333) * vec3<f32>(x_4335.x, x_4335.y, x_4335.z));
    let x_4338 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4337.x, x_4337.y, x_4337.z, x_4338.w);
    let x_4340 : vec4<f32> = u_xlat3;
    let x_4342 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4340.x, x_4340.y, x_4340.z), vec3<f32>(x_4342.x, x_4342.y, x_4342.z));
    let x_4345 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4345, 0.0f, 1.0f);
    let x_4347 : vec4<f32> = u_xlat10;
    let x_4349 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4347.x, x_4347.y, x_4347.z), vec3<f32>(x_4349.x, x_4349.y, x_4349.z));
    let x_4352 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4352, 0.0f, 1.0f);
    let x_4354 : f32 = u_xlat65;
    let x_4355 : f32 = u_xlat65;
    u_xlat65 = (x_4354 * x_4355);
    let x_4357 : f32 = u_xlat65;
    let x_4359 : f32 = u_xlat43.x;
    u_xlat65 = ((x_4357 * x_4359) + 1.000010014f);
    let x_4362 : f32 = u_xlat67;
    let x_4363 : f32 = u_xlat67;
    u_xlat67 = (x_4362 * x_4363);
    let x_4365 : f32 = u_xlat65;
    let x_4366 : f32 = u_xlat65;
    u_xlat65 = (x_4365 * x_4366);
    let x_4368 : f32 = u_xlat67;
    u_xlat67 = max(x_4368, 0.100000001f);
    let x_4370 : f32 = u_xlat65;
    let x_4371 : f32 = u_xlat67;
    u_xlat65 = (x_4370 * x_4371);
    let x_4374 : f32 = u_xlat5.x;
    let x_4375 : f32 = u_xlat65;
    u_xlat65 = (x_4374 * x_4375);
    let x_4377 : f32 = u_xlat66;
    let x_4378 : f32 = u_xlat65;
    u_xlat65 = (x_4377 / x_4378);
    let x_4380 : f32 = u_xlat65;
    let x_4383 : vec3<f32> = u_xlat4;
    let x_4384 : vec3<f32> = ((vec3<f32>(x_4380, x_4380, x_4380) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4383);
    let x_4385 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4384.x, x_4384.y, x_4384.z, x_4385.w);
    let x_4387 : vec4<f32> = u_xlat9;
    let x_4389 : vec4<f32> = u_xlat11;
    let x_4392 : vec4<f32> = u_xlat8;
    let x_4394 : vec3<f32> = ((vec3<f32>(x_4387.x, x_4387.y, x_4387.z) * vec3<f32>(x_4389.x, x_4389.y, x_4389.z)) + vec3<f32>(x_4392.x, x_4392.y, x_4392.z));
    let x_4395 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4394.x, x_4394.y, x_4394.z, x_4395.w);

    continuing {
      let x_4397 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4397 + bitcast<u32>(1i));
    }
  }
  let x_4399 : vec3<f32> = u_xlat26;
  let x_4400 : vec4<f32> = u_xlat6;
  let x_4403 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_4399 * vec3<f32>(x_4400.x, x_4400.x, x_4400.x)) + vec3<f32>(x_4403.x, x_4403.y, x_4403.z));
  let x_4406 : vec4<f32> = u_xlat8;
  let x_4408 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4406.x, x_4406.y, x_4406.z) + x_4408);
  let x_4412 : vec4<f32> = vs_INTERP4;
  let x_4414 : vec3<f32> = u_xlat0;
  let x_4416 : vec3<f32> = u_xlat2;
  let x_4417 : vec3<f32> = ((vec3<f32>(x_4412.w, x_4412.w, x_4412.w) * x_4414) + x_4416);
  let x_4418 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4417.x, x_4417.y, x_4417.z, x_4418.w);
  let x_4420 : bool = u_xlatb22;
  if (x_4420) {
    let x_4425 : f32 = u_xlat1.x;
    x_4421 = x_4425;
  } else {
    x_4421 = 1.0f;
  }
  let x_4427 : f32 = x_4421;
  SV_Target0.w = x_4427;
  let x_4433 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_4435 : f32 = x_161.unity_RenderingLayer.x;
  u_xlatu0 = (x_4433 & bitcast<u32>(x_4435));
  let x_4438 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4438);
  let x_4443 : f32 = u_xlat0.x;
  let x_4445 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4443 * x_4445);
  let x_4449 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4449, 0.0f, 1.0f);
  let x_4452 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4452.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

