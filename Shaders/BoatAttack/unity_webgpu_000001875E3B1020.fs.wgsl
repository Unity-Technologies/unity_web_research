struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(2) var x_MainTex : texture_2d<f32>;

@group(0) @binding(8) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(3) var x_MetallicTex : texture_2d<f32>;

@group(0) @binding(9) var sampler_MetallicTex : sampler;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_91 : MainLightShadows;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

@group(0) @binding(4) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(5) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(2) var<uniform> x_1876 : UnityPerDraw;

@group(1) @binding(1) var<uniform> x_2115 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : f32;
  var u_xlat21 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu2 : u32;
  var u_xlati2 : i32;
  var u_xlat22 : vec3<f32>;
  var u_xlat62 : f32;
  var u_xlat63 : f32;
  var u_xlat24 : f32;
  var u_xlat64 : f32;
  var u_xlat60 : f32;
  var u_xlat44 : f32;
  var u_xlatb65 : bool;
  var u_xlat6 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb6 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat66 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlatb42 : bool;
  var x_1730 : f32;
  var u_xlat42 : f32;
  var u_xlat29 : vec3<f32>;
  var u_xlatu60 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu63 : u32;
  var u_xlati65 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati63 : i32;
  var u_xlat67 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_TEXCOORD0;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_59 : vec4<f32> = vs_TEXCOORD0;
  let x_62 : f32 = x_44.x_GlobalMipBias.x;
  let x_63 : vec4<f32> = textureSampleBias(x_MetallicTex, sampler_MetallicTex, vec2<f32>(x_59.x, x_59.y), x_62);
  u_xlat1 = x_63.x;
  let x_68 : vec4<f32> = vs_TEXCOORD3;
  let x_70 : vec4<f32> = vs_TEXCOORD3;
  u_xlat21.x = dot(vec3<f32>(x_68.x, x_68.y, x_68.z), vec3<f32>(x_70.x, x_70.y, x_70.z));
  let x_75 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_75);
  let x_78 : vec3<f32> = u_xlat21;
  let x_80 : vec4<f32> = vs_TEXCOORD3;
  u_xlat21 = (vec3<f32>(x_78.x, x_78.x, x_78.x) * vec3<f32>(x_80.x, x_80.y, x_80.z));
  let x_86 : vec3<f32> = vs_TEXCOORD7;
  let x_94 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres0;
  let x_97 : vec3<f32> = (x_86 + -(vec3<f32>(x_94.x, x_94.y, x_94.z)));
  let x_98 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_97.x, x_97.y, x_97.z, x_98.w);
  let x_101 : vec3<f32> = vs_TEXCOORD7;
  let x_104 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres1;
  let x_107 : vec3<f32> = (x_101 + -(vec3<f32>(x_104.x, x_104.y, x_104.z)));
  let x_108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_111 : vec3<f32> = vs_TEXCOORD7;
  let x_114 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres2;
  u_xlat4 = (x_111 + -(vec3<f32>(x_114.x, x_114.y, x_114.z)));
  let x_119 : vec3<f32> = vs_TEXCOORD7;
  let x_122 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres3;
  u_xlat5 = (x_119 + -(vec3<f32>(x_122.x, x_122.y, x_122.z)));
  let x_126 : vec4<f32> = u_xlat2;
  let x_128 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_126.x, x_126.y, x_126.z), vec3<f32>(x_128.x, x_128.y, x_128.z));
  let x_132 : vec4<f32> = u_xlat3;
  let x_134 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_132.x, x_132.y, x_132.z), vec3<f32>(x_134.x, x_134.y, x_134.z));
  let x_139 : vec3<f32> = u_xlat4;
  let x_140 : vec3<f32> = u_xlat4;
  u_xlat2.z = dot(x_139, x_140);
  let x_144 : vec3<f32> = u_xlat5;
  let x_145 : vec3<f32> = u_xlat5;
  u_xlat2.w = dot(x_144, x_145);
  let x_152 : vec4<f32> = u_xlat2;
  let x_155 : vec4<f32> = x_91.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_152 < x_155);
  let x_159 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_159);
  let x_164 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_164);
  let x_168 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_168);
  let x_172 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_172);
  let x_176 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_176);
  let x_182 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_182);
  let x_186 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_186);
  let x_189 : vec4<f32> = u_xlat2;
  let x_191 : vec4<f32> = u_xlat3;
  let x_193 : vec3<f32> = (vec3<f32>(x_189.x, x_189.y, x_189.z) + vec3<f32>(x_191.y, x_191.z, x_191.w));
  let x_194 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_193.x, x_193.y, x_193.z, x_194.w);
  let x_196 : vec4<f32> = u_xlat2;
  let x_199 : vec3<f32> = max(vec3<f32>(x_196.x, x_196.y, x_196.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_200 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_200.x, x_199.x, x_199.y, x_199.z);
  let x_202 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_202, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_210 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_210) + 4.0f);
  let x_217 : f32 = u_xlat2.x;
  u_xlatu2 = u32(x_217);
  let x_221 : u32 = u_xlatu2;
  u_xlati2 = (bitcast<i32>(x_221) << bitcast<u32>(2i));
  let x_225 : vec3<f32> = vs_TEXCOORD7;
  let x_228 : i32 = u_xlati2;
  let x_231 : i32 = u_xlati2;
  let x_235 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_228 + 1i) / 4i)][((x_231 + 1i) % 4i)];
  u_xlat22 = (vec3<f32>(x_225.y, x_225.y, x_225.y) * vec3<f32>(x_235.x, x_235.y, x_235.z));
  let x_238 : i32 = u_xlati2;
  let x_240 : i32 = u_xlati2;
  let x_243 : vec4<f32> = x_91.x_MainLightWorldToShadow[(x_238 / 4i)][(x_240 % 4i)];
  let x_245 : vec3<f32> = vs_TEXCOORD7;
  let x_248 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_243.x, x_243.y, x_243.z) * vec3<f32>(x_245.x, x_245.x, x_245.x)) + x_248);
  let x_250 : i32 = u_xlati2;
  let x_253 : i32 = u_xlati2;
  let x_257 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_250 + 2i) / 4i)][((x_253 + 2i) % 4i)];
  let x_259 : vec3<f32> = vs_TEXCOORD7;
  let x_262 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_257.x, x_257.y, x_257.z) * vec3<f32>(x_259.z, x_259.z, x_259.z)) + x_262);
  let x_264 : vec3<f32> = u_xlat22;
  let x_265 : i32 = u_xlati2;
  let x_268 : i32 = u_xlati2;
  let x_272 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_265 + 3i) / 4i)][((x_268 + 3i) % 4i)];
  let x_274 : vec3<f32> = (x_264 + vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_279 : f32 = vs_TEXCOORD7.y;
  let x_282 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat62 = (x_279 * x_282);
  let x_285 : f32 = x_44.unity_MatrixV[0i].z;
  let x_287 : f32 = vs_TEXCOORD7.x;
  let x_289 : f32 = u_xlat62;
  u_xlat62 = ((x_285 * x_287) + x_289);
  let x_292 : f32 = x_44.unity_MatrixV[2i].z;
  let x_294 : f32 = vs_TEXCOORD7.z;
  let x_296 : f32 = u_xlat62;
  u_xlat62 = ((x_292 * x_294) + x_296);
  let x_298 : f32 = u_xlat62;
  let x_300 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat62 = (x_298 + x_300);
  let x_302 : f32 = u_xlat62;
  let x_306 : f32 = x_44.x_ProjectionParams.y;
  u_xlat62 = (-(x_302) + -(x_306));
  let x_309 : f32 = u_xlat62;
  u_xlat62 = max(x_309, 0.0f);
  let x_311 : f32 = u_xlat62;
  let x_314 : f32 = x_44.unity_FogParams.x;
  u_xlat62 = (x_311 * x_314);
  let x_321 : vec4<f32> = vs_TEXCOORD0;
  let x_324 : f32 = x_44.x_GlobalMipBias.x;
  let x_325 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, vec2<f32>(x_321.z, x_321.w), x_324);
  let x_326 : vec3<f32> = vec3<f32>(x_325.x, x_325.y, x_325.z);
  let x_327 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_326.x, x_326.y, x_326.z, x_327.w);
  let x_331 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_332 : vec2<f32> = vec2<f32>(x_331.x, x_331.y);
  let x_336 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_332.x, x_332.y));
  let x_337 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_336.x, x_336.y, x_337.z);
  let x_339 : vec3<f32> = u_xlat4;
  let x_341 : vec4<f32> = hlslcc_FragCoord;
  let x_343 : vec2<f32> = (vec2<f32>(x_339.x, x_339.y) * vec2<f32>(x_341.x, x_341.y));
  let x_344 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_343.x, x_343.y, x_344.z);
  let x_348 : f32 = u_xlat4.y;
  let x_351 : f32 = x_44.x_ScaleBiasRt.x;
  let x_354 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat63 = ((x_348 * x_351) + x_354);
  let x_356 : f32 = u_xlat63;
  u_xlat4.z = (-(x_356) + 1.0f);
  let x_360 : f32 = u_xlat1;
  u_xlat63 = ((-(x_360) * 0.959999979f) + 0.959999979f);
  let x_366 : f32 = u_xlat63;
  u_xlat24 = (-(x_366) + 1.0f);
  let x_369 : vec4<f32> = u_xlat0;
  let x_371 : f32 = u_xlat63;
  u_xlat5 = (vec3<f32>(x_369.x, x_369.y, x_369.z) * vec3<f32>(x_371, x_371, x_371));
  let x_374 : vec4<f32> = u_xlat0;
  let x_378 : vec3<f32> = (vec3<f32>(x_374.x, x_374.y, x_374.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_379 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_378.x, x_378.y, x_378.z, x_379.w);
  let x_381 : f32 = u_xlat1;
  let x_383 : vec4<f32> = u_xlat0;
  let x_388 : vec3<f32> = ((vec3<f32>(x_381, x_381, x_381) * vec3<f32>(x_383.x, x_383.y, x_383.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_389 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_388.x, x_388.y, x_388.z, x_389.w);
  let x_392 : f32 = u_xlat0.w;
  u_xlat1 = (-(x_392) + 1.0f);
  let x_395 : f32 = u_xlat1;
  let x_396 : f32 = u_xlat1;
  u_xlat63 = (x_395 * x_396);
  let x_398 : f32 = u_xlat63;
  u_xlat63 = max(x_398, 0.0078125f);
  let x_402 : f32 = u_xlat63;
  let x_403 : f32 = u_xlat63;
  u_xlat64 = (x_402 * x_403);
  let x_407 : f32 = u_xlat0.w;
  let x_408 : f32 = u_xlat24;
  u_xlat60 = (x_407 + x_408);
  let x_410 : f32 = u_xlat60;
  u_xlat60 = clamp(x_410, 0.0f, 1.0f);
  let x_412 : f32 = u_xlat63;
  u_xlat24 = ((x_412 * 4.0f) + 2.0f);
  let x_420 : vec3<f32> = u_xlat4;
  let x_423 : f32 = x_44.x_GlobalMipBias.x;
  let x_424 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_420.x, x_420.z), x_423);
  u_xlat4.x = x_424.x;
  let x_429 : f32 = u_xlat4.x;
  u_xlat44 = (x_429 + -1.0f);
  let x_432 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_433 : f32 = u_xlat44;
  u_xlat44 = ((x_432 * x_433) + 1.0f);
  let x_437 : f32 = u_xlat4.x;
  u_xlat4.x = min(x_437, 1.0f);
  let x_442 : f32 = x_91.x_MainLightShadowParams.y;
  u_xlatb65 = (0.0f < x_442);
  let x_444 : bool = u_xlatb65;
  if (x_444) {
    let x_448 : f32 = x_91.x_MainLightShadowParams.y;
    u_xlatb65 = (x_448 == 1.0f);
    let x_450 : bool = u_xlatb65;
    if (x_450) {
      let x_454 : vec4<f32> = u_xlat2;
      let x_458 : vec4<f32> = x_91.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_454.x, x_454.y, x_454.x, x_454.y) + x_458);
      let x_461 : vec4<f32> = u_xlat6;
      let x_462 : vec2<f32> = vec2<f32>(x_461.x, x_461.y);
      let x_464 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_462.x, x_462.y, x_464);
      let x_477 : vec3<f32> = txVec0;
      let x_479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_477.xy, x_477.z);
      u_xlat7.x = x_479;
      let x_482 : vec4<f32> = u_xlat6;
      let x_483 : vec2<f32> = vec2<f32>(x_482.z, x_482.w);
      let x_485 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_483.x, x_483.y, x_485);
      let x_492 : vec3<f32> = txVec1;
      let x_494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_492.xy, x_492.z);
      u_xlat7.y = x_494;
      let x_496 : vec4<f32> = u_xlat2;
      let x_499 : vec4<f32> = x_91.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_496.x, x_496.y, x_496.x, x_496.y) + x_499);
      let x_502 : vec4<f32> = u_xlat6;
      let x_503 : vec2<f32> = vec2<f32>(x_502.x, x_502.y);
      let x_505 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_503.x, x_503.y, x_505);
      let x_512 : vec3<f32> = txVec2;
      let x_514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_512.xy, x_512.z);
      u_xlat7.z = x_514;
      let x_517 : vec4<f32> = u_xlat6;
      let x_518 : vec2<f32> = vec2<f32>(x_517.z, x_517.w);
      let x_520 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_518.x, x_518.y, x_520);
      let x_527 : vec3<f32> = txVec3;
      let x_529 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_527.xy, x_527.z);
      u_xlat7.w = x_529;
      let x_532 : vec4<f32> = u_xlat7;
      u_xlat65 = dot(x_532, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_539 : f32 = x_91.x_MainLightShadowParams.y;
      u_xlatb6 = (x_539 == 2.0f);
      let x_541 : bool = u_xlatb6;
      if (x_541) {
        let x_544 : vec4<f32> = u_xlat2;
        let x_547 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_552 : vec2<f32> = ((vec2<f32>(x_544.x, x_544.y) * vec2<f32>(x_547.z, x_547.w)) + vec2<f32>(0.5f, 0.5f));
        let x_553 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat6;
        let x_557 : vec2<f32> = floor(vec2<f32>(x_555.x, x_555.y));
        let x_558 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_562 : vec4<f32> = u_xlat2;
        let x_565 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_568 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_562.x, x_562.y) * vec2<f32>(x_565.z, x_565.w)) + -(vec2<f32>(x_568.x, x_568.y)));
        let x_572 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_572.x, x_572.x, x_572.y, x_572.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_577 : vec4<f32> = u_xlat7;
        let x_579 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_577.x, x_577.x, x_577.z, x_577.z) * vec4<f32>(x_579.x, x_579.x, x_579.z, x_579.z));
        let x_582 : vec4<f32> = u_xlat8;
        let x_586 : vec2<f32> = (vec2<f32>(x_582.y, x_582.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_587 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_586.x, x_587.y, x_586.y, x_587.w);
        let x_589 : vec4<f32> = u_xlat8;
        let x_592 : vec2<f32> = u_xlat46;
        let x_594 : vec2<f32> = ((vec2<f32>(x_589.x, x_589.z) * vec2<f32>(0.5f, 0.5f)) + -(x_592));
        let x_595 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_594.x, x_594.y, x_595.z, x_595.w);
        let x_598 : vec2<f32> = u_xlat46;
        u_xlat48 = (-(x_598) + vec2<f32>(1.0f, 1.0f));
        let x_602 : vec2<f32> = u_xlat46;
        let x_604 : vec2<f32> = min(x_602, vec2<f32>(0.0f, 0.0f));
        let x_605 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_604.x, x_604.y, x_605.z, x_605.w);
        let x_607 : vec4<f32> = u_xlat9;
        let x_610 : vec4<f32> = u_xlat9;
        let x_613 : vec2<f32> = u_xlat48;
        let x_614 : vec2<f32> = ((-(vec2<f32>(x_607.x, x_607.y)) * vec2<f32>(x_610.x, x_610.y)) + x_613);
        let x_615 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_614.x, x_614.y, x_615.z, x_615.w);
        let x_617 : vec2<f32> = u_xlat46;
        u_xlat46 = max(x_617, vec2<f32>(0.0f, 0.0f));
        let x_619 : vec2<f32> = u_xlat46;
        let x_621 : vec2<f32> = u_xlat46;
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat46 = ((-(x_619) * x_621) + vec2<f32>(x_623.y, x_623.w));
        let x_626 : vec4<f32> = u_xlat9;
        let x_628 : vec2<f32> = (vec2<f32>(x_626.x, x_626.y) + vec2<f32>(1.0f, 1.0f));
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_628.x, x_628.y, x_629.z, x_629.w);
        let x_631 : vec2<f32> = u_xlat46;
        u_xlat46 = (x_631 + vec2<f32>(1.0f, 1.0f));
        let x_634 : vec4<f32> = u_xlat8;
        let x_638 : vec2<f32> = (vec2<f32>(x_634.x, x_634.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_639 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_638.x, x_638.y, x_639.z, x_639.w);
        let x_641 : vec2<f32> = u_xlat48;
        let x_642 : vec2<f32> = (x_641 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_643 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_642.x, x_642.y, x_643.z, x_643.w);
        let x_645 : vec4<f32> = u_xlat9;
        let x_647 : vec2<f32> = (vec2<f32>(x_645.x, x_645.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_648 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_647.x, x_647.y, x_648.z, x_648.w);
        let x_651 : vec2<f32> = u_xlat46;
        let x_652 : vec2<f32> = (x_651 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_653 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_652.x, x_652.y, x_653.z, x_653.w);
        let x_655 : vec4<f32> = u_xlat7;
        u_xlat46 = (vec2<f32>(x_655.y, x_655.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : f32 = u_xlat9.x;
        u_xlat10.z = x_659;
        let x_662 : f32 = u_xlat46.x;
        u_xlat10.w = x_662;
        let x_665 : f32 = u_xlat11.x;
        u_xlat8.z = x_665;
        let x_668 : f32 = u_xlat7.x;
        u_xlat8.w = x_668;
        let x_671 : vec4<f32> = u_xlat8;
        let x_673 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_671.z, x_671.w, x_671.x, x_671.z) + vec4<f32>(x_673.z, x_673.w, x_673.x, x_673.z));
        let x_677 : f32 = u_xlat10.y;
        u_xlat9.z = x_677;
        let x_680 : f32 = u_xlat46.y;
        u_xlat9.w = x_680;
        let x_683 : f32 = u_xlat8.y;
        u_xlat11.z = x_683;
        let x_686 : f32 = u_xlat7.z;
        u_xlat11.w = x_686;
        let x_688 : vec4<f32> = u_xlat9;
        let x_690 : vec4<f32> = u_xlat11;
        let x_692 : vec3<f32> = (vec3<f32>(x_688.z, x_688.y, x_688.w) + vec3<f32>(x_690.z, x_690.y, x_690.w));
        let x_693 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat8;
        let x_697 : vec4<f32> = u_xlat12;
        let x_699 : vec3<f32> = (vec3<f32>(x_695.x, x_695.z, x_695.w) / vec3<f32>(x_697.z, x_697.w, x_697.y));
        let x_700 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat8;
        let x_708 : vec3<f32> = (vec3<f32>(x_702.x, x_702.y, x_702.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_709 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat11;
        let x_713 : vec4<f32> = u_xlat7;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.z, x_711.y, x_711.w) / vec3<f32>(x_713.x, x_713.y, x_713.z));
        let x_716 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat9;
        let x_720 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_721 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_720.x, x_720.y, x_720.z, x_721.w);
        let x_723 : vec4<f32> = u_xlat8;
        let x_726 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_728 : vec3<f32> = (vec3<f32>(x_723.y, x_723.x, x_723.z) * vec3<f32>(x_726.x, x_726.x, x_726.x));
        let x_729 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
        let x_731 : vec4<f32> = u_xlat9;
        let x_734 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_736 : vec3<f32> = (vec3<f32>(x_731.x, x_731.y, x_731.z) * vec3<f32>(x_734.y, x_734.y, x_734.y));
        let x_737 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_740 : f32 = u_xlat9.x;
        u_xlat8.w = x_740;
        let x_742 : vec4<f32> = u_xlat6;
        let x_745 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_748 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) * vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y)) + vec4<f32>(x_748.y, x_748.w, x_748.x, x_748.w));
        let x_751 : vec4<f32> = u_xlat6;
        let x_754 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_757 : vec4<f32> = u_xlat8;
        u_xlat46 = ((vec2<f32>(x_751.x, x_751.y) * vec2<f32>(x_754.x, x_754.y)) + vec2<f32>(x_757.z, x_757.w));
        let x_761 : f32 = u_xlat8.y;
        u_xlat9.w = x_761;
        let x_763 : vec4<f32> = u_xlat9;
        let x_764 : vec2<f32> = vec2<f32>(x_763.y, x_763.z);
        let x_765 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_765.x, x_764.x, x_765.z, x_764.y);
        let x_767 : vec4<f32> = u_xlat6;
        let x_770 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_767.x, x_767.y, x_767.x, x_767.y) * vec4<f32>(x_770.x, x_770.y, x_770.x, x_770.y)) + vec4<f32>(x_773.x, x_773.y, x_773.z, x_773.y));
        let x_776 : vec4<f32> = u_xlat6;
        let x_779 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_782 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y) * vec4<f32>(x_779.x, x_779.y, x_779.x, x_779.y)) + vec4<f32>(x_782.w, x_782.y, x_782.w, x_782.z));
        let x_785 : vec4<f32> = u_xlat6;
        let x_788 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_791 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y) * vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y)) + vec4<f32>(x_791.x, x_791.w, x_791.z, x_791.w));
        let x_795 : vec4<f32> = u_xlat7;
        let x_797 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_795.x, x_795.x, x_795.x, x_795.y) * vec4<f32>(x_797.z, x_797.w, x_797.y, x_797.z));
        let x_801 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_801.y, x_801.y, x_801.z, x_801.z) * x_803);
        let x_806 : f32 = u_xlat7.z;
        let x_808 : f32 = u_xlat12.y;
        u_xlat6.x = (x_806 * x_808);
        let x_812 : vec4<f32> = u_xlat10;
        let x_813 : vec2<f32> = vec2<f32>(x_812.x, x_812.y);
        let x_815 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_813.x, x_813.y, x_815);
        let x_823 : vec3<f32> = txVec4;
        let x_825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_823.xy, x_823.z);
        u_xlat26 = x_825;
        let x_827 : vec4<f32> = u_xlat10;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_837 : vec3<f32> = txVec5;
        let x_839 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_837.xy, x_837.z);
        u_xlat7.x = x_839;
        let x_842 : f32 = u_xlat7.x;
        let x_844 : f32 = u_xlat13.y;
        u_xlat7.x = (x_842 * x_844);
        let x_848 : f32 = u_xlat13.x;
        let x_849 : f32 = u_xlat26;
        let x_852 : f32 = u_xlat7.x;
        u_xlat26 = ((x_848 * x_849) + x_852);
        let x_855 : vec2<f32> = u_xlat46;
        let x_857 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_855.x, x_855.y, x_857);
        let x_864 : vec3<f32> = txVec6;
        let x_866 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_864.xy, x_864.z);
        u_xlat46.x = x_866;
        let x_869 : f32 = u_xlat13.z;
        let x_871 : f32 = u_xlat46.x;
        let x_873 : f32 = u_xlat26;
        u_xlat26 = ((x_869 * x_871) + x_873);
        let x_876 : vec4<f32> = u_xlat9;
        let x_877 : vec2<f32> = vec2<f32>(x_876.x, x_876.y);
        let x_879 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_877.x, x_877.y, x_879);
        let x_886 : vec3<f32> = txVec7;
        let x_888 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_886.xy, x_886.z);
        u_xlat46.x = x_888;
        let x_891 : f32 = u_xlat13.w;
        let x_893 : f32 = u_xlat46.x;
        let x_895 : f32 = u_xlat26;
        u_xlat26 = ((x_891 * x_893) + x_895);
        let x_898 : vec4<f32> = u_xlat11;
        let x_899 : vec2<f32> = vec2<f32>(x_898.x, x_898.y);
        let x_901 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_899.x, x_899.y, x_901);
        let x_908 : vec3<f32> = txVec8;
        let x_910 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_908.xy, x_908.z);
        u_xlat46.x = x_910;
        let x_913 : f32 = u_xlat14.x;
        let x_915 : f32 = u_xlat46.x;
        let x_917 : f32 = u_xlat26;
        u_xlat26 = ((x_913 * x_915) + x_917);
        let x_920 : vec4<f32> = u_xlat11;
        let x_921 : vec2<f32> = vec2<f32>(x_920.z, x_920.w);
        let x_923 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_921.x, x_921.y, x_923);
        let x_930 : vec3<f32> = txVec9;
        let x_932 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_930.xy, x_930.z);
        u_xlat46.x = x_932;
        let x_935 : f32 = u_xlat14.y;
        let x_937 : f32 = u_xlat46.x;
        let x_939 : f32 = u_xlat26;
        u_xlat26 = ((x_935 * x_937) + x_939);
        let x_942 : vec4<f32> = u_xlat9;
        let x_943 : vec2<f32> = vec2<f32>(x_942.z, x_942.w);
        let x_945 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_943.x, x_943.y, x_945);
        let x_952 : vec3<f32> = txVec10;
        let x_954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_952.xy, x_952.z);
        u_xlat46.x = x_954;
        let x_957 : f32 = u_xlat14.z;
        let x_959 : f32 = u_xlat46.x;
        let x_961 : f32 = u_xlat26;
        u_xlat26 = ((x_957 * x_959) + x_961);
        let x_964 : vec4<f32> = u_xlat8;
        let x_965 : vec2<f32> = vec2<f32>(x_964.x, x_964.y);
        let x_967 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_965.x, x_965.y, x_967);
        let x_974 : vec3<f32> = txVec11;
        let x_976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_974.xy, x_974.z);
        u_xlat46.x = x_976;
        let x_979 : f32 = u_xlat14.w;
        let x_981 : f32 = u_xlat46.x;
        let x_983 : f32 = u_xlat26;
        u_xlat26 = ((x_979 * x_981) + x_983);
        let x_986 : vec4<f32> = u_xlat8;
        let x_987 : vec2<f32> = vec2<f32>(x_986.z, x_986.w);
        let x_989 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_987.x, x_987.y, x_989);
        let x_996 : vec3<f32> = txVec12;
        let x_998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_996.xy, x_996.z);
        u_xlat46.x = x_998;
        let x_1001 : f32 = u_xlat6.x;
        let x_1003 : f32 = u_xlat46.x;
        let x_1005 : f32 = u_xlat26;
        u_xlat65 = ((x_1001 * x_1003) + x_1005);
      } else {
        let x_1008 : vec4<f32> = u_xlat2;
        let x_1011 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1014 : vec2<f32> = ((vec2<f32>(x_1008.x, x_1008.y) * vec2<f32>(x_1011.z, x_1011.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1015 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1014.x, x_1014.y, x_1015.z, x_1015.w);
        let x_1017 : vec4<f32> = u_xlat6;
        let x_1019 : vec2<f32> = floor(vec2<f32>(x_1017.x, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1019.x, x_1019.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat2;
        let x_1025 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1028 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_1022.x, x_1022.y) * vec2<f32>(x_1025.z, x_1025.w)) + -(vec2<f32>(x_1028.x, x_1028.y)));
        let x_1032 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_1032.x, x_1032.x, x_1032.y, x_1032.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1035 : vec4<f32> = u_xlat7;
        let x_1037 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1035.x, x_1035.x, x_1035.z, x_1035.z) * vec4<f32>(x_1037.x, x_1037.x, x_1037.z, x_1037.z));
        let x_1040 : vec4<f32> = u_xlat8;
        let x_1044 : vec2<f32> = (vec2<f32>(x_1040.y, x_1040.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1045 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1045.x, x_1044.x, x_1045.z, x_1044.y);
        let x_1047 : vec4<f32> = u_xlat8;
        let x_1050 : vec2<f32> = u_xlat46;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1047.x, x_1047.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1050));
        let x_1053 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1052.x, x_1053.y, x_1052.y, x_1053.w);
        let x_1055 : vec2<f32> = u_xlat46;
        let x_1057 : vec2<f32> = (-(x_1055) + vec2<f32>(1.0f, 1.0f));
        let x_1058 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1057.x, x_1057.y, x_1058.z, x_1058.w);
        let x_1060 : vec2<f32> = u_xlat46;
        u_xlat48 = min(x_1060, vec2<f32>(0.0f, 0.0f));
        let x_1062 : vec2<f32> = u_xlat48;
        let x_1064 : vec2<f32> = u_xlat48;
        let x_1066 : vec4<f32> = u_xlat8;
        let x_1068 : vec2<f32> = ((-(x_1062) * x_1064) + vec2<f32>(x_1066.x, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1071 : vec2<f32> = u_xlat46;
        u_xlat48 = max(x_1071, vec2<f32>(0.0f, 0.0f));
        let x_1074 : vec2<f32> = u_xlat48;
        let x_1076 : vec2<f32> = u_xlat48;
        let x_1078 : vec4<f32> = u_xlat7;
        let x_1080 : vec2<f32> = ((-(x_1074) * x_1076) + vec2<f32>(x_1078.y, x_1078.w));
        let x_1081 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_1080.x, x_1081.y, x_1080.y);
        let x_1083 : vec4<f32> = u_xlat8;
        let x_1086 : vec2<f32> = (vec2<f32>(x_1083.x, x_1083.y) + vec2<f32>(2.0f, 2.0f));
        let x_1087 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
        let x_1089 : vec3<f32> = u_xlat27;
        let x_1091 : vec2<f32> = (vec2<f32>(x_1089.x, x_1089.z) + vec2<f32>(2.0f, 2.0f));
        let x_1092 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1092.x, x_1091.x, x_1092.z, x_1091.y);
        let x_1095 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1095 * 0.081632003f);
        let x_1099 : vec4<f32> = u_xlat7;
        let x_1102 : vec3<f32> = (vec3<f32>(x_1099.z, x_1099.x, x_1099.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1103 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1102.x, x_1102.y, x_1102.z, x_1103.w);
        let x_1105 : vec4<f32> = u_xlat8;
        let x_1108 : vec2<f32> = (vec2<f32>(x_1105.x, x_1105.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1109 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1108.x, x_1108.y, x_1109.z, x_1109.w);
        let x_1112 : f32 = u_xlat11.y;
        u_xlat10.x = x_1112;
        let x_1114 : vec2<f32> = u_xlat46;
        let x_1121 : vec2<f32> = ((vec2<f32>(x_1114.x, x_1114.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1122 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1122.x, x_1121.x, x_1122.z, x_1121.y);
        let x_1124 : vec2<f32> = u_xlat46;
        let x_1128 : vec2<f32> = ((vec2<f32>(x_1124.x, x_1124.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1129 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1128.x, x_1129.y, x_1128.y, x_1129.w);
        let x_1132 : f32 = u_xlat7.x;
        u_xlat8.y = x_1132;
        let x_1135 : f32 = u_xlat9.y;
        u_xlat8.w = x_1135;
        let x_1137 : vec4<f32> = u_xlat8;
        let x_1138 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1137 + x_1138);
        let x_1140 : vec2<f32> = u_xlat46;
        let x_1143 : vec2<f32> = ((vec2<f32>(x_1140.y, x_1140.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1144 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1144.x, x_1143.x, x_1144.z, x_1143.y);
        let x_1146 : vec2<f32> = u_xlat46;
        let x_1149 : vec2<f32> = ((vec2<f32>(x_1146.y, x_1146.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1150 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1149.x, x_1150.y, x_1149.y, x_1150.w);
        let x_1153 : f32 = u_xlat7.y;
        u_xlat9.y = x_1153;
        let x_1155 : vec4<f32> = u_xlat9;
        let x_1156 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1155 + x_1156);
        let x_1158 : vec4<f32> = u_xlat8;
        let x_1159 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1158 / x_1159);
        let x_1161 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1161 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1167 : vec4<f32> = u_xlat9;
        let x_1168 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1167 / x_1168);
        let x_1170 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1170 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1172 : vec4<f32> = u_xlat8;
        let x_1175 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1172.w, x_1172.x, x_1172.y, x_1172.z) * vec4<f32>(x_1175.x, x_1175.x, x_1175.x, x_1175.x));
        let x_1178 : vec4<f32> = u_xlat9;
        let x_1181 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1178.x, x_1178.w, x_1178.y, x_1178.z) * vec4<f32>(x_1181.y, x_1181.y, x_1181.y, x_1181.y));
        let x_1184 : vec4<f32> = u_xlat8;
        let x_1185 : vec3<f32> = vec3<f32>(x_1184.y, x_1184.z, x_1184.w);
        let x_1186 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1185.x, x_1186.y, x_1185.y, x_1185.z);
        let x_1189 : f32 = u_xlat9.x;
        u_xlat11.y = x_1189;
        let x_1191 : vec4<f32> = u_xlat6;
        let x_1194 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1197 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1191.x, x_1191.y, x_1191.x, x_1191.y) * vec4<f32>(x_1194.x, x_1194.y, x_1194.x, x_1194.y)) + vec4<f32>(x_1197.x, x_1197.y, x_1197.z, x_1197.y));
        let x_1200 : vec4<f32> = u_xlat6;
        let x_1203 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1206 : vec4<f32> = u_xlat11;
        u_xlat46 = ((vec2<f32>(x_1200.x, x_1200.y) * vec2<f32>(x_1203.x, x_1203.y)) + vec2<f32>(x_1206.w, x_1206.y));
        let x_1210 : f32 = u_xlat11.y;
        u_xlat8.y = x_1210;
        let x_1213 : f32 = u_xlat9.z;
        u_xlat11.y = x_1213;
        let x_1215 : vec4<f32> = u_xlat6;
        let x_1218 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1221 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y) * vec4<f32>(x_1218.x, x_1218.y, x_1218.x, x_1218.y)) + vec4<f32>(x_1221.x, x_1221.y, x_1221.z, x_1221.y));
        let x_1224 : vec4<f32> = u_xlat6;
        let x_1227 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1230 : vec4<f32> = u_xlat11;
        let x_1232 : vec2<f32> = ((vec2<f32>(x_1224.x, x_1224.y) * vec2<f32>(x_1227.x, x_1227.y)) + vec2<f32>(x_1230.w, x_1230.y));
        let x_1233 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1232.x, x_1232.y, x_1233.z, x_1233.w);
        let x_1236 : f32 = u_xlat11.y;
        u_xlat8.z = x_1236;
        let x_1239 : vec4<f32> = u_xlat6;
        let x_1242 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1245 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y) * vec4<f32>(x_1242.x, x_1242.y, x_1242.x, x_1242.y)) + vec4<f32>(x_1245.x, x_1245.y, x_1245.x, x_1245.z));
        let x_1249 : f32 = u_xlat9.w;
        u_xlat11.y = x_1249;
        let x_1252 : vec4<f32> = u_xlat6;
        let x_1255 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1258 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1252.x, x_1252.y, x_1252.x, x_1252.y) * vec4<f32>(x_1255.x, x_1255.y, x_1255.x, x_1255.y)) + vec4<f32>(x_1258.x, x_1258.y, x_1258.z, x_1258.y));
        let x_1262 : vec4<f32> = u_xlat6;
        let x_1265 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1268 : vec4<f32> = u_xlat11;
        u_xlat28 = ((vec2<f32>(x_1262.x, x_1262.y) * vec2<f32>(x_1265.x, x_1265.y)) + vec2<f32>(x_1268.w, x_1268.y));
        let x_1272 : f32 = u_xlat11.y;
        u_xlat8.w = x_1272;
        let x_1275 : vec4<f32> = u_xlat6;
        let x_1278 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1281 : vec4<f32> = u_xlat8;
        u_xlat54 = ((vec2<f32>(x_1275.x, x_1275.y) * vec2<f32>(x_1278.x, x_1278.y)) + vec2<f32>(x_1281.x, x_1281.w));
        let x_1284 : vec4<f32> = u_xlat11;
        let x_1285 : vec3<f32> = vec3<f32>(x_1284.x, x_1284.z, x_1284.w);
        let x_1286 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1285.x, x_1286.y, x_1285.y, x_1285.z);
        let x_1288 : vec4<f32> = u_xlat6;
        let x_1291 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1294 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1288.x, x_1288.y, x_1288.x, x_1288.y) * vec4<f32>(x_1291.x, x_1291.y, x_1291.x, x_1291.y)) + vec4<f32>(x_1294.x, x_1294.y, x_1294.z, x_1294.y));
        let x_1298 : vec4<f32> = u_xlat6;
        let x_1301 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1304 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1298.x, x_1298.y) * vec2<f32>(x_1301.x, x_1301.y)) + vec2<f32>(x_1304.w, x_1304.y));
        let x_1308 : f32 = u_xlat8.x;
        u_xlat9.x = x_1308;
        let x_1310 : vec4<f32> = u_xlat6;
        let x_1313 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1316 : vec4<f32> = u_xlat9;
        let x_1318 : vec2<f32> = ((vec2<f32>(x_1310.x, x_1310.y) * vec2<f32>(x_1313.x, x_1313.y)) + vec2<f32>(x_1316.x, x_1316.y));
        let x_1319 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1318.x, x_1318.y, x_1319.z, x_1319.w);
        let x_1322 : vec4<f32> = u_xlat7;
        let x_1324 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1322.x, x_1322.x, x_1322.x, x_1322.x) * x_1324);
        let x_1327 : vec4<f32> = u_xlat7;
        let x_1329 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1327.y, x_1327.y, x_1327.y, x_1327.y) * x_1329);
        let x_1332 : vec4<f32> = u_xlat7;
        let x_1334 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1332.z, x_1332.z, x_1332.z, x_1332.z) * x_1334);
        let x_1336 : vec4<f32> = u_xlat7;
        let x_1338 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1336.w, x_1336.w, x_1336.w, x_1336.w) * x_1338);
        let x_1341 : vec4<f32> = u_xlat12;
        let x_1342 : vec2<f32> = vec2<f32>(x_1341.x, x_1341.y);
        let x_1344 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1342.x, x_1342.y, x_1344);
        let x_1351 : vec3<f32> = txVec13;
        let x_1353 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1351.xy, x_1351.z);
        u_xlat8.x = x_1353;
        let x_1356 : vec4<f32> = u_xlat12;
        let x_1357 : vec2<f32> = vec2<f32>(x_1356.z, x_1356.w);
        let x_1359 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1357.x, x_1357.y, x_1359);
        let x_1367 : vec3<f32> = txVec14;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat68 = x_1369;
        let x_1370 : f32 = u_xlat68;
        let x_1372 : f32 = u_xlat17.y;
        u_xlat68 = (x_1370 * x_1372);
        let x_1375 : f32 = u_xlat17.x;
        let x_1377 : f32 = u_xlat8.x;
        let x_1379 : f32 = u_xlat68;
        u_xlat8.x = ((x_1375 * x_1377) + x_1379);
        let x_1383 : vec2<f32> = u_xlat46;
        let x_1385 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec15;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat46.x = x_1394;
        let x_1397 : f32 = u_xlat17.z;
        let x_1399 : f32 = u_xlat46.x;
        let x_1402 : f32 = u_xlat8.x;
        u_xlat46.x = ((x_1397 * x_1399) + x_1402);
        let x_1406 : vec4<f32> = u_xlat15;
        let x_1407 : vec2<f32> = vec2<f32>(x_1406.x, x_1406.y);
        let x_1409 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1407.x, x_1407.y, x_1409);
        let x_1417 : vec3<f32> = txVec16;
        let x_1419 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1417.xy, x_1417.z);
        u_xlat66 = x_1419;
        let x_1421 : f32 = u_xlat17.w;
        let x_1422 : f32 = u_xlat66;
        let x_1425 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1421 * x_1422) + x_1425);
        let x_1429 : vec4<f32> = u_xlat13;
        let x_1430 : vec2<f32> = vec2<f32>(x_1429.x, x_1429.y);
        let x_1432 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1430.x, x_1430.y, x_1432);
        let x_1439 : vec3<f32> = txVec17;
        let x_1441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1439.xy, x_1439.z);
        u_xlat66 = x_1441;
        let x_1443 : f32 = u_xlat18.x;
        let x_1444 : f32 = u_xlat66;
        let x_1447 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1443 * x_1444) + x_1447);
        let x_1451 : vec4<f32> = u_xlat13;
        let x_1452 : vec2<f32> = vec2<f32>(x_1451.z, x_1451.w);
        let x_1454 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1452.x, x_1452.y, x_1454);
        let x_1461 : vec3<f32> = txVec18;
        let x_1463 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1461.xy, x_1461.z);
        u_xlat66 = x_1463;
        let x_1465 : f32 = u_xlat18.y;
        let x_1466 : f32 = u_xlat66;
        let x_1469 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1465 * x_1466) + x_1469);
        let x_1473 : vec4<f32> = u_xlat14;
        let x_1474 : vec2<f32> = vec2<f32>(x_1473.x, x_1473.y);
        let x_1476 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1474.x, x_1474.y, x_1476);
        let x_1483 : vec3<f32> = txVec19;
        let x_1485 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1483.xy, x_1483.z);
        u_xlat66 = x_1485;
        let x_1487 : f32 = u_xlat18.z;
        let x_1488 : f32 = u_xlat66;
        let x_1491 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1487 * x_1488) + x_1491);
        let x_1495 : vec4<f32> = u_xlat15;
        let x_1496 : vec2<f32> = vec2<f32>(x_1495.z, x_1495.w);
        let x_1498 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1496.x, x_1496.y, x_1498);
        let x_1505 : vec3<f32> = txVec20;
        let x_1507 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1505.xy, x_1505.z);
        u_xlat66 = x_1507;
        let x_1509 : f32 = u_xlat18.w;
        let x_1510 : f32 = u_xlat66;
        let x_1513 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1509 * x_1510) + x_1513);
        let x_1517 : vec4<f32> = u_xlat16;
        let x_1518 : vec2<f32> = vec2<f32>(x_1517.x, x_1517.y);
        let x_1520 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1518.x, x_1518.y, x_1520);
        let x_1527 : vec3<f32> = txVec21;
        let x_1529 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1527.xy, x_1527.z);
        u_xlat66 = x_1529;
        let x_1531 : f32 = u_xlat19.x;
        let x_1532 : f32 = u_xlat66;
        let x_1535 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1531 * x_1532) + x_1535);
        let x_1539 : vec4<f32> = u_xlat16;
        let x_1540 : vec2<f32> = vec2<f32>(x_1539.z, x_1539.w);
        let x_1542 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1540.x, x_1540.y, x_1542);
        let x_1549 : vec3<f32> = txVec22;
        let x_1551 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1549.xy, x_1549.z);
        u_xlat66 = x_1551;
        let x_1553 : f32 = u_xlat19.y;
        let x_1554 : f32 = u_xlat66;
        let x_1557 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1553 * x_1554) + x_1557);
        let x_1561 : vec2<f32> = u_xlat28;
        let x_1563 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1561.x, x_1561.y, x_1563);
        let x_1570 : vec3<f32> = txVec23;
        let x_1572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1570.xy, x_1570.z);
        u_xlat66 = x_1572;
        let x_1574 : f32 = u_xlat19.z;
        let x_1575 : f32 = u_xlat66;
        let x_1578 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1574 * x_1575) + x_1578);
        let x_1582 : vec2<f32> = u_xlat54;
        let x_1584 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1582.x, x_1582.y, x_1584);
        let x_1591 : vec3<f32> = txVec24;
        let x_1593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1591.xy, x_1591.z);
        u_xlat66 = x_1593;
        let x_1595 : f32 = u_xlat19.w;
        let x_1596 : f32 = u_xlat66;
        let x_1599 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1595 * x_1596) + x_1599);
        let x_1603 : vec4<f32> = u_xlat11;
        let x_1604 : vec2<f32> = vec2<f32>(x_1603.x, x_1603.y);
        let x_1606 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1604.x, x_1604.y, x_1606);
        let x_1613 : vec3<f32> = txVec25;
        let x_1615 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1613.xy, x_1613.z);
        u_xlat66 = x_1615;
        let x_1617 : f32 = u_xlat7.x;
        let x_1618 : f32 = u_xlat66;
        let x_1621 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1617 * x_1618) + x_1621);
        let x_1625 : vec4<f32> = u_xlat11;
        let x_1626 : vec2<f32> = vec2<f32>(x_1625.z, x_1625.w);
        let x_1628 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1626.x, x_1626.y, x_1628);
        let x_1635 : vec3<f32> = txVec26;
        let x_1637 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1635.xy, x_1635.z);
        u_xlat66 = x_1637;
        let x_1639 : f32 = u_xlat7.y;
        let x_1640 : f32 = u_xlat66;
        let x_1643 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1639 * x_1640) + x_1643);
        let x_1647 : vec2<f32> = u_xlat49;
        let x_1649 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1647.x, x_1647.y, x_1649);
        let x_1656 : vec3<f32> = txVec27;
        let x_1658 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1656.xy, x_1656.z);
        u_xlat66 = x_1658;
        let x_1660 : f32 = u_xlat7.z;
        let x_1661 : f32 = u_xlat66;
        let x_1664 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1660 * x_1661) + x_1664);
        let x_1668 : vec4<f32> = u_xlat6;
        let x_1669 : vec2<f32> = vec2<f32>(x_1668.x, x_1668.y);
        let x_1671 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1669.x, x_1669.y, x_1671);
        let x_1678 : vec3<f32> = txVec28;
        let x_1680 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1678.xy, x_1678.z);
        u_xlat6.x = x_1680;
        let x_1683 : f32 = u_xlat7.w;
        let x_1685 : f32 = u_xlat6.x;
        let x_1688 : f32 = u_xlat46.x;
        u_xlat65 = ((x_1683 * x_1685) + x_1688);
      }
    }
  } else {
    let x_1692 : vec4<f32> = u_xlat2;
    let x_1693 : vec2<f32> = vec2<f32>(x_1692.x, x_1692.y);
    let x_1695 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1693.x, x_1693.y, x_1695);
    let x_1702 : vec3<f32> = txVec29;
    let x_1704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1702.xy, x_1702.z);
    u_xlat65 = x_1704;
  }
  let x_1706 : f32 = x_91.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1706) + 1.0f);
  let x_1710 : f32 = u_xlat65;
  let x_1712 : f32 = x_91.x_MainLightShadowParams.x;
  let x_1715 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_1710 * x_1712) + x_1715);
  let x_1720 : f32 = u_xlat2.z;
  u_xlatb22 = (0.0f >= x_1720);
  let x_1724 : f32 = u_xlat2.z;
  u_xlatb42 = (x_1724 >= 1.0f);
  let x_1726 : bool = u_xlatb42;
  let x_1727 : bool = u_xlatb22;
  u_xlatb22 = (x_1726 | x_1727);
  let x_1729 : bool = u_xlatb22;
  if (x_1729) {
    x_1730 = 1.0f;
  } else {
    let x_1735 : f32 = u_xlat2.x;
    x_1730 = x_1735;
  }
  let x_1736 : f32 = x_1730;
  u_xlat2.x = x_1736;
  let x_1738 : vec3<f32> = vs_TEXCOORD7;
  let x_1741 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_1743 : vec3<f32> = (x_1738 + -(x_1741));
  let x_1744 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1743.x, x_1743.y, x_1743.z, x_1744.w);
  let x_1746 : vec4<f32> = u_xlat6;
  let x_1748 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(vec3<f32>(x_1746.x, x_1746.y, x_1746.z), vec3<f32>(x_1748.x, x_1748.y, x_1748.z));
  let x_1753 : f32 = u_xlat22.x;
  let x_1755 : f32 = x_91.x_MainLightShadowParams.z;
  let x_1758 : f32 = x_91.x_MainLightShadowParams.w;
  u_xlat22.x = ((x_1753 * x_1755) + x_1758);
  let x_1762 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1762, 0.0f, 1.0f);
  let x_1767 : f32 = u_xlat2.x;
  u_xlat42 = (-(x_1767) + 1.0f);
  let x_1771 : f32 = u_xlat22.x;
  let x_1772 : f32 = u_xlat42;
  let x_1775 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_1771 * x_1772) + x_1775);
  let x_1778 : f32 = u_xlat44;
  let x_1781 : vec4<f32> = x_44.x_MainLightColor;
  let x_1783 : vec3<f32> = (vec3<f32>(x_1778, x_1778, x_1778) * vec3<f32>(x_1781.x, x_1781.y, x_1781.z));
  let x_1784 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1783.x, x_1783.y, x_1783.z, x_1784.w);
  let x_1787 : f32 = vs_TEXCOORD3.w;
  u_xlat7.x = x_1787;
  let x_1791 : f32 = vs_TEXCOORD4.w;
  u_xlat7.y = x_1791;
  let x_1795 : f32 = vs_TEXCOORD5.w;
  u_xlat7.z = x_1795;
  let x_1797 : vec4<f32> = u_xlat7;
  let x_1800 : vec3<f32> = u_xlat21;
  u_xlat22.x = dot(-(vec3<f32>(x_1797.x, x_1797.y, x_1797.z)), x_1800);
  let x_1804 : f32 = u_xlat22.x;
  let x_1806 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1804 + x_1806);
  let x_1809 : vec3<f32> = u_xlat21;
  let x_1810 : vec3<f32> = u_xlat22;
  let x_1814 : vec4<f32> = u_xlat7;
  let x_1817 : vec3<f32> = ((x_1809 * -(vec3<f32>(x_1810.x, x_1810.x, x_1810.x))) + -(vec3<f32>(x_1814.x, x_1814.y, x_1814.z)));
  let x_1818 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1817.x, x_1817.y, x_1817.z, x_1818.w);
  let x_1820 : vec3<f32> = u_xlat21;
  let x_1821 : vec4<f32> = u_xlat7;
  u_xlat22.x = dot(x_1820, vec3<f32>(x_1821.x, x_1821.y, x_1821.z));
  let x_1826 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1826, 0.0f, 1.0f);
  let x_1830 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_1830) + 1.0f);
  let x_1835 : f32 = u_xlat22.x;
  let x_1837 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1835 * x_1837);
  let x_1841 : f32 = u_xlat22.x;
  let x_1843 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1841 * x_1843);
  let x_1846 : f32 = u_xlat1;
  u_xlat42 = ((-(x_1846) * 0.699999988f) + 1.700000048f);
  let x_1852 : f32 = u_xlat1;
  let x_1853 : f32 = u_xlat42;
  u_xlat1 = (x_1852 * x_1853);
  let x_1855 : f32 = u_xlat1;
  u_xlat1 = (x_1855 * 6.0f);
  let x_1866 : vec4<f32> = u_xlat8;
  let x_1868 : f32 = u_xlat1;
  let x_1869 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1866.x, x_1866.y, x_1866.z), x_1868);
  u_xlat8 = x_1869;
  let x_1871 : f32 = u_xlat8.w;
  u_xlat1 = (x_1871 + -1.0f);
  let x_1878 : f32 = x_1876.unity_SpecCube0_HDR.w;
  let x_1879 : f32 = u_xlat1;
  u_xlat1 = ((x_1878 * x_1879) + 1.0f);
  let x_1882 : f32 = u_xlat1;
  u_xlat1 = max(x_1882, 0.0f);
  let x_1884 : f32 = u_xlat1;
  u_xlat1 = log2(x_1884);
  let x_1886 : f32 = u_xlat1;
  let x_1888 : f32 = x_1876.unity_SpecCube0_HDR.y;
  u_xlat1 = (x_1886 * x_1888);
  let x_1890 : f32 = u_xlat1;
  u_xlat1 = exp2(x_1890);
  let x_1892 : f32 = u_xlat1;
  let x_1894 : f32 = x_1876.unity_SpecCube0_HDR.x;
  u_xlat1 = (x_1892 * x_1894);
  let x_1896 : vec4<f32> = u_xlat8;
  let x_1898 : f32 = u_xlat1;
  let x_1900 : vec3<f32> = (vec3<f32>(x_1896.x, x_1896.y, x_1896.z) * vec3<f32>(x_1898, x_1898, x_1898));
  let x_1901 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1900.x, x_1900.y, x_1900.z, x_1901.w);
  let x_1903 : f32 = u_xlat63;
  let x_1905 : f32 = u_xlat63;
  let x_1909 : vec2<f32> = ((vec2<f32>(x_1903, x_1903) * vec2<f32>(x_1905, x_1905)) + vec2<f32>(-1.0f, 1.0f));
  let x_1910 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1909.x, x_1909.y, x_1910.z, x_1910.w);
  let x_1913 : f32 = u_xlat9.y;
  u_xlat1 = (1.0f / x_1913);
  let x_1916 : vec4<f32> = u_xlat0;
  let x_1919 : f32 = u_xlat60;
  u_xlat29 = (-(vec3<f32>(x_1916.x, x_1916.y, x_1916.z)) + vec3<f32>(x_1919, x_1919, x_1919));
  let x_1922 : vec3<f32> = u_xlat22;
  let x_1924 : vec3<f32> = u_xlat29;
  let x_1926 : vec4<f32> = u_xlat0;
  u_xlat29 = ((vec3<f32>(x_1922.x, x_1922.x, x_1922.x) * x_1924) + vec3<f32>(x_1926.x, x_1926.y, x_1926.z));
  let x_1929 : f32 = u_xlat1;
  let x_1931 : vec3<f32> = u_xlat29;
  u_xlat29 = (vec3<f32>(x_1929, x_1929, x_1929) * x_1931);
  let x_1933 : vec4<f32> = u_xlat8;
  let x_1935 : vec3<f32> = u_xlat29;
  let x_1936 : vec3<f32> = (vec3<f32>(x_1933.x, x_1933.y, x_1933.z) * x_1935);
  let x_1937 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1936.x, x_1936.y, x_1936.z, x_1937.w);
  let x_1939 : vec4<f32> = u_xlat3;
  let x_1941 : vec3<f32> = u_xlat5;
  let x_1943 : vec4<f32> = u_xlat8;
  let x_1945 : vec3<f32> = ((vec3<f32>(x_1939.x, x_1939.y, x_1939.z) * x_1941) + vec3<f32>(x_1943.x, x_1943.y, x_1943.z));
  let x_1946 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1945.x, x_1945.y, x_1945.z, x_1946.w);
  let x_1949 : f32 = u_xlat2.x;
  let x_1951 : f32 = x_1876.unity_LightData.z;
  u_xlat60 = (x_1949 * x_1951);
  let x_1953 : vec3<f32> = u_xlat21;
  let x_1955 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat1 = dot(x_1953, vec3<f32>(x_1955.x, x_1955.y, x_1955.z));
  let x_1958 : f32 = u_xlat1;
  u_xlat1 = clamp(x_1958, 0.0f, 1.0f);
  let x_1960 : f32 = u_xlat60;
  let x_1961 : f32 = u_xlat1;
  u_xlat60 = (x_1960 * x_1961);
  let x_1963 : f32 = u_xlat60;
  let x_1965 : vec4<f32> = u_xlat6;
  let x_1967 : vec3<f32> = (vec3<f32>(x_1963, x_1963, x_1963) * vec3<f32>(x_1965.x, x_1965.y, x_1965.z));
  let x_1968 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1967.x, x_1967.y, x_1967.z, x_1968.w);
  let x_1970 : vec4<f32> = u_xlat7;
  let x_1973 : vec4<f32> = x_44.x_MainLightPosition;
  let x_1975 : vec3<f32> = (vec3<f32>(x_1970.x, x_1970.y, x_1970.z) + vec3<f32>(x_1973.x, x_1973.y, x_1973.z));
  let x_1976 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1975.x, x_1975.y, x_1975.z, x_1976.w);
  let x_1978 : vec4<f32> = u_xlat6;
  let x_1980 : vec4<f32> = u_xlat6;
  u_xlat60 = dot(vec3<f32>(x_1978.x, x_1978.y, x_1978.z), vec3<f32>(x_1980.x, x_1980.y, x_1980.z));
  let x_1983 : f32 = u_xlat60;
  u_xlat60 = max(x_1983, 1.17549435e-37f);
  let x_1986 : f32 = u_xlat60;
  u_xlat60 = inverseSqrt(x_1986);
  let x_1988 : f32 = u_xlat60;
  let x_1990 : vec4<f32> = u_xlat6;
  let x_1992 : vec3<f32> = (vec3<f32>(x_1988, x_1988, x_1988) * vec3<f32>(x_1990.x, x_1990.y, x_1990.z));
  let x_1993 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1992.x, x_1992.y, x_1992.z, x_1993.w);
  let x_1995 : vec3<f32> = u_xlat21;
  let x_1996 : vec4<f32> = u_xlat6;
  u_xlat60 = dot(x_1995, vec3<f32>(x_1996.x, x_1996.y, x_1996.z));
  let x_1999 : f32 = u_xlat60;
  u_xlat60 = clamp(x_1999, 0.0f, 1.0f);
  let x_2002 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2004 : vec4<f32> = u_xlat6;
  u_xlat1 = dot(vec3<f32>(x_2002.x, x_2002.y, x_2002.z), vec3<f32>(x_2004.x, x_2004.y, x_2004.z));
  let x_2007 : f32 = u_xlat1;
  u_xlat1 = clamp(x_2007, 0.0f, 1.0f);
  let x_2009 : f32 = u_xlat60;
  let x_2010 : f32 = u_xlat60;
  u_xlat60 = (x_2009 * x_2010);
  let x_2012 : f32 = u_xlat60;
  let x_2014 : f32 = u_xlat9.x;
  u_xlat60 = ((x_2012 * x_2014) + 1.000010014f);
  let x_2018 : f32 = u_xlat1;
  let x_2019 : f32 = u_xlat1;
  u_xlat1 = (x_2018 * x_2019);
  let x_2021 : f32 = u_xlat60;
  let x_2022 : f32 = u_xlat60;
  u_xlat60 = (x_2021 * x_2022);
  let x_2024 : f32 = u_xlat1;
  u_xlat1 = max(x_2024, 0.100000001f);
  let x_2027 : f32 = u_xlat60;
  let x_2028 : f32 = u_xlat1;
  u_xlat60 = (x_2027 * x_2028);
  let x_2030 : f32 = u_xlat24;
  let x_2031 : f32 = u_xlat60;
  u_xlat60 = (x_2030 * x_2031);
  let x_2033 : f32 = u_xlat64;
  let x_2034 : f32 = u_xlat60;
  u_xlat60 = (x_2033 / x_2034);
  let x_2036 : vec4<f32> = u_xlat0;
  let x_2038 : f32 = u_xlat60;
  let x_2041 : vec3<f32> = u_xlat5;
  let x_2042 : vec3<f32> = ((vec3<f32>(x_2036.x, x_2036.y, x_2036.z) * vec3<f32>(x_2038, x_2038, x_2038)) + x_2041);
  let x_2043 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2042.x, x_2042.y, x_2042.z, x_2043.w);
  let x_2045 : vec4<f32> = u_xlat2;
  let x_2047 : vec4<f32> = u_xlat6;
  let x_2049 : vec3<f32> = (vec3<f32>(x_2045.x, x_2045.y, x_2045.z) * vec3<f32>(x_2047.x, x_2047.y, x_2047.z));
  let x_2050 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2049.x, x_2049.y, x_2049.z, x_2050.w);
  let x_2053 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2055 : f32 = x_1876.unity_LightData.y;
  u_xlat60 = min(x_2053, x_2055);
  let x_2058 : f32 = u_xlat60;
  u_xlatu60 = bitcast<u32>(i32(x_2058));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2070 : u32 = u_xlatu_loop_1;
    let x_2071 : u32 = u_xlatu60;
    if ((x_2070 < x_2071)) {
    } else {
      break;
    }
    let x_2074 : u32 = u_xlatu_loop_1;
    u_xlatu63 = (x_2074 >> 2u);
    let x_2077 : u32 = u_xlatu_loop_1;
    u_xlati65 = bitcast<i32>((x_2077 & 3u));
    let x_2080 : u32 = u_xlatu63;
    let x_2083 : vec4<f32> = x_1876.unity_LightIndices[bitcast<i32>(x_2080)];
    let x_2093 : i32 = u_xlati65;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2098 : vec4<u32> = indexable[x_2093];
    u_xlat63 = dot(x_2083, bitcast<vec4<f32>>(x_2098));
    let x_2102 : f32 = u_xlat63;
    u_xlati63 = i32(x_2102);
    let x_2104 : vec3<f32> = vs_TEXCOORD7;
    let x_2116 : i32 = u_xlati63;
    let x_2118 : vec4<f32> = x_2115.x_AdditionalLightsPosition[x_2116];
    let x_2121 : i32 = u_xlati63;
    let x_2123 : vec4<f32> = x_2115.x_AdditionalLightsPosition[x_2121];
    let x_2125 : vec3<f32> = ((-(x_2104) * vec3<f32>(x_2118.w, x_2118.w, x_2118.w)) + vec3<f32>(x_2123.x, x_2123.y, x_2123.z));
    let x_2126 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2125.x, x_2125.y, x_2125.z, x_2126.w);
    let x_2128 : vec4<f32> = u_xlat8;
    let x_2130 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(vec3<f32>(x_2128.x, x_2128.y, x_2128.z), vec3<f32>(x_2130.x, x_2130.y, x_2130.z));
    let x_2133 : f32 = u_xlat65;
    u_xlat65 = max(x_2133, 6.10351562e-05f);
    let x_2136 : f32 = u_xlat65;
    u_xlat66 = inverseSqrt(x_2136);
    let x_2138 : f32 = u_xlat66;
    let x_2140 : vec4<f32> = u_xlat8;
    u_xlat29 = (vec3<f32>(x_2138, x_2138, x_2138) * vec3<f32>(x_2140.x, x_2140.y, x_2140.z));
    let x_2144 : f32 = u_xlat65;
    u_xlat67 = (1.0f / x_2144);
    let x_2146 : f32 = u_xlat65;
    let x_2147 : i32 = u_xlati63;
    let x_2149 : f32 = x_2115.x_AdditionalLightsAttenuation[x_2147].x;
    u_xlat65 = (x_2146 * x_2149);
    let x_2151 : f32 = u_xlat65;
    let x_2153 : f32 = u_xlat65;
    u_xlat65 = ((-(x_2151) * x_2153) + 1.0f);
    let x_2156 : f32 = u_xlat65;
    u_xlat65 = max(x_2156, 0.0f);
    let x_2158 : f32 = u_xlat65;
    let x_2159 : f32 = u_xlat65;
    u_xlat65 = (x_2158 * x_2159);
    let x_2161 : f32 = u_xlat65;
    let x_2162 : f32 = u_xlat67;
    u_xlat65 = (x_2161 * x_2162);
    let x_2164 : i32 = u_xlati63;
    let x_2166 : vec4<f32> = x_2115.x_AdditionalLightsSpotDir[x_2164];
    let x_2168 : vec3<f32> = u_xlat29;
    u_xlat67 = dot(vec3<f32>(x_2166.x, x_2166.y, x_2166.z), x_2168);
    let x_2170 : f32 = u_xlat67;
    let x_2171 : i32 = u_xlati63;
    let x_2173 : f32 = x_2115.x_AdditionalLightsAttenuation[x_2171].z;
    let x_2175 : i32 = u_xlati63;
    let x_2177 : f32 = x_2115.x_AdditionalLightsAttenuation[x_2175].w;
    u_xlat67 = ((x_2170 * x_2173) + x_2177);
    let x_2179 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2179, 0.0f, 1.0f);
    let x_2181 : f32 = u_xlat67;
    let x_2182 : f32 = u_xlat67;
    u_xlat67 = (x_2181 * x_2182);
    let x_2184 : f32 = u_xlat65;
    let x_2185 : f32 = u_xlat67;
    u_xlat65 = (x_2184 * x_2185);
    let x_2187 : f32 = u_xlat44;
    let x_2189 : i32 = u_xlati63;
    let x_2191 : vec4<f32> = x_2115.x_AdditionalLightsColor[x_2189];
    let x_2193 : vec3<f32> = (vec3<f32>(x_2187, x_2187, x_2187) * vec3<f32>(x_2191.x, x_2191.y, x_2191.z));
    let x_2194 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2193.x, x_2193.y, x_2193.z, x_2194.w);
    let x_2196 : vec3<f32> = u_xlat21;
    let x_2197 : vec3<f32> = u_xlat29;
    u_xlat63 = dot(x_2196, x_2197);
    let x_2199 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2199, 0.0f, 1.0f);
    let x_2201 : f32 = u_xlat63;
    let x_2202 : f32 = u_xlat65;
    u_xlat63 = (x_2201 * x_2202);
    let x_2204 : f32 = u_xlat63;
    let x_2206 : vec4<f32> = u_xlat10;
    let x_2208 : vec3<f32> = (vec3<f32>(x_2204, x_2204, x_2204) * vec3<f32>(x_2206.x, x_2206.y, x_2206.z));
    let x_2209 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2208.x, x_2208.y, x_2208.z, x_2209.w);
    let x_2211 : vec4<f32> = u_xlat8;
    let x_2213 : f32 = u_xlat66;
    let x_2216 : vec4<f32> = u_xlat7;
    let x_2218 : vec3<f32> = ((vec3<f32>(x_2211.x, x_2211.y, x_2211.z) * vec3<f32>(x_2213, x_2213, x_2213)) + vec3<f32>(x_2216.x, x_2216.y, x_2216.z));
    let x_2219 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2218.x, x_2218.y, x_2218.z, x_2219.w);
    let x_2221 : vec4<f32> = u_xlat8;
    let x_2223 : vec4<f32> = u_xlat8;
    u_xlat63 = dot(vec3<f32>(x_2221.x, x_2221.y, x_2221.z), vec3<f32>(x_2223.x, x_2223.y, x_2223.z));
    let x_2226 : f32 = u_xlat63;
    u_xlat63 = max(x_2226, 1.17549435e-37f);
    let x_2228 : f32 = u_xlat63;
    u_xlat63 = inverseSqrt(x_2228);
    let x_2230 : f32 = u_xlat63;
    let x_2232 : vec4<f32> = u_xlat8;
    let x_2234 : vec3<f32> = (vec3<f32>(x_2230, x_2230, x_2230) * vec3<f32>(x_2232.x, x_2232.y, x_2232.z));
    let x_2235 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2234.x, x_2234.y, x_2234.z, x_2235.w);
    let x_2237 : vec3<f32> = u_xlat21;
    let x_2238 : vec4<f32> = u_xlat8;
    u_xlat63 = dot(x_2237, vec3<f32>(x_2238.x, x_2238.y, x_2238.z));
    let x_2241 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2241, 0.0f, 1.0f);
    let x_2243 : vec3<f32> = u_xlat29;
    let x_2244 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(x_2243, vec3<f32>(x_2244.x, x_2244.y, x_2244.z));
    let x_2247 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2247, 0.0f, 1.0f);
    let x_2249 : f32 = u_xlat63;
    let x_2250 : f32 = u_xlat63;
    u_xlat63 = (x_2249 * x_2250);
    let x_2252 : f32 = u_xlat63;
    let x_2254 : f32 = u_xlat9.x;
    u_xlat63 = ((x_2252 * x_2254) + 1.000010014f);
    let x_2257 : f32 = u_xlat65;
    let x_2258 : f32 = u_xlat65;
    u_xlat65 = (x_2257 * x_2258);
    let x_2260 : f32 = u_xlat63;
    let x_2261 : f32 = u_xlat63;
    u_xlat63 = (x_2260 * x_2261);
    let x_2263 : f32 = u_xlat65;
    u_xlat65 = max(x_2263, 0.100000001f);
    let x_2265 : f32 = u_xlat63;
    let x_2266 : f32 = u_xlat65;
    u_xlat63 = (x_2265 * x_2266);
    let x_2268 : f32 = u_xlat24;
    let x_2269 : f32 = u_xlat63;
    u_xlat63 = (x_2268 * x_2269);
    let x_2271 : f32 = u_xlat64;
    let x_2272 : f32 = u_xlat63;
    u_xlat63 = (x_2271 / x_2272);
    let x_2274 : vec4<f32> = u_xlat0;
    let x_2276 : f32 = u_xlat63;
    let x_2279 : vec3<f32> = u_xlat5;
    let x_2280 : vec3<f32> = ((vec3<f32>(x_2274.x, x_2274.y, x_2274.z) * vec3<f32>(x_2276, x_2276, x_2276)) + x_2279);
    let x_2281 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2280.x, x_2280.y, x_2280.z, x_2281.w);
    let x_2283 : vec4<f32> = u_xlat8;
    let x_2285 : vec4<f32> = u_xlat10;
    let x_2288 : vec4<f32> = u_xlat6;
    let x_2290 : vec3<f32> = ((vec3<f32>(x_2283.x, x_2283.y, x_2283.z) * vec3<f32>(x_2285.x, x_2285.y, x_2285.z)) + vec3<f32>(x_2288.x, x_2288.y, x_2288.z));
    let x_2291 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2290.x, x_2290.y, x_2290.z, x_2291.w);

    continuing {
      let x_2293 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2293 + bitcast<u32>(1i));
    }
  }
  let x_2295 : vec4<f32> = u_xlat3;
  let x_2297 : vec3<f32> = u_xlat4;
  let x_2300 : vec4<f32> = u_xlat2;
  let x_2302 : vec3<f32> = ((vec3<f32>(x_2295.x, x_2295.y, x_2295.z) * vec3<f32>(x_2297.x, x_2297.x, x_2297.x)) + vec3<f32>(x_2300.x, x_2300.y, x_2300.z));
  let x_2303 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2302.x, x_2302.y, x_2302.z, x_2303.w);
  let x_2305 : vec4<f32> = u_xlat6;
  let x_2307 : vec4<f32> = u_xlat0;
  let x_2309 : vec3<f32> = (vec3<f32>(x_2305.x, x_2305.y, x_2305.z) + vec3<f32>(x_2307.x, x_2307.y, x_2307.z));
  let x_2310 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2309.x, x_2309.y, x_2309.z, x_2310.w);
  let x_2312 : f32 = u_xlat62;
  let x_2313 : f32 = u_xlat62;
  u_xlat60 = (x_2312 * -(x_2313));
  let x_2316 : f32 = u_xlat60;
  u_xlat60 = exp2(x_2316);
  let x_2318 : vec4<f32> = u_xlat0;
  let x_2322 : vec4<f32> = x_44.unity_FogColor;
  let x_2325 : vec3<f32> = (vec3<f32>(x_2318.x, x_2318.y, x_2318.z) + -(vec3<f32>(x_2322.x, x_2322.y, x_2322.z)));
  let x_2326 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2325.x, x_2325.y, x_2325.z, x_2326.w);
  let x_2330 : f32 = u_xlat60;
  let x_2332 : vec4<f32> = u_xlat0;
  let x_2336 : vec4<f32> = x_44.unity_FogColor;
  let x_2338 : vec3<f32> = ((vec3<f32>(x_2330, x_2330, x_2330) * vec3<f32>(x_2332.x, x_2332.y, x_2332.z)) + vec3<f32>(x_2336.x, x_2336.y, x_2336.z));
  let x_2339 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2338.x, x_2338.y, x_2338.z, x_2339.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD3_param : vec4<f32>, @location(4) vs_TEXCOORD7_param : vec3<f32>, @location(2) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD5_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  main_1();
  return main_out(SV_Target0);
}

