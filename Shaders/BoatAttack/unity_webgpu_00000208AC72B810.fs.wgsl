struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3150 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3610 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3719 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1678 : f32;
  var x_1691 : f32;
  var x_1703 : f32;
  var u_xlat68 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var x_3216 : f32;
  var x_3228 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4012 : f32;
  var x_4025 : f32;
  var x_4077 : f32;
  var x_4088 : vec3<f32>;
  var x_4269 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1658 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1658 == 0.0f);
  let x_1661 : vec3<f32> = vs_INTERP0;
  let x_1665 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1661) + x_1665);
  let x_1667 : vec3<f32> = u_xlat25;
  let x_1668 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1667, x_1668);
  let x_1670 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1670);
  let x_1672 : f32 = u_xlat64;
  let x_1674 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1672, x_1672, x_1672) * x_1674);
  let x_1677 : bool = u_xlatb22.x;
  if (x_1677) {
    let x_1682 : f32 = u_xlat25.x;
    x_1678 = x_1682;
  } else {
    let x_1686 : f32 = x_66.unity_MatrixV[0i].z;
    x_1678 = x_1686;
  }
  let x_1687 : f32 = x_1678;
  u_xlat5.x = x_1687;
  let x_1690 : bool = u_xlatb22.x;
  if (x_1690) {
    let x_1695 : f32 = u_xlat25.y;
    x_1691 = x_1695;
  } else {
    let x_1698 : f32 = x_66.unity_MatrixV[1i].z;
    x_1691 = x_1698;
  }
  let x_1699 : f32 = x_1691;
  u_xlat5.y = x_1699;
  let x_1702 : bool = u_xlatb22.x;
  if (x_1702) {
    let x_1707 : f32 = u_xlat25.z;
    x_1703 = x_1707;
  } else {
    let x_1710 : f32 = x_66.unity_MatrixV[2i].z;
    x_1703 = x_1710;
  }
  let x_1711 : f32 = x_1703;
  u_xlat5.z = x_1711;
  let x_1720 : vec2<f32> = vs_INTERP5;
  let x_1722 : f32 = x_66.x_GlobalMipBias.x;
  let x_1723 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1720, x_1722);
  u_xlat6 = x_1723;
  let x_1728 : vec2<f32> = vs_INTERP5;
  let x_1730 : f32 = x_66.x_GlobalMipBias.x;
  let x_1731 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1728, x_1730);
  u_xlat25 = vec3<f32>(x_1731.x, x_1731.y, x_1731.z);
  let x_1733 : vec4<f32> = u_xlat6;
  let x_1736 : vec3<f32> = (vec3<f32>(x_1733.x, x_1733.y, x_1733.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1737 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1736.x, x_1736.y, x_1736.z, x_1737.w);
  let x_1739 : vec3<f32> = u_xlat24;
  let x_1740 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(x_1739, vec3<f32>(x_1740.x, x_1740.y, x_1740.z));
  let x_1745 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1745 + 0.5f);
  let x_1748 : vec3<f32> = u_xlat22;
  let x_1750 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1748.x, x_1748.x, x_1748.x) * x_1750);
  let x_1753 : f32 = u_xlat6.w;
  u_xlat22.x = max(x_1753, 0.0001f);
  let x_1756 : vec3<f32> = u_xlat25;
  let x_1757 : vec3<f32> = u_xlat22;
  u_xlat25 = (x_1756 / vec3<f32>(x_1757.x, x_1757.x, x_1757.x));
  let x_1761 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1762 : vec2<f32> = vec2<f32>(x_1761.x, x_1761.y);
  let x_1766 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1762.x, x_1762.y));
  let x_1767 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_1766.x, x_1767.y, x_1766.y);
  let x_1769 : vec3<f32> = u_xlat22;
  let x_1771 : vec4<f32> = hlslcc_FragCoord;
  let x_1773 : vec2<f32> = (vec2<f32>(x_1769.x, x_1769.z) * vec2<f32>(x_1771.x, x_1771.y));
  let x_1774 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1773.x, x_1773.y, x_1774.z, x_1774.w);
  let x_1777 : f32 = u_xlat6.y;
  let x_1779 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1782 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat22.x = ((x_1777 * x_1779) + x_1782);
  let x_1786 : f32 = u_xlat22.x;
  u_xlat6.z = (-(x_1786) + 1.0f);
  let x_1791 : f32 = u_xlat3.x;
  u_xlat3.x = x_1791;
  let x_1794 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1794, 0.0f, 1.0f);
  let x_1798 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1798, 1.0f);
  let x_1801 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1801 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1806 : f32 = u_xlat3.x;
  u_xlat22.x = (-(x_1806) + 1.0f);
  let x_1811 : f32 = u_xlat22.x;
  let x_1813 : f32 = u_xlat22.x;
  u_xlat64 = (x_1811 * x_1813);
  let x_1815 : f32 = u_xlat64;
  u_xlat64 = max(x_1815, 0.0078125f);
  let x_1818 : f32 = u_xlat64;
  let x_1819 : f32 = u_xlat64;
  u_xlat65 = (x_1818 * x_1819);
  let x_1822 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1822 + 0.040000021f);
  let x_1827 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1827, 1.0f);
  let x_1831 : f32 = u_xlat64;
  u_xlat68 = ((x_1831 * 4.0f) + 2.0f);
  let x_1840 : vec4<f32> = u_xlat6;
  let x_1843 : f32 = x_66.x_GlobalMipBias.x;
  let x_1844 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1840.x, x_1840.z), x_1843);
  u_xlat6.x = x_1844.x;
  let x_1848 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1848 + -1.0f);
  let x_1853 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1855 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1853 * x_1855) + 1.0f);
  let x_1860 : f32 = u_xlat6.x;
  let x_1862 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1860, x_1862);
  let x_1865 : bool = u_xlatb63;
  if (x_1865) {
    let x_1869 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1869 == 1.0f);
    let x_1871 : bool = u_xlatb63;
    if (x_1871) {
      let x_1875 : vec4<f32> = vs_INTERP9;
      let x_1878 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1875.x, x_1875.y, x_1875.x, x_1875.y) + x_1878);
      let x_1881 : vec4<f32> = u_xlat7;
      let x_1882 : vec2<f32> = vec2<f32>(x_1881.x, x_1881.y);
      let x_1884 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1882.x, x_1882.y, x_1884);
      let x_1891 : vec3<f32> = txVec30;
      let x_1893 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1891.xy, x_1891.z);
      u_xlat8.x = x_1893;
      let x_1896 : vec4<f32> = u_xlat7;
      let x_1897 : vec2<f32> = vec2<f32>(x_1896.z, x_1896.w);
      let x_1899 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1897.x, x_1897.y, x_1899);
      let x_1906 : vec3<f32> = txVec31;
      let x_1908 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1906.xy, x_1906.z);
      u_xlat8.y = x_1908;
      let x_1910 : vec4<f32> = vs_INTERP9;
      let x_1913 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1910.x, x_1910.y, x_1910.x, x_1910.y) + x_1913);
      let x_1916 : vec4<f32> = u_xlat7;
      let x_1917 : vec2<f32> = vec2<f32>(x_1916.x, x_1916.y);
      let x_1919 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1917.x, x_1917.y, x_1919);
      let x_1926 : vec3<f32> = txVec32;
      let x_1928 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1926.xy, x_1926.z);
      u_xlat8.z = x_1928;
      let x_1931 : vec4<f32> = u_xlat7;
      let x_1932 : vec2<f32> = vec2<f32>(x_1931.z, x_1931.w);
      let x_1934 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1932.x, x_1932.y, x_1934);
      let x_1941 : vec3<f32> = txVec33;
      let x_1943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1941.xy, x_1941.z);
      u_xlat8.w = x_1943;
      let x_1945 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1945, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1952 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_1952 == 2.0f);
      let x_1956 : bool = u_xlatb48.x;
      if (x_1956) {
        let x_1960 : vec4<f32> = vs_INTERP9;
        let x_1963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1960.x, x_1960.y) * vec2<f32>(x_1963.z, x_1963.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1967 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1967);
        let x_1969 : vec4<f32> = vs_INTERP9;
        let x_1972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1975 : vec2<f32> = u_xlat48;
        let x_1977 : vec2<f32> = ((vec2<f32>(x_1969.x, x_1969.y) * vec2<f32>(x_1972.z, x_1972.w)) + -(x_1975));
        let x_1978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1977.x, x_1977.y, x_1978.z, x_1978.w);
        let x_1980 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1980.x, x_1980.x, x_1980.y, x_1980.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1983 : vec4<f32> = u_xlat8;
        let x_1985 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1983.x, x_1983.x, x_1983.z, x_1983.z) * vec4<f32>(x_1985.x, x_1985.x, x_1985.z, x_1985.z));
        let x_1988 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1988.y, x_1988.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1991 : vec4<f32> = u_xlat9;
        let x_1994 : vec4<f32> = u_xlat7;
        let x_1997 : vec2<f32> = ((vec2<f32>(x_1991.x, x_1991.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1994.x, x_1994.y)));
        let x_1998 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1997.x, x_1998.y, x_1997.y, x_1998.w);
        let x_2000 : vec4<f32> = u_xlat7;
        let x_2003 : vec2<f32> = (-(vec2<f32>(x_2000.x, x_2000.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2004 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2003.x, x_2003.y, x_2004.z, x_2004.w);
        let x_2007 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2007.x, x_2007.y), vec2<f32>(0.0f, 0.0f));
        let x_2010 : vec2<f32> = u_xlat51;
        let x_2012 : vec2<f32> = u_xlat51;
        let x_2014 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2010) * x_2012) + vec2<f32>(x_2014.x, x_2014.y));
        let x_2017 : vec4<f32> = u_xlat7;
        let x_2019 : vec2<f32> = max(vec2<f32>(x_2017.x, x_2017.y), vec2<f32>(0.0f, 0.0f));
        let x_2020 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2019.x, x_2019.y, x_2020.z, x_2020.w);
        let x_2022 : vec4<f32> = u_xlat7;
        let x_2025 : vec4<f32> = u_xlat7;
        let x_2028 : vec4<f32> = u_xlat8;
        let x_2030 : vec2<f32> = ((-(vec2<f32>(x_2022.x, x_2022.y)) * vec2<f32>(x_2025.x, x_2025.y)) + vec2<f32>(x_2028.y, x_2028.w));
        let x_2031 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2030.x, x_2030.y, x_2031.z, x_2031.w);
        let x_2033 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2033 + vec2<f32>(1.0f, 1.0f));
        let x_2035 : vec4<f32> = u_xlat7;
        let x_2037 : vec2<f32> = (vec2<f32>(x_2035.x, x_2035.y) + vec2<f32>(1.0f, 1.0f));
        let x_2038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2037.x, x_2037.y, x_2038.z, x_2038.w);
        let x_2040 : vec4<f32> = u_xlat8;
        let x_2042 : vec2<f32> = (vec2<f32>(x_2040.x, x_2040.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2043 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2042.x, x_2042.y, x_2043.z, x_2043.w);
        let x_2045 : vec4<f32> = u_xlat9;
        let x_2047 : vec2<f32> = (vec2<f32>(x_2045.x, x_2045.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2048 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2047.x, x_2047.y, x_2048.z, x_2048.w);
        let x_2050 : vec2<f32> = u_xlat51;
        let x_2051 : vec2<f32> = (x_2050 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2052 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2051.x, x_2051.y, x_2052.z, x_2052.w);
        let x_2054 : vec4<f32> = u_xlat7;
        let x_2056 : vec2<f32> = (vec2<f32>(x_2054.x, x_2054.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2057 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2056.x, x_2056.y, x_2057.z, x_2057.w);
        let x_2059 : vec4<f32> = u_xlat8;
        let x_2061 : vec2<f32> = (vec2<f32>(x_2059.y, x_2059.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2062 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2061.x, x_2061.y, x_2062.z, x_2062.w);
        let x_2065 : f32 = u_xlat9.x;
        u_xlat10.z = x_2065;
        let x_2068 : f32 = u_xlat7.x;
        u_xlat10.w = x_2068;
        let x_2071 : f32 = u_xlat12.x;
        u_xlat11.z = x_2071;
        let x_2074 : f32 = u_xlat49.x;
        u_xlat11.w = x_2074;
        let x_2076 : vec4<f32> = u_xlat10;
        let x_2078 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2076.z, x_2076.w, x_2076.x, x_2076.z) + vec4<f32>(x_2078.z, x_2078.w, x_2078.x, x_2078.z));
        let x_2082 : f32 = u_xlat10.y;
        u_xlat9.z = x_2082;
        let x_2085 : f32 = u_xlat7.y;
        u_xlat9.w = x_2085;
        let x_2088 : f32 = u_xlat11.y;
        u_xlat12.z = x_2088;
        let x_2091 : f32 = u_xlat49.y;
        u_xlat12.w = x_2091;
        let x_2093 : vec4<f32> = u_xlat9;
        let x_2095 : vec4<f32> = u_xlat12;
        let x_2097 : vec3<f32> = (vec3<f32>(x_2093.z, x_2093.y, x_2093.w) + vec3<f32>(x_2095.z, x_2095.y, x_2095.w));
        let x_2098 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2097.x, x_2097.y, x_2097.z, x_2098.w);
        let x_2100 : vec4<f32> = u_xlat11;
        let x_2102 : vec4<f32> = u_xlat8;
        let x_2104 : vec3<f32> = (vec3<f32>(x_2100.x, x_2100.z, x_2100.w) / vec3<f32>(x_2102.z, x_2102.w, x_2102.y));
        let x_2105 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2104.x, x_2104.y, x_2104.z, x_2105.w);
        let x_2107 : vec4<f32> = u_xlat9;
        let x_2109 : vec3<f32> = (vec3<f32>(x_2107.x, x_2107.y, x_2107.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2110 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2109.x, x_2109.y, x_2109.z, x_2110.w);
        let x_2112 : vec4<f32> = u_xlat12;
        let x_2114 : vec4<f32> = u_xlat7;
        let x_2116 : vec3<f32> = (vec3<f32>(x_2112.z, x_2112.y, x_2112.w) / vec3<f32>(x_2114.x, x_2114.y, x_2114.z));
        let x_2117 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2116.x, x_2116.y, x_2116.z, x_2117.w);
        let x_2119 : vec4<f32> = u_xlat10;
        let x_2121 : vec3<f32> = (vec3<f32>(x_2119.x, x_2119.y, x_2119.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2122 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2121.x, x_2121.y, x_2121.z, x_2122.w);
        let x_2124 : vec4<f32> = u_xlat9;
        let x_2127 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2129 : vec3<f32> = (vec3<f32>(x_2124.y, x_2124.x, x_2124.z) * vec3<f32>(x_2127.x, x_2127.x, x_2127.x));
        let x_2130 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2129.x, x_2129.y, x_2129.z, x_2130.w);
        let x_2132 : vec4<f32> = u_xlat10;
        let x_2135 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2137 : vec3<f32> = (vec3<f32>(x_2132.x, x_2132.y, x_2132.z) * vec3<f32>(x_2135.y, x_2135.y, x_2135.y));
        let x_2138 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2137.x, x_2137.y, x_2137.z, x_2138.w);
        let x_2141 : f32 = u_xlat10.x;
        u_xlat9.w = x_2141;
        let x_2143 : vec2<f32> = u_xlat48;
        let x_2146 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2149 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2143.x, x_2143.y, x_2143.x, x_2143.y) * vec4<f32>(x_2146.x, x_2146.y, x_2146.x, x_2146.y)) + vec4<f32>(x_2149.y, x_2149.w, x_2149.x, x_2149.w));
        let x_2152 : vec2<f32> = u_xlat48;
        let x_2154 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2157 : vec4<f32> = u_xlat9;
        let x_2159 : vec2<f32> = ((x_2152 * vec2<f32>(x_2154.x, x_2154.y)) + vec2<f32>(x_2157.z, x_2157.w));
        let x_2160 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2159.x, x_2159.y, x_2160.z, x_2160.w);
        let x_2163 : f32 = u_xlat9.y;
        u_xlat10.w = x_2163;
        let x_2165 : vec4<f32> = u_xlat10;
        let x_2166 : vec2<f32> = vec2<f32>(x_2165.y, x_2165.z);
        let x_2167 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2167.x, x_2166.x, x_2167.z, x_2166.y);
        let x_2169 : vec2<f32> = u_xlat48;
        let x_2172 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2175 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2169.x, x_2169.y, x_2169.x, x_2169.y) * vec4<f32>(x_2172.x, x_2172.y, x_2172.x, x_2172.y)) + vec4<f32>(x_2175.x, x_2175.y, x_2175.z, x_2175.y));
        let x_2178 : vec2<f32> = u_xlat48;
        let x_2181 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2184 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2178.x, x_2178.y, x_2178.x, x_2178.y) * vec4<f32>(x_2181.x, x_2181.y, x_2181.x, x_2181.y)) + vec4<f32>(x_2184.w, x_2184.y, x_2184.w, x_2184.z));
        let x_2187 : vec2<f32> = u_xlat48;
        let x_2190 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2193 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2187.x, x_2187.y, x_2187.x, x_2187.y) * vec4<f32>(x_2190.x, x_2190.y, x_2190.x, x_2190.y)) + vec4<f32>(x_2193.x, x_2193.w, x_2193.z, x_2193.w));
        let x_2196 : vec4<f32> = u_xlat7;
        let x_2198 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2196.x, x_2196.x, x_2196.x, x_2196.y) * vec4<f32>(x_2198.z, x_2198.w, x_2198.y, x_2198.z));
        let x_2201 : vec4<f32> = u_xlat7;
        let x_2203 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2201.y, x_2201.y, x_2201.z, x_2201.z) * x_2203);
        let x_2206 : f32 = u_xlat7.z;
        let x_2208 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2206 * x_2208);
        let x_2212 : vec4<f32> = u_xlat11;
        let x_2213 : vec2<f32> = vec2<f32>(x_2212.x, x_2212.y);
        let x_2215 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2213.x, x_2213.y, x_2215);
        let x_2223 : vec3<f32> = txVec34;
        let x_2225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2223.xy, x_2223.z);
        u_xlat69 = x_2225;
        let x_2227 : vec4<f32> = u_xlat11;
        let x_2228 : vec2<f32> = vec2<f32>(x_2227.z, x_2227.w);
        let x_2230 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2228.x, x_2228.y, x_2230);
        let x_2237 : vec3<f32> = txVec35;
        let x_2239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2237.xy, x_2237.z);
        u_xlat7.x = x_2239;
        let x_2242 : f32 = u_xlat7.x;
        let x_2244 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2242 * x_2244);
        let x_2248 : f32 = u_xlat14.x;
        let x_2249 : f32 = u_xlat69;
        let x_2252 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2248 * x_2249) + x_2252);
        let x_2255 : vec4<f32> = u_xlat12;
        let x_2256 : vec2<f32> = vec2<f32>(x_2255.x, x_2255.y);
        let x_2258 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2256.x, x_2256.y, x_2258);
        let x_2265 : vec3<f32> = txVec36;
        let x_2267 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2265.xy, x_2265.z);
        u_xlat7.x = x_2267;
        let x_2270 : f32 = u_xlat14.z;
        let x_2272 : f32 = u_xlat7.x;
        let x_2274 : f32 = u_xlat69;
        u_xlat69 = ((x_2270 * x_2272) + x_2274);
        let x_2277 : vec4<f32> = u_xlat10;
        let x_2278 : vec2<f32> = vec2<f32>(x_2277.x, x_2277.y);
        let x_2280 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2278.x, x_2278.y, x_2280);
        let x_2287 : vec3<f32> = txVec37;
        let x_2289 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2287.xy, x_2287.z);
        u_xlat7.x = x_2289;
        let x_2292 : f32 = u_xlat14.w;
        let x_2294 : f32 = u_xlat7.x;
        let x_2296 : f32 = u_xlat69;
        u_xlat69 = ((x_2292 * x_2294) + x_2296);
        let x_2299 : vec4<f32> = u_xlat13;
        let x_2300 : vec2<f32> = vec2<f32>(x_2299.x, x_2299.y);
        let x_2302 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2300.x, x_2300.y, x_2302);
        let x_2309 : vec3<f32> = txVec38;
        let x_2311 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2309.xy, x_2309.z);
        u_xlat7.x = x_2311;
        let x_2314 : f32 = u_xlat15.x;
        let x_2316 : f32 = u_xlat7.x;
        let x_2318 : f32 = u_xlat69;
        u_xlat69 = ((x_2314 * x_2316) + x_2318);
        let x_2321 : vec4<f32> = u_xlat13;
        let x_2322 : vec2<f32> = vec2<f32>(x_2321.z, x_2321.w);
        let x_2324 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2322.x, x_2322.y, x_2324);
        let x_2331 : vec3<f32> = txVec39;
        let x_2333 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2331.xy, x_2331.z);
        u_xlat7.x = x_2333;
        let x_2336 : f32 = u_xlat15.y;
        let x_2338 : f32 = u_xlat7.x;
        let x_2340 : f32 = u_xlat69;
        u_xlat69 = ((x_2336 * x_2338) + x_2340);
        let x_2343 : vec4<f32> = u_xlat10;
        let x_2344 : vec2<f32> = vec2<f32>(x_2343.z, x_2343.w);
        let x_2346 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2344.x, x_2344.y, x_2346);
        let x_2353 : vec3<f32> = txVec40;
        let x_2355 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2353.xy, x_2353.z);
        u_xlat7.x = x_2355;
        let x_2358 : f32 = u_xlat15.z;
        let x_2360 : f32 = u_xlat7.x;
        let x_2362 : f32 = u_xlat69;
        u_xlat69 = ((x_2358 * x_2360) + x_2362);
        let x_2365 : vec4<f32> = u_xlat9;
        let x_2366 : vec2<f32> = vec2<f32>(x_2365.x, x_2365.y);
        let x_2368 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2366.x, x_2366.y, x_2368);
        let x_2375 : vec3<f32> = txVec41;
        let x_2377 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2375.xy, x_2375.z);
        u_xlat7.x = x_2377;
        let x_2380 : f32 = u_xlat15.w;
        let x_2382 : f32 = u_xlat7.x;
        let x_2384 : f32 = u_xlat69;
        u_xlat69 = ((x_2380 * x_2382) + x_2384);
        let x_2387 : vec4<f32> = u_xlat9;
        let x_2388 : vec2<f32> = vec2<f32>(x_2387.z, x_2387.w);
        let x_2390 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2388.x, x_2388.y, x_2390);
        let x_2397 : vec3<f32> = txVec42;
        let x_2399 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2397.xy, x_2397.z);
        u_xlat7.x = x_2399;
        let x_2402 : f32 = u_xlat48.x;
        let x_2404 : f32 = u_xlat7.x;
        let x_2406 : f32 = u_xlat69;
        u_xlat63 = ((x_2402 * x_2404) + x_2406);
      } else {
        let x_2409 : vec4<f32> = vs_INTERP9;
        let x_2412 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2409.x, x_2409.y) * vec2<f32>(x_2412.z, x_2412.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2416 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2416);
        let x_2418 : vec4<f32> = vs_INTERP9;
        let x_2421 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2424 : vec2<f32> = u_xlat48;
        let x_2426 : vec2<f32> = ((vec2<f32>(x_2418.x, x_2418.y) * vec2<f32>(x_2421.z, x_2421.w)) + -(x_2424));
        let x_2427 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2426.x, x_2426.y, x_2427.z, x_2427.w);
        let x_2429 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2429.x, x_2429.x, x_2429.y, x_2429.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2432 : vec4<f32> = u_xlat8;
        let x_2434 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2432.x, x_2432.x, x_2432.z, x_2432.z) * vec4<f32>(x_2434.x, x_2434.x, x_2434.z, x_2434.z));
        let x_2437 : vec4<f32> = u_xlat9;
        let x_2439 : vec2<f32> = (vec2<f32>(x_2437.y, x_2437.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2440 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2440.x, x_2439.x, x_2440.z, x_2439.y);
        let x_2442 : vec4<f32> = u_xlat9;
        let x_2445 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2442.x, x_2442.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2445.x, x_2445.y)));
        let x_2449 : vec4<f32> = u_xlat7;
        let x_2452 : vec2<f32> = (-(vec2<f32>(x_2449.x, x_2449.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2453 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2452.x, x_2453.y, x_2452.y, x_2453.w);
        let x_2455 : vec4<f32> = u_xlat7;
        let x_2457 : vec2<f32> = min(vec2<f32>(x_2455.x, x_2455.y), vec2<f32>(0.0f, 0.0f));
        let x_2458 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2457.x, x_2457.y, x_2458.z, x_2458.w);
        let x_2460 : vec4<f32> = u_xlat9;
        let x_2463 : vec4<f32> = u_xlat9;
        let x_2466 : vec4<f32> = u_xlat8;
        let x_2468 : vec2<f32> = ((-(vec2<f32>(x_2460.x, x_2460.y)) * vec2<f32>(x_2463.x, x_2463.y)) + vec2<f32>(x_2466.x, x_2466.z));
        let x_2469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2468.x, x_2469.y, x_2468.y, x_2469.w);
        let x_2471 : vec4<f32> = u_xlat7;
        let x_2473 : vec2<f32> = max(vec2<f32>(x_2471.x, x_2471.y), vec2<f32>(0.0f, 0.0f));
        let x_2474 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2473.x, x_2473.y, x_2474.z, x_2474.w);
        let x_2476 : vec4<f32> = u_xlat9;
        let x_2479 : vec4<f32> = u_xlat9;
        let x_2482 : vec4<f32> = u_xlat8;
        let x_2484 : vec2<f32> = ((-(vec2<f32>(x_2476.x, x_2476.y)) * vec2<f32>(x_2479.x, x_2479.y)) + vec2<f32>(x_2482.y, x_2482.w));
        let x_2485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2485.x, x_2484.x, x_2485.z, x_2484.y);
        let x_2487 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2487 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2490 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2490 * 0.081632003f);
        let x_2493 : vec2<f32> = u_xlat49;
        let x_2495 : vec2<f32> = (vec2<f32>(x_2493.y, x_2493.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2496 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2495.x, x_2495.y, x_2496.z, x_2496.w);
        let x_2498 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2498.x, x_2498.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2502 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2502 * 0.081632003f);
        let x_2506 : f32 = u_xlat11.y;
        u_xlat9.x = x_2506;
        let x_2508 : vec4<f32> = u_xlat7;
        let x_2511 : vec2<f32> = ((vec2<f32>(x_2508.x, x_2508.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2512 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2512.x, x_2511.x, x_2512.z, x_2511.y);
        let x_2514 : vec4<f32> = u_xlat7;
        let x_2517 : vec2<f32> = ((vec2<f32>(x_2514.x, x_2514.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2518 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2517.x, x_2518.y, x_2517.y, x_2518.w);
        let x_2521 : f32 = u_xlat49.x;
        u_xlat8.y = x_2521;
        let x_2524 : f32 = u_xlat10.y;
        u_xlat8.w = x_2524;
        let x_2526 : vec4<f32> = u_xlat8;
        let x_2527 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2526 + x_2527);
        let x_2529 : vec4<f32> = u_xlat7;
        let x_2532 : vec2<f32> = ((vec2<f32>(x_2529.y, x_2529.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2533 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2533.x, x_2532.x, x_2533.z, x_2532.y);
        let x_2535 : vec4<f32> = u_xlat7;
        let x_2538 : vec2<f32> = ((vec2<f32>(x_2535.y, x_2535.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2539 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2538.x, x_2539.y, x_2538.y, x_2539.w);
        let x_2542 : f32 = u_xlat49.y;
        u_xlat10.y = x_2542;
        let x_2544 : vec4<f32> = u_xlat10;
        let x_2545 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2544 + x_2545);
        let x_2547 : vec4<f32> = u_xlat8;
        let x_2548 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2547 / x_2548);
        let x_2550 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2550 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2552 : vec4<f32> = u_xlat10;
        let x_2553 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2552 / x_2553);
        let x_2555 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2555 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2557 : vec4<f32> = u_xlat8;
        let x_2560 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2557.w, x_2557.x, x_2557.y, x_2557.z) * vec4<f32>(x_2560.x, x_2560.x, x_2560.x, x_2560.x));
        let x_2563 : vec4<f32> = u_xlat10;
        let x_2566 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2563.x, x_2563.w, x_2563.y, x_2563.z) * vec4<f32>(x_2566.y, x_2566.y, x_2566.y, x_2566.y));
        let x_2569 : vec4<f32> = u_xlat8;
        let x_2570 : vec3<f32> = vec3<f32>(x_2569.y, x_2569.z, x_2569.w);
        let x_2571 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2570.x, x_2571.y, x_2570.y, x_2570.z);
        let x_2574 : f32 = u_xlat10.x;
        u_xlat11.y = x_2574;
        let x_2576 : vec2<f32> = u_xlat48;
        let x_2579 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2582 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2576.x, x_2576.y, x_2576.x, x_2576.y) * vec4<f32>(x_2579.x, x_2579.y, x_2579.x, x_2579.y)) + vec4<f32>(x_2582.x, x_2582.y, x_2582.z, x_2582.y));
        let x_2585 : vec2<f32> = u_xlat48;
        let x_2587 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2590 : vec4<f32> = u_xlat11;
        let x_2592 : vec2<f32> = ((x_2585 * vec2<f32>(x_2587.x, x_2587.y)) + vec2<f32>(x_2590.w, x_2590.y));
        let x_2593 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2592.x, x_2592.y, x_2593.z, x_2593.w);
        let x_2596 : f32 = u_xlat11.y;
        u_xlat8.y = x_2596;
        let x_2599 : f32 = u_xlat10.z;
        u_xlat11.y = x_2599;
        let x_2601 : vec2<f32> = u_xlat48;
        let x_2604 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2607 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2601.x, x_2601.y, x_2601.x, x_2601.y) * vec4<f32>(x_2604.x, x_2604.y, x_2604.x, x_2604.y)) + vec4<f32>(x_2607.x, x_2607.y, x_2607.z, x_2607.y));
        let x_2610 : vec2<f32> = u_xlat48;
        let x_2612 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2615 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2610 * vec2<f32>(x_2612.x, x_2612.y)) + vec2<f32>(x_2615.w, x_2615.y));
        let x_2619 : f32 = u_xlat11.y;
        u_xlat8.z = x_2619;
        let x_2621 : vec2<f32> = u_xlat48;
        let x_2624 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2627 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2621.x, x_2621.y, x_2621.x, x_2621.y) * vec4<f32>(x_2624.x, x_2624.y, x_2624.x, x_2624.y)) + vec4<f32>(x_2627.x, x_2627.y, x_2627.x, x_2627.z));
        let x_2631 : f32 = u_xlat10.w;
        u_xlat11.y = x_2631;
        let x_2633 : vec2<f32> = u_xlat48;
        let x_2636 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2639 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2633.x, x_2633.y, x_2633.x, x_2633.y) * vec4<f32>(x_2636.x, x_2636.y, x_2636.x, x_2636.y)) + vec4<f32>(x_2639.x, x_2639.y, x_2639.z, x_2639.y));
        let x_2643 : vec2<f32> = u_xlat48;
        let x_2645 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2648 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2643 * vec2<f32>(x_2645.x, x_2645.y)) + vec2<f32>(x_2648.w, x_2648.y));
        let x_2652 : f32 = u_xlat11.y;
        u_xlat8.w = x_2652;
        let x_2654 : vec2<f32> = u_xlat48;
        let x_2656 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2659 : vec4<f32> = u_xlat8;
        let x_2661 : vec2<f32> = ((x_2654 * vec2<f32>(x_2656.x, x_2656.y)) + vec2<f32>(x_2659.x, x_2659.w));
        let x_2662 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2661.x, x_2661.y, x_2662.z, x_2662.w);
        let x_2664 : vec4<f32> = u_xlat11;
        let x_2665 : vec3<f32> = vec3<f32>(x_2664.x, x_2664.z, x_2664.w);
        let x_2666 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2665.x, x_2666.y, x_2665.y, x_2665.z);
        let x_2668 : vec2<f32> = u_xlat48;
        let x_2671 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2674 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2668.x, x_2668.y, x_2668.x, x_2668.y) * vec4<f32>(x_2671.x, x_2671.y, x_2671.x, x_2671.y)) + vec4<f32>(x_2674.x, x_2674.y, x_2674.z, x_2674.y));
        let x_2678 : vec2<f32> = u_xlat48;
        let x_2680 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2683 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2678 * vec2<f32>(x_2680.x, x_2680.y)) + vec2<f32>(x_2683.w, x_2683.y));
        let x_2687 : f32 = u_xlat8.x;
        u_xlat10.x = x_2687;
        let x_2689 : vec2<f32> = u_xlat48;
        let x_2691 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2694 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2689 * vec2<f32>(x_2691.x, x_2691.y)) + vec2<f32>(x_2694.x, x_2694.y));
        let x_2697 : vec4<f32> = u_xlat7;
        let x_2699 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2697.x, x_2697.x, x_2697.x, x_2697.x) * x_2699);
        let x_2702 : vec4<f32> = u_xlat7;
        let x_2704 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2702.y, x_2702.y, x_2702.y, x_2702.y) * x_2704);
        let x_2707 : vec4<f32> = u_xlat7;
        let x_2709 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2707.z, x_2707.z, x_2707.z, x_2707.z) * x_2709);
        let x_2711 : vec4<f32> = u_xlat7;
        let x_2713 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2711.w, x_2711.w, x_2711.w, x_2711.w) * x_2713);
        let x_2716 : vec4<f32> = u_xlat12;
        let x_2717 : vec2<f32> = vec2<f32>(x_2716.x, x_2716.y);
        let x_2719 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2717.x, x_2717.y, x_2719);
        let x_2726 : vec3<f32> = txVec43;
        let x_2728 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2726.xy, x_2726.z);
        u_xlat8.x = x_2728;
        let x_2731 : vec4<f32> = u_xlat12;
        let x_2732 : vec2<f32> = vec2<f32>(x_2731.z, x_2731.w);
        let x_2734 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2732.x, x_2732.y, x_2734);
        let x_2742 : vec3<f32> = txVec44;
        let x_2744 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2742.xy, x_2742.z);
        u_xlat71 = x_2744;
        let x_2745 : f32 = u_xlat71;
        let x_2747 : f32 = u_xlat18.y;
        u_xlat71 = (x_2745 * x_2747);
        let x_2750 : f32 = u_xlat18.x;
        let x_2752 : f32 = u_xlat8.x;
        let x_2754 : f32 = u_xlat71;
        u_xlat8.x = ((x_2750 * x_2752) + x_2754);
        let x_2758 : vec4<f32> = u_xlat13;
        let x_2759 : vec2<f32> = vec2<f32>(x_2758.x, x_2758.y);
        let x_2761 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2759.x, x_2759.y, x_2761);
        let x_2768 : vec3<f32> = txVec45;
        let x_2770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2768.xy, x_2768.z);
        u_xlat71 = x_2770;
        let x_2772 : f32 = u_xlat18.z;
        let x_2773 : f32 = u_xlat71;
        let x_2776 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2772 * x_2773) + x_2776);
        let x_2780 : vec4<f32> = u_xlat15;
        let x_2781 : vec2<f32> = vec2<f32>(x_2780.x, x_2780.y);
        let x_2783 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2781.x, x_2781.y, x_2783);
        let x_2790 : vec3<f32> = txVec46;
        let x_2792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2790.xy, x_2790.z);
        u_xlat71 = x_2792;
        let x_2794 : f32 = u_xlat18.w;
        let x_2795 : f32 = u_xlat71;
        let x_2798 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2794 * x_2795) + x_2798);
        let x_2802 : vec4<f32> = u_xlat14;
        let x_2803 : vec2<f32> = vec2<f32>(x_2802.x, x_2802.y);
        let x_2805 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2803.x, x_2803.y, x_2805);
        let x_2812 : vec3<f32> = txVec47;
        let x_2814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2812.xy, x_2812.z);
        u_xlat71 = x_2814;
        let x_2816 : f32 = u_xlat19.x;
        let x_2817 : f32 = u_xlat71;
        let x_2820 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2816 * x_2817) + x_2820);
        let x_2824 : vec4<f32> = u_xlat14;
        let x_2825 : vec2<f32> = vec2<f32>(x_2824.z, x_2824.w);
        let x_2827 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2825.x, x_2825.y, x_2827);
        let x_2834 : vec3<f32> = txVec48;
        let x_2836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2834.xy, x_2834.z);
        u_xlat71 = x_2836;
        let x_2838 : f32 = u_xlat19.y;
        let x_2839 : f32 = u_xlat71;
        let x_2842 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2838 * x_2839) + x_2842);
        let x_2846 : vec2<f32> = u_xlat55;
        let x_2848 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2846.x, x_2846.y, x_2848);
        let x_2855 : vec3<f32> = txVec49;
        let x_2857 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2855.xy, x_2855.z);
        u_xlat71 = x_2857;
        let x_2859 : f32 = u_xlat19.z;
        let x_2860 : f32 = u_xlat71;
        let x_2863 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2859 * x_2860) + x_2863);
        let x_2867 : vec4<f32> = u_xlat15;
        let x_2868 : vec2<f32> = vec2<f32>(x_2867.z, x_2867.w);
        let x_2870 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2868.x, x_2868.y, x_2870);
        let x_2877 : vec3<f32> = txVec50;
        let x_2879 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2877.xy, x_2877.z);
        u_xlat71 = x_2879;
        let x_2881 : f32 = u_xlat19.w;
        let x_2882 : f32 = u_xlat71;
        let x_2885 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2881 * x_2882) + x_2885);
        let x_2889 : vec4<f32> = u_xlat16;
        let x_2890 : vec2<f32> = vec2<f32>(x_2889.x, x_2889.y);
        let x_2892 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2890.x, x_2890.y, x_2892);
        let x_2899 : vec3<f32> = txVec51;
        let x_2901 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2899.xy, x_2899.z);
        u_xlat71 = x_2901;
        let x_2903 : f32 = u_xlat20.x;
        let x_2904 : f32 = u_xlat71;
        let x_2907 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2903 * x_2904) + x_2907);
        let x_2911 : vec4<f32> = u_xlat16;
        let x_2912 : vec2<f32> = vec2<f32>(x_2911.z, x_2911.w);
        let x_2914 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2912.x, x_2912.y, x_2914);
        let x_2921 : vec3<f32> = txVec52;
        let x_2923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2921.xy, x_2921.z);
        u_xlat71 = x_2923;
        let x_2925 : f32 = u_xlat20.y;
        let x_2926 : f32 = u_xlat71;
        let x_2929 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2925 * x_2926) + x_2929);
        let x_2933 : vec2<f32> = u_xlat29;
        let x_2935 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2933.x, x_2933.y, x_2935);
        let x_2942 : vec3<f32> = txVec53;
        let x_2944 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2942.xy, x_2942.z);
        u_xlat29.x = x_2944;
        let x_2947 : f32 = u_xlat20.z;
        let x_2949 : f32 = u_xlat29.x;
        let x_2952 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2947 * x_2949) + x_2952);
        let x_2956 : vec4<f32> = u_xlat17;
        let x_2957 : vec2<f32> = vec2<f32>(x_2956.x, x_2956.y);
        let x_2959 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2957.x, x_2957.y, x_2959);
        let x_2966 : vec3<f32> = txVec54;
        let x_2968 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2966.xy, x_2966.z);
        u_xlat29.x = x_2968;
        let x_2971 : f32 = u_xlat20.w;
        let x_2973 : f32 = u_xlat29.x;
        let x_2976 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2971 * x_2973) + x_2976);
        let x_2980 : vec4<f32> = u_xlat11;
        let x_2981 : vec2<f32> = vec2<f32>(x_2980.x, x_2980.y);
        let x_2983 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2981.x, x_2981.y, x_2983);
        let x_2990 : vec3<f32> = txVec55;
        let x_2992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2990.xy, x_2990.z);
        u_xlat29.x = x_2992;
        let x_2995 : f32 = u_xlat7.x;
        let x_2997 : f32 = u_xlat29.x;
        let x_3000 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_2995 * x_2997) + x_3000);
        let x_3004 : vec4<f32> = u_xlat11;
        let x_3005 : vec2<f32> = vec2<f32>(x_3004.z, x_3004.w);
        let x_3007 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3005.x, x_3005.y, x_3007);
        let x_3014 : vec3<f32> = txVec56;
        let x_3016 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3014.xy, x_3014.z);
        u_xlat8.x = x_3016;
        let x_3019 : f32 = u_xlat7.y;
        let x_3021 : f32 = u_xlat8.x;
        let x_3024 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3019 * x_3021) + x_3024);
        let x_3028 : vec2<f32> = u_xlat52;
        let x_3030 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3028.x, x_3028.y, x_3030);
        let x_3037 : vec3<f32> = txVec57;
        let x_3039 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3037.xy, x_3037.z);
        u_xlat28.x = x_3039;
        let x_3042 : f32 = u_xlat7.z;
        let x_3044 : f32 = u_xlat28.x;
        let x_3047 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3042 * x_3044) + x_3047);
        let x_3051 : vec2<f32> = u_xlat48;
        let x_3053 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3051.x, x_3051.y, x_3053);
        let x_3060 : vec3<f32> = txVec58;
        let x_3062 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3060.xy, x_3060.z);
        u_xlat48.x = x_3062;
        let x_3065 : f32 = u_xlat7.w;
        let x_3067 : f32 = u_xlat48.x;
        let x_3070 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3065 * x_3067) + x_3070);
      }
    }
  } else {
    let x_3074 : vec4<f32> = vs_INTERP9;
    let x_3075 : vec2<f32> = vec2<f32>(x_3074.x, x_3074.y);
    let x_3077 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3075.x, x_3075.y, x_3077);
    let x_3084 : vec3<f32> = txVec59;
    let x_3086 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3084.xy, x_3084.z);
    u_xlat63 = x_3086;
  }
  let x_3087 : f32 = u_xlat63;
  let x_3089 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3092 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3087 * x_3089) + x_3092);
  let x_3096 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3096);
  let x_3099 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3099 >= 1.0f);
  let x_3102 : bool = u_xlatb4;
  let x_3104 : bool = u_xlatb48.x;
  u_xlatb4 = (x_3102 | x_3104);
  let x_3106 : bool = u_xlatb4;
  let x_3107 : f32 = u_xlat63;
  u_xlat63 = select(x_3107, 1.0f, x_3106);
  let x_3109 : vec3<f32> = vs_INTERP0;
  let x_3111 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3113 : vec3<f32> = (x_3109 + -(x_3111));
  let x_3114 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3113.x, x_3113.y, x_3113.z, x_3114.w);
  let x_3116 : vec4<f32> = u_xlat7;
  let x_3118 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3116.x, x_3116.y, x_3116.z), vec3<f32>(x_3118.x, x_3118.y, x_3118.z));
  let x_3123 : f32 = u_xlat4.x;
  let x_3125 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3128 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3123 * x_3125) + x_3128);
  let x_3132 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3132, 0.0f, 1.0f);
  let x_3135 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3135) + 1.0f);
  let x_3140 : f32 = u_xlat4.x;
  let x_3142 : f32 = u_xlat48.x;
  let x_3144 : f32 = u_xlat63;
  u_xlat63 = ((x_3140 * x_3142) + x_3144);
  let x_3152 : f32 = x_3150.x_MainLightCookieTextureFormat;
  u_xlatb4 = !((x_3152 == -1.0f));
  let x_3154 : bool = u_xlatb4;
  if (x_3154) {
    let x_3157 : vec3<f32> = vs_INTERP0;
    let x_3160 : vec4<f32> = x_3150.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3157.y, x_3157.y) * vec2<f32>(x_3160.x, x_3160.y));
    let x_3164 : vec4<f32> = x_3150.x_MainLightWorldToLight[0i];
    let x_3166 : vec3<f32> = vs_INTERP0;
    let x_3169 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3164.x, x_3164.y) * vec2<f32>(x_3166.x, x_3166.x)) + x_3169);
    let x_3172 : vec4<f32> = x_3150.x_MainLightWorldToLight[2i];
    let x_3174 : vec3<f32> = vs_INTERP0;
    let x_3177 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3172.x, x_3172.y) * vec2<f32>(x_3174.z, x_3174.z)) + x_3177);
    let x_3179 : vec2<f32> = u_xlat48;
    let x_3181 : vec4<f32> = x_3150.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3179 + vec2<f32>(x_3181.x, x_3181.y));
    let x_3184 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3184 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3192 : vec2<f32> = u_xlat48;
    let x_3194 : f32 = x_66.x_GlobalMipBias.x;
    let x_3195 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3192, x_3194);
    u_xlat7 = x_3195;
    let x_3197 : f32 = x_3150.x_MainLightCookieTextureFormat;
    let x_3199 : f32 = x_3150.x_MainLightCookieTextureFormat;
    let x_3201 : f32 = x_3150.x_MainLightCookieTextureFormat;
    let x_3203 : f32 = x_3150.x_MainLightCookieTextureFormat;
    let x_3204 : vec4<f32> = vec4<f32>(x_3197, x_3199, x_3201, x_3203);
    let x_3212 : vec4<bool> = (vec4<f32>(x_3204.x, x_3204.y, x_3204.z, x_3204.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3212.x, x_3212.y);
    let x_3215 : bool = u_xlatb48.y;
    if (x_3215) {
      let x_3220 : f32 = u_xlat7.w;
      x_3216 = x_3220;
    } else {
      let x_3223 : f32 = u_xlat7.x;
      x_3216 = x_3223;
    }
    let x_3224 : f32 = x_3216;
    u_xlat4.x = x_3224;
    let x_3227 : bool = u_xlatb48.x;
    if (x_3227) {
      let x_3231 : vec4<f32> = u_xlat7;
      x_3228 = vec3<f32>(x_3231.x, x_3231.y, x_3231.z);
    } else {
      let x_3234 : vec4<f32> = u_xlat4;
      x_3228 = vec3<f32>(x_3234.x, x_3234.x, x_3234.x);
    }
    let x_3236 : vec3<f32> = x_3228;
    let x_3237 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3236.x, x_3236.y, x_3236.z, x_3237.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3243 : vec4<f32> = u_xlat7;
  let x_3246 : vec4<f32> = x_66.x_MainLightColor;
  let x_3248 : vec3<f32> = (vec3<f32>(x_3243.x, x_3243.y, x_3243.z) * vec3<f32>(x_3246.x, x_3246.y, x_3246.z));
  let x_3249 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3248.x, x_3248.y, x_3248.z, x_3249.w);
  let x_3251 : vec3<f32> = u_xlat27;
  let x_3253 : vec4<f32> = u_xlat7;
  let x_3255 : vec3<f32> = (vec3<f32>(x_3251.x, x_3251.x, x_3251.x) * vec3<f32>(x_3253.x, x_3253.y, x_3253.z));
  let x_3256 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3255.x, x_3255.y, x_3255.z, x_3256.w);
  let x_3258 : vec4<f32> = u_xlat5;
  let x_3261 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(vec3<f32>(x_3258.x, x_3258.y, x_3258.z)), x_3261);
  let x_3265 : f32 = u_xlat4.x;
  let x_3267 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3265 + x_3267);
  let x_3270 : vec3<f32> = u_xlat24;
  let x_3271 : vec4<f32> = u_xlat4;
  let x_3275 : vec4<f32> = u_xlat5;
  let x_3278 : vec3<f32> = ((x_3270 * -(vec3<f32>(x_3271.x, x_3271.x, x_3271.x))) + -(vec3<f32>(x_3275.x, x_3275.y, x_3275.z)));
  let x_3279 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3278.x, x_3278.y, x_3278.z, x_3279.w);
  let x_3281 : vec3<f32> = u_xlat24;
  let x_3282 : vec4<f32> = u_xlat5;
  u_xlat4.x = dot(x_3281, vec3<f32>(x_3282.x, x_3282.y, x_3282.z));
  let x_3287 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3287, 0.0f, 1.0f);
  let x_3291 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3291) + 1.0f);
  let x_3296 : f32 = u_xlat4.x;
  let x_3298 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3296 * x_3298);
  let x_3302 : f32 = u_xlat4.x;
  let x_3304 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3302 * x_3304);
  let x_3308 : f32 = u_xlat22.x;
  u_xlat48.x = ((-(x_3308) * 0.699999988f) + 1.700000048f);
  let x_3316 : f32 = u_xlat22.x;
  let x_3318 : f32 = u_xlat48.x;
  u_xlat22.x = (x_3316 * x_3318);
  let x_3322 : f32 = u_xlat22.x;
  u_xlat22.x = (x_3322 * 6.0f);
  let x_3334 : vec4<f32> = u_xlat8;
  let x_3337 : f32 = u_xlat22.x;
  let x_3338 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3334.x, x_3334.y, x_3334.z), x_3337);
  u_xlat8 = x_3338;
  let x_3340 : f32 = u_xlat8.w;
  u_xlat22.x = (x_3340 + -1.0f);
  let x_3344 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3346 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_3344 * x_3346) + 1.0f);
  let x_3351 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_3351, 0.0f);
  let x_3355 : f32 = u_xlat22.x;
  u_xlat22.x = log2(x_3355);
  let x_3359 : f32 = u_xlat22.x;
  let x_3361 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat22.x = (x_3359 * x_3361);
  let x_3365 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_3365);
  let x_3369 : f32 = u_xlat22.x;
  let x_3371 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat22.x = (x_3369 * x_3371);
  let x_3374 : vec4<f32> = u_xlat8;
  let x_3376 : vec3<f32> = u_xlat22;
  let x_3378 : vec3<f32> = (vec3<f32>(x_3374.x, x_3374.y, x_3374.z) * vec3<f32>(x_3376.x, x_3376.x, x_3376.x));
  let x_3379 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3378.x, x_3378.y, x_3378.z, x_3379.w);
  let x_3381 : f32 = u_xlat64;
  let x_3383 : f32 = u_xlat64;
  let x_3387 : vec2<f32> = ((vec2<f32>(x_3381, x_3381) * vec2<f32>(x_3383, x_3383)) + vec2<f32>(-1.0f, 1.0f));
  let x_3388 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_3387.x, x_3388.y, x_3387.y);
  let x_3391 : f32 = u_xlat22.z;
  u_xlat64 = (1.0f / x_3391);
  let x_3394 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3394 + -0.039999999f);
  let x_3399 : f32 = u_xlat4.x;
  let x_3401 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3399 * x_3401) + 0.039999999f);
  let x_3406 : f32 = u_xlat64;
  let x_3408 : f32 = u_xlat3.x;
  u_xlat64 = (x_3406 * x_3408);
  let x_3410 : f32 = u_xlat64;
  let x_3412 : vec4<f32> = u_xlat8;
  let x_3414 : vec3<f32> = (vec3<f32>(x_3410, x_3410, x_3410) * vec3<f32>(x_3412.x, x_3412.y, x_3412.z));
  let x_3415 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3414.x, x_3414.y, x_3414.z, x_3415.w);
  let x_3417 : vec3<f32> = u_xlat25;
  let x_3418 : vec3<f32> = u_xlat2;
  let x_3420 : vec4<f32> = u_xlat8;
  let x_3422 : vec3<f32> = ((x_3417 * x_3418) + vec3<f32>(x_3420.x, x_3420.y, x_3420.z));
  let x_3423 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3422.x, x_3422.y, x_3422.z, x_3423.w);
  let x_3425 : f32 = u_xlat63;
  let x_3427 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3425 * x_3427);
  let x_3429 : vec3<f32> = u_xlat24;
  let x_3431 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3429, vec3<f32>(x_3431.x, x_3431.y, x_3431.z));
  let x_3434 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3434, 0.0f, 1.0f);
  let x_3436 : f32 = u_xlat63;
  let x_3437 : f32 = u_xlat64;
  u_xlat63 = (x_3436 * x_3437);
  let x_3439 : f32 = u_xlat63;
  let x_3441 : vec4<f32> = u_xlat7;
  let x_3443 : vec3<f32> = (vec3<f32>(x_3439, x_3439, x_3439) * vec3<f32>(x_3441.x, x_3441.y, x_3441.z));
  let x_3444 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3443.x, x_3443.y, x_3443.z, x_3444.w);
  let x_3446 : vec4<f32> = u_xlat5;
  let x_3449 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3451 : vec3<f32> = (vec3<f32>(x_3446.x, x_3446.y, x_3446.z) + vec3<f32>(x_3449.x, x_3449.y, x_3449.z));
  let x_3452 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3451.x, x_3451.y, x_3451.z, x_3452.w);
  let x_3454 : vec4<f32> = u_xlat8;
  let x_3456 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3454.x, x_3454.y, x_3454.z), vec3<f32>(x_3456.x, x_3456.y, x_3456.z));
  let x_3459 : f32 = u_xlat63;
  u_xlat63 = max(x_3459, 1.17549435e-37f);
  let x_3462 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3462);
  let x_3464 : f32 = u_xlat63;
  let x_3466 : vec4<f32> = u_xlat8;
  let x_3468 : vec3<f32> = (vec3<f32>(x_3464, x_3464, x_3464) * vec3<f32>(x_3466.x, x_3466.y, x_3466.z));
  let x_3469 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3468.x, x_3468.y, x_3468.z, x_3469.w);
  let x_3471 : vec3<f32> = u_xlat24;
  let x_3472 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3471, vec3<f32>(x_3472.x, x_3472.y, x_3472.z));
  let x_3475 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3475, 0.0f, 1.0f);
  let x_3478 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3480 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3478.x, x_3478.y, x_3478.z), vec3<f32>(x_3480.x, x_3480.y, x_3480.z));
  let x_3483 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3483, 0.0f, 1.0f);
  let x_3485 : f32 = u_xlat63;
  let x_3486 : f32 = u_xlat63;
  u_xlat63 = (x_3485 * x_3486);
  let x_3488 : f32 = u_xlat63;
  let x_3490 : f32 = u_xlat22.x;
  u_xlat63 = ((x_3488 * x_3490) + 1.000010014f);
  let x_3494 : f32 = u_xlat64;
  let x_3495 : f32 = u_xlat64;
  u_xlat64 = (x_3494 * x_3495);
  let x_3497 : f32 = u_xlat63;
  let x_3498 : f32 = u_xlat63;
  u_xlat63 = (x_3497 * x_3498);
  let x_3500 : f32 = u_xlat64;
  u_xlat64 = max(x_3500, 0.100000001f);
  let x_3503 : f32 = u_xlat63;
  let x_3504 : f32 = u_xlat64;
  u_xlat63 = (x_3503 * x_3504);
  let x_3506 : f32 = u_xlat68;
  let x_3507 : f32 = u_xlat63;
  u_xlat63 = (x_3506 * x_3507);
  let x_3509 : f32 = u_xlat65;
  let x_3510 : f32 = u_xlat63;
  u_xlat63 = (x_3509 / x_3510);
  let x_3512 : f32 = u_xlat63;
  let x_3516 : vec3<f32> = u_xlat2;
  let x_3517 : vec3<f32> = ((vec3<f32>(x_3512, x_3512, x_3512) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3516);
  let x_3518 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3517.x, x_3517.y, x_3517.z, x_3518.w);
  let x_3520 : vec4<f32> = u_xlat7;
  let x_3522 : vec4<f32> = u_xlat8;
  let x_3524 : vec3<f32> = (vec3<f32>(x_3520.x, x_3520.y, x_3520.z) * vec3<f32>(x_3522.x, x_3522.y, x_3522.z));
  let x_3525 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3524.x, x_3524.y, x_3524.z, x_3525.w);
  let x_3528 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3530 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3528, x_3530);
  let x_3534 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3534));
  let x_3538 : f32 = x_3150.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3540 : f32 = x_3150.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3542 : f32 = x_3150.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3544 : f32 = x_3150.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3545 : vec4<f32> = vec4<f32>(x_3538, x_3540, x_3542, x_3544);
  let x_3551 : vec4<bool> = (vec4<f32>(x_3545.x, x_3545.y, x_3545.z, x_3545.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3551.x, x_3551.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3562 : u32 = u_xlatu_loop_1;
    let x_3563 : u32 = u_xlatu63;
    if ((x_3562 < x_3563)) {
    } else {
      break;
    }
    let x_3566 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3566 >> 2u);
    let x_3570 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3570 & 3u));
    let x_3573 : u32 = u_xlatu3;
    let x_3576 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3573)];
    let x_3586 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3591 : vec4<u32> = indexable[x_3586];
    u_xlat3.x = dot(x_3576, bitcast<vec4<f32>>(x_3591));
    let x_3596 : f32 = u_xlat3.x;
    u_xlatu3 = bitcast<u32>(i32(x_3596));
    let x_3599 : vec3<f32> = vs_INTERP0;
    let x_3611 : u32 = u_xlatu3;
    let x_3614 : vec4<f32> = x_3610.x_AdditionalLightsPosition[bitcast<i32>(x_3611)];
    let x_3617 : u32 = u_xlatu3;
    let x_3620 : vec4<f32> = x_3610.x_AdditionalLightsPosition[bitcast<i32>(x_3617)];
    let x_3622 : vec3<f32> = ((-(x_3599) * vec3<f32>(x_3614.w, x_3614.w, x_3614.w)) + vec3<f32>(x_3620.x, x_3620.y, x_3620.z));
    let x_3623 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3622.x, x_3622.y, x_3622.z, x_3623.w);
    let x_3625 : vec4<f32> = u_xlat9;
    let x_3627 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3625.x, x_3625.y, x_3625.z), vec3<f32>(x_3627.x, x_3627.y, x_3627.z));
    let x_3630 : f32 = u_xlat67;
    u_xlat67 = max(x_3630, 6.10351562e-05f);
    let x_3634 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3634);
    let x_3636 : f32 = u_xlat70;
    let x_3638 : vec4<f32> = u_xlat9;
    let x_3640 : vec3<f32> = (vec3<f32>(x_3636, x_3636, x_3636) * vec3<f32>(x_3638.x, x_3638.y, x_3638.z));
    let x_3641 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3640.x, x_3640.y, x_3640.z, x_3641.w);
    let x_3643 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3643);
    let x_3645 : f32 = u_xlat67;
    let x_3646 : u32 = u_xlatu3;
    let x_3649 : f32 = x_3610.x_AdditionalLightsAttenuation[bitcast<i32>(x_3646)].x;
    u_xlat67 = (x_3645 * x_3649);
    let x_3651 : f32 = u_xlat67;
    let x_3653 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3651) * x_3653) + 1.0f);
    let x_3656 : f32 = u_xlat67;
    u_xlat67 = max(x_3656, 0.0f);
    let x_3658 : f32 = u_xlat67;
    let x_3659 : f32 = u_xlat67;
    u_xlat67 = (x_3658 * x_3659);
    let x_3661 : f32 = u_xlat67;
    let x_3662 : f32 = u_xlat71;
    u_xlat67 = (x_3661 * x_3662);
    let x_3664 : u32 = u_xlatu3;
    let x_3667 : vec4<f32> = x_3610.x_AdditionalLightsSpotDir[bitcast<i32>(x_3664)];
    let x_3669 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3667.x, x_3667.y, x_3667.z), vec3<f32>(x_3669.x, x_3669.y, x_3669.z));
    let x_3672 : f32 = u_xlat71;
    let x_3673 : u32 = u_xlatu3;
    let x_3676 : f32 = x_3610.x_AdditionalLightsAttenuation[bitcast<i32>(x_3673)].z;
    let x_3678 : u32 = u_xlatu3;
    let x_3681 : f32 = x_3610.x_AdditionalLightsAttenuation[bitcast<i32>(x_3678)].w;
    u_xlat71 = ((x_3672 * x_3676) + x_3681);
    let x_3683 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3683, 0.0f, 1.0f);
    let x_3685 : f32 = u_xlat71;
    let x_3686 : f32 = u_xlat71;
    u_xlat71 = (x_3685 * x_3686);
    let x_3688 : f32 = u_xlat67;
    let x_3689 : f32 = u_xlat71;
    u_xlat67 = (x_3688 * x_3689);
    let x_3692 : u32 = u_xlatu3;
    u_xlatu71 = (x_3692 >> 5u);
    let x_3695 : u32 = u_xlatu3;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3695) & 31i)));
    let x_3701 : i32 = u_xlati72;
    let x_3703 : u32 = u_xlatu71;
    let x_3706 : f32 = x_3150.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3703)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3701) & bitcast<u32>(x_3706)));
    let x_3710 : i32 = u_xlati71;
    if ((x_3710 != 0i)) {
      let x_3720 : u32 = u_xlatu3;
      let x_3723 : f32 = x_3719.x_AdditionalLightsLightTypes[bitcast<i32>(x_3720)].el;
      u_xlati71 = i32(x_3723);
      let x_3725 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3725 != 0i));
      let x_3729 : u32 = u_xlatu3;
      u_xlati73 = (bitcast<i32>(x_3729) << bitcast<u32>(2i));
      let x_3732 : i32 = u_xlati72;
      if ((x_3732 != 0i)) {
        let x_3736 : vec3<f32> = vs_INTERP0;
        let x_3738 : i32 = u_xlati73;
        let x_3741 : i32 = u_xlati73;
        let x_3745 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3738 + 1i) / 4i)][((x_3741 + 1i) % 4i)];
        let x_3747 : vec3<f32> = (vec3<f32>(x_3736.y, x_3736.y, x_3736.y) * vec3<f32>(x_3745.x, x_3745.y, x_3745.w));
        let x_3748 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3747.x, x_3747.y, x_3747.z, x_3748.w);
        let x_3750 : i32 = u_xlati73;
        let x_3752 : i32 = u_xlati73;
        let x_3755 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[(x_3750 / 4i)][(x_3752 % 4i)];
        let x_3757 : vec3<f32> = vs_INTERP0;
        let x_3760 : vec4<f32> = u_xlat11;
        let x_3762 : vec3<f32> = ((vec3<f32>(x_3755.x, x_3755.y, x_3755.w) * vec3<f32>(x_3757.x, x_3757.x, x_3757.x)) + vec3<f32>(x_3760.x, x_3760.y, x_3760.z));
        let x_3763 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3762.x, x_3762.y, x_3762.z, x_3763.w);
        let x_3765 : i32 = u_xlati73;
        let x_3768 : i32 = u_xlati73;
        let x_3772 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3765 + 2i) / 4i)][((x_3768 + 2i) % 4i)];
        let x_3774 : vec3<f32> = vs_INTERP0;
        let x_3777 : vec4<f32> = u_xlat11;
        let x_3779 : vec3<f32> = ((vec3<f32>(x_3772.x, x_3772.y, x_3772.w) * vec3<f32>(x_3774.z, x_3774.z, x_3774.z)) + vec3<f32>(x_3777.x, x_3777.y, x_3777.z));
        let x_3780 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3779.x, x_3779.y, x_3779.z, x_3780.w);
        let x_3782 : vec4<f32> = u_xlat11;
        let x_3784 : i32 = u_xlati73;
        let x_3787 : i32 = u_xlati73;
        let x_3791 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3784 + 3i) / 4i)][((x_3787 + 3i) % 4i)];
        let x_3793 : vec3<f32> = (vec3<f32>(x_3782.x, x_3782.y, x_3782.z) + vec3<f32>(x_3791.x, x_3791.y, x_3791.w));
        let x_3794 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3793.x, x_3793.y, x_3793.z, x_3794.w);
        let x_3796 : vec4<f32> = u_xlat11;
        let x_3798 : vec4<f32> = u_xlat11;
        let x_3800 : vec2<f32> = (vec2<f32>(x_3796.x, x_3796.y) / vec2<f32>(x_3798.z, x_3798.z));
        let x_3801 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3800.x, x_3800.y, x_3801.z, x_3801.w);
        let x_3803 : vec4<f32> = u_xlat11;
        let x_3806 : vec2<f32> = ((vec2<f32>(x_3803.x, x_3803.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3807 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3806.x, x_3806.y, x_3807.z, x_3807.w);
        let x_3809 : vec4<f32> = u_xlat11;
        let x_3813 : vec2<f32> = clamp(vec2<f32>(x_3809.x, x_3809.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3814 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3813.x, x_3813.y, x_3814.z, x_3814.w);
        let x_3816 : u32 = u_xlatu3;
        let x_3819 : vec4<f32> = x_3719.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3816)];
        let x_3821 : vec4<f32> = u_xlat11;
        let x_3824 : u32 = u_xlatu3;
        let x_3827 : vec4<f32> = x_3719.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3824)];
        let x_3829 : vec2<f32> = ((vec2<f32>(x_3819.x, x_3819.y) * vec2<f32>(x_3821.x, x_3821.y)) + vec2<f32>(x_3827.z, x_3827.w));
        let x_3830 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3829.x, x_3829.y, x_3830.z, x_3830.w);
      } else {
        let x_3834 : i32 = u_xlati71;
        u_xlatb71 = (x_3834 == 1i);
        let x_3836 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3836);
        let x_3838 : i32 = u_xlati71;
        if ((x_3838 != 0i)) {
          let x_3843 : vec3<f32> = vs_INTERP0;
          let x_3845 : i32 = u_xlati73;
          let x_3848 : i32 = u_xlati73;
          let x_3852 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3845 + 1i) / 4i)][((x_3848 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_3843.y, x_3843.y) * vec2<f32>(x_3852.x, x_3852.y));
          let x_3855 : i32 = u_xlati73;
          let x_3857 : i32 = u_xlati73;
          let x_3860 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[(x_3855 / 4i)][(x_3857 % 4i)];
          let x_3862 : vec3<f32> = vs_INTERP0;
          let x_3865 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3860.x, x_3860.y) * vec2<f32>(x_3862.x, x_3862.x)) + x_3865);
          let x_3867 : i32 = u_xlati73;
          let x_3870 : i32 = u_xlati73;
          let x_3874 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3867 + 2i) / 4i)][((x_3870 + 2i) % 4i)];
          let x_3876 : vec3<f32> = vs_INTERP0;
          let x_3879 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3874.x, x_3874.y) * vec2<f32>(x_3876.z, x_3876.z)) + x_3879);
          let x_3881 : vec2<f32> = u_xlat53;
          let x_3882 : i32 = u_xlati73;
          let x_3885 : i32 = u_xlati73;
          let x_3889 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3882 + 3i) / 4i)][((x_3885 + 3i) % 4i)];
          u_xlat53 = (x_3881 + vec2<f32>(x_3889.x, x_3889.y));
          let x_3892 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_3892 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3895 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_3895);
          let x_3897 : u32 = u_xlatu3;
          let x_3900 : vec4<f32> = x_3719.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3897)];
          let x_3902 : vec2<f32> = u_xlat53;
          let x_3904 : u32 = u_xlatu3;
          let x_3907 : vec4<f32> = x_3719.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3904)];
          let x_3909 : vec2<f32> = ((vec2<f32>(x_3900.x, x_3900.y) * x_3902) + vec2<f32>(x_3907.z, x_3907.w));
          let x_3910 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_3909.x, x_3909.y, x_3910.z, x_3910.w);
        } else {
          let x_3913 : vec3<f32> = vs_INTERP0;
          let x_3915 : i32 = u_xlati73;
          let x_3918 : i32 = u_xlati73;
          let x_3922 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3915 + 1i) / 4i)][((x_3918 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_3913.y, x_3913.y, x_3913.y, x_3913.y) * x_3922);
          let x_3924 : i32 = u_xlati73;
          let x_3926 : i32 = u_xlati73;
          let x_3929 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[(x_3924 / 4i)][(x_3926 % 4i)];
          let x_3930 : vec3<f32> = vs_INTERP0;
          let x_3933 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_3929 * vec4<f32>(x_3930.x, x_3930.x, x_3930.x, x_3930.x)) + x_3933);
          let x_3935 : i32 = u_xlati73;
          let x_3938 : i32 = u_xlati73;
          let x_3942 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3935 + 2i) / 4i)][((x_3938 + 2i) % 4i)];
          let x_3943 : vec3<f32> = vs_INTERP0;
          let x_3946 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_3942 * vec4<f32>(x_3943.z, x_3943.z, x_3943.z, x_3943.z)) + x_3946);
          let x_3948 : vec4<f32> = u_xlat12;
          let x_3949 : i32 = u_xlati73;
          let x_3952 : i32 = u_xlati73;
          let x_3956 : vec4<f32> = x_3719.x_AdditionalLightsWorldToLights[((x_3949 + 3i) / 4i)][((x_3952 + 3i) % 4i)];
          u_xlat12 = (x_3948 + x_3956);
          let x_3958 : vec4<f32> = u_xlat12;
          let x_3960 : vec4<f32> = u_xlat12;
          let x_3962 : vec3<f32> = (vec3<f32>(x_3958.x, x_3958.y, x_3958.z) / vec3<f32>(x_3960.w, x_3960.w, x_3960.w));
          let x_3963 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3962.x, x_3962.y, x_3962.z, x_3963.w);
          let x_3965 : vec4<f32> = u_xlat12;
          let x_3967 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_3965.x, x_3965.y, x_3965.z), vec3<f32>(x_3967.x, x_3967.y, x_3967.z));
          let x_3970 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_3970);
          let x_3972 : f32 = u_xlat71;
          let x_3974 : vec4<f32> = u_xlat12;
          let x_3976 : vec3<f32> = (vec3<f32>(x_3972, x_3972, x_3972) * vec3<f32>(x_3974.x, x_3974.y, x_3974.z));
          let x_3977 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3976.x, x_3976.y, x_3976.z, x_3977.w);
          let x_3979 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_3979.x, x_3979.y, x_3979.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_3984 : f32 = u_xlat71;
          u_xlat71 = max(x_3984, 0.000001f);
          let x_3987 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_3987);
          let x_3989 : f32 = u_xlat71;
          let x_3991 : vec4<f32> = u_xlat12;
          let x_3993 : vec3<f32> = (vec3<f32>(x_3989, x_3989, x_3989) * vec3<f32>(x_3991.z, x_3991.x, x_3991.y));
          let x_3994 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_3993.x, x_3993.y, x_3993.z, x_3994.w);
          let x_3997 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_3997);
          let x_4001 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4001, 0.0f, 1.0f);
          let x_4005 : vec4<f32> = u_xlat13;
          let x_4008 : vec4<bool> = (vec4<f32>(x_4005.y, x_4005.z, x_4005.y, x_4005.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4008.x, x_4008.y);
          let x_4011 : bool = u_xlatb53.x;
          if (x_4011) {
            let x_4016 : f32 = u_xlat13.x;
            x_4012 = x_4016;
          } else {
            let x_4019 : f32 = u_xlat13.x;
            x_4012 = -(x_4019);
          }
          let x_4021 : f32 = x_4012;
          u_xlat53.x = x_4021;
          let x_4024 : bool = u_xlatb53.y;
          if (x_4024) {
            let x_4029 : f32 = u_xlat13.x;
            x_4025 = x_4029;
          } else {
            let x_4032 : f32 = u_xlat13.x;
            x_4025 = -(x_4032);
          }
          let x_4034 : f32 = x_4025;
          u_xlat53.y = x_4034;
          let x_4036 : vec4<f32> = u_xlat12;
          let x_4038 : f32 = u_xlat71;
          let x_4041 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4036.x, x_4036.y) * vec2<f32>(x_4038, x_4038)) + x_4041);
          let x_4043 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4043 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4046 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4046, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4050 : u32 = u_xlatu3;
          let x_4053 : vec4<f32> = x_3719.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4050)];
          let x_4055 : vec2<f32> = u_xlat53;
          let x_4057 : u32 = u_xlatu3;
          let x_4060 : vec4<f32> = x_3719.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4057)];
          let x_4062 : vec2<f32> = ((vec2<f32>(x_4053.x, x_4053.y) * x_4055) + vec2<f32>(x_4060.z, x_4060.w));
          let x_4063 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4062.x, x_4062.y, x_4063.z, x_4063.w);
        }
      }
      let x_4070 : vec4<f32> = u_xlat11;
      let x_4073 : f32 = x_66.x_GlobalMipBias.x;
      let x_4074 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4070.x, x_4070.y), x_4073);
      u_xlat11 = x_4074;
      let x_4076 : bool = u_xlatb48.y;
      if (x_4076) {
        let x_4081 : f32 = u_xlat11.w;
        x_4077 = x_4081;
      } else {
        let x_4084 : f32 = u_xlat11.x;
        x_4077 = x_4084;
      }
      let x_4085 : f32 = x_4077;
      u_xlat71 = x_4085;
      let x_4087 : bool = u_xlatb48.x;
      if (x_4087) {
        let x_4091 : vec4<f32> = u_xlat11;
        x_4088 = vec3<f32>(x_4091.x, x_4091.y, x_4091.z);
      } else {
        let x_4094 : f32 = u_xlat71;
        x_4088 = vec3<f32>(x_4094, x_4094, x_4094);
      }
      let x_4096 : vec3<f32> = x_4088;
      let x_4097 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4096.x, x_4096.y, x_4096.z, x_4097.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4103 : vec4<f32> = u_xlat11;
    let x_4105 : u32 = u_xlatu3;
    let x_4108 : vec4<f32> = x_3610.x_AdditionalLightsColor[bitcast<i32>(x_4105)];
    let x_4110 : vec3<f32> = (vec3<f32>(x_4103.x, x_4103.y, x_4103.z) * vec3<f32>(x_4108.x, x_4108.y, x_4108.z));
    let x_4111 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4110.x, x_4110.y, x_4110.z, x_4111.w);
    let x_4113 : vec3<f32> = u_xlat27;
    let x_4115 : vec4<f32> = u_xlat11;
    let x_4117 : vec3<f32> = (vec3<f32>(x_4113.x, x_4113.x, x_4113.x) * vec3<f32>(x_4115.x, x_4115.y, x_4115.z));
    let x_4118 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4117.x, x_4117.y, x_4117.z, x_4118.w);
    let x_4120 : vec3<f32> = u_xlat24;
    let x_4121 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_4120, vec3<f32>(x_4121.x, x_4121.y, x_4121.z));
    let x_4126 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4126, 0.0f, 1.0f);
    let x_4130 : f32 = u_xlat3.x;
    let x_4131 : f32 = u_xlat67;
    u_xlat3.x = (x_4130 * x_4131);
    let x_4134 : vec4<f32> = u_xlat3;
    let x_4136 : vec4<f32> = u_xlat11;
    let x_4138 : vec3<f32> = (vec3<f32>(x_4134.x, x_4134.x, x_4134.x) * vec3<f32>(x_4136.x, x_4136.y, x_4136.z));
    let x_4139 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4138.x, x_4138.y, x_4138.z, x_4139.w);
    let x_4141 : vec4<f32> = u_xlat9;
    let x_4143 : f32 = u_xlat70;
    let x_4146 : vec4<f32> = u_xlat5;
    let x_4148 : vec3<f32> = ((vec3<f32>(x_4141.x, x_4141.y, x_4141.z) * vec3<f32>(x_4143, x_4143, x_4143)) + vec3<f32>(x_4146.x, x_4146.y, x_4146.z));
    let x_4149 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4148.x, x_4148.y, x_4148.z, x_4149.w);
    let x_4151 : vec4<f32> = u_xlat9;
    let x_4153 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_4151.x, x_4151.y, x_4151.z), vec3<f32>(x_4153.x, x_4153.y, x_4153.z));
    let x_4158 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4158, 1.17549435e-37f);
    let x_4162 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_4162);
    let x_4165 : vec4<f32> = u_xlat3;
    let x_4167 : vec4<f32> = u_xlat9;
    let x_4169 : vec3<f32> = (vec3<f32>(x_4165.x, x_4165.x, x_4165.x) * vec3<f32>(x_4167.x, x_4167.y, x_4167.z));
    let x_4170 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4169.x, x_4169.y, x_4169.z, x_4170.w);
    let x_4172 : vec3<f32> = u_xlat24;
    let x_4173 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_4172, vec3<f32>(x_4173.x, x_4173.y, x_4173.z));
    let x_4178 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4178, 0.0f, 1.0f);
    let x_4181 : vec4<f32> = u_xlat10;
    let x_4183 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4181.x, x_4181.y, x_4181.z), vec3<f32>(x_4183.x, x_4183.y, x_4183.z));
    let x_4186 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4186, 0.0f, 1.0f);
    let x_4189 : f32 = u_xlat3.x;
    let x_4191 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4189 * x_4191);
    let x_4195 : f32 = u_xlat3.x;
    let x_4197 : f32 = u_xlat22.x;
    u_xlat3.x = ((x_4195 * x_4197) + 1.000010014f);
    let x_4201 : f32 = u_xlat67;
    let x_4202 : f32 = u_xlat67;
    u_xlat67 = (x_4201 * x_4202);
    let x_4205 : f32 = u_xlat3.x;
    let x_4207 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4205 * x_4207);
    let x_4210 : f32 = u_xlat67;
    u_xlat67 = max(x_4210, 0.100000001f);
    let x_4213 : f32 = u_xlat3.x;
    let x_4214 : f32 = u_xlat67;
    u_xlat3.x = (x_4213 * x_4214);
    let x_4217 : f32 = u_xlat68;
    let x_4219 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4217 * x_4219);
    let x_4222 : f32 = u_xlat65;
    let x_4224 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4222 / x_4224);
    let x_4227 : vec4<f32> = u_xlat3;
    let x_4230 : vec3<f32> = u_xlat2;
    let x_4231 : vec3<f32> = ((vec3<f32>(x_4227.x, x_4227.x, x_4227.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4230);
    let x_4232 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4231.x, x_4231.y, x_4231.z, x_4232.w);
    let x_4234 : vec4<f32> = u_xlat9;
    let x_4236 : vec4<f32> = u_xlat11;
    let x_4239 : vec4<f32> = u_xlat8;
    let x_4241 : vec3<f32> = ((vec3<f32>(x_4234.x, x_4234.y, x_4234.z) * vec3<f32>(x_4236.x, x_4236.y, x_4236.z)) + vec3<f32>(x_4239.x, x_4239.y, x_4239.z));
    let x_4242 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4241.x, x_4241.y, x_4241.z, x_4242.w);

    continuing {
      let x_4244 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4244 + bitcast<u32>(1i));
    }
  }
  let x_4246 : vec4<f32> = u_xlat4;
  let x_4248 : vec4<f32> = u_xlat6;
  let x_4251 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_4246.x, x_4246.y, x_4246.z) * vec3<f32>(x_4248.x, x_4248.x, x_4248.x)) + vec3<f32>(x_4251.x, x_4251.y, x_4251.z));
  let x_4254 : vec4<f32> = u_xlat8;
  let x_4256 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4254.x, x_4254.y, x_4254.z) + x_4256);
  let x_4260 : vec4<f32> = vs_INTERP4;
  let x_4262 : vec3<f32> = u_xlat0;
  let x_4264 : vec3<f32> = u_xlat2;
  let x_4265 : vec3<f32> = ((vec3<f32>(x_4260.w, x_4260.w, x_4260.w) * x_4262) + x_4264);
  let x_4266 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4265.x, x_4265.y, x_4265.z, x_4266.w);
  let x_4268 : bool = u_xlatb43;
  if (x_4268) {
    let x_4273 : f32 = u_xlat1.x;
    x_4269 = x_4273;
  } else {
    x_4269 = 1.0f;
  }
  let x_4275 : f32 = x_4269;
  SV_Target0.w = x_4275;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

