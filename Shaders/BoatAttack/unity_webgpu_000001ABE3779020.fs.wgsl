type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_94 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_277 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_379 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3617 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_4102 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4212 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec4<f32>;
  var x_199 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : vec4<bool>;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1881 : f32;
  var u_xlatu5 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2007 : f32;
  var u_xlatb47 : bool;
  var x_2061 : f32;
  var u_xlat44 : vec2<f32>;
  var u_xlat66 : f32;
  var u_xlat71 : f32;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3566 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3700 : f32;
  var x_3711 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati73 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlat75 : f32;
  var u_xlatu75 : u32;
  var u_xlati76 : i32;
  var u_xlati75 : i32;
  var u_xlati11 : i32;
  var u_xlat33 : vec3<f32>;
  var u_xlatb75 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4514 : f32;
  var x_4527 : f32;
  var x_4589 : f32;
  var x_4600 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_64 : vec3<f32> = vs_INTERP1;
  let x_65 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_64, x_65);
  let x_71 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_71);
  let x_75 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_75);
  let x_85 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_85);
  let x_98 : f32 = x_94.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_98 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec4<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec4<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec4<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_167) + x_172);
  let x_175 : vec3<f32> = u_xlat4;
  let x_176 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_175, x_176);
  let x_178 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_178);
  let x_180 : f32 = u_xlat67;
  let x_182 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_180, x_180, x_180) * x_182);
  let x_188 : f32 = x_160.unity_MatrixV[0i].z;
  u_xlat5.x = x_188;
  let x_192 : f32 = x_160.unity_MatrixV[1i].z;
  u_xlat5.y = x_192;
  let x_196 : f32 = x_160.unity_MatrixV[2i].z;
  u_xlat5.z = x_196;
  let x_198 : bool = u_xlatb0;
  if (x_198) {
    let x_202 : vec3<f32> = u_xlat4;
    x_199 = x_202;
  } else {
    let x_204 : vec4<f32> = u_xlat5;
    x_199 = vec3<f32>(x_204.x, x_204.y, x_204.z);
  }
  let x_206 : vec3<f32> = x_199;
  u_xlat4 = x_206;
  let x_207 : vec3<f32> = u_xlat4;
  let x_211 : vec4<f32> = x_94.unity_WorldToObject[1i];
  let x_213 : vec3<f32> = (vec3<f32>(x_207.y, x_207.y, x_207.y) * vec3<f32>(x_211.x, x_211.y, x_211.z));
  let x_214 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_213.x, x_213.y, x_213.z, x_214.w);
  let x_217 : vec4<f32> = x_94.unity_WorldToObject[0i];
  let x_219 : vec3<f32> = u_xlat4;
  let x_222 : vec4<f32> = u_xlat5;
  let x_224 : vec3<f32> = ((vec3<f32>(x_217.x, x_217.y, x_217.z) * vec3<f32>(x_219.x, x_219.x, x_219.x)) + vec3<f32>(x_222.x, x_222.y, x_222.z));
  let x_225 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_224.x, x_224.y, x_224.z, x_225.w);
  let x_228 : vec4<f32> = x_94.unity_WorldToObject[2i];
  let x_230 : vec3<f32> = u_xlat4;
  let x_233 : vec4<f32> = u_xlat5;
  let x_235 : vec3<f32> = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_230.z, x_230.z, x_230.z)) + vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_238 : vec4<f32> = u_xlat5;
  let x_240 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(vec3<f32>(x_238.x, x_238.y, x_238.z), vec3<f32>(x_240.x, x_240.y, x_240.z));
  let x_245 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_245);
  let x_248 : vec4<f32> = u_xlat0;
  let x_250 : vec4<f32> = u_xlat5;
  let x_252 : vec3<f32> = (vec3<f32>(x_248.x, x_248.x, x_248.x) * vec3<f32>(x_250.x, x_250.y, x_250.z));
  let x_253 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_252.y, x_252.z, x_253.w);
  let x_267 : vec4<f32> = vs_INTERP3;
  let x_270 : f32 = x_160.x_GlobalMipBias.x;
  let x_271 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_267.x, x_267.y), x_270);
  u_xlat6 = x_271;
  let x_273 : vec4<f32> = u_xlat6;
  let x_279 : vec4<f32> = x_277.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_273.x, x_273.y, x_273.z) * vec3<f32>(x_279.x, x_279.y, x_279.z));
  let x_288 : vec4<f32> = vs_INTERP3;
  let x_291 : f32 = x_160.x_GlobalMipBias.x;
  let x_292 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_288.x, x_288.y), x_291);
  u_xlat8 = vec4<f32>(x_292.w, x_292.x, x_292.y, x_292.z);
  let x_295 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_295.y, x_295.z, x_295.w, x_295.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_302 : vec4<f32> = u_xlat9;
  let x_303 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_302, x_303);
  let x_307 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_307);
  let x_311 : vec4<f32> = u_xlat0;
  let x_313 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_311.x, x_311.x, x_311.x) * vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_318 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_318 * 200.0f);
  let x_323 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_323, 1.0f);
  let x_326 : vec4<f32> = u_xlat0;
  let x_328 : vec4<f32> = u_xlat6;
  let x_330 : vec3<f32> = (vec3<f32>(x_326.x, x_326.x, x_326.x) * vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_331 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_330.x, x_330.y, x_330.z, x_331.w);
  let x_333 : vec4<f32> = u_xlat3;
  let x_335 : vec3<f32> = u_xlat30;
  let x_337 : vec3<f32> = (vec3<f32>(x_333.x, x_333.y, x_333.z) * vec3<f32>(x_335.y, x_335.y, x_335.y));
  let x_338 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_337.x, x_337.y, x_337.z, x_338.w);
  let x_340 : vec3<f32> = u_xlat30;
  let x_342 : vec4<f32> = u_xlat2;
  let x_345 : vec4<f32> = u_xlat3;
  let x_347 : vec3<f32> = ((vec3<f32>(x_340.x, x_340.x, x_340.x) * vec3<f32>(x_342.x, x_342.y, x_342.z)) + vec3<f32>(x_345.x, x_345.y, x_345.z));
  let x_348 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_347.x, x_347.y, x_347.z, x_348.w);
  let x_350 : vec3<f32> = u_xlat30;
  let x_352 : vec3<f32> = u_xlat1;
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_350.z, x_350.z, x_350.z) * x_352) + vec3<f32>(x_354.x, x_354.y, x_354.z));
  let x_357 : vec3<f32> = u_xlat1;
  let x_358 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_357, x_358);
  let x_362 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_362, 1.17549435e-37f);
  let x_367 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_367);
  let x_370 : vec4<f32> = u_xlat0;
  let x_372 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_370.x, x_370.x, x_370.x) * x_372);
  let x_374 : vec3<f32> = vs_INTERP0;
  let x_381 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres0;
  let x_384 : vec3<f32> = (x_374 + -(vec3<f32>(x_381.x, x_381.y, x_381.z)));
  let x_385 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_384.x, x_384.y, x_384.z, x_385.w);
  let x_387 : vec3<f32> = vs_INTERP0;
  let x_389 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres1;
  let x_392 : vec3<f32> = (x_387 + -(vec3<f32>(x_389.x, x_389.y, x_389.z)));
  let x_393 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : vec3<f32> = vs_INTERP0;
  let x_397 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres2;
  let x_400 : vec3<f32> = (x_395 + -(vec3<f32>(x_397.x, x_397.y, x_397.z)));
  let x_401 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_400.x, x_400.y, x_400.z, x_401.w);
  let x_404 : vec3<f32> = vs_INTERP0;
  let x_407 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres3;
  let x_410 : vec3<f32> = (x_404 + -(vec3<f32>(x_407.x, x_407.y, x_407.z)));
  let x_411 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : vec4<f32> = u_xlat2;
  let x_415 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_413.x, x_413.y, x_413.z), vec3<f32>(x_415.x, x_415.y, x_415.z));
  let x_419 : vec4<f32> = u_xlat3;
  let x_421 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_419.x, x_419.y, x_419.z), vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_425 : vec4<f32> = u_xlat9;
  let x_427 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_425.x, x_425.y, x_425.z), vec3<f32>(x_427.x, x_427.y, x_427.z));
  let x_431 : vec4<f32> = u_xlat10;
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_431.x, x_431.y, x_431.z), vec3<f32>(x_433.x, x_433.y, x_433.z));
  let x_440 : vec4<f32> = u_xlat2;
  let x_443 : vec4<f32> = x_379.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_440 < x_443);
  let x_446 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_446);
  let x_450 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_450);
  let x_454 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_454);
  let x_458 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_458);
  let x_462 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_462);
  let x_467 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_467);
  let x_471 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_471);
  let x_474 : vec4<f32> = u_xlat2;
  let x_476 : vec4<f32> = u_xlat3;
  let x_478 : vec3<f32> = (vec3<f32>(x_474.x, x_474.y, x_474.z) + vec3<f32>(x_476.y, x_476.z, x_476.w));
  let x_479 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_478.x, x_478.y, x_478.z, x_479.w);
  let x_481 : vec4<f32> = u_xlat2;
  let x_484 : vec3<f32> = max(vec3<f32>(x_481.x, x_481.y, x_481.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_485 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_485.x, x_484.x, x_484.y, x_484.z);
  let x_487 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_487, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_494 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_494) + 4.0f);
  let x_500 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_500);
  let x_503 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_503) << bitcast<u32>(2i));
  let x_506 : vec3<f32> = vs_INTERP0;
  let x_508 : i32 = u_xlati0;
  let x_511 : i32 = u_xlati0;
  let x_515 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_508 + 1i) / 4i)][((x_511 + 1i) % 4i)];
  let x_517 : vec3<f32> = (vec3<f32>(x_506.y, x_506.y, x_506.y) * vec3<f32>(x_515.x, x_515.y, x_515.z));
  let x_518 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_517.x, x_517.y, x_517.z, x_518.w);
  let x_520 : i32 = u_xlati0;
  let x_522 : i32 = u_xlati0;
  let x_525 : vec4<f32> = x_379.x_MainLightWorldToShadow[(x_520 / 4i)][(x_522 % 4i)];
  let x_527 : vec3<f32> = vs_INTERP0;
  let x_530 : vec4<f32> = u_xlat2;
  let x_532 : vec3<f32> = ((vec3<f32>(x_525.x, x_525.y, x_525.z) * vec3<f32>(x_527.x, x_527.x, x_527.x)) + vec3<f32>(x_530.x, x_530.y, x_530.z));
  let x_533 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_532.x, x_532.y, x_532.z, x_533.w);
  let x_535 : i32 = u_xlati0;
  let x_538 : i32 = u_xlati0;
  let x_542 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_535 + 2i) / 4i)][((x_538 + 2i) % 4i)];
  let x_544 : vec3<f32> = vs_INTERP0;
  let x_547 : vec4<f32> = u_xlat2;
  let x_549 : vec3<f32> = ((vec3<f32>(x_542.x, x_542.y, x_542.z) * vec3<f32>(x_544.z, x_544.z, x_544.z)) + vec3<f32>(x_547.x, x_547.y, x_547.z));
  let x_550 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_549.x, x_549.y, x_549.z, x_550.w);
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : i32 = u_xlati0;
  let x_557 : i32 = u_xlati0;
  let x_561 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_554 + 3i) / 4i)][((x_557 + 3i) % 4i)];
  let x_563 : vec3<f32> = (vec3<f32>(x_552.x, x_552.y, x_552.z) + vec3<f32>(x_561.x, x_561.y, x_561.z));
  let x_564 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
  let x_568 : f32 = x_379.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_568);
  let x_570 : bool = u_xlatb0;
  if (x_570) {
    let x_575 : f32 = x_379.x_MainLightShadowParams.y;
    u_xlatb67 = (x_575 == 1.0f);
    let x_577 : bool = u_xlatb67;
    if (x_577) {
      let x_580 : vec4<f32> = u_xlat2;
      let x_584 : vec4<f32> = x_379.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_580.x, x_580.y, x_580.x, x_580.y) + x_584);
      let x_587 : vec4<f32> = u_xlat3;
      let x_588 : vec2<f32> = vec2<f32>(x_587.x, x_587.y);
      let x_590 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_588.x, x_588.y, x_590);
      let x_602 : vec3<f32> = txVec0;
      let x_604 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_602.xy, x_602.z);
      u_xlat9.x = x_604;
      let x_607 : vec4<f32> = u_xlat3;
      let x_608 : vec2<f32> = vec2<f32>(x_607.z, x_607.w);
      let x_610 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_608.x, x_608.y, x_610);
      let x_617 : vec3<f32> = txVec1;
      let x_619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_617.xy, x_617.z);
      u_xlat9.y = x_619;
      let x_621 : vec4<f32> = u_xlat2;
      let x_625 : vec4<f32> = x_379.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_621.x, x_621.y, x_621.x, x_621.y) + x_625);
      let x_628 : vec4<f32> = u_xlat3;
      let x_629 : vec2<f32> = vec2<f32>(x_628.x, x_628.y);
      let x_631 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_629.x, x_629.y, x_631);
      let x_638 : vec3<f32> = txVec2;
      let x_640 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_638.xy, x_638.z);
      u_xlat9.z = x_640;
      let x_643 : vec4<f32> = u_xlat3;
      let x_644 : vec2<f32> = vec2<f32>(x_643.z, x_643.w);
      let x_646 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_644.x, x_644.y, x_646);
      let x_653 : vec3<f32> = txVec3;
      let x_655 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_653.xy, x_653.z);
      u_xlat9.w = x_655;
      let x_657 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_657, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_664 : f32 = x_379.x_MainLightShadowParams.y;
      u_xlatb68 = (x_664 == 2.0f);
      let x_666 : bool = u_xlatb68;
      if (x_666) {
        let x_669 : vec4<f32> = u_xlat2;
        let x_672 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_677 : vec2<f32> = ((vec2<f32>(x_669.x, x_669.y) * vec2<f32>(x_672.z, x_672.w)) + vec2<f32>(0.5f, 0.5f));
        let x_678 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_677.x, x_677.y, x_678.z, x_678.w);
        let x_680 : vec4<f32> = u_xlat3;
        let x_682 : vec2<f32> = floor(vec2<f32>(x_680.x, x_680.y));
        let x_683 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_682.x, x_682.y, x_683.z, x_683.w);
        let x_687 : vec4<f32> = u_xlat2;
        let x_690 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_693 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_687.x, x_687.y) * vec2<f32>(x_690.z, x_690.w)) + -(vec2<f32>(x_693.x, x_693.y)));
        let x_697 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_697.x, x_697.x, x_697.y, x_697.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_701 : vec4<f32> = u_xlat9;
        let x_703 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_701.x, x_701.x, x_701.z, x_701.z) * vec4<f32>(x_703.x, x_703.x, x_703.z, x_703.z));
        let x_706 : vec4<f32> = u_xlat10;
        let x_710 : vec2<f32> = (vec2<f32>(x_706.y, x_706.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_711 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_710.x, x_711.y, x_710.y, x_711.w);
        let x_713 : vec4<f32> = u_xlat10;
        let x_716 : vec2<f32> = u_xlat47;
        let x_718 : vec2<f32> = ((vec2<f32>(x_713.x, x_713.z) * vec2<f32>(0.5f, 0.5f)) + -(x_716));
        let x_719 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_718.x, x_718.y, x_719.z, x_719.w);
        let x_722 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_722) + vec2<f32>(1.0f, 1.0f));
        let x_727 : vec2<f32> = u_xlat47;
        let x_729 : vec2<f32> = min(x_727, vec2<f32>(0.0f, 0.0f));
        let x_730 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_729.x, x_729.y, x_730.z, x_730.w);
        let x_732 : vec4<f32> = u_xlat11;
        let x_735 : vec4<f32> = u_xlat11;
        let x_738 : vec2<f32> = u_xlat54;
        let x_739 : vec2<f32> = ((-(vec2<f32>(x_732.x, x_732.y)) * vec2<f32>(x_735.x, x_735.y)) + x_738);
        let x_740 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
        let x_742 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_742, vec2<f32>(0.0f, 0.0f));
        let x_744 : vec2<f32> = u_xlat47;
        let x_746 : vec2<f32> = u_xlat47;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_744) * x_746) + vec2<f32>(x_748.y, x_748.w));
        let x_751 : vec4<f32> = u_xlat11;
        let x_753 : vec2<f32> = (vec2<f32>(x_751.x, x_751.y) + vec2<f32>(1.0f, 1.0f));
        let x_754 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_753.x, x_753.y, x_754.z, x_754.w);
        let x_756 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_756 + vec2<f32>(1.0f, 1.0f));
        let x_759 : vec4<f32> = u_xlat10;
        let x_763 : vec2<f32> = (vec2<f32>(x_759.x, x_759.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_764 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_763.x, x_763.y, x_764.z, x_764.w);
        let x_766 : vec2<f32> = u_xlat54;
        let x_767 : vec2<f32> = (x_766 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_768 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_767.x, x_767.y, x_768.z, x_768.w);
        let x_770 : vec4<f32> = u_xlat11;
        let x_772 : vec2<f32> = (vec2<f32>(x_770.x, x_770.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_773 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_772.x, x_772.y, x_773.z, x_773.w);
        let x_776 : vec2<f32> = u_xlat47;
        let x_777 : vec2<f32> = (x_776 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_778 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_777.x, x_777.y, x_778.z, x_778.w);
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_780.y, x_780.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_784 : f32 = u_xlat11.x;
        u_xlat12.z = x_784;
        let x_787 : f32 = u_xlat47.x;
        u_xlat12.w = x_787;
        let x_790 : f32 = u_xlat13.x;
        u_xlat10.z = x_790;
        let x_793 : f32 = u_xlat9.x;
        u_xlat10.w = x_793;
        let x_796 : vec4<f32> = u_xlat10;
        let x_798 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_796.z, x_796.w, x_796.x, x_796.z) + vec4<f32>(x_798.z, x_798.w, x_798.x, x_798.z));
        let x_802 : f32 = u_xlat12.y;
        u_xlat11.z = x_802;
        let x_805 : f32 = u_xlat47.y;
        u_xlat11.w = x_805;
        let x_808 : f32 = u_xlat10.y;
        u_xlat13.z = x_808;
        let x_811 : f32 = u_xlat9.z;
        u_xlat13.w = x_811;
        let x_813 : vec4<f32> = u_xlat11;
        let x_815 : vec4<f32> = u_xlat13;
        let x_817 : vec3<f32> = (vec3<f32>(x_813.z, x_813.y, x_813.w) + vec3<f32>(x_815.z, x_815.y, x_815.w));
        let x_818 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_817.x, x_817.y, x_817.z, x_818.w);
        let x_820 : vec4<f32> = u_xlat10;
        let x_822 : vec4<f32> = u_xlat14;
        let x_824 : vec3<f32> = (vec3<f32>(x_820.x, x_820.z, x_820.w) / vec3<f32>(x_822.z, x_822.w, x_822.y));
        let x_825 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_824.x, x_824.y, x_824.z, x_825.w);
        let x_827 : vec4<f32> = u_xlat10;
        let x_833 : vec3<f32> = (vec3<f32>(x_827.x, x_827.y, x_827.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_834 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_833.x, x_833.y, x_833.z, x_834.w);
        let x_836 : vec4<f32> = u_xlat13;
        let x_838 : vec4<f32> = u_xlat9;
        let x_840 : vec3<f32> = (vec3<f32>(x_836.z, x_836.y, x_836.w) / vec3<f32>(x_838.x, x_838.y, x_838.z));
        let x_841 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_840.x, x_840.y, x_840.z, x_841.w);
        let x_843 : vec4<f32> = u_xlat11;
        let x_845 : vec3<f32> = (vec3<f32>(x_843.x, x_843.y, x_843.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_846 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_845.x, x_845.y, x_845.z, x_846.w);
        let x_848 : vec4<f32> = u_xlat10;
        let x_851 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_853 : vec3<f32> = (vec3<f32>(x_848.y, x_848.x, x_848.z) * vec3<f32>(x_851.x, x_851.x, x_851.x));
        let x_854 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_853.x, x_853.y, x_853.z, x_854.w);
        let x_856 : vec4<f32> = u_xlat11;
        let x_859 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_861 : vec3<f32> = (vec3<f32>(x_856.x, x_856.y, x_856.z) * vec3<f32>(x_859.y, x_859.y, x_859.y));
        let x_862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_861.x, x_861.y, x_861.z, x_862.w);
        let x_865 : f32 = u_xlat11.x;
        u_xlat10.w = x_865;
        let x_867 : vec4<f32> = u_xlat3;
        let x_870 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_873 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_867.x, x_867.y, x_867.x, x_867.y) * vec4<f32>(x_870.x, x_870.y, x_870.x, x_870.y)) + vec4<f32>(x_873.y, x_873.w, x_873.x, x_873.w));
        let x_876 : vec4<f32> = u_xlat3;
        let x_879 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_879.x, x_879.y)) + vec2<f32>(x_882.z, x_882.w));
        let x_886 : f32 = u_xlat10.y;
        u_xlat11.w = x_886;
        let x_888 : vec4<f32> = u_xlat11;
        let x_889 : vec2<f32> = vec2<f32>(x_888.y, x_888.z);
        let x_890 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_890.x, x_889.x, x_890.z, x_889.y);
        let x_892 : vec4<f32> = u_xlat3;
        let x_895 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_898 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_892.x, x_892.y, x_892.x, x_892.y) * vec4<f32>(x_895.x, x_895.y, x_895.x, x_895.y)) + vec4<f32>(x_898.x, x_898.y, x_898.z, x_898.y));
        let x_901 : vec4<f32> = u_xlat3;
        let x_904 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_907 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_901.x, x_901.y, x_901.x, x_901.y) * vec4<f32>(x_904.x, x_904.y, x_904.x, x_904.y)) + vec4<f32>(x_907.w, x_907.y, x_907.w, x_907.z));
        let x_910 : vec4<f32> = u_xlat3;
        let x_913 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_916 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_910.x, x_910.y, x_910.x, x_910.y) * vec4<f32>(x_913.x, x_913.y, x_913.x, x_913.y)) + vec4<f32>(x_916.x, x_916.w, x_916.z, x_916.w));
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.y) * vec4<f32>(x_922.z, x_922.w, x_922.y, x_922.z));
        let x_926 : vec4<f32> = u_xlat9;
        let x_928 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_926.y, x_926.y, x_926.z, x_926.z) * x_928);
        let x_932 : f32 = u_xlat9.z;
        let x_934 : f32 = u_xlat14.y;
        u_xlat68 = (x_932 * x_934);
        let x_937 : vec4<f32> = u_xlat12;
        let x_938 : vec2<f32> = vec2<f32>(x_937.x, x_937.y);
        let x_940 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_938.x, x_938.y, x_940);
        let x_947 : vec3<f32> = txVec4;
        let x_949 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_947.xy, x_947.z);
        u_xlat3.x = x_949;
        let x_952 : vec4<f32> = u_xlat12;
        let x_953 : vec2<f32> = vec2<f32>(x_952.z, x_952.w);
        let x_955 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_953.x, x_953.y, x_955);
        let x_963 : vec3<f32> = txVec5;
        let x_965 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_963.xy, x_963.z);
        u_xlat25 = x_965;
        let x_966 : f32 = u_xlat25;
        let x_968 : f32 = u_xlat15.y;
        u_xlat25 = (x_966 * x_968);
        let x_971 : f32 = u_xlat15.x;
        let x_973 : f32 = u_xlat3.x;
        let x_975 : f32 = u_xlat25;
        u_xlat3.x = ((x_971 * x_973) + x_975);
        let x_979 : vec2<f32> = u_xlat47;
        let x_981 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_979.x, x_979.y, x_981);
        let x_988 : vec3<f32> = txVec6;
        let x_990 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_988.xy, x_988.z);
        u_xlat25 = x_990;
        let x_992 : f32 = u_xlat15.z;
        let x_993 : f32 = u_xlat25;
        let x_996 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_992 * x_993) + x_996);
        let x_1000 : vec4<f32> = u_xlat11;
        let x_1001 : vec2<f32> = vec2<f32>(x_1000.x, x_1000.y);
        let x_1003 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec7;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1010.xy, x_1010.z);
        u_xlat25 = x_1012;
        let x_1014 : f32 = u_xlat15.w;
        let x_1015 : f32 = u_xlat25;
        let x_1018 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1014 * x_1015) + x_1018);
        let x_1022 : vec4<f32> = u_xlat13;
        let x_1023 : vec2<f32> = vec2<f32>(x_1022.x, x_1022.y);
        let x_1025 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1023.x, x_1023.y, x_1025);
        let x_1032 : vec3<f32> = txVec8;
        let x_1034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1032.xy, x_1032.z);
        u_xlat25 = x_1034;
        let x_1036 : f32 = u_xlat16.x;
        let x_1037 : f32 = u_xlat25;
        let x_1040 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1036 * x_1037) + x_1040);
        let x_1044 : vec4<f32> = u_xlat13;
        let x_1045 : vec2<f32> = vec2<f32>(x_1044.z, x_1044.w);
        let x_1047 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1045.x, x_1045.y, x_1047);
        let x_1054 : vec3<f32> = txVec9;
        let x_1056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1054.xy, x_1054.z);
        u_xlat25 = x_1056;
        let x_1058 : f32 = u_xlat16.y;
        let x_1059 : f32 = u_xlat25;
        let x_1062 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1058 * x_1059) + x_1062);
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1067 : vec2<f32> = vec2<f32>(x_1066.z, x_1066.w);
        let x_1069 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1067.x, x_1067.y, x_1069);
        let x_1076 : vec3<f32> = txVec10;
        let x_1078 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1076.xy, x_1076.z);
        u_xlat25 = x_1078;
        let x_1080 : f32 = u_xlat16.z;
        let x_1081 : f32 = u_xlat25;
        let x_1084 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1080 * x_1081) + x_1084);
        let x_1088 : vec4<f32> = u_xlat10;
        let x_1089 : vec2<f32> = vec2<f32>(x_1088.x, x_1088.y);
        let x_1091 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1089.x, x_1089.y, x_1091);
        let x_1098 : vec3<f32> = txVec11;
        let x_1100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1098.xy, x_1098.z);
        u_xlat25 = x_1100;
        let x_1102 : f32 = u_xlat16.w;
        let x_1103 : f32 = u_xlat25;
        let x_1106 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1102 * x_1103) + x_1106);
        let x_1110 : vec4<f32> = u_xlat10;
        let x_1111 : vec2<f32> = vec2<f32>(x_1110.z, x_1110.w);
        let x_1113 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1111.x, x_1111.y, x_1113);
        let x_1120 : vec3<f32> = txVec12;
        let x_1122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1120.xy, x_1120.z);
        u_xlat25 = x_1122;
        let x_1123 : f32 = u_xlat68;
        let x_1124 : f32 = u_xlat25;
        let x_1127 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1123 * x_1124) + x_1127);
      } else {
        let x_1130 : vec4<f32> = u_xlat2;
        let x_1133 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1136 : vec2<f32> = ((vec2<f32>(x_1130.x, x_1130.y) * vec2<f32>(x_1133.z, x_1133.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1137 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1136.x, x_1136.y, x_1137.z, x_1137.w);
        let x_1139 : vec4<f32> = u_xlat3;
        let x_1141 : vec2<f32> = floor(vec2<f32>(x_1139.x, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1144 : vec4<f32> = u_xlat2;
        let x_1147 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1150 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1144.x, x_1144.y) * vec2<f32>(x_1147.z, x_1147.w)) + -(vec2<f32>(x_1150.x, x_1150.y)));
        let x_1154 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1154.x, x_1154.x, x_1154.y, x_1154.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1157 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1157.x, x_1157.x, x_1157.z, x_1157.z) * vec4<f32>(x_1159.x, x_1159.x, x_1159.z, x_1159.z));
        let x_1162 : vec4<f32> = u_xlat10;
        let x_1166 : vec2<f32> = (vec2<f32>(x_1162.y, x_1162.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1167 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1167.x, x_1166.x, x_1167.z, x_1166.y);
        let x_1169 : vec4<f32> = u_xlat10;
        let x_1172 : vec2<f32> = u_xlat47;
        let x_1174 : vec2<f32> = ((vec2<f32>(x_1169.x, x_1169.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1172));
        let x_1175 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1174.x, x_1175.y, x_1174.y, x_1175.w);
        let x_1177 : vec2<f32> = u_xlat47;
        let x_1179 : vec2<f32> = (-(x_1177) + vec2<f32>(1.0f, 1.0f));
        let x_1180 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1179.x, x_1179.y, x_1180.z, x_1180.w);
        let x_1182 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1182, vec2<f32>(0.0f, 0.0f));
        let x_1184 : vec2<f32> = u_xlat54;
        let x_1186 : vec2<f32> = u_xlat54;
        let x_1188 : vec4<f32> = u_xlat10;
        let x_1190 : vec2<f32> = ((-(x_1184) * x_1186) + vec2<f32>(x_1188.x, x_1188.y));
        let x_1191 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1190.x, x_1190.y, x_1191.z, x_1191.w);
        let x_1193 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1193, vec2<f32>(0.0f, 0.0f));
        let x_1196 : vec2<f32> = u_xlat54;
        let x_1198 : vec2<f32> = u_xlat54;
        let x_1200 : vec4<f32> = u_xlat9;
        let x_1202 : vec2<f32> = ((-(x_1196) * x_1198) + vec2<f32>(x_1200.y, x_1200.w));
        let x_1203 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1202.x, x_1203.y, x_1202.y);
        let x_1205 : vec4<f32> = u_xlat10;
        let x_1208 : vec2<f32> = (vec2<f32>(x_1205.x, x_1205.y) + vec2<f32>(2.0f, 2.0f));
        let x_1209 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1208.x, x_1208.y, x_1209.z, x_1209.w);
        let x_1211 : vec3<f32> = u_xlat31;
        let x_1213 : vec2<f32> = (vec2<f32>(x_1211.x, x_1211.z) + vec2<f32>(2.0f, 2.0f));
        let x_1214 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1214.x, x_1213.x, x_1214.z, x_1213.y);
        let x_1217 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1217 * 0.081632003f);
        let x_1221 : vec4<f32> = u_xlat9;
        let x_1224 : vec3<f32> = (vec3<f32>(x_1221.z, x_1221.x, x_1221.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1225 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1224.x, x_1224.y, x_1224.z, x_1225.w);
        let x_1227 : vec4<f32> = u_xlat10;
        let x_1230 : vec2<f32> = (vec2<f32>(x_1227.x, x_1227.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1231 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1230.x, x_1230.y, x_1231.z, x_1231.w);
        let x_1234 : f32 = u_xlat13.y;
        u_xlat12.x = x_1234;
        let x_1236 : vec2<f32> = u_xlat47;
        let x_1243 : vec2<f32> = ((vec2<f32>(x_1236.x, x_1236.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1244 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1244.x, x_1243.x, x_1244.z, x_1243.y);
        let x_1246 : vec2<f32> = u_xlat47;
        let x_1250 : vec2<f32> = ((vec2<f32>(x_1246.x, x_1246.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1251 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1250.x, x_1251.y, x_1250.y, x_1251.w);
        let x_1254 : f32 = u_xlat9.x;
        u_xlat10.y = x_1254;
        let x_1257 : f32 = u_xlat11.y;
        u_xlat10.w = x_1257;
        let x_1259 : vec4<f32> = u_xlat10;
        let x_1260 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1259 + x_1260);
        let x_1262 : vec2<f32> = u_xlat47;
        let x_1265 : vec2<f32> = ((vec2<f32>(x_1262.y, x_1262.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1266 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1266.x, x_1265.x, x_1266.z, x_1265.y);
        let x_1268 : vec2<f32> = u_xlat47;
        let x_1271 : vec2<f32> = ((vec2<f32>(x_1268.y, x_1268.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1272 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1271.x, x_1272.y, x_1271.y, x_1272.w);
        let x_1275 : f32 = u_xlat9.y;
        u_xlat11.y = x_1275;
        let x_1277 : vec4<f32> = u_xlat11;
        let x_1278 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1277 + x_1278);
        let x_1280 : vec4<f32> = u_xlat10;
        let x_1281 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1280 / x_1281);
        let x_1283 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1283 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1289 : vec4<f32> = u_xlat11;
        let x_1290 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1289 / x_1290);
        let x_1292 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1292 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1294 : vec4<f32> = u_xlat10;
        let x_1297 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1294.w, x_1294.x, x_1294.y, x_1294.z) * vec4<f32>(x_1297.x, x_1297.x, x_1297.x, x_1297.x));
        let x_1300 : vec4<f32> = u_xlat11;
        let x_1303 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1300.x, x_1300.w, x_1300.y, x_1300.z) * vec4<f32>(x_1303.y, x_1303.y, x_1303.y, x_1303.y));
        let x_1306 : vec4<f32> = u_xlat10;
        let x_1307 : vec3<f32> = vec3<f32>(x_1306.y, x_1306.z, x_1306.w);
        let x_1308 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1307.x, x_1308.y, x_1307.y, x_1307.z);
        let x_1311 : f32 = u_xlat11.x;
        u_xlat13.y = x_1311;
        let x_1313 : vec4<f32> = u_xlat3;
        let x_1316 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1319 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1313.x, x_1313.y, x_1313.x, x_1313.y) * vec4<f32>(x_1316.x, x_1316.y, x_1316.x, x_1316.y)) + vec4<f32>(x_1319.x, x_1319.y, x_1319.z, x_1319.y));
        let x_1322 : vec4<f32> = u_xlat3;
        let x_1325 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1328 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1322.x, x_1322.y) * vec2<f32>(x_1325.x, x_1325.y)) + vec2<f32>(x_1328.w, x_1328.y));
        let x_1332 : f32 = u_xlat13.y;
        u_xlat10.y = x_1332;
        let x_1335 : f32 = u_xlat11.z;
        u_xlat13.y = x_1335;
        let x_1337 : vec4<f32> = u_xlat3;
        let x_1340 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1343 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1337.x, x_1337.y, x_1337.x, x_1337.y) * vec4<f32>(x_1340.x, x_1340.y, x_1340.x, x_1340.y)) + vec4<f32>(x_1343.x, x_1343.y, x_1343.z, x_1343.y));
        let x_1346 : vec4<f32> = u_xlat3;
        let x_1349 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1352 : vec4<f32> = u_xlat13;
        let x_1354 : vec2<f32> = ((vec2<f32>(x_1346.x, x_1346.y) * vec2<f32>(x_1349.x, x_1349.y)) + vec2<f32>(x_1352.w, x_1352.y));
        let x_1355 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1354.x, x_1354.y, x_1355.z, x_1355.w);
        let x_1358 : f32 = u_xlat13.y;
        u_xlat10.z = x_1358;
        let x_1361 : vec4<f32> = u_xlat3;
        let x_1364 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1367 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1361.x, x_1361.y, x_1361.x, x_1361.y) * vec4<f32>(x_1364.x, x_1364.y, x_1364.x, x_1364.y)) + vec4<f32>(x_1367.x, x_1367.y, x_1367.x, x_1367.z));
        let x_1371 : f32 = u_xlat11.w;
        u_xlat13.y = x_1371;
        let x_1374 : vec4<f32> = u_xlat3;
        let x_1377 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1380 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1374.x, x_1374.y, x_1374.x, x_1374.y) * vec4<f32>(x_1377.x, x_1377.y, x_1377.x, x_1377.y)) + vec4<f32>(x_1380.x, x_1380.y, x_1380.z, x_1380.y));
        let x_1384 : vec4<f32> = u_xlat3;
        let x_1387 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1390 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1384.x, x_1384.y) * vec2<f32>(x_1387.x, x_1387.y)) + vec2<f32>(x_1390.w, x_1390.y));
        let x_1394 : f32 = u_xlat13.y;
        u_xlat10.w = x_1394;
        let x_1397 : vec4<f32> = u_xlat3;
        let x_1400 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1403 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1397.x, x_1397.y) * vec2<f32>(x_1400.x, x_1400.y)) + vec2<f32>(x_1403.x, x_1403.w));
        let x_1406 : vec4<f32> = u_xlat13;
        let x_1407 : vec3<f32> = vec3<f32>(x_1406.x, x_1406.z, x_1406.w);
        let x_1408 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1407.x, x_1408.y, x_1407.y, x_1407.z);
        let x_1410 : vec4<f32> = u_xlat3;
        let x_1413 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1416 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1410.x, x_1410.y, x_1410.x, x_1410.y) * vec4<f32>(x_1413.x, x_1413.y, x_1413.x, x_1413.y)) + vec4<f32>(x_1416.x, x_1416.y, x_1416.z, x_1416.y));
        let x_1420 : vec4<f32> = u_xlat3;
        let x_1423 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1426 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1420.x, x_1420.y) * vec2<f32>(x_1423.x, x_1423.y)) + vec2<f32>(x_1426.w, x_1426.y));
        let x_1430 : f32 = u_xlat10.x;
        u_xlat11.x = x_1430;
        let x_1432 : vec4<f32> = u_xlat3;
        let x_1435 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1438 : vec4<f32> = u_xlat11;
        let x_1440 : vec2<f32> = ((vec2<f32>(x_1432.x, x_1432.y) * vec2<f32>(x_1435.x, x_1435.y)) + vec2<f32>(x_1438.x, x_1438.y));
        let x_1441 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1440.x, x_1440.y, x_1441.z, x_1441.w);
        let x_1444 : vec4<f32> = u_xlat9;
        let x_1446 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1444.x, x_1444.x, x_1444.x, x_1444.x) * x_1446);
        let x_1449 : vec4<f32> = u_xlat9;
        let x_1451 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1449.y, x_1449.y, x_1449.y, x_1449.y) * x_1451);
        let x_1454 : vec4<f32> = u_xlat9;
        let x_1456 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1454.z, x_1454.z, x_1454.z, x_1454.z) * x_1456);
        let x_1458 : vec4<f32> = u_xlat9;
        let x_1460 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1458.w, x_1458.w, x_1458.w, x_1458.w) * x_1460);
        let x_1463 : vec4<f32> = u_xlat14;
        let x_1464 : vec2<f32> = vec2<f32>(x_1463.x, x_1463.y);
        let x_1466 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1464.x, x_1464.y, x_1466);
        let x_1473 : vec3<f32> = txVec13;
        let x_1475 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1473.xy, x_1473.z);
        u_xlat68 = x_1475;
        let x_1477 : vec4<f32> = u_xlat14;
        let x_1478 : vec2<f32> = vec2<f32>(x_1477.z, x_1477.w);
        let x_1480 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1478.x, x_1478.y, x_1480);
        let x_1488 : vec3<f32> = txVec14;
        let x_1490 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1488.xy, x_1488.z);
        u_xlat70 = x_1490;
        let x_1491 : f32 = u_xlat70;
        let x_1493 : f32 = u_xlat19.y;
        u_xlat70 = (x_1491 * x_1493);
        let x_1496 : f32 = u_xlat19.x;
        let x_1497 : f32 = u_xlat68;
        let x_1499 : f32 = u_xlat70;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec2<f32> = u_xlat47;
        let x_1504 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec15;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat47.x = x_1513;
        let x_1516 : f32 = u_xlat19.z;
        let x_1518 : f32 = u_xlat47.x;
        let x_1520 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1518) + x_1520);
        let x_1523 : vec4<f32> = u_xlat17;
        let x_1524 : vec2<f32> = vec2<f32>(x_1523.x, x_1523.y);
        let x_1526 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1524.x, x_1524.y, x_1526);
        let x_1533 : vec3<f32> = txVec16;
        let x_1535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1533.xy, x_1533.z);
        u_xlat47.x = x_1535;
        let x_1538 : f32 = u_xlat19.w;
        let x_1540 : f32 = u_xlat47.x;
        let x_1542 : f32 = u_xlat68;
        u_xlat68 = ((x_1538 * x_1540) + x_1542);
        let x_1545 : vec4<f32> = u_xlat15;
        let x_1546 : vec2<f32> = vec2<f32>(x_1545.x, x_1545.y);
        let x_1548 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1546.x, x_1546.y, x_1548);
        let x_1555 : vec3<f32> = txVec17;
        let x_1557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1555.xy, x_1555.z);
        u_xlat47.x = x_1557;
        let x_1560 : f32 = u_xlat20.x;
        let x_1562 : f32 = u_xlat47.x;
        let x_1564 : f32 = u_xlat68;
        u_xlat68 = ((x_1560 * x_1562) + x_1564);
        let x_1567 : vec4<f32> = u_xlat15;
        let x_1568 : vec2<f32> = vec2<f32>(x_1567.z, x_1567.w);
        let x_1570 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1568.x, x_1568.y, x_1570);
        let x_1577 : vec3<f32> = txVec18;
        let x_1579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1577.xy, x_1577.z);
        u_xlat47.x = x_1579;
        let x_1582 : f32 = u_xlat20.y;
        let x_1584 : f32 = u_xlat47.x;
        let x_1586 : f32 = u_xlat68;
        u_xlat68 = ((x_1582 * x_1584) + x_1586);
        let x_1589 : vec4<f32> = u_xlat16;
        let x_1590 : vec2<f32> = vec2<f32>(x_1589.x, x_1589.y);
        let x_1592 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1590.x, x_1590.y, x_1592);
        let x_1599 : vec3<f32> = txVec19;
        let x_1601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1599.xy, x_1599.z);
        u_xlat47.x = x_1601;
        let x_1604 : f32 = u_xlat20.z;
        let x_1606 : f32 = u_xlat47.x;
        let x_1608 : f32 = u_xlat68;
        u_xlat68 = ((x_1604 * x_1606) + x_1608);
        let x_1611 : vec4<f32> = u_xlat17;
        let x_1612 : vec2<f32> = vec2<f32>(x_1611.z, x_1611.w);
        let x_1614 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1612.x, x_1612.y, x_1614);
        let x_1621 : vec3<f32> = txVec20;
        let x_1623 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1621.xy, x_1621.z);
        u_xlat47.x = x_1623;
        let x_1626 : f32 = u_xlat20.w;
        let x_1628 : f32 = u_xlat47.x;
        let x_1630 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat18;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.x, x_1633.y);
        let x_1636 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec21;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1643.xy, x_1643.z);
        u_xlat47.x = x_1645;
        let x_1648 : f32 = u_xlat21.x;
        let x_1650 : f32 = u_xlat47.x;
        let x_1652 : f32 = u_xlat68;
        u_xlat68 = ((x_1648 * x_1650) + x_1652);
        let x_1655 : vec4<f32> = u_xlat18;
        let x_1656 : vec2<f32> = vec2<f32>(x_1655.z, x_1655.w);
        let x_1658 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1656.x, x_1656.y, x_1658);
        let x_1665 : vec3<f32> = txVec22;
        let x_1667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1665.xy, x_1665.z);
        u_xlat47.x = x_1667;
        let x_1670 : f32 = u_xlat21.y;
        let x_1672 : f32 = u_xlat47.x;
        let x_1674 : f32 = u_xlat68;
        u_xlat68 = ((x_1670 * x_1672) + x_1674);
        let x_1677 : vec2<f32> = u_xlat32;
        let x_1679 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1677.x, x_1677.y, x_1679);
        let x_1686 : vec3<f32> = txVec23;
        let x_1688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1686.xy, x_1686.z);
        u_xlat47.x = x_1688;
        let x_1691 : f32 = u_xlat21.z;
        let x_1693 : f32 = u_xlat47.x;
        let x_1695 : f32 = u_xlat68;
        u_xlat68 = ((x_1691 * x_1693) + x_1695);
        let x_1698 : vec2<f32> = u_xlat60;
        let x_1700 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1698.x, x_1698.y, x_1700);
        let x_1707 : vec3<f32> = txVec24;
        let x_1709 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1707.xy, x_1707.z);
        u_xlat47.x = x_1709;
        let x_1712 : f32 = u_xlat21.w;
        let x_1714 : f32 = u_xlat47.x;
        let x_1716 : f32 = u_xlat68;
        u_xlat68 = ((x_1712 * x_1714) + x_1716);
        let x_1719 : vec4<f32> = u_xlat13;
        let x_1720 : vec2<f32> = vec2<f32>(x_1719.x, x_1719.y);
        let x_1722 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1720.x, x_1720.y, x_1722);
        let x_1729 : vec3<f32> = txVec25;
        let x_1731 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1729.xy, x_1729.z);
        u_xlat47.x = x_1731;
        let x_1734 : f32 = u_xlat9.x;
        let x_1736 : f32 = u_xlat47.x;
        let x_1738 : f32 = u_xlat68;
        u_xlat68 = ((x_1734 * x_1736) + x_1738);
        let x_1741 : vec4<f32> = u_xlat13;
        let x_1742 : vec2<f32> = vec2<f32>(x_1741.z, x_1741.w);
        let x_1744 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1742.x, x_1742.y, x_1744);
        let x_1751 : vec3<f32> = txVec26;
        let x_1753 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1751.xy, x_1751.z);
        u_xlat47.x = x_1753;
        let x_1756 : f32 = u_xlat9.y;
        let x_1758 : f32 = u_xlat47.x;
        let x_1760 : f32 = u_xlat68;
        u_xlat68 = ((x_1756 * x_1758) + x_1760);
        let x_1763 : vec2<f32> = u_xlat55;
        let x_1765 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1763.x, x_1763.y, x_1765);
        let x_1772 : vec3<f32> = txVec27;
        let x_1774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1772.xy, x_1772.z);
        u_xlat47.x = x_1774;
        let x_1777 : f32 = u_xlat9.z;
        let x_1779 : f32 = u_xlat47.x;
        let x_1781 : f32 = u_xlat68;
        u_xlat68 = ((x_1777 * x_1779) + x_1781);
        let x_1784 : vec4<f32> = u_xlat3;
        let x_1785 : vec2<f32> = vec2<f32>(x_1784.x, x_1784.y);
        let x_1787 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1785.x, x_1785.y, x_1787);
        let x_1794 : vec3<f32> = txVec28;
        let x_1796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1794.xy, x_1794.z);
        u_xlat3.x = x_1796;
        let x_1799 : f32 = u_xlat9.w;
        let x_1801 : f32 = u_xlat3.x;
        let x_1803 : f32 = u_xlat68;
        u_xlat67 = ((x_1799 * x_1801) + x_1803);
      }
    }
  } else {
    let x_1807 : vec4<f32> = u_xlat2;
    let x_1808 : vec2<f32> = vec2<f32>(x_1807.x, x_1807.y);
    let x_1810 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1808.x, x_1808.y, x_1810);
    let x_1817 : vec3<f32> = txVec29;
    let x_1819 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1817.xy, x_1817.z);
    u_xlat67 = x_1819;
  }
  let x_1821 : f32 = x_379.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1821) + 1.0f);
  let x_1824 : f32 = u_xlat67;
  let x_1826 : f32 = x_379.x_MainLightShadowParams.x;
  let x_1828 : f32 = u_xlat68;
  u_xlat67 = ((x_1824 * x_1826) + x_1828);
  let x_1832 : f32 = u_xlat2.z;
  u_xlatb3.x = (0.0f >= x_1832);
  let x_1837 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1837 >= 1.0f);
  let x_1839 : bool = u_xlatb25;
  let x_1841 : bool = u_xlatb3.x;
  u_xlatb3.x = (x_1839 | x_1841);
  let x_1845 : bool = u_xlatb3.x;
  let x_1846 : f32 = u_xlat67;
  u_xlat67 = select(x_1846, 1.0f, x_1845);
  let x_1848 : vec3<f32> = u_xlat1;
  let x_1850 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1848, -(vec3<f32>(x_1850.x, x_1850.y, x_1850.z)));
  let x_1856 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1856, 0.0f, 1.0f);
  let x_1860 : f32 = u_xlat67;
  let x_1863 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1860, x_1860, x_1860) * vec3<f32>(x_1863.x, x_1863.y, x_1863.z));
  let x_1866 : vec3<f32> = u_xlat23;
  let x_1867 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1866 * vec3<f32>(x_1867.x, x_1867.x, x_1867.x));
  let x_1870 : vec3<f32> = u_xlat1;
  let x_1871 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1870 * vec3<f32>(x_1871.x, x_1871.y, x_1871.z));
  let x_1875 : f32 = x_94.unity_LODFade.x;
  u_xlatb67 = (x_1875 < 0.0f);
  let x_1878 : f32 = x_94.unity_LODFade.x;
  u_xlat25 = (x_1878 + 1.0f);
  let x_1880 : bool = u_xlatb67;
  if (x_1880) {
    let x_1884 : f32 = u_xlat25;
    x_1881 = x_1884;
  } else {
    let x_1887 : f32 = x_94.unity_LODFade.x;
    x_1881 = x_1887;
  }
  let x_1888 : f32 = x_1881;
  u_xlat67 = x_1888;
  let x_1889 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1889);
  let x_1891 : vec4<f32> = u_xlat5;
  let x_1896 : vec4<f32> = x_160.x_ScreenParams;
  let x_1898 : vec3<f32> = (abs(vec3<f32>(x_1891.x, x_1891.y, x_1891.z)) * vec3<f32>(x_1896.x, x_1896.y, x_1896.x));
  let x_1899 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1898.x, x_1898.y, x_1898.z, x_1899.w);
  let x_1904 : vec4<f32> = u_xlat5;
  u_xlatu5 = vec3<u32>(vec3<f32>(x_1904.x, x_1904.y, x_1904.z));
  let x_1909 : u32 = u_xlatu5.z;
  u_xlatu47 = (x_1909 * 1025u);
  let x_1913 : u32 = u_xlatu47;
  u_xlatu69 = (x_1913 >> 6u);
  let x_1917 : u32 = u_xlatu69;
  let x_1918 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1917 ^ x_1918));
  let x_1921 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1921) * 9u);
  let x_1925 : u32 = u_xlatu47;
  u_xlatu69 = (x_1925 >> 11u);
  let x_1928 : u32 = u_xlatu69;
  let x_1929 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1928 ^ x_1929));
  let x_1932 : i32 = u_xlati47;
  u_xlati47 = (x_1932 * 32769i);
  let x_1935 : i32 = u_xlati47;
  let x_1938 : u32 = u_xlatu5.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1935) ^ x_1938));
  let x_1941 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1941) * 1025u);
  let x_1944 : u32 = u_xlatu47;
  u_xlatu69 = (x_1944 >> 6u);
  let x_1946 : u32 = u_xlatu69;
  let x_1947 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1946 ^ x_1947));
  let x_1950 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1950) * 9u);
  let x_1953 : u32 = u_xlatu47;
  u_xlatu69 = (x_1953 >> 11u);
  let x_1955 : u32 = u_xlatu69;
  let x_1956 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1955 ^ x_1956));
  let x_1959 : i32 = u_xlati47;
  u_xlati47 = (x_1959 * 32769i);
  let x_1961 : i32 = u_xlati47;
  let x_1964 : u32 = u_xlatu5.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1961) ^ x_1964));
  let x_1967 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1967) * 1025u);
  let x_1970 : u32 = u_xlatu47;
  u_xlatu69 = (x_1970 >> 6u);
  let x_1972 : u32 = u_xlatu69;
  let x_1973 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1972 ^ x_1973));
  let x_1976 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1976) * 9u);
  let x_1979 : u32 = u_xlatu47;
  u_xlatu69 = (x_1979 >> 11u);
  let x_1981 : u32 = u_xlatu69;
  let x_1982 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1981 ^ x_1982));
  let x_1985 : i32 = u_xlati47;
  u_xlati47 = (x_1985 * 32769i);
  param = 1065353216i;
  let x_1991 : i32 = u_xlati47;
  param_1 = x_1991;
  param_2 = 0i;
  param_3 = 23i;
  let x_1994 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_1994);
  let x_1998 : f32 = u_xlat47.x;
  u_xlat47.x = (x_1998 + -1.0f);
  let x_2003 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_2003) + 1.0f);
  let x_2006 : bool = u_xlatb25;
  if (x_2006) {
    let x_2011 : f32 = u_xlat47.x;
    x_2007 = x_2011;
  } else {
    let x_2013 : f32 = u_xlat69;
    x_2007 = x_2013;
  }
  let x_2014 : f32 = x_2007;
  u_xlat25 = x_2014;
  let x_2015 : f32 = u_xlat67;
  let x_2017 : f32 = u_xlat25;
  u_xlat67 = ((x_2015 * 2.0f) + -(x_2017));
  let x_2020 : f32 = u_xlat67;
  let x_2022 : f32 = u_xlat6.w;
  u_xlat25 = (x_2020 * x_2022);
  let x_2025 : f32 = u_xlat25;
  u_xlatb47 = (x_2025 >= 0.400000006f);
  let x_2028 : bool = u_xlatb47;
  let x_2029 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2029, x_2028);
  let x_2033 : f32 = u_xlat6.w;
  let x_2034 : f32 = u_xlat67;
  u_xlat67 = ((x_2033 * x_2034) + -0.400000006f);
  let x_2038 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2038);
  let x_2040 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2040);
  let x_2042 : f32 = u_xlat25;
  let x_2044 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2042) + abs(x_2044));
  let x_2047 : f32 = u_xlat25;
  u_xlat25 = max(x_2047, 0.0001f);
  let x_2050 : f32 = u_xlat67;
  let x_2051 : f32 = u_xlat25;
  u_xlat67 = (x_2050 / x_2051);
  let x_2053 : f32 = u_xlat67;
  u_xlat67 = (x_2053 + 0.5f);
  let x_2055 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2055, 0.0f, 1.0f);
  let x_2058 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2058 == 0.0f));
  let x_2060 : bool = u_xlatb25;
  if (x_2060) {
    let x_2064 : f32 = u_xlat67;
    x_2061 = x_2064;
  } else {
    let x_2067 : f32 = u_xlat47.x;
    x_2061 = x_2067;
  }
  let x_2068 : f32 = x_2061;
  u_xlat67 = x_2068;
  let x_2069 : f32 = u_xlat67;
  u_xlat47.x = (x_2069 + -0.0001f);
  let x_2074 : f32 = u_xlat47.x;
  u_xlatb47 = (x_2074 < 0.0f);
  let x_2076 : bool = u_xlatb47;
  if (((select(0i, 1i, x_2076) * -1i) != 0i)) {
    discard;
  }
  let x_2084 : vec3<f32> = u_xlat22;
  let x_2085 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2084 * vec3<f32>(x_2085.y, x_2085.y, x_2085.y));
  let x_2088 : vec3<f32> = u_xlat30;
  let x_2090 : vec4<f32> = vs_INTERP2;
  let x_2093 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2088.x, x_2088.x, x_2088.x) * vec3<f32>(x_2090.x, x_2090.y, x_2090.z)) + x_2093);
  let x_2095 : vec3<f32> = u_xlat30;
  let x_2097 : vec3<f32> = vs_INTERP1;
  let x_2099 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2095.z, x_2095.z, x_2095.z) * x_2097) + x_2099);
  let x_2101 : vec3<f32> = u_xlat22;
  let x_2102 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2101, x_2102);
  let x_2106 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2106);
  let x_2109 : vec3<f32> = u_xlat22;
  let x_2110 : vec2<f32> = u_xlat47;
  let x_2112 : vec3<f32> = (x_2109 * vec3<f32>(x_2110.x, x_2110.x, x_2110.x));
  let x_2113 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2112.x, x_2112.y, x_2112.z, x_2113.w);
  let x_2116 : f32 = vs_INTERP0.y;
  let x_2118 : f32 = x_160.unity_MatrixV[1i].z;
  u_xlat22.x = (x_2116 * x_2118);
  let x_2122 : f32 = x_160.unity_MatrixV[0i].z;
  let x_2124 : f32 = vs_INTERP0.x;
  let x_2127 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2122 * x_2124) + x_2127);
  let x_2131 : f32 = x_160.unity_MatrixV[2i].z;
  let x_2133 : f32 = vs_INTERP0.z;
  let x_2136 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2131 * x_2133) + x_2136);
  let x_2140 : f32 = u_xlat22.x;
  let x_2142 : f32 = x_160.unity_MatrixV[3i].z;
  u_xlat22.x = (x_2140 + x_2142);
  let x_2146 : f32 = u_xlat22.x;
  let x_2150 : f32 = x_160.x_ProjectionParams.y;
  u_xlat22.x = (-(x_2146) + -(x_2150));
  let x_2155 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_2155, 0.0f);
  let x_2159 : f32 = u_xlat22.x;
  let x_2162 : f32 = x_160.unity_FogParams.x;
  u_xlat22.x = (x_2159 * x_2162);
  u_xlat5.w = 1.0f;
  let x_2168 : vec4<f32> = x_94.unity_SHAr;
  let x_2169 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_2168, x_2169);
  let x_2174 : vec4<f32> = x_94.unity_SHAg;
  let x_2175 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_2174, x_2175);
  let x_2180 : vec4<f32> = x_94.unity_SHAb;
  let x_2181 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_2180, x_2181);
  let x_2184 : vec4<f32> = u_xlat5;
  let x_2186 : vec4<f32> = u_xlat5;
  u_xlat9 = (vec4<f32>(x_2184.y, x_2184.z, x_2184.z, x_2184.x) * vec4<f32>(x_2186.x, x_2186.y, x_2186.z, x_2186.z));
  let x_2191 : vec4<f32> = x_94.unity_SHBr;
  let x_2192 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_2191, x_2192);
  let x_2197 : vec4<f32> = x_94.unity_SHBg;
  let x_2198 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_2197, x_2198);
  let x_2202 : vec4<f32> = x_94.unity_SHBb;
  let x_2203 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_2202, x_2203);
  let x_2208 : f32 = u_xlat5.y;
  let x_2210 : f32 = u_xlat5.y;
  u_xlat44.x = (x_2208 * x_2210);
  let x_2214 : f32 = u_xlat5.x;
  let x_2216 : f32 = u_xlat5.x;
  let x_2219 : f32 = u_xlat44.x;
  u_xlat44.x = ((x_2214 * x_2216) + -(x_2219));
  let x_2225 : vec4<f32> = x_94.unity_SHC;
  let x_2227 : vec2<f32> = u_xlat44;
  let x_2230 : vec4<f32> = u_xlat10;
  u_xlat30 = ((vec3<f32>(x_2225.x, x_2225.y, x_2225.z) * vec3<f32>(x_2227.x, x_2227.x, x_2227.x)) + vec3<f32>(x_2230.x, x_2230.y, x_2230.z));
  let x_2233 : vec4<f32> = u_xlat6;
  let x_2235 : vec3<f32> = u_xlat30;
  let x_2236 : vec3<f32> = (vec3<f32>(x_2233.x, x_2233.y, x_2233.z) + x_2235);
  let x_2237 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2236.x, x_2236.y, x_2236.z, x_2237.w);
  let x_2239 : vec4<f32> = u_xlat6;
  let x_2241 : vec3<f32> = max(vec3<f32>(x_2239.x, x_2239.y, x_2239.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2242 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2241.x, x_2241.y, x_2241.z, x_2242.w);
  let x_2245 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2246 : vec2<f32> = vec2<f32>(x_2245.x, x_2245.y);
  u_xlat44 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2246.x, x_2246.y));
  let x_2251 : vec2<f32> = u_xlat44;
  let x_2252 : vec4<f32> = hlslcc_FragCoord;
  let x_2254 : vec2<f32> = (x_2251 * vec2<f32>(x_2252.x, x_2252.y));
  let x_2255 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2254.x, x_2254.y, x_2255.z, x_2255.w);
  let x_2258 : f32 = u_xlat9.y;
  let x_2261 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2264 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat44.x = ((x_2258 * x_2261) + x_2264);
  let x_2268 : f32 = u_xlat44.x;
  u_xlat9.z = (-(x_2268) + 1.0f);
  let x_2273 : f32 = u_xlat8.x;
  u_xlat8.x = x_2273;
  let x_2276 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2276, 0.0f, 1.0f);
  let x_2279 : f32 = u_xlat67;
  u_xlat67 = x_2279;
  let x_2280 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2280, 0.0f, 1.0f);
  let x_2282 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2282 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2287 : f32 = u_xlat8.x;
  u_xlat44.x = (-(x_2287) + 1.0f);
  let x_2293 : f32 = u_xlat44.x;
  let x_2295 : f32 = u_xlat44.x;
  u_xlat66 = (x_2293 * x_2295);
  let x_2297 : f32 = u_xlat66;
  u_xlat66 = max(x_2297, 0.0078125f);
  let x_2300 : f32 = u_xlat66;
  let x_2301 : f32 = u_xlat66;
  u_xlat47.x = (x_2300 * x_2301);
  let x_2305 : f32 = u_xlat8.x;
  u_xlat69 = (x_2305 + 0.040000021f);
  let x_2308 : f32 = u_xlat69;
  u_xlat69 = min(x_2308, 1.0f);
  let x_2310 : f32 = u_xlat66;
  u_xlat70 = ((x_2310 * 4.0f) + 2.0f);
  let x_2319 : vec4<f32> = u_xlat9;
  let x_2322 : f32 = x_160.x_GlobalMipBias.x;
  let x_2323 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2319.x, x_2319.z), x_2322);
  u_xlat71 = x_2323.x;
  let x_2326 : f32 = u_xlat71;
  u_xlat72 = (x_2326 + -1.0f);
  let x_2329 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2330 : f32 = u_xlat72;
  u_xlat72 = ((x_2329 * x_2330) + 1.0f);
  let x_2333 : f32 = u_xlat71;
  let x_2335 : f32 = vs_INTERP4.w;
  u_xlat71 = min(x_2333, x_2335);
  let x_2337 : bool = u_xlatb0;
  if (x_2337) {
    let x_2341 : f32 = x_379.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2341 == 1.0f);
    let x_2343 : bool = u_xlatb0;
    if (x_2343) {
      let x_2346 : vec4<f32> = u_xlat2;
      let x_2349 : vec4<f32> = x_379.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2346.x, x_2346.y, x_2346.x, x_2346.y) + x_2349);
      let x_2352 : vec4<f32> = u_xlat8;
      let x_2353 : vec2<f32> = vec2<f32>(x_2352.x, x_2352.y);
      let x_2355 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2353.x, x_2353.y, x_2355);
      let x_2362 : vec3<f32> = txVec30;
      let x_2364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2362.xy, x_2362.z);
      u_xlat9.x = x_2364;
      let x_2367 : vec4<f32> = u_xlat8;
      let x_2368 : vec2<f32> = vec2<f32>(x_2367.z, x_2367.w);
      let x_2370 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2368.x, x_2368.y, x_2370);
      let x_2377 : vec3<f32> = txVec31;
      let x_2379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2377.xy, x_2377.z);
      u_xlat9.y = x_2379;
      let x_2381 : vec4<f32> = u_xlat2;
      let x_2384 : vec4<f32> = x_379.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2381.x, x_2381.y, x_2381.x, x_2381.y) + x_2384);
      let x_2387 : vec4<f32> = u_xlat8;
      let x_2388 : vec2<f32> = vec2<f32>(x_2387.x, x_2387.y);
      let x_2390 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2388.x, x_2388.y, x_2390);
      let x_2397 : vec3<f32> = txVec32;
      let x_2399 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2397.xy, x_2397.z);
      u_xlat9.z = x_2399;
      let x_2402 : vec4<f32> = u_xlat8;
      let x_2403 : vec2<f32> = vec2<f32>(x_2402.z, x_2402.w);
      let x_2405 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2403.x, x_2403.y, x_2405);
      let x_2412 : vec3<f32> = txVec33;
      let x_2414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2412.xy, x_2412.z);
      u_xlat9.w = x_2414;
      let x_2416 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2416, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2422 : f32 = x_379.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2422 == 2.0f);
      let x_2424 : bool = u_xlatb73;
      if (x_2424) {
        let x_2427 : vec4<f32> = u_xlat2;
        let x_2430 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2433 : vec2<f32> = ((vec2<f32>(x_2427.x, x_2427.y) * vec2<f32>(x_2430.z, x_2430.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2434 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2433.x, x_2433.y, x_2434.z, x_2434.w);
        let x_2436 : vec4<f32> = u_xlat8;
        let x_2438 : vec2<f32> = floor(vec2<f32>(x_2436.x, x_2436.y));
        let x_2439 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2438.x, x_2438.y, x_2439.z, x_2439.w);
        let x_2442 : vec4<f32> = u_xlat2;
        let x_2445 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2448 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2442.x, x_2442.y) * vec2<f32>(x_2445.z, x_2445.w)) + -(vec2<f32>(x_2448.x, x_2448.y)));
        let x_2452 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2452.x, x_2452.x, x_2452.y, x_2452.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2455 : vec4<f32> = u_xlat9;
        let x_2457 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2455.x, x_2455.x, x_2455.z, x_2455.z) * vec4<f32>(x_2457.x, x_2457.x, x_2457.z, x_2457.z));
        let x_2460 : vec4<f32> = u_xlat10;
        let x_2462 : vec2<f32> = (vec2<f32>(x_2460.y, x_2460.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2463 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2462.x, x_2463.y, x_2462.y, x_2463.w);
        let x_2465 : vec4<f32> = u_xlat10;
        let x_2468 : vec2<f32> = u_xlat52;
        let x_2470 : vec2<f32> = ((vec2<f32>(x_2465.x, x_2465.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2468));
        let x_2471 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2470.x, x_2470.y, x_2471.z, x_2471.w);
        let x_2473 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2473) + vec2<f32>(1.0f, 1.0f));
        let x_2476 : vec2<f32> = u_xlat52;
        let x_2477 : vec2<f32> = min(x_2476, vec2<f32>(0.0f, 0.0f));
        let x_2478 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2477.x, x_2477.y, x_2478.z, x_2478.w);
        let x_2480 : vec4<f32> = u_xlat11;
        let x_2483 : vec4<f32> = u_xlat11;
        let x_2486 : vec2<f32> = u_xlat54;
        let x_2487 : vec2<f32> = ((-(vec2<f32>(x_2480.x, x_2480.y)) * vec2<f32>(x_2483.x, x_2483.y)) + x_2486);
        let x_2488 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2487.x, x_2487.y, x_2488.z, x_2488.w);
        let x_2490 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2490, vec2<f32>(0.0f, 0.0f));
        let x_2492 : vec2<f32> = u_xlat52;
        let x_2494 : vec2<f32> = u_xlat52;
        let x_2496 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2492) * x_2494) + vec2<f32>(x_2496.y, x_2496.w));
        let x_2499 : vec4<f32> = u_xlat11;
        let x_2501 : vec2<f32> = (vec2<f32>(x_2499.x, x_2499.y) + vec2<f32>(1.0f, 1.0f));
        let x_2502 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2501.x, x_2501.y, x_2502.z, x_2502.w);
        let x_2504 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2504 + vec2<f32>(1.0f, 1.0f));
        let x_2506 : vec4<f32> = u_xlat10;
        let x_2508 : vec2<f32> = (vec2<f32>(x_2506.x, x_2506.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2509 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2508.x, x_2508.y, x_2509.z, x_2509.w);
        let x_2511 : vec2<f32> = u_xlat54;
        let x_2512 : vec2<f32> = (x_2511 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2513 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2512.x, x_2512.y, x_2513.z, x_2513.w);
        let x_2515 : vec4<f32> = u_xlat11;
        let x_2517 : vec2<f32> = (vec2<f32>(x_2515.x, x_2515.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2518 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2517.x, x_2517.y, x_2518.z, x_2518.w);
        let x_2520 : vec2<f32> = u_xlat52;
        let x_2521 : vec2<f32> = (x_2520 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2522 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2521.x, x_2521.y, x_2522.z, x_2522.w);
        let x_2524 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2524.y, x_2524.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2528 : f32 = u_xlat11.x;
        u_xlat12.z = x_2528;
        let x_2531 : f32 = u_xlat52.x;
        u_xlat12.w = x_2531;
        let x_2534 : f32 = u_xlat13.x;
        u_xlat10.z = x_2534;
        let x_2537 : f32 = u_xlat9.x;
        u_xlat10.w = x_2537;
        let x_2539 : vec4<f32> = u_xlat10;
        let x_2541 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2539.z, x_2539.w, x_2539.x, x_2539.z) + vec4<f32>(x_2541.z, x_2541.w, x_2541.x, x_2541.z));
        let x_2545 : f32 = u_xlat12.y;
        u_xlat11.z = x_2545;
        let x_2548 : f32 = u_xlat52.y;
        u_xlat11.w = x_2548;
        let x_2551 : f32 = u_xlat10.y;
        u_xlat13.z = x_2551;
        let x_2554 : f32 = u_xlat9.z;
        u_xlat13.w = x_2554;
        let x_2556 : vec4<f32> = u_xlat11;
        let x_2558 : vec4<f32> = u_xlat13;
        let x_2560 : vec3<f32> = (vec3<f32>(x_2556.z, x_2556.y, x_2556.w) + vec3<f32>(x_2558.z, x_2558.y, x_2558.w));
        let x_2561 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2560.x, x_2560.y, x_2560.z, x_2561.w);
        let x_2563 : vec4<f32> = u_xlat10;
        let x_2565 : vec4<f32> = u_xlat14;
        let x_2567 : vec3<f32> = (vec3<f32>(x_2563.x, x_2563.z, x_2563.w) / vec3<f32>(x_2565.z, x_2565.w, x_2565.y));
        let x_2568 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2567.x, x_2567.y, x_2567.z, x_2568.w);
        let x_2570 : vec4<f32> = u_xlat10;
        let x_2572 : vec3<f32> = (vec3<f32>(x_2570.x, x_2570.y, x_2570.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2573 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2572.x, x_2572.y, x_2572.z, x_2573.w);
        let x_2575 : vec4<f32> = u_xlat13;
        let x_2577 : vec4<f32> = u_xlat9;
        let x_2579 : vec3<f32> = (vec3<f32>(x_2575.z, x_2575.y, x_2575.w) / vec3<f32>(x_2577.x, x_2577.y, x_2577.z));
        let x_2580 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2579.x, x_2579.y, x_2579.z, x_2580.w);
        let x_2582 : vec4<f32> = u_xlat11;
        let x_2584 : vec3<f32> = (vec3<f32>(x_2582.x, x_2582.y, x_2582.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2585 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2584.x, x_2584.y, x_2584.z, x_2585.w);
        let x_2587 : vec4<f32> = u_xlat10;
        let x_2590 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2592 : vec3<f32> = (vec3<f32>(x_2587.y, x_2587.x, x_2587.z) * vec3<f32>(x_2590.x, x_2590.x, x_2590.x));
        let x_2593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2592.x, x_2592.y, x_2592.z, x_2593.w);
        let x_2595 : vec4<f32> = u_xlat11;
        let x_2598 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2600 : vec3<f32> = (vec3<f32>(x_2595.x, x_2595.y, x_2595.z) * vec3<f32>(x_2598.y, x_2598.y, x_2598.y));
        let x_2601 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2600.x, x_2600.y, x_2600.z, x_2601.w);
        let x_2604 : f32 = u_xlat11.x;
        u_xlat10.w = x_2604;
        let x_2606 : vec4<f32> = u_xlat8;
        let x_2609 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2612 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2606.x, x_2606.y, x_2606.x, x_2606.y) * vec4<f32>(x_2609.x, x_2609.y, x_2609.x, x_2609.y)) + vec4<f32>(x_2612.y, x_2612.w, x_2612.x, x_2612.w));
        let x_2615 : vec4<f32> = u_xlat8;
        let x_2618 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2621 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2615.x, x_2615.y) * vec2<f32>(x_2618.x, x_2618.y)) + vec2<f32>(x_2621.z, x_2621.w));
        let x_2625 : f32 = u_xlat10.y;
        u_xlat11.w = x_2625;
        let x_2627 : vec4<f32> = u_xlat11;
        let x_2628 : vec2<f32> = vec2<f32>(x_2627.y, x_2627.z);
        let x_2629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2629.x, x_2628.x, x_2629.z, x_2628.y);
        let x_2631 : vec4<f32> = u_xlat8;
        let x_2634 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2637 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2631.x, x_2631.y, x_2631.x, x_2631.y) * vec4<f32>(x_2634.x, x_2634.y, x_2634.x, x_2634.y)) + vec4<f32>(x_2637.x, x_2637.y, x_2637.z, x_2637.y));
        let x_2640 : vec4<f32> = u_xlat8;
        let x_2643 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2646 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2640.x, x_2640.y, x_2640.x, x_2640.y) * vec4<f32>(x_2643.x, x_2643.y, x_2643.x, x_2643.y)) + vec4<f32>(x_2646.w, x_2646.y, x_2646.w, x_2646.z));
        let x_2649 : vec4<f32> = u_xlat8;
        let x_2652 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2655 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2649.x, x_2649.y, x_2649.x, x_2649.y) * vec4<f32>(x_2652.x, x_2652.y, x_2652.x, x_2652.y)) + vec4<f32>(x_2655.x, x_2655.w, x_2655.z, x_2655.w));
        let x_2658 : vec4<f32> = u_xlat9;
        let x_2660 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2658.x, x_2658.x, x_2658.x, x_2658.y) * vec4<f32>(x_2660.z, x_2660.w, x_2660.y, x_2660.z));
        let x_2663 : vec4<f32> = u_xlat9;
        let x_2665 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2663.y, x_2663.y, x_2663.z, x_2663.z) * x_2665);
        let x_2669 : f32 = u_xlat9.z;
        let x_2671 : f32 = u_xlat14.y;
        u_xlat73 = (x_2669 * x_2671);
        let x_2674 : vec4<f32> = u_xlat12;
        let x_2675 : vec2<f32> = vec2<f32>(x_2674.x, x_2674.y);
        let x_2677 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2675.x, x_2675.y, x_2677);
        let x_2684 : vec3<f32> = txVec34;
        let x_2686 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2684.xy, x_2684.z);
        u_xlat8.x = x_2686;
        let x_2689 : vec4<f32> = u_xlat12;
        let x_2690 : vec2<f32> = vec2<f32>(x_2689.z, x_2689.w);
        let x_2692 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2690.x, x_2690.y, x_2692);
        let x_2699 : vec3<f32> = txVec35;
        let x_2701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2699.xy, x_2699.z);
        u_xlat30.x = x_2701;
        let x_2704 : f32 = u_xlat30.x;
        let x_2706 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2704 * x_2706);
        let x_2710 : f32 = u_xlat15.x;
        let x_2712 : f32 = u_xlat8.x;
        let x_2715 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2710 * x_2712) + x_2715);
        let x_2719 : vec2<f32> = u_xlat52;
        let x_2721 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2719.x, x_2719.y, x_2721);
        let x_2728 : vec3<f32> = txVec36;
        let x_2730 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2728.xy, x_2728.z);
        u_xlat30.x = x_2730;
        let x_2733 : f32 = u_xlat15.z;
        let x_2735 : f32 = u_xlat30.x;
        let x_2738 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2733 * x_2735) + x_2738);
        let x_2742 : vec4<f32> = u_xlat11;
        let x_2743 : vec2<f32> = vec2<f32>(x_2742.x, x_2742.y);
        let x_2745 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2743.x, x_2743.y, x_2745);
        let x_2752 : vec3<f32> = txVec37;
        let x_2754 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2752.xy, x_2752.z);
        u_xlat30.x = x_2754;
        let x_2757 : f32 = u_xlat15.w;
        let x_2759 : f32 = u_xlat30.x;
        let x_2762 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2757 * x_2759) + x_2762);
        let x_2766 : vec4<f32> = u_xlat13;
        let x_2767 : vec2<f32> = vec2<f32>(x_2766.x, x_2766.y);
        let x_2769 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2767.x, x_2767.y, x_2769);
        let x_2776 : vec3<f32> = txVec38;
        let x_2778 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2776.xy, x_2776.z);
        u_xlat30.x = x_2778;
        let x_2781 : f32 = u_xlat16.x;
        let x_2783 : f32 = u_xlat30.x;
        let x_2786 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2781 * x_2783) + x_2786);
        let x_2790 : vec4<f32> = u_xlat13;
        let x_2791 : vec2<f32> = vec2<f32>(x_2790.z, x_2790.w);
        let x_2793 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2791.x, x_2791.y, x_2793);
        let x_2800 : vec3<f32> = txVec39;
        let x_2802 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2800.xy, x_2800.z);
        u_xlat30.x = x_2802;
        let x_2805 : f32 = u_xlat16.y;
        let x_2807 : f32 = u_xlat30.x;
        let x_2810 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2805 * x_2807) + x_2810);
        let x_2814 : vec4<f32> = u_xlat11;
        let x_2815 : vec2<f32> = vec2<f32>(x_2814.z, x_2814.w);
        let x_2817 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2815.x, x_2815.y, x_2817);
        let x_2824 : vec3<f32> = txVec40;
        let x_2826 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2824.xy, x_2824.z);
        u_xlat30.x = x_2826;
        let x_2829 : f32 = u_xlat16.z;
        let x_2831 : f32 = u_xlat30.x;
        let x_2834 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2829 * x_2831) + x_2834);
        let x_2838 : vec4<f32> = u_xlat10;
        let x_2839 : vec2<f32> = vec2<f32>(x_2838.x, x_2838.y);
        let x_2841 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2839.x, x_2839.y, x_2841);
        let x_2848 : vec3<f32> = txVec41;
        let x_2850 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2848.xy, x_2848.z);
        u_xlat30.x = x_2850;
        let x_2853 : f32 = u_xlat16.w;
        let x_2855 : f32 = u_xlat30.x;
        let x_2858 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2853 * x_2855) + x_2858);
        let x_2862 : vec4<f32> = u_xlat10;
        let x_2863 : vec2<f32> = vec2<f32>(x_2862.z, x_2862.w);
        let x_2865 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2863.x, x_2863.y, x_2865);
        let x_2872 : vec3<f32> = txVec42;
        let x_2874 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2872.xy, x_2872.z);
        u_xlat30.x = x_2874;
        let x_2876 : f32 = u_xlat73;
        let x_2878 : f32 = u_xlat30.x;
        let x_2881 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_2876 * x_2878) + x_2881);
      } else {
        let x_2885 : vec4<f32> = u_xlat2;
        let x_2888 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2891 : vec2<f32> = ((vec2<f32>(x_2885.x, x_2885.y) * vec2<f32>(x_2888.z, x_2888.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2892 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2891.x, x_2891.y, x_2892.z, x_2892.w);
        let x_2894 : vec4<f32> = u_xlat8;
        let x_2896 : vec2<f32> = floor(vec2<f32>(x_2894.x, x_2894.y));
        let x_2897 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2896.x, x_2896.y, x_2897.z, x_2897.w);
        let x_2899 : vec4<f32> = u_xlat2;
        let x_2902 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2905 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2899.x, x_2899.y) * vec2<f32>(x_2902.z, x_2902.w)) + -(vec2<f32>(x_2905.x, x_2905.y)));
        let x_2909 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2909.x, x_2909.x, x_2909.y, x_2909.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2912 : vec4<f32> = u_xlat9;
        let x_2914 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2912.x, x_2912.x, x_2912.z, x_2912.z) * vec4<f32>(x_2914.x, x_2914.x, x_2914.z, x_2914.z));
        let x_2917 : vec4<f32> = u_xlat10;
        let x_2919 : vec2<f32> = (vec2<f32>(x_2917.y, x_2917.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2920 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2920.x, x_2919.x, x_2920.z, x_2919.y);
        let x_2922 : vec4<f32> = u_xlat10;
        let x_2925 : vec2<f32> = u_xlat52;
        let x_2927 : vec2<f32> = ((vec2<f32>(x_2922.x, x_2922.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2925));
        let x_2928 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2927.x, x_2928.y, x_2927.y, x_2928.w);
        let x_2930 : vec2<f32> = u_xlat52;
        let x_2932 : vec2<f32> = (-(x_2930) + vec2<f32>(1.0f, 1.0f));
        let x_2933 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2932.x, x_2932.y, x_2933.z, x_2933.w);
        let x_2935 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2935, vec2<f32>(0.0f, 0.0f));
        let x_2937 : vec2<f32> = u_xlat54;
        let x_2939 : vec2<f32> = u_xlat54;
        let x_2941 : vec4<f32> = u_xlat10;
        let x_2943 : vec2<f32> = ((-(x_2937) * x_2939) + vec2<f32>(x_2941.x, x_2941.y));
        let x_2944 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2943.x, x_2943.y, x_2944.z, x_2944.w);
        let x_2946 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2946, vec2<f32>(0.0f, 0.0f));
        let x_2948 : vec2<f32> = u_xlat54;
        let x_2950 : vec2<f32> = u_xlat54;
        let x_2952 : vec4<f32> = u_xlat9;
        let x_2954 : vec2<f32> = ((-(x_2948) * x_2950) + vec2<f32>(x_2952.y, x_2952.w));
        let x_2955 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2954.x, x_2955.y, x_2954.y);
        let x_2957 : vec4<f32> = u_xlat10;
        let x_2959 : vec2<f32> = (vec2<f32>(x_2957.x, x_2957.y) + vec2<f32>(2.0f, 2.0f));
        let x_2960 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2959.x, x_2959.y, x_2960.z, x_2960.w);
        let x_2962 : vec3<f32> = u_xlat31;
        let x_2964 : vec2<f32> = (vec2<f32>(x_2962.x, x_2962.z) + vec2<f32>(2.0f, 2.0f));
        let x_2965 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2965.x, x_2964.x, x_2965.z, x_2964.y);
        let x_2968 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2968 * 0.081632003f);
        let x_2971 : vec4<f32> = u_xlat9;
        let x_2973 : vec3<f32> = (vec3<f32>(x_2971.z, x_2971.x, x_2971.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2974 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2973.x, x_2973.y, x_2973.z, x_2974.w);
        let x_2976 : vec4<f32> = u_xlat10;
        let x_2978 : vec2<f32> = (vec2<f32>(x_2976.x, x_2976.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2979 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2978.x, x_2978.y, x_2979.z, x_2979.w);
        let x_2982 : f32 = u_xlat13.y;
        u_xlat12.x = x_2982;
        let x_2984 : vec2<f32> = u_xlat52;
        let x_2987 : vec2<f32> = ((vec2<f32>(x_2984.x, x_2984.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2988 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2988.x, x_2987.x, x_2988.z, x_2987.y);
        let x_2990 : vec2<f32> = u_xlat52;
        let x_2993 : vec2<f32> = ((vec2<f32>(x_2990.x, x_2990.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2994 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2993.x, x_2994.y, x_2993.y, x_2994.w);
        let x_2997 : f32 = u_xlat9.x;
        u_xlat10.y = x_2997;
        let x_3000 : f32 = u_xlat11.y;
        u_xlat10.w = x_3000;
        let x_3002 : vec4<f32> = u_xlat10;
        let x_3003 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_3002 + x_3003);
        let x_3005 : vec2<f32> = u_xlat52;
        let x_3008 : vec2<f32> = ((vec2<f32>(x_3005.y, x_3005.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_3009 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_3009.x, x_3008.x, x_3009.z, x_3008.y);
        let x_3011 : vec2<f32> = u_xlat52;
        let x_3014 : vec2<f32> = ((vec2<f32>(x_3011.y, x_3011.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_3015 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3014.x, x_3015.y, x_3014.y, x_3015.w);
        let x_3018 : f32 = u_xlat9.y;
        u_xlat11.y = x_3018;
        let x_3020 : vec4<f32> = u_xlat11;
        let x_3021 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_3020 + x_3021);
        let x_3023 : vec4<f32> = u_xlat10;
        let x_3024 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_3023 / x_3024);
        let x_3026 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_3026 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_3028 : vec4<f32> = u_xlat11;
        let x_3029 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_3028 / x_3029);
        let x_3031 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_3031 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_3033 : vec4<f32> = u_xlat10;
        let x_3036 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_3033.w, x_3033.x, x_3033.y, x_3033.z) * vec4<f32>(x_3036.x, x_3036.x, x_3036.x, x_3036.x));
        let x_3039 : vec4<f32> = u_xlat11;
        let x_3042 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_3039.x, x_3039.w, x_3039.y, x_3039.z) * vec4<f32>(x_3042.y, x_3042.y, x_3042.y, x_3042.y));
        let x_3045 : vec4<f32> = u_xlat10;
        let x_3046 : vec3<f32> = vec3<f32>(x_3045.y, x_3045.z, x_3045.w);
        let x_3047 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_3046.x, x_3047.y, x_3046.y, x_3046.z);
        let x_3050 : f32 = u_xlat11.x;
        u_xlat13.y = x_3050;
        let x_3052 : vec4<f32> = u_xlat8;
        let x_3055 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3058 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_3052.x, x_3052.y, x_3052.x, x_3052.y) * vec4<f32>(x_3055.x, x_3055.y, x_3055.x, x_3055.y)) + vec4<f32>(x_3058.x, x_3058.y, x_3058.z, x_3058.y));
        let x_3061 : vec4<f32> = u_xlat8;
        let x_3064 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3067 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_3061.x, x_3061.y) * vec2<f32>(x_3064.x, x_3064.y)) + vec2<f32>(x_3067.w, x_3067.y));
        let x_3071 : f32 = u_xlat13.y;
        u_xlat10.y = x_3071;
        let x_3074 : f32 = u_xlat11.z;
        u_xlat13.y = x_3074;
        let x_3076 : vec4<f32> = u_xlat8;
        let x_3079 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3082 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3076.x, x_3076.y, x_3076.x, x_3076.y) * vec4<f32>(x_3079.x, x_3079.y, x_3079.x, x_3079.y)) + vec4<f32>(x_3082.x, x_3082.y, x_3082.z, x_3082.y));
        let x_3085 : vec4<f32> = u_xlat8;
        let x_3088 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3091 : vec4<f32> = u_xlat13;
        let x_3093 : vec2<f32> = ((vec2<f32>(x_3085.x, x_3085.y) * vec2<f32>(x_3088.x, x_3088.y)) + vec2<f32>(x_3091.w, x_3091.y));
        let x_3094 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3093.x, x_3093.y, x_3094.z, x_3094.w);
        let x_3097 : f32 = u_xlat13.y;
        u_xlat10.z = x_3097;
        let x_3099 : vec4<f32> = u_xlat8;
        let x_3102 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3105 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3099.x, x_3099.y, x_3099.x, x_3099.y) * vec4<f32>(x_3102.x, x_3102.y, x_3102.x, x_3102.y)) + vec4<f32>(x_3105.x, x_3105.y, x_3105.x, x_3105.z));
        let x_3109 : f32 = u_xlat11.w;
        u_xlat13.y = x_3109;
        let x_3111 : vec4<f32> = u_xlat8;
        let x_3114 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3117 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3111.x, x_3111.y, x_3111.x, x_3111.y) * vec4<f32>(x_3114.x, x_3114.y, x_3114.x, x_3114.y)) + vec4<f32>(x_3117.x, x_3117.y, x_3117.z, x_3117.y));
        let x_3120 : vec4<f32> = u_xlat8;
        let x_3123 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3126 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3120.x, x_3120.y) * vec2<f32>(x_3123.x, x_3123.y)) + vec2<f32>(x_3126.w, x_3126.y));
        let x_3130 : f32 = u_xlat13.y;
        u_xlat10.w = x_3130;
        let x_3132 : vec4<f32> = u_xlat8;
        let x_3135 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3138 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3132.x, x_3132.y) * vec2<f32>(x_3135.x, x_3135.y)) + vec2<f32>(x_3138.x, x_3138.w));
        let x_3141 : vec4<f32> = u_xlat13;
        let x_3142 : vec3<f32> = vec3<f32>(x_3141.x, x_3141.z, x_3141.w);
        let x_3143 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3142.x, x_3143.y, x_3142.y, x_3142.z);
        let x_3145 : vec4<f32> = u_xlat8;
        let x_3148 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3151 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3145.x, x_3145.y, x_3145.x, x_3145.y) * vec4<f32>(x_3148.x, x_3148.y, x_3148.x, x_3148.y)) + vec4<f32>(x_3151.x, x_3151.y, x_3151.z, x_3151.y));
        let x_3154 : vec4<f32> = u_xlat8;
        let x_3157 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3160 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3154.x, x_3154.y) * vec2<f32>(x_3157.x, x_3157.y)) + vec2<f32>(x_3160.w, x_3160.y));
        let x_3164 : f32 = u_xlat10.x;
        u_xlat11.x = x_3164;
        let x_3166 : vec4<f32> = u_xlat8;
        let x_3169 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3172 : vec4<f32> = u_xlat11;
        let x_3174 : vec2<f32> = ((vec2<f32>(x_3166.x, x_3166.y) * vec2<f32>(x_3169.x, x_3169.y)) + vec2<f32>(x_3172.x, x_3172.y));
        let x_3175 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3174.x, x_3174.y, x_3175.z, x_3175.w);
        let x_3177 : vec4<f32> = u_xlat9;
        let x_3179 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3177.x, x_3177.x, x_3177.x, x_3177.x) * x_3179);
        let x_3181 : vec4<f32> = u_xlat9;
        let x_3183 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3181.y, x_3181.y, x_3181.y, x_3181.y) * x_3183);
        let x_3185 : vec4<f32> = u_xlat9;
        let x_3187 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3185.z, x_3185.z, x_3185.z, x_3185.z) * x_3187);
        let x_3189 : vec4<f32> = u_xlat9;
        let x_3191 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3189.w, x_3189.w, x_3189.w, x_3189.w) * x_3191);
        let x_3194 : vec4<f32> = u_xlat14;
        let x_3195 : vec2<f32> = vec2<f32>(x_3194.x, x_3194.y);
        let x_3197 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3195.x, x_3195.y, x_3197);
        let x_3204 : vec3<f32> = txVec43;
        let x_3206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3204.xy, x_3204.z);
        u_xlat73 = x_3206;
        let x_3208 : vec4<f32> = u_xlat14;
        let x_3209 : vec2<f32> = vec2<f32>(x_3208.z, x_3208.w);
        let x_3211 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3209.x, x_3209.y, x_3211);
        let x_3218 : vec3<f32> = txVec44;
        let x_3220 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3218.xy, x_3218.z);
        u_xlat10.x = x_3220;
        let x_3223 : f32 = u_xlat10.x;
        let x_3225 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3223 * x_3225);
        let x_3229 : f32 = u_xlat19.x;
        let x_3230 : f32 = u_xlat73;
        let x_3233 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3229 * x_3230) + x_3233);
        let x_3236 : vec2<f32> = u_xlat52;
        let x_3238 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3236.x, x_3236.y, x_3238);
        let x_3245 : vec3<f32> = txVec45;
        let x_3247 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3245.xy, x_3245.z);
        u_xlat52.x = x_3247;
        let x_3250 : f32 = u_xlat19.z;
        let x_3252 : f32 = u_xlat52.x;
        let x_3254 : f32 = u_xlat73;
        u_xlat73 = ((x_3250 * x_3252) + x_3254);
        let x_3257 : vec4<f32> = u_xlat17;
        let x_3258 : vec2<f32> = vec2<f32>(x_3257.x, x_3257.y);
        let x_3260 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3258.x, x_3258.y, x_3260);
        let x_3267 : vec3<f32> = txVec46;
        let x_3269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3267.xy, x_3267.z);
        u_xlat52.x = x_3269;
        let x_3272 : f32 = u_xlat19.w;
        let x_3274 : f32 = u_xlat52.x;
        let x_3276 : f32 = u_xlat73;
        u_xlat73 = ((x_3272 * x_3274) + x_3276);
        let x_3279 : vec4<f32> = u_xlat15;
        let x_3280 : vec2<f32> = vec2<f32>(x_3279.x, x_3279.y);
        let x_3282 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3280.x, x_3280.y, x_3282);
        let x_3289 : vec3<f32> = txVec47;
        let x_3291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3289.xy, x_3289.z);
        u_xlat52.x = x_3291;
        let x_3294 : f32 = u_xlat20.x;
        let x_3296 : f32 = u_xlat52.x;
        let x_3298 : f32 = u_xlat73;
        u_xlat73 = ((x_3294 * x_3296) + x_3298);
        let x_3301 : vec4<f32> = u_xlat15;
        let x_3302 : vec2<f32> = vec2<f32>(x_3301.z, x_3301.w);
        let x_3304 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3302.x, x_3302.y, x_3304);
        let x_3311 : vec3<f32> = txVec48;
        let x_3313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3311.xy, x_3311.z);
        u_xlat52.x = x_3313;
        let x_3316 : f32 = u_xlat20.y;
        let x_3318 : f32 = u_xlat52.x;
        let x_3320 : f32 = u_xlat73;
        u_xlat73 = ((x_3316 * x_3318) + x_3320);
        let x_3323 : vec4<f32> = u_xlat16;
        let x_3324 : vec2<f32> = vec2<f32>(x_3323.x, x_3323.y);
        let x_3326 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3324.x, x_3324.y, x_3326);
        let x_3333 : vec3<f32> = txVec49;
        let x_3335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3333.xy, x_3333.z);
        u_xlat52.x = x_3335;
        let x_3338 : f32 = u_xlat20.z;
        let x_3340 : f32 = u_xlat52.x;
        let x_3342 : f32 = u_xlat73;
        u_xlat73 = ((x_3338 * x_3340) + x_3342);
        let x_3345 : vec4<f32> = u_xlat17;
        let x_3346 : vec2<f32> = vec2<f32>(x_3345.z, x_3345.w);
        let x_3348 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3346.x, x_3346.y, x_3348);
        let x_3355 : vec3<f32> = txVec50;
        let x_3357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3355.xy, x_3355.z);
        u_xlat52.x = x_3357;
        let x_3360 : f32 = u_xlat20.w;
        let x_3362 : f32 = u_xlat52.x;
        let x_3364 : f32 = u_xlat73;
        u_xlat73 = ((x_3360 * x_3362) + x_3364);
        let x_3367 : vec4<f32> = u_xlat18;
        let x_3368 : vec2<f32> = vec2<f32>(x_3367.x, x_3367.y);
        let x_3370 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3368.x, x_3368.y, x_3370);
        let x_3377 : vec3<f32> = txVec51;
        let x_3379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3377.xy, x_3377.z);
        u_xlat52.x = x_3379;
        let x_3382 : f32 = u_xlat21.x;
        let x_3384 : f32 = u_xlat52.x;
        let x_3386 : f32 = u_xlat73;
        u_xlat73 = ((x_3382 * x_3384) + x_3386);
        let x_3389 : vec4<f32> = u_xlat18;
        let x_3390 : vec2<f32> = vec2<f32>(x_3389.z, x_3389.w);
        let x_3392 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3390.x, x_3390.y, x_3392);
        let x_3399 : vec3<f32> = txVec52;
        let x_3401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3399.xy, x_3399.z);
        u_xlat52.x = x_3401;
        let x_3404 : f32 = u_xlat21.y;
        let x_3406 : f32 = u_xlat52.x;
        let x_3408 : f32 = u_xlat73;
        u_xlat73 = ((x_3404 * x_3406) + x_3408);
        let x_3411 : vec2<f32> = u_xlat32;
        let x_3413 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3411.x, x_3411.y, x_3413);
        let x_3420 : vec3<f32> = txVec53;
        let x_3422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3420.xy, x_3420.z);
        u_xlat52.x = x_3422;
        let x_3425 : f32 = u_xlat21.z;
        let x_3427 : f32 = u_xlat52.x;
        let x_3429 : f32 = u_xlat73;
        u_xlat73 = ((x_3425 * x_3427) + x_3429);
        let x_3432 : vec2<f32> = u_xlat60;
        let x_3434 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3432.x, x_3432.y, x_3434);
        let x_3441 : vec3<f32> = txVec54;
        let x_3443 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3441.xy, x_3441.z);
        u_xlat52.x = x_3443;
        let x_3446 : f32 = u_xlat21.w;
        let x_3448 : f32 = u_xlat52.x;
        let x_3450 : f32 = u_xlat73;
        u_xlat73 = ((x_3446 * x_3448) + x_3450);
        let x_3453 : vec4<f32> = u_xlat13;
        let x_3454 : vec2<f32> = vec2<f32>(x_3453.x, x_3453.y);
        let x_3456 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3454.x, x_3454.y, x_3456);
        let x_3463 : vec3<f32> = txVec55;
        let x_3465 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3463.xy, x_3463.z);
        u_xlat52.x = x_3465;
        let x_3468 : f32 = u_xlat9.x;
        let x_3470 : f32 = u_xlat52.x;
        let x_3472 : f32 = u_xlat73;
        u_xlat73 = ((x_3468 * x_3470) + x_3472);
        let x_3475 : vec4<f32> = u_xlat13;
        let x_3476 : vec2<f32> = vec2<f32>(x_3475.z, x_3475.w);
        let x_3478 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3476.x, x_3476.y, x_3478);
        let x_3485 : vec3<f32> = txVec56;
        let x_3487 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3485.xy, x_3485.z);
        u_xlat52.x = x_3487;
        let x_3490 : f32 = u_xlat9.y;
        let x_3492 : f32 = u_xlat52.x;
        let x_3494 : f32 = u_xlat73;
        u_xlat73 = ((x_3490 * x_3492) + x_3494);
        let x_3497 : vec2<f32> = u_xlat55;
        let x_3499 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3497.x, x_3497.y, x_3499);
        let x_3506 : vec3<f32> = txVec57;
        let x_3508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3506.xy, x_3506.z);
        u_xlat52.x = x_3508;
        let x_3511 : f32 = u_xlat9.z;
        let x_3513 : f32 = u_xlat52.x;
        let x_3515 : f32 = u_xlat73;
        u_xlat73 = ((x_3511 * x_3513) + x_3515);
        let x_3518 : vec4<f32> = u_xlat8;
        let x_3519 : vec2<f32> = vec2<f32>(x_3518.x, x_3518.y);
        let x_3521 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3519.x, x_3519.y, x_3521);
        let x_3528 : vec3<f32> = txVec58;
        let x_3530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3528.xy, x_3528.z);
        u_xlat8.x = x_3530;
        let x_3533 : f32 = u_xlat9.w;
        let x_3535 : f32 = u_xlat8.x;
        let x_3537 : f32 = u_xlat73;
        u_xlat0.x = ((x_3533 * x_3535) + x_3537);
      }
    }
  } else {
    let x_3542 : vec4<f32> = u_xlat2;
    let x_3543 : vec2<f32> = vec2<f32>(x_3542.x, x_3542.y);
    let x_3545 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3543.x, x_3543.y, x_3545);
    let x_3552 : vec3<f32> = txVec59;
    let x_3554 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3552.xy, x_3552.z);
    u_xlat0.x = x_3554;
  }
  let x_3557 : f32 = u_xlat0.x;
  let x_3559 : f32 = x_379.x_MainLightShadowParams.x;
  let x_3561 : f32 = u_xlat68;
  u_xlat0.x = ((x_3557 * x_3559) + x_3561);
  let x_3565 : bool = u_xlatb3.x;
  if (x_3565) {
    x_3566 = 1.0f;
  } else {
    let x_3571 : f32 = u_xlat0.x;
    x_3566 = x_3571;
  }
  let x_3572 : f32 = x_3566;
  u_xlat0.x = x_3572;
  let x_3574 : vec3<f32> = vs_INTERP0;
  let x_3576 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3578 : vec3<f32> = (x_3574 + -(x_3576));
  let x_3579 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3578.x, x_3578.y, x_3578.z, x_3579.w);
  let x_3581 : vec4<f32> = u_xlat2;
  let x_3583 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3581.x, x_3581.y, x_3581.z), vec3<f32>(x_3583.x, x_3583.y, x_3583.z));
  let x_3588 : f32 = u_xlat2.x;
  let x_3590 : f32 = x_379.x_MainLightShadowParams.z;
  let x_3593 : f32 = x_379.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3588 * x_3590) + x_3593);
  let x_3597 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3597, 0.0f, 1.0f);
  let x_3602 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3602) + 1.0f);
  let x_3606 : f32 = u_xlat2.x;
  let x_3607 : f32 = u_xlat24;
  let x_3610 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3606 * x_3607) + x_3610);
  let x_3619 : f32 = x_3617.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3619 == -1.0f));
  let x_3623 : bool = u_xlatb2.x;
  if (x_3623) {
    let x_3626 : vec3<f32> = vs_INTERP0;
    let x_3629 : vec4<f32> = x_3617.x_MainLightWorldToLight[1i];
    let x_3631 : vec2<f32> = (vec2<f32>(x_3626.y, x_3626.y) * vec2<f32>(x_3629.x, x_3629.y));
    let x_3632 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3631.x, x_3631.y, x_3632.z, x_3632.w);
    let x_3635 : vec4<f32> = x_3617.x_MainLightWorldToLight[0i];
    let x_3637 : vec3<f32> = vs_INTERP0;
    let x_3640 : vec4<f32> = u_xlat2;
    let x_3642 : vec2<f32> = ((vec2<f32>(x_3635.x, x_3635.y) * vec2<f32>(x_3637.x, x_3637.x)) + vec2<f32>(x_3640.x, x_3640.y));
    let x_3643 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3642.x, x_3642.y, x_3643.z, x_3643.w);
    let x_3646 : vec4<f32> = x_3617.x_MainLightWorldToLight[2i];
    let x_3648 : vec3<f32> = vs_INTERP0;
    let x_3651 : vec4<f32> = u_xlat2;
    let x_3653 : vec2<f32> = ((vec2<f32>(x_3646.x, x_3646.y) * vec2<f32>(x_3648.z, x_3648.z)) + vec2<f32>(x_3651.x, x_3651.y));
    let x_3654 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3653.x, x_3653.y, x_3654.z, x_3654.w);
    let x_3656 : vec4<f32> = u_xlat2;
    let x_3659 : vec4<f32> = x_3617.x_MainLightWorldToLight[3i];
    let x_3661 : vec2<f32> = (vec2<f32>(x_3656.x, x_3656.y) + vec2<f32>(x_3659.x, x_3659.y));
    let x_3662 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3661.x, x_3661.y, x_3662.z, x_3662.w);
    let x_3664 : vec4<f32> = u_xlat2;
    let x_3667 : vec2<f32> = ((vec2<f32>(x_3664.x, x_3664.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3668 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3667.x, x_3667.y, x_3668.z, x_3668.w);
    let x_3675 : vec4<f32> = u_xlat2;
    let x_3678 : f32 = x_160.x_GlobalMipBias.x;
    let x_3679 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3675.x, x_3675.y), x_3678);
    u_xlat2 = x_3679;
    let x_3682 : f32 = x_3617.x_MainLightCookieTextureFormat;
    let x_3684 : f32 = x_3617.x_MainLightCookieTextureFormat;
    let x_3686 : f32 = x_3617.x_MainLightCookieTextureFormat;
    let x_3688 : f32 = x_3617.x_MainLightCookieTextureFormat;
    let x_3689 : vec4<f32> = vec4<f32>(x_3682, x_3684, x_3686, x_3688);
    let x_3696 : vec4<bool> = (vec4<f32>(x_3689.x, x_3689.y, x_3689.z, x_3689.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3696.x, x_3696.y);
    let x_3699 : bool = u_xlatb8.y;
    if (x_3699) {
      let x_3704 : f32 = u_xlat2.w;
      x_3700 = x_3704;
    } else {
      let x_3707 : f32 = u_xlat2.x;
      x_3700 = x_3707;
    }
    let x_3708 : f32 = x_3700;
    u_xlat68 = x_3708;
    let x_3710 : bool = u_xlatb8.x;
    if (x_3710) {
      let x_3714 : vec4<f32> = u_xlat2;
      x_3711 = vec3<f32>(x_3714.x, x_3714.y, x_3714.z);
    } else {
      let x_3717 : f32 = u_xlat68;
      x_3711 = vec3<f32>(x_3717, x_3717, x_3717);
    }
    let x_3719 : vec3<f32> = x_3711;
    let x_3720 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3719.x, x_3719.y, x_3719.z, x_3720.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3726 : vec4<f32> = u_xlat2;
  let x_3729 : vec4<f32> = x_160.x_MainLightColor;
  let x_3731 : vec3<f32> = (vec3<f32>(x_3726.x, x_3726.y, x_3726.z) * vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
  let x_3732 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3731.x, x_3731.y, x_3731.z, x_3732.w);
  let x_3734 : f32 = u_xlat72;
  let x_3736 : vec4<f32> = u_xlat2;
  let x_3738 : vec3<f32> = (vec3<f32>(x_3734, x_3734, x_3734) * vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
  let x_3739 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3738.x, x_3738.y, x_3738.z, x_3739.w);
  let x_3741 : vec3<f32> = u_xlat4;
  let x_3743 : vec4<f32> = u_xlat5;
  u_xlat68 = dot(-(x_3741), vec3<f32>(x_3743.x, x_3743.y, x_3743.z));
  let x_3746 : f32 = u_xlat68;
  let x_3747 : f32 = u_xlat68;
  u_xlat68 = (x_3746 + x_3747);
  let x_3749 : vec4<f32> = u_xlat5;
  let x_3751 : f32 = u_xlat68;
  let x_3755 : vec3<f32> = u_xlat4;
  let x_3757 : vec3<f32> = ((vec3<f32>(x_3749.x, x_3749.y, x_3749.z) * -(vec3<f32>(x_3751, x_3751, x_3751))) + -(x_3755));
  let x_3758 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3757.x, x_3757.y, x_3757.z, x_3758.w);
  let x_3760 : vec4<f32> = u_xlat5;
  let x_3762 : vec3<f32> = u_xlat4;
  u_xlat68 = dot(vec3<f32>(x_3760.x, x_3760.y, x_3760.z), x_3762);
  let x_3764 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3764, 0.0f, 1.0f);
  let x_3766 : f32 = u_xlat68;
  u_xlat68 = (-(x_3766) + 1.0f);
  let x_3769 : f32 = u_xlat68;
  let x_3770 : f32 = u_xlat68;
  u_xlat68 = (x_3769 * x_3770);
  let x_3772 : f32 = u_xlat68;
  let x_3773 : f32 = u_xlat68;
  u_xlat68 = (x_3772 * x_3773);
  let x_3776 : f32 = u_xlat44.x;
  u_xlat3.x = ((-(x_3776) * 0.699999988f) + 1.700000048f);
  let x_3784 : f32 = u_xlat44.x;
  let x_3786 : f32 = u_xlat3.x;
  u_xlat44.x = (x_3784 * x_3786);
  let x_3790 : f32 = u_xlat44.x;
  u_xlat44.x = (x_3790 * 6.0f);
  let x_3802 : vec4<f32> = u_xlat8;
  let x_3805 : f32 = u_xlat44.x;
  let x_3806 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3802.x, x_3802.y, x_3802.z), x_3805);
  u_xlat8 = x_3806;
  let x_3808 : f32 = u_xlat8.w;
  u_xlat44.x = (x_3808 + -1.0f);
  let x_3812 : f32 = x_94.unity_SpecCube0_HDR.w;
  let x_3814 : f32 = u_xlat44.x;
  u_xlat44.x = ((x_3812 * x_3814) + 1.0f);
  let x_3819 : f32 = u_xlat44.x;
  u_xlat44.x = max(x_3819, 0.0f);
  let x_3823 : f32 = u_xlat44.x;
  u_xlat44.x = log2(x_3823);
  let x_3827 : f32 = u_xlat44.x;
  let x_3829 : f32 = x_94.unity_SpecCube0_HDR.y;
  u_xlat44.x = (x_3827 * x_3829);
  let x_3833 : f32 = u_xlat44.x;
  u_xlat44.x = exp2(x_3833);
  let x_3837 : f32 = u_xlat44.x;
  let x_3839 : f32 = x_94.unity_SpecCube0_HDR.x;
  u_xlat44.x = (x_3837 * x_3839);
  let x_3842 : vec4<f32> = u_xlat8;
  let x_3844 : vec2<f32> = u_xlat44;
  let x_3846 : vec3<f32> = (vec3<f32>(x_3842.x, x_3842.y, x_3842.z) * vec3<f32>(x_3844.x, x_3844.x, x_3844.x));
  let x_3847 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3846.x, x_3846.y, x_3846.z, x_3847.w);
  let x_3849 : f32 = u_xlat66;
  let x_3851 : f32 = u_xlat66;
  u_xlat44 = ((vec2<f32>(x_3849, x_3849) * vec2<f32>(x_3851, x_3851)) + vec2<f32>(-1.0f, 1.0f));
  let x_3857 : f32 = u_xlat44.y;
  u_xlat66 = (1.0f / x_3857);
  let x_3859 : f32 = u_xlat69;
  u_xlat3.x = (x_3859 + -0.039999999f);
  let x_3863 : f32 = u_xlat68;
  let x_3865 : f32 = u_xlat3.x;
  u_xlat68 = ((x_3863 * x_3865) + 0.039999999f);
  let x_3869 : f32 = u_xlat66;
  let x_3870 : f32 = u_xlat68;
  u_xlat66 = (x_3869 * x_3870);
  let x_3872 : f32 = u_xlat66;
  let x_3874 : vec4<f32> = u_xlat8;
  let x_3876 : vec3<f32> = (vec3<f32>(x_3872, x_3872, x_3872) * vec3<f32>(x_3874.x, x_3874.y, x_3874.z));
  let x_3877 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3876.x, x_3876.y, x_3876.z, x_3877.w);
  let x_3879 : vec4<f32> = u_xlat6;
  let x_3881 : vec3<f32> = u_xlat7;
  let x_3883 : vec4<f32> = u_xlat8;
  let x_3885 : vec3<f32> = ((vec3<f32>(x_3879.x, x_3879.y, x_3879.z) * x_3881) + vec3<f32>(x_3883.x, x_3883.y, x_3883.z));
  let x_3886 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3885.x, x_3885.y, x_3885.z, x_3886.w);
  let x_3889 : f32 = u_xlat0.x;
  let x_3891 : f32 = x_94.unity_LightData.z;
  u_xlat0.x = (x_3889 * x_3891);
  let x_3894 : vec4<f32> = u_xlat5;
  let x_3897 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat66 = dot(vec3<f32>(x_3894.x, x_3894.y, x_3894.z), vec3<f32>(x_3897.x, x_3897.y, x_3897.z));
  let x_3900 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3900, 0.0f, 1.0f);
  let x_3902 : f32 = u_xlat66;
  let x_3904 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3902 * x_3904);
  let x_3907 : vec4<f32> = u_xlat0;
  let x_3909 : vec4<f32> = u_xlat2;
  let x_3911 : vec3<f32> = (vec3<f32>(x_3907.x, x_3907.x, x_3907.x) * vec3<f32>(x_3909.x, x_3909.y, x_3909.z));
  let x_3912 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3911.x, x_3911.y, x_3911.z, x_3912.w);
  let x_3914 : vec3<f32> = u_xlat4;
  let x_3916 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3918 : vec3<f32> = (x_3914 + vec3<f32>(x_3916.x, x_3916.y, x_3916.z));
  let x_3919 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3918.x, x_3918.y, x_3918.z, x_3919.w);
  let x_3921 : vec4<f32> = u_xlat8;
  let x_3923 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3921.x, x_3921.y, x_3921.z), vec3<f32>(x_3923.x, x_3923.y, x_3923.z));
  let x_3928 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3928, 1.17549435e-37f);
  let x_3932 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3932);
  let x_3935 : vec4<f32> = u_xlat0;
  let x_3937 : vec4<f32> = u_xlat8;
  let x_3939 : vec3<f32> = (vec3<f32>(x_3935.x, x_3935.x, x_3935.x) * vec3<f32>(x_3937.x, x_3937.y, x_3937.z));
  let x_3940 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3939.x, x_3939.y, x_3939.z, x_3940.w);
  let x_3942 : vec4<f32> = u_xlat5;
  let x_3944 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3942.x, x_3942.y, x_3942.z), vec3<f32>(x_3944.x, x_3944.y, x_3944.z));
  let x_3949 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3949, 0.0f, 1.0f);
  let x_3953 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3955 : vec4<f32> = u_xlat8;
  u_xlat0.w = dot(vec3<f32>(x_3953.x, x_3953.y, x_3953.z), vec3<f32>(x_3955.x, x_3955.y, x_3955.z));
  let x_3960 : f32 = u_xlat0.w;
  u_xlat0.w = clamp(x_3960, 0.0f, 1.0f);
  let x_3963 : vec4<f32> = u_xlat0;
  let x_3965 : vec4<f32> = u_xlat0;
  let x_3967 : vec2<f32> = (vec2<f32>(x_3963.x, x_3963.w) * vec2<f32>(x_3965.x, x_3965.w));
  let x_3968 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3967.x, x_3968.y, x_3968.z, x_3967.y);
  let x_3971 : f32 = u_xlat0.x;
  let x_3973 : f32 = u_xlat44.x;
  u_xlat0.x = ((x_3971 * x_3973) + 1.000010014f);
  let x_3979 : f32 = u_xlat0.x;
  let x_3981 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3979 * x_3981);
  let x_3985 : f32 = u_xlat0.w;
  u_xlat66 = max(x_3985, 0.100000001f);
  let x_3988 : f32 = u_xlat66;
  let x_3990 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3988 * x_3990);
  let x_3993 : f32 = u_xlat70;
  let x_3995 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3993 * x_3995);
  let x_3999 : f32 = u_xlat47.x;
  let x_4001 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3999 / x_4001);
  let x_4004 : vec4<f32> = u_xlat0;
  let x_4008 : vec3<f32> = u_xlat7;
  let x_4009 : vec3<f32> = ((vec3<f32>(x_4004.x, x_4004.x, x_4004.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4008);
  let x_4010 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_4009.x, x_4009.y, x_4009.z, x_4010.w);
  let x_4012 : vec4<f32> = u_xlat2;
  let x_4014 : vec4<f32> = u_xlat8;
  let x_4016 : vec3<f32> = (vec3<f32>(x_4012.x, x_4012.y, x_4012.z) * vec3<f32>(x_4014.x, x_4014.y, x_4014.z));
  let x_4017 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_4016.x, x_4016.y, x_4016.z, x_4017.w);
  let x_4020 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_4022 : f32 = x_94.unity_LightData.y;
  u_xlat0.x = min(x_4020, x_4022);
  let x_4026 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_4026));
  let x_4030 : f32 = x_3617.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_4032 : f32 = x_3617.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_4034 : f32 = x_3617.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_4036 : f32 = x_3617.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_4037 : vec4<f32> = vec4<f32>(x_4030, x_4032, x_4034, x_4036);
  let x_4044 : vec4<bool> = (vec4<f32>(x_4037.x, x_4037.y, x_4037.z, x_4037.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_4045 : vec2<bool> = vec2<bool>(x_4044.x, x_4044.w);
  let x_4046 : vec4<bool> = u_xlatb3;
  u_xlatb3 = vec4<bool>(x_4045.x, x_4046.y, x_4046.z, x_4045.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_4057 : u32 = u_xlatu_loop_1;
    let x_4058 : u32 = u_xlatu0;
    if ((x_4057 < x_4058)) {
    } else {
      break;
    }
    let x_4061 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_4061 >> 2u);
    let x_4064 : u32 = u_xlatu_loop_1;
    u_xlati73 = bitcast<i32>((x_4064 & 3u));
    let x_4067 : u32 = u_xlatu68;
    let x_4070 : vec4<f32> = x_94.unity_LightIndices[bitcast<i32>(x_4067)];
    let x_4080 : i32 = u_xlati73;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_4085 : vec4<u32> = indexable[x_4080];
    u_xlat68 = dot(x_4070, bitcast<vec4<f32>>(x_4085));
    let x_4088 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_4088));
    let x_4091 : vec3<f32> = vs_INTERP0;
    let x_4103 : u32 = u_xlatu68;
    let x_4106 : vec4<f32> = x_4102.x_AdditionalLightsPosition[bitcast<i32>(x_4103)];
    let x_4109 : u32 = u_xlatu68;
    let x_4112 : vec4<f32> = x_4102.x_AdditionalLightsPosition[bitcast<i32>(x_4109)];
    let x_4114 : vec3<f32> = ((-(x_4091) * vec3<f32>(x_4106.w, x_4106.w, x_4106.w)) + vec3<f32>(x_4112.x, x_4112.y, x_4112.z));
    let x_4115 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4114.x, x_4114.y, x_4114.z, x_4115.w);
    let x_4117 : vec4<f32> = u_xlat9;
    let x_4119 : vec4<f32> = u_xlat9;
    u_xlat73 = dot(vec3<f32>(x_4117.x, x_4117.y, x_4117.z), vec3<f32>(x_4119.x, x_4119.y, x_4119.z));
    let x_4122 : f32 = u_xlat73;
    u_xlat73 = max(x_4122, 6.10351562e-05f);
    let x_4126 : f32 = u_xlat73;
    u_xlat74 = inverseSqrt(x_4126);
    let x_4128 : f32 = u_xlat74;
    let x_4130 : vec4<f32> = u_xlat9;
    let x_4132 : vec3<f32> = (vec3<f32>(x_4128, x_4128, x_4128) * vec3<f32>(x_4130.x, x_4130.y, x_4130.z));
    let x_4133 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4132.x, x_4132.y, x_4132.z, x_4133.w);
    let x_4136 : f32 = u_xlat73;
    u_xlat75 = (1.0f / x_4136);
    let x_4138 : f32 = u_xlat73;
    let x_4139 : u32 = u_xlatu68;
    let x_4142 : f32 = x_4102.x_AdditionalLightsAttenuation[bitcast<i32>(x_4139)].x;
    u_xlat73 = (x_4138 * x_4142);
    let x_4144 : f32 = u_xlat73;
    let x_4146 : f32 = u_xlat73;
    u_xlat73 = ((-(x_4144) * x_4146) + 1.0f);
    let x_4149 : f32 = u_xlat73;
    u_xlat73 = max(x_4149, 0.0f);
    let x_4151 : f32 = u_xlat73;
    let x_4152 : f32 = u_xlat73;
    u_xlat73 = (x_4151 * x_4152);
    let x_4154 : f32 = u_xlat73;
    let x_4155 : f32 = u_xlat75;
    u_xlat73 = (x_4154 * x_4155);
    let x_4157 : u32 = u_xlatu68;
    let x_4160 : vec4<f32> = x_4102.x_AdditionalLightsSpotDir[bitcast<i32>(x_4157)];
    let x_4162 : vec4<f32> = u_xlat10;
    u_xlat75 = dot(vec3<f32>(x_4160.x, x_4160.y, x_4160.z), vec3<f32>(x_4162.x, x_4162.y, x_4162.z));
    let x_4165 : f32 = u_xlat75;
    let x_4166 : u32 = u_xlatu68;
    let x_4169 : f32 = x_4102.x_AdditionalLightsAttenuation[bitcast<i32>(x_4166)].z;
    let x_4171 : u32 = u_xlatu68;
    let x_4174 : f32 = x_4102.x_AdditionalLightsAttenuation[bitcast<i32>(x_4171)].w;
    u_xlat75 = ((x_4165 * x_4169) + x_4174);
    let x_4176 : f32 = u_xlat75;
    u_xlat75 = clamp(x_4176, 0.0f, 1.0f);
    let x_4178 : f32 = u_xlat75;
    let x_4179 : f32 = u_xlat75;
    u_xlat75 = (x_4178 * x_4179);
    let x_4181 : f32 = u_xlat73;
    let x_4182 : f32 = u_xlat75;
    u_xlat73 = (x_4181 * x_4182);
    let x_4185 : u32 = u_xlatu68;
    u_xlatu75 = (x_4185 >> 5u);
    let x_4188 : u32 = u_xlatu68;
    u_xlati76 = (1i << bitcast<u32>((bitcast<i32>(x_4188) & 31i)));
    let x_4194 : i32 = u_xlati76;
    let x_4196 : u32 = u_xlatu75;
    let x_4199 : f32 = x_3617.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4196)].el;
    u_xlati75 = bitcast<i32>((bitcast<u32>(x_4194) & bitcast<u32>(x_4199)));
    let x_4203 : i32 = u_xlati75;
    if ((x_4203 != 0i)) {
      let x_4213 : u32 = u_xlatu68;
      let x_4216 : f32 = x_4212.x_AdditionalLightsLightTypes[bitcast<i32>(x_4213)].el;
      u_xlati75 = i32(x_4216);
      let x_4218 : i32 = u_xlati75;
      u_xlati76 = select(1i, 0i, (x_4218 != 0i));
      let x_4222 : u32 = u_xlatu68;
      u_xlati11 = (bitcast<i32>(x_4222) << bitcast<u32>(2i));
      let x_4225 : i32 = u_xlati76;
      if ((x_4225 != 0i)) {
        let x_4230 : vec3<f32> = vs_INTERP0;
        let x_4232 : i32 = u_xlati11;
        let x_4235 : i32 = u_xlati11;
        let x_4239 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4232 + 1i) / 4i)][((x_4235 + 1i) % 4i)];
        u_xlat33 = (vec3<f32>(x_4230.y, x_4230.y, x_4230.y) * vec3<f32>(x_4239.x, x_4239.y, x_4239.w));
        let x_4242 : i32 = u_xlati11;
        let x_4244 : i32 = u_xlati11;
        let x_4247 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[(x_4242 / 4i)][(x_4244 % 4i)];
        let x_4249 : vec3<f32> = vs_INTERP0;
        let x_4252 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4247.x, x_4247.y, x_4247.w) * vec3<f32>(x_4249.x, x_4249.x, x_4249.x)) + x_4252);
        let x_4254 : i32 = u_xlati11;
        let x_4257 : i32 = u_xlati11;
        let x_4261 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4254 + 2i) / 4i)][((x_4257 + 2i) % 4i)];
        let x_4263 : vec3<f32> = vs_INTERP0;
        let x_4266 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4261.x, x_4261.y, x_4261.w) * vec3<f32>(x_4263.z, x_4263.z, x_4263.z)) + x_4266);
        let x_4268 : vec3<f32> = u_xlat33;
        let x_4269 : i32 = u_xlati11;
        let x_4272 : i32 = u_xlati11;
        let x_4276 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4269 + 3i) / 4i)][((x_4272 + 3i) % 4i)];
        u_xlat33 = (x_4268 + vec3<f32>(x_4276.x, x_4276.y, x_4276.w));
        let x_4279 : vec3<f32> = u_xlat33;
        let x_4281 : vec3<f32> = u_xlat33;
        let x_4283 : vec2<f32> = (vec2<f32>(x_4279.x, x_4279.y) / vec2<f32>(x_4281.z, x_4281.z));
        let x_4284 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4283.x, x_4283.y, x_4284.z);
        let x_4286 : vec3<f32> = u_xlat33;
        let x_4289 : vec2<f32> = ((vec2<f32>(x_4286.x, x_4286.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4290 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4289.x, x_4289.y, x_4290.z);
        let x_4292 : vec3<f32> = u_xlat33;
        let x_4296 : vec2<f32> = clamp(vec2<f32>(x_4292.x, x_4292.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4297 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4296.x, x_4296.y, x_4297.z);
        let x_4299 : u32 = u_xlatu68;
        let x_4302 : vec4<f32> = x_4212.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4299)];
        let x_4304 : vec3<f32> = u_xlat33;
        let x_4307 : u32 = u_xlatu68;
        let x_4310 : vec4<f32> = x_4212.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4307)];
        let x_4312 : vec2<f32> = ((vec2<f32>(x_4302.x, x_4302.y) * vec2<f32>(x_4304.x, x_4304.y)) + vec2<f32>(x_4310.z, x_4310.w));
        let x_4313 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4312.x, x_4312.y, x_4313.z);
      } else {
        let x_4317 : i32 = u_xlati75;
        u_xlatb75 = (x_4317 == 1i);
        let x_4319 : bool = u_xlatb75;
        u_xlati75 = select(0i, 1i, x_4319);
        let x_4321 : i32 = u_xlati75;
        if ((x_4321 != 0i)) {
          let x_4325 : vec3<f32> = vs_INTERP0;
          let x_4327 : i32 = u_xlati11;
          let x_4330 : i32 = u_xlati11;
          let x_4334 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4327 + 1i) / 4i)][((x_4330 + 1i) % 4i)];
          let x_4336 : vec2<f32> = (vec2<f32>(x_4325.y, x_4325.y) * vec2<f32>(x_4334.x, x_4334.y));
          let x_4337 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4336.x, x_4336.y, x_4337.z, x_4337.w);
          let x_4339 : i32 = u_xlati11;
          let x_4341 : i32 = u_xlati11;
          let x_4344 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[(x_4339 / 4i)][(x_4341 % 4i)];
          let x_4346 : vec3<f32> = vs_INTERP0;
          let x_4349 : vec4<f32> = u_xlat12;
          let x_4351 : vec2<f32> = ((vec2<f32>(x_4344.x, x_4344.y) * vec2<f32>(x_4346.x, x_4346.x)) + vec2<f32>(x_4349.x, x_4349.y));
          let x_4352 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4351.x, x_4351.y, x_4352.z, x_4352.w);
          let x_4354 : i32 = u_xlati11;
          let x_4357 : i32 = u_xlati11;
          let x_4361 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4354 + 2i) / 4i)][((x_4357 + 2i) % 4i)];
          let x_4363 : vec3<f32> = vs_INTERP0;
          let x_4366 : vec4<f32> = u_xlat12;
          let x_4368 : vec2<f32> = ((vec2<f32>(x_4361.x, x_4361.y) * vec2<f32>(x_4363.z, x_4363.z)) + vec2<f32>(x_4366.x, x_4366.y));
          let x_4369 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4368.x, x_4368.y, x_4369.z, x_4369.w);
          let x_4371 : vec4<f32> = u_xlat12;
          let x_4373 : i32 = u_xlati11;
          let x_4376 : i32 = u_xlati11;
          let x_4380 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4373 + 3i) / 4i)][((x_4376 + 3i) % 4i)];
          let x_4382 : vec2<f32> = (vec2<f32>(x_4371.x, x_4371.y) + vec2<f32>(x_4380.x, x_4380.y));
          let x_4383 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4382.x, x_4382.y, x_4383.z, x_4383.w);
          let x_4385 : vec4<f32> = u_xlat12;
          let x_4388 : vec2<f32> = ((vec2<f32>(x_4385.x, x_4385.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4389 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4388.x, x_4388.y, x_4389.z, x_4389.w);
          let x_4391 : vec4<f32> = u_xlat12;
          let x_4393 : vec2<f32> = fract(vec2<f32>(x_4391.x, x_4391.y));
          let x_4394 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4393.x, x_4393.y, x_4394.z, x_4394.w);
          let x_4396 : u32 = u_xlatu68;
          let x_4399 : vec4<f32> = x_4212.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4396)];
          let x_4401 : vec4<f32> = u_xlat12;
          let x_4404 : u32 = u_xlatu68;
          let x_4407 : vec4<f32> = x_4212.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4404)];
          let x_4409 : vec2<f32> = ((vec2<f32>(x_4399.x, x_4399.y) * vec2<f32>(x_4401.x, x_4401.y)) + vec2<f32>(x_4407.z, x_4407.w));
          let x_4410 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4409.x, x_4409.y, x_4410.z);
        } else {
          let x_4413 : vec3<f32> = vs_INTERP0;
          let x_4415 : i32 = u_xlati11;
          let x_4418 : i32 = u_xlati11;
          let x_4422 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4415 + 1i) / 4i)][((x_4418 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4413.y, x_4413.y, x_4413.y, x_4413.y) * x_4422);
          let x_4424 : i32 = u_xlati11;
          let x_4426 : i32 = u_xlati11;
          let x_4429 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[(x_4424 / 4i)][(x_4426 % 4i)];
          let x_4430 : vec3<f32> = vs_INTERP0;
          let x_4433 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4429 * vec4<f32>(x_4430.x, x_4430.x, x_4430.x, x_4430.x)) + x_4433);
          let x_4435 : i32 = u_xlati11;
          let x_4438 : i32 = u_xlati11;
          let x_4442 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4435 + 2i) / 4i)][((x_4438 + 2i) % 4i)];
          let x_4443 : vec3<f32> = vs_INTERP0;
          let x_4446 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4442 * vec4<f32>(x_4443.z, x_4443.z, x_4443.z, x_4443.z)) + x_4446);
          let x_4448 : vec4<f32> = u_xlat12;
          let x_4449 : i32 = u_xlati11;
          let x_4452 : i32 = u_xlati11;
          let x_4456 : vec4<f32> = x_4212.x_AdditionalLightsWorldToLights[((x_4449 + 3i) / 4i)][((x_4452 + 3i) % 4i)];
          u_xlat12 = (x_4448 + x_4456);
          let x_4458 : vec4<f32> = u_xlat12;
          let x_4460 : vec4<f32> = u_xlat12;
          let x_4462 : vec3<f32> = (vec3<f32>(x_4458.x, x_4458.y, x_4458.z) / vec3<f32>(x_4460.w, x_4460.w, x_4460.w));
          let x_4463 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4462.x, x_4462.y, x_4462.z, x_4463.w);
          let x_4465 : vec4<f32> = u_xlat12;
          let x_4467 : vec4<f32> = u_xlat12;
          u_xlat75 = dot(vec3<f32>(x_4465.x, x_4465.y, x_4465.z), vec3<f32>(x_4467.x, x_4467.y, x_4467.z));
          let x_4470 : f32 = u_xlat75;
          u_xlat75 = inverseSqrt(x_4470);
          let x_4472 : f32 = u_xlat75;
          let x_4474 : vec4<f32> = u_xlat12;
          let x_4476 : vec3<f32> = (vec3<f32>(x_4472, x_4472, x_4472) * vec3<f32>(x_4474.x, x_4474.y, x_4474.z));
          let x_4477 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4476.x, x_4476.y, x_4476.z, x_4477.w);
          let x_4479 : vec4<f32> = u_xlat12;
          u_xlat75 = dot(abs(vec3<f32>(x_4479.x, x_4479.y, x_4479.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4484 : f32 = u_xlat75;
          u_xlat75 = max(x_4484, 0.000001f);
          let x_4487 : f32 = u_xlat75;
          u_xlat75 = (1.0f / x_4487);
          let x_4489 : f32 = u_xlat75;
          let x_4491 : vec4<f32> = u_xlat12;
          let x_4493 : vec3<f32> = (vec3<f32>(x_4489, x_4489, x_4489) * vec3<f32>(x_4491.z, x_4491.x, x_4491.y));
          let x_4494 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4493.x, x_4493.y, x_4493.z, x_4494.w);
          let x_4497 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4497);
          let x_4501 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4501, 0.0f, 1.0f);
          let x_4505 : vec4<f32> = u_xlat13;
          let x_4508 : vec4<bool> = (vec4<f32>(x_4505.y, x_4505.y, x_4505.y, x_4505.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4509 : vec2<bool> = vec2<bool>(x_4508.x, x_4508.w);
          let x_4510 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4509.x, x_4510.y, x_4510.z, x_4509.y);
          let x_4513 : bool = u_xlatb11.x;
          if (x_4513) {
            let x_4518 : f32 = u_xlat13.x;
            x_4514 = x_4518;
          } else {
            let x_4521 : f32 = u_xlat13.x;
            x_4514 = -(x_4521);
          }
          let x_4523 : f32 = x_4514;
          u_xlat11.x = x_4523;
          let x_4526 : bool = u_xlatb11.w;
          if (x_4526) {
            let x_4531 : f32 = u_xlat13.x;
            x_4527 = x_4531;
          } else {
            let x_4534 : f32 = u_xlat13.x;
            x_4527 = -(x_4534);
          }
          let x_4536 : f32 = x_4527;
          u_xlat11.w = x_4536;
          let x_4538 : vec4<f32> = u_xlat12;
          let x_4540 : f32 = u_xlat75;
          let x_4543 : vec4<f32> = u_xlat11;
          let x_4545 : vec2<f32> = ((vec2<f32>(x_4538.x, x_4538.y) * vec2<f32>(x_4540, x_4540)) + vec2<f32>(x_4543.x, x_4543.w));
          let x_4546 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4545.x, x_4546.y, x_4546.z, x_4545.y);
          let x_4548 : vec4<f32> = u_xlat11;
          let x_4551 : vec2<f32> = ((vec2<f32>(x_4548.x, x_4548.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4552 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4551.x, x_4552.y, x_4552.z, x_4551.y);
          let x_4554 : vec4<f32> = u_xlat11;
          let x_4558 : vec2<f32> = clamp(vec2<f32>(x_4554.x, x_4554.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4559 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4558.x, x_4559.y, x_4559.z, x_4558.y);
          let x_4561 : u32 = u_xlatu68;
          let x_4564 : vec4<f32> = x_4212.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4561)];
          let x_4566 : vec4<f32> = u_xlat11;
          let x_4569 : u32 = u_xlatu68;
          let x_4572 : vec4<f32> = x_4212.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4569)];
          let x_4574 : vec2<f32> = ((vec2<f32>(x_4564.x, x_4564.y) * vec2<f32>(x_4566.x, x_4566.w)) + vec2<f32>(x_4572.z, x_4572.w));
          let x_4575 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4574.x, x_4574.y, x_4575.z);
        }
      }
      let x_4582 : vec3<f32> = u_xlat33;
      let x_4585 : f32 = x_160.x_GlobalMipBias.x;
      let x_4586 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4582.x, x_4582.y), x_4585);
      u_xlat11 = x_4586;
      let x_4588 : bool = u_xlatb3.w;
      if (x_4588) {
        let x_4593 : f32 = u_xlat11.w;
        x_4589 = x_4593;
      } else {
        let x_4596 : f32 = u_xlat11.x;
        x_4589 = x_4596;
      }
      let x_4597 : f32 = x_4589;
      u_xlat75 = x_4597;
      let x_4599 : bool = u_xlatb3.x;
      if (x_4599) {
        let x_4603 : vec4<f32> = u_xlat11;
        x_4600 = vec3<f32>(x_4603.x, x_4603.y, x_4603.z);
      } else {
        let x_4606 : f32 = u_xlat75;
        x_4600 = vec3<f32>(x_4606, x_4606, x_4606);
      }
      let x_4608 : vec3<f32> = x_4600;
      let x_4609 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4608.x, x_4608.y, x_4608.z, x_4609.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4615 : vec4<f32> = u_xlat11;
    let x_4617 : u32 = u_xlatu68;
    let x_4620 : vec4<f32> = x_4102.x_AdditionalLightsColor[bitcast<i32>(x_4617)];
    let x_4622 : vec3<f32> = (vec3<f32>(x_4615.x, x_4615.y, x_4615.z) * vec3<f32>(x_4620.x, x_4620.y, x_4620.z));
    let x_4623 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4622.x, x_4622.y, x_4622.z, x_4623.w);
    let x_4625 : f32 = u_xlat72;
    let x_4627 : vec4<f32> = u_xlat11;
    let x_4629 : vec3<f32> = (vec3<f32>(x_4625, x_4625, x_4625) * vec3<f32>(x_4627.x, x_4627.y, x_4627.z));
    let x_4630 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4629.x, x_4629.y, x_4629.z, x_4630.w);
    let x_4632 : vec4<f32> = u_xlat5;
    let x_4634 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4632.x, x_4632.y, x_4632.z), vec3<f32>(x_4634.x, x_4634.y, x_4634.z));
    let x_4637 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4637, 0.0f, 1.0f);
    let x_4639 : f32 = u_xlat68;
    let x_4640 : f32 = u_xlat73;
    u_xlat68 = (x_4639 * x_4640);
    let x_4642 : f32 = u_xlat68;
    let x_4644 : vec4<f32> = u_xlat11;
    let x_4646 : vec3<f32> = (vec3<f32>(x_4642, x_4642, x_4642) * vec3<f32>(x_4644.x, x_4644.y, x_4644.z));
    let x_4647 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4646.x, x_4646.y, x_4646.z, x_4647.w);
    let x_4649 : vec4<f32> = u_xlat9;
    let x_4651 : f32 = u_xlat74;
    let x_4654 : vec3<f32> = u_xlat4;
    let x_4655 : vec3<f32> = ((vec3<f32>(x_4649.x, x_4649.y, x_4649.z) * vec3<f32>(x_4651, x_4651, x_4651)) + x_4654);
    let x_4656 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4655.x, x_4655.y, x_4655.z, x_4656.w);
    let x_4658 : vec4<f32> = u_xlat9;
    let x_4660 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4658.x, x_4658.y, x_4658.z), vec3<f32>(x_4660.x, x_4660.y, x_4660.z));
    let x_4663 : f32 = u_xlat68;
    u_xlat68 = max(x_4663, 1.17549435e-37f);
    let x_4665 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4665);
    let x_4667 : f32 = u_xlat68;
    let x_4669 : vec4<f32> = u_xlat9;
    let x_4671 : vec3<f32> = (vec3<f32>(x_4667, x_4667, x_4667) * vec3<f32>(x_4669.x, x_4669.y, x_4669.z));
    let x_4672 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4671.x, x_4671.y, x_4671.z, x_4672.w);
    let x_4674 : vec4<f32> = u_xlat5;
    let x_4676 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4674.x, x_4674.y, x_4674.z), vec3<f32>(x_4676.x, x_4676.y, x_4676.z));
    let x_4679 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4679, 0.0f, 1.0f);
    let x_4681 : vec4<f32> = u_xlat10;
    let x_4683 : vec4<f32> = u_xlat9;
    u_xlat73 = dot(vec3<f32>(x_4681.x, x_4681.y, x_4681.z), vec3<f32>(x_4683.x, x_4683.y, x_4683.z));
    let x_4686 : f32 = u_xlat73;
    u_xlat73 = clamp(x_4686, 0.0f, 1.0f);
    let x_4688 : f32 = u_xlat68;
    let x_4689 : f32 = u_xlat68;
    u_xlat68 = (x_4688 * x_4689);
    let x_4691 : f32 = u_xlat68;
    let x_4693 : f32 = u_xlat44.x;
    u_xlat68 = ((x_4691 * x_4693) + 1.000010014f);
    let x_4696 : f32 = u_xlat73;
    let x_4697 : f32 = u_xlat73;
    u_xlat73 = (x_4696 * x_4697);
    let x_4699 : f32 = u_xlat68;
    let x_4700 : f32 = u_xlat68;
    u_xlat68 = (x_4699 * x_4700);
    let x_4702 : f32 = u_xlat73;
    u_xlat73 = max(x_4702, 0.100000001f);
    let x_4704 : f32 = u_xlat68;
    let x_4705 : f32 = u_xlat73;
    u_xlat68 = (x_4704 * x_4705);
    let x_4707 : f32 = u_xlat70;
    let x_4708 : f32 = u_xlat68;
    u_xlat68 = (x_4707 * x_4708);
    let x_4711 : f32 = u_xlat47.x;
    let x_4712 : f32 = u_xlat68;
    u_xlat68 = (x_4711 / x_4712);
    let x_4714 : f32 = u_xlat68;
    let x_4717 : vec3<f32> = u_xlat7;
    let x_4718 : vec3<f32> = ((vec3<f32>(x_4714, x_4714, x_4714) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4717);
    let x_4719 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4718.x, x_4718.y, x_4718.z, x_4719.w);
    let x_4721 : vec4<f32> = u_xlat9;
    let x_4723 : vec4<f32> = u_xlat11;
    let x_4726 : vec4<f32> = u_xlat8;
    let x_4728 : vec3<f32> = ((vec3<f32>(x_4721.x, x_4721.y, x_4721.z) * vec3<f32>(x_4723.x, x_4723.y, x_4723.z)) + vec3<f32>(x_4726.x, x_4726.y, x_4726.z));
    let x_4729 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4728.x, x_4728.y, x_4728.z, x_4729.w);

    continuing {
      let x_4731 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4731 + bitcast<u32>(1i));
    }
  }
  let x_4733 : vec4<f32> = u_xlat6;
  let x_4735 : f32 = u_xlat71;
  let x_4738 : vec4<f32> = u_xlat2;
  let x_4740 : vec3<f32> = ((vec3<f32>(x_4733.x, x_4733.y, x_4733.z) * vec3<f32>(x_4735, x_4735, x_4735)) + vec3<f32>(x_4738.x, x_4738.y, x_4738.z));
  let x_4741 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4740.x, x_4741.y, x_4740.y, x_4740.z);
  let x_4743 : vec4<f32> = u_xlat8;
  let x_4745 : vec4<f32> = u_xlat0;
  let x_4747 : vec3<f32> = (vec3<f32>(x_4743.x, x_4743.y, x_4743.z) + vec3<f32>(x_4745.x, x_4745.z, x_4745.w));
  let x_4748 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4747.x, x_4748.y, x_4747.y, x_4747.z);
  let x_4750 : vec4<f32> = vs_INTERP4;
  let x_4752 : vec3<f32> = u_xlat1;
  let x_4754 : vec4<f32> = u_xlat0;
  let x_4756 : vec3<f32> = ((vec3<f32>(x_4750.w, x_4750.w, x_4750.w) * x_4752) + vec3<f32>(x_4754.x, x_4754.z, x_4754.w));
  let x_4757 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4756.x, x_4757.y, x_4756.y, x_4756.z);
  let x_4760 : f32 = u_xlat22.x;
  let x_4762 : f32 = u_xlat22.x;
  u_xlat22.x = (x_4760 * -(x_4762));
  let x_4767 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_4767);
  let x_4770 : vec4<f32> = u_xlat0;
  let x_4774 : vec4<f32> = x_160.unity_FogColor;
  let x_4777 : vec3<f32> = (vec3<f32>(x_4770.x, x_4770.z, x_4770.w) + -(vec3<f32>(x_4774.x, x_4774.y, x_4774.z)));
  let x_4778 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4777.x, x_4778.y, x_4777.y, x_4777.z);
  let x_4782 : vec3<f32> = u_xlat22;
  let x_4784 : vec4<f32> = u_xlat0;
  let x_4788 : vec4<f32> = x_160.unity_FogColor;
  let x_4790 : vec3<f32> = ((vec3<f32>(x_4782.x, x_4782.x, x_4782.x) * vec3<f32>(x_4784.x, x_4784.z, x_4784.w)) + vec3<f32>(x_4788.x, x_4788.y, x_4788.z));
  let x_4791 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4790.x, x_4790.y, x_4790.z, x_4791.w);
  let x_4793 : bool = u_xlatb25;
  let x_4794 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4794, x_4793);
  let x_4800 : u32 = x_160.x_RenderingLayerMaxInt;
  let x_4802 : f32 = x_94.unity_RenderingLayer.x;
  u_xlatu0 = (x_4800 & bitcast<u32>(x_4802));
  let x_4805 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4805);
  let x_4810 : f32 = u_xlat0.x;
  let x_4812 : f32 = x_160.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4810 * x_4812);
  let x_4816 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4816, 0.0f, 1.0f);
  let x_4819 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4819.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

