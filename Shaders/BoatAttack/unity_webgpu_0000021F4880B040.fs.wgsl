struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3143 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3592 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3720 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1688 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatb8 : vec2<bool>;
  var x_3227 : f32;
  var x_3239 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var u_xlati69 : i32;
  var u_xlati50 : i32;
  var u_xlat54 : vec2<f32>;
  var u_xlatb50 : vec2<bool>;
  var x_4012 : f32;
  var x_4025 : f32;
  var x_4077 : f32;
  var x_4088 : vec3<f32>;
  var x_4271 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1658 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1658 == 0.0f);
  let x_1661 : vec3<f32> = vs_INTERP0;
  let x_1665 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1661) + x_1665);
  let x_1667 : vec3<f32> = u_xlat25;
  let x_1668 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1667, x_1668);
  let x_1670 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1670);
  let x_1672 : f32 = u_xlat64;
  let x_1674 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1672, x_1672, x_1672) * x_1674);
  let x_1678 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat5.x = x_1678;
  let x_1681 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat5.y = x_1681;
  let x_1684 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat5.z = x_1684;
  let x_1687 : bool = u_xlatb22.x;
  if (x_1687) {
    let x_1691 : vec3<f32> = u_xlat25;
    x_1688 = x_1691;
  } else {
    let x_1693 : vec4<f32> = u_xlat5;
    x_1688 = vec3<f32>(x_1693.x, x_1693.y, x_1693.z);
  }
  let x_1695 : vec3<f32> = x_1688;
  u_xlat25 = x_1695;
  let x_1697 : f32 = vs_INTERP0.y;
  let x_1699 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat22.x = (x_1697 * x_1699);
  let x_1703 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1705 : f32 = vs_INTERP0.x;
  let x_1708 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1703 * x_1705) + x_1708);
  let x_1712 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1714 : f32 = vs_INTERP0.z;
  let x_1717 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1712 * x_1714) + x_1717);
  let x_1721 : f32 = u_xlat22.x;
  let x_1723 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat22.x = (x_1721 + x_1723);
  let x_1727 : f32 = u_xlat22.x;
  let x_1730 : f32 = x_66.x_ProjectionParams.y;
  u_xlat22.x = (-(x_1727) + -(x_1730));
  let x_1735 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_1735, 0.0f);
  let x_1739 : f32 = u_xlat22.x;
  let x_1742 : f32 = x_66.unity_FogParams.x;
  u_xlat22.x = (x_1739 * x_1742);
  let x_1752 : vec2<f32> = vs_INTERP5;
  let x_1754 : f32 = x_66.x_GlobalMipBias.x;
  let x_1755 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1752, x_1754);
  let x_1756 : vec3<f32> = vec3<f32>(x_1755.x, x_1755.y, x_1755.z);
  let x_1757 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1756.x, x_1756.y, x_1756.z, x_1757.w);
  let x_1760 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1761 : vec2<f32> = vec2<f32>(x_1760.x, x_1760.y);
  let x_1765 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1761.x, x_1761.y));
  let x_1766 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1765.x, x_1765.y, x_1766.z, x_1766.w);
  let x_1768 : vec4<f32> = u_xlat6;
  let x_1770 : vec4<f32> = hlslcc_FragCoord;
  let x_1772 : vec2<f32> = (vec2<f32>(x_1768.x, x_1768.y) * vec2<f32>(x_1770.x, x_1770.y));
  let x_1773 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1772.x, x_1772.y, x_1773.z, x_1773.w);
  let x_1776 : f32 = u_xlat6.y;
  let x_1779 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1782 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1776 * x_1779) + x_1782);
  let x_1784 : f32 = u_xlat64;
  u_xlat6.z = (-(x_1784) + 1.0f);
  let x_1789 : f32 = u_xlat3.x;
  u_xlat3.x = x_1789;
  let x_1792 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1792, 0.0f, 1.0f);
  let x_1796 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1796, 1.0f);
  let x_1799 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1799 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1804 : f32 = u_xlat3.x;
  u_xlat64 = (-(x_1804) + 1.0f);
  let x_1807 : f32 = u_xlat64;
  let x_1808 : f32 = u_xlat64;
  u_xlat65 = (x_1807 * x_1808);
  let x_1810 : f32 = u_xlat65;
  u_xlat65 = max(x_1810, 0.0078125f);
  let x_1814 : f32 = u_xlat65;
  let x_1815 : f32 = u_xlat65;
  u_xlat68 = (x_1814 * x_1815);
  let x_1818 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1818 + 0.040000021f);
  let x_1823 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1823, 1.0f);
  let x_1826 : f32 = u_xlat65;
  u_xlat27.x = ((x_1826 * 4.0f) + 2.0f);
  let x_1836 : vec4<f32> = u_xlat6;
  let x_1839 : f32 = x_66.x_GlobalMipBias.x;
  let x_1840 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1836.x, x_1836.z), x_1839);
  u_xlat6.x = x_1840.x;
  let x_1845 : f32 = u_xlat6.x;
  u_xlat48 = (x_1845 + -1.0f);
  let x_1849 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1850 : f32 = u_xlat48;
  u_xlat48 = ((x_1849 * x_1850) + 1.0f);
  let x_1854 : f32 = u_xlat6.x;
  let x_1856 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1854, x_1856);
  let x_1859 : bool = u_xlatb63;
  if (x_1859) {
    let x_1863 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1863 == 1.0f);
    let x_1865 : bool = u_xlatb63;
    if (x_1865) {
      let x_1869 : vec4<f32> = vs_INTERP9;
      let x_1872 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1869.x, x_1869.y, x_1869.x, x_1869.y) + x_1872);
      let x_1875 : vec4<f32> = u_xlat7;
      let x_1876 : vec2<f32> = vec2<f32>(x_1875.x, x_1875.y);
      let x_1878 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1876.x, x_1876.y, x_1878);
      let x_1885 : vec3<f32> = txVec30;
      let x_1887 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1885.xy, x_1885.z);
      u_xlat8.x = x_1887;
      let x_1890 : vec4<f32> = u_xlat7;
      let x_1891 : vec2<f32> = vec2<f32>(x_1890.z, x_1890.w);
      let x_1893 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1891.x, x_1891.y, x_1893);
      let x_1900 : vec3<f32> = txVec31;
      let x_1902 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1900.xy, x_1900.z);
      u_xlat8.y = x_1902;
      let x_1904 : vec4<f32> = vs_INTERP9;
      let x_1907 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1904.x, x_1904.y, x_1904.x, x_1904.y) + x_1907);
      let x_1910 : vec4<f32> = u_xlat7;
      let x_1911 : vec2<f32> = vec2<f32>(x_1910.x, x_1910.y);
      let x_1913 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1911.x, x_1911.y, x_1913);
      let x_1920 : vec3<f32> = txVec32;
      let x_1922 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1920.xy, x_1920.z);
      u_xlat8.z = x_1922;
      let x_1925 : vec4<f32> = u_xlat7;
      let x_1926 : vec2<f32> = vec2<f32>(x_1925.z, x_1925.w);
      let x_1928 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1926.x, x_1926.y, x_1928);
      let x_1935 : vec3<f32> = txVec33;
      let x_1937 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1935.xy, x_1935.z);
      u_xlat8.w = x_1937;
      let x_1939 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1939, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1944 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb69 = (x_1944 == 2.0f);
      let x_1946 : bool = u_xlatb69;
      if (x_1946) {
        let x_1949 : vec4<f32> = vs_INTERP9;
        let x_1952 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1955 : vec2<f32> = ((vec2<f32>(x_1949.x, x_1949.y) * vec2<f32>(x_1952.z, x_1952.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1956 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1955.x, x_1955.y, x_1956.z, x_1956.w);
        let x_1958 : vec4<f32> = u_xlat7;
        let x_1960 : vec2<f32> = floor(vec2<f32>(x_1958.x, x_1958.y));
        let x_1961 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1960.x, x_1960.y, x_1961.z, x_1961.w);
        let x_1963 : vec4<f32> = vs_INTERP9;
        let x_1966 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1969 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1963.x, x_1963.y) * vec2<f32>(x_1966.z, x_1966.w)) + -(vec2<f32>(x_1969.x, x_1969.y)));
        let x_1973 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1973.x, x_1973.x, x_1973.y, x_1973.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1976 : vec4<f32> = u_xlat8;
        let x_1978 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1976.x, x_1976.x, x_1976.z, x_1976.z) * vec4<f32>(x_1978.x, x_1978.x, x_1978.z, x_1978.z));
        let x_1981 : vec4<f32> = u_xlat9;
        let x_1983 : vec2<f32> = (vec2<f32>(x_1981.y, x_1981.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1984 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1983.x, x_1984.y, x_1983.y, x_1984.w);
        let x_1986 : vec4<f32> = u_xlat9;
        let x_1989 : vec2<f32> = u_xlat49;
        let x_1991 : vec2<f32> = ((vec2<f32>(x_1986.x, x_1986.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1989));
        let x_1992 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1991.x, x_1991.y, x_1992.z, x_1992.w);
        let x_1995 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_1995) + vec2<f32>(1.0f, 1.0f));
        let x_1998 : vec2<f32> = u_xlat49;
        let x_1999 : vec2<f32> = min(x_1998, vec2<f32>(0.0f, 0.0f));
        let x_2000 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1999.x, x_1999.y, x_2000.z, x_2000.w);
        let x_2002 : vec4<f32> = u_xlat10;
        let x_2005 : vec4<f32> = u_xlat10;
        let x_2008 : vec2<f32> = u_xlat51;
        let x_2009 : vec2<f32> = ((-(vec2<f32>(x_2002.x, x_2002.y)) * vec2<f32>(x_2005.x, x_2005.y)) + x_2008);
        let x_2010 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2009.x, x_2009.y, x_2010.z, x_2010.w);
        let x_2012 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2012, vec2<f32>(0.0f, 0.0f));
        let x_2014 : vec2<f32> = u_xlat49;
        let x_2016 : vec2<f32> = u_xlat49;
        let x_2018 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2014) * x_2016) + vec2<f32>(x_2018.y, x_2018.w));
        let x_2021 : vec4<f32> = u_xlat10;
        let x_2023 : vec2<f32> = (vec2<f32>(x_2021.x, x_2021.y) + vec2<f32>(1.0f, 1.0f));
        let x_2024 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2023.x, x_2023.y, x_2024.z, x_2024.w);
        let x_2026 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2026 + vec2<f32>(1.0f, 1.0f));
        let x_2028 : vec4<f32> = u_xlat9;
        let x_2030 : vec2<f32> = (vec2<f32>(x_2028.x, x_2028.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2031 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2030.x, x_2030.y, x_2031.z, x_2031.w);
        let x_2033 : vec2<f32> = u_xlat51;
        let x_2034 : vec2<f32> = (x_2033 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2035 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2034.x, x_2034.y, x_2035.z, x_2035.w);
        let x_2037 : vec4<f32> = u_xlat10;
        let x_2039 : vec2<f32> = (vec2<f32>(x_2037.x, x_2037.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2040 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2039.x, x_2039.y, x_2040.z, x_2040.w);
        let x_2042 : vec2<f32> = u_xlat49;
        let x_2043 : vec2<f32> = (x_2042 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2044 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2043.x, x_2043.y, x_2044.z, x_2044.w);
        let x_2046 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2046.y, x_2046.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2050 : f32 = u_xlat10.x;
        u_xlat11.z = x_2050;
        let x_2053 : f32 = u_xlat49.x;
        u_xlat11.w = x_2053;
        let x_2056 : f32 = u_xlat12.x;
        u_xlat9.z = x_2056;
        let x_2059 : f32 = u_xlat8.x;
        u_xlat9.w = x_2059;
        let x_2061 : vec4<f32> = u_xlat9;
        let x_2063 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2061.z, x_2061.w, x_2061.x, x_2061.z) + vec4<f32>(x_2063.z, x_2063.w, x_2063.x, x_2063.z));
        let x_2067 : f32 = u_xlat11.y;
        u_xlat10.z = x_2067;
        let x_2070 : f32 = u_xlat49.y;
        u_xlat10.w = x_2070;
        let x_2073 : f32 = u_xlat9.y;
        u_xlat12.z = x_2073;
        let x_2076 : f32 = u_xlat8.z;
        u_xlat12.w = x_2076;
        let x_2078 : vec4<f32> = u_xlat10;
        let x_2080 : vec4<f32> = u_xlat12;
        let x_2082 : vec3<f32> = (vec3<f32>(x_2078.z, x_2078.y, x_2078.w) + vec3<f32>(x_2080.z, x_2080.y, x_2080.w));
        let x_2083 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2082.x, x_2082.y, x_2082.z, x_2083.w);
        let x_2085 : vec4<f32> = u_xlat9;
        let x_2087 : vec4<f32> = u_xlat13;
        let x_2089 : vec3<f32> = (vec3<f32>(x_2085.x, x_2085.z, x_2085.w) / vec3<f32>(x_2087.z, x_2087.w, x_2087.y));
        let x_2090 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2089.x, x_2089.y, x_2089.z, x_2090.w);
        let x_2092 : vec4<f32> = u_xlat9;
        let x_2094 : vec3<f32> = (vec3<f32>(x_2092.x, x_2092.y, x_2092.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2095 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2094.x, x_2094.y, x_2094.z, x_2095.w);
        let x_2097 : vec4<f32> = u_xlat12;
        let x_2099 : vec4<f32> = u_xlat8;
        let x_2101 : vec3<f32> = (vec3<f32>(x_2097.z, x_2097.y, x_2097.w) / vec3<f32>(x_2099.x, x_2099.y, x_2099.z));
        let x_2102 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2101.x, x_2101.y, x_2101.z, x_2102.w);
        let x_2104 : vec4<f32> = u_xlat10;
        let x_2106 : vec3<f32> = (vec3<f32>(x_2104.x, x_2104.y, x_2104.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2107 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2106.x, x_2106.y, x_2106.z, x_2107.w);
        let x_2109 : vec4<f32> = u_xlat9;
        let x_2112 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2114 : vec3<f32> = (vec3<f32>(x_2109.y, x_2109.x, x_2109.z) * vec3<f32>(x_2112.x, x_2112.x, x_2112.x));
        let x_2115 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2114.x, x_2114.y, x_2114.z, x_2115.w);
        let x_2117 : vec4<f32> = u_xlat10;
        let x_2120 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2122 : vec3<f32> = (vec3<f32>(x_2117.x, x_2117.y, x_2117.z) * vec3<f32>(x_2120.y, x_2120.y, x_2120.y));
        let x_2123 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2122.x, x_2122.y, x_2122.z, x_2123.w);
        let x_2126 : f32 = u_xlat10.x;
        u_xlat9.w = x_2126;
        let x_2128 : vec4<f32> = u_xlat7;
        let x_2131 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2134 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2128.x, x_2128.y, x_2128.x, x_2128.y) * vec4<f32>(x_2131.x, x_2131.y, x_2131.x, x_2131.y)) + vec4<f32>(x_2134.y, x_2134.w, x_2134.x, x_2134.w));
        let x_2137 : vec4<f32> = u_xlat7;
        let x_2140 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2143 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2137.x, x_2137.y) * vec2<f32>(x_2140.x, x_2140.y)) + vec2<f32>(x_2143.z, x_2143.w));
        let x_2147 : f32 = u_xlat9.y;
        u_xlat10.w = x_2147;
        let x_2149 : vec4<f32> = u_xlat10;
        let x_2150 : vec2<f32> = vec2<f32>(x_2149.y, x_2149.z);
        let x_2151 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2151.x, x_2150.x, x_2151.z, x_2150.y);
        let x_2153 : vec4<f32> = u_xlat7;
        let x_2156 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2159 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2153.x, x_2153.y, x_2153.x, x_2153.y) * vec4<f32>(x_2156.x, x_2156.y, x_2156.x, x_2156.y)) + vec4<f32>(x_2159.x, x_2159.y, x_2159.z, x_2159.y));
        let x_2162 : vec4<f32> = u_xlat7;
        let x_2165 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2168 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2162.x, x_2162.y, x_2162.x, x_2162.y) * vec4<f32>(x_2165.x, x_2165.y, x_2165.x, x_2165.y)) + vec4<f32>(x_2168.w, x_2168.y, x_2168.w, x_2168.z));
        let x_2171 : vec4<f32> = u_xlat7;
        let x_2174 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2177 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2171.x, x_2171.y, x_2171.x, x_2171.y) * vec4<f32>(x_2174.x, x_2174.y, x_2174.x, x_2174.y)) + vec4<f32>(x_2177.x, x_2177.w, x_2177.z, x_2177.w));
        let x_2180 : vec4<f32> = u_xlat8;
        let x_2182 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2180.x, x_2180.x, x_2180.x, x_2180.y) * vec4<f32>(x_2182.z, x_2182.w, x_2182.y, x_2182.z));
        let x_2185 : vec4<f32> = u_xlat8;
        let x_2187 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2185.y, x_2185.y, x_2185.z, x_2185.z) * x_2187);
        let x_2191 : f32 = u_xlat8.z;
        let x_2193 : f32 = u_xlat13.y;
        u_xlat69 = (x_2191 * x_2193);
        let x_2196 : vec4<f32> = u_xlat11;
        let x_2197 : vec2<f32> = vec2<f32>(x_2196.x, x_2196.y);
        let x_2199 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2197.x, x_2197.y, x_2199);
        let x_2206 : vec3<f32> = txVec34;
        let x_2208 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2206.xy, x_2206.z);
        u_xlat7.x = x_2208;
        let x_2211 : vec4<f32> = u_xlat11;
        let x_2212 : vec2<f32> = vec2<f32>(x_2211.z, x_2211.w);
        let x_2214 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2212.x, x_2212.y, x_2214);
        let x_2221 : vec3<f32> = txVec35;
        let x_2223 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2221.xy, x_2221.z);
        u_xlat28.x = x_2223;
        let x_2226 : f32 = u_xlat28.x;
        let x_2228 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2226 * x_2228);
        let x_2232 : f32 = u_xlat14.x;
        let x_2234 : f32 = u_xlat7.x;
        let x_2237 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2232 * x_2234) + x_2237);
        let x_2241 : vec2<f32> = u_xlat49;
        let x_2243 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2241.x, x_2241.y, x_2243);
        let x_2250 : vec3<f32> = txVec36;
        let x_2252 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2250.xy, x_2250.z);
        u_xlat28.x = x_2252;
        let x_2255 : f32 = u_xlat14.z;
        let x_2257 : f32 = u_xlat28.x;
        let x_2260 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2255 * x_2257) + x_2260);
        let x_2264 : vec4<f32> = u_xlat10;
        let x_2265 : vec2<f32> = vec2<f32>(x_2264.x, x_2264.y);
        let x_2267 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2265.x, x_2265.y, x_2267);
        let x_2274 : vec3<f32> = txVec37;
        let x_2276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2274.xy, x_2274.z);
        u_xlat28.x = x_2276;
        let x_2279 : f32 = u_xlat14.w;
        let x_2281 : f32 = u_xlat28.x;
        let x_2284 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2279 * x_2281) + x_2284);
        let x_2288 : vec4<f32> = u_xlat12;
        let x_2289 : vec2<f32> = vec2<f32>(x_2288.x, x_2288.y);
        let x_2291 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2289.x, x_2289.y, x_2291);
        let x_2298 : vec3<f32> = txVec38;
        let x_2300 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2298.xy, x_2298.z);
        u_xlat28.x = x_2300;
        let x_2303 : f32 = u_xlat15.x;
        let x_2305 : f32 = u_xlat28.x;
        let x_2308 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2303 * x_2305) + x_2308);
        let x_2312 : vec4<f32> = u_xlat12;
        let x_2313 : vec2<f32> = vec2<f32>(x_2312.z, x_2312.w);
        let x_2315 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2313.x, x_2313.y, x_2315);
        let x_2322 : vec3<f32> = txVec39;
        let x_2324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2322.xy, x_2322.z);
        u_xlat28.x = x_2324;
        let x_2327 : f32 = u_xlat15.y;
        let x_2329 : f32 = u_xlat28.x;
        let x_2332 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2327 * x_2329) + x_2332);
        let x_2336 : vec4<f32> = u_xlat10;
        let x_2337 : vec2<f32> = vec2<f32>(x_2336.z, x_2336.w);
        let x_2339 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2337.x, x_2337.y, x_2339);
        let x_2346 : vec3<f32> = txVec40;
        let x_2348 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2346.xy, x_2346.z);
        u_xlat28.x = x_2348;
        let x_2351 : f32 = u_xlat15.z;
        let x_2353 : f32 = u_xlat28.x;
        let x_2356 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2351 * x_2353) + x_2356);
        let x_2360 : vec4<f32> = u_xlat9;
        let x_2361 : vec2<f32> = vec2<f32>(x_2360.x, x_2360.y);
        let x_2363 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2361.x, x_2361.y, x_2363);
        let x_2370 : vec3<f32> = txVec41;
        let x_2372 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2370.xy, x_2370.z);
        u_xlat28.x = x_2372;
        let x_2375 : f32 = u_xlat15.w;
        let x_2377 : f32 = u_xlat28.x;
        let x_2380 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2375 * x_2377) + x_2380);
        let x_2384 : vec4<f32> = u_xlat9;
        let x_2385 : vec2<f32> = vec2<f32>(x_2384.z, x_2384.w);
        let x_2387 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2385.x, x_2385.y, x_2387);
        let x_2394 : vec3<f32> = txVec42;
        let x_2396 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2394.xy, x_2394.z);
        u_xlat28.x = x_2396;
        let x_2398 : f32 = u_xlat69;
        let x_2400 : f32 = u_xlat28.x;
        let x_2403 : f32 = u_xlat7.x;
        u_xlat63 = ((x_2398 * x_2400) + x_2403);
      } else {
        let x_2406 : vec4<f32> = vs_INTERP9;
        let x_2409 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2412 : vec2<f32> = ((vec2<f32>(x_2406.x, x_2406.y) * vec2<f32>(x_2409.z, x_2409.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2413 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2412.x, x_2412.y, x_2413.z, x_2413.w);
        let x_2415 : vec4<f32> = u_xlat7;
        let x_2417 : vec2<f32> = floor(vec2<f32>(x_2415.x, x_2415.y));
        let x_2418 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2417.x, x_2417.y, x_2418.z, x_2418.w);
        let x_2420 : vec4<f32> = vs_INTERP9;
        let x_2423 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2426 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2420.x, x_2420.y) * vec2<f32>(x_2423.z, x_2423.w)) + -(vec2<f32>(x_2426.x, x_2426.y)));
        let x_2430 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2430.x, x_2430.x, x_2430.y, x_2430.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2433 : vec4<f32> = u_xlat8;
        let x_2435 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2433.x, x_2433.x, x_2433.z, x_2433.z) * vec4<f32>(x_2435.x, x_2435.x, x_2435.z, x_2435.z));
        let x_2438 : vec4<f32> = u_xlat9;
        let x_2440 : vec2<f32> = (vec2<f32>(x_2438.y, x_2438.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2441 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2441.x, x_2440.x, x_2441.z, x_2440.y);
        let x_2443 : vec4<f32> = u_xlat9;
        let x_2446 : vec2<f32> = u_xlat49;
        let x_2448 : vec2<f32> = ((vec2<f32>(x_2443.x, x_2443.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2446));
        let x_2449 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2448.x, x_2449.y, x_2448.y, x_2449.w);
        let x_2451 : vec2<f32> = u_xlat49;
        let x_2453 : vec2<f32> = (-(x_2451) + vec2<f32>(1.0f, 1.0f));
        let x_2454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2453.x, x_2453.y, x_2454.z, x_2454.w);
        let x_2456 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2456, vec2<f32>(0.0f, 0.0f));
        let x_2458 : vec2<f32> = u_xlat51;
        let x_2460 : vec2<f32> = u_xlat51;
        let x_2462 : vec4<f32> = u_xlat9;
        let x_2464 : vec2<f32> = ((-(x_2458) * x_2460) + vec2<f32>(x_2462.x, x_2462.y));
        let x_2465 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2464.x, x_2464.y, x_2465.z, x_2465.w);
        let x_2467 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2467, vec2<f32>(0.0f, 0.0f));
        let x_2470 : vec2<f32> = u_xlat51;
        let x_2472 : vec2<f32> = u_xlat51;
        let x_2474 : vec4<f32> = u_xlat8;
        let x_2476 : vec2<f32> = ((-(x_2470) * x_2472) + vec2<f32>(x_2474.y, x_2474.w));
        let x_2477 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2476.x, x_2477.y, x_2476.y);
        let x_2479 : vec4<f32> = u_xlat9;
        let x_2481 : vec2<f32> = (vec2<f32>(x_2479.x, x_2479.y) + vec2<f32>(2.0f, 2.0f));
        let x_2482 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2481.x, x_2481.y, x_2482.z, x_2482.w);
        let x_2484 : vec3<f32> = u_xlat29;
        let x_2486 : vec2<f32> = (vec2<f32>(x_2484.x, x_2484.z) + vec2<f32>(2.0f, 2.0f));
        let x_2487 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2487.x, x_2486.x, x_2487.z, x_2486.y);
        let x_2490 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2490 * 0.081632003f);
        let x_2493 : vec4<f32> = u_xlat8;
        let x_2495 : vec3<f32> = (vec3<f32>(x_2493.z, x_2493.x, x_2493.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2496 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2495.x, x_2495.y, x_2495.z, x_2496.w);
        let x_2498 : vec4<f32> = u_xlat9;
        let x_2500 : vec2<f32> = (vec2<f32>(x_2498.x, x_2498.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2501 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2500.x, x_2500.y, x_2501.z, x_2501.w);
        let x_2504 : f32 = u_xlat12.y;
        u_xlat11.x = x_2504;
        let x_2506 : vec2<f32> = u_xlat49;
        let x_2509 : vec2<f32> = ((vec2<f32>(x_2506.x, x_2506.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2510 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2510.x, x_2509.x, x_2510.z, x_2509.y);
        let x_2512 : vec2<f32> = u_xlat49;
        let x_2515 : vec2<f32> = ((vec2<f32>(x_2512.x, x_2512.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2516 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2515.x, x_2516.y, x_2515.y, x_2516.w);
        let x_2519 : f32 = u_xlat8.x;
        u_xlat9.y = x_2519;
        let x_2522 : f32 = u_xlat10.y;
        u_xlat9.w = x_2522;
        let x_2524 : vec4<f32> = u_xlat9;
        let x_2525 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2524 + x_2525);
        let x_2527 : vec2<f32> = u_xlat49;
        let x_2530 : vec2<f32> = ((vec2<f32>(x_2527.y, x_2527.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2531 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2531.x, x_2530.x, x_2531.z, x_2530.y);
        let x_2533 : vec2<f32> = u_xlat49;
        let x_2536 : vec2<f32> = ((vec2<f32>(x_2533.y, x_2533.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2537 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2536.x, x_2537.y, x_2536.y, x_2537.w);
        let x_2540 : f32 = u_xlat8.y;
        u_xlat10.y = x_2540;
        let x_2542 : vec4<f32> = u_xlat10;
        let x_2543 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2542 + x_2543);
        let x_2545 : vec4<f32> = u_xlat9;
        let x_2546 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2545 / x_2546);
        let x_2548 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2548 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2550 : vec4<f32> = u_xlat10;
        let x_2551 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2550 / x_2551);
        let x_2553 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2553 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2555 : vec4<f32> = u_xlat9;
        let x_2558 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2555.w, x_2555.x, x_2555.y, x_2555.z) * vec4<f32>(x_2558.x, x_2558.x, x_2558.x, x_2558.x));
        let x_2561 : vec4<f32> = u_xlat10;
        let x_2564 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2561.x, x_2561.w, x_2561.y, x_2561.z) * vec4<f32>(x_2564.y, x_2564.y, x_2564.y, x_2564.y));
        let x_2567 : vec4<f32> = u_xlat9;
        let x_2568 : vec3<f32> = vec3<f32>(x_2567.y, x_2567.z, x_2567.w);
        let x_2569 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2568.x, x_2569.y, x_2568.y, x_2568.z);
        let x_2572 : f32 = u_xlat10.x;
        u_xlat12.y = x_2572;
        let x_2574 : vec4<f32> = u_xlat7;
        let x_2577 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2580 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2574.x, x_2574.y, x_2574.x, x_2574.y) * vec4<f32>(x_2577.x, x_2577.y, x_2577.x, x_2577.y)) + vec4<f32>(x_2580.x, x_2580.y, x_2580.z, x_2580.y));
        let x_2583 : vec4<f32> = u_xlat7;
        let x_2586 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2589 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2583.x, x_2583.y) * vec2<f32>(x_2586.x, x_2586.y)) + vec2<f32>(x_2589.w, x_2589.y));
        let x_2593 : f32 = u_xlat12.y;
        u_xlat9.y = x_2593;
        let x_2596 : f32 = u_xlat10.z;
        u_xlat12.y = x_2596;
        let x_2598 : vec4<f32> = u_xlat7;
        let x_2601 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2604 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2598.x, x_2598.y, x_2598.x, x_2598.y) * vec4<f32>(x_2601.x, x_2601.y, x_2601.x, x_2601.y)) + vec4<f32>(x_2604.x, x_2604.y, x_2604.z, x_2604.y));
        let x_2607 : vec4<f32> = u_xlat7;
        let x_2610 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2613 : vec4<f32> = u_xlat12;
        let x_2615 : vec2<f32> = ((vec2<f32>(x_2607.x, x_2607.y) * vec2<f32>(x_2610.x, x_2610.y)) + vec2<f32>(x_2613.w, x_2613.y));
        let x_2616 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2615.x, x_2615.y, x_2616.z, x_2616.w);
        let x_2619 : f32 = u_xlat12.y;
        u_xlat9.z = x_2619;
        let x_2621 : vec4<f32> = u_xlat7;
        let x_2624 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2627 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2621.x, x_2621.y, x_2621.x, x_2621.y) * vec4<f32>(x_2624.x, x_2624.y, x_2624.x, x_2624.y)) + vec4<f32>(x_2627.x, x_2627.y, x_2627.x, x_2627.z));
        let x_2631 : f32 = u_xlat10.w;
        u_xlat12.y = x_2631;
        let x_2633 : vec4<f32> = u_xlat7;
        let x_2636 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2639 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2633.x, x_2633.y, x_2633.x, x_2633.y) * vec4<f32>(x_2636.x, x_2636.y, x_2636.x, x_2636.y)) + vec4<f32>(x_2639.x, x_2639.y, x_2639.z, x_2639.y));
        let x_2643 : vec4<f32> = u_xlat7;
        let x_2646 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2649 : vec4<f32> = u_xlat12;
        let x_2651 : vec2<f32> = ((vec2<f32>(x_2643.x, x_2643.y) * vec2<f32>(x_2646.x, x_2646.y)) + vec2<f32>(x_2649.w, x_2649.y));
        let x_2652 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2651.x, x_2651.y, x_2652.z);
        let x_2655 : f32 = u_xlat12.y;
        u_xlat9.w = x_2655;
        let x_2658 : vec4<f32> = u_xlat7;
        let x_2661 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2664 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2658.x, x_2658.y) * vec2<f32>(x_2661.x, x_2661.y)) + vec2<f32>(x_2664.x, x_2664.w));
        let x_2667 : vec4<f32> = u_xlat12;
        let x_2668 : vec3<f32> = vec3<f32>(x_2667.x, x_2667.z, x_2667.w);
        let x_2669 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2668.x, x_2669.y, x_2668.y, x_2668.z);
        let x_2671 : vec4<f32> = u_xlat7;
        let x_2674 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2677 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2671.x, x_2671.y, x_2671.x, x_2671.y) * vec4<f32>(x_2674.x, x_2674.y, x_2674.x, x_2674.y)) + vec4<f32>(x_2677.x, x_2677.y, x_2677.z, x_2677.y));
        let x_2681 : vec4<f32> = u_xlat7;
        let x_2684 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2687 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2681.x, x_2681.y) * vec2<f32>(x_2684.x, x_2684.y)) + vec2<f32>(x_2687.w, x_2687.y));
        let x_2691 : f32 = u_xlat9.x;
        u_xlat10.x = x_2691;
        let x_2693 : vec4<f32> = u_xlat7;
        let x_2696 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2699 : vec4<f32> = u_xlat10;
        let x_2701 : vec2<f32> = ((vec2<f32>(x_2693.x, x_2693.y) * vec2<f32>(x_2696.x, x_2696.y)) + vec2<f32>(x_2699.x, x_2699.y));
        let x_2702 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2701.x, x_2701.y, x_2702.z, x_2702.w);
        let x_2704 : vec4<f32> = u_xlat8;
        let x_2706 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2704.x, x_2704.x, x_2704.x, x_2704.x) * x_2706);
        let x_2709 : vec4<f32> = u_xlat8;
        let x_2711 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2709.y, x_2709.y, x_2709.y, x_2709.y) * x_2711);
        let x_2714 : vec4<f32> = u_xlat8;
        let x_2716 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2714.z, x_2714.z, x_2714.z, x_2714.z) * x_2716);
        let x_2718 : vec4<f32> = u_xlat8;
        let x_2720 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2718.w, x_2718.w, x_2718.w, x_2718.w) * x_2720);
        let x_2723 : vec4<f32> = u_xlat13;
        let x_2724 : vec2<f32> = vec2<f32>(x_2723.x, x_2723.y);
        let x_2726 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2724.x, x_2724.y, x_2726);
        let x_2733 : vec3<f32> = txVec43;
        let x_2735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2733.xy, x_2733.z);
        u_xlat69 = x_2735;
        let x_2737 : vec4<f32> = u_xlat13;
        let x_2738 : vec2<f32> = vec2<f32>(x_2737.z, x_2737.w);
        let x_2740 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2738.x, x_2738.y, x_2740);
        let x_2747 : vec3<f32> = txVec44;
        let x_2749 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2747.xy, x_2747.z);
        u_xlat9.x = x_2749;
        let x_2752 : f32 = u_xlat9.x;
        let x_2754 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2752 * x_2754);
        let x_2758 : f32 = u_xlat18.x;
        let x_2759 : f32 = u_xlat69;
        let x_2762 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2758 * x_2759) + x_2762);
        let x_2765 : vec2<f32> = u_xlat49;
        let x_2767 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2765.x, x_2765.y, x_2767);
        let x_2774 : vec3<f32> = txVec45;
        let x_2776 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2774.xy, x_2774.z);
        u_xlat49.x = x_2776;
        let x_2779 : f32 = u_xlat18.z;
        let x_2781 : f32 = u_xlat49.x;
        let x_2783 : f32 = u_xlat69;
        u_xlat69 = ((x_2779 * x_2781) + x_2783);
        let x_2786 : vec4<f32> = u_xlat16;
        let x_2787 : vec2<f32> = vec2<f32>(x_2786.x, x_2786.y);
        let x_2789 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2787.x, x_2787.y, x_2789);
        let x_2796 : vec3<f32> = txVec46;
        let x_2798 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2796.xy, x_2796.z);
        u_xlat49.x = x_2798;
        let x_2801 : f32 = u_xlat18.w;
        let x_2803 : f32 = u_xlat49.x;
        let x_2805 : f32 = u_xlat69;
        u_xlat69 = ((x_2801 * x_2803) + x_2805);
        let x_2808 : vec4<f32> = u_xlat14;
        let x_2809 : vec2<f32> = vec2<f32>(x_2808.x, x_2808.y);
        let x_2811 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2809.x, x_2809.y, x_2811);
        let x_2818 : vec3<f32> = txVec47;
        let x_2820 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2818.xy, x_2818.z);
        u_xlat49.x = x_2820;
        let x_2823 : f32 = u_xlat19.x;
        let x_2825 : f32 = u_xlat49.x;
        let x_2827 : f32 = u_xlat69;
        u_xlat69 = ((x_2823 * x_2825) + x_2827);
        let x_2830 : vec4<f32> = u_xlat14;
        let x_2831 : vec2<f32> = vec2<f32>(x_2830.z, x_2830.w);
        let x_2833 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2831.x, x_2831.y, x_2833);
        let x_2840 : vec3<f32> = txVec48;
        let x_2842 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2840.xy, x_2840.z);
        u_xlat49.x = x_2842;
        let x_2845 : f32 = u_xlat19.y;
        let x_2847 : f32 = u_xlat49.x;
        let x_2849 : f32 = u_xlat69;
        u_xlat69 = ((x_2845 * x_2847) + x_2849);
        let x_2852 : vec4<f32> = u_xlat15;
        let x_2853 : vec2<f32> = vec2<f32>(x_2852.x, x_2852.y);
        let x_2855 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2853.x, x_2853.y, x_2855);
        let x_2862 : vec3<f32> = txVec49;
        let x_2864 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2862.xy, x_2862.z);
        u_xlat49.x = x_2864;
        let x_2867 : f32 = u_xlat19.z;
        let x_2869 : f32 = u_xlat49.x;
        let x_2871 : f32 = u_xlat69;
        u_xlat69 = ((x_2867 * x_2869) + x_2871);
        let x_2874 : vec4<f32> = u_xlat16;
        let x_2875 : vec2<f32> = vec2<f32>(x_2874.z, x_2874.w);
        let x_2877 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2875.x, x_2875.y, x_2877);
        let x_2884 : vec3<f32> = txVec50;
        let x_2886 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2884.xy, x_2884.z);
        u_xlat49.x = x_2886;
        let x_2889 : f32 = u_xlat19.w;
        let x_2891 : f32 = u_xlat49.x;
        let x_2893 : f32 = u_xlat69;
        u_xlat69 = ((x_2889 * x_2891) + x_2893);
        let x_2896 : vec4<f32> = u_xlat17;
        let x_2897 : vec2<f32> = vec2<f32>(x_2896.x, x_2896.y);
        let x_2899 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2897.x, x_2897.y, x_2899);
        let x_2906 : vec3<f32> = txVec51;
        let x_2908 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2906.xy, x_2906.z);
        u_xlat49.x = x_2908;
        let x_2911 : f32 = u_xlat20.x;
        let x_2913 : f32 = u_xlat49.x;
        let x_2915 : f32 = u_xlat69;
        u_xlat69 = ((x_2911 * x_2913) + x_2915);
        let x_2918 : vec4<f32> = u_xlat17;
        let x_2919 : vec2<f32> = vec2<f32>(x_2918.z, x_2918.w);
        let x_2921 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2919.x, x_2919.y, x_2921);
        let x_2928 : vec3<f32> = txVec52;
        let x_2930 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2928.xy, x_2928.z);
        u_xlat49.x = x_2930;
        let x_2933 : f32 = u_xlat20.y;
        let x_2935 : f32 = u_xlat49.x;
        let x_2937 : f32 = u_xlat69;
        u_xlat69 = ((x_2933 * x_2935) + x_2937);
        let x_2940 : vec3<f32> = u_xlat30;
        let x_2941 : vec2<f32> = vec2<f32>(x_2940.x, x_2940.y);
        let x_2943 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2941.x, x_2941.y, x_2943);
        let x_2950 : vec3<f32> = txVec53;
        let x_2952 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2950.xy, x_2950.z);
        u_xlat49.x = x_2952;
        let x_2955 : f32 = u_xlat20.z;
        let x_2957 : f32 = u_xlat49.x;
        let x_2959 : f32 = u_xlat69;
        u_xlat69 = ((x_2955 * x_2957) + x_2959);
        let x_2962 : vec2<f32> = u_xlat57;
        let x_2964 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2962.x, x_2962.y, x_2964);
        let x_2971 : vec3<f32> = txVec54;
        let x_2973 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2971.xy, x_2971.z);
        u_xlat49.x = x_2973;
        let x_2976 : f32 = u_xlat20.w;
        let x_2978 : f32 = u_xlat49.x;
        let x_2980 : f32 = u_xlat69;
        u_xlat69 = ((x_2976 * x_2978) + x_2980);
        let x_2983 : vec4<f32> = u_xlat12;
        let x_2984 : vec2<f32> = vec2<f32>(x_2983.x, x_2983.y);
        let x_2986 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2984.x, x_2984.y, x_2986);
        let x_2993 : vec3<f32> = txVec55;
        let x_2995 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2993.xy, x_2993.z);
        u_xlat49.x = x_2995;
        let x_2998 : f32 = u_xlat8.x;
        let x_3000 : f32 = u_xlat49.x;
        let x_3002 : f32 = u_xlat69;
        u_xlat69 = ((x_2998 * x_3000) + x_3002);
        let x_3005 : vec4<f32> = u_xlat12;
        let x_3006 : vec2<f32> = vec2<f32>(x_3005.z, x_3005.w);
        let x_3008 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3006.x, x_3006.y, x_3008);
        let x_3015 : vec3<f32> = txVec56;
        let x_3017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3015.xy, x_3015.z);
        u_xlat49.x = x_3017;
        let x_3020 : f32 = u_xlat8.y;
        let x_3022 : f32 = u_xlat49.x;
        let x_3024 : f32 = u_xlat69;
        u_xlat69 = ((x_3020 * x_3022) + x_3024);
        let x_3027 : vec2<f32> = u_xlat52;
        let x_3029 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3027.x, x_3027.y, x_3029);
        let x_3036 : vec3<f32> = txVec57;
        let x_3038 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3036.xy, x_3036.z);
        u_xlat49.x = x_3038;
        let x_3041 : f32 = u_xlat8.z;
        let x_3043 : f32 = u_xlat49.x;
        let x_3045 : f32 = u_xlat69;
        u_xlat69 = ((x_3041 * x_3043) + x_3045);
        let x_3048 : vec4<f32> = u_xlat7;
        let x_3049 : vec2<f32> = vec2<f32>(x_3048.x, x_3048.y);
        let x_3051 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3049.x, x_3049.y, x_3051);
        let x_3058 : vec3<f32> = txVec58;
        let x_3060 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3058.xy, x_3058.z);
        u_xlat7.x = x_3060;
        let x_3063 : f32 = u_xlat8.w;
        let x_3065 : f32 = u_xlat7.x;
        let x_3067 : f32 = u_xlat69;
        u_xlat63 = ((x_3063 * x_3065) + x_3067);
      }
    }
  } else {
    let x_3071 : vec4<f32> = vs_INTERP9;
    let x_3072 : vec2<f32> = vec2<f32>(x_3071.x, x_3071.y);
    let x_3074 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3072.x, x_3072.y, x_3074);
    let x_3081 : vec3<f32> = txVec59;
    let x_3083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3081.xy, x_3081.z);
    u_xlat63 = x_3083;
  }
  let x_3084 : f32 = u_xlat63;
  let x_3086 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3089 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3084 * x_3086) + x_3089);
  let x_3093 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3093);
  let x_3096 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3096 >= 1.0f);
  let x_3098 : bool = u_xlatb4;
  let x_3099 : bool = u_xlatb69;
  u_xlatb4 = (x_3098 | x_3099);
  let x_3101 : bool = u_xlatb4;
  let x_3102 : f32 = u_xlat63;
  u_xlat63 = select(x_3102, 1.0f, x_3101);
  let x_3104 : vec3<f32> = vs_INTERP0;
  let x_3106 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3108 : vec3<f32> = (x_3104 + -(x_3106));
  let x_3109 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3108.x, x_3108.y, x_3108.z, x_3109.w);
  let x_3111 : vec4<f32> = u_xlat7;
  let x_3113 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3111.x, x_3111.y, x_3111.z), vec3<f32>(x_3113.x, x_3113.y, x_3113.z));
  let x_3118 : f32 = u_xlat4.x;
  let x_3120 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3123 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3118 * x_3120) + x_3123);
  let x_3127 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3127, 0.0f, 1.0f);
  let x_3130 : f32 = u_xlat63;
  u_xlat69 = (-(x_3130) + 1.0f);
  let x_3134 : f32 = u_xlat4.x;
  let x_3135 : f32 = u_xlat69;
  let x_3137 : f32 = u_xlat63;
  u_xlat63 = ((x_3134 * x_3135) + x_3137);
  let x_3145 : f32 = x_3143.x_MainLightCookieTextureFormat;
  u_xlatb4 = !((x_3145 == -1.0f));
  let x_3147 : bool = u_xlatb4;
  if (x_3147) {
    let x_3150 : vec3<f32> = vs_INTERP0;
    let x_3153 : vec4<f32> = x_3143.x_MainLightWorldToLight[1i];
    let x_3155 : vec2<f32> = (vec2<f32>(x_3150.y, x_3150.y) * vec2<f32>(x_3153.x, x_3153.y));
    let x_3156 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3155.x, x_3155.y, x_3156.z, x_3156.w);
    let x_3159 : vec4<f32> = x_3143.x_MainLightWorldToLight[0i];
    let x_3161 : vec3<f32> = vs_INTERP0;
    let x_3164 : vec4<f32> = u_xlat7;
    let x_3166 : vec2<f32> = ((vec2<f32>(x_3159.x, x_3159.y) * vec2<f32>(x_3161.x, x_3161.x)) + vec2<f32>(x_3164.x, x_3164.y));
    let x_3167 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3166.x, x_3166.y, x_3167.z, x_3167.w);
    let x_3170 : vec4<f32> = x_3143.x_MainLightWorldToLight[2i];
    let x_3172 : vec3<f32> = vs_INTERP0;
    let x_3175 : vec4<f32> = u_xlat7;
    let x_3177 : vec2<f32> = ((vec2<f32>(x_3170.x, x_3170.y) * vec2<f32>(x_3172.z, x_3172.z)) + vec2<f32>(x_3175.x, x_3175.y));
    let x_3178 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3177.x, x_3177.y, x_3178.z, x_3178.w);
    let x_3180 : vec4<f32> = u_xlat7;
    let x_3183 : vec4<f32> = x_3143.x_MainLightWorldToLight[3i];
    let x_3185 : vec2<f32> = (vec2<f32>(x_3180.x, x_3180.y) + vec2<f32>(x_3183.x, x_3183.y));
    let x_3186 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3185.x, x_3185.y, x_3186.z, x_3186.w);
    let x_3188 : vec4<f32> = u_xlat7;
    let x_3191 : vec2<f32> = ((vec2<f32>(x_3188.x, x_3188.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3192 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3191.x, x_3191.y, x_3192.z, x_3192.w);
    let x_3199 : vec4<f32> = u_xlat7;
    let x_3202 : f32 = x_66.x_GlobalMipBias.x;
    let x_3203 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3199.x, x_3199.y), x_3202);
    u_xlat7 = x_3203;
    let x_3208 : f32 = x_3143.x_MainLightCookieTextureFormat;
    let x_3210 : f32 = x_3143.x_MainLightCookieTextureFormat;
    let x_3212 : f32 = x_3143.x_MainLightCookieTextureFormat;
    let x_3214 : f32 = x_3143.x_MainLightCookieTextureFormat;
    let x_3215 : vec4<f32> = vec4<f32>(x_3208, x_3210, x_3212, x_3214);
    let x_3223 : vec4<bool> = (vec4<f32>(x_3215.x, x_3215.y, x_3215.z, x_3215.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3223.x, x_3223.y);
    let x_3226 : bool = u_xlatb8.y;
    if (x_3226) {
      let x_3231 : f32 = u_xlat7.w;
      x_3227 = x_3231;
    } else {
      let x_3234 : f32 = u_xlat7.x;
      x_3227 = x_3234;
    }
    let x_3235 : f32 = x_3227;
    u_xlat4.x = x_3235;
    let x_3238 : bool = u_xlatb8.x;
    if (x_3238) {
      let x_3242 : vec4<f32> = u_xlat7;
      x_3239 = vec3<f32>(x_3242.x, x_3242.y, x_3242.z);
    } else {
      let x_3245 : vec4<f32> = u_xlat4;
      x_3239 = vec3<f32>(x_3245.x, x_3245.x, x_3245.x);
    }
    let x_3247 : vec3<f32> = x_3239;
    let x_3248 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3247.x, x_3247.y, x_3247.z, x_3248.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3254 : vec4<f32> = u_xlat7;
  let x_3257 : vec4<f32> = x_66.x_MainLightColor;
  let x_3259 : vec3<f32> = (vec3<f32>(x_3254.x, x_3254.y, x_3254.z) * vec3<f32>(x_3257.x, x_3257.y, x_3257.z));
  let x_3260 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3259.x, x_3259.y, x_3259.z, x_3260.w);
  let x_3262 : f32 = u_xlat48;
  let x_3264 : vec4<f32> = u_xlat7;
  let x_3266 : vec3<f32> = (vec3<f32>(x_3262, x_3262, x_3262) * vec3<f32>(x_3264.x, x_3264.y, x_3264.z));
  let x_3267 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3266.x, x_3266.y, x_3266.z, x_3267.w);
  let x_3269 : vec3<f32> = u_xlat25;
  let x_3271 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(x_3269), x_3271);
  let x_3275 : f32 = u_xlat4.x;
  let x_3277 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3275 + x_3277);
  let x_3280 : vec3<f32> = u_xlat24;
  let x_3281 : vec4<f32> = u_xlat4;
  let x_3285 : vec3<f32> = u_xlat25;
  let x_3287 : vec3<f32> = ((x_3280 * -(vec3<f32>(x_3281.x, x_3281.x, x_3281.x))) + -(x_3285));
  let x_3288 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3287.x, x_3287.y, x_3287.z, x_3288.w);
  let x_3290 : vec3<f32> = u_xlat24;
  let x_3291 : vec3<f32> = u_xlat25;
  u_xlat4.x = dot(x_3290, x_3291);
  let x_3295 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3295, 0.0f, 1.0f);
  let x_3299 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3299) + 1.0f);
  let x_3304 : f32 = u_xlat4.x;
  let x_3306 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3304 * x_3306);
  let x_3310 : f32 = u_xlat4.x;
  let x_3312 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3310 * x_3312);
  let x_3315 : f32 = u_xlat64;
  u_xlat69 = ((-(x_3315) * 0.699999988f) + 1.700000048f);
  let x_3321 : f32 = u_xlat64;
  let x_3322 : f32 = u_xlat69;
  u_xlat64 = (x_3321 * x_3322);
  let x_3324 : f32 = u_xlat64;
  u_xlat64 = (x_3324 * 6.0f);
  let x_3335 : vec4<f32> = u_xlat8;
  let x_3337 : f32 = u_xlat64;
  let x_3338 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3335.x, x_3335.y, x_3335.z), x_3337);
  u_xlat8 = x_3338;
  let x_3340 : f32 = u_xlat8.w;
  u_xlat64 = (x_3340 + -1.0f);
  let x_3343 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3344 : f32 = u_xlat64;
  u_xlat64 = ((x_3343 * x_3344) + 1.0f);
  let x_3347 : f32 = u_xlat64;
  u_xlat64 = max(x_3347, 0.0f);
  let x_3349 : f32 = u_xlat64;
  u_xlat64 = log2(x_3349);
  let x_3351 : f32 = u_xlat64;
  let x_3353 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat64 = (x_3351 * x_3353);
  let x_3355 : f32 = u_xlat64;
  u_xlat64 = exp2(x_3355);
  let x_3357 : f32 = u_xlat64;
  let x_3359 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat64 = (x_3357 * x_3359);
  let x_3361 : vec4<f32> = u_xlat8;
  let x_3363 : f32 = u_xlat64;
  let x_3365 : vec3<f32> = (vec3<f32>(x_3361.x, x_3361.y, x_3361.z) * vec3<f32>(x_3363, x_3363, x_3363));
  let x_3366 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3365.x, x_3365.y, x_3365.z, x_3366.w);
  let x_3368 : f32 = u_xlat65;
  let x_3370 : f32 = u_xlat65;
  let x_3374 : vec2<f32> = ((vec2<f32>(x_3368, x_3368) * vec2<f32>(x_3370, x_3370)) + vec2<f32>(-1.0f, 1.0f));
  let x_3375 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3374.x, x_3374.y, x_3375.z, x_3375.w);
  let x_3378 : f32 = u_xlat9.y;
  u_xlat64 = (1.0f / x_3378);
  let x_3381 : f32 = u_xlat3.x;
  u_xlat65 = (x_3381 + -0.039999999f);
  let x_3385 : f32 = u_xlat4.x;
  let x_3386 : f32 = u_xlat65;
  u_xlat65 = ((x_3385 * x_3386) + 0.039999999f);
  let x_3390 : f32 = u_xlat64;
  let x_3391 : f32 = u_xlat65;
  u_xlat64 = (x_3390 * x_3391);
  let x_3393 : f32 = u_xlat64;
  let x_3395 : vec4<f32> = u_xlat8;
  let x_3397 : vec3<f32> = (vec3<f32>(x_3393, x_3393, x_3393) * vec3<f32>(x_3395.x, x_3395.y, x_3395.z));
  let x_3398 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3397.x, x_3397.y, x_3397.z, x_3398.w);
  let x_3400 : vec4<f32> = u_xlat5;
  let x_3402 : vec3<f32> = u_xlat2;
  let x_3404 : vec4<f32> = u_xlat8;
  let x_3406 : vec3<f32> = ((vec3<f32>(x_3400.x, x_3400.y, x_3400.z) * x_3402) + vec3<f32>(x_3404.x, x_3404.y, x_3404.z));
  let x_3407 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3406.x, x_3406.y, x_3406.z, x_3407.w);
  let x_3409 : f32 = u_xlat63;
  let x_3411 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3409 * x_3411);
  let x_3413 : vec3<f32> = u_xlat24;
  let x_3415 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3413, vec3<f32>(x_3415.x, x_3415.y, x_3415.z));
  let x_3418 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3418, 0.0f, 1.0f);
  let x_3420 : f32 = u_xlat63;
  let x_3421 : f32 = u_xlat64;
  u_xlat63 = (x_3420 * x_3421);
  let x_3423 : f32 = u_xlat63;
  let x_3425 : vec4<f32> = u_xlat7;
  let x_3427 : vec3<f32> = (vec3<f32>(x_3423, x_3423, x_3423) * vec3<f32>(x_3425.x, x_3425.y, x_3425.z));
  let x_3428 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3427.x, x_3427.y, x_3427.z, x_3428.w);
  let x_3430 : vec3<f32> = u_xlat25;
  let x_3432 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3434 : vec3<f32> = (x_3430 + vec3<f32>(x_3432.x, x_3432.y, x_3432.z));
  let x_3435 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3434.x, x_3434.y, x_3434.z, x_3435.w);
  let x_3437 : vec4<f32> = u_xlat8;
  let x_3439 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3437.x, x_3437.y, x_3437.z), vec3<f32>(x_3439.x, x_3439.y, x_3439.z));
  let x_3442 : f32 = u_xlat63;
  u_xlat63 = max(x_3442, 1.17549435e-37f);
  let x_3445 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3445);
  let x_3447 : f32 = u_xlat63;
  let x_3449 : vec4<f32> = u_xlat8;
  let x_3451 : vec3<f32> = (vec3<f32>(x_3447, x_3447, x_3447) * vec3<f32>(x_3449.x, x_3449.y, x_3449.z));
  let x_3452 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3451.x, x_3451.y, x_3451.z, x_3452.w);
  let x_3454 : vec3<f32> = u_xlat24;
  let x_3455 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3454, vec3<f32>(x_3455.x, x_3455.y, x_3455.z));
  let x_3458 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3458, 0.0f, 1.0f);
  let x_3461 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3463 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3461.x, x_3461.y, x_3461.z), vec3<f32>(x_3463.x, x_3463.y, x_3463.z));
  let x_3466 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3466, 0.0f, 1.0f);
  let x_3468 : f32 = u_xlat63;
  let x_3469 : f32 = u_xlat63;
  u_xlat63 = (x_3468 * x_3469);
  let x_3471 : f32 = u_xlat63;
  let x_3473 : f32 = u_xlat9.x;
  u_xlat63 = ((x_3471 * x_3473) + 1.000010014f);
  let x_3477 : f32 = u_xlat64;
  let x_3478 : f32 = u_xlat64;
  u_xlat64 = (x_3477 * x_3478);
  let x_3480 : f32 = u_xlat63;
  let x_3481 : f32 = u_xlat63;
  u_xlat63 = (x_3480 * x_3481);
  let x_3483 : f32 = u_xlat64;
  u_xlat64 = max(x_3483, 0.100000001f);
  let x_3486 : f32 = u_xlat63;
  let x_3487 : f32 = u_xlat64;
  u_xlat63 = (x_3486 * x_3487);
  let x_3490 : f32 = u_xlat27.x;
  let x_3491 : f32 = u_xlat63;
  u_xlat63 = (x_3490 * x_3491);
  let x_3493 : f32 = u_xlat68;
  let x_3494 : f32 = u_xlat63;
  u_xlat63 = (x_3493 / x_3494);
  let x_3496 : f32 = u_xlat63;
  let x_3500 : vec3<f32> = u_xlat2;
  let x_3501 : vec3<f32> = ((vec3<f32>(x_3496, x_3496, x_3496) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3500);
  let x_3502 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3501.x, x_3501.y, x_3501.z, x_3502.w);
  let x_3504 : vec4<f32> = u_xlat7;
  let x_3506 : vec4<f32> = u_xlat8;
  let x_3508 : vec3<f32> = (vec3<f32>(x_3504.x, x_3504.y, x_3504.z) * vec3<f32>(x_3506.x, x_3506.y, x_3506.z));
  let x_3509 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3508.x, x_3508.y, x_3508.z, x_3509.w);
  let x_3512 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3514 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3512, x_3514);
  let x_3518 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3518));
  let x_3522 : f32 = x_3143.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3524 : f32 = x_3143.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3526 : f32 = x_3143.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3528 : f32 = x_3143.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3529 : vec4<f32> = vec4<f32>(x_3522, x_3524, x_3526, x_3528);
  let x_3535 : vec4<bool> = (vec4<f32>(x_3529.x, x_3529.y, x_3529.z, x_3529.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3535.x, x_3535.y);
  u_xlat30.x = 0.0f;
  u_xlat30.y = 0.0f;
  u_xlat30.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3546 : u32 = u_xlatu_loop_1;
    let x_3547 : u32 = u_xlatu63;
    if ((x_3546 < x_3547)) {
    } else {
      break;
    }
    let x_3550 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3550 >> 2u);
    let x_3554 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3554 & 3u));
    let x_3557 : u32 = u_xlatu65;
    let x_3560 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3557)];
    let x_3570 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3575 : vec4<u32> = indexable[x_3570];
    u_xlat65 = dot(x_3560, bitcast<vec4<f32>>(x_3575));
    let x_3578 : f32 = u_xlat65;
    u_xlatu65 = bitcast<u32>(i32(x_3578));
    let x_3581 : vec3<f32> = vs_INTERP0;
    let x_3593 : u32 = u_xlatu65;
    let x_3596 : vec4<f32> = x_3592.x_AdditionalLightsPosition[bitcast<i32>(x_3593)];
    let x_3599 : u32 = u_xlatu65;
    let x_3602 : vec4<f32> = x_3592.x_AdditionalLightsPosition[bitcast<i32>(x_3599)];
    let x_3604 : vec3<f32> = ((-(x_3581) * vec3<f32>(x_3596.w, x_3596.w, x_3596.w)) + vec3<f32>(x_3602.x, x_3602.y, x_3602.z));
    let x_3605 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3604.x, x_3604.y, x_3604.z, x_3605.w);
    let x_3607 : vec4<f32> = u_xlat10;
    let x_3609 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_3607.x, x_3607.y, x_3607.z), vec3<f32>(x_3609.x, x_3609.y, x_3609.z));
    let x_3614 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3614, 6.10351562e-05f);
    let x_3619 : f32 = u_xlat3.x;
    u_xlat4.x = inverseSqrt(x_3619);
    let x_3622 : vec4<f32> = u_xlat4;
    let x_3624 : vec4<f32> = u_xlat10;
    let x_3626 : vec3<f32> = (vec3<f32>(x_3622.x, x_3622.x, x_3622.x) * vec3<f32>(x_3624.x, x_3624.y, x_3624.z));
    let x_3627 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3626.x, x_3626.y, x_3626.z, x_3627.w);
    let x_3630 : f32 = u_xlat3.x;
    u_xlat69 = (1.0f / x_3630);
    let x_3633 : f32 = u_xlat3.x;
    let x_3634 : u32 = u_xlatu65;
    let x_3637 : f32 = x_3592.x_AdditionalLightsAttenuation[bitcast<i32>(x_3634)].x;
    u_xlat3.x = (x_3633 * x_3637);
    let x_3641 : f32 = u_xlat3.x;
    let x_3644 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3641) * x_3644) + 1.0f);
    let x_3649 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3649, 0.0f);
    let x_3653 : f32 = u_xlat3.x;
    let x_3655 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3653 * x_3655);
    let x_3659 : f32 = u_xlat3.x;
    let x_3660 : f32 = u_xlat69;
    u_xlat3.x = (x_3659 * x_3660);
    let x_3663 : u32 = u_xlatu65;
    let x_3666 : vec4<f32> = x_3592.x_AdditionalLightsSpotDir[bitcast<i32>(x_3663)];
    let x_3668 : vec4<f32> = u_xlat11;
    u_xlat69 = dot(vec3<f32>(x_3666.x, x_3666.y, x_3666.z), vec3<f32>(x_3668.x, x_3668.y, x_3668.z));
    let x_3671 : f32 = u_xlat69;
    let x_3672 : u32 = u_xlatu65;
    let x_3675 : f32 = x_3592.x_AdditionalLightsAttenuation[bitcast<i32>(x_3672)].z;
    let x_3677 : u32 = u_xlatu65;
    let x_3680 : f32 = x_3592.x_AdditionalLightsAttenuation[bitcast<i32>(x_3677)].w;
    u_xlat69 = ((x_3671 * x_3675) + x_3680);
    let x_3682 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3682, 0.0f, 1.0f);
    let x_3684 : f32 = u_xlat69;
    let x_3685 : f32 = u_xlat69;
    u_xlat69 = (x_3684 * x_3685);
    let x_3688 : f32 = u_xlat3.x;
    let x_3689 : f32 = u_xlat69;
    u_xlat3.x = (x_3688 * x_3689);
    let x_3693 : u32 = u_xlatu65;
    u_xlatu69 = (x_3693 >> 5u);
    let x_3696 : u32 = u_xlatu65;
    u_xlati70 = (1i << bitcast<u32>((bitcast<i32>(x_3696) & 31i)));
    let x_3702 : i32 = u_xlati70;
    let x_3704 : u32 = u_xlatu69;
    let x_3707 : f32 = x_3143.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3704)].el;
    u_xlati69 = bitcast<i32>((bitcast<u32>(x_3702) & bitcast<u32>(x_3707)));
    let x_3711 : i32 = u_xlati69;
    if ((x_3711 != 0i)) {
      let x_3721 : u32 = u_xlatu65;
      let x_3724 : f32 = x_3720.x_AdditionalLightsLightTypes[bitcast<i32>(x_3721)].el;
      u_xlati69 = i32(x_3724);
      let x_3726 : i32 = u_xlati69;
      u_xlati70 = select(1i, 0i, (x_3726 != 0i));
      let x_3730 : u32 = u_xlatu65;
      u_xlati50 = (bitcast<i32>(x_3730) << bitcast<u32>(2i));
      let x_3733 : i32 = u_xlati70;
      if ((x_3733 != 0i)) {
        let x_3737 : vec3<f32> = vs_INTERP0;
        let x_3739 : i32 = u_xlati50;
        let x_3742 : i32 = u_xlati50;
        let x_3746 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3739 + 1i) / 4i)][((x_3742 + 1i) % 4i)];
        let x_3748 : vec3<f32> = (vec3<f32>(x_3737.y, x_3737.y, x_3737.y) * vec3<f32>(x_3746.x, x_3746.y, x_3746.w));
        let x_3749 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3748.x, x_3748.y, x_3748.z, x_3749.w);
        let x_3751 : i32 = u_xlati50;
        let x_3753 : i32 = u_xlati50;
        let x_3756 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[(x_3751 / 4i)][(x_3753 % 4i)];
        let x_3758 : vec3<f32> = vs_INTERP0;
        let x_3761 : vec4<f32> = u_xlat12;
        let x_3763 : vec3<f32> = ((vec3<f32>(x_3756.x, x_3756.y, x_3756.w) * vec3<f32>(x_3758.x, x_3758.x, x_3758.x)) + vec3<f32>(x_3761.x, x_3761.y, x_3761.z));
        let x_3764 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3763.x, x_3763.y, x_3763.z, x_3764.w);
        let x_3766 : i32 = u_xlati50;
        let x_3769 : i32 = u_xlati50;
        let x_3773 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3766 + 2i) / 4i)][((x_3769 + 2i) % 4i)];
        let x_3775 : vec3<f32> = vs_INTERP0;
        let x_3778 : vec4<f32> = u_xlat12;
        let x_3780 : vec3<f32> = ((vec3<f32>(x_3773.x, x_3773.y, x_3773.w) * vec3<f32>(x_3775.z, x_3775.z, x_3775.z)) + vec3<f32>(x_3778.x, x_3778.y, x_3778.z));
        let x_3781 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3780.x, x_3780.y, x_3780.z, x_3781.w);
        let x_3783 : vec4<f32> = u_xlat12;
        let x_3785 : i32 = u_xlati50;
        let x_3788 : i32 = u_xlati50;
        let x_3792 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3785 + 3i) / 4i)][((x_3788 + 3i) % 4i)];
        let x_3794 : vec3<f32> = (vec3<f32>(x_3783.x, x_3783.y, x_3783.z) + vec3<f32>(x_3792.x, x_3792.y, x_3792.w));
        let x_3795 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3794.x, x_3794.y, x_3794.z, x_3795.w);
        let x_3797 : vec4<f32> = u_xlat12;
        let x_3799 : vec4<f32> = u_xlat12;
        let x_3801 : vec2<f32> = (vec2<f32>(x_3797.x, x_3797.y) / vec2<f32>(x_3799.z, x_3799.z));
        let x_3802 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3801.x, x_3801.y, x_3802.z, x_3802.w);
        let x_3804 : vec4<f32> = u_xlat12;
        let x_3807 : vec2<f32> = ((vec2<f32>(x_3804.x, x_3804.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3808 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3807.x, x_3807.y, x_3808.z, x_3808.w);
        let x_3810 : vec4<f32> = u_xlat12;
        let x_3814 : vec2<f32> = clamp(vec2<f32>(x_3810.x, x_3810.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3815 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3814.x, x_3814.y, x_3815.z, x_3815.w);
        let x_3817 : u32 = u_xlatu65;
        let x_3820 : vec4<f32> = x_3720.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3817)];
        let x_3822 : vec4<f32> = u_xlat12;
        let x_3825 : u32 = u_xlatu65;
        let x_3828 : vec4<f32> = x_3720.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3825)];
        let x_3830 : vec2<f32> = ((vec2<f32>(x_3820.x, x_3820.y) * vec2<f32>(x_3822.x, x_3822.y)) + vec2<f32>(x_3828.z, x_3828.w));
        let x_3831 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3830.x, x_3830.y, x_3831.z, x_3831.w);
      } else {
        let x_3834 : i32 = u_xlati69;
        u_xlatb69 = (x_3834 == 1i);
        let x_3836 : bool = u_xlatb69;
        u_xlati69 = select(0i, 1i, x_3836);
        let x_3838 : i32 = u_xlati69;
        if ((x_3838 != 0i)) {
          let x_3843 : vec3<f32> = vs_INTERP0;
          let x_3845 : i32 = u_xlati50;
          let x_3848 : i32 = u_xlati50;
          let x_3852 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3845 + 1i) / 4i)][((x_3848 + 1i) % 4i)];
          u_xlat54 = (vec2<f32>(x_3843.y, x_3843.y) * vec2<f32>(x_3852.x, x_3852.y));
          let x_3855 : i32 = u_xlati50;
          let x_3857 : i32 = u_xlati50;
          let x_3860 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[(x_3855 / 4i)][(x_3857 % 4i)];
          let x_3862 : vec3<f32> = vs_INTERP0;
          let x_3865 : vec2<f32> = u_xlat54;
          u_xlat54 = ((vec2<f32>(x_3860.x, x_3860.y) * vec2<f32>(x_3862.x, x_3862.x)) + x_3865);
          let x_3867 : i32 = u_xlati50;
          let x_3870 : i32 = u_xlati50;
          let x_3874 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3867 + 2i) / 4i)][((x_3870 + 2i) % 4i)];
          let x_3876 : vec3<f32> = vs_INTERP0;
          let x_3879 : vec2<f32> = u_xlat54;
          u_xlat54 = ((vec2<f32>(x_3874.x, x_3874.y) * vec2<f32>(x_3876.z, x_3876.z)) + x_3879);
          let x_3881 : vec2<f32> = u_xlat54;
          let x_3882 : i32 = u_xlati50;
          let x_3885 : i32 = u_xlati50;
          let x_3889 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3882 + 3i) / 4i)][((x_3885 + 3i) % 4i)];
          u_xlat54 = (x_3881 + vec2<f32>(x_3889.x, x_3889.y));
          let x_3892 : vec2<f32> = u_xlat54;
          u_xlat54 = ((x_3892 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3895 : vec2<f32> = u_xlat54;
          u_xlat54 = fract(x_3895);
          let x_3897 : u32 = u_xlatu65;
          let x_3900 : vec4<f32> = x_3720.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3897)];
          let x_3902 : vec2<f32> = u_xlat54;
          let x_3904 : u32 = u_xlatu65;
          let x_3907 : vec4<f32> = x_3720.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3904)];
          let x_3909 : vec2<f32> = ((vec2<f32>(x_3900.x, x_3900.y) * x_3902) + vec2<f32>(x_3907.z, x_3907.w));
          let x_3910 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3909.x, x_3909.y, x_3910.z, x_3910.w);
        } else {
          let x_3913 : vec3<f32> = vs_INTERP0;
          let x_3915 : i32 = u_xlati50;
          let x_3918 : i32 = u_xlati50;
          let x_3922 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3915 + 1i) / 4i)][((x_3918 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_3913.y, x_3913.y, x_3913.y, x_3913.y) * x_3922);
          let x_3924 : i32 = u_xlati50;
          let x_3926 : i32 = u_xlati50;
          let x_3929 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[(x_3924 / 4i)][(x_3926 % 4i)];
          let x_3930 : vec3<f32> = vs_INTERP0;
          let x_3933 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_3929 * vec4<f32>(x_3930.x, x_3930.x, x_3930.x, x_3930.x)) + x_3933);
          let x_3935 : i32 = u_xlati50;
          let x_3938 : i32 = u_xlati50;
          let x_3942 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3935 + 2i) / 4i)][((x_3938 + 2i) % 4i)];
          let x_3943 : vec3<f32> = vs_INTERP0;
          let x_3946 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_3942 * vec4<f32>(x_3943.z, x_3943.z, x_3943.z, x_3943.z)) + x_3946);
          let x_3948 : vec4<f32> = u_xlat13;
          let x_3949 : i32 = u_xlati50;
          let x_3952 : i32 = u_xlati50;
          let x_3956 : vec4<f32> = x_3720.x_AdditionalLightsWorldToLights[((x_3949 + 3i) / 4i)][((x_3952 + 3i) % 4i)];
          u_xlat13 = (x_3948 + x_3956);
          let x_3958 : vec4<f32> = u_xlat13;
          let x_3960 : vec4<f32> = u_xlat13;
          let x_3962 : vec3<f32> = (vec3<f32>(x_3958.x, x_3958.y, x_3958.z) / vec3<f32>(x_3960.w, x_3960.w, x_3960.w));
          let x_3963 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_3962.x, x_3962.y, x_3962.z, x_3963.w);
          let x_3965 : vec4<f32> = u_xlat13;
          let x_3967 : vec4<f32> = u_xlat13;
          u_xlat69 = dot(vec3<f32>(x_3965.x, x_3965.y, x_3965.z), vec3<f32>(x_3967.x, x_3967.y, x_3967.z));
          let x_3970 : f32 = u_xlat69;
          u_xlat69 = inverseSqrt(x_3970);
          let x_3972 : f32 = u_xlat69;
          let x_3974 : vec4<f32> = u_xlat13;
          let x_3976 : vec3<f32> = (vec3<f32>(x_3972, x_3972, x_3972) * vec3<f32>(x_3974.x, x_3974.y, x_3974.z));
          let x_3977 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_3976.x, x_3976.y, x_3976.z, x_3977.w);
          let x_3979 : vec4<f32> = u_xlat13;
          u_xlat69 = dot(abs(vec3<f32>(x_3979.x, x_3979.y, x_3979.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_3984 : f32 = u_xlat69;
          u_xlat69 = max(x_3984, 0.000001f);
          let x_3987 : f32 = u_xlat69;
          u_xlat69 = (1.0f / x_3987);
          let x_3989 : f32 = u_xlat69;
          let x_3991 : vec4<f32> = u_xlat13;
          let x_3993 : vec3<f32> = (vec3<f32>(x_3989, x_3989, x_3989) * vec3<f32>(x_3991.z, x_3991.x, x_3991.y));
          let x_3994 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_3993.x, x_3993.y, x_3993.z, x_3994.w);
          let x_3997 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_3997);
          let x_4001 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4001, 0.0f, 1.0f);
          let x_4005 : vec4<f32> = u_xlat14;
          let x_4008 : vec4<bool> = (vec4<f32>(x_4005.y, x_4005.z, x_4005.y, x_4005.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb50 = vec2<bool>(x_4008.x, x_4008.y);
          let x_4011 : bool = u_xlatb50.x;
          if (x_4011) {
            let x_4016 : f32 = u_xlat14.x;
            x_4012 = x_4016;
          } else {
            let x_4019 : f32 = u_xlat14.x;
            x_4012 = -(x_4019);
          }
          let x_4021 : f32 = x_4012;
          u_xlat50.x = x_4021;
          let x_4024 : bool = u_xlatb50.y;
          if (x_4024) {
            let x_4029 : f32 = u_xlat14.x;
            x_4025 = x_4029;
          } else {
            let x_4032 : f32 = u_xlat14.x;
            x_4025 = -(x_4032);
          }
          let x_4034 : f32 = x_4025;
          u_xlat50.y = x_4034;
          let x_4036 : vec4<f32> = u_xlat13;
          let x_4038 : f32 = u_xlat69;
          let x_4041 : vec2<f32> = u_xlat50;
          u_xlat50 = ((vec2<f32>(x_4036.x, x_4036.y) * vec2<f32>(x_4038, x_4038)) + x_4041);
          let x_4043 : vec2<f32> = u_xlat50;
          u_xlat50 = ((x_4043 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4046 : vec2<f32> = u_xlat50;
          u_xlat50 = clamp(x_4046, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4050 : u32 = u_xlatu65;
          let x_4053 : vec4<f32> = x_3720.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4050)];
          let x_4055 : vec2<f32> = u_xlat50;
          let x_4057 : u32 = u_xlatu65;
          let x_4060 : vec4<f32> = x_3720.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4057)];
          let x_4062 : vec2<f32> = ((vec2<f32>(x_4053.x, x_4053.y) * x_4055) + vec2<f32>(x_4060.z, x_4060.w));
          let x_4063 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4062.x, x_4062.y, x_4063.z, x_4063.w);
        }
      }
      let x_4070 : vec4<f32> = u_xlat12;
      let x_4073 : f32 = x_66.x_GlobalMipBias.x;
      let x_4074 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4070.x, x_4070.y), x_4073);
      u_xlat12 = x_4074;
      let x_4076 : bool = u_xlatb8.y;
      if (x_4076) {
        let x_4081 : f32 = u_xlat12.w;
        x_4077 = x_4081;
      } else {
        let x_4084 : f32 = u_xlat12.x;
        x_4077 = x_4084;
      }
      let x_4085 : f32 = x_4077;
      u_xlat69 = x_4085;
      let x_4087 : bool = u_xlatb8.x;
      if (x_4087) {
        let x_4091 : vec4<f32> = u_xlat12;
        x_4088 = vec3<f32>(x_4091.x, x_4091.y, x_4091.z);
      } else {
        let x_4094 : f32 = u_xlat69;
        x_4088 = vec3<f32>(x_4094, x_4094, x_4094);
      }
      let x_4096 : vec3<f32> = x_4088;
      let x_4097 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4096.x, x_4096.y, x_4096.z, x_4097.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4103 : vec4<f32> = u_xlat12;
    let x_4105 : u32 = u_xlatu65;
    let x_4108 : vec4<f32> = x_3592.x_AdditionalLightsColor[bitcast<i32>(x_4105)];
    let x_4110 : vec3<f32> = (vec3<f32>(x_4103.x, x_4103.y, x_4103.z) * vec3<f32>(x_4108.x, x_4108.y, x_4108.z));
    let x_4111 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4110.x, x_4110.y, x_4110.z, x_4111.w);
    let x_4113 : f32 = u_xlat48;
    let x_4115 : vec4<f32> = u_xlat12;
    let x_4117 : vec3<f32> = (vec3<f32>(x_4113, x_4113, x_4113) * vec3<f32>(x_4115.x, x_4115.y, x_4115.z));
    let x_4118 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4117.x, x_4117.y, x_4117.z, x_4118.w);
    let x_4120 : vec3<f32> = u_xlat24;
    let x_4121 : vec4<f32> = u_xlat11;
    u_xlat65 = dot(x_4120, vec3<f32>(x_4121.x, x_4121.y, x_4121.z));
    let x_4124 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4124, 0.0f, 1.0f);
    let x_4126 : f32 = u_xlat65;
    let x_4128 : f32 = u_xlat3.x;
    u_xlat65 = (x_4126 * x_4128);
    let x_4130 : f32 = u_xlat65;
    let x_4132 : vec4<f32> = u_xlat12;
    let x_4134 : vec3<f32> = (vec3<f32>(x_4130, x_4130, x_4130) * vec3<f32>(x_4132.x, x_4132.y, x_4132.z));
    let x_4135 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4134.x, x_4134.y, x_4134.z, x_4135.w);
    let x_4137 : vec4<f32> = u_xlat10;
    let x_4139 : vec4<f32> = u_xlat4;
    let x_4142 : vec3<f32> = u_xlat25;
    let x_4143 : vec3<f32> = ((vec3<f32>(x_4137.x, x_4137.y, x_4137.z) * vec3<f32>(x_4139.x, x_4139.x, x_4139.x)) + x_4142);
    let x_4144 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4143.x, x_4143.y, x_4143.z, x_4144.w);
    let x_4146 : vec4<f32> = u_xlat10;
    let x_4148 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_4146.x, x_4146.y, x_4146.z), vec3<f32>(x_4148.x, x_4148.y, x_4148.z));
    let x_4151 : f32 = u_xlat65;
    u_xlat65 = max(x_4151, 1.17549435e-37f);
    let x_4153 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_4153);
    let x_4155 : f32 = u_xlat65;
    let x_4157 : vec4<f32> = u_xlat10;
    let x_4159 : vec3<f32> = (vec3<f32>(x_4155, x_4155, x_4155) * vec3<f32>(x_4157.x, x_4157.y, x_4157.z));
    let x_4160 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4159.x, x_4159.y, x_4159.z, x_4160.w);
    let x_4162 : vec3<f32> = u_xlat24;
    let x_4163 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(x_4162, vec3<f32>(x_4163.x, x_4163.y, x_4163.z));
    let x_4166 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4166, 0.0f, 1.0f);
    let x_4168 : vec4<f32> = u_xlat11;
    let x_4170 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_4168.x, x_4168.y, x_4168.z), vec3<f32>(x_4170.x, x_4170.y, x_4170.z));
    let x_4175 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4175, 0.0f, 1.0f);
    let x_4178 : f32 = u_xlat65;
    let x_4179 : f32 = u_xlat65;
    u_xlat65 = (x_4178 * x_4179);
    let x_4181 : f32 = u_xlat65;
    let x_4183 : f32 = u_xlat9.x;
    u_xlat65 = ((x_4181 * x_4183) + 1.000010014f);
    let x_4187 : f32 = u_xlat3.x;
    let x_4189 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4187 * x_4189);
    let x_4192 : f32 = u_xlat65;
    let x_4193 : f32 = u_xlat65;
    u_xlat65 = (x_4192 * x_4193);
    let x_4196 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4196, 0.100000001f);
    let x_4199 : f32 = u_xlat65;
    let x_4201 : f32 = u_xlat3.x;
    u_xlat65 = (x_4199 * x_4201);
    let x_4204 : f32 = u_xlat27.x;
    let x_4205 : f32 = u_xlat65;
    u_xlat65 = (x_4204 * x_4205);
    let x_4207 : f32 = u_xlat68;
    let x_4208 : f32 = u_xlat65;
    u_xlat65 = (x_4207 / x_4208);
    let x_4210 : f32 = u_xlat65;
    let x_4213 : vec3<f32> = u_xlat2;
    let x_4214 : vec3<f32> = ((vec3<f32>(x_4210, x_4210, x_4210) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4213);
    let x_4215 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4214.x, x_4214.y, x_4214.z, x_4215.w);
    let x_4217 : vec4<f32> = u_xlat10;
    let x_4219 : vec4<f32> = u_xlat12;
    let x_4222 : vec3<f32> = u_xlat30;
    u_xlat30 = ((vec3<f32>(x_4217.x, x_4217.y, x_4217.z) * vec3<f32>(x_4219.x, x_4219.y, x_4219.z)) + x_4222);

    continuing {
      let x_4224 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4224 + bitcast<u32>(1i));
    }
  }
  let x_4226 : vec4<f32> = u_xlat5;
  let x_4228 : vec4<f32> = u_xlat6;
  let x_4231 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_4226.x, x_4226.y, x_4226.z) * vec3<f32>(x_4228.x, x_4228.x, x_4228.x)) + vec3<f32>(x_4231.x, x_4231.y, x_4231.z));
  let x_4234 : vec3<f32> = u_xlat30;
  let x_4235 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_4234 + x_4235);
  let x_4237 : vec4<f32> = vs_INTERP4;
  let x_4239 : vec3<f32> = u_xlat0;
  let x_4241 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4237.w, x_4237.w, x_4237.w) * x_4239) + x_4241);
  let x_4244 : f32 = u_xlat22.x;
  let x_4246 : f32 = u_xlat22.x;
  u_xlat63 = (x_4244 * -(x_4246));
  let x_4249 : f32 = u_xlat63;
  u_xlat63 = exp2(x_4249);
  let x_4251 : vec3<f32> = u_xlat0;
  let x_4254 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_4251 + -(vec3<f32>(x_4254.x, x_4254.y, x_4254.z)));
  let x_4260 : f32 = u_xlat63;
  let x_4262 : vec3<f32> = u_xlat0;
  let x_4265 : vec4<f32> = x_66.unity_FogColor;
  let x_4267 : vec3<f32> = ((vec3<f32>(x_4260, x_4260, x_4260) * x_4262) + vec3<f32>(x_4265.x, x_4265.y, x_4265.z));
  let x_4268 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4267.x, x_4267.y, x_4267.z, x_4268.w);
  let x_4270 : bool = u_xlatb43;
  if (x_4270) {
    let x_4275 : f32 = u_xlat1.x;
    x_4271 = x_4275;
  } else {
    x_4271 = 1.0f;
  }
  let x_4277 : f32 = x_4271;
  SV_Target0.w = x_4277;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

