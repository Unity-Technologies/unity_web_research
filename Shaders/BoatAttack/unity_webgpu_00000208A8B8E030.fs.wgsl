struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_271 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3485 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3933 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4043 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1727 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu45 : u32;
  var u_xlatu25 : u32;
  var u_xlati45 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : f32;
  var x_1860 : f32;
  var u_xlatb45 : vec2<bool>;
  var u_xlat45 : vec2<f32>;
  var u_xlatb23 : bool;
  var x_1932 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : vec2<bool>;
  var u_xlat52 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3567 : f32;
  var x_3578 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4335 : f32;
  var x_4348 : f32;
  var x_4400 : f32;
  var x_4411 : vec3<f32>;
  var x_4566 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb66;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb66;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb66;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat66 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat66;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat66;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat66;
  u_xlat66 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat66;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_273 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres0;
  let x_276 : vec3<f32> = (x_266 + -(vec3<f32>(x_273.x, x_273.y, x_273.z)));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres1;
  let x_285 : vec3<f32> = (x_280 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_289 : vec3<f32> = vs_INTERP0;
  let x_292 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres2;
  let x_295 : vec3<f32> = (x_289 + -(vec3<f32>(x_292.x, x_292.y, x_292.z)));
  let x_296 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_295.x, x_295.y, x_295.z, x_296.w);
  let x_299 : vec3<f32> = vs_INTERP0;
  let x_302 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres3;
  let x_305 : vec3<f32> = (x_299 + -(vec3<f32>(x_302.x, x_302.y, x_302.z)));
  let x_306 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_305.x, x_305.y, x_305.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat6;
  let x_310 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_308.x, x_308.y, x_308.z), vec3<f32>(x_310.x, x_310.y, x_310.z));
  let x_314 : vec4<f32> = u_xlat7;
  let x_316 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_314.x, x_314.y, x_314.z), vec3<f32>(x_316.x, x_316.y, x_316.z));
  let x_320 : vec4<f32> = u_xlat8;
  let x_322 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_320.x, x_320.y, x_320.z), vec3<f32>(x_322.x, x_322.y, x_322.z));
  let x_326 : vec4<f32> = u_xlat9;
  let x_328 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_326.x, x_326.y, x_326.z), vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_335 : vec4<f32> = u_xlat6;
  let x_338 : vec4<f32> = x_271.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_335 < x_338);
  let x_341 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_341);
  let x_345 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_345);
  let x_349 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_349);
  let x_353 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_353);
  let x_357 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_357);
  let x_362 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_362);
  let x_366 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_366);
  let x_369 : vec4<f32> = u_xlat6;
  let x_371 : vec4<f32> = u_xlat7;
  let x_373 : vec3<f32> = (vec3<f32>(x_369.x, x_369.y, x_369.z) + vec3<f32>(x_371.y, x_371.z, x_371.w));
  let x_374 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_376 : vec4<f32> = u_xlat6;
  let x_379 : vec3<f32> = max(vec3<f32>(x_376.x, x_376.y, x_376.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_380 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_380.x, x_379.x, x_379.y, x_379.z);
  let x_382 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_382, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_387 : f32 = u_xlat66;
  u_xlat66 = (-(x_387) + 4.0f);
  let x_391 : f32 = u_xlat66;
  u_xlatu66 = u32(x_391);
  let x_394 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_394) << bitcast<u32>(2i));
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : i32 = u_xlati66;
  let x_402 : i32 = u_xlati66;
  let x_406 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_399 + 1i) / 4i)][((x_402 + 1i) % 4i)];
  let x_408 : vec3<f32> = (vec3<f32>(x_397.y, x_397.y, x_397.y) * vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_409 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_408.x, x_408.y, x_408.z, x_409.w);
  let x_411 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_416 : vec4<f32> = x_271.x_MainLightWorldToShadow[(x_411 / 4i)][(x_413 % 4i)];
  let x_418 : vec3<f32> = vs_INTERP0;
  let x_421 : vec4<f32> = u_xlat6;
  let x_423 : vec3<f32> = ((vec3<f32>(x_416.x, x_416.y, x_416.z) * vec3<f32>(x_418.x, x_418.x, x_418.x)) + vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_424 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_423.x, x_423.y, x_423.z, x_424.w);
  let x_426 : i32 = u_xlati66;
  let x_429 : i32 = u_xlati66;
  let x_433 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_426 + 2i) / 4i)][((x_429 + 2i) % 4i)];
  let x_435 : vec3<f32> = vs_INTERP0;
  let x_438 : vec4<f32> = u_xlat6;
  let x_440 : vec3<f32> = ((vec3<f32>(x_433.x, x_433.y, x_433.z) * vec3<f32>(x_435.z, x_435.z, x_435.z)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat6;
  let x_445 : i32 = u_xlati66;
  let x_448 : i32 = u_xlati66;
  let x_452 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_445 + 3i) / 4i)][((x_448 + 3i) % 4i)];
  let x_454 : vec3<f32> = (vec3<f32>(x_443.x, x_443.y, x_443.z) + vec3<f32>(x_452.x, x_452.y, x_452.z));
  let x_455 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_459 : f32 = x_271.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_459);
  let x_461 : bool = u_xlatb66;
  if (x_461) {
    let x_466 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb67 = (x_466 == 1.0f);
    let x_468 : bool = u_xlatb67;
    if (x_468) {
      let x_471 : vec4<f32> = u_xlat6;
      let x_475 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_471.x, x_471.y, x_471.x, x_471.y) + x_475);
      let x_478 : vec4<f32> = u_xlat7;
      let x_479 : vec2<f32> = vec2<f32>(x_478.x, x_478.y);
      let x_481 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_479.x, x_479.y, x_481);
      let x_493 : vec3<f32> = txVec0;
      let x_495 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_493.xy, x_493.z);
      u_xlat8.x = x_495;
      let x_498 : vec4<f32> = u_xlat7;
      let x_499 : vec2<f32> = vec2<f32>(x_498.z, x_498.w);
      let x_501 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_499.x, x_499.y, x_501);
      let x_508 : vec3<f32> = txVec1;
      let x_510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_508.xy, x_508.z);
      u_xlat8.y = x_510;
      let x_512 : vec4<f32> = u_xlat6;
      let x_516 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_512.x, x_512.y, x_512.x, x_512.y) + x_516);
      let x_519 : vec4<f32> = u_xlat7;
      let x_520 : vec2<f32> = vec2<f32>(x_519.x, x_519.y);
      let x_522 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_520.x, x_520.y, x_522);
      let x_529 : vec3<f32> = txVec2;
      let x_531 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_529.xy, x_529.z);
      u_xlat8.z = x_531;
      let x_534 : vec4<f32> = u_xlat7;
      let x_535 : vec2<f32> = vec2<f32>(x_534.z, x_534.w);
      let x_537 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_535.x, x_535.y, x_537);
      let x_544 : vec3<f32> = txVec3;
      let x_546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_544.xy, x_544.z);
      u_xlat8.w = x_546;
      let x_548 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_548, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_555 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb68 = (x_555 == 2.0f);
      let x_557 : bool = u_xlatb68;
      if (x_557) {
        let x_560 : vec4<f32> = u_xlat6;
        let x_563 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_568 : vec2<f32> = ((vec2<f32>(x_560.x, x_560.y) * vec2<f32>(x_563.z, x_563.w)) + vec2<f32>(0.5f, 0.5f));
        let x_569 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_568.x, x_568.y, x_569.z, x_569.w);
        let x_571 : vec4<f32> = u_xlat7;
        let x_573 : vec2<f32> = floor(vec2<f32>(x_571.x, x_571.y));
        let x_574 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_573.x, x_573.y, x_574.z, x_574.w);
        let x_578 : vec4<f32> = u_xlat6;
        let x_581 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_578.x, x_578.y) * vec2<f32>(x_581.z, x_581.w)) + -(vec2<f32>(x_584.x, x_584.y)));
        let x_588 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_588.x, x_588.x, x_588.y, x_588.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_592 : vec4<f32> = u_xlat8;
        let x_594 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_592.x, x_592.x, x_592.z, x_592.z) * vec4<f32>(x_594.x, x_594.x, x_594.z, x_594.z));
        let x_597 : vec4<f32> = u_xlat9;
        let x_601 : vec2<f32> = (vec2<f32>(x_597.y, x_597.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_602 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_601.x, x_602.y, x_601.y, x_602.w);
        let x_604 : vec4<f32> = u_xlat9;
        let x_607 : vec2<f32> = u_xlat51;
        let x_609 : vec2<f32> = ((vec2<f32>(x_604.x, x_604.z) * vec2<f32>(0.5f, 0.5f)) + -(x_607));
        let x_610 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_609.x, x_609.y, x_610.z, x_610.w);
        let x_613 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_613) + vec2<f32>(1.0f, 1.0f));
        let x_618 : vec2<f32> = u_xlat51;
        let x_620 : vec2<f32> = min(x_618, vec2<f32>(0.0f, 0.0f));
        let x_621 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec4<f32> = u_xlat10;
        let x_626 : vec4<f32> = u_xlat10;
        let x_629 : vec2<f32> = u_xlat53;
        let x_630 : vec2<f32> = ((-(vec2<f32>(x_623.x, x_623.y)) * vec2<f32>(x_626.x, x_626.y)) + x_629);
        let x_631 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_630.x, x_630.y, x_631.z, x_631.w);
        let x_633 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_633, vec2<f32>(0.0f, 0.0f));
        let x_635 : vec2<f32> = u_xlat51;
        let x_637 : vec2<f32> = u_xlat51;
        let x_639 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_635) * x_637) + vec2<f32>(x_639.y, x_639.w));
        let x_642 : vec4<f32> = u_xlat10;
        let x_644 : vec2<f32> = (vec2<f32>(x_642.x, x_642.y) + vec2<f32>(1.0f, 1.0f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_647 + vec2<f32>(1.0f, 1.0f));
        let x_650 : vec4<f32> = u_xlat9;
        let x_654 : vec2<f32> = (vec2<f32>(x_650.x, x_650.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_655 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_654.x, x_654.y, x_655.z, x_655.w);
        let x_657 : vec2<f32> = u_xlat53;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat10;
        let x_663 : vec2<f32> = (vec2<f32>(x_661.x, x_661.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_664 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_663.x, x_663.y, x_664.z, x_664.w);
        let x_667 : vec2<f32> = u_xlat51;
        let x_668 : vec2<f32> = (x_667 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_669 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_668.x, x_668.y, x_669.z, x_669.w);
        let x_671 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_671.y, x_671.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_675 : f32 = u_xlat10.x;
        u_xlat11.z = x_675;
        let x_678 : f32 = u_xlat51.x;
        u_xlat11.w = x_678;
        let x_681 : f32 = u_xlat12.x;
        u_xlat9.z = x_681;
        let x_684 : f32 = u_xlat8.x;
        u_xlat9.w = x_684;
        let x_687 : vec4<f32> = u_xlat9;
        let x_689 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_687.z, x_687.w, x_687.x, x_687.z) + vec4<f32>(x_689.z, x_689.w, x_689.x, x_689.z));
        let x_693 : f32 = u_xlat11.y;
        u_xlat10.z = x_693;
        let x_696 : f32 = u_xlat51.y;
        u_xlat10.w = x_696;
        let x_699 : f32 = u_xlat9.y;
        u_xlat12.z = x_699;
        let x_702 : f32 = u_xlat8.z;
        u_xlat12.w = x_702;
        let x_704 : vec4<f32> = u_xlat10;
        let x_706 : vec4<f32> = u_xlat12;
        let x_708 : vec3<f32> = (vec3<f32>(x_704.z, x_704.y, x_704.w) + vec3<f32>(x_706.z, x_706.y, x_706.w));
        let x_709 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat9;
        let x_713 : vec4<f32> = u_xlat13;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.x, x_711.z, x_711.w) / vec3<f32>(x_713.z, x_713.w, x_713.y));
        let x_716 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat9;
        let x_724 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_725 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_724.x, x_724.y, x_724.z, x_725.w);
        let x_727 : vec4<f32> = u_xlat12;
        let x_729 : vec4<f32> = u_xlat8;
        let x_731 : vec3<f32> = (vec3<f32>(x_727.z, x_727.y, x_727.w) / vec3<f32>(x_729.x, x_729.y, x_729.z));
        let x_732 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_731.x, x_731.y, x_731.z, x_732.w);
        let x_734 : vec4<f32> = u_xlat10;
        let x_736 : vec3<f32> = (vec3<f32>(x_734.x, x_734.y, x_734.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_739 : vec4<f32> = u_xlat9;
        let x_742 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_744 : vec3<f32> = (vec3<f32>(x_739.y, x_739.x, x_739.z) * vec3<f32>(x_742.x, x_742.x, x_742.x));
        let x_745 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_744.x, x_744.y, x_744.z, x_745.w);
        let x_747 : vec4<f32> = u_xlat10;
        let x_750 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_752 : vec3<f32> = (vec3<f32>(x_747.x, x_747.y, x_747.z) * vec3<f32>(x_750.y, x_750.y, x_750.y));
        let x_753 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_752.x, x_752.y, x_752.z, x_753.w);
        let x_756 : f32 = u_xlat10.x;
        u_xlat9.w = x_756;
        let x_758 : vec4<f32> = u_xlat7;
        let x_761 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_764 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_758.x, x_758.y, x_758.x, x_758.y) * vec4<f32>(x_761.x, x_761.y, x_761.x, x_761.y)) + vec4<f32>(x_764.y, x_764.w, x_764.x, x_764.w));
        let x_767 : vec4<f32> = u_xlat7;
        let x_770 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.x, x_770.y)) + vec2<f32>(x_773.z, x_773.w));
        let x_777 : f32 = u_xlat9.y;
        u_xlat10.w = x_777;
        let x_779 : vec4<f32> = u_xlat10;
        let x_780 : vec2<f32> = vec2<f32>(x_779.y, x_779.z);
        let x_781 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_781.x, x_780.x, x_781.z, x_780.y);
        let x_783 : vec4<f32> = u_xlat7;
        let x_786 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_789 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_783.x, x_783.y, x_783.x, x_783.y) * vec4<f32>(x_786.x, x_786.y, x_786.x, x_786.y)) + vec4<f32>(x_789.x, x_789.y, x_789.z, x_789.y));
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_798 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_792.x, x_792.y, x_792.x, x_792.y) * vec4<f32>(x_795.x, x_795.y, x_795.x, x_795.y)) + vec4<f32>(x_798.w, x_798.y, x_798.w, x_798.z));
        let x_801 : vec4<f32> = u_xlat7;
        let x_804 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_807 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_801.x, x_801.y, x_801.x, x_801.y) * vec4<f32>(x_804.x, x_804.y, x_804.x, x_804.y)) + vec4<f32>(x_807.x, x_807.w, x_807.z, x_807.w));
        let x_811 : vec4<f32> = u_xlat8;
        let x_813 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_811.x, x_811.x, x_811.x, x_811.y) * vec4<f32>(x_813.z, x_813.w, x_813.y, x_813.z));
        let x_817 : vec4<f32> = u_xlat8;
        let x_819 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_817.y, x_817.y, x_817.z, x_817.z) * x_819);
        let x_823 : f32 = u_xlat8.z;
        let x_825 : f32 = u_xlat13.y;
        u_xlat68 = (x_823 * x_825);
        let x_828 : vec4<f32> = u_xlat11;
        let x_829 : vec2<f32> = vec2<f32>(x_828.x, x_828.y);
        let x_831 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_829.x, x_829.y, x_831);
        let x_839 : vec3<f32> = txVec4;
        let x_841 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_839.xy, x_839.z);
        u_xlat70 = x_841;
        let x_843 : vec4<f32> = u_xlat11;
        let x_844 : vec2<f32> = vec2<f32>(x_843.z, x_843.w);
        let x_846 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_844.x, x_844.y, x_846);
        let x_854 : vec3<f32> = txVec5;
        let x_856 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_854.xy, x_854.z);
        u_xlat72 = x_856;
        let x_857 : f32 = u_xlat72;
        let x_859 : f32 = u_xlat14.y;
        u_xlat72 = (x_857 * x_859);
        let x_862 : f32 = u_xlat14.x;
        let x_863 : f32 = u_xlat70;
        let x_865 : f32 = u_xlat72;
        u_xlat70 = ((x_862 * x_863) + x_865);
        let x_868 : vec2<f32> = u_xlat51;
        let x_870 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_868.x, x_868.y, x_870);
        let x_877 : vec3<f32> = txVec6;
        let x_879 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_877.xy, x_877.z);
        u_xlat72 = x_879;
        let x_881 : f32 = u_xlat14.z;
        let x_882 : f32 = u_xlat72;
        let x_884 : f32 = u_xlat70;
        u_xlat70 = ((x_881 * x_882) + x_884);
        let x_887 : vec4<f32> = u_xlat10;
        let x_888 : vec2<f32> = vec2<f32>(x_887.x, x_887.y);
        let x_890 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_888.x, x_888.y, x_890);
        let x_897 : vec3<f32> = txVec7;
        let x_899 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_897.xy, x_897.z);
        u_xlat72 = x_899;
        let x_901 : f32 = u_xlat14.w;
        let x_902 : f32 = u_xlat72;
        let x_904 : f32 = u_xlat70;
        u_xlat70 = ((x_901 * x_902) + x_904);
        let x_907 : vec4<f32> = u_xlat12;
        let x_908 : vec2<f32> = vec2<f32>(x_907.x, x_907.y);
        let x_910 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_908.x, x_908.y, x_910);
        let x_917 : vec3<f32> = txVec8;
        let x_919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_917.xy, x_917.z);
        u_xlat72 = x_919;
        let x_921 : f32 = u_xlat15.x;
        let x_922 : f32 = u_xlat72;
        let x_924 : f32 = u_xlat70;
        u_xlat70 = ((x_921 * x_922) + x_924);
        let x_927 : vec4<f32> = u_xlat12;
        let x_928 : vec2<f32> = vec2<f32>(x_927.z, x_927.w);
        let x_930 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_928.x, x_928.y, x_930);
        let x_937 : vec3<f32> = txVec9;
        let x_939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_937.xy, x_937.z);
        u_xlat72 = x_939;
        let x_941 : f32 = u_xlat15.y;
        let x_942 : f32 = u_xlat72;
        let x_944 : f32 = u_xlat70;
        u_xlat70 = ((x_941 * x_942) + x_944);
        let x_947 : vec4<f32> = u_xlat10;
        let x_948 : vec2<f32> = vec2<f32>(x_947.z, x_947.w);
        let x_950 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_948.x, x_948.y, x_950);
        let x_957 : vec3<f32> = txVec10;
        let x_959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_957.xy, x_957.z);
        u_xlat72 = x_959;
        let x_961 : f32 = u_xlat15.z;
        let x_962 : f32 = u_xlat72;
        let x_964 : f32 = u_xlat70;
        u_xlat70 = ((x_961 * x_962) + x_964);
        let x_967 : vec4<f32> = u_xlat9;
        let x_968 : vec2<f32> = vec2<f32>(x_967.x, x_967.y);
        let x_970 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_968.x, x_968.y, x_970);
        let x_977 : vec3<f32> = txVec11;
        let x_979 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_977.xy, x_977.z);
        u_xlat72 = x_979;
        let x_981 : f32 = u_xlat15.w;
        let x_982 : f32 = u_xlat72;
        let x_984 : f32 = u_xlat70;
        u_xlat70 = ((x_981 * x_982) + x_984);
        let x_987 : vec4<f32> = u_xlat9;
        let x_988 : vec2<f32> = vec2<f32>(x_987.z, x_987.w);
        let x_990 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_988.x, x_988.y, x_990);
        let x_997 : vec3<f32> = txVec12;
        let x_999 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_997.xy, x_997.z);
        u_xlat72 = x_999;
        let x_1000 : f32 = u_xlat68;
        let x_1001 : f32 = u_xlat72;
        let x_1003 : f32 = u_xlat70;
        u_xlat67 = ((x_1000 * x_1001) + x_1003);
      } else {
        let x_1006 : vec4<f32> = u_xlat6;
        let x_1009 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1012 : vec2<f32> = ((vec2<f32>(x_1006.x, x_1006.y) * vec2<f32>(x_1009.z, x_1009.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1013 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1012.x, x_1012.y, x_1013.z, x_1013.w);
        let x_1015 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = floor(vec2<f32>(x_1015.x, x_1015.y));
        let x_1018 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1020 : vec4<f32> = u_xlat6;
        let x_1023 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.z, x_1023.w)) + -(vec2<f32>(x_1026.x, x_1026.y)));
        let x_1030 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1030.x, x_1030.x, x_1030.y, x_1030.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1033 : vec4<f32> = u_xlat8;
        let x_1035 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1033.x, x_1033.x, x_1033.z, x_1033.z) * vec4<f32>(x_1035.x, x_1035.x, x_1035.z, x_1035.z));
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1042 : vec2<f32> = (vec2<f32>(x_1038.y, x_1038.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1043 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1043.x, x_1042.x, x_1043.z, x_1042.y);
        let x_1045 : vec4<f32> = u_xlat9;
        let x_1048 : vec2<f32> = u_xlat51;
        let x_1050 : vec2<f32> = ((vec2<f32>(x_1045.x, x_1045.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1048));
        let x_1051 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1050.x, x_1051.y, x_1050.y, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat51;
        let x_1055 : vec2<f32> = (-(x_1053) + vec2<f32>(1.0f, 1.0f));
        let x_1056 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1055.x, x_1055.y, x_1056.z, x_1056.w);
        let x_1058 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1058, vec2<f32>(0.0f, 0.0f));
        let x_1060 : vec2<f32> = u_xlat53;
        let x_1062 : vec2<f32> = u_xlat53;
        let x_1064 : vec4<f32> = u_xlat9;
        let x_1066 : vec2<f32> = ((-(x_1060) * x_1062) + vec2<f32>(x_1064.x, x_1064.y));
        let x_1067 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1066.x, x_1066.y, x_1067.z, x_1067.w);
        let x_1069 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1069, vec2<f32>(0.0f, 0.0f));
        let x_1072 : vec2<f32> = u_xlat53;
        let x_1074 : vec2<f32> = u_xlat53;
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1078 : vec2<f32> = ((-(x_1072) * x_1074) + vec2<f32>(x_1076.y, x_1076.w));
        let x_1079 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1078.x, x_1079.y, x_1078.y);
        let x_1081 : vec4<f32> = u_xlat9;
        let x_1084 : vec2<f32> = (vec2<f32>(x_1081.x, x_1081.y) + vec2<f32>(2.0f, 2.0f));
        let x_1085 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1084.x, x_1084.y, x_1085.z, x_1085.w);
        let x_1087 : vec3<f32> = u_xlat30;
        let x_1089 : vec2<f32> = (vec2<f32>(x_1087.x, x_1087.z) + vec2<f32>(2.0f, 2.0f));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1090.x, x_1089.x, x_1090.z, x_1089.y);
        let x_1093 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1093 * 0.081632003f);
        let x_1097 : vec4<f32> = u_xlat8;
        let x_1100 : vec3<f32> = (vec3<f32>(x_1097.z, x_1097.x, x_1097.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1101 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1100.x, x_1100.y, x_1100.z, x_1101.w);
        let x_1103 : vec4<f32> = u_xlat9;
        let x_1106 : vec2<f32> = (vec2<f32>(x_1103.x, x_1103.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1107 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1106.x, x_1106.y, x_1107.z, x_1107.w);
        let x_1110 : f32 = u_xlat12.y;
        u_xlat11.x = x_1110;
        let x_1112 : vec2<f32> = u_xlat51;
        let x_1119 : vec2<f32> = ((vec2<f32>(x_1112.x, x_1112.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1120 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1120.x, x_1119.x, x_1120.z, x_1119.y);
        let x_1122 : vec2<f32> = u_xlat51;
        let x_1126 : vec2<f32> = ((vec2<f32>(x_1122.x, x_1122.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1127 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1126.x, x_1127.y, x_1126.y, x_1127.w);
        let x_1130 : f32 = u_xlat8.x;
        u_xlat9.y = x_1130;
        let x_1133 : f32 = u_xlat10.y;
        u_xlat9.w = x_1133;
        let x_1135 : vec4<f32> = u_xlat9;
        let x_1136 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1135 + x_1136);
        let x_1138 : vec2<f32> = u_xlat51;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1138.y, x_1138.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1142 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1142.x, x_1141.x, x_1142.z, x_1141.y);
        let x_1144 : vec2<f32> = u_xlat51;
        let x_1147 : vec2<f32> = ((vec2<f32>(x_1144.y, x_1144.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1148 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1147.x, x_1148.y, x_1147.y, x_1148.w);
        let x_1151 : f32 = u_xlat8.y;
        u_xlat10.y = x_1151;
        let x_1153 : vec4<f32> = u_xlat10;
        let x_1154 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1153 + x_1154);
        let x_1156 : vec4<f32> = u_xlat9;
        let x_1157 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1156 / x_1157);
        let x_1159 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1159 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1165 : vec4<f32> = u_xlat10;
        let x_1166 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1165 / x_1166);
        let x_1168 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1168 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1170 : vec4<f32> = u_xlat9;
        let x_1173 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1170.w, x_1170.x, x_1170.y, x_1170.z) * vec4<f32>(x_1173.x, x_1173.x, x_1173.x, x_1173.x));
        let x_1176 : vec4<f32> = u_xlat10;
        let x_1179 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1176.x, x_1176.w, x_1176.y, x_1176.z) * vec4<f32>(x_1179.y, x_1179.y, x_1179.y, x_1179.y));
        let x_1182 : vec4<f32> = u_xlat9;
        let x_1183 : vec3<f32> = vec3<f32>(x_1182.y, x_1182.z, x_1182.w);
        let x_1184 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1183.x, x_1184.y, x_1183.y, x_1183.z);
        let x_1187 : f32 = u_xlat10.x;
        u_xlat12.y = x_1187;
        let x_1189 : vec4<f32> = u_xlat7;
        let x_1192 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1195 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1189.x, x_1189.y, x_1189.x, x_1189.y) * vec4<f32>(x_1192.x, x_1192.y, x_1192.x, x_1192.y)) + vec4<f32>(x_1195.x, x_1195.y, x_1195.z, x_1195.y));
        let x_1198 : vec4<f32> = u_xlat7;
        let x_1201 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1204 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1198.x, x_1198.y) * vec2<f32>(x_1201.x, x_1201.y)) + vec2<f32>(x_1204.w, x_1204.y));
        let x_1208 : f32 = u_xlat12.y;
        u_xlat9.y = x_1208;
        let x_1211 : f32 = u_xlat10.z;
        u_xlat12.y = x_1211;
        let x_1213 : vec4<f32> = u_xlat7;
        let x_1216 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1219 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1213.x, x_1213.y, x_1213.x, x_1213.y) * vec4<f32>(x_1216.x, x_1216.y, x_1216.x, x_1216.y)) + vec4<f32>(x_1219.x, x_1219.y, x_1219.z, x_1219.y));
        let x_1222 : vec4<f32> = u_xlat7;
        let x_1225 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1228 : vec4<f32> = u_xlat12;
        let x_1230 : vec2<f32> = ((vec2<f32>(x_1222.x, x_1222.y) * vec2<f32>(x_1225.x, x_1225.y)) + vec2<f32>(x_1228.w, x_1228.y));
        let x_1231 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1230.x, x_1230.y, x_1231.z, x_1231.w);
        let x_1234 : f32 = u_xlat12.y;
        u_xlat9.z = x_1234;
        let x_1237 : vec4<f32> = u_xlat7;
        let x_1240 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y) * vec4<f32>(x_1240.x, x_1240.y, x_1240.x, x_1240.y)) + vec4<f32>(x_1243.x, x_1243.y, x_1243.x, x_1243.z));
        let x_1247 : f32 = u_xlat10.w;
        u_xlat12.y = x_1247;
        let x_1250 : vec4<f32> = u_xlat7;
        let x_1253 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1256 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1250.x, x_1250.y, x_1250.x, x_1250.y) * vec4<f32>(x_1253.x, x_1253.y, x_1253.x, x_1253.y)) + vec4<f32>(x_1256.x, x_1256.y, x_1256.z, x_1256.y));
        let x_1260 : vec4<f32> = u_xlat7;
        let x_1263 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1266 : vec4<f32> = u_xlat12;
        u_xlat31 = ((vec2<f32>(x_1260.x, x_1260.y) * vec2<f32>(x_1263.x, x_1263.y)) + vec2<f32>(x_1266.w, x_1266.y));
        let x_1270 : f32 = u_xlat12.y;
        u_xlat9.w = x_1270;
        let x_1273 : vec4<f32> = u_xlat7;
        let x_1276 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1279 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1273.x, x_1273.y) * vec2<f32>(x_1276.x, x_1276.y)) + vec2<f32>(x_1279.x, x_1279.w));
        let x_1282 : vec4<f32> = u_xlat12;
        let x_1283 : vec3<f32> = vec3<f32>(x_1282.x, x_1282.z, x_1282.w);
        let x_1284 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1283.x, x_1284.y, x_1283.y, x_1283.z);
        let x_1286 : vec4<f32> = u_xlat7;
        let x_1289 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1292 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1286.x, x_1286.y, x_1286.x, x_1286.y) * vec4<f32>(x_1289.x, x_1289.y, x_1289.x, x_1289.y)) + vec4<f32>(x_1292.x, x_1292.y, x_1292.z, x_1292.y));
        let x_1296 : vec4<f32> = u_xlat7;
        let x_1299 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1302 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(x_1299.x, x_1299.y)) + vec2<f32>(x_1302.w, x_1302.y));
        let x_1306 : f32 = u_xlat9.x;
        u_xlat10.x = x_1306;
        let x_1308 : vec4<f32> = u_xlat7;
        let x_1311 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1314 : vec4<f32> = u_xlat10;
        let x_1316 : vec2<f32> = ((vec2<f32>(x_1308.x, x_1308.y) * vec2<f32>(x_1311.x, x_1311.y)) + vec2<f32>(x_1314.x, x_1314.y));
        let x_1317 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1316.x, x_1316.y, x_1317.z, x_1317.w);
        let x_1320 : vec4<f32> = u_xlat8;
        let x_1322 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1320.x, x_1320.x, x_1320.x, x_1320.x) * x_1322);
        let x_1325 : vec4<f32> = u_xlat8;
        let x_1327 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1325.y, x_1325.y, x_1325.y, x_1325.y) * x_1327);
        let x_1330 : vec4<f32> = u_xlat8;
        let x_1332 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1330.z, x_1330.z, x_1330.z, x_1330.z) * x_1332);
        let x_1334 : vec4<f32> = u_xlat8;
        let x_1336 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1334.w, x_1334.w, x_1334.w, x_1334.w) * x_1336);
        let x_1339 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.x, x_1339.y);
        let x_1342 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec13;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat68 = x_1351;
        let x_1353 : vec4<f32> = u_xlat13;
        let x_1354 : vec2<f32> = vec2<f32>(x_1353.z, x_1353.w);
        let x_1356 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1354.x, x_1354.y, x_1356);
        let x_1363 : vec3<f32> = txVec14;
        let x_1365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1363.xy, x_1363.z);
        u_xlat70 = x_1365;
        let x_1366 : f32 = u_xlat70;
        let x_1368 : f32 = u_xlat18.y;
        u_xlat70 = (x_1366 * x_1368);
        let x_1371 : f32 = u_xlat18.x;
        let x_1372 : f32 = u_xlat68;
        let x_1374 : f32 = u_xlat70;
        u_xlat68 = ((x_1371 * x_1372) + x_1374);
        let x_1377 : vec2<f32> = u_xlat51;
        let x_1379 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1377.x, x_1377.y, x_1379);
        let x_1386 : vec3<f32> = txVec15;
        let x_1388 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1386.xy, x_1386.z);
        u_xlat70 = x_1388;
        let x_1390 : f32 = u_xlat18.z;
        let x_1391 : f32 = u_xlat70;
        let x_1393 : f32 = u_xlat68;
        u_xlat68 = ((x_1390 * x_1391) + x_1393);
        let x_1396 : vec4<f32> = u_xlat16;
        let x_1397 : vec2<f32> = vec2<f32>(x_1396.x, x_1396.y);
        let x_1399 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1397.x, x_1397.y, x_1399);
        let x_1406 : vec3<f32> = txVec16;
        let x_1408 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1406.xy, x_1406.z);
        u_xlat70 = x_1408;
        let x_1410 : f32 = u_xlat18.w;
        let x_1411 : f32 = u_xlat70;
        let x_1413 : f32 = u_xlat68;
        u_xlat68 = ((x_1410 * x_1411) + x_1413);
        let x_1416 : vec4<f32> = u_xlat14;
        let x_1417 : vec2<f32> = vec2<f32>(x_1416.x, x_1416.y);
        let x_1419 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1417.x, x_1417.y, x_1419);
        let x_1426 : vec3<f32> = txVec17;
        let x_1428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1426.xy, x_1426.z);
        u_xlat70 = x_1428;
        let x_1430 : f32 = u_xlat19.x;
        let x_1431 : f32 = u_xlat70;
        let x_1433 : f32 = u_xlat68;
        u_xlat68 = ((x_1430 * x_1431) + x_1433);
        let x_1436 : vec4<f32> = u_xlat14;
        let x_1437 : vec2<f32> = vec2<f32>(x_1436.z, x_1436.w);
        let x_1439 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1437.x, x_1437.y, x_1439);
        let x_1446 : vec3<f32> = txVec18;
        let x_1448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1446.xy, x_1446.z);
        u_xlat70 = x_1448;
        let x_1450 : f32 = u_xlat19.y;
        let x_1451 : f32 = u_xlat70;
        let x_1453 : f32 = u_xlat68;
        u_xlat68 = ((x_1450 * x_1451) + x_1453);
        let x_1456 : vec4<f32> = u_xlat15;
        let x_1457 : vec2<f32> = vec2<f32>(x_1456.x, x_1456.y);
        let x_1459 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1457.x, x_1457.y, x_1459);
        let x_1466 : vec3<f32> = txVec19;
        let x_1468 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1466.xy, x_1466.z);
        u_xlat70 = x_1468;
        let x_1470 : f32 = u_xlat19.z;
        let x_1471 : f32 = u_xlat70;
        let x_1473 : f32 = u_xlat68;
        u_xlat68 = ((x_1470 * x_1471) + x_1473);
        let x_1476 : vec4<f32> = u_xlat16;
        let x_1477 : vec2<f32> = vec2<f32>(x_1476.z, x_1476.w);
        let x_1479 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec20;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat70 = x_1488;
        let x_1490 : f32 = u_xlat19.w;
        let x_1491 : f32 = u_xlat70;
        let x_1493 : f32 = u_xlat68;
        u_xlat68 = ((x_1490 * x_1491) + x_1493);
        let x_1496 : vec4<f32> = u_xlat17;
        let x_1497 : vec2<f32> = vec2<f32>(x_1496.x, x_1496.y);
        let x_1499 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1497.x, x_1497.y, x_1499);
        let x_1506 : vec3<f32> = txVec21;
        let x_1508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1506.xy, x_1506.z);
        u_xlat70 = x_1508;
        let x_1510 : f32 = u_xlat20.x;
        let x_1511 : f32 = u_xlat70;
        let x_1513 : f32 = u_xlat68;
        u_xlat68 = ((x_1510 * x_1511) + x_1513);
        let x_1516 : vec4<f32> = u_xlat17;
        let x_1517 : vec2<f32> = vec2<f32>(x_1516.z, x_1516.w);
        let x_1519 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1517.x, x_1517.y, x_1519);
        let x_1526 : vec3<f32> = txVec22;
        let x_1528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1526.xy, x_1526.z);
        u_xlat70 = x_1528;
        let x_1530 : f32 = u_xlat20.y;
        let x_1531 : f32 = u_xlat70;
        let x_1533 : f32 = u_xlat68;
        u_xlat68 = ((x_1530 * x_1531) + x_1533);
        let x_1536 : vec2<f32> = u_xlat31;
        let x_1538 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1536.x, x_1536.y, x_1538);
        let x_1545 : vec3<f32> = txVec23;
        let x_1547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1545.xy, x_1545.z);
        u_xlat70 = x_1547;
        let x_1549 : f32 = u_xlat20.z;
        let x_1550 : f32 = u_xlat70;
        let x_1552 : f32 = u_xlat68;
        u_xlat68 = ((x_1549 * x_1550) + x_1552);
        let x_1555 : vec2<f32> = u_xlat59;
        let x_1557 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1555.x, x_1555.y, x_1557);
        let x_1564 : vec3<f32> = txVec24;
        let x_1566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1564.xy, x_1564.z);
        u_xlat70 = x_1566;
        let x_1568 : f32 = u_xlat20.w;
        let x_1569 : f32 = u_xlat70;
        let x_1571 : f32 = u_xlat68;
        u_xlat68 = ((x_1568 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat12;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec25;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat70 = x_1586;
        let x_1588 : f32 = u_xlat8.x;
        let x_1589 : f32 = u_xlat70;
        let x_1591 : f32 = u_xlat68;
        u_xlat68 = ((x_1588 * x_1589) + x_1591);
        let x_1594 : vec4<f32> = u_xlat12;
        let x_1595 : vec2<f32> = vec2<f32>(x_1594.z, x_1594.w);
        let x_1597 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1595.x, x_1595.y, x_1597);
        let x_1604 : vec3<f32> = txVec26;
        let x_1606 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1604.xy, x_1604.z);
        u_xlat70 = x_1606;
        let x_1608 : f32 = u_xlat8.y;
        let x_1609 : f32 = u_xlat70;
        let x_1611 : f32 = u_xlat68;
        u_xlat68 = ((x_1608 * x_1609) + x_1611);
        let x_1614 : vec2<f32> = u_xlat54;
        let x_1616 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1614.x, x_1614.y, x_1616);
        let x_1623 : vec3<f32> = txVec27;
        let x_1625 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1623.xy, x_1623.z);
        u_xlat70 = x_1625;
        let x_1627 : f32 = u_xlat8.z;
        let x_1628 : f32 = u_xlat70;
        let x_1630 : f32 = u_xlat68;
        u_xlat68 = ((x_1627 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat7;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.x, x_1633.y);
        let x_1636 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec28;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1643.xy, x_1643.z);
        u_xlat70 = x_1645;
        let x_1647 : f32 = u_xlat8.w;
        let x_1648 : f32 = u_xlat70;
        let x_1650 : f32 = u_xlat68;
        u_xlat67 = ((x_1647 * x_1648) + x_1650);
      }
    }
  } else {
    let x_1654 : vec4<f32> = u_xlat6;
    let x_1655 : vec2<f32> = vec2<f32>(x_1654.x, x_1654.y);
    let x_1657 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1655.x, x_1655.y, x_1657);
    let x_1664 : vec3<f32> = txVec29;
    let x_1666 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1664.xy, x_1664.z);
    u_xlat67 = x_1666;
  }
  let x_1668 : f32 = x_271.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1668) + 1.0f);
  let x_1671 : f32 = u_xlat67;
  let x_1673 : f32 = x_271.x_MainLightShadowParams.x;
  let x_1675 : f32 = u_xlat68;
  u_xlat67 = ((x_1671 * x_1673) + x_1675);
  let x_1679 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1679);
  let x_1683 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1683 >= 1.0f);
  let x_1685 : bool = u_xlatb70;
  let x_1686 : bool = u_xlatb72;
  u_xlatb70 = (x_1685 | x_1686);
  let x_1688 : bool = u_xlatb70;
  let x_1689 : f32 = u_xlat67;
  u_xlat67 = select(x_1689, 1.0f, x_1688);
  let x_1691 : vec3<f32> = u_xlat0;
  let x_1693 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1691, -(vec3<f32>(x_1693.x, x_1693.y, x_1693.z)));
  let x_1699 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1699, 0.0f, 1.0f);
  let x_1702 : f32 = u_xlat67;
  let x_1705 : vec4<f32> = x_90.x_MainLightColor;
  let x_1707 : vec3<f32> = (vec3<f32>(x_1702, x_1702, x_1702) * vec3<f32>(x_1705.x, x_1705.y, x_1705.z));
  let x_1708 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1707.x, x_1707.y, x_1707.z, x_1708.w);
  let x_1710 : vec3<f32> = u_xlat0;
  let x_1712 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1710.x, x_1710.x, x_1710.x) * vec3<f32>(x_1712.x, x_1712.y, x_1712.z));
  let x_1715 : vec3<f32> = u_xlat0;
  let x_1716 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1715 * vec3<f32>(x_1716.x, x_1716.y, x_1716.z));
  let x_1720 : f32 = x_161.unity_LODFade.x;
  u_xlatb67 = (x_1720 < 0.0f);
  let x_1723 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1723 + 1.0f);
  let x_1726 : bool = u_xlatb67;
  if (x_1726) {
    let x_1731 : f32 = u_xlat3.x;
    x_1727 = x_1731;
  } else {
    let x_1734 : f32 = x_161.unity_LODFade.x;
    x_1727 = x_1734;
  }
  let x_1735 : f32 = x_1727;
  u_xlat67 = x_1735;
  let x_1737 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1737);
  let x_1739 : vec3<f32> = u_xlat1;
  let x_1743 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1739) * vec3<f32>(x_1743.x, x_1743.y, x_1743.x));
  let x_1749 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1749);
  let x_1753 : u32 = u_xlatu1.z;
  u_xlatu45 = (x_1753 * 1025u);
  let x_1757 : u32 = u_xlatu45;
  u_xlatu25 = (x_1757 >> 6u);
  let x_1761 : u32 = u_xlatu45;
  let x_1762 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1761 ^ x_1762));
  let x_1765 : i32 = u_xlati45;
  u_xlatu45 = (bitcast<u32>(x_1765) * 9u);
  let x_1769 : u32 = u_xlatu45;
  u_xlatu25 = (x_1769 >> 11u);
  let x_1772 : u32 = u_xlatu45;
  let x_1773 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1772 ^ x_1773));
  let x_1776 : i32 = u_xlati45;
  u_xlati45 = (x_1776 * 32769i);
  let x_1780 : i32 = u_xlati45;
  let x_1783 : u32 = u_xlatu1.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1780) ^ x_1783));
  let x_1787 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1787) * 1025u);
  let x_1790 : u32 = u_xlatu23;
  u_xlatu45 = (x_1790 >> 6u);
  let x_1792 : u32 = u_xlatu45;
  let x_1793 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1792 ^ x_1793));
  let x_1796 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1796) * 9u);
  let x_1799 : u32 = u_xlatu23;
  u_xlatu45 = (x_1799 >> 11u);
  let x_1801 : u32 = u_xlatu45;
  let x_1802 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1801 ^ x_1802));
  let x_1805 : i32 = u_xlati23;
  u_xlati23 = (x_1805 * 32769i);
  let x_1808 : i32 = u_xlati23;
  let x_1811 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1808) ^ x_1811));
  let x_1814 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1814) * 1025u);
  let x_1819 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1819 >> 6u);
  let x_1821 : u32 = u_xlatu23;
  let x_1823 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1821 ^ x_1823));
  let x_1826 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1826) * 9u);
  let x_1831 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1831 >> 11u);
  let x_1833 : u32 = u_xlatu23;
  let x_1835 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1833 ^ x_1835));
  let x_1838 : i32 = u_xlati1;
  u_xlati1 = (x_1838 * 32769i);
  param = 1065353216i;
  let x_1844 : i32 = u_xlati1;
  param_1 = x_1844;
  param_2 = 0i;
  param_3 = 23i;
  let x_1847 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1847);
  let x_1851 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1851 + -1.0f);
  let x_1856 : f32 = u_xlat1.x;
  u_xlat23 = (-(x_1856) + 1.0f);
  let x_1859 : bool = u_xlatb3;
  if (x_1859) {
    let x_1864 : f32 = u_xlat1.x;
    x_1860 = x_1864;
  } else {
    let x_1866 : f32 = u_xlat23;
    x_1860 = x_1866;
  }
  let x_1867 : f32 = x_1860;
  u_xlat1.x = x_1867;
  let x_1869 : f32 = u_xlat67;
  let x_1872 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1869 * 2.0f) + -(x_1872));
  let x_1877 : f32 = u_xlat1.x;
  let x_1879 : f32 = u_xlat3.w;
  u_xlat23 = (x_1877 * x_1879);
  let x_1884 : f32 = u_xlat23;
  u_xlatb45.x = (x_1884 >= 0.400000006f);
  let x_1890 : bool = u_xlatb45.x;
  let x_1891 : f32 = u_xlat23;
  u_xlat45.x = select(0.0f, x_1891, x_1890);
  let x_1895 : f32 = u_xlat3.w;
  let x_1897 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1895 * x_1897) + -0.400000006f);
  let x_1902 : f32 = u_xlat23;
  u_xlat67 = dpdxCoarse(x_1902);
  let x_1904 : f32 = u_xlat23;
  u_xlat23 = dpdyCoarse(x_1904);
  let x_1906 : f32 = u_xlat23;
  let x_1908 : f32 = u_xlat67;
  u_xlat23 = (abs(x_1906) + abs(x_1908));
  let x_1911 : f32 = u_xlat23;
  u_xlat23 = max(x_1911, 0.0001f);
  let x_1915 : f32 = u_xlat1.x;
  let x_1916 : f32 = u_xlat23;
  u_xlat1.x = (x_1915 / x_1916);
  let x_1920 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1920 + 0.5f);
  let x_1924 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1924, 0.0f, 1.0f);
  let x_1929 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb23 = !((x_1929 == 0.0f));
  let x_1931 : bool = u_xlatb23;
  if (x_1931) {
    let x_1936 : f32 = u_xlat1.x;
    x_1932 = x_1936;
  } else {
    let x_1939 : f32 = u_xlat45.x;
    x_1932 = x_1939;
  }
  let x_1940 : f32 = x_1932;
  u_xlat1.x = x_1940;
  let x_1943 : f32 = u_xlat1.x;
  u_xlat45.x = (x_1943 + -0.0001f);
  let x_1948 : f32 = u_xlat45.x;
  u_xlatb45.x = (x_1948 < 0.0f);
  let x_1952 : bool = u_xlatb45.x;
  if (((select(0i, 1i, x_1952) * -1i) != 0i)) {
    discard;
  }
  let x_1962 : f32 = vs_INTERP2.w;
  u_xlatb45.x = (0.0f < x_1962);
  let x_1966 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb45.y = (x_1966 >= 0.0f);
  let x_1970 : bool = u_xlatb45.x;
  u_xlat45.x = select(-1.0f, 1.0f, x_1970);
  let x_1974 : bool = u_xlatb45.y;
  u_xlat45.y = select(-1.0f, 1.0f, x_1974);
  let x_1978 : f32 = u_xlat45.y;
  let x_1980 : f32 = u_xlat45.x;
  u_xlat45.x = (x_1978 * x_1980);
  let x_1983 : vec3<f32> = vs_INTERP1;
  let x_1985 : vec4<f32> = vs_INTERP2;
  let x_1987 : vec3<f32> = (vec3<f32>(x_1983.z, x_1983.x, x_1983.y) * vec3<f32>(x_1985.y, x_1985.z, x_1985.x));
  let x_1988 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1987.x, x_1987.y, x_1987.z, x_1988.w);
  let x_1990 : vec3<f32> = vs_INTERP1;
  let x_1992 : vec4<f32> = vs_INTERP2;
  let x_1995 : vec4<f32> = u_xlat3;
  let x_1998 : vec3<f32> = ((vec3<f32>(x_1990.y, x_1990.z, x_1990.x) * vec3<f32>(x_1992.z, x_1992.x, x_1992.y)) + -(vec3<f32>(x_1995.x, x_1995.y, x_1995.z)));
  let x_1999 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1998.x, x_1998.y, x_1998.z, x_1999.w);
  let x_2001 : vec2<f32> = u_xlat45;
  let x_2003 : vec4<f32> = u_xlat3;
  let x_2005 : vec3<f32> = (vec3<f32>(x_2001.x, x_2001.x, x_2001.x) * vec3<f32>(x_2003.x, x_2003.y, x_2003.z));
  let x_2006 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2005.x, x_2005.y, x_2005.z, x_2006.w);
  let x_2008 : vec4<f32> = u_xlat3;
  let x_2010 : vec3<f32> = u_xlat27;
  let x_2012 : vec3<f32> = (vec3<f32>(x_2008.x, x_2008.y, x_2008.z) * vec3<f32>(x_2010.y, x_2010.y, x_2010.y));
  let x_2013 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2012.x, x_2012.y, x_2012.z, x_2013.w);
  let x_2015 : vec3<f32> = u_xlat27;
  let x_2017 : vec4<f32> = vs_INTERP2;
  let x_2020 : vec4<f32> = u_xlat3;
  let x_2022 : vec3<f32> = ((vec3<f32>(x_2015.x, x_2015.x, x_2015.x) * vec3<f32>(x_2017.x, x_2017.y, x_2017.z)) + vec3<f32>(x_2020.x, x_2020.y, x_2020.z));
  let x_2023 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2022.x, x_2022.y, x_2022.z, x_2023.w);
  let x_2025 : vec3<f32> = u_xlat27;
  let x_2027 : vec3<f32> = vs_INTERP1;
  let x_2029 : vec4<f32> = u_xlat3;
  let x_2031 : vec3<f32> = ((vec3<f32>(x_2025.z, x_2025.z, x_2025.z) * x_2027) + vec3<f32>(x_2029.x, x_2029.y, x_2029.z));
  let x_2032 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2031.x, x_2031.y, x_2031.z, x_2032.w);
  let x_2034 : vec4<f32> = u_xlat3;
  let x_2036 : vec4<f32> = u_xlat3;
  u_xlat45.x = dot(vec3<f32>(x_2034.x, x_2034.y, x_2034.z), vec3<f32>(x_2036.x, x_2036.y, x_2036.z));
  let x_2041 : f32 = u_xlat45.x;
  u_xlat45.x = inverseSqrt(x_2041);
  let x_2044 : vec2<f32> = u_xlat45;
  let x_2046 : vec4<f32> = u_xlat3;
  let x_2048 : vec3<f32> = (vec3<f32>(x_2044.x, x_2044.x, x_2044.x) * vec3<f32>(x_2046.x, x_2046.y, x_2046.z));
  let x_2049 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2048.x, x_2048.y, x_2048.z, x_2049.w);
  u_xlat3.w = 1.0f;
  let x_2054 : vec4<f32> = x_161.unity_SHAr;
  let x_2055 : vec4<f32> = u_xlat3;
  u_xlat7.x = dot(x_2054, x_2055);
  let x_2060 : vec4<f32> = x_161.unity_SHAg;
  let x_2061 : vec4<f32> = u_xlat3;
  u_xlat7.y = dot(x_2060, x_2061);
  let x_2066 : vec4<f32> = x_161.unity_SHAb;
  let x_2067 : vec4<f32> = u_xlat3;
  u_xlat7.z = dot(x_2066, x_2067);
  let x_2070 : vec4<f32> = u_xlat3;
  let x_2072 : vec4<f32> = u_xlat3;
  u_xlat8 = (vec4<f32>(x_2070.y, x_2070.z, x_2070.z, x_2070.x) * vec4<f32>(x_2072.x, x_2072.y, x_2072.z, x_2072.z));
  let x_2077 : vec4<f32> = x_161.unity_SHBr;
  let x_2078 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_2077, x_2078);
  let x_2083 : vec4<f32> = x_161.unity_SHBg;
  let x_2084 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_2083, x_2084);
  let x_2088 : vec4<f32> = x_161.unity_SHBb;
  let x_2089 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_2088, x_2089);
  let x_2093 : f32 = u_xlat3.y;
  let x_2095 : f32 = u_xlat3.y;
  u_xlat45.x = (x_2093 * x_2095);
  let x_2099 : f32 = u_xlat3.x;
  let x_2101 : f32 = u_xlat3.x;
  let x_2104 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_2099 * x_2101) + -(x_2104));
  let x_2110 : vec4<f32> = x_161.unity_SHC;
  let x_2112 : vec2<f32> = u_xlat45;
  let x_2115 : vec4<f32> = u_xlat9;
  u_xlat27 = ((vec3<f32>(x_2110.x, x_2110.y, x_2110.z) * vec3<f32>(x_2112.x, x_2112.x, x_2112.x)) + vec3<f32>(x_2115.x, x_2115.y, x_2115.z));
  let x_2118 : vec3<f32> = u_xlat27;
  let x_2119 : vec4<f32> = u_xlat7;
  u_xlat27 = (x_2118 + vec3<f32>(x_2119.x, x_2119.y, x_2119.z));
  let x_2122 : vec3<f32> = u_xlat27;
  u_xlat27 = max(x_2122, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2125 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2126 : vec2<f32> = vec2<f32>(x_2125.x, x_2125.y);
  u_xlat45 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2126.x, x_2126.y));
  let x_2131 : vec2<f32> = u_xlat45;
  let x_2132 : vec4<f32> = hlslcc_FragCoord;
  let x_2134 : vec2<f32> = (x_2131 * vec2<f32>(x_2132.x, x_2132.y));
  let x_2135 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2134.x, x_2134.y, x_2135.z, x_2135.w);
  let x_2138 : f32 = u_xlat7.y;
  let x_2141 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2144 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat45.x = ((x_2138 * x_2141) + x_2144);
  let x_2148 : f32 = u_xlat45.x;
  u_xlat7.z = (-(x_2148) + 1.0f);
  let x_2153 : f32 = u_xlat5.x;
  u_xlat5.x = x_2153;
  let x_2156 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2156, 0.0f, 1.0f);
  let x_2160 : f32 = u_xlat1.x;
  u_xlat1.x = x_2160;
  let x_2163 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2163, 0.0f, 1.0f);
  let x_2166 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2166 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2171 : f32 = u_xlat5.x;
  u_xlat45.x = (-(x_2171) + 1.0f);
  let x_2176 : f32 = u_xlat45.x;
  let x_2178 : f32 = u_xlat45.x;
  u_xlat67 = (x_2176 * x_2178);
  let x_2180 : f32 = u_xlat67;
  u_xlat67 = max(x_2180, 0.0078125f);
  let x_2184 : f32 = u_xlat67;
  let x_2185 : f32 = u_xlat67;
  u_xlat69 = (x_2184 * x_2185);
  let x_2188 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2188 + 0.040000021f);
  let x_2193 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2193, 1.0f);
  let x_2196 : f32 = u_xlat67;
  u_xlat72 = ((x_2196 * 4.0f) + 2.0f);
  let x_2204 : vec4<f32> = u_xlat7;
  let x_2207 : f32 = x_90.x_GlobalMipBias.x;
  let x_2208 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2204.x, x_2204.z), x_2207);
  u_xlat7.x = x_2208.x;
  let x_2213 : f32 = u_xlat7.x;
  u_xlat29 = (x_2213 + -1.0f);
  let x_2216 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2217 : f32 = u_xlat29;
  u_xlat29 = ((x_2216 * x_2217) + 1.0f);
  let x_2221 : f32 = u_xlat7.x;
  let x_2223 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2221, x_2223);
  let x_2226 : bool = u_xlatb66;
  if (x_2226) {
    let x_2230 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2230 == 1.0f);
    let x_2232 : bool = u_xlatb66;
    if (x_2232) {
      let x_2235 : vec4<f32> = u_xlat6;
      let x_2238 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2235.x, x_2235.y, x_2235.x, x_2235.y) + x_2238);
      let x_2241 : vec4<f32> = u_xlat8;
      let x_2242 : vec2<f32> = vec2<f32>(x_2241.x, x_2241.y);
      let x_2244 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2242.x, x_2242.y, x_2244);
      let x_2251 : vec3<f32> = txVec30;
      let x_2253 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2251.xy, x_2251.z);
      u_xlat9.x = x_2253;
      let x_2256 : vec4<f32> = u_xlat8;
      let x_2257 : vec2<f32> = vec2<f32>(x_2256.z, x_2256.w);
      let x_2259 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2257.x, x_2257.y, x_2259);
      let x_2266 : vec3<f32> = txVec31;
      let x_2268 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2266.xy, x_2266.z);
      u_xlat9.y = x_2268;
      let x_2270 : vec4<f32> = u_xlat6;
      let x_2273 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2270.x, x_2270.y, x_2270.x, x_2270.y) + x_2273);
      let x_2276 : vec4<f32> = u_xlat8;
      let x_2277 : vec2<f32> = vec2<f32>(x_2276.x, x_2276.y);
      let x_2279 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2277.x, x_2277.y, x_2279);
      let x_2286 : vec3<f32> = txVec32;
      let x_2288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2286.xy, x_2286.z);
      u_xlat9.z = x_2288;
      let x_2291 : vec4<f32> = u_xlat8;
      let x_2292 : vec2<f32> = vec2<f32>(x_2291.z, x_2291.w);
      let x_2294 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2292.x, x_2292.y, x_2294);
      let x_2301 : vec3<f32> = txVec33;
      let x_2303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2301.xy, x_2301.z);
      u_xlat9.w = x_2303;
      let x_2305 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2305, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2310 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb51.x = (x_2310 == 2.0f);
      let x_2314 : bool = u_xlatb51.x;
      if (x_2314) {
        let x_2317 : vec4<f32> = u_xlat6;
        let x_2320 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2317.x, x_2317.y) * vec2<f32>(x_2320.z, x_2320.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2324 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2324);
        let x_2326 : vec4<f32> = u_xlat6;
        let x_2329 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2332 : vec2<f32> = u_xlat51;
        let x_2334 : vec2<f32> = ((vec2<f32>(x_2326.x, x_2326.y) * vec2<f32>(x_2329.z, x_2329.w)) + -(x_2332));
        let x_2335 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2334.x, x_2334.y, x_2335.z, x_2335.w);
        let x_2337 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2337.x, x_2337.x, x_2337.y, x_2337.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2340 : vec4<f32> = u_xlat9;
        let x_2342 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2340.x, x_2340.x, x_2340.z, x_2340.z) * vec4<f32>(x_2342.x, x_2342.x, x_2342.z, x_2342.z));
        let x_2346 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2346.y, x_2346.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2349 : vec4<f32> = u_xlat10;
        let x_2352 : vec4<f32> = u_xlat8;
        let x_2355 : vec2<f32> = ((vec2<f32>(x_2349.x, x_2349.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2352.x, x_2352.y)));
        let x_2356 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2355.x, x_2356.y, x_2355.y, x_2356.w);
        let x_2358 : vec4<f32> = u_xlat8;
        let x_2361 : vec2<f32> = (-(vec2<f32>(x_2358.x, x_2358.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2362 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2361.x, x_2361.y, x_2362.z, x_2362.w);
        let x_2364 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2364.x, x_2364.y), vec2<f32>(0.0f, 0.0f));
        let x_2367 : vec2<f32> = u_xlat54;
        let x_2369 : vec2<f32> = u_xlat54;
        let x_2371 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2367) * x_2369) + vec2<f32>(x_2371.x, x_2371.y));
        let x_2374 : vec4<f32> = u_xlat8;
        let x_2376 : vec2<f32> = max(vec2<f32>(x_2374.x, x_2374.y), vec2<f32>(0.0f, 0.0f));
        let x_2377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2376.x, x_2376.y, x_2377.z, x_2377.w);
        let x_2379 : vec4<f32> = u_xlat8;
        let x_2382 : vec4<f32> = u_xlat8;
        let x_2385 : vec4<f32> = u_xlat9;
        let x_2387 : vec2<f32> = ((-(vec2<f32>(x_2379.x, x_2379.y)) * vec2<f32>(x_2382.x, x_2382.y)) + vec2<f32>(x_2385.y, x_2385.w));
        let x_2388 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2387.x, x_2387.y, x_2388.z, x_2388.w);
        let x_2390 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2390 + vec2<f32>(1.0f, 1.0f));
        let x_2392 : vec4<f32> = u_xlat8;
        let x_2394 : vec2<f32> = (vec2<f32>(x_2392.x, x_2392.y) + vec2<f32>(1.0f, 1.0f));
        let x_2395 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2394.x, x_2394.y, x_2395.z, x_2395.w);
        let x_2397 : vec4<f32> = u_xlat9;
        let x_2399 : vec2<f32> = (vec2<f32>(x_2397.x, x_2397.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2400 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2399.x, x_2399.y, x_2400.z, x_2400.w);
        let x_2402 : vec4<f32> = u_xlat10;
        let x_2404 : vec2<f32> = (vec2<f32>(x_2402.x, x_2402.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2405 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2404.x, x_2404.y, x_2405.z, x_2405.w);
        let x_2407 : vec2<f32> = u_xlat54;
        let x_2408 : vec2<f32> = (x_2407 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2409 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2408.x, x_2408.y, x_2409.z, x_2409.w);
        let x_2411 : vec4<f32> = u_xlat8;
        let x_2413 : vec2<f32> = (vec2<f32>(x_2411.x, x_2411.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2414 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2413.x, x_2413.y, x_2414.z, x_2414.w);
        let x_2416 : vec4<f32> = u_xlat9;
        let x_2418 : vec2<f32> = (vec2<f32>(x_2416.y, x_2416.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2419 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2418.x, x_2418.y, x_2419.z, x_2419.w);
        let x_2422 : f32 = u_xlat10.x;
        u_xlat11.z = x_2422;
        let x_2425 : f32 = u_xlat8.x;
        u_xlat11.w = x_2425;
        let x_2428 : f32 = u_xlat13.x;
        u_xlat12.z = x_2428;
        let x_2431 : f32 = u_xlat52.x;
        u_xlat12.w = x_2431;
        let x_2433 : vec4<f32> = u_xlat11;
        let x_2435 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2433.z, x_2433.w, x_2433.x, x_2433.z) + vec4<f32>(x_2435.z, x_2435.w, x_2435.x, x_2435.z));
        let x_2439 : f32 = u_xlat11.y;
        u_xlat10.z = x_2439;
        let x_2442 : f32 = u_xlat8.y;
        u_xlat10.w = x_2442;
        let x_2445 : f32 = u_xlat12.y;
        u_xlat13.z = x_2445;
        let x_2448 : f32 = u_xlat52.y;
        u_xlat13.w = x_2448;
        let x_2450 : vec4<f32> = u_xlat10;
        let x_2452 : vec4<f32> = u_xlat13;
        let x_2454 : vec3<f32> = (vec3<f32>(x_2450.z, x_2450.y, x_2450.w) + vec3<f32>(x_2452.z, x_2452.y, x_2452.w));
        let x_2455 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2454.x, x_2454.y, x_2454.z, x_2455.w);
        let x_2457 : vec4<f32> = u_xlat12;
        let x_2459 : vec4<f32> = u_xlat9;
        let x_2461 : vec3<f32> = (vec3<f32>(x_2457.x, x_2457.z, x_2457.w) / vec3<f32>(x_2459.z, x_2459.w, x_2459.y));
        let x_2462 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2461.x, x_2461.y, x_2461.z, x_2462.w);
        let x_2464 : vec4<f32> = u_xlat10;
        let x_2466 : vec3<f32> = (vec3<f32>(x_2464.x, x_2464.y, x_2464.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2467 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2466.x, x_2466.y, x_2466.z, x_2467.w);
        let x_2469 : vec4<f32> = u_xlat13;
        let x_2471 : vec4<f32> = u_xlat8;
        let x_2473 : vec3<f32> = (vec3<f32>(x_2469.z, x_2469.y, x_2469.w) / vec3<f32>(x_2471.x, x_2471.y, x_2471.z));
        let x_2474 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2473.x, x_2473.y, x_2473.z, x_2474.w);
        let x_2476 : vec4<f32> = u_xlat11;
        let x_2478 : vec3<f32> = (vec3<f32>(x_2476.x, x_2476.y, x_2476.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2479 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2478.x, x_2478.y, x_2478.z, x_2479.w);
        let x_2481 : vec4<f32> = u_xlat10;
        let x_2484 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2486 : vec3<f32> = (vec3<f32>(x_2481.y, x_2481.x, x_2481.z) * vec3<f32>(x_2484.x, x_2484.x, x_2484.x));
        let x_2487 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2486.x, x_2486.y, x_2486.z, x_2487.w);
        let x_2489 : vec4<f32> = u_xlat11;
        let x_2492 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2494 : vec3<f32> = (vec3<f32>(x_2489.x, x_2489.y, x_2489.z) * vec3<f32>(x_2492.y, x_2492.y, x_2492.y));
        let x_2495 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2494.x, x_2494.y, x_2494.z, x_2495.w);
        let x_2498 : f32 = u_xlat11.x;
        u_xlat10.w = x_2498;
        let x_2500 : vec2<f32> = u_xlat51;
        let x_2503 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2506 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2500.x, x_2500.y, x_2500.x, x_2500.y) * vec4<f32>(x_2503.x, x_2503.y, x_2503.x, x_2503.y)) + vec4<f32>(x_2506.y, x_2506.w, x_2506.x, x_2506.w));
        let x_2509 : vec2<f32> = u_xlat51;
        let x_2511 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2514 : vec4<f32> = u_xlat10;
        let x_2516 : vec2<f32> = ((x_2509 * vec2<f32>(x_2511.x, x_2511.y)) + vec2<f32>(x_2514.z, x_2514.w));
        let x_2517 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2516.x, x_2516.y, x_2517.z, x_2517.w);
        let x_2520 : f32 = u_xlat10.y;
        u_xlat11.w = x_2520;
        let x_2522 : vec4<f32> = u_xlat11;
        let x_2523 : vec2<f32> = vec2<f32>(x_2522.y, x_2522.z);
        let x_2524 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2524.x, x_2523.x, x_2524.z, x_2523.y);
        let x_2526 : vec2<f32> = u_xlat51;
        let x_2529 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2532 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2526.x, x_2526.y, x_2526.x, x_2526.y) * vec4<f32>(x_2529.x, x_2529.y, x_2529.x, x_2529.y)) + vec4<f32>(x_2532.x, x_2532.y, x_2532.z, x_2532.y));
        let x_2535 : vec2<f32> = u_xlat51;
        let x_2538 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2541 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2535.x, x_2535.y, x_2535.x, x_2535.y) * vec4<f32>(x_2538.x, x_2538.y, x_2538.x, x_2538.y)) + vec4<f32>(x_2541.w, x_2541.y, x_2541.w, x_2541.z));
        let x_2544 : vec2<f32> = u_xlat51;
        let x_2547 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2550 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2544.x, x_2544.y, x_2544.x, x_2544.y) * vec4<f32>(x_2547.x, x_2547.y, x_2547.x, x_2547.y)) + vec4<f32>(x_2550.x, x_2550.w, x_2550.z, x_2550.w));
        let x_2553 : vec4<f32> = u_xlat8;
        let x_2555 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2553.x, x_2553.x, x_2553.x, x_2553.y) * vec4<f32>(x_2555.z, x_2555.w, x_2555.y, x_2555.z));
        let x_2558 : vec4<f32> = u_xlat8;
        let x_2560 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2558.y, x_2558.y, x_2558.z, x_2558.z) * x_2560);
        let x_2563 : f32 = u_xlat8.z;
        let x_2565 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2563 * x_2565);
        let x_2569 : vec4<f32> = u_xlat12;
        let x_2570 : vec2<f32> = vec2<f32>(x_2569.x, x_2569.y);
        let x_2572 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2570.x, x_2570.y, x_2572);
        let x_2580 : vec3<f32> = txVec34;
        let x_2582 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2580.xy, x_2580.z);
        u_xlat73 = x_2582;
        let x_2584 : vec4<f32> = u_xlat12;
        let x_2585 : vec2<f32> = vec2<f32>(x_2584.z, x_2584.w);
        let x_2587 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2585.x, x_2585.y, x_2587);
        let x_2594 : vec3<f32> = txVec35;
        let x_2596 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2594.xy, x_2594.z);
        u_xlat8.x = x_2596;
        let x_2599 : f32 = u_xlat8.x;
        let x_2601 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2599 * x_2601);
        let x_2605 : f32 = u_xlat15.x;
        let x_2606 : f32 = u_xlat73;
        let x_2609 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2605 * x_2606) + x_2609);
        let x_2612 : vec4<f32> = u_xlat13;
        let x_2613 : vec2<f32> = vec2<f32>(x_2612.x, x_2612.y);
        let x_2615 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2613.x, x_2613.y, x_2615);
        let x_2622 : vec3<f32> = txVec36;
        let x_2624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2622.xy, x_2622.z);
        u_xlat8.x = x_2624;
        let x_2627 : f32 = u_xlat15.z;
        let x_2629 : f32 = u_xlat8.x;
        let x_2631 : f32 = u_xlat73;
        u_xlat73 = ((x_2627 * x_2629) + x_2631);
        let x_2634 : vec4<f32> = u_xlat11;
        let x_2635 : vec2<f32> = vec2<f32>(x_2634.x, x_2634.y);
        let x_2637 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2635.x, x_2635.y, x_2637);
        let x_2644 : vec3<f32> = txVec37;
        let x_2646 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2644.xy, x_2644.z);
        u_xlat8.x = x_2646;
        let x_2649 : f32 = u_xlat15.w;
        let x_2651 : f32 = u_xlat8.x;
        let x_2653 : f32 = u_xlat73;
        u_xlat73 = ((x_2649 * x_2651) + x_2653);
        let x_2656 : vec4<f32> = u_xlat14;
        let x_2657 : vec2<f32> = vec2<f32>(x_2656.x, x_2656.y);
        let x_2659 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2657.x, x_2657.y, x_2659);
        let x_2666 : vec3<f32> = txVec38;
        let x_2668 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2666.xy, x_2666.z);
        u_xlat8.x = x_2668;
        let x_2671 : f32 = u_xlat16.x;
        let x_2673 : f32 = u_xlat8.x;
        let x_2675 : f32 = u_xlat73;
        u_xlat73 = ((x_2671 * x_2673) + x_2675);
        let x_2678 : vec4<f32> = u_xlat14;
        let x_2679 : vec2<f32> = vec2<f32>(x_2678.z, x_2678.w);
        let x_2681 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2679.x, x_2679.y, x_2681);
        let x_2688 : vec3<f32> = txVec39;
        let x_2690 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2688.xy, x_2688.z);
        u_xlat8.x = x_2690;
        let x_2693 : f32 = u_xlat16.y;
        let x_2695 : f32 = u_xlat8.x;
        let x_2697 : f32 = u_xlat73;
        u_xlat73 = ((x_2693 * x_2695) + x_2697);
        let x_2700 : vec4<f32> = u_xlat11;
        let x_2701 : vec2<f32> = vec2<f32>(x_2700.z, x_2700.w);
        let x_2703 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2701.x, x_2701.y, x_2703);
        let x_2710 : vec3<f32> = txVec40;
        let x_2712 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2710.xy, x_2710.z);
        u_xlat8.x = x_2712;
        let x_2715 : f32 = u_xlat16.z;
        let x_2717 : f32 = u_xlat8.x;
        let x_2719 : f32 = u_xlat73;
        u_xlat73 = ((x_2715 * x_2717) + x_2719);
        let x_2722 : vec4<f32> = u_xlat10;
        let x_2723 : vec2<f32> = vec2<f32>(x_2722.x, x_2722.y);
        let x_2725 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2723.x, x_2723.y, x_2725);
        let x_2732 : vec3<f32> = txVec41;
        let x_2734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2732.xy, x_2732.z);
        u_xlat8.x = x_2734;
        let x_2737 : f32 = u_xlat16.w;
        let x_2739 : f32 = u_xlat8.x;
        let x_2741 : f32 = u_xlat73;
        u_xlat73 = ((x_2737 * x_2739) + x_2741);
        let x_2744 : vec4<f32> = u_xlat10;
        let x_2745 : vec2<f32> = vec2<f32>(x_2744.z, x_2744.w);
        let x_2747 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2745.x, x_2745.y, x_2747);
        let x_2754 : vec3<f32> = txVec42;
        let x_2756 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2754.xy, x_2754.z);
        u_xlat8.x = x_2756;
        let x_2759 : f32 = u_xlat51.x;
        let x_2761 : f32 = u_xlat8.x;
        let x_2763 : f32 = u_xlat73;
        u_xlat66 = ((x_2759 * x_2761) + x_2763);
      } else {
        let x_2766 : vec4<f32> = u_xlat6;
        let x_2769 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2766.x, x_2766.y) * vec2<f32>(x_2769.z, x_2769.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2773 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2773);
        let x_2775 : vec4<f32> = u_xlat6;
        let x_2778 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2781 : vec2<f32> = u_xlat51;
        let x_2783 : vec2<f32> = ((vec2<f32>(x_2775.x, x_2775.y) * vec2<f32>(x_2778.z, x_2778.w)) + -(x_2781));
        let x_2784 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2783.x, x_2783.y, x_2784.z, x_2784.w);
        let x_2786 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2786.x, x_2786.x, x_2786.y, x_2786.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2789 : vec4<f32> = u_xlat9;
        let x_2791 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2789.x, x_2789.x, x_2789.z, x_2789.z) * vec4<f32>(x_2791.x, x_2791.x, x_2791.z, x_2791.z));
        let x_2794 : vec4<f32> = u_xlat10;
        let x_2796 : vec2<f32> = (vec2<f32>(x_2794.y, x_2794.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2797 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2797.x, x_2796.x, x_2797.z, x_2796.y);
        let x_2799 : vec4<f32> = u_xlat10;
        let x_2802 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2799.x, x_2799.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2802.x, x_2802.y)));
        let x_2806 : vec4<f32> = u_xlat8;
        let x_2809 : vec2<f32> = (-(vec2<f32>(x_2806.x, x_2806.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2810 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2809.x, x_2810.y, x_2809.y, x_2810.w);
        let x_2812 : vec4<f32> = u_xlat8;
        let x_2814 : vec2<f32> = min(vec2<f32>(x_2812.x, x_2812.y), vec2<f32>(0.0f, 0.0f));
        let x_2815 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2814.x, x_2814.y, x_2815.z, x_2815.w);
        let x_2817 : vec4<f32> = u_xlat10;
        let x_2820 : vec4<f32> = u_xlat10;
        let x_2823 : vec4<f32> = u_xlat9;
        let x_2825 : vec2<f32> = ((-(vec2<f32>(x_2817.x, x_2817.y)) * vec2<f32>(x_2820.x, x_2820.y)) + vec2<f32>(x_2823.x, x_2823.z));
        let x_2826 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2825.x, x_2826.y, x_2825.y, x_2826.w);
        let x_2828 : vec4<f32> = u_xlat8;
        let x_2830 : vec2<f32> = max(vec2<f32>(x_2828.x, x_2828.y), vec2<f32>(0.0f, 0.0f));
        let x_2831 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2830.x, x_2830.y, x_2831.z, x_2831.w);
        let x_2833 : vec4<f32> = u_xlat10;
        let x_2836 : vec4<f32> = u_xlat10;
        let x_2839 : vec4<f32> = u_xlat9;
        let x_2841 : vec2<f32> = ((-(vec2<f32>(x_2833.x, x_2833.y)) * vec2<f32>(x_2836.x, x_2836.y)) + vec2<f32>(x_2839.y, x_2839.w));
        let x_2842 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2842.x, x_2841.x, x_2842.z, x_2841.y);
        let x_2844 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2844 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2847 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2847 * 0.081632003f);
        let x_2850 : vec2<f32> = u_xlat52;
        let x_2852 : vec2<f32> = (vec2<f32>(x_2850.y, x_2850.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2853 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2852.x, x_2852.y, x_2853.z, x_2853.w);
        let x_2855 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2855.x, x_2855.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2859 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2859 * 0.081632003f);
        let x_2863 : f32 = u_xlat12.y;
        u_xlat10.x = x_2863;
        let x_2865 : vec4<f32> = u_xlat8;
        let x_2868 : vec2<f32> = ((vec2<f32>(x_2865.x, x_2865.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2869 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2869.x, x_2868.x, x_2869.z, x_2868.y);
        let x_2871 : vec4<f32> = u_xlat8;
        let x_2874 : vec2<f32> = ((vec2<f32>(x_2871.x, x_2871.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2875 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2874.x, x_2875.y, x_2874.y, x_2875.w);
        let x_2878 : f32 = u_xlat52.x;
        u_xlat9.y = x_2878;
        let x_2881 : f32 = u_xlat11.y;
        u_xlat9.w = x_2881;
        let x_2883 : vec4<f32> = u_xlat9;
        let x_2884 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2883 + x_2884);
        let x_2886 : vec4<f32> = u_xlat8;
        let x_2889 : vec2<f32> = ((vec2<f32>(x_2886.y, x_2886.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2890 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2890.x, x_2889.x, x_2890.z, x_2889.y);
        let x_2892 : vec4<f32> = u_xlat8;
        let x_2895 : vec2<f32> = ((vec2<f32>(x_2892.y, x_2892.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2896 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2895.x, x_2896.y, x_2895.y, x_2896.w);
        let x_2899 : f32 = u_xlat52.y;
        u_xlat11.y = x_2899;
        let x_2901 : vec4<f32> = u_xlat11;
        let x_2902 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2901 + x_2902);
        let x_2904 : vec4<f32> = u_xlat9;
        let x_2905 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2904 / x_2905);
        let x_2907 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2907 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2909 : vec4<f32> = u_xlat11;
        let x_2910 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2909 / x_2910);
        let x_2912 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2912 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2914 : vec4<f32> = u_xlat9;
        let x_2917 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2914.w, x_2914.x, x_2914.y, x_2914.z) * vec4<f32>(x_2917.x, x_2917.x, x_2917.x, x_2917.x));
        let x_2920 : vec4<f32> = u_xlat11;
        let x_2923 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2920.x, x_2920.w, x_2920.y, x_2920.z) * vec4<f32>(x_2923.y, x_2923.y, x_2923.y, x_2923.y));
        let x_2926 : vec4<f32> = u_xlat9;
        let x_2927 : vec3<f32> = vec3<f32>(x_2926.y, x_2926.z, x_2926.w);
        let x_2928 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2927.x, x_2928.y, x_2927.y, x_2927.z);
        let x_2931 : f32 = u_xlat11.x;
        u_xlat12.y = x_2931;
        let x_2933 : vec2<f32> = u_xlat51;
        let x_2936 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2939 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2933.x, x_2933.y, x_2933.x, x_2933.y) * vec4<f32>(x_2936.x, x_2936.y, x_2936.x, x_2936.y)) + vec4<f32>(x_2939.x, x_2939.y, x_2939.z, x_2939.y));
        let x_2942 : vec2<f32> = u_xlat51;
        let x_2944 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2947 : vec4<f32> = u_xlat12;
        let x_2949 : vec2<f32> = ((x_2942 * vec2<f32>(x_2944.x, x_2944.y)) + vec2<f32>(x_2947.w, x_2947.y));
        let x_2950 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2949.x, x_2949.y, x_2950.z, x_2950.w);
        let x_2953 : f32 = u_xlat12.y;
        u_xlat9.y = x_2953;
        let x_2956 : f32 = u_xlat11.z;
        u_xlat12.y = x_2956;
        let x_2958 : vec2<f32> = u_xlat51;
        let x_2961 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2964 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2958.x, x_2958.y, x_2958.x, x_2958.y) * vec4<f32>(x_2961.x, x_2961.y, x_2961.x, x_2961.y)) + vec4<f32>(x_2964.x, x_2964.y, x_2964.z, x_2964.y));
        let x_2968 : vec2<f32> = u_xlat51;
        let x_2970 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2973 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2968 * vec2<f32>(x_2970.x, x_2970.y)) + vec2<f32>(x_2973.w, x_2973.y));
        let x_2977 : f32 = u_xlat12.y;
        u_xlat9.z = x_2977;
        let x_2979 : vec2<f32> = u_xlat51;
        let x_2982 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2985 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2979.x, x_2979.y, x_2979.x, x_2979.y) * vec4<f32>(x_2982.x, x_2982.y, x_2982.x, x_2982.y)) + vec4<f32>(x_2985.x, x_2985.y, x_2985.x, x_2985.z));
        let x_2989 : f32 = u_xlat11.w;
        u_xlat12.y = x_2989;
        let x_2991 : vec2<f32> = u_xlat51;
        let x_2994 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2997 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2991.x, x_2991.y, x_2991.x, x_2991.y) * vec4<f32>(x_2994.x, x_2994.y, x_2994.x, x_2994.y)) + vec4<f32>(x_2997.x, x_2997.y, x_2997.z, x_2997.y));
        let x_3000 : vec2<f32> = u_xlat51;
        let x_3002 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3005 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_3000 * vec2<f32>(x_3002.x, x_3002.y)) + vec2<f32>(x_3005.w, x_3005.y));
        let x_3009 : f32 = u_xlat12.y;
        u_xlat9.w = x_3009;
        let x_3011 : vec2<f32> = u_xlat51;
        let x_3013 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3016 : vec4<f32> = u_xlat9;
        let x_3018 : vec2<f32> = ((x_3011 * vec2<f32>(x_3013.x, x_3013.y)) + vec2<f32>(x_3016.x, x_3016.w));
        let x_3019 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_3018.x, x_3018.y, x_3019.z, x_3019.w);
        let x_3021 : vec4<f32> = u_xlat12;
        let x_3022 : vec3<f32> = vec3<f32>(x_3021.x, x_3021.z, x_3021.w);
        let x_3023 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3022.x, x_3023.y, x_3022.y, x_3022.z);
        let x_3025 : vec2<f32> = u_xlat51;
        let x_3028 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3031 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_3025.x, x_3025.y, x_3025.x, x_3025.y) * vec4<f32>(x_3028.x, x_3028.y, x_3028.x, x_3028.y)) + vec4<f32>(x_3031.x, x_3031.y, x_3031.z, x_3031.y));
        let x_3035 : vec2<f32> = u_xlat51;
        let x_3037 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3040 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_3035 * vec2<f32>(x_3037.x, x_3037.y)) + vec2<f32>(x_3040.w, x_3040.y));
        let x_3044 : f32 = u_xlat9.x;
        u_xlat11.x = x_3044;
        let x_3046 : vec2<f32> = u_xlat51;
        let x_3048 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3051 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_3046 * vec2<f32>(x_3048.x, x_3048.y)) + vec2<f32>(x_3051.x, x_3051.y));
        let x_3054 : vec4<f32> = u_xlat8;
        let x_3056 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_3054.x, x_3054.x, x_3054.x, x_3054.x) * x_3056);
        let x_3058 : vec4<f32> = u_xlat8;
        let x_3060 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_3058.y, x_3058.y, x_3058.y, x_3058.y) * x_3060);
        let x_3063 : vec4<f32> = u_xlat8;
        let x_3065 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_3063.z, x_3063.z, x_3063.z, x_3063.z) * x_3065);
        let x_3067 : vec4<f32> = u_xlat8;
        let x_3069 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_3067.w, x_3067.w, x_3067.w, x_3067.w) * x_3069);
        let x_3072 : vec4<f32> = u_xlat13;
        let x_3073 : vec2<f32> = vec2<f32>(x_3072.x, x_3072.y);
        let x_3075 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3073.x, x_3073.y, x_3075);
        let x_3082 : vec3<f32> = txVec43;
        let x_3084 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3082.xy, x_3082.z);
        u_xlat9.x = x_3084;
        let x_3087 : vec4<f32> = u_xlat13;
        let x_3088 : vec2<f32> = vec2<f32>(x_3087.z, x_3087.w);
        let x_3090 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3088.x, x_3088.y, x_3090);
        let x_3098 : vec3<f32> = txVec44;
        let x_3100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3098.xy, x_3098.z);
        u_xlat75 = x_3100;
        let x_3101 : f32 = u_xlat75;
        let x_3103 : f32 = u_xlat19.y;
        u_xlat75 = (x_3101 * x_3103);
        let x_3106 : f32 = u_xlat19.x;
        let x_3108 : f32 = u_xlat9.x;
        let x_3110 : f32 = u_xlat75;
        u_xlat9.x = ((x_3106 * x_3108) + x_3110);
        let x_3114 : vec4<f32> = u_xlat14;
        let x_3115 : vec2<f32> = vec2<f32>(x_3114.x, x_3114.y);
        let x_3117 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3115.x, x_3115.y, x_3117);
        let x_3124 : vec3<f32> = txVec45;
        let x_3126 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3124.xy, x_3124.z);
        u_xlat75 = x_3126;
        let x_3128 : f32 = u_xlat19.z;
        let x_3129 : f32 = u_xlat75;
        let x_3132 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3128 * x_3129) + x_3132);
        let x_3136 : vec4<f32> = u_xlat16;
        let x_3137 : vec2<f32> = vec2<f32>(x_3136.x, x_3136.y);
        let x_3139 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3137.x, x_3137.y, x_3139);
        let x_3146 : vec3<f32> = txVec46;
        let x_3148 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3146.xy, x_3146.z);
        u_xlat75 = x_3148;
        let x_3150 : f32 = u_xlat19.w;
        let x_3151 : f32 = u_xlat75;
        let x_3154 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3150 * x_3151) + x_3154);
        let x_3158 : vec4<f32> = u_xlat15;
        let x_3159 : vec2<f32> = vec2<f32>(x_3158.x, x_3158.y);
        let x_3161 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3159.x, x_3159.y, x_3161);
        let x_3168 : vec3<f32> = txVec47;
        let x_3170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3168.xy, x_3168.z);
        u_xlat75 = x_3170;
        let x_3172 : f32 = u_xlat20.x;
        let x_3173 : f32 = u_xlat75;
        let x_3176 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3172 * x_3173) + x_3176);
        let x_3180 : vec4<f32> = u_xlat15;
        let x_3181 : vec2<f32> = vec2<f32>(x_3180.z, x_3180.w);
        let x_3183 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3181.x, x_3181.y, x_3183);
        let x_3190 : vec3<f32> = txVec48;
        let x_3192 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3190.xy, x_3190.z);
        u_xlat75 = x_3192;
        let x_3194 : f32 = u_xlat20.y;
        let x_3195 : f32 = u_xlat75;
        let x_3198 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3194 * x_3195) + x_3198);
        let x_3202 : vec2<f32> = u_xlat58;
        let x_3204 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3202.x, x_3202.y, x_3204);
        let x_3211 : vec3<f32> = txVec49;
        let x_3213 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3211.xy, x_3211.z);
        u_xlat75 = x_3213;
        let x_3215 : f32 = u_xlat20.z;
        let x_3216 : f32 = u_xlat75;
        let x_3219 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3215 * x_3216) + x_3219);
        let x_3223 : vec4<f32> = u_xlat16;
        let x_3224 : vec2<f32> = vec2<f32>(x_3223.z, x_3223.w);
        let x_3226 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3224.x, x_3224.y, x_3226);
        let x_3233 : vec3<f32> = txVec50;
        let x_3235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3233.xy, x_3233.z);
        u_xlat75 = x_3235;
        let x_3237 : f32 = u_xlat20.w;
        let x_3238 : f32 = u_xlat75;
        let x_3241 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3237 * x_3238) + x_3241);
        let x_3245 : vec4<f32> = u_xlat17;
        let x_3246 : vec2<f32> = vec2<f32>(x_3245.x, x_3245.y);
        let x_3248 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3246.x, x_3246.y, x_3248);
        let x_3255 : vec3<f32> = txVec51;
        let x_3257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3255.xy, x_3255.z);
        u_xlat75 = x_3257;
        let x_3259 : f32 = u_xlat21.x;
        let x_3260 : f32 = u_xlat75;
        let x_3263 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3259 * x_3260) + x_3263);
        let x_3267 : vec4<f32> = u_xlat17;
        let x_3268 : vec2<f32> = vec2<f32>(x_3267.z, x_3267.w);
        let x_3270 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3268.x, x_3268.y, x_3270);
        let x_3277 : vec3<f32> = txVec52;
        let x_3279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3277.xy, x_3277.z);
        u_xlat75 = x_3279;
        let x_3281 : f32 = u_xlat21.y;
        let x_3282 : f32 = u_xlat75;
        let x_3285 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3281 * x_3282) + x_3285);
        let x_3289 : vec2<f32> = u_xlat31;
        let x_3291 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3289.x, x_3289.y, x_3291);
        let x_3298 : vec3<f32> = txVec53;
        let x_3300 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3298.xy, x_3298.z);
        u_xlat31.x = x_3300;
        let x_3303 : f32 = u_xlat21.z;
        let x_3305 : f32 = u_xlat31.x;
        let x_3308 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3303 * x_3305) + x_3308);
        let x_3312 : vec4<f32> = u_xlat18;
        let x_3313 : vec2<f32> = vec2<f32>(x_3312.x, x_3312.y);
        let x_3315 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3313.x, x_3313.y, x_3315);
        let x_3322 : vec3<f32> = txVec54;
        let x_3324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3322.xy, x_3322.z);
        u_xlat31.x = x_3324;
        let x_3327 : f32 = u_xlat21.w;
        let x_3329 : f32 = u_xlat31.x;
        let x_3332 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3327 * x_3329) + x_3332);
        let x_3336 : vec4<f32> = u_xlat12;
        let x_3337 : vec2<f32> = vec2<f32>(x_3336.x, x_3336.y);
        let x_3339 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3337.x, x_3337.y, x_3339);
        let x_3346 : vec3<f32> = txVec55;
        let x_3348 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3346.xy, x_3346.z);
        u_xlat31.x = x_3348;
        let x_3351 : f32 = u_xlat8.x;
        let x_3353 : f32 = u_xlat31.x;
        let x_3356 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3351 * x_3353) + x_3356);
        let x_3360 : vec4<f32> = u_xlat12;
        let x_3361 : vec2<f32> = vec2<f32>(x_3360.z, x_3360.w);
        let x_3363 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3361.x, x_3361.y, x_3363);
        let x_3370 : vec3<f32> = txVec56;
        let x_3372 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3370.xy, x_3370.z);
        u_xlat9.x = x_3372;
        let x_3375 : f32 = u_xlat8.y;
        let x_3377 : f32 = u_xlat9.x;
        let x_3380 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3375 * x_3377) + x_3380);
        let x_3384 : vec2<f32> = u_xlat55;
        let x_3386 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3384.x, x_3384.y, x_3386);
        let x_3393 : vec3<f32> = txVec57;
        let x_3395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3393.xy, x_3393.z);
        u_xlat30.x = x_3395;
        let x_3398 : f32 = u_xlat8.z;
        let x_3400 : f32 = u_xlat30.x;
        let x_3403 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3398 * x_3400) + x_3403);
        let x_3407 : vec2<f32> = u_xlat51;
        let x_3409 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3407.x, x_3407.y, x_3409);
        let x_3416 : vec3<f32> = txVec58;
        let x_3418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3416.xy, x_3416.z);
        u_xlat51.x = x_3418;
        let x_3421 : f32 = u_xlat8.w;
        let x_3423 : f32 = u_xlat51.x;
        let x_3426 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3421 * x_3423) + x_3426);
      }
    }
  } else {
    let x_3430 : vec4<f32> = u_xlat6;
    let x_3431 : vec2<f32> = vec2<f32>(x_3430.x, x_3430.y);
    let x_3433 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3431.x, x_3431.y, x_3433);
    let x_3440 : vec3<f32> = txVec59;
    let x_3442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3440.xy, x_3440.z);
    u_xlat66 = x_3442;
  }
  let x_3443 : f32 = u_xlat66;
  let x_3445 : f32 = x_271.x_MainLightShadowParams.x;
  let x_3447 : f32 = u_xlat68;
  u_xlat66 = ((x_3443 * x_3445) + x_3447);
  let x_3449 : bool = u_xlatb70;
  let x_3450 : f32 = u_xlat66;
  u_xlat66 = select(x_3450, 1.0f, x_3449);
  let x_3452 : vec3<f32> = vs_INTERP0;
  let x_3454 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3456 : vec3<f32> = (x_3452 + -(x_3454));
  let x_3457 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3456.x, x_3456.y, x_3456.z, x_3457.w);
  let x_3459 : vec4<f32> = u_xlat6;
  let x_3461 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3459.x, x_3459.y, x_3459.z), vec3<f32>(x_3461.x, x_3461.y, x_3461.z));
  let x_3464 : f32 = u_xlat68;
  let x_3466 : f32 = x_271.x_MainLightShadowParams.z;
  let x_3469 : f32 = x_271.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3464 * x_3466) + x_3469);
  let x_3471 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3471, 0.0f, 1.0f);
  let x_3473 : f32 = u_xlat66;
  u_xlat70 = (-(x_3473) + 1.0f);
  let x_3476 : f32 = u_xlat68;
  let x_3477 : f32 = u_xlat70;
  let x_3479 : f32 = u_xlat66;
  u_xlat66 = ((x_3476 * x_3477) + x_3479);
  let x_3487 : f32 = x_3485.x_MainLightCookieTextureFormat;
  u_xlatb68 = !((x_3487 == -1.0f));
  let x_3489 : bool = u_xlatb68;
  if (x_3489) {
    let x_3492 : vec3<f32> = vs_INTERP0;
    let x_3495 : vec4<f32> = x_3485.x_MainLightWorldToLight[1i];
    let x_3497 : vec2<f32> = (vec2<f32>(x_3492.y, x_3492.y) * vec2<f32>(x_3495.x, x_3495.y));
    let x_3498 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3497.x, x_3497.y, x_3498.z, x_3498.w);
    let x_3501 : vec4<f32> = x_3485.x_MainLightWorldToLight[0i];
    let x_3503 : vec3<f32> = vs_INTERP0;
    let x_3506 : vec4<f32> = u_xlat6;
    let x_3508 : vec2<f32> = ((vec2<f32>(x_3501.x, x_3501.y) * vec2<f32>(x_3503.x, x_3503.x)) + vec2<f32>(x_3506.x, x_3506.y));
    let x_3509 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3508.x, x_3508.y, x_3509.z, x_3509.w);
    let x_3512 : vec4<f32> = x_3485.x_MainLightWorldToLight[2i];
    let x_3514 : vec3<f32> = vs_INTERP0;
    let x_3517 : vec4<f32> = u_xlat6;
    let x_3519 : vec2<f32> = ((vec2<f32>(x_3512.x, x_3512.y) * vec2<f32>(x_3514.z, x_3514.z)) + vec2<f32>(x_3517.x, x_3517.y));
    let x_3520 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3519.x, x_3519.y, x_3520.z, x_3520.w);
    let x_3522 : vec4<f32> = u_xlat6;
    let x_3525 : vec4<f32> = x_3485.x_MainLightWorldToLight[3i];
    let x_3527 : vec2<f32> = (vec2<f32>(x_3522.x, x_3522.y) + vec2<f32>(x_3525.x, x_3525.y));
    let x_3528 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3527.x, x_3527.y, x_3528.z, x_3528.w);
    let x_3530 : vec4<f32> = u_xlat6;
    let x_3533 : vec2<f32> = ((vec2<f32>(x_3530.x, x_3530.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3534 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3533.x, x_3533.y, x_3534.z, x_3534.w);
    let x_3541 : vec4<f32> = u_xlat6;
    let x_3544 : f32 = x_90.x_GlobalMipBias.x;
    let x_3545 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3541.x, x_3541.y), x_3544);
    u_xlat8 = x_3545;
    let x_3547 : f32 = x_3485.x_MainLightCookieTextureFormat;
    let x_3549 : f32 = x_3485.x_MainLightCookieTextureFormat;
    let x_3551 : f32 = x_3485.x_MainLightCookieTextureFormat;
    let x_3553 : f32 = x_3485.x_MainLightCookieTextureFormat;
    let x_3554 : vec4<f32> = vec4<f32>(x_3547, x_3549, x_3551, x_3553);
    let x_3561 : vec4<bool> = (vec4<f32>(x_3554.x, x_3554.y, x_3554.z, x_3554.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    let x_3562 : vec2<bool> = vec2<bool>(x_3561.x, x_3561.y);
    let x_3563 : vec4<bool> = u_xlatb6;
    u_xlatb6 = vec4<bool>(x_3562.x, x_3562.y, x_3563.z, x_3563.w);
    let x_3566 : bool = u_xlatb6.y;
    if (x_3566) {
      let x_3571 : f32 = u_xlat8.w;
      x_3567 = x_3571;
    } else {
      let x_3574 : f32 = u_xlat8.x;
      x_3567 = x_3574;
    }
    let x_3575 : f32 = x_3567;
    u_xlat68 = x_3575;
    let x_3577 : bool = u_xlatb6.x;
    if (x_3577) {
      let x_3581 : vec4<f32> = u_xlat8;
      x_3578 = vec3<f32>(x_3581.x, x_3581.y, x_3581.z);
    } else {
      let x_3584 : f32 = u_xlat68;
      x_3578 = vec3<f32>(x_3584, x_3584, x_3584);
    }
    let x_3586 : vec3<f32> = x_3578;
    let x_3587 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3586.x, x_3586.y, x_3586.z, x_3587.w);
  } else {
    u_xlat6.x = 1.0f;
    u_xlat6.y = 1.0f;
    u_xlat6.z = 1.0f;
  }
  let x_3593 : vec4<f32> = u_xlat6;
  let x_3596 : vec4<f32> = x_90.x_MainLightColor;
  let x_3598 : vec3<f32> = (vec3<f32>(x_3593.x, x_3593.y, x_3593.z) * vec3<f32>(x_3596.x, x_3596.y, x_3596.z));
  let x_3599 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3598.x, x_3598.y, x_3598.z, x_3599.w);
  let x_3601 : f32 = u_xlat29;
  let x_3603 : vec4<f32> = u_xlat6;
  let x_3605 : vec3<f32> = (vec3<f32>(x_3601, x_3601, x_3601) * vec3<f32>(x_3603.x, x_3603.y, x_3603.z));
  let x_3606 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3605.x, x_3605.y, x_3605.z, x_3606.w);
  let x_3608 : vec3<f32> = u_xlat2;
  let x_3610 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3608), vec3<f32>(x_3610.x, x_3610.y, x_3610.z));
  let x_3613 : f32 = u_xlat68;
  let x_3614 : f32 = u_xlat68;
  u_xlat68 = (x_3613 + x_3614);
  let x_3616 : vec4<f32> = u_xlat3;
  let x_3618 : f32 = u_xlat68;
  let x_3622 : vec3<f32> = u_xlat2;
  let x_3624 : vec3<f32> = ((vec3<f32>(x_3616.x, x_3616.y, x_3616.z) * -(vec3<f32>(x_3618, x_3618, x_3618))) + -(x_3622));
  let x_3625 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3624.x, x_3624.y, x_3624.z, x_3625.w);
  let x_3627 : vec4<f32> = u_xlat3;
  let x_3629 : vec3<f32> = u_xlat2;
  u_xlat68 = dot(vec3<f32>(x_3627.x, x_3627.y, x_3627.z), x_3629);
  let x_3631 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3631, 0.0f, 1.0f);
  let x_3633 : f32 = u_xlat68;
  u_xlat68 = (-(x_3633) + 1.0f);
  let x_3636 : f32 = u_xlat68;
  let x_3637 : f32 = u_xlat68;
  u_xlat68 = (x_3636 * x_3637);
  let x_3639 : f32 = u_xlat68;
  let x_3640 : f32 = u_xlat68;
  u_xlat68 = (x_3639 * x_3640);
  let x_3643 : f32 = u_xlat45.x;
  u_xlat70 = ((-(x_3643) * 0.699999988f) + 1.700000048f);
  let x_3650 : f32 = u_xlat45.x;
  let x_3651 : f32 = u_xlat70;
  u_xlat45.x = (x_3650 * x_3651);
  let x_3655 : f32 = u_xlat45.x;
  u_xlat45.x = (x_3655 * 6.0f);
  let x_3667 : vec4<f32> = u_xlat8;
  let x_3670 : f32 = u_xlat45.x;
  let x_3671 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3667.x, x_3667.y, x_3667.z), x_3670);
  u_xlat8 = x_3671;
  let x_3673 : f32 = u_xlat8.w;
  u_xlat45.x = (x_3673 + -1.0f);
  let x_3677 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3679 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_3677 * x_3679) + 1.0f);
  let x_3684 : f32 = u_xlat45.x;
  u_xlat45.x = max(x_3684, 0.0f);
  let x_3688 : f32 = u_xlat45.x;
  u_xlat45.x = log2(x_3688);
  let x_3692 : f32 = u_xlat45.x;
  let x_3694 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat45.x = (x_3692 * x_3694);
  let x_3698 : f32 = u_xlat45.x;
  u_xlat45.x = exp2(x_3698);
  let x_3702 : f32 = u_xlat45.x;
  let x_3704 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat45.x = (x_3702 * x_3704);
  let x_3707 : vec4<f32> = u_xlat8;
  let x_3709 : vec2<f32> = u_xlat45;
  let x_3711 : vec3<f32> = (vec3<f32>(x_3707.x, x_3707.y, x_3707.z) * vec3<f32>(x_3709.x, x_3709.x, x_3709.x));
  let x_3712 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3711.x, x_3711.y, x_3711.z, x_3712.w);
  let x_3714 : f32 = u_xlat67;
  let x_3716 : f32 = u_xlat67;
  u_xlat45 = ((vec2<f32>(x_3714, x_3714) * vec2<f32>(x_3716, x_3716)) + vec2<f32>(-1.0f, 1.0f));
  let x_3722 : f32 = u_xlat45.y;
  u_xlat67 = (1.0f / x_3722);
  let x_3725 : f32 = u_xlat5.x;
  u_xlat70 = (x_3725 + -0.039999999f);
  let x_3728 : f32 = u_xlat68;
  let x_3729 : f32 = u_xlat70;
  u_xlat68 = ((x_3728 * x_3729) + 0.039999999f);
  let x_3733 : f32 = u_xlat67;
  let x_3734 : f32 = u_xlat68;
  u_xlat67 = (x_3733 * x_3734);
  let x_3736 : f32 = u_xlat67;
  let x_3738 : vec4<f32> = u_xlat8;
  let x_3740 : vec3<f32> = (vec3<f32>(x_3736, x_3736, x_3736) * vec3<f32>(x_3738.x, x_3738.y, x_3738.z));
  let x_3741 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3740.x, x_3740.y, x_3740.z, x_3741.w);
  let x_3743 : vec3<f32> = u_xlat27;
  let x_3744 : vec3<f32> = u_xlat4;
  let x_3746 : vec4<f32> = u_xlat8;
  let x_3748 : vec3<f32> = ((x_3743 * x_3744) + vec3<f32>(x_3746.x, x_3746.y, x_3746.z));
  let x_3749 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3748.x, x_3748.y, x_3748.z, x_3749.w);
  let x_3751 : f32 = u_xlat66;
  let x_3753 : f32 = x_161.unity_LightData.z;
  u_xlat66 = (x_3751 * x_3753);
  let x_3755 : vec4<f32> = u_xlat3;
  let x_3758 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3755.x, x_3755.y, x_3755.z), vec3<f32>(x_3758.x, x_3758.y, x_3758.z));
  let x_3761 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3761, 0.0f, 1.0f);
  let x_3763 : f32 = u_xlat66;
  let x_3764 : f32 = u_xlat67;
  u_xlat66 = (x_3763 * x_3764);
  let x_3766 : f32 = u_xlat66;
  let x_3768 : vec4<f32> = u_xlat6;
  let x_3770 : vec3<f32> = (vec3<f32>(x_3766, x_3766, x_3766) * vec3<f32>(x_3768.x, x_3768.y, x_3768.z));
  let x_3771 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3770.x, x_3770.y, x_3770.z, x_3771.w);
  let x_3773 : vec3<f32> = u_xlat2;
  let x_3775 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3777 : vec3<f32> = (x_3773 + vec3<f32>(x_3775.x, x_3775.y, x_3775.z));
  let x_3778 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3777.x, x_3777.y, x_3777.z, x_3778.w);
  let x_3780 : vec4<f32> = u_xlat8;
  let x_3782 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3780.x, x_3780.y, x_3780.z), vec3<f32>(x_3782.x, x_3782.y, x_3782.z));
  let x_3785 : f32 = u_xlat66;
  u_xlat66 = max(x_3785, 1.17549435e-37f);
  let x_3788 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3788);
  let x_3790 : f32 = u_xlat66;
  let x_3792 : vec4<f32> = u_xlat8;
  let x_3794 : vec3<f32> = (vec3<f32>(x_3790, x_3790, x_3790) * vec3<f32>(x_3792.x, x_3792.y, x_3792.z));
  let x_3795 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3794.x, x_3794.y, x_3794.z, x_3795.w);
  let x_3797 : vec4<f32> = u_xlat3;
  let x_3799 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3797.x, x_3797.y, x_3797.z), vec3<f32>(x_3799.x, x_3799.y, x_3799.z));
  let x_3802 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3802, 0.0f, 1.0f);
  let x_3805 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3807 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3805.x, x_3805.y, x_3805.z), vec3<f32>(x_3807.x, x_3807.y, x_3807.z));
  let x_3810 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3810, 0.0f, 1.0f);
  let x_3812 : f32 = u_xlat66;
  let x_3813 : f32 = u_xlat66;
  u_xlat66 = (x_3812 * x_3813);
  let x_3815 : f32 = u_xlat66;
  let x_3817 : f32 = u_xlat45.x;
  u_xlat66 = ((x_3815 * x_3817) + 1.000010014f);
  let x_3821 : f32 = u_xlat67;
  let x_3822 : f32 = u_xlat67;
  u_xlat67 = (x_3821 * x_3822);
  let x_3824 : f32 = u_xlat66;
  let x_3825 : f32 = u_xlat66;
  u_xlat66 = (x_3824 * x_3825);
  let x_3827 : f32 = u_xlat67;
  u_xlat67 = max(x_3827, 0.100000001f);
  let x_3830 : f32 = u_xlat66;
  let x_3831 : f32 = u_xlat67;
  u_xlat66 = (x_3830 * x_3831);
  let x_3833 : f32 = u_xlat72;
  let x_3834 : f32 = u_xlat66;
  u_xlat66 = (x_3833 * x_3834);
  let x_3836 : f32 = u_xlat69;
  let x_3837 : f32 = u_xlat66;
  u_xlat66 = (x_3836 / x_3837);
  let x_3839 : f32 = u_xlat66;
  let x_3843 : vec3<f32> = u_xlat4;
  let x_3844 : vec3<f32> = ((vec3<f32>(x_3839, x_3839, x_3839) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3843);
  let x_3845 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3844.x, x_3844.y, x_3844.z, x_3845.w);
  let x_3847 : vec4<f32> = u_xlat6;
  let x_3849 : vec4<f32> = u_xlat8;
  let x_3851 : vec3<f32> = (vec3<f32>(x_3847.x, x_3847.y, x_3847.z) * vec3<f32>(x_3849.x, x_3849.y, x_3849.z));
  let x_3852 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3851.x, x_3851.y, x_3851.z, x_3852.w);
  let x_3855 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3857 : f32 = x_161.unity_LightData.y;
  u_xlat66 = min(x_3855, x_3857);
  let x_3859 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3859));
  let x_3863 : f32 = x_3485.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3865 : f32 = x_3485.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3867 : f32 = x_3485.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3869 : f32 = x_3485.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3870 : vec4<f32> = vec4<f32>(x_3863, x_3865, x_3867, x_3869);
  let x_3877 : vec4<bool> = (vec4<f32>(x_3870.x, x_3870.y, x_3870.z, x_3870.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb51 = vec2<bool>(x_3877.x, x_3877.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3888 : u32 = u_xlatu_loop_1;
    let x_3889 : u32 = u_xlatu66;
    if ((x_3888 < x_3889)) {
    } else {
      break;
    }
    let x_3892 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3892 >> 2u);
    let x_3895 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3895 & 3u));
    let x_3898 : u32 = u_xlatu68;
    let x_3901 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3898)];
    let x_3911 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3916 : vec4<u32> = indexable[x_3911];
    u_xlat68 = dot(x_3901, bitcast<vec4<f32>>(x_3916));
    let x_3919 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3919));
    let x_3922 : vec3<f32> = vs_INTERP0;
    let x_3934 : u32 = u_xlatu68;
    let x_3937 : vec4<f32> = x_3933.x_AdditionalLightsPosition[bitcast<i32>(x_3934)];
    let x_3940 : u32 = u_xlatu68;
    let x_3943 : vec4<f32> = x_3933.x_AdditionalLightsPosition[bitcast<i32>(x_3940)];
    let x_3945 : vec3<f32> = ((-(x_3922) * vec3<f32>(x_3937.w, x_3937.w, x_3937.w)) + vec3<f32>(x_3943.x, x_3943.y, x_3943.z));
    let x_3946 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3945.x, x_3945.y, x_3945.z, x_3946.w);
    let x_3948 : vec4<f32> = u_xlat9;
    let x_3950 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3948.x, x_3948.y, x_3948.z), vec3<f32>(x_3950.x, x_3950.y, x_3950.z));
    let x_3953 : f32 = u_xlat70;
    u_xlat70 = max(x_3953, 6.10351562e-05f);
    let x_3957 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3957);
    let x_3959 : f32 = u_xlat71;
    let x_3961 : vec4<f32> = u_xlat9;
    let x_3963 : vec3<f32> = (vec3<f32>(x_3959, x_3959, x_3959) * vec3<f32>(x_3961.x, x_3961.y, x_3961.z));
    let x_3964 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3963.x, x_3963.y, x_3963.z, x_3964.w);
    let x_3967 : f32 = u_xlat70;
    u_xlat74 = (1.0f / x_3967);
    let x_3969 : f32 = u_xlat70;
    let x_3970 : u32 = u_xlatu68;
    let x_3973 : f32 = x_3933.x_AdditionalLightsAttenuation[bitcast<i32>(x_3970)].x;
    u_xlat70 = (x_3969 * x_3973);
    let x_3975 : f32 = u_xlat70;
    let x_3977 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3975) * x_3977) + 1.0f);
    let x_3980 : f32 = u_xlat70;
    u_xlat70 = max(x_3980, 0.0f);
    let x_3982 : f32 = u_xlat70;
    let x_3983 : f32 = u_xlat70;
    u_xlat70 = (x_3982 * x_3983);
    let x_3985 : f32 = u_xlat70;
    let x_3986 : f32 = u_xlat74;
    u_xlat70 = (x_3985 * x_3986);
    let x_3988 : u32 = u_xlatu68;
    let x_3991 : vec4<f32> = x_3933.x_AdditionalLightsSpotDir[bitcast<i32>(x_3988)];
    let x_3993 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3991.x, x_3991.y, x_3991.z), vec3<f32>(x_3993.x, x_3993.y, x_3993.z));
    let x_3996 : f32 = u_xlat74;
    let x_3997 : u32 = u_xlatu68;
    let x_4000 : f32 = x_3933.x_AdditionalLightsAttenuation[bitcast<i32>(x_3997)].z;
    let x_4002 : u32 = u_xlatu68;
    let x_4005 : f32 = x_3933.x_AdditionalLightsAttenuation[bitcast<i32>(x_4002)].w;
    u_xlat74 = ((x_3996 * x_4000) + x_4005);
    let x_4007 : f32 = u_xlat74;
    u_xlat74 = clamp(x_4007, 0.0f, 1.0f);
    let x_4009 : f32 = u_xlat74;
    let x_4010 : f32 = u_xlat74;
    u_xlat74 = (x_4009 * x_4010);
    let x_4012 : f32 = u_xlat70;
    let x_4013 : f32 = u_xlat74;
    u_xlat70 = (x_4012 * x_4013);
    let x_4016 : u32 = u_xlatu68;
    u_xlatu74 = (x_4016 >> 5u);
    let x_4019 : u32 = u_xlatu68;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_4019) & 31i)));
    let x_4025 : i32 = u_xlati75;
    let x_4027 : u32 = u_xlatu74;
    let x_4030 : f32 = x_3485.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4027)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_4025) & bitcast<u32>(x_4030)));
    let x_4034 : i32 = u_xlati74;
    if ((x_4034 != 0i)) {
      let x_4044 : u32 = u_xlatu68;
      let x_4047 : f32 = x_4043.x_AdditionalLightsLightTypes[bitcast<i32>(x_4044)].el;
      u_xlati74 = i32(x_4047);
      let x_4049 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4049 != 0i));
      let x_4053 : u32 = u_xlatu68;
      u_xlati76 = (bitcast<i32>(x_4053) << bitcast<u32>(2i));
      let x_4056 : i32 = u_xlati75;
      if ((x_4056 != 0i)) {
        let x_4060 : vec3<f32> = vs_INTERP0;
        let x_4062 : i32 = u_xlati76;
        let x_4065 : i32 = u_xlati76;
        let x_4069 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4062 + 1i) / 4i)][((x_4065 + 1i) % 4i)];
        let x_4071 : vec3<f32> = (vec3<f32>(x_4060.y, x_4060.y, x_4060.y) * vec3<f32>(x_4069.x, x_4069.y, x_4069.w));
        let x_4072 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4071.x, x_4071.y, x_4071.z, x_4072.w);
        let x_4074 : i32 = u_xlati76;
        let x_4076 : i32 = u_xlati76;
        let x_4079 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[(x_4074 / 4i)][(x_4076 % 4i)];
        let x_4081 : vec3<f32> = vs_INTERP0;
        let x_4084 : vec4<f32> = u_xlat11;
        let x_4086 : vec3<f32> = ((vec3<f32>(x_4079.x, x_4079.y, x_4079.w) * vec3<f32>(x_4081.x, x_4081.x, x_4081.x)) + vec3<f32>(x_4084.x, x_4084.y, x_4084.z));
        let x_4087 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4086.x, x_4086.y, x_4086.z, x_4087.w);
        let x_4089 : i32 = u_xlati76;
        let x_4092 : i32 = u_xlati76;
        let x_4096 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4089 + 2i) / 4i)][((x_4092 + 2i) % 4i)];
        let x_4098 : vec3<f32> = vs_INTERP0;
        let x_4101 : vec4<f32> = u_xlat11;
        let x_4103 : vec3<f32> = ((vec3<f32>(x_4096.x, x_4096.y, x_4096.w) * vec3<f32>(x_4098.z, x_4098.z, x_4098.z)) + vec3<f32>(x_4101.x, x_4101.y, x_4101.z));
        let x_4104 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4103.x, x_4103.y, x_4103.z, x_4104.w);
        let x_4106 : vec4<f32> = u_xlat11;
        let x_4108 : i32 = u_xlati76;
        let x_4111 : i32 = u_xlati76;
        let x_4115 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4108 + 3i) / 4i)][((x_4111 + 3i) % 4i)];
        let x_4117 : vec3<f32> = (vec3<f32>(x_4106.x, x_4106.y, x_4106.z) + vec3<f32>(x_4115.x, x_4115.y, x_4115.w));
        let x_4118 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4117.x, x_4117.y, x_4117.z, x_4118.w);
        let x_4120 : vec4<f32> = u_xlat11;
        let x_4122 : vec4<f32> = u_xlat11;
        let x_4124 : vec2<f32> = (vec2<f32>(x_4120.x, x_4120.y) / vec2<f32>(x_4122.z, x_4122.z));
        let x_4125 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4124.x, x_4124.y, x_4125.z, x_4125.w);
        let x_4127 : vec4<f32> = u_xlat11;
        let x_4130 : vec2<f32> = ((vec2<f32>(x_4127.x, x_4127.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4131 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4130.x, x_4130.y, x_4131.z, x_4131.w);
        let x_4133 : vec4<f32> = u_xlat11;
        let x_4137 : vec2<f32> = clamp(vec2<f32>(x_4133.x, x_4133.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4138 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4137.x, x_4137.y, x_4138.z, x_4138.w);
        let x_4140 : u32 = u_xlatu68;
        let x_4143 : vec4<f32> = x_4043.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4140)];
        let x_4145 : vec4<f32> = u_xlat11;
        let x_4148 : u32 = u_xlatu68;
        let x_4151 : vec4<f32> = x_4043.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4148)];
        let x_4153 : vec2<f32> = ((vec2<f32>(x_4143.x, x_4143.y) * vec2<f32>(x_4145.x, x_4145.y)) + vec2<f32>(x_4151.z, x_4151.w));
        let x_4154 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4153.x, x_4153.y, x_4154.z, x_4154.w);
      } else {
        let x_4158 : i32 = u_xlati74;
        u_xlatb74 = (x_4158 == 1i);
        let x_4160 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4160);
        let x_4162 : i32 = u_xlati74;
        if ((x_4162 != 0i)) {
          let x_4166 : vec3<f32> = vs_INTERP0;
          let x_4168 : i32 = u_xlati76;
          let x_4171 : i32 = u_xlati76;
          let x_4175 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4168 + 1i) / 4i)][((x_4171 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4166.y, x_4166.y) * vec2<f32>(x_4175.x, x_4175.y));
          let x_4178 : i32 = u_xlati76;
          let x_4180 : i32 = u_xlati76;
          let x_4183 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[(x_4178 / 4i)][(x_4180 % 4i)];
          let x_4185 : vec3<f32> = vs_INTERP0;
          let x_4188 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4183.x, x_4183.y) * vec2<f32>(x_4185.x, x_4185.x)) + x_4188);
          let x_4190 : i32 = u_xlati76;
          let x_4193 : i32 = u_xlati76;
          let x_4197 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4190 + 2i) / 4i)][((x_4193 + 2i) % 4i)];
          let x_4199 : vec3<f32> = vs_INTERP0;
          let x_4202 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4197.x, x_4197.y) * vec2<f32>(x_4199.z, x_4199.z)) + x_4202);
          let x_4204 : vec2<f32> = u_xlat55;
          let x_4205 : i32 = u_xlati76;
          let x_4208 : i32 = u_xlati76;
          let x_4212 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4205 + 3i) / 4i)][((x_4208 + 3i) % 4i)];
          u_xlat55 = (x_4204 + vec2<f32>(x_4212.x, x_4212.y));
          let x_4215 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4215 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4218 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4218);
          let x_4220 : u32 = u_xlatu68;
          let x_4223 : vec4<f32> = x_4043.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4220)];
          let x_4225 : vec2<f32> = u_xlat55;
          let x_4227 : u32 = u_xlatu68;
          let x_4230 : vec4<f32> = x_4043.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4227)];
          let x_4232 : vec2<f32> = ((vec2<f32>(x_4223.x, x_4223.y) * x_4225) + vec2<f32>(x_4230.z, x_4230.w));
          let x_4233 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4232.x, x_4232.y, x_4233.z, x_4233.w);
        } else {
          let x_4236 : vec3<f32> = vs_INTERP0;
          let x_4238 : i32 = u_xlati76;
          let x_4241 : i32 = u_xlati76;
          let x_4245 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4238 + 1i) / 4i)][((x_4241 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4236.y, x_4236.y, x_4236.y, x_4236.y) * x_4245);
          let x_4247 : i32 = u_xlati76;
          let x_4249 : i32 = u_xlati76;
          let x_4252 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[(x_4247 / 4i)][(x_4249 % 4i)];
          let x_4253 : vec3<f32> = vs_INTERP0;
          let x_4256 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4252 * vec4<f32>(x_4253.x, x_4253.x, x_4253.x, x_4253.x)) + x_4256);
          let x_4258 : i32 = u_xlati76;
          let x_4261 : i32 = u_xlati76;
          let x_4265 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4258 + 2i) / 4i)][((x_4261 + 2i) % 4i)];
          let x_4266 : vec3<f32> = vs_INTERP0;
          let x_4269 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4265 * vec4<f32>(x_4266.z, x_4266.z, x_4266.z, x_4266.z)) + x_4269);
          let x_4271 : vec4<f32> = u_xlat12;
          let x_4272 : i32 = u_xlati76;
          let x_4275 : i32 = u_xlati76;
          let x_4279 : vec4<f32> = x_4043.x_AdditionalLightsWorldToLights[((x_4272 + 3i) / 4i)][((x_4275 + 3i) % 4i)];
          u_xlat12 = (x_4271 + x_4279);
          let x_4281 : vec4<f32> = u_xlat12;
          let x_4283 : vec4<f32> = u_xlat12;
          let x_4285 : vec3<f32> = (vec3<f32>(x_4281.x, x_4281.y, x_4281.z) / vec3<f32>(x_4283.w, x_4283.w, x_4283.w));
          let x_4286 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4285.x, x_4285.y, x_4285.z, x_4286.w);
          let x_4288 : vec4<f32> = u_xlat12;
          let x_4290 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4288.x, x_4288.y, x_4288.z), vec3<f32>(x_4290.x, x_4290.y, x_4290.z));
          let x_4293 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4293);
          let x_4295 : f32 = u_xlat74;
          let x_4297 : vec4<f32> = u_xlat12;
          let x_4299 : vec3<f32> = (vec3<f32>(x_4295, x_4295, x_4295) * vec3<f32>(x_4297.x, x_4297.y, x_4297.z));
          let x_4300 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4299.x, x_4299.y, x_4299.z, x_4300.w);
          let x_4302 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4302.x, x_4302.y, x_4302.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4307 : f32 = u_xlat74;
          u_xlat74 = max(x_4307, 0.000001f);
          let x_4310 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4310);
          let x_4312 : f32 = u_xlat74;
          let x_4314 : vec4<f32> = u_xlat12;
          let x_4316 : vec3<f32> = (vec3<f32>(x_4312, x_4312, x_4312) * vec3<f32>(x_4314.z, x_4314.x, x_4314.y));
          let x_4317 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4316.x, x_4316.y, x_4316.z, x_4317.w);
          let x_4320 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4320);
          let x_4324 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4324, 0.0f, 1.0f);
          let x_4328 : vec4<f32> = u_xlat13;
          let x_4331 : vec4<bool> = (vec4<f32>(x_4328.y, x_4328.z, x_4328.y, x_4328.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4331.x, x_4331.y);
          let x_4334 : bool = u_xlatb55.x;
          if (x_4334) {
            let x_4339 : f32 = u_xlat13.x;
            x_4335 = x_4339;
          } else {
            let x_4342 : f32 = u_xlat13.x;
            x_4335 = -(x_4342);
          }
          let x_4344 : f32 = x_4335;
          u_xlat55.x = x_4344;
          let x_4347 : bool = u_xlatb55.y;
          if (x_4347) {
            let x_4352 : f32 = u_xlat13.x;
            x_4348 = x_4352;
          } else {
            let x_4355 : f32 = u_xlat13.x;
            x_4348 = -(x_4355);
          }
          let x_4357 : f32 = x_4348;
          u_xlat55.y = x_4357;
          let x_4359 : vec4<f32> = u_xlat12;
          let x_4361 : f32 = u_xlat74;
          let x_4364 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4359.x, x_4359.y) * vec2<f32>(x_4361, x_4361)) + x_4364);
          let x_4366 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4366 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4369 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4369, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4373 : u32 = u_xlatu68;
          let x_4376 : vec4<f32> = x_4043.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4373)];
          let x_4378 : vec2<f32> = u_xlat55;
          let x_4380 : u32 = u_xlatu68;
          let x_4383 : vec4<f32> = x_4043.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4380)];
          let x_4385 : vec2<f32> = ((vec2<f32>(x_4376.x, x_4376.y) * x_4378) + vec2<f32>(x_4383.z, x_4383.w));
          let x_4386 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4385.x, x_4385.y, x_4386.z, x_4386.w);
        }
      }
      let x_4393 : vec4<f32> = u_xlat11;
      let x_4396 : f32 = x_90.x_GlobalMipBias.x;
      let x_4397 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4393.x, x_4393.y), x_4396);
      u_xlat11 = x_4397;
      let x_4399 : bool = u_xlatb51.y;
      if (x_4399) {
        let x_4404 : f32 = u_xlat11.w;
        x_4400 = x_4404;
      } else {
        let x_4407 : f32 = u_xlat11.x;
        x_4400 = x_4407;
      }
      let x_4408 : f32 = x_4400;
      u_xlat74 = x_4408;
      let x_4410 : bool = u_xlatb51.x;
      if (x_4410) {
        let x_4414 : vec4<f32> = u_xlat11;
        x_4411 = vec3<f32>(x_4414.x, x_4414.y, x_4414.z);
      } else {
        let x_4417 : f32 = u_xlat74;
        x_4411 = vec3<f32>(x_4417, x_4417, x_4417);
      }
      let x_4419 : vec3<f32> = x_4411;
      let x_4420 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4419.x, x_4419.y, x_4419.z, x_4420.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4426 : vec4<f32> = u_xlat11;
    let x_4428 : u32 = u_xlatu68;
    let x_4431 : vec4<f32> = x_3933.x_AdditionalLightsColor[bitcast<i32>(x_4428)];
    let x_4433 : vec3<f32> = (vec3<f32>(x_4426.x, x_4426.y, x_4426.z) * vec3<f32>(x_4431.x, x_4431.y, x_4431.z));
    let x_4434 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4433.x, x_4433.y, x_4433.z, x_4434.w);
    let x_4436 : f32 = u_xlat29;
    let x_4438 : vec4<f32> = u_xlat11;
    let x_4440 : vec3<f32> = (vec3<f32>(x_4436, x_4436, x_4436) * vec3<f32>(x_4438.x, x_4438.y, x_4438.z));
    let x_4441 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4440.x, x_4440.y, x_4440.z, x_4441.w);
    let x_4443 : vec4<f32> = u_xlat3;
    let x_4445 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4443.x, x_4443.y, x_4443.z), vec3<f32>(x_4445.x, x_4445.y, x_4445.z));
    let x_4448 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4448, 0.0f, 1.0f);
    let x_4450 : f32 = u_xlat68;
    let x_4451 : f32 = u_xlat70;
    u_xlat68 = (x_4450 * x_4451);
    let x_4453 : f32 = u_xlat68;
    let x_4455 : vec4<f32> = u_xlat11;
    let x_4457 : vec3<f32> = (vec3<f32>(x_4453, x_4453, x_4453) * vec3<f32>(x_4455.x, x_4455.y, x_4455.z));
    let x_4458 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4457.x, x_4457.y, x_4457.z, x_4458.w);
    let x_4460 : vec4<f32> = u_xlat9;
    let x_4462 : f32 = u_xlat71;
    let x_4465 : vec3<f32> = u_xlat2;
    let x_4466 : vec3<f32> = ((vec3<f32>(x_4460.x, x_4460.y, x_4460.z) * vec3<f32>(x_4462, x_4462, x_4462)) + x_4465);
    let x_4467 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4466.x, x_4466.y, x_4466.z, x_4467.w);
    let x_4469 : vec4<f32> = u_xlat9;
    let x_4471 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4469.x, x_4469.y, x_4469.z), vec3<f32>(x_4471.x, x_4471.y, x_4471.z));
    let x_4474 : f32 = u_xlat68;
    u_xlat68 = max(x_4474, 1.17549435e-37f);
    let x_4476 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4476);
    let x_4478 : f32 = u_xlat68;
    let x_4480 : vec4<f32> = u_xlat9;
    let x_4482 : vec3<f32> = (vec3<f32>(x_4478, x_4478, x_4478) * vec3<f32>(x_4480.x, x_4480.y, x_4480.z));
    let x_4483 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4482.x, x_4482.y, x_4482.z, x_4483.w);
    let x_4485 : vec4<f32> = u_xlat3;
    let x_4487 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4485.x, x_4485.y, x_4485.z), vec3<f32>(x_4487.x, x_4487.y, x_4487.z));
    let x_4490 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4490, 0.0f, 1.0f);
    let x_4492 : vec4<f32> = u_xlat10;
    let x_4494 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4492.x, x_4492.y, x_4492.z), vec3<f32>(x_4494.x, x_4494.y, x_4494.z));
    let x_4497 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4497, 0.0f, 1.0f);
    let x_4499 : f32 = u_xlat68;
    let x_4500 : f32 = u_xlat68;
    u_xlat68 = (x_4499 * x_4500);
    let x_4502 : f32 = u_xlat68;
    let x_4504 : f32 = u_xlat45.x;
    u_xlat68 = ((x_4502 * x_4504) + 1.000010014f);
    let x_4507 : f32 = u_xlat70;
    let x_4508 : f32 = u_xlat70;
    u_xlat70 = (x_4507 * x_4508);
    let x_4510 : f32 = u_xlat68;
    let x_4511 : f32 = u_xlat68;
    u_xlat68 = (x_4510 * x_4511);
    let x_4513 : f32 = u_xlat70;
    u_xlat70 = max(x_4513, 0.100000001f);
    let x_4515 : f32 = u_xlat68;
    let x_4516 : f32 = u_xlat70;
    u_xlat68 = (x_4515 * x_4516);
    let x_4518 : f32 = u_xlat72;
    let x_4519 : f32 = u_xlat68;
    u_xlat68 = (x_4518 * x_4519);
    let x_4521 : f32 = u_xlat69;
    let x_4522 : f32 = u_xlat68;
    u_xlat68 = (x_4521 / x_4522);
    let x_4524 : f32 = u_xlat68;
    let x_4527 : vec3<f32> = u_xlat4;
    let x_4528 : vec3<f32> = ((vec3<f32>(x_4524, x_4524, x_4524) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4527);
    let x_4529 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4528.x, x_4528.y, x_4528.z, x_4529.w);
    let x_4531 : vec4<f32> = u_xlat9;
    let x_4533 : vec4<f32> = u_xlat11;
    let x_4536 : vec4<f32> = u_xlat8;
    let x_4538 : vec3<f32> = ((vec3<f32>(x_4531.x, x_4531.y, x_4531.z) * vec3<f32>(x_4533.x, x_4533.y, x_4533.z)) + vec3<f32>(x_4536.x, x_4536.y, x_4536.z));
    let x_4539 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4538.x, x_4538.y, x_4538.z, x_4539.w);

    continuing {
      let x_4541 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4541 + bitcast<u32>(1i));
    }
  }
  let x_4543 : vec4<f32> = u_xlat5;
  let x_4545 : vec4<f32> = u_xlat7;
  let x_4548 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_4543.x, x_4543.y, x_4543.z) * vec3<f32>(x_4545.x, x_4545.x, x_4545.x)) + vec3<f32>(x_4548.x, x_4548.y, x_4548.z));
  let x_4551 : vec4<f32> = u_xlat8;
  let x_4553 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4551.x, x_4551.y, x_4551.z) + x_4553);
  let x_4557 : vec4<f32> = vs_INTERP4;
  let x_4559 : vec3<f32> = u_xlat0;
  let x_4561 : vec3<f32> = u_xlat2;
  let x_4562 : vec3<f32> = ((vec3<f32>(x_4557.w, x_4557.w, x_4557.w) * x_4559) + x_4561);
  let x_4563 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4562.x, x_4562.y, x_4562.z, x_4563.w);
  let x_4565 : bool = u_xlatb23;
  if (x_4565) {
    let x_4570 : f32 = u_xlat1.x;
    x_4566 = x_4570;
  } else {
    x_4566 = 1.0f;
  }
  let x_4572 : f32 = x_4566;
  SV_Target0.w = x_4572;
  let x_4578 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_4580 : f32 = x_161.unity_RenderingLayer.x;
  u_xlatu0 = (x_4578 & bitcast<u32>(x_4580));
  let x_4583 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4583);
  let x_4588 : f32 = u_xlat0.x;
  let x_4590 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4588 * x_4590);
  let x_4594 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4594, 0.0f, 1.0f);
  let x_4597 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4597.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

