struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_NightFade : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(4) var Texture2D_52571568 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_52571568 : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_45 : PGlobals;

@group(0) @binding(6) var Texture2D_8BA53EED : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_8BA53EED : sampler;

@group(0) @binding(7) var Texture2D_AB84E4D0 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_AB84E4D0 : sampler;

@group(1) @binding(2) var<uniform> x_120 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_F0A81025 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_F0A81025 : sampler;

var<private> vs_INTERP2 : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_458 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2062 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat45 : f32;
  var u_xlatb45 : bool;
  var u_xlat3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat68 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat5 : vec3<f32>;
  var x_270 : vec3<f32>;
  var u_xlat6 : vec3<f32>;
  var u_xlat69 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlat25 : f32;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlat47 : f32;
  var u_xlatb71 : bool;
  var u_xlat8 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb28 : bool;
  var u_xlat28 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat50 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb50 : bool;
  var u_xlat74 : f32;
  var u_xlatu68 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati71 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati69 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_40 : vec4<f32> = vs_INTERP3;
  let x_51 : f32 = x_45.x_GlobalMipBias.x;
  let x_52 : vec4<f32> = textureSampleBias(Texture2D_52571568, samplerTexture2D_52571568, vec2<f32>(x_40.x, x_40.y), x_51);
  u_xlat0 = vec3<f32>(x_52.x, x_52.y, x_52.z);
  let x_60 : vec4<f32> = vs_INTERP3;
  let x_63 : f32 = x_45.x_GlobalMipBias.x;
  let x_64 : vec4<f32> = textureSampleBias(Texture2D_8BA53EED, samplerTexture2D_8BA53EED, vec2<f32>(x_60.x, x_60.y), x_63);
  let x_65 : vec3<f32> = vec3<f32>(x_64.x, x_64.y, x_64.w);
  let x_66 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_65.x, x_65.y, x_65.z, x_66.w);
  let x_70 : f32 = u_xlat1.x;
  let x_73 : f32 = u_xlat1.z;
  u_xlat1.x = (x_70 * x_73);
  let x_76 : vec4<f32> = u_xlat1;
  let x_83 : vec2<f32> = ((vec2<f32>(x_76.x, x_76.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_84 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  let x_87 : vec4<f32> = u_xlat1;
  let x_89 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec2<f32>(x_87.x, x_87.y), vec2<f32>(x_89.x, x_89.y));
  let x_92 : f32 = u_xlat66;
  u_xlat66 = min(x_92, 1.0f);
  let x_94 : f32 = u_xlat66;
  u_xlat66 = (-(x_94) + 1.0f);
  let x_97 : f32 = u_xlat66;
  u_xlat66 = sqrt(x_97);
  let x_99 : f32 = u_xlat66;
  u_xlat66 = max(x_99, 1.00000002e-16f);
  let x_108 : vec4<f32> = vs_INTERP3;
  let x_111 : f32 = x_45.x_GlobalMipBias.x;
  let x_112 : vec4<f32> = textureSampleBias(Texture2D_AB84E4D0, samplerTexture2D_AB84E4D0, vec2<f32>(x_108.x, x_108.y), x_111);
  let x_113 : vec3<f32> = vec3<f32>(x_112.x, x_112.y, x_112.z);
  let x_114 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_125 : vec4<f32> = x_120.unity_ObjectToWorld[3i];
  let x_128 : vec4<f32> = x_120.unity_ObjectToWorld[3i];
  u_xlat45 = dot(vec3<f32>(x_125.x, x_125.y, x_125.z), vec3<f32>(x_128.x, x_128.y, x_128.z));
  let x_131 : f32 = u_xlat45;
  u_xlat45 = sqrt(x_131);
  let x_133 : f32 = u_xlat45;
  u_xlat45 = fract(x_133);
  let x_135 : f32 = u_xlat45;
  let x_138 : f32 = x_45.x_NightFade;
  u_xlat45 = (x_135 + x_138);
  let x_143 : f32 = u_xlat45;
  u_xlatb45 = (x_143 >= 1.0f);
  let x_145 : bool = u_xlatb45;
  u_xlat45 = select(0.0f, 1.0f, x_145);
  let x_154 : vec4<f32> = vs_INTERP3;
  let x_157 : f32 = x_45.x_GlobalMipBias.x;
  let x_158 : vec4<f32> = textureSampleBias(Texture2D_F0A81025, samplerTexture2D_F0A81025, vec2<f32>(x_154.x, x_154.y), x_157);
  u_xlat3 = vec3<f32>(x_158.x, x_158.w, x_158.y);
  let x_163 : f32 = vs_INTERP2.w;
  u_xlatb67 = (0.0f < x_163);
  let x_166 : bool = u_xlatb67;
  u_xlat67 = select(-1.0f, 1.0f, x_166);
  let x_170 : f32 = x_120.unity_WorldTransformParams.w;
  u_xlatb68 = (x_170 >= 0.0f);
  let x_173 : bool = u_xlatb68;
  u_xlat68 = select(-1.0f, 1.0f, x_173);
  let x_175 : f32 = u_xlat67;
  let x_176 : f32 = u_xlat68;
  u_xlat67 = (x_175 * x_176);
  let x_181 : vec3<f32> = vs_INTERP1;
  let x_183 : vec4<f32> = vs_INTERP2;
  u_xlat4 = (vec3<f32>(x_181.z, x_181.x, x_181.y) * vec3<f32>(x_183.y, x_183.z, x_183.x));
  let x_186 : vec3<f32> = vs_INTERP1;
  let x_188 : vec4<f32> = vs_INTERP2;
  let x_191 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_186.y, x_186.z, x_186.x) * vec3<f32>(x_188.z, x_188.x, x_188.y)) + -(x_191));
  let x_194 : f32 = u_xlat67;
  let x_196 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_194, x_194, x_194) * x_196);
  let x_198 : vec4<f32> = u_xlat1;
  let x_200 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_198.y, x_198.y, x_198.y) * x_200);
  let x_202 : vec4<f32> = u_xlat1;
  let x_204 : vec4<f32> = vs_INTERP2;
  let x_207 : vec3<f32> = u_xlat4;
  let x_208 : vec3<f32> = ((vec3<f32>(x_202.x, x_202.x, x_202.x) * vec3<f32>(x_204.x, x_204.y, x_204.z)) + x_207);
  let x_209 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_208.x, x_208.y, x_209.z, x_208.z);
  let x_211 : f32 = u_xlat66;
  let x_213 : vec3<f32> = vs_INTERP1;
  let x_215 : vec4<f32> = u_xlat1;
  let x_217 : vec3<f32> = ((vec3<f32>(x_211, x_211, x_211) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.w));
  let x_218 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_217.x, x_217.y, x_218.z, x_217.z);
  let x_220 : vec4<f32> = u_xlat1;
  let x_222 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec3<f32>(x_220.x, x_220.y, x_220.w), vec3<f32>(x_222.x, x_222.y, x_222.w));
  let x_225 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_225);
  let x_227 : f32 = u_xlat66;
  let x_229 : vec4<f32> = u_xlat1;
  let x_231 : vec3<f32> = (vec3<f32>(x_227, x_227, x_227) * vec3<f32>(x_229.x, x_229.y, x_229.w));
  let x_232 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_231.x, x_231.y, x_232.z, x_231.z);
  let x_237 : f32 = x_45.unity_OrthoParams.w;
  u_xlatb66 = (x_237 == 0.0f);
  let x_240 : vec3<f32> = vs_INTERP0;
  let x_245 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_240) + x_245);
  let x_247 : vec3<f32> = u_xlat4;
  let x_248 : vec3<f32> = u_xlat4;
  u_xlat68 = dot(x_247, x_248);
  let x_250 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_250);
  let x_252 : f32 = u_xlat68;
  let x_254 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_252, x_252, x_252) * x_254);
  let x_259 : f32 = x_45.unity_MatrixV[0i].z;
  u_xlat5.x = x_259;
  let x_262 : f32 = x_45.unity_MatrixV[1i].z;
  u_xlat5.y = x_262;
  let x_267 : f32 = x_45.unity_MatrixV[2i].z;
  u_xlat5.z = x_267;
  let x_269 : bool = u_xlatb66;
  if (x_269) {
    let x_273 : vec3<f32> = u_xlat4;
    x_270 = x_273;
  } else {
    let x_275 : vec3<f32> = u_xlat5;
    x_270 = x_275;
  }
  let x_276 : vec3<f32> = x_270;
  u_xlat4 = x_276;
  let x_278 : f32 = vs_INTERP0.y;
  let x_280 : f32 = x_45.unity_MatrixV[1i].z;
  u_xlat66 = (x_278 * x_280);
  let x_283 : f32 = x_45.unity_MatrixV[0i].z;
  let x_285 : f32 = vs_INTERP0.x;
  let x_287 : f32 = u_xlat66;
  u_xlat66 = ((x_283 * x_285) + x_287);
  let x_290 : f32 = x_45.unity_MatrixV[2i].z;
  let x_292 : f32 = vs_INTERP0.z;
  let x_294 : f32 = u_xlat66;
  u_xlat66 = ((x_290 * x_292) + x_294);
  let x_296 : f32 = u_xlat66;
  let x_298 : f32 = x_45.unity_MatrixV[3i].z;
  u_xlat66 = (x_296 + x_298);
  let x_300 : f32 = u_xlat66;
  let x_304 : f32 = x_45.x_ProjectionParams.y;
  u_xlat66 = (-(x_300) + -(x_304));
  let x_307 : f32 = u_xlat66;
  u_xlat66 = max(x_307, 0.0f);
  let x_309 : f32 = u_xlat66;
  let x_312 : f32 = x_45.unity_FogParams.x;
  u_xlat66 = (x_309 * x_312);
  let x_321 : vec2<f32> = vs_INTERP4;
  let x_323 : f32 = x_45.x_GlobalMipBias.x;
  let x_324 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_321, x_323);
  u_xlat5 = vec3<f32>(x_324.x, x_324.y, x_324.z);
  let x_329 : vec4<f32> = x_45.x_ScaledScreenParams;
  let x_330 : vec2<f32> = vec2<f32>(x_329.x, x_329.y);
  let x_334 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_330.x, x_330.y));
  let x_335 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_334.x, x_334.y, x_335.z);
  let x_337 : vec3<f32> = u_xlat6;
  let x_339 : vec4<f32> = hlslcc_FragCoord;
  let x_341 : vec2<f32> = (vec2<f32>(x_337.x, x_337.y) * vec2<f32>(x_339.x, x_339.y));
  let x_342 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_341.x, x_341.y, x_342.z);
  let x_345 : f32 = u_xlat6.y;
  let x_348 : f32 = x_45.x_ScaleBiasRt.x;
  let x_351 : f32 = x_45.x_ScaleBiasRt.y;
  u_xlat68 = ((x_345 * x_348) + x_351);
  let x_353 : f32 = u_xlat68;
  u_xlat6.z = (-(x_353) + 1.0f);
  let x_357 : vec3<f32> = u_xlat3;
  let x_358 : vec2<f32> = vec2<f32>(x_357.x, x_357.y);
  let x_359 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_358.x, x_358.y, x_359.z);
  let x_361 : vec3<f32> = u_xlat3;
  let x_365 : vec2<f32> = clamp(vec2<f32>(x_361.x, x_361.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_366 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_365.x, x_365.y, x_366.z);
  let x_369 : f32 = u_xlat3.x;
  u_xlat68 = ((-(x_369) * 0.959999979f) + 0.959999979f);
  let x_375 : f32 = u_xlat68;
  let x_378 : f32 = u_xlat3.y;
  u_xlat69 = (-(x_375) + x_378);
  let x_381 : vec3<f32> = u_xlat0;
  let x_382 : f32 = u_xlat68;
  u_xlat7 = (x_381 * vec3<f32>(x_382, x_382, x_382));
  let x_385 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_385 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_389 : vec3<f32> = u_xlat3;
  let x_391 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_389.x, x_389.x, x_389.x) * x_391) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_397 : f32 = u_xlat3.y;
  u_xlat68 = (-(x_397) + 1.0f);
  let x_400 : f32 = u_xlat68;
  let x_401 : f32 = u_xlat68;
  u_xlat3.x = (x_400 * x_401);
  let x_405 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_405, 0.0078125f);
  let x_411 : f32 = u_xlat3.x;
  let x_413 : f32 = u_xlat3.x;
  u_xlat25 = (x_411 * x_413);
  let x_415 : f32 = u_xlat69;
  u_xlat69 = (x_415 + 1.0f);
  let x_417 : f32 = u_xlat69;
  u_xlat69 = min(x_417, 1.0f);
  let x_421 : f32 = u_xlat3.x;
  u_xlat70 = ((x_421 * 4.0f) + 2.0f);
  let x_431 : vec3<f32> = u_xlat6;
  let x_434 : f32 = x_45.x_GlobalMipBias.x;
  let x_435 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_431.x, x_431.z), x_434);
  u_xlat71 = x_435.x;
  let x_437 : f32 = u_xlat71;
  u_xlat6.x = (x_437 + -1.0f);
  let x_442 : f32 = x_45.x_AmbientOcclusionParam.w;
  let x_444 : f32 = u_xlat6.x;
  u_xlat6.x = ((x_442 * x_444) + 1.0f);
  let x_450 : f32 = u_xlat3.z;
  let x_451 : f32 = u_xlat71;
  u_xlat47 = min(x_450, x_451);
  let x_460 : f32 = x_458.x_MainLightShadowParams.y;
  u_xlatb71 = (0.0f < x_460);
  let x_462 : bool = u_xlatb71;
  if (x_462) {
    let x_466 : f32 = x_458.x_MainLightShadowParams.y;
    u_xlatb71 = (x_466 == 1.0f);
    let x_468 : bool = u_xlatb71;
    if (x_468) {
      let x_473 : vec4<f32> = vs_INTERP8;
      let x_476 : vec4<f32> = x_458.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_473.x, x_473.y, x_473.x, x_473.y) + x_476);
      let x_479 : vec4<f32> = u_xlat8;
      let x_480 : vec2<f32> = vec2<f32>(x_479.x, x_479.y);
      let x_482 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_480.x, x_480.y, x_482);
      let x_495 : vec3<f32> = txVec0;
      let x_497 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_495.xy, x_495.z);
      u_xlat9.x = x_497;
      let x_500 : vec4<f32> = u_xlat8;
      let x_501 : vec2<f32> = vec2<f32>(x_500.z, x_500.w);
      let x_503 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_501.x, x_501.y, x_503);
      let x_510 : vec3<f32> = txVec1;
      let x_512 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_510.xy, x_510.z);
      u_xlat9.y = x_512;
      let x_514 : vec4<f32> = vs_INTERP8;
      let x_517 : vec4<f32> = x_458.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_514.x, x_514.y, x_514.x, x_514.y) + x_517);
      let x_520 : vec4<f32> = u_xlat8;
      let x_521 : vec2<f32> = vec2<f32>(x_520.x, x_520.y);
      let x_523 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_521.x, x_521.y, x_523);
      let x_530 : vec3<f32> = txVec2;
      let x_532 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_530.xy, x_530.z);
      u_xlat9.z = x_532;
      let x_535 : vec4<f32> = u_xlat8;
      let x_536 : vec2<f32> = vec2<f32>(x_535.z, x_535.w);
      let x_538 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_536.x, x_536.y, x_538);
      let x_545 : vec3<f32> = txVec3;
      let x_547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_545.xy, x_545.z);
      u_xlat9.w = x_547;
      let x_549 : vec4<f32> = u_xlat9;
      u_xlat71 = dot(x_549, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_556 : f32 = x_458.x_MainLightShadowParams.y;
      u_xlatb28 = (x_556 == 2.0f);
      let x_558 : bool = u_xlatb28;
      if (x_558) {
        let x_562 : vec4<f32> = vs_INTERP8;
        let x_565 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_570 : vec2<f32> = ((vec2<f32>(x_562.x, x_562.y) * vec2<f32>(x_565.z, x_565.w)) + vec2<f32>(0.5f, 0.5f));
        let x_571 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_570.x, x_570.y, x_571.z);
        let x_573 : vec3<f32> = u_xlat28;
        let x_575 : vec2<f32> = floor(vec2<f32>(x_573.x, x_573.y));
        let x_576 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_575.x, x_575.y, x_576.z);
        let x_578 : vec4<f32> = vs_INTERP8;
        let x_581 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_584 : vec3<f32> = u_xlat28;
        let x_587 : vec2<f32> = ((vec2<f32>(x_578.x, x_578.y) * vec2<f32>(x_581.z, x_581.w)) + -(vec2<f32>(x_584.x, x_584.y)));
        let x_588 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_587.x, x_587.y, x_588.z, x_588.w);
        let x_590 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_590.x, x_590.x, x_590.y, x_590.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_595 : vec4<f32> = u_xlat9;
        let x_597 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_595.x, x_595.x, x_595.z, x_595.z) * vec4<f32>(x_597.x, x_597.x, x_597.z, x_597.z));
        let x_602 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_602.y, x_602.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_607 : vec4<f32> = u_xlat10;
        let x_610 : vec4<f32> = u_xlat8;
        let x_613 : vec2<f32> = ((vec2<f32>(x_607.x, x_607.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_610.x, x_610.y)));
        let x_614 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_613.x, x_614.y, x_613.y, x_614.w);
        let x_616 : vec4<f32> = u_xlat8;
        let x_619 : vec2<f32> = (-(vec2<f32>(x_616.x, x_616.y)) + vec2<f32>(1.0f, 1.0f));
        let x_620 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_619.x, x_619.y, x_620.z, x_620.w);
        let x_623 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_623.x, x_623.y), vec2<f32>(0.0f, 0.0f));
        let x_627 : vec2<f32> = u_xlat54;
        let x_629 : vec2<f32> = u_xlat54;
        let x_631 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_627) * x_629) + vec2<f32>(x_631.x, x_631.y));
        let x_634 : vec4<f32> = u_xlat8;
        let x_636 : vec2<f32> = max(vec2<f32>(x_634.x, x_634.y), vec2<f32>(0.0f, 0.0f));
        let x_637 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_636.x, x_636.y, x_637.z, x_637.w);
        let x_639 : vec4<f32> = u_xlat8;
        let x_642 : vec4<f32> = u_xlat8;
        let x_645 : vec4<f32> = u_xlat9;
        let x_647 : vec2<f32> = ((-(vec2<f32>(x_639.x, x_639.y)) * vec2<f32>(x_642.x, x_642.y)) + vec2<f32>(x_645.y, x_645.w));
        let x_648 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_647.x, x_647.y, x_648.z, x_648.w);
        let x_650 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_650 + vec2<f32>(1.0f, 1.0f));
        let x_652 : vec4<f32> = u_xlat8;
        let x_654 : vec2<f32> = (vec2<f32>(x_652.x, x_652.y) + vec2<f32>(1.0f, 1.0f));
        let x_655 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_654.x, x_654.y, x_655.z, x_655.w);
        let x_658 : vec4<f32> = u_xlat9;
        let x_662 : vec2<f32> = (vec2<f32>(x_658.x, x_658.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_663 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_662.x, x_662.y, x_663.z, x_663.w);
        let x_666 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = (vec2<f32>(x_666.x, x_666.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_669 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_668.x, x_668.y, x_669.z, x_669.w);
        let x_671 : vec2<f32> = u_xlat54;
        let x_672 : vec2<f32> = (x_671 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_673 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_672.x, x_672.y, x_673.z, x_673.w);
        let x_676 : vec4<f32> = u_xlat8;
        let x_678 : vec2<f32> = (vec2<f32>(x_676.x, x_676.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_679 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_678.x, x_678.y, x_679.z, x_679.w);
        let x_681 : vec4<f32> = u_xlat9;
        let x_683 : vec2<f32> = (vec2<f32>(x_681.y, x_681.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_684 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_683.x, x_683.y, x_684.z, x_684.w);
        let x_687 : f32 = u_xlat10.x;
        u_xlat11.z = x_687;
        let x_690 : f32 = u_xlat8.x;
        u_xlat11.w = x_690;
        let x_693 : f32 = u_xlat13.x;
        u_xlat12.z = x_693;
        let x_696 : f32 = u_xlat52.x;
        u_xlat12.w = x_696;
        let x_698 : vec4<f32> = u_xlat11;
        let x_700 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_698.z, x_698.w, x_698.x, x_698.z) + vec4<f32>(x_700.z, x_700.w, x_700.x, x_700.z));
        let x_704 : f32 = u_xlat11.y;
        u_xlat10.z = x_704;
        let x_707 : f32 = u_xlat8.y;
        u_xlat10.w = x_707;
        let x_710 : f32 = u_xlat12.y;
        u_xlat13.z = x_710;
        let x_713 : f32 = u_xlat52.y;
        u_xlat13.w = x_713;
        let x_715 : vec4<f32> = u_xlat10;
        let x_717 : vec4<f32> = u_xlat13;
        let x_719 : vec3<f32> = (vec3<f32>(x_715.z, x_715.y, x_715.w) + vec3<f32>(x_717.z, x_717.y, x_717.w));
        let x_720 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_719.x, x_719.y, x_719.z, x_720.w);
        let x_722 : vec4<f32> = u_xlat12;
        let x_724 : vec4<f32> = u_xlat9;
        let x_726 : vec3<f32> = (vec3<f32>(x_722.x, x_722.z, x_722.w) / vec3<f32>(x_724.z, x_724.w, x_724.y));
        let x_727 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_726.x, x_726.y, x_726.z, x_727.w);
        let x_729 : vec4<f32> = u_xlat10;
        let x_735 : vec3<f32> = (vec3<f32>(x_729.x, x_729.y, x_729.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_736 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_735.x, x_735.y, x_735.z, x_736.w);
        let x_738 : vec4<f32> = u_xlat13;
        let x_740 : vec4<f32> = u_xlat8;
        let x_742 : vec3<f32> = (vec3<f32>(x_738.z, x_738.y, x_738.w) / vec3<f32>(x_740.x, x_740.y, x_740.z));
        let x_743 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
        let x_745 : vec4<f32> = u_xlat11;
        let x_747 : vec3<f32> = (vec3<f32>(x_745.x, x_745.y, x_745.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_748 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_747.x, x_747.y, x_747.z, x_748.w);
        let x_750 : vec4<f32> = u_xlat10;
        let x_753 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_755 : vec3<f32> = (vec3<f32>(x_750.y, x_750.x, x_750.z) * vec3<f32>(x_753.x, x_753.x, x_753.x));
        let x_756 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_755.x, x_755.y, x_755.z, x_756.w);
        let x_758 : vec4<f32> = u_xlat11;
        let x_761 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_763 : vec3<f32> = (vec3<f32>(x_758.x, x_758.y, x_758.z) * vec3<f32>(x_761.y, x_761.y, x_761.y));
        let x_764 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_763.x, x_763.y, x_763.z, x_764.w);
        let x_767 : f32 = u_xlat11.x;
        u_xlat10.w = x_767;
        let x_769 : vec3<f32> = u_xlat28;
        let x_772 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_775 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_769.x, x_769.y, x_769.x, x_769.y) * vec4<f32>(x_772.x, x_772.y, x_772.x, x_772.y)) + vec4<f32>(x_775.y, x_775.w, x_775.x, x_775.w));
        let x_778 : vec3<f32> = u_xlat28;
        let x_781 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_784 : vec4<f32> = u_xlat10;
        let x_786 : vec2<f32> = ((vec2<f32>(x_778.x, x_778.y) * vec2<f32>(x_781.x, x_781.y)) + vec2<f32>(x_784.z, x_784.w));
        let x_787 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_786.x, x_786.y, x_787.z, x_787.w);
        let x_790 : f32 = u_xlat10.y;
        u_xlat11.w = x_790;
        let x_792 : vec4<f32> = u_xlat11;
        let x_793 : vec2<f32> = vec2<f32>(x_792.y, x_792.z);
        let x_794 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_794.x, x_793.x, x_794.z, x_793.y);
        let x_797 : vec3<f32> = u_xlat28;
        let x_800 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_803 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_797.x, x_797.y, x_797.x, x_797.y) * vec4<f32>(x_800.x, x_800.y, x_800.x, x_800.y)) + vec4<f32>(x_803.x, x_803.y, x_803.z, x_803.y));
        let x_806 : vec3<f32> = u_xlat28;
        let x_809 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_812 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_806.x, x_806.y, x_806.x, x_806.y) * vec4<f32>(x_809.x, x_809.y, x_809.x, x_809.y)) + vec4<f32>(x_812.w, x_812.y, x_812.w, x_812.z));
        let x_815 : vec3<f32> = u_xlat28;
        let x_818 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_821 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_815.x, x_815.y, x_815.x, x_815.y) * vec4<f32>(x_818.x, x_818.y, x_818.x, x_818.y)) + vec4<f32>(x_821.x, x_821.w, x_821.z, x_821.w));
        let x_825 : vec4<f32> = u_xlat8;
        let x_827 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_825.x, x_825.x, x_825.x, x_825.y) * vec4<f32>(x_827.z, x_827.w, x_827.y, x_827.z));
        let x_831 : vec4<f32> = u_xlat8;
        let x_833 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_831.y, x_831.y, x_831.z, x_831.z) * x_833);
        let x_836 : f32 = u_xlat8.z;
        let x_838 : f32 = u_xlat9.y;
        u_xlat28.x = (x_836 * x_838);
        let x_842 : vec4<f32> = u_xlat12;
        let x_843 : vec2<f32> = vec2<f32>(x_842.x, x_842.y);
        let x_845 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_853 : vec3<f32> = txVec4;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat50 = x_855;
        let x_857 : vec4<f32> = u_xlat12;
        let x_858 : vec2<f32> = vec2<f32>(x_857.z, x_857.w);
        let x_860 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_858.x, x_858.y, x_860);
        let x_868 : vec3<f32> = txVec5;
        let x_870 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_868.xy, x_868.z);
        u_xlat72 = x_870;
        let x_871 : f32 = u_xlat72;
        let x_873 : f32 = u_xlat15.y;
        u_xlat72 = (x_871 * x_873);
        let x_876 : f32 = u_xlat15.x;
        let x_877 : f32 = u_xlat50;
        let x_879 : f32 = u_xlat72;
        u_xlat50 = ((x_876 * x_877) + x_879);
        let x_882 : vec4<f32> = u_xlat13;
        let x_883 : vec2<f32> = vec2<f32>(x_882.x, x_882.y);
        let x_885 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_883.x, x_883.y, x_885);
        let x_892 : vec3<f32> = txVec6;
        let x_894 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_892.xy, x_892.z);
        u_xlat72 = x_894;
        let x_896 : f32 = u_xlat15.z;
        let x_897 : f32 = u_xlat72;
        let x_899 : f32 = u_xlat50;
        u_xlat50 = ((x_896 * x_897) + x_899);
        let x_902 : vec4<f32> = u_xlat11;
        let x_903 : vec2<f32> = vec2<f32>(x_902.x, x_902.y);
        let x_905 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_903.x, x_903.y, x_905);
        let x_912 : vec3<f32> = txVec7;
        let x_914 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_912.xy, x_912.z);
        u_xlat72 = x_914;
        let x_916 : f32 = u_xlat15.w;
        let x_917 : f32 = u_xlat72;
        let x_919 : f32 = u_xlat50;
        u_xlat50 = ((x_916 * x_917) + x_919);
        let x_922 : vec4<f32> = u_xlat14;
        let x_923 : vec2<f32> = vec2<f32>(x_922.x, x_922.y);
        let x_925 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_923.x, x_923.y, x_925);
        let x_932 : vec3<f32> = txVec8;
        let x_934 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_932.xy, x_932.z);
        u_xlat72 = x_934;
        let x_936 : f32 = u_xlat16.x;
        let x_937 : f32 = u_xlat72;
        let x_939 : f32 = u_xlat50;
        u_xlat50 = ((x_936 * x_937) + x_939);
        let x_942 : vec4<f32> = u_xlat14;
        let x_943 : vec2<f32> = vec2<f32>(x_942.z, x_942.w);
        let x_945 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_943.x, x_943.y, x_945);
        let x_952 : vec3<f32> = txVec9;
        let x_954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_952.xy, x_952.z);
        u_xlat72 = x_954;
        let x_956 : f32 = u_xlat16.y;
        let x_957 : f32 = u_xlat72;
        let x_959 : f32 = u_xlat50;
        u_xlat50 = ((x_956 * x_957) + x_959);
        let x_962 : vec4<f32> = u_xlat11;
        let x_963 : vec2<f32> = vec2<f32>(x_962.z, x_962.w);
        let x_965 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_963.x, x_963.y, x_965);
        let x_972 : vec3<f32> = txVec10;
        let x_974 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_972.xy, x_972.z);
        u_xlat72 = x_974;
        let x_976 : f32 = u_xlat16.z;
        let x_977 : f32 = u_xlat72;
        let x_979 : f32 = u_xlat50;
        u_xlat50 = ((x_976 * x_977) + x_979);
        let x_982 : vec4<f32> = u_xlat10;
        let x_983 : vec2<f32> = vec2<f32>(x_982.x, x_982.y);
        let x_985 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_983.x, x_983.y, x_985);
        let x_992 : vec3<f32> = txVec11;
        let x_994 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_992.xy, x_992.z);
        u_xlat72 = x_994;
        let x_996 : f32 = u_xlat16.w;
        let x_997 : f32 = u_xlat72;
        let x_999 : f32 = u_xlat50;
        u_xlat50 = ((x_996 * x_997) + x_999);
        let x_1002 : vec4<f32> = u_xlat10;
        let x_1003 : vec2<f32> = vec2<f32>(x_1002.z, x_1002.w);
        let x_1005 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1003.x, x_1003.y, x_1005);
        let x_1012 : vec3<f32> = txVec12;
        let x_1014 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1012.xy, x_1012.z);
        u_xlat72 = x_1014;
        let x_1016 : f32 = u_xlat28.x;
        let x_1017 : f32 = u_xlat72;
        let x_1019 : f32 = u_xlat50;
        u_xlat71 = ((x_1016 * x_1017) + x_1019);
      } else {
        let x_1022 : vec4<f32> = vs_INTERP8;
        let x_1025 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1028 : vec2<f32> = ((vec2<f32>(x_1022.x, x_1022.y) * vec2<f32>(x_1025.z, x_1025.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1029 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_1028.x, x_1028.y, x_1029.z);
        let x_1031 : vec3<f32> = u_xlat28;
        let x_1033 : vec2<f32> = floor(vec2<f32>(x_1031.x, x_1031.y));
        let x_1034 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_1033.x, x_1033.y, x_1034.z);
        let x_1036 : vec4<f32> = vs_INTERP8;
        let x_1039 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1042 : vec3<f32> = u_xlat28;
        let x_1045 : vec2<f32> = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.z, x_1039.w)) + -(vec2<f32>(x_1042.x, x_1042.y)));
        let x_1046 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1045.x, x_1045.y, x_1046.z, x_1046.w);
        let x_1048 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1048.x, x_1048.x, x_1048.y, x_1048.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1051 : vec4<f32> = u_xlat9;
        let x_1053 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1051.x, x_1051.x, x_1051.z, x_1051.z) * vec4<f32>(x_1053.x, x_1053.x, x_1053.z, x_1053.z));
        let x_1056 : vec4<f32> = u_xlat10;
        let x_1060 : vec2<f32> = (vec2<f32>(x_1056.y, x_1056.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1061 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1061.x, x_1060.x, x_1061.z, x_1060.y);
        let x_1063 : vec4<f32> = u_xlat10;
        let x_1066 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1063.x, x_1063.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1066.x, x_1066.y)));
        let x_1070 : vec4<f32> = u_xlat8;
        let x_1073 : vec2<f32> = (-(vec2<f32>(x_1070.x, x_1070.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1073.x, x_1074.y, x_1073.y, x_1074.w);
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1078 : vec2<f32> = min(vec2<f32>(x_1076.x, x_1076.y), vec2<f32>(0.0f, 0.0f));
        let x_1079 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1078.x, x_1078.y, x_1079.z, x_1079.w);
        let x_1081 : vec4<f32> = u_xlat10;
        let x_1084 : vec4<f32> = u_xlat10;
        let x_1087 : vec4<f32> = u_xlat9;
        let x_1089 : vec2<f32> = ((-(vec2<f32>(x_1081.x, x_1081.y)) * vec2<f32>(x_1084.x, x_1084.y)) + vec2<f32>(x_1087.x, x_1087.z));
        let x_1090 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1089.x, x_1090.y, x_1089.y, x_1090.w);
        let x_1092 : vec4<f32> = u_xlat8;
        let x_1094 : vec2<f32> = max(vec2<f32>(x_1092.x, x_1092.y), vec2<f32>(0.0f, 0.0f));
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1094.y, x_1095.z, x_1095.w);
        let x_1097 : vec4<f32> = u_xlat10;
        let x_1100 : vec4<f32> = u_xlat10;
        let x_1103 : vec4<f32> = u_xlat9;
        let x_1105 : vec2<f32> = ((-(vec2<f32>(x_1097.x, x_1097.y)) * vec2<f32>(x_1100.x, x_1100.y)) + vec2<f32>(x_1103.y, x_1103.w));
        let x_1106 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1106.x, x_1105.x, x_1106.z, x_1105.y);
        let x_1108 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1108 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1112 : f32 = u_xlat9.y;
        u_xlat10.z = (x_1112 * 0.081632003f);
        let x_1116 : vec2<f32> = u_xlat52;
        let x_1119 : vec2<f32> = (vec2<f32>(x_1116.y, x_1116.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1120 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1119.x, x_1119.y, x_1120.z, x_1120.w);
        let x_1122 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_1122.x, x_1122.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1126 : f32 = u_xlat9.w;
        u_xlat12.z = (x_1126 * 0.081632003f);
        let x_1130 : f32 = u_xlat12.y;
        u_xlat10.x = x_1130;
        let x_1132 : vec4<f32> = u_xlat8;
        let x_1139 : vec2<f32> = ((vec2<f32>(x_1132.x, x_1132.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1140 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1140.x, x_1139.x, x_1140.z, x_1139.y);
        let x_1142 : vec4<f32> = u_xlat8;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1142.x, x_1142.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1147 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1147.w);
        let x_1150 : f32 = u_xlat52.x;
        u_xlat9.y = x_1150;
        let x_1153 : f32 = u_xlat11.y;
        u_xlat9.w = x_1153;
        let x_1155 : vec4<f32> = u_xlat9;
        let x_1156 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1155 + x_1156);
        let x_1158 : vec4<f32> = u_xlat8;
        let x_1161 : vec2<f32> = ((vec2<f32>(x_1158.y, x_1158.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1162 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1162.x, x_1161.x, x_1162.z, x_1161.y);
        let x_1164 : vec4<f32> = u_xlat8;
        let x_1167 : vec2<f32> = ((vec2<f32>(x_1164.y, x_1164.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1168 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1167.x, x_1168.y, x_1167.y, x_1168.w);
        let x_1171 : f32 = u_xlat52.y;
        u_xlat11.y = x_1171;
        let x_1173 : vec4<f32> = u_xlat11;
        let x_1174 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1173 + x_1174);
        let x_1176 : vec4<f32> = u_xlat9;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_1176 / x_1177);
        let x_1179 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1179 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1185 : vec4<f32> = u_xlat11;
        let x_1186 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_1185 / x_1186);
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1188 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1190 : vec4<f32> = u_xlat9;
        let x_1193 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1190.w, x_1190.x, x_1190.y, x_1190.z) * vec4<f32>(x_1193.x, x_1193.x, x_1193.x, x_1193.x));
        let x_1196 : vec4<f32> = u_xlat11;
        let x_1199 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1196.x, x_1196.w, x_1196.y, x_1196.z) * vec4<f32>(x_1199.y, x_1199.y, x_1199.y, x_1199.y));
        let x_1202 : vec4<f32> = u_xlat9;
        let x_1203 : vec3<f32> = vec3<f32>(x_1202.y, x_1202.z, x_1202.w);
        let x_1204 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1203.x, x_1204.y, x_1203.y, x_1203.z);
        let x_1207 : f32 = u_xlat11.x;
        u_xlat12.y = x_1207;
        let x_1209 : vec3<f32> = u_xlat28;
        let x_1212 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1215 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1209.x, x_1209.y, x_1209.x, x_1209.y) * vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y)) + vec4<f32>(x_1215.x, x_1215.y, x_1215.z, x_1215.y));
        let x_1218 : vec3<f32> = u_xlat28;
        let x_1221 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1224 : vec4<f32> = u_xlat12;
        let x_1226 : vec2<f32> = ((vec2<f32>(x_1218.x, x_1218.y) * vec2<f32>(x_1221.x, x_1221.y)) + vec2<f32>(x_1224.w, x_1224.y));
        let x_1227 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1226.x, x_1226.y, x_1227.z, x_1227.w);
        let x_1230 : f32 = u_xlat12.y;
        u_xlat9.y = x_1230;
        let x_1233 : f32 = u_xlat11.z;
        u_xlat12.y = x_1233;
        let x_1235 : vec3<f32> = u_xlat28;
        let x_1238 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1241 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_1235.x, x_1235.y, x_1235.x, x_1235.y) * vec4<f32>(x_1238.x, x_1238.y, x_1238.x, x_1238.y)) + vec4<f32>(x_1241.x, x_1241.y, x_1241.z, x_1241.y));
        let x_1245 : vec3<f32> = u_xlat28;
        let x_1248 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1251 : vec4<f32> = u_xlat12;
        u_xlat58 = ((vec2<f32>(x_1245.x, x_1245.y) * vec2<f32>(x_1248.x, x_1248.y)) + vec2<f32>(x_1251.w, x_1251.y));
        let x_1255 : f32 = u_xlat12.y;
        u_xlat9.z = x_1255;
        let x_1257 : vec3<f32> = u_xlat28;
        let x_1260 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1263 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1257.x, x_1257.y, x_1257.x, x_1257.y) * vec4<f32>(x_1260.x, x_1260.y, x_1260.x, x_1260.y)) + vec4<f32>(x_1263.x, x_1263.y, x_1263.x, x_1263.z));
        let x_1267 : f32 = u_xlat11.w;
        u_xlat12.y = x_1267;
        let x_1270 : vec3<f32> = u_xlat28;
        let x_1273 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1276 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1270.x, x_1270.y, x_1270.x, x_1270.y) * vec4<f32>(x_1273.x, x_1273.y, x_1273.x, x_1273.y)) + vec4<f32>(x_1276.x, x_1276.y, x_1276.z, x_1276.y));
        let x_1280 : vec3<f32> = u_xlat28;
        let x_1283 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1286 : vec4<f32> = u_xlat12;
        let x_1288 : vec2<f32> = ((vec2<f32>(x_1280.x, x_1280.y) * vec2<f32>(x_1283.x, x_1283.y)) + vec2<f32>(x_1286.w, x_1286.y));
        let x_1289 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1288.x, x_1288.y, x_1289.z);
        let x_1292 : f32 = u_xlat12.y;
        u_xlat9.w = x_1292;
        let x_1295 : vec3<f32> = u_xlat28;
        let x_1298 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1301 : vec4<f32> = u_xlat9;
        u_xlat18 = ((vec2<f32>(x_1295.x, x_1295.y) * vec2<f32>(x_1298.x, x_1298.y)) + vec2<f32>(x_1301.x, x_1301.w));
        let x_1304 : vec4<f32> = u_xlat12;
        let x_1305 : vec3<f32> = vec3<f32>(x_1304.x, x_1304.z, x_1304.w);
        let x_1306 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1305.x, x_1306.y, x_1305.y, x_1305.z);
        let x_1308 : vec3<f32> = u_xlat28;
        let x_1311 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1314 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1308.x, x_1308.y, x_1308.x, x_1308.y) * vec4<f32>(x_1311.x, x_1311.y, x_1311.x, x_1311.y)) + vec4<f32>(x_1314.x, x_1314.y, x_1314.z, x_1314.y));
        let x_1318 : vec3<f32> = u_xlat28;
        let x_1321 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1324 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1318.x, x_1318.y) * vec2<f32>(x_1321.x, x_1321.y)) + vec2<f32>(x_1324.w, x_1324.y));
        let x_1328 : f32 = u_xlat9.x;
        u_xlat11.x = x_1328;
        let x_1330 : vec3<f32> = u_xlat28;
        let x_1333 : vec4<f32> = x_458.x_MainLightShadowmapSize;
        let x_1336 : vec4<f32> = u_xlat11;
        let x_1338 : vec2<f32> = ((vec2<f32>(x_1330.x, x_1330.y) * vec2<f32>(x_1333.x, x_1333.y)) + vec2<f32>(x_1336.x, x_1336.y));
        let x_1339 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_1338.x, x_1338.y, x_1339.z);
        let x_1342 : vec4<f32> = u_xlat8;
        let x_1344 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1342.x, x_1342.x, x_1342.x, x_1342.x) * x_1344);
        let x_1347 : vec4<f32> = u_xlat8;
        let x_1349 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_1347.y, x_1347.y, x_1347.y, x_1347.y) * x_1349);
        let x_1352 : vec4<f32> = u_xlat8;
        let x_1354 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_1352.z, x_1352.z, x_1352.z, x_1352.z) * x_1354);
        let x_1356 : vec4<f32> = u_xlat8;
        let x_1358 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_1356.w, x_1356.w, x_1356.w, x_1356.w) * x_1358);
        let x_1361 : vec4<f32> = u_xlat13;
        let x_1362 : vec2<f32> = vec2<f32>(x_1361.x, x_1361.y);
        let x_1364 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1362.x, x_1362.y, x_1364);
        let x_1371 : vec3<f32> = txVec13;
        let x_1373 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1371.xy, x_1371.z);
        u_xlat72 = x_1373;
        let x_1375 : vec4<f32> = u_xlat13;
        let x_1376 : vec2<f32> = vec2<f32>(x_1375.z, x_1375.w);
        let x_1378 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1376.x, x_1376.y, x_1378);
        let x_1386 : vec3<f32> = txVec14;
        let x_1388 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1386.xy, x_1386.z);
        u_xlat73 = x_1388;
        let x_1389 : f32 = u_xlat73;
        let x_1391 : f32 = u_xlat19.y;
        u_xlat73 = (x_1389 * x_1391);
        let x_1394 : f32 = u_xlat19.x;
        let x_1395 : f32 = u_xlat72;
        let x_1397 : f32 = u_xlat73;
        u_xlat72 = ((x_1394 * x_1395) + x_1397);
        let x_1400 : vec4<f32> = u_xlat14;
        let x_1401 : vec2<f32> = vec2<f32>(x_1400.x, x_1400.y);
        let x_1403 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1401.x, x_1401.y, x_1403);
        let x_1410 : vec3<f32> = txVec15;
        let x_1412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1410.xy, x_1410.z);
        u_xlat73 = x_1412;
        let x_1414 : f32 = u_xlat19.z;
        let x_1415 : f32 = u_xlat73;
        let x_1417 : f32 = u_xlat72;
        u_xlat72 = ((x_1414 * x_1415) + x_1417);
        let x_1420 : vec4<f32> = u_xlat16;
        let x_1421 : vec2<f32> = vec2<f32>(x_1420.x, x_1420.y);
        let x_1423 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1421.x, x_1421.y, x_1423);
        let x_1430 : vec3<f32> = txVec16;
        let x_1432 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1430.xy, x_1430.z);
        u_xlat73 = x_1432;
        let x_1434 : f32 = u_xlat19.w;
        let x_1435 : f32 = u_xlat73;
        let x_1437 : f32 = u_xlat72;
        u_xlat72 = ((x_1434 * x_1435) + x_1437);
        let x_1440 : vec4<f32> = u_xlat15;
        let x_1441 : vec2<f32> = vec2<f32>(x_1440.x, x_1440.y);
        let x_1443 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1441.x, x_1441.y, x_1443);
        let x_1450 : vec3<f32> = txVec17;
        let x_1452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1450.xy, x_1450.z);
        u_xlat73 = x_1452;
        let x_1454 : f32 = u_xlat20.x;
        let x_1455 : f32 = u_xlat73;
        let x_1457 : f32 = u_xlat72;
        u_xlat72 = ((x_1454 * x_1455) + x_1457);
        let x_1460 : vec4<f32> = u_xlat15;
        let x_1461 : vec2<f32> = vec2<f32>(x_1460.z, x_1460.w);
        let x_1463 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1461.x, x_1461.y, x_1463);
        let x_1470 : vec3<f32> = txVec18;
        let x_1472 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1470.xy, x_1470.z);
        u_xlat73 = x_1472;
        let x_1474 : f32 = u_xlat20.y;
        let x_1475 : f32 = u_xlat73;
        let x_1477 : f32 = u_xlat72;
        u_xlat72 = ((x_1474 * x_1475) + x_1477);
        let x_1480 : vec2<f32> = u_xlat58;
        let x_1482 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1489 : vec3<f32> = txVec19;
        let x_1491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1489.xy, x_1489.z);
        u_xlat73 = x_1491;
        let x_1493 : f32 = u_xlat20.z;
        let x_1494 : f32 = u_xlat73;
        let x_1496 : f32 = u_xlat72;
        u_xlat72 = ((x_1493 * x_1494) + x_1496);
        let x_1499 : vec4<f32> = u_xlat16;
        let x_1500 : vec2<f32> = vec2<f32>(x_1499.z, x_1499.w);
        let x_1502 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1500.x, x_1500.y, x_1502);
        let x_1509 : vec3<f32> = txVec20;
        let x_1511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1509.xy, x_1509.z);
        u_xlat73 = x_1511;
        let x_1513 : f32 = u_xlat20.w;
        let x_1514 : f32 = u_xlat73;
        let x_1516 : f32 = u_xlat72;
        u_xlat72 = ((x_1513 * x_1514) + x_1516);
        let x_1519 : vec4<f32> = u_xlat17;
        let x_1520 : vec2<f32> = vec2<f32>(x_1519.x, x_1519.y);
        let x_1522 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1520.x, x_1520.y, x_1522);
        let x_1529 : vec3<f32> = txVec21;
        let x_1531 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1529.xy, x_1529.z);
        u_xlat73 = x_1531;
        let x_1533 : f32 = u_xlat21.x;
        let x_1534 : f32 = u_xlat73;
        let x_1536 : f32 = u_xlat72;
        u_xlat72 = ((x_1533 * x_1534) + x_1536);
        let x_1539 : vec4<f32> = u_xlat17;
        let x_1540 : vec2<f32> = vec2<f32>(x_1539.z, x_1539.w);
        let x_1542 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_1540.x, x_1540.y, x_1542);
        let x_1549 : vec3<f32> = txVec22;
        let x_1551 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1549.xy, x_1549.z);
        u_xlat73 = x_1551;
        let x_1553 : f32 = u_xlat21.y;
        let x_1554 : f32 = u_xlat73;
        let x_1556 : f32 = u_xlat72;
        u_xlat72 = ((x_1553 * x_1554) + x_1556);
        let x_1559 : vec3<f32> = u_xlat31;
        let x_1560 : vec2<f32> = vec2<f32>(x_1559.x, x_1559.y);
        let x_1562 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_1560.x, x_1560.y, x_1562);
        let x_1569 : vec3<f32> = txVec23;
        let x_1571 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1569.xy, x_1569.z);
        u_xlat73 = x_1571;
        let x_1573 : f32 = u_xlat21.z;
        let x_1574 : f32 = u_xlat73;
        let x_1576 : f32 = u_xlat72;
        u_xlat72 = ((x_1573 * x_1574) + x_1576);
        let x_1579 : vec2<f32> = u_xlat18;
        let x_1581 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_1579.x, x_1579.y, x_1581);
        let x_1588 : vec3<f32> = txVec24;
        let x_1590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1588.xy, x_1588.z);
        u_xlat73 = x_1590;
        let x_1592 : f32 = u_xlat21.w;
        let x_1593 : f32 = u_xlat73;
        let x_1595 : f32 = u_xlat72;
        u_xlat72 = ((x_1592 * x_1593) + x_1595);
        let x_1598 : vec4<f32> = u_xlat12;
        let x_1599 : vec2<f32> = vec2<f32>(x_1598.x, x_1598.y);
        let x_1601 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_1599.x, x_1599.y, x_1601);
        let x_1608 : vec3<f32> = txVec25;
        let x_1610 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1608.xy, x_1608.z);
        u_xlat73 = x_1610;
        let x_1612 : f32 = u_xlat8.x;
        let x_1613 : f32 = u_xlat73;
        let x_1615 : f32 = u_xlat72;
        u_xlat72 = ((x_1612 * x_1613) + x_1615);
        let x_1618 : vec4<f32> = u_xlat12;
        let x_1619 : vec2<f32> = vec2<f32>(x_1618.z, x_1618.w);
        let x_1621 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_1619.x, x_1619.y, x_1621);
        let x_1628 : vec3<f32> = txVec26;
        let x_1630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1628.xy, x_1628.z);
        u_xlat73 = x_1630;
        let x_1632 : f32 = u_xlat8.y;
        let x_1633 : f32 = u_xlat73;
        let x_1635 : f32 = u_xlat72;
        u_xlat72 = ((x_1632 * x_1633) + x_1635);
        let x_1638 : vec2<f32> = u_xlat55;
        let x_1640 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_1638.x, x_1638.y, x_1640);
        let x_1647 : vec3<f32> = txVec27;
        let x_1649 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1647.xy, x_1647.z);
        u_xlat73 = x_1649;
        let x_1651 : f32 = u_xlat8.z;
        let x_1652 : f32 = u_xlat73;
        let x_1654 : f32 = u_xlat72;
        u_xlat72 = ((x_1651 * x_1652) + x_1654);
        let x_1657 : vec3<f32> = u_xlat28;
        let x_1658 : vec2<f32> = vec2<f32>(x_1657.x, x_1657.y);
        let x_1660 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_1658.x, x_1658.y, x_1660);
        let x_1667 : vec3<f32> = txVec28;
        let x_1669 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1667.xy, x_1667.z);
        u_xlat28.x = x_1669;
        let x_1672 : f32 = u_xlat8.w;
        let x_1674 : f32 = u_xlat28.x;
        let x_1676 : f32 = u_xlat72;
        u_xlat71 = ((x_1672 * x_1674) + x_1676);
      }
    }
  } else {
    let x_1680 : vec4<f32> = vs_INTERP8;
    let x_1681 : vec2<f32> = vec2<f32>(x_1680.x, x_1680.y);
    let x_1683 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_1681.x, x_1681.y, x_1683);
    let x_1690 : vec3<f32> = txVec29;
    let x_1692 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1690.xy, x_1690.z);
    u_xlat71 = x_1692;
  }
  let x_1694 : f32 = x_458.x_MainLightShadowParams.x;
  u_xlat28.x = (-(x_1694) + 1.0f);
  let x_1698 : f32 = u_xlat71;
  let x_1700 : f32 = x_458.x_MainLightShadowParams.x;
  let x_1703 : f32 = u_xlat28.x;
  u_xlat71 = ((x_1698 * x_1700) + x_1703);
  let x_1706 : f32 = vs_INTERP8.z;
  u_xlatb28 = (0.0f >= x_1706);
  let x_1710 : f32 = vs_INTERP8.z;
  u_xlatb50 = (x_1710 >= 1.0f);
  let x_1712 : bool = u_xlatb50;
  let x_1713 : bool = u_xlatb28;
  u_xlatb28 = (x_1712 | x_1713);
  let x_1715 : bool = u_xlatb28;
  let x_1716 : f32 = u_xlat71;
  u_xlat71 = select(x_1716, 1.0f, x_1715);
  let x_1718 : vec3<f32> = vs_INTERP0;
  let x_1720 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat28 = (x_1718 + -(x_1720));
  let x_1723 : vec3<f32> = u_xlat28;
  let x_1724 : vec3<f32> = u_xlat28;
  u_xlat28.x = dot(x_1723, x_1724);
  let x_1728 : f32 = u_xlat28.x;
  let x_1730 : f32 = x_458.x_MainLightShadowParams.z;
  let x_1733 : f32 = x_458.x_MainLightShadowParams.w;
  u_xlat28.x = ((x_1728 * x_1730) + x_1733);
  let x_1737 : f32 = u_xlat28.x;
  u_xlat28.x = clamp(x_1737, 0.0f, 1.0f);
  let x_1740 : f32 = u_xlat71;
  u_xlat50 = (-(x_1740) + 1.0f);
  let x_1744 : f32 = u_xlat28.x;
  let x_1745 : f32 = u_xlat50;
  let x_1747 : f32 = u_xlat71;
  u_xlat71 = ((x_1744 * x_1745) + x_1747);
  let x_1749 : vec3<f32> = u_xlat6;
  let x_1752 : vec4<f32> = x_45.x_MainLightColor;
  u_xlat28 = (vec3<f32>(x_1749.x, x_1749.x, x_1749.x) * vec3<f32>(x_1752.x, x_1752.y, x_1752.z));
  let x_1755 : vec3<f32> = u_xlat4;
  let x_1757 : vec4<f32> = u_xlat1;
  u_xlat73 = dot(-(x_1755), vec3<f32>(x_1757.x, x_1757.y, x_1757.w));
  let x_1760 : f32 = u_xlat73;
  let x_1761 : f32 = u_xlat73;
  u_xlat73 = (x_1760 + x_1761);
  let x_1763 : vec4<f32> = u_xlat1;
  let x_1765 : f32 = u_xlat73;
  let x_1769 : vec3<f32> = u_xlat4;
  let x_1771 : vec3<f32> = ((vec3<f32>(x_1763.x, x_1763.y, x_1763.w) * -(vec3<f32>(x_1765, x_1765, x_1765))) + -(x_1769));
  let x_1772 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1771.x, x_1771.y, x_1771.z, x_1772.w);
  let x_1774 : vec4<f32> = u_xlat1;
  let x_1776 : vec3<f32> = u_xlat4;
  u_xlat73 = dot(vec3<f32>(x_1774.x, x_1774.y, x_1774.w), x_1776);
  let x_1778 : f32 = u_xlat73;
  u_xlat73 = clamp(x_1778, 0.0f, 1.0f);
  let x_1780 : f32 = u_xlat73;
  u_xlat73 = (-(x_1780) + 1.0f);
  let x_1783 : f32 = u_xlat73;
  let x_1784 : f32 = u_xlat73;
  u_xlat73 = (x_1783 * x_1784);
  let x_1786 : f32 = u_xlat73;
  let x_1787 : f32 = u_xlat73;
  u_xlat73 = (x_1786 * x_1787);
  let x_1790 : f32 = u_xlat68;
  u_xlat74 = ((-(x_1790) * 0.699999988f) + 1.700000048f);
  let x_1796 : f32 = u_xlat68;
  let x_1797 : f32 = u_xlat74;
  u_xlat2.w = (x_1796 * x_1797);
  let x_1800 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_1800 * vec4<f32>(14.0f, 14.0f, 14.0f, 6.0f));
  let x_1813 : vec4<f32> = u_xlat8;
  let x_1816 : f32 = u_xlat2.w;
  let x_1817 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1813.x, x_1813.y, x_1813.z), x_1816);
  u_xlat8 = x_1817;
  let x_1819 : f32 = u_xlat8.w;
  u_xlat68 = (x_1819 + -1.0f);
  let x_1822 : f32 = x_120.unity_SpecCube0_HDR.w;
  let x_1823 : f32 = u_xlat68;
  u_xlat68 = ((x_1822 * x_1823) + 1.0f);
  let x_1826 : f32 = u_xlat68;
  u_xlat68 = max(x_1826, 0.0f);
  let x_1828 : f32 = u_xlat68;
  u_xlat68 = log2(x_1828);
  let x_1830 : f32 = u_xlat68;
  let x_1832 : f32 = x_120.unity_SpecCube0_HDR.y;
  u_xlat68 = (x_1830 * x_1832);
  let x_1834 : f32 = u_xlat68;
  u_xlat68 = exp2(x_1834);
  let x_1836 : f32 = u_xlat68;
  let x_1838 : f32 = x_120.unity_SpecCube0_HDR.x;
  u_xlat68 = (x_1836 * x_1838);
  let x_1840 : vec4<f32> = u_xlat8;
  let x_1842 : f32 = u_xlat68;
  let x_1844 : vec3<f32> = (vec3<f32>(x_1840.x, x_1840.y, x_1840.z) * vec3<f32>(x_1842, x_1842, x_1842));
  let x_1845 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1844.x, x_1844.y, x_1844.z, x_1845.w);
  let x_1847 : vec3<f32> = u_xlat3;
  let x_1849 : vec3<f32> = u_xlat3;
  let x_1853 : vec2<f32> = ((vec2<f32>(x_1847.x, x_1847.x) * vec2<f32>(x_1849.x, x_1849.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_1854 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1853.x, x_1853.y, x_1854.z, x_1854.w);
  let x_1857 : f32 = u_xlat9.y;
  u_xlat68 = (1.0f / x_1857);
  let x_1859 : vec3<f32> = u_xlat0;
  let x_1861 : f32 = u_xlat69;
  u_xlat31 = (-(x_1859) + vec3<f32>(x_1861, x_1861, x_1861));
  let x_1864 : f32 = u_xlat73;
  let x_1866 : vec3<f32> = u_xlat31;
  let x_1868 : vec3<f32> = u_xlat0;
  u_xlat31 = ((vec3<f32>(x_1864, x_1864, x_1864) * x_1866) + x_1868);
  let x_1870 : f32 = u_xlat68;
  let x_1872 : vec3<f32> = u_xlat31;
  u_xlat31 = (vec3<f32>(x_1870, x_1870, x_1870) * x_1872);
  let x_1874 : vec4<f32> = u_xlat8;
  let x_1876 : vec3<f32> = u_xlat31;
  let x_1877 : vec3<f32> = (vec3<f32>(x_1874.x, x_1874.y, x_1874.z) * x_1876);
  let x_1878 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1877.x, x_1877.y, x_1877.z, x_1878.w);
  let x_1880 : vec3<f32> = u_xlat5;
  let x_1881 : vec3<f32> = u_xlat7;
  let x_1883 : vec4<f32> = u_xlat8;
  u_xlat5 = ((x_1880 * x_1881) + vec3<f32>(x_1883.x, x_1883.y, x_1883.z));
  let x_1886 : f32 = u_xlat71;
  let x_1889 : f32 = x_120.unity_LightData.z;
  u_xlat68 = (x_1886 * x_1889);
  let x_1891 : vec4<f32> = u_xlat1;
  let x_1894 : vec4<f32> = x_45.x_MainLightPosition;
  u_xlat3.x = dot(vec3<f32>(x_1891.x, x_1891.y, x_1891.w), vec3<f32>(x_1894.x, x_1894.y, x_1894.z));
  let x_1899 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1899, 0.0f, 1.0f);
  let x_1902 : f32 = u_xlat68;
  let x_1904 : f32 = u_xlat3.x;
  u_xlat68 = (x_1902 * x_1904);
  let x_1906 : f32 = u_xlat68;
  let x_1908 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_1906, x_1906, x_1906) * x_1908);
  let x_1910 : vec3<f32> = u_xlat4;
  let x_1912 : vec4<f32> = x_45.x_MainLightPosition;
  let x_1914 : vec3<f32> = (x_1910 + vec3<f32>(x_1912.x, x_1912.y, x_1912.z));
  let x_1915 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1914.x, x_1914.y, x_1914.z, x_1915.w);
  let x_1917 : vec4<f32> = u_xlat8;
  let x_1919 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_1917.x, x_1917.y, x_1917.z), vec3<f32>(x_1919.x, x_1919.y, x_1919.z));
  let x_1922 : f32 = u_xlat68;
  u_xlat68 = max(x_1922, 1.17549435e-37f);
  let x_1925 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_1925);
  let x_1927 : f32 = u_xlat68;
  let x_1929 : vec4<f32> = u_xlat8;
  let x_1931 : vec3<f32> = (vec3<f32>(x_1927, x_1927, x_1927) * vec3<f32>(x_1929.x, x_1929.y, x_1929.z));
  let x_1932 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1931.x, x_1931.y, x_1931.z, x_1932.w);
  let x_1934 : vec4<f32> = u_xlat1;
  let x_1936 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_1934.x, x_1934.y, x_1934.w), vec3<f32>(x_1936.x, x_1936.y, x_1936.z));
  let x_1939 : f32 = u_xlat68;
  u_xlat68 = clamp(x_1939, 0.0f, 1.0f);
  let x_1942 : vec4<f32> = x_45.x_MainLightPosition;
  let x_1944 : vec4<f32> = u_xlat8;
  u_xlat3.x = dot(vec3<f32>(x_1942.x, x_1942.y, x_1942.z), vec3<f32>(x_1944.x, x_1944.y, x_1944.z));
  let x_1949 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1949, 0.0f, 1.0f);
  let x_1952 : f32 = u_xlat68;
  let x_1953 : f32 = u_xlat68;
  u_xlat68 = (x_1952 * x_1953);
  let x_1955 : f32 = u_xlat68;
  let x_1957 : f32 = u_xlat9.x;
  u_xlat68 = ((x_1955 * x_1957) + 1.000010014f);
  let x_1962 : f32 = u_xlat3.x;
  let x_1964 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1962 * x_1964);
  let x_1967 : f32 = u_xlat68;
  let x_1968 : f32 = u_xlat68;
  u_xlat68 = (x_1967 * x_1968);
  let x_1971 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1971, 0.100000001f);
  let x_1975 : f32 = u_xlat68;
  let x_1977 : f32 = u_xlat3.x;
  u_xlat68 = (x_1975 * x_1977);
  let x_1979 : f32 = u_xlat70;
  let x_1980 : f32 = u_xlat68;
  u_xlat68 = (x_1979 * x_1980);
  let x_1982 : f32 = u_xlat25;
  let x_1983 : f32 = u_xlat68;
  u_xlat68 = (x_1982 / x_1983);
  let x_1985 : vec3<f32> = u_xlat0;
  let x_1986 : f32 = u_xlat68;
  let x_1989 : vec3<f32> = u_xlat7;
  let x_1990 : vec3<f32> = ((x_1985 * vec3<f32>(x_1986, x_1986, x_1986)) + x_1989);
  let x_1991 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1990.x, x_1990.y, x_1990.z, x_1991.w);
  let x_1993 : vec3<f32> = u_xlat28;
  let x_1994 : vec4<f32> = u_xlat8;
  u_xlat28 = (x_1993 * vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1998 : f32 = x_45.x_AdditionalLightsCount.x;
  let x_2000 : f32 = x_120.unity_LightData.y;
  u_xlat68 = min(x_1998, x_2000);
  let x_2004 : f32 = u_xlat68;
  u_xlatu68 = bitcast<u32>(i32(x_2004));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2016 : u32 = u_xlatu_loop_1;
    let x_2017 : u32 = u_xlatu68;
    if ((x_2016 < x_2017)) {
    } else {
      break;
    }
    let x_2020 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_2020 >> 2u);
    let x_2024 : u32 = u_xlatu_loop_1;
    u_xlati71 = bitcast<i32>((x_2024 & 3u));
    let x_2027 : u32 = u_xlatu69;
    let x_2030 : vec4<f32> = x_120.unity_LightIndices[bitcast<i32>(x_2027)];
    let x_2040 : i32 = u_xlati71;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2045 : vec4<u32> = indexable[x_2040];
    u_xlat69 = dot(x_2030, bitcast<vec4<f32>>(x_2045));
    let x_2049 : f32 = u_xlat69;
    u_xlati69 = i32(x_2049);
    let x_2051 : vec3<f32> = vs_INTERP0;
    let x_2063 : i32 = u_xlati69;
    let x_2065 : vec4<f32> = x_2062.x_AdditionalLightsPosition[x_2063];
    let x_2068 : i32 = u_xlati69;
    let x_2070 : vec4<f32> = x_2062.x_AdditionalLightsPosition[x_2068];
    u_xlat31 = ((-(x_2051) * vec3<f32>(x_2065.w, x_2065.w, x_2065.w)) + vec3<f32>(x_2070.x, x_2070.y, x_2070.z));
    let x_2073 : vec3<f32> = u_xlat31;
    let x_2074 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(x_2073, x_2074);
    let x_2076 : f32 = u_xlat71;
    u_xlat71 = max(x_2076, 6.10351562e-05f);
    let x_2079 : f32 = u_xlat71;
    u_xlat73 = inverseSqrt(x_2079);
    let x_2081 : f32 = u_xlat73;
    let x_2083 : vec3<f32> = u_xlat31;
    let x_2084 : vec3<f32> = (vec3<f32>(x_2081, x_2081, x_2081) * x_2083);
    let x_2085 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2084.x, x_2084.y, x_2084.z, x_2085.w);
    let x_2087 : f32 = u_xlat71;
    u_xlat74 = (1.0f / x_2087);
    let x_2089 : f32 = u_xlat71;
    let x_2090 : i32 = u_xlati69;
    let x_2092 : f32 = x_2062.x_AdditionalLightsAttenuation[x_2090].x;
    u_xlat71 = (x_2089 * x_2092);
    let x_2094 : f32 = u_xlat71;
    let x_2096 : f32 = u_xlat71;
    u_xlat71 = ((-(x_2094) * x_2096) + 1.0f);
    let x_2099 : f32 = u_xlat71;
    u_xlat71 = max(x_2099, 0.0f);
    let x_2101 : f32 = u_xlat71;
    let x_2102 : f32 = u_xlat71;
    u_xlat71 = (x_2101 * x_2102);
    let x_2104 : f32 = u_xlat71;
    let x_2105 : f32 = u_xlat74;
    u_xlat71 = (x_2104 * x_2105);
    let x_2107 : i32 = u_xlati69;
    let x_2109 : vec4<f32> = x_2062.x_AdditionalLightsSpotDir[x_2107];
    let x_2111 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_2109.x, x_2109.y, x_2109.z), vec3<f32>(x_2111.x, x_2111.y, x_2111.z));
    let x_2114 : f32 = u_xlat74;
    let x_2115 : i32 = u_xlati69;
    let x_2117 : f32 = x_2062.x_AdditionalLightsAttenuation[x_2115].z;
    let x_2119 : i32 = u_xlati69;
    let x_2121 : f32 = x_2062.x_AdditionalLightsAttenuation[x_2119].w;
    u_xlat74 = ((x_2114 * x_2117) + x_2121);
    let x_2123 : f32 = u_xlat74;
    u_xlat74 = clamp(x_2123, 0.0f, 1.0f);
    let x_2125 : f32 = u_xlat74;
    let x_2126 : f32 = u_xlat74;
    u_xlat74 = (x_2125 * x_2126);
    let x_2128 : f32 = u_xlat71;
    let x_2129 : f32 = u_xlat74;
    u_xlat71 = (x_2128 * x_2129);
    let x_2131 : vec3<f32> = u_xlat6;
    let x_2133 : i32 = u_xlati69;
    let x_2135 : vec4<f32> = x_2062.x_AdditionalLightsColor[x_2133];
    let x_2137 : vec3<f32> = (vec3<f32>(x_2131.x, x_2131.x, x_2131.x) * vec3<f32>(x_2135.x, x_2135.y, x_2135.z));
    let x_2138 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2137.x, x_2137.y, x_2137.z, x_2138.w);
    let x_2140 : vec4<f32> = u_xlat1;
    let x_2142 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_2140.x, x_2140.y, x_2140.w), vec3<f32>(x_2142.x, x_2142.y, x_2142.z));
    let x_2145 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2145, 0.0f, 1.0f);
    let x_2147 : f32 = u_xlat69;
    let x_2148 : f32 = u_xlat71;
    u_xlat69 = (x_2147 * x_2148);
    let x_2150 : f32 = u_xlat69;
    let x_2152 : vec4<f32> = u_xlat11;
    let x_2154 : vec3<f32> = (vec3<f32>(x_2150, x_2150, x_2150) * vec3<f32>(x_2152.x, x_2152.y, x_2152.z));
    let x_2155 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2154.x, x_2154.y, x_2154.z, x_2155.w);
    let x_2157 : vec3<f32> = u_xlat31;
    let x_2158 : f32 = u_xlat73;
    let x_2161 : vec3<f32> = u_xlat4;
    u_xlat31 = ((x_2157 * vec3<f32>(x_2158, x_2158, x_2158)) + x_2161);
    let x_2163 : vec3<f32> = u_xlat31;
    let x_2164 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_2163, x_2164);
    let x_2166 : f32 = u_xlat69;
    u_xlat69 = max(x_2166, 1.17549435e-37f);
    let x_2168 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_2168);
    let x_2170 : f32 = u_xlat69;
    let x_2172 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_2170, x_2170, x_2170) * x_2172);
    let x_2174 : vec4<f32> = u_xlat1;
    let x_2176 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_2174.x, x_2174.y, x_2174.w), x_2176);
    let x_2178 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2178, 0.0f, 1.0f);
    let x_2180 : vec4<f32> = u_xlat10;
    let x_2182 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(vec3<f32>(x_2180.x, x_2180.y, x_2180.z), x_2182);
    let x_2184 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2184, 0.0f, 1.0f);
    let x_2186 : f32 = u_xlat69;
    let x_2187 : f32 = u_xlat69;
    u_xlat69 = (x_2186 * x_2187);
    let x_2189 : f32 = u_xlat69;
    let x_2191 : f32 = u_xlat9.x;
    u_xlat69 = ((x_2189 * x_2191) + 1.000010014f);
    let x_2194 : f32 = u_xlat71;
    let x_2195 : f32 = u_xlat71;
    u_xlat71 = (x_2194 * x_2195);
    let x_2197 : f32 = u_xlat69;
    let x_2198 : f32 = u_xlat69;
    u_xlat69 = (x_2197 * x_2198);
    let x_2200 : f32 = u_xlat71;
    u_xlat71 = max(x_2200, 0.100000001f);
    let x_2202 : f32 = u_xlat69;
    let x_2203 : f32 = u_xlat71;
    u_xlat69 = (x_2202 * x_2203);
    let x_2205 : f32 = u_xlat70;
    let x_2206 : f32 = u_xlat69;
    u_xlat69 = (x_2205 * x_2206);
    let x_2208 : f32 = u_xlat25;
    let x_2209 : f32 = u_xlat69;
    u_xlat69 = (x_2208 / x_2209);
    let x_2211 : vec3<f32> = u_xlat0;
    let x_2212 : f32 = u_xlat69;
    let x_2215 : vec3<f32> = u_xlat7;
    u_xlat31 = ((x_2211 * vec3<f32>(x_2212, x_2212, x_2212)) + x_2215);
    let x_2217 : vec3<f32> = u_xlat31;
    let x_2218 : vec4<f32> = u_xlat11;
    let x_2221 : vec4<f32> = u_xlat8;
    let x_2223 : vec3<f32> = ((x_2217 * vec3<f32>(x_2218.x, x_2218.y, x_2218.z)) + vec3<f32>(x_2221.x, x_2221.y, x_2221.z));
    let x_2224 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2223.x, x_2223.y, x_2223.z, x_2224.w);

    continuing {
      let x_2226 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2226 + bitcast<u32>(1i));
    }
  }
  let x_2228 : vec3<f32> = u_xlat5;
  let x_2229 : f32 = u_xlat47;
  let x_2232 : vec3<f32> = u_xlat28;
  u_xlat0 = ((x_2228 * vec3<f32>(x_2229, x_2229, x_2229)) + x_2232);
  let x_2234 : vec4<f32> = u_xlat8;
  let x_2236 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_2234.x, x_2234.y, x_2234.z) + x_2236);
  let x_2238 : vec4<f32> = u_xlat2;
  let x_2240 : f32 = u_xlat45;
  let x_2243 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_2238.x, x_2238.y, x_2238.z) * vec3<f32>(x_2240, x_2240, x_2240)) + x_2243);
  let x_2245 : f32 = u_xlat66;
  let x_2246 : f32 = u_xlat66;
  u_xlat66 = (x_2245 * -(x_2246));
  let x_2249 : f32 = u_xlat66;
  u_xlat66 = exp2(x_2249);
  let x_2251 : vec3<f32> = u_xlat0;
  let x_2254 : vec4<f32> = x_45.unity_FogColor;
  u_xlat0 = (x_2251 + -(vec3<f32>(x_2254.x, x_2254.y, x_2254.z)));
  let x_2260 : f32 = u_xlat66;
  let x_2262 : vec3<f32> = u_xlat0;
  let x_2265 : vec4<f32> = x_45.unity_FogColor;
  let x_2267 : vec3<f32> = ((vec3<f32>(x_2260, x_2260, x_2260) * x_2262) + vec3<f32>(x_2265.x, x_2265.y, x_2265.z));
  let x_2268 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2267.x, x_2267.y, x_2267.z, x_2268.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>, @location(5) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0);
}

