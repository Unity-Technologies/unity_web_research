struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3273 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3705 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3843 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1848 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3358 : f32;
  var x_3369 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu5 : u32;
  var u_xlati73 : i32;
  var u_xlati5 : i32;
  var u_xlati52 : i32;
  var u_xlat56 : vec2<f32>;
  var u_xlatb52 : vec2<bool>;
  var x_4143 : f32;
  var x_4156 : f32;
  var x_4208 : f32;
  var x_4220 : vec3<f32>;
  var x_4403 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1818 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1818 == 0.0f);
  let x_1821 : vec3<f32> = vs_INTERP0;
  let x_1825 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1821) + x_1825);
  let x_1827 : vec3<f32> = u_xlat27;
  let x_1828 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1827, x_1828);
  let x_1830 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1830);
  let x_1832 : f32 = u_xlat67;
  let x_1834 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1832, x_1832, x_1832) * x_1834);
  let x_1838 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat6.x = x_1838;
  let x_1841 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat6.y = x_1841;
  let x_1844 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat6.z = x_1844;
  let x_1847 : bool = u_xlatb23.x;
  if (x_1847) {
    let x_1851 : vec3<f32> = u_xlat27;
    x_1848 = x_1851;
  } else {
    let x_1853 : vec4<f32> = u_xlat6;
    x_1848 = vec3<f32>(x_1853.x, x_1853.y, x_1853.z);
  }
  let x_1855 : vec3<f32> = x_1848;
  u_xlat27 = x_1855;
  let x_1857 : f32 = vs_INTERP0.y;
  let x_1859 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1857 * x_1859);
  let x_1863 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1865 : f32 = vs_INTERP0.x;
  let x_1868 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1863 * x_1865) + x_1868);
  let x_1872 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1874 : f32 = vs_INTERP0.z;
  let x_1877 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1872 * x_1874) + x_1877);
  let x_1881 : f32 = u_xlat23.x;
  let x_1883 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1881 + x_1883);
  let x_1887 : f32 = u_xlat23.x;
  let x_1890 : f32 = x_66.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1887) + -(x_1890));
  let x_1895 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1895, 0.0f);
  let x_1899 : f32 = u_xlat23.x;
  let x_1902 : f32 = x_66.unity_FogParams.x;
  u_xlat23.x = (x_1899 * x_1902);
  let x_1912 : vec2<f32> = vs_INTERP5;
  let x_1914 : f32 = x_66.x_GlobalMipBias.x;
  let x_1915 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1912, x_1914);
  let x_1916 : vec3<f32> = vec3<f32>(x_1915.x, x_1915.y, x_1915.z);
  let x_1917 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1916.x, x_1916.y, x_1916.z, x_1917.w);
  let x_1920 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1921 : vec2<f32> = vec2<f32>(x_1920.x, x_1920.y);
  let x_1925 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1921.x, x_1921.y));
  let x_1926 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1925.x, x_1925.y, x_1926.z, x_1926.w);
  let x_1928 : vec4<f32> = u_xlat7;
  let x_1930 : vec4<f32> = hlslcc_FragCoord;
  let x_1932 : vec2<f32> = (vec2<f32>(x_1928.x, x_1928.y) * vec2<f32>(x_1930.x, x_1930.y));
  let x_1933 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1932.x, x_1932.y, x_1933.z, x_1933.w);
  let x_1936 : f32 = u_xlat7.y;
  let x_1939 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1942 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat67 = ((x_1936 * x_1939) + x_1942);
  let x_1944 : f32 = u_xlat67;
  u_xlat7.z = (-(x_1944) + 1.0f);
  let x_1949 : f32 = u_xlat3.x;
  u_xlat3.x = x_1949;
  let x_1952 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1952, 0.0f, 1.0f);
  let x_1956 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1956, 1.0f);
  let x_1959 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1959 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1964 : f32 = u_xlat3.x;
  u_xlat67 = (-(x_1964) + 1.0f);
  let x_1967 : f32 = u_xlat67;
  let x_1968 : f32 = u_xlat67;
  u_xlat68 = (x_1967 * x_1968);
  let x_1970 : f32 = u_xlat68;
  u_xlat68 = max(x_1970, 0.0078125f);
  let x_1974 : f32 = u_xlat68;
  let x_1975 : f32 = u_xlat68;
  u_xlat72 = (x_1974 * x_1975);
  let x_1978 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1978 + 0.040000021f);
  let x_1983 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1983, 1.0f);
  let x_1986 : f32 = u_xlat68;
  u_xlat29.x = ((x_1986 * 4.0f) + 2.0f);
  let x_1995 : vec4<f32> = u_xlat7;
  let x_1998 : f32 = x_66.x_GlobalMipBias.x;
  let x_1999 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1995.x, x_1995.z), x_1998);
  u_xlat7.x = x_1999.x;
  let x_2003 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2003 + -1.0f);
  let x_2007 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2009 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2007 * x_2009) + 1.0f);
  let x_2014 : f32 = u_xlat7.x;
  let x_2016 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2014, x_2016);
  let x_2019 : bool = u_xlatb66;
  if (x_2019) {
    let x_2023 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2023 == 1.0f);
    let x_2025 : bool = u_xlatb66;
    if (x_2025) {
      let x_2028 : vec4<f32> = u_xlat4;
      let x_2031 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2028.x, x_2028.y, x_2028.x, x_2028.y) + x_2031);
      let x_2034 : vec4<f32> = u_xlat8;
      let x_2035 : vec2<f32> = vec2<f32>(x_2034.x, x_2034.y);
      let x_2037 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2035.x, x_2035.y, x_2037);
      let x_2044 : vec3<f32> = txVec30;
      let x_2046 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2044.xy, x_2044.z);
      u_xlat9.x = x_2046;
      let x_2049 : vec4<f32> = u_xlat8;
      let x_2050 : vec2<f32> = vec2<f32>(x_2049.z, x_2049.w);
      let x_2052 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2050.x, x_2050.y, x_2052);
      let x_2059 : vec3<f32> = txVec31;
      let x_2061 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2059.xy, x_2059.z);
      u_xlat9.y = x_2061;
      let x_2063 : vec4<f32> = u_xlat4;
      let x_2066 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2063.x, x_2063.y, x_2063.x, x_2063.y) + x_2066);
      let x_2069 : vec4<f32> = u_xlat8;
      let x_2070 : vec2<f32> = vec2<f32>(x_2069.x, x_2069.y);
      let x_2072 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2070.x, x_2070.y, x_2072);
      let x_2079 : vec3<f32> = txVec32;
      let x_2081 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2079.xy, x_2079.z);
      u_xlat9.z = x_2081;
      let x_2084 : vec4<f32> = u_xlat8;
      let x_2085 : vec2<f32> = vec2<f32>(x_2084.z, x_2084.w);
      let x_2087 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2085.x, x_2085.y, x_2087);
      let x_2094 : vec3<f32> = txVec33;
      let x_2096 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2094.xy, x_2094.z);
      u_xlat9.w = x_2096;
      let x_2098 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2098, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2103 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2103 == 2.0f);
      let x_2105 : bool = u_xlatb73;
      if (x_2105) {
        let x_2108 : vec4<f32> = u_xlat4;
        let x_2111 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2114 : vec2<f32> = ((vec2<f32>(x_2108.x, x_2108.y) * vec2<f32>(x_2111.z, x_2111.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2115 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2114.x, x_2114.y, x_2115.z, x_2115.w);
        let x_2117 : vec4<f32> = u_xlat8;
        let x_2119 : vec2<f32> = floor(vec2<f32>(x_2117.x, x_2117.y));
        let x_2120 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2119.x, x_2119.y, x_2120.z, x_2120.w);
        let x_2122 : vec4<f32> = u_xlat4;
        let x_2125 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2128 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2122.x, x_2122.y) * vec2<f32>(x_2125.z, x_2125.w)) + -(vec2<f32>(x_2128.x, x_2128.y)));
        let x_2132 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2132.x, x_2132.x, x_2132.y, x_2132.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2135 : vec4<f32> = u_xlat9;
        let x_2137 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2135.x, x_2135.x, x_2135.z, x_2135.z) * vec4<f32>(x_2137.x, x_2137.x, x_2137.z, x_2137.z));
        let x_2140 : vec4<f32> = u_xlat10;
        let x_2142 : vec2<f32> = (vec2<f32>(x_2140.y, x_2140.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2143 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2142.x, x_2143.y, x_2142.y, x_2143.w);
        let x_2145 : vec4<f32> = u_xlat10;
        let x_2148 : vec2<f32> = u_xlat52;
        let x_2150 : vec2<f32> = ((vec2<f32>(x_2145.x, x_2145.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2148));
        let x_2151 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2150.x, x_2150.y, x_2151.z, x_2151.w);
        let x_2154 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2154) + vec2<f32>(1.0f, 1.0f));
        let x_2157 : vec2<f32> = u_xlat52;
        let x_2158 : vec2<f32> = min(x_2157, vec2<f32>(0.0f, 0.0f));
        let x_2159 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2158.x, x_2158.y, x_2159.z, x_2159.w);
        let x_2161 : vec4<f32> = u_xlat11;
        let x_2164 : vec4<f32> = u_xlat11;
        let x_2167 : vec2<f32> = u_xlat54;
        let x_2168 : vec2<f32> = ((-(vec2<f32>(x_2161.x, x_2161.y)) * vec2<f32>(x_2164.x, x_2164.y)) + x_2167);
        let x_2169 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2168.x, x_2168.y, x_2169.z, x_2169.w);
        let x_2171 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2171, vec2<f32>(0.0f, 0.0f));
        let x_2173 : vec2<f32> = u_xlat52;
        let x_2175 : vec2<f32> = u_xlat52;
        let x_2177 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2173) * x_2175) + vec2<f32>(x_2177.y, x_2177.w));
        let x_2180 : vec4<f32> = u_xlat11;
        let x_2182 : vec2<f32> = (vec2<f32>(x_2180.x, x_2180.y) + vec2<f32>(1.0f, 1.0f));
        let x_2183 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2182.x, x_2182.y, x_2183.z, x_2183.w);
        let x_2185 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2185 + vec2<f32>(1.0f, 1.0f));
        let x_2187 : vec4<f32> = u_xlat10;
        let x_2189 : vec2<f32> = (vec2<f32>(x_2187.x, x_2187.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2190 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2189.x, x_2189.y, x_2190.z, x_2190.w);
        let x_2192 : vec2<f32> = u_xlat54;
        let x_2193 : vec2<f32> = (x_2192 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2194 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2193.x, x_2193.y, x_2194.z, x_2194.w);
        let x_2196 : vec4<f32> = u_xlat11;
        let x_2198 : vec2<f32> = (vec2<f32>(x_2196.x, x_2196.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2199 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2198.x, x_2198.y, x_2199.z, x_2199.w);
        let x_2201 : vec2<f32> = u_xlat52;
        let x_2202 : vec2<f32> = (x_2201 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2203 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2202.x, x_2202.y, x_2203.z, x_2203.w);
        let x_2205 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2205.y, x_2205.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2209 : f32 = u_xlat11.x;
        u_xlat12.z = x_2209;
        let x_2212 : f32 = u_xlat52.x;
        u_xlat12.w = x_2212;
        let x_2215 : f32 = u_xlat13.x;
        u_xlat10.z = x_2215;
        let x_2218 : f32 = u_xlat9.x;
        u_xlat10.w = x_2218;
        let x_2220 : vec4<f32> = u_xlat10;
        let x_2222 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2220.z, x_2220.w, x_2220.x, x_2220.z) + vec4<f32>(x_2222.z, x_2222.w, x_2222.x, x_2222.z));
        let x_2226 : f32 = u_xlat12.y;
        u_xlat11.z = x_2226;
        let x_2229 : f32 = u_xlat52.y;
        u_xlat11.w = x_2229;
        let x_2232 : f32 = u_xlat10.y;
        u_xlat13.z = x_2232;
        let x_2235 : f32 = u_xlat9.z;
        u_xlat13.w = x_2235;
        let x_2237 : vec4<f32> = u_xlat11;
        let x_2239 : vec4<f32> = u_xlat13;
        let x_2241 : vec3<f32> = (vec3<f32>(x_2237.z, x_2237.y, x_2237.w) + vec3<f32>(x_2239.z, x_2239.y, x_2239.w));
        let x_2242 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2241.x, x_2241.y, x_2241.z, x_2242.w);
        let x_2244 : vec4<f32> = u_xlat10;
        let x_2246 : vec4<f32> = u_xlat14;
        let x_2248 : vec3<f32> = (vec3<f32>(x_2244.x, x_2244.z, x_2244.w) / vec3<f32>(x_2246.z, x_2246.w, x_2246.y));
        let x_2249 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2248.x, x_2248.y, x_2248.z, x_2249.w);
        let x_2251 : vec4<f32> = u_xlat10;
        let x_2253 : vec3<f32> = (vec3<f32>(x_2251.x, x_2251.y, x_2251.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2254 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2253.x, x_2253.y, x_2253.z, x_2254.w);
        let x_2256 : vec4<f32> = u_xlat13;
        let x_2258 : vec4<f32> = u_xlat9;
        let x_2260 : vec3<f32> = (vec3<f32>(x_2256.z, x_2256.y, x_2256.w) / vec3<f32>(x_2258.x, x_2258.y, x_2258.z));
        let x_2261 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2260.x, x_2260.y, x_2260.z, x_2261.w);
        let x_2263 : vec4<f32> = u_xlat11;
        let x_2265 : vec3<f32> = (vec3<f32>(x_2263.x, x_2263.y, x_2263.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2266 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2265.x, x_2265.y, x_2265.z, x_2266.w);
        let x_2268 : vec4<f32> = u_xlat10;
        let x_2271 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2273 : vec3<f32> = (vec3<f32>(x_2268.y, x_2268.x, x_2268.z) * vec3<f32>(x_2271.x, x_2271.x, x_2271.x));
        let x_2274 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2273.x, x_2273.y, x_2273.z, x_2274.w);
        let x_2276 : vec4<f32> = u_xlat11;
        let x_2279 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2281 : vec3<f32> = (vec3<f32>(x_2276.x, x_2276.y, x_2276.z) * vec3<f32>(x_2279.y, x_2279.y, x_2279.y));
        let x_2282 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2281.x, x_2281.y, x_2281.z, x_2282.w);
        let x_2285 : f32 = u_xlat11.x;
        u_xlat10.w = x_2285;
        let x_2287 : vec4<f32> = u_xlat8;
        let x_2290 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2293 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2287.x, x_2287.y, x_2287.x, x_2287.y) * vec4<f32>(x_2290.x, x_2290.y, x_2290.x, x_2290.y)) + vec4<f32>(x_2293.y, x_2293.w, x_2293.x, x_2293.w));
        let x_2296 : vec4<f32> = u_xlat8;
        let x_2299 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2302 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2296.x, x_2296.y) * vec2<f32>(x_2299.x, x_2299.y)) + vec2<f32>(x_2302.z, x_2302.w));
        let x_2306 : f32 = u_xlat10.y;
        u_xlat11.w = x_2306;
        let x_2308 : vec4<f32> = u_xlat11;
        let x_2309 : vec2<f32> = vec2<f32>(x_2308.y, x_2308.z);
        let x_2310 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2310.x, x_2309.x, x_2310.z, x_2309.y);
        let x_2312 : vec4<f32> = u_xlat8;
        let x_2315 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2318 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2312.x, x_2312.y, x_2312.x, x_2312.y) * vec4<f32>(x_2315.x, x_2315.y, x_2315.x, x_2315.y)) + vec4<f32>(x_2318.x, x_2318.y, x_2318.z, x_2318.y));
        let x_2321 : vec4<f32> = u_xlat8;
        let x_2324 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2327 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2321.x, x_2321.y, x_2321.x, x_2321.y) * vec4<f32>(x_2324.x, x_2324.y, x_2324.x, x_2324.y)) + vec4<f32>(x_2327.w, x_2327.y, x_2327.w, x_2327.z));
        let x_2330 : vec4<f32> = u_xlat8;
        let x_2333 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2336 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2330.x, x_2330.y, x_2330.x, x_2330.y) * vec4<f32>(x_2333.x, x_2333.y, x_2333.x, x_2333.y)) + vec4<f32>(x_2336.x, x_2336.w, x_2336.z, x_2336.w));
        let x_2339 : vec4<f32> = u_xlat9;
        let x_2341 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2339.x, x_2339.x, x_2339.x, x_2339.y) * vec4<f32>(x_2341.z, x_2341.w, x_2341.y, x_2341.z));
        let x_2344 : vec4<f32> = u_xlat9;
        let x_2346 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2344.y, x_2344.y, x_2344.z, x_2344.z) * x_2346);
        let x_2350 : f32 = u_xlat9.z;
        let x_2352 : f32 = u_xlat14.y;
        u_xlat73 = (x_2350 * x_2352);
        let x_2355 : vec4<f32> = u_xlat12;
        let x_2356 : vec2<f32> = vec2<f32>(x_2355.x, x_2355.y);
        let x_2358 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2356.x, x_2356.y, x_2358);
        let x_2365 : vec3<f32> = txVec34;
        let x_2367 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2365.xy, x_2365.z);
        u_xlat8.x = x_2367;
        let x_2370 : vec4<f32> = u_xlat12;
        let x_2371 : vec2<f32> = vec2<f32>(x_2370.z, x_2370.w);
        let x_2373 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2371.x, x_2371.y, x_2373);
        let x_2381 : vec3<f32> = txVec35;
        let x_2383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2381.xy, x_2381.z);
        u_xlat30 = x_2383;
        let x_2384 : f32 = u_xlat30;
        let x_2386 : f32 = u_xlat15.y;
        u_xlat30 = (x_2384 * x_2386);
        let x_2389 : f32 = u_xlat15.x;
        let x_2391 : f32 = u_xlat8.x;
        let x_2393 : f32 = u_xlat30;
        u_xlat8.x = ((x_2389 * x_2391) + x_2393);
        let x_2397 : vec2<f32> = u_xlat52;
        let x_2399 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2397.x, x_2397.y, x_2399);
        let x_2406 : vec3<f32> = txVec36;
        let x_2408 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2406.xy, x_2406.z);
        u_xlat30 = x_2408;
        let x_2410 : f32 = u_xlat15.z;
        let x_2411 : f32 = u_xlat30;
        let x_2414 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2410 * x_2411) + x_2414);
        let x_2418 : vec4<f32> = u_xlat11;
        let x_2419 : vec2<f32> = vec2<f32>(x_2418.x, x_2418.y);
        let x_2421 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2419.x, x_2419.y, x_2421);
        let x_2428 : vec3<f32> = txVec37;
        let x_2430 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2428.xy, x_2428.z);
        u_xlat30 = x_2430;
        let x_2432 : f32 = u_xlat15.w;
        let x_2433 : f32 = u_xlat30;
        let x_2436 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2432 * x_2433) + x_2436);
        let x_2440 : vec4<f32> = u_xlat13;
        let x_2441 : vec2<f32> = vec2<f32>(x_2440.x, x_2440.y);
        let x_2443 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2441.x, x_2441.y, x_2443);
        let x_2450 : vec3<f32> = txVec38;
        let x_2452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2450.xy, x_2450.z);
        u_xlat30 = x_2452;
        let x_2454 : f32 = u_xlat16.x;
        let x_2455 : f32 = u_xlat30;
        let x_2458 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2454 * x_2455) + x_2458);
        let x_2462 : vec4<f32> = u_xlat13;
        let x_2463 : vec2<f32> = vec2<f32>(x_2462.z, x_2462.w);
        let x_2465 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2463.x, x_2463.y, x_2465);
        let x_2472 : vec3<f32> = txVec39;
        let x_2474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2472.xy, x_2472.z);
        u_xlat30 = x_2474;
        let x_2476 : f32 = u_xlat16.y;
        let x_2477 : f32 = u_xlat30;
        let x_2480 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2476 * x_2477) + x_2480);
        let x_2484 : vec4<f32> = u_xlat11;
        let x_2485 : vec2<f32> = vec2<f32>(x_2484.z, x_2484.w);
        let x_2487 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2485.x, x_2485.y, x_2487);
        let x_2494 : vec3<f32> = txVec40;
        let x_2496 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2494.xy, x_2494.z);
        u_xlat30 = x_2496;
        let x_2498 : f32 = u_xlat16.z;
        let x_2499 : f32 = u_xlat30;
        let x_2502 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2498 * x_2499) + x_2502);
        let x_2506 : vec4<f32> = u_xlat10;
        let x_2507 : vec2<f32> = vec2<f32>(x_2506.x, x_2506.y);
        let x_2509 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2507.x, x_2507.y, x_2509);
        let x_2516 : vec3<f32> = txVec41;
        let x_2518 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2516.xy, x_2516.z);
        u_xlat30 = x_2518;
        let x_2520 : f32 = u_xlat16.w;
        let x_2521 : f32 = u_xlat30;
        let x_2524 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2520 * x_2521) + x_2524);
        let x_2528 : vec4<f32> = u_xlat10;
        let x_2529 : vec2<f32> = vec2<f32>(x_2528.z, x_2528.w);
        let x_2531 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2529.x, x_2529.y, x_2531);
        let x_2538 : vec3<f32> = txVec42;
        let x_2540 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2538.xy, x_2538.z);
        u_xlat30 = x_2540;
        let x_2541 : f32 = u_xlat73;
        let x_2542 : f32 = u_xlat30;
        let x_2545 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2541 * x_2542) + x_2545);
      } else {
        let x_2548 : vec4<f32> = u_xlat4;
        let x_2551 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2554 : vec2<f32> = ((vec2<f32>(x_2548.x, x_2548.y) * vec2<f32>(x_2551.z, x_2551.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2555 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2554.x, x_2554.y, x_2555.z, x_2555.w);
        let x_2557 : vec4<f32> = u_xlat8;
        let x_2559 : vec2<f32> = floor(vec2<f32>(x_2557.x, x_2557.y));
        let x_2560 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2559.x, x_2559.y, x_2560.z, x_2560.w);
        let x_2562 : vec4<f32> = u_xlat4;
        let x_2565 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2568 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2562.x, x_2562.y) * vec2<f32>(x_2565.z, x_2565.w)) + -(vec2<f32>(x_2568.x, x_2568.y)));
        let x_2572 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2572.x, x_2572.x, x_2572.y, x_2572.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2575 : vec4<f32> = u_xlat9;
        let x_2577 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2575.x, x_2575.x, x_2575.z, x_2575.z) * vec4<f32>(x_2577.x, x_2577.x, x_2577.z, x_2577.z));
        let x_2580 : vec4<f32> = u_xlat10;
        let x_2582 : vec2<f32> = (vec2<f32>(x_2580.y, x_2580.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2583 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2583.x, x_2582.x, x_2583.z, x_2582.y);
        let x_2585 : vec4<f32> = u_xlat10;
        let x_2588 : vec2<f32> = u_xlat52;
        let x_2590 : vec2<f32> = ((vec2<f32>(x_2585.x, x_2585.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2588));
        let x_2591 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2590.x, x_2591.y, x_2590.y, x_2591.w);
        let x_2593 : vec2<f32> = u_xlat52;
        let x_2595 : vec2<f32> = (-(x_2593) + vec2<f32>(1.0f, 1.0f));
        let x_2596 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2595.x, x_2595.y, x_2596.z, x_2596.w);
        let x_2598 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2598, vec2<f32>(0.0f, 0.0f));
        let x_2600 : vec2<f32> = u_xlat54;
        let x_2602 : vec2<f32> = u_xlat54;
        let x_2604 : vec4<f32> = u_xlat10;
        let x_2606 : vec2<f32> = ((-(x_2600) * x_2602) + vec2<f32>(x_2604.x, x_2604.y));
        let x_2607 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2606.x, x_2606.y, x_2607.z, x_2607.w);
        let x_2609 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2609, vec2<f32>(0.0f, 0.0f));
        let x_2612 : vec2<f32> = u_xlat54;
        let x_2614 : vec2<f32> = u_xlat54;
        let x_2616 : vec4<f32> = u_xlat9;
        let x_2618 : vec2<f32> = ((-(x_2612) * x_2614) + vec2<f32>(x_2616.y, x_2616.w));
        let x_2619 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2618.x, x_2619.y, x_2618.y);
        let x_2621 : vec4<f32> = u_xlat10;
        let x_2623 : vec2<f32> = (vec2<f32>(x_2621.x, x_2621.y) + vec2<f32>(2.0f, 2.0f));
        let x_2624 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2623.x, x_2623.y, x_2624.z, x_2624.w);
        let x_2626 : vec3<f32> = u_xlat31;
        let x_2628 : vec2<f32> = (vec2<f32>(x_2626.x, x_2626.z) + vec2<f32>(2.0f, 2.0f));
        let x_2629 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2629.x, x_2628.x, x_2629.z, x_2628.y);
        let x_2632 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2632 * 0.081632003f);
        let x_2635 : vec4<f32> = u_xlat9;
        let x_2637 : vec3<f32> = (vec3<f32>(x_2635.z, x_2635.x, x_2635.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2638 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2637.x, x_2637.y, x_2637.z, x_2638.w);
        let x_2640 : vec4<f32> = u_xlat10;
        let x_2642 : vec2<f32> = (vec2<f32>(x_2640.x, x_2640.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2642.x, x_2642.y, x_2643.z, x_2643.w);
        let x_2646 : f32 = u_xlat13.y;
        u_xlat12.x = x_2646;
        let x_2648 : vec2<f32> = u_xlat52;
        let x_2651 : vec2<f32> = ((vec2<f32>(x_2648.x, x_2648.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2652 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2652.x, x_2651.x, x_2652.z, x_2651.y);
        let x_2654 : vec2<f32> = u_xlat52;
        let x_2657 : vec2<f32> = ((vec2<f32>(x_2654.x, x_2654.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2658 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2657.x, x_2658.y, x_2657.y, x_2658.w);
        let x_2661 : f32 = u_xlat9.x;
        u_xlat10.y = x_2661;
        let x_2664 : f32 = u_xlat11.y;
        u_xlat10.w = x_2664;
        let x_2666 : vec4<f32> = u_xlat10;
        let x_2667 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2666 + x_2667);
        let x_2669 : vec2<f32> = u_xlat52;
        let x_2672 : vec2<f32> = ((vec2<f32>(x_2669.y, x_2669.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2673 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2673.x, x_2672.x, x_2673.z, x_2672.y);
        let x_2675 : vec2<f32> = u_xlat52;
        let x_2678 : vec2<f32> = ((vec2<f32>(x_2675.y, x_2675.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2679 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2678.x, x_2679.y, x_2678.y, x_2679.w);
        let x_2682 : f32 = u_xlat9.y;
        u_xlat11.y = x_2682;
        let x_2684 : vec4<f32> = u_xlat11;
        let x_2685 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2684 + x_2685);
        let x_2687 : vec4<f32> = u_xlat10;
        let x_2688 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2687 / x_2688);
        let x_2690 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2690 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2692 : vec4<f32> = u_xlat11;
        let x_2693 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2692 / x_2693);
        let x_2695 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2695 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2697 : vec4<f32> = u_xlat10;
        let x_2700 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2697.w, x_2697.x, x_2697.y, x_2697.z) * vec4<f32>(x_2700.x, x_2700.x, x_2700.x, x_2700.x));
        let x_2703 : vec4<f32> = u_xlat11;
        let x_2706 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2703.x, x_2703.w, x_2703.y, x_2703.z) * vec4<f32>(x_2706.y, x_2706.y, x_2706.y, x_2706.y));
        let x_2709 : vec4<f32> = u_xlat10;
        let x_2710 : vec3<f32> = vec3<f32>(x_2709.y, x_2709.z, x_2709.w);
        let x_2711 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2710.x, x_2711.y, x_2710.y, x_2710.z);
        let x_2714 : f32 = u_xlat11.x;
        u_xlat13.y = x_2714;
        let x_2716 : vec4<f32> = u_xlat8;
        let x_2719 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2722 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2716.x, x_2716.y, x_2716.x, x_2716.y) * vec4<f32>(x_2719.x, x_2719.y, x_2719.x, x_2719.y)) + vec4<f32>(x_2722.x, x_2722.y, x_2722.z, x_2722.y));
        let x_2725 : vec4<f32> = u_xlat8;
        let x_2728 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2731 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2725.x, x_2725.y) * vec2<f32>(x_2728.x, x_2728.y)) + vec2<f32>(x_2731.w, x_2731.y));
        let x_2735 : f32 = u_xlat13.y;
        u_xlat10.y = x_2735;
        let x_2738 : f32 = u_xlat11.z;
        u_xlat13.y = x_2738;
        let x_2740 : vec4<f32> = u_xlat8;
        let x_2743 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2746 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2740.x, x_2740.y, x_2740.x, x_2740.y) * vec4<f32>(x_2743.x, x_2743.y, x_2743.x, x_2743.y)) + vec4<f32>(x_2746.x, x_2746.y, x_2746.z, x_2746.y));
        let x_2749 : vec4<f32> = u_xlat8;
        let x_2752 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2755 : vec4<f32> = u_xlat13;
        let x_2757 : vec2<f32> = ((vec2<f32>(x_2749.x, x_2749.y) * vec2<f32>(x_2752.x, x_2752.y)) + vec2<f32>(x_2755.w, x_2755.y));
        let x_2758 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2757.x, x_2757.y, x_2758.z, x_2758.w);
        let x_2761 : f32 = u_xlat13.y;
        u_xlat10.z = x_2761;
        let x_2763 : vec4<f32> = u_xlat8;
        let x_2766 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2769 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2763.x, x_2763.y, x_2763.x, x_2763.y) * vec4<f32>(x_2766.x, x_2766.y, x_2766.x, x_2766.y)) + vec4<f32>(x_2769.x, x_2769.y, x_2769.x, x_2769.z));
        let x_2773 : f32 = u_xlat11.w;
        u_xlat13.y = x_2773;
        let x_2775 : vec4<f32> = u_xlat8;
        let x_2778 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2781 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2775.x, x_2775.y, x_2775.x, x_2775.y) * vec4<f32>(x_2778.x, x_2778.y, x_2778.x, x_2778.y)) + vec4<f32>(x_2781.x, x_2781.y, x_2781.z, x_2781.y));
        let x_2785 : vec4<f32> = u_xlat8;
        let x_2788 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2791 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2785.x, x_2785.y) * vec2<f32>(x_2788.x, x_2788.y)) + vec2<f32>(x_2791.w, x_2791.y));
        let x_2795 : f32 = u_xlat13.y;
        u_xlat10.w = x_2795;
        let x_2798 : vec4<f32> = u_xlat8;
        let x_2801 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2804 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2798.x, x_2798.y) * vec2<f32>(x_2801.x, x_2801.y)) + vec2<f32>(x_2804.x, x_2804.w));
        let x_2807 : vec4<f32> = u_xlat13;
        let x_2808 : vec3<f32> = vec3<f32>(x_2807.x, x_2807.z, x_2807.w);
        let x_2809 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2808.x, x_2809.y, x_2808.y, x_2808.z);
        let x_2811 : vec4<f32> = u_xlat8;
        let x_2814 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2817 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2811.x, x_2811.y, x_2811.x, x_2811.y) * vec4<f32>(x_2814.x, x_2814.y, x_2814.x, x_2814.y)) + vec4<f32>(x_2817.x, x_2817.y, x_2817.z, x_2817.y));
        let x_2821 : vec4<f32> = u_xlat8;
        let x_2824 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2827 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2821.x, x_2821.y) * vec2<f32>(x_2824.x, x_2824.y)) + vec2<f32>(x_2827.w, x_2827.y));
        let x_2831 : f32 = u_xlat10.x;
        u_xlat11.x = x_2831;
        let x_2833 : vec4<f32> = u_xlat8;
        let x_2836 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2839 : vec4<f32> = u_xlat11;
        let x_2841 : vec2<f32> = ((vec2<f32>(x_2833.x, x_2833.y) * vec2<f32>(x_2836.x, x_2836.y)) + vec2<f32>(x_2839.x, x_2839.y));
        let x_2842 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2841.x, x_2841.y, x_2842.z, x_2842.w);
        let x_2845 : vec4<f32> = u_xlat9;
        let x_2847 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2845.x, x_2845.x, x_2845.x, x_2845.x) * x_2847);
        let x_2850 : vec4<f32> = u_xlat9;
        let x_2852 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2850.y, x_2850.y, x_2850.y, x_2850.y) * x_2852);
        let x_2855 : vec4<f32> = u_xlat9;
        let x_2857 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2855.z, x_2855.z, x_2855.z, x_2855.z) * x_2857);
        let x_2859 : vec4<f32> = u_xlat9;
        let x_2861 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2859.w, x_2859.w, x_2859.w, x_2859.w) * x_2861);
        let x_2864 : vec4<f32> = u_xlat14;
        let x_2865 : vec2<f32> = vec2<f32>(x_2864.x, x_2864.y);
        let x_2867 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2865.x, x_2865.y, x_2867);
        let x_2874 : vec3<f32> = txVec43;
        let x_2876 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2874.xy, x_2874.z);
        u_xlat73 = x_2876;
        let x_2878 : vec4<f32> = u_xlat14;
        let x_2879 : vec2<f32> = vec2<f32>(x_2878.z, x_2878.w);
        let x_2881 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2879.x, x_2879.y, x_2881);
        let x_2888 : vec3<f32> = txVec44;
        let x_2890 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2888.xy, x_2888.z);
        u_xlat10.x = x_2890;
        let x_2893 : f32 = u_xlat10.x;
        let x_2895 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2893 * x_2895);
        let x_2899 : f32 = u_xlat19.x;
        let x_2900 : f32 = u_xlat73;
        let x_2903 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2899 * x_2900) + x_2903);
        let x_2906 : vec2<f32> = u_xlat52;
        let x_2908 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2906.x, x_2906.y, x_2908);
        let x_2915 : vec3<f32> = txVec45;
        let x_2917 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2915.xy, x_2915.z);
        u_xlat52.x = x_2917;
        let x_2920 : f32 = u_xlat19.z;
        let x_2922 : f32 = u_xlat52.x;
        let x_2924 : f32 = u_xlat73;
        u_xlat73 = ((x_2920 * x_2922) + x_2924);
        let x_2927 : vec4<f32> = u_xlat17;
        let x_2928 : vec2<f32> = vec2<f32>(x_2927.x, x_2927.y);
        let x_2930 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2928.x, x_2928.y, x_2930);
        let x_2937 : vec3<f32> = txVec46;
        let x_2939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2937.xy, x_2937.z);
        u_xlat52.x = x_2939;
        let x_2942 : f32 = u_xlat19.w;
        let x_2944 : f32 = u_xlat52.x;
        let x_2946 : f32 = u_xlat73;
        u_xlat73 = ((x_2942 * x_2944) + x_2946);
        let x_2949 : vec4<f32> = u_xlat15;
        let x_2950 : vec2<f32> = vec2<f32>(x_2949.x, x_2949.y);
        let x_2952 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2950.x, x_2950.y, x_2952);
        let x_2959 : vec3<f32> = txVec47;
        let x_2961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2959.xy, x_2959.z);
        u_xlat52.x = x_2961;
        let x_2964 : f32 = u_xlat20.x;
        let x_2966 : f32 = u_xlat52.x;
        let x_2968 : f32 = u_xlat73;
        u_xlat73 = ((x_2964 * x_2966) + x_2968);
        let x_2971 : vec4<f32> = u_xlat15;
        let x_2972 : vec2<f32> = vec2<f32>(x_2971.z, x_2971.w);
        let x_2974 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2972.x, x_2972.y, x_2974);
        let x_2981 : vec3<f32> = txVec48;
        let x_2983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2981.xy, x_2981.z);
        u_xlat52.x = x_2983;
        let x_2986 : f32 = u_xlat20.y;
        let x_2988 : f32 = u_xlat52.x;
        let x_2990 : f32 = u_xlat73;
        u_xlat73 = ((x_2986 * x_2988) + x_2990);
        let x_2993 : vec4<f32> = u_xlat16;
        let x_2994 : vec2<f32> = vec2<f32>(x_2993.x, x_2993.y);
        let x_2996 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_2994.x, x_2994.y, x_2996);
        let x_3003 : vec3<f32> = txVec49;
        let x_3005 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3003.xy, x_3003.z);
        u_xlat52.x = x_3005;
        let x_3008 : f32 = u_xlat20.z;
        let x_3010 : f32 = u_xlat52.x;
        let x_3012 : f32 = u_xlat73;
        u_xlat73 = ((x_3008 * x_3010) + x_3012);
        let x_3015 : vec4<f32> = u_xlat17;
        let x_3016 : vec2<f32> = vec2<f32>(x_3015.z, x_3015.w);
        let x_3018 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3016.x, x_3016.y, x_3018);
        let x_3025 : vec3<f32> = txVec50;
        let x_3027 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3025.xy, x_3025.z);
        u_xlat52.x = x_3027;
        let x_3030 : f32 = u_xlat20.w;
        let x_3032 : f32 = u_xlat52.x;
        let x_3034 : f32 = u_xlat73;
        u_xlat73 = ((x_3030 * x_3032) + x_3034);
        let x_3037 : vec4<f32> = u_xlat18;
        let x_3038 : vec2<f32> = vec2<f32>(x_3037.x, x_3037.y);
        let x_3040 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3038.x, x_3038.y, x_3040);
        let x_3047 : vec3<f32> = txVec51;
        let x_3049 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3047.xy, x_3047.z);
        u_xlat52.x = x_3049;
        let x_3052 : f32 = u_xlat21.x;
        let x_3054 : f32 = u_xlat52.x;
        let x_3056 : f32 = u_xlat73;
        u_xlat73 = ((x_3052 * x_3054) + x_3056);
        let x_3059 : vec4<f32> = u_xlat18;
        let x_3060 : vec2<f32> = vec2<f32>(x_3059.z, x_3059.w);
        let x_3062 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3060.x, x_3060.y, x_3062);
        let x_3069 : vec3<f32> = txVec52;
        let x_3071 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3069.xy, x_3069.z);
        u_xlat52.x = x_3071;
        let x_3074 : f32 = u_xlat21.y;
        let x_3076 : f32 = u_xlat52.x;
        let x_3078 : f32 = u_xlat73;
        u_xlat73 = ((x_3074 * x_3076) + x_3078);
        let x_3081 : vec2<f32> = u_xlat32;
        let x_3083 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3081.x, x_3081.y, x_3083);
        let x_3090 : vec3<f32> = txVec53;
        let x_3092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3090.xy, x_3090.z);
        u_xlat52.x = x_3092;
        let x_3095 : f32 = u_xlat21.z;
        let x_3097 : f32 = u_xlat52.x;
        let x_3099 : f32 = u_xlat73;
        u_xlat73 = ((x_3095 * x_3097) + x_3099);
        let x_3102 : vec2<f32> = u_xlat60;
        let x_3104 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3102.x, x_3102.y, x_3104);
        let x_3111 : vec3<f32> = txVec54;
        let x_3113 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3111.xy, x_3111.z);
        u_xlat52.x = x_3113;
        let x_3116 : f32 = u_xlat21.w;
        let x_3118 : f32 = u_xlat52.x;
        let x_3120 : f32 = u_xlat73;
        u_xlat73 = ((x_3116 * x_3118) + x_3120);
        let x_3123 : vec4<f32> = u_xlat13;
        let x_3124 : vec2<f32> = vec2<f32>(x_3123.x, x_3123.y);
        let x_3126 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3124.x, x_3124.y, x_3126);
        let x_3133 : vec3<f32> = txVec55;
        let x_3135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3133.xy, x_3133.z);
        u_xlat52.x = x_3135;
        let x_3138 : f32 = u_xlat9.x;
        let x_3140 : f32 = u_xlat52.x;
        let x_3142 : f32 = u_xlat73;
        u_xlat73 = ((x_3138 * x_3140) + x_3142);
        let x_3145 : vec4<f32> = u_xlat13;
        let x_3146 : vec2<f32> = vec2<f32>(x_3145.z, x_3145.w);
        let x_3148 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3146.x, x_3146.y, x_3148);
        let x_3155 : vec3<f32> = txVec56;
        let x_3157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3155.xy, x_3155.z);
        u_xlat52.x = x_3157;
        let x_3160 : f32 = u_xlat9.y;
        let x_3162 : f32 = u_xlat52.x;
        let x_3164 : f32 = u_xlat73;
        u_xlat73 = ((x_3160 * x_3162) + x_3164);
        let x_3167 : vec2<f32> = u_xlat55;
        let x_3169 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3167.x, x_3167.y, x_3169);
        let x_3176 : vec3<f32> = txVec57;
        let x_3178 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3176.xy, x_3176.z);
        u_xlat52.x = x_3178;
        let x_3181 : f32 = u_xlat9.z;
        let x_3183 : f32 = u_xlat52.x;
        let x_3185 : f32 = u_xlat73;
        u_xlat73 = ((x_3181 * x_3183) + x_3185);
        let x_3188 : vec4<f32> = u_xlat8;
        let x_3189 : vec2<f32> = vec2<f32>(x_3188.x, x_3188.y);
        let x_3191 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3189.x, x_3189.y, x_3191);
        let x_3198 : vec3<f32> = txVec58;
        let x_3200 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3198.xy, x_3198.z);
        u_xlat8.x = x_3200;
        let x_3203 : f32 = u_xlat9.w;
        let x_3205 : f32 = u_xlat8.x;
        let x_3207 : f32 = u_xlat73;
        u_xlat66 = ((x_3203 * x_3205) + x_3207);
      }
    }
  } else {
    let x_3211 : vec4<f32> = u_xlat4;
    let x_3212 : vec2<f32> = vec2<f32>(x_3211.x, x_3211.y);
    let x_3214 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3212.x, x_3212.y, x_3214);
    let x_3221 : vec3<f32> = txVec59;
    let x_3223 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3221.xy, x_3221.z);
    u_xlat66 = x_3223;
  }
  let x_3224 : f32 = u_xlat66;
  let x_3226 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3228 : f32 = u_xlat70;
  u_xlat66 = ((x_3224 * x_3226) + x_3228);
  let x_3230 : bool = u_xlatb5;
  let x_3231 : f32 = u_xlat66;
  u_xlat66 = select(x_3231, 1.0f, x_3230);
  let x_3233 : vec3<f32> = vs_INTERP0;
  let x_3235 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3237 : vec3<f32> = (x_3233 + -(x_3235));
  let x_3238 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3237.x, x_3237.y, x_3237.z, x_3238.w);
  let x_3240 : vec4<f32> = u_xlat4;
  let x_3242 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3240.x, x_3240.y, x_3240.z), vec3<f32>(x_3242.x, x_3242.y, x_3242.z));
  let x_3247 : f32 = u_xlat4.x;
  let x_3249 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3252 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3247 * x_3249) + x_3252);
  let x_3256 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3256, 0.0f, 1.0f);
  let x_3260 : f32 = u_xlat66;
  u_xlat26 = (-(x_3260) + 1.0f);
  let x_3264 : f32 = u_xlat4.x;
  let x_3265 : f32 = u_xlat26;
  let x_3267 : f32 = u_xlat66;
  u_xlat66 = ((x_3264 * x_3265) + x_3267);
  let x_3275 : f32 = x_3273.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3275 == -1.0f));
  let x_3279 : bool = u_xlatb4.x;
  if (x_3279) {
    let x_3282 : vec3<f32> = vs_INTERP0;
    let x_3285 : vec4<f32> = x_3273.x_MainLightWorldToLight[1i];
    let x_3287 : vec2<f32> = (vec2<f32>(x_3282.y, x_3282.y) * vec2<f32>(x_3285.x, x_3285.y));
    let x_3288 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3287.x, x_3287.y, x_3288.z, x_3288.w);
    let x_3291 : vec4<f32> = x_3273.x_MainLightWorldToLight[0i];
    let x_3293 : vec3<f32> = vs_INTERP0;
    let x_3296 : vec4<f32> = u_xlat4;
    let x_3298 : vec2<f32> = ((vec2<f32>(x_3291.x, x_3291.y) * vec2<f32>(x_3293.x, x_3293.x)) + vec2<f32>(x_3296.x, x_3296.y));
    let x_3299 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3298.x, x_3298.y, x_3299.z, x_3299.w);
    let x_3302 : vec4<f32> = x_3273.x_MainLightWorldToLight[2i];
    let x_3304 : vec3<f32> = vs_INTERP0;
    let x_3307 : vec4<f32> = u_xlat4;
    let x_3309 : vec2<f32> = ((vec2<f32>(x_3302.x, x_3302.y) * vec2<f32>(x_3304.z, x_3304.z)) + vec2<f32>(x_3307.x, x_3307.y));
    let x_3310 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3309.x, x_3309.y, x_3310.z, x_3310.w);
    let x_3312 : vec4<f32> = u_xlat4;
    let x_3315 : vec4<f32> = x_3273.x_MainLightWorldToLight[3i];
    let x_3317 : vec2<f32> = (vec2<f32>(x_3312.x, x_3312.y) + vec2<f32>(x_3315.x, x_3315.y));
    let x_3318 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3317.x, x_3317.y, x_3318.z, x_3318.w);
    let x_3320 : vec4<f32> = u_xlat4;
    let x_3323 : vec2<f32> = ((vec2<f32>(x_3320.x, x_3320.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3324 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3323.x, x_3323.y, x_3324.z, x_3324.w);
    let x_3331 : vec4<f32> = u_xlat4;
    let x_3334 : f32 = x_66.x_GlobalMipBias.x;
    let x_3335 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3331.x, x_3331.y), x_3334);
    u_xlat4 = x_3335;
    let x_3340 : f32 = x_3273.x_MainLightCookieTextureFormat;
    let x_3342 : f32 = x_3273.x_MainLightCookieTextureFormat;
    let x_3344 : f32 = x_3273.x_MainLightCookieTextureFormat;
    let x_3346 : f32 = x_3273.x_MainLightCookieTextureFormat;
    let x_3347 : vec4<f32> = vec4<f32>(x_3340, x_3342, x_3344, x_3346);
    let x_3354 : vec4<bool> = (vec4<f32>(x_3347.x, x_3347.y, x_3347.z, x_3347.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3354.x, x_3354.y);
    let x_3357 : bool = u_xlatb8.y;
    if (x_3357) {
      let x_3362 : f32 = u_xlat4.w;
      x_3358 = x_3362;
    } else {
      let x_3365 : f32 = u_xlat4.x;
      x_3358 = x_3365;
    }
    let x_3366 : f32 = x_3358;
    u_xlat70 = x_3366;
    let x_3368 : bool = u_xlatb8.x;
    if (x_3368) {
      let x_3372 : vec4<f32> = u_xlat4;
      x_3369 = vec3<f32>(x_3372.x, x_3372.y, x_3372.z);
    } else {
      let x_3375 : f32 = u_xlat70;
      x_3369 = vec3<f32>(x_3375, x_3375, x_3375);
    }
    let x_3377 : vec3<f32> = x_3369;
    let x_3378 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3377.x, x_3377.y, x_3377.z, x_3378.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3384 : vec4<f32> = u_xlat4;
  let x_3387 : vec4<f32> = x_66.x_MainLightColor;
  let x_3389 : vec3<f32> = (vec3<f32>(x_3384.x, x_3384.y, x_3384.z) * vec3<f32>(x_3387.x, x_3387.y, x_3387.z));
  let x_3390 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3389.x, x_3389.y, x_3389.z, x_3390.w);
  let x_3392 : vec2<f32> = u_xlat51;
  let x_3394 : vec4<f32> = u_xlat4;
  let x_3396 : vec3<f32> = (vec3<f32>(x_3392.x, x_3392.x, x_3392.x) * vec3<f32>(x_3394.x, x_3394.y, x_3394.z));
  let x_3397 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3396.x, x_3396.y, x_3396.z, x_3397.w);
  let x_3399 : vec3<f32> = u_xlat27;
  let x_3401 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(x_3399), x_3401);
  let x_3403 : f32 = u_xlat70;
  let x_3404 : f32 = u_xlat70;
  u_xlat70 = (x_3403 + x_3404);
  let x_3406 : vec3<f32> = u_xlat25;
  let x_3407 : f32 = u_xlat70;
  let x_3411 : vec3<f32> = u_xlat27;
  let x_3413 : vec3<f32> = ((x_3406 * -(vec3<f32>(x_3407, x_3407, x_3407))) + -(x_3411));
  let x_3414 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3413.x, x_3413.y, x_3413.z, x_3414.w);
  let x_3416 : vec3<f32> = u_xlat25;
  let x_3417 : vec3<f32> = u_xlat27;
  u_xlat70 = dot(x_3416, x_3417);
  let x_3419 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3419, 0.0f, 1.0f);
  let x_3421 : f32 = u_xlat70;
  u_xlat70 = (-(x_3421) + 1.0f);
  let x_3424 : f32 = u_xlat70;
  let x_3425 : f32 = u_xlat70;
  u_xlat70 = (x_3424 * x_3425);
  let x_3427 : f32 = u_xlat70;
  let x_3428 : f32 = u_xlat70;
  u_xlat70 = (x_3427 * x_3428);
  let x_3430 : f32 = u_xlat67;
  u_xlat5.x = ((-(x_3430) * 0.699999988f) + 1.700000048f);
  let x_3437 : f32 = u_xlat67;
  let x_3439 : f32 = u_xlat5.x;
  u_xlat67 = (x_3437 * x_3439);
  let x_3441 : f32 = u_xlat67;
  u_xlat67 = (x_3441 * 6.0f);
  let x_3452 : vec4<f32> = u_xlat8;
  let x_3454 : f32 = u_xlat67;
  let x_3455 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3452.x, x_3452.y, x_3452.z), x_3454);
  u_xlat8 = x_3455;
  let x_3457 : f32 = u_xlat8.w;
  u_xlat67 = (x_3457 + -1.0f);
  let x_3460 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3461 : f32 = u_xlat67;
  u_xlat67 = ((x_3460 * x_3461) + 1.0f);
  let x_3464 : f32 = u_xlat67;
  u_xlat67 = max(x_3464, 0.0f);
  let x_3466 : f32 = u_xlat67;
  u_xlat67 = log2(x_3466);
  let x_3468 : f32 = u_xlat67;
  let x_3470 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat67 = (x_3468 * x_3470);
  let x_3472 : f32 = u_xlat67;
  u_xlat67 = exp2(x_3472);
  let x_3474 : f32 = u_xlat67;
  let x_3476 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat67 = (x_3474 * x_3476);
  let x_3478 : vec4<f32> = u_xlat8;
  let x_3480 : f32 = u_xlat67;
  let x_3482 : vec3<f32> = (vec3<f32>(x_3478.x, x_3478.y, x_3478.z) * vec3<f32>(x_3480, x_3480, x_3480));
  let x_3483 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3482.x, x_3482.y, x_3482.z, x_3483.w);
  let x_3485 : f32 = u_xlat68;
  let x_3487 : f32 = u_xlat68;
  let x_3491 : vec2<f32> = ((vec2<f32>(x_3485, x_3485) * vec2<f32>(x_3487, x_3487)) + vec2<f32>(-1.0f, 1.0f));
  let x_3492 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3491.x, x_3491.y, x_3492.z, x_3492.w);
  let x_3495 : f32 = u_xlat9.y;
  u_xlat67 = (1.0f / x_3495);
  let x_3498 : f32 = u_xlat3.x;
  u_xlat68 = (x_3498 + -0.039999999f);
  let x_3501 : f32 = u_xlat70;
  let x_3502 : f32 = u_xlat68;
  u_xlat68 = ((x_3501 * x_3502) + 0.039999999f);
  let x_3506 : f32 = u_xlat67;
  let x_3507 : f32 = u_xlat68;
  u_xlat67 = (x_3506 * x_3507);
  let x_3509 : f32 = u_xlat67;
  let x_3511 : vec4<f32> = u_xlat8;
  let x_3513 : vec3<f32> = (vec3<f32>(x_3509, x_3509, x_3509) * vec3<f32>(x_3511.x, x_3511.y, x_3511.z));
  let x_3514 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3513.x, x_3513.y, x_3513.z, x_3514.w);
  let x_3516 : vec4<f32> = u_xlat6;
  let x_3518 : vec3<f32> = u_xlat2;
  let x_3520 : vec4<f32> = u_xlat8;
  let x_3522 : vec3<f32> = ((vec3<f32>(x_3516.x, x_3516.y, x_3516.z) * x_3518) + vec3<f32>(x_3520.x, x_3520.y, x_3520.z));
  let x_3523 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3522.x, x_3522.y, x_3522.z, x_3523.w);
  let x_3525 : f32 = u_xlat66;
  let x_3527 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3525 * x_3527);
  let x_3529 : vec3<f32> = u_xlat25;
  let x_3531 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3529, vec3<f32>(x_3531.x, x_3531.y, x_3531.z));
  let x_3534 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3534, 0.0f, 1.0f);
  let x_3536 : f32 = u_xlat66;
  let x_3537 : f32 = u_xlat67;
  u_xlat66 = (x_3536 * x_3537);
  let x_3539 : f32 = u_xlat66;
  let x_3541 : vec4<f32> = u_xlat4;
  let x_3543 : vec3<f32> = (vec3<f32>(x_3539, x_3539, x_3539) * vec3<f32>(x_3541.x, x_3541.y, x_3541.z));
  let x_3544 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3543.x, x_3543.y, x_3543.z, x_3544.w);
  let x_3546 : vec3<f32> = u_xlat27;
  let x_3548 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3550 : vec3<f32> = (x_3546 + vec3<f32>(x_3548.x, x_3548.y, x_3548.z));
  let x_3551 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3550.x, x_3550.y, x_3550.z, x_3551.w);
  let x_3553 : vec4<f32> = u_xlat8;
  let x_3555 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3553.x, x_3553.y, x_3553.z), vec3<f32>(x_3555.x, x_3555.y, x_3555.z));
  let x_3558 : f32 = u_xlat66;
  u_xlat66 = max(x_3558, 1.17549435e-37f);
  let x_3561 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3561);
  let x_3563 : f32 = u_xlat66;
  let x_3565 : vec4<f32> = u_xlat8;
  let x_3567 : vec3<f32> = (vec3<f32>(x_3563, x_3563, x_3563) * vec3<f32>(x_3565.x, x_3565.y, x_3565.z));
  let x_3568 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3567.x, x_3567.y, x_3567.z, x_3568.w);
  let x_3570 : vec3<f32> = u_xlat25;
  let x_3571 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3570, vec3<f32>(x_3571.x, x_3571.y, x_3571.z));
  let x_3574 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3574, 0.0f, 1.0f);
  let x_3577 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3579 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3577.x, x_3577.y, x_3577.z), vec3<f32>(x_3579.x, x_3579.y, x_3579.z));
  let x_3582 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3582, 0.0f, 1.0f);
  let x_3584 : f32 = u_xlat66;
  let x_3585 : f32 = u_xlat66;
  u_xlat66 = (x_3584 * x_3585);
  let x_3587 : f32 = u_xlat66;
  let x_3589 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3587 * x_3589) + 1.000010014f);
  let x_3593 : f32 = u_xlat67;
  let x_3594 : f32 = u_xlat67;
  u_xlat67 = (x_3593 * x_3594);
  let x_3596 : f32 = u_xlat66;
  let x_3597 : f32 = u_xlat66;
  u_xlat66 = (x_3596 * x_3597);
  let x_3599 : f32 = u_xlat67;
  u_xlat67 = max(x_3599, 0.100000001f);
  let x_3602 : f32 = u_xlat66;
  let x_3603 : f32 = u_xlat67;
  u_xlat66 = (x_3602 * x_3603);
  let x_3606 : f32 = u_xlat29.x;
  let x_3607 : f32 = u_xlat66;
  u_xlat66 = (x_3606 * x_3607);
  let x_3609 : f32 = u_xlat72;
  let x_3610 : f32 = u_xlat66;
  u_xlat66 = (x_3609 / x_3610);
  let x_3612 : f32 = u_xlat66;
  let x_3616 : vec3<f32> = u_xlat2;
  let x_3617 : vec3<f32> = ((vec3<f32>(x_3612, x_3612, x_3612) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3616);
  let x_3618 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3617.x, x_3617.y, x_3617.z, x_3618.w);
  let x_3620 : vec4<f32> = u_xlat4;
  let x_3622 : vec4<f32> = u_xlat8;
  let x_3624 : vec3<f32> = (vec3<f32>(x_3620.x, x_3620.y, x_3620.z) * vec3<f32>(x_3622.x, x_3622.y, x_3622.z));
  let x_3625 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3624.x, x_3624.y, x_3624.z, x_3625.w);
  let x_3628 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3630 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3628, x_3630);
  let x_3632 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3632));
  let x_3636 : f32 = x_3273.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3638 : f32 = x_3273.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3640 : f32 = x_3273.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3642 : f32 = x_3273.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3643 : vec4<f32> = vec4<f32>(x_3636, x_3638, x_3640, x_3642);
  let x_3649 : vec4<bool> = (vec4<f32>(x_3643.x, x_3643.y, x_3643.z, x_3643.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3649.x, x_3649.y);
  u_xlat31.x = 0.0f;
  u_xlat31.y = 0.0f;
  u_xlat31.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3660 : u32 = u_xlatu_loop_1;
    let x_3661 : u32 = u_xlatu66;
    if ((x_3660 < x_3661)) {
    } else {
      break;
    }
    let x_3664 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3664 >> 2u);
    let x_3667 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3667 & 3u));
    let x_3670 : u32 = u_xlatu68;
    let x_3673 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3670)];
    let x_3683 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3688 : vec4<u32> = indexable[x_3683];
    u_xlat68 = dot(x_3673, bitcast<vec4<f32>>(x_3688));
    let x_3691 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3691));
    let x_3694 : vec3<f32> = vs_INTERP0;
    let x_3706 : u32 = u_xlatu68;
    let x_3709 : vec4<f32> = x_3705.x_AdditionalLightsPosition[bitcast<i32>(x_3706)];
    let x_3712 : u32 = u_xlatu68;
    let x_3715 : vec4<f32> = x_3705.x_AdditionalLightsPosition[bitcast<i32>(x_3712)];
    let x_3717 : vec3<f32> = ((-(x_3694) * vec3<f32>(x_3709.w, x_3709.w, x_3709.w)) + vec3<f32>(x_3715.x, x_3715.y, x_3715.z));
    let x_3718 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3717.x, x_3717.y, x_3717.z, x_3718.w);
    let x_3720 : vec4<f32> = u_xlat10;
    let x_3722 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_3720.x, x_3720.y, x_3720.z), vec3<f32>(x_3722.x, x_3722.y, x_3722.z));
    let x_3727 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3727, 6.10351562e-05f);
    let x_3732 : f32 = u_xlat3.x;
    u_xlat70 = inverseSqrt(x_3732);
    let x_3734 : f32 = u_xlat70;
    let x_3736 : vec4<f32> = u_xlat10;
    let x_3738 : vec3<f32> = (vec3<f32>(x_3734, x_3734, x_3734) * vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
    let x_3739 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3738.x, x_3738.y, x_3738.z, x_3739.w);
    let x_3742 : f32 = u_xlat3.x;
    u_xlat5.x = (1.0f / x_3742);
    let x_3746 : f32 = u_xlat3.x;
    let x_3747 : u32 = u_xlatu68;
    let x_3750 : f32 = x_3705.x_AdditionalLightsAttenuation[bitcast<i32>(x_3747)].x;
    u_xlat3.x = (x_3746 * x_3750);
    let x_3754 : f32 = u_xlat3.x;
    let x_3757 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3754) * x_3757) + 1.0f);
    let x_3762 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3762, 0.0f);
    let x_3766 : f32 = u_xlat3.x;
    let x_3768 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3766 * x_3768);
    let x_3772 : f32 = u_xlat3.x;
    let x_3774 : f32 = u_xlat5.x;
    u_xlat3.x = (x_3772 * x_3774);
    let x_3777 : u32 = u_xlatu68;
    let x_3780 : vec4<f32> = x_3705.x_AdditionalLightsSpotDir[bitcast<i32>(x_3777)];
    let x_3782 : vec4<f32> = u_xlat11;
    u_xlat5.x = dot(vec3<f32>(x_3780.x, x_3780.y, x_3780.z), vec3<f32>(x_3782.x, x_3782.y, x_3782.z));
    let x_3787 : f32 = u_xlat5.x;
    let x_3788 : u32 = u_xlatu68;
    let x_3791 : f32 = x_3705.x_AdditionalLightsAttenuation[bitcast<i32>(x_3788)].z;
    let x_3793 : u32 = u_xlatu68;
    let x_3796 : f32 = x_3705.x_AdditionalLightsAttenuation[bitcast<i32>(x_3793)].w;
    u_xlat5.x = ((x_3787 * x_3791) + x_3796);
    let x_3800 : f32 = u_xlat5.x;
    u_xlat5.x = clamp(x_3800, 0.0f, 1.0f);
    let x_3804 : f32 = u_xlat5.x;
    let x_3806 : f32 = u_xlat5.x;
    u_xlat5.x = (x_3804 * x_3806);
    let x_3810 : f32 = u_xlat3.x;
    let x_3812 : f32 = u_xlat5.x;
    u_xlat3.x = (x_3810 * x_3812);
    let x_3816 : u32 = u_xlatu68;
    u_xlatu5 = (x_3816 >> 5u);
    let x_3819 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3819) & 31i)));
    let x_3825 : i32 = u_xlati73;
    let x_3827 : u32 = u_xlatu5;
    let x_3830 : f32 = x_3273.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3827)].el;
    u_xlati5 = bitcast<i32>((bitcast<u32>(x_3825) & bitcast<u32>(x_3830)));
    let x_3834 : i32 = u_xlati5;
    if ((x_3834 != 0i)) {
      let x_3844 : u32 = u_xlatu68;
      let x_3847 : f32 = x_3843.x_AdditionalLightsLightTypes[bitcast<i32>(x_3844)].el;
      u_xlati5 = i32(x_3847);
      let x_3849 : i32 = u_xlati5;
      u_xlati73 = select(1i, 0i, (x_3849 != 0i));
      let x_3853 : u32 = u_xlatu68;
      u_xlati52 = (bitcast<i32>(x_3853) << bitcast<u32>(2i));
      let x_3856 : i32 = u_xlati73;
      if ((x_3856 != 0i)) {
        let x_3860 : vec3<f32> = vs_INTERP0;
        let x_3862 : i32 = u_xlati52;
        let x_3865 : i32 = u_xlati52;
        let x_3869 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_3862 + 1i) / 4i)][((x_3865 + 1i) % 4i)];
        let x_3871 : vec3<f32> = (vec3<f32>(x_3860.y, x_3860.y, x_3860.y) * vec3<f32>(x_3869.x, x_3869.y, x_3869.w));
        let x_3872 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3871.x, x_3871.y, x_3871.z, x_3872.w);
        let x_3874 : i32 = u_xlati52;
        let x_3876 : i32 = u_xlati52;
        let x_3879 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[(x_3874 / 4i)][(x_3876 % 4i)];
        let x_3881 : vec3<f32> = vs_INTERP0;
        let x_3884 : vec4<f32> = u_xlat12;
        let x_3886 : vec3<f32> = ((vec3<f32>(x_3879.x, x_3879.y, x_3879.w) * vec3<f32>(x_3881.x, x_3881.x, x_3881.x)) + vec3<f32>(x_3884.x, x_3884.y, x_3884.z));
        let x_3887 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3886.x, x_3886.y, x_3886.z, x_3887.w);
        let x_3889 : i32 = u_xlati52;
        let x_3892 : i32 = u_xlati52;
        let x_3896 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_3889 + 2i) / 4i)][((x_3892 + 2i) % 4i)];
        let x_3898 : vec3<f32> = vs_INTERP0;
        let x_3901 : vec4<f32> = u_xlat12;
        let x_3903 : vec3<f32> = ((vec3<f32>(x_3896.x, x_3896.y, x_3896.w) * vec3<f32>(x_3898.z, x_3898.z, x_3898.z)) + vec3<f32>(x_3901.x, x_3901.y, x_3901.z));
        let x_3904 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3903.x, x_3903.y, x_3903.z, x_3904.w);
        let x_3906 : vec4<f32> = u_xlat12;
        let x_3908 : i32 = u_xlati52;
        let x_3911 : i32 = u_xlati52;
        let x_3915 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_3908 + 3i) / 4i)][((x_3911 + 3i) % 4i)];
        let x_3917 : vec3<f32> = (vec3<f32>(x_3906.x, x_3906.y, x_3906.z) + vec3<f32>(x_3915.x, x_3915.y, x_3915.w));
        let x_3918 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3917.x, x_3917.y, x_3917.z, x_3918.w);
        let x_3920 : vec4<f32> = u_xlat12;
        let x_3922 : vec4<f32> = u_xlat12;
        let x_3924 : vec2<f32> = (vec2<f32>(x_3920.x, x_3920.y) / vec2<f32>(x_3922.z, x_3922.z));
        let x_3925 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3924.x, x_3924.y, x_3925.z, x_3925.w);
        let x_3927 : vec4<f32> = u_xlat12;
        let x_3930 : vec2<f32> = ((vec2<f32>(x_3927.x, x_3927.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3931 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3930.x, x_3930.y, x_3931.z, x_3931.w);
        let x_3933 : vec4<f32> = u_xlat12;
        let x_3937 : vec2<f32> = clamp(vec2<f32>(x_3933.x, x_3933.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3938 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3937.x, x_3937.y, x_3938.z, x_3938.w);
        let x_3940 : u32 = u_xlatu68;
        let x_3943 : vec4<f32> = x_3843.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3940)];
        let x_3945 : vec4<f32> = u_xlat12;
        let x_3948 : u32 = u_xlatu68;
        let x_3951 : vec4<f32> = x_3843.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3948)];
        let x_3953 : vec2<f32> = ((vec2<f32>(x_3943.x, x_3943.y) * vec2<f32>(x_3945.x, x_3945.y)) + vec2<f32>(x_3951.z, x_3951.w));
        let x_3954 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3953.x, x_3953.y, x_3954.z, x_3954.w);
      } else {
        let x_3957 : i32 = u_xlati5;
        u_xlatb5 = (x_3957 == 1i);
        let x_3959 : bool = u_xlatb5;
        u_xlati5 = select(0i, 1i, x_3959);
        let x_3961 : i32 = u_xlati5;
        if ((x_3961 != 0i)) {
          let x_3966 : vec3<f32> = vs_INTERP0;
          let x_3968 : i32 = u_xlati52;
          let x_3971 : i32 = u_xlati52;
          let x_3975 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_3968 + 1i) / 4i)][((x_3971 + 1i) % 4i)];
          u_xlat56 = (vec2<f32>(x_3966.y, x_3966.y) * vec2<f32>(x_3975.x, x_3975.y));
          let x_3978 : i32 = u_xlati52;
          let x_3980 : i32 = u_xlati52;
          let x_3983 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[(x_3978 / 4i)][(x_3980 % 4i)];
          let x_3985 : vec3<f32> = vs_INTERP0;
          let x_3988 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_3983.x, x_3983.y) * vec2<f32>(x_3985.x, x_3985.x)) + x_3988);
          let x_3990 : i32 = u_xlati52;
          let x_3993 : i32 = u_xlati52;
          let x_3997 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_3990 + 2i) / 4i)][((x_3993 + 2i) % 4i)];
          let x_3999 : vec3<f32> = vs_INTERP0;
          let x_4002 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_3997.x, x_3997.y) * vec2<f32>(x_3999.z, x_3999.z)) + x_4002);
          let x_4004 : vec2<f32> = u_xlat56;
          let x_4005 : i32 = u_xlati52;
          let x_4008 : i32 = u_xlati52;
          let x_4012 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_4005 + 3i) / 4i)][((x_4008 + 3i) % 4i)];
          u_xlat56 = (x_4004 + vec2<f32>(x_4012.x, x_4012.y));
          let x_4015 : vec2<f32> = u_xlat56;
          u_xlat56 = ((x_4015 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4018 : vec2<f32> = u_xlat56;
          u_xlat56 = fract(x_4018);
          let x_4020 : u32 = u_xlatu68;
          let x_4023 : vec4<f32> = x_3843.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4020)];
          let x_4025 : vec2<f32> = u_xlat56;
          let x_4027 : u32 = u_xlatu68;
          let x_4030 : vec4<f32> = x_3843.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4027)];
          let x_4032 : vec2<f32> = ((vec2<f32>(x_4023.x, x_4023.y) * x_4025) + vec2<f32>(x_4030.z, x_4030.w));
          let x_4033 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4032.x, x_4032.y, x_4033.z, x_4033.w);
        } else {
          let x_4036 : vec3<f32> = vs_INTERP0;
          let x_4038 : i32 = u_xlati52;
          let x_4041 : i32 = u_xlati52;
          let x_4045 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_4038 + 1i) / 4i)][((x_4041 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_4036.y, x_4036.y, x_4036.y, x_4036.y) * x_4045);
          let x_4047 : i32 = u_xlati52;
          let x_4049 : i32 = u_xlati52;
          let x_4052 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[(x_4047 / 4i)][(x_4049 % 4i)];
          let x_4053 : vec3<f32> = vs_INTERP0;
          let x_4056 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4052 * vec4<f32>(x_4053.x, x_4053.x, x_4053.x, x_4053.x)) + x_4056);
          let x_4058 : i32 = u_xlati52;
          let x_4061 : i32 = u_xlati52;
          let x_4065 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_4058 + 2i) / 4i)][((x_4061 + 2i) % 4i)];
          let x_4066 : vec3<f32> = vs_INTERP0;
          let x_4069 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4065 * vec4<f32>(x_4066.z, x_4066.z, x_4066.z, x_4066.z)) + x_4069);
          let x_4071 : vec4<f32> = u_xlat13;
          let x_4072 : i32 = u_xlati52;
          let x_4075 : i32 = u_xlati52;
          let x_4079 : vec4<f32> = x_3843.x_AdditionalLightsWorldToLights[((x_4072 + 3i) / 4i)][((x_4075 + 3i) % 4i)];
          u_xlat13 = (x_4071 + x_4079);
          let x_4081 : vec4<f32> = u_xlat13;
          let x_4083 : vec4<f32> = u_xlat13;
          let x_4085 : vec3<f32> = (vec3<f32>(x_4081.x, x_4081.y, x_4081.z) / vec3<f32>(x_4083.w, x_4083.w, x_4083.w));
          let x_4086 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4085.x, x_4085.y, x_4085.z, x_4086.w);
          let x_4088 : vec4<f32> = u_xlat13;
          let x_4090 : vec4<f32> = u_xlat13;
          u_xlat5.x = dot(vec3<f32>(x_4088.x, x_4088.y, x_4088.z), vec3<f32>(x_4090.x, x_4090.y, x_4090.z));
          let x_4095 : f32 = u_xlat5.x;
          u_xlat5.x = inverseSqrt(x_4095);
          let x_4098 : vec4<f32> = u_xlat5;
          let x_4100 : vec4<f32> = u_xlat13;
          let x_4102 : vec3<f32> = (vec3<f32>(x_4098.x, x_4098.x, x_4098.x) * vec3<f32>(x_4100.x, x_4100.y, x_4100.z));
          let x_4103 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4102.x, x_4102.y, x_4102.z, x_4103.w);
          let x_4105 : vec4<f32> = u_xlat13;
          u_xlat5.x = dot(abs(vec3<f32>(x_4105.x, x_4105.y, x_4105.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4112 : f32 = u_xlat5.x;
          u_xlat5.x = max(x_4112, 0.000001f);
          let x_4117 : f32 = u_xlat5.x;
          u_xlat5.x = (1.0f / x_4117);
          let x_4120 : vec4<f32> = u_xlat5;
          let x_4122 : vec4<f32> = u_xlat13;
          let x_4124 : vec3<f32> = (vec3<f32>(x_4120.x, x_4120.x, x_4120.x) * vec3<f32>(x_4122.z, x_4122.x, x_4122.y));
          let x_4125 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4124.x, x_4124.y, x_4124.z, x_4125.w);
          let x_4128 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4128);
          let x_4132 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4132, 0.0f, 1.0f);
          let x_4136 : vec4<f32> = u_xlat14;
          let x_4139 : vec4<bool> = (vec4<f32>(x_4136.y, x_4136.z, x_4136.y, x_4136.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb52 = vec2<bool>(x_4139.x, x_4139.y);
          let x_4142 : bool = u_xlatb52.x;
          if (x_4142) {
            let x_4147 : f32 = u_xlat14.x;
            x_4143 = x_4147;
          } else {
            let x_4150 : f32 = u_xlat14.x;
            x_4143 = -(x_4150);
          }
          let x_4152 : f32 = x_4143;
          u_xlat52.x = x_4152;
          let x_4155 : bool = u_xlatb52.y;
          if (x_4155) {
            let x_4160 : f32 = u_xlat14.x;
            x_4156 = x_4160;
          } else {
            let x_4163 : f32 = u_xlat14.x;
            x_4156 = -(x_4163);
          }
          let x_4165 : f32 = x_4156;
          u_xlat52.y = x_4165;
          let x_4167 : vec4<f32> = u_xlat13;
          let x_4169 : vec4<f32> = u_xlat5;
          let x_4172 : vec2<f32> = u_xlat52;
          u_xlat52 = ((vec2<f32>(x_4167.x, x_4167.y) * vec2<f32>(x_4169.x, x_4169.x)) + x_4172);
          let x_4174 : vec2<f32> = u_xlat52;
          u_xlat52 = ((x_4174 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4177 : vec2<f32> = u_xlat52;
          u_xlat52 = clamp(x_4177, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4181 : u32 = u_xlatu68;
          let x_4184 : vec4<f32> = x_3843.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4181)];
          let x_4186 : vec2<f32> = u_xlat52;
          let x_4188 : u32 = u_xlatu68;
          let x_4191 : vec4<f32> = x_3843.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4188)];
          let x_4193 : vec2<f32> = ((vec2<f32>(x_4184.x, x_4184.y) * x_4186) + vec2<f32>(x_4191.z, x_4191.w));
          let x_4194 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4193.x, x_4193.y, x_4194.z, x_4194.w);
        }
      }
      let x_4201 : vec4<f32> = u_xlat12;
      let x_4204 : f32 = x_66.x_GlobalMipBias.x;
      let x_4205 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4201.x, x_4201.y), x_4204);
      u_xlat12 = x_4205;
      let x_4207 : bool = u_xlatb8.y;
      if (x_4207) {
        let x_4212 : f32 = u_xlat12.w;
        x_4208 = x_4212;
      } else {
        let x_4215 : f32 = u_xlat12.x;
        x_4208 = x_4215;
      }
      let x_4216 : f32 = x_4208;
      u_xlat5.x = x_4216;
      let x_4219 : bool = u_xlatb8.x;
      if (x_4219) {
        let x_4223 : vec4<f32> = u_xlat12;
        x_4220 = vec3<f32>(x_4223.x, x_4223.y, x_4223.z);
      } else {
        let x_4226 : vec4<f32> = u_xlat5;
        x_4220 = vec3<f32>(x_4226.x, x_4226.x, x_4226.x);
      }
      let x_4228 : vec3<f32> = x_4220;
      let x_4229 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4228.x, x_4228.y, x_4228.z, x_4229.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4235 : vec4<f32> = u_xlat12;
    let x_4237 : u32 = u_xlatu68;
    let x_4240 : vec4<f32> = x_3705.x_AdditionalLightsColor[bitcast<i32>(x_4237)];
    let x_4242 : vec3<f32> = (vec3<f32>(x_4235.x, x_4235.y, x_4235.z) * vec3<f32>(x_4240.x, x_4240.y, x_4240.z));
    let x_4243 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4242.x, x_4242.y, x_4242.z, x_4243.w);
    let x_4245 : vec2<f32> = u_xlat51;
    let x_4247 : vec4<f32> = u_xlat12;
    let x_4249 : vec3<f32> = (vec3<f32>(x_4245.x, x_4245.x, x_4245.x) * vec3<f32>(x_4247.x, x_4247.y, x_4247.z));
    let x_4250 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4249.x, x_4249.y, x_4249.z, x_4250.w);
    let x_4252 : vec3<f32> = u_xlat25;
    let x_4253 : vec4<f32> = u_xlat11;
    u_xlat68 = dot(x_4252, vec3<f32>(x_4253.x, x_4253.y, x_4253.z));
    let x_4256 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4256, 0.0f, 1.0f);
    let x_4258 : f32 = u_xlat68;
    let x_4260 : f32 = u_xlat3.x;
    u_xlat68 = (x_4258 * x_4260);
    let x_4262 : f32 = u_xlat68;
    let x_4264 : vec4<f32> = u_xlat12;
    let x_4266 : vec3<f32> = (vec3<f32>(x_4262, x_4262, x_4262) * vec3<f32>(x_4264.x, x_4264.y, x_4264.z));
    let x_4267 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4266.x, x_4266.y, x_4266.z, x_4267.w);
    let x_4269 : vec4<f32> = u_xlat10;
    let x_4271 : f32 = u_xlat70;
    let x_4274 : vec3<f32> = u_xlat27;
    let x_4275 : vec3<f32> = ((vec3<f32>(x_4269.x, x_4269.y, x_4269.z) * vec3<f32>(x_4271, x_4271, x_4271)) + x_4274);
    let x_4276 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4275.x, x_4275.y, x_4275.z, x_4276.w);
    let x_4278 : vec4<f32> = u_xlat10;
    let x_4280 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4278.x, x_4278.y, x_4278.z), vec3<f32>(x_4280.x, x_4280.y, x_4280.z));
    let x_4283 : f32 = u_xlat68;
    u_xlat68 = max(x_4283, 1.17549435e-37f);
    let x_4285 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4285);
    let x_4287 : f32 = u_xlat68;
    let x_4289 : vec4<f32> = u_xlat10;
    let x_4291 : vec3<f32> = (vec3<f32>(x_4287, x_4287, x_4287) * vec3<f32>(x_4289.x, x_4289.y, x_4289.z));
    let x_4292 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4291.x, x_4291.y, x_4291.z, x_4292.w);
    let x_4294 : vec3<f32> = u_xlat25;
    let x_4295 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_4294, vec3<f32>(x_4295.x, x_4295.y, x_4295.z));
    let x_4298 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4298, 0.0f, 1.0f);
    let x_4300 : vec4<f32> = u_xlat11;
    let x_4302 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_4300.x, x_4300.y, x_4300.z), vec3<f32>(x_4302.x, x_4302.y, x_4302.z));
    let x_4307 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4307, 0.0f, 1.0f);
    let x_4310 : f32 = u_xlat68;
    let x_4311 : f32 = u_xlat68;
    u_xlat68 = (x_4310 * x_4311);
    let x_4313 : f32 = u_xlat68;
    let x_4315 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4313 * x_4315) + 1.000010014f);
    let x_4319 : f32 = u_xlat3.x;
    let x_4321 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4319 * x_4321);
    let x_4324 : f32 = u_xlat68;
    let x_4325 : f32 = u_xlat68;
    u_xlat68 = (x_4324 * x_4325);
    let x_4328 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4328, 0.100000001f);
    let x_4331 : f32 = u_xlat68;
    let x_4333 : f32 = u_xlat3.x;
    u_xlat68 = (x_4331 * x_4333);
    let x_4336 : f32 = u_xlat29.x;
    let x_4337 : f32 = u_xlat68;
    u_xlat68 = (x_4336 * x_4337);
    let x_4339 : f32 = u_xlat72;
    let x_4340 : f32 = u_xlat68;
    u_xlat68 = (x_4339 / x_4340);
    let x_4342 : f32 = u_xlat68;
    let x_4345 : vec3<f32> = u_xlat2;
    let x_4346 : vec3<f32> = ((vec3<f32>(x_4342, x_4342, x_4342) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4345);
    let x_4347 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4346.x, x_4346.y, x_4346.z, x_4347.w);
    let x_4349 : vec4<f32> = u_xlat10;
    let x_4351 : vec4<f32> = u_xlat12;
    let x_4354 : vec3<f32> = u_xlat31;
    u_xlat31 = ((vec3<f32>(x_4349.x, x_4349.y, x_4349.z) * vec3<f32>(x_4351.x, x_4351.y, x_4351.z)) + x_4354);

    continuing {
      let x_4356 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4356 + bitcast<u32>(1i));
    }
  }
  let x_4358 : vec4<f32> = u_xlat6;
  let x_4360 : vec4<f32> = u_xlat7;
  let x_4363 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4358.x, x_4358.y, x_4358.z) * vec3<f32>(x_4360.x, x_4360.x, x_4360.x)) + vec3<f32>(x_4363.x, x_4363.y, x_4363.z));
  let x_4366 : vec3<f32> = u_xlat31;
  let x_4367 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_4366 + x_4367);
  let x_4369 : vec4<f32> = vs_INTERP4;
  let x_4371 : vec3<f32> = u_xlat0;
  let x_4373 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4369.w, x_4369.w, x_4369.w) * x_4371) + x_4373);
  let x_4376 : f32 = u_xlat23.x;
  let x_4378 : f32 = u_xlat23.x;
  u_xlat66 = (x_4376 * -(x_4378));
  let x_4381 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4381);
  let x_4383 : vec3<f32> = u_xlat0;
  let x_4386 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_4383 + -(vec3<f32>(x_4386.x, x_4386.y, x_4386.z)));
  let x_4392 : f32 = u_xlat66;
  let x_4394 : vec3<f32> = u_xlat0;
  let x_4397 : vec4<f32> = x_66.unity_FogColor;
  let x_4399 : vec3<f32> = ((vec3<f32>(x_4392, x_4392, x_4392) * x_4394) + vec3<f32>(x_4397.x, x_4397.y, x_4397.z));
  let x_4400 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4399.x, x_4399.y, x_4399.z, x_4400.w);
  let x_4402 : bool = u_xlatb45;
  if (x_4402) {
    let x_4407 : f32 = u_xlat1.x;
    x_4403 = x_4407;
  } else {
    x_4403 = 1.0f;
  }
  let x_4409 : f32 = x_4403;
  SV_Target0.w = x_4409;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

