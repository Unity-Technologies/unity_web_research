type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(6) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3173 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3670 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3775 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1595 : f32;
  var u_xlat23 : f32;
  var u_xlat44 : f32;
  var x_1712 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3123 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3256 : f32;
  var x_3268 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlatu71 : u32;
  var u_xlati73 : i32;
  var u_xlati71 : i32;
  var u_xlati11 : i32;
  var u_xlat32 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4077 : f32;
  var x_4090 : f32;
  var x_4152 : f32;
  var x_4163 : vec3<f32>;
  var u_xlat63 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        let x_1106 : vec2<f32> = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1107 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1106.x, x_1106.y, x_1107.z);
        let x_1110 : f32 = u_xlat11.y;
        u_xlat8.w = x_1110;
        let x_1113 : vec4<f32> = u_xlat3;
        let x_1116 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1119 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1113.x, x_1113.y) * vec2<f32>(x_1116.x, x_1116.y)) + vec2<f32>(x_1119.x, x_1119.w));
        let x_1122 : vec4<f32> = u_xlat11;
        let x_1123 : vec3<f32> = vec3<f32>(x_1122.x, x_1122.z, x_1122.w);
        let x_1124 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1123.x, x_1124.y, x_1123.y, x_1123.z);
        let x_1126 : vec4<f32> = u_xlat3;
        let x_1129 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1132 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1126.x, x_1126.y, x_1126.x, x_1126.y) * vec4<f32>(x_1129.x, x_1129.y, x_1129.x, x_1129.y)) + vec4<f32>(x_1132.x, x_1132.y, x_1132.z, x_1132.y));
        let x_1136 : vec4<f32> = u_xlat3;
        let x_1139 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1136.x, x_1136.y) * vec2<f32>(x_1139.x, x_1139.y)) + vec2<f32>(x_1142.w, x_1142.y));
        let x_1146 : f32 = u_xlat8.x;
        u_xlat9.x = x_1146;
        let x_1148 : vec4<f32> = u_xlat3;
        let x_1151 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1156 : vec2<f32> = ((vec2<f32>(x_1148.x, x_1148.y) * vec2<f32>(x_1151.x, x_1151.y)) + vec2<f32>(x_1154.x, x_1154.y));
        let x_1157 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1156.x, x_1156.y, x_1157.z, x_1157.w);
        let x_1160 : vec4<f32> = u_xlat7;
        let x_1162 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1160.x, x_1160.x, x_1160.x, x_1160.x) * x_1162);
        let x_1165 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1165.y, x_1165.y, x_1165.y, x_1165.y) * x_1167);
        let x_1170 : vec4<f32> = u_xlat7;
        let x_1172 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1170.z, x_1170.z, x_1170.z, x_1170.z) * x_1172);
        let x_1174 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1174.w, x_1174.w, x_1174.w, x_1174.w) * x_1176);
        let x_1179 : vec4<f32> = u_xlat12;
        let x_1180 : vec2<f32> = vec2<f32>(x_1179.x, x_1179.y);
        let x_1182 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1180.x, x_1180.y, x_1182);
        let x_1189 : vec3<f32> = txVec13;
        let x_1191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1189.xy, x_1189.z);
        u_xlat65 = x_1191;
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1204 : vec3<f32> = txVec14;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat68 = x_1206;
        let x_1207 : f32 = u_xlat68;
        let x_1209 : f32 = u_xlat17.y;
        u_xlat68 = (x_1207 * x_1209);
        let x_1212 : f32 = u_xlat17.x;
        let x_1213 : f32 = u_xlat65;
        let x_1215 : f32 = u_xlat68;
        u_xlat65 = ((x_1212 * x_1213) + x_1215);
        let x_1218 : vec2<f32> = u_xlat45;
        let x_1220 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1218.x, x_1218.y, x_1220);
        let x_1227 : vec3<f32> = txVec15;
        let x_1229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1227.xy, x_1227.z);
        u_xlat45.x = x_1229;
        let x_1232 : f32 = u_xlat17.z;
        let x_1234 : f32 = u_xlat45.x;
        let x_1236 : f32 = u_xlat65;
        u_xlat65 = ((x_1232 * x_1234) + x_1236);
        let x_1239 : vec4<f32> = u_xlat15;
        let x_1240 : vec2<f32> = vec2<f32>(x_1239.x, x_1239.y);
        let x_1242 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1240.x, x_1240.y, x_1242);
        let x_1249 : vec3<f32> = txVec16;
        let x_1251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1249.xy, x_1249.z);
        u_xlat45.x = x_1251;
        let x_1254 : f32 = u_xlat17.w;
        let x_1256 : f32 = u_xlat45.x;
        let x_1258 : f32 = u_xlat65;
        u_xlat65 = ((x_1254 * x_1256) + x_1258);
        let x_1261 : vec4<f32> = u_xlat13;
        let x_1262 : vec2<f32> = vec2<f32>(x_1261.x, x_1261.y);
        let x_1264 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1262.x, x_1262.y, x_1264);
        let x_1271 : vec3<f32> = txVec17;
        let x_1273 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1271.xy, x_1271.z);
        u_xlat45.x = x_1273;
        let x_1276 : f32 = u_xlat18.x;
        let x_1278 : f32 = u_xlat45.x;
        let x_1280 : f32 = u_xlat65;
        u_xlat65 = ((x_1276 * x_1278) + x_1280);
        let x_1283 : vec4<f32> = u_xlat13;
        let x_1284 : vec2<f32> = vec2<f32>(x_1283.z, x_1283.w);
        let x_1286 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1284.x, x_1284.y, x_1286);
        let x_1293 : vec3<f32> = txVec18;
        let x_1295 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1293.xy, x_1293.z);
        u_xlat45.x = x_1295;
        let x_1298 : f32 = u_xlat18.y;
        let x_1300 : f32 = u_xlat45.x;
        let x_1302 : f32 = u_xlat65;
        u_xlat65 = ((x_1298 * x_1300) + x_1302);
        let x_1305 : vec4<f32> = u_xlat14;
        let x_1306 : vec2<f32> = vec2<f32>(x_1305.x, x_1305.y);
        let x_1308 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1306.x, x_1306.y, x_1308);
        let x_1315 : vec3<f32> = txVec19;
        let x_1317 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1315.xy, x_1315.z);
        u_xlat45.x = x_1317;
        let x_1320 : f32 = u_xlat18.z;
        let x_1322 : f32 = u_xlat45.x;
        let x_1324 : f32 = u_xlat65;
        u_xlat65 = ((x_1320 * x_1322) + x_1324);
        let x_1327 : vec4<f32> = u_xlat15;
        let x_1328 : vec2<f32> = vec2<f32>(x_1327.z, x_1327.w);
        let x_1330 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1328.x, x_1328.y, x_1330);
        let x_1337 : vec3<f32> = txVec20;
        let x_1339 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1337.xy, x_1337.z);
        u_xlat45.x = x_1339;
        let x_1342 : f32 = u_xlat18.w;
        let x_1344 : f32 = u_xlat45.x;
        let x_1346 : f32 = u_xlat65;
        u_xlat65 = ((x_1342 * x_1344) + x_1346);
        let x_1349 : vec4<f32> = u_xlat16;
        let x_1350 : vec2<f32> = vec2<f32>(x_1349.x, x_1349.y);
        let x_1352 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1350.x, x_1350.y, x_1352);
        let x_1359 : vec3<f32> = txVec21;
        let x_1361 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1359.xy, x_1359.z);
        u_xlat45.x = x_1361;
        let x_1364 : f32 = u_xlat19.x;
        let x_1366 : f32 = u_xlat45.x;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1364 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat16;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat45.x = x_1383;
        let x_1386 : f32 = u_xlat19.y;
        let x_1388 : f32 = u_xlat45.x;
        let x_1390 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1388) + x_1390);
        let x_1393 : vec3<f32> = u_xlat29;
        let x_1394 : vec2<f32> = vec2<f32>(x_1393.x, x_1393.y);
        let x_1396 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1394.x, x_1394.y, x_1396);
        let x_1403 : vec3<f32> = txVec23;
        let x_1405 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1403.xy, x_1403.z);
        u_xlat45.x = x_1405;
        let x_1408 : f32 = u_xlat19.z;
        let x_1410 : f32 = u_xlat45.x;
        let x_1412 : f32 = u_xlat65;
        u_xlat65 = ((x_1408 * x_1410) + x_1412);
        let x_1415 : vec2<f32> = u_xlat56;
        let x_1417 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1415.x, x_1415.y, x_1417);
        let x_1424 : vec3<f32> = txVec24;
        let x_1426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1424.xy, x_1424.z);
        u_xlat45.x = x_1426;
        let x_1429 : f32 = u_xlat19.w;
        let x_1431 : f32 = u_xlat45.x;
        let x_1433 : f32 = u_xlat65;
        u_xlat65 = ((x_1429 * x_1431) + x_1433);
        let x_1436 : vec4<f32> = u_xlat11;
        let x_1437 : vec2<f32> = vec2<f32>(x_1436.x, x_1436.y);
        let x_1439 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1437.x, x_1437.y, x_1439);
        let x_1446 : vec3<f32> = txVec25;
        let x_1448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1446.xy, x_1446.z);
        u_xlat45.x = x_1448;
        let x_1451 : f32 = u_xlat7.x;
        let x_1453 : f32 = u_xlat45.x;
        let x_1455 : f32 = u_xlat65;
        u_xlat65 = ((x_1451 * x_1453) + x_1455);
        let x_1458 : vec4<f32> = u_xlat11;
        let x_1459 : vec2<f32> = vec2<f32>(x_1458.z, x_1458.w);
        let x_1461 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1459.x, x_1459.y, x_1461);
        let x_1468 : vec3<f32> = txVec26;
        let x_1470 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1468.xy, x_1468.z);
        u_xlat45.x = x_1470;
        let x_1473 : f32 = u_xlat7.y;
        let x_1475 : f32 = u_xlat45.x;
        let x_1477 : f32 = u_xlat65;
        u_xlat65 = ((x_1473 * x_1475) + x_1477);
        let x_1480 : vec2<f32> = u_xlat51;
        let x_1482 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1489 : vec3<f32> = txVec27;
        let x_1491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1489.xy, x_1489.z);
        u_xlat45.x = x_1491;
        let x_1494 : f32 = u_xlat7.z;
        let x_1496 : f32 = u_xlat45.x;
        let x_1498 : f32 = u_xlat65;
        u_xlat65 = ((x_1494 * x_1496) + x_1498);
        let x_1501 : vec4<f32> = u_xlat3;
        let x_1502 : vec2<f32> = vec2<f32>(x_1501.x, x_1501.y);
        let x_1504 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec28;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat3.x = x_1513;
        let x_1516 : f32 = u_xlat7.w;
        let x_1518 : f32 = u_xlat3.x;
        let x_1520 : f32 = u_xlat65;
        u_xlat64 = ((x_1516 * x_1518) + x_1520);
      }
    }
  } else {
    let x_1524 : vec3<f32> = u_xlat2;
    let x_1525 : vec2<f32> = vec2<f32>(x_1524.x, x_1524.y);
    let x_1527 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1525.x, x_1525.y, x_1527);
    let x_1534 : vec3<f32> = txVec29;
    let x_1536 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1534.xy, x_1534.z);
    u_xlat64 = x_1536;
  }
  let x_1538 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1538) + 1.0f);
  let x_1542 : f32 = u_xlat64;
  let x_1544 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1547 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1542 * x_1544) + x_1547);
  let x_1551 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1551);
  let x_1555 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1555 >= 1.0f);
  let x_1557 : bool = u_xlatb44;
  let x_1558 : bool = u_xlatb23;
  u_xlatb23 = (x_1557 | x_1558);
  let x_1560 : bool = u_xlatb23;
  let x_1561 : f32 = u_xlat64;
  u_xlat64 = select(x_1561, 1.0f, x_1560);
  let x_1563 : vec3<f32> = u_xlat1;
  let x_1565 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1563, -(vec3<f32>(x_1565.x, x_1565.y, x_1565.z)));
  let x_1571 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1571, 0.0f, 1.0f);
  let x_1575 : f32 = u_xlat64;
  let x_1579 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1575, x_1575, x_1575) * vec3<f32>(x_1579.x, x_1579.y, x_1579.z));
  let x_1582 : vec3<f32> = u_xlat22;
  let x_1583 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1582 * vec3<f32>(x_1583.x, x_1583.x, x_1583.x));
  let x_1586 : vec3<f32> = u_xlat1;
  let x_1587 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1586 * vec3<f32>(x_1587.x, x_1587.y, x_1587.z));
  let x_1591 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1591 >= 0.400000006f);
  let x_1594 : bool = u_xlatb64;
  if (x_1594) {
    let x_1599 : f32 = u_xlat4.w;
    x_1595 = x_1599;
  } else {
    x_1595 = 0.0f;
  }
  let x_1601 : f32 = x_1595;
  u_xlat64 = x_1601;
  let x_1604 : f32 = u_xlat4.w;
  u_xlat23 = (x_1604 + -0.400000006f);
  let x_1609 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1609);
  let x_1612 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1612);
  let x_1614 : f32 = u_xlat65;
  let x_1616 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1614) + abs(x_1616));
  let x_1619 : f32 = u_xlat44;
  u_xlat44 = max(x_1619, 0.0001f);
  let x_1622 : f32 = u_xlat23;
  let x_1623 : f32 = u_xlat44;
  u_xlat23 = (x_1622 / x_1623);
  let x_1625 : f32 = u_xlat23;
  u_xlat23 = (x_1625 + 0.5f);
  let x_1627 : f32 = u_xlat23;
  u_xlat23 = clamp(x_1627, 0.0f, 1.0f);
  let x_1630 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1630 == 0.0f));
  let x_1632 : bool = u_xlatb44;
  let x_1633 : f32 = u_xlat23;
  let x_1634 : f32 = u_xlat64;
  u_xlat64 = select(x_1634, x_1633, x_1632);
  let x_1636 : f32 = u_xlat64;
  u_xlat23 = (x_1636 + -0.0001f);
  let x_1639 : f32 = u_xlat23;
  u_xlatb23 = (x_1639 < 0.0f);
  let x_1641 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1641) * -1i) != 0i)) {
    discard;
  }
  let x_1649 : vec3<f32> = u_xlat21;
  let x_1650 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1649 * vec3<f32>(x_1650.y, x_1650.y, x_1650.y));
  let x_1653 : vec3<f32> = u_xlat27;
  let x_1655 : vec4<f32> = vs_INTERP2;
  let x_1658 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * vec3<f32>(x_1655.x, x_1655.y, x_1655.z)) + x_1658);
  let x_1660 : vec3<f32> = u_xlat27;
  let x_1662 : vec3<f32> = vs_INTERP1;
  let x_1664 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1660.z, x_1660.z, x_1660.z) * x_1662) + x_1664);
  let x_1666 : vec3<f32> = u_xlat21;
  let x_1667 : vec3<f32> = u_xlat21;
  u_xlat23 = dot(x_1666, x_1667);
  let x_1669 : f32 = u_xlat23;
  u_xlat23 = inverseSqrt(x_1669);
  let x_1671 : vec3<f32> = u_xlat21;
  let x_1672 : f32 = u_xlat23;
  u_xlat21 = (x_1671 * vec3<f32>(x_1672, x_1672, x_1672));
  let x_1677 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb23 = (x_1677 == 0.0f);
  let x_1679 : vec3<f32> = vs_INTERP0;
  let x_1683 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1684 : vec3<f32> = (-(x_1679) + x_1683);
  let x_1685 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1684.x, x_1684.y, x_1684.z, x_1685.w);
  let x_1687 : vec4<f32> = u_xlat3;
  let x_1689 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_1687.x, x_1687.y, x_1687.z), vec3<f32>(x_1689.x, x_1689.y, x_1689.z));
  let x_1692 : f32 = u_xlat65;
  u_xlat65 = inverseSqrt(x_1692);
  let x_1694 : f32 = u_xlat65;
  let x_1696 : vec4<f32> = u_xlat3;
  let x_1698 : vec3<f32> = (vec3<f32>(x_1694, x_1694, x_1694) * vec3<f32>(x_1696.x, x_1696.y, x_1696.z));
  let x_1699 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1698.x, x_1698.y, x_1698.z, x_1699.w);
  let x_1703 : f32 = x_137.unity_MatrixV[0i].z;
  u_xlat4.x = x_1703;
  let x_1706 : f32 = x_137.unity_MatrixV[1i].z;
  u_xlat4.y = x_1706;
  let x_1709 : f32 = x_137.unity_MatrixV[2i].z;
  u_xlat4.z = x_1709;
  let x_1711 : bool = u_xlatb23;
  if (x_1711) {
    let x_1715 : vec4<f32> = u_xlat3;
    x_1712 = vec3<f32>(x_1715.x, x_1715.y, x_1715.z);
  } else {
    let x_1718 : vec4<f32> = u_xlat4;
    x_1712 = vec3<f32>(x_1718.x, x_1718.y, x_1718.z);
  }
  let x_1720 : vec3<f32> = x_1712;
  let x_1721 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1720.x, x_1720.y, x_1720.z, x_1721.w);
  let x_1724 : f32 = vs_INTERP0.y;
  let x_1726 : f32 = x_137.unity_MatrixV[1i].z;
  u_xlat23 = (x_1724 * x_1726);
  let x_1729 : f32 = x_137.unity_MatrixV[0i].z;
  let x_1731 : f32 = vs_INTERP0.x;
  let x_1733 : f32 = u_xlat23;
  u_xlat23 = ((x_1729 * x_1731) + x_1733);
  let x_1736 : f32 = x_137.unity_MatrixV[2i].z;
  let x_1738 : f32 = vs_INTERP0.z;
  let x_1740 : f32 = u_xlat23;
  u_xlat23 = ((x_1736 * x_1738) + x_1740);
  let x_1742 : f32 = u_xlat23;
  let x_1744 : f32 = x_137.unity_MatrixV[3i].z;
  u_xlat23 = (x_1742 + x_1744);
  let x_1746 : f32 = u_xlat23;
  let x_1750 : f32 = x_137.x_ProjectionParams.y;
  u_xlat23 = (-(x_1746) + -(x_1750));
  let x_1753 : f32 = u_xlat23;
  u_xlat23 = max(x_1753, 0.0f);
  let x_1755 : f32 = u_xlat23;
  let x_1758 : f32 = x_137.unity_FogParams.x;
  u_xlat23 = (x_1755 * x_1758);
  let x_1767 : vec2<f32> = vs_INTERP5;
  let x_1769 : f32 = x_137.x_GlobalMipBias.x;
  let x_1770 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1767, x_1769);
  let x_1771 : vec3<f32> = vec3<f32>(x_1770.x, x_1770.y, x_1770.z);
  let x_1772 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1771.x, x_1771.y, x_1771.z, x_1772.w);
  let x_1775 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1776 : vec2<f32> = vec2<f32>(x_1775.x, x_1775.y);
  let x_1780 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1776.x, x_1776.y));
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = vec3<f32>(x_1780.x, x_1780.y, x_1781.z);
  let x_1783 : vec3<f32> = u_xlat27;
  let x_1785 : vec4<f32> = hlslcc_FragCoord;
  let x_1787 : vec2<f32> = (vec2<f32>(x_1783.x, x_1783.y) * vec2<f32>(x_1785.x, x_1785.y));
  let x_1788 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1787.x, x_1787.y, x_1788.z, x_1788.w);
  let x_1791 : f32 = u_xlat7.y;
  let x_1794 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1797 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat65 = ((x_1791 * x_1794) + x_1797);
  let x_1799 : f32 = u_xlat65;
  u_xlat7.z = (-(x_1799) + 1.0f);
  let x_1804 : f32 = u_xlat6.x;
  u_xlat6.x = x_1804;
  let x_1807 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1807, 0.0f, 1.0f);
  let x_1810 : f32 = u_xlat64;
  u_xlat64 = min(x_1810, 1.0f);
  let x_1812 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1812 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1817 : f32 = u_xlat6.x;
  u_xlat65 = (-(x_1817) + 1.0f);
  let x_1821 : f32 = u_xlat65;
  let x_1822 : f32 = u_xlat65;
  u_xlat66 = (x_1821 * x_1822);
  let x_1824 : f32 = u_xlat66;
  u_xlat66 = max(x_1824, 0.0078125f);
  let x_1828 : f32 = u_xlat66;
  let x_1829 : f32 = u_xlat66;
  u_xlat67 = (x_1828 * x_1829);
  let x_1832 : f32 = u_xlat6.x;
  u_xlat68 = (x_1832 + 0.040000021f);
  let x_1835 : f32 = u_xlat68;
  u_xlat68 = min(x_1835, 1.0f);
  let x_1837 : f32 = u_xlat66;
  u_xlat6.x = ((x_1837 * 4.0f) + 2.0f);
  let x_1847 : vec4<f32> = u_xlat7;
  let x_1850 : f32 = x_137.x_GlobalMipBias.x;
  let x_1851 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1847.x, x_1847.z), x_1850);
  u_xlat27.x = x_1851.x;
  let x_1856 : f32 = u_xlat27.x;
  u_xlat48 = (x_1856 + -1.0f);
  let x_1860 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1861 : f32 = u_xlat48;
  u_xlat48 = ((x_1860 * x_1861) + 1.0f);
  let x_1865 : f32 = u_xlat27.x;
  let x_1867 : f32 = vs_INTERP4.w;
  u_xlat27.x = min(x_1865, x_1867);
  let x_1870 : bool = u_xlatb0;
  if (x_1870) {
    let x_1874 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1874 == 1.0f);
    let x_1876 : bool = u_xlatb0;
    if (x_1876) {
      let x_1880 : vec4<f32> = vs_INTERP9;
      let x_1883 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1880.x, x_1880.y, x_1880.x, x_1880.y) + x_1883);
      let x_1886 : vec4<f32> = u_xlat7;
      let x_1887 : vec2<f32> = vec2<f32>(x_1886.x, x_1886.y);
      let x_1889 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1887.x, x_1887.y, x_1889);
      let x_1896 : vec3<f32> = txVec30;
      let x_1898 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1896.xy, x_1896.z);
      u_xlat8.x = x_1898;
      let x_1901 : vec4<f32> = u_xlat7;
      let x_1902 : vec2<f32> = vec2<f32>(x_1901.z, x_1901.w);
      let x_1904 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1902.x, x_1902.y, x_1904);
      let x_1911 : vec3<f32> = txVec31;
      let x_1913 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1911.xy, x_1911.z);
      u_xlat8.y = x_1913;
      let x_1915 : vec4<f32> = vs_INTERP9;
      let x_1918 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1915.x, x_1915.y, x_1915.x, x_1915.y) + x_1918);
      let x_1921 : vec4<f32> = u_xlat7;
      let x_1922 : vec2<f32> = vec2<f32>(x_1921.x, x_1921.y);
      let x_1924 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1922.x, x_1922.y, x_1924);
      let x_1931 : vec3<f32> = txVec32;
      let x_1933 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1931.xy, x_1931.z);
      u_xlat8.z = x_1933;
      let x_1936 : vec4<f32> = u_xlat7;
      let x_1937 : vec2<f32> = vec2<f32>(x_1936.z, x_1936.w);
      let x_1939 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1937.x, x_1937.y, x_1939);
      let x_1946 : vec3<f32> = txVec33;
      let x_1948 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1946.xy, x_1946.z);
      u_xlat8.w = x_1948;
      let x_1950 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_1950, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1956 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb69 = (x_1956 == 2.0f);
      let x_1958 : bool = u_xlatb69;
      if (x_1958) {
        let x_1961 : vec4<f32> = vs_INTERP9;
        let x_1964 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1967 : vec2<f32> = ((vec2<f32>(x_1961.x, x_1961.y) * vec2<f32>(x_1964.z, x_1964.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1968 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1967.x, x_1967.y, x_1968.z, x_1968.w);
        let x_1970 : vec4<f32> = u_xlat7;
        let x_1972 : vec2<f32> = floor(vec2<f32>(x_1970.x, x_1970.y));
        let x_1973 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1972.x, x_1972.y, x_1973.z, x_1973.w);
        let x_1976 : vec4<f32> = vs_INTERP9;
        let x_1979 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1982 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1976.x, x_1976.y) * vec2<f32>(x_1979.z, x_1979.w)) + -(vec2<f32>(x_1982.x, x_1982.y)));
        let x_1986 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1986.x, x_1986.x, x_1986.y, x_1986.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1989 : vec4<f32> = u_xlat8;
        let x_1991 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1989.x, x_1989.x, x_1989.z, x_1989.z) * vec4<f32>(x_1991.x, x_1991.x, x_1991.z, x_1991.z));
        let x_1994 : vec4<f32> = u_xlat9;
        let x_1996 : vec2<f32> = (vec2<f32>(x_1994.y, x_1994.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1997 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1996.x, x_1997.y, x_1996.y, x_1997.w);
        let x_1999 : vec4<f32> = u_xlat9;
        let x_2002 : vec2<f32> = u_xlat49;
        let x_2004 : vec2<f32> = ((vec2<f32>(x_1999.x, x_1999.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2002));
        let x_2005 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2004.x, x_2004.y, x_2005.z, x_2005.w);
        let x_2007 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2007) + vec2<f32>(1.0f, 1.0f));
        let x_2010 : vec2<f32> = u_xlat49;
        let x_2011 : vec2<f32> = min(x_2010, vec2<f32>(0.0f, 0.0f));
        let x_2012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2011.x, x_2011.y, x_2012.z, x_2012.w);
        let x_2014 : vec4<f32> = u_xlat10;
        let x_2017 : vec4<f32> = u_xlat10;
        let x_2020 : vec2<f32> = u_xlat51;
        let x_2021 : vec2<f32> = ((-(vec2<f32>(x_2014.x, x_2014.y)) * vec2<f32>(x_2017.x, x_2017.y)) + x_2020);
        let x_2022 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2021.x, x_2021.y, x_2022.z, x_2022.w);
        let x_2024 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2024, vec2<f32>(0.0f, 0.0f));
        let x_2026 : vec2<f32> = u_xlat49;
        let x_2028 : vec2<f32> = u_xlat49;
        let x_2030 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2026) * x_2028) + vec2<f32>(x_2030.y, x_2030.w));
        let x_2033 : vec4<f32> = u_xlat10;
        let x_2035 : vec2<f32> = (vec2<f32>(x_2033.x, x_2033.y) + vec2<f32>(1.0f, 1.0f));
        let x_2036 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2035.x, x_2035.y, x_2036.z, x_2036.w);
        let x_2038 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2038 + vec2<f32>(1.0f, 1.0f));
        let x_2040 : vec4<f32> = u_xlat9;
        let x_2042 : vec2<f32> = (vec2<f32>(x_2040.x, x_2040.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2043 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2042.x, x_2042.y, x_2043.z, x_2043.w);
        let x_2045 : vec2<f32> = u_xlat51;
        let x_2046 : vec2<f32> = (x_2045 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2047 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2046.x, x_2046.y, x_2047.z, x_2047.w);
        let x_2049 : vec4<f32> = u_xlat10;
        let x_2051 : vec2<f32> = (vec2<f32>(x_2049.x, x_2049.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2052 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2051.x, x_2051.y, x_2052.z, x_2052.w);
        let x_2054 : vec2<f32> = u_xlat49;
        let x_2055 : vec2<f32> = (x_2054 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2056 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2055.x, x_2055.y, x_2056.z, x_2056.w);
        let x_2058 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2058.y, x_2058.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2062 : f32 = u_xlat10.x;
        u_xlat11.z = x_2062;
        let x_2065 : f32 = u_xlat49.x;
        u_xlat11.w = x_2065;
        let x_2068 : f32 = u_xlat12.x;
        u_xlat9.z = x_2068;
        let x_2071 : f32 = u_xlat8.x;
        u_xlat9.w = x_2071;
        let x_2073 : vec4<f32> = u_xlat9;
        let x_2075 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2073.z, x_2073.w, x_2073.x, x_2073.z) + vec4<f32>(x_2075.z, x_2075.w, x_2075.x, x_2075.z));
        let x_2079 : f32 = u_xlat11.y;
        u_xlat10.z = x_2079;
        let x_2082 : f32 = u_xlat49.y;
        u_xlat10.w = x_2082;
        let x_2085 : f32 = u_xlat9.y;
        u_xlat12.z = x_2085;
        let x_2088 : f32 = u_xlat8.z;
        u_xlat12.w = x_2088;
        let x_2090 : vec4<f32> = u_xlat10;
        let x_2092 : vec4<f32> = u_xlat12;
        let x_2094 : vec3<f32> = (vec3<f32>(x_2090.z, x_2090.y, x_2090.w) + vec3<f32>(x_2092.z, x_2092.y, x_2092.w));
        let x_2095 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2094.x, x_2094.y, x_2094.z, x_2095.w);
        let x_2097 : vec4<f32> = u_xlat9;
        let x_2099 : vec4<f32> = u_xlat13;
        let x_2101 : vec3<f32> = (vec3<f32>(x_2097.x, x_2097.z, x_2097.w) / vec3<f32>(x_2099.z, x_2099.w, x_2099.y));
        let x_2102 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2101.x, x_2101.y, x_2101.z, x_2102.w);
        let x_2104 : vec4<f32> = u_xlat9;
        let x_2106 : vec3<f32> = (vec3<f32>(x_2104.x, x_2104.y, x_2104.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2107 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2106.x, x_2106.y, x_2106.z, x_2107.w);
        let x_2109 : vec4<f32> = u_xlat12;
        let x_2111 : vec4<f32> = u_xlat8;
        let x_2113 : vec3<f32> = (vec3<f32>(x_2109.z, x_2109.y, x_2109.w) / vec3<f32>(x_2111.x, x_2111.y, x_2111.z));
        let x_2114 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2113.x, x_2113.y, x_2113.z, x_2114.w);
        let x_2116 : vec4<f32> = u_xlat10;
        let x_2118 : vec3<f32> = (vec3<f32>(x_2116.x, x_2116.y, x_2116.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2119 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2118.x, x_2118.y, x_2118.z, x_2119.w);
        let x_2121 : vec4<f32> = u_xlat9;
        let x_2124 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2126 : vec3<f32> = (vec3<f32>(x_2121.y, x_2121.x, x_2121.z) * vec3<f32>(x_2124.x, x_2124.x, x_2124.x));
        let x_2127 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2126.x, x_2126.y, x_2126.z, x_2127.w);
        let x_2129 : vec4<f32> = u_xlat10;
        let x_2132 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2134 : vec3<f32> = (vec3<f32>(x_2129.x, x_2129.y, x_2129.z) * vec3<f32>(x_2132.y, x_2132.y, x_2132.y));
        let x_2135 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2134.x, x_2134.y, x_2134.z, x_2135.w);
        let x_2138 : f32 = u_xlat10.x;
        u_xlat9.w = x_2138;
        let x_2140 : vec4<f32> = u_xlat7;
        let x_2143 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2146 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2140.x, x_2140.y, x_2140.x, x_2140.y) * vec4<f32>(x_2143.x, x_2143.y, x_2143.x, x_2143.y)) + vec4<f32>(x_2146.y, x_2146.w, x_2146.x, x_2146.w));
        let x_2149 : vec4<f32> = u_xlat7;
        let x_2152 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2155 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2149.x, x_2149.y) * vec2<f32>(x_2152.x, x_2152.y)) + vec2<f32>(x_2155.z, x_2155.w));
        let x_2159 : f32 = u_xlat9.y;
        u_xlat10.w = x_2159;
        let x_2161 : vec4<f32> = u_xlat10;
        let x_2162 : vec2<f32> = vec2<f32>(x_2161.y, x_2161.z);
        let x_2163 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2163.x, x_2162.x, x_2163.z, x_2162.y);
        let x_2165 : vec4<f32> = u_xlat7;
        let x_2168 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2171 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2165.x, x_2165.y, x_2165.x, x_2165.y) * vec4<f32>(x_2168.x, x_2168.y, x_2168.x, x_2168.y)) + vec4<f32>(x_2171.x, x_2171.y, x_2171.z, x_2171.y));
        let x_2174 : vec4<f32> = u_xlat7;
        let x_2177 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2180 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2174.x, x_2174.y, x_2174.x, x_2174.y) * vec4<f32>(x_2177.x, x_2177.y, x_2177.x, x_2177.y)) + vec4<f32>(x_2180.w, x_2180.y, x_2180.w, x_2180.z));
        let x_2183 : vec4<f32> = u_xlat7;
        let x_2186 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2189 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2183.x, x_2183.y, x_2183.x, x_2183.y) * vec4<f32>(x_2186.x, x_2186.y, x_2186.x, x_2186.y)) + vec4<f32>(x_2189.x, x_2189.w, x_2189.z, x_2189.w));
        let x_2192 : vec4<f32> = u_xlat8;
        let x_2194 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2192.x, x_2192.x, x_2192.x, x_2192.y) * vec4<f32>(x_2194.z, x_2194.w, x_2194.y, x_2194.z));
        let x_2197 : vec4<f32> = u_xlat8;
        let x_2199 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2197.y, x_2197.y, x_2197.z, x_2197.z) * x_2199);
        let x_2203 : f32 = u_xlat8.z;
        let x_2205 : f32 = u_xlat13.y;
        u_xlat69 = (x_2203 * x_2205);
        let x_2208 : vec4<f32> = u_xlat11;
        let x_2209 : vec2<f32> = vec2<f32>(x_2208.x, x_2208.y);
        let x_2211 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2209.x, x_2209.y, x_2211);
        let x_2218 : vec3<f32> = txVec34;
        let x_2220 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2218.xy, x_2218.z);
        u_xlat7.x = x_2220;
        let x_2223 : vec4<f32> = u_xlat11;
        let x_2224 : vec2<f32> = vec2<f32>(x_2223.z, x_2223.w);
        let x_2226 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2224.x, x_2224.y, x_2226);
        let x_2233 : vec3<f32> = txVec35;
        let x_2235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2233.xy, x_2233.z);
        u_xlat28.x = x_2235;
        let x_2238 : f32 = u_xlat28.x;
        let x_2240 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2238 * x_2240);
        let x_2244 : f32 = u_xlat14.x;
        let x_2246 : f32 = u_xlat7.x;
        let x_2249 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2244 * x_2246) + x_2249);
        let x_2253 : vec2<f32> = u_xlat49;
        let x_2255 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2253.x, x_2253.y, x_2255);
        let x_2262 : vec3<f32> = txVec36;
        let x_2264 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2262.xy, x_2262.z);
        u_xlat28.x = x_2264;
        let x_2267 : f32 = u_xlat14.z;
        let x_2269 : f32 = u_xlat28.x;
        let x_2272 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2267 * x_2269) + x_2272);
        let x_2276 : vec4<f32> = u_xlat10;
        let x_2277 : vec2<f32> = vec2<f32>(x_2276.x, x_2276.y);
        let x_2279 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2277.x, x_2277.y, x_2279);
        let x_2286 : vec3<f32> = txVec37;
        let x_2288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2286.xy, x_2286.z);
        u_xlat28.x = x_2288;
        let x_2291 : f32 = u_xlat14.w;
        let x_2293 : f32 = u_xlat28.x;
        let x_2296 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2291 * x_2293) + x_2296);
        let x_2300 : vec4<f32> = u_xlat12;
        let x_2301 : vec2<f32> = vec2<f32>(x_2300.x, x_2300.y);
        let x_2303 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2301.x, x_2301.y, x_2303);
        let x_2310 : vec3<f32> = txVec38;
        let x_2312 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2310.xy, x_2310.z);
        u_xlat28.x = x_2312;
        let x_2315 : f32 = u_xlat15.x;
        let x_2317 : f32 = u_xlat28.x;
        let x_2320 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2315 * x_2317) + x_2320);
        let x_2324 : vec4<f32> = u_xlat12;
        let x_2325 : vec2<f32> = vec2<f32>(x_2324.z, x_2324.w);
        let x_2327 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2325.x, x_2325.y, x_2327);
        let x_2334 : vec3<f32> = txVec39;
        let x_2336 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2334.xy, x_2334.z);
        u_xlat28.x = x_2336;
        let x_2339 : f32 = u_xlat15.y;
        let x_2341 : f32 = u_xlat28.x;
        let x_2344 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2339 * x_2341) + x_2344);
        let x_2348 : vec4<f32> = u_xlat10;
        let x_2349 : vec2<f32> = vec2<f32>(x_2348.z, x_2348.w);
        let x_2351 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2349.x, x_2349.y, x_2351);
        let x_2358 : vec3<f32> = txVec40;
        let x_2360 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2358.xy, x_2358.z);
        u_xlat28.x = x_2360;
        let x_2363 : f32 = u_xlat15.z;
        let x_2365 : f32 = u_xlat28.x;
        let x_2368 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2363 * x_2365) + x_2368);
        let x_2372 : vec4<f32> = u_xlat9;
        let x_2373 : vec2<f32> = vec2<f32>(x_2372.x, x_2372.y);
        let x_2375 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2373.x, x_2373.y, x_2375);
        let x_2382 : vec3<f32> = txVec41;
        let x_2384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2382.xy, x_2382.z);
        u_xlat28.x = x_2384;
        let x_2387 : f32 = u_xlat15.w;
        let x_2389 : f32 = u_xlat28.x;
        let x_2392 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2387 * x_2389) + x_2392);
        let x_2396 : vec4<f32> = u_xlat9;
        let x_2397 : vec2<f32> = vec2<f32>(x_2396.z, x_2396.w);
        let x_2399 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2397.x, x_2397.y, x_2399);
        let x_2406 : vec3<f32> = txVec42;
        let x_2408 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2406.xy, x_2406.z);
        u_xlat28.x = x_2408;
        let x_2410 : f32 = u_xlat69;
        let x_2412 : f32 = u_xlat28.x;
        let x_2415 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_2410 * x_2412) + x_2415);
      } else {
        let x_2419 : vec4<f32> = vs_INTERP9;
        let x_2422 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2425 : vec2<f32> = ((vec2<f32>(x_2419.x, x_2419.y) * vec2<f32>(x_2422.z, x_2422.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2426 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2425.x, x_2425.y, x_2426.z, x_2426.w);
        let x_2428 : vec4<f32> = u_xlat7;
        let x_2430 : vec2<f32> = floor(vec2<f32>(x_2428.x, x_2428.y));
        let x_2431 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2430.x, x_2430.y, x_2431.z, x_2431.w);
        let x_2433 : vec4<f32> = vs_INTERP9;
        let x_2436 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2439 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2433.x, x_2433.y) * vec2<f32>(x_2436.z, x_2436.w)) + -(vec2<f32>(x_2439.x, x_2439.y)));
        let x_2443 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2443.x, x_2443.x, x_2443.y, x_2443.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2446 : vec4<f32> = u_xlat8;
        let x_2448 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2446.x, x_2446.x, x_2446.z, x_2446.z) * vec4<f32>(x_2448.x, x_2448.x, x_2448.z, x_2448.z));
        let x_2451 : vec4<f32> = u_xlat9;
        let x_2453 : vec2<f32> = (vec2<f32>(x_2451.y, x_2451.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2454 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2454.x, x_2453.x, x_2454.z, x_2453.y);
        let x_2456 : vec4<f32> = u_xlat9;
        let x_2459 : vec2<f32> = u_xlat49;
        let x_2461 : vec2<f32> = ((vec2<f32>(x_2456.x, x_2456.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2459));
        let x_2462 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2461.x, x_2462.y, x_2461.y, x_2462.w);
        let x_2464 : vec2<f32> = u_xlat49;
        let x_2466 : vec2<f32> = (-(x_2464) + vec2<f32>(1.0f, 1.0f));
        let x_2467 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2466.x, x_2466.y, x_2467.z, x_2467.w);
        let x_2469 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2469, vec2<f32>(0.0f, 0.0f));
        let x_2471 : vec2<f32> = u_xlat51;
        let x_2473 : vec2<f32> = u_xlat51;
        let x_2475 : vec4<f32> = u_xlat9;
        let x_2477 : vec2<f32> = ((-(x_2471) * x_2473) + vec2<f32>(x_2475.x, x_2475.y));
        let x_2478 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2477.x, x_2477.y, x_2478.z, x_2478.w);
        let x_2480 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2480, vec2<f32>(0.0f, 0.0f));
        let x_2482 : vec2<f32> = u_xlat51;
        let x_2484 : vec2<f32> = u_xlat51;
        let x_2486 : vec4<f32> = u_xlat8;
        let x_2488 : vec2<f32> = ((-(x_2482) * x_2484) + vec2<f32>(x_2486.y, x_2486.w));
        let x_2489 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2488.x, x_2489.y, x_2488.y);
        let x_2491 : vec4<f32> = u_xlat9;
        let x_2493 : vec2<f32> = (vec2<f32>(x_2491.x, x_2491.y) + vec2<f32>(2.0f, 2.0f));
        let x_2494 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2493.x, x_2493.y, x_2494.z, x_2494.w);
        let x_2496 : vec3<f32> = u_xlat29;
        let x_2498 : vec2<f32> = (vec2<f32>(x_2496.x, x_2496.z) + vec2<f32>(2.0f, 2.0f));
        let x_2499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2499.x, x_2498.x, x_2499.z, x_2498.y);
        let x_2502 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2502 * 0.081632003f);
        let x_2505 : vec4<f32> = u_xlat8;
        let x_2507 : vec3<f32> = (vec3<f32>(x_2505.z, x_2505.x, x_2505.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2508 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2507.x, x_2507.y, x_2507.z, x_2508.w);
        let x_2510 : vec4<f32> = u_xlat9;
        let x_2512 : vec2<f32> = (vec2<f32>(x_2510.x, x_2510.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2513 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2512.x, x_2512.y, x_2513.z, x_2513.w);
        let x_2516 : f32 = u_xlat12.y;
        u_xlat11.x = x_2516;
        let x_2518 : vec2<f32> = u_xlat49;
        let x_2521 : vec2<f32> = ((vec2<f32>(x_2518.x, x_2518.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2522 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2522.x, x_2521.x, x_2522.z, x_2521.y);
        let x_2524 : vec2<f32> = u_xlat49;
        let x_2527 : vec2<f32> = ((vec2<f32>(x_2524.x, x_2524.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2528 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2527.x, x_2528.y, x_2527.y, x_2528.w);
        let x_2531 : f32 = u_xlat8.x;
        u_xlat9.y = x_2531;
        let x_2534 : f32 = u_xlat10.y;
        u_xlat9.w = x_2534;
        let x_2536 : vec4<f32> = u_xlat9;
        let x_2537 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2536 + x_2537);
        let x_2539 : vec2<f32> = u_xlat49;
        let x_2542 : vec2<f32> = ((vec2<f32>(x_2539.y, x_2539.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2543 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2543.x, x_2542.x, x_2543.z, x_2542.y);
        let x_2545 : vec2<f32> = u_xlat49;
        let x_2548 : vec2<f32> = ((vec2<f32>(x_2545.y, x_2545.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2549 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2548.x, x_2549.y, x_2548.y, x_2549.w);
        let x_2552 : f32 = u_xlat8.y;
        u_xlat10.y = x_2552;
        let x_2554 : vec4<f32> = u_xlat10;
        let x_2555 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2554 + x_2555);
        let x_2557 : vec4<f32> = u_xlat9;
        let x_2558 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2557 / x_2558);
        let x_2560 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2560 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2562 : vec4<f32> = u_xlat10;
        let x_2563 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2562 / x_2563);
        let x_2565 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2565 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2567 : vec4<f32> = u_xlat9;
        let x_2570 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2567.w, x_2567.x, x_2567.y, x_2567.z) * vec4<f32>(x_2570.x, x_2570.x, x_2570.x, x_2570.x));
        let x_2573 : vec4<f32> = u_xlat10;
        let x_2576 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2573.x, x_2573.w, x_2573.y, x_2573.z) * vec4<f32>(x_2576.y, x_2576.y, x_2576.y, x_2576.y));
        let x_2579 : vec4<f32> = u_xlat9;
        let x_2580 : vec3<f32> = vec3<f32>(x_2579.y, x_2579.z, x_2579.w);
        let x_2581 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2580.x, x_2581.y, x_2580.y, x_2580.z);
        let x_2584 : f32 = u_xlat10.x;
        u_xlat12.y = x_2584;
        let x_2586 : vec4<f32> = u_xlat7;
        let x_2589 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2592 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2586.x, x_2586.y, x_2586.x, x_2586.y) * vec4<f32>(x_2589.x, x_2589.y, x_2589.x, x_2589.y)) + vec4<f32>(x_2592.x, x_2592.y, x_2592.z, x_2592.y));
        let x_2595 : vec4<f32> = u_xlat7;
        let x_2598 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2601 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2595.x, x_2595.y) * vec2<f32>(x_2598.x, x_2598.y)) + vec2<f32>(x_2601.w, x_2601.y));
        let x_2605 : f32 = u_xlat12.y;
        u_xlat9.y = x_2605;
        let x_2608 : f32 = u_xlat10.z;
        u_xlat12.y = x_2608;
        let x_2610 : vec4<f32> = u_xlat7;
        let x_2613 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2616 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2610.x, x_2610.y, x_2610.x, x_2610.y) * vec4<f32>(x_2613.x, x_2613.y, x_2613.x, x_2613.y)) + vec4<f32>(x_2616.x, x_2616.y, x_2616.z, x_2616.y));
        let x_2619 : vec4<f32> = u_xlat7;
        let x_2622 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2625 : vec4<f32> = u_xlat12;
        let x_2627 : vec2<f32> = ((vec2<f32>(x_2619.x, x_2619.y) * vec2<f32>(x_2622.x, x_2622.y)) + vec2<f32>(x_2625.w, x_2625.y));
        let x_2628 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2627.x, x_2627.y, x_2628.z, x_2628.w);
        let x_2631 : f32 = u_xlat12.y;
        u_xlat9.z = x_2631;
        let x_2633 : vec4<f32> = u_xlat7;
        let x_2636 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2639 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2633.x, x_2633.y, x_2633.x, x_2633.y) * vec4<f32>(x_2636.x, x_2636.y, x_2636.x, x_2636.y)) + vec4<f32>(x_2639.x, x_2639.y, x_2639.x, x_2639.z));
        let x_2643 : f32 = u_xlat10.w;
        u_xlat12.y = x_2643;
        let x_2645 : vec4<f32> = u_xlat7;
        let x_2648 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2651 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2645.x, x_2645.y, x_2645.x, x_2645.y) * vec4<f32>(x_2648.x, x_2648.y, x_2648.x, x_2648.y)) + vec4<f32>(x_2651.x, x_2651.y, x_2651.z, x_2651.y));
        let x_2655 : vec4<f32> = u_xlat7;
        let x_2658 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2661 : vec4<f32> = u_xlat12;
        let x_2663 : vec2<f32> = ((vec2<f32>(x_2655.x, x_2655.y) * vec2<f32>(x_2658.x, x_2658.y)) + vec2<f32>(x_2661.w, x_2661.y));
        let x_2664 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2663.x, x_2663.y, x_2664.z);
        let x_2667 : f32 = u_xlat12.y;
        u_xlat9.w = x_2667;
        let x_2670 : vec4<f32> = u_xlat7;
        let x_2673 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2676 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2670.x, x_2670.y) * vec2<f32>(x_2673.x, x_2673.y)) + vec2<f32>(x_2676.x, x_2676.w));
        let x_2679 : vec4<f32> = u_xlat12;
        let x_2680 : vec3<f32> = vec3<f32>(x_2679.x, x_2679.z, x_2679.w);
        let x_2681 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2680.x, x_2681.y, x_2680.y, x_2680.z);
        let x_2683 : vec4<f32> = u_xlat7;
        let x_2686 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2689 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2683.x, x_2683.y, x_2683.x, x_2683.y) * vec4<f32>(x_2686.x, x_2686.y, x_2686.x, x_2686.y)) + vec4<f32>(x_2689.x, x_2689.y, x_2689.z, x_2689.y));
        let x_2693 : vec4<f32> = u_xlat7;
        let x_2696 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2699 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2693.x, x_2693.y) * vec2<f32>(x_2696.x, x_2696.y)) + vec2<f32>(x_2699.w, x_2699.y));
        let x_2703 : f32 = u_xlat9.x;
        u_xlat10.x = x_2703;
        let x_2705 : vec4<f32> = u_xlat7;
        let x_2708 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2711 : vec4<f32> = u_xlat10;
        let x_2713 : vec2<f32> = ((vec2<f32>(x_2705.x, x_2705.y) * vec2<f32>(x_2708.x, x_2708.y)) + vec2<f32>(x_2711.x, x_2711.y));
        let x_2714 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2713.x, x_2713.y, x_2714.z, x_2714.w);
        let x_2716 : vec4<f32> = u_xlat8;
        let x_2718 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2716.x, x_2716.x, x_2716.x, x_2716.x) * x_2718);
        let x_2720 : vec4<f32> = u_xlat8;
        let x_2722 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2720.y, x_2720.y, x_2720.y, x_2720.y) * x_2722);
        let x_2725 : vec4<f32> = u_xlat8;
        let x_2727 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2725.z, x_2725.z, x_2725.z, x_2725.z) * x_2727);
        let x_2729 : vec4<f32> = u_xlat8;
        let x_2731 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2729.w, x_2729.w, x_2729.w, x_2729.w) * x_2731);
        let x_2734 : vec4<f32> = u_xlat13;
        let x_2735 : vec2<f32> = vec2<f32>(x_2734.x, x_2734.y);
        let x_2737 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2735.x, x_2735.y, x_2737);
        let x_2744 : vec3<f32> = txVec43;
        let x_2746 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2744.xy, x_2744.z);
        u_xlat69 = x_2746;
        let x_2748 : vec4<f32> = u_xlat13;
        let x_2749 : vec2<f32> = vec2<f32>(x_2748.z, x_2748.w);
        let x_2751 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2749.x, x_2749.y, x_2751);
        let x_2758 : vec3<f32> = txVec44;
        let x_2760 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2758.xy, x_2758.z);
        u_xlat9.x = x_2760;
        let x_2763 : f32 = u_xlat9.x;
        let x_2765 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2763 * x_2765);
        let x_2769 : f32 = u_xlat18.x;
        let x_2770 : f32 = u_xlat69;
        let x_2773 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2769 * x_2770) + x_2773);
        let x_2776 : vec2<f32> = u_xlat49;
        let x_2778 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2776.x, x_2776.y, x_2778);
        let x_2785 : vec3<f32> = txVec45;
        let x_2787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2785.xy, x_2785.z);
        u_xlat49.x = x_2787;
        let x_2790 : f32 = u_xlat18.z;
        let x_2792 : f32 = u_xlat49.x;
        let x_2794 : f32 = u_xlat69;
        u_xlat69 = ((x_2790 * x_2792) + x_2794);
        let x_2797 : vec4<f32> = u_xlat16;
        let x_2798 : vec2<f32> = vec2<f32>(x_2797.x, x_2797.y);
        let x_2800 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2798.x, x_2798.y, x_2800);
        let x_2807 : vec3<f32> = txVec46;
        let x_2809 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2807.xy, x_2807.z);
        u_xlat49.x = x_2809;
        let x_2812 : f32 = u_xlat18.w;
        let x_2814 : f32 = u_xlat49.x;
        let x_2816 : f32 = u_xlat69;
        u_xlat69 = ((x_2812 * x_2814) + x_2816);
        let x_2819 : vec4<f32> = u_xlat14;
        let x_2820 : vec2<f32> = vec2<f32>(x_2819.x, x_2819.y);
        let x_2822 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2820.x, x_2820.y, x_2822);
        let x_2829 : vec3<f32> = txVec47;
        let x_2831 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2829.xy, x_2829.z);
        u_xlat49.x = x_2831;
        let x_2834 : f32 = u_xlat19.x;
        let x_2836 : f32 = u_xlat49.x;
        let x_2838 : f32 = u_xlat69;
        u_xlat69 = ((x_2834 * x_2836) + x_2838);
        let x_2841 : vec4<f32> = u_xlat14;
        let x_2842 : vec2<f32> = vec2<f32>(x_2841.z, x_2841.w);
        let x_2844 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2842.x, x_2842.y, x_2844);
        let x_2851 : vec3<f32> = txVec48;
        let x_2853 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2851.xy, x_2851.z);
        u_xlat49.x = x_2853;
        let x_2856 : f32 = u_xlat19.y;
        let x_2858 : f32 = u_xlat49.x;
        let x_2860 : f32 = u_xlat69;
        u_xlat69 = ((x_2856 * x_2858) + x_2860);
        let x_2863 : vec4<f32> = u_xlat15;
        let x_2864 : vec2<f32> = vec2<f32>(x_2863.x, x_2863.y);
        let x_2866 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2864.x, x_2864.y, x_2866);
        let x_2873 : vec3<f32> = txVec49;
        let x_2875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2873.xy, x_2873.z);
        u_xlat49.x = x_2875;
        let x_2878 : f32 = u_xlat19.z;
        let x_2880 : f32 = u_xlat49.x;
        let x_2882 : f32 = u_xlat69;
        u_xlat69 = ((x_2878 * x_2880) + x_2882);
        let x_2885 : vec4<f32> = u_xlat16;
        let x_2886 : vec2<f32> = vec2<f32>(x_2885.z, x_2885.w);
        let x_2888 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2886.x, x_2886.y, x_2888);
        let x_2895 : vec3<f32> = txVec50;
        let x_2897 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2895.xy, x_2895.z);
        u_xlat49.x = x_2897;
        let x_2900 : f32 = u_xlat19.w;
        let x_2902 : f32 = u_xlat49.x;
        let x_2904 : f32 = u_xlat69;
        u_xlat69 = ((x_2900 * x_2902) + x_2904);
        let x_2907 : vec4<f32> = u_xlat17;
        let x_2908 : vec2<f32> = vec2<f32>(x_2907.x, x_2907.y);
        let x_2910 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2908.x, x_2908.y, x_2910);
        let x_2917 : vec3<f32> = txVec51;
        let x_2919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2917.xy, x_2917.z);
        u_xlat49.x = x_2919;
        let x_2922 : f32 = u_xlat20.x;
        let x_2924 : f32 = u_xlat49.x;
        let x_2926 : f32 = u_xlat69;
        u_xlat69 = ((x_2922 * x_2924) + x_2926);
        let x_2929 : vec4<f32> = u_xlat17;
        let x_2930 : vec2<f32> = vec2<f32>(x_2929.z, x_2929.w);
        let x_2932 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2930.x, x_2930.y, x_2932);
        let x_2939 : vec3<f32> = txVec52;
        let x_2941 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2939.xy, x_2939.z);
        u_xlat49.x = x_2941;
        let x_2944 : f32 = u_xlat20.y;
        let x_2946 : f32 = u_xlat49.x;
        let x_2948 : f32 = u_xlat69;
        u_xlat69 = ((x_2944 * x_2946) + x_2948);
        let x_2951 : vec3<f32> = u_xlat30;
        let x_2952 : vec2<f32> = vec2<f32>(x_2951.x, x_2951.y);
        let x_2954 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2952.x, x_2952.y, x_2954);
        let x_2961 : vec3<f32> = txVec53;
        let x_2963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2961.xy, x_2961.z);
        u_xlat49.x = x_2963;
        let x_2966 : f32 = u_xlat20.z;
        let x_2968 : f32 = u_xlat49.x;
        let x_2970 : f32 = u_xlat69;
        u_xlat69 = ((x_2966 * x_2968) + x_2970);
        let x_2973 : vec2<f32> = u_xlat57;
        let x_2975 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2973.x, x_2973.y, x_2975);
        let x_2982 : vec3<f32> = txVec54;
        let x_2984 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2982.xy, x_2982.z);
        u_xlat49.x = x_2984;
        let x_2987 : f32 = u_xlat20.w;
        let x_2989 : f32 = u_xlat49.x;
        let x_2991 : f32 = u_xlat69;
        u_xlat69 = ((x_2987 * x_2989) + x_2991);
        let x_2994 : vec4<f32> = u_xlat12;
        let x_2995 : vec2<f32> = vec2<f32>(x_2994.x, x_2994.y);
        let x_2997 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2995.x, x_2995.y, x_2997);
        let x_3004 : vec3<f32> = txVec55;
        let x_3006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3004.xy, x_3004.z);
        u_xlat49.x = x_3006;
        let x_3009 : f32 = u_xlat8.x;
        let x_3011 : f32 = u_xlat49.x;
        let x_3013 : f32 = u_xlat69;
        u_xlat69 = ((x_3009 * x_3011) + x_3013);
        let x_3016 : vec4<f32> = u_xlat12;
        let x_3017 : vec2<f32> = vec2<f32>(x_3016.z, x_3016.w);
        let x_3019 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3017.x, x_3017.y, x_3019);
        let x_3026 : vec3<f32> = txVec56;
        let x_3028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3026.xy, x_3026.z);
        u_xlat49.x = x_3028;
        let x_3031 : f32 = u_xlat8.y;
        let x_3033 : f32 = u_xlat49.x;
        let x_3035 : f32 = u_xlat69;
        u_xlat69 = ((x_3031 * x_3033) + x_3035);
        let x_3038 : vec2<f32> = u_xlat52;
        let x_3040 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3038.x, x_3038.y, x_3040);
        let x_3047 : vec3<f32> = txVec57;
        let x_3049 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3047.xy, x_3047.z);
        u_xlat49.x = x_3049;
        let x_3052 : f32 = u_xlat8.z;
        let x_3054 : f32 = u_xlat49.x;
        let x_3056 : f32 = u_xlat69;
        u_xlat69 = ((x_3052 * x_3054) + x_3056);
        let x_3059 : vec4<f32> = u_xlat7;
        let x_3060 : vec2<f32> = vec2<f32>(x_3059.x, x_3059.y);
        let x_3062 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3060.x, x_3060.y, x_3062);
        let x_3069 : vec3<f32> = txVec58;
        let x_3071 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3069.xy, x_3069.z);
        u_xlat7.x = x_3071;
        let x_3074 : f32 = u_xlat8.w;
        let x_3076 : f32 = u_xlat7.x;
        let x_3078 : f32 = u_xlat69;
        u_xlat0.x = ((x_3074 * x_3076) + x_3078);
      }
    }
  } else {
    let x_3083 : vec4<f32> = vs_INTERP9;
    let x_3084 : vec2<f32> = vec2<f32>(x_3083.x, x_3083.y);
    let x_3086 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3084.x, x_3084.y, x_3086);
    let x_3093 : vec3<f32> = txVec59;
    let x_3095 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3093.xy, x_3093.z);
    u_xlat0.x = x_3095;
  }
  let x_3098 : f32 = u_xlat0.x;
  let x_3100 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3103 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3098 * x_3100) + x_3103);
  let x_3110 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3110);
  let x_3114 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3114 >= 1.0f);
  let x_3117 : bool = u_xlatb2.x;
  let x_3118 : bool = u_xlatb69;
  u_xlatb2.x = (x_3117 | x_3118);
  let x_3122 : bool = u_xlatb2.x;
  if (x_3122) {
    x_3123 = 1.0f;
  } else {
    let x_3128 : f32 = u_xlat0.x;
    x_3123 = x_3128;
  }
  let x_3129 : f32 = x_3123;
  u_xlat0.x = x_3129;
  let x_3131 : vec3<f32> = vs_INTERP0;
  let x_3133 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3135 : vec3<f32> = (x_3131 + -(x_3133));
  let x_3136 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3135.x, x_3135.y, x_3135.z, x_3136.w);
  let x_3138 : vec4<f32> = u_xlat7;
  let x_3140 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3138.x, x_3138.y, x_3138.z), vec3<f32>(x_3140.x, x_3140.y, x_3140.z));
  let x_3145 : f32 = u_xlat2.x;
  let x_3147 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3150 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3145 * x_3147) + x_3150);
  let x_3154 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3154, 0.0f, 1.0f);
  let x_3158 : f32 = u_xlat0.x;
  u_xlat69 = (-(x_3158) + 1.0f);
  let x_3162 : f32 = u_xlat2.x;
  let x_3163 : f32 = u_xlat69;
  let x_3166 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3162 * x_3163) + x_3166);
  let x_3175 : f32 = x_3173.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3175 == -1.0f));
  let x_3179 : bool = u_xlatb2.x;
  if (x_3179) {
    let x_3182 : vec3<f32> = vs_INTERP0;
    let x_3185 : vec4<f32> = x_3173.x_MainLightWorldToLight[1i];
    let x_3187 : vec2<f32> = (vec2<f32>(x_3182.y, x_3182.y) * vec2<f32>(x_3185.x, x_3185.y));
    let x_3188 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3187.x, x_3187.y, x_3188.z, x_3188.w);
    let x_3191 : vec4<f32> = x_3173.x_MainLightWorldToLight[0i];
    let x_3193 : vec3<f32> = vs_INTERP0;
    let x_3196 : vec4<f32> = u_xlat7;
    let x_3198 : vec2<f32> = ((vec2<f32>(x_3191.x, x_3191.y) * vec2<f32>(x_3193.x, x_3193.x)) + vec2<f32>(x_3196.x, x_3196.y));
    let x_3199 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3198.x, x_3198.y, x_3199.z, x_3199.w);
    let x_3202 : vec4<f32> = x_3173.x_MainLightWorldToLight[2i];
    let x_3204 : vec3<f32> = vs_INTERP0;
    let x_3207 : vec4<f32> = u_xlat7;
    let x_3209 : vec2<f32> = ((vec2<f32>(x_3202.x, x_3202.y) * vec2<f32>(x_3204.z, x_3204.z)) + vec2<f32>(x_3207.x, x_3207.y));
    let x_3210 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3209.x, x_3209.y, x_3210.z, x_3210.w);
    let x_3212 : vec4<f32> = u_xlat7;
    let x_3215 : vec4<f32> = x_3173.x_MainLightWorldToLight[3i];
    let x_3217 : vec2<f32> = (vec2<f32>(x_3212.x, x_3212.y) + vec2<f32>(x_3215.x, x_3215.y));
    let x_3218 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3217.x, x_3217.y, x_3218.z, x_3218.w);
    let x_3220 : vec4<f32> = u_xlat7;
    let x_3223 : vec2<f32> = ((vec2<f32>(x_3220.x, x_3220.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3224 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3223.x, x_3223.y, x_3224.z, x_3224.w);
    let x_3231 : vec4<f32> = u_xlat7;
    let x_3234 : f32 = x_137.x_GlobalMipBias.x;
    let x_3235 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3231.x, x_3231.y), x_3234);
    u_xlat7 = x_3235;
    let x_3238 : f32 = x_3173.x_MainLightCookieTextureFormat;
    let x_3240 : f32 = x_3173.x_MainLightCookieTextureFormat;
    let x_3242 : f32 = x_3173.x_MainLightCookieTextureFormat;
    let x_3244 : f32 = x_3173.x_MainLightCookieTextureFormat;
    let x_3245 : vec4<f32> = vec4<f32>(x_3238, x_3240, x_3242, x_3244);
    let x_3252 : vec4<bool> = (vec4<f32>(x_3245.x, x_3245.y, x_3245.z, x_3245.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3252.x, x_3252.y);
    let x_3255 : bool = u_xlatb8.y;
    if (x_3255) {
      let x_3260 : f32 = u_xlat7.w;
      x_3256 = x_3260;
    } else {
      let x_3263 : f32 = u_xlat7.x;
      x_3256 = x_3263;
    }
    let x_3264 : f32 = x_3256;
    u_xlat2.x = x_3264;
    let x_3267 : bool = u_xlatb8.x;
    if (x_3267) {
      let x_3271 : vec4<f32> = u_xlat7;
      x_3268 = vec3<f32>(x_3271.x, x_3271.y, x_3271.z);
    } else {
      let x_3274 : vec3<f32> = u_xlat2;
      x_3268 = vec3<f32>(x_3274.x, x_3274.x, x_3274.x);
    }
    let x_3276 : vec3<f32> = x_3268;
    let x_3277 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3276.x, x_3276.y, x_3276.z, x_3277.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3283 : vec4<f32> = u_xlat7;
  let x_3286 : vec4<f32> = x_137.x_MainLightColor;
  let x_3288 : vec3<f32> = (vec3<f32>(x_3283.x, x_3283.y, x_3283.z) * vec3<f32>(x_3286.x, x_3286.y, x_3286.z));
  let x_3289 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3288.x, x_3288.y, x_3288.z, x_3289.w);
  let x_3291 : f32 = u_xlat48;
  let x_3293 : vec4<f32> = u_xlat7;
  let x_3295 : vec3<f32> = (vec3<f32>(x_3291, x_3291, x_3291) * vec3<f32>(x_3293.x, x_3293.y, x_3293.z));
  let x_3296 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3295.x, x_3295.y, x_3295.z, x_3296.w);
  let x_3298 : vec4<f32> = u_xlat3;
  let x_3301 : vec3<f32> = u_xlat21;
  u_xlat2.x = dot(-(vec3<f32>(x_3298.x, x_3298.y, x_3298.z)), x_3301);
  let x_3305 : f32 = u_xlat2.x;
  let x_3307 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3305 + x_3307);
  let x_3310 : vec3<f32> = u_xlat21;
  let x_3311 : vec3<f32> = u_xlat2;
  let x_3315 : vec4<f32> = u_xlat3;
  let x_3318 : vec3<f32> = ((x_3310 * -(vec3<f32>(x_3311.x, x_3311.x, x_3311.x))) + -(vec3<f32>(x_3315.x, x_3315.y, x_3315.z)));
  let x_3319 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3318.x, x_3318.y, x_3318.z, x_3319.w);
  let x_3321 : vec3<f32> = u_xlat21;
  let x_3322 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_3321, vec3<f32>(x_3322.x, x_3322.y, x_3322.z));
  let x_3327 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3327, 0.0f, 1.0f);
  let x_3331 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3331) + 1.0f);
  let x_3336 : f32 = u_xlat2.x;
  let x_3338 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3336 * x_3338);
  let x_3342 : f32 = u_xlat2.x;
  let x_3344 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3342 * x_3344);
  let x_3347 : f32 = u_xlat65;
  u_xlat69 = ((-(x_3347) * 0.699999988f) + 1.700000048f);
  let x_3353 : f32 = u_xlat65;
  let x_3354 : f32 = u_xlat69;
  u_xlat65 = (x_3353 * x_3354);
  let x_3356 : f32 = u_xlat65;
  u_xlat65 = (x_3356 * 6.0f);
  let x_3367 : vec4<f32> = u_xlat8;
  let x_3369 : f32 = u_xlat65;
  let x_3370 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3367.x, x_3367.y, x_3367.z), x_3369);
  u_xlat8 = x_3370;
  let x_3372 : f32 = u_xlat8.w;
  u_xlat65 = (x_3372 + -1.0f);
  let x_3375 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3376 : f32 = u_xlat65;
  u_xlat65 = ((x_3375 * x_3376) + 1.0f);
  let x_3379 : f32 = u_xlat65;
  u_xlat65 = max(x_3379, 0.0f);
  let x_3381 : f32 = u_xlat65;
  u_xlat65 = log2(x_3381);
  let x_3383 : f32 = u_xlat65;
  let x_3385 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat65 = (x_3383 * x_3385);
  let x_3387 : f32 = u_xlat65;
  u_xlat65 = exp2(x_3387);
  let x_3389 : f32 = u_xlat65;
  let x_3391 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat65 = (x_3389 * x_3391);
  let x_3393 : vec4<f32> = u_xlat8;
  let x_3395 : f32 = u_xlat65;
  let x_3397 : vec3<f32> = (vec3<f32>(x_3393.x, x_3393.y, x_3393.z) * vec3<f32>(x_3395, x_3395, x_3395));
  let x_3398 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3397.x, x_3397.y, x_3397.z, x_3398.w);
  let x_3400 : f32 = u_xlat66;
  let x_3402 : f32 = u_xlat66;
  let x_3406 : vec2<f32> = ((vec2<f32>(x_3400, x_3400) * vec2<f32>(x_3402, x_3402)) + vec2<f32>(-1.0f, 1.0f));
  let x_3407 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3406.x, x_3406.y, x_3407.z, x_3407.w);
  let x_3410 : f32 = u_xlat9.y;
  u_xlat65 = (1.0f / x_3410);
  let x_3412 : f32 = u_xlat68;
  u_xlat66 = (x_3412 + -0.039999999f);
  let x_3416 : f32 = u_xlat2.x;
  let x_3417 : f32 = u_xlat66;
  u_xlat2.x = ((x_3416 * x_3417) + 0.039999999f);
  let x_3423 : f32 = u_xlat2.x;
  let x_3424 : f32 = u_xlat65;
  u_xlat2.x = (x_3423 * x_3424);
  let x_3427 : vec3<f32> = u_xlat2;
  let x_3429 : vec4<f32> = u_xlat8;
  let x_3431 : vec3<f32> = (vec3<f32>(x_3427.x, x_3427.x, x_3427.x) * vec3<f32>(x_3429.x, x_3429.y, x_3429.z));
  let x_3432 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3431.x, x_3431.y, x_3431.z, x_3432.w);
  let x_3434 : vec4<f32> = u_xlat4;
  let x_3436 : vec3<f32> = u_xlat5;
  let x_3438 : vec4<f32> = u_xlat8;
  let x_3440 : vec3<f32> = ((vec3<f32>(x_3434.x, x_3434.y, x_3434.z) * x_3436) + vec3<f32>(x_3438.x, x_3438.y, x_3438.z));
  let x_3441 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3440.x, x_3440.y, x_3440.z, x_3441.w);
  let x_3444 : f32 = u_xlat0.x;
  let x_3446 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3444 * x_3446);
  let x_3449 : vec3<f32> = u_xlat21;
  let x_3451 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(x_3449, vec3<f32>(x_3451.x, x_3451.y, x_3451.z));
  let x_3456 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3456, 0.0f, 1.0f);
  let x_3460 : f32 = u_xlat0.x;
  let x_3462 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3460 * x_3462);
  let x_3465 : vec3<f32> = u_xlat0;
  let x_3467 : vec4<f32> = u_xlat7;
  let x_3469 : vec3<f32> = (vec3<f32>(x_3465.x, x_3465.x, x_3465.x) * vec3<f32>(x_3467.x, x_3467.y, x_3467.z));
  let x_3470 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3469.x, x_3469.y, x_3469.z, x_3470.w);
  let x_3472 : vec4<f32> = u_xlat3;
  let x_3475 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3477 : vec3<f32> = (vec3<f32>(x_3472.x, x_3472.y, x_3472.z) + vec3<f32>(x_3475.x, x_3475.y, x_3475.z));
  let x_3478 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3477.x, x_3477.y, x_3477.z, x_3478.w);
  let x_3480 : vec4<f32> = u_xlat8;
  let x_3482 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3480.x, x_3480.y, x_3480.z), vec3<f32>(x_3482.x, x_3482.y, x_3482.z));
  let x_3487 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3487, 1.17549435e-37f);
  let x_3491 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3491);
  let x_3494 : vec3<f32> = u_xlat0;
  let x_3496 : vec4<f32> = u_xlat8;
  let x_3498 : vec3<f32> = (vec3<f32>(x_3494.x, x_3494.x, x_3494.x) * vec3<f32>(x_3496.x, x_3496.y, x_3496.z));
  let x_3499 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3498.x, x_3498.y, x_3498.z, x_3499.w);
  let x_3501 : vec3<f32> = u_xlat21;
  let x_3502 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3501, vec3<f32>(x_3502.x, x_3502.y, x_3502.z));
  let x_3507 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3507, 0.0f, 1.0f);
  let x_3511 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3513 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3511.x, x_3511.y, x_3511.z), vec3<f32>(x_3513.x, x_3513.y, x_3513.z));
  let x_3518 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3518, 0.0f, 1.0f);
  let x_3522 : f32 = u_xlat0.x;
  let x_3524 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3522 * x_3524);
  let x_3528 : f32 = u_xlat0.x;
  let x_3530 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_3528 * x_3530) + 1.000010014f);
  let x_3536 : f32 = u_xlat2.x;
  let x_3538 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3536 * x_3538);
  let x_3542 : f32 = u_xlat0.x;
  let x_3544 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3542 * x_3544);
  let x_3548 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3548, 0.100000001f);
  let x_3553 : f32 = u_xlat0.x;
  let x_3555 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3553 * x_3555);
  let x_3559 : f32 = u_xlat6.x;
  let x_3561 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3559 * x_3561);
  let x_3564 : f32 = u_xlat67;
  let x_3566 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3564 / x_3566);
  let x_3569 : vec3<f32> = u_xlat0;
  let x_3573 : vec3<f32> = u_xlat5;
  let x_3574 : vec3<f32> = ((vec3<f32>(x_3569.x, x_3569.x, x_3569.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3573);
  let x_3575 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3574.x, x_3574.y, x_3574.z, x_3575.w);
  let x_3577 : vec4<f32> = u_xlat7;
  let x_3579 : vec4<f32> = u_xlat8;
  let x_3581 : vec3<f32> = (vec3<f32>(x_3577.x, x_3577.y, x_3577.z) * vec3<f32>(x_3579.x, x_3579.y, x_3579.z));
  let x_3582 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3581.x, x_3581.y, x_3581.z, x_3582.w);
  let x_3585 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3587 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3585, x_3587);
  let x_3593 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3593));
  let x_3597 : f32 = x_3173.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3599 : f32 = x_3173.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3601 : f32 = x_3173.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3603 : f32 = x_3173.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3604 : vec4<f32> = vec4<f32>(x_3597, x_3599, x_3601, x_3603);
  let x_3611 : vec4<bool> = (vec4<f32>(x_3604.x, x_3604.y, x_3604.z, x_3604.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3612 : vec2<bool> = vec2<bool>(x_3611.x, x_3611.w);
  let x_3613 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3612.x, x_3613.y, x_3613.z, x_3612.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3624 : u32 = u_xlatu_loop_1;
    let x_3625 : u32 = u_xlatu0;
    if ((x_3624 < x_3625)) {
    } else {
      break;
    }
    let x_3628 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3628 >> 2u);
    let x_3632 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3632 & 3u));
    let x_3635 : u32 = u_xlatu68;
    let x_3638 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3635)];
    let x_3648 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3653 : vec4<u32> = indexable[x_3648];
    u_xlat68 = dot(x_3638, bitcast<vec4<f32>>(x_3653));
    let x_3656 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3656));
    let x_3659 : vec3<f32> = vs_INTERP0;
    let x_3671 : u32 = u_xlatu68;
    let x_3674 : vec4<f32> = x_3670.x_AdditionalLightsPosition[bitcast<i32>(x_3671)];
    let x_3677 : u32 = u_xlatu68;
    let x_3680 : vec4<f32> = x_3670.x_AdditionalLightsPosition[bitcast<i32>(x_3677)];
    u_xlat30 = ((-(x_3659) * vec3<f32>(x_3674.w, x_3674.w, x_3674.w)) + vec3<f32>(x_3680.x, x_3680.y, x_3680.z));
    let x_3683 : vec3<f32> = u_xlat30;
    let x_3684 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(x_3683, x_3684);
    let x_3686 : f32 = u_xlat69;
    u_xlat69 = max(x_3686, 6.10351562e-05f);
    let x_3690 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3690);
    let x_3692 : f32 = u_xlat70;
    let x_3694 : vec3<f32> = u_xlat30;
    let x_3695 : vec3<f32> = (vec3<f32>(x_3692, x_3692, x_3692) * x_3694);
    let x_3696 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3695.x, x_3695.y, x_3695.z, x_3696.w);
    let x_3699 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3699);
    let x_3701 : f32 = u_xlat69;
    let x_3702 : u32 = u_xlatu68;
    let x_3705 : f32 = x_3670.x_AdditionalLightsAttenuation[bitcast<i32>(x_3702)].x;
    u_xlat69 = (x_3701 * x_3705);
    let x_3707 : f32 = u_xlat69;
    let x_3709 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3707) * x_3709) + 1.0f);
    let x_3712 : f32 = u_xlat69;
    u_xlat69 = max(x_3712, 0.0f);
    let x_3714 : f32 = u_xlat69;
    let x_3715 : f32 = u_xlat69;
    u_xlat69 = (x_3714 * x_3715);
    let x_3717 : f32 = u_xlat69;
    let x_3718 : f32 = u_xlat71;
    u_xlat69 = (x_3717 * x_3718);
    let x_3720 : u32 = u_xlatu68;
    let x_3723 : vec4<f32> = x_3670.x_AdditionalLightsSpotDir[bitcast<i32>(x_3720)];
    let x_3725 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3723.x, x_3723.y, x_3723.z), vec3<f32>(x_3725.x, x_3725.y, x_3725.z));
    let x_3728 : f32 = u_xlat71;
    let x_3729 : u32 = u_xlatu68;
    let x_3732 : f32 = x_3670.x_AdditionalLightsAttenuation[bitcast<i32>(x_3729)].z;
    let x_3734 : u32 = u_xlatu68;
    let x_3737 : f32 = x_3670.x_AdditionalLightsAttenuation[bitcast<i32>(x_3734)].w;
    u_xlat71 = ((x_3728 * x_3732) + x_3737);
    let x_3739 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3739, 0.0f, 1.0f);
    let x_3741 : f32 = u_xlat71;
    let x_3742 : f32 = u_xlat71;
    u_xlat71 = (x_3741 * x_3742);
    let x_3744 : f32 = u_xlat69;
    let x_3745 : f32 = u_xlat71;
    u_xlat69 = (x_3744 * x_3745);
    let x_3748 : u32 = u_xlatu68;
    u_xlatu71 = (x_3748 >> 5u);
    let x_3751 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3751) & 31i)));
    let x_3757 : i32 = u_xlati73;
    let x_3759 : u32 = u_xlatu71;
    let x_3762 : f32 = x_3173.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3759)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3757) & bitcast<u32>(x_3762)));
    let x_3766 : i32 = u_xlati71;
    if ((x_3766 != 0i)) {
      let x_3776 : u32 = u_xlatu68;
      let x_3779 : f32 = x_3775.x_AdditionalLightsLightTypes[bitcast<i32>(x_3776)].el;
      u_xlati71 = i32(x_3779);
      let x_3781 : i32 = u_xlati71;
      u_xlati73 = select(1i, 0i, (x_3781 != 0i));
      let x_3785 : u32 = u_xlatu68;
      u_xlati11 = (bitcast<i32>(x_3785) << bitcast<u32>(2i));
      let x_3788 : i32 = u_xlati73;
      if ((x_3788 != 0i)) {
        let x_3793 : vec3<f32> = vs_INTERP0;
        let x_3795 : i32 = u_xlati11;
        let x_3798 : i32 = u_xlati11;
        let x_3802 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_3795 + 1i) / 4i)][((x_3798 + 1i) % 4i)];
        u_xlat32 = (vec3<f32>(x_3793.y, x_3793.y, x_3793.y) * vec3<f32>(x_3802.x, x_3802.y, x_3802.w));
        let x_3805 : i32 = u_xlati11;
        let x_3807 : i32 = u_xlati11;
        let x_3810 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[(x_3805 / 4i)][(x_3807 % 4i)];
        let x_3812 : vec3<f32> = vs_INTERP0;
        let x_3815 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3810.x, x_3810.y, x_3810.w) * vec3<f32>(x_3812.x, x_3812.x, x_3812.x)) + x_3815);
        let x_3817 : i32 = u_xlati11;
        let x_3820 : i32 = u_xlati11;
        let x_3824 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_3817 + 2i) / 4i)][((x_3820 + 2i) % 4i)];
        let x_3826 : vec3<f32> = vs_INTERP0;
        let x_3829 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3824.x, x_3824.y, x_3824.w) * vec3<f32>(x_3826.z, x_3826.z, x_3826.z)) + x_3829);
        let x_3831 : vec3<f32> = u_xlat32;
        let x_3832 : i32 = u_xlati11;
        let x_3835 : i32 = u_xlati11;
        let x_3839 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_3832 + 3i) / 4i)][((x_3835 + 3i) % 4i)];
        u_xlat32 = (x_3831 + vec3<f32>(x_3839.x, x_3839.y, x_3839.w));
        let x_3842 : vec3<f32> = u_xlat32;
        let x_3844 : vec3<f32> = u_xlat32;
        let x_3846 : vec2<f32> = (vec2<f32>(x_3842.x, x_3842.y) / vec2<f32>(x_3844.z, x_3844.z));
        let x_3847 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3846.x, x_3846.y, x_3847.z);
        let x_3849 : vec3<f32> = u_xlat32;
        let x_3852 : vec2<f32> = ((vec2<f32>(x_3849.x, x_3849.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3853 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3852.x, x_3852.y, x_3853.z);
        let x_3855 : vec3<f32> = u_xlat32;
        let x_3859 : vec2<f32> = clamp(vec2<f32>(x_3855.x, x_3855.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3860 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3859.x, x_3859.y, x_3860.z);
        let x_3862 : u32 = u_xlatu68;
        let x_3865 : vec4<f32> = x_3775.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3862)];
        let x_3867 : vec3<f32> = u_xlat32;
        let x_3870 : u32 = u_xlatu68;
        let x_3873 : vec4<f32> = x_3775.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3870)];
        let x_3875 : vec2<f32> = ((vec2<f32>(x_3865.x, x_3865.y) * vec2<f32>(x_3867.x, x_3867.y)) + vec2<f32>(x_3873.z, x_3873.w));
        let x_3876 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3875.x, x_3875.y, x_3876.z);
      } else {
        let x_3880 : i32 = u_xlati71;
        u_xlatb71 = (x_3880 == 1i);
        let x_3882 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3882);
        let x_3884 : i32 = u_xlati71;
        if ((x_3884 != 0i)) {
          let x_3888 : vec3<f32> = vs_INTERP0;
          let x_3890 : i32 = u_xlati11;
          let x_3893 : i32 = u_xlati11;
          let x_3897 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_3890 + 1i) / 4i)][((x_3893 + 1i) % 4i)];
          let x_3899 : vec2<f32> = (vec2<f32>(x_3888.y, x_3888.y) * vec2<f32>(x_3897.x, x_3897.y));
          let x_3900 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3899.x, x_3899.y, x_3900.z, x_3900.w);
          let x_3902 : i32 = u_xlati11;
          let x_3904 : i32 = u_xlati11;
          let x_3907 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[(x_3902 / 4i)][(x_3904 % 4i)];
          let x_3909 : vec3<f32> = vs_INTERP0;
          let x_3912 : vec4<f32> = u_xlat12;
          let x_3914 : vec2<f32> = ((vec2<f32>(x_3907.x, x_3907.y) * vec2<f32>(x_3909.x, x_3909.x)) + vec2<f32>(x_3912.x, x_3912.y));
          let x_3915 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3914.x, x_3914.y, x_3915.z, x_3915.w);
          let x_3917 : i32 = u_xlati11;
          let x_3920 : i32 = u_xlati11;
          let x_3924 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_3917 + 2i) / 4i)][((x_3920 + 2i) % 4i)];
          let x_3926 : vec3<f32> = vs_INTERP0;
          let x_3929 : vec4<f32> = u_xlat12;
          let x_3931 : vec2<f32> = ((vec2<f32>(x_3924.x, x_3924.y) * vec2<f32>(x_3926.z, x_3926.z)) + vec2<f32>(x_3929.x, x_3929.y));
          let x_3932 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3931.x, x_3931.y, x_3932.z, x_3932.w);
          let x_3934 : vec4<f32> = u_xlat12;
          let x_3936 : i32 = u_xlati11;
          let x_3939 : i32 = u_xlati11;
          let x_3943 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_3936 + 3i) / 4i)][((x_3939 + 3i) % 4i)];
          let x_3945 : vec2<f32> = (vec2<f32>(x_3934.x, x_3934.y) + vec2<f32>(x_3943.x, x_3943.y));
          let x_3946 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3945.x, x_3945.y, x_3946.z, x_3946.w);
          let x_3948 : vec4<f32> = u_xlat12;
          let x_3951 : vec2<f32> = ((vec2<f32>(x_3948.x, x_3948.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3952 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3951.x, x_3951.y, x_3952.z, x_3952.w);
          let x_3954 : vec4<f32> = u_xlat12;
          let x_3956 : vec2<f32> = fract(vec2<f32>(x_3954.x, x_3954.y));
          let x_3957 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3956.x, x_3956.y, x_3957.z, x_3957.w);
          let x_3959 : u32 = u_xlatu68;
          let x_3962 : vec4<f32> = x_3775.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3959)];
          let x_3964 : vec4<f32> = u_xlat12;
          let x_3967 : u32 = u_xlatu68;
          let x_3970 : vec4<f32> = x_3775.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3967)];
          let x_3972 : vec2<f32> = ((vec2<f32>(x_3962.x, x_3962.y) * vec2<f32>(x_3964.x, x_3964.y)) + vec2<f32>(x_3970.z, x_3970.w));
          let x_3973 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_3972.x, x_3972.y, x_3973.z);
        } else {
          let x_3976 : vec3<f32> = vs_INTERP0;
          let x_3978 : i32 = u_xlati11;
          let x_3981 : i32 = u_xlati11;
          let x_3985 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_3978 + 1i) / 4i)][((x_3981 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_3976.y, x_3976.y, x_3976.y, x_3976.y) * x_3985);
          let x_3987 : i32 = u_xlati11;
          let x_3989 : i32 = u_xlati11;
          let x_3992 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[(x_3987 / 4i)][(x_3989 % 4i)];
          let x_3993 : vec3<f32> = vs_INTERP0;
          let x_3996 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_3992 * vec4<f32>(x_3993.x, x_3993.x, x_3993.x, x_3993.x)) + x_3996);
          let x_3998 : i32 = u_xlati11;
          let x_4001 : i32 = u_xlati11;
          let x_4005 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_3998 + 2i) / 4i)][((x_4001 + 2i) % 4i)];
          let x_4006 : vec3<f32> = vs_INTERP0;
          let x_4009 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4005 * vec4<f32>(x_4006.z, x_4006.z, x_4006.z, x_4006.z)) + x_4009);
          let x_4011 : vec4<f32> = u_xlat12;
          let x_4012 : i32 = u_xlati11;
          let x_4015 : i32 = u_xlati11;
          let x_4019 : vec4<f32> = x_3775.x_AdditionalLightsWorldToLights[((x_4012 + 3i) / 4i)][((x_4015 + 3i) % 4i)];
          u_xlat12 = (x_4011 + x_4019);
          let x_4021 : vec4<f32> = u_xlat12;
          let x_4023 : vec4<f32> = u_xlat12;
          let x_4025 : vec3<f32> = (vec3<f32>(x_4021.x, x_4021.y, x_4021.z) / vec3<f32>(x_4023.w, x_4023.w, x_4023.w));
          let x_4026 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4025.x, x_4025.y, x_4025.z, x_4026.w);
          let x_4028 : vec4<f32> = u_xlat12;
          let x_4030 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4028.x, x_4028.y, x_4028.z), vec3<f32>(x_4030.x, x_4030.y, x_4030.z));
          let x_4033 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4033);
          let x_4035 : f32 = u_xlat71;
          let x_4037 : vec4<f32> = u_xlat12;
          let x_4039 : vec3<f32> = (vec3<f32>(x_4035, x_4035, x_4035) * vec3<f32>(x_4037.x, x_4037.y, x_4037.z));
          let x_4040 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4039.x, x_4039.y, x_4039.z, x_4040.w);
          let x_4042 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4042.x, x_4042.y, x_4042.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4047 : f32 = u_xlat71;
          u_xlat71 = max(x_4047, 0.000001f);
          let x_4050 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4050);
          let x_4052 : f32 = u_xlat71;
          let x_4054 : vec4<f32> = u_xlat12;
          let x_4056 : vec3<f32> = (vec3<f32>(x_4052, x_4052, x_4052) * vec3<f32>(x_4054.z, x_4054.x, x_4054.y));
          let x_4057 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4056.x, x_4056.y, x_4056.z, x_4057.w);
          let x_4060 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4060);
          let x_4064 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4064, 0.0f, 1.0f);
          let x_4068 : vec4<f32> = u_xlat13;
          let x_4071 : vec4<bool> = (vec4<f32>(x_4068.y, x_4068.y, x_4068.y, x_4068.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4072 : vec2<bool> = vec2<bool>(x_4071.x, x_4071.w);
          let x_4073 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4072.x, x_4073.y, x_4073.z, x_4072.y);
          let x_4076 : bool = u_xlatb11.x;
          if (x_4076) {
            let x_4081 : f32 = u_xlat13.x;
            x_4077 = x_4081;
          } else {
            let x_4084 : f32 = u_xlat13.x;
            x_4077 = -(x_4084);
          }
          let x_4086 : f32 = x_4077;
          u_xlat11.x = x_4086;
          let x_4089 : bool = u_xlatb11.w;
          if (x_4089) {
            let x_4094 : f32 = u_xlat13.x;
            x_4090 = x_4094;
          } else {
            let x_4097 : f32 = u_xlat13.x;
            x_4090 = -(x_4097);
          }
          let x_4099 : f32 = x_4090;
          u_xlat11.w = x_4099;
          let x_4101 : vec4<f32> = u_xlat12;
          let x_4103 : f32 = u_xlat71;
          let x_4106 : vec4<f32> = u_xlat11;
          let x_4108 : vec2<f32> = ((vec2<f32>(x_4101.x, x_4101.y) * vec2<f32>(x_4103, x_4103)) + vec2<f32>(x_4106.x, x_4106.w));
          let x_4109 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4108.x, x_4109.y, x_4109.z, x_4108.y);
          let x_4111 : vec4<f32> = u_xlat11;
          let x_4114 : vec2<f32> = ((vec2<f32>(x_4111.x, x_4111.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4115 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4114.x, x_4115.y, x_4115.z, x_4114.y);
          let x_4117 : vec4<f32> = u_xlat11;
          let x_4121 : vec2<f32> = clamp(vec2<f32>(x_4117.x, x_4117.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4122 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4121.x, x_4122.y, x_4122.z, x_4121.y);
          let x_4124 : u32 = u_xlatu68;
          let x_4127 : vec4<f32> = x_3775.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4124)];
          let x_4129 : vec4<f32> = u_xlat11;
          let x_4132 : u32 = u_xlatu68;
          let x_4135 : vec4<f32> = x_3775.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4132)];
          let x_4137 : vec2<f32> = ((vec2<f32>(x_4127.x, x_4127.y) * vec2<f32>(x_4129.x, x_4129.w)) + vec2<f32>(x_4135.z, x_4135.w));
          let x_4138 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4137.x, x_4137.y, x_4138.z);
        }
      }
      let x_4145 : vec3<f32> = u_xlat32;
      let x_4148 : f32 = x_137.x_GlobalMipBias.x;
      let x_4149 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4145.x, x_4145.y), x_4148);
      u_xlat11 = x_4149;
      let x_4151 : bool = u_xlatb2.w;
      if (x_4151) {
        let x_4156 : f32 = u_xlat11.w;
        x_4152 = x_4156;
      } else {
        let x_4159 : f32 = u_xlat11.x;
        x_4152 = x_4159;
      }
      let x_4160 : f32 = x_4152;
      u_xlat71 = x_4160;
      let x_4162 : bool = u_xlatb2.x;
      if (x_4162) {
        let x_4166 : vec4<f32> = u_xlat11;
        x_4163 = vec3<f32>(x_4166.x, x_4166.y, x_4166.z);
      } else {
        let x_4169 : f32 = u_xlat71;
        x_4163 = vec3<f32>(x_4169, x_4169, x_4169);
      }
      let x_4171 : vec3<f32> = x_4163;
      let x_4172 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4171.x, x_4171.y, x_4171.z, x_4172.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4178 : vec4<f32> = u_xlat11;
    let x_4180 : u32 = u_xlatu68;
    let x_4183 : vec4<f32> = x_3670.x_AdditionalLightsColor[bitcast<i32>(x_4180)];
    let x_4185 : vec3<f32> = (vec3<f32>(x_4178.x, x_4178.y, x_4178.z) * vec3<f32>(x_4183.x, x_4183.y, x_4183.z));
    let x_4186 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4185.x, x_4185.y, x_4185.z, x_4186.w);
    let x_4188 : f32 = u_xlat48;
    let x_4190 : vec4<f32> = u_xlat11;
    let x_4192 : vec3<f32> = (vec3<f32>(x_4188, x_4188, x_4188) * vec3<f32>(x_4190.x, x_4190.y, x_4190.z));
    let x_4193 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4192.x, x_4192.y, x_4192.z, x_4193.w);
    let x_4195 : vec3<f32> = u_xlat21;
    let x_4196 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_4195, vec3<f32>(x_4196.x, x_4196.y, x_4196.z));
    let x_4199 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4199, 0.0f, 1.0f);
    let x_4201 : f32 = u_xlat68;
    let x_4202 : f32 = u_xlat69;
    u_xlat68 = (x_4201 * x_4202);
    let x_4204 : f32 = u_xlat68;
    let x_4206 : vec4<f32> = u_xlat11;
    let x_4208 : vec3<f32> = (vec3<f32>(x_4204, x_4204, x_4204) * vec3<f32>(x_4206.x, x_4206.y, x_4206.z));
    let x_4209 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4208.x, x_4208.y, x_4208.z, x_4209.w);
    let x_4211 : vec3<f32> = u_xlat30;
    let x_4212 : f32 = u_xlat70;
    let x_4215 : vec4<f32> = u_xlat3;
    u_xlat30 = ((x_4211 * vec3<f32>(x_4212, x_4212, x_4212)) + vec3<f32>(x_4215.x, x_4215.y, x_4215.z));
    let x_4218 : vec3<f32> = u_xlat30;
    let x_4219 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(x_4218, x_4219);
    let x_4221 : f32 = u_xlat68;
    u_xlat68 = max(x_4221, 1.17549435e-37f);
    let x_4223 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4223);
    let x_4225 : f32 = u_xlat68;
    let x_4227 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_4225, x_4225, x_4225) * x_4227);
    let x_4229 : vec3<f32> = u_xlat21;
    let x_4230 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(x_4229, x_4230);
    let x_4232 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4232, 0.0f, 1.0f);
    let x_4234 : vec4<f32> = u_xlat10;
    let x_4236 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(vec3<f32>(x_4234.x, x_4234.y, x_4234.z), x_4236);
    let x_4238 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4238, 0.0f, 1.0f);
    let x_4240 : f32 = u_xlat68;
    let x_4241 : f32 = u_xlat68;
    u_xlat68 = (x_4240 * x_4241);
    let x_4243 : f32 = u_xlat68;
    let x_4245 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4243 * x_4245) + 1.000010014f);
    let x_4248 : f32 = u_xlat69;
    let x_4249 : f32 = u_xlat69;
    u_xlat69 = (x_4248 * x_4249);
    let x_4251 : f32 = u_xlat68;
    let x_4252 : f32 = u_xlat68;
    u_xlat68 = (x_4251 * x_4252);
    let x_4254 : f32 = u_xlat69;
    u_xlat69 = max(x_4254, 0.100000001f);
    let x_4256 : f32 = u_xlat68;
    let x_4257 : f32 = u_xlat69;
    u_xlat68 = (x_4256 * x_4257);
    let x_4260 : f32 = u_xlat6.x;
    let x_4261 : f32 = u_xlat68;
    u_xlat68 = (x_4260 * x_4261);
    let x_4263 : f32 = u_xlat67;
    let x_4264 : f32 = u_xlat68;
    u_xlat68 = (x_4263 / x_4264);
    let x_4266 : f32 = u_xlat68;
    let x_4269 : vec3<f32> = u_xlat5;
    u_xlat30 = ((vec3<f32>(x_4266, x_4266, x_4266) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4269);
    let x_4271 : vec3<f32> = u_xlat30;
    let x_4272 : vec4<f32> = u_xlat11;
    let x_4275 : vec4<f32> = u_xlat8;
    let x_4277 : vec3<f32> = ((x_4271 * vec3<f32>(x_4272.x, x_4272.y, x_4272.z)) + vec3<f32>(x_4275.x, x_4275.y, x_4275.z));
    let x_4278 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4277.x, x_4277.y, x_4277.z, x_4278.w);

    continuing {
      let x_4280 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4280 + bitcast<u32>(1i));
    }
  }
  let x_4282 : vec4<f32> = u_xlat4;
  let x_4284 : vec3<f32> = u_xlat27;
  let x_4287 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_4282.x, x_4282.y, x_4282.z) * vec3<f32>(x_4284.x, x_4284.x, x_4284.x)) + vec3<f32>(x_4287.x, x_4287.y, x_4287.z));
  let x_4290 : vec4<f32> = u_xlat8;
  let x_4292 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4290.x, x_4290.y, x_4290.z) + x_4292);
  let x_4294 : vec4<f32> = vs_INTERP4;
  let x_4296 : vec3<f32> = u_xlat1;
  let x_4298 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_4294.w, x_4294.w, x_4294.w) * x_4296) + x_4298);
  let x_4301 : f32 = u_xlat23;
  let x_4302 : f32 = u_xlat23;
  u_xlat63 = (x_4301 * -(x_4302));
  let x_4305 : f32 = u_xlat63;
  u_xlat63 = exp2(x_4305);
  let x_4307 : vec3<f32> = u_xlat0;
  let x_4310 : vec4<f32> = x_137.unity_FogColor;
  u_xlat0 = (x_4307 + -(vec3<f32>(x_4310.x, x_4310.y, x_4310.z)));
  let x_4316 : f32 = u_xlat63;
  let x_4318 : vec3<f32> = u_xlat0;
  let x_4321 : vec4<f32> = x_137.unity_FogColor;
  let x_4323 : vec3<f32> = ((vec3<f32>(x_4316, x_4316, x_4316) * x_4318) + vec3<f32>(x_4321.x, x_4321.y, x_4321.z));
  let x_4324 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4323.x, x_4323.y, x_4323.z, x_4324.w);
  let x_4326 : bool = u_xlatb44;
  let x_4327 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_4327, x_4326);
  let x_4333 : u32 = x_137.x_RenderingLayerMaxInt;
  let x_4335 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_4333 & bitcast<u32>(x_4335));
  let x_4338 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4338);
  let x_4343 : f32 = u_xlat0.x;
  let x_4345 : f32 = x_137.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4343 * x_4345);
  let x_4349 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4349, 0.0f, 1.0f);
  let x_4353 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4353.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

