struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3637 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1583 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1715 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1787 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var x_3844 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_370 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_370);
      let x_373 : vec4<f32> = u_xlat7;
      let x_374 : vec2<f32> = vec2<f32>(x_373.x, x_373.y);
      let x_376 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_374.x, x_374.y, x_376);
      let x_383 : vec3<f32> = txVec2;
      let x_385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_383.xy, x_383.z);
      u_xlat8.z = x_385;
      let x_388 : vec4<f32> = u_xlat7;
      let x_389 : vec2<f32> = vec2<f32>(x_388.z, x_388.w);
      let x_391 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_389.x, x_389.y, x_391);
      let x_398 : vec3<f32> = txVec3;
      let x_400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_398.xy, x_398.z);
      u_xlat8.w = x_400;
      let x_402 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_402, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_409 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_409 == 2.0f);
      let x_411 : bool = u_xlatb65;
      if (x_411) {
        let x_414 : vec4<f32> = u_xlat6;
        let x_417 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_422 : vec2<f32> = ((vec2<f32>(x_414.x, x_414.y) * vec2<f32>(x_417.z, x_417.w)) + vec2<f32>(0.5f, 0.5f));
        let x_423 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_422.x, x_422.y, x_423.z, x_423.w);
        let x_425 : vec4<f32> = u_xlat7;
        let x_427 : vec2<f32> = floor(vec2<f32>(x_425.x, x_425.y));
        let x_428 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_427.x, x_427.y, x_428.z, x_428.w);
        let x_432 : vec4<f32> = u_xlat6;
        let x_435 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_438 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_432.x, x_432.y) * vec2<f32>(x_435.z, x_435.w)) + -(vec2<f32>(x_438.x, x_438.y)));
        let x_442 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_442.x, x_442.x, x_442.y, x_442.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_447 : vec4<f32> = u_xlat8;
        let x_449 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_447.x, x_447.x, x_447.z, x_447.z) * vec4<f32>(x_449.x, x_449.x, x_449.z, x_449.z));
        let x_452 : vec4<f32> = u_xlat9;
        let x_456 : vec2<f32> = (vec2<f32>(x_452.y, x_452.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_457 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_456.x, x_457.y, x_456.y, x_457.w);
        let x_459 : vec4<f32> = u_xlat9;
        let x_462 : vec2<f32> = u_xlat49;
        let x_464 : vec2<f32> = ((vec2<f32>(x_459.x, x_459.z) * vec2<f32>(0.5f, 0.5f)) + -(x_462));
        let x_465 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_464.x, x_464.y, x_465.z, x_465.w);
        let x_468 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_468) + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec2<f32> = u_xlat49;
        let x_475 : vec2<f32> = min(x_473, vec2<f32>(0.0f, 0.0f));
        let x_476 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_475.x, x_475.y, x_476.z, x_476.w);
        let x_478 : vec4<f32> = u_xlat10;
        let x_481 : vec4<f32> = u_xlat10;
        let x_484 : vec2<f32> = u_xlat51;
        let x_485 : vec2<f32> = ((-(vec2<f32>(x_478.x, x_478.y)) * vec2<f32>(x_481.x, x_481.y)) + x_484);
        let x_486 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_485.x, x_485.y, x_486.z, x_486.w);
        let x_488 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_488, vec2<f32>(0.0f, 0.0f));
        let x_490 : vec2<f32> = u_xlat49;
        let x_492 : vec2<f32> = u_xlat49;
        let x_494 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_490) * x_492) + vec2<f32>(x_494.y, x_494.w));
        let x_497 : vec4<f32> = u_xlat10;
        let x_499 : vec2<f32> = (vec2<f32>(x_497.x, x_497.y) + vec2<f32>(1.0f, 1.0f));
        let x_500 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_499.x, x_499.y, x_500.z, x_500.w);
        let x_502 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_502 + vec2<f32>(1.0f, 1.0f));
        let x_505 : vec4<f32> = u_xlat9;
        let x_509 : vec2<f32> = (vec2<f32>(x_505.x, x_505.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_510 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
        let x_512 : vec2<f32> = u_xlat51;
        let x_513 : vec2<f32> = (x_512 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_514 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_513.x, x_513.y, x_514.z, x_514.w);
        let x_516 : vec4<f32> = u_xlat10;
        let x_518 : vec2<f32> = (vec2<f32>(x_516.x, x_516.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_519 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_518.x, x_518.y, x_519.z, x_519.w);
        let x_522 : vec2<f32> = u_xlat49;
        let x_523 : vec2<f32> = (x_522 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_524 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_523.x, x_523.y, x_524.z, x_524.w);
        let x_526 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_526.y, x_526.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_530 : f32 = u_xlat10.x;
        u_xlat11.z = x_530;
        let x_533 : f32 = u_xlat49.x;
        u_xlat11.w = x_533;
        let x_536 : f32 = u_xlat12.x;
        u_xlat9.z = x_536;
        let x_539 : f32 = u_xlat8.x;
        u_xlat9.w = x_539;
        let x_542 : vec4<f32> = u_xlat9;
        let x_544 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_542.z, x_542.w, x_542.x, x_542.z) + vec4<f32>(x_544.z, x_544.w, x_544.x, x_544.z));
        let x_548 : f32 = u_xlat11.y;
        u_xlat10.z = x_548;
        let x_551 : f32 = u_xlat49.y;
        u_xlat10.w = x_551;
        let x_554 : f32 = u_xlat9.y;
        u_xlat12.z = x_554;
        let x_557 : f32 = u_xlat8.z;
        u_xlat12.w = x_557;
        let x_559 : vec4<f32> = u_xlat10;
        let x_561 : vec4<f32> = u_xlat12;
        let x_563 : vec3<f32> = (vec3<f32>(x_559.z, x_559.y, x_559.w) + vec3<f32>(x_561.z, x_561.y, x_561.w));
        let x_564 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
        let x_566 : vec4<f32> = u_xlat9;
        let x_568 : vec4<f32> = u_xlat13;
        let x_570 : vec3<f32> = (vec3<f32>(x_566.x, x_566.z, x_566.w) / vec3<f32>(x_568.z, x_568.w, x_568.y));
        let x_571 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_570.x, x_570.y, x_570.z, x_571.w);
        let x_573 : vec4<f32> = u_xlat9;
        let x_579 : vec3<f32> = (vec3<f32>(x_573.x, x_573.y, x_573.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_580 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
        let x_582 : vec4<f32> = u_xlat12;
        let x_584 : vec4<f32> = u_xlat8;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) / vec3<f32>(x_584.x, x_584.y, x_584.z));
        let x_587 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat10;
        let x_591 : vec3<f32> = (vec3<f32>(x_589.x, x_589.y, x_589.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_592 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_591.x, x_591.y, x_591.z, x_592.w);
        let x_594 : vec4<f32> = u_xlat9;
        let x_597 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_599 : vec3<f32> = (vec3<f32>(x_594.y, x_594.x, x_594.z) * vec3<f32>(x_597.x, x_597.x, x_597.x));
        let x_600 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_599.x, x_599.y, x_599.z, x_600.w);
        let x_602 : vec4<f32> = u_xlat10;
        let x_605 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_607 : vec3<f32> = (vec3<f32>(x_602.x, x_602.y, x_602.z) * vec3<f32>(x_605.y, x_605.y, x_605.y));
        let x_608 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_607.x, x_607.y, x_607.z, x_608.w);
        let x_611 : f32 = u_xlat10.x;
        u_xlat9.w = x_611;
        let x_613 : vec4<f32> = u_xlat7;
        let x_616 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_619 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_613.x, x_613.y, x_613.x, x_613.y) * vec4<f32>(x_616.x, x_616.y, x_616.x, x_616.y)) + vec4<f32>(x_619.y, x_619.w, x_619.x, x_619.w));
        let x_622 : vec4<f32> = u_xlat7;
        let x_625 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_628 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_622.x, x_622.y) * vec2<f32>(x_625.x, x_625.y)) + vec2<f32>(x_628.z, x_628.w));
        let x_632 : f32 = u_xlat9.y;
        u_xlat10.w = x_632;
        let x_634 : vec4<f32> = u_xlat10;
        let x_635 : vec2<f32> = vec2<f32>(x_634.y, x_634.z);
        let x_636 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_636.x, x_635.x, x_636.z, x_635.y);
        let x_638 : vec4<f32> = u_xlat7;
        let x_641 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_644 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_638.x, x_638.y, x_638.x, x_638.y) * vec4<f32>(x_641.x, x_641.y, x_641.x, x_641.y)) + vec4<f32>(x_644.x, x_644.y, x_644.z, x_644.y));
        let x_647 : vec4<f32> = u_xlat7;
        let x_650 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_653 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_647.x, x_647.y, x_647.x, x_647.y) * vec4<f32>(x_650.x, x_650.y, x_650.x, x_650.y)) + vec4<f32>(x_653.w, x_653.y, x_653.w, x_653.z));
        let x_656 : vec4<f32> = u_xlat7;
        let x_659 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_662 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_656.x, x_656.y, x_656.x, x_656.y) * vec4<f32>(x_659.x, x_659.y, x_659.x, x_659.y)) + vec4<f32>(x_662.x, x_662.w, x_662.z, x_662.w));
        let x_666 : vec4<f32> = u_xlat8;
        let x_668 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_666.x, x_666.x, x_666.x, x_666.y) * vec4<f32>(x_668.z, x_668.w, x_668.y, x_668.z));
        let x_672 : vec4<f32> = u_xlat8;
        let x_674 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_672.y, x_672.y, x_672.z, x_672.z) * x_674);
        let x_678 : f32 = u_xlat8.z;
        let x_680 : f32 = u_xlat13.y;
        u_xlat65 = (x_678 * x_680);
        let x_683 : vec4<f32> = u_xlat11;
        let x_684 : vec2<f32> = vec2<f32>(x_683.x, x_683.y);
        let x_686 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_684.x, x_684.y, x_686);
        let x_694 : vec3<f32> = txVec4;
        let x_696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_694.xy, x_694.z);
        u_xlat67 = x_696;
        let x_698 : vec4<f32> = u_xlat11;
        let x_699 : vec2<f32> = vec2<f32>(x_698.z, x_698.w);
        let x_701 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_699.x, x_699.y, x_701);
        let x_709 : vec3<f32> = txVec5;
        let x_711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_709.xy, x_709.z);
        u_xlat69 = x_711;
        let x_712 : f32 = u_xlat69;
        let x_714 : f32 = u_xlat14.y;
        u_xlat69 = (x_712 * x_714);
        let x_717 : f32 = u_xlat14.x;
        let x_718 : f32 = u_xlat67;
        let x_720 : f32 = u_xlat69;
        u_xlat67 = ((x_717 * x_718) + x_720);
        let x_723 : vec2<f32> = u_xlat49;
        let x_725 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_723.x, x_723.y, x_725);
        let x_732 : vec3<f32> = txVec6;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat69 = x_734;
        let x_736 : f32 = u_xlat14.z;
        let x_737 : f32 = u_xlat69;
        let x_739 : f32 = u_xlat67;
        u_xlat67 = ((x_736 * x_737) + x_739);
        let x_742 : vec4<f32> = u_xlat10;
        let x_743 : vec2<f32> = vec2<f32>(x_742.x, x_742.y);
        let x_745 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_743.x, x_743.y, x_745);
        let x_752 : vec3<f32> = txVec7;
        let x_754 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_752.xy, x_752.z);
        u_xlat69 = x_754;
        let x_756 : f32 = u_xlat14.w;
        let x_757 : f32 = u_xlat69;
        let x_759 : f32 = u_xlat67;
        u_xlat67 = ((x_756 * x_757) + x_759);
        let x_762 : vec4<f32> = u_xlat12;
        let x_763 : vec2<f32> = vec2<f32>(x_762.x, x_762.y);
        let x_765 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_763.x, x_763.y, x_765);
        let x_772 : vec3<f32> = txVec8;
        let x_774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_772.xy, x_772.z);
        u_xlat69 = x_774;
        let x_776 : f32 = u_xlat15.x;
        let x_777 : f32 = u_xlat69;
        let x_779 : f32 = u_xlat67;
        u_xlat67 = ((x_776 * x_777) + x_779);
        let x_782 : vec4<f32> = u_xlat12;
        let x_783 : vec2<f32> = vec2<f32>(x_782.z, x_782.w);
        let x_785 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_783.x, x_783.y, x_785);
        let x_792 : vec3<f32> = txVec9;
        let x_794 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_792.xy, x_792.z);
        u_xlat69 = x_794;
        let x_796 : f32 = u_xlat15.y;
        let x_797 : f32 = u_xlat69;
        let x_799 : f32 = u_xlat67;
        u_xlat67 = ((x_796 * x_797) + x_799);
        let x_802 : vec4<f32> = u_xlat10;
        let x_803 : vec2<f32> = vec2<f32>(x_802.z, x_802.w);
        let x_805 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec10;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat69 = x_814;
        let x_816 : f32 = u_xlat15.z;
        let x_817 : f32 = u_xlat69;
        let x_819 : f32 = u_xlat67;
        u_xlat67 = ((x_816 * x_817) + x_819);
        let x_822 : vec4<f32> = u_xlat9;
        let x_823 : vec2<f32> = vec2<f32>(x_822.x, x_822.y);
        let x_825 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_823.x, x_823.y, x_825);
        let x_832 : vec3<f32> = txVec11;
        let x_834 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_832.xy, x_832.z);
        u_xlat69 = x_834;
        let x_836 : f32 = u_xlat15.w;
        let x_837 : f32 = u_xlat69;
        let x_839 : f32 = u_xlat67;
        u_xlat67 = ((x_836 * x_837) + x_839);
        let x_842 : vec4<f32> = u_xlat9;
        let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
        let x_845 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_852 : vec3<f32> = txVec12;
        let x_854 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_852.xy, x_852.z);
        u_xlat69 = x_854;
        let x_855 : f32 = u_xlat65;
        let x_856 : f32 = u_xlat69;
        let x_858 : f32 = u_xlat67;
        u_xlat64 = ((x_855 * x_856) + x_858);
      } else {
        let x_861 : vec4<f32> = u_xlat6;
        let x_864 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_867 : vec2<f32> = ((vec2<f32>(x_861.x, x_861.y) * vec2<f32>(x_864.z, x_864.w)) + vec2<f32>(0.5f, 0.5f));
        let x_868 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_867.x, x_867.y, x_868.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = floor(vec2<f32>(x_870.x, x_870.y));
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_872.x, x_872.y, x_873.z, x_873.w);
        let x_875 : vec4<f32> = u_xlat6;
        let x_878 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_881 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_875.x, x_875.y) * vec2<f32>(x_878.z, x_878.w)) + -(vec2<f32>(x_881.x, x_881.y)));
        let x_885 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_885.x, x_885.x, x_885.y, x_885.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_888 : vec4<f32> = u_xlat8;
        let x_890 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_888.x, x_888.x, x_888.z, x_888.z) * vec4<f32>(x_890.x, x_890.x, x_890.z, x_890.z));
        let x_893 : vec4<f32> = u_xlat9;
        let x_897 : vec2<f32> = (vec2<f32>(x_893.y, x_893.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_898 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_898.x, x_897.x, x_898.z, x_897.y);
        let x_900 : vec4<f32> = u_xlat9;
        let x_903 : vec2<f32> = u_xlat49;
        let x_905 : vec2<f32> = ((vec2<f32>(x_900.x, x_900.z) * vec2<f32>(0.5f, 0.5f)) + -(x_903));
        let x_906 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_905.x, x_906.y, x_905.y, x_906.w);
        let x_908 : vec2<f32> = u_xlat49;
        let x_910 : vec2<f32> = (-(x_908) + vec2<f32>(1.0f, 1.0f));
        let x_911 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_910.x, x_910.y, x_911.z, x_911.w);
        let x_913 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_913, vec2<f32>(0.0f, 0.0f));
        let x_915 : vec2<f32> = u_xlat51;
        let x_917 : vec2<f32> = u_xlat51;
        let x_919 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = ((-(x_915) * x_917) + vec2<f32>(x_919.x, x_919.y));
        let x_922 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_921.x, x_921.y, x_922.z, x_922.w);
        let x_924 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_924, vec2<f32>(0.0f, 0.0f));
        let x_927 : vec2<f32> = u_xlat51;
        let x_929 : vec2<f32> = u_xlat51;
        let x_931 : vec4<f32> = u_xlat8;
        let x_933 : vec2<f32> = ((-(x_927) * x_929) + vec2<f32>(x_931.y, x_931.w));
        let x_934 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_933.x, x_934.y, x_933.y);
        let x_936 : vec4<f32> = u_xlat9;
        let x_939 : vec2<f32> = (vec2<f32>(x_936.x, x_936.y) + vec2<f32>(2.0f, 2.0f));
        let x_940 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_939.x, x_939.y, x_940.z, x_940.w);
        let x_942 : vec3<f32> = u_xlat29;
        let x_944 : vec2<f32> = (vec2<f32>(x_942.x, x_942.z) + vec2<f32>(2.0f, 2.0f));
        let x_945 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_945.x, x_944.x, x_945.z, x_944.y);
        let x_948 : f32 = u_xlat8.y;
        u_xlat11.z = (x_948 * 0.081632003f);
        let x_952 : vec4<f32> = u_xlat8;
        let x_955 : vec3<f32> = (vec3<f32>(x_952.z, x_952.x, x_952.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_956 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_955.x, x_955.y, x_955.z, x_956.w);
        let x_958 : vec4<f32> = u_xlat9;
        let x_961 : vec2<f32> = (vec2<f32>(x_958.x, x_958.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_962 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_961.x, x_961.y, x_962.z, x_962.w);
        let x_965 : f32 = u_xlat12.y;
        u_xlat11.x = x_965;
        let x_967 : vec2<f32> = u_xlat49;
        let x_974 : vec2<f32> = ((vec2<f32>(x_967.x, x_967.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_975 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_975.x, x_974.x, x_975.z, x_974.y);
        let x_977 : vec2<f32> = u_xlat49;
        let x_981 : vec2<f32> = ((vec2<f32>(x_977.x, x_977.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_982 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_981.x, x_982.y, x_981.y, x_982.w);
        let x_985 : f32 = u_xlat8.x;
        u_xlat9.y = x_985;
        let x_988 : f32 = u_xlat10.y;
        u_xlat9.w = x_988;
        let x_990 : vec4<f32> = u_xlat9;
        let x_991 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_990 + x_991);
        let x_993 : vec2<f32> = u_xlat49;
        let x_996 : vec2<f32> = ((vec2<f32>(x_993.y, x_993.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_997 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_997.x, x_996.x, x_997.z, x_996.y);
        let x_999 : vec2<f32> = u_xlat49;
        let x_1002 : vec2<f32> = ((vec2<f32>(x_999.y, x_999.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1002.x, x_1003.y, x_1002.y, x_1003.w);
        let x_1006 : f32 = u_xlat8.y;
        u_xlat10.y = x_1006;
        let x_1008 : vec4<f32> = u_xlat10;
        let x_1009 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1008 + x_1009);
        let x_1011 : vec4<f32> = u_xlat9;
        let x_1012 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1011 / x_1012);
        let x_1014 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1014 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1020 : vec4<f32> = u_xlat10;
        let x_1021 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1020 / x_1021);
        let x_1023 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1023 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1025 : vec4<f32> = u_xlat9;
        let x_1028 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1025.w, x_1025.x, x_1025.y, x_1025.z) * vec4<f32>(x_1028.x, x_1028.x, x_1028.x, x_1028.x));
        let x_1031 : vec4<f32> = u_xlat10;
        let x_1034 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1031.x, x_1031.w, x_1031.y, x_1031.z) * vec4<f32>(x_1034.y, x_1034.y, x_1034.y, x_1034.y));
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1038 : vec3<f32> = vec3<f32>(x_1037.y, x_1037.z, x_1037.w);
        let x_1039 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1038.x, x_1039.y, x_1038.y, x_1038.z);
        let x_1042 : f32 = u_xlat10.x;
        u_xlat12.y = x_1042;
        let x_1044 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1050 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1044.x, x_1044.y, x_1044.x, x_1044.y) * vec4<f32>(x_1047.x, x_1047.y, x_1047.x, x_1047.y)) + vec4<f32>(x_1050.x, x_1050.y, x_1050.z, x_1050.y));
        let x_1053 : vec4<f32> = u_xlat7;
        let x_1056 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1059 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1053.x, x_1053.y) * vec2<f32>(x_1056.x, x_1056.y)) + vec2<f32>(x_1059.w, x_1059.y));
        let x_1063 : f32 = u_xlat12.y;
        u_xlat9.y = x_1063;
        let x_1066 : f32 = u_xlat10.z;
        u_xlat12.y = x_1066;
        let x_1068 : vec4<f32> = u_xlat7;
        let x_1071 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1074 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1068.x, x_1068.y, x_1068.x, x_1068.y) * vec4<f32>(x_1071.x, x_1071.y, x_1071.x, x_1071.y)) + vec4<f32>(x_1074.x, x_1074.y, x_1074.z, x_1074.y));
        let x_1077 : vec4<f32> = u_xlat7;
        let x_1080 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1083 : vec4<f32> = u_xlat12;
        let x_1085 : vec2<f32> = ((vec2<f32>(x_1077.x, x_1077.y) * vec2<f32>(x_1080.x, x_1080.y)) + vec2<f32>(x_1083.w, x_1083.y));
        let x_1086 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1085.x, x_1085.y, x_1086.z, x_1086.w);
        let x_1089 : f32 = u_xlat12.y;
        u_xlat9.z = x_1089;
        let x_1092 : vec4<f32> = u_xlat7;
        let x_1095 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1098 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1092.x, x_1092.y, x_1092.x, x_1092.y) * vec4<f32>(x_1095.x, x_1095.y, x_1095.x, x_1095.y)) + vec4<f32>(x_1098.x, x_1098.y, x_1098.x, x_1098.z));
        let x_1102 : f32 = u_xlat10.w;
        u_xlat12.y = x_1102;
        let x_1105 : vec4<f32> = u_xlat7;
        let x_1108 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1111 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1105.x, x_1105.y, x_1105.x, x_1105.y) * vec4<f32>(x_1108.x, x_1108.y, x_1108.x, x_1108.y)) + vec4<f32>(x_1111.x, x_1111.y, x_1111.z, x_1111.y));
        let x_1115 : vec4<f32> = u_xlat7;
        let x_1118 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1121 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1118.x, x_1118.y)) + vec2<f32>(x_1121.w, x_1121.y));
        let x_1125 : f32 = u_xlat12.y;
        u_xlat9.w = x_1125;
        let x_1128 : vec4<f32> = u_xlat7;
        let x_1131 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1134 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1128.x, x_1128.y) * vec2<f32>(x_1131.x, x_1131.y)) + vec2<f32>(x_1134.x, x_1134.w));
        let x_1137 : vec4<f32> = u_xlat12;
        let x_1138 : vec3<f32> = vec3<f32>(x_1137.x, x_1137.z, x_1137.w);
        let x_1139 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1138.x, x_1139.y, x_1138.y, x_1138.z);
        let x_1141 : vec4<f32> = u_xlat7;
        let x_1144 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1147 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1141.x, x_1141.y, x_1141.x, x_1141.y) * vec4<f32>(x_1144.x, x_1144.y, x_1144.x, x_1144.y)) + vec4<f32>(x_1147.x, x_1147.y, x_1147.z, x_1147.y));
        let x_1151 : vec4<f32> = u_xlat7;
        let x_1154 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1157 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1151.x, x_1151.y) * vec2<f32>(x_1154.x, x_1154.y)) + vec2<f32>(x_1157.w, x_1157.y));
        let x_1161 : f32 = u_xlat9.x;
        u_xlat10.x = x_1161;
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1166 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1169 : vec4<f32> = u_xlat10;
        let x_1171 : vec2<f32> = ((vec2<f32>(x_1163.x, x_1163.y) * vec2<f32>(x_1166.x, x_1166.y)) + vec2<f32>(x_1169.x, x_1169.y));
        let x_1172 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1171.x, x_1171.y, x_1172.z, x_1172.w);
        let x_1175 : vec4<f32> = u_xlat8;
        let x_1177 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1175.x, x_1175.x, x_1175.x, x_1175.x) * x_1177);
        let x_1180 : vec4<f32> = u_xlat8;
        let x_1182 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1180.y, x_1180.y, x_1180.y, x_1180.y) * x_1182);
        let x_1185 : vec4<f32> = u_xlat8;
        let x_1187 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1185.z, x_1185.z, x_1185.z, x_1185.z) * x_1187);
        let x_1189 : vec4<f32> = u_xlat8;
        let x_1191 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1189.w, x_1189.w, x_1189.w, x_1189.w) * x_1191);
        let x_1194 : vec4<f32> = u_xlat13;
        let x_1195 : vec2<f32> = vec2<f32>(x_1194.x, x_1194.y);
        let x_1197 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1195.x, x_1195.y, x_1197);
        let x_1204 : vec3<f32> = txVec13;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat65 = x_1206;
        let x_1208 : vec4<f32> = u_xlat13;
        let x_1209 : vec2<f32> = vec2<f32>(x_1208.z, x_1208.w);
        let x_1211 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1209.x, x_1209.y, x_1211);
        let x_1218 : vec3<f32> = txVec14;
        let x_1220 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1218.xy, x_1218.z);
        u_xlat67 = x_1220;
        let x_1221 : f32 = u_xlat67;
        let x_1223 : f32 = u_xlat18.y;
        u_xlat67 = (x_1221 * x_1223);
        let x_1226 : f32 = u_xlat18.x;
        let x_1227 : f32 = u_xlat65;
        let x_1229 : f32 = u_xlat67;
        u_xlat65 = ((x_1226 * x_1227) + x_1229);
        let x_1232 : vec2<f32> = u_xlat49;
        let x_1234 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1232.x, x_1232.y, x_1234);
        let x_1241 : vec3<f32> = txVec15;
        let x_1243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1241.xy, x_1241.z);
        u_xlat67 = x_1243;
        let x_1245 : f32 = u_xlat18.z;
        let x_1246 : f32 = u_xlat67;
        let x_1248 : f32 = u_xlat65;
        u_xlat65 = ((x_1245 * x_1246) + x_1248);
        let x_1251 : vec4<f32> = u_xlat16;
        let x_1252 : vec2<f32> = vec2<f32>(x_1251.x, x_1251.y);
        let x_1254 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1252.x, x_1252.y, x_1254);
        let x_1261 : vec3<f32> = txVec16;
        let x_1263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1261.xy, x_1261.z);
        u_xlat67 = x_1263;
        let x_1265 : f32 = u_xlat18.w;
        let x_1266 : f32 = u_xlat67;
        let x_1268 : f32 = u_xlat65;
        u_xlat65 = ((x_1265 * x_1266) + x_1268);
        let x_1271 : vec4<f32> = u_xlat14;
        let x_1272 : vec2<f32> = vec2<f32>(x_1271.x, x_1271.y);
        let x_1274 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1272.x, x_1272.y, x_1274);
        let x_1281 : vec3<f32> = txVec17;
        let x_1283 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1281.xy, x_1281.z);
        u_xlat67 = x_1283;
        let x_1285 : f32 = u_xlat19.x;
        let x_1286 : f32 = u_xlat67;
        let x_1288 : f32 = u_xlat65;
        u_xlat65 = ((x_1285 * x_1286) + x_1288);
        let x_1291 : vec4<f32> = u_xlat14;
        let x_1292 : vec2<f32> = vec2<f32>(x_1291.z, x_1291.w);
        let x_1294 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec18;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat67 = x_1303;
        let x_1305 : f32 = u_xlat19.y;
        let x_1306 : f32 = u_xlat67;
        let x_1308 : f32 = u_xlat65;
        u_xlat65 = ((x_1305 * x_1306) + x_1308);
        let x_1311 : vec4<f32> = u_xlat15;
        let x_1312 : vec2<f32> = vec2<f32>(x_1311.x, x_1311.y);
        let x_1314 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1312.x, x_1312.y, x_1314);
        let x_1321 : vec3<f32> = txVec19;
        let x_1323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1321.xy, x_1321.z);
        u_xlat67 = x_1323;
        let x_1325 : f32 = u_xlat19.z;
        let x_1326 : f32 = u_xlat67;
        let x_1328 : f32 = u_xlat65;
        u_xlat65 = ((x_1325 * x_1326) + x_1328);
        let x_1331 : vec4<f32> = u_xlat16;
        let x_1332 : vec2<f32> = vec2<f32>(x_1331.z, x_1331.w);
        let x_1334 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1332.x, x_1332.y, x_1334);
        let x_1341 : vec3<f32> = txVec20;
        let x_1343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1341.xy, x_1341.z);
        u_xlat67 = x_1343;
        let x_1345 : f32 = u_xlat19.w;
        let x_1346 : f32 = u_xlat67;
        let x_1348 : f32 = u_xlat65;
        u_xlat65 = ((x_1345 * x_1346) + x_1348);
        let x_1351 : vec4<f32> = u_xlat17;
        let x_1352 : vec2<f32> = vec2<f32>(x_1351.x, x_1351.y);
        let x_1354 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1352.x, x_1352.y, x_1354);
        let x_1361 : vec3<f32> = txVec21;
        let x_1363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1361.xy, x_1361.z);
        u_xlat67 = x_1363;
        let x_1365 : f32 = u_xlat20.x;
        let x_1366 : f32 = u_xlat67;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1365 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat17;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat67 = x_1383;
        let x_1385 : f32 = u_xlat20.y;
        let x_1386 : f32 = u_xlat67;
        let x_1388 : f32 = u_xlat65;
        u_xlat65 = ((x_1385 * x_1386) + x_1388);
        let x_1391 : vec2<f32> = u_xlat30;
        let x_1393 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec23;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat67 = x_1402;
        let x_1404 : f32 = u_xlat20.z;
        let x_1405 : f32 = u_xlat67;
        let x_1407 : f32 = u_xlat65;
        u_xlat65 = ((x_1404 * x_1405) + x_1407);
        let x_1410 : vec2<f32> = u_xlat57;
        let x_1412 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1410.x, x_1410.y, x_1412);
        let x_1419 : vec3<f32> = txVec24;
        let x_1421 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1419.xy, x_1419.z);
        u_xlat67 = x_1421;
        let x_1423 : f32 = u_xlat20.w;
        let x_1424 : f32 = u_xlat67;
        let x_1426 : f32 = u_xlat65;
        u_xlat65 = ((x_1423 * x_1424) + x_1426);
        let x_1429 : vec4<f32> = u_xlat12;
        let x_1430 : vec2<f32> = vec2<f32>(x_1429.x, x_1429.y);
        let x_1432 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1430.x, x_1430.y, x_1432);
        let x_1439 : vec3<f32> = txVec25;
        let x_1441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1439.xy, x_1439.z);
        u_xlat67 = x_1441;
        let x_1443 : f32 = u_xlat8.x;
        let x_1444 : f32 = u_xlat67;
        let x_1446 : f32 = u_xlat65;
        u_xlat65 = ((x_1443 * x_1444) + x_1446);
        let x_1449 : vec4<f32> = u_xlat12;
        let x_1450 : vec2<f32> = vec2<f32>(x_1449.z, x_1449.w);
        let x_1452 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1450.x, x_1450.y, x_1452);
        let x_1459 : vec3<f32> = txVec26;
        let x_1461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1459.xy, x_1459.z);
        u_xlat67 = x_1461;
        let x_1463 : f32 = u_xlat8.y;
        let x_1464 : f32 = u_xlat67;
        let x_1466 : f32 = u_xlat65;
        u_xlat65 = ((x_1463 * x_1464) + x_1466);
        let x_1469 : vec2<f32> = u_xlat52;
        let x_1471 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1469.x, x_1469.y, x_1471);
        let x_1478 : vec3<f32> = txVec27;
        let x_1480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1478.xy, x_1478.z);
        u_xlat67 = x_1480;
        let x_1482 : f32 = u_xlat8.z;
        let x_1483 : f32 = u_xlat67;
        let x_1485 : f32 = u_xlat65;
        u_xlat65 = ((x_1482 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat7;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec28;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat67 = x_1500;
        let x_1502 : f32 = u_xlat8.w;
        let x_1503 : f32 = u_xlat67;
        let x_1505 : f32 = u_xlat65;
        u_xlat64 = ((x_1502 * x_1503) + x_1505);
      }
    }
  } else {
    let x_1509 : vec4<f32> = u_xlat6;
    let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
    let x_1512 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
    let x_1519 : vec3<f32> = txVec29;
    let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
    u_xlat64 = x_1521;
  }
  let x_1523 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1523) + 1.0f);
  let x_1526 : f32 = u_xlat64;
  let x_1528 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1530 : f32 = u_xlat65;
  u_xlat64 = ((x_1526 * x_1528) + x_1530);
  let x_1534 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1534);
  let x_1538 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1538 >= 1.0f);
  let x_1540 : bool = u_xlatb67;
  let x_1541 : bool = u_xlatb6;
  u_xlatb67 = (x_1540 | x_1541);
  let x_1543 : bool = u_xlatb67;
  let x_1544 : f32 = u_xlat64;
  u_xlat64 = select(x_1544, 1.0f, x_1543);
  let x_1546 : vec3<f32> = u_xlat0;
  let x_1548 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1546, -(vec3<f32>(x_1548.x, x_1548.y, x_1548.z)));
  let x_1554 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1554, 0.0f, 1.0f);
  let x_1557 : f32 = u_xlat64;
  let x_1561 : vec4<f32> = x_90.x_MainLightColor;
  let x_1563 : vec3<f32> = (vec3<f32>(x_1557, x_1557, x_1557) * vec3<f32>(x_1561.x, x_1561.y, x_1561.z));
  let x_1564 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1563.x, x_1563.y, x_1563.z, x_1564.w);
  let x_1566 : vec3<f32> = u_xlat0;
  let x_1568 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1566.x, x_1566.x, x_1566.x) * vec3<f32>(x_1568.x, x_1568.y, x_1568.z));
  let x_1571 : vec3<f32> = u_xlat0;
  let x_1572 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1571 * vec3<f32>(x_1572.x, x_1572.y, x_1572.z));
  let x_1576 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1576 < 0.0f);
  let x_1579 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1579 + 1.0f);
  let x_1582 : bool = u_xlatb64;
  if (x_1582) {
    let x_1587 : f32 = u_xlat3.x;
    x_1583 = x_1587;
  } else {
    let x_1590 : f32 = x_161.unity_LODFade.x;
    x_1583 = x_1590;
  }
  let x_1591 : f32 = x_1583;
  u_xlat64 = x_1591;
  let x_1593 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1593);
  let x_1595 : vec3<f32> = u_xlat1;
  let x_1598 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1595) * vec3<f32>(x_1598.x, x_1598.y, x_1598.x));
  let x_1604 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1604);
  let x_1608 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1608 * 1025u);
  let x_1612 : u32 = u_xlatu43;
  u_xlatu24 = (x_1612 >> 6u);
  let x_1616 : u32 = u_xlatu43;
  let x_1617 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1616 ^ x_1617));
  let x_1620 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1620) * 9u);
  let x_1624 : u32 = u_xlatu43;
  u_xlatu24 = (x_1624 >> 11u);
  let x_1627 : u32 = u_xlatu43;
  let x_1628 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1627 ^ x_1628));
  let x_1631 : i32 = u_xlati43;
  u_xlati43 = (x_1631 * 32769i);
  let x_1635 : i32 = u_xlati43;
  let x_1638 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1635) ^ x_1638));
  let x_1642 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1642) * 1025u);
  let x_1645 : u32 = u_xlatu22;
  u_xlatu43 = (x_1645 >> 6u);
  let x_1647 : u32 = u_xlatu43;
  let x_1648 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1647 ^ x_1648));
  let x_1651 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1651) * 9u);
  let x_1654 : u32 = u_xlatu22;
  u_xlatu43 = (x_1654 >> 11u);
  let x_1656 : u32 = u_xlatu43;
  let x_1657 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1656 ^ x_1657));
  let x_1660 : i32 = u_xlati22;
  u_xlati22 = (x_1660 * 32769i);
  let x_1663 : i32 = u_xlati22;
  let x_1666 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1663) ^ x_1666));
  let x_1669 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1669) * 1025u);
  let x_1674 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1674 >> 6u);
  let x_1676 : u32 = u_xlatu22;
  let x_1678 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1676 ^ x_1678));
  let x_1681 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1681) * 9u);
  let x_1686 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1686 >> 11u);
  let x_1688 : u32 = u_xlatu22;
  let x_1690 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1688 ^ x_1690));
  let x_1693 : i32 = u_xlati1;
  u_xlati1 = (x_1693 * 32769i);
  param = 1065353216i;
  let x_1699 : i32 = u_xlati1;
  param_1 = x_1699;
  param_2 = 0i;
  param_3 = 23i;
  let x_1702 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1702);
  let x_1706 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1706 + -1.0f);
  let x_1711 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1711) + 1.0f);
  let x_1714 : bool = u_xlatb3;
  if (x_1714) {
    let x_1719 : f32 = u_xlat1.x;
    x_1715 = x_1719;
  } else {
    let x_1721 : f32 = u_xlat22;
    x_1715 = x_1721;
  }
  let x_1722 : f32 = x_1715;
  u_xlat1.x = x_1722;
  let x_1724 : f32 = u_xlat64;
  let x_1727 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1724 * 2.0f) + -(x_1727));
  let x_1732 : f32 = u_xlat1.x;
  let x_1734 : f32 = u_xlat3.w;
  u_xlat22 = (x_1732 * x_1734);
  let x_1739 : f32 = u_xlat22;
  u_xlatb43.x = (x_1739 >= 0.400000006f);
  let x_1745 : bool = u_xlatb43.x;
  let x_1746 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1746, x_1745);
  let x_1750 : f32 = u_xlat3.w;
  let x_1752 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1750 * x_1752) + -0.400000006f);
  let x_1757 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1757);
  let x_1759 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  let x_1763 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1761) + abs(x_1763));
  let x_1766 : f32 = u_xlat22;
  u_xlat22 = max(x_1766, 0.0001f);
  let x_1770 : f32 = u_xlat1.x;
  let x_1771 : f32 = u_xlat22;
  u_xlat1.x = (x_1770 / x_1771);
  let x_1775 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1775 + 0.5f);
  let x_1779 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1779, 0.0f, 1.0f);
  let x_1784 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1784 == 0.0f));
  let x_1786 : bool = u_xlatb22;
  if (x_1786) {
    let x_1791 : f32 = u_xlat1.x;
    x_1787 = x_1791;
  } else {
    let x_1794 : f32 = u_xlat43.x;
    x_1787 = x_1794;
  }
  let x_1795 : f32 = x_1787;
  u_xlat1.x = x_1795;
  let x_1798 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1798 + -0.0001f);
  let x_1803 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1803 < 0.0f);
  let x_1807 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1807) * -1i) != 0i)) {
    discard;
  }
  let x_1817 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1817);
  let x_1821 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1821 >= 0.0f);
  let x_1825 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1825);
  let x_1829 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1829);
  let x_1833 : f32 = u_xlat43.y;
  let x_1835 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1833 * x_1835);
  let x_1838 : vec3<f32> = vs_INTERP1;
  let x_1840 : vec4<f32> = vs_INTERP2;
  let x_1842 : vec3<f32> = (vec3<f32>(x_1838.z, x_1838.x, x_1838.y) * vec3<f32>(x_1840.y, x_1840.z, x_1840.x));
  let x_1843 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1842.z, x_1843.w);
  let x_1845 : vec3<f32> = vs_INTERP1;
  let x_1847 : vec4<f32> = vs_INTERP2;
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1853 : vec3<f32> = ((vec3<f32>(x_1845.y, x_1845.z, x_1845.x) * vec3<f32>(x_1847.z, x_1847.x, x_1847.y)) + -(vec3<f32>(x_1850.x, x_1850.y, x_1850.z)));
  let x_1854 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1853.x, x_1853.y, x_1853.z, x_1854.w);
  let x_1856 : vec2<f32> = u_xlat43;
  let x_1858 : vec4<f32> = u_xlat3;
  let x_1860 : vec3<f32> = (vec3<f32>(x_1856.x, x_1856.x, x_1856.x) * vec3<f32>(x_1858.x, x_1858.y, x_1858.z));
  let x_1861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1860.x, x_1860.y, x_1860.z, x_1861.w);
  let x_1863 : vec4<f32> = u_xlat3;
  let x_1865 : vec3<f32> = u_xlat26;
  let x_1867 : vec3<f32> = (vec3<f32>(x_1863.x, x_1863.y, x_1863.z) * vec3<f32>(x_1865.y, x_1865.y, x_1865.y));
  let x_1868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1867.x, x_1867.y, x_1867.z, x_1868.w);
  let x_1870 : vec3<f32> = u_xlat26;
  let x_1872 : vec4<f32> = vs_INTERP2;
  let x_1875 : vec4<f32> = u_xlat3;
  let x_1877 : vec3<f32> = ((vec3<f32>(x_1870.x, x_1870.x, x_1870.x) * vec3<f32>(x_1872.x, x_1872.y, x_1872.z)) + vec3<f32>(x_1875.x, x_1875.y, x_1875.z));
  let x_1878 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1877.x, x_1877.y, x_1877.z, x_1878.w);
  let x_1880 : vec3<f32> = u_xlat26;
  let x_1882 : vec3<f32> = vs_INTERP1;
  let x_1884 : vec4<f32> = u_xlat3;
  let x_1886 : vec3<f32> = ((vec3<f32>(x_1880.z, x_1880.z, x_1880.z) * x_1882) + vec3<f32>(x_1884.x, x_1884.y, x_1884.z));
  let x_1887 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1886.x, x_1886.y, x_1886.z, x_1887.w);
  let x_1889 : vec4<f32> = u_xlat3;
  let x_1891 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1889.x, x_1889.y, x_1889.z), vec3<f32>(x_1891.x, x_1891.y, x_1891.z));
  let x_1896 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1896);
  let x_1899 : vec2<f32> = u_xlat43;
  let x_1901 : vec4<f32> = u_xlat3;
  let x_1903 : vec3<f32> = (vec3<f32>(x_1899.x, x_1899.x, x_1899.x) * vec3<f32>(x_1901.x, x_1901.y, x_1901.z));
  let x_1904 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1903.x, x_1903.y, x_1903.z, x_1904.w);
  let x_1913 : vec2<f32> = vs_INTERP5;
  let x_1915 : f32 = x_90.x_GlobalMipBias.x;
  let x_1916 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1913, x_1915);
  u_xlat6 = x_1916;
  let x_1921 : vec2<f32> = vs_INTERP5;
  let x_1923 : f32 = x_90.x_GlobalMipBias.x;
  let x_1924 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1921, x_1923);
  u_xlat26 = vec3<f32>(x_1924.x, x_1924.y, x_1924.z);
  let x_1926 : vec4<f32> = u_xlat6;
  let x_1929 : vec3<f32> = (vec3<f32>(x_1926.x, x_1926.y, x_1926.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1930 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1929.x, x_1929.y, x_1929.z, x_1930.w);
  let x_1932 : vec4<f32> = u_xlat3;
  let x_1934 : vec4<f32> = u_xlat6;
  u_xlat43.x = dot(vec3<f32>(x_1932.x, x_1932.y, x_1932.z), vec3<f32>(x_1934.x, x_1934.y, x_1934.z));
  let x_1939 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1939 + 0.5f);
  let x_1942 : vec2<f32> = u_xlat43;
  let x_1944 : vec3<f32> = u_xlat26;
  u_xlat26 = (vec3<f32>(x_1942.x, x_1942.x, x_1942.x) * x_1944);
  let x_1947 : f32 = u_xlat6.w;
  u_xlat43.x = max(x_1947, 0.0001f);
  let x_1950 : vec3<f32> = u_xlat26;
  let x_1951 : vec2<f32> = u_xlat43;
  u_xlat26 = (x_1950 / vec3<f32>(x_1951.x, x_1951.x, x_1951.x));
  let x_1955 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1956 : vec2<f32> = vec2<f32>(x_1955.x, x_1955.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1956.x, x_1956.y));
  let x_1961 : vec2<f32> = u_xlat43;
  let x_1962 : vec4<f32> = hlslcc_FragCoord;
  let x_1964 : vec2<f32> = (x_1961 * vec2<f32>(x_1962.x, x_1962.y));
  let x_1965 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1964.x, x_1964.y, x_1965.z, x_1965.w);
  let x_1968 : f32 = u_xlat6.y;
  let x_1971 : f32 = x_90.x_ScaleBiasRt.x;
  let x_1974 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1968 * x_1971) + x_1974);
  let x_1978 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_1978) + 1.0f);
  let x_1983 : f32 = u_xlat5.x;
  u_xlat5.x = x_1983;
  let x_1986 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1986, 0.0f, 1.0f);
  let x_1990 : f32 = u_xlat1.x;
  u_xlat1.x = x_1990;
  let x_1993 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1993, 0.0f, 1.0f);
  let x_1996 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1996 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2001 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_2001) + 1.0f);
  let x_2006 : f32 = u_xlat43.x;
  let x_2008 : f32 = u_xlat43.x;
  u_xlat64 = (x_2006 * x_2008);
  let x_2010 : f32 = u_xlat64;
  u_xlat64 = max(x_2010, 0.0078125f);
  let x_2014 : f32 = u_xlat64;
  let x_2015 : f32 = u_xlat64;
  u_xlat66 = (x_2014 * x_2015);
  let x_2018 : f32 = u_xlat5.x;
  u_xlat67 = (x_2018 + 0.040000021f);
  let x_2021 : f32 = u_xlat67;
  u_xlat67 = min(x_2021, 1.0f);
  let x_2023 : f32 = u_xlat64;
  u_xlat5.x = ((x_2023 * 4.0f) + 2.0f);
  let x_2033 : vec4<f32> = u_xlat6;
  let x_2036 : f32 = x_90.x_GlobalMipBias.x;
  let x_2037 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2033.x, x_2033.z), x_2036);
  u_xlat6.x = x_2037.x;
  let x_2042 : f32 = u_xlat6.x;
  u_xlat27 = (x_2042 + -1.0f);
  let x_2046 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2047 : f32 = u_xlat27;
  u_xlat27 = ((x_2046 * x_2047) + 1.0f);
  let x_2051 : f32 = u_xlat6.x;
  let x_2053 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2051, x_2053);
  let x_2056 : bool = u_xlatb63;
  if (x_2056) {
    let x_2060 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2060 == 1.0f);
    let x_2062 : bool = u_xlatb63;
    if (x_2062) {
      let x_2066 : vec4<f32> = vs_INTERP9;
      let x_2069 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2066.x, x_2066.y, x_2066.x, x_2066.y) + x_2069);
      let x_2072 : vec4<f32> = u_xlat7;
      let x_2073 : vec2<f32> = vec2<f32>(x_2072.x, x_2072.y);
      let x_2075 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2073.x, x_2073.y, x_2075);
      let x_2082 : vec3<f32> = txVec30;
      let x_2084 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2082.xy, x_2082.z);
      u_xlat8.x = x_2084;
      let x_2087 : vec4<f32> = u_xlat7;
      let x_2088 : vec2<f32> = vec2<f32>(x_2087.z, x_2087.w);
      let x_2090 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2088.x, x_2088.y, x_2090);
      let x_2097 : vec3<f32> = txVec31;
      let x_2099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2097.xy, x_2097.z);
      u_xlat8.y = x_2099;
      let x_2101 : vec4<f32> = vs_INTERP9;
      let x_2104 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2101.x, x_2101.y, x_2101.x, x_2101.y) + x_2104);
      let x_2107 : vec4<f32> = u_xlat7;
      let x_2108 : vec2<f32> = vec2<f32>(x_2107.x, x_2107.y);
      let x_2110 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2108.x, x_2108.y, x_2110);
      let x_2117 : vec3<f32> = txVec32;
      let x_2119 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2117.xy, x_2117.z);
      u_xlat8.z = x_2119;
      let x_2122 : vec4<f32> = u_xlat7;
      let x_2123 : vec2<f32> = vec2<f32>(x_2122.z, x_2122.w);
      let x_2125 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2123.x, x_2123.y, x_2125);
      let x_2132 : vec3<f32> = txVec33;
      let x_2134 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2132.xy, x_2132.z);
      u_xlat8.w = x_2134;
      let x_2136 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2136, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2141 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48 = (x_2141 == 2.0f);
      let x_2143 : bool = u_xlatb48;
      if (x_2143) {
        let x_2147 : vec4<f32> = vs_INTERP9;
        let x_2150 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2147.x, x_2147.y) * vec2<f32>(x_2150.z, x_2150.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2154 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2154);
        let x_2156 : vec4<f32> = vs_INTERP9;
        let x_2159 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2162 : vec2<f32> = u_xlat48;
        let x_2164 : vec2<f32> = ((vec2<f32>(x_2156.x, x_2156.y) * vec2<f32>(x_2159.z, x_2159.w)) + -(x_2162));
        let x_2165 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2164.x, x_2164.y, x_2165.z, x_2165.w);
        let x_2167 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2167.x, x_2167.x, x_2167.y, x_2167.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2170 : vec4<f32> = u_xlat8;
        let x_2172 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2170.x, x_2170.x, x_2170.z, x_2170.z) * vec4<f32>(x_2172.x, x_2172.x, x_2172.z, x_2172.z));
        let x_2175 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2175.y, x_2175.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2178 : vec4<f32> = u_xlat9;
        let x_2181 : vec4<f32> = u_xlat7;
        let x_2184 : vec2<f32> = ((vec2<f32>(x_2178.x, x_2178.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2181.x, x_2181.y)));
        let x_2185 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2184.x, x_2185.y, x_2184.y, x_2185.w);
        let x_2187 : vec4<f32> = u_xlat7;
        let x_2190 : vec2<f32> = (-(vec2<f32>(x_2187.x, x_2187.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2191 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2190.x, x_2190.y, x_2191.z, x_2191.w);
        let x_2193 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2193.x, x_2193.y), vec2<f32>(0.0f, 0.0f));
        let x_2196 : vec2<f32> = u_xlat51;
        let x_2198 : vec2<f32> = u_xlat51;
        let x_2200 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2196) * x_2198) + vec2<f32>(x_2200.x, x_2200.y));
        let x_2203 : vec4<f32> = u_xlat7;
        let x_2205 : vec2<f32> = max(vec2<f32>(x_2203.x, x_2203.y), vec2<f32>(0.0f, 0.0f));
        let x_2206 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2205.x, x_2205.y, x_2206.z, x_2206.w);
        let x_2208 : vec4<f32> = u_xlat7;
        let x_2211 : vec4<f32> = u_xlat7;
        let x_2214 : vec4<f32> = u_xlat8;
        let x_2216 : vec2<f32> = ((-(vec2<f32>(x_2208.x, x_2208.y)) * vec2<f32>(x_2211.x, x_2211.y)) + vec2<f32>(x_2214.y, x_2214.w));
        let x_2217 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2216.x, x_2216.y, x_2217.z, x_2217.w);
        let x_2219 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2219 + vec2<f32>(1.0f, 1.0f));
        let x_2221 : vec4<f32> = u_xlat7;
        let x_2223 : vec2<f32> = (vec2<f32>(x_2221.x, x_2221.y) + vec2<f32>(1.0f, 1.0f));
        let x_2224 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2223.x, x_2223.y, x_2224.z, x_2224.w);
        let x_2226 : vec4<f32> = u_xlat8;
        let x_2228 : vec2<f32> = (vec2<f32>(x_2226.x, x_2226.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2229 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2228.x, x_2228.y, x_2229.z, x_2229.w);
        let x_2231 : vec4<f32> = u_xlat9;
        let x_2233 : vec2<f32> = (vec2<f32>(x_2231.x, x_2231.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2234 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2233.x, x_2233.y, x_2234.z, x_2234.w);
        let x_2236 : vec2<f32> = u_xlat51;
        let x_2237 : vec2<f32> = (x_2236 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2238 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2237.x, x_2237.y, x_2238.z, x_2238.w);
        let x_2240 : vec4<f32> = u_xlat7;
        let x_2242 : vec2<f32> = (vec2<f32>(x_2240.x, x_2240.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2243 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2242.x, x_2242.y, x_2243.z, x_2243.w);
        let x_2245 : vec4<f32> = u_xlat8;
        let x_2247 : vec2<f32> = (vec2<f32>(x_2245.y, x_2245.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2248 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2247.x, x_2247.y, x_2248.z, x_2248.w);
        let x_2251 : f32 = u_xlat9.x;
        u_xlat10.z = x_2251;
        let x_2254 : f32 = u_xlat7.x;
        u_xlat10.w = x_2254;
        let x_2257 : f32 = u_xlat12.x;
        u_xlat11.z = x_2257;
        let x_2260 : f32 = u_xlat49.x;
        u_xlat11.w = x_2260;
        let x_2262 : vec4<f32> = u_xlat10;
        let x_2264 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2262.z, x_2262.w, x_2262.x, x_2262.z) + vec4<f32>(x_2264.z, x_2264.w, x_2264.x, x_2264.z));
        let x_2268 : f32 = u_xlat10.y;
        u_xlat9.z = x_2268;
        let x_2271 : f32 = u_xlat7.y;
        u_xlat9.w = x_2271;
        let x_2274 : f32 = u_xlat11.y;
        u_xlat12.z = x_2274;
        let x_2277 : f32 = u_xlat49.y;
        u_xlat12.w = x_2277;
        let x_2279 : vec4<f32> = u_xlat9;
        let x_2281 : vec4<f32> = u_xlat12;
        let x_2283 : vec3<f32> = (vec3<f32>(x_2279.z, x_2279.y, x_2279.w) + vec3<f32>(x_2281.z, x_2281.y, x_2281.w));
        let x_2284 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2283.x, x_2283.y, x_2283.z, x_2284.w);
        let x_2286 : vec4<f32> = u_xlat11;
        let x_2288 : vec4<f32> = u_xlat8;
        let x_2290 : vec3<f32> = (vec3<f32>(x_2286.x, x_2286.z, x_2286.w) / vec3<f32>(x_2288.z, x_2288.w, x_2288.y));
        let x_2291 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2290.x, x_2290.y, x_2290.z, x_2291.w);
        let x_2293 : vec4<f32> = u_xlat9;
        let x_2295 : vec3<f32> = (vec3<f32>(x_2293.x, x_2293.y, x_2293.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2296 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2295.x, x_2295.y, x_2295.z, x_2296.w);
        let x_2298 : vec4<f32> = u_xlat12;
        let x_2300 : vec4<f32> = u_xlat7;
        let x_2302 : vec3<f32> = (vec3<f32>(x_2298.z, x_2298.y, x_2298.w) / vec3<f32>(x_2300.x, x_2300.y, x_2300.z));
        let x_2303 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2302.x, x_2302.y, x_2302.z, x_2303.w);
        let x_2305 : vec4<f32> = u_xlat10;
        let x_2307 : vec3<f32> = (vec3<f32>(x_2305.x, x_2305.y, x_2305.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2308 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2307.x, x_2307.y, x_2307.z, x_2308.w);
        let x_2310 : vec4<f32> = u_xlat9;
        let x_2313 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2315 : vec3<f32> = (vec3<f32>(x_2310.y, x_2310.x, x_2310.z) * vec3<f32>(x_2313.x, x_2313.x, x_2313.x));
        let x_2316 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2315.x, x_2315.y, x_2315.z, x_2316.w);
        let x_2318 : vec4<f32> = u_xlat10;
        let x_2321 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2323 : vec3<f32> = (vec3<f32>(x_2318.x, x_2318.y, x_2318.z) * vec3<f32>(x_2321.y, x_2321.y, x_2321.y));
        let x_2324 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2323.x, x_2323.y, x_2323.z, x_2324.w);
        let x_2327 : f32 = u_xlat10.x;
        u_xlat9.w = x_2327;
        let x_2329 : vec2<f32> = u_xlat48;
        let x_2332 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2335 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2329.x, x_2329.y, x_2329.x, x_2329.y) * vec4<f32>(x_2332.x, x_2332.y, x_2332.x, x_2332.y)) + vec4<f32>(x_2335.y, x_2335.w, x_2335.x, x_2335.w));
        let x_2338 : vec2<f32> = u_xlat48;
        let x_2340 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2343 : vec4<f32> = u_xlat9;
        let x_2345 : vec2<f32> = ((x_2338 * vec2<f32>(x_2340.x, x_2340.y)) + vec2<f32>(x_2343.z, x_2343.w));
        let x_2346 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2345.x, x_2345.y, x_2346.z, x_2346.w);
        let x_2349 : f32 = u_xlat9.y;
        u_xlat10.w = x_2349;
        let x_2351 : vec4<f32> = u_xlat10;
        let x_2352 : vec2<f32> = vec2<f32>(x_2351.y, x_2351.z);
        let x_2353 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2353.x, x_2352.x, x_2353.z, x_2352.y);
        let x_2355 : vec2<f32> = u_xlat48;
        let x_2358 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2361 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2355.x, x_2355.y, x_2355.x, x_2355.y) * vec4<f32>(x_2358.x, x_2358.y, x_2358.x, x_2358.y)) + vec4<f32>(x_2361.x, x_2361.y, x_2361.z, x_2361.y));
        let x_2364 : vec2<f32> = u_xlat48;
        let x_2367 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2370 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2364.x, x_2364.y, x_2364.x, x_2364.y) * vec4<f32>(x_2367.x, x_2367.y, x_2367.x, x_2367.y)) + vec4<f32>(x_2370.w, x_2370.y, x_2370.w, x_2370.z));
        let x_2373 : vec2<f32> = u_xlat48;
        let x_2376 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2379 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2373.x, x_2373.y, x_2373.x, x_2373.y) * vec4<f32>(x_2376.x, x_2376.y, x_2376.x, x_2376.y)) + vec4<f32>(x_2379.x, x_2379.w, x_2379.z, x_2379.w));
        let x_2382 : vec4<f32> = u_xlat7;
        let x_2384 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2382.x, x_2382.x, x_2382.x, x_2382.y) * vec4<f32>(x_2384.z, x_2384.w, x_2384.y, x_2384.z));
        let x_2387 : vec4<f32> = u_xlat7;
        let x_2389 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2387.y, x_2387.y, x_2387.z, x_2387.z) * x_2389);
        let x_2392 : f32 = u_xlat7.z;
        let x_2394 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2392 * x_2394);
        let x_2398 : vec4<f32> = u_xlat11;
        let x_2399 : vec2<f32> = vec2<f32>(x_2398.x, x_2398.y);
        let x_2401 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2399.x, x_2399.y, x_2401);
        let x_2408 : vec3<f32> = txVec34;
        let x_2410 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2408.xy, x_2408.z);
        u_xlat69 = x_2410;
        let x_2412 : vec4<f32> = u_xlat11;
        let x_2413 : vec2<f32> = vec2<f32>(x_2412.z, x_2412.w);
        let x_2415 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2413.x, x_2413.y, x_2415);
        let x_2422 : vec3<f32> = txVec35;
        let x_2424 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2422.xy, x_2422.z);
        u_xlat7.x = x_2424;
        let x_2427 : f32 = u_xlat7.x;
        let x_2429 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2427 * x_2429);
        let x_2433 : f32 = u_xlat14.x;
        let x_2434 : f32 = u_xlat69;
        let x_2437 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2433 * x_2434) + x_2437);
        let x_2440 : vec4<f32> = u_xlat12;
        let x_2441 : vec2<f32> = vec2<f32>(x_2440.x, x_2440.y);
        let x_2443 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2441.x, x_2441.y, x_2443);
        let x_2450 : vec3<f32> = txVec36;
        let x_2452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2450.xy, x_2450.z);
        u_xlat7.x = x_2452;
        let x_2455 : f32 = u_xlat14.z;
        let x_2457 : f32 = u_xlat7.x;
        let x_2459 : f32 = u_xlat69;
        u_xlat69 = ((x_2455 * x_2457) + x_2459);
        let x_2462 : vec4<f32> = u_xlat10;
        let x_2463 : vec2<f32> = vec2<f32>(x_2462.x, x_2462.y);
        let x_2465 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2463.x, x_2463.y, x_2465);
        let x_2472 : vec3<f32> = txVec37;
        let x_2474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2472.xy, x_2472.z);
        u_xlat7.x = x_2474;
        let x_2477 : f32 = u_xlat14.w;
        let x_2479 : f32 = u_xlat7.x;
        let x_2481 : f32 = u_xlat69;
        u_xlat69 = ((x_2477 * x_2479) + x_2481);
        let x_2484 : vec4<f32> = u_xlat13;
        let x_2485 : vec2<f32> = vec2<f32>(x_2484.x, x_2484.y);
        let x_2487 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2485.x, x_2485.y, x_2487);
        let x_2494 : vec3<f32> = txVec38;
        let x_2496 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2494.xy, x_2494.z);
        u_xlat7.x = x_2496;
        let x_2499 : f32 = u_xlat15.x;
        let x_2501 : f32 = u_xlat7.x;
        let x_2503 : f32 = u_xlat69;
        u_xlat69 = ((x_2499 * x_2501) + x_2503);
        let x_2506 : vec4<f32> = u_xlat13;
        let x_2507 : vec2<f32> = vec2<f32>(x_2506.z, x_2506.w);
        let x_2509 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2507.x, x_2507.y, x_2509);
        let x_2516 : vec3<f32> = txVec39;
        let x_2518 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2516.xy, x_2516.z);
        u_xlat7.x = x_2518;
        let x_2521 : f32 = u_xlat15.y;
        let x_2523 : f32 = u_xlat7.x;
        let x_2525 : f32 = u_xlat69;
        u_xlat69 = ((x_2521 * x_2523) + x_2525);
        let x_2528 : vec4<f32> = u_xlat10;
        let x_2529 : vec2<f32> = vec2<f32>(x_2528.z, x_2528.w);
        let x_2531 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2529.x, x_2529.y, x_2531);
        let x_2538 : vec3<f32> = txVec40;
        let x_2540 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2538.xy, x_2538.z);
        u_xlat7.x = x_2540;
        let x_2543 : f32 = u_xlat15.z;
        let x_2545 : f32 = u_xlat7.x;
        let x_2547 : f32 = u_xlat69;
        u_xlat69 = ((x_2543 * x_2545) + x_2547);
        let x_2550 : vec4<f32> = u_xlat9;
        let x_2551 : vec2<f32> = vec2<f32>(x_2550.x, x_2550.y);
        let x_2553 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2551.x, x_2551.y, x_2553);
        let x_2560 : vec3<f32> = txVec41;
        let x_2562 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2560.xy, x_2560.z);
        u_xlat7.x = x_2562;
        let x_2565 : f32 = u_xlat15.w;
        let x_2567 : f32 = u_xlat7.x;
        let x_2569 : f32 = u_xlat69;
        u_xlat69 = ((x_2565 * x_2567) + x_2569);
        let x_2572 : vec4<f32> = u_xlat9;
        let x_2573 : vec2<f32> = vec2<f32>(x_2572.z, x_2572.w);
        let x_2575 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2573.x, x_2573.y, x_2575);
        let x_2582 : vec3<f32> = txVec42;
        let x_2584 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2582.xy, x_2582.z);
        u_xlat7.x = x_2584;
        let x_2587 : f32 = u_xlat48.x;
        let x_2589 : f32 = u_xlat7.x;
        let x_2591 : f32 = u_xlat69;
        u_xlat63 = ((x_2587 * x_2589) + x_2591);
      } else {
        let x_2594 : vec4<f32> = vs_INTERP9;
        let x_2597 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2594.x, x_2594.y) * vec2<f32>(x_2597.z, x_2597.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2601 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2601);
        let x_2603 : vec4<f32> = vs_INTERP9;
        let x_2606 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2609 : vec2<f32> = u_xlat48;
        let x_2611 : vec2<f32> = ((vec2<f32>(x_2603.x, x_2603.y) * vec2<f32>(x_2606.z, x_2606.w)) + -(x_2609));
        let x_2612 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2611.x, x_2611.y, x_2612.z, x_2612.w);
        let x_2614 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2614.x, x_2614.x, x_2614.y, x_2614.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2617 : vec4<f32> = u_xlat8;
        let x_2619 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2617.x, x_2617.x, x_2617.z, x_2617.z) * vec4<f32>(x_2619.x, x_2619.x, x_2619.z, x_2619.z));
        let x_2622 : vec4<f32> = u_xlat9;
        let x_2624 : vec2<f32> = (vec2<f32>(x_2622.y, x_2622.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2625 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2625.x, x_2624.x, x_2625.z, x_2624.y);
        let x_2627 : vec4<f32> = u_xlat9;
        let x_2630 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2627.x, x_2627.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2630.x, x_2630.y)));
        let x_2634 : vec4<f32> = u_xlat7;
        let x_2637 : vec2<f32> = (-(vec2<f32>(x_2634.x, x_2634.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2638 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2637.x, x_2638.y, x_2637.y, x_2638.w);
        let x_2640 : vec4<f32> = u_xlat7;
        let x_2642 : vec2<f32> = min(vec2<f32>(x_2640.x, x_2640.y), vec2<f32>(0.0f, 0.0f));
        let x_2643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2642.x, x_2642.y, x_2643.z, x_2643.w);
        let x_2645 : vec4<f32> = u_xlat9;
        let x_2648 : vec4<f32> = u_xlat9;
        let x_2651 : vec4<f32> = u_xlat8;
        let x_2653 : vec2<f32> = ((-(vec2<f32>(x_2645.x, x_2645.y)) * vec2<f32>(x_2648.x, x_2648.y)) + vec2<f32>(x_2651.x, x_2651.z));
        let x_2654 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2653.x, x_2654.y, x_2653.y, x_2654.w);
        let x_2656 : vec4<f32> = u_xlat7;
        let x_2658 : vec2<f32> = max(vec2<f32>(x_2656.x, x_2656.y), vec2<f32>(0.0f, 0.0f));
        let x_2659 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2658.x, x_2658.y, x_2659.z, x_2659.w);
        let x_2661 : vec4<f32> = u_xlat9;
        let x_2664 : vec4<f32> = u_xlat9;
        let x_2667 : vec4<f32> = u_xlat8;
        let x_2669 : vec2<f32> = ((-(vec2<f32>(x_2661.x, x_2661.y)) * vec2<f32>(x_2664.x, x_2664.y)) + vec2<f32>(x_2667.y, x_2667.w));
        let x_2670 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2670.x, x_2669.x, x_2670.z, x_2669.y);
        let x_2672 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2672 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2675 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2675 * 0.081632003f);
        let x_2678 : vec2<f32> = u_xlat49;
        let x_2680 : vec2<f32> = (vec2<f32>(x_2678.y, x_2678.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2681 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2680.x, x_2680.y, x_2681.z, x_2681.w);
        let x_2683 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2683.x, x_2683.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2687 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2687 * 0.081632003f);
        let x_2691 : f32 = u_xlat11.y;
        u_xlat9.x = x_2691;
        let x_2693 : vec4<f32> = u_xlat7;
        let x_2696 : vec2<f32> = ((vec2<f32>(x_2693.x, x_2693.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2697 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2697.x, x_2696.x, x_2697.z, x_2696.y);
        let x_2699 : vec4<f32> = u_xlat7;
        let x_2702 : vec2<f32> = ((vec2<f32>(x_2699.x, x_2699.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2703 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2702.x, x_2703.y, x_2702.y, x_2703.w);
        let x_2706 : f32 = u_xlat49.x;
        u_xlat8.y = x_2706;
        let x_2709 : f32 = u_xlat10.y;
        u_xlat8.w = x_2709;
        let x_2711 : vec4<f32> = u_xlat8;
        let x_2712 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2711 + x_2712);
        let x_2714 : vec4<f32> = u_xlat7;
        let x_2717 : vec2<f32> = ((vec2<f32>(x_2714.y, x_2714.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2718 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2718.x, x_2717.x, x_2718.z, x_2717.y);
        let x_2720 : vec4<f32> = u_xlat7;
        let x_2723 : vec2<f32> = ((vec2<f32>(x_2720.y, x_2720.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2724 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2723.x, x_2724.y, x_2723.y, x_2724.w);
        let x_2727 : f32 = u_xlat49.y;
        u_xlat10.y = x_2727;
        let x_2729 : vec4<f32> = u_xlat10;
        let x_2730 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2729 + x_2730);
        let x_2732 : vec4<f32> = u_xlat8;
        let x_2733 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2732 / x_2733);
        let x_2735 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2735 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2737 : vec4<f32> = u_xlat10;
        let x_2738 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2737 / x_2738);
        let x_2740 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2740 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2742 : vec4<f32> = u_xlat8;
        let x_2745 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2742.w, x_2742.x, x_2742.y, x_2742.z) * vec4<f32>(x_2745.x, x_2745.x, x_2745.x, x_2745.x));
        let x_2748 : vec4<f32> = u_xlat10;
        let x_2751 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2748.x, x_2748.w, x_2748.y, x_2748.z) * vec4<f32>(x_2751.y, x_2751.y, x_2751.y, x_2751.y));
        let x_2754 : vec4<f32> = u_xlat8;
        let x_2755 : vec3<f32> = vec3<f32>(x_2754.y, x_2754.z, x_2754.w);
        let x_2756 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2755.x, x_2756.y, x_2755.y, x_2755.z);
        let x_2759 : f32 = u_xlat10.x;
        u_xlat11.y = x_2759;
        let x_2761 : vec2<f32> = u_xlat48;
        let x_2764 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2767 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2761.x, x_2761.y, x_2761.x, x_2761.y) * vec4<f32>(x_2764.x, x_2764.y, x_2764.x, x_2764.y)) + vec4<f32>(x_2767.x, x_2767.y, x_2767.z, x_2767.y));
        let x_2770 : vec2<f32> = u_xlat48;
        let x_2772 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2775 : vec4<f32> = u_xlat11;
        let x_2777 : vec2<f32> = ((x_2770 * vec2<f32>(x_2772.x, x_2772.y)) + vec2<f32>(x_2775.w, x_2775.y));
        let x_2778 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2777.x, x_2777.y, x_2778.z, x_2778.w);
        let x_2781 : f32 = u_xlat11.y;
        u_xlat8.y = x_2781;
        let x_2784 : f32 = u_xlat10.z;
        u_xlat11.y = x_2784;
        let x_2786 : vec2<f32> = u_xlat48;
        let x_2789 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2792 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2786.x, x_2786.y, x_2786.x, x_2786.y) * vec4<f32>(x_2789.x, x_2789.y, x_2789.x, x_2789.y)) + vec4<f32>(x_2792.x, x_2792.y, x_2792.z, x_2792.y));
        let x_2796 : vec2<f32> = u_xlat48;
        let x_2798 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2801 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2796 * vec2<f32>(x_2798.x, x_2798.y)) + vec2<f32>(x_2801.w, x_2801.y));
        let x_2805 : f32 = u_xlat11.y;
        u_xlat8.z = x_2805;
        let x_2807 : vec2<f32> = u_xlat48;
        let x_2810 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2813 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2807.x, x_2807.y, x_2807.x, x_2807.y) * vec4<f32>(x_2810.x, x_2810.y, x_2810.x, x_2810.y)) + vec4<f32>(x_2813.x, x_2813.y, x_2813.x, x_2813.z));
        let x_2817 : f32 = u_xlat10.w;
        u_xlat11.y = x_2817;
        let x_2819 : vec2<f32> = u_xlat48;
        let x_2822 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2825 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2819.x, x_2819.y, x_2819.x, x_2819.y) * vec4<f32>(x_2822.x, x_2822.y, x_2822.x, x_2822.y)) + vec4<f32>(x_2825.x, x_2825.y, x_2825.z, x_2825.y));
        let x_2828 : vec2<f32> = u_xlat48;
        let x_2830 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2833 : vec4<f32> = u_xlat11;
        let x_2835 : vec2<f32> = ((x_2828 * vec2<f32>(x_2830.x, x_2830.y)) + vec2<f32>(x_2833.w, x_2833.y));
        let x_2836 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2835.x, x_2835.y, x_2836.z);
        let x_2839 : f32 = u_xlat11.y;
        u_xlat8.w = x_2839;
        let x_2841 : vec2<f32> = u_xlat48;
        let x_2843 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2846 : vec4<f32> = u_xlat8;
        let x_2848 : vec2<f32> = ((x_2841 * vec2<f32>(x_2843.x, x_2843.y)) + vec2<f32>(x_2846.x, x_2846.w));
        let x_2849 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2848.x, x_2848.y, x_2849.z, x_2849.w);
        let x_2851 : vec4<f32> = u_xlat11;
        let x_2852 : vec3<f32> = vec3<f32>(x_2851.x, x_2851.z, x_2851.w);
        let x_2853 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2852.x, x_2853.y, x_2852.y, x_2852.z);
        let x_2855 : vec2<f32> = u_xlat48;
        let x_2858 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2861 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2855.x, x_2855.y, x_2855.x, x_2855.y) * vec4<f32>(x_2858.x, x_2858.y, x_2858.x, x_2858.y)) + vec4<f32>(x_2861.x, x_2861.y, x_2861.z, x_2861.y));
        let x_2864 : vec2<f32> = u_xlat48;
        let x_2866 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2869 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2864 * vec2<f32>(x_2866.x, x_2866.y)) + vec2<f32>(x_2869.w, x_2869.y));
        let x_2873 : f32 = u_xlat8.x;
        u_xlat10.x = x_2873;
        let x_2875 : vec2<f32> = u_xlat48;
        let x_2877 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2880 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2875 * vec2<f32>(x_2877.x, x_2877.y)) + vec2<f32>(x_2880.x, x_2880.y));
        let x_2883 : vec4<f32> = u_xlat7;
        let x_2885 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2883.x, x_2883.x, x_2883.x, x_2883.x) * x_2885);
        let x_2887 : vec4<f32> = u_xlat7;
        let x_2889 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2887.y, x_2887.y, x_2887.y, x_2887.y) * x_2889);
        let x_2891 : vec4<f32> = u_xlat7;
        let x_2893 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2891.z, x_2891.z, x_2891.z, x_2891.z) * x_2893);
        let x_2895 : vec4<f32> = u_xlat7;
        let x_2897 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2895.w, x_2895.w, x_2895.w, x_2895.w) * x_2897);
        let x_2900 : vec4<f32> = u_xlat12;
        let x_2901 : vec2<f32> = vec2<f32>(x_2900.x, x_2900.y);
        let x_2903 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2901.x, x_2901.y, x_2903);
        let x_2910 : vec3<f32> = txVec43;
        let x_2912 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2910.xy, x_2910.z);
        u_xlat8.x = x_2912;
        let x_2915 : vec4<f32> = u_xlat12;
        let x_2916 : vec2<f32> = vec2<f32>(x_2915.z, x_2915.w);
        let x_2918 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2916.x, x_2916.y, x_2918);
        let x_2926 : vec3<f32> = txVec44;
        let x_2928 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2926.xy, x_2926.z);
        u_xlat71 = x_2928;
        let x_2929 : f32 = u_xlat71;
        let x_2931 : f32 = u_xlat18.y;
        u_xlat71 = (x_2929 * x_2931);
        let x_2934 : f32 = u_xlat18.x;
        let x_2936 : f32 = u_xlat8.x;
        let x_2938 : f32 = u_xlat71;
        u_xlat8.x = ((x_2934 * x_2936) + x_2938);
        let x_2942 : vec4<f32> = u_xlat13;
        let x_2943 : vec2<f32> = vec2<f32>(x_2942.x, x_2942.y);
        let x_2945 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2943.x, x_2943.y, x_2945);
        let x_2952 : vec3<f32> = txVec45;
        let x_2954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2952.xy, x_2952.z);
        u_xlat71 = x_2954;
        let x_2956 : f32 = u_xlat18.z;
        let x_2957 : f32 = u_xlat71;
        let x_2960 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2956 * x_2957) + x_2960);
        let x_2964 : vec4<f32> = u_xlat15;
        let x_2965 : vec2<f32> = vec2<f32>(x_2964.x, x_2964.y);
        let x_2967 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2965.x, x_2965.y, x_2967);
        let x_2974 : vec3<f32> = txVec46;
        let x_2976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2974.xy, x_2974.z);
        u_xlat71 = x_2976;
        let x_2978 : f32 = u_xlat18.w;
        let x_2979 : f32 = u_xlat71;
        let x_2982 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2978 * x_2979) + x_2982);
        let x_2986 : vec4<f32> = u_xlat14;
        let x_2987 : vec2<f32> = vec2<f32>(x_2986.x, x_2986.y);
        let x_2989 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2987.x, x_2987.y, x_2989);
        let x_2996 : vec3<f32> = txVec47;
        let x_2998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2996.xy, x_2996.z);
        u_xlat71 = x_2998;
        let x_3000 : f32 = u_xlat19.x;
        let x_3001 : f32 = u_xlat71;
        let x_3004 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3000 * x_3001) + x_3004);
        let x_3008 : vec4<f32> = u_xlat14;
        let x_3009 : vec2<f32> = vec2<f32>(x_3008.z, x_3008.w);
        let x_3011 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3009.x, x_3009.y, x_3011);
        let x_3018 : vec3<f32> = txVec48;
        let x_3020 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3018.xy, x_3018.z);
        u_xlat71 = x_3020;
        let x_3022 : f32 = u_xlat19.y;
        let x_3023 : f32 = u_xlat71;
        let x_3026 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3022 * x_3023) + x_3026);
        let x_3030 : vec2<f32> = u_xlat55;
        let x_3032 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3030.x, x_3030.y, x_3032);
        let x_3039 : vec3<f32> = txVec49;
        let x_3041 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3039.xy, x_3039.z);
        u_xlat71 = x_3041;
        let x_3043 : f32 = u_xlat19.z;
        let x_3044 : f32 = u_xlat71;
        let x_3047 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3043 * x_3044) + x_3047);
        let x_3051 : vec4<f32> = u_xlat15;
        let x_3052 : vec2<f32> = vec2<f32>(x_3051.z, x_3051.w);
        let x_3054 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3052.x, x_3052.y, x_3054);
        let x_3061 : vec3<f32> = txVec50;
        let x_3063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3061.xy, x_3061.z);
        u_xlat71 = x_3063;
        let x_3065 : f32 = u_xlat19.w;
        let x_3066 : f32 = u_xlat71;
        let x_3069 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3065 * x_3066) + x_3069);
        let x_3073 : vec4<f32> = u_xlat16;
        let x_3074 : vec2<f32> = vec2<f32>(x_3073.x, x_3073.y);
        let x_3076 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3074.x, x_3074.y, x_3076);
        let x_3083 : vec3<f32> = txVec51;
        let x_3085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3083.xy, x_3083.z);
        u_xlat71 = x_3085;
        let x_3087 : f32 = u_xlat20.x;
        let x_3088 : f32 = u_xlat71;
        let x_3091 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3087 * x_3088) + x_3091);
        let x_3095 : vec4<f32> = u_xlat16;
        let x_3096 : vec2<f32> = vec2<f32>(x_3095.z, x_3095.w);
        let x_3098 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3096.x, x_3096.y, x_3098);
        let x_3105 : vec3<f32> = txVec52;
        let x_3107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3105.xy, x_3105.z);
        u_xlat71 = x_3107;
        let x_3109 : f32 = u_xlat20.y;
        let x_3110 : f32 = u_xlat71;
        let x_3113 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3109 * x_3110) + x_3113);
        let x_3117 : vec3<f32> = u_xlat29;
        let x_3118 : vec2<f32> = vec2<f32>(x_3117.x, x_3117.y);
        let x_3120 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3118.x, x_3118.y, x_3120);
        let x_3127 : vec3<f32> = txVec53;
        let x_3129 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3127.xy, x_3127.z);
        u_xlat29.x = x_3129;
        let x_3132 : f32 = u_xlat20.z;
        let x_3134 : f32 = u_xlat29.x;
        let x_3137 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3132 * x_3134) + x_3137);
        let x_3141 : vec4<f32> = u_xlat17;
        let x_3142 : vec2<f32> = vec2<f32>(x_3141.x, x_3141.y);
        let x_3144 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3142.x, x_3142.y, x_3144);
        let x_3151 : vec3<f32> = txVec54;
        let x_3153 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3151.xy, x_3151.z);
        u_xlat29.x = x_3153;
        let x_3156 : f32 = u_xlat20.w;
        let x_3158 : f32 = u_xlat29.x;
        let x_3161 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3156 * x_3158) + x_3161);
        let x_3165 : vec4<f32> = u_xlat11;
        let x_3166 : vec2<f32> = vec2<f32>(x_3165.x, x_3165.y);
        let x_3168 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3166.x, x_3166.y, x_3168);
        let x_3175 : vec3<f32> = txVec55;
        let x_3177 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3175.xy, x_3175.z);
        u_xlat29.x = x_3177;
        let x_3180 : f32 = u_xlat7.x;
        let x_3182 : f32 = u_xlat29.x;
        let x_3185 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3180 * x_3182) + x_3185);
        let x_3189 : vec4<f32> = u_xlat11;
        let x_3190 : vec2<f32> = vec2<f32>(x_3189.z, x_3189.w);
        let x_3192 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3190.x, x_3190.y, x_3192);
        let x_3199 : vec3<f32> = txVec56;
        let x_3201 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3199.xy, x_3199.z);
        u_xlat8.x = x_3201;
        let x_3204 : f32 = u_xlat7.y;
        let x_3206 : f32 = u_xlat8.x;
        let x_3209 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3204 * x_3206) + x_3209);
        let x_3213 : vec2<f32> = u_xlat52;
        let x_3215 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3213.x, x_3213.y, x_3215);
        let x_3223 : vec3<f32> = txVec57;
        let x_3225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3223.xy, x_3223.z);
        u_xlat28 = x_3225;
        let x_3227 : f32 = u_xlat7.z;
        let x_3228 : f32 = u_xlat28;
        let x_3231 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3227 * x_3228) + x_3231);
        let x_3235 : vec2<f32> = u_xlat48;
        let x_3237 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3235.x, x_3235.y, x_3237);
        let x_3244 : vec3<f32> = txVec58;
        let x_3246 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3244.xy, x_3244.z);
        u_xlat48.x = x_3246;
        let x_3249 : f32 = u_xlat7.w;
        let x_3251 : f32 = u_xlat48.x;
        let x_3254 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3249 * x_3251) + x_3254);
      }
    }
  } else {
    let x_3258 : vec4<f32> = vs_INTERP9;
    let x_3259 : vec2<f32> = vec2<f32>(x_3258.x, x_3258.y);
    let x_3261 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3259.x, x_3259.y, x_3261);
    let x_3268 : vec3<f32> = txVec59;
    let x_3270 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3268.xy, x_3268.z);
    u_xlat63 = x_3270;
  }
  let x_3271 : f32 = u_xlat63;
  let x_3273 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3275 : f32 = u_xlat65;
  u_xlat63 = ((x_3271 * x_3273) + x_3275);
  let x_3278 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3278);
  let x_3281 : f32 = vs_INTERP9.z;
  u_xlatb48 = (x_3281 >= 1.0f);
  let x_3283 : bool = u_xlatb65;
  let x_3284 : bool = u_xlatb48;
  u_xlatb65 = (x_3283 | x_3284);
  let x_3286 : bool = u_xlatb65;
  let x_3287 : f32 = u_xlat63;
  u_xlat63 = select(x_3287, 1.0f, x_3286);
  let x_3289 : vec3<f32> = vs_INTERP0;
  let x_3291 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3293 : vec3<f32> = (x_3289 + -(x_3291));
  let x_3294 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3293.x, x_3293.y, x_3293.z, x_3294.w);
  let x_3296 : vec4<f32> = u_xlat7;
  let x_3298 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3296.x, x_3296.y, x_3296.z), vec3<f32>(x_3298.x, x_3298.y, x_3298.z));
  let x_3301 : f32 = u_xlat65;
  let x_3303 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3306 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3301 * x_3303) + x_3306);
  let x_3308 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3308, 0.0f, 1.0f);
  let x_3310 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3310) + 1.0f);
  let x_3314 : f32 = u_xlat65;
  let x_3316 : f32 = u_xlat48.x;
  let x_3318 : f32 = u_xlat63;
  u_xlat63 = ((x_3314 * x_3316) + x_3318);
  let x_3320 : f32 = u_xlat27;
  let x_3323 : vec4<f32> = x_90.x_MainLightColor;
  let x_3325 : vec3<f32> = (vec3<f32>(x_3320, x_3320, x_3320) * vec3<f32>(x_3323.x, x_3323.y, x_3323.z));
  let x_3326 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3325.x, x_3325.y, x_3325.z, x_3326.w);
  let x_3328 : vec3<f32> = u_xlat2;
  let x_3330 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3328), vec3<f32>(x_3330.x, x_3330.y, x_3330.z));
  let x_3333 : f32 = u_xlat65;
  let x_3334 : f32 = u_xlat65;
  u_xlat65 = (x_3333 + x_3334);
  let x_3336 : vec4<f32> = u_xlat3;
  let x_3338 : f32 = u_xlat65;
  let x_3342 : vec3<f32> = u_xlat2;
  let x_3344 : vec3<f32> = ((vec3<f32>(x_3336.x, x_3336.y, x_3336.z) * -(vec3<f32>(x_3338, x_3338, x_3338))) + -(x_3342));
  let x_3345 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3344.x, x_3344.y, x_3344.z, x_3345.w);
  let x_3347 : vec4<f32> = u_xlat3;
  let x_3349 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3347.x, x_3347.y, x_3347.z), x_3349);
  let x_3351 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3351, 0.0f, 1.0f);
  let x_3353 : f32 = u_xlat65;
  u_xlat65 = (-(x_3353) + 1.0f);
  let x_3356 : f32 = u_xlat65;
  let x_3357 : f32 = u_xlat65;
  u_xlat65 = (x_3356 * x_3357);
  let x_3359 : f32 = u_xlat65;
  let x_3360 : f32 = u_xlat65;
  u_xlat65 = (x_3359 * x_3360);
  let x_3363 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3363) * 0.699999988f) + 1.700000048f);
  let x_3371 : f32 = u_xlat43.x;
  let x_3373 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3371 * x_3373);
  let x_3377 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3377 * 6.0f);
  let x_3389 : vec4<f32> = u_xlat8;
  let x_3392 : f32 = u_xlat43.x;
  let x_3393 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3389.x, x_3389.y, x_3389.z), x_3392);
  u_xlat8 = x_3393;
  let x_3395 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3395 + -1.0f);
  let x_3399 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3401 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3399 * x_3401) + 1.0f);
  let x_3406 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3406, 0.0f);
  let x_3410 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3410);
  let x_3414 : f32 = u_xlat43.x;
  let x_3416 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3414 * x_3416);
  let x_3420 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3420);
  let x_3424 : f32 = u_xlat43.x;
  let x_3426 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3424 * x_3426);
  let x_3429 : vec4<f32> = u_xlat8;
  let x_3431 : vec2<f32> = u_xlat43;
  let x_3433 : vec3<f32> = (vec3<f32>(x_3429.x, x_3429.y, x_3429.z) * vec3<f32>(x_3431.x, x_3431.x, x_3431.x));
  let x_3434 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3433.x, x_3433.y, x_3433.z, x_3434.w);
  let x_3436 : f32 = u_xlat64;
  let x_3438 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3436, x_3436) * vec2<f32>(x_3438, x_3438)) + vec2<f32>(-1.0f, 1.0f));
  let x_3444 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3444);
  let x_3446 : f32 = u_xlat67;
  u_xlat67 = (x_3446 + -0.039999999f);
  let x_3449 : f32 = u_xlat65;
  let x_3450 : f32 = u_xlat67;
  u_xlat65 = ((x_3449 * x_3450) + 0.039999999f);
  let x_3454 : f32 = u_xlat64;
  let x_3455 : f32 = u_xlat65;
  u_xlat64 = (x_3454 * x_3455);
  let x_3457 : f32 = u_xlat64;
  let x_3459 : vec4<f32> = u_xlat8;
  let x_3461 : vec3<f32> = (vec3<f32>(x_3457, x_3457, x_3457) * vec3<f32>(x_3459.x, x_3459.y, x_3459.z));
  let x_3462 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3461.x, x_3461.y, x_3461.z, x_3462.w);
  let x_3464 : vec3<f32> = u_xlat26;
  let x_3465 : vec3<f32> = u_xlat4;
  let x_3467 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3464 * x_3465) + vec3<f32>(x_3467.x, x_3467.y, x_3467.z));
  let x_3470 : f32 = u_xlat63;
  let x_3472 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3470 * x_3472);
  let x_3474 : vec4<f32> = u_xlat3;
  let x_3477 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3474.x, x_3474.y, x_3474.z), vec3<f32>(x_3477.x, x_3477.y, x_3477.z));
  let x_3480 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3480, 0.0f, 1.0f);
  let x_3482 : f32 = u_xlat63;
  let x_3483 : f32 = u_xlat64;
  u_xlat63 = (x_3482 * x_3483);
  let x_3485 : f32 = u_xlat63;
  let x_3487 : vec4<f32> = u_xlat7;
  let x_3489 : vec3<f32> = (vec3<f32>(x_3485, x_3485, x_3485) * vec3<f32>(x_3487.x, x_3487.y, x_3487.z));
  let x_3490 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3489.x, x_3489.y, x_3489.z, x_3490.w);
  let x_3492 : vec3<f32> = u_xlat2;
  let x_3494 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3496 : vec3<f32> = (x_3492 + vec3<f32>(x_3494.x, x_3494.y, x_3494.z));
  let x_3497 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3496.x, x_3496.y, x_3496.z, x_3497.w);
  let x_3499 : vec4<f32> = u_xlat8;
  let x_3501 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3499.x, x_3499.y, x_3499.z), vec3<f32>(x_3501.x, x_3501.y, x_3501.z));
  let x_3504 : f32 = u_xlat63;
  u_xlat63 = max(x_3504, 1.17549435e-37f);
  let x_3507 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3507);
  let x_3509 : f32 = u_xlat63;
  let x_3511 : vec4<f32> = u_xlat8;
  let x_3513 : vec3<f32> = (vec3<f32>(x_3509, x_3509, x_3509) * vec3<f32>(x_3511.x, x_3511.y, x_3511.z));
  let x_3514 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3513.x, x_3513.y, x_3513.z, x_3514.w);
  let x_3516 : vec4<f32> = u_xlat3;
  let x_3518 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3516.x, x_3516.y, x_3516.z), vec3<f32>(x_3518.x, x_3518.y, x_3518.z));
  let x_3521 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3521, 0.0f, 1.0f);
  let x_3524 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3526 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3524.x, x_3524.y, x_3524.z), vec3<f32>(x_3526.x, x_3526.y, x_3526.z));
  let x_3529 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3529, 0.0f, 1.0f);
  let x_3531 : f32 = u_xlat63;
  let x_3532 : f32 = u_xlat63;
  u_xlat63 = (x_3531 * x_3532);
  let x_3534 : f32 = u_xlat63;
  let x_3536 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3534 * x_3536) + 1.000010014f);
  let x_3540 : f32 = u_xlat64;
  let x_3541 : f32 = u_xlat64;
  u_xlat64 = (x_3540 * x_3541);
  let x_3543 : f32 = u_xlat63;
  let x_3544 : f32 = u_xlat63;
  u_xlat63 = (x_3543 * x_3544);
  let x_3546 : f32 = u_xlat64;
  u_xlat64 = max(x_3546, 0.100000001f);
  let x_3549 : f32 = u_xlat63;
  let x_3550 : f32 = u_xlat64;
  u_xlat63 = (x_3549 * x_3550);
  let x_3553 : f32 = u_xlat5.x;
  let x_3554 : f32 = u_xlat63;
  u_xlat63 = (x_3553 * x_3554);
  let x_3556 : f32 = u_xlat66;
  let x_3557 : f32 = u_xlat63;
  u_xlat63 = (x_3556 / x_3557);
  let x_3559 : f32 = u_xlat63;
  let x_3563 : vec3<f32> = u_xlat4;
  let x_3564 : vec3<f32> = ((vec3<f32>(x_3559, x_3559, x_3559) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3563);
  let x_3565 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3564.x, x_3564.y, x_3564.z, x_3565.w);
  let x_3567 : vec4<f32> = u_xlat7;
  let x_3569 : vec4<f32> = u_xlat8;
  let x_3571 : vec3<f32> = (vec3<f32>(x_3567.x, x_3567.y, x_3567.z) * vec3<f32>(x_3569.x, x_3569.y, x_3569.z));
  let x_3572 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3571.x, x_3571.y, x_3571.z, x_3572.w);
  let x_3575 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3577 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3575, x_3577);
  let x_3580 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3580));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3592 : u32 = u_xlatu_loop_1;
    let x_3593 : u32 = u_xlatu63;
    if ((x_3592 < x_3593)) {
    } else {
      break;
    }
    let x_3596 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3596 >> 2u);
    let x_3599 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3599 & 3u));
    let x_3602 : u32 = u_xlatu65;
    let x_3605 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3602)];
    let x_3615 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3620 : vec4<u32> = indexable[x_3615];
    u_xlat65 = dot(x_3605, bitcast<vec4<f32>>(x_3620));
    let x_3624 : f32 = u_xlat65;
    u_xlati65 = i32(x_3624);
    let x_3626 : vec3<f32> = vs_INTERP0;
    let x_3638 : i32 = u_xlati65;
    let x_3640 : vec4<f32> = x_3637.x_AdditionalLightsPosition[x_3638];
    let x_3643 : i32 = u_xlati65;
    let x_3645 : vec4<f32> = x_3637.x_AdditionalLightsPosition[x_3643];
    let x_3647 : vec3<f32> = ((-(x_3626) * vec3<f32>(x_3640.w, x_3640.w, x_3640.w)) + vec3<f32>(x_3645.x, x_3645.y, x_3645.z));
    let x_3648 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3647.x, x_3647.y, x_3647.z, x_3648.w);
    let x_3650 : vec4<f32> = u_xlat9;
    let x_3652 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3650.x, x_3650.y, x_3650.z), vec3<f32>(x_3652.x, x_3652.y, x_3652.z));
    let x_3655 : f32 = u_xlat67;
    u_xlat67 = max(x_3655, 6.10351562e-05f);
    let x_3658 : f32 = u_xlat67;
    u_xlat48.x = inverseSqrt(x_3658);
    let x_3661 : vec2<f32> = u_xlat48;
    let x_3663 : vec4<f32> = u_xlat9;
    let x_3665 : vec3<f32> = (vec3<f32>(x_3661.x, x_3661.x, x_3661.x) * vec3<f32>(x_3663.x, x_3663.y, x_3663.z));
    let x_3666 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3665.x, x_3665.y, x_3665.z, x_3666.w);
    let x_3668 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_3668);
    let x_3670 : f32 = u_xlat67;
    let x_3671 : i32 = u_xlati65;
    let x_3673 : f32 = x_3637.x_AdditionalLightsAttenuation[x_3671].x;
    u_xlat67 = (x_3670 * x_3673);
    let x_3675 : f32 = u_xlat67;
    let x_3677 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3675) * x_3677) + 1.0f);
    let x_3680 : f32 = u_xlat67;
    u_xlat67 = max(x_3680, 0.0f);
    let x_3682 : f32 = u_xlat67;
    let x_3683 : f32 = u_xlat67;
    u_xlat67 = (x_3682 * x_3683);
    let x_3685 : f32 = u_xlat67;
    let x_3686 : f32 = u_xlat69;
    u_xlat67 = (x_3685 * x_3686);
    let x_3688 : i32 = u_xlati65;
    let x_3690 : vec4<f32> = x_3637.x_AdditionalLightsSpotDir[x_3688];
    let x_3692 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3690.x, x_3690.y, x_3690.z), vec3<f32>(x_3692.x, x_3692.y, x_3692.z));
    let x_3695 : f32 = u_xlat69;
    let x_3696 : i32 = u_xlati65;
    let x_3698 : f32 = x_3637.x_AdditionalLightsAttenuation[x_3696].z;
    let x_3700 : i32 = u_xlati65;
    let x_3702 : f32 = x_3637.x_AdditionalLightsAttenuation[x_3700].w;
    u_xlat69 = ((x_3695 * x_3698) + x_3702);
    let x_3704 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3704, 0.0f, 1.0f);
    let x_3706 : f32 = u_xlat69;
    let x_3707 : f32 = u_xlat69;
    u_xlat69 = (x_3706 * x_3707);
    let x_3709 : f32 = u_xlat67;
    let x_3710 : f32 = u_xlat69;
    u_xlat67 = (x_3709 * x_3710);
    let x_3712 : f32 = u_xlat27;
    let x_3714 : i32 = u_xlati65;
    let x_3716 : vec4<f32> = x_3637.x_AdditionalLightsColor[x_3714];
    let x_3718 : vec3<f32> = (vec3<f32>(x_3712, x_3712, x_3712) * vec3<f32>(x_3716.x, x_3716.y, x_3716.z));
    let x_3719 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3718.x, x_3718.y, x_3718.z, x_3719.w);
    let x_3721 : vec4<f32> = u_xlat3;
    let x_3723 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_3721.x, x_3721.y, x_3721.z), vec3<f32>(x_3723.x, x_3723.y, x_3723.z));
    let x_3726 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3726, 0.0f, 1.0f);
    let x_3728 : f32 = u_xlat65;
    let x_3729 : f32 = u_xlat67;
    u_xlat65 = (x_3728 * x_3729);
    let x_3731 : f32 = u_xlat65;
    let x_3733 : vec4<f32> = u_xlat11;
    let x_3735 : vec3<f32> = (vec3<f32>(x_3731, x_3731, x_3731) * vec3<f32>(x_3733.x, x_3733.y, x_3733.z));
    let x_3736 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3735.x, x_3735.y, x_3735.z, x_3736.w);
    let x_3738 : vec4<f32> = u_xlat9;
    let x_3740 : vec2<f32> = u_xlat48;
    let x_3743 : vec3<f32> = u_xlat2;
    let x_3744 : vec3<f32> = ((vec3<f32>(x_3738.x, x_3738.y, x_3738.z) * vec3<f32>(x_3740.x, x_3740.x, x_3740.x)) + x_3743);
    let x_3745 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3744.x, x_3744.y, x_3744.z, x_3745.w);
    let x_3747 : vec4<f32> = u_xlat9;
    let x_3749 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3747.x, x_3747.y, x_3747.z), vec3<f32>(x_3749.x, x_3749.y, x_3749.z));
    let x_3752 : f32 = u_xlat65;
    u_xlat65 = max(x_3752, 1.17549435e-37f);
    let x_3754 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3754);
    let x_3756 : f32 = u_xlat65;
    let x_3758 : vec4<f32> = u_xlat9;
    let x_3760 : vec3<f32> = (vec3<f32>(x_3756, x_3756, x_3756) * vec3<f32>(x_3758.x, x_3758.y, x_3758.z));
    let x_3761 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3760.x, x_3760.y, x_3760.z, x_3761.w);
    let x_3763 : vec4<f32> = u_xlat3;
    let x_3765 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3763.x, x_3763.y, x_3763.z), vec3<f32>(x_3765.x, x_3765.y, x_3765.z));
    let x_3768 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3768, 0.0f, 1.0f);
    let x_3770 : vec4<f32> = u_xlat10;
    let x_3772 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3770.x, x_3770.y, x_3770.z), vec3<f32>(x_3772.x, x_3772.y, x_3772.z));
    let x_3775 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3775, 0.0f, 1.0f);
    let x_3777 : f32 = u_xlat65;
    let x_3778 : f32 = u_xlat65;
    u_xlat65 = (x_3777 * x_3778);
    let x_3780 : f32 = u_xlat65;
    let x_3782 : f32 = u_xlat43.x;
    u_xlat65 = ((x_3780 * x_3782) + 1.000010014f);
    let x_3785 : f32 = u_xlat67;
    let x_3786 : f32 = u_xlat67;
    u_xlat67 = (x_3785 * x_3786);
    let x_3788 : f32 = u_xlat65;
    let x_3789 : f32 = u_xlat65;
    u_xlat65 = (x_3788 * x_3789);
    let x_3791 : f32 = u_xlat67;
    u_xlat67 = max(x_3791, 0.100000001f);
    let x_3793 : f32 = u_xlat65;
    let x_3794 : f32 = u_xlat67;
    u_xlat65 = (x_3793 * x_3794);
    let x_3797 : f32 = u_xlat5.x;
    let x_3798 : f32 = u_xlat65;
    u_xlat65 = (x_3797 * x_3798);
    let x_3800 : f32 = u_xlat66;
    let x_3801 : f32 = u_xlat65;
    u_xlat65 = (x_3800 / x_3801);
    let x_3803 : f32 = u_xlat65;
    let x_3806 : vec3<f32> = u_xlat4;
    let x_3807 : vec3<f32> = ((vec3<f32>(x_3803, x_3803, x_3803) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3806);
    let x_3808 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3807.x, x_3807.y, x_3807.z, x_3808.w);
    let x_3810 : vec4<f32> = u_xlat9;
    let x_3812 : vec4<f32> = u_xlat11;
    let x_3815 : vec4<f32> = u_xlat8;
    let x_3817 : vec3<f32> = ((vec3<f32>(x_3810.x, x_3810.y, x_3810.z) * vec3<f32>(x_3812.x, x_3812.y, x_3812.z)) + vec3<f32>(x_3815.x, x_3815.y, x_3815.z));
    let x_3818 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3817.x, x_3817.y, x_3817.z, x_3818.w);

    continuing {
      let x_3820 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3820 + bitcast<u32>(1i));
    }
  }
  let x_3822 : vec3<f32> = u_xlat26;
  let x_3823 : vec4<f32> = u_xlat6;
  let x_3826 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_3822 * vec3<f32>(x_3823.x, x_3823.x, x_3823.x)) + vec3<f32>(x_3826.x, x_3826.y, x_3826.z));
  let x_3829 : vec4<f32> = u_xlat8;
  let x_3831 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3829.x, x_3829.y, x_3829.z) + x_3831);
  let x_3835 : vec4<f32> = vs_INTERP4;
  let x_3837 : vec3<f32> = u_xlat0;
  let x_3839 : vec3<f32> = u_xlat2;
  let x_3840 : vec3<f32> = ((vec3<f32>(x_3835.w, x_3835.w, x_3835.w) * x_3837) + x_3839);
  let x_3841 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3840.x, x_3840.y, x_3840.z, x_3841.w);
  let x_3843 : bool = u_xlatb22;
  if (x_3843) {
    let x_3848 : f32 = u_xlat1.x;
    x_3844 = x_3848;
  } else {
    x_3844 = 1.0f;
  }
  let x_3850 : f32 = x_3844;
  SV_Target0.w = x_3850;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

