type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_CameraNormalsTexture : sampler;

@group(0) @binding(2) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var u_xlatb11 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_95 : vec2<f32> = vs_TEXCOORD0;
  let x_97 : f32 = x_34.x_GlobalMipBias.x;
  let x_98 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_95, x_97);
  u_xlat1 = vec3<f32>(x_98.x, x_98.y, x_98.z);
  let x_104 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_104) + 1.0f);
  let x_110 : f32 = u_xlat0;
  let x_112 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_110 * x_112);
  let x_118 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_120 : vec2<f32> = vs_TEXCOORD0;
  let x_125 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat2 = ((vec3<f32>(x_118.x, x_118.y, x_118.z) * vec3<f32>(x_120.x, x_120.x, x_120.x)) + vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_130 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_132 : vec2<f32> = u_xlat14;
  let x_135 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_130.x, x_130.y, x_130.z) * vec3<f32>(x_132.x, x_132.x, x_132.x)) + x_135);
  let x_139 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_141 : f32 = u_xlat21;
  let x_144 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_139.x, x_139.y, x_139.z) * vec3<f32>(x_141, x_141, x_141)) + x_144);
  let x_146 : vec2<f32> = vs_TEXCOORD0;
  let x_149 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = (x_146 + vec2<f32>(x_149.z, x_149.w));
  let x_154 : vec2<f32> = u_xlat14;
  let x_156 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  let x_158 : vec2<f32> = (x_154 * vec2<f32>(x_156.x, x_156.y));
  let x_159 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_158.x, x_158.y, x_159.z, x_159.w);
  let x_167 : vec4<f32> = u_xlat3;
  let x_170 : f32 = x_34.x_GlobalMipBias.x;
  let x_171 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_167.x, x_167.y), x_170);
  u_xlat22 = x_171.w;
  let x_174 : f32 = u_xlat22;
  u_xlat23 = fract(x_174);
  let x_176 : f32 = u_xlat23;
  u_xlat3.z = ((x_176 * 2.0f) + -1.0f);
  let x_182 : f32 = u_xlat22;
  u_xlat22 = (x_182 + 0.9296875f);
  let x_185 : f32 = u_xlat22;
  u_xlat22 = (x_185 * 628.31854248f);
  let x_189 : f32 = u_xlat3.z;
  let x_192 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_189) * x_192) + 1.0f);
  let x_195 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_195);
  let x_198 : f32 = u_xlat22;
  u_xlat4.x = sin(x_198);
  let x_202 : f32 = u_xlat22;
  u_xlat5.x = cos(x_202);
  let x_205 : f32 = u_xlat23;
  let x_207 : f32 = u_xlat5.x;
  u_xlat3.x = (x_205 * x_207);
  let x_210 : f32 = u_xlat23;
  let x_212 : f32 = u_xlat4.x;
  u_xlat3.y = (x_210 * x_212);
  let x_215 : vec3<f32> = u_xlat1;
  let x_216 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(x_215, vec3<f32>(x_216.x, x_216.y, x_216.z));
  let x_220 : f32 = u_xlat22;
  u_xlatb22 = (x_220 >= 0.0f);
  let x_222 : bool = u_xlatb22;
  u_xlat22 = select(-1.0f, 1.0f, x_222);
  let x_224 : f32 = u_xlat22;
  let x_226 : vec4<f32> = u_xlat3;
  let x_228 : vec3<f32> = (vec3<f32>(x_224, x_224, x_224) * vec3<f32>(x_226.x, x_226.y, x_226.z));
  let x_229 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_228.x, x_228.y, x_228.z, x_229.w);
  let x_231 : vec4<f32> = u_xlat3;
  let x_234 : vec4<f32> = x_34.x_SSAOParams;
  let x_236 : vec3<f32> = (vec3<f32>(x_231.x, x_231.y, x_231.z) * vec3<f32>(x_234.y, x_234.y, x_234.y));
  let x_237 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_236.x, x_236.y, x_236.z, x_237.w);
  let x_239 : vec4<f32> = u_xlat3;
  let x_244 : vec3<f32> = u_xlat2;
  let x_245 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_244);
  let x_246 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_249 : vec4<f32> = u_xlat3;
  let x_253 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_255 : vec2<f32> = (vec2<f32>(x_249.y, x_249.y) * vec2<f32>(x_253.x, x_253.y));
  let x_256 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_255.x, x_256.y, x_255.y);
  let x_259 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_261 : vec4<f32> = u_xlat3;
  let x_264 : vec3<f32> = u_xlat10;
  let x_266 : vec2<f32> = ((vec2<f32>(x_259.x, x_259.y) * vec2<f32>(x_261.x, x_261.x)) + vec2<f32>(x_264.x, x_264.z));
  let x_267 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_266.x, x_266.y, x_267.z, x_267.w);
  let x_270 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_272 : vec4<f32> = u_xlat3;
  let x_275 : vec4<f32> = u_xlat3;
  let x_277 : vec2<f32> = ((vec2<f32>(x_270.x, x_270.y) * vec2<f32>(x_272.z, x_272.z)) + vec2<f32>(x_275.x, x_275.y));
  let x_278 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_277.x, x_277.y, x_278.z, x_278.w);
  let x_280 : vec4<f32> = u_xlat3;
  let x_283 : vec2<f32> = (vec2<f32>(x_280.x, x_280.y) + vec2<f32>(1.0f, 1.0f));
  let x_284 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_283.x, x_283.y, x_284.z, x_284.w);
  let x_286 : vec4<f32> = u_xlat3;
  let x_289 : vec2<f32> = (vec2<f32>(x_286.x, x_286.y) * vec2<f32>(0.5f, 0.5f));
  let x_290 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_289.x, x_289.y, x_290.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat3;
  let x_296 : vec2<f32> = clamp(vec2<f32>(x_292.x, x_292.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_297 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_296.x, x_296.y, x_297.z, x_297.w);
  let x_302 : vec4<f32> = u_xlat3;
  let x_305 : f32 = x_34.x_GlobalMipBias.x;
  let x_306 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_302.x, x_302.y), x_305);
  u_xlat22 = x_306.x;
  let x_309 : f32 = u_xlat7.x;
  let x_311 : f32 = u_xlat22;
  let x_314 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_309) * x_311) + x_314);
  let x_317 : f32 = u_xlat0;
  let x_318 : f32 = u_xlat23;
  u_xlat17 = (x_317 + -(x_318));
  let x_322 : f32 = u_xlat17;
  let x_325 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_322) < x_325);
  let x_327 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_327);
  let x_329 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_329);
  let x_331 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_331);
  let x_333 : f32 = u_xlat22;
  let x_334 : f32 = u_xlat17;
  u_xlat22 = (x_333 * x_334);
  let x_337 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_337) + 1.0f);
  let x_341 : f32 = u_xlat23;
  let x_343 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_341 * x_343);
  let x_346 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_348 : vec4<f32> = u_xlat3;
  let x_352 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_354 : vec3<f32> = ((vec3<f32>(x_346.x, x_346.y, x_346.z) * vec3<f32>(x_348.x, x_348.x, x_348.x)) + vec3<f32>(x_352.x, x_352.y, x_352.z));
  let x_355 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_354.x, x_355.y, x_354.y, x_354.z);
  let x_358 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_360 : vec3<f32> = u_xlat10;
  let x_363 : vec4<f32> = u_xlat3;
  let x_365 : vec3<f32> = ((vec3<f32>(x_358.x, x_358.y, x_358.z) * vec3<f32>(x_360.x, x_360.x, x_360.x)) + vec3<f32>(x_363.x, x_363.z, x_363.w));
  let x_366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_365.x, x_365.y, x_365.z, x_366.w);
  let x_369 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_371 : f32 = u_xlat23;
  let x_374 : vec4<f32> = u_xlat3;
  let x_376 : vec3<f32> = ((vec3<f32>(x_369.x, x_369.y, x_369.z) * vec3<f32>(x_371, x_371, x_371)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_377 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_376.x, x_376.y, x_376.z, x_377.w);
  let x_379 : vec3<f32> = u_xlat2;
  let x_381 : vec4<f32> = u_xlat3;
  let x_383 : vec3<f32> = (-(x_379) + vec3<f32>(x_381.x, x_381.y, x_381.z));
  let x_384 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_383.x, x_383.y, x_383.z, x_384.w);
  let x_386 : vec4<f32> = u_xlat3;
  let x_388 : vec3<f32> = u_xlat1;
  u_xlat23 = dot(vec3<f32>(x_386.x, x_386.y, x_386.z), x_388);
  let x_390 : f32 = u_xlat0;
  let x_394 : f32 = u_xlat23;
  u_xlat23 = ((-(x_390) * 0.004f) + x_394);
  let x_396 : f32 = u_xlat23;
  u_xlat23 = max(x_396, 0.0f);
  let x_398 : vec4<f32> = u_xlat3;
  let x_400 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_398.x, x_398.y, x_398.z), vec3<f32>(x_400.x, x_400.y, x_400.z));
  let x_405 : f32 = u_xlat3.x;
  u_xlat3.x = (x_405 + 0.0001f);
  let x_410 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_410);
  let x_413 : f32 = u_xlat23;
  let x_415 : f32 = u_xlat3.x;
  u_xlat23 = (x_413 * x_415);
  let x_417 : vec2<f32> = u_xlat14;
  let x_420 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_417.x, x_417.y, x_417.x, x_417.y) * vec4<f32>(x_420.x, x_420.y, x_420.x, x_420.y)) + vec4<f32>(0.125f, 0.125f, 0.25f, 0.25f));
  let x_430 : vec4<f32> = u_xlat3;
  let x_433 : f32 = x_34.x_GlobalMipBias.x;
  let x_434 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_430.x, x_430.y), x_433);
  u_xlat3.x = x_434.w;
  let x_437 : vec4<f32> = u_xlat3;
  let x_442 : vec2<f32> = (vec2<f32>(x_437.x, x_437.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_442.x, x_442.y, x_443.z, x_443.w);
  let x_446 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_446);
  let x_450 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_450 * 2.0f) + -1.0f);
  let x_455 : f32 = u_xlat3.y;
  u_xlat3.x = (x_455 * 628.31854248f);
  let x_459 : f32 = u_xlat4.z;
  let x_462 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_459) * x_462) + 1.0f);
  let x_467 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_467);
  let x_471 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_471);
  let x_475 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_475);
  let x_479 : f32 = u_xlat10.x;
  let x_481 : f32 = u_xlat5.x;
  u_xlat4.x = (x_479 * x_481);
  let x_485 : f32 = u_xlat3.x;
  let x_487 : f32 = u_xlat10.x;
  u_xlat4.y = (x_485 * x_487);
  let x_490 : vec3<f32> = u_xlat1;
  let x_491 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(x_490, x_491);
  let x_496 : f32 = u_xlat3.x;
  u_xlatb3 = (x_496 >= 0.0f);
  let x_498 : bool = u_xlatb3;
  u_xlat3.x = select(-1.0f, 1.0f, x_498);
  let x_501 : vec4<f32> = u_xlat3;
  let x_503 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_501.x, x_501.x, x_501.x) * x_503);
  let x_505 : vec3<f32> = u_xlat4;
  let x_507 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_505 * vec3<f32>(x_507.y, x_507.y, x_507.y));
  let x_510 : vec3<f32> = u_xlat4;
  let x_514 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_510 * vec3<f32>(0.114062503f, 0.114062503f, 0.114062503f)) + x_514);
  let x_516 : vec3<f32> = u_xlat4;
  let x_519 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_521 : vec2<f32> = (vec2<f32>(x_516.y, x_516.y) * vec2<f32>(x_519.x, x_519.y));
  let x_522 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_521.x, x_521.y, x_522.z, x_522.w);
  let x_525 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_527 : vec3<f32> = u_xlat4;
  let x_530 : vec4<f32> = u_xlat3;
  let x_532 : vec2<f32> = ((vec2<f32>(x_525.x, x_525.y) * vec2<f32>(x_527.x, x_527.x)) + vec2<f32>(x_530.x, x_530.y));
  let x_533 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
  let x_536 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_538 : vec3<f32> = u_xlat4;
  let x_541 : vec4<f32> = u_xlat3;
  let x_543 : vec2<f32> = ((vec2<f32>(x_536.x, x_536.y) * vec2<f32>(x_538.z, x_538.z)) + vec2<f32>(x_541.x, x_541.y));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_544.z, x_544.w);
  let x_546 : vec4<f32> = u_xlat3;
  let x_548 : vec2<f32> = (vec2<f32>(x_546.x, x_546.y) + vec2<f32>(1.0f, 1.0f));
  let x_549 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_548.x, x_548.y, x_549.z, x_549.w);
  let x_551 : vec4<f32> = u_xlat3;
  let x_553 : vec2<f32> = (vec2<f32>(x_551.x, x_551.y) * vec2<f32>(0.5f, 0.5f));
  let x_554 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_553.x, x_553.y, x_554.z, x_554.w);
  let x_556 : vec4<f32> = u_xlat3;
  let x_560 : vec2<f32> = clamp(vec2<f32>(x_556.x, x_556.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_561 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_560.x, x_560.y, x_561.z, x_561.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_569 : f32 = x_34.x_GlobalMipBias.x;
  let x_570 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_566.x, x_566.y), x_569);
  u_xlat4.x = x_570.x;
  let x_575 : f32 = u_xlat7.x;
  let x_578 : f32 = u_xlat4.x;
  let x_581 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_575) * x_578) + x_581);
  let x_585 : f32 = u_xlat0;
  let x_587 : f32 = u_xlat11.x;
  u_xlat18 = (x_585 + -(x_587));
  let x_593 : f32 = u_xlat18;
  let x_596 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_593) < x_596);
  let x_600 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_600);
  let x_604 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_604);
  let x_608 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_608);
  let x_612 : f32 = u_xlat4.x;
  let x_614 : f32 = u_xlat4.z;
  u_xlat4.x = (x_612 * x_614);
  let x_618 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_618) + 1.0f);
  let x_623 : f32 = u_xlat11.x;
  let x_625 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_623 * x_625);
  let x_629 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_631 : vec4<f32> = u_xlat3;
  let x_635 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_629.x, x_629.y, x_629.z) * vec3<f32>(x_631.x, x_631.x, x_631.x)) + vec3<f32>(x_635.x, x_635.y, x_635.z));
  let x_639 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_641 : vec3<f32> = u_xlat10;
  let x_644 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_639.x, x_639.y, x_639.z) * vec3<f32>(x_641.x, x_641.x, x_641.x)) + x_644);
  let x_647 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_649 : vec3<f32> = u_xlat11;
  let x_652 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_647.x, x_647.y, x_647.z) * vec3<f32>(x_649.x, x_649.x, x_649.x)) + x_652);
  let x_654 : vec3<f32> = u_xlat2;
  let x_656 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_654) + x_656);
  let x_658 : vec3<f32> = u_xlat11;
  let x_659 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_658, x_659);
  let x_662 : f32 = u_xlat0;
  let x_666 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_662) * 0.004f) + x_666);
  let x_670 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_670, 0.0f);
  let x_673 : vec3<f32> = u_xlat11;
  let x_674 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_673, x_674);
  let x_678 : f32 = u_xlat10.x;
  u_xlat10.x = (x_678 + 0.0001f);
  let x_682 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_682);
  let x_686 : f32 = u_xlat10.x;
  let x_688 : f32 = u_xlat3.x;
  u_xlat3.x = (x_686 * x_688);
  let x_692 : f32 = u_xlat4.x;
  let x_694 : f32 = u_xlat3.x;
  u_xlat3.x = (x_692 * x_694);
  let x_697 : f32 = u_xlat23;
  let x_698 : f32 = u_xlat22;
  let x_701 : f32 = u_xlat3.x;
  u_xlat22 = ((x_697 * x_698) + x_701);
  let x_706 : vec4<f32> = u_xlat3;
  let x_709 : f32 = x_34.x_GlobalMipBias.x;
  let x_710 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_706.z, x_706.w), x_709);
  u_xlat23 = x_710.w;
  let x_712 : f32 = u_xlat23;
  let x_717 : vec2<f32> = (vec2<f32>(x_712, x_712) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_718 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_717.x, x_717.y, x_718.z, x_718.w);
  let x_721 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_721);
  let x_723 : f32 = u_xlat23;
  u_xlat4.z = ((x_723 * 2.0f) + -1.0f);
  let x_728 : f32 = u_xlat3.y;
  u_xlat23 = (x_728 * 628.31854248f);
  let x_731 : f32 = u_xlat4.z;
  let x_734 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_731) * x_734) + 1.0f);
  let x_739 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_739);
  let x_742 : f32 = u_xlat23;
  u_xlat5.x = sin(x_742);
  let x_746 : f32 = u_xlat23;
  u_xlat6 = cos(x_746);
  let x_749 : f32 = u_xlat3.x;
  let x_750 : f32 = u_xlat6;
  u_xlat4.x = (x_749 * x_750);
  let x_754 : f32 = u_xlat3.x;
  let x_756 : f32 = u_xlat5.x;
  u_xlat4.y = (x_754 * x_756);
  let x_759 : vec3<f32> = u_xlat1;
  let x_760 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_759, x_760);
  let x_763 : f32 = u_xlat23;
  u_xlatb23 = (x_763 >= 0.0f);
  let x_765 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_765);
  let x_767 : f32 = u_xlat23;
  let x_769 : vec3<f32> = u_xlat4;
  let x_770 : vec3<f32> = (vec3<f32>(x_767, x_767, x_767) * x_769);
  let x_771 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_770.x, x_770.y, x_770.z, x_771.w);
  let x_773 : vec4<f32> = u_xlat3;
  let x_776 : vec4<f32> = x_34.x_SSAOParams;
  let x_778 : vec3<f32> = (vec3<f32>(x_773.x, x_773.y, x_773.z) * vec3<f32>(x_776.y, x_776.y, x_776.y));
  let x_779 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_778.x, x_778.y, x_778.z, x_779.w);
  let x_781 : vec4<f32> = u_xlat3;
  let x_786 : vec3<f32> = u_xlat2;
  let x_787 : vec3<f32> = ((vec3<f32>(x_781.x, x_781.y, x_781.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_786);
  let x_788 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_787.x, x_787.y, x_787.z, x_788.w);
  let x_790 : vec4<f32> = u_xlat3;
  let x_793 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_795 : vec2<f32> = (vec2<f32>(x_790.y, x_790.y) * vec2<f32>(x_793.x, x_793.y));
  let x_796 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_795.x, x_796.y, x_795.y);
  let x_799 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_801 : vec4<f32> = u_xlat3;
  let x_804 : vec3<f32> = u_xlat10;
  let x_806 : vec2<f32> = ((vec2<f32>(x_799.x, x_799.y) * vec2<f32>(x_801.x, x_801.x)) + vec2<f32>(x_804.x, x_804.z));
  let x_807 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_806.x, x_806.y, x_807.z, x_807.w);
  let x_810 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_812 : vec4<f32> = u_xlat3;
  let x_815 : vec4<f32> = u_xlat3;
  let x_817 : vec2<f32> = ((vec2<f32>(x_810.x, x_810.y) * vec2<f32>(x_812.z, x_812.z)) + vec2<f32>(x_815.x, x_815.y));
  let x_818 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_817.x, x_817.y, x_818.z, x_818.w);
  let x_820 : vec4<f32> = u_xlat3;
  let x_822 : vec2<f32> = (vec2<f32>(x_820.x, x_820.y) + vec2<f32>(1.0f, 1.0f));
  let x_823 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_822.x, x_822.y, x_823.z, x_823.w);
  let x_825 : vec4<f32> = u_xlat3;
  let x_827 : vec2<f32> = (vec2<f32>(x_825.x, x_825.y) * vec2<f32>(0.5f, 0.5f));
  let x_828 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_827.x, x_827.y, x_828.z, x_828.w);
  let x_830 : vec4<f32> = u_xlat3;
  let x_834 : vec2<f32> = clamp(vec2<f32>(x_830.x, x_830.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_835 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_834.x, x_834.y, x_835.z, x_835.w);
  let x_840 : vec4<f32> = u_xlat3;
  let x_843 : f32 = x_34.x_GlobalMipBias.x;
  let x_844 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_840.x, x_840.y), x_843);
  u_xlat23 = x_844.x;
  let x_847 : f32 = u_xlat7.x;
  let x_849 : f32 = u_xlat23;
  let x_852 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_847) * x_849) + x_852);
  let x_855 : f32 = u_xlat0;
  let x_856 : f32 = u_xlat17;
  u_xlat24 = (x_855 + -(x_856));
  let x_860 : f32 = u_xlat24;
  let x_863 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_860) < x_863);
  let x_865 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_865);
  let x_867 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_867);
  let x_869 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_869);
  let x_871 : f32 = u_xlat23;
  let x_872 : f32 = u_xlat24;
  u_xlat23 = (x_871 * x_872);
  let x_875 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_875) + 1.0f);
  let x_879 : f32 = u_xlat17;
  let x_881 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_879 * x_881);
  let x_884 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_886 : vec4<f32> = u_xlat3;
  let x_890 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_884.x, x_884.y, x_884.z) * vec3<f32>(x_886.x, x_886.x, x_886.x)) + vec3<f32>(x_890.x, x_890.y, x_890.z));
  let x_894 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_896 : vec3<f32> = u_xlat10;
  let x_899 : vec3<f32> = u_xlat4;
  let x_900 : vec3<f32> = ((vec3<f32>(x_894.x, x_894.y, x_894.z) * vec3<f32>(x_896.x, x_896.x, x_896.x)) + x_899);
  let x_901 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_900.x, x_900.y, x_901.z, x_900.z);
  let x_904 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_906 : f32 = u_xlat17;
  let x_909 : vec4<f32> = u_xlat3;
  let x_911 : vec3<f32> = ((vec3<f32>(x_904.x, x_904.y, x_904.z) * vec3<f32>(x_906, x_906, x_906)) + vec3<f32>(x_909.x, x_909.y, x_909.w));
  let x_912 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_911.x, x_911.y, x_911.z, x_912.w);
  let x_914 : vec3<f32> = u_xlat2;
  let x_916 : vec4<f32> = u_xlat3;
  let x_918 : vec3<f32> = (-(x_914) + vec3<f32>(x_916.x, x_916.y, x_916.z));
  let x_919 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_918.x, x_918.y, x_918.z, x_919.w);
  let x_921 : vec4<f32> = u_xlat3;
  let x_923 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_921.x, x_921.y, x_921.z), x_923);
  let x_925 : f32 = u_xlat0;
  let x_928 : f32 = u_xlat24;
  u_xlat24 = ((-(x_925) * 0.004f) + x_928);
  let x_930 : f32 = u_xlat24;
  u_xlat24 = max(x_930, 0.0f);
  let x_932 : vec4<f32> = u_xlat3;
  let x_934 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_932.x, x_932.y, x_932.z), vec3<f32>(x_934.x, x_934.y, x_934.z));
  let x_939 : f32 = u_xlat3.x;
  u_xlat3.x = (x_939 + 0.0001f);
  let x_943 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_943);
  let x_947 : f32 = u_xlat3.x;
  let x_948 : f32 = u_xlat24;
  u_xlat3.x = (x_947 * x_948);
  let x_952 : f32 = u_xlat3.x;
  let x_953 : f32 = u_xlat23;
  let x_955 : f32 = u_xlat22;
  u_xlat22 = ((x_952 * x_953) + x_955);
  let x_957 : vec2<f32> = u_xlat14;
  let x_960 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_957.x, x_957.y, x_957.x, x_957.y) * vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y)) + vec4<f32>(0.375f, 0.375f, 0.5f, 0.5f));
  let x_969 : vec4<f32> = u_xlat3;
  let x_972 : f32 = x_34.x_GlobalMipBias.x;
  let x_973 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_969.x, x_969.y), x_972);
  u_xlat23 = x_973.w;
  let x_975 : f32 = u_xlat23;
  let x_980 : vec2<f32> = (vec2<f32>(x_975, x_975) + vec2<f32>(0.56640625f, 0.015625f));
  let x_981 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_980.x, x_980.y, x_981.z, x_981.w);
  let x_984 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_984);
  let x_986 : f32 = u_xlat23;
  u_xlat4.z = ((x_986 * 2.0f) + -1.0f);
  let x_991 : f32 = u_xlat3.y;
  u_xlat23 = (x_991 * 628.31854248f);
  let x_994 : f32 = u_xlat4.z;
  let x_997 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_994) * x_997) + 1.0f);
  let x_1002 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1002);
  let x_1005 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1005);
  let x_1008 : f32 = u_xlat23;
  u_xlat6 = cos(x_1008);
  let x_1011 : f32 = u_xlat3.x;
  let x_1012 : f32 = u_xlat6;
  u_xlat4.x = (x_1011 * x_1012);
  let x_1016 : f32 = u_xlat3.x;
  let x_1018 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1016 * x_1018);
  let x_1021 : vec3<f32> = u_xlat1;
  let x_1022 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1021, x_1022);
  let x_1024 : f32 = u_xlat23;
  u_xlatb23 = (x_1024 >= 0.0f);
  let x_1026 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1026);
  let x_1028 : f32 = u_xlat23;
  let x_1030 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1028, x_1028, x_1028) * x_1030);
  let x_1032 : vec3<f32> = u_xlat4;
  let x_1034 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1032 * vec3<f32>(x_1034.y, x_1034.y, x_1034.y));
  let x_1037 : vec3<f32> = u_xlat4;
  let x_1041 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_1037 * vec3<f32>(0.2265625f, 0.2265625f, 0.2265625f)) + x_1041);
  let x_1043 : vec3<f32> = u_xlat4;
  let x_1046 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1048 : vec2<f32> = (vec2<f32>(x_1043.y, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y));
  let x_1049 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1048.x, x_1048.y, x_1049.z, x_1049.w);
  let x_1052 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1054 : vec3<f32> = u_xlat4;
  let x_1057 : vec4<f32> = u_xlat3;
  let x_1059 : vec2<f32> = ((vec2<f32>(x_1052.x, x_1052.y) * vec2<f32>(x_1054.x, x_1054.x)) + vec2<f32>(x_1057.x, x_1057.y));
  let x_1060 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1059.x, x_1059.y, x_1060.z, x_1060.w);
  let x_1063 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1065 : vec3<f32> = u_xlat4;
  let x_1068 : vec4<f32> = u_xlat3;
  let x_1070 : vec2<f32> = ((vec2<f32>(x_1063.x, x_1063.y) * vec2<f32>(x_1065.z, x_1065.z)) + vec2<f32>(x_1068.x, x_1068.y));
  let x_1071 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1070.x, x_1070.y, x_1071.z, x_1071.w);
  let x_1073 : vec4<f32> = u_xlat3;
  let x_1075 : vec2<f32> = (vec2<f32>(x_1073.x, x_1073.y) + vec2<f32>(1.0f, 1.0f));
  let x_1076 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1075.x, x_1075.y, x_1076.z, x_1076.w);
  let x_1078 : vec4<f32> = u_xlat3;
  let x_1080 : vec2<f32> = (vec2<f32>(x_1078.x, x_1078.y) * vec2<f32>(0.5f, 0.5f));
  let x_1081 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1080.x, x_1080.y, x_1081.z, x_1081.w);
  let x_1083 : vec4<f32> = u_xlat3;
  let x_1087 : vec2<f32> = clamp(vec2<f32>(x_1083.x, x_1083.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1088 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1087.x, x_1087.y, x_1088.z, x_1088.w);
  let x_1093 : vec4<f32> = u_xlat3;
  let x_1096 : f32 = x_34.x_GlobalMipBias.x;
  let x_1097 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1093.x, x_1093.y), x_1096);
  u_xlat23 = x_1097.x;
  let x_1100 : f32 = u_xlat7.x;
  let x_1102 : f32 = u_xlat23;
  let x_1105 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1100) * x_1102) + x_1105);
  let x_1108 : f32 = u_xlat0;
  let x_1110 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1108 + -(x_1110));
  let x_1116 : f32 = u_xlat11.x;
  let x_1119 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1116) < x_1119);
  let x_1121 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1121);
  let x_1124 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1124);
  let x_1126 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1126);
  let x_1128 : f32 = u_xlat23;
  let x_1130 : f32 = u_xlat11.x;
  u_xlat23 = (x_1128 * x_1130);
  let x_1133 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1133) + 1.0f);
  let x_1138 : f32 = u_xlat4.x;
  let x_1140 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1138 * x_1140);
  let x_1144 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1146 : vec4<f32> = u_xlat3;
  let x_1150 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1144.x, x_1144.y, x_1144.z) * vec3<f32>(x_1146.x, x_1146.x, x_1146.x)) + vec3<f32>(x_1150.x, x_1150.y, x_1150.z));
  let x_1154 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1156 : vec3<f32> = u_xlat10;
  let x_1159 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1154.x, x_1154.y, x_1154.z) * vec3<f32>(x_1156.x, x_1156.x, x_1156.x)) + x_1159);
  let x_1162 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1164 : vec3<f32> = u_xlat4;
  let x_1167 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1162.x, x_1162.y, x_1162.z) * vec3<f32>(x_1164.x, x_1164.x, x_1164.x)) + x_1167);
  let x_1169 : vec3<f32> = u_xlat2;
  let x_1171 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1169) + x_1171);
  let x_1173 : vec3<f32> = u_xlat4;
  let x_1174 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_1173, x_1174);
  let x_1177 : f32 = u_xlat0;
  let x_1181 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1177) * 0.004f) + x_1181);
  let x_1185 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1185, 0.0f);
  let x_1188 : vec3<f32> = u_xlat4;
  let x_1189 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1188, x_1189);
  let x_1193 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1193 + 0.0001f);
  let x_1197 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1197);
  let x_1201 : f32 = u_xlat10.x;
  let x_1203 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1201 * x_1203);
  let x_1207 : f32 = u_xlat3.x;
  let x_1208 : f32 = u_xlat23;
  let x_1210 : f32 = u_xlat22;
  u_xlat22 = ((x_1207 * x_1208) + x_1210);
  let x_1215 : vec4<f32> = u_xlat3;
  let x_1218 : f32 = x_34.x_GlobalMipBias.x;
  let x_1219 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1215.z, x_1215.w), x_1218);
  u_xlat23 = x_1219.w;
  let x_1221 : f32 = u_xlat23;
  u_xlat3.x = (x_1221 + 0.984375f);
  let x_1226 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1226);
  let x_1230 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1230 * 2.0f) + -1.0f);
  let x_1234 : f32 = u_xlat23;
  u_xlat23 = (x_1234 * 628.31854248f);
  let x_1237 : f32 = u_xlat3.z;
  let x_1240 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1237) * x_1240) + 1.0f);
  let x_1243 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1243);
  let x_1245 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1245);
  let x_1248 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1248);
  let x_1251 : f32 = u_xlat24;
  let x_1253 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1251 * x_1253);
  let x_1256 : f32 = u_xlat24;
  let x_1258 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1256 * x_1258);
  let x_1261 : vec3<f32> = u_xlat1;
  let x_1262 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(x_1261, vec3<f32>(x_1262.x, x_1262.y, x_1262.z));
  let x_1265 : f32 = u_xlat23;
  u_xlatb23 = (x_1265 >= 0.0f);
  let x_1267 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1267);
  let x_1269 : f32 = u_xlat23;
  let x_1271 : vec4<f32> = u_xlat3;
  let x_1273 : vec3<f32> = (vec3<f32>(x_1269, x_1269, x_1269) * vec3<f32>(x_1271.x, x_1271.y, x_1271.z));
  let x_1274 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1273.x, x_1273.y, x_1273.z, x_1274.w);
  let x_1276 : vec4<f32> = u_xlat3;
  let x_1279 : vec4<f32> = x_34.x_SSAOParams;
  let x_1281 : vec3<f32> = (vec3<f32>(x_1276.x, x_1276.y, x_1276.z) * vec3<f32>(x_1279.y, x_1279.y, x_1279.y));
  let x_1282 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1281.x, x_1281.y, x_1281.z, x_1282.w);
  let x_1284 : vec4<f32> = u_xlat3;
  let x_1289 : vec3<f32> = u_xlat2;
  let x_1290 : vec3<f32> = ((vec3<f32>(x_1284.x, x_1284.y, x_1284.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1289);
  let x_1291 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1290.x, x_1290.y, x_1290.z, x_1291.w);
  let x_1293 : vec4<f32> = u_xlat3;
  let x_1296 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1298 : vec2<f32> = (vec2<f32>(x_1293.y, x_1293.y) * vec2<f32>(x_1296.x, x_1296.y));
  let x_1299 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1298.x, x_1299.y, x_1298.y);
  let x_1302 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1304 : vec4<f32> = u_xlat3;
  let x_1307 : vec3<f32> = u_xlat10;
  let x_1309 : vec2<f32> = ((vec2<f32>(x_1302.x, x_1302.y) * vec2<f32>(x_1304.x, x_1304.x)) + vec2<f32>(x_1307.x, x_1307.z));
  let x_1310 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1309.x, x_1309.y, x_1310.z, x_1310.w);
  let x_1313 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1315 : vec4<f32> = u_xlat3;
  let x_1318 : vec4<f32> = u_xlat3;
  let x_1320 : vec2<f32> = ((vec2<f32>(x_1313.x, x_1313.y) * vec2<f32>(x_1315.z, x_1315.z)) + vec2<f32>(x_1318.x, x_1318.y));
  let x_1321 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1320.x, x_1320.y, x_1321.z, x_1321.w);
  let x_1323 : vec4<f32> = u_xlat3;
  let x_1325 : vec2<f32> = (vec2<f32>(x_1323.x, x_1323.y) + vec2<f32>(1.0f, 1.0f));
  let x_1326 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1325.x, x_1325.y, x_1326.z, x_1326.w);
  let x_1328 : vec4<f32> = u_xlat3;
  let x_1330 : vec2<f32> = (vec2<f32>(x_1328.x, x_1328.y) * vec2<f32>(0.5f, 0.5f));
  let x_1331 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1330.x, x_1330.y, x_1331.z, x_1331.w);
  let x_1333 : vec4<f32> = u_xlat3;
  let x_1337 : vec2<f32> = clamp(vec2<f32>(x_1333.x, x_1333.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1338 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1337.x, x_1337.y, x_1338.z, x_1338.w);
  let x_1343 : vec4<f32> = u_xlat3;
  let x_1346 : f32 = x_34.x_GlobalMipBias.x;
  let x_1347 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1343.x, x_1343.y), x_1346);
  u_xlat23 = x_1347.x;
  let x_1350 : f32 = u_xlat7.x;
  let x_1352 : f32 = u_xlat23;
  let x_1355 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1350) * x_1352) + x_1355);
  let x_1357 : f32 = u_xlat0;
  let x_1358 : f32 = u_xlat17;
  u_xlat24 = (x_1357 + -(x_1358));
  let x_1361 : f32 = u_xlat24;
  let x_1364 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1361) < x_1364);
  let x_1366 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1366);
  let x_1368 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1368);
  let x_1370 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1370);
  let x_1372 : f32 = u_xlat23;
  let x_1373 : f32 = u_xlat24;
  u_xlat23 = (x_1372 * x_1373);
  let x_1376 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1376) + 1.0f);
  let x_1380 : f32 = u_xlat17;
  let x_1382 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1380 * x_1382);
  let x_1385 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1387 : vec4<f32> = u_xlat3;
  let x_1391 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1385.x, x_1385.y, x_1385.z) * vec3<f32>(x_1387.x, x_1387.x, x_1387.x)) + vec3<f32>(x_1391.x, x_1391.y, x_1391.z));
  let x_1395 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1397 : vec3<f32> = u_xlat10;
  let x_1400 : vec3<f32> = u_xlat4;
  let x_1401 : vec3<f32> = ((vec3<f32>(x_1395.x, x_1395.y, x_1395.z) * vec3<f32>(x_1397.x, x_1397.x, x_1397.x)) + x_1400);
  let x_1402 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1401.x, x_1401.y, x_1402.z, x_1401.z);
  let x_1405 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1407 : f32 = u_xlat17;
  let x_1410 : vec4<f32> = u_xlat3;
  let x_1412 : vec3<f32> = ((vec3<f32>(x_1405.x, x_1405.y, x_1405.z) * vec3<f32>(x_1407, x_1407, x_1407)) + vec3<f32>(x_1410.x, x_1410.y, x_1410.w));
  let x_1413 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1412.x, x_1412.y, x_1412.z, x_1413.w);
  let x_1415 : vec3<f32> = u_xlat2;
  let x_1417 : vec4<f32> = u_xlat3;
  let x_1419 : vec3<f32> = (-(x_1415) + vec3<f32>(x_1417.x, x_1417.y, x_1417.z));
  let x_1420 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1419.x, x_1419.y, x_1419.z, x_1420.w);
  let x_1422 : vec4<f32> = u_xlat3;
  let x_1424 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_1422.x, x_1422.y, x_1422.z), x_1424);
  let x_1426 : f32 = u_xlat0;
  let x_1429 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1426) * 0.004f) + x_1429);
  let x_1431 : f32 = u_xlat24;
  u_xlat24 = max(x_1431, 0.0f);
  let x_1433 : vec4<f32> = u_xlat3;
  let x_1435 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1433.x, x_1433.y, x_1433.z), vec3<f32>(x_1435.x, x_1435.y, x_1435.z));
  let x_1440 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1440 + 0.0001f);
  let x_1444 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1444);
  let x_1448 : f32 = u_xlat3.x;
  let x_1449 : f32 = u_xlat24;
  u_xlat3.x = (x_1448 * x_1449);
  let x_1453 : f32 = u_xlat3.x;
  let x_1454 : f32 = u_xlat23;
  let x_1456 : f32 = u_xlat22;
  u_xlat22 = ((x_1453 * x_1454) + x_1456);
  let x_1458 : vec2<f32> = u_xlat14;
  let x_1461 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1458.x, x_1458.y, x_1458.x, x_1458.y) * vec4<f32>(x_1461.x, x_1461.y, x_1461.x, x_1461.y)) + vec4<f32>(0.625f, 0.625f, 0.75f, 0.75f));
  let x_1471 : vec4<f32> = u_xlat3;
  let x_1474 : f32 = x_34.x_GlobalMipBias.x;
  let x_1475 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1471.x, x_1471.y), x_1474);
  u_xlat23 = x_1475.w;
  let x_1477 : f32 = u_xlat23;
  let x_1482 : vec2<f32> = (vec2<f32>(x_1477, x_1477) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1483 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1482.x, x_1482.y, x_1483.z, x_1483.w);
  let x_1486 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1486);
  let x_1488 : f32 = u_xlat23;
  u_xlat4.z = ((x_1488 * 2.0f) + -1.0f);
  let x_1493 : f32 = u_xlat3.y;
  u_xlat23 = (x_1493 * 628.31854248f);
  let x_1496 : f32 = u_xlat4.z;
  let x_1499 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1496) * x_1499) + 1.0f);
  let x_1504 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1504);
  let x_1507 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1507);
  let x_1510 : f32 = u_xlat23;
  u_xlat6 = cos(x_1510);
  let x_1513 : f32 = u_xlat3.x;
  let x_1514 : f32 = u_xlat6;
  u_xlat4.x = (x_1513 * x_1514);
  let x_1518 : f32 = u_xlat3.x;
  let x_1520 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1518 * x_1520);
  let x_1523 : vec3<f32> = u_xlat1;
  let x_1524 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1523, x_1524);
  let x_1526 : f32 = u_xlat23;
  u_xlatb23 = (x_1526 >= 0.0f);
  let x_1528 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1528);
  let x_1530 : f32 = u_xlat23;
  let x_1532 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1530, x_1530, x_1530) * x_1532);
  let x_1534 : vec3<f32> = u_xlat4;
  let x_1536 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1534 * vec3<f32>(x_1536.y, x_1536.y, x_1536.y));
  let x_1539 : vec3<f32> = u_xlat4;
  let x_1543 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_1539 * vec3<f32>(0.451562494f, 0.451562494f, 0.451562494f)) + x_1543);
  let x_1545 : vec3<f32> = u_xlat4;
  let x_1548 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1550 : vec2<f32> = (vec2<f32>(x_1545.y, x_1545.y) * vec2<f32>(x_1548.x, x_1548.y));
  let x_1551 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1550.x, x_1550.y, x_1551.z, x_1551.w);
  let x_1554 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1556 : vec3<f32> = u_xlat4;
  let x_1559 : vec4<f32> = u_xlat3;
  let x_1561 : vec2<f32> = ((vec2<f32>(x_1554.x, x_1554.y) * vec2<f32>(x_1556.x, x_1556.x)) + vec2<f32>(x_1559.x, x_1559.y));
  let x_1562 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1561.x, x_1561.y, x_1562.z, x_1562.w);
  let x_1565 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1567 : vec3<f32> = u_xlat4;
  let x_1570 : vec4<f32> = u_xlat3;
  let x_1572 : vec2<f32> = ((vec2<f32>(x_1565.x, x_1565.y) * vec2<f32>(x_1567.z, x_1567.z)) + vec2<f32>(x_1570.x, x_1570.y));
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1572.x, x_1572.y, x_1573.z, x_1573.w);
  let x_1575 : vec4<f32> = u_xlat3;
  let x_1577 : vec2<f32> = (vec2<f32>(x_1575.x, x_1575.y) + vec2<f32>(1.0f, 1.0f));
  let x_1578 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1577.x, x_1577.y, x_1578.z, x_1578.w);
  let x_1580 : vec4<f32> = u_xlat3;
  let x_1582 : vec2<f32> = (vec2<f32>(x_1580.x, x_1580.y) * vec2<f32>(0.5f, 0.5f));
  let x_1583 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1582.x, x_1582.y, x_1583.z, x_1583.w);
  let x_1585 : vec4<f32> = u_xlat3;
  let x_1589 : vec2<f32> = clamp(vec2<f32>(x_1585.x, x_1585.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1590 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1589.x, x_1589.y, x_1590.z, x_1590.w);
  let x_1595 : vec4<f32> = u_xlat3;
  let x_1598 : f32 = x_34.x_GlobalMipBias.x;
  let x_1599 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1595.x, x_1595.y), x_1598);
  u_xlat23 = x_1599.x;
  let x_1602 : f32 = u_xlat7.x;
  let x_1604 : f32 = u_xlat23;
  let x_1607 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1602) * x_1604) + x_1607);
  let x_1610 : f32 = u_xlat0;
  let x_1612 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1610 + -(x_1612));
  let x_1617 : f32 = u_xlat11.x;
  let x_1620 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1617) < x_1620);
  let x_1622 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1622);
  let x_1625 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1625);
  let x_1627 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1627);
  let x_1629 : f32 = u_xlat23;
  let x_1631 : f32 = u_xlat11.x;
  u_xlat23 = (x_1629 * x_1631);
  let x_1634 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1634) + 1.0f);
  let x_1639 : f32 = u_xlat4.x;
  let x_1641 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1639 * x_1641);
  let x_1645 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1647 : vec4<f32> = u_xlat3;
  let x_1651 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1645.x, x_1645.y, x_1645.z) * vec3<f32>(x_1647.x, x_1647.x, x_1647.x)) + vec3<f32>(x_1651.x, x_1651.y, x_1651.z));
  let x_1655 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1657 : vec3<f32> = u_xlat10;
  let x_1660 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1655.x, x_1655.y, x_1655.z) * vec3<f32>(x_1657.x, x_1657.x, x_1657.x)) + x_1660);
  let x_1663 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1665 : vec3<f32> = u_xlat4;
  let x_1668 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1663.x, x_1663.y, x_1663.z) * vec3<f32>(x_1665.x, x_1665.x, x_1665.x)) + x_1668);
  let x_1670 : vec3<f32> = u_xlat2;
  let x_1672 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1670) + x_1672);
  let x_1674 : vec3<f32> = u_xlat4;
  let x_1675 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_1674, x_1675);
  let x_1678 : f32 = u_xlat0;
  let x_1682 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1678) * 0.004f) + x_1682);
  let x_1686 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1686, 0.0f);
  let x_1689 : vec3<f32> = u_xlat4;
  let x_1690 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1689, x_1690);
  let x_1694 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1694 + 0.0001f);
  let x_1698 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1698);
  let x_1702 : f32 = u_xlat10.x;
  let x_1704 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1702 * x_1704);
  let x_1708 : f32 = u_xlat3.x;
  let x_1709 : f32 = u_xlat23;
  let x_1711 : f32 = u_xlat22;
  u_xlat22 = ((x_1708 * x_1709) + x_1711);
  let x_1716 : vec4<f32> = u_xlat3;
  let x_1719 : f32 = x_34.x_GlobalMipBias.x;
  let x_1720 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1716.z, x_1716.w), x_1719);
  u_xlat23 = x_1720.w;
  let x_1722 : f32 = u_xlat23;
  let x_1727 : vec2<f32> = (vec2<f32>(x_1722, x_1722) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1728 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1727.x, x_1727.y, x_1728.z, x_1728.w);
  let x_1731 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1731);
  let x_1733 : f32 = u_xlat23;
  u_xlat4.z = ((x_1733 * 2.0f) + -1.0f);
  let x_1738 : f32 = u_xlat3.y;
  u_xlat23 = (x_1738 * 628.31854248f);
  let x_1741 : f32 = u_xlat4.z;
  let x_1744 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1741) * x_1744) + 1.0f);
  let x_1749 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1749);
  let x_1752 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1752);
  let x_1755 : f32 = u_xlat23;
  u_xlat6 = cos(x_1755);
  let x_1758 : f32 = u_xlat3.x;
  let x_1759 : f32 = u_xlat6;
  u_xlat4.x = (x_1758 * x_1759);
  let x_1763 : f32 = u_xlat3.x;
  let x_1765 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1763 * x_1765);
  let x_1768 : vec3<f32> = u_xlat1;
  let x_1769 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1768, x_1769);
  let x_1771 : f32 = u_xlat23;
  u_xlatb23 = (x_1771 >= 0.0f);
  let x_1773 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1773);
  let x_1775 : f32 = u_xlat23;
  let x_1777 : vec3<f32> = u_xlat4;
  let x_1778 : vec3<f32> = (vec3<f32>(x_1775, x_1775, x_1775) * x_1777);
  let x_1779 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1778.x, x_1778.y, x_1778.z, x_1779.w);
  let x_1781 : vec4<f32> = u_xlat3;
  let x_1784 : vec4<f32> = x_34.x_SSAOParams;
  let x_1786 : vec3<f32> = (vec3<f32>(x_1781.x, x_1781.y, x_1781.z) * vec3<f32>(x_1784.y, x_1784.y, x_1784.y));
  let x_1787 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1786.x, x_1786.y, x_1786.z, x_1787.w);
  let x_1789 : vec4<f32> = u_xlat3;
  let x_1794 : vec3<f32> = u_xlat2;
  let x_1795 : vec3<f32> = ((vec3<f32>(x_1789.x, x_1789.y, x_1789.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1794);
  let x_1796 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1795.x, x_1795.y, x_1795.z, x_1796.w);
  let x_1798 : vec4<f32> = u_xlat3;
  let x_1801 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1803 : vec2<f32> = (vec2<f32>(x_1798.y, x_1798.y) * vec2<f32>(x_1801.x, x_1801.y));
  let x_1804 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1803.x, x_1804.y, x_1803.y);
  let x_1807 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1809 : vec4<f32> = u_xlat3;
  let x_1812 : vec3<f32> = u_xlat10;
  let x_1814 : vec2<f32> = ((vec2<f32>(x_1807.x, x_1807.y) * vec2<f32>(x_1809.x, x_1809.x)) + vec2<f32>(x_1812.x, x_1812.z));
  let x_1815 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1814.x, x_1814.y, x_1815.z, x_1815.w);
  let x_1818 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1820 : vec4<f32> = u_xlat3;
  let x_1823 : vec4<f32> = u_xlat3;
  let x_1825 : vec2<f32> = ((vec2<f32>(x_1818.x, x_1818.y) * vec2<f32>(x_1820.z, x_1820.z)) + vec2<f32>(x_1823.x, x_1823.y));
  let x_1826 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1825.x, x_1825.y, x_1826.z, x_1826.w);
  let x_1828 : vec4<f32> = u_xlat3;
  let x_1830 : vec2<f32> = (vec2<f32>(x_1828.x, x_1828.y) + vec2<f32>(1.0f, 1.0f));
  let x_1831 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1830.x, x_1830.y, x_1831.z, x_1831.w);
  let x_1833 : vec4<f32> = u_xlat3;
  let x_1835 : vec2<f32> = (vec2<f32>(x_1833.x, x_1833.y) * vec2<f32>(0.5f, 0.5f));
  let x_1836 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1835.x, x_1835.y, x_1836.z, x_1836.w);
  let x_1838 : vec4<f32> = u_xlat3;
  let x_1842 : vec2<f32> = clamp(vec2<f32>(x_1838.x, x_1838.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1843 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1843.z, x_1843.w);
  let x_1848 : vec4<f32> = u_xlat3;
  let x_1851 : f32 = x_34.x_GlobalMipBias.x;
  let x_1852 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1848.x, x_1848.y), x_1851);
  u_xlat23 = x_1852.x;
  let x_1855 : f32 = u_xlat7.x;
  let x_1857 : f32 = u_xlat23;
  let x_1860 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1855) * x_1857) + x_1860);
  let x_1862 : f32 = u_xlat0;
  let x_1863 : f32 = u_xlat17;
  u_xlat24 = (x_1862 + -(x_1863));
  let x_1866 : f32 = u_xlat24;
  let x_1869 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1866) < x_1869);
  let x_1871 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1871);
  let x_1873 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1873);
  let x_1875 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1875);
  let x_1877 : f32 = u_xlat23;
  let x_1878 : f32 = u_xlat24;
  u_xlat23 = (x_1877 * x_1878);
  let x_1881 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1881) + 1.0f);
  let x_1885 : f32 = u_xlat17;
  let x_1887 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1885 * x_1887);
  let x_1890 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1892 : vec4<f32> = u_xlat3;
  let x_1896 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1890.x, x_1890.y, x_1890.z) * vec3<f32>(x_1892.x, x_1892.x, x_1892.x)) + vec3<f32>(x_1896.x, x_1896.y, x_1896.z));
  let x_1900 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1902 : vec3<f32> = u_xlat10;
  let x_1905 : vec3<f32> = u_xlat4;
  let x_1906 : vec3<f32> = ((vec3<f32>(x_1900.x, x_1900.y, x_1900.z) * vec3<f32>(x_1902.x, x_1902.x, x_1902.x)) + x_1905);
  let x_1907 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1906.x, x_1906.y, x_1907.z, x_1906.z);
  let x_1910 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1912 : f32 = u_xlat17;
  let x_1915 : vec4<f32> = u_xlat3;
  let x_1917 : vec3<f32> = ((vec3<f32>(x_1910.x, x_1910.y, x_1910.z) * vec3<f32>(x_1912, x_1912, x_1912)) + vec3<f32>(x_1915.x, x_1915.y, x_1915.w));
  let x_1918 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1917.x, x_1917.y, x_1917.z, x_1918.w);
  let x_1920 : vec3<f32> = u_xlat2;
  let x_1922 : vec4<f32> = u_xlat3;
  let x_1924 : vec3<f32> = (-(x_1920) + vec3<f32>(x_1922.x, x_1922.y, x_1922.z));
  let x_1925 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1924.x, x_1924.y, x_1924.z, x_1925.w);
  let x_1927 : vec4<f32> = u_xlat3;
  let x_1929 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_1927.x, x_1927.y, x_1927.z), x_1929);
  let x_1931 : f32 = u_xlat0;
  let x_1934 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1931) * 0.004f) + x_1934);
  let x_1936 : f32 = u_xlat24;
  u_xlat24 = max(x_1936, 0.0f);
  let x_1938 : vec4<f32> = u_xlat3;
  let x_1940 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1938.x, x_1938.y, x_1938.z), vec3<f32>(x_1940.x, x_1940.y, x_1940.z));
  let x_1945 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1945 + 0.0001f);
  let x_1949 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1949);
  let x_1953 : f32 = u_xlat3.x;
  let x_1954 : f32 = u_xlat24;
  u_xlat3.x = (x_1953 * x_1954);
  let x_1958 : f32 = u_xlat3.x;
  let x_1959 : f32 = u_xlat23;
  let x_1961 : f32 = u_xlat22;
  u_xlat22 = ((x_1958 * x_1959) + x_1961);
  let x_1963 : vec2<f32> = u_xlat14;
  let x_1965 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = ((x_1963 * vec2<f32>(x_1965.x, x_1965.y)) + vec2<f32>(0.875f, 0.875f));
  let x_1974 : vec2<f32> = u_xlat14;
  let x_1976 : f32 = x_34.x_GlobalMipBias.x;
  let x_1977 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_1974, x_1976);
  u_xlat14.x = x_1977.w;
  let x_1980 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_1980.x, x_1980.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_1986 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1986);
  let x_1990 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_1990 * 2.0f) + -1.0f);
  let x_1995 : f32 = u_xlat14.y;
  u_xlat14.x = (x_1995 * 628.31854248f);
  let x_1999 : f32 = u_xlat3.z;
  let x_2002 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_1999) * x_2002) + 1.0f);
  let x_2005 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_2005);
  let x_2008 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_2008);
  let x_2012 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_2012);
  let x_2015 : f32 = u_xlat21;
  let x_2017 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2015 * x_2017);
  let x_2020 : f32 = u_xlat21;
  let x_2022 : f32 = u_xlat4.x;
  u_xlat3.y = (x_2020 * x_2022);
  let x_2025 : vec3<f32> = u_xlat1;
  let x_2026 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(x_2025, vec3<f32>(x_2026.x, x_2026.y, x_2026.z));
  let x_2031 : f32 = u_xlat14.x;
  u_xlatb14 = (x_2031 >= 0.0f);
  let x_2033 : bool = u_xlatb14;
  u_xlat14.x = select(-1.0f, 1.0f, x_2033);
  let x_2036 : vec2<f32> = u_xlat14;
  let x_2038 : vec4<f32> = u_xlat3;
  let x_2040 : vec3<f32> = (vec3<f32>(x_2036.x, x_2036.x, x_2036.x) * vec3<f32>(x_2038.x, x_2038.y, x_2038.z));
  let x_2041 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2040.x, x_2040.y, x_2040.z, x_2041.w);
  let x_2043 : vec4<f32> = u_xlat3;
  let x_2046 : vec4<f32> = x_34.x_SSAOParams;
  let x_2048 : vec3<f32> = (vec3<f32>(x_2043.x, x_2043.y, x_2043.z) * vec3<f32>(x_2046.y, x_2046.y, x_2046.y));
  let x_2049 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2048.x, x_2048.y, x_2048.z, x_2049.w);
  let x_2051 : vec4<f32> = u_xlat3;
  let x_2056 : vec3<f32> = u_xlat2;
  let x_2057 : vec3<f32> = ((vec3<f32>(x_2051.x, x_2051.y, x_2051.z) * vec3<f32>(0.7890625f, 0.7890625f, 0.7890625f)) + x_2056);
  let x_2058 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2057.x, x_2057.y, x_2057.z, x_2058.w);
  let x_2060 : vec4<f32> = u_xlat3;
  let x_2063 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_2060.y, x_2060.y) * vec2<f32>(x_2063.x, x_2063.y));
  let x_2067 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2069 : vec4<f32> = u_xlat3;
  let x_2072 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2067.x, x_2067.y) * vec2<f32>(x_2069.x, x_2069.x)) + x_2072);
  let x_2075 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2077 : vec4<f32> = u_xlat3;
  let x_2080 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2075.x, x_2075.y) * vec2<f32>(x_2077.z, x_2077.z)) + x_2080);
  let x_2082 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2082 + vec2<f32>(1.0f, 1.0f));
  let x_2084 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2084 * vec2<f32>(0.5f, 0.5f));
  let x_2086 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_2086, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2093 : vec2<f32> = u_xlat14;
  let x_2095 : f32 = x_34.x_GlobalMipBias.x;
  let x_2096 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2093, x_2095);
  u_xlat23 = x_2096.x;
  let x_2099 : f32 = u_xlat7.x;
  let x_2101 : f32 = u_xlat23;
  let x_2104 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_2099) * x_2101) + x_2104);
  let x_2108 : f32 = u_xlat7.x;
  let x_2110 : f32 = u_xlat0;
  u_xlat3.x = (-(x_2108) + x_2110);
  let x_2114 : f32 = u_xlat3.x;
  let x_2117 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_2114) < x_2117);
  let x_2119 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_2119);
  let x_2122 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2122);
  let x_2124 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2124);
  let x_2126 : f32 = u_xlat23;
  let x_2128 : f32 = u_xlat3.x;
  u_xlat23 = (x_2126 * x_2128);
  let x_2131 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_2131) + 1.0f);
  let x_2135 : f32 = u_xlat7.x;
  let x_2137 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_2135 * x_2137);
  let x_2141 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2143 : vec2<f32> = u_xlat14;
  let x_2147 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_2149 : vec3<f32> = ((vec3<f32>(x_2141.x, x_2141.y, x_2141.z) * vec3<f32>(x_2143.x, x_2143.x, x_2143.x)) + vec3<f32>(x_2147.x, x_2147.y, x_2147.z));
  let x_2150 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2149.x, x_2149.y, x_2149.z, x_2150.w);
  let x_2153 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2155 : f32 = u_xlat21;
  let x_2158 : vec4<f32> = u_xlat3;
  let x_2160 : vec3<f32> = ((vec3<f32>(x_2153.x, x_2153.y, x_2153.z) * vec3<f32>(x_2155, x_2155, x_2155)) + vec3<f32>(x_2158.x, x_2158.y, x_2158.z));
  let x_2161 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2160.x, x_2160.y, x_2160.z, x_2161.w);
  let x_2164 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2166 : vec3<f32> = u_xlat7;
  let x_2169 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_2164.x, x_2164.y, x_2164.z) * vec3<f32>(x_2166.x, x_2166.x, x_2166.x)) + vec3<f32>(x_2169.x, x_2169.y, x_2169.z));
  let x_2172 : vec3<f32> = u_xlat2;
  let x_2174 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_2172) + x_2174);
  let x_2176 : vec3<f32> = u_xlat7;
  let x_2177 : vec3<f32> = u_xlat1;
  u_xlat2.x = dot(x_2176, x_2177);
  let x_2180 : f32 = u_xlat0;
  let x_2184 : f32 = u_xlat2.x;
  u_xlat2.x = ((-(x_2180) * 0.004f) + x_2184);
  let x_2188 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_2188, 0.0f);
  let x_2191 : vec3<f32> = u_xlat7;
  let x_2192 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_2191, x_2192);
  let x_2196 : f32 = u_xlat7.x;
  u_xlat7.x = (x_2196 + 0.0001f);
  let x_2200 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_2200);
  let x_2204 : f32 = u_xlat7.x;
  let x_2206 : f32 = u_xlat2.x;
  u_xlat7.x = (x_2204 * x_2206);
  let x_2210 : f32 = u_xlat7.x;
  let x_2211 : f32 = u_xlat23;
  let x_2213 : f32 = u_xlat22;
  u_xlat7.x = ((x_2210 * x_2211) + x_2213);
  let x_2217 : f32 = u_xlat7.x;
  let x_2219 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_2217 * x_2219);
  let x_2223 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_2223);
  let x_2226 : f32 = u_xlat0;
  let x_2229 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_2226) * x_2229) + 1.0f);
  let x_2232 : f32 = u_xlat0;
  let x_2233 : f32 = u_xlat0;
  u_xlat0 = (x_2232 * x_2233);
  let x_2236 : f32 = u_xlat7.x;
  let x_2238 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_2236 * x_2238);
  let x_2241 : f32 = u_xlat0;
  let x_2243 : f32 = u_xlat7.x;
  u_xlat0 = (x_2241 * x_2243);
  let x_2245 : f32 = u_xlat0;
  u_xlat0 = (x_2245 * 0.125f);
  let x_2247 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2247, 0.0f, 1.0f);
  let x_2249 : f32 = u_xlat0;
  u_xlat0 = log2(x_2249);
  let x_2251 : f32 = u_xlat0;
  u_xlat0 = (x_2251 * 0.600000024f);
  let x_2254 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2254);
  let x_2258 : vec3<f32> = u_xlat1;
  let x_2261 : vec3<f32> = ((x_2258 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2262 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2262.x, x_2261.x, x_2261.y, x_2261.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

