type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(4) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3573 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1592 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat44 : f32;
  var x_1637 : f32;
  var x_1716 : f32;
  var x_1728 : f32;
  var x_1739 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : bool;
  var x_3144 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat29 = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1108 : f32 = u_xlat11.y;
        u_xlat8.w = x_1108;
        let x_1111 : vec4<f32> = u_xlat3;
        let x_1114 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1117 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(x_1114.x, x_1114.y)) + vec2<f32>(x_1117.x, x_1117.w));
        let x_1120 : vec4<f32> = u_xlat11;
        let x_1121 : vec3<f32> = vec3<f32>(x_1120.x, x_1120.z, x_1120.w);
        let x_1122 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1121.x, x_1122.y, x_1121.y, x_1121.z);
        let x_1124 : vec4<f32> = u_xlat3;
        let x_1127 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1134 : vec4<f32> = u_xlat3;
        let x_1137 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1140 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1134.x, x_1134.y) * vec2<f32>(x_1137.x, x_1137.y)) + vec2<f32>(x_1140.w, x_1140.y));
        let x_1144 : f32 = u_xlat8.x;
        u_xlat9.x = x_1144;
        let x_1146 : vec4<f32> = u_xlat3;
        let x_1149 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1152 : vec4<f32> = u_xlat9;
        let x_1154 : vec2<f32> = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1149.x, x_1149.y)) + vec2<f32>(x_1152.x, x_1152.y));
        let x_1155 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1154.x, x_1154.y, x_1155.z, x_1155.w);
        let x_1158 : vec4<f32> = u_xlat7;
        let x_1160 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1158.x, x_1158.x, x_1158.x, x_1158.x) * x_1160);
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1165 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y) * x_1165);
        let x_1168 : vec4<f32> = u_xlat7;
        let x_1170 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1168.z, x_1168.z, x_1168.z, x_1168.z) * x_1170);
        let x_1172 : vec4<f32> = u_xlat7;
        let x_1174 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1172.w, x_1172.w, x_1172.w, x_1172.w) * x_1174);
        let x_1177 : vec4<f32> = u_xlat12;
        let x_1178 : vec2<f32> = vec2<f32>(x_1177.x, x_1177.y);
        let x_1180 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1178.x, x_1178.y, x_1180);
        let x_1187 : vec3<f32> = txVec13;
        let x_1189 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1187.xy, x_1187.z);
        u_xlat65 = x_1189;
        let x_1191 : vec4<f32> = u_xlat12;
        let x_1192 : vec2<f32> = vec2<f32>(x_1191.z, x_1191.w);
        let x_1194 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1192.x, x_1192.y, x_1194);
        let x_1202 : vec3<f32> = txVec14;
        let x_1204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1202.xy, x_1202.z);
        u_xlat68 = x_1204;
        let x_1205 : f32 = u_xlat68;
        let x_1207 : f32 = u_xlat17.y;
        u_xlat68 = (x_1205 * x_1207);
        let x_1210 : f32 = u_xlat17.x;
        let x_1211 : f32 = u_xlat65;
        let x_1213 : f32 = u_xlat68;
        u_xlat65 = ((x_1210 * x_1211) + x_1213);
        let x_1216 : vec2<f32> = u_xlat45;
        let x_1218 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec15;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat45.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat45.x;
        let x_1234 : f32 = u_xlat65;
        u_xlat65 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat15;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.x, x_1237.y);
        let x_1240 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec16;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat45.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat45.x;
        let x_1256 : f32 = u_xlat65;
        u_xlat65 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat13;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec17;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat45.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat45.x;
        let x_1278 : f32 = u_xlat65;
        u_xlat65 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat13;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec18;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat45.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat45.x;
        let x_1300 : f32 = u_xlat65;
        u_xlat65 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec4<f32> = u_xlat14;
        let x_1304 : vec2<f32> = vec2<f32>(x_1303.x, x_1303.y);
        let x_1306 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1304.x, x_1304.y, x_1306);
        let x_1313 : vec3<f32> = txVec19;
        let x_1315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1313.xy, x_1313.z);
        u_xlat45.x = x_1315;
        let x_1318 : f32 = u_xlat18.z;
        let x_1320 : f32 = u_xlat45.x;
        let x_1322 : f32 = u_xlat65;
        u_xlat65 = ((x_1318 * x_1320) + x_1322);
        let x_1325 : vec4<f32> = u_xlat15;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.z, x_1325.w);
        let x_1328 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec20;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat45.x = x_1337;
        let x_1340 : f32 = u_xlat18.w;
        let x_1342 : f32 = u_xlat45.x;
        let x_1344 : f32 = u_xlat65;
        u_xlat65 = ((x_1340 * x_1342) + x_1344);
        let x_1347 : vec4<f32> = u_xlat16;
        let x_1348 : vec2<f32> = vec2<f32>(x_1347.x, x_1347.y);
        let x_1350 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1348.x, x_1348.y, x_1350);
        let x_1357 : vec3<f32> = txVec21;
        let x_1359 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1357.xy, x_1357.z);
        u_xlat45.x = x_1359;
        let x_1362 : f32 = u_xlat19.x;
        let x_1364 : f32 = u_xlat45.x;
        let x_1366 : f32 = u_xlat65;
        u_xlat65 = ((x_1362 * x_1364) + x_1366);
        let x_1369 : vec4<f32> = u_xlat16;
        let x_1370 : vec2<f32> = vec2<f32>(x_1369.z, x_1369.w);
        let x_1372 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1370.x, x_1370.y, x_1372);
        let x_1379 : vec3<f32> = txVec22;
        let x_1381 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1379.xy, x_1379.z);
        u_xlat45.x = x_1381;
        let x_1384 : f32 = u_xlat19.y;
        let x_1386 : f32 = u_xlat45.x;
        let x_1388 : f32 = u_xlat65;
        u_xlat65 = ((x_1384 * x_1386) + x_1388);
        let x_1391 : vec2<f32> = u_xlat29;
        let x_1393 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec23;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat45.x = x_1402;
        let x_1405 : f32 = u_xlat19.z;
        let x_1407 : f32 = u_xlat45.x;
        let x_1409 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1407) + x_1409);
        let x_1412 : vec2<f32> = u_xlat56;
        let x_1414 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1412.x, x_1412.y, x_1414);
        let x_1421 : vec3<f32> = txVec24;
        let x_1423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1421.xy, x_1421.z);
        u_xlat45.x = x_1423;
        let x_1426 : f32 = u_xlat19.w;
        let x_1428 : f32 = u_xlat45.x;
        let x_1430 : f32 = u_xlat65;
        u_xlat65 = ((x_1426 * x_1428) + x_1430);
        let x_1433 : vec4<f32> = u_xlat11;
        let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
        let x_1436 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
        let x_1443 : vec3<f32> = txVec25;
        let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
        u_xlat45.x = x_1445;
        let x_1448 : f32 = u_xlat7.x;
        let x_1450 : f32 = u_xlat45.x;
        let x_1452 : f32 = u_xlat65;
        u_xlat65 = ((x_1448 * x_1450) + x_1452);
        let x_1455 : vec4<f32> = u_xlat11;
        let x_1456 : vec2<f32> = vec2<f32>(x_1455.z, x_1455.w);
        let x_1458 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1456.x, x_1456.y, x_1458);
        let x_1465 : vec3<f32> = txVec26;
        let x_1467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1465.xy, x_1465.z);
        u_xlat45.x = x_1467;
        let x_1470 : f32 = u_xlat7.y;
        let x_1472 : f32 = u_xlat45.x;
        let x_1474 : f32 = u_xlat65;
        u_xlat65 = ((x_1470 * x_1472) + x_1474);
        let x_1477 : vec2<f32> = u_xlat51;
        let x_1479 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec27;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat45.x = x_1488;
        let x_1491 : f32 = u_xlat7.z;
        let x_1493 : f32 = u_xlat45.x;
        let x_1495 : f32 = u_xlat65;
        u_xlat65 = ((x_1491 * x_1493) + x_1495);
        let x_1498 : vec4<f32> = u_xlat3;
        let x_1499 : vec2<f32> = vec2<f32>(x_1498.x, x_1498.y);
        let x_1501 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1499.x, x_1499.y, x_1501);
        let x_1508 : vec3<f32> = txVec28;
        let x_1510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1508.xy, x_1508.z);
        u_xlat3.x = x_1510;
        let x_1513 : f32 = u_xlat7.w;
        let x_1515 : f32 = u_xlat3.x;
        let x_1517 : f32 = u_xlat65;
        u_xlat64 = ((x_1513 * x_1515) + x_1517);
      }
    }
  } else {
    let x_1521 : vec3<f32> = u_xlat2;
    let x_1522 : vec2<f32> = vec2<f32>(x_1521.x, x_1521.y);
    let x_1524 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1522.x, x_1522.y, x_1524);
    let x_1531 : vec3<f32> = txVec29;
    let x_1533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1531.xy, x_1531.z);
    u_xlat64 = x_1533;
  }
  let x_1535 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1535) + 1.0f);
  let x_1539 : f32 = u_xlat64;
  let x_1541 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1544 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1539 * x_1541) + x_1544);
  let x_1548 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1548);
  let x_1552 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1552 >= 1.0f);
  let x_1554 : bool = u_xlatb44;
  let x_1555 : bool = u_xlatb23;
  u_xlatb23 = (x_1554 | x_1555);
  let x_1557 : bool = u_xlatb23;
  let x_1558 : f32 = u_xlat64;
  u_xlat64 = select(x_1558, 1.0f, x_1557);
  let x_1560 : vec3<f32> = u_xlat1;
  let x_1562 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1560, -(vec3<f32>(x_1562.x, x_1562.y, x_1562.z)));
  let x_1568 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1568, 0.0f, 1.0f);
  let x_1572 : f32 = u_xlat64;
  let x_1576 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1572, x_1572, x_1572) * vec3<f32>(x_1576.x, x_1576.y, x_1576.z));
  let x_1579 : vec3<f32> = u_xlat22;
  let x_1580 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1579 * vec3<f32>(x_1580.x, x_1580.x, x_1580.x));
  let x_1583 : vec3<f32> = u_xlat1;
  let x_1584 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1583 * vec3<f32>(x_1584.x, x_1584.y, x_1584.z));
  let x_1588 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1588 >= 0.400000006f);
  let x_1591 : bool = u_xlatb64;
  if (x_1591) {
    let x_1596 : f32 = u_xlat4.w;
    x_1592 = x_1596;
  } else {
    x_1592 = 0.0f;
  }
  let x_1598 : f32 = x_1592;
  u_xlat64 = x_1598;
  let x_1601 : f32 = u_xlat4.w;
  u_xlat23.x = (x_1601 + -0.400000006f);
  let x_1607 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1607);
  let x_1610 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1610);
  let x_1612 : f32 = u_xlat65;
  let x_1614 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1612) + abs(x_1614));
  let x_1617 : f32 = u_xlat44;
  u_xlat44 = max(x_1617, 0.0001f);
  let x_1621 : f32 = u_xlat23.x;
  let x_1622 : f32 = u_xlat44;
  u_xlat23.x = (x_1621 / x_1622);
  let x_1626 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1626 + 0.5f);
  let x_1630 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1630, 0.0f, 1.0f);
  let x_1634 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1634 == 0.0f));
  let x_1636 : bool = u_xlatb44;
  if (x_1636) {
    let x_1641 : f32 = u_xlat23.x;
    x_1637 = x_1641;
  } else {
    let x_1643 : f32 = u_xlat64;
    x_1637 = x_1643;
  }
  let x_1644 : f32 = x_1637;
  u_xlat64 = x_1644;
  let x_1645 : f32 = u_xlat64;
  u_xlat23.x = (x_1645 + -0.0001f);
  let x_1650 : f32 = u_xlat23.x;
  u_xlatb23 = (x_1650 < 0.0f);
  let x_1652 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1652) * -1i) != 0i)) {
    discard;
  }
  let x_1660 : vec3<f32> = u_xlat21;
  let x_1661 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1660 * vec3<f32>(x_1661.y, x_1661.y, x_1661.y));
  let x_1664 : vec3<f32> = u_xlat27;
  let x_1666 : vec4<f32> = vs_INTERP2;
  let x_1669 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1664.x, x_1664.x, x_1664.x) * vec3<f32>(x_1666.x, x_1666.y, x_1666.z)) + x_1669);
  let x_1671 : vec3<f32> = u_xlat27;
  let x_1673 : vec3<f32> = vs_INTERP1;
  let x_1675 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1671.z, x_1671.z, x_1671.z) * x_1673) + x_1675);
  let x_1677 : vec3<f32> = u_xlat21;
  let x_1678 : vec3<f32> = u_xlat21;
  u_xlat23.x = dot(x_1677, x_1678);
  let x_1682 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1682);
  let x_1685 : vec3<f32> = u_xlat21;
  let x_1686 : vec3<f32> = u_xlat23;
  u_xlat21 = (x_1685 * vec3<f32>(x_1686.x, x_1686.x, x_1686.x));
  let x_1691 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb23 = (x_1691 == 0.0f);
  let x_1693 : vec3<f32> = vs_INTERP0;
  let x_1697 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1698 : vec3<f32> = (-(x_1693) + x_1697);
  let x_1699 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1698.x, x_1698.y, x_1698.z, x_1699.w);
  let x_1701 : vec4<f32> = u_xlat3;
  let x_1703 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_1701.x, x_1701.y, x_1701.z), vec3<f32>(x_1703.x, x_1703.y, x_1703.z));
  let x_1706 : f32 = u_xlat65;
  u_xlat65 = inverseSqrt(x_1706);
  let x_1708 : f32 = u_xlat65;
  let x_1710 : vec4<f32> = u_xlat3;
  let x_1712 : vec3<f32> = (vec3<f32>(x_1708, x_1708, x_1708) * vec3<f32>(x_1710.x, x_1710.y, x_1710.z));
  let x_1713 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1712.x, x_1712.y, x_1712.z, x_1713.w);
  let x_1715 : bool = u_xlatb23;
  if (x_1715) {
    let x_1720 : f32 = u_xlat3.x;
    x_1716 = x_1720;
  } else {
    let x_1724 : f32 = x_137.unity_MatrixV[0i].z;
    x_1716 = x_1724;
  }
  let x_1725 : f32 = x_1716;
  u_xlat4.x = x_1725;
  let x_1727 : bool = u_xlatb23;
  if (x_1727) {
    let x_1732 : f32 = u_xlat3.y;
    x_1728 = x_1732;
  } else {
    let x_1735 : f32 = x_137.unity_MatrixV[1i].z;
    x_1728 = x_1735;
  }
  let x_1736 : f32 = x_1728;
  u_xlat4.y = x_1736;
  let x_1738 : bool = u_xlatb23;
  if (x_1738) {
    let x_1743 : f32 = u_xlat3.z;
    x_1739 = x_1743;
  } else {
    let x_1746 : f32 = x_137.unity_MatrixV[2i].z;
    x_1739 = x_1746;
  }
  let x_1747 : f32 = x_1739;
  u_xlat4.z = x_1747;
  let x_1756 : vec2<f32> = vs_INTERP5;
  let x_1758 : f32 = x_137.x_GlobalMipBias.x;
  let x_1759 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1756, x_1758);
  u_xlat3 = x_1759;
  let x_1764 : vec2<f32> = vs_INTERP5;
  let x_1766 : f32 = x_137.x_GlobalMipBias.x;
  let x_1767 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1764, x_1766);
  u_xlat27 = vec3<f32>(x_1767.x, x_1767.y, x_1767.z);
  let x_1769 : vec4<f32> = u_xlat3;
  let x_1772 : vec3<f32> = (vec3<f32>(x_1769.x, x_1769.y, x_1769.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1773 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1772.x, x_1772.y, x_1772.z, x_1773.w);
  let x_1775 : vec3<f32> = u_xlat21;
  let x_1776 : vec4<f32> = u_xlat3;
  u_xlat23.x = dot(x_1775, vec3<f32>(x_1776.x, x_1776.y, x_1776.z));
  let x_1781 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1781 + 0.5f);
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  let x_1787 : vec3<f32> = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1787.x, x_1787.y, x_1787.z, x_1788.w);
  let x_1791 : f32 = u_xlat3.w;
  u_xlat23.x = max(x_1791, 0.0001f);
  let x_1794 : vec4<f32> = u_xlat3;
  let x_1796 : vec3<f32> = u_xlat23;
  let x_1798 : vec3<f32> = (vec3<f32>(x_1794.x, x_1794.y, x_1794.z) / vec3<f32>(x_1796.x, x_1796.x, x_1796.x));
  let x_1799 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1798.x, x_1798.y, x_1798.z, x_1799.w);
  let x_1802 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1803 : vec2<f32> = vec2<f32>(x_1802.x, x_1802.y);
  let x_1807 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1803.x, x_1803.y));
  let x_1808 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1807.x, x_1808.y, x_1807.y);
  let x_1810 : vec3<f32> = u_xlat23;
  let x_1812 : vec4<f32> = hlslcc_FragCoord;
  let x_1814 : vec2<f32> = (vec2<f32>(x_1810.x, x_1810.z) * vec2<f32>(x_1812.x, x_1812.y));
  let x_1815 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1814.x, x_1814.y, x_1815.z, x_1815.w);
  let x_1818 : f32 = u_xlat7.y;
  let x_1821 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1824 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1818 * x_1821) + x_1824);
  let x_1828 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1828) + 1.0f);
  let x_1833 : f32 = u_xlat6.x;
  u_xlat6.x = x_1833;
  let x_1836 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1836, 0.0f, 1.0f);
  let x_1839 : f32 = u_xlat64;
  u_xlat64 = min(x_1839, 1.0f);
  let x_1841 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1841 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1846 : f32 = u_xlat6.x;
  u_xlat23.x = (-(x_1846) + 1.0f);
  let x_1851 : f32 = u_xlat23.x;
  let x_1853 : f32 = u_xlat23.x;
  u_xlat65 = (x_1851 * x_1853);
  let x_1855 : f32 = u_xlat65;
  u_xlat65 = max(x_1855, 0.0078125f);
  let x_1859 : f32 = u_xlat65;
  let x_1860 : f32 = u_xlat65;
  u_xlat66 = (x_1859 * x_1860);
  let x_1864 : f32 = u_xlat6.x;
  u_xlat67 = (x_1864 + 0.040000021f);
  let x_1867 : f32 = u_xlat67;
  u_xlat67 = min(x_1867, 1.0f);
  let x_1869 : f32 = u_xlat65;
  u_xlat68 = ((x_1869 * 4.0f) + 2.0f);
  let x_1878 : vec4<f32> = u_xlat7;
  let x_1881 : f32 = x_137.x_GlobalMipBias.x;
  let x_1882 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1878.x, x_1878.z), x_1881);
  u_xlat6.x = x_1882.x;
  let x_1886 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1886 + -1.0f);
  let x_1891 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1893 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1891 * x_1893) + 1.0f);
  let x_1898 : f32 = u_xlat6.x;
  let x_1900 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1898, x_1900);
  let x_1903 : bool = u_xlatb0;
  if (x_1903) {
    let x_1907 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1907 == 1.0f);
    let x_1909 : bool = u_xlatb0;
    if (x_1909) {
      let x_1913 : vec4<f32> = vs_INTERP9;
      let x_1916 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1913.x, x_1913.y, x_1913.x, x_1913.y) + x_1916);
      let x_1919 : vec4<f32> = u_xlat7;
      let x_1920 : vec2<f32> = vec2<f32>(x_1919.x, x_1919.y);
      let x_1922 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1920.x, x_1920.y, x_1922);
      let x_1929 : vec3<f32> = txVec30;
      let x_1931 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1929.xy, x_1929.z);
      u_xlat8.x = x_1931;
      let x_1934 : vec4<f32> = u_xlat7;
      let x_1935 : vec2<f32> = vec2<f32>(x_1934.z, x_1934.w);
      let x_1937 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1935.x, x_1935.y, x_1937);
      let x_1944 : vec3<f32> = txVec31;
      let x_1946 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1944.xy, x_1944.z);
      u_xlat8.y = x_1946;
      let x_1948 : vec4<f32> = vs_INTERP9;
      let x_1951 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1948.x, x_1948.y, x_1948.x, x_1948.y) + x_1951);
      let x_1954 : vec4<f32> = u_xlat7;
      let x_1955 : vec2<f32> = vec2<f32>(x_1954.x, x_1954.y);
      let x_1957 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1955.x, x_1955.y, x_1957);
      let x_1964 : vec3<f32> = txVec32;
      let x_1966 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1964.xy, x_1964.z);
      u_xlat8.z = x_1966;
      let x_1969 : vec4<f32> = u_xlat7;
      let x_1970 : vec2<f32> = vec2<f32>(x_1969.z, x_1969.w);
      let x_1972 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1970.x, x_1970.y, x_1972);
      let x_1979 : vec3<f32> = txVec33;
      let x_1981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1979.xy, x_1979.z);
      u_xlat8.w = x_1981;
      let x_1983 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_1983, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1989 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb48 = (x_1989 == 2.0f);
      let x_1991 : bool = u_xlatb48;
      if (x_1991) {
        let x_1995 : vec4<f32> = vs_INTERP9;
        let x_1998 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1995.x, x_1995.y) * vec2<f32>(x_1998.z, x_1998.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2002 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2002);
        let x_2004 : vec4<f32> = vs_INTERP9;
        let x_2007 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2010 : vec2<f32> = u_xlat48;
        let x_2012 : vec2<f32> = ((vec2<f32>(x_2004.x, x_2004.y) * vec2<f32>(x_2007.z, x_2007.w)) + -(x_2010));
        let x_2013 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2012.x, x_2012.y, x_2013.z, x_2013.w);
        let x_2015 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2015.x, x_2015.x, x_2015.y, x_2015.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2018 : vec4<f32> = u_xlat8;
        let x_2020 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2018.x, x_2018.x, x_2018.z, x_2018.z) * vec4<f32>(x_2020.x, x_2020.x, x_2020.z, x_2020.z));
        let x_2024 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2024.y, x_2024.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2027 : vec4<f32> = u_xlat9;
        let x_2030 : vec4<f32> = u_xlat7;
        let x_2033 : vec2<f32> = ((vec2<f32>(x_2027.x, x_2027.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2030.x, x_2030.y)));
        let x_2034 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2033.x, x_2034.y, x_2033.y, x_2034.w);
        let x_2036 : vec4<f32> = u_xlat7;
        let x_2039 : vec2<f32> = (-(vec2<f32>(x_2036.x, x_2036.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2040 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2039.x, x_2039.y, x_2040.z, x_2040.w);
        let x_2042 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2042.x, x_2042.y), vec2<f32>(0.0f, 0.0f));
        let x_2045 : vec2<f32> = u_xlat51;
        let x_2047 : vec2<f32> = u_xlat51;
        let x_2049 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2045) * x_2047) + vec2<f32>(x_2049.x, x_2049.y));
        let x_2052 : vec4<f32> = u_xlat7;
        let x_2054 : vec2<f32> = max(vec2<f32>(x_2052.x, x_2052.y), vec2<f32>(0.0f, 0.0f));
        let x_2055 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2054.x, x_2054.y, x_2055.z, x_2055.w);
        let x_2057 : vec4<f32> = u_xlat7;
        let x_2060 : vec4<f32> = u_xlat7;
        let x_2063 : vec4<f32> = u_xlat8;
        let x_2065 : vec2<f32> = ((-(vec2<f32>(x_2057.x, x_2057.y)) * vec2<f32>(x_2060.x, x_2060.y)) + vec2<f32>(x_2063.y, x_2063.w));
        let x_2066 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2065.x, x_2065.y, x_2066.z, x_2066.w);
        let x_2068 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2068 + vec2<f32>(1.0f, 1.0f));
        let x_2070 : vec4<f32> = u_xlat7;
        let x_2072 : vec2<f32> = (vec2<f32>(x_2070.x, x_2070.y) + vec2<f32>(1.0f, 1.0f));
        let x_2073 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2072.x, x_2072.y, x_2073.z, x_2073.w);
        let x_2075 : vec4<f32> = u_xlat8;
        let x_2077 : vec2<f32> = (vec2<f32>(x_2075.x, x_2075.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2078 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2077.x, x_2077.y, x_2078.z, x_2078.w);
        let x_2080 : vec4<f32> = u_xlat9;
        let x_2082 : vec2<f32> = (vec2<f32>(x_2080.x, x_2080.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2083 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2082.x, x_2082.y, x_2083.z, x_2083.w);
        let x_2085 : vec2<f32> = u_xlat51;
        let x_2086 : vec2<f32> = (x_2085 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2087 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2086.x, x_2086.y, x_2087.z, x_2087.w);
        let x_2089 : vec4<f32> = u_xlat7;
        let x_2091 : vec2<f32> = (vec2<f32>(x_2089.x, x_2089.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2092 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2091.x, x_2091.y, x_2092.z, x_2092.w);
        let x_2094 : vec4<f32> = u_xlat8;
        let x_2096 : vec2<f32> = (vec2<f32>(x_2094.y, x_2094.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2097 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2096.x, x_2096.y, x_2097.z, x_2097.w);
        let x_2100 : f32 = u_xlat9.x;
        u_xlat10.z = x_2100;
        let x_2103 : f32 = u_xlat7.x;
        u_xlat10.w = x_2103;
        let x_2106 : f32 = u_xlat12.x;
        u_xlat11.z = x_2106;
        let x_2109 : f32 = u_xlat49.x;
        u_xlat11.w = x_2109;
        let x_2111 : vec4<f32> = u_xlat10;
        let x_2113 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2111.z, x_2111.w, x_2111.x, x_2111.z) + vec4<f32>(x_2113.z, x_2113.w, x_2113.x, x_2113.z));
        let x_2117 : f32 = u_xlat10.y;
        u_xlat9.z = x_2117;
        let x_2120 : f32 = u_xlat7.y;
        u_xlat9.w = x_2120;
        let x_2123 : f32 = u_xlat11.y;
        u_xlat12.z = x_2123;
        let x_2126 : f32 = u_xlat49.y;
        u_xlat12.w = x_2126;
        let x_2128 : vec4<f32> = u_xlat9;
        let x_2130 : vec4<f32> = u_xlat12;
        let x_2132 : vec3<f32> = (vec3<f32>(x_2128.z, x_2128.y, x_2128.w) + vec3<f32>(x_2130.z, x_2130.y, x_2130.w));
        let x_2133 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2132.x, x_2132.y, x_2132.z, x_2133.w);
        let x_2135 : vec4<f32> = u_xlat11;
        let x_2137 : vec4<f32> = u_xlat8;
        let x_2139 : vec3<f32> = (vec3<f32>(x_2135.x, x_2135.z, x_2135.w) / vec3<f32>(x_2137.z, x_2137.w, x_2137.y));
        let x_2140 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2139.x, x_2139.y, x_2139.z, x_2140.w);
        let x_2142 : vec4<f32> = u_xlat9;
        let x_2144 : vec3<f32> = (vec3<f32>(x_2142.x, x_2142.y, x_2142.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2145 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2144.x, x_2144.y, x_2144.z, x_2145.w);
        let x_2147 : vec4<f32> = u_xlat12;
        let x_2149 : vec4<f32> = u_xlat7;
        let x_2151 : vec3<f32> = (vec3<f32>(x_2147.z, x_2147.y, x_2147.w) / vec3<f32>(x_2149.x, x_2149.y, x_2149.z));
        let x_2152 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2151.x, x_2151.y, x_2151.z, x_2152.w);
        let x_2154 : vec4<f32> = u_xlat10;
        let x_2156 : vec3<f32> = (vec3<f32>(x_2154.x, x_2154.y, x_2154.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2157 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2156.x, x_2156.y, x_2156.z, x_2157.w);
        let x_2159 : vec4<f32> = u_xlat9;
        let x_2162 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2164 : vec3<f32> = (vec3<f32>(x_2159.y, x_2159.x, x_2159.z) * vec3<f32>(x_2162.x, x_2162.x, x_2162.x));
        let x_2165 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2164.x, x_2164.y, x_2164.z, x_2165.w);
        let x_2167 : vec4<f32> = u_xlat10;
        let x_2170 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2172 : vec3<f32> = (vec3<f32>(x_2167.x, x_2167.y, x_2167.z) * vec3<f32>(x_2170.y, x_2170.y, x_2170.y));
        let x_2173 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2172.x, x_2172.y, x_2172.z, x_2173.w);
        let x_2176 : f32 = u_xlat10.x;
        u_xlat9.w = x_2176;
        let x_2178 : vec2<f32> = u_xlat48;
        let x_2181 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2184 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2178.x, x_2178.y, x_2178.x, x_2178.y) * vec4<f32>(x_2181.x, x_2181.y, x_2181.x, x_2181.y)) + vec4<f32>(x_2184.y, x_2184.w, x_2184.x, x_2184.w));
        let x_2187 : vec2<f32> = u_xlat48;
        let x_2189 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2192 : vec4<f32> = u_xlat9;
        let x_2194 : vec2<f32> = ((x_2187 * vec2<f32>(x_2189.x, x_2189.y)) + vec2<f32>(x_2192.z, x_2192.w));
        let x_2195 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2194.x, x_2194.y, x_2195.z, x_2195.w);
        let x_2198 : f32 = u_xlat9.y;
        u_xlat10.w = x_2198;
        let x_2200 : vec4<f32> = u_xlat10;
        let x_2201 : vec2<f32> = vec2<f32>(x_2200.y, x_2200.z);
        let x_2202 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2202.x, x_2201.x, x_2202.z, x_2201.y);
        let x_2204 : vec2<f32> = u_xlat48;
        let x_2207 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2210 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2204.x, x_2204.y, x_2204.x, x_2204.y) * vec4<f32>(x_2207.x, x_2207.y, x_2207.x, x_2207.y)) + vec4<f32>(x_2210.x, x_2210.y, x_2210.z, x_2210.y));
        let x_2213 : vec2<f32> = u_xlat48;
        let x_2216 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2219 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2213.x, x_2213.y, x_2213.x, x_2213.y) * vec4<f32>(x_2216.x, x_2216.y, x_2216.x, x_2216.y)) + vec4<f32>(x_2219.w, x_2219.y, x_2219.w, x_2219.z));
        let x_2222 : vec2<f32> = u_xlat48;
        let x_2225 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2228 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2222.x, x_2222.y, x_2222.x, x_2222.y) * vec4<f32>(x_2225.x, x_2225.y, x_2225.x, x_2225.y)) + vec4<f32>(x_2228.x, x_2228.w, x_2228.z, x_2228.w));
        let x_2231 : vec4<f32> = u_xlat7;
        let x_2233 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2231.x, x_2231.x, x_2231.x, x_2231.y) * vec4<f32>(x_2233.z, x_2233.w, x_2233.y, x_2233.z));
        let x_2236 : vec4<f32> = u_xlat7;
        let x_2238 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2236.y, x_2236.y, x_2236.z, x_2236.z) * x_2238);
        let x_2241 : f32 = u_xlat7.z;
        let x_2243 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2241 * x_2243);
        let x_2247 : vec4<f32> = u_xlat11;
        let x_2248 : vec2<f32> = vec2<f32>(x_2247.x, x_2247.y);
        let x_2250 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2248.x, x_2248.y, x_2250);
        let x_2258 : vec3<f32> = txVec34;
        let x_2260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2258.xy, x_2258.z);
        u_xlat69 = x_2260;
        let x_2262 : vec4<f32> = u_xlat11;
        let x_2263 : vec2<f32> = vec2<f32>(x_2262.z, x_2262.w);
        let x_2265 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2263.x, x_2263.y, x_2265);
        let x_2272 : vec3<f32> = txVec35;
        let x_2274 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2272.xy, x_2272.z);
        u_xlat7.x = x_2274;
        let x_2277 : f32 = u_xlat7.x;
        let x_2279 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2277 * x_2279);
        let x_2283 : f32 = u_xlat14.x;
        let x_2284 : f32 = u_xlat69;
        let x_2287 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2283 * x_2284) + x_2287);
        let x_2290 : vec4<f32> = u_xlat12;
        let x_2291 : vec2<f32> = vec2<f32>(x_2290.x, x_2290.y);
        let x_2293 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2291.x, x_2291.y, x_2293);
        let x_2300 : vec3<f32> = txVec36;
        let x_2302 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2300.xy, x_2300.z);
        u_xlat7.x = x_2302;
        let x_2305 : f32 = u_xlat14.z;
        let x_2307 : f32 = u_xlat7.x;
        let x_2309 : f32 = u_xlat69;
        u_xlat69 = ((x_2305 * x_2307) + x_2309);
        let x_2312 : vec4<f32> = u_xlat10;
        let x_2313 : vec2<f32> = vec2<f32>(x_2312.x, x_2312.y);
        let x_2315 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2313.x, x_2313.y, x_2315);
        let x_2322 : vec3<f32> = txVec37;
        let x_2324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2322.xy, x_2322.z);
        u_xlat7.x = x_2324;
        let x_2327 : f32 = u_xlat14.w;
        let x_2329 : f32 = u_xlat7.x;
        let x_2331 : f32 = u_xlat69;
        u_xlat69 = ((x_2327 * x_2329) + x_2331);
        let x_2334 : vec4<f32> = u_xlat13;
        let x_2335 : vec2<f32> = vec2<f32>(x_2334.x, x_2334.y);
        let x_2337 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2335.x, x_2335.y, x_2337);
        let x_2344 : vec3<f32> = txVec38;
        let x_2346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2344.xy, x_2344.z);
        u_xlat7.x = x_2346;
        let x_2349 : f32 = u_xlat15.x;
        let x_2351 : f32 = u_xlat7.x;
        let x_2353 : f32 = u_xlat69;
        u_xlat69 = ((x_2349 * x_2351) + x_2353);
        let x_2356 : vec4<f32> = u_xlat13;
        let x_2357 : vec2<f32> = vec2<f32>(x_2356.z, x_2356.w);
        let x_2359 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2357.x, x_2357.y, x_2359);
        let x_2366 : vec3<f32> = txVec39;
        let x_2368 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2366.xy, x_2366.z);
        u_xlat7.x = x_2368;
        let x_2371 : f32 = u_xlat15.y;
        let x_2373 : f32 = u_xlat7.x;
        let x_2375 : f32 = u_xlat69;
        u_xlat69 = ((x_2371 * x_2373) + x_2375);
        let x_2378 : vec4<f32> = u_xlat10;
        let x_2379 : vec2<f32> = vec2<f32>(x_2378.z, x_2378.w);
        let x_2381 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2379.x, x_2379.y, x_2381);
        let x_2388 : vec3<f32> = txVec40;
        let x_2390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2388.xy, x_2388.z);
        u_xlat7.x = x_2390;
        let x_2393 : f32 = u_xlat15.z;
        let x_2395 : f32 = u_xlat7.x;
        let x_2397 : f32 = u_xlat69;
        u_xlat69 = ((x_2393 * x_2395) + x_2397);
        let x_2400 : vec4<f32> = u_xlat9;
        let x_2401 : vec2<f32> = vec2<f32>(x_2400.x, x_2400.y);
        let x_2403 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2401.x, x_2401.y, x_2403);
        let x_2410 : vec3<f32> = txVec41;
        let x_2412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2410.xy, x_2410.z);
        u_xlat7.x = x_2412;
        let x_2415 : f32 = u_xlat15.w;
        let x_2417 : f32 = u_xlat7.x;
        let x_2419 : f32 = u_xlat69;
        u_xlat69 = ((x_2415 * x_2417) + x_2419);
        let x_2422 : vec4<f32> = u_xlat9;
        let x_2423 : vec2<f32> = vec2<f32>(x_2422.z, x_2422.w);
        let x_2425 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2423.x, x_2423.y, x_2425);
        let x_2432 : vec3<f32> = txVec42;
        let x_2434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2432.xy, x_2432.z);
        u_xlat7.x = x_2434;
        let x_2437 : f32 = u_xlat48.x;
        let x_2439 : f32 = u_xlat7.x;
        let x_2441 : f32 = u_xlat69;
        u_xlat0.x = ((x_2437 * x_2439) + x_2441);
      } else {
        let x_2445 : vec4<f32> = vs_INTERP9;
        let x_2448 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2445.x, x_2445.y) * vec2<f32>(x_2448.z, x_2448.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2452 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2452);
        let x_2454 : vec4<f32> = vs_INTERP9;
        let x_2457 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2460 : vec2<f32> = u_xlat48;
        let x_2462 : vec2<f32> = ((vec2<f32>(x_2454.x, x_2454.y) * vec2<f32>(x_2457.z, x_2457.w)) + -(x_2460));
        let x_2463 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2462.x, x_2462.y, x_2463.z, x_2463.w);
        let x_2465 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2465.x, x_2465.x, x_2465.y, x_2465.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2468 : vec4<f32> = u_xlat8;
        let x_2470 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2468.x, x_2468.x, x_2468.z, x_2468.z) * vec4<f32>(x_2470.x, x_2470.x, x_2470.z, x_2470.z));
        let x_2473 : vec4<f32> = u_xlat9;
        let x_2475 : vec2<f32> = (vec2<f32>(x_2473.y, x_2473.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2476 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2476.x, x_2475.x, x_2476.z, x_2475.y);
        let x_2478 : vec4<f32> = u_xlat9;
        let x_2481 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2478.x, x_2478.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2481.x, x_2481.y)));
        let x_2485 : vec4<f32> = u_xlat7;
        let x_2488 : vec2<f32> = (-(vec2<f32>(x_2485.x, x_2485.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2489 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2488.x, x_2489.y, x_2488.y, x_2489.w);
        let x_2491 : vec4<f32> = u_xlat7;
        let x_2493 : vec2<f32> = min(vec2<f32>(x_2491.x, x_2491.y), vec2<f32>(0.0f, 0.0f));
        let x_2494 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2493.x, x_2493.y, x_2494.z, x_2494.w);
        let x_2496 : vec4<f32> = u_xlat9;
        let x_2499 : vec4<f32> = u_xlat9;
        let x_2502 : vec4<f32> = u_xlat8;
        let x_2504 : vec2<f32> = ((-(vec2<f32>(x_2496.x, x_2496.y)) * vec2<f32>(x_2499.x, x_2499.y)) + vec2<f32>(x_2502.x, x_2502.z));
        let x_2505 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2504.x, x_2505.y, x_2504.y, x_2505.w);
        let x_2507 : vec4<f32> = u_xlat7;
        let x_2509 : vec2<f32> = max(vec2<f32>(x_2507.x, x_2507.y), vec2<f32>(0.0f, 0.0f));
        let x_2510 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2509.x, x_2509.y, x_2510.z, x_2510.w);
        let x_2512 : vec4<f32> = u_xlat9;
        let x_2515 : vec4<f32> = u_xlat9;
        let x_2518 : vec4<f32> = u_xlat8;
        let x_2520 : vec2<f32> = ((-(vec2<f32>(x_2512.x, x_2512.y)) * vec2<f32>(x_2515.x, x_2515.y)) + vec2<f32>(x_2518.y, x_2518.w));
        let x_2521 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2521.x, x_2520.x, x_2521.z, x_2520.y);
        let x_2523 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2523 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2526 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2526 * 0.081632003f);
        let x_2529 : vec2<f32> = u_xlat49;
        let x_2531 : vec2<f32> = (vec2<f32>(x_2529.y, x_2529.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2532 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2531.x, x_2531.y, x_2532.z, x_2532.w);
        let x_2534 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2534.x, x_2534.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2538 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2538 * 0.081632003f);
        let x_2542 : f32 = u_xlat11.y;
        u_xlat9.x = x_2542;
        let x_2544 : vec4<f32> = u_xlat7;
        let x_2547 : vec2<f32> = ((vec2<f32>(x_2544.x, x_2544.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2548 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2548.x, x_2547.x, x_2548.z, x_2547.y);
        let x_2550 : vec4<f32> = u_xlat7;
        let x_2553 : vec2<f32> = ((vec2<f32>(x_2550.x, x_2550.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2554 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2553.x, x_2554.y, x_2553.y, x_2554.w);
        let x_2557 : f32 = u_xlat49.x;
        u_xlat8.y = x_2557;
        let x_2560 : f32 = u_xlat10.y;
        u_xlat8.w = x_2560;
        let x_2562 : vec4<f32> = u_xlat8;
        let x_2563 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2562 + x_2563);
        let x_2565 : vec4<f32> = u_xlat7;
        let x_2568 : vec2<f32> = ((vec2<f32>(x_2565.y, x_2565.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2569 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2569.x, x_2568.x, x_2569.z, x_2568.y);
        let x_2571 : vec4<f32> = u_xlat7;
        let x_2574 : vec2<f32> = ((vec2<f32>(x_2571.y, x_2571.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2575 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2574.x, x_2575.y, x_2574.y, x_2575.w);
        let x_2578 : f32 = u_xlat49.y;
        u_xlat10.y = x_2578;
        let x_2580 : vec4<f32> = u_xlat10;
        let x_2581 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2580 + x_2581);
        let x_2583 : vec4<f32> = u_xlat8;
        let x_2584 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2583 / x_2584);
        let x_2586 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2586 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2588 : vec4<f32> = u_xlat10;
        let x_2589 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2588 / x_2589);
        let x_2591 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2591 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2593 : vec4<f32> = u_xlat8;
        let x_2596 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2593.w, x_2593.x, x_2593.y, x_2593.z) * vec4<f32>(x_2596.x, x_2596.x, x_2596.x, x_2596.x));
        let x_2599 : vec4<f32> = u_xlat10;
        let x_2602 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2599.x, x_2599.w, x_2599.y, x_2599.z) * vec4<f32>(x_2602.y, x_2602.y, x_2602.y, x_2602.y));
        let x_2605 : vec4<f32> = u_xlat8;
        let x_2606 : vec3<f32> = vec3<f32>(x_2605.y, x_2605.z, x_2605.w);
        let x_2607 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2606.x, x_2607.y, x_2606.y, x_2606.z);
        let x_2610 : f32 = u_xlat10.x;
        u_xlat11.y = x_2610;
        let x_2612 : vec2<f32> = u_xlat48;
        let x_2615 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2618 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2612.x, x_2612.y, x_2612.x, x_2612.y) * vec4<f32>(x_2615.x, x_2615.y, x_2615.x, x_2615.y)) + vec4<f32>(x_2618.x, x_2618.y, x_2618.z, x_2618.y));
        let x_2621 : vec2<f32> = u_xlat48;
        let x_2623 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2626 : vec4<f32> = u_xlat11;
        let x_2628 : vec2<f32> = ((x_2621 * vec2<f32>(x_2623.x, x_2623.y)) + vec2<f32>(x_2626.w, x_2626.y));
        let x_2629 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2628.x, x_2628.y, x_2629.z, x_2629.w);
        let x_2632 : f32 = u_xlat11.y;
        u_xlat8.y = x_2632;
        let x_2635 : f32 = u_xlat10.z;
        u_xlat11.y = x_2635;
        let x_2637 : vec2<f32> = u_xlat48;
        let x_2640 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2643 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2637.x, x_2637.y, x_2637.x, x_2637.y) * vec4<f32>(x_2640.x, x_2640.y, x_2640.x, x_2640.y)) + vec4<f32>(x_2643.x, x_2643.y, x_2643.z, x_2643.y));
        let x_2647 : vec2<f32> = u_xlat48;
        let x_2649 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2652 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2647 * vec2<f32>(x_2649.x, x_2649.y)) + vec2<f32>(x_2652.w, x_2652.y));
        let x_2656 : f32 = u_xlat11.y;
        u_xlat8.z = x_2656;
        let x_2658 : vec2<f32> = u_xlat48;
        let x_2661 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2664 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2658.x, x_2658.y, x_2658.x, x_2658.y) * vec4<f32>(x_2661.x, x_2661.y, x_2661.x, x_2661.y)) + vec4<f32>(x_2664.x, x_2664.y, x_2664.x, x_2664.z));
        let x_2668 : f32 = u_xlat10.w;
        u_xlat11.y = x_2668;
        let x_2670 : vec2<f32> = u_xlat48;
        let x_2673 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2676 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2670.x, x_2670.y, x_2670.x, x_2670.y) * vec4<f32>(x_2673.x, x_2673.y, x_2673.x, x_2673.y)) + vec4<f32>(x_2676.x, x_2676.y, x_2676.z, x_2676.y));
        let x_2679 : vec2<f32> = u_xlat48;
        let x_2681 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2684 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2679 * vec2<f32>(x_2681.x, x_2681.y)) + vec2<f32>(x_2684.w, x_2684.y));
        let x_2688 : f32 = u_xlat11.y;
        u_xlat8.w = x_2688;
        let x_2690 : vec2<f32> = u_xlat48;
        let x_2692 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2695 : vec4<f32> = u_xlat8;
        let x_2697 : vec2<f32> = ((x_2690 * vec2<f32>(x_2692.x, x_2692.y)) + vec2<f32>(x_2695.x, x_2695.w));
        let x_2698 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2697.x, x_2697.y, x_2698.z, x_2698.w);
        let x_2700 : vec4<f32> = u_xlat11;
        let x_2701 : vec3<f32> = vec3<f32>(x_2700.x, x_2700.z, x_2700.w);
        let x_2702 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2701.x, x_2702.y, x_2701.y, x_2701.z);
        let x_2704 : vec2<f32> = u_xlat48;
        let x_2707 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2710 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2704.x, x_2704.y, x_2704.x, x_2704.y) * vec4<f32>(x_2707.x, x_2707.y, x_2707.x, x_2707.y)) + vec4<f32>(x_2710.x, x_2710.y, x_2710.z, x_2710.y));
        let x_2714 : vec2<f32> = u_xlat48;
        let x_2716 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2719 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2714 * vec2<f32>(x_2716.x, x_2716.y)) + vec2<f32>(x_2719.w, x_2719.y));
        let x_2723 : f32 = u_xlat8.x;
        u_xlat10.x = x_2723;
        let x_2725 : vec2<f32> = u_xlat48;
        let x_2727 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2730 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2725 * vec2<f32>(x_2727.x, x_2727.y)) + vec2<f32>(x_2730.x, x_2730.y));
        let x_2733 : vec4<f32> = u_xlat7;
        let x_2735 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2733.x, x_2733.x, x_2733.x, x_2733.x) * x_2735);
        let x_2737 : vec4<f32> = u_xlat7;
        let x_2739 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2737.y, x_2737.y, x_2737.y, x_2737.y) * x_2739);
        let x_2742 : vec4<f32> = u_xlat7;
        let x_2744 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2742.z, x_2742.z, x_2742.z, x_2742.z) * x_2744);
        let x_2746 : vec4<f32> = u_xlat7;
        let x_2748 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2746.w, x_2746.w, x_2746.w, x_2746.w) * x_2748);
        let x_2751 : vec4<f32> = u_xlat12;
        let x_2752 : vec2<f32> = vec2<f32>(x_2751.x, x_2751.y);
        let x_2754 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2752.x, x_2752.y, x_2754);
        let x_2761 : vec3<f32> = txVec43;
        let x_2763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2761.xy, x_2761.z);
        u_xlat8.x = x_2763;
        let x_2766 : vec4<f32> = u_xlat12;
        let x_2767 : vec2<f32> = vec2<f32>(x_2766.z, x_2766.w);
        let x_2769 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2767.x, x_2767.y, x_2769);
        let x_2777 : vec3<f32> = txVec44;
        let x_2779 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2777.xy, x_2777.z);
        u_xlat71 = x_2779;
        let x_2780 : f32 = u_xlat71;
        let x_2782 : f32 = u_xlat18.y;
        u_xlat71 = (x_2780 * x_2782);
        let x_2785 : f32 = u_xlat18.x;
        let x_2787 : f32 = u_xlat8.x;
        let x_2789 : f32 = u_xlat71;
        u_xlat8.x = ((x_2785 * x_2787) + x_2789);
        let x_2793 : vec4<f32> = u_xlat13;
        let x_2794 : vec2<f32> = vec2<f32>(x_2793.x, x_2793.y);
        let x_2796 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2794.x, x_2794.y, x_2796);
        let x_2803 : vec3<f32> = txVec45;
        let x_2805 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2803.xy, x_2803.z);
        u_xlat71 = x_2805;
        let x_2807 : f32 = u_xlat18.z;
        let x_2808 : f32 = u_xlat71;
        let x_2811 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2807 * x_2808) + x_2811);
        let x_2815 : vec4<f32> = u_xlat15;
        let x_2816 : vec2<f32> = vec2<f32>(x_2815.x, x_2815.y);
        let x_2818 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2816.x, x_2816.y, x_2818);
        let x_2825 : vec3<f32> = txVec46;
        let x_2827 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2825.xy, x_2825.z);
        u_xlat71 = x_2827;
        let x_2829 : f32 = u_xlat18.w;
        let x_2830 : f32 = u_xlat71;
        let x_2833 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2829 * x_2830) + x_2833);
        let x_2837 : vec4<f32> = u_xlat14;
        let x_2838 : vec2<f32> = vec2<f32>(x_2837.x, x_2837.y);
        let x_2840 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2838.x, x_2838.y, x_2840);
        let x_2847 : vec3<f32> = txVec47;
        let x_2849 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2847.xy, x_2847.z);
        u_xlat71 = x_2849;
        let x_2851 : f32 = u_xlat19.x;
        let x_2852 : f32 = u_xlat71;
        let x_2855 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2851 * x_2852) + x_2855);
        let x_2859 : vec4<f32> = u_xlat14;
        let x_2860 : vec2<f32> = vec2<f32>(x_2859.z, x_2859.w);
        let x_2862 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2860.x, x_2860.y, x_2862);
        let x_2869 : vec3<f32> = txVec48;
        let x_2871 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2869.xy, x_2869.z);
        u_xlat71 = x_2871;
        let x_2873 : f32 = u_xlat19.y;
        let x_2874 : f32 = u_xlat71;
        let x_2877 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2873 * x_2874) + x_2877);
        let x_2881 : vec2<f32> = u_xlat55;
        let x_2883 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2881.x, x_2881.y, x_2883);
        let x_2890 : vec3<f32> = txVec49;
        let x_2892 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2890.xy, x_2890.z);
        u_xlat71 = x_2892;
        let x_2894 : f32 = u_xlat19.z;
        let x_2895 : f32 = u_xlat71;
        let x_2898 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2894 * x_2895) + x_2898);
        let x_2902 : vec4<f32> = u_xlat15;
        let x_2903 : vec2<f32> = vec2<f32>(x_2902.z, x_2902.w);
        let x_2905 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2903.x, x_2903.y, x_2905);
        let x_2912 : vec3<f32> = txVec50;
        let x_2914 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2912.xy, x_2912.z);
        u_xlat71 = x_2914;
        let x_2916 : f32 = u_xlat19.w;
        let x_2917 : f32 = u_xlat71;
        let x_2920 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2916 * x_2917) + x_2920);
        let x_2924 : vec4<f32> = u_xlat16;
        let x_2925 : vec2<f32> = vec2<f32>(x_2924.x, x_2924.y);
        let x_2927 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2925.x, x_2925.y, x_2927);
        let x_2934 : vec3<f32> = txVec51;
        let x_2936 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2934.xy, x_2934.z);
        u_xlat71 = x_2936;
        let x_2938 : f32 = u_xlat20.x;
        let x_2939 : f32 = u_xlat71;
        let x_2942 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2938 * x_2939) + x_2942);
        let x_2946 : vec4<f32> = u_xlat16;
        let x_2947 : vec2<f32> = vec2<f32>(x_2946.z, x_2946.w);
        let x_2949 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2947.x, x_2947.y, x_2949);
        let x_2956 : vec3<f32> = txVec52;
        let x_2958 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2956.xy, x_2956.z);
        u_xlat71 = x_2958;
        let x_2960 : f32 = u_xlat20.y;
        let x_2961 : f32 = u_xlat71;
        let x_2964 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2960 * x_2961) + x_2964);
        let x_2968 : vec2<f32> = u_xlat29;
        let x_2970 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2968.x, x_2968.y, x_2970);
        let x_2977 : vec3<f32> = txVec53;
        let x_2979 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2977.xy, x_2977.z);
        u_xlat29.x = x_2979;
        let x_2982 : f32 = u_xlat20.z;
        let x_2984 : f32 = u_xlat29.x;
        let x_2987 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2982 * x_2984) + x_2987);
        let x_2991 : vec4<f32> = u_xlat17;
        let x_2992 : vec2<f32> = vec2<f32>(x_2991.x, x_2991.y);
        let x_2994 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2992.x, x_2992.y, x_2994);
        let x_3001 : vec3<f32> = txVec54;
        let x_3003 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3001.xy, x_3001.z);
        u_xlat29.x = x_3003;
        let x_3006 : f32 = u_xlat20.w;
        let x_3008 : f32 = u_xlat29.x;
        let x_3011 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3006 * x_3008) + x_3011);
        let x_3015 : vec4<f32> = u_xlat11;
        let x_3016 : vec2<f32> = vec2<f32>(x_3015.x, x_3015.y);
        let x_3018 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3016.x, x_3016.y, x_3018);
        let x_3025 : vec3<f32> = txVec55;
        let x_3027 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3025.xy, x_3025.z);
        u_xlat29.x = x_3027;
        let x_3030 : f32 = u_xlat7.x;
        let x_3032 : f32 = u_xlat29.x;
        let x_3035 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3030 * x_3032) + x_3035);
        let x_3039 : vec4<f32> = u_xlat11;
        let x_3040 : vec2<f32> = vec2<f32>(x_3039.z, x_3039.w);
        let x_3042 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3040.x, x_3040.y, x_3042);
        let x_3049 : vec3<f32> = txVec56;
        let x_3051 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3049.xy, x_3049.z);
        u_xlat8.x = x_3051;
        let x_3054 : f32 = u_xlat7.y;
        let x_3056 : f32 = u_xlat8.x;
        let x_3059 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3054 * x_3056) + x_3059);
        let x_3063 : vec2<f32> = u_xlat52;
        let x_3065 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3063.x, x_3063.y, x_3065);
        let x_3072 : vec3<f32> = txVec57;
        let x_3074 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3072.xy, x_3072.z);
        u_xlat28.x = x_3074;
        let x_3077 : f32 = u_xlat7.z;
        let x_3079 : f32 = u_xlat28.x;
        let x_3082 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3077 * x_3079) + x_3082);
        let x_3086 : vec2<f32> = u_xlat48;
        let x_3088 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3086.x, x_3086.y, x_3088);
        let x_3095 : vec3<f32> = txVec58;
        let x_3097 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3095.xy, x_3095.z);
        u_xlat48.x = x_3097;
        let x_3100 : f32 = u_xlat7.w;
        let x_3102 : f32 = u_xlat48.x;
        let x_3105 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_3100 * x_3102) + x_3105);
      }
    }
  } else {
    let x_3110 : vec4<f32> = vs_INTERP9;
    let x_3111 : vec2<f32> = vec2<f32>(x_3110.x, x_3110.y);
    let x_3113 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3111.x, x_3111.y, x_3113);
    let x_3120 : vec3<f32> = txVec59;
    let x_3122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3120.xy, x_3120.z);
    u_xlat0.x = x_3122;
  }
  let x_3125 : f32 = u_xlat0.x;
  let x_3127 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3130 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3125 * x_3127) + x_3130);
  let x_3135 : f32 = vs_INTERP9.z;
  u_xlatb2 = (0.0f >= x_3135);
  let x_3138 : f32 = vs_INTERP9.z;
  u_xlatb48 = (x_3138 >= 1.0f);
  let x_3140 : bool = u_xlatb2;
  let x_3141 : bool = u_xlatb48;
  u_xlatb2 = (x_3140 | x_3141);
  let x_3143 : bool = u_xlatb2;
  if (x_3143) {
    x_3144 = 1.0f;
  } else {
    let x_3149 : f32 = u_xlat0.x;
    x_3144 = x_3149;
  }
  let x_3150 : f32 = x_3144;
  u_xlat0.x = x_3150;
  let x_3152 : vec3<f32> = vs_INTERP0;
  let x_3154 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3156 : vec3<f32> = (x_3152 + -(x_3154));
  let x_3157 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3156.x, x_3156.y, x_3156.z, x_3157.w);
  let x_3159 : vec4<f32> = u_xlat7;
  let x_3161 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3159.x, x_3159.y, x_3159.z), vec3<f32>(x_3161.x, x_3161.y, x_3161.z));
  let x_3166 : f32 = u_xlat2.x;
  let x_3168 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3171 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3166 * x_3168) + x_3171);
  let x_3175 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3175, 0.0f, 1.0f);
  let x_3179 : f32 = u_xlat0.x;
  u_xlat48.x = (-(x_3179) + 1.0f);
  let x_3184 : f32 = u_xlat2.x;
  let x_3186 : f32 = u_xlat48.x;
  let x_3189 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3184 * x_3186) + x_3189);
  let x_3192 : vec3<f32> = u_xlat27;
  let x_3195 : vec4<f32> = x_137.x_MainLightColor;
  let x_3197 : vec3<f32> = (vec3<f32>(x_3192.x, x_3192.x, x_3192.x) * vec3<f32>(x_3195.x, x_3195.y, x_3195.z));
  let x_3198 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3197.x, x_3197.y, x_3197.z, x_3198.w);
  let x_3200 : vec4<f32> = u_xlat4;
  let x_3203 : vec3<f32> = u_xlat21;
  u_xlat2.x = dot(-(vec3<f32>(x_3200.x, x_3200.y, x_3200.z)), x_3203);
  let x_3207 : f32 = u_xlat2.x;
  let x_3209 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3207 + x_3209);
  let x_3212 : vec3<f32> = u_xlat21;
  let x_3213 : vec3<f32> = u_xlat2;
  let x_3217 : vec4<f32> = u_xlat4;
  let x_3220 : vec3<f32> = ((x_3212 * -(vec3<f32>(x_3213.x, x_3213.x, x_3213.x))) + -(vec3<f32>(x_3217.x, x_3217.y, x_3217.z)));
  let x_3221 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3220.x, x_3220.y, x_3220.z, x_3221.w);
  let x_3223 : vec3<f32> = u_xlat21;
  let x_3224 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(x_3223, vec3<f32>(x_3224.x, x_3224.y, x_3224.z));
  let x_3229 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3229, 0.0f, 1.0f);
  let x_3233 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3233) + 1.0f);
  let x_3238 : f32 = u_xlat2.x;
  let x_3240 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3238 * x_3240);
  let x_3244 : f32 = u_xlat2.x;
  let x_3246 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3244 * x_3246);
  let x_3250 : f32 = u_xlat23.x;
  u_xlat48.x = ((-(x_3250) * 0.699999988f) + 1.700000048f);
  let x_3258 : f32 = u_xlat23.x;
  let x_3260 : f32 = u_xlat48.x;
  u_xlat23.x = (x_3258 * x_3260);
  let x_3264 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3264 * 6.0f);
  let x_3276 : vec4<f32> = u_xlat8;
  let x_3279 : f32 = u_xlat23.x;
  let x_3280 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3276.x, x_3276.y, x_3276.z), x_3279);
  u_xlat8 = x_3280;
  let x_3282 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3282 + -1.0f);
  let x_3286 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3288 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3286 * x_3288) + 1.0f);
  let x_3293 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3293, 0.0f);
  let x_3297 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3297);
  let x_3301 : f32 = u_xlat23.x;
  let x_3303 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3301 * x_3303);
  let x_3307 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3307);
  let x_3311 : f32 = u_xlat23.x;
  let x_3313 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3311 * x_3313);
  let x_3316 : vec4<f32> = u_xlat8;
  let x_3318 : vec3<f32> = u_xlat23;
  let x_3320 : vec3<f32> = (vec3<f32>(x_3316.x, x_3316.y, x_3316.z) * vec3<f32>(x_3318.x, x_3318.x, x_3318.x));
  let x_3321 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3320.x, x_3320.y, x_3320.z, x_3321.w);
  let x_3323 : f32 = u_xlat65;
  let x_3325 : f32 = u_xlat65;
  let x_3329 : vec2<f32> = ((vec2<f32>(x_3323, x_3323) * vec2<f32>(x_3325, x_3325)) + vec2<f32>(-1.0f, 1.0f));
  let x_3330 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3329.x, x_3330.y, x_3329.y);
  let x_3333 : f32 = u_xlat23.z;
  u_xlat65 = (1.0f / x_3333);
  let x_3335 : f32 = u_xlat67;
  u_xlat67 = (x_3335 + -0.039999999f);
  let x_3339 : f32 = u_xlat2.x;
  let x_3340 : f32 = u_xlat67;
  u_xlat2.x = ((x_3339 * x_3340) + 0.039999999f);
  let x_3346 : f32 = u_xlat2.x;
  let x_3347 : f32 = u_xlat65;
  u_xlat2.x = (x_3346 * x_3347);
  let x_3350 : vec3<f32> = u_xlat2;
  let x_3352 : vec4<f32> = u_xlat8;
  let x_3354 : vec3<f32> = (vec3<f32>(x_3350.x, x_3350.x, x_3350.x) * vec3<f32>(x_3352.x, x_3352.y, x_3352.z));
  let x_3355 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3354.x, x_3354.y, x_3354.z, x_3355.w);
  let x_3357 : vec4<f32> = u_xlat3;
  let x_3359 : vec3<f32> = u_xlat5;
  let x_3361 : vec4<f32> = u_xlat8;
  let x_3363 : vec3<f32> = ((vec3<f32>(x_3357.x, x_3357.y, x_3357.z) * x_3359) + vec3<f32>(x_3361.x, x_3361.y, x_3361.z));
  let x_3364 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3363.x, x_3363.y, x_3363.z, x_3364.w);
  let x_3367 : f32 = u_xlat0.x;
  let x_3369 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3367 * x_3369);
  let x_3372 : vec3<f32> = u_xlat21;
  let x_3374 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(x_3372, vec3<f32>(x_3374.x, x_3374.y, x_3374.z));
  let x_3379 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3379, 0.0f, 1.0f);
  let x_3383 : f32 = u_xlat0.x;
  let x_3385 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3383 * x_3385);
  let x_3388 : vec3<f32> = u_xlat0;
  let x_3390 : vec4<f32> = u_xlat7;
  let x_3392 : vec3<f32> = (vec3<f32>(x_3388.x, x_3388.x, x_3388.x) * vec3<f32>(x_3390.x, x_3390.y, x_3390.z));
  let x_3393 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3392.x, x_3392.y, x_3392.z, x_3393.w);
  let x_3395 : vec4<f32> = u_xlat4;
  let x_3398 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3400 : vec3<f32> = (vec3<f32>(x_3395.x, x_3395.y, x_3395.z) + vec3<f32>(x_3398.x, x_3398.y, x_3398.z));
  let x_3401 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3400.x, x_3400.y, x_3400.z, x_3401.w);
  let x_3403 : vec4<f32> = u_xlat8;
  let x_3405 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3403.x, x_3403.y, x_3403.z), vec3<f32>(x_3405.x, x_3405.y, x_3405.z));
  let x_3410 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3410, 1.17549435e-37f);
  let x_3414 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3414);
  let x_3417 : vec3<f32> = u_xlat0;
  let x_3419 : vec4<f32> = u_xlat8;
  let x_3421 : vec3<f32> = (vec3<f32>(x_3417.x, x_3417.x, x_3417.x) * vec3<f32>(x_3419.x, x_3419.y, x_3419.z));
  let x_3422 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3421.x, x_3421.y, x_3421.z, x_3422.w);
  let x_3424 : vec3<f32> = u_xlat21;
  let x_3425 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3424, vec3<f32>(x_3425.x, x_3425.y, x_3425.z));
  let x_3430 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3430, 0.0f, 1.0f);
  let x_3434 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3436 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3434.x, x_3434.y, x_3434.z), vec3<f32>(x_3436.x, x_3436.y, x_3436.z));
  let x_3441 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3441, 0.0f, 1.0f);
  let x_3445 : f32 = u_xlat0.x;
  let x_3447 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3445 * x_3447);
  let x_3451 : f32 = u_xlat0.x;
  let x_3453 : f32 = u_xlat23.x;
  u_xlat0.x = ((x_3451 * x_3453) + 1.000010014f);
  let x_3459 : f32 = u_xlat2.x;
  let x_3461 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3459 * x_3461);
  let x_3465 : f32 = u_xlat0.x;
  let x_3467 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3465 * x_3467);
  let x_3471 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3471, 0.100000001f);
  let x_3476 : f32 = u_xlat0.x;
  let x_3478 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3476 * x_3478);
  let x_3481 : f32 = u_xlat68;
  let x_3483 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3481 * x_3483);
  let x_3486 : f32 = u_xlat66;
  let x_3488 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3486 / x_3488);
  let x_3491 : vec3<f32> = u_xlat0;
  let x_3495 : vec3<f32> = u_xlat5;
  let x_3496 : vec3<f32> = ((vec3<f32>(x_3491.x, x_3491.x, x_3491.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3495);
  let x_3497 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3496.x, x_3496.y, x_3496.z, x_3497.w);
  let x_3499 : vec4<f32> = u_xlat7;
  let x_3501 : vec4<f32> = u_xlat8;
  let x_3503 : vec3<f32> = (vec3<f32>(x_3499.x, x_3499.y, x_3499.z) * vec3<f32>(x_3501.x, x_3501.y, x_3501.z));
  let x_3504 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3503.x, x_3503.y, x_3503.z, x_3504.w);
  let x_3507 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3509 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3507, x_3509);
  let x_3515 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3515));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3527 : u32 = u_xlatu_loop_1;
    let x_3528 : u32 = u_xlatu0;
    if ((x_3527 < x_3528)) {
    } else {
      break;
    }
    let x_3531 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3531 >> 2u);
    let x_3535 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3535 & 3u));
    let x_3538 : u32 = u_xlatu65;
    let x_3541 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3538)];
    let x_3551 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3556 : vec4<u32> = indexable[x_3551];
    u_xlat65 = dot(x_3541, bitcast<vec4<f32>>(x_3556));
    let x_3560 : f32 = u_xlat65;
    u_xlati65 = i32(x_3560);
    let x_3562 : vec3<f32> = vs_INTERP0;
    let x_3574 : i32 = u_xlati65;
    let x_3576 : vec4<f32> = x_3573.x_AdditionalLightsPosition[x_3574];
    let x_3579 : i32 = u_xlati65;
    let x_3581 : vec4<f32> = x_3573.x_AdditionalLightsPosition[x_3579];
    let x_3583 : vec3<f32> = ((-(x_3562) * vec3<f32>(x_3576.w, x_3576.w, x_3576.w)) + vec3<f32>(x_3581.x, x_3581.y, x_3581.z));
    let x_3584 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3583.x, x_3583.y, x_3583.z, x_3584.w);
    let x_3586 : vec4<f32> = u_xlat9;
    let x_3588 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3586.x, x_3586.y, x_3586.z), vec3<f32>(x_3588.x, x_3588.y, x_3588.z));
    let x_3591 : f32 = u_xlat67;
    u_xlat67 = max(x_3591, 6.10351562e-05f);
    let x_3594 : f32 = u_xlat67;
    u_xlat48.x = inverseSqrt(x_3594);
    let x_3597 : vec2<f32> = u_xlat48;
    let x_3599 : vec4<f32> = u_xlat9;
    let x_3601 : vec3<f32> = (vec3<f32>(x_3597.x, x_3597.x, x_3597.x) * vec3<f32>(x_3599.x, x_3599.y, x_3599.z));
    let x_3602 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3601.x, x_3601.y, x_3601.z, x_3602.w);
    let x_3604 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_3604);
    let x_3606 : f32 = u_xlat67;
    let x_3607 : i32 = u_xlati65;
    let x_3609 : f32 = x_3573.x_AdditionalLightsAttenuation[x_3607].x;
    u_xlat67 = (x_3606 * x_3609);
    let x_3611 : f32 = u_xlat67;
    let x_3613 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3611) * x_3613) + 1.0f);
    let x_3616 : f32 = u_xlat67;
    u_xlat67 = max(x_3616, 0.0f);
    let x_3618 : f32 = u_xlat67;
    let x_3619 : f32 = u_xlat67;
    u_xlat67 = (x_3618 * x_3619);
    let x_3621 : f32 = u_xlat67;
    let x_3622 : f32 = u_xlat69;
    u_xlat67 = (x_3621 * x_3622);
    let x_3624 : i32 = u_xlati65;
    let x_3626 : vec4<f32> = x_3573.x_AdditionalLightsSpotDir[x_3624];
    let x_3628 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3626.x, x_3626.y, x_3626.z), vec3<f32>(x_3628.x, x_3628.y, x_3628.z));
    let x_3631 : f32 = u_xlat69;
    let x_3632 : i32 = u_xlati65;
    let x_3634 : f32 = x_3573.x_AdditionalLightsAttenuation[x_3632].z;
    let x_3636 : i32 = u_xlati65;
    let x_3638 : f32 = x_3573.x_AdditionalLightsAttenuation[x_3636].w;
    u_xlat69 = ((x_3631 * x_3634) + x_3638);
    let x_3640 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3640, 0.0f, 1.0f);
    let x_3642 : f32 = u_xlat69;
    let x_3643 : f32 = u_xlat69;
    u_xlat69 = (x_3642 * x_3643);
    let x_3645 : f32 = u_xlat67;
    let x_3646 : f32 = u_xlat69;
    u_xlat67 = (x_3645 * x_3646);
    let x_3648 : vec3<f32> = u_xlat27;
    let x_3650 : i32 = u_xlati65;
    let x_3652 : vec4<f32> = x_3573.x_AdditionalLightsColor[x_3650];
    let x_3654 : vec3<f32> = (vec3<f32>(x_3648.x, x_3648.x, x_3648.x) * vec3<f32>(x_3652.x, x_3652.y, x_3652.z));
    let x_3655 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3654.x, x_3654.y, x_3654.z, x_3655.w);
    let x_3657 : vec3<f32> = u_xlat21;
    let x_3658 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(x_3657, vec3<f32>(x_3658.x, x_3658.y, x_3658.z));
    let x_3661 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3661, 0.0f, 1.0f);
    let x_3663 : f32 = u_xlat65;
    let x_3664 : f32 = u_xlat67;
    u_xlat65 = (x_3663 * x_3664);
    let x_3666 : f32 = u_xlat65;
    let x_3668 : vec4<f32> = u_xlat11;
    let x_3670 : vec3<f32> = (vec3<f32>(x_3666, x_3666, x_3666) * vec3<f32>(x_3668.x, x_3668.y, x_3668.z));
    let x_3671 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3670.x, x_3670.y, x_3670.z, x_3671.w);
    let x_3673 : vec4<f32> = u_xlat9;
    let x_3675 : vec2<f32> = u_xlat48;
    let x_3678 : vec4<f32> = u_xlat4;
    let x_3680 : vec3<f32> = ((vec3<f32>(x_3673.x, x_3673.y, x_3673.z) * vec3<f32>(x_3675.x, x_3675.x, x_3675.x)) + vec3<f32>(x_3678.x, x_3678.y, x_3678.z));
    let x_3681 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3680.x, x_3680.y, x_3680.z, x_3681.w);
    let x_3683 : vec4<f32> = u_xlat9;
    let x_3685 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3683.x, x_3683.y, x_3683.z), vec3<f32>(x_3685.x, x_3685.y, x_3685.z));
    let x_3688 : f32 = u_xlat65;
    u_xlat65 = max(x_3688, 1.17549435e-37f);
    let x_3690 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3690);
    let x_3692 : f32 = u_xlat65;
    let x_3694 : vec4<f32> = u_xlat9;
    let x_3696 : vec3<f32> = (vec3<f32>(x_3692, x_3692, x_3692) * vec3<f32>(x_3694.x, x_3694.y, x_3694.z));
    let x_3697 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3696.x, x_3696.y, x_3696.z, x_3697.w);
    let x_3699 : vec3<f32> = u_xlat21;
    let x_3700 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(x_3699, vec3<f32>(x_3700.x, x_3700.y, x_3700.z));
    let x_3703 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3703, 0.0f, 1.0f);
    let x_3705 : vec4<f32> = u_xlat10;
    let x_3707 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3705.x, x_3705.y, x_3705.z), vec3<f32>(x_3707.x, x_3707.y, x_3707.z));
    let x_3710 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3710, 0.0f, 1.0f);
    let x_3712 : f32 = u_xlat65;
    let x_3713 : f32 = u_xlat65;
    u_xlat65 = (x_3712 * x_3713);
    let x_3715 : f32 = u_xlat65;
    let x_3717 : f32 = u_xlat23.x;
    u_xlat65 = ((x_3715 * x_3717) + 1.000010014f);
    let x_3720 : f32 = u_xlat67;
    let x_3721 : f32 = u_xlat67;
    u_xlat67 = (x_3720 * x_3721);
    let x_3723 : f32 = u_xlat65;
    let x_3724 : f32 = u_xlat65;
    u_xlat65 = (x_3723 * x_3724);
    let x_3726 : f32 = u_xlat67;
    u_xlat67 = max(x_3726, 0.100000001f);
    let x_3728 : f32 = u_xlat65;
    let x_3729 : f32 = u_xlat67;
    u_xlat65 = (x_3728 * x_3729);
    let x_3731 : f32 = u_xlat68;
    let x_3732 : f32 = u_xlat65;
    u_xlat65 = (x_3731 * x_3732);
    let x_3734 : f32 = u_xlat66;
    let x_3735 : f32 = u_xlat65;
    u_xlat65 = (x_3734 / x_3735);
    let x_3737 : f32 = u_xlat65;
    let x_3740 : vec3<f32> = u_xlat5;
    let x_3741 : vec3<f32> = ((vec3<f32>(x_3737, x_3737, x_3737) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3740);
    let x_3742 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3741.x, x_3741.y, x_3741.z, x_3742.w);
    let x_3744 : vec4<f32> = u_xlat9;
    let x_3746 : vec4<f32> = u_xlat11;
    let x_3749 : vec4<f32> = u_xlat8;
    let x_3751 : vec3<f32> = ((vec3<f32>(x_3744.x, x_3744.y, x_3744.z) * vec3<f32>(x_3746.x, x_3746.y, x_3746.z)) + vec3<f32>(x_3749.x, x_3749.y, x_3749.z));
    let x_3752 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3751.x, x_3751.y, x_3751.z, x_3752.w);

    continuing {
      let x_3754 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3754 + bitcast<u32>(1i));
    }
  }
  let x_3756 : vec4<f32> = u_xlat3;
  let x_3758 : vec4<f32> = u_xlat6;
  let x_3761 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_3756.x, x_3756.y, x_3756.z) * vec3<f32>(x_3758.x, x_3758.x, x_3758.x)) + vec3<f32>(x_3761.x, x_3761.y, x_3761.z));
  let x_3764 : vec4<f32> = u_xlat8;
  let x_3766 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3764.x, x_3764.y, x_3764.z) + x_3766);
  let x_3770 : vec4<f32> = vs_INTERP4;
  let x_3772 : vec3<f32> = u_xlat1;
  let x_3774 : vec3<f32> = u_xlat0;
  let x_3775 : vec3<f32> = ((vec3<f32>(x_3770.w, x_3770.w, x_3770.w) * x_3772) + x_3774);
  let x_3776 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3775.x, x_3775.y, x_3775.z, x_3776.w);
  let x_3778 : bool = u_xlatb44;
  let x_3779 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_3779, x_3778);
  let x_3785 : u32 = x_137.x_RenderingLayerMaxInt;
  let x_3787 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_3785 & bitcast<u32>(x_3787));
  let x_3790 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3790);
  let x_3795 : f32 = u_xlat0.x;
  let x_3797 : f32 = x_137.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3795 * x_3797);
  let x_3801 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3801, 0.0f, 1.0f);
  let x_3805 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3805.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

