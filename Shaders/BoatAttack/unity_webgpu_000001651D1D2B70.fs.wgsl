struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_Lut_Params : vec4<f32>,
  x_UserLut_Params : vec4<f32>,
  x_Bloom_Params : vec4<f32>,
  x_Bloom_RGBM : f32,
  @size(12)
  padding_1 : u32,
  x_Distortion_Params1 : vec4<f32>,
  x_Distortion_Params2 : vec4<f32>,
  x_Chroma_Params : f32,
  @size(12)
  padding_2 : u32,
  x_Vignette_Params1 : vec4<f32>,
  x_Vignette_Params2 : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_25 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_LinearClamp : sampler;

@group(0) @binding(1) var x_Bloom_Texture : texture_2d<f32>;

@group(0) @binding(3) var x_UserLut : texture_2d<f32>;

@group(0) @binding(2) var x_InternalLut : texture_2d<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat12 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatb7 : bool;
  var u_xlat13 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat19 : f32;
  var u_xlat8 : f32;
  var u_xlat14 : f32;
  var u_xlat20 : f32;
  var u_xlatb3 : vec3<bool>;
  var u_xlatb1 : bool;
  var x_220 : f32;
  var u_xlat4 : vec2<f32>;
  var u_xlat5 : f32;
  var u_xlat16 : f32;
  var u_xlat22 : f32;
  var u_xlatb11 : bool;
  var x_442 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat9 : f32;
  var u_xlatb4 : bool;
  var u_xlatb0 : vec3<bool>;
  var x_627 : f32;
  var u_xlatb18 : bool;
  var u_xlat18 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlatb6 : bool;
  var x_992 : f32;
  var x_1001 : f32;
  var u_xlatb12 : vec2<bool>;
  var u_xlatb9 : bool;
  var x_1131 : f32;
  var u_xlatb19 : bool;
  var x_1182 : f32;
  var x_1209 : f32;
  var x_1233 : f32;
  var x_1244 : f32;
  var hlslcc_movcTemp : vec4<f32>;
  var x_1666 : f32;
  var x_1678 : f32;
  var x_1690 : f32;
  var x_1858 : f32;
  var x_1870 : f32;
  var x_1882 : f32;
  var x_2019 : f32;
  var x_2032 : f32;
  var x_2044 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_16 : vec2<f32> = (x_13 + vec2<f32>(-0.5f, -0.5f));
  let x_17 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_16.x, x_16.y, x_17.z, x_17.w);
  let x_21 : vec4<f32> = u_xlat0;
  let x_30 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat12 = ((vec2<f32>(x_21.x, x_21.y) * vec2<f32>(x_30.z, x_30.z)) + vec2<f32>(0.5f, 0.5f));
  let x_36 : vec4<f32> = u_xlat0;
  let x_39 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_44 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_47 : vec2<f32> = ((vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_39.z, x_39.z)) + -(vec2<f32>(x_44.x, x_44.y)));
  let x_48 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_47.x, x_47.y, x_48.z, x_48.w);
  let x_50 : vec4<f32> = u_xlat0;
  let x_53 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_55 : vec2<f32> = (vec2<f32>(x_50.x, x_50.y) * vec2<f32>(x_53.z, x_53.w));
  let x_56 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_55.x, x_55.y, x_56.z, x_56.w);
  let x_59 : vec4<f32> = u_xlat0;
  let x_61 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_59.x, x_59.y), vec2<f32>(x_61.x, x_61.y));
  let x_69 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_69);
  let x_79 : f32 = x_25.x_Distortion_Params2.w;
  u_xlatb7 = (0.0f < x_79);
  let x_81 : bool = u_xlatb7;
  if (x_81) {
    let x_85 : vec4<f32> = u_xlat1;
    let x_88 : vec4<f32> = x_25.x_Distortion_Params2;
    u_xlat13 = (vec2<f32>(x_85.x, x_85.x) * vec2<f32>(x_88.x, x_88.y));
    let x_93 : f32 = u_xlat13.x;
    u_xlat2.x = sin(x_93);
    let x_98 : f32 = u_xlat13.x;
    u_xlat3.x = cos(x_98);
    let x_102 : f32 = u_xlat2.x;
    let x_104 : f32 = u_xlat3.x;
    u_xlat13.x = (x_102 / x_104);
    let x_111 : f32 = u_xlat13.y;
    u_xlat19 = (1.0f / x_111);
    let x_114 : f32 = u_xlat13.x;
    let x_115 : f32 = u_xlat19;
    u_xlat13.x = ((x_114 * x_115) + -1.0f);
    let x_120 : vec4<f32> = u_xlat0;
    let x_122 : vec2<f32> = u_xlat13;
    let x_125 : vec2<f32> = u_xlat12;
    u_xlat13 = ((vec2<f32>(x_120.x, x_120.y) * vec2<f32>(x_122.x, x_122.x)) + x_125);
  } else {
    let x_129 : f32 = u_xlat1.x;
    u_xlat2.x = (1.0f / x_129);
    let x_133 : f32 = u_xlat2.x;
    let x_135 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat2.x = (x_133 * x_135);
    let x_139 : f32 = u_xlat1.x;
    let x_141 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_139 * x_141);
    let x_146 : f32 = u_xlat1.x;
    u_xlat8 = min(abs(x_146), 1.0f);
    let x_151 : f32 = u_xlat1.x;
    u_xlat14 = max(abs(x_151), 1.0f);
    let x_154 : f32 = u_xlat14;
    u_xlat14 = (1.0f / x_154);
    let x_156 : f32 = u_xlat14;
    let x_157 : f32 = u_xlat8;
    u_xlat8 = (x_156 * x_157);
    let x_159 : f32 = u_xlat8;
    let x_160 : f32 = u_xlat8;
    u_xlat14 = (x_159 * x_160);
    let x_163 : f32 = u_xlat14;
    u_xlat20 = ((x_163 * 0.0208351f) + -0.085133001f);
    let x_168 : f32 = u_xlat14;
    let x_169 : f32 = u_xlat20;
    u_xlat20 = ((x_168 * x_169) + 0.180141002f);
    let x_173 : f32 = u_xlat14;
    let x_174 : f32 = u_xlat20;
    u_xlat20 = ((x_173 * x_174) + -0.330299497f);
    let x_178 : f32 = u_xlat14;
    let x_179 : f32 = u_xlat20;
    u_xlat14 = ((x_178 * x_179) + 0.999866009f);
    let x_183 : f32 = u_xlat14;
    let x_184 : f32 = u_xlat8;
    u_xlat20 = (x_183 * x_184);
    let x_190 : f32 = u_xlat1.x;
    u_xlatb3.x = (1.0f < abs(x_190));
    let x_194 : f32 = u_xlat20;
    u_xlat20 = ((x_194 * -2.0f) + 1.570796371f);
    let x_200 : bool = u_xlatb3.x;
    let x_201 : f32 = u_xlat20;
    u_xlat20 = select(0.0f, x_201, x_200);
    let x_203 : f32 = u_xlat8;
    let x_204 : f32 = u_xlat14;
    let x_206 : f32 = u_xlat20;
    u_xlat8 = ((x_203 * x_204) + x_206);
    let x_209 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_209, 1.0f);
    let x_214 : f32 = u_xlat1.x;
    let x_216 : f32 = u_xlat1.x;
    u_xlatb1 = (x_214 < -(x_216));
    let x_219 : bool = u_xlatb1;
    if (x_219) {
      let x_223 : f32 = u_xlat8;
      x_220 = -(x_223);
    } else {
      let x_226 : f32 = u_xlat8;
      x_220 = x_226;
    }
    let x_227 : f32 = x_220;
    u_xlat1.x = x_227;
    let x_230 : f32 = u_xlat2.x;
    let x_232 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_230 * x_232) + -1.0f);
    let x_236 : vec4<f32> = u_xlat0;
    let x_238 : vec4<f32> = u_xlat1;
    let x_241 : vec2<f32> = u_xlat12;
    u_xlat13 = ((vec2<f32>(x_236.x, x_236.y) * vec2<f32>(x_238.x, x_238.x)) + x_241);
  }
  let x_243 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((vec4<f32>(x_243.x, x_243.y, x_243.x, x_243.y) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_250 : vec4<f32> = u_xlat0;
  let x_252 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_250.z, x_250.w), vec2<f32>(x_252.z, x_252.w));
  let x_256 : vec4<f32> = u_xlat0;
  let x_257 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_256 * vec4<f32>(x_257.x, x_257.x, x_257.x, x_257.x));
  let x_260 : vec4<f32> = u_xlat0;
  let x_263 : f32 = x_25.x_Chroma_Params;
  u_xlat0 = (x_260 * vec4<f32>(x_263, x_263, x_263, x_263));
  let x_276 : vec2<f32> = u_xlat13;
  let x_279 : f32 = x_25.x_GlobalMipBias.x;
  let x_280 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_276, x_279);
  u_xlat2.x = x_280.x;
  let x_283 : vec4<f32> = u_xlat0;
  let x_288 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((x_283 * vec4<f32>(-0.333333343f, -0.333333343f, -0.666666687f, -0.666666687f)) + vec4<f32>(x_288.x, x_288.y, x_288.x, x_288.y));
  let x_291 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_291 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_294 : vec4<f32> = u_xlat0;
  let x_296 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat3 = ((x_294 * vec4<f32>(x_296.z, x_296.z, x_296.z, x_296.z)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_301 : vec4<f32> = u_xlat0;
  let x_303 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_307 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = ((x_301 * vec4<f32>(x_303.z, x_303.z, x_303.z, x_303.z)) + -(vec4<f32>(x_307.x, x_307.y, x_307.x, x_307.y)));
  let x_311 : vec4<f32> = u_xlat0;
  let x_313 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = (x_311 * vec4<f32>(x_313.z, x_313.w, x_313.z, x_313.w));
  let x_316 : vec4<f32> = u_xlat0;
  let x_318 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_316.x, x_316.y), vec2<f32>(x_318.x, x_318.y));
  let x_323 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_323);
  let x_326 : bool = u_xlatb7;
  if (x_326) {
    let x_330 : vec4<f32> = u_xlat1;
    let x_333 : vec4<f32> = x_25.x_Distortion_Params2;
    u_xlat4 = (vec2<f32>(x_330.x, x_330.x) * vec2<f32>(x_333.x, x_333.y));
    let x_338 : f32 = u_xlat4.x;
    u_xlat5 = cos(x_338);
    let x_341 : f32 = u_xlat4.x;
    u_xlat4.x = sin(x_341);
    let x_345 : f32 = u_xlat4.x;
    let x_346 : f32 = u_xlat5;
    u_xlat20 = (x_345 / x_346);
    let x_349 : f32 = u_xlat4.y;
    u_xlat4.x = (1.0f / x_349);
    let x_352 : f32 = u_xlat20;
    let x_354 : f32 = u_xlat4.x;
    u_xlat20 = ((x_352 * x_354) + -1.0f);
    let x_357 : vec4<f32> = u_xlat0;
    let x_359 : f32 = u_xlat20;
    let x_362 : vec4<f32> = u_xlat3;
    u_xlat4 = ((vec2<f32>(x_357.x, x_357.y) * vec2<f32>(x_359, x_359)) + vec2<f32>(x_362.x, x_362.y));
  } else {
    let x_367 : f32 = u_xlat1.x;
    u_xlat20 = (1.0f / x_367);
    let x_369 : f32 = u_xlat20;
    let x_371 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat20 = (x_369 * x_371);
    let x_374 : f32 = u_xlat1.x;
    let x_376 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_374 * x_376);
    let x_381 : f32 = u_xlat1.x;
    u_xlat16 = min(abs(x_381), 1.0f);
    let x_386 : f32 = u_xlat1.x;
    u_xlat22 = max(abs(x_386), 1.0f);
    let x_389 : f32 = u_xlat22;
    u_xlat22 = (1.0f / x_389);
    let x_391 : f32 = u_xlat22;
    let x_392 : f32 = u_xlat16;
    u_xlat16 = (x_391 * x_392);
    let x_394 : f32 = u_xlat16;
    let x_395 : f32 = u_xlat16;
    u_xlat22 = (x_394 * x_395);
    let x_397 : f32 = u_xlat22;
    u_xlat5 = ((x_397 * 0.0208351f) + -0.085133001f);
    let x_400 : f32 = u_xlat22;
    let x_401 : f32 = u_xlat5;
    u_xlat5 = ((x_400 * x_401) + 0.180141002f);
    let x_404 : f32 = u_xlat22;
    let x_405 : f32 = u_xlat5;
    u_xlat5 = ((x_404 * x_405) + -0.330299497f);
    let x_408 : f32 = u_xlat22;
    let x_409 : f32 = u_xlat5;
    u_xlat22 = ((x_408 * x_409) + 0.999866009f);
    let x_412 : f32 = u_xlat22;
    let x_413 : f32 = u_xlat16;
    u_xlat5 = (x_412 * x_413);
    let x_417 : f32 = u_xlat1.x;
    u_xlatb11 = (1.0f < abs(x_417));
    let x_420 : f32 = u_xlat5;
    u_xlat5 = ((x_420 * -2.0f) + 1.570796371f);
    let x_423 : bool = u_xlatb11;
    let x_424 : f32 = u_xlat5;
    u_xlat5 = select(0.0f, x_424, x_423);
    let x_426 : f32 = u_xlat16;
    let x_427 : f32 = u_xlat22;
    let x_429 : f32 = u_xlat5;
    u_xlat16 = ((x_426 * x_427) + x_429);
    let x_432 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_432, 1.0f);
    let x_436 : f32 = u_xlat1.x;
    let x_438 : f32 = u_xlat1.x;
    u_xlatb1 = (x_436 < -(x_438));
    let x_441 : bool = u_xlatb1;
    if (x_441) {
      let x_445 : f32 = u_xlat16;
      x_442 = -(x_445);
    } else {
      let x_448 : f32 = u_xlat16;
      x_442 = x_448;
    }
    let x_449 : f32 = x_442;
    u_xlat1.x = x_449;
    let x_451 : f32 = u_xlat20;
    let x_453 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_451 * x_453) + -1.0f);
    let x_457 : vec4<f32> = u_xlat0;
    let x_459 : vec4<f32> = u_xlat1;
    let x_462 : vec4<f32> = u_xlat3;
    u_xlat4 = ((vec2<f32>(x_457.x, x_457.y) * vec2<f32>(x_459.x, x_459.x)) + vec2<f32>(x_462.x, x_462.y));
  }
  let x_468 : vec2<f32> = u_xlat4;
  let x_470 : f32 = x_25.x_GlobalMipBias.x;
  let x_471 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_468, x_470);
  u_xlat2.y = x_471.y;
  let x_474 : vec4<f32> = u_xlat0;
  let x_476 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec2<f32>(x_474.z, x_474.w), vec2<f32>(x_476.z, x_476.w));
  let x_481 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_481);
  let x_484 : bool = u_xlatb7;
  if (x_484) {
    let x_487 : vec4<f32> = u_xlat0;
    let x_490 : vec4<f32> = x_25.x_Distortion_Params2;
    let x_492 : vec2<f32> = (vec2<f32>(x_487.x, x_487.x) * vec2<f32>(x_490.x, x_490.y));
    let x_493 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_492.x, x_492.y, x_493.z, x_493.w);
    let x_496 : f32 = u_xlat1.x;
    u_xlat3.x = cos(x_496);
    let x_500 : f32 = u_xlat1.x;
    u_xlat1.x = sin(x_500);
    let x_507 : f32 = u_xlat1.x;
    let x_509 : f32 = u_xlat3.x;
    u_xlat6.x = (x_507 / x_509);
    let x_513 : f32 = u_xlat1.y;
    u_xlat1.x = (1.0f / x_513);
    let x_517 : f32 = u_xlat6.x;
    let x_519 : f32 = u_xlat1.x;
    u_xlat6.x = ((x_517 * x_519) + -1.0f);
    let x_523 : vec4<f32> = u_xlat0;
    let x_525 : vec3<f32> = u_xlat6;
    let x_528 : vec4<f32> = u_xlat3;
    let x_530 : vec2<f32> = ((vec2<f32>(x_523.z, x_523.w) * vec2<f32>(x_525.x, x_525.x)) + vec2<f32>(x_528.z, x_528.w));
    let x_531 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_530.x, x_530.y, x_531.z, x_531.w);
  } else {
    let x_535 : f32 = u_xlat0.x;
    u_xlat6.x = (1.0f / x_535);
    let x_539 : f32 = u_xlat6.x;
    let x_541 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat6.x = (x_539 * x_541);
    let x_545 : f32 = u_xlat0.x;
    let x_547 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat0.x = (x_545 * x_547);
    let x_551 : f32 = u_xlat0.x;
    u_xlat20 = min(abs(x_551), 1.0f);
    let x_555 : f32 = u_xlat0.x;
    u_xlat3.x = max(abs(x_555), 1.0f);
    let x_560 : f32 = u_xlat3.x;
    u_xlat3.x = (1.0f / x_560);
    let x_563 : f32 = u_xlat20;
    let x_565 : f32 = u_xlat3.x;
    u_xlat20 = (x_563 * x_565);
    let x_567 : f32 = u_xlat20;
    let x_568 : f32 = u_xlat20;
    u_xlat3.x = (x_567 * x_568);
    let x_573 : f32 = u_xlat3.x;
    u_xlat9 = ((x_573 * 0.0208351f) + -0.085133001f);
    let x_577 : f32 = u_xlat3.x;
    let x_578 : f32 = u_xlat9;
    u_xlat9 = ((x_577 * x_578) + 0.180141002f);
    let x_582 : f32 = u_xlat3.x;
    let x_583 : f32 = u_xlat9;
    u_xlat9 = ((x_582 * x_583) + -0.330299497f);
    let x_587 : f32 = u_xlat3.x;
    let x_588 : f32 = u_xlat9;
    u_xlat3.x = ((x_587 * x_588) + 0.999866009f);
    let x_592 : f32 = u_xlat20;
    let x_594 : f32 = u_xlat3.x;
    u_xlat9 = (x_592 * x_594);
    let x_598 : f32 = u_xlat0.x;
    u_xlatb4 = (1.0f < abs(x_598));
    let x_601 : f32 = u_xlat9;
    u_xlat9 = ((x_601 * -2.0f) + 1.570796371f);
    let x_604 : bool = u_xlatb4;
    let x_605 : f32 = u_xlat9;
    u_xlat9 = select(0.0f, x_605, x_604);
    let x_607 : f32 = u_xlat20;
    let x_609 : f32 = u_xlat3.x;
    let x_611 : f32 = u_xlat9;
    u_xlat20 = ((x_607 * x_609) + x_611);
    let x_614 : f32 = u_xlat0.x;
    u_xlat0.x = min(x_614, 1.0f);
    let x_619 : f32 = u_xlat0.x;
    let x_621 : f32 = u_xlat0.x;
    u_xlatb0.x = (x_619 < -(x_621));
    let x_626 : bool = u_xlatb0.x;
    if (x_626) {
      let x_630 : f32 = u_xlat20;
      x_627 = -(x_630);
    } else {
      let x_633 : f32 = u_xlat20;
      x_627 = x_633;
    }
    let x_634 : f32 = x_627;
    u_xlat0.x = x_634;
    let x_637 : f32 = u_xlat6.x;
    let x_639 : f32 = u_xlat0.x;
    u_xlat0.x = ((x_637 * x_639) + -1.0f);
    let x_643 : vec4<f32> = u_xlat0;
    let x_645 : vec4<f32> = u_xlat0;
    let x_648 : vec4<f32> = u_xlat3;
    let x_650 : vec2<f32> = ((vec2<f32>(x_643.z, x_643.w) * vec2<f32>(x_645.x, x_645.x)) + vec2<f32>(x_648.z, x_648.w));
    let x_651 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_650.x, x_650.y, x_651.z, x_651.w);
  }
  let x_656 : vec4<f32> = u_xlat1;
  let x_659 : f32 = x_25.x_GlobalMipBias.x;
  let x_660 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_656.x, x_656.y), x_659);
  u_xlat2.z = x_660.z;
  let x_668 : vec2<f32> = u_xlat13;
  let x_670 : f32 = x_25.x_GlobalMipBias.x;
  let x_671 : vec4<f32> = textureSampleBias(x_Bloom_Texture, sampler_LinearClamp, x_668, x_670);
  u_xlat0 = x_671;
  let x_674 : f32 = x_25.x_Bloom_RGBM;
  u_xlatb1 = (0.0f < x_674);
  let x_676 : bool = u_xlatb1;
  if (x_676) {
    let x_679 : vec4<f32> = u_xlat0;
    let x_681 : vec4<f32> = u_xlat0;
    let x_683 : vec3<f32> = (vec3<f32>(x_679.w, x_679.w, x_679.w) * vec3<f32>(x_681.x, x_681.y, x_681.z));
    let x_684 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_683.x, x_683.y, x_683.z, x_684.w);
    let x_686 : vec4<f32> = u_xlat3;
    let x_690 : vec3<f32> = (vec3<f32>(x_686.x, x_686.y, x_686.z) * vec3<f32>(8.0f, 8.0f, 8.0f));
    let x_691 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_690.x, x_690.y, x_690.z, x_691.w);
  }
  let x_693 : vec4<f32> = u_xlat0;
  let x_697 : vec4<f32> = x_25.x_Bloom_Params;
  let x_699 : vec3<f32> = (vec3<f32>(x_693.x, x_693.y, x_693.z) * vec3<f32>(x_697.x, x_697.x, x_697.x));
  let x_700 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
  let x_702 : vec4<f32> = u_xlat0;
  let x_705 : vec4<f32> = x_25.x_Bloom_Params;
  let x_708 : vec4<f32> = u_xlat2;
  let x_710 : vec3<f32> = ((vec3<f32>(x_702.x, x_702.y, x_702.z) * vec3<f32>(x_705.y, x_705.z, x_705.w)) + vec3<f32>(x_708.x, x_708.y, x_708.z));
  let x_711 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_710.x, x_710.y, x_710.z, x_711.w);
  let x_716 : f32 = x_25.x_Vignette_Params2.z;
  u_xlatb18 = (0.0f < x_716);
  let x_718 : bool = u_xlatb18;
  if (x_718) {
    let x_721 : vec2<f32> = u_xlat13;
    let x_723 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_726 : vec2<f32> = (x_721 + -(vec2<f32>(x_723.x, x_723.y)));
    let x_727 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_726.x, x_726.y, x_727.z, x_727.w);
    let x_729 : vec4<f32> = u_xlat1;
    let x_733 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_735 : vec2<f32> = (abs(vec2<f32>(x_729.x, x_729.y)) * vec2<f32>(x_733.z, x_733.z));
    let x_736 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_736.x, x_735.x, x_735.y, x_736.w);
    let x_739 : f32 = u_xlat1.y;
    let x_742 : f32 = x_25.x_Vignette_Params1.w;
    u_xlat1.x = (x_739 * x_742);
    let x_746 : vec4<f32> = u_xlat1;
    let x_748 : vec4<f32> = u_xlat1;
    u_xlat18 = dot(vec2<f32>(x_746.x, x_746.z), vec2<f32>(x_748.x, x_748.z));
    let x_751 : f32 = u_xlat18;
    u_xlat18 = (-(x_751) + 1.0f);
    let x_754 : f32 = u_xlat18;
    u_xlat18 = max(x_754, 0.0f);
    let x_756 : f32 = u_xlat18;
    u_xlat18 = log2(x_756);
    let x_758 : f32 = u_xlat18;
    let x_760 : f32 = x_25.x_Vignette_Params2.w;
    u_xlat18 = (x_758 * x_760);
    let x_762 : f32 = u_xlat18;
    u_xlat18 = exp2(x_762);
    let x_765 : vec4<f32> = x_25.x_Vignette_Params1;
    let x_769 : vec3<f32> = (-(vec3<f32>(x_765.x, x_765.y, x_765.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_770 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_769.x, x_769.y, x_769.z, x_770.w);
    let x_772 : f32 = u_xlat18;
    let x_774 : vec4<f32> = u_xlat1;
    let x_778 : vec4<f32> = x_25.x_Vignette_Params1;
    let x_780 : vec3<f32> = ((vec3<f32>(x_772, x_772, x_772) * vec3<f32>(x_774.x, x_774.y, x_774.z)) + vec3<f32>(x_778.x, x_778.y, x_778.z));
    let x_781 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_780.x, x_780.y, x_780.z, x_781.w);
    let x_783 : vec4<f32> = u_xlat0;
    let x_785 : vec4<f32> = u_xlat1;
    let x_787 : vec3<f32> = (vec3<f32>(x_783.x, x_783.y, x_783.z) * vec3<f32>(x_785.x, x_785.y, x_785.z));
    let x_788 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_787.x, x_787.y, x_787.z, x_788.w);
  }
  let x_790 : vec4<f32> = u_xlat0;
  let x_794 : vec4<f32> = x_25.x_Lut_Params;
  let x_796 : vec3<f32> = (vec3<f32>(x_790.x, x_790.y, x_790.z) * vec3<f32>(x_794.w, x_794.w, x_794.w));
  let x_797 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_796.x, x_796.y, x_796.z, x_797.w);
  let x_804 : vec4<f32> = u_xlat0;
  u_xlat7.x = dot(vec3<f32>(0.439700991f, 0.382977992f, 0.177334994f), vec3<f32>(x_804.x, x_804.y, x_804.z));
  let x_812 : vec4<f32> = u_xlat0;
  u_xlat7.y = dot(vec3<f32>(0.089792296f, 0.813422978f, 0.096761599f), vec3<f32>(x_812.x, x_812.y, x_812.z));
  let x_820 : vec4<f32> = u_xlat0;
  u_xlat7.z = dot(vec3<f32>(0.017543999f, 0.111543998f, 0.870703995f), vec3<f32>(x_820.x, x_820.y, x_820.z));
  let x_825 : f32 = u_xlat7.y;
  let x_827 : f32 = u_xlat7.x;
  u_xlat0.x = min(x_825, x_827);
  let x_831 : f32 = u_xlat7.z;
  let x_833 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_831, x_833);
  let x_837 : f32 = u_xlat7.y;
  let x_839 : f32 = u_xlat7.x;
  u_xlat6.x = max(x_837, x_839);
  let x_843 : f32 = u_xlat7.z;
  let x_845 : f32 = u_xlat6.x;
  u_xlat0.y = max(x_843, x_845);
  let x_848 : vec4<f32> = u_xlat0;
  let x_853 : vec3<f32> = max(vec3<f32>(x_848.x, x_848.y, x_848.y), vec3<f32>(0.0001f, 0.0001f, 0.01f));
  let x_854 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_853.x, x_853.y, x_853.z, x_854.w);
  let x_857 : f32 = u_xlat0.x;
  let x_860 : f32 = u_xlat0.y;
  u_xlat0.x = (-(x_857) + x_860);
  let x_864 : f32 = u_xlat0.x;
  let x_866 : f32 = u_xlat0.z;
  u_xlat0.x = (x_864 / x_866);
  let x_869 : vec3<f32> = u_xlat7;
  let x_872 : vec3<f32> = u_xlat7;
  u_xlat6 = (-(vec3<f32>(x_869.y, x_869.x, x_869.z)) + vec3<f32>(x_872.z, x_872.y, x_872.x));
  let x_875 : vec3<f32> = u_xlat6;
  let x_877 : vec3<f32> = u_xlat7;
  let x_879 : vec2<f32> = (vec2<f32>(x_875.x, x_875.y) * vec2<f32>(x_877.z, x_877.y));
  let x_880 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_879.x, x_879.y, x_880.z);
  let x_883 : f32 = u_xlat6.y;
  let x_885 : f32 = u_xlat6.x;
  u_xlat6.x = (x_883 + x_885);
  let x_889 : f32 = u_xlat7.x;
  let x_891 : f32 = u_xlat6.z;
  let x_894 : f32 = u_xlat6.x;
  u_xlat6.x = ((x_889 * x_891) + x_894);
  let x_898 : f32 = u_xlat6.x;
  u_xlat6.x = max(x_898, 0.0f);
  let x_902 : f32 = u_xlat6.x;
  u_xlat6.x = sqrt(x_902);
  let x_906 : f32 = u_xlat7.y;
  let x_908 : f32 = u_xlat7.z;
  u_xlat12.x = (x_906 + x_908);
  let x_912 : f32 = u_xlat7.x;
  let x_914 : f32 = u_xlat12.x;
  u_xlat12.x = (x_912 + x_914);
  let x_918 : f32 = u_xlat6.x;
  let x_922 : f32 = u_xlat12.x;
  u_xlat6.x = ((x_918 * 1.75f) + x_922);
  let x_926 : f32 = u_xlat0.x;
  u_xlat18 = (x_926 + -0.400000006f);
  let x_929 : f32 = u_xlat18;
  u_xlat1.x = (x_929 * 2.5f);
  let x_934 : f32 = u_xlat1.x;
  u_xlat1.x = (-(abs(x_934)) + 1.0f);
  let x_940 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_940, 0.0f);
  let x_943 : f32 = u_xlat18;
  u_xlatb18 = (x_943 >= 0.0f);
  let x_945 : bool = u_xlatb18;
  u_xlat18 = select(-1.0f, 1.0f, x_945);
  let x_948 : f32 = u_xlat1.x;
  let x_951 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_948) * x_951) + 1.0f);
  let x_955 : f32 = u_xlat18;
  let x_957 : f32 = u_xlat1.x;
  u_xlat6.z = ((x_955 * x_957) + 1.0f);
  let x_961 : vec3<f32> = u_xlat6;
  u_xlat12 = (vec2<f32>(x_961.x, x_961.z) * vec2<f32>(0.333333343f, 0.025f));
  let x_969 : f32 = u_xlat6.x;
  u_xlatb1 = (0.159999996f >= x_969);
  let x_973 : f32 = u_xlat6.x;
  u_xlatb6 = (x_973 >= 0.479999989f);
  let x_978 : f32 = u_xlat12.x;
  u_xlat12.x = (0.079999998f / x_978);
  let x_982 : f32 = u_xlat12.x;
  u_xlat12.x = (x_982 + -0.5f);
  let x_986 : f32 = u_xlat12.x;
  let x_988 : f32 = u_xlat12.y;
  u_xlat12.x = (x_986 * x_988);
  let x_991 : bool = u_xlatb6;
  if (x_991) {
    x_992 = 0.0f;
  } else {
    let x_997 : f32 = u_xlat12.x;
    x_992 = x_997;
  }
  let x_998 : f32 = x_992;
  u_xlat6.x = x_998;
  let x_1000 : bool = u_xlatb1;
  if (x_1000) {
    let x_1005 : f32 = u_xlat12.y;
    x_1001 = x_1005;
  } else {
    let x_1008 : f32 = u_xlat6.x;
    x_1001 = x_1008;
  }
  let x_1009 : f32 = x_1001;
  u_xlat6.x = x_1009;
  let x_1012 : f32 = u_xlat6.x;
  u_xlat6.x = (x_1012 + 1.0f);
  let x_1015 : vec3<f32> = u_xlat6;
  let x_1017 : vec3<f32> = u_xlat7;
  let x_1018 : vec3<f32> = (vec3<f32>(x_1015.x, x_1015.x, x_1015.x) * x_1017);
  let x_1019 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1019.x, x_1018.x, x_1018.y, x_1018.z);
  let x_1024 : vec4<f32> = u_xlat2;
  let x_1026 : vec4<f32> = u_xlat2;
  let x_1029 : vec4<bool> = (vec4<f32>(x_1024.z, x_1024.w, x_1024.z, x_1024.w) == vec4<f32>(x_1026.y, x_1026.z, x_1026.y, x_1026.z));
  u_xlatb12 = vec2<bool>(x_1029.x, x_1029.y);
  let x_1032 : bool = u_xlatb12.y;
  let x_1034 : bool = u_xlatb12.x;
  u_xlatb12.x = (x_1032 & x_1034);
  let x_1038 : f32 = u_xlat7.y;
  let x_1040 : f32 = u_xlat6.x;
  let x_1043 : f32 = u_xlat2.w;
  u_xlat18 = ((x_1038 * x_1040) + -(x_1043));
  let x_1046 : f32 = u_xlat18;
  u_xlat18 = (x_1046 * 1.732050776f);
  let x_1050 : f32 = u_xlat2.y;
  let x_1053 : f32 = u_xlat2.z;
  u_xlat1.x = ((x_1050 * 2.0f) + -(x_1053));
  let x_1058 : f32 = u_xlat7.z;
  let x_1061 : f32 = u_xlat6.x;
  let x_1064 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1058) * x_1061) + x_1064);
  let x_1067 : f32 = u_xlat18;
  let x_1070 : f32 = u_xlat1.x;
  u_xlat13.x = min(abs(x_1067), abs(x_1070));
  let x_1074 : f32 = u_xlat18;
  let x_1077 : f32 = u_xlat1.x;
  u_xlat19 = max(abs(x_1074), abs(x_1077));
  let x_1080 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1080);
  let x_1082 : f32 = u_xlat19;
  let x_1084 : f32 = u_xlat13.x;
  u_xlat13.x = (x_1082 * x_1084);
  let x_1088 : f32 = u_xlat13.x;
  let x_1090 : f32 = u_xlat13.x;
  u_xlat19 = (x_1088 * x_1090);
  let x_1092 : f32 = u_xlat19;
  u_xlat3.x = ((x_1092 * 0.0208351f) + -0.085133001f);
  let x_1096 : f32 = u_xlat19;
  let x_1098 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1096 * x_1098) + 0.180141002f);
  let x_1102 : f32 = u_xlat19;
  let x_1104 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1102 * x_1104) + -0.330299497f);
  let x_1108 : f32 = u_xlat19;
  let x_1110 : f32 = u_xlat3.x;
  u_xlat19 = ((x_1108 * x_1110) + 0.999866009f);
  let x_1113 : f32 = u_xlat19;
  let x_1115 : f32 = u_xlat13.x;
  u_xlat3.x = (x_1113 * x_1115);
  let x_1120 : f32 = u_xlat1.x;
  let x_1122 : f32 = u_xlat18;
  u_xlatb9 = (abs(x_1120) < abs(x_1122));
  let x_1126 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1126 * -2.0f) + 1.570796371f);
  let x_1130 : bool = u_xlatb9;
  if (x_1130) {
    let x_1135 : f32 = u_xlat3.x;
    x_1131 = x_1135;
  } else {
    x_1131 = 0.0f;
  }
  let x_1137 : f32 = x_1131;
  u_xlat3.x = x_1137;
  let x_1140 : f32 = u_xlat13.x;
  let x_1141 : f32 = u_xlat19;
  let x_1144 : f32 = u_xlat3.x;
  u_xlat13.x = ((x_1140 * x_1141) + x_1144);
  let x_1149 : f32 = u_xlat1.x;
  let x_1151 : f32 = u_xlat1.x;
  u_xlatb19 = (x_1149 < -(x_1151));
  let x_1154 : bool = u_xlatb19;
  u_xlat19 = select(0.0f, -3.141592741f, x_1154);
  let x_1157 : f32 = u_xlat19;
  let x_1159 : f32 = u_xlat13.x;
  u_xlat13.x = (x_1157 + x_1159);
  let x_1162 : f32 = u_xlat18;
  let x_1164 : f32 = u_xlat1.x;
  u_xlat19 = min(x_1162, x_1164);
  let x_1166 : f32 = u_xlat18;
  let x_1168 : f32 = u_xlat1.x;
  u_xlat18 = max(x_1166, x_1168);
  let x_1170 : f32 = u_xlat19;
  let x_1171 : f32 = u_xlat19;
  u_xlatb1 = (x_1170 < -(x_1171));
  let x_1174 : f32 = u_xlat18;
  let x_1175 : f32 = u_xlat18;
  u_xlatb18 = (x_1174 >= -(x_1175));
  let x_1178 : bool = u_xlatb18;
  let x_1179 : bool = u_xlatb1;
  u_xlatb18 = (x_1178 & x_1179);
  let x_1181 : bool = u_xlatb18;
  if (x_1181) {
    let x_1186 : f32 = u_xlat13.x;
    x_1182 = -(x_1186);
  } else {
    let x_1190 : f32 = u_xlat13.x;
    x_1182 = x_1190;
  }
  let x_1191 : f32 = x_1182;
  u_xlat18 = x_1191;
  let x_1192 : f32 = u_xlat18;
  u_xlat18 = (x_1192 * 57.295780182f);
  let x_1196 : bool = u_xlatb12.x;
  let x_1197 : f32 = u_xlat18;
  u_xlat12.x = select(x_1197, 0.0f, x_1196);
  let x_1201 : f32 = u_xlat12.x;
  u_xlatb18 = (x_1201 < 0.0f);
  let x_1204 : f32 = u_xlat12.x;
  u_xlat1.x = (x_1204 + 360.0f);
  let x_1208 : bool = u_xlatb18;
  if (x_1208) {
    let x_1213 : f32 = u_xlat1.x;
    x_1209 = x_1213;
  } else {
    let x_1216 : f32 = u_xlat12.x;
    x_1209 = x_1216;
  }
  let x_1217 : f32 = x_1209;
  u_xlat12.x = x_1217;
  let x_1220 : f32 = u_xlat12.x;
  u_xlatb18 = (x_1220 < -180.0f);
  let x_1225 : f32 = u_xlat12.x;
  u_xlatb1 = (180.0f < x_1225);
  let x_1227 : vec2<f32> = u_xlat12;
  u_xlat13 = (vec2<f32>(x_1227.x, x_1227.x) + vec2<f32>(360.0f, -360.0f));
  let x_1232 : bool = u_xlatb1;
  if (x_1232) {
    let x_1237 : f32 = u_xlat13.y;
    x_1233 = x_1237;
  } else {
    let x_1240 : f32 = u_xlat12.x;
    x_1233 = x_1240;
  }
  let x_1241 : f32 = x_1233;
  u_xlat12.x = x_1241;
  let x_1243 : bool = u_xlatb18;
  if (x_1243) {
    let x_1248 : f32 = u_xlat13.x;
    x_1244 = x_1248;
  } else {
    let x_1251 : f32 = u_xlat12.x;
    x_1244 = x_1251;
  }
  let x_1252 : f32 = x_1244;
  u_xlat12.x = x_1252;
  let x_1255 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1255 * 0.014814815f);
  let x_1260 : f32 = u_xlat12.x;
  u_xlat12.x = (-(abs(x_1260)) + 1.0f);
  let x_1266 : f32 = u_xlat12.x;
  u_xlat12.x = max(x_1266, 0.0f);
  let x_1270 : f32 = u_xlat12.x;
  u_xlat18 = ((x_1270 * -2.0f) + 3.0f);
  let x_1275 : f32 = u_xlat12.x;
  let x_1277 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1275 * x_1277);
  let x_1281 : f32 = u_xlat12.x;
  let x_1282 : f32 = u_xlat18;
  u_xlat12.x = (x_1281 * x_1282);
  let x_1286 : f32 = u_xlat12.x;
  let x_1288 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1286 * x_1288);
  let x_1292 : f32 = u_xlat0.x;
  let x_1294 : f32 = u_xlat12.x;
  u_xlat0.x = (x_1292 * x_1294);
  let x_1298 : f32 = u_xlat7.x;
  let x_1301 : f32 = u_xlat6.x;
  u_xlat6.x = ((-(x_1298) * x_1301) + 0.029999999f);
  let x_1307 : f32 = u_xlat6.x;
  let x_1309 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1307 * x_1309);
  let x_1313 : f32 = u_xlat0.x;
  let x_1317 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1313 * 0.180000007f) + x_1317);
  let x_1324 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_1324.x, x_1324.z, x_1324.w));
  let x_1332 : vec4<f32> = u_xlat2;
  u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_1332.x, x_1332.z, x_1332.w));
  let x_1340 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_1340.x, x_1340.z, x_1340.w));
  let x_1344 : vec4<f32> = u_xlat0;
  let x_1347 : vec3<f32> = max(vec3<f32>(x_1344.x, x_1344.y, x_1344.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1348 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1347.x, x_1347.y, x_1347.z, x_1348.w);
  let x_1350 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1350.x, x_1350.y, x_1350.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1357 : f32 = u_xlat18;
  let x_1360 : vec4<f32> = u_xlat0;
  let x_1362 : vec3<f32> = (-(vec3<f32>(x_1357, x_1357, x_1357)) + vec3<f32>(x_1360.x, x_1360.y, x_1360.z));
  let x_1363 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1362.x, x_1362.y, x_1362.z, x_1363.w);
  let x_1365 : vec4<f32> = u_xlat0;
  let x_1370 : f32 = u_xlat18;
  let x_1372 : vec3<f32> = ((vec3<f32>(x_1365.x, x_1365.y, x_1365.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f)) + vec3<f32>(x_1370, x_1370, x_1370));
  let x_1373 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1372.x, x_1372.y, x_1372.z, x_1373.w);
  let x_1375 : vec4<f32> = u_xlat0;
  let x_1379 : vec3<f32> = (vec3<f32>(x_1375.x, x_1375.y, x_1375.z) + vec3<f32>(0.024578599f, 0.024578599f, 0.024578599f));
  let x_1380 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1379.x, x_1379.y, x_1379.z, x_1380.w);
  let x_1382 : vec4<f32> = u_xlat0;
  let x_1384 : vec4<f32> = u_xlat1;
  let x_1389 : vec3<f32> = ((vec3<f32>(x_1382.x, x_1382.y, x_1382.z) * vec3<f32>(x_1384.x, x_1384.y, x_1384.z)) + vec3<f32>(-0.000090537f, -0.000090537f, -0.000090537f));
  let x_1390 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1389.x, x_1389.y, x_1389.z, x_1390.w);
  let x_1392 : vec4<f32> = u_xlat0;
  let x_1399 : vec3<f32> = ((vec3<f32>(x_1392.x, x_1392.y, x_1392.z) * vec3<f32>(0.983729005f, 0.983729005f, 0.983729005f)) + vec3<f32>(0.432951003f, 0.432951003f, 0.432951003f));
  let x_1400 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1399.x, x_1399.y, x_1399.z, x_1400.w);
  let x_1402 : vec4<f32> = u_xlat0;
  let x_1404 : vec4<f32> = u_xlat2;
  let x_1409 : vec3<f32> = ((vec3<f32>(x_1402.x, x_1402.y, x_1402.z) * vec3<f32>(x_1404.x, x_1404.y, x_1404.z)) + vec3<f32>(0.238080993f, 0.238080993f, 0.238080993f));
  let x_1410 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1409.x, x_1409.y, x_1409.z, x_1410.w);
  let x_1412 : vec4<f32> = u_xlat1;
  let x_1414 : vec4<f32> = u_xlat0;
  let x_1416 : vec3<f32> = (vec3<f32>(x_1412.x, x_1412.y, x_1412.z) / vec3<f32>(x_1414.x, x_1414.y, x_1414.z));
  let x_1417 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1416.x, x_1416.y, x_1416.z, x_1417.w);
  let x_1423 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1423.x, x_1423.y, x_1423.z));
  let x_1431 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1431.x, x_1431.y, x_1431.z));
  let x_1439 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1439.x, x_1439.y, x_1439.z));
  let x_1443 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(x_1443.x, x_1443.y, x_1443.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1448 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1448, 0.0001f);
  let x_1451 : vec4<f32> = u_xlat1;
  let x_1453 : vec4<f32> = u_xlat0;
  let x_1455 : vec2<f32> = (vec2<f32>(x_1451.x, x_1451.y) / vec2<f32>(x_1453.x, x_1453.x));
  let x_1456 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1455.x, x_1455.y, x_1456.z, x_1456.w);
  let x_1459 : f32 = u_xlat1.y;
  u_xlat18 = max(x_1459, 0.0f);
  let x_1461 : f32 = u_xlat18;
  u_xlat18 = min(x_1461, 65504.0f);
  let x_1464 : f32 = u_xlat18;
  u_xlat18 = log2(x_1464);
  let x_1466 : f32 = u_xlat18;
  u_xlat18 = (x_1466 * 0.981100023f);
  let x_1469 : f32 = u_xlat18;
  u_xlat1.y = exp2(x_1469);
  let x_1473 : f32 = u_xlat0.y;
  u_xlat18 = max(x_1473, 0.0001f);
  let x_1476 : f32 = u_xlat1.y;
  let x_1477 : f32 = u_xlat18;
  u_xlat18 = (x_1476 / x_1477);
  let x_1480 : f32 = u_xlat0.x;
  u_xlat19 = (-(x_1480) + 1.0f);
  let x_1484 : f32 = u_xlat0.y;
  let x_1486 : f32 = u_xlat19;
  u_xlat0.z = (-(x_1484) + x_1486);
  let x_1489 : f32 = u_xlat18;
  let x_1491 : vec4<f32> = u_xlat0;
  let x_1493 : vec2<f32> = (vec2<f32>(x_1489, x_1489) * vec2<f32>(x_1491.x, x_1491.z));
  let x_1494 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1493.x, x_1494.y, x_1493.y, x_1494.w);
  let x_1500 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(1.641023397f, -0.324803293f, -0.236424699f), vec3<f32>(x_1500.x, x_1500.y, x_1500.z));
  let x_1508 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.663662851f, 1.61533165f, 0.016756348f), vec3<f32>(x_1508.x, x_1508.y, x_1508.z));
  let x_1516 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.011721894f, -0.008284442f, 0.988394856f), vec3<f32>(x_1516.x, x_1516.y, x_1516.z));
  let x_1520 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1520.x, x_1520.y, x_1520.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1523 : f32 = u_xlat18;
  let x_1526 : vec4<f32> = u_xlat0;
  let x_1528 : vec3<f32> = (-(vec3<f32>(x_1523, x_1523, x_1523)) + vec3<f32>(x_1526.x, x_1526.y, x_1526.z));
  let x_1529 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1528.x, x_1528.y, x_1528.z, x_1529.w);
  let x_1531 : vec4<f32> = u_xlat0;
  let x_1536 : f32 = u_xlat18;
  let x_1538 : vec3<f32> = ((vec3<f32>(x_1531.x, x_1531.y, x_1531.z) * vec3<f32>(0.930000007f, 0.930000007f, 0.930000007f)) + vec3<f32>(x_1536, x_1536, x_1536));
  let x_1539 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1538.x, x_1538.y, x_1538.z, x_1539.w);
  let x_1541 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1541.x, x_1541.y, x_1541.z));
  let x_1545 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1545.x, x_1545.y, x_1545.z));
  let x_1549 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1549.x, x_1549.y, x_1549.z));
  let x_1557 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(0.987223983f, -0.00611327f, 0.015953301f), vec3<f32>(x_1557.x, x_1557.y, x_1557.z));
  let x_1565 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.00759836f, 1.001860023f, 0.0053302f), vec3<f32>(x_1565.x, x_1565.y, x_1565.z));
  let x_1573 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.00307257f, -0.00509595f, 1.081680059f), vec3<f32>(x_1573.x, x_1573.y, x_1573.z));
  let x_1581 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(3.240969896f, -1.537383199f, -0.498610765f), vec3<f32>(x_1581.x, x_1581.y, x_1581.z));
  let x_1586 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1586, 0.0f, 1.0f);
  let x_1593 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(-0.969243646f, 1.875967503f, 0.041555058f), vec3<f32>(x_1593.x, x_1593.y, x_1593.z));
  let x_1598 : f32 = u_xlat1.y;
  u_xlat1.y = clamp(x_1598, 0.0f, 1.0f);
  let x_1605 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(0.05563008f, -0.203976959f, 1.05697155f), vec3<f32>(x_1605.x, x_1605.y, x_1605.z));
  let x_1610 : f32 = u_xlat1.z;
  u_xlat1.z = clamp(x_1610, 0.0f, 1.0f);
  let x_1615 : f32 = x_25.x_UserLut_Params.w;
  u_xlatb0.x = (0.0f < x_1615);
  let x_1619 : bool = u_xlatb0.x;
  if (x_1619) {
    let x_1622 : vec4<f32> = u_xlat1;
    let x_1626 : vec3<f32> = (vec3<f32>(x_1622.x, x_1622.y, x_1622.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
    let x_1627 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1626.x, x_1626.y, x_1626.z, x_1627.w);
    let x_1629 : vec4<f32> = u_xlat1;
    let x_1631 : vec3<f32> = log2(vec3<f32>(x_1629.x, x_1629.y, x_1629.z));
    let x_1632 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1631.x, x_1631.y, x_1631.z, x_1632.w);
    let x_1634 : vec4<f32> = u_xlat2;
    let x_1638 : vec3<f32> = (vec3<f32>(x_1634.x, x_1634.y, x_1634.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
    let x_1639 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1638.x, x_1638.y, x_1638.z, x_1639.w);
    let x_1641 : vec4<f32> = u_xlat2;
    let x_1643 : vec3<f32> = exp2(vec3<f32>(x_1641.x, x_1641.y, x_1641.z));
    let x_1644 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1643.x, x_1643.y, x_1643.z, x_1644.w);
    let x_1646 : vec4<f32> = u_xlat2;
    let x_1653 : vec3<f32> = ((vec3<f32>(x_1646.x, x_1646.y, x_1646.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
    let x_1654 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1653.x, x_1653.y, x_1653.z, x_1654.w);
    let x_1658 : vec4<f32> = u_xlat1;
    let x_1660 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1658.x, x_1658.y, x_1658.z, x_1658.x));
    u_xlatb3 = vec3<bool>(x_1660.x, x_1660.y, x_1660.z);
    let x_1663 : vec4<f32> = u_xlat0;
    hlslcc_movcTemp = x_1663;
    let x_1665 : bool = u_xlatb3.x;
    if (x_1665) {
      let x_1670 : f32 = u_xlat0.x;
      x_1666 = x_1670;
    } else {
      let x_1673 : f32 = u_xlat2.x;
      x_1666 = x_1673;
    }
    let x_1674 : f32 = x_1666;
    hlslcc_movcTemp.x = x_1674;
    let x_1677 : bool = u_xlatb3.y;
    if (x_1677) {
      let x_1682 : f32 = u_xlat0.y;
      x_1678 = x_1682;
    } else {
      let x_1685 : f32 = u_xlat2.y;
      x_1678 = x_1685;
    }
    let x_1686 : f32 = x_1678;
    hlslcc_movcTemp.y = x_1686;
    let x_1689 : bool = u_xlatb3.z;
    if (x_1689) {
      let x_1694 : f32 = u_xlat0.z;
      x_1690 = x_1694;
    } else {
      let x_1697 : f32 = u_xlat2.z;
      x_1690 = x_1697;
    }
    let x_1698 : f32 = x_1690;
    hlslcc_movcTemp.z = x_1698;
    let x_1700 : vec4<f32> = hlslcc_movcTemp;
    u_xlat0 = x_1700;
    let x_1701 : vec4<f32> = u_xlat0;
    let x_1704 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1706 : vec3<f32> = (vec3<f32>(x_1701.z, x_1701.x, x_1701.y) * vec3<f32>(x_1704.z, x_1704.z, x_1704.z));
    let x_1707 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1706.x, x_1706.y, x_1706.z, x_1707.w);
    let x_1710 : f32 = u_xlat2.x;
    u_xlat18 = floor(x_1710);
    let x_1713 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1715 : vec2<f32> = (vec2<f32>(x_1713.x, x_1713.y) * vec2<f32>(0.5f, 0.5f));
    let x_1716 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1715.x, x_1716.y, x_1716.z, x_1715.y);
    let x_1718 : vec4<f32> = u_xlat2;
    let x_1721 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1724 : vec4<f32> = u_xlat2;
    let x_1726 : vec2<f32> = ((vec2<f32>(x_1718.y, x_1718.z) * vec2<f32>(x_1721.x, x_1721.y)) + vec2<f32>(x_1724.x, x_1724.w));
    let x_1727 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1727.x, x_1726.x, x_1726.y, x_1727.w);
    let x_1729 : f32 = u_xlat18;
    let x_1731 : f32 = x_25.x_UserLut_Params.y;
    let x_1734 : f32 = u_xlat2.y;
    u_xlat2.x = ((x_1729 * x_1731) + x_1734);
    let x_1741 : vec4<f32> = u_xlat2;
    let x_1743 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1741.x, x_1741.z), 0.0f);
    let x_1744 : vec3<f32> = vec3<f32>(x_1743.x, x_1743.y, x_1743.z);
    let x_1745 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1744.x, x_1744.y, x_1744.z, x_1745.w);
    let x_1748 : f32 = x_25.x_UserLut_Params.y;
    u_xlat4.x = x_1748;
    u_xlat4.y = 0.0f;
    let x_1751 : vec4<f32> = u_xlat2;
    let x_1753 : vec2<f32> = u_xlat4;
    let x_1754 : vec2<f32> = (vec2<f32>(x_1751.x, x_1751.z) + x_1753);
    let x_1755 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1754.x, x_1754.y, x_1755.z, x_1755.w);
    let x_1760 : vec4<f32> = u_xlat2;
    let x_1762 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1760.x, x_1760.y), 0.0f);
    let x_1763 : vec3<f32> = vec3<f32>(x_1762.x, x_1762.y, x_1762.z);
    let x_1764 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1763.x, x_1763.y, x_1763.z, x_1764.w);
    let x_1767 : f32 = u_xlat0.z;
    let x_1769 : f32 = x_25.x_UserLut_Params.z;
    let x_1771 : f32 = u_xlat18;
    u_xlat18 = ((x_1767 * x_1769) + -(x_1771));
    let x_1774 : vec4<f32> = u_xlat3;
    let x_1777 : vec4<f32> = u_xlat2;
    let x_1779 : vec3<f32> = (-(vec3<f32>(x_1774.x, x_1774.y, x_1774.z)) + vec3<f32>(x_1777.x, x_1777.y, x_1777.z));
    let x_1780 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1779.x, x_1779.y, x_1779.z, x_1780.w);
    let x_1782 : f32 = u_xlat18;
    let x_1784 : vec4<f32> = u_xlat2;
    let x_1787 : vec4<f32> = u_xlat3;
    let x_1789 : vec3<f32> = ((vec3<f32>(x_1782, x_1782, x_1782) * vec3<f32>(x_1784.x, x_1784.y, x_1784.z)) + vec3<f32>(x_1787.x, x_1787.y, x_1787.z));
    let x_1790 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1789.x, x_1789.y, x_1789.z, x_1790.w);
    let x_1792 : vec4<f32> = u_xlat0;
    let x_1795 : vec4<f32> = u_xlat2;
    let x_1797 : vec3<f32> = (-(vec3<f32>(x_1792.x, x_1792.y, x_1792.z)) + vec3<f32>(x_1795.x, x_1795.y, x_1795.z));
    let x_1798 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1797.x, x_1797.y, x_1797.z, x_1798.w);
    let x_1801 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1803 : vec4<f32> = u_xlat2;
    let x_1806 : vec4<f32> = u_xlat0;
    let x_1808 : vec3<f32> = ((vec3<f32>(x_1801.w, x_1801.w, x_1801.w) * vec3<f32>(x_1803.x, x_1803.y, x_1803.z)) + vec3<f32>(x_1806.x, x_1806.y, x_1806.z));
    let x_1809 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1808.x, x_1808.y, x_1808.z, x_1809.w);
    let x_1811 : vec4<f32> = u_xlat0;
    let x_1815 : vec3<f32> = (vec3<f32>(x_1811.x, x_1811.y, x_1811.z) * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
    let x_1816 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1815.x, x_1815.y, x_1815.z, x_1816.w);
    let x_1818 : vec4<f32> = u_xlat0;
    let x_1822 : vec3<f32> = (vec3<f32>(x_1818.x, x_1818.y, x_1818.z) + vec3<f32>(0.055f, 0.055f, 0.055f));
    let x_1823 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1822.x, x_1822.y, x_1822.z, x_1823.w);
    let x_1825 : vec4<f32> = u_xlat3;
    let x_1829 : vec3<f32> = (vec3<f32>(x_1825.x, x_1825.y, x_1825.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
    let x_1830 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1829.x, x_1829.y, x_1829.z, x_1830.w);
    let x_1832 : vec4<f32> = u_xlat3;
    let x_1835 : vec3<f32> = log2(abs(vec3<f32>(x_1832.x, x_1832.y, x_1832.z)));
    let x_1836 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1835.x, x_1835.y, x_1835.z, x_1836.w);
    let x_1838 : vec4<f32> = u_xlat3;
    let x_1842 : vec3<f32> = (vec3<f32>(x_1838.x, x_1838.y, x_1838.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
    let x_1843 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1842.z, x_1843.w);
    let x_1845 : vec4<f32> = u_xlat3;
    let x_1847 : vec3<f32> = exp2(vec3<f32>(x_1845.x, x_1845.y, x_1845.z));
    let x_1848 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1847.x, x_1847.y, x_1847.z, x_1848.w);
    let x_1852 : vec4<f32> = u_xlat0;
    let x_1854 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_1852.x, x_1852.y, x_1852.z, x_1852.x));
    u_xlatb0 = vec3<bool>(x_1854.x, x_1854.y, x_1854.z);
    let x_1857 : bool = u_xlatb0.x;
    if (x_1857) {
      let x_1862 : f32 = u_xlat2.x;
      x_1858 = x_1862;
    } else {
      let x_1865 : f32 = u_xlat3.x;
      x_1858 = x_1865;
    }
    let x_1866 : f32 = x_1858;
    u_xlat1.x = x_1866;
    let x_1869 : bool = u_xlatb0.y;
    if (x_1869) {
      let x_1874 : f32 = u_xlat2.y;
      x_1870 = x_1874;
    } else {
      let x_1877 : f32 = u_xlat3.y;
      x_1870 = x_1877;
    }
    let x_1878 : f32 = x_1870;
    u_xlat1.y = x_1878;
    let x_1881 : bool = u_xlatb0.z;
    if (x_1881) {
      let x_1886 : f32 = u_xlat2.z;
      x_1882 = x_1886;
    } else {
      let x_1889 : f32 = u_xlat3.z;
      x_1882 = x_1889;
    }
    let x_1890 : f32 = x_1882;
    u_xlat1.z = x_1890;
  }
  let x_1892 : vec4<f32> = u_xlat1;
  let x_1895 : vec4<f32> = x_25.x_Lut_Params;
  let x_1897 : vec3<f32> = (vec3<f32>(x_1892.z, x_1892.x, x_1892.y) * vec3<f32>(x_1895.z, x_1895.z, x_1895.z));
  let x_1898 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1897.x, x_1897.y, x_1897.z, x_1898.w);
  let x_1901 : f32 = u_xlat0.x;
  u_xlat0.x = floor(x_1901);
  let x_1905 : vec4<f32> = x_25.x_Lut_Params;
  let x_1907 : vec2<f32> = (vec2<f32>(x_1905.x, x_1905.y) * vec2<f32>(0.5f, 0.5f));
  let x_1908 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1907.x, x_1907.y, x_1908.z, x_1908.w);
  let x_1910 : vec4<f32> = u_xlat0;
  let x_1913 : vec4<f32> = x_25.x_Lut_Params;
  let x_1916 : vec4<f32> = u_xlat1;
  let x_1918 : vec2<f32> = ((vec2<f32>(x_1910.y, x_1910.z) * vec2<f32>(x_1913.x, x_1913.y)) + vec2<f32>(x_1916.x, x_1916.y));
  let x_1919 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1919.x, x_1918.x, x_1918.y, x_1919.w);
  let x_1922 : f32 = u_xlat0.x;
  let x_1924 : f32 = x_25.x_Lut_Params.y;
  let x_1927 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1922 * x_1924) + x_1927);
  let x_1934 : vec4<f32> = u_xlat2;
  let x_1936 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1934.x, x_1934.z), 0.0f);
  u_xlat6 = vec3<f32>(x_1936.x, x_1936.y, x_1936.z);
  let x_1939 : f32 = x_25.x_Lut_Params.y;
  u_xlat1.x = x_1939;
  u_xlat1.y = 0.0f;
  let x_1942 : vec4<f32> = u_xlat1;
  let x_1944 : vec4<f32> = u_xlat2;
  let x_1946 : vec2<f32> = (vec2<f32>(x_1942.x, x_1942.y) + vec2<f32>(x_1944.x, x_1944.z));
  let x_1947 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1946.x, x_1946.y, x_1947.z, x_1947.w);
  let x_1952 : vec4<f32> = u_xlat1;
  let x_1954 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1952.x, x_1952.y), 0.0f);
  let x_1955 : vec3<f32> = vec3<f32>(x_1954.x, x_1954.y, x_1954.z);
  let x_1956 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1955.x, x_1955.y, x_1956.z, x_1955.z);
  let x_1959 : f32 = u_xlat1.z;
  let x_1961 : f32 = x_25.x_Lut_Params.z;
  let x_1964 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1959 * x_1961) + -(x_1964));
  let x_1968 : vec3<f32> = u_xlat6;
  let x_1970 : vec4<f32> = u_xlat1;
  let x_1972 : vec3<f32> = (-(x_1968) + vec3<f32>(x_1970.x, x_1970.y, x_1970.w));
  let x_1973 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1972.x, x_1972.y, x_1972.z, x_1973.w);
  let x_1975 : vec4<f32> = u_xlat0;
  let x_1977 : vec4<f32> = u_xlat1;
  let x_1980 : vec3<f32> = u_xlat6;
  let x_1981 : vec3<f32> = ((vec3<f32>(x_1975.x, x_1975.x, x_1975.x) * vec3<f32>(x_1977.x, x_1977.y, x_1977.z)) + x_1980);
  let x_1982 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1981.x, x_1981.y, x_1981.z, x_1982.w);
  let x_1984 : vec4<f32> = u_xlat0;
  let x_1986 : vec3<f32> = (vec3<f32>(x_1984.x, x_1984.y, x_1984.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
  let x_1987 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1986.x, x_1986.y, x_1986.z, x_1987.w);
  let x_1989 : vec4<f32> = u_xlat0;
  let x_1992 : vec3<f32> = log2(abs(vec3<f32>(x_1989.x, x_1989.y, x_1989.z)));
  let x_1993 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1992.x, x_1992.y, x_1992.z, x_1993.w);
  let x_1995 : vec4<f32> = u_xlat2;
  let x_1997 : vec3<f32> = (vec3<f32>(x_1995.x, x_1995.y, x_1995.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
  let x_1998 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1997.x, x_1997.y, x_1997.z, x_1998.w);
  let x_2000 : vec4<f32> = u_xlat2;
  let x_2002 : vec3<f32> = exp2(vec3<f32>(x_2000.x, x_2000.y, x_2000.z));
  let x_2003 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2002.x, x_2002.y, x_2002.z, x_2003.w);
  let x_2005 : vec4<f32> = u_xlat2;
  let x_2008 : vec3<f32> = ((vec3<f32>(x_2005.x, x_2005.y, x_2005.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
  let x_2009 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2008.x, x_2008.y, x_2008.z, x_2009.w);
  let x_2011 : vec4<f32> = u_xlat0;
  let x_2013 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_2011.x, x_2011.y, x_2011.z, x_2011.x));
  u_xlatb0 = vec3<bool>(x_2013.x, x_2013.y, x_2013.z);
  let x_2018 : bool = u_xlatb0.x;
  if (x_2018) {
    let x_2023 : f32 = u_xlat1.x;
    x_2019 = x_2023;
  } else {
    let x_2026 : f32 = u_xlat2.x;
    x_2019 = x_2026;
  }
  let x_2027 : f32 = x_2019;
  SV_Target0.x = x_2027;
  let x_2031 : bool = u_xlatb0.y;
  if (x_2031) {
    let x_2036 : f32 = u_xlat1.y;
    x_2032 = x_2036;
  } else {
    let x_2039 : f32 = u_xlat2.y;
    x_2032 = x_2039;
  }
  let x_2040 : f32 = x_2032;
  SV_Target0.y = x_2040;
  let x_2043 : bool = u_xlatb0.z;
  if (x_2043) {
    let x_2048 : f32 = u_xlat1.z;
    x_2044 = x_2048;
  } else {
    let x_2051 : f32 = u_xlat2.z;
    x_2044 = x_2051;
  }
  let x_2052 : f32 = x_2044;
  SV_Target0.z = x_2052;
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

