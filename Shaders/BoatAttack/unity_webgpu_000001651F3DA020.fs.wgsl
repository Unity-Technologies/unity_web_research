type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_139 : PGlobals;

@group(1) @binding(6) var<uniform> x_149 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_253 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3351 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3828 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3937 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb0 : bool;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1756 : f32;
  var u_xlat69 : f32;
  var u_xlatb47 : bool;
  var x_1879 : vec3<f32>;
  var u_xlat70 : f32;
  var u_xlat51 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3300 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3434 : f32;
  var x_3445 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat72 : f32;
  var u_xlatu73 : u32;
  var u_xlati52 : i32;
  var u_xlati73 : i32;
  var u_xlati74 : i32;
  var u_xlat56 : vec2<f32>;
  var u_xlatb52 : vec2<bool>;
  var x_4229 : f32;
  var x_4242 : f32;
  var x_4294 : f32;
  var x_4305 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat22.y;
  let x_82 : f32 = u_xlat22.x;
  u_xlat22.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat22;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  let x_112 : vec3<f32> = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_113 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_112.x, x_112.y, x_112.z, x_113.w);
  let x_116 : vec3<f32> = u_xlat22;
  let x_117 : vec3<f32> = u_xlat0;
  let x_119 : vec3<f32> = (x_116 * vec3<f32>(x_117.x, x_117.x, x_117.x));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_135 : vec4<f32> = vs_INTERP3;
  let x_142 : f32 = x_139.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_135.x, x_135.y), x_142);
  u_xlat4 = x_143;
  let x_145 : vec4<f32> = u_xlat4;
  let x_152 : vec4<f32> = x_149.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_145.x, x_145.y, x_145.z) * vec3<f32>(x_152.x, x_152.y, x_152.z));
  let x_161 : vec4<f32> = vs_INTERP3;
  let x_164 : f32 = x_139.x_GlobalMipBias.x;
  let x_165 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_161.x, x_161.y), x_164);
  u_xlat6 = vec4<f32>(x_165.w, x_165.x, x_165.y, x_165.z);
  let x_168 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_168.y, x_168.z, x_168.w, x_168.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_175 : vec4<f32> = u_xlat7;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_175, x_176);
  let x_180 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_180);
  let x_184 : vec3<f32> = u_xlat0;
  let x_186 : vec4<f32> = u_xlat7;
  u_xlat28 = (vec3<f32>(x_184.x, x_184.x, x_184.x) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_191 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_191 * 200.0f);
  let x_196 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, 1.0f);
  let x_199 : vec3<f32> = u_xlat0;
  let x_201 : vec4<f32> = u_xlat4;
  let x_203 : vec3<f32> = (vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat3;
  let x_208 : vec3<f32> = u_xlat28;
  let x_210 : vec3<f32> = (vec3<f32>(x_206.x, x_206.y, x_206.z) * vec3<f32>(x_208.y, x_208.y, x_208.y));
  let x_211 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat28;
  let x_215 : vec4<f32> = u_xlat2;
  let x_218 : vec4<f32> = u_xlat3;
  let x_220 : vec3<f32> = ((vec3<f32>(x_213.x, x_213.x, x_213.x) * vec3<f32>(x_215.x, x_215.y, x_215.z)) + vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_221 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_220.x, x_220.y, x_220.z, x_221.w);
  let x_223 : vec3<f32> = u_xlat28;
  let x_225 : vec3<f32> = u_xlat1;
  let x_227 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_223.z, x_223.z, x_223.z) * x_225) + vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_230 : vec3<f32> = u_xlat1;
  let x_231 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_230, x_231);
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_235, 1.17549435e-37f);
  let x_240 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_240);
  let x_243 : vec3<f32> = u_xlat0;
  let x_245 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_243.x, x_243.x, x_243.x) * x_245);
  let x_248 : vec3<f32> = vs_INTERP0;
  let x_255 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres0;
  let x_258 : vec3<f32> = (x_248 + -(vec3<f32>(x_255.x, x_255.y, x_255.z)));
  let x_259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec3<f32> = vs_INTERP0;
  let x_264 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres1;
  let x_267 : vec3<f32> = (x_261 + -(vec3<f32>(x_264.x, x_264.y, x_264.z)));
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_270 : vec3<f32> = vs_INTERP0;
  let x_272 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres2;
  let x_275 : vec3<f32> = (x_270 + -(vec3<f32>(x_272.x, x_272.y, x_272.z)));
  let x_276 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_279 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres3;
  let x_285 : vec3<f32> = (x_279 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_288 : vec4<f32> = u_xlat2;
  let x_290 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_288.x, x_288.y, x_288.z), vec3<f32>(x_290.x, x_290.y, x_290.z));
  let x_294 : vec4<f32> = u_xlat3;
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_294.x, x_294.y, x_294.z), vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_300 : vec4<f32> = u_xlat7;
  let x_302 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_300.x, x_300.y, x_300.z), vec3<f32>(x_302.x, x_302.y, x_302.z));
  let x_306 : vec4<f32> = u_xlat8;
  let x_308 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_306.x, x_306.y, x_306.z), vec3<f32>(x_308.x, x_308.y, x_308.z));
  let x_315 : vec4<f32> = u_xlat2;
  let x_318 : vec4<f32> = x_253.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_315 < x_318);
  let x_321 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_321);
  let x_325 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_337);
  let x_342 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_342);
  let x_346 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_346);
  let x_349 : vec4<f32> = u_xlat2;
  let x_351 : vec4<f32> = u_xlat3;
  let x_353 : vec3<f32> = (vec3<f32>(x_349.x, x_349.y, x_349.z) + vec3<f32>(x_351.y, x_351.z, x_351.w));
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
  let x_356 : vec4<f32> = u_xlat2;
  let x_359 : vec3<f32> = max(vec3<f32>(x_356.x, x_356.y, x_356.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_360.x, x_359.x, x_359.y, x_359.z);
  let x_362 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_362, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_369) + 4.0f);
  let x_376 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_376);
  let x_380 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_380) << bitcast<u32>(2i));
  let x_383 : vec3<f32> = vs_INTERP0;
  let x_386 : i32 = u_xlati0;
  let x_389 : i32 = u_xlati0;
  let x_393 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_386 + 1i) / 4i)][((x_389 + 1i) % 4i)];
  let x_395 : vec3<f32> = (vec3<f32>(x_383.y, x_383.y, x_383.y) * vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_396 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_398 : i32 = u_xlati0;
  let x_400 : i32 = u_xlati0;
  let x_403 : vec4<f32> = x_253.x_MainLightWorldToShadow[(x_398 / 4i)][(x_400 % 4i)];
  let x_405 : vec3<f32> = vs_INTERP0;
  let x_408 : vec4<f32> = u_xlat2;
  let x_410 : vec3<f32> = ((vec3<f32>(x_403.x, x_403.y, x_403.z) * vec3<f32>(x_405.x, x_405.x, x_405.x)) + vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : i32 = u_xlati0;
  let x_416 : i32 = u_xlati0;
  let x_420 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_413 + 2i) / 4i)][((x_416 + 2i) % 4i)];
  let x_422 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = u_xlat2;
  let x_427 : vec3<f32> = ((vec3<f32>(x_420.x, x_420.y, x_420.z) * vec3<f32>(x_422.z, x_422.z, x_422.z)) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat2;
  let x_432 : i32 = u_xlati0;
  let x_435 : i32 = u_xlati0;
  let x_439 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_432 + 3i) / 4i)][((x_435 + 3i) % 4i)];
  let x_441 : vec3<f32> = (vec3<f32>(x_430.x, x_430.y, x_430.z) + vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_447 : f32 = x_253.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_447);
  let x_449 : bool = u_xlatb0;
  if (x_449) {
    let x_454 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb67 = (x_454 == 1.0f);
    let x_456 : bool = u_xlatb67;
    if (x_456) {
      let x_459 : vec4<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_481 : vec3<f32> = txVec0;
      let x_483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_481.xy, x_481.z);
      u_xlat7.x = x_483;
      let x_486 : vec4<f32> = u_xlat3;
      let x_487 : vec2<f32> = vec2<f32>(x_486.z, x_486.w);
      let x_489 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_487.x, x_487.y, x_489);
      let x_496 : vec3<f32> = txVec1;
      let x_498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_496.xy, x_496.z);
      u_xlat7.y = x_498;
      let x_500 : vec4<f32> = u_xlat2;
      let x_504 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_500.x, x_500.y, x_500.x, x_500.y) + x_504);
      let x_507 : vec4<f32> = u_xlat3;
      let x_508 : vec2<f32> = vec2<f32>(x_507.x, x_507.y);
      let x_510 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_508.x, x_508.y, x_510);
      let x_517 : vec3<f32> = txVec2;
      let x_519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_517.xy, x_517.z);
      u_xlat7.z = x_519;
      let x_522 : vec4<f32> = u_xlat3;
      let x_523 : vec2<f32> = vec2<f32>(x_522.z, x_522.w);
      let x_525 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_523.x, x_523.y, x_525);
      let x_532 : vec3<f32> = txVec3;
      let x_534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_532.xy, x_532.z);
      u_xlat7.w = x_534;
      let x_537 : vec4<f32> = u_xlat7;
      u_xlat67 = dot(x_537, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_544 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb68 = (x_544 == 2.0f);
      let x_546 : bool = u_xlatb68;
      if (x_546) {
        let x_549 : vec4<f32> = u_xlat2;
        let x_553 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_558 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.y) * vec2<f32>(x_553.z, x_553.w)) + vec2<f32>(0.5f, 0.5f));
        let x_559 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
        let x_561 : vec4<f32> = u_xlat3;
        let x_563 : vec2<f32> = floor(vec2<f32>(x_561.x, x_561.y));
        let x_564 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
        let x_568 : vec4<f32> = u_xlat2;
        let x_571 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_574 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_568.x, x_568.y) * vec2<f32>(x_571.z, x_571.w)) + -(vec2<f32>(x_574.x, x_574.y)));
        let x_578 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_578.x, x_578.x, x_578.y, x_578.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_582 : vec4<f32> = u_xlat7;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_582.x, x_582.x, x_582.z, x_582.z) * vec4<f32>(x_584.x, x_584.x, x_584.z, x_584.z));
        let x_587 : vec4<f32> = u_xlat8;
        let x_591 : vec2<f32> = (vec2<f32>(x_587.y, x_587.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_592 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_591.x, x_592.y, x_591.y, x_592.w);
        let x_594 : vec4<f32> = u_xlat8;
        let x_597 : vec2<f32> = u_xlat47;
        let x_599 : vec2<f32> = ((vec2<f32>(x_594.x, x_594.z) * vec2<f32>(0.5f, 0.5f)) + -(x_597));
        let x_600 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_599.x, x_599.y, x_600.z, x_600.w);
        let x_603 : vec2<f32> = u_xlat47;
        u_xlat52 = (-(x_603) + vec2<f32>(1.0f, 1.0f));
        let x_608 : vec2<f32> = u_xlat47;
        let x_610 : vec2<f32> = min(x_608, vec2<f32>(0.0f, 0.0f));
        let x_611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_613 : vec4<f32> = u_xlat9;
        let x_616 : vec4<f32> = u_xlat9;
        let x_619 : vec2<f32> = u_xlat52;
        let x_620 : vec2<f32> = ((-(vec2<f32>(x_613.x, x_613.y)) * vec2<f32>(x_616.x, x_616.y)) + x_619);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_623, vec2<f32>(0.0f, 0.0f));
        let x_625 : vec2<f32> = u_xlat47;
        let x_627 : vec2<f32> = u_xlat47;
        let x_629 : vec4<f32> = u_xlat7;
        u_xlat47 = ((-(x_625) * x_627) + vec2<f32>(x_629.y, x_629.w));
        let x_632 : vec4<f32> = u_xlat9;
        let x_634 : vec2<f32> = (vec2<f32>(x_632.x, x_632.y) + vec2<f32>(1.0f, 1.0f));
        let x_635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_637 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_637 + vec2<f32>(1.0f, 1.0f));
        let x_640 : vec4<f32> = u_xlat8;
        let x_644 : vec2<f32> = (vec2<f32>(x_640.x, x_640.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat52;
        let x_648 : vec2<f32> = (x_647 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_648.x, x_648.y, x_649.z, x_649.w);
        let x_651 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_651.x, x_651.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_657 : vec2<f32> = u_xlat47;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat7;
        u_xlat47 = (vec2<f32>(x_661.y, x_661.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_665 : f32 = u_xlat9.x;
        u_xlat10.z = x_665;
        let x_668 : f32 = u_xlat47.x;
        u_xlat10.w = x_668;
        let x_671 : f32 = u_xlat11.x;
        u_xlat8.z = x_671;
        let x_674 : f32 = u_xlat7.x;
        u_xlat8.w = x_674;
        let x_677 : vec4<f32> = u_xlat8;
        let x_679 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_677.z, x_677.w, x_677.x, x_677.z) + vec4<f32>(x_679.z, x_679.w, x_679.x, x_679.z));
        let x_683 : f32 = u_xlat10.y;
        u_xlat9.z = x_683;
        let x_686 : f32 = u_xlat47.y;
        u_xlat9.w = x_686;
        let x_689 : f32 = u_xlat8.y;
        u_xlat11.z = x_689;
        let x_692 : f32 = u_xlat7.z;
        u_xlat11.w = x_692;
        let x_694 : vec4<f32> = u_xlat9;
        let x_696 : vec4<f32> = u_xlat11;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.z, x_694.y, x_694.w) + vec3<f32>(x_696.z, x_696.y, x_696.w));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_703 : vec4<f32> = u_xlat12;
        let x_705 : vec3<f32> = (vec3<f32>(x_701.x, x_701.z, x_701.w) / vec3<f32>(x_703.z, x_703.w, x_703.y));
        let x_706 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
        let x_708 : vec4<f32> = u_xlat8;
        let x_714 : vec3<f32> = (vec3<f32>(x_708.x, x_708.y, x_708.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_715 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat11;
        let x_719 : vec4<f32> = u_xlat7;
        let x_721 : vec3<f32> = (vec3<f32>(x_717.z, x_717.y, x_717.w) / vec3<f32>(x_719.x, x_719.y, x_719.z));
        let x_722 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
        let x_724 : vec4<f32> = u_xlat9;
        let x_726 : vec3<f32> = (vec3<f32>(x_724.x, x_724.y, x_724.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_726.x, x_726.y, x_726.z, x_727.w);
        let x_729 : vec4<f32> = u_xlat8;
        let x_732 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_734 : vec3<f32> = (vec3<f32>(x_729.y, x_729.x, x_729.z) * vec3<f32>(x_732.x, x_732.x, x_732.x));
        let x_735 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_734.x, x_734.y, x_734.z, x_735.w);
        let x_737 : vec4<f32> = u_xlat9;
        let x_740 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_742 : vec3<f32> = (vec3<f32>(x_737.x, x_737.y, x_737.z) * vec3<f32>(x_740.y, x_740.y, x_740.y));
        let x_743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
        let x_746 : f32 = u_xlat9.x;
        u_xlat8.w = x_746;
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.y, x_754.w, x_754.x, x_754.w));
        let x_757 : vec4<f32> = u_xlat3;
        let x_760 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat8;
        u_xlat47 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_760.x, x_760.y)) + vec2<f32>(x_763.z, x_763.w));
        let x_767 : f32 = u_xlat8.y;
        u_xlat9.w = x_767;
        let x_769 : vec4<f32> = u_xlat9;
        let x_770 : vec2<f32> = vec2<f32>(x_769.y, x_769.z);
        let x_771 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_771.x, x_770.x, x_771.z, x_770.y);
        let x_773 : vec4<f32> = u_xlat3;
        let x_776 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_779 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_773.x, x_773.y, x_773.x, x_773.y) * vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y)) + vec4<f32>(x_779.x, x_779.y, x_779.z, x_779.y));
        let x_782 : vec4<f32> = u_xlat3;
        let x_785 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.w, x_788.y, x_788.w, x_788.z));
        let x_791 : vec4<f32> = u_xlat3;
        let x_794 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.x, x_797.w, x_797.z, x_797.w));
        let x_801 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_801.x, x_801.x, x_801.x, x_801.y) * vec4<f32>(x_803.z, x_803.w, x_803.y, x_803.z));
        let x_807 : vec4<f32> = u_xlat7;
        let x_809 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_807.y, x_807.y, x_807.z, x_807.z) * x_809);
        let x_813 : f32 = u_xlat7.z;
        let x_815 : f32 = u_xlat12.y;
        u_xlat68 = (x_813 * x_815);
        let x_818 : vec4<f32> = u_xlat10;
        let x_819 : vec2<f32> = vec2<f32>(x_818.x, x_818.y);
        let x_821 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_819.x, x_819.y, x_821);
        let x_828 : vec3<f32> = txVec4;
        let x_830 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_828.xy, x_828.z);
        u_xlat3.x = x_830;
        let x_833 : vec4<f32> = u_xlat10;
        let x_834 : vec2<f32> = vec2<f32>(x_833.z, x_833.w);
        let x_836 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_834.x, x_834.y, x_836);
        let x_844 : vec3<f32> = txVec5;
        let x_846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_844.xy, x_844.z);
        u_xlat25 = x_846;
        let x_847 : f32 = u_xlat25;
        let x_849 : f32 = u_xlat13.y;
        u_xlat25 = (x_847 * x_849);
        let x_852 : f32 = u_xlat13.x;
        let x_854 : f32 = u_xlat3.x;
        let x_856 : f32 = u_xlat25;
        u_xlat3.x = ((x_852 * x_854) + x_856);
        let x_860 : vec2<f32> = u_xlat47;
        let x_862 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_860.x, x_860.y, x_862);
        let x_869 : vec3<f32> = txVec6;
        let x_871 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_869.xy, x_869.z);
        u_xlat25 = x_871;
        let x_873 : f32 = u_xlat13.z;
        let x_874 : f32 = u_xlat25;
        let x_877 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_873 * x_874) + x_877);
        let x_881 : vec4<f32> = u_xlat9;
        let x_882 : vec2<f32> = vec2<f32>(x_881.x, x_881.y);
        let x_884 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_882.x, x_882.y, x_884);
        let x_891 : vec3<f32> = txVec7;
        let x_893 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_891.xy, x_891.z);
        u_xlat25 = x_893;
        let x_895 : f32 = u_xlat13.w;
        let x_896 : f32 = u_xlat25;
        let x_899 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_895 * x_896) + x_899);
        let x_903 : vec4<f32> = u_xlat11;
        let x_904 : vec2<f32> = vec2<f32>(x_903.x, x_903.y);
        let x_906 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_904.x, x_904.y, x_906);
        let x_913 : vec3<f32> = txVec8;
        let x_915 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_913.xy, x_913.z);
        u_xlat25 = x_915;
        let x_917 : f32 = u_xlat14.x;
        let x_918 : f32 = u_xlat25;
        let x_921 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_917 * x_918) + x_921);
        let x_925 : vec4<f32> = u_xlat11;
        let x_926 : vec2<f32> = vec2<f32>(x_925.z, x_925.w);
        let x_928 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_926.x, x_926.y, x_928);
        let x_935 : vec3<f32> = txVec9;
        let x_937 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_935.xy, x_935.z);
        u_xlat25 = x_937;
        let x_939 : f32 = u_xlat14.y;
        let x_940 : f32 = u_xlat25;
        let x_943 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_939 * x_940) + x_943);
        let x_947 : vec4<f32> = u_xlat9;
        let x_948 : vec2<f32> = vec2<f32>(x_947.z, x_947.w);
        let x_950 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_948.x, x_948.y, x_950);
        let x_957 : vec3<f32> = txVec10;
        let x_959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_957.xy, x_957.z);
        u_xlat25 = x_959;
        let x_961 : f32 = u_xlat14.z;
        let x_962 : f32 = u_xlat25;
        let x_965 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_961 * x_962) + x_965);
        let x_969 : vec4<f32> = u_xlat8;
        let x_970 : vec2<f32> = vec2<f32>(x_969.x, x_969.y);
        let x_972 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_970.x, x_970.y, x_972);
        let x_979 : vec3<f32> = txVec11;
        let x_981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_979.xy, x_979.z);
        u_xlat25 = x_981;
        let x_983 : f32 = u_xlat14.w;
        let x_984 : f32 = u_xlat25;
        let x_987 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_983 * x_984) + x_987);
        let x_991 : vec4<f32> = u_xlat8;
        let x_992 : vec2<f32> = vec2<f32>(x_991.z, x_991.w);
        let x_994 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_992.x, x_992.y, x_994);
        let x_1001 : vec3<f32> = txVec12;
        let x_1003 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1001.xy, x_1001.z);
        u_xlat25 = x_1003;
        let x_1004 : f32 = u_xlat68;
        let x_1005 : f32 = u_xlat25;
        let x_1008 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1004 * x_1005) + x_1008);
      } else {
        let x_1011 : vec4<f32> = u_xlat2;
        let x_1014 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1017 : vec2<f32> = ((vec2<f32>(x_1011.x, x_1011.y) * vec2<f32>(x_1014.z, x_1014.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1018 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1020 : vec4<f32> = u_xlat3;
        let x_1022 : vec2<f32> = floor(vec2<f32>(x_1020.x, x_1020.y));
        let x_1023 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1022.x, x_1022.y, x_1023.z, x_1023.w);
        let x_1025 : vec4<f32> = u_xlat2;
        let x_1028 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1031 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1025.x, x_1025.y) * vec2<f32>(x_1028.z, x_1028.w)) + -(vec2<f32>(x_1031.x, x_1031.y)));
        let x_1035 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_1035.x, x_1035.x, x_1035.y, x_1035.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1038 : vec4<f32> = u_xlat7;
        let x_1040 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1038.x, x_1038.x, x_1038.z, x_1038.z) * vec4<f32>(x_1040.x, x_1040.x, x_1040.z, x_1040.z));
        let x_1043 : vec4<f32> = u_xlat8;
        let x_1047 : vec2<f32> = (vec2<f32>(x_1043.y, x_1043.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1048 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1048.x, x_1047.x, x_1048.z, x_1047.y);
        let x_1050 : vec4<f32> = u_xlat8;
        let x_1053 : vec2<f32> = u_xlat47;
        let x_1055 : vec2<f32> = ((vec2<f32>(x_1050.x, x_1050.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1053));
        let x_1056 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1055.x, x_1056.y, x_1055.y, x_1056.w);
        let x_1058 : vec2<f32> = u_xlat47;
        let x_1060 : vec2<f32> = (-(x_1058) + vec2<f32>(1.0f, 1.0f));
        let x_1061 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1060.x, x_1060.y, x_1061.z, x_1061.w);
        let x_1063 : vec2<f32> = u_xlat47;
        u_xlat52 = min(x_1063, vec2<f32>(0.0f, 0.0f));
        let x_1065 : vec2<f32> = u_xlat52;
        let x_1067 : vec2<f32> = u_xlat52;
        let x_1069 : vec4<f32> = u_xlat8;
        let x_1071 : vec2<f32> = ((-(x_1065) * x_1067) + vec2<f32>(x_1069.x, x_1069.y));
        let x_1072 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1071.x, x_1071.y, x_1072.z, x_1072.w);
        let x_1074 : vec2<f32> = u_xlat47;
        u_xlat52 = max(x_1074, vec2<f32>(0.0f, 0.0f));
        let x_1077 : vec2<f32> = u_xlat52;
        let x_1079 : vec2<f32> = u_xlat52;
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1083 : vec2<f32> = ((-(x_1077) * x_1079) + vec2<f32>(x_1081.y, x_1081.w));
        let x_1084 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1083.x, x_1084.y, x_1083.y);
        let x_1086 : vec4<f32> = u_xlat8;
        let x_1089 : vec2<f32> = (vec2<f32>(x_1086.x, x_1086.y) + vec2<f32>(2.0f, 2.0f));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1089.y, x_1090.z, x_1090.w);
        let x_1092 : vec3<f32> = u_xlat29;
        let x_1094 : vec2<f32> = (vec2<f32>(x_1092.x, x_1092.z) + vec2<f32>(2.0f, 2.0f));
        let x_1095 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1095.x, x_1094.x, x_1095.z, x_1094.y);
        let x_1098 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1098 * 0.081632003f);
        let x_1102 : vec4<f32> = u_xlat7;
        let x_1105 : vec3<f32> = (vec3<f32>(x_1102.z, x_1102.x, x_1102.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1106 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1105.x, x_1105.y, x_1105.z, x_1106.w);
        let x_1108 : vec4<f32> = u_xlat8;
        let x_1111 : vec2<f32> = (vec2<f32>(x_1108.x, x_1108.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1112 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1111.x, x_1111.y, x_1112.z, x_1112.w);
        let x_1115 : f32 = u_xlat11.y;
        u_xlat10.x = x_1115;
        let x_1117 : vec2<f32> = u_xlat47;
        let x_1124 : vec2<f32> = ((vec2<f32>(x_1117.x, x_1117.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1125 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1125.x, x_1124.x, x_1125.z, x_1124.y);
        let x_1127 : vec2<f32> = u_xlat47;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1127.x, x_1127.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat7.x;
        u_xlat8.y = x_1135;
        let x_1138 : f32 = u_xlat9.y;
        u_xlat8.w = x_1138;
        let x_1140 : vec4<f32> = u_xlat8;
        let x_1141 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1140 + x_1141);
        let x_1143 : vec2<f32> = u_xlat47;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1143.y, x_1143.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1147 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1147.x, x_1146.x, x_1147.z, x_1146.y);
        let x_1149 : vec2<f32> = u_xlat47;
        let x_1152 : vec2<f32> = ((vec2<f32>(x_1149.y, x_1149.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1153 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1152.x, x_1153.y, x_1152.y, x_1153.w);
        let x_1156 : f32 = u_xlat7.y;
        u_xlat9.y = x_1156;
        let x_1158 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1158 + x_1159);
        let x_1161 : vec4<f32> = u_xlat8;
        let x_1162 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1161 / x_1162);
        let x_1164 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1164 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1170 : vec4<f32> = u_xlat9;
        let x_1171 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1170 / x_1171);
        let x_1173 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1173 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1175 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1175.w, x_1175.x, x_1175.y, x_1175.z) * vec4<f32>(x_1178.x, x_1178.x, x_1178.x, x_1178.x));
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1184 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1181.x, x_1181.w, x_1181.y, x_1181.z) * vec4<f32>(x_1184.y, x_1184.y, x_1184.y, x_1184.y));
        let x_1187 : vec4<f32> = u_xlat8;
        let x_1188 : vec3<f32> = vec3<f32>(x_1187.y, x_1187.z, x_1187.w);
        let x_1189 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1188.x, x_1189.y, x_1188.y, x_1188.z);
        let x_1192 : f32 = u_xlat9.x;
        u_xlat11.y = x_1192;
        let x_1194 : vec4<f32> = u_xlat3;
        let x_1197 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1200 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1194.x, x_1194.y, x_1194.x, x_1194.y) * vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y)) + vec4<f32>(x_1200.x, x_1200.y, x_1200.z, x_1200.y));
        let x_1203 : vec4<f32> = u_xlat3;
        let x_1206 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1209 : vec4<f32> = u_xlat11;
        u_xlat47 = ((vec2<f32>(x_1203.x, x_1203.y) * vec2<f32>(x_1206.x, x_1206.y)) + vec2<f32>(x_1209.w, x_1209.y));
        let x_1213 : f32 = u_xlat11.y;
        u_xlat8.y = x_1213;
        let x_1216 : f32 = u_xlat9.z;
        u_xlat11.y = x_1216;
        let x_1218 : vec4<f32> = u_xlat3;
        let x_1221 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1224 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1218.x, x_1218.y, x_1218.x, x_1218.y) * vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y)) + vec4<f32>(x_1224.x, x_1224.y, x_1224.z, x_1224.y));
        let x_1227 : vec4<f32> = u_xlat3;
        let x_1230 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1233 : vec4<f32> = u_xlat11;
        let x_1235 : vec2<f32> = ((vec2<f32>(x_1227.x, x_1227.y) * vec2<f32>(x_1230.x, x_1230.y)) + vec2<f32>(x_1233.w, x_1233.y));
        let x_1236 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1235.x, x_1235.y, x_1236.z, x_1236.w);
        let x_1239 : f32 = u_xlat11.y;
        u_xlat8.z = x_1239;
        let x_1242 : vec4<f32> = u_xlat3;
        let x_1245 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1248 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1242.x, x_1242.y, x_1242.x, x_1242.y) * vec4<f32>(x_1245.x, x_1245.y, x_1245.x, x_1245.y)) + vec4<f32>(x_1248.x, x_1248.y, x_1248.x, x_1248.z));
        let x_1252 : f32 = u_xlat9.w;
        u_xlat11.y = x_1252;
        let x_1255 : vec4<f32> = u_xlat3;
        let x_1258 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1261 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1255.x, x_1255.y, x_1255.x, x_1255.y) * vec4<f32>(x_1258.x, x_1258.y, x_1258.x, x_1258.y)) + vec4<f32>(x_1261.x, x_1261.y, x_1261.z, x_1261.y));
        let x_1265 : vec4<f32> = u_xlat3;
        let x_1268 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1271 : vec4<f32> = u_xlat11;
        u_xlat30 = ((vec2<f32>(x_1265.x, x_1265.y) * vec2<f32>(x_1268.x, x_1268.y)) + vec2<f32>(x_1271.w, x_1271.y));
        let x_1275 : f32 = u_xlat11.y;
        u_xlat8.w = x_1275;
        let x_1278 : vec4<f32> = u_xlat3;
        let x_1281 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1284 : vec4<f32> = u_xlat8;
        u_xlat58 = ((vec2<f32>(x_1278.x, x_1278.y) * vec2<f32>(x_1281.x, x_1281.y)) + vec2<f32>(x_1284.x, x_1284.w));
        let x_1287 : vec4<f32> = u_xlat11;
        let x_1288 : vec3<f32> = vec3<f32>(x_1287.x, x_1287.z, x_1287.w);
        let x_1289 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1288.x, x_1289.y, x_1288.y, x_1288.z);
        let x_1291 : vec4<f32> = u_xlat3;
        let x_1294 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1297 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1291.x, x_1291.y, x_1291.x, x_1291.y) * vec4<f32>(x_1294.x, x_1294.y, x_1294.x, x_1294.y)) + vec4<f32>(x_1297.x, x_1297.y, x_1297.z, x_1297.y));
        let x_1301 : vec4<f32> = u_xlat3;
        let x_1304 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1307 : vec4<f32> = u_xlat9;
        u_xlat53 = ((vec2<f32>(x_1301.x, x_1301.y) * vec2<f32>(x_1304.x, x_1304.y)) + vec2<f32>(x_1307.w, x_1307.y));
        let x_1311 : f32 = u_xlat8.x;
        u_xlat9.x = x_1311;
        let x_1313 : vec4<f32> = u_xlat3;
        let x_1316 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1319 : vec4<f32> = u_xlat9;
        let x_1321 : vec2<f32> = ((vec2<f32>(x_1313.x, x_1313.y) * vec2<f32>(x_1316.x, x_1316.y)) + vec2<f32>(x_1319.x, x_1319.y));
        let x_1322 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1321.x, x_1321.y, x_1322.z, x_1322.w);
        let x_1325 : vec4<f32> = u_xlat7;
        let x_1327 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1325.x, x_1325.x, x_1325.x, x_1325.x) * x_1327);
        let x_1330 : vec4<f32> = u_xlat7;
        let x_1332 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1330.y, x_1330.y, x_1330.y, x_1330.y) * x_1332);
        let x_1335 : vec4<f32> = u_xlat7;
        let x_1337 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1335.z, x_1335.z, x_1335.z, x_1335.z) * x_1337);
        let x_1339 : vec4<f32> = u_xlat7;
        let x_1341 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1339.w, x_1339.w, x_1339.w, x_1339.w) * x_1341);
        let x_1344 : vec4<f32> = u_xlat12;
        let x_1345 : vec2<f32> = vec2<f32>(x_1344.x, x_1344.y);
        let x_1347 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1345.x, x_1345.y, x_1347);
        let x_1354 : vec3<f32> = txVec13;
        let x_1356 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1354.xy, x_1354.z);
        u_xlat68 = x_1356;
        let x_1358 : vec4<f32> = u_xlat12;
        let x_1359 : vec2<f32> = vec2<f32>(x_1358.z, x_1358.w);
        let x_1361 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1359.x, x_1359.y, x_1361);
        let x_1369 : vec3<f32> = txVec14;
        let x_1371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1369.xy, x_1369.z);
        u_xlat71 = x_1371;
        let x_1372 : f32 = u_xlat71;
        let x_1374 : f32 = u_xlat17.y;
        u_xlat71 = (x_1372 * x_1374);
        let x_1377 : f32 = u_xlat17.x;
        let x_1378 : f32 = u_xlat68;
        let x_1380 : f32 = u_xlat71;
        u_xlat68 = ((x_1377 * x_1378) + x_1380);
        let x_1383 : vec2<f32> = u_xlat47;
        let x_1385 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec15;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat47.x = x_1394;
        let x_1397 : f32 = u_xlat17.z;
        let x_1399 : f32 = u_xlat47.x;
        let x_1401 : f32 = u_xlat68;
        u_xlat68 = ((x_1397 * x_1399) + x_1401);
        let x_1404 : vec4<f32> = u_xlat15;
        let x_1405 : vec2<f32> = vec2<f32>(x_1404.x, x_1404.y);
        let x_1407 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1405.x, x_1405.y, x_1407);
        let x_1414 : vec3<f32> = txVec16;
        let x_1416 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1414.xy, x_1414.z);
        u_xlat47.x = x_1416;
        let x_1419 : f32 = u_xlat17.w;
        let x_1421 : f32 = u_xlat47.x;
        let x_1423 : f32 = u_xlat68;
        u_xlat68 = ((x_1419 * x_1421) + x_1423);
        let x_1426 : vec4<f32> = u_xlat13;
        let x_1427 : vec2<f32> = vec2<f32>(x_1426.x, x_1426.y);
        let x_1429 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1427.x, x_1427.y, x_1429);
        let x_1436 : vec3<f32> = txVec17;
        let x_1438 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1436.xy, x_1436.z);
        u_xlat47.x = x_1438;
        let x_1441 : f32 = u_xlat18.x;
        let x_1443 : f32 = u_xlat47.x;
        let x_1445 : f32 = u_xlat68;
        u_xlat68 = ((x_1441 * x_1443) + x_1445);
        let x_1448 : vec4<f32> = u_xlat13;
        let x_1449 : vec2<f32> = vec2<f32>(x_1448.z, x_1448.w);
        let x_1451 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1449.x, x_1449.y, x_1451);
        let x_1458 : vec3<f32> = txVec18;
        let x_1460 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1458.xy, x_1458.z);
        u_xlat47.x = x_1460;
        let x_1463 : f32 = u_xlat18.y;
        let x_1465 : f32 = u_xlat47.x;
        let x_1467 : f32 = u_xlat68;
        u_xlat68 = ((x_1463 * x_1465) + x_1467);
        let x_1470 : vec4<f32> = u_xlat14;
        let x_1471 : vec2<f32> = vec2<f32>(x_1470.x, x_1470.y);
        let x_1473 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1471.x, x_1471.y, x_1473);
        let x_1480 : vec3<f32> = txVec19;
        let x_1482 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1480.xy, x_1480.z);
        u_xlat47.x = x_1482;
        let x_1485 : f32 = u_xlat18.z;
        let x_1487 : f32 = u_xlat47.x;
        let x_1489 : f32 = u_xlat68;
        u_xlat68 = ((x_1485 * x_1487) + x_1489);
        let x_1492 : vec4<f32> = u_xlat15;
        let x_1493 : vec2<f32> = vec2<f32>(x_1492.z, x_1492.w);
        let x_1495 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1493.x, x_1493.y, x_1495);
        let x_1502 : vec3<f32> = txVec20;
        let x_1504 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1502.xy, x_1502.z);
        u_xlat47.x = x_1504;
        let x_1507 : f32 = u_xlat18.w;
        let x_1509 : f32 = u_xlat47.x;
        let x_1511 : f32 = u_xlat68;
        u_xlat68 = ((x_1507 * x_1509) + x_1511);
        let x_1514 : vec4<f32> = u_xlat16;
        let x_1515 : vec2<f32> = vec2<f32>(x_1514.x, x_1514.y);
        let x_1517 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1515.x, x_1515.y, x_1517);
        let x_1524 : vec3<f32> = txVec21;
        let x_1526 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1524.xy, x_1524.z);
        u_xlat47.x = x_1526;
        let x_1529 : f32 = u_xlat19.x;
        let x_1531 : f32 = u_xlat47.x;
        let x_1533 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1531) + x_1533);
        let x_1536 : vec4<f32> = u_xlat16;
        let x_1537 : vec2<f32> = vec2<f32>(x_1536.z, x_1536.w);
        let x_1539 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1537.x, x_1537.y, x_1539);
        let x_1546 : vec3<f32> = txVec22;
        let x_1548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1546.xy, x_1546.z);
        u_xlat47.x = x_1548;
        let x_1551 : f32 = u_xlat19.y;
        let x_1553 : f32 = u_xlat47.x;
        let x_1555 : f32 = u_xlat68;
        u_xlat68 = ((x_1551 * x_1553) + x_1555);
        let x_1558 : vec2<f32> = u_xlat30;
        let x_1560 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1558.x, x_1558.y, x_1560);
        let x_1567 : vec3<f32> = txVec23;
        let x_1569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1567.xy, x_1567.z);
        u_xlat47.x = x_1569;
        let x_1572 : f32 = u_xlat19.z;
        let x_1574 : f32 = u_xlat47.x;
        let x_1576 : f32 = u_xlat68;
        u_xlat68 = ((x_1572 * x_1574) + x_1576);
        let x_1579 : vec2<f32> = u_xlat58;
        let x_1581 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1579.x, x_1579.y, x_1581);
        let x_1588 : vec3<f32> = txVec24;
        let x_1590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1588.xy, x_1588.z);
        u_xlat47.x = x_1590;
        let x_1593 : f32 = u_xlat19.w;
        let x_1595 : f32 = u_xlat47.x;
        let x_1597 : f32 = u_xlat68;
        u_xlat68 = ((x_1593 * x_1595) + x_1597);
        let x_1600 : vec4<f32> = u_xlat11;
        let x_1601 : vec2<f32> = vec2<f32>(x_1600.x, x_1600.y);
        let x_1603 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec25;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat47.x = x_1612;
        let x_1615 : f32 = u_xlat7.x;
        let x_1617 : f32 = u_xlat47.x;
        let x_1619 : f32 = u_xlat68;
        u_xlat68 = ((x_1615 * x_1617) + x_1619);
        let x_1622 : vec4<f32> = u_xlat11;
        let x_1623 : vec2<f32> = vec2<f32>(x_1622.z, x_1622.w);
        let x_1625 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1623.x, x_1623.y, x_1625);
        let x_1632 : vec3<f32> = txVec26;
        let x_1634 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1632.xy, x_1632.z);
        u_xlat47.x = x_1634;
        let x_1637 : f32 = u_xlat7.y;
        let x_1639 : f32 = u_xlat47.x;
        let x_1641 : f32 = u_xlat68;
        u_xlat68 = ((x_1637 * x_1639) + x_1641);
        let x_1644 : vec2<f32> = u_xlat53;
        let x_1646 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1644.x, x_1644.y, x_1646);
        let x_1653 : vec3<f32> = txVec27;
        let x_1655 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1653.xy, x_1653.z);
        u_xlat47.x = x_1655;
        let x_1658 : f32 = u_xlat7.z;
        let x_1660 : f32 = u_xlat47.x;
        let x_1662 : f32 = u_xlat68;
        u_xlat68 = ((x_1658 * x_1660) + x_1662);
        let x_1665 : vec4<f32> = u_xlat3;
        let x_1666 : vec2<f32> = vec2<f32>(x_1665.x, x_1665.y);
        let x_1668 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1666.x, x_1666.y, x_1668);
        let x_1675 : vec3<f32> = txVec28;
        let x_1677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1675.xy, x_1675.z);
        u_xlat3.x = x_1677;
        let x_1680 : f32 = u_xlat7.w;
        let x_1682 : f32 = u_xlat3.x;
        let x_1684 : f32 = u_xlat68;
        u_xlat67 = ((x_1680 * x_1682) + x_1684);
      }
    }
  } else {
    let x_1688 : vec4<f32> = u_xlat2;
    let x_1689 : vec2<f32> = vec2<f32>(x_1688.x, x_1688.y);
    let x_1691 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1689.x, x_1689.y, x_1691);
    let x_1698 : vec3<f32> = txVec29;
    let x_1700 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1698.xy, x_1698.z);
    u_xlat67 = x_1700;
  }
  let x_1702 : f32 = x_253.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1702) + 1.0f);
  let x_1705 : f32 = u_xlat67;
  let x_1707 : f32 = x_253.x_MainLightShadowParams.x;
  let x_1709 : f32 = u_xlat68;
  u_xlat67 = ((x_1705 * x_1707) + x_1709);
  let x_1713 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1713);
  let x_1717 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1717 >= 1.0f);
  let x_1719 : bool = u_xlatb25;
  let x_1720 : bool = u_xlatb3;
  u_xlatb3 = (x_1719 | x_1720);
  let x_1722 : bool = u_xlatb3;
  let x_1723 : f32 = u_xlat67;
  u_xlat67 = select(x_1723, 1.0f, x_1722);
  let x_1725 : vec3<f32> = u_xlat1;
  let x_1727 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat1.x = dot(x_1725, -(vec3<f32>(x_1727.x, x_1727.y, x_1727.z)));
  let x_1733 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1733, 0.0f, 1.0f);
  let x_1737 : f32 = u_xlat67;
  let x_1740 : vec4<f32> = x_139.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1737, x_1737, x_1737) * vec3<f32>(x_1740.x, x_1740.y, x_1740.z));
  let x_1743 : vec3<f32> = u_xlat23;
  let x_1744 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1743 * vec3<f32>(x_1744.x, x_1744.x, x_1744.x));
  let x_1747 : vec3<f32> = u_xlat1;
  let x_1748 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1747 * vec3<f32>(x_1748.x, x_1748.y, x_1748.z));
  let x_1752 : f32 = u_xlat4.w;
  u_xlatb67 = (x_1752 >= 0.400000006f);
  let x_1755 : bool = u_xlatb67;
  if (x_1755) {
    let x_1760 : f32 = u_xlat4.w;
    x_1756 = x_1760;
  } else {
    x_1756 = 0.0f;
  }
  let x_1762 : f32 = x_1756;
  u_xlat67 = x_1762;
  let x_1764 : f32 = u_xlat4.w;
  u_xlat25 = (x_1764 + -0.400000006f);
  let x_1768 : f32 = u_xlat4.w;
  u_xlat47.x = dpdxCoarse(x_1768);
  let x_1773 : f32 = u_xlat4.w;
  u_xlat69 = dpdyCoarse(x_1773);
  let x_1775 : f32 = u_xlat69;
  let x_1778 : f32 = u_xlat47.x;
  u_xlat47.x = (abs(x_1775) + abs(x_1778));
  let x_1783 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_1783, 0.0001f);
  let x_1787 : f32 = u_xlat25;
  let x_1789 : f32 = u_xlat47.x;
  u_xlat25 = (x_1787 / x_1789);
  let x_1791 : f32 = u_xlat25;
  u_xlat25 = (x_1791 + 0.5f);
  let x_1793 : f32 = u_xlat25;
  u_xlat25 = clamp(x_1793, 0.0f, 1.0f);
  let x_1797 : f32 = x_139.x_AlphaToMaskAvailable;
  u_xlatb47 = !((x_1797 == 0.0f));
  let x_1799 : bool = u_xlatb47;
  let x_1800 : f32 = u_xlat25;
  let x_1801 : f32 = u_xlat67;
  u_xlat67 = select(x_1801, x_1800, x_1799);
  let x_1803 : f32 = u_xlat67;
  u_xlat25 = (x_1803 + -0.0001f);
  let x_1806 : f32 = u_xlat25;
  u_xlatb25 = (x_1806 < 0.0f);
  let x_1808 : bool = u_xlatb25;
  if (((select(0i, 1i, x_1808) * -1i) != 0i)) {
    discard;
  }
  let x_1816 : vec3<f32> = u_xlat22;
  let x_1817 : vec3<f32> = u_xlat28;
  u_xlat22 = (x_1816 * vec3<f32>(x_1817.y, x_1817.y, x_1817.y));
  let x_1820 : vec3<f32> = u_xlat28;
  let x_1822 : vec4<f32> = vs_INTERP2;
  let x_1825 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1820.x, x_1820.x, x_1820.x) * vec3<f32>(x_1822.x, x_1822.y, x_1822.z)) + x_1825);
  let x_1827 : vec3<f32> = u_xlat28;
  let x_1829 : vec3<f32> = vs_INTERP1;
  let x_1831 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1827.z, x_1827.z, x_1827.z) * x_1829) + x_1831);
  let x_1833 : vec3<f32> = u_xlat22;
  let x_1834 : vec3<f32> = u_xlat22;
  u_xlat25 = dot(x_1833, x_1834);
  let x_1836 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_1836);
  let x_1838 : vec3<f32> = u_xlat22;
  let x_1839 : f32 = u_xlat25;
  u_xlat22 = (x_1838 * vec3<f32>(x_1839, x_1839, x_1839));
  let x_1844 : f32 = x_139.unity_OrthoParams.w;
  u_xlatb25 = (x_1844 == 0.0f);
  let x_1846 : vec3<f32> = vs_INTERP0;
  let x_1850 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_1851 : vec3<f32> = (-(x_1846) + x_1850);
  let x_1852 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1851.x, x_1851.y, x_1851.z, x_1852.w);
  let x_1854 : vec4<f32> = u_xlat4;
  let x_1856 : vec4<f32> = u_xlat4;
  u_xlat69 = dot(vec3<f32>(x_1854.x, x_1854.y, x_1854.z), vec3<f32>(x_1856.x, x_1856.y, x_1856.z));
  let x_1859 : f32 = u_xlat69;
  u_xlat69 = inverseSqrt(x_1859);
  let x_1861 : f32 = u_xlat69;
  let x_1863 : vec4<f32> = u_xlat4;
  let x_1865 : vec3<f32> = (vec3<f32>(x_1861, x_1861, x_1861) * vec3<f32>(x_1863.x, x_1863.y, x_1863.z));
  let x_1866 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1865.x, x_1865.y, x_1865.z, x_1866.w);
  let x_1870 : f32 = x_139.unity_MatrixV[0i].z;
  u_xlat7.x = x_1870;
  let x_1873 : f32 = x_139.unity_MatrixV[1i].z;
  u_xlat7.y = x_1873;
  let x_1876 : f32 = x_139.unity_MatrixV[2i].z;
  u_xlat7.z = x_1876;
  let x_1878 : bool = u_xlatb25;
  if (x_1878) {
    let x_1882 : vec4<f32> = u_xlat4;
    x_1879 = vec3<f32>(x_1882.x, x_1882.y, x_1882.z);
  } else {
    let x_1885 : vec4<f32> = u_xlat7;
    x_1879 = vec3<f32>(x_1885.x, x_1885.y, x_1885.z);
  }
  let x_1887 : vec3<f32> = x_1879;
  let x_1888 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1887.x, x_1887.y, x_1887.z, x_1888.w);
  let x_1891 : f32 = vs_INTERP0.y;
  let x_1893 : f32 = x_139.unity_MatrixV[1i].z;
  u_xlat25 = (x_1891 * x_1893);
  let x_1896 : f32 = x_139.unity_MatrixV[0i].z;
  let x_1898 : f32 = vs_INTERP0.x;
  let x_1900 : f32 = u_xlat25;
  u_xlat25 = ((x_1896 * x_1898) + x_1900);
  let x_1903 : f32 = x_139.unity_MatrixV[2i].z;
  let x_1905 : f32 = vs_INTERP0.z;
  let x_1907 : f32 = u_xlat25;
  u_xlat25 = ((x_1903 * x_1905) + x_1907);
  let x_1909 : f32 = u_xlat25;
  let x_1911 : f32 = x_139.unity_MatrixV[3i].z;
  u_xlat25 = (x_1909 + x_1911);
  let x_1913 : f32 = u_xlat25;
  let x_1917 : f32 = x_139.x_ProjectionParams.y;
  u_xlat25 = (-(x_1913) + -(x_1917));
  let x_1920 : f32 = u_xlat25;
  u_xlat25 = max(x_1920, 0.0f);
  let x_1922 : f32 = u_xlat25;
  let x_1925 : f32 = x_139.unity_FogParams.x;
  u_xlat25 = (x_1922 * x_1925);
  let x_1934 : vec2<f32> = vs_INTERP5;
  let x_1936 : f32 = x_139.x_GlobalMipBias.x;
  let x_1937 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1934, x_1936);
  u_xlat7 = x_1937;
  let x_1942 : vec2<f32> = vs_INTERP5;
  let x_1944 : f32 = x_139.x_GlobalMipBias.x;
  let x_1945 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1942, x_1944);
  u_xlat28 = vec3<f32>(x_1945.x, x_1945.y, x_1945.z);
  let x_1947 : vec4<f32> = u_xlat7;
  let x_1950 : vec3<f32> = (vec3<f32>(x_1947.x, x_1947.y, x_1947.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1951 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1950.x, x_1950.y, x_1950.z, x_1951.w);
  let x_1953 : vec3<f32> = u_xlat22;
  let x_1954 : vec4<f32> = u_xlat7;
  u_xlat69 = dot(x_1953, vec3<f32>(x_1954.x, x_1954.y, x_1954.z));
  let x_1957 : f32 = u_xlat69;
  u_xlat69 = (x_1957 + 0.5f);
  let x_1959 : f32 = u_xlat69;
  let x_1961 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_1959, x_1959, x_1959) * x_1961);
  let x_1964 : f32 = u_xlat7.w;
  u_xlat69 = max(x_1964, 0.0001f);
  let x_1966 : vec3<f32> = u_xlat28;
  let x_1967 : f32 = u_xlat69;
  u_xlat28 = (x_1966 / vec3<f32>(x_1967, x_1967, x_1967));
  let x_1971 : vec4<f32> = x_139.x_ScaledScreenParams;
  let x_1972 : vec2<f32> = vec2<f32>(x_1971.x, x_1971.y);
  let x_1976 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1972.x, x_1972.y));
  let x_1977 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1976.x, x_1976.y, x_1977.z, x_1977.w);
  let x_1979 : vec4<f32> = u_xlat7;
  let x_1981 : vec4<f32> = hlslcc_FragCoord;
  let x_1983 : vec2<f32> = (vec2<f32>(x_1979.x, x_1979.y) * vec2<f32>(x_1981.x, x_1981.y));
  let x_1984 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1983.x, x_1983.y, x_1984.z, x_1984.w);
  let x_1987 : f32 = u_xlat7.y;
  let x_1990 : f32 = x_139.x_ScaleBiasRt.x;
  let x_1993 : f32 = x_139.x_ScaleBiasRt.y;
  u_xlat69 = ((x_1987 * x_1990) + x_1993);
  let x_1995 : f32 = u_xlat69;
  u_xlat7.z = (-(x_1995) + 1.0f);
  let x_2000 : f32 = u_xlat6.x;
  u_xlat6.x = x_2000;
  let x_2003 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_2003, 0.0f, 1.0f);
  let x_2006 : f32 = u_xlat67;
  u_xlat67 = min(x_2006, 1.0f);
  let x_2008 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2008 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2013 : f32 = u_xlat6.x;
  u_xlat69 = (-(x_2013) + 1.0f);
  let x_2017 : f32 = u_xlat69;
  let x_2018 : f32 = u_xlat69;
  u_xlat70 = (x_2017 * x_2018);
  let x_2020 : f32 = u_xlat70;
  u_xlat70 = max(x_2020, 0.0078125f);
  let x_2023 : f32 = u_xlat70;
  let x_2024 : f32 = u_xlat70;
  u_xlat71 = (x_2023 * x_2024);
  let x_2027 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2027 + 0.040000021f);
  let x_2032 : f32 = u_xlat6.x;
  u_xlat6.x = min(x_2032, 1.0f);
  let x_2035 : f32 = u_xlat70;
  u_xlat29.x = ((x_2035 * 4.0f) + 2.0f);
  let x_2044 : vec4<f32> = u_xlat7;
  let x_2047 : f32 = x_139.x_GlobalMipBias.x;
  let x_2048 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2044.x, x_2044.z), x_2047);
  u_xlat7.x = x_2048.x;
  let x_2053 : f32 = u_xlat7.x;
  u_xlat51 = (x_2053 + -1.0f);
  let x_2056 : f32 = x_139.x_AmbientOcclusionParam.w;
  let x_2057 : f32 = u_xlat51;
  u_xlat51 = ((x_2056 * x_2057) + 1.0f);
  let x_2061 : f32 = u_xlat7.x;
  let x_2063 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2061, x_2063);
  let x_2066 : bool = u_xlatb0;
  if (x_2066) {
    let x_2070 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2070 == 1.0f);
    let x_2072 : bool = u_xlatb0;
    if (x_2072) {
      let x_2075 : vec4<f32> = u_xlat2;
      let x_2078 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2075.x, x_2075.y, x_2075.x, x_2075.y) + x_2078);
      let x_2081 : vec4<f32> = u_xlat8;
      let x_2082 : vec2<f32> = vec2<f32>(x_2081.x, x_2081.y);
      let x_2084 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2082.x, x_2082.y, x_2084);
      let x_2091 : vec3<f32> = txVec30;
      let x_2093 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2091.xy, x_2091.z);
      u_xlat9.x = x_2093;
      let x_2096 : vec4<f32> = u_xlat8;
      let x_2097 : vec2<f32> = vec2<f32>(x_2096.z, x_2096.w);
      let x_2099 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2097.x, x_2097.y, x_2099);
      let x_2106 : vec3<f32> = txVec31;
      let x_2108 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2106.xy, x_2106.z);
      u_xlat9.y = x_2108;
      let x_2110 : vec4<f32> = u_xlat2;
      let x_2113 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2110.x, x_2110.y, x_2110.x, x_2110.y) + x_2113);
      let x_2116 : vec4<f32> = u_xlat8;
      let x_2117 : vec2<f32> = vec2<f32>(x_2116.x, x_2116.y);
      let x_2119 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2117.x, x_2117.y, x_2119);
      let x_2126 : vec3<f32> = txVec32;
      let x_2128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2126.xy, x_2126.z);
      u_xlat9.z = x_2128;
      let x_2131 : vec4<f32> = u_xlat8;
      let x_2132 : vec2<f32> = vec2<f32>(x_2131.z, x_2131.w);
      let x_2134 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2132.x, x_2132.y, x_2134);
      let x_2141 : vec3<f32> = txVec33;
      let x_2143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2141.xy, x_2141.z);
      u_xlat9.w = x_2143;
      let x_2145 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2145, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2151 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2151 == 2.0f);
      let x_2153 : bool = u_xlatb73;
      if (x_2153) {
        let x_2156 : vec4<f32> = u_xlat2;
        let x_2159 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2162 : vec2<f32> = ((vec2<f32>(x_2156.x, x_2156.y) * vec2<f32>(x_2159.z, x_2159.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2163 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2162.x, x_2162.y, x_2163.z, x_2163.w);
        let x_2165 : vec4<f32> = u_xlat8;
        let x_2167 : vec2<f32> = floor(vec2<f32>(x_2165.x, x_2165.y));
        let x_2168 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2167.x, x_2167.y, x_2168.z, x_2168.w);
        let x_2170 : vec4<f32> = u_xlat2;
        let x_2173 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2176 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2170.x, x_2170.y) * vec2<f32>(x_2173.z, x_2173.w)) + -(vec2<f32>(x_2176.x, x_2176.y)));
        let x_2180 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2180.x, x_2180.x, x_2180.y, x_2180.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2183 : vec4<f32> = u_xlat9;
        let x_2185 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2183.x, x_2183.x, x_2183.z, x_2183.z) * vec4<f32>(x_2185.x, x_2185.x, x_2185.z, x_2185.z));
        let x_2188 : vec4<f32> = u_xlat10;
        let x_2190 : vec2<f32> = (vec2<f32>(x_2188.y, x_2188.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2191 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2190.x, x_2191.y, x_2190.y, x_2191.w);
        let x_2193 : vec4<f32> = u_xlat10;
        let x_2196 : vec2<f32> = u_xlat52;
        let x_2198 : vec2<f32> = ((vec2<f32>(x_2193.x, x_2193.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2196));
        let x_2199 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2198.x, x_2198.y, x_2199.z, x_2199.w);
        let x_2202 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2202) + vec2<f32>(1.0f, 1.0f));
        let x_2205 : vec2<f32> = u_xlat52;
        let x_2206 : vec2<f32> = min(x_2205, vec2<f32>(0.0f, 0.0f));
        let x_2207 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2206.x, x_2206.y, x_2207.z, x_2207.w);
        let x_2209 : vec4<f32> = u_xlat11;
        let x_2212 : vec4<f32> = u_xlat11;
        let x_2215 : vec2<f32> = u_xlat54;
        let x_2216 : vec2<f32> = ((-(vec2<f32>(x_2209.x, x_2209.y)) * vec2<f32>(x_2212.x, x_2212.y)) + x_2215);
        let x_2217 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2216.x, x_2216.y, x_2217.z, x_2217.w);
        let x_2219 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2219, vec2<f32>(0.0f, 0.0f));
        let x_2221 : vec2<f32> = u_xlat52;
        let x_2223 : vec2<f32> = u_xlat52;
        let x_2225 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2221) * x_2223) + vec2<f32>(x_2225.y, x_2225.w));
        let x_2228 : vec4<f32> = u_xlat11;
        let x_2230 : vec2<f32> = (vec2<f32>(x_2228.x, x_2228.y) + vec2<f32>(1.0f, 1.0f));
        let x_2231 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2230.x, x_2230.y, x_2231.z, x_2231.w);
        let x_2233 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2233 + vec2<f32>(1.0f, 1.0f));
        let x_2235 : vec4<f32> = u_xlat10;
        let x_2237 : vec2<f32> = (vec2<f32>(x_2235.x, x_2235.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2238 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2237.x, x_2237.y, x_2238.z, x_2238.w);
        let x_2240 : vec2<f32> = u_xlat54;
        let x_2241 : vec2<f32> = (x_2240 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2242 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2241.x, x_2241.y, x_2242.z, x_2242.w);
        let x_2244 : vec4<f32> = u_xlat11;
        let x_2246 : vec2<f32> = (vec2<f32>(x_2244.x, x_2244.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2247 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2246.x, x_2246.y, x_2247.z, x_2247.w);
        let x_2249 : vec2<f32> = u_xlat52;
        let x_2250 : vec2<f32> = (x_2249 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2251 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2250.x, x_2250.y, x_2251.z, x_2251.w);
        let x_2253 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2253.y, x_2253.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2257 : f32 = u_xlat11.x;
        u_xlat12.z = x_2257;
        let x_2260 : f32 = u_xlat52.x;
        u_xlat12.w = x_2260;
        let x_2263 : f32 = u_xlat13.x;
        u_xlat10.z = x_2263;
        let x_2266 : f32 = u_xlat9.x;
        u_xlat10.w = x_2266;
        let x_2268 : vec4<f32> = u_xlat10;
        let x_2270 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2268.z, x_2268.w, x_2268.x, x_2268.z) + vec4<f32>(x_2270.z, x_2270.w, x_2270.x, x_2270.z));
        let x_2274 : f32 = u_xlat12.y;
        u_xlat11.z = x_2274;
        let x_2277 : f32 = u_xlat52.y;
        u_xlat11.w = x_2277;
        let x_2280 : f32 = u_xlat10.y;
        u_xlat13.z = x_2280;
        let x_2283 : f32 = u_xlat9.z;
        u_xlat13.w = x_2283;
        let x_2285 : vec4<f32> = u_xlat11;
        let x_2287 : vec4<f32> = u_xlat13;
        let x_2289 : vec3<f32> = (vec3<f32>(x_2285.z, x_2285.y, x_2285.w) + vec3<f32>(x_2287.z, x_2287.y, x_2287.w));
        let x_2290 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2289.x, x_2289.y, x_2289.z, x_2290.w);
        let x_2292 : vec4<f32> = u_xlat10;
        let x_2294 : vec4<f32> = u_xlat14;
        let x_2296 : vec3<f32> = (vec3<f32>(x_2292.x, x_2292.z, x_2292.w) / vec3<f32>(x_2294.z, x_2294.w, x_2294.y));
        let x_2297 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2296.x, x_2296.y, x_2296.z, x_2297.w);
        let x_2299 : vec4<f32> = u_xlat10;
        let x_2301 : vec3<f32> = (vec3<f32>(x_2299.x, x_2299.y, x_2299.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2302 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2301.x, x_2301.y, x_2301.z, x_2302.w);
        let x_2304 : vec4<f32> = u_xlat13;
        let x_2306 : vec4<f32> = u_xlat9;
        let x_2308 : vec3<f32> = (vec3<f32>(x_2304.z, x_2304.y, x_2304.w) / vec3<f32>(x_2306.x, x_2306.y, x_2306.z));
        let x_2309 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2308.x, x_2308.y, x_2308.z, x_2309.w);
        let x_2311 : vec4<f32> = u_xlat11;
        let x_2313 : vec3<f32> = (vec3<f32>(x_2311.x, x_2311.y, x_2311.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2314 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2313.x, x_2313.y, x_2313.z, x_2314.w);
        let x_2316 : vec4<f32> = u_xlat10;
        let x_2319 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2321 : vec3<f32> = (vec3<f32>(x_2316.y, x_2316.x, x_2316.z) * vec3<f32>(x_2319.x, x_2319.x, x_2319.x));
        let x_2322 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2321.x, x_2321.y, x_2321.z, x_2322.w);
        let x_2324 : vec4<f32> = u_xlat11;
        let x_2327 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2329 : vec3<f32> = (vec3<f32>(x_2324.x, x_2324.y, x_2324.z) * vec3<f32>(x_2327.y, x_2327.y, x_2327.y));
        let x_2330 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2329.x, x_2329.y, x_2329.z, x_2330.w);
        let x_2333 : f32 = u_xlat11.x;
        u_xlat10.w = x_2333;
        let x_2335 : vec4<f32> = u_xlat8;
        let x_2338 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2341 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2335.x, x_2335.y, x_2335.x, x_2335.y) * vec4<f32>(x_2338.x, x_2338.y, x_2338.x, x_2338.y)) + vec4<f32>(x_2341.y, x_2341.w, x_2341.x, x_2341.w));
        let x_2344 : vec4<f32> = u_xlat8;
        let x_2347 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2350 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2344.x, x_2344.y) * vec2<f32>(x_2347.x, x_2347.y)) + vec2<f32>(x_2350.z, x_2350.w));
        let x_2354 : f32 = u_xlat10.y;
        u_xlat11.w = x_2354;
        let x_2356 : vec4<f32> = u_xlat11;
        let x_2357 : vec2<f32> = vec2<f32>(x_2356.y, x_2356.z);
        let x_2358 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2358.x, x_2357.x, x_2358.z, x_2357.y);
        let x_2360 : vec4<f32> = u_xlat8;
        let x_2363 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2366 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2360.x, x_2360.y, x_2360.x, x_2360.y) * vec4<f32>(x_2363.x, x_2363.y, x_2363.x, x_2363.y)) + vec4<f32>(x_2366.x, x_2366.y, x_2366.z, x_2366.y));
        let x_2369 : vec4<f32> = u_xlat8;
        let x_2372 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2375 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2369.x, x_2369.y, x_2369.x, x_2369.y) * vec4<f32>(x_2372.x, x_2372.y, x_2372.x, x_2372.y)) + vec4<f32>(x_2375.w, x_2375.y, x_2375.w, x_2375.z));
        let x_2378 : vec4<f32> = u_xlat8;
        let x_2381 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2384 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2378.x, x_2378.y, x_2378.x, x_2378.y) * vec4<f32>(x_2381.x, x_2381.y, x_2381.x, x_2381.y)) + vec4<f32>(x_2384.x, x_2384.w, x_2384.z, x_2384.w));
        let x_2387 : vec4<f32> = u_xlat9;
        let x_2389 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2387.x, x_2387.x, x_2387.x, x_2387.y) * vec4<f32>(x_2389.z, x_2389.w, x_2389.y, x_2389.z));
        let x_2392 : vec4<f32> = u_xlat9;
        let x_2394 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2392.y, x_2392.y, x_2392.z, x_2392.z) * x_2394);
        let x_2398 : f32 = u_xlat9.z;
        let x_2400 : f32 = u_xlat14.y;
        u_xlat73 = (x_2398 * x_2400);
        let x_2403 : vec4<f32> = u_xlat12;
        let x_2404 : vec2<f32> = vec2<f32>(x_2403.x, x_2403.y);
        let x_2406 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2404.x, x_2404.y, x_2406);
        let x_2413 : vec3<f32> = txVec34;
        let x_2415 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2413.xy, x_2413.z);
        u_xlat8.x = x_2415;
        let x_2418 : vec4<f32> = u_xlat12;
        let x_2419 : vec2<f32> = vec2<f32>(x_2418.z, x_2418.w);
        let x_2421 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2419.x, x_2419.y, x_2421);
        let x_2428 : vec3<f32> = txVec35;
        let x_2430 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2428.xy, x_2428.z);
        u_xlat30.x = x_2430;
        let x_2433 : f32 = u_xlat30.x;
        let x_2435 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2433 * x_2435);
        let x_2439 : f32 = u_xlat15.x;
        let x_2441 : f32 = u_xlat8.x;
        let x_2444 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2439 * x_2441) + x_2444);
        let x_2448 : vec2<f32> = u_xlat52;
        let x_2450 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2448.x, x_2448.y, x_2450);
        let x_2457 : vec3<f32> = txVec36;
        let x_2459 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2457.xy, x_2457.z);
        u_xlat30.x = x_2459;
        let x_2462 : f32 = u_xlat15.z;
        let x_2464 : f32 = u_xlat30.x;
        let x_2467 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2462 * x_2464) + x_2467);
        let x_2471 : vec4<f32> = u_xlat11;
        let x_2472 : vec2<f32> = vec2<f32>(x_2471.x, x_2471.y);
        let x_2474 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2472.x, x_2472.y, x_2474);
        let x_2481 : vec3<f32> = txVec37;
        let x_2483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2481.xy, x_2481.z);
        u_xlat30.x = x_2483;
        let x_2486 : f32 = u_xlat15.w;
        let x_2488 : f32 = u_xlat30.x;
        let x_2491 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2486 * x_2488) + x_2491);
        let x_2495 : vec4<f32> = u_xlat13;
        let x_2496 : vec2<f32> = vec2<f32>(x_2495.x, x_2495.y);
        let x_2498 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2496.x, x_2496.y, x_2498);
        let x_2505 : vec3<f32> = txVec38;
        let x_2507 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2505.xy, x_2505.z);
        u_xlat30.x = x_2507;
        let x_2510 : f32 = u_xlat16.x;
        let x_2512 : f32 = u_xlat30.x;
        let x_2515 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2510 * x_2512) + x_2515);
        let x_2519 : vec4<f32> = u_xlat13;
        let x_2520 : vec2<f32> = vec2<f32>(x_2519.z, x_2519.w);
        let x_2522 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2520.x, x_2520.y, x_2522);
        let x_2529 : vec3<f32> = txVec39;
        let x_2531 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2529.xy, x_2529.z);
        u_xlat30.x = x_2531;
        let x_2534 : f32 = u_xlat16.y;
        let x_2536 : f32 = u_xlat30.x;
        let x_2539 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2534 * x_2536) + x_2539);
        let x_2543 : vec4<f32> = u_xlat11;
        let x_2544 : vec2<f32> = vec2<f32>(x_2543.z, x_2543.w);
        let x_2546 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2544.x, x_2544.y, x_2546);
        let x_2553 : vec3<f32> = txVec40;
        let x_2555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2553.xy, x_2553.z);
        u_xlat30.x = x_2555;
        let x_2558 : f32 = u_xlat16.z;
        let x_2560 : f32 = u_xlat30.x;
        let x_2563 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2558 * x_2560) + x_2563);
        let x_2567 : vec4<f32> = u_xlat10;
        let x_2568 : vec2<f32> = vec2<f32>(x_2567.x, x_2567.y);
        let x_2570 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2568.x, x_2568.y, x_2570);
        let x_2577 : vec3<f32> = txVec41;
        let x_2579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2577.xy, x_2577.z);
        u_xlat30.x = x_2579;
        let x_2582 : f32 = u_xlat16.w;
        let x_2584 : f32 = u_xlat30.x;
        let x_2587 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2582 * x_2584) + x_2587);
        let x_2591 : vec4<f32> = u_xlat10;
        let x_2592 : vec2<f32> = vec2<f32>(x_2591.z, x_2591.w);
        let x_2594 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2592.x, x_2592.y, x_2594);
        let x_2601 : vec3<f32> = txVec42;
        let x_2603 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2601.xy, x_2601.z);
        u_xlat30.x = x_2603;
        let x_2605 : f32 = u_xlat73;
        let x_2607 : f32 = u_xlat30.x;
        let x_2610 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_2605 * x_2607) + x_2610);
      } else {
        let x_2614 : vec4<f32> = u_xlat2;
        let x_2617 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2620 : vec2<f32> = ((vec2<f32>(x_2614.x, x_2614.y) * vec2<f32>(x_2617.z, x_2617.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2621 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2620.x, x_2620.y, x_2621.z, x_2621.w);
        let x_2623 : vec4<f32> = u_xlat8;
        let x_2625 : vec2<f32> = floor(vec2<f32>(x_2623.x, x_2623.y));
        let x_2626 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2625.x, x_2625.y, x_2626.z, x_2626.w);
        let x_2628 : vec4<f32> = u_xlat2;
        let x_2631 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2634 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2628.x, x_2628.y) * vec2<f32>(x_2631.z, x_2631.w)) + -(vec2<f32>(x_2634.x, x_2634.y)));
        let x_2638 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2638.x, x_2638.x, x_2638.y, x_2638.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2641 : vec4<f32> = u_xlat9;
        let x_2643 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2641.x, x_2641.x, x_2641.z, x_2641.z) * vec4<f32>(x_2643.x, x_2643.x, x_2643.z, x_2643.z));
        let x_2646 : vec4<f32> = u_xlat10;
        let x_2648 : vec2<f32> = (vec2<f32>(x_2646.y, x_2646.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2649 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2649.x, x_2648.x, x_2649.z, x_2648.y);
        let x_2651 : vec4<f32> = u_xlat10;
        let x_2654 : vec2<f32> = u_xlat52;
        let x_2656 : vec2<f32> = ((vec2<f32>(x_2651.x, x_2651.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2654));
        let x_2657 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2656.x, x_2657.y, x_2656.y, x_2657.w);
        let x_2659 : vec2<f32> = u_xlat52;
        let x_2661 : vec2<f32> = (-(x_2659) + vec2<f32>(1.0f, 1.0f));
        let x_2662 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2661.x, x_2661.y, x_2662.z, x_2662.w);
        let x_2664 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2664, vec2<f32>(0.0f, 0.0f));
        let x_2666 : vec2<f32> = u_xlat54;
        let x_2668 : vec2<f32> = u_xlat54;
        let x_2670 : vec4<f32> = u_xlat10;
        let x_2672 : vec2<f32> = ((-(x_2666) * x_2668) + vec2<f32>(x_2670.x, x_2670.y));
        let x_2673 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2672.x, x_2672.y, x_2673.z, x_2673.w);
        let x_2675 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2675, vec2<f32>(0.0f, 0.0f));
        let x_2678 : vec2<f32> = u_xlat54;
        let x_2680 : vec2<f32> = u_xlat54;
        let x_2682 : vec4<f32> = u_xlat9;
        let x_2684 : vec2<f32> = ((-(x_2678) * x_2680) + vec2<f32>(x_2682.y, x_2682.w));
        let x_2685 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2684.x, x_2685.y, x_2684.y);
        let x_2687 : vec4<f32> = u_xlat10;
        let x_2689 : vec2<f32> = (vec2<f32>(x_2687.x, x_2687.y) + vec2<f32>(2.0f, 2.0f));
        let x_2690 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2689.x, x_2689.y, x_2690.z, x_2690.w);
        let x_2692 : vec3<f32> = u_xlat31;
        let x_2694 : vec2<f32> = (vec2<f32>(x_2692.x, x_2692.z) + vec2<f32>(2.0f, 2.0f));
        let x_2695 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2695.x, x_2694.x, x_2695.z, x_2694.y);
        let x_2698 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2698 * 0.081632003f);
        let x_2701 : vec4<f32> = u_xlat9;
        let x_2703 : vec3<f32> = (vec3<f32>(x_2701.z, x_2701.x, x_2701.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2704 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2703.x, x_2703.y, x_2703.z, x_2704.w);
        let x_2706 : vec4<f32> = u_xlat10;
        let x_2708 : vec2<f32> = (vec2<f32>(x_2706.x, x_2706.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2709 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2708.x, x_2708.y, x_2709.z, x_2709.w);
        let x_2712 : f32 = u_xlat13.y;
        u_xlat12.x = x_2712;
        let x_2714 : vec2<f32> = u_xlat52;
        let x_2717 : vec2<f32> = ((vec2<f32>(x_2714.x, x_2714.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2718 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2718.x, x_2717.x, x_2718.z, x_2717.y);
        let x_2720 : vec2<f32> = u_xlat52;
        let x_2723 : vec2<f32> = ((vec2<f32>(x_2720.x, x_2720.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2724 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2723.x, x_2724.y, x_2723.y, x_2724.w);
        let x_2727 : f32 = u_xlat9.x;
        u_xlat10.y = x_2727;
        let x_2730 : f32 = u_xlat11.y;
        u_xlat10.w = x_2730;
        let x_2732 : vec4<f32> = u_xlat10;
        let x_2733 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2732 + x_2733);
        let x_2735 : vec2<f32> = u_xlat52;
        let x_2738 : vec2<f32> = ((vec2<f32>(x_2735.y, x_2735.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2739 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2739.x, x_2738.x, x_2739.z, x_2738.y);
        let x_2741 : vec2<f32> = u_xlat52;
        let x_2744 : vec2<f32> = ((vec2<f32>(x_2741.y, x_2741.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2745 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2744.x, x_2745.y, x_2744.y, x_2745.w);
        let x_2748 : f32 = u_xlat9.y;
        u_xlat11.y = x_2748;
        let x_2750 : vec4<f32> = u_xlat11;
        let x_2751 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2750 + x_2751);
        let x_2753 : vec4<f32> = u_xlat10;
        let x_2754 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2753 / x_2754);
        let x_2756 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2756 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2758 : vec4<f32> = u_xlat11;
        let x_2759 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2758 / x_2759);
        let x_2761 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2761 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2763 : vec4<f32> = u_xlat10;
        let x_2766 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2763.w, x_2763.x, x_2763.y, x_2763.z) * vec4<f32>(x_2766.x, x_2766.x, x_2766.x, x_2766.x));
        let x_2769 : vec4<f32> = u_xlat11;
        let x_2772 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2769.x, x_2769.w, x_2769.y, x_2769.z) * vec4<f32>(x_2772.y, x_2772.y, x_2772.y, x_2772.y));
        let x_2775 : vec4<f32> = u_xlat10;
        let x_2776 : vec3<f32> = vec3<f32>(x_2775.y, x_2775.z, x_2775.w);
        let x_2777 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2776.x, x_2777.y, x_2776.y, x_2776.z);
        let x_2780 : f32 = u_xlat11.x;
        u_xlat13.y = x_2780;
        let x_2782 : vec4<f32> = u_xlat8;
        let x_2785 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2788 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2782.x, x_2782.y, x_2782.x, x_2782.y) * vec4<f32>(x_2785.x, x_2785.y, x_2785.x, x_2785.y)) + vec4<f32>(x_2788.x, x_2788.y, x_2788.z, x_2788.y));
        let x_2791 : vec4<f32> = u_xlat8;
        let x_2794 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2797 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2791.x, x_2791.y) * vec2<f32>(x_2794.x, x_2794.y)) + vec2<f32>(x_2797.w, x_2797.y));
        let x_2801 : f32 = u_xlat13.y;
        u_xlat10.y = x_2801;
        let x_2804 : f32 = u_xlat11.z;
        u_xlat13.y = x_2804;
        let x_2806 : vec4<f32> = u_xlat8;
        let x_2809 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2812 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2806.x, x_2806.y, x_2806.x, x_2806.y) * vec4<f32>(x_2809.x, x_2809.y, x_2809.x, x_2809.y)) + vec4<f32>(x_2812.x, x_2812.y, x_2812.z, x_2812.y));
        let x_2815 : vec4<f32> = u_xlat8;
        let x_2818 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2821 : vec4<f32> = u_xlat13;
        let x_2823 : vec2<f32> = ((vec2<f32>(x_2815.x, x_2815.y) * vec2<f32>(x_2818.x, x_2818.y)) + vec2<f32>(x_2821.w, x_2821.y));
        let x_2824 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2823.x, x_2823.y, x_2824.z, x_2824.w);
        let x_2827 : f32 = u_xlat13.y;
        u_xlat10.z = x_2827;
        let x_2829 : vec4<f32> = u_xlat8;
        let x_2832 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2835 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2829.x, x_2829.y, x_2829.x, x_2829.y) * vec4<f32>(x_2832.x, x_2832.y, x_2832.x, x_2832.y)) + vec4<f32>(x_2835.x, x_2835.y, x_2835.x, x_2835.z));
        let x_2839 : f32 = u_xlat11.w;
        u_xlat13.y = x_2839;
        let x_2841 : vec4<f32> = u_xlat8;
        let x_2844 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2847 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2841.x, x_2841.y, x_2841.x, x_2841.y) * vec4<f32>(x_2844.x, x_2844.y, x_2844.x, x_2844.y)) + vec4<f32>(x_2847.x, x_2847.y, x_2847.z, x_2847.y));
        let x_2851 : vec4<f32> = u_xlat8;
        let x_2854 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2857 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2851.x, x_2851.y) * vec2<f32>(x_2854.x, x_2854.y)) + vec2<f32>(x_2857.w, x_2857.y));
        let x_2861 : f32 = u_xlat13.y;
        u_xlat10.w = x_2861;
        let x_2864 : vec4<f32> = u_xlat8;
        let x_2867 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2870 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2864.x, x_2864.y) * vec2<f32>(x_2867.x, x_2867.y)) + vec2<f32>(x_2870.x, x_2870.w));
        let x_2873 : vec4<f32> = u_xlat13;
        let x_2874 : vec3<f32> = vec3<f32>(x_2873.x, x_2873.z, x_2873.w);
        let x_2875 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2874.x, x_2875.y, x_2874.y, x_2874.z);
        let x_2877 : vec4<f32> = u_xlat8;
        let x_2880 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2883 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2877.x, x_2877.y, x_2877.x, x_2877.y) * vec4<f32>(x_2880.x, x_2880.y, x_2880.x, x_2880.y)) + vec4<f32>(x_2883.x, x_2883.y, x_2883.z, x_2883.y));
        let x_2887 : vec4<f32> = u_xlat8;
        let x_2890 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2893 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2887.x, x_2887.y) * vec2<f32>(x_2890.x, x_2890.y)) + vec2<f32>(x_2893.w, x_2893.y));
        let x_2897 : f32 = u_xlat10.x;
        u_xlat11.x = x_2897;
        let x_2899 : vec4<f32> = u_xlat8;
        let x_2902 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2905 : vec4<f32> = u_xlat11;
        let x_2907 : vec2<f32> = ((vec2<f32>(x_2899.x, x_2899.y) * vec2<f32>(x_2902.x, x_2902.y)) + vec2<f32>(x_2905.x, x_2905.y));
        let x_2908 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2907.x, x_2907.y, x_2908.z, x_2908.w);
        let x_2910 : vec4<f32> = u_xlat9;
        let x_2912 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2910.x, x_2910.x, x_2910.x, x_2910.x) * x_2912);
        let x_2915 : vec4<f32> = u_xlat9;
        let x_2917 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2915.y, x_2915.y, x_2915.y, x_2915.y) * x_2917);
        let x_2920 : vec4<f32> = u_xlat9;
        let x_2922 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2920.z, x_2920.z, x_2920.z, x_2920.z) * x_2922);
        let x_2924 : vec4<f32> = u_xlat9;
        let x_2926 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2924.w, x_2924.w, x_2924.w, x_2924.w) * x_2926);
        let x_2929 : vec4<f32> = u_xlat14;
        let x_2930 : vec2<f32> = vec2<f32>(x_2929.x, x_2929.y);
        let x_2932 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2930.x, x_2930.y, x_2932);
        let x_2939 : vec3<f32> = txVec43;
        let x_2941 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2939.xy, x_2939.z);
        u_xlat73 = x_2941;
        let x_2943 : vec4<f32> = u_xlat14;
        let x_2944 : vec2<f32> = vec2<f32>(x_2943.z, x_2943.w);
        let x_2946 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2944.x, x_2944.y, x_2946);
        let x_2953 : vec3<f32> = txVec44;
        let x_2955 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2953.xy, x_2953.z);
        u_xlat10.x = x_2955;
        let x_2958 : f32 = u_xlat10.x;
        let x_2960 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2958 * x_2960);
        let x_2964 : f32 = u_xlat19.x;
        let x_2965 : f32 = u_xlat73;
        let x_2968 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2964 * x_2965) + x_2968);
        let x_2971 : vec2<f32> = u_xlat52;
        let x_2973 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2971.x, x_2971.y, x_2973);
        let x_2980 : vec3<f32> = txVec45;
        let x_2982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2980.xy, x_2980.z);
        u_xlat52.x = x_2982;
        let x_2985 : f32 = u_xlat19.z;
        let x_2987 : f32 = u_xlat52.x;
        let x_2989 : f32 = u_xlat73;
        u_xlat73 = ((x_2985 * x_2987) + x_2989);
        let x_2992 : vec4<f32> = u_xlat17;
        let x_2993 : vec2<f32> = vec2<f32>(x_2992.x, x_2992.y);
        let x_2995 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_2993.x, x_2993.y, x_2995);
        let x_3002 : vec3<f32> = txVec46;
        let x_3004 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3002.xy, x_3002.z);
        u_xlat52.x = x_3004;
        let x_3007 : f32 = u_xlat19.w;
        let x_3009 : f32 = u_xlat52.x;
        let x_3011 : f32 = u_xlat73;
        u_xlat73 = ((x_3007 * x_3009) + x_3011);
        let x_3014 : vec4<f32> = u_xlat15;
        let x_3015 : vec2<f32> = vec2<f32>(x_3014.x, x_3014.y);
        let x_3017 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3015.x, x_3015.y, x_3017);
        let x_3024 : vec3<f32> = txVec47;
        let x_3026 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3024.xy, x_3024.z);
        u_xlat52.x = x_3026;
        let x_3029 : f32 = u_xlat20.x;
        let x_3031 : f32 = u_xlat52.x;
        let x_3033 : f32 = u_xlat73;
        u_xlat73 = ((x_3029 * x_3031) + x_3033);
        let x_3036 : vec4<f32> = u_xlat15;
        let x_3037 : vec2<f32> = vec2<f32>(x_3036.z, x_3036.w);
        let x_3039 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3037.x, x_3037.y, x_3039);
        let x_3046 : vec3<f32> = txVec48;
        let x_3048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3046.xy, x_3046.z);
        u_xlat52.x = x_3048;
        let x_3051 : f32 = u_xlat20.y;
        let x_3053 : f32 = u_xlat52.x;
        let x_3055 : f32 = u_xlat73;
        u_xlat73 = ((x_3051 * x_3053) + x_3055);
        let x_3058 : vec4<f32> = u_xlat16;
        let x_3059 : vec2<f32> = vec2<f32>(x_3058.x, x_3058.y);
        let x_3061 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3059.x, x_3059.y, x_3061);
        let x_3068 : vec3<f32> = txVec49;
        let x_3070 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3068.xy, x_3068.z);
        u_xlat52.x = x_3070;
        let x_3073 : f32 = u_xlat20.z;
        let x_3075 : f32 = u_xlat52.x;
        let x_3077 : f32 = u_xlat73;
        u_xlat73 = ((x_3073 * x_3075) + x_3077);
        let x_3080 : vec4<f32> = u_xlat17;
        let x_3081 : vec2<f32> = vec2<f32>(x_3080.z, x_3080.w);
        let x_3083 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3081.x, x_3081.y, x_3083);
        let x_3090 : vec3<f32> = txVec50;
        let x_3092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3090.xy, x_3090.z);
        u_xlat52.x = x_3092;
        let x_3095 : f32 = u_xlat20.w;
        let x_3097 : f32 = u_xlat52.x;
        let x_3099 : f32 = u_xlat73;
        u_xlat73 = ((x_3095 * x_3097) + x_3099);
        let x_3102 : vec4<f32> = u_xlat18;
        let x_3103 : vec2<f32> = vec2<f32>(x_3102.x, x_3102.y);
        let x_3105 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3103.x, x_3103.y, x_3105);
        let x_3112 : vec3<f32> = txVec51;
        let x_3114 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3112.xy, x_3112.z);
        u_xlat52.x = x_3114;
        let x_3117 : f32 = u_xlat21.x;
        let x_3119 : f32 = u_xlat52.x;
        let x_3121 : f32 = u_xlat73;
        u_xlat73 = ((x_3117 * x_3119) + x_3121);
        let x_3124 : vec4<f32> = u_xlat18;
        let x_3125 : vec2<f32> = vec2<f32>(x_3124.z, x_3124.w);
        let x_3127 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3125.x, x_3125.y, x_3127);
        let x_3134 : vec3<f32> = txVec52;
        let x_3136 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3134.xy, x_3134.z);
        u_xlat52.x = x_3136;
        let x_3139 : f32 = u_xlat21.y;
        let x_3141 : f32 = u_xlat52.x;
        let x_3143 : f32 = u_xlat73;
        u_xlat73 = ((x_3139 * x_3141) + x_3143);
        let x_3146 : vec2<f32> = u_xlat32;
        let x_3148 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3146.x, x_3146.y, x_3148);
        let x_3155 : vec3<f32> = txVec53;
        let x_3157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3155.xy, x_3155.z);
        u_xlat52.x = x_3157;
        let x_3160 : f32 = u_xlat21.z;
        let x_3162 : f32 = u_xlat52.x;
        let x_3164 : f32 = u_xlat73;
        u_xlat73 = ((x_3160 * x_3162) + x_3164);
        let x_3167 : vec2<f32> = u_xlat60;
        let x_3169 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3167.x, x_3167.y, x_3169);
        let x_3176 : vec3<f32> = txVec54;
        let x_3178 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3176.xy, x_3176.z);
        u_xlat52.x = x_3178;
        let x_3181 : f32 = u_xlat21.w;
        let x_3183 : f32 = u_xlat52.x;
        let x_3185 : f32 = u_xlat73;
        u_xlat73 = ((x_3181 * x_3183) + x_3185);
        let x_3188 : vec4<f32> = u_xlat13;
        let x_3189 : vec2<f32> = vec2<f32>(x_3188.x, x_3188.y);
        let x_3191 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3189.x, x_3189.y, x_3191);
        let x_3198 : vec3<f32> = txVec55;
        let x_3200 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3198.xy, x_3198.z);
        u_xlat52.x = x_3200;
        let x_3203 : f32 = u_xlat9.x;
        let x_3205 : f32 = u_xlat52.x;
        let x_3207 : f32 = u_xlat73;
        u_xlat73 = ((x_3203 * x_3205) + x_3207);
        let x_3210 : vec4<f32> = u_xlat13;
        let x_3211 : vec2<f32> = vec2<f32>(x_3210.z, x_3210.w);
        let x_3213 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3211.x, x_3211.y, x_3213);
        let x_3220 : vec3<f32> = txVec56;
        let x_3222 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3220.xy, x_3220.z);
        u_xlat52.x = x_3222;
        let x_3225 : f32 = u_xlat9.y;
        let x_3227 : f32 = u_xlat52.x;
        let x_3229 : f32 = u_xlat73;
        u_xlat73 = ((x_3225 * x_3227) + x_3229);
        let x_3232 : vec2<f32> = u_xlat55;
        let x_3234 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3232.x, x_3232.y, x_3234);
        let x_3241 : vec3<f32> = txVec57;
        let x_3243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3241.xy, x_3241.z);
        u_xlat52.x = x_3243;
        let x_3246 : f32 = u_xlat9.z;
        let x_3248 : f32 = u_xlat52.x;
        let x_3250 : f32 = u_xlat73;
        u_xlat73 = ((x_3246 * x_3248) + x_3250);
        let x_3253 : vec4<f32> = u_xlat8;
        let x_3254 : vec2<f32> = vec2<f32>(x_3253.x, x_3253.y);
        let x_3256 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3254.x, x_3254.y, x_3256);
        let x_3263 : vec3<f32> = txVec58;
        let x_3265 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3263.xy, x_3263.z);
        u_xlat8.x = x_3265;
        let x_3268 : f32 = u_xlat9.w;
        let x_3270 : f32 = u_xlat8.x;
        let x_3272 : f32 = u_xlat73;
        u_xlat0.x = ((x_3268 * x_3270) + x_3272);
      }
    }
  } else {
    let x_3277 : vec4<f32> = u_xlat2;
    let x_3278 : vec2<f32> = vec2<f32>(x_3277.x, x_3277.y);
    let x_3280 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3278.x, x_3278.y, x_3280);
    let x_3287 : vec3<f32> = txVec59;
    let x_3289 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3287.xy, x_3287.z);
    u_xlat0.x = x_3289;
  }
  let x_3292 : f32 = u_xlat0.x;
  let x_3294 : f32 = x_253.x_MainLightShadowParams.x;
  let x_3296 : f32 = u_xlat68;
  u_xlat0.x = ((x_3292 * x_3294) + x_3296);
  let x_3299 : bool = u_xlatb3;
  if (x_3299) {
    x_3300 = 1.0f;
  } else {
    let x_3305 : f32 = u_xlat0.x;
    x_3300 = x_3305;
  }
  let x_3306 : f32 = x_3300;
  u_xlat0.x = x_3306;
  let x_3308 : vec3<f32> = vs_INTERP0;
  let x_3310 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_3312 : vec3<f32> = (x_3308 + -(x_3310));
  let x_3313 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3312.x, x_3312.y, x_3312.z, x_3313.w);
  let x_3315 : vec4<f32> = u_xlat2;
  let x_3317 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3315.x, x_3315.y, x_3315.z), vec3<f32>(x_3317.x, x_3317.y, x_3317.z));
  let x_3322 : f32 = u_xlat2.x;
  let x_3324 : f32 = x_253.x_MainLightShadowParams.z;
  let x_3327 : f32 = x_253.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3322 * x_3324) + x_3327);
  let x_3331 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3331, 0.0f, 1.0f);
  let x_3336 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3336) + 1.0f);
  let x_3340 : f32 = u_xlat2.x;
  let x_3341 : f32 = u_xlat24;
  let x_3344 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3340 * x_3341) + x_3344);
  let x_3353 : f32 = x_3351.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3353 == -1.0f));
  let x_3357 : bool = u_xlatb2.x;
  if (x_3357) {
    let x_3360 : vec3<f32> = vs_INTERP0;
    let x_3363 : vec4<f32> = x_3351.x_MainLightWorldToLight[1i];
    let x_3365 : vec2<f32> = (vec2<f32>(x_3360.y, x_3360.y) * vec2<f32>(x_3363.x, x_3363.y));
    let x_3366 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3365.x, x_3365.y, x_3366.z, x_3366.w);
    let x_3369 : vec4<f32> = x_3351.x_MainLightWorldToLight[0i];
    let x_3371 : vec3<f32> = vs_INTERP0;
    let x_3374 : vec4<f32> = u_xlat2;
    let x_3376 : vec2<f32> = ((vec2<f32>(x_3369.x, x_3369.y) * vec2<f32>(x_3371.x, x_3371.x)) + vec2<f32>(x_3374.x, x_3374.y));
    let x_3377 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3376.x, x_3376.y, x_3377.z, x_3377.w);
    let x_3380 : vec4<f32> = x_3351.x_MainLightWorldToLight[2i];
    let x_3382 : vec3<f32> = vs_INTERP0;
    let x_3385 : vec4<f32> = u_xlat2;
    let x_3387 : vec2<f32> = ((vec2<f32>(x_3380.x, x_3380.y) * vec2<f32>(x_3382.z, x_3382.z)) + vec2<f32>(x_3385.x, x_3385.y));
    let x_3388 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3387.x, x_3387.y, x_3388.z, x_3388.w);
    let x_3390 : vec4<f32> = u_xlat2;
    let x_3393 : vec4<f32> = x_3351.x_MainLightWorldToLight[3i];
    let x_3395 : vec2<f32> = (vec2<f32>(x_3390.x, x_3390.y) + vec2<f32>(x_3393.x, x_3393.y));
    let x_3396 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3395.x, x_3395.y, x_3396.z, x_3396.w);
    let x_3398 : vec4<f32> = u_xlat2;
    let x_3401 : vec2<f32> = ((vec2<f32>(x_3398.x, x_3398.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3402 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3401.x, x_3401.y, x_3402.z, x_3402.w);
    let x_3409 : vec4<f32> = u_xlat2;
    let x_3412 : f32 = x_139.x_GlobalMipBias.x;
    let x_3413 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3409.x, x_3409.y), x_3412);
    u_xlat2 = x_3413;
    let x_3416 : f32 = x_3351.x_MainLightCookieTextureFormat;
    let x_3418 : f32 = x_3351.x_MainLightCookieTextureFormat;
    let x_3420 : f32 = x_3351.x_MainLightCookieTextureFormat;
    let x_3422 : f32 = x_3351.x_MainLightCookieTextureFormat;
    let x_3423 : vec4<f32> = vec4<f32>(x_3416, x_3418, x_3420, x_3422);
    let x_3430 : vec4<bool> = (vec4<f32>(x_3423.x, x_3423.y, x_3423.z, x_3423.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3430.x, x_3430.y);
    let x_3433 : bool = u_xlatb8.y;
    if (x_3433) {
      let x_3438 : f32 = u_xlat2.w;
      x_3434 = x_3438;
    } else {
      let x_3441 : f32 = u_xlat2.x;
      x_3434 = x_3441;
    }
    let x_3442 : f32 = x_3434;
    u_xlat68 = x_3442;
    let x_3444 : bool = u_xlatb8.x;
    if (x_3444) {
      let x_3448 : vec4<f32> = u_xlat2;
      x_3445 = vec3<f32>(x_3448.x, x_3448.y, x_3448.z);
    } else {
      let x_3451 : f32 = u_xlat68;
      x_3445 = vec3<f32>(x_3451, x_3451, x_3451);
    }
    let x_3453 : vec3<f32> = x_3445;
    let x_3454 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3453.x, x_3453.y, x_3453.z, x_3454.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3460 : vec4<f32> = u_xlat2;
  let x_3463 : vec4<f32> = x_139.x_MainLightColor;
  let x_3465 : vec3<f32> = (vec3<f32>(x_3460.x, x_3460.y, x_3460.z) * vec3<f32>(x_3463.x, x_3463.y, x_3463.z));
  let x_3466 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3465.x, x_3465.y, x_3465.z, x_3466.w);
  let x_3468 : f32 = u_xlat51;
  let x_3470 : vec4<f32> = u_xlat2;
  let x_3472 : vec3<f32> = (vec3<f32>(x_3468, x_3468, x_3468) * vec3<f32>(x_3470.x, x_3470.y, x_3470.z));
  let x_3473 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3472.x, x_3472.y, x_3472.z, x_3473.w);
  let x_3475 : vec4<f32> = u_xlat4;
  let x_3478 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(vec3<f32>(x_3475.x, x_3475.y, x_3475.z)), x_3478);
  let x_3480 : f32 = u_xlat68;
  let x_3481 : f32 = u_xlat68;
  u_xlat68 = (x_3480 + x_3481);
  let x_3483 : vec3<f32> = u_xlat22;
  let x_3484 : f32 = u_xlat68;
  let x_3488 : vec4<f32> = u_xlat4;
  let x_3491 : vec3<f32> = ((x_3483 * -(vec3<f32>(x_3484, x_3484, x_3484))) + -(vec3<f32>(x_3488.x, x_3488.y, x_3488.z)));
  let x_3492 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3491.x, x_3491.y, x_3491.z, x_3492.w);
  let x_3494 : vec3<f32> = u_xlat22;
  let x_3495 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(x_3494, vec3<f32>(x_3495.x, x_3495.y, x_3495.z));
  let x_3498 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3498, 0.0f, 1.0f);
  let x_3500 : f32 = u_xlat68;
  u_xlat68 = (-(x_3500) + 1.0f);
  let x_3503 : f32 = u_xlat68;
  let x_3504 : f32 = u_xlat68;
  u_xlat68 = (x_3503 * x_3504);
  let x_3506 : f32 = u_xlat68;
  let x_3507 : f32 = u_xlat68;
  u_xlat68 = (x_3506 * x_3507);
  let x_3509 : f32 = u_xlat69;
  u_xlat3.x = ((-(x_3509) * 0.699999988f) + 1.700000048f);
  let x_3517 : f32 = u_xlat3.x;
  let x_3518 : f32 = u_xlat69;
  u_xlat3.x = (x_3517 * x_3518);
  let x_3522 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3522 * 6.0f);
  let x_3534 : vec4<f32> = u_xlat8;
  let x_3537 : f32 = u_xlat3.x;
  let x_3538 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3534.x, x_3534.y, x_3534.z), x_3537);
  u_xlat8 = x_3538;
  let x_3540 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3540 + -1.0f);
  let x_3544 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3546 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3544 * x_3546) + 1.0f);
  let x_3551 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3551, 0.0f);
  let x_3555 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3555);
  let x_3559 : f32 = u_xlat3.x;
  let x_3561 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3559 * x_3561);
  let x_3565 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3565);
  let x_3569 : f32 = u_xlat3.x;
  let x_3571 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3569 * x_3571);
  let x_3574 : vec4<f32> = u_xlat8;
  let x_3576 : vec4<f32> = u_xlat3;
  let x_3578 : vec3<f32> = (vec3<f32>(x_3574.x, x_3574.y, x_3574.z) * vec3<f32>(x_3576.x, x_3576.x, x_3576.x));
  let x_3579 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3578.x, x_3578.y, x_3578.z, x_3579.w);
  let x_3581 : f32 = u_xlat70;
  let x_3583 : f32 = u_xlat70;
  let x_3587 : vec2<f32> = ((vec2<f32>(x_3581, x_3581) * vec2<f32>(x_3583, x_3583)) + vec2<f32>(-1.0f, 1.0f));
  let x_3588 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3587.x, x_3588.y, x_3588.z, x_3587.y);
  let x_3591 : f32 = u_xlat3.w;
  u_xlat69 = (1.0f / x_3591);
  let x_3594 : f32 = u_xlat6.x;
  u_xlat70 = (x_3594 + -0.039999999f);
  let x_3597 : f32 = u_xlat68;
  let x_3598 : f32 = u_xlat70;
  u_xlat68 = ((x_3597 * x_3598) + 0.039999999f);
  let x_3602 : f32 = u_xlat68;
  let x_3603 : f32 = u_xlat69;
  u_xlat68 = (x_3602 * x_3603);
  let x_3605 : f32 = u_xlat68;
  let x_3607 : vec4<f32> = u_xlat8;
  let x_3609 : vec3<f32> = (vec3<f32>(x_3605, x_3605, x_3605) * vec3<f32>(x_3607.x, x_3607.y, x_3607.z));
  let x_3610 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3609.x, x_3609.y, x_3609.z, x_3610.w);
  let x_3612 : vec3<f32> = u_xlat28;
  let x_3613 : vec3<f32> = u_xlat5;
  let x_3615 : vec4<f32> = u_xlat8;
  let x_3617 : vec3<f32> = ((x_3612 * x_3613) + vec3<f32>(x_3615.x, x_3615.y, x_3615.z));
  let x_3618 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3617.x, x_3617.y, x_3617.z, x_3618.w);
  let x_3621 : f32 = u_xlat0.x;
  let x_3623 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3621 * x_3623);
  let x_3626 : vec3<f32> = u_xlat22;
  let x_3628 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat68 = dot(x_3626, vec3<f32>(x_3628.x, x_3628.y, x_3628.z));
  let x_3631 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3631, 0.0f, 1.0f);
  let x_3634 : f32 = u_xlat0.x;
  let x_3635 : f32 = u_xlat68;
  u_xlat0.x = (x_3634 * x_3635);
  let x_3638 : vec3<f32> = u_xlat0;
  let x_3640 : vec4<f32> = u_xlat2;
  let x_3642 : vec3<f32> = (vec3<f32>(x_3638.x, x_3638.x, x_3638.x) * vec3<f32>(x_3640.x, x_3640.y, x_3640.z));
  let x_3643 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3642.x, x_3642.y, x_3642.z, x_3643.w);
  let x_3645 : vec4<f32> = u_xlat4;
  let x_3648 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3650 : vec3<f32> = (vec3<f32>(x_3645.x, x_3645.y, x_3645.z) + vec3<f32>(x_3648.x, x_3648.y, x_3648.z));
  let x_3651 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3650.x, x_3650.y, x_3650.z, x_3651.w);
  let x_3653 : vec4<f32> = u_xlat8;
  let x_3655 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3653.x, x_3653.y, x_3653.z), vec3<f32>(x_3655.x, x_3655.y, x_3655.z));
  let x_3660 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3660, 1.17549435e-37f);
  let x_3664 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3664);
  let x_3667 : vec3<f32> = u_xlat0;
  let x_3669 : vec4<f32> = u_xlat8;
  let x_3671 : vec3<f32> = (vec3<f32>(x_3667.x, x_3667.x, x_3667.x) * vec3<f32>(x_3669.x, x_3669.y, x_3669.z));
  let x_3672 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3671.x, x_3671.y, x_3671.z, x_3672.w);
  let x_3674 : vec3<f32> = u_xlat22;
  let x_3675 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3674, vec3<f32>(x_3675.x, x_3675.y, x_3675.z));
  let x_3680 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3680, 0.0f, 1.0f);
  let x_3684 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3686 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3684.x, x_3684.y, x_3684.z), vec3<f32>(x_3686.x, x_3686.y, x_3686.z));
  let x_3689 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3689, 0.0f, 1.0f);
  let x_3692 : f32 = u_xlat0.x;
  let x_3694 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3692 * x_3694);
  let x_3698 : f32 = u_xlat0.x;
  let x_3700 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3698 * x_3700) + 1.000010014f);
  let x_3705 : f32 = u_xlat68;
  let x_3706 : f32 = u_xlat68;
  u_xlat68 = (x_3705 * x_3706);
  let x_3709 : f32 = u_xlat0.x;
  let x_3711 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3709 * x_3711);
  let x_3714 : f32 = u_xlat68;
  u_xlat68 = max(x_3714, 0.100000001f);
  let x_3718 : f32 = u_xlat0.x;
  let x_3719 : f32 = u_xlat68;
  u_xlat0.x = (x_3718 * x_3719);
  let x_3723 : f32 = u_xlat29.x;
  let x_3725 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3723 * x_3725);
  let x_3728 : f32 = u_xlat71;
  let x_3730 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3728 / x_3730);
  let x_3733 : vec3<f32> = u_xlat0;
  let x_3737 : vec3<f32> = u_xlat5;
  let x_3738 : vec3<f32> = ((vec3<f32>(x_3733.x, x_3733.x, x_3733.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3737);
  let x_3739 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3738.x, x_3738.y, x_3738.z, x_3739.w);
  let x_3741 : vec4<f32> = u_xlat2;
  let x_3743 : vec4<f32> = u_xlat8;
  let x_3745 : vec3<f32> = (vec3<f32>(x_3741.x, x_3741.y, x_3741.z) * vec3<f32>(x_3743.x, x_3743.y, x_3743.z));
  let x_3746 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3745.x, x_3745.y, x_3745.z, x_3746.w);
  let x_3749 : f32 = x_139.x_AdditionalLightsCount.x;
  let x_3751 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3749, x_3751);
  let x_3755 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3755));
  let x_3759 : f32 = x_3351.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3761 : f32 = x_3351.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3763 : f32 = x_3351.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3765 : f32 = x_3351.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3766 : vec4<f32> = vec4<f32>(x_3759, x_3761, x_3763, x_3765);
  let x_3772 : vec4<bool> = (vec4<f32>(x_3766.x, x_3766.y, x_3766.z, x_3766.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3772.x, x_3772.y);
  u_xlat9.x = 0.0f;
  u_xlat9.y = 0.0f;
  u_xlat9.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3783 : u32 = u_xlatu_loop_1;
    let x_3784 : u32 = u_xlatu0;
    if ((x_3783 < x_3784)) {
    } else {
      break;
    }
    let x_3787 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_3787 >> 2u);
    let x_3790 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3790 & 3u));
    let x_3793 : u32 = u_xlatu69;
    let x_3796 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3793)];
    let x_3806 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3811 : vec4<u32> = indexable[x_3806];
    u_xlat69 = dot(x_3796, bitcast<vec4<f32>>(x_3811));
    let x_3814 : f32 = u_xlat69;
    u_xlatu69 = bitcast<u32>(i32(x_3814));
    let x_3817 : vec3<f32> = vs_INTERP0;
    let x_3829 : u32 = u_xlatu69;
    let x_3832 : vec4<f32> = x_3828.x_AdditionalLightsPosition[bitcast<i32>(x_3829)];
    let x_3835 : u32 = u_xlatu69;
    let x_3838 : vec4<f32> = x_3828.x_AdditionalLightsPosition[bitcast<i32>(x_3835)];
    let x_3840 : vec3<f32> = ((-(x_3817) * vec3<f32>(x_3832.w, x_3832.w, x_3832.w)) + vec3<f32>(x_3838.x, x_3838.y, x_3838.z));
    let x_3841 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3840.x, x_3840.y, x_3840.z, x_3841.w);
    let x_3843 : vec4<f32> = u_xlat10;
    let x_3845 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_3843.x, x_3843.y, x_3843.z), vec3<f32>(x_3845.x, x_3845.y, x_3845.z));
    let x_3848 : f32 = u_xlat70;
    u_xlat70 = max(x_3848, 6.10351562e-05f);
    let x_3852 : f32 = u_xlat70;
    u_xlat72 = inverseSqrt(x_3852);
    let x_3854 : f32 = u_xlat72;
    let x_3856 : vec4<f32> = u_xlat10;
    let x_3858 : vec3<f32> = (vec3<f32>(x_3854, x_3854, x_3854) * vec3<f32>(x_3856.x, x_3856.y, x_3856.z));
    let x_3859 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3858.x, x_3858.y, x_3858.z, x_3859.w);
    let x_3861 : f32 = u_xlat70;
    u_xlat73 = (1.0f / x_3861);
    let x_3863 : f32 = u_xlat70;
    let x_3864 : u32 = u_xlatu69;
    let x_3867 : f32 = x_3828.x_AdditionalLightsAttenuation[bitcast<i32>(x_3864)].x;
    u_xlat70 = (x_3863 * x_3867);
    let x_3869 : f32 = u_xlat70;
    let x_3871 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3869) * x_3871) + 1.0f);
    let x_3874 : f32 = u_xlat70;
    u_xlat70 = max(x_3874, 0.0f);
    let x_3876 : f32 = u_xlat70;
    let x_3877 : f32 = u_xlat70;
    u_xlat70 = (x_3876 * x_3877);
    let x_3879 : f32 = u_xlat70;
    let x_3880 : f32 = u_xlat73;
    u_xlat70 = (x_3879 * x_3880);
    let x_3882 : u32 = u_xlatu69;
    let x_3885 : vec4<f32> = x_3828.x_AdditionalLightsSpotDir[bitcast<i32>(x_3882)];
    let x_3887 : vec4<f32> = u_xlat11;
    u_xlat73 = dot(vec3<f32>(x_3885.x, x_3885.y, x_3885.z), vec3<f32>(x_3887.x, x_3887.y, x_3887.z));
    let x_3890 : f32 = u_xlat73;
    let x_3891 : u32 = u_xlatu69;
    let x_3894 : f32 = x_3828.x_AdditionalLightsAttenuation[bitcast<i32>(x_3891)].z;
    let x_3896 : u32 = u_xlatu69;
    let x_3899 : f32 = x_3828.x_AdditionalLightsAttenuation[bitcast<i32>(x_3896)].w;
    u_xlat73 = ((x_3890 * x_3894) + x_3899);
    let x_3901 : f32 = u_xlat73;
    u_xlat73 = clamp(x_3901, 0.0f, 1.0f);
    let x_3903 : f32 = u_xlat73;
    let x_3904 : f32 = u_xlat73;
    u_xlat73 = (x_3903 * x_3904);
    let x_3906 : f32 = u_xlat70;
    let x_3907 : f32 = u_xlat73;
    u_xlat70 = (x_3906 * x_3907);
    let x_3910 : u32 = u_xlatu69;
    u_xlatu73 = (x_3910 >> 5u);
    let x_3913 : u32 = u_xlatu69;
    u_xlati52 = (1i << bitcast<u32>((bitcast<i32>(x_3913) & 31i)));
    let x_3919 : i32 = u_xlati52;
    let x_3921 : u32 = u_xlatu73;
    let x_3924 : f32 = x_3351.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3921)].el;
    u_xlati73 = bitcast<i32>((bitcast<u32>(x_3919) & bitcast<u32>(x_3924)));
    let x_3928 : i32 = u_xlati73;
    if ((x_3928 != 0i)) {
      let x_3938 : u32 = u_xlatu69;
      let x_3941 : f32 = x_3937.x_AdditionalLightsLightTypes[bitcast<i32>(x_3938)].el;
      u_xlati73 = i32(x_3941);
      let x_3943 : i32 = u_xlati73;
      u_xlati52 = select(1i, 0i, (x_3943 != 0i));
      let x_3947 : u32 = u_xlatu69;
      u_xlati74 = (bitcast<i32>(x_3947) << bitcast<u32>(2i));
      let x_3950 : i32 = u_xlati52;
      if ((x_3950 != 0i)) {
        let x_3954 : vec3<f32> = vs_INTERP0;
        let x_3956 : i32 = u_xlati74;
        let x_3959 : i32 = u_xlati74;
        let x_3963 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_3956 + 1i) / 4i)][((x_3959 + 1i) % 4i)];
        let x_3965 : vec3<f32> = (vec3<f32>(x_3954.y, x_3954.y, x_3954.y) * vec3<f32>(x_3963.x, x_3963.y, x_3963.w));
        let x_3966 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3965.x, x_3965.y, x_3965.z, x_3966.w);
        let x_3968 : i32 = u_xlati74;
        let x_3970 : i32 = u_xlati74;
        let x_3973 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[(x_3968 / 4i)][(x_3970 % 4i)];
        let x_3975 : vec3<f32> = vs_INTERP0;
        let x_3978 : vec4<f32> = u_xlat12;
        let x_3980 : vec3<f32> = ((vec3<f32>(x_3973.x, x_3973.y, x_3973.w) * vec3<f32>(x_3975.x, x_3975.x, x_3975.x)) + vec3<f32>(x_3978.x, x_3978.y, x_3978.z));
        let x_3981 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3980.x, x_3980.y, x_3980.z, x_3981.w);
        let x_3983 : i32 = u_xlati74;
        let x_3986 : i32 = u_xlati74;
        let x_3990 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_3983 + 2i) / 4i)][((x_3986 + 2i) % 4i)];
        let x_3992 : vec3<f32> = vs_INTERP0;
        let x_3995 : vec4<f32> = u_xlat12;
        let x_3997 : vec3<f32> = ((vec3<f32>(x_3990.x, x_3990.y, x_3990.w) * vec3<f32>(x_3992.z, x_3992.z, x_3992.z)) + vec3<f32>(x_3995.x, x_3995.y, x_3995.z));
        let x_3998 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3997.x, x_3997.y, x_3997.z, x_3998.w);
        let x_4000 : vec4<f32> = u_xlat12;
        let x_4002 : i32 = u_xlati74;
        let x_4005 : i32 = u_xlati74;
        let x_4009 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_4002 + 3i) / 4i)][((x_4005 + 3i) % 4i)];
        let x_4011 : vec3<f32> = (vec3<f32>(x_4000.x, x_4000.y, x_4000.z) + vec3<f32>(x_4009.x, x_4009.y, x_4009.w));
        let x_4012 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4011.x, x_4011.y, x_4011.z, x_4012.w);
        let x_4014 : vec4<f32> = u_xlat12;
        let x_4016 : vec4<f32> = u_xlat12;
        let x_4018 : vec2<f32> = (vec2<f32>(x_4014.x, x_4014.y) / vec2<f32>(x_4016.z, x_4016.z));
        let x_4019 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4018.x, x_4018.y, x_4019.z, x_4019.w);
        let x_4021 : vec4<f32> = u_xlat12;
        let x_4024 : vec2<f32> = ((vec2<f32>(x_4021.x, x_4021.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4025 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4024.x, x_4024.y, x_4025.z, x_4025.w);
        let x_4027 : vec4<f32> = u_xlat12;
        let x_4031 : vec2<f32> = clamp(vec2<f32>(x_4027.x, x_4027.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4032 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4031.x, x_4031.y, x_4032.z, x_4032.w);
        let x_4034 : u32 = u_xlatu69;
        let x_4037 : vec4<f32> = x_3937.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4034)];
        let x_4039 : vec4<f32> = u_xlat12;
        let x_4042 : u32 = u_xlatu69;
        let x_4045 : vec4<f32> = x_3937.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4042)];
        let x_4047 : vec2<f32> = ((vec2<f32>(x_4037.x, x_4037.y) * vec2<f32>(x_4039.x, x_4039.y)) + vec2<f32>(x_4045.z, x_4045.w));
        let x_4048 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4047.x, x_4047.y, x_4048.z, x_4048.w);
      } else {
        let x_4051 : i32 = u_xlati73;
        u_xlatb73 = (x_4051 == 1i);
        let x_4053 : bool = u_xlatb73;
        u_xlati73 = select(0i, 1i, x_4053);
        let x_4055 : i32 = u_xlati73;
        if ((x_4055 != 0i)) {
          let x_4060 : vec3<f32> = vs_INTERP0;
          let x_4062 : i32 = u_xlati74;
          let x_4065 : i32 = u_xlati74;
          let x_4069 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_4062 + 1i) / 4i)][((x_4065 + 1i) % 4i)];
          u_xlat56 = (vec2<f32>(x_4060.y, x_4060.y) * vec2<f32>(x_4069.x, x_4069.y));
          let x_4072 : i32 = u_xlati74;
          let x_4074 : i32 = u_xlati74;
          let x_4077 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[(x_4072 / 4i)][(x_4074 % 4i)];
          let x_4079 : vec3<f32> = vs_INTERP0;
          let x_4082 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4077.x, x_4077.y) * vec2<f32>(x_4079.x, x_4079.x)) + x_4082);
          let x_4084 : i32 = u_xlati74;
          let x_4087 : i32 = u_xlati74;
          let x_4091 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_4084 + 2i) / 4i)][((x_4087 + 2i) % 4i)];
          let x_4093 : vec3<f32> = vs_INTERP0;
          let x_4096 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4091.x, x_4091.y) * vec2<f32>(x_4093.z, x_4093.z)) + x_4096);
          let x_4098 : vec2<f32> = u_xlat56;
          let x_4099 : i32 = u_xlati74;
          let x_4102 : i32 = u_xlati74;
          let x_4106 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_4099 + 3i) / 4i)][((x_4102 + 3i) % 4i)];
          u_xlat56 = (x_4098 + vec2<f32>(x_4106.x, x_4106.y));
          let x_4109 : vec2<f32> = u_xlat56;
          u_xlat56 = ((x_4109 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4112 : vec2<f32> = u_xlat56;
          u_xlat56 = fract(x_4112);
          let x_4114 : u32 = u_xlatu69;
          let x_4117 : vec4<f32> = x_3937.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4114)];
          let x_4119 : vec2<f32> = u_xlat56;
          let x_4121 : u32 = u_xlatu69;
          let x_4124 : vec4<f32> = x_3937.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4121)];
          let x_4126 : vec2<f32> = ((vec2<f32>(x_4117.x, x_4117.y) * x_4119) + vec2<f32>(x_4124.z, x_4124.w));
          let x_4127 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4126.x, x_4126.y, x_4127.z, x_4127.w);
        } else {
          let x_4130 : vec3<f32> = vs_INTERP0;
          let x_4132 : i32 = u_xlati74;
          let x_4135 : i32 = u_xlati74;
          let x_4139 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_4132 + 1i) / 4i)][((x_4135 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_4130.y, x_4130.y, x_4130.y, x_4130.y) * x_4139);
          let x_4141 : i32 = u_xlati74;
          let x_4143 : i32 = u_xlati74;
          let x_4146 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[(x_4141 / 4i)][(x_4143 % 4i)];
          let x_4147 : vec3<f32> = vs_INTERP0;
          let x_4150 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4146 * vec4<f32>(x_4147.x, x_4147.x, x_4147.x, x_4147.x)) + x_4150);
          let x_4152 : i32 = u_xlati74;
          let x_4155 : i32 = u_xlati74;
          let x_4159 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_4152 + 2i) / 4i)][((x_4155 + 2i) % 4i)];
          let x_4160 : vec3<f32> = vs_INTERP0;
          let x_4163 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4159 * vec4<f32>(x_4160.z, x_4160.z, x_4160.z, x_4160.z)) + x_4163);
          let x_4165 : vec4<f32> = u_xlat13;
          let x_4166 : i32 = u_xlati74;
          let x_4169 : i32 = u_xlati74;
          let x_4173 : vec4<f32> = x_3937.x_AdditionalLightsWorldToLights[((x_4166 + 3i) / 4i)][((x_4169 + 3i) % 4i)];
          u_xlat13 = (x_4165 + x_4173);
          let x_4175 : vec4<f32> = u_xlat13;
          let x_4177 : vec4<f32> = u_xlat13;
          let x_4179 : vec3<f32> = (vec3<f32>(x_4175.x, x_4175.y, x_4175.z) / vec3<f32>(x_4177.w, x_4177.w, x_4177.w));
          let x_4180 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4179.x, x_4179.y, x_4179.z, x_4180.w);
          let x_4182 : vec4<f32> = u_xlat13;
          let x_4184 : vec4<f32> = u_xlat13;
          u_xlat73 = dot(vec3<f32>(x_4182.x, x_4182.y, x_4182.z), vec3<f32>(x_4184.x, x_4184.y, x_4184.z));
          let x_4187 : f32 = u_xlat73;
          u_xlat73 = inverseSqrt(x_4187);
          let x_4189 : f32 = u_xlat73;
          let x_4191 : vec4<f32> = u_xlat13;
          let x_4193 : vec3<f32> = (vec3<f32>(x_4189, x_4189, x_4189) * vec3<f32>(x_4191.x, x_4191.y, x_4191.z));
          let x_4194 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4193.x, x_4193.y, x_4193.z, x_4194.w);
          let x_4196 : vec4<f32> = u_xlat13;
          u_xlat73 = dot(abs(vec3<f32>(x_4196.x, x_4196.y, x_4196.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4201 : f32 = u_xlat73;
          u_xlat73 = max(x_4201, 0.000001f);
          let x_4204 : f32 = u_xlat73;
          u_xlat73 = (1.0f / x_4204);
          let x_4206 : f32 = u_xlat73;
          let x_4208 : vec4<f32> = u_xlat13;
          let x_4210 : vec3<f32> = (vec3<f32>(x_4206, x_4206, x_4206) * vec3<f32>(x_4208.z, x_4208.x, x_4208.y));
          let x_4211 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4210.x, x_4210.y, x_4210.z, x_4211.w);
          let x_4214 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4214);
          let x_4218 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4218, 0.0f, 1.0f);
          let x_4222 : vec4<f32> = u_xlat14;
          let x_4225 : vec4<bool> = (vec4<f32>(x_4222.y, x_4222.z, x_4222.y, x_4222.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb52 = vec2<bool>(x_4225.x, x_4225.y);
          let x_4228 : bool = u_xlatb52.x;
          if (x_4228) {
            let x_4233 : f32 = u_xlat14.x;
            x_4229 = x_4233;
          } else {
            let x_4236 : f32 = u_xlat14.x;
            x_4229 = -(x_4236);
          }
          let x_4238 : f32 = x_4229;
          u_xlat52.x = x_4238;
          let x_4241 : bool = u_xlatb52.y;
          if (x_4241) {
            let x_4246 : f32 = u_xlat14.x;
            x_4242 = x_4246;
          } else {
            let x_4249 : f32 = u_xlat14.x;
            x_4242 = -(x_4249);
          }
          let x_4251 : f32 = x_4242;
          u_xlat52.y = x_4251;
          let x_4253 : vec4<f32> = u_xlat13;
          let x_4255 : f32 = u_xlat73;
          let x_4258 : vec2<f32> = u_xlat52;
          u_xlat52 = ((vec2<f32>(x_4253.x, x_4253.y) * vec2<f32>(x_4255, x_4255)) + x_4258);
          let x_4260 : vec2<f32> = u_xlat52;
          u_xlat52 = ((x_4260 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4263 : vec2<f32> = u_xlat52;
          u_xlat52 = clamp(x_4263, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4267 : u32 = u_xlatu69;
          let x_4270 : vec4<f32> = x_3937.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4267)];
          let x_4272 : vec2<f32> = u_xlat52;
          let x_4274 : u32 = u_xlatu69;
          let x_4277 : vec4<f32> = x_3937.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4274)];
          let x_4279 : vec2<f32> = ((vec2<f32>(x_4270.x, x_4270.y) * x_4272) + vec2<f32>(x_4277.z, x_4277.w));
          let x_4280 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4279.x, x_4279.y, x_4280.z, x_4280.w);
        }
      }
      let x_4287 : vec4<f32> = u_xlat12;
      let x_4290 : f32 = x_139.x_GlobalMipBias.x;
      let x_4291 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4287.x, x_4287.y), x_4290);
      u_xlat12 = x_4291;
      let x_4293 : bool = u_xlatb8.y;
      if (x_4293) {
        let x_4298 : f32 = u_xlat12.w;
        x_4294 = x_4298;
      } else {
        let x_4301 : f32 = u_xlat12.x;
        x_4294 = x_4301;
      }
      let x_4302 : f32 = x_4294;
      u_xlat73 = x_4302;
      let x_4304 : bool = u_xlatb8.x;
      if (x_4304) {
        let x_4308 : vec4<f32> = u_xlat12;
        x_4305 = vec3<f32>(x_4308.x, x_4308.y, x_4308.z);
      } else {
        let x_4311 : f32 = u_xlat73;
        x_4305 = vec3<f32>(x_4311, x_4311, x_4311);
      }
      let x_4313 : vec3<f32> = x_4305;
      let x_4314 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4313.x, x_4313.y, x_4313.z, x_4314.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4320 : vec4<f32> = u_xlat12;
    let x_4322 : u32 = u_xlatu69;
    let x_4325 : vec4<f32> = x_3828.x_AdditionalLightsColor[bitcast<i32>(x_4322)];
    let x_4327 : vec3<f32> = (vec3<f32>(x_4320.x, x_4320.y, x_4320.z) * vec3<f32>(x_4325.x, x_4325.y, x_4325.z));
    let x_4328 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4327.x, x_4327.y, x_4327.z, x_4328.w);
    let x_4330 : f32 = u_xlat51;
    let x_4332 : vec4<f32> = u_xlat12;
    let x_4334 : vec3<f32> = (vec3<f32>(x_4330, x_4330, x_4330) * vec3<f32>(x_4332.x, x_4332.y, x_4332.z));
    let x_4335 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4334.x, x_4334.y, x_4334.z, x_4335.w);
    let x_4337 : vec3<f32> = u_xlat22;
    let x_4338 : vec4<f32> = u_xlat11;
    u_xlat69 = dot(x_4337, vec3<f32>(x_4338.x, x_4338.y, x_4338.z));
    let x_4341 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4341, 0.0f, 1.0f);
    let x_4343 : f32 = u_xlat69;
    let x_4344 : f32 = u_xlat70;
    u_xlat69 = (x_4343 * x_4344);
    let x_4346 : f32 = u_xlat69;
    let x_4348 : vec4<f32> = u_xlat12;
    let x_4350 : vec3<f32> = (vec3<f32>(x_4346, x_4346, x_4346) * vec3<f32>(x_4348.x, x_4348.y, x_4348.z));
    let x_4351 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4350.x, x_4350.y, x_4350.z, x_4351.w);
    let x_4353 : vec4<f32> = u_xlat10;
    let x_4355 : f32 = u_xlat72;
    let x_4358 : vec4<f32> = u_xlat4;
    let x_4360 : vec3<f32> = ((vec3<f32>(x_4353.x, x_4353.y, x_4353.z) * vec3<f32>(x_4355, x_4355, x_4355)) + vec3<f32>(x_4358.x, x_4358.y, x_4358.z));
    let x_4361 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4360.x, x_4360.y, x_4360.z, x_4361.w);
    let x_4363 : vec4<f32> = u_xlat10;
    let x_4365 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_4363.x, x_4363.y, x_4363.z), vec3<f32>(x_4365.x, x_4365.y, x_4365.z));
    let x_4368 : f32 = u_xlat69;
    u_xlat69 = max(x_4368, 1.17549435e-37f);
    let x_4370 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_4370);
    let x_4372 : f32 = u_xlat69;
    let x_4374 : vec4<f32> = u_xlat10;
    let x_4376 : vec3<f32> = (vec3<f32>(x_4372, x_4372, x_4372) * vec3<f32>(x_4374.x, x_4374.y, x_4374.z));
    let x_4377 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4376.x, x_4376.y, x_4376.z, x_4377.w);
    let x_4379 : vec3<f32> = u_xlat22;
    let x_4380 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(x_4379, vec3<f32>(x_4380.x, x_4380.y, x_4380.z));
    let x_4383 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4383, 0.0f, 1.0f);
    let x_4385 : vec4<f32> = u_xlat11;
    let x_4387 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_4385.x, x_4385.y, x_4385.z), vec3<f32>(x_4387.x, x_4387.y, x_4387.z));
    let x_4390 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4390, 0.0f, 1.0f);
    let x_4392 : f32 = u_xlat69;
    let x_4393 : f32 = u_xlat69;
    u_xlat69 = (x_4392 * x_4393);
    let x_4395 : f32 = u_xlat69;
    let x_4397 : f32 = u_xlat3.x;
    u_xlat69 = ((x_4395 * x_4397) + 1.000010014f);
    let x_4400 : f32 = u_xlat70;
    let x_4401 : f32 = u_xlat70;
    u_xlat70 = (x_4400 * x_4401);
    let x_4403 : f32 = u_xlat69;
    let x_4404 : f32 = u_xlat69;
    u_xlat69 = (x_4403 * x_4404);
    let x_4406 : f32 = u_xlat70;
    u_xlat70 = max(x_4406, 0.100000001f);
    let x_4408 : f32 = u_xlat69;
    let x_4409 : f32 = u_xlat70;
    u_xlat69 = (x_4408 * x_4409);
    let x_4412 : f32 = u_xlat29.x;
    let x_4413 : f32 = u_xlat69;
    u_xlat69 = (x_4412 * x_4413);
    let x_4415 : f32 = u_xlat71;
    let x_4416 : f32 = u_xlat69;
    u_xlat69 = (x_4415 / x_4416);
    let x_4418 : f32 = u_xlat69;
    let x_4421 : vec3<f32> = u_xlat5;
    let x_4422 : vec3<f32> = ((vec3<f32>(x_4418, x_4418, x_4418) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4421);
    let x_4423 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4422.x, x_4422.y, x_4422.z, x_4423.w);
    let x_4425 : vec4<f32> = u_xlat10;
    let x_4427 : vec4<f32> = u_xlat12;
    let x_4430 : vec4<f32> = u_xlat9;
    let x_4432 : vec3<f32> = ((vec3<f32>(x_4425.x, x_4425.y, x_4425.z) * vec3<f32>(x_4427.x, x_4427.y, x_4427.z)) + vec3<f32>(x_4430.x, x_4430.y, x_4430.z));
    let x_4433 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4432.x, x_4432.y, x_4432.z, x_4433.w);

    continuing {
      let x_4435 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4435 + bitcast<u32>(1i));
    }
  }
  let x_4437 : vec4<f32> = u_xlat6;
  let x_4439 : vec4<f32> = u_xlat7;
  let x_4442 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4437.x, x_4437.y, x_4437.z) * vec3<f32>(x_4439.x, x_4439.x, x_4439.x)) + vec3<f32>(x_4442.x, x_4442.y, x_4442.z));
  let x_4445 : vec4<f32> = u_xlat9;
  let x_4447 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4445.x, x_4445.y, x_4445.z) + x_4447);
  let x_4449 : vec4<f32> = vs_INTERP4;
  let x_4451 : vec3<f32> = u_xlat1;
  let x_4453 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_4449.w, x_4449.w, x_4449.w) * x_4451) + x_4453);
  let x_4456 : f32 = u_xlat25;
  let x_4457 : f32 = u_xlat25;
  u_xlat66 = (x_4456 * -(x_4457));
  let x_4460 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4460);
  let x_4462 : vec3<f32> = u_xlat0;
  let x_4465 : vec4<f32> = x_139.unity_FogColor;
  u_xlat0 = (x_4462 + -(vec3<f32>(x_4465.x, x_4465.y, x_4465.z)));
  let x_4471 : f32 = u_xlat66;
  let x_4473 : vec3<f32> = u_xlat0;
  let x_4476 : vec4<f32> = x_139.unity_FogColor;
  let x_4478 : vec3<f32> = ((vec3<f32>(x_4471, x_4471, x_4471) * x_4473) + vec3<f32>(x_4476.x, x_4476.y, x_4476.z));
  let x_4479 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4478.x, x_4478.y, x_4478.z, x_4479.w);
  let x_4481 : bool = u_xlatb47;
  let x_4482 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4482, x_4481);
  let x_4488 : u32 = x_139.x_RenderingLayerMaxInt;
  let x_4490 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_4488 & bitcast<u32>(x_4490));
  let x_4493 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4493);
  let x_4498 : f32 = u_xlat0.x;
  let x_4500 : f32 = x_139.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4498 * x_4500);
  let x_4504 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4504, 0.0f, 1.0f);
  let x_4507 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4507.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

