type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb26 : bool;
  var u_xlat5 : vec3<f32>;
  var x_285 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var x_294 : vec3<f32>;
  var x_305 : vec3<f32>;
  var x_316 : vec3<f32>;
  var x_327 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat10 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlatb25 : bool;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_99 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_101 : vec2<f32> = vs_TEXCOORD0;
  let x_106 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_108 : vec3<f32> = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_113 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_115 : vec3<f32> = u_xlat8;
  let x_118 : vec4<f32> = u_xlat1;
  let x_120 : vec3<f32> = ((vec3<f32>(x_113.x, x_113.y, x_113.z) * vec3<f32>(x_115.x, x_115.x, x_115.x)) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_123 : f32 = u_xlat16;
  let x_125 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_123, x_123, x_123) * vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_131 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_131 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_136 : vec3<f32> = u_xlat9;
  let x_138 : vec2<f32> = vs_TEXCOORD0;
  let x_139 : vec2<f32> = (vec2<f32>(x_136.x, x_136.y) + x_138);
  let x_140 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_139.x, x_139.y, x_140.z);
  let x_145 : vec3<f32> = u_xlat9;
  let x_148 : f32 = x_33.x_GlobalMipBias.x;
  let x_149 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_145.x, x_145.y), x_148);
  u_xlat1.x = x_149.x;
  let x_153 : f32 = x_33.x_ZBufferParams.z;
  let x_155 : f32 = u_xlat1.x;
  let x_158 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_153 * x_155) + x_158);
  let x_162 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_162);
  let x_167 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_167 * 2.0f);
  u_xlat2.y = 0.0f;
  let x_172 : vec4<f32> = u_xlat2;
  let x_174 : vec2<f32> = vs_TEXCOORD0;
  let x_175 : vec2<f32> = (vec2<f32>(x_172.x, x_172.y) + x_174);
  let x_176 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_181 : vec4<f32> = u_xlat2;
  let x_184 : f32 = x_33.x_GlobalMipBias.x;
  let x_185 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_181.x, x_181.y), x_184);
  u_xlat1.x = x_185.x;
  let x_189 : f32 = x_33.x_ZBufferParams.z;
  let x_191 : f32 = u_xlat1.x;
  let x_194 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_189 * x_191) + x_194);
  let x_198 : f32 = u_xlat1.x;
  u_xlat2.z = (1.0f / x_198);
  u_xlat11.x = 0.0f;
  let x_204 : f32 = x_33.x_SourceSize.w;
  u_xlat11.y = (x_204 * 2.0f);
  let x_207 : vec3<f32> = u_xlat11;
  let x_209 : vec2<f32> = vs_TEXCOORD0;
  let x_210 : vec2<f32> = (vec2<f32>(x_207.x, x_207.y) + x_209);
  let x_211 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_210.x, x_210.y, x_211.z);
  let x_216 : vec3<f32> = u_xlat11;
  let x_219 : f32 = x_33.x_GlobalMipBias.x;
  let x_220 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_216.x, x_216.y), x_219);
  u_xlat1.x = x_220.x;
  let x_224 : f32 = x_33.x_ZBufferParams.z;
  let x_226 : f32 = u_xlat1.x;
  let x_229 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_224 * x_226) + x_229);
  let x_233 : f32 = u_xlat1.x;
  u_xlat11.z = (1.0f / x_233);
  u_xlat12.x = 0.0f;
  let x_239 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_239 * -2.0f);
  let x_242 : vec3<f32> = u_xlat12;
  let x_244 : vec2<f32> = vs_TEXCOORD0;
  let x_245 : vec2<f32> = (vec2<f32>(x_242.x, x_242.y) + x_244);
  let x_246 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_245.x, x_245.y, x_246.z);
  let x_251 : vec3<f32> = u_xlat12;
  let x_254 : f32 = x_33.x_GlobalMipBias.x;
  let x_255 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_251.x, x_251.y), x_254);
  u_xlat1.x = x_255.x;
  let x_259 : f32 = x_33.x_ZBufferParams.z;
  let x_261 : f32 = u_xlat1.x;
  let x_264 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_259 * x_261) + x_264);
  let x_268 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_268);
  let x_273 : f32 = u_xlat2.z;
  let x_275 : f32 = u_xlat9.z;
  u_xlatb1 = (x_273 < x_275);
  let x_279 : f32 = u_xlat11.z;
  let x_281 : f32 = u_xlat12.z;
  u_xlatb26 = (x_279 < x_281);
  let x_284 : bool = u_xlatb1;
  if (x_284) {
    let x_288 : vec3<f32> = u_xlat9;
    x_285 = x_288;
  } else {
    let x_290 : vec3<f32> = u_xlat12;
    x_285 = x_290;
  }
  let x_291 : vec3<f32> = x_285;
  u_xlat5 = x_291;
  let x_293 : bool = u_xlatb1;
  if (x_293) {
    let x_297 : vec3<f32> = u_xlat12;
    x_294 = x_297;
  } else {
    let x_299 : vec4<f32> = u_xlat2;
    x_294 = vec3<f32>(x_299.x, x_299.y, x_299.z);
  }
  let x_301 : vec3<f32> = x_294;
  let x_302 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_302.x, x_301.x, x_301.y, x_301.z);
  let x_304 : bool = u_xlatb1;
  if (x_304) {
    let x_308 : vec3<f32> = u_xlat11;
    x_305 = x_308;
  } else {
    let x_310 : vec4<f32> = u_xlat2;
    x_305 = vec3<f32>(x_310.x, x_310.y, x_310.z);
  }
  let x_312 : vec3<f32> = x_305;
  let x_313 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_312.x, x_312.y, x_312.z, x_313.w);
  let x_315 : bool = u_xlatb1;
  if (x_315) {
    let x_319 : vec3<f32> = u_xlat9;
    x_316 = x_319;
  } else {
    let x_321 : vec3<f32> = u_xlat11;
    x_316 = x_321;
  }
  let x_322 : vec3<f32> = x_316;
  let x_323 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_323.x, x_322.x, x_322.y, x_322.z);
  let x_325 : bool = u_xlatb26;
  if (x_325) {
    let x_330 : vec3<f32> = u_xlat5;
    x_327 = vec2<f32>(x_330.x, x_330.y);
  } else {
    let x_333 : vec4<f32> = u_xlat2;
    x_327 = vec2<f32>(x_333.x, x_333.y);
  }
  let x_335 : vec2<f32> = x_327;
  let x_336 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_335.x, x_335.y, x_336.z, x_336.w);
  let x_339 : f32 = u_xlat5.z;
  u_xlat4.x = x_339;
  let x_342 : f32 = u_xlat2.z;
  u_xlat1.x = x_342;
  let x_344 : bool = u_xlatb26;
  let x_345 : vec4<f32> = u_xlat4;
  let x_346 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_346, x_345, vec4<bool>(x_344, x_344, x_344, x_344));
  let x_352 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_352) + 1.0f);
  let x_355 : vec4<f32> = u_xlat1;
  let x_358 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_360 : vec2<f32> = (vec2<f32>(x_355.w, x_355.x) * vec2<f32>(x_358.x, x_358.x));
  let x_361 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_360.x, x_361.y, x_361.z, x_360.y);
  let x_365 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_367 : vec4<f32> = u_xlat1;
  let x_371 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_373 : vec3<f32> = ((vec3<f32>(x_365.z, x_365.x, x_365.y) * vec3<f32>(x_367.y, x_367.y, x_367.y)) + vec3<f32>(x_371.z, x_371.x, x_371.y));
  let x_374 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_377 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_379 : f32 = u_xlat17;
  let x_382 : vec4<f32> = u_xlat3;
  let x_384 : vec3<f32> = ((vec3<f32>(x_377.z, x_377.x, x_377.y) * vec3<f32>(x_379, x_379, x_379)) + vec3<f32>(x_382.x, x_382.y, x_382.z));
  let x_385 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_384.x, x_384.y, x_384.z, x_385.w);
  let x_387 : vec4<f32> = u_xlat3;
  let x_389 : vec4<f32> = u_xlat1;
  let x_392 : vec3<f32> = u_xlat8;
  let x_395 : vec3<f32> = ((vec3<f32>(x_387.x, x_387.y, x_387.z) * vec3<f32>(x_389.x, x_389.x, x_389.x)) + -(vec3<f32>(x_392.z, x_392.x, x_392.y)));
  let x_396 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_400 : f32 = u_xlat2.y;
  u_xlat10.x = (-(x_400) + 1.0f);
  let x_405 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_407 : vec4<f32> = u_xlat2;
  let x_411 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_413 : vec3<f32> = ((vec3<f32>(x_405.y, x_405.z, x_405.x) * vec3<f32>(x_407.x, x_407.x, x_407.x)) + vec3<f32>(x_411.y, x_411.z, x_411.x));
  let x_414 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_413.x, x_414.y, x_413.y, x_413.z);
  let x_417 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_419 : vec2<f32> = u_xlat10;
  let x_422 : vec4<f32> = u_xlat2;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.y, x_417.z, x_417.x) * vec3<f32>(x_419.x, x_419.x, x_419.x)) + vec3<f32>(x_422.x, x_422.z, x_422.w));
  let x_425 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat2;
  let x_429 : vec4<f32> = u_xlat1;
  let x_432 : vec3<f32> = u_xlat8;
  let x_435 : vec3<f32> = ((vec3<f32>(x_427.x, x_427.y, x_427.z) * vec3<f32>(x_429.w, x_429.w, x_429.w)) + -(vec3<f32>(x_432.y, x_432.z, x_432.x)));
  let x_436 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_435.x, x_435.y, x_435.z, x_436.w);
  let x_438 : vec4<f32> = u_xlat1;
  let x_440 : vec4<f32> = u_xlat2;
  let x_442 : vec3<f32> = (vec3<f32>(x_438.x, x_438.y, x_438.z) * vec3<f32>(x_440.x, x_440.y, x_440.z));
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_442.x, x_442.y, x_442.z, x_443.w);
  let x_445 : vec4<f32> = u_xlat1;
  let x_447 : vec4<f32> = u_xlat2;
  let x_450 : vec4<f32> = u_xlat3;
  let x_453 : vec3<f32> = ((vec3<f32>(x_445.z, x_445.x, x_445.y) * vec3<f32>(x_447.y, x_447.z, x_447.x)) + -(vec3<f32>(x_450.x, x_450.y, x_450.z)));
  let x_454 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_453.x, x_453.y, x_453.z, x_454.w);
  let x_457 : vec4<f32> = u_xlat1;
  let x_459 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_457.x, x_457.y, x_457.z), vec3<f32>(x_459.x, x_459.y, x_459.z));
  let x_462 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_462);
  let x_464 : f32 = u_xlat25;
  let x_466 : vec4<f32> = u_xlat1;
  let x_468 : vec3<f32> = (vec3<f32>(x_464, x_464, x_464) * vec3<f32>(x_466.x, x_466.y, x_466.z));
  let x_469 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
  let x_471 : vec2<f32> = vs_TEXCOORD0;
  let x_474 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_476 : vec2<f32> = (x_471 + vec2<f32>(x_474.z, x_474.w));
  let x_477 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
  let x_480 : vec4<f32> = u_xlat2;
  let x_483 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_480.x, x_480.y) * vec2<f32>(x_483.x, x_483.y));
  let x_491 : vec2<f32> = u_xlat18;
  let x_493 : f32 = x_33.x_GlobalMipBias.x;
  let x_494 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_491, x_493);
  u_xlat25 = x_494.w;
  let x_496 : f32 = u_xlat25;
  u_xlat18.x = fract(x_496);
  let x_500 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_500 * 2.0f) + -1.0f);
  let x_505 : f32 = u_xlat25;
  u_xlat25 = (x_505 + 0.9296875f);
  let x_508 : f32 = u_xlat25;
  u_xlat25 = (x_508 * 628.31854248f);
  let x_512 : f32 = u_xlat3.z;
  let x_515 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_512) * x_515) + 1.0f);
  let x_520 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_520);
  let x_523 : f32 = u_xlat25;
  u_xlat4.x = sin(x_523);
  let x_526 : f32 = u_xlat25;
  u_xlat5.x = cos(x_526);
  let x_530 : f32 = u_xlat18.x;
  let x_532 : f32 = u_xlat5.x;
  u_xlat3.x = (x_530 * x_532);
  let x_536 : f32 = u_xlat18.x;
  let x_538 : f32 = u_xlat4.x;
  u_xlat3.y = (x_536 * x_538);
  let x_541 : vec4<f32> = u_xlat1;
  let x_543 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_541.x, x_541.y, x_541.z), vec3<f32>(x_543.x, x_543.y, x_543.z));
  let x_547 : f32 = u_xlat25;
  u_xlatb25 = (x_547 >= 0.0f);
  let x_549 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_549);
  let x_551 : f32 = u_xlat25;
  let x_553 : vec4<f32> = u_xlat3;
  let x_555 : vec3<f32> = (vec3<f32>(x_551, x_551, x_551) * vec3<f32>(x_553.x, x_553.y, x_553.z));
  let x_556 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_555.x, x_555.y, x_555.z, x_556.w);
  let x_558 : vec4<f32> = u_xlat3;
  let x_561 : vec4<f32> = x_33.x_SSAOParams;
  let x_563 : vec3<f32> = (vec3<f32>(x_558.x, x_558.y, x_558.z) * vec3<f32>(x_561.y, x_561.y, x_561.y));
  let x_564 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_571 : vec3<f32> = u_xlat8;
  let x_572 : vec3<f32> = ((vec3<f32>(x_566.x, x_566.y, x_566.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_571);
  let x_573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_572.x, x_572.y, x_572.z, x_573.w);
  let x_575 : vec4<f32> = u_xlat3;
  let x_579 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_575.y, x_575.y) * vec2<f32>(x_579.x, x_579.y));
  let x_583 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_585 : vec4<f32> = u_xlat3;
  let x_588 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_583.x, x_583.y) * vec2<f32>(x_585.x, x_585.x)) + x_588);
  let x_592 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_594 : vec4<f32> = u_xlat3;
  let x_597 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_592.x, x_592.y) * vec2<f32>(x_594.z, x_594.z)) + x_597);
  let x_600 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_600;
  let x_603 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_603;
  let x_606 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_606;
  let x_608 : vec4<f32> = u_xlat4;
  let x_610 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_608.x, x_608.y, x_608.z), vec3<f32>(x_610.x, x_610.y, x_610.z));
  let x_613 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_613));
  let x_617 : vec2<f32> = u_xlat18;
  let x_618 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_617 * vec2<f32>(x_618.x, x_618.x)) + vec2<f32>(1.0f, 1.0f));
  let x_623 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_623 * vec2<f32>(0.5f, 0.5f));
  let x_626 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_626, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_633 : vec2<f32> = u_xlat18;
  let x_635 : f32 = x_33.x_GlobalMipBias.x;
  let x_636 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_633, x_635);
  u_xlat3.x = x_636.x;
  let x_640 : f32 = x_33.x_ZBufferParams.z;
  let x_642 : f32 = u_xlat3.x;
  let x_645 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_640 * x_642) + x_645);
  let x_649 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_649);
  let x_652 : f32 = u_xlat25;
  let x_655 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_652) + -(x_655));
  let x_658 : f32 = u_xlat25;
  let x_661 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_658) < x_661);
  let x_663 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_663);
  let x_669 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_669);
  let x_673 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_673);
  let x_676 : f32 = u_xlat25;
  let x_678 : f32 = u_xlat3.x;
  u_xlat25 = (x_676 * x_678);
  let x_682 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_682) + 1.0f);
  let x_686 : f32 = u_xlat11.x;
  let x_688 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_686 * x_688);
  let x_692 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_694 : vec2<f32> = u_xlat18;
  let x_698 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_692.x, x_692.y, x_692.z) * vec3<f32>(x_694.x, x_694.x, x_694.x)) + vec3<f32>(x_698.x, x_698.y, x_698.z));
  let x_702 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_704 : f32 = u_xlat26;
  let x_707 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_702.x, x_702.y, x_702.z) * vec3<f32>(x_704, x_704, x_704)) + x_707);
  let x_709 : vec3<f32> = u_xlat11;
  let x_710 : vec4<f32> = u_xlat3;
  let x_713 : vec3<f32> = u_xlat8;
  let x_715 : vec3<f32> = ((x_709 * vec3<f32>(x_710.x, x_710.x, x_710.x)) + -(x_713));
  let x_716 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
  let x_718 : vec4<f32> = u_xlat3;
  let x_720 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_718.x, x_718.y, x_718.z), vec3<f32>(x_720.x, x_720.y, x_720.z));
  let x_724 : f32 = u_xlat0;
  let x_729 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_724) * 0.004f) + x_729);
  let x_733 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_733, 0.0f);
  let x_736 : vec4<f32> = u_xlat3;
  let x_738 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_736.x, x_736.y, x_736.z), vec3<f32>(x_738.x, x_738.y, x_738.z));
  let x_741 : f32 = u_xlat26;
  u_xlat26 = (x_741 + 0.0001f);
  let x_744 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_744);
  let x_746 : f32 = u_xlat26;
  let x_748 : f32 = u_xlat18.x;
  u_xlat18.x = (x_746 * x_748);
  let x_751 : vec4<f32> = u_xlat2;
  let x_754 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y) * vec4<f32>(x_754.x, x_754.y, x_754.x, x_754.y)) + vec4<f32>(0.125f, 0.125f, 0.25f, 0.25f));
  let x_764 : vec4<f32> = u_xlat3;
  let x_767 : f32 = x_33.x_GlobalMipBias.x;
  let x_768 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_764.x, x_764.y), x_767);
  u_xlat26 = x_768.w;
  let x_770 : f32 = u_xlat26;
  let x_775 : vec2<f32> = (vec2<f32>(x_770, x_770) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_776 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_775.x, x_775.y, x_776.z, x_776.w);
  let x_779 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_779);
  let x_781 : f32 = u_xlat26;
  u_xlat5.z = ((x_781 * 2.0f) + -1.0f);
  let x_786 : f32 = u_xlat3.y;
  u_xlat26 = (x_786 * 628.31854248f);
  let x_789 : f32 = u_xlat5.z;
  let x_792 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_789) * x_792) + 1.0f);
  let x_797 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_797);
  let x_801 : f32 = u_xlat26;
  u_xlat6 = sin(x_801);
  let x_804 : f32 = u_xlat26;
  u_xlat7 = cos(x_804);
  let x_807 : f32 = u_xlat3.x;
  let x_808 : f32 = u_xlat7;
  u_xlat5.x = (x_807 * x_808);
  let x_812 : f32 = u_xlat3.x;
  let x_813 : f32 = u_xlat6;
  u_xlat5.y = (x_812 * x_813);
  let x_816 : vec4<f32> = u_xlat1;
  let x_818 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_816.x, x_816.y, x_816.z), x_818);
  let x_820 : f32 = u_xlat26;
  u_xlatb26 = (x_820 >= 0.0f);
  let x_822 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_822);
  let x_824 : f32 = u_xlat26;
  let x_826 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_824, x_824, x_824) * x_826);
  let x_828 : vec3<f32> = u_xlat5;
  let x_830 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_828 * vec3<f32>(x_830.y, x_830.y, x_830.y));
  let x_833 : vec3<f32> = u_xlat5;
  let x_837 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_833 * vec3<f32>(0.114062503f, 0.114062503f, 0.114062503f)) + x_837);
  let x_839 : vec3<f32> = u_xlat5;
  let x_842 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_844 : vec2<f32> = (vec2<f32>(x_839.y, x_839.y) * vec2<f32>(x_842.x, x_842.y));
  let x_845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_844.x, x_844.y, x_845.z, x_845.w);
  let x_848 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_850 : vec3<f32> = u_xlat5;
  let x_853 : vec4<f32> = u_xlat3;
  let x_855 : vec2<f32> = ((vec2<f32>(x_848.x, x_848.y) * vec2<f32>(x_850.x, x_850.x)) + vec2<f32>(x_853.x, x_853.y));
  let x_856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
  let x_859 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_861 : vec3<f32> = u_xlat5;
  let x_864 : vec4<f32> = u_xlat3;
  let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.y) * vec2<f32>(x_861.z, x_861.z)) + vec2<f32>(x_864.x, x_864.y));
  let x_867 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_866.x, x_866.y, x_867.z, x_867.w);
  let x_869 : vec4<f32> = u_xlat4;
  let x_871 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_869.x, x_869.y, x_869.z), x_871);
  let x_874 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_874));
  let x_877 : vec4<f32> = u_xlat3;
  let x_879 : f32 = u_xlat28;
  let x_882 : vec2<f32> = ((vec2<f32>(x_877.x, x_877.y) * vec2<f32>(x_879, x_879)) + vec2<f32>(1.0f, 1.0f));
  let x_883 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_882.x, x_882.y, x_883.z, x_883.w);
  let x_885 : vec4<f32> = u_xlat3;
  let x_887 : vec2<f32> = (vec2<f32>(x_885.x, x_885.y) * vec2<f32>(0.5f, 0.5f));
  let x_888 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_887.x, x_887.y, x_888.z, x_888.w);
  let x_890 : vec4<f32> = u_xlat3;
  let x_894 : vec2<f32> = clamp(vec2<f32>(x_890.x, x_890.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_895 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_894.x, x_894.y, x_895.z, x_895.w);
  let x_900 : vec4<f32> = u_xlat3;
  let x_903 : f32 = x_33.x_GlobalMipBias.x;
  let x_904 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_900.x, x_900.y), x_903);
  u_xlat28 = x_904.x;
  let x_907 : f32 = x_33.x_ZBufferParams.z;
  let x_908 : f32 = u_xlat28;
  let x_911 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_907 * x_908) + x_911);
  let x_915 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_915);
  let x_918 : f32 = u_xlat26;
  let x_921 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_918) + -(x_921));
  let x_924 : f32 = u_xlat26;
  let x_927 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_924) < x_927);
  let x_929 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_929);
  let x_932 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_932);
  let x_934 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_934);
  let x_936 : f32 = u_xlat26;
  let x_937 : f32 = u_xlat28;
  u_xlat26 = (x_936 * x_937);
  let x_940 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_940) + 1.0f);
  let x_945 : f32 = u_xlat5.x;
  let x_947 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_945 * x_947);
  let x_950 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_952 : vec4<f32> = u_xlat3;
  let x_956 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_950.x, x_950.y, x_950.z) * vec3<f32>(x_952.x, x_952.x, x_952.x)) + vec3<f32>(x_956.x, x_956.y, x_956.z));
  let x_960 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_962 : vec3<f32> = u_xlat11;
  let x_965 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_960.x, x_960.y, x_960.z) * vec3<f32>(x_962.x, x_962.x, x_962.x)) + x_965);
  let x_967 : vec3<f32> = u_xlat5;
  let x_968 : f32 = u_xlat28;
  let x_971 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_967 * vec3<f32>(x_968, x_968, x_968)) + -(x_971));
  let x_974 : vec3<f32> = u_xlat5;
  let x_975 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(x_974, vec3<f32>(x_975.x, x_975.y, x_975.z));
  let x_979 : f32 = u_xlat0;
  let x_983 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_979) * 0.004f) + x_983);
  let x_987 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_987, 0.0f);
  let x_990 : vec3<f32> = u_xlat5;
  let x_991 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_990, x_991);
  let x_995 : f32 = u_xlat11.x;
  u_xlat11.x = (x_995 + 0.0001f);
  let x_999 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_999);
  let x_1003 : f32 = u_xlat11.x;
  let x_1005 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1003 * x_1005);
  let x_1008 : f32 = u_xlat26;
  let x_1010 : f32 = u_xlat3.x;
  u_xlat26 = (x_1008 * x_1010);
  let x_1013 : f32 = u_xlat18.x;
  let x_1014 : f32 = u_xlat25;
  let x_1016 : f32 = u_xlat26;
  u_xlat25 = ((x_1013 * x_1014) + x_1016);
  let x_1021 : vec4<f32> = u_xlat3;
  let x_1024 : f32 = x_33.x_GlobalMipBias.x;
  let x_1025 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1021.z, x_1021.w), x_1024);
  u_xlat18.x = x_1025.w;
  let x_1028 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1028.x, x_1028.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1035 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1035);
  let x_1039 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1039 * 2.0f) + -1.0f);
  let x_1044 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1044 * 628.31854248f);
  let x_1048 : f32 = u_xlat3.z;
  let x_1051 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1048) * x_1051) + 1.0f);
  let x_1054 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1054);
  let x_1057 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1057);
  let x_1061 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1061);
  let x_1063 : f32 = u_xlat26;
  let x_1064 : f32 = u_xlat6;
  u_xlat3.x = (x_1063 * x_1064);
  let x_1067 : f32 = u_xlat26;
  let x_1069 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1067 * x_1069);
  let x_1072 : vec4<f32> = u_xlat1;
  let x_1074 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1072.x, x_1072.y, x_1072.z), vec3<f32>(x_1074.x, x_1074.y, x_1074.z));
  let x_1080 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1080 >= 0.0f);
  let x_1082 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1082);
  let x_1085 : vec2<f32> = u_xlat18;
  let x_1087 : vec4<f32> = u_xlat3;
  let x_1089 : vec3<f32> = (vec3<f32>(x_1085.x, x_1085.x, x_1085.x) * vec3<f32>(x_1087.x, x_1087.y, x_1087.z));
  let x_1090 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1089.x, x_1089.y, x_1089.z, x_1090.w);
  let x_1092 : vec4<f32> = u_xlat3;
  let x_1095 : vec4<f32> = x_33.x_SSAOParams;
  let x_1097 : vec3<f32> = (vec3<f32>(x_1092.x, x_1092.y, x_1092.z) * vec3<f32>(x_1095.y, x_1095.y, x_1095.y));
  let x_1098 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1097.x, x_1097.y, x_1097.z, x_1098.w);
  let x_1100 : vec4<f32> = u_xlat3;
  let x_1105 : vec3<f32> = u_xlat8;
  let x_1106 : vec3<f32> = ((vec3<f32>(x_1100.x, x_1100.y, x_1100.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1105);
  let x_1107 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1107.w);
  let x_1109 : vec4<f32> = u_xlat3;
  let x_1112 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1109.y, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y));
  let x_1116 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1118 : vec4<f32> = u_xlat3;
  let x_1121 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1118.x, x_1118.x)) + x_1121);
  let x_1124 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1126 : vec4<f32> = u_xlat3;
  let x_1129 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1124.x, x_1124.y) * vec2<f32>(x_1126.z, x_1126.z)) + x_1129);
  let x_1131 : vec4<f32> = u_xlat4;
  let x_1133 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1131.x, x_1131.y, x_1131.z), vec3<f32>(x_1133.x, x_1133.y, x_1133.z));
  let x_1138 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1138));
  let x_1142 : vec2<f32> = u_xlat18;
  let x_1143 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1142 * vec2<f32>(x_1143.x, x_1143.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1147 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1147 * vec2<f32>(0.5f, 0.5f));
  let x_1149 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1149, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1156 : vec2<f32> = u_xlat18;
  let x_1158 : f32 = x_33.x_GlobalMipBias.x;
  let x_1159 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1156, x_1158);
  u_xlat11.x = x_1159.x;
  let x_1164 : f32 = x_33.x_ZBufferParams.z;
  let x_1166 : f32 = u_xlat11.x;
  let x_1169 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1164 * x_1166) + x_1169);
  let x_1171 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1171);
  let x_1173 : f32 = u_xlat19;
  let x_1176 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1173) + -(x_1176));
  let x_1181 : f32 = u_xlat3.x;
  let x_1184 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1181) < x_1184);
  let x_1188 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1188);
  let x_1192 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1192);
  let x_1196 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1196);
  let x_1200 : f32 = u_xlat3.y;
  let x_1202 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1200 * x_1202);
  let x_1206 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1206) + 1.0f);
  let x_1209 : f32 = u_xlat19;
  let x_1211 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1209 * x_1211);
  let x_1215 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1217 : vec2<f32> = u_xlat18;
  let x_1221 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1215.x, x_1215.y, x_1215.z) * vec3<f32>(x_1217.x, x_1217.x, x_1217.x)) + vec3<f32>(x_1221.x, x_1221.y, x_1221.z));
  let x_1225 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1227 : f32 = u_xlat26;
  let x_1230 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1225.x, x_1225.y, x_1225.z) * vec3<f32>(x_1227, x_1227, x_1227)) + x_1230);
  let x_1232 : vec3<f32> = u_xlat5;
  let x_1233 : vec3<f32> = u_xlat11;
  let x_1236 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1232 * vec3<f32>(x_1233.x, x_1233.x, x_1233.x)) + -(x_1236));
  let x_1239 : vec3<f32> = u_xlat11;
  let x_1240 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1239, vec3<f32>(x_1240.x, x_1240.y, x_1240.z));
  let x_1244 : f32 = u_xlat0;
  let x_1248 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1244) * 0.004f) + x_1248);
  let x_1252 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1252, 0.0f);
  let x_1255 : vec3<f32> = u_xlat11;
  let x_1256 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1255, x_1256);
  let x_1258 : f32 = u_xlat26;
  u_xlat26 = (x_1258 + 0.0001f);
  let x_1260 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1260);
  let x_1262 : f32 = u_xlat26;
  let x_1264 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1262 * x_1264);
  let x_1268 : f32 = u_xlat18.x;
  let x_1270 : f32 = u_xlat3.x;
  let x_1272 : f32 = u_xlat25;
  u_xlat25 = ((x_1268 * x_1270) + x_1272);
  let x_1274 : vec4<f32> = u_xlat2;
  let x_1277 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1274.x, x_1274.y, x_1274.x, x_1274.y) * vec4<f32>(x_1277.x, x_1277.y, x_1277.x, x_1277.y)) + vec4<f32>(0.375f, 0.375f, 0.5f, 0.5f));
  let x_1286 : vec4<f32> = u_xlat3;
  let x_1289 : f32 = x_33.x_GlobalMipBias.x;
  let x_1290 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1286.x, x_1286.y), x_1289);
  u_xlat18.x = x_1290.w;
  let x_1293 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1293.x, x_1293.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1300 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1300);
  let x_1304 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1304 * 2.0f) + -1.0f);
  let x_1309 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1309 * 628.31854248f);
  let x_1313 : f32 = u_xlat5.z;
  let x_1316 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1313) * x_1316) + 1.0f);
  let x_1319 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1319);
  let x_1322 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1322);
  let x_1326 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1326);
  let x_1328 : f32 = u_xlat26;
  let x_1329 : f32 = u_xlat6;
  u_xlat5.x = (x_1328 * x_1329);
  let x_1332 : f32 = u_xlat26;
  let x_1334 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1332 * x_1334);
  let x_1337 : vec4<f32> = u_xlat1;
  let x_1339 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_1337.x, x_1337.y, x_1337.z), x_1339);
  let x_1343 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1343 >= 0.0f);
  let x_1345 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1345);
  let x_1348 : vec2<f32> = u_xlat18;
  let x_1350 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1348.x, x_1348.x, x_1348.x) * x_1350);
  let x_1352 : vec3<f32> = u_xlat5;
  let x_1354 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1352 * vec3<f32>(x_1354.y, x_1354.y, x_1354.y));
  let x_1357 : vec3<f32> = u_xlat5;
  let x_1361 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1357 * vec3<f32>(0.2265625f, 0.2265625f, 0.2265625f)) + x_1361);
  let x_1363 : vec3<f32> = u_xlat5;
  let x_1366 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1363.y, x_1363.y) * vec2<f32>(x_1366.x, x_1366.y));
  let x_1370 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1372 : vec3<f32> = u_xlat5;
  let x_1375 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1370.x, x_1370.y) * vec2<f32>(x_1372.x, x_1372.x)) + x_1375);
  let x_1378 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1380 : vec3<f32> = u_xlat5;
  let x_1383 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1378.x, x_1378.y) * vec2<f32>(x_1380.z, x_1380.z)) + x_1383);
  let x_1385 : vec4<f32> = u_xlat4;
  let x_1387 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_1385.x, x_1385.y, x_1385.z), x_1387);
  let x_1391 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1391));
  let x_1395 : vec2<f32> = u_xlat18;
  let x_1396 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1395 * vec2<f32>(x_1396.x, x_1396.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1400 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1400 * vec2<f32>(0.5f, 0.5f));
  let x_1402 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1402, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1409 : vec2<f32> = u_xlat18;
  let x_1411 : f32 = x_33.x_GlobalMipBias.x;
  let x_1412 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1409, x_1411);
  u_xlat11.x = x_1412.x;
  let x_1416 : f32 = x_33.x_ZBufferParams.z;
  let x_1418 : f32 = u_xlat11.x;
  let x_1421 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1416 * x_1418) + x_1421);
  let x_1423 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1423);
  let x_1426 : f32 = u_xlat3.x;
  let x_1428 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1426) + -(x_1428));
  let x_1433 : f32 = u_xlat3.x;
  let x_1436 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1433) < x_1436);
  let x_1440 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1440);
  let x_1444 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1444);
  let x_1448 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1448);
  let x_1452 : f32 = u_xlat3.y;
  let x_1454 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1452 * x_1454);
  let x_1458 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1458) + 1.0f);
  let x_1461 : f32 = u_xlat28;
  let x_1463 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1461 * x_1463);
  let x_1467 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1469 : vec2<f32> = u_xlat18;
  let x_1473 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1467.x, x_1467.y, x_1467.z) * vec3<f32>(x_1469.x, x_1469.x, x_1469.x)) + vec3<f32>(x_1473.x, x_1473.y, x_1473.z));
  let x_1477 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1479 : f32 = u_xlat26;
  let x_1482 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1477.x, x_1477.y, x_1477.z) * vec3<f32>(x_1479, x_1479, x_1479)) + x_1482);
  let x_1484 : vec3<f32> = u_xlat5;
  let x_1485 : vec3<f32> = u_xlat11;
  let x_1488 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1484 * vec3<f32>(x_1485.x, x_1485.x, x_1485.x)) + -(x_1488));
  let x_1491 : vec3<f32> = u_xlat5;
  let x_1492 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1491, vec3<f32>(x_1492.x, x_1492.y, x_1492.z));
  let x_1496 : f32 = u_xlat0;
  let x_1500 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1496) * 0.004f) + x_1500);
  let x_1504 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1504, 0.0f);
  let x_1507 : vec3<f32> = u_xlat5;
  let x_1508 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1507, x_1508);
  let x_1510 : f32 = u_xlat26;
  u_xlat26 = (x_1510 + 0.0001f);
  let x_1512 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1512);
  let x_1514 : f32 = u_xlat26;
  let x_1516 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1514 * x_1516);
  let x_1520 : f32 = u_xlat18.x;
  let x_1522 : f32 = u_xlat3.x;
  let x_1524 : f32 = u_xlat25;
  u_xlat25 = ((x_1520 * x_1522) + x_1524);
  let x_1529 : vec4<f32> = u_xlat3;
  let x_1532 : f32 = x_33.x_GlobalMipBias.x;
  let x_1533 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1529.z, x_1529.w), x_1532);
  u_xlat18.x = x_1533.w;
  let x_1537 : f32 = u_xlat18.x;
  u_xlat26 = (x_1537 + 0.984375f);
  let x_1540 : f32 = u_xlat26;
  u_xlat26 = fract(x_1540);
  let x_1542 : f32 = u_xlat26;
  u_xlat3.z = ((x_1542 * 2.0f) + -1.0f);
  let x_1547 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1547 * 628.31854248f);
  let x_1551 : f32 = u_xlat3.z;
  let x_1554 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1551) * x_1554) + 1.0f);
  let x_1557 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1557);
  let x_1560 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1560);
  let x_1564 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1564);
  let x_1566 : f32 = u_xlat26;
  let x_1567 : f32 = u_xlat6;
  u_xlat3.x = (x_1566 * x_1567);
  let x_1570 : f32 = u_xlat26;
  let x_1572 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1570 * x_1572);
  let x_1575 : vec4<f32> = u_xlat1;
  let x_1577 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1575.x, x_1575.y, x_1575.z), vec3<f32>(x_1577.x, x_1577.y, x_1577.z));
  let x_1582 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1582 >= 0.0f);
  let x_1584 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1584);
  let x_1587 : vec2<f32> = u_xlat18;
  let x_1589 : vec4<f32> = u_xlat3;
  let x_1591 : vec3<f32> = (vec3<f32>(x_1587.x, x_1587.x, x_1587.x) * vec3<f32>(x_1589.x, x_1589.y, x_1589.z));
  let x_1592 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1591.x, x_1591.y, x_1591.z, x_1592.w);
  let x_1594 : vec4<f32> = u_xlat3;
  let x_1597 : vec4<f32> = x_33.x_SSAOParams;
  let x_1599 : vec3<f32> = (vec3<f32>(x_1594.x, x_1594.y, x_1594.z) * vec3<f32>(x_1597.y, x_1597.y, x_1597.y));
  let x_1600 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1599.x, x_1599.y, x_1599.z, x_1600.w);
  let x_1602 : vec4<f32> = u_xlat3;
  let x_1607 : vec3<f32> = u_xlat8;
  let x_1608 : vec3<f32> = ((vec3<f32>(x_1602.x, x_1602.y, x_1602.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1607);
  let x_1609 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1608.x, x_1608.y, x_1608.z, x_1609.w);
  let x_1611 : vec4<f32> = u_xlat3;
  let x_1614 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1611.y, x_1611.y) * vec2<f32>(x_1614.x, x_1614.y));
  let x_1618 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1620 : vec4<f32> = u_xlat3;
  let x_1623 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1618.x, x_1618.y) * vec2<f32>(x_1620.x, x_1620.x)) + x_1623);
  let x_1626 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1628 : vec4<f32> = u_xlat3;
  let x_1631 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1626.x, x_1626.y) * vec2<f32>(x_1628.z, x_1628.z)) + x_1631);
  let x_1633 : vec4<f32> = u_xlat4;
  let x_1635 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1633.x, x_1633.y, x_1633.z), vec3<f32>(x_1635.x, x_1635.y, x_1635.z));
  let x_1640 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1640));
  let x_1644 : vec2<f32> = u_xlat18;
  let x_1645 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1644 * vec2<f32>(x_1645.x, x_1645.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1649 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1649 * vec2<f32>(0.5f, 0.5f));
  let x_1651 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1651, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1658 : vec2<f32> = u_xlat18;
  let x_1660 : f32 = x_33.x_GlobalMipBias.x;
  let x_1661 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1658, x_1660);
  u_xlat11.x = x_1661.x;
  let x_1665 : f32 = x_33.x_ZBufferParams.z;
  let x_1667 : f32 = u_xlat11.x;
  let x_1670 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1665 * x_1667) + x_1670);
  let x_1672 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1672);
  let x_1674 : f32 = u_xlat19;
  let x_1677 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1674) + -(x_1677));
  let x_1682 : f32 = u_xlat3.x;
  let x_1685 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1682) < x_1685);
  let x_1689 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1689);
  let x_1693 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1693);
  let x_1697 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1697);
  let x_1701 : f32 = u_xlat3.y;
  let x_1703 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1701 * x_1703);
  let x_1707 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1707) + 1.0f);
  let x_1710 : f32 = u_xlat19;
  let x_1712 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1710 * x_1712);
  let x_1716 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1718 : vec2<f32> = u_xlat18;
  let x_1722 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1716.x, x_1716.y, x_1716.z) * vec3<f32>(x_1718.x, x_1718.x, x_1718.x)) + vec3<f32>(x_1722.x, x_1722.y, x_1722.z));
  let x_1726 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1728 : f32 = u_xlat26;
  let x_1731 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1726.x, x_1726.y, x_1726.z) * vec3<f32>(x_1728, x_1728, x_1728)) + x_1731);
  let x_1733 : vec3<f32> = u_xlat5;
  let x_1734 : vec3<f32> = u_xlat11;
  let x_1737 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1733 * vec3<f32>(x_1734.x, x_1734.x, x_1734.x)) + -(x_1737));
  let x_1740 : vec3<f32> = u_xlat11;
  let x_1741 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1740, vec3<f32>(x_1741.x, x_1741.y, x_1741.z));
  let x_1745 : f32 = u_xlat0;
  let x_1749 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1745) * 0.004f) + x_1749);
  let x_1753 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1753, 0.0f);
  let x_1756 : vec3<f32> = u_xlat11;
  let x_1757 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1756, x_1757);
  let x_1759 : f32 = u_xlat26;
  u_xlat26 = (x_1759 + 0.0001f);
  let x_1761 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1761);
  let x_1763 : f32 = u_xlat26;
  let x_1765 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1763 * x_1765);
  let x_1769 : f32 = u_xlat18.x;
  let x_1771 : f32 = u_xlat3.x;
  let x_1773 : f32 = u_xlat25;
  u_xlat25 = ((x_1769 * x_1771) + x_1773);
  let x_1775 : vec4<f32> = u_xlat2;
  let x_1778 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1775.x, x_1775.y, x_1775.x, x_1775.y) * vec4<f32>(x_1778.x, x_1778.y, x_1778.x, x_1778.y)) + vec4<f32>(0.625f, 0.625f, 0.75f, 0.75f));
  let x_1788 : vec4<f32> = u_xlat3;
  let x_1791 : f32 = x_33.x_GlobalMipBias.x;
  let x_1792 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1788.x, x_1788.y), x_1791);
  u_xlat18.x = x_1792.w;
  let x_1795 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1795.x, x_1795.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1802 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1802);
  let x_1806 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1806 * 2.0f) + -1.0f);
  let x_1811 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1811 * 628.31854248f);
  let x_1815 : f32 = u_xlat5.z;
  let x_1818 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1815) * x_1818) + 1.0f);
  let x_1821 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1821);
  let x_1824 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1824);
  let x_1828 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1828);
  let x_1830 : f32 = u_xlat26;
  let x_1831 : f32 = u_xlat6;
  u_xlat5.x = (x_1830 * x_1831);
  let x_1834 : f32 = u_xlat26;
  let x_1836 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1834 * x_1836);
  let x_1839 : vec4<f32> = u_xlat1;
  let x_1841 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_1839.x, x_1839.y, x_1839.z), x_1841);
  let x_1845 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1845 >= 0.0f);
  let x_1847 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1847);
  let x_1850 : vec2<f32> = u_xlat18;
  let x_1852 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1850.x, x_1850.x, x_1850.x) * x_1852);
  let x_1854 : vec3<f32> = u_xlat5;
  let x_1856 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1854 * vec3<f32>(x_1856.y, x_1856.y, x_1856.y));
  let x_1859 : vec3<f32> = u_xlat5;
  let x_1863 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1859 * vec3<f32>(0.451562494f, 0.451562494f, 0.451562494f)) + x_1863);
  let x_1865 : vec3<f32> = u_xlat5;
  let x_1868 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1865.y, x_1865.y) * vec2<f32>(x_1868.x, x_1868.y));
  let x_1872 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1874 : vec3<f32> = u_xlat5;
  let x_1877 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1872.x, x_1872.y) * vec2<f32>(x_1874.x, x_1874.x)) + x_1877);
  let x_1880 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1882 : vec3<f32> = u_xlat5;
  let x_1885 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1880.x, x_1880.y) * vec2<f32>(x_1882.z, x_1882.z)) + x_1885);
  let x_1887 : vec4<f32> = u_xlat4;
  let x_1889 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_1887.x, x_1887.y, x_1887.z), x_1889);
  let x_1893 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1893));
  let x_1897 : vec2<f32> = u_xlat18;
  let x_1898 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1897 * vec2<f32>(x_1898.x, x_1898.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1902 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1902 * vec2<f32>(0.5f, 0.5f));
  let x_1904 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1904, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1911 : vec2<f32> = u_xlat18;
  let x_1913 : f32 = x_33.x_GlobalMipBias.x;
  let x_1914 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1911, x_1913);
  u_xlat11.x = x_1914.x;
  let x_1918 : f32 = x_33.x_ZBufferParams.z;
  let x_1920 : f32 = u_xlat11.x;
  let x_1923 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1918 * x_1920) + x_1923);
  let x_1925 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1925);
  let x_1928 : f32 = u_xlat3.x;
  let x_1930 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1928) + -(x_1930));
  let x_1935 : f32 = u_xlat3.x;
  let x_1938 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1935) < x_1938);
  let x_1942 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1942);
  let x_1946 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1946);
  let x_1950 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1950);
  let x_1954 : f32 = u_xlat3.y;
  let x_1956 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1954 * x_1956);
  let x_1960 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1960) + 1.0f);
  let x_1963 : f32 = u_xlat28;
  let x_1965 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1963 * x_1965);
  let x_1969 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1971 : vec2<f32> = u_xlat18;
  let x_1975 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1969.x, x_1969.y, x_1969.z) * vec3<f32>(x_1971.x, x_1971.x, x_1971.x)) + vec3<f32>(x_1975.x, x_1975.y, x_1975.z));
  let x_1979 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1981 : f32 = u_xlat26;
  let x_1984 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1979.x, x_1979.y, x_1979.z) * vec3<f32>(x_1981, x_1981, x_1981)) + x_1984);
  let x_1986 : vec3<f32> = u_xlat5;
  let x_1987 : vec3<f32> = u_xlat11;
  let x_1990 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1986 * vec3<f32>(x_1987.x, x_1987.x, x_1987.x)) + -(x_1990));
  let x_1993 : vec3<f32> = u_xlat5;
  let x_1994 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1993, vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1998 : f32 = u_xlat0;
  let x_2002 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1998) * 0.004f) + x_2002);
  let x_2006 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2006, 0.0f);
  let x_2009 : vec3<f32> = u_xlat5;
  let x_2010 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2009, x_2010);
  let x_2012 : f32 = u_xlat26;
  u_xlat26 = (x_2012 + 0.0001f);
  let x_2014 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2014);
  let x_2016 : f32 = u_xlat26;
  let x_2018 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2016 * x_2018);
  let x_2022 : f32 = u_xlat18.x;
  let x_2024 : f32 = u_xlat3.x;
  let x_2026 : f32 = u_xlat25;
  u_xlat25 = ((x_2022 * x_2024) + x_2026);
  let x_2031 : vec4<f32> = u_xlat3;
  let x_2034 : f32 = x_33.x_GlobalMipBias.x;
  let x_2035 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2031.z, x_2031.w), x_2034);
  u_xlat18.x = x_2035.w;
  let x_2038 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2038.x, x_2038.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2045 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2045);
  let x_2049 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2049 * 2.0f) + -1.0f);
  let x_2054 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2054 * 628.31854248f);
  let x_2058 : f32 = u_xlat3.z;
  let x_2061 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2058) * x_2061) + 1.0f);
  let x_2064 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2064);
  let x_2067 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2067);
  let x_2071 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2071);
  let x_2073 : f32 = u_xlat26;
  let x_2074 : f32 = u_xlat6;
  u_xlat3.x = (x_2073 * x_2074);
  let x_2077 : f32 = u_xlat26;
  let x_2079 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2077 * x_2079);
  let x_2082 : vec4<f32> = u_xlat1;
  let x_2084 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_2082.x, x_2082.y, x_2082.z), vec3<f32>(x_2084.x, x_2084.y, x_2084.z));
  let x_2089 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2089 >= 0.0f);
  let x_2091 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2091);
  let x_2094 : vec2<f32> = u_xlat18;
  let x_2096 : vec4<f32> = u_xlat3;
  let x_2098 : vec3<f32> = (vec3<f32>(x_2094.x, x_2094.x, x_2094.x) * vec3<f32>(x_2096.x, x_2096.y, x_2096.z));
  let x_2099 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2098.x, x_2098.y, x_2098.z, x_2099.w);
  let x_2101 : vec4<f32> = u_xlat3;
  let x_2104 : vec4<f32> = x_33.x_SSAOParams;
  let x_2106 : vec3<f32> = (vec3<f32>(x_2101.x, x_2101.y, x_2101.z) * vec3<f32>(x_2104.y, x_2104.y, x_2104.y));
  let x_2107 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2106.x, x_2106.y, x_2106.z, x_2107.w);
  let x_2109 : vec4<f32> = u_xlat3;
  let x_2114 : vec3<f32> = u_xlat8;
  let x_2115 : vec3<f32> = ((vec3<f32>(x_2109.x, x_2109.y, x_2109.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_2114);
  let x_2116 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2115.x, x_2115.y, x_2115.z, x_2116.w);
  let x_2118 : vec4<f32> = u_xlat3;
  let x_2121 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2118.y, x_2118.y) * vec2<f32>(x_2121.x, x_2121.y));
  let x_2125 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2127 : vec4<f32> = u_xlat3;
  let x_2130 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2125.x, x_2125.y) * vec2<f32>(x_2127.x, x_2127.x)) + x_2130);
  let x_2133 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2135 : vec4<f32> = u_xlat3;
  let x_2138 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2133.x, x_2133.y) * vec2<f32>(x_2135.z, x_2135.z)) + x_2138);
  let x_2140 : vec4<f32> = u_xlat4;
  let x_2142 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2140.x, x_2140.y, x_2140.z), vec3<f32>(x_2142.x, x_2142.y, x_2142.z));
  let x_2147 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2147));
  let x_2151 : vec2<f32> = u_xlat18;
  let x_2152 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2151 * vec2<f32>(x_2152.x, x_2152.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2156 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2156 * vec2<f32>(0.5f, 0.5f));
  let x_2158 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2158, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2165 : vec2<f32> = u_xlat18;
  let x_2167 : f32 = x_33.x_GlobalMipBias.x;
  let x_2168 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2165, x_2167);
  u_xlat11.x = x_2168.x;
  let x_2172 : f32 = x_33.x_ZBufferParams.z;
  let x_2174 : f32 = u_xlat11.x;
  let x_2177 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2172 * x_2174) + x_2177);
  let x_2179 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2179);
  let x_2181 : f32 = u_xlat19;
  let x_2184 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2181) + -(x_2184));
  let x_2189 : f32 = u_xlat3.x;
  let x_2192 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2189) < x_2192);
  let x_2196 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2196);
  let x_2200 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2200);
  let x_2204 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2204);
  let x_2208 : f32 = u_xlat3.y;
  let x_2210 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2208 * x_2210);
  let x_2214 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2214) + 1.0f);
  let x_2217 : f32 = u_xlat19;
  let x_2219 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2217 * x_2219);
  let x_2223 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2225 : vec2<f32> = u_xlat18;
  let x_2229 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2223.x, x_2223.y, x_2223.z) * vec3<f32>(x_2225.x, x_2225.x, x_2225.x)) + vec3<f32>(x_2229.x, x_2229.y, x_2229.z));
  let x_2233 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2235 : f32 = u_xlat26;
  let x_2238 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2233.x, x_2233.y, x_2233.z) * vec3<f32>(x_2235, x_2235, x_2235)) + x_2238);
  let x_2240 : vec3<f32> = u_xlat5;
  let x_2241 : vec3<f32> = u_xlat11;
  let x_2244 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_2240 * vec3<f32>(x_2241.x, x_2241.x, x_2241.x)) + -(x_2244));
  let x_2247 : vec3<f32> = u_xlat11;
  let x_2248 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2247, vec3<f32>(x_2248.x, x_2248.y, x_2248.z));
  let x_2252 : f32 = u_xlat0;
  let x_2256 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2252) * 0.004f) + x_2256);
  let x_2260 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2260, 0.0f);
  let x_2263 : vec3<f32> = u_xlat11;
  let x_2264 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2263, x_2264);
  let x_2266 : f32 = u_xlat26;
  u_xlat26 = (x_2266 + 0.0001f);
  let x_2268 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2268);
  let x_2270 : f32 = u_xlat26;
  let x_2272 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2270 * x_2272);
  let x_2276 : f32 = u_xlat18.x;
  let x_2278 : f32 = u_xlat3.x;
  let x_2280 : f32 = u_xlat25;
  u_xlat25 = ((x_2276 * x_2278) + x_2280);
  let x_2282 : vec4<f32> = u_xlat2;
  let x_2285 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_2290 : vec2<f32> = ((vec2<f32>(x_2282.x, x_2282.y) * vec2<f32>(x_2285.x, x_2285.y)) + vec2<f32>(0.875f, 0.875f));
  let x_2291 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2290.x, x_2290.y, x_2291.z, x_2291.w);
  let x_2296 : vec4<f32> = u_xlat2;
  let x_2299 : f32 = x_33.x_GlobalMipBias.x;
  let x_2300 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2296.x, x_2296.y), x_2299);
  u_xlat2.x = x_2300.w;
  let x_2303 : vec4<f32> = u_xlat2;
  let x_2307 : vec2<f32> = (vec2<f32>(x_2303.x, x_2303.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2308 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2307.x, x_2307.y, x_2308.z, x_2308.w);
  let x_2311 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_2311);
  let x_2315 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_2315 * 2.0f) + -1.0f);
  let x_2320 : f32 = u_xlat2.y;
  u_xlat2.x = (x_2320 * 628.31854248f);
  let x_2324 : f32 = u_xlat3.z;
  let x_2327 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_2324) * x_2327) + 1.0f);
  let x_2332 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_2332);
  let x_2336 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_2336);
  let x_2340 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_2340);
  let x_2344 : f32 = u_xlat10.x;
  let x_2346 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2344 * x_2346);
  let x_2350 : f32 = u_xlat2.x;
  let x_2352 : f32 = u_xlat10.x;
  u_xlat3.y = (x_2350 * x_2352);
  let x_2355 : vec4<f32> = u_xlat1;
  let x_2357 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(vec3<f32>(x_2355.x, x_2355.y, x_2355.z), vec3<f32>(x_2357.x, x_2357.y, x_2357.z));
  let x_2364 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_2364 >= 0.0f);
  let x_2368 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_2368);
  let x_2371 : vec4<f32> = u_xlat2;
  let x_2373 : vec4<f32> = u_xlat3;
  let x_2375 : vec3<f32> = (vec3<f32>(x_2371.x, x_2371.x, x_2371.x) * vec3<f32>(x_2373.x, x_2373.y, x_2373.z));
  let x_2376 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2375.x, x_2375.y, x_2375.z, x_2376.w);
  let x_2378 : vec4<f32> = u_xlat2;
  let x_2381 : vec4<f32> = x_33.x_SSAOParams;
  let x_2383 : vec3<f32> = (vec3<f32>(x_2378.x, x_2378.y, x_2378.z) * vec3<f32>(x_2381.y, x_2381.y, x_2381.y));
  let x_2384 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2383.x, x_2383.y, x_2383.z, x_2384.w);
  let x_2386 : vec4<f32> = u_xlat2;
  let x_2391 : vec3<f32> = u_xlat8;
  let x_2392 : vec3<f32> = ((vec3<f32>(x_2386.x, x_2386.y, x_2386.z) * vec3<f32>(0.7890625f, 0.7890625f, 0.7890625f)) + x_2391);
  let x_2393 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2392.x, x_2392.y, x_2392.z, x_2393.w);
  let x_2395 : vec4<f32> = u_xlat2;
  let x_2398 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_2400 : vec2<f32> = (vec2<f32>(x_2395.y, x_2395.y) * vec2<f32>(x_2398.x, x_2398.y));
  let x_2401 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2400.x, x_2400.y, x_2401.z, x_2401.w);
  let x_2404 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2406 : vec4<f32> = u_xlat2;
  let x_2409 : vec4<f32> = u_xlat3;
  let x_2411 : vec2<f32> = ((vec2<f32>(x_2404.x, x_2404.y) * vec2<f32>(x_2406.x, x_2406.x)) + vec2<f32>(x_2409.x, x_2409.y));
  let x_2412 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2411.x, x_2411.y, x_2412.z, x_2412.w);
  let x_2415 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2417 : vec4<f32> = u_xlat2;
  let x_2420 : vec4<f32> = u_xlat3;
  let x_2422 : vec2<f32> = ((vec2<f32>(x_2415.x, x_2415.y) * vec2<f32>(x_2417.z, x_2417.z)) + vec2<f32>(x_2420.x, x_2420.y));
  let x_2423 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2422.x, x_2422.y, x_2423.z, x_2423.w);
  let x_2425 : vec4<f32> = u_xlat4;
  let x_2427 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_2425.x, x_2425.y, x_2425.z), vec3<f32>(x_2427.x, x_2427.y, x_2427.z));
  let x_2432 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_2432));
  let x_2436 : vec4<f32> = u_xlat3;
  let x_2438 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_2436.x, x_2436.y) * vec2<f32>(x_2438.x, x_2438.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2442 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_2442 * vec2<f32>(0.5f, 0.5f));
  let x_2444 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_2444, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2451 : vec2<f32> = u_xlat10;
  let x_2453 : f32 = x_33.x_GlobalMipBias.x;
  let x_2454 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2451, x_2453);
  u_xlat26 = x_2454.x;
  let x_2457 : f32 = x_33.x_ZBufferParams.z;
  let x_2458 : f32 = u_xlat26;
  let x_2461 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_2457 * x_2458) + x_2461);
  let x_2465 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2465);
  let x_2469 : f32 = u_xlat2.x;
  let x_2472 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_2469) + -(x_2472));
  let x_2477 : f32 = u_xlat2.x;
  let x_2480 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_2477) < x_2480);
  let x_2483 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_2483);
  let x_2487 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_2487);
  let x_2491 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_2491);
  let x_2495 : f32 = u_xlat2.w;
  let x_2497 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2495 * x_2497);
  let x_2501 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_2501) + 1.0f);
  let x_2506 : f32 = u_xlat3.x;
  let x_2508 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_2506 * x_2508);
  let x_2511 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2513 : vec2<f32> = u_xlat10;
  let x_2517 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2519 : vec3<f32> = ((vec3<f32>(x_2511.x, x_2511.y, x_2511.z) * vec3<f32>(x_2513.x, x_2513.x, x_2513.x)) + vec3<f32>(x_2517.x, x_2517.y, x_2517.z));
  let x_2520 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2519.x, x_2519.y, x_2519.z, x_2520.w);
  let x_2523 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2525 : vec2<f32> = u_xlat18;
  let x_2528 : vec4<f32> = u_xlat3;
  let x_2530 : vec3<f32> = ((vec3<f32>(x_2523.x, x_2523.y, x_2523.z) * vec3<f32>(x_2525.x, x_2525.x, x_2525.x)) + vec3<f32>(x_2528.x, x_2528.y, x_2528.z));
  let x_2531 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2530.x, x_2530.y, x_2530.z, x_2531.w);
  let x_2533 : vec4<f32> = u_xlat3;
  let x_2535 : f32 = u_xlat26;
  let x_2538 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_2533.x, x_2533.y, x_2533.z) * vec3<f32>(x_2535, x_2535, x_2535)) + -(x_2538));
  let x_2541 : vec3<f32> = u_xlat8;
  let x_2542 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_2541, vec3<f32>(x_2542.x, x_2542.y, x_2542.z));
  let x_2546 : f32 = u_xlat0;
  let x_2550 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_2546) * 0.004f) + x_2550);
  let x_2554 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_2554, 0.0f);
  let x_2557 : vec3<f32> = u_xlat8;
  let x_2558 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_2557, x_2558);
  let x_2562 : f32 = u_xlat8.x;
  u_xlat8.x = (x_2562 + 0.0001f);
  let x_2566 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_2566);
  let x_2570 : f32 = u_xlat8.x;
  let x_2572 : f32 = u_xlat10.x;
  u_xlat8.x = (x_2570 * x_2572);
  let x_2576 : f32 = u_xlat8.x;
  let x_2578 : f32 = u_xlat2.x;
  let x_2580 : f32 = u_xlat25;
  u_xlat8.x = ((x_2576 * x_2578) + x_2580);
  let x_2584 : f32 = u_xlat8.x;
  let x_2586 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_2584 * x_2586);
  let x_2590 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_2590);
  let x_2592 : f32 = u_xlat0;
  let x_2594 : f32 = u_xlat16;
  u_xlat0 = ((-(x_2592) * x_2594) + 1.0f);
  let x_2597 : f32 = u_xlat0;
  let x_2598 : f32 = u_xlat0;
  u_xlat0 = (x_2597 * x_2598);
  let x_2601 : f32 = u_xlat8.x;
  let x_2603 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_2601 * x_2603);
  let x_2606 : f32 = u_xlat0;
  let x_2608 : f32 = u_xlat8.x;
  u_xlat0 = (x_2606 * x_2608);
  let x_2610 : f32 = u_xlat0;
  u_xlat0 = (x_2610 * 0.125f);
  let x_2612 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2612, 0.0f, 1.0f);
  let x_2614 : f32 = u_xlat0;
  u_xlat0 = log2(x_2614);
  let x_2616 : f32 = u_xlat0;
  u_xlat0 = (x_2616 * 0.600000024f);
  let x_2619 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2619);
  let x_2623 : vec4<f32> = u_xlat1;
  let x_2627 : vec3<f32> = ((vec3<f32>(x_2623.x, x_2623.y, x_2623.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2628 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2628.x, x_2627.x, x_2627.y, x_2627.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

