struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(1) var x_MainTex : texture_2d<f32>;

@group(0) @binding(6) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(2) var x_MetallicTex : texture_2d<f32>;

@group(0) @binding(7) var sampler_MetallicTex : sampler;

var<private> vs_TEXCOORD7 : vec3<f32>;

var<private> vs_TEXCOORD3 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_162 : MainLightShadows;

@group(1) @binding(2) var<uniform> x_335 : UnityPerDraw;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2153 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatb22 : bool;
  var u_xlat2 : vec4<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec3<f32>;
  var x_104 : f32;
  var x_118 : f32;
  var x_130 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu22 : u32;
  var u_xlati22 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat63 : f32;
  var u_xlat26 : f32;
  var u_xlatb47 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat47 : vec2<f32>;
  var u_xlatb68 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb43 : bool;
  var u_xlatb64 : bool;
  var x_1778 : f32;
  var u_xlat64 : f32;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu47 : u32;
  var u_xlati68 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati47 : i32;
  var u_xlat70 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_TEXCOORD0;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_58 : vec4<f32> = vs_TEXCOORD0;
  let x_61 : f32 = x_44.x_GlobalMipBias.x;
  let x_62 : vec4<f32> = textureSampleBias(x_MetallicTex, sampler_MetallicTex, vec2<f32>(x_58.x, x_58.y), x_61);
  u_xlat1.x = x_62.x;
  let x_71 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb22 = (x_71 == 0.0f);
  let x_77 : vec3<f32> = vs_TEXCOORD7;
  let x_82 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_83 : vec3<f32> = (-(x_77) + x_82);
  let x_84 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_83.x, x_83.y, x_83.z, x_84.w);
  let x_87 : vec4<f32> = u_xlat2;
  let x_89 : vec4<f32> = u_xlat2;
  u_xlat43 = dot(vec3<f32>(x_87.x, x_87.y, x_87.z), vec3<f32>(x_89.x, x_89.y, x_89.z));
  let x_92 : f32 = u_xlat43;
  u_xlat43 = inverseSqrt(x_92);
  let x_94 : f32 = u_xlat43;
  let x_96 : vec4<f32> = u_xlat2;
  let x_98 : vec3<f32> = (vec3<f32>(x_94, x_94, x_94) * vec3<f32>(x_96.x, x_96.y, x_96.z));
  let x_99 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_98.x, x_98.y, x_98.z, x_99.w);
  let x_103 : bool = u_xlatb22;
  if (x_103) {
    let x_108 : f32 = u_xlat2.x;
    x_104 = x_108;
  } else {
    let x_114 : f32 = x_44.unity_MatrixV[0i].z;
    x_104 = x_114;
  }
  let x_115 : f32 = x_104;
  u_xlat3.x = x_115;
  let x_117 : bool = u_xlatb22;
  if (x_117) {
    let x_123 : f32 = u_xlat2.y;
    x_118 = x_123;
  } else {
    let x_126 : f32 = x_44.unity_MatrixV[1i].z;
    x_118 = x_126;
  }
  let x_127 : f32 = x_118;
  u_xlat3.y = x_127;
  let x_129 : bool = u_xlatb22;
  if (x_129) {
    let x_134 : f32 = u_xlat2.z;
    x_130 = x_134;
  } else {
    let x_138 : f32 = x_44.unity_MatrixV[2i].z;
    x_130 = x_138;
  }
  let x_139 : f32 = x_130;
  u_xlat3.z = x_139;
  let x_143 : vec3<f32> = vs_TEXCOORD3;
  let x_144 : vec3<f32> = vs_TEXCOORD3;
  u_xlat22.x = dot(x_143, x_144);
  let x_148 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_148);
  let x_151 : vec3<f32> = u_xlat22;
  let x_153 : vec3<f32> = vs_TEXCOORD3;
  let x_154 : vec3<f32> = (vec3<f32>(x_151.x, x_151.x, x_151.x) * x_153);
  let x_155 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_154.x, x_154.y, x_154.z, x_155.w);
  let x_157 : vec3<f32> = vs_TEXCOORD7;
  let x_165 : vec4<f32> = x_162.x_CascadeShadowSplitSpheres0;
  u_xlat22 = (x_157 + -(vec3<f32>(x_165.x, x_165.y, x_165.z)));
  let x_170 : vec3<f32> = vs_TEXCOORD7;
  let x_172 : vec4<f32> = x_162.x_CascadeShadowSplitSpheres1;
  u_xlat4 = (x_170 + -(vec3<f32>(x_172.x, x_172.y, x_172.z)));
  let x_177 : vec3<f32> = vs_TEXCOORD7;
  let x_180 : vec4<f32> = x_162.x_CascadeShadowSplitSpheres2;
  let x_183 : vec3<f32> = (x_177 + -(vec3<f32>(x_180.x, x_180.y, x_180.z)));
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_183.x, x_183.y, x_183.z, x_184.w);
  let x_187 : vec3<f32> = vs_TEXCOORD7;
  let x_190 : vec4<f32> = x_162.x_CascadeShadowSplitSpheres3;
  u_xlat6 = (x_187 + -(vec3<f32>(x_190.x, x_190.y, x_190.z)));
  let x_195 : vec3<f32> = u_xlat22;
  let x_196 : vec3<f32> = u_xlat22;
  u_xlat7.x = dot(x_195, x_196);
  let x_199 : vec3<f32> = u_xlat4;
  let x_200 : vec3<f32> = u_xlat4;
  u_xlat7.y = dot(x_199, x_200);
  let x_203 : vec4<f32> = u_xlat5;
  let x_205 : vec4<f32> = u_xlat5;
  u_xlat7.z = dot(vec3<f32>(x_203.x, x_203.y, x_203.z), vec3<f32>(x_205.x, x_205.y, x_205.z));
  let x_209 : vec3<f32> = u_xlat6;
  let x_210 : vec3<f32> = u_xlat6;
  u_xlat7.w = dot(x_209, x_210);
  let x_216 : vec4<f32> = u_xlat7;
  let x_219 : vec4<f32> = x_162.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_216 < x_219);
  let x_222 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_222);
  let x_226 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_226);
  let x_230 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_230);
  let x_234 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_234);
  let x_238 : bool = u_xlatb4.x;
  u_xlat22.x = select(-0.0f, -1.0f, x_238);
  let x_244 : bool = u_xlatb4.y;
  u_xlat22.y = select(-0.0f, -1.0f, x_244);
  let x_248 : bool = u_xlatb4.z;
  u_xlat22.z = select(-0.0f, -1.0f, x_248);
  let x_251 : vec3<f32> = u_xlat22;
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat22 = (x_251 + vec3<f32>(x_252.y, x_252.z, x_252.w));
  let x_255 : vec3<f32> = u_xlat22;
  let x_257 : vec3<f32> = max(x_255, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_258 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_258.x, x_257.x, x_257.y, x_257.z);
  let x_260 : vec4<f32> = u_xlat5;
  u_xlat22.x = dot(x_260, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_268 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_268) + 4.0f);
  let x_275 : f32 = u_xlat22.x;
  u_xlatu22 = u32(x_275);
  let x_279 : u32 = u_xlatu22;
  u_xlati22 = (bitcast<i32>(x_279) << bitcast<u32>(2i));
  let x_282 : vec3<f32> = vs_TEXCOORD7;
  let x_284 : i32 = u_xlati22;
  let x_287 : i32 = u_xlati22;
  let x_291 : vec4<f32> = x_162.x_MainLightWorldToShadow[((x_284 + 1i) / 4i)][((x_287 + 1i) % 4i)];
  u_xlat4 = (vec3<f32>(x_282.y, x_282.y, x_282.y) * vec3<f32>(x_291.x, x_291.y, x_291.z));
  let x_294 : i32 = u_xlati22;
  let x_296 : i32 = u_xlati22;
  let x_299 : vec4<f32> = x_162.x_MainLightWorldToShadow[(x_294 / 4i)][(x_296 % 4i)];
  let x_301 : vec3<f32> = vs_TEXCOORD7;
  let x_304 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_299.x, x_299.y, x_299.z) * vec3<f32>(x_301.x, x_301.x, x_301.x)) + x_304);
  let x_306 : i32 = u_xlati22;
  let x_309 : i32 = u_xlati22;
  let x_313 : vec4<f32> = x_162.x_MainLightWorldToShadow[((x_306 + 2i) / 4i)][((x_309 + 2i) % 4i)];
  let x_315 : vec3<f32> = vs_TEXCOORD7;
  let x_318 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_313.x, x_313.y, x_313.z) * vec3<f32>(x_315.z, x_315.z, x_315.z)) + x_318);
  let x_320 : vec3<f32> = u_xlat4;
  let x_321 : i32 = u_xlati22;
  let x_324 : i32 = u_xlati22;
  let x_328 : vec4<f32> = x_162.x_MainLightWorldToShadow[((x_321 + 3i) / 4i)][((x_324 + 3i) % 4i)];
  u_xlat22 = (x_320 + vec3<f32>(x_328.x, x_328.y, x_328.z));
  u_xlat2.w = 1.0f;
  let x_338 : vec4<f32> = x_335.unity_SHAr;
  let x_339 : vec4<f32> = u_xlat2;
  u_xlat4.x = dot(x_338, x_339);
  let x_344 : vec4<f32> = x_335.unity_SHAg;
  let x_345 : vec4<f32> = u_xlat2;
  u_xlat4.y = dot(x_344, x_345);
  let x_350 : vec4<f32> = x_335.unity_SHAb;
  let x_351 : vec4<f32> = u_xlat2;
  u_xlat4.z = dot(x_350, x_351);
  let x_354 : vec4<f32> = u_xlat2;
  let x_356 : vec4<f32> = u_xlat2;
  u_xlat5 = (vec4<f32>(x_354.y, x_354.z, x_354.z, x_354.x) * vec4<f32>(x_356.x, x_356.y, x_356.z, x_356.z));
  let x_361 : vec4<f32> = x_335.unity_SHBr;
  let x_362 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_361, x_362);
  let x_367 : vec4<f32> = x_335.unity_SHBg;
  let x_368 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_367, x_368);
  let x_373 : vec4<f32> = x_335.unity_SHBb;
  let x_374 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_373, x_374);
  let x_379 : f32 = u_xlat2.y;
  let x_381 : f32 = u_xlat2.y;
  u_xlat65 = (x_379 * x_381);
  let x_384 : f32 = u_xlat2.x;
  let x_386 : f32 = u_xlat2.x;
  let x_388 : f32 = u_xlat65;
  u_xlat65 = ((x_384 * x_386) + -(x_388));
  let x_393 : vec4<f32> = x_335.unity_SHC;
  let x_395 : f32 = u_xlat65;
  let x_398 : vec3<f32> = u_xlat6;
  let x_399 : vec3<f32> = ((vec3<f32>(x_393.x, x_393.y, x_393.z) * vec3<f32>(x_395, x_395, x_395)) + x_398);
  let x_400 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_399.x, x_399.y, x_399.z, x_400.w);
  let x_402 : vec3<f32> = u_xlat4;
  let x_403 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_402 + vec3<f32>(x_403.x, x_403.y, x_403.z));
  let x_406 : vec3<f32> = u_xlat4;
  u_xlat4 = max(x_406, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_410 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_411 : vec2<f32> = vec2<f32>(x_410.x, x_410.y);
  let x_415 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_411.x, x_411.y));
  let x_416 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_415.x, x_415.y, x_416.z, x_416.w);
  let x_418 : vec4<f32> = u_xlat5;
  let x_420 : vec4<f32> = hlslcc_FragCoord;
  let x_422 : vec2<f32> = (vec2<f32>(x_418.x, x_418.y) * vec2<f32>(x_420.x, x_420.y));
  let x_423 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_422.x, x_422.y, x_423.z, x_423.w);
  let x_426 : f32 = u_xlat5.y;
  let x_429 : f32 = x_44.x_ScaleBiasRt.x;
  let x_432 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat65 = ((x_426 * x_429) + x_432);
  let x_434 : f32 = u_xlat65;
  u_xlat5.z = (-(x_434) + 1.0f);
  let x_439 : f32 = u_xlat1.x;
  u_xlat65 = ((-(x_439) * 0.959999979f) + 0.959999979f);
  let x_445 : f32 = u_xlat65;
  u_xlat66 = (-(x_445) + 1.0f);
  let x_448 : vec4<f32> = u_xlat0;
  let x_450 : f32 = u_xlat65;
  u_xlat6 = (vec3<f32>(x_448.x, x_448.y, x_448.z) * vec3<f32>(x_450, x_450, x_450));
  let x_453 : vec4<f32> = u_xlat0;
  let x_457 : vec3<f32> = (vec3<f32>(x_453.x, x_453.y, x_453.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_458 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_457.x, x_457.y, x_457.z, x_458.w);
  let x_460 : vec4<f32> = u_xlat1;
  let x_462 : vec4<f32> = u_xlat0;
  let x_467 : vec3<f32> = ((vec3<f32>(x_460.x, x_460.x, x_460.x) * vec3<f32>(x_462.x, x_462.y, x_462.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_468 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_467.x, x_467.y, x_467.z, x_468.w);
  let x_471 : f32 = u_xlat0.w;
  u_xlat1.x = (-(x_471) + 1.0f);
  let x_476 : f32 = u_xlat1.x;
  let x_478 : f32 = u_xlat1.x;
  u_xlat65 = (x_476 * x_478);
  let x_480 : f32 = u_xlat65;
  u_xlat65 = max(x_480, 0.0078125f);
  let x_484 : f32 = u_xlat65;
  let x_485 : f32 = u_xlat65;
  u_xlat67 = (x_484 * x_485);
  let x_489 : f32 = u_xlat0.w;
  let x_490 : f32 = u_xlat66;
  u_xlat63 = (x_489 + x_490);
  let x_492 : f32 = u_xlat63;
  u_xlat63 = clamp(x_492, 0.0f, 1.0f);
  let x_494 : f32 = u_xlat65;
  u_xlat66 = ((x_494 * 4.0f) + 2.0f);
  let x_502 : vec4<f32> = u_xlat5;
  let x_505 : f32 = x_44.x_GlobalMipBias.x;
  let x_506 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_502.x, x_502.z), x_505);
  u_xlat5.x = x_506.x;
  let x_511 : f32 = u_xlat5.x;
  u_xlat26 = (x_511 + -1.0f);
  let x_514 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_515 : f32 = u_xlat26;
  u_xlat26 = ((x_514 * x_515) + 1.0f);
  let x_519 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_519, 1.0f);
  let x_524 : f32 = x_162.x_MainLightShadowParams.y;
  u_xlatb47 = (0.0f < x_524);
  let x_526 : bool = u_xlatb47;
  if (x_526) {
    let x_530 : f32 = x_162.x_MainLightShadowParams.y;
    u_xlatb47 = (x_530 == 1.0f);
    let x_532 : bool = u_xlatb47;
    if (x_532) {
      let x_535 : vec3<f32> = u_xlat22;
      let x_538 : vec4<f32> = x_162.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_535.x, x_535.y, x_535.x, x_535.y) + x_538);
      let x_541 : vec4<f32> = u_xlat7;
      let x_542 : vec2<f32> = vec2<f32>(x_541.x, x_541.y);
      let x_544 : f32 = u_xlat22.z;
      txVec0 = vec3<f32>(x_542.x, x_542.y, x_544);
      let x_557 : vec3<f32> = txVec0;
      let x_559 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_557.xy, x_557.z);
      u_xlat8.x = x_559;
      let x_562 : vec4<f32> = u_xlat7;
      let x_563 : vec2<f32> = vec2<f32>(x_562.z, x_562.w);
      let x_565 : f32 = u_xlat22.z;
      txVec1 = vec3<f32>(x_563.x, x_563.y, x_565);
      let x_572 : vec3<f32> = txVec1;
      let x_574 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_572.xy, x_572.z);
      u_xlat8.y = x_574;
      let x_576 : vec3<f32> = u_xlat22;
      let x_579 : vec4<f32> = x_162.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_576.x, x_576.y, x_576.x, x_576.y) + x_579);
      let x_582 : vec4<f32> = u_xlat7;
      let x_583 : vec2<f32> = vec2<f32>(x_582.x, x_582.y);
      let x_585 : f32 = u_xlat22.z;
      txVec2 = vec3<f32>(x_583.x, x_583.y, x_585);
      let x_592 : vec3<f32> = txVec2;
      let x_594 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_592.xy, x_592.z);
      u_xlat8.z = x_594;
      let x_597 : vec4<f32> = u_xlat7;
      let x_598 : vec2<f32> = vec2<f32>(x_597.z, x_597.w);
      let x_600 : f32 = u_xlat22.z;
      txVec3 = vec3<f32>(x_598.x, x_598.y, x_600);
      let x_607 : vec3<f32> = txVec3;
      let x_609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_607.xy, x_607.z);
      u_xlat8.w = x_609;
      let x_613 : vec4<f32> = u_xlat8;
      u_xlat47.x = dot(x_613, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_621 : f32 = x_162.x_MainLightShadowParams.y;
      u_xlatb68 = (x_621 == 2.0f);
      let x_623 : bool = u_xlatb68;
      if (x_623) {
        let x_626 : vec3<f32> = u_xlat22;
        let x_629 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_634 : vec2<f32> = ((vec2<f32>(x_626.x, x_626.y) * vec2<f32>(x_629.z, x_629.w)) + vec2<f32>(0.5f, 0.5f));
        let x_635 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_637 : vec4<f32> = u_xlat7;
        let x_639 : vec2<f32> = floor(vec2<f32>(x_637.x, x_637.y));
        let x_640 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_639.x, x_639.y, x_640.z, x_640.w);
        let x_643 : vec3<f32> = u_xlat22;
        let x_646 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_649 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_643.x, x_643.y) * vec2<f32>(x_646.z, x_646.w)) + -(vec2<f32>(x_649.x, x_649.y)));
        let x_653 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_653.x, x_653.x, x_653.y, x_653.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_658 : vec4<f32> = u_xlat8;
        let x_660 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_658.x, x_658.x, x_658.z, x_658.z) * vec4<f32>(x_660.x, x_660.x, x_660.z, x_660.z));
        let x_663 : vec4<f32> = u_xlat9;
        let x_667 : vec2<f32> = (vec2<f32>(x_663.y, x_663.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_668 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_667.x, x_668.y, x_667.y, x_668.w);
        let x_670 : vec4<f32> = u_xlat9;
        let x_673 : vec2<f32> = u_xlat49;
        let x_675 : vec2<f32> = ((vec2<f32>(x_670.x, x_670.z) * vec2<f32>(0.5f, 0.5f)) + -(x_673));
        let x_676 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_675.x, x_675.y, x_676.z, x_676.w);
        let x_679 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_679) + vec2<f32>(1.0f, 1.0f));
        let x_683 : vec2<f32> = u_xlat49;
        let x_685 : vec2<f32> = min(x_683, vec2<f32>(0.0f, 0.0f));
        let x_686 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_685.x, x_685.y, x_686.z, x_686.w);
        let x_688 : vec4<f32> = u_xlat10;
        let x_691 : vec4<f32> = u_xlat10;
        let x_694 : vec2<f32> = u_xlat51;
        let x_695 : vec2<f32> = ((-(vec2<f32>(x_688.x, x_688.y)) * vec2<f32>(x_691.x, x_691.y)) + x_694);
        let x_696 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_695.x, x_695.y, x_696.z, x_696.w);
        let x_698 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_698, vec2<f32>(0.0f, 0.0f));
        let x_700 : vec2<f32> = u_xlat49;
        let x_702 : vec2<f32> = u_xlat49;
        let x_704 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_700) * x_702) + vec2<f32>(x_704.y, x_704.w));
        let x_707 : vec4<f32> = u_xlat10;
        let x_709 : vec2<f32> = (vec2<f32>(x_707.x, x_707.y) + vec2<f32>(1.0f, 1.0f));
        let x_710 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_709.x, x_709.y, x_710.z, x_710.w);
        let x_712 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_712 + vec2<f32>(1.0f, 1.0f));
        let x_715 : vec4<f32> = u_xlat9;
        let x_719 : vec2<f32> = (vec2<f32>(x_715.x, x_715.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_720 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_719.x, x_719.y, x_720.z, x_720.w);
        let x_722 : vec2<f32> = u_xlat51;
        let x_723 : vec2<f32> = (x_722 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_723.x, x_723.y, x_724.z, x_724.w);
        let x_726 : vec4<f32> = u_xlat10;
        let x_728 : vec2<f32> = (vec2<f32>(x_726.x, x_726.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_729 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_728.x, x_728.y, x_729.z, x_729.w);
        let x_732 : vec2<f32> = u_xlat49;
        let x_733 : vec2<f32> = (x_732 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_734 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_733.x, x_733.y, x_734.z, x_734.w);
        let x_736 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_736.y, x_736.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_740 : f32 = u_xlat10.x;
        u_xlat11.z = x_740;
        let x_743 : f32 = u_xlat49.x;
        u_xlat11.w = x_743;
        let x_746 : f32 = u_xlat12.x;
        u_xlat9.z = x_746;
        let x_749 : f32 = u_xlat8.x;
        u_xlat9.w = x_749;
        let x_752 : vec4<f32> = u_xlat9;
        let x_754 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_752.z, x_752.w, x_752.x, x_752.z) + vec4<f32>(x_754.z, x_754.w, x_754.x, x_754.z));
        let x_758 : f32 = u_xlat11.y;
        u_xlat10.z = x_758;
        let x_761 : f32 = u_xlat49.y;
        u_xlat10.w = x_761;
        let x_764 : f32 = u_xlat9.y;
        u_xlat12.z = x_764;
        let x_767 : f32 = u_xlat8.z;
        u_xlat12.w = x_767;
        let x_769 : vec4<f32> = u_xlat10;
        let x_771 : vec4<f32> = u_xlat12;
        let x_773 : vec3<f32> = (vec3<f32>(x_769.z, x_769.y, x_769.w) + vec3<f32>(x_771.z, x_771.y, x_771.w));
        let x_774 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_773.x, x_773.y, x_773.z, x_774.w);
        let x_776 : vec4<f32> = u_xlat9;
        let x_778 : vec4<f32> = u_xlat13;
        let x_780 : vec3<f32> = (vec3<f32>(x_776.x, x_776.z, x_776.w) / vec3<f32>(x_778.z, x_778.w, x_778.y));
        let x_781 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_780.x, x_780.y, x_780.z, x_781.w);
        let x_783 : vec4<f32> = u_xlat9;
        let x_789 : vec3<f32> = (vec3<f32>(x_783.x, x_783.y, x_783.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_790 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_789.x, x_789.y, x_789.z, x_790.w);
        let x_792 : vec4<f32> = u_xlat12;
        let x_794 : vec4<f32> = u_xlat8;
        let x_796 : vec3<f32> = (vec3<f32>(x_792.z, x_792.y, x_792.w) / vec3<f32>(x_794.x, x_794.y, x_794.z));
        let x_797 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_796.x, x_796.y, x_796.z, x_797.w);
        let x_799 : vec4<f32> = u_xlat10;
        let x_801 : vec3<f32> = (vec3<f32>(x_799.x, x_799.y, x_799.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_802 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_801.x, x_801.y, x_801.z, x_802.w);
        let x_804 : vec4<f32> = u_xlat9;
        let x_807 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_809 : vec3<f32> = (vec3<f32>(x_804.y, x_804.x, x_804.z) * vec3<f32>(x_807.x, x_807.x, x_807.x));
        let x_810 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_809.x, x_809.y, x_809.z, x_810.w);
        let x_812 : vec4<f32> = u_xlat10;
        let x_815 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_817 : vec3<f32> = (vec3<f32>(x_812.x, x_812.y, x_812.z) * vec3<f32>(x_815.y, x_815.y, x_815.y));
        let x_818 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_817.x, x_817.y, x_817.z, x_818.w);
        let x_821 : f32 = u_xlat10.x;
        u_xlat9.w = x_821;
        let x_823 : vec4<f32> = u_xlat7;
        let x_826 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_829 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_823.x, x_823.y, x_823.x, x_823.y) * vec4<f32>(x_826.x, x_826.y, x_826.x, x_826.y)) + vec4<f32>(x_829.y, x_829.w, x_829.x, x_829.w));
        let x_832 : vec4<f32> = u_xlat7;
        let x_835 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_838 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_832.x, x_832.y) * vec2<f32>(x_835.x, x_835.y)) + vec2<f32>(x_838.z, x_838.w));
        let x_842 : f32 = u_xlat9.y;
        u_xlat10.w = x_842;
        let x_844 : vec4<f32> = u_xlat10;
        let x_845 : vec2<f32> = vec2<f32>(x_844.y, x_844.z);
        let x_846 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_846.x, x_845.x, x_846.z, x_845.y);
        let x_848 : vec4<f32> = u_xlat7;
        let x_851 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_854 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_848.x, x_848.y, x_848.x, x_848.y) * vec4<f32>(x_851.x, x_851.y, x_851.x, x_851.y)) + vec4<f32>(x_854.x, x_854.y, x_854.z, x_854.y));
        let x_857 : vec4<f32> = u_xlat7;
        let x_860 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_863 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_857.x, x_857.y, x_857.x, x_857.y) * vec4<f32>(x_860.x, x_860.y, x_860.x, x_860.y)) + vec4<f32>(x_863.w, x_863.y, x_863.w, x_863.z));
        let x_866 : vec4<f32> = u_xlat7;
        let x_869 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_872 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_866.x, x_866.y, x_866.x, x_866.y) * vec4<f32>(x_869.x, x_869.y, x_869.x, x_869.y)) + vec4<f32>(x_872.x, x_872.w, x_872.z, x_872.w));
        let x_876 : vec4<f32> = u_xlat8;
        let x_878 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_876.x, x_876.x, x_876.x, x_876.y) * vec4<f32>(x_878.z, x_878.w, x_878.y, x_878.z));
        let x_882 : vec4<f32> = u_xlat8;
        let x_884 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_882.y, x_882.y, x_882.z, x_882.z) * x_884);
        let x_888 : f32 = u_xlat8.z;
        let x_890 : f32 = u_xlat13.y;
        u_xlat68 = (x_888 * x_890);
        let x_893 : vec4<f32> = u_xlat11;
        let x_894 : vec2<f32> = vec2<f32>(x_893.x, x_893.y);
        let x_896 : f32 = u_xlat22.z;
        txVec4 = vec3<f32>(x_894.x, x_894.y, x_896);
        let x_904 : vec3<f32> = txVec4;
        let x_906 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_904.xy, x_904.z);
        u_xlat69 = x_906;
        let x_908 : vec4<f32> = u_xlat11;
        let x_909 : vec2<f32> = vec2<f32>(x_908.z, x_908.w);
        let x_911 : f32 = u_xlat22.z;
        txVec5 = vec3<f32>(x_909.x, x_909.y, x_911);
        let x_918 : vec3<f32> = txVec5;
        let x_920 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_918.xy, x_918.z);
        u_xlat7.x = x_920;
        let x_923 : f32 = u_xlat7.x;
        let x_925 : f32 = u_xlat14.y;
        u_xlat7.x = (x_923 * x_925);
        let x_929 : f32 = u_xlat14.x;
        let x_930 : f32 = u_xlat69;
        let x_933 : f32 = u_xlat7.x;
        u_xlat69 = ((x_929 * x_930) + x_933);
        let x_936 : vec2<f32> = u_xlat49;
        let x_938 : f32 = u_xlat22.z;
        txVec6 = vec3<f32>(x_936.x, x_936.y, x_938);
        let x_945 : vec3<f32> = txVec6;
        let x_947 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_945.xy, x_945.z);
        u_xlat7.x = x_947;
        let x_950 : f32 = u_xlat14.z;
        let x_952 : f32 = u_xlat7.x;
        let x_954 : f32 = u_xlat69;
        u_xlat69 = ((x_950 * x_952) + x_954);
        let x_957 : vec4<f32> = u_xlat10;
        let x_958 : vec2<f32> = vec2<f32>(x_957.x, x_957.y);
        let x_960 : f32 = u_xlat22.z;
        txVec7 = vec3<f32>(x_958.x, x_958.y, x_960);
        let x_967 : vec3<f32> = txVec7;
        let x_969 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_967.xy, x_967.z);
        u_xlat7.x = x_969;
        let x_972 : f32 = u_xlat14.w;
        let x_974 : f32 = u_xlat7.x;
        let x_976 : f32 = u_xlat69;
        u_xlat69 = ((x_972 * x_974) + x_976);
        let x_979 : vec4<f32> = u_xlat12;
        let x_980 : vec2<f32> = vec2<f32>(x_979.x, x_979.y);
        let x_982 : f32 = u_xlat22.z;
        txVec8 = vec3<f32>(x_980.x, x_980.y, x_982);
        let x_989 : vec3<f32> = txVec8;
        let x_991 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_989.xy, x_989.z);
        u_xlat7.x = x_991;
        let x_994 : f32 = u_xlat15.x;
        let x_996 : f32 = u_xlat7.x;
        let x_998 : f32 = u_xlat69;
        u_xlat69 = ((x_994 * x_996) + x_998);
        let x_1001 : vec4<f32> = u_xlat12;
        let x_1002 : vec2<f32> = vec2<f32>(x_1001.z, x_1001.w);
        let x_1004 : f32 = u_xlat22.z;
        txVec9 = vec3<f32>(x_1002.x, x_1002.y, x_1004);
        let x_1011 : vec3<f32> = txVec9;
        let x_1013 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1011.xy, x_1011.z);
        u_xlat7.x = x_1013;
        let x_1016 : f32 = u_xlat15.y;
        let x_1018 : f32 = u_xlat7.x;
        let x_1020 : f32 = u_xlat69;
        u_xlat69 = ((x_1016 * x_1018) + x_1020);
        let x_1023 : vec4<f32> = u_xlat10;
        let x_1024 : vec2<f32> = vec2<f32>(x_1023.z, x_1023.w);
        let x_1026 : f32 = u_xlat22.z;
        txVec10 = vec3<f32>(x_1024.x, x_1024.y, x_1026);
        let x_1033 : vec3<f32> = txVec10;
        let x_1035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1033.xy, x_1033.z);
        u_xlat7.x = x_1035;
        let x_1038 : f32 = u_xlat15.z;
        let x_1040 : f32 = u_xlat7.x;
        let x_1042 : f32 = u_xlat69;
        u_xlat69 = ((x_1038 * x_1040) + x_1042);
        let x_1045 : vec4<f32> = u_xlat9;
        let x_1046 : vec2<f32> = vec2<f32>(x_1045.x, x_1045.y);
        let x_1048 : f32 = u_xlat22.z;
        txVec11 = vec3<f32>(x_1046.x, x_1046.y, x_1048);
        let x_1055 : vec3<f32> = txVec11;
        let x_1057 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1055.xy, x_1055.z);
        u_xlat7.x = x_1057;
        let x_1060 : f32 = u_xlat15.w;
        let x_1062 : f32 = u_xlat7.x;
        let x_1064 : f32 = u_xlat69;
        u_xlat69 = ((x_1060 * x_1062) + x_1064);
        let x_1067 : vec4<f32> = u_xlat9;
        let x_1068 : vec2<f32> = vec2<f32>(x_1067.z, x_1067.w);
        let x_1070 : f32 = u_xlat22.z;
        txVec12 = vec3<f32>(x_1068.x, x_1068.y, x_1070);
        let x_1077 : vec3<f32> = txVec12;
        let x_1079 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1077.xy, x_1077.z);
        u_xlat7.x = x_1079;
        let x_1081 : f32 = u_xlat68;
        let x_1083 : f32 = u_xlat7.x;
        let x_1085 : f32 = u_xlat69;
        u_xlat47.x = ((x_1081 * x_1083) + x_1085);
      } else {
        let x_1089 : vec3<f32> = u_xlat22;
        let x_1092 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1095 : vec2<f32> = ((vec2<f32>(x_1089.x, x_1089.y) * vec2<f32>(x_1092.z, x_1092.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1096 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1095.x, x_1095.y, x_1096.z, x_1096.w);
        let x_1098 : vec4<f32> = u_xlat7;
        let x_1100 : vec2<f32> = floor(vec2<f32>(x_1098.x, x_1098.y));
        let x_1101 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1100.x, x_1100.y, x_1101.z, x_1101.w);
        let x_1103 : vec3<f32> = u_xlat22;
        let x_1106 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1109 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1103.x, x_1103.y) * vec2<f32>(x_1106.z, x_1106.w)) + -(vec2<f32>(x_1109.x, x_1109.y)));
        let x_1113 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1113.x, x_1113.x, x_1113.y, x_1113.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1116 : vec4<f32> = u_xlat8;
        let x_1118 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1116.x, x_1116.x, x_1116.z, x_1116.z) * vec4<f32>(x_1118.x, x_1118.x, x_1118.z, x_1118.z));
        let x_1121 : vec4<f32> = u_xlat9;
        let x_1125 : vec2<f32> = (vec2<f32>(x_1121.y, x_1121.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1126 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1126.x, x_1125.x, x_1126.z, x_1125.y);
        let x_1128 : vec4<f32> = u_xlat9;
        let x_1131 : vec2<f32> = u_xlat49;
        let x_1133 : vec2<f32> = ((vec2<f32>(x_1128.x, x_1128.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1131));
        let x_1134 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1133.x, x_1134.y, x_1133.y, x_1134.w);
        let x_1136 : vec2<f32> = u_xlat49;
        let x_1138 : vec2<f32> = (-(x_1136) + vec2<f32>(1.0f, 1.0f));
        let x_1139 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1138.x, x_1138.y, x_1139.z, x_1139.w);
        let x_1141 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_1141, vec2<f32>(0.0f, 0.0f));
        let x_1143 : vec2<f32> = u_xlat51;
        let x_1145 : vec2<f32> = u_xlat51;
        let x_1147 : vec4<f32> = u_xlat9;
        let x_1149 : vec2<f32> = ((-(x_1143) * x_1145) + vec2<f32>(x_1147.x, x_1147.y));
        let x_1150 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1149.x, x_1149.y, x_1150.z, x_1150.w);
        let x_1152 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_1152, vec2<f32>(0.0f, 0.0f));
        let x_1155 : vec2<f32> = u_xlat51;
        let x_1157 : vec2<f32> = u_xlat51;
        let x_1159 : vec4<f32> = u_xlat8;
        let x_1161 : vec2<f32> = ((-(x_1155) * x_1157) + vec2<f32>(x_1159.y, x_1159.w));
        let x_1162 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1161.x, x_1162.y, x_1161.y);
        let x_1164 : vec4<f32> = u_xlat9;
        let x_1167 : vec2<f32> = (vec2<f32>(x_1164.x, x_1164.y) + vec2<f32>(2.0f, 2.0f));
        let x_1168 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1167.x, x_1167.y, x_1168.z, x_1168.w);
        let x_1170 : vec3<f32> = u_xlat29;
        let x_1172 : vec2<f32> = (vec2<f32>(x_1170.x, x_1170.z) + vec2<f32>(2.0f, 2.0f));
        let x_1173 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1173.x, x_1172.x, x_1173.z, x_1172.y);
        let x_1176 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1176 * 0.081632003f);
        let x_1180 : vec4<f32> = u_xlat8;
        let x_1183 : vec3<f32> = (vec3<f32>(x_1180.z, x_1180.x, x_1180.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1184 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1183.x, x_1183.y, x_1183.z, x_1184.w);
        let x_1186 : vec4<f32> = u_xlat9;
        let x_1189 : vec2<f32> = (vec2<f32>(x_1186.x, x_1186.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1190 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1189.x, x_1189.y, x_1190.z, x_1190.w);
        let x_1193 : f32 = u_xlat12.y;
        u_xlat11.x = x_1193;
        let x_1195 : vec2<f32> = u_xlat49;
        let x_1202 : vec2<f32> = ((vec2<f32>(x_1195.x, x_1195.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1203 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1203.x, x_1202.x, x_1203.z, x_1202.y);
        let x_1205 : vec2<f32> = u_xlat49;
        let x_1209 : vec2<f32> = ((vec2<f32>(x_1205.x, x_1205.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1210 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1209.x, x_1210.y, x_1209.y, x_1210.w);
        let x_1213 : f32 = u_xlat8.x;
        u_xlat9.y = x_1213;
        let x_1216 : f32 = u_xlat10.y;
        u_xlat9.w = x_1216;
        let x_1218 : vec4<f32> = u_xlat9;
        let x_1219 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1218 + x_1219);
        let x_1221 : vec2<f32> = u_xlat49;
        let x_1224 : vec2<f32> = ((vec2<f32>(x_1221.y, x_1221.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1225 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1225.x, x_1224.x, x_1225.z, x_1224.y);
        let x_1227 : vec2<f32> = u_xlat49;
        let x_1230 : vec2<f32> = ((vec2<f32>(x_1227.y, x_1227.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1231 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1230.x, x_1231.y, x_1230.y, x_1231.w);
        let x_1234 : f32 = u_xlat8.y;
        u_xlat10.y = x_1234;
        let x_1236 : vec4<f32> = u_xlat10;
        let x_1237 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1236 + x_1237);
        let x_1239 : vec4<f32> = u_xlat9;
        let x_1240 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1239 / x_1240);
        let x_1242 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1242 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1248 : vec4<f32> = u_xlat10;
        let x_1249 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1248 / x_1249);
        let x_1251 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1251 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1253 : vec4<f32> = u_xlat9;
        let x_1256 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1253.w, x_1253.x, x_1253.y, x_1253.z) * vec4<f32>(x_1256.x, x_1256.x, x_1256.x, x_1256.x));
        let x_1259 : vec4<f32> = u_xlat10;
        let x_1262 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1259.x, x_1259.w, x_1259.y, x_1259.z) * vec4<f32>(x_1262.y, x_1262.y, x_1262.y, x_1262.y));
        let x_1265 : vec4<f32> = u_xlat9;
        let x_1266 : vec3<f32> = vec3<f32>(x_1265.y, x_1265.z, x_1265.w);
        let x_1267 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1266.x, x_1267.y, x_1266.y, x_1266.z);
        let x_1270 : f32 = u_xlat10.x;
        u_xlat12.y = x_1270;
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1272.x, x_1272.y, x_1272.x, x_1272.y) * vec4<f32>(x_1275.x, x_1275.y, x_1275.x, x_1275.y)) + vec4<f32>(x_1278.x, x_1278.y, x_1278.z, x_1278.y));
        let x_1281 : vec4<f32> = u_xlat7;
        let x_1284 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1287 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1281.x, x_1281.y) * vec2<f32>(x_1284.x, x_1284.y)) + vec2<f32>(x_1287.w, x_1287.y));
        let x_1291 : f32 = u_xlat12.y;
        u_xlat9.y = x_1291;
        let x_1294 : f32 = u_xlat10.z;
        u_xlat12.y = x_1294;
        let x_1296 : vec4<f32> = u_xlat7;
        let x_1299 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1302 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1296.x, x_1296.y, x_1296.x, x_1296.y) * vec4<f32>(x_1299.x, x_1299.y, x_1299.x, x_1299.y)) + vec4<f32>(x_1302.x, x_1302.y, x_1302.z, x_1302.y));
        let x_1305 : vec4<f32> = u_xlat7;
        let x_1308 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1311 : vec4<f32> = u_xlat12;
        let x_1313 : vec2<f32> = ((vec2<f32>(x_1305.x, x_1305.y) * vec2<f32>(x_1308.x, x_1308.y)) + vec2<f32>(x_1311.w, x_1311.y));
        let x_1314 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1313.x, x_1313.y, x_1314.z, x_1314.w);
        let x_1317 : f32 = u_xlat12.y;
        u_xlat9.z = x_1317;
        let x_1320 : vec4<f32> = u_xlat7;
        let x_1323 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1326 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1320.x, x_1320.y, x_1320.x, x_1320.y) * vec4<f32>(x_1323.x, x_1323.y, x_1323.x, x_1323.y)) + vec4<f32>(x_1326.x, x_1326.y, x_1326.x, x_1326.z));
        let x_1330 : f32 = u_xlat10.w;
        u_xlat12.y = x_1330;
        let x_1333 : vec4<f32> = u_xlat7;
        let x_1336 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1339 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1333.x, x_1333.y, x_1333.x, x_1333.y) * vec4<f32>(x_1336.x, x_1336.y, x_1336.x, x_1336.y)) + vec4<f32>(x_1339.x, x_1339.y, x_1339.z, x_1339.y));
        let x_1343 : vec4<f32> = u_xlat7;
        let x_1346 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1349 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1343.x, x_1343.y) * vec2<f32>(x_1346.x, x_1346.y)) + vec2<f32>(x_1349.w, x_1349.y));
        let x_1353 : f32 = u_xlat12.y;
        u_xlat9.w = x_1353;
        let x_1356 : vec4<f32> = u_xlat7;
        let x_1359 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1362 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1356.x, x_1356.y) * vec2<f32>(x_1359.x, x_1359.y)) + vec2<f32>(x_1362.x, x_1362.w));
        let x_1365 : vec4<f32> = u_xlat12;
        let x_1366 : vec3<f32> = vec3<f32>(x_1365.x, x_1365.z, x_1365.w);
        let x_1367 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1366.x, x_1367.y, x_1366.y, x_1366.z);
        let x_1369 : vec4<f32> = u_xlat7;
        let x_1372 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1375 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1369.x, x_1369.y, x_1369.x, x_1369.y) * vec4<f32>(x_1372.x, x_1372.y, x_1372.x, x_1372.y)) + vec4<f32>(x_1375.x, x_1375.y, x_1375.z, x_1375.y));
        let x_1379 : vec4<f32> = u_xlat7;
        let x_1382 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1385 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1379.x, x_1379.y) * vec2<f32>(x_1382.x, x_1382.y)) + vec2<f32>(x_1385.w, x_1385.y));
        let x_1389 : f32 = u_xlat9.x;
        u_xlat10.x = x_1389;
        let x_1391 : vec4<f32> = u_xlat7;
        let x_1394 : vec4<f32> = x_162.x_MainLightShadowmapSize;
        let x_1397 : vec4<f32> = u_xlat10;
        let x_1399 : vec2<f32> = ((vec2<f32>(x_1391.x, x_1391.y) * vec2<f32>(x_1394.x, x_1394.y)) + vec2<f32>(x_1397.x, x_1397.y));
        let x_1400 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1399.x, x_1399.y, x_1400.z, x_1400.w);
        let x_1403 : vec4<f32> = u_xlat8;
        let x_1405 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1403.x, x_1403.x, x_1403.x, x_1403.x) * x_1405);
        let x_1408 : vec4<f32> = u_xlat8;
        let x_1410 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1408.y, x_1408.y, x_1408.y, x_1408.y) * x_1410);
        let x_1413 : vec4<f32> = u_xlat8;
        let x_1415 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1413.z, x_1413.z, x_1413.z, x_1413.z) * x_1415);
        let x_1417 : vec4<f32> = u_xlat8;
        let x_1419 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1417.w, x_1417.w, x_1417.w, x_1417.w) * x_1419);
        let x_1422 : vec4<f32> = u_xlat13;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.x, x_1422.y);
        let x_1425 : f32 = u_xlat22.z;
        txVec13 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec13;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat68 = x_1434;
        let x_1436 : vec4<f32> = u_xlat13;
        let x_1437 : vec2<f32> = vec2<f32>(x_1436.z, x_1436.w);
        let x_1439 : f32 = u_xlat22.z;
        txVec14 = vec3<f32>(x_1437.x, x_1437.y, x_1439);
        let x_1446 : vec3<f32> = txVec14;
        let x_1448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1446.xy, x_1446.z);
        u_xlat69 = x_1448;
        let x_1449 : f32 = u_xlat69;
        let x_1451 : f32 = u_xlat18.y;
        u_xlat69 = (x_1449 * x_1451);
        let x_1454 : f32 = u_xlat18.x;
        let x_1455 : f32 = u_xlat68;
        let x_1457 : f32 = u_xlat69;
        u_xlat68 = ((x_1454 * x_1455) + x_1457);
        let x_1460 : vec2<f32> = u_xlat49;
        let x_1462 : f32 = u_xlat22.z;
        txVec15 = vec3<f32>(x_1460.x, x_1460.y, x_1462);
        let x_1469 : vec3<f32> = txVec15;
        let x_1471 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1469.xy, x_1469.z);
        u_xlat69 = x_1471;
        let x_1473 : f32 = u_xlat18.z;
        let x_1474 : f32 = u_xlat69;
        let x_1476 : f32 = u_xlat68;
        u_xlat68 = ((x_1473 * x_1474) + x_1476);
        let x_1479 : vec4<f32> = u_xlat16;
        let x_1480 : vec2<f32> = vec2<f32>(x_1479.x, x_1479.y);
        let x_1482 : f32 = u_xlat22.z;
        txVec16 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1489 : vec3<f32> = txVec16;
        let x_1491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1489.xy, x_1489.z);
        u_xlat69 = x_1491;
        let x_1493 : f32 = u_xlat18.w;
        let x_1494 : f32 = u_xlat69;
        let x_1496 : f32 = u_xlat68;
        u_xlat68 = ((x_1493 * x_1494) + x_1496);
        let x_1499 : vec4<f32> = u_xlat14;
        let x_1500 : vec2<f32> = vec2<f32>(x_1499.x, x_1499.y);
        let x_1502 : f32 = u_xlat22.z;
        txVec17 = vec3<f32>(x_1500.x, x_1500.y, x_1502);
        let x_1509 : vec3<f32> = txVec17;
        let x_1511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1509.xy, x_1509.z);
        u_xlat69 = x_1511;
        let x_1513 : f32 = u_xlat19.x;
        let x_1514 : f32 = u_xlat69;
        let x_1516 : f32 = u_xlat68;
        u_xlat68 = ((x_1513 * x_1514) + x_1516);
        let x_1519 : vec4<f32> = u_xlat14;
        let x_1520 : vec2<f32> = vec2<f32>(x_1519.z, x_1519.w);
        let x_1522 : f32 = u_xlat22.z;
        txVec18 = vec3<f32>(x_1520.x, x_1520.y, x_1522);
        let x_1529 : vec3<f32> = txVec18;
        let x_1531 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1529.xy, x_1529.z);
        u_xlat69 = x_1531;
        let x_1533 : f32 = u_xlat19.y;
        let x_1534 : f32 = u_xlat69;
        let x_1536 : f32 = u_xlat68;
        u_xlat68 = ((x_1533 * x_1534) + x_1536);
        let x_1539 : vec4<f32> = u_xlat15;
        let x_1540 : vec2<f32> = vec2<f32>(x_1539.x, x_1539.y);
        let x_1542 : f32 = u_xlat22.z;
        txVec19 = vec3<f32>(x_1540.x, x_1540.y, x_1542);
        let x_1549 : vec3<f32> = txVec19;
        let x_1551 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1549.xy, x_1549.z);
        u_xlat69 = x_1551;
        let x_1553 : f32 = u_xlat19.z;
        let x_1554 : f32 = u_xlat69;
        let x_1556 : f32 = u_xlat68;
        u_xlat68 = ((x_1553 * x_1554) + x_1556);
        let x_1559 : vec4<f32> = u_xlat16;
        let x_1560 : vec2<f32> = vec2<f32>(x_1559.z, x_1559.w);
        let x_1562 : f32 = u_xlat22.z;
        txVec20 = vec3<f32>(x_1560.x, x_1560.y, x_1562);
        let x_1569 : vec3<f32> = txVec20;
        let x_1571 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1569.xy, x_1569.z);
        u_xlat69 = x_1571;
        let x_1573 : f32 = u_xlat19.w;
        let x_1574 : f32 = u_xlat69;
        let x_1576 : f32 = u_xlat68;
        u_xlat68 = ((x_1573 * x_1574) + x_1576);
        let x_1579 : vec4<f32> = u_xlat17;
        let x_1580 : vec2<f32> = vec2<f32>(x_1579.x, x_1579.y);
        let x_1582 : f32 = u_xlat22.z;
        txVec21 = vec3<f32>(x_1580.x, x_1580.y, x_1582);
        let x_1589 : vec3<f32> = txVec21;
        let x_1591 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1589.xy, x_1589.z);
        u_xlat69 = x_1591;
        let x_1593 : f32 = u_xlat20.x;
        let x_1594 : f32 = u_xlat69;
        let x_1596 : f32 = u_xlat68;
        u_xlat68 = ((x_1593 * x_1594) + x_1596);
        let x_1599 : vec4<f32> = u_xlat17;
        let x_1600 : vec2<f32> = vec2<f32>(x_1599.z, x_1599.w);
        let x_1602 : f32 = u_xlat22.z;
        txVec22 = vec3<f32>(x_1600.x, x_1600.y, x_1602);
        let x_1609 : vec3<f32> = txVec22;
        let x_1611 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1609.xy, x_1609.z);
        u_xlat69 = x_1611;
        let x_1613 : f32 = u_xlat20.y;
        let x_1614 : f32 = u_xlat69;
        let x_1616 : f32 = u_xlat68;
        u_xlat68 = ((x_1613 * x_1614) + x_1616);
        let x_1619 : vec2<f32> = u_xlat30;
        let x_1621 : f32 = u_xlat22.z;
        txVec23 = vec3<f32>(x_1619.x, x_1619.y, x_1621);
        let x_1628 : vec3<f32> = txVec23;
        let x_1630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1628.xy, x_1628.z);
        u_xlat69 = x_1630;
        let x_1632 : f32 = u_xlat20.z;
        let x_1633 : f32 = u_xlat69;
        let x_1635 : f32 = u_xlat68;
        u_xlat68 = ((x_1632 * x_1633) + x_1635);
        let x_1638 : vec2<f32> = u_xlat57;
        let x_1640 : f32 = u_xlat22.z;
        txVec24 = vec3<f32>(x_1638.x, x_1638.y, x_1640);
        let x_1647 : vec3<f32> = txVec24;
        let x_1649 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1647.xy, x_1647.z);
        u_xlat69 = x_1649;
        let x_1651 : f32 = u_xlat20.w;
        let x_1652 : f32 = u_xlat69;
        let x_1654 : f32 = u_xlat68;
        u_xlat68 = ((x_1651 * x_1652) + x_1654);
        let x_1657 : vec4<f32> = u_xlat12;
        let x_1658 : vec2<f32> = vec2<f32>(x_1657.x, x_1657.y);
        let x_1660 : f32 = u_xlat22.z;
        txVec25 = vec3<f32>(x_1658.x, x_1658.y, x_1660);
        let x_1667 : vec3<f32> = txVec25;
        let x_1669 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1667.xy, x_1667.z);
        u_xlat69 = x_1669;
        let x_1671 : f32 = u_xlat8.x;
        let x_1672 : f32 = u_xlat69;
        let x_1674 : f32 = u_xlat68;
        u_xlat68 = ((x_1671 * x_1672) + x_1674);
        let x_1677 : vec4<f32> = u_xlat12;
        let x_1678 : vec2<f32> = vec2<f32>(x_1677.z, x_1677.w);
        let x_1680 : f32 = u_xlat22.z;
        txVec26 = vec3<f32>(x_1678.x, x_1678.y, x_1680);
        let x_1687 : vec3<f32> = txVec26;
        let x_1689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1687.xy, x_1687.z);
        u_xlat69 = x_1689;
        let x_1691 : f32 = u_xlat8.y;
        let x_1692 : f32 = u_xlat69;
        let x_1694 : f32 = u_xlat68;
        u_xlat68 = ((x_1691 * x_1692) + x_1694);
        let x_1697 : vec2<f32> = u_xlat52;
        let x_1699 : f32 = u_xlat22.z;
        txVec27 = vec3<f32>(x_1697.x, x_1697.y, x_1699);
        let x_1706 : vec3<f32> = txVec27;
        let x_1708 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1706.xy, x_1706.z);
        u_xlat69 = x_1708;
        let x_1710 : f32 = u_xlat8.z;
        let x_1711 : f32 = u_xlat69;
        let x_1713 : f32 = u_xlat68;
        u_xlat68 = ((x_1710 * x_1711) + x_1713);
        let x_1716 : vec4<f32> = u_xlat7;
        let x_1717 : vec2<f32> = vec2<f32>(x_1716.x, x_1716.y);
        let x_1719 : f32 = u_xlat22.z;
        txVec28 = vec3<f32>(x_1717.x, x_1717.y, x_1719);
        let x_1726 : vec3<f32> = txVec28;
        let x_1728 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1726.xy, x_1726.z);
        u_xlat69 = x_1728;
        let x_1730 : f32 = u_xlat8.w;
        let x_1731 : f32 = u_xlat69;
        let x_1733 : f32 = u_xlat68;
        u_xlat47.x = ((x_1730 * x_1731) + x_1733);
      }
    }
  } else {
    let x_1738 : vec3<f32> = u_xlat22;
    let x_1739 : vec2<f32> = vec2<f32>(x_1738.x, x_1738.y);
    let x_1741 : f32 = u_xlat22.z;
    txVec29 = vec3<f32>(x_1739.x, x_1739.y, x_1741);
    let x_1748 : vec3<f32> = txVec29;
    let x_1750 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1748.xy, x_1748.z);
    u_xlat47.x = x_1750;
  }
  let x_1753 : f32 = x_162.x_MainLightShadowParams.x;
  u_xlat22.x = (-(x_1753) + 1.0f);
  let x_1758 : f32 = u_xlat47.x;
  let x_1760 : f32 = x_162.x_MainLightShadowParams.x;
  let x_1763 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1758 * x_1760) + x_1763);
  let x_1768 : f32 = u_xlat22.z;
  u_xlatb43 = (0.0f >= x_1768);
  let x_1772 : f32 = u_xlat22.z;
  u_xlatb64 = (x_1772 >= 1.0f);
  let x_1774 : bool = u_xlatb64;
  let x_1775 : bool = u_xlatb43;
  u_xlatb43 = (x_1774 | x_1775);
  let x_1777 : bool = u_xlatb43;
  if (x_1777) {
    x_1778 = 1.0f;
  } else {
    let x_1783 : f32 = u_xlat22.x;
    x_1778 = x_1783;
  }
  let x_1784 : f32 = x_1778;
  u_xlat22.x = x_1784;
  let x_1786 : vec3<f32> = vs_TEXCOORD7;
  let x_1788 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_1790 : vec3<f32> = (x_1786 + -(x_1788));
  let x_1791 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1790.x, x_1790.y, x_1790.z, x_1791.w);
  let x_1793 : vec4<f32> = u_xlat7;
  let x_1795 : vec4<f32> = u_xlat7;
  u_xlat43 = dot(vec3<f32>(x_1793.x, x_1793.y, x_1793.z), vec3<f32>(x_1795.x, x_1795.y, x_1795.z));
  let x_1798 : f32 = u_xlat43;
  let x_1800 : f32 = x_162.x_MainLightShadowParams.z;
  let x_1803 : f32 = x_162.x_MainLightShadowParams.w;
  u_xlat43 = ((x_1798 * x_1800) + x_1803);
  let x_1805 : f32 = u_xlat43;
  u_xlat43 = clamp(x_1805, 0.0f, 1.0f);
  let x_1809 : f32 = u_xlat22.x;
  u_xlat64 = (-(x_1809) + 1.0f);
  let x_1812 : f32 = u_xlat43;
  let x_1813 : f32 = u_xlat64;
  let x_1816 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1812 * x_1813) + x_1816);
  let x_1819 : f32 = u_xlat26;
  let x_1822 : vec4<f32> = x_44.x_MainLightColor;
  let x_1824 : vec3<f32> = (vec3<f32>(x_1819, x_1819, x_1819) * vec3<f32>(x_1822.x, x_1822.y, x_1822.z));
  let x_1825 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1824.x, x_1824.y, x_1824.z, x_1825.w);
  let x_1827 : vec3<f32> = u_xlat3;
  let x_1829 : vec4<f32> = u_xlat2;
  u_xlat43 = dot(-(x_1827), vec3<f32>(x_1829.x, x_1829.y, x_1829.z));
  let x_1832 : f32 = u_xlat43;
  let x_1833 : f32 = u_xlat43;
  u_xlat43 = (x_1832 + x_1833);
  let x_1835 : vec4<f32> = u_xlat2;
  let x_1837 : f32 = u_xlat43;
  let x_1841 : vec3<f32> = u_xlat3;
  let x_1843 : vec3<f32> = ((vec3<f32>(x_1835.x, x_1835.y, x_1835.z) * -(vec3<f32>(x_1837, x_1837, x_1837))) + -(x_1841));
  let x_1844 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1843.x, x_1843.y, x_1843.z, x_1844.w);
  let x_1846 : vec4<f32> = u_xlat2;
  let x_1848 : vec3<f32> = u_xlat3;
  u_xlat43 = dot(vec3<f32>(x_1846.x, x_1846.y, x_1846.z), x_1848);
  let x_1850 : f32 = u_xlat43;
  u_xlat43 = clamp(x_1850, 0.0f, 1.0f);
  let x_1852 : f32 = u_xlat43;
  u_xlat43 = (-(x_1852) + 1.0f);
  let x_1855 : f32 = u_xlat43;
  let x_1856 : f32 = u_xlat43;
  u_xlat1.z = (x_1855 * x_1856);
  let x_1860 : f32 = u_xlat1.x;
  u_xlat1.w = ((-(x_1860) * 0.699999988f) + 1.700000048f);
  let x_1867 : vec4<f32> = u_xlat1;
  let x_1869 : vec4<f32> = u_xlat1;
  let x_1871 : vec2<f32> = (vec2<f32>(x_1867.w, x_1867.z) * vec2<f32>(x_1869.x, x_1869.z));
  let x_1872 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1871.x, x_1872.y, x_1871.y, x_1872.w);
  let x_1875 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1875 * 6.0f);
  let x_1887 : vec4<f32> = u_xlat8;
  let x_1890 : f32 = u_xlat1.x;
  let x_1891 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1887.x, x_1887.y, x_1887.z), x_1890);
  u_xlat8 = x_1891;
  let x_1893 : f32 = u_xlat8.w;
  u_xlat1.x = (x_1893 + -1.0f);
  let x_1897 : f32 = x_335.unity_SpecCube0_HDR.w;
  let x_1899 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1897 * x_1899) + 1.0f);
  let x_1904 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1904, 0.0f);
  let x_1908 : f32 = u_xlat1.x;
  u_xlat1.x = log2(x_1908);
  let x_1912 : f32 = u_xlat1.x;
  let x_1914 : f32 = x_335.unity_SpecCube0_HDR.y;
  u_xlat1.x = (x_1912 * x_1914);
  let x_1918 : f32 = u_xlat1.x;
  u_xlat1.x = exp2(x_1918);
  let x_1922 : f32 = u_xlat1.x;
  let x_1924 : f32 = x_335.unity_SpecCube0_HDR.x;
  u_xlat1.x = (x_1922 * x_1924);
  let x_1927 : vec4<f32> = u_xlat8;
  let x_1929 : vec4<f32> = u_xlat1;
  let x_1931 : vec3<f32> = (vec3<f32>(x_1927.x, x_1927.y, x_1927.z) * vec3<f32>(x_1929.x, x_1929.x, x_1929.x));
  let x_1932 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1931.x, x_1931.y, x_1931.z, x_1932.w);
  let x_1934 : f32 = u_xlat65;
  let x_1936 : f32 = u_xlat65;
  let x_1940 : vec2<f32> = ((vec2<f32>(x_1934, x_1934) * vec2<f32>(x_1936, x_1936)) + vec2<f32>(-1.0f, 1.0f));
  let x_1941 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1940.x, x_1941.y, x_1941.z, x_1940.y);
  let x_1944 : f32 = u_xlat1.w;
  u_xlat64 = (1.0f / x_1944);
  let x_1946 : vec4<f32> = u_xlat0;
  let x_1949 : f32 = u_xlat63;
  let x_1951 : vec3<f32> = (-(vec3<f32>(x_1946.x, x_1946.y, x_1946.z)) + vec3<f32>(x_1949, x_1949, x_1949));
  let x_1952 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1951.x, x_1951.y, x_1951.z, x_1952.w);
  let x_1954 : vec4<f32> = u_xlat1;
  let x_1956 : vec4<f32> = u_xlat9;
  let x_1959 : vec4<f32> = u_xlat0;
  let x_1961 : vec3<f32> = ((vec3<f32>(x_1954.z, x_1954.z, x_1954.z) * vec3<f32>(x_1956.x, x_1956.y, x_1956.z)) + vec3<f32>(x_1959.x, x_1959.y, x_1959.z));
  let x_1962 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1961.x, x_1961.y, x_1961.z, x_1962.w);
  let x_1964 : f32 = u_xlat64;
  let x_1966 : vec4<f32> = u_xlat9;
  let x_1968 : vec3<f32> = (vec3<f32>(x_1964, x_1964, x_1964) * vec3<f32>(x_1966.x, x_1966.y, x_1966.z));
  let x_1969 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1968.x, x_1968.y, x_1968.z, x_1969.w);
  let x_1971 : vec4<f32> = u_xlat8;
  let x_1973 : vec4<f32> = u_xlat9;
  let x_1975 : vec3<f32> = (vec3<f32>(x_1971.x, x_1971.y, x_1971.z) * vec3<f32>(x_1973.x, x_1973.y, x_1973.z));
  let x_1976 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1975.x, x_1975.y, x_1975.z, x_1976.w);
  let x_1978 : vec3<f32> = u_xlat4;
  let x_1979 : vec3<f32> = u_xlat6;
  let x_1981 : vec4<f32> = u_xlat8;
  u_xlat4 = ((x_1978 * x_1979) + vec3<f32>(x_1981.x, x_1981.y, x_1981.z));
  let x_1985 : f32 = u_xlat22.x;
  let x_1987 : f32 = x_335.unity_LightData.z;
  u_xlat63 = (x_1985 * x_1987);
  let x_1989 : vec4<f32> = u_xlat2;
  let x_1992 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat22.x = dot(vec3<f32>(x_1989.x, x_1989.y, x_1989.z), vec3<f32>(x_1992.x, x_1992.y, x_1992.z));
  let x_1997 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1997, 0.0f, 1.0f);
  let x_2000 : f32 = u_xlat63;
  let x_2002 : f32 = u_xlat22.x;
  u_xlat63 = (x_2000 * x_2002);
  let x_2004 : f32 = u_xlat63;
  let x_2006 : vec4<f32> = u_xlat7;
  u_xlat22 = (vec3<f32>(x_2004, x_2004, x_2004) * vec3<f32>(x_2006.x, x_2006.y, x_2006.z));
  let x_2009 : vec3<f32> = u_xlat3;
  let x_2011 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2013 : vec3<f32> = (x_2009 + vec3<f32>(x_2011.x, x_2011.y, x_2011.z));
  let x_2014 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2013.x, x_2013.y, x_2013.z, x_2014.w);
  let x_2016 : vec4<f32> = u_xlat7;
  let x_2018 : vec4<f32> = u_xlat7;
  u_xlat63 = dot(vec3<f32>(x_2016.x, x_2016.y, x_2016.z), vec3<f32>(x_2018.x, x_2018.y, x_2018.z));
  let x_2021 : f32 = u_xlat63;
  u_xlat63 = max(x_2021, 1.17549435e-37f);
  let x_2024 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_2024);
  let x_2026 : f32 = u_xlat63;
  let x_2028 : vec4<f32> = u_xlat7;
  let x_2030 : vec3<f32> = (vec3<f32>(x_2026, x_2026, x_2026) * vec3<f32>(x_2028.x, x_2028.y, x_2028.z));
  let x_2031 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2030.x, x_2030.y, x_2030.z, x_2031.w);
  let x_2033 : vec4<f32> = u_xlat2;
  let x_2035 : vec4<f32> = u_xlat7;
  u_xlat63 = dot(vec3<f32>(x_2033.x, x_2033.y, x_2033.z), vec3<f32>(x_2035.x, x_2035.y, x_2035.z));
  let x_2038 : f32 = u_xlat63;
  u_xlat63 = clamp(x_2038, 0.0f, 1.0f);
  let x_2041 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2043 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_2041.x, x_2041.y, x_2041.z), vec3<f32>(x_2043.x, x_2043.y, x_2043.z));
  let x_2046 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2046, 0.0f, 1.0f);
  let x_2048 : f32 = u_xlat63;
  let x_2049 : f32 = u_xlat63;
  u_xlat63 = (x_2048 * x_2049);
  let x_2051 : f32 = u_xlat63;
  let x_2053 : f32 = u_xlat1.x;
  u_xlat63 = ((x_2051 * x_2053) + 1.000010014f);
  let x_2057 : f32 = u_xlat65;
  let x_2058 : f32 = u_xlat65;
  u_xlat65 = (x_2057 * x_2058);
  let x_2060 : f32 = u_xlat63;
  let x_2061 : f32 = u_xlat63;
  u_xlat63 = (x_2060 * x_2061);
  let x_2063 : f32 = u_xlat65;
  u_xlat65 = max(x_2063, 0.100000001f);
  let x_2066 : f32 = u_xlat63;
  let x_2067 : f32 = u_xlat65;
  u_xlat63 = (x_2066 * x_2067);
  let x_2069 : f32 = u_xlat66;
  let x_2070 : f32 = u_xlat63;
  u_xlat63 = (x_2069 * x_2070);
  let x_2072 : f32 = u_xlat67;
  let x_2073 : f32 = u_xlat63;
  u_xlat63 = (x_2072 / x_2073);
  let x_2075 : vec4<f32> = u_xlat0;
  let x_2077 : f32 = u_xlat63;
  let x_2080 : vec3<f32> = u_xlat6;
  let x_2081 : vec3<f32> = ((vec3<f32>(x_2075.x, x_2075.y, x_2075.z) * vec3<f32>(x_2077, x_2077, x_2077)) + x_2080);
  let x_2082 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2081.x, x_2081.y, x_2081.z, x_2082.w);
  let x_2084 : vec3<f32> = u_xlat22;
  let x_2085 : vec4<f32> = u_xlat7;
  u_xlat22 = (x_2084 * vec3<f32>(x_2085.x, x_2085.y, x_2085.z));
  let x_2089 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2091 : f32 = x_335.unity_LightData.y;
  u_xlat63 = min(x_2089, x_2091);
  let x_2094 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_2094));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2106 : u32 = u_xlatu_loop_1;
    let x_2107 : u32 = u_xlatu63;
    if ((x_2106 < x_2107)) {
    } else {
      break;
    }
    let x_2110 : u32 = u_xlatu_loop_1;
    u_xlatu47 = (x_2110 >> 2u);
    let x_2113 : u32 = u_xlatu_loop_1;
    u_xlati68 = bitcast<i32>((x_2113 & 3u));
    let x_2116 : u32 = u_xlatu47;
    let x_2119 : vec4<f32> = x_335.unity_LightIndices[bitcast<i32>(x_2116)];
    let x_2129 : i32 = u_xlati68;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2134 : vec4<u32> = indexable[x_2129];
    u_xlat47.x = dot(x_2119, bitcast<vec4<f32>>(x_2134));
    let x_2140 : f32 = u_xlat47.x;
    u_xlati47 = i32(x_2140);
    let x_2142 : vec3<f32> = vs_TEXCOORD7;
    let x_2154 : i32 = u_xlati47;
    let x_2156 : vec4<f32> = x_2153.x_AdditionalLightsPosition[x_2154];
    let x_2159 : i32 = u_xlati47;
    let x_2161 : vec4<f32> = x_2153.x_AdditionalLightsPosition[x_2159];
    let x_2163 : vec3<f32> = ((-(x_2142) * vec3<f32>(x_2156.w, x_2156.w, x_2156.w)) + vec3<f32>(x_2161.x, x_2161.y, x_2161.z));
    let x_2164 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2163.x, x_2163.y, x_2163.z, x_2164.w);
    let x_2166 : vec4<f32> = u_xlat8;
    let x_2168 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2166.x, x_2166.y, x_2166.z), vec3<f32>(x_2168.x, x_2168.y, x_2168.z));
    let x_2171 : f32 = u_xlat68;
    u_xlat68 = max(x_2171, 6.10351562e-05f);
    let x_2174 : f32 = u_xlat68;
    u_xlat69 = inverseSqrt(x_2174);
    let x_2176 : f32 = u_xlat69;
    let x_2178 : vec4<f32> = u_xlat8;
    let x_2180 : vec3<f32> = (vec3<f32>(x_2176, x_2176, x_2176) * vec3<f32>(x_2178.x, x_2178.y, x_2178.z));
    let x_2181 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2180.x, x_2180.y, x_2180.z, x_2181.w);
    let x_2184 : f32 = u_xlat68;
    u_xlat70 = (1.0f / x_2184);
    let x_2186 : f32 = u_xlat68;
    let x_2187 : i32 = u_xlati47;
    let x_2189 : f32 = x_2153.x_AdditionalLightsAttenuation[x_2187].x;
    u_xlat68 = (x_2186 * x_2189);
    let x_2191 : f32 = u_xlat68;
    let x_2193 : f32 = u_xlat68;
    u_xlat68 = ((-(x_2191) * x_2193) + 1.0f);
    let x_2196 : f32 = u_xlat68;
    u_xlat68 = max(x_2196, 0.0f);
    let x_2198 : f32 = u_xlat68;
    let x_2199 : f32 = u_xlat68;
    u_xlat68 = (x_2198 * x_2199);
    let x_2201 : f32 = u_xlat68;
    let x_2202 : f32 = u_xlat70;
    u_xlat68 = (x_2201 * x_2202);
    let x_2204 : i32 = u_xlati47;
    let x_2206 : vec4<f32> = x_2153.x_AdditionalLightsSpotDir[x_2204];
    let x_2208 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_2206.x, x_2206.y, x_2206.z), vec3<f32>(x_2208.x, x_2208.y, x_2208.z));
    let x_2211 : f32 = u_xlat70;
    let x_2212 : i32 = u_xlati47;
    let x_2214 : f32 = x_2153.x_AdditionalLightsAttenuation[x_2212].z;
    let x_2216 : i32 = u_xlati47;
    let x_2218 : f32 = x_2153.x_AdditionalLightsAttenuation[x_2216].w;
    u_xlat70 = ((x_2211 * x_2214) + x_2218);
    let x_2220 : f32 = u_xlat70;
    u_xlat70 = clamp(x_2220, 0.0f, 1.0f);
    let x_2222 : f32 = u_xlat70;
    let x_2223 : f32 = u_xlat70;
    u_xlat70 = (x_2222 * x_2223);
    let x_2225 : f32 = u_xlat68;
    let x_2226 : f32 = u_xlat70;
    u_xlat68 = (x_2225 * x_2226);
    let x_2228 : f32 = u_xlat26;
    let x_2230 : i32 = u_xlati47;
    let x_2232 : vec4<f32> = x_2153.x_AdditionalLightsColor[x_2230];
    let x_2234 : vec3<f32> = (vec3<f32>(x_2228, x_2228, x_2228) * vec3<f32>(x_2232.x, x_2232.y, x_2232.z));
    let x_2235 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2234.x, x_2234.y, x_2234.z, x_2235.w);
    let x_2237 : vec4<f32> = u_xlat2;
    let x_2239 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(vec3<f32>(x_2237.x, x_2237.y, x_2237.z), vec3<f32>(x_2239.x, x_2239.y, x_2239.z));
    let x_2244 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_2244, 0.0f, 1.0f);
    let x_2248 : f32 = u_xlat47.x;
    let x_2249 : f32 = u_xlat68;
    u_xlat47.x = (x_2248 * x_2249);
    let x_2252 : vec2<f32> = u_xlat47;
    let x_2254 : vec4<f32> = u_xlat10;
    let x_2256 : vec3<f32> = (vec3<f32>(x_2252.x, x_2252.x, x_2252.x) * vec3<f32>(x_2254.x, x_2254.y, x_2254.z));
    let x_2257 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2256.x, x_2256.y, x_2256.z, x_2257.w);
    let x_2259 : vec4<f32> = u_xlat8;
    let x_2261 : f32 = u_xlat69;
    let x_2264 : vec3<f32> = u_xlat3;
    let x_2265 : vec3<f32> = ((vec3<f32>(x_2259.x, x_2259.y, x_2259.z) * vec3<f32>(x_2261, x_2261, x_2261)) + x_2264);
    let x_2266 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2265.x, x_2265.y, x_2265.z, x_2266.w);
    let x_2268 : vec4<f32> = u_xlat8;
    let x_2270 : vec4<f32> = u_xlat8;
    u_xlat47.x = dot(vec3<f32>(x_2268.x, x_2268.y, x_2268.z), vec3<f32>(x_2270.x, x_2270.y, x_2270.z));
    let x_2275 : f32 = u_xlat47.x;
    u_xlat47.x = max(x_2275, 1.17549435e-37f);
    let x_2279 : f32 = u_xlat47.x;
    u_xlat47.x = inverseSqrt(x_2279);
    let x_2282 : vec2<f32> = u_xlat47;
    let x_2284 : vec4<f32> = u_xlat8;
    let x_2286 : vec3<f32> = (vec3<f32>(x_2282.x, x_2282.x, x_2282.x) * vec3<f32>(x_2284.x, x_2284.y, x_2284.z));
    let x_2287 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2286.x, x_2286.y, x_2286.z, x_2287.w);
    let x_2289 : vec4<f32> = u_xlat2;
    let x_2291 : vec4<f32> = u_xlat8;
    u_xlat47.x = dot(vec3<f32>(x_2289.x, x_2289.y, x_2289.z), vec3<f32>(x_2291.x, x_2291.y, x_2291.z));
    let x_2296 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_2296, 0.0f, 1.0f);
    let x_2299 : vec4<f32> = u_xlat9;
    let x_2301 : vec4<f32> = u_xlat8;
    u_xlat47.y = dot(vec3<f32>(x_2299.x, x_2299.y, x_2299.z), vec3<f32>(x_2301.x, x_2301.y, x_2301.z));
    let x_2306 : f32 = u_xlat47.y;
    u_xlat47.y = clamp(x_2306, 0.0f, 1.0f);
    let x_2309 : vec2<f32> = u_xlat47;
    let x_2310 : vec2<f32> = u_xlat47;
    u_xlat47 = (x_2309 * x_2310);
    let x_2313 : f32 = u_xlat47.x;
    let x_2315 : f32 = u_xlat1.x;
    u_xlat47.x = ((x_2313 * x_2315) + 1.000010014f);
    let x_2320 : f32 = u_xlat47.x;
    let x_2322 : f32 = u_xlat47.x;
    u_xlat47.x = (x_2320 * x_2322);
    let x_2326 : f32 = u_xlat47.y;
    u_xlat68 = max(x_2326, 0.100000001f);
    let x_2328 : f32 = u_xlat68;
    let x_2330 : f32 = u_xlat47.x;
    u_xlat47.x = (x_2328 * x_2330);
    let x_2333 : f32 = u_xlat66;
    let x_2335 : f32 = u_xlat47.x;
    u_xlat47.x = (x_2333 * x_2335);
    let x_2338 : f32 = u_xlat67;
    let x_2340 : f32 = u_xlat47.x;
    u_xlat47.x = (x_2338 / x_2340);
    let x_2343 : vec4<f32> = u_xlat0;
    let x_2345 : vec2<f32> = u_xlat47;
    let x_2348 : vec3<f32> = u_xlat6;
    let x_2349 : vec3<f32> = ((vec3<f32>(x_2343.x, x_2343.y, x_2343.z) * vec3<f32>(x_2345.x, x_2345.x, x_2345.x)) + x_2348);
    let x_2350 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2349.x, x_2349.y, x_2349.z, x_2350.w);
    let x_2352 : vec4<f32> = u_xlat8;
    let x_2354 : vec4<f32> = u_xlat10;
    let x_2357 : vec4<f32> = u_xlat7;
    let x_2359 : vec3<f32> = ((vec3<f32>(x_2352.x, x_2352.y, x_2352.z) * vec3<f32>(x_2354.x, x_2354.y, x_2354.z)) + vec3<f32>(x_2357.x, x_2357.y, x_2357.z));
    let x_2360 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2359.x, x_2359.y, x_2359.z, x_2360.w);

    continuing {
      let x_2362 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2362 + bitcast<u32>(1i));
    }
  }
  let x_2364 : vec3<f32> = u_xlat4;
  let x_2365 : vec4<f32> = u_xlat5;
  let x_2368 : vec3<f32> = u_xlat22;
  let x_2369 : vec3<f32> = ((x_2364 * vec3<f32>(x_2365.x, x_2365.x, x_2365.x)) + x_2368);
  let x_2370 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2369.x, x_2369.y, x_2369.z, x_2370.w);
  let x_2374 : vec4<f32> = u_xlat7;
  let x_2376 : vec4<f32> = u_xlat0;
  let x_2378 : vec3<f32> = (vec3<f32>(x_2374.x, x_2374.y, x_2374.z) + vec3<f32>(x_2376.x, x_2376.y, x_2376.z));
  let x_2379 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2378.x, x_2378.y, x_2378.z, x_2379.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_TEXCOORD7_param : vec3<f32>, @location(1) vs_TEXCOORD3_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  main_1();
  return main_out(SV_Target0);
}

