type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var x_255 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var x_541 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var x_813 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var x_1080 : vec3<f32>;
  var u_xlatb11 : bool;
  var x_1328 : vec3<f32>;
  var x_1593 : vec3<f32>;
  var x_1845 : vec3<f32>;
  var x_2109 : vec3<f32>;
  var x_2361 : vec3<f32>;
  var x_2626 : vec3<f32>;
  var x_2878 : vec3<f32>;
  var x_3144 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_108 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_110 : vec2<f32> = vs_TEXCOORD0;
  let x_115 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_108.x, x_108.y, x_108.z) * vec3<f32>(x_110.x, x_110.x, x_110.x)) + vec3<f32>(x_115.x, x_115.y, x_115.z));
  let x_120 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_122 : vec2<f32> = u_xlat14;
  let x_125 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_120.x, x_120.y, x_120.z) * vec3<f32>(x_122.x, x_122.x, x_122.x)) + x_125);
  let x_129 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_131 : f32 = u_xlat21;
  let x_134 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_129.x, x_129.y, x_129.z) * vec3<f32>(x_131, x_131, x_131)) + x_134);
  let x_137 : vec3<f32> = u_xlat1;
  u_xlat2 = dpdyCoarse(vec3<f32>(x_137.z, x_137.x, x_137.y));
  let x_142 : vec3<f32> = u_xlat1;
  let x_144 : vec3<f32> = dpdxCoarse(vec3<f32>(x_142.y, x_142.z, x_142.x));
  let x_145 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec3<f32> = u_xlat2;
  let x_149 : vec4<f32> = u_xlat3;
  u_xlat4 = (x_148 * vec3<f32>(x_149.x, x_149.y, x_149.z));
  let x_152 : vec3<f32> = u_xlat2;
  let x_154 : vec4<f32> = u_xlat3;
  let x_157 : vec3<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_152.z, x_152.x, x_152.y) * vec3<f32>(x_154.y, x_154.z, x_154.x)) + -(x_157));
  let x_160 : vec3<f32> = u_xlat2;
  let x_161 : vec3<f32> = u_xlat2;
  u_xlat14.x = dot(x_160, x_161);
  let x_165 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_165);
  let x_168 : vec2<f32> = u_xlat14;
  let x_170 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_168.x, x_168.x, x_168.x) * x_170);
  let x_172 : vec2<f32> = vs_TEXCOORD0;
  let x_174 : vec4<f32> = x_34.x_ScaledScreenParams;
  u_xlat14 = (x_172 * vec2<f32>(x_174.x, x_174.y));
  let x_177 : vec2<f32> = u_xlat14;
  let x_179 : vec4<f32> = x_34.x_SSAOParams;
  let x_181 : vec2<f32> = (x_177 * vec2<f32>(x_179.z, x_179.z));
  let x_182 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_181.x, x_181.y, x_182.z, x_182.w);
  let x_185 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec2<f32>(x_185.x, x_185.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_191 : f32 = u_xlat22;
  u_xlat22 = fract(x_191);
  let x_193 : f32 = u_xlat22;
  u_xlat22 = (x_193 * 52.982917786f);
  let x_196 : f32 = u_xlat22;
  u_xlat22 = fract(x_196);
  let x_199 : f32 = u_xlat22;
  u_xlat23 = fract(x_199);
  let x_201 : f32 = u_xlat23;
  u_xlat3.z = ((x_201 * 2.0f) + -1.0f);
  let x_207 : f32 = u_xlat22;
  u_xlat22 = (x_207 + 0.9296875f);
  let x_210 : f32 = u_xlat22;
  u_xlat22 = (x_210 * 6.283185482f);
  let x_214 : f32 = u_xlat3.z;
  let x_217 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_214) * x_217) + 1.0f);
  let x_220 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_220);
  let x_222 : f32 = u_xlat22;
  u_xlat4.x = sin(x_222);
  let x_226 : f32 = u_xlat22;
  u_xlat5.x = cos(x_226);
  let x_229 : f32 = u_xlat23;
  let x_231 : f32 = u_xlat5.x;
  u_xlat3.x = (x_229 * x_231);
  let x_234 : f32 = u_xlat23;
  let x_236 : f32 = u_xlat4.x;
  u_xlat3.y = (x_234 * x_236);
  let x_239 : vec4<f32> = u_xlat3;
  let x_243 : vec3<f32> = (vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(0.288675129f, 0.288675129f, 0.288675129f));
  let x_244 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_243.x, x_243.y, x_243.z, x_244.w);
  let x_246 : vec3<f32> = u_xlat2;
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(-(x_246), vec3<f32>(x_248.x, x_248.y, x_248.z));
  let x_252 : f32 = u_xlat22;
  u_xlatb22 = (x_252 >= 0.0f);
  let x_254 : bool = u_xlatb22;
  if (x_254) {
    let x_258 : vec4<f32> = u_xlat3;
    x_255 = -(vec3<f32>(x_258.x, x_258.y, x_258.z));
  } else {
    let x_262 : vec4<f32> = u_xlat3;
    x_255 = vec3<f32>(x_262.x, x_262.y, x_262.z);
  }
  let x_264 : vec3<f32> = x_255;
  let x_265 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_264.x, x_264.y, x_264.z, x_265.w);
  let x_267 : vec4<f32> = u_xlat3;
  let x_270 : vec4<f32> = x_34.x_SSAOParams;
  let x_273 : vec3<f32> = u_xlat1;
  let x_274 : vec3<f32> = ((vec3<f32>(x_267.x, x_267.y, x_267.z) * vec3<f32>(x_270.y, x_270.y, x_270.y)) + x_273);
  let x_275 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_278 : vec4<f32> = u_xlat3;
  let x_282 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_284 : vec2<f32> = (vec2<f32>(x_278.y, x_278.y) * vec2<f32>(x_282.x, x_282.y));
  let x_285 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_284.x, x_285.y, x_284.y);
  let x_288 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_290 : vec4<f32> = u_xlat3;
  let x_293 : vec3<f32> = u_xlat10;
  let x_295 : vec2<f32> = ((vec2<f32>(x_288.x, x_288.y) * vec2<f32>(x_290.x, x_290.x)) + vec2<f32>(x_293.x, x_293.z));
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_295.x, x_295.y, x_296.z, x_296.w);
  let x_299 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_301 : vec4<f32> = u_xlat3;
  let x_304 : vec4<f32> = u_xlat3;
  let x_306 : vec2<f32> = ((vec2<f32>(x_299.x, x_299.y) * vec2<f32>(x_301.z, x_301.z)) + vec2<f32>(x_304.x, x_304.y));
  let x_307 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_306.x, x_306.y, x_307.z, x_307.w);
  let x_309 : vec4<f32> = u_xlat3;
  let x_312 : vec2<f32> = (vec2<f32>(x_309.x, x_309.y) + vec2<f32>(1.0f, 1.0f));
  let x_313 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_312.x, x_312.y, x_313.z, x_313.w);
  let x_315 : vec4<f32> = u_xlat3;
  let x_318 : vec2<f32> = (vec2<f32>(x_315.x, x_315.y) * vec2<f32>(0.5f, 0.5f));
  let x_319 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_318.x, x_318.y, x_319.z, x_319.w);
  let x_321 : vec4<f32> = u_xlat3;
  let x_325 : vec2<f32> = clamp(vec2<f32>(x_321.x, x_321.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_326 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_325.x, x_325.y, x_326.z, x_326.w);
  let x_331 : vec4<f32> = u_xlat3;
  let x_334 : f32 = x_34.x_GlobalMipBias.x;
  let x_335 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_331.x, x_331.y), x_334);
  u_xlat22 = x_335.x;
  let x_338 : f32 = u_xlat7.x;
  let x_340 : f32 = u_xlat22;
  let x_343 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_338) * x_340) + x_343);
  let x_346 : f32 = u_xlat0;
  let x_347 : f32 = u_xlat23;
  u_xlat17 = (x_346 + -(x_347));
  let x_351 : f32 = u_xlat17;
  let x_354 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_351) < x_354);
  let x_356 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_356);
  let x_358 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_358);
  let x_360 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_360);
  let x_362 : f32 = u_xlat22;
  let x_363 : f32 = u_xlat17;
  u_xlat22 = (x_362 * x_363);
  let x_366 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_366) + 1.0f);
  let x_370 : f32 = u_xlat23;
  let x_372 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_370 * x_372);
  let x_375 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_377 : vec4<f32> = u_xlat3;
  let x_381 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_383 : vec3<f32> = ((vec3<f32>(x_375.x, x_375.y, x_375.z) * vec3<f32>(x_377.x, x_377.x, x_377.x)) + vec3<f32>(x_381.x, x_381.y, x_381.z));
  let x_384 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_383.x, x_384.y, x_383.y, x_383.z);
  let x_387 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_389 : vec3<f32> = u_xlat10;
  let x_392 : vec4<f32> = u_xlat3;
  let x_394 : vec3<f32> = ((vec3<f32>(x_387.x, x_387.y, x_387.z) * vec3<f32>(x_389.x, x_389.x, x_389.x)) + vec3<f32>(x_392.x, x_392.z, x_392.w));
  let x_395 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_394.x, x_394.y, x_394.z, x_395.w);
  let x_398 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_400 : f32 = u_xlat23;
  let x_403 : vec4<f32> = u_xlat3;
  let x_405 : vec3<f32> = ((vec3<f32>(x_398.x, x_398.y, x_398.z) * vec3<f32>(x_400, x_400, x_400)) + vec3<f32>(x_403.x, x_403.y, x_403.z));
  let x_406 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_405.x, x_405.y, x_405.z, x_406.w);
  let x_408 : vec3<f32> = u_xlat1;
  let x_410 : vec4<f32> = u_xlat3;
  let x_412 : vec3<f32> = (-(x_408) + vec3<f32>(x_410.x, x_410.y, x_410.z));
  let x_413 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_412.x, x_412.y, x_412.z, x_413.w);
  let x_415 : vec4<f32> = u_xlat3;
  let x_417 : vec3<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_415.x, x_415.y, x_415.z), x_417);
  let x_419 : f32 = u_xlat0;
  let x_423 : f32 = u_xlat23;
  u_xlat23 = ((-(x_419) * 0.004f) + x_423);
  let x_425 : f32 = u_xlat23;
  u_xlat23 = max(x_425, 0.0f);
  let x_427 : vec4<f32> = u_xlat3;
  let x_429 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_427.x, x_427.y, x_427.z), vec3<f32>(x_429.x, x_429.y, x_429.z));
  let x_434 : f32 = u_xlat3.x;
  u_xlat3.x = (x_434 + 0.0001f);
  let x_439 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_439);
  let x_442 : f32 = u_xlat23;
  let x_444 : f32 = u_xlat3.x;
  u_xlat23 = (x_442 * x_444);
  let x_446 : vec2<f32> = u_xlat14;
  let x_449 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_446.x, x_446.y, x_446.x, x_446.y) * vec4<f32>(x_449.z, x_449.z, x_449.z, x_449.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_458 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec2<f32>(x_458.x, x_458.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_463 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_463);
  let x_467 : f32 = u_xlat3.x;
  u_xlat3.x = (x_467 * 52.982917786f);
  let x_471 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_471);
  let x_474 : vec4<f32> = u_xlat3;
  let x_479 : vec2<f32> = (vec2<f32>(x_474.x, x_474.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_480 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_479.x, x_479.y, x_480.z, x_480.w);
  let x_483 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_483);
  let x_487 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_487 * 2.0f) + -1.0f);
  let x_492 : f32 = u_xlat3.y;
  u_xlat3.x = (x_492 * 6.283185482f);
  let x_496 : f32 = u_xlat4.z;
  let x_499 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_496) * x_499) + 1.0f);
  let x_504 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_504);
  let x_508 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_508);
  let x_512 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_512);
  let x_516 : f32 = u_xlat10.x;
  let x_518 : f32 = u_xlat5.x;
  u_xlat4.x = (x_516 * x_518);
  let x_522 : f32 = u_xlat3.x;
  let x_524 : f32 = u_xlat10.x;
  u_xlat4.y = (x_522 * x_524);
  let x_527 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_527 * vec3<f32>(0.408248305f, 0.408248305f, 0.408248305f));
  let x_531 : vec3<f32> = u_xlat2;
  let x_533 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(-(x_531), x_533);
  let x_538 : f32 = u_xlat3.x;
  u_xlatb3 = (x_538 >= 0.0f);
  let x_540 : bool = u_xlatb3;
  if (x_540) {
    let x_544 : vec3<f32> = u_xlat4;
    x_541 = -(x_544);
  } else {
    let x_547 : vec3<f32> = u_xlat4;
    x_541 = x_547;
  }
  let x_548 : vec3<f32> = x_541;
  u_xlat4 = x_548;
  let x_549 : vec3<f32> = u_xlat4;
  let x_551 : vec4<f32> = x_34.x_SSAOParams;
  let x_554 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_549 * vec3<f32>(x_551.y, x_551.y, x_551.y)) + x_554);
  let x_556 : vec3<f32> = u_xlat4;
  let x_559 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_561 : vec2<f32> = (vec2<f32>(x_556.y, x_556.y) * vec2<f32>(x_559.x, x_559.y));
  let x_562 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_561.x, x_561.y, x_562.z, x_562.w);
  let x_565 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_567 : vec3<f32> = u_xlat4;
  let x_570 : vec4<f32> = u_xlat3;
  let x_572 : vec2<f32> = ((vec2<f32>(x_565.x, x_565.y) * vec2<f32>(x_567.x, x_567.x)) + vec2<f32>(x_570.x, x_570.y));
  let x_573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_572.x, x_572.y, x_573.z, x_573.w);
  let x_576 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_578 : vec3<f32> = u_xlat4;
  let x_581 : vec4<f32> = u_xlat3;
  let x_583 : vec2<f32> = ((vec2<f32>(x_576.x, x_576.y) * vec2<f32>(x_578.z, x_578.z)) + vec2<f32>(x_581.x, x_581.y));
  let x_584 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_583.x, x_583.y, x_584.z, x_584.w);
  let x_586 : vec4<f32> = u_xlat3;
  let x_588 : vec2<f32> = (vec2<f32>(x_586.x, x_586.y) + vec2<f32>(1.0f, 1.0f));
  let x_589 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_588.x, x_588.y, x_589.z, x_589.w);
  let x_591 : vec4<f32> = u_xlat3;
  let x_593 : vec2<f32> = (vec2<f32>(x_591.x, x_591.y) * vec2<f32>(0.5f, 0.5f));
  let x_594 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
  let x_596 : vec4<f32> = u_xlat3;
  let x_600 : vec2<f32> = clamp(vec2<f32>(x_596.x, x_596.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_601 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_600.x, x_600.y, x_601.z, x_601.w);
  let x_606 : vec4<f32> = u_xlat3;
  let x_609 : f32 = x_34.x_GlobalMipBias.x;
  let x_610 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_606.x, x_606.y), x_609);
  u_xlat4.x = x_610.x;
  let x_615 : f32 = u_xlat7.x;
  let x_618 : f32 = u_xlat4.x;
  let x_621 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_615) * x_618) + x_621);
  let x_625 : f32 = u_xlat0;
  let x_627 : f32 = u_xlat11.x;
  u_xlat18 = (x_625 + -(x_627));
  let x_633 : f32 = u_xlat18;
  let x_636 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_633) < x_636);
  let x_640 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_640);
  let x_644 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_644);
  let x_648 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_648);
  let x_652 : f32 = u_xlat4.x;
  let x_654 : f32 = u_xlat4.z;
  u_xlat4.x = (x_652 * x_654);
  let x_658 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_658) + 1.0f);
  let x_663 : f32 = u_xlat11.x;
  let x_665 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_663 * x_665);
  let x_669 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_671 : vec4<f32> = u_xlat3;
  let x_675 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_669.x, x_669.y, x_669.z) * vec3<f32>(x_671.x, x_671.x, x_671.x)) + vec3<f32>(x_675.x, x_675.y, x_675.z));
  let x_679 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_681 : vec3<f32> = u_xlat10;
  let x_684 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_679.x, x_679.y, x_679.z) * vec3<f32>(x_681.x, x_681.x, x_681.x)) + x_684);
  let x_687 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_689 : vec3<f32> = u_xlat11;
  let x_692 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_687.x, x_687.y, x_687.z) * vec3<f32>(x_689.x, x_689.x, x_689.x)) + x_692);
  let x_694 : vec3<f32> = u_xlat1;
  let x_696 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_694) + x_696);
  let x_698 : vec3<f32> = u_xlat11;
  let x_699 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_698, x_699);
  let x_702 : f32 = u_xlat0;
  let x_706 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_702) * 0.004f) + x_706);
  let x_710 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_710, 0.0f);
  let x_713 : vec3<f32> = u_xlat11;
  let x_714 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_713, x_714);
  let x_718 : f32 = u_xlat10.x;
  u_xlat10.x = (x_718 + 0.0001f);
  let x_722 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_722);
  let x_726 : f32 = u_xlat10.x;
  let x_728 : f32 = u_xlat3.x;
  u_xlat3.x = (x_726 * x_728);
  let x_732 : f32 = u_xlat4.x;
  let x_734 : f32 = u_xlat3.x;
  u_xlat3.x = (x_732 * x_734);
  let x_737 : f32 = u_xlat23;
  let x_738 : f32 = u_xlat22;
  let x_741 : f32 = u_xlat3.x;
  u_xlat22 = ((x_737 * x_738) + x_741);
  let x_743 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_743.z, x_743.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_746 : f32 = u_xlat23;
  u_xlat23 = fract(x_746);
  let x_748 : f32 = u_xlat23;
  u_xlat23 = (x_748 * 52.982917786f);
  let x_750 : f32 = u_xlat23;
  u_xlat23 = fract(x_750);
  let x_752 : f32 = u_xlat23;
  let x_757 : vec2<f32> = (vec2<f32>(x_752, x_752) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_758 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_757.x, x_757.y, x_758.z, x_758.w);
  let x_761 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_761);
  let x_763 : f32 = u_xlat23;
  u_xlat4.z = ((x_763 * 2.0f) + -1.0f);
  let x_768 : f32 = u_xlat3.y;
  u_xlat23 = (x_768 * 6.283185482f);
  let x_771 : f32 = u_xlat4.z;
  let x_774 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_771) * x_774) + 1.0f);
  let x_779 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_779);
  let x_782 : f32 = u_xlat23;
  u_xlat5.x = sin(x_782);
  let x_786 : f32 = u_xlat23;
  u_xlat6 = cos(x_786);
  let x_789 : f32 = u_xlat3.x;
  let x_790 : f32 = u_xlat6;
  u_xlat4.x = (x_789 * x_790);
  let x_794 : f32 = u_xlat3.x;
  let x_796 : f32 = u_xlat5.x;
  u_xlat4.y = (x_794 * x_796);
  let x_799 : vec3<f32> = u_xlat4;
  let x_801 : vec3<f32> = (x_799 * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_802 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_801.x, x_801.y, x_801.z, x_802.w);
  let x_804 : vec3<f32> = u_xlat2;
  let x_806 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_804), vec3<f32>(x_806.x, x_806.y, x_806.z));
  let x_810 : f32 = u_xlat23;
  u_xlatb23 = (x_810 >= 0.0f);
  let x_812 : bool = u_xlatb23;
  if (x_812) {
    let x_816 : vec4<f32> = u_xlat3;
    x_813 = -(vec3<f32>(x_816.x, x_816.y, x_816.z));
  } else {
    let x_820 : vec4<f32> = u_xlat3;
    x_813 = vec3<f32>(x_820.x, x_820.y, x_820.z);
  }
  let x_822 : vec3<f32> = x_813;
  let x_823 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_822.x, x_822.y, x_822.z, x_823.w);
  let x_825 : vec4<f32> = u_xlat3;
  let x_828 : vec4<f32> = x_34.x_SSAOParams;
  let x_831 : vec3<f32> = u_xlat1;
  let x_832 : vec3<f32> = ((vec3<f32>(x_825.x, x_825.y, x_825.z) * vec3<f32>(x_828.y, x_828.y, x_828.y)) + x_831);
  let x_833 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_832.x, x_832.y, x_832.z, x_833.w);
  let x_835 : vec4<f32> = u_xlat3;
  let x_838 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_840 : vec2<f32> = (vec2<f32>(x_835.y, x_835.y) * vec2<f32>(x_838.x, x_838.y));
  let x_841 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_840.x, x_841.y, x_840.y);
  let x_844 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_846 : vec4<f32> = u_xlat3;
  let x_849 : vec3<f32> = u_xlat10;
  let x_851 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_846.x, x_846.x)) + vec2<f32>(x_849.x, x_849.z));
  let x_852 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_851.x, x_851.y, x_852.z, x_852.w);
  let x_855 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_857 : vec4<f32> = u_xlat3;
  let x_860 : vec4<f32> = u_xlat3;
  let x_862 : vec2<f32> = ((vec2<f32>(x_855.x, x_855.y) * vec2<f32>(x_857.z, x_857.z)) + vec2<f32>(x_860.x, x_860.y));
  let x_863 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_862.x, x_862.y, x_863.z, x_863.w);
  let x_865 : vec4<f32> = u_xlat3;
  let x_867 : vec2<f32> = (vec2<f32>(x_865.x, x_865.y) + vec2<f32>(1.0f, 1.0f));
  let x_868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_867.x, x_867.y, x_868.z, x_868.w);
  let x_870 : vec4<f32> = u_xlat3;
  let x_872 : vec2<f32> = (vec2<f32>(x_870.x, x_870.y) * vec2<f32>(0.5f, 0.5f));
  let x_873 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_872.x, x_872.y, x_873.z, x_873.w);
  let x_875 : vec4<f32> = u_xlat3;
  let x_879 : vec2<f32> = clamp(vec2<f32>(x_875.x, x_875.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_879.x, x_879.y, x_880.z, x_880.w);
  let x_885 : vec4<f32> = u_xlat3;
  let x_888 : f32 = x_34.x_GlobalMipBias.x;
  let x_889 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_885.x, x_885.y), x_888);
  u_xlat23 = x_889.x;
  let x_892 : f32 = u_xlat7.x;
  let x_894 : f32 = u_xlat23;
  let x_897 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_892) * x_894) + x_897);
  let x_900 : f32 = u_xlat0;
  let x_901 : f32 = u_xlat17;
  u_xlat24 = (x_900 + -(x_901));
  let x_905 : f32 = u_xlat24;
  let x_908 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_905) < x_908);
  let x_910 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_910);
  let x_912 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_912);
  let x_914 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_914);
  let x_916 : f32 = u_xlat23;
  let x_917 : f32 = u_xlat24;
  u_xlat23 = (x_916 * x_917);
  let x_920 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_920) + 1.0f);
  let x_924 : f32 = u_xlat17;
  let x_926 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_924 * x_926);
  let x_929 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_931 : vec4<f32> = u_xlat3;
  let x_935 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_929.x, x_929.y, x_929.z) * vec3<f32>(x_931.x, x_931.x, x_931.x)) + vec3<f32>(x_935.x, x_935.y, x_935.z));
  let x_939 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_941 : vec3<f32> = u_xlat10;
  let x_944 : vec3<f32> = u_xlat4;
  let x_945 : vec3<f32> = ((vec3<f32>(x_939.x, x_939.y, x_939.z) * vec3<f32>(x_941.x, x_941.x, x_941.x)) + x_944);
  let x_946 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_945.x, x_945.y, x_946.z, x_945.z);
  let x_949 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_951 : f32 = u_xlat17;
  let x_954 : vec4<f32> = u_xlat3;
  let x_956 : vec3<f32> = ((vec3<f32>(x_949.x, x_949.y, x_949.z) * vec3<f32>(x_951, x_951, x_951)) + vec3<f32>(x_954.x, x_954.y, x_954.w));
  let x_957 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_956.x, x_956.y, x_956.z, x_957.w);
  let x_959 : vec3<f32> = u_xlat1;
  let x_961 : vec4<f32> = u_xlat3;
  let x_963 : vec3<f32> = (-(x_959) + vec3<f32>(x_961.x, x_961.y, x_961.z));
  let x_964 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_963.x, x_963.y, x_963.z, x_964.w);
  let x_966 : vec4<f32> = u_xlat3;
  let x_968 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_966.x, x_966.y, x_966.z), x_968);
  let x_970 : f32 = u_xlat0;
  let x_973 : f32 = u_xlat24;
  u_xlat24 = ((-(x_970) * 0.004f) + x_973);
  let x_975 : f32 = u_xlat24;
  u_xlat24 = max(x_975, 0.0f);
  let x_977 : vec4<f32> = u_xlat3;
  let x_979 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_977.x, x_977.y, x_977.z), vec3<f32>(x_979.x, x_979.y, x_979.z));
  let x_984 : f32 = u_xlat3.x;
  u_xlat3.x = (x_984 + 0.0001f);
  let x_988 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_988);
  let x_992 : f32 = u_xlat3.x;
  let x_993 : f32 = u_xlat24;
  u_xlat3.x = (x_992 * x_993);
  let x_997 : f32 = u_xlat3.x;
  let x_998 : f32 = u_xlat23;
  let x_1000 : f32 = u_xlat22;
  u_xlat22 = ((x_997 * x_998) + x_1000);
  let x_1002 : vec2<f32> = u_xlat14;
  let x_1005 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1002.x, x_1002.y, x_1002.x, x_1002.y) * vec4<f32>(x_1005.z, x_1005.z, x_1005.z, x_1005.z)) + vec4<f32>(6.248999596f, 14.600999832f, 8.331999779f, 19.468000412f));
  let x_1014 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1014.x, x_1014.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1017 : f32 = u_xlat23;
  u_xlat23 = fract(x_1017);
  let x_1019 : f32 = u_xlat23;
  u_xlat23 = (x_1019 * 52.982917786f);
  let x_1021 : f32 = u_xlat23;
  u_xlat23 = fract(x_1021);
  let x_1023 : f32 = u_xlat23;
  let x_1028 : vec2<f32> = (vec2<f32>(x_1023, x_1023) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1029 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1028.x, x_1028.y, x_1029.z, x_1029.w);
  let x_1032 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1032);
  let x_1034 : f32 = u_xlat23;
  u_xlat4.z = ((x_1034 * 2.0f) + -1.0f);
  let x_1039 : f32 = u_xlat3.y;
  u_xlat23 = (x_1039 * 6.283185482f);
  let x_1042 : f32 = u_xlat4.z;
  let x_1045 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1042) * x_1045) + 1.0f);
  let x_1050 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1050);
  let x_1053 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1053);
  let x_1056 : f32 = u_xlat23;
  u_xlat6 = cos(x_1056);
  let x_1059 : f32 = u_xlat3.x;
  let x_1060 : f32 = u_xlat6;
  u_xlat4.x = (x_1059 * x_1060);
  let x_1064 : f32 = u_xlat3.x;
  let x_1066 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1064 * x_1066);
  let x_1069 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1069 * vec3<f32>(0.577350259f, 0.577350259f, 0.577350259f));
  let x_1073 : vec3<f32> = u_xlat2;
  let x_1075 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(x_1073), x_1075);
  let x_1077 : f32 = u_xlat23;
  u_xlatb23 = (x_1077 >= 0.0f);
  let x_1079 : bool = u_xlatb23;
  if (x_1079) {
    let x_1083 : vec3<f32> = u_xlat4;
    x_1080 = -(x_1083);
  } else {
    let x_1086 : vec3<f32> = u_xlat4;
    x_1080 = x_1086;
  }
  let x_1087 : vec3<f32> = x_1080;
  u_xlat4 = x_1087;
  let x_1088 : vec3<f32> = u_xlat4;
  let x_1090 : vec4<f32> = x_34.x_SSAOParams;
  let x_1093 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1088 * vec3<f32>(x_1090.y, x_1090.y, x_1090.y)) + x_1093);
  let x_1095 : vec3<f32> = u_xlat4;
  let x_1098 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1100 : vec2<f32> = (vec2<f32>(x_1095.y, x_1095.y) * vec2<f32>(x_1098.x, x_1098.y));
  let x_1101 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1100.x, x_1100.y, x_1101.z, x_1101.w);
  let x_1104 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1106 : vec3<f32> = u_xlat4;
  let x_1109 : vec4<f32> = u_xlat3;
  let x_1111 : vec2<f32> = ((vec2<f32>(x_1104.x, x_1104.y) * vec2<f32>(x_1106.x, x_1106.x)) + vec2<f32>(x_1109.x, x_1109.y));
  let x_1112 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1111.x, x_1111.y, x_1112.z, x_1112.w);
  let x_1115 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1117 : vec3<f32> = u_xlat4;
  let x_1120 : vec4<f32> = u_xlat3;
  let x_1122 : vec2<f32> = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1117.z, x_1117.z)) + vec2<f32>(x_1120.x, x_1120.y));
  let x_1123 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1122.x, x_1122.y, x_1123.z, x_1123.w);
  let x_1125 : vec4<f32> = u_xlat3;
  let x_1127 : vec2<f32> = (vec2<f32>(x_1125.x, x_1125.y) + vec2<f32>(1.0f, 1.0f));
  let x_1128 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1127.x, x_1127.y, x_1128.z, x_1128.w);
  let x_1130 : vec4<f32> = u_xlat3;
  let x_1132 : vec2<f32> = (vec2<f32>(x_1130.x, x_1130.y) * vec2<f32>(0.5f, 0.5f));
  let x_1133 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1132.x, x_1132.y, x_1133.z, x_1133.w);
  let x_1135 : vec4<f32> = u_xlat3;
  let x_1139 : vec2<f32> = clamp(vec2<f32>(x_1135.x, x_1135.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1140 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1139.x, x_1139.y, x_1140.z, x_1140.w);
  let x_1145 : vec4<f32> = u_xlat3;
  let x_1148 : f32 = x_34.x_GlobalMipBias.x;
  let x_1149 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1145.x, x_1145.y), x_1148);
  u_xlat23 = x_1149.x;
  let x_1152 : f32 = u_xlat7.x;
  let x_1154 : f32 = u_xlat23;
  let x_1157 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1152) * x_1154) + x_1157);
  let x_1160 : f32 = u_xlat0;
  let x_1162 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1160 + -(x_1162));
  let x_1168 : f32 = u_xlat11.x;
  let x_1171 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1168) < x_1171);
  let x_1173 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1173);
  let x_1176 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1176);
  let x_1178 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1178);
  let x_1180 : f32 = u_xlat23;
  let x_1182 : f32 = u_xlat11.x;
  u_xlat23 = (x_1180 * x_1182);
  let x_1185 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1185) + 1.0f);
  let x_1190 : f32 = u_xlat4.x;
  let x_1192 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1190 * x_1192);
  let x_1196 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1198 : vec4<f32> = u_xlat3;
  let x_1202 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1196.x, x_1196.y, x_1196.z) * vec3<f32>(x_1198.x, x_1198.x, x_1198.x)) + vec3<f32>(x_1202.x, x_1202.y, x_1202.z));
  let x_1206 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1208 : vec3<f32> = u_xlat10;
  let x_1211 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1206.x, x_1206.y, x_1206.z) * vec3<f32>(x_1208.x, x_1208.x, x_1208.x)) + x_1211);
  let x_1214 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1216 : vec3<f32> = u_xlat4;
  let x_1219 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1214.x, x_1214.y, x_1214.z) * vec3<f32>(x_1216.x, x_1216.x, x_1216.x)) + x_1219);
  let x_1221 : vec3<f32> = u_xlat1;
  let x_1223 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1221) + x_1223);
  let x_1225 : vec3<f32> = u_xlat4;
  let x_1226 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_1225, x_1226);
  let x_1229 : f32 = u_xlat0;
  let x_1233 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1229) * 0.004f) + x_1233);
  let x_1237 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1237, 0.0f);
  let x_1240 : vec3<f32> = u_xlat4;
  let x_1241 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1240, x_1241);
  let x_1245 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1245 + 0.0001f);
  let x_1249 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1249);
  let x_1253 : f32 = u_xlat10.x;
  let x_1255 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1253 * x_1255);
  let x_1259 : f32 = u_xlat3.x;
  let x_1260 : f32 = u_xlat23;
  let x_1262 : f32 = u_xlat22;
  u_xlat22 = ((x_1259 * x_1260) + x_1262);
  let x_1264 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1264.z, x_1264.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1267 : f32 = u_xlat23;
  u_xlat23 = fract(x_1267);
  let x_1269 : f32 = u_xlat23;
  u_xlat23 = (x_1269 * 52.982917786f);
  let x_1271 : f32 = u_xlat23;
  u_xlat23 = fract(x_1271);
  let x_1273 : f32 = u_xlat23;
  u_xlat3.x = (x_1273 + 0.984375f);
  let x_1278 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1278);
  let x_1282 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1282 * 2.0f) + -1.0f);
  let x_1286 : f32 = u_xlat23;
  u_xlat23 = (x_1286 * 6.283185482f);
  let x_1289 : f32 = u_xlat3.z;
  let x_1292 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1289) * x_1292) + 1.0f);
  let x_1295 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1295);
  let x_1297 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1297);
  let x_1300 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1300);
  let x_1303 : f32 = u_xlat24;
  let x_1305 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1303 * x_1305);
  let x_1308 : f32 = u_xlat24;
  let x_1310 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1308 * x_1310);
  let x_1313 : vec4<f32> = u_xlat3;
  let x_1317 : vec3<f32> = (vec3<f32>(x_1313.x, x_1313.y, x_1313.z) * vec3<f32>(0.645497262f, 0.645497262f, 0.645497262f));
  let x_1318 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1317.x, x_1317.y, x_1317.z, x_1318.w);
  let x_1320 : vec3<f32> = u_xlat2;
  let x_1322 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_1320), vec3<f32>(x_1322.x, x_1322.y, x_1322.z));
  let x_1325 : f32 = u_xlat23;
  u_xlatb23 = (x_1325 >= 0.0f);
  let x_1327 : bool = u_xlatb23;
  if (x_1327) {
    let x_1331 : vec4<f32> = u_xlat3;
    x_1328 = -(vec3<f32>(x_1331.x, x_1331.y, x_1331.z));
  } else {
    let x_1335 : vec4<f32> = u_xlat3;
    x_1328 = vec3<f32>(x_1335.x, x_1335.y, x_1335.z);
  }
  let x_1337 : vec3<f32> = x_1328;
  let x_1338 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1337.x, x_1337.y, x_1337.z, x_1338.w);
  let x_1340 : vec4<f32> = u_xlat3;
  let x_1343 : vec4<f32> = x_34.x_SSAOParams;
  let x_1346 : vec3<f32> = u_xlat1;
  let x_1347 : vec3<f32> = ((vec3<f32>(x_1340.x, x_1340.y, x_1340.z) * vec3<f32>(x_1343.y, x_1343.y, x_1343.y)) + x_1346);
  let x_1348 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1347.x, x_1347.y, x_1347.z, x_1348.w);
  let x_1350 : vec4<f32> = u_xlat3;
  let x_1353 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1355 : vec2<f32> = (vec2<f32>(x_1350.y, x_1350.y) * vec2<f32>(x_1353.x, x_1353.y));
  let x_1356 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1355.x, x_1356.y, x_1355.y);
  let x_1359 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1361 : vec4<f32> = u_xlat3;
  let x_1364 : vec3<f32> = u_xlat10;
  let x_1366 : vec2<f32> = ((vec2<f32>(x_1359.x, x_1359.y) * vec2<f32>(x_1361.x, x_1361.x)) + vec2<f32>(x_1364.x, x_1364.z));
  let x_1367 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1366.x, x_1366.y, x_1367.z, x_1367.w);
  let x_1370 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1372 : vec4<f32> = u_xlat3;
  let x_1375 : vec4<f32> = u_xlat3;
  let x_1377 : vec2<f32> = ((vec2<f32>(x_1370.x, x_1370.y) * vec2<f32>(x_1372.z, x_1372.z)) + vec2<f32>(x_1375.x, x_1375.y));
  let x_1378 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1377.x, x_1377.y, x_1378.z, x_1378.w);
  let x_1380 : vec4<f32> = u_xlat3;
  let x_1382 : vec2<f32> = (vec2<f32>(x_1380.x, x_1380.y) + vec2<f32>(1.0f, 1.0f));
  let x_1383 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1382.x, x_1382.y, x_1383.z, x_1383.w);
  let x_1385 : vec4<f32> = u_xlat3;
  let x_1387 : vec2<f32> = (vec2<f32>(x_1385.x, x_1385.y) * vec2<f32>(0.5f, 0.5f));
  let x_1388 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1387.x, x_1387.y, x_1388.z, x_1388.w);
  let x_1390 : vec4<f32> = u_xlat3;
  let x_1394 : vec2<f32> = clamp(vec2<f32>(x_1390.x, x_1390.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1395 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1394.x, x_1394.y, x_1395.z, x_1395.w);
  let x_1400 : vec4<f32> = u_xlat3;
  let x_1403 : f32 = x_34.x_GlobalMipBias.x;
  let x_1404 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1400.x, x_1400.y), x_1403);
  u_xlat23 = x_1404.x;
  let x_1407 : f32 = u_xlat7.x;
  let x_1409 : f32 = u_xlat23;
  let x_1412 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1407) * x_1409) + x_1412);
  let x_1414 : f32 = u_xlat0;
  let x_1415 : f32 = u_xlat17;
  u_xlat24 = (x_1414 + -(x_1415));
  let x_1418 : f32 = u_xlat24;
  let x_1421 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1418) < x_1421);
  let x_1423 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1423);
  let x_1425 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1425);
  let x_1427 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1427);
  let x_1429 : f32 = u_xlat23;
  let x_1430 : f32 = u_xlat24;
  u_xlat23 = (x_1429 * x_1430);
  let x_1433 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1433) + 1.0f);
  let x_1437 : f32 = u_xlat17;
  let x_1439 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1437 * x_1439);
  let x_1442 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1444 : vec4<f32> = u_xlat3;
  let x_1448 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1442.x, x_1442.y, x_1442.z) * vec3<f32>(x_1444.x, x_1444.x, x_1444.x)) + vec3<f32>(x_1448.x, x_1448.y, x_1448.z));
  let x_1452 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1454 : vec3<f32> = u_xlat10;
  let x_1457 : vec3<f32> = u_xlat4;
  let x_1458 : vec3<f32> = ((vec3<f32>(x_1452.x, x_1452.y, x_1452.z) * vec3<f32>(x_1454.x, x_1454.x, x_1454.x)) + x_1457);
  let x_1459 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1458.x, x_1458.y, x_1459.z, x_1458.z);
  let x_1462 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1464 : f32 = u_xlat17;
  let x_1467 : vec4<f32> = u_xlat3;
  let x_1469 : vec3<f32> = ((vec3<f32>(x_1462.x, x_1462.y, x_1462.z) * vec3<f32>(x_1464, x_1464, x_1464)) + vec3<f32>(x_1467.x, x_1467.y, x_1467.w));
  let x_1470 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1469.x, x_1469.y, x_1469.z, x_1470.w);
  let x_1472 : vec3<f32> = u_xlat1;
  let x_1474 : vec4<f32> = u_xlat3;
  let x_1476 : vec3<f32> = (-(x_1472) + vec3<f32>(x_1474.x, x_1474.y, x_1474.z));
  let x_1477 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1476.x, x_1476.y, x_1476.z, x_1477.w);
  let x_1479 : vec4<f32> = u_xlat3;
  let x_1481 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1479.x, x_1479.y, x_1479.z), x_1481);
  let x_1483 : f32 = u_xlat0;
  let x_1486 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1483) * 0.004f) + x_1486);
  let x_1488 : f32 = u_xlat24;
  u_xlat24 = max(x_1488, 0.0f);
  let x_1490 : vec4<f32> = u_xlat3;
  let x_1492 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1490.x, x_1490.y, x_1490.z), vec3<f32>(x_1492.x, x_1492.y, x_1492.z));
  let x_1497 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1497 + 0.0001f);
  let x_1501 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1501);
  let x_1505 : f32 = u_xlat3.x;
  let x_1506 : f32 = u_xlat24;
  u_xlat3.x = (x_1505 * x_1506);
  let x_1510 : f32 = u_xlat3.x;
  let x_1511 : f32 = u_xlat23;
  let x_1513 : f32 = u_xlat22;
  u_xlat22 = ((x_1510 * x_1511) + x_1513);
  let x_1515 : vec2<f32> = u_xlat14;
  let x_1518 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1515.x, x_1515.y, x_1515.x, x_1515.y) * vec4<f32>(x_1518.z, x_1518.z, x_1518.z, x_1518.z)) + vec4<f32>(10.414999962f, 24.335000992f, 12.497999191f, 29.201999664f));
  let x_1527 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1527.x, x_1527.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1530 : f32 = u_xlat23;
  u_xlat23 = fract(x_1530);
  let x_1532 : f32 = u_xlat23;
  u_xlat23 = (x_1532 * 52.982917786f);
  let x_1534 : f32 = u_xlat23;
  u_xlat23 = fract(x_1534);
  let x_1536 : f32 = u_xlat23;
  let x_1541 : vec2<f32> = (vec2<f32>(x_1536, x_1536) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1542 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1541.x, x_1541.y, x_1542.z, x_1542.w);
  let x_1545 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1545);
  let x_1547 : f32 = u_xlat23;
  u_xlat4.z = ((x_1547 * 2.0f) + -1.0f);
  let x_1552 : f32 = u_xlat3.y;
  u_xlat23 = (x_1552 * 6.283185482f);
  let x_1555 : f32 = u_xlat4.z;
  let x_1558 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1555) * x_1558) + 1.0f);
  let x_1563 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1563);
  let x_1566 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1566);
  let x_1569 : f32 = u_xlat23;
  u_xlat6 = cos(x_1569);
  let x_1572 : f32 = u_xlat3.x;
  let x_1573 : f32 = u_xlat6;
  u_xlat4.x = (x_1572 * x_1573);
  let x_1577 : f32 = u_xlat3.x;
  let x_1579 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1577 * x_1579);
  let x_1582 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1582 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_1586 : vec3<f32> = u_xlat2;
  let x_1588 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(x_1586), x_1588);
  let x_1590 : f32 = u_xlat23;
  u_xlatb23 = (x_1590 >= 0.0f);
  let x_1592 : bool = u_xlatb23;
  if (x_1592) {
    let x_1596 : vec3<f32> = u_xlat4;
    x_1593 = -(x_1596);
  } else {
    let x_1599 : vec3<f32> = u_xlat4;
    x_1593 = x_1599;
  }
  let x_1600 : vec3<f32> = x_1593;
  u_xlat4 = x_1600;
  let x_1601 : vec3<f32> = u_xlat4;
  let x_1603 : vec4<f32> = x_34.x_SSAOParams;
  let x_1606 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1601 * vec3<f32>(x_1603.y, x_1603.y, x_1603.y)) + x_1606);
  let x_1608 : vec3<f32> = u_xlat4;
  let x_1611 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1613 : vec2<f32> = (vec2<f32>(x_1608.y, x_1608.y) * vec2<f32>(x_1611.x, x_1611.y));
  let x_1614 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1613.x, x_1613.y, x_1614.z, x_1614.w);
  let x_1617 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1619 : vec3<f32> = u_xlat4;
  let x_1622 : vec4<f32> = u_xlat3;
  let x_1624 : vec2<f32> = ((vec2<f32>(x_1617.x, x_1617.y) * vec2<f32>(x_1619.x, x_1619.x)) + vec2<f32>(x_1622.x, x_1622.y));
  let x_1625 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1624.x, x_1624.y, x_1625.z, x_1625.w);
  let x_1628 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1630 : vec3<f32> = u_xlat4;
  let x_1633 : vec4<f32> = u_xlat3;
  let x_1635 : vec2<f32> = ((vec2<f32>(x_1628.x, x_1628.y) * vec2<f32>(x_1630.z, x_1630.z)) + vec2<f32>(x_1633.x, x_1633.y));
  let x_1636 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1635.x, x_1635.y, x_1636.z, x_1636.w);
  let x_1638 : vec4<f32> = u_xlat3;
  let x_1640 : vec2<f32> = (vec2<f32>(x_1638.x, x_1638.y) + vec2<f32>(1.0f, 1.0f));
  let x_1641 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1640.x, x_1640.y, x_1641.z, x_1641.w);
  let x_1643 : vec4<f32> = u_xlat3;
  let x_1645 : vec2<f32> = (vec2<f32>(x_1643.x, x_1643.y) * vec2<f32>(0.5f, 0.5f));
  let x_1646 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1645.x, x_1645.y, x_1646.z, x_1646.w);
  let x_1648 : vec4<f32> = u_xlat3;
  let x_1652 : vec2<f32> = clamp(vec2<f32>(x_1648.x, x_1648.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1653 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1652.x, x_1652.y, x_1653.z, x_1653.w);
  let x_1658 : vec4<f32> = u_xlat3;
  let x_1661 : f32 = x_34.x_GlobalMipBias.x;
  let x_1662 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1658.x, x_1658.y), x_1661);
  u_xlat23 = x_1662.x;
  let x_1665 : f32 = u_xlat7.x;
  let x_1667 : f32 = u_xlat23;
  let x_1670 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1665) * x_1667) + x_1670);
  let x_1673 : f32 = u_xlat0;
  let x_1675 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1673 + -(x_1675));
  let x_1680 : f32 = u_xlat11.x;
  let x_1683 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1680) < x_1683);
  let x_1685 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1685);
  let x_1688 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1688);
  let x_1690 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1690);
  let x_1692 : f32 = u_xlat23;
  let x_1694 : f32 = u_xlat11.x;
  u_xlat23 = (x_1692 * x_1694);
  let x_1697 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1697) + 1.0f);
  let x_1702 : f32 = u_xlat4.x;
  let x_1704 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1702 * x_1704);
  let x_1708 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1710 : vec4<f32> = u_xlat3;
  let x_1714 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1708.x, x_1708.y, x_1708.z) * vec3<f32>(x_1710.x, x_1710.x, x_1710.x)) + vec3<f32>(x_1714.x, x_1714.y, x_1714.z));
  let x_1718 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1720 : vec3<f32> = u_xlat10;
  let x_1723 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1718.x, x_1718.y, x_1718.z) * vec3<f32>(x_1720.x, x_1720.x, x_1720.x)) + x_1723);
  let x_1726 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1728 : vec3<f32> = u_xlat4;
  let x_1731 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1726.x, x_1726.y, x_1726.z) * vec3<f32>(x_1728.x, x_1728.x, x_1728.x)) + x_1731);
  let x_1733 : vec3<f32> = u_xlat1;
  let x_1735 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1733) + x_1735);
  let x_1737 : vec3<f32> = u_xlat4;
  let x_1738 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_1737, x_1738);
  let x_1741 : f32 = u_xlat0;
  let x_1745 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1741) * 0.004f) + x_1745);
  let x_1749 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1749, 0.0f);
  let x_1752 : vec3<f32> = u_xlat4;
  let x_1753 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1752, x_1753);
  let x_1757 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1757 + 0.0001f);
  let x_1761 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1761);
  let x_1765 : f32 = u_xlat10.x;
  let x_1767 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1765 * x_1767);
  let x_1771 : f32 = u_xlat3.x;
  let x_1772 : f32 = u_xlat23;
  let x_1774 : f32 = u_xlat22;
  u_xlat22 = ((x_1771 * x_1772) + x_1774);
  let x_1776 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1776.z, x_1776.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1779 : f32 = u_xlat23;
  u_xlat23 = fract(x_1779);
  let x_1781 : f32 = u_xlat23;
  u_xlat23 = (x_1781 * 52.982917786f);
  let x_1783 : f32 = u_xlat23;
  u_xlat23 = fract(x_1783);
  let x_1785 : f32 = u_xlat23;
  let x_1790 : vec2<f32> = (vec2<f32>(x_1785, x_1785) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1791 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1790.x, x_1790.y, x_1791.z, x_1791.w);
  let x_1794 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1794);
  let x_1796 : f32 = u_xlat23;
  u_xlat4.z = ((x_1796 * 2.0f) + -1.0f);
  let x_1801 : f32 = u_xlat3.y;
  u_xlat23 = (x_1801 * 6.283185482f);
  let x_1804 : f32 = u_xlat4.z;
  let x_1807 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1804) * x_1807) + 1.0f);
  let x_1812 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1812);
  let x_1815 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1815);
  let x_1818 : f32 = u_xlat23;
  u_xlat6 = cos(x_1818);
  let x_1821 : f32 = u_xlat3.x;
  let x_1822 : f32 = u_xlat6;
  u_xlat4.x = (x_1821 * x_1822);
  let x_1826 : f32 = u_xlat3.x;
  let x_1828 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1826 * x_1828);
  let x_1831 : vec3<f32> = u_xlat4;
  let x_1834 : vec3<f32> = (x_1831 * vec3<f32>(0.763762653f, 0.763762653f, 0.763762653f));
  let x_1835 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1834.x, x_1834.y, x_1834.z, x_1835.w);
  let x_1837 : vec3<f32> = u_xlat2;
  let x_1839 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_1837), vec3<f32>(x_1839.x, x_1839.y, x_1839.z));
  let x_1842 : f32 = u_xlat23;
  u_xlatb23 = (x_1842 >= 0.0f);
  let x_1844 : bool = u_xlatb23;
  if (x_1844) {
    let x_1848 : vec4<f32> = u_xlat3;
    x_1845 = -(vec3<f32>(x_1848.x, x_1848.y, x_1848.z));
  } else {
    let x_1852 : vec4<f32> = u_xlat3;
    x_1845 = vec3<f32>(x_1852.x, x_1852.y, x_1852.z);
  }
  let x_1854 : vec3<f32> = x_1845;
  let x_1855 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1854.x, x_1854.y, x_1854.z, x_1855.w);
  let x_1857 : vec4<f32> = u_xlat3;
  let x_1860 : vec4<f32> = x_34.x_SSAOParams;
  let x_1863 : vec3<f32> = u_xlat1;
  let x_1864 : vec3<f32> = ((vec3<f32>(x_1857.x, x_1857.y, x_1857.z) * vec3<f32>(x_1860.y, x_1860.y, x_1860.y)) + x_1863);
  let x_1865 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1864.x, x_1864.y, x_1864.z, x_1865.w);
  let x_1867 : vec4<f32> = u_xlat3;
  let x_1870 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1872 : vec2<f32> = (vec2<f32>(x_1867.y, x_1867.y) * vec2<f32>(x_1870.x, x_1870.y));
  let x_1873 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1872.x, x_1873.y, x_1872.y);
  let x_1876 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1878 : vec4<f32> = u_xlat3;
  let x_1881 : vec3<f32> = u_xlat10;
  let x_1883 : vec2<f32> = ((vec2<f32>(x_1876.x, x_1876.y) * vec2<f32>(x_1878.x, x_1878.x)) + vec2<f32>(x_1881.x, x_1881.z));
  let x_1884 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1883.x, x_1883.y, x_1884.z, x_1884.w);
  let x_1887 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1889 : vec4<f32> = u_xlat3;
  let x_1892 : vec4<f32> = u_xlat3;
  let x_1894 : vec2<f32> = ((vec2<f32>(x_1887.x, x_1887.y) * vec2<f32>(x_1889.z, x_1889.z)) + vec2<f32>(x_1892.x, x_1892.y));
  let x_1895 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1894.x, x_1894.y, x_1895.z, x_1895.w);
  let x_1897 : vec4<f32> = u_xlat3;
  let x_1899 : vec2<f32> = (vec2<f32>(x_1897.x, x_1897.y) + vec2<f32>(1.0f, 1.0f));
  let x_1900 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1899.x, x_1899.y, x_1900.z, x_1900.w);
  let x_1902 : vec4<f32> = u_xlat3;
  let x_1904 : vec2<f32> = (vec2<f32>(x_1902.x, x_1902.y) * vec2<f32>(0.5f, 0.5f));
  let x_1905 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1904.x, x_1904.y, x_1905.z, x_1905.w);
  let x_1907 : vec4<f32> = u_xlat3;
  let x_1911 : vec2<f32> = clamp(vec2<f32>(x_1907.x, x_1907.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1912 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1911.x, x_1911.y, x_1912.z, x_1912.w);
  let x_1917 : vec4<f32> = u_xlat3;
  let x_1920 : f32 = x_34.x_GlobalMipBias.x;
  let x_1921 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1917.x, x_1917.y), x_1920);
  u_xlat23 = x_1921.x;
  let x_1924 : f32 = u_xlat7.x;
  let x_1926 : f32 = u_xlat23;
  let x_1929 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1924) * x_1926) + x_1929);
  let x_1931 : f32 = u_xlat0;
  let x_1932 : f32 = u_xlat17;
  u_xlat24 = (x_1931 + -(x_1932));
  let x_1935 : f32 = u_xlat24;
  let x_1938 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1935) < x_1938);
  let x_1940 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1940);
  let x_1942 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1942);
  let x_1944 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1944);
  let x_1946 : f32 = u_xlat23;
  let x_1947 : f32 = u_xlat24;
  u_xlat23 = (x_1946 * x_1947);
  let x_1950 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1950) + 1.0f);
  let x_1954 : f32 = u_xlat17;
  let x_1956 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1954 * x_1956);
  let x_1959 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1961 : vec4<f32> = u_xlat3;
  let x_1965 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1959.x, x_1959.y, x_1959.z) * vec3<f32>(x_1961.x, x_1961.x, x_1961.x)) + vec3<f32>(x_1965.x, x_1965.y, x_1965.z));
  let x_1969 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1971 : vec3<f32> = u_xlat10;
  let x_1974 : vec3<f32> = u_xlat4;
  let x_1975 : vec3<f32> = ((vec3<f32>(x_1969.x, x_1969.y, x_1969.z) * vec3<f32>(x_1971.x, x_1971.x, x_1971.x)) + x_1974);
  let x_1976 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1975.x, x_1975.y, x_1976.z, x_1975.z);
  let x_1979 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1981 : f32 = u_xlat17;
  let x_1984 : vec4<f32> = u_xlat3;
  let x_1986 : vec3<f32> = ((vec3<f32>(x_1979.x, x_1979.y, x_1979.z) * vec3<f32>(x_1981, x_1981, x_1981)) + vec3<f32>(x_1984.x, x_1984.y, x_1984.w));
  let x_1987 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1986.x, x_1986.y, x_1986.z, x_1987.w);
  let x_1989 : vec3<f32> = u_xlat1;
  let x_1991 : vec4<f32> = u_xlat3;
  let x_1993 : vec3<f32> = (-(x_1989) + vec3<f32>(x_1991.x, x_1991.y, x_1991.z));
  let x_1994 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1993.x, x_1993.y, x_1993.z, x_1994.w);
  let x_1996 : vec4<f32> = u_xlat3;
  let x_1998 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1996.x, x_1996.y, x_1996.z), x_1998);
  let x_2000 : f32 = u_xlat0;
  let x_2003 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2000) * 0.004f) + x_2003);
  let x_2005 : f32 = u_xlat24;
  u_xlat24 = max(x_2005, 0.0f);
  let x_2007 : vec4<f32> = u_xlat3;
  let x_2009 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2007.x, x_2007.y, x_2007.z), vec3<f32>(x_2009.x, x_2009.y, x_2009.z));
  let x_2014 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2014 + 0.0001f);
  let x_2018 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2018);
  let x_2022 : f32 = u_xlat3.x;
  let x_2023 : f32 = u_xlat24;
  u_xlat3.x = (x_2022 * x_2023);
  let x_2027 : f32 = u_xlat3.x;
  let x_2028 : f32 = u_xlat23;
  let x_2030 : f32 = u_xlat22;
  u_xlat22 = ((x_2027 * x_2028) + x_2030);
  let x_2032 : vec2<f32> = u_xlat14;
  let x_2035 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2032.x, x_2032.y, x_2032.x, x_2032.y) * vec4<f32>(x_2035.z, x_2035.z, x_2035.z, x_2035.z)) + vec4<f32>(14.580999374f, 34.069000244f, 16.663999557f, 38.936000824f));
  let x_2044 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2044.x, x_2044.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2047 : f32 = u_xlat23;
  u_xlat23 = fract(x_2047);
  let x_2049 : f32 = u_xlat23;
  u_xlat23 = (x_2049 * 52.982917786f);
  let x_2051 : f32 = u_xlat23;
  u_xlat23 = fract(x_2051);
  let x_2053 : f32 = u_xlat23;
  let x_2057 : vec2<f32> = (vec2<f32>(x_2053, x_2053) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2058 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2057.x, x_2057.y, x_2058.z, x_2058.w);
  let x_2061 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2061);
  let x_2063 : f32 = u_xlat23;
  u_xlat4.z = ((x_2063 * 2.0f) + -1.0f);
  let x_2068 : f32 = u_xlat3.y;
  u_xlat23 = (x_2068 * 6.283185482f);
  let x_2071 : f32 = u_xlat4.z;
  let x_2074 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2071) * x_2074) + 1.0f);
  let x_2079 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2079);
  let x_2082 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2082);
  let x_2085 : f32 = u_xlat23;
  u_xlat6 = cos(x_2085);
  let x_2088 : f32 = u_xlat3.x;
  let x_2089 : f32 = u_xlat6;
  u_xlat4.x = (x_2088 * x_2089);
  let x_2093 : f32 = u_xlat3.x;
  let x_2095 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2093 * x_2095);
  let x_2098 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2098 * vec3<f32>(0.816496611f, 0.816496611f, 0.816496611f));
  let x_2102 : vec3<f32> = u_xlat2;
  let x_2104 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(x_2102), x_2104);
  let x_2106 : f32 = u_xlat23;
  u_xlatb23 = (x_2106 >= 0.0f);
  let x_2108 : bool = u_xlatb23;
  if (x_2108) {
    let x_2112 : vec3<f32> = u_xlat4;
    x_2109 = -(x_2112);
  } else {
    let x_2115 : vec3<f32> = u_xlat4;
    x_2109 = x_2115;
  }
  let x_2116 : vec3<f32> = x_2109;
  u_xlat4 = x_2116;
  let x_2117 : vec3<f32> = u_xlat4;
  let x_2119 : vec4<f32> = x_34.x_SSAOParams;
  let x_2122 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_2117 * vec3<f32>(x_2119.y, x_2119.y, x_2119.y)) + x_2122);
  let x_2124 : vec3<f32> = u_xlat4;
  let x_2127 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2129 : vec2<f32> = (vec2<f32>(x_2124.y, x_2124.y) * vec2<f32>(x_2127.x, x_2127.y));
  let x_2130 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2129.x, x_2129.y, x_2130.z, x_2130.w);
  let x_2133 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2135 : vec3<f32> = u_xlat4;
  let x_2138 : vec4<f32> = u_xlat3;
  let x_2140 : vec2<f32> = ((vec2<f32>(x_2133.x, x_2133.y) * vec2<f32>(x_2135.x, x_2135.x)) + vec2<f32>(x_2138.x, x_2138.y));
  let x_2141 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2140.x, x_2140.y, x_2141.z, x_2141.w);
  let x_2144 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2146 : vec3<f32> = u_xlat4;
  let x_2149 : vec4<f32> = u_xlat3;
  let x_2151 : vec2<f32> = ((vec2<f32>(x_2144.x, x_2144.y) * vec2<f32>(x_2146.z, x_2146.z)) + vec2<f32>(x_2149.x, x_2149.y));
  let x_2152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2151.x, x_2151.y, x_2152.z, x_2152.w);
  let x_2154 : vec4<f32> = u_xlat3;
  let x_2156 : vec2<f32> = (vec2<f32>(x_2154.x, x_2154.y) + vec2<f32>(1.0f, 1.0f));
  let x_2157 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2156.x, x_2156.y, x_2157.z, x_2157.w);
  let x_2159 : vec4<f32> = u_xlat3;
  let x_2161 : vec2<f32> = (vec2<f32>(x_2159.x, x_2159.y) * vec2<f32>(0.5f, 0.5f));
  let x_2162 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2161.x, x_2161.y, x_2162.z, x_2162.w);
  let x_2164 : vec4<f32> = u_xlat3;
  let x_2168 : vec2<f32> = clamp(vec2<f32>(x_2164.x, x_2164.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2169 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2168.x, x_2168.y, x_2169.z, x_2169.w);
  let x_2174 : vec4<f32> = u_xlat3;
  let x_2177 : f32 = x_34.x_GlobalMipBias.x;
  let x_2178 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2174.x, x_2174.y), x_2177);
  u_xlat23 = x_2178.x;
  let x_2181 : f32 = u_xlat7.x;
  let x_2183 : f32 = u_xlat23;
  let x_2186 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2181) * x_2183) + x_2186);
  let x_2189 : f32 = u_xlat0;
  let x_2191 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2189 + -(x_2191));
  let x_2196 : f32 = u_xlat11.x;
  let x_2199 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2196) < x_2199);
  let x_2201 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2201);
  let x_2204 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2204);
  let x_2206 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2206);
  let x_2208 : f32 = u_xlat23;
  let x_2210 : f32 = u_xlat11.x;
  u_xlat23 = (x_2208 * x_2210);
  let x_2213 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2213) + 1.0f);
  let x_2218 : f32 = u_xlat4.x;
  let x_2220 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2218 * x_2220);
  let x_2224 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2226 : vec4<f32> = u_xlat3;
  let x_2230 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2224.x, x_2224.y, x_2224.z) * vec3<f32>(x_2226.x, x_2226.x, x_2226.x)) + vec3<f32>(x_2230.x, x_2230.y, x_2230.z));
  let x_2234 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2236 : vec3<f32> = u_xlat10;
  let x_2239 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2234.x, x_2234.y, x_2234.z) * vec3<f32>(x_2236.x, x_2236.x, x_2236.x)) + x_2239);
  let x_2242 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2244 : vec3<f32> = u_xlat4;
  let x_2247 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2242.x, x_2242.y, x_2242.z) * vec3<f32>(x_2244.x, x_2244.x, x_2244.x)) + x_2247);
  let x_2249 : vec3<f32> = u_xlat1;
  let x_2251 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2249) + x_2251);
  let x_2253 : vec3<f32> = u_xlat4;
  let x_2254 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_2253, x_2254);
  let x_2257 : f32 = u_xlat0;
  let x_2261 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2257) * 0.004f) + x_2261);
  let x_2265 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2265, 0.0f);
  let x_2268 : vec3<f32> = u_xlat4;
  let x_2269 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2268, x_2269);
  let x_2273 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2273 + 0.0001f);
  let x_2277 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2277);
  let x_2281 : f32 = u_xlat10.x;
  let x_2283 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2281 * x_2283);
  let x_2287 : f32 = u_xlat3.x;
  let x_2288 : f32 = u_xlat23;
  let x_2290 : f32 = u_xlat22;
  u_xlat22 = ((x_2287 * x_2288) + x_2290);
  let x_2292 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2292.z, x_2292.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2295 : f32 = u_xlat23;
  u_xlat23 = fract(x_2295);
  let x_2297 : f32 = u_xlat23;
  u_xlat23 = (x_2297 * 52.982917786f);
  let x_2299 : f32 = u_xlat23;
  u_xlat23 = fract(x_2299);
  let x_2301 : f32 = u_xlat23;
  let x_2306 : vec2<f32> = (vec2<f32>(x_2301, x_2301) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2307 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2306.x, x_2306.y, x_2307.z, x_2307.w);
  let x_2310 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2310);
  let x_2312 : f32 = u_xlat23;
  u_xlat4.z = ((x_2312 * 2.0f) + -1.0f);
  let x_2317 : f32 = u_xlat3.y;
  u_xlat23 = (x_2317 * 6.283185482f);
  let x_2320 : f32 = u_xlat4.z;
  let x_2323 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2320) * x_2323) + 1.0f);
  let x_2328 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2328);
  let x_2331 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2331);
  let x_2334 : f32 = u_xlat23;
  u_xlat6 = cos(x_2334);
  let x_2337 : f32 = u_xlat3.x;
  let x_2338 : f32 = u_xlat6;
  u_xlat4.x = (x_2337 * x_2338);
  let x_2342 : f32 = u_xlat3.x;
  let x_2344 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2342 * x_2344);
  let x_2347 : vec3<f32> = u_xlat4;
  let x_2350 : vec3<f32> = (x_2347 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_2351 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2350.x, x_2350.y, x_2350.z, x_2351.w);
  let x_2353 : vec3<f32> = u_xlat2;
  let x_2355 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_2353), vec3<f32>(x_2355.x, x_2355.y, x_2355.z));
  let x_2358 : f32 = u_xlat23;
  u_xlatb23 = (x_2358 >= 0.0f);
  let x_2360 : bool = u_xlatb23;
  if (x_2360) {
    let x_2364 : vec4<f32> = u_xlat3;
    x_2361 = -(vec3<f32>(x_2364.x, x_2364.y, x_2364.z));
  } else {
    let x_2368 : vec4<f32> = u_xlat3;
    x_2361 = vec3<f32>(x_2368.x, x_2368.y, x_2368.z);
  }
  let x_2370 : vec3<f32> = x_2361;
  let x_2371 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2370.x, x_2370.y, x_2370.z, x_2371.w);
  let x_2373 : vec4<f32> = u_xlat3;
  let x_2376 : vec4<f32> = x_34.x_SSAOParams;
  let x_2379 : vec3<f32> = u_xlat1;
  let x_2380 : vec3<f32> = ((vec3<f32>(x_2373.x, x_2373.y, x_2373.z) * vec3<f32>(x_2376.y, x_2376.y, x_2376.y)) + x_2379);
  let x_2381 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2380.x, x_2380.y, x_2380.z, x_2381.w);
  let x_2383 : vec4<f32> = u_xlat3;
  let x_2386 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2388 : vec2<f32> = (vec2<f32>(x_2383.y, x_2383.y) * vec2<f32>(x_2386.x, x_2386.y));
  let x_2389 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2388.x, x_2389.y, x_2388.y);
  let x_2392 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2394 : vec4<f32> = u_xlat3;
  let x_2397 : vec3<f32> = u_xlat10;
  let x_2399 : vec2<f32> = ((vec2<f32>(x_2392.x, x_2392.y) * vec2<f32>(x_2394.x, x_2394.x)) + vec2<f32>(x_2397.x, x_2397.z));
  let x_2400 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2399.x, x_2399.y, x_2400.z, x_2400.w);
  let x_2403 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2405 : vec4<f32> = u_xlat3;
  let x_2408 : vec4<f32> = u_xlat3;
  let x_2410 : vec2<f32> = ((vec2<f32>(x_2403.x, x_2403.y) * vec2<f32>(x_2405.z, x_2405.z)) + vec2<f32>(x_2408.x, x_2408.y));
  let x_2411 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2410.x, x_2410.y, x_2411.z, x_2411.w);
  let x_2413 : vec4<f32> = u_xlat3;
  let x_2415 : vec2<f32> = (vec2<f32>(x_2413.x, x_2413.y) + vec2<f32>(1.0f, 1.0f));
  let x_2416 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2415.x, x_2415.y, x_2416.z, x_2416.w);
  let x_2418 : vec4<f32> = u_xlat3;
  let x_2420 : vec2<f32> = (vec2<f32>(x_2418.x, x_2418.y) * vec2<f32>(0.5f, 0.5f));
  let x_2421 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2420.x, x_2420.y, x_2421.z, x_2421.w);
  let x_2423 : vec4<f32> = u_xlat3;
  let x_2427 : vec2<f32> = clamp(vec2<f32>(x_2423.x, x_2423.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2428 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2427.x, x_2427.y, x_2428.z, x_2428.w);
  let x_2433 : vec4<f32> = u_xlat3;
  let x_2436 : f32 = x_34.x_GlobalMipBias.x;
  let x_2437 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2433.x, x_2433.y), x_2436);
  u_xlat23 = x_2437.x;
  let x_2440 : f32 = u_xlat7.x;
  let x_2442 : f32 = u_xlat23;
  let x_2445 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2440) * x_2442) + x_2445);
  let x_2447 : f32 = u_xlat0;
  let x_2448 : f32 = u_xlat17;
  u_xlat24 = (x_2447 + -(x_2448));
  let x_2451 : f32 = u_xlat24;
  let x_2454 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2451) < x_2454);
  let x_2456 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2456);
  let x_2458 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2458);
  let x_2460 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2460);
  let x_2462 : f32 = u_xlat23;
  let x_2463 : f32 = u_xlat24;
  u_xlat23 = (x_2462 * x_2463);
  let x_2466 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2466) + 1.0f);
  let x_2470 : f32 = u_xlat17;
  let x_2472 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2470 * x_2472);
  let x_2475 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2477 : vec4<f32> = u_xlat3;
  let x_2481 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2475.x, x_2475.y, x_2475.z) * vec3<f32>(x_2477.x, x_2477.x, x_2477.x)) + vec3<f32>(x_2481.x, x_2481.y, x_2481.z));
  let x_2485 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2487 : vec3<f32> = u_xlat10;
  let x_2490 : vec3<f32> = u_xlat4;
  let x_2491 : vec3<f32> = ((vec3<f32>(x_2485.x, x_2485.y, x_2485.z) * vec3<f32>(x_2487.x, x_2487.x, x_2487.x)) + x_2490);
  let x_2492 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2491.x, x_2491.y, x_2492.z, x_2491.z);
  let x_2495 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2497 : f32 = u_xlat17;
  let x_2500 : vec4<f32> = u_xlat3;
  let x_2502 : vec3<f32> = ((vec3<f32>(x_2495.x, x_2495.y, x_2495.z) * vec3<f32>(x_2497, x_2497, x_2497)) + vec3<f32>(x_2500.x, x_2500.y, x_2500.w));
  let x_2503 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2502.x, x_2502.y, x_2502.z, x_2503.w);
  let x_2505 : vec3<f32> = u_xlat1;
  let x_2507 : vec4<f32> = u_xlat3;
  let x_2509 : vec3<f32> = (-(x_2505) + vec3<f32>(x_2507.x, x_2507.y, x_2507.z));
  let x_2510 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2509.x, x_2509.y, x_2509.z, x_2510.w);
  let x_2512 : vec4<f32> = u_xlat3;
  let x_2514 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_2512.x, x_2512.y, x_2512.z), x_2514);
  let x_2516 : f32 = u_xlat0;
  let x_2519 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2516) * 0.004f) + x_2519);
  let x_2521 : f32 = u_xlat24;
  u_xlat24 = max(x_2521, 0.0f);
  let x_2523 : vec4<f32> = u_xlat3;
  let x_2525 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2523.x, x_2523.y, x_2523.z), vec3<f32>(x_2525.x, x_2525.y, x_2525.z));
  let x_2530 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2530 + 0.0001f);
  let x_2534 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2534);
  let x_2538 : f32 = u_xlat3.x;
  let x_2539 : f32 = u_xlat24;
  u_xlat3.x = (x_2538 * x_2539);
  let x_2543 : f32 = u_xlat3.x;
  let x_2544 : f32 = u_xlat23;
  let x_2546 : f32 = u_xlat22;
  u_xlat22 = ((x_2543 * x_2544) + x_2546);
  let x_2548 : vec2<f32> = u_xlat14;
  let x_2551 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2548.x, x_2548.y, x_2548.x, x_2548.y) * vec4<f32>(x_2551.z, x_2551.z, x_2551.z, x_2551.z)) + vec4<f32>(18.746999741f, 43.803001404f, 20.829999924f, 48.670001984f));
  let x_2560 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2560.x, x_2560.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2563 : f32 = u_xlat23;
  u_xlat23 = fract(x_2563);
  let x_2565 : f32 = u_xlat23;
  u_xlat23 = (x_2565 * 52.982917786f);
  let x_2567 : f32 = u_xlat23;
  u_xlat23 = fract(x_2567);
  let x_2569 : f32 = u_xlat23;
  let x_2574 : vec2<f32> = (vec2<f32>(x_2569, x_2569) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2575 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2574.x, x_2574.y, x_2575.z, x_2575.w);
  let x_2578 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2578);
  let x_2580 : f32 = u_xlat23;
  u_xlat4.z = ((x_2580 * 2.0f) + -1.0f);
  let x_2585 : f32 = u_xlat3.y;
  u_xlat23 = (x_2585 * 6.283185482f);
  let x_2588 : f32 = u_xlat4.z;
  let x_2591 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2588) * x_2591) + 1.0f);
  let x_2596 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2596);
  let x_2599 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2599);
  let x_2602 : f32 = u_xlat23;
  u_xlat6 = cos(x_2602);
  let x_2605 : f32 = u_xlat3.x;
  let x_2606 : f32 = u_xlat6;
  u_xlat4.x = (x_2605 * x_2606);
  let x_2610 : f32 = u_xlat3.x;
  let x_2612 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2610 * x_2612);
  let x_2615 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2615 * vec3<f32>(0.912870944f, 0.912870944f, 0.912870944f));
  let x_2619 : vec3<f32> = u_xlat2;
  let x_2621 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(x_2619), x_2621);
  let x_2623 : f32 = u_xlat23;
  u_xlatb23 = (x_2623 >= 0.0f);
  let x_2625 : bool = u_xlatb23;
  if (x_2625) {
    let x_2629 : vec3<f32> = u_xlat4;
    x_2626 = -(x_2629);
  } else {
    let x_2632 : vec3<f32> = u_xlat4;
    x_2626 = x_2632;
  }
  let x_2633 : vec3<f32> = x_2626;
  u_xlat4 = x_2633;
  let x_2634 : vec3<f32> = u_xlat4;
  let x_2636 : vec4<f32> = x_34.x_SSAOParams;
  let x_2639 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_2634 * vec3<f32>(x_2636.y, x_2636.y, x_2636.y)) + x_2639);
  let x_2641 : vec3<f32> = u_xlat4;
  let x_2644 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2646 : vec2<f32> = (vec2<f32>(x_2641.y, x_2641.y) * vec2<f32>(x_2644.x, x_2644.y));
  let x_2647 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2646.x, x_2646.y, x_2647.z, x_2647.w);
  let x_2650 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2652 : vec3<f32> = u_xlat4;
  let x_2655 : vec4<f32> = u_xlat3;
  let x_2657 : vec2<f32> = ((vec2<f32>(x_2650.x, x_2650.y) * vec2<f32>(x_2652.x, x_2652.x)) + vec2<f32>(x_2655.x, x_2655.y));
  let x_2658 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2657.x, x_2657.y, x_2658.z, x_2658.w);
  let x_2661 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2663 : vec3<f32> = u_xlat4;
  let x_2666 : vec4<f32> = u_xlat3;
  let x_2668 : vec2<f32> = ((vec2<f32>(x_2661.x, x_2661.y) * vec2<f32>(x_2663.z, x_2663.z)) + vec2<f32>(x_2666.x, x_2666.y));
  let x_2669 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2668.x, x_2668.y, x_2669.z, x_2669.w);
  let x_2671 : vec4<f32> = u_xlat3;
  let x_2673 : vec2<f32> = (vec2<f32>(x_2671.x, x_2671.y) + vec2<f32>(1.0f, 1.0f));
  let x_2674 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2673.x, x_2673.y, x_2674.z, x_2674.w);
  let x_2676 : vec4<f32> = u_xlat3;
  let x_2678 : vec2<f32> = (vec2<f32>(x_2676.x, x_2676.y) * vec2<f32>(0.5f, 0.5f));
  let x_2679 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2678.x, x_2678.y, x_2679.z, x_2679.w);
  let x_2681 : vec4<f32> = u_xlat3;
  let x_2685 : vec2<f32> = clamp(vec2<f32>(x_2681.x, x_2681.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2686 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2685.x, x_2685.y, x_2686.z, x_2686.w);
  let x_2691 : vec4<f32> = u_xlat3;
  let x_2694 : f32 = x_34.x_GlobalMipBias.x;
  let x_2695 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2691.x, x_2691.y), x_2694);
  u_xlat23 = x_2695.x;
  let x_2698 : f32 = u_xlat7.x;
  let x_2700 : f32 = u_xlat23;
  let x_2703 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2698) * x_2700) + x_2703);
  let x_2706 : f32 = u_xlat0;
  let x_2708 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2706 + -(x_2708));
  let x_2713 : f32 = u_xlat11.x;
  let x_2716 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2713) < x_2716);
  let x_2718 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2718);
  let x_2721 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2721);
  let x_2723 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2723);
  let x_2725 : f32 = u_xlat23;
  let x_2727 : f32 = u_xlat11.x;
  u_xlat23 = (x_2725 * x_2727);
  let x_2730 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2730) + 1.0f);
  let x_2735 : f32 = u_xlat4.x;
  let x_2737 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2735 * x_2737);
  let x_2741 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2743 : vec4<f32> = u_xlat3;
  let x_2747 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2741.x, x_2741.y, x_2741.z) * vec3<f32>(x_2743.x, x_2743.x, x_2743.x)) + vec3<f32>(x_2747.x, x_2747.y, x_2747.z));
  let x_2751 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2753 : vec3<f32> = u_xlat10;
  let x_2756 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2751.x, x_2751.y, x_2751.z) * vec3<f32>(x_2753.x, x_2753.x, x_2753.x)) + x_2756);
  let x_2759 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2761 : vec3<f32> = u_xlat4;
  let x_2764 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2759.x, x_2759.y, x_2759.z) * vec3<f32>(x_2761.x, x_2761.x, x_2761.x)) + x_2764);
  let x_2766 : vec3<f32> = u_xlat1;
  let x_2768 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2766) + x_2768);
  let x_2770 : vec3<f32> = u_xlat4;
  let x_2771 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_2770, x_2771);
  let x_2774 : f32 = u_xlat0;
  let x_2778 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2774) * 0.004f) + x_2778);
  let x_2782 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2782, 0.0f);
  let x_2785 : vec3<f32> = u_xlat4;
  let x_2786 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2785, x_2786);
  let x_2790 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2790 + 0.0001f);
  let x_2794 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2794);
  let x_2798 : f32 = u_xlat10.x;
  let x_2800 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2798 * x_2800);
  let x_2804 : f32 = u_xlat3.x;
  let x_2805 : f32 = u_xlat23;
  let x_2807 : f32 = u_xlat22;
  u_xlat22 = ((x_2804 * x_2805) + x_2807);
  let x_2809 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2809.z, x_2809.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2812 : f32 = u_xlat23;
  u_xlat23 = fract(x_2812);
  let x_2814 : f32 = u_xlat23;
  u_xlat23 = (x_2814 * 52.982917786f);
  let x_2816 : f32 = u_xlat23;
  u_xlat23 = fract(x_2816);
  let x_2818 : f32 = u_xlat23;
  let x_2823 : vec2<f32> = (vec2<f32>(x_2818, x_2818) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_2824 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2823.x, x_2823.y, x_2824.z, x_2824.w);
  let x_2827 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2827);
  let x_2829 : f32 = u_xlat23;
  u_xlat4.z = ((x_2829 * 2.0f) + -1.0f);
  let x_2834 : f32 = u_xlat3.y;
  u_xlat23 = (x_2834 * 6.283185482f);
  let x_2837 : f32 = u_xlat4.z;
  let x_2840 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2837) * x_2840) + 1.0f);
  let x_2845 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2845);
  let x_2848 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2848);
  let x_2851 : f32 = u_xlat23;
  u_xlat6 = cos(x_2851);
  let x_2854 : f32 = u_xlat3.x;
  let x_2855 : f32 = u_xlat6;
  u_xlat4.x = (x_2854 * x_2855);
  let x_2859 : f32 = u_xlat3.x;
  let x_2861 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2859 * x_2861);
  let x_2864 : vec3<f32> = u_xlat4;
  let x_2867 : vec3<f32> = (x_2864 * vec3<f32>(0.957427144f, 0.957427144f, 0.957427144f));
  let x_2868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2867.x, x_2867.y, x_2867.z, x_2868.w);
  let x_2870 : vec3<f32> = u_xlat2;
  let x_2872 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_2870), vec3<f32>(x_2872.x, x_2872.y, x_2872.z));
  let x_2875 : f32 = u_xlat23;
  u_xlatb23 = (x_2875 >= 0.0f);
  let x_2877 : bool = u_xlatb23;
  if (x_2877) {
    let x_2881 : vec4<f32> = u_xlat3;
    x_2878 = -(vec3<f32>(x_2881.x, x_2881.y, x_2881.z));
  } else {
    let x_2885 : vec4<f32> = u_xlat3;
    x_2878 = vec3<f32>(x_2885.x, x_2885.y, x_2885.z);
  }
  let x_2887 : vec3<f32> = x_2878;
  let x_2888 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2887.x, x_2887.y, x_2887.z, x_2888.w);
  let x_2890 : vec4<f32> = u_xlat3;
  let x_2893 : vec4<f32> = x_34.x_SSAOParams;
  let x_2896 : vec3<f32> = u_xlat1;
  let x_2897 : vec3<f32> = ((vec3<f32>(x_2890.x, x_2890.y, x_2890.z) * vec3<f32>(x_2893.y, x_2893.y, x_2893.y)) + x_2896);
  let x_2898 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2897.x, x_2897.y, x_2897.z, x_2898.w);
  let x_2900 : vec4<f32> = u_xlat3;
  let x_2903 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2905 : vec2<f32> = (vec2<f32>(x_2900.y, x_2900.y) * vec2<f32>(x_2903.x, x_2903.y));
  let x_2906 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2905.x, x_2906.y, x_2905.y);
  let x_2909 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2911 : vec4<f32> = u_xlat3;
  let x_2914 : vec3<f32> = u_xlat10;
  let x_2916 : vec2<f32> = ((vec2<f32>(x_2909.x, x_2909.y) * vec2<f32>(x_2911.x, x_2911.x)) + vec2<f32>(x_2914.x, x_2914.z));
  let x_2917 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2916.x, x_2916.y, x_2917.z, x_2917.w);
  let x_2920 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2922 : vec4<f32> = u_xlat3;
  let x_2925 : vec4<f32> = u_xlat3;
  let x_2927 : vec2<f32> = ((vec2<f32>(x_2920.x, x_2920.y) * vec2<f32>(x_2922.z, x_2922.z)) + vec2<f32>(x_2925.x, x_2925.y));
  let x_2928 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2927.x, x_2927.y, x_2928.z, x_2928.w);
  let x_2930 : vec4<f32> = u_xlat3;
  let x_2932 : vec2<f32> = (vec2<f32>(x_2930.x, x_2930.y) + vec2<f32>(1.0f, 1.0f));
  let x_2933 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2932.x, x_2932.y, x_2933.z, x_2933.w);
  let x_2935 : vec4<f32> = u_xlat3;
  let x_2937 : vec2<f32> = (vec2<f32>(x_2935.x, x_2935.y) * vec2<f32>(0.5f, 0.5f));
  let x_2938 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2937.x, x_2937.y, x_2938.z, x_2938.w);
  let x_2940 : vec4<f32> = u_xlat3;
  let x_2944 : vec2<f32> = clamp(vec2<f32>(x_2940.x, x_2940.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2945 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2944.x, x_2944.y, x_2945.z, x_2945.w);
  let x_2950 : vec4<f32> = u_xlat3;
  let x_2953 : f32 = x_34.x_GlobalMipBias.x;
  let x_2954 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2950.x, x_2950.y), x_2953);
  u_xlat23 = x_2954.x;
  let x_2957 : f32 = u_xlat7.x;
  let x_2959 : f32 = u_xlat23;
  let x_2962 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2957) * x_2959) + x_2962);
  let x_2964 : f32 = u_xlat0;
  let x_2965 : f32 = u_xlat17;
  u_xlat24 = (x_2964 + -(x_2965));
  let x_2968 : f32 = u_xlat24;
  let x_2971 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2968) < x_2971);
  let x_2973 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2973);
  let x_2975 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2975);
  let x_2977 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2977);
  let x_2979 : f32 = u_xlat23;
  let x_2980 : f32 = u_xlat24;
  u_xlat23 = (x_2979 * x_2980);
  let x_2983 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2983) + 1.0f);
  let x_2987 : f32 = u_xlat17;
  let x_2989 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2987 * x_2989);
  let x_2992 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2994 : vec4<f32> = u_xlat3;
  let x_2998 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2992.x, x_2992.y, x_2992.z) * vec3<f32>(x_2994.x, x_2994.x, x_2994.x)) + vec3<f32>(x_2998.x, x_2998.y, x_2998.z));
  let x_3002 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_3004 : vec3<f32> = u_xlat10;
  let x_3007 : vec3<f32> = u_xlat4;
  let x_3008 : vec3<f32> = ((vec3<f32>(x_3002.x, x_3002.y, x_3002.z) * vec3<f32>(x_3004.x, x_3004.x, x_3004.x)) + x_3007);
  let x_3009 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3008.x, x_3008.y, x_3009.z, x_3008.z);
  let x_3012 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_3014 : f32 = u_xlat17;
  let x_3017 : vec4<f32> = u_xlat3;
  let x_3019 : vec3<f32> = ((vec3<f32>(x_3012.x, x_3012.y, x_3012.z) * vec3<f32>(x_3014, x_3014, x_3014)) + vec3<f32>(x_3017.x, x_3017.y, x_3017.w));
  let x_3020 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3019.x, x_3019.y, x_3019.z, x_3020.w);
  let x_3022 : vec3<f32> = u_xlat1;
  let x_3024 : vec4<f32> = u_xlat3;
  let x_3026 : vec3<f32> = (-(x_3022) + vec3<f32>(x_3024.x, x_3024.y, x_3024.z));
  let x_3027 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3026.x, x_3026.y, x_3026.z, x_3027.w);
  let x_3029 : vec4<f32> = u_xlat3;
  let x_3031 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_3029.x, x_3029.y, x_3029.z), x_3031);
  let x_3033 : f32 = u_xlat0;
  let x_3036 : f32 = u_xlat24;
  u_xlat24 = ((-(x_3033) * 0.004f) + x_3036);
  let x_3038 : f32 = u_xlat24;
  u_xlat24 = max(x_3038, 0.0f);
  let x_3040 : vec4<f32> = u_xlat3;
  let x_3042 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_3040.x, x_3040.y, x_3040.z), vec3<f32>(x_3042.x, x_3042.y, x_3042.z));
  let x_3047 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3047 + 0.0001f);
  let x_3051 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3051);
  let x_3055 : f32 = u_xlat3.x;
  let x_3056 : f32 = u_xlat24;
  u_xlat3.x = (x_3055 * x_3056);
  let x_3060 : f32 = u_xlat3.x;
  let x_3061 : f32 = u_xlat23;
  let x_3063 : f32 = u_xlat22;
  u_xlat22 = ((x_3060 * x_3061) + x_3063);
  let x_3065 : vec2<f32> = u_xlat14;
  let x_3067 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat14 = ((x_3065 * vec2<f32>(x_3067.z, x_3067.z)) + vec2<f32>(22.913000107f, 53.537002563f));
  let x_3074 : vec2<f32> = u_xlat14;
  u_xlat14.x = dot(x_3074, vec2<f32>(0.067110561f, 0.00583715f));
  let x_3078 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_3078);
  let x_3082 : f32 = u_xlat14.x;
  u_xlat14.x = (x_3082 * 52.982917786f);
  let x_3086 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_3086);
  let x_3089 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_3089.x, x_3089.x) + vec2<f32>(0.984375f, 0.125f));
  let x_3095 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_3095);
  let x_3099 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_3099 * 2.0f) + -1.0f);
  let x_3104 : f32 = u_xlat14.y;
  u_xlat14.x = (x_3104 * 6.283185482f);
  let x_3108 : f32 = u_xlat3.z;
  let x_3111 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_3108) * x_3111) + 1.0f);
  let x_3114 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_3114);
  let x_3117 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_3117);
  let x_3121 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_3121);
  let x_3124 : f32 = u_xlat21;
  let x_3126 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3124 * x_3126);
  let x_3129 : f32 = u_xlat21;
  let x_3131 : f32 = u_xlat4.x;
  u_xlat3.y = (x_3129 * x_3131);
  let x_3134 : vec3<f32> = u_xlat2;
  let x_3136 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(-(x_3134), vec3<f32>(x_3136.x, x_3136.y, x_3136.z));
  let x_3141 : f32 = u_xlat14.x;
  u_xlatb14 = (x_3141 >= 0.0f);
  let x_3143 : bool = u_xlatb14;
  if (x_3143) {
    let x_3147 : vec4<f32> = u_xlat3;
    x_3144 = -(vec3<f32>(x_3147.x, x_3147.y, x_3147.z));
  } else {
    let x_3151 : vec4<f32> = u_xlat3;
    x_3144 = vec3<f32>(x_3151.x, x_3151.y, x_3151.z);
  }
  let x_3153 : vec3<f32> = x_3144;
  let x_3154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3153.x, x_3153.y, x_3153.z, x_3154.w);
  let x_3156 : vec4<f32> = u_xlat3;
  let x_3159 : vec4<f32> = x_34.x_SSAOParams;
  let x_3162 : vec3<f32> = u_xlat1;
  let x_3163 : vec3<f32> = ((vec3<f32>(x_3156.x, x_3156.y, x_3156.z) * vec3<f32>(x_3159.y, x_3159.y, x_3159.y)) + x_3162);
  let x_3164 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3163.x, x_3163.y, x_3163.z, x_3164.w);
  let x_3166 : vec4<f32> = u_xlat3;
  let x_3169 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_3166.y, x_3166.y) * vec2<f32>(x_3169.x, x_3169.y));
  let x_3173 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_3175 : vec4<f32> = u_xlat3;
  let x_3178 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_3173.x, x_3173.y) * vec2<f32>(x_3175.x, x_3175.x)) + x_3178);
  let x_3181 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_3183 : vec4<f32> = u_xlat3;
  let x_3186 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_3181.x, x_3181.y) * vec2<f32>(x_3183.z, x_3183.z)) + x_3186);
  let x_3188 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_3188 + vec2<f32>(1.0f, 1.0f));
  let x_3190 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_3190 * vec2<f32>(0.5f, 0.5f));
  let x_3192 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_3192, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3199 : vec2<f32> = u_xlat14;
  let x_3201 : f32 = x_34.x_GlobalMipBias.x;
  let x_3202 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3199, x_3201);
  u_xlat23 = x_3202.x;
  let x_3205 : f32 = u_xlat7.x;
  let x_3207 : f32 = u_xlat23;
  let x_3210 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_3205) * x_3207) + x_3210);
  let x_3214 : f32 = u_xlat7.x;
  let x_3216 : f32 = u_xlat0;
  u_xlat3.x = (-(x_3214) + x_3216);
  let x_3220 : f32 = u_xlat3.x;
  let x_3223 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_3220) < x_3223);
  let x_3225 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_3225);
  let x_3228 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_3228);
  let x_3230 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_3230);
  let x_3232 : f32 = u_xlat23;
  let x_3234 : f32 = u_xlat3.x;
  u_xlat23 = (x_3232 * x_3234);
  let x_3237 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_3237) + 1.0f);
  let x_3241 : f32 = u_xlat7.x;
  let x_3243 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_3241 * x_3243);
  let x_3247 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_3249 : vec2<f32> = u_xlat14;
  let x_3253 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_3255 : vec3<f32> = ((vec3<f32>(x_3247.x, x_3247.y, x_3247.z) * vec3<f32>(x_3249.x, x_3249.x, x_3249.x)) + vec3<f32>(x_3253.x, x_3253.y, x_3253.z));
  let x_3256 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3255.x, x_3255.y, x_3255.z, x_3256.w);
  let x_3259 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_3261 : f32 = u_xlat21;
  let x_3264 : vec4<f32> = u_xlat3;
  let x_3266 : vec3<f32> = ((vec3<f32>(x_3259.x, x_3259.y, x_3259.z) * vec3<f32>(x_3261, x_3261, x_3261)) + vec3<f32>(x_3264.x, x_3264.y, x_3264.z));
  let x_3267 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3266.x, x_3266.y, x_3266.z, x_3267.w);
  let x_3270 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_3272 : vec3<f32> = u_xlat7;
  let x_3275 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_3270.x, x_3270.y, x_3270.z) * vec3<f32>(x_3272.x, x_3272.x, x_3272.x)) + vec3<f32>(x_3275.x, x_3275.y, x_3275.z));
  let x_3278 : vec3<f32> = u_xlat1;
  let x_3280 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_3278) + x_3280);
  let x_3282 : vec3<f32> = u_xlat7;
  let x_3283 : vec3<f32> = u_xlat2;
  u_xlat1.x = dot(x_3282, x_3283);
  let x_3286 : f32 = u_xlat0;
  let x_3290 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_3286) * 0.004f) + x_3290);
  let x_3294 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_3294, 0.0f);
  let x_3297 : vec3<f32> = u_xlat7;
  let x_3298 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_3297, x_3298);
  let x_3302 : f32 = u_xlat7.x;
  u_xlat7.x = (x_3302 + 0.0001f);
  let x_3306 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_3306);
  let x_3310 : f32 = u_xlat7.x;
  let x_3312 : f32 = u_xlat1.x;
  u_xlat7.x = (x_3310 * x_3312);
  let x_3316 : f32 = u_xlat7.x;
  let x_3317 : f32 = u_xlat23;
  let x_3319 : f32 = u_xlat22;
  u_xlat7.x = ((x_3316 * x_3317) + x_3319);
  let x_3323 : f32 = u_xlat7.x;
  let x_3325 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_3323 * x_3325);
  let x_3329 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_3329);
  let x_3332 : f32 = u_xlat0;
  let x_3335 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_3332) * x_3335) + 1.0f);
  let x_3338 : f32 = u_xlat0;
  let x_3339 : f32 = u_xlat0;
  u_xlat0 = (x_3338 * x_3339);
  let x_3342 : f32 = u_xlat7.x;
  let x_3344 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_3342 * x_3344);
  let x_3347 : f32 = u_xlat0;
  let x_3349 : f32 = u_xlat7.x;
  u_xlat0 = (x_3347 * x_3349);
  let x_3351 : f32 = u_xlat0;
  u_xlat0 = (x_3351 * 0.083333336f);
  let x_3354 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3354, 0.0f, 1.0f);
  let x_3356 : f32 = u_xlat0;
  u_xlat0 = log2(x_3356);
  let x_3358 : f32 = u_xlat0;
  u_xlat0 = (x_3358 * 0.600000024f);
  let x_3361 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3361);
  let x_3365 : vec3<f32> = u_xlat2;
  let x_3367 : vec3<f32> = ((x_3365 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3368 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3368.x, x_3367.x, x_3367.y, x_3367.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

