struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3330 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3762 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3871 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1584 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1717 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1789 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3396 : f32;
  var x_3407 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4164 : f32;
  var x_4177 : f32;
  var x_4229 : f32;
  var x_4240 : vec3<f32>;
  var x_4395 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_371 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_371);
      let x_374 : vec4<f32> = u_xlat7;
      let x_375 : vec2<f32> = vec2<f32>(x_374.x, x_374.y);
      let x_377 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec2;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat8.z = x_386;
      let x_389 : vec4<f32> = u_xlat7;
      let x_390 : vec2<f32> = vec2<f32>(x_389.z, x_389.w);
      let x_392 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_390.x, x_390.y, x_392);
      let x_399 : vec3<f32> = txVec3;
      let x_401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_399.xy, x_399.z);
      u_xlat8.w = x_401;
      let x_403 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_403, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_410 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_410 == 2.0f);
      let x_412 : bool = u_xlatb65;
      if (x_412) {
        let x_415 : vec4<f32> = u_xlat6;
        let x_418 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_423 : vec2<f32> = ((vec2<f32>(x_415.x, x_415.y) * vec2<f32>(x_418.z, x_418.w)) + vec2<f32>(0.5f, 0.5f));
        let x_424 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_423.x, x_423.y, x_424.z, x_424.w);
        let x_426 : vec4<f32> = u_xlat7;
        let x_428 : vec2<f32> = floor(vec2<f32>(x_426.x, x_426.y));
        let x_429 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_428.x, x_428.y, x_429.z, x_429.w);
        let x_433 : vec4<f32> = u_xlat6;
        let x_436 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_439 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_433.x, x_433.y) * vec2<f32>(x_436.z, x_436.w)) + -(vec2<f32>(x_439.x, x_439.y)));
        let x_443 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_443.x, x_443.x, x_443.y, x_443.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_448 : vec4<f32> = u_xlat8;
        let x_450 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_448.x, x_448.x, x_448.z, x_448.z) * vec4<f32>(x_450.x, x_450.x, x_450.z, x_450.z));
        let x_453 : vec4<f32> = u_xlat9;
        let x_457 : vec2<f32> = (vec2<f32>(x_453.y, x_453.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_458 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_457.x, x_458.y, x_457.y, x_458.w);
        let x_460 : vec4<f32> = u_xlat9;
        let x_463 : vec2<f32> = u_xlat49;
        let x_465 : vec2<f32> = ((vec2<f32>(x_460.x, x_460.z) * vec2<f32>(0.5f, 0.5f)) + -(x_463));
        let x_466 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_465.x, x_465.y, x_466.z, x_466.w);
        let x_469 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_469) + vec2<f32>(1.0f, 1.0f));
        let x_474 : vec2<f32> = u_xlat49;
        let x_476 : vec2<f32> = min(x_474, vec2<f32>(0.0f, 0.0f));
        let x_477 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat10;
        let x_482 : vec4<f32> = u_xlat10;
        let x_485 : vec2<f32> = u_xlat51;
        let x_486 : vec2<f32> = ((-(vec2<f32>(x_479.x, x_479.y)) * vec2<f32>(x_482.x, x_482.y)) + x_485);
        let x_487 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_489 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_489, vec2<f32>(0.0f, 0.0f));
        let x_491 : vec2<f32> = u_xlat49;
        let x_493 : vec2<f32> = u_xlat49;
        let x_495 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_491) * x_493) + vec2<f32>(x_495.y, x_495.w));
        let x_498 : vec4<f32> = u_xlat10;
        let x_500 : vec2<f32> = (vec2<f32>(x_498.x, x_498.y) + vec2<f32>(1.0f, 1.0f));
        let x_501 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_500.x, x_500.y, x_501.z, x_501.w);
        let x_503 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_503 + vec2<f32>(1.0f, 1.0f));
        let x_506 : vec4<f32> = u_xlat9;
        let x_510 : vec2<f32> = (vec2<f32>(x_506.x, x_506.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_511 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_510.x, x_510.y, x_511.z, x_511.w);
        let x_513 : vec2<f32> = u_xlat51;
        let x_514 : vec2<f32> = (x_513 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_515 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_514.x, x_514.y, x_515.z, x_515.w);
        let x_517 : vec4<f32> = u_xlat10;
        let x_519 : vec2<f32> = (vec2<f32>(x_517.x, x_517.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_520 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
        let x_523 : vec2<f32> = u_xlat49;
        let x_524 : vec2<f32> = (x_523 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_525 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_525.w);
        let x_527 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_527.y, x_527.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_531 : f32 = u_xlat10.x;
        u_xlat11.z = x_531;
        let x_534 : f32 = u_xlat49.x;
        u_xlat11.w = x_534;
        let x_537 : f32 = u_xlat12.x;
        u_xlat9.z = x_537;
        let x_540 : f32 = u_xlat8.x;
        u_xlat9.w = x_540;
        let x_543 : vec4<f32> = u_xlat9;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_543.z, x_543.w, x_543.x, x_543.z) + vec4<f32>(x_545.z, x_545.w, x_545.x, x_545.z));
        let x_549 : f32 = u_xlat11.y;
        u_xlat10.z = x_549;
        let x_552 : f32 = u_xlat49.y;
        u_xlat10.w = x_552;
        let x_555 : f32 = u_xlat9.y;
        u_xlat12.z = x_555;
        let x_558 : f32 = u_xlat8.z;
        u_xlat12.w = x_558;
        let x_560 : vec4<f32> = u_xlat10;
        let x_562 : vec4<f32> = u_xlat12;
        let x_564 : vec3<f32> = (vec3<f32>(x_560.z, x_560.y, x_560.w) + vec3<f32>(x_562.z, x_562.y, x_562.w));
        let x_565 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat9;
        let x_569 : vec4<f32> = u_xlat13;
        let x_571 : vec3<f32> = (vec3<f32>(x_567.x, x_567.z, x_567.w) / vec3<f32>(x_569.z, x_569.w, x_569.y));
        let x_572 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
        let x_574 : vec4<f32> = u_xlat9;
        let x_580 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_581 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_580.x, x_580.y, x_580.z, x_581.w);
        let x_583 : vec4<f32> = u_xlat12;
        let x_585 : vec4<f32> = u_xlat8;
        let x_587 : vec3<f32> = (vec3<f32>(x_583.z, x_583.y, x_583.w) / vec3<f32>(x_585.x, x_585.y, x_585.z));
        let x_588 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_587.x, x_587.y, x_587.z, x_588.w);
        let x_590 : vec4<f32> = u_xlat10;
        let x_592 : vec3<f32> = (vec3<f32>(x_590.x, x_590.y, x_590.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_595 : vec4<f32> = u_xlat9;
        let x_598 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_600 : vec3<f32> = (vec3<f32>(x_595.y, x_595.x, x_595.z) * vec3<f32>(x_598.x, x_598.x, x_598.x));
        let x_601 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_600.x, x_600.y, x_600.z, x_601.w);
        let x_603 : vec4<f32> = u_xlat10;
        let x_606 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_608 : vec3<f32> = (vec3<f32>(x_603.x, x_603.y, x_603.z) * vec3<f32>(x_606.y, x_606.y, x_606.y));
        let x_609 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_608.x, x_608.y, x_608.z, x_609.w);
        let x_612 : f32 = u_xlat10.x;
        u_xlat9.w = x_612;
        let x_614 : vec4<f32> = u_xlat7;
        let x_617 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_620 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y) * vec4<f32>(x_617.x, x_617.y, x_617.x, x_617.y)) + vec4<f32>(x_620.y, x_620.w, x_620.x, x_620.w));
        let x_623 : vec4<f32> = u_xlat7;
        let x_626 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_623.x, x_623.y) * vec2<f32>(x_626.x, x_626.y)) + vec2<f32>(x_629.z, x_629.w));
        let x_633 : f32 = u_xlat9.y;
        u_xlat10.w = x_633;
        let x_635 : vec4<f32> = u_xlat10;
        let x_636 : vec2<f32> = vec2<f32>(x_635.y, x_635.z);
        let x_637 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_637.x, x_636.x, x_637.z, x_636.y);
        let x_639 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_645 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y) * vec4<f32>(x_642.x, x_642.y, x_642.x, x_642.y)) + vec4<f32>(x_645.x, x_645.y, x_645.z, x_645.y));
        let x_648 : vec4<f32> = u_xlat7;
        let x_651 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_654 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_648.x, x_648.y, x_648.x, x_648.y) * vec4<f32>(x_651.x, x_651.y, x_651.x, x_651.y)) + vec4<f32>(x_654.w, x_654.y, x_654.w, x_654.z));
        let x_657 : vec4<f32> = u_xlat7;
        let x_660 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_663 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_657.x, x_657.y, x_657.x, x_657.y) * vec4<f32>(x_660.x, x_660.y, x_660.x, x_660.y)) + vec4<f32>(x_663.x, x_663.w, x_663.z, x_663.w));
        let x_667 : vec4<f32> = u_xlat8;
        let x_669 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_667.x, x_667.x, x_667.x, x_667.y) * vec4<f32>(x_669.z, x_669.w, x_669.y, x_669.z));
        let x_673 : vec4<f32> = u_xlat8;
        let x_675 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_673.y, x_673.y, x_673.z, x_673.z) * x_675);
        let x_679 : f32 = u_xlat8.z;
        let x_681 : f32 = u_xlat13.y;
        u_xlat65 = (x_679 * x_681);
        let x_684 : vec4<f32> = u_xlat11;
        let x_685 : vec2<f32> = vec2<f32>(x_684.x, x_684.y);
        let x_687 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_685.x, x_685.y, x_687);
        let x_695 : vec3<f32> = txVec4;
        let x_697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_695.xy, x_695.z);
        u_xlat67 = x_697;
        let x_699 : vec4<f32> = u_xlat11;
        let x_700 : vec2<f32> = vec2<f32>(x_699.z, x_699.w);
        let x_702 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_700.x, x_700.y, x_702);
        let x_710 : vec3<f32> = txVec5;
        let x_712 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_710.xy, x_710.z);
        u_xlat69 = x_712;
        let x_713 : f32 = u_xlat69;
        let x_715 : f32 = u_xlat14.y;
        u_xlat69 = (x_713 * x_715);
        let x_718 : f32 = u_xlat14.x;
        let x_719 : f32 = u_xlat67;
        let x_721 : f32 = u_xlat69;
        u_xlat67 = ((x_718 * x_719) + x_721);
        let x_724 : vec2<f32> = u_xlat49;
        let x_726 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_724.x, x_724.y, x_726);
        let x_733 : vec3<f32> = txVec6;
        let x_735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_733.xy, x_733.z);
        u_xlat69 = x_735;
        let x_737 : f32 = u_xlat14.z;
        let x_738 : f32 = u_xlat69;
        let x_740 : f32 = u_xlat67;
        u_xlat67 = ((x_737 * x_738) + x_740);
        let x_743 : vec4<f32> = u_xlat10;
        let x_744 : vec2<f32> = vec2<f32>(x_743.x, x_743.y);
        let x_746 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_744.x, x_744.y, x_746);
        let x_753 : vec3<f32> = txVec7;
        let x_755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_753.xy, x_753.z);
        u_xlat69 = x_755;
        let x_757 : f32 = u_xlat14.w;
        let x_758 : f32 = u_xlat69;
        let x_760 : f32 = u_xlat67;
        u_xlat67 = ((x_757 * x_758) + x_760);
        let x_763 : vec4<f32> = u_xlat12;
        let x_764 : vec2<f32> = vec2<f32>(x_763.x, x_763.y);
        let x_766 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_764.x, x_764.y, x_766);
        let x_773 : vec3<f32> = txVec8;
        let x_775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_773.xy, x_773.z);
        u_xlat69 = x_775;
        let x_777 : f32 = u_xlat15.x;
        let x_778 : f32 = u_xlat69;
        let x_780 : f32 = u_xlat67;
        u_xlat67 = ((x_777 * x_778) + x_780);
        let x_783 : vec4<f32> = u_xlat12;
        let x_784 : vec2<f32> = vec2<f32>(x_783.z, x_783.w);
        let x_786 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_784.x, x_784.y, x_786);
        let x_793 : vec3<f32> = txVec9;
        let x_795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_793.xy, x_793.z);
        u_xlat69 = x_795;
        let x_797 : f32 = u_xlat15.y;
        let x_798 : f32 = u_xlat69;
        let x_800 : f32 = u_xlat67;
        u_xlat67 = ((x_797 * x_798) + x_800);
        let x_803 : vec4<f32> = u_xlat10;
        let x_804 : vec2<f32> = vec2<f32>(x_803.z, x_803.w);
        let x_806 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_804.x, x_804.y, x_806);
        let x_813 : vec3<f32> = txVec10;
        let x_815 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_813.xy, x_813.z);
        u_xlat69 = x_815;
        let x_817 : f32 = u_xlat15.z;
        let x_818 : f32 = u_xlat69;
        let x_820 : f32 = u_xlat67;
        u_xlat67 = ((x_817 * x_818) + x_820);
        let x_823 : vec4<f32> = u_xlat9;
        let x_824 : vec2<f32> = vec2<f32>(x_823.x, x_823.y);
        let x_826 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec11;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat69 = x_835;
        let x_837 : f32 = u_xlat15.w;
        let x_838 : f32 = u_xlat69;
        let x_840 : f32 = u_xlat67;
        u_xlat67 = ((x_837 * x_838) + x_840);
        let x_843 : vec4<f32> = u_xlat9;
        let x_844 : vec2<f32> = vec2<f32>(x_843.z, x_843.w);
        let x_846 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_844.x, x_844.y, x_846);
        let x_853 : vec3<f32> = txVec12;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat69 = x_855;
        let x_856 : f32 = u_xlat65;
        let x_857 : f32 = u_xlat69;
        let x_859 : f32 = u_xlat67;
        u_xlat64 = ((x_856 * x_857) + x_859);
      } else {
        let x_862 : vec4<f32> = u_xlat6;
        let x_865 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_868 : vec2<f32> = ((vec2<f32>(x_862.x, x_862.y) * vec2<f32>(x_865.z, x_865.w)) + vec2<f32>(0.5f, 0.5f));
        let x_869 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_868.x, x_868.y, x_869.z, x_869.w);
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec2<f32> = floor(vec2<f32>(x_871.x, x_871.y));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_873.y, x_874.z, x_874.w);
        let x_876 : vec4<f32> = u_xlat6;
        let x_879 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_879.z, x_879.w)) + -(vec2<f32>(x_882.x, x_882.y)));
        let x_886 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_886.x, x_886.x, x_886.y, x_886.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_889 : vec4<f32> = u_xlat8;
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_889.x, x_889.x, x_889.z, x_889.z) * vec4<f32>(x_891.x, x_891.x, x_891.z, x_891.z));
        let x_894 : vec4<f32> = u_xlat9;
        let x_898 : vec2<f32> = (vec2<f32>(x_894.y, x_894.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_899 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_899.x, x_898.x, x_899.z, x_898.y);
        let x_901 : vec4<f32> = u_xlat9;
        let x_904 : vec2<f32> = u_xlat49;
        let x_906 : vec2<f32> = ((vec2<f32>(x_901.x, x_901.z) * vec2<f32>(0.5f, 0.5f)) + -(x_904));
        let x_907 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_906.x, x_907.y, x_906.y, x_907.w);
        let x_909 : vec2<f32> = u_xlat49;
        let x_911 : vec2<f32> = (-(x_909) + vec2<f32>(1.0f, 1.0f));
        let x_912 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_911.x, x_911.y, x_912.z, x_912.w);
        let x_914 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_914, vec2<f32>(0.0f, 0.0f));
        let x_916 : vec2<f32> = u_xlat51;
        let x_918 : vec2<f32> = u_xlat51;
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec2<f32> = ((-(x_916) * x_918) + vec2<f32>(x_920.x, x_920.y));
        let x_923 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_925, vec2<f32>(0.0f, 0.0f));
        let x_928 : vec2<f32> = u_xlat51;
        let x_930 : vec2<f32> = u_xlat51;
        let x_932 : vec4<f32> = u_xlat8;
        let x_934 : vec2<f32> = ((-(x_928) * x_930) + vec2<f32>(x_932.y, x_932.w));
        let x_935 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_934.x, x_935.y, x_934.y);
        let x_937 : vec4<f32> = u_xlat9;
        let x_940 : vec2<f32> = (vec2<f32>(x_937.x, x_937.y) + vec2<f32>(2.0f, 2.0f));
        let x_941 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_940.x, x_940.y, x_941.z, x_941.w);
        let x_943 : vec3<f32> = u_xlat29;
        let x_945 : vec2<f32> = (vec2<f32>(x_943.x, x_943.z) + vec2<f32>(2.0f, 2.0f));
        let x_946 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_946.x, x_945.x, x_946.z, x_945.y);
        let x_949 : f32 = u_xlat8.y;
        u_xlat11.z = (x_949 * 0.081632003f);
        let x_953 : vec4<f32> = u_xlat8;
        let x_956 : vec3<f32> = (vec3<f32>(x_953.z, x_953.x, x_953.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_957 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_956.x, x_956.y, x_956.z, x_957.w);
        let x_959 : vec4<f32> = u_xlat9;
        let x_962 : vec2<f32> = (vec2<f32>(x_959.x, x_959.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_963 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_962.x, x_962.y, x_963.z, x_963.w);
        let x_966 : f32 = u_xlat12.y;
        u_xlat11.x = x_966;
        let x_968 : vec2<f32> = u_xlat49;
        let x_975 : vec2<f32> = ((vec2<f32>(x_968.x, x_968.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_976.x, x_975.x, x_976.z, x_975.y);
        let x_978 : vec2<f32> = u_xlat49;
        let x_982 : vec2<f32> = ((vec2<f32>(x_978.x, x_978.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_983 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_982.x, x_983.y, x_982.y, x_983.w);
        let x_986 : f32 = u_xlat8.x;
        u_xlat9.y = x_986;
        let x_989 : f32 = u_xlat10.y;
        u_xlat9.w = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_991 + x_992);
        let x_994 : vec2<f32> = u_xlat49;
        let x_997 : vec2<f32> = ((vec2<f32>(x_994.y, x_994.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_998 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_998.x, x_997.x, x_998.z, x_997.y);
        let x_1000 : vec2<f32> = u_xlat49;
        let x_1003 : vec2<f32> = ((vec2<f32>(x_1000.y, x_1000.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1004 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1003.x, x_1004.y, x_1003.y, x_1004.w);
        let x_1007 : f32 = u_xlat8.y;
        u_xlat10.y = x_1007;
        let x_1009 : vec4<f32> = u_xlat10;
        let x_1010 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1009 + x_1010);
        let x_1012 : vec4<f32> = u_xlat9;
        let x_1013 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1012 / x_1013);
        let x_1015 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1015 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1021 : vec4<f32> = u_xlat10;
        let x_1022 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1021 / x_1022);
        let x_1024 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1024 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1026 : vec4<f32> = u_xlat9;
        let x_1029 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1026.w, x_1026.x, x_1026.y, x_1026.z) * vec4<f32>(x_1029.x, x_1029.x, x_1029.x, x_1029.x));
        let x_1032 : vec4<f32> = u_xlat10;
        let x_1035 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1032.x, x_1032.w, x_1032.y, x_1032.z) * vec4<f32>(x_1035.y, x_1035.y, x_1035.y, x_1035.y));
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1039 : vec3<f32> = vec3<f32>(x_1038.y, x_1038.z, x_1038.w);
        let x_1040 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1039.x, x_1040.y, x_1039.y, x_1039.z);
        let x_1043 : f32 = u_xlat10.x;
        u_xlat12.y = x_1043;
        let x_1045 : vec4<f32> = u_xlat7;
        let x_1048 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1051 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1045.x, x_1045.y, x_1045.x, x_1045.y) * vec4<f32>(x_1048.x, x_1048.y, x_1048.x, x_1048.y)) + vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1051.y));
        let x_1054 : vec4<f32> = u_xlat7;
        let x_1057 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1060 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1054.x, x_1054.y) * vec2<f32>(x_1057.x, x_1057.y)) + vec2<f32>(x_1060.w, x_1060.y));
        let x_1064 : f32 = u_xlat12.y;
        u_xlat9.y = x_1064;
        let x_1067 : f32 = u_xlat10.z;
        u_xlat12.y = x_1067;
        let x_1069 : vec4<f32> = u_xlat7;
        let x_1072 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1075 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1069.x, x_1069.y, x_1069.x, x_1069.y) * vec4<f32>(x_1072.x, x_1072.y, x_1072.x, x_1072.y)) + vec4<f32>(x_1075.x, x_1075.y, x_1075.z, x_1075.y));
        let x_1078 : vec4<f32> = u_xlat7;
        let x_1081 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1084 : vec4<f32> = u_xlat12;
        let x_1086 : vec2<f32> = ((vec2<f32>(x_1078.x, x_1078.y) * vec2<f32>(x_1081.x, x_1081.y)) + vec2<f32>(x_1084.w, x_1084.y));
        let x_1087 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
        let x_1090 : f32 = u_xlat12.y;
        u_xlat9.z = x_1090;
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1096 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1099 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.y) * vec4<f32>(x_1096.x, x_1096.y, x_1096.x, x_1096.y)) + vec4<f32>(x_1099.x, x_1099.y, x_1099.x, x_1099.z));
        let x_1103 : f32 = u_xlat10.w;
        u_xlat12.y = x_1103;
        let x_1106 : vec4<f32> = u_xlat7;
        let x_1109 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1112 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1106.x, x_1106.y, x_1106.x, x_1106.y) * vec4<f32>(x_1109.x, x_1109.y, x_1109.x, x_1109.y)) + vec4<f32>(x_1112.x, x_1112.y, x_1112.z, x_1112.y));
        let x_1116 : vec4<f32> = u_xlat7;
        let x_1119 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1119.x, x_1119.y)) + vec2<f32>(x_1122.w, x_1122.y));
        let x_1126 : f32 = u_xlat12.y;
        u_xlat9.w = x_1126;
        let x_1129 : vec4<f32> = u_xlat7;
        let x_1132 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1135 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1129.x, x_1129.y) * vec2<f32>(x_1132.x, x_1132.y)) + vec2<f32>(x_1135.x, x_1135.w));
        let x_1138 : vec4<f32> = u_xlat12;
        let x_1139 : vec3<f32> = vec3<f32>(x_1138.x, x_1138.z, x_1138.w);
        let x_1140 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1139.x, x_1140.y, x_1139.y, x_1139.z);
        let x_1142 : vec4<f32> = u_xlat7;
        let x_1145 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1148 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1142.x, x_1142.y, x_1142.x, x_1142.y) * vec4<f32>(x_1145.x, x_1145.y, x_1145.x, x_1145.y)) + vec4<f32>(x_1148.x, x_1148.y, x_1148.z, x_1148.y));
        let x_1152 : vec4<f32> = u_xlat7;
        let x_1155 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1158 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1152.x, x_1152.y) * vec2<f32>(x_1155.x, x_1155.y)) + vec2<f32>(x_1158.w, x_1158.y));
        let x_1162 : f32 = u_xlat9.x;
        u_xlat10.x = x_1162;
        let x_1164 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1170 : vec4<f32> = u_xlat10;
        let x_1172 : vec2<f32> = ((vec2<f32>(x_1164.x, x_1164.y) * vec2<f32>(x_1167.x, x_1167.y)) + vec2<f32>(x_1170.x, x_1170.y));
        let x_1173 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1172.x, x_1172.y, x_1173.z, x_1173.w);
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1176.x, x_1176.x, x_1176.x, x_1176.x) * x_1178);
        let x_1181 : vec4<f32> = u_xlat8;
        let x_1183 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1181.y, x_1181.y, x_1181.y, x_1181.y) * x_1183);
        let x_1186 : vec4<f32> = u_xlat8;
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1186.z, x_1186.z, x_1186.z, x_1186.z) * x_1188);
        let x_1190 : vec4<f32> = u_xlat8;
        let x_1192 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1190.w, x_1190.w, x_1190.w, x_1190.w) * x_1192);
        let x_1195 : vec4<f32> = u_xlat13;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.x, x_1195.y);
        let x_1198 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec13;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat65 = x_1207;
        let x_1209 : vec4<f32> = u_xlat13;
        let x_1210 : vec2<f32> = vec2<f32>(x_1209.z, x_1209.w);
        let x_1212 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1210.x, x_1210.y, x_1212);
        let x_1219 : vec3<f32> = txVec14;
        let x_1221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1219.xy, x_1219.z);
        u_xlat67 = x_1221;
        let x_1222 : f32 = u_xlat67;
        let x_1224 : f32 = u_xlat18.y;
        u_xlat67 = (x_1222 * x_1224);
        let x_1227 : f32 = u_xlat18.x;
        let x_1228 : f32 = u_xlat65;
        let x_1230 : f32 = u_xlat67;
        u_xlat65 = ((x_1227 * x_1228) + x_1230);
        let x_1233 : vec2<f32> = u_xlat49;
        let x_1235 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1233.x, x_1233.y, x_1235);
        let x_1242 : vec3<f32> = txVec15;
        let x_1244 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1242.xy, x_1242.z);
        u_xlat67 = x_1244;
        let x_1246 : f32 = u_xlat18.z;
        let x_1247 : f32 = u_xlat67;
        let x_1249 : f32 = u_xlat65;
        u_xlat65 = ((x_1246 * x_1247) + x_1249);
        let x_1252 : vec4<f32> = u_xlat16;
        let x_1253 : vec2<f32> = vec2<f32>(x_1252.x, x_1252.y);
        let x_1255 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1253.x, x_1253.y, x_1255);
        let x_1262 : vec3<f32> = txVec16;
        let x_1264 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1262.xy, x_1262.z);
        u_xlat67 = x_1264;
        let x_1266 : f32 = u_xlat18.w;
        let x_1267 : f32 = u_xlat67;
        let x_1269 : f32 = u_xlat65;
        u_xlat65 = ((x_1266 * x_1267) + x_1269);
        let x_1272 : vec4<f32> = u_xlat14;
        let x_1273 : vec2<f32> = vec2<f32>(x_1272.x, x_1272.y);
        let x_1275 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1273.x, x_1273.y, x_1275);
        let x_1282 : vec3<f32> = txVec17;
        let x_1284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1282.xy, x_1282.z);
        u_xlat67 = x_1284;
        let x_1286 : f32 = u_xlat19.x;
        let x_1287 : f32 = u_xlat67;
        let x_1289 : f32 = u_xlat65;
        u_xlat65 = ((x_1286 * x_1287) + x_1289);
        let x_1292 : vec4<f32> = u_xlat14;
        let x_1293 : vec2<f32> = vec2<f32>(x_1292.z, x_1292.w);
        let x_1295 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1293.x, x_1293.y, x_1295);
        let x_1302 : vec3<f32> = txVec18;
        let x_1304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1302.xy, x_1302.z);
        u_xlat67 = x_1304;
        let x_1306 : f32 = u_xlat19.y;
        let x_1307 : f32 = u_xlat67;
        let x_1309 : f32 = u_xlat65;
        u_xlat65 = ((x_1306 * x_1307) + x_1309);
        let x_1312 : vec4<f32> = u_xlat15;
        let x_1313 : vec2<f32> = vec2<f32>(x_1312.x, x_1312.y);
        let x_1315 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1313.x, x_1313.y, x_1315);
        let x_1322 : vec3<f32> = txVec19;
        let x_1324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1322.xy, x_1322.z);
        u_xlat67 = x_1324;
        let x_1326 : f32 = u_xlat19.z;
        let x_1327 : f32 = u_xlat67;
        let x_1329 : f32 = u_xlat65;
        u_xlat65 = ((x_1326 * x_1327) + x_1329);
        let x_1332 : vec4<f32> = u_xlat16;
        let x_1333 : vec2<f32> = vec2<f32>(x_1332.z, x_1332.w);
        let x_1335 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1333.x, x_1333.y, x_1335);
        let x_1342 : vec3<f32> = txVec20;
        let x_1344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1342.xy, x_1342.z);
        u_xlat67 = x_1344;
        let x_1346 : f32 = u_xlat19.w;
        let x_1347 : f32 = u_xlat67;
        let x_1349 : f32 = u_xlat65;
        u_xlat65 = ((x_1346 * x_1347) + x_1349);
        let x_1352 : vec4<f32> = u_xlat17;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.x, x_1352.y);
        let x_1355 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec21;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat67 = x_1364;
        let x_1366 : f32 = u_xlat20.x;
        let x_1367 : f32 = u_xlat67;
        let x_1369 : f32 = u_xlat65;
        u_xlat65 = ((x_1366 * x_1367) + x_1369);
        let x_1372 : vec4<f32> = u_xlat17;
        let x_1373 : vec2<f32> = vec2<f32>(x_1372.z, x_1372.w);
        let x_1375 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1373.x, x_1373.y, x_1375);
        let x_1382 : vec3<f32> = txVec22;
        let x_1384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1382.xy, x_1382.z);
        u_xlat67 = x_1384;
        let x_1386 : f32 = u_xlat20.y;
        let x_1387 : f32 = u_xlat67;
        let x_1389 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1387) + x_1389);
        let x_1392 : vec2<f32> = u_xlat30;
        let x_1394 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1392.x, x_1392.y, x_1394);
        let x_1401 : vec3<f32> = txVec23;
        let x_1403 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1401.xy, x_1401.z);
        u_xlat67 = x_1403;
        let x_1405 : f32 = u_xlat20.z;
        let x_1406 : f32 = u_xlat67;
        let x_1408 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1406) + x_1408);
        let x_1411 : vec2<f32> = u_xlat57;
        let x_1413 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec24;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat67 = x_1422;
        let x_1424 : f32 = u_xlat20.w;
        let x_1425 : f32 = u_xlat67;
        let x_1427 : f32 = u_xlat65;
        u_xlat65 = ((x_1424 * x_1425) + x_1427);
        let x_1430 : vec4<f32> = u_xlat12;
        let x_1431 : vec2<f32> = vec2<f32>(x_1430.x, x_1430.y);
        let x_1433 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1431.x, x_1431.y, x_1433);
        let x_1440 : vec3<f32> = txVec25;
        let x_1442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1440.xy, x_1440.z);
        u_xlat67 = x_1442;
        let x_1444 : f32 = u_xlat8.x;
        let x_1445 : f32 = u_xlat67;
        let x_1447 : f32 = u_xlat65;
        u_xlat65 = ((x_1444 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat12;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.z, x_1450.w);
        let x_1453 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec26;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat67 = x_1462;
        let x_1464 : f32 = u_xlat8.y;
        let x_1465 : f32 = u_xlat67;
        let x_1467 : f32 = u_xlat65;
        u_xlat65 = ((x_1464 * x_1465) + x_1467);
        let x_1470 : vec2<f32> = u_xlat52;
        let x_1472 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1470.x, x_1470.y, x_1472);
        let x_1479 : vec3<f32> = txVec27;
        let x_1481 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1479.xy, x_1479.z);
        u_xlat67 = x_1481;
        let x_1483 : f32 = u_xlat8.z;
        let x_1484 : f32 = u_xlat67;
        let x_1486 : f32 = u_xlat65;
        u_xlat65 = ((x_1483 * x_1484) + x_1486);
        let x_1489 : vec4<f32> = u_xlat7;
        let x_1490 : vec2<f32> = vec2<f32>(x_1489.x, x_1489.y);
        let x_1492 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1490.x, x_1490.y, x_1492);
        let x_1499 : vec3<f32> = txVec28;
        let x_1501 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1499.xy, x_1499.z);
        u_xlat67 = x_1501;
        let x_1503 : f32 = u_xlat8.w;
        let x_1504 : f32 = u_xlat67;
        let x_1506 : f32 = u_xlat65;
        u_xlat64 = ((x_1503 * x_1504) + x_1506);
      }
    }
  } else {
    let x_1510 : vec4<f32> = u_xlat6;
    let x_1511 : vec2<f32> = vec2<f32>(x_1510.x, x_1510.y);
    let x_1513 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
    let x_1520 : vec3<f32> = txVec29;
    let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
    u_xlat64 = x_1522;
  }
  let x_1524 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1524) + 1.0f);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1531 : f32 = u_xlat65;
  u_xlat64 = ((x_1527 * x_1529) + x_1531);
  let x_1535 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1535);
  let x_1539 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1539 >= 1.0f);
  let x_1541 : bool = u_xlatb67;
  let x_1542 : bool = u_xlatb6;
  u_xlatb67 = (x_1541 | x_1542);
  let x_1544 : bool = u_xlatb67;
  let x_1545 : f32 = u_xlat64;
  u_xlat64 = select(x_1545, 1.0f, x_1544);
  let x_1547 : vec3<f32> = u_xlat0;
  let x_1549 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1547, -(vec3<f32>(x_1549.x, x_1549.y, x_1549.z)));
  let x_1555 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1555, 0.0f, 1.0f);
  let x_1558 : f32 = u_xlat64;
  let x_1562 : vec4<f32> = x_90.x_MainLightColor;
  let x_1564 : vec3<f32> = (vec3<f32>(x_1558, x_1558, x_1558) * vec3<f32>(x_1562.x, x_1562.y, x_1562.z));
  let x_1565 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1564.x, x_1564.y, x_1564.z, x_1565.w);
  let x_1567 : vec3<f32> = u_xlat0;
  let x_1569 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1567.x, x_1567.x, x_1567.x) * vec3<f32>(x_1569.x, x_1569.y, x_1569.z));
  let x_1572 : vec3<f32> = u_xlat0;
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1572 * vec3<f32>(x_1573.x, x_1573.y, x_1573.z));
  let x_1577 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1577 < 0.0f);
  let x_1580 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1580 + 1.0f);
  let x_1583 : bool = u_xlatb64;
  if (x_1583) {
    let x_1588 : f32 = u_xlat3.x;
    x_1584 = x_1588;
  } else {
    let x_1591 : f32 = x_161.unity_LODFade.x;
    x_1584 = x_1591;
  }
  let x_1592 : f32 = x_1584;
  u_xlat64 = x_1592;
  let x_1594 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1594);
  let x_1596 : vec3<f32> = u_xlat1;
  let x_1600 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1596) * vec3<f32>(x_1600.x, x_1600.y, x_1600.x));
  let x_1606 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1606);
  let x_1610 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1610 * 1025u);
  let x_1614 : u32 = u_xlatu43;
  u_xlatu24 = (x_1614 >> 6u);
  let x_1618 : u32 = u_xlatu43;
  let x_1619 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1618 ^ x_1619));
  let x_1622 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1622) * 9u);
  let x_1626 : u32 = u_xlatu43;
  u_xlatu24 = (x_1626 >> 11u);
  let x_1629 : u32 = u_xlatu43;
  let x_1630 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1629 ^ x_1630));
  let x_1633 : i32 = u_xlati43;
  u_xlati43 = (x_1633 * 32769i);
  let x_1637 : i32 = u_xlati43;
  let x_1640 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1637) ^ x_1640));
  let x_1644 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1644) * 1025u);
  let x_1647 : u32 = u_xlatu22;
  u_xlatu43 = (x_1647 >> 6u);
  let x_1649 : u32 = u_xlatu43;
  let x_1650 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1649 ^ x_1650));
  let x_1653 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1653) * 9u);
  let x_1656 : u32 = u_xlatu22;
  u_xlatu43 = (x_1656 >> 11u);
  let x_1658 : u32 = u_xlatu43;
  let x_1659 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1658 ^ x_1659));
  let x_1662 : i32 = u_xlati22;
  u_xlati22 = (x_1662 * 32769i);
  let x_1665 : i32 = u_xlati22;
  let x_1668 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1665) ^ x_1668));
  let x_1671 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1671) * 1025u);
  let x_1676 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1676 >> 6u);
  let x_1678 : u32 = u_xlatu22;
  let x_1680 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1678 ^ x_1680));
  let x_1683 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1683) * 9u);
  let x_1688 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1688 >> 11u);
  let x_1690 : u32 = u_xlatu22;
  let x_1692 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1690 ^ x_1692));
  let x_1695 : i32 = u_xlati1;
  u_xlati1 = (x_1695 * 32769i);
  param = 1065353216i;
  let x_1701 : i32 = u_xlati1;
  param_1 = x_1701;
  param_2 = 0i;
  param_3 = 23i;
  let x_1704 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1704);
  let x_1708 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1708 + -1.0f);
  let x_1713 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1713) + 1.0f);
  let x_1716 : bool = u_xlatb3;
  if (x_1716) {
    let x_1721 : f32 = u_xlat1.x;
    x_1717 = x_1721;
  } else {
    let x_1723 : f32 = u_xlat22;
    x_1717 = x_1723;
  }
  let x_1724 : f32 = x_1717;
  u_xlat1.x = x_1724;
  let x_1726 : f32 = u_xlat64;
  let x_1729 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1726 * 2.0f) + -(x_1729));
  let x_1734 : f32 = u_xlat1.x;
  let x_1736 : f32 = u_xlat3.w;
  u_xlat22 = (x_1734 * x_1736);
  let x_1741 : f32 = u_xlat22;
  u_xlatb43.x = (x_1741 >= 0.400000006f);
  let x_1747 : bool = u_xlatb43.x;
  let x_1748 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1748, x_1747);
  let x_1752 : f32 = u_xlat3.w;
  let x_1754 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1752 * x_1754) + -0.400000006f);
  let x_1759 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1761);
  let x_1763 : f32 = u_xlat22;
  let x_1765 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1763) + abs(x_1765));
  let x_1768 : f32 = u_xlat22;
  u_xlat22 = max(x_1768, 0.0001f);
  let x_1772 : f32 = u_xlat1.x;
  let x_1773 : f32 = u_xlat22;
  u_xlat1.x = (x_1772 / x_1773);
  let x_1777 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1777 + 0.5f);
  let x_1781 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1781, 0.0f, 1.0f);
  let x_1786 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1786 == 0.0f));
  let x_1788 : bool = u_xlatb22;
  if (x_1788) {
    let x_1793 : f32 = u_xlat1.x;
    x_1789 = x_1793;
  } else {
    let x_1796 : f32 = u_xlat43.x;
    x_1789 = x_1796;
  }
  let x_1797 : f32 = x_1789;
  u_xlat1.x = x_1797;
  let x_1800 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1800 + -0.0001f);
  let x_1805 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1805 < 0.0f);
  let x_1809 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1809) * -1i) != 0i)) {
    discard;
  }
  let x_1819 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1819);
  let x_1823 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1823 >= 0.0f);
  let x_1827 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1827);
  let x_1831 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1831);
  let x_1835 : f32 = u_xlat43.y;
  let x_1837 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1835 * x_1837);
  let x_1840 : vec3<f32> = vs_INTERP1;
  let x_1842 : vec4<f32> = vs_INTERP2;
  let x_1844 : vec3<f32> = (vec3<f32>(x_1840.z, x_1840.x, x_1840.y) * vec3<f32>(x_1842.y, x_1842.z, x_1842.x));
  let x_1845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1844.x, x_1844.y, x_1844.z, x_1845.w);
  let x_1847 : vec3<f32> = vs_INTERP1;
  let x_1849 : vec4<f32> = vs_INTERP2;
  let x_1852 : vec4<f32> = u_xlat3;
  let x_1855 : vec3<f32> = ((vec3<f32>(x_1847.y, x_1847.z, x_1847.x) * vec3<f32>(x_1849.z, x_1849.x, x_1849.y)) + -(vec3<f32>(x_1852.x, x_1852.y, x_1852.z)));
  let x_1856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1855.x, x_1855.y, x_1855.z, x_1856.w);
  let x_1858 : vec2<f32> = u_xlat43;
  let x_1860 : vec4<f32> = u_xlat3;
  let x_1862 : vec3<f32> = (vec3<f32>(x_1858.x, x_1858.x, x_1858.x) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z));
  let x_1863 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1862.x, x_1862.y, x_1862.z, x_1863.w);
  let x_1865 : vec4<f32> = u_xlat3;
  let x_1867 : vec3<f32> = u_xlat26;
  let x_1869 : vec3<f32> = (vec3<f32>(x_1865.x, x_1865.y, x_1865.z) * vec3<f32>(x_1867.y, x_1867.y, x_1867.y));
  let x_1870 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1869.x, x_1869.y, x_1869.z, x_1870.w);
  let x_1872 : vec3<f32> = u_xlat26;
  let x_1874 : vec4<f32> = vs_INTERP2;
  let x_1877 : vec4<f32> = u_xlat3;
  let x_1879 : vec3<f32> = ((vec3<f32>(x_1872.x, x_1872.x, x_1872.x) * vec3<f32>(x_1874.x, x_1874.y, x_1874.z)) + vec3<f32>(x_1877.x, x_1877.y, x_1877.z));
  let x_1880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1879.x, x_1879.y, x_1879.z, x_1880.w);
  let x_1882 : vec3<f32> = u_xlat26;
  let x_1884 : vec3<f32> = vs_INTERP1;
  let x_1886 : vec4<f32> = u_xlat3;
  let x_1888 : vec3<f32> = ((vec3<f32>(x_1882.z, x_1882.z, x_1882.z) * x_1884) + vec3<f32>(x_1886.x, x_1886.y, x_1886.z));
  let x_1889 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
  let x_1891 : vec4<f32> = u_xlat3;
  let x_1893 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1891.x, x_1891.y, x_1891.z), vec3<f32>(x_1893.x, x_1893.y, x_1893.z));
  let x_1898 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1898);
  let x_1901 : vec2<f32> = u_xlat43;
  let x_1903 : vec4<f32> = u_xlat3;
  let x_1905 : vec3<f32> = (vec3<f32>(x_1901.x, x_1901.x, x_1901.x) * vec3<f32>(x_1903.x, x_1903.y, x_1903.z));
  let x_1906 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1905.x, x_1905.y, x_1905.z, x_1906.w);
  let x_1915 : vec2<f32> = vs_INTERP5;
  let x_1917 : f32 = x_90.x_GlobalMipBias.x;
  let x_1918 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1915, x_1917);
  u_xlat6 = x_1918;
  let x_1923 : vec2<f32> = vs_INTERP5;
  let x_1925 : f32 = x_90.x_GlobalMipBias.x;
  let x_1926 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1923, x_1925);
  u_xlat26 = vec3<f32>(x_1926.x, x_1926.y, x_1926.z);
  let x_1928 : vec4<f32> = u_xlat6;
  let x_1931 : vec3<f32> = (vec3<f32>(x_1928.x, x_1928.y, x_1928.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1932 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1931.x, x_1931.y, x_1931.z, x_1932.w);
  let x_1934 : vec4<f32> = u_xlat3;
  let x_1936 : vec4<f32> = u_xlat6;
  u_xlat43.x = dot(vec3<f32>(x_1934.x, x_1934.y, x_1934.z), vec3<f32>(x_1936.x, x_1936.y, x_1936.z));
  let x_1941 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1941 + 0.5f);
  let x_1944 : vec2<f32> = u_xlat43;
  let x_1946 : vec3<f32> = u_xlat26;
  u_xlat26 = (vec3<f32>(x_1944.x, x_1944.x, x_1944.x) * x_1946);
  let x_1949 : f32 = u_xlat6.w;
  u_xlat43.x = max(x_1949, 0.0001f);
  let x_1952 : vec3<f32> = u_xlat26;
  let x_1953 : vec2<f32> = u_xlat43;
  u_xlat26 = (x_1952 / vec3<f32>(x_1953.x, x_1953.x, x_1953.x));
  let x_1957 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1958 : vec2<f32> = vec2<f32>(x_1957.x, x_1957.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1958.x, x_1958.y));
  let x_1963 : vec2<f32> = u_xlat43;
  let x_1964 : vec4<f32> = hlslcc_FragCoord;
  let x_1966 : vec2<f32> = (x_1963 * vec2<f32>(x_1964.x, x_1964.y));
  let x_1967 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1966.x, x_1966.y, x_1967.z, x_1967.w);
  let x_1970 : f32 = u_xlat6.y;
  let x_1973 : f32 = x_90.x_ScaleBiasRt.x;
  let x_1976 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1970 * x_1973) + x_1976);
  let x_1980 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_1980) + 1.0f);
  let x_1985 : f32 = u_xlat5.x;
  u_xlat5.x = x_1985;
  let x_1988 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1988, 0.0f, 1.0f);
  let x_1992 : f32 = u_xlat1.x;
  u_xlat1.x = x_1992;
  let x_1995 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1995, 0.0f, 1.0f);
  let x_1998 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1998 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2003 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_2003) + 1.0f);
  let x_2008 : f32 = u_xlat43.x;
  let x_2010 : f32 = u_xlat43.x;
  u_xlat64 = (x_2008 * x_2010);
  let x_2012 : f32 = u_xlat64;
  u_xlat64 = max(x_2012, 0.0078125f);
  let x_2016 : f32 = u_xlat64;
  let x_2017 : f32 = u_xlat64;
  u_xlat66 = (x_2016 * x_2017);
  let x_2020 : f32 = u_xlat5.x;
  u_xlat67 = (x_2020 + 0.040000021f);
  let x_2023 : f32 = u_xlat67;
  u_xlat67 = min(x_2023, 1.0f);
  let x_2025 : f32 = u_xlat64;
  u_xlat5.x = ((x_2025 * 4.0f) + 2.0f);
  let x_2035 : vec4<f32> = u_xlat6;
  let x_2038 : f32 = x_90.x_GlobalMipBias.x;
  let x_2039 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2035.x, x_2035.z), x_2038);
  u_xlat6.x = x_2039.x;
  let x_2044 : f32 = u_xlat6.x;
  u_xlat27 = (x_2044 + -1.0f);
  let x_2048 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2049 : f32 = u_xlat27;
  u_xlat27 = ((x_2048 * x_2049) + 1.0f);
  let x_2053 : f32 = u_xlat6.x;
  let x_2055 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2053, x_2055);
  let x_2058 : bool = u_xlatb63;
  if (x_2058) {
    let x_2062 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2062 == 1.0f);
    let x_2064 : bool = u_xlatb63;
    if (x_2064) {
      let x_2068 : vec4<f32> = vs_INTERP9;
      let x_2071 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2068.x, x_2068.y, x_2068.x, x_2068.y) + x_2071);
      let x_2074 : vec4<f32> = u_xlat7;
      let x_2075 : vec2<f32> = vec2<f32>(x_2074.x, x_2074.y);
      let x_2077 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2075.x, x_2075.y, x_2077);
      let x_2084 : vec3<f32> = txVec30;
      let x_2086 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2084.xy, x_2084.z);
      u_xlat8.x = x_2086;
      let x_2089 : vec4<f32> = u_xlat7;
      let x_2090 : vec2<f32> = vec2<f32>(x_2089.z, x_2089.w);
      let x_2092 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2090.x, x_2090.y, x_2092);
      let x_2099 : vec3<f32> = txVec31;
      let x_2101 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2099.xy, x_2099.z);
      u_xlat8.y = x_2101;
      let x_2103 : vec4<f32> = vs_INTERP9;
      let x_2106 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2103.x, x_2103.y, x_2103.x, x_2103.y) + x_2106);
      let x_2109 : vec4<f32> = u_xlat7;
      let x_2110 : vec2<f32> = vec2<f32>(x_2109.x, x_2109.y);
      let x_2112 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2110.x, x_2110.y, x_2112);
      let x_2119 : vec3<f32> = txVec32;
      let x_2121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2119.xy, x_2119.z);
      u_xlat8.z = x_2121;
      let x_2124 : vec4<f32> = u_xlat7;
      let x_2125 : vec2<f32> = vec2<f32>(x_2124.z, x_2124.w);
      let x_2127 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2125.x, x_2125.y, x_2127);
      let x_2134 : vec3<f32> = txVec33;
      let x_2136 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2134.xy, x_2134.z);
      u_xlat8.w = x_2136;
      let x_2138 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2138, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2143 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_2143 == 2.0f);
      let x_2147 : bool = u_xlatb48.x;
      if (x_2147) {
        let x_2151 : vec4<f32> = vs_INTERP9;
        let x_2154 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2151.x, x_2151.y) * vec2<f32>(x_2154.z, x_2154.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2158 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2158);
        let x_2160 : vec4<f32> = vs_INTERP9;
        let x_2163 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2166 : vec2<f32> = u_xlat48;
        let x_2168 : vec2<f32> = ((vec2<f32>(x_2160.x, x_2160.y) * vec2<f32>(x_2163.z, x_2163.w)) + -(x_2166));
        let x_2169 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2168.x, x_2168.y, x_2169.z, x_2169.w);
        let x_2171 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2171.x, x_2171.x, x_2171.y, x_2171.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2174 : vec4<f32> = u_xlat8;
        let x_2176 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2174.x, x_2174.x, x_2174.z, x_2174.z) * vec4<f32>(x_2176.x, x_2176.x, x_2176.z, x_2176.z));
        let x_2179 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2179.y, x_2179.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2182 : vec4<f32> = u_xlat9;
        let x_2185 : vec4<f32> = u_xlat7;
        let x_2188 : vec2<f32> = ((vec2<f32>(x_2182.x, x_2182.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2185.x, x_2185.y)));
        let x_2189 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2188.x, x_2189.y, x_2188.y, x_2189.w);
        let x_2191 : vec4<f32> = u_xlat7;
        let x_2194 : vec2<f32> = (-(vec2<f32>(x_2191.x, x_2191.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2195 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2194.x, x_2194.y, x_2195.z, x_2195.w);
        let x_2197 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2197.x, x_2197.y), vec2<f32>(0.0f, 0.0f));
        let x_2200 : vec2<f32> = u_xlat51;
        let x_2202 : vec2<f32> = u_xlat51;
        let x_2204 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2200) * x_2202) + vec2<f32>(x_2204.x, x_2204.y));
        let x_2207 : vec4<f32> = u_xlat7;
        let x_2209 : vec2<f32> = max(vec2<f32>(x_2207.x, x_2207.y), vec2<f32>(0.0f, 0.0f));
        let x_2210 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2209.x, x_2209.y, x_2210.z, x_2210.w);
        let x_2212 : vec4<f32> = u_xlat7;
        let x_2215 : vec4<f32> = u_xlat7;
        let x_2218 : vec4<f32> = u_xlat8;
        let x_2220 : vec2<f32> = ((-(vec2<f32>(x_2212.x, x_2212.y)) * vec2<f32>(x_2215.x, x_2215.y)) + vec2<f32>(x_2218.y, x_2218.w));
        let x_2221 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2220.x, x_2220.y, x_2221.z, x_2221.w);
        let x_2223 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2223 + vec2<f32>(1.0f, 1.0f));
        let x_2225 : vec4<f32> = u_xlat7;
        let x_2227 : vec2<f32> = (vec2<f32>(x_2225.x, x_2225.y) + vec2<f32>(1.0f, 1.0f));
        let x_2228 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2227.x, x_2227.y, x_2228.z, x_2228.w);
        let x_2230 : vec4<f32> = u_xlat8;
        let x_2232 : vec2<f32> = (vec2<f32>(x_2230.x, x_2230.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2233 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2232.x, x_2232.y, x_2233.z, x_2233.w);
        let x_2235 : vec4<f32> = u_xlat9;
        let x_2237 : vec2<f32> = (vec2<f32>(x_2235.x, x_2235.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2238 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2237.x, x_2237.y, x_2238.z, x_2238.w);
        let x_2240 : vec2<f32> = u_xlat51;
        let x_2241 : vec2<f32> = (x_2240 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2242 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2241.x, x_2241.y, x_2242.z, x_2242.w);
        let x_2244 : vec4<f32> = u_xlat7;
        let x_2246 : vec2<f32> = (vec2<f32>(x_2244.x, x_2244.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2247 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2246.x, x_2246.y, x_2247.z, x_2247.w);
        let x_2249 : vec4<f32> = u_xlat8;
        let x_2251 : vec2<f32> = (vec2<f32>(x_2249.y, x_2249.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2252 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2251.x, x_2251.y, x_2252.z, x_2252.w);
        let x_2255 : f32 = u_xlat9.x;
        u_xlat10.z = x_2255;
        let x_2258 : f32 = u_xlat7.x;
        u_xlat10.w = x_2258;
        let x_2261 : f32 = u_xlat12.x;
        u_xlat11.z = x_2261;
        let x_2264 : f32 = u_xlat49.x;
        u_xlat11.w = x_2264;
        let x_2266 : vec4<f32> = u_xlat10;
        let x_2268 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2266.z, x_2266.w, x_2266.x, x_2266.z) + vec4<f32>(x_2268.z, x_2268.w, x_2268.x, x_2268.z));
        let x_2272 : f32 = u_xlat10.y;
        u_xlat9.z = x_2272;
        let x_2275 : f32 = u_xlat7.y;
        u_xlat9.w = x_2275;
        let x_2278 : f32 = u_xlat11.y;
        u_xlat12.z = x_2278;
        let x_2281 : f32 = u_xlat49.y;
        u_xlat12.w = x_2281;
        let x_2283 : vec4<f32> = u_xlat9;
        let x_2285 : vec4<f32> = u_xlat12;
        let x_2287 : vec3<f32> = (vec3<f32>(x_2283.z, x_2283.y, x_2283.w) + vec3<f32>(x_2285.z, x_2285.y, x_2285.w));
        let x_2288 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2287.x, x_2287.y, x_2287.z, x_2288.w);
        let x_2290 : vec4<f32> = u_xlat11;
        let x_2292 : vec4<f32> = u_xlat8;
        let x_2294 : vec3<f32> = (vec3<f32>(x_2290.x, x_2290.z, x_2290.w) / vec3<f32>(x_2292.z, x_2292.w, x_2292.y));
        let x_2295 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2294.x, x_2294.y, x_2294.z, x_2295.w);
        let x_2297 : vec4<f32> = u_xlat9;
        let x_2299 : vec3<f32> = (vec3<f32>(x_2297.x, x_2297.y, x_2297.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2300 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2299.x, x_2299.y, x_2299.z, x_2300.w);
        let x_2302 : vec4<f32> = u_xlat12;
        let x_2304 : vec4<f32> = u_xlat7;
        let x_2306 : vec3<f32> = (vec3<f32>(x_2302.z, x_2302.y, x_2302.w) / vec3<f32>(x_2304.x, x_2304.y, x_2304.z));
        let x_2307 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2306.x, x_2306.y, x_2306.z, x_2307.w);
        let x_2309 : vec4<f32> = u_xlat10;
        let x_2311 : vec3<f32> = (vec3<f32>(x_2309.x, x_2309.y, x_2309.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2312 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2311.x, x_2311.y, x_2311.z, x_2312.w);
        let x_2314 : vec4<f32> = u_xlat9;
        let x_2317 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2319 : vec3<f32> = (vec3<f32>(x_2314.y, x_2314.x, x_2314.z) * vec3<f32>(x_2317.x, x_2317.x, x_2317.x));
        let x_2320 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2319.x, x_2319.y, x_2319.z, x_2320.w);
        let x_2322 : vec4<f32> = u_xlat10;
        let x_2325 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2327 : vec3<f32> = (vec3<f32>(x_2322.x, x_2322.y, x_2322.z) * vec3<f32>(x_2325.y, x_2325.y, x_2325.y));
        let x_2328 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2327.x, x_2327.y, x_2327.z, x_2328.w);
        let x_2331 : f32 = u_xlat10.x;
        u_xlat9.w = x_2331;
        let x_2333 : vec2<f32> = u_xlat48;
        let x_2336 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2339 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2333.x, x_2333.y, x_2333.x, x_2333.y) * vec4<f32>(x_2336.x, x_2336.y, x_2336.x, x_2336.y)) + vec4<f32>(x_2339.y, x_2339.w, x_2339.x, x_2339.w));
        let x_2342 : vec2<f32> = u_xlat48;
        let x_2344 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2347 : vec4<f32> = u_xlat9;
        let x_2349 : vec2<f32> = ((x_2342 * vec2<f32>(x_2344.x, x_2344.y)) + vec2<f32>(x_2347.z, x_2347.w));
        let x_2350 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2349.x, x_2349.y, x_2350.z, x_2350.w);
        let x_2353 : f32 = u_xlat9.y;
        u_xlat10.w = x_2353;
        let x_2355 : vec4<f32> = u_xlat10;
        let x_2356 : vec2<f32> = vec2<f32>(x_2355.y, x_2355.z);
        let x_2357 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2357.x, x_2356.x, x_2357.z, x_2356.y);
        let x_2359 : vec2<f32> = u_xlat48;
        let x_2362 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2365 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2359.x, x_2359.y, x_2359.x, x_2359.y) * vec4<f32>(x_2362.x, x_2362.y, x_2362.x, x_2362.y)) + vec4<f32>(x_2365.x, x_2365.y, x_2365.z, x_2365.y));
        let x_2368 : vec2<f32> = u_xlat48;
        let x_2371 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2374 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2368.x, x_2368.y, x_2368.x, x_2368.y) * vec4<f32>(x_2371.x, x_2371.y, x_2371.x, x_2371.y)) + vec4<f32>(x_2374.w, x_2374.y, x_2374.w, x_2374.z));
        let x_2377 : vec2<f32> = u_xlat48;
        let x_2380 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2383 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2377.x, x_2377.y, x_2377.x, x_2377.y) * vec4<f32>(x_2380.x, x_2380.y, x_2380.x, x_2380.y)) + vec4<f32>(x_2383.x, x_2383.w, x_2383.z, x_2383.w));
        let x_2386 : vec4<f32> = u_xlat7;
        let x_2388 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2386.x, x_2386.x, x_2386.x, x_2386.y) * vec4<f32>(x_2388.z, x_2388.w, x_2388.y, x_2388.z));
        let x_2391 : vec4<f32> = u_xlat7;
        let x_2393 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2391.y, x_2391.y, x_2391.z, x_2391.z) * x_2393);
        let x_2396 : f32 = u_xlat7.z;
        let x_2398 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2396 * x_2398);
        let x_2402 : vec4<f32> = u_xlat11;
        let x_2403 : vec2<f32> = vec2<f32>(x_2402.x, x_2402.y);
        let x_2405 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2403.x, x_2403.y, x_2405);
        let x_2412 : vec3<f32> = txVec34;
        let x_2414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2412.xy, x_2412.z);
        u_xlat69 = x_2414;
        let x_2416 : vec4<f32> = u_xlat11;
        let x_2417 : vec2<f32> = vec2<f32>(x_2416.z, x_2416.w);
        let x_2419 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2417.x, x_2417.y, x_2419);
        let x_2426 : vec3<f32> = txVec35;
        let x_2428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2426.xy, x_2426.z);
        u_xlat7.x = x_2428;
        let x_2431 : f32 = u_xlat7.x;
        let x_2433 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2431 * x_2433);
        let x_2437 : f32 = u_xlat14.x;
        let x_2438 : f32 = u_xlat69;
        let x_2441 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2437 * x_2438) + x_2441);
        let x_2444 : vec4<f32> = u_xlat12;
        let x_2445 : vec2<f32> = vec2<f32>(x_2444.x, x_2444.y);
        let x_2447 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2445.x, x_2445.y, x_2447);
        let x_2454 : vec3<f32> = txVec36;
        let x_2456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2454.xy, x_2454.z);
        u_xlat7.x = x_2456;
        let x_2459 : f32 = u_xlat14.z;
        let x_2461 : f32 = u_xlat7.x;
        let x_2463 : f32 = u_xlat69;
        u_xlat69 = ((x_2459 * x_2461) + x_2463);
        let x_2466 : vec4<f32> = u_xlat10;
        let x_2467 : vec2<f32> = vec2<f32>(x_2466.x, x_2466.y);
        let x_2469 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2467.x, x_2467.y, x_2469);
        let x_2476 : vec3<f32> = txVec37;
        let x_2478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2476.xy, x_2476.z);
        u_xlat7.x = x_2478;
        let x_2481 : f32 = u_xlat14.w;
        let x_2483 : f32 = u_xlat7.x;
        let x_2485 : f32 = u_xlat69;
        u_xlat69 = ((x_2481 * x_2483) + x_2485);
        let x_2488 : vec4<f32> = u_xlat13;
        let x_2489 : vec2<f32> = vec2<f32>(x_2488.x, x_2488.y);
        let x_2491 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2489.x, x_2489.y, x_2491);
        let x_2498 : vec3<f32> = txVec38;
        let x_2500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2498.xy, x_2498.z);
        u_xlat7.x = x_2500;
        let x_2503 : f32 = u_xlat15.x;
        let x_2505 : f32 = u_xlat7.x;
        let x_2507 : f32 = u_xlat69;
        u_xlat69 = ((x_2503 * x_2505) + x_2507);
        let x_2510 : vec4<f32> = u_xlat13;
        let x_2511 : vec2<f32> = vec2<f32>(x_2510.z, x_2510.w);
        let x_2513 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2511.x, x_2511.y, x_2513);
        let x_2520 : vec3<f32> = txVec39;
        let x_2522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2520.xy, x_2520.z);
        u_xlat7.x = x_2522;
        let x_2525 : f32 = u_xlat15.y;
        let x_2527 : f32 = u_xlat7.x;
        let x_2529 : f32 = u_xlat69;
        u_xlat69 = ((x_2525 * x_2527) + x_2529);
        let x_2532 : vec4<f32> = u_xlat10;
        let x_2533 : vec2<f32> = vec2<f32>(x_2532.z, x_2532.w);
        let x_2535 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2533.x, x_2533.y, x_2535);
        let x_2542 : vec3<f32> = txVec40;
        let x_2544 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2542.xy, x_2542.z);
        u_xlat7.x = x_2544;
        let x_2547 : f32 = u_xlat15.z;
        let x_2549 : f32 = u_xlat7.x;
        let x_2551 : f32 = u_xlat69;
        u_xlat69 = ((x_2547 * x_2549) + x_2551);
        let x_2554 : vec4<f32> = u_xlat9;
        let x_2555 : vec2<f32> = vec2<f32>(x_2554.x, x_2554.y);
        let x_2557 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2555.x, x_2555.y, x_2557);
        let x_2564 : vec3<f32> = txVec41;
        let x_2566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2564.xy, x_2564.z);
        u_xlat7.x = x_2566;
        let x_2569 : f32 = u_xlat15.w;
        let x_2571 : f32 = u_xlat7.x;
        let x_2573 : f32 = u_xlat69;
        u_xlat69 = ((x_2569 * x_2571) + x_2573);
        let x_2576 : vec4<f32> = u_xlat9;
        let x_2577 : vec2<f32> = vec2<f32>(x_2576.z, x_2576.w);
        let x_2579 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2577.x, x_2577.y, x_2579);
        let x_2586 : vec3<f32> = txVec42;
        let x_2588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2586.xy, x_2586.z);
        u_xlat7.x = x_2588;
        let x_2591 : f32 = u_xlat48.x;
        let x_2593 : f32 = u_xlat7.x;
        let x_2595 : f32 = u_xlat69;
        u_xlat63 = ((x_2591 * x_2593) + x_2595);
      } else {
        let x_2598 : vec4<f32> = vs_INTERP9;
        let x_2601 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2598.x, x_2598.y) * vec2<f32>(x_2601.z, x_2601.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2605 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2605);
        let x_2607 : vec4<f32> = vs_INTERP9;
        let x_2610 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2613 : vec2<f32> = u_xlat48;
        let x_2615 : vec2<f32> = ((vec2<f32>(x_2607.x, x_2607.y) * vec2<f32>(x_2610.z, x_2610.w)) + -(x_2613));
        let x_2616 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2615.x, x_2615.y, x_2616.z, x_2616.w);
        let x_2618 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2618.x, x_2618.x, x_2618.y, x_2618.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2621 : vec4<f32> = u_xlat8;
        let x_2623 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2621.x, x_2621.x, x_2621.z, x_2621.z) * vec4<f32>(x_2623.x, x_2623.x, x_2623.z, x_2623.z));
        let x_2626 : vec4<f32> = u_xlat9;
        let x_2628 : vec2<f32> = (vec2<f32>(x_2626.y, x_2626.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2629.x, x_2628.x, x_2629.z, x_2628.y);
        let x_2631 : vec4<f32> = u_xlat9;
        let x_2634 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2631.x, x_2631.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2634.x, x_2634.y)));
        let x_2638 : vec4<f32> = u_xlat7;
        let x_2641 : vec2<f32> = (-(vec2<f32>(x_2638.x, x_2638.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2642 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2641.x, x_2642.y, x_2641.y, x_2642.w);
        let x_2644 : vec4<f32> = u_xlat7;
        let x_2646 : vec2<f32> = min(vec2<f32>(x_2644.x, x_2644.y), vec2<f32>(0.0f, 0.0f));
        let x_2647 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2646.x, x_2646.y, x_2647.z, x_2647.w);
        let x_2649 : vec4<f32> = u_xlat9;
        let x_2652 : vec4<f32> = u_xlat9;
        let x_2655 : vec4<f32> = u_xlat8;
        let x_2657 : vec2<f32> = ((-(vec2<f32>(x_2649.x, x_2649.y)) * vec2<f32>(x_2652.x, x_2652.y)) + vec2<f32>(x_2655.x, x_2655.z));
        let x_2658 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2657.x, x_2658.y, x_2657.y, x_2658.w);
        let x_2660 : vec4<f32> = u_xlat7;
        let x_2662 : vec2<f32> = max(vec2<f32>(x_2660.x, x_2660.y), vec2<f32>(0.0f, 0.0f));
        let x_2663 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2662.x, x_2662.y, x_2663.z, x_2663.w);
        let x_2665 : vec4<f32> = u_xlat9;
        let x_2668 : vec4<f32> = u_xlat9;
        let x_2671 : vec4<f32> = u_xlat8;
        let x_2673 : vec2<f32> = ((-(vec2<f32>(x_2665.x, x_2665.y)) * vec2<f32>(x_2668.x, x_2668.y)) + vec2<f32>(x_2671.y, x_2671.w));
        let x_2674 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2674.x, x_2673.x, x_2674.z, x_2673.y);
        let x_2676 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2676 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2679 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2679 * 0.081632003f);
        let x_2682 : vec2<f32> = u_xlat49;
        let x_2684 : vec2<f32> = (vec2<f32>(x_2682.y, x_2682.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2685 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2684.x, x_2684.y, x_2685.z, x_2685.w);
        let x_2687 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2687.x, x_2687.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2691 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2691 * 0.081632003f);
        let x_2695 : f32 = u_xlat11.y;
        u_xlat9.x = x_2695;
        let x_2697 : vec4<f32> = u_xlat7;
        let x_2700 : vec2<f32> = ((vec2<f32>(x_2697.x, x_2697.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2701 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2701.x, x_2700.x, x_2701.z, x_2700.y);
        let x_2703 : vec4<f32> = u_xlat7;
        let x_2706 : vec2<f32> = ((vec2<f32>(x_2703.x, x_2703.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2707 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2706.x, x_2707.y, x_2706.y, x_2707.w);
        let x_2710 : f32 = u_xlat49.x;
        u_xlat8.y = x_2710;
        let x_2713 : f32 = u_xlat10.y;
        u_xlat8.w = x_2713;
        let x_2715 : vec4<f32> = u_xlat8;
        let x_2716 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2715 + x_2716);
        let x_2718 : vec4<f32> = u_xlat7;
        let x_2721 : vec2<f32> = ((vec2<f32>(x_2718.y, x_2718.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2722 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2722.x, x_2721.x, x_2722.z, x_2721.y);
        let x_2724 : vec4<f32> = u_xlat7;
        let x_2727 : vec2<f32> = ((vec2<f32>(x_2724.y, x_2724.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2728 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2727.x, x_2728.y, x_2727.y, x_2728.w);
        let x_2731 : f32 = u_xlat49.y;
        u_xlat10.y = x_2731;
        let x_2733 : vec4<f32> = u_xlat10;
        let x_2734 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2733 + x_2734);
        let x_2736 : vec4<f32> = u_xlat8;
        let x_2737 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2736 / x_2737);
        let x_2739 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2739 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2741 : vec4<f32> = u_xlat10;
        let x_2742 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2741 / x_2742);
        let x_2744 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2744 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2746 : vec4<f32> = u_xlat8;
        let x_2749 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2746.w, x_2746.x, x_2746.y, x_2746.z) * vec4<f32>(x_2749.x, x_2749.x, x_2749.x, x_2749.x));
        let x_2752 : vec4<f32> = u_xlat10;
        let x_2755 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2752.x, x_2752.w, x_2752.y, x_2752.z) * vec4<f32>(x_2755.y, x_2755.y, x_2755.y, x_2755.y));
        let x_2758 : vec4<f32> = u_xlat8;
        let x_2759 : vec3<f32> = vec3<f32>(x_2758.y, x_2758.z, x_2758.w);
        let x_2760 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2759.x, x_2760.y, x_2759.y, x_2759.z);
        let x_2763 : f32 = u_xlat10.x;
        u_xlat11.y = x_2763;
        let x_2765 : vec2<f32> = u_xlat48;
        let x_2768 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2771 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2765.x, x_2765.y, x_2765.x, x_2765.y) * vec4<f32>(x_2768.x, x_2768.y, x_2768.x, x_2768.y)) + vec4<f32>(x_2771.x, x_2771.y, x_2771.z, x_2771.y));
        let x_2774 : vec2<f32> = u_xlat48;
        let x_2776 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2779 : vec4<f32> = u_xlat11;
        let x_2781 : vec2<f32> = ((x_2774 * vec2<f32>(x_2776.x, x_2776.y)) + vec2<f32>(x_2779.w, x_2779.y));
        let x_2782 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2781.x, x_2781.y, x_2782.z, x_2782.w);
        let x_2785 : f32 = u_xlat11.y;
        u_xlat8.y = x_2785;
        let x_2788 : f32 = u_xlat10.z;
        u_xlat11.y = x_2788;
        let x_2790 : vec2<f32> = u_xlat48;
        let x_2793 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2796 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2790.x, x_2790.y, x_2790.x, x_2790.y) * vec4<f32>(x_2793.x, x_2793.y, x_2793.x, x_2793.y)) + vec4<f32>(x_2796.x, x_2796.y, x_2796.z, x_2796.y));
        let x_2800 : vec2<f32> = u_xlat48;
        let x_2802 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2805 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2800 * vec2<f32>(x_2802.x, x_2802.y)) + vec2<f32>(x_2805.w, x_2805.y));
        let x_2809 : f32 = u_xlat11.y;
        u_xlat8.z = x_2809;
        let x_2811 : vec2<f32> = u_xlat48;
        let x_2814 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2817 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2811.x, x_2811.y, x_2811.x, x_2811.y) * vec4<f32>(x_2814.x, x_2814.y, x_2814.x, x_2814.y)) + vec4<f32>(x_2817.x, x_2817.y, x_2817.x, x_2817.z));
        let x_2821 : f32 = u_xlat10.w;
        u_xlat11.y = x_2821;
        let x_2823 : vec2<f32> = u_xlat48;
        let x_2826 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2829 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2823.x, x_2823.y, x_2823.x, x_2823.y) * vec4<f32>(x_2826.x, x_2826.y, x_2826.x, x_2826.y)) + vec4<f32>(x_2829.x, x_2829.y, x_2829.z, x_2829.y));
        let x_2832 : vec2<f32> = u_xlat48;
        let x_2834 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2837 : vec4<f32> = u_xlat11;
        let x_2839 : vec2<f32> = ((x_2832 * vec2<f32>(x_2834.x, x_2834.y)) + vec2<f32>(x_2837.w, x_2837.y));
        let x_2840 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2839.x, x_2839.y, x_2840.z);
        let x_2843 : f32 = u_xlat11.y;
        u_xlat8.w = x_2843;
        let x_2845 : vec2<f32> = u_xlat48;
        let x_2847 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2850 : vec4<f32> = u_xlat8;
        let x_2852 : vec2<f32> = ((x_2845 * vec2<f32>(x_2847.x, x_2847.y)) + vec2<f32>(x_2850.x, x_2850.w));
        let x_2853 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2852.x, x_2852.y, x_2853.z, x_2853.w);
        let x_2855 : vec4<f32> = u_xlat11;
        let x_2856 : vec3<f32> = vec3<f32>(x_2855.x, x_2855.z, x_2855.w);
        let x_2857 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2856.x, x_2857.y, x_2856.y, x_2856.z);
        let x_2859 : vec2<f32> = u_xlat48;
        let x_2862 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2865 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2859.x, x_2859.y, x_2859.x, x_2859.y) * vec4<f32>(x_2862.x, x_2862.y, x_2862.x, x_2862.y)) + vec4<f32>(x_2865.x, x_2865.y, x_2865.z, x_2865.y));
        let x_2868 : vec2<f32> = u_xlat48;
        let x_2870 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2873 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2868 * vec2<f32>(x_2870.x, x_2870.y)) + vec2<f32>(x_2873.w, x_2873.y));
        let x_2877 : f32 = u_xlat8.x;
        u_xlat10.x = x_2877;
        let x_2879 : vec2<f32> = u_xlat48;
        let x_2881 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2884 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2879 * vec2<f32>(x_2881.x, x_2881.y)) + vec2<f32>(x_2884.x, x_2884.y));
        let x_2887 : vec4<f32> = u_xlat7;
        let x_2889 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2887.x, x_2887.x, x_2887.x, x_2887.x) * x_2889);
        let x_2891 : vec4<f32> = u_xlat7;
        let x_2893 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2891.y, x_2891.y, x_2891.y, x_2891.y) * x_2893);
        let x_2895 : vec4<f32> = u_xlat7;
        let x_2897 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2895.z, x_2895.z, x_2895.z, x_2895.z) * x_2897);
        let x_2899 : vec4<f32> = u_xlat7;
        let x_2901 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2899.w, x_2899.w, x_2899.w, x_2899.w) * x_2901);
        let x_2904 : vec4<f32> = u_xlat12;
        let x_2905 : vec2<f32> = vec2<f32>(x_2904.x, x_2904.y);
        let x_2907 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2905.x, x_2905.y, x_2907);
        let x_2914 : vec3<f32> = txVec43;
        let x_2916 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2914.xy, x_2914.z);
        u_xlat8.x = x_2916;
        let x_2919 : vec4<f32> = u_xlat12;
        let x_2920 : vec2<f32> = vec2<f32>(x_2919.z, x_2919.w);
        let x_2922 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2920.x, x_2920.y, x_2922);
        let x_2930 : vec3<f32> = txVec44;
        let x_2932 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2930.xy, x_2930.z);
        u_xlat71 = x_2932;
        let x_2933 : f32 = u_xlat71;
        let x_2935 : f32 = u_xlat18.y;
        u_xlat71 = (x_2933 * x_2935);
        let x_2938 : f32 = u_xlat18.x;
        let x_2940 : f32 = u_xlat8.x;
        let x_2942 : f32 = u_xlat71;
        u_xlat8.x = ((x_2938 * x_2940) + x_2942);
        let x_2946 : vec4<f32> = u_xlat13;
        let x_2947 : vec2<f32> = vec2<f32>(x_2946.x, x_2946.y);
        let x_2949 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2947.x, x_2947.y, x_2949);
        let x_2956 : vec3<f32> = txVec45;
        let x_2958 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2956.xy, x_2956.z);
        u_xlat71 = x_2958;
        let x_2960 : f32 = u_xlat18.z;
        let x_2961 : f32 = u_xlat71;
        let x_2964 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2960 * x_2961) + x_2964);
        let x_2968 : vec4<f32> = u_xlat15;
        let x_2969 : vec2<f32> = vec2<f32>(x_2968.x, x_2968.y);
        let x_2971 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2969.x, x_2969.y, x_2971);
        let x_2978 : vec3<f32> = txVec46;
        let x_2980 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2978.xy, x_2978.z);
        u_xlat71 = x_2980;
        let x_2982 : f32 = u_xlat18.w;
        let x_2983 : f32 = u_xlat71;
        let x_2986 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2982 * x_2983) + x_2986);
        let x_2990 : vec4<f32> = u_xlat14;
        let x_2991 : vec2<f32> = vec2<f32>(x_2990.x, x_2990.y);
        let x_2993 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2991.x, x_2991.y, x_2993);
        let x_3000 : vec3<f32> = txVec47;
        let x_3002 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3000.xy, x_3000.z);
        u_xlat71 = x_3002;
        let x_3004 : f32 = u_xlat19.x;
        let x_3005 : f32 = u_xlat71;
        let x_3008 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3004 * x_3005) + x_3008);
        let x_3012 : vec4<f32> = u_xlat14;
        let x_3013 : vec2<f32> = vec2<f32>(x_3012.z, x_3012.w);
        let x_3015 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3013.x, x_3013.y, x_3015);
        let x_3022 : vec3<f32> = txVec48;
        let x_3024 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3022.xy, x_3022.z);
        u_xlat71 = x_3024;
        let x_3026 : f32 = u_xlat19.y;
        let x_3027 : f32 = u_xlat71;
        let x_3030 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3026 * x_3027) + x_3030);
        let x_3034 : vec2<f32> = u_xlat55;
        let x_3036 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3034.x, x_3034.y, x_3036);
        let x_3043 : vec3<f32> = txVec49;
        let x_3045 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3043.xy, x_3043.z);
        u_xlat71 = x_3045;
        let x_3047 : f32 = u_xlat19.z;
        let x_3048 : f32 = u_xlat71;
        let x_3051 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3047 * x_3048) + x_3051);
        let x_3055 : vec4<f32> = u_xlat15;
        let x_3056 : vec2<f32> = vec2<f32>(x_3055.z, x_3055.w);
        let x_3058 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3056.x, x_3056.y, x_3058);
        let x_3065 : vec3<f32> = txVec50;
        let x_3067 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3065.xy, x_3065.z);
        u_xlat71 = x_3067;
        let x_3069 : f32 = u_xlat19.w;
        let x_3070 : f32 = u_xlat71;
        let x_3073 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3069 * x_3070) + x_3073);
        let x_3077 : vec4<f32> = u_xlat16;
        let x_3078 : vec2<f32> = vec2<f32>(x_3077.x, x_3077.y);
        let x_3080 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3078.x, x_3078.y, x_3080);
        let x_3087 : vec3<f32> = txVec51;
        let x_3089 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3087.xy, x_3087.z);
        u_xlat71 = x_3089;
        let x_3091 : f32 = u_xlat20.x;
        let x_3092 : f32 = u_xlat71;
        let x_3095 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3091 * x_3092) + x_3095);
        let x_3099 : vec4<f32> = u_xlat16;
        let x_3100 : vec2<f32> = vec2<f32>(x_3099.z, x_3099.w);
        let x_3102 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3100.x, x_3100.y, x_3102);
        let x_3109 : vec3<f32> = txVec52;
        let x_3111 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3109.xy, x_3109.z);
        u_xlat71 = x_3111;
        let x_3113 : f32 = u_xlat20.y;
        let x_3114 : f32 = u_xlat71;
        let x_3117 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3113 * x_3114) + x_3117);
        let x_3121 : vec3<f32> = u_xlat29;
        let x_3122 : vec2<f32> = vec2<f32>(x_3121.x, x_3121.y);
        let x_3124 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3122.x, x_3122.y, x_3124);
        let x_3131 : vec3<f32> = txVec53;
        let x_3133 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3131.xy, x_3131.z);
        u_xlat29.x = x_3133;
        let x_3136 : f32 = u_xlat20.z;
        let x_3138 : f32 = u_xlat29.x;
        let x_3141 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3136 * x_3138) + x_3141);
        let x_3145 : vec4<f32> = u_xlat17;
        let x_3146 : vec2<f32> = vec2<f32>(x_3145.x, x_3145.y);
        let x_3148 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3146.x, x_3146.y, x_3148);
        let x_3155 : vec3<f32> = txVec54;
        let x_3157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3155.xy, x_3155.z);
        u_xlat29.x = x_3157;
        let x_3160 : f32 = u_xlat20.w;
        let x_3162 : f32 = u_xlat29.x;
        let x_3165 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3160 * x_3162) + x_3165);
        let x_3169 : vec4<f32> = u_xlat11;
        let x_3170 : vec2<f32> = vec2<f32>(x_3169.x, x_3169.y);
        let x_3172 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3170.x, x_3170.y, x_3172);
        let x_3179 : vec3<f32> = txVec55;
        let x_3181 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3179.xy, x_3179.z);
        u_xlat29.x = x_3181;
        let x_3184 : f32 = u_xlat7.x;
        let x_3186 : f32 = u_xlat29.x;
        let x_3189 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3184 * x_3186) + x_3189);
        let x_3193 : vec4<f32> = u_xlat11;
        let x_3194 : vec2<f32> = vec2<f32>(x_3193.z, x_3193.w);
        let x_3196 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3194.x, x_3194.y, x_3196);
        let x_3203 : vec3<f32> = txVec56;
        let x_3205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3203.xy, x_3203.z);
        u_xlat8.x = x_3205;
        let x_3208 : f32 = u_xlat7.y;
        let x_3210 : f32 = u_xlat8.x;
        let x_3213 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3208 * x_3210) + x_3213);
        let x_3217 : vec2<f32> = u_xlat52;
        let x_3219 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3217.x, x_3217.y, x_3219);
        let x_3227 : vec3<f32> = txVec57;
        let x_3229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3227.xy, x_3227.z);
        u_xlat28 = x_3229;
        let x_3231 : f32 = u_xlat7.z;
        let x_3232 : f32 = u_xlat28;
        let x_3235 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3231 * x_3232) + x_3235);
        let x_3239 : vec2<f32> = u_xlat48;
        let x_3241 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3239.x, x_3239.y, x_3241);
        let x_3248 : vec3<f32> = txVec58;
        let x_3250 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3248.xy, x_3248.z);
        u_xlat48.x = x_3250;
        let x_3253 : f32 = u_xlat7.w;
        let x_3255 : f32 = u_xlat48.x;
        let x_3258 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3253 * x_3255) + x_3258);
      }
    }
  } else {
    let x_3262 : vec4<f32> = vs_INTERP9;
    let x_3263 : vec2<f32> = vec2<f32>(x_3262.x, x_3262.y);
    let x_3265 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3263.x, x_3263.y, x_3265);
    let x_3272 : vec3<f32> = txVec59;
    let x_3274 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3272.xy, x_3272.z);
    u_xlat63 = x_3274;
  }
  let x_3275 : f32 = u_xlat63;
  let x_3277 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3279 : f32 = u_xlat65;
  u_xlat63 = ((x_3275 * x_3277) + x_3279);
  let x_3282 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3282);
  let x_3285 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3285 >= 1.0f);
  let x_3288 : bool = u_xlatb65;
  let x_3290 : bool = u_xlatb48.x;
  u_xlatb65 = (x_3288 | x_3290);
  let x_3292 : bool = u_xlatb65;
  let x_3293 : f32 = u_xlat63;
  u_xlat63 = select(x_3293, 1.0f, x_3292);
  let x_3295 : vec3<f32> = vs_INTERP0;
  let x_3297 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3299 : vec3<f32> = (x_3295 + -(x_3297));
  let x_3300 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3299.x, x_3299.y, x_3299.z, x_3300.w);
  let x_3302 : vec4<f32> = u_xlat7;
  let x_3304 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3302.x, x_3302.y, x_3302.z), vec3<f32>(x_3304.x, x_3304.y, x_3304.z));
  let x_3307 : f32 = u_xlat65;
  let x_3309 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3312 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3307 * x_3309) + x_3312);
  let x_3314 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3314, 0.0f, 1.0f);
  let x_3316 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3316) + 1.0f);
  let x_3320 : f32 = u_xlat65;
  let x_3322 : f32 = u_xlat48.x;
  let x_3324 : f32 = u_xlat63;
  u_xlat63 = ((x_3320 * x_3322) + x_3324);
  let x_3332 : f32 = x_3330.x_MainLightCookieTextureFormat;
  u_xlatb65 = !((x_3332 == -1.0f));
  let x_3334 : bool = u_xlatb65;
  if (x_3334) {
    let x_3337 : vec3<f32> = vs_INTERP0;
    let x_3340 : vec4<f32> = x_3330.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3337.y, x_3337.y) * vec2<f32>(x_3340.x, x_3340.y));
    let x_3344 : vec4<f32> = x_3330.x_MainLightWorldToLight[0i];
    let x_3346 : vec3<f32> = vs_INTERP0;
    let x_3349 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3344.x, x_3344.y) * vec2<f32>(x_3346.x, x_3346.x)) + x_3349);
    let x_3352 : vec4<f32> = x_3330.x_MainLightWorldToLight[2i];
    let x_3354 : vec3<f32> = vs_INTERP0;
    let x_3357 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3352.x, x_3352.y) * vec2<f32>(x_3354.z, x_3354.z)) + x_3357);
    let x_3359 : vec2<f32> = u_xlat48;
    let x_3361 : vec4<f32> = x_3330.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3359 + vec2<f32>(x_3361.x, x_3361.y));
    let x_3364 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3364 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3372 : vec2<f32> = u_xlat48;
    let x_3374 : f32 = x_90.x_GlobalMipBias.x;
    let x_3375 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3372, x_3374);
    u_xlat7 = x_3375;
    let x_3377 : f32 = x_3330.x_MainLightCookieTextureFormat;
    let x_3379 : f32 = x_3330.x_MainLightCookieTextureFormat;
    let x_3381 : f32 = x_3330.x_MainLightCookieTextureFormat;
    let x_3383 : f32 = x_3330.x_MainLightCookieTextureFormat;
    let x_3384 : vec4<f32> = vec4<f32>(x_3377, x_3379, x_3381, x_3383);
    let x_3392 : vec4<bool> = (vec4<f32>(x_3384.x, x_3384.y, x_3384.z, x_3384.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3392.x, x_3392.y);
    let x_3395 : bool = u_xlatb48.y;
    if (x_3395) {
      let x_3400 : f32 = u_xlat7.w;
      x_3396 = x_3400;
    } else {
      let x_3403 : f32 = u_xlat7.x;
      x_3396 = x_3403;
    }
    let x_3404 : f32 = x_3396;
    u_xlat65 = x_3404;
    let x_3406 : bool = u_xlatb48.x;
    if (x_3406) {
      let x_3410 : vec4<f32> = u_xlat7;
      x_3407 = vec3<f32>(x_3410.x, x_3410.y, x_3410.z);
    } else {
      let x_3413 : f32 = u_xlat65;
      x_3407 = vec3<f32>(x_3413, x_3413, x_3413);
    }
    let x_3415 : vec3<f32> = x_3407;
    let x_3416 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3415.x, x_3415.y, x_3415.z, x_3416.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3422 : vec4<f32> = u_xlat7;
  let x_3425 : vec4<f32> = x_90.x_MainLightColor;
  let x_3427 : vec3<f32> = (vec3<f32>(x_3422.x, x_3422.y, x_3422.z) * vec3<f32>(x_3425.x, x_3425.y, x_3425.z));
  let x_3428 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3427.x, x_3427.y, x_3427.z, x_3428.w);
  let x_3430 : f32 = u_xlat27;
  let x_3432 : vec4<f32> = u_xlat7;
  let x_3434 : vec3<f32> = (vec3<f32>(x_3430, x_3430, x_3430) * vec3<f32>(x_3432.x, x_3432.y, x_3432.z));
  let x_3435 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3434.x, x_3434.y, x_3434.z, x_3435.w);
  let x_3437 : vec3<f32> = u_xlat2;
  let x_3439 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3437), vec3<f32>(x_3439.x, x_3439.y, x_3439.z));
  let x_3442 : f32 = u_xlat65;
  let x_3443 : f32 = u_xlat65;
  u_xlat65 = (x_3442 + x_3443);
  let x_3445 : vec4<f32> = u_xlat3;
  let x_3447 : f32 = u_xlat65;
  let x_3451 : vec3<f32> = u_xlat2;
  let x_3453 : vec3<f32> = ((vec3<f32>(x_3445.x, x_3445.y, x_3445.z) * -(vec3<f32>(x_3447, x_3447, x_3447))) + -(x_3451));
  let x_3454 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3453.x, x_3453.y, x_3453.z, x_3454.w);
  let x_3456 : vec4<f32> = u_xlat3;
  let x_3458 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3456.x, x_3456.y, x_3456.z), x_3458);
  let x_3460 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3460, 0.0f, 1.0f);
  let x_3462 : f32 = u_xlat65;
  u_xlat65 = (-(x_3462) + 1.0f);
  let x_3465 : f32 = u_xlat65;
  let x_3466 : f32 = u_xlat65;
  u_xlat65 = (x_3465 * x_3466);
  let x_3468 : f32 = u_xlat65;
  let x_3469 : f32 = u_xlat65;
  u_xlat65 = (x_3468 * x_3469);
  let x_3472 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3472) * 0.699999988f) + 1.700000048f);
  let x_3480 : f32 = u_xlat43.x;
  let x_3482 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3480 * x_3482);
  let x_3486 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3486 * 6.0f);
  let x_3498 : vec4<f32> = u_xlat8;
  let x_3501 : f32 = u_xlat43.x;
  let x_3502 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3498.x, x_3498.y, x_3498.z), x_3501);
  u_xlat8 = x_3502;
  let x_3504 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3504 + -1.0f);
  let x_3508 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3510 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3508 * x_3510) + 1.0f);
  let x_3515 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3515, 0.0f);
  let x_3519 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3519);
  let x_3523 : f32 = u_xlat43.x;
  let x_3525 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3523 * x_3525);
  let x_3529 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3529);
  let x_3533 : f32 = u_xlat43.x;
  let x_3535 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3533 * x_3535);
  let x_3538 : vec4<f32> = u_xlat8;
  let x_3540 : vec2<f32> = u_xlat43;
  let x_3542 : vec3<f32> = (vec3<f32>(x_3538.x, x_3538.y, x_3538.z) * vec3<f32>(x_3540.x, x_3540.x, x_3540.x));
  let x_3543 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3542.x, x_3542.y, x_3542.z, x_3543.w);
  let x_3545 : f32 = u_xlat64;
  let x_3547 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3545, x_3545) * vec2<f32>(x_3547, x_3547)) + vec2<f32>(-1.0f, 1.0f));
  let x_3553 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3553);
  let x_3555 : f32 = u_xlat67;
  u_xlat67 = (x_3555 + -0.039999999f);
  let x_3558 : f32 = u_xlat65;
  let x_3559 : f32 = u_xlat67;
  u_xlat65 = ((x_3558 * x_3559) + 0.039999999f);
  let x_3563 : f32 = u_xlat64;
  let x_3564 : f32 = u_xlat65;
  u_xlat64 = (x_3563 * x_3564);
  let x_3566 : f32 = u_xlat64;
  let x_3568 : vec4<f32> = u_xlat8;
  let x_3570 : vec3<f32> = (vec3<f32>(x_3566, x_3566, x_3566) * vec3<f32>(x_3568.x, x_3568.y, x_3568.z));
  let x_3571 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3570.x, x_3570.y, x_3570.z, x_3571.w);
  let x_3573 : vec3<f32> = u_xlat26;
  let x_3574 : vec3<f32> = u_xlat4;
  let x_3576 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3573 * x_3574) + vec3<f32>(x_3576.x, x_3576.y, x_3576.z));
  let x_3579 : f32 = u_xlat63;
  let x_3581 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3579 * x_3581);
  let x_3583 : vec4<f32> = u_xlat3;
  let x_3586 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3583.x, x_3583.y, x_3583.z), vec3<f32>(x_3586.x, x_3586.y, x_3586.z));
  let x_3589 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3589, 0.0f, 1.0f);
  let x_3591 : f32 = u_xlat63;
  let x_3592 : f32 = u_xlat64;
  u_xlat63 = (x_3591 * x_3592);
  let x_3594 : f32 = u_xlat63;
  let x_3596 : vec4<f32> = u_xlat7;
  let x_3598 : vec3<f32> = (vec3<f32>(x_3594, x_3594, x_3594) * vec3<f32>(x_3596.x, x_3596.y, x_3596.z));
  let x_3599 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3598.x, x_3598.y, x_3598.z, x_3599.w);
  let x_3601 : vec3<f32> = u_xlat2;
  let x_3603 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3605 : vec3<f32> = (x_3601 + vec3<f32>(x_3603.x, x_3603.y, x_3603.z));
  let x_3606 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3605.x, x_3605.y, x_3605.z, x_3606.w);
  let x_3608 : vec4<f32> = u_xlat8;
  let x_3610 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3608.x, x_3608.y, x_3608.z), vec3<f32>(x_3610.x, x_3610.y, x_3610.z));
  let x_3613 : f32 = u_xlat63;
  u_xlat63 = max(x_3613, 1.17549435e-37f);
  let x_3616 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3616);
  let x_3618 : f32 = u_xlat63;
  let x_3620 : vec4<f32> = u_xlat8;
  let x_3622 : vec3<f32> = (vec3<f32>(x_3618, x_3618, x_3618) * vec3<f32>(x_3620.x, x_3620.y, x_3620.z));
  let x_3623 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3622.x, x_3622.y, x_3622.z, x_3623.w);
  let x_3625 : vec4<f32> = u_xlat3;
  let x_3627 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3625.x, x_3625.y, x_3625.z), vec3<f32>(x_3627.x, x_3627.y, x_3627.z));
  let x_3630 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3630, 0.0f, 1.0f);
  let x_3633 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3635 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3633.x, x_3633.y, x_3633.z), vec3<f32>(x_3635.x, x_3635.y, x_3635.z));
  let x_3638 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3638, 0.0f, 1.0f);
  let x_3640 : f32 = u_xlat63;
  let x_3641 : f32 = u_xlat63;
  u_xlat63 = (x_3640 * x_3641);
  let x_3643 : f32 = u_xlat63;
  let x_3645 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3643 * x_3645) + 1.000010014f);
  let x_3649 : f32 = u_xlat64;
  let x_3650 : f32 = u_xlat64;
  u_xlat64 = (x_3649 * x_3650);
  let x_3652 : f32 = u_xlat63;
  let x_3653 : f32 = u_xlat63;
  u_xlat63 = (x_3652 * x_3653);
  let x_3655 : f32 = u_xlat64;
  u_xlat64 = max(x_3655, 0.100000001f);
  let x_3658 : f32 = u_xlat63;
  let x_3659 : f32 = u_xlat64;
  u_xlat63 = (x_3658 * x_3659);
  let x_3662 : f32 = u_xlat5.x;
  let x_3663 : f32 = u_xlat63;
  u_xlat63 = (x_3662 * x_3663);
  let x_3665 : f32 = u_xlat66;
  let x_3666 : f32 = u_xlat63;
  u_xlat63 = (x_3665 / x_3666);
  let x_3668 : f32 = u_xlat63;
  let x_3672 : vec3<f32> = u_xlat4;
  let x_3673 : vec3<f32> = ((vec3<f32>(x_3668, x_3668, x_3668) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3672);
  let x_3674 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3673.x, x_3673.y, x_3673.z, x_3674.w);
  let x_3676 : vec4<f32> = u_xlat7;
  let x_3678 : vec4<f32> = u_xlat8;
  let x_3680 : vec3<f32> = (vec3<f32>(x_3676.x, x_3676.y, x_3676.z) * vec3<f32>(x_3678.x, x_3678.y, x_3678.z));
  let x_3681 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3680.x, x_3680.y, x_3680.z, x_3681.w);
  let x_3684 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3686 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3684, x_3686);
  let x_3689 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3689));
  let x_3693 : f32 = x_3330.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3695 : f32 = x_3330.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3697 : f32 = x_3330.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3699 : f32 = x_3330.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3700 : vec4<f32> = vec4<f32>(x_3693, x_3695, x_3697, x_3699);
  let x_3706 : vec4<bool> = (vec4<f32>(x_3700.x, x_3700.y, x_3700.z, x_3700.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3706.x, x_3706.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3717 : u32 = u_xlatu_loop_1;
    let x_3718 : u32 = u_xlatu63;
    if ((x_3717 < x_3718)) {
    } else {
      break;
    }
    let x_3721 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3721 >> 2u);
    let x_3724 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3724 & 3u));
    let x_3727 : u32 = u_xlatu65;
    let x_3730 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3727)];
    let x_3740 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3745 : vec4<u32> = indexable[x_3740];
    u_xlat65 = dot(x_3730, bitcast<vec4<f32>>(x_3745));
    let x_3748 : f32 = u_xlat65;
    u_xlatu65 = bitcast<u32>(i32(x_3748));
    let x_3751 : vec3<f32> = vs_INTERP0;
    let x_3763 : u32 = u_xlatu65;
    let x_3766 : vec4<f32> = x_3762.x_AdditionalLightsPosition[bitcast<i32>(x_3763)];
    let x_3769 : u32 = u_xlatu65;
    let x_3772 : vec4<f32> = x_3762.x_AdditionalLightsPosition[bitcast<i32>(x_3769)];
    let x_3774 : vec3<f32> = ((-(x_3751) * vec3<f32>(x_3766.w, x_3766.w, x_3766.w)) + vec3<f32>(x_3772.x, x_3772.y, x_3772.z));
    let x_3775 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3774.x, x_3774.y, x_3774.z, x_3775.w);
    let x_3777 : vec4<f32> = u_xlat9;
    let x_3779 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3777.x, x_3777.y, x_3777.z), vec3<f32>(x_3779.x, x_3779.y, x_3779.z));
    let x_3782 : f32 = u_xlat67;
    u_xlat67 = max(x_3782, 6.10351562e-05f);
    let x_3786 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3786);
    let x_3788 : f32 = u_xlat70;
    let x_3790 : vec4<f32> = u_xlat9;
    let x_3792 : vec3<f32> = (vec3<f32>(x_3788, x_3788, x_3788) * vec3<f32>(x_3790.x, x_3790.y, x_3790.z));
    let x_3793 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3792.x, x_3792.y, x_3792.z, x_3793.w);
    let x_3795 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3795);
    let x_3797 : f32 = u_xlat67;
    let x_3798 : u32 = u_xlatu65;
    let x_3801 : f32 = x_3762.x_AdditionalLightsAttenuation[bitcast<i32>(x_3798)].x;
    u_xlat67 = (x_3797 * x_3801);
    let x_3803 : f32 = u_xlat67;
    let x_3805 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3803) * x_3805) + 1.0f);
    let x_3808 : f32 = u_xlat67;
    u_xlat67 = max(x_3808, 0.0f);
    let x_3810 : f32 = u_xlat67;
    let x_3811 : f32 = u_xlat67;
    u_xlat67 = (x_3810 * x_3811);
    let x_3813 : f32 = u_xlat67;
    let x_3814 : f32 = u_xlat71;
    u_xlat67 = (x_3813 * x_3814);
    let x_3816 : u32 = u_xlatu65;
    let x_3819 : vec4<f32> = x_3762.x_AdditionalLightsSpotDir[bitcast<i32>(x_3816)];
    let x_3821 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3819.x, x_3819.y, x_3819.z), vec3<f32>(x_3821.x, x_3821.y, x_3821.z));
    let x_3824 : f32 = u_xlat71;
    let x_3825 : u32 = u_xlatu65;
    let x_3828 : f32 = x_3762.x_AdditionalLightsAttenuation[bitcast<i32>(x_3825)].z;
    let x_3830 : u32 = u_xlatu65;
    let x_3833 : f32 = x_3762.x_AdditionalLightsAttenuation[bitcast<i32>(x_3830)].w;
    u_xlat71 = ((x_3824 * x_3828) + x_3833);
    let x_3835 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3835, 0.0f, 1.0f);
    let x_3837 : f32 = u_xlat71;
    let x_3838 : f32 = u_xlat71;
    u_xlat71 = (x_3837 * x_3838);
    let x_3840 : f32 = u_xlat67;
    let x_3841 : f32 = u_xlat71;
    u_xlat67 = (x_3840 * x_3841);
    let x_3844 : u32 = u_xlatu65;
    u_xlatu71 = (x_3844 >> 5u);
    let x_3847 : u32 = u_xlatu65;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3847) & 31i)));
    let x_3853 : i32 = u_xlati72;
    let x_3855 : u32 = u_xlatu71;
    let x_3858 : f32 = x_3330.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3855)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3853) & bitcast<u32>(x_3858)));
    let x_3862 : i32 = u_xlati71;
    if ((x_3862 != 0i)) {
      let x_3872 : u32 = u_xlatu65;
      let x_3875 : f32 = x_3871.x_AdditionalLightsLightTypes[bitcast<i32>(x_3872)].el;
      u_xlati71 = i32(x_3875);
      let x_3877 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3877 != 0i));
      let x_3881 : u32 = u_xlatu65;
      u_xlati73 = (bitcast<i32>(x_3881) << bitcast<u32>(2i));
      let x_3884 : i32 = u_xlati72;
      if ((x_3884 != 0i)) {
        let x_3888 : vec3<f32> = vs_INTERP0;
        let x_3890 : i32 = u_xlati73;
        let x_3893 : i32 = u_xlati73;
        let x_3897 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_3890 + 1i) / 4i)][((x_3893 + 1i) % 4i)];
        let x_3899 : vec3<f32> = (vec3<f32>(x_3888.y, x_3888.y, x_3888.y) * vec3<f32>(x_3897.x, x_3897.y, x_3897.w));
        let x_3900 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3899.x, x_3899.y, x_3899.z, x_3900.w);
        let x_3902 : i32 = u_xlati73;
        let x_3904 : i32 = u_xlati73;
        let x_3907 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[(x_3902 / 4i)][(x_3904 % 4i)];
        let x_3909 : vec3<f32> = vs_INTERP0;
        let x_3912 : vec4<f32> = u_xlat11;
        let x_3914 : vec3<f32> = ((vec3<f32>(x_3907.x, x_3907.y, x_3907.w) * vec3<f32>(x_3909.x, x_3909.x, x_3909.x)) + vec3<f32>(x_3912.x, x_3912.y, x_3912.z));
        let x_3915 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3914.x, x_3914.y, x_3914.z, x_3915.w);
        let x_3917 : i32 = u_xlati73;
        let x_3920 : i32 = u_xlati73;
        let x_3924 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_3917 + 2i) / 4i)][((x_3920 + 2i) % 4i)];
        let x_3926 : vec3<f32> = vs_INTERP0;
        let x_3929 : vec4<f32> = u_xlat11;
        let x_3931 : vec3<f32> = ((vec3<f32>(x_3924.x, x_3924.y, x_3924.w) * vec3<f32>(x_3926.z, x_3926.z, x_3926.z)) + vec3<f32>(x_3929.x, x_3929.y, x_3929.z));
        let x_3932 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3931.x, x_3931.y, x_3931.z, x_3932.w);
        let x_3934 : vec4<f32> = u_xlat11;
        let x_3936 : i32 = u_xlati73;
        let x_3939 : i32 = u_xlati73;
        let x_3943 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_3936 + 3i) / 4i)][((x_3939 + 3i) % 4i)];
        let x_3945 : vec3<f32> = (vec3<f32>(x_3934.x, x_3934.y, x_3934.z) + vec3<f32>(x_3943.x, x_3943.y, x_3943.w));
        let x_3946 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3945.x, x_3945.y, x_3945.z, x_3946.w);
        let x_3948 : vec4<f32> = u_xlat11;
        let x_3950 : vec4<f32> = u_xlat11;
        let x_3952 : vec2<f32> = (vec2<f32>(x_3948.x, x_3948.y) / vec2<f32>(x_3950.z, x_3950.z));
        let x_3953 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3952.x, x_3952.y, x_3953.z, x_3953.w);
        let x_3955 : vec4<f32> = u_xlat11;
        let x_3958 : vec2<f32> = ((vec2<f32>(x_3955.x, x_3955.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3959 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3958.x, x_3958.y, x_3959.z, x_3959.w);
        let x_3961 : vec4<f32> = u_xlat11;
        let x_3965 : vec2<f32> = clamp(vec2<f32>(x_3961.x, x_3961.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3966 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3965.x, x_3965.y, x_3966.z, x_3966.w);
        let x_3968 : u32 = u_xlatu65;
        let x_3971 : vec4<f32> = x_3871.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3968)];
        let x_3973 : vec4<f32> = u_xlat11;
        let x_3976 : u32 = u_xlatu65;
        let x_3979 : vec4<f32> = x_3871.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3976)];
        let x_3981 : vec2<f32> = ((vec2<f32>(x_3971.x, x_3971.y) * vec2<f32>(x_3973.x, x_3973.y)) + vec2<f32>(x_3979.z, x_3979.w));
        let x_3982 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3981.x, x_3981.y, x_3982.z, x_3982.w);
      } else {
        let x_3986 : i32 = u_xlati71;
        u_xlatb71 = (x_3986 == 1i);
        let x_3988 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3988);
        let x_3990 : i32 = u_xlati71;
        if ((x_3990 != 0i)) {
          let x_3995 : vec3<f32> = vs_INTERP0;
          let x_3997 : i32 = u_xlati73;
          let x_4000 : i32 = u_xlati73;
          let x_4004 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_3997 + 1i) / 4i)][((x_4000 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_3995.y, x_3995.y) * vec2<f32>(x_4004.x, x_4004.y));
          let x_4007 : i32 = u_xlati73;
          let x_4009 : i32 = u_xlati73;
          let x_4012 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[(x_4007 / 4i)][(x_4009 % 4i)];
          let x_4014 : vec3<f32> = vs_INTERP0;
          let x_4017 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4012.x, x_4012.y) * vec2<f32>(x_4014.x, x_4014.x)) + x_4017);
          let x_4019 : i32 = u_xlati73;
          let x_4022 : i32 = u_xlati73;
          let x_4026 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_4019 + 2i) / 4i)][((x_4022 + 2i) % 4i)];
          let x_4028 : vec3<f32> = vs_INTERP0;
          let x_4031 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4026.x, x_4026.y) * vec2<f32>(x_4028.z, x_4028.z)) + x_4031);
          let x_4033 : vec2<f32> = u_xlat53;
          let x_4034 : i32 = u_xlati73;
          let x_4037 : i32 = u_xlati73;
          let x_4041 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_4034 + 3i) / 4i)][((x_4037 + 3i) % 4i)];
          u_xlat53 = (x_4033 + vec2<f32>(x_4041.x, x_4041.y));
          let x_4044 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4044 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4047 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_4047);
          let x_4049 : u32 = u_xlatu65;
          let x_4052 : vec4<f32> = x_3871.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4049)];
          let x_4054 : vec2<f32> = u_xlat53;
          let x_4056 : u32 = u_xlatu65;
          let x_4059 : vec4<f32> = x_3871.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4056)];
          let x_4061 : vec2<f32> = ((vec2<f32>(x_4052.x, x_4052.y) * x_4054) + vec2<f32>(x_4059.z, x_4059.w));
          let x_4062 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4061.x, x_4061.y, x_4062.z, x_4062.w);
        } else {
          let x_4065 : vec3<f32> = vs_INTERP0;
          let x_4067 : i32 = u_xlati73;
          let x_4070 : i32 = u_xlati73;
          let x_4074 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_4067 + 1i) / 4i)][((x_4070 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4065.y, x_4065.y, x_4065.y, x_4065.y) * x_4074);
          let x_4076 : i32 = u_xlati73;
          let x_4078 : i32 = u_xlati73;
          let x_4081 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[(x_4076 / 4i)][(x_4078 % 4i)];
          let x_4082 : vec3<f32> = vs_INTERP0;
          let x_4085 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4081 * vec4<f32>(x_4082.x, x_4082.x, x_4082.x, x_4082.x)) + x_4085);
          let x_4087 : i32 = u_xlati73;
          let x_4090 : i32 = u_xlati73;
          let x_4094 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_4087 + 2i) / 4i)][((x_4090 + 2i) % 4i)];
          let x_4095 : vec3<f32> = vs_INTERP0;
          let x_4098 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4094 * vec4<f32>(x_4095.z, x_4095.z, x_4095.z, x_4095.z)) + x_4098);
          let x_4100 : vec4<f32> = u_xlat12;
          let x_4101 : i32 = u_xlati73;
          let x_4104 : i32 = u_xlati73;
          let x_4108 : vec4<f32> = x_3871.x_AdditionalLightsWorldToLights[((x_4101 + 3i) / 4i)][((x_4104 + 3i) % 4i)];
          u_xlat12 = (x_4100 + x_4108);
          let x_4110 : vec4<f32> = u_xlat12;
          let x_4112 : vec4<f32> = u_xlat12;
          let x_4114 : vec3<f32> = (vec3<f32>(x_4110.x, x_4110.y, x_4110.z) / vec3<f32>(x_4112.w, x_4112.w, x_4112.w));
          let x_4115 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4114.x, x_4114.y, x_4114.z, x_4115.w);
          let x_4117 : vec4<f32> = u_xlat12;
          let x_4119 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4117.x, x_4117.y, x_4117.z), vec3<f32>(x_4119.x, x_4119.y, x_4119.z));
          let x_4122 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4122);
          let x_4124 : f32 = u_xlat71;
          let x_4126 : vec4<f32> = u_xlat12;
          let x_4128 : vec3<f32> = (vec3<f32>(x_4124, x_4124, x_4124) * vec3<f32>(x_4126.x, x_4126.y, x_4126.z));
          let x_4129 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4128.x, x_4128.y, x_4128.z, x_4129.w);
          let x_4131 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4131.x, x_4131.y, x_4131.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4136 : f32 = u_xlat71;
          u_xlat71 = max(x_4136, 0.000001f);
          let x_4139 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4139);
          let x_4141 : f32 = u_xlat71;
          let x_4143 : vec4<f32> = u_xlat12;
          let x_4145 : vec3<f32> = (vec3<f32>(x_4141, x_4141, x_4141) * vec3<f32>(x_4143.z, x_4143.x, x_4143.y));
          let x_4146 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4145.x, x_4145.y, x_4145.z, x_4146.w);
          let x_4149 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4149);
          let x_4153 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4153, 0.0f, 1.0f);
          let x_4157 : vec4<f32> = u_xlat13;
          let x_4160 : vec4<bool> = (vec4<f32>(x_4157.y, x_4157.z, x_4157.y, x_4157.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4160.x, x_4160.y);
          let x_4163 : bool = u_xlatb53.x;
          if (x_4163) {
            let x_4168 : f32 = u_xlat13.x;
            x_4164 = x_4168;
          } else {
            let x_4171 : f32 = u_xlat13.x;
            x_4164 = -(x_4171);
          }
          let x_4173 : f32 = x_4164;
          u_xlat53.x = x_4173;
          let x_4176 : bool = u_xlatb53.y;
          if (x_4176) {
            let x_4181 : f32 = u_xlat13.x;
            x_4177 = x_4181;
          } else {
            let x_4184 : f32 = u_xlat13.x;
            x_4177 = -(x_4184);
          }
          let x_4186 : f32 = x_4177;
          u_xlat53.y = x_4186;
          let x_4188 : vec4<f32> = u_xlat12;
          let x_4190 : f32 = u_xlat71;
          let x_4193 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4188.x, x_4188.y) * vec2<f32>(x_4190, x_4190)) + x_4193);
          let x_4195 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4195 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4198 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4198, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4202 : u32 = u_xlatu65;
          let x_4205 : vec4<f32> = x_3871.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4202)];
          let x_4207 : vec2<f32> = u_xlat53;
          let x_4209 : u32 = u_xlatu65;
          let x_4212 : vec4<f32> = x_3871.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4209)];
          let x_4214 : vec2<f32> = ((vec2<f32>(x_4205.x, x_4205.y) * x_4207) + vec2<f32>(x_4212.z, x_4212.w));
          let x_4215 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4214.x, x_4214.y, x_4215.z, x_4215.w);
        }
      }
      let x_4222 : vec4<f32> = u_xlat11;
      let x_4225 : f32 = x_90.x_GlobalMipBias.x;
      let x_4226 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4222.x, x_4222.y), x_4225);
      u_xlat11 = x_4226;
      let x_4228 : bool = u_xlatb48.y;
      if (x_4228) {
        let x_4233 : f32 = u_xlat11.w;
        x_4229 = x_4233;
      } else {
        let x_4236 : f32 = u_xlat11.x;
        x_4229 = x_4236;
      }
      let x_4237 : f32 = x_4229;
      u_xlat71 = x_4237;
      let x_4239 : bool = u_xlatb48.x;
      if (x_4239) {
        let x_4243 : vec4<f32> = u_xlat11;
        x_4240 = vec3<f32>(x_4243.x, x_4243.y, x_4243.z);
      } else {
        let x_4246 : f32 = u_xlat71;
        x_4240 = vec3<f32>(x_4246, x_4246, x_4246);
      }
      let x_4248 : vec3<f32> = x_4240;
      let x_4249 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4248.x, x_4248.y, x_4248.z, x_4249.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4255 : vec4<f32> = u_xlat11;
    let x_4257 : u32 = u_xlatu65;
    let x_4260 : vec4<f32> = x_3762.x_AdditionalLightsColor[bitcast<i32>(x_4257)];
    let x_4262 : vec3<f32> = (vec3<f32>(x_4255.x, x_4255.y, x_4255.z) * vec3<f32>(x_4260.x, x_4260.y, x_4260.z));
    let x_4263 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4262.x, x_4262.y, x_4262.z, x_4263.w);
    let x_4265 : f32 = u_xlat27;
    let x_4267 : vec4<f32> = u_xlat11;
    let x_4269 : vec3<f32> = (vec3<f32>(x_4265, x_4265, x_4265) * vec3<f32>(x_4267.x, x_4267.y, x_4267.z));
    let x_4270 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4269.x, x_4269.y, x_4269.z, x_4270.w);
    let x_4272 : vec4<f32> = u_xlat3;
    let x_4274 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_4272.x, x_4272.y, x_4272.z), vec3<f32>(x_4274.x, x_4274.y, x_4274.z));
    let x_4277 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4277, 0.0f, 1.0f);
    let x_4279 : f32 = u_xlat65;
    let x_4280 : f32 = u_xlat67;
    u_xlat65 = (x_4279 * x_4280);
    let x_4282 : f32 = u_xlat65;
    let x_4284 : vec4<f32> = u_xlat11;
    let x_4286 : vec3<f32> = (vec3<f32>(x_4282, x_4282, x_4282) * vec3<f32>(x_4284.x, x_4284.y, x_4284.z));
    let x_4287 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4286.x, x_4286.y, x_4286.z, x_4287.w);
    let x_4289 : vec4<f32> = u_xlat9;
    let x_4291 : f32 = u_xlat70;
    let x_4294 : vec3<f32> = u_xlat2;
    let x_4295 : vec3<f32> = ((vec3<f32>(x_4289.x, x_4289.y, x_4289.z) * vec3<f32>(x_4291, x_4291, x_4291)) + x_4294);
    let x_4296 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4295.x, x_4295.y, x_4295.z, x_4296.w);
    let x_4298 : vec4<f32> = u_xlat9;
    let x_4300 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4298.x, x_4298.y, x_4298.z), vec3<f32>(x_4300.x, x_4300.y, x_4300.z));
    let x_4303 : f32 = u_xlat65;
    u_xlat65 = max(x_4303, 1.17549435e-37f);
    let x_4305 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_4305);
    let x_4307 : f32 = u_xlat65;
    let x_4309 : vec4<f32> = u_xlat9;
    let x_4311 : vec3<f32> = (vec3<f32>(x_4307, x_4307, x_4307) * vec3<f32>(x_4309.x, x_4309.y, x_4309.z));
    let x_4312 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4311.x, x_4311.y, x_4311.z, x_4312.w);
    let x_4314 : vec4<f32> = u_xlat3;
    let x_4316 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4314.x, x_4314.y, x_4314.z), vec3<f32>(x_4316.x, x_4316.y, x_4316.z));
    let x_4319 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4319, 0.0f, 1.0f);
    let x_4321 : vec4<f32> = u_xlat10;
    let x_4323 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4321.x, x_4321.y, x_4321.z), vec3<f32>(x_4323.x, x_4323.y, x_4323.z));
    let x_4326 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4326, 0.0f, 1.0f);
    let x_4328 : f32 = u_xlat65;
    let x_4329 : f32 = u_xlat65;
    u_xlat65 = (x_4328 * x_4329);
    let x_4331 : f32 = u_xlat65;
    let x_4333 : f32 = u_xlat43.x;
    u_xlat65 = ((x_4331 * x_4333) + 1.000010014f);
    let x_4336 : f32 = u_xlat67;
    let x_4337 : f32 = u_xlat67;
    u_xlat67 = (x_4336 * x_4337);
    let x_4339 : f32 = u_xlat65;
    let x_4340 : f32 = u_xlat65;
    u_xlat65 = (x_4339 * x_4340);
    let x_4342 : f32 = u_xlat67;
    u_xlat67 = max(x_4342, 0.100000001f);
    let x_4344 : f32 = u_xlat65;
    let x_4345 : f32 = u_xlat67;
    u_xlat65 = (x_4344 * x_4345);
    let x_4348 : f32 = u_xlat5.x;
    let x_4349 : f32 = u_xlat65;
    u_xlat65 = (x_4348 * x_4349);
    let x_4351 : f32 = u_xlat66;
    let x_4352 : f32 = u_xlat65;
    u_xlat65 = (x_4351 / x_4352);
    let x_4354 : f32 = u_xlat65;
    let x_4357 : vec3<f32> = u_xlat4;
    let x_4358 : vec3<f32> = ((vec3<f32>(x_4354, x_4354, x_4354) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4357);
    let x_4359 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4358.x, x_4358.y, x_4358.z, x_4359.w);
    let x_4361 : vec4<f32> = u_xlat9;
    let x_4363 : vec4<f32> = u_xlat11;
    let x_4366 : vec4<f32> = u_xlat8;
    let x_4368 : vec3<f32> = ((vec3<f32>(x_4361.x, x_4361.y, x_4361.z) * vec3<f32>(x_4363.x, x_4363.y, x_4363.z)) + vec3<f32>(x_4366.x, x_4366.y, x_4366.z));
    let x_4369 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4368.x, x_4368.y, x_4368.z, x_4369.w);

    continuing {
      let x_4371 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4371 + bitcast<u32>(1i));
    }
  }
  let x_4373 : vec3<f32> = u_xlat26;
  let x_4374 : vec4<f32> = u_xlat6;
  let x_4377 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_4373 * vec3<f32>(x_4374.x, x_4374.x, x_4374.x)) + vec3<f32>(x_4377.x, x_4377.y, x_4377.z));
  let x_4380 : vec4<f32> = u_xlat8;
  let x_4382 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4380.x, x_4380.y, x_4380.z) + x_4382);
  let x_4386 : vec4<f32> = vs_INTERP4;
  let x_4388 : vec3<f32> = u_xlat0;
  let x_4390 : vec3<f32> = u_xlat2;
  let x_4391 : vec3<f32> = ((vec3<f32>(x_4386.w, x_4386.w, x_4386.w) * x_4388) + x_4390);
  let x_4392 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4391.x, x_4391.y, x_4391.z, x_4392.w);
  let x_4394 : bool = u_xlatb22;
  if (x_4394) {
    let x_4399 : f32 = u_xlat1.x;
    x_4395 = x_4399;
  } else {
    x_4395 = 1.0f;
  }
  let x_4401 : f32 = x_4395;
  SV_Target0.w = x_4401;
  let x_4407 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_4409 : f32 = x_161.unity_RenderingLayer.x;
  u_xlatu0 = (x_4407 & bitcast<u32>(x_4409));
  let x_4412 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4412);
  let x_4417 : f32 = u_xlat0.x;
  let x_4419 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4417 * x_4419);
  let x_4423 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4423, 0.0f, 1.0f);
  let x_4427 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4427.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

