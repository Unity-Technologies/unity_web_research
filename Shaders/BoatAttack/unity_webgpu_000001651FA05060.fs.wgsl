struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_271 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3458 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3906 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4016 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1726 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu45 : u32;
  var u_xlatu25 : u32;
  var u_xlati45 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : f32;
  var x_1858 : f32;
  var u_xlatb45 : vec2<bool>;
  var u_xlat45 : vec2<f32>;
  var u_xlatb23 : bool;
  var x_1930 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : vec2<bool>;
  var u_xlat52 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3540 : f32;
  var x_3551 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4308 : f32;
  var x_4321 : f32;
  var x_4373 : f32;
  var x_4384 : vec3<f32>;
  var x_4539 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb66;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb66;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb66;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat66 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat66;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat66;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat66;
  u_xlat66 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat66;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_273 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres0;
  let x_276 : vec3<f32> = (x_266 + -(vec3<f32>(x_273.x, x_273.y, x_273.z)));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres1;
  let x_285 : vec3<f32> = (x_280 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_289 : vec3<f32> = vs_INTERP0;
  let x_292 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres2;
  let x_295 : vec3<f32> = (x_289 + -(vec3<f32>(x_292.x, x_292.y, x_292.z)));
  let x_296 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_295.x, x_295.y, x_295.z, x_296.w);
  let x_299 : vec3<f32> = vs_INTERP0;
  let x_302 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres3;
  let x_305 : vec3<f32> = (x_299 + -(vec3<f32>(x_302.x, x_302.y, x_302.z)));
  let x_306 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_305.x, x_305.y, x_305.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat6;
  let x_310 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_308.x, x_308.y, x_308.z), vec3<f32>(x_310.x, x_310.y, x_310.z));
  let x_314 : vec4<f32> = u_xlat7;
  let x_316 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_314.x, x_314.y, x_314.z), vec3<f32>(x_316.x, x_316.y, x_316.z));
  let x_320 : vec4<f32> = u_xlat8;
  let x_322 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_320.x, x_320.y, x_320.z), vec3<f32>(x_322.x, x_322.y, x_322.z));
  let x_326 : vec4<f32> = u_xlat9;
  let x_328 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_326.x, x_326.y, x_326.z), vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_335 : vec4<f32> = u_xlat6;
  let x_338 : vec4<f32> = x_271.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_335 < x_338);
  let x_341 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_341);
  let x_345 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_345);
  let x_349 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_349);
  let x_353 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_353);
  let x_357 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_357);
  let x_362 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_362);
  let x_366 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_366);
  let x_369 : vec4<f32> = u_xlat6;
  let x_371 : vec4<f32> = u_xlat7;
  let x_373 : vec3<f32> = (vec3<f32>(x_369.x, x_369.y, x_369.z) + vec3<f32>(x_371.y, x_371.z, x_371.w));
  let x_374 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_376 : vec4<f32> = u_xlat6;
  let x_379 : vec3<f32> = max(vec3<f32>(x_376.x, x_376.y, x_376.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_380 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_380.x, x_379.x, x_379.y, x_379.z);
  let x_382 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_382, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_387 : f32 = u_xlat66;
  u_xlat66 = (-(x_387) + 4.0f);
  let x_391 : f32 = u_xlat66;
  u_xlatu66 = u32(x_391);
  let x_394 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_394) << bitcast<u32>(2i));
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : i32 = u_xlati66;
  let x_402 : i32 = u_xlati66;
  let x_406 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_399 + 1i) / 4i)][((x_402 + 1i) % 4i)];
  let x_408 : vec3<f32> = (vec3<f32>(x_397.y, x_397.y, x_397.y) * vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_409 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_408.x, x_408.y, x_408.z, x_409.w);
  let x_411 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_416 : vec4<f32> = x_271.x_MainLightWorldToShadow[(x_411 / 4i)][(x_413 % 4i)];
  let x_418 : vec3<f32> = vs_INTERP0;
  let x_421 : vec4<f32> = u_xlat6;
  let x_423 : vec3<f32> = ((vec3<f32>(x_416.x, x_416.y, x_416.z) * vec3<f32>(x_418.x, x_418.x, x_418.x)) + vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_424 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_423.x, x_423.y, x_423.z, x_424.w);
  let x_426 : i32 = u_xlati66;
  let x_429 : i32 = u_xlati66;
  let x_433 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_426 + 2i) / 4i)][((x_429 + 2i) % 4i)];
  let x_435 : vec3<f32> = vs_INTERP0;
  let x_438 : vec4<f32> = u_xlat6;
  let x_440 : vec3<f32> = ((vec3<f32>(x_433.x, x_433.y, x_433.z) * vec3<f32>(x_435.z, x_435.z, x_435.z)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat6;
  let x_445 : i32 = u_xlati66;
  let x_448 : i32 = u_xlati66;
  let x_452 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_445 + 3i) / 4i)][((x_448 + 3i) % 4i)];
  let x_454 : vec3<f32> = (vec3<f32>(x_443.x, x_443.y, x_443.z) + vec3<f32>(x_452.x, x_452.y, x_452.z));
  let x_455 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_459 : f32 = x_271.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_459);
  let x_461 : bool = u_xlatb66;
  if (x_461) {
    let x_466 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb67 = (x_466 == 1.0f);
    let x_468 : bool = u_xlatb67;
    if (x_468) {
      let x_471 : vec4<f32> = u_xlat6;
      let x_475 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_471.x, x_471.y, x_471.x, x_471.y) + x_475);
      let x_478 : vec4<f32> = u_xlat7;
      let x_479 : vec2<f32> = vec2<f32>(x_478.x, x_478.y);
      let x_481 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_479.x, x_479.y, x_481);
      let x_493 : vec3<f32> = txVec0;
      let x_495 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_493.xy, x_493.z);
      u_xlat8.x = x_495;
      let x_498 : vec4<f32> = u_xlat7;
      let x_499 : vec2<f32> = vec2<f32>(x_498.z, x_498.w);
      let x_501 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_499.x, x_499.y, x_501);
      let x_508 : vec3<f32> = txVec1;
      let x_510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_508.xy, x_508.z);
      u_xlat8.y = x_510;
      let x_512 : vec4<f32> = u_xlat6;
      let x_515 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_512.x, x_512.y, x_512.x, x_512.y) + x_515);
      let x_518 : vec4<f32> = u_xlat7;
      let x_519 : vec2<f32> = vec2<f32>(x_518.x, x_518.y);
      let x_521 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_519.x, x_519.y, x_521);
      let x_528 : vec3<f32> = txVec2;
      let x_530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_528.xy, x_528.z);
      u_xlat8.z = x_530;
      let x_533 : vec4<f32> = u_xlat7;
      let x_534 : vec2<f32> = vec2<f32>(x_533.z, x_533.w);
      let x_536 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_534.x, x_534.y, x_536);
      let x_543 : vec3<f32> = txVec3;
      let x_545 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_543.xy, x_543.z);
      u_xlat8.w = x_545;
      let x_547 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_547, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_554 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb68 = (x_554 == 2.0f);
      let x_556 : bool = u_xlatb68;
      if (x_556) {
        let x_559 : vec4<f32> = u_xlat6;
        let x_562 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_567 : vec2<f32> = ((vec2<f32>(x_559.x, x_559.y) * vec2<f32>(x_562.z, x_562.w)) + vec2<f32>(0.5f, 0.5f));
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_567.x, x_567.y, x_568.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat7;
        let x_572 : vec2<f32> = floor(vec2<f32>(x_570.x, x_570.y));
        let x_573 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_572.x, x_572.y, x_573.z, x_573.w);
        let x_577 : vec4<f32> = u_xlat6;
        let x_580 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_583 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_577.x, x_577.y) * vec2<f32>(x_580.z, x_580.w)) + -(vec2<f32>(x_583.x, x_583.y)));
        let x_587 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_587.x, x_587.x, x_587.y, x_587.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_591 : vec4<f32> = u_xlat8;
        let x_593 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_591.x, x_591.x, x_591.z, x_591.z) * vec4<f32>(x_593.x, x_593.x, x_593.z, x_593.z));
        let x_596 : vec4<f32> = u_xlat9;
        let x_600 : vec2<f32> = (vec2<f32>(x_596.y, x_596.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_601 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_600.x, x_601.y, x_600.y, x_601.w);
        let x_603 : vec4<f32> = u_xlat9;
        let x_606 : vec2<f32> = u_xlat51;
        let x_608 : vec2<f32> = ((vec2<f32>(x_603.x, x_603.z) * vec2<f32>(0.5f, 0.5f)) + -(x_606));
        let x_609 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_608.x, x_608.y, x_609.z, x_609.w);
        let x_612 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_612) + vec2<f32>(1.0f, 1.0f));
        let x_617 : vec2<f32> = u_xlat51;
        let x_619 : vec2<f32> = min(x_617, vec2<f32>(0.0f, 0.0f));
        let x_620 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_619.x, x_619.y, x_620.z, x_620.w);
        let x_622 : vec4<f32> = u_xlat10;
        let x_625 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = u_xlat53;
        let x_629 : vec2<f32> = ((-(vec2<f32>(x_622.x, x_622.y)) * vec2<f32>(x_625.x, x_625.y)) + x_628);
        let x_630 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_629.x, x_629.y, x_630.z, x_630.w);
        let x_632 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_632, vec2<f32>(0.0f, 0.0f));
        let x_634 : vec2<f32> = u_xlat51;
        let x_636 : vec2<f32> = u_xlat51;
        let x_638 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_634) * x_636) + vec2<f32>(x_638.y, x_638.w));
        let x_641 : vec4<f32> = u_xlat10;
        let x_643 : vec2<f32> = (vec2<f32>(x_641.x, x_641.y) + vec2<f32>(1.0f, 1.0f));
        let x_644 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_643.x, x_643.y, x_644.z, x_644.w);
        let x_646 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_646 + vec2<f32>(1.0f, 1.0f));
        let x_649 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_649.x, x_649.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_656 : vec2<f32> = u_xlat53;
        let x_657 : vec2<f32> = (x_656 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_658 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_657.x, x_657.y, x_658.z, x_658.w);
        let x_660 : vec4<f32> = u_xlat10;
        let x_662 : vec2<f32> = (vec2<f32>(x_660.x, x_660.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_663 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_662.x, x_662.y, x_663.z, x_663.w);
        let x_666 : vec2<f32> = u_xlat51;
        let x_667 : vec2<f32> = (x_666 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_668 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_667.x, x_667.y, x_668.z, x_668.w);
        let x_670 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_670.y, x_670.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_674 : f32 = u_xlat10.x;
        u_xlat11.z = x_674;
        let x_677 : f32 = u_xlat51.x;
        u_xlat11.w = x_677;
        let x_680 : f32 = u_xlat12.x;
        u_xlat9.z = x_680;
        let x_683 : f32 = u_xlat8.x;
        u_xlat9.w = x_683;
        let x_686 : vec4<f32> = u_xlat9;
        let x_688 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_686.z, x_686.w, x_686.x, x_686.z) + vec4<f32>(x_688.z, x_688.w, x_688.x, x_688.z));
        let x_692 : f32 = u_xlat11.y;
        u_xlat10.z = x_692;
        let x_695 : f32 = u_xlat51.y;
        u_xlat10.w = x_695;
        let x_698 : f32 = u_xlat9.y;
        u_xlat12.z = x_698;
        let x_701 : f32 = u_xlat8.z;
        u_xlat12.w = x_701;
        let x_703 : vec4<f32> = u_xlat10;
        let x_705 : vec4<f32> = u_xlat12;
        let x_707 : vec3<f32> = (vec3<f32>(x_703.z, x_703.y, x_703.w) + vec3<f32>(x_705.z, x_705.y, x_705.w));
        let x_708 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
        let x_710 : vec4<f32> = u_xlat9;
        let x_712 : vec4<f32> = u_xlat13;
        let x_714 : vec3<f32> = (vec3<f32>(x_710.x, x_710.z, x_710.w) / vec3<f32>(x_712.z, x_712.w, x_712.y));
        let x_715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat9;
        let x_723 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_723.x, x_723.y, x_723.z, x_724.w);
        let x_726 : vec4<f32> = u_xlat12;
        let x_728 : vec4<f32> = u_xlat8;
        let x_730 : vec3<f32> = (vec3<f32>(x_726.z, x_726.y, x_726.w) / vec3<f32>(x_728.x, x_728.y, x_728.z));
        let x_731 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_730.x, x_730.y, x_730.z, x_731.w);
        let x_733 : vec4<f32> = u_xlat10;
        let x_735 : vec3<f32> = (vec3<f32>(x_733.x, x_733.y, x_733.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_736 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_735.x, x_735.y, x_735.z, x_736.w);
        let x_738 : vec4<f32> = u_xlat9;
        let x_741 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_743 : vec3<f32> = (vec3<f32>(x_738.y, x_738.x, x_738.z) * vec3<f32>(x_741.x, x_741.x, x_741.x));
        let x_744 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_743.x, x_743.y, x_743.z, x_744.w);
        let x_746 : vec4<f32> = u_xlat10;
        let x_749 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_751 : vec3<f32> = (vec3<f32>(x_746.x, x_746.y, x_746.z) * vec3<f32>(x_749.y, x_749.y, x_749.y));
        let x_752 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_751.x, x_751.y, x_751.z, x_752.w);
        let x_755 : f32 = u_xlat10.x;
        u_xlat9.w = x_755;
        let x_757 : vec4<f32> = u_xlat7;
        let x_760 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_757.x, x_757.y, x_757.x, x_757.y) * vec4<f32>(x_760.x, x_760.y, x_760.x, x_760.y)) + vec4<f32>(x_763.y, x_763.w, x_763.x, x_763.w));
        let x_766 : vec4<f32> = u_xlat7;
        let x_769 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_772 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_766.x, x_766.y) * vec2<f32>(x_769.x, x_769.y)) + vec2<f32>(x_772.z, x_772.w));
        let x_776 : f32 = u_xlat9.y;
        u_xlat10.w = x_776;
        let x_778 : vec4<f32> = u_xlat10;
        let x_779 : vec2<f32> = vec2<f32>(x_778.y, x_778.z);
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_780.x, x_779.x, x_780.z, x_779.y);
        let x_782 : vec4<f32> = u_xlat7;
        let x_785 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.x, x_788.y, x_788.z, x_788.y));
        let x_791 : vec4<f32> = u_xlat7;
        let x_794 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.w, x_797.y, x_797.w, x_797.z));
        let x_800 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_806 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_800.x, x_800.y, x_800.x, x_800.y) * vec4<f32>(x_803.x, x_803.y, x_803.x, x_803.y)) + vec4<f32>(x_806.x, x_806.w, x_806.z, x_806.w));
        let x_810 : vec4<f32> = u_xlat8;
        let x_812 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_810.x, x_810.x, x_810.x, x_810.y) * vec4<f32>(x_812.z, x_812.w, x_812.y, x_812.z));
        let x_816 : vec4<f32> = u_xlat8;
        let x_818 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_816.y, x_816.y, x_816.z, x_816.z) * x_818);
        let x_822 : f32 = u_xlat8.z;
        let x_824 : f32 = u_xlat13.y;
        u_xlat68 = (x_822 * x_824);
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.x, x_827.y);
        let x_830 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec4;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat70 = x_840;
        let x_842 : vec4<f32> = u_xlat11;
        let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
        let x_845 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_853 : vec3<f32> = txVec5;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat72 = x_855;
        let x_856 : f32 = u_xlat72;
        let x_858 : f32 = u_xlat14.y;
        u_xlat72 = (x_856 * x_858);
        let x_861 : f32 = u_xlat14.x;
        let x_862 : f32 = u_xlat70;
        let x_864 : f32 = u_xlat72;
        u_xlat70 = ((x_861 * x_862) + x_864);
        let x_867 : vec2<f32> = u_xlat51;
        let x_869 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_867.x, x_867.y, x_869);
        let x_876 : vec3<f32> = txVec6;
        let x_878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_876.xy, x_876.z);
        u_xlat72 = x_878;
        let x_880 : f32 = u_xlat14.z;
        let x_881 : f32 = u_xlat72;
        let x_883 : f32 = u_xlat70;
        u_xlat70 = ((x_880 * x_881) + x_883);
        let x_886 : vec4<f32> = u_xlat10;
        let x_887 : vec2<f32> = vec2<f32>(x_886.x, x_886.y);
        let x_889 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_887.x, x_887.y, x_889);
        let x_896 : vec3<f32> = txVec7;
        let x_898 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_896.xy, x_896.z);
        u_xlat72 = x_898;
        let x_900 : f32 = u_xlat14.w;
        let x_901 : f32 = u_xlat72;
        let x_903 : f32 = u_xlat70;
        u_xlat70 = ((x_900 * x_901) + x_903);
        let x_906 : vec4<f32> = u_xlat12;
        let x_907 : vec2<f32> = vec2<f32>(x_906.x, x_906.y);
        let x_909 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_907.x, x_907.y, x_909);
        let x_916 : vec3<f32> = txVec8;
        let x_918 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_916.xy, x_916.z);
        u_xlat72 = x_918;
        let x_920 : f32 = u_xlat15.x;
        let x_921 : f32 = u_xlat72;
        let x_923 : f32 = u_xlat70;
        u_xlat70 = ((x_920 * x_921) + x_923);
        let x_926 : vec4<f32> = u_xlat12;
        let x_927 : vec2<f32> = vec2<f32>(x_926.z, x_926.w);
        let x_929 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_927.x, x_927.y, x_929);
        let x_936 : vec3<f32> = txVec9;
        let x_938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_936.xy, x_936.z);
        u_xlat72 = x_938;
        let x_940 : f32 = u_xlat15.y;
        let x_941 : f32 = u_xlat72;
        let x_943 : f32 = u_xlat70;
        u_xlat70 = ((x_940 * x_941) + x_943);
        let x_946 : vec4<f32> = u_xlat10;
        let x_947 : vec2<f32> = vec2<f32>(x_946.z, x_946.w);
        let x_949 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_947.x, x_947.y, x_949);
        let x_956 : vec3<f32> = txVec10;
        let x_958 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_956.xy, x_956.z);
        u_xlat72 = x_958;
        let x_960 : f32 = u_xlat15.z;
        let x_961 : f32 = u_xlat72;
        let x_963 : f32 = u_xlat70;
        u_xlat70 = ((x_960 * x_961) + x_963);
        let x_966 : vec4<f32> = u_xlat9;
        let x_967 : vec2<f32> = vec2<f32>(x_966.x, x_966.y);
        let x_969 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_967.x, x_967.y, x_969);
        let x_976 : vec3<f32> = txVec11;
        let x_978 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_976.xy, x_976.z);
        u_xlat72 = x_978;
        let x_980 : f32 = u_xlat15.w;
        let x_981 : f32 = u_xlat72;
        let x_983 : f32 = u_xlat70;
        u_xlat70 = ((x_980 * x_981) + x_983);
        let x_986 : vec4<f32> = u_xlat9;
        let x_987 : vec2<f32> = vec2<f32>(x_986.z, x_986.w);
        let x_989 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_987.x, x_987.y, x_989);
        let x_996 : vec3<f32> = txVec12;
        let x_998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_996.xy, x_996.z);
        u_xlat72 = x_998;
        let x_999 : f32 = u_xlat68;
        let x_1000 : f32 = u_xlat72;
        let x_1002 : f32 = u_xlat70;
        u_xlat67 = ((x_999 * x_1000) + x_1002);
      } else {
        let x_1005 : vec4<f32> = u_xlat6;
        let x_1008 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1011 : vec2<f32> = ((vec2<f32>(x_1005.x, x_1005.y) * vec2<f32>(x_1008.z, x_1008.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1012 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1011.x, x_1011.y, x_1012.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1016 : vec2<f32> = floor(vec2<f32>(x_1014.x, x_1014.y));
        let x_1017 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1016.x, x_1016.y, x_1017.z, x_1017.w);
        let x_1019 : vec4<f32> = u_xlat6;
        let x_1022 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1025 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1019.x, x_1019.y) * vec2<f32>(x_1022.z, x_1022.w)) + -(vec2<f32>(x_1025.x, x_1025.y)));
        let x_1029 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1029.x, x_1029.x, x_1029.y, x_1029.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1032 : vec4<f32> = u_xlat8;
        let x_1034 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1032.x, x_1032.x, x_1032.z, x_1032.z) * vec4<f32>(x_1034.x, x_1034.x, x_1034.z, x_1034.z));
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1041 : vec2<f32> = (vec2<f32>(x_1037.y, x_1037.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1042 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1042.x, x_1041.x, x_1042.z, x_1041.y);
        let x_1044 : vec4<f32> = u_xlat9;
        let x_1047 : vec2<f32> = u_xlat51;
        let x_1049 : vec2<f32> = ((vec2<f32>(x_1044.x, x_1044.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1047));
        let x_1050 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1049.x, x_1050.y, x_1049.y, x_1050.w);
        let x_1052 : vec2<f32> = u_xlat51;
        let x_1054 : vec2<f32> = (-(x_1052) + vec2<f32>(1.0f, 1.0f));
        let x_1055 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1054.x, x_1054.y, x_1055.z, x_1055.w);
        let x_1057 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1057, vec2<f32>(0.0f, 0.0f));
        let x_1059 : vec2<f32> = u_xlat53;
        let x_1061 : vec2<f32> = u_xlat53;
        let x_1063 : vec4<f32> = u_xlat9;
        let x_1065 : vec2<f32> = ((-(x_1059) * x_1061) + vec2<f32>(x_1063.x, x_1063.y));
        let x_1066 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1065.x, x_1065.y, x_1066.z, x_1066.w);
        let x_1068 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1068, vec2<f32>(0.0f, 0.0f));
        let x_1071 : vec2<f32> = u_xlat53;
        let x_1073 : vec2<f32> = u_xlat53;
        let x_1075 : vec4<f32> = u_xlat8;
        let x_1077 : vec2<f32> = ((-(x_1071) * x_1073) + vec2<f32>(x_1075.y, x_1075.w));
        let x_1078 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1077.x, x_1078.y, x_1077.y);
        let x_1080 : vec4<f32> = u_xlat9;
        let x_1083 : vec2<f32> = (vec2<f32>(x_1080.x, x_1080.y) + vec2<f32>(2.0f, 2.0f));
        let x_1084 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1083.x, x_1083.y, x_1084.z, x_1084.w);
        let x_1086 : vec3<f32> = u_xlat30;
        let x_1088 : vec2<f32> = (vec2<f32>(x_1086.x, x_1086.z) + vec2<f32>(2.0f, 2.0f));
        let x_1089 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1088.x, x_1089.z, x_1088.y);
        let x_1092 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1092 * 0.081632003f);
        let x_1096 : vec4<f32> = u_xlat8;
        let x_1099 : vec3<f32> = (vec3<f32>(x_1096.z, x_1096.x, x_1096.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1100 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1099.x, x_1099.y, x_1099.z, x_1100.w);
        let x_1102 : vec4<f32> = u_xlat9;
        let x_1105 : vec2<f32> = (vec2<f32>(x_1102.x, x_1102.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1106 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1105.x, x_1105.y, x_1106.z, x_1106.w);
        let x_1109 : f32 = u_xlat12.y;
        u_xlat11.x = x_1109;
        let x_1111 : vec2<f32> = u_xlat51;
        let x_1118 : vec2<f32> = ((vec2<f32>(x_1111.x, x_1111.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1119 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1119.x, x_1118.x, x_1119.z, x_1118.y);
        let x_1121 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1121.x, x_1121.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1126 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1125.x, x_1126.y, x_1125.y, x_1126.w);
        let x_1129 : f32 = u_xlat8.x;
        u_xlat9.y = x_1129;
        let x_1132 : f32 = u_xlat10.y;
        u_xlat9.w = x_1132;
        let x_1134 : vec4<f32> = u_xlat9;
        let x_1135 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1134 + x_1135);
        let x_1137 : vec2<f32> = u_xlat51;
        let x_1140 : vec2<f32> = ((vec2<f32>(x_1137.y, x_1137.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1141 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1141.x, x_1140.x, x_1141.z, x_1140.y);
        let x_1143 : vec2<f32> = u_xlat51;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1143.y, x_1143.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1147 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1147.w);
        let x_1150 : f32 = u_xlat8.y;
        u_xlat10.y = x_1150;
        let x_1152 : vec4<f32> = u_xlat10;
        let x_1153 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1152 + x_1153);
        let x_1155 : vec4<f32> = u_xlat9;
        let x_1156 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1155 / x_1156);
        let x_1158 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1158 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1164 : vec4<f32> = u_xlat10;
        let x_1165 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1164 / x_1165);
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1167 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1169 : vec4<f32> = u_xlat9;
        let x_1172 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1169.w, x_1169.x, x_1169.y, x_1169.z) * vec4<f32>(x_1172.x, x_1172.x, x_1172.x, x_1172.x));
        let x_1175 : vec4<f32> = u_xlat10;
        let x_1178 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1175.x, x_1175.w, x_1175.y, x_1175.z) * vec4<f32>(x_1178.y, x_1178.y, x_1178.y, x_1178.y));
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1182 : vec3<f32> = vec3<f32>(x_1181.y, x_1181.z, x_1181.w);
        let x_1183 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1182.x, x_1183.y, x_1182.y, x_1182.z);
        let x_1186 : f32 = u_xlat10.x;
        u_xlat12.y = x_1186;
        let x_1188 : vec4<f32> = u_xlat7;
        let x_1191 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1194 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1188.x, x_1188.y, x_1188.x, x_1188.y) * vec4<f32>(x_1191.x, x_1191.y, x_1191.x, x_1191.y)) + vec4<f32>(x_1194.x, x_1194.y, x_1194.z, x_1194.y));
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1197.x, x_1197.y) * vec2<f32>(x_1200.x, x_1200.y)) + vec2<f32>(x_1203.w, x_1203.y));
        let x_1207 : f32 = u_xlat12.y;
        u_xlat9.y = x_1207;
        let x_1210 : f32 = u_xlat10.z;
        u_xlat12.y = x_1210;
        let x_1212 : vec4<f32> = u_xlat7;
        let x_1215 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat12;
        let x_1229 : vec2<f32> = ((vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(x_1224.x, x_1224.y)) + vec2<f32>(x_1227.w, x_1227.y));
        let x_1230 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
        let x_1233 : f32 = u_xlat12.y;
        u_xlat9.z = x_1233;
        let x_1236 : vec4<f32> = u_xlat7;
        let x_1239 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y) * vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y)) + vec4<f32>(x_1242.x, x_1242.y, x_1242.x, x_1242.z));
        let x_1246 : f32 = u_xlat10.w;
        u_xlat12.y = x_1246;
        let x_1249 : vec4<f32> = u_xlat7;
        let x_1252 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1255 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y) * vec4<f32>(x_1252.x, x_1252.y, x_1252.x, x_1252.y)) + vec4<f32>(x_1255.x, x_1255.y, x_1255.z, x_1255.y));
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat12;
        u_xlat31 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.w, x_1265.y));
        let x_1269 : f32 = u_xlat12.y;
        u_xlat9.w = x_1269;
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1272.x, x_1272.y) * vec2<f32>(x_1275.x, x_1275.y)) + vec2<f32>(x_1278.x, x_1278.w));
        let x_1281 : vec4<f32> = u_xlat12;
        let x_1282 : vec3<f32> = vec3<f32>(x_1281.x, x_1281.z, x_1281.w);
        let x_1283 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1282.x, x_1283.y, x_1282.y, x_1282.z);
        let x_1285 : vec4<f32> = u_xlat7;
        let x_1288 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1291 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1285.x, x_1285.y, x_1285.x, x_1285.y) * vec4<f32>(x_1288.x, x_1288.y, x_1288.x, x_1288.y)) + vec4<f32>(x_1291.x, x_1291.y, x_1291.z, x_1291.y));
        let x_1295 : vec4<f32> = u_xlat7;
        let x_1298 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1301 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1295.x, x_1295.y) * vec2<f32>(x_1298.x, x_1298.y)) + vec2<f32>(x_1301.w, x_1301.y));
        let x_1305 : f32 = u_xlat9.x;
        u_xlat10.x = x_1305;
        let x_1307 : vec4<f32> = u_xlat7;
        let x_1310 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1313 : vec4<f32> = u_xlat10;
        let x_1315 : vec2<f32> = ((vec2<f32>(x_1307.x, x_1307.y) * vec2<f32>(x_1310.x, x_1310.y)) + vec2<f32>(x_1313.x, x_1313.y));
        let x_1316 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1315.x, x_1315.y, x_1316.z, x_1316.w);
        let x_1319 : vec4<f32> = u_xlat8;
        let x_1321 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1319.x, x_1319.x, x_1319.x, x_1319.x) * x_1321);
        let x_1324 : vec4<f32> = u_xlat8;
        let x_1326 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1324.y, x_1324.y, x_1324.y, x_1324.y) * x_1326);
        let x_1329 : vec4<f32> = u_xlat8;
        let x_1331 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1329.z, x_1329.z, x_1329.z, x_1329.z) * x_1331);
        let x_1333 : vec4<f32> = u_xlat8;
        let x_1335 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1333.w, x_1333.w, x_1333.w, x_1333.w) * x_1335);
        let x_1338 : vec4<f32> = u_xlat13;
        let x_1339 : vec2<f32> = vec2<f32>(x_1338.x, x_1338.y);
        let x_1341 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1339.x, x_1339.y, x_1341);
        let x_1348 : vec3<f32> = txVec13;
        let x_1350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1348.xy, x_1348.z);
        u_xlat68 = x_1350;
        let x_1352 : vec4<f32> = u_xlat13;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.z, x_1352.w);
        let x_1355 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec14;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat70 = x_1364;
        let x_1365 : f32 = u_xlat70;
        let x_1367 : f32 = u_xlat18.y;
        u_xlat70 = (x_1365 * x_1367);
        let x_1370 : f32 = u_xlat18.x;
        let x_1371 : f32 = u_xlat68;
        let x_1373 : f32 = u_xlat70;
        u_xlat68 = ((x_1370 * x_1371) + x_1373);
        let x_1376 : vec2<f32> = u_xlat51;
        let x_1378 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1376.x, x_1376.y, x_1378);
        let x_1385 : vec3<f32> = txVec15;
        let x_1387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1385.xy, x_1385.z);
        u_xlat70 = x_1387;
        let x_1389 : f32 = u_xlat18.z;
        let x_1390 : f32 = u_xlat70;
        let x_1392 : f32 = u_xlat68;
        u_xlat68 = ((x_1389 * x_1390) + x_1392);
        let x_1395 : vec4<f32> = u_xlat16;
        let x_1396 : vec2<f32> = vec2<f32>(x_1395.x, x_1395.y);
        let x_1398 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1396.x, x_1396.y, x_1398);
        let x_1405 : vec3<f32> = txVec16;
        let x_1407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1405.xy, x_1405.z);
        u_xlat70 = x_1407;
        let x_1409 : f32 = u_xlat18.w;
        let x_1410 : f32 = u_xlat70;
        let x_1412 : f32 = u_xlat68;
        u_xlat68 = ((x_1409 * x_1410) + x_1412);
        let x_1415 : vec4<f32> = u_xlat14;
        let x_1416 : vec2<f32> = vec2<f32>(x_1415.x, x_1415.y);
        let x_1418 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1416.x, x_1416.y, x_1418);
        let x_1425 : vec3<f32> = txVec17;
        let x_1427 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1425.xy, x_1425.z);
        u_xlat70 = x_1427;
        let x_1429 : f32 = u_xlat19.x;
        let x_1430 : f32 = u_xlat70;
        let x_1432 : f32 = u_xlat68;
        u_xlat68 = ((x_1429 * x_1430) + x_1432);
        let x_1435 : vec4<f32> = u_xlat14;
        let x_1436 : vec2<f32> = vec2<f32>(x_1435.z, x_1435.w);
        let x_1438 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1436.x, x_1436.y, x_1438);
        let x_1445 : vec3<f32> = txVec18;
        let x_1447 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1445.xy, x_1445.z);
        u_xlat70 = x_1447;
        let x_1449 : f32 = u_xlat19.y;
        let x_1450 : f32 = u_xlat70;
        let x_1452 : f32 = u_xlat68;
        u_xlat68 = ((x_1449 * x_1450) + x_1452);
        let x_1455 : vec4<f32> = u_xlat15;
        let x_1456 : vec2<f32> = vec2<f32>(x_1455.x, x_1455.y);
        let x_1458 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1456.x, x_1456.y, x_1458);
        let x_1465 : vec3<f32> = txVec19;
        let x_1467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1465.xy, x_1465.z);
        u_xlat70 = x_1467;
        let x_1469 : f32 = u_xlat19.z;
        let x_1470 : f32 = u_xlat70;
        let x_1472 : f32 = u_xlat68;
        u_xlat68 = ((x_1469 * x_1470) + x_1472);
        let x_1475 : vec4<f32> = u_xlat16;
        let x_1476 : vec2<f32> = vec2<f32>(x_1475.z, x_1475.w);
        let x_1478 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1476.x, x_1476.y, x_1478);
        let x_1485 : vec3<f32> = txVec20;
        let x_1487 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1485.xy, x_1485.z);
        u_xlat70 = x_1487;
        let x_1489 : f32 = u_xlat19.w;
        let x_1490 : f32 = u_xlat70;
        let x_1492 : f32 = u_xlat68;
        u_xlat68 = ((x_1489 * x_1490) + x_1492);
        let x_1495 : vec4<f32> = u_xlat17;
        let x_1496 : vec2<f32> = vec2<f32>(x_1495.x, x_1495.y);
        let x_1498 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1496.x, x_1496.y, x_1498);
        let x_1505 : vec3<f32> = txVec21;
        let x_1507 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1505.xy, x_1505.z);
        u_xlat70 = x_1507;
        let x_1509 : f32 = u_xlat20.x;
        let x_1510 : f32 = u_xlat70;
        let x_1512 : f32 = u_xlat68;
        u_xlat68 = ((x_1509 * x_1510) + x_1512);
        let x_1515 : vec4<f32> = u_xlat17;
        let x_1516 : vec2<f32> = vec2<f32>(x_1515.z, x_1515.w);
        let x_1518 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1516.x, x_1516.y, x_1518);
        let x_1525 : vec3<f32> = txVec22;
        let x_1527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1525.xy, x_1525.z);
        u_xlat70 = x_1527;
        let x_1529 : f32 = u_xlat20.y;
        let x_1530 : f32 = u_xlat70;
        let x_1532 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1530) + x_1532);
        let x_1535 : vec2<f32> = u_xlat31;
        let x_1537 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1535.x, x_1535.y, x_1537);
        let x_1544 : vec3<f32> = txVec23;
        let x_1546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1544.xy, x_1544.z);
        u_xlat70 = x_1546;
        let x_1548 : f32 = u_xlat20.z;
        let x_1549 : f32 = u_xlat70;
        let x_1551 : f32 = u_xlat68;
        u_xlat68 = ((x_1548 * x_1549) + x_1551);
        let x_1554 : vec2<f32> = u_xlat59;
        let x_1556 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1554.x, x_1554.y, x_1556);
        let x_1563 : vec3<f32> = txVec24;
        let x_1565 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1563.xy, x_1563.z);
        u_xlat70 = x_1565;
        let x_1567 : f32 = u_xlat20.w;
        let x_1568 : f32 = u_xlat70;
        let x_1570 : f32 = u_xlat68;
        u_xlat68 = ((x_1567 * x_1568) + x_1570);
        let x_1573 : vec4<f32> = u_xlat12;
        let x_1574 : vec2<f32> = vec2<f32>(x_1573.x, x_1573.y);
        let x_1576 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1574.x, x_1574.y, x_1576);
        let x_1583 : vec3<f32> = txVec25;
        let x_1585 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1583.xy, x_1583.z);
        u_xlat70 = x_1585;
        let x_1587 : f32 = u_xlat8.x;
        let x_1588 : f32 = u_xlat70;
        let x_1590 : f32 = u_xlat68;
        u_xlat68 = ((x_1587 * x_1588) + x_1590);
        let x_1593 : vec4<f32> = u_xlat12;
        let x_1594 : vec2<f32> = vec2<f32>(x_1593.z, x_1593.w);
        let x_1596 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1594.x, x_1594.y, x_1596);
        let x_1603 : vec3<f32> = txVec26;
        let x_1605 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1603.xy, x_1603.z);
        u_xlat70 = x_1605;
        let x_1607 : f32 = u_xlat8.y;
        let x_1608 : f32 = u_xlat70;
        let x_1610 : f32 = u_xlat68;
        u_xlat68 = ((x_1607 * x_1608) + x_1610);
        let x_1613 : vec2<f32> = u_xlat54;
        let x_1615 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1613.x, x_1613.y, x_1615);
        let x_1622 : vec3<f32> = txVec27;
        let x_1624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1622.xy, x_1622.z);
        u_xlat70 = x_1624;
        let x_1626 : f32 = u_xlat8.z;
        let x_1627 : f32 = u_xlat70;
        let x_1629 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1627) + x_1629);
        let x_1632 : vec4<f32> = u_xlat7;
        let x_1633 : vec2<f32> = vec2<f32>(x_1632.x, x_1632.y);
        let x_1635 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1633.x, x_1633.y, x_1635);
        let x_1642 : vec3<f32> = txVec28;
        let x_1644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1642.xy, x_1642.z);
        u_xlat70 = x_1644;
        let x_1646 : f32 = u_xlat8.w;
        let x_1647 : f32 = u_xlat70;
        let x_1649 : f32 = u_xlat68;
        u_xlat67 = ((x_1646 * x_1647) + x_1649);
      }
    }
  } else {
    let x_1653 : vec4<f32> = u_xlat6;
    let x_1654 : vec2<f32> = vec2<f32>(x_1653.x, x_1653.y);
    let x_1656 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1654.x, x_1654.y, x_1656);
    let x_1663 : vec3<f32> = txVec29;
    let x_1665 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1663.xy, x_1663.z);
    u_xlat67 = x_1665;
  }
  let x_1667 : f32 = x_271.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1667) + 1.0f);
  let x_1670 : f32 = u_xlat67;
  let x_1672 : f32 = x_271.x_MainLightShadowParams.x;
  let x_1674 : f32 = u_xlat68;
  u_xlat67 = ((x_1670 * x_1672) + x_1674);
  let x_1678 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1678);
  let x_1682 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1682 >= 1.0f);
  let x_1684 : bool = u_xlatb70;
  let x_1685 : bool = u_xlatb72;
  u_xlatb70 = (x_1684 | x_1685);
  let x_1687 : bool = u_xlatb70;
  let x_1688 : f32 = u_xlat67;
  u_xlat67 = select(x_1688, 1.0f, x_1687);
  let x_1690 : vec3<f32> = u_xlat0;
  let x_1692 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1690, -(vec3<f32>(x_1692.x, x_1692.y, x_1692.z)));
  let x_1698 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1698, 0.0f, 1.0f);
  let x_1701 : f32 = u_xlat67;
  let x_1704 : vec4<f32> = x_90.x_MainLightColor;
  let x_1706 : vec3<f32> = (vec3<f32>(x_1701, x_1701, x_1701) * vec3<f32>(x_1704.x, x_1704.y, x_1704.z));
  let x_1707 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1706.x, x_1706.y, x_1706.z, x_1707.w);
  let x_1709 : vec3<f32> = u_xlat0;
  let x_1711 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1709.x, x_1709.x, x_1709.x) * vec3<f32>(x_1711.x, x_1711.y, x_1711.z));
  let x_1714 : vec3<f32> = u_xlat0;
  let x_1715 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1714 * vec3<f32>(x_1715.x, x_1715.y, x_1715.z));
  let x_1719 : f32 = x_161.unity_LODFade.x;
  u_xlatb67 = (x_1719 < 0.0f);
  let x_1722 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1722 + 1.0f);
  let x_1725 : bool = u_xlatb67;
  if (x_1725) {
    let x_1730 : f32 = u_xlat3.x;
    x_1726 = x_1730;
  } else {
    let x_1733 : f32 = x_161.unity_LODFade.x;
    x_1726 = x_1733;
  }
  let x_1734 : f32 = x_1726;
  u_xlat67 = x_1734;
  let x_1736 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1736);
  let x_1738 : vec3<f32> = u_xlat1;
  let x_1741 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1738) * vec3<f32>(x_1741.x, x_1741.y, x_1741.x));
  let x_1747 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1747);
  let x_1751 : u32 = u_xlatu1.z;
  u_xlatu45 = (x_1751 * 1025u);
  let x_1755 : u32 = u_xlatu45;
  u_xlatu25 = (x_1755 >> 6u);
  let x_1759 : u32 = u_xlatu45;
  let x_1760 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1759 ^ x_1760));
  let x_1763 : i32 = u_xlati45;
  u_xlatu45 = (bitcast<u32>(x_1763) * 9u);
  let x_1767 : u32 = u_xlatu45;
  u_xlatu25 = (x_1767 >> 11u);
  let x_1770 : u32 = u_xlatu45;
  let x_1771 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1770 ^ x_1771));
  let x_1774 : i32 = u_xlati45;
  u_xlati45 = (x_1774 * 32769i);
  let x_1778 : i32 = u_xlati45;
  let x_1781 : u32 = u_xlatu1.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1778) ^ x_1781));
  let x_1785 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1785) * 1025u);
  let x_1788 : u32 = u_xlatu23;
  u_xlatu45 = (x_1788 >> 6u);
  let x_1790 : u32 = u_xlatu45;
  let x_1791 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1790 ^ x_1791));
  let x_1794 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1794) * 9u);
  let x_1797 : u32 = u_xlatu23;
  u_xlatu45 = (x_1797 >> 11u);
  let x_1799 : u32 = u_xlatu45;
  let x_1800 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1799 ^ x_1800));
  let x_1803 : i32 = u_xlati23;
  u_xlati23 = (x_1803 * 32769i);
  let x_1806 : i32 = u_xlati23;
  let x_1809 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1806) ^ x_1809));
  let x_1812 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1812) * 1025u);
  let x_1817 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1817 >> 6u);
  let x_1819 : u32 = u_xlatu23;
  let x_1821 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1819 ^ x_1821));
  let x_1824 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1824) * 9u);
  let x_1829 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1829 >> 11u);
  let x_1831 : u32 = u_xlatu23;
  let x_1833 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1831 ^ x_1833));
  let x_1836 : i32 = u_xlati1;
  u_xlati1 = (x_1836 * 32769i);
  param = 1065353216i;
  let x_1842 : i32 = u_xlati1;
  param_1 = x_1842;
  param_2 = 0i;
  param_3 = 23i;
  let x_1845 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1845);
  let x_1849 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1849 + -1.0f);
  let x_1854 : f32 = u_xlat1.x;
  u_xlat23 = (-(x_1854) + 1.0f);
  let x_1857 : bool = u_xlatb3;
  if (x_1857) {
    let x_1862 : f32 = u_xlat1.x;
    x_1858 = x_1862;
  } else {
    let x_1864 : f32 = u_xlat23;
    x_1858 = x_1864;
  }
  let x_1865 : f32 = x_1858;
  u_xlat1.x = x_1865;
  let x_1867 : f32 = u_xlat67;
  let x_1870 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1867 * 2.0f) + -(x_1870));
  let x_1875 : f32 = u_xlat1.x;
  let x_1877 : f32 = u_xlat3.w;
  u_xlat23 = (x_1875 * x_1877);
  let x_1882 : f32 = u_xlat23;
  u_xlatb45.x = (x_1882 >= 0.400000006f);
  let x_1888 : bool = u_xlatb45.x;
  let x_1889 : f32 = u_xlat23;
  u_xlat45.x = select(0.0f, x_1889, x_1888);
  let x_1893 : f32 = u_xlat3.w;
  let x_1895 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1893 * x_1895) + -0.400000006f);
  let x_1900 : f32 = u_xlat23;
  u_xlat67 = dpdxCoarse(x_1900);
  let x_1902 : f32 = u_xlat23;
  u_xlat23 = dpdyCoarse(x_1902);
  let x_1904 : f32 = u_xlat23;
  let x_1906 : f32 = u_xlat67;
  u_xlat23 = (abs(x_1904) + abs(x_1906));
  let x_1909 : f32 = u_xlat23;
  u_xlat23 = max(x_1909, 0.0001f);
  let x_1913 : f32 = u_xlat1.x;
  let x_1914 : f32 = u_xlat23;
  u_xlat1.x = (x_1913 / x_1914);
  let x_1918 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1918 + 0.5f);
  let x_1922 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1922, 0.0f, 1.0f);
  let x_1927 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb23 = !((x_1927 == 0.0f));
  let x_1929 : bool = u_xlatb23;
  if (x_1929) {
    let x_1934 : f32 = u_xlat1.x;
    x_1930 = x_1934;
  } else {
    let x_1937 : f32 = u_xlat45.x;
    x_1930 = x_1937;
  }
  let x_1938 : f32 = x_1930;
  u_xlat1.x = x_1938;
  let x_1941 : f32 = u_xlat1.x;
  u_xlat45.x = (x_1941 + -0.0001f);
  let x_1946 : f32 = u_xlat45.x;
  u_xlatb45.x = (x_1946 < 0.0f);
  let x_1950 : bool = u_xlatb45.x;
  if (((select(0i, 1i, x_1950) * -1i) != 0i)) {
    discard;
  }
  let x_1960 : f32 = vs_INTERP2.w;
  u_xlatb45.x = (0.0f < x_1960);
  let x_1964 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb45.y = (x_1964 >= 0.0f);
  let x_1968 : bool = u_xlatb45.x;
  u_xlat45.x = select(-1.0f, 1.0f, x_1968);
  let x_1972 : bool = u_xlatb45.y;
  u_xlat45.y = select(-1.0f, 1.0f, x_1972);
  let x_1976 : f32 = u_xlat45.y;
  let x_1978 : f32 = u_xlat45.x;
  u_xlat45.x = (x_1976 * x_1978);
  let x_1981 : vec3<f32> = vs_INTERP1;
  let x_1983 : vec4<f32> = vs_INTERP2;
  let x_1985 : vec3<f32> = (vec3<f32>(x_1981.z, x_1981.x, x_1981.y) * vec3<f32>(x_1983.y, x_1983.z, x_1983.x));
  let x_1986 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1985.x, x_1985.y, x_1985.z, x_1986.w);
  let x_1988 : vec3<f32> = vs_INTERP1;
  let x_1990 : vec4<f32> = vs_INTERP2;
  let x_1993 : vec4<f32> = u_xlat3;
  let x_1996 : vec3<f32> = ((vec3<f32>(x_1988.y, x_1988.z, x_1988.x) * vec3<f32>(x_1990.z, x_1990.x, x_1990.y)) + -(vec3<f32>(x_1993.x, x_1993.y, x_1993.z)));
  let x_1997 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1997.w);
  let x_1999 : vec2<f32> = u_xlat45;
  let x_2001 : vec4<f32> = u_xlat3;
  let x_2003 : vec3<f32> = (vec3<f32>(x_1999.x, x_1999.x, x_1999.x) * vec3<f32>(x_2001.x, x_2001.y, x_2001.z));
  let x_2004 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2003.x, x_2003.y, x_2003.z, x_2004.w);
  let x_2006 : vec4<f32> = u_xlat3;
  let x_2008 : vec3<f32> = u_xlat27;
  let x_2010 : vec3<f32> = (vec3<f32>(x_2006.x, x_2006.y, x_2006.z) * vec3<f32>(x_2008.y, x_2008.y, x_2008.y));
  let x_2011 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2010.x, x_2010.y, x_2010.z, x_2011.w);
  let x_2013 : vec3<f32> = u_xlat27;
  let x_2015 : vec4<f32> = vs_INTERP2;
  let x_2018 : vec4<f32> = u_xlat3;
  let x_2020 : vec3<f32> = ((vec3<f32>(x_2013.x, x_2013.x, x_2013.x) * vec3<f32>(x_2015.x, x_2015.y, x_2015.z)) + vec3<f32>(x_2018.x, x_2018.y, x_2018.z));
  let x_2021 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2020.x, x_2020.y, x_2020.z, x_2021.w);
  let x_2023 : vec3<f32> = u_xlat27;
  let x_2025 : vec3<f32> = vs_INTERP1;
  let x_2027 : vec4<f32> = u_xlat3;
  let x_2029 : vec3<f32> = ((vec3<f32>(x_2023.z, x_2023.z, x_2023.z) * x_2025) + vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
  let x_2030 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2029.x, x_2029.y, x_2029.z, x_2030.w);
  let x_2032 : vec4<f32> = u_xlat3;
  let x_2034 : vec4<f32> = u_xlat3;
  u_xlat45.x = dot(vec3<f32>(x_2032.x, x_2032.y, x_2032.z), vec3<f32>(x_2034.x, x_2034.y, x_2034.z));
  let x_2039 : f32 = u_xlat45.x;
  u_xlat45.x = inverseSqrt(x_2039);
  let x_2042 : vec2<f32> = u_xlat45;
  let x_2044 : vec4<f32> = u_xlat3;
  let x_2046 : vec3<f32> = (vec3<f32>(x_2042.x, x_2042.x, x_2042.x) * vec3<f32>(x_2044.x, x_2044.y, x_2044.z));
  let x_2047 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2046.x, x_2046.y, x_2046.z, x_2047.w);
  let x_2056 : vec2<f32> = vs_INTERP5;
  let x_2058 : f32 = x_90.x_GlobalMipBias.x;
  let x_2059 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2056, x_2058);
  u_xlat7 = x_2059;
  let x_2064 : vec2<f32> = vs_INTERP5;
  let x_2066 : f32 = x_90.x_GlobalMipBias.x;
  let x_2067 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2064, x_2066);
  u_xlat27 = vec3<f32>(x_2067.x, x_2067.y, x_2067.z);
  let x_2069 : vec4<f32> = u_xlat7;
  let x_2072 : vec3<f32> = (vec3<f32>(x_2069.x, x_2069.y, x_2069.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2073 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2072.x, x_2072.y, x_2072.z, x_2073.w);
  let x_2075 : vec4<f32> = u_xlat3;
  let x_2077 : vec4<f32> = u_xlat7;
  u_xlat45.x = dot(vec3<f32>(x_2075.x, x_2075.y, x_2075.z), vec3<f32>(x_2077.x, x_2077.y, x_2077.z));
  let x_2082 : f32 = u_xlat45.x;
  u_xlat45.x = (x_2082 + 0.5f);
  let x_2085 : vec2<f32> = u_xlat45;
  let x_2087 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_2085.x, x_2085.x, x_2085.x) * x_2087);
  let x_2090 : f32 = u_xlat7.w;
  u_xlat45.x = max(x_2090, 0.0001f);
  let x_2093 : vec3<f32> = u_xlat27;
  let x_2094 : vec2<f32> = u_xlat45;
  u_xlat27 = (x_2093 / vec3<f32>(x_2094.x, x_2094.x, x_2094.x));
  let x_2098 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2099 : vec2<f32> = vec2<f32>(x_2098.x, x_2098.y);
  u_xlat45 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2099.x, x_2099.y));
  let x_2104 : vec2<f32> = u_xlat45;
  let x_2105 : vec4<f32> = hlslcc_FragCoord;
  let x_2107 : vec2<f32> = (x_2104 * vec2<f32>(x_2105.x, x_2105.y));
  let x_2108 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2107.x, x_2107.y, x_2108.z, x_2108.w);
  let x_2111 : f32 = u_xlat7.y;
  let x_2114 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2117 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat45.x = ((x_2111 * x_2114) + x_2117);
  let x_2121 : f32 = u_xlat45.x;
  u_xlat7.z = (-(x_2121) + 1.0f);
  let x_2126 : f32 = u_xlat5.x;
  u_xlat5.x = x_2126;
  let x_2129 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2129, 0.0f, 1.0f);
  let x_2133 : f32 = u_xlat1.x;
  u_xlat1.x = x_2133;
  let x_2136 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2136, 0.0f, 1.0f);
  let x_2139 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2139 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2144 : f32 = u_xlat5.x;
  u_xlat45.x = (-(x_2144) + 1.0f);
  let x_2149 : f32 = u_xlat45.x;
  let x_2151 : f32 = u_xlat45.x;
  u_xlat67 = (x_2149 * x_2151);
  let x_2153 : f32 = u_xlat67;
  u_xlat67 = max(x_2153, 0.0078125f);
  let x_2157 : f32 = u_xlat67;
  let x_2158 : f32 = u_xlat67;
  u_xlat69 = (x_2157 * x_2158);
  let x_2161 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2161 + 0.040000021f);
  let x_2166 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2166, 1.0f);
  let x_2169 : f32 = u_xlat67;
  u_xlat72 = ((x_2169 * 4.0f) + 2.0f);
  let x_2177 : vec4<f32> = u_xlat7;
  let x_2180 : f32 = x_90.x_GlobalMipBias.x;
  let x_2181 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2177.x, x_2177.z), x_2180);
  u_xlat7.x = x_2181.x;
  let x_2186 : f32 = u_xlat7.x;
  u_xlat29 = (x_2186 + -1.0f);
  let x_2189 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2190 : f32 = u_xlat29;
  u_xlat29 = ((x_2189 * x_2190) + 1.0f);
  let x_2194 : f32 = u_xlat7.x;
  let x_2196 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2194, x_2196);
  let x_2199 : bool = u_xlatb66;
  if (x_2199) {
    let x_2203 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2203 == 1.0f);
    let x_2205 : bool = u_xlatb66;
    if (x_2205) {
      let x_2208 : vec4<f32> = u_xlat6;
      let x_2211 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2208.x, x_2208.y, x_2208.x, x_2208.y) + x_2211);
      let x_2214 : vec4<f32> = u_xlat8;
      let x_2215 : vec2<f32> = vec2<f32>(x_2214.x, x_2214.y);
      let x_2217 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2215.x, x_2215.y, x_2217);
      let x_2224 : vec3<f32> = txVec30;
      let x_2226 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2224.xy, x_2224.z);
      u_xlat9.x = x_2226;
      let x_2229 : vec4<f32> = u_xlat8;
      let x_2230 : vec2<f32> = vec2<f32>(x_2229.z, x_2229.w);
      let x_2232 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2230.x, x_2230.y, x_2232);
      let x_2239 : vec3<f32> = txVec31;
      let x_2241 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2239.xy, x_2239.z);
      u_xlat9.y = x_2241;
      let x_2243 : vec4<f32> = u_xlat6;
      let x_2246 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2243.x, x_2243.y, x_2243.x, x_2243.y) + x_2246);
      let x_2249 : vec4<f32> = u_xlat8;
      let x_2250 : vec2<f32> = vec2<f32>(x_2249.x, x_2249.y);
      let x_2252 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2250.x, x_2250.y, x_2252);
      let x_2259 : vec3<f32> = txVec32;
      let x_2261 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2259.xy, x_2259.z);
      u_xlat9.z = x_2261;
      let x_2264 : vec4<f32> = u_xlat8;
      let x_2265 : vec2<f32> = vec2<f32>(x_2264.z, x_2264.w);
      let x_2267 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2265.x, x_2265.y, x_2267);
      let x_2274 : vec3<f32> = txVec33;
      let x_2276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2274.xy, x_2274.z);
      u_xlat9.w = x_2276;
      let x_2278 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2283 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb51.x = (x_2283 == 2.0f);
      let x_2287 : bool = u_xlatb51.x;
      if (x_2287) {
        let x_2290 : vec4<f32> = u_xlat6;
        let x_2293 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2290.x, x_2290.y) * vec2<f32>(x_2293.z, x_2293.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2297 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2297);
        let x_2299 : vec4<f32> = u_xlat6;
        let x_2302 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2305 : vec2<f32> = u_xlat51;
        let x_2307 : vec2<f32> = ((vec2<f32>(x_2299.x, x_2299.y) * vec2<f32>(x_2302.z, x_2302.w)) + -(x_2305));
        let x_2308 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2307.x, x_2307.y, x_2308.z, x_2308.w);
        let x_2310 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2310.x, x_2310.x, x_2310.y, x_2310.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2313 : vec4<f32> = u_xlat9;
        let x_2315 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2313.x, x_2313.x, x_2313.z, x_2313.z) * vec4<f32>(x_2315.x, x_2315.x, x_2315.z, x_2315.z));
        let x_2319 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2319.y, x_2319.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2322 : vec4<f32> = u_xlat10;
        let x_2325 : vec4<f32> = u_xlat8;
        let x_2328 : vec2<f32> = ((vec2<f32>(x_2322.x, x_2322.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2325.x, x_2325.y)));
        let x_2329 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2328.x, x_2329.y, x_2328.y, x_2329.w);
        let x_2331 : vec4<f32> = u_xlat8;
        let x_2334 : vec2<f32> = (-(vec2<f32>(x_2331.x, x_2331.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2335 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2334.x, x_2334.y, x_2335.z, x_2335.w);
        let x_2337 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2337.x, x_2337.y), vec2<f32>(0.0f, 0.0f));
        let x_2340 : vec2<f32> = u_xlat54;
        let x_2342 : vec2<f32> = u_xlat54;
        let x_2344 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2340) * x_2342) + vec2<f32>(x_2344.x, x_2344.y));
        let x_2347 : vec4<f32> = u_xlat8;
        let x_2349 : vec2<f32> = max(vec2<f32>(x_2347.x, x_2347.y), vec2<f32>(0.0f, 0.0f));
        let x_2350 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2349.x, x_2349.y, x_2350.z, x_2350.w);
        let x_2352 : vec4<f32> = u_xlat8;
        let x_2355 : vec4<f32> = u_xlat8;
        let x_2358 : vec4<f32> = u_xlat9;
        let x_2360 : vec2<f32> = ((-(vec2<f32>(x_2352.x, x_2352.y)) * vec2<f32>(x_2355.x, x_2355.y)) + vec2<f32>(x_2358.y, x_2358.w));
        let x_2361 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2360.x, x_2360.y, x_2361.z, x_2361.w);
        let x_2363 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2363 + vec2<f32>(1.0f, 1.0f));
        let x_2365 : vec4<f32> = u_xlat8;
        let x_2367 : vec2<f32> = (vec2<f32>(x_2365.x, x_2365.y) + vec2<f32>(1.0f, 1.0f));
        let x_2368 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2367.x, x_2367.y, x_2368.z, x_2368.w);
        let x_2370 : vec4<f32> = u_xlat9;
        let x_2372 : vec2<f32> = (vec2<f32>(x_2370.x, x_2370.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2373 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2372.x, x_2372.y, x_2373.z, x_2373.w);
        let x_2375 : vec4<f32> = u_xlat10;
        let x_2377 : vec2<f32> = (vec2<f32>(x_2375.x, x_2375.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2378 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2377.x, x_2377.y, x_2378.z, x_2378.w);
        let x_2380 : vec2<f32> = u_xlat54;
        let x_2381 : vec2<f32> = (x_2380 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2382 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2381.x, x_2381.y, x_2382.z, x_2382.w);
        let x_2384 : vec4<f32> = u_xlat8;
        let x_2386 : vec2<f32> = (vec2<f32>(x_2384.x, x_2384.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2387 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2386.x, x_2386.y, x_2387.z, x_2387.w);
        let x_2389 : vec4<f32> = u_xlat9;
        let x_2391 : vec2<f32> = (vec2<f32>(x_2389.y, x_2389.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2392 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2391.x, x_2391.y, x_2392.z, x_2392.w);
        let x_2395 : f32 = u_xlat10.x;
        u_xlat11.z = x_2395;
        let x_2398 : f32 = u_xlat8.x;
        u_xlat11.w = x_2398;
        let x_2401 : f32 = u_xlat13.x;
        u_xlat12.z = x_2401;
        let x_2404 : f32 = u_xlat52.x;
        u_xlat12.w = x_2404;
        let x_2406 : vec4<f32> = u_xlat11;
        let x_2408 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2406.z, x_2406.w, x_2406.x, x_2406.z) + vec4<f32>(x_2408.z, x_2408.w, x_2408.x, x_2408.z));
        let x_2412 : f32 = u_xlat11.y;
        u_xlat10.z = x_2412;
        let x_2415 : f32 = u_xlat8.y;
        u_xlat10.w = x_2415;
        let x_2418 : f32 = u_xlat12.y;
        u_xlat13.z = x_2418;
        let x_2421 : f32 = u_xlat52.y;
        u_xlat13.w = x_2421;
        let x_2423 : vec4<f32> = u_xlat10;
        let x_2425 : vec4<f32> = u_xlat13;
        let x_2427 : vec3<f32> = (vec3<f32>(x_2423.z, x_2423.y, x_2423.w) + vec3<f32>(x_2425.z, x_2425.y, x_2425.w));
        let x_2428 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2427.x, x_2427.y, x_2427.z, x_2428.w);
        let x_2430 : vec4<f32> = u_xlat12;
        let x_2432 : vec4<f32> = u_xlat9;
        let x_2434 : vec3<f32> = (vec3<f32>(x_2430.x, x_2430.z, x_2430.w) / vec3<f32>(x_2432.z, x_2432.w, x_2432.y));
        let x_2435 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2434.x, x_2434.y, x_2434.z, x_2435.w);
        let x_2437 : vec4<f32> = u_xlat10;
        let x_2439 : vec3<f32> = (vec3<f32>(x_2437.x, x_2437.y, x_2437.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2440 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2439.x, x_2439.y, x_2439.z, x_2440.w);
        let x_2442 : vec4<f32> = u_xlat13;
        let x_2444 : vec4<f32> = u_xlat8;
        let x_2446 : vec3<f32> = (vec3<f32>(x_2442.z, x_2442.y, x_2442.w) / vec3<f32>(x_2444.x, x_2444.y, x_2444.z));
        let x_2447 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2446.x, x_2446.y, x_2446.z, x_2447.w);
        let x_2449 : vec4<f32> = u_xlat11;
        let x_2451 : vec3<f32> = (vec3<f32>(x_2449.x, x_2449.y, x_2449.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2452 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2451.x, x_2451.y, x_2451.z, x_2452.w);
        let x_2454 : vec4<f32> = u_xlat10;
        let x_2457 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2459 : vec3<f32> = (vec3<f32>(x_2454.y, x_2454.x, x_2454.z) * vec3<f32>(x_2457.x, x_2457.x, x_2457.x));
        let x_2460 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2459.x, x_2459.y, x_2459.z, x_2460.w);
        let x_2462 : vec4<f32> = u_xlat11;
        let x_2465 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2467 : vec3<f32> = (vec3<f32>(x_2462.x, x_2462.y, x_2462.z) * vec3<f32>(x_2465.y, x_2465.y, x_2465.y));
        let x_2468 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2467.x, x_2467.y, x_2467.z, x_2468.w);
        let x_2471 : f32 = u_xlat11.x;
        u_xlat10.w = x_2471;
        let x_2473 : vec2<f32> = u_xlat51;
        let x_2476 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2479 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2473.x, x_2473.y, x_2473.x, x_2473.y) * vec4<f32>(x_2476.x, x_2476.y, x_2476.x, x_2476.y)) + vec4<f32>(x_2479.y, x_2479.w, x_2479.x, x_2479.w));
        let x_2482 : vec2<f32> = u_xlat51;
        let x_2484 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2487 : vec4<f32> = u_xlat10;
        let x_2489 : vec2<f32> = ((x_2482 * vec2<f32>(x_2484.x, x_2484.y)) + vec2<f32>(x_2487.z, x_2487.w));
        let x_2490 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2489.x, x_2489.y, x_2490.z, x_2490.w);
        let x_2493 : f32 = u_xlat10.y;
        u_xlat11.w = x_2493;
        let x_2495 : vec4<f32> = u_xlat11;
        let x_2496 : vec2<f32> = vec2<f32>(x_2495.y, x_2495.z);
        let x_2497 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2497.x, x_2496.x, x_2497.z, x_2496.y);
        let x_2499 : vec2<f32> = u_xlat51;
        let x_2502 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2505 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2499.x, x_2499.y, x_2499.x, x_2499.y) * vec4<f32>(x_2502.x, x_2502.y, x_2502.x, x_2502.y)) + vec4<f32>(x_2505.x, x_2505.y, x_2505.z, x_2505.y));
        let x_2508 : vec2<f32> = u_xlat51;
        let x_2511 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2514 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2508.x, x_2508.y, x_2508.x, x_2508.y) * vec4<f32>(x_2511.x, x_2511.y, x_2511.x, x_2511.y)) + vec4<f32>(x_2514.w, x_2514.y, x_2514.w, x_2514.z));
        let x_2517 : vec2<f32> = u_xlat51;
        let x_2520 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2523 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2517.x, x_2517.y, x_2517.x, x_2517.y) * vec4<f32>(x_2520.x, x_2520.y, x_2520.x, x_2520.y)) + vec4<f32>(x_2523.x, x_2523.w, x_2523.z, x_2523.w));
        let x_2526 : vec4<f32> = u_xlat8;
        let x_2528 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2526.x, x_2526.x, x_2526.x, x_2526.y) * vec4<f32>(x_2528.z, x_2528.w, x_2528.y, x_2528.z));
        let x_2531 : vec4<f32> = u_xlat8;
        let x_2533 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2531.y, x_2531.y, x_2531.z, x_2531.z) * x_2533);
        let x_2536 : f32 = u_xlat8.z;
        let x_2538 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2536 * x_2538);
        let x_2542 : vec4<f32> = u_xlat12;
        let x_2543 : vec2<f32> = vec2<f32>(x_2542.x, x_2542.y);
        let x_2545 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2543.x, x_2543.y, x_2545);
        let x_2553 : vec3<f32> = txVec34;
        let x_2555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2553.xy, x_2553.z);
        u_xlat73 = x_2555;
        let x_2557 : vec4<f32> = u_xlat12;
        let x_2558 : vec2<f32> = vec2<f32>(x_2557.z, x_2557.w);
        let x_2560 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2558.x, x_2558.y, x_2560);
        let x_2567 : vec3<f32> = txVec35;
        let x_2569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2567.xy, x_2567.z);
        u_xlat8.x = x_2569;
        let x_2572 : f32 = u_xlat8.x;
        let x_2574 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2572 * x_2574);
        let x_2578 : f32 = u_xlat15.x;
        let x_2579 : f32 = u_xlat73;
        let x_2582 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2578 * x_2579) + x_2582);
        let x_2585 : vec4<f32> = u_xlat13;
        let x_2586 : vec2<f32> = vec2<f32>(x_2585.x, x_2585.y);
        let x_2588 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2586.x, x_2586.y, x_2588);
        let x_2595 : vec3<f32> = txVec36;
        let x_2597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2595.xy, x_2595.z);
        u_xlat8.x = x_2597;
        let x_2600 : f32 = u_xlat15.z;
        let x_2602 : f32 = u_xlat8.x;
        let x_2604 : f32 = u_xlat73;
        u_xlat73 = ((x_2600 * x_2602) + x_2604);
        let x_2607 : vec4<f32> = u_xlat11;
        let x_2608 : vec2<f32> = vec2<f32>(x_2607.x, x_2607.y);
        let x_2610 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2608.x, x_2608.y, x_2610);
        let x_2617 : vec3<f32> = txVec37;
        let x_2619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2617.xy, x_2617.z);
        u_xlat8.x = x_2619;
        let x_2622 : f32 = u_xlat15.w;
        let x_2624 : f32 = u_xlat8.x;
        let x_2626 : f32 = u_xlat73;
        u_xlat73 = ((x_2622 * x_2624) + x_2626);
        let x_2629 : vec4<f32> = u_xlat14;
        let x_2630 : vec2<f32> = vec2<f32>(x_2629.x, x_2629.y);
        let x_2632 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2630.x, x_2630.y, x_2632);
        let x_2639 : vec3<f32> = txVec38;
        let x_2641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2639.xy, x_2639.z);
        u_xlat8.x = x_2641;
        let x_2644 : f32 = u_xlat16.x;
        let x_2646 : f32 = u_xlat8.x;
        let x_2648 : f32 = u_xlat73;
        u_xlat73 = ((x_2644 * x_2646) + x_2648);
        let x_2651 : vec4<f32> = u_xlat14;
        let x_2652 : vec2<f32> = vec2<f32>(x_2651.z, x_2651.w);
        let x_2654 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2652.x, x_2652.y, x_2654);
        let x_2661 : vec3<f32> = txVec39;
        let x_2663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2661.xy, x_2661.z);
        u_xlat8.x = x_2663;
        let x_2666 : f32 = u_xlat16.y;
        let x_2668 : f32 = u_xlat8.x;
        let x_2670 : f32 = u_xlat73;
        u_xlat73 = ((x_2666 * x_2668) + x_2670);
        let x_2673 : vec4<f32> = u_xlat11;
        let x_2674 : vec2<f32> = vec2<f32>(x_2673.z, x_2673.w);
        let x_2676 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2674.x, x_2674.y, x_2676);
        let x_2683 : vec3<f32> = txVec40;
        let x_2685 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2683.xy, x_2683.z);
        u_xlat8.x = x_2685;
        let x_2688 : f32 = u_xlat16.z;
        let x_2690 : f32 = u_xlat8.x;
        let x_2692 : f32 = u_xlat73;
        u_xlat73 = ((x_2688 * x_2690) + x_2692);
        let x_2695 : vec4<f32> = u_xlat10;
        let x_2696 : vec2<f32> = vec2<f32>(x_2695.x, x_2695.y);
        let x_2698 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2696.x, x_2696.y, x_2698);
        let x_2705 : vec3<f32> = txVec41;
        let x_2707 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2705.xy, x_2705.z);
        u_xlat8.x = x_2707;
        let x_2710 : f32 = u_xlat16.w;
        let x_2712 : f32 = u_xlat8.x;
        let x_2714 : f32 = u_xlat73;
        u_xlat73 = ((x_2710 * x_2712) + x_2714);
        let x_2717 : vec4<f32> = u_xlat10;
        let x_2718 : vec2<f32> = vec2<f32>(x_2717.z, x_2717.w);
        let x_2720 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2718.x, x_2718.y, x_2720);
        let x_2727 : vec3<f32> = txVec42;
        let x_2729 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2727.xy, x_2727.z);
        u_xlat8.x = x_2729;
        let x_2732 : f32 = u_xlat51.x;
        let x_2734 : f32 = u_xlat8.x;
        let x_2736 : f32 = u_xlat73;
        u_xlat66 = ((x_2732 * x_2734) + x_2736);
      } else {
        let x_2739 : vec4<f32> = u_xlat6;
        let x_2742 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2739.x, x_2739.y) * vec2<f32>(x_2742.z, x_2742.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2746 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2746);
        let x_2748 : vec4<f32> = u_xlat6;
        let x_2751 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2754 : vec2<f32> = u_xlat51;
        let x_2756 : vec2<f32> = ((vec2<f32>(x_2748.x, x_2748.y) * vec2<f32>(x_2751.z, x_2751.w)) + -(x_2754));
        let x_2757 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2756.x, x_2756.y, x_2757.z, x_2757.w);
        let x_2759 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2759.x, x_2759.x, x_2759.y, x_2759.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2762 : vec4<f32> = u_xlat9;
        let x_2764 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2762.x, x_2762.x, x_2762.z, x_2762.z) * vec4<f32>(x_2764.x, x_2764.x, x_2764.z, x_2764.z));
        let x_2767 : vec4<f32> = u_xlat10;
        let x_2769 : vec2<f32> = (vec2<f32>(x_2767.y, x_2767.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2770 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2770.x, x_2769.x, x_2770.z, x_2769.y);
        let x_2772 : vec4<f32> = u_xlat10;
        let x_2775 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2772.x, x_2772.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2775.x, x_2775.y)));
        let x_2779 : vec4<f32> = u_xlat8;
        let x_2782 : vec2<f32> = (-(vec2<f32>(x_2779.x, x_2779.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2783 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2782.x, x_2783.y, x_2782.y, x_2783.w);
        let x_2785 : vec4<f32> = u_xlat8;
        let x_2787 : vec2<f32> = min(vec2<f32>(x_2785.x, x_2785.y), vec2<f32>(0.0f, 0.0f));
        let x_2788 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2787.x, x_2787.y, x_2788.z, x_2788.w);
        let x_2790 : vec4<f32> = u_xlat10;
        let x_2793 : vec4<f32> = u_xlat10;
        let x_2796 : vec4<f32> = u_xlat9;
        let x_2798 : vec2<f32> = ((-(vec2<f32>(x_2790.x, x_2790.y)) * vec2<f32>(x_2793.x, x_2793.y)) + vec2<f32>(x_2796.x, x_2796.z));
        let x_2799 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2798.x, x_2799.y, x_2798.y, x_2799.w);
        let x_2801 : vec4<f32> = u_xlat8;
        let x_2803 : vec2<f32> = max(vec2<f32>(x_2801.x, x_2801.y), vec2<f32>(0.0f, 0.0f));
        let x_2804 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2803.x, x_2803.y, x_2804.z, x_2804.w);
        let x_2806 : vec4<f32> = u_xlat10;
        let x_2809 : vec4<f32> = u_xlat10;
        let x_2812 : vec4<f32> = u_xlat9;
        let x_2814 : vec2<f32> = ((-(vec2<f32>(x_2806.x, x_2806.y)) * vec2<f32>(x_2809.x, x_2809.y)) + vec2<f32>(x_2812.y, x_2812.w));
        let x_2815 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2815.x, x_2814.x, x_2815.z, x_2814.y);
        let x_2817 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2817 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2820 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2820 * 0.081632003f);
        let x_2823 : vec2<f32> = u_xlat52;
        let x_2825 : vec2<f32> = (vec2<f32>(x_2823.y, x_2823.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2826 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2825.x, x_2825.y, x_2826.z, x_2826.w);
        let x_2828 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2828.x, x_2828.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2832 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2832 * 0.081632003f);
        let x_2836 : f32 = u_xlat12.y;
        u_xlat10.x = x_2836;
        let x_2838 : vec4<f32> = u_xlat8;
        let x_2841 : vec2<f32> = ((vec2<f32>(x_2838.x, x_2838.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2842 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2842.x, x_2841.x, x_2842.z, x_2841.y);
        let x_2844 : vec4<f32> = u_xlat8;
        let x_2847 : vec2<f32> = ((vec2<f32>(x_2844.x, x_2844.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2848 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2847.x, x_2848.y, x_2847.y, x_2848.w);
        let x_2851 : f32 = u_xlat52.x;
        u_xlat9.y = x_2851;
        let x_2854 : f32 = u_xlat11.y;
        u_xlat9.w = x_2854;
        let x_2856 : vec4<f32> = u_xlat9;
        let x_2857 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2856 + x_2857);
        let x_2859 : vec4<f32> = u_xlat8;
        let x_2862 : vec2<f32> = ((vec2<f32>(x_2859.y, x_2859.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2863 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2863.x, x_2862.x, x_2863.z, x_2862.y);
        let x_2865 : vec4<f32> = u_xlat8;
        let x_2868 : vec2<f32> = ((vec2<f32>(x_2865.y, x_2865.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2869 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2868.x, x_2869.y, x_2868.y, x_2869.w);
        let x_2872 : f32 = u_xlat52.y;
        u_xlat11.y = x_2872;
        let x_2874 : vec4<f32> = u_xlat11;
        let x_2875 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2874 + x_2875);
        let x_2877 : vec4<f32> = u_xlat9;
        let x_2878 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2877 / x_2878);
        let x_2880 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2880 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2882 : vec4<f32> = u_xlat11;
        let x_2883 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2882 / x_2883);
        let x_2885 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2885 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2887 : vec4<f32> = u_xlat9;
        let x_2890 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2887.w, x_2887.x, x_2887.y, x_2887.z) * vec4<f32>(x_2890.x, x_2890.x, x_2890.x, x_2890.x));
        let x_2893 : vec4<f32> = u_xlat11;
        let x_2896 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2893.x, x_2893.w, x_2893.y, x_2893.z) * vec4<f32>(x_2896.y, x_2896.y, x_2896.y, x_2896.y));
        let x_2899 : vec4<f32> = u_xlat9;
        let x_2900 : vec3<f32> = vec3<f32>(x_2899.y, x_2899.z, x_2899.w);
        let x_2901 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2900.x, x_2901.y, x_2900.y, x_2900.z);
        let x_2904 : f32 = u_xlat11.x;
        u_xlat12.y = x_2904;
        let x_2906 : vec2<f32> = u_xlat51;
        let x_2909 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2912 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2906.x, x_2906.y, x_2906.x, x_2906.y) * vec4<f32>(x_2909.x, x_2909.y, x_2909.x, x_2909.y)) + vec4<f32>(x_2912.x, x_2912.y, x_2912.z, x_2912.y));
        let x_2915 : vec2<f32> = u_xlat51;
        let x_2917 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2920 : vec4<f32> = u_xlat12;
        let x_2922 : vec2<f32> = ((x_2915 * vec2<f32>(x_2917.x, x_2917.y)) + vec2<f32>(x_2920.w, x_2920.y));
        let x_2923 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2922.x, x_2922.y, x_2923.z, x_2923.w);
        let x_2926 : f32 = u_xlat12.y;
        u_xlat9.y = x_2926;
        let x_2929 : f32 = u_xlat11.z;
        u_xlat12.y = x_2929;
        let x_2931 : vec2<f32> = u_xlat51;
        let x_2934 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2937 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2931.x, x_2931.y, x_2931.x, x_2931.y) * vec4<f32>(x_2934.x, x_2934.y, x_2934.x, x_2934.y)) + vec4<f32>(x_2937.x, x_2937.y, x_2937.z, x_2937.y));
        let x_2941 : vec2<f32> = u_xlat51;
        let x_2943 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2946 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2941 * vec2<f32>(x_2943.x, x_2943.y)) + vec2<f32>(x_2946.w, x_2946.y));
        let x_2950 : f32 = u_xlat12.y;
        u_xlat9.z = x_2950;
        let x_2952 : vec2<f32> = u_xlat51;
        let x_2955 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2958 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2952.x, x_2952.y, x_2952.x, x_2952.y) * vec4<f32>(x_2955.x, x_2955.y, x_2955.x, x_2955.y)) + vec4<f32>(x_2958.x, x_2958.y, x_2958.x, x_2958.z));
        let x_2962 : f32 = u_xlat11.w;
        u_xlat12.y = x_2962;
        let x_2964 : vec2<f32> = u_xlat51;
        let x_2967 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2970 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2964.x, x_2964.y, x_2964.x, x_2964.y) * vec4<f32>(x_2967.x, x_2967.y, x_2967.x, x_2967.y)) + vec4<f32>(x_2970.x, x_2970.y, x_2970.z, x_2970.y));
        let x_2973 : vec2<f32> = u_xlat51;
        let x_2975 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2978 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2973 * vec2<f32>(x_2975.x, x_2975.y)) + vec2<f32>(x_2978.w, x_2978.y));
        let x_2982 : f32 = u_xlat12.y;
        u_xlat9.w = x_2982;
        let x_2984 : vec2<f32> = u_xlat51;
        let x_2986 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2989 : vec4<f32> = u_xlat9;
        let x_2991 : vec2<f32> = ((x_2984 * vec2<f32>(x_2986.x, x_2986.y)) + vec2<f32>(x_2989.x, x_2989.w));
        let x_2992 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2991.x, x_2991.y, x_2992.z, x_2992.w);
        let x_2994 : vec4<f32> = u_xlat12;
        let x_2995 : vec3<f32> = vec3<f32>(x_2994.x, x_2994.z, x_2994.w);
        let x_2996 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2995.x, x_2996.y, x_2995.y, x_2995.z);
        let x_2998 : vec2<f32> = u_xlat51;
        let x_3001 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3004 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2998.x, x_2998.y, x_2998.x, x_2998.y) * vec4<f32>(x_3001.x, x_3001.y, x_3001.x, x_3001.y)) + vec4<f32>(x_3004.x, x_3004.y, x_3004.z, x_3004.y));
        let x_3008 : vec2<f32> = u_xlat51;
        let x_3010 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3013 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_3008 * vec2<f32>(x_3010.x, x_3010.y)) + vec2<f32>(x_3013.w, x_3013.y));
        let x_3017 : f32 = u_xlat9.x;
        u_xlat11.x = x_3017;
        let x_3019 : vec2<f32> = u_xlat51;
        let x_3021 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3024 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_3019 * vec2<f32>(x_3021.x, x_3021.y)) + vec2<f32>(x_3024.x, x_3024.y));
        let x_3027 : vec4<f32> = u_xlat8;
        let x_3029 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_3027.x, x_3027.x, x_3027.x, x_3027.x) * x_3029);
        let x_3031 : vec4<f32> = u_xlat8;
        let x_3033 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_3031.y, x_3031.y, x_3031.y, x_3031.y) * x_3033);
        let x_3036 : vec4<f32> = u_xlat8;
        let x_3038 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_3036.z, x_3036.z, x_3036.z, x_3036.z) * x_3038);
        let x_3040 : vec4<f32> = u_xlat8;
        let x_3042 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_3040.w, x_3040.w, x_3040.w, x_3040.w) * x_3042);
        let x_3045 : vec4<f32> = u_xlat13;
        let x_3046 : vec2<f32> = vec2<f32>(x_3045.x, x_3045.y);
        let x_3048 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3046.x, x_3046.y, x_3048);
        let x_3055 : vec3<f32> = txVec43;
        let x_3057 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3055.xy, x_3055.z);
        u_xlat9.x = x_3057;
        let x_3060 : vec4<f32> = u_xlat13;
        let x_3061 : vec2<f32> = vec2<f32>(x_3060.z, x_3060.w);
        let x_3063 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3061.x, x_3061.y, x_3063);
        let x_3071 : vec3<f32> = txVec44;
        let x_3073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3071.xy, x_3071.z);
        u_xlat75 = x_3073;
        let x_3074 : f32 = u_xlat75;
        let x_3076 : f32 = u_xlat19.y;
        u_xlat75 = (x_3074 * x_3076);
        let x_3079 : f32 = u_xlat19.x;
        let x_3081 : f32 = u_xlat9.x;
        let x_3083 : f32 = u_xlat75;
        u_xlat9.x = ((x_3079 * x_3081) + x_3083);
        let x_3087 : vec4<f32> = u_xlat14;
        let x_3088 : vec2<f32> = vec2<f32>(x_3087.x, x_3087.y);
        let x_3090 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3088.x, x_3088.y, x_3090);
        let x_3097 : vec3<f32> = txVec45;
        let x_3099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3097.xy, x_3097.z);
        u_xlat75 = x_3099;
        let x_3101 : f32 = u_xlat19.z;
        let x_3102 : f32 = u_xlat75;
        let x_3105 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3101 * x_3102) + x_3105);
        let x_3109 : vec4<f32> = u_xlat16;
        let x_3110 : vec2<f32> = vec2<f32>(x_3109.x, x_3109.y);
        let x_3112 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3110.x, x_3110.y, x_3112);
        let x_3119 : vec3<f32> = txVec46;
        let x_3121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3119.xy, x_3119.z);
        u_xlat75 = x_3121;
        let x_3123 : f32 = u_xlat19.w;
        let x_3124 : f32 = u_xlat75;
        let x_3127 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3123 * x_3124) + x_3127);
        let x_3131 : vec4<f32> = u_xlat15;
        let x_3132 : vec2<f32> = vec2<f32>(x_3131.x, x_3131.y);
        let x_3134 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3132.x, x_3132.y, x_3134);
        let x_3141 : vec3<f32> = txVec47;
        let x_3143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3141.xy, x_3141.z);
        u_xlat75 = x_3143;
        let x_3145 : f32 = u_xlat20.x;
        let x_3146 : f32 = u_xlat75;
        let x_3149 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3145 * x_3146) + x_3149);
        let x_3153 : vec4<f32> = u_xlat15;
        let x_3154 : vec2<f32> = vec2<f32>(x_3153.z, x_3153.w);
        let x_3156 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3154.x, x_3154.y, x_3156);
        let x_3163 : vec3<f32> = txVec48;
        let x_3165 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3163.xy, x_3163.z);
        u_xlat75 = x_3165;
        let x_3167 : f32 = u_xlat20.y;
        let x_3168 : f32 = u_xlat75;
        let x_3171 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3167 * x_3168) + x_3171);
        let x_3175 : vec2<f32> = u_xlat58;
        let x_3177 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3175.x, x_3175.y, x_3177);
        let x_3184 : vec3<f32> = txVec49;
        let x_3186 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3184.xy, x_3184.z);
        u_xlat75 = x_3186;
        let x_3188 : f32 = u_xlat20.z;
        let x_3189 : f32 = u_xlat75;
        let x_3192 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3188 * x_3189) + x_3192);
        let x_3196 : vec4<f32> = u_xlat16;
        let x_3197 : vec2<f32> = vec2<f32>(x_3196.z, x_3196.w);
        let x_3199 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3197.x, x_3197.y, x_3199);
        let x_3206 : vec3<f32> = txVec50;
        let x_3208 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3206.xy, x_3206.z);
        u_xlat75 = x_3208;
        let x_3210 : f32 = u_xlat20.w;
        let x_3211 : f32 = u_xlat75;
        let x_3214 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3210 * x_3211) + x_3214);
        let x_3218 : vec4<f32> = u_xlat17;
        let x_3219 : vec2<f32> = vec2<f32>(x_3218.x, x_3218.y);
        let x_3221 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3219.x, x_3219.y, x_3221);
        let x_3228 : vec3<f32> = txVec51;
        let x_3230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3228.xy, x_3228.z);
        u_xlat75 = x_3230;
        let x_3232 : f32 = u_xlat21.x;
        let x_3233 : f32 = u_xlat75;
        let x_3236 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3232 * x_3233) + x_3236);
        let x_3240 : vec4<f32> = u_xlat17;
        let x_3241 : vec2<f32> = vec2<f32>(x_3240.z, x_3240.w);
        let x_3243 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3241.x, x_3241.y, x_3243);
        let x_3250 : vec3<f32> = txVec52;
        let x_3252 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3250.xy, x_3250.z);
        u_xlat75 = x_3252;
        let x_3254 : f32 = u_xlat21.y;
        let x_3255 : f32 = u_xlat75;
        let x_3258 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3254 * x_3255) + x_3258);
        let x_3262 : vec2<f32> = u_xlat31;
        let x_3264 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3262.x, x_3262.y, x_3264);
        let x_3271 : vec3<f32> = txVec53;
        let x_3273 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3271.xy, x_3271.z);
        u_xlat31.x = x_3273;
        let x_3276 : f32 = u_xlat21.z;
        let x_3278 : f32 = u_xlat31.x;
        let x_3281 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3276 * x_3278) + x_3281);
        let x_3285 : vec4<f32> = u_xlat18;
        let x_3286 : vec2<f32> = vec2<f32>(x_3285.x, x_3285.y);
        let x_3288 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3286.x, x_3286.y, x_3288);
        let x_3295 : vec3<f32> = txVec54;
        let x_3297 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3295.xy, x_3295.z);
        u_xlat31.x = x_3297;
        let x_3300 : f32 = u_xlat21.w;
        let x_3302 : f32 = u_xlat31.x;
        let x_3305 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3300 * x_3302) + x_3305);
        let x_3309 : vec4<f32> = u_xlat12;
        let x_3310 : vec2<f32> = vec2<f32>(x_3309.x, x_3309.y);
        let x_3312 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3310.x, x_3310.y, x_3312);
        let x_3319 : vec3<f32> = txVec55;
        let x_3321 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3319.xy, x_3319.z);
        u_xlat31.x = x_3321;
        let x_3324 : f32 = u_xlat8.x;
        let x_3326 : f32 = u_xlat31.x;
        let x_3329 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3324 * x_3326) + x_3329);
        let x_3333 : vec4<f32> = u_xlat12;
        let x_3334 : vec2<f32> = vec2<f32>(x_3333.z, x_3333.w);
        let x_3336 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3334.x, x_3334.y, x_3336);
        let x_3343 : vec3<f32> = txVec56;
        let x_3345 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3343.xy, x_3343.z);
        u_xlat9.x = x_3345;
        let x_3348 : f32 = u_xlat8.y;
        let x_3350 : f32 = u_xlat9.x;
        let x_3353 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3348 * x_3350) + x_3353);
        let x_3357 : vec2<f32> = u_xlat55;
        let x_3359 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3357.x, x_3357.y, x_3359);
        let x_3366 : vec3<f32> = txVec57;
        let x_3368 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3366.xy, x_3366.z);
        u_xlat30.x = x_3368;
        let x_3371 : f32 = u_xlat8.z;
        let x_3373 : f32 = u_xlat30.x;
        let x_3376 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3371 * x_3373) + x_3376);
        let x_3380 : vec2<f32> = u_xlat51;
        let x_3382 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3380.x, x_3380.y, x_3382);
        let x_3389 : vec3<f32> = txVec58;
        let x_3391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3389.xy, x_3389.z);
        u_xlat51.x = x_3391;
        let x_3394 : f32 = u_xlat8.w;
        let x_3396 : f32 = u_xlat51.x;
        let x_3399 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3394 * x_3396) + x_3399);
      }
    }
  } else {
    let x_3403 : vec4<f32> = u_xlat6;
    let x_3404 : vec2<f32> = vec2<f32>(x_3403.x, x_3403.y);
    let x_3406 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3404.x, x_3404.y, x_3406);
    let x_3413 : vec3<f32> = txVec59;
    let x_3415 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3413.xy, x_3413.z);
    u_xlat66 = x_3415;
  }
  let x_3416 : f32 = u_xlat66;
  let x_3418 : f32 = x_271.x_MainLightShadowParams.x;
  let x_3420 : f32 = u_xlat68;
  u_xlat66 = ((x_3416 * x_3418) + x_3420);
  let x_3422 : bool = u_xlatb70;
  let x_3423 : f32 = u_xlat66;
  u_xlat66 = select(x_3423, 1.0f, x_3422);
  let x_3425 : vec3<f32> = vs_INTERP0;
  let x_3427 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3429 : vec3<f32> = (x_3425 + -(x_3427));
  let x_3430 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3429.x, x_3429.y, x_3429.z, x_3430.w);
  let x_3432 : vec4<f32> = u_xlat6;
  let x_3434 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3432.x, x_3432.y, x_3432.z), vec3<f32>(x_3434.x, x_3434.y, x_3434.z));
  let x_3437 : f32 = u_xlat68;
  let x_3439 : f32 = x_271.x_MainLightShadowParams.z;
  let x_3442 : f32 = x_271.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3437 * x_3439) + x_3442);
  let x_3444 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3444, 0.0f, 1.0f);
  let x_3446 : f32 = u_xlat66;
  u_xlat70 = (-(x_3446) + 1.0f);
  let x_3449 : f32 = u_xlat68;
  let x_3450 : f32 = u_xlat70;
  let x_3452 : f32 = u_xlat66;
  u_xlat66 = ((x_3449 * x_3450) + x_3452);
  let x_3460 : f32 = x_3458.x_MainLightCookieTextureFormat;
  u_xlatb68 = !((x_3460 == -1.0f));
  let x_3462 : bool = u_xlatb68;
  if (x_3462) {
    let x_3465 : vec3<f32> = vs_INTERP0;
    let x_3468 : vec4<f32> = x_3458.x_MainLightWorldToLight[1i];
    let x_3470 : vec2<f32> = (vec2<f32>(x_3465.y, x_3465.y) * vec2<f32>(x_3468.x, x_3468.y));
    let x_3471 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3470.x, x_3470.y, x_3471.z, x_3471.w);
    let x_3474 : vec4<f32> = x_3458.x_MainLightWorldToLight[0i];
    let x_3476 : vec3<f32> = vs_INTERP0;
    let x_3479 : vec4<f32> = u_xlat6;
    let x_3481 : vec2<f32> = ((vec2<f32>(x_3474.x, x_3474.y) * vec2<f32>(x_3476.x, x_3476.x)) + vec2<f32>(x_3479.x, x_3479.y));
    let x_3482 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3481.x, x_3481.y, x_3482.z, x_3482.w);
    let x_3485 : vec4<f32> = x_3458.x_MainLightWorldToLight[2i];
    let x_3487 : vec3<f32> = vs_INTERP0;
    let x_3490 : vec4<f32> = u_xlat6;
    let x_3492 : vec2<f32> = ((vec2<f32>(x_3485.x, x_3485.y) * vec2<f32>(x_3487.z, x_3487.z)) + vec2<f32>(x_3490.x, x_3490.y));
    let x_3493 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3492.x, x_3492.y, x_3493.z, x_3493.w);
    let x_3495 : vec4<f32> = u_xlat6;
    let x_3498 : vec4<f32> = x_3458.x_MainLightWorldToLight[3i];
    let x_3500 : vec2<f32> = (vec2<f32>(x_3495.x, x_3495.y) + vec2<f32>(x_3498.x, x_3498.y));
    let x_3501 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3500.x, x_3500.y, x_3501.z, x_3501.w);
    let x_3503 : vec4<f32> = u_xlat6;
    let x_3506 : vec2<f32> = ((vec2<f32>(x_3503.x, x_3503.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3507 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3506.x, x_3506.y, x_3507.z, x_3507.w);
    let x_3514 : vec4<f32> = u_xlat6;
    let x_3517 : f32 = x_90.x_GlobalMipBias.x;
    let x_3518 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3514.x, x_3514.y), x_3517);
    u_xlat8 = x_3518;
    let x_3520 : f32 = x_3458.x_MainLightCookieTextureFormat;
    let x_3522 : f32 = x_3458.x_MainLightCookieTextureFormat;
    let x_3524 : f32 = x_3458.x_MainLightCookieTextureFormat;
    let x_3526 : f32 = x_3458.x_MainLightCookieTextureFormat;
    let x_3527 : vec4<f32> = vec4<f32>(x_3520, x_3522, x_3524, x_3526);
    let x_3534 : vec4<bool> = (vec4<f32>(x_3527.x, x_3527.y, x_3527.z, x_3527.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    let x_3535 : vec2<bool> = vec2<bool>(x_3534.x, x_3534.y);
    let x_3536 : vec4<bool> = u_xlatb6;
    u_xlatb6 = vec4<bool>(x_3535.x, x_3535.y, x_3536.z, x_3536.w);
    let x_3539 : bool = u_xlatb6.y;
    if (x_3539) {
      let x_3544 : f32 = u_xlat8.w;
      x_3540 = x_3544;
    } else {
      let x_3547 : f32 = u_xlat8.x;
      x_3540 = x_3547;
    }
    let x_3548 : f32 = x_3540;
    u_xlat68 = x_3548;
    let x_3550 : bool = u_xlatb6.x;
    if (x_3550) {
      let x_3554 : vec4<f32> = u_xlat8;
      x_3551 = vec3<f32>(x_3554.x, x_3554.y, x_3554.z);
    } else {
      let x_3557 : f32 = u_xlat68;
      x_3551 = vec3<f32>(x_3557, x_3557, x_3557);
    }
    let x_3559 : vec3<f32> = x_3551;
    let x_3560 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3559.x, x_3559.y, x_3559.z, x_3560.w);
  } else {
    u_xlat6.x = 1.0f;
    u_xlat6.y = 1.0f;
    u_xlat6.z = 1.0f;
  }
  let x_3566 : vec4<f32> = u_xlat6;
  let x_3569 : vec4<f32> = x_90.x_MainLightColor;
  let x_3571 : vec3<f32> = (vec3<f32>(x_3566.x, x_3566.y, x_3566.z) * vec3<f32>(x_3569.x, x_3569.y, x_3569.z));
  let x_3572 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3571.x, x_3571.y, x_3571.z, x_3572.w);
  let x_3574 : f32 = u_xlat29;
  let x_3576 : vec4<f32> = u_xlat6;
  let x_3578 : vec3<f32> = (vec3<f32>(x_3574, x_3574, x_3574) * vec3<f32>(x_3576.x, x_3576.y, x_3576.z));
  let x_3579 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3578.x, x_3578.y, x_3578.z, x_3579.w);
  let x_3581 : vec3<f32> = u_xlat2;
  let x_3583 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3581), vec3<f32>(x_3583.x, x_3583.y, x_3583.z));
  let x_3586 : f32 = u_xlat68;
  let x_3587 : f32 = u_xlat68;
  u_xlat68 = (x_3586 + x_3587);
  let x_3589 : vec4<f32> = u_xlat3;
  let x_3591 : f32 = u_xlat68;
  let x_3595 : vec3<f32> = u_xlat2;
  let x_3597 : vec3<f32> = ((vec3<f32>(x_3589.x, x_3589.y, x_3589.z) * -(vec3<f32>(x_3591, x_3591, x_3591))) + -(x_3595));
  let x_3598 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3597.x, x_3597.y, x_3597.z, x_3598.w);
  let x_3600 : vec4<f32> = u_xlat3;
  let x_3602 : vec3<f32> = u_xlat2;
  u_xlat68 = dot(vec3<f32>(x_3600.x, x_3600.y, x_3600.z), x_3602);
  let x_3604 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3604, 0.0f, 1.0f);
  let x_3606 : f32 = u_xlat68;
  u_xlat68 = (-(x_3606) + 1.0f);
  let x_3609 : f32 = u_xlat68;
  let x_3610 : f32 = u_xlat68;
  u_xlat68 = (x_3609 * x_3610);
  let x_3612 : f32 = u_xlat68;
  let x_3613 : f32 = u_xlat68;
  u_xlat68 = (x_3612 * x_3613);
  let x_3616 : f32 = u_xlat45.x;
  u_xlat70 = ((-(x_3616) * 0.699999988f) + 1.700000048f);
  let x_3623 : f32 = u_xlat45.x;
  let x_3624 : f32 = u_xlat70;
  u_xlat45.x = (x_3623 * x_3624);
  let x_3628 : f32 = u_xlat45.x;
  u_xlat45.x = (x_3628 * 6.0f);
  let x_3640 : vec4<f32> = u_xlat8;
  let x_3643 : f32 = u_xlat45.x;
  let x_3644 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3640.x, x_3640.y, x_3640.z), x_3643);
  u_xlat8 = x_3644;
  let x_3646 : f32 = u_xlat8.w;
  u_xlat45.x = (x_3646 + -1.0f);
  let x_3650 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3652 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_3650 * x_3652) + 1.0f);
  let x_3657 : f32 = u_xlat45.x;
  u_xlat45.x = max(x_3657, 0.0f);
  let x_3661 : f32 = u_xlat45.x;
  u_xlat45.x = log2(x_3661);
  let x_3665 : f32 = u_xlat45.x;
  let x_3667 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat45.x = (x_3665 * x_3667);
  let x_3671 : f32 = u_xlat45.x;
  u_xlat45.x = exp2(x_3671);
  let x_3675 : f32 = u_xlat45.x;
  let x_3677 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat45.x = (x_3675 * x_3677);
  let x_3680 : vec4<f32> = u_xlat8;
  let x_3682 : vec2<f32> = u_xlat45;
  let x_3684 : vec3<f32> = (vec3<f32>(x_3680.x, x_3680.y, x_3680.z) * vec3<f32>(x_3682.x, x_3682.x, x_3682.x));
  let x_3685 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3684.x, x_3684.y, x_3684.z, x_3685.w);
  let x_3687 : f32 = u_xlat67;
  let x_3689 : f32 = u_xlat67;
  u_xlat45 = ((vec2<f32>(x_3687, x_3687) * vec2<f32>(x_3689, x_3689)) + vec2<f32>(-1.0f, 1.0f));
  let x_3695 : f32 = u_xlat45.y;
  u_xlat67 = (1.0f / x_3695);
  let x_3698 : f32 = u_xlat5.x;
  u_xlat70 = (x_3698 + -0.039999999f);
  let x_3701 : f32 = u_xlat68;
  let x_3702 : f32 = u_xlat70;
  u_xlat68 = ((x_3701 * x_3702) + 0.039999999f);
  let x_3706 : f32 = u_xlat67;
  let x_3707 : f32 = u_xlat68;
  u_xlat67 = (x_3706 * x_3707);
  let x_3709 : f32 = u_xlat67;
  let x_3711 : vec4<f32> = u_xlat8;
  let x_3713 : vec3<f32> = (vec3<f32>(x_3709, x_3709, x_3709) * vec3<f32>(x_3711.x, x_3711.y, x_3711.z));
  let x_3714 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3713.x, x_3713.y, x_3713.z, x_3714.w);
  let x_3716 : vec3<f32> = u_xlat27;
  let x_3717 : vec3<f32> = u_xlat4;
  let x_3719 : vec4<f32> = u_xlat8;
  let x_3721 : vec3<f32> = ((x_3716 * x_3717) + vec3<f32>(x_3719.x, x_3719.y, x_3719.z));
  let x_3722 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3721.x, x_3721.y, x_3721.z, x_3722.w);
  let x_3724 : f32 = u_xlat66;
  let x_3726 : f32 = x_161.unity_LightData.z;
  u_xlat66 = (x_3724 * x_3726);
  let x_3728 : vec4<f32> = u_xlat3;
  let x_3731 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3728.x, x_3728.y, x_3728.z), vec3<f32>(x_3731.x, x_3731.y, x_3731.z));
  let x_3734 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3734, 0.0f, 1.0f);
  let x_3736 : f32 = u_xlat66;
  let x_3737 : f32 = u_xlat67;
  u_xlat66 = (x_3736 * x_3737);
  let x_3739 : f32 = u_xlat66;
  let x_3741 : vec4<f32> = u_xlat6;
  let x_3743 : vec3<f32> = (vec3<f32>(x_3739, x_3739, x_3739) * vec3<f32>(x_3741.x, x_3741.y, x_3741.z));
  let x_3744 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3743.x, x_3743.y, x_3743.z, x_3744.w);
  let x_3746 : vec3<f32> = u_xlat2;
  let x_3748 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3750 : vec3<f32> = (x_3746 + vec3<f32>(x_3748.x, x_3748.y, x_3748.z));
  let x_3751 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3750.x, x_3750.y, x_3750.z, x_3751.w);
  let x_3753 : vec4<f32> = u_xlat8;
  let x_3755 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3753.x, x_3753.y, x_3753.z), vec3<f32>(x_3755.x, x_3755.y, x_3755.z));
  let x_3758 : f32 = u_xlat66;
  u_xlat66 = max(x_3758, 1.17549435e-37f);
  let x_3761 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3761);
  let x_3763 : f32 = u_xlat66;
  let x_3765 : vec4<f32> = u_xlat8;
  let x_3767 : vec3<f32> = (vec3<f32>(x_3763, x_3763, x_3763) * vec3<f32>(x_3765.x, x_3765.y, x_3765.z));
  let x_3768 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3767.x, x_3767.y, x_3767.z, x_3768.w);
  let x_3770 : vec4<f32> = u_xlat3;
  let x_3772 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3770.x, x_3770.y, x_3770.z), vec3<f32>(x_3772.x, x_3772.y, x_3772.z));
  let x_3775 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3775, 0.0f, 1.0f);
  let x_3778 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3780 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3778.x, x_3778.y, x_3778.z), vec3<f32>(x_3780.x, x_3780.y, x_3780.z));
  let x_3783 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3783, 0.0f, 1.0f);
  let x_3785 : f32 = u_xlat66;
  let x_3786 : f32 = u_xlat66;
  u_xlat66 = (x_3785 * x_3786);
  let x_3788 : f32 = u_xlat66;
  let x_3790 : f32 = u_xlat45.x;
  u_xlat66 = ((x_3788 * x_3790) + 1.000010014f);
  let x_3794 : f32 = u_xlat67;
  let x_3795 : f32 = u_xlat67;
  u_xlat67 = (x_3794 * x_3795);
  let x_3797 : f32 = u_xlat66;
  let x_3798 : f32 = u_xlat66;
  u_xlat66 = (x_3797 * x_3798);
  let x_3800 : f32 = u_xlat67;
  u_xlat67 = max(x_3800, 0.100000001f);
  let x_3803 : f32 = u_xlat66;
  let x_3804 : f32 = u_xlat67;
  u_xlat66 = (x_3803 * x_3804);
  let x_3806 : f32 = u_xlat72;
  let x_3807 : f32 = u_xlat66;
  u_xlat66 = (x_3806 * x_3807);
  let x_3809 : f32 = u_xlat69;
  let x_3810 : f32 = u_xlat66;
  u_xlat66 = (x_3809 / x_3810);
  let x_3812 : f32 = u_xlat66;
  let x_3816 : vec3<f32> = u_xlat4;
  let x_3817 : vec3<f32> = ((vec3<f32>(x_3812, x_3812, x_3812) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3816);
  let x_3818 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3817.x, x_3817.y, x_3817.z, x_3818.w);
  let x_3820 : vec4<f32> = u_xlat6;
  let x_3822 : vec4<f32> = u_xlat8;
  let x_3824 : vec3<f32> = (vec3<f32>(x_3820.x, x_3820.y, x_3820.z) * vec3<f32>(x_3822.x, x_3822.y, x_3822.z));
  let x_3825 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3824.x, x_3824.y, x_3824.z, x_3825.w);
  let x_3828 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3830 : f32 = x_161.unity_LightData.y;
  u_xlat66 = min(x_3828, x_3830);
  let x_3832 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3832));
  let x_3836 : f32 = x_3458.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3838 : f32 = x_3458.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3840 : f32 = x_3458.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3842 : f32 = x_3458.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3843 : vec4<f32> = vec4<f32>(x_3836, x_3838, x_3840, x_3842);
  let x_3850 : vec4<bool> = (vec4<f32>(x_3843.x, x_3843.y, x_3843.z, x_3843.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb51 = vec2<bool>(x_3850.x, x_3850.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3861 : u32 = u_xlatu_loop_1;
    let x_3862 : u32 = u_xlatu66;
    if ((x_3861 < x_3862)) {
    } else {
      break;
    }
    let x_3865 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3865 >> 2u);
    let x_3868 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3868 & 3u));
    let x_3871 : u32 = u_xlatu68;
    let x_3874 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3871)];
    let x_3884 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3889 : vec4<u32> = indexable[x_3884];
    u_xlat68 = dot(x_3874, bitcast<vec4<f32>>(x_3889));
    let x_3892 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3892));
    let x_3895 : vec3<f32> = vs_INTERP0;
    let x_3907 : u32 = u_xlatu68;
    let x_3910 : vec4<f32> = x_3906.x_AdditionalLightsPosition[bitcast<i32>(x_3907)];
    let x_3913 : u32 = u_xlatu68;
    let x_3916 : vec4<f32> = x_3906.x_AdditionalLightsPosition[bitcast<i32>(x_3913)];
    let x_3918 : vec3<f32> = ((-(x_3895) * vec3<f32>(x_3910.w, x_3910.w, x_3910.w)) + vec3<f32>(x_3916.x, x_3916.y, x_3916.z));
    let x_3919 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3918.x, x_3918.y, x_3918.z, x_3919.w);
    let x_3921 : vec4<f32> = u_xlat9;
    let x_3923 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3921.x, x_3921.y, x_3921.z), vec3<f32>(x_3923.x, x_3923.y, x_3923.z));
    let x_3926 : f32 = u_xlat70;
    u_xlat70 = max(x_3926, 6.10351562e-05f);
    let x_3930 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3930);
    let x_3932 : f32 = u_xlat71;
    let x_3934 : vec4<f32> = u_xlat9;
    let x_3936 : vec3<f32> = (vec3<f32>(x_3932, x_3932, x_3932) * vec3<f32>(x_3934.x, x_3934.y, x_3934.z));
    let x_3937 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3936.x, x_3936.y, x_3936.z, x_3937.w);
    let x_3940 : f32 = u_xlat70;
    u_xlat74 = (1.0f / x_3940);
    let x_3942 : f32 = u_xlat70;
    let x_3943 : u32 = u_xlatu68;
    let x_3946 : f32 = x_3906.x_AdditionalLightsAttenuation[bitcast<i32>(x_3943)].x;
    u_xlat70 = (x_3942 * x_3946);
    let x_3948 : f32 = u_xlat70;
    let x_3950 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3948) * x_3950) + 1.0f);
    let x_3953 : f32 = u_xlat70;
    u_xlat70 = max(x_3953, 0.0f);
    let x_3955 : f32 = u_xlat70;
    let x_3956 : f32 = u_xlat70;
    u_xlat70 = (x_3955 * x_3956);
    let x_3958 : f32 = u_xlat70;
    let x_3959 : f32 = u_xlat74;
    u_xlat70 = (x_3958 * x_3959);
    let x_3961 : u32 = u_xlatu68;
    let x_3964 : vec4<f32> = x_3906.x_AdditionalLightsSpotDir[bitcast<i32>(x_3961)];
    let x_3966 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3964.x, x_3964.y, x_3964.z), vec3<f32>(x_3966.x, x_3966.y, x_3966.z));
    let x_3969 : f32 = u_xlat74;
    let x_3970 : u32 = u_xlatu68;
    let x_3973 : f32 = x_3906.x_AdditionalLightsAttenuation[bitcast<i32>(x_3970)].z;
    let x_3975 : u32 = u_xlatu68;
    let x_3978 : f32 = x_3906.x_AdditionalLightsAttenuation[bitcast<i32>(x_3975)].w;
    u_xlat74 = ((x_3969 * x_3973) + x_3978);
    let x_3980 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3980, 0.0f, 1.0f);
    let x_3982 : f32 = u_xlat74;
    let x_3983 : f32 = u_xlat74;
    u_xlat74 = (x_3982 * x_3983);
    let x_3985 : f32 = u_xlat70;
    let x_3986 : f32 = u_xlat74;
    u_xlat70 = (x_3985 * x_3986);
    let x_3989 : u32 = u_xlatu68;
    u_xlatu74 = (x_3989 >> 5u);
    let x_3992 : u32 = u_xlatu68;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3992) & 31i)));
    let x_3998 : i32 = u_xlati75;
    let x_4000 : u32 = u_xlatu74;
    let x_4003 : f32 = x_3458.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4000)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3998) & bitcast<u32>(x_4003)));
    let x_4007 : i32 = u_xlati74;
    if ((x_4007 != 0i)) {
      let x_4017 : u32 = u_xlatu68;
      let x_4020 : f32 = x_4016.x_AdditionalLightsLightTypes[bitcast<i32>(x_4017)].el;
      u_xlati74 = i32(x_4020);
      let x_4022 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4022 != 0i));
      let x_4026 : u32 = u_xlatu68;
      u_xlati76 = (bitcast<i32>(x_4026) << bitcast<u32>(2i));
      let x_4029 : i32 = u_xlati75;
      if ((x_4029 != 0i)) {
        let x_4033 : vec3<f32> = vs_INTERP0;
        let x_4035 : i32 = u_xlati76;
        let x_4038 : i32 = u_xlati76;
        let x_4042 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4035 + 1i) / 4i)][((x_4038 + 1i) % 4i)];
        let x_4044 : vec3<f32> = (vec3<f32>(x_4033.y, x_4033.y, x_4033.y) * vec3<f32>(x_4042.x, x_4042.y, x_4042.w));
        let x_4045 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4044.x, x_4044.y, x_4044.z, x_4045.w);
        let x_4047 : i32 = u_xlati76;
        let x_4049 : i32 = u_xlati76;
        let x_4052 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[(x_4047 / 4i)][(x_4049 % 4i)];
        let x_4054 : vec3<f32> = vs_INTERP0;
        let x_4057 : vec4<f32> = u_xlat11;
        let x_4059 : vec3<f32> = ((vec3<f32>(x_4052.x, x_4052.y, x_4052.w) * vec3<f32>(x_4054.x, x_4054.x, x_4054.x)) + vec3<f32>(x_4057.x, x_4057.y, x_4057.z));
        let x_4060 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4059.x, x_4059.y, x_4059.z, x_4060.w);
        let x_4062 : i32 = u_xlati76;
        let x_4065 : i32 = u_xlati76;
        let x_4069 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4062 + 2i) / 4i)][((x_4065 + 2i) % 4i)];
        let x_4071 : vec3<f32> = vs_INTERP0;
        let x_4074 : vec4<f32> = u_xlat11;
        let x_4076 : vec3<f32> = ((vec3<f32>(x_4069.x, x_4069.y, x_4069.w) * vec3<f32>(x_4071.z, x_4071.z, x_4071.z)) + vec3<f32>(x_4074.x, x_4074.y, x_4074.z));
        let x_4077 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4076.x, x_4076.y, x_4076.z, x_4077.w);
        let x_4079 : vec4<f32> = u_xlat11;
        let x_4081 : i32 = u_xlati76;
        let x_4084 : i32 = u_xlati76;
        let x_4088 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4081 + 3i) / 4i)][((x_4084 + 3i) % 4i)];
        let x_4090 : vec3<f32> = (vec3<f32>(x_4079.x, x_4079.y, x_4079.z) + vec3<f32>(x_4088.x, x_4088.y, x_4088.w));
        let x_4091 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4090.x, x_4090.y, x_4090.z, x_4091.w);
        let x_4093 : vec4<f32> = u_xlat11;
        let x_4095 : vec4<f32> = u_xlat11;
        let x_4097 : vec2<f32> = (vec2<f32>(x_4093.x, x_4093.y) / vec2<f32>(x_4095.z, x_4095.z));
        let x_4098 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4097.x, x_4097.y, x_4098.z, x_4098.w);
        let x_4100 : vec4<f32> = u_xlat11;
        let x_4103 : vec2<f32> = ((vec2<f32>(x_4100.x, x_4100.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4104 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4103.x, x_4103.y, x_4104.z, x_4104.w);
        let x_4106 : vec4<f32> = u_xlat11;
        let x_4110 : vec2<f32> = clamp(vec2<f32>(x_4106.x, x_4106.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4111 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4110.x, x_4110.y, x_4111.z, x_4111.w);
        let x_4113 : u32 = u_xlatu68;
        let x_4116 : vec4<f32> = x_4016.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4113)];
        let x_4118 : vec4<f32> = u_xlat11;
        let x_4121 : u32 = u_xlatu68;
        let x_4124 : vec4<f32> = x_4016.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4121)];
        let x_4126 : vec2<f32> = ((vec2<f32>(x_4116.x, x_4116.y) * vec2<f32>(x_4118.x, x_4118.y)) + vec2<f32>(x_4124.z, x_4124.w));
        let x_4127 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4126.x, x_4126.y, x_4127.z, x_4127.w);
      } else {
        let x_4131 : i32 = u_xlati74;
        u_xlatb74 = (x_4131 == 1i);
        let x_4133 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4133);
        let x_4135 : i32 = u_xlati74;
        if ((x_4135 != 0i)) {
          let x_4139 : vec3<f32> = vs_INTERP0;
          let x_4141 : i32 = u_xlati76;
          let x_4144 : i32 = u_xlati76;
          let x_4148 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4141 + 1i) / 4i)][((x_4144 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4139.y, x_4139.y) * vec2<f32>(x_4148.x, x_4148.y));
          let x_4151 : i32 = u_xlati76;
          let x_4153 : i32 = u_xlati76;
          let x_4156 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[(x_4151 / 4i)][(x_4153 % 4i)];
          let x_4158 : vec3<f32> = vs_INTERP0;
          let x_4161 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4156.x, x_4156.y) * vec2<f32>(x_4158.x, x_4158.x)) + x_4161);
          let x_4163 : i32 = u_xlati76;
          let x_4166 : i32 = u_xlati76;
          let x_4170 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4163 + 2i) / 4i)][((x_4166 + 2i) % 4i)];
          let x_4172 : vec3<f32> = vs_INTERP0;
          let x_4175 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4170.x, x_4170.y) * vec2<f32>(x_4172.z, x_4172.z)) + x_4175);
          let x_4177 : vec2<f32> = u_xlat55;
          let x_4178 : i32 = u_xlati76;
          let x_4181 : i32 = u_xlati76;
          let x_4185 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4178 + 3i) / 4i)][((x_4181 + 3i) % 4i)];
          u_xlat55 = (x_4177 + vec2<f32>(x_4185.x, x_4185.y));
          let x_4188 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4188 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4191 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4191);
          let x_4193 : u32 = u_xlatu68;
          let x_4196 : vec4<f32> = x_4016.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4193)];
          let x_4198 : vec2<f32> = u_xlat55;
          let x_4200 : u32 = u_xlatu68;
          let x_4203 : vec4<f32> = x_4016.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4200)];
          let x_4205 : vec2<f32> = ((vec2<f32>(x_4196.x, x_4196.y) * x_4198) + vec2<f32>(x_4203.z, x_4203.w));
          let x_4206 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4205.x, x_4205.y, x_4206.z, x_4206.w);
        } else {
          let x_4209 : vec3<f32> = vs_INTERP0;
          let x_4211 : i32 = u_xlati76;
          let x_4214 : i32 = u_xlati76;
          let x_4218 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4211 + 1i) / 4i)][((x_4214 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4209.y, x_4209.y, x_4209.y, x_4209.y) * x_4218);
          let x_4220 : i32 = u_xlati76;
          let x_4222 : i32 = u_xlati76;
          let x_4225 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[(x_4220 / 4i)][(x_4222 % 4i)];
          let x_4226 : vec3<f32> = vs_INTERP0;
          let x_4229 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4225 * vec4<f32>(x_4226.x, x_4226.x, x_4226.x, x_4226.x)) + x_4229);
          let x_4231 : i32 = u_xlati76;
          let x_4234 : i32 = u_xlati76;
          let x_4238 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4231 + 2i) / 4i)][((x_4234 + 2i) % 4i)];
          let x_4239 : vec3<f32> = vs_INTERP0;
          let x_4242 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4238 * vec4<f32>(x_4239.z, x_4239.z, x_4239.z, x_4239.z)) + x_4242);
          let x_4244 : vec4<f32> = u_xlat12;
          let x_4245 : i32 = u_xlati76;
          let x_4248 : i32 = u_xlati76;
          let x_4252 : vec4<f32> = x_4016.x_AdditionalLightsWorldToLights[((x_4245 + 3i) / 4i)][((x_4248 + 3i) % 4i)];
          u_xlat12 = (x_4244 + x_4252);
          let x_4254 : vec4<f32> = u_xlat12;
          let x_4256 : vec4<f32> = u_xlat12;
          let x_4258 : vec3<f32> = (vec3<f32>(x_4254.x, x_4254.y, x_4254.z) / vec3<f32>(x_4256.w, x_4256.w, x_4256.w));
          let x_4259 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4258.x, x_4258.y, x_4258.z, x_4259.w);
          let x_4261 : vec4<f32> = u_xlat12;
          let x_4263 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4261.x, x_4261.y, x_4261.z), vec3<f32>(x_4263.x, x_4263.y, x_4263.z));
          let x_4266 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4266);
          let x_4268 : f32 = u_xlat74;
          let x_4270 : vec4<f32> = u_xlat12;
          let x_4272 : vec3<f32> = (vec3<f32>(x_4268, x_4268, x_4268) * vec3<f32>(x_4270.x, x_4270.y, x_4270.z));
          let x_4273 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4272.x, x_4272.y, x_4272.z, x_4273.w);
          let x_4275 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4275.x, x_4275.y, x_4275.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4280 : f32 = u_xlat74;
          u_xlat74 = max(x_4280, 0.000001f);
          let x_4283 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4283);
          let x_4285 : f32 = u_xlat74;
          let x_4287 : vec4<f32> = u_xlat12;
          let x_4289 : vec3<f32> = (vec3<f32>(x_4285, x_4285, x_4285) * vec3<f32>(x_4287.z, x_4287.x, x_4287.y));
          let x_4290 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4289.x, x_4289.y, x_4289.z, x_4290.w);
          let x_4293 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4293);
          let x_4297 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4297, 0.0f, 1.0f);
          let x_4301 : vec4<f32> = u_xlat13;
          let x_4304 : vec4<bool> = (vec4<f32>(x_4301.y, x_4301.z, x_4301.y, x_4301.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4304.x, x_4304.y);
          let x_4307 : bool = u_xlatb55.x;
          if (x_4307) {
            let x_4312 : f32 = u_xlat13.x;
            x_4308 = x_4312;
          } else {
            let x_4315 : f32 = u_xlat13.x;
            x_4308 = -(x_4315);
          }
          let x_4317 : f32 = x_4308;
          u_xlat55.x = x_4317;
          let x_4320 : bool = u_xlatb55.y;
          if (x_4320) {
            let x_4325 : f32 = u_xlat13.x;
            x_4321 = x_4325;
          } else {
            let x_4328 : f32 = u_xlat13.x;
            x_4321 = -(x_4328);
          }
          let x_4330 : f32 = x_4321;
          u_xlat55.y = x_4330;
          let x_4332 : vec4<f32> = u_xlat12;
          let x_4334 : f32 = u_xlat74;
          let x_4337 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4332.x, x_4332.y) * vec2<f32>(x_4334, x_4334)) + x_4337);
          let x_4339 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4339 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4342 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4342, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4346 : u32 = u_xlatu68;
          let x_4349 : vec4<f32> = x_4016.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4346)];
          let x_4351 : vec2<f32> = u_xlat55;
          let x_4353 : u32 = u_xlatu68;
          let x_4356 : vec4<f32> = x_4016.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4353)];
          let x_4358 : vec2<f32> = ((vec2<f32>(x_4349.x, x_4349.y) * x_4351) + vec2<f32>(x_4356.z, x_4356.w));
          let x_4359 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4358.x, x_4358.y, x_4359.z, x_4359.w);
        }
      }
      let x_4366 : vec4<f32> = u_xlat11;
      let x_4369 : f32 = x_90.x_GlobalMipBias.x;
      let x_4370 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4366.x, x_4366.y), x_4369);
      u_xlat11 = x_4370;
      let x_4372 : bool = u_xlatb51.y;
      if (x_4372) {
        let x_4377 : f32 = u_xlat11.w;
        x_4373 = x_4377;
      } else {
        let x_4380 : f32 = u_xlat11.x;
        x_4373 = x_4380;
      }
      let x_4381 : f32 = x_4373;
      u_xlat74 = x_4381;
      let x_4383 : bool = u_xlatb51.x;
      if (x_4383) {
        let x_4387 : vec4<f32> = u_xlat11;
        x_4384 = vec3<f32>(x_4387.x, x_4387.y, x_4387.z);
      } else {
        let x_4390 : f32 = u_xlat74;
        x_4384 = vec3<f32>(x_4390, x_4390, x_4390);
      }
      let x_4392 : vec3<f32> = x_4384;
      let x_4393 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4392.x, x_4392.y, x_4392.z, x_4393.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4399 : vec4<f32> = u_xlat11;
    let x_4401 : u32 = u_xlatu68;
    let x_4404 : vec4<f32> = x_3906.x_AdditionalLightsColor[bitcast<i32>(x_4401)];
    let x_4406 : vec3<f32> = (vec3<f32>(x_4399.x, x_4399.y, x_4399.z) * vec3<f32>(x_4404.x, x_4404.y, x_4404.z));
    let x_4407 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4406.x, x_4406.y, x_4406.z, x_4407.w);
    let x_4409 : f32 = u_xlat29;
    let x_4411 : vec4<f32> = u_xlat11;
    let x_4413 : vec3<f32> = (vec3<f32>(x_4409, x_4409, x_4409) * vec3<f32>(x_4411.x, x_4411.y, x_4411.z));
    let x_4414 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4413.x, x_4413.y, x_4413.z, x_4414.w);
    let x_4416 : vec4<f32> = u_xlat3;
    let x_4418 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4416.x, x_4416.y, x_4416.z), vec3<f32>(x_4418.x, x_4418.y, x_4418.z));
    let x_4421 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4421, 0.0f, 1.0f);
    let x_4423 : f32 = u_xlat68;
    let x_4424 : f32 = u_xlat70;
    u_xlat68 = (x_4423 * x_4424);
    let x_4426 : f32 = u_xlat68;
    let x_4428 : vec4<f32> = u_xlat11;
    let x_4430 : vec3<f32> = (vec3<f32>(x_4426, x_4426, x_4426) * vec3<f32>(x_4428.x, x_4428.y, x_4428.z));
    let x_4431 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4430.x, x_4430.y, x_4430.z, x_4431.w);
    let x_4433 : vec4<f32> = u_xlat9;
    let x_4435 : f32 = u_xlat71;
    let x_4438 : vec3<f32> = u_xlat2;
    let x_4439 : vec3<f32> = ((vec3<f32>(x_4433.x, x_4433.y, x_4433.z) * vec3<f32>(x_4435, x_4435, x_4435)) + x_4438);
    let x_4440 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4439.x, x_4439.y, x_4439.z, x_4440.w);
    let x_4442 : vec4<f32> = u_xlat9;
    let x_4444 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4442.x, x_4442.y, x_4442.z), vec3<f32>(x_4444.x, x_4444.y, x_4444.z));
    let x_4447 : f32 = u_xlat68;
    u_xlat68 = max(x_4447, 1.17549435e-37f);
    let x_4449 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4449);
    let x_4451 : f32 = u_xlat68;
    let x_4453 : vec4<f32> = u_xlat9;
    let x_4455 : vec3<f32> = (vec3<f32>(x_4451, x_4451, x_4451) * vec3<f32>(x_4453.x, x_4453.y, x_4453.z));
    let x_4456 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4455.x, x_4455.y, x_4455.z, x_4456.w);
    let x_4458 : vec4<f32> = u_xlat3;
    let x_4460 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4458.x, x_4458.y, x_4458.z), vec3<f32>(x_4460.x, x_4460.y, x_4460.z));
    let x_4463 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4463, 0.0f, 1.0f);
    let x_4465 : vec4<f32> = u_xlat10;
    let x_4467 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4465.x, x_4465.y, x_4465.z), vec3<f32>(x_4467.x, x_4467.y, x_4467.z));
    let x_4470 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4470, 0.0f, 1.0f);
    let x_4472 : f32 = u_xlat68;
    let x_4473 : f32 = u_xlat68;
    u_xlat68 = (x_4472 * x_4473);
    let x_4475 : f32 = u_xlat68;
    let x_4477 : f32 = u_xlat45.x;
    u_xlat68 = ((x_4475 * x_4477) + 1.000010014f);
    let x_4480 : f32 = u_xlat70;
    let x_4481 : f32 = u_xlat70;
    u_xlat70 = (x_4480 * x_4481);
    let x_4483 : f32 = u_xlat68;
    let x_4484 : f32 = u_xlat68;
    u_xlat68 = (x_4483 * x_4484);
    let x_4486 : f32 = u_xlat70;
    u_xlat70 = max(x_4486, 0.100000001f);
    let x_4488 : f32 = u_xlat68;
    let x_4489 : f32 = u_xlat70;
    u_xlat68 = (x_4488 * x_4489);
    let x_4491 : f32 = u_xlat72;
    let x_4492 : f32 = u_xlat68;
    u_xlat68 = (x_4491 * x_4492);
    let x_4494 : f32 = u_xlat69;
    let x_4495 : f32 = u_xlat68;
    u_xlat68 = (x_4494 / x_4495);
    let x_4497 : f32 = u_xlat68;
    let x_4500 : vec3<f32> = u_xlat4;
    let x_4501 : vec3<f32> = ((vec3<f32>(x_4497, x_4497, x_4497) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4500);
    let x_4502 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4501.x, x_4501.y, x_4501.z, x_4502.w);
    let x_4504 : vec4<f32> = u_xlat9;
    let x_4506 : vec4<f32> = u_xlat11;
    let x_4509 : vec4<f32> = u_xlat8;
    let x_4511 : vec3<f32> = ((vec3<f32>(x_4504.x, x_4504.y, x_4504.z) * vec3<f32>(x_4506.x, x_4506.y, x_4506.z)) + vec3<f32>(x_4509.x, x_4509.y, x_4509.z));
    let x_4512 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4511.x, x_4511.y, x_4511.z, x_4512.w);

    continuing {
      let x_4514 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4514 + bitcast<u32>(1i));
    }
  }
  let x_4516 : vec4<f32> = u_xlat5;
  let x_4518 : vec4<f32> = u_xlat7;
  let x_4521 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_4516.x, x_4516.y, x_4516.z) * vec3<f32>(x_4518.x, x_4518.x, x_4518.x)) + vec3<f32>(x_4521.x, x_4521.y, x_4521.z));
  let x_4524 : vec4<f32> = u_xlat8;
  let x_4526 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4524.x, x_4524.y, x_4524.z) + x_4526);
  let x_4530 : vec4<f32> = vs_INTERP4;
  let x_4532 : vec3<f32> = u_xlat0;
  let x_4534 : vec3<f32> = u_xlat2;
  let x_4535 : vec3<f32> = ((vec3<f32>(x_4530.w, x_4530.w, x_4530.w) * x_4532) + x_4534);
  let x_4536 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4535.x, x_4535.y, x_4535.z, x_4536.w);
  let x_4538 : bool = u_xlatb23;
  if (x_4538) {
    let x_4543 : f32 = u_xlat1.x;
    x_4539 = x_4543;
  } else {
    x_4539 = 1.0f;
  }
  let x_4545 : f32 = x_4539;
  SV_Target0.w = x_4545;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

