type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_158 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_277 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_378 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3386 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3895 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4005 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_184 : f32;
  var x_197 : f32;
  var x_209 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb46 : bool;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var x_1720 : f32;
  var u_xlatu3 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu68 : u32;
  var u_xlati46 : i32;
  var u_xlat46 : vec2<f32>;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var x_1845 : f32;
  var x_1898 : f32;
  var u_xlat69 : f32;
  var u_xlat26 : vec2<f32>;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat71 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3336 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3469 : f32;
  var x_3481 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat73 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4297 : f32;
  var x_4310 : f32;
  var x_4362 : f32;
  var x_4373 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_148 : vec3<f32> = u_xlat22;
  let x_149 : vec3<f32> = u_xlat0;
  let x_151 : vec3<f32> = (x_148 * vec3<f32>(x_149.x, x_149.x, x_149.x));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_151.z, x_152.w);
  let x_161 : f32 = x_158.unity_OrthoParams.w;
  u_xlatb0 = (x_161 == 0.0f);
  let x_165 : vec3<f32> = vs_INTERP0;
  let x_170 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_165) + x_170);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_173, x_174);
  let x_176 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_176);
  let x_178 : f32 = u_xlat67;
  let x_180 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_178, x_178, x_178) * x_180);
  let x_183 : bool = u_xlatb0;
  if (x_183) {
    let x_188 : f32 = u_xlat4.x;
    x_184 = x_188;
  } else {
    let x_193 : f32 = x_158.unity_MatrixV[0i].z;
    x_184 = x_193;
  }
  let x_194 : f32 = x_184;
  u_xlat5.x = x_194;
  let x_196 : bool = u_xlatb0;
  if (x_196) {
    let x_201 : f32 = u_xlat4.y;
    x_197 = x_201;
  } else {
    let x_205 : f32 = x_158.unity_MatrixV[1i].z;
    x_197 = x_205;
  }
  let x_206 : f32 = x_197;
  u_xlat5.y = x_206;
  let x_208 : bool = u_xlatb0;
  if (x_208) {
    let x_213 : f32 = u_xlat4.z;
    x_209 = x_213;
  } else {
    let x_217 : f32 = x_158.unity_MatrixV[2i].z;
    x_209 = x_217;
  }
  let x_218 : f32 = x_209;
  u_xlat5.z = x_218;
  let x_220 : vec3<f32> = u_xlat5;
  let x_224 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat4 = (vec3<f32>(x_220.y, x_220.y, x_220.y) * vec3<f32>(x_224.x, x_224.y, x_224.z));
  let x_228 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_230 : vec3<f32> = u_xlat5;
  let x_233 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_230.x, x_230.x, x_230.x)) + x_233);
  let x_236 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_238 : vec3<f32> = u_xlat5;
  let x_241 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_236.x, x_236.y, x_236.z) * vec3<f32>(x_238.z, x_238.z, x_238.z)) + x_241);
  let x_243 : vec3<f32> = u_xlat4;
  let x_244 : vec3<f32> = u_xlat4;
  u_xlat0.x = dot(x_243, x_244);
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_248);
  let x_251 : vec3<f32> = u_xlat0;
  let x_253 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_251.x, x_251.x, x_251.x) * x_253);
  let x_267 : vec4<f32> = vs_INTERP3;
  let x_270 : f32 = x_158.x_GlobalMipBias.x;
  let x_271 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_267.x, x_267.y), x_270);
  u_xlat6 = x_271;
  let x_273 : vec4<f32> = u_xlat6;
  let x_279 : vec4<f32> = x_277.Color_C30C7CA3;
  let x_281 : vec3<f32> = (vec3<f32>(x_273.x, x_273.y, x_273.z) * vec3<f32>(x_279.x, x_279.y, x_279.z));
  let x_282 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_290 : vec4<f32> = vs_INTERP3;
  let x_293 : f32 = x_158.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat8 = vec4<f32>(x_294.w, x_294.x, x_294.y, x_294.z);
  let x_297 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_297.y, x_297.z, x_297.w, x_297.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_304 : vec4<f32> = u_xlat9;
  let x_305 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_304, x_305);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_309);
  let x_313 : vec3<f32> = u_xlat0;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_313.x, x_313.x, x_313.x) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_320 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_320 * 200.0f);
  let x_325 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_325, 1.0f);
  let x_328 : vec3<f32> = u_xlat0;
  let x_330 : vec4<f32> = u_xlat6;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.x, x_328.x, x_328.x) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = u_xlat30;
  let x_339 : vec3<f32> = (vec3<f32>(x_335.x, x_335.y, x_335.z) * vec3<f32>(x_337.y, x_337.y, x_337.y));
  let x_340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_339.x, x_339.y, x_339.z, x_340.w);
  let x_342 : vec3<f32> = u_xlat30;
  let x_344 : vec3<f32> = u_xlat2;
  let x_346 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_342.x, x_342.x, x_342.x) * x_344) + vec3<f32>(x_346.x, x_346.y, x_346.z));
  let x_349 : vec3<f32> = u_xlat30;
  let x_351 : vec3<f32> = u_xlat1;
  let x_353 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_349.z, x_349.z, x_349.z) * x_351) + x_353);
  let x_355 : vec3<f32> = u_xlat1;
  let x_356 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_355, x_356);
  let x_360 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_360, 1.17549435e-37f);
  let x_365 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_365);
  let x_368 : vec3<f32> = u_xlat0;
  let x_370 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_368.x, x_368.x, x_368.x) * x_370);
  let x_372 : vec3<f32> = vs_INTERP0;
  let x_380 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_372.y, x_372.y, x_372.y) * vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_384 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][0i];
  let x_386 : vec3<f32> = vs_INTERP0;
  let x_389 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_384.x, x_384.y, x_384.z) * vec3<f32>(x_386.x, x_386.x, x_386.x)) + x_389);
  let x_392 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][2i];
  let x_394 : vec3<f32> = vs_INTERP0;
  let x_397 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_392.x, x_392.y, x_392.z) * vec3<f32>(x_394.z, x_394.z, x_394.z)) + x_397);
  let x_399 : vec3<f32> = u_xlat2;
  let x_401 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_399 + vec3<f32>(x_401.x, x_401.y, x_401.z));
  let x_406 : f32 = x_378.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_406);
  let x_408 : bool = u_xlatb0;
  if (x_408) {
    let x_413 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb67 = (x_413 == 1.0f);
    let x_415 : bool = u_xlatb67;
    if (x_415) {
      let x_418 : vec3<f32> = u_xlat2;
      let x_422 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_418.x, x_418.y, x_418.x, x_418.y) + x_422);
      let x_425 : vec4<f32> = u_xlat3;
      let x_426 : vec2<f32> = vec2<f32>(x_425.x, x_425.y);
      let x_428 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_426.x, x_426.y, x_428);
      let x_440 : vec3<f32> = txVec0;
      let x_442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_440.xy, x_440.z);
      u_xlat9.x = x_442;
      let x_445 : vec4<f32> = u_xlat3;
      let x_446 : vec2<f32> = vec2<f32>(x_445.z, x_445.w);
      let x_448 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_446.x, x_446.y, x_448);
      let x_455 : vec3<f32> = txVec1;
      let x_457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_455.xy, x_455.z);
      u_xlat9.y = x_457;
      let x_459 : vec3<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_476 : vec3<f32> = txVec2;
      let x_478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_476.xy, x_476.z);
      u_xlat9.z = x_478;
      let x_481 : vec4<f32> = u_xlat3;
      let x_482 : vec2<f32> = vec2<f32>(x_481.z, x_481.w);
      let x_484 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_482.x, x_482.y, x_484);
      let x_491 : vec3<f32> = txVec3;
      let x_493 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_491.xy, x_491.z);
      u_xlat9.w = x_493;
      let x_495 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_495, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_502 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb68 = (x_502 == 2.0f);
      let x_504 : bool = u_xlatb68;
      if (x_504) {
        let x_507 : vec3<f32> = u_xlat2;
        let x_510 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_515 : vec2<f32> = ((vec2<f32>(x_507.x, x_507.y) * vec2<f32>(x_510.z, x_510.w)) + vec2<f32>(0.5f, 0.5f));
        let x_516 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_515.x, x_515.y, x_516.z, x_516.w);
        let x_518 : vec4<f32> = u_xlat3;
        let x_520 : vec2<f32> = floor(vec2<f32>(x_518.x, x_518.y));
        let x_521 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_520.x, x_520.y, x_521.z, x_521.w);
        let x_525 : vec3<f32> = u_xlat2;
        let x_528 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_531 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_525.x, x_525.y) * vec2<f32>(x_528.z, x_528.w)) + -(vec2<f32>(x_531.x, x_531.y)));
        let x_535 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_535.x, x_535.x, x_535.y, x_535.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_540 : vec4<f32> = u_xlat9;
        let x_542 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_540.x, x_540.x, x_540.z, x_540.z) * vec4<f32>(x_542.x, x_542.x, x_542.z, x_542.z));
        let x_545 : vec4<f32> = u_xlat10;
        let x_549 : vec2<f32> = (vec2<f32>(x_545.y, x_545.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_550 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_549.x, x_550.y, x_549.y, x_550.w);
        let x_552 : vec4<f32> = u_xlat10;
        let x_555 : vec2<f32> = u_xlat47;
        let x_557 : vec2<f32> = ((vec2<f32>(x_552.x, x_552.z) * vec2<f32>(0.5f, 0.5f)) + -(x_555));
        let x_558 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_561 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_561) + vec2<f32>(1.0f, 1.0f));
        let x_566 : vec2<f32> = u_xlat47;
        let x_568 : vec2<f32> = min(x_566, vec2<f32>(0.0f, 0.0f));
        let x_569 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_568.x, x_568.y, x_569.z, x_569.w);
        let x_571 : vec4<f32> = u_xlat11;
        let x_574 : vec4<f32> = u_xlat11;
        let x_577 : vec2<f32> = u_xlat54;
        let x_578 : vec2<f32> = ((-(vec2<f32>(x_571.x, x_571.y)) * vec2<f32>(x_574.x, x_574.y)) + x_577);
        let x_579 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_578.x, x_578.y, x_579.z, x_579.w);
        let x_581 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_581, vec2<f32>(0.0f, 0.0f));
        let x_583 : vec2<f32> = u_xlat47;
        let x_585 : vec2<f32> = u_xlat47;
        let x_587 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_583) * x_585) + vec2<f32>(x_587.y, x_587.w));
        let x_590 : vec4<f32> = u_xlat11;
        let x_592 : vec2<f32> = (vec2<f32>(x_590.x, x_590.y) + vec2<f32>(1.0f, 1.0f));
        let x_593 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_592.x, x_592.y, x_593.z, x_593.w);
        let x_595 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_595 + vec2<f32>(1.0f, 1.0f));
        let x_598 : vec4<f32> = u_xlat10;
        let x_602 : vec2<f32> = (vec2<f32>(x_598.x, x_598.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_603 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_602.x, x_602.y, x_603.z, x_603.w);
        let x_605 : vec2<f32> = u_xlat54;
        let x_606 : vec2<f32> = (x_605 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_607 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_606.x, x_606.y, x_607.z, x_607.w);
        let x_609 : vec4<f32> = u_xlat11;
        let x_611 : vec2<f32> = (vec2<f32>(x_609.x, x_609.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_612 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_611.x, x_611.y, x_612.z, x_612.w);
        let x_615 : vec2<f32> = u_xlat47;
        let x_616 : vec2<f32> = (x_615 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_617 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_616.x, x_616.y, x_617.z, x_617.w);
        let x_619 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_619.y, x_619.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_623 : f32 = u_xlat11.x;
        u_xlat12.z = x_623;
        let x_626 : f32 = u_xlat47.x;
        u_xlat12.w = x_626;
        let x_629 : f32 = u_xlat13.x;
        u_xlat10.z = x_629;
        let x_632 : f32 = u_xlat9.x;
        u_xlat10.w = x_632;
        let x_635 : vec4<f32> = u_xlat10;
        let x_637 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_635.z, x_635.w, x_635.x, x_635.z) + vec4<f32>(x_637.z, x_637.w, x_637.x, x_637.z));
        let x_641 : f32 = u_xlat12.y;
        u_xlat11.z = x_641;
        let x_644 : f32 = u_xlat47.y;
        u_xlat11.w = x_644;
        let x_647 : f32 = u_xlat10.y;
        u_xlat13.z = x_647;
        let x_650 : f32 = u_xlat9.z;
        u_xlat13.w = x_650;
        let x_652 : vec4<f32> = u_xlat11;
        let x_654 : vec4<f32> = u_xlat13;
        let x_656 : vec3<f32> = (vec3<f32>(x_652.z, x_652.y, x_652.w) + vec3<f32>(x_654.z, x_654.y, x_654.w));
        let x_657 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_656.x, x_656.y, x_656.z, x_657.w);
        let x_659 : vec4<f32> = u_xlat10;
        let x_661 : vec4<f32> = u_xlat14;
        let x_663 : vec3<f32> = (vec3<f32>(x_659.x, x_659.z, x_659.w) / vec3<f32>(x_661.z, x_661.w, x_661.y));
        let x_664 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_663.x, x_663.y, x_663.z, x_664.w);
        let x_666 : vec4<f32> = u_xlat10;
        let x_672 : vec3<f32> = (vec3<f32>(x_666.x, x_666.y, x_666.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_673 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_672.x, x_672.y, x_672.z, x_673.w);
        let x_675 : vec4<f32> = u_xlat13;
        let x_677 : vec4<f32> = u_xlat9;
        let x_679 : vec3<f32> = (vec3<f32>(x_675.z, x_675.y, x_675.w) / vec3<f32>(x_677.x, x_677.y, x_677.z));
        let x_680 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_679.x, x_679.y, x_679.z, x_680.w);
        let x_682 : vec4<f32> = u_xlat11;
        let x_684 : vec3<f32> = (vec3<f32>(x_682.x, x_682.y, x_682.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_685 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_684.x, x_684.y, x_684.z, x_685.w);
        let x_687 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_692 : vec3<f32> = (vec3<f32>(x_687.y, x_687.x, x_687.z) * vec3<f32>(x_690.x, x_690.x, x_690.x));
        let x_693 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat11;
        let x_698 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_700 : vec3<f32> = (vec3<f32>(x_695.x, x_695.y, x_695.z) * vec3<f32>(x_698.y, x_698.y, x_698.y));
        let x_701 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_700.x, x_700.y, x_700.z, x_701.w);
        let x_704 : f32 = u_xlat11.x;
        u_xlat10.w = x_704;
        let x_706 : vec4<f32> = u_xlat3;
        let x_709 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_712 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_706.x, x_706.y, x_706.x, x_706.y) * vec4<f32>(x_709.x, x_709.y, x_709.x, x_709.y)) + vec4<f32>(x_712.y, x_712.w, x_712.x, x_712.w));
        let x_715 : vec4<f32> = u_xlat3;
        let x_718 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_715.x, x_715.y) * vec2<f32>(x_718.x, x_718.y)) + vec2<f32>(x_721.z, x_721.w));
        let x_725 : f32 = u_xlat10.y;
        u_xlat11.w = x_725;
        let x_727 : vec4<f32> = u_xlat11;
        let x_728 : vec2<f32> = vec2<f32>(x_727.y, x_727.z);
        let x_729 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_729.x, x_728.x, x_729.z, x_728.y);
        let x_731 : vec4<f32> = u_xlat3;
        let x_734 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_731.x, x_731.y, x_731.x, x_731.y) * vec4<f32>(x_734.x, x_734.y, x_734.x, x_734.y)) + vec4<f32>(x_737.x, x_737.y, x_737.z, x_737.y));
        let x_740 : vec4<f32> = u_xlat3;
        let x_743 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_746 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_740.x, x_740.y, x_740.x, x_740.y) * vec4<f32>(x_743.x, x_743.y, x_743.x, x_743.y)) + vec4<f32>(x_746.w, x_746.y, x_746.w, x_746.z));
        let x_749 : vec4<f32> = u_xlat3;
        let x_752 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_755 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_749.x, x_749.y, x_749.x, x_749.y) * vec4<f32>(x_752.x, x_752.y, x_752.x, x_752.y)) + vec4<f32>(x_755.x, x_755.w, x_755.z, x_755.w));
        let x_759 : vec4<f32> = u_xlat9;
        let x_761 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_759.x, x_759.x, x_759.x, x_759.y) * vec4<f32>(x_761.z, x_761.w, x_761.y, x_761.z));
        let x_765 : vec4<f32> = u_xlat9;
        let x_767 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_765.y, x_765.y, x_765.z, x_765.z) * x_767);
        let x_771 : f32 = u_xlat9.z;
        let x_773 : f32 = u_xlat14.y;
        u_xlat68 = (x_771 * x_773);
        let x_776 : vec4<f32> = u_xlat12;
        let x_777 : vec2<f32> = vec2<f32>(x_776.x, x_776.y);
        let x_779 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_777.x, x_777.y, x_779);
        let x_786 : vec3<f32> = txVec4;
        let x_788 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_786.xy, x_786.z);
        u_xlat3.x = x_788;
        let x_791 : vec4<f32> = u_xlat12;
        let x_792 : vec2<f32> = vec2<f32>(x_791.z, x_791.w);
        let x_794 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_792.x, x_792.y, x_794);
        let x_802 : vec3<f32> = txVec5;
        let x_804 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_802.xy, x_802.z);
        u_xlat25 = x_804;
        let x_805 : f32 = u_xlat25;
        let x_807 : f32 = u_xlat15.y;
        u_xlat25 = (x_805 * x_807);
        let x_810 : f32 = u_xlat15.x;
        let x_812 : f32 = u_xlat3.x;
        let x_814 : f32 = u_xlat25;
        u_xlat3.x = ((x_810 * x_812) + x_814);
        let x_818 : vec2<f32> = u_xlat47;
        let x_820 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_818.x, x_818.y, x_820);
        let x_827 : vec3<f32> = txVec6;
        let x_829 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_827.xy, x_827.z);
        u_xlat25 = x_829;
        let x_831 : f32 = u_xlat15.z;
        let x_832 : f32 = u_xlat25;
        let x_835 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_831 * x_832) + x_835);
        let x_839 : vec4<f32> = u_xlat11;
        let x_840 : vec2<f32> = vec2<f32>(x_839.x, x_839.y);
        let x_842 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_840.x, x_840.y, x_842);
        let x_849 : vec3<f32> = txVec7;
        let x_851 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_849.xy, x_849.z);
        u_xlat25 = x_851;
        let x_853 : f32 = u_xlat15.w;
        let x_854 : f32 = u_xlat25;
        let x_857 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_853 * x_854) + x_857);
        let x_861 : vec4<f32> = u_xlat13;
        let x_862 : vec2<f32> = vec2<f32>(x_861.x, x_861.y);
        let x_864 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_862.x, x_862.y, x_864);
        let x_871 : vec3<f32> = txVec8;
        let x_873 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_871.xy, x_871.z);
        u_xlat25 = x_873;
        let x_875 : f32 = u_xlat16.x;
        let x_876 : f32 = u_xlat25;
        let x_879 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_875 * x_876) + x_879);
        let x_883 : vec4<f32> = u_xlat13;
        let x_884 : vec2<f32> = vec2<f32>(x_883.z, x_883.w);
        let x_886 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_884.x, x_884.y, x_886);
        let x_893 : vec3<f32> = txVec9;
        let x_895 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_893.xy, x_893.z);
        u_xlat25 = x_895;
        let x_897 : f32 = u_xlat16.y;
        let x_898 : f32 = u_xlat25;
        let x_901 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_897 * x_898) + x_901);
        let x_905 : vec4<f32> = u_xlat11;
        let x_906 : vec2<f32> = vec2<f32>(x_905.z, x_905.w);
        let x_908 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_906.x, x_906.y, x_908);
        let x_915 : vec3<f32> = txVec10;
        let x_917 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_915.xy, x_915.z);
        u_xlat25 = x_917;
        let x_919 : f32 = u_xlat16.z;
        let x_920 : f32 = u_xlat25;
        let x_923 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_919 * x_920) + x_923);
        let x_927 : vec4<f32> = u_xlat10;
        let x_928 : vec2<f32> = vec2<f32>(x_927.x, x_927.y);
        let x_930 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_928.x, x_928.y, x_930);
        let x_937 : vec3<f32> = txVec11;
        let x_939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_937.xy, x_937.z);
        u_xlat25 = x_939;
        let x_941 : f32 = u_xlat16.w;
        let x_942 : f32 = u_xlat25;
        let x_945 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_941 * x_942) + x_945);
        let x_949 : vec4<f32> = u_xlat10;
        let x_950 : vec2<f32> = vec2<f32>(x_949.z, x_949.w);
        let x_952 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_950.x, x_950.y, x_952);
        let x_959 : vec3<f32> = txVec12;
        let x_961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_959.xy, x_959.z);
        u_xlat25 = x_961;
        let x_962 : f32 = u_xlat68;
        let x_963 : f32 = u_xlat25;
        let x_966 : f32 = u_xlat3.x;
        u_xlat67 = ((x_962 * x_963) + x_966);
      } else {
        let x_969 : vec3<f32> = u_xlat2;
        let x_972 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_975 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.z, x_972.w)) + vec2<f32>(0.5f, 0.5f));
        let x_976 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_975.x, x_975.y, x_976.z, x_976.w);
        let x_978 : vec4<f32> = u_xlat3;
        let x_980 : vec2<f32> = floor(vec2<f32>(x_978.x, x_978.y));
        let x_981 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_980.x, x_980.y, x_981.z, x_981.w);
        let x_983 : vec3<f32> = u_xlat2;
        let x_986 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_989 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_983.x, x_983.y) * vec2<f32>(x_986.z, x_986.w)) + -(vec2<f32>(x_989.x, x_989.y)));
        let x_993 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_993.x, x_993.x, x_993.y, x_993.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_996 : vec4<f32> = u_xlat9;
        let x_998 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_996.x, x_996.x, x_996.z, x_996.z) * vec4<f32>(x_998.x, x_998.x, x_998.z, x_998.z));
        let x_1001 : vec4<f32> = u_xlat10;
        let x_1005 : vec2<f32> = (vec2<f32>(x_1001.y, x_1001.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1006 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1006.x, x_1005.x, x_1006.z, x_1005.y);
        let x_1008 : vec4<f32> = u_xlat10;
        let x_1011 : vec2<f32> = u_xlat47;
        let x_1013 : vec2<f32> = ((vec2<f32>(x_1008.x, x_1008.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1011));
        let x_1014 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1013.x, x_1014.y, x_1013.y, x_1014.w);
        let x_1016 : vec2<f32> = u_xlat47;
        let x_1018 : vec2<f32> = (-(x_1016) + vec2<f32>(1.0f, 1.0f));
        let x_1019 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1018.x, x_1018.y, x_1019.z, x_1019.w);
        let x_1021 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1021, vec2<f32>(0.0f, 0.0f));
        let x_1023 : vec2<f32> = u_xlat54;
        let x_1025 : vec2<f32> = u_xlat54;
        let x_1027 : vec4<f32> = u_xlat10;
        let x_1029 : vec2<f32> = ((-(x_1023) * x_1025) + vec2<f32>(x_1027.x, x_1027.y));
        let x_1030 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
        let x_1032 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1032, vec2<f32>(0.0f, 0.0f));
        let x_1035 : vec2<f32> = u_xlat54;
        let x_1037 : vec2<f32> = u_xlat54;
        let x_1039 : vec4<f32> = u_xlat9;
        let x_1041 : vec2<f32> = ((-(x_1035) * x_1037) + vec2<f32>(x_1039.y, x_1039.w));
        let x_1042 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1041.x, x_1042.y, x_1041.y);
        let x_1044 : vec4<f32> = u_xlat10;
        let x_1047 : vec2<f32> = (vec2<f32>(x_1044.x, x_1044.y) + vec2<f32>(2.0f, 2.0f));
        let x_1048 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1047.x, x_1047.y, x_1048.z, x_1048.w);
        let x_1050 : vec3<f32> = u_xlat31;
        let x_1052 : vec2<f32> = (vec2<f32>(x_1050.x, x_1050.z) + vec2<f32>(2.0f, 2.0f));
        let x_1053 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1056 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1056 * 0.081632003f);
        let x_1060 : vec4<f32> = u_xlat9;
        let x_1063 : vec3<f32> = (vec3<f32>(x_1060.z, x_1060.x, x_1060.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1064 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1063.x, x_1063.y, x_1063.z, x_1064.w);
        let x_1066 : vec4<f32> = u_xlat10;
        let x_1069 : vec2<f32> = (vec2<f32>(x_1066.x, x_1066.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1070 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1069.x, x_1069.y, x_1070.z, x_1070.w);
        let x_1073 : f32 = u_xlat13.y;
        u_xlat12.x = x_1073;
        let x_1075 : vec2<f32> = u_xlat47;
        let x_1082 : vec2<f32> = ((vec2<f32>(x_1075.x, x_1075.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1083 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1083.x, x_1082.x, x_1083.z, x_1082.y);
        let x_1085 : vec2<f32> = u_xlat47;
        let x_1089 : vec2<f32> = ((vec2<f32>(x_1085.x, x_1085.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1090 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1089.x, x_1090.y, x_1089.y, x_1090.w);
        let x_1093 : f32 = u_xlat9.x;
        u_xlat10.y = x_1093;
        let x_1096 : f32 = u_xlat11.y;
        u_xlat10.w = x_1096;
        let x_1098 : vec4<f32> = u_xlat10;
        let x_1099 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1098 + x_1099);
        let x_1101 : vec2<f32> = u_xlat47;
        let x_1104 : vec2<f32> = ((vec2<f32>(x_1101.y, x_1101.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1105 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1105.x, x_1104.x, x_1105.z, x_1104.y);
        let x_1107 : vec2<f32> = u_xlat47;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1107.y, x_1107.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat9.y;
        u_xlat11.y = x_1114;
        let x_1116 : vec4<f32> = u_xlat11;
        let x_1117 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1116 + x_1117);
        let x_1119 : vec4<f32> = u_xlat10;
        let x_1120 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1119 / x_1120);
        let x_1122 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1122 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1128 : vec4<f32> = u_xlat11;
        let x_1129 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1128 / x_1129);
        let x_1131 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1131 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1133 : vec4<f32> = u_xlat10;
        let x_1136 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1133.w, x_1133.x, x_1133.y, x_1133.z) * vec4<f32>(x_1136.x, x_1136.x, x_1136.x, x_1136.x));
        let x_1139 : vec4<f32> = u_xlat11;
        let x_1142 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1139.x, x_1139.w, x_1139.y, x_1139.z) * vec4<f32>(x_1142.y, x_1142.y, x_1142.y, x_1142.y));
        let x_1145 : vec4<f32> = u_xlat10;
        let x_1146 : vec3<f32> = vec3<f32>(x_1145.y, x_1145.z, x_1145.w);
        let x_1147 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1146.z);
        let x_1150 : f32 = u_xlat11.x;
        u_xlat13.y = x_1150;
        let x_1152 : vec4<f32> = u_xlat3;
        let x_1155 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1158 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1152.x, x_1152.y, x_1152.x, x_1152.y) * vec4<f32>(x_1155.x, x_1155.y, x_1155.x, x_1155.y)) + vec4<f32>(x_1158.x, x_1158.y, x_1158.z, x_1158.y));
        let x_1161 : vec4<f32> = u_xlat3;
        let x_1164 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1161.x, x_1161.y) * vec2<f32>(x_1164.x, x_1164.y)) + vec2<f32>(x_1167.w, x_1167.y));
        let x_1171 : f32 = u_xlat13.y;
        u_xlat10.y = x_1171;
        let x_1174 : f32 = u_xlat11.z;
        u_xlat13.y = x_1174;
        let x_1176 : vec4<f32> = u_xlat3;
        let x_1179 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1182 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y) * vec4<f32>(x_1179.x, x_1179.y, x_1179.x, x_1179.y)) + vec4<f32>(x_1182.x, x_1182.y, x_1182.z, x_1182.y));
        let x_1185 : vec4<f32> = u_xlat3;
        let x_1188 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1191 : vec4<f32> = u_xlat13;
        let x_1193 : vec2<f32> = ((vec2<f32>(x_1185.x, x_1185.y) * vec2<f32>(x_1188.x, x_1188.y)) + vec2<f32>(x_1191.w, x_1191.y));
        let x_1194 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1193.x, x_1193.y, x_1194.z, x_1194.w);
        let x_1197 : f32 = u_xlat13.y;
        u_xlat10.z = x_1197;
        let x_1200 : vec4<f32> = u_xlat3;
        let x_1203 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1206 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y) * vec4<f32>(x_1203.x, x_1203.y, x_1203.x, x_1203.y)) + vec4<f32>(x_1206.x, x_1206.y, x_1206.x, x_1206.z));
        let x_1210 : f32 = u_xlat11.w;
        u_xlat13.y = x_1210;
        let x_1213 : vec4<f32> = u_xlat3;
        let x_1216 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1219 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1213.x, x_1213.y, x_1213.x, x_1213.y) * vec4<f32>(x_1216.x, x_1216.y, x_1216.x, x_1216.y)) + vec4<f32>(x_1219.x, x_1219.y, x_1219.z, x_1219.y));
        let x_1223 : vec4<f32> = u_xlat3;
        let x_1226 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1229 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1223.x, x_1223.y) * vec2<f32>(x_1226.x, x_1226.y)) + vec2<f32>(x_1229.w, x_1229.y));
        let x_1233 : f32 = u_xlat13.y;
        u_xlat10.w = x_1233;
        let x_1236 : vec4<f32> = u_xlat3;
        let x_1239 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1236.x, x_1236.y) * vec2<f32>(x_1239.x, x_1239.y)) + vec2<f32>(x_1242.x, x_1242.w));
        let x_1245 : vec4<f32> = u_xlat13;
        let x_1246 : vec3<f32> = vec3<f32>(x_1245.x, x_1245.z, x_1245.w);
        let x_1247 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1246.x, x_1247.y, x_1246.y, x_1246.z);
        let x_1249 : vec4<f32> = u_xlat3;
        let x_1252 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1255 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y) * vec4<f32>(x_1252.x, x_1252.y, x_1252.x, x_1252.y)) + vec4<f32>(x_1255.x, x_1255.y, x_1255.z, x_1255.y));
        let x_1259 : vec4<f32> = u_xlat3;
        let x_1262 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.w, x_1265.y));
        let x_1269 : f32 = u_xlat10.x;
        u_xlat11.x = x_1269;
        let x_1271 : vec4<f32> = u_xlat3;
        let x_1274 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1277 : vec4<f32> = u_xlat11;
        let x_1279 : vec2<f32> = ((vec2<f32>(x_1271.x, x_1271.y) * vec2<f32>(x_1274.x, x_1274.y)) + vec2<f32>(x_1277.x, x_1277.y));
        let x_1280 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1279.x, x_1279.y, x_1280.z, x_1280.w);
        let x_1283 : vec4<f32> = u_xlat9;
        let x_1285 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1283.x, x_1283.x, x_1283.x, x_1283.x) * x_1285);
        let x_1288 : vec4<f32> = u_xlat9;
        let x_1290 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1288.y, x_1288.y, x_1288.y, x_1288.y) * x_1290);
        let x_1293 : vec4<f32> = u_xlat9;
        let x_1295 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1293.z, x_1293.z, x_1293.z, x_1293.z) * x_1295);
        let x_1297 : vec4<f32> = u_xlat9;
        let x_1299 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1297.w, x_1297.w, x_1297.w, x_1297.w) * x_1299);
        let x_1302 : vec4<f32> = u_xlat14;
        let x_1303 : vec2<f32> = vec2<f32>(x_1302.x, x_1302.y);
        let x_1305 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec13;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat68 = x_1314;
        let x_1316 : vec4<f32> = u_xlat14;
        let x_1317 : vec2<f32> = vec2<f32>(x_1316.z, x_1316.w);
        let x_1319 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1317.x, x_1317.y, x_1319);
        let x_1327 : vec3<f32> = txVec14;
        let x_1329 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1327.xy, x_1327.z);
        u_xlat70 = x_1329;
        let x_1330 : f32 = u_xlat70;
        let x_1332 : f32 = u_xlat19.y;
        u_xlat70 = (x_1330 * x_1332);
        let x_1335 : f32 = u_xlat19.x;
        let x_1336 : f32 = u_xlat68;
        let x_1338 : f32 = u_xlat70;
        u_xlat68 = ((x_1335 * x_1336) + x_1338);
        let x_1341 : vec2<f32> = u_xlat47;
        let x_1343 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1341.x, x_1341.y, x_1343);
        let x_1350 : vec3<f32> = txVec15;
        let x_1352 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1350.xy, x_1350.z);
        u_xlat47.x = x_1352;
        let x_1355 : f32 = u_xlat19.z;
        let x_1357 : f32 = u_xlat47.x;
        let x_1359 : f32 = u_xlat68;
        u_xlat68 = ((x_1355 * x_1357) + x_1359);
        let x_1362 : vec4<f32> = u_xlat17;
        let x_1363 : vec2<f32> = vec2<f32>(x_1362.x, x_1362.y);
        let x_1365 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec16;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat47.x = x_1374;
        let x_1377 : f32 = u_xlat19.w;
        let x_1379 : f32 = u_xlat47.x;
        let x_1381 : f32 = u_xlat68;
        u_xlat68 = ((x_1377 * x_1379) + x_1381);
        let x_1384 : vec4<f32> = u_xlat15;
        let x_1385 : vec2<f32> = vec2<f32>(x_1384.x, x_1384.y);
        let x_1387 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1385.x, x_1385.y, x_1387);
        let x_1394 : vec3<f32> = txVec17;
        let x_1396 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1394.xy, x_1394.z);
        u_xlat47.x = x_1396;
        let x_1399 : f32 = u_xlat20.x;
        let x_1401 : f32 = u_xlat47.x;
        let x_1403 : f32 = u_xlat68;
        u_xlat68 = ((x_1399 * x_1401) + x_1403);
        let x_1406 : vec4<f32> = u_xlat15;
        let x_1407 : vec2<f32> = vec2<f32>(x_1406.z, x_1406.w);
        let x_1409 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1407.x, x_1407.y, x_1409);
        let x_1416 : vec3<f32> = txVec18;
        let x_1418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1416.xy, x_1416.z);
        u_xlat47.x = x_1418;
        let x_1421 : f32 = u_xlat20.y;
        let x_1423 : f32 = u_xlat47.x;
        let x_1425 : f32 = u_xlat68;
        u_xlat68 = ((x_1421 * x_1423) + x_1425);
        let x_1428 : vec4<f32> = u_xlat16;
        let x_1429 : vec2<f32> = vec2<f32>(x_1428.x, x_1428.y);
        let x_1431 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1429.x, x_1429.y, x_1431);
        let x_1438 : vec3<f32> = txVec19;
        let x_1440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1438.xy, x_1438.z);
        u_xlat47.x = x_1440;
        let x_1443 : f32 = u_xlat20.z;
        let x_1445 : f32 = u_xlat47.x;
        let x_1447 : f32 = u_xlat68;
        u_xlat68 = ((x_1443 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat17;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.z, x_1450.w);
        let x_1453 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec20;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat47.x = x_1462;
        let x_1465 : f32 = u_xlat20.w;
        let x_1467 : f32 = u_xlat47.x;
        let x_1469 : f32 = u_xlat68;
        u_xlat68 = ((x_1465 * x_1467) + x_1469);
        let x_1472 : vec4<f32> = u_xlat18;
        let x_1473 : vec2<f32> = vec2<f32>(x_1472.x, x_1472.y);
        let x_1475 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1473.x, x_1473.y, x_1475);
        let x_1482 : vec3<f32> = txVec21;
        let x_1484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1482.xy, x_1482.z);
        u_xlat47.x = x_1484;
        let x_1487 : f32 = u_xlat21.x;
        let x_1489 : f32 = u_xlat47.x;
        let x_1491 : f32 = u_xlat68;
        u_xlat68 = ((x_1487 * x_1489) + x_1491);
        let x_1494 : vec4<f32> = u_xlat18;
        let x_1495 : vec2<f32> = vec2<f32>(x_1494.z, x_1494.w);
        let x_1497 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1495.x, x_1495.y, x_1497);
        let x_1504 : vec3<f32> = txVec22;
        let x_1506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1504.xy, x_1504.z);
        u_xlat47.x = x_1506;
        let x_1509 : f32 = u_xlat21.y;
        let x_1511 : f32 = u_xlat47.x;
        let x_1513 : f32 = u_xlat68;
        u_xlat68 = ((x_1509 * x_1511) + x_1513);
        let x_1516 : vec2<f32> = u_xlat32;
        let x_1518 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1516.x, x_1516.y, x_1518);
        let x_1525 : vec3<f32> = txVec23;
        let x_1527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1525.xy, x_1525.z);
        u_xlat47.x = x_1527;
        let x_1530 : f32 = u_xlat21.z;
        let x_1532 : f32 = u_xlat47.x;
        let x_1534 : f32 = u_xlat68;
        u_xlat68 = ((x_1530 * x_1532) + x_1534);
        let x_1537 : vec2<f32> = u_xlat60;
        let x_1539 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1537.x, x_1537.y, x_1539);
        let x_1546 : vec3<f32> = txVec24;
        let x_1548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1546.xy, x_1546.z);
        u_xlat47.x = x_1548;
        let x_1551 : f32 = u_xlat21.w;
        let x_1553 : f32 = u_xlat47.x;
        let x_1555 : f32 = u_xlat68;
        u_xlat68 = ((x_1551 * x_1553) + x_1555);
        let x_1558 : vec4<f32> = u_xlat13;
        let x_1559 : vec2<f32> = vec2<f32>(x_1558.x, x_1558.y);
        let x_1561 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1559.x, x_1559.y, x_1561);
        let x_1568 : vec3<f32> = txVec25;
        let x_1570 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1568.xy, x_1568.z);
        u_xlat47.x = x_1570;
        let x_1573 : f32 = u_xlat9.x;
        let x_1575 : f32 = u_xlat47.x;
        let x_1577 : f32 = u_xlat68;
        u_xlat68 = ((x_1573 * x_1575) + x_1577);
        let x_1580 : vec4<f32> = u_xlat13;
        let x_1581 : vec2<f32> = vec2<f32>(x_1580.z, x_1580.w);
        let x_1583 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1581.x, x_1581.y, x_1583);
        let x_1590 : vec3<f32> = txVec26;
        let x_1592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1590.xy, x_1590.z);
        u_xlat47.x = x_1592;
        let x_1595 : f32 = u_xlat9.y;
        let x_1597 : f32 = u_xlat47.x;
        let x_1599 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1597) + x_1599);
        let x_1602 : vec2<f32> = u_xlat55;
        let x_1604 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1602.x, x_1602.y, x_1604);
        let x_1611 : vec3<f32> = txVec27;
        let x_1613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1611.xy, x_1611.z);
        u_xlat47.x = x_1613;
        let x_1616 : f32 = u_xlat9.z;
        let x_1618 : f32 = u_xlat47.x;
        let x_1620 : f32 = u_xlat68;
        u_xlat68 = ((x_1616 * x_1618) + x_1620);
        let x_1623 : vec4<f32> = u_xlat3;
        let x_1624 : vec2<f32> = vec2<f32>(x_1623.x, x_1623.y);
        let x_1626 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1624.x, x_1624.y, x_1626);
        let x_1633 : vec3<f32> = txVec28;
        let x_1635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1633.xy, x_1633.z);
        u_xlat3.x = x_1635;
        let x_1638 : f32 = u_xlat9.w;
        let x_1640 : f32 = u_xlat3.x;
        let x_1642 : f32 = u_xlat68;
        u_xlat67 = ((x_1638 * x_1640) + x_1642);
      }
    }
  } else {
    let x_1646 : vec3<f32> = u_xlat2;
    let x_1647 : vec2<f32> = vec2<f32>(x_1646.x, x_1646.y);
    let x_1649 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1647.x, x_1647.y, x_1649);
    let x_1656 : vec3<f32> = txVec29;
    let x_1658 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1656.xy, x_1656.z);
    u_xlat67 = x_1658;
  }
  let x_1660 : f32 = x_378.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1660) + 1.0f);
  let x_1664 : f32 = u_xlat67;
  let x_1666 : f32 = x_378.x_MainLightShadowParams.x;
  let x_1669 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1664 * x_1666) + x_1669);
  let x_1673 : f32 = u_xlat2.z;
  u_xlatb24 = (0.0f >= x_1673);
  let x_1677 : f32 = u_xlat2.z;
  u_xlatb46 = (x_1677 >= 1.0f);
  let x_1679 : bool = u_xlatb46;
  let x_1680 : bool = u_xlatb24;
  u_xlatb24 = (x_1679 | x_1680);
  let x_1682 : bool = u_xlatb24;
  let x_1683 : f32 = u_xlat67;
  u_xlat67 = select(x_1683, 1.0f, x_1682);
  let x_1685 : vec3<f32> = u_xlat1;
  let x_1687 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat1.x = dot(x_1685, -(vec3<f32>(x_1687.x, x_1687.y, x_1687.z)));
  let x_1693 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1693, 0.0f, 1.0f);
  let x_1697 : f32 = u_xlat67;
  let x_1701 : vec4<f32> = x_158.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1697, x_1697, x_1697) * vec3<f32>(x_1701.x, x_1701.y, x_1701.z));
  let x_1704 : vec3<f32> = u_xlat23;
  let x_1705 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1704 * vec3<f32>(x_1705.x, x_1705.x, x_1705.x));
  let x_1708 : vec3<f32> = u_xlat1;
  let x_1709 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1708 * vec3<f32>(x_1709.x, x_1709.y, x_1709.z));
  let x_1713 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1713 < 0.0f);
  let x_1717 : f32 = x_95.unity_LODFade.x;
  u_xlat24 = (x_1717 + 1.0f);
  let x_1719 : bool = u_xlatb67;
  if (x_1719) {
    let x_1723 : f32 = u_xlat24;
    x_1720 = x_1723;
  } else {
    let x_1726 : f32 = x_95.unity_LODFade.x;
    x_1720 = x_1726;
  }
  let x_1727 : f32 = x_1720;
  u_xlat67 = x_1727;
  let x_1728 : f32 = u_xlat67;
  u_xlatb24 = (0.5f >= x_1728);
  let x_1730 : vec3<f32> = u_xlat4;
  let x_1734 : vec4<f32> = x_158.x_ScreenParams;
  let x_1736 : vec3<f32> = (abs(x_1730) * vec3<f32>(x_1734.x, x_1734.y, x_1734.x));
  let x_1737 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1736.x, x_1736.y, x_1736.z, x_1737.w);
  let x_1742 : vec4<f32> = u_xlat3;
  u_xlatu3 = vec3<u32>(vec3<f32>(x_1742.x, x_1742.y, x_1742.z));
  let x_1747 : u32 = u_xlatu3.z;
  u_xlatu46 = (x_1747 * 1025u);
  let x_1751 : u32 = u_xlatu46;
  u_xlatu68 = (x_1751 >> 6u);
  let x_1755 : u32 = u_xlatu68;
  let x_1756 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1755 ^ x_1756));
  let x_1759 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1759) * 9u);
  let x_1763 : u32 = u_xlatu46;
  u_xlatu68 = (x_1763 >> 11u);
  let x_1766 : u32 = u_xlatu68;
  let x_1767 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1766 ^ x_1767));
  let x_1770 : i32 = u_xlati46;
  u_xlati46 = (x_1770 * 32769i);
  let x_1773 : i32 = u_xlati46;
  let x_1776 : u32 = u_xlatu3.y;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1773) ^ x_1776));
  let x_1779 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1779) * 1025u);
  let x_1782 : u32 = u_xlatu46;
  u_xlatu68 = (x_1782 >> 6u);
  let x_1784 : u32 = u_xlatu68;
  let x_1785 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1784 ^ x_1785));
  let x_1788 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1788) * 9u);
  let x_1791 : u32 = u_xlatu46;
  u_xlatu68 = (x_1791 >> 11u);
  let x_1793 : u32 = u_xlatu68;
  let x_1794 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1793 ^ x_1794));
  let x_1797 : i32 = u_xlati46;
  u_xlati46 = (x_1797 * 32769i);
  let x_1799 : i32 = u_xlati46;
  let x_1802 : u32 = u_xlatu3.x;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1799) ^ x_1802));
  let x_1805 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1805) * 1025u);
  let x_1808 : u32 = u_xlatu46;
  u_xlatu68 = (x_1808 >> 6u);
  let x_1810 : u32 = u_xlatu68;
  let x_1811 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1810 ^ x_1811));
  let x_1814 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1814) * 9u);
  let x_1817 : u32 = u_xlatu46;
  u_xlatu68 = (x_1817 >> 11u);
  let x_1819 : u32 = u_xlatu68;
  let x_1820 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1819 ^ x_1820));
  let x_1823 : i32 = u_xlati46;
  u_xlati46 = (x_1823 * 32769i);
  param = 1065353216i;
  let x_1830 : i32 = u_xlati46;
  param_1 = x_1830;
  param_2 = 0i;
  param_3 = 23i;
  let x_1833 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat46.x = bitcast<f32>(x_1833);
  let x_1837 : f32 = u_xlat46.x;
  u_xlat46.x = (x_1837 + -1.0f);
  let x_1841 : f32 = u_xlat46.x;
  u_xlat68 = (-(x_1841) + 1.0f);
  let x_1844 : bool = u_xlatb24;
  if (x_1844) {
    let x_1849 : f32 = u_xlat46.x;
    x_1845 = x_1849;
  } else {
    let x_1851 : f32 = u_xlat68;
    x_1845 = x_1851;
  }
  let x_1852 : f32 = x_1845;
  u_xlat24 = x_1852;
  let x_1853 : f32 = u_xlat67;
  let x_1855 : f32 = u_xlat24;
  u_xlat67 = ((x_1853 * 2.0f) + -(x_1855));
  let x_1858 : f32 = u_xlat67;
  let x_1860 : f32 = u_xlat6.w;
  u_xlat24 = (x_1858 * x_1860);
  let x_1862 : f32 = u_xlat24;
  u_xlatb46 = (x_1862 >= 0.400000006f);
  let x_1865 : bool = u_xlatb46;
  let x_1866 : f32 = u_xlat24;
  u_xlat46.x = select(0.0f, x_1866, x_1865);
  let x_1870 : f32 = u_xlat6.w;
  let x_1871 : f32 = u_xlat67;
  u_xlat67 = ((x_1870 * x_1871) + -0.400000006f);
  let x_1875 : f32 = u_xlat24;
  u_xlat68 = dpdxCoarse(x_1875);
  let x_1877 : f32 = u_xlat24;
  u_xlat24 = dpdyCoarse(x_1877);
  let x_1879 : f32 = u_xlat24;
  let x_1881 : f32 = u_xlat68;
  u_xlat24 = (abs(x_1879) + abs(x_1881));
  let x_1884 : f32 = u_xlat24;
  u_xlat24 = max(x_1884, 0.0001f);
  let x_1887 : f32 = u_xlat67;
  let x_1888 : f32 = u_xlat24;
  u_xlat67 = (x_1887 / x_1888);
  let x_1890 : f32 = u_xlat67;
  u_xlat67 = (x_1890 + 0.5f);
  let x_1892 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1892, 0.0f, 1.0f);
  let x_1895 : f32 = x_158.x_AlphaToMaskAvailable;
  u_xlatb24 = !((x_1895 == 0.0f));
  let x_1897 : bool = u_xlatb24;
  if (x_1897) {
    let x_1901 : f32 = u_xlat67;
    x_1898 = x_1901;
  } else {
    let x_1904 : f32 = u_xlat46.x;
    x_1898 = x_1904;
  }
  let x_1905 : f32 = x_1898;
  u_xlat67 = x_1905;
  let x_1906 : f32 = u_xlat67;
  u_xlat46.x = (x_1906 + -0.0001f);
  let x_1911 : f32 = u_xlat46.x;
  u_xlatb46 = (x_1911 < 0.0f);
  let x_1913 : bool = u_xlatb46;
  if (((select(0i, 1i, x_1913) * -1i) != 0i)) {
    discard;
  }
  let x_1921 : vec3<f32> = u_xlat22;
  let x_1922 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_1921 * vec3<f32>(x_1922.y, x_1922.y, x_1922.y));
  let x_1925 : vec3<f32> = u_xlat30;
  let x_1927 : vec4<f32> = vs_INTERP2;
  let x_1930 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1925.x, x_1925.x, x_1925.x) * vec3<f32>(x_1927.x, x_1927.y, x_1927.z)) + x_1930);
  let x_1932 : vec3<f32> = u_xlat30;
  let x_1934 : vec3<f32> = vs_INTERP1;
  let x_1936 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1932.z, x_1932.z, x_1932.z) * x_1934) + x_1936);
  let x_1938 : vec3<f32> = u_xlat22;
  let x_1939 : vec3<f32> = u_xlat22;
  u_xlat46.x = dot(x_1938, x_1939);
  let x_1943 : f32 = u_xlat46.x;
  u_xlat46.x = inverseSqrt(x_1943);
  let x_1946 : vec3<f32> = u_xlat22;
  let x_1947 : vec2<f32> = u_xlat46;
  let x_1949 : vec3<f32> = (x_1946 * vec3<f32>(x_1947.x, x_1947.x, x_1947.x));
  let x_1950 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1949.x, x_1949.y, x_1949.z, x_1950.w);
  u_xlat3.w = 1.0f;
  let x_1955 : vec4<f32> = x_95.unity_SHAr;
  let x_1956 : vec4<f32> = u_xlat3;
  u_xlat4.x = dot(x_1955, x_1956);
  let x_1961 : vec4<f32> = x_95.unity_SHAg;
  let x_1962 : vec4<f32> = u_xlat3;
  u_xlat4.y = dot(x_1961, x_1962);
  let x_1967 : vec4<f32> = x_95.unity_SHAb;
  let x_1968 : vec4<f32> = u_xlat3;
  u_xlat4.z = dot(x_1967, x_1968);
  let x_1971 : vec4<f32> = u_xlat3;
  let x_1973 : vec4<f32> = u_xlat3;
  u_xlat6 = (vec4<f32>(x_1971.y, x_1971.z, x_1971.z, x_1971.x) * vec4<f32>(x_1973.x, x_1973.y, x_1973.z, x_1973.z));
  let x_1978 : vec4<f32> = x_95.unity_SHBr;
  let x_1979 : vec4<f32> = u_xlat6;
  u_xlat9.x = dot(x_1978, x_1979);
  let x_1984 : vec4<f32> = x_95.unity_SHBg;
  let x_1985 : vec4<f32> = u_xlat6;
  u_xlat9.y = dot(x_1984, x_1985);
  let x_1989 : vec4<f32> = x_95.unity_SHBb;
  let x_1990 : vec4<f32> = u_xlat6;
  u_xlat9.z = dot(x_1989, x_1990);
  let x_1994 : f32 = u_xlat3.y;
  let x_1996 : f32 = u_xlat3.y;
  u_xlat22.x = (x_1994 * x_1996);
  let x_2000 : f32 = u_xlat3.x;
  let x_2002 : f32 = u_xlat3.x;
  let x_2005 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2000 * x_2002) + -(x_2005));
  let x_2011 : vec4<f32> = x_95.unity_SHC;
  let x_2013 : vec3<f32> = u_xlat22;
  let x_2016 : vec4<f32> = u_xlat9;
  u_xlat22 = ((vec3<f32>(x_2011.x, x_2011.y, x_2011.z) * vec3<f32>(x_2013.x, x_2013.x, x_2013.x)) + vec3<f32>(x_2016.x, x_2016.y, x_2016.z));
  let x_2019 : vec3<f32> = u_xlat22;
  let x_2020 : vec3<f32> = u_xlat4;
  u_xlat22 = (x_2019 + x_2020);
  let x_2022 : vec3<f32> = u_xlat22;
  u_xlat22 = max(x_2022, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2026 : vec4<f32> = x_158.x_ScaledScreenParams;
  let x_2027 : vec2<f32> = vec2<f32>(x_2026.x, x_2026.y);
  u_xlat46 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2027.x, x_2027.y));
  let x_2032 : vec2<f32> = u_xlat46;
  let x_2033 : vec4<f32> = hlslcc_FragCoord;
  let x_2035 : vec2<f32> = (x_2032 * vec2<f32>(x_2033.x, x_2033.y));
  let x_2036 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_2035.x, x_2035.y, x_2036.z);
  let x_2039 : f32 = u_xlat4.y;
  let x_2042 : f32 = x_158.x_ScaleBiasRt.x;
  let x_2045 : f32 = x_158.x_ScaleBiasRt.y;
  u_xlat46.x = ((x_2039 * x_2042) + x_2045);
  let x_2049 : f32 = u_xlat46.x;
  u_xlat4.z = (-(x_2049) + 1.0f);
  let x_2054 : f32 = u_xlat8.x;
  u_xlat8.x = x_2054;
  let x_2057 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2057, 0.0f, 1.0f);
  let x_2060 : f32 = u_xlat67;
  u_xlat67 = x_2060;
  let x_2061 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2061, 0.0f, 1.0f);
  let x_2063 : vec4<f32> = u_xlat7;
  let x_2067 : vec3<f32> = (vec3<f32>(x_2063.x, x_2063.y, x_2063.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2068 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2067.x, x_2067.y, x_2067.z, x_2068.w);
  let x_2071 : f32 = u_xlat8.x;
  u_xlat46.x = (-(x_2071) + 1.0f);
  let x_2076 : f32 = u_xlat46.x;
  let x_2078 : f32 = u_xlat46.x;
  u_xlat68 = (x_2076 * x_2078);
  let x_2080 : f32 = u_xlat68;
  u_xlat68 = max(x_2080, 0.0078125f);
  let x_2084 : f32 = u_xlat68;
  let x_2085 : f32 = u_xlat68;
  u_xlat69 = (x_2084 * x_2085);
  let x_2089 : f32 = u_xlat8.x;
  u_xlat26.x = (x_2089 + 0.040000021f);
  let x_2094 : f32 = u_xlat26.x;
  u_xlat4.y = min(x_2094, 1.0f);
  let x_2097 : f32 = u_xlat68;
  u_xlat70 = ((x_2097 * 4.0f) + 2.0f);
  let x_2106 : vec3<f32> = u_xlat4;
  let x_2109 : f32 = x_158.x_GlobalMipBias.x;
  let x_2110 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2106.x, x_2106.z), x_2109);
  u_xlat4.x = x_2110.x;
  let x_2113 : vec3<f32> = u_xlat4;
  u_xlat26 = (vec2<f32>(x_2113.y, x_2113.x) + vec2<f32>(-0.039999999f, -1.0f));
  let x_2121 : f32 = x_158.x_AmbientOcclusionParam.w;
  let x_2123 : f32 = u_xlat26.y;
  u_xlat48 = ((x_2121 * x_2123) + 1.0f);
  let x_2127 : f32 = u_xlat4.x;
  let x_2129 : f32 = vs_INTERP4.w;
  u_xlat4.x = min(x_2127, x_2129);
  let x_2132 : bool = u_xlatb0;
  if (x_2132) {
    let x_2136 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2136 == 1.0f);
    let x_2138 : bool = u_xlatb0;
    if (x_2138) {
      let x_2142 : vec4<f32> = vs_INTERP9;
      let x_2145 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2142.x, x_2142.y, x_2142.x, x_2142.y) + x_2145);
      let x_2148 : vec4<f32> = u_xlat7;
      let x_2149 : vec2<f32> = vec2<f32>(x_2148.x, x_2148.y);
      let x_2151 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2149.x, x_2149.y, x_2151);
      let x_2158 : vec3<f32> = txVec30;
      let x_2160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2158.xy, x_2158.z);
      u_xlat8.x = x_2160;
      let x_2163 : vec4<f32> = u_xlat7;
      let x_2164 : vec2<f32> = vec2<f32>(x_2163.z, x_2163.w);
      let x_2166 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2164.x, x_2164.y, x_2166);
      let x_2173 : vec3<f32> = txVec31;
      let x_2175 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2173.xy, x_2173.z);
      u_xlat8.y = x_2175;
      let x_2177 : vec4<f32> = vs_INTERP9;
      let x_2180 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2177.x, x_2177.y, x_2177.x, x_2177.y) + x_2180);
      let x_2183 : vec4<f32> = u_xlat7;
      let x_2184 : vec2<f32> = vec2<f32>(x_2183.x, x_2183.y);
      let x_2186 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2184.x, x_2184.y, x_2186);
      let x_2193 : vec3<f32> = txVec32;
      let x_2195 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2193.xy, x_2193.z);
      u_xlat8.z = x_2195;
      let x_2198 : vec4<f32> = u_xlat7;
      let x_2199 : vec2<f32> = vec2<f32>(x_2198.z, x_2198.w);
      let x_2201 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2199.x, x_2199.y, x_2201);
      let x_2208 : vec3<f32> = txVec33;
      let x_2210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2208.xy, x_2208.z);
      u_xlat8.w = x_2210;
      let x_2212 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2212, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2218 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb71 = (x_2218 == 2.0f);
      let x_2220 : bool = u_xlatb71;
      if (x_2220) {
        let x_2223 : vec4<f32> = vs_INTERP9;
        let x_2226 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2229 : vec2<f32> = ((vec2<f32>(x_2223.x, x_2223.y) * vec2<f32>(x_2226.z, x_2226.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2230 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2229.x, x_2229.y, x_2230.z, x_2230.w);
        let x_2232 : vec4<f32> = u_xlat7;
        let x_2234 : vec2<f32> = floor(vec2<f32>(x_2232.x, x_2232.y));
        let x_2235 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2234.x, x_2234.y, x_2235.z, x_2235.w);
        let x_2238 : vec4<f32> = vs_INTERP9;
        let x_2241 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2244 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2238.x, x_2238.y) * vec2<f32>(x_2241.z, x_2241.w)) + -(vec2<f32>(x_2244.x, x_2244.y)));
        let x_2248 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2248.x, x_2248.x, x_2248.y, x_2248.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2251 : vec4<f32> = u_xlat8;
        let x_2253 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2251.x, x_2251.x, x_2251.z, x_2251.z) * vec4<f32>(x_2253.x, x_2253.x, x_2253.z, x_2253.z));
        let x_2256 : vec4<f32> = u_xlat9;
        let x_2258 : vec2<f32> = (vec2<f32>(x_2256.y, x_2256.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2259 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2258.x, x_2259.y, x_2258.y, x_2259.w);
        let x_2261 : vec4<f32> = u_xlat9;
        let x_2264 : vec2<f32> = u_xlat51;
        let x_2266 : vec2<f32> = ((vec2<f32>(x_2261.x, x_2261.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2264));
        let x_2267 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2266.x, x_2266.y, x_2267.z, x_2267.w);
        let x_2270 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_2270) + vec2<f32>(1.0f, 1.0f));
        let x_2273 : vec2<f32> = u_xlat51;
        let x_2274 : vec2<f32> = min(x_2273, vec2<f32>(0.0f, 0.0f));
        let x_2275 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2274.x, x_2274.y, x_2275.z, x_2275.w);
        let x_2277 : vec4<f32> = u_xlat10;
        let x_2280 : vec4<f32> = u_xlat10;
        let x_2283 : vec2<f32> = u_xlat53;
        let x_2284 : vec2<f32> = ((-(vec2<f32>(x_2277.x, x_2277.y)) * vec2<f32>(x_2280.x, x_2280.y)) + x_2283);
        let x_2285 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2284.x, x_2284.y, x_2285.z, x_2285.w);
        let x_2287 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_2287, vec2<f32>(0.0f, 0.0f));
        let x_2289 : vec2<f32> = u_xlat51;
        let x_2291 : vec2<f32> = u_xlat51;
        let x_2293 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_2289) * x_2291) + vec2<f32>(x_2293.y, x_2293.w));
        let x_2296 : vec4<f32> = u_xlat10;
        let x_2298 : vec2<f32> = (vec2<f32>(x_2296.x, x_2296.y) + vec2<f32>(1.0f, 1.0f));
        let x_2299 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2298.x, x_2298.y, x_2299.z, x_2299.w);
        let x_2301 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2301 + vec2<f32>(1.0f, 1.0f));
        let x_2303 : vec4<f32> = u_xlat9;
        let x_2305 : vec2<f32> = (vec2<f32>(x_2303.x, x_2303.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2306 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2305.x, x_2305.y, x_2306.z, x_2306.w);
        let x_2308 : vec2<f32> = u_xlat53;
        let x_2309 : vec2<f32> = (x_2308 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2310 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2309.x, x_2309.y, x_2310.z, x_2310.w);
        let x_2312 : vec4<f32> = u_xlat10;
        let x_2314 : vec2<f32> = (vec2<f32>(x_2312.x, x_2312.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2315 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2314.x, x_2314.y, x_2315.z, x_2315.w);
        let x_2317 : vec2<f32> = u_xlat51;
        let x_2318 : vec2<f32> = (x_2317 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2319 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2318.x, x_2318.y, x_2319.z, x_2319.w);
        let x_2321 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_2321.y, x_2321.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2325 : f32 = u_xlat10.x;
        u_xlat11.z = x_2325;
        let x_2328 : f32 = u_xlat51.x;
        u_xlat11.w = x_2328;
        let x_2331 : f32 = u_xlat12.x;
        u_xlat9.z = x_2331;
        let x_2334 : f32 = u_xlat8.x;
        u_xlat9.w = x_2334;
        let x_2336 : vec4<f32> = u_xlat9;
        let x_2338 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2336.z, x_2336.w, x_2336.x, x_2336.z) + vec4<f32>(x_2338.z, x_2338.w, x_2338.x, x_2338.z));
        let x_2342 : f32 = u_xlat11.y;
        u_xlat10.z = x_2342;
        let x_2345 : f32 = u_xlat51.y;
        u_xlat10.w = x_2345;
        let x_2348 : f32 = u_xlat9.y;
        u_xlat12.z = x_2348;
        let x_2351 : f32 = u_xlat8.z;
        u_xlat12.w = x_2351;
        let x_2353 : vec4<f32> = u_xlat10;
        let x_2355 : vec4<f32> = u_xlat12;
        let x_2357 : vec3<f32> = (vec3<f32>(x_2353.z, x_2353.y, x_2353.w) + vec3<f32>(x_2355.z, x_2355.y, x_2355.w));
        let x_2358 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2357.x, x_2357.y, x_2357.z, x_2358.w);
        let x_2360 : vec4<f32> = u_xlat9;
        let x_2362 : vec4<f32> = u_xlat13;
        let x_2364 : vec3<f32> = (vec3<f32>(x_2360.x, x_2360.z, x_2360.w) / vec3<f32>(x_2362.z, x_2362.w, x_2362.y));
        let x_2365 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2364.x, x_2364.y, x_2364.z, x_2365.w);
        let x_2367 : vec4<f32> = u_xlat9;
        let x_2369 : vec3<f32> = (vec3<f32>(x_2367.x, x_2367.y, x_2367.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2370 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2369.x, x_2369.y, x_2369.z, x_2370.w);
        let x_2372 : vec4<f32> = u_xlat12;
        let x_2374 : vec4<f32> = u_xlat8;
        let x_2376 : vec3<f32> = (vec3<f32>(x_2372.z, x_2372.y, x_2372.w) / vec3<f32>(x_2374.x, x_2374.y, x_2374.z));
        let x_2377 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2376.x, x_2376.y, x_2376.z, x_2377.w);
        let x_2379 : vec4<f32> = u_xlat10;
        let x_2381 : vec3<f32> = (vec3<f32>(x_2379.x, x_2379.y, x_2379.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2382 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2381.x, x_2381.y, x_2381.z, x_2382.w);
        let x_2384 : vec4<f32> = u_xlat9;
        let x_2387 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2389 : vec3<f32> = (vec3<f32>(x_2384.y, x_2384.x, x_2384.z) * vec3<f32>(x_2387.x, x_2387.x, x_2387.x));
        let x_2390 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2389.x, x_2389.y, x_2389.z, x_2390.w);
        let x_2392 : vec4<f32> = u_xlat10;
        let x_2395 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2397 : vec3<f32> = (vec3<f32>(x_2392.x, x_2392.y, x_2392.z) * vec3<f32>(x_2395.y, x_2395.y, x_2395.y));
        let x_2398 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2397.x, x_2397.y, x_2397.z, x_2398.w);
        let x_2401 : f32 = u_xlat10.x;
        u_xlat9.w = x_2401;
        let x_2403 : vec4<f32> = u_xlat7;
        let x_2406 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2409 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2403.x, x_2403.y, x_2403.x, x_2403.y) * vec4<f32>(x_2406.x, x_2406.y, x_2406.x, x_2406.y)) + vec4<f32>(x_2409.y, x_2409.w, x_2409.x, x_2409.w));
        let x_2412 : vec4<f32> = u_xlat7;
        let x_2415 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2418 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_2412.x, x_2412.y) * vec2<f32>(x_2415.x, x_2415.y)) + vec2<f32>(x_2418.z, x_2418.w));
        let x_2422 : f32 = u_xlat9.y;
        u_xlat10.w = x_2422;
        let x_2424 : vec4<f32> = u_xlat10;
        let x_2425 : vec2<f32> = vec2<f32>(x_2424.y, x_2424.z);
        let x_2426 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2426.x, x_2425.x, x_2426.z, x_2425.y);
        let x_2428 : vec4<f32> = u_xlat7;
        let x_2431 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2434 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2428.x, x_2428.y, x_2428.x, x_2428.y) * vec4<f32>(x_2431.x, x_2431.y, x_2431.x, x_2431.y)) + vec4<f32>(x_2434.x, x_2434.y, x_2434.z, x_2434.y));
        let x_2437 : vec4<f32> = u_xlat7;
        let x_2440 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2443 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2437.x, x_2437.y, x_2437.x, x_2437.y) * vec4<f32>(x_2440.x, x_2440.y, x_2440.x, x_2440.y)) + vec4<f32>(x_2443.w, x_2443.y, x_2443.w, x_2443.z));
        let x_2446 : vec4<f32> = u_xlat7;
        let x_2449 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2452 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2446.x, x_2446.y, x_2446.x, x_2446.y) * vec4<f32>(x_2449.x, x_2449.y, x_2449.x, x_2449.y)) + vec4<f32>(x_2452.x, x_2452.w, x_2452.z, x_2452.w));
        let x_2455 : vec4<f32> = u_xlat8;
        let x_2457 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2455.x, x_2455.x, x_2455.x, x_2455.y) * vec4<f32>(x_2457.z, x_2457.w, x_2457.y, x_2457.z));
        let x_2460 : vec4<f32> = u_xlat8;
        let x_2462 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2460.y, x_2460.y, x_2460.z, x_2460.z) * x_2462);
        let x_2466 : f32 = u_xlat8.z;
        let x_2468 : f32 = u_xlat13.y;
        u_xlat71 = (x_2466 * x_2468);
        let x_2471 : vec4<f32> = u_xlat11;
        let x_2472 : vec2<f32> = vec2<f32>(x_2471.x, x_2471.y);
        let x_2474 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2472.x, x_2472.y, x_2474);
        let x_2482 : vec3<f32> = txVec34;
        let x_2484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2482.xy, x_2482.z);
        u_xlat72 = x_2484;
        let x_2486 : vec4<f32> = u_xlat11;
        let x_2487 : vec2<f32> = vec2<f32>(x_2486.z, x_2486.w);
        let x_2489 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2487.x, x_2487.y, x_2489);
        let x_2496 : vec3<f32> = txVec35;
        let x_2498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2496.xy, x_2496.z);
        u_xlat7.x = x_2498;
        let x_2501 : f32 = u_xlat7.x;
        let x_2503 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2501 * x_2503);
        let x_2507 : f32 = u_xlat14.x;
        let x_2508 : f32 = u_xlat72;
        let x_2511 : f32 = u_xlat7.x;
        u_xlat72 = ((x_2507 * x_2508) + x_2511);
        let x_2514 : vec2<f32> = u_xlat51;
        let x_2516 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2514.x, x_2514.y, x_2516);
        let x_2523 : vec3<f32> = txVec36;
        let x_2525 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2523.xy, x_2523.z);
        u_xlat7.x = x_2525;
        let x_2528 : f32 = u_xlat14.z;
        let x_2530 : f32 = u_xlat7.x;
        let x_2532 : f32 = u_xlat72;
        u_xlat72 = ((x_2528 * x_2530) + x_2532);
        let x_2535 : vec4<f32> = u_xlat10;
        let x_2536 : vec2<f32> = vec2<f32>(x_2535.x, x_2535.y);
        let x_2538 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2536.x, x_2536.y, x_2538);
        let x_2545 : vec3<f32> = txVec37;
        let x_2547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2545.xy, x_2545.z);
        u_xlat7.x = x_2547;
        let x_2550 : f32 = u_xlat14.w;
        let x_2552 : f32 = u_xlat7.x;
        let x_2554 : f32 = u_xlat72;
        u_xlat72 = ((x_2550 * x_2552) + x_2554);
        let x_2557 : vec4<f32> = u_xlat12;
        let x_2558 : vec2<f32> = vec2<f32>(x_2557.x, x_2557.y);
        let x_2560 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2558.x, x_2558.y, x_2560);
        let x_2567 : vec3<f32> = txVec38;
        let x_2569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2567.xy, x_2567.z);
        u_xlat7.x = x_2569;
        let x_2572 : f32 = u_xlat15.x;
        let x_2574 : f32 = u_xlat7.x;
        let x_2576 : f32 = u_xlat72;
        u_xlat72 = ((x_2572 * x_2574) + x_2576);
        let x_2579 : vec4<f32> = u_xlat12;
        let x_2580 : vec2<f32> = vec2<f32>(x_2579.z, x_2579.w);
        let x_2582 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2580.x, x_2580.y, x_2582);
        let x_2589 : vec3<f32> = txVec39;
        let x_2591 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2589.xy, x_2589.z);
        u_xlat7.x = x_2591;
        let x_2594 : f32 = u_xlat15.y;
        let x_2596 : f32 = u_xlat7.x;
        let x_2598 : f32 = u_xlat72;
        u_xlat72 = ((x_2594 * x_2596) + x_2598);
        let x_2601 : vec4<f32> = u_xlat10;
        let x_2602 : vec2<f32> = vec2<f32>(x_2601.z, x_2601.w);
        let x_2604 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2602.x, x_2602.y, x_2604);
        let x_2611 : vec3<f32> = txVec40;
        let x_2613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2611.xy, x_2611.z);
        u_xlat7.x = x_2613;
        let x_2616 : f32 = u_xlat15.z;
        let x_2618 : f32 = u_xlat7.x;
        let x_2620 : f32 = u_xlat72;
        u_xlat72 = ((x_2616 * x_2618) + x_2620);
        let x_2623 : vec4<f32> = u_xlat9;
        let x_2624 : vec2<f32> = vec2<f32>(x_2623.x, x_2623.y);
        let x_2626 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2624.x, x_2624.y, x_2626);
        let x_2633 : vec3<f32> = txVec41;
        let x_2635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2633.xy, x_2633.z);
        u_xlat7.x = x_2635;
        let x_2638 : f32 = u_xlat15.w;
        let x_2640 : f32 = u_xlat7.x;
        let x_2642 : f32 = u_xlat72;
        u_xlat72 = ((x_2638 * x_2640) + x_2642);
        let x_2645 : vec4<f32> = u_xlat9;
        let x_2646 : vec2<f32> = vec2<f32>(x_2645.z, x_2645.w);
        let x_2648 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2646.x, x_2646.y, x_2648);
        let x_2655 : vec3<f32> = txVec42;
        let x_2657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2655.xy, x_2655.z);
        u_xlat7.x = x_2657;
        let x_2659 : f32 = u_xlat71;
        let x_2661 : f32 = u_xlat7.x;
        let x_2663 : f32 = u_xlat72;
        u_xlat0.x = ((x_2659 * x_2661) + x_2663);
      } else {
        let x_2667 : vec4<f32> = vs_INTERP9;
        let x_2670 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2673 : vec2<f32> = ((vec2<f32>(x_2667.x, x_2667.y) * vec2<f32>(x_2670.z, x_2670.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2674 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2673.x, x_2673.y, x_2674.z, x_2674.w);
        let x_2676 : vec4<f32> = u_xlat7;
        let x_2678 : vec2<f32> = floor(vec2<f32>(x_2676.x, x_2676.y));
        let x_2679 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2678.x, x_2678.y, x_2679.z, x_2679.w);
        let x_2681 : vec4<f32> = vs_INTERP9;
        let x_2684 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2687 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2681.x, x_2681.y) * vec2<f32>(x_2684.z, x_2684.w)) + -(vec2<f32>(x_2687.x, x_2687.y)));
        let x_2691 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2691.x, x_2691.x, x_2691.y, x_2691.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2694 : vec4<f32> = u_xlat8;
        let x_2696 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2694.x, x_2694.x, x_2694.z, x_2694.z) * vec4<f32>(x_2696.x, x_2696.x, x_2696.z, x_2696.z));
        let x_2699 : vec4<f32> = u_xlat9;
        let x_2701 : vec2<f32> = (vec2<f32>(x_2699.y, x_2699.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2702 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2702.x, x_2701.x, x_2702.z, x_2701.y);
        let x_2704 : vec4<f32> = u_xlat9;
        let x_2707 : vec2<f32> = u_xlat51;
        let x_2709 : vec2<f32> = ((vec2<f32>(x_2704.x, x_2704.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2707));
        let x_2710 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2709.x, x_2710.y, x_2709.y, x_2710.w);
        let x_2712 : vec2<f32> = u_xlat51;
        let x_2714 : vec2<f32> = (-(x_2712) + vec2<f32>(1.0f, 1.0f));
        let x_2715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2714.x, x_2714.y, x_2715.z, x_2715.w);
        let x_2717 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_2717, vec2<f32>(0.0f, 0.0f));
        let x_2719 : vec2<f32> = u_xlat53;
        let x_2721 : vec2<f32> = u_xlat53;
        let x_2723 : vec4<f32> = u_xlat9;
        let x_2725 : vec2<f32> = ((-(x_2719) * x_2721) + vec2<f32>(x_2723.x, x_2723.y));
        let x_2726 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2725.x, x_2725.y, x_2726.z, x_2726.w);
        let x_2728 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_2728, vec2<f32>(0.0f, 0.0f));
        let x_2730 : vec2<f32> = u_xlat53;
        let x_2732 : vec2<f32> = u_xlat53;
        let x_2734 : vec4<f32> = u_xlat8;
        let x_2736 : vec2<f32> = ((-(x_2730) * x_2732) + vec2<f32>(x_2734.y, x_2734.w));
        let x_2737 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2736.x, x_2737.y, x_2736.y);
        let x_2739 : vec4<f32> = u_xlat9;
        let x_2741 : vec2<f32> = (vec2<f32>(x_2739.x, x_2739.y) + vec2<f32>(2.0f, 2.0f));
        let x_2742 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2741.x, x_2741.y, x_2742.z, x_2742.w);
        let x_2744 : vec3<f32> = u_xlat30;
        let x_2746 : vec2<f32> = (vec2<f32>(x_2744.x, x_2744.z) + vec2<f32>(2.0f, 2.0f));
        let x_2747 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2747.x, x_2746.x, x_2747.z, x_2746.y);
        let x_2750 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2750 * 0.081632003f);
        let x_2753 : vec4<f32> = u_xlat8;
        let x_2755 : vec3<f32> = (vec3<f32>(x_2753.z, x_2753.x, x_2753.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2756 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2755.x, x_2755.y, x_2755.z, x_2756.w);
        let x_2758 : vec4<f32> = u_xlat9;
        let x_2760 : vec2<f32> = (vec2<f32>(x_2758.x, x_2758.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2761 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2760.x, x_2760.y, x_2761.z, x_2761.w);
        let x_2764 : f32 = u_xlat12.y;
        u_xlat11.x = x_2764;
        let x_2766 : vec2<f32> = u_xlat51;
        let x_2769 : vec2<f32> = ((vec2<f32>(x_2766.x, x_2766.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2770 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2770.x, x_2769.x, x_2770.z, x_2769.y);
        let x_2772 : vec2<f32> = u_xlat51;
        let x_2775 : vec2<f32> = ((vec2<f32>(x_2772.x, x_2772.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2776 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2775.x, x_2776.y, x_2775.y, x_2776.w);
        let x_2779 : f32 = u_xlat8.x;
        u_xlat9.y = x_2779;
        let x_2782 : f32 = u_xlat10.y;
        u_xlat9.w = x_2782;
        let x_2784 : vec4<f32> = u_xlat9;
        let x_2785 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2784 + x_2785);
        let x_2787 : vec2<f32> = u_xlat51;
        let x_2790 : vec2<f32> = ((vec2<f32>(x_2787.y, x_2787.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2791 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2791.x, x_2790.x, x_2791.z, x_2790.y);
        let x_2793 : vec2<f32> = u_xlat51;
        let x_2796 : vec2<f32> = ((vec2<f32>(x_2793.y, x_2793.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2797 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2796.x, x_2797.y, x_2796.y, x_2797.w);
        let x_2800 : f32 = u_xlat8.y;
        u_xlat10.y = x_2800;
        let x_2802 : vec4<f32> = u_xlat10;
        let x_2803 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2802 + x_2803);
        let x_2805 : vec4<f32> = u_xlat9;
        let x_2806 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2805 / x_2806);
        let x_2808 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2808 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2810 : vec4<f32> = u_xlat10;
        let x_2811 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2810 / x_2811);
        let x_2813 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2813 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2815 : vec4<f32> = u_xlat9;
        let x_2818 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2815.w, x_2815.x, x_2815.y, x_2815.z) * vec4<f32>(x_2818.x, x_2818.x, x_2818.x, x_2818.x));
        let x_2821 : vec4<f32> = u_xlat10;
        let x_2824 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2821.x, x_2821.w, x_2821.y, x_2821.z) * vec4<f32>(x_2824.y, x_2824.y, x_2824.y, x_2824.y));
        let x_2827 : vec4<f32> = u_xlat9;
        let x_2828 : vec3<f32> = vec3<f32>(x_2827.y, x_2827.z, x_2827.w);
        let x_2829 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2828.x, x_2829.y, x_2828.y, x_2828.z);
        let x_2832 : f32 = u_xlat10.x;
        u_xlat12.y = x_2832;
        let x_2834 : vec4<f32> = u_xlat7;
        let x_2837 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2840 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2834.x, x_2834.y, x_2834.x, x_2834.y) * vec4<f32>(x_2837.x, x_2837.y, x_2837.x, x_2837.y)) + vec4<f32>(x_2840.x, x_2840.y, x_2840.z, x_2840.y));
        let x_2843 : vec4<f32> = u_xlat7;
        let x_2846 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2849 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_2843.x, x_2843.y) * vec2<f32>(x_2846.x, x_2846.y)) + vec2<f32>(x_2849.w, x_2849.y));
        let x_2853 : f32 = u_xlat12.y;
        u_xlat9.y = x_2853;
        let x_2856 : f32 = u_xlat10.z;
        u_xlat12.y = x_2856;
        let x_2858 : vec4<f32> = u_xlat7;
        let x_2861 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2864 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2858.x, x_2858.y, x_2858.x, x_2858.y) * vec4<f32>(x_2861.x, x_2861.y, x_2861.x, x_2861.y)) + vec4<f32>(x_2864.x, x_2864.y, x_2864.z, x_2864.y));
        let x_2867 : vec4<f32> = u_xlat7;
        let x_2870 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2873 : vec4<f32> = u_xlat12;
        let x_2875 : vec2<f32> = ((vec2<f32>(x_2867.x, x_2867.y) * vec2<f32>(x_2870.x, x_2870.y)) + vec2<f32>(x_2873.w, x_2873.y));
        let x_2876 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2875.x, x_2875.y, x_2876.z, x_2876.w);
        let x_2879 : f32 = u_xlat12.y;
        u_xlat9.z = x_2879;
        let x_2881 : vec4<f32> = u_xlat7;
        let x_2884 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2887 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2881.x, x_2881.y, x_2881.x, x_2881.y) * vec4<f32>(x_2884.x, x_2884.y, x_2884.x, x_2884.y)) + vec4<f32>(x_2887.x, x_2887.y, x_2887.x, x_2887.z));
        let x_2891 : f32 = u_xlat10.w;
        u_xlat12.y = x_2891;
        let x_2893 : vec4<f32> = u_xlat7;
        let x_2896 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2899 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2893.x, x_2893.y, x_2893.x, x_2893.y) * vec4<f32>(x_2896.x, x_2896.y, x_2896.x, x_2896.y)) + vec4<f32>(x_2899.x, x_2899.y, x_2899.z, x_2899.y));
        let x_2902 : vec4<f32> = u_xlat7;
        let x_2905 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2908 : vec4<f32> = u_xlat12;
        let x_2910 : vec2<f32> = ((vec2<f32>(x_2902.x, x_2902.y) * vec2<f32>(x_2905.x, x_2905.y)) + vec2<f32>(x_2908.w, x_2908.y));
        let x_2911 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2910.x, x_2910.y, x_2911.z);
        let x_2914 : f32 = u_xlat12.y;
        u_xlat9.w = x_2914;
        let x_2917 : vec4<f32> = u_xlat7;
        let x_2920 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2923 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_2917.x, x_2917.y) * vec2<f32>(x_2920.x, x_2920.y)) + vec2<f32>(x_2923.x, x_2923.w));
        let x_2926 : vec4<f32> = u_xlat12;
        let x_2927 : vec3<f32> = vec3<f32>(x_2926.x, x_2926.z, x_2926.w);
        let x_2928 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2927.x, x_2928.y, x_2927.y, x_2927.z);
        let x_2930 : vec4<f32> = u_xlat7;
        let x_2933 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2936 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2930.x, x_2930.y, x_2930.x, x_2930.y) * vec4<f32>(x_2933.x, x_2933.y, x_2933.x, x_2933.y)) + vec4<f32>(x_2936.x, x_2936.y, x_2936.z, x_2936.y));
        let x_2939 : vec4<f32> = u_xlat7;
        let x_2942 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2945 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_2939.x, x_2939.y) * vec2<f32>(x_2942.x, x_2942.y)) + vec2<f32>(x_2945.w, x_2945.y));
        let x_2949 : f32 = u_xlat9.x;
        u_xlat10.x = x_2949;
        let x_2951 : vec4<f32> = u_xlat7;
        let x_2954 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2957 : vec4<f32> = u_xlat10;
        let x_2959 : vec2<f32> = ((vec2<f32>(x_2951.x, x_2951.y) * vec2<f32>(x_2954.x, x_2954.y)) + vec2<f32>(x_2957.x, x_2957.y));
        let x_2960 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2959.x, x_2959.y, x_2960.z, x_2960.w);
        let x_2962 : vec4<f32> = u_xlat8;
        let x_2964 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2962.x, x_2962.x, x_2962.x, x_2962.x) * x_2964);
        let x_2966 : vec4<f32> = u_xlat8;
        let x_2968 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2966.y, x_2966.y, x_2966.y, x_2966.y) * x_2968);
        let x_2970 : vec4<f32> = u_xlat8;
        let x_2972 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2970.z, x_2970.z, x_2970.z, x_2970.z) * x_2972);
        let x_2974 : vec4<f32> = u_xlat8;
        let x_2976 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2974.w, x_2974.w, x_2974.w, x_2974.w) * x_2976);
        let x_2979 : vec4<f32> = u_xlat13;
        let x_2980 : vec2<f32> = vec2<f32>(x_2979.x, x_2979.y);
        let x_2982 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2980.x, x_2980.y, x_2982);
        let x_2989 : vec3<f32> = txVec43;
        let x_2991 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2989.xy, x_2989.z);
        u_xlat71 = x_2991;
        let x_2993 : vec4<f32> = u_xlat13;
        let x_2994 : vec2<f32> = vec2<f32>(x_2993.z, x_2993.w);
        let x_2996 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2994.x, x_2994.y, x_2996);
        let x_3003 : vec3<f32> = txVec44;
        let x_3005 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3003.xy, x_3003.z);
        u_xlat72 = x_3005;
        let x_3006 : f32 = u_xlat72;
        let x_3008 : f32 = u_xlat18.y;
        u_xlat72 = (x_3006 * x_3008);
        let x_3011 : f32 = u_xlat18.x;
        let x_3012 : f32 = u_xlat71;
        let x_3014 : f32 = u_xlat72;
        u_xlat71 = ((x_3011 * x_3012) + x_3014);
        let x_3017 : vec2<f32> = u_xlat51;
        let x_3019 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_3017.x, x_3017.y, x_3019);
        let x_3026 : vec3<f32> = txVec45;
        let x_3028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3026.xy, x_3026.z);
        u_xlat72 = x_3028;
        let x_3030 : f32 = u_xlat18.z;
        let x_3031 : f32 = u_xlat72;
        let x_3033 : f32 = u_xlat71;
        u_xlat71 = ((x_3030 * x_3031) + x_3033);
        let x_3036 : vec4<f32> = u_xlat16;
        let x_3037 : vec2<f32> = vec2<f32>(x_3036.x, x_3036.y);
        let x_3039 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_3037.x, x_3037.y, x_3039);
        let x_3046 : vec3<f32> = txVec46;
        let x_3048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3046.xy, x_3046.z);
        u_xlat72 = x_3048;
        let x_3050 : f32 = u_xlat18.w;
        let x_3051 : f32 = u_xlat72;
        let x_3053 : f32 = u_xlat71;
        u_xlat71 = ((x_3050 * x_3051) + x_3053);
        let x_3056 : vec4<f32> = u_xlat14;
        let x_3057 : vec2<f32> = vec2<f32>(x_3056.x, x_3056.y);
        let x_3059 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3057.x, x_3057.y, x_3059);
        let x_3066 : vec3<f32> = txVec47;
        let x_3068 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3066.xy, x_3066.z);
        u_xlat72 = x_3068;
        let x_3070 : f32 = u_xlat19.x;
        let x_3071 : f32 = u_xlat72;
        let x_3073 : f32 = u_xlat71;
        u_xlat71 = ((x_3070 * x_3071) + x_3073);
        let x_3076 : vec4<f32> = u_xlat14;
        let x_3077 : vec2<f32> = vec2<f32>(x_3076.z, x_3076.w);
        let x_3079 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3077.x, x_3077.y, x_3079);
        let x_3086 : vec3<f32> = txVec48;
        let x_3088 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3086.xy, x_3086.z);
        u_xlat72 = x_3088;
        let x_3090 : f32 = u_xlat19.y;
        let x_3091 : f32 = u_xlat72;
        let x_3093 : f32 = u_xlat71;
        u_xlat71 = ((x_3090 * x_3091) + x_3093);
        let x_3096 : vec4<f32> = u_xlat15;
        let x_3097 : vec2<f32> = vec2<f32>(x_3096.x, x_3096.y);
        let x_3099 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3097.x, x_3097.y, x_3099);
        let x_3106 : vec3<f32> = txVec49;
        let x_3108 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3106.xy, x_3106.z);
        u_xlat72 = x_3108;
        let x_3110 : f32 = u_xlat19.z;
        let x_3111 : f32 = u_xlat72;
        let x_3113 : f32 = u_xlat71;
        u_xlat71 = ((x_3110 * x_3111) + x_3113);
        let x_3116 : vec4<f32> = u_xlat16;
        let x_3117 : vec2<f32> = vec2<f32>(x_3116.z, x_3116.w);
        let x_3119 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3117.x, x_3117.y, x_3119);
        let x_3126 : vec3<f32> = txVec50;
        let x_3128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3126.xy, x_3126.z);
        u_xlat72 = x_3128;
        let x_3130 : f32 = u_xlat19.w;
        let x_3131 : f32 = u_xlat72;
        let x_3133 : f32 = u_xlat71;
        u_xlat71 = ((x_3130 * x_3131) + x_3133);
        let x_3136 : vec4<f32> = u_xlat17;
        let x_3137 : vec2<f32> = vec2<f32>(x_3136.x, x_3136.y);
        let x_3139 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3137.x, x_3137.y, x_3139);
        let x_3146 : vec3<f32> = txVec51;
        let x_3148 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3146.xy, x_3146.z);
        u_xlat72 = x_3148;
        let x_3150 : f32 = u_xlat20.x;
        let x_3151 : f32 = u_xlat72;
        let x_3153 : f32 = u_xlat71;
        u_xlat71 = ((x_3150 * x_3151) + x_3153);
        let x_3156 : vec4<f32> = u_xlat17;
        let x_3157 : vec2<f32> = vec2<f32>(x_3156.z, x_3156.w);
        let x_3159 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3157.x, x_3157.y, x_3159);
        let x_3166 : vec3<f32> = txVec52;
        let x_3168 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3166.xy, x_3166.z);
        u_xlat72 = x_3168;
        let x_3170 : f32 = u_xlat20.y;
        let x_3171 : f32 = u_xlat72;
        let x_3173 : f32 = u_xlat71;
        u_xlat71 = ((x_3170 * x_3171) + x_3173);
        let x_3176 : vec3<f32> = u_xlat31;
        let x_3177 : vec2<f32> = vec2<f32>(x_3176.x, x_3176.y);
        let x_3179 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3177.x, x_3177.y, x_3179);
        let x_3186 : vec3<f32> = txVec53;
        let x_3188 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3186.xy, x_3186.z);
        u_xlat72 = x_3188;
        let x_3190 : f32 = u_xlat20.z;
        let x_3191 : f32 = u_xlat72;
        let x_3193 : f32 = u_xlat71;
        u_xlat71 = ((x_3190 * x_3191) + x_3193);
        let x_3196 : vec2<f32> = u_xlat59;
        let x_3198 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3196.x, x_3196.y, x_3198);
        let x_3205 : vec3<f32> = txVec54;
        let x_3207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3205.xy, x_3205.z);
        u_xlat72 = x_3207;
        let x_3209 : f32 = u_xlat20.w;
        let x_3210 : f32 = u_xlat72;
        let x_3212 : f32 = u_xlat71;
        u_xlat71 = ((x_3209 * x_3210) + x_3212);
        let x_3215 : vec4<f32> = u_xlat12;
        let x_3216 : vec2<f32> = vec2<f32>(x_3215.x, x_3215.y);
        let x_3218 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3216.x, x_3216.y, x_3218);
        let x_3225 : vec3<f32> = txVec55;
        let x_3227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3225.xy, x_3225.z);
        u_xlat72 = x_3227;
        let x_3229 : f32 = u_xlat8.x;
        let x_3230 : f32 = u_xlat72;
        let x_3232 : f32 = u_xlat71;
        u_xlat71 = ((x_3229 * x_3230) + x_3232);
        let x_3235 : vec4<f32> = u_xlat12;
        let x_3236 : vec2<f32> = vec2<f32>(x_3235.z, x_3235.w);
        let x_3238 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3236.x, x_3236.y, x_3238);
        let x_3245 : vec3<f32> = txVec56;
        let x_3247 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3245.xy, x_3245.z);
        u_xlat72 = x_3247;
        let x_3249 : f32 = u_xlat8.y;
        let x_3250 : f32 = u_xlat72;
        let x_3252 : f32 = u_xlat71;
        u_xlat71 = ((x_3249 * x_3250) + x_3252);
        let x_3255 : vec2<f32> = u_xlat54;
        let x_3257 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3255.x, x_3255.y, x_3257);
        let x_3264 : vec3<f32> = txVec57;
        let x_3266 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3264.xy, x_3264.z);
        u_xlat72 = x_3266;
        let x_3268 : f32 = u_xlat8.z;
        let x_3269 : f32 = u_xlat72;
        let x_3271 : f32 = u_xlat71;
        u_xlat71 = ((x_3268 * x_3269) + x_3271);
        let x_3274 : vec4<f32> = u_xlat7;
        let x_3275 : vec2<f32> = vec2<f32>(x_3274.x, x_3274.y);
        let x_3277 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3275.x, x_3275.y, x_3277);
        let x_3284 : vec3<f32> = txVec58;
        let x_3286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3284.xy, x_3284.z);
        u_xlat72 = x_3286;
        let x_3288 : f32 = u_xlat8.w;
        let x_3289 : f32 = u_xlat72;
        let x_3291 : f32 = u_xlat71;
        u_xlat0.x = ((x_3288 * x_3289) + x_3291);
      }
    }
  } else {
    let x_3296 : vec4<f32> = vs_INTERP9;
    let x_3297 : vec2<f32> = vec2<f32>(x_3296.x, x_3296.y);
    let x_3299 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3297.x, x_3297.y, x_3299);
    let x_3306 : vec3<f32> = txVec59;
    let x_3308 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3306.xy, x_3306.z);
    u_xlat0.x = x_3308;
  }
  let x_3311 : f32 = u_xlat0.x;
  let x_3313 : f32 = x_378.x_MainLightShadowParams.x;
  let x_3316 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3311 * x_3313) + x_3316);
  let x_3323 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3323);
  let x_3327 : f32 = vs_INTERP9.z;
  u_xlatb71 = (x_3327 >= 1.0f);
  let x_3330 : bool = u_xlatb2.x;
  let x_3331 : bool = u_xlatb71;
  u_xlatb2.x = (x_3330 | x_3331);
  let x_3335 : bool = u_xlatb2.x;
  if (x_3335) {
    x_3336 = 1.0f;
  } else {
    let x_3341 : f32 = u_xlat0.x;
    x_3336 = x_3341;
  }
  let x_3342 : f32 = x_3336;
  u_xlat0.x = x_3342;
  let x_3344 : vec3<f32> = vs_INTERP0;
  let x_3346 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  let x_3348 : vec3<f32> = (x_3344 + -(x_3346));
  let x_3349 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3348.x, x_3348.y, x_3348.z, x_3349.w);
  let x_3351 : vec4<f32> = u_xlat7;
  let x_3353 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3351.x, x_3351.y, x_3351.z), vec3<f32>(x_3353.x, x_3353.y, x_3353.z));
  let x_3358 : f32 = u_xlat2.x;
  let x_3360 : f32 = x_378.x_MainLightShadowParams.z;
  let x_3363 : f32 = x_378.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3358 * x_3360) + x_3363);
  let x_3367 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3367, 0.0f, 1.0f);
  let x_3371 : f32 = u_xlat0.x;
  u_xlat71 = (-(x_3371) + 1.0f);
  let x_3375 : f32 = u_xlat2.x;
  let x_3376 : f32 = u_xlat71;
  let x_3379 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3375 * x_3376) + x_3379);
  let x_3388 : f32 = x_3386.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3388 == -1.0f));
  let x_3392 : bool = u_xlatb2.x;
  if (x_3392) {
    let x_3395 : vec3<f32> = vs_INTERP0;
    let x_3398 : vec4<f32> = x_3386.x_MainLightWorldToLight[1i];
    let x_3400 : vec2<f32> = (vec2<f32>(x_3395.y, x_3395.y) * vec2<f32>(x_3398.x, x_3398.y));
    let x_3401 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3400.x, x_3400.y, x_3401.z, x_3401.w);
    let x_3404 : vec4<f32> = x_3386.x_MainLightWorldToLight[0i];
    let x_3406 : vec3<f32> = vs_INTERP0;
    let x_3409 : vec4<f32> = u_xlat7;
    let x_3411 : vec2<f32> = ((vec2<f32>(x_3404.x, x_3404.y) * vec2<f32>(x_3406.x, x_3406.x)) + vec2<f32>(x_3409.x, x_3409.y));
    let x_3412 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3411.x, x_3411.y, x_3412.z, x_3412.w);
    let x_3415 : vec4<f32> = x_3386.x_MainLightWorldToLight[2i];
    let x_3417 : vec3<f32> = vs_INTERP0;
    let x_3420 : vec4<f32> = u_xlat7;
    let x_3422 : vec2<f32> = ((vec2<f32>(x_3415.x, x_3415.y) * vec2<f32>(x_3417.z, x_3417.z)) + vec2<f32>(x_3420.x, x_3420.y));
    let x_3423 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3422.x, x_3422.y, x_3423.z, x_3423.w);
    let x_3425 : vec4<f32> = u_xlat7;
    let x_3428 : vec4<f32> = x_3386.x_MainLightWorldToLight[3i];
    let x_3430 : vec2<f32> = (vec2<f32>(x_3425.x, x_3425.y) + vec2<f32>(x_3428.x, x_3428.y));
    let x_3431 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3430.x, x_3430.y, x_3431.z, x_3431.w);
    let x_3433 : vec4<f32> = u_xlat7;
    let x_3436 : vec2<f32> = ((vec2<f32>(x_3433.x, x_3433.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3437 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3436.x, x_3436.y, x_3437.z, x_3437.w);
    let x_3444 : vec4<f32> = u_xlat7;
    let x_3447 : f32 = x_158.x_GlobalMipBias.x;
    let x_3448 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3444.x, x_3444.y), x_3447);
    u_xlat7 = x_3448;
    let x_3451 : f32 = x_3386.x_MainLightCookieTextureFormat;
    let x_3453 : f32 = x_3386.x_MainLightCookieTextureFormat;
    let x_3455 : f32 = x_3386.x_MainLightCookieTextureFormat;
    let x_3457 : f32 = x_3386.x_MainLightCookieTextureFormat;
    let x_3458 : vec4<f32> = vec4<f32>(x_3451, x_3453, x_3455, x_3457);
    let x_3465 : vec4<bool> = (vec4<f32>(x_3458.x, x_3458.y, x_3458.z, x_3458.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3465.x, x_3465.y);
    let x_3468 : bool = u_xlatb8.y;
    if (x_3468) {
      let x_3473 : f32 = u_xlat7.w;
      x_3469 = x_3473;
    } else {
      let x_3476 : f32 = u_xlat7.x;
      x_3469 = x_3476;
    }
    let x_3477 : f32 = x_3469;
    u_xlat2.x = x_3477;
    let x_3480 : bool = u_xlatb8.x;
    if (x_3480) {
      let x_3484 : vec4<f32> = u_xlat7;
      x_3481 = vec3<f32>(x_3484.x, x_3484.y, x_3484.z);
    } else {
      let x_3487 : vec3<f32> = u_xlat2;
      x_3481 = vec3<f32>(x_3487.x, x_3487.x, x_3487.x);
    }
    let x_3489 : vec3<f32> = x_3481;
    let x_3490 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3489.x, x_3489.y, x_3489.z, x_3490.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3496 : vec4<f32> = u_xlat7;
  let x_3499 : vec4<f32> = x_158.x_MainLightColor;
  let x_3501 : vec3<f32> = (vec3<f32>(x_3496.x, x_3496.y, x_3496.z) * vec3<f32>(x_3499.x, x_3499.y, x_3499.z));
  let x_3502 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3501.x, x_3501.y, x_3501.z, x_3502.w);
  let x_3504 : f32 = u_xlat48;
  let x_3506 : vec4<f32> = u_xlat7;
  let x_3508 : vec3<f32> = (vec3<f32>(x_3504, x_3504, x_3504) * vec3<f32>(x_3506.x, x_3506.y, x_3506.z));
  let x_3509 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3508.x, x_3508.y, x_3508.z, x_3509.w);
  let x_3511 : vec3<f32> = u_xlat5;
  let x_3513 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(x_3511), vec3<f32>(x_3513.x, x_3513.y, x_3513.z));
  let x_3518 : f32 = u_xlat2.x;
  let x_3520 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3518 + x_3520);
  let x_3523 : vec4<f32> = u_xlat3;
  let x_3525 : vec3<f32> = u_xlat2;
  let x_3529 : vec3<f32> = u_xlat5;
  let x_3531 : vec3<f32> = ((vec3<f32>(x_3523.x, x_3523.y, x_3523.z) * -(vec3<f32>(x_3525.x, x_3525.x, x_3525.x))) + -(x_3529));
  let x_3532 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3531.x, x_3531.y, x_3531.z, x_3532.w);
  let x_3534 : vec4<f32> = u_xlat3;
  let x_3536 : vec3<f32> = u_xlat5;
  u_xlat2.x = dot(vec3<f32>(x_3534.x, x_3534.y, x_3534.z), x_3536);
  let x_3540 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3540, 0.0f, 1.0f);
  let x_3544 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3544) + 1.0f);
  let x_3549 : f32 = u_xlat2.x;
  let x_3551 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3549 * x_3551);
  let x_3555 : f32 = u_xlat2.x;
  let x_3557 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3555 * x_3557);
  let x_3561 : f32 = u_xlat46.x;
  u_xlat71 = ((-(x_3561) * 0.699999988f) + 1.700000048f);
  let x_3568 : f32 = u_xlat46.x;
  let x_3569 : f32 = u_xlat71;
  u_xlat46.x = (x_3568 * x_3569);
  let x_3573 : f32 = u_xlat46.x;
  u_xlat46.x = (x_3573 * 6.0f);
  let x_3585 : vec4<f32> = u_xlat8;
  let x_3588 : f32 = u_xlat46.x;
  let x_3589 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3585.x, x_3585.y, x_3585.z), x_3588);
  u_xlat8 = x_3589;
  let x_3591 : f32 = u_xlat8.w;
  u_xlat46.x = (x_3591 + -1.0f);
  let x_3595 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3597 : f32 = u_xlat46.x;
  u_xlat46.x = ((x_3595 * x_3597) + 1.0f);
  let x_3602 : f32 = u_xlat46.x;
  u_xlat46.x = max(x_3602, 0.0f);
  let x_3606 : f32 = u_xlat46.x;
  u_xlat46.x = log2(x_3606);
  let x_3610 : f32 = u_xlat46.x;
  let x_3612 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat46.x = (x_3610 * x_3612);
  let x_3616 : f32 = u_xlat46.x;
  u_xlat46.x = exp2(x_3616);
  let x_3620 : f32 = u_xlat46.x;
  let x_3622 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat46.x = (x_3620 * x_3622);
  let x_3625 : vec4<f32> = u_xlat8;
  let x_3627 : vec2<f32> = u_xlat46;
  let x_3629 : vec3<f32> = (vec3<f32>(x_3625.x, x_3625.y, x_3625.z) * vec3<f32>(x_3627.x, x_3627.x, x_3627.x));
  let x_3630 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3629.x, x_3629.y, x_3629.z, x_3630.w);
  let x_3632 : f32 = u_xlat68;
  let x_3634 : f32 = u_xlat68;
  u_xlat46 = ((vec2<f32>(x_3632, x_3632) * vec2<f32>(x_3634, x_3634)) + vec2<f32>(-1.0f, 1.0f));
  let x_3640 : f32 = u_xlat46.y;
  u_xlat68 = (1.0f / x_3640);
  let x_3643 : f32 = u_xlat2.x;
  let x_3645 : f32 = u_xlat26.x;
  u_xlat2.x = ((x_3643 * x_3645) + 0.039999999f);
  let x_3651 : f32 = u_xlat2.x;
  let x_3652 : f32 = u_xlat68;
  u_xlat2.x = (x_3651 * x_3652);
  let x_3655 : vec3<f32> = u_xlat2;
  let x_3657 : vec4<f32> = u_xlat8;
  let x_3659 : vec3<f32> = (vec3<f32>(x_3655.x, x_3655.x, x_3655.x) * vec3<f32>(x_3657.x, x_3657.y, x_3657.z));
  let x_3660 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3659.x, x_3659.y, x_3659.z, x_3660.w);
  let x_3662 : vec3<f32> = u_xlat22;
  let x_3663 : vec4<f32> = u_xlat6;
  let x_3666 : vec4<f32> = u_xlat8;
  u_xlat22 = ((x_3662 * vec3<f32>(x_3663.x, x_3663.y, x_3663.z)) + vec3<f32>(x_3666.x, x_3666.y, x_3666.z));
  let x_3670 : f32 = u_xlat0.x;
  let x_3672 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3670 * x_3672);
  let x_3675 : vec4<f32> = u_xlat3;
  let x_3678 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_3675.x, x_3675.y, x_3675.z), vec3<f32>(x_3678.x, x_3678.y, x_3678.z));
  let x_3683 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3683, 0.0f, 1.0f);
  let x_3687 : f32 = u_xlat0.x;
  let x_3689 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3687 * x_3689);
  let x_3692 : vec3<f32> = u_xlat0;
  let x_3694 : vec4<f32> = u_xlat7;
  let x_3696 : vec3<f32> = (vec3<f32>(x_3692.x, x_3692.x, x_3692.x) * vec3<f32>(x_3694.x, x_3694.y, x_3694.z));
  let x_3697 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3696.x, x_3696.y, x_3696.z, x_3697.w);
  let x_3699 : vec3<f32> = u_xlat5;
  let x_3701 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3703 : vec3<f32> = (x_3699 + vec3<f32>(x_3701.x, x_3701.y, x_3701.z));
  let x_3704 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3703.x, x_3703.y, x_3703.z, x_3704.w);
  let x_3706 : vec4<f32> = u_xlat8;
  let x_3708 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3706.x, x_3706.y, x_3706.z), vec3<f32>(x_3708.x, x_3708.y, x_3708.z));
  let x_3713 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3713, 1.17549435e-37f);
  let x_3717 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3717);
  let x_3720 : vec3<f32> = u_xlat0;
  let x_3722 : vec4<f32> = u_xlat8;
  let x_3724 : vec3<f32> = (vec3<f32>(x_3720.x, x_3720.x, x_3720.x) * vec3<f32>(x_3722.x, x_3722.y, x_3722.z));
  let x_3725 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3724.x, x_3724.y, x_3724.z, x_3725.w);
  let x_3727 : vec4<f32> = u_xlat3;
  let x_3729 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3727.x, x_3727.y, x_3727.z), vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
  let x_3734 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3734, 0.0f, 1.0f);
  let x_3738 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3740 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3738.x, x_3738.y, x_3738.z), vec3<f32>(x_3740.x, x_3740.y, x_3740.z));
  let x_3745 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3745, 0.0f, 1.0f);
  let x_3749 : f32 = u_xlat0.x;
  let x_3751 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3749 * x_3751);
  let x_3755 : f32 = u_xlat0.x;
  let x_3757 : f32 = u_xlat46.x;
  u_xlat0.x = ((x_3755 * x_3757) + 1.000010014f);
  let x_3763 : f32 = u_xlat2.x;
  let x_3765 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3763 * x_3765);
  let x_3769 : f32 = u_xlat0.x;
  let x_3771 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3769 * x_3771);
  let x_3775 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3775, 0.100000001f);
  let x_3780 : f32 = u_xlat0.x;
  let x_3782 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3780 * x_3782);
  let x_3785 : f32 = u_xlat70;
  let x_3787 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3785 * x_3787);
  let x_3790 : f32 = u_xlat69;
  let x_3792 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3790 / x_3792);
  let x_3795 : vec3<f32> = u_xlat0;
  let x_3799 : vec4<f32> = u_xlat6;
  let x_3801 : vec3<f32> = ((vec3<f32>(x_3795.x, x_3795.x, x_3795.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3799.x, x_3799.y, x_3799.z));
  let x_3802 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3801.x, x_3801.y, x_3801.z, x_3802.w);
  let x_3804 : vec4<f32> = u_xlat7;
  let x_3806 : vec4<f32> = u_xlat8;
  let x_3808 : vec3<f32> = (vec3<f32>(x_3804.x, x_3804.y, x_3804.z) * vec3<f32>(x_3806.x, x_3806.y, x_3806.z));
  let x_3809 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3808.x, x_3808.y, x_3808.z, x_3809.w);
  let x_3812 : f32 = x_158.x_AdditionalLightsCount.x;
  let x_3814 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3812, x_3814);
  let x_3819 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3819));
  let x_3823 : f32 = x_3386.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3825 : f32 = x_3386.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3827 : f32 = x_3386.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3829 : f32 = x_3386.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3830 : vec4<f32> = vec4<f32>(x_3823, x_3825, x_3827, x_3829);
  let x_3837 : vec4<bool> = (vec4<f32>(x_3830.x, x_3830.y, x_3830.z, x_3830.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3838 : vec2<bool> = vec2<bool>(x_3837.x, x_3837.w);
  let x_3839 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3838.x, x_3839.y, x_3839.z, x_3838.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3850 : u32 = u_xlatu_loop_1;
    let x_3851 : u32 = u_xlatu0;
    if ((x_3850 < x_3851)) {
    } else {
      break;
    }
    let x_3854 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3854 >> 2u);
    let x_3857 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3857 & 3u));
    let x_3860 : u32 = u_xlatu71;
    let x_3863 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3860)];
    let x_3873 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3878 : vec4<u32> = indexable[x_3873];
    u_xlat71 = dot(x_3863, bitcast<vec4<f32>>(x_3878));
    let x_3881 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3881));
    let x_3884 : vec3<f32> = vs_INTERP0;
    let x_3896 : u32 = u_xlatu71;
    let x_3899 : vec4<f32> = x_3895.x_AdditionalLightsPosition[bitcast<i32>(x_3896)];
    let x_3902 : u32 = u_xlatu71;
    let x_3905 : vec4<f32> = x_3895.x_AdditionalLightsPosition[bitcast<i32>(x_3902)];
    let x_3907 : vec3<f32> = ((-(x_3884) * vec3<f32>(x_3899.w, x_3899.w, x_3899.w)) + vec3<f32>(x_3905.x, x_3905.y, x_3905.z));
    let x_3908 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3907.x, x_3907.y, x_3907.z, x_3908.w);
    let x_3910 : vec4<f32> = u_xlat9;
    let x_3912 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3910.x, x_3910.y, x_3910.z), vec3<f32>(x_3912.x, x_3912.y, x_3912.z));
    let x_3915 : f32 = u_xlat72;
    u_xlat72 = max(x_3915, 6.10351562e-05f);
    let x_3919 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3919);
    let x_3921 : f32 = u_xlat73;
    let x_3923 : vec4<f32> = u_xlat9;
    let x_3925 : vec3<f32> = (vec3<f32>(x_3921, x_3921, x_3921) * vec3<f32>(x_3923.x, x_3923.y, x_3923.z));
    let x_3926 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3925.x, x_3925.y, x_3925.z, x_3926.w);
    let x_3929 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3929);
    let x_3931 : f32 = u_xlat72;
    let x_3932 : u32 = u_xlatu71;
    let x_3935 : f32 = x_3895.x_AdditionalLightsAttenuation[bitcast<i32>(x_3932)].x;
    u_xlat72 = (x_3931 * x_3935);
    let x_3937 : f32 = u_xlat72;
    let x_3939 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3937) * x_3939) + 1.0f);
    let x_3942 : f32 = u_xlat72;
    u_xlat72 = max(x_3942, 0.0f);
    let x_3944 : f32 = u_xlat72;
    let x_3945 : f32 = u_xlat72;
    u_xlat72 = (x_3944 * x_3945);
    let x_3947 : f32 = u_xlat72;
    let x_3948 : f32 = u_xlat74;
    u_xlat72 = (x_3947 * x_3948);
    let x_3950 : u32 = u_xlatu71;
    let x_3953 : vec4<f32> = x_3895.x_AdditionalLightsSpotDir[bitcast<i32>(x_3950)];
    let x_3955 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3953.x, x_3953.y, x_3953.z), vec3<f32>(x_3955.x, x_3955.y, x_3955.z));
    let x_3958 : f32 = u_xlat74;
    let x_3959 : u32 = u_xlatu71;
    let x_3962 : f32 = x_3895.x_AdditionalLightsAttenuation[bitcast<i32>(x_3959)].z;
    let x_3964 : u32 = u_xlatu71;
    let x_3967 : f32 = x_3895.x_AdditionalLightsAttenuation[bitcast<i32>(x_3964)].w;
    u_xlat74 = ((x_3958 * x_3962) + x_3967);
    let x_3969 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3969, 0.0f, 1.0f);
    let x_3971 : f32 = u_xlat74;
    let x_3972 : f32 = u_xlat74;
    u_xlat74 = (x_3971 * x_3972);
    let x_3974 : f32 = u_xlat72;
    let x_3975 : f32 = u_xlat74;
    u_xlat72 = (x_3974 * x_3975);
    let x_3978 : u32 = u_xlatu71;
    u_xlatu74 = (x_3978 >> 5u);
    let x_3981 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3981) & 31i)));
    let x_3987 : i32 = u_xlati75;
    let x_3989 : u32 = u_xlatu74;
    let x_3992 : f32 = x_3386.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3989)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3987) & bitcast<u32>(x_3992)));
    let x_3996 : i32 = u_xlati74;
    if ((x_3996 != 0i)) {
      let x_4006 : u32 = u_xlatu71;
      let x_4009 : f32 = x_4005.x_AdditionalLightsLightTypes[bitcast<i32>(x_4006)].el;
      u_xlati74 = i32(x_4009);
      let x_4011 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4011 != 0i));
      let x_4015 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_4015) << bitcast<u32>(2i));
      let x_4018 : i32 = u_xlati75;
      if ((x_4018 != 0i)) {
        let x_4022 : vec3<f32> = vs_INTERP0;
        let x_4024 : i32 = u_xlati76;
        let x_4027 : i32 = u_xlati76;
        let x_4031 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4024 + 1i) / 4i)][((x_4027 + 1i) % 4i)];
        let x_4033 : vec3<f32> = (vec3<f32>(x_4022.y, x_4022.y, x_4022.y) * vec3<f32>(x_4031.x, x_4031.y, x_4031.w));
        let x_4034 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4033.x, x_4033.y, x_4033.z, x_4034.w);
        let x_4036 : i32 = u_xlati76;
        let x_4038 : i32 = u_xlati76;
        let x_4041 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[(x_4036 / 4i)][(x_4038 % 4i)];
        let x_4043 : vec3<f32> = vs_INTERP0;
        let x_4046 : vec4<f32> = u_xlat11;
        let x_4048 : vec3<f32> = ((vec3<f32>(x_4041.x, x_4041.y, x_4041.w) * vec3<f32>(x_4043.x, x_4043.x, x_4043.x)) + vec3<f32>(x_4046.x, x_4046.y, x_4046.z));
        let x_4049 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4048.x, x_4048.y, x_4048.z, x_4049.w);
        let x_4051 : i32 = u_xlati76;
        let x_4054 : i32 = u_xlati76;
        let x_4058 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4051 + 2i) / 4i)][((x_4054 + 2i) % 4i)];
        let x_4060 : vec3<f32> = vs_INTERP0;
        let x_4063 : vec4<f32> = u_xlat11;
        let x_4065 : vec3<f32> = ((vec3<f32>(x_4058.x, x_4058.y, x_4058.w) * vec3<f32>(x_4060.z, x_4060.z, x_4060.z)) + vec3<f32>(x_4063.x, x_4063.y, x_4063.z));
        let x_4066 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4065.x, x_4065.y, x_4065.z, x_4066.w);
        let x_4068 : vec4<f32> = u_xlat11;
        let x_4070 : i32 = u_xlati76;
        let x_4073 : i32 = u_xlati76;
        let x_4077 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4070 + 3i) / 4i)][((x_4073 + 3i) % 4i)];
        let x_4079 : vec3<f32> = (vec3<f32>(x_4068.x, x_4068.y, x_4068.z) + vec3<f32>(x_4077.x, x_4077.y, x_4077.w));
        let x_4080 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4079.x, x_4079.y, x_4079.z, x_4080.w);
        let x_4082 : vec4<f32> = u_xlat11;
        let x_4084 : vec4<f32> = u_xlat11;
        let x_4086 : vec2<f32> = (vec2<f32>(x_4082.x, x_4082.y) / vec2<f32>(x_4084.z, x_4084.z));
        let x_4087 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4086.x, x_4086.y, x_4087.z, x_4087.w);
        let x_4089 : vec4<f32> = u_xlat11;
        let x_4092 : vec2<f32> = ((vec2<f32>(x_4089.x, x_4089.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4093 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4092.x, x_4092.y, x_4093.z, x_4093.w);
        let x_4095 : vec4<f32> = u_xlat11;
        let x_4099 : vec2<f32> = clamp(vec2<f32>(x_4095.x, x_4095.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4100 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4099.x, x_4099.y, x_4100.z, x_4100.w);
        let x_4102 : u32 = u_xlatu71;
        let x_4105 : vec4<f32> = x_4005.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4102)];
        let x_4107 : vec4<f32> = u_xlat11;
        let x_4110 : u32 = u_xlatu71;
        let x_4113 : vec4<f32> = x_4005.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4110)];
        let x_4115 : vec2<f32> = ((vec2<f32>(x_4105.x, x_4105.y) * vec2<f32>(x_4107.x, x_4107.y)) + vec2<f32>(x_4113.z, x_4113.w));
        let x_4116 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4115.x, x_4115.y, x_4116.z, x_4116.w);
      } else {
        let x_4120 : i32 = u_xlati74;
        u_xlatb74 = (x_4120 == 1i);
        let x_4122 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4122);
        let x_4124 : i32 = u_xlati74;
        if ((x_4124 != 0i)) {
          let x_4128 : vec3<f32> = vs_INTERP0;
          let x_4130 : i32 = u_xlati76;
          let x_4133 : i32 = u_xlati76;
          let x_4137 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4130 + 1i) / 4i)][((x_4133 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4128.y, x_4128.y) * vec2<f32>(x_4137.x, x_4137.y));
          let x_4140 : i32 = u_xlati76;
          let x_4142 : i32 = u_xlati76;
          let x_4145 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[(x_4140 / 4i)][(x_4142 % 4i)];
          let x_4147 : vec3<f32> = vs_INTERP0;
          let x_4150 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4145.x, x_4145.y) * vec2<f32>(x_4147.x, x_4147.x)) + x_4150);
          let x_4152 : i32 = u_xlati76;
          let x_4155 : i32 = u_xlati76;
          let x_4159 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4152 + 2i) / 4i)][((x_4155 + 2i) % 4i)];
          let x_4161 : vec3<f32> = vs_INTERP0;
          let x_4164 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4159.x, x_4159.y) * vec2<f32>(x_4161.z, x_4161.z)) + x_4164);
          let x_4166 : vec2<f32> = u_xlat55;
          let x_4167 : i32 = u_xlati76;
          let x_4170 : i32 = u_xlati76;
          let x_4174 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4167 + 3i) / 4i)][((x_4170 + 3i) % 4i)];
          u_xlat55 = (x_4166 + vec2<f32>(x_4174.x, x_4174.y));
          let x_4177 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4177 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4180 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4180);
          let x_4182 : u32 = u_xlatu71;
          let x_4185 : vec4<f32> = x_4005.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4182)];
          let x_4187 : vec2<f32> = u_xlat55;
          let x_4189 : u32 = u_xlatu71;
          let x_4192 : vec4<f32> = x_4005.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4189)];
          let x_4194 : vec2<f32> = ((vec2<f32>(x_4185.x, x_4185.y) * x_4187) + vec2<f32>(x_4192.z, x_4192.w));
          let x_4195 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4194.x, x_4194.y, x_4195.z, x_4195.w);
        } else {
          let x_4198 : vec3<f32> = vs_INTERP0;
          let x_4200 : i32 = u_xlati76;
          let x_4203 : i32 = u_xlati76;
          let x_4207 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4200 + 1i) / 4i)][((x_4203 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4198.y, x_4198.y, x_4198.y, x_4198.y) * x_4207);
          let x_4209 : i32 = u_xlati76;
          let x_4211 : i32 = u_xlati76;
          let x_4214 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[(x_4209 / 4i)][(x_4211 % 4i)];
          let x_4215 : vec3<f32> = vs_INTERP0;
          let x_4218 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4214 * vec4<f32>(x_4215.x, x_4215.x, x_4215.x, x_4215.x)) + x_4218);
          let x_4220 : i32 = u_xlati76;
          let x_4223 : i32 = u_xlati76;
          let x_4227 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4220 + 2i) / 4i)][((x_4223 + 2i) % 4i)];
          let x_4228 : vec3<f32> = vs_INTERP0;
          let x_4231 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4227 * vec4<f32>(x_4228.z, x_4228.z, x_4228.z, x_4228.z)) + x_4231);
          let x_4233 : vec4<f32> = u_xlat12;
          let x_4234 : i32 = u_xlati76;
          let x_4237 : i32 = u_xlati76;
          let x_4241 : vec4<f32> = x_4005.x_AdditionalLightsWorldToLights[((x_4234 + 3i) / 4i)][((x_4237 + 3i) % 4i)];
          u_xlat12 = (x_4233 + x_4241);
          let x_4243 : vec4<f32> = u_xlat12;
          let x_4245 : vec4<f32> = u_xlat12;
          let x_4247 : vec3<f32> = (vec3<f32>(x_4243.x, x_4243.y, x_4243.z) / vec3<f32>(x_4245.w, x_4245.w, x_4245.w));
          let x_4248 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4247.x, x_4247.y, x_4247.z, x_4248.w);
          let x_4250 : vec4<f32> = u_xlat12;
          let x_4252 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4250.x, x_4250.y, x_4250.z), vec3<f32>(x_4252.x, x_4252.y, x_4252.z));
          let x_4255 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4255);
          let x_4257 : f32 = u_xlat74;
          let x_4259 : vec4<f32> = u_xlat12;
          let x_4261 : vec3<f32> = (vec3<f32>(x_4257, x_4257, x_4257) * vec3<f32>(x_4259.x, x_4259.y, x_4259.z));
          let x_4262 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4261.x, x_4261.y, x_4261.z, x_4262.w);
          let x_4264 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4264.x, x_4264.y, x_4264.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4269 : f32 = u_xlat74;
          u_xlat74 = max(x_4269, 0.000001f);
          let x_4272 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4272);
          let x_4274 : f32 = u_xlat74;
          let x_4276 : vec4<f32> = u_xlat12;
          let x_4278 : vec3<f32> = (vec3<f32>(x_4274, x_4274, x_4274) * vec3<f32>(x_4276.z, x_4276.x, x_4276.y));
          let x_4279 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4278.x, x_4278.y, x_4278.z, x_4279.w);
          let x_4282 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4282);
          let x_4286 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4286, 0.0f, 1.0f);
          let x_4290 : vec4<f32> = u_xlat13;
          let x_4293 : vec4<bool> = (vec4<f32>(x_4290.y, x_4290.z, x_4290.y, x_4290.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4293.x, x_4293.y);
          let x_4296 : bool = u_xlatb55.x;
          if (x_4296) {
            let x_4301 : f32 = u_xlat13.x;
            x_4297 = x_4301;
          } else {
            let x_4304 : f32 = u_xlat13.x;
            x_4297 = -(x_4304);
          }
          let x_4306 : f32 = x_4297;
          u_xlat55.x = x_4306;
          let x_4309 : bool = u_xlatb55.y;
          if (x_4309) {
            let x_4314 : f32 = u_xlat13.x;
            x_4310 = x_4314;
          } else {
            let x_4317 : f32 = u_xlat13.x;
            x_4310 = -(x_4317);
          }
          let x_4319 : f32 = x_4310;
          u_xlat55.y = x_4319;
          let x_4321 : vec4<f32> = u_xlat12;
          let x_4323 : f32 = u_xlat74;
          let x_4326 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4321.x, x_4321.y) * vec2<f32>(x_4323, x_4323)) + x_4326);
          let x_4328 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4328 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4331 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4331, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4335 : u32 = u_xlatu71;
          let x_4338 : vec4<f32> = x_4005.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4335)];
          let x_4340 : vec2<f32> = u_xlat55;
          let x_4342 : u32 = u_xlatu71;
          let x_4345 : vec4<f32> = x_4005.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4342)];
          let x_4347 : vec2<f32> = ((vec2<f32>(x_4338.x, x_4338.y) * x_4340) + vec2<f32>(x_4345.z, x_4345.w));
          let x_4348 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4347.x, x_4347.y, x_4348.z, x_4348.w);
        }
      }
      let x_4355 : vec4<f32> = u_xlat11;
      let x_4358 : f32 = x_158.x_GlobalMipBias.x;
      let x_4359 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4355.x, x_4355.y), x_4358);
      u_xlat11 = x_4359;
      let x_4361 : bool = u_xlatb2.w;
      if (x_4361) {
        let x_4366 : f32 = u_xlat11.w;
        x_4362 = x_4366;
      } else {
        let x_4369 : f32 = u_xlat11.x;
        x_4362 = x_4369;
      }
      let x_4370 : f32 = x_4362;
      u_xlat74 = x_4370;
      let x_4372 : bool = u_xlatb2.x;
      if (x_4372) {
        let x_4376 : vec4<f32> = u_xlat11;
        x_4373 = vec3<f32>(x_4376.x, x_4376.y, x_4376.z);
      } else {
        let x_4379 : f32 = u_xlat74;
        x_4373 = vec3<f32>(x_4379, x_4379, x_4379);
      }
      let x_4381 : vec3<f32> = x_4373;
      let x_4382 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4381.x, x_4381.y, x_4381.z, x_4382.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4388 : vec4<f32> = u_xlat11;
    let x_4390 : u32 = u_xlatu71;
    let x_4393 : vec4<f32> = x_3895.x_AdditionalLightsColor[bitcast<i32>(x_4390)];
    let x_4395 : vec3<f32> = (vec3<f32>(x_4388.x, x_4388.y, x_4388.z) * vec3<f32>(x_4393.x, x_4393.y, x_4393.z));
    let x_4396 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4395.x, x_4395.y, x_4395.z, x_4396.w);
    let x_4398 : f32 = u_xlat48;
    let x_4400 : vec4<f32> = u_xlat11;
    let x_4402 : vec3<f32> = (vec3<f32>(x_4398, x_4398, x_4398) * vec3<f32>(x_4400.x, x_4400.y, x_4400.z));
    let x_4403 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4402.x, x_4402.y, x_4402.z, x_4403.w);
    let x_4405 : vec4<f32> = u_xlat3;
    let x_4407 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_4405.x, x_4405.y, x_4405.z), vec3<f32>(x_4407.x, x_4407.y, x_4407.z));
    let x_4410 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4410, 0.0f, 1.0f);
    let x_4412 : f32 = u_xlat71;
    let x_4413 : f32 = u_xlat72;
    u_xlat71 = (x_4412 * x_4413);
    let x_4415 : f32 = u_xlat71;
    let x_4417 : vec4<f32> = u_xlat11;
    let x_4419 : vec3<f32> = (vec3<f32>(x_4415, x_4415, x_4415) * vec3<f32>(x_4417.x, x_4417.y, x_4417.z));
    let x_4420 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4419.x, x_4419.y, x_4419.z, x_4420.w);
    let x_4422 : vec4<f32> = u_xlat9;
    let x_4424 : f32 = u_xlat73;
    let x_4427 : vec3<f32> = u_xlat5;
    let x_4428 : vec3<f32> = ((vec3<f32>(x_4422.x, x_4422.y, x_4422.z) * vec3<f32>(x_4424, x_4424, x_4424)) + x_4427);
    let x_4429 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4428.x, x_4428.y, x_4428.z, x_4429.w);
    let x_4431 : vec4<f32> = u_xlat9;
    let x_4433 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4431.x, x_4431.y, x_4431.z), vec3<f32>(x_4433.x, x_4433.y, x_4433.z));
    let x_4436 : f32 = u_xlat71;
    u_xlat71 = max(x_4436, 1.17549435e-37f);
    let x_4438 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4438);
    let x_4440 : f32 = u_xlat71;
    let x_4442 : vec4<f32> = u_xlat9;
    let x_4444 : vec3<f32> = (vec3<f32>(x_4440, x_4440, x_4440) * vec3<f32>(x_4442.x, x_4442.y, x_4442.z));
    let x_4445 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4444.x, x_4444.y, x_4444.z, x_4445.w);
    let x_4447 : vec4<f32> = u_xlat3;
    let x_4449 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4447.x, x_4447.y, x_4447.z), vec3<f32>(x_4449.x, x_4449.y, x_4449.z));
    let x_4452 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4452, 0.0f, 1.0f);
    let x_4454 : vec4<f32> = u_xlat10;
    let x_4456 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4454.x, x_4454.y, x_4454.z), vec3<f32>(x_4456.x, x_4456.y, x_4456.z));
    let x_4459 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4459, 0.0f, 1.0f);
    let x_4461 : f32 = u_xlat71;
    let x_4462 : f32 = u_xlat71;
    u_xlat71 = (x_4461 * x_4462);
    let x_4464 : f32 = u_xlat71;
    let x_4466 : f32 = u_xlat46.x;
    u_xlat71 = ((x_4464 * x_4466) + 1.000010014f);
    let x_4469 : f32 = u_xlat72;
    let x_4470 : f32 = u_xlat72;
    u_xlat72 = (x_4469 * x_4470);
    let x_4472 : f32 = u_xlat71;
    let x_4473 : f32 = u_xlat71;
    u_xlat71 = (x_4472 * x_4473);
    let x_4475 : f32 = u_xlat72;
    u_xlat72 = max(x_4475, 0.100000001f);
    let x_4477 : f32 = u_xlat71;
    let x_4478 : f32 = u_xlat72;
    u_xlat71 = (x_4477 * x_4478);
    let x_4480 : f32 = u_xlat70;
    let x_4481 : f32 = u_xlat71;
    u_xlat71 = (x_4480 * x_4481);
    let x_4483 : f32 = u_xlat69;
    let x_4484 : f32 = u_xlat71;
    u_xlat71 = (x_4483 / x_4484);
    let x_4486 : f32 = u_xlat71;
    let x_4489 : vec4<f32> = u_xlat6;
    let x_4491 : vec3<f32> = ((vec3<f32>(x_4486, x_4486, x_4486) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_4489.x, x_4489.y, x_4489.z));
    let x_4492 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4491.x, x_4491.y, x_4491.z, x_4492.w);
    let x_4494 : vec4<f32> = u_xlat9;
    let x_4496 : vec4<f32> = u_xlat11;
    let x_4499 : vec4<f32> = u_xlat8;
    let x_4501 : vec3<f32> = ((vec3<f32>(x_4494.x, x_4494.y, x_4494.z) * vec3<f32>(x_4496.x, x_4496.y, x_4496.z)) + vec3<f32>(x_4499.x, x_4499.y, x_4499.z));
    let x_4502 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4501.x, x_4501.y, x_4501.z, x_4502.w);

    continuing {
      let x_4504 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4504 + bitcast<u32>(1i));
    }
  }
  let x_4506 : vec3<f32> = u_xlat22;
  let x_4507 : vec3<f32> = u_xlat4;
  let x_4510 : vec4<f32> = u_xlat7;
  u_xlat0 = ((x_4506 * vec3<f32>(x_4507.x, x_4507.x, x_4507.x)) + vec3<f32>(x_4510.x, x_4510.y, x_4510.z));
  let x_4513 : vec4<f32> = u_xlat8;
  let x_4515 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4513.x, x_4513.y, x_4513.z) + x_4515);
  let x_4519 : vec4<f32> = vs_INTERP4;
  let x_4521 : vec3<f32> = u_xlat1;
  let x_4523 : vec3<f32> = u_xlat0;
  let x_4524 : vec3<f32> = ((vec3<f32>(x_4519.w, x_4519.w, x_4519.w) * x_4521) + x_4523);
  let x_4525 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4524.x, x_4524.y, x_4524.z, x_4525.w);
  let x_4527 : bool = u_xlatb24;
  let x_4528 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4528, x_4527);
  let x_4534 : u32 = x_158.x_RenderingLayerMaxInt;
  let x_4536 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4534 & bitcast<u32>(x_4536));
  let x_4539 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4539);
  let x_4544 : f32 = u_xlat0.x;
  let x_4546 : f32 = x_158.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4544 * x_4546);
  let x_4550 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4550, 0.0f, 1.0f);
  let x_4553 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4553.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

