struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  unity_MatrixInvVP : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

@group(0) @binding(1) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_27 : PGlobals;

@group(1) @binding(1) var<uniform> x_91 : MainLightShadows;

@group(0) @binding(0) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(2) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlatb1 : vec4<bool>;
  var u_xlat45 : f32;
  var u_xlatu45 : u32;
  var u_xlati45 : i32;
  var u_xlatb45 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat33 : vec2<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat16 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat17 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat39 : vec2<f32>;
  var u_xlat34 : vec2<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat48 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat46 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb15 : bool;
  var u_xlatb30 : bool;
  var x_1580 : vec4<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec2<f32> = vs_TEXCOORD0;
  let x_34 : f32 = x_27.x_GlobalMipBias.x;
  let x_35 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_23, x_34);
  u_xlat0.x = x_35.x;
  let x_41 : vec2<f32> = vs_TEXCOORD0;
  u_xlat15 = ((x_41 * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_49 : vec2<f32> = u_xlat15;
  let x_55 : vec4<f32> = x_27.unity_MatrixInvVP[1i];
  u_xlat1 = (-(vec4<f32>(x_49.y, x_49.y, x_49.y, x_49.y)) * x_55);
  let x_58 : vec4<f32> = x_27.unity_MatrixInvVP[0i];
  let x_59 : vec2<f32> = u_xlat15;
  let x_62 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_58 * vec4<f32>(x_59.x, x_59.x, x_59.x, x_59.x)) + x_62);
  let x_66 : vec4<f32> = x_27.unity_MatrixInvVP[2i];
  let x_67 : vec4<f32> = u_xlat0;
  let x_70 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_66 * vec4<f32>(x_67.x, x_67.x, x_67.x, x_67.x)) + x_70);
  let x_72 : vec4<f32> = u_xlat0;
  let x_75 : vec4<f32> = x_27.unity_MatrixInvVP[3i];
  u_xlat0 = (x_72 + x_75);
  let x_78 : vec4<f32> = u_xlat0;
  let x_80 : vec4<f32> = u_xlat0;
  let x_82 : vec3<f32> = (vec3<f32>(x_78.x, x_78.y, x_78.z) / vec3<f32>(x_80.w, x_80.w, x_80.w));
  let x_83 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_82.x, x_82.y, x_82.z, x_83.w);
  let x_85 : vec4<f32> = u_xlat0;
  let x_93 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres0;
  let x_96 : vec3<f32> = (vec3<f32>(x_85.x, x_85.y, x_85.z) + -(vec3<f32>(x_93.x, x_93.y, x_93.z)));
  let x_97 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_96.x, x_96.y, x_96.z, x_97.w);
  let x_100 : vec4<f32> = u_xlat0;
  let x_103 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres1;
  let x_106 : vec3<f32> = (vec3<f32>(x_100.x, x_100.y, x_100.z) + -(vec3<f32>(x_103.x, x_103.y, x_103.z)));
  let x_107 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_106.x, x_106.y, x_106.z, x_107.w);
  let x_110 : vec4<f32> = u_xlat0;
  let x_113 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres2;
  let x_116 : vec3<f32> = (vec3<f32>(x_110.x, x_110.y, x_110.z) + -(vec3<f32>(x_113.x, x_113.y, x_113.z)));
  let x_117 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_116.x, x_116.y, x_116.z, x_117.w);
  let x_120 : vec4<f32> = u_xlat0;
  let x_124 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres3;
  let x_127 : vec3<f32> = (vec3<f32>(x_120.x, x_120.y, x_120.z) + -(vec3<f32>(x_124.x, x_124.y, x_124.z)));
  let x_128 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_127.x, x_127.y, x_127.z, x_128.w);
  let x_130 : vec4<f32> = u_xlat1;
  let x_132 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_130.x, x_130.y, x_130.z), vec3<f32>(x_132.x, x_132.y, x_132.z));
  let x_136 : vec4<f32> = u_xlat2;
  let x_138 : vec4<f32> = u_xlat2;
  u_xlat1.y = dot(vec3<f32>(x_136.x, x_136.y, x_136.z), vec3<f32>(x_138.x, x_138.y, x_138.z));
  let x_143 : vec4<f32> = u_xlat3;
  let x_145 : vec4<f32> = u_xlat3;
  u_xlat1.z = dot(vec3<f32>(x_143.x, x_143.y, x_143.z), vec3<f32>(x_145.x, x_145.y, x_145.z));
  let x_150 : vec4<f32> = u_xlat4;
  let x_152 : vec4<f32> = u_xlat4;
  u_xlat1.w = dot(vec3<f32>(x_150.x, x_150.y, x_150.z), vec3<f32>(x_152.x, x_152.y, x_152.z));
  let x_161 : vec4<f32> = u_xlat1;
  let x_164 : vec4<f32> = x_91.x_CascadeShadowSplitSphereRadii;
  u_xlatb1 = (x_161 < x_164);
  let x_168 : bool = u_xlatb1.x;
  u_xlat2.x = select(0.0f, 1.0f, x_168);
  let x_174 : bool = u_xlatb1.y;
  u_xlat2.y = select(0.0f, 1.0f, x_174);
  let x_178 : bool = u_xlatb1.z;
  u_xlat2.z = select(0.0f, 1.0f, x_178);
  let x_182 : bool = u_xlatb1.w;
  u_xlat2.w = select(0.0f, 1.0f, x_182);
  let x_186 : bool = u_xlatb1.x;
  u_xlat1.x = select(-0.0f, -1.0f, x_186);
  let x_191 : bool = u_xlatb1.y;
  u_xlat1.y = select(-0.0f, -1.0f, x_191);
  let x_195 : bool = u_xlatb1.z;
  u_xlat1.z = select(-0.0f, -1.0f, x_195);
  let x_198 : vec4<f32> = u_xlat1;
  let x_200 : vec4<f32> = u_xlat2;
  let x_202 : vec3<f32> = (vec3<f32>(x_198.x, x_198.y, x_198.z) + vec3<f32>(x_200.y, x_200.z, x_200.w));
  let x_203 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_202.x, x_202.y, x_202.z, x_203.w);
  let x_205 : vec4<f32> = u_xlat1;
  let x_208 : vec3<f32> = max(vec3<f32>(x_205.x, x_205.y, x_205.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_209 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_209.x, x_208.x, x_208.y, x_208.z);
  let x_212 : vec4<f32> = u_xlat2;
  u_xlat45 = dot(x_212, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_217 : f32 = u_xlat45;
  u_xlat45 = (-(x_217) + 4.0f);
  let x_222 : f32 = u_xlat45;
  u_xlatu45 = u32(x_222);
  let x_226 : u32 = u_xlatu45;
  u_xlati45 = (bitcast<i32>(x_226) << bitcast<u32>(2i));
  let x_229 : vec4<f32> = u_xlat0;
  let x_231 : i32 = u_xlati45;
  let x_234 : i32 = u_xlati45;
  let x_238 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_231 + 1i) / 4i)][((x_234 + 1i) % 4i)];
  let x_240 : vec3<f32> = (vec3<f32>(x_229.y, x_229.y, x_229.y) * vec3<f32>(x_238.x, x_238.y, x_238.z));
  let x_241 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_240.x, x_240.y, x_240.z, x_241.w);
  let x_243 : i32 = u_xlati45;
  let x_245 : i32 = u_xlati45;
  let x_248 : vec4<f32> = x_91.x_MainLightWorldToShadow[(x_243 / 4i)][(x_245 % 4i)];
  let x_250 : vec4<f32> = u_xlat0;
  let x_253 : vec4<f32> = u_xlat1;
  let x_255 : vec3<f32> = ((vec3<f32>(x_248.x, x_248.y, x_248.z) * vec3<f32>(x_250.x, x_250.x, x_250.x)) + vec3<f32>(x_253.x, x_253.y, x_253.z));
  let x_256 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_255.x, x_255.y, x_255.z, x_256.w);
  let x_258 : i32 = u_xlati45;
  let x_261 : i32 = u_xlati45;
  let x_265 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_258 + 2i) / 4i)][((x_261 + 2i) % 4i)];
  let x_267 : vec4<f32> = u_xlat0;
  let x_270 : vec4<f32> = u_xlat1;
  let x_272 : vec3<f32> = ((vec3<f32>(x_265.x, x_265.y, x_265.z) * vec3<f32>(x_267.z, x_267.z, x_267.z)) + vec3<f32>(x_270.x, x_270.y, x_270.z));
  let x_273 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_272.x, x_272.y, x_272.z, x_273.w);
  let x_275 : vec4<f32> = u_xlat0;
  let x_277 : i32 = u_xlati45;
  let x_280 : i32 = u_xlati45;
  let x_284 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_277 + 3i) / 4i)][((x_280 + 3i) % 4i)];
  let x_286 : vec3<f32> = (vec3<f32>(x_275.x, x_275.y, x_275.z) + vec3<f32>(x_284.x, x_284.y, x_284.z));
  let x_287 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_286.x, x_286.y, x_286.z, x_287.w);
  let x_292 : f32 = x_91.x_MainLightShadowParams.y;
  u_xlatb45 = (0.0f < x_292);
  let x_294 : bool = u_xlatb45;
  if (x_294) {
    let x_298 : f32 = x_91.x_MainLightShadowParams.y;
    u_xlatb45 = (x_298 == 1.0f);
    let x_300 : bool = u_xlatb45;
    if (x_300) {
      let x_303 : vec4<f32> = u_xlat0;
      let x_307 : vec4<f32> = x_91.x_MainLightShadowOffset0;
      u_xlat1 = (vec4<f32>(x_303.x, x_303.y, x_303.x, x_303.y) + x_307);
      let x_311 : vec4<f32> = u_xlat1;
      let x_312 : vec2<f32> = vec2<f32>(x_311.x, x_311.y);
      let x_314 : f32 = u_xlat0.z;
      txVec0 = vec3<f32>(x_312.x, x_312.y, x_314);
      let x_326 : vec3<f32> = txVec0;
      let x_328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_326.xy, x_326.z);
      u_xlat2.x = x_328;
      let x_331 : vec4<f32> = u_xlat1;
      let x_332 : vec2<f32> = vec2<f32>(x_331.z, x_331.w);
      let x_334 : f32 = u_xlat0.z;
      txVec1 = vec3<f32>(x_332.x, x_332.y, x_334);
      let x_341 : vec3<f32> = txVec1;
      let x_343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_341.xy, x_341.z);
      u_xlat2.y = x_343;
      let x_345 : vec4<f32> = u_xlat0;
      let x_349 : vec4<f32> = x_91.x_MainLightShadowOffset1;
      u_xlat1 = (vec4<f32>(x_345.x, x_345.y, x_345.x, x_345.y) + x_349);
      let x_352 : vec4<f32> = u_xlat1;
      let x_353 : vec2<f32> = vec2<f32>(x_352.x, x_352.y);
      let x_355 : f32 = u_xlat0.z;
      txVec2 = vec3<f32>(x_353.x, x_353.y, x_355);
      let x_362 : vec3<f32> = txVec2;
      let x_364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_362.xy, x_362.z);
      u_xlat2.z = x_364;
      let x_367 : vec4<f32> = u_xlat1;
      let x_368 : vec2<f32> = vec2<f32>(x_367.z, x_367.w);
      let x_370 : f32 = u_xlat0.z;
      txVec3 = vec3<f32>(x_368.x, x_368.y, x_370);
      let x_377 : vec3<f32> = txVec3;
      let x_379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_377.xy, x_377.z);
      u_xlat2.w = x_379;
      let x_381 : vec4<f32> = u_xlat2;
      u_xlat45 = dot(x_381, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_387 : f32 = x_91.x_MainLightShadowParams.y;
      u_xlatb1.x = (x_387 == 2.0f);
      let x_391 : bool = u_xlatb1.x;
      if (x_391) {
        let x_394 : vec4<f32> = u_xlat0;
        let x_398 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_403 : vec2<f32> = ((vec2<f32>(x_394.x, x_394.y) * vec2<f32>(x_398.z, x_398.w)) + vec2<f32>(0.5f, 0.5f));
        let x_404 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_403.x, x_403.y, x_404.z, x_404.w);
        let x_406 : vec4<f32> = u_xlat1;
        let x_408 : vec2<f32> = floor(vec2<f32>(x_406.x, x_406.y));
        let x_409 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_408.x, x_408.y, x_409.z, x_409.w);
        let x_412 : vec4<f32> = u_xlat0;
        let x_415 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_418 : vec4<f32> = u_xlat1;
        u_xlat31 = ((vec2<f32>(x_412.x, x_412.y) * vec2<f32>(x_415.z, x_415.w)) + -(vec2<f32>(x_418.x, x_418.y)));
        let x_422 : vec2<f32> = u_xlat31;
        u_xlat2 = (vec4<f32>(x_422.x, x_422.x, x_422.y, x_422.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_426 : vec4<f32> = u_xlat2;
        let x_428 : vec4<f32> = u_xlat2;
        u_xlat3 = (vec4<f32>(x_426.x, x_426.x, x_426.z, x_426.z) * vec4<f32>(x_428.x, x_428.x, x_428.z, x_428.z));
        let x_431 : vec4<f32> = u_xlat3;
        let x_435 : vec2<f32> = (vec2<f32>(x_431.y, x_431.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_436 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_435.x, x_436.y, x_435.y, x_436.w);
        let x_438 : vec4<f32> = u_xlat3;
        let x_441 : vec2<f32> = u_xlat31;
        let x_443 : vec2<f32> = ((vec2<f32>(x_438.x, x_438.z) * vec2<f32>(0.5f, 0.5f)) + -(x_441));
        let x_444 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_447 : vec2<f32> = u_xlat31;
        u_xlat33 = (-(x_447) + vec2<f32>(1.0f, 1.0f));
        let x_451 : vec2<f32> = u_xlat31;
        let x_453 : vec2<f32> = min(x_451, vec2<f32>(0.0f, 0.0f));
        let x_454 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = u_xlat4;
        let x_462 : vec2<f32> = u_xlat33;
        let x_463 : vec2<f32> = ((-(vec2<f32>(x_456.x, x_456.y)) * vec2<f32>(x_459.x, x_459.y)) + x_462);
        let x_464 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_463.x, x_463.y, x_464.z, x_464.w);
        let x_466 : vec2<f32> = u_xlat31;
        u_xlat31 = max(x_466, vec2<f32>(0.0f, 0.0f));
        let x_468 : vec2<f32> = u_xlat31;
        let x_470 : vec2<f32> = u_xlat31;
        let x_472 : vec4<f32> = u_xlat2;
        u_xlat31 = ((-(x_468) * x_470) + vec2<f32>(x_472.y, x_472.w));
        let x_475 : vec4<f32> = u_xlat4;
        let x_477 : vec2<f32> = (vec2<f32>(x_475.x, x_475.y) + vec2<f32>(1.0f, 1.0f));
        let x_478 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat31;
        u_xlat31 = (x_480 + vec2<f32>(1.0f, 1.0f));
        let x_483 : vec4<f32> = u_xlat3;
        let x_487 : vec2<f32> = (vec2<f32>(x_483.x, x_483.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_488 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_490 : vec2<f32> = u_xlat33;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat4;
        let x_496 : vec2<f32> = (vec2<f32>(x_494.x, x_494.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_497 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_496.x, x_496.y, x_497.z, x_497.w);
        let x_500 : vec2<f32> = u_xlat31;
        let x_501 : vec2<f32> = (x_500 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_502 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_501.x, x_501.y, x_502.z, x_502.w);
        let x_504 : vec4<f32> = u_xlat2;
        u_xlat31 = (vec2<f32>(x_504.y, x_504.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_508 : f32 = u_xlat4.x;
        u_xlat5.z = x_508;
        let x_511 : f32 = u_xlat31.x;
        u_xlat5.w = x_511;
        let x_514 : f32 = u_xlat6.x;
        u_xlat3.z = x_514;
        let x_517 : f32 = u_xlat2.x;
        u_xlat3.w = x_517;
        let x_520 : vec4<f32> = u_xlat3;
        let x_522 : vec4<f32> = u_xlat5;
        u_xlat7 = (vec4<f32>(x_520.z, x_520.w, x_520.x, x_520.z) + vec4<f32>(x_522.z, x_522.w, x_522.x, x_522.z));
        let x_526 : f32 = u_xlat5.y;
        u_xlat4.z = x_526;
        let x_529 : f32 = u_xlat31.y;
        u_xlat4.w = x_529;
        let x_532 : f32 = u_xlat3.y;
        u_xlat6.z = x_532;
        let x_535 : f32 = u_xlat2.z;
        u_xlat6.w = x_535;
        let x_537 : vec4<f32> = u_xlat4;
        let x_539 : vec4<f32> = u_xlat6;
        let x_541 : vec3<f32> = (vec3<f32>(x_537.z, x_537.y, x_537.w) + vec3<f32>(x_539.z, x_539.y, x_539.w));
        let x_542 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_541.x, x_541.y, x_541.z, x_542.w);
        let x_544 : vec4<f32> = u_xlat3;
        let x_546 : vec4<f32> = u_xlat7;
        let x_548 : vec3<f32> = (vec3<f32>(x_544.x, x_544.z, x_544.w) / vec3<f32>(x_546.z, x_546.w, x_546.y));
        let x_549 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_548.x, x_548.y, x_548.z, x_549.w);
        let x_551 : vec4<f32> = u_xlat3;
        let x_557 : vec3<f32> = (vec3<f32>(x_551.x, x_551.y, x_551.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_558 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_557.x, x_557.y, x_557.z, x_558.w);
        let x_560 : vec4<f32> = u_xlat6;
        let x_562 : vec4<f32> = u_xlat2;
        let x_564 : vec3<f32> = (vec3<f32>(x_560.z, x_560.y, x_560.w) / vec3<f32>(x_562.x, x_562.y, x_562.z));
        let x_565 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat4;
        let x_569 : vec3<f32> = (vec3<f32>(x_567.x, x_567.y, x_567.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_570 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_569.x, x_569.y, x_569.z, x_570.w);
        let x_572 : vec4<f32> = u_xlat3;
        let x_575 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_577 : vec3<f32> = (vec3<f32>(x_572.y, x_572.x, x_572.z) * vec3<f32>(x_575.x, x_575.x, x_575.x));
        let x_578 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_577.x, x_577.y, x_577.z, x_578.w);
        let x_580 : vec4<f32> = u_xlat4;
        let x_583 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_585 : vec3<f32> = (vec3<f32>(x_580.x, x_580.y, x_580.z) * vec3<f32>(x_583.y, x_583.y, x_583.y));
        let x_586 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_585.x, x_585.y, x_585.z, x_586.w);
        let x_589 : f32 = u_xlat4.x;
        u_xlat3.w = x_589;
        let x_591 : vec4<f32> = u_xlat1;
        let x_594 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_597 : vec4<f32> = u_xlat3;
        u_xlat5 = ((vec4<f32>(x_591.x, x_591.y, x_591.x, x_591.y) * vec4<f32>(x_594.x, x_594.y, x_594.x, x_594.y)) + vec4<f32>(x_597.y, x_597.w, x_597.x, x_597.w));
        let x_600 : vec4<f32> = u_xlat1;
        let x_603 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_606 : vec4<f32> = u_xlat3;
        u_xlat31 = ((vec2<f32>(x_600.x, x_600.y) * vec2<f32>(x_603.x, x_603.y)) + vec2<f32>(x_606.z, x_606.w));
        let x_610 : f32 = u_xlat3.y;
        u_xlat4.w = x_610;
        let x_612 : vec4<f32> = u_xlat4;
        let x_613 : vec2<f32> = vec2<f32>(x_612.y, x_612.z);
        let x_614 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_614.x, x_613.x, x_614.z, x_613.y);
        let x_616 : vec4<f32> = u_xlat1;
        let x_619 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_622 : vec4<f32> = u_xlat3;
        u_xlat6 = ((vec4<f32>(x_616.x, x_616.y, x_616.x, x_616.y) * vec4<f32>(x_619.x, x_619.y, x_619.x, x_619.y)) + vec4<f32>(x_622.x, x_622.y, x_622.z, x_622.y));
        let x_625 : vec4<f32> = u_xlat1;
        let x_628 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_631 : vec4<f32> = u_xlat4;
        u_xlat4 = ((vec4<f32>(x_625.x, x_625.y, x_625.x, x_625.y) * vec4<f32>(x_628.x, x_628.y, x_628.x, x_628.y)) + vec4<f32>(x_631.w, x_631.y, x_631.w, x_631.z));
        let x_634 : vec4<f32> = u_xlat1;
        let x_637 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_640 : vec4<f32> = u_xlat3;
        u_xlat3 = ((vec4<f32>(x_634.x, x_634.y, x_634.x, x_634.y) * vec4<f32>(x_637.x, x_637.y, x_637.x, x_637.y)) + vec4<f32>(x_640.x, x_640.w, x_640.z, x_640.w));
        let x_644 : vec4<f32> = u_xlat2;
        let x_646 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_644.x, x_644.x, x_644.x, x_644.y) * vec4<f32>(x_646.z, x_646.w, x_646.y, x_646.z));
        let x_650 : vec4<f32> = u_xlat2;
        let x_652 : vec4<f32> = u_xlat7;
        u_xlat9 = (vec4<f32>(x_650.y, x_650.y, x_650.z, x_650.z) * x_652);
        let x_655 : f32 = u_xlat2.z;
        let x_657 : f32 = u_xlat7.y;
        u_xlat1.x = (x_655 * x_657);
        let x_661 : vec4<f32> = u_xlat5;
        let x_662 : vec2<f32> = vec2<f32>(x_661.x, x_661.y);
        let x_664 : f32 = u_xlat0.z;
        txVec4 = vec3<f32>(x_662.x, x_662.y, x_664);
        let x_672 : vec3<f32> = txVec4;
        let x_674 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_672.xy, x_672.z);
        u_xlat16 = x_674;
        let x_676 : vec4<f32> = u_xlat5;
        let x_677 : vec2<f32> = vec2<f32>(x_676.z, x_676.w);
        let x_679 : f32 = u_xlat0.z;
        txVec5 = vec3<f32>(x_677.x, x_677.y, x_679);
        let x_686 : vec3<f32> = txVec5;
        let x_688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_686.xy, x_686.z);
        u_xlat2.x = x_688;
        let x_691 : f32 = u_xlat2.x;
        let x_693 : f32 = u_xlat8.y;
        u_xlat2.x = (x_691 * x_693);
        let x_697 : f32 = u_xlat8.x;
        let x_698 : f32 = u_xlat16;
        let x_701 : f32 = u_xlat2.x;
        u_xlat16 = ((x_697 * x_698) + x_701);
        let x_704 : vec2<f32> = u_xlat31;
        let x_706 : f32 = u_xlat0.z;
        txVec6 = vec3<f32>(x_704.x, x_704.y, x_706);
        let x_713 : vec3<f32> = txVec6;
        let x_715 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_713.xy, x_713.z);
        u_xlat31.x = x_715;
        let x_718 : f32 = u_xlat8.z;
        let x_720 : f32 = u_xlat31.x;
        let x_722 : f32 = u_xlat16;
        u_xlat16 = ((x_718 * x_720) + x_722);
        let x_725 : vec4<f32> = u_xlat4;
        let x_726 : vec2<f32> = vec2<f32>(x_725.x, x_725.y);
        let x_728 : f32 = u_xlat0.z;
        txVec7 = vec3<f32>(x_726.x, x_726.y, x_728);
        let x_735 : vec3<f32> = txVec7;
        let x_737 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_735.xy, x_735.z);
        u_xlat31.x = x_737;
        let x_740 : f32 = u_xlat8.w;
        let x_742 : f32 = u_xlat31.x;
        let x_744 : f32 = u_xlat16;
        u_xlat16 = ((x_740 * x_742) + x_744);
        let x_747 : vec4<f32> = u_xlat6;
        let x_748 : vec2<f32> = vec2<f32>(x_747.x, x_747.y);
        let x_750 : f32 = u_xlat0.z;
        txVec8 = vec3<f32>(x_748.x, x_748.y, x_750);
        let x_757 : vec3<f32> = txVec8;
        let x_759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_757.xy, x_757.z);
        u_xlat31.x = x_759;
        let x_762 : f32 = u_xlat9.x;
        let x_764 : f32 = u_xlat31.x;
        let x_766 : f32 = u_xlat16;
        u_xlat16 = ((x_762 * x_764) + x_766);
        let x_769 : vec4<f32> = u_xlat6;
        let x_770 : vec2<f32> = vec2<f32>(x_769.z, x_769.w);
        let x_772 : f32 = u_xlat0.z;
        txVec9 = vec3<f32>(x_770.x, x_770.y, x_772);
        let x_779 : vec3<f32> = txVec9;
        let x_781 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_779.xy, x_779.z);
        u_xlat31.x = x_781;
        let x_784 : f32 = u_xlat9.y;
        let x_786 : f32 = u_xlat31.x;
        let x_788 : f32 = u_xlat16;
        u_xlat16 = ((x_784 * x_786) + x_788);
        let x_791 : vec4<f32> = u_xlat4;
        let x_792 : vec2<f32> = vec2<f32>(x_791.z, x_791.w);
        let x_794 : f32 = u_xlat0.z;
        txVec10 = vec3<f32>(x_792.x, x_792.y, x_794);
        let x_801 : vec3<f32> = txVec10;
        let x_803 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_801.xy, x_801.z);
        u_xlat31.x = x_803;
        let x_806 : f32 = u_xlat9.z;
        let x_808 : f32 = u_xlat31.x;
        let x_810 : f32 = u_xlat16;
        u_xlat16 = ((x_806 * x_808) + x_810);
        let x_813 : vec4<f32> = u_xlat3;
        let x_814 : vec2<f32> = vec2<f32>(x_813.x, x_813.y);
        let x_816 : f32 = u_xlat0.z;
        txVec11 = vec3<f32>(x_814.x, x_814.y, x_816);
        let x_823 : vec3<f32> = txVec11;
        let x_825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_823.xy, x_823.z);
        u_xlat31.x = x_825;
        let x_828 : f32 = u_xlat9.w;
        let x_830 : f32 = u_xlat31.x;
        let x_832 : f32 = u_xlat16;
        u_xlat16 = ((x_828 * x_830) + x_832);
        let x_835 : vec4<f32> = u_xlat3;
        let x_836 : vec2<f32> = vec2<f32>(x_835.z, x_835.w);
        let x_838 : f32 = u_xlat0.z;
        txVec12 = vec3<f32>(x_836.x, x_836.y, x_838);
        let x_845 : vec3<f32> = txVec12;
        let x_847 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_845.xy, x_845.z);
        u_xlat31.x = x_847;
        let x_850 : f32 = u_xlat1.x;
        let x_852 : f32 = u_xlat31.x;
        let x_854 : f32 = u_xlat16;
        u_xlat45 = ((x_850 * x_852) + x_854);
      } else {
        let x_857 : vec4<f32> = u_xlat0;
        let x_860 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_863 : vec2<f32> = ((vec2<f32>(x_857.x, x_857.y) * vec2<f32>(x_860.z, x_860.w)) + vec2<f32>(0.5f, 0.5f));
        let x_864 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_863.x, x_863.y, x_864.z, x_864.w);
        let x_866 : vec4<f32> = u_xlat1;
        let x_868 : vec2<f32> = floor(vec2<f32>(x_866.x, x_866.y));
        let x_869 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_868.x, x_868.y, x_869.z, x_869.w);
        let x_871 : vec4<f32> = u_xlat0;
        let x_874 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_877 : vec4<f32> = u_xlat1;
        u_xlat31 = ((vec2<f32>(x_871.x, x_871.y) * vec2<f32>(x_874.z, x_874.w)) + -(vec2<f32>(x_877.x, x_877.y)));
        let x_881 : vec2<f32> = u_xlat31;
        u_xlat2 = (vec4<f32>(x_881.x, x_881.x, x_881.y, x_881.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_884 : vec4<f32> = u_xlat2;
        let x_886 : vec4<f32> = u_xlat2;
        u_xlat3 = (vec4<f32>(x_884.x, x_884.x, x_884.z, x_884.z) * vec4<f32>(x_886.x, x_886.x, x_886.z, x_886.z));
        let x_889 : vec4<f32> = u_xlat3;
        let x_893 : vec2<f32> = (vec2<f32>(x_889.y, x_889.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_894 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_894.x, x_893.x, x_894.z, x_893.y);
        let x_896 : vec4<f32> = u_xlat3;
        let x_899 : vec2<f32> = u_xlat31;
        let x_901 : vec2<f32> = ((vec2<f32>(x_896.x, x_896.z) * vec2<f32>(0.5f, 0.5f)) + -(x_899));
        let x_902 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_901.x, x_902.y, x_901.y, x_902.w);
        let x_904 : vec2<f32> = u_xlat31;
        let x_906 : vec2<f32> = (-(x_904) + vec2<f32>(1.0f, 1.0f));
        let x_907 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_906.x, x_906.y, x_907.z, x_907.w);
        let x_909 : vec2<f32> = u_xlat31;
        u_xlat33 = min(x_909, vec2<f32>(0.0f, 0.0f));
        let x_911 : vec2<f32> = u_xlat33;
        let x_913 : vec2<f32> = u_xlat33;
        let x_915 : vec4<f32> = u_xlat3;
        let x_917 : vec2<f32> = ((-(x_911) * x_913) + vec2<f32>(x_915.x, x_915.y));
        let x_918 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_917.x, x_917.y, x_918.z, x_918.w);
        let x_920 : vec2<f32> = u_xlat31;
        u_xlat33 = max(x_920, vec2<f32>(0.0f, 0.0f));
        let x_923 : vec2<f32> = u_xlat33;
        let x_925 : vec2<f32> = u_xlat33;
        let x_927 : vec4<f32> = u_xlat2;
        let x_929 : vec2<f32> = ((-(x_923) * x_925) + vec2<f32>(x_927.y, x_927.w));
        let x_930 : vec3<f32> = u_xlat17;
        u_xlat17 = vec3<f32>(x_929.x, x_930.y, x_929.y);
        let x_932 : vec4<f32> = u_xlat3;
        let x_934 : vec2<f32> = (vec2<f32>(x_932.x, x_932.y) + vec2<f32>(2.0f, 2.0f));
        let x_935 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_934.x, x_934.y, x_935.z, x_935.w);
        let x_937 : vec3<f32> = u_xlat17;
        let x_939 : vec2<f32> = (vec2<f32>(x_937.x, x_937.z) + vec2<f32>(2.0f, 2.0f));
        let x_940 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_940.x, x_939.x, x_940.z, x_939.y);
        let x_943 : f32 = u_xlat2.y;
        u_xlat5.z = (x_943 * 0.081632003f);
        let x_947 : vec4<f32> = u_xlat2;
        let x_950 : vec3<f32> = (vec3<f32>(x_947.z, x_947.x, x_947.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_951 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_950.x, x_950.y, x_950.z, x_951.w);
        let x_953 : vec4<f32> = u_xlat3;
        let x_956 : vec2<f32> = (vec2<f32>(x_953.x, x_953.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_957 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_956.x, x_956.y, x_957.z, x_957.w);
        let x_960 : f32 = u_xlat6.y;
        u_xlat5.x = x_960;
        let x_962 : vec2<f32> = u_xlat31;
        let x_969 : vec2<f32> = ((vec2<f32>(x_962.x, x_962.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_970 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_970.x, x_969.x, x_970.z, x_969.y);
        let x_972 : vec2<f32> = u_xlat31;
        let x_976 : vec2<f32> = ((vec2<f32>(x_972.x, x_972.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_977 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_976.x, x_977.y, x_976.y, x_977.w);
        let x_980 : f32 = u_xlat2.x;
        u_xlat3.y = x_980;
        let x_983 : f32 = u_xlat4.y;
        u_xlat3.w = x_983;
        let x_985 : vec4<f32> = u_xlat3;
        let x_986 : vec4<f32> = u_xlat5;
        u_xlat5 = (x_985 + x_986);
        let x_988 : vec2<f32> = u_xlat31;
        let x_991 : vec2<f32> = ((vec2<f32>(x_988.y, x_988.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_992 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_992.x, x_991.x, x_992.z, x_991.y);
        let x_994 : vec2<f32> = u_xlat31;
        let x_997 : vec2<f32> = ((vec2<f32>(x_994.y, x_994.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_998 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_997.x, x_998.y, x_997.y, x_998.w);
        let x_1001 : f32 = u_xlat2.y;
        u_xlat4.y = x_1001;
        let x_1003 : vec4<f32> = u_xlat4;
        let x_1004 : vec4<f32> = u_xlat6;
        u_xlat2 = (x_1003 + x_1004);
        let x_1006 : vec4<f32> = u_xlat3;
        let x_1007 : vec4<f32> = u_xlat5;
        u_xlat3 = (x_1006 / x_1007);
        let x_1009 : vec4<f32> = u_xlat3;
        u_xlat3 = (x_1009 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1015 : vec4<f32> = u_xlat4;
        let x_1016 : vec4<f32> = u_xlat2;
        u_xlat4 = (x_1015 / x_1016);
        let x_1018 : vec4<f32> = u_xlat4;
        u_xlat4 = (x_1018 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1020 : vec4<f32> = u_xlat3;
        let x_1023 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        u_xlat3 = (vec4<f32>(x_1020.w, x_1020.x, x_1020.y, x_1020.z) * vec4<f32>(x_1023.x, x_1023.x, x_1023.x, x_1023.x));
        let x_1026 : vec4<f32> = u_xlat4;
        let x_1029 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        u_xlat4 = (vec4<f32>(x_1026.x, x_1026.w, x_1026.y, x_1026.z) * vec4<f32>(x_1029.y, x_1029.y, x_1029.y, x_1029.y));
        let x_1032 : vec4<f32> = u_xlat3;
        let x_1033 : vec3<f32> = vec3<f32>(x_1032.y, x_1032.z, x_1032.w);
        let x_1034 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1033.x, x_1034.y, x_1033.y, x_1033.z);
        let x_1037 : f32 = u_xlat4.x;
        u_xlat6.y = x_1037;
        let x_1039 : vec4<f32> = u_xlat1;
        let x_1042 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1045 : vec4<f32> = u_xlat6;
        u_xlat7 = ((vec4<f32>(x_1039.x, x_1039.y, x_1039.x, x_1039.y) * vec4<f32>(x_1042.x, x_1042.y, x_1042.x, x_1042.y)) + vec4<f32>(x_1045.x, x_1045.y, x_1045.z, x_1045.y));
        let x_1048 : vec4<f32> = u_xlat1;
        let x_1051 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1054 : vec4<f32> = u_xlat6;
        u_xlat31 = ((vec2<f32>(x_1048.x, x_1048.y) * vec2<f32>(x_1051.x, x_1051.y)) + vec2<f32>(x_1054.w, x_1054.y));
        let x_1058 : f32 = u_xlat6.y;
        u_xlat3.y = x_1058;
        let x_1061 : f32 = u_xlat4.z;
        u_xlat6.y = x_1061;
        let x_1063 : vec4<f32> = u_xlat1;
        let x_1066 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1069 : vec4<f32> = u_xlat6;
        u_xlat8 = ((vec4<f32>(x_1063.x, x_1063.y, x_1063.x, x_1063.y) * vec4<f32>(x_1066.x, x_1066.y, x_1066.x, x_1066.y)) + vec4<f32>(x_1069.x, x_1069.y, x_1069.z, x_1069.y));
        let x_1072 : vec4<f32> = u_xlat1;
        let x_1075 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1078 : vec4<f32> = u_xlat6;
        let x_1080 : vec2<f32> = ((vec2<f32>(x_1072.x, x_1072.y) * vec2<f32>(x_1075.x, x_1075.y)) + vec2<f32>(x_1078.w, x_1078.y));
        let x_1081 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1080.x, x_1080.y, x_1081.z, x_1081.w);
        let x_1084 : f32 = u_xlat6.y;
        u_xlat3.z = x_1084;
        let x_1087 : vec4<f32> = u_xlat1;
        let x_1090 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1093 : vec4<f32> = u_xlat3;
        u_xlat10 = ((vec4<f32>(x_1087.x, x_1087.y, x_1087.x, x_1087.y) * vec4<f32>(x_1090.x, x_1090.y, x_1090.x, x_1090.y)) + vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.z));
        let x_1097 : f32 = u_xlat4.w;
        u_xlat6.y = x_1097;
        let x_1100 : vec4<f32> = u_xlat1;
        let x_1103 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat6;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1110 : vec4<f32> = u_xlat1;
        let x_1113 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1116 : vec4<f32> = u_xlat6;
        u_xlat18 = ((vec2<f32>(x_1110.x, x_1110.y) * vec2<f32>(x_1113.x, x_1113.y)) + vec2<f32>(x_1116.w, x_1116.y));
        let x_1120 : f32 = u_xlat6.y;
        u_xlat3.w = x_1120;
        let x_1123 : vec4<f32> = u_xlat1;
        let x_1126 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1129 : vec4<f32> = u_xlat3;
        u_xlat39 = ((vec2<f32>(x_1123.x, x_1123.y) * vec2<f32>(x_1126.x, x_1126.y)) + vec2<f32>(x_1129.x, x_1129.w));
        let x_1132 : vec4<f32> = u_xlat6;
        let x_1133 : vec3<f32> = vec3<f32>(x_1132.x, x_1132.z, x_1132.w);
        let x_1134 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_1133.x, x_1134.y, x_1133.y, x_1133.z);
        let x_1136 : vec4<f32> = u_xlat1;
        let x_1139 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat4;
        u_xlat6 = ((vec4<f32>(x_1136.x, x_1136.y, x_1136.x, x_1136.y) * vec4<f32>(x_1139.x, x_1139.y, x_1139.x, x_1139.y)) + vec4<f32>(x_1142.x, x_1142.y, x_1142.z, x_1142.y));
        let x_1146 : vec4<f32> = u_xlat1;
        let x_1149 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1152 : vec4<f32> = u_xlat4;
        u_xlat34 = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1149.x, x_1149.y)) + vec2<f32>(x_1152.w, x_1152.y));
        let x_1156 : f32 = u_xlat3.x;
        u_xlat4.x = x_1156;
        let x_1158 : vec4<f32> = u_xlat1;
        let x_1161 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1164 : vec4<f32> = u_xlat4;
        let x_1166 : vec2<f32> = ((vec2<f32>(x_1158.x, x_1158.y) * vec2<f32>(x_1161.x, x_1161.y)) + vec2<f32>(x_1164.x, x_1164.y));
        let x_1167 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_1166.x, x_1166.y, x_1167.z, x_1167.w);
        let x_1170 : vec4<f32> = u_xlat2;
        let x_1172 : vec4<f32> = u_xlat5;
        u_xlat12 = (vec4<f32>(x_1170.x, x_1170.x, x_1170.x, x_1170.x) * x_1172);
        let x_1175 : vec4<f32> = u_xlat2;
        let x_1177 : vec4<f32> = u_xlat5;
        u_xlat13 = (vec4<f32>(x_1175.y, x_1175.y, x_1175.y, x_1175.y) * x_1177);
        let x_1180 : vec4<f32> = u_xlat2;
        let x_1182 : vec4<f32> = u_xlat5;
        u_xlat14 = (vec4<f32>(x_1180.z, x_1180.z, x_1180.z, x_1180.z) * x_1182);
        let x_1184 : vec4<f32> = u_xlat2;
        let x_1186 : vec4<f32> = u_xlat5;
        u_xlat2 = (vec4<f32>(x_1184.w, x_1184.w, x_1184.w, x_1184.w) * x_1186);
        let x_1189 : vec4<f32> = u_xlat7;
        let x_1190 : vec2<f32> = vec2<f32>(x_1189.x, x_1189.y);
        let x_1192 : f32 = u_xlat0.z;
        txVec13 = vec3<f32>(x_1190.x, x_1190.y, x_1192);
        let x_1199 : vec3<f32> = txVec13;
        let x_1201 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1199.xy, x_1199.z);
        u_xlat3.x = x_1201;
        let x_1204 : vec4<f32> = u_xlat7;
        let x_1205 : vec2<f32> = vec2<f32>(x_1204.z, x_1204.w);
        let x_1207 : f32 = u_xlat0.z;
        txVec14 = vec3<f32>(x_1205.x, x_1205.y, x_1207);
        let x_1215 : vec3<f32> = txVec14;
        let x_1217 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1215.xy, x_1215.z);
        u_xlat48 = x_1217;
        let x_1218 : f32 = u_xlat48;
        let x_1220 : f32 = u_xlat12.y;
        u_xlat48 = (x_1218 * x_1220);
        let x_1223 : f32 = u_xlat12.x;
        let x_1225 : f32 = u_xlat3.x;
        let x_1227 : f32 = u_xlat48;
        u_xlat3.x = ((x_1223 * x_1225) + x_1227);
        let x_1231 : vec2<f32> = u_xlat31;
        let x_1233 : f32 = u_xlat0.z;
        txVec15 = vec3<f32>(x_1231.x, x_1231.y, x_1233);
        let x_1240 : vec3<f32> = txVec15;
        let x_1242 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1240.xy, x_1240.z);
        u_xlat31.x = x_1242;
        let x_1245 : f32 = u_xlat12.z;
        let x_1247 : f32 = u_xlat31.x;
        let x_1250 : f32 = u_xlat3.x;
        u_xlat31.x = ((x_1245 * x_1247) + x_1250);
        let x_1254 : vec4<f32> = u_xlat10;
        let x_1255 : vec2<f32> = vec2<f32>(x_1254.x, x_1254.y);
        let x_1257 : f32 = u_xlat0.z;
        txVec16 = vec3<f32>(x_1255.x, x_1255.y, x_1257);
        let x_1265 : vec3<f32> = txVec16;
        let x_1267 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1265.xy, x_1265.z);
        u_xlat46 = x_1267;
        let x_1269 : f32 = u_xlat12.w;
        let x_1270 : f32 = u_xlat46;
        let x_1273 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1269 * x_1270) + x_1273);
        let x_1277 : vec4<f32> = u_xlat8;
        let x_1278 : vec2<f32> = vec2<f32>(x_1277.x, x_1277.y);
        let x_1280 : f32 = u_xlat0.z;
        txVec17 = vec3<f32>(x_1278.x, x_1278.y, x_1280);
        let x_1287 : vec3<f32> = txVec17;
        let x_1289 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1287.xy, x_1287.z);
        u_xlat46 = x_1289;
        let x_1291 : f32 = u_xlat13.x;
        let x_1292 : f32 = u_xlat46;
        let x_1295 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1291 * x_1292) + x_1295);
        let x_1299 : vec4<f32> = u_xlat8;
        let x_1300 : vec2<f32> = vec2<f32>(x_1299.z, x_1299.w);
        let x_1302 : f32 = u_xlat0.z;
        txVec18 = vec3<f32>(x_1300.x, x_1300.y, x_1302);
        let x_1309 : vec3<f32> = txVec18;
        let x_1311 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1309.xy, x_1309.z);
        u_xlat46 = x_1311;
        let x_1313 : f32 = u_xlat13.y;
        let x_1314 : f32 = u_xlat46;
        let x_1317 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1313 * x_1314) + x_1317);
        let x_1321 : vec4<f32> = u_xlat9;
        let x_1322 : vec2<f32> = vec2<f32>(x_1321.x, x_1321.y);
        let x_1324 : f32 = u_xlat0.z;
        txVec19 = vec3<f32>(x_1322.x, x_1322.y, x_1324);
        let x_1331 : vec3<f32> = txVec19;
        let x_1333 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1331.xy, x_1331.z);
        u_xlat46 = x_1333;
        let x_1335 : f32 = u_xlat13.z;
        let x_1336 : f32 = u_xlat46;
        let x_1339 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1335 * x_1336) + x_1339);
        let x_1343 : vec4<f32> = u_xlat10;
        let x_1344 : vec2<f32> = vec2<f32>(x_1343.z, x_1343.w);
        let x_1346 : f32 = u_xlat0.z;
        txVec20 = vec3<f32>(x_1344.x, x_1344.y, x_1346);
        let x_1353 : vec3<f32> = txVec20;
        let x_1355 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1353.xy, x_1353.z);
        u_xlat46 = x_1355;
        let x_1357 : f32 = u_xlat13.w;
        let x_1358 : f32 = u_xlat46;
        let x_1361 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1357 * x_1358) + x_1361);
        let x_1365 : vec4<f32> = u_xlat11;
        let x_1366 : vec2<f32> = vec2<f32>(x_1365.x, x_1365.y);
        let x_1368 : f32 = u_xlat0.z;
        txVec21 = vec3<f32>(x_1366.x, x_1366.y, x_1368);
        let x_1375 : vec3<f32> = txVec21;
        let x_1377 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1375.xy, x_1375.z);
        u_xlat46 = x_1377;
        let x_1379 : f32 = u_xlat14.x;
        let x_1380 : f32 = u_xlat46;
        let x_1383 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1379 * x_1380) + x_1383);
        let x_1387 : vec4<f32> = u_xlat11;
        let x_1388 : vec2<f32> = vec2<f32>(x_1387.z, x_1387.w);
        let x_1390 : f32 = u_xlat0.z;
        txVec22 = vec3<f32>(x_1388.x, x_1388.y, x_1390);
        let x_1397 : vec3<f32> = txVec22;
        let x_1399 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1397.xy, x_1397.z);
        u_xlat46 = x_1399;
        let x_1401 : f32 = u_xlat14.y;
        let x_1402 : f32 = u_xlat46;
        let x_1405 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1401 * x_1402) + x_1405);
        let x_1409 : vec2<f32> = u_xlat18;
        let x_1411 : f32 = u_xlat0.z;
        txVec23 = vec3<f32>(x_1409.x, x_1409.y, x_1411);
        let x_1418 : vec3<f32> = txVec23;
        let x_1420 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1418.xy, x_1418.z);
        u_xlat46 = x_1420;
        let x_1422 : f32 = u_xlat14.z;
        let x_1423 : f32 = u_xlat46;
        let x_1426 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1422 * x_1423) + x_1426);
        let x_1430 : vec2<f32> = u_xlat39;
        let x_1432 : f32 = u_xlat0.z;
        txVec24 = vec3<f32>(x_1430.x, x_1430.y, x_1432);
        let x_1439 : vec3<f32> = txVec24;
        let x_1441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1439.xy, x_1439.z);
        u_xlat46 = x_1441;
        let x_1443 : f32 = u_xlat14.w;
        let x_1444 : f32 = u_xlat46;
        let x_1447 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1443 * x_1444) + x_1447);
        let x_1451 : vec4<f32> = u_xlat6;
        let x_1452 : vec2<f32> = vec2<f32>(x_1451.x, x_1451.y);
        let x_1454 : f32 = u_xlat0.z;
        txVec25 = vec3<f32>(x_1452.x, x_1452.y, x_1454);
        let x_1461 : vec3<f32> = txVec25;
        let x_1463 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1461.xy, x_1461.z);
        u_xlat46 = x_1463;
        let x_1465 : f32 = u_xlat2.x;
        let x_1466 : f32 = u_xlat46;
        let x_1469 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1465 * x_1466) + x_1469);
        let x_1473 : vec4<f32> = u_xlat6;
        let x_1474 : vec2<f32> = vec2<f32>(x_1473.z, x_1473.w);
        let x_1476 : f32 = u_xlat0.z;
        txVec26 = vec3<f32>(x_1474.x, x_1474.y, x_1476);
        let x_1483 : vec3<f32> = txVec26;
        let x_1485 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1483.xy, x_1483.z);
        u_xlat46 = x_1485;
        let x_1487 : f32 = u_xlat2.y;
        let x_1488 : f32 = u_xlat46;
        let x_1491 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1487 * x_1488) + x_1491);
        let x_1495 : vec2<f32> = u_xlat34;
        let x_1497 : f32 = u_xlat0.z;
        txVec27 = vec3<f32>(x_1495.x, x_1495.y, x_1497);
        let x_1504 : vec3<f32> = txVec27;
        let x_1506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1504.xy, x_1504.z);
        u_xlat46 = x_1506;
        let x_1508 : f32 = u_xlat2.z;
        let x_1509 : f32 = u_xlat46;
        let x_1512 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1508 * x_1509) + x_1512);
        let x_1516 : vec4<f32> = u_xlat1;
        let x_1517 : vec2<f32> = vec2<f32>(x_1516.x, x_1516.y);
        let x_1519 : f32 = u_xlat0.z;
        txVec28 = vec3<f32>(x_1517.x, x_1517.y, x_1519);
        let x_1526 : vec3<f32> = txVec28;
        let x_1528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1526.xy, x_1526.z);
        u_xlat1.x = x_1528;
        let x_1531 : f32 = u_xlat2.w;
        let x_1533 : f32 = u_xlat1.x;
        let x_1536 : f32 = u_xlat31.x;
        u_xlat45 = ((x_1531 * x_1533) + x_1536);
      }
    }
  } else {
    let x_1540 : vec4<f32> = u_xlat0;
    let x_1541 : vec2<f32> = vec2<f32>(x_1540.x, x_1540.y);
    let x_1543 : f32 = u_xlat0.z;
    txVec29 = vec3<f32>(x_1541.x, x_1541.y, x_1543);
    let x_1550 : vec3<f32> = txVec29;
    let x_1552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1550.xy, x_1550.z);
    u_xlat45 = x_1552;
  }
  let x_1554 : f32 = x_91.x_MainLightShadowParams.x;
  u_xlat0.x = (-(x_1554) + 1.0f);
  let x_1558 : f32 = u_xlat45;
  let x_1560 : f32 = x_91.x_MainLightShadowParams.x;
  let x_1563 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1558 * x_1560) + x_1563);
  let x_1568 : f32 = u_xlat0.z;
  u_xlatb15 = (0.0f >= x_1568);
  let x_1572 : f32 = u_xlat0.z;
  u_xlatb30 = (x_1572 >= 1.0f);
  let x_1574 : bool = u_xlatb30;
  let x_1575 : bool = u_xlatb15;
  u_xlatb15 = (x_1574 | x_1575);
  let x_1579 : bool = u_xlatb15;
  if (x_1579) {
    x_1580 = vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f);
  } else {
    let x_1585 : vec4<f32> = u_xlat0;
    x_1580 = vec4<f32>(x_1585.x, x_1585.x, x_1585.x, x_1585.x);
  }
  let x_1587 : vec4<f32> = x_1580;
  SV_Target0 = x_1587;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

