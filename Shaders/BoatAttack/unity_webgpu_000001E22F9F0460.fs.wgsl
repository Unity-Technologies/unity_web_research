type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlatb21 : bool;
  var x_425 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var x_436 : vec3<f32>;
  var x_446 : vec3<f32>;
  var x_454 : vec3<f32>;
  var x_464 : vec2<f32>;
  var u_xlat23 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var x_696 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var x_987 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlatb23 : bool;
  var x_1263 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var x_1538 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_108 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_110 : vec2<f32> = vs_TEXCOORD0;
  let x_115 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_108.x, x_108.y, x_108.z) * vec3<f32>(x_110.x, x_110.x, x_110.x)) + vec3<f32>(x_115.x, x_115.y, x_115.z));
  let x_120 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_122 : vec2<f32> = u_xlat14;
  let x_125 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_120.x, x_120.y, x_120.z) * vec3<f32>(x_122.x, x_122.x, x_122.x)) + x_125);
  let x_129 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_131 : f32 = u_xlat21;
  let x_134 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_129.x, x_129.y, x_129.z) * vec3<f32>(x_131, x_131, x_131)) + x_134);
  let x_139 : f32 = x_34.x_SourceSize.z;
  u_xlat9.x = (x_139 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_144 : vec3<f32> = u_xlat9;
  let x_146 : vec2<f32> = vs_TEXCOORD0;
  let x_147 : vec2<f32> = (vec2<f32>(x_144.x, x_144.y) + x_146);
  let x_148 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_147.x, x_147.y, x_148.z);
  let x_153 : vec3<f32> = u_xlat9;
  let x_156 : f32 = x_34.x_GlobalMipBias.x;
  let x_157 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_153.x, x_153.y), x_156);
  u_xlat14.x = x_157.x;
  let x_161 : f32 = u_xlat7.x;
  let x_164 : f32 = u_xlat14.x;
  let x_167 : f32 = x_34.x_ProjectionParams.z;
  u_xlat9.z = ((-(x_161) * x_164) + x_167);
  let x_173 : f32 = x_34.x_SourceSize.z;
  u_xlat3.x = (x_173 * 2.0f);
  u_xlat3.y = 0.0f;
  u_xlat17.y = 0.0f;
  let x_181 : vec4<f32> = u_xlat3;
  let x_183 : vec2<f32> = vs_TEXCOORD0;
  let x_184 : vec2<f32> = (vec2<f32>(x_181.x, x_181.y) + x_183);
  let x_185 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_184.x, x_184.y, x_185.z);
  let x_190 : vec3<f32> = u_xlat4;
  let x_193 : f32 = x_34.x_GlobalMipBias.x;
  let x_194 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_190.x, x_190.y), x_193);
  u_xlat14.x = x_194.x;
  let x_198 : f32 = u_xlat7.x;
  let x_201 : f32 = u_xlat14.x;
  let x_204 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.z = ((-(x_198) * x_201) + x_204);
  u_xlat12.x = 0.0f;
  let x_210 : f32 = x_34.x_SourceSize.w;
  u_xlat12.y = (x_210 * 2.0f);
  let x_213 : vec3<f32> = u_xlat12;
  let x_215 : vec2<f32> = vs_TEXCOORD0;
  let x_216 : vec2<f32> = (vec2<f32>(x_213.x, x_213.y) + x_215);
  let x_217 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_216.x, x_216.y, x_217.z);
  let x_222 : vec3<f32> = u_xlat12;
  let x_225 : f32 = x_34.x_GlobalMipBias.x;
  let x_226 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_222.x, x_222.y), x_225);
  u_xlat14.x = x_226.x;
  let x_230 : f32 = u_xlat7.x;
  let x_233 : f32 = u_xlat14.x;
  let x_236 : f32 = x_34.x_ProjectionParams.z;
  u_xlat12.z = ((-(x_230) * x_233) + x_236);
  u_xlat13.x = 0.0f;
  let x_242 : f32 = x_34.x_SourceSize.w;
  u_xlat13.y = (x_242 * -2.0f);
  let x_245 : vec3<f32> = u_xlat13;
  let x_247 : vec2<f32> = vs_TEXCOORD0;
  let x_248 : vec2<f32> = (vec2<f32>(x_245.x, x_245.y) + x_247);
  let x_249 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_248.x, x_248.y, x_249.z);
  let x_254 : vec3<f32> = u_xlat13;
  let x_257 : f32 = x_34.x_GlobalMipBias.x;
  let x_258 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_254.x, x_254.y), x_257);
  u_xlat14.x = x_258.x;
  let x_262 : f32 = u_xlat7.x;
  let x_265 : f32 = u_xlat14.x;
  let x_268 : f32 = x_34.x_ProjectionParams.z;
  u_xlat13.z = ((-(x_262) * x_265) + x_268);
  let x_272 : f32 = x_34.x_SourceSize.z;
  u_xlat17.x = x_272;
  let x_274 : vec2<f32> = u_xlat17;
  let x_280 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(x_274.x, x_274.y, x_274.x, x_274.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_280.x, x_280.y, x_280.x, x_280.y));
  let x_286 : vec4<f32> = u_xlat3;
  let x_289 : f32 = x_34.x_GlobalMipBias.x;
  let x_290 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_286.x, x_286.y), x_289);
  u_xlat14.x = x_290.x;
  let x_294 : f32 = u_xlat7.x;
  let x_297 : f32 = u_xlat14.x;
  let x_300 : f32 = x_34.x_ProjectionParams.z;
  u_xlat14.x = ((-(x_294) * x_297) + x_300);
  let x_306 : vec4<f32> = u_xlat3;
  let x_309 : f32 = x_34.x_GlobalMipBias.x;
  let x_310 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_306.z, x_306.w), x_309);
  u_xlat21 = x_310.x;
  let x_313 : f32 = u_xlat7.x;
  let x_315 : f32 = u_xlat21;
  let x_318 : f32 = x_34.x_ProjectionParams.z;
  u_xlat21 = ((-(x_313) * x_315) + x_318);
  u_xlat3.x = 2.0f;
  let x_322 : f32 = x_34.x_SourceSize.w;
  u_xlat3.y = x_322;
  let x_325 : vec4<f32> = u_xlat3;
  let x_328 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y)) + vec4<f32>(x_328.x, x_328.y, x_328.x, x_328.y));
  let x_335 : vec4<f32> = u_xlat3;
  let x_338 : f32 = x_34.x_GlobalMipBias.x;
  let x_339 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_335.x, x_335.y), x_338);
  u_xlat22 = x_339.x;
  let x_342 : f32 = u_xlat7.x;
  let x_344 : f32 = u_xlat22;
  let x_347 : f32 = x_34.x_ProjectionParams.z;
  u_xlat22 = ((-(x_342) * x_344) + x_347);
  let x_353 : vec4<f32> = u_xlat3;
  let x_356 : f32 = x_34.x_GlobalMipBias.x;
  let x_357 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_353.z, x_353.w), x_356);
  u_xlat2.x = x_357.x;
  let x_361 : f32 = u_xlat7.x;
  let x_364 : f32 = u_xlat2.x;
  let x_367 : f32 = x_34.x_ProjectionParams.z;
  u_xlat2.x = ((-(x_361) * x_364) + x_367);
  let x_371 : f32 = u_xlat9.z;
  let x_374 : f32 = u_xlat14.x;
  u_xlat14.x = ((x_371 * 2.0f) + -(x_374));
  let x_379 : f32 = u_xlat4.z;
  let x_381 : f32 = u_xlat21;
  u_xlat14.y = ((x_379 * 2.0f) + -(x_381));
  let x_385 : f32 = u_xlat0;
  let x_388 : vec2<f32> = u_xlat14;
  u_xlat14 = (-(vec2<f32>(x_385, x_385)) + x_388);
  let x_391 : f32 = u_xlat14.x;
  let x_394 : f32 = u_xlat14.y;
  u_xlatb14 = (abs(x_391) < abs(x_394));
  let x_398 : f32 = u_xlat13.z;
  let x_401 : f32 = u_xlat2.x;
  u_xlat21 = ((x_398 * 2.0f) + -(x_401));
  let x_404 : f32 = u_xlat0;
  let x_406 : f32 = u_xlat21;
  u_xlat21 = (-(x_404) + x_406);
  let x_409 : f32 = u_xlat12.z;
  let x_411 : f32 = u_xlat22;
  u_xlat22 = ((x_409 * 2.0f) + -(x_411));
  let x_414 : f32 = u_xlat0;
  let x_416 : f32 = u_xlat22;
  u_xlat22 = (-(x_414) + x_416);
  let x_419 : f32 = u_xlat21;
  let x_421 : f32 = u_xlat22;
  u_xlatb21 = (abs(x_419) < abs(x_421));
  let x_424 : bool = u_xlatb14;
  if (x_424) {
    let x_428 : vec3<f32> = u_xlat9;
    x_425 = x_428;
  } else {
    let x_430 : vec3<f32> = u_xlat13;
    x_425 = x_430;
  }
  let x_431 : vec3<f32> = x_425;
  let x_432 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_431.x, x_431.y, x_431.z, x_432.w);
  let x_435 : bool = u_xlatb14;
  if (x_435) {
    let x_439 : vec3<f32> = u_xlat13;
    x_436 = x_439;
  } else {
    let x_441 : vec3<f32> = u_xlat4;
    x_436 = x_441;
  }
  let x_442 : vec3<f32> = x_436;
  let x_443 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_443.x, x_442.x, x_442.y, x_442.z);
  let x_445 : bool = u_xlatb14;
  if (x_445) {
    let x_449 : vec3<f32> = u_xlat12;
    x_446 = x_449;
  } else {
    let x_451 : vec3<f32> = u_xlat4;
    x_446 = x_451;
  }
  let x_452 : vec3<f32> = x_446;
  u_xlat4 = x_452;
  let x_453 : bool = u_xlatb14;
  if (x_453) {
    let x_457 : vec3<f32> = u_xlat9;
    x_454 = x_457;
  } else {
    let x_459 : vec3<f32> = u_xlat12;
    x_454 = x_459;
  }
  let x_460 : vec3<f32> = x_454;
  let x_461 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_461.x, x_460.x, x_460.y, x_460.z);
  let x_463 : bool = u_xlatb21;
  if (x_463) {
    let x_467 : vec4<f32> = u_xlat3;
    x_464 = vec2<f32>(x_467.x, x_467.y);
  } else {
    let x_470 : vec3<f32> = u_xlat4;
    x_464 = vec2<f32>(x_470.x, x_470.y);
  }
  let x_472 : vec2<f32> = x_464;
  let x_473 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_472.x, x_472.y, x_473.z, x_473.w);
  let x_476 : f32 = u_xlat3.z;
  u_xlat6.x = x_476;
  let x_479 : f32 = u_xlat4.z;
  u_xlat2.x = x_479;
  let x_481 : bool = u_xlatb21;
  let x_482 : vec4<f32> = u_xlat6;
  let x_483 : vec4<f32> = u_xlat2;
  u_xlat2 = select(x_483, x_482, vec4<bool>(x_481, x_481, x_481, x_481));
  let x_488 : f32 = u_xlat2.z;
  u_xlat14.x = (-(x_488) + 1.0f);
  let x_492 : vec4<f32> = u_xlat2;
  let x_495 : vec4<f32> = x_34.x_ProjectionParams;
  let x_497 : vec2<f32> = (vec2<f32>(x_492.w, x_492.x) * vec2<f32>(x_495.w, x_495.w));
  let x_498 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_497.x, x_498.y, x_497.y, x_498.w);
  let x_501 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_503 : vec4<f32> = u_xlat2;
  let x_507 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_501.z, x_501.x, x_501.y) * vec3<f32>(x_503.y, x_503.y, x_503.y)) + vec3<f32>(x_507.z, x_507.x, x_507.y));
  let x_511 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_513 : vec2<f32> = u_xlat14;
  let x_516 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_511.z, x_511.x, x_511.y) * vec3<f32>(x_513.x, x_513.x, x_513.x)) + x_516);
  let x_519 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_521 : vec4<f32> = u_xlat2;
  let x_524 : vec3<f32> = u_xlat4;
  let x_525 : vec3<f32> = ((vec3<f32>(x_519.z, x_519.x, x_519.y) * vec3<f32>(x_521.x, x_521.x, x_521.x)) + x_524);
  let x_526 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_525.x, x_525.y, x_526.z, x_525.z);
  let x_528 : vec3<f32> = u_xlat1;
  let x_531 : vec4<f32> = u_xlat2;
  let x_533 : vec3<f32> = (-(vec3<f32>(x_528.z, x_528.x, x_528.y)) + vec3<f32>(x_531.x, x_531.y, x_531.w));
  let x_534 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_533.x, x_533.y, x_534.z, x_533.z);
  let x_537 : f32 = u_xlat3.y;
  u_xlat14.x = (-(x_537) + 1.0f);
  let x_542 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_544 : vec4<f32> = u_xlat3;
  let x_548 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_550 : vec3<f32> = ((vec3<f32>(x_542.y, x_542.z, x_542.x) * vec3<f32>(x_544.x, x_544.x, x_544.x)) + vec3<f32>(x_548.y, x_548.z, x_548.x));
  let x_551 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_550.x, x_550.y, x_550.z, x_551.w);
  let x_554 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_556 : vec2<f32> = u_xlat14;
  let x_559 : vec4<f32> = u_xlat3;
  let x_561 : vec3<f32> = ((vec3<f32>(x_554.y, x_554.z, x_554.x) * vec3<f32>(x_556.x, x_556.x, x_556.x)) + vec3<f32>(x_559.x, x_559.y, x_559.z));
  let x_562 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_561.x, x_561.y, x_561.z, x_562.w);
  let x_565 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_567 : vec4<f32> = u_xlat2;
  let x_570 : vec4<f32> = u_xlat3;
  let x_572 : vec3<f32> = ((vec3<f32>(x_565.y, x_565.z, x_565.x) * vec3<f32>(x_567.z, x_567.z, x_567.z)) + vec3<f32>(x_570.x, x_570.y, x_570.z));
  let x_573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_572.x, x_572.y, x_572.z, x_573.w);
  let x_575 : vec3<f32> = u_xlat1;
  let x_578 : vec4<f32> = u_xlat3;
  let x_580 : vec3<f32> = (-(vec3<f32>(x_575.y, x_575.z, x_575.x)) + vec3<f32>(x_578.x, x_578.y, x_578.z));
  let x_581 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_580.x, x_580.y, x_580.z, x_581.w);
  let x_583 : vec4<f32> = u_xlat2;
  let x_585 : vec4<f32> = u_xlat3;
  u_xlat4 = (vec3<f32>(x_583.x, x_583.y, x_583.w) * vec3<f32>(x_585.x, x_585.y, x_585.z));
  let x_588 : vec4<f32> = u_xlat2;
  let x_590 : vec4<f32> = u_xlat3;
  let x_593 : vec3<f32> = u_xlat4;
  let x_595 : vec3<f32> = ((vec3<f32>(x_588.w, x_588.x, x_588.y) * vec3<f32>(x_590.y, x_590.z, x_590.x)) + -(x_593));
  let x_596 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_595.x, x_595.y, x_595.z, x_596.w);
  let x_598 : vec4<f32> = u_xlat2;
  let x_600 : vec4<f32> = u_xlat2;
  u_xlat14.x = dot(vec3<f32>(x_598.x, x_598.y, x_598.z), vec3<f32>(x_600.x, x_600.y, x_600.z));
  let x_605 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_605);
  let x_608 : vec2<f32> = u_xlat14;
  let x_610 : vec4<f32> = u_xlat2;
  let x_612 : vec3<f32> = (vec3<f32>(x_608.x, x_608.x, x_608.x) * vec3<f32>(x_610.x, x_610.y, x_610.z));
  let x_613 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_612.x, x_612.y, x_612.z, x_613.w);
  let x_615 : vec2<f32> = vs_TEXCOORD0;
  let x_617 : vec4<f32> = x_34.x_ScaledScreenParams;
  u_xlat14 = (x_615 * vec2<f32>(x_617.x, x_617.y));
  let x_620 : vec2<f32> = u_xlat14;
  let x_622 : vec4<f32> = x_34.x_SSAOParams;
  let x_624 : vec2<f32> = (x_620 * vec2<f32>(x_622.z, x_622.z));
  let x_625 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_624.x, x_624.y, x_625.z, x_625.w);
  let x_627 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec2<f32>(x_627.x, x_627.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_633 : f32 = u_xlat22;
  u_xlat22 = fract(x_633);
  let x_635 : f32 = u_xlat22;
  u_xlat22 = (x_635 * 52.982917786f);
  let x_638 : f32 = u_xlat22;
  u_xlat22 = fract(x_638);
  let x_641 : f32 = u_xlat22;
  u_xlat23 = fract(x_641);
  let x_643 : f32 = u_xlat23;
  u_xlat3.z = ((x_643 * 2.0f) + -1.0f);
  let x_648 : f32 = u_xlat22;
  u_xlat22 = (x_648 + 0.9296875f);
  let x_651 : f32 = u_xlat22;
  u_xlat22 = (x_651 * 6.283185482f);
  let x_655 : f32 = u_xlat3.z;
  let x_658 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_655) * x_658) + 1.0f);
  let x_661 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_661);
  let x_663 : f32 = u_xlat22;
  u_xlat4.x = sin(x_663);
  let x_667 : f32 = u_xlat22;
  u_xlat5.x = cos(x_667);
  let x_670 : f32 = u_xlat23;
  let x_672 : f32 = u_xlat5.x;
  u_xlat3.x = (x_670 * x_672);
  let x_675 : f32 = u_xlat23;
  let x_677 : f32 = u_xlat4.x;
  u_xlat3.y = (x_675 * x_677);
  let x_680 : vec4<f32> = u_xlat3;
  let x_683 : vec3<f32> = (vec3<f32>(x_680.x, x_680.y, x_680.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_684 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_683.x, x_683.y, x_683.z, x_684.w);
  let x_686 : vec4<f32> = u_xlat2;
  let x_689 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(-(vec3<f32>(x_686.x, x_686.y, x_686.z)), vec3<f32>(x_689.x, x_689.y, x_689.z));
  let x_693 : f32 = u_xlat22;
  u_xlatb22 = (x_693 >= 0.0f);
  let x_695 : bool = u_xlatb22;
  if (x_695) {
    let x_699 : vec4<f32> = u_xlat3;
    x_696 = -(vec3<f32>(x_699.x, x_699.y, x_699.z));
  } else {
    let x_703 : vec4<f32> = u_xlat3;
    x_696 = vec3<f32>(x_703.x, x_703.y, x_703.z);
  }
  let x_705 : vec3<f32> = x_696;
  let x_706 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
  let x_708 : vec4<f32> = u_xlat3;
  let x_711 : vec4<f32> = x_34.x_SSAOParams;
  let x_714 : vec3<f32> = u_xlat1;
  let x_715 : vec3<f32> = ((vec3<f32>(x_708.x, x_708.y, x_708.z) * vec3<f32>(x_711.y, x_711.y, x_711.y)) + x_714);
  let x_716 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
  let x_719 : vec4<f32> = u_xlat3;
  let x_723 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_725 : vec2<f32> = (vec2<f32>(x_719.y, x_719.y) * vec2<f32>(x_723.x, x_723.y));
  let x_726 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_725.x, x_726.y, x_725.y);
  let x_729 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_731 : vec4<f32> = u_xlat3;
  let x_734 : vec3<f32> = u_xlat10;
  let x_736 : vec2<f32> = ((vec2<f32>(x_729.x, x_729.y) * vec2<f32>(x_731.x, x_731.x)) + vec2<f32>(x_734.x, x_734.z));
  let x_737 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_736.x, x_736.y, x_737.z, x_737.w);
  let x_740 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_742 : vec4<f32> = u_xlat3;
  let x_745 : vec4<f32> = u_xlat3;
  let x_747 : vec2<f32> = ((vec2<f32>(x_740.x, x_740.y) * vec2<f32>(x_742.z, x_742.z)) + vec2<f32>(x_745.x, x_745.y));
  let x_748 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
  let x_750 : vec4<f32> = u_xlat3;
  let x_753 : vec2<f32> = (vec2<f32>(x_750.x, x_750.y) + vec2<f32>(1.0f, 1.0f));
  let x_754 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_753.x, x_753.y, x_754.z, x_754.w);
  let x_756 : vec4<f32> = u_xlat3;
  let x_759 : vec2<f32> = (vec2<f32>(x_756.x, x_756.y) * vec2<f32>(0.5f, 0.5f));
  let x_760 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
  let x_762 : vec4<f32> = u_xlat3;
  let x_766 : vec2<f32> = clamp(vec2<f32>(x_762.x, x_762.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_767 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_766.x, x_766.y, x_767.z, x_767.w);
  let x_772 : vec4<f32> = u_xlat3;
  let x_775 : f32 = x_34.x_GlobalMipBias.x;
  let x_776 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_772.x, x_772.y), x_775);
  u_xlat22 = x_776.x;
  let x_779 : f32 = u_xlat7.x;
  let x_781 : f32 = u_xlat22;
  let x_784 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_779) * x_781) + x_784);
  let x_786 : f32 = u_xlat0;
  let x_787 : f32 = u_xlat23;
  u_xlat17.x = (x_786 + -(x_787));
  let x_793 : f32 = u_xlat17.x;
  let x_796 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_793) < x_796);
  let x_798 : bool = u_xlatb17;
  u_xlat17.x = select(0.0f, 1.0f, x_798);
  let x_801 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_801);
  let x_803 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_803);
  let x_805 : f32 = u_xlat22;
  let x_807 : f32 = u_xlat17.x;
  u_xlat22 = (x_805 * x_807);
  let x_810 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_810) + 1.0f);
  let x_814 : f32 = u_xlat23;
  let x_816 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_814 * x_816);
  let x_819 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_821 : vec4<f32> = u_xlat3;
  let x_825 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_827 : vec3<f32> = ((vec3<f32>(x_819.x, x_819.y, x_819.z) * vec3<f32>(x_821.x, x_821.x, x_821.x)) + vec3<f32>(x_825.x, x_825.y, x_825.z));
  let x_828 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_827.x, x_828.y, x_827.y, x_827.z);
  let x_831 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_833 : vec3<f32> = u_xlat10;
  let x_836 : vec4<f32> = u_xlat3;
  let x_838 : vec3<f32> = ((vec3<f32>(x_831.x, x_831.y, x_831.z) * vec3<f32>(x_833.x, x_833.x, x_833.x)) + vec3<f32>(x_836.x, x_836.z, x_836.w));
  let x_839 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_838.x, x_838.y, x_838.z, x_839.w);
  let x_842 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_844 : f32 = u_xlat23;
  let x_847 : vec4<f32> = u_xlat3;
  let x_849 : vec3<f32> = ((vec3<f32>(x_842.x, x_842.y, x_842.z) * vec3<f32>(x_844, x_844, x_844)) + vec3<f32>(x_847.x, x_847.y, x_847.z));
  let x_850 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_849.x, x_849.y, x_849.z, x_850.w);
  let x_852 : vec3<f32> = u_xlat1;
  let x_854 : vec4<f32> = u_xlat3;
  let x_856 : vec3<f32> = (-(x_852) + vec3<f32>(x_854.x, x_854.y, x_854.z));
  let x_857 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_856.x, x_856.y, x_856.z, x_857.w);
  let x_859 : vec4<f32> = u_xlat3;
  let x_861 : vec4<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_859.x, x_859.y, x_859.z), vec3<f32>(x_861.x, x_861.y, x_861.z));
  let x_864 : f32 = u_xlat0;
  let x_868 : f32 = u_xlat23;
  u_xlat23 = ((-(x_864) * 0.004f) + x_868);
  let x_870 : f32 = u_xlat23;
  u_xlat23 = max(x_870, 0.0f);
  let x_872 : vec4<f32> = u_xlat3;
  let x_874 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_872.x, x_872.y, x_872.z), vec3<f32>(x_874.x, x_874.y, x_874.z));
  let x_879 : f32 = u_xlat3.x;
  u_xlat3.x = (x_879 + 0.0001f);
  let x_884 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_884);
  let x_887 : f32 = u_xlat23;
  let x_889 : f32 = u_xlat3.x;
  u_xlat23 = (x_887 * x_889);
  let x_891 : vec2<f32> = u_xlat14;
  let x_894 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_891.x, x_891.y, x_891.x, x_891.y) * vec4<f32>(x_894.z, x_894.z, x_894.z, x_894.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_903 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec2<f32>(x_903.x, x_903.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_908 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_908);
  let x_912 : f32 = u_xlat3.x;
  u_xlat3.x = (x_912 * 52.982917786f);
  let x_916 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_916);
  let x_919 : vec4<f32> = u_xlat3;
  let x_924 : vec2<f32> = (vec2<f32>(x_919.x, x_919.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_925 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_924.x, x_924.y, x_925.z, x_925.w);
  let x_928 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_928);
  let x_932 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_932 * 2.0f) + -1.0f);
  let x_937 : f32 = u_xlat3.y;
  u_xlat3.x = (x_937 * 6.283185482f);
  let x_941 : f32 = u_xlat4.z;
  let x_944 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_941) * x_944) + 1.0f);
  let x_949 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_949);
  let x_953 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_953);
  let x_957 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_957);
  let x_961 : f32 = u_xlat10.x;
  let x_963 : f32 = u_xlat5.x;
  u_xlat4.x = (x_961 * x_963);
  let x_967 : f32 = u_xlat3.x;
  let x_969 : f32 = u_xlat10.x;
  u_xlat4.y = (x_967 * x_969);
  let x_972 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_972 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_976 : vec4<f32> = u_xlat2;
  let x_979 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(-(vec3<f32>(x_976.x, x_976.y, x_976.z)), x_979);
  let x_984 : f32 = u_xlat3.x;
  u_xlatb3 = (x_984 >= 0.0f);
  let x_986 : bool = u_xlatb3;
  if (x_986) {
    let x_990 : vec3<f32> = u_xlat4;
    x_987 = -(x_990);
  } else {
    let x_993 : vec3<f32> = u_xlat4;
    x_987 = x_993;
  }
  let x_994 : vec3<f32> = x_987;
  u_xlat4 = x_994;
  let x_995 : vec3<f32> = u_xlat4;
  let x_997 : vec4<f32> = x_34.x_SSAOParams;
  let x_1000 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_995 * vec3<f32>(x_997.y, x_997.y, x_997.y)) + x_1000);
  let x_1002 : vec3<f32> = u_xlat4;
  let x_1005 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1007 : vec2<f32> = (vec2<f32>(x_1002.y, x_1002.y) * vec2<f32>(x_1005.x, x_1005.y));
  let x_1008 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1007.x, x_1007.y, x_1008.z, x_1008.w);
  let x_1011 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1013 : vec3<f32> = u_xlat4;
  let x_1016 : vec4<f32> = u_xlat3;
  let x_1018 : vec2<f32> = ((vec2<f32>(x_1011.x, x_1011.y) * vec2<f32>(x_1013.x, x_1013.x)) + vec2<f32>(x_1016.x, x_1016.y));
  let x_1019 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1018.x, x_1018.y, x_1019.z, x_1019.w);
  let x_1022 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1024 : vec3<f32> = u_xlat4;
  let x_1027 : vec4<f32> = u_xlat3;
  let x_1029 : vec2<f32> = ((vec2<f32>(x_1022.x, x_1022.y) * vec2<f32>(x_1024.z, x_1024.z)) + vec2<f32>(x_1027.x, x_1027.y));
  let x_1030 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
  let x_1032 : vec4<f32> = u_xlat3;
  let x_1034 : vec2<f32> = (vec2<f32>(x_1032.x, x_1032.y) + vec2<f32>(1.0f, 1.0f));
  let x_1035 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1034.x, x_1034.y, x_1035.z, x_1035.w);
  let x_1037 : vec4<f32> = u_xlat3;
  let x_1039 : vec2<f32> = (vec2<f32>(x_1037.x, x_1037.y) * vec2<f32>(0.5f, 0.5f));
  let x_1040 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
  let x_1042 : vec4<f32> = u_xlat3;
  let x_1046 : vec2<f32> = clamp(vec2<f32>(x_1042.x, x_1042.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1047 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1046.x, x_1046.y, x_1047.z, x_1047.w);
  let x_1052 : vec4<f32> = u_xlat3;
  let x_1055 : f32 = x_34.x_GlobalMipBias.x;
  let x_1056 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1052.x, x_1052.y), x_1055);
  u_xlat4.x = x_1056.x;
  let x_1061 : f32 = u_xlat7.x;
  let x_1064 : f32 = u_xlat4.x;
  let x_1067 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_1061) * x_1064) + x_1067);
  let x_1071 : f32 = u_xlat0;
  let x_1073 : f32 = u_xlat11.x;
  u_xlat18 = (x_1071 + -(x_1073));
  let x_1079 : f32 = u_xlat18;
  let x_1082 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_1079) < x_1082);
  let x_1086 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_1086);
  let x_1090 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_1090);
  let x_1094 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_1094);
  let x_1098 : f32 = u_xlat4.x;
  let x_1100 : f32 = u_xlat4.z;
  u_xlat4.x = (x_1098 * x_1100);
  let x_1104 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1104) + 1.0f);
  let x_1109 : f32 = u_xlat11.x;
  let x_1111 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_1109 * x_1111);
  let x_1115 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1117 : vec4<f32> = u_xlat3;
  let x_1121 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1115.x, x_1115.y, x_1115.z) * vec3<f32>(x_1117.x, x_1117.x, x_1117.x)) + vec3<f32>(x_1121.x, x_1121.y, x_1121.z));
  let x_1125 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1127 : vec3<f32> = u_xlat10;
  let x_1130 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1125.x, x_1125.y, x_1125.z) * vec3<f32>(x_1127.x, x_1127.x, x_1127.x)) + x_1130);
  let x_1133 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1135 : vec3<f32> = u_xlat11;
  let x_1138 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_1133.x, x_1133.y, x_1133.z) * vec3<f32>(x_1135.x, x_1135.x, x_1135.x)) + x_1138);
  let x_1140 : vec3<f32> = u_xlat1;
  let x_1142 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_1140) + x_1142);
  let x_1144 : vec3<f32> = u_xlat11;
  let x_1145 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1144, vec3<f32>(x_1145.x, x_1145.y, x_1145.z));
  let x_1149 : f32 = u_xlat0;
  let x_1153 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1149) * 0.004f) + x_1153);
  let x_1157 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1157, 0.0f);
  let x_1160 : vec3<f32> = u_xlat11;
  let x_1161 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_1160, x_1161);
  let x_1165 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1165 + 0.0001f);
  let x_1169 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1169);
  let x_1173 : f32 = u_xlat10.x;
  let x_1175 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1173 * x_1175);
  let x_1179 : f32 = u_xlat4.x;
  let x_1181 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1179 * x_1181);
  let x_1184 : f32 = u_xlat23;
  let x_1185 : f32 = u_xlat22;
  let x_1188 : f32 = u_xlat3.x;
  u_xlat22 = ((x_1184 * x_1185) + x_1188);
  let x_1190 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1190.z, x_1190.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1193 : f32 = u_xlat23;
  u_xlat23 = fract(x_1193);
  let x_1195 : f32 = u_xlat23;
  u_xlat23 = (x_1195 * 52.982917786f);
  let x_1197 : f32 = u_xlat23;
  u_xlat23 = fract(x_1197);
  let x_1199 : f32 = u_xlat23;
  let x_1204 : vec2<f32> = (vec2<f32>(x_1199, x_1199) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1205 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1204.x, x_1204.y, x_1205.z, x_1205.w);
  let x_1208 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1208);
  let x_1210 : f32 = u_xlat23;
  u_xlat4.z = ((x_1210 * 2.0f) + -1.0f);
  let x_1215 : f32 = u_xlat3.y;
  u_xlat23 = (x_1215 * 6.283185482f);
  let x_1218 : f32 = u_xlat4.z;
  let x_1221 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1218) * x_1221) + 1.0f);
  let x_1226 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1226);
  let x_1229 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1229);
  let x_1232 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1232);
  let x_1236 : f32 = u_xlat3.x;
  let x_1238 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1236 * x_1238);
  let x_1242 : f32 = u_xlat3.x;
  let x_1244 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1242 * x_1244);
  let x_1247 : vec3<f32> = u_xlat4;
  let x_1250 : vec3<f32> = (x_1247 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_1251 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1250.x, x_1250.y, x_1250.z, x_1251.w);
  let x_1253 : vec4<f32> = u_xlat2;
  let x_1256 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(vec3<f32>(x_1253.x, x_1253.y, x_1253.z)), vec3<f32>(x_1256.x, x_1256.y, x_1256.z));
  let x_1260 : f32 = u_xlat23;
  u_xlatb23 = (x_1260 >= 0.0f);
  let x_1262 : bool = u_xlatb23;
  if (x_1262) {
    let x_1266 : vec4<f32> = u_xlat3;
    x_1263 = -(vec3<f32>(x_1266.x, x_1266.y, x_1266.z));
  } else {
    let x_1270 : vec4<f32> = u_xlat3;
    x_1263 = vec3<f32>(x_1270.x, x_1270.y, x_1270.z);
  }
  let x_1272 : vec3<f32> = x_1263;
  let x_1273 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1272.x, x_1272.y, x_1272.z, x_1273.w);
  let x_1275 : vec4<f32> = u_xlat3;
  let x_1278 : vec4<f32> = x_34.x_SSAOParams;
  let x_1281 : vec3<f32> = u_xlat1;
  let x_1282 : vec3<f32> = ((vec3<f32>(x_1275.x, x_1275.y, x_1275.z) * vec3<f32>(x_1278.y, x_1278.y, x_1278.y)) + x_1281);
  let x_1283 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1282.x, x_1282.y, x_1282.z, x_1283.w);
  let x_1285 : vec4<f32> = u_xlat3;
  let x_1288 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1290 : vec2<f32> = (vec2<f32>(x_1285.y, x_1285.y) * vec2<f32>(x_1288.x, x_1288.y));
  let x_1291 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1290.x, x_1291.y, x_1290.y);
  let x_1294 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1296 : vec4<f32> = u_xlat3;
  let x_1299 : vec3<f32> = u_xlat10;
  let x_1301 : vec2<f32> = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1296.x, x_1296.x)) + vec2<f32>(x_1299.x, x_1299.z));
  let x_1302 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1301.x, x_1301.y, x_1302.z, x_1302.w);
  let x_1305 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1307 : vec4<f32> = u_xlat3;
  let x_1310 : vec4<f32> = u_xlat3;
  let x_1312 : vec2<f32> = ((vec2<f32>(x_1305.x, x_1305.y) * vec2<f32>(x_1307.z, x_1307.z)) + vec2<f32>(x_1310.x, x_1310.y));
  let x_1313 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1312.x, x_1312.y, x_1313.z, x_1313.w);
  let x_1315 : vec4<f32> = u_xlat3;
  let x_1317 : vec2<f32> = (vec2<f32>(x_1315.x, x_1315.y) + vec2<f32>(1.0f, 1.0f));
  let x_1318 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1317.x, x_1317.y, x_1318.z, x_1318.w);
  let x_1320 : vec4<f32> = u_xlat3;
  let x_1322 : vec2<f32> = (vec2<f32>(x_1320.x, x_1320.y) * vec2<f32>(0.5f, 0.5f));
  let x_1323 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1322.x, x_1322.y, x_1323.z, x_1323.w);
  let x_1325 : vec4<f32> = u_xlat3;
  let x_1329 : vec2<f32> = clamp(vec2<f32>(x_1325.x, x_1325.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1330 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1329.x, x_1329.y, x_1330.z, x_1330.w);
  let x_1335 : vec4<f32> = u_xlat3;
  let x_1338 : f32 = x_34.x_GlobalMipBias.x;
  let x_1339 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1335.x, x_1335.y), x_1338);
  u_xlat23 = x_1339.x;
  let x_1342 : f32 = u_xlat7.x;
  let x_1344 : f32 = u_xlat23;
  let x_1347 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17.x = ((-(x_1342) * x_1344) + x_1347);
  let x_1351 : f32 = u_xlat0;
  let x_1353 : f32 = u_xlat17.x;
  u_xlat24 = (x_1351 + -(x_1353));
  let x_1357 : f32 = u_xlat24;
  let x_1360 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1357) < x_1360);
  let x_1362 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1362);
  let x_1364 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1364);
  let x_1366 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1366);
  let x_1368 : f32 = u_xlat23;
  let x_1369 : f32 = u_xlat24;
  u_xlat23 = (x_1368 * x_1369);
  let x_1372 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1372) + 1.0f);
  let x_1377 : f32 = u_xlat17.x;
  let x_1379 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17.x = (x_1377 * x_1379);
  let x_1383 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1385 : vec4<f32> = u_xlat3;
  let x_1389 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1383.x, x_1383.y, x_1383.z) * vec3<f32>(x_1385.x, x_1385.x, x_1385.x)) + vec3<f32>(x_1389.x, x_1389.y, x_1389.z));
  let x_1393 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1395 : vec3<f32> = u_xlat10;
  let x_1398 : vec3<f32> = u_xlat4;
  let x_1399 : vec3<f32> = ((vec3<f32>(x_1393.x, x_1393.y, x_1393.z) * vec3<f32>(x_1395.x, x_1395.x, x_1395.x)) + x_1398);
  let x_1400 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1399.x, x_1399.y, x_1400.z, x_1399.z);
  let x_1403 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1405 : vec2<f32> = u_xlat17;
  let x_1408 : vec4<f32> = u_xlat3;
  let x_1410 : vec3<f32> = ((vec3<f32>(x_1403.x, x_1403.y, x_1403.z) * vec3<f32>(x_1405.x, x_1405.x, x_1405.x)) + vec3<f32>(x_1408.x, x_1408.y, x_1408.w));
  let x_1411 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1410.x, x_1410.y, x_1410.z, x_1411.w);
  let x_1413 : vec3<f32> = u_xlat1;
  let x_1415 : vec4<f32> = u_xlat3;
  let x_1417 : vec3<f32> = (-(x_1413) + vec3<f32>(x_1415.x, x_1415.y, x_1415.z));
  let x_1418 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1417.x, x_1417.y, x_1417.z, x_1418.w);
  let x_1420 : vec4<f32> = u_xlat3;
  let x_1422 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1420.x, x_1420.y, x_1420.z), vec3<f32>(x_1422.x, x_1422.y, x_1422.z));
  let x_1425 : f32 = u_xlat0;
  let x_1428 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1425) * 0.004f) + x_1428);
  let x_1430 : f32 = u_xlat24;
  u_xlat24 = max(x_1430, 0.0f);
  let x_1432 : vec4<f32> = u_xlat3;
  let x_1434 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1432.x, x_1432.y, x_1432.z), vec3<f32>(x_1434.x, x_1434.y, x_1434.z));
  let x_1439 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1439 + 0.0001f);
  let x_1443 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1443);
  let x_1447 : f32 = u_xlat3.x;
  let x_1448 : f32 = u_xlat24;
  u_xlat3.x = (x_1447 * x_1448);
  let x_1452 : f32 = u_xlat3.x;
  let x_1453 : f32 = u_xlat23;
  let x_1455 : f32 = u_xlat22;
  u_xlat22 = ((x_1452 * x_1453) + x_1455);
  let x_1457 : vec2<f32> = u_xlat14;
  let x_1459 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat14 = ((x_1457 * vec2<f32>(x_1459.z, x_1459.z)) + vec2<f32>(6.248999596f, 14.600999832f));
  let x_1466 : vec2<f32> = u_xlat14;
  u_xlat14.x = dot(x_1466, vec2<f32>(0.067110561f, 0.00583715f));
  let x_1470 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1470);
  let x_1474 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1474 * 52.982917786f);
  let x_1478 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1478);
  let x_1481 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_1481.x, x_1481.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1488 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1488);
  let x_1492 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_1492 * 2.0f) + -1.0f);
  let x_1497 : f32 = u_xlat14.y;
  u_xlat14.x = (x_1497 * 6.283185482f);
  let x_1501 : f32 = u_xlat3.z;
  let x_1504 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_1501) * x_1504) + 1.0f);
  let x_1507 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_1507);
  let x_1510 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_1510);
  let x_1514 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_1514);
  let x_1517 : f32 = u_xlat21;
  let x_1519 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1517 * x_1519);
  let x_1522 : f32 = u_xlat21;
  let x_1524 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1522 * x_1524);
  let x_1527 : vec4<f32> = u_xlat2;
  let x_1530 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(-(vec3<f32>(x_1527.x, x_1527.y, x_1527.z)), vec3<f32>(x_1530.x, x_1530.y, x_1530.z));
  let x_1535 : f32 = u_xlat14.x;
  u_xlatb14 = (x_1535 >= 0.0f);
  let x_1537 : bool = u_xlatb14;
  if (x_1537) {
    let x_1541 : vec4<f32> = u_xlat3;
    x_1538 = -(vec3<f32>(x_1541.x, x_1541.y, x_1541.z));
  } else {
    let x_1545 : vec4<f32> = u_xlat3;
    x_1538 = vec3<f32>(x_1545.x, x_1545.y, x_1545.z);
  }
  let x_1547 : vec3<f32> = x_1538;
  let x_1548 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1547.x, x_1547.y, x_1547.z, x_1548.w);
  let x_1550 : vec4<f32> = u_xlat3;
  let x_1553 : vec4<f32> = x_34.x_SSAOParams;
  let x_1556 : vec3<f32> = u_xlat1;
  let x_1557 : vec3<f32> = ((vec3<f32>(x_1550.x, x_1550.y, x_1550.z) * vec3<f32>(x_1553.y, x_1553.y, x_1553.y)) + x_1556);
  let x_1558 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1557.x, x_1557.y, x_1557.z, x_1558.w);
  let x_1560 : vec4<f32> = u_xlat3;
  let x_1563 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_1560.y, x_1560.y) * vec2<f32>(x_1563.x, x_1563.y));
  let x_1567 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1569 : vec4<f32> = u_xlat3;
  let x_1572 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1567.x, x_1567.y) * vec2<f32>(x_1569.x, x_1569.x)) + x_1572);
  let x_1575 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1577 : vec4<f32> = u_xlat3;
  let x_1580 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1575.x, x_1575.y) * vec2<f32>(x_1577.z, x_1577.z)) + x_1580);
  let x_1582 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1582 + vec2<f32>(1.0f, 1.0f));
  let x_1584 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1584 * vec2<f32>(0.5f, 0.5f));
  let x_1586 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_1586, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1593 : vec2<f32> = u_xlat14;
  let x_1595 : f32 = x_34.x_GlobalMipBias.x;
  let x_1596 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1593, x_1595);
  u_xlat23 = x_1596.x;
  let x_1599 : f32 = u_xlat7.x;
  let x_1601 : f32 = u_xlat23;
  let x_1604 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_1599) * x_1601) + x_1604);
  let x_1608 : f32 = u_xlat7.x;
  let x_1610 : f32 = u_xlat0;
  u_xlat3.x = (-(x_1608) + x_1610);
  let x_1614 : f32 = u_xlat3.x;
  let x_1617 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_1614) < x_1617);
  let x_1619 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_1619);
  let x_1622 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1622);
  let x_1624 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1624);
  let x_1626 : f32 = u_xlat23;
  let x_1628 : f32 = u_xlat3.x;
  u_xlat23 = (x_1626 * x_1628);
  let x_1631 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_1631) + 1.0f);
  let x_1635 : f32 = u_xlat7.x;
  let x_1637 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_1635 * x_1637);
  let x_1641 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1643 : vec2<f32> = u_xlat14;
  let x_1647 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_1649 : vec3<f32> = ((vec3<f32>(x_1641.x, x_1641.y, x_1641.z) * vec3<f32>(x_1643.x, x_1643.x, x_1643.x)) + vec3<f32>(x_1647.x, x_1647.y, x_1647.z));
  let x_1650 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1649.x, x_1649.y, x_1649.z, x_1650.w);
  let x_1653 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1655 : f32 = u_xlat21;
  let x_1658 : vec4<f32> = u_xlat3;
  let x_1660 : vec3<f32> = ((vec3<f32>(x_1653.x, x_1653.y, x_1653.z) * vec3<f32>(x_1655, x_1655, x_1655)) + vec3<f32>(x_1658.x, x_1658.y, x_1658.z));
  let x_1661 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1660.x, x_1660.y, x_1660.z, x_1661.w);
  let x_1664 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1666 : vec3<f32> = u_xlat7;
  let x_1669 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_1664.x, x_1664.y, x_1664.z) * vec3<f32>(x_1666.x, x_1666.x, x_1666.x)) + vec3<f32>(x_1669.x, x_1669.y, x_1669.z));
  let x_1672 : vec3<f32> = u_xlat1;
  let x_1674 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_1672) + x_1674);
  let x_1676 : vec3<f32> = u_xlat7;
  let x_1677 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(x_1676, vec3<f32>(x_1677.x, x_1677.y, x_1677.z));
  let x_1681 : f32 = u_xlat0;
  let x_1685 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1681) * 0.004f) + x_1685);
  let x_1689 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1689, 0.0f);
  let x_1692 : vec3<f32> = u_xlat7;
  let x_1693 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_1692, x_1693);
  let x_1697 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1697 + 0.0001f);
  let x_1701 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_1701);
  let x_1705 : f32 = u_xlat7.x;
  let x_1707 : f32 = u_xlat1.x;
  u_xlat7.x = (x_1705 * x_1707);
  let x_1711 : f32 = u_xlat7.x;
  let x_1712 : f32 = u_xlat23;
  let x_1714 : f32 = u_xlat22;
  u_xlat7.x = ((x_1711 * x_1712) + x_1714);
  let x_1718 : f32 = u_xlat7.x;
  let x_1720 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_1718 * x_1720);
  let x_1724 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_1724);
  let x_1727 : f32 = u_xlat0;
  let x_1730 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_1727) * x_1730) + 1.0f);
  let x_1733 : f32 = u_xlat0;
  let x_1734 : f32 = u_xlat0;
  u_xlat0 = (x_1733 * x_1734);
  let x_1737 : f32 = u_xlat7.x;
  let x_1739 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_1737 * x_1739);
  let x_1742 : f32 = u_xlat0;
  let x_1744 : f32 = u_xlat7.x;
  u_xlat0 = (x_1742 * x_1744);
  let x_1746 : f32 = u_xlat0;
  u_xlat0 = (x_1746 * 0.25f);
  let x_1749 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1749, 0.0f, 1.0f);
  let x_1751 : f32 = u_xlat0;
  u_xlat0 = log2(x_1751);
  let x_1753 : f32 = u_xlat0;
  u_xlat0 = (x_1753 * 0.600000024f);
  let x_1756 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1756);
  let x_1760 : vec4<f32> = u_xlat2;
  let x_1763 : vec3<f32> = ((vec3<f32>(x_1760.x, x_1760.y, x_1760.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1764 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1764.x, x_1763.x, x_1763.y, x_1763.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

