type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlatb21 : bool;
  var x_424 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var x_435 : vec3<f32>;
  var x_445 : vec3<f32>;
  var x_453 : vec3<f32>;
  var x_463 : vec2<f32>;
  var u_xlat23 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlat10 : vec3<f32>;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlatb23 : bool;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var u_xlatb11 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_107 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_109 : vec2<f32> = vs_TEXCOORD0;
  let x_114 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_107.x, x_107.y, x_107.z) * vec3<f32>(x_109.x, x_109.x, x_109.x)) + vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_119 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_121 : vec2<f32> = u_xlat14;
  let x_124 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_119.x, x_119.y, x_119.z) * vec3<f32>(x_121.x, x_121.x, x_121.x)) + x_124);
  let x_128 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_130 : f32 = u_xlat21;
  let x_133 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_128.x, x_128.y, x_128.z) * vec3<f32>(x_130, x_130, x_130)) + x_133);
  let x_138 : f32 = x_34.x_SourceSize.z;
  u_xlat9.x = (x_138 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_143 : vec3<f32> = u_xlat9;
  let x_145 : vec2<f32> = vs_TEXCOORD0;
  let x_146 : vec2<f32> = (vec2<f32>(x_143.x, x_143.y) + x_145);
  let x_147 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_146.x, x_146.y, x_147.z);
  let x_152 : vec3<f32> = u_xlat9;
  let x_155 : f32 = x_34.x_GlobalMipBias.x;
  let x_156 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_152.x, x_152.y), x_155);
  u_xlat14.x = x_156.x;
  let x_160 : f32 = u_xlat7.x;
  let x_163 : f32 = u_xlat14.x;
  let x_166 : f32 = x_34.x_ProjectionParams.z;
  u_xlat9.z = ((-(x_160) * x_163) + x_166);
  let x_172 : f32 = x_34.x_SourceSize.z;
  u_xlat3.x = (x_172 * 2.0f);
  u_xlat3.y = 0.0f;
  u_xlat17.y = 0.0f;
  let x_180 : vec4<f32> = u_xlat3;
  let x_182 : vec2<f32> = vs_TEXCOORD0;
  let x_183 : vec2<f32> = (vec2<f32>(x_180.x, x_180.y) + x_182);
  let x_184 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_183.x, x_183.y, x_184.z);
  let x_189 : vec3<f32> = u_xlat4;
  let x_192 : f32 = x_34.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat14.x = x_193.x;
  let x_197 : f32 = u_xlat7.x;
  let x_200 : f32 = u_xlat14.x;
  let x_203 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.z = ((-(x_197) * x_200) + x_203);
  u_xlat12.x = 0.0f;
  let x_209 : f32 = x_34.x_SourceSize.w;
  u_xlat12.y = (x_209 * 2.0f);
  let x_212 : vec3<f32> = u_xlat12;
  let x_214 : vec2<f32> = vs_TEXCOORD0;
  let x_215 : vec2<f32> = (vec2<f32>(x_212.x, x_212.y) + x_214);
  let x_216 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_215.x, x_215.y, x_216.z);
  let x_221 : vec3<f32> = u_xlat12;
  let x_224 : f32 = x_34.x_GlobalMipBias.x;
  let x_225 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_221.x, x_221.y), x_224);
  u_xlat14.x = x_225.x;
  let x_229 : f32 = u_xlat7.x;
  let x_232 : f32 = u_xlat14.x;
  let x_235 : f32 = x_34.x_ProjectionParams.z;
  u_xlat12.z = ((-(x_229) * x_232) + x_235);
  u_xlat13.x = 0.0f;
  let x_241 : f32 = x_34.x_SourceSize.w;
  u_xlat13.y = (x_241 * -2.0f);
  let x_244 : vec3<f32> = u_xlat13;
  let x_246 : vec2<f32> = vs_TEXCOORD0;
  let x_247 : vec2<f32> = (vec2<f32>(x_244.x, x_244.y) + x_246);
  let x_248 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_247.x, x_247.y, x_248.z);
  let x_253 : vec3<f32> = u_xlat13;
  let x_256 : f32 = x_34.x_GlobalMipBias.x;
  let x_257 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_253.x, x_253.y), x_256);
  u_xlat14.x = x_257.x;
  let x_261 : f32 = u_xlat7.x;
  let x_264 : f32 = u_xlat14.x;
  let x_267 : f32 = x_34.x_ProjectionParams.z;
  u_xlat13.z = ((-(x_261) * x_264) + x_267);
  let x_271 : f32 = x_34.x_SourceSize.z;
  u_xlat17.x = x_271;
  let x_273 : vec2<f32> = u_xlat17;
  let x_279 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(x_273.x, x_273.y, x_273.x, x_273.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_279.x, x_279.y, x_279.x, x_279.y));
  let x_285 : vec4<f32> = u_xlat3;
  let x_288 : f32 = x_34.x_GlobalMipBias.x;
  let x_289 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_285.x, x_285.y), x_288);
  u_xlat14.x = x_289.x;
  let x_293 : f32 = u_xlat7.x;
  let x_296 : f32 = u_xlat14.x;
  let x_299 : f32 = x_34.x_ProjectionParams.z;
  u_xlat14.x = ((-(x_293) * x_296) + x_299);
  let x_305 : vec4<f32> = u_xlat3;
  let x_308 : f32 = x_34.x_GlobalMipBias.x;
  let x_309 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_305.z, x_305.w), x_308);
  u_xlat21 = x_309.x;
  let x_312 : f32 = u_xlat7.x;
  let x_314 : f32 = u_xlat21;
  let x_317 : f32 = x_34.x_ProjectionParams.z;
  u_xlat21 = ((-(x_312) * x_314) + x_317);
  u_xlat3.x = 2.0f;
  let x_321 : f32 = x_34.x_SourceSize.w;
  u_xlat3.y = x_321;
  let x_324 : vec4<f32> = u_xlat3;
  let x_327 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_324.x, x_324.y, x_324.x, x_324.y)) + vec4<f32>(x_327.x, x_327.y, x_327.x, x_327.y));
  let x_334 : vec4<f32> = u_xlat3;
  let x_337 : f32 = x_34.x_GlobalMipBias.x;
  let x_338 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_334.x, x_334.y), x_337);
  u_xlat22 = x_338.x;
  let x_341 : f32 = u_xlat7.x;
  let x_343 : f32 = u_xlat22;
  let x_346 : f32 = x_34.x_ProjectionParams.z;
  u_xlat22 = ((-(x_341) * x_343) + x_346);
  let x_352 : vec4<f32> = u_xlat3;
  let x_355 : f32 = x_34.x_GlobalMipBias.x;
  let x_356 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_352.z, x_352.w), x_355);
  u_xlat2.x = x_356.x;
  let x_360 : f32 = u_xlat7.x;
  let x_363 : f32 = u_xlat2.x;
  let x_366 : f32 = x_34.x_ProjectionParams.z;
  u_xlat2.x = ((-(x_360) * x_363) + x_366);
  let x_370 : f32 = u_xlat9.z;
  let x_373 : f32 = u_xlat14.x;
  u_xlat14.x = ((x_370 * 2.0f) + -(x_373));
  let x_378 : f32 = u_xlat4.z;
  let x_380 : f32 = u_xlat21;
  u_xlat14.y = ((x_378 * 2.0f) + -(x_380));
  let x_384 : f32 = u_xlat0;
  let x_387 : vec2<f32> = u_xlat14;
  u_xlat14 = (-(vec2<f32>(x_384, x_384)) + x_387);
  let x_390 : f32 = u_xlat14.x;
  let x_393 : f32 = u_xlat14.y;
  u_xlatb14 = (abs(x_390) < abs(x_393));
  let x_397 : f32 = u_xlat13.z;
  let x_400 : f32 = u_xlat2.x;
  u_xlat21 = ((x_397 * 2.0f) + -(x_400));
  let x_403 : f32 = u_xlat0;
  let x_405 : f32 = u_xlat21;
  u_xlat21 = (-(x_403) + x_405);
  let x_408 : f32 = u_xlat12.z;
  let x_410 : f32 = u_xlat22;
  u_xlat22 = ((x_408 * 2.0f) + -(x_410));
  let x_413 : f32 = u_xlat0;
  let x_415 : f32 = u_xlat22;
  u_xlat22 = (-(x_413) + x_415);
  let x_418 : f32 = u_xlat21;
  let x_420 : f32 = u_xlat22;
  u_xlatb21 = (abs(x_418) < abs(x_420));
  let x_423 : bool = u_xlatb14;
  if (x_423) {
    let x_427 : vec3<f32> = u_xlat9;
    x_424 = x_427;
  } else {
    let x_429 : vec3<f32> = u_xlat13;
    x_424 = x_429;
  }
  let x_430 : vec3<f32> = x_424;
  let x_431 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_430.x, x_430.y, x_430.z, x_431.w);
  let x_434 : bool = u_xlatb14;
  if (x_434) {
    let x_438 : vec3<f32> = u_xlat13;
    x_435 = x_438;
  } else {
    let x_440 : vec3<f32> = u_xlat4;
    x_435 = x_440;
  }
  let x_441 : vec3<f32> = x_435;
  let x_442 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_442.x, x_441.x, x_441.y, x_441.z);
  let x_444 : bool = u_xlatb14;
  if (x_444) {
    let x_448 : vec3<f32> = u_xlat12;
    x_445 = x_448;
  } else {
    let x_450 : vec3<f32> = u_xlat4;
    x_445 = x_450;
  }
  let x_451 : vec3<f32> = x_445;
  u_xlat4 = x_451;
  let x_452 : bool = u_xlatb14;
  if (x_452) {
    let x_456 : vec3<f32> = u_xlat9;
    x_453 = x_456;
  } else {
    let x_458 : vec3<f32> = u_xlat12;
    x_453 = x_458;
  }
  let x_459 : vec3<f32> = x_453;
  let x_460 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_460.x, x_459.x, x_459.y, x_459.z);
  let x_462 : bool = u_xlatb21;
  if (x_462) {
    let x_466 : vec4<f32> = u_xlat3;
    x_463 = vec2<f32>(x_466.x, x_466.y);
  } else {
    let x_469 : vec3<f32> = u_xlat4;
    x_463 = vec2<f32>(x_469.x, x_469.y);
  }
  let x_471 : vec2<f32> = x_463;
  let x_472 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_471.x, x_471.y, x_472.z, x_472.w);
  let x_475 : f32 = u_xlat3.z;
  u_xlat6.x = x_475;
  let x_478 : f32 = u_xlat4.z;
  u_xlat2.x = x_478;
  let x_480 : bool = u_xlatb21;
  let x_481 : vec4<f32> = u_xlat6;
  let x_482 : vec4<f32> = u_xlat2;
  u_xlat2 = select(x_482, x_481, vec4<bool>(x_480, x_480, x_480, x_480));
  let x_487 : f32 = u_xlat2.z;
  u_xlat14.x = (-(x_487) + 1.0f);
  let x_491 : vec4<f32> = u_xlat2;
  let x_494 : vec4<f32> = x_34.x_ProjectionParams;
  let x_496 : vec2<f32> = (vec2<f32>(x_491.w, x_491.x) * vec2<f32>(x_494.w, x_494.w));
  let x_497 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_496.x, x_497.y, x_496.y, x_497.w);
  let x_500 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_502 : vec4<f32> = u_xlat2;
  let x_506 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_500.z, x_500.x, x_500.y) * vec3<f32>(x_502.y, x_502.y, x_502.y)) + vec3<f32>(x_506.z, x_506.x, x_506.y));
  let x_510 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_512 : vec2<f32> = u_xlat14;
  let x_515 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_510.z, x_510.x, x_510.y) * vec3<f32>(x_512.x, x_512.x, x_512.x)) + x_515);
  let x_518 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_520 : vec4<f32> = u_xlat2;
  let x_523 : vec3<f32> = u_xlat4;
  let x_524 : vec3<f32> = ((vec3<f32>(x_518.z, x_518.x, x_518.y) * vec3<f32>(x_520.x, x_520.x, x_520.x)) + x_523);
  let x_525 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_524.z);
  let x_527 : vec3<f32> = u_xlat1;
  let x_530 : vec4<f32> = u_xlat2;
  let x_532 : vec3<f32> = (-(vec3<f32>(x_527.z, x_527.x, x_527.y)) + vec3<f32>(x_530.x, x_530.y, x_530.w));
  let x_533 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_532.z);
  let x_536 : f32 = u_xlat3.y;
  u_xlat14.x = (-(x_536) + 1.0f);
  let x_541 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_543 : vec4<f32> = u_xlat3;
  let x_547 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_549 : vec3<f32> = ((vec3<f32>(x_541.y, x_541.z, x_541.x) * vec3<f32>(x_543.x, x_543.x, x_543.x)) + vec3<f32>(x_547.y, x_547.z, x_547.x));
  let x_550 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_549.x, x_549.y, x_549.z, x_550.w);
  let x_553 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_555 : vec2<f32> = u_xlat14;
  let x_558 : vec4<f32> = u_xlat3;
  let x_560 : vec3<f32> = ((vec3<f32>(x_553.y, x_553.z, x_553.x) * vec3<f32>(x_555.x, x_555.x, x_555.x)) + vec3<f32>(x_558.x, x_558.y, x_558.z));
  let x_561 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_560.x, x_560.y, x_560.z, x_561.w);
  let x_564 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_566 : vec4<f32> = u_xlat2;
  let x_569 : vec4<f32> = u_xlat3;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.y, x_564.z, x_564.x) * vec3<f32>(x_566.z, x_566.z, x_566.z)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : vec3<f32> = u_xlat1;
  let x_577 : vec4<f32> = u_xlat3;
  let x_579 : vec3<f32> = (-(vec3<f32>(x_574.y, x_574.z, x_574.x)) + vec3<f32>(x_577.x, x_577.y, x_577.z));
  let x_580 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
  let x_582 : vec4<f32> = u_xlat2;
  let x_584 : vec4<f32> = u_xlat3;
  u_xlat4 = (vec3<f32>(x_582.x, x_582.y, x_582.w) * vec3<f32>(x_584.x, x_584.y, x_584.z));
  let x_587 : vec4<f32> = u_xlat2;
  let x_589 : vec4<f32> = u_xlat3;
  let x_592 : vec3<f32> = u_xlat4;
  let x_594 : vec3<f32> = ((vec3<f32>(x_587.w, x_587.x, x_587.y) * vec3<f32>(x_589.y, x_589.z, x_589.x)) + -(x_592));
  let x_595 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_594.x, x_594.y, x_594.z, x_595.w);
  let x_597 : vec4<f32> = u_xlat2;
  let x_599 : vec4<f32> = u_xlat2;
  u_xlat14.x = dot(vec3<f32>(x_597.x, x_597.y, x_597.z), vec3<f32>(x_599.x, x_599.y, x_599.z));
  let x_604 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_604);
  let x_607 : vec2<f32> = u_xlat14;
  let x_609 : vec4<f32> = u_xlat2;
  let x_611 : vec3<f32> = (vec3<f32>(x_607.x, x_607.x, x_607.x) * vec3<f32>(x_609.x, x_609.y, x_609.z));
  let x_612 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_611.x, x_611.y, x_611.z, x_612.w);
  let x_614 : vec2<f32> = vs_TEXCOORD0;
  let x_617 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = (x_614 + vec2<f32>(x_617.z, x_617.w));
  let x_620 : vec2<f32> = u_xlat14;
  let x_622 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  let x_624 : vec2<f32> = (x_620 * vec2<f32>(x_622.x, x_622.y));
  let x_625 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_624.x, x_624.y, x_625.z, x_625.w);
  let x_632 : vec4<f32> = u_xlat3;
  let x_635 : f32 = x_34.x_GlobalMipBias.x;
  let x_636 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_632.x, x_632.y), x_635);
  u_xlat22 = x_636.w;
  let x_639 : f32 = u_xlat22;
  u_xlat23 = fract(x_639);
  let x_641 : f32 = u_xlat23;
  u_xlat3.z = ((x_641 * 2.0f) + -1.0f);
  let x_646 : f32 = u_xlat22;
  u_xlat22 = (x_646 + 0.9296875f);
  let x_649 : f32 = u_xlat22;
  u_xlat22 = (x_649 * 628.31854248f);
  let x_653 : f32 = u_xlat3.z;
  let x_656 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_653) * x_656) + 1.0f);
  let x_659 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_659);
  let x_661 : f32 = u_xlat22;
  u_xlat4.x = sin(x_661);
  let x_665 : f32 = u_xlat22;
  u_xlat5.x = cos(x_665);
  let x_668 : f32 = u_xlat23;
  let x_670 : f32 = u_xlat5.x;
  u_xlat3.x = (x_668 * x_670);
  let x_673 : f32 = u_xlat23;
  let x_675 : f32 = u_xlat4.x;
  u_xlat3.y = (x_673 * x_675);
  let x_678 : vec4<f32> = u_xlat2;
  let x_680 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec3<f32>(x_678.x, x_678.y, x_678.z), vec3<f32>(x_680.x, x_680.y, x_680.z));
  let x_684 : f32 = u_xlat22;
  u_xlatb22 = (x_684 >= 0.0f);
  let x_686 : bool = u_xlatb22;
  u_xlat22 = select(-1.0f, 1.0f, x_686);
  let x_688 : f32 = u_xlat22;
  let x_690 : vec4<f32> = u_xlat3;
  let x_692 : vec3<f32> = (vec3<f32>(x_688, x_688, x_688) * vec3<f32>(x_690.x, x_690.y, x_690.z));
  let x_693 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
  let x_695 : vec4<f32> = u_xlat3;
  let x_698 : vec4<f32> = x_34.x_SSAOParams;
  let x_700 : vec3<f32> = (vec3<f32>(x_695.x, x_695.y, x_695.z) * vec3<f32>(x_698.y, x_698.y, x_698.y));
  let x_701 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_700.x, x_700.y, x_700.z, x_701.w);
  let x_703 : vec4<f32> = u_xlat3;
  let x_708 : vec3<f32> = u_xlat1;
  let x_709 : vec3<f32> = ((vec3<f32>(x_703.x, x_703.y, x_703.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_708);
  let x_710 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_709.x, x_709.y, x_709.z, x_710.w);
  let x_713 : vec4<f32> = u_xlat3;
  let x_717 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_719 : vec2<f32> = (vec2<f32>(x_713.y, x_713.y) * vec2<f32>(x_717.x, x_717.y));
  let x_720 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_719.x, x_720.y, x_719.y);
  let x_723 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_725 : vec4<f32> = u_xlat3;
  let x_728 : vec3<f32> = u_xlat10;
  let x_730 : vec2<f32> = ((vec2<f32>(x_723.x, x_723.y) * vec2<f32>(x_725.x, x_725.x)) + vec2<f32>(x_728.x, x_728.z));
  let x_731 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_730.x, x_730.y, x_731.z, x_731.w);
  let x_734 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_736 : vec4<f32> = u_xlat3;
  let x_739 : vec4<f32> = u_xlat3;
  let x_741 : vec2<f32> = ((vec2<f32>(x_734.x, x_734.y) * vec2<f32>(x_736.z, x_736.z)) + vec2<f32>(x_739.x, x_739.y));
  let x_742 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_741.x, x_741.y, x_742.z, x_742.w);
  let x_744 : vec4<f32> = u_xlat3;
  let x_747 : vec2<f32> = (vec2<f32>(x_744.x, x_744.y) + vec2<f32>(1.0f, 1.0f));
  let x_748 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
  let x_750 : vec4<f32> = u_xlat3;
  let x_753 : vec2<f32> = (vec2<f32>(x_750.x, x_750.y) * vec2<f32>(0.5f, 0.5f));
  let x_754 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_753.x, x_753.y, x_754.z, x_754.w);
  let x_756 : vec4<f32> = u_xlat3;
  let x_760 : vec2<f32> = clamp(vec2<f32>(x_756.x, x_756.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_761 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_760.x, x_760.y, x_761.z, x_761.w);
  let x_766 : vec4<f32> = u_xlat3;
  let x_769 : f32 = x_34.x_GlobalMipBias.x;
  let x_770 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_766.x, x_766.y), x_769);
  u_xlat22 = x_770.x;
  let x_773 : f32 = u_xlat7.x;
  let x_775 : f32 = u_xlat22;
  let x_778 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_773) * x_775) + x_778);
  let x_780 : f32 = u_xlat0;
  let x_781 : f32 = u_xlat23;
  u_xlat17.x = (x_780 + -(x_781));
  let x_787 : f32 = u_xlat17.x;
  let x_790 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_787) < x_790);
  let x_792 : bool = u_xlatb17;
  u_xlat17.x = select(0.0f, 1.0f, x_792);
  let x_795 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_795);
  let x_797 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_797);
  let x_799 : f32 = u_xlat22;
  let x_801 : f32 = u_xlat17.x;
  u_xlat22 = (x_799 * x_801);
  let x_804 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_804) + 1.0f);
  let x_808 : f32 = u_xlat23;
  let x_810 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_808 * x_810);
  let x_813 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_815 : vec4<f32> = u_xlat3;
  let x_819 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_821 : vec3<f32> = ((vec3<f32>(x_813.x, x_813.y, x_813.z) * vec3<f32>(x_815.x, x_815.x, x_815.x)) + vec3<f32>(x_819.x, x_819.y, x_819.z));
  let x_822 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_821.x, x_822.y, x_821.y, x_821.z);
  let x_825 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_827 : vec3<f32> = u_xlat10;
  let x_830 : vec4<f32> = u_xlat3;
  let x_832 : vec3<f32> = ((vec3<f32>(x_825.x, x_825.y, x_825.z) * vec3<f32>(x_827.x, x_827.x, x_827.x)) + vec3<f32>(x_830.x, x_830.z, x_830.w));
  let x_833 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_832.x, x_832.y, x_832.z, x_833.w);
  let x_836 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_838 : f32 = u_xlat23;
  let x_841 : vec4<f32> = u_xlat3;
  let x_843 : vec3<f32> = ((vec3<f32>(x_836.x, x_836.y, x_836.z) * vec3<f32>(x_838, x_838, x_838)) + vec3<f32>(x_841.x, x_841.y, x_841.z));
  let x_844 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_843.x, x_843.y, x_843.z, x_844.w);
  let x_846 : vec3<f32> = u_xlat1;
  let x_848 : vec4<f32> = u_xlat3;
  let x_850 : vec3<f32> = (-(x_846) + vec3<f32>(x_848.x, x_848.y, x_848.z));
  let x_851 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_850.z, x_851.w);
  let x_853 : vec4<f32> = u_xlat3;
  let x_855 : vec4<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_853.x, x_853.y, x_853.z), vec3<f32>(x_855.x, x_855.y, x_855.z));
  let x_858 : f32 = u_xlat0;
  let x_862 : f32 = u_xlat23;
  u_xlat23 = ((-(x_858) * 0.004f) + x_862);
  let x_864 : f32 = u_xlat23;
  u_xlat23 = max(x_864, 0.0f);
  let x_866 : vec4<f32> = u_xlat3;
  let x_868 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_866.x, x_866.y, x_866.z), vec3<f32>(x_868.x, x_868.y, x_868.z));
  let x_873 : f32 = u_xlat3.x;
  u_xlat3.x = (x_873 + 0.0001f);
  let x_878 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_878);
  let x_881 : f32 = u_xlat23;
  let x_883 : f32 = u_xlat3.x;
  u_xlat23 = (x_881 * x_883);
  let x_885 : vec2<f32> = u_xlat14;
  let x_888 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_885.x, x_885.y, x_885.x, x_885.y) * vec4<f32>(x_888.x, x_888.y, x_888.x, x_888.y)) + vec4<f32>(0.125f, 0.125f, 0.25f, 0.25f));
  let x_898 : vec4<f32> = u_xlat3;
  let x_901 : f32 = x_34.x_GlobalMipBias.x;
  let x_902 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_898.x, x_898.y), x_901);
  u_xlat3.x = x_902.w;
  let x_905 : vec4<f32> = u_xlat3;
  let x_910 : vec2<f32> = (vec2<f32>(x_905.x, x_905.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_911 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_910.x, x_910.y, x_911.z, x_911.w);
  let x_914 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_914);
  let x_918 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_918 * 2.0f) + -1.0f);
  let x_923 : f32 = u_xlat3.y;
  u_xlat3.x = (x_923 * 628.31854248f);
  let x_927 : f32 = u_xlat4.z;
  let x_930 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_927) * x_930) + 1.0f);
  let x_935 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_935);
  let x_939 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_939);
  let x_943 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_943);
  let x_947 : f32 = u_xlat10.x;
  let x_949 : f32 = u_xlat5.x;
  u_xlat4.x = (x_947 * x_949);
  let x_953 : f32 = u_xlat3.x;
  let x_955 : f32 = u_xlat10.x;
  u_xlat4.y = (x_953 * x_955);
  let x_958 : vec4<f32> = u_xlat2;
  let x_960 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(vec3<f32>(x_958.x, x_958.y, x_958.z), x_960);
  let x_965 : f32 = u_xlat3.x;
  u_xlatb3 = (x_965 >= 0.0f);
  let x_967 : bool = u_xlatb3;
  u_xlat3.x = select(-1.0f, 1.0f, x_967);
  let x_970 : vec4<f32> = u_xlat3;
  let x_972 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_970.x, x_970.x, x_970.x) * x_972);
  let x_974 : vec3<f32> = u_xlat4;
  let x_976 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_974 * vec3<f32>(x_976.y, x_976.y, x_976.y));
  let x_979 : vec3<f32> = u_xlat4;
  let x_983 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_979 * vec3<f32>(0.114062503f, 0.114062503f, 0.114062503f)) + x_983);
  let x_985 : vec3<f32> = u_xlat4;
  let x_988 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_990 : vec2<f32> = (vec2<f32>(x_985.y, x_985.y) * vec2<f32>(x_988.x, x_988.y));
  let x_991 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_990.x, x_990.y, x_991.z, x_991.w);
  let x_994 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_996 : vec3<f32> = u_xlat4;
  let x_999 : vec4<f32> = u_xlat3;
  let x_1001 : vec2<f32> = ((vec2<f32>(x_994.x, x_994.y) * vec2<f32>(x_996.x, x_996.x)) + vec2<f32>(x_999.x, x_999.y));
  let x_1002 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1001.x, x_1001.y, x_1002.z, x_1002.w);
  let x_1005 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1007 : vec3<f32> = u_xlat4;
  let x_1010 : vec4<f32> = u_xlat3;
  let x_1012 : vec2<f32> = ((vec2<f32>(x_1005.x, x_1005.y) * vec2<f32>(x_1007.z, x_1007.z)) + vec2<f32>(x_1010.x, x_1010.y));
  let x_1013 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1012.x, x_1012.y, x_1013.z, x_1013.w);
  let x_1015 : vec4<f32> = u_xlat3;
  let x_1017 : vec2<f32> = (vec2<f32>(x_1015.x, x_1015.y) + vec2<f32>(1.0f, 1.0f));
  let x_1018 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
  let x_1020 : vec4<f32> = u_xlat3;
  let x_1022 : vec2<f32> = (vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(0.5f, 0.5f));
  let x_1023 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1022.x, x_1022.y, x_1023.z, x_1023.w);
  let x_1025 : vec4<f32> = u_xlat3;
  let x_1029 : vec2<f32> = clamp(vec2<f32>(x_1025.x, x_1025.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1030 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
  let x_1035 : vec4<f32> = u_xlat3;
  let x_1038 : f32 = x_34.x_GlobalMipBias.x;
  let x_1039 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1035.x, x_1035.y), x_1038);
  u_xlat4.x = x_1039.x;
  let x_1044 : f32 = u_xlat7.x;
  let x_1047 : f32 = u_xlat4.x;
  let x_1050 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_1044) * x_1047) + x_1050);
  let x_1054 : f32 = u_xlat0;
  let x_1056 : f32 = u_xlat11.x;
  u_xlat18 = (x_1054 + -(x_1056));
  let x_1062 : f32 = u_xlat18;
  let x_1065 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_1062) < x_1065);
  let x_1069 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_1069);
  let x_1073 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_1073);
  let x_1077 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_1077);
  let x_1081 : f32 = u_xlat4.x;
  let x_1083 : f32 = u_xlat4.z;
  u_xlat4.x = (x_1081 * x_1083);
  let x_1087 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1087) + 1.0f);
  let x_1092 : f32 = u_xlat11.x;
  let x_1094 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_1092 * x_1094);
  let x_1098 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1100 : vec4<f32> = u_xlat3;
  let x_1104 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1098.x, x_1098.y, x_1098.z) * vec3<f32>(x_1100.x, x_1100.x, x_1100.x)) + vec3<f32>(x_1104.x, x_1104.y, x_1104.z));
  let x_1108 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1110 : vec3<f32> = u_xlat10;
  let x_1113 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1108.x, x_1108.y, x_1108.z) * vec3<f32>(x_1110.x, x_1110.x, x_1110.x)) + x_1113);
  let x_1116 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1118 : vec3<f32> = u_xlat11;
  let x_1121 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_1116.x, x_1116.y, x_1116.z) * vec3<f32>(x_1118.x, x_1118.x, x_1118.x)) + x_1121);
  let x_1123 : vec3<f32> = u_xlat1;
  let x_1125 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_1123) + x_1125);
  let x_1127 : vec3<f32> = u_xlat11;
  let x_1128 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1127, vec3<f32>(x_1128.x, x_1128.y, x_1128.z));
  let x_1132 : f32 = u_xlat0;
  let x_1136 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1132) * 0.004f) + x_1136);
  let x_1140 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1140, 0.0f);
  let x_1143 : vec3<f32> = u_xlat11;
  let x_1144 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_1143, x_1144);
  let x_1148 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1148 + 0.0001f);
  let x_1152 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1152);
  let x_1156 : f32 = u_xlat10.x;
  let x_1158 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1156 * x_1158);
  let x_1162 : f32 = u_xlat4.x;
  let x_1164 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1162 * x_1164);
  let x_1167 : f32 = u_xlat23;
  let x_1168 : f32 = u_xlat22;
  let x_1171 : f32 = u_xlat3.x;
  u_xlat22 = ((x_1167 * x_1168) + x_1171);
  let x_1176 : vec4<f32> = u_xlat3;
  let x_1179 : f32 = x_34.x_GlobalMipBias.x;
  let x_1180 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1176.z, x_1176.w), x_1179);
  u_xlat23 = x_1180.w;
  let x_1182 : f32 = u_xlat23;
  let x_1187 : vec2<f32> = (vec2<f32>(x_1182, x_1182) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1188 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1187.x, x_1187.y, x_1188.z, x_1188.w);
  let x_1191 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1191);
  let x_1193 : f32 = u_xlat23;
  u_xlat4.z = ((x_1193 * 2.0f) + -1.0f);
  let x_1198 : f32 = u_xlat3.y;
  u_xlat23 = (x_1198 * 628.31854248f);
  let x_1201 : f32 = u_xlat4.z;
  let x_1204 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1201) * x_1204) + 1.0f);
  let x_1209 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1209);
  let x_1212 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1212);
  let x_1215 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1215);
  let x_1219 : f32 = u_xlat3.x;
  let x_1221 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1219 * x_1221);
  let x_1225 : f32 = u_xlat3.x;
  let x_1227 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1225 * x_1227);
  let x_1230 : vec4<f32> = u_xlat2;
  let x_1232 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(vec3<f32>(x_1230.x, x_1230.y, x_1230.z), x_1232);
  let x_1235 : f32 = u_xlat23;
  u_xlatb23 = (x_1235 >= 0.0f);
  let x_1237 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1237);
  let x_1239 : f32 = u_xlat23;
  let x_1241 : vec3<f32> = u_xlat4;
  let x_1242 : vec3<f32> = (vec3<f32>(x_1239, x_1239, x_1239) * x_1241);
  let x_1243 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1242.x, x_1242.y, x_1242.z, x_1243.w);
  let x_1245 : vec4<f32> = u_xlat3;
  let x_1248 : vec4<f32> = x_34.x_SSAOParams;
  let x_1250 : vec3<f32> = (vec3<f32>(x_1245.x, x_1245.y, x_1245.z) * vec3<f32>(x_1248.y, x_1248.y, x_1248.y));
  let x_1251 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1250.x, x_1250.y, x_1250.z, x_1251.w);
  let x_1253 : vec4<f32> = u_xlat3;
  let x_1258 : vec3<f32> = u_xlat1;
  let x_1259 : vec3<f32> = ((vec3<f32>(x_1253.x, x_1253.y, x_1253.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1258);
  let x_1260 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1259.x, x_1259.y, x_1259.z, x_1260.w);
  let x_1262 : vec4<f32> = u_xlat3;
  let x_1265 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1267 : vec2<f32> = (vec2<f32>(x_1262.y, x_1262.y) * vec2<f32>(x_1265.x, x_1265.y));
  let x_1268 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1267.x, x_1268.y, x_1267.y);
  let x_1271 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1273 : vec4<f32> = u_xlat3;
  let x_1276 : vec3<f32> = u_xlat10;
  let x_1278 : vec2<f32> = ((vec2<f32>(x_1271.x, x_1271.y) * vec2<f32>(x_1273.x, x_1273.x)) + vec2<f32>(x_1276.x, x_1276.z));
  let x_1279 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1278.x, x_1278.y, x_1279.z, x_1279.w);
  let x_1282 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1284 : vec4<f32> = u_xlat3;
  let x_1287 : vec4<f32> = u_xlat3;
  let x_1289 : vec2<f32> = ((vec2<f32>(x_1282.x, x_1282.y) * vec2<f32>(x_1284.z, x_1284.z)) + vec2<f32>(x_1287.x, x_1287.y));
  let x_1290 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1289.x, x_1289.y, x_1290.z, x_1290.w);
  let x_1292 : vec4<f32> = u_xlat3;
  let x_1294 : vec2<f32> = (vec2<f32>(x_1292.x, x_1292.y) + vec2<f32>(1.0f, 1.0f));
  let x_1295 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1294.x, x_1294.y, x_1295.z, x_1295.w);
  let x_1297 : vec4<f32> = u_xlat3;
  let x_1299 : vec2<f32> = (vec2<f32>(x_1297.x, x_1297.y) * vec2<f32>(0.5f, 0.5f));
  let x_1300 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1299.x, x_1299.y, x_1300.z, x_1300.w);
  let x_1302 : vec4<f32> = u_xlat3;
  let x_1306 : vec2<f32> = clamp(vec2<f32>(x_1302.x, x_1302.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1307 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1306.x, x_1306.y, x_1307.z, x_1307.w);
  let x_1312 : vec4<f32> = u_xlat3;
  let x_1315 : f32 = x_34.x_GlobalMipBias.x;
  let x_1316 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1312.x, x_1312.y), x_1315);
  u_xlat23 = x_1316.x;
  let x_1319 : f32 = u_xlat7.x;
  let x_1321 : f32 = u_xlat23;
  let x_1324 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17.x = ((-(x_1319) * x_1321) + x_1324);
  let x_1328 : f32 = u_xlat0;
  let x_1330 : f32 = u_xlat17.x;
  u_xlat24 = (x_1328 + -(x_1330));
  let x_1334 : f32 = u_xlat24;
  let x_1337 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1334) < x_1337);
  let x_1339 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1339);
  let x_1341 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1341);
  let x_1343 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1343);
  let x_1345 : f32 = u_xlat23;
  let x_1346 : f32 = u_xlat24;
  u_xlat23 = (x_1345 * x_1346);
  let x_1349 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1349) + 1.0f);
  let x_1354 : f32 = u_xlat17.x;
  let x_1356 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17.x = (x_1354 * x_1356);
  let x_1360 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1362 : vec4<f32> = u_xlat3;
  let x_1366 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1360.x, x_1360.y, x_1360.z) * vec3<f32>(x_1362.x, x_1362.x, x_1362.x)) + vec3<f32>(x_1366.x, x_1366.y, x_1366.z));
  let x_1370 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1372 : vec3<f32> = u_xlat10;
  let x_1375 : vec3<f32> = u_xlat4;
  let x_1376 : vec3<f32> = ((vec3<f32>(x_1370.x, x_1370.y, x_1370.z) * vec3<f32>(x_1372.x, x_1372.x, x_1372.x)) + x_1375);
  let x_1377 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1376.x, x_1376.y, x_1377.z, x_1376.z);
  let x_1380 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1382 : vec2<f32> = u_xlat17;
  let x_1385 : vec4<f32> = u_xlat3;
  let x_1387 : vec3<f32> = ((vec3<f32>(x_1380.x, x_1380.y, x_1380.z) * vec3<f32>(x_1382.x, x_1382.x, x_1382.x)) + vec3<f32>(x_1385.x, x_1385.y, x_1385.w));
  let x_1388 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1387.x, x_1387.y, x_1387.z, x_1388.w);
  let x_1390 : vec3<f32> = u_xlat1;
  let x_1392 : vec4<f32> = u_xlat3;
  let x_1394 : vec3<f32> = (-(x_1390) + vec3<f32>(x_1392.x, x_1392.y, x_1392.z));
  let x_1395 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1394.x, x_1394.y, x_1394.z, x_1395.w);
  let x_1397 : vec4<f32> = u_xlat3;
  let x_1399 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1397.x, x_1397.y, x_1397.z), vec3<f32>(x_1399.x, x_1399.y, x_1399.z));
  let x_1402 : f32 = u_xlat0;
  let x_1405 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1402) * 0.004f) + x_1405);
  let x_1407 : f32 = u_xlat24;
  u_xlat24 = max(x_1407, 0.0f);
  let x_1409 : vec4<f32> = u_xlat3;
  let x_1411 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1409.x, x_1409.y, x_1409.z), vec3<f32>(x_1411.x, x_1411.y, x_1411.z));
  let x_1416 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1416 + 0.0001f);
  let x_1420 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1420);
  let x_1424 : f32 = u_xlat3.x;
  let x_1425 : f32 = u_xlat24;
  u_xlat3.x = (x_1424 * x_1425);
  let x_1429 : f32 = u_xlat3.x;
  let x_1430 : f32 = u_xlat23;
  let x_1432 : f32 = u_xlat22;
  u_xlat22 = ((x_1429 * x_1430) + x_1432);
  let x_1434 : vec2<f32> = u_xlat14;
  let x_1437 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1434.x, x_1434.y, x_1434.x, x_1434.y) * vec4<f32>(x_1437.x, x_1437.y, x_1437.x, x_1437.y)) + vec4<f32>(0.375f, 0.375f, 0.5f, 0.5f));
  let x_1446 : vec4<f32> = u_xlat3;
  let x_1449 : f32 = x_34.x_GlobalMipBias.x;
  let x_1450 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1446.x, x_1446.y), x_1449);
  u_xlat23 = x_1450.w;
  let x_1452 : f32 = u_xlat23;
  let x_1457 : vec2<f32> = (vec2<f32>(x_1452, x_1452) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1458 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1457.x, x_1457.y, x_1458.z, x_1458.w);
  let x_1461 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1461);
  let x_1463 : f32 = u_xlat23;
  u_xlat4.z = ((x_1463 * 2.0f) + -1.0f);
  let x_1468 : f32 = u_xlat3.y;
  u_xlat23 = (x_1468 * 628.31854248f);
  let x_1471 : f32 = u_xlat4.z;
  let x_1474 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1471) * x_1474) + 1.0f);
  let x_1479 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1479);
  let x_1482 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1482);
  let x_1485 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1485);
  let x_1489 : f32 = u_xlat3.x;
  let x_1491 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1489 * x_1491);
  let x_1495 : f32 = u_xlat3.x;
  let x_1497 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1495 * x_1497);
  let x_1500 : vec4<f32> = u_xlat2;
  let x_1502 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(vec3<f32>(x_1500.x, x_1500.y, x_1500.z), x_1502);
  let x_1504 : f32 = u_xlat23;
  u_xlatb23 = (x_1504 >= 0.0f);
  let x_1506 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1506);
  let x_1508 : f32 = u_xlat23;
  let x_1510 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1508, x_1508, x_1508) * x_1510);
  let x_1512 : vec3<f32> = u_xlat4;
  let x_1514 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1512 * vec3<f32>(x_1514.y, x_1514.y, x_1514.y));
  let x_1517 : vec3<f32> = u_xlat4;
  let x_1521 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1517 * vec3<f32>(0.2265625f, 0.2265625f, 0.2265625f)) + x_1521);
  let x_1523 : vec3<f32> = u_xlat4;
  let x_1526 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1528 : vec2<f32> = (vec2<f32>(x_1523.y, x_1523.y) * vec2<f32>(x_1526.x, x_1526.y));
  let x_1529 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1528.x, x_1528.y, x_1529.z, x_1529.w);
  let x_1532 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1534 : vec3<f32> = u_xlat4;
  let x_1537 : vec4<f32> = u_xlat3;
  let x_1539 : vec2<f32> = ((vec2<f32>(x_1532.x, x_1532.y) * vec2<f32>(x_1534.x, x_1534.x)) + vec2<f32>(x_1537.x, x_1537.y));
  let x_1540 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1539.x, x_1539.y, x_1540.z, x_1540.w);
  let x_1543 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1545 : vec3<f32> = u_xlat4;
  let x_1548 : vec4<f32> = u_xlat3;
  let x_1550 : vec2<f32> = ((vec2<f32>(x_1543.x, x_1543.y) * vec2<f32>(x_1545.z, x_1545.z)) + vec2<f32>(x_1548.x, x_1548.y));
  let x_1551 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1550.x, x_1550.y, x_1551.z, x_1551.w);
  let x_1553 : vec4<f32> = u_xlat3;
  let x_1555 : vec2<f32> = (vec2<f32>(x_1553.x, x_1553.y) + vec2<f32>(1.0f, 1.0f));
  let x_1556 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1555.x, x_1555.y, x_1556.z, x_1556.w);
  let x_1558 : vec4<f32> = u_xlat3;
  let x_1560 : vec2<f32> = (vec2<f32>(x_1558.x, x_1558.y) * vec2<f32>(0.5f, 0.5f));
  let x_1561 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1560.x, x_1560.y, x_1561.z, x_1561.w);
  let x_1563 : vec4<f32> = u_xlat3;
  let x_1567 : vec2<f32> = clamp(vec2<f32>(x_1563.x, x_1563.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1568 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1567.x, x_1567.y, x_1568.z, x_1568.w);
  let x_1573 : vec4<f32> = u_xlat3;
  let x_1576 : f32 = x_34.x_GlobalMipBias.x;
  let x_1577 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1573.x, x_1573.y), x_1576);
  u_xlat23 = x_1577.x;
  let x_1580 : f32 = u_xlat7.x;
  let x_1582 : f32 = u_xlat23;
  let x_1585 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1580) * x_1582) + x_1585);
  let x_1588 : f32 = u_xlat0;
  let x_1590 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1588 + -(x_1590));
  let x_1596 : f32 = u_xlat11.x;
  let x_1599 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1596) < x_1599);
  let x_1601 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1601);
  let x_1604 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1604);
  let x_1606 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1606);
  let x_1608 : f32 = u_xlat23;
  let x_1610 : f32 = u_xlat11.x;
  u_xlat23 = (x_1608 * x_1610);
  let x_1613 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1613) + 1.0f);
  let x_1618 : f32 = u_xlat4.x;
  let x_1620 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1618 * x_1620);
  let x_1624 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1626 : vec4<f32> = u_xlat3;
  let x_1630 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1624.x, x_1624.y, x_1624.z) * vec3<f32>(x_1626.x, x_1626.x, x_1626.x)) + vec3<f32>(x_1630.x, x_1630.y, x_1630.z));
  let x_1634 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1636 : vec3<f32> = u_xlat10;
  let x_1639 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1634.x, x_1634.y, x_1634.z) * vec3<f32>(x_1636.x, x_1636.x, x_1636.x)) + x_1639);
  let x_1642 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1644 : vec3<f32> = u_xlat4;
  let x_1647 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1642.x, x_1642.y, x_1642.z) * vec3<f32>(x_1644.x, x_1644.x, x_1644.x)) + x_1647);
  let x_1649 : vec3<f32> = u_xlat1;
  let x_1651 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1649) + x_1651);
  let x_1653 : vec3<f32> = u_xlat4;
  let x_1654 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1653, vec3<f32>(x_1654.x, x_1654.y, x_1654.z));
  let x_1658 : f32 = u_xlat0;
  let x_1662 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1658) * 0.004f) + x_1662);
  let x_1666 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1666, 0.0f);
  let x_1669 : vec3<f32> = u_xlat4;
  let x_1670 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1669, x_1670);
  let x_1674 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1674 + 0.0001f);
  let x_1678 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1678);
  let x_1682 : f32 = u_xlat10.x;
  let x_1684 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1682 * x_1684);
  let x_1688 : f32 = u_xlat3.x;
  let x_1689 : f32 = u_xlat23;
  let x_1691 : f32 = u_xlat22;
  u_xlat22 = ((x_1688 * x_1689) + x_1691);
  let x_1696 : vec4<f32> = u_xlat3;
  let x_1699 : f32 = x_34.x_GlobalMipBias.x;
  let x_1700 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1696.z, x_1696.w), x_1699);
  u_xlat23 = x_1700.w;
  let x_1702 : f32 = u_xlat23;
  u_xlat3.x = (x_1702 + 0.984375f);
  let x_1707 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1707);
  let x_1711 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1711 * 2.0f) + -1.0f);
  let x_1715 : f32 = u_xlat23;
  u_xlat23 = (x_1715 * 628.31854248f);
  let x_1718 : f32 = u_xlat3.z;
  let x_1721 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1718) * x_1721) + 1.0f);
  let x_1724 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1724);
  let x_1726 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1726);
  let x_1729 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1729);
  let x_1732 : f32 = u_xlat24;
  let x_1734 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1732 * x_1734);
  let x_1737 : f32 = u_xlat24;
  let x_1739 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1737 * x_1739);
  let x_1742 : vec4<f32> = u_xlat2;
  let x_1744 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec3<f32>(x_1742.x, x_1742.y, x_1742.z), vec3<f32>(x_1744.x, x_1744.y, x_1744.z));
  let x_1747 : f32 = u_xlat23;
  u_xlatb23 = (x_1747 >= 0.0f);
  let x_1749 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1749);
  let x_1751 : f32 = u_xlat23;
  let x_1753 : vec4<f32> = u_xlat3;
  let x_1755 : vec3<f32> = (vec3<f32>(x_1751, x_1751, x_1751) * vec3<f32>(x_1753.x, x_1753.y, x_1753.z));
  let x_1756 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1755.x, x_1755.y, x_1755.z, x_1756.w);
  let x_1758 : vec4<f32> = u_xlat3;
  let x_1761 : vec4<f32> = x_34.x_SSAOParams;
  let x_1763 : vec3<f32> = (vec3<f32>(x_1758.x, x_1758.y, x_1758.z) * vec3<f32>(x_1761.y, x_1761.y, x_1761.y));
  let x_1764 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1763.x, x_1763.y, x_1763.z, x_1764.w);
  let x_1766 : vec4<f32> = u_xlat3;
  let x_1771 : vec3<f32> = u_xlat1;
  let x_1772 : vec3<f32> = ((vec3<f32>(x_1766.x, x_1766.y, x_1766.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1771);
  let x_1773 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1772.x, x_1772.y, x_1772.z, x_1773.w);
  let x_1775 : vec4<f32> = u_xlat3;
  let x_1778 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1780 : vec2<f32> = (vec2<f32>(x_1775.y, x_1775.y) * vec2<f32>(x_1778.x, x_1778.y));
  let x_1781 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1780.x, x_1781.y, x_1780.y);
  let x_1784 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1786 : vec4<f32> = u_xlat3;
  let x_1789 : vec3<f32> = u_xlat10;
  let x_1791 : vec2<f32> = ((vec2<f32>(x_1784.x, x_1784.y) * vec2<f32>(x_1786.x, x_1786.x)) + vec2<f32>(x_1789.x, x_1789.z));
  let x_1792 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1791.x, x_1791.y, x_1792.z, x_1792.w);
  let x_1795 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1797 : vec4<f32> = u_xlat3;
  let x_1800 : vec4<f32> = u_xlat3;
  let x_1802 : vec2<f32> = ((vec2<f32>(x_1795.x, x_1795.y) * vec2<f32>(x_1797.z, x_1797.z)) + vec2<f32>(x_1800.x, x_1800.y));
  let x_1803 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1802.x, x_1802.y, x_1803.z, x_1803.w);
  let x_1805 : vec4<f32> = u_xlat3;
  let x_1807 : vec2<f32> = (vec2<f32>(x_1805.x, x_1805.y) + vec2<f32>(1.0f, 1.0f));
  let x_1808 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1807.x, x_1807.y, x_1808.z, x_1808.w);
  let x_1810 : vec4<f32> = u_xlat3;
  let x_1812 : vec2<f32> = (vec2<f32>(x_1810.x, x_1810.y) * vec2<f32>(0.5f, 0.5f));
  let x_1813 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1812.x, x_1812.y, x_1813.z, x_1813.w);
  let x_1815 : vec4<f32> = u_xlat3;
  let x_1819 : vec2<f32> = clamp(vec2<f32>(x_1815.x, x_1815.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1820 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1819.x, x_1819.y, x_1820.z, x_1820.w);
  let x_1825 : vec4<f32> = u_xlat3;
  let x_1828 : f32 = x_34.x_GlobalMipBias.x;
  let x_1829 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1825.x, x_1825.y), x_1828);
  u_xlat23 = x_1829.x;
  let x_1832 : f32 = u_xlat7.x;
  let x_1834 : f32 = u_xlat23;
  let x_1837 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17.x = ((-(x_1832) * x_1834) + x_1837);
  let x_1840 : f32 = u_xlat0;
  let x_1842 : f32 = u_xlat17.x;
  u_xlat24 = (x_1840 + -(x_1842));
  let x_1845 : f32 = u_xlat24;
  let x_1848 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1845) < x_1848);
  let x_1850 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1850);
  let x_1852 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1852);
  let x_1854 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1854);
  let x_1856 : f32 = u_xlat23;
  let x_1857 : f32 = u_xlat24;
  u_xlat23 = (x_1856 * x_1857);
  let x_1860 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1860) + 1.0f);
  let x_1865 : f32 = u_xlat17.x;
  let x_1867 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17.x = (x_1865 * x_1867);
  let x_1871 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1873 : vec4<f32> = u_xlat3;
  let x_1877 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1871.x, x_1871.y, x_1871.z) * vec3<f32>(x_1873.x, x_1873.x, x_1873.x)) + vec3<f32>(x_1877.x, x_1877.y, x_1877.z));
  let x_1881 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1883 : vec3<f32> = u_xlat10;
  let x_1886 : vec3<f32> = u_xlat4;
  let x_1887 : vec3<f32> = ((vec3<f32>(x_1881.x, x_1881.y, x_1881.z) * vec3<f32>(x_1883.x, x_1883.x, x_1883.x)) + x_1886);
  let x_1888 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1887.x, x_1887.y, x_1888.z, x_1887.z);
  let x_1891 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1893 : vec2<f32> = u_xlat17;
  let x_1896 : vec4<f32> = u_xlat3;
  let x_1898 : vec3<f32> = ((vec3<f32>(x_1891.x, x_1891.y, x_1891.z) * vec3<f32>(x_1893.x, x_1893.x, x_1893.x)) + vec3<f32>(x_1896.x, x_1896.y, x_1896.w));
  let x_1899 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1898.x, x_1898.y, x_1898.z, x_1899.w);
  let x_1901 : vec3<f32> = u_xlat1;
  let x_1903 : vec4<f32> = u_xlat3;
  let x_1905 : vec3<f32> = (-(x_1901) + vec3<f32>(x_1903.x, x_1903.y, x_1903.z));
  let x_1906 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1905.x, x_1905.y, x_1905.z, x_1906.w);
  let x_1908 : vec4<f32> = u_xlat3;
  let x_1910 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1908.x, x_1908.y, x_1908.z), vec3<f32>(x_1910.x, x_1910.y, x_1910.z));
  let x_1913 : f32 = u_xlat0;
  let x_1916 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1913) * 0.004f) + x_1916);
  let x_1918 : f32 = u_xlat24;
  u_xlat24 = max(x_1918, 0.0f);
  let x_1920 : vec4<f32> = u_xlat3;
  let x_1922 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1920.x, x_1920.y, x_1920.z), vec3<f32>(x_1922.x, x_1922.y, x_1922.z));
  let x_1927 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1927 + 0.0001f);
  let x_1931 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1931);
  let x_1935 : f32 = u_xlat3.x;
  let x_1936 : f32 = u_xlat24;
  u_xlat3.x = (x_1935 * x_1936);
  let x_1940 : f32 = u_xlat3.x;
  let x_1941 : f32 = u_xlat23;
  let x_1943 : f32 = u_xlat22;
  u_xlat22 = ((x_1940 * x_1941) + x_1943);
  let x_1945 : vec2<f32> = u_xlat14;
  let x_1948 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1945.x, x_1945.y, x_1945.x, x_1945.y) * vec4<f32>(x_1948.x, x_1948.y, x_1948.x, x_1948.y)) + vec4<f32>(0.625f, 0.625f, 0.75f, 0.75f));
  let x_1958 : vec4<f32> = u_xlat3;
  let x_1961 : f32 = x_34.x_GlobalMipBias.x;
  let x_1962 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1958.x, x_1958.y), x_1961);
  u_xlat23 = x_1962.w;
  let x_1964 : f32 = u_xlat23;
  let x_1969 : vec2<f32> = (vec2<f32>(x_1964, x_1964) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1970 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1969.x, x_1969.y, x_1970.z, x_1970.w);
  let x_1973 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1973);
  let x_1975 : f32 = u_xlat23;
  u_xlat4.z = ((x_1975 * 2.0f) + -1.0f);
  let x_1980 : f32 = u_xlat3.y;
  u_xlat23 = (x_1980 * 628.31854248f);
  let x_1983 : f32 = u_xlat4.z;
  let x_1986 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1983) * x_1986) + 1.0f);
  let x_1991 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1991);
  let x_1994 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1994);
  let x_1997 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1997);
  let x_2001 : f32 = u_xlat3.x;
  let x_2003 : f32 = u_xlat6.x;
  u_xlat4.x = (x_2001 * x_2003);
  let x_2007 : f32 = u_xlat3.x;
  let x_2009 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2007 * x_2009);
  let x_2012 : vec4<f32> = u_xlat2;
  let x_2014 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(vec3<f32>(x_2012.x, x_2012.y, x_2012.z), x_2014);
  let x_2016 : f32 = u_xlat23;
  u_xlatb23 = (x_2016 >= 0.0f);
  let x_2018 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2018);
  let x_2020 : f32 = u_xlat23;
  let x_2022 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_2020, x_2020, x_2020) * x_2022);
  let x_2024 : vec3<f32> = u_xlat4;
  let x_2026 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_2024 * vec3<f32>(x_2026.y, x_2026.y, x_2026.y));
  let x_2029 : vec3<f32> = u_xlat4;
  let x_2033 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_2029 * vec3<f32>(0.451562494f, 0.451562494f, 0.451562494f)) + x_2033);
  let x_2035 : vec3<f32> = u_xlat4;
  let x_2038 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2040 : vec2<f32> = (vec2<f32>(x_2035.y, x_2035.y) * vec2<f32>(x_2038.x, x_2038.y));
  let x_2041 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2040.x, x_2040.y, x_2041.z, x_2041.w);
  let x_2044 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2046 : vec3<f32> = u_xlat4;
  let x_2049 : vec4<f32> = u_xlat3;
  let x_2051 : vec2<f32> = ((vec2<f32>(x_2044.x, x_2044.y) * vec2<f32>(x_2046.x, x_2046.x)) + vec2<f32>(x_2049.x, x_2049.y));
  let x_2052 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2051.x, x_2051.y, x_2052.z, x_2052.w);
  let x_2055 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2057 : vec3<f32> = u_xlat4;
  let x_2060 : vec4<f32> = u_xlat3;
  let x_2062 : vec2<f32> = ((vec2<f32>(x_2055.x, x_2055.y) * vec2<f32>(x_2057.z, x_2057.z)) + vec2<f32>(x_2060.x, x_2060.y));
  let x_2063 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2062.x, x_2062.y, x_2063.z, x_2063.w);
  let x_2065 : vec4<f32> = u_xlat3;
  let x_2067 : vec2<f32> = (vec2<f32>(x_2065.x, x_2065.y) + vec2<f32>(1.0f, 1.0f));
  let x_2068 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2067.x, x_2067.y, x_2068.z, x_2068.w);
  let x_2070 : vec4<f32> = u_xlat3;
  let x_2072 : vec2<f32> = (vec2<f32>(x_2070.x, x_2070.y) * vec2<f32>(0.5f, 0.5f));
  let x_2073 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2072.x, x_2072.y, x_2073.z, x_2073.w);
  let x_2075 : vec4<f32> = u_xlat3;
  let x_2079 : vec2<f32> = clamp(vec2<f32>(x_2075.x, x_2075.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2080 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2079.x, x_2079.y, x_2080.z, x_2080.w);
  let x_2085 : vec4<f32> = u_xlat3;
  let x_2088 : f32 = x_34.x_GlobalMipBias.x;
  let x_2089 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2085.x, x_2085.y), x_2088);
  u_xlat23 = x_2089.x;
  let x_2092 : f32 = u_xlat7.x;
  let x_2094 : f32 = u_xlat23;
  let x_2097 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2092) * x_2094) + x_2097);
  let x_2100 : f32 = u_xlat0;
  let x_2102 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2100 + -(x_2102));
  let x_2107 : f32 = u_xlat11.x;
  let x_2110 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2107) < x_2110);
  let x_2112 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2112);
  let x_2115 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2115);
  let x_2117 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2117);
  let x_2119 : f32 = u_xlat23;
  let x_2121 : f32 = u_xlat11.x;
  u_xlat23 = (x_2119 * x_2121);
  let x_2124 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2124) + 1.0f);
  let x_2129 : f32 = u_xlat4.x;
  let x_2131 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2129 * x_2131);
  let x_2135 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2137 : vec4<f32> = u_xlat3;
  let x_2141 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2135.x, x_2135.y, x_2135.z) * vec3<f32>(x_2137.x, x_2137.x, x_2137.x)) + vec3<f32>(x_2141.x, x_2141.y, x_2141.z));
  let x_2145 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2147 : vec3<f32> = u_xlat10;
  let x_2150 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2145.x, x_2145.y, x_2145.z) * vec3<f32>(x_2147.x, x_2147.x, x_2147.x)) + x_2150);
  let x_2153 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2155 : vec3<f32> = u_xlat4;
  let x_2158 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2153.x, x_2153.y, x_2153.z) * vec3<f32>(x_2155.x, x_2155.x, x_2155.x)) + x_2158);
  let x_2160 : vec3<f32> = u_xlat1;
  let x_2162 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2160) + x_2162);
  let x_2164 : vec3<f32> = u_xlat4;
  let x_2165 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_2164, vec3<f32>(x_2165.x, x_2165.y, x_2165.z));
  let x_2169 : f32 = u_xlat0;
  let x_2173 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2169) * 0.004f) + x_2173);
  let x_2177 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2177, 0.0f);
  let x_2180 : vec3<f32> = u_xlat4;
  let x_2181 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2180, x_2181);
  let x_2185 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2185 + 0.0001f);
  let x_2189 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2189);
  let x_2193 : f32 = u_xlat10.x;
  let x_2195 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2193 * x_2195);
  let x_2199 : f32 = u_xlat3.x;
  let x_2200 : f32 = u_xlat23;
  let x_2202 : f32 = u_xlat22;
  u_xlat22 = ((x_2199 * x_2200) + x_2202);
  let x_2207 : vec4<f32> = u_xlat3;
  let x_2210 : f32 = x_34.x_GlobalMipBias.x;
  let x_2211 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2207.z, x_2207.w), x_2210);
  u_xlat23 = x_2211.w;
  let x_2213 : f32 = u_xlat23;
  let x_2218 : vec2<f32> = (vec2<f32>(x_2213, x_2213) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2219 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2218.x, x_2218.y, x_2219.z, x_2219.w);
  let x_2222 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2222);
  let x_2224 : f32 = u_xlat23;
  u_xlat4.z = ((x_2224 * 2.0f) + -1.0f);
  let x_2229 : f32 = u_xlat3.y;
  u_xlat23 = (x_2229 * 628.31854248f);
  let x_2232 : f32 = u_xlat4.z;
  let x_2235 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2232) * x_2235) + 1.0f);
  let x_2240 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2240);
  let x_2243 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2243);
  let x_2246 : f32 = u_xlat23;
  u_xlat6.x = cos(x_2246);
  let x_2250 : f32 = u_xlat3.x;
  let x_2252 : f32 = u_xlat6.x;
  u_xlat4.x = (x_2250 * x_2252);
  let x_2256 : f32 = u_xlat3.x;
  let x_2258 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2256 * x_2258);
  let x_2261 : vec4<f32> = u_xlat2;
  let x_2263 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(vec3<f32>(x_2261.x, x_2261.y, x_2261.z), x_2263);
  let x_2265 : f32 = u_xlat23;
  u_xlatb23 = (x_2265 >= 0.0f);
  let x_2267 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2267);
  let x_2269 : f32 = u_xlat23;
  let x_2271 : vec3<f32> = u_xlat4;
  let x_2272 : vec3<f32> = (vec3<f32>(x_2269, x_2269, x_2269) * x_2271);
  let x_2273 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2272.x, x_2272.y, x_2272.z, x_2273.w);
  let x_2275 : vec4<f32> = u_xlat3;
  let x_2278 : vec4<f32> = x_34.x_SSAOParams;
  let x_2280 : vec3<f32> = (vec3<f32>(x_2275.x, x_2275.y, x_2275.z) * vec3<f32>(x_2278.y, x_2278.y, x_2278.y));
  let x_2281 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2280.x, x_2280.y, x_2280.z, x_2281.w);
  let x_2283 : vec4<f32> = u_xlat3;
  let x_2288 : vec3<f32> = u_xlat1;
  let x_2289 : vec3<f32> = ((vec3<f32>(x_2283.x, x_2283.y, x_2283.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_2288);
  let x_2290 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2289.x, x_2289.y, x_2289.z, x_2290.w);
  let x_2292 : vec4<f32> = u_xlat3;
  let x_2295 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2297 : vec2<f32> = (vec2<f32>(x_2292.y, x_2292.y) * vec2<f32>(x_2295.x, x_2295.y));
  let x_2298 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2297.x, x_2298.y, x_2297.y);
  let x_2301 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2303 : vec4<f32> = u_xlat3;
  let x_2306 : vec3<f32> = u_xlat10;
  let x_2308 : vec2<f32> = ((vec2<f32>(x_2301.x, x_2301.y) * vec2<f32>(x_2303.x, x_2303.x)) + vec2<f32>(x_2306.x, x_2306.z));
  let x_2309 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2308.x, x_2308.y, x_2309.z, x_2309.w);
  let x_2312 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2314 : vec4<f32> = u_xlat3;
  let x_2317 : vec4<f32> = u_xlat3;
  let x_2319 : vec2<f32> = ((vec2<f32>(x_2312.x, x_2312.y) * vec2<f32>(x_2314.z, x_2314.z)) + vec2<f32>(x_2317.x, x_2317.y));
  let x_2320 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2319.x, x_2319.y, x_2320.z, x_2320.w);
  let x_2322 : vec4<f32> = u_xlat3;
  let x_2324 : vec2<f32> = (vec2<f32>(x_2322.x, x_2322.y) + vec2<f32>(1.0f, 1.0f));
  let x_2325 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2324.x, x_2324.y, x_2325.z, x_2325.w);
  let x_2327 : vec4<f32> = u_xlat3;
  let x_2329 : vec2<f32> = (vec2<f32>(x_2327.x, x_2327.y) * vec2<f32>(0.5f, 0.5f));
  let x_2330 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2329.x, x_2329.y, x_2330.z, x_2330.w);
  let x_2332 : vec4<f32> = u_xlat3;
  let x_2336 : vec2<f32> = clamp(vec2<f32>(x_2332.x, x_2332.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2337 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2336.x, x_2336.y, x_2337.z, x_2337.w);
  let x_2342 : vec4<f32> = u_xlat3;
  let x_2345 : f32 = x_34.x_GlobalMipBias.x;
  let x_2346 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2342.x, x_2342.y), x_2345);
  u_xlat23 = x_2346.x;
  let x_2349 : f32 = u_xlat7.x;
  let x_2351 : f32 = u_xlat23;
  let x_2354 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17.x = ((-(x_2349) * x_2351) + x_2354);
  let x_2357 : f32 = u_xlat0;
  let x_2359 : f32 = u_xlat17.x;
  u_xlat24 = (x_2357 + -(x_2359));
  let x_2362 : f32 = u_xlat24;
  let x_2365 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2362) < x_2365);
  let x_2367 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2367);
  let x_2369 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2369);
  let x_2371 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2371);
  let x_2373 : f32 = u_xlat23;
  let x_2374 : f32 = u_xlat24;
  u_xlat23 = (x_2373 * x_2374);
  let x_2377 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2377) + 1.0f);
  let x_2382 : f32 = u_xlat17.x;
  let x_2384 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17.x = (x_2382 * x_2384);
  let x_2388 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2390 : vec4<f32> = u_xlat3;
  let x_2394 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2388.x, x_2388.y, x_2388.z) * vec3<f32>(x_2390.x, x_2390.x, x_2390.x)) + vec3<f32>(x_2394.x, x_2394.y, x_2394.z));
  let x_2398 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2400 : vec3<f32> = u_xlat10;
  let x_2403 : vec3<f32> = u_xlat4;
  let x_2404 : vec3<f32> = ((vec3<f32>(x_2398.x, x_2398.y, x_2398.z) * vec3<f32>(x_2400.x, x_2400.x, x_2400.x)) + x_2403);
  let x_2405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2404.x, x_2404.y, x_2405.z, x_2404.z);
  let x_2408 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2410 : vec2<f32> = u_xlat17;
  let x_2413 : vec4<f32> = u_xlat3;
  let x_2415 : vec3<f32> = ((vec3<f32>(x_2408.x, x_2408.y, x_2408.z) * vec3<f32>(x_2410.x, x_2410.x, x_2410.x)) + vec3<f32>(x_2413.x, x_2413.y, x_2413.w));
  let x_2416 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2415.x, x_2415.y, x_2415.z, x_2416.w);
  let x_2418 : vec3<f32> = u_xlat1;
  let x_2420 : vec4<f32> = u_xlat3;
  let x_2422 : vec3<f32> = (-(x_2418) + vec3<f32>(x_2420.x, x_2420.y, x_2420.z));
  let x_2423 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2422.x, x_2422.y, x_2422.z, x_2423.w);
  let x_2425 : vec4<f32> = u_xlat3;
  let x_2427 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_2425.x, x_2425.y, x_2425.z), vec3<f32>(x_2427.x, x_2427.y, x_2427.z));
  let x_2430 : f32 = u_xlat0;
  let x_2433 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2430) * 0.004f) + x_2433);
  let x_2435 : f32 = u_xlat24;
  u_xlat24 = max(x_2435, 0.0f);
  let x_2437 : vec4<f32> = u_xlat3;
  let x_2439 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2437.x, x_2437.y, x_2437.z), vec3<f32>(x_2439.x, x_2439.y, x_2439.z));
  let x_2444 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2444 + 0.0001f);
  let x_2448 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2448);
  let x_2452 : f32 = u_xlat3.x;
  let x_2453 : f32 = u_xlat24;
  u_xlat3.x = (x_2452 * x_2453);
  let x_2457 : f32 = u_xlat3.x;
  let x_2458 : f32 = u_xlat23;
  let x_2460 : f32 = u_xlat22;
  u_xlat22 = ((x_2457 * x_2458) + x_2460);
  let x_2462 : vec2<f32> = u_xlat14;
  let x_2464 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = ((x_2462 * vec2<f32>(x_2464.x, x_2464.y)) + vec2<f32>(0.875f, 0.875f));
  let x_2473 : vec2<f32> = u_xlat14;
  let x_2475 : f32 = x_34.x_GlobalMipBias.x;
  let x_2476 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_2473, x_2475);
  u_xlat14.x = x_2476.w;
  let x_2479 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_2479.x, x_2479.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2485 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2485);
  let x_2489 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_2489 * 2.0f) + -1.0f);
  let x_2494 : f32 = u_xlat14.y;
  u_xlat14.x = (x_2494 * 628.31854248f);
  let x_2498 : f32 = u_xlat3.z;
  let x_2501 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_2498) * x_2501) + 1.0f);
  let x_2504 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_2504);
  let x_2507 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_2507);
  let x_2511 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_2511);
  let x_2514 : f32 = u_xlat21;
  let x_2516 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2514 * x_2516);
  let x_2519 : f32 = u_xlat21;
  let x_2521 : f32 = u_xlat4.x;
  u_xlat3.y = (x_2519 * x_2521);
  let x_2524 : vec4<f32> = u_xlat2;
  let x_2526 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(vec3<f32>(x_2524.x, x_2524.y, x_2524.z), vec3<f32>(x_2526.x, x_2526.y, x_2526.z));
  let x_2531 : f32 = u_xlat14.x;
  u_xlatb14 = (x_2531 >= 0.0f);
  let x_2533 : bool = u_xlatb14;
  u_xlat14.x = select(-1.0f, 1.0f, x_2533);
  let x_2536 : vec2<f32> = u_xlat14;
  let x_2538 : vec4<f32> = u_xlat3;
  let x_2540 : vec3<f32> = (vec3<f32>(x_2536.x, x_2536.x, x_2536.x) * vec3<f32>(x_2538.x, x_2538.y, x_2538.z));
  let x_2541 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2540.x, x_2540.y, x_2540.z, x_2541.w);
  let x_2543 : vec4<f32> = u_xlat3;
  let x_2546 : vec4<f32> = x_34.x_SSAOParams;
  let x_2548 : vec3<f32> = (vec3<f32>(x_2543.x, x_2543.y, x_2543.z) * vec3<f32>(x_2546.y, x_2546.y, x_2546.y));
  let x_2549 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2548.x, x_2548.y, x_2548.z, x_2549.w);
  let x_2551 : vec4<f32> = u_xlat3;
  let x_2556 : vec3<f32> = u_xlat1;
  let x_2557 : vec3<f32> = ((vec3<f32>(x_2551.x, x_2551.y, x_2551.z) * vec3<f32>(0.7890625f, 0.7890625f, 0.7890625f)) + x_2556);
  let x_2558 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2557.x, x_2557.y, x_2557.z, x_2558.w);
  let x_2560 : vec4<f32> = u_xlat3;
  let x_2563 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_2560.y, x_2560.y) * vec2<f32>(x_2563.x, x_2563.y));
  let x_2567 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2569 : vec4<f32> = u_xlat3;
  let x_2572 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2567.x, x_2567.y) * vec2<f32>(x_2569.x, x_2569.x)) + x_2572);
  let x_2575 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2577 : vec4<f32> = u_xlat3;
  let x_2580 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2575.x, x_2575.y) * vec2<f32>(x_2577.z, x_2577.z)) + x_2580);
  let x_2582 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2582 + vec2<f32>(1.0f, 1.0f));
  let x_2584 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2584 * vec2<f32>(0.5f, 0.5f));
  let x_2586 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_2586, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2593 : vec2<f32> = u_xlat14;
  let x_2595 : f32 = x_34.x_GlobalMipBias.x;
  let x_2596 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2593, x_2595);
  u_xlat23 = x_2596.x;
  let x_2599 : f32 = u_xlat7.x;
  let x_2601 : f32 = u_xlat23;
  let x_2604 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_2599) * x_2601) + x_2604);
  let x_2608 : f32 = u_xlat7.x;
  let x_2610 : f32 = u_xlat0;
  u_xlat3.x = (-(x_2608) + x_2610);
  let x_2614 : f32 = u_xlat3.x;
  let x_2617 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_2614) < x_2617);
  let x_2619 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_2619);
  let x_2622 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2622);
  let x_2624 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2624);
  let x_2626 : f32 = u_xlat23;
  let x_2628 : f32 = u_xlat3.x;
  u_xlat23 = (x_2626 * x_2628);
  let x_2631 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_2631) + 1.0f);
  let x_2635 : f32 = u_xlat7.x;
  let x_2637 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_2635 * x_2637);
  let x_2641 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2643 : vec2<f32> = u_xlat14;
  let x_2647 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_2649 : vec3<f32> = ((vec3<f32>(x_2641.x, x_2641.y, x_2641.z) * vec3<f32>(x_2643.x, x_2643.x, x_2643.x)) + vec3<f32>(x_2647.x, x_2647.y, x_2647.z));
  let x_2650 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2649.x, x_2649.y, x_2649.z, x_2650.w);
  let x_2653 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2655 : f32 = u_xlat21;
  let x_2658 : vec4<f32> = u_xlat3;
  let x_2660 : vec3<f32> = ((vec3<f32>(x_2653.x, x_2653.y, x_2653.z) * vec3<f32>(x_2655, x_2655, x_2655)) + vec3<f32>(x_2658.x, x_2658.y, x_2658.z));
  let x_2661 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2660.x, x_2660.y, x_2660.z, x_2661.w);
  let x_2664 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2666 : vec3<f32> = u_xlat7;
  let x_2669 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_2664.x, x_2664.y, x_2664.z) * vec3<f32>(x_2666.x, x_2666.x, x_2666.x)) + vec3<f32>(x_2669.x, x_2669.y, x_2669.z));
  let x_2672 : vec3<f32> = u_xlat1;
  let x_2674 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_2672) + x_2674);
  let x_2676 : vec3<f32> = u_xlat7;
  let x_2677 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(x_2676, vec3<f32>(x_2677.x, x_2677.y, x_2677.z));
  let x_2681 : f32 = u_xlat0;
  let x_2685 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_2681) * 0.004f) + x_2685);
  let x_2689 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2689, 0.0f);
  let x_2692 : vec3<f32> = u_xlat7;
  let x_2693 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_2692, x_2693);
  let x_2697 : f32 = u_xlat7.x;
  u_xlat7.x = (x_2697 + 0.0001f);
  let x_2701 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_2701);
  let x_2705 : f32 = u_xlat7.x;
  let x_2707 : f32 = u_xlat1.x;
  u_xlat7.x = (x_2705 * x_2707);
  let x_2711 : f32 = u_xlat7.x;
  let x_2712 : f32 = u_xlat23;
  let x_2714 : f32 = u_xlat22;
  u_xlat7.x = ((x_2711 * x_2712) + x_2714);
  let x_2718 : f32 = u_xlat7.x;
  let x_2720 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_2718 * x_2720);
  let x_2724 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_2724);
  let x_2727 : f32 = u_xlat0;
  let x_2730 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_2727) * x_2730) + 1.0f);
  let x_2733 : f32 = u_xlat0;
  let x_2734 : f32 = u_xlat0;
  u_xlat0 = (x_2733 * x_2734);
  let x_2737 : f32 = u_xlat7.x;
  let x_2739 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_2737 * x_2739);
  let x_2742 : f32 = u_xlat0;
  let x_2744 : f32 = u_xlat7.x;
  u_xlat0 = (x_2742 * x_2744);
  let x_2746 : f32 = u_xlat0;
  u_xlat0 = (x_2746 * 0.125f);
  let x_2748 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2748, 0.0f, 1.0f);
  let x_2750 : f32 = u_xlat0;
  u_xlat0 = log2(x_2750);
  let x_2752 : f32 = u_xlat0;
  u_xlat0 = (x_2752 * 0.600000024f);
  let x_2755 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2755);
  let x_2759 : vec4<f32> = u_xlat2;
  let x_2763 : vec3<f32> = ((vec3<f32>(x_2759.x, x_2759.y, x_2759.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2764 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2764.x, x_2763.x, x_2763.y, x_2763.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

