struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_255 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3815 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1714 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu25 : u32;
  var u_xlati46 : i32;
  var u_xlati24 : i32;
  var u_xlatu24 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat24 : vec2<f32>;
  var x_1847 : f32;
  var u_xlatb24 : vec2<bool>;
  var x_1878 : f32;
  var u_xlat46 : f32;
  var u_xlatb2 : bool;
  var x_1925 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat71 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb66;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat66 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat66;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat66;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat66;
  u_xlat66 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat66;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_257 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres0;
  let x_260 : vec3<f32> = (x_250 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec3<f32> = vs_INTERP0;
  let x_266 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres1;
  let x_269 : vec3<f32> = (x_264 + -(vec3<f32>(x_266.x, x_266.y, x_266.z)));
  let x_270 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_269.x, x_269.y, x_269.z, x_270.w);
  let x_273 : vec3<f32> = vs_INTERP0;
  let x_276 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres2;
  let x_279 : vec3<f32> = (x_273 + -(vec3<f32>(x_276.x, x_276.y, x_276.z)));
  let x_280 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_279.x, x_279.y, x_279.z, x_280.w);
  let x_283 : vec3<f32> = vs_INTERP0;
  let x_286 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres3;
  let x_289 : vec3<f32> = (x_283 + -(vec3<f32>(x_286.x, x_286.y, x_286.z)));
  let x_290 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_289.x, x_289.y, x_289.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat6;
  let x_294 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_292.x, x_292.y, x_292.z), vec3<f32>(x_294.x, x_294.y, x_294.z));
  let x_298 : vec4<f32> = u_xlat7;
  let x_300 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_298.x, x_298.y, x_298.z), vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_304 : vec4<f32> = u_xlat8;
  let x_306 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_304.x, x_304.y, x_304.z), vec3<f32>(x_306.x, x_306.y, x_306.z));
  let x_310 : vec4<f32> = u_xlat9;
  let x_312 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_310.x, x_310.y, x_310.z), vec3<f32>(x_312.x, x_312.y, x_312.z));
  let x_319 : vec4<f32> = u_xlat6;
  let x_322 : vec4<f32> = x_255.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_319 < x_322);
  let x_325 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_337);
  let x_341 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_341);
  let x_346 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_346);
  let x_350 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_350);
  let x_353 : vec4<f32> = u_xlat6;
  let x_355 : vec4<f32> = u_xlat7;
  let x_357 : vec3<f32> = (vec3<f32>(x_353.x, x_353.y, x_353.z) + vec3<f32>(x_355.y, x_355.z, x_355.w));
  let x_358 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
  let x_360 : vec4<f32> = u_xlat6;
  let x_363 : vec3<f32> = max(vec3<f32>(x_360.x, x_360.y, x_360.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_364 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_364.x, x_363.x, x_363.y, x_363.z);
  let x_366 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_366, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_371 : f32 = u_xlat66;
  u_xlat66 = (-(x_371) + 4.0f);
  let x_375 : f32 = u_xlat66;
  u_xlatu66 = u32(x_375);
  let x_378 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_378) << bitcast<u32>(2i));
  let x_381 : vec3<f32> = vs_INTERP0;
  let x_383 : i32 = u_xlati66;
  let x_386 : i32 = u_xlati66;
  let x_390 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_383 + 1i) / 4i)][((x_386 + 1i) % 4i)];
  let x_392 : vec3<f32> = (vec3<f32>(x_381.y, x_381.y, x_381.y) * vec3<f32>(x_390.x, x_390.y, x_390.z));
  let x_393 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : i32 = u_xlati66;
  let x_397 : i32 = u_xlati66;
  let x_400 : vec4<f32> = x_255.x_MainLightWorldToShadow[(x_395 / 4i)][(x_397 % 4i)];
  let x_402 : vec3<f32> = vs_INTERP0;
  let x_405 : vec4<f32> = u_xlat6;
  let x_407 : vec3<f32> = ((vec3<f32>(x_400.x, x_400.y, x_400.z) * vec3<f32>(x_402.x, x_402.x, x_402.x)) + vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_408 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_407.x, x_407.y, x_407.z, x_408.w);
  let x_410 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_417 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_410 + 2i) / 4i)][((x_413 + 2i) % 4i)];
  let x_419 : vec3<f32> = vs_INTERP0;
  let x_422 : vec4<f32> = u_xlat6;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.x, x_417.y, x_417.z) * vec3<f32>(x_419.z, x_419.z, x_419.z)) + vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_425 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat6;
  let x_429 : i32 = u_xlati66;
  let x_432 : i32 = u_xlati66;
  let x_436 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_429 + 3i) / 4i)][((x_432 + 3i) % 4i)];
  let x_438 : vec3<f32> = (vec3<f32>(x_427.x, x_427.y, x_427.z) + vec3<f32>(x_436.x, x_436.y, x_436.z));
  let x_439 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_438.x, x_438.y, x_438.z, x_439.w);
  let x_443 : f32 = x_255.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_443);
  let x_445 : bool = u_xlatb66;
  if (x_445) {
    let x_450 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb67 = (x_450 == 1.0f);
    let x_452 : bool = u_xlatb67;
    if (x_452) {
      let x_455 : vec4<f32> = u_xlat6;
      let x_459 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_455.x, x_455.y, x_455.x, x_455.y) + x_459);
      let x_462 : vec4<f32> = u_xlat7;
      let x_463 : vec2<f32> = vec2<f32>(x_462.x, x_462.y);
      let x_465 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_463.x, x_463.y, x_465);
      let x_477 : vec3<f32> = txVec0;
      let x_479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_477.xy, x_477.z);
      u_xlat8.x = x_479;
      let x_482 : vec4<f32> = u_xlat7;
      let x_483 : vec2<f32> = vec2<f32>(x_482.z, x_482.w);
      let x_485 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_483.x, x_483.y, x_485);
      let x_492 : vec3<f32> = txVec1;
      let x_494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_492.xy, x_492.z);
      u_xlat8.y = x_494;
      let x_496 : vec4<f32> = u_xlat6;
      let x_499 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_496.x, x_496.y, x_496.x, x_496.y) + x_499);
      let x_502 : vec4<f32> = u_xlat7;
      let x_503 : vec2<f32> = vec2<f32>(x_502.x, x_502.y);
      let x_505 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_503.x, x_503.y, x_505);
      let x_512 : vec3<f32> = txVec2;
      let x_514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_512.xy, x_512.z);
      u_xlat8.z = x_514;
      let x_517 : vec4<f32> = u_xlat7;
      let x_518 : vec2<f32> = vec2<f32>(x_517.z, x_517.w);
      let x_520 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_518.x, x_518.y, x_520);
      let x_527 : vec3<f32> = txVec3;
      let x_529 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_527.xy, x_527.z);
      u_xlat8.w = x_529;
      let x_531 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_531, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_538 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb68 = (x_538 == 2.0f);
      let x_540 : bool = u_xlatb68;
      if (x_540) {
        let x_543 : vec4<f32> = u_xlat6;
        let x_547 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_552 : vec2<f32> = ((vec2<f32>(x_543.x, x_543.y) * vec2<f32>(x_547.z, x_547.w)) + vec2<f32>(0.5f, 0.5f));
        let x_553 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat7;
        let x_557 : vec2<f32> = floor(vec2<f32>(x_555.x, x_555.y));
        let x_558 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_562 : vec4<f32> = u_xlat6;
        let x_565 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_562.x, x_562.y) * vec2<f32>(x_565.z, x_565.w)) + -(vec2<f32>(x_568.x, x_568.y)));
        let x_572 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_572.x, x_572.x, x_572.y, x_572.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_576 : vec4<f32> = u_xlat8;
        let x_578 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_576.x, x_576.x, x_576.z, x_576.z) * vec4<f32>(x_578.x, x_578.x, x_578.z, x_578.z));
        let x_581 : vec4<f32> = u_xlat9;
        let x_585 : vec2<f32> = (vec2<f32>(x_581.y, x_581.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_586 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_585.x, x_586.y, x_585.y, x_586.w);
        let x_588 : vec4<f32> = u_xlat9;
        let x_591 : vec2<f32> = u_xlat51;
        let x_593 : vec2<f32> = ((vec2<f32>(x_588.x, x_588.z) * vec2<f32>(0.5f, 0.5f)) + -(x_591));
        let x_594 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
        let x_597 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_597) + vec2<f32>(1.0f, 1.0f));
        let x_602 : vec2<f32> = u_xlat51;
        let x_604 : vec2<f32> = min(x_602, vec2<f32>(0.0f, 0.0f));
        let x_605 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_604.x, x_604.y, x_605.z, x_605.w);
        let x_607 : vec4<f32> = u_xlat10;
        let x_610 : vec4<f32> = u_xlat10;
        let x_613 : vec2<f32> = u_xlat53;
        let x_614 : vec2<f32> = ((-(vec2<f32>(x_607.x, x_607.y)) * vec2<f32>(x_610.x, x_610.y)) + x_613);
        let x_615 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_614.x, x_614.y, x_615.z, x_615.w);
        let x_617 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_617, vec2<f32>(0.0f, 0.0f));
        let x_619 : vec2<f32> = u_xlat51;
        let x_621 : vec2<f32> = u_xlat51;
        let x_623 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_619) * x_621) + vec2<f32>(x_623.y, x_623.w));
        let x_626 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = (vec2<f32>(x_626.x, x_626.y) + vec2<f32>(1.0f, 1.0f));
        let x_629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_628.x, x_628.y, x_629.z, x_629.w);
        let x_631 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_631 + vec2<f32>(1.0f, 1.0f));
        let x_634 : vec4<f32> = u_xlat9;
        let x_638 : vec2<f32> = (vec2<f32>(x_634.x, x_634.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_639 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_638.x, x_638.y, x_639.z, x_639.w);
        let x_641 : vec2<f32> = u_xlat53;
        let x_642 : vec2<f32> = (x_641 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_642.x, x_642.y, x_643.z, x_643.w);
        let x_645 : vec4<f32> = u_xlat10;
        let x_647 : vec2<f32> = (vec2<f32>(x_645.x, x_645.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_648 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_647.x, x_647.y, x_648.z, x_648.w);
        let x_651 : vec2<f32> = u_xlat51;
        let x_652 : vec2<f32> = (x_651 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_653 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_652.x, x_652.y, x_653.z, x_653.w);
        let x_655 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_655.y, x_655.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : f32 = u_xlat10.x;
        u_xlat11.z = x_659;
        let x_662 : f32 = u_xlat51.x;
        u_xlat11.w = x_662;
        let x_665 : f32 = u_xlat12.x;
        u_xlat9.z = x_665;
        let x_668 : f32 = u_xlat8.x;
        u_xlat9.w = x_668;
        let x_671 : vec4<f32> = u_xlat9;
        let x_673 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_671.z, x_671.w, x_671.x, x_671.z) + vec4<f32>(x_673.z, x_673.w, x_673.x, x_673.z));
        let x_677 : f32 = u_xlat11.y;
        u_xlat10.z = x_677;
        let x_680 : f32 = u_xlat51.y;
        u_xlat10.w = x_680;
        let x_683 : f32 = u_xlat9.y;
        u_xlat12.z = x_683;
        let x_686 : f32 = u_xlat8.z;
        u_xlat12.w = x_686;
        let x_688 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = u_xlat12;
        let x_692 : vec3<f32> = (vec3<f32>(x_688.z, x_688.y, x_688.w) + vec3<f32>(x_690.z, x_690.y, x_690.w));
        let x_693 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat9;
        let x_697 : vec4<f32> = u_xlat13;
        let x_699 : vec3<f32> = (vec3<f32>(x_695.x, x_695.z, x_695.w) / vec3<f32>(x_697.z, x_697.w, x_697.y));
        let x_700 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat9;
        let x_708 : vec3<f32> = (vec3<f32>(x_702.x, x_702.y, x_702.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_709 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat12;
        let x_713 : vec4<f32> = u_xlat8;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.z, x_711.y, x_711.w) / vec3<f32>(x_713.x, x_713.y, x_713.z));
        let x_716 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat10;
        let x_720 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_720.x, x_720.y, x_720.z, x_721.w);
        let x_723 : vec4<f32> = u_xlat9;
        let x_726 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_728 : vec3<f32> = (vec3<f32>(x_723.y, x_723.x, x_723.z) * vec3<f32>(x_726.x, x_726.x, x_726.x));
        let x_729 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
        let x_731 : vec4<f32> = u_xlat10;
        let x_734 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_736 : vec3<f32> = (vec3<f32>(x_731.x, x_731.y, x_731.z) * vec3<f32>(x_734.y, x_734.y, x_734.y));
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_740 : f32 = u_xlat10.x;
        u_xlat9.w = x_740;
        let x_742 : vec4<f32> = u_xlat7;
        let x_745 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) * vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y)) + vec4<f32>(x_748.y, x_748.w, x_748.x, x_748.w));
        let x_751 : vec4<f32> = u_xlat7;
        let x_754 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_757 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_751.x, x_751.y) * vec2<f32>(x_754.x, x_754.y)) + vec2<f32>(x_757.z, x_757.w));
        let x_761 : f32 = u_xlat9.y;
        u_xlat10.w = x_761;
        let x_763 : vec4<f32> = u_xlat10;
        let x_764 : vec2<f32> = vec2<f32>(x_763.y, x_763.z);
        let x_765 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_765.x, x_764.x, x_765.z, x_764.y);
        let x_767 : vec4<f32> = u_xlat7;
        let x_770 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_767.x, x_767.y, x_767.x, x_767.y) * vec4<f32>(x_770.x, x_770.y, x_770.x, x_770.y)) + vec4<f32>(x_773.x, x_773.y, x_773.z, x_773.y));
        let x_776 : vec4<f32> = u_xlat7;
        let x_779 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_782 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y) * vec4<f32>(x_779.x, x_779.y, x_779.x, x_779.y)) + vec4<f32>(x_782.w, x_782.y, x_782.w, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_788 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_791 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y) * vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y)) + vec4<f32>(x_791.x, x_791.w, x_791.z, x_791.w));
        let x_795 : vec4<f32> = u_xlat8;
        let x_797 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_795.x, x_795.x, x_795.x, x_795.y) * vec4<f32>(x_797.z, x_797.w, x_797.y, x_797.z));
        let x_801 : vec4<f32> = u_xlat8;
        let x_803 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_801.y, x_801.y, x_801.z, x_801.z) * x_803);
        let x_807 : f32 = u_xlat8.z;
        let x_809 : f32 = u_xlat13.y;
        u_xlat68 = (x_807 * x_809);
        let x_812 : vec4<f32> = u_xlat11;
        let x_813 : vec2<f32> = vec2<f32>(x_812.x, x_812.y);
        let x_815 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_813.x, x_813.y, x_815);
        let x_823 : vec3<f32> = txVec4;
        let x_825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_823.xy, x_823.z);
        u_xlat70 = x_825;
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec5;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat72 = x_840;
        let x_841 : f32 = u_xlat72;
        let x_843 : f32 = u_xlat14.y;
        u_xlat72 = (x_841 * x_843);
        let x_846 : f32 = u_xlat14.x;
        let x_847 : f32 = u_xlat70;
        let x_849 : f32 = u_xlat72;
        u_xlat70 = ((x_846 * x_847) + x_849);
        let x_852 : vec2<f32> = u_xlat51;
        let x_854 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_852.x, x_852.y, x_854);
        let x_861 : vec3<f32> = txVec6;
        let x_863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_861.xy, x_861.z);
        u_xlat72 = x_863;
        let x_865 : f32 = u_xlat14.z;
        let x_866 : f32 = u_xlat72;
        let x_868 : f32 = u_xlat70;
        u_xlat70 = ((x_865 * x_866) + x_868);
        let x_871 : vec4<f32> = u_xlat10;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec7;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat72 = x_883;
        let x_885 : f32 = u_xlat14.w;
        let x_886 : f32 = u_xlat72;
        let x_888 : f32 = u_xlat70;
        u_xlat70 = ((x_885 * x_886) + x_888);
        let x_891 : vec4<f32> = u_xlat12;
        let x_892 : vec2<f32> = vec2<f32>(x_891.x, x_891.y);
        let x_894 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_892.x, x_892.y, x_894);
        let x_901 : vec3<f32> = txVec8;
        let x_903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_901.xy, x_901.z);
        u_xlat72 = x_903;
        let x_905 : f32 = u_xlat15.x;
        let x_906 : f32 = u_xlat72;
        let x_908 : f32 = u_xlat70;
        u_xlat70 = ((x_905 * x_906) + x_908);
        let x_911 : vec4<f32> = u_xlat12;
        let x_912 : vec2<f32> = vec2<f32>(x_911.z, x_911.w);
        let x_914 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec9;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat72 = x_923;
        let x_925 : f32 = u_xlat15.y;
        let x_926 : f32 = u_xlat72;
        let x_928 : f32 = u_xlat70;
        u_xlat70 = ((x_925 * x_926) + x_928);
        let x_931 : vec4<f32> = u_xlat10;
        let x_932 : vec2<f32> = vec2<f32>(x_931.z, x_931.w);
        let x_934 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec10;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_941.xy, x_941.z);
        u_xlat72 = x_943;
        let x_945 : f32 = u_xlat15.z;
        let x_946 : f32 = u_xlat72;
        let x_948 : f32 = u_xlat70;
        u_xlat70 = ((x_945 * x_946) + x_948);
        let x_951 : vec4<f32> = u_xlat9;
        let x_952 : vec2<f32> = vec2<f32>(x_951.x, x_951.y);
        let x_954 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_952.x, x_952.y, x_954);
        let x_961 : vec3<f32> = txVec11;
        let x_963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_961.xy, x_961.z);
        u_xlat72 = x_963;
        let x_965 : f32 = u_xlat15.w;
        let x_966 : f32 = u_xlat72;
        let x_968 : f32 = u_xlat70;
        u_xlat70 = ((x_965 * x_966) + x_968);
        let x_971 : vec4<f32> = u_xlat9;
        let x_972 : vec2<f32> = vec2<f32>(x_971.z, x_971.w);
        let x_974 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_972.x, x_972.y, x_974);
        let x_981 : vec3<f32> = txVec12;
        let x_983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_981.xy, x_981.z);
        u_xlat72 = x_983;
        let x_984 : f32 = u_xlat68;
        let x_985 : f32 = u_xlat72;
        let x_987 : f32 = u_xlat70;
        u_xlat67 = ((x_984 * x_985) + x_987);
      } else {
        let x_990 : vec4<f32> = u_xlat6;
        let x_993 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_996 : vec2<f32> = ((vec2<f32>(x_990.x, x_990.y) * vec2<f32>(x_993.z, x_993.w)) + vec2<f32>(0.5f, 0.5f));
        let x_997 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_996.x, x_996.y, x_997.z, x_997.w);
        let x_999 : vec4<f32> = u_xlat7;
        let x_1001 : vec2<f32> = floor(vec2<f32>(x_999.x, x_999.y));
        let x_1002 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1001.x, x_1001.y, x_1002.z, x_1002.w);
        let x_1004 : vec4<f32> = u_xlat6;
        let x_1007 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1010 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1007.z, x_1007.w)) + -(vec2<f32>(x_1010.x, x_1010.y)));
        let x_1014 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1014.x, x_1014.x, x_1014.y, x_1014.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1017 : vec4<f32> = u_xlat8;
        let x_1019 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1017.x, x_1017.x, x_1017.z, x_1017.z) * vec4<f32>(x_1019.x, x_1019.x, x_1019.z, x_1019.z));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1026 : vec2<f32> = (vec2<f32>(x_1022.y, x_1022.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1027 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1027.x, x_1026.x, x_1027.z, x_1026.y);
        let x_1029 : vec4<f32> = u_xlat9;
        let x_1032 : vec2<f32> = u_xlat51;
        let x_1034 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1032));
        let x_1035 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1034.x, x_1035.y, x_1034.y, x_1035.w);
        let x_1037 : vec2<f32> = u_xlat51;
        let x_1039 : vec2<f32> = (-(x_1037) + vec2<f32>(1.0f, 1.0f));
        let x_1040 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
        let x_1042 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1042, vec2<f32>(0.0f, 0.0f));
        let x_1044 : vec2<f32> = u_xlat53;
        let x_1046 : vec2<f32> = u_xlat53;
        let x_1048 : vec4<f32> = u_xlat9;
        let x_1050 : vec2<f32> = ((-(x_1044) * x_1046) + vec2<f32>(x_1048.x, x_1048.y));
        let x_1051 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1050.x, x_1050.y, x_1051.z, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1053, vec2<f32>(0.0f, 0.0f));
        let x_1056 : vec2<f32> = u_xlat53;
        let x_1058 : vec2<f32> = u_xlat53;
        let x_1060 : vec4<f32> = u_xlat8;
        let x_1062 : vec2<f32> = ((-(x_1056) * x_1058) + vec2<f32>(x_1060.y, x_1060.w));
        let x_1063 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1062.x, x_1063.y, x_1062.y);
        let x_1065 : vec4<f32> = u_xlat9;
        let x_1068 : vec2<f32> = (vec2<f32>(x_1065.x, x_1065.y) + vec2<f32>(2.0f, 2.0f));
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1071 : vec3<f32> = u_xlat30;
        let x_1073 : vec2<f32> = (vec2<f32>(x_1071.x, x_1071.z) + vec2<f32>(2.0f, 2.0f));
        let x_1074 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1074.x, x_1073.x, x_1074.z, x_1073.y);
        let x_1077 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1077 * 0.081632003f);
        let x_1081 : vec4<f32> = u_xlat8;
        let x_1084 : vec3<f32> = (vec3<f32>(x_1081.z, x_1081.x, x_1081.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1085 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1084.x, x_1084.y, x_1084.z, x_1085.w);
        let x_1087 : vec4<f32> = u_xlat9;
        let x_1090 : vec2<f32> = (vec2<f32>(x_1087.x, x_1087.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1091 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1090.x, x_1090.y, x_1091.z, x_1091.w);
        let x_1094 : f32 = u_xlat12.y;
        u_xlat11.x = x_1094;
        let x_1096 : vec2<f32> = u_xlat51;
        let x_1103 : vec2<f32> = ((vec2<f32>(x_1096.x, x_1096.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1104.x, x_1103.x, x_1104.z, x_1103.y);
        let x_1106 : vec2<f32> = u_xlat51;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1106.x, x_1106.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat8.x;
        u_xlat9.y = x_1114;
        let x_1117 : f32 = u_xlat10.y;
        u_xlat9.w = x_1117;
        let x_1119 : vec4<f32> = u_xlat9;
        let x_1120 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1119 + x_1120);
        let x_1122 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1122.y, x_1122.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1126 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1126.x, x_1125.x, x_1126.z, x_1125.y);
        let x_1128 : vec2<f32> = u_xlat51;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1128.y, x_1128.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat8.y;
        u_xlat10.y = x_1135;
        let x_1137 : vec4<f32> = u_xlat10;
        let x_1138 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1137 + x_1138);
        let x_1140 : vec4<f32> = u_xlat9;
        let x_1141 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1140 / x_1141);
        let x_1143 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1143 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1149 : vec4<f32> = u_xlat10;
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1149 / x_1150);
        let x_1152 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1152 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1157 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1154.w, x_1154.x, x_1154.y, x_1154.z) * vec4<f32>(x_1157.x, x_1157.x, x_1157.x, x_1157.x));
        let x_1160 : vec4<f32> = u_xlat10;
        let x_1163 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1160.x, x_1160.w, x_1160.y, x_1160.z) * vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y));
        let x_1166 : vec4<f32> = u_xlat9;
        let x_1167 : vec3<f32> = vec3<f32>(x_1166.y, x_1166.z, x_1166.w);
        let x_1168 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1167.x, x_1168.y, x_1167.y, x_1167.z);
        let x_1171 : f32 = u_xlat10.x;
        u_xlat12.y = x_1171;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1179 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1173.x, x_1173.y, x_1173.x, x_1173.y) * vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y)) + vec4<f32>(x_1179.x, x_1179.y, x_1179.z, x_1179.y));
        let x_1182 : vec4<f32> = u_xlat7;
        let x_1185 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1188 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(x_1185.x, x_1185.y)) + vec2<f32>(x_1188.w, x_1188.y));
        let x_1192 : f32 = u_xlat12.y;
        u_xlat9.y = x_1192;
        let x_1195 : f32 = u_xlat10.z;
        u_xlat12.y = x_1195;
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1206 : vec4<f32> = u_xlat7;
        let x_1209 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1212 : vec4<f32> = u_xlat12;
        let x_1214 : vec2<f32> = ((vec2<f32>(x_1206.x, x_1206.y) * vec2<f32>(x_1209.x, x_1209.y)) + vec2<f32>(x_1212.w, x_1212.y));
        let x_1215 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1214.x, x_1214.y, x_1215.z, x_1215.w);
        let x_1218 : f32 = u_xlat12.y;
        u_xlat9.z = x_1218;
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y) * vec4<f32>(x_1224.x, x_1224.y, x_1224.x, x_1224.y)) + vec4<f32>(x_1227.x, x_1227.y, x_1227.x, x_1227.z));
        let x_1231 : f32 = u_xlat10.w;
        u_xlat12.y = x_1231;
        let x_1234 : vec4<f32> = u_xlat7;
        let x_1237 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1240 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1234.x, x_1234.y, x_1234.x, x_1234.y) * vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y)) + vec4<f32>(x_1240.x, x_1240.y, x_1240.z, x_1240.y));
        let x_1244 : vec4<f32> = u_xlat7;
        let x_1247 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1250 : vec4<f32> = u_xlat12;
        let x_1252 : vec2<f32> = ((vec2<f32>(x_1244.x, x_1244.y) * vec2<f32>(x_1247.x, x_1247.y)) + vec2<f32>(x_1250.w, x_1250.y));
        let x_1253 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1252.x, x_1252.y, x_1253.z);
        let x_1256 : f32 = u_xlat12.y;
        u_xlat9.w = x_1256;
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.x, x_1265.w));
        let x_1268 : vec4<f32> = u_xlat12;
        let x_1269 : vec3<f32> = vec3<f32>(x_1268.x, x_1268.z, x_1268.w);
        let x_1270 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1269.x, x_1270.y, x_1269.y, x_1269.z);
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1272.x, x_1272.y, x_1272.x, x_1272.y) * vec4<f32>(x_1275.x, x_1275.y, x_1275.x, x_1275.y)) + vec4<f32>(x_1278.x, x_1278.y, x_1278.z, x_1278.y));
        let x_1282 : vec4<f32> = u_xlat7;
        let x_1285 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1288 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1282.x, x_1282.y) * vec2<f32>(x_1285.x, x_1285.y)) + vec2<f32>(x_1288.w, x_1288.y));
        let x_1292 : f32 = u_xlat9.x;
        u_xlat10.x = x_1292;
        let x_1294 : vec4<f32> = u_xlat7;
        let x_1297 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1300 : vec4<f32> = u_xlat10;
        let x_1302 : vec2<f32> = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(x_1300.x, x_1300.y));
        let x_1303 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1302.x, x_1302.y, x_1303.z, x_1303.w);
        let x_1306 : vec4<f32> = u_xlat8;
        let x_1308 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1306.x, x_1306.x, x_1306.x, x_1306.x) * x_1308);
        let x_1311 : vec4<f32> = u_xlat8;
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1311.y, x_1311.y, x_1311.y, x_1311.y) * x_1313);
        let x_1316 : vec4<f32> = u_xlat8;
        let x_1318 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1316.z, x_1316.z, x_1316.z, x_1316.z) * x_1318);
        let x_1320 : vec4<f32> = u_xlat8;
        let x_1322 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1320.w, x_1320.w, x_1320.w, x_1320.w) * x_1322);
        let x_1325 : vec4<f32> = u_xlat13;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.x, x_1325.y);
        let x_1328 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec13;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat68 = x_1337;
        let x_1339 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.z, x_1339.w);
        let x_1342 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec14;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat70 = x_1351;
        let x_1352 : f32 = u_xlat70;
        let x_1354 : f32 = u_xlat18.y;
        u_xlat70 = (x_1352 * x_1354);
        let x_1357 : f32 = u_xlat18.x;
        let x_1358 : f32 = u_xlat68;
        let x_1360 : f32 = u_xlat70;
        u_xlat68 = ((x_1357 * x_1358) + x_1360);
        let x_1363 : vec2<f32> = u_xlat51;
        let x_1365 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec15;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat70 = x_1374;
        let x_1376 : f32 = u_xlat18.z;
        let x_1377 : f32 = u_xlat70;
        let x_1379 : f32 = u_xlat68;
        u_xlat68 = ((x_1376 * x_1377) + x_1379);
        let x_1382 : vec4<f32> = u_xlat16;
        let x_1383 : vec2<f32> = vec2<f32>(x_1382.x, x_1382.y);
        let x_1385 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec16;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat70 = x_1394;
        let x_1396 : f32 = u_xlat18.w;
        let x_1397 : f32 = u_xlat70;
        let x_1399 : f32 = u_xlat68;
        u_xlat68 = ((x_1396 * x_1397) + x_1399);
        let x_1402 : vec4<f32> = u_xlat14;
        let x_1403 : vec2<f32> = vec2<f32>(x_1402.x, x_1402.y);
        let x_1405 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1403.x, x_1403.y, x_1405);
        let x_1412 : vec3<f32> = txVec17;
        let x_1414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1412.xy, x_1412.z);
        u_xlat70 = x_1414;
        let x_1416 : f32 = u_xlat19.x;
        let x_1417 : f32 = u_xlat70;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1416 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat14;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.z, x_1422.w);
        let x_1425 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec18;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat70 = x_1434;
        let x_1436 : f32 = u_xlat19.y;
        let x_1437 : f32 = u_xlat70;
        let x_1439 : f32 = u_xlat68;
        u_xlat68 = ((x_1436 * x_1437) + x_1439);
        let x_1442 : vec4<f32> = u_xlat15;
        let x_1443 : vec2<f32> = vec2<f32>(x_1442.x, x_1442.y);
        let x_1445 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1443.x, x_1443.y, x_1445);
        let x_1452 : vec3<f32> = txVec19;
        let x_1454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1452.xy, x_1452.z);
        u_xlat70 = x_1454;
        let x_1456 : f32 = u_xlat19.z;
        let x_1457 : f32 = u_xlat70;
        let x_1459 : f32 = u_xlat68;
        u_xlat68 = ((x_1456 * x_1457) + x_1459);
        let x_1462 : vec4<f32> = u_xlat16;
        let x_1463 : vec2<f32> = vec2<f32>(x_1462.z, x_1462.w);
        let x_1465 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1463.x, x_1463.y, x_1465);
        let x_1472 : vec3<f32> = txVec20;
        let x_1474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1472.xy, x_1472.z);
        u_xlat70 = x_1474;
        let x_1476 : f32 = u_xlat19.w;
        let x_1477 : f32 = u_xlat70;
        let x_1479 : f32 = u_xlat68;
        u_xlat68 = ((x_1476 * x_1477) + x_1479);
        let x_1482 : vec4<f32> = u_xlat17;
        let x_1483 : vec2<f32> = vec2<f32>(x_1482.x, x_1482.y);
        let x_1485 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1483.x, x_1483.y, x_1485);
        let x_1492 : vec3<f32> = txVec21;
        let x_1494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1492.xy, x_1492.z);
        u_xlat70 = x_1494;
        let x_1496 : f32 = u_xlat20.x;
        let x_1497 : f32 = u_xlat70;
        let x_1499 : f32 = u_xlat68;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec4<f32> = u_xlat17;
        let x_1503 : vec2<f32> = vec2<f32>(x_1502.z, x_1502.w);
        let x_1505 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1503.x, x_1503.y, x_1505);
        let x_1512 : vec3<f32> = txVec22;
        let x_1514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1512.xy, x_1512.z);
        u_xlat70 = x_1514;
        let x_1516 : f32 = u_xlat20.y;
        let x_1517 : f32 = u_xlat70;
        let x_1519 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1517) + x_1519);
        let x_1522 : vec3<f32> = u_xlat31;
        let x_1523 : vec2<f32> = vec2<f32>(x_1522.x, x_1522.y);
        let x_1525 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec23;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat70 = x_1534;
        let x_1536 : f32 = u_xlat20.z;
        let x_1537 : f32 = u_xlat70;
        let x_1539 : f32 = u_xlat68;
        u_xlat68 = ((x_1536 * x_1537) + x_1539);
        let x_1542 : vec2<f32> = u_xlat59;
        let x_1544 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1542.x, x_1542.y, x_1544);
        let x_1551 : vec3<f32> = txVec24;
        let x_1553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1551.xy, x_1551.z);
        u_xlat70 = x_1553;
        let x_1555 : f32 = u_xlat20.w;
        let x_1556 : f32 = u_xlat70;
        let x_1558 : f32 = u_xlat68;
        u_xlat68 = ((x_1555 * x_1556) + x_1558);
        let x_1561 : vec4<f32> = u_xlat12;
        let x_1562 : vec2<f32> = vec2<f32>(x_1561.x, x_1561.y);
        let x_1564 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1562.x, x_1562.y, x_1564);
        let x_1571 : vec3<f32> = txVec25;
        let x_1573 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1571.xy, x_1571.z);
        u_xlat70 = x_1573;
        let x_1575 : f32 = u_xlat8.x;
        let x_1576 : f32 = u_xlat70;
        let x_1578 : f32 = u_xlat68;
        u_xlat68 = ((x_1575 * x_1576) + x_1578);
        let x_1581 : vec4<f32> = u_xlat12;
        let x_1582 : vec2<f32> = vec2<f32>(x_1581.z, x_1581.w);
        let x_1584 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1582.x, x_1582.y, x_1584);
        let x_1591 : vec3<f32> = txVec26;
        let x_1593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1591.xy, x_1591.z);
        u_xlat70 = x_1593;
        let x_1595 : f32 = u_xlat8.y;
        let x_1596 : f32 = u_xlat70;
        let x_1598 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1596) + x_1598);
        let x_1601 : vec2<f32> = u_xlat54;
        let x_1603 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec27;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat70 = x_1612;
        let x_1614 : f32 = u_xlat8.z;
        let x_1615 : f32 = u_xlat70;
        let x_1617 : f32 = u_xlat68;
        u_xlat68 = ((x_1614 * x_1615) + x_1617);
        let x_1620 : vec4<f32> = u_xlat7;
        let x_1621 : vec2<f32> = vec2<f32>(x_1620.x, x_1620.y);
        let x_1623 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1630 : vec3<f32> = txVec28;
        let x_1632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1630.xy, x_1630.z);
        u_xlat70 = x_1632;
        let x_1634 : f32 = u_xlat8.w;
        let x_1635 : f32 = u_xlat70;
        let x_1637 : f32 = u_xlat68;
        u_xlat67 = ((x_1634 * x_1635) + x_1637);
      }
    }
  } else {
    let x_1641 : vec4<f32> = u_xlat6;
    let x_1642 : vec2<f32> = vec2<f32>(x_1641.x, x_1641.y);
    let x_1644 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1642.x, x_1642.y, x_1644);
    let x_1651 : vec3<f32> = txVec29;
    let x_1653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1651.xy, x_1651.z);
    u_xlat67 = x_1653;
  }
  let x_1655 : f32 = x_255.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1655) + 1.0f);
  let x_1658 : f32 = u_xlat67;
  let x_1660 : f32 = x_255.x_MainLightShadowParams.x;
  let x_1662 : f32 = u_xlat68;
  u_xlat67 = ((x_1658 * x_1660) + x_1662);
  let x_1666 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1666);
  let x_1670 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1670 >= 1.0f);
  let x_1672 : bool = u_xlatb70;
  let x_1673 : bool = u_xlatb72;
  u_xlatb70 = (x_1672 | x_1673);
  let x_1675 : bool = u_xlatb70;
  let x_1676 : f32 = u_xlat67;
  u_xlat67 = select(x_1676, 1.0f, x_1675);
  let x_1678 : vec3<f32> = u_xlat0;
  let x_1680 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1678, -(vec3<f32>(x_1680.x, x_1680.y, x_1680.z)));
  let x_1686 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1686, 0.0f, 1.0f);
  let x_1689 : f32 = u_xlat67;
  let x_1692 : vec4<f32> = x_90.x_MainLightColor;
  let x_1694 : vec3<f32> = (vec3<f32>(x_1689, x_1689, x_1689) * vec3<f32>(x_1692.x, x_1692.y, x_1692.z));
  let x_1695 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1694.x, x_1694.y, x_1694.z, x_1695.w);
  let x_1697 : vec3<f32> = u_xlat0;
  let x_1699 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1697.x, x_1697.x, x_1697.x) * vec3<f32>(x_1699.x, x_1699.y, x_1699.z));
  let x_1702 : vec3<f32> = u_xlat0;
  let x_1703 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1702 * vec3<f32>(x_1703.x, x_1703.y, x_1703.z));
  let x_1707 : f32 = x_145.unity_LODFade.x;
  u_xlatb67 = (x_1707 < 0.0f);
  let x_1710 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1710 + 1.0f);
  let x_1713 : bool = u_xlatb67;
  if (x_1713) {
    let x_1718 : f32 = u_xlat3.x;
    x_1714 = x_1718;
  } else {
    let x_1721 : f32 = x_145.unity_LODFade.x;
    x_1714 = x_1721;
  }
  let x_1722 : f32 = x_1714;
  u_xlat67 = x_1722;
  let x_1724 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1724);
  let x_1726 : vec3<f32> = u_xlat2;
  let x_1729 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1726) * vec3<f32>(x_1729.x, x_1729.y, x_1729.x));
  let x_1735 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1735);
  let x_1739 : u32 = u_xlatu2.z;
  u_xlatu46 = (x_1739 * 1025u);
  let x_1743 : u32 = u_xlatu46;
  u_xlatu25 = (x_1743 >> 6u);
  let x_1747 : u32 = u_xlatu46;
  let x_1748 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1747 ^ x_1748));
  let x_1751 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1751) * 9u);
  let x_1755 : u32 = u_xlatu46;
  u_xlatu25 = (x_1755 >> 11u);
  let x_1758 : u32 = u_xlatu46;
  let x_1759 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1758 ^ x_1759));
  let x_1762 : i32 = u_xlati46;
  u_xlati46 = (x_1762 * 32769i);
  let x_1766 : i32 = u_xlati46;
  let x_1769 : u32 = u_xlatu2.y;
  u_xlati24 = bitcast<i32>((bitcast<u32>(x_1766) ^ x_1769));
  let x_1773 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1773) * 1025u);
  let x_1776 : u32 = u_xlatu24;
  u_xlatu46 = (x_1776 >> 6u);
  let x_1778 : u32 = u_xlatu46;
  let x_1779 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1778 ^ x_1779));
  let x_1782 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1782) * 9u);
  let x_1785 : u32 = u_xlatu24;
  u_xlatu46 = (x_1785 >> 11u);
  let x_1787 : u32 = u_xlatu46;
  let x_1788 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1787 ^ x_1788));
  let x_1791 : i32 = u_xlati24;
  u_xlati24 = (x_1791 * 32769i);
  let x_1794 : i32 = u_xlati24;
  let x_1797 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1794) ^ x_1797));
  let x_1800 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1800) * 1025u);
  let x_1805 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1805 >> 6u);
  let x_1807 : u32 = u_xlatu24;
  let x_1809 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1807 ^ x_1809));
  let x_1812 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1812) * 9u);
  let x_1817 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1817 >> 11u);
  let x_1819 : u32 = u_xlatu24;
  let x_1821 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1819 ^ x_1821));
  let x_1824 : i32 = u_xlati2;
  u_xlati2 = (x_1824 * 32769i);
  param = 1065353216i;
  let x_1830 : i32 = u_xlati2;
  param_1 = x_1830;
  param_2 = 0i;
  param_3 = 23i;
  let x_1833 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1833);
  let x_1837 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1837 + -1.0f);
  let x_1842 : f32 = u_xlat2.x;
  u_xlat24.x = (-(x_1842) + 1.0f);
  let x_1846 : bool = u_xlatb3;
  if (x_1846) {
    let x_1851 : f32 = u_xlat2.x;
    x_1847 = x_1851;
  } else {
    let x_1854 : f32 = u_xlat24.x;
    x_1847 = x_1854;
  }
  let x_1855 : f32 = x_1847;
  u_xlat2.x = x_1855;
  let x_1857 : f32 = u_xlat67;
  let x_1860 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1857 * 2.0f) + -(x_1860));
  let x_1863 : f32 = u_xlat67;
  let x_1865 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1863 * x_1865);
  let x_1872 : f32 = u_xlat2.x;
  u_xlatb24.x = (x_1872 >= 0.400000006f);
  let x_1877 : bool = u_xlatb24.x;
  if (x_1877) {
    let x_1882 : f32 = u_xlat2.x;
    x_1878 = x_1882;
  } else {
    x_1878 = 0.0f;
  }
  let x_1884 : f32 = x_1878;
  u_xlat24.x = x_1884;
  let x_1887 : f32 = u_xlat3.w;
  let x_1888 : f32 = u_xlat67;
  u_xlat67 = ((x_1887 * x_1888) + -0.400000006f);
  let x_1894 : f32 = u_xlat2.x;
  u_xlat46 = dpdxCoarse(x_1894);
  let x_1897 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1897);
  let x_1901 : f32 = u_xlat2.x;
  let x_1903 : f32 = u_xlat46;
  u_xlat2.x = (abs(x_1901) + abs(x_1903));
  let x_1908 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1908, 0.0001f);
  let x_1912 : f32 = u_xlat67;
  let x_1914 : f32 = u_xlat2.x;
  u_xlat67 = (x_1912 / x_1914);
  let x_1916 : f32 = u_xlat67;
  u_xlat67 = (x_1916 + 0.5f);
  let x_1918 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1918, 0.0f, 1.0f);
  let x_1922 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1922 == 0.0f));
  let x_1924 : bool = u_xlatb2;
  if (x_1924) {
    let x_1928 : f32 = u_xlat67;
    x_1925 = x_1928;
  } else {
    let x_1931 : f32 = u_xlat24.x;
    x_1925 = x_1931;
  }
  let x_1932 : f32 = x_1925;
  u_xlat67 = x_1932;
  let x_1933 : f32 = u_xlat67;
  u_xlat24.x = (x_1933 + -0.0001f);
  let x_1938 : f32 = u_xlat24.x;
  u_xlatb24.x = (x_1938 < 0.0f);
  let x_1942 : bool = u_xlatb24.x;
  if (((select(0i, 1i, x_1942) * -1i) != 0i)) {
    discard;
  }
  let x_1952 : f32 = vs_INTERP2.w;
  u_xlatb24.x = (0.0f < x_1952);
  let x_1956 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb24.y = (x_1956 >= 0.0f);
  let x_1960 : bool = u_xlatb24.x;
  u_xlat24.x = select(-1.0f, 1.0f, x_1960);
  let x_1964 : bool = u_xlatb24.y;
  u_xlat24.y = select(-1.0f, 1.0f, x_1964);
  let x_1968 : f32 = u_xlat24.y;
  let x_1970 : f32 = u_xlat24.x;
  u_xlat24.x = (x_1968 * x_1970);
  let x_1973 : vec3<f32> = vs_INTERP1;
  let x_1975 : vec4<f32> = vs_INTERP2;
  let x_1977 : vec3<f32> = (vec3<f32>(x_1973.z, x_1973.x, x_1973.y) * vec3<f32>(x_1975.y, x_1975.z, x_1975.x));
  let x_1978 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1977.x, x_1977.y, x_1977.z, x_1978.w);
  let x_1980 : vec3<f32> = vs_INTERP1;
  let x_1982 : vec4<f32> = vs_INTERP2;
  let x_1985 : vec4<f32> = u_xlat3;
  let x_1988 : vec3<f32> = ((vec3<f32>(x_1980.y, x_1980.z, x_1980.x) * vec3<f32>(x_1982.z, x_1982.x, x_1982.y)) + -(vec3<f32>(x_1985.x, x_1985.y, x_1985.z)));
  let x_1989 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1988.x, x_1988.y, x_1988.z, x_1989.w);
  let x_1991 : vec2<f32> = u_xlat24;
  let x_1993 : vec4<f32> = u_xlat3;
  let x_1995 : vec3<f32> = (vec3<f32>(x_1991.x, x_1991.x, x_1991.x) * vec3<f32>(x_1993.x, x_1993.y, x_1993.z));
  let x_1996 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1995.x, x_1995.y, x_1995.z, x_1996.w);
  let x_1998 : vec4<f32> = u_xlat3;
  let x_2000 : vec3<f32> = u_xlat27;
  let x_2002 : vec3<f32> = (vec3<f32>(x_1998.x, x_1998.y, x_1998.z) * vec3<f32>(x_2000.y, x_2000.y, x_2000.y));
  let x_2003 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2002.x, x_2002.y, x_2002.z, x_2003.w);
  let x_2005 : vec3<f32> = u_xlat27;
  let x_2007 : vec4<f32> = vs_INTERP2;
  let x_2010 : vec4<f32> = u_xlat3;
  let x_2012 : vec3<f32> = ((vec3<f32>(x_2005.x, x_2005.x, x_2005.x) * vec3<f32>(x_2007.x, x_2007.y, x_2007.z)) + vec3<f32>(x_2010.x, x_2010.y, x_2010.z));
  let x_2013 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2012.x, x_2012.y, x_2012.z, x_2013.w);
  let x_2015 : vec3<f32> = u_xlat27;
  let x_2017 : vec3<f32> = vs_INTERP1;
  let x_2019 : vec4<f32> = u_xlat3;
  let x_2021 : vec3<f32> = ((vec3<f32>(x_2015.z, x_2015.z, x_2015.z) * x_2017) + vec3<f32>(x_2019.x, x_2019.y, x_2019.z));
  let x_2022 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2021.x, x_2021.y, x_2021.z, x_2022.w);
  let x_2024 : vec4<f32> = u_xlat3;
  let x_2026 : vec4<f32> = u_xlat3;
  u_xlat24.x = dot(vec3<f32>(x_2024.x, x_2024.y, x_2024.z), vec3<f32>(x_2026.x, x_2026.y, x_2026.z));
  let x_2031 : f32 = u_xlat24.x;
  u_xlat24.x = inverseSqrt(x_2031);
  let x_2034 : vec2<f32> = u_xlat24;
  let x_2036 : vec4<f32> = u_xlat3;
  let x_2038 : vec3<f32> = (vec3<f32>(x_2034.x, x_2034.x, x_2034.x) * vec3<f32>(x_2036.x, x_2036.y, x_2036.z));
  let x_2039 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2038.x, x_2038.y, x_2038.z, x_2039.w);
  let x_2042 : f32 = vs_INTERP0.y;
  let x_2044 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat24.x = (x_2042 * x_2044);
  let x_2048 : f32 = x_90.unity_MatrixV[0i].z;
  let x_2050 : f32 = vs_INTERP0.x;
  let x_2053 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2048 * x_2050) + x_2053);
  let x_2057 : f32 = x_90.unity_MatrixV[2i].z;
  let x_2059 : f32 = vs_INTERP0.z;
  let x_2062 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2057 * x_2059) + x_2062);
  let x_2066 : f32 = u_xlat24.x;
  let x_2068 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat24.x = (x_2066 + x_2068);
  let x_2072 : f32 = u_xlat24.x;
  let x_2075 : f32 = x_90.x_ProjectionParams.y;
  u_xlat24.x = (-(x_2072) + -(x_2075));
  let x_2080 : f32 = u_xlat24.x;
  u_xlat24.x = max(x_2080, 0.0f);
  let x_2084 : f32 = u_xlat24.x;
  let x_2087 : f32 = x_90.unity_FogParams.x;
  u_xlat24.x = (x_2084 * x_2087);
  u_xlat3.w = 1.0f;
  let x_2093 : vec4<f32> = x_145.unity_SHAr;
  let x_2094 : vec4<f32> = u_xlat3;
  u_xlat7.x = dot(x_2093, x_2094);
  let x_2099 : vec4<f32> = x_145.unity_SHAg;
  let x_2100 : vec4<f32> = u_xlat3;
  u_xlat7.y = dot(x_2099, x_2100);
  let x_2105 : vec4<f32> = x_145.unity_SHAb;
  let x_2106 : vec4<f32> = u_xlat3;
  u_xlat7.z = dot(x_2105, x_2106);
  let x_2109 : vec4<f32> = u_xlat3;
  let x_2111 : vec4<f32> = u_xlat3;
  u_xlat8 = (vec4<f32>(x_2109.y, x_2109.z, x_2109.z, x_2109.x) * vec4<f32>(x_2111.x, x_2111.y, x_2111.z, x_2111.z));
  let x_2116 : vec4<f32> = x_145.unity_SHBr;
  let x_2117 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_2116, x_2117);
  let x_2122 : vec4<f32> = x_145.unity_SHBg;
  let x_2123 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_2122, x_2123);
  let x_2127 : vec4<f32> = x_145.unity_SHBb;
  let x_2128 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_2127, x_2128);
  let x_2132 : f32 = u_xlat3.y;
  let x_2134 : f32 = u_xlat3.y;
  u_xlat46 = (x_2132 * x_2134);
  let x_2137 : f32 = u_xlat3.x;
  let x_2139 : f32 = u_xlat3.x;
  let x_2141 : f32 = u_xlat46;
  u_xlat46 = ((x_2137 * x_2139) + -(x_2141));
  let x_2146 : vec4<f32> = x_145.unity_SHC;
  let x_2148 : f32 = u_xlat46;
  let x_2151 : vec4<f32> = u_xlat9;
  u_xlat27 = ((vec3<f32>(x_2146.x, x_2146.y, x_2146.z) * vec3<f32>(x_2148, x_2148, x_2148)) + vec3<f32>(x_2151.x, x_2151.y, x_2151.z));
  let x_2154 : vec3<f32> = u_xlat27;
  let x_2155 : vec4<f32> = u_xlat7;
  u_xlat27 = (x_2154 + vec3<f32>(x_2155.x, x_2155.y, x_2155.z));
  let x_2158 : vec3<f32> = u_xlat27;
  u_xlat27 = max(x_2158, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2161 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2162 : vec2<f32> = vec2<f32>(x_2161.x, x_2161.y);
  let x_2166 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2162.x, x_2162.y));
  let x_2167 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2166.x, x_2166.y, x_2167.z, x_2167.w);
  let x_2169 : vec4<f32> = u_xlat7;
  let x_2171 : vec4<f32> = hlslcc_FragCoord;
  let x_2173 : vec2<f32> = (vec2<f32>(x_2169.x, x_2169.y) * vec2<f32>(x_2171.x, x_2171.y));
  let x_2174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2173.x, x_2173.y, x_2174.z, x_2174.w);
  let x_2177 : f32 = u_xlat7.y;
  let x_2180 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2183 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat46 = ((x_2177 * x_2180) + x_2183);
  let x_2185 : f32 = u_xlat46;
  u_xlat7.z = (-(x_2185) + 1.0f);
  let x_2190 : f32 = u_xlat5.x;
  u_xlat5.x = x_2190;
  let x_2193 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2193, 0.0f, 1.0f);
  let x_2196 : f32 = u_xlat67;
  u_xlat67 = x_2196;
  let x_2197 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2197, 0.0f, 1.0f);
  let x_2199 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2199 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2204 : f32 = u_xlat5.x;
  u_xlat46 = (-(x_2204) + 1.0f);
  let x_2208 : f32 = u_xlat46;
  let x_2209 : f32 = u_xlat46;
  u_xlat69 = (x_2208 * x_2209);
  let x_2211 : f32 = u_xlat69;
  u_xlat69 = max(x_2211, 0.0078125f);
  let x_2214 : f32 = u_xlat69;
  let x_2215 : f32 = u_xlat69;
  u_xlat72 = (x_2214 * x_2215);
  let x_2218 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2218 + 0.040000021f);
  let x_2223 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2223, 1.0f);
  let x_2227 : f32 = u_xlat69;
  u_xlat29 = ((x_2227 * 4.0f) + 2.0f);
  let x_2235 : vec4<f32> = u_xlat7;
  let x_2238 : f32 = x_90.x_GlobalMipBias.x;
  let x_2239 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2235.x, x_2235.z), x_2238);
  u_xlat7.x = x_2239.x;
  let x_2243 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2243 + -1.0f);
  let x_2247 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2249 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2247 * x_2249) + 1.0f);
  let x_2254 : f32 = u_xlat7.x;
  let x_2256 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2254, x_2256);
  let x_2259 : bool = u_xlatb66;
  if (x_2259) {
    let x_2263 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2263 == 1.0f);
    let x_2265 : bool = u_xlatb66;
    if (x_2265) {
      let x_2268 : vec4<f32> = u_xlat6;
      let x_2271 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2268.x, x_2268.y, x_2268.x, x_2268.y) + x_2271);
      let x_2274 : vec4<f32> = u_xlat8;
      let x_2275 : vec2<f32> = vec2<f32>(x_2274.x, x_2274.y);
      let x_2277 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2275.x, x_2275.y, x_2277);
      let x_2284 : vec3<f32> = txVec30;
      let x_2286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2284.xy, x_2284.z);
      u_xlat9.x = x_2286;
      let x_2289 : vec4<f32> = u_xlat8;
      let x_2290 : vec2<f32> = vec2<f32>(x_2289.z, x_2289.w);
      let x_2292 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2290.x, x_2290.y, x_2292);
      let x_2299 : vec3<f32> = txVec31;
      let x_2301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2299.xy, x_2299.z);
      u_xlat9.y = x_2301;
      let x_2303 : vec4<f32> = u_xlat6;
      let x_2306 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2303.x, x_2303.y, x_2303.x, x_2303.y) + x_2306);
      let x_2309 : vec4<f32> = u_xlat8;
      let x_2310 : vec2<f32> = vec2<f32>(x_2309.x, x_2309.y);
      let x_2312 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2310.x, x_2310.y, x_2312);
      let x_2319 : vec3<f32> = txVec32;
      let x_2321 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2319.xy, x_2319.z);
      u_xlat9.z = x_2321;
      let x_2324 : vec4<f32> = u_xlat8;
      let x_2325 : vec2<f32> = vec2<f32>(x_2324.z, x_2324.w);
      let x_2327 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2325.x, x_2325.y, x_2327);
      let x_2334 : vec3<f32> = txVec33;
      let x_2336 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2334.xy, x_2334.z);
      u_xlat9.w = x_2336;
      let x_2338 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2338, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2343 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2343 == 2.0f);
      let x_2345 : bool = u_xlatb73;
      if (x_2345) {
        let x_2348 : vec4<f32> = u_xlat6;
        let x_2351 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2354 : vec2<f32> = ((vec2<f32>(x_2348.x, x_2348.y) * vec2<f32>(x_2351.z, x_2351.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2355 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2354.x, x_2354.y, x_2355.z, x_2355.w);
        let x_2357 : vec4<f32> = u_xlat8;
        let x_2359 : vec2<f32> = floor(vec2<f32>(x_2357.x, x_2357.y));
        let x_2360 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2359.x, x_2359.y, x_2360.z, x_2360.w);
        let x_2363 : vec4<f32> = u_xlat6;
        let x_2366 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2369 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2363.x, x_2363.y) * vec2<f32>(x_2366.z, x_2366.w)) + -(vec2<f32>(x_2369.x, x_2369.y)));
        let x_2373 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2373.x, x_2373.x, x_2373.y, x_2373.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2376 : vec4<f32> = u_xlat9;
        let x_2378 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2376.x, x_2376.x, x_2376.z, x_2376.z) * vec4<f32>(x_2378.x, x_2378.x, x_2378.z, x_2378.z));
        let x_2381 : vec4<f32> = u_xlat10;
        let x_2383 : vec2<f32> = (vec2<f32>(x_2381.y, x_2381.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2384 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2383.x, x_2384.y, x_2383.y, x_2384.w);
        let x_2386 : vec4<f32> = u_xlat10;
        let x_2389 : vec2<f32> = u_xlat52;
        let x_2391 : vec2<f32> = ((vec2<f32>(x_2386.x, x_2386.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2389));
        let x_2392 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2391.x, x_2391.y, x_2392.z, x_2392.w);
        let x_2394 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2394) + vec2<f32>(1.0f, 1.0f));
        let x_2397 : vec2<f32> = u_xlat52;
        let x_2398 : vec2<f32> = min(x_2397, vec2<f32>(0.0f, 0.0f));
        let x_2399 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2398.x, x_2398.y, x_2399.z, x_2399.w);
        let x_2401 : vec4<f32> = u_xlat11;
        let x_2404 : vec4<f32> = u_xlat11;
        let x_2407 : vec2<f32> = u_xlat54;
        let x_2408 : vec2<f32> = ((-(vec2<f32>(x_2401.x, x_2401.y)) * vec2<f32>(x_2404.x, x_2404.y)) + x_2407);
        let x_2409 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2408.x, x_2408.y, x_2409.z, x_2409.w);
        let x_2411 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2411, vec2<f32>(0.0f, 0.0f));
        let x_2413 : vec2<f32> = u_xlat52;
        let x_2415 : vec2<f32> = u_xlat52;
        let x_2417 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2413) * x_2415) + vec2<f32>(x_2417.y, x_2417.w));
        let x_2420 : vec4<f32> = u_xlat11;
        let x_2422 : vec2<f32> = (vec2<f32>(x_2420.x, x_2420.y) + vec2<f32>(1.0f, 1.0f));
        let x_2423 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2422.x, x_2422.y, x_2423.z, x_2423.w);
        let x_2425 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2425 + vec2<f32>(1.0f, 1.0f));
        let x_2427 : vec4<f32> = u_xlat10;
        let x_2429 : vec2<f32> = (vec2<f32>(x_2427.x, x_2427.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2430 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2429.x, x_2429.y, x_2430.z, x_2430.w);
        let x_2432 : vec2<f32> = u_xlat54;
        let x_2433 : vec2<f32> = (x_2432 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2434 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2433.x, x_2433.y, x_2434.z, x_2434.w);
        let x_2436 : vec4<f32> = u_xlat11;
        let x_2438 : vec2<f32> = (vec2<f32>(x_2436.x, x_2436.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2439 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2438.x, x_2438.y, x_2439.z, x_2439.w);
        let x_2441 : vec2<f32> = u_xlat52;
        let x_2442 : vec2<f32> = (x_2441 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2443 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2442.x, x_2442.y, x_2443.z, x_2443.w);
        let x_2445 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2445.y, x_2445.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2449 : f32 = u_xlat11.x;
        u_xlat12.z = x_2449;
        let x_2452 : f32 = u_xlat52.x;
        u_xlat12.w = x_2452;
        let x_2455 : f32 = u_xlat13.x;
        u_xlat10.z = x_2455;
        let x_2458 : f32 = u_xlat9.x;
        u_xlat10.w = x_2458;
        let x_2460 : vec4<f32> = u_xlat10;
        let x_2462 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2460.z, x_2460.w, x_2460.x, x_2460.z) + vec4<f32>(x_2462.z, x_2462.w, x_2462.x, x_2462.z));
        let x_2466 : f32 = u_xlat12.y;
        u_xlat11.z = x_2466;
        let x_2469 : f32 = u_xlat52.y;
        u_xlat11.w = x_2469;
        let x_2472 : f32 = u_xlat10.y;
        u_xlat13.z = x_2472;
        let x_2475 : f32 = u_xlat9.z;
        u_xlat13.w = x_2475;
        let x_2477 : vec4<f32> = u_xlat11;
        let x_2479 : vec4<f32> = u_xlat13;
        let x_2481 : vec3<f32> = (vec3<f32>(x_2477.z, x_2477.y, x_2477.w) + vec3<f32>(x_2479.z, x_2479.y, x_2479.w));
        let x_2482 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2481.x, x_2481.y, x_2481.z, x_2482.w);
        let x_2484 : vec4<f32> = u_xlat10;
        let x_2486 : vec4<f32> = u_xlat14;
        let x_2488 : vec3<f32> = (vec3<f32>(x_2484.x, x_2484.z, x_2484.w) / vec3<f32>(x_2486.z, x_2486.w, x_2486.y));
        let x_2489 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2488.x, x_2488.y, x_2488.z, x_2489.w);
        let x_2491 : vec4<f32> = u_xlat10;
        let x_2493 : vec3<f32> = (vec3<f32>(x_2491.x, x_2491.y, x_2491.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2494 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2493.x, x_2493.y, x_2493.z, x_2494.w);
        let x_2496 : vec4<f32> = u_xlat13;
        let x_2498 : vec4<f32> = u_xlat9;
        let x_2500 : vec3<f32> = (vec3<f32>(x_2496.z, x_2496.y, x_2496.w) / vec3<f32>(x_2498.x, x_2498.y, x_2498.z));
        let x_2501 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2500.x, x_2500.y, x_2500.z, x_2501.w);
        let x_2503 : vec4<f32> = u_xlat11;
        let x_2505 : vec3<f32> = (vec3<f32>(x_2503.x, x_2503.y, x_2503.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2506 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2505.x, x_2505.y, x_2505.z, x_2506.w);
        let x_2508 : vec4<f32> = u_xlat10;
        let x_2511 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2513 : vec3<f32> = (vec3<f32>(x_2508.y, x_2508.x, x_2508.z) * vec3<f32>(x_2511.x, x_2511.x, x_2511.x));
        let x_2514 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2513.x, x_2513.y, x_2513.z, x_2514.w);
        let x_2516 : vec4<f32> = u_xlat11;
        let x_2519 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2521 : vec3<f32> = (vec3<f32>(x_2516.x, x_2516.y, x_2516.z) * vec3<f32>(x_2519.y, x_2519.y, x_2519.y));
        let x_2522 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2521.x, x_2521.y, x_2521.z, x_2522.w);
        let x_2525 : f32 = u_xlat11.x;
        u_xlat10.w = x_2525;
        let x_2527 : vec4<f32> = u_xlat8;
        let x_2530 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2533 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2527.x, x_2527.y, x_2527.x, x_2527.y) * vec4<f32>(x_2530.x, x_2530.y, x_2530.x, x_2530.y)) + vec4<f32>(x_2533.y, x_2533.w, x_2533.x, x_2533.w));
        let x_2536 : vec4<f32> = u_xlat8;
        let x_2539 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2542 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2536.x, x_2536.y) * vec2<f32>(x_2539.x, x_2539.y)) + vec2<f32>(x_2542.z, x_2542.w));
        let x_2546 : f32 = u_xlat10.y;
        u_xlat11.w = x_2546;
        let x_2548 : vec4<f32> = u_xlat11;
        let x_2549 : vec2<f32> = vec2<f32>(x_2548.y, x_2548.z);
        let x_2550 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2550.x, x_2549.x, x_2550.z, x_2549.y);
        let x_2552 : vec4<f32> = u_xlat8;
        let x_2555 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2558 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2552.x, x_2552.y, x_2552.x, x_2552.y) * vec4<f32>(x_2555.x, x_2555.y, x_2555.x, x_2555.y)) + vec4<f32>(x_2558.x, x_2558.y, x_2558.z, x_2558.y));
        let x_2561 : vec4<f32> = u_xlat8;
        let x_2564 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2567 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2561.x, x_2561.y, x_2561.x, x_2561.y) * vec4<f32>(x_2564.x, x_2564.y, x_2564.x, x_2564.y)) + vec4<f32>(x_2567.w, x_2567.y, x_2567.w, x_2567.z));
        let x_2570 : vec4<f32> = u_xlat8;
        let x_2573 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2576 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2570.x, x_2570.y, x_2570.x, x_2570.y) * vec4<f32>(x_2573.x, x_2573.y, x_2573.x, x_2573.y)) + vec4<f32>(x_2576.x, x_2576.w, x_2576.z, x_2576.w));
        let x_2579 : vec4<f32> = u_xlat9;
        let x_2581 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2579.x, x_2579.x, x_2579.x, x_2579.y) * vec4<f32>(x_2581.z, x_2581.w, x_2581.y, x_2581.z));
        let x_2584 : vec4<f32> = u_xlat9;
        let x_2586 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2584.y, x_2584.y, x_2584.z, x_2584.z) * x_2586);
        let x_2590 : f32 = u_xlat9.z;
        let x_2592 : f32 = u_xlat14.y;
        u_xlat73 = (x_2590 * x_2592);
        let x_2595 : vec4<f32> = u_xlat12;
        let x_2596 : vec2<f32> = vec2<f32>(x_2595.x, x_2595.y);
        let x_2598 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2596.x, x_2596.y, x_2598);
        let x_2605 : vec3<f32> = txVec34;
        let x_2607 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2605.xy, x_2605.z);
        u_xlat8.x = x_2607;
        let x_2610 : vec4<f32> = u_xlat12;
        let x_2611 : vec2<f32> = vec2<f32>(x_2610.z, x_2610.w);
        let x_2613 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2611.x, x_2611.y, x_2613);
        let x_2620 : vec3<f32> = txVec35;
        let x_2622 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2620.xy, x_2620.z);
        u_xlat30.x = x_2622;
        let x_2625 : f32 = u_xlat30.x;
        let x_2627 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2625 * x_2627);
        let x_2631 : f32 = u_xlat15.x;
        let x_2633 : f32 = u_xlat8.x;
        let x_2636 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2631 * x_2633) + x_2636);
        let x_2640 : vec2<f32> = u_xlat52;
        let x_2642 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2640.x, x_2640.y, x_2642);
        let x_2649 : vec3<f32> = txVec36;
        let x_2651 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2649.xy, x_2649.z);
        u_xlat30.x = x_2651;
        let x_2654 : f32 = u_xlat15.z;
        let x_2656 : f32 = u_xlat30.x;
        let x_2659 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2654 * x_2656) + x_2659);
        let x_2663 : vec4<f32> = u_xlat11;
        let x_2664 : vec2<f32> = vec2<f32>(x_2663.x, x_2663.y);
        let x_2666 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2664.x, x_2664.y, x_2666);
        let x_2673 : vec3<f32> = txVec37;
        let x_2675 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2673.xy, x_2673.z);
        u_xlat30.x = x_2675;
        let x_2678 : f32 = u_xlat15.w;
        let x_2680 : f32 = u_xlat30.x;
        let x_2683 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2678 * x_2680) + x_2683);
        let x_2687 : vec4<f32> = u_xlat13;
        let x_2688 : vec2<f32> = vec2<f32>(x_2687.x, x_2687.y);
        let x_2690 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2688.x, x_2688.y, x_2690);
        let x_2697 : vec3<f32> = txVec38;
        let x_2699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2697.xy, x_2697.z);
        u_xlat30.x = x_2699;
        let x_2702 : f32 = u_xlat16.x;
        let x_2704 : f32 = u_xlat30.x;
        let x_2707 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2702 * x_2704) + x_2707);
        let x_2711 : vec4<f32> = u_xlat13;
        let x_2712 : vec2<f32> = vec2<f32>(x_2711.z, x_2711.w);
        let x_2714 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2712.x, x_2712.y, x_2714);
        let x_2721 : vec3<f32> = txVec39;
        let x_2723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2721.xy, x_2721.z);
        u_xlat30.x = x_2723;
        let x_2726 : f32 = u_xlat16.y;
        let x_2728 : f32 = u_xlat30.x;
        let x_2731 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2726 * x_2728) + x_2731);
        let x_2735 : vec4<f32> = u_xlat11;
        let x_2736 : vec2<f32> = vec2<f32>(x_2735.z, x_2735.w);
        let x_2738 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2736.x, x_2736.y, x_2738);
        let x_2745 : vec3<f32> = txVec40;
        let x_2747 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2745.xy, x_2745.z);
        u_xlat30.x = x_2747;
        let x_2750 : f32 = u_xlat16.z;
        let x_2752 : f32 = u_xlat30.x;
        let x_2755 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2750 * x_2752) + x_2755);
        let x_2759 : vec4<f32> = u_xlat10;
        let x_2760 : vec2<f32> = vec2<f32>(x_2759.x, x_2759.y);
        let x_2762 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2760.x, x_2760.y, x_2762);
        let x_2769 : vec3<f32> = txVec41;
        let x_2771 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2769.xy, x_2769.z);
        u_xlat30.x = x_2771;
        let x_2774 : f32 = u_xlat16.w;
        let x_2776 : f32 = u_xlat30.x;
        let x_2779 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2774 * x_2776) + x_2779);
        let x_2783 : vec4<f32> = u_xlat10;
        let x_2784 : vec2<f32> = vec2<f32>(x_2783.z, x_2783.w);
        let x_2786 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2784.x, x_2784.y, x_2786);
        let x_2793 : vec3<f32> = txVec42;
        let x_2795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2793.xy, x_2793.z);
        u_xlat30.x = x_2795;
        let x_2797 : f32 = u_xlat73;
        let x_2799 : f32 = u_xlat30.x;
        let x_2802 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2797 * x_2799) + x_2802);
      } else {
        let x_2805 : vec4<f32> = u_xlat6;
        let x_2808 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2811 : vec2<f32> = ((vec2<f32>(x_2805.x, x_2805.y) * vec2<f32>(x_2808.z, x_2808.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2812 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2811.x, x_2811.y, x_2812.z, x_2812.w);
        let x_2814 : vec4<f32> = u_xlat8;
        let x_2816 : vec2<f32> = floor(vec2<f32>(x_2814.x, x_2814.y));
        let x_2817 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2816.x, x_2816.y, x_2817.z, x_2817.w);
        let x_2819 : vec4<f32> = u_xlat6;
        let x_2822 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2825 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2819.x, x_2819.y) * vec2<f32>(x_2822.z, x_2822.w)) + -(vec2<f32>(x_2825.x, x_2825.y)));
        let x_2829 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2829.x, x_2829.x, x_2829.y, x_2829.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2832 : vec4<f32> = u_xlat9;
        let x_2834 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2832.x, x_2832.x, x_2832.z, x_2832.z) * vec4<f32>(x_2834.x, x_2834.x, x_2834.z, x_2834.z));
        let x_2837 : vec4<f32> = u_xlat10;
        let x_2839 : vec2<f32> = (vec2<f32>(x_2837.y, x_2837.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2840 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2840.x, x_2839.x, x_2840.z, x_2839.y);
        let x_2842 : vec4<f32> = u_xlat10;
        let x_2845 : vec2<f32> = u_xlat52;
        let x_2847 : vec2<f32> = ((vec2<f32>(x_2842.x, x_2842.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2845));
        let x_2848 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2847.x, x_2848.y, x_2847.y, x_2848.w);
        let x_2850 : vec2<f32> = u_xlat52;
        let x_2852 : vec2<f32> = (-(x_2850) + vec2<f32>(1.0f, 1.0f));
        let x_2853 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2852.x, x_2852.y, x_2853.z, x_2853.w);
        let x_2855 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2855, vec2<f32>(0.0f, 0.0f));
        let x_2857 : vec2<f32> = u_xlat54;
        let x_2859 : vec2<f32> = u_xlat54;
        let x_2861 : vec4<f32> = u_xlat10;
        let x_2863 : vec2<f32> = ((-(x_2857) * x_2859) + vec2<f32>(x_2861.x, x_2861.y));
        let x_2864 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2863.x, x_2863.y, x_2864.z, x_2864.w);
        let x_2866 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2866, vec2<f32>(0.0f, 0.0f));
        let x_2868 : vec2<f32> = u_xlat54;
        let x_2870 : vec2<f32> = u_xlat54;
        let x_2872 : vec4<f32> = u_xlat9;
        let x_2874 : vec2<f32> = ((-(x_2868) * x_2870) + vec2<f32>(x_2872.y, x_2872.w));
        let x_2875 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2874.x, x_2875.y, x_2874.y);
        let x_2877 : vec4<f32> = u_xlat10;
        let x_2879 : vec2<f32> = (vec2<f32>(x_2877.x, x_2877.y) + vec2<f32>(2.0f, 2.0f));
        let x_2880 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2879.x, x_2879.y, x_2880.z, x_2880.w);
        let x_2882 : vec3<f32> = u_xlat31;
        let x_2884 : vec2<f32> = (vec2<f32>(x_2882.x, x_2882.z) + vec2<f32>(2.0f, 2.0f));
        let x_2885 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2885.x, x_2884.x, x_2885.z, x_2884.y);
        let x_2888 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2888 * 0.081632003f);
        let x_2891 : vec4<f32> = u_xlat9;
        let x_2893 : vec3<f32> = (vec3<f32>(x_2891.z, x_2891.x, x_2891.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2894 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2893.x, x_2893.y, x_2893.z, x_2894.w);
        let x_2896 : vec4<f32> = u_xlat10;
        let x_2898 : vec2<f32> = (vec2<f32>(x_2896.x, x_2896.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2899 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2898.x, x_2898.y, x_2899.z, x_2899.w);
        let x_2902 : f32 = u_xlat13.y;
        u_xlat12.x = x_2902;
        let x_2904 : vec2<f32> = u_xlat52;
        let x_2907 : vec2<f32> = ((vec2<f32>(x_2904.x, x_2904.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2908 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2908.x, x_2907.x, x_2908.z, x_2907.y);
        let x_2910 : vec2<f32> = u_xlat52;
        let x_2913 : vec2<f32> = ((vec2<f32>(x_2910.x, x_2910.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2914 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2913.x, x_2914.y, x_2913.y, x_2914.w);
        let x_2917 : f32 = u_xlat9.x;
        u_xlat10.y = x_2917;
        let x_2920 : f32 = u_xlat11.y;
        u_xlat10.w = x_2920;
        let x_2922 : vec4<f32> = u_xlat10;
        let x_2923 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2922 + x_2923);
        let x_2925 : vec2<f32> = u_xlat52;
        let x_2928 : vec2<f32> = ((vec2<f32>(x_2925.y, x_2925.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2929 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2929.x, x_2928.x, x_2929.z, x_2928.y);
        let x_2931 : vec2<f32> = u_xlat52;
        let x_2934 : vec2<f32> = ((vec2<f32>(x_2931.y, x_2931.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2935 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2934.x, x_2935.y, x_2934.y, x_2935.w);
        let x_2938 : f32 = u_xlat9.y;
        u_xlat11.y = x_2938;
        let x_2940 : vec4<f32> = u_xlat11;
        let x_2941 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2940 + x_2941);
        let x_2943 : vec4<f32> = u_xlat10;
        let x_2944 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2943 / x_2944);
        let x_2946 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2946 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2948 : vec4<f32> = u_xlat11;
        let x_2949 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2948 / x_2949);
        let x_2951 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2951 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2953 : vec4<f32> = u_xlat10;
        let x_2956 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2953.w, x_2953.x, x_2953.y, x_2953.z) * vec4<f32>(x_2956.x, x_2956.x, x_2956.x, x_2956.x));
        let x_2959 : vec4<f32> = u_xlat11;
        let x_2962 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2959.x, x_2959.w, x_2959.y, x_2959.z) * vec4<f32>(x_2962.y, x_2962.y, x_2962.y, x_2962.y));
        let x_2965 : vec4<f32> = u_xlat10;
        let x_2966 : vec3<f32> = vec3<f32>(x_2965.y, x_2965.z, x_2965.w);
        let x_2967 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2966.x, x_2967.y, x_2966.y, x_2966.z);
        let x_2970 : f32 = u_xlat11.x;
        u_xlat13.y = x_2970;
        let x_2972 : vec4<f32> = u_xlat8;
        let x_2975 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2978 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2972.x, x_2972.y, x_2972.x, x_2972.y) * vec4<f32>(x_2975.x, x_2975.y, x_2975.x, x_2975.y)) + vec4<f32>(x_2978.x, x_2978.y, x_2978.z, x_2978.y));
        let x_2981 : vec4<f32> = u_xlat8;
        let x_2984 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2987 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2981.x, x_2981.y) * vec2<f32>(x_2984.x, x_2984.y)) + vec2<f32>(x_2987.w, x_2987.y));
        let x_2991 : f32 = u_xlat13.y;
        u_xlat10.y = x_2991;
        let x_2994 : f32 = u_xlat11.z;
        u_xlat13.y = x_2994;
        let x_2996 : vec4<f32> = u_xlat8;
        let x_2999 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3002 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2996.x, x_2996.y, x_2996.x, x_2996.y) * vec4<f32>(x_2999.x, x_2999.y, x_2999.x, x_2999.y)) + vec4<f32>(x_3002.x, x_3002.y, x_3002.z, x_3002.y));
        let x_3005 : vec4<f32> = u_xlat8;
        let x_3008 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3011 : vec4<f32> = u_xlat13;
        let x_3013 : vec2<f32> = ((vec2<f32>(x_3005.x, x_3005.y) * vec2<f32>(x_3008.x, x_3008.y)) + vec2<f32>(x_3011.w, x_3011.y));
        let x_3014 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3013.x, x_3013.y, x_3014.z, x_3014.w);
        let x_3017 : f32 = u_xlat13.y;
        u_xlat10.z = x_3017;
        let x_3019 : vec4<f32> = u_xlat8;
        let x_3022 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3025 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3019.x, x_3019.y, x_3019.x, x_3019.y) * vec4<f32>(x_3022.x, x_3022.y, x_3022.x, x_3022.y)) + vec4<f32>(x_3025.x, x_3025.y, x_3025.x, x_3025.z));
        let x_3029 : f32 = u_xlat11.w;
        u_xlat13.y = x_3029;
        let x_3031 : vec4<f32> = u_xlat8;
        let x_3034 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3037 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3031.x, x_3031.y, x_3031.x, x_3031.y) * vec4<f32>(x_3034.x, x_3034.y, x_3034.x, x_3034.y)) + vec4<f32>(x_3037.x, x_3037.y, x_3037.z, x_3037.y));
        let x_3041 : vec4<f32> = u_xlat8;
        let x_3044 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3047 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3041.x, x_3041.y) * vec2<f32>(x_3044.x, x_3044.y)) + vec2<f32>(x_3047.w, x_3047.y));
        let x_3051 : f32 = u_xlat13.y;
        u_xlat10.w = x_3051;
        let x_3054 : vec4<f32> = u_xlat8;
        let x_3057 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3060 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3054.x, x_3054.y) * vec2<f32>(x_3057.x, x_3057.y)) + vec2<f32>(x_3060.x, x_3060.w));
        let x_3063 : vec4<f32> = u_xlat13;
        let x_3064 : vec3<f32> = vec3<f32>(x_3063.x, x_3063.z, x_3063.w);
        let x_3065 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3064.x, x_3065.y, x_3064.y, x_3064.z);
        let x_3067 : vec4<f32> = u_xlat8;
        let x_3070 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3073 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3067.x, x_3067.y, x_3067.x, x_3067.y) * vec4<f32>(x_3070.x, x_3070.y, x_3070.x, x_3070.y)) + vec4<f32>(x_3073.x, x_3073.y, x_3073.z, x_3073.y));
        let x_3077 : vec4<f32> = u_xlat8;
        let x_3080 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3083 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3077.x, x_3077.y) * vec2<f32>(x_3080.x, x_3080.y)) + vec2<f32>(x_3083.w, x_3083.y));
        let x_3087 : f32 = u_xlat10.x;
        u_xlat11.x = x_3087;
        let x_3089 : vec4<f32> = u_xlat8;
        let x_3092 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3095 : vec4<f32> = u_xlat11;
        let x_3097 : vec2<f32> = ((vec2<f32>(x_3089.x, x_3089.y) * vec2<f32>(x_3092.x, x_3092.y)) + vec2<f32>(x_3095.x, x_3095.y));
        let x_3098 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3097.x, x_3097.y, x_3098.z, x_3098.w);
        let x_3100 : vec4<f32> = u_xlat9;
        let x_3102 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3100.x, x_3100.x, x_3100.x, x_3100.x) * x_3102);
        let x_3104 : vec4<f32> = u_xlat9;
        let x_3106 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3104.y, x_3104.y, x_3104.y, x_3104.y) * x_3106);
        let x_3109 : vec4<f32> = u_xlat9;
        let x_3111 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3109.z, x_3109.z, x_3109.z, x_3109.z) * x_3111);
        let x_3113 : vec4<f32> = u_xlat9;
        let x_3115 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3113.w, x_3113.w, x_3113.w, x_3113.w) * x_3115);
        let x_3118 : vec4<f32> = u_xlat14;
        let x_3119 : vec2<f32> = vec2<f32>(x_3118.x, x_3118.y);
        let x_3121 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3119.x, x_3119.y, x_3121);
        let x_3128 : vec3<f32> = txVec43;
        let x_3130 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3128.xy, x_3128.z);
        u_xlat73 = x_3130;
        let x_3132 : vec4<f32> = u_xlat14;
        let x_3133 : vec2<f32> = vec2<f32>(x_3132.z, x_3132.w);
        let x_3135 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3133.x, x_3133.y, x_3135);
        let x_3142 : vec3<f32> = txVec44;
        let x_3144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3142.xy, x_3142.z);
        u_xlat10.x = x_3144;
        let x_3147 : f32 = u_xlat10.x;
        let x_3149 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3147 * x_3149);
        let x_3153 : f32 = u_xlat19.x;
        let x_3154 : f32 = u_xlat73;
        let x_3157 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3153 * x_3154) + x_3157);
        let x_3160 : vec2<f32> = u_xlat52;
        let x_3162 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3160.x, x_3160.y, x_3162);
        let x_3169 : vec3<f32> = txVec45;
        let x_3171 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3169.xy, x_3169.z);
        u_xlat52.x = x_3171;
        let x_3174 : f32 = u_xlat19.z;
        let x_3176 : f32 = u_xlat52.x;
        let x_3178 : f32 = u_xlat73;
        u_xlat73 = ((x_3174 * x_3176) + x_3178);
        let x_3181 : vec4<f32> = u_xlat17;
        let x_3182 : vec2<f32> = vec2<f32>(x_3181.x, x_3181.y);
        let x_3184 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3182.x, x_3182.y, x_3184);
        let x_3191 : vec3<f32> = txVec46;
        let x_3193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3191.xy, x_3191.z);
        u_xlat52.x = x_3193;
        let x_3196 : f32 = u_xlat19.w;
        let x_3198 : f32 = u_xlat52.x;
        let x_3200 : f32 = u_xlat73;
        u_xlat73 = ((x_3196 * x_3198) + x_3200);
        let x_3203 : vec4<f32> = u_xlat15;
        let x_3204 : vec2<f32> = vec2<f32>(x_3203.x, x_3203.y);
        let x_3206 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3204.x, x_3204.y, x_3206);
        let x_3213 : vec3<f32> = txVec47;
        let x_3215 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3213.xy, x_3213.z);
        u_xlat52.x = x_3215;
        let x_3218 : f32 = u_xlat20.x;
        let x_3220 : f32 = u_xlat52.x;
        let x_3222 : f32 = u_xlat73;
        u_xlat73 = ((x_3218 * x_3220) + x_3222);
        let x_3225 : vec4<f32> = u_xlat15;
        let x_3226 : vec2<f32> = vec2<f32>(x_3225.z, x_3225.w);
        let x_3228 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3226.x, x_3226.y, x_3228);
        let x_3235 : vec3<f32> = txVec48;
        let x_3237 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3235.xy, x_3235.z);
        u_xlat52.x = x_3237;
        let x_3240 : f32 = u_xlat20.y;
        let x_3242 : f32 = u_xlat52.x;
        let x_3244 : f32 = u_xlat73;
        u_xlat73 = ((x_3240 * x_3242) + x_3244);
        let x_3247 : vec4<f32> = u_xlat16;
        let x_3248 : vec2<f32> = vec2<f32>(x_3247.x, x_3247.y);
        let x_3250 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3248.x, x_3248.y, x_3250);
        let x_3257 : vec3<f32> = txVec49;
        let x_3259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3257.xy, x_3257.z);
        u_xlat52.x = x_3259;
        let x_3262 : f32 = u_xlat20.z;
        let x_3264 : f32 = u_xlat52.x;
        let x_3266 : f32 = u_xlat73;
        u_xlat73 = ((x_3262 * x_3264) + x_3266);
        let x_3269 : vec4<f32> = u_xlat17;
        let x_3270 : vec2<f32> = vec2<f32>(x_3269.z, x_3269.w);
        let x_3272 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3270.x, x_3270.y, x_3272);
        let x_3279 : vec3<f32> = txVec50;
        let x_3281 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3279.xy, x_3279.z);
        u_xlat52.x = x_3281;
        let x_3284 : f32 = u_xlat20.w;
        let x_3286 : f32 = u_xlat52.x;
        let x_3288 : f32 = u_xlat73;
        u_xlat73 = ((x_3284 * x_3286) + x_3288);
        let x_3291 : vec4<f32> = u_xlat18;
        let x_3292 : vec2<f32> = vec2<f32>(x_3291.x, x_3291.y);
        let x_3294 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3292.x, x_3292.y, x_3294);
        let x_3301 : vec3<f32> = txVec51;
        let x_3303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3301.xy, x_3301.z);
        u_xlat52.x = x_3303;
        let x_3306 : f32 = u_xlat21.x;
        let x_3308 : f32 = u_xlat52.x;
        let x_3310 : f32 = u_xlat73;
        u_xlat73 = ((x_3306 * x_3308) + x_3310);
        let x_3313 : vec4<f32> = u_xlat18;
        let x_3314 : vec2<f32> = vec2<f32>(x_3313.z, x_3313.w);
        let x_3316 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3314.x, x_3314.y, x_3316);
        let x_3323 : vec3<f32> = txVec52;
        let x_3325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3323.xy, x_3323.z);
        u_xlat52.x = x_3325;
        let x_3328 : f32 = u_xlat21.y;
        let x_3330 : f32 = u_xlat52.x;
        let x_3332 : f32 = u_xlat73;
        u_xlat73 = ((x_3328 * x_3330) + x_3332);
        let x_3335 : vec2<f32> = u_xlat32;
        let x_3337 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3335.x, x_3335.y, x_3337);
        let x_3344 : vec3<f32> = txVec53;
        let x_3346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3344.xy, x_3344.z);
        u_xlat52.x = x_3346;
        let x_3349 : f32 = u_xlat21.z;
        let x_3351 : f32 = u_xlat52.x;
        let x_3353 : f32 = u_xlat73;
        u_xlat73 = ((x_3349 * x_3351) + x_3353);
        let x_3356 : vec2<f32> = u_xlat60;
        let x_3358 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3356.x, x_3356.y, x_3358);
        let x_3365 : vec3<f32> = txVec54;
        let x_3367 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3365.xy, x_3365.z);
        u_xlat52.x = x_3367;
        let x_3370 : f32 = u_xlat21.w;
        let x_3372 : f32 = u_xlat52.x;
        let x_3374 : f32 = u_xlat73;
        u_xlat73 = ((x_3370 * x_3372) + x_3374);
        let x_3377 : vec4<f32> = u_xlat13;
        let x_3378 : vec2<f32> = vec2<f32>(x_3377.x, x_3377.y);
        let x_3380 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3378.x, x_3378.y, x_3380);
        let x_3387 : vec3<f32> = txVec55;
        let x_3389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3387.xy, x_3387.z);
        u_xlat52.x = x_3389;
        let x_3392 : f32 = u_xlat9.x;
        let x_3394 : f32 = u_xlat52.x;
        let x_3396 : f32 = u_xlat73;
        u_xlat73 = ((x_3392 * x_3394) + x_3396);
        let x_3399 : vec4<f32> = u_xlat13;
        let x_3400 : vec2<f32> = vec2<f32>(x_3399.z, x_3399.w);
        let x_3402 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3400.x, x_3400.y, x_3402);
        let x_3409 : vec3<f32> = txVec56;
        let x_3411 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3409.xy, x_3409.z);
        u_xlat52.x = x_3411;
        let x_3414 : f32 = u_xlat9.y;
        let x_3416 : f32 = u_xlat52.x;
        let x_3418 : f32 = u_xlat73;
        u_xlat73 = ((x_3414 * x_3416) + x_3418);
        let x_3421 : vec2<f32> = u_xlat55;
        let x_3423 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3421.x, x_3421.y, x_3423);
        let x_3430 : vec3<f32> = txVec57;
        let x_3432 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3430.xy, x_3430.z);
        u_xlat52.x = x_3432;
        let x_3435 : f32 = u_xlat9.z;
        let x_3437 : f32 = u_xlat52.x;
        let x_3439 : f32 = u_xlat73;
        u_xlat73 = ((x_3435 * x_3437) + x_3439);
        let x_3442 : vec4<f32> = u_xlat8;
        let x_3443 : vec2<f32> = vec2<f32>(x_3442.x, x_3442.y);
        let x_3445 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3443.x, x_3443.y, x_3445);
        let x_3452 : vec3<f32> = txVec58;
        let x_3454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3452.xy, x_3452.z);
        u_xlat8.x = x_3454;
        let x_3457 : f32 = u_xlat9.w;
        let x_3459 : f32 = u_xlat8.x;
        let x_3461 : f32 = u_xlat73;
        u_xlat66 = ((x_3457 * x_3459) + x_3461);
      }
    }
  } else {
    let x_3465 : vec4<f32> = u_xlat6;
    let x_3466 : vec2<f32> = vec2<f32>(x_3465.x, x_3465.y);
    let x_3468 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3466.x, x_3466.y, x_3468);
    let x_3475 : vec3<f32> = txVec59;
    let x_3477 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3475.xy, x_3475.z);
    u_xlat66 = x_3477;
  }
  let x_3478 : f32 = u_xlat66;
  let x_3480 : f32 = x_255.x_MainLightShadowParams.x;
  let x_3482 : f32 = u_xlat68;
  u_xlat66 = ((x_3478 * x_3480) + x_3482);
  let x_3484 : bool = u_xlatb70;
  let x_3485 : f32 = u_xlat66;
  u_xlat66 = select(x_3485, 1.0f, x_3484);
  let x_3487 : vec3<f32> = vs_INTERP0;
  let x_3489 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3491 : vec3<f32> = (x_3487 + -(x_3489));
  let x_3492 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3491.x, x_3491.y, x_3491.z, x_3492.w);
  let x_3494 : vec4<f32> = u_xlat6;
  let x_3496 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3494.x, x_3494.y, x_3494.z), vec3<f32>(x_3496.x, x_3496.y, x_3496.z));
  let x_3499 : f32 = u_xlat68;
  let x_3501 : f32 = x_255.x_MainLightShadowParams.z;
  let x_3504 : f32 = x_255.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3499 * x_3501) + x_3504);
  let x_3506 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3506, 0.0f, 1.0f);
  let x_3508 : f32 = u_xlat66;
  u_xlat70 = (-(x_3508) + 1.0f);
  let x_3511 : f32 = u_xlat68;
  let x_3512 : f32 = u_xlat70;
  let x_3514 : f32 = u_xlat66;
  u_xlat66 = ((x_3511 * x_3512) + x_3514);
  let x_3516 : vec2<f32> = u_xlat51;
  let x_3519 : vec4<f32> = x_90.x_MainLightColor;
  let x_3521 : vec3<f32> = (vec3<f32>(x_3516.x, x_3516.x, x_3516.x) * vec3<f32>(x_3519.x, x_3519.y, x_3519.z));
  let x_3522 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3521.x, x_3521.y, x_3521.z, x_3522.w);
  let x_3524 : vec3<f32> = u_xlat1;
  let x_3526 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3524), vec3<f32>(x_3526.x, x_3526.y, x_3526.z));
  let x_3529 : f32 = u_xlat68;
  let x_3530 : f32 = u_xlat68;
  u_xlat68 = (x_3529 + x_3530);
  let x_3532 : vec4<f32> = u_xlat3;
  let x_3534 : f32 = u_xlat68;
  let x_3538 : vec3<f32> = u_xlat1;
  let x_3540 : vec3<f32> = ((vec3<f32>(x_3532.x, x_3532.y, x_3532.z) * -(vec3<f32>(x_3534, x_3534, x_3534))) + -(x_3538));
  let x_3541 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3540.x, x_3540.y, x_3540.z, x_3541.w);
  let x_3543 : vec4<f32> = u_xlat3;
  let x_3545 : vec3<f32> = u_xlat1;
  u_xlat68 = dot(vec3<f32>(x_3543.x, x_3543.y, x_3543.z), x_3545);
  let x_3547 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3547, 0.0f, 1.0f);
  let x_3549 : f32 = u_xlat68;
  u_xlat68 = (-(x_3549) + 1.0f);
  let x_3552 : f32 = u_xlat68;
  let x_3553 : f32 = u_xlat68;
  u_xlat68 = (x_3552 * x_3553);
  let x_3555 : f32 = u_xlat68;
  let x_3556 : f32 = u_xlat68;
  u_xlat68 = (x_3555 * x_3556);
  let x_3558 : f32 = u_xlat46;
  u_xlat70 = ((-(x_3558) * 0.699999988f) + 1.700000048f);
  let x_3564 : f32 = u_xlat46;
  let x_3565 : f32 = u_xlat70;
  u_xlat46 = (x_3564 * x_3565);
  let x_3567 : f32 = u_xlat46;
  u_xlat46 = (x_3567 * 6.0f);
  let x_3578 : vec4<f32> = u_xlat8;
  let x_3580 : f32 = u_xlat46;
  let x_3581 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3578.x, x_3578.y, x_3578.z), x_3580);
  u_xlat8 = x_3581;
  let x_3583 : f32 = u_xlat8.w;
  u_xlat46 = (x_3583 + -1.0f);
  let x_3586 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3587 : f32 = u_xlat46;
  u_xlat46 = ((x_3586 * x_3587) + 1.0f);
  let x_3590 : f32 = u_xlat46;
  u_xlat46 = max(x_3590, 0.0f);
  let x_3592 : f32 = u_xlat46;
  u_xlat46 = log2(x_3592);
  let x_3594 : f32 = u_xlat46;
  let x_3596 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat46 = (x_3594 * x_3596);
  let x_3598 : f32 = u_xlat46;
  u_xlat46 = exp2(x_3598);
  let x_3600 : f32 = u_xlat46;
  let x_3602 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat46 = (x_3600 * x_3602);
  let x_3604 : vec4<f32> = u_xlat8;
  let x_3606 : f32 = u_xlat46;
  let x_3608 : vec3<f32> = (vec3<f32>(x_3604.x, x_3604.y, x_3604.z) * vec3<f32>(x_3606, x_3606, x_3606));
  let x_3609 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3608.x, x_3608.y, x_3608.z, x_3609.w);
  let x_3611 : f32 = u_xlat69;
  let x_3613 : f32 = u_xlat69;
  let x_3617 : vec2<f32> = ((vec2<f32>(x_3611, x_3611) * vec2<f32>(x_3613, x_3613)) + vec2<f32>(-1.0f, 1.0f));
  let x_3618 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3617.x, x_3617.y, x_3618.z, x_3618.w);
  let x_3621 : f32 = u_xlat9.y;
  u_xlat46 = (1.0f / x_3621);
  let x_3624 : f32 = u_xlat5.x;
  u_xlat69 = (x_3624 + -0.039999999f);
  let x_3627 : f32 = u_xlat68;
  let x_3628 : f32 = u_xlat69;
  u_xlat68 = ((x_3627 * x_3628) + 0.039999999f);
  let x_3632 : f32 = u_xlat68;
  let x_3633 : f32 = u_xlat46;
  u_xlat46 = (x_3632 * x_3633);
  let x_3635 : f32 = u_xlat46;
  let x_3637 : vec4<f32> = u_xlat8;
  let x_3639 : vec3<f32> = (vec3<f32>(x_3635, x_3635, x_3635) * vec3<f32>(x_3637.x, x_3637.y, x_3637.z));
  let x_3640 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3639.x, x_3639.y, x_3639.z, x_3640.w);
  let x_3642 : vec3<f32> = u_xlat27;
  let x_3643 : vec3<f32> = u_xlat4;
  let x_3645 : vec4<f32> = u_xlat8;
  let x_3647 : vec3<f32> = ((x_3642 * x_3643) + vec3<f32>(x_3645.x, x_3645.y, x_3645.z));
  let x_3648 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3647.x, x_3647.y, x_3647.z, x_3648.w);
  let x_3650 : f32 = u_xlat66;
  let x_3652 : f32 = x_145.unity_LightData.z;
  u_xlat66 = (x_3650 * x_3652);
  let x_3654 : vec4<f32> = u_xlat3;
  let x_3657 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat46 = dot(vec3<f32>(x_3654.x, x_3654.y, x_3654.z), vec3<f32>(x_3657.x, x_3657.y, x_3657.z));
  let x_3660 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3660, 0.0f, 1.0f);
  let x_3662 : f32 = u_xlat66;
  let x_3663 : f32 = u_xlat46;
  u_xlat66 = (x_3662 * x_3663);
  let x_3665 : f32 = u_xlat66;
  let x_3667 : vec4<f32> = u_xlat6;
  let x_3669 : vec3<f32> = (vec3<f32>(x_3665, x_3665, x_3665) * vec3<f32>(x_3667.x, x_3667.y, x_3667.z));
  let x_3670 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3669.x, x_3669.y, x_3669.z, x_3670.w);
  let x_3672 : vec3<f32> = u_xlat1;
  let x_3674 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3676 : vec3<f32> = (x_3672 + vec3<f32>(x_3674.x, x_3674.y, x_3674.z));
  let x_3677 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3676.x, x_3676.y, x_3676.z, x_3677.w);
  let x_3679 : vec4<f32> = u_xlat8;
  let x_3681 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3679.x, x_3679.y, x_3679.z), vec3<f32>(x_3681.x, x_3681.y, x_3681.z));
  let x_3684 : f32 = u_xlat66;
  u_xlat66 = max(x_3684, 1.17549435e-37f);
  let x_3687 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3687);
  let x_3689 : f32 = u_xlat66;
  let x_3691 : vec4<f32> = u_xlat8;
  let x_3693 : vec3<f32> = (vec3<f32>(x_3689, x_3689, x_3689) * vec3<f32>(x_3691.x, x_3691.y, x_3691.z));
  let x_3694 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3693.x, x_3693.y, x_3693.z, x_3694.w);
  let x_3696 : vec4<f32> = u_xlat3;
  let x_3698 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3696.x, x_3696.y, x_3696.z), vec3<f32>(x_3698.x, x_3698.y, x_3698.z));
  let x_3701 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3701, 0.0f, 1.0f);
  let x_3704 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3706 : vec4<f32> = u_xlat8;
  u_xlat46 = dot(vec3<f32>(x_3704.x, x_3704.y, x_3704.z), vec3<f32>(x_3706.x, x_3706.y, x_3706.z));
  let x_3709 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3709, 0.0f, 1.0f);
  let x_3711 : f32 = u_xlat66;
  let x_3712 : f32 = u_xlat66;
  u_xlat66 = (x_3711 * x_3712);
  let x_3714 : f32 = u_xlat66;
  let x_3716 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3714 * x_3716) + 1.000010014f);
  let x_3720 : f32 = u_xlat46;
  let x_3721 : f32 = u_xlat46;
  u_xlat46 = (x_3720 * x_3721);
  let x_3723 : f32 = u_xlat66;
  let x_3724 : f32 = u_xlat66;
  u_xlat66 = (x_3723 * x_3724);
  let x_3726 : f32 = u_xlat46;
  u_xlat46 = max(x_3726, 0.100000001f);
  let x_3729 : f32 = u_xlat66;
  let x_3730 : f32 = u_xlat46;
  u_xlat66 = (x_3729 * x_3730);
  let x_3732 : f32 = u_xlat29;
  let x_3733 : f32 = u_xlat66;
  u_xlat66 = (x_3732 * x_3733);
  let x_3735 : f32 = u_xlat72;
  let x_3736 : f32 = u_xlat66;
  u_xlat66 = (x_3735 / x_3736);
  let x_3738 : f32 = u_xlat66;
  let x_3742 : vec3<f32> = u_xlat4;
  let x_3743 : vec3<f32> = ((vec3<f32>(x_3738, x_3738, x_3738) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3742);
  let x_3744 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3743.x, x_3743.y, x_3743.z, x_3744.w);
  let x_3746 : vec4<f32> = u_xlat6;
  let x_3748 : vec4<f32> = u_xlat8;
  let x_3750 : vec3<f32> = (vec3<f32>(x_3746.x, x_3746.y, x_3746.z) * vec3<f32>(x_3748.x, x_3748.y, x_3748.z));
  let x_3751 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3750.x, x_3750.y, x_3750.z, x_3751.w);
  let x_3754 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3756 : f32 = x_145.unity_LightData.y;
  u_xlat66 = min(x_3754, x_3756);
  let x_3758 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3758));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3770 : u32 = u_xlatu_loop_1;
    let x_3771 : u32 = u_xlatu66;
    if ((x_3770 < x_3771)) {
    } else {
      break;
    }
    let x_3774 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3774 >> 2u);
    let x_3777 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3777 & 3u));
    let x_3780 : u32 = u_xlatu68;
    let x_3783 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3780)];
    let x_3793 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3798 : vec4<u32> = indexable[x_3793];
    u_xlat68 = dot(x_3783, bitcast<vec4<f32>>(x_3798));
    let x_3802 : f32 = u_xlat68;
    u_xlati68 = i32(x_3802);
    let x_3804 : vec3<f32> = vs_INTERP0;
    let x_3816 : i32 = u_xlati68;
    let x_3818 : vec4<f32> = x_3815.x_AdditionalLightsPosition[x_3816];
    let x_3821 : i32 = u_xlati68;
    let x_3823 : vec4<f32> = x_3815.x_AdditionalLightsPosition[x_3821];
    u_xlat31 = ((-(x_3804) * vec3<f32>(x_3818.w, x_3818.w, x_3818.w)) + vec3<f32>(x_3823.x, x_3823.y, x_3823.z));
    let x_3826 : vec3<f32> = u_xlat31;
    let x_3827 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_3826, x_3827);
    let x_3829 : f32 = u_xlat69;
    u_xlat69 = max(x_3829, 6.10351562e-05f);
    let x_3832 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3832);
    let x_3834 : f32 = u_xlat70;
    let x_3836 : vec3<f32> = u_xlat31;
    let x_3837 : vec3<f32> = (vec3<f32>(x_3834, x_3834, x_3834) * x_3836);
    let x_3838 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3837.x, x_3837.y, x_3837.z, x_3838.w);
    let x_3841 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3841);
    let x_3843 : f32 = u_xlat69;
    let x_3844 : i32 = u_xlati68;
    let x_3846 : f32 = x_3815.x_AdditionalLightsAttenuation[x_3844].x;
    u_xlat69 = (x_3843 * x_3846);
    let x_3848 : f32 = u_xlat69;
    let x_3850 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3848) * x_3850) + 1.0f);
    let x_3853 : f32 = u_xlat69;
    u_xlat69 = max(x_3853, 0.0f);
    let x_3855 : f32 = u_xlat69;
    let x_3856 : f32 = u_xlat69;
    u_xlat69 = (x_3855 * x_3856);
    let x_3858 : f32 = u_xlat69;
    let x_3859 : f32 = u_xlat71;
    u_xlat69 = (x_3858 * x_3859);
    let x_3861 : i32 = u_xlati68;
    let x_3863 : vec4<f32> = x_3815.x_AdditionalLightsSpotDir[x_3861];
    let x_3865 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3863.x, x_3863.y, x_3863.z), vec3<f32>(x_3865.x, x_3865.y, x_3865.z));
    let x_3868 : f32 = u_xlat71;
    let x_3869 : i32 = u_xlati68;
    let x_3871 : f32 = x_3815.x_AdditionalLightsAttenuation[x_3869].z;
    let x_3873 : i32 = u_xlati68;
    let x_3875 : f32 = x_3815.x_AdditionalLightsAttenuation[x_3873].w;
    u_xlat71 = ((x_3868 * x_3871) + x_3875);
    let x_3877 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3877, 0.0f, 1.0f);
    let x_3879 : f32 = u_xlat71;
    let x_3880 : f32 = u_xlat71;
    u_xlat71 = (x_3879 * x_3880);
    let x_3882 : f32 = u_xlat69;
    let x_3883 : f32 = u_xlat71;
    u_xlat69 = (x_3882 * x_3883);
    let x_3885 : vec2<f32> = u_xlat51;
    let x_3887 : i32 = u_xlati68;
    let x_3889 : vec4<f32> = x_3815.x_AdditionalLightsColor[x_3887];
    let x_3891 : vec3<f32> = (vec3<f32>(x_3885.x, x_3885.x, x_3885.x) * vec3<f32>(x_3889.x, x_3889.y, x_3889.z));
    let x_3892 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3891.x, x_3891.y, x_3891.z, x_3892.w);
    let x_3894 : vec4<f32> = u_xlat3;
    let x_3896 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_3894.x, x_3894.y, x_3894.z), vec3<f32>(x_3896.x, x_3896.y, x_3896.z));
    let x_3899 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3899, 0.0f, 1.0f);
    let x_3901 : f32 = u_xlat68;
    let x_3902 : f32 = u_xlat69;
    u_xlat68 = (x_3901 * x_3902);
    let x_3904 : f32 = u_xlat68;
    let x_3906 : vec4<f32> = u_xlat11;
    let x_3908 : vec3<f32> = (vec3<f32>(x_3904, x_3904, x_3904) * vec3<f32>(x_3906.x, x_3906.y, x_3906.z));
    let x_3909 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3908.x, x_3908.y, x_3908.z, x_3909.w);
    let x_3911 : vec3<f32> = u_xlat31;
    let x_3912 : f32 = u_xlat70;
    let x_3915 : vec3<f32> = u_xlat1;
    u_xlat31 = ((x_3911 * vec3<f32>(x_3912, x_3912, x_3912)) + x_3915);
    let x_3917 : vec3<f32> = u_xlat31;
    let x_3918 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3917, x_3918);
    let x_3920 : f32 = u_xlat68;
    u_xlat68 = max(x_3920, 1.17549435e-37f);
    let x_3922 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3922);
    let x_3924 : f32 = u_xlat68;
    let x_3926 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_3924, x_3924, x_3924) * x_3926);
    let x_3928 : vec4<f32> = u_xlat3;
    let x_3930 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(vec3<f32>(x_3928.x, x_3928.y, x_3928.z), x_3930);
    let x_3932 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3932, 0.0f, 1.0f);
    let x_3934 : vec4<f32> = u_xlat10;
    let x_3936 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_3934.x, x_3934.y, x_3934.z), x_3936);
    let x_3938 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3938, 0.0f, 1.0f);
    let x_3940 : f32 = u_xlat68;
    let x_3941 : f32 = u_xlat68;
    u_xlat68 = (x_3940 * x_3941);
    let x_3943 : f32 = u_xlat68;
    let x_3945 : f32 = u_xlat9.x;
    u_xlat68 = ((x_3943 * x_3945) + 1.000010014f);
    let x_3948 : f32 = u_xlat69;
    let x_3949 : f32 = u_xlat69;
    u_xlat69 = (x_3948 * x_3949);
    let x_3951 : f32 = u_xlat68;
    let x_3952 : f32 = u_xlat68;
    u_xlat68 = (x_3951 * x_3952);
    let x_3954 : f32 = u_xlat69;
    u_xlat69 = max(x_3954, 0.100000001f);
    let x_3956 : f32 = u_xlat68;
    let x_3957 : f32 = u_xlat69;
    u_xlat68 = (x_3956 * x_3957);
    let x_3959 : f32 = u_xlat29;
    let x_3960 : f32 = u_xlat68;
    u_xlat68 = (x_3959 * x_3960);
    let x_3962 : f32 = u_xlat72;
    let x_3963 : f32 = u_xlat68;
    u_xlat68 = (x_3962 / x_3963);
    let x_3965 : f32 = u_xlat68;
    let x_3968 : vec3<f32> = u_xlat4;
    u_xlat31 = ((vec3<f32>(x_3965, x_3965, x_3965) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3968);
    let x_3970 : vec3<f32> = u_xlat31;
    let x_3971 : vec4<f32> = u_xlat11;
    let x_3974 : vec4<f32> = u_xlat8;
    let x_3976 : vec3<f32> = ((x_3970 * vec3<f32>(x_3971.x, x_3971.y, x_3971.z)) + vec3<f32>(x_3974.x, x_3974.y, x_3974.z));
    let x_3977 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3976.x, x_3976.y, x_3976.z, x_3977.w);

    continuing {
      let x_3979 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3979 + bitcast<u32>(1i));
    }
  }
  let x_3981 : vec4<f32> = u_xlat5;
  let x_3983 : vec4<f32> = u_xlat7;
  let x_3986 : vec4<f32> = u_xlat6;
  u_xlat1 = ((vec3<f32>(x_3981.x, x_3981.y, x_3981.z) * vec3<f32>(x_3983.x, x_3983.x, x_3983.x)) + vec3<f32>(x_3986.x, x_3986.y, x_3986.z));
  let x_3989 : vec4<f32> = u_xlat8;
  let x_3991 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_3989.x, x_3989.y, x_3989.z) + x_3991);
  let x_3993 : vec4<f32> = vs_INTERP4;
  let x_3995 : vec3<f32> = u_xlat0;
  let x_3997 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_3993.w, x_3993.w, x_3993.w) * x_3995) + x_3997);
  let x_4000 : f32 = u_xlat24.x;
  let x_4002 : f32 = u_xlat24.x;
  u_xlat66 = (x_4000 * -(x_4002));
  let x_4005 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4005);
  let x_4007 : vec3<f32> = u_xlat0;
  let x_4010 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_4007 + -(vec3<f32>(x_4010.x, x_4010.y, x_4010.z)));
  let x_4016 : f32 = u_xlat66;
  let x_4018 : vec3<f32> = u_xlat0;
  let x_4021 : vec4<f32> = x_90.unity_FogColor;
  let x_4023 : vec3<f32> = ((vec3<f32>(x_4016, x_4016, x_4016) * x_4018) + vec3<f32>(x_4021.x, x_4021.y, x_4021.z));
  let x_4024 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4023.x, x_4023.y, x_4023.z, x_4024.w);
  let x_4026 : bool = u_xlatb2;
  let x_4027 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4027, x_4026);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0);
}

