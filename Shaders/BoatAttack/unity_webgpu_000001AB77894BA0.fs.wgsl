struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_Lut_Params : vec4<f32>,
  x_UserLut_Params : vec4<f32>,
  x_Bloom_Params : vec4<f32>,
  x_Bloom_RGBM : f32,
  x_Chroma_Params : f32,
  @size(8)
  padding_1 : u32,
  x_Vignette_Params1 : vec4<f32>,
  x_Vignette_Params2 : vec4<f32>,
  x_Grain_Params : vec2<f32>,
  @size(8)
  padding_2 : u32,
  x_Grain_TilingParams : vec4<f32>,
  x_Bloom_Texture_TexelSize : vec4<f32>,
  x_Dithering_Params : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_38 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_LinearClamp : sampler;

@group(0) @binding(1) var x_Bloom_Texture : texture_2d<f32>;

@group(0) @binding(4) var x_UserLut : texture_2d<f32>;

@group(0) @binding(3) var x_InternalLut : texture_2d<f32>;

@group(0) @binding(2) var x_Grain_Texture : texture_2d<f32>;

@group(0) @binding(8) var sampler_LinearRepeat : sampler;

@group(0) @binding(5) var x_BlueNoise_Texture : texture_2d<f32>;

@group(0) @binding(7) var sampler_PointRepeat : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat12 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlatb19 : bool;
  var u_xlatb18 : bool;
  var u_xlat18 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlat6 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb6 : bool;
  var x_641 : f32;
  var x_650 : f32;
  var u_xlatb12 : vec2<bool>;
  var u_xlat13 : vec2<f32>;
  var u_xlat19 : f32;
  var u_xlatb9 : bool;
  var x_789 : f32;
  var x_839 : f32;
  var x_866 : f32;
  var x_890 : f32;
  var x_901 : f32;
  var u_xlatb0 : vec3<bool>;
  var u_xlatb3 : vec3<bool>;
  var hlslcc_movcTemp : vec4<f32>;
  var x_1327 : f32;
  var x_1339 : f32;
  var x_1351 : f32;
  var x_1520 : f32;
  var x_1532 : f32;
  var x_1544 : f32;
  var x_1792 : f32;
  var x_1804 : f32;
  var x_1816 : f32;
  var x_1873 : f32;
  var x_1885 : f32;
  var x_1897 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((vec4<f32>(x_13.x, x_13.y, x_13.x, x_13.y) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_22 : vec4<f32> = u_xlat0;
  let x_24 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_22.z, x_22.w), vec2<f32>(x_24.z, x_24.w));
  let x_31 : vec4<f32> = u_xlat0;
  let x_32 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_31 * vec4<f32>(x_32.x, x_32.x, x_32.x, x_32.x));
  let x_35 : vec4<f32> = u_xlat0;
  let x_43 : f32 = x_38.x_Chroma_Params;
  u_xlat0 = (x_35 * vec4<f32>(x_43, x_43, x_43, x_43));
  let x_56 : vec2<f32> = vs_TEXCOORD0;
  let x_59 : f32 = x_38.x_GlobalMipBias.x;
  let x_60 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_56, x_59);
  u_xlat1.x = x_60.x;
  let x_63 : vec4<f32> = u_xlat0;
  let x_68 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((x_63 * vec4<f32>(-0.333333343f, -0.333333343f, -0.666666687f, -0.666666687f)) + vec4<f32>(x_68.x, x_68.y, x_68.x, x_68.y));
  let x_74 : vec4<f32> = u_xlat0;
  let x_77 : f32 = x_38.x_GlobalMipBias.x;
  let x_78 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_74.x, x_74.y), x_77);
  u_xlat1.y = x_78.y;
  let x_85 : vec4<f32> = u_xlat0;
  let x_88 : f32 = x_38.x_GlobalMipBias.x;
  let x_89 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_85.z, x_85.w), x_88);
  u_xlat1.z = x_89.z;
  let x_93 : vec2<f32> = vs_TEXCOORD0;
  let x_97 : vec4<f32> = x_38.x_Bloom_Texture_TexelSize;
  let x_102 : vec2<f32> = ((x_93 * vec2<f32>(x_97.z, x_97.w)) + vec2<f32>(0.5f, 0.5f));
  let x_103 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_102.x, x_102.y, x_103.z, x_103.w);
  let x_107 : vec4<f32> = u_xlat0;
  u_xlat12 = floor(vec2<f32>(x_107.x, x_107.y));
  let x_110 : vec4<f32> = u_xlat0;
  let x_112 : vec2<f32> = fract(vec2<f32>(x_110.x, x_110.y));
  let x_113 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_112.x, x_112.y, x_113.z, x_113.w);
  let x_116 : vec4<f32> = u_xlat0;
  u_xlat2 = ((-(vec4<f32>(x_116.x, x_116.y, x_116.x, x_116.y)) * vec4<f32>(0.5f, 0.5f, 0.166666672f, 0.166666672f)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_124 : vec4<f32> = u_xlat0;
  let x_126 : vec4<f32> = u_xlat2;
  u_xlat2 = ((vec4<f32>(x_124.x, x_124.y, x_124.x, x_124.y) * x_126) + vec4<f32>(0.5f, 0.5f, -0.5f, -0.5f));
  let x_132 : vec4<f32> = u_xlat0;
  let x_136 : vec2<f32> = ((vec2<f32>(x_132.x, x_132.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(-1.0f, -1.0f));
  let x_137 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_136.x, x_136.y, x_137.z, x_137.w);
  let x_140 : vec4<f32> = u_xlat0;
  let x_142 : vec4<f32> = u_xlat0;
  u_xlat15 = (vec2<f32>(x_140.x, x_140.y) * vec2<f32>(x_142.x, x_142.y));
  let x_145 : vec2<f32> = u_xlat15;
  let x_146 : vec4<f32> = u_xlat3;
  let x_151 : vec2<f32> = ((x_145 * vec2<f32>(x_146.x, x_146.y)) + vec2<f32>(0.666666687f, 0.666666687f));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_152.z, x_152.w);
  let x_154 : vec4<f32> = u_xlat0;
  let x_156 : vec4<f32> = u_xlat2;
  u_xlat2 = ((vec4<f32>(x_154.x, x_154.y, x_154.x, x_154.y) * x_156) + vec4<f32>(0.166666672f, 0.166666672f, 0.166666672f, 0.166666672f));
  let x_160 : vec4<f32> = u_xlat3;
  let x_165 : vec2<f32> = (-(vec2<f32>(x_160.x, x_160.y)) + vec2<f32>(1.0f, 1.0f));
  let x_166 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_165.x, x_165.y, x_166.z, x_166.w);
  let x_168 : vec4<f32> = u_xlat2;
  let x_171 : vec4<f32> = u_xlat0;
  let x_173 : vec2<f32> = (-(vec2<f32>(x_168.x, x_168.y)) + vec2<f32>(x_171.x, x_171.y));
  let x_174 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_173.x, x_173.y, x_174.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat2;
  let x_179 : vec4<f32> = u_xlat0;
  let x_181 : vec2<f32> = (-(vec2<f32>(x_176.z, x_176.w)) + vec2<f32>(x_179.x, x_179.y));
  let x_182 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_181.x, x_181.y, x_182.z, x_182.w);
  let x_185 : vec4<f32> = u_xlat3;
  let x_187 : vec4<f32> = u_xlat2;
  u_xlat14 = (vec2<f32>(x_185.x, x_185.y) + vec2<f32>(x_187.z, x_187.w));
  let x_190 : vec4<f32> = u_xlat0;
  let x_192 : vec4<f32> = u_xlat2;
  let x_194 : vec2<f32> = (vec2<f32>(x_190.x, x_190.y) + vec2<f32>(x_192.x, x_192.y));
  let x_195 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_194.x, x_194.y, x_195.z, x_195.w);
  let x_197 : vec2<f32> = u_xlat14;
  u_xlat15 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_197.x, x_197.y));
  let x_202 : vec4<f32> = u_xlat3;
  let x_204 : vec2<f32> = u_xlat15;
  let x_206 : vec2<f32> = ((vec2<f32>(x_202.x, x_202.y) * x_204) + vec2<f32>(-1.0f, -1.0f));
  let x_207 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_207.x, x_207.y, x_206.x, x_206.y);
  let x_210 : vec4<f32> = u_xlat2;
  let x_211 : vec2<f32> = vec2<f32>(x_210.x, x_210.y);
  let x_215 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_211.x, x_211.y));
  let x_216 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_215.x, x_215.y, x_216.z, x_216.w);
  let x_218 : vec4<f32> = u_xlat0;
  let x_220 : vec4<f32> = u_xlat4;
  let x_223 : vec2<f32> = ((vec2<f32>(x_218.x, x_218.y) * vec2<f32>(x_220.x, x_220.y)) + vec2<f32>(1.0f, 1.0f));
  let x_224 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_223.x, x_223.y, x_224.z, x_224.w);
  let x_226 : vec2<f32> = u_xlat12;
  let x_228 : vec4<f32> = u_xlat3;
  u_xlat4 = (vec4<f32>(x_226.x, x_226.y, x_226.x, x_226.y) + vec4<f32>(x_228.z, x_228.w, x_228.x, x_228.w));
  let x_231 : vec4<f32> = u_xlat4;
  u_xlat4 = (x_231 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_234 : vec4<f32> = u_xlat4;
  let x_236 : vec4<f32> = x_38.x_Bloom_Texture_TexelSize;
  u_xlat4 = (x_234 * vec4<f32>(x_236.x, x_236.y, x_236.x, x_236.y));
  let x_239 : vec4<f32> = u_xlat4;
  u_xlat4 = min(x_239, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_247 : vec4<f32> = u_xlat4;
  let x_250 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_247.x, x_247.y), 0.0f);
  u_xlat5 = x_250;
  let x_254 : vec4<f32> = u_xlat4;
  let x_256 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_254.z, x_254.w), 0.0f);
  u_xlat4 = x_256;
  let x_257 : vec4<f32> = u_xlat2;
  let x_259 : vec4<f32> = u_xlat4;
  u_xlat4 = (vec4<f32>(x_257.x, x_257.x, x_257.x, x_257.x) * x_259);
  let x_261 : vec2<f32> = u_xlat14;
  let x_263 : vec4<f32> = u_xlat5;
  let x_265 : vec4<f32> = u_xlat4;
  u_xlat4 = ((vec4<f32>(x_261.x, x_261.x, x_261.x, x_261.x) * x_263) + x_265);
  let x_267 : vec2<f32> = u_xlat12;
  let x_269 : vec4<f32> = u_xlat3;
  u_xlat0 = (vec4<f32>(x_267.x, x_267.y, x_267.x, x_267.y) + vec4<f32>(x_269.z, x_269.y, x_269.x, x_269.y));
  let x_272 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_272 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_274 : vec4<f32> = u_xlat0;
  let x_276 : vec4<f32> = x_38.x_Bloom_Texture_TexelSize;
  u_xlat0 = (x_274 * vec4<f32>(x_276.x, x_276.y, x_276.x, x_276.y));
  let x_279 : vec4<f32> = u_xlat0;
  u_xlat0 = min(x_279, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_284 : vec4<f32> = u_xlat0;
  let x_286 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_284.x, x_284.y), 0.0f);
  u_xlat3 = x_286;
  let x_290 : vec4<f32> = u_xlat0;
  let x_292 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_290.z, x_290.w), 0.0f);
  u_xlat0 = x_292;
  let x_293 : vec4<f32> = u_xlat0;
  let x_294 : vec4<f32> = u_xlat2;
  u_xlat0 = (x_293 * vec4<f32>(x_294.x, x_294.x, x_294.x, x_294.x));
  let x_297 : vec2<f32> = u_xlat14;
  let x_299 : vec4<f32> = u_xlat3;
  let x_301 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_297.x, x_297.x, x_297.x, x_297.x) * x_299) + x_301);
  let x_303 : vec4<f32> = u_xlat0;
  let x_304 : vec4<f32> = u_xlat2;
  u_xlat0 = (x_303 * vec4<f32>(x_304.y, x_304.y, x_304.y, x_304.y));
  let x_307 : vec2<f32> = u_xlat14;
  let x_309 : vec4<f32> = u_xlat4;
  let x_311 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_307.y, x_307.y, x_307.y, x_307.y) * x_309) + x_311);
  let x_318 : f32 = x_38.x_Bloom_RGBM;
  u_xlatb19 = (0.0f < x_318);
  let x_320 : bool = u_xlatb19;
  if (x_320) {
    let x_324 : vec4<f32> = u_xlat0;
    let x_326 : vec4<f32> = u_xlat0;
    let x_328 : vec3<f32> = (vec3<f32>(x_324.w, x_324.w, x_324.w) * vec3<f32>(x_326.x, x_326.y, x_326.z));
    let x_329 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_328.x, x_328.y, x_328.z, x_329.w);
    let x_331 : vec4<f32> = u_xlat2;
    let x_335 : vec3<f32> = (vec3<f32>(x_331.x, x_331.y, x_331.z) * vec3<f32>(8.0f, 8.0f, 8.0f));
    let x_336 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_335.x, x_335.y, x_335.z, x_336.w);
  }
  let x_338 : vec4<f32> = u_xlat0;
  let x_342 : vec4<f32> = x_38.x_Bloom_Params;
  let x_344 : vec3<f32> = (vec3<f32>(x_338.x, x_338.y, x_338.z) * vec3<f32>(x_342.x, x_342.x, x_342.x));
  let x_345 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_344.x, x_344.y, x_344.z, x_345.w);
  let x_347 : vec4<f32> = u_xlat0;
  let x_350 : vec4<f32> = x_38.x_Bloom_Params;
  let x_353 : vec4<f32> = u_xlat1;
  let x_355 : vec3<f32> = ((vec3<f32>(x_347.x, x_347.y, x_347.z) * vec3<f32>(x_350.y, x_350.z, x_350.w)) + vec3<f32>(x_353.x, x_353.y, x_353.z));
  let x_356 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_355.x, x_355.y, x_355.z, x_356.w);
  let x_361 : f32 = x_38.x_Vignette_Params2.z;
  u_xlatb18 = (0.0f < x_361);
  let x_363 : bool = u_xlatb18;
  if (x_363) {
    let x_366 : vec2<f32> = vs_TEXCOORD0;
    let x_368 : vec4<f32> = x_38.x_Vignette_Params2;
    let x_371 : vec2<f32> = (x_366 + -(vec2<f32>(x_368.x, x_368.y)));
    let x_372 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_371.x, x_371.y, x_372.z, x_372.w);
    let x_374 : vec4<f32> = u_xlat1;
    let x_378 : vec4<f32> = x_38.x_Vignette_Params2;
    let x_380 : vec2<f32> = (abs(vec2<f32>(x_374.x, x_374.y)) * vec2<f32>(x_378.z, x_378.z));
    let x_381 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_381.x, x_380.x, x_380.y, x_381.w);
    let x_384 : f32 = u_xlat1.y;
    let x_388 : f32 = x_38.x_Vignette_Params1.w;
    u_xlat1.x = (x_384 * x_388);
    let x_392 : vec4<f32> = u_xlat1;
    let x_394 : vec4<f32> = u_xlat1;
    u_xlat18 = dot(vec2<f32>(x_392.x, x_392.z), vec2<f32>(x_394.x, x_394.z));
    let x_397 : f32 = u_xlat18;
    u_xlat18 = (-(x_397) + 1.0f);
    let x_400 : f32 = u_xlat18;
    u_xlat18 = max(x_400, 0.0f);
    let x_402 : f32 = u_xlat18;
    u_xlat18 = log2(x_402);
    let x_404 : f32 = u_xlat18;
    let x_406 : f32 = x_38.x_Vignette_Params2.w;
    u_xlat18 = (x_404 * x_406);
    let x_408 : f32 = u_xlat18;
    u_xlat18 = exp2(x_408);
    let x_411 : vec4<f32> = x_38.x_Vignette_Params1;
    let x_415 : vec3<f32> = (-(vec3<f32>(x_411.x, x_411.y, x_411.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_416 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_415.x, x_415.y, x_415.z, x_416.w);
    let x_418 : f32 = u_xlat18;
    let x_420 : vec4<f32> = u_xlat1;
    let x_424 : vec4<f32> = x_38.x_Vignette_Params1;
    let x_426 : vec3<f32> = ((vec3<f32>(x_418, x_418, x_418) * vec3<f32>(x_420.x, x_420.y, x_420.z)) + vec3<f32>(x_424.x, x_424.y, x_424.z));
    let x_427 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_426.x, x_426.y, x_426.z, x_427.w);
    let x_429 : vec4<f32> = u_xlat0;
    let x_431 : vec4<f32> = u_xlat1;
    let x_433 : vec3<f32> = (vec3<f32>(x_429.x, x_429.y, x_429.z) * vec3<f32>(x_431.x, x_431.y, x_431.z));
    let x_434 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_433.x, x_433.y, x_433.z, x_434.w);
  }
  let x_436 : vec4<f32> = u_xlat0;
  let x_440 : vec4<f32> = x_38.x_Lut_Params;
  let x_442 : vec3<f32> = (vec3<f32>(x_436.x, x_436.y, x_436.z) * vec3<f32>(x_440.w, x_440.w, x_440.w));
  let x_443 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_442.x, x_442.y, x_442.z, x_443.w);
  let x_451 : vec4<f32> = u_xlat0;
  u_xlat7.x = dot(vec3<f32>(0.439700991f, 0.382977992f, 0.177334994f), vec3<f32>(x_451.x, x_451.y, x_451.z));
  let x_459 : vec4<f32> = u_xlat0;
  u_xlat7.y = dot(vec3<f32>(0.089792296f, 0.813422978f, 0.096761599f), vec3<f32>(x_459.x, x_459.y, x_459.z));
  let x_467 : vec4<f32> = u_xlat0;
  u_xlat7.z = dot(vec3<f32>(0.017543999f, 0.111543998f, 0.870703995f), vec3<f32>(x_467.x, x_467.y, x_467.z));
  let x_472 : f32 = u_xlat7.y;
  let x_474 : f32 = u_xlat7.x;
  u_xlat0.x = min(x_472, x_474);
  let x_478 : f32 = u_xlat7.z;
  let x_480 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_478, x_480);
  let x_485 : f32 = u_xlat7.y;
  let x_487 : f32 = u_xlat7.x;
  u_xlat6.x = max(x_485, x_487);
  let x_491 : f32 = u_xlat7.z;
  let x_493 : f32 = u_xlat6.x;
  u_xlat0.y = max(x_491, x_493);
  let x_496 : vec4<f32> = u_xlat0;
  let x_501 : vec3<f32> = max(vec3<f32>(x_496.x, x_496.y, x_496.y), vec3<f32>(0.0001f, 0.0001f, 0.01f));
  let x_502 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_501.x, x_501.y, x_501.z, x_502.w);
  let x_505 : f32 = u_xlat0.x;
  let x_508 : f32 = u_xlat0.y;
  u_xlat0.x = (-(x_505) + x_508);
  let x_512 : f32 = u_xlat0.x;
  let x_514 : f32 = u_xlat0.z;
  u_xlat0.x = (x_512 / x_514);
  let x_517 : vec3<f32> = u_xlat7;
  let x_520 : vec3<f32> = u_xlat7;
  u_xlat6 = (-(vec3<f32>(x_517.y, x_517.x, x_517.z)) + vec3<f32>(x_520.z, x_520.y, x_520.x));
  let x_523 : vec3<f32> = u_xlat6;
  let x_525 : vec3<f32> = u_xlat7;
  let x_527 : vec2<f32> = (vec2<f32>(x_523.x, x_523.y) * vec2<f32>(x_525.z, x_525.y));
  let x_528 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_527.x, x_527.y, x_528.z);
  let x_531 : f32 = u_xlat6.y;
  let x_533 : f32 = u_xlat6.x;
  u_xlat6.x = (x_531 + x_533);
  let x_537 : f32 = u_xlat7.x;
  let x_539 : f32 = u_xlat6.z;
  let x_542 : f32 = u_xlat6.x;
  u_xlat6.x = ((x_537 * x_539) + x_542);
  let x_546 : f32 = u_xlat6.x;
  u_xlat6.x = max(x_546, 0.0f);
  let x_550 : f32 = u_xlat6.x;
  u_xlat6.x = sqrt(x_550);
  let x_554 : f32 = u_xlat7.y;
  let x_556 : f32 = u_xlat7.z;
  u_xlat12.x = (x_554 + x_556);
  let x_560 : f32 = u_xlat7.x;
  let x_562 : f32 = u_xlat12.x;
  u_xlat12.x = (x_560 + x_562);
  let x_566 : f32 = u_xlat6.x;
  let x_570 : f32 = u_xlat12.x;
  u_xlat6.x = ((x_566 * 1.75f) + x_570);
  let x_574 : f32 = u_xlat0.x;
  u_xlat18 = (x_574 + -0.400000006f);
  let x_577 : f32 = u_xlat18;
  u_xlat1.x = (x_577 * 2.5f);
  let x_582 : f32 = u_xlat1.x;
  u_xlat1.x = (-(abs(x_582)) + 1.0f);
  let x_588 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_588, 0.0f);
  let x_591 : f32 = u_xlat18;
  u_xlatb18 = (x_591 >= 0.0f);
  let x_593 : bool = u_xlatb18;
  u_xlat18 = select(-1.0f, 1.0f, x_593);
  let x_596 : f32 = u_xlat1.x;
  let x_599 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_596) * x_599) + 1.0f);
  let x_603 : f32 = u_xlat18;
  let x_605 : f32 = u_xlat1.x;
  u_xlat6.z = ((x_603 * x_605) + 1.0f);
  let x_609 : vec3<f32> = u_xlat6;
  u_xlat12 = (vec2<f32>(x_609.x, x_609.z) * vec2<f32>(0.333333343f, 0.025f));
  let x_618 : f32 = u_xlat6.x;
  u_xlatb1 = (0.159999996f >= x_618);
  let x_622 : f32 = u_xlat6.x;
  u_xlatb6 = (x_622 >= 0.479999989f);
  let x_627 : f32 = u_xlat12.x;
  u_xlat12.x = (0.079999998f / x_627);
  let x_631 : f32 = u_xlat12.x;
  u_xlat12.x = (x_631 + -0.5f);
  let x_635 : f32 = u_xlat12.x;
  let x_637 : f32 = u_xlat12.y;
  u_xlat12.x = (x_635 * x_637);
  let x_640 : bool = u_xlatb6;
  if (x_640) {
    x_641 = 0.0f;
  } else {
    let x_646 : f32 = u_xlat12.x;
    x_641 = x_646;
  }
  let x_647 : f32 = x_641;
  u_xlat6.x = x_647;
  let x_649 : bool = u_xlatb1;
  if (x_649) {
    let x_654 : f32 = u_xlat12.y;
    x_650 = x_654;
  } else {
    let x_657 : f32 = u_xlat6.x;
    x_650 = x_657;
  }
  let x_658 : f32 = x_650;
  u_xlat6.x = x_658;
  let x_661 : f32 = u_xlat6.x;
  u_xlat6.x = (x_661 + 1.0f);
  let x_664 : vec3<f32> = u_xlat6;
  let x_666 : vec3<f32> = u_xlat7;
  let x_667 : vec3<f32> = (vec3<f32>(x_664.x, x_664.x, x_664.x) * x_666);
  let x_668 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_668.x, x_667.x, x_667.y, x_667.z);
  let x_673 : vec4<f32> = u_xlat2;
  let x_675 : vec4<f32> = u_xlat2;
  let x_678 : vec4<bool> = (vec4<f32>(x_673.z, x_673.w, x_673.z, x_673.w) == vec4<f32>(x_675.y, x_675.z, x_675.y, x_675.z));
  u_xlatb12 = vec2<bool>(x_678.x, x_678.y);
  let x_681 : bool = u_xlatb12.y;
  let x_683 : bool = u_xlatb12.x;
  u_xlatb12.x = (x_681 & x_683);
  let x_687 : f32 = u_xlat7.y;
  let x_689 : f32 = u_xlat6.x;
  let x_692 : f32 = u_xlat2.w;
  u_xlat18 = ((x_687 * x_689) + -(x_692));
  let x_695 : f32 = u_xlat18;
  u_xlat18 = (x_695 * 1.732050776f);
  let x_699 : f32 = u_xlat2.y;
  let x_702 : f32 = u_xlat2.z;
  u_xlat1.x = ((x_699 * 2.0f) + -(x_702));
  let x_707 : f32 = u_xlat7.z;
  let x_710 : f32 = u_xlat6.x;
  let x_713 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_707) * x_710) + x_713);
  let x_717 : f32 = u_xlat18;
  let x_720 : f32 = u_xlat1.x;
  u_xlat13.x = min(abs(x_717), abs(x_720));
  let x_725 : f32 = u_xlat18;
  let x_728 : f32 = u_xlat1.x;
  u_xlat19 = max(abs(x_725), abs(x_728));
  let x_731 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_731);
  let x_733 : f32 = u_xlat19;
  let x_735 : f32 = u_xlat13.x;
  u_xlat13.x = (x_733 * x_735);
  let x_739 : f32 = u_xlat13.x;
  let x_741 : f32 = u_xlat13.x;
  u_xlat19 = (x_739 * x_741);
  let x_743 : f32 = u_xlat19;
  u_xlat3.x = ((x_743 * 0.0208351f) + -0.085133001f);
  let x_749 : f32 = u_xlat19;
  let x_751 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_749 * x_751) + 0.180141002f);
  let x_756 : f32 = u_xlat19;
  let x_758 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_756 * x_758) + -0.330299497f);
  let x_763 : f32 = u_xlat19;
  let x_765 : f32 = u_xlat3.x;
  u_xlat19 = ((x_763 * x_765) + 0.999866009f);
  let x_769 : f32 = u_xlat19;
  let x_771 : f32 = u_xlat13.x;
  u_xlat3.x = (x_769 * x_771);
  let x_776 : f32 = u_xlat1.x;
  let x_778 : f32 = u_xlat18;
  u_xlatb9 = (abs(x_776) < abs(x_778));
  let x_782 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_782 * -2.0f) + 1.570796371f);
  let x_788 : bool = u_xlatb9;
  if (x_788) {
    let x_793 : f32 = u_xlat3.x;
    x_789 = x_793;
  } else {
    x_789 = 0.0f;
  }
  let x_795 : f32 = x_789;
  u_xlat3.x = x_795;
  let x_798 : f32 = u_xlat13.x;
  let x_799 : f32 = u_xlat19;
  let x_802 : f32 = u_xlat3.x;
  u_xlat13.x = ((x_798 * x_799) + x_802);
  let x_806 : f32 = u_xlat1.x;
  let x_808 : f32 = u_xlat1.x;
  u_xlatb19 = (x_806 < -(x_808));
  let x_811 : bool = u_xlatb19;
  u_xlat19 = select(0.0f, -3.141592741f, x_811);
  let x_814 : f32 = u_xlat19;
  let x_816 : f32 = u_xlat13.x;
  u_xlat13.x = (x_814 + x_816);
  let x_819 : f32 = u_xlat18;
  let x_821 : f32 = u_xlat1.x;
  u_xlat19 = min(x_819, x_821);
  let x_823 : f32 = u_xlat18;
  let x_825 : f32 = u_xlat1.x;
  u_xlat18 = max(x_823, x_825);
  let x_827 : f32 = u_xlat19;
  let x_828 : f32 = u_xlat19;
  u_xlatb1 = (x_827 < -(x_828));
  let x_831 : f32 = u_xlat18;
  let x_832 : f32 = u_xlat18;
  u_xlatb18 = (x_831 >= -(x_832));
  let x_835 : bool = u_xlatb18;
  let x_836 : bool = u_xlatb1;
  u_xlatb18 = (x_835 & x_836);
  let x_838 : bool = u_xlatb18;
  if (x_838) {
    let x_843 : f32 = u_xlat13.x;
    x_839 = -(x_843);
  } else {
    let x_847 : f32 = u_xlat13.x;
    x_839 = x_847;
  }
  let x_848 : f32 = x_839;
  u_xlat18 = x_848;
  let x_849 : f32 = u_xlat18;
  u_xlat18 = (x_849 * 57.295780182f);
  let x_853 : bool = u_xlatb12.x;
  let x_854 : f32 = u_xlat18;
  u_xlat12.x = select(x_854, 0.0f, x_853);
  let x_858 : f32 = u_xlat12.x;
  u_xlatb18 = (x_858 < 0.0f);
  let x_861 : f32 = u_xlat12.x;
  u_xlat1.x = (x_861 + 360.0f);
  let x_865 : bool = u_xlatb18;
  if (x_865) {
    let x_870 : f32 = u_xlat1.x;
    x_866 = x_870;
  } else {
    let x_873 : f32 = u_xlat12.x;
    x_866 = x_873;
  }
  let x_874 : f32 = x_866;
  u_xlat12.x = x_874;
  let x_877 : f32 = u_xlat12.x;
  u_xlatb18 = (x_877 < -180.0f);
  let x_882 : f32 = u_xlat12.x;
  u_xlatb1 = (180.0f < x_882);
  let x_884 : vec2<f32> = u_xlat12;
  u_xlat13 = (vec2<f32>(x_884.x, x_884.x) + vec2<f32>(360.0f, -360.0f));
  let x_889 : bool = u_xlatb1;
  if (x_889) {
    let x_894 : f32 = u_xlat13.y;
    x_890 = x_894;
  } else {
    let x_897 : f32 = u_xlat12.x;
    x_890 = x_897;
  }
  let x_898 : f32 = x_890;
  u_xlat12.x = x_898;
  let x_900 : bool = u_xlatb18;
  if (x_900) {
    let x_905 : f32 = u_xlat13.x;
    x_901 = x_905;
  } else {
    let x_908 : f32 = u_xlat12.x;
    x_901 = x_908;
  }
  let x_909 : f32 = x_901;
  u_xlat12.x = x_909;
  let x_912 : f32 = u_xlat12.x;
  u_xlat12.x = (x_912 * 0.014814815f);
  let x_917 : f32 = u_xlat12.x;
  u_xlat12.x = (-(abs(x_917)) + 1.0f);
  let x_923 : f32 = u_xlat12.x;
  u_xlat12.x = max(x_923, 0.0f);
  let x_927 : f32 = u_xlat12.x;
  u_xlat18 = ((x_927 * -2.0f) + 3.0f);
  let x_932 : f32 = u_xlat12.x;
  let x_934 : f32 = u_xlat12.x;
  u_xlat12.x = (x_932 * x_934);
  let x_938 : f32 = u_xlat12.x;
  let x_939 : f32 = u_xlat18;
  u_xlat12.x = (x_938 * x_939);
  let x_943 : f32 = u_xlat12.x;
  let x_945 : f32 = u_xlat12.x;
  u_xlat12.x = (x_943 * x_945);
  let x_949 : f32 = u_xlat0.x;
  let x_951 : f32 = u_xlat12.x;
  u_xlat0.x = (x_949 * x_951);
  let x_955 : f32 = u_xlat7.x;
  let x_958 : f32 = u_xlat6.x;
  u_xlat6.x = ((-(x_955) * x_958) + 0.029999999f);
  let x_964 : f32 = u_xlat6.x;
  let x_966 : f32 = u_xlat0.x;
  u_xlat0.x = (x_964 * x_966);
  let x_970 : f32 = u_xlat0.x;
  let x_974 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_970 * 0.180000007f) + x_974);
  let x_981 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_981.x, x_981.z, x_981.w));
  let x_989 : vec4<f32> = u_xlat2;
  u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_989.x, x_989.z, x_989.w));
  let x_997 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_997.x, x_997.z, x_997.w));
  let x_1001 : vec4<f32> = u_xlat0;
  let x_1004 : vec3<f32> = max(vec3<f32>(x_1001.x, x_1001.y, x_1001.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1005 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1004.x, x_1004.y, x_1004.z, x_1005.w);
  let x_1007 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1007.x, x_1007.y, x_1007.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1014 : f32 = u_xlat18;
  let x_1017 : vec4<f32> = u_xlat0;
  let x_1019 : vec3<f32> = (-(vec3<f32>(x_1014, x_1014, x_1014)) + vec3<f32>(x_1017.x, x_1017.y, x_1017.z));
  let x_1020 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1019.x, x_1019.y, x_1019.z, x_1020.w);
  let x_1022 : vec4<f32> = u_xlat0;
  let x_1027 : f32 = u_xlat18;
  let x_1029 : vec3<f32> = ((vec3<f32>(x_1022.x, x_1022.y, x_1022.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f)) + vec3<f32>(x_1027, x_1027, x_1027));
  let x_1030 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1029.x, x_1029.y, x_1029.z, x_1030.w);
  let x_1032 : vec4<f32> = u_xlat0;
  let x_1036 : vec3<f32> = (vec3<f32>(x_1032.x, x_1032.y, x_1032.z) + vec3<f32>(0.024578599f, 0.024578599f, 0.024578599f));
  let x_1037 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1036.x, x_1036.y, x_1036.z, x_1037.w);
  let x_1039 : vec4<f32> = u_xlat0;
  let x_1041 : vec4<f32> = u_xlat1;
  let x_1046 : vec3<f32> = ((vec3<f32>(x_1039.x, x_1039.y, x_1039.z) * vec3<f32>(x_1041.x, x_1041.y, x_1041.z)) + vec3<f32>(-0.000090537f, -0.000090537f, -0.000090537f));
  let x_1047 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1046.x, x_1046.y, x_1046.z, x_1047.w);
  let x_1049 : vec4<f32> = u_xlat0;
  let x_1056 : vec3<f32> = ((vec3<f32>(x_1049.x, x_1049.y, x_1049.z) * vec3<f32>(0.983729005f, 0.983729005f, 0.983729005f)) + vec3<f32>(0.432951003f, 0.432951003f, 0.432951003f));
  let x_1057 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1056.x, x_1056.y, x_1056.z, x_1057.w);
  let x_1059 : vec4<f32> = u_xlat0;
  let x_1061 : vec4<f32> = u_xlat2;
  let x_1066 : vec3<f32> = ((vec3<f32>(x_1059.x, x_1059.y, x_1059.z) * vec3<f32>(x_1061.x, x_1061.y, x_1061.z)) + vec3<f32>(0.238080993f, 0.238080993f, 0.238080993f));
  let x_1067 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1066.x, x_1066.y, x_1066.z, x_1067.w);
  let x_1069 : vec4<f32> = u_xlat1;
  let x_1071 : vec4<f32> = u_xlat0;
  let x_1073 : vec3<f32> = (vec3<f32>(x_1069.x, x_1069.y, x_1069.z) / vec3<f32>(x_1071.x, x_1071.y, x_1071.z));
  let x_1074 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1073.x, x_1073.y, x_1073.z, x_1074.w);
  let x_1080 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1080.x, x_1080.y, x_1080.z));
  let x_1088 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1088.x, x_1088.y, x_1088.z));
  let x_1096 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1096.x, x_1096.y, x_1096.z));
  let x_1100 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(x_1100.x, x_1100.y, x_1100.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1105 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1105, 0.0001f);
  let x_1108 : vec4<f32> = u_xlat1;
  let x_1110 : vec4<f32> = u_xlat0;
  let x_1112 : vec2<f32> = (vec2<f32>(x_1108.x, x_1108.y) / vec2<f32>(x_1110.x, x_1110.x));
  let x_1113 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1112.x, x_1112.y, x_1113.z, x_1113.w);
  let x_1116 : f32 = u_xlat1.y;
  u_xlat18 = max(x_1116, 0.0f);
  let x_1118 : f32 = u_xlat18;
  u_xlat18 = min(x_1118, 65504.0f);
  let x_1121 : f32 = u_xlat18;
  u_xlat18 = log2(x_1121);
  let x_1123 : f32 = u_xlat18;
  u_xlat18 = (x_1123 * 0.981100023f);
  let x_1126 : f32 = u_xlat18;
  u_xlat1.y = exp2(x_1126);
  let x_1130 : f32 = u_xlat0.y;
  u_xlat18 = max(x_1130, 0.0001f);
  let x_1133 : f32 = u_xlat1.y;
  let x_1134 : f32 = u_xlat18;
  u_xlat18 = (x_1133 / x_1134);
  let x_1137 : f32 = u_xlat0.x;
  u_xlat19 = (-(x_1137) + 1.0f);
  let x_1141 : f32 = u_xlat0.y;
  let x_1143 : f32 = u_xlat19;
  u_xlat0.z = (-(x_1141) + x_1143);
  let x_1146 : f32 = u_xlat18;
  let x_1148 : vec4<f32> = u_xlat0;
  let x_1150 : vec2<f32> = (vec2<f32>(x_1146, x_1146) * vec2<f32>(x_1148.x, x_1148.z));
  let x_1151 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1150.x, x_1151.y, x_1150.y, x_1151.w);
  let x_1157 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(1.641023397f, -0.324803293f, -0.236424699f), vec3<f32>(x_1157.x, x_1157.y, x_1157.z));
  let x_1165 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.663662851f, 1.61533165f, 0.016756348f), vec3<f32>(x_1165.x, x_1165.y, x_1165.z));
  let x_1173 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.011721894f, -0.008284442f, 0.988394856f), vec3<f32>(x_1173.x, x_1173.y, x_1173.z));
  let x_1177 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1177.x, x_1177.y, x_1177.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1180 : f32 = u_xlat18;
  let x_1183 : vec4<f32> = u_xlat0;
  let x_1185 : vec3<f32> = (-(vec3<f32>(x_1180, x_1180, x_1180)) + vec3<f32>(x_1183.x, x_1183.y, x_1183.z));
  let x_1186 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1185.x, x_1185.y, x_1185.z, x_1186.w);
  let x_1188 : vec4<f32> = u_xlat0;
  let x_1193 : f32 = u_xlat18;
  let x_1195 : vec3<f32> = ((vec3<f32>(x_1188.x, x_1188.y, x_1188.z) * vec3<f32>(0.930000007f, 0.930000007f, 0.930000007f)) + vec3<f32>(x_1193, x_1193, x_1193));
  let x_1196 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1195.x, x_1195.y, x_1195.z, x_1196.w);
  let x_1198 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1198.x, x_1198.y, x_1198.z));
  let x_1202 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1202.x, x_1202.y, x_1202.z));
  let x_1206 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1206.x, x_1206.y, x_1206.z));
  let x_1214 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(0.987223983f, -0.00611327f, 0.015953301f), vec3<f32>(x_1214.x, x_1214.y, x_1214.z));
  let x_1222 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.00759836f, 1.001860023f, 0.0053302f), vec3<f32>(x_1222.x, x_1222.y, x_1222.z));
  let x_1230 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.00307257f, -0.00509595f, 1.081680059f), vec3<f32>(x_1230.x, x_1230.y, x_1230.z));
  let x_1238 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(3.240969896f, -1.537383199f, -0.498610765f), vec3<f32>(x_1238.x, x_1238.y, x_1238.z));
  let x_1243 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1243, 0.0f, 1.0f);
  let x_1250 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(-0.969243646f, 1.875967503f, 0.041555058f), vec3<f32>(x_1250.x, x_1250.y, x_1250.z));
  let x_1255 : f32 = u_xlat1.y;
  u_xlat1.y = clamp(x_1255, 0.0f, 1.0f);
  let x_1262 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(0.05563008f, -0.203976959f, 1.05697155f), vec3<f32>(x_1262.x, x_1262.y, x_1262.z));
  let x_1267 : f32 = u_xlat1.z;
  u_xlat1.z = clamp(x_1267, 0.0f, 1.0f);
  let x_1275 : f32 = x_38.x_UserLut_Params.w;
  u_xlatb0.x = (0.0f < x_1275);
  let x_1279 : bool = u_xlatb0.x;
  if (x_1279) {
    let x_1282 : vec4<f32> = u_xlat1;
    let x_1286 : vec3<f32> = (vec3<f32>(x_1282.x, x_1282.y, x_1282.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
    let x_1287 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1286.x, x_1286.y, x_1286.z, x_1287.w);
    let x_1289 : vec4<f32> = u_xlat1;
    let x_1291 : vec3<f32> = log2(vec3<f32>(x_1289.x, x_1289.y, x_1289.z));
    let x_1292 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1291.x, x_1291.y, x_1291.z, x_1292.w);
    let x_1294 : vec4<f32> = u_xlat2;
    let x_1298 : vec3<f32> = (vec3<f32>(x_1294.x, x_1294.y, x_1294.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
    let x_1299 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1298.x, x_1298.y, x_1298.z, x_1299.w);
    let x_1301 : vec4<f32> = u_xlat2;
    let x_1303 : vec3<f32> = exp2(vec3<f32>(x_1301.x, x_1301.y, x_1301.z));
    let x_1304 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1303.x, x_1303.y, x_1303.z, x_1304.w);
    let x_1306 : vec4<f32> = u_xlat2;
    let x_1313 : vec3<f32> = ((vec3<f32>(x_1306.x, x_1306.y, x_1306.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
    let x_1314 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1313.x, x_1313.y, x_1313.z, x_1314.w);
    let x_1319 : vec4<f32> = u_xlat1;
    let x_1321 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1319.x, x_1319.y, x_1319.z, x_1319.x));
    u_xlatb3 = vec3<bool>(x_1321.x, x_1321.y, x_1321.z);
    let x_1324 : vec4<f32> = u_xlat0;
    hlslcc_movcTemp = x_1324;
    let x_1326 : bool = u_xlatb3.x;
    if (x_1326) {
      let x_1331 : f32 = u_xlat0.x;
      x_1327 = x_1331;
    } else {
      let x_1334 : f32 = u_xlat2.x;
      x_1327 = x_1334;
    }
    let x_1335 : f32 = x_1327;
    hlslcc_movcTemp.x = x_1335;
    let x_1338 : bool = u_xlatb3.y;
    if (x_1338) {
      let x_1343 : f32 = u_xlat0.y;
      x_1339 = x_1343;
    } else {
      let x_1346 : f32 = u_xlat2.y;
      x_1339 = x_1346;
    }
    let x_1347 : f32 = x_1339;
    hlslcc_movcTemp.y = x_1347;
    let x_1350 : bool = u_xlatb3.z;
    if (x_1350) {
      let x_1355 : f32 = u_xlat0.z;
      x_1351 = x_1355;
    } else {
      let x_1358 : f32 = u_xlat2.z;
      x_1351 = x_1358;
    }
    let x_1359 : f32 = x_1351;
    hlslcc_movcTemp.z = x_1359;
    let x_1361 : vec4<f32> = hlslcc_movcTemp;
    u_xlat0 = x_1361;
    let x_1362 : vec4<f32> = u_xlat0;
    let x_1365 : vec4<f32> = x_38.x_UserLut_Params;
    let x_1367 : vec3<f32> = (vec3<f32>(x_1362.z, x_1362.x, x_1362.y) * vec3<f32>(x_1365.z, x_1365.z, x_1365.z));
    let x_1368 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1367.x, x_1367.y, x_1367.z, x_1368.w);
    let x_1371 : f32 = u_xlat2.x;
    u_xlat18 = floor(x_1371);
    let x_1374 : vec4<f32> = x_38.x_UserLut_Params;
    let x_1376 : vec2<f32> = (vec2<f32>(x_1374.x, x_1374.y) * vec2<f32>(0.5f, 0.5f));
    let x_1377 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1376.x, x_1377.y, x_1377.z, x_1376.y);
    let x_1379 : vec4<f32> = u_xlat2;
    let x_1382 : vec4<f32> = x_38.x_UserLut_Params;
    let x_1385 : vec4<f32> = u_xlat2;
    let x_1387 : vec2<f32> = ((vec2<f32>(x_1379.y, x_1379.z) * vec2<f32>(x_1382.x, x_1382.y)) + vec2<f32>(x_1385.x, x_1385.w));
    let x_1388 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1388.x, x_1387.x, x_1387.y, x_1388.w);
    let x_1390 : f32 = u_xlat18;
    let x_1392 : f32 = x_38.x_UserLut_Params.y;
    let x_1395 : f32 = u_xlat2.y;
    u_xlat2.x = ((x_1390 * x_1392) + x_1395);
    let x_1402 : vec4<f32> = u_xlat2;
    let x_1404 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1402.x, x_1402.z), 0.0f);
    let x_1405 : vec3<f32> = vec3<f32>(x_1404.x, x_1404.y, x_1404.z);
    let x_1406 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1405.x, x_1405.y, x_1405.z, x_1406.w);
    let x_1409 : f32 = x_38.x_UserLut_Params.y;
    u_xlat4.x = x_1409;
    u_xlat4.y = 0.0f;
    let x_1412 : vec4<f32> = u_xlat2;
    let x_1414 : vec4<f32> = u_xlat4;
    let x_1416 : vec2<f32> = (vec2<f32>(x_1412.x, x_1412.z) + vec2<f32>(x_1414.x, x_1414.y));
    let x_1417 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1416.x, x_1416.y, x_1417.z, x_1417.w);
    let x_1422 : vec4<f32> = u_xlat2;
    let x_1424 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1422.x, x_1422.y), 0.0f);
    let x_1425 : vec3<f32> = vec3<f32>(x_1424.x, x_1424.y, x_1424.z);
    let x_1426 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1425.x, x_1425.y, x_1425.z, x_1426.w);
    let x_1429 : f32 = u_xlat0.z;
    let x_1431 : f32 = x_38.x_UserLut_Params.z;
    let x_1433 : f32 = u_xlat18;
    u_xlat18 = ((x_1429 * x_1431) + -(x_1433));
    let x_1436 : vec4<f32> = u_xlat3;
    let x_1439 : vec4<f32> = u_xlat2;
    let x_1441 : vec3<f32> = (-(vec3<f32>(x_1436.x, x_1436.y, x_1436.z)) + vec3<f32>(x_1439.x, x_1439.y, x_1439.z));
    let x_1442 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1441.x, x_1441.y, x_1441.z, x_1442.w);
    let x_1444 : f32 = u_xlat18;
    let x_1446 : vec4<f32> = u_xlat2;
    let x_1449 : vec4<f32> = u_xlat3;
    let x_1451 : vec3<f32> = ((vec3<f32>(x_1444, x_1444, x_1444) * vec3<f32>(x_1446.x, x_1446.y, x_1446.z)) + vec3<f32>(x_1449.x, x_1449.y, x_1449.z));
    let x_1452 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1451.x, x_1451.y, x_1451.z, x_1452.w);
    let x_1454 : vec4<f32> = u_xlat0;
    let x_1457 : vec4<f32> = u_xlat2;
    let x_1459 : vec3<f32> = (-(vec3<f32>(x_1454.x, x_1454.y, x_1454.z)) + vec3<f32>(x_1457.x, x_1457.y, x_1457.z));
    let x_1460 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1459.x, x_1459.y, x_1459.z, x_1460.w);
    let x_1463 : vec4<f32> = x_38.x_UserLut_Params;
    let x_1465 : vec4<f32> = u_xlat2;
    let x_1468 : vec4<f32> = u_xlat0;
    let x_1470 : vec3<f32> = ((vec3<f32>(x_1463.w, x_1463.w, x_1463.w) * vec3<f32>(x_1465.x, x_1465.y, x_1465.z)) + vec3<f32>(x_1468.x, x_1468.y, x_1468.z));
    let x_1471 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1470.x, x_1470.y, x_1470.z, x_1471.w);
    let x_1473 : vec4<f32> = u_xlat0;
    let x_1477 : vec3<f32> = (vec3<f32>(x_1473.x, x_1473.y, x_1473.z) * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
    let x_1478 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1477.x, x_1477.y, x_1477.z, x_1478.w);
    let x_1480 : vec4<f32> = u_xlat0;
    let x_1484 : vec3<f32> = (vec3<f32>(x_1480.x, x_1480.y, x_1480.z) + vec3<f32>(0.055f, 0.055f, 0.055f));
    let x_1485 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1484.x, x_1484.y, x_1484.z, x_1485.w);
    let x_1487 : vec4<f32> = u_xlat3;
    let x_1491 : vec3<f32> = (vec3<f32>(x_1487.x, x_1487.y, x_1487.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
    let x_1492 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1491.x, x_1491.y, x_1491.z, x_1492.w);
    let x_1494 : vec4<f32> = u_xlat3;
    let x_1497 : vec3<f32> = log2(abs(vec3<f32>(x_1494.x, x_1494.y, x_1494.z)));
    let x_1498 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1497.x, x_1497.y, x_1497.z, x_1498.w);
    let x_1500 : vec4<f32> = u_xlat3;
    let x_1504 : vec3<f32> = (vec3<f32>(x_1500.x, x_1500.y, x_1500.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
    let x_1505 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1504.x, x_1504.y, x_1504.z, x_1505.w);
    let x_1507 : vec4<f32> = u_xlat3;
    let x_1509 : vec3<f32> = exp2(vec3<f32>(x_1507.x, x_1507.y, x_1507.z));
    let x_1510 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1509.x, x_1509.y, x_1509.z, x_1510.w);
    let x_1514 : vec4<f32> = u_xlat0;
    let x_1516 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_1514.x, x_1514.y, x_1514.z, x_1514.x));
    u_xlatb0 = vec3<bool>(x_1516.x, x_1516.y, x_1516.z);
    let x_1519 : bool = u_xlatb0.x;
    if (x_1519) {
      let x_1524 : f32 = u_xlat2.x;
      x_1520 = x_1524;
    } else {
      let x_1527 : f32 = u_xlat3.x;
      x_1520 = x_1527;
    }
    let x_1528 : f32 = x_1520;
    u_xlat1.x = x_1528;
    let x_1531 : bool = u_xlatb0.y;
    if (x_1531) {
      let x_1536 : f32 = u_xlat2.y;
      x_1532 = x_1536;
    } else {
      let x_1539 : f32 = u_xlat3.y;
      x_1532 = x_1539;
    }
    let x_1540 : f32 = x_1532;
    u_xlat1.y = x_1540;
    let x_1543 : bool = u_xlatb0.z;
    if (x_1543) {
      let x_1548 : f32 = u_xlat2.z;
      x_1544 = x_1548;
    } else {
      let x_1551 : f32 = u_xlat3.z;
      x_1544 = x_1551;
    }
    let x_1552 : f32 = x_1544;
    u_xlat1.z = x_1552;
  }
  let x_1554 : vec4<f32> = u_xlat1;
  let x_1557 : vec4<f32> = x_38.x_Lut_Params;
  let x_1559 : vec3<f32> = (vec3<f32>(x_1554.z, x_1554.x, x_1554.y) * vec3<f32>(x_1557.z, x_1557.z, x_1557.z));
  let x_1560 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1559.x, x_1559.y, x_1559.z, x_1560.w);
  let x_1563 : f32 = u_xlat0.x;
  u_xlat0.x = floor(x_1563);
  let x_1567 : vec4<f32> = x_38.x_Lut_Params;
  let x_1569 : vec2<f32> = (vec2<f32>(x_1567.x, x_1567.y) * vec2<f32>(0.5f, 0.5f));
  let x_1570 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1569.x, x_1569.y, x_1570.z, x_1570.w);
  let x_1572 : vec4<f32> = u_xlat0;
  let x_1575 : vec4<f32> = x_38.x_Lut_Params;
  let x_1578 : vec4<f32> = u_xlat1;
  let x_1580 : vec2<f32> = ((vec2<f32>(x_1572.y, x_1572.z) * vec2<f32>(x_1575.x, x_1575.y)) + vec2<f32>(x_1578.x, x_1578.y));
  let x_1581 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1581.x, x_1580.x, x_1580.y, x_1581.w);
  let x_1584 : f32 = u_xlat0.x;
  let x_1586 : f32 = x_38.x_Lut_Params.y;
  let x_1589 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1584 * x_1586) + x_1589);
  let x_1596 : vec4<f32> = u_xlat2;
  let x_1598 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1596.x, x_1596.z), 0.0f);
  u_xlat6 = vec3<f32>(x_1598.x, x_1598.y, x_1598.z);
  let x_1601 : f32 = x_38.x_Lut_Params.y;
  u_xlat1.x = x_1601;
  u_xlat1.y = 0.0f;
  let x_1604 : vec4<f32> = u_xlat1;
  let x_1606 : vec4<f32> = u_xlat2;
  let x_1608 : vec2<f32> = (vec2<f32>(x_1604.x, x_1604.y) + vec2<f32>(x_1606.x, x_1606.z));
  let x_1609 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1608.x, x_1608.y, x_1609.z, x_1609.w);
  let x_1614 : vec4<f32> = u_xlat1;
  let x_1616 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1614.x, x_1614.y), 0.0f);
  let x_1617 : vec3<f32> = vec3<f32>(x_1616.x, x_1616.y, x_1616.z);
  let x_1618 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1617.x, x_1617.y, x_1618.z, x_1617.z);
  let x_1621 : f32 = u_xlat1.z;
  let x_1623 : f32 = x_38.x_Lut_Params.z;
  let x_1626 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1621 * x_1623) + -(x_1626));
  let x_1630 : vec3<f32> = u_xlat6;
  let x_1632 : vec4<f32> = u_xlat1;
  let x_1634 : vec3<f32> = (-(x_1630) + vec3<f32>(x_1632.x, x_1632.y, x_1632.w));
  let x_1635 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1634.x, x_1634.y, x_1634.z, x_1635.w);
  let x_1637 : vec4<f32> = u_xlat0;
  let x_1639 : vec4<f32> = u_xlat1;
  let x_1642 : vec3<f32> = u_xlat6;
  let x_1643 : vec3<f32> = ((vec3<f32>(x_1637.x, x_1637.x, x_1637.x) * vec3<f32>(x_1639.x, x_1639.y, x_1639.z)) + x_1642);
  let x_1644 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1643.x, x_1643.y, x_1643.z, x_1644.w);
  let x_1646 : vec2<f32> = vs_TEXCOORD0;
  let x_1649 : vec4<f32> = x_38.x_Grain_TilingParams;
  let x_1653 : vec4<f32> = x_38.x_Grain_TilingParams;
  let x_1655 : vec2<f32> = ((x_1646 * vec2<f32>(x_1649.x, x_1649.y)) + vec2<f32>(x_1653.z, x_1653.w));
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1655.x, x_1655.y, x_1656.z, x_1656.w);
  let x_1663 : vec4<f32> = u_xlat1;
  let x_1666 : f32 = x_38.x_GlobalMipBias.x;
  let x_1667 : vec4<f32> = textureSampleBias(x_Grain_Texture, sampler_LinearRepeat, vec2<f32>(x_1663.x, x_1663.y), x_1666);
  u_xlat18 = x_1667.w;
  let x_1669 : f32 = u_xlat18;
  u_xlat18 = (x_1669 + -0.5f);
  let x_1671 : f32 = u_xlat18;
  let x_1672 : f32 = u_xlat18;
  u_xlat18 = (x_1671 + x_1672);
  let x_1674 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(x_1674.x, x_1674.y, x_1674.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_1683 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_1683);
  let x_1688 : f32 = x_38.x_Grain_Params.y;
  let x_1690 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1688 * -(x_1690)) + 1.0f);
  let x_1695 : f32 = u_xlat18;
  let x_1697 : vec4<f32> = u_xlat0;
  u_xlat7 = (vec3<f32>(x_1695, x_1695, x_1695) * vec3<f32>(x_1697.x, x_1697.y, x_1697.z));
  let x_1700 : vec3<f32> = u_xlat7;
  let x_1703 : vec2<f32> = x_38.x_Grain_Params;
  u_xlat7 = (x_1700 * vec3<f32>(x_1703.x, x_1703.x, x_1703.x));
  let x_1706 : vec3<f32> = u_xlat7;
  let x_1707 : vec4<f32> = u_xlat1;
  let x_1710 : vec4<f32> = u_xlat0;
  let x_1712 : vec3<f32> = ((x_1706 * vec3<f32>(x_1707.x, x_1707.x, x_1707.x)) + vec3<f32>(x_1710.x, x_1710.y, x_1710.z));
  let x_1713 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1712.x, x_1712.y, x_1712.z, x_1713.w);
  let x_1715 : vec2<f32> = vs_TEXCOORD0;
  let x_1718 : vec4<f32> = x_38.x_Dithering_Params;
  let x_1722 : vec4<f32> = x_38.x_Dithering_Params;
  let x_1724 : vec2<f32> = ((x_1715 * vec2<f32>(x_1718.x, x_1718.y)) + vec2<f32>(x_1722.z, x_1722.w));
  let x_1725 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1724.x, x_1724.y, x_1725.z, x_1725.w);
  let x_1732 : vec4<f32> = u_xlat1;
  let x_1735 : f32 = x_38.x_GlobalMipBias.x;
  let x_1736 : vec4<f32> = textureSampleBias(x_BlueNoise_Texture, sampler_PointRepeat, vec2<f32>(x_1732.x, x_1732.y), x_1735);
  u_xlat18 = x_1736.w;
  let x_1738 : f32 = u_xlat18;
  u_xlat18 = ((x_1738 * 2.0f) + -1.0f);
  let x_1741 : f32 = u_xlat18;
  u_xlatb1 = (x_1741 >= 0.0f);
  let x_1743 : bool = u_xlatb1;
  u_xlat1.x = select(-1.0f, 1.0f, x_1743);
  let x_1746 : f32 = u_xlat18;
  u_xlat18 = (-(abs(x_1746)) + 1.0f);
  let x_1750 : f32 = u_xlat18;
  u_xlat18 = sqrt(x_1750);
  let x_1752 : f32 = u_xlat18;
  u_xlat18 = (-(x_1752) + 1.0f);
  let x_1755 : f32 = u_xlat18;
  let x_1757 : f32 = u_xlat1.x;
  u_xlat18 = (x_1755 * x_1757);
  let x_1759 : vec4<f32> = u_xlat0;
  let x_1761 : vec3<f32> = (vec3<f32>(x_1759.x, x_1759.y, x_1759.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
  let x_1762 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1761.x, x_1761.y, x_1761.z, x_1762.w);
  let x_1764 : vec4<f32> = u_xlat0;
  let x_1767 : vec3<f32> = log2(abs(vec3<f32>(x_1764.x, x_1764.y, x_1764.z)));
  let x_1768 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1767.x, x_1767.y, x_1767.z, x_1768.w);
  let x_1770 : vec4<f32> = u_xlat2;
  let x_1772 : vec3<f32> = (vec3<f32>(x_1770.x, x_1770.y, x_1770.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
  let x_1773 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1772.x, x_1772.y, x_1772.z, x_1773.w);
  let x_1775 : vec4<f32> = u_xlat2;
  let x_1777 : vec3<f32> = exp2(vec3<f32>(x_1775.x, x_1775.y, x_1775.z));
  let x_1778 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1777.x, x_1777.y, x_1777.z, x_1778.w);
  let x_1780 : vec4<f32> = u_xlat2;
  let x_1783 : vec3<f32> = ((vec3<f32>(x_1780.x, x_1780.y, x_1780.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
  let x_1784 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1783.x, x_1783.y, x_1783.z, x_1784.w);
  let x_1786 : vec4<f32> = u_xlat0;
  let x_1788 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1786.x, x_1786.y, x_1786.z, x_1786.x));
  u_xlatb0 = vec3<bool>(x_1788.x, x_1788.y, x_1788.z);
  let x_1791 : bool = u_xlatb0.x;
  if (x_1791) {
    let x_1796 : f32 = u_xlat1.x;
    x_1792 = x_1796;
  } else {
    let x_1799 : f32 = u_xlat2.x;
    x_1792 = x_1799;
  }
  let x_1800 : f32 = x_1792;
  u_xlat0.x = x_1800;
  let x_1803 : bool = u_xlatb0.y;
  if (x_1803) {
    let x_1808 : f32 = u_xlat1.y;
    x_1804 = x_1808;
  } else {
    let x_1811 : f32 = u_xlat2.y;
    x_1804 = x_1811;
  }
  let x_1812 : f32 = x_1804;
  u_xlat0.y = x_1812;
  let x_1815 : bool = u_xlatb0.z;
  if (x_1815) {
    let x_1820 : f32 = u_xlat1.z;
    x_1816 = x_1820;
  } else {
    let x_1823 : f32 = u_xlat2.z;
    x_1816 = x_1823;
  }
  let x_1824 : f32 = x_1816;
  u_xlat0.z = x_1824;
  let x_1826 : f32 = u_xlat18;
  let x_1831 : vec4<f32> = u_xlat0;
  let x_1833 : vec3<f32> = ((vec3<f32>(x_1826, x_1826, x_1826) * vec3<f32>(0.003921569f, 0.003921569f, 0.003921569f)) + vec3<f32>(x_1831.x, x_1831.y, x_1831.z));
  let x_1834 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1833.x, x_1833.y, x_1833.z, x_1834.w);
  let x_1836 : vec4<f32> = u_xlat0;
  let x_1838 : vec3<f32> = (vec3<f32>(x_1836.x, x_1836.y, x_1836.z) * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
  let x_1839 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1838.x, x_1838.y, x_1838.z, x_1839.w);
  let x_1841 : vec4<f32> = u_xlat0;
  let x_1843 : vec3<f32> = (vec3<f32>(x_1841.x, x_1841.y, x_1841.z) + vec3<f32>(0.055f, 0.055f, 0.055f));
  let x_1844 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1843.x, x_1843.y, x_1843.z, x_1844.w);
  let x_1846 : vec4<f32> = u_xlat2;
  let x_1848 : vec3<f32> = (vec3<f32>(x_1846.x, x_1846.y, x_1846.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
  let x_1849 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1848.x, x_1848.y, x_1848.z, x_1849.w);
  let x_1851 : vec4<f32> = u_xlat2;
  let x_1854 : vec3<f32> = log2(abs(vec3<f32>(x_1851.x, x_1851.y, x_1851.z)));
  let x_1855 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1854.x, x_1854.y, x_1854.z, x_1855.w);
  let x_1857 : vec4<f32> = u_xlat2;
  let x_1859 : vec3<f32> = (vec3<f32>(x_1857.x, x_1857.y, x_1857.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
  let x_1860 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1859.x, x_1859.y, x_1859.z, x_1860.w);
  let x_1862 : vec4<f32> = u_xlat2;
  let x_1864 : vec3<f32> = exp2(vec3<f32>(x_1862.x, x_1862.y, x_1862.z));
  let x_1865 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1864.x, x_1864.y, x_1864.z, x_1865.w);
  let x_1867 : vec4<f32> = u_xlat0;
  let x_1869 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_1867.x, x_1867.y, x_1867.z, x_1867.x));
  u_xlatb0 = vec3<bool>(x_1869.x, x_1869.y, x_1869.z);
  let x_1872 : bool = u_xlatb0.x;
  if (x_1872) {
    let x_1877 : f32 = u_xlat1.x;
    x_1873 = x_1877;
  } else {
    let x_1880 : f32 = u_xlat2.x;
    x_1873 = x_1880;
  }
  let x_1881 : f32 = x_1873;
  u_xlat0.x = x_1881;
  let x_1884 : bool = u_xlatb0.y;
  if (x_1884) {
    let x_1889 : f32 = u_xlat1.y;
    x_1885 = x_1889;
  } else {
    let x_1892 : f32 = u_xlat2.y;
    x_1885 = x_1892;
  }
  let x_1893 : f32 = x_1885;
  u_xlat0.y = x_1893;
  let x_1896 : bool = u_xlatb0.z;
  if (x_1896) {
    let x_1901 : f32 = u_xlat1.z;
    x_1897 = x_1901;
  } else {
    let x_1904 : f32 = u_xlat2.z;
    x_1897 = x_1904;
  }
  let x_1905 : f32 = x_1897;
  u_xlat0.z = x_1905;
  let x_1909 : vec4<f32> = u_xlat0;
  let x_1911 : vec3<f32> = max(vec3<f32>(x_1909.x, x_1909.y, x_1909.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1912 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1911.x, x_1911.y, x_1911.z, x_1912.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

