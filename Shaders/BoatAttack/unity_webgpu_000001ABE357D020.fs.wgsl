type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_94 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_277 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_379 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3615 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_4100 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4210 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec4<f32>;
  var x_199 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : vec4<bool>;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1881 : f32;
  var u_xlatu5 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2006 : f32;
  var u_xlatb47 : bool;
  var x_2060 : f32;
  var u_xlat44 : vec2<f32>;
  var u_xlat66 : f32;
  var u_xlat71 : f32;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3564 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3698 : f32;
  var x_3709 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati73 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlat75 : f32;
  var u_xlatu75 : u32;
  var u_xlati76 : i32;
  var u_xlati75 : i32;
  var u_xlati11 : i32;
  var u_xlat33 : vec3<f32>;
  var u_xlatb75 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4512 : f32;
  var x_4525 : f32;
  var x_4587 : f32;
  var x_4598 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_64 : vec3<f32> = vs_INTERP1;
  let x_65 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_64, x_65);
  let x_71 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_71);
  let x_75 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_75);
  let x_85 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_85);
  let x_98 : f32 = x_94.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_98 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec4<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec4<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec4<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_167) + x_172);
  let x_175 : vec3<f32> = u_xlat4;
  let x_176 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_175, x_176);
  let x_178 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_178);
  let x_180 : f32 = u_xlat67;
  let x_182 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_180, x_180, x_180) * x_182);
  let x_188 : f32 = x_160.unity_MatrixV[0i].z;
  u_xlat5.x = x_188;
  let x_192 : f32 = x_160.unity_MatrixV[1i].z;
  u_xlat5.y = x_192;
  let x_196 : f32 = x_160.unity_MatrixV[2i].z;
  u_xlat5.z = x_196;
  let x_198 : bool = u_xlatb0;
  if (x_198) {
    let x_202 : vec3<f32> = u_xlat4;
    x_199 = x_202;
  } else {
    let x_204 : vec4<f32> = u_xlat5;
    x_199 = vec3<f32>(x_204.x, x_204.y, x_204.z);
  }
  let x_206 : vec3<f32> = x_199;
  u_xlat4 = x_206;
  let x_207 : vec3<f32> = u_xlat4;
  let x_211 : vec4<f32> = x_94.unity_WorldToObject[1i];
  let x_213 : vec3<f32> = (vec3<f32>(x_207.y, x_207.y, x_207.y) * vec3<f32>(x_211.x, x_211.y, x_211.z));
  let x_214 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_213.x, x_213.y, x_213.z, x_214.w);
  let x_217 : vec4<f32> = x_94.unity_WorldToObject[0i];
  let x_219 : vec3<f32> = u_xlat4;
  let x_222 : vec4<f32> = u_xlat5;
  let x_224 : vec3<f32> = ((vec3<f32>(x_217.x, x_217.y, x_217.z) * vec3<f32>(x_219.x, x_219.x, x_219.x)) + vec3<f32>(x_222.x, x_222.y, x_222.z));
  let x_225 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_224.x, x_224.y, x_224.z, x_225.w);
  let x_228 : vec4<f32> = x_94.unity_WorldToObject[2i];
  let x_230 : vec3<f32> = u_xlat4;
  let x_233 : vec4<f32> = u_xlat5;
  let x_235 : vec3<f32> = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_230.z, x_230.z, x_230.z)) + vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_238 : vec4<f32> = u_xlat5;
  let x_240 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(vec3<f32>(x_238.x, x_238.y, x_238.z), vec3<f32>(x_240.x, x_240.y, x_240.z));
  let x_245 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_245);
  let x_248 : vec4<f32> = u_xlat0;
  let x_250 : vec4<f32> = u_xlat5;
  let x_252 : vec3<f32> = (vec3<f32>(x_248.x, x_248.x, x_248.x) * vec3<f32>(x_250.x, x_250.y, x_250.z));
  let x_253 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_252.y, x_252.z, x_253.w);
  let x_267 : vec4<f32> = vs_INTERP3;
  let x_270 : f32 = x_160.x_GlobalMipBias.x;
  let x_271 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_267.x, x_267.y), x_270);
  u_xlat6 = x_271;
  let x_273 : vec4<f32> = u_xlat6;
  let x_279 : vec4<f32> = x_277.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_273.x, x_273.y, x_273.z) * vec3<f32>(x_279.x, x_279.y, x_279.z));
  let x_288 : vec4<f32> = vs_INTERP3;
  let x_291 : f32 = x_160.x_GlobalMipBias.x;
  let x_292 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_288.x, x_288.y), x_291);
  u_xlat8 = vec4<f32>(x_292.w, x_292.x, x_292.y, x_292.z);
  let x_295 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_295.y, x_295.z, x_295.w, x_295.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_302 : vec4<f32> = u_xlat9;
  let x_303 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_302, x_303);
  let x_307 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_307);
  let x_311 : vec4<f32> = u_xlat0;
  let x_313 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_311.x, x_311.x, x_311.x) * vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_318 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_318 * 200.0f);
  let x_323 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_323, 1.0f);
  let x_326 : vec4<f32> = u_xlat0;
  let x_328 : vec4<f32> = u_xlat6;
  let x_330 : vec3<f32> = (vec3<f32>(x_326.x, x_326.x, x_326.x) * vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_331 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_330.x, x_330.y, x_330.z, x_331.w);
  let x_333 : vec4<f32> = u_xlat3;
  let x_335 : vec3<f32> = u_xlat30;
  let x_337 : vec3<f32> = (vec3<f32>(x_333.x, x_333.y, x_333.z) * vec3<f32>(x_335.y, x_335.y, x_335.y));
  let x_338 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_337.x, x_337.y, x_337.z, x_338.w);
  let x_340 : vec3<f32> = u_xlat30;
  let x_342 : vec4<f32> = u_xlat2;
  let x_345 : vec4<f32> = u_xlat3;
  let x_347 : vec3<f32> = ((vec3<f32>(x_340.x, x_340.x, x_340.x) * vec3<f32>(x_342.x, x_342.y, x_342.z)) + vec3<f32>(x_345.x, x_345.y, x_345.z));
  let x_348 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_347.x, x_347.y, x_347.z, x_348.w);
  let x_350 : vec3<f32> = u_xlat30;
  let x_352 : vec3<f32> = u_xlat1;
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_350.z, x_350.z, x_350.z) * x_352) + vec3<f32>(x_354.x, x_354.y, x_354.z));
  let x_357 : vec3<f32> = u_xlat1;
  let x_358 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_357, x_358);
  let x_362 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_362, 1.17549435e-37f);
  let x_367 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_367);
  let x_370 : vec4<f32> = u_xlat0;
  let x_372 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_370.x, x_370.x, x_370.x) * x_372);
  let x_374 : vec3<f32> = vs_INTERP0;
  let x_381 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres0;
  let x_384 : vec3<f32> = (x_374 + -(vec3<f32>(x_381.x, x_381.y, x_381.z)));
  let x_385 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_384.x, x_384.y, x_384.z, x_385.w);
  let x_387 : vec3<f32> = vs_INTERP0;
  let x_389 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres1;
  let x_392 : vec3<f32> = (x_387 + -(vec3<f32>(x_389.x, x_389.y, x_389.z)));
  let x_393 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : vec3<f32> = vs_INTERP0;
  let x_397 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres2;
  let x_400 : vec3<f32> = (x_395 + -(vec3<f32>(x_397.x, x_397.y, x_397.z)));
  let x_401 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_400.x, x_400.y, x_400.z, x_401.w);
  let x_404 : vec3<f32> = vs_INTERP0;
  let x_407 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres3;
  let x_410 : vec3<f32> = (x_404 + -(vec3<f32>(x_407.x, x_407.y, x_407.z)));
  let x_411 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : vec4<f32> = u_xlat2;
  let x_415 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_413.x, x_413.y, x_413.z), vec3<f32>(x_415.x, x_415.y, x_415.z));
  let x_419 : vec4<f32> = u_xlat3;
  let x_421 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_419.x, x_419.y, x_419.z), vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_425 : vec4<f32> = u_xlat9;
  let x_427 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_425.x, x_425.y, x_425.z), vec3<f32>(x_427.x, x_427.y, x_427.z));
  let x_431 : vec4<f32> = u_xlat10;
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_431.x, x_431.y, x_431.z), vec3<f32>(x_433.x, x_433.y, x_433.z));
  let x_440 : vec4<f32> = u_xlat2;
  let x_443 : vec4<f32> = x_379.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_440 < x_443);
  let x_446 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_446);
  let x_450 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_450);
  let x_454 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_454);
  let x_458 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_458);
  let x_462 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_462);
  let x_467 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_467);
  let x_471 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_471);
  let x_474 : vec4<f32> = u_xlat2;
  let x_476 : vec4<f32> = u_xlat3;
  let x_478 : vec3<f32> = (vec3<f32>(x_474.x, x_474.y, x_474.z) + vec3<f32>(x_476.y, x_476.z, x_476.w));
  let x_479 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_478.x, x_478.y, x_478.z, x_479.w);
  let x_481 : vec4<f32> = u_xlat2;
  let x_484 : vec3<f32> = max(vec3<f32>(x_481.x, x_481.y, x_481.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_485 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_485.x, x_484.x, x_484.y, x_484.z);
  let x_487 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_487, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_494 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_494) + 4.0f);
  let x_500 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_500);
  let x_503 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_503) << bitcast<u32>(2i));
  let x_506 : vec3<f32> = vs_INTERP0;
  let x_508 : i32 = u_xlati0;
  let x_511 : i32 = u_xlati0;
  let x_515 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_508 + 1i) / 4i)][((x_511 + 1i) % 4i)];
  let x_517 : vec3<f32> = (vec3<f32>(x_506.y, x_506.y, x_506.y) * vec3<f32>(x_515.x, x_515.y, x_515.z));
  let x_518 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_517.x, x_517.y, x_517.z, x_518.w);
  let x_520 : i32 = u_xlati0;
  let x_522 : i32 = u_xlati0;
  let x_525 : vec4<f32> = x_379.x_MainLightWorldToShadow[(x_520 / 4i)][(x_522 % 4i)];
  let x_527 : vec3<f32> = vs_INTERP0;
  let x_530 : vec4<f32> = u_xlat2;
  let x_532 : vec3<f32> = ((vec3<f32>(x_525.x, x_525.y, x_525.z) * vec3<f32>(x_527.x, x_527.x, x_527.x)) + vec3<f32>(x_530.x, x_530.y, x_530.z));
  let x_533 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_532.x, x_532.y, x_532.z, x_533.w);
  let x_535 : i32 = u_xlati0;
  let x_538 : i32 = u_xlati0;
  let x_542 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_535 + 2i) / 4i)][((x_538 + 2i) % 4i)];
  let x_544 : vec3<f32> = vs_INTERP0;
  let x_547 : vec4<f32> = u_xlat2;
  let x_549 : vec3<f32> = ((vec3<f32>(x_542.x, x_542.y, x_542.z) * vec3<f32>(x_544.z, x_544.z, x_544.z)) + vec3<f32>(x_547.x, x_547.y, x_547.z));
  let x_550 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_549.x, x_549.y, x_549.z, x_550.w);
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : i32 = u_xlati0;
  let x_557 : i32 = u_xlati0;
  let x_561 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_554 + 3i) / 4i)][((x_557 + 3i) % 4i)];
  let x_563 : vec3<f32> = (vec3<f32>(x_552.x, x_552.y, x_552.z) + vec3<f32>(x_561.x, x_561.y, x_561.z));
  let x_564 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
  let x_568 : f32 = x_379.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_568);
  let x_570 : bool = u_xlatb0;
  if (x_570) {
    let x_575 : f32 = x_379.x_MainLightShadowParams.y;
    u_xlatb67 = (x_575 == 1.0f);
    let x_577 : bool = u_xlatb67;
    if (x_577) {
      let x_580 : vec4<f32> = u_xlat2;
      let x_584 : vec4<f32> = x_379.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_580.x, x_580.y, x_580.x, x_580.y) + x_584);
      let x_587 : vec4<f32> = u_xlat3;
      let x_588 : vec2<f32> = vec2<f32>(x_587.x, x_587.y);
      let x_590 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_588.x, x_588.y, x_590);
      let x_602 : vec3<f32> = txVec0;
      let x_604 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_602.xy, x_602.z);
      u_xlat9.x = x_604;
      let x_607 : vec4<f32> = u_xlat3;
      let x_608 : vec2<f32> = vec2<f32>(x_607.z, x_607.w);
      let x_610 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_608.x, x_608.y, x_610);
      let x_617 : vec3<f32> = txVec1;
      let x_619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_617.xy, x_617.z);
      u_xlat9.y = x_619;
      let x_621 : vec4<f32> = u_xlat2;
      let x_624 : vec4<f32> = x_379.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_621.x, x_621.y, x_621.x, x_621.y) + x_624);
      let x_627 : vec4<f32> = u_xlat3;
      let x_628 : vec2<f32> = vec2<f32>(x_627.x, x_627.y);
      let x_630 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_628.x, x_628.y, x_630);
      let x_637 : vec3<f32> = txVec2;
      let x_639 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_637.xy, x_637.z);
      u_xlat9.z = x_639;
      let x_642 : vec4<f32> = u_xlat3;
      let x_643 : vec2<f32> = vec2<f32>(x_642.z, x_642.w);
      let x_645 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_643.x, x_643.y, x_645);
      let x_652 : vec3<f32> = txVec3;
      let x_654 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_652.xy, x_652.z);
      u_xlat9.w = x_654;
      let x_656 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_656, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_663 : f32 = x_379.x_MainLightShadowParams.y;
      u_xlatb68 = (x_663 == 2.0f);
      let x_665 : bool = u_xlatb68;
      if (x_665) {
        let x_668 : vec4<f32> = u_xlat2;
        let x_672 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_677 : vec2<f32> = ((vec2<f32>(x_668.x, x_668.y) * vec2<f32>(x_672.z, x_672.w)) + vec2<f32>(0.5f, 0.5f));
        let x_678 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_677.x, x_677.y, x_678.z, x_678.w);
        let x_680 : vec4<f32> = u_xlat3;
        let x_682 : vec2<f32> = floor(vec2<f32>(x_680.x, x_680.y));
        let x_683 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_682.x, x_682.y, x_683.z, x_683.w);
        let x_687 : vec4<f32> = u_xlat2;
        let x_690 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_693 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_687.x, x_687.y) * vec2<f32>(x_690.z, x_690.w)) + -(vec2<f32>(x_693.x, x_693.y)));
        let x_697 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_697.x, x_697.x, x_697.y, x_697.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_701 : vec4<f32> = u_xlat9;
        let x_703 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_701.x, x_701.x, x_701.z, x_701.z) * vec4<f32>(x_703.x, x_703.x, x_703.z, x_703.z));
        let x_706 : vec4<f32> = u_xlat10;
        let x_710 : vec2<f32> = (vec2<f32>(x_706.y, x_706.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_711 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_710.x, x_711.y, x_710.y, x_711.w);
        let x_713 : vec4<f32> = u_xlat10;
        let x_716 : vec2<f32> = u_xlat47;
        let x_718 : vec2<f32> = ((vec2<f32>(x_713.x, x_713.z) * vec2<f32>(0.5f, 0.5f)) + -(x_716));
        let x_719 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_718.x, x_718.y, x_719.z, x_719.w);
        let x_722 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_722) + vec2<f32>(1.0f, 1.0f));
        let x_727 : vec2<f32> = u_xlat47;
        let x_729 : vec2<f32> = min(x_727, vec2<f32>(0.0f, 0.0f));
        let x_730 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_729.x, x_729.y, x_730.z, x_730.w);
        let x_732 : vec4<f32> = u_xlat11;
        let x_735 : vec4<f32> = u_xlat11;
        let x_738 : vec2<f32> = u_xlat54;
        let x_739 : vec2<f32> = ((-(vec2<f32>(x_732.x, x_732.y)) * vec2<f32>(x_735.x, x_735.y)) + x_738);
        let x_740 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
        let x_742 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_742, vec2<f32>(0.0f, 0.0f));
        let x_744 : vec2<f32> = u_xlat47;
        let x_746 : vec2<f32> = u_xlat47;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_744) * x_746) + vec2<f32>(x_748.y, x_748.w));
        let x_751 : vec4<f32> = u_xlat11;
        let x_753 : vec2<f32> = (vec2<f32>(x_751.x, x_751.y) + vec2<f32>(1.0f, 1.0f));
        let x_754 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_753.x, x_753.y, x_754.z, x_754.w);
        let x_756 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_756 + vec2<f32>(1.0f, 1.0f));
        let x_759 : vec4<f32> = u_xlat10;
        let x_763 : vec2<f32> = (vec2<f32>(x_759.x, x_759.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_764 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_763.x, x_763.y, x_764.z, x_764.w);
        let x_766 : vec2<f32> = u_xlat54;
        let x_767 : vec2<f32> = (x_766 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_768 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_767.x, x_767.y, x_768.z, x_768.w);
        let x_770 : vec4<f32> = u_xlat11;
        let x_772 : vec2<f32> = (vec2<f32>(x_770.x, x_770.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_773 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_772.x, x_772.y, x_773.z, x_773.w);
        let x_776 : vec2<f32> = u_xlat47;
        let x_777 : vec2<f32> = (x_776 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_778 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_777.x, x_777.y, x_778.z, x_778.w);
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_780.y, x_780.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_784 : f32 = u_xlat11.x;
        u_xlat12.z = x_784;
        let x_787 : f32 = u_xlat47.x;
        u_xlat12.w = x_787;
        let x_790 : f32 = u_xlat13.x;
        u_xlat10.z = x_790;
        let x_793 : f32 = u_xlat9.x;
        u_xlat10.w = x_793;
        let x_796 : vec4<f32> = u_xlat10;
        let x_798 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_796.z, x_796.w, x_796.x, x_796.z) + vec4<f32>(x_798.z, x_798.w, x_798.x, x_798.z));
        let x_802 : f32 = u_xlat12.y;
        u_xlat11.z = x_802;
        let x_805 : f32 = u_xlat47.y;
        u_xlat11.w = x_805;
        let x_808 : f32 = u_xlat10.y;
        u_xlat13.z = x_808;
        let x_811 : f32 = u_xlat9.z;
        u_xlat13.w = x_811;
        let x_813 : vec4<f32> = u_xlat11;
        let x_815 : vec4<f32> = u_xlat13;
        let x_817 : vec3<f32> = (vec3<f32>(x_813.z, x_813.y, x_813.w) + vec3<f32>(x_815.z, x_815.y, x_815.w));
        let x_818 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_817.x, x_817.y, x_817.z, x_818.w);
        let x_820 : vec4<f32> = u_xlat10;
        let x_822 : vec4<f32> = u_xlat14;
        let x_824 : vec3<f32> = (vec3<f32>(x_820.x, x_820.z, x_820.w) / vec3<f32>(x_822.z, x_822.w, x_822.y));
        let x_825 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_824.x, x_824.y, x_824.z, x_825.w);
        let x_827 : vec4<f32> = u_xlat10;
        let x_833 : vec3<f32> = (vec3<f32>(x_827.x, x_827.y, x_827.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_834 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_833.x, x_833.y, x_833.z, x_834.w);
        let x_836 : vec4<f32> = u_xlat13;
        let x_838 : vec4<f32> = u_xlat9;
        let x_840 : vec3<f32> = (vec3<f32>(x_836.z, x_836.y, x_836.w) / vec3<f32>(x_838.x, x_838.y, x_838.z));
        let x_841 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_840.x, x_840.y, x_840.z, x_841.w);
        let x_843 : vec4<f32> = u_xlat11;
        let x_845 : vec3<f32> = (vec3<f32>(x_843.x, x_843.y, x_843.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_846 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_845.x, x_845.y, x_845.z, x_846.w);
        let x_848 : vec4<f32> = u_xlat10;
        let x_851 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_853 : vec3<f32> = (vec3<f32>(x_848.y, x_848.x, x_848.z) * vec3<f32>(x_851.x, x_851.x, x_851.x));
        let x_854 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_853.x, x_853.y, x_853.z, x_854.w);
        let x_856 : vec4<f32> = u_xlat11;
        let x_859 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_861 : vec3<f32> = (vec3<f32>(x_856.x, x_856.y, x_856.z) * vec3<f32>(x_859.y, x_859.y, x_859.y));
        let x_862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_861.x, x_861.y, x_861.z, x_862.w);
        let x_865 : f32 = u_xlat11.x;
        u_xlat10.w = x_865;
        let x_867 : vec4<f32> = u_xlat3;
        let x_870 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_873 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_867.x, x_867.y, x_867.x, x_867.y) * vec4<f32>(x_870.x, x_870.y, x_870.x, x_870.y)) + vec4<f32>(x_873.y, x_873.w, x_873.x, x_873.w));
        let x_876 : vec4<f32> = u_xlat3;
        let x_879 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_879.x, x_879.y)) + vec2<f32>(x_882.z, x_882.w));
        let x_886 : f32 = u_xlat10.y;
        u_xlat11.w = x_886;
        let x_888 : vec4<f32> = u_xlat11;
        let x_889 : vec2<f32> = vec2<f32>(x_888.y, x_888.z);
        let x_890 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_890.x, x_889.x, x_890.z, x_889.y);
        let x_892 : vec4<f32> = u_xlat3;
        let x_895 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_898 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_892.x, x_892.y, x_892.x, x_892.y) * vec4<f32>(x_895.x, x_895.y, x_895.x, x_895.y)) + vec4<f32>(x_898.x, x_898.y, x_898.z, x_898.y));
        let x_901 : vec4<f32> = u_xlat3;
        let x_904 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_907 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_901.x, x_901.y, x_901.x, x_901.y) * vec4<f32>(x_904.x, x_904.y, x_904.x, x_904.y)) + vec4<f32>(x_907.w, x_907.y, x_907.w, x_907.z));
        let x_910 : vec4<f32> = u_xlat3;
        let x_913 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_916 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_910.x, x_910.y, x_910.x, x_910.y) * vec4<f32>(x_913.x, x_913.y, x_913.x, x_913.y)) + vec4<f32>(x_916.x, x_916.w, x_916.z, x_916.w));
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.y) * vec4<f32>(x_922.z, x_922.w, x_922.y, x_922.z));
        let x_926 : vec4<f32> = u_xlat9;
        let x_928 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_926.y, x_926.y, x_926.z, x_926.z) * x_928);
        let x_932 : f32 = u_xlat9.z;
        let x_934 : f32 = u_xlat14.y;
        u_xlat68 = (x_932 * x_934);
        let x_937 : vec4<f32> = u_xlat12;
        let x_938 : vec2<f32> = vec2<f32>(x_937.x, x_937.y);
        let x_940 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_938.x, x_938.y, x_940);
        let x_947 : vec3<f32> = txVec4;
        let x_949 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_947.xy, x_947.z);
        u_xlat3.x = x_949;
        let x_952 : vec4<f32> = u_xlat12;
        let x_953 : vec2<f32> = vec2<f32>(x_952.z, x_952.w);
        let x_955 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_953.x, x_953.y, x_955);
        let x_963 : vec3<f32> = txVec5;
        let x_965 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_963.xy, x_963.z);
        u_xlat25 = x_965;
        let x_966 : f32 = u_xlat25;
        let x_968 : f32 = u_xlat15.y;
        u_xlat25 = (x_966 * x_968);
        let x_971 : f32 = u_xlat15.x;
        let x_973 : f32 = u_xlat3.x;
        let x_975 : f32 = u_xlat25;
        u_xlat3.x = ((x_971 * x_973) + x_975);
        let x_979 : vec2<f32> = u_xlat47;
        let x_981 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_979.x, x_979.y, x_981);
        let x_988 : vec3<f32> = txVec6;
        let x_990 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_988.xy, x_988.z);
        u_xlat25 = x_990;
        let x_992 : f32 = u_xlat15.z;
        let x_993 : f32 = u_xlat25;
        let x_996 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_992 * x_993) + x_996);
        let x_1000 : vec4<f32> = u_xlat11;
        let x_1001 : vec2<f32> = vec2<f32>(x_1000.x, x_1000.y);
        let x_1003 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec7;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1010.xy, x_1010.z);
        u_xlat25 = x_1012;
        let x_1014 : f32 = u_xlat15.w;
        let x_1015 : f32 = u_xlat25;
        let x_1018 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1014 * x_1015) + x_1018);
        let x_1022 : vec4<f32> = u_xlat13;
        let x_1023 : vec2<f32> = vec2<f32>(x_1022.x, x_1022.y);
        let x_1025 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1023.x, x_1023.y, x_1025);
        let x_1032 : vec3<f32> = txVec8;
        let x_1034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1032.xy, x_1032.z);
        u_xlat25 = x_1034;
        let x_1036 : f32 = u_xlat16.x;
        let x_1037 : f32 = u_xlat25;
        let x_1040 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1036 * x_1037) + x_1040);
        let x_1044 : vec4<f32> = u_xlat13;
        let x_1045 : vec2<f32> = vec2<f32>(x_1044.z, x_1044.w);
        let x_1047 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1045.x, x_1045.y, x_1047);
        let x_1054 : vec3<f32> = txVec9;
        let x_1056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1054.xy, x_1054.z);
        u_xlat25 = x_1056;
        let x_1058 : f32 = u_xlat16.y;
        let x_1059 : f32 = u_xlat25;
        let x_1062 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1058 * x_1059) + x_1062);
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1067 : vec2<f32> = vec2<f32>(x_1066.z, x_1066.w);
        let x_1069 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1067.x, x_1067.y, x_1069);
        let x_1076 : vec3<f32> = txVec10;
        let x_1078 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1076.xy, x_1076.z);
        u_xlat25 = x_1078;
        let x_1080 : f32 = u_xlat16.z;
        let x_1081 : f32 = u_xlat25;
        let x_1084 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1080 * x_1081) + x_1084);
        let x_1088 : vec4<f32> = u_xlat10;
        let x_1089 : vec2<f32> = vec2<f32>(x_1088.x, x_1088.y);
        let x_1091 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1089.x, x_1089.y, x_1091);
        let x_1098 : vec3<f32> = txVec11;
        let x_1100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1098.xy, x_1098.z);
        u_xlat25 = x_1100;
        let x_1102 : f32 = u_xlat16.w;
        let x_1103 : f32 = u_xlat25;
        let x_1106 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1102 * x_1103) + x_1106);
        let x_1110 : vec4<f32> = u_xlat10;
        let x_1111 : vec2<f32> = vec2<f32>(x_1110.z, x_1110.w);
        let x_1113 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1111.x, x_1111.y, x_1113);
        let x_1120 : vec3<f32> = txVec12;
        let x_1122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1120.xy, x_1120.z);
        u_xlat25 = x_1122;
        let x_1123 : f32 = u_xlat68;
        let x_1124 : f32 = u_xlat25;
        let x_1127 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1123 * x_1124) + x_1127);
      } else {
        let x_1130 : vec4<f32> = u_xlat2;
        let x_1133 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1136 : vec2<f32> = ((vec2<f32>(x_1130.x, x_1130.y) * vec2<f32>(x_1133.z, x_1133.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1137 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1136.x, x_1136.y, x_1137.z, x_1137.w);
        let x_1139 : vec4<f32> = u_xlat3;
        let x_1141 : vec2<f32> = floor(vec2<f32>(x_1139.x, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1144 : vec4<f32> = u_xlat2;
        let x_1147 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1150 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1144.x, x_1144.y) * vec2<f32>(x_1147.z, x_1147.w)) + -(vec2<f32>(x_1150.x, x_1150.y)));
        let x_1154 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1154.x, x_1154.x, x_1154.y, x_1154.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1157 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1157.x, x_1157.x, x_1157.z, x_1157.z) * vec4<f32>(x_1159.x, x_1159.x, x_1159.z, x_1159.z));
        let x_1162 : vec4<f32> = u_xlat10;
        let x_1166 : vec2<f32> = (vec2<f32>(x_1162.y, x_1162.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1167 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1167.x, x_1166.x, x_1167.z, x_1166.y);
        let x_1169 : vec4<f32> = u_xlat10;
        let x_1172 : vec2<f32> = u_xlat47;
        let x_1174 : vec2<f32> = ((vec2<f32>(x_1169.x, x_1169.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1172));
        let x_1175 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1174.x, x_1175.y, x_1174.y, x_1175.w);
        let x_1177 : vec2<f32> = u_xlat47;
        let x_1179 : vec2<f32> = (-(x_1177) + vec2<f32>(1.0f, 1.0f));
        let x_1180 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1179.x, x_1179.y, x_1180.z, x_1180.w);
        let x_1182 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1182, vec2<f32>(0.0f, 0.0f));
        let x_1184 : vec2<f32> = u_xlat54;
        let x_1186 : vec2<f32> = u_xlat54;
        let x_1188 : vec4<f32> = u_xlat10;
        let x_1190 : vec2<f32> = ((-(x_1184) * x_1186) + vec2<f32>(x_1188.x, x_1188.y));
        let x_1191 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1190.x, x_1190.y, x_1191.z, x_1191.w);
        let x_1193 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1193, vec2<f32>(0.0f, 0.0f));
        let x_1196 : vec2<f32> = u_xlat54;
        let x_1198 : vec2<f32> = u_xlat54;
        let x_1200 : vec4<f32> = u_xlat9;
        let x_1202 : vec2<f32> = ((-(x_1196) * x_1198) + vec2<f32>(x_1200.y, x_1200.w));
        let x_1203 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1202.x, x_1203.y, x_1202.y);
        let x_1205 : vec4<f32> = u_xlat10;
        let x_1208 : vec2<f32> = (vec2<f32>(x_1205.x, x_1205.y) + vec2<f32>(2.0f, 2.0f));
        let x_1209 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1208.x, x_1208.y, x_1209.z, x_1209.w);
        let x_1211 : vec3<f32> = u_xlat31;
        let x_1213 : vec2<f32> = (vec2<f32>(x_1211.x, x_1211.z) + vec2<f32>(2.0f, 2.0f));
        let x_1214 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1214.x, x_1213.x, x_1214.z, x_1213.y);
        let x_1217 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1217 * 0.081632003f);
        let x_1221 : vec4<f32> = u_xlat9;
        let x_1224 : vec3<f32> = (vec3<f32>(x_1221.z, x_1221.x, x_1221.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1225 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1224.x, x_1224.y, x_1224.z, x_1225.w);
        let x_1227 : vec4<f32> = u_xlat10;
        let x_1230 : vec2<f32> = (vec2<f32>(x_1227.x, x_1227.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1231 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1230.x, x_1230.y, x_1231.z, x_1231.w);
        let x_1234 : f32 = u_xlat13.y;
        u_xlat12.x = x_1234;
        let x_1236 : vec2<f32> = u_xlat47;
        let x_1243 : vec2<f32> = ((vec2<f32>(x_1236.x, x_1236.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1244 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1244.x, x_1243.x, x_1244.z, x_1243.y);
        let x_1246 : vec2<f32> = u_xlat47;
        let x_1250 : vec2<f32> = ((vec2<f32>(x_1246.x, x_1246.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1251 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1250.x, x_1251.y, x_1250.y, x_1251.w);
        let x_1254 : f32 = u_xlat9.x;
        u_xlat10.y = x_1254;
        let x_1257 : f32 = u_xlat11.y;
        u_xlat10.w = x_1257;
        let x_1259 : vec4<f32> = u_xlat10;
        let x_1260 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1259 + x_1260);
        let x_1262 : vec2<f32> = u_xlat47;
        let x_1265 : vec2<f32> = ((vec2<f32>(x_1262.y, x_1262.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1266 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1266.x, x_1265.x, x_1266.z, x_1265.y);
        let x_1268 : vec2<f32> = u_xlat47;
        let x_1271 : vec2<f32> = ((vec2<f32>(x_1268.y, x_1268.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1272 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1271.x, x_1272.y, x_1271.y, x_1272.w);
        let x_1275 : f32 = u_xlat9.y;
        u_xlat11.y = x_1275;
        let x_1277 : vec4<f32> = u_xlat11;
        let x_1278 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1277 + x_1278);
        let x_1280 : vec4<f32> = u_xlat10;
        let x_1281 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1280 / x_1281);
        let x_1283 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1283 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1289 : vec4<f32> = u_xlat11;
        let x_1290 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1289 / x_1290);
        let x_1292 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1292 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1294 : vec4<f32> = u_xlat10;
        let x_1297 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1294.w, x_1294.x, x_1294.y, x_1294.z) * vec4<f32>(x_1297.x, x_1297.x, x_1297.x, x_1297.x));
        let x_1300 : vec4<f32> = u_xlat11;
        let x_1303 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1300.x, x_1300.w, x_1300.y, x_1300.z) * vec4<f32>(x_1303.y, x_1303.y, x_1303.y, x_1303.y));
        let x_1306 : vec4<f32> = u_xlat10;
        let x_1307 : vec3<f32> = vec3<f32>(x_1306.y, x_1306.z, x_1306.w);
        let x_1308 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1307.x, x_1308.y, x_1307.y, x_1307.z);
        let x_1311 : f32 = u_xlat11.x;
        u_xlat13.y = x_1311;
        let x_1313 : vec4<f32> = u_xlat3;
        let x_1316 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1319 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1313.x, x_1313.y, x_1313.x, x_1313.y) * vec4<f32>(x_1316.x, x_1316.y, x_1316.x, x_1316.y)) + vec4<f32>(x_1319.x, x_1319.y, x_1319.z, x_1319.y));
        let x_1322 : vec4<f32> = u_xlat3;
        let x_1325 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1328 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1322.x, x_1322.y) * vec2<f32>(x_1325.x, x_1325.y)) + vec2<f32>(x_1328.w, x_1328.y));
        let x_1332 : f32 = u_xlat13.y;
        u_xlat10.y = x_1332;
        let x_1335 : f32 = u_xlat11.z;
        u_xlat13.y = x_1335;
        let x_1337 : vec4<f32> = u_xlat3;
        let x_1340 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1343 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1337.x, x_1337.y, x_1337.x, x_1337.y) * vec4<f32>(x_1340.x, x_1340.y, x_1340.x, x_1340.y)) + vec4<f32>(x_1343.x, x_1343.y, x_1343.z, x_1343.y));
        let x_1346 : vec4<f32> = u_xlat3;
        let x_1349 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1352 : vec4<f32> = u_xlat13;
        let x_1354 : vec2<f32> = ((vec2<f32>(x_1346.x, x_1346.y) * vec2<f32>(x_1349.x, x_1349.y)) + vec2<f32>(x_1352.w, x_1352.y));
        let x_1355 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1354.x, x_1354.y, x_1355.z, x_1355.w);
        let x_1358 : f32 = u_xlat13.y;
        u_xlat10.z = x_1358;
        let x_1361 : vec4<f32> = u_xlat3;
        let x_1364 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1367 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1361.x, x_1361.y, x_1361.x, x_1361.y) * vec4<f32>(x_1364.x, x_1364.y, x_1364.x, x_1364.y)) + vec4<f32>(x_1367.x, x_1367.y, x_1367.x, x_1367.z));
        let x_1371 : f32 = u_xlat11.w;
        u_xlat13.y = x_1371;
        let x_1374 : vec4<f32> = u_xlat3;
        let x_1377 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1380 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1374.x, x_1374.y, x_1374.x, x_1374.y) * vec4<f32>(x_1377.x, x_1377.y, x_1377.x, x_1377.y)) + vec4<f32>(x_1380.x, x_1380.y, x_1380.z, x_1380.y));
        let x_1384 : vec4<f32> = u_xlat3;
        let x_1387 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1390 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1384.x, x_1384.y) * vec2<f32>(x_1387.x, x_1387.y)) + vec2<f32>(x_1390.w, x_1390.y));
        let x_1394 : f32 = u_xlat13.y;
        u_xlat10.w = x_1394;
        let x_1397 : vec4<f32> = u_xlat3;
        let x_1400 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1403 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1397.x, x_1397.y) * vec2<f32>(x_1400.x, x_1400.y)) + vec2<f32>(x_1403.x, x_1403.w));
        let x_1406 : vec4<f32> = u_xlat13;
        let x_1407 : vec3<f32> = vec3<f32>(x_1406.x, x_1406.z, x_1406.w);
        let x_1408 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1407.x, x_1408.y, x_1407.y, x_1407.z);
        let x_1410 : vec4<f32> = u_xlat3;
        let x_1413 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1416 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1410.x, x_1410.y, x_1410.x, x_1410.y) * vec4<f32>(x_1413.x, x_1413.y, x_1413.x, x_1413.y)) + vec4<f32>(x_1416.x, x_1416.y, x_1416.z, x_1416.y));
        let x_1420 : vec4<f32> = u_xlat3;
        let x_1423 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1426 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1420.x, x_1420.y) * vec2<f32>(x_1423.x, x_1423.y)) + vec2<f32>(x_1426.w, x_1426.y));
        let x_1430 : f32 = u_xlat10.x;
        u_xlat11.x = x_1430;
        let x_1432 : vec4<f32> = u_xlat3;
        let x_1435 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1438 : vec4<f32> = u_xlat11;
        let x_1440 : vec2<f32> = ((vec2<f32>(x_1432.x, x_1432.y) * vec2<f32>(x_1435.x, x_1435.y)) + vec2<f32>(x_1438.x, x_1438.y));
        let x_1441 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1440.x, x_1440.y, x_1441.z, x_1441.w);
        let x_1444 : vec4<f32> = u_xlat9;
        let x_1446 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1444.x, x_1444.x, x_1444.x, x_1444.x) * x_1446);
        let x_1449 : vec4<f32> = u_xlat9;
        let x_1451 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1449.y, x_1449.y, x_1449.y, x_1449.y) * x_1451);
        let x_1454 : vec4<f32> = u_xlat9;
        let x_1456 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1454.z, x_1454.z, x_1454.z, x_1454.z) * x_1456);
        let x_1458 : vec4<f32> = u_xlat9;
        let x_1460 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1458.w, x_1458.w, x_1458.w, x_1458.w) * x_1460);
        let x_1463 : vec4<f32> = u_xlat14;
        let x_1464 : vec2<f32> = vec2<f32>(x_1463.x, x_1463.y);
        let x_1466 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1464.x, x_1464.y, x_1466);
        let x_1473 : vec3<f32> = txVec13;
        let x_1475 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1473.xy, x_1473.z);
        u_xlat68 = x_1475;
        let x_1477 : vec4<f32> = u_xlat14;
        let x_1478 : vec2<f32> = vec2<f32>(x_1477.z, x_1477.w);
        let x_1480 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1478.x, x_1478.y, x_1480);
        let x_1488 : vec3<f32> = txVec14;
        let x_1490 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1488.xy, x_1488.z);
        u_xlat70 = x_1490;
        let x_1491 : f32 = u_xlat70;
        let x_1493 : f32 = u_xlat19.y;
        u_xlat70 = (x_1491 * x_1493);
        let x_1496 : f32 = u_xlat19.x;
        let x_1497 : f32 = u_xlat68;
        let x_1499 : f32 = u_xlat70;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec2<f32> = u_xlat47;
        let x_1504 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec15;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat47.x = x_1513;
        let x_1516 : f32 = u_xlat19.z;
        let x_1518 : f32 = u_xlat47.x;
        let x_1520 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1518) + x_1520);
        let x_1523 : vec4<f32> = u_xlat17;
        let x_1524 : vec2<f32> = vec2<f32>(x_1523.x, x_1523.y);
        let x_1526 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1524.x, x_1524.y, x_1526);
        let x_1533 : vec3<f32> = txVec16;
        let x_1535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1533.xy, x_1533.z);
        u_xlat47.x = x_1535;
        let x_1538 : f32 = u_xlat19.w;
        let x_1540 : f32 = u_xlat47.x;
        let x_1542 : f32 = u_xlat68;
        u_xlat68 = ((x_1538 * x_1540) + x_1542);
        let x_1545 : vec4<f32> = u_xlat15;
        let x_1546 : vec2<f32> = vec2<f32>(x_1545.x, x_1545.y);
        let x_1548 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1546.x, x_1546.y, x_1548);
        let x_1555 : vec3<f32> = txVec17;
        let x_1557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1555.xy, x_1555.z);
        u_xlat47.x = x_1557;
        let x_1560 : f32 = u_xlat20.x;
        let x_1562 : f32 = u_xlat47.x;
        let x_1564 : f32 = u_xlat68;
        u_xlat68 = ((x_1560 * x_1562) + x_1564);
        let x_1567 : vec4<f32> = u_xlat15;
        let x_1568 : vec2<f32> = vec2<f32>(x_1567.z, x_1567.w);
        let x_1570 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1568.x, x_1568.y, x_1570);
        let x_1577 : vec3<f32> = txVec18;
        let x_1579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1577.xy, x_1577.z);
        u_xlat47.x = x_1579;
        let x_1582 : f32 = u_xlat20.y;
        let x_1584 : f32 = u_xlat47.x;
        let x_1586 : f32 = u_xlat68;
        u_xlat68 = ((x_1582 * x_1584) + x_1586);
        let x_1589 : vec4<f32> = u_xlat16;
        let x_1590 : vec2<f32> = vec2<f32>(x_1589.x, x_1589.y);
        let x_1592 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1590.x, x_1590.y, x_1592);
        let x_1599 : vec3<f32> = txVec19;
        let x_1601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1599.xy, x_1599.z);
        u_xlat47.x = x_1601;
        let x_1604 : f32 = u_xlat20.z;
        let x_1606 : f32 = u_xlat47.x;
        let x_1608 : f32 = u_xlat68;
        u_xlat68 = ((x_1604 * x_1606) + x_1608);
        let x_1611 : vec4<f32> = u_xlat17;
        let x_1612 : vec2<f32> = vec2<f32>(x_1611.z, x_1611.w);
        let x_1614 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1612.x, x_1612.y, x_1614);
        let x_1621 : vec3<f32> = txVec20;
        let x_1623 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1621.xy, x_1621.z);
        u_xlat47.x = x_1623;
        let x_1626 : f32 = u_xlat20.w;
        let x_1628 : f32 = u_xlat47.x;
        let x_1630 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat18;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.x, x_1633.y);
        let x_1636 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec21;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1643.xy, x_1643.z);
        u_xlat47.x = x_1645;
        let x_1648 : f32 = u_xlat21.x;
        let x_1650 : f32 = u_xlat47.x;
        let x_1652 : f32 = u_xlat68;
        u_xlat68 = ((x_1648 * x_1650) + x_1652);
        let x_1655 : vec4<f32> = u_xlat18;
        let x_1656 : vec2<f32> = vec2<f32>(x_1655.z, x_1655.w);
        let x_1658 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1656.x, x_1656.y, x_1658);
        let x_1665 : vec3<f32> = txVec22;
        let x_1667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1665.xy, x_1665.z);
        u_xlat47.x = x_1667;
        let x_1670 : f32 = u_xlat21.y;
        let x_1672 : f32 = u_xlat47.x;
        let x_1674 : f32 = u_xlat68;
        u_xlat68 = ((x_1670 * x_1672) + x_1674);
        let x_1677 : vec2<f32> = u_xlat32;
        let x_1679 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1677.x, x_1677.y, x_1679);
        let x_1686 : vec3<f32> = txVec23;
        let x_1688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1686.xy, x_1686.z);
        u_xlat47.x = x_1688;
        let x_1691 : f32 = u_xlat21.z;
        let x_1693 : f32 = u_xlat47.x;
        let x_1695 : f32 = u_xlat68;
        u_xlat68 = ((x_1691 * x_1693) + x_1695);
        let x_1698 : vec2<f32> = u_xlat60;
        let x_1700 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1698.x, x_1698.y, x_1700);
        let x_1707 : vec3<f32> = txVec24;
        let x_1709 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1707.xy, x_1707.z);
        u_xlat47.x = x_1709;
        let x_1712 : f32 = u_xlat21.w;
        let x_1714 : f32 = u_xlat47.x;
        let x_1716 : f32 = u_xlat68;
        u_xlat68 = ((x_1712 * x_1714) + x_1716);
        let x_1719 : vec4<f32> = u_xlat13;
        let x_1720 : vec2<f32> = vec2<f32>(x_1719.x, x_1719.y);
        let x_1722 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1720.x, x_1720.y, x_1722);
        let x_1729 : vec3<f32> = txVec25;
        let x_1731 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1729.xy, x_1729.z);
        u_xlat47.x = x_1731;
        let x_1734 : f32 = u_xlat9.x;
        let x_1736 : f32 = u_xlat47.x;
        let x_1738 : f32 = u_xlat68;
        u_xlat68 = ((x_1734 * x_1736) + x_1738);
        let x_1741 : vec4<f32> = u_xlat13;
        let x_1742 : vec2<f32> = vec2<f32>(x_1741.z, x_1741.w);
        let x_1744 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1742.x, x_1742.y, x_1744);
        let x_1751 : vec3<f32> = txVec26;
        let x_1753 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1751.xy, x_1751.z);
        u_xlat47.x = x_1753;
        let x_1756 : f32 = u_xlat9.y;
        let x_1758 : f32 = u_xlat47.x;
        let x_1760 : f32 = u_xlat68;
        u_xlat68 = ((x_1756 * x_1758) + x_1760);
        let x_1763 : vec2<f32> = u_xlat55;
        let x_1765 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1763.x, x_1763.y, x_1765);
        let x_1772 : vec3<f32> = txVec27;
        let x_1774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1772.xy, x_1772.z);
        u_xlat47.x = x_1774;
        let x_1777 : f32 = u_xlat9.z;
        let x_1779 : f32 = u_xlat47.x;
        let x_1781 : f32 = u_xlat68;
        u_xlat68 = ((x_1777 * x_1779) + x_1781);
        let x_1784 : vec4<f32> = u_xlat3;
        let x_1785 : vec2<f32> = vec2<f32>(x_1784.x, x_1784.y);
        let x_1787 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1785.x, x_1785.y, x_1787);
        let x_1794 : vec3<f32> = txVec28;
        let x_1796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1794.xy, x_1794.z);
        u_xlat3.x = x_1796;
        let x_1799 : f32 = u_xlat9.w;
        let x_1801 : f32 = u_xlat3.x;
        let x_1803 : f32 = u_xlat68;
        u_xlat67 = ((x_1799 * x_1801) + x_1803);
      }
    }
  } else {
    let x_1807 : vec4<f32> = u_xlat2;
    let x_1808 : vec2<f32> = vec2<f32>(x_1807.x, x_1807.y);
    let x_1810 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1808.x, x_1808.y, x_1810);
    let x_1817 : vec3<f32> = txVec29;
    let x_1819 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1817.xy, x_1817.z);
    u_xlat67 = x_1819;
  }
  let x_1821 : f32 = x_379.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1821) + 1.0f);
  let x_1824 : f32 = u_xlat67;
  let x_1826 : f32 = x_379.x_MainLightShadowParams.x;
  let x_1828 : f32 = u_xlat68;
  u_xlat67 = ((x_1824 * x_1826) + x_1828);
  let x_1832 : f32 = u_xlat2.z;
  u_xlatb3.x = (0.0f >= x_1832);
  let x_1837 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1837 >= 1.0f);
  let x_1839 : bool = u_xlatb25;
  let x_1841 : bool = u_xlatb3.x;
  u_xlatb3.x = (x_1839 | x_1841);
  let x_1845 : bool = u_xlatb3.x;
  let x_1846 : f32 = u_xlat67;
  u_xlat67 = select(x_1846, 1.0f, x_1845);
  let x_1848 : vec3<f32> = u_xlat1;
  let x_1850 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1848, -(vec3<f32>(x_1850.x, x_1850.y, x_1850.z)));
  let x_1856 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1856, 0.0f, 1.0f);
  let x_1860 : f32 = u_xlat67;
  let x_1863 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1860, x_1860, x_1860) * vec3<f32>(x_1863.x, x_1863.y, x_1863.z));
  let x_1866 : vec3<f32> = u_xlat23;
  let x_1867 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1866 * vec3<f32>(x_1867.x, x_1867.x, x_1867.x));
  let x_1870 : vec3<f32> = u_xlat1;
  let x_1871 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1870 * vec3<f32>(x_1871.x, x_1871.y, x_1871.z));
  let x_1875 : f32 = x_94.unity_LODFade.x;
  u_xlatb67 = (x_1875 < 0.0f);
  let x_1878 : f32 = x_94.unity_LODFade.x;
  u_xlat25 = (x_1878 + 1.0f);
  let x_1880 : bool = u_xlatb67;
  if (x_1880) {
    let x_1884 : f32 = u_xlat25;
    x_1881 = x_1884;
  } else {
    let x_1887 : f32 = x_94.unity_LODFade.x;
    x_1881 = x_1887;
  }
  let x_1888 : f32 = x_1881;
  u_xlat67 = x_1888;
  let x_1889 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1889);
  let x_1891 : vec4<f32> = u_xlat5;
  let x_1895 : vec4<f32> = x_160.x_ScreenParams;
  let x_1897 : vec3<f32> = (abs(vec3<f32>(x_1891.x, x_1891.y, x_1891.z)) * vec3<f32>(x_1895.x, x_1895.y, x_1895.x));
  let x_1898 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1897.x, x_1897.y, x_1897.z, x_1898.w);
  let x_1903 : vec4<f32> = u_xlat5;
  u_xlatu5 = vec3<u32>(vec3<f32>(x_1903.x, x_1903.y, x_1903.z));
  let x_1908 : u32 = u_xlatu5.z;
  u_xlatu47 = (x_1908 * 1025u);
  let x_1912 : u32 = u_xlatu47;
  u_xlatu69 = (x_1912 >> 6u);
  let x_1916 : u32 = u_xlatu69;
  let x_1917 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1916 ^ x_1917));
  let x_1920 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1920) * 9u);
  let x_1924 : u32 = u_xlatu47;
  u_xlatu69 = (x_1924 >> 11u);
  let x_1927 : u32 = u_xlatu69;
  let x_1928 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1927 ^ x_1928));
  let x_1931 : i32 = u_xlati47;
  u_xlati47 = (x_1931 * 32769i);
  let x_1934 : i32 = u_xlati47;
  let x_1937 : u32 = u_xlatu5.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1934) ^ x_1937));
  let x_1940 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1940) * 1025u);
  let x_1943 : u32 = u_xlatu47;
  u_xlatu69 = (x_1943 >> 6u);
  let x_1945 : u32 = u_xlatu69;
  let x_1946 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1945 ^ x_1946));
  let x_1949 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1949) * 9u);
  let x_1952 : u32 = u_xlatu47;
  u_xlatu69 = (x_1952 >> 11u);
  let x_1954 : u32 = u_xlatu69;
  let x_1955 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1954 ^ x_1955));
  let x_1958 : i32 = u_xlati47;
  u_xlati47 = (x_1958 * 32769i);
  let x_1960 : i32 = u_xlati47;
  let x_1963 : u32 = u_xlatu5.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1960) ^ x_1963));
  let x_1966 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1966) * 1025u);
  let x_1969 : u32 = u_xlatu47;
  u_xlatu69 = (x_1969 >> 6u);
  let x_1971 : u32 = u_xlatu69;
  let x_1972 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1971 ^ x_1972));
  let x_1975 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1975) * 9u);
  let x_1978 : u32 = u_xlatu47;
  u_xlatu69 = (x_1978 >> 11u);
  let x_1980 : u32 = u_xlatu69;
  let x_1981 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1980 ^ x_1981));
  let x_1984 : i32 = u_xlati47;
  u_xlati47 = (x_1984 * 32769i);
  param = 1065353216i;
  let x_1990 : i32 = u_xlati47;
  param_1 = x_1990;
  param_2 = 0i;
  param_3 = 23i;
  let x_1993 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_1993);
  let x_1997 : f32 = u_xlat47.x;
  u_xlat47.x = (x_1997 + -1.0f);
  let x_2002 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_2002) + 1.0f);
  let x_2005 : bool = u_xlatb25;
  if (x_2005) {
    let x_2010 : f32 = u_xlat47.x;
    x_2006 = x_2010;
  } else {
    let x_2012 : f32 = u_xlat69;
    x_2006 = x_2012;
  }
  let x_2013 : f32 = x_2006;
  u_xlat25 = x_2013;
  let x_2014 : f32 = u_xlat67;
  let x_2016 : f32 = u_xlat25;
  u_xlat67 = ((x_2014 * 2.0f) + -(x_2016));
  let x_2019 : f32 = u_xlat67;
  let x_2021 : f32 = u_xlat6.w;
  u_xlat25 = (x_2019 * x_2021);
  let x_2024 : f32 = u_xlat25;
  u_xlatb47 = (x_2024 >= 0.400000006f);
  let x_2027 : bool = u_xlatb47;
  let x_2028 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2028, x_2027);
  let x_2032 : f32 = u_xlat6.w;
  let x_2033 : f32 = u_xlat67;
  u_xlat67 = ((x_2032 * x_2033) + -0.400000006f);
  let x_2037 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2037);
  let x_2039 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2039);
  let x_2041 : f32 = u_xlat25;
  let x_2043 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2041) + abs(x_2043));
  let x_2046 : f32 = u_xlat25;
  u_xlat25 = max(x_2046, 0.0001f);
  let x_2049 : f32 = u_xlat67;
  let x_2050 : f32 = u_xlat25;
  u_xlat67 = (x_2049 / x_2050);
  let x_2052 : f32 = u_xlat67;
  u_xlat67 = (x_2052 + 0.5f);
  let x_2054 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2054, 0.0f, 1.0f);
  let x_2057 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2057 == 0.0f));
  let x_2059 : bool = u_xlatb25;
  if (x_2059) {
    let x_2063 : f32 = u_xlat67;
    x_2060 = x_2063;
  } else {
    let x_2066 : f32 = u_xlat47.x;
    x_2060 = x_2066;
  }
  let x_2067 : f32 = x_2060;
  u_xlat67 = x_2067;
  let x_2068 : f32 = u_xlat67;
  u_xlat47.x = (x_2068 + -0.0001f);
  let x_2073 : f32 = u_xlat47.x;
  u_xlatb47 = (x_2073 < 0.0f);
  let x_2075 : bool = u_xlatb47;
  if (((select(0i, 1i, x_2075) * -1i) != 0i)) {
    discard;
  }
  let x_2083 : vec3<f32> = u_xlat22;
  let x_2084 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2083 * vec3<f32>(x_2084.y, x_2084.y, x_2084.y));
  let x_2087 : vec3<f32> = u_xlat30;
  let x_2089 : vec4<f32> = vs_INTERP2;
  let x_2092 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2087.x, x_2087.x, x_2087.x) * vec3<f32>(x_2089.x, x_2089.y, x_2089.z)) + x_2092);
  let x_2094 : vec3<f32> = u_xlat30;
  let x_2096 : vec3<f32> = vs_INTERP1;
  let x_2098 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2094.z, x_2094.z, x_2094.z) * x_2096) + x_2098);
  let x_2100 : vec3<f32> = u_xlat22;
  let x_2101 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2100, x_2101);
  let x_2105 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2105);
  let x_2108 : vec3<f32> = u_xlat22;
  let x_2109 : vec2<f32> = u_xlat47;
  let x_2111 : vec3<f32> = (x_2108 * vec3<f32>(x_2109.x, x_2109.x, x_2109.x));
  let x_2112 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2111.x, x_2111.y, x_2111.z, x_2112.w);
  let x_2115 : f32 = vs_INTERP0.y;
  let x_2117 : f32 = x_160.unity_MatrixV[1i].z;
  u_xlat22.x = (x_2115 * x_2117);
  let x_2121 : f32 = x_160.unity_MatrixV[0i].z;
  let x_2123 : f32 = vs_INTERP0.x;
  let x_2126 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2121 * x_2123) + x_2126);
  let x_2130 : f32 = x_160.unity_MatrixV[2i].z;
  let x_2132 : f32 = vs_INTERP0.z;
  let x_2135 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2130 * x_2132) + x_2135);
  let x_2139 : f32 = u_xlat22.x;
  let x_2141 : f32 = x_160.unity_MatrixV[3i].z;
  u_xlat22.x = (x_2139 + x_2141);
  let x_2145 : f32 = u_xlat22.x;
  let x_2148 : f32 = x_160.x_ProjectionParams.y;
  u_xlat22.x = (-(x_2145) + -(x_2148));
  let x_2153 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_2153, 0.0f);
  let x_2157 : f32 = u_xlat22.x;
  let x_2160 : f32 = x_160.unity_FogParams.x;
  u_xlat22.x = (x_2157 * x_2160);
  u_xlat5.w = 1.0f;
  let x_2166 : vec4<f32> = x_94.unity_SHAr;
  let x_2167 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_2166, x_2167);
  let x_2172 : vec4<f32> = x_94.unity_SHAg;
  let x_2173 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_2172, x_2173);
  let x_2178 : vec4<f32> = x_94.unity_SHAb;
  let x_2179 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_2178, x_2179);
  let x_2182 : vec4<f32> = u_xlat5;
  let x_2184 : vec4<f32> = u_xlat5;
  u_xlat9 = (vec4<f32>(x_2182.y, x_2182.z, x_2182.z, x_2182.x) * vec4<f32>(x_2184.x, x_2184.y, x_2184.z, x_2184.z));
  let x_2189 : vec4<f32> = x_94.unity_SHBr;
  let x_2190 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_2189, x_2190);
  let x_2195 : vec4<f32> = x_94.unity_SHBg;
  let x_2196 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_2195, x_2196);
  let x_2200 : vec4<f32> = x_94.unity_SHBb;
  let x_2201 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_2200, x_2201);
  let x_2206 : f32 = u_xlat5.y;
  let x_2208 : f32 = u_xlat5.y;
  u_xlat44.x = (x_2206 * x_2208);
  let x_2212 : f32 = u_xlat5.x;
  let x_2214 : f32 = u_xlat5.x;
  let x_2217 : f32 = u_xlat44.x;
  u_xlat44.x = ((x_2212 * x_2214) + -(x_2217));
  let x_2223 : vec4<f32> = x_94.unity_SHC;
  let x_2225 : vec2<f32> = u_xlat44;
  let x_2228 : vec4<f32> = u_xlat10;
  u_xlat30 = ((vec3<f32>(x_2223.x, x_2223.y, x_2223.z) * vec3<f32>(x_2225.x, x_2225.x, x_2225.x)) + vec3<f32>(x_2228.x, x_2228.y, x_2228.z));
  let x_2231 : vec4<f32> = u_xlat6;
  let x_2233 : vec3<f32> = u_xlat30;
  let x_2234 : vec3<f32> = (vec3<f32>(x_2231.x, x_2231.y, x_2231.z) + x_2233);
  let x_2235 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2234.x, x_2234.y, x_2234.z, x_2235.w);
  let x_2237 : vec4<f32> = u_xlat6;
  let x_2239 : vec3<f32> = max(vec3<f32>(x_2237.x, x_2237.y, x_2237.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2240 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2239.x, x_2239.y, x_2239.z, x_2240.w);
  let x_2243 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2244 : vec2<f32> = vec2<f32>(x_2243.x, x_2243.y);
  u_xlat44 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2244.x, x_2244.y));
  let x_2249 : vec2<f32> = u_xlat44;
  let x_2250 : vec4<f32> = hlslcc_FragCoord;
  let x_2252 : vec2<f32> = (x_2249 * vec2<f32>(x_2250.x, x_2250.y));
  let x_2253 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2252.x, x_2252.y, x_2253.z, x_2253.w);
  let x_2256 : f32 = u_xlat9.y;
  let x_2259 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2262 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat44.x = ((x_2256 * x_2259) + x_2262);
  let x_2266 : f32 = u_xlat44.x;
  u_xlat9.z = (-(x_2266) + 1.0f);
  let x_2271 : f32 = u_xlat8.x;
  u_xlat8.x = x_2271;
  let x_2274 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2274, 0.0f, 1.0f);
  let x_2277 : f32 = u_xlat67;
  u_xlat67 = x_2277;
  let x_2278 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2278, 0.0f, 1.0f);
  let x_2280 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2280 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2285 : f32 = u_xlat8.x;
  u_xlat44.x = (-(x_2285) + 1.0f);
  let x_2291 : f32 = u_xlat44.x;
  let x_2293 : f32 = u_xlat44.x;
  u_xlat66 = (x_2291 * x_2293);
  let x_2295 : f32 = u_xlat66;
  u_xlat66 = max(x_2295, 0.0078125f);
  let x_2298 : f32 = u_xlat66;
  let x_2299 : f32 = u_xlat66;
  u_xlat47.x = (x_2298 * x_2299);
  let x_2303 : f32 = u_xlat8.x;
  u_xlat69 = (x_2303 + 0.040000021f);
  let x_2306 : f32 = u_xlat69;
  u_xlat69 = min(x_2306, 1.0f);
  let x_2308 : f32 = u_xlat66;
  u_xlat70 = ((x_2308 * 4.0f) + 2.0f);
  let x_2317 : vec4<f32> = u_xlat9;
  let x_2320 : f32 = x_160.x_GlobalMipBias.x;
  let x_2321 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2317.x, x_2317.z), x_2320);
  u_xlat71 = x_2321.x;
  let x_2324 : f32 = u_xlat71;
  u_xlat72 = (x_2324 + -1.0f);
  let x_2327 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2328 : f32 = u_xlat72;
  u_xlat72 = ((x_2327 * x_2328) + 1.0f);
  let x_2331 : f32 = u_xlat71;
  let x_2333 : f32 = vs_INTERP4.w;
  u_xlat71 = min(x_2331, x_2333);
  let x_2335 : bool = u_xlatb0;
  if (x_2335) {
    let x_2339 : f32 = x_379.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2339 == 1.0f);
    let x_2341 : bool = u_xlatb0;
    if (x_2341) {
      let x_2344 : vec4<f32> = u_xlat2;
      let x_2347 : vec4<f32> = x_379.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2344.x, x_2344.y, x_2344.x, x_2344.y) + x_2347);
      let x_2350 : vec4<f32> = u_xlat8;
      let x_2351 : vec2<f32> = vec2<f32>(x_2350.x, x_2350.y);
      let x_2353 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2351.x, x_2351.y, x_2353);
      let x_2360 : vec3<f32> = txVec30;
      let x_2362 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2360.xy, x_2360.z);
      u_xlat9.x = x_2362;
      let x_2365 : vec4<f32> = u_xlat8;
      let x_2366 : vec2<f32> = vec2<f32>(x_2365.z, x_2365.w);
      let x_2368 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2366.x, x_2366.y, x_2368);
      let x_2375 : vec3<f32> = txVec31;
      let x_2377 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2375.xy, x_2375.z);
      u_xlat9.y = x_2377;
      let x_2379 : vec4<f32> = u_xlat2;
      let x_2382 : vec4<f32> = x_379.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2379.x, x_2379.y, x_2379.x, x_2379.y) + x_2382);
      let x_2385 : vec4<f32> = u_xlat8;
      let x_2386 : vec2<f32> = vec2<f32>(x_2385.x, x_2385.y);
      let x_2388 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2386.x, x_2386.y, x_2388);
      let x_2395 : vec3<f32> = txVec32;
      let x_2397 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2395.xy, x_2395.z);
      u_xlat9.z = x_2397;
      let x_2400 : vec4<f32> = u_xlat8;
      let x_2401 : vec2<f32> = vec2<f32>(x_2400.z, x_2400.w);
      let x_2403 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2401.x, x_2401.y, x_2403);
      let x_2410 : vec3<f32> = txVec33;
      let x_2412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2410.xy, x_2410.z);
      u_xlat9.w = x_2412;
      let x_2414 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2414, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2420 : f32 = x_379.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2420 == 2.0f);
      let x_2422 : bool = u_xlatb73;
      if (x_2422) {
        let x_2425 : vec4<f32> = u_xlat2;
        let x_2428 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2431 : vec2<f32> = ((vec2<f32>(x_2425.x, x_2425.y) * vec2<f32>(x_2428.z, x_2428.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2432 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2431.x, x_2431.y, x_2432.z, x_2432.w);
        let x_2434 : vec4<f32> = u_xlat8;
        let x_2436 : vec2<f32> = floor(vec2<f32>(x_2434.x, x_2434.y));
        let x_2437 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2436.x, x_2436.y, x_2437.z, x_2437.w);
        let x_2440 : vec4<f32> = u_xlat2;
        let x_2443 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2446 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2440.x, x_2440.y) * vec2<f32>(x_2443.z, x_2443.w)) + -(vec2<f32>(x_2446.x, x_2446.y)));
        let x_2450 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2450.x, x_2450.x, x_2450.y, x_2450.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2453 : vec4<f32> = u_xlat9;
        let x_2455 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2453.x, x_2453.x, x_2453.z, x_2453.z) * vec4<f32>(x_2455.x, x_2455.x, x_2455.z, x_2455.z));
        let x_2458 : vec4<f32> = u_xlat10;
        let x_2460 : vec2<f32> = (vec2<f32>(x_2458.y, x_2458.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2461 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2460.x, x_2461.y, x_2460.y, x_2461.w);
        let x_2463 : vec4<f32> = u_xlat10;
        let x_2466 : vec2<f32> = u_xlat52;
        let x_2468 : vec2<f32> = ((vec2<f32>(x_2463.x, x_2463.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2466));
        let x_2469 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2468.x, x_2468.y, x_2469.z, x_2469.w);
        let x_2471 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2471) + vec2<f32>(1.0f, 1.0f));
        let x_2474 : vec2<f32> = u_xlat52;
        let x_2475 : vec2<f32> = min(x_2474, vec2<f32>(0.0f, 0.0f));
        let x_2476 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2475.x, x_2475.y, x_2476.z, x_2476.w);
        let x_2478 : vec4<f32> = u_xlat11;
        let x_2481 : vec4<f32> = u_xlat11;
        let x_2484 : vec2<f32> = u_xlat54;
        let x_2485 : vec2<f32> = ((-(vec2<f32>(x_2478.x, x_2478.y)) * vec2<f32>(x_2481.x, x_2481.y)) + x_2484);
        let x_2486 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2485.x, x_2485.y, x_2486.z, x_2486.w);
        let x_2488 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2488, vec2<f32>(0.0f, 0.0f));
        let x_2490 : vec2<f32> = u_xlat52;
        let x_2492 : vec2<f32> = u_xlat52;
        let x_2494 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2490) * x_2492) + vec2<f32>(x_2494.y, x_2494.w));
        let x_2497 : vec4<f32> = u_xlat11;
        let x_2499 : vec2<f32> = (vec2<f32>(x_2497.x, x_2497.y) + vec2<f32>(1.0f, 1.0f));
        let x_2500 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2499.x, x_2499.y, x_2500.z, x_2500.w);
        let x_2502 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2502 + vec2<f32>(1.0f, 1.0f));
        let x_2504 : vec4<f32> = u_xlat10;
        let x_2506 : vec2<f32> = (vec2<f32>(x_2504.x, x_2504.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2507 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2506.x, x_2506.y, x_2507.z, x_2507.w);
        let x_2509 : vec2<f32> = u_xlat54;
        let x_2510 : vec2<f32> = (x_2509 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2511 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2510.x, x_2510.y, x_2511.z, x_2511.w);
        let x_2513 : vec4<f32> = u_xlat11;
        let x_2515 : vec2<f32> = (vec2<f32>(x_2513.x, x_2513.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2516 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2515.x, x_2515.y, x_2516.z, x_2516.w);
        let x_2518 : vec2<f32> = u_xlat52;
        let x_2519 : vec2<f32> = (x_2518 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2520 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2519.x, x_2519.y, x_2520.z, x_2520.w);
        let x_2522 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2522.y, x_2522.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2526 : f32 = u_xlat11.x;
        u_xlat12.z = x_2526;
        let x_2529 : f32 = u_xlat52.x;
        u_xlat12.w = x_2529;
        let x_2532 : f32 = u_xlat13.x;
        u_xlat10.z = x_2532;
        let x_2535 : f32 = u_xlat9.x;
        u_xlat10.w = x_2535;
        let x_2537 : vec4<f32> = u_xlat10;
        let x_2539 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2537.z, x_2537.w, x_2537.x, x_2537.z) + vec4<f32>(x_2539.z, x_2539.w, x_2539.x, x_2539.z));
        let x_2543 : f32 = u_xlat12.y;
        u_xlat11.z = x_2543;
        let x_2546 : f32 = u_xlat52.y;
        u_xlat11.w = x_2546;
        let x_2549 : f32 = u_xlat10.y;
        u_xlat13.z = x_2549;
        let x_2552 : f32 = u_xlat9.z;
        u_xlat13.w = x_2552;
        let x_2554 : vec4<f32> = u_xlat11;
        let x_2556 : vec4<f32> = u_xlat13;
        let x_2558 : vec3<f32> = (vec3<f32>(x_2554.z, x_2554.y, x_2554.w) + vec3<f32>(x_2556.z, x_2556.y, x_2556.w));
        let x_2559 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2558.x, x_2558.y, x_2558.z, x_2559.w);
        let x_2561 : vec4<f32> = u_xlat10;
        let x_2563 : vec4<f32> = u_xlat14;
        let x_2565 : vec3<f32> = (vec3<f32>(x_2561.x, x_2561.z, x_2561.w) / vec3<f32>(x_2563.z, x_2563.w, x_2563.y));
        let x_2566 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2565.x, x_2565.y, x_2565.z, x_2566.w);
        let x_2568 : vec4<f32> = u_xlat10;
        let x_2570 : vec3<f32> = (vec3<f32>(x_2568.x, x_2568.y, x_2568.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2571 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2570.x, x_2570.y, x_2570.z, x_2571.w);
        let x_2573 : vec4<f32> = u_xlat13;
        let x_2575 : vec4<f32> = u_xlat9;
        let x_2577 : vec3<f32> = (vec3<f32>(x_2573.z, x_2573.y, x_2573.w) / vec3<f32>(x_2575.x, x_2575.y, x_2575.z));
        let x_2578 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2577.x, x_2577.y, x_2577.z, x_2578.w);
        let x_2580 : vec4<f32> = u_xlat11;
        let x_2582 : vec3<f32> = (vec3<f32>(x_2580.x, x_2580.y, x_2580.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2583 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2582.x, x_2582.y, x_2582.z, x_2583.w);
        let x_2585 : vec4<f32> = u_xlat10;
        let x_2588 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2590 : vec3<f32> = (vec3<f32>(x_2585.y, x_2585.x, x_2585.z) * vec3<f32>(x_2588.x, x_2588.x, x_2588.x));
        let x_2591 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2590.x, x_2590.y, x_2590.z, x_2591.w);
        let x_2593 : vec4<f32> = u_xlat11;
        let x_2596 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2598 : vec3<f32> = (vec3<f32>(x_2593.x, x_2593.y, x_2593.z) * vec3<f32>(x_2596.y, x_2596.y, x_2596.y));
        let x_2599 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2598.x, x_2598.y, x_2598.z, x_2599.w);
        let x_2602 : f32 = u_xlat11.x;
        u_xlat10.w = x_2602;
        let x_2604 : vec4<f32> = u_xlat8;
        let x_2607 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2610 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2604.x, x_2604.y, x_2604.x, x_2604.y) * vec4<f32>(x_2607.x, x_2607.y, x_2607.x, x_2607.y)) + vec4<f32>(x_2610.y, x_2610.w, x_2610.x, x_2610.w));
        let x_2613 : vec4<f32> = u_xlat8;
        let x_2616 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2619 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2613.x, x_2613.y) * vec2<f32>(x_2616.x, x_2616.y)) + vec2<f32>(x_2619.z, x_2619.w));
        let x_2623 : f32 = u_xlat10.y;
        u_xlat11.w = x_2623;
        let x_2625 : vec4<f32> = u_xlat11;
        let x_2626 : vec2<f32> = vec2<f32>(x_2625.y, x_2625.z);
        let x_2627 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2627.x, x_2626.x, x_2627.z, x_2626.y);
        let x_2629 : vec4<f32> = u_xlat8;
        let x_2632 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2635 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2629.x, x_2629.y, x_2629.x, x_2629.y) * vec4<f32>(x_2632.x, x_2632.y, x_2632.x, x_2632.y)) + vec4<f32>(x_2635.x, x_2635.y, x_2635.z, x_2635.y));
        let x_2638 : vec4<f32> = u_xlat8;
        let x_2641 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2644 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2638.x, x_2638.y, x_2638.x, x_2638.y) * vec4<f32>(x_2641.x, x_2641.y, x_2641.x, x_2641.y)) + vec4<f32>(x_2644.w, x_2644.y, x_2644.w, x_2644.z));
        let x_2647 : vec4<f32> = u_xlat8;
        let x_2650 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2653 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2647.x, x_2647.y, x_2647.x, x_2647.y) * vec4<f32>(x_2650.x, x_2650.y, x_2650.x, x_2650.y)) + vec4<f32>(x_2653.x, x_2653.w, x_2653.z, x_2653.w));
        let x_2656 : vec4<f32> = u_xlat9;
        let x_2658 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2656.x, x_2656.x, x_2656.x, x_2656.y) * vec4<f32>(x_2658.z, x_2658.w, x_2658.y, x_2658.z));
        let x_2661 : vec4<f32> = u_xlat9;
        let x_2663 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2661.y, x_2661.y, x_2661.z, x_2661.z) * x_2663);
        let x_2667 : f32 = u_xlat9.z;
        let x_2669 : f32 = u_xlat14.y;
        u_xlat73 = (x_2667 * x_2669);
        let x_2672 : vec4<f32> = u_xlat12;
        let x_2673 : vec2<f32> = vec2<f32>(x_2672.x, x_2672.y);
        let x_2675 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2673.x, x_2673.y, x_2675);
        let x_2682 : vec3<f32> = txVec34;
        let x_2684 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2682.xy, x_2682.z);
        u_xlat8.x = x_2684;
        let x_2687 : vec4<f32> = u_xlat12;
        let x_2688 : vec2<f32> = vec2<f32>(x_2687.z, x_2687.w);
        let x_2690 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2688.x, x_2688.y, x_2690);
        let x_2697 : vec3<f32> = txVec35;
        let x_2699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2697.xy, x_2697.z);
        u_xlat30.x = x_2699;
        let x_2702 : f32 = u_xlat30.x;
        let x_2704 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2702 * x_2704);
        let x_2708 : f32 = u_xlat15.x;
        let x_2710 : f32 = u_xlat8.x;
        let x_2713 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2708 * x_2710) + x_2713);
        let x_2717 : vec2<f32> = u_xlat52;
        let x_2719 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2717.x, x_2717.y, x_2719);
        let x_2726 : vec3<f32> = txVec36;
        let x_2728 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2726.xy, x_2726.z);
        u_xlat30.x = x_2728;
        let x_2731 : f32 = u_xlat15.z;
        let x_2733 : f32 = u_xlat30.x;
        let x_2736 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2731 * x_2733) + x_2736);
        let x_2740 : vec4<f32> = u_xlat11;
        let x_2741 : vec2<f32> = vec2<f32>(x_2740.x, x_2740.y);
        let x_2743 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2741.x, x_2741.y, x_2743);
        let x_2750 : vec3<f32> = txVec37;
        let x_2752 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2750.xy, x_2750.z);
        u_xlat30.x = x_2752;
        let x_2755 : f32 = u_xlat15.w;
        let x_2757 : f32 = u_xlat30.x;
        let x_2760 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2755 * x_2757) + x_2760);
        let x_2764 : vec4<f32> = u_xlat13;
        let x_2765 : vec2<f32> = vec2<f32>(x_2764.x, x_2764.y);
        let x_2767 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2765.x, x_2765.y, x_2767);
        let x_2774 : vec3<f32> = txVec38;
        let x_2776 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2774.xy, x_2774.z);
        u_xlat30.x = x_2776;
        let x_2779 : f32 = u_xlat16.x;
        let x_2781 : f32 = u_xlat30.x;
        let x_2784 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2779 * x_2781) + x_2784);
        let x_2788 : vec4<f32> = u_xlat13;
        let x_2789 : vec2<f32> = vec2<f32>(x_2788.z, x_2788.w);
        let x_2791 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2789.x, x_2789.y, x_2791);
        let x_2798 : vec3<f32> = txVec39;
        let x_2800 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2798.xy, x_2798.z);
        u_xlat30.x = x_2800;
        let x_2803 : f32 = u_xlat16.y;
        let x_2805 : f32 = u_xlat30.x;
        let x_2808 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2803 * x_2805) + x_2808);
        let x_2812 : vec4<f32> = u_xlat11;
        let x_2813 : vec2<f32> = vec2<f32>(x_2812.z, x_2812.w);
        let x_2815 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2813.x, x_2813.y, x_2815);
        let x_2822 : vec3<f32> = txVec40;
        let x_2824 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2822.xy, x_2822.z);
        u_xlat30.x = x_2824;
        let x_2827 : f32 = u_xlat16.z;
        let x_2829 : f32 = u_xlat30.x;
        let x_2832 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2827 * x_2829) + x_2832);
        let x_2836 : vec4<f32> = u_xlat10;
        let x_2837 : vec2<f32> = vec2<f32>(x_2836.x, x_2836.y);
        let x_2839 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2837.x, x_2837.y, x_2839);
        let x_2846 : vec3<f32> = txVec41;
        let x_2848 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2846.xy, x_2846.z);
        u_xlat30.x = x_2848;
        let x_2851 : f32 = u_xlat16.w;
        let x_2853 : f32 = u_xlat30.x;
        let x_2856 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2851 * x_2853) + x_2856);
        let x_2860 : vec4<f32> = u_xlat10;
        let x_2861 : vec2<f32> = vec2<f32>(x_2860.z, x_2860.w);
        let x_2863 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2861.x, x_2861.y, x_2863);
        let x_2870 : vec3<f32> = txVec42;
        let x_2872 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2870.xy, x_2870.z);
        u_xlat30.x = x_2872;
        let x_2874 : f32 = u_xlat73;
        let x_2876 : f32 = u_xlat30.x;
        let x_2879 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_2874 * x_2876) + x_2879);
      } else {
        let x_2883 : vec4<f32> = u_xlat2;
        let x_2886 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2889 : vec2<f32> = ((vec2<f32>(x_2883.x, x_2883.y) * vec2<f32>(x_2886.z, x_2886.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2890 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2889.x, x_2889.y, x_2890.z, x_2890.w);
        let x_2892 : vec4<f32> = u_xlat8;
        let x_2894 : vec2<f32> = floor(vec2<f32>(x_2892.x, x_2892.y));
        let x_2895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2894.x, x_2894.y, x_2895.z, x_2895.w);
        let x_2897 : vec4<f32> = u_xlat2;
        let x_2900 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2903 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2897.x, x_2897.y) * vec2<f32>(x_2900.z, x_2900.w)) + -(vec2<f32>(x_2903.x, x_2903.y)));
        let x_2907 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2907.x, x_2907.x, x_2907.y, x_2907.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2910 : vec4<f32> = u_xlat9;
        let x_2912 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2910.x, x_2910.x, x_2910.z, x_2910.z) * vec4<f32>(x_2912.x, x_2912.x, x_2912.z, x_2912.z));
        let x_2915 : vec4<f32> = u_xlat10;
        let x_2917 : vec2<f32> = (vec2<f32>(x_2915.y, x_2915.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2918 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2918.x, x_2917.x, x_2918.z, x_2917.y);
        let x_2920 : vec4<f32> = u_xlat10;
        let x_2923 : vec2<f32> = u_xlat52;
        let x_2925 : vec2<f32> = ((vec2<f32>(x_2920.x, x_2920.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2923));
        let x_2926 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2925.x, x_2926.y, x_2925.y, x_2926.w);
        let x_2928 : vec2<f32> = u_xlat52;
        let x_2930 : vec2<f32> = (-(x_2928) + vec2<f32>(1.0f, 1.0f));
        let x_2931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2930.x, x_2930.y, x_2931.z, x_2931.w);
        let x_2933 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2933, vec2<f32>(0.0f, 0.0f));
        let x_2935 : vec2<f32> = u_xlat54;
        let x_2937 : vec2<f32> = u_xlat54;
        let x_2939 : vec4<f32> = u_xlat10;
        let x_2941 : vec2<f32> = ((-(x_2935) * x_2937) + vec2<f32>(x_2939.x, x_2939.y));
        let x_2942 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2941.x, x_2941.y, x_2942.z, x_2942.w);
        let x_2944 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2944, vec2<f32>(0.0f, 0.0f));
        let x_2946 : vec2<f32> = u_xlat54;
        let x_2948 : vec2<f32> = u_xlat54;
        let x_2950 : vec4<f32> = u_xlat9;
        let x_2952 : vec2<f32> = ((-(x_2946) * x_2948) + vec2<f32>(x_2950.y, x_2950.w));
        let x_2953 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2952.x, x_2953.y, x_2952.y);
        let x_2955 : vec4<f32> = u_xlat10;
        let x_2957 : vec2<f32> = (vec2<f32>(x_2955.x, x_2955.y) + vec2<f32>(2.0f, 2.0f));
        let x_2958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2957.x, x_2957.y, x_2958.z, x_2958.w);
        let x_2960 : vec3<f32> = u_xlat31;
        let x_2962 : vec2<f32> = (vec2<f32>(x_2960.x, x_2960.z) + vec2<f32>(2.0f, 2.0f));
        let x_2963 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2963.x, x_2962.x, x_2963.z, x_2962.y);
        let x_2966 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2966 * 0.081632003f);
        let x_2969 : vec4<f32> = u_xlat9;
        let x_2971 : vec3<f32> = (vec3<f32>(x_2969.z, x_2969.x, x_2969.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2972 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2971.x, x_2971.y, x_2971.z, x_2972.w);
        let x_2974 : vec4<f32> = u_xlat10;
        let x_2976 : vec2<f32> = (vec2<f32>(x_2974.x, x_2974.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2977 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2976.x, x_2976.y, x_2977.z, x_2977.w);
        let x_2980 : f32 = u_xlat13.y;
        u_xlat12.x = x_2980;
        let x_2982 : vec2<f32> = u_xlat52;
        let x_2985 : vec2<f32> = ((vec2<f32>(x_2982.x, x_2982.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2986 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2986.x, x_2985.x, x_2986.z, x_2985.y);
        let x_2988 : vec2<f32> = u_xlat52;
        let x_2991 : vec2<f32> = ((vec2<f32>(x_2988.x, x_2988.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2992 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2991.x, x_2992.y, x_2991.y, x_2992.w);
        let x_2995 : f32 = u_xlat9.x;
        u_xlat10.y = x_2995;
        let x_2998 : f32 = u_xlat11.y;
        u_xlat10.w = x_2998;
        let x_3000 : vec4<f32> = u_xlat10;
        let x_3001 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_3000 + x_3001);
        let x_3003 : vec2<f32> = u_xlat52;
        let x_3006 : vec2<f32> = ((vec2<f32>(x_3003.y, x_3003.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_3007 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_3007.x, x_3006.x, x_3007.z, x_3006.y);
        let x_3009 : vec2<f32> = u_xlat52;
        let x_3012 : vec2<f32> = ((vec2<f32>(x_3009.y, x_3009.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_3013 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3012.x, x_3013.y, x_3012.y, x_3013.w);
        let x_3016 : f32 = u_xlat9.y;
        u_xlat11.y = x_3016;
        let x_3018 : vec4<f32> = u_xlat11;
        let x_3019 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_3018 + x_3019);
        let x_3021 : vec4<f32> = u_xlat10;
        let x_3022 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_3021 / x_3022);
        let x_3024 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_3024 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_3026 : vec4<f32> = u_xlat11;
        let x_3027 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_3026 / x_3027);
        let x_3029 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_3029 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_3031 : vec4<f32> = u_xlat10;
        let x_3034 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_3031.w, x_3031.x, x_3031.y, x_3031.z) * vec4<f32>(x_3034.x, x_3034.x, x_3034.x, x_3034.x));
        let x_3037 : vec4<f32> = u_xlat11;
        let x_3040 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_3037.x, x_3037.w, x_3037.y, x_3037.z) * vec4<f32>(x_3040.y, x_3040.y, x_3040.y, x_3040.y));
        let x_3043 : vec4<f32> = u_xlat10;
        let x_3044 : vec3<f32> = vec3<f32>(x_3043.y, x_3043.z, x_3043.w);
        let x_3045 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_3044.x, x_3045.y, x_3044.y, x_3044.z);
        let x_3048 : f32 = u_xlat11.x;
        u_xlat13.y = x_3048;
        let x_3050 : vec4<f32> = u_xlat8;
        let x_3053 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3056 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_3050.x, x_3050.y, x_3050.x, x_3050.y) * vec4<f32>(x_3053.x, x_3053.y, x_3053.x, x_3053.y)) + vec4<f32>(x_3056.x, x_3056.y, x_3056.z, x_3056.y));
        let x_3059 : vec4<f32> = u_xlat8;
        let x_3062 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3065 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_3059.x, x_3059.y) * vec2<f32>(x_3062.x, x_3062.y)) + vec2<f32>(x_3065.w, x_3065.y));
        let x_3069 : f32 = u_xlat13.y;
        u_xlat10.y = x_3069;
        let x_3072 : f32 = u_xlat11.z;
        u_xlat13.y = x_3072;
        let x_3074 : vec4<f32> = u_xlat8;
        let x_3077 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3080 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3074.x, x_3074.y, x_3074.x, x_3074.y) * vec4<f32>(x_3077.x, x_3077.y, x_3077.x, x_3077.y)) + vec4<f32>(x_3080.x, x_3080.y, x_3080.z, x_3080.y));
        let x_3083 : vec4<f32> = u_xlat8;
        let x_3086 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3089 : vec4<f32> = u_xlat13;
        let x_3091 : vec2<f32> = ((vec2<f32>(x_3083.x, x_3083.y) * vec2<f32>(x_3086.x, x_3086.y)) + vec2<f32>(x_3089.w, x_3089.y));
        let x_3092 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3091.x, x_3091.y, x_3092.z, x_3092.w);
        let x_3095 : f32 = u_xlat13.y;
        u_xlat10.z = x_3095;
        let x_3097 : vec4<f32> = u_xlat8;
        let x_3100 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3103 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3097.x, x_3097.y, x_3097.x, x_3097.y) * vec4<f32>(x_3100.x, x_3100.y, x_3100.x, x_3100.y)) + vec4<f32>(x_3103.x, x_3103.y, x_3103.x, x_3103.z));
        let x_3107 : f32 = u_xlat11.w;
        u_xlat13.y = x_3107;
        let x_3109 : vec4<f32> = u_xlat8;
        let x_3112 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3115 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3109.x, x_3109.y, x_3109.x, x_3109.y) * vec4<f32>(x_3112.x, x_3112.y, x_3112.x, x_3112.y)) + vec4<f32>(x_3115.x, x_3115.y, x_3115.z, x_3115.y));
        let x_3118 : vec4<f32> = u_xlat8;
        let x_3121 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3124 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3118.x, x_3118.y) * vec2<f32>(x_3121.x, x_3121.y)) + vec2<f32>(x_3124.w, x_3124.y));
        let x_3128 : f32 = u_xlat13.y;
        u_xlat10.w = x_3128;
        let x_3130 : vec4<f32> = u_xlat8;
        let x_3133 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3136 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3130.x, x_3130.y) * vec2<f32>(x_3133.x, x_3133.y)) + vec2<f32>(x_3136.x, x_3136.w));
        let x_3139 : vec4<f32> = u_xlat13;
        let x_3140 : vec3<f32> = vec3<f32>(x_3139.x, x_3139.z, x_3139.w);
        let x_3141 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3140.x, x_3141.y, x_3140.y, x_3140.z);
        let x_3143 : vec4<f32> = u_xlat8;
        let x_3146 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3149 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3143.x, x_3143.y, x_3143.x, x_3143.y) * vec4<f32>(x_3146.x, x_3146.y, x_3146.x, x_3146.y)) + vec4<f32>(x_3149.x, x_3149.y, x_3149.z, x_3149.y));
        let x_3152 : vec4<f32> = u_xlat8;
        let x_3155 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3158 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3152.x, x_3152.y) * vec2<f32>(x_3155.x, x_3155.y)) + vec2<f32>(x_3158.w, x_3158.y));
        let x_3162 : f32 = u_xlat10.x;
        u_xlat11.x = x_3162;
        let x_3164 : vec4<f32> = u_xlat8;
        let x_3167 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3170 : vec4<f32> = u_xlat11;
        let x_3172 : vec2<f32> = ((vec2<f32>(x_3164.x, x_3164.y) * vec2<f32>(x_3167.x, x_3167.y)) + vec2<f32>(x_3170.x, x_3170.y));
        let x_3173 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3172.x, x_3172.y, x_3173.z, x_3173.w);
        let x_3175 : vec4<f32> = u_xlat9;
        let x_3177 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3175.x, x_3175.x, x_3175.x, x_3175.x) * x_3177);
        let x_3179 : vec4<f32> = u_xlat9;
        let x_3181 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3179.y, x_3179.y, x_3179.y, x_3179.y) * x_3181);
        let x_3183 : vec4<f32> = u_xlat9;
        let x_3185 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3183.z, x_3183.z, x_3183.z, x_3183.z) * x_3185);
        let x_3187 : vec4<f32> = u_xlat9;
        let x_3189 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3187.w, x_3187.w, x_3187.w, x_3187.w) * x_3189);
        let x_3192 : vec4<f32> = u_xlat14;
        let x_3193 : vec2<f32> = vec2<f32>(x_3192.x, x_3192.y);
        let x_3195 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3193.x, x_3193.y, x_3195);
        let x_3202 : vec3<f32> = txVec43;
        let x_3204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3202.xy, x_3202.z);
        u_xlat73 = x_3204;
        let x_3206 : vec4<f32> = u_xlat14;
        let x_3207 : vec2<f32> = vec2<f32>(x_3206.z, x_3206.w);
        let x_3209 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3207.x, x_3207.y, x_3209);
        let x_3216 : vec3<f32> = txVec44;
        let x_3218 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3216.xy, x_3216.z);
        u_xlat10.x = x_3218;
        let x_3221 : f32 = u_xlat10.x;
        let x_3223 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3221 * x_3223);
        let x_3227 : f32 = u_xlat19.x;
        let x_3228 : f32 = u_xlat73;
        let x_3231 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3227 * x_3228) + x_3231);
        let x_3234 : vec2<f32> = u_xlat52;
        let x_3236 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3234.x, x_3234.y, x_3236);
        let x_3243 : vec3<f32> = txVec45;
        let x_3245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3243.xy, x_3243.z);
        u_xlat52.x = x_3245;
        let x_3248 : f32 = u_xlat19.z;
        let x_3250 : f32 = u_xlat52.x;
        let x_3252 : f32 = u_xlat73;
        u_xlat73 = ((x_3248 * x_3250) + x_3252);
        let x_3255 : vec4<f32> = u_xlat17;
        let x_3256 : vec2<f32> = vec2<f32>(x_3255.x, x_3255.y);
        let x_3258 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3256.x, x_3256.y, x_3258);
        let x_3265 : vec3<f32> = txVec46;
        let x_3267 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3265.xy, x_3265.z);
        u_xlat52.x = x_3267;
        let x_3270 : f32 = u_xlat19.w;
        let x_3272 : f32 = u_xlat52.x;
        let x_3274 : f32 = u_xlat73;
        u_xlat73 = ((x_3270 * x_3272) + x_3274);
        let x_3277 : vec4<f32> = u_xlat15;
        let x_3278 : vec2<f32> = vec2<f32>(x_3277.x, x_3277.y);
        let x_3280 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3278.x, x_3278.y, x_3280);
        let x_3287 : vec3<f32> = txVec47;
        let x_3289 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3287.xy, x_3287.z);
        u_xlat52.x = x_3289;
        let x_3292 : f32 = u_xlat20.x;
        let x_3294 : f32 = u_xlat52.x;
        let x_3296 : f32 = u_xlat73;
        u_xlat73 = ((x_3292 * x_3294) + x_3296);
        let x_3299 : vec4<f32> = u_xlat15;
        let x_3300 : vec2<f32> = vec2<f32>(x_3299.z, x_3299.w);
        let x_3302 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3300.x, x_3300.y, x_3302);
        let x_3309 : vec3<f32> = txVec48;
        let x_3311 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3309.xy, x_3309.z);
        u_xlat52.x = x_3311;
        let x_3314 : f32 = u_xlat20.y;
        let x_3316 : f32 = u_xlat52.x;
        let x_3318 : f32 = u_xlat73;
        u_xlat73 = ((x_3314 * x_3316) + x_3318);
        let x_3321 : vec4<f32> = u_xlat16;
        let x_3322 : vec2<f32> = vec2<f32>(x_3321.x, x_3321.y);
        let x_3324 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3322.x, x_3322.y, x_3324);
        let x_3331 : vec3<f32> = txVec49;
        let x_3333 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3331.xy, x_3331.z);
        u_xlat52.x = x_3333;
        let x_3336 : f32 = u_xlat20.z;
        let x_3338 : f32 = u_xlat52.x;
        let x_3340 : f32 = u_xlat73;
        u_xlat73 = ((x_3336 * x_3338) + x_3340);
        let x_3343 : vec4<f32> = u_xlat17;
        let x_3344 : vec2<f32> = vec2<f32>(x_3343.z, x_3343.w);
        let x_3346 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3344.x, x_3344.y, x_3346);
        let x_3353 : vec3<f32> = txVec50;
        let x_3355 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3353.xy, x_3353.z);
        u_xlat52.x = x_3355;
        let x_3358 : f32 = u_xlat20.w;
        let x_3360 : f32 = u_xlat52.x;
        let x_3362 : f32 = u_xlat73;
        u_xlat73 = ((x_3358 * x_3360) + x_3362);
        let x_3365 : vec4<f32> = u_xlat18;
        let x_3366 : vec2<f32> = vec2<f32>(x_3365.x, x_3365.y);
        let x_3368 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3366.x, x_3366.y, x_3368);
        let x_3375 : vec3<f32> = txVec51;
        let x_3377 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3375.xy, x_3375.z);
        u_xlat52.x = x_3377;
        let x_3380 : f32 = u_xlat21.x;
        let x_3382 : f32 = u_xlat52.x;
        let x_3384 : f32 = u_xlat73;
        u_xlat73 = ((x_3380 * x_3382) + x_3384);
        let x_3387 : vec4<f32> = u_xlat18;
        let x_3388 : vec2<f32> = vec2<f32>(x_3387.z, x_3387.w);
        let x_3390 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3388.x, x_3388.y, x_3390);
        let x_3397 : vec3<f32> = txVec52;
        let x_3399 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3397.xy, x_3397.z);
        u_xlat52.x = x_3399;
        let x_3402 : f32 = u_xlat21.y;
        let x_3404 : f32 = u_xlat52.x;
        let x_3406 : f32 = u_xlat73;
        u_xlat73 = ((x_3402 * x_3404) + x_3406);
        let x_3409 : vec2<f32> = u_xlat32;
        let x_3411 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3409.x, x_3409.y, x_3411);
        let x_3418 : vec3<f32> = txVec53;
        let x_3420 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3418.xy, x_3418.z);
        u_xlat52.x = x_3420;
        let x_3423 : f32 = u_xlat21.z;
        let x_3425 : f32 = u_xlat52.x;
        let x_3427 : f32 = u_xlat73;
        u_xlat73 = ((x_3423 * x_3425) + x_3427);
        let x_3430 : vec2<f32> = u_xlat60;
        let x_3432 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3430.x, x_3430.y, x_3432);
        let x_3439 : vec3<f32> = txVec54;
        let x_3441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3439.xy, x_3439.z);
        u_xlat52.x = x_3441;
        let x_3444 : f32 = u_xlat21.w;
        let x_3446 : f32 = u_xlat52.x;
        let x_3448 : f32 = u_xlat73;
        u_xlat73 = ((x_3444 * x_3446) + x_3448);
        let x_3451 : vec4<f32> = u_xlat13;
        let x_3452 : vec2<f32> = vec2<f32>(x_3451.x, x_3451.y);
        let x_3454 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3452.x, x_3452.y, x_3454);
        let x_3461 : vec3<f32> = txVec55;
        let x_3463 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3461.xy, x_3461.z);
        u_xlat52.x = x_3463;
        let x_3466 : f32 = u_xlat9.x;
        let x_3468 : f32 = u_xlat52.x;
        let x_3470 : f32 = u_xlat73;
        u_xlat73 = ((x_3466 * x_3468) + x_3470);
        let x_3473 : vec4<f32> = u_xlat13;
        let x_3474 : vec2<f32> = vec2<f32>(x_3473.z, x_3473.w);
        let x_3476 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3474.x, x_3474.y, x_3476);
        let x_3483 : vec3<f32> = txVec56;
        let x_3485 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3483.xy, x_3483.z);
        u_xlat52.x = x_3485;
        let x_3488 : f32 = u_xlat9.y;
        let x_3490 : f32 = u_xlat52.x;
        let x_3492 : f32 = u_xlat73;
        u_xlat73 = ((x_3488 * x_3490) + x_3492);
        let x_3495 : vec2<f32> = u_xlat55;
        let x_3497 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3495.x, x_3495.y, x_3497);
        let x_3504 : vec3<f32> = txVec57;
        let x_3506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3504.xy, x_3504.z);
        u_xlat52.x = x_3506;
        let x_3509 : f32 = u_xlat9.z;
        let x_3511 : f32 = u_xlat52.x;
        let x_3513 : f32 = u_xlat73;
        u_xlat73 = ((x_3509 * x_3511) + x_3513);
        let x_3516 : vec4<f32> = u_xlat8;
        let x_3517 : vec2<f32> = vec2<f32>(x_3516.x, x_3516.y);
        let x_3519 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3517.x, x_3517.y, x_3519);
        let x_3526 : vec3<f32> = txVec58;
        let x_3528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3526.xy, x_3526.z);
        u_xlat8.x = x_3528;
        let x_3531 : f32 = u_xlat9.w;
        let x_3533 : f32 = u_xlat8.x;
        let x_3535 : f32 = u_xlat73;
        u_xlat0.x = ((x_3531 * x_3533) + x_3535);
      }
    }
  } else {
    let x_3540 : vec4<f32> = u_xlat2;
    let x_3541 : vec2<f32> = vec2<f32>(x_3540.x, x_3540.y);
    let x_3543 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3541.x, x_3541.y, x_3543);
    let x_3550 : vec3<f32> = txVec59;
    let x_3552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3550.xy, x_3550.z);
    u_xlat0.x = x_3552;
  }
  let x_3555 : f32 = u_xlat0.x;
  let x_3557 : f32 = x_379.x_MainLightShadowParams.x;
  let x_3559 : f32 = u_xlat68;
  u_xlat0.x = ((x_3555 * x_3557) + x_3559);
  let x_3563 : bool = u_xlatb3.x;
  if (x_3563) {
    x_3564 = 1.0f;
  } else {
    let x_3569 : f32 = u_xlat0.x;
    x_3564 = x_3569;
  }
  let x_3570 : f32 = x_3564;
  u_xlat0.x = x_3570;
  let x_3572 : vec3<f32> = vs_INTERP0;
  let x_3574 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3576 : vec3<f32> = (x_3572 + -(x_3574));
  let x_3577 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3576.x, x_3576.y, x_3576.z, x_3577.w);
  let x_3579 : vec4<f32> = u_xlat2;
  let x_3581 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3579.x, x_3579.y, x_3579.z), vec3<f32>(x_3581.x, x_3581.y, x_3581.z));
  let x_3586 : f32 = u_xlat2.x;
  let x_3588 : f32 = x_379.x_MainLightShadowParams.z;
  let x_3591 : f32 = x_379.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3586 * x_3588) + x_3591);
  let x_3595 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3595, 0.0f, 1.0f);
  let x_3600 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3600) + 1.0f);
  let x_3604 : f32 = u_xlat2.x;
  let x_3605 : f32 = u_xlat24;
  let x_3608 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3604 * x_3605) + x_3608);
  let x_3617 : f32 = x_3615.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3617 == -1.0f));
  let x_3621 : bool = u_xlatb2.x;
  if (x_3621) {
    let x_3624 : vec3<f32> = vs_INTERP0;
    let x_3627 : vec4<f32> = x_3615.x_MainLightWorldToLight[1i];
    let x_3629 : vec2<f32> = (vec2<f32>(x_3624.y, x_3624.y) * vec2<f32>(x_3627.x, x_3627.y));
    let x_3630 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3629.x, x_3629.y, x_3630.z, x_3630.w);
    let x_3633 : vec4<f32> = x_3615.x_MainLightWorldToLight[0i];
    let x_3635 : vec3<f32> = vs_INTERP0;
    let x_3638 : vec4<f32> = u_xlat2;
    let x_3640 : vec2<f32> = ((vec2<f32>(x_3633.x, x_3633.y) * vec2<f32>(x_3635.x, x_3635.x)) + vec2<f32>(x_3638.x, x_3638.y));
    let x_3641 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3640.x, x_3640.y, x_3641.z, x_3641.w);
    let x_3644 : vec4<f32> = x_3615.x_MainLightWorldToLight[2i];
    let x_3646 : vec3<f32> = vs_INTERP0;
    let x_3649 : vec4<f32> = u_xlat2;
    let x_3651 : vec2<f32> = ((vec2<f32>(x_3644.x, x_3644.y) * vec2<f32>(x_3646.z, x_3646.z)) + vec2<f32>(x_3649.x, x_3649.y));
    let x_3652 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3651.x, x_3651.y, x_3652.z, x_3652.w);
    let x_3654 : vec4<f32> = u_xlat2;
    let x_3657 : vec4<f32> = x_3615.x_MainLightWorldToLight[3i];
    let x_3659 : vec2<f32> = (vec2<f32>(x_3654.x, x_3654.y) + vec2<f32>(x_3657.x, x_3657.y));
    let x_3660 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3659.x, x_3659.y, x_3660.z, x_3660.w);
    let x_3662 : vec4<f32> = u_xlat2;
    let x_3665 : vec2<f32> = ((vec2<f32>(x_3662.x, x_3662.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3666 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3665.x, x_3665.y, x_3666.z, x_3666.w);
    let x_3673 : vec4<f32> = u_xlat2;
    let x_3676 : f32 = x_160.x_GlobalMipBias.x;
    let x_3677 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3673.x, x_3673.y), x_3676);
    u_xlat2 = x_3677;
    let x_3680 : f32 = x_3615.x_MainLightCookieTextureFormat;
    let x_3682 : f32 = x_3615.x_MainLightCookieTextureFormat;
    let x_3684 : f32 = x_3615.x_MainLightCookieTextureFormat;
    let x_3686 : f32 = x_3615.x_MainLightCookieTextureFormat;
    let x_3687 : vec4<f32> = vec4<f32>(x_3680, x_3682, x_3684, x_3686);
    let x_3694 : vec4<bool> = (vec4<f32>(x_3687.x, x_3687.y, x_3687.z, x_3687.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3694.x, x_3694.y);
    let x_3697 : bool = u_xlatb8.y;
    if (x_3697) {
      let x_3702 : f32 = u_xlat2.w;
      x_3698 = x_3702;
    } else {
      let x_3705 : f32 = u_xlat2.x;
      x_3698 = x_3705;
    }
    let x_3706 : f32 = x_3698;
    u_xlat68 = x_3706;
    let x_3708 : bool = u_xlatb8.x;
    if (x_3708) {
      let x_3712 : vec4<f32> = u_xlat2;
      x_3709 = vec3<f32>(x_3712.x, x_3712.y, x_3712.z);
    } else {
      let x_3715 : f32 = u_xlat68;
      x_3709 = vec3<f32>(x_3715, x_3715, x_3715);
    }
    let x_3717 : vec3<f32> = x_3709;
    let x_3718 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3717.x, x_3717.y, x_3717.z, x_3718.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3724 : vec4<f32> = u_xlat2;
  let x_3727 : vec4<f32> = x_160.x_MainLightColor;
  let x_3729 : vec3<f32> = (vec3<f32>(x_3724.x, x_3724.y, x_3724.z) * vec3<f32>(x_3727.x, x_3727.y, x_3727.z));
  let x_3730 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3729.x, x_3729.y, x_3729.z, x_3730.w);
  let x_3732 : f32 = u_xlat72;
  let x_3734 : vec4<f32> = u_xlat2;
  let x_3736 : vec3<f32> = (vec3<f32>(x_3732, x_3732, x_3732) * vec3<f32>(x_3734.x, x_3734.y, x_3734.z));
  let x_3737 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3736.x, x_3736.y, x_3736.z, x_3737.w);
  let x_3739 : vec3<f32> = u_xlat4;
  let x_3741 : vec4<f32> = u_xlat5;
  u_xlat68 = dot(-(x_3739), vec3<f32>(x_3741.x, x_3741.y, x_3741.z));
  let x_3744 : f32 = u_xlat68;
  let x_3745 : f32 = u_xlat68;
  u_xlat68 = (x_3744 + x_3745);
  let x_3747 : vec4<f32> = u_xlat5;
  let x_3749 : f32 = u_xlat68;
  let x_3753 : vec3<f32> = u_xlat4;
  let x_3755 : vec3<f32> = ((vec3<f32>(x_3747.x, x_3747.y, x_3747.z) * -(vec3<f32>(x_3749, x_3749, x_3749))) + -(x_3753));
  let x_3756 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3755.x, x_3755.y, x_3755.z, x_3756.w);
  let x_3758 : vec4<f32> = u_xlat5;
  let x_3760 : vec3<f32> = u_xlat4;
  u_xlat68 = dot(vec3<f32>(x_3758.x, x_3758.y, x_3758.z), x_3760);
  let x_3762 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3762, 0.0f, 1.0f);
  let x_3764 : f32 = u_xlat68;
  u_xlat68 = (-(x_3764) + 1.0f);
  let x_3767 : f32 = u_xlat68;
  let x_3768 : f32 = u_xlat68;
  u_xlat68 = (x_3767 * x_3768);
  let x_3770 : f32 = u_xlat68;
  let x_3771 : f32 = u_xlat68;
  u_xlat68 = (x_3770 * x_3771);
  let x_3774 : f32 = u_xlat44.x;
  u_xlat3.x = ((-(x_3774) * 0.699999988f) + 1.700000048f);
  let x_3782 : f32 = u_xlat44.x;
  let x_3784 : f32 = u_xlat3.x;
  u_xlat44.x = (x_3782 * x_3784);
  let x_3788 : f32 = u_xlat44.x;
  u_xlat44.x = (x_3788 * 6.0f);
  let x_3800 : vec4<f32> = u_xlat8;
  let x_3803 : f32 = u_xlat44.x;
  let x_3804 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3800.x, x_3800.y, x_3800.z), x_3803);
  u_xlat8 = x_3804;
  let x_3806 : f32 = u_xlat8.w;
  u_xlat44.x = (x_3806 + -1.0f);
  let x_3810 : f32 = x_94.unity_SpecCube0_HDR.w;
  let x_3812 : f32 = u_xlat44.x;
  u_xlat44.x = ((x_3810 * x_3812) + 1.0f);
  let x_3817 : f32 = u_xlat44.x;
  u_xlat44.x = max(x_3817, 0.0f);
  let x_3821 : f32 = u_xlat44.x;
  u_xlat44.x = log2(x_3821);
  let x_3825 : f32 = u_xlat44.x;
  let x_3827 : f32 = x_94.unity_SpecCube0_HDR.y;
  u_xlat44.x = (x_3825 * x_3827);
  let x_3831 : f32 = u_xlat44.x;
  u_xlat44.x = exp2(x_3831);
  let x_3835 : f32 = u_xlat44.x;
  let x_3837 : f32 = x_94.unity_SpecCube0_HDR.x;
  u_xlat44.x = (x_3835 * x_3837);
  let x_3840 : vec4<f32> = u_xlat8;
  let x_3842 : vec2<f32> = u_xlat44;
  let x_3844 : vec3<f32> = (vec3<f32>(x_3840.x, x_3840.y, x_3840.z) * vec3<f32>(x_3842.x, x_3842.x, x_3842.x));
  let x_3845 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3844.x, x_3844.y, x_3844.z, x_3845.w);
  let x_3847 : f32 = u_xlat66;
  let x_3849 : f32 = u_xlat66;
  u_xlat44 = ((vec2<f32>(x_3847, x_3847) * vec2<f32>(x_3849, x_3849)) + vec2<f32>(-1.0f, 1.0f));
  let x_3855 : f32 = u_xlat44.y;
  u_xlat66 = (1.0f / x_3855);
  let x_3857 : f32 = u_xlat69;
  u_xlat3.x = (x_3857 + -0.039999999f);
  let x_3861 : f32 = u_xlat68;
  let x_3863 : f32 = u_xlat3.x;
  u_xlat68 = ((x_3861 * x_3863) + 0.039999999f);
  let x_3867 : f32 = u_xlat66;
  let x_3868 : f32 = u_xlat68;
  u_xlat66 = (x_3867 * x_3868);
  let x_3870 : f32 = u_xlat66;
  let x_3872 : vec4<f32> = u_xlat8;
  let x_3874 : vec3<f32> = (vec3<f32>(x_3870, x_3870, x_3870) * vec3<f32>(x_3872.x, x_3872.y, x_3872.z));
  let x_3875 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3874.x, x_3874.y, x_3874.z, x_3875.w);
  let x_3877 : vec4<f32> = u_xlat6;
  let x_3879 : vec3<f32> = u_xlat7;
  let x_3881 : vec4<f32> = u_xlat8;
  let x_3883 : vec3<f32> = ((vec3<f32>(x_3877.x, x_3877.y, x_3877.z) * x_3879) + vec3<f32>(x_3881.x, x_3881.y, x_3881.z));
  let x_3884 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3883.x, x_3883.y, x_3883.z, x_3884.w);
  let x_3887 : f32 = u_xlat0.x;
  let x_3889 : f32 = x_94.unity_LightData.z;
  u_xlat0.x = (x_3887 * x_3889);
  let x_3892 : vec4<f32> = u_xlat5;
  let x_3895 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat66 = dot(vec3<f32>(x_3892.x, x_3892.y, x_3892.z), vec3<f32>(x_3895.x, x_3895.y, x_3895.z));
  let x_3898 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3898, 0.0f, 1.0f);
  let x_3900 : f32 = u_xlat66;
  let x_3902 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3900 * x_3902);
  let x_3905 : vec4<f32> = u_xlat0;
  let x_3907 : vec4<f32> = u_xlat2;
  let x_3909 : vec3<f32> = (vec3<f32>(x_3905.x, x_3905.x, x_3905.x) * vec3<f32>(x_3907.x, x_3907.y, x_3907.z));
  let x_3910 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3909.x, x_3909.y, x_3909.z, x_3910.w);
  let x_3912 : vec3<f32> = u_xlat4;
  let x_3914 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3916 : vec3<f32> = (x_3912 + vec3<f32>(x_3914.x, x_3914.y, x_3914.z));
  let x_3917 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3916.x, x_3916.y, x_3916.z, x_3917.w);
  let x_3919 : vec4<f32> = u_xlat8;
  let x_3921 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3919.x, x_3919.y, x_3919.z), vec3<f32>(x_3921.x, x_3921.y, x_3921.z));
  let x_3926 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3926, 1.17549435e-37f);
  let x_3930 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3930);
  let x_3933 : vec4<f32> = u_xlat0;
  let x_3935 : vec4<f32> = u_xlat8;
  let x_3937 : vec3<f32> = (vec3<f32>(x_3933.x, x_3933.x, x_3933.x) * vec3<f32>(x_3935.x, x_3935.y, x_3935.z));
  let x_3938 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3937.x, x_3937.y, x_3937.z, x_3938.w);
  let x_3940 : vec4<f32> = u_xlat5;
  let x_3942 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3940.x, x_3940.y, x_3940.z), vec3<f32>(x_3942.x, x_3942.y, x_3942.z));
  let x_3947 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3947, 0.0f, 1.0f);
  let x_3951 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3953 : vec4<f32> = u_xlat8;
  u_xlat0.w = dot(vec3<f32>(x_3951.x, x_3951.y, x_3951.z), vec3<f32>(x_3953.x, x_3953.y, x_3953.z));
  let x_3958 : f32 = u_xlat0.w;
  u_xlat0.w = clamp(x_3958, 0.0f, 1.0f);
  let x_3961 : vec4<f32> = u_xlat0;
  let x_3963 : vec4<f32> = u_xlat0;
  let x_3965 : vec2<f32> = (vec2<f32>(x_3961.x, x_3961.w) * vec2<f32>(x_3963.x, x_3963.w));
  let x_3966 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3965.x, x_3966.y, x_3966.z, x_3965.y);
  let x_3969 : f32 = u_xlat0.x;
  let x_3971 : f32 = u_xlat44.x;
  u_xlat0.x = ((x_3969 * x_3971) + 1.000010014f);
  let x_3977 : f32 = u_xlat0.x;
  let x_3979 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3977 * x_3979);
  let x_3983 : f32 = u_xlat0.w;
  u_xlat66 = max(x_3983, 0.100000001f);
  let x_3986 : f32 = u_xlat66;
  let x_3988 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3986 * x_3988);
  let x_3991 : f32 = u_xlat70;
  let x_3993 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3991 * x_3993);
  let x_3997 : f32 = u_xlat47.x;
  let x_3999 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3997 / x_3999);
  let x_4002 : vec4<f32> = u_xlat0;
  let x_4006 : vec3<f32> = u_xlat7;
  let x_4007 : vec3<f32> = ((vec3<f32>(x_4002.x, x_4002.x, x_4002.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4006);
  let x_4008 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_4007.x, x_4007.y, x_4007.z, x_4008.w);
  let x_4010 : vec4<f32> = u_xlat2;
  let x_4012 : vec4<f32> = u_xlat8;
  let x_4014 : vec3<f32> = (vec3<f32>(x_4010.x, x_4010.y, x_4010.z) * vec3<f32>(x_4012.x, x_4012.y, x_4012.z));
  let x_4015 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_4014.x, x_4014.y, x_4014.z, x_4015.w);
  let x_4018 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_4020 : f32 = x_94.unity_LightData.y;
  u_xlat0.x = min(x_4018, x_4020);
  let x_4024 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_4024));
  let x_4028 : f32 = x_3615.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_4030 : f32 = x_3615.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_4032 : f32 = x_3615.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_4034 : f32 = x_3615.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_4035 : vec4<f32> = vec4<f32>(x_4028, x_4030, x_4032, x_4034);
  let x_4042 : vec4<bool> = (vec4<f32>(x_4035.x, x_4035.y, x_4035.z, x_4035.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_4043 : vec2<bool> = vec2<bool>(x_4042.x, x_4042.w);
  let x_4044 : vec4<bool> = u_xlatb3;
  u_xlatb3 = vec4<bool>(x_4043.x, x_4044.y, x_4044.z, x_4043.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_4055 : u32 = u_xlatu_loop_1;
    let x_4056 : u32 = u_xlatu0;
    if ((x_4055 < x_4056)) {
    } else {
      break;
    }
    let x_4059 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_4059 >> 2u);
    let x_4062 : u32 = u_xlatu_loop_1;
    u_xlati73 = bitcast<i32>((x_4062 & 3u));
    let x_4065 : u32 = u_xlatu68;
    let x_4068 : vec4<f32> = x_94.unity_LightIndices[bitcast<i32>(x_4065)];
    let x_4078 : i32 = u_xlati73;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_4083 : vec4<u32> = indexable[x_4078];
    u_xlat68 = dot(x_4068, bitcast<vec4<f32>>(x_4083));
    let x_4086 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_4086));
    let x_4089 : vec3<f32> = vs_INTERP0;
    let x_4101 : u32 = u_xlatu68;
    let x_4104 : vec4<f32> = x_4100.x_AdditionalLightsPosition[bitcast<i32>(x_4101)];
    let x_4107 : u32 = u_xlatu68;
    let x_4110 : vec4<f32> = x_4100.x_AdditionalLightsPosition[bitcast<i32>(x_4107)];
    let x_4112 : vec3<f32> = ((-(x_4089) * vec3<f32>(x_4104.w, x_4104.w, x_4104.w)) + vec3<f32>(x_4110.x, x_4110.y, x_4110.z));
    let x_4113 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4112.x, x_4112.y, x_4112.z, x_4113.w);
    let x_4115 : vec4<f32> = u_xlat9;
    let x_4117 : vec4<f32> = u_xlat9;
    u_xlat73 = dot(vec3<f32>(x_4115.x, x_4115.y, x_4115.z), vec3<f32>(x_4117.x, x_4117.y, x_4117.z));
    let x_4120 : f32 = u_xlat73;
    u_xlat73 = max(x_4120, 6.10351562e-05f);
    let x_4124 : f32 = u_xlat73;
    u_xlat74 = inverseSqrt(x_4124);
    let x_4126 : f32 = u_xlat74;
    let x_4128 : vec4<f32> = u_xlat9;
    let x_4130 : vec3<f32> = (vec3<f32>(x_4126, x_4126, x_4126) * vec3<f32>(x_4128.x, x_4128.y, x_4128.z));
    let x_4131 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4130.x, x_4130.y, x_4130.z, x_4131.w);
    let x_4134 : f32 = u_xlat73;
    u_xlat75 = (1.0f / x_4134);
    let x_4136 : f32 = u_xlat73;
    let x_4137 : u32 = u_xlatu68;
    let x_4140 : f32 = x_4100.x_AdditionalLightsAttenuation[bitcast<i32>(x_4137)].x;
    u_xlat73 = (x_4136 * x_4140);
    let x_4142 : f32 = u_xlat73;
    let x_4144 : f32 = u_xlat73;
    u_xlat73 = ((-(x_4142) * x_4144) + 1.0f);
    let x_4147 : f32 = u_xlat73;
    u_xlat73 = max(x_4147, 0.0f);
    let x_4149 : f32 = u_xlat73;
    let x_4150 : f32 = u_xlat73;
    u_xlat73 = (x_4149 * x_4150);
    let x_4152 : f32 = u_xlat73;
    let x_4153 : f32 = u_xlat75;
    u_xlat73 = (x_4152 * x_4153);
    let x_4155 : u32 = u_xlatu68;
    let x_4158 : vec4<f32> = x_4100.x_AdditionalLightsSpotDir[bitcast<i32>(x_4155)];
    let x_4160 : vec4<f32> = u_xlat10;
    u_xlat75 = dot(vec3<f32>(x_4158.x, x_4158.y, x_4158.z), vec3<f32>(x_4160.x, x_4160.y, x_4160.z));
    let x_4163 : f32 = u_xlat75;
    let x_4164 : u32 = u_xlatu68;
    let x_4167 : f32 = x_4100.x_AdditionalLightsAttenuation[bitcast<i32>(x_4164)].z;
    let x_4169 : u32 = u_xlatu68;
    let x_4172 : f32 = x_4100.x_AdditionalLightsAttenuation[bitcast<i32>(x_4169)].w;
    u_xlat75 = ((x_4163 * x_4167) + x_4172);
    let x_4174 : f32 = u_xlat75;
    u_xlat75 = clamp(x_4174, 0.0f, 1.0f);
    let x_4176 : f32 = u_xlat75;
    let x_4177 : f32 = u_xlat75;
    u_xlat75 = (x_4176 * x_4177);
    let x_4179 : f32 = u_xlat73;
    let x_4180 : f32 = u_xlat75;
    u_xlat73 = (x_4179 * x_4180);
    let x_4183 : u32 = u_xlatu68;
    u_xlatu75 = (x_4183 >> 5u);
    let x_4186 : u32 = u_xlatu68;
    u_xlati76 = (1i << bitcast<u32>((bitcast<i32>(x_4186) & 31i)));
    let x_4192 : i32 = u_xlati76;
    let x_4194 : u32 = u_xlatu75;
    let x_4197 : f32 = x_3615.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4194)].el;
    u_xlati75 = bitcast<i32>((bitcast<u32>(x_4192) & bitcast<u32>(x_4197)));
    let x_4201 : i32 = u_xlati75;
    if ((x_4201 != 0i)) {
      let x_4211 : u32 = u_xlatu68;
      let x_4214 : f32 = x_4210.x_AdditionalLightsLightTypes[bitcast<i32>(x_4211)].el;
      u_xlati75 = i32(x_4214);
      let x_4216 : i32 = u_xlati75;
      u_xlati76 = select(1i, 0i, (x_4216 != 0i));
      let x_4220 : u32 = u_xlatu68;
      u_xlati11 = (bitcast<i32>(x_4220) << bitcast<u32>(2i));
      let x_4223 : i32 = u_xlati76;
      if ((x_4223 != 0i)) {
        let x_4228 : vec3<f32> = vs_INTERP0;
        let x_4230 : i32 = u_xlati11;
        let x_4233 : i32 = u_xlati11;
        let x_4237 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4230 + 1i) / 4i)][((x_4233 + 1i) % 4i)];
        u_xlat33 = (vec3<f32>(x_4228.y, x_4228.y, x_4228.y) * vec3<f32>(x_4237.x, x_4237.y, x_4237.w));
        let x_4240 : i32 = u_xlati11;
        let x_4242 : i32 = u_xlati11;
        let x_4245 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[(x_4240 / 4i)][(x_4242 % 4i)];
        let x_4247 : vec3<f32> = vs_INTERP0;
        let x_4250 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4245.x, x_4245.y, x_4245.w) * vec3<f32>(x_4247.x, x_4247.x, x_4247.x)) + x_4250);
        let x_4252 : i32 = u_xlati11;
        let x_4255 : i32 = u_xlati11;
        let x_4259 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4252 + 2i) / 4i)][((x_4255 + 2i) % 4i)];
        let x_4261 : vec3<f32> = vs_INTERP0;
        let x_4264 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4259.x, x_4259.y, x_4259.w) * vec3<f32>(x_4261.z, x_4261.z, x_4261.z)) + x_4264);
        let x_4266 : vec3<f32> = u_xlat33;
        let x_4267 : i32 = u_xlati11;
        let x_4270 : i32 = u_xlati11;
        let x_4274 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4267 + 3i) / 4i)][((x_4270 + 3i) % 4i)];
        u_xlat33 = (x_4266 + vec3<f32>(x_4274.x, x_4274.y, x_4274.w));
        let x_4277 : vec3<f32> = u_xlat33;
        let x_4279 : vec3<f32> = u_xlat33;
        let x_4281 : vec2<f32> = (vec2<f32>(x_4277.x, x_4277.y) / vec2<f32>(x_4279.z, x_4279.z));
        let x_4282 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4281.x, x_4281.y, x_4282.z);
        let x_4284 : vec3<f32> = u_xlat33;
        let x_4287 : vec2<f32> = ((vec2<f32>(x_4284.x, x_4284.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4288 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4287.x, x_4287.y, x_4288.z);
        let x_4290 : vec3<f32> = u_xlat33;
        let x_4294 : vec2<f32> = clamp(vec2<f32>(x_4290.x, x_4290.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4295 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4294.x, x_4294.y, x_4295.z);
        let x_4297 : u32 = u_xlatu68;
        let x_4300 : vec4<f32> = x_4210.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4297)];
        let x_4302 : vec3<f32> = u_xlat33;
        let x_4305 : u32 = u_xlatu68;
        let x_4308 : vec4<f32> = x_4210.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4305)];
        let x_4310 : vec2<f32> = ((vec2<f32>(x_4300.x, x_4300.y) * vec2<f32>(x_4302.x, x_4302.y)) + vec2<f32>(x_4308.z, x_4308.w));
        let x_4311 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4310.x, x_4310.y, x_4311.z);
      } else {
        let x_4315 : i32 = u_xlati75;
        u_xlatb75 = (x_4315 == 1i);
        let x_4317 : bool = u_xlatb75;
        u_xlati75 = select(0i, 1i, x_4317);
        let x_4319 : i32 = u_xlati75;
        if ((x_4319 != 0i)) {
          let x_4323 : vec3<f32> = vs_INTERP0;
          let x_4325 : i32 = u_xlati11;
          let x_4328 : i32 = u_xlati11;
          let x_4332 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4325 + 1i) / 4i)][((x_4328 + 1i) % 4i)];
          let x_4334 : vec2<f32> = (vec2<f32>(x_4323.y, x_4323.y) * vec2<f32>(x_4332.x, x_4332.y));
          let x_4335 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4334.x, x_4334.y, x_4335.z, x_4335.w);
          let x_4337 : i32 = u_xlati11;
          let x_4339 : i32 = u_xlati11;
          let x_4342 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[(x_4337 / 4i)][(x_4339 % 4i)];
          let x_4344 : vec3<f32> = vs_INTERP0;
          let x_4347 : vec4<f32> = u_xlat12;
          let x_4349 : vec2<f32> = ((vec2<f32>(x_4342.x, x_4342.y) * vec2<f32>(x_4344.x, x_4344.x)) + vec2<f32>(x_4347.x, x_4347.y));
          let x_4350 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4349.x, x_4349.y, x_4350.z, x_4350.w);
          let x_4352 : i32 = u_xlati11;
          let x_4355 : i32 = u_xlati11;
          let x_4359 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4352 + 2i) / 4i)][((x_4355 + 2i) % 4i)];
          let x_4361 : vec3<f32> = vs_INTERP0;
          let x_4364 : vec4<f32> = u_xlat12;
          let x_4366 : vec2<f32> = ((vec2<f32>(x_4359.x, x_4359.y) * vec2<f32>(x_4361.z, x_4361.z)) + vec2<f32>(x_4364.x, x_4364.y));
          let x_4367 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4366.x, x_4366.y, x_4367.z, x_4367.w);
          let x_4369 : vec4<f32> = u_xlat12;
          let x_4371 : i32 = u_xlati11;
          let x_4374 : i32 = u_xlati11;
          let x_4378 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4371 + 3i) / 4i)][((x_4374 + 3i) % 4i)];
          let x_4380 : vec2<f32> = (vec2<f32>(x_4369.x, x_4369.y) + vec2<f32>(x_4378.x, x_4378.y));
          let x_4381 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4380.x, x_4380.y, x_4381.z, x_4381.w);
          let x_4383 : vec4<f32> = u_xlat12;
          let x_4386 : vec2<f32> = ((vec2<f32>(x_4383.x, x_4383.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4387 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4386.x, x_4386.y, x_4387.z, x_4387.w);
          let x_4389 : vec4<f32> = u_xlat12;
          let x_4391 : vec2<f32> = fract(vec2<f32>(x_4389.x, x_4389.y));
          let x_4392 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4391.x, x_4391.y, x_4392.z, x_4392.w);
          let x_4394 : u32 = u_xlatu68;
          let x_4397 : vec4<f32> = x_4210.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4394)];
          let x_4399 : vec4<f32> = u_xlat12;
          let x_4402 : u32 = u_xlatu68;
          let x_4405 : vec4<f32> = x_4210.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4402)];
          let x_4407 : vec2<f32> = ((vec2<f32>(x_4397.x, x_4397.y) * vec2<f32>(x_4399.x, x_4399.y)) + vec2<f32>(x_4405.z, x_4405.w));
          let x_4408 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4407.x, x_4407.y, x_4408.z);
        } else {
          let x_4411 : vec3<f32> = vs_INTERP0;
          let x_4413 : i32 = u_xlati11;
          let x_4416 : i32 = u_xlati11;
          let x_4420 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4413 + 1i) / 4i)][((x_4416 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4411.y, x_4411.y, x_4411.y, x_4411.y) * x_4420);
          let x_4422 : i32 = u_xlati11;
          let x_4424 : i32 = u_xlati11;
          let x_4427 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[(x_4422 / 4i)][(x_4424 % 4i)];
          let x_4428 : vec3<f32> = vs_INTERP0;
          let x_4431 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4427 * vec4<f32>(x_4428.x, x_4428.x, x_4428.x, x_4428.x)) + x_4431);
          let x_4433 : i32 = u_xlati11;
          let x_4436 : i32 = u_xlati11;
          let x_4440 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4433 + 2i) / 4i)][((x_4436 + 2i) % 4i)];
          let x_4441 : vec3<f32> = vs_INTERP0;
          let x_4444 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4440 * vec4<f32>(x_4441.z, x_4441.z, x_4441.z, x_4441.z)) + x_4444);
          let x_4446 : vec4<f32> = u_xlat12;
          let x_4447 : i32 = u_xlati11;
          let x_4450 : i32 = u_xlati11;
          let x_4454 : vec4<f32> = x_4210.x_AdditionalLightsWorldToLights[((x_4447 + 3i) / 4i)][((x_4450 + 3i) % 4i)];
          u_xlat12 = (x_4446 + x_4454);
          let x_4456 : vec4<f32> = u_xlat12;
          let x_4458 : vec4<f32> = u_xlat12;
          let x_4460 : vec3<f32> = (vec3<f32>(x_4456.x, x_4456.y, x_4456.z) / vec3<f32>(x_4458.w, x_4458.w, x_4458.w));
          let x_4461 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4460.x, x_4460.y, x_4460.z, x_4461.w);
          let x_4463 : vec4<f32> = u_xlat12;
          let x_4465 : vec4<f32> = u_xlat12;
          u_xlat75 = dot(vec3<f32>(x_4463.x, x_4463.y, x_4463.z), vec3<f32>(x_4465.x, x_4465.y, x_4465.z));
          let x_4468 : f32 = u_xlat75;
          u_xlat75 = inverseSqrt(x_4468);
          let x_4470 : f32 = u_xlat75;
          let x_4472 : vec4<f32> = u_xlat12;
          let x_4474 : vec3<f32> = (vec3<f32>(x_4470, x_4470, x_4470) * vec3<f32>(x_4472.x, x_4472.y, x_4472.z));
          let x_4475 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4474.x, x_4474.y, x_4474.z, x_4475.w);
          let x_4477 : vec4<f32> = u_xlat12;
          u_xlat75 = dot(abs(vec3<f32>(x_4477.x, x_4477.y, x_4477.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4482 : f32 = u_xlat75;
          u_xlat75 = max(x_4482, 0.000001f);
          let x_4485 : f32 = u_xlat75;
          u_xlat75 = (1.0f / x_4485);
          let x_4487 : f32 = u_xlat75;
          let x_4489 : vec4<f32> = u_xlat12;
          let x_4491 : vec3<f32> = (vec3<f32>(x_4487, x_4487, x_4487) * vec3<f32>(x_4489.z, x_4489.x, x_4489.y));
          let x_4492 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4491.x, x_4491.y, x_4491.z, x_4492.w);
          let x_4495 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4495);
          let x_4499 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4499, 0.0f, 1.0f);
          let x_4503 : vec4<f32> = u_xlat13;
          let x_4506 : vec4<bool> = (vec4<f32>(x_4503.y, x_4503.y, x_4503.y, x_4503.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4507 : vec2<bool> = vec2<bool>(x_4506.x, x_4506.w);
          let x_4508 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4507.x, x_4508.y, x_4508.z, x_4507.y);
          let x_4511 : bool = u_xlatb11.x;
          if (x_4511) {
            let x_4516 : f32 = u_xlat13.x;
            x_4512 = x_4516;
          } else {
            let x_4519 : f32 = u_xlat13.x;
            x_4512 = -(x_4519);
          }
          let x_4521 : f32 = x_4512;
          u_xlat11.x = x_4521;
          let x_4524 : bool = u_xlatb11.w;
          if (x_4524) {
            let x_4529 : f32 = u_xlat13.x;
            x_4525 = x_4529;
          } else {
            let x_4532 : f32 = u_xlat13.x;
            x_4525 = -(x_4532);
          }
          let x_4534 : f32 = x_4525;
          u_xlat11.w = x_4534;
          let x_4536 : vec4<f32> = u_xlat12;
          let x_4538 : f32 = u_xlat75;
          let x_4541 : vec4<f32> = u_xlat11;
          let x_4543 : vec2<f32> = ((vec2<f32>(x_4536.x, x_4536.y) * vec2<f32>(x_4538, x_4538)) + vec2<f32>(x_4541.x, x_4541.w));
          let x_4544 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4543.x, x_4544.y, x_4544.z, x_4543.y);
          let x_4546 : vec4<f32> = u_xlat11;
          let x_4549 : vec2<f32> = ((vec2<f32>(x_4546.x, x_4546.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4550 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4549.x, x_4550.y, x_4550.z, x_4549.y);
          let x_4552 : vec4<f32> = u_xlat11;
          let x_4556 : vec2<f32> = clamp(vec2<f32>(x_4552.x, x_4552.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4557 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4556.x, x_4557.y, x_4557.z, x_4556.y);
          let x_4559 : u32 = u_xlatu68;
          let x_4562 : vec4<f32> = x_4210.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4559)];
          let x_4564 : vec4<f32> = u_xlat11;
          let x_4567 : u32 = u_xlatu68;
          let x_4570 : vec4<f32> = x_4210.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4567)];
          let x_4572 : vec2<f32> = ((vec2<f32>(x_4562.x, x_4562.y) * vec2<f32>(x_4564.x, x_4564.w)) + vec2<f32>(x_4570.z, x_4570.w));
          let x_4573 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4572.x, x_4572.y, x_4573.z);
        }
      }
      let x_4580 : vec3<f32> = u_xlat33;
      let x_4583 : f32 = x_160.x_GlobalMipBias.x;
      let x_4584 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4580.x, x_4580.y), x_4583);
      u_xlat11 = x_4584;
      let x_4586 : bool = u_xlatb3.w;
      if (x_4586) {
        let x_4591 : f32 = u_xlat11.w;
        x_4587 = x_4591;
      } else {
        let x_4594 : f32 = u_xlat11.x;
        x_4587 = x_4594;
      }
      let x_4595 : f32 = x_4587;
      u_xlat75 = x_4595;
      let x_4597 : bool = u_xlatb3.x;
      if (x_4597) {
        let x_4601 : vec4<f32> = u_xlat11;
        x_4598 = vec3<f32>(x_4601.x, x_4601.y, x_4601.z);
      } else {
        let x_4604 : f32 = u_xlat75;
        x_4598 = vec3<f32>(x_4604, x_4604, x_4604);
      }
      let x_4606 : vec3<f32> = x_4598;
      let x_4607 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4606.x, x_4606.y, x_4606.z, x_4607.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4613 : vec4<f32> = u_xlat11;
    let x_4615 : u32 = u_xlatu68;
    let x_4618 : vec4<f32> = x_4100.x_AdditionalLightsColor[bitcast<i32>(x_4615)];
    let x_4620 : vec3<f32> = (vec3<f32>(x_4613.x, x_4613.y, x_4613.z) * vec3<f32>(x_4618.x, x_4618.y, x_4618.z));
    let x_4621 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4620.x, x_4620.y, x_4620.z, x_4621.w);
    let x_4623 : f32 = u_xlat72;
    let x_4625 : vec4<f32> = u_xlat11;
    let x_4627 : vec3<f32> = (vec3<f32>(x_4623, x_4623, x_4623) * vec3<f32>(x_4625.x, x_4625.y, x_4625.z));
    let x_4628 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4627.x, x_4627.y, x_4627.z, x_4628.w);
    let x_4630 : vec4<f32> = u_xlat5;
    let x_4632 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4630.x, x_4630.y, x_4630.z), vec3<f32>(x_4632.x, x_4632.y, x_4632.z));
    let x_4635 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4635, 0.0f, 1.0f);
    let x_4637 : f32 = u_xlat68;
    let x_4638 : f32 = u_xlat73;
    u_xlat68 = (x_4637 * x_4638);
    let x_4640 : f32 = u_xlat68;
    let x_4642 : vec4<f32> = u_xlat11;
    let x_4644 : vec3<f32> = (vec3<f32>(x_4640, x_4640, x_4640) * vec3<f32>(x_4642.x, x_4642.y, x_4642.z));
    let x_4645 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4644.x, x_4644.y, x_4644.z, x_4645.w);
    let x_4647 : vec4<f32> = u_xlat9;
    let x_4649 : f32 = u_xlat74;
    let x_4652 : vec3<f32> = u_xlat4;
    let x_4653 : vec3<f32> = ((vec3<f32>(x_4647.x, x_4647.y, x_4647.z) * vec3<f32>(x_4649, x_4649, x_4649)) + x_4652);
    let x_4654 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4653.x, x_4653.y, x_4653.z, x_4654.w);
    let x_4656 : vec4<f32> = u_xlat9;
    let x_4658 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4656.x, x_4656.y, x_4656.z), vec3<f32>(x_4658.x, x_4658.y, x_4658.z));
    let x_4661 : f32 = u_xlat68;
    u_xlat68 = max(x_4661, 1.17549435e-37f);
    let x_4663 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4663);
    let x_4665 : f32 = u_xlat68;
    let x_4667 : vec4<f32> = u_xlat9;
    let x_4669 : vec3<f32> = (vec3<f32>(x_4665, x_4665, x_4665) * vec3<f32>(x_4667.x, x_4667.y, x_4667.z));
    let x_4670 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4669.x, x_4669.y, x_4669.z, x_4670.w);
    let x_4672 : vec4<f32> = u_xlat5;
    let x_4674 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4672.x, x_4672.y, x_4672.z), vec3<f32>(x_4674.x, x_4674.y, x_4674.z));
    let x_4677 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4677, 0.0f, 1.0f);
    let x_4679 : vec4<f32> = u_xlat10;
    let x_4681 : vec4<f32> = u_xlat9;
    u_xlat73 = dot(vec3<f32>(x_4679.x, x_4679.y, x_4679.z), vec3<f32>(x_4681.x, x_4681.y, x_4681.z));
    let x_4684 : f32 = u_xlat73;
    u_xlat73 = clamp(x_4684, 0.0f, 1.0f);
    let x_4686 : f32 = u_xlat68;
    let x_4687 : f32 = u_xlat68;
    u_xlat68 = (x_4686 * x_4687);
    let x_4689 : f32 = u_xlat68;
    let x_4691 : f32 = u_xlat44.x;
    u_xlat68 = ((x_4689 * x_4691) + 1.000010014f);
    let x_4694 : f32 = u_xlat73;
    let x_4695 : f32 = u_xlat73;
    u_xlat73 = (x_4694 * x_4695);
    let x_4697 : f32 = u_xlat68;
    let x_4698 : f32 = u_xlat68;
    u_xlat68 = (x_4697 * x_4698);
    let x_4700 : f32 = u_xlat73;
    u_xlat73 = max(x_4700, 0.100000001f);
    let x_4702 : f32 = u_xlat68;
    let x_4703 : f32 = u_xlat73;
    u_xlat68 = (x_4702 * x_4703);
    let x_4705 : f32 = u_xlat70;
    let x_4706 : f32 = u_xlat68;
    u_xlat68 = (x_4705 * x_4706);
    let x_4709 : f32 = u_xlat47.x;
    let x_4710 : f32 = u_xlat68;
    u_xlat68 = (x_4709 / x_4710);
    let x_4712 : f32 = u_xlat68;
    let x_4715 : vec3<f32> = u_xlat7;
    let x_4716 : vec3<f32> = ((vec3<f32>(x_4712, x_4712, x_4712) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4715);
    let x_4717 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4716.x, x_4716.y, x_4716.z, x_4717.w);
    let x_4719 : vec4<f32> = u_xlat9;
    let x_4721 : vec4<f32> = u_xlat11;
    let x_4724 : vec4<f32> = u_xlat8;
    let x_4726 : vec3<f32> = ((vec3<f32>(x_4719.x, x_4719.y, x_4719.z) * vec3<f32>(x_4721.x, x_4721.y, x_4721.z)) + vec3<f32>(x_4724.x, x_4724.y, x_4724.z));
    let x_4727 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4726.x, x_4726.y, x_4726.z, x_4727.w);

    continuing {
      let x_4729 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4729 + bitcast<u32>(1i));
    }
  }
  let x_4731 : vec4<f32> = u_xlat6;
  let x_4733 : f32 = u_xlat71;
  let x_4736 : vec4<f32> = u_xlat2;
  let x_4738 : vec3<f32> = ((vec3<f32>(x_4731.x, x_4731.y, x_4731.z) * vec3<f32>(x_4733, x_4733, x_4733)) + vec3<f32>(x_4736.x, x_4736.y, x_4736.z));
  let x_4739 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4738.x, x_4739.y, x_4738.y, x_4738.z);
  let x_4741 : vec4<f32> = u_xlat8;
  let x_4743 : vec4<f32> = u_xlat0;
  let x_4745 : vec3<f32> = (vec3<f32>(x_4741.x, x_4741.y, x_4741.z) + vec3<f32>(x_4743.x, x_4743.z, x_4743.w));
  let x_4746 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4745.x, x_4746.y, x_4745.y, x_4745.z);
  let x_4748 : vec4<f32> = vs_INTERP4;
  let x_4750 : vec3<f32> = u_xlat1;
  let x_4752 : vec4<f32> = u_xlat0;
  let x_4754 : vec3<f32> = ((vec3<f32>(x_4748.w, x_4748.w, x_4748.w) * x_4750) + vec3<f32>(x_4752.x, x_4752.z, x_4752.w));
  let x_4755 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4754.x, x_4755.y, x_4754.y, x_4754.z);
  let x_4758 : f32 = u_xlat22.x;
  let x_4760 : f32 = u_xlat22.x;
  u_xlat22.x = (x_4758 * -(x_4760));
  let x_4765 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_4765);
  let x_4768 : vec4<f32> = u_xlat0;
  let x_4772 : vec4<f32> = x_160.unity_FogColor;
  let x_4775 : vec3<f32> = (vec3<f32>(x_4768.x, x_4768.z, x_4768.w) + -(vec3<f32>(x_4772.x, x_4772.y, x_4772.z)));
  let x_4776 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4775.x, x_4776.y, x_4775.y, x_4775.z);
  let x_4780 : vec3<f32> = u_xlat22;
  let x_4782 : vec4<f32> = u_xlat0;
  let x_4786 : vec4<f32> = x_160.unity_FogColor;
  let x_4788 : vec3<f32> = ((vec3<f32>(x_4780.x, x_4780.x, x_4780.x) * vec3<f32>(x_4782.x, x_4782.z, x_4782.w)) + vec3<f32>(x_4786.x, x_4786.y, x_4786.z));
  let x_4789 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4788.x, x_4788.y, x_4788.z, x_4789.w);
  let x_4791 : bool = u_xlatb25;
  let x_4792 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4792, x_4791);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

