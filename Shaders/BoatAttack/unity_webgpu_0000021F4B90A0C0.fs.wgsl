type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1_TexelSize : vec4<f32>,
  x_MainTex_TexelSize : vec4<f32>,
  Texture2D_DE8BF47E_TexelSize : vec4<f32>,
  Vector1_6E11FCEA : f32,
  Vector1_A492C01C : f32,
  Vector1_8B35DE98 : f32,
  @size(4)
  padding_3 : u32,
  Texture2D_C005B064_TexelSize : vec4<f32>,
  Texture2D_D7D66558_TexelSize : vec4<f32>,
  Vector1_90E376AD : f32,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_59 : UnityPerDraw;

@group(0) @binding(4) var x_MainTex : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainTex : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_146 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(7) var Texture2D_D7D66558 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D7D66558 : sampler;

@group(1) @binding(4) var<uniform> x_206 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_DE8BF47E : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_DE8BF47E : sampler;

@group(0) @binding(6) var Texture2D_C005B064 : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_C005B064 : sampler;

@group(0) @binding(3) var x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1 : texture_2d<f32>;

@group(0) @binding(11) var sampler_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1 : sampler;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_907 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2584 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb20 : vec2<bool>;
  var u_xlat20 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat61 : f32;
  var u_xlat62 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat64 : f32;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat21 : vec3<f32>;
  var u_xlat24 : vec3<f32>;
  var u_xlat40 : f32;
  var x_666 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlat42 : f32;
  var u_xlatb65 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb6 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat66 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlat67 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati66 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat60 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_29 : vec3<f32> = vs_INTERP1;
  let x_30 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_29, x_30);
  let x_36 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_36);
  let x_40 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_40);
  let x_50 : f32 = vs_INTERP2.w;
  u_xlatb20.x = (0.0f < x_50);
  let x_64 : f32 = x_59.unity_WorldTransformParams.w;
  u_xlatb20.y = (x_64 >= 0.0f);
  let x_71 : bool = u_xlatb20.x;
  u_xlat20.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb20.y;
  u_xlat20.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat20.y;
  let x_82 : f32 = u_xlat20.x;
  u_xlat20.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  let x_90 : vec3<f32> = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_90.x, x_90.y, x_90.z, x_91.w);
  let x_93 : vec3<f32> = vs_INTERP1;
  let x_95 : vec4<f32> = vs_INTERP2;
  let x_98 : vec4<f32> = u_xlat1;
  let x_101 : vec3<f32> = ((vec3<f32>(x_93.y, x_93.z, x_93.x) * vec3<f32>(x_95.z, x_95.x, x_95.y)) + -(vec3<f32>(x_98.x, x_98.y, x_98.z)));
  let x_102 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_101.x, x_101.y, x_101.z, x_102.w);
  let x_104 : vec3<f32> = u_xlat20;
  let x_106 : vec4<f32> = u_xlat1;
  let x_108 : vec3<f32> = (vec3<f32>(x_104.x, x_104.x, x_104.x) * vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_109.x, x_108.x, x_108.y, x_108.z);
  let x_111 : vec4<f32> = u_xlat0;
  let x_113 : vec3<f32> = vs_INTERP1;
  let x_114 : vec3<f32> = (vec3<f32>(x_111.x, x_111.x, x_111.x) * x_113);
  let x_115 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_114.x, x_114.y, x_114.z, x_115.w);
  let x_118 : vec4<f32> = u_xlat0;
  let x_120 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_118.x, x_118.x, x_118.x) * vec3<f32>(x_120.x, x_120.y, x_120.z));
  let x_124 : vec4<f32> = u_xlat0;
  let x_126 : vec4<f32> = u_xlat0;
  u_xlat3 = (vec3<f32>(x_124.y, x_124.z, x_124.w) * vec3<f32>(x_126.x, x_126.x, x_126.x));
  let x_142 : vec4<f32> = vs_INTERP3;
  let x_149 : f32 = x_146.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_142.x, x_142.y), x_149);
  u_xlat4 = x_150;
  let x_152 : f32 = u_xlat4.w;
  u_xlat0.x = (x_152 + -0.5f);
  let x_158 : f32 = u_xlat0.x;
  let x_163 : f32 = vs_INTERP0.y;
  u_xlat61 = ((x_158 * 4.0f) + x_163);
  let x_165 : f32 = u_xlat61;
  u_xlat61 = (x_165 * 0.330000013f);
  let x_170 : f32 = vs_INTERP0.y;
  u_xlat62 = (x_170 + 1.0f);
  let x_172 : f32 = u_xlat62;
  u_xlat62 = ((x_172 * -1.333333373f) + 1.0f);
  let x_176 : f32 = u_xlat61;
  let x_177 : f32 = u_xlat62;
  u_xlat61 = max(x_176, x_177);
  let x_179 : f32 = u_xlat61;
  u_xlat1.w = max(x_179, 0.100000001f);
  let x_184 : vec4<f32> = vs_INTERP3;
  let x_187 : vec2<f32> = (vec2<f32>(x_184.x, x_184.y) * vec2<f32>(4.0f, 4.0f));
  let x_188 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_187.x, x_187.y, x_188.z);
  let x_196 : vec3<f32> = u_xlat5;
  let x_199 : f32 = x_146.x_GlobalMipBias.x;
  let x_200 : vec4<f32> = textureSampleBias(Texture2D_D7D66558, samplerTexture2D_D7D66558, vec2<f32>(x_196.x, x_196.y), x_199);
  let x_201 : vec3<f32> = vec3<f32>(x_200.x, x_200.y, x_200.z);
  let x_202 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_209 : f32 = x_206.Vector1_8B35DE98;
  u_xlat62 = ((-(x_209) * 0.011111f) + 0.949999988f);
  let x_218 : f32 = x_206.Vector1_A492C01C;
  u_xlat63 = (x_218 + -10.0f);
  let x_221 : f32 = u_xlat63;
  let x_224 : f32 = vs_INTERP0.y;
  u_xlat63 = (-(x_221) + x_224);
  let x_226 : f32 = u_xlat63;
  u_xlat63 = (x_226 * 0.050000001f);
  let x_229 : f32 = u_xlat63;
  u_xlat63 = clamp(x_229, 0.0f, 1.0f);
  let x_232 : f32 = u_xlat63;
  u_xlat64 = ((x_232 * -2.0f) + 3.0f);
  let x_237 : f32 = u_xlat63;
  let x_238 : f32 = u_xlat63;
  u_xlat63 = (x_237 * x_238);
  let x_240 : f32 = u_xlat63;
  let x_241 : f32 = u_xlat64;
  u_xlat63 = (x_240 * x_241);
  let x_249 : vec4<f32> = vs_INTERP3;
  let x_252 : f32 = x_146.x_GlobalMipBias.x;
  let x_253 : vec4<f32> = textureSampleBias(Texture2D_DE8BF47E, samplerTexture2D_DE8BF47E, vec2<f32>(x_249.x, x_249.y), x_252);
  u_xlat7 = x_253;
  let x_255 : vec4<f32> = u_xlat7;
  u_xlat27 = ((vec3<f32>(x_255.w, x_255.y, x_255.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_262 : vec3<f32> = u_xlat3;
  let x_263 : vec3<f32> = u_xlat27;
  u_xlat3 = (x_262 * vec3<f32>(x_263.y, x_263.y, x_263.y));
  let x_266 : vec3<f32> = u_xlat27;
  let x_268 : vec3<f32> = u_xlat2;
  let x_270 : vec3<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_266.x, x_266.x, x_266.x) * x_268) + x_270);
  let x_272 : vec3<f32> = u_xlat27;
  let x_274 : vec4<f32> = u_xlat1;
  let x_277 : vec3<f32> = u_xlat2;
  let x_278 : vec3<f32> = ((vec3<f32>(x_272.z, x_272.z, x_272.z) * vec3<f32>(x_274.x, x_274.y, x_274.z)) + x_277);
  let x_279 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_278.x, x_278.y, x_278.z, x_279.w);
  let x_281 : vec4<f32> = u_xlat1;
  let x_283 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_281.x, x_281.y, x_281.z), vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_288 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_288, 1.17549435e-37f);
  let x_293 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_293);
  let x_297 : f32 = u_xlat1.x;
  let x_299 : f32 = u_xlat1.y;
  u_xlat1.x = (x_297 * x_299);
  let x_302 : f32 = u_xlat63;
  let x_304 : f32 = u_xlat1.x;
  let x_306 : f32 = u_xlat62;
  u_xlat1.x = ((x_302 * x_304) + -(x_306));
  let x_311 : f32 = u_xlat1.x;
  u_xlat1.x = (x_311 * 10.0f);
  let x_316 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_316, 0.0f, 1.0f);
  let x_321 : f32 = u_xlat1.x;
  u_xlat21.x = ((x_321 * -2.0f) + 3.0f);
  let x_326 : f32 = u_xlat1.x;
  let x_328 : f32 = u_xlat1.x;
  u_xlat1.x = (x_326 * x_328);
  let x_332 : f32 = u_xlat1.x;
  let x_334 : f32 = u_xlat21.x;
  u_xlat1.x = (x_332 * x_334);
  let x_337 : vec4<f32> = u_xlat1;
  let x_340 : vec2<f32> = min(vec2<f32>(x_337.x, x_337.w), vec2<f32>(1.0f, 1.0f));
  let x_341 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_340.x, x_341.y, x_341.z, x_340.y);
  let x_344 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_344) + 1.0f);
  let x_348 : vec4<f32> = u_xlat4;
  let x_350 : vec4<f32> = u_xlat6;
  u_xlat2 = (vec3<f32>(x_348.x, x_348.y, x_348.z) + -(vec3<f32>(x_350.x, x_350.y, x_350.z)));
  let x_354 : vec4<f32> = u_xlat1;
  let x_356 : vec3<f32> = u_xlat2;
  let x_358 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_354.x, x_354.x, x_354.x) * x_356) + vec3<f32>(x_358.x, x_358.y, x_358.z));
  let x_361 : vec4<f32> = u_xlat1;
  let x_363 : vec3<f32> = u_xlat2;
  u_xlat3 = (vec3<f32>(x_361.w, x_361.w, x_361.w) * x_363);
  let x_371 : vec3<f32> = u_xlat5;
  let x_374 : f32 = x_146.x_GlobalMipBias.x;
  let x_375 : vec4<f32> = textureSampleBias(Texture2D_C005B064, samplerTexture2D_C005B064, vec2<f32>(x_371.x, x_371.y), x_374);
  u_xlat24 = vec3<f32>(x_375.x, x_375.y, x_375.w);
  let x_378 : f32 = u_xlat24.x;
  let x_380 : f32 = u_xlat24.z;
  u_xlat24.x = (x_378 * x_380);
  let x_383 : vec3<f32> = u_xlat24;
  let x_388 : vec2<f32> = ((vec2<f32>(x_383.x, x_383.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_389 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_388.x, x_388.y, x_389.z);
  let x_391 : vec3<f32> = u_xlat5;
  let x_393 : vec3<f32> = u_xlat5;
  u_xlat21.x = dot(vec2<f32>(x_391.x, x_391.y), vec2<f32>(x_393.x, x_393.y));
  let x_398 : f32 = u_xlat21.x;
  u_xlat21.x = min(x_398, 1.0f);
  let x_402 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_402) + 1.0f);
  let x_407 : f32 = u_xlat21.x;
  u_xlat21.x = sqrt(x_407);
  let x_411 : f32 = u_xlat21.x;
  u_xlat5.z = max(x_411, 1.00000002e-16f);
  let x_418 : vec4<f32> = x_59.unity_ObjectToWorld[0i];
  let x_421 : vec4<f32> = x_59.unity_ObjectToWorld[0i];
  u_xlat21.x = dot(vec3<f32>(x_418.x, x_418.y, x_418.z), vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_426 : f32 = u_xlat21.x;
  u_xlat6.x = sqrt(x_426);
  let x_430 : vec4<f32> = x_59.unity_ObjectToWorld[1i];
  let x_433 : vec4<f32> = x_59.unity_ObjectToWorld[1i];
  u_xlat21.x = dot(vec3<f32>(x_430.x, x_430.y, x_430.z), vec3<f32>(x_433.x, x_433.y, x_433.z));
  let x_438 : f32 = u_xlat21.x;
  u_xlat6.y = sqrt(x_438);
  let x_443 : vec4<f32> = x_59.unity_ObjectToWorld[2i];
  let x_446 : vec4<f32> = x_59.unity_ObjectToWorld[2i];
  u_xlat21.x = dot(vec3<f32>(x_443.x, x_443.y, x_443.z), vec3<f32>(x_446.x, x_446.y, x_446.z));
  let x_451 : f32 = u_xlat21.x;
  u_xlat6.z = sqrt(x_451);
  let x_454 : vec4<f32> = u_xlat6;
  let x_456 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(vec3<f32>(x_454.x, x_454.y, x_454.z), vec3<f32>(x_456.x, x_456.y, x_456.z));
  let x_461 : f32 = u_xlat21.x;
  u_xlat21.x = sqrt(x_461);
  let x_465 : f32 = u_xlat21.x;
  let x_468 : f32 = x_206.Vector1_90E376AD;
  u_xlat21.x = (x_465 * x_468);
  let x_472 : f32 = u_xlat21.x;
  u_xlat21.x = (x_472 * 30.0f);
  let x_476 : vec3<f32> = u_xlat21;
  let x_478 : vec4<f32> = vs_INTERP3;
  let x_480 : vec2<f32> = (vec2<f32>(x_476.x, x_476.x) * vec2<f32>(x_478.x, x_478.y));
  let x_481 : vec3<f32> = u_xlat21;
  u_xlat21 = vec3<f32>(x_480.x, x_480.y, x_481.z);
  let x_488 : vec3<f32> = u_xlat21;
  let x_491 : f32 = x_146.x_GlobalMipBias.x;
  let x_492 : vec4<f32> = textureSampleBias(x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1, sampler_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1, vec2<f32>(x_488.x, x_488.y), x_491);
  u_xlat24 = vec3<f32>(x_492.x, x_492.y, x_492.w);
  let x_495 : f32 = u_xlat24.x;
  let x_497 : f32 = u_xlat24.z;
  u_xlat24.x = (x_495 * x_497);
  let x_500 : vec3<f32> = u_xlat24;
  let x_503 : vec2<f32> = ((vec2<f32>(x_500.x, x_500.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_504 : vec3<f32> = u_xlat21;
  u_xlat21 = vec3<f32>(x_503.x, x_503.y, x_504.z);
  let x_506 : vec3<f32> = u_xlat21;
  let x_508 : vec3<f32> = u_xlat21;
  u_xlat62 = dot(vec2<f32>(x_506.x, x_506.y), vec2<f32>(x_508.x, x_508.y));
  let x_511 : f32 = u_xlat62;
  u_xlat62 = min(x_511, 1.0f);
  let x_513 : f32 = u_xlat62;
  u_xlat62 = (-(x_513) + 1.0f);
  let x_516 : f32 = u_xlat62;
  u_xlat62 = sqrt(x_516);
  let x_518 : f32 = u_xlat62;
  u_xlat62 = max(x_518, 1.00000002e-16f);
  let x_520 : vec3<f32> = u_xlat21;
  let x_522 : vec3<f32> = u_xlat27;
  let x_524 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(x_522.x, x_522.y));
  let x_525 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_525.w);
  let x_527 : f32 = u_xlat62;
  let x_529 : f32 = u_xlat27.z;
  u_xlat6.z = (x_527 * x_529);
  let x_532 : vec4<f32> = u_xlat6;
  let x_534 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(vec3<f32>(x_532.x, x_532.y, x_532.z), vec3<f32>(x_534.x, x_534.y, x_534.z));
  let x_539 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_539, 1.17549435e-37f);
  let x_543 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_543);
  let x_546 : vec4<f32> = u_xlat6;
  let x_548 : vec3<f32> = u_xlat21;
  let x_551 : vec3<f32> = u_xlat5;
  u_xlat24 = ((vec3<f32>(x_546.x, x_546.y, x_546.z) * vec3<f32>(x_548.x, x_548.x, x_548.x)) + -(x_551));
  let x_554 : vec4<f32> = u_xlat1;
  let x_556 : vec3<f32> = u_xlat24;
  let x_558 : vec3<f32> = u_xlat5;
  let x_559 : vec3<f32> = ((vec3<f32>(x_554.x, x_554.x, x_554.x) * x_556) + x_558);
  let x_560 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_560.x, x_559.x, x_559.y, x_559.z);
  let x_563 : f32 = u_xlat0.x;
  u_xlat0.x = (-(abs(x_563)) + 1.0f);
  let x_568 : vec4<f32> = u_xlat0;
  let x_569 : vec4<f32> = u_xlat4;
  u_xlat0 = (x_568 * vec4<f32>(x_569.x, x_569.z, x_569.z, x_569.z));
  let x_573 : f32 = u_xlat0.x;
  let x_575 : f32 = x_206.Vector1_6E11FCEA;
  u_xlat0.x = (x_573 * x_575);
  let x_579 : f32 = u_xlat1.x;
  let x_581 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_579 * x_581) + -0.850000024f);
  let x_587 : f32 = u_xlat1.w;
  let x_589 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_587 * x_589) + 0.850000024f);
  let x_595 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_595, 0.0f, 1.0f);
  let x_598 : vec4<f32> = u_xlat4;
  let x_600 : vec4<f32> = vs_INTERP2;
  let x_603 : vec4<f32> = u_xlat0;
  u_xlat20 = ((vec3<f32>(x_598.y, x_598.y, x_598.y) * vec3<f32>(x_600.x, x_600.y, x_600.z)) + vec3<f32>(x_603.y, x_603.z, x_603.w));
  let x_606 : vec4<f32> = u_xlat4;
  let x_608 : vec3<f32> = vs_INTERP1;
  let x_610 : vec3<f32> = u_xlat20;
  u_xlat20 = ((vec3<f32>(x_606.w, x_606.w, x_606.w) * x_608) + x_610);
  let x_612 : vec3<f32> = u_xlat20;
  let x_613 : vec3<f32> = u_xlat20;
  u_xlat1.x = dot(x_612, x_613);
  let x_617 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_617);
  let x_620 : vec3<f32> = u_xlat20;
  let x_621 : vec4<f32> = u_xlat1;
  let x_623 : vec3<f32> = (x_620 * vec3<f32>(x_621.x, x_621.x, x_621.x));
  let x_624 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_623.x, x_623.y, x_623.z, x_624.w);
  let x_628 : f32 = x_146.unity_OrthoParams.w;
  u_xlatb20.x = (x_628 == 0.0f);
  let x_631 : vec3<f32> = vs_INTERP0;
  let x_635 : vec3<f32> = x_146.x_WorldSpaceCameraPos;
  let x_636 : vec3<f32> = (-(x_631) + x_635);
  let x_637 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_636.x, x_636.y, x_636.z, x_637.w);
  let x_640 : vec4<f32> = u_xlat1;
  let x_642 : vec4<f32> = u_xlat1;
  u_xlat40 = dot(vec3<f32>(x_640.x, x_640.y, x_640.z), vec3<f32>(x_642.x, x_642.y, x_642.z));
  let x_645 : f32 = u_xlat40;
  u_xlat40 = inverseSqrt(x_645);
  let x_647 : f32 = u_xlat40;
  let x_649 : vec4<f32> = u_xlat1;
  let x_651 : vec3<f32> = (vec3<f32>(x_647, x_647, x_647) * vec3<f32>(x_649.x, x_649.y, x_649.z));
  let x_652 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_651.x, x_651.y, x_651.z, x_652.w);
  let x_656 : f32 = x_146.unity_MatrixV[0i].z;
  u_xlat5.x = x_656;
  let x_659 : f32 = x_146.unity_MatrixV[1i].z;
  u_xlat5.y = x_659;
  let x_662 : f32 = x_146.unity_MatrixV[2i].z;
  u_xlat5.z = x_662;
  let x_665 : bool = u_xlatb20.x;
  if (x_665) {
    let x_669 : vec4<f32> = u_xlat1;
    x_666 = vec3<f32>(x_669.x, x_669.y, x_669.z);
  } else {
    let x_672 : vec3<f32> = u_xlat5;
    x_666 = x_672;
  }
  let x_673 : vec3<f32> = x_666;
  u_xlat20 = x_673;
  let x_675 : f32 = vs_INTERP0.y;
  let x_677 : f32 = x_146.unity_MatrixV[1i].z;
  u_xlat1.x = (x_675 * x_677);
  let x_681 : f32 = x_146.unity_MatrixV[0i].z;
  let x_683 : f32 = vs_INTERP0.x;
  let x_686 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_681 * x_683) + x_686);
  let x_690 : f32 = x_146.unity_MatrixV[2i].z;
  let x_692 : f32 = vs_INTERP0.z;
  let x_695 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_690 * x_692) + x_695);
  let x_699 : f32 = u_xlat1.x;
  let x_701 : f32 = x_146.unity_MatrixV[3i].z;
  u_xlat1.x = (x_699 + x_701);
  let x_705 : f32 = u_xlat1.x;
  let x_709 : f32 = x_146.x_ProjectionParams.y;
  u_xlat1.x = (-(x_705) + -(x_709));
  let x_714 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_714, 0.0f);
  let x_718 : f32 = u_xlat1.x;
  let x_721 : f32 = x_146.unity_FogParams.x;
  u_xlat1.x = (x_718 * x_721);
  u_xlat4.w = 1.0f;
  let x_727 : vec4<f32> = x_59.unity_SHAr;
  let x_728 : vec4<f32> = u_xlat4;
  u_xlat5.x = dot(x_727, x_728);
  let x_733 : vec4<f32> = x_59.unity_SHAg;
  let x_734 : vec4<f32> = u_xlat4;
  u_xlat5.y = dot(x_733, x_734);
  let x_739 : vec4<f32> = x_59.unity_SHAb;
  let x_740 : vec4<f32> = u_xlat4;
  u_xlat5.z = dot(x_739, x_740);
  let x_743 : vec4<f32> = u_xlat4;
  let x_745 : vec4<f32> = u_xlat4;
  u_xlat6 = (vec4<f32>(x_743.y, x_743.z, x_743.z, x_743.x) * vec4<f32>(x_745.x, x_745.y, x_745.z, x_745.z));
  let x_751 : vec4<f32> = x_59.unity_SHBr;
  let x_752 : vec4<f32> = u_xlat6;
  u_xlat8.x = dot(x_751, x_752);
  let x_757 : vec4<f32> = x_59.unity_SHBg;
  let x_758 : vec4<f32> = u_xlat6;
  u_xlat8.y = dot(x_757, x_758);
  let x_763 : vec4<f32> = x_59.unity_SHBb;
  let x_764 : vec4<f32> = u_xlat6;
  u_xlat8.z = dot(x_763, x_764);
  let x_768 : f32 = u_xlat4.y;
  let x_770 : f32 = u_xlat4.y;
  u_xlat21.x = (x_768 * x_770);
  let x_774 : f32 = u_xlat4.x;
  let x_776 : f32 = u_xlat4.x;
  let x_779 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_774 * x_776) + -(x_779));
  let x_785 : vec4<f32> = x_59.unity_SHC;
  let x_787 : vec3<f32> = u_xlat21;
  let x_790 : vec4<f32> = u_xlat8;
  let x_792 : vec3<f32> = ((vec3<f32>(x_785.x, x_785.y, x_785.z) * vec3<f32>(x_787.x, x_787.x, x_787.x)) + vec3<f32>(x_790.x, x_790.y, x_790.z));
  let x_793 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_792.x, x_792.y, x_792.z, x_793.w);
  let x_795 : vec3<f32> = u_xlat5;
  let x_796 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_795 + vec3<f32>(x_796.x, x_796.y, x_796.z));
  let x_799 : vec3<f32> = u_xlat5;
  u_xlat5 = max(x_799, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_803 : vec4<f32> = x_146.x_ScaledScreenParams;
  let x_804 : vec2<f32> = vec2<f32>(x_803.x, x_803.y);
  let x_808 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_804.x, x_804.y));
  let x_809 : vec3<f32> = u_xlat21;
  u_xlat21 = vec3<f32>(x_808.x, x_808.y, x_809.z);
  let x_811 : vec3<f32> = u_xlat21;
  let x_813 : vec4<f32> = hlslcc_FragCoord;
  let x_815 : vec2<f32> = (vec2<f32>(x_811.x, x_811.y) * vec2<f32>(x_813.x, x_813.y));
  let x_816 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_815.x, x_815.y, x_816.z, x_816.w);
  let x_819 : f32 = u_xlat6.y;
  let x_822 : f32 = x_146.x_ScaleBiasRt.x;
  let x_825 : f32 = x_146.x_ScaleBiasRt.y;
  u_xlat21.x = ((x_819 * x_822) + x_825);
  let x_829 : f32 = u_xlat21.x;
  u_xlat6.z = (-(x_829) + 1.0f);
  let x_833 : vec3<f32> = u_xlat3;
  u_xlat3 = (x_833 * vec3<f32>(0.863999963f, 0.863999963f, 0.863999963f));
  let x_837 : vec4<f32> = u_xlat1;
  let x_839 : vec3<f32> = u_xlat2;
  u_xlat21 = ((vec3<f32>(x_837.w, x_837.w, x_837.w) * x_839) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_844 : vec3<f32> = u_xlat21;
  u_xlat21 = ((x_844 * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_851 : f32 = u_xlat0.x;
  u_xlat2.x = (-(x_851) + 1.0f);
  let x_857 : f32 = u_xlat2.x;
  let x_859 : f32 = u_xlat2.x;
  u_xlat22 = (x_857 * x_859);
  let x_861 : f32 = u_xlat22;
  u_xlat22 = max(x_861, 0.0078125f);
  let x_865 : f32 = u_xlat22;
  let x_866 : f32 = u_xlat22;
  u_xlat42 = (x_865 * x_866);
  let x_869 : f32 = u_xlat0.x;
  u_xlat0.x = (x_869 + 0.136000037f);
  let x_874 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_874, 1.0f);
  let x_877 : f32 = u_xlat22;
  u_xlat62 = ((x_877 * 4.0f) + 2.0f);
  let x_885 : vec4<f32> = u_xlat6;
  let x_888 : f32 = x_146.x_GlobalMipBias.x;
  let x_889 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_885.x, x_885.z), x_888);
  u_xlat63 = x_889.x;
  let x_891 : f32 = u_xlat63;
  u_xlat64 = (x_891 + -1.0f);
  let x_894 : f32 = x_146.x_AmbientOcclusionParam.w;
  let x_895 : f32 = u_xlat64;
  u_xlat64 = ((x_894 * x_895) + 1.0f);
  let x_899 : f32 = u_xlat7.x;
  let x_900 : f32 = u_xlat63;
  u_xlat63 = min(x_899, x_900);
  let x_909 : f32 = x_907.x_MainLightShadowParams.y;
  u_xlatb65 = (0.0f < x_909);
  let x_911 : bool = u_xlatb65;
  if (x_911) {
    let x_915 : f32 = x_907.x_MainLightShadowParams.y;
    u_xlatb65 = (x_915 == 1.0f);
    let x_917 : bool = u_xlatb65;
    if (x_917) {
      let x_921 : vec4<f32> = vs_INTERP8;
      let x_925 : vec4<f32> = x_907.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_921.x, x_921.y, x_921.x, x_921.y) + x_925);
      let x_928 : vec4<f32> = u_xlat6;
      let x_929 : vec2<f32> = vec2<f32>(x_928.x, x_928.y);
      let x_931 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_929.x, x_929.y, x_931);
      let x_943 : vec3<f32> = txVec0;
      let x_945 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_943.xy, x_943.z);
      u_xlat7.x = x_945;
      let x_948 : vec4<f32> = u_xlat6;
      let x_949 : vec2<f32> = vec2<f32>(x_948.z, x_948.w);
      let x_951 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_949.x, x_949.y, x_951);
      let x_958 : vec3<f32> = txVec1;
      let x_960 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_958.xy, x_958.z);
      u_xlat7.y = x_960;
      let x_962 : vec4<f32> = vs_INTERP8;
      let x_966 : vec4<f32> = x_907.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_962.x, x_962.y, x_962.x, x_962.y) + x_966);
      let x_969 : vec4<f32> = u_xlat6;
      let x_970 : vec2<f32> = vec2<f32>(x_969.x, x_969.y);
      let x_972 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_970.x, x_970.y, x_972);
      let x_979 : vec3<f32> = txVec2;
      let x_981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_979.xy, x_979.z);
      u_xlat7.z = x_981;
      let x_984 : vec4<f32> = u_xlat6;
      let x_985 : vec2<f32> = vec2<f32>(x_984.z, x_984.w);
      let x_987 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_985.x, x_985.y, x_987);
      let x_994 : vec3<f32> = txVec3;
      let x_996 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_994.xy, x_994.z);
      u_xlat7.w = x_996;
      let x_999 : vec4<f32> = u_xlat7;
      u_xlat65 = dot(x_999, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1006 : f32 = x_907.x_MainLightShadowParams.y;
      u_xlatb6 = (x_1006 == 2.0f);
      let x_1008 : bool = u_xlatb6;
      if (x_1008) {
        let x_1011 : vec4<f32> = vs_INTERP8;
        let x_1014 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1019 : vec2<f32> = ((vec2<f32>(x_1011.x, x_1011.y) * vec2<f32>(x_1014.z, x_1014.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1020 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1019.x, x_1019.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat6;
        let x_1024 : vec2<f32> = floor(vec2<f32>(x_1022.x, x_1022.y));
        let x_1025 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1024.x, x_1024.y, x_1025.z, x_1025.w);
        let x_1029 : vec4<f32> = vs_INTERP8;
        let x_1032 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1035 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_1029.x, x_1029.y) * vec2<f32>(x_1032.z, x_1032.w)) + -(vec2<f32>(x_1035.x, x_1035.y)));
        let x_1039 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_1039.x, x_1039.x, x_1039.y, x_1039.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1043 : vec4<f32> = u_xlat7;
        let x_1045 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1043.x, x_1043.x, x_1043.z, x_1043.z) * vec4<f32>(x_1045.x, x_1045.x, x_1045.z, x_1045.z));
        let x_1048 : vec4<f32> = u_xlat8;
        let x_1052 : vec2<f32> = (vec2<f32>(x_1048.y, x_1048.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1053 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1052.x, x_1053.y, x_1052.y, x_1053.w);
        let x_1055 : vec4<f32> = u_xlat8;
        let x_1058 : vec2<f32> = u_xlat46;
        let x_1060 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1058));
        let x_1061 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1060.x, x_1060.y, x_1061.z, x_1061.w);
        let x_1064 : vec2<f32> = u_xlat46;
        u_xlat48 = (-(x_1064) + vec2<f32>(1.0f, 1.0f));
        let x_1068 : vec2<f32> = u_xlat46;
        let x_1070 : vec2<f32> = min(x_1068, vec2<f32>(0.0f, 0.0f));
        let x_1071 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1070.x, x_1070.y, x_1071.z, x_1071.w);
        let x_1073 : vec4<f32> = u_xlat9;
        let x_1076 : vec4<f32> = u_xlat9;
        let x_1079 : vec2<f32> = u_xlat48;
        let x_1080 : vec2<f32> = ((-(vec2<f32>(x_1073.x, x_1073.y)) * vec2<f32>(x_1076.x, x_1076.y)) + x_1079);
        let x_1081 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1080.x, x_1080.y, x_1081.z, x_1081.w);
        let x_1083 : vec2<f32> = u_xlat46;
        u_xlat46 = max(x_1083, vec2<f32>(0.0f, 0.0f));
        let x_1085 : vec2<f32> = u_xlat46;
        let x_1087 : vec2<f32> = u_xlat46;
        let x_1089 : vec4<f32> = u_xlat7;
        u_xlat46 = ((-(x_1085) * x_1087) + vec2<f32>(x_1089.y, x_1089.w));
        let x_1092 : vec4<f32> = u_xlat9;
        let x_1094 : vec2<f32> = (vec2<f32>(x_1092.x, x_1092.y) + vec2<f32>(1.0f, 1.0f));
        let x_1095 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1094.x, x_1094.y, x_1095.z, x_1095.w);
        let x_1097 : vec2<f32> = u_xlat46;
        u_xlat46 = (x_1097 + vec2<f32>(1.0f, 1.0f));
        let x_1100 : vec4<f32> = u_xlat8;
        let x_1104 : vec2<f32> = (vec2<f32>(x_1100.x, x_1100.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1105 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1104.x, x_1104.y, x_1105.z, x_1105.w);
        let x_1107 : vec2<f32> = u_xlat48;
        let x_1108 : vec2<f32> = (x_1107 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1109 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1108.x, x_1108.y, x_1109.z, x_1109.w);
        let x_1111 : vec4<f32> = u_xlat9;
        let x_1113 : vec2<f32> = (vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1114 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1113.x, x_1113.y, x_1114.z, x_1114.w);
        let x_1117 : vec2<f32> = u_xlat46;
        let x_1118 : vec2<f32> = (x_1117 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1119 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1118.x, x_1118.y, x_1119.z, x_1119.w);
        let x_1121 : vec4<f32> = u_xlat7;
        u_xlat46 = (vec2<f32>(x_1121.y, x_1121.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1125 : f32 = u_xlat9.x;
        u_xlat10.z = x_1125;
        let x_1128 : f32 = u_xlat46.x;
        u_xlat10.w = x_1128;
        let x_1131 : f32 = u_xlat11.x;
        u_xlat8.z = x_1131;
        let x_1134 : f32 = u_xlat7.x;
        u_xlat8.w = x_1134;
        let x_1137 : vec4<f32> = u_xlat8;
        let x_1139 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_1137.z, x_1137.w, x_1137.x, x_1137.z) + vec4<f32>(x_1139.z, x_1139.w, x_1139.x, x_1139.z));
        let x_1143 : f32 = u_xlat10.y;
        u_xlat9.z = x_1143;
        let x_1146 : f32 = u_xlat46.y;
        u_xlat9.w = x_1146;
        let x_1149 : f32 = u_xlat8.y;
        u_xlat11.z = x_1149;
        let x_1152 : f32 = u_xlat7.z;
        u_xlat11.w = x_1152;
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1156 : vec4<f32> = u_xlat11;
        let x_1158 : vec3<f32> = (vec3<f32>(x_1154.z, x_1154.y, x_1154.w) + vec3<f32>(x_1156.z, x_1156.y, x_1156.w));
        let x_1159 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1158.x, x_1158.y, x_1158.z, x_1159.w);
        let x_1161 : vec4<f32> = u_xlat8;
        let x_1163 : vec4<f32> = u_xlat12;
        let x_1165 : vec3<f32> = (vec3<f32>(x_1161.x, x_1161.z, x_1161.w) / vec3<f32>(x_1163.z, x_1163.w, x_1163.y));
        let x_1166 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1165.x, x_1165.y, x_1165.z, x_1166.w);
        let x_1168 : vec4<f32> = u_xlat8;
        let x_1173 : vec3<f32> = (vec3<f32>(x_1168.x, x_1168.y, x_1168.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1174 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1173.x, x_1173.y, x_1173.z, x_1174.w);
        let x_1176 : vec4<f32> = u_xlat11;
        let x_1178 : vec4<f32> = u_xlat7;
        let x_1180 : vec3<f32> = (vec3<f32>(x_1176.z, x_1176.y, x_1176.w) / vec3<f32>(x_1178.x, x_1178.y, x_1178.z));
        let x_1181 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1180.x, x_1180.y, x_1180.z, x_1181.w);
        let x_1183 : vec4<f32> = u_xlat9;
        let x_1185 : vec3<f32> = (vec3<f32>(x_1183.x, x_1183.y, x_1183.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1186 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1185.x, x_1185.y, x_1185.z, x_1186.w);
        let x_1188 : vec4<f32> = u_xlat8;
        let x_1191 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1193 : vec3<f32> = (vec3<f32>(x_1188.y, x_1188.x, x_1188.z) * vec3<f32>(x_1191.x, x_1191.x, x_1191.x));
        let x_1194 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1193.x, x_1193.y, x_1193.z, x_1194.w);
        let x_1196 : vec4<f32> = u_xlat9;
        let x_1199 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1201 : vec3<f32> = (vec3<f32>(x_1196.x, x_1196.y, x_1196.z) * vec3<f32>(x_1199.y, x_1199.y, x_1199.y));
        let x_1202 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1201.x, x_1201.y, x_1201.z, x_1202.w);
        let x_1205 : f32 = u_xlat9.x;
        u_xlat8.w = x_1205;
        let x_1207 : vec4<f32> = u_xlat6;
        let x_1210 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1207.x, x_1207.y, x_1207.x, x_1207.y) * vec4<f32>(x_1210.x, x_1210.y, x_1210.x, x_1210.y)) + vec4<f32>(x_1213.y, x_1213.w, x_1213.x, x_1213.w));
        let x_1216 : vec4<f32> = u_xlat6;
        let x_1219 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1222 : vec4<f32> = u_xlat8;
        u_xlat46 = ((vec2<f32>(x_1216.x, x_1216.y) * vec2<f32>(x_1219.x, x_1219.y)) + vec2<f32>(x_1222.z, x_1222.w));
        let x_1226 : f32 = u_xlat8.y;
        u_xlat9.w = x_1226;
        let x_1228 : vec4<f32> = u_xlat9;
        let x_1229 : vec2<f32> = vec2<f32>(x_1228.y, x_1228.z);
        let x_1230 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1230.x, x_1229.x, x_1230.z, x_1229.y);
        let x_1232 : vec4<f32> = u_xlat6;
        let x_1235 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1238 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_1232.x, x_1232.y, x_1232.x, x_1232.y) * vec4<f32>(x_1235.x, x_1235.y, x_1235.x, x_1235.y)) + vec4<f32>(x_1238.x, x_1238.y, x_1238.z, x_1238.y));
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1244 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1241.x, x_1241.y, x_1241.x, x_1241.y) * vec4<f32>(x_1244.x, x_1244.y, x_1244.x, x_1244.y)) + vec4<f32>(x_1247.w, x_1247.y, x_1247.w, x_1247.z));
        let x_1250 : vec4<f32> = u_xlat6;
        let x_1253 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1256 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_1250.x, x_1250.y, x_1250.x, x_1250.y) * vec4<f32>(x_1253.x, x_1253.y, x_1253.x, x_1253.y)) + vec4<f32>(x_1256.x, x_1256.w, x_1256.z, x_1256.w));
        let x_1260 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_1260.x, x_1260.x, x_1260.x, x_1260.y) * vec4<f32>(x_1262.z, x_1262.w, x_1262.y, x_1262.z));
        let x_1266 : vec4<f32> = u_xlat7;
        let x_1268 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_1266.y, x_1266.y, x_1266.z, x_1266.z) * x_1268);
        let x_1271 : f32 = u_xlat7.z;
        let x_1273 : f32 = u_xlat12.y;
        u_xlat6.x = (x_1271 * x_1273);
        let x_1277 : vec4<f32> = u_xlat10;
        let x_1278 : vec2<f32> = vec2<f32>(x_1277.x, x_1277.y);
        let x_1280 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_1278.x, x_1278.y, x_1280);
        let x_1288 : vec3<f32> = txVec4;
        let x_1290 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1288.xy, x_1288.z);
        u_xlat26 = x_1290;
        let x_1292 : vec4<f32> = u_xlat10;
        let x_1293 : vec2<f32> = vec2<f32>(x_1292.z, x_1292.w);
        let x_1295 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_1293.x, x_1293.y, x_1295);
        let x_1302 : vec3<f32> = txVec5;
        let x_1304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1302.xy, x_1302.z);
        u_xlat7.x = x_1304;
        let x_1307 : f32 = u_xlat7.x;
        let x_1309 : f32 = u_xlat13.y;
        u_xlat7.x = (x_1307 * x_1309);
        let x_1313 : f32 = u_xlat13.x;
        let x_1314 : f32 = u_xlat26;
        let x_1317 : f32 = u_xlat7.x;
        u_xlat26 = ((x_1313 * x_1314) + x_1317);
        let x_1320 : vec2<f32> = u_xlat46;
        let x_1322 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_1320.x, x_1320.y, x_1322);
        let x_1329 : vec3<f32> = txVec6;
        let x_1331 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1329.xy, x_1329.z);
        u_xlat46.x = x_1331;
        let x_1334 : f32 = u_xlat13.z;
        let x_1336 : f32 = u_xlat46.x;
        let x_1338 : f32 = u_xlat26;
        u_xlat26 = ((x_1334 * x_1336) + x_1338);
        let x_1341 : vec4<f32> = u_xlat9;
        let x_1342 : vec2<f32> = vec2<f32>(x_1341.x, x_1341.y);
        let x_1344 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_1342.x, x_1342.y, x_1344);
        let x_1351 : vec3<f32> = txVec7;
        let x_1353 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1351.xy, x_1351.z);
        u_xlat46.x = x_1353;
        let x_1356 : f32 = u_xlat13.w;
        let x_1358 : f32 = u_xlat46.x;
        let x_1360 : f32 = u_xlat26;
        u_xlat26 = ((x_1356 * x_1358) + x_1360);
        let x_1363 : vec4<f32> = u_xlat11;
        let x_1364 : vec2<f32> = vec2<f32>(x_1363.x, x_1363.y);
        let x_1366 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_1364.x, x_1364.y, x_1366);
        let x_1373 : vec3<f32> = txVec8;
        let x_1375 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1373.xy, x_1373.z);
        u_xlat46.x = x_1375;
        let x_1378 : f32 = u_xlat14.x;
        let x_1380 : f32 = u_xlat46.x;
        let x_1382 : f32 = u_xlat26;
        u_xlat26 = ((x_1378 * x_1380) + x_1382);
        let x_1385 : vec4<f32> = u_xlat11;
        let x_1386 : vec2<f32> = vec2<f32>(x_1385.z, x_1385.w);
        let x_1388 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_1386.x, x_1386.y, x_1388);
        let x_1395 : vec3<f32> = txVec9;
        let x_1397 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1395.xy, x_1395.z);
        u_xlat46.x = x_1397;
        let x_1400 : f32 = u_xlat14.y;
        let x_1402 : f32 = u_xlat46.x;
        let x_1404 : f32 = u_xlat26;
        u_xlat26 = ((x_1400 * x_1402) + x_1404);
        let x_1407 : vec4<f32> = u_xlat9;
        let x_1408 : vec2<f32> = vec2<f32>(x_1407.z, x_1407.w);
        let x_1410 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_1408.x, x_1408.y, x_1410);
        let x_1417 : vec3<f32> = txVec10;
        let x_1419 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1417.xy, x_1417.z);
        u_xlat46.x = x_1419;
        let x_1422 : f32 = u_xlat14.z;
        let x_1424 : f32 = u_xlat46.x;
        let x_1426 : f32 = u_xlat26;
        u_xlat26 = ((x_1422 * x_1424) + x_1426);
        let x_1429 : vec4<f32> = u_xlat8;
        let x_1430 : vec2<f32> = vec2<f32>(x_1429.x, x_1429.y);
        let x_1432 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_1430.x, x_1430.y, x_1432);
        let x_1439 : vec3<f32> = txVec11;
        let x_1441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1439.xy, x_1439.z);
        u_xlat46.x = x_1441;
        let x_1444 : f32 = u_xlat14.w;
        let x_1446 : f32 = u_xlat46.x;
        let x_1448 : f32 = u_xlat26;
        u_xlat26 = ((x_1444 * x_1446) + x_1448);
        let x_1451 : vec4<f32> = u_xlat8;
        let x_1452 : vec2<f32> = vec2<f32>(x_1451.z, x_1451.w);
        let x_1454 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1452.x, x_1452.y, x_1454);
        let x_1461 : vec3<f32> = txVec12;
        let x_1463 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1461.xy, x_1461.z);
        u_xlat46.x = x_1463;
        let x_1466 : f32 = u_xlat6.x;
        let x_1468 : f32 = u_xlat46.x;
        let x_1470 : f32 = u_xlat26;
        u_xlat65 = ((x_1466 * x_1468) + x_1470);
      } else {
        let x_1473 : vec4<f32> = vs_INTERP8;
        let x_1476 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1479 : vec2<f32> = ((vec2<f32>(x_1473.x, x_1473.y) * vec2<f32>(x_1476.z, x_1476.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1479.x, x_1479.y, x_1480.z, x_1480.w);
        let x_1482 : vec4<f32> = u_xlat6;
        let x_1484 : vec2<f32> = floor(vec2<f32>(x_1482.x, x_1482.y));
        let x_1485 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1484.x, x_1484.y, x_1485.z, x_1485.w);
        let x_1487 : vec4<f32> = vs_INTERP8;
        let x_1490 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1493 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_1487.x, x_1487.y) * vec2<f32>(x_1490.z, x_1490.w)) + -(vec2<f32>(x_1493.x, x_1493.y)));
        let x_1497 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_1497.x, x_1497.x, x_1497.y, x_1497.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1500 : vec4<f32> = u_xlat7;
        let x_1502 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1500.x, x_1500.x, x_1500.z, x_1500.z) * vec4<f32>(x_1502.x, x_1502.x, x_1502.z, x_1502.z));
        let x_1505 : vec4<f32> = u_xlat8;
        let x_1509 : vec2<f32> = (vec2<f32>(x_1505.y, x_1505.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1510 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1510.x, x_1509.x, x_1510.z, x_1509.y);
        let x_1512 : vec4<f32> = u_xlat8;
        let x_1515 : vec2<f32> = u_xlat46;
        let x_1517 : vec2<f32> = ((vec2<f32>(x_1512.x, x_1512.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1515));
        let x_1518 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1517.x, x_1518.y, x_1517.y, x_1518.w);
        let x_1520 : vec2<f32> = u_xlat46;
        let x_1522 : vec2<f32> = (-(x_1520) + vec2<f32>(1.0f, 1.0f));
        let x_1523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1522.x, x_1522.y, x_1523.z, x_1523.w);
        let x_1525 : vec2<f32> = u_xlat46;
        u_xlat48 = min(x_1525, vec2<f32>(0.0f, 0.0f));
        let x_1527 : vec2<f32> = u_xlat48;
        let x_1529 : vec2<f32> = u_xlat48;
        let x_1531 : vec4<f32> = u_xlat8;
        let x_1533 : vec2<f32> = ((-(x_1527) * x_1529) + vec2<f32>(x_1531.x, x_1531.y));
        let x_1534 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1533.x, x_1533.y, x_1534.z, x_1534.w);
        let x_1536 : vec2<f32> = u_xlat46;
        u_xlat48 = max(x_1536, vec2<f32>(0.0f, 0.0f));
        let x_1538 : vec2<f32> = u_xlat48;
        let x_1540 : vec2<f32> = u_xlat48;
        let x_1542 : vec4<f32> = u_xlat7;
        let x_1544 : vec2<f32> = ((-(x_1538) * x_1540) + vec2<f32>(x_1542.y, x_1542.w));
        let x_1545 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_1544.x, x_1545.y, x_1544.y);
        let x_1547 : vec4<f32> = u_xlat8;
        let x_1549 : vec2<f32> = (vec2<f32>(x_1547.x, x_1547.y) + vec2<f32>(2.0f, 2.0f));
        let x_1550 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1549.x, x_1549.y, x_1550.z, x_1550.w);
        let x_1552 : vec3<f32> = u_xlat27;
        let x_1554 : vec2<f32> = (vec2<f32>(x_1552.x, x_1552.z) + vec2<f32>(2.0f, 2.0f));
        let x_1555 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1555.x, x_1554.x, x_1555.z, x_1554.y);
        let x_1558 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1558 * 0.081632003f);
        let x_1562 : vec4<f32> = u_xlat7;
        let x_1565 : vec3<f32> = (vec3<f32>(x_1562.z, x_1562.x, x_1562.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1566 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1565.x, x_1565.y, x_1565.z, x_1566.w);
        let x_1568 : vec4<f32> = u_xlat8;
        let x_1571 : vec2<f32> = (vec2<f32>(x_1568.x, x_1568.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1572 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1571.x, x_1571.y, x_1572.z, x_1572.w);
        let x_1575 : f32 = u_xlat11.y;
        u_xlat10.x = x_1575;
        let x_1577 : vec2<f32> = u_xlat46;
        let x_1584 : vec2<f32> = ((vec2<f32>(x_1577.x, x_1577.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1585 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1585.x, x_1584.x, x_1585.z, x_1584.y);
        let x_1587 : vec2<f32> = u_xlat46;
        let x_1591 : vec2<f32> = ((vec2<f32>(x_1587.x, x_1587.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1592 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1591.x, x_1592.y, x_1591.y, x_1592.w);
        let x_1595 : f32 = u_xlat7.x;
        u_xlat8.y = x_1595;
        let x_1598 : f32 = u_xlat9.y;
        u_xlat8.w = x_1598;
        let x_1600 : vec4<f32> = u_xlat8;
        let x_1601 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1600 + x_1601);
        let x_1603 : vec2<f32> = u_xlat46;
        let x_1606 : vec2<f32> = ((vec2<f32>(x_1603.y, x_1603.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1607 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1607.x, x_1606.x, x_1607.z, x_1606.y);
        let x_1609 : vec2<f32> = u_xlat46;
        let x_1612 : vec2<f32> = ((vec2<f32>(x_1609.y, x_1609.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1613 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1612.x, x_1613.y, x_1612.y, x_1613.w);
        let x_1616 : f32 = u_xlat7.y;
        u_xlat9.y = x_1616;
        let x_1618 : vec4<f32> = u_xlat9;
        let x_1619 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1618 + x_1619);
        let x_1621 : vec4<f32> = u_xlat8;
        let x_1622 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1621 / x_1622);
        let x_1624 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1624 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1630 : vec4<f32> = u_xlat9;
        let x_1631 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1630 / x_1631);
        let x_1633 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1633 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1635 : vec4<f32> = u_xlat8;
        let x_1638 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1635.w, x_1635.x, x_1635.y, x_1635.z) * vec4<f32>(x_1638.x, x_1638.x, x_1638.x, x_1638.x));
        let x_1641 : vec4<f32> = u_xlat9;
        let x_1644 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1641.x, x_1641.w, x_1641.y, x_1641.z) * vec4<f32>(x_1644.y, x_1644.y, x_1644.y, x_1644.y));
        let x_1647 : vec4<f32> = u_xlat8;
        let x_1648 : vec3<f32> = vec3<f32>(x_1647.y, x_1647.z, x_1647.w);
        let x_1649 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1648.x, x_1649.y, x_1648.y, x_1648.z);
        let x_1652 : f32 = u_xlat9.x;
        u_xlat11.y = x_1652;
        let x_1654 : vec4<f32> = u_xlat6;
        let x_1657 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1660 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1654.x, x_1654.y, x_1654.x, x_1654.y) * vec4<f32>(x_1657.x, x_1657.y, x_1657.x, x_1657.y)) + vec4<f32>(x_1660.x, x_1660.y, x_1660.z, x_1660.y));
        let x_1663 : vec4<f32> = u_xlat6;
        let x_1666 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1669 : vec4<f32> = u_xlat11;
        u_xlat46 = ((vec2<f32>(x_1663.x, x_1663.y) * vec2<f32>(x_1666.x, x_1666.y)) + vec2<f32>(x_1669.w, x_1669.y));
        let x_1673 : f32 = u_xlat11.y;
        u_xlat8.y = x_1673;
        let x_1676 : f32 = u_xlat9.z;
        u_xlat11.y = x_1676;
        let x_1678 : vec4<f32> = u_xlat6;
        let x_1681 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1684 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1678.x, x_1678.y, x_1678.x, x_1678.y) * vec4<f32>(x_1681.x, x_1681.y, x_1681.x, x_1681.y)) + vec4<f32>(x_1684.x, x_1684.y, x_1684.z, x_1684.y));
        let x_1687 : vec4<f32> = u_xlat6;
        let x_1690 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1693 : vec4<f32> = u_xlat11;
        let x_1695 : vec2<f32> = ((vec2<f32>(x_1687.x, x_1687.y) * vec2<f32>(x_1690.x, x_1690.y)) + vec2<f32>(x_1693.w, x_1693.y));
        let x_1696 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1695.x, x_1695.y, x_1696.z, x_1696.w);
        let x_1699 : f32 = u_xlat11.y;
        u_xlat8.z = x_1699;
        let x_1702 : vec4<f32> = u_xlat6;
        let x_1705 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1708 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1702.x, x_1702.y, x_1702.x, x_1702.y) * vec4<f32>(x_1705.x, x_1705.y, x_1705.x, x_1705.y)) + vec4<f32>(x_1708.x, x_1708.y, x_1708.x, x_1708.z));
        let x_1712 : f32 = u_xlat9.w;
        u_xlat11.y = x_1712;
        let x_1715 : vec4<f32> = u_xlat6;
        let x_1718 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1721 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1715.x, x_1715.y, x_1715.x, x_1715.y) * vec4<f32>(x_1718.x, x_1718.y, x_1718.x, x_1718.y)) + vec4<f32>(x_1721.x, x_1721.y, x_1721.z, x_1721.y));
        let x_1725 : vec4<f32> = u_xlat6;
        let x_1728 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1731 : vec4<f32> = u_xlat11;
        u_xlat28 = ((vec2<f32>(x_1725.x, x_1725.y) * vec2<f32>(x_1728.x, x_1728.y)) + vec2<f32>(x_1731.w, x_1731.y));
        let x_1735 : f32 = u_xlat11.y;
        u_xlat8.w = x_1735;
        let x_1738 : vec4<f32> = u_xlat6;
        let x_1741 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1744 : vec4<f32> = u_xlat8;
        u_xlat54 = ((vec2<f32>(x_1738.x, x_1738.y) * vec2<f32>(x_1741.x, x_1741.y)) + vec2<f32>(x_1744.x, x_1744.w));
        let x_1747 : vec4<f32> = u_xlat11;
        let x_1748 : vec3<f32> = vec3<f32>(x_1747.x, x_1747.z, x_1747.w);
        let x_1749 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1748.x, x_1749.y, x_1748.y, x_1748.z);
        let x_1751 : vec4<f32> = u_xlat6;
        let x_1754 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1757 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1751.x, x_1751.y, x_1751.x, x_1751.y) * vec4<f32>(x_1754.x, x_1754.y, x_1754.x, x_1754.y)) + vec4<f32>(x_1757.x, x_1757.y, x_1757.z, x_1757.y));
        let x_1761 : vec4<f32> = u_xlat6;
        let x_1764 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1767 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1761.x, x_1761.y) * vec2<f32>(x_1764.x, x_1764.y)) + vec2<f32>(x_1767.w, x_1767.y));
        let x_1771 : f32 = u_xlat8.x;
        u_xlat9.x = x_1771;
        let x_1773 : vec4<f32> = u_xlat6;
        let x_1776 : vec4<f32> = x_907.x_MainLightShadowmapSize;
        let x_1779 : vec4<f32> = u_xlat9;
        let x_1781 : vec2<f32> = ((vec2<f32>(x_1773.x, x_1773.y) * vec2<f32>(x_1776.x, x_1776.y)) + vec2<f32>(x_1779.x, x_1779.y));
        let x_1782 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1781.x, x_1781.y, x_1782.z, x_1782.w);
        let x_1785 : vec4<f32> = u_xlat7;
        let x_1787 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1785.x, x_1785.x, x_1785.x, x_1785.x) * x_1787);
        let x_1790 : vec4<f32> = u_xlat7;
        let x_1792 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1790.y, x_1790.y, x_1790.y, x_1790.y) * x_1792);
        let x_1795 : vec4<f32> = u_xlat7;
        let x_1797 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1795.z, x_1795.z, x_1795.z, x_1795.z) * x_1797);
        let x_1799 : vec4<f32> = u_xlat7;
        let x_1801 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1799.w, x_1799.w, x_1799.w, x_1799.w) * x_1801);
        let x_1804 : vec4<f32> = u_xlat12;
        let x_1805 : vec2<f32> = vec2<f32>(x_1804.x, x_1804.y);
        let x_1807 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1805.x, x_1805.y, x_1807);
        let x_1814 : vec3<f32> = txVec13;
        let x_1816 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1814.xy, x_1814.z);
        u_xlat8.x = x_1816;
        let x_1819 : vec4<f32> = u_xlat12;
        let x_1820 : vec2<f32> = vec2<f32>(x_1819.z, x_1819.w);
        let x_1822 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1820.x, x_1820.y, x_1822);
        let x_1830 : vec3<f32> = txVec14;
        let x_1832 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1830.xy, x_1830.z);
        u_xlat68 = x_1832;
        let x_1833 : f32 = u_xlat68;
        let x_1835 : f32 = u_xlat17.y;
        u_xlat68 = (x_1833 * x_1835);
        let x_1838 : f32 = u_xlat17.x;
        let x_1840 : f32 = u_xlat8.x;
        let x_1842 : f32 = u_xlat68;
        u_xlat8.x = ((x_1838 * x_1840) + x_1842);
        let x_1846 : vec2<f32> = u_xlat46;
        let x_1848 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1846.x, x_1846.y, x_1848);
        let x_1855 : vec3<f32> = txVec15;
        let x_1857 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1855.xy, x_1855.z);
        u_xlat46.x = x_1857;
        let x_1860 : f32 = u_xlat17.z;
        let x_1862 : f32 = u_xlat46.x;
        let x_1865 : f32 = u_xlat8.x;
        u_xlat46.x = ((x_1860 * x_1862) + x_1865);
        let x_1869 : vec4<f32> = u_xlat15;
        let x_1870 : vec2<f32> = vec2<f32>(x_1869.x, x_1869.y);
        let x_1872 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1870.x, x_1870.y, x_1872);
        let x_1880 : vec3<f32> = txVec16;
        let x_1882 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1880.xy, x_1880.z);
        u_xlat66 = x_1882;
        let x_1884 : f32 = u_xlat17.w;
        let x_1885 : f32 = u_xlat66;
        let x_1888 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1884 * x_1885) + x_1888);
        let x_1892 : vec4<f32> = u_xlat13;
        let x_1893 : vec2<f32> = vec2<f32>(x_1892.x, x_1892.y);
        let x_1895 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1893.x, x_1893.y, x_1895);
        let x_1902 : vec3<f32> = txVec17;
        let x_1904 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1902.xy, x_1902.z);
        u_xlat66 = x_1904;
        let x_1906 : f32 = u_xlat18.x;
        let x_1907 : f32 = u_xlat66;
        let x_1910 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1906 * x_1907) + x_1910);
        let x_1914 : vec4<f32> = u_xlat13;
        let x_1915 : vec2<f32> = vec2<f32>(x_1914.z, x_1914.w);
        let x_1917 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1915.x, x_1915.y, x_1917);
        let x_1924 : vec3<f32> = txVec18;
        let x_1926 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1924.xy, x_1924.z);
        u_xlat66 = x_1926;
        let x_1928 : f32 = u_xlat18.y;
        let x_1929 : f32 = u_xlat66;
        let x_1932 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1928 * x_1929) + x_1932);
        let x_1936 : vec4<f32> = u_xlat14;
        let x_1937 : vec2<f32> = vec2<f32>(x_1936.x, x_1936.y);
        let x_1939 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1937.x, x_1937.y, x_1939);
        let x_1946 : vec3<f32> = txVec19;
        let x_1948 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1946.xy, x_1946.z);
        u_xlat66 = x_1948;
        let x_1950 : f32 = u_xlat18.z;
        let x_1951 : f32 = u_xlat66;
        let x_1954 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1950 * x_1951) + x_1954);
        let x_1958 : vec4<f32> = u_xlat15;
        let x_1959 : vec2<f32> = vec2<f32>(x_1958.z, x_1958.w);
        let x_1961 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1959.x, x_1959.y, x_1961);
        let x_1968 : vec3<f32> = txVec20;
        let x_1970 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1968.xy, x_1968.z);
        u_xlat66 = x_1970;
        let x_1972 : f32 = u_xlat18.w;
        let x_1973 : f32 = u_xlat66;
        let x_1976 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1972 * x_1973) + x_1976);
        let x_1980 : vec4<f32> = u_xlat16;
        let x_1981 : vec2<f32> = vec2<f32>(x_1980.x, x_1980.y);
        let x_1983 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1981.x, x_1981.y, x_1983);
        let x_1990 : vec3<f32> = txVec21;
        let x_1992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1990.xy, x_1990.z);
        u_xlat66 = x_1992;
        let x_1994 : f32 = u_xlat19.x;
        let x_1995 : f32 = u_xlat66;
        let x_1998 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1994 * x_1995) + x_1998);
        let x_2002 : vec4<f32> = u_xlat16;
        let x_2003 : vec2<f32> = vec2<f32>(x_2002.z, x_2002.w);
        let x_2005 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_2003.x, x_2003.y, x_2005);
        let x_2012 : vec3<f32> = txVec22;
        let x_2014 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2012.xy, x_2012.z);
        u_xlat66 = x_2014;
        let x_2016 : f32 = u_xlat19.y;
        let x_2017 : f32 = u_xlat66;
        let x_2020 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2016 * x_2017) + x_2020);
        let x_2024 : vec2<f32> = u_xlat28;
        let x_2026 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_2024.x, x_2024.y, x_2026);
        let x_2033 : vec3<f32> = txVec23;
        let x_2035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2033.xy, x_2033.z);
        u_xlat66 = x_2035;
        let x_2037 : f32 = u_xlat19.z;
        let x_2038 : f32 = u_xlat66;
        let x_2041 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2037 * x_2038) + x_2041);
        let x_2045 : vec2<f32> = u_xlat54;
        let x_2047 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_2045.x, x_2045.y, x_2047);
        let x_2054 : vec3<f32> = txVec24;
        let x_2056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2054.xy, x_2054.z);
        u_xlat66 = x_2056;
        let x_2058 : f32 = u_xlat19.w;
        let x_2059 : f32 = u_xlat66;
        let x_2062 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2058 * x_2059) + x_2062);
        let x_2066 : vec4<f32> = u_xlat11;
        let x_2067 : vec2<f32> = vec2<f32>(x_2066.x, x_2066.y);
        let x_2069 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_2067.x, x_2067.y, x_2069);
        let x_2076 : vec3<f32> = txVec25;
        let x_2078 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2076.xy, x_2076.z);
        u_xlat66 = x_2078;
        let x_2080 : f32 = u_xlat7.x;
        let x_2081 : f32 = u_xlat66;
        let x_2084 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2080 * x_2081) + x_2084);
        let x_2088 : vec4<f32> = u_xlat11;
        let x_2089 : vec2<f32> = vec2<f32>(x_2088.z, x_2088.w);
        let x_2091 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_2089.x, x_2089.y, x_2091);
        let x_2098 : vec3<f32> = txVec26;
        let x_2100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2098.xy, x_2098.z);
        u_xlat66 = x_2100;
        let x_2102 : f32 = u_xlat7.y;
        let x_2103 : f32 = u_xlat66;
        let x_2106 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2102 * x_2103) + x_2106);
        let x_2110 : vec2<f32> = u_xlat49;
        let x_2112 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_2110.x, x_2110.y, x_2112);
        let x_2119 : vec3<f32> = txVec27;
        let x_2121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2119.xy, x_2119.z);
        u_xlat66 = x_2121;
        let x_2123 : f32 = u_xlat7.z;
        let x_2124 : f32 = u_xlat66;
        let x_2127 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2123 * x_2124) + x_2127);
        let x_2131 : vec4<f32> = u_xlat6;
        let x_2132 : vec2<f32> = vec2<f32>(x_2131.x, x_2131.y);
        let x_2134 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_2132.x, x_2132.y, x_2134);
        let x_2141 : vec3<f32> = txVec28;
        let x_2143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2141.xy, x_2141.z);
        u_xlat6.x = x_2143;
        let x_2146 : f32 = u_xlat7.w;
        let x_2148 : f32 = u_xlat6.x;
        let x_2151 : f32 = u_xlat46.x;
        u_xlat65 = ((x_2146 * x_2148) + x_2151);
      }
    }
  } else {
    let x_2155 : vec4<f32> = vs_INTERP8;
    let x_2156 : vec2<f32> = vec2<f32>(x_2155.x, x_2155.y);
    let x_2158 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_2156.x, x_2156.y, x_2158);
    let x_2165 : vec3<f32> = txVec29;
    let x_2167 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2165.xy, x_2165.z);
    u_xlat65 = x_2167;
  }
  let x_2169 : f32 = x_907.x_MainLightShadowParams.x;
  u_xlat6.x = (-(x_2169) + 1.0f);
  let x_2173 : f32 = u_xlat65;
  let x_2175 : f32 = x_907.x_MainLightShadowParams.x;
  let x_2178 : f32 = u_xlat6.x;
  u_xlat65 = ((x_2173 * x_2175) + x_2178);
  let x_2181 : f32 = vs_INTERP8.z;
  u_xlatb6 = (0.0f >= x_2181);
  let x_2185 : f32 = vs_INTERP8.z;
  u_xlatb26 = (x_2185 >= 1.0f);
  let x_2187 : bool = u_xlatb26;
  let x_2188 : bool = u_xlatb6;
  u_xlatb6 = (x_2187 | x_2188);
  let x_2190 : bool = u_xlatb6;
  let x_2191 : f32 = u_xlat65;
  u_xlat65 = select(x_2191, 1.0f, x_2190);
  let x_2193 : vec3<f32> = vs_INTERP0;
  let x_2195 : vec3<f32> = x_146.x_WorldSpaceCameraPos;
  let x_2197 : vec3<f32> = (x_2193 + -(x_2195));
  let x_2198 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2197.x, x_2197.y, x_2197.z, x_2198.w);
  let x_2200 : vec4<f32> = u_xlat6;
  let x_2202 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_2200.x, x_2200.y, x_2200.z), vec3<f32>(x_2202.x, x_2202.y, x_2202.z));
  let x_2207 : f32 = u_xlat6.x;
  let x_2209 : f32 = x_907.x_MainLightShadowParams.z;
  let x_2212 : f32 = x_907.x_MainLightShadowParams.w;
  u_xlat6.x = ((x_2207 * x_2209) + x_2212);
  let x_2216 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_2216, 0.0f, 1.0f);
  let x_2219 : f32 = u_xlat65;
  u_xlat26 = (-(x_2219) + 1.0f);
  let x_2223 : f32 = u_xlat6.x;
  let x_2224 : f32 = u_xlat26;
  let x_2226 : f32 = u_xlat65;
  u_xlat65 = ((x_2223 * x_2224) + x_2226);
  let x_2228 : f32 = u_xlat64;
  let x_2231 : vec4<f32> = x_146.x_MainLightColor;
  let x_2233 : vec3<f32> = (vec3<f32>(x_2228, x_2228, x_2228) * vec3<f32>(x_2231.x, x_2231.y, x_2231.z));
  let x_2234 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2233.x, x_2233.y, x_2233.z, x_2234.w);
  let x_2236 : vec3<f32> = u_xlat20;
  let x_2238 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(-(x_2236), vec3<f32>(x_2238.x, x_2238.y, x_2238.z));
  let x_2241 : f32 = u_xlat66;
  let x_2242 : f32 = u_xlat66;
  u_xlat66 = (x_2241 + x_2242);
  let x_2244 : vec4<f32> = u_xlat4;
  let x_2246 : f32 = u_xlat66;
  let x_2250 : vec3<f32> = u_xlat20;
  let x_2252 : vec3<f32> = ((vec3<f32>(x_2244.x, x_2244.y, x_2244.z) * -(vec3<f32>(x_2246, x_2246, x_2246))) + -(x_2250));
  let x_2253 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2252.x, x_2252.y, x_2252.z, x_2253.w);
  let x_2255 : vec4<f32> = u_xlat4;
  let x_2257 : vec3<f32> = u_xlat20;
  u_xlat66 = dot(vec3<f32>(x_2255.x, x_2255.y, x_2255.z), x_2257);
  let x_2259 : f32 = u_xlat66;
  u_xlat66 = clamp(x_2259, 0.0f, 1.0f);
  let x_2261 : f32 = u_xlat66;
  u_xlat66 = (-(x_2261) + 1.0f);
  let x_2264 : f32 = u_xlat66;
  let x_2265 : f32 = u_xlat66;
  u_xlat66 = (x_2264 * x_2265);
  let x_2267 : f32 = u_xlat66;
  let x_2268 : f32 = u_xlat66;
  u_xlat66 = (x_2267 * x_2268);
  let x_2272 : f32 = u_xlat2.x;
  u_xlat67 = ((-(x_2272) * 0.699999988f) + 1.700000048f);
  let x_2279 : f32 = u_xlat2.x;
  let x_2280 : f32 = u_xlat67;
  u_xlat2.x = (x_2279 * x_2280);
  let x_2284 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2284 * 6.0f);
  let x_2296 : vec4<f32> = u_xlat7;
  let x_2299 : f32 = u_xlat2.x;
  let x_2300 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2296.x, x_2296.y, x_2296.z), x_2299);
  u_xlat7 = x_2300;
  let x_2302 : f32 = u_xlat7.w;
  u_xlat2.x = (x_2302 + -1.0f);
  let x_2306 : f32 = x_59.unity_SpecCube0_HDR.w;
  let x_2308 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2306 * x_2308) + 1.0f);
  let x_2313 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_2313, 0.0f);
  let x_2317 : f32 = u_xlat2.x;
  u_xlat2.x = log2(x_2317);
  let x_2321 : f32 = u_xlat2.x;
  let x_2323 : f32 = x_59.unity_SpecCube0_HDR.y;
  u_xlat2.x = (x_2321 * x_2323);
  let x_2327 : f32 = u_xlat2.x;
  u_xlat2.x = exp2(x_2327);
  let x_2331 : f32 = u_xlat2.x;
  let x_2333 : f32 = x_59.unity_SpecCube0_HDR.x;
  u_xlat2.x = (x_2331 * x_2333);
  let x_2336 : vec4<f32> = u_xlat7;
  let x_2338 : vec3<f32> = u_xlat2;
  let x_2340 : vec3<f32> = (vec3<f32>(x_2336.x, x_2336.y, x_2336.z) * vec3<f32>(x_2338.x, x_2338.x, x_2338.x));
  let x_2341 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2340.x, x_2340.y, x_2340.z, x_2341.w);
  let x_2343 : f32 = u_xlat22;
  let x_2345 : f32 = u_xlat22;
  let x_2349 : vec2<f32> = ((vec2<f32>(x_2343, x_2343) * vec2<f32>(x_2345, x_2345)) + vec2<f32>(-1.0f, 1.0f));
  let x_2350 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2349.x, x_2349.y, x_2350.z);
  let x_2353 : f32 = u_xlat2.y;
  u_xlat22 = (1.0f / x_2353);
  let x_2355 : vec3<f32> = u_xlat21;
  let x_2357 : vec4<f32> = u_xlat0;
  let x_2359 : vec3<f32> = (-(x_2355) + vec3<f32>(x_2357.x, x_2357.x, x_2357.x));
  let x_2360 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2359.x, x_2359.y, x_2359.z, x_2360.w);
  let x_2362 : f32 = u_xlat66;
  let x_2364 : vec4<f32> = u_xlat8;
  let x_2367 : vec3<f32> = u_xlat21;
  let x_2368 : vec3<f32> = ((vec3<f32>(x_2362, x_2362, x_2362) * vec3<f32>(x_2364.x, x_2364.y, x_2364.z)) + x_2367);
  let x_2369 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2368.x, x_2368.y, x_2368.z, x_2369.w);
  let x_2371 : f32 = u_xlat22;
  let x_2373 : vec4<f32> = u_xlat8;
  let x_2375 : vec3<f32> = (vec3<f32>(x_2371, x_2371, x_2371) * vec3<f32>(x_2373.x, x_2373.y, x_2373.z));
  let x_2376 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2375.x, x_2375.y, x_2375.z, x_2376.w);
  let x_2378 : vec4<f32> = u_xlat7;
  let x_2380 : vec4<f32> = u_xlat8;
  let x_2382 : vec3<f32> = (vec3<f32>(x_2378.x, x_2378.y, x_2378.z) * vec3<f32>(x_2380.x, x_2380.y, x_2380.z));
  let x_2383 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2382.x, x_2382.y, x_2382.z, x_2383.w);
  let x_2385 : vec3<f32> = u_xlat5;
  let x_2386 : vec3<f32> = u_xlat3;
  let x_2388 : vec4<f32> = u_xlat7;
  u_xlat5 = ((x_2385 * x_2386) + vec3<f32>(x_2388.x, x_2388.y, x_2388.z));
  let x_2391 : f32 = u_xlat65;
  let x_2393 : f32 = x_59.unity_LightData.z;
  u_xlat0.x = (x_2391 * x_2393);
  let x_2396 : vec4<f32> = u_xlat4;
  let x_2399 : vec4<f32> = x_146.x_MainLightPosition;
  u_xlat22 = dot(vec3<f32>(x_2396.x, x_2396.y, x_2396.z), vec3<f32>(x_2399.x, x_2399.y, x_2399.z));
  let x_2402 : f32 = u_xlat22;
  u_xlat22 = clamp(x_2402, 0.0f, 1.0f);
  let x_2405 : f32 = u_xlat0.x;
  let x_2406 : f32 = u_xlat22;
  u_xlat0.x = (x_2405 * x_2406);
  let x_2409 : vec4<f32> = u_xlat0;
  let x_2411 : vec4<f32> = u_xlat6;
  let x_2413 : vec3<f32> = (vec3<f32>(x_2409.x, x_2409.x, x_2409.x) * vec3<f32>(x_2411.x, x_2411.y, x_2411.z));
  let x_2414 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2413.x, x_2413.y, x_2413.z, x_2414.w);
  let x_2416 : vec3<f32> = u_xlat20;
  let x_2418 : vec4<f32> = x_146.x_MainLightPosition;
  let x_2420 : vec3<f32> = (x_2416 + vec3<f32>(x_2418.x, x_2418.y, x_2418.z));
  let x_2421 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2420.x, x_2420.y, x_2420.z, x_2421.w);
  let x_2423 : vec4<f32> = u_xlat7;
  let x_2425 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(vec3<f32>(x_2423.x, x_2423.y, x_2423.z), vec3<f32>(x_2425.x, x_2425.y, x_2425.z));
  let x_2430 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2430, 1.17549435e-37f);
  let x_2434 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_2434);
  let x_2437 : vec4<f32> = u_xlat0;
  let x_2439 : vec4<f32> = u_xlat7;
  let x_2441 : vec3<f32> = (vec3<f32>(x_2437.x, x_2437.x, x_2437.x) * vec3<f32>(x_2439.x, x_2439.y, x_2439.z));
  let x_2442 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2441.x, x_2441.y, x_2441.z, x_2442.w);
  let x_2444 : vec4<f32> = u_xlat4;
  let x_2446 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(vec3<f32>(x_2444.x, x_2444.y, x_2444.z), vec3<f32>(x_2446.x, x_2446.y, x_2446.z));
  let x_2451 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_2451, 0.0f, 1.0f);
  let x_2455 : vec4<f32> = x_146.x_MainLightPosition;
  let x_2457 : vec4<f32> = u_xlat7;
  u_xlat22 = dot(vec3<f32>(x_2455.x, x_2455.y, x_2455.z), vec3<f32>(x_2457.x, x_2457.y, x_2457.z));
  let x_2460 : f32 = u_xlat22;
  u_xlat22 = clamp(x_2460, 0.0f, 1.0f);
  let x_2463 : f32 = u_xlat0.x;
  let x_2465 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2463 * x_2465);
  let x_2469 : f32 = u_xlat0.x;
  let x_2471 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_2469 * x_2471) + 1.000010014f);
  let x_2476 : f32 = u_xlat22;
  let x_2477 : f32 = u_xlat22;
  u_xlat22 = (x_2476 * x_2477);
  let x_2480 : f32 = u_xlat0.x;
  let x_2482 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2480 * x_2482);
  let x_2485 : f32 = u_xlat22;
  u_xlat22 = max(x_2485, 0.100000001f);
  let x_2488 : f32 = u_xlat0.x;
  let x_2489 : f32 = u_xlat22;
  u_xlat0.x = (x_2488 * x_2489);
  let x_2492 : f32 = u_xlat62;
  let x_2494 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2492 * x_2494);
  let x_2497 : f32 = u_xlat42;
  let x_2499 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2497 / x_2499);
  let x_2502 : vec3<f32> = u_xlat21;
  let x_2503 : vec4<f32> = u_xlat0;
  let x_2506 : vec3<f32> = u_xlat3;
  let x_2507 : vec3<f32> = ((x_2502 * vec3<f32>(x_2503.x, x_2503.x, x_2503.x)) + x_2506);
  let x_2508 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2507.x, x_2507.y, x_2507.z, x_2508.w);
  let x_2510 : vec4<f32> = u_xlat6;
  let x_2512 : vec4<f32> = u_xlat7;
  let x_2514 : vec3<f32> = (vec3<f32>(x_2510.x, x_2510.y, x_2510.z) * vec3<f32>(x_2512.x, x_2512.y, x_2512.z));
  let x_2515 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2514.x, x_2514.y, x_2514.z, x_2515.w);
  let x_2518 : f32 = x_146.x_AdditionalLightsCount.x;
  let x_2520 : f32 = x_59.unity_LightData.y;
  u_xlat0.x = min(x_2518, x_2520);
  let x_2526 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_2526));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2538 : u32 = u_xlatu_loop_1;
    let x_2539 : u32 = u_xlatu0;
    if ((x_2538 < x_2539)) {
    } else {
      break;
    }
    let x_2542 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_2542 >> 2u);
    let x_2546 : u32 = u_xlatu_loop_1;
    u_xlati66 = bitcast<i32>((x_2546 & 3u));
    let x_2549 : u32 = u_xlatu65;
    let x_2552 : vec4<f32> = x_59.unity_LightIndices[bitcast<i32>(x_2549)];
    let x_2562 : i32 = u_xlati66;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2567 : vec4<u32> = indexable[x_2562];
    u_xlat65 = dot(x_2552, bitcast<vec4<f32>>(x_2567));
    let x_2571 : f32 = u_xlat65;
    u_xlati65 = i32(x_2571);
    let x_2573 : vec3<f32> = vs_INTERP0;
    let x_2585 : i32 = u_xlati65;
    let x_2587 : vec4<f32> = x_2584.x_AdditionalLightsPosition[x_2585];
    let x_2590 : i32 = u_xlati65;
    let x_2592 : vec4<f32> = x_2584.x_AdditionalLightsPosition[x_2590];
    let x_2594 : vec3<f32> = ((-(x_2573) * vec3<f32>(x_2587.w, x_2587.w, x_2587.w)) + vec3<f32>(x_2592.x, x_2592.y, x_2592.z));
    let x_2595 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2594.x, x_2594.y, x_2594.z, x_2595.w);
    let x_2597 : vec4<f32> = u_xlat8;
    let x_2599 : vec4<f32> = u_xlat8;
    u_xlat66 = dot(vec3<f32>(x_2597.x, x_2597.y, x_2597.z), vec3<f32>(x_2599.x, x_2599.y, x_2599.z));
    let x_2602 : f32 = u_xlat66;
    u_xlat66 = max(x_2602, 6.10351562e-05f);
    let x_2605 : f32 = u_xlat66;
    u_xlat67 = inverseSqrt(x_2605);
    let x_2607 : f32 = u_xlat67;
    let x_2609 : vec4<f32> = u_xlat8;
    let x_2611 : vec3<f32> = (vec3<f32>(x_2607, x_2607, x_2607) * vec3<f32>(x_2609.x, x_2609.y, x_2609.z));
    let x_2612 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2611.x, x_2611.y, x_2611.z, x_2612.w);
    let x_2614 : f32 = u_xlat66;
    u_xlat68 = (1.0f / x_2614);
    let x_2616 : f32 = u_xlat66;
    let x_2617 : i32 = u_xlati65;
    let x_2619 : f32 = x_2584.x_AdditionalLightsAttenuation[x_2617].x;
    u_xlat66 = (x_2616 * x_2619);
    let x_2621 : f32 = u_xlat66;
    let x_2623 : f32 = u_xlat66;
    u_xlat66 = ((-(x_2621) * x_2623) + 1.0f);
    let x_2626 : f32 = u_xlat66;
    u_xlat66 = max(x_2626, 0.0f);
    let x_2628 : f32 = u_xlat66;
    let x_2629 : f32 = u_xlat66;
    u_xlat66 = (x_2628 * x_2629);
    let x_2631 : f32 = u_xlat66;
    let x_2632 : f32 = u_xlat68;
    u_xlat66 = (x_2631 * x_2632);
    let x_2634 : i32 = u_xlati65;
    let x_2636 : vec4<f32> = x_2584.x_AdditionalLightsSpotDir[x_2634];
    let x_2638 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_2636.x, x_2636.y, x_2636.z), vec3<f32>(x_2638.x, x_2638.y, x_2638.z));
    let x_2641 : f32 = u_xlat68;
    let x_2642 : i32 = u_xlati65;
    let x_2644 : f32 = x_2584.x_AdditionalLightsAttenuation[x_2642].z;
    let x_2646 : i32 = u_xlati65;
    let x_2648 : f32 = x_2584.x_AdditionalLightsAttenuation[x_2646].w;
    u_xlat68 = ((x_2641 * x_2644) + x_2648);
    let x_2650 : f32 = u_xlat68;
    u_xlat68 = clamp(x_2650, 0.0f, 1.0f);
    let x_2652 : f32 = u_xlat68;
    let x_2653 : f32 = u_xlat68;
    u_xlat68 = (x_2652 * x_2653);
    let x_2655 : f32 = u_xlat66;
    let x_2656 : f32 = u_xlat68;
    u_xlat66 = (x_2655 * x_2656);
    let x_2658 : f32 = u_xlat64;
    let x_2660 : i32 = u_xlati65;
    let x_2662 : vec4<f32> = x_2584.x_AdditionalLightsColor[x_2660];
    let x_2664 : vec3<f32> = (vec3<f32>(x_2658, x_2658, x_2658) * vec3<f32>(x_2662.x, x_2662.y, x_2662.z));
    let x_2665 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2664.x, x_2664.y, x_2664.z, x_2665.w);
    let x_2667 : vec4<f32> = u_xlat4;
    let x_2669 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2667.x, x_2667.y, x_2667.z), vec3<f32>(x_2669.x, x_2669.y, x_2669.z));
    let x_2672 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2672, 0.0f, 1.0f);
    let x_2674 : f32 = u_xlat65;
    let x_2675 : f32 = u_xlat66;
    u_xlat65 = (x_2674 * x_2675);
    let x_2677 : f32 = u_xlat65;
    let x_2679 : vec4<f32> = u_xlat10;
    let x_2681 : vec3<f32> = (vec3<f32>(x_2677, x_2677, x_2677) * vec3<f32>(x_2679.x, x_2679.y, x_2679.z));
    let x_2682 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2681.x, x_2681.y, x_2681.z, x_2682.w);
    let x_2684 : vec4<f32> = u_xlat8;
    let x_2686 : f32 = u_xlat67;
    let x_2689 : vec3<f32> = u_xlat20;
    let x_2690 : vec3<f32> = ((vec3<f32>(x_2684.x, x_2684.y, x_2684.z) * vec3<f32>(x_2686, x_2686, x_2686)) + x_2689);
    let x_2691 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2690.x, x_2690.y, x_2690.z, x_2691.w);
    let x_2693 : vec4<f32> = u_xlat8;
    let x_2695 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(vec3<f32>(x_2693.x, x_2693.y, x_2693.z), vec3<f32>(x_2695.x, x_2695.y, x_2695.z));
    let x_2698 : f32 = u_xlat65;
    u_xlat65 = max(x_2698, 1.17549435e-37f);
    let x_2700 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_2700);
    let x_2702 : f32 = u_xlat65;
    let x_2704 : vec4<f32> = u_xlat8;
    let x_2706 : vec3<f32> = (vec3<f32>(x_2702, x_2702, x_2702) * vec3<f32>(x_2704.x, x_2704.y, x_2704.z));
    let x_2707 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2706.x, x_2706.y, x_2706.z, x_2707.w);
    let x_2709 : vec4<f32> = u_xlat4;
    let x_2711 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(vec3<f32>(x_2709.x, x_2709.y, x_2709.z), vec3<f32>(x_2711.x, x_2711.y, x_2711.z));
    let x_2714 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2714, 0.0f, 1.0f);
    let x_2716 : vec4<f32> = u_xlat9;
    let x_2718 : vec4<f32> = u_xlat8;
    u_xlat66 = dot(vec3<f32>(x_2716.x, x_2716.y, x_2716.z), vec3<f32>(x_2718.x, x_2718.y, x_2718.z));
    let x_2721 : f32 = u_xlat66;
    u_xlat66 = clamp(x_2721, 0.0f, 1.0f);
    let x_2723 : f32 = u_xlat65;
    let x_2724 : f32 = u_xlat65;
    u_xlat65 = (x_2723 * x_2724);
    let x_2726 : f32 = u_xlat65;
    let x_2728 : f32 = u_xlat2.x;
    u_xlat65 = ((x_2726 * x_2728) + 1.000010014f);
    let x_2731 : f32 = u_xlat66;
    let x_2732 : f32 = u_xlat66;
    u_xlat66 = (x_2731 * x_2732);
    let x_2734 : f32 = u_xlat65;
    let x_2735 : f32 = u_xlat65;
    u_xlat65 = (x_2734 * x_2735);
    let x_2737 : f32 = u_xlat66;
    u_xlat66 = max(x_2737, 0.100000001f);
    let x_2739 : f32 = u_xlat65;
    let x_2740 : f32 = u_xlat66;
    u_xlat65 = (x_2739 * x_2740);
    let x_2742 : f32 = u_xlat62;
    let x_2743 : f32 = u_xlat65;
    u_xlat65 = (x_2742 * x_2743);
    let x_2745 : f32 = u_xlat42;
    let x_2746 : f32 = u_xlat65;
    u_xlat65 = (x_2745 / x_2746);
    let x_2748 : vec3<f32> = u_xlat21;
    let x_2749 : f32 = u_xlat65;
    let x_2752 : vec3<f32> = u_xlat3;
    let x_2753 : vec3<f32> = ((x_2748 * vec3<f32>(x_2749, x_2749, x_2749)) + x_2752);
    let x_2754 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2753.x, x_2753.y, x_2753.z, x_2754.w);
    let x_2756 : vec4<f32> = u_xlat8;
    let x_2758 : vec4<f32> = u_xlat10;
    let x_2761 : vec4<f32> = u_xlat7;
    let x_2763 : vec3<f32> = ((vec3<f32>(x_2756.x, x_2756.y, x_2756.z) * vec3<f32>(x_2758.x, x_2758.y, x_2758.z)) + vec3<f32>(x_2761.x, x_2761.y, x_2761.z));
    let x_2764 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2763.x, x_2763.y, x_2763.z, x_2764.w);

    continuing {
      let x_2766 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2766 + bitcast<u32>(1i));
    }
  }
  let x_2768 : vec3<f32> = u_xlat5;
  let x_2769 : f32 = u_xlat63;
  let x_2772 : vec4<f32> = u_xlat6;
  let x_2774 : vec3<f32> = ((x_2768 * vec3<f32>(x_2769, x_2769, x_2769)) + vec3<f32>(x_2772.x, x_2772.y, x_2772.z));
  let x_2775 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2774.x, x_2774.y, x_2774.z, x_2775.w);
  let x_2777 : vec4<f32> = u_xlat7;
  let x_2779 : vec4<f32> = u_xlat0;
  let x_2781 : vec3<f32> = (vec3<f32>(x_2777.x, x_2777.y, x_2777.z) + vec3<f32>(x_2779.x, x_2779.y, x_2779.z));
  let x_2782 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2781.x, x_2781.y, x_2781.z, x_2782.w);
  let x_2786 : f32 = u_xlat1.x;
  let x_2788 : f32 = u_xlat1.x;
  u_xlat60 = (x_2786 * -(x_2788));
  let x_2791 : f32 = u_xlat60;
  u_xlat60 = exp2(x_2791);
  let x_2793 : vec4<f32> = u_xlat0;
  let x_2797 : vec4<f32> = x_146.unity_FogColor;
  let x_2800 : vec3<f32> = (vec3<f32>(x_2793.x, x_2793.y, x_2793.z) + -(vec3<f32>(x_2797.x, x_2797.y, x_2797.z)));
  let x_2801 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2800.x, x_2800.y, x_2800.z, x_2801.w);
  let x_2805 : f32 = u_xlat60;
  let x_2807 : vec4<f32> = u_xlat0;
  let x_2811 : vec4<f32> = x_146.unity_FogColor;
  let x_2813 : vec3<f32> = ((vec3<f32>(x_2805, x_2805, x_2805) * vec3<f32>(x_2807.x, x_2807.y, x_2807.z)) + vec3<f32>(x_2811.x, x_2811.y, x_2811.z));
  let x_2814 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2813.x, x_2813.y, x_2813.z, x_2814.w);
  let x_2818 : u32 = x_146.x_RenderingLayerMaxInt;
  let x_2820 : f32 = x_59.unity_RenderingLayer.x;
  u_xlatu0 = (x_2818 & bitcast<u32>(x_2820));
  let x_2823 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_2823);
  let x_2828 : f32 = u_xlat0.x;
  let x_2830 : f32 = x_146.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_2828 * x_2830);
  let x_2835 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_2835, 0.0f, 1.0f);
  SV_Target0.w = 1.0f;
  let x_2839 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_2839.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

