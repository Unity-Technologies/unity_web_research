type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_158 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_277 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_378 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3721 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_184 : f32;
  var x_197 : f32;
  var x_209 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb46 : bool;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var x_1719 : f32;
  var u_xlatu3 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu68 : u32;
  var u_xlati46 : i32;
  var u_xlat46 : vec2<f32>;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var x_1843 : f32;
  var x_1896 : f32;
  var u_xlat69 : f32;
  var u_xlat26 : vec2<f32>;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat71 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : bool;
  var x_3305 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlati26 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_148 : vec3<f32> = u_xlat22;
  let x_149 : vec3<f32> = u_xlat0;
  let x_151 : vec3<f32> = (x_148 * vec3<f32>(x_149.x, x_149.x, x_149.x));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_151.z, x_152.w);
  let x_161 : f32 = x_158.unity_OrthoParams.w;
  u_xlatb0 = (x_161 == 0.0f);
  let x_165 : vec3<f32> = vs_INTERP0;
  let x_170 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_165) + x_170);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_173, x_174);
  let x_176 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_176);
  let x_178 : f32 = u_xlat67;
  let x_180 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_178, x_178, x_178) * x_180);
  let x_183 : bool = u_xlatb0;
  if (x_183) {
    let x_188 : f32 = u_xlat4.x;
    x_184 = x_188;
  } else {
    let x_193 : f32 = x_158.unity_MatrixV[0i].z;
    x_184 = x_193;
  }
  let x_194 : f32 = x_184;
  u_xlat5.x = x_194;
  let x_196 : bool = u_xlatb0;
  if (x_196) {
    let x_201 : f32 = u_xlat4.y;
    x_197 = x_201;
  } else {
    let x_205 : f32 = x_158.unity_MatrixV[1i].z;
    x_197 = x_205;
  }
  let x_206 : f32 = x_197;
  u_xlat5.y = x_206;
  let x_208 : bool = u_xlatb0;
  if (x_208) {
    let x_213 : f32 = u_xlat4.z;
    x_209 = x_213;
  } else {
    let x_217 : f32 = x_158.unity_MatrixV[2i].z;
    x_209 = x_217;
  }
  let x_218 : f32 = x_209;
  u_xlat5.z = x_218;
  let x_220 : vec3<f32> = u_xlat5;
  let x_224 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat4 = (vec3<f32>(x_220.y, x_220.y, x_220.y) * vec3<f32>(x_224.x, x_224.y, x_224.z));
  let x_228 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_230 : vec3<f32> = u_xlat5;
  let x_233 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_230.x, x_230.x, x_230.x)) + x_233);
  let x_236 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_238 : vec3<f32> = u_xlat5;
  let x_241 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_236.x, x_236.y, x_236.z) * vec3<f32>(x_238.z, x_238.z, x_238.z)) + x_241);
  let x_243 : vec3<f32> = u_xlat4;
  let x_244 : vec3<f32> = u_xlat4;
  u_xlat0.x = dot(x_243, x_244);
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_248);
  let x_251 : vec3<f32> = u_xlat0;
  let x_253 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_251.x, x_251.x, x_251.x) * x_253);
  let x_267 : vec4<f32> = vs_INTERP3;
  let x_270 : f32 = x_158.x_GlobalMipBias.x;
  let x_271 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_267.x, x_267.y), x_270);
  u_xlat6 = x_271;
  let x_273 : vec4<f32> = u_xlat6;
  let x_279 : vec4<f32> = x_277.Color_C30C7CA3;
  let x_281 : vec3<f32> = (vec3<f32>(x_273.x, x_273.y, x_273.z) * vec3<f32>(x_279.x, x_279.y, x_279.z));
  let x_282 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_290 : vec4<f32> = vs_INTERP3;
  let x_293 : f32 = x_158.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat8 = vec4<f32>(x_294.w, x_294.x, x_294.y, x_294.z);
  let x_297 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_297.y, x_297.z, x_297.w, x_297.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_304 : vec4<f32> = u_xlat9;
  let x_305 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_304, x_305);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_309);
  let x_313 : vec3<f32> = u_xlat0;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_313.x, x_313.x, x_313.x) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_320 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_320 * 200.0f);
  let x_325 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_325, 1.0f);
  let x_328 : vec3<f32> = u_xlat0;
  let x_330 : vec4<f32> = u_xlat6;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.x, x_328.x, x_328.x) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = u_xlat30;
  let x_339 : vec3<f32> = (vec3<f32>(x_335.x, x_335.y, x_335.z) * vec3<f32>(x_337.y, x_337.y, x_337.y));
  let x_340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_339.x, x_339.y, x_339.z, x_340.w);
  let x_342 : vec3<f32> = u_xlat30;
  let x_344 : vec3<f32> = u_xlat2;
  let x_346 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_342.x, x_342.x, x_342.x) * x_344) + vec3<f32>(x_346.x, x_346.y, x_346.z));
  let x_349 : vec3<f32> = u_xlat30;
  let x_351 : vec3<f32> = u_xlat1;
  let x_353 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_349.z, x_349.z, x_349.z) * x_351) + x_353);
  let x_355 : vec3<f32> = u_xlat1;
  let x_356 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_355, x_356);
  let x_360 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_360, 1.17549435e-37f);
  let x_365 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_365);
  let x_368 : vec3<f32> = u_xlat0;
  let x_370 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_368.x, x_368.x, x_368.x) * x_370);
  let x_372 : vec3<f32> = vs_INTERP0;
  let x_380 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_372.y, x_372.y, x_372.y) * vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_384 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][0i];
  let x_386 : vec3<f32> = vs_INTERP0;
  let x_389 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_384.x, x_384.y, x_384.z) * vec3<f32>(x_386.x, x_386.x, x_386.x)) + x_389);
  let x_392 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][2i];
  let x_394 : vec3<f32> = vs_INTERP0;
  let x_397 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_392.x, x_392.y, x_392.z) * vec3<f32>(x_394.z, x_394.z, x_394.z)) + x_397);
  let x_399 : vec3<f32> = u_xlat2;
  let x_401 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_399 + vec3<f32>(x_401.x, x_401.y, x_401.z));
  let x_406 : f32 = x_378.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_406);
  let x_408 : bool = u_xlatb0;
  if (x_408) {
    let x_413 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb67 = (x_413 == 1.0f);
    let x_415 : bool = u_xlatb67;
    if (x_415) {
      let x_418 : vec3<f32> = u_xlat2;
      let x_422 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_418.x, x_418.y, x_418.x, x_418.y) + x_422);
      let x_425 : vec4<f32> = u_xlat3;
      let x_426 : vec2<f32> = vec2<f32>(x_425.x, x_425.y);
      let x_428 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_426.x, x_426.y, x_428);
      let x_440 : vec3<f32> = txVec0;
      let x_442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_440.xy, x_440.z);
      u_xlat9.x = x_442;
      let x_445 : vec4<f32> = u_xlat3;
      let x_446 : vec2<f32> = vec2<f32>(x_445.z, x_445.w);
      let x_448 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_446.x, x_446.y, x_448);
      let x_455 : vec3<f32> = txVec1;
      let x_457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_455.xy, x_455.z);
      u_xlat9.y = x_457;
      let x_459 : vec3<f32> = u_xlat2;
      let x_462 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_462);
      let x_465 : vec4<f32> = u_xlat3;
      let x_466 : vec2<f32> = vec2<f32>(x_465.x, x_465.y);
      let x_468 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_466.x, x_466.y, x_468);
      let x_475 : vec3<f32> = txVec2;
      let x_477 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_475.xy, x_475.z);
      u_xlat9.z = x_477;
      let x_480 : vec4<f32> = u_xlat3;
      let x_481 : vec2<f32> = vec2<f32>(x_480.z, x_480.w);
      let x_483 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_481.x, x_481.y, x_483);
      let x_490 : vec3<f32> = txVec3;
      let x_492 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_490.xy, x_490.z);
      u_xlat9.w = x_492;
      let x_494 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_494, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_501 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb68 = (x_501 == 2.0f);
      let x_503 : bool = u_xlatb68;
      if (x_503) {
        let x_506 : vec3<f32> = u_xlat2;
        let x_509 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_514 : vec2<f32> = ((vec2<f32>(x_506.x, x_506.y) * vec2<f32>(x_509.z, x_509.w)) + vec2<f32>(0.5f, 0.5f));
        let x_515 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_514.x, x_514.y, x_515.z, x_515.w);
        let x_517 : vec4<f32> = u_xlat3;
        let x_519 : vec2<f32> = floor(vec2<f32>(x_517.x, x_517.y));
        let x_520 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
        let x_524 : vec3<f32> = u_xlat2;
        let x_527 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_524.x, x_524.y) * vec2<f32>(x_527.z, x_527.w)) + -(vec2<f32>(x_530.x, x_530.y)));
        let x_534 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_534.x, x_534.x, x_534.y, x_534.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_539 : vec4<f32> = u_xlat9;
        let x_541 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_539.x, x_539.x, x_539.z, x_539.z) * vec4<f32>(x_541.x, x_541.x, x_541.z, x_541.z));
        let x_544 : vec4<f32> = u_xlat10;
        let x_548 : vec2<f32> = (vec2<f32>(x_544.y, x_544.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_549 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_548.x, x_549.y, x_548.y, x_549.w);
        let x_551 : vec4<f32> = u_xlat10;
        let x_554 : vec2<f32> = u_xlat47;
        let x_556 : vec2<f32> = ((vec2<f32>(x_551.x, x_551.z) * vec2<f32>(0.5f, 0.5f)) + -(x_554));
        let x_557 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_556.x, x_556.y, x_557.z, x_557.w);
        let x_560 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_560) + vec2<f32>(1.0f, 1.0f));
        let x_565 : vec2<f32> = u_xlat47;
        let x_567 : vec2<f32> = min(x_565, vec2<f32>(0.0f, 0.0f));
        let x_568 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_567.x, x_567.y, x_568.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat11;
        let x_573 : vec4<f32> = u_xlat11;
        let x_576 : vec2<f32> = u_xlat54;
        let x_577 : vec2<f32> = ((-(vec2<f32>(x_570.x, x_570.y)) * vec2<f32>(x_573.x, x_573.y)) + x_576);
        let x_578 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_577.x, x_577.y, x_578.z, x_578.w);
        let x_580 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_580, vec2<f32>(0.0f, 0.0f));
        let x_582 : vec2<f32> = u_xlat47;
        let x_584 : vec2<f32> = u_xlat47;
        let x_586 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_582) * x_584) + vec2<f32>(x_586.y, x_586.w));
        let x_589 : vec4<f32> = u_xlat11;
        let x_591 : vec2<f32> = (vec2<f32>(x_589.x, x_589.y) + vec2<f32>(1.0f, 1.0f));
        let x_592 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_591.x, x_591.y, x_592.z, x_592.w);
        let x_594 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_594 + vec2<f32>(1.0f, 1.0f));
        let x_597 : vec4<f32> = u_xlat10;
        let x_601 : vec2<f32> = (vec2<f32>(x_597.x, x_597.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_602 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_601.x, x_601.y, x_602.z, x_602.w);
        let x_604 : vec2<f32> = u_xlat54;
        let x_605 : vec2<f32> = (x_604 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_606 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_605.x, x_605.y, x_606.z, x_606.w);
        let x_608 : vec4<f32> = u_xlat11;
        let x_610 : vec2<f32> = (vec2<f32>(x_608.x, x_608.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_611 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_614 : vec2<f32> = u_xlat47;
        let x_615 : vec2<f32> = (x_614 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_616 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_615.x, x_615.y, x_616.z, x_616.w);
        let x_618 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_618.y, x_618.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_622 : f32 = u_xlat11.x;
        u_xlat12.z = x_622;
        let x_625 : f32 = u_xlat47.x;
        u_xlat12.w = x_625;
        let x_628 : f32 = u_xlat13.x;
        u_xlat10.z = x_628;
        let x_631 : f32 = u_xlat9.x;
        u_xlat10.w = x_631;
        let x_634 : vec4<f32> = u_xlat10;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_634.z, x_634.w, x_634.x, x_634.z) + vec4<f32>(x_636.z, x_636.w, x_636.x, x_636.z));
        let x_640 : f32 = u_xlat12.y;
        u_xlat11.z = x_640;
        let x_643 : f32 = u_xlat47.y;
        u_xlat11.w = x_643;
        let x_646 : f32 = u_xlat10.y;
        u_xlat13.z = x_646;
        let x_649 : f32 = u_xlat9.z;
        u_xlat13.w = x_649;
        let x_651 : vec4<f32> = u_xlat11;
        let x_653 : vec4<f32> = u_xlat13;
        let x_655 : vec3<f32> = (vec3<f32>(x_651.z, x_651.y, x_651.w) + vec3<f32>(x_653.z, x_653.y, x_653.w));
        let x_656 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_655.x, x_655.y, x_655.z, x_656.w);
        let x_658 : vec4<f32> = u_xlat10;
        let x_660 : vec4<f32> = u_xlat14;
        let x_662 : vec3<f32> = (vec3<f32>(x_658.x, x_658.z, x_658.w) / vec3<f32>(x_660.z, x_660.w, x_660.y));
        let x_663 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_662.x, x_662.y, x_662.z, x_663.w);
        let x_665 : vec4<f32> = u_xlat10;
        let x_671 : vec3<f32> = (vec3<f32>(x_665.x, x_665.y, x_665.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_672 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_671.x, x_671.y, x_671.z, x_672.w);
        let x_674 : vec4<f32> = u_xlat13;
        let x_676 : vec4<f32> = u_xlat9;
        let x_678 : vec3<f32> = (vec3<f32>(x_674.z, x_674.y, x_674.w) / vec3<f32>(x_676.x, x_676.y, x_676.z));
        let x_679 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_678.x, x_678.y, x_678.z, x_679.w);
        let x_681 : vec4<f32> = u_xlat11;
        let x_683 : vec3<f32> = (vec3<f32>(x_681.x, x_681.y, x_681.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_684 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_683.x, x_683.y, x_683.z, x_684.w);
        let x_686 : vec4<f32> = u_xlat10;
        let x_689 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_691 : vec3<f32> = (vec3<f32>(x_686.y, x_686.x, x_686.z) * vec3<f32>(x_689.x, x_689.x, x_689.x));
        let x_692 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_691.x, x_691.y, x_691.z, x_692.w);
        let x_694 : vec4<f32> = u_xlat11;
        let x_697 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_699 : vec3<f32> = (vec3<f32>(x_694.x, x_694.y, x_694.z) * vec3<f32>(x_697.y, x_697.y, x_697.y));
        let x_700 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_703 : f32 = u_xlat11.x;
        u_xlat10.w = x_703;
        let x_705 : vec4<f32> = u_xlat3;
        let x_708 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_711 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_705.x, x_705.y, x_705.x, x_705.y) * vec4<f32>(x_708.x, x_708.y, x_708.x, x_708.y)) + vec4<f32>(x_711.y, x_711.w, x_711.x, x_711.w));
        let x_714 : vec4<f32> = u_xlat3;
        let x_717 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_720 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_714.x, x_714.y) * vec2<f32>(x_717.x, x_717.y)) + vec2<f32>(x_720.z, x_720.w));
        let x_724 : f32 = u_xlat10.y;
        u_xlat11.w = x_724;
        let x_726 : vec4<f32> = u_xlat11;
        let x_727 : vec2<f32> = vec2<f32>(x_726.y, x_726.z);
        let x_728 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_728.x, x_727.x, x_728.z, x_727.y);
        let x_730 : vec4<f32> = u_xlat3;
        let x_733 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_736 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_730.x, x_730.y, x_730.x, x_730.y) * vec4<f32>(x_733.x, x_733.y, x_733.x, x_733.y)) + vec4<f32>(x_736.x, x_736.y, x_736.z, x_736.y));
        let x_739 : vec4<f32> = u_xlat3;
        let x_742 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_745 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_739.x, x_739.y, x_739.x, x_739.y) * vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y)) + vec4<f32>(x_745.w, x_745.y, x_745.w, x_745.z));
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.x, x_754.w, x_754.z, x_754.w));
        let x_758 : vec4<f32> = u_xlat9;
        let x_760 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_758.x, x_758.x, x_758.x, x_758.y) * vec4<f32>(x_760.z, x_760.w, x_760.y, x_760.z));
        let x_764 : vec4<f32> = u_xlat9;
        let x_766 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_764.y, x_764.y, x_764.z, x_764.z) * x_766);
        let x_770 : f32 = u_xlat9.z;
        let x_772 : f32 = u_xlat14.y;
        u_xlat68 = (x_770 * x_772);
        let x_775 : vec4<f32> = u_xlat12;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec4;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat3.x = x_787;
        let x_790 : vec4<f32> = u_xlat12;
        let x_791 : vec2<f32> = vec2<f32>(x_790.z, x_790.w);
        let x_793 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_791.x, x_791.y, x_793);
        let x_801 : vec3<f32> = txVec5;
        let x_803 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_801.xy, x_801.z);
        u_xlat25 = x_803;
        let x_804 : f32 = u_xlat25;
        let x_806 : f32 = u_xlat15.y;
        u_xlat25 = (x_804 * x_806);
        let x_809 : f32 = u_xlat15.x;
        let x_811 : f32 = u_xlat3.x;
        let x_813 : f32 = u_xlat25;
        u_xlat3.x = ((x_809 * x_811) + x_813);
        let x_817 : vec2<f32> = u_xlat47;
        let x_819 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_817.x, x_817.y, x_819);
        let x_826 : vec3<f32> = txVec6;
        let x_828 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_826.xy, x_826.z);
        u_xlat25 = x_828;
        let x_830 : f32 = u_xlat15.z;
        let x_831 : f32 = u_xlat25;
        let x_834 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_830 * x_831) + x_834);
        let x_838 : vec4<f32> = u_xlat11;
        let x_839 : vec2<f32> = vec2<f32>(x_838.x, x_838.y);
        let x_841 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_839.x, x_839.y, x_841);
        let x_848 : vec3<f32> = txVec7;
        let x_850 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_848.xy, x_848.z);
        u_xlat25 = x_850;
        let x_852 : f32 = u_xlat15.w;
        let x_853 : f32 = u_xlat25;
        let x_856 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_852 * x_853) + x_856);
        let x_860 : vec4<f32> = u_xlat13;
        let x_861 : vec2<f32> = vec2<f32>(x_860.x, x_860.y);
        let x_863 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_861.x, x_861.y, x_863);
        let x_870 : vec3<f32> = txVec8;
        let x_872 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_870.xy, x_870.z);
        u_xlat25 = x_872;
        let x_874 : f32 = u_xlat16.x;
        let x_875 : f32 = u_xlat25;
        let x_878 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_874 * x_875) + x_878);
        let x_882 : vec4<f32> = u_xlat13;
        let x_883 : vec2<f32> = vec2<f32>(x_882.z, x_882.w);
        let x_885 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_883.x, x_883.y, x_885);
        let x_892 : vec3<f32> = txVec9;
        let x_894 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_892.xy, x_892.z);
        u_xlat25 = x_894;
        let x_896 : f32 = u_xlat16.y;
        let x_897 : f32 = u_xlat25;
        let x_900 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_896 * x_897) + x_900);
        let x_904 : vec4<f32> = u_xlat11;
        let x_905 : vec2<f32> = vec2<f32>(x_904.z, x_904.w);
        let x_907 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_905.x, x_905.y, x_907);
        let x_914 : vec3<f32> = txVec10;
        let x_916 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_914.xy, x_914.z);
        u_xlat25 = x_916;
        let x_918 : f32 = u_xlat16.z;
        let x_919 : f32 = u_xlat25;
        let x_922 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_918 * x_919) + x_922);
        let x_926 : vec4<f32> = u_xlat10;
        let x_927 : vec2<f32> = vec2<f32>(x_926.x, x_926.y);
        let x_929 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_927.x, x_927.y, x_929);
        let x_936 : vec3<f32> = txVec11;
        let x_938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_936.xy, x_936.z);
        u_xlat25 = x_938;
        let x_940 : f32 = u_xlat16.w;
        let x_941 : f32 = u_xlat25;
        let x_944 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_940 * x_941) + x_944);
        let x_948 : vec4<f32> = u_xlat10;
        let x_949 : vec2<f32> = vec2<f32>(x_948.z, x_948.w);
        let x_951 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_949.x, x_949.y, x_951);
        let x_958 : vec3<f32> = txVec12;
        let x_960 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_958.xy, x_958.z);
        u_xlat25 = x_960;
        let x_961 : f32 = u_xlat68;
        let x_962 : f32 = u_xlat25;
        let x_965 : f32 = u_xlat3.x;
        u_xlat67 = ((x_961 * x_962) + x_965);
      } else {
        let x_968 : vec3<f32> = u_xlat2;
        let x_971 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_974 : vec2<f32> = ((vec2<f32>(x_968.x, x_968.y) * vec2<f32>(x_971.z, x_971.w)) + vec2<f32>(0.5f, 0.5f));
        let x_975 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_974.x, x_974.y, x_975.z, x_975.w);
        let x_977 : vec4<f32> = u_xlat3;
        let x_979 : vec2<f32> = floor(vec2<f32>(x_977.x, x_977.y));
        let x_980 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_979.x, x_979.y, x_980.z, x_980.w);
        let x_982 : vec3<f32> = u_xlat2;
        let x_985 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_988 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_982.x, x_982.y) * vec2<f32>(x_985.z, x_985.w)) + -(vec2<f32>(x_988.x, x_988.y)));
        let x_992 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_992.x, x_992.x, x_992.y, x_992.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_995 : vec4<f32> = u_xlat9;
        let x_997 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_995.x, x_995.x, x_995.z, x_995.z) * vec4<f32>(x_997.x, x_997.x, x_997.z, x_997.z));
        let x_1000 : vec4<f32> = u_xlat10;
        let x_1004 : vec2<f32> = (vec2<f32>(x_1000.y, x_1000.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1005 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1005.x, x_1004.x, x_1005.z, x_1004.y);
        let x_1007 : vec4<f32> = u_xlat10;
        let x_1010 : vec2<f32> = u_xlat47;
        let x_1012 : vec2<f32> = ((vec2<f32>(x_1007.x, x_1007.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1010));
        let x_1013 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1012.x, x_1013.y, x_1012.y, x_1013.w);
        let x_1015 : vec2<f32> = u_xlat47;
        let x_1017 : vec2<f32> = (-(x_1015) + vec2<f32>(1.0f, 1.0f));
        let x_1018 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1020 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1020, vec2<f32>(0.0f, 0.0f));
        let x_1022 : vec2<f32> = u_xlat54;
        let x_1024 : vec2<f32> = u_xlat54;
        let x_1026 : vec4<f32> = u_xlat10;
        let x_1028 : vec2<f32> = ((-(x_1022) * x_1024) + vec2<f32>(x_1026.x, x_1026.y));
        let x_1029 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1028.x, x_1028.y, x_1029.z, x_1029.w);
        let x_1031 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1031, vec2<f32>(0.0f, 0.0f));
        let x_1034 : vec2<f32> = u_xlat54;
        let x_1036 : vec2<f32> = u_xlat54;
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1040 : vec2<f32> = ((-(x_1034) * x_1036) + vec2<f32>(x_1038.y, x_1038.w));
        let x_1041 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1040.x, x_1041.y, x_1040.y);
        let x_1043 : vec4<f32> = u_xlat10;
        let x_1046 : vec2<f32> = (vec2<f32>(x_1043.x, x_1043.y) + vec2<f32>(2.0f, 2.0f));
        let x_1047 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1046.x, x_1046.y, x_1047.z, x_1047.w);
        let x_1049 : vec3<f32> = u_xlat31;
        let x_1051 : vec2<f32> = (vec2<f32>(x_1049.x, x_1049.z) + vec2<f32>(2.0f, 2.0f));
        let x_1052 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1052.x, x_1051.x, x_1052.z, x_1051.y);
        let x_1055 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1055 * 0.081632003f);
        let x_1059 : vec4<f32> = u_xlat9;
        let x_1062 : vec3<f32> = (vec3<f32>(x_1059.z, x_1059.x, x_1059.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1063 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1062.x, x_1062.y, x_1062.z, x_1063.w);
        let x_1065 : vec4<f32> = u_xlat10;
        let x_1068 : vec2<f32> = (vec2<f32>(x_1065.x, x_1065.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat13.y;
        u_xlat12.x = x_1072;
        let x_1074 : vec2<f32> = u_xlat47;
        let x_1081 : vec2<f32> = ((vec2<f32>(x_1074.x, x_1074.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1082 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1082.x, x_1081.x, x_1082.z, x_1081.y);
        let x_1084 : vec2<f32> = u_xlat47;
        let x_1088 : vec2<f32> = ((vec2<f32>(x_1084.x, x_1084.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1089 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1088.x, x_1089.y, x_1088.y, x_1089.w);
        let x_1092 : f32 = u_xlat9.x;
        u_xlat10.y = x_1092;
        let x_1095 : f32 = u_xlat11.y;
        u_xlat10.w = x_1095;
        let x_1097 : vec4<f32> = u_xlat10;
        let x_1098 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1097 + x_1098);
        let x_1100 : vec2<f32> = u_xlat47;
        let x_1103 : vec2<f32> = ((vec2<f32>(x_1100.y, x_1100.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1104 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1104.x, x_1103.x, x_1104.z, x_1103.y);
        let x_1106 : vec2<f32> = u_xlat47;
        let x_1109 : vec2<f32> = ((vec2<f32>(x_1106.y, x_1106.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1110 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1109.x, x_1110.y, x_1109.y, x_1110.w);
        let x_1113 : f32 = u_xlat9.y;
        u_xlat11.y = x_1113;
        let x_1115 : vec4<f32> = u_xlat11;
        let x_1116 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1115 + x_1116);
        let x_1118 : vec4<f32> = u_xlat10;
        let x_1119 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1118 / x_1119);
        let x_1121 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1121 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1127 : vec4<f32> = u_xlat11;
        let x_1128 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1127 / x_1128);
        let x_1130 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1130 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1132 : vec4<f32> = u_xlat10;
        let x_1135 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1132.w, x_1132.x, x_1132.y, x_1132.z) * vec4<f32>(x_1135.x, x_1135.x, x_1135.x, x_1135.x));
        let x_1138 : vec4<f32> = u_xlat11;
        let x_1141 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1138.x, x_1138.w, x_1138.y, x_1138.z) * vec4<f32>(x_1141.y, x_1141.y, x_1141.y, x_1141.y));
        let x_1144 : vec4<f32> = u_xlat10;
        let x_1145 : vec3<f32> = vec3<f32>(x_1144.y, x_1144.z, x_1144.w);
        let x_1146 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1145.x, x_1146.y, x_1145.y, x_1145.z);
        let x_1149 : f32 = u_xlat11.x;
        u_xlat13.y = x_1149;
        let x_1151 : vec4<f32> = u_xlat3;
        let x_1154 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1157 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y) * vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.y)) + vec4<f32>(x_1157.x, x_1157.y, x_1157.z, x_1157.y));
        let x_1160 : vec4<f32> = u_xlat3;
        let x_1163 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1166 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1160.x, x_1160.y) * vec2<f32>(x_1163.x, x_1163.y)) + vec2<f32>(x_1166.w, x_1166.y));
        let x_1170 : f32 = u_xlat13.y;
        u_xlat10.y = x_1170;
        let x_1173 : f32 = u_xlat11.z;
        u_xlat13.y = x_1173;
        let x_1175 : vec4<f32> = u_xlat3;
        let x_1178 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1181 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1175.x, x_1175.y, x_1175.x, x_1175.y) * vec4<f32>(x_1178.x, x_1178.y, x_1178.x, x_1178.y)) + vec4<f32>(x_1181.x, x_1181.y, x_1181.z, x_1181.y));
        let x_1184 : vec4<f32> = u_xlat3;
        let x_1187 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat13;
        let x_1192 : vec2<f32> = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.w, x_1190.y));
        let x_1193 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1192.x, x_1192.y, x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat13.y;
        u_xlat10.z = x_1196;
        let x_1199 : vec4<f32> = u_xlat3;
        let x_1202 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1205 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1199.x, x_1199.y, x_1199.x, x_1199.y) * vec4<f32>(x_1202.x, x_1202.y, x_1202.x, x_1202.y)) + vec4<f32>(x_1205.x, x_1205.y, x_1205.x, x_1205.z));
        let x_1209 : f32 = u_xlat11.w;
        u_xlat13.y = x_1209;
        let x_1212 : vec4<f32> = u_xlat3;
        let x_1215 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1222 : vec4<f32> = u_xlat3;
        let x_1225 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1228 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1222.x, x_1222.y) * vec2<f32>(x_1225.x, x_1225.y)) + vec2<f32>(x_1228.w, x_1228.y));
        let x_1232 : f32 = u_xlat13.y;
        u_xlat10.w = x_1232;
        let x_1235 : vec4<f32> = u_xlat3;
        let x_1238 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1241 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1235.x, x_1235.y) * vec2<f32>(x_1238.x, x_1238.y)) + vec2<f32>(x_1241.x, x_1241.w));
        let x_1244 : vec4<f32> = u_xlat13;
        let x_1245 : vec3<f32> = vec3<f32>(x_1244.x, x_1244.z, x_1244.w);
        let x_1246 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1245.x, x_1246.y, x_1245.y, x_1245.z);
        let x_1248 : vec4<f32> = u_xlat3;
        let x_1251 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1254 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1248.x, x_1248.y, x_1248.x, x_1248.y) * vec4<f32>(x_1251.x, x_1251.y, x_1251.x, x_1251.y)) + vec4<f32>(x_1254.x, x_1254.y, x_1254.z, x_1254.y));
        let x_1258 : vec4<f32> = u_xlat3;
        let x_1261 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1264 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1258.x, x_1258.y) * vec2<f32>(x_1261.x, x_1261.y)) + vec2<f32>(x_1264.w, x_1264.y));
        let x_1268 : f32 = u_xlat10.x;
        u_xlat11.x = x_1268;
        let x_1270 : vec4<f32> = u_xlat3;
        let x_1273 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1276 : vec4<f32> = u_xlat11;
        let x_1278 : vec2<f32> = ((vec2<f32>(x_1270.x, x_1270.y) * vec2<f32>(x_1273.x, x_1273.y)) + vec2<f32>(x_1276.x, x_1276.y));
        let x_1279 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1278.x, x_1278.y, x_1279.z, x_1279.w);
        let x_1282 : vec4<f32> = u_xlat9;
        let x_1284 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1282.x, x_1282.x, x_1282.x, x_1282.x) * x_1284);
        let x_1287 : vec4<f32> = u_xlat9;
        let x_1289 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1287.y, x_1287.y, x_1287.y, x_1287.y) * x_1289);
        let x_1292 : vec4<f32> = u_xlat9;
        let x_1294 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1292.z, x_1292.z, x_1292.z, x_1292.z) * x_1294);
        let x_1296 : vec4<f32> = u_xlat9;
        let x_1298 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1296.w, x_1296.w, x_1296.w, x_1296.w) * x_1298);
        let x_1301 : vec4<f32> = u_xlat14;
        let x_1302 : vec2<f32> = vec2<f32>(x_1301.x, x_1301.y);
        let x_1304 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1302.x, x_1302.y, x_1304);
        let x_1311 : vec3<f32> = txVec13;
        let x_1313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1311.xy, x_1311.z);
        u_xlat68 = x_1313;
        let x_1315 : vec4<f32> = u_xlat14;
        let x_1316 : vec2<f32> = vec2<f32>(x_1315.z, x_1315.w);
        let x_1318 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1316.x, x_1316.y, x_1318);
        let x_1326 : vec3<f32> = txVec14;
        let x_1328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1326.xy, x_1326.z);
        u_xlat70 = x_1328;
        let x_1329 : f32 = u_xlat70;
        let x_1331 : f32 = u_xlat19.y;
        u_xlat70 = (x_1329 * x_1331);
        let x_1334 : f32 = u_xlat19.x;
        let x_1335 : f32 = u_xlat68;
        let x_1337 : f32 = u_xlat70;
        u_xlat68 = ((x_1334 * x_1335) + x_1337);
        let x_1340 : vec2<f32> = u_xlat47;
        let x_1342 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec15;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat47.x = x_1351;
        let x_1354 : f32 = u_xlat19.z;
        let x_1356 : f32 = u_xlat47.x;
        let x_1358 : f32 = u_xlat68;
        u_xlat68 = ((x_1354 * x_1356) + x_1358);
        let x_1361 : vec4<f32> = u_xlat17;
        let x_1362 : vec2<f32> = vec2<f32>(x_1361.x, x_1361.y);
        let x_1364 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1362.x, x_1362.y, x_1364);
        let x_1371 : vec3<f32> = txVec16;
        let x_1373 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1371.xy, x_1371.z);
        u_xlat47.x = x_1373;
        let x_1376 : f32 = u_xlat19.w;
        let x_1378 : f32 = u_xlat47.x;
        let x_1380 : f32 = u_xlat68;
        u_xlat68 = ((x_1376 * x_1378) + x_1380);
        let x_1383 : vec4<f32> = u_xlat15;
        let x_1384 : vec2<f32> = vec2<f32>(x_1383.x, x_1383.y);
        let x_1386 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1384.x, x_1384.y, x_1386);
        let x_1393 : vec3<f32> = txVec17;
        let x_1395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1393.xy, x_1393.z);
        u_xlat47.x = x_1395;
        let x_1398 : f32 = u_xlat20.x;
        let x_1400 : f32 = u_xlat47.x;
        let x_1402 : f32 = u_xlat68;
        u_xlat68 = ((x_1398 * x_1400) + x_1402);
        let x_1405 : vec4<f32> = u_xlat15;
        let x_1406 : vec2<f32> = vec2<f32>(x_1405.z, x_1405.w);
        let x_1408 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1406.x, x_1406.y, x_1408);
        let x_1415 : vec3<f32> = txVec18;
        let x_1417 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1415.xy, x_1415.z);
        u_xlat47.x = x_1417;
        let x_1420 : f32 = u_xlat20.y;
        let x_1422 : f32 = u_xlat47.x;
        let x_1424 : f32 = u_xlat68;
        u_xlat68 = ((x_1420 * x_1422) + x_1424);
        let x_1427 : vec4<f32> = u_xlat16;
        let x_1428 : vec2<f32> = vec2<f32>(x_1427.x, x_1427.y);
        let x_1430 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1428.x, x_1428.y, x_1430);
        let x_1437 : vec3<f32> = txVec19;
        let x_1439 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1437.xy, x_1437.z);
        u_xlat47.x = x_1439;
        let x_1442 : f32 = u_xlat20.z;
        let x_1444 : f32 = u_xlat47.x;
        let x_1446 : f32 = u_xlat68;
        u_xlat68 = ((x_1442 * x_1444) + x_1446);
        let x_1449 : vec4<f32> = u_xlat17;
        let x_1450 : vec2<f32> = vec2<f32>(x_1449.z, x_1449.w);
        let x_1452 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1450.x, x_1450.y, x_1452);
        let x_1459 : vec3<f32> = txVec20;
        let x_1461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1459.xy, x_1459.z);
        u_xlat47.x = x_1461;
        let x_1464 : f32 = u_xlat20.w;
        let x_1466 : f32 = u_xlat47.x;
        let x_1468 : f32 = u_xlat68;
        u_xlat68 = ((x_1464 * x_1466) + x_1468);
        let x_1471 : vec4<f32> = u_xlat18;
        let x_1472 : vec2<f32> = vec2<f32>(x_1471.x, x_1471.y);
        let x_1474 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1472.x, x_1472.y, x_1474);
        let x_1481 : vec3<f32> = txVec21;
        let x_1483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1481.xy, x_1481.z);
        u_xlat47.x = x_1483;
        let x_1486 : f32 = u_xlat21.x;
        let x_1488 : f32 = u_xlat47.x;
        let x_1490 : f32 = u_xlat68;
        u_xlat68 = ((x_1486 * x_1488) + x_1490);
        let x_1493 : vec4<f32> = u_xlat18;
        let x_1494 : vec2<f32> = vec2<f32>(x_1493.z, x_1493.w);
        let x_1496 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1494.x, x_1494.y, x_1496);
        let x_1503 : vec3<f32> = txVec22;
        let x_1505 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1503.xy, x_1503.z);
        u_xlat47.x = x_1505;
        let x_1508 : f32 = u_xlat21.y;
        let x_1510 : f32 = u_xlat47.x;
        let x_1512 : f32 = u_xlat68;
        u_xlat68 = ((x_1508 * x_1510) + x_1512);
        let x_1515 : vec2<f32> = u_xlat32;
        let x_1517 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1515.x, x_1515.y, x_1517);
        let x_1524 : vec3<f32> = txVec23;
        let x_1526 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1524.xy, x_1524.z);
        u_xlat47.x = x_1526;
        let x_1529 : f32 = u_xlat21.z;
        let x_1531 : f32 = u_xlat47.x;
        let x_1533 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1531) + x_1533);
        let x_1536 : vec2<f32> = u_xlat60;
        let x_1538 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1536.x, x_1536.y, x_1538);
        let x_1545 : vec3<f32> = txVec24;
        let x_1547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1545.xy, x_1545.z);
        u_xlat47.x = x_1547;
        let x_1550 : f32 = u_xlat21.w;
        let x_1552 : f32 = u_xlat47.x;
        let x_1554 : f32 = u_xlat68;
        u_xlat68 = ((x_1550 * x_1552) + x_1554);
        let x_1557 : vec4<f32> = u_xlat13;
        let x_1558 : vec2<f32> = vec2<f32>(x_1557.x, x_1557.y);
        let x_1560 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1558.x, x_1558.y, x_1560);
        let x_1567 : vec3<f32> = txVec25;
        let x_1569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1567.xy, x_1567.z);
        u_xlat47.x = x_1569;
        let x_1572 : f32 = u_xlat9.x;
        let x_1574 : f32 = u_xlat47.x;
        let x_1576 : f32 = u_xlat68;
        u_xlat68 = ((x_1572 * x_1574) + x_1576);
        let x_1579 : vec4<f32> = u_xlat13;
        let x_1580 : vec2<f32> = vec2<f32>(x_1579.z, x_1579.w);
        let x_1582 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1580.x, x_1580.y, x_1582);
        let x_1589 : vec3<f32> = txVec26;
        let x_1591 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1589.xy, x_1589.z);
        u_xlat47.x = x_1591;
        let x_1594 : f32 = u_xlat9.y;
        let x_1596 : f32 = u_xlat47.x;
        let x_1598 : f32 = u_xlat68;
        u_xlat68 = ((x_1594 * x_1596) + x_1598);
        let x_1601 : vec2<f32> = u_xlat55;
        let x_1603 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec27;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat47.x = x_1612;
        let x_1615 : f32 = u_xlat9.z;
        let x_1617 : f32 = u_xlat47.x;
        let x_1619 : f32 = u_xlat68;
        u_xlat68 = ((x_1615 * x_1617) + x_1619);
        let x_1622 : vec4<f32> = u_xlat3;
        let x_1623 : vec2<f32> = vec2<f32>(x_1622.x, x_1622.y);
        let x_1625 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1623.x, x_1623.y, x_1625);
        let x_1632 : vec3<f32> = txVec28;
        let x_1634 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1632.xy, x_1632.z);
        u_xlat3.x = x_1634;
        let x_1637 : f32 = u_xlat9.w;
        let x_1639 : f32 = u_xlat3.x;
        let x_1641 : f32 = u_xlat68;
        u_xlat67 = ((x_1637 * x_1639) + x_1641);
      }
    }
  } else {
    let x_1645 : vec3<f32> = u_xlat2;
    let x_1646 : vec2<f32> = vec2<f32>(x_1645.x, x_1645.y);
    let x_1648 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1646.x, x_1646.y, x_1648);
    let x_1655 : vec3<f32> = txVec29;
    let x_1657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1655.xy, x_1655.z);
    u_xlat67 = x_1657;
  }
  let x_1659 : f32 = x_378.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1659) + 1.0f);
  let x_1663 : f32 = u_xlat67;
  let x_1665 : f32 = x_378.x_MainLightShadowParams.x;
  let x_1668 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1663 * x_1665) + x_1668);
  let x_1672 : f32 = u_xlat2.z;
  u_xlatb24 = (0.0f >= x_1672);
  let x_1676 : f32 = u_xlat2.z;
  u_xlatb46 = (x_1676 >= 1.0f);
  let x_1678 : bool = u_xlatb46;
  let x_1679 : bool = u_xlatb24;
  u_xlatb24 = (x_1678 | x_1679);
  let x_1681 : bool = u_xlatb24;
  let x_1682 : f32 = u_xlat67;
  u_xlat67 = select(x_1682, 1.0f, x_1681);
  let x_1684 : vec3<f32> = u_xlat1;
  let x_1686 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat1.x = dot(x_1684, -(vec3<f32>(x_1686.x, x_1686.y, x_1686.z)));
  let x_1692 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1692, 0.0f, 1.0f);
  let x_1696 : f32 = u_xlat67;
  let x_1700 : vec4<f32> = x_158.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1696, x_1696, x_1696) * vec3<f32>(x_1700.x, x_1700.y, x_1700.z));
  let x_1703 : vec3<f32> = u_xlat23;
  let x_1704 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1703 * vec3<f32>(x_1704.x, x_1704.x, x_1704.x));
  let x_1707 : vec3<f32> = u_xlat1;
  let x_1708 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1707 * vec3<f32>(x_1708.x, x_1708.y, x_1708.z));
  let x_1712 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1712 < 0.0f);
  let x_1716 : f32 = x_95.unity_LODFade.x;
  u_xlat24 = (x_1716 + 1.0f);
  let x_1718 : bool = u_xlatb67;
  if (x_1718) {
    let x_1722 : f32 = u_xlat24;
    x_1719 = x_1722;
  } else {
    let x_1725 : f32 = x_95.unity_LODFade.x;
    x_1719 = x_1725;
  }
  let x_1726 : f32 = x_1719;
  u_xlat67 = x_1726;
  let x_1727 : f32 = u_xlat67;
  u_xlatb24 = (0.5f >= x_1727);
  let x_1729 : vec3<f32> = u_xlat4;
  let x_1732 : vec4<f32> = x_158.x_ScreenParams;
  let x_1734 : vec3<f32> = (abs(x_1729) * vec3<f32>(x_1732.x, x_1732.y, x_1732.x));
  let x_1735 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1734.x, x_1734.y, x_1734.z, x_1735.w);
  let x_1740 : vec4<f32> = u_xlat3;
  u_xlatu3 = vec3<u32>(vec3<f32>(x_1740.x, x_1740.y, x_1740.z));
  let x_1745 : u32 = u_xlatu3.z;
  u_xlatu46 = (x_1745 * 1025u);
  let x_1749 : u32 = u_xlatu46;
  u_xlatu68 = (x_1749 >> 6u);
  let x_1753 : u32 = u_xlatu68;
  let x_1754 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1753 ^ x_1754));
  let x_1757 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1757) * 9u);
  let x_1761 : u32 = u_xlatu46;
  u_xlatu68 = (x_1761 >> 11u);
  let x_1764 : u32 = u_xlatu68;
  let x_1765 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1764 ^ x_1765));
  let x_1768 : i32 = u_xlati46;
  u_xlati46 = (x_1768 * 32769i);
  let x_1771 : i32 = u_xlati46;
  let x_1774 : u32 = u_xlatu3.y;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1771) ^ x_1774));
  let x_1777 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1777) * 1025u);
  let x_1780 : u32 = u_xlatu46;
  u_xlatu68 = (x_1780 >> 6u);
  let x_1782 : u32 = u_xlatu68;
  let x_1783 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1782 ^ x_1783));
  let x_1786 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1786) * 9u);
  let x_1789 : u32 = u_xlatu46;
  u_xlatu68 = (x_1789 >> 11u);
  let x_1791 : u32 = u_xlatu68;
  let x_1792 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1791 ^ x_1792));
  let x_1795 : i32 = u_xlati46;
  u_xlati46 = (x_1795 * 32769i);
  let x_1797 : i32 = u_xlati46;
  let x_1800 : u32 = u_xlatu3.x;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1797) ^ x_1800));
  let x_1803 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1803) * 1025u);
  let x_1806 : u32 = u_xlatu46;
  u_xlatu68 = (x_1806 >> 6u);
  let x_1808 : u32 = u_xlatu68;
  let x_1809 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1808 ^ x_1809));
  let x_1812 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1812) * 9u);
  let x_1815 : u32 = u_xlatu46;
  u_xlatu68 = (x_1815 >> 11u);
  let x_1817 : u32 = u_xlatu68;
  let x_1818 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1817 ^ x_1818));
  let x_1821 : i32 = u_xlati46;
  u_xlati46 = (x_1821 * 32769i);
  param = 1065353216i;
  let x_1828 : i32 = u_xlati46;
  param_1 = x_1828;
  param_2 = 0i;
  param_3 = 23i;
  let x_1831 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat46.x = bitcast<f32>(x_1831);
  let x_1835 : f32 = u_xlat46.x;
  u_xlat46.x = (x_1835 + -1.0f);
  let x_1839 : f32 = u_xlat46.x;
  u_xlat68 = (-(x_1839) + 1.0f);
  let x_1842 : bool = u_xlatb24;
  if (x_1842) {
    let x_1847 : f32 = u_xlat46.x;
    x_1843 = x_1847;
  } else {
    let x_1849 : f32 = u_xlat68;
    x_1843 = x_1849;
  }
  let x_1850 : f32 = x_1843;
  u_xlat24 = x_1850;
  let x_1851 : f32 = u_xlat67;
  let x_1853 : f32 = u_xlat24;
  u_xlat67 = ((x_1851 * 2.0f) + -(x_1853));
  let x_1856 : f32 = u_xlat67;
  let x_1858 : f32 = u_xlat6.w;
  u_xlat24 = (x_1856 * x_1858);
  let x_1860 : f32 = u_xlat24;
  u_xlatb46 = (x_1860 >= 0.400000006f);
  let x_1863 : bool = u_xlatb46;
  let x_1864 : f32 = u_xlat24;
  u_xlat46.x = select(0.0f, x_1864, x_1863);
  let x_1868 : f32 = u_xlat6.w;
  let x_1869 : f32 = u_xlat67;
  u_xlat67 = ((x_1868 * x_1869) + -0.400000006f);
  let x_1873 : f32 = u_xlat24;
  u_xlat68 = dpdxCoarse(x_1873);
  let x_1875 : f32 = u_xlat24;
  u_xlat24 = dpdyCoarse(x_1875);
  let x_1877 : f32 = u_xlat24;
  let x_1879 : f32 = u_xlat68;
  u_xlat24 = (abs(x_1877) + abs(x_1879));
  let x_1882 : f32 = u_xlat24;
  u_xlat24 = max(x_1882, 0.0001f);
  let x_1885 : f32 = u_xlat67;
  let x_1886 : f32 = u_xlat24;
  u_xlat67 = (x_1885 / x_1886);
  let x_1888 : f32 = u_xlat67;
  u_xlat67 = (x_1888 + 0.5f);
  let x_1890 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1890, 0.0f, 1.0f);
  let x_1893 : f32 = x_158.x_AlphaToMaskAvailable;
  u_xlatb24 = !((x_1893 == 0.0f));
  let x_1895 : bool = u_xlatb24;
  if (x_1895) {
    let x_1899 : f32 = u_xlat67;
    x_1896 = x_1899;
  } else {
    let x_1902 : f32 = u_xlat46.x;
    x_1896 = x_1902;
  }
  let x_1903 : f32 = x_1896;
  u_xlat67 = x_1903;
  let x_1904 : f32 = u_xlat67;
  u_xlat46.x = (x_1904 + -0.0001f);
  let x_1909 : f32 = u_xlat46.x;
  u_xlatb46 = (x_1909 < 0.0f);
  let x_1911 : bool = u_xlatb46;
  if (((select(0i, 1i, x_1911) * -1i) != 0i)) {
    discard;
  }
  let x_1919 : vec3<f32> = u_xlat22;
  let x_1920 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_1919 * vec3<f32>(x_1920.y, x_1920.y, x_1920.y));
  let x_1923 : vec3<f32> = u_xlat30;
  let x_1925 : vec4<f32> = vs_INTERP2;
  let x_1928 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1923.x, x_1923.x, x_1923.x) * vec3<f32>(x_1925.x, x_1925.y, x_1925.z)) + x_1928);
  let x_1930 : vec3<f32> = u_xlat30;
  let x_1932 : vec3<f32> = vs_INTERP1;
  let x_1934 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1930.z, x_1930.z, x_1930.z) * x_1932) + x_1934);
  let x_1936 : vec3<f32> = u_xlat22;
  let x_1937 : vec3<f32> = u_xlat22;
  u_xlat46.x = dot(x_1936, x_1937);
  let x_1941 : f32 = u_xlat46.x;
  u_xlat46.x = inverseSqrt(x_1941);
  let x_1944 : vec3<f32> = u_xlat22;
  let x_1945 : vec2<f32> = u_xlat46;
  u_xlat22 = (x_1944 * vec3<f32>(x_1945.x, x_1945.x, x_1945.x));
  let x_1955 : vec2<f32> = vs_INTERP5;
  let x_1957 : f32 = x_158.x_GlobalMipBias.x;
  let x_1958 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1955, x_1957);
  u_xlat3 = x_1958;
  let x_1963 : vec2<f32> = vs_INTERP5;
  let x_1965 : f32 = x_158.x_GlobalMipBias.x;
  let x_1966 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1963, x_1965);
  u_xlat4 = vec3<f32>(x_1966.x, x_1966.y, x_1966.z);
  let x_1968 : vec4<f32> = u_xlat3;
  let x_1971 : vec3<f32> = (vec3<f32>(x_1968.x, x_1968.y, x_1968.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1972 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1971.x, x_1971.y, x_1971.z, x_1972.w);
  let x_1974 : vec3<f32> = u_xlat22;
  let x_1975 : vec4<f32> = u_xlat3;
  u_xlat46.x = dot(x_1974, vec3<f32>(x_1975.x, x_1975.y, x_1975.z));
  let x_1980 : f32 = u_xlat46.x;
  u_xlat46.x = (x_1980 + 0.5f);
  let x_1983 : vec2<f32> = u_xlat46;
  let x_1985 : vec3<f32> = u_xlat4;
  let x_1986 : vec3<f32> = (vec3<f32>(x_1983.x, x_1983.x, x_1983.x) * x_1985);
  let x_1987 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1986.x, x_1986.y, x_1986.z, x_1987.w);
  let x_1990 : f32 = u_xlat3.w;
  u_xlat46.x = max(x_1990, 0.0001f);
  let x_1993 : vec4<f32> = u_xlat3;
  let x_1995 : vec2<f32> = u_xlat46;
  let x_1997 : vec3<f32> = (vec3<f32>(x_1993.x, x_1993.y, x_1993.z) / vec3<f32>(x_1995.x, x_1995.x, x_1995.x));
  let x_1998 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1997.x, x_1997.y, x_1997.z, x_1998.w);
  let x_2001 : vec4<f32> = x_158.x_ScaledScreenParams;
  let x_2002 : vec2<f32> = vec2<f32>(x_2001.x, x_2001.y);
  u_xlat46 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2002.x, x_2002.y));
  let x_2007 : vec2<f32> = u_xlat46;
  let x_2008 : vec4<f32> = hlslcc_FragCoord;
  let x_2010 : vec2<f32> = (x_2007 * vec2<f32>(x_2008.x, x_2008.y));
  let x_2011 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_2010.x, x_2010.y, x_2011.z);
  let x_2014 : f32 = u_xlat4.y;
  let x_2017 : f32 = x_158.x_ScaleBiasRt.x;
  let x_2020 : f32 = x_158.x_ScaleBiasRt.y;
  u_xlat46.x = ((x_2014 * x_2017) + x_2020);
  let x_2024 : f32 = u_xlat46.x;
  u_xlat4.z = (-(x_2024) + 1.0f);
  let x_2029 : f32 = u_xlat8.x;
  u_xlat8.x = x_2029;
  let x_2032 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2032, 0.0f, 1.0f);
  let x_2035 : f32 = u_xlat67;
  u_xlat67 = x_2035;
  let x_2036 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2036, 0.0f, 1.0f);
  let x_2038 : vec4<f32> = u_xlat7;
  let x_2042 : vec3<f32> = (vec3<f32>(x_2038.x, x_2038.y, x_2038.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2043 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2042.x, x_2042.y, x_2042.z, x_2043.w);
  let x_2046 : f32 = u_xlat8.x;
  u_xlat46.x = (-(x_2046) + 1.0f);
  let x_2051 : f32 = u_xlat46.x;
  let x_2053 : f32 = u_xlat46.x;
  u_xlat68 = (x_2051 * x_2053);
  let x_2055 : f32 = u_xlat68;
  u_xlat68 = max(x_2055, 0.0078125f);
  let x_2059 : f32 = u_xlat68;
  let x_2060 : f32 = u_xlat68;
  u_xlat69 = (x_2059 * x_2060);
  let x_2064 : f32 = u_xlat8.x;
  u_xlat26.x = (x_2064 + 0.040000021f);
  let x_2069 : f32 = u_xlat26.x;
  u_xlat4.y = min(x_2069, 1.0f);
  let x_2072 : f32 = u_xlat68;
  u_xlat70 = ((x_2072 * 4.0f) + 2.0f);
  let x_2081 : vec3<f32> = u_xlat4;
  let x_2084 : f32 = x_158.x_GlobalMipBias.x;
  let x_2085 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2081.x, x_2081.z), x_2084);
  u_xlat4.x = x_2085.x;
  let x_2088 : vec3<f32> = u_xlat4;
  u_xlat26 = (vec2<f32>(x_2088.y, x_2088.x) + vec2<f32>(-0.039999999f, -1.0f));
  let x_2096 : f32 = x_158.x_AmbientOcclusionParam.w;
  let x_2098 : f32 = u_xlat26.y;
  u_xlat48 = ((x_2096 * x_2098) + 1.0f);
  let x_2102 : f32 = u_xlat4.x;
  let x_2104 : f32 = vs_INTERP4.w;
  u_xlat4.x = min(x_2102, x_2104);
  let x_2107 : bool = u_xlatb0;
  if (x_2107) {
    let x_2111 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2111 == 1.0f);
    let x_2113 : bool = u_xlatb0;
    if (x_2113) {
      let x_2117 : vec4<f32> = vs_INTERP9;
      let x_2120 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2117.x, x_2117.y, x_2117.x, x_2117.y) + x_2120);
      let x_2123 : vec4<f32> = u_xlat7;
      let x_2124 : vec2<f32> = vec2<f32>(x_2123.x, x_2123.y);
      let x_2126 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2124.x, x_2124.y, x_2126);
      let x_2133 : vec3<f32> = txVec30;
      let x_2135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2133.xy, x_2133.z);
      u_xlat8.x = x_2135;
      let x_2138 : vec4<f32> = u_xlat7;
      let x_2139 : vec2<f32> = vec2<f32>(x_2138.z, x_2138.w);
      let x_2141 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2139.x, x_2139.y, x_2141);
      let x_2148 : vec3<f32> = txVec31;
      let x_2150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2148.xy, x_2148.z);
      u_xlat8.y = x_2150;
      let x_2152 : vec4<f32> = vs_INTERP9;
      let x_2155 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2152.x, x_2152.y, x_2152.x, x_2152.y) + x_2155);
      let x_2158 : vec4<f32> = u_xlat7;
      let x_2159 : vec2<f32> = vec2<f32>(x_2158.x, x_2158.y);
      let x_2161 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2159.x, x_2159.y, x_2161);
      let x_2168 : vec3<f32> = txVec32;
      let x_2170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2168.xy, x_2168.z);
      u_xlat8.z = x_2170;
      let x_2173 : vec4<f32> = u_xlat7;
      let x_2174 : vec2<f32> = vec2<f32>(x_2173.z, x_2173.w);
      let x_2176 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2174.x, x_2174.y, x_2176);
      let x_2183 : vec3<f32> = txVec33;
      let x_2185 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2183.xy, x_2183.z);
      u_xlat8.w = x_2185;
      let x_2187 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2187, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2193 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb71 = (x_2193 == 2.0f);
      let x_2195 : bool = u_xlatb71;
      if (x_2195) {
        let x_2198 : vec4<f32> = vs_INTERP9;
        let x_2201 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2204 : vec2<f32> = ((vec2<f32>(x_2198.x, x_2198.y) * vec2<f32>(x_2201.z, x_2201.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2205 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2204.x, x_2204.y, x_2205.z, x_2205.w);
        let x_2207 : vec4<f32> = u_xlat7;
        let x_2209 : vec2<f32> = floor(vec2<f32>(x_2207.x, x_2207.y));
        let x_2210 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2209.x, x_2209.y, x_2210.z, x_2210.w);
        let x_2213 : vec4<f32> = vs_INTERP9;
        let x_2216 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2219 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2213.x, x_2213.y) * vec2<f32>(x_2216.z, x_2216.w)) + -(vec2<f32>(x_2219.x, x_2219.y)));
        let x_2223 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2223.x, x_2223.x, x_2223.y, x_2223.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2226 : vec4<f32> = u_xlat8;
        let x_2228 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2226.x, x_2226.x, x_2226.z, x_2226.z) * vec4<f32>(x_2228.x, x_2228.x, x_2228.z, x_2228.z));
        let x_2231 : vec4<f32> = u_xlat9;
        let x_2233 : vec2<f32> = (vec2<f32>(x_2231.y, x_2231.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2234 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2233.x, x_2234.y, x_2233.y, x_2234.w);
        let x_2236 : vec4<f32> = u_xlat9;
        let x_2239 : vec2<f32> = u_xlat51;
        let x_2241 : vec2<f32> = ((vec2<f32>(x_2236.x, x_2236.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2239));
        let x_2242 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2241.x, x_2241.y, x_2242.z, x_2242.w);
        let x_2245 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_2245) + vec2<f32>(1.0f, 1.0f));
        let x_2248 : vec2<f32> = u_xlat51;
        let x_2249 : vec2<f32> = min(x_2248, vec2<f32>(0.0f, 0.0f));
        let x_2250 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2249.x, x_2249.y, x_2250.z, x_2250.w);
        let x_2252 : vec4<f32> = u_xlat10;
        let x_2255 : vec4<f32> = u_xlat10;
        let x_2258 : vec2<f32> = u_xlat53;
        let x_2259 : vec2<f32> = ((-(vec2<f32>(x_2252.x, x_2252.y)) * vec2<f32>(x_2255.x, x_2255.y)) + x_2258);
        let x_2260 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2259.x, x_2259.y, x_2260.z, x_2260.w);
        let x_2262 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_2262, vec2<f32>(0.0f, 0.0f));
        let x_2264 : vec2<f32> = u_xlat51;
        let x_2266 : vec2<f32> = u_xlat51;
        let x_2268 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_2264) * x_2266) + vec2<f32>(x_2268.y, x_2268.w));
        let x_2271 : vec4<f32> = u_xlat10;
        let x_2273 : vec2<f32> = (vec2<f32>(x_2271.x, x_2271.y) + vec2<f32>(1.0f, 1.0f));
        let x_2274 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2273.x, x_2273.y, x_2274.z, x_2274.w);
        let x_2276 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2276 + vec2<f32>(1.0f, 1.0f));
        let x_2278 : vec4<f32> = u_xlat9;
        let x_2280 : vec2<f32> = (vec2<f32>(x_2278.x, x_2278.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2281 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2280.x, x_2280.y, x_2281.z, x_2281.w);
        let x_2283 : vec2<f32> = u_xlat53;
        let x_2284 : vec2<f32> = (x_2283 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2285 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2284.x, x_2284.y, x_2285.z, x_2285.w);
        let x_2287 : vec4<f32> = u_xlat10;
        let x_2289 : vec2<f32> = (vec2<f32>(x_2287.x, x_2287.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2290 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2289.x, x_2289.y, x_2290.z, x_2290.w);
        let x_2292 : vec2<f32> = u_xlat51;
        let x_2293 : vec2<f32> = (x_2292 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2294 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2293.x, x_2293.y, x_2294.z, x_2294.w);
        let x_2296 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_2296.y, x_2296.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2300 : f32 = u_xlat10.x;
        u_xlat11.z = x_2300;
        let x_2303 : f32 = u_xlat51.x;
        u_xlat11.w = x_2303;
        let x_2306 : f32 = u_xlat12.x;
        u_xlat9.z = x_2306;
        let x_2309 : f32 = u_xlat8.x;
        u_xlat9.w = x_2309;
        let x_2311 : vec4<f32> = u_xlat9;
        let x_2313 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2311.z, x_2311.w, x_2311.x, x_2311.z) + vec4<f32>(x_2313.z, x_2313.w, x_2313.x, x_2313.z));
        let x_2317 : f32 = u_xlat11.y;
        u_xlat10.z = x_2317;
        let x_2320 : f32 = u_xlat51.y;
        u_xlat10.w = x_2320;
        let x_2323 : f32 = u_xlat9.y;
        u_xlat12.z = x_2323;
        let x_2326 : f32 = u_xlat8.z;
        u_xlat12.w = x_2326;
        let x_2328 : vec4<f32> = u_xlat10;
        let x_2330 : vec4<f32> = u_xlat12;
        let x_2332 : vec3<f32> = (vec3<f32>(x_2328.z, x_2328.y, x_2328.w) + vec3<f32>(x_2330.z, x_2330.y, x_2330.w));
        let x_2333 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2332.x, x_2332.y, x_2332.z, x_2333.w);
        let x_2335 : vec4<f32> = u_xlat9;
        let x_2337 : vec4<f32> = u_xlat13;
        let x_2339 : vec3<f32> = (vec3<f32>(x_2335.x, x_2335.z, x_2335.w) / vec3<f32>(x_2337.z, x_2337.w, x_2337.y));
        let x_2340 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2339.x, x_2339.y, x_2339.z, x_2340.w);
        let x_2342 : vec4<f32> = u_xlat9;
        let x_2344 : vec3<f32> = (vec3<f32>(x_2342.x, x_2342.y, x_2342.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2345 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2344.x, x_2344.y, x_2344.z, x_2345.w);
        let x_2347 : vec4<f32> = u_xlat12;
        let x_2349 : vec4<f32> = u_xlat8;
        let x_2351 : vec3<f32> = (vec3<f32>(x_2347.z, x_2347.y, x_2347.w) / vec3<f32>(x_2349.x, x_2349.y, x_2349.z));
        let x_2352 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2351.x, x_2351.y, x_2351.z, x_2352.w);
        let x_2354 : vec4<f32> = u_xlat10;
        let x_2356 : vec3<f32> = (vec3<f32>(x_2354.x, x_2354.y, x_2354.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2357 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2356.x, x_2356.y, x_2356.z, x_2357.w);
        let x_2359 : vec4<f32> = u_xlat9;
        let x_2362 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2364 : vec3<f32> = (vec3<f32>(x_2359.y, x_2359.x, x_2359.z) * vec3<f32>(x_2362.x, x_2362.x, x_2362.x));
        let x_2365 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2364.x, x_2364.y, x_2364.z, x_2365.w);
        let x_2367 : vec4<f32> = u_xlat10;
        let x_2370 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2372 : vec3<f32> = (vec3<f32>(x_2367.x, x_2367.y, x_2367.z) * vec3<f32>(x_2370.y, x_2370.y, x_2370.y));
        let x_2373 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2372.x, x_2372.y, x_2372.z, x_2373.w);
        let x_2376 : f32 = u_xlat10.x;
        u_xlat9.w = x_2376;
        let x_2378 : vec4<f32> = u_xlat7;
        let x_2381 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2384 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2378.x, x_2378.y, x_2378.x, x_2378.y) * vec4<f32>(x_2381.x, x_2381.y, x_2381.x, x_2381.y)) + vec4<f32>(x_2384.y, x_2384.w, x_2384.x, x_2384.w));
        let x_2387 : vec4<f32> = u_xlat7;
        let x_2390 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2393 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_2387.x, x_2387.y) * vec2<f32>(x_2390.x, x_2390.y)) + vec2<f32>(x_2393.z, x_2393.w));
        let x_2397 : f32 = u_xlat9.y;
        u_xlat10.w = x_2397;
        let x_2399 : vec4<f32> = u_xlat10;
        let x_2400 : vec2<f32> = vec2<f32>(x_2399.y, x_2399.z);
        let x_2401 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2401.x, x_2400.x, x_2401.z, x_2400.y);
        let x_2403 : vec4<f32> = u_xlat7;
        let x_2406 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2409 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2403.x, x_2403.y, x_2403.x, x_2403.y) * vec4<f32>(x_2406.x, x_2406.y, x_2406.x, x_2406.y)) + vec4<f32>(x_2409.x, x_2409.y, x_2409.z, x_2409.y));
        let x_2412 : vec4<f32> = u_xlat7;
        let x_2415 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2418 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2412.x, x_2412.y, x_2412.x, x_2412.y) * vec4<f32>(x_2415.x, x_2415.y, x_2415.x, x_2415.y)) + vec4<f32>(x_2418.w, x_2418.y, x_2418.w, x_2418.z));
        let x_2421 : vec4<f32> = u_xlat7;
        let x_2424 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2427 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2421.x, x_2421.y, x_2421.x, x_2421.y) * vec4<f32>(x_2424.x, x_2424.y, x_2424.x, x_2424.y)) + vec4<f32>(x_2427.x, x_2427.w, x_2427.z, x_2427.w));
        let x_2430 : vec4<f32> = u_xlat8;
        let x_2432 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2430.x, x_2430.x, x_2430.x, x_2430.y) * vec4<f32>(x_2432.z, x_2432.w, x_2432.y, x_2432.z));
        let x_2435 : vec4<f32> = u_xlat8;
        let x_2437 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2435.y, x_2435.y, x_2435.z, x_2435.z) * x_2437);
        let x_2441 : f32 = u_xlat8.z;
        let x_2443 : f32 = u_xlat13.y;
        u_xlat71 = (x_2441 * x_2443);
        let x_2446 : vec4<f32> = u_xlat11;
        let x_2447 : vec2<f32> = vec2<f32>(x_2446.x, x_2446.y);
        let x_2449 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2447.x, x_2447.y, x_2449);
        let x_2457 : vec3<f32> = txVec34;
        let x_2459 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2457.xy, x_2457.z);
        u_xlat72 = x_2459;
        let x_2461 : vec4<f32> = u_xlat11;
        let x_2462 : vec2<f32> = vec2<f32>(x_2461.z, x_2461.w);
        let x_2464 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2462.x, x_2462.y, x_2464);
        let x_2471 : vec3<f32> = txVec35;
        let x_2473 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2471.xy, x_2471.z);
        u_xlat7.x = x_2473;
        let x_2476 : f32 = u_xlat7.x;
        let x_2478 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2476 * x_2478);
        let x_2482 : f32 = u_xlat14.x;
        let x_2483 : f32 = u_xlat72;
        let x_2486 : f32 = u_xlat7.x;
        u_xlat72 = ((x_2482 * x_2483) + x_2486);
        let x_2489 : vec2<f32> = u_xlat51;
        let x_2491 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2489.x, x_2489.y, x_2491);
        let x_2498 : vec3<f32> = txVec36;
        let x_2500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2498.xy, x_2498.z);
        u_xlat7.x = x_2500;
        let x_2503 : f32 = u_xlat14.z;
        let x_2505 : f32 = u_xlat7.x;
        let x_2507 : f32 = u_xlat72;
        u_xlat72 = ((x_2503 * x_2505) + x_2507);
        let x_2510 : vec4<f32> = u_xlat10;
        let x_2511 : vec2<f32> = vec2<f32>(x_2510.x, x_2510.y);
        let x_2513 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2511.x, x_2511.y, x_2513);
        let x_2520 : vec3<f32> = txVec37;
        let x_2522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2520.xy, x_2520.z);
        u_xlat7.x = x_2522;
        let x_2525 : f32 = u_xlat14.w;
        let x_2527 : f32 = u_xlat7.x;
        let x_2529 : f32 = u_xlat72;
        u_xlat72 = ((x_2525 * x_2527) + x_2529);
        let x_2532 : vec4<f32> = u_xlat12;
        let x_2533 : vec2<f32> = vec2<f32>(x_2532.x, x_2532.y);
        let x_2535 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2533.x, x_2533.y, x_2535);
        let x_2542 : vec3<f32> = txVec38;
        let x_2544 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2542.xy, x_2542.z);
        u_xlat7.x = x_2544;
        let x_2547 : f32 = u_xlat15.x;
        let x_2549 : f32 = u_xlat7.x;
        let x_2551 : f32 = u_xlat72;
        u_xlat72 = ((x_2547 * x_2549) + x_2551);
        let x_2554 : vec4<f32> = u_xlat12;
        let x_2555 : vec2<f32> = vec2<f32>(x_2554.z, x_2554.w);
        let x_2557 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2555.x, x_2555.y, x_2557);
        let x_2564 : vec3<f32> = txVec39;
        let x_2566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2564.xy, x_2564.z);
        u_xlat7.x = x_2566;
        let x_2569 : f32 = u_xlat15.y;
        let x_2571 : f32 = u_xlat7.x;
        let x_2573 : f32 = u_xlat72;
        u_xlat72 = ((x_2569 * x_2571) + x_2573);
        let x_2576 : vec4<f32> = u_xlat10;
        let x_2577 : vec2<f32> = vec2<f32>(x_2576.z, x_2576.w);
        let x_2579 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2577.x, x_2577.y, x_2579);
        let x_2586 : vec3<f32> = txVec40;
        let x_2588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2586.xy, x_2586.z);
        u_xlat7.x = x_2588;
        let x_2591 : f32 = u_xlat15.z;
        let x_2593 : f32 = u_xlat7.x;
        let x_2595 : f32 = u_xlat72;
        u_xlat72 = ((x_2591 * x_2593) + x_2595);
        let x_2598 : vec4<f32> = u_xlat9;
        let x_2599 : vec2<f32> = vec2<f32>(x_2598.x, x_2598.y);
        let x_2601 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2599.x, x_2599.y, x_2601);
        let x_2608 : vec3<f32> = txVec41;
        let x_2610 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2608.xy, x_2608.z);
        u_xlat7.x = x_2610;
        let x_2613 : f32 = u_xlat15.w;
        let x_2615 : f32 = u_xlat7.x;
        let x_2617 : f32 = u_xlat72;
        u_xlat72 = ((x_2613 * x_2615) + x_2617);
        let x_2620 : vec4<f32> = u_xlat9;
        let x_2621 : vec2<f32> = vec2<f32>(x_2620.z, x_2620.w);
        let x_2623 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2621.x, x_2621.y, x_2623);
        let x_2630 : vec3<f32> = txVec42;
        let x_2632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2630.xy, x_2630.z);
        u_xlat7.x = x_2632;
        let x_2634 : f32 = u_xlat71;
        let x_2636 : f32 = u_xlat7.x;
        let x_2638 : f32 = u_xlat72;
        u_xlat0.x = ((x_2634 * x_2636) + x_2638);
      } else {
        let x_2642 : vec4<f32> = vs_INTERP9;
        let x_2645 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2648 : vec2<f32> = ((vec2<f32>(x_2642.x, x_2642.y) * vec2<f32>(x_2645.z, x_2645.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2649 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2648.x, x_2648.y, x_2649.z, x_2649.w);
        let x_2651 : vec4<f32> = u_xlat7;
        let x_2653 : vec2<f32> = floor(vec2<f32>(x_2651.x, x_2651.y));
        let x_2654 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2653.x, x_2653.y, x_2654.z, x_2654.w);
        let x_2656 : vec4<f32> = vs_INTERP9;
        let x_2659 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2662 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2656.x, x_2656.y) * vec2<f32>(x_2659.z, x_2659.w)) + -(vec2<f32>(x_2662.x, x_2662.y)));
        let x_2666 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2666.x, x_2666.x, x_2666.y, x_2666.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2669 : vec4<f32> = u_xlat8;
        let x_2671 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2669.x, x_2669.x, x_2669.z, x_2669.z) * vec4<f32>(x_2671.x, x_2671.x, x_2671.z, x_2671.z));
        let x_2674 : vec4<f32> = u_xlat9;
        let x_2676 : vec2<f32> = (vec2<f32>(x_2674.y, x_2674.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2677 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2677.x, x_2676.x, x_2677.z, x_2676.y);
        let x_2679 : vec4<f32> = u_xlat9;
        let x_2682 : vec2<f32> = u_xlat51;
        let x_2684 : vec2<f32> = ((vec2<f32>(x_2679.x, x_2679.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2682));
        let x_2685 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2684.x, x_2685.y, x_2684.y, x_2685.w);
        let x_2687 : vec2<f32> = u_xlat51;
        let x_2689 : vec2<f32> = (-(x_2687) + vec2<f32>(1.0f, 1.0f));
        let x_2690 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2689.x, x_2689.y, x_2690.z, x_2690.w);
        let x_2692 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_2692, vec2<f32>(0.0f, 0.0f));
        let x_2694 : vec2<f32> = u_xlat53;
        let x_2696 : vec2<f32> = u_xlat53;
        let x_2698 : vec4<f32> = u_xlat9;
        let x_2700 : vec2<f32> = ((-(x_2694) * x_2696) + vec2<f32>(x_2698.x, x_2698.y));
        let x_2701 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2700.x, x_2700.y, x_2701.z, x_2701.w);
        let x_2703 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_2703, vec2<f32>(0.0f, 0.0f));
        let x_2705 : vec2<f32> = u_xlat53;
        let x_2707 : vec2<f32> = u_xlat53;
        let x_2709 : vec4<f32> = u_xlat8;
        let x_2711 : vec2<f32> = ((-(x_2705) * x_2707) + vec2<f32>(x_2709.y, x_2709.w));
        let x_2712 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2711.x, x_2712.y, x_2711.y);
        let x_2714 : vec4<f32> = u_xlat9;
        let x_2716 : vec2<f32> = (vec2<f32>(x_2714.x, x_2714.y) + vec2<f32>(2.0f, 2.0f));
        let x_2717 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2716.x, x_2716.y, x_2717.z, x_2717.w);
        let x_2719 : vec3<f32> = u_xlat30;
        let x_2721 : vec2<f32> = (vec2<f32>(x_2719.x, x_2719.z) + vec2<f32>(2.0f, 2.0f));
        let x_2722 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2722.x, x_2721.x, x_2722.z, x_2721.y);
        let x_2725 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2725 * 0.081632003f);
        let x_2728 : vec4<f32> = u_xlat8;
        let x_2730 : vec3<f32> = (vec3<f32>(x_2728.z, x_2728.x, x_2728.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2731 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2730.x, x_2730.y, x_2730.z, x_2731.w);
        let x_2733 : vec4<f32> = u_xlat9;
        let x_2735 : vec2<f32> = (vec2<f32>(x_2733.x, x_2733.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2736 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2735.x, x_2735.y, x_2736.z, x_2736.w);
        let x_2739 : f32 = u_xlat12.y;
        u_xlat11.x = x_2739;
        let x_2741 : vec2<f32> = u_xlat51;
        let x_2744 : vec2<f32> = ((vec2<f32>(x_2741.x, x_2741.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2745 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2745.x, x_2744.x, x_2745.z, x_2744.y);
        let x_2747 : vec2<f32> = u_xlat51;
        let x_2750 : vec2<f32> = ((vec2<f32>(x_2747.x, x_2747.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2751 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2750.x, x_2751.y, x_2750.y, x_2751.w);
        let x_2754 : f32 = u_xlat8.x;
        u_xlat9.y = x_2754;
        let x_2757 : f32 = u_xlat10.y;
        u_xlat9.w = x_2757;
        let x_2759 : vec4<f32> = u_xlat9;
        let x_2760 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2759 + x_2760);
        let x_2762 : vec2<f32> = u_xlat51;
        let x_2765 : vec2<f32> = ((vec2<f32>(x_2762.y, x_2762.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2766 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2766.x, x_2765.x, x_2766.z, x_2765.y);
        let x_2768 : vec2<f32> = u_xlat51;
        let x_2771 : vec2<f32> = ((vec2<f32>(x_2768.y, x_2768.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2772 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2771.x, x_2772.y, x_2771.y, x_2772.w);
        let x_2775 : f32 = u_xlat8.y;
        u_xlat10.y = x_2775;
        let x_2777 : vec4<f32> = u_xlat10;
        let x_2778 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2777 + x_2778);
        let x_2780 : vec4<f32> = u_xlat9;
        let x_2781 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2780 / x_2781);
        let x_2783 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2783 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2785 : vec4<f32> = u_xlat10;
        let x_2786 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2785 / x_2786);
        let x_2788 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2788 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2790 : vec4<f32> = u_xlat9;
        let x_2793 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2790.w, x_2790.x, x_2790.y, x_2790.z) * vec4<f32>(x_2793.x, x_2793.x, x_2793.x, x_2793.x));
        let x_2796 : vec4<f32> = u_xlat10;
        let x_2799 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2796.x, x_2796.w, x_2796.y, x_2796.z) * vec4<f32>(x_2799.y, x_2799.y, x_2799.y, x_2799.y));
        let x_2802 : vec4<f32> = u_xlat9;
        let x_2803 : vec3<f32> = vec3<f32>(x_2802.y, x_2802.z, x_2802.w);
        let x_2804 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2803.x, x_2804.y, x_2803.y, x_2803.z);
        let x_2807 : f32 = u_xlat10.x;
        u_xlat12.y = x_2807;
        let x_2809 : vec4<f32> = u_xlat7;
        let x_2812 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2815 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2809.x, x_2809.y, x_2809.x, x_2809.y) * vec4<f32>(x_2812.x, x_2812.y, x_2812.x, x_2812.y)) + vec4<f32>(x_2815.x, x_2815.y, x_2815.z, x_2815.y));
        let x_2818 : vec4<f32> = u_xlat7;
        let x_2821 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2824 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_2818.x, x_2818.y) * vec2<f32>(x_2821.x, x_2821.y)) + vec2<f32>(x_2824.w, x_2824.y));
        let x_2828 : f32 = u_xlat12.y;
        u_xlat9.y = x_2828;
        let x_2831 : f32 = u_xlat10.z;
        u_xlat12.y = x_2831;
        let x_2833 : vec4<f32> = u_xlat7;
        let x_2836 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2839 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2833.x, x_2833.y, x_2833.x, x_2833.y) * vec4<f32>(x_2836.x, x_2836.y, x_2836.x, x_2836.y)) + vec4<f32>(x_2839.x, x_2839.y, x_2839.z, x_2839.y));
        let x_2842 : vec4<f32> = u_xlat7;
        let x_2845 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2848 : vec4<f32> = u_xlat12;
        let x_2850 : vec2<f32> = ((vec2<f32>(x_2842.x, x_2842.y) * vec2<f32>(x_2845.x, x_2845.y)) + vec2<f32>(x_2848.w, x_2848.y));
        let x_2851 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2850.x, x_2850.y, x_2851.z, x_2851.w);
        let x_2854 : f32 = u_xlat12.y;
        u_xlat9.z = x_2854;
        let x_2856 : vec4<f32> = u_xlat7;
        let x_2859 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2862 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2856.x, x_2856.y, x_2856.x, x_2856.y) * vec4<f32>(x_2859.x, x_2859.y, x_2859.x, x_2859.y)) + vec4<f32>(x_2862.x, x_2862.y, x_2862.x, x_2862.z));
        let x_2866 : f32 = u_xlat10.w;
        u_xlat12.y = x_2866;
        let x_2868 : vec4<f32> = u_xlat7;
        let x_2871 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2874 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2868.x, x_2868.y, x_2868.x, x_2868.y) * vec4<f32>(x_2871.x, x_2871.y, x_2871.x, x_2871.y)) + vec4<f32>(x_2874.x, x_2874.y, x_2874.z, x_2874.y));
        let x_2877 : vec4<f32> = u_xlat7;
        let x_2880 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2883 : vec4<f32> = u_xlat12;
        let x_2885 : vec2<f32> = ((vec2<f32>(x_2877.x, x_2877.y) * vec2<f32>(x_2880.x, x_2880.y)) + vec2<f32>(x_2883.w, x_2883.y));
        let x_2886 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2885.x, x_2885.y, x_2886.z);
        let x_2889 : f32 = u_xlat12.y;
        u_xlat9.w = x_2889;
        let x_2892 : vec4<f32> = u_xlat7;
        let x_2895 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2898 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_2892.x, x_2892.y) * vec2<f32>(x_2895.x, x_2895.y)) + vec2<f32>(x_2898.x, x_2898.w));
        let x_2901 : vec4<f32> = u_xlat12;
        let x_2902 : vec3<f32> = vec3<f32>(x_2901.x, x_2901.z, x_2901.w);
        let x_2903 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2902.x, x_2903.y, x_2902.y, x_2902.z);
        let x_2905 : vec4<f32> = u_xlat7;
        let x_2908 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2911 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2905.x, x_2905.y, x_2905.x, x_2905.y) * vec4<f32>(x_2908.x, x_2908.y, x_2908.x, x_2908.y)) + vec4<f32>(x_2911.x, x_2911.y, x_2911.z, x_2911.y));
        let x_2914 : vec4<f32> = u_xlat7;
        let x_2917 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2920 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_2914.x, x_2914.y) * vec2<f32>(x_2917.x, x_2917.y)) + vec2<f32>(x_2920.w, x_2920.y));
        let x_2924 : f32 = u_xlat9.x;
        u_xlat10.x = x_2924;
        let x_2926 : vec4<f32> = u_xlat7;
        let x_2929 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2932 : vec4<f32> = u_xlat10;
        let x_2934 : vec2<f32> = ((vec2<f32>(x_2926.x, x_2926.y) * vec2<f32>(x_2929.x, x_2929.y)) + vec2<f32>(x_2932.x, x_2932.y));
        let x_2935 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2934.x, x_2934.y, x_2935.z, x_2935.w);
        let x_2937 : vec4<f32> = u_xlat8;
        let x_2939 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2937.x, x_2937.x, x_2937.x, x_2937.x) * x_2939);
        let x_2941 : vec4<f32> = u_xlat8;
        let x_2943 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2941.y, x_2941.y, x_2941.y, x_2941.y) * x_2943);
        let x_2945 : vec4<f32> = u_xlat8;
        let x_2947 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2945.z, x_2945.z, x_2945.z, x_2945.z) * x_2947);
        let x_2949 : vec4<f32> = u_xlat8;
        let x_2951 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2949.w, x_2949.w, x_2949.w, x_2949.w) * x_2951);
        let x_2954 : vec4<f32> = u_xlat13;
        let x_2955 : vec2<f32> = vec2<f32>(x_2954.x, x_2954.y);
        let x_2957 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2955.x, x_2955.y, x_2957);
        let x_2964 : vec3<f32> = txVec43;
        let x_2966 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2964.xy, x_2964.z);
        u_xlat71 = x_2966;
        let x_2968 : vec4<f32> = u_xlat13;
        let x_2969 : vec2<f32> = vec2<f32>(x_2968.z, x_2968.w);
        let x_2971 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2969.x, x_2969.y, x_2971);
        let x_2978 : vec3<f32> = txVec44;
        let x_2980 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2978.xy, x_2978.z);
        u_xlat72 = x_2980;
        let x_2981 : f32 = u_xlat72;
        let x_2983 : f32 = u_xlat18.y;
        u_xlat72 = (x_2981 * x_2983);
        let x_2986 : f32 = u_xlat18.x;
        let x_2987 : f32 = u_xlat71;
        let x_2989 : f32 = u_xlat72;
        u_xlat71 = ((x_2986 * x_2987) + x_2989);
        let x_2992 : vec2<f32> = u_xlat51;
        let x_2994 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2992.x, x_2992.y, x_2994);
        let x_3001 : vec3<f32> = txVec45;
        let x_3003 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3001.xy, x_3001.z);
        u_xlat72 = x_3003;
        let x_3005 : f32 = u_xlat18.z;
        let x_3006 : f32 = u_xlat72;
        let x_3008 : f32 = u_xlat71;
        u_xlat71 = ((x_3005 * x_3006) + x_3008);
        let x_3011 : vec4<f32> = u_xlat16;
        let x_3012 : vec2<f32> = vec2<f32>(x_3011.x, x_3011.y);
        let x_3014 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_3012.x, x_3012.y, x_3014);
        let x_3021 : vec3<f32> = txVec46;
        let x_3023 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3021.xy, x_3021.z);
        u_xlat72 = x_3023;
        let x_3025 : f32 = u_xlat18.w;
        let x_3026 : f32 = u_xlat72;
        let x_3028 : f32 = u_xlat71;
        u_xlat71 = ((x_3025 * x_3026) + x_3028);
        let x_3031 : vec4<f32> = u_xlat14;
        let x_3032 : vec2<f32> = vec2<f32>(x_3031.x, x_3031.y);
        let x_3034 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3032.x, x_3032.y, x_3034);
        let x_3041 : vec3<f32> = txVec47;
        let x_3043 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3041.xy, x_3041.z);
        u_xlat72 = x_3043;
        let x_3045 : f32 = u_xlat19.x;
        let x_3046 : f32 = u_xlat72;
        let x_3048 : f32 = u_xlat71;
        u_xlat71 = ((x_3045 * x_3046) + x_3048);
        let x_3051 : vec4<f32> = u_xlat14;
        let x_3052 : vec2<f32> = vec2<f32>(x_3051.z, x_3051.w);
        let x_3054 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3052.x, x_3052.y, x_3054);
        let x_3061 : vec3<f32> = txVec48;
        let x_3063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3061.xy, x_3061.z);
        u_xlat72 = x_3063;
        let x_3065 : f32 = u_xlat19.y;
        let x_3066 : f32 = u_xlat72;
        let x_3068 : f32 = u_xlat71;
        u_xlat71 = ((x_3065 * x_3066) + x_3068);
        let x_3071 : vec4<f32> = u_xlat15;
        let x_3072 : vec2<f32> = vec2<f32>(x_3071.x, x_3071.y);
        let x_3074 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3072.x, x_3072.y, x_3074);
        let x_3081 : vec3<f32> = txVec49;
        let x_3083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3081.xy, x_3081.z);
        u_xlat72 = x_3083;
        let x_3085 : f32 = u_xlat19.z;
        let x_3086 : f32 = u_xlat72;
        let x_3088 : f32 = u_xlat71;
        u_xlat71 = ((x_3085 * x_3086) + x_3088);
        let x_3091 : vec4<f32> = u_xlat16;
        let x_3092 : vec2<f32> = vec2<f32>(x_3091.z, x_3091.w);
        let x_3094 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3092.x, x_3092.y, x_3094);
        let x_3101 : vec3<f32> = txVec50;
        let x_3103 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3101.xy, x_3101.z);
        u_xlat72 = x_3103;
        let x_3105 : f32 = u_xlat19.w;
        let x_3106 : f32 = u_xlat72;
        let x_3108 : f32 = u_xlat71;
        u_xlat71 = ((x_3105 * x_3106) + x_3108);
        let x_3111 : vec4<f32> = u_xlat17;
        let x_3112 : vec2<f32> = vec2<f32>(x_3111.x, x_3111.y);
        let x_3114 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3112.x, x_3112.y, x_3114);
        let x_3121 : vec3<f32> = txVec51;
        let x_3123 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3121.xy, x_3121.z);
        u_xlat72 = x_3123;
        let x_3125 : f32 = u_xlat20.x;
        let x_3126 : f32 = u_xlat72;
        let x_3128 : f32 = u_xlat71;
        u_xlat71 = ((x_3125 * x_3126) + x_3128);
        let x_3131 : vec4<f32> = u_xlat17;
        let x_3132 : vec2<f32> = vec2<f32>(x_3131.z, x_3131.w);
        let x_3134 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3132.x, x_3132.y, x_3134);
        let x_3141 : vec3<f32> = txVec52;
        let x_3143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3141.xy, x_3141.z);
        u_xlat72 = x_3143;
        let x_3145 : f32 = u_xlat20.y;
        let x_3146 : f32 = u_xlat72;
        let x_3148 : f32 = u_xlat71;
        u_xlat71 = ((x_3145 * x_3146) + x_3148);
        let x_3151 : vec3<f32> = u_xlat31;
        let x_3152 : vec2<f32> = vec2<f32>(x_3151.x, x_3151.y);
        let x_3154 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3152.x, x_3152.y, x_3154);
        let x_3161 : vec3<f32> = txVec53;
        let x_3163 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3161.xy, x_3161.z);
        u_xlat72 = x_3163;
        let x_3165 : f32 = u_xlat20.z;
        let x_3166 : f32 = u_xlat72;
        let x_3168 : f32 = u_xlat71;
        u_xlat71 = ((x_3165 * x_3166) + x_3168);
        let x_3171 : vec2<f32> = u_xlat59;
        let x_3173 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3171.x, x_3171.y, x_3173);
        let x_3180 : vec3<f32> = txVec54;
        let x_3182 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3180.xy, x_3180.z);
        u_xlat72 = x_3182;
        let x_3184 : f32 = u_xlat20.w;
        let x_3185 : f32 = u_xlat72;
        let x_3187 : f32 = u_xlat71;
        u_xlat71 = ((x_3184 * x_3185) + x_3187);
        let x_3190 : vec4<f32> = u_xlat12;
        let x_3191 : vec2<f32> = vec2<f32>(x_3190.x, x_3190.y);
        let x_3193 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3191.x, x_3191.y, x_3193);
        let x_3200 : vec3<f32> = txVec55;
        let x_3202 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3200.xy, x_3200.z);
        u_xlat72 = x_3202;
        let x_3204 : f32 = u_xlat8.x;
        let x_3205 : f32 = u_xlat72;
        let x_3207 : f32 = u_xlat71;
        u_xlat71 = ((x_3204 * x_3205) + x_3207);
        let x_3210 : vec4<f32> = u_xlat12;
        let x_3211 : vec2<f32> = vec2<f32>(x_3210.z, x_3210.w);
        let x_3213 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3211.x, x_3211.y, x_3213);
        let x_3220 : vec3<f32> = txVec56;
        let x_3222 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3220.xy, x_3220.z);
        u_xlat72 = x_3222;
        let x_3224 : f32 = u_xlat8.y;
        let x_3225 : f32 = u_xlat72;
        let x_3227 : f32 = u_xlat71;
        u_xlat71 = ((x_3224 * x_3225) + x_3227);
        let x_3230 : vec2<f32> = u_xlat54;
        let x_3232 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3230.x, x_3230.y, x_3232);
        let x_3239 : vec3<f32> = txVec57;
        let x_3241 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3239.xy, x_3239.z);
        u_xlat72 = x_3241;
        let x_3243 : f32 = u_xlat8.z;
        let x_3244 : f32 = u_xlat72;
        let x_3246 : f32 = u_xlat71;
        u_xlat71 = ((x_3243 * x_3244) + x_3246);
        let x_3249 : vec4<f32> = u_xlat7;
        let x_3250 : vec2<f32> = vec2<f32>(x_3249.x, x_3249.y);
        let x_3252 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3250.x, x_3250.y, x_3252);
        let x_3259 : vec3<f32> = txVec58;
        let x_3261 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3259.xy, x_3259.z);
        u_xlat72 = x_3261;
        let x_3263 : f32 = u_xlat8.w;
        let x_3264 : f32 = u_xlat72;
        let x_3266 : f32 = u_xlat71;
        u_xlat0.x = ((x_3263 * x_3264) + x_3266);
      }
    }
  } else {
    let x_3271 : vec4<f32> = vs_INTERP9;
    let x_3272 : vec2<f32> = vec2<f32>(x_3271.x, x_3271.y);
    let x_3274 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3272.x, x_3272.y, x_3274);
    let x_3281 : vec3<f32> = txVec59;
    let x_3283 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3281.xy, x_3281.z);
    u_xlat0.x = x_3283;
  }
  let x_3286 : f32 = u_xlat0.x;
  let x_3288 : f32 = x_378.x_MainLightShadowParams.x;
  let x_3291 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3286 * x_3288) + x_3291);
  let x_3296 : f32 = vs_INTERP9.z;
  u_xlatb2 = (0.0f >= x_3296);
  let x_3299 : f32 = vs_INTERP9.z;
  u_xlatb71 = (x_3299 >= 1.0f);
  let x_3301 : bool = u_xlatb2;
  let x_3302 : bool = u_xlatb71;
  u_xlatb2 = (x_3301 | x_3302);
  let x_3304 : bool = u_xlatb2;
  if (x_3304) {
    x_3305 = 1.0f;
  } else {
    let x_3310 : f32 = u_xlat0.x;
    x_3305 = x_3310;
  }
  let x_3311 : f32 = x_3305;
  u_xlat0.x = x_3311;
  let x_3313 : vec3<f32> = vs_INTERP0;
  let x_3315 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  let x_3317 : vec3<f32> = (x_3313 + -(x_3315));
  let x_3318 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3317.x, x_3317.y, x_3317.z, x_3318.w);
  let x_3320 : vec4<f32> = u_xlat7;
  let x_3322 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3320.x, x_3320.y, x_3320.z), vec3<f32>(x_3322.x, x_3322.y, x_3322.z));
  let x_3327 : f32 = u_xlat2.x;
  let x_3329 : f32 = x_378.x_MainLightShadowParams.z;
  let x_3332 : f32 = x_378.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3327 * x_3329) + x_3332);
  let x_3336 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3336, 0.0f, 1.0f);
  let x_3340 : f32 = u_xlat0.x;
  u_xlat71 = (-(x_3340) + 1.0f);
  let x_3344 : f32 = u_xlat2.x;
  let x_3345 : f32 = u_xlat71;
  let x_3348 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3344 * x_3345) + x_3348);
  let x_3351 : f32 = u_xlat48;
  let x_3354 : vec4<f32> = x_158.x_MainLightColor;
  let x_3356 : vec3<f32> = (vec3<f32>(x_3351, x_3351, x_3351) * vec3<f32>(x_3354.x, x_3354.y, x_3354.z));
  let x_3357 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3356.x, x_3356.y, x_3356.z, x_3357.w);
  let x_3359 : vec3<f32> = u_xlat5;
  let x_3361 : vec3<f32> = u_xlat22;
  u_xlat2.x = dot(-(x_3359), x_3361);
  let x_3365 : f32 = u_xlat2.x;
  let x_3367 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3365 + x_3367);
  let x_3370 : vec3<f32> = u_xlat22;
  let x_3371 : vec3<f32> = u_xlat2;
  let x_3375 : vec3<f32> = u_xlat5;
  let x_3377 : vec3<f32> = ((x_3370 * -(vec3<f32>(x_3371.x, x_3371.x, x_3371.x))) + -(x_3375));
  let x_3378 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3377.x, x_3377.y, x_3377.z, x_3378.w);
  let x_3380 : vec3<f32> = u_xlat22;
  let x_3381 : vec3<f32> = u_xlat5;
  u_xlat2.x = dot(x_3380, x_3381);
  let x_3385 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3385, 0.0f, 1.0f);
  let x_3389 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3389) + 1.0f);
  let x_3394 : f32 = u_xlat2.x;
  let x_3396 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3394 * x_3396);
  let x_3400 : f32 = u_xlat2.x;
  let x_3402 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3400 * x_3402);
  let x_3406 : f32 = u_xlat46.x;
  u_xlat71 = ((-(x_3406) * 0.699999988f) + 1.700000048f);
  let x_3413 : f32 = u_xlat46.x;
  let x_3414 : f32 = u_xlat71;
  u_xlat46.x = (x_3413 * x_3414);
  let x_3418 : f32 = u_xlat46.x;
  u_xlat46.x = (x_3418 * 6.0f);
  let x_3430 : vec4<f32> = u_xlat8;
  let x_3433 : f32 = u_xlat46.x;
  let x_3434 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3430.x, x_3430.y, x_3430.z), x_3433);
  u_xlat8 = x_3434;
  let x_3436 : f32 = u_xlat8.w;
  u_xlat46.x = (x_3436 + -1.0f);
  let x_3440 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3442 : f32 = u_xlat46.x;
  u_xlat46.x = ((x_3440 * x_3442) + 1.0f);
  let x_3447 : f32 = u_xlat46.x;
  u_xlat46.x = max(x_3447, 0.0f);
  let x_3451 : f32 = u_xlat46.x;
  u_xlat46.x = log2(x_3451);
  let x_3455 : f32 = u_xlat46.x;
  let x_3457 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat46.x = (x_3455 * x_3457);
  let x_3461 : f32 = u_xlat46.x;
  u_xlat46.x = exp2(x_3461);
  let x_3465 : f32 = u_xlat46.x;
  let x_3467 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat46.x = (x_3465 * x_3467);
  let x_3470 : vec4<f32> = u_xlat8;
  let x_3472 : vec2<f32> = u_xlat46;
  let x_3474 : vec3<f32> = (vec3<f32>(x_3470.x, x_3470.y, x_3470.z) * vec3<f32>(x_3472.x, x_3472.x, x_3472.x));
  let x_3475 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3474.x, x_3474.y, x_3474.z, x_3475.w);
  let x_3477 : f32 = u_xlat68;
  let x_3479 : f32 = u_xlat68;
  u_xlat46 = ((vec2<f32>(x_3477, x_3477) * vec2<f32>(x_3479, x_3479)) + vec2<f32>(-1.0f, 1.0f));
  let x_3485 : f32 = u_xlat46.y;
  u_xlat68 = (1.0f / x_3485);
  let x_3488 : f32 = u_xlat2.x;
  let x_3490 : f32 = u_xlat26.x;
  u_xlat2.x = ((x_3488 * x_3490) + 0.039999999f);
  let x_3496 : f32 = u_xlat2.x;
  let x_3497 : f32 = u_xlat68;
  u_xlat2.x = (x_3496 * x_3497);
  let x_3500 : vec3<f32> = u_xlat2;
  let x_3502 : vec4<f32> = u_xlat8;
  let x_3504 : vec3<f32> = (vec3<f32>(x_3500.x, x_3500.x, x_3500.x) * vec3<f32>(x_3502.x, x_3502.y, x_3502.z));
  let x_3505 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3504.x, x_3504.y, x_3504.z, x_3505.w);
  let x_3507 : vec4<f32> = u_xlat3;
  let x_3509 : vec4<f32> = u_xlat6;
  let x_3512 : vec4<f32> = u_xlat8;
  let x_3514 : vec3<f32> = ((vec3<f32>(x_3507.x, x_3507.y, x_3507.z) * vec3<f32>(x_3509.x, x_3509.y, x_3509.z)) + vec3<f32>(x_3512.x, x_3512.y, x_3512.z));
  let x_3515 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3514.x, x_3514.y, x_3514.z, x_3515.w);
  let x_3518 : f32 = u_xlat0.x;
  let x_3520 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3518 * x_3520);
  let x_3523 : vec3<f32> = u_xlat22;
  let x_3525 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat2.x = dot(x_3523, vec3<f32>(x_3525.x, x_3525.y, x_3525.z));
  let x_3530 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3530, 0.0f, 1.0f);
  let x_3534 : f32 = u_xlat0.x;
  let x_3536 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3534 * x_3536);
  let x_3539 : vec3<f32> = u_xlat0;
  let x_3541 : vec4<f32> = u_xlat7;
  let x_3543 : vec3<f32> = (vec3<f32>(x_3539.x, x_3539.x, x_3539.x) * vec3<f32>(x_3541.x, x_3541.y, x_3541.z));
  let x_3544 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3543.x, x_3543.y, x_3543.z, x_3544.w);
  let x_3546 : vec3<f32> = u_xlat5;
  let x_3548 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3550 : vec3<f32> = (x_3546 + vec3<f32>(x_3548.x, x_3548.y, x_3548.z));
  let x_3551 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3550.x, x_3550.y, x_3550.z, x_3551.w);
  let x_3553 : vec4<f32> = u_xlat8;
  let x_3555 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3553.x, x_3553.y, x_3553.z), vec3<f32>(x_3555.x, x_3555.y, x_3555.z));
  let x_3560 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3560, 1.17549435e-37f);
  let x_3564 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3564);
  let x_3567 : vec3<f32> = u_xlat0;
  let x_3569 : vec4<f32> = u_xlat8;
  let x_3571 : vec3<f32> = (vec3<f32>(x_3567.x, x_3567.x, x_3567.x) * vec3<f32>(x_3569.x, x_3569.y, x_3569.z));
  let x_3572 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3571.x, x_3571.y, x_3571.z, x_3572.w);
  let x_3574 : vec3<f32> = u_xlat22;
  let x_3575 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3574, vec3<f32>(x_3575.x, x_3575.y, x_3575.z));
  let x_3580 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3580, 0.0f, 1.0f);
  let x_3584 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3586 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3584.x, x_3584.y, x_3584.z), vec3<f32>(x_3586.x, x_3586.y, x_3586.z));
  let x_3591 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3591, 0.0f, 1.0f);
  let x_3595 : f32 = u_xlat0.x;
  let x_3597 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3595 * x_3597);
  let x_3601 : f32 = u_xlat0.x;
  let x_3603 : f32 = u_xlat46.x;
  u_xlat0.x = ((x_3601 * x_3603) + 1.000010014f);
  let x_3609 : f32 = u_xlat2.x;
  let x_3611 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3609 * x_3611);
  let x_3615 : f32 = u_xlat0.x;
  let x_3617 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3615 * x_3617);
  let x_3621 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3621, 0.100000001f);
  let x_3626 : f32 = u_xlat0.x;
  let x_3628 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3626 * x_3628);
  let x_3631 : f32 = u_xlat70;
  let x_3633 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3631 * x_3633);
  let x_3636 : f32 = u_xlat69;
  let x_3638 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3636 / x_3638);
  let x_3641 : vec3<f32> = u_xlat0;
  let x_3645 : vec4<f32> = u_xlat6;
  let x_3647 : vec3<f32> = ((vec3<f32>(x_3641.x, x_3641.x, x_3641.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3645.x, x_3645.y, x_3645.z));
  let x_3648 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3647.x, x_3647.y, x_3647.z, x_3648.w);
  let x_3650 : vec4<f32> = u_xlat7;
  let x_3652 : vec4<f32> = u_xlat8;
  let x_3654 : vec3<f32> = (vec3<f32>(x_3650.x, x_3650.y, x_3650.z) * vec3<f32>(x_3652.x, x_3652.y, x_3652.z));
  let x_3655 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3654.x, x_3654.y, x_3654.z, x_3655.w);
  let x_3658 : f32 = x_158.x_AdditionalLightsCount.x;
  let x_3660 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3658, x_3660);
  let x_3665 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3665));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3677 : u32 = u_xlatu_loop_1;
    let x_3678 : u32 = u_xlatu0;
    if ((x_3677 < x_3678)) {
    } else {
      break;
    }
    let x_3680 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3680 >> 2u);
    let x_3683 : u32 = u_xlatu_loop_1;
    u_xlati26 = bitcast<i32>((x_3683 & 3u));
    let x_3686 : u32 = u_xlatu68;
    let x_3689 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3686)];
    let x_3699 : i32 = u_xlati26;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3704 : vec4<u32> = indexable[x_3699];
    u_xlat68 = dot(x_3689, bitcast<vec4<f32>>(x_3704));
    let x_3708 : f32 = u_xlat68;
    u_xlati68 = i32(x_3708);
    let x_3710 : vec3<f32> = vs_INTERP0;
    let x_3722 : i32 = u_xlati68;
    let x_3724 : vec4<f32> = x_3721.x_AdditionalLightsPosition[x_3722];
    let x_3727 : i32 = u_xlati68;
    let x_3729 : vec4<f32> = x_3721.x_AdditionalLightsPosition[x_3727];
    let x_3731 : vec3<f32> = ((-(x_3710) * vec3<f32>(x_3724.w, x_3724.w, x_3724.w)) + vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
    let x_3732 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3731.x, x_3731.y, x_3731.z, x_3732.w);
    let x_3734 : vec4<f32> = u_xlat9;
    let x_3736 : vec4<f32> = u_xlat9;
    u_xlat26.x = dot(vec3<f32>(x_3734.x, x_3734.y, x_3734.z), vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
    let x_3741 : f32 = u_xlat26.x;
    u_xlat26.x = max(x_3741, 6.10351562e-05f);
    let x_3746 : f32 = u_xlat26.x;
    u_xlat71 = inverseSqrt(x_3746);
    let x_3748 : f32 = u_xlat71;
    let x_3750 : vec4<f32> = u_xlat9;
    let x_3752 : vec3<f32> = (vec3<f32>(x_3748, x_3748, x_3748) * vec3<f32>(x_3750.x, x_3750.y, x_3750.z));
    let x_3753 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3752.x, x_3752.y, x_3752.z, x_3753.w);
    let x_3756 : f32 = u_xlat26.x;
    u_xlat72 = (1.0f / x_3756);
    let x_3759 : f32 = u_xlat26.x;
    let x_3760 : i32 = u_xlati68;
    let x_3762 : f32 = x_3721.x_AdditionalLightsAttenuation[x_3760].x;
    u_xlat26.x = (x_3759 * x_3762);
    let x_3766 : f32 = u_xlat26.x;
    let x_3769 : f32 = u_xlat26.x;
    u_xlat26.x = ((-(x_3766) * x_3769) + 1.0f);
    let x_3774 : f32 = u_xlat26.x;
    u_xlat26.x = max(x_3774, 0.0f);
    let x_3778 : f32 = u_xlat26.x;
    let x_3780 : f32 = u_xlat26.x;
    u_xlat26.x = (x_3778 * x_3780);
    let x_3784 : f32 = u_xlat26.x;
    let x_3785 : f32 = u_xlat72;
    u_xlat26.x = (x_3784 * x_3785);
    let x_3788 : i32 = u_xlati68;
    let x_3790 : vec4<f32> = x_3721.x_AdditionalLightsSpotDir[x_3788];
    let x_3792 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3790.x, x_3790.y, x_3790.z), vec3<f32>(x_3792.x, x_3792.y, x_3792.z));
    let x_3795 : f32 = u_xlat72;
    let x_3796 : i32 = u_xlati68;
    let x_3798 : f32 = x_3721.x_AdditionalLightsAttenuation[x_3796].z;
    let x_3800 : i32 = u_xlati68;
    let x_3802 : f32 = x_3721.x_AdditionalLightsAttenuation[x_3800].w;
    u_xlat72 = ((x_3795 * x_3798) + x_3802);
    let x_3804 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3804, 0.0f, 1.0f);
    let x_3806 : f32 = u_xlat72;
    let x_3807 : f32 = u_xlat72;
    u_xlat72 = (x_3806 * x_3807);
    let x_3810 : f32 = u_xlat26.x;
    let x_3811 : f32 = u_xlat72;
    u_xlat26.x = (x_3810 * x_3811);
    let x_3814 : f32 = u_xlat48;
    let x_3816 : i32 = u_xlati68;
    let x_3818 : vec4<f32> = x_3721.x_AdditionalLightsColor[x_3816];
    let x_3820 : vec3<f32> = (vec3<f32>(x_3814, x_3814, x_3814) * vec3<f32>(x_3818.x, x_3818.y, x_3818.z));
    let x_3821 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3820.x, x_3820.y, x_3820.z, x_3821.w);
    let x_3823 : vec3<f32> = u_xlat22;
    let x_3824 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_3823, vec3<f32>(x_3824.x, x_3824.y, x_3824.z));
    let x_3827 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3827, 0.0f, 1.0f);
    let x_3829 : f32 = u_xlat68;
    let x_3831 : f32 = u_xlat26.x;
    u_xlat68 = (x_3829 * x_3831);
    let x_3833 : f32 = u_xlat68;
    let x_3835 : vec4<f32> = u_xlat11;
    let x_3837 : vec3<f32> = (vec3<f32>(x_3833, x_3833, x_3833) * vec3<f32>(x_3835.x, x_3835.y, x_3835.z));
    let x_3838 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3837.x, x_3837.y, x_3837.z, x_3838.w);
    let x_3840 : vec4<f32> = u_xlat9;
    let x_3842 : f32 = u_xlat71;
    let x_3845 : vec3<f32> = u_xlat5;
    let x_3846 : vec3<f32> = ((vec3<f32>(x_3840.x, x_3840.y, x_3840.z) * vec3<f32>(x_3842, x_3842, x_3842)) + x_3845);
    let x_3847 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3846.x, x_3846.y, x_3846.z, x_3847.w);
    let x_3849 : vec4<f32> = u_xlat9;
    let x_3851 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_3849.x, x_3849.y, x_3849.z), vec3<f32>(x_3851.x, x_3851.y, x_3851.z));
    let x_3854 : f32 = u_xlat68;
    u_xlat68 = max(x_3854, 1.17549435e-37f);
    let x_3856 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3856);
    let x_3858 : f32 = u_xlat68;
    let x_3860 : vec4<f32> = u_xlat9;
    let x_3862 : vec3<f32> = (vec3<f32>(x_3858, x_3858, x_3858) * vec3<f32>(x_3860.x, x_3860.y, x_3860.z));
    let x_3863 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3862.x, x_3862.y, x_3862.z, x_3863.w);
    let x_3865 : vec3<f32> = u_xlat22;
    let x_3866 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(x_3865, vec3<f32>(x_3866.x, x_3866.y, x_3866.z));
    let x_3869 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3869, 0.0f, 1.0f);
    let x_3871 : vec4<f32> = u_xlat10;
    let x_3873 : vec4<f32> = u_xlat9;
    u_xlat26.x = dot(vec3<f32>(x_3871.x, x_3871.y, x_3871.z), vec3<f32>(x_3873.x, x_3873.y, x_3873.z));
    let x_3878 : f32 = u_xlat26.x;
    u_xlat26.x = clamp(x_3878, 0.0f, 1.0f);
    let x_3881 : f32 = u_xlat68;
    let x_3882 : f32 = u_xlat68;
    u_xlat68 = (x_3881 * x_3882);
    let x_3884 : f32 = u_xlat68;
    let x_3886 : f32 = u_xlat46.x;
    u_xlat68 = ((x_3884 * x_3886) + 1.000010014f);
    let x_3890 : f32 = u_xlat26.x;
    let x_3892 : f32 = u_xlat26.x;
    u_xlat26.x = (x_3890 * x_3892);
    let x_3895 : f32 = u_xlat68;
    let x_3896 : f32 = u_xlat68;
    u_xlat68 = (x_3895 * x_3896);
    let x_3899 : f32 = u_xlat26.x;
    u_xlat26.x = max(x_3899, 0.100000001f);
    let x_3902 : f32 = u_xlat68;
    let x_3904 : f32 = u_xlat26.x;
    u_xlat68 = (x_3902 * x_3904);
    let x_3906 : f32 = u_xlat70;
    let x_3907 : f32 = u_xlat68;
    u_xlat68 = (x_3906 * x_3907);
    let x_3909 : f32 = u_xlat69;
    let x_3910 : f32 = u_xlat68;
    u_xlat68 = (x_3909 / x_3910);
    let x_3912 : f32 = u_xlat68;
    let x_3915 : vec4<f32> = u_xlat6;
    let x_3917 : vec3<f32> = ((vec3<f32>(x_3912, x_3912, x_3912) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3915.x, x_3915.y, x_3915.z));
    let x_3918 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3917.x, x_3917.y, x_3917.z, x_3918.w);
    let x_3920 : vec4<f32> = u_xlat9;
    let x_3922 : vec4<f32> = u_xlat11;
    let x_3925 : vec4<f32> = u_xlat8;
    let x_3927 : vec3<f32> = ((vec3<f32>(x_3920.x, x_3920.y, x_3920.z) * vec3<f32>(x_3922.x, x_3922.y, x_3922.z)) + vec3<f32>(x_3925.x, x_3925.y, x_3925.z));
    let x_3928 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3927.x, x_3927.y, x_3927.z, x_3928.w);

    continuing {
      let x_3930 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3930 + bitcast<u32>(1i));
    }
  }
  let x_3932 : vec4<f32> = u_xlat3;
  let x_3934 : vec3<f32> = u_xlat4;
  let x_3937 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_3932.x, x_3932.y, x_3932.z) * vec3<f32>(x_3934.x, x_3934.x, x_3934.x)) + vec3<f32>(x_3937.x, x_3937.y, x_3937.z));
  let x_3940 : vec4<f32> = u_xlat8;
  let x_3942 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3940.x, x_3940.y, x_3940.z) + x_3942);
  let x_3946 : vec4<f32> = vs_INTERP4;
  let x_3948 : vec3<f32> = u_xlat1;
  let x_3950 : vec3<f32> = u_xlat0;
  let x_3951 : vec3<f32> = ((vec3<f32>(x_3946.w, x_3946.w, x_3946.w) * x_3948) + x_3950);
  let x_3952 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3951.x, x_3951.y, x_3951.z, x_3952.w);
  let x_3954 : bool = u_xlatb24;
  let x_3955 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_3955, x_3954);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

