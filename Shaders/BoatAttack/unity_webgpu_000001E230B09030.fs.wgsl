type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb2 : vec4<bool>;
  var x_465 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var x_474 : vec3<f32>;
  var x_485 : vec3<f32>;
  var x_496 : vec3<f32>;
  var x_507 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb25 : bool;
  var x_734 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var x_1017 : vec3<f32>;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var x_1309 : vec3<f32>;
  var u_xlat19 : f32;
  var x_1593 : vec3<f32>;
  var x_1864 : vec3<f32>;
  var x_2147 : vec3<f32>;
  var x_2423 : vec3<f32>;
  var x_2705 : vec3<f32>;
  var x_2981 : vec3<f32>;
  var x_3264 : vec3<f32>;
  var x_3540 : vec3<f32>;
  var x_3824 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_100 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_102 : vec2<f32> = vs_TEXCOORD0;
  let x_107 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_109 : vec3<f32> = ((vec3<f32>(x_100.x, x_100.y, x_100.z) * vec3<f32>(x_102.x, x_102.x, x_102.x)) + vec3<f32>(x_107.x, x_107.y, x_107.z));
  let x_110 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_109.x, x_109.y, x_109.z, x_110.w);
  let x_114 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_116 : vec3<f32> = u_xlat8;
  let x_119 : vec4<f32> = u_xlat1;
  let x_121 : vec3<f32> = ((vec3<f32>(x_114.x, x_114.y, x_114.z) * vec3<f32>(x_116.x, x_116.x, x_116.x)) + vec3<f32>(x_119.x, x_119.y, x_119.z));
  let x_122 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_121.x, x_121.y, x_121.z, x_122.w);
  let x_124 : f32 = u_xlat16;
  let x_126 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_124, x_124, x_124) * vec3<f32>(x_126.x, x_126.y, x_126.z));
  let x_132 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_132 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_137 : vec3<f32> = u_xlat9;
  let x_139 : vec2<f32> = vs_TEXCOORD0;
  let x_140 : vec2<f32> = (vec2<f32>(x_137.x, x_137.y) + x_139);
  let x_141 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_140.x, x_140.y, x_141.z);
  let x_146 : vec3<f32> = u_xlat9;
  let x_149 : f32 = x_33.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_146.x, x_146.y), x_149);
  u_xlat1.x = x_150.x;
  let x_154 : f32 = x_33.x_ZBufferParams.z;
  let x_156 : f32 = u_xlat1.x;
  let x_159 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_154 * x_156) + x_159);
  let x_163 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_163);
  let x_168 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_168 * 2.0f);
  u_xlat2.y = 0.0f;
  u_xlat18.y = 0.0f;
  let x_177 : vec4<f32> = u_xlat2;
  let x_179 : vec2<f32> = vs_TEXCOORD0;
  let x_180 : vec2<f32> = (vec2<f32>(x_177.x, x_177.y) + x_179);
  let x_181 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_180.x, x_180.y, x_181.z, x_181.w);
  let x_186 : vec4<f32> = u_xlat3;
  let x_189 : f32 = x_33.x_GlobalMipBias.x;
  let x_190 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_186.x, x_186.y), x_189);
  u_xlat1.x = x_190.x;
  let x_194 : f32 = x_33.x_ZBufferParams.z;
  let x_196 : f32 = u_xlat1.x;
  let x_199 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_194 * x_196) + x_199);
  let x_203 : f32 = u_xlat1.x;
  u_xlat3.z = (1.0f / x_203);
  u_xlat12.x = 0.0f;
  let x_209 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_209 * 2.0f);
  let x_212 : vec3<f32> = u_xlat12;
  let x_214 : vec2<f32> = vs_TEXCOORD0;
  let x_215 : vec2<f32> = (vec2<f32>(x_212.x, x_212.y) + x_214);
  let x_216 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_215.x, x_215.y, x_216.z);
  let x_221 : vec3<f32> = u_xlat12;
  let x_224 : f32 = x_33.x_GlobalMipBias.x;
  let x_225 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_221.x, x_221.y), x_224);
  u_xlat1.x = x_225.x;
  let x_229 : f32 = x_33.x_ZBufferParams.z;
  let x_231 : f32 = u_xlat1.x;
  let x_234 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_229 * x_231) + x_234);
  let x_238 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_238);
  u_xlat13.x = 0.0f;
  let x_244 : f32 = x_33.x_SourceSize.w;
  u_xlat13.y = (x_244 * -2.0f);
  let x_247 : vec3<f32> = u_xlat13;
  let x_249 : vec2<f32> = vs_TEXCOORD0;
  let x_250 : vec2<f32> = (vec2<f32>(x_247.x, x_247.y) + x_249);
  let x_251 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_250.x, x_250.y, x_251.z);
  let x_256 : vec3<f32> = u_xlat13;
  let x_259 : f32 = x_33.x_GlobalMipBias.x;
  let x_260 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_256.x, x_256.y), x_259);
  u_xlat1.x = x_260.x;
  let x_264 : f32 = x_33.x_ZBufferParams.z;
  let x_266 : f32 = u_xlat1.x;
  let x_269 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_264 * x_266) + x_269);
  let x_273 : f32 = u_xlat1.x;
  u_xlat13.z = (1.0f / x_273);
  let x_277 : f32 = x_33.x_SourceSize.z;
  u_xlat18.x = x_277;
  let x_279 : vec2<f32> = u_xlat18;
  let x_285 : vec2<f32> = vs_TEXCOORD0;
  u_xlat2 = ((vec4<f32>(x_279.x, x_279.y, x_279.x, x_279.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_285.x, x_285.y, x_285.x, x_285.y));
  let x_291 : vec4<f32> = u_xlat2;
  let x_294 : f32 = x_33.x_GlobalMipBias.x;
  let x_295 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_291.x, x_291.y), x_294);
  u_xlat1.x = x_295.x;
  let x_299 : f32 = x_33.x_ZBufferParams.z;
  let x_301 : f32 = u_xlat1.x;
  let x_304 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_299 * x_301) + x_304);
  let x_308 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_308);
  let x_314 : vec4<f32> = u_xlat2;
  let x_317 : f32 = x_33.x_GlobalMipBias.x;
  let x_318 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_314.z, x_314.w), x_317);
  u_xlat2.x = x_318.x;
  let x_322 : f32 = x_33.x_ZBufferParams.z;
  let x_324 : f32 = u_xlat2.x;
  let x_327 : f32 = x_33.x_ZBufferParams.w;
  u_xlat2.x = ((x_322 * x_324) + x_327);
  let x_331 : f32 = u_xlat2.x;
  u_xlat2.x = (1.0f / x_331);
  u_xlat6.x = 2.0f;
  let x_337 : f32 = x_33.x_SourceSize.w;
  u_xlat6.y = x_337;
  let x_340 : vec4<f32> = u_xlat6;
  let x_343 : vec2<f32> = vs_TEXCOORD0;
  u_xlat6 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_340.x, x_340.y, x_340.x, x_340.y)) + vec4<f32>(x_343.x, x_343.y, x_343.x, x_343.y));
  let x_350 : vec4<f32> = u_xlat6;
  let x_353 : f32 = x_33.x_GlobalMipBias.x;
  let x_354 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_350.x, x_350.y), x_353);
  u_xlat10.x = x_354.x;
  let x_358 : f32 = x_33.x_ZBufferParams.z;
  let x_360 : f32 = u_xlat10.x;
  let x_363 : f32 = x_33.x_ZBufferParams.w;
  u_xlat10.x = ((x_358 * x_360) + x_363);
  let x_367 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_367);
  let x_373 : vec4<f32> = u_xlat6;
  let x_376 : f32 = x_33.x_GlobalMipBias.x;
  let x_377 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_373.z, x_373.w), x_376);
  u_xlat18.x = x_377.x;
  let x_381 : f32 = x_33.x_ZBufferParams.z;
  let x_383 : f32 = u_xlat18.x;
  let x_386 : f32 = x_33.x_ZBufferParams.w;
  u_xlat18.x = ((x_381 * x_383) + x_386);
  let x_390 : f32 = u_xlat18.x;
  u_xlat18.x = (1.0f / x_390);
  let x_394 : f32 = u_xlat9.z;
  let x_397 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_394 * 2.0f) + -(x_397));
  let x_401 : f32 = u_xlat0;
  let x_404 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_401) + x_404);
  let x_408 : f32 = u_xlat3.z;
  let x_411 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_408 * 2.0f) + -(x_411));
  let x_415 : f32 = u_xlat0;
  let x_418 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_415) + x_418);
  let x_423 : f32 = u_xlat1.x;
  let x_426 : f32 = u_xlat2.x;
  u_xlatb1 = (abs(x_423) < abs(x_426));
  let x_430 : f32 = u_xlat13.z;
  let x_433 : f32 = u_xlat18.x;
  u_xlat2.x = ((x_430 * 2.0f) + -(x_433));
  let x_438 : f32 = u_xlat12.z;
  let x_441 : f32 = u_xlat10.x;
  u_xlat2.y = ((x_438 * 2.0f) + -(x_441));
  let x_445 : f32 = u_xlat0;
  let x_448 : vec4<f32> = u_xlat2;
  let x_450 : vec2<f32> = (-(vec2<f32>(x_445, x_445)) + vec2<f32>(x_448.x, x_448.y));
  let x_451 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_450.x, x_450.y, x_451.z, x_451.w);
  let x_457 : f32 = u_xlat2.x;
  let x_460 : f32 = u_xlat2.y;
  u_xlatb2.x = (abs(x_457) < abs(x_460));
  let x_464 : bool = u_xlatb1;
  if (x_464) {
    let x_468 : vec3<f32> = u_xlat9;
    x_465 = x_468;
  } else {
    let x_470 : vec3<f32> = u_xlat13;
    x_465 = x_470;
  }
  let x_471 : vec3<f32> = x_465;
  u_xlat10 = x_471;
  let x_473 : bool = u_xlatb1;
  if (x_473) {
    let x_477 : vec3<f32> = u_xlat13;
    x_474 = x_477;
  } else {
    let x_479 : vec4<f32> = u_xlat3;
    x_474 = vec3<f32>(x_479.x, x_479.y, x_479.z);
  }
  let x_481 : vec3<f32> = x_474;
  let x_482 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_482.x, x_481.x, x_481.y, x_481.z);
  let x_484 : bool = u_xlatb1;
  if (x_484) {
    let x_488 : vec3<f32> = u_xlat12;
    x_485 = x_488;
  } else {
    let x_490 : vec4<f32> = u_xlat3;
    x_485 = vec3<f32>(x_490.x, x_490.y, x_490.z);
  }
  let x_492 : vec3<f32> = x_485;
  let x_493 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_492.x, x_492.y, x_492.z, x_493.w);
  let x_495 : bool = u_xlatb1;
  if (x_495) {
    let x_499 : vec3<f32> = u_xlat9;
    x_496 = x_499;
  } else {
    let x_501 : vec3<f32> = u_xlat12;
    x_496 = x_501;
  }
  let x_502 : vec3<f32> = x_496;
  let x_503 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_503.x, x_502.x, x_502.y, x_502.z);
  let x_506 : bool = u_xlatb2.x;
  if (x_506) {
    let x_510 : vec3<f32> = u_xlat10;
    x_507 = vec2<f32>(x_510.x, x_510.y);
  } else {
    let x_513 : vec4<f32> = u_xlat3;
    x_507 = vec2<f32>(x_513.x, x_513.y);
  }
  let x_515 : vec2<f32> = x_507;
  let x_516 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_515.x, x_515.y, x_516.z);
  let x_519 : f32 = u_xlat10.z;
  u_xlat5.x = x_519;
  let x_522 : f32 = u_xlat3.z;
  u_xlat1.x = x_522;
  let x_525 : bool = u_xlatb2.x;
  let x_526 : vec4<f32> = u_xlat5;
  let x_527 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_527, x_526, vec4<bool>(x_525, x_525, x_525, x_525));
  let x_532 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_532) + 1.0f);
  let x_535 : vec4<f32> = u_xlat1;
  let x_538 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_540 : vec2<f32> = (vec2<f32>(x_535.w, x_535.x) * vec2<f32>(x_538.x, x_538.x));
  let x_541 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_540.x, x_541.y, x_541.z, x_540.y);
  let x_544 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_546 : vec4<f32> = u_xlat1;
  let x_550 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_552 : vec3<f32> = ((vec3<f32>(x_544.z, x_544.x, x_544.y) * vec3<f32>(x_546.y, x_546.y, x_546.y)) + vec3<f32>(x_550.z, x_550.x, x_550.y));
  let x_553 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_552.x, x_552.y, x_552.z, x_553.w);
  let x_556 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_558 : f32 = u_xlat17;
  let x_561 : vec4<f32> = u_xlat3;
  let x_563 : vec3<f32> = ((vec3<f32>(x_556.z, x_556.x, x_556.y) * vec3<f32>(x_558, x_558, x_558)) + vec3<f32>(x_561.x, x_561.y, x_561.z));
  let x_564 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_568 : vec4<f32> = u_xlat1;
  let x_571 : vec3<f32> = u_xlat8;
  let x_574 : vec3<f32> = ((vec3<f32>(x_566.x, x_566.y, x_566.z) * vec3<f32>(x_568.x, x_568.x, x_568.x)) + -(vec3<f32>(x_571.z, x_571.x, x_571.y)));
  let x_575 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_574.x, x_574.y, x_574.z, x_575.w);
  let x_578 : f32 = u_xlat10.y;
  u_xlat2.x = (-(x_578) + 1.0f);
  let x_583 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_585 : vec3<f32> = u_xlat10;
  let x_589 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat10 = ((vec3<f32>(x_583.y, x_583.z, x_583.x) * vec3<f32>(x_585.x, x_585.x, x_585.x)) + vec3<f32>(x_589.y, x_589.z, x_589.x));
  let x_593 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_595 : vec4<f32> = u_xlat2;
  let x_598 : vec3<f32> = u_xlat10;
  let x_599 : vec3<f32> = ((vec3<f32>(x_593.y, x_593.z, x_593.x) * vec3<f32>(x_595.x, x_595.x, x_595.x)) + x_598);
  let x_600 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_599.x, x_599.y, x_599.z, x_600.w);
  let x_602 : vec4<f32> = u_xlat2;
  let x_604 : vec4<f32> = u_xlat1;
  let x_607 : vec3<f32> = u_xlat8;
  let x_610 : vec3<f32> = ((vec3<f32>(x_602.x, x_602.y, x_602.z) * vec3<f32>(x_604.w, x_604.w, x_604.w)) + -(vec3<f32>(x_607.y, x_607.z, x_607.x)));
  let x_611 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_610.x, x_610.y, x_610.z, x_611.w);
  let x_613 : vec4<f32> = u_xlat1;
  let x_615 : vec4<f32> = u_xlat2;
  let x_617 : vec3<f32> = (vec3<f32>(x_613.x, x_613.y, x_613.z) * vec3<f32>(x_615.x, x_615.y, x_615.z));
  let x_618 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_617.x, x_617.y, x_617.z, x_618.w);
  let x_620 : vec4<f32> = u_xlat1;
  let x_622 : vec4<f32> = u_xlat2;
  let x_625 : vec4<f32> = u_xlat3;
  let x_628 : vec3<f32> = ((vec3<f32>(x_620.z, x_620.x, x_620.y) * vec3<f32>(x_622.y, x_622.z, x_622.x)) + -(vec3<f32>(x_625.x, x_625.y, x_625.z)));
  let x_629 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_628.x, x_628.y, x_628.z, x_629.w);
  let x_632 : vec4<f32> = u_xlat1;
  let x_634 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_632.x, x_632.y, x_632.z), vec3<f32>(x_634.x, x_634.y, x_634.z));
  let x_637 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_637);
  let x_639 : f32 = u_xlat25;
  let x_641 : vec4<f32> = u_xlat1;
  let x_643 : vec3<f32> = (vec3<f32>(x_639, x_639, x_639) * vec3<f32>(x_641.x, x_641.y, x_641.z));
  let x_644 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_643.x, x_643.y, x_643.z, x_644.w);
  let x_646 : vec2<f32> = vs_TEXCOORD0;
  let x_648 : vec4<f32> = x_33.x_ScaledScreenParams;
  let x_650 : vec2<f32> = (x_646 * vec2<f32>(x_648.x, x_648.y));
  let x_651 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_650.x, x_650.y, x_651.z, x_651.w);
  let x_653 : vec4<f32> = u_xlat2;
  let x_656 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat18 = (vec2<f32>(x_653.x, x_653.y) * vec2<f32>(x_656.z, x_656.z));
  let x_659 : vec2<f32> = u_xlat18;
  u_xlat25 = dot(x_659, vec2<f32>(0.067110561f, 0.00583715f));
  let x_664 : f32 = u_xlat25;
  u_xlat25 = fract(x_664);
  let x_666 : f32 = u_xlat25;
  u_xlat25 = (x_666 * 52.982917786f);
  let x_669 : f32 = u_xlat25;
  u_xlat25 = fract(x_669);
  let x_671 : f32 = u_xlat25;
  u_xlat18.x = fract(x_671);
  let x_675 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_675 * 2.0f) + -1.0f);
  let x_680 : f32 = u_xlat25;
  u_xlat25 = (x_680 + 0.9296875f);
  let x_683 : f32 = u_xlat25;
  u_xlat25 = (x_683 * 6.283185482f);
  let x_687 : f32 = u_xlat3.z;
  let x_690 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_687) * x_690) + 1.0f);
  let x_695 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_695);
  let x_699 : f32 = u_xlat25;
  u_xlat4.x = sin(x_699);
  let x_702 : f32 = u_xlat25;
  u_xlat5.x = cos(x_702);
  let x_706 : f32 = u_xlat18.x;
  let x_708 : f32 = u_xlat5.x;
  u_xlat3.x = (x_706 * x_708);
  let x_712 : f32 = u_xlat18.x;
  let x_714 : f32 = u_xlat4.x;
  u_xlat3.y = (x_712 * x_714);
  let x_717 : vec4<f32> = u_xlat3;
  let x_721 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) * vec3<f32>(0.288675129f, 0.288675129f, 0.288675129f));
  let x_722 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
  let x_724 : vec4<f32> = u_xlat1;
  let x_727 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(-(vec3<f32>(x_724.x, x_724.y, x_724.z)), vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_731 : f32 = u_xlat25;
  u_xlatb25 = (x_731 >= 0.0f);
  let x_733 : bool = u_xlatb25;
  if (x_733) {
    let x_737 : vec4<f32> = u_xlat3;
    x_734 = -(vec3<f32>(x_737.x, x_737.y, x_737.z));
  } else {
    let x_741 : vec4<f32> = u_xlat3;
    x_734 = vec3<f32>(x_741.x, x_741.y, x_741.z);
  }
  let x_743 : vec3<f32> = x_734;
  let x_744 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_743.x, x_743.y, x_743.z, x_744.w);
  let x_746 : vec4<f32> = u_xlat3;
  let x_749 : vec4<f32> = x_33.x_SSAOParams;
  let x_752 : vec3<f32> = u_xlat8;
  let x_753 : vec3<f32> = ((vec3<f32>(x_746.x, x_746.y, x_746.z) * vec3<f32>(x_749.y, x_749.y, x_749.y)) + x_752);
  let x_754 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_753.x, x_753.y, x_753.z, x_754.w);
  let x_756 : vec4<f32> = u_xlat3;
  let x_760 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_756.y, x_756.y) * vec2<f32>(x_760.x, x_760.y));
  let x_764 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_766 : vec4<f32> = u_xlat3;
  let x_769 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_764.x, x_764.y) * vec2<f32>(x_766.x, x_766.x)) + x_769);
  let x_772 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_774 : vec4<f32> = u_xlat3;
  let x_777 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_772.x, x_772.y) * vec2<f32>(x_774.z, x_774.z)) + x_777);
  let x_781 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_781;
  let x_784 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_784;
  let x_787 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_787;
  let x_789 : vec3<f32> = u_xlat4;
  let x_790 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_789, vec3<f32>(x_790.x, x_790.y, x_790.z));
  let x_793 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_793));
  let x_797 : vec2<f32> = u_xlat18;
  let x_798 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_797 * vec2<f32>(x_798.x, x_798.x)) + vec2<f32>(1.0f, 1.0f));
  let x_803 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_803 * vec2<f32>(0.5f, 0.5f));
  let x_806 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_806, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_813 : vec2<f32> = u_xlat18;
  let x_815 : f32 = x_33.x_GlobalMipBias.x;
  let x_816 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_813, x_815);
  u_xlat3.x = x_816.x;
  let x_821 : f32 = x_33.x_ZBufferParams.z;
  let x_823 : f32 = u_xlat3.x;
  let x_826 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_821 * x_823) + x_826);
  let x_830 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_830);
  let x_833 : f32 = u_xlat25;
  let x_836 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_833) + -(x_836));
  let x_839 : f32 = u_xlat25;
  let x_842 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_839) < x_842);
  let x_844 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_844);
  let x_850 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_850);
  let x_854 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_854);
  let x_857 : f32 = u_xlat25;
  let x_859 : f32 = u_xlat3.x;
  u_xlat25 = (x_857 * x_859);
  let x_863 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_863) + 1.0f);
  let x_867 : f32 = u_xlat11.x;
  let x_869 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_867 * x_869);
  let x_873 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_875 : vec2<f32> = u_xlat18;
  let x_879 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_873.x, x_873.y, x_873.z) * vec3<f32>(x_875.x, x_875.x, x_875.x)) + vec3<f32>(x_879.x, x_879.y, x_879.z));
  let x_883 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_885 : f32 = u_xlat26;
  let x_888 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_883.x, x_883.y, x_883.z) * vec3<f32>(x_885, x_885, x_885)) + x_888);
  let x_890 : vec3<f32> = u_xlat11;
  let x_891 : vec4<f32> = u_xlat3;
  let x_894 : vec3<f32> = u_xlat8;
  let x_896 : vec3<f32> = ((x_890 * vec3<f32>(x_891.x, x_891.x, x_891.x)) + -(x_894));
  let x_897 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_896.x, x_896.y, x_896.z, x_897.w);
  let x_899 : vec4<f32> = u_xlat3;
  let x_901 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_899.x, x_899.y, x_899.z), vec3<f32>(x_901.x, x_901.y, x_901.z));
  let x_905 : f32 = u_xlat0;
  let x_910 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_905) * 0.004f) + x_910);
  let x_914 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_914, 0.0f);
  let x_917 : vec4<f32> = u_xlat3;
  let x_919 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_917.x, x_917.y, x_917.z), vec3<f32>(x_919.x, x_919.y, x_919.z));
  let x_922 : f32 = u_xlat26;
  u_xlat26 = (x_922 + 0.0001f);
  let x_925 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_925);
  let x_927 : f32 = u_xlat26;
  let x_929 : f32 = u_xlat18.x;
  u_xlat18.x = (x_927 * x_929);
  let x_932 : vec4<f32> = u_xlat2;
  let x_935 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_932.x, x_932.y, x_932.x, x_932.y) * vec4<f32>(x_935.z, x_935.z, x_935.z, x_935.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_944 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec2<f32>(x_944.x, x_944.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_947 : f32 = u_xlat26;
  u_xlat26 = fract(x_947);
  let x_949 : f32 = u_xlat26;
  u_xlat26 = (x_949 * 52.982917786f);
  let x_951 : f32 = u_xlat26;
  u_xlat26 = fract(x_951);
  let x_953 : f32 = u_xlat26;
  let x_958 : vec2<f32> = (vec2<f32>(x_953, x_953) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_959 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_958.x, x_958.y, x_959.z, x_959.w);
  let x_962 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_962);
  let x_964 : f32 = u_xlat26;
  u_xlat5.z = ((x_964 * 2.0f) + -1.0f);
  let x_969 : f32 = u_xlat3.y;
  u_xlat26 = (x_969 * 6.283185482f);
  let x_972 : f32 = u_xlat5.z;
  let x_975 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_972) * x_975) + 1.0f);
  let x_980 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_980);
  let x_983 : f32 = u_xlat26;
  u_xlat6.x = sin(x_983);
  let x_987 : f32 = u_xlat26;
  u_xlat7 = cos(x_987);
  let x_990 : f32 = u_xlat3.x;
  let x_991 : f32 = u_xlat7;
  u_xlat5.x = (x_990 * x_991);
  let x_995 : f32 = u_xlat3.x;
  let x_997 : f32 = u_xlat6.x;
  u_xlat5.y = (x_995 * x_997);
  let x_1000 : vec4<f32> = u_xlat5;
  let x_1004 : vec3<f32> = (vec3<f32>(x_1000.x, x_1000.y, x_1000.z) * vec3<f32>(0.408248305f, 0.408248305f, 0.408248305f));
  let x_1005 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1004.x, x_1004.y, x_1004.z, x_1005.w);
  let x_1007 : vec4<f32> = u_xlat1;
  let x_1010 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(-(vec3<f32>(x_1007.x, x_1007.y, x_1007.z)), vec3<f32>(x_1010.x, x_1010.y, x_1010.z));
  let x_1014 : f32 = u_xlat26;
  u_xlatb26 = (x_1014 >= 0.0f);
  let x_1016 : bool = u_xlatb26;
  if (x_1016) {
    let x_1020 : vec4<f32> = u_xlat5;
    x_1017 = -(vec3<f32>(x_1020.x, x_1020.y, x_1020.z));
  } else {
    let x_1024 : vec4<f32> = u_xlat5;
    x_1017 = vec3<f32>(x_1024.x, x_1024.y, x_1024.z);
  }
  let x_1026 : vec3<f32> = x_1017;
  let x_1027 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1026.x, x_1026.y, x_1026.z, x_1027.w);
  let x_1029 : vec4<f32> = u_xlat5;
  let x_1032 : vec4<f32> = x_33.x_SSAOParams;
  let x_1035 : vec3<f32> = u_xlat8;
  let x_1036 : vec3<f32> = ((vec3<f32>(x_1029.x, x_1029.y, x_1029.z) * vec3<f32>(x_1032.y, x_1032.y, x_1032.y)) + x_1035);
  let x_1037 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1036.x, x_1036.y, x_1036.z, x_1037.w);
  let x_1039 : vec4<f32> = u_xlat5;
  let x_1042 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1044 : vec2<f32> = (vec2<f32>(x_1039.y, x_1039.y) * vec2<f32>(x_1042.x, x_1042.y));
  let x_1045 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1044.x, x_1044.y, x_1045.z, x_1045.w);
  let x_1048 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1050 : vec4<f32> = u_xlat5;
  let x_1053 : vec4<f32> = u_xlat3;
  let x_1055 : vec2<f32> = ((vec2<f32>(x_1048.x, x_1048.y) * vec2<f32>(x_1050.x, x_1050.x)) + vec2<f32>(x_1053.x, x_1053.y));
  let x_1056 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1055.x, x_1055.y, x_1056.z, x_1056.w);
  let x_1059 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1061 : vec4<f32> = u_xlat5;
  let x_1064 : vec4<f32> = u_xlat3;
  let x_1066 : vec2<f32> = ((vec2<f32>(x_1059.x, x_1059.y) * vec2<f32>(x_1061.z, x_1061.z)) + vec2<f32>(x_1064.x, x_1064.y));
  let x_1067 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1066.x, x_1066.y, x_1067.z, x_1067.w);
  let x_1069 : vec3<f32> = u_xlat4;
  let x_1070 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(x_1069, vec3<f32>(x_1070.x, x_1070.y, x_1070.z));
  let x_1074 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_1074));
  let x_1077 : vec4<f32> = u_xlat3;
  let x_1079 : f32 = u_xlat28;
  let x_1082 : vec2<f32> = ((vec2<f32>(x_1077.x, x_1077.y) * vec2<f32>(x_1079, x_1079)) + vec2<f32>(1.0f, 1.0f));
  let x_1083 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1082.x, x_1082.y, x_1083.z, x_1083.w);
  let x_1085 : vec4<f32> = u_xlat3;
  let x_1087 : vec2<f32> = (vec2<f32>(x_1085.x, x_1085.y) * vec2<f32>(0.5f, 0.5f));
  let x_1088 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1087.x, x_1087.y, x_1088.z, x_1088.w);
  let x_1090 : vec4<f32> = u_xlat3;
  let x_1094 : vec2<f32> = clamp(vec2<f32>(x_1090.x, x_1090.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1095 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1094.x, x_1094.y, x_1095.z, x_1095.w);
  let x_1100 : vec4<f32> = u_xlat3;
  let x_1103 : f32 = x_33.x_GlobalMipBias.x;
  let x_1104 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1100.x, x_1100.y), x_1103);
  u_xlat28 = x_1104.x;
  let x_1107 : f32 = x_33.x_ZBufferParams.z;
  let x_1108 : f32 = u_xlat28;
  let x_1111 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_1107 * x_1108) + x_1111);
  let x_1115 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_1115);
  let x_1118 : f32 = u_xlat26;
  let x_1121 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_1118) + -(x_1121));
  let x_1124 : f32 = u_xlat26;
  let x_1127 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_1124) < x_1127);
  let x_1129 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_1129);
  let x_1132 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_1132);
  let x_1134 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_1134);
  let x_1136 : f32 = u_xlat26;
  let x_1137 : f32 = u_xlat28;
  u_xlat26 = (x_1136 * x_1137);
  let x_1140 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_1140) + 1.0f);
  let x_1145 : f32 = u_xlat5.x;
  let x_1147 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_1145 * x_1147);
  let x_1150 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1152 : vec4<f32> = u_xlat3;
  let x_1156 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1158 : vec3<f32> = ((vec3<f32>(x_1150.x, x_1150.y, x_1150.z) * vec3<f32>(x_1152.x, x_1152.x, x_1152.x)) + vec3<f32>(x_1156.x, x_1156.y, x_1156.z));
  let x_1159 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1158.x, x_1158.y, x_1158.z, x_1159.w);
  let x_1162 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1164 : vec3<f32> = u_xlat11;
  let x_1167 : vec4<f32> = u_xlat5;
  let x_1169 : vec3<f32> = ((vec3<f32>(x_1162.x, x_1162.y, x_1162.z) * vec3<f32>(x_1164.x, x_1164.x, x_1164.x)) + vec3<f32>(x_1167.x, x_1167.y, x_1167.z));
  let x_1170 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1169.x, x_1169.y, x_1169.z, x_1170.w);
  let x_1172 : vec4<f32> = u_xlat5;
  let x_1174 : f32 = u_xlat28;
  let x_1177 : vec3<f32> = u_xlat8;
  let x_1179 : vec3<f32> = ((vec3<f32>(x_1172.x, x_1172.y, x_1172.z) * vec3<f32>(x_1174, x_1174, x_1174)) + -(x_1177));
  let x_1180 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1179.x, x_1179.y, x_1179.z, x_1180.w);
  let x_1182 : vec4<f32> = u_xlat5;
  let x_1184 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(vec3<f32>(x_1182.x, x_1182.y, x_1182.z), vec3<f32>(x_1184.x, x_1184.y, x_1184.z));
  let x_1188 : f32 = u_xlat0;
  let x_1192 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1188) * 0.004f) + x_1192);
  let x_1196 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1196, 0.0f);
  let x_1199 : vec4<f32> = u_xlat5;
  let x_1201 : vec4<f32> = u_xlat5;
  u_xlat11.x = dot(vec3<f32>(x_1199.x, x_1199.y, x_1199.z), vec3<f32>(x_1201.x, x_1201.y, x_1201.z));
  let x_1206 : f32 = u_xlat11.x;
  u_xlat11.x = (x_1206 + 0.0001f);
  let x_1210 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_1210);
  let x_1214 : f32 = u_xlat11.x;
  let x_1216 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1214 * x_1216);
  let x_1219 : f32 = u_xlat26;
  let x_1221 : f32 = u_xlat3.x;
  u_xlat26 = (x_1219 * x_1221);
  let x_1224 : f32 = u_xlat18.x;
  let x_1225 : f32 = u_xlat25;
  let x_1227 : f32 = u_xlat26;
  u_xlat25 = ((x_1224 * x_1225) + x_1227);
  let x_1229 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1229.z, x_1229.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1234 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1234);
  let x_1238 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1238 * 52.982917786f);
  let x_1242 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1242);
  let x_1245 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1245.x, x_1245.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1252 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1252);
  let x_1256 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1256 * 2.0f) + -1.0f);
  let x_1261 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1261 * 6.283185482f);
  let x_1265 : f32 = u_xlat3.z;
  let x_1268 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1265) * x_1268) + 1.0f);
  let x_1271 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1271);
  let x_1274 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1274);
  let x_1278 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1278);
  let x_1281 : f32 = u_xlat26;
  let x_1283 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1281 * x_1283);
  let x_1286 : f32 = u_xlat26;
  let x_1288 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1286 * x_1288);
  let x_1291 : vec4<f32> = u_xlat3;
  let x_1294 : vec3<f32> = (vec3<f32>(x_1291.x, x_1291.y, x_1291.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1295 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1294.x, x_1294.y, x_1294.z, x_1295.w);
  let x_1297 : vec4<f32> = u_xlat1;
  let x_1300 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_1297.x, x_1297.y, x_1297.z)), vec3<f32>(x_1300.x, x_1300.y, x_1300.z));
  let x_1306 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1306 >= 0.0f);
  let x_1308 : bool = u_xlatb18;
  if (x_1308) {
    let x_1312 : vec4<f32> = u_xlat3;
    x_1309 = -(vec3<f32>(x_1312.x, x_1312.y, x_1312.z));
  } else {
    let x_1316 : vec4<f32> = u_xlat3;
    x_1309 = vec3<f32>(x_1316.x, x_1316.y, x_1316.z);
  }
  let x_1318 : vec3<f32> = x_1309;
  let x_1319 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1318.x, x_1318.y, x_1318.z, x_1319.w);
  let x_1321 : vec4<f32> = u_xlat3;
  let x_1324 : vec4<f32> = x_33.x_SSAOParams;
  let x_1327 : vec3<f32> = u_xlat8;
  let x_1328 : vec3<f32> = ((vec3<f32>(x_1321.x, x_1321.y, x_1321.z) * vec3<f32>(x_1324.y, x_1324.y, x_1324.y)) + x_1327);
  let x_1329 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1328.x, x_1328.y, x_1328.z, x_1329.w);
  let x_1331 : vec4<f32> = u_xlat3;
  let x_1334 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1331.y, x_1331.y) * vec2<f32>(x_1334.x, x_1334.y));
  let x_1338 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1340 : vec4<f32> = u_xlat3;
  let x_1343 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1338.x, x_1338.y) * vec2<f32>(x_1340.x, x_1340.x)) + x_1343);
  let x_1346 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1348 : vec4<f32> = u_xlat3;
  let x_1351 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1346.x, x_1346.y) * vec2<f32>(x_1348.z, x_1348.z)) + x_1351);
  let x_1353 : vec3<f32> = u_xlat4;
  let x_1354 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1353, vec3<f32>(x_1354.x, x_1354.y, x_1354.z));
  let x_1359 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1359));
  let x_1363 : vec2<f32> = u_xlat18;
  let x_1364 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1363 * vec2<f32>(x_1364.x, x_1364.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1368 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1368 * vec2<f32>(0.5f, 0.5f));
  let x_1370 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1370, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1377 : vec2<f32> = u_xlat18;
  let x_1379 : f32 = x_33.x_GlobalMipBias.x;
  let x_1380 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1377, x_1379);
  u_xlat11.x = x_1380.x;
  let x_1385 : f32 = x_33.x_ZBufferParams.z;
  let x_1387 : f32 = u_xlat11.x;
  let x_1390 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1385 * x_1387) + x_1390);
  let x_1392 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1392);
  let x_1394 : f32 = u_xlat19;
  let x_1397 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1394) + -(x_1397));
  let x_1402 : f32 = u_xlat3.x;
  let x_1405 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1402) < x_1405);
  let x_1409 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1409);
  let x_1413 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1413);
  let x_1417 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1417);
  let x_1421 : f32 = u_xlat3.y;
  let x_1423 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1421 * x_1423);
  let x_1427 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1427) + 1.0f);
  let x_1430 : f32 = u_xlat19;
  let x_1432 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1430 * x_1432);
  let x_1436 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1438 : vec2<f32> = u_xlat18;
  let x_1442 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1444 : vec3<f32> = ((vec3<f32>(x_1436.x, x_1436.y, x_1436.z) * vec3<f32>(x_1438.x, x_1438.x, x_1438.x)) + vec3<f32>(x_1442.x, x_1442.y, x_1442.z));
  let x_1445 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1444.x, x_1444.y, x_1444.z, x_1445.w);
  let x_1448 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1450 : f32 = u_xlat26;
  let x_1453 : vec4<f32> = u_xlat5;
  let x_1455 : vec3<f32> = ((vec3<f32>(x_1448.x, x_1448.y, x_1448.z) * vec3<f32>(x_1450, x_1450, x_1450)) + vec3<f32>(x_1453.x, x_1453.y, x_1453.z));
  let x_1456 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1455.x, x_1455.y, x_1455.z, x_1456.w);
  let x_1458 : vec4<f32> = u_xlat5;
  let x_1460 : vec3<f32> = u_xlat11;
  let x_1463 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_1458.x, x_1458.y, x_1458.z) * vec3<f32>(x_1460.x, x_1460.x, x_1460.x)) + -(x_1463));
  let x_1466 : vec3<f32> = u_xlat11;
  let x_1467 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1466, vec3<f32>(x_1467.x, x_1467.y, x_1467.z));
  let x_1471 : f32 = u_xlat0;
  let x_1475 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1471) * 0.004f) + x_1475);
  let x_1479 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1479, 0.0f);
  let x_1482 : vec3<f32> = u_xlat11;
  let x_1483 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1482, x_1483);
  let x_1485 : f32 = u_xlat26;
  u_xlat26 = (x_1485 + 0.0001f);
  let x_1487 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1487);
  let x_1489 : f32 = u_xlat26;
  let x_1491 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1489 * x_1491);
  let x_1495 : f32 = u_xlat18.x;
  let x_1497 : f32 = u_xlat3.x;
  let x_1499 : f32 = u_xlat25;
  u_xlat25 = ((x_1495 * x_1497) + x_1499);
  let x_1501 : vec4<f32> = u_xlat2;
  let x_1504 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1501.x, x_1501.y, x_1501.x, x_1501.y) * vec4<f32>(x_1504.z, x_1504.z, x_1504.z, x_1504.z)) + vec4<f32>(6.248999596f, 14.600999832f, 8.331999779f, 19.468000412f));
  let x_1513 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1513.x, x_1513.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1518 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1518);
  let x_1522 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1522 * 52.982917786f);
  let x_1526 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1526);
  let x_1529 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1529.x, x_1529.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1536 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1536);
  let x_1540 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1540 * 2.0f) + -1.0f);
  let x_1545 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1545 * 6.283185482f);
  let x_1549 : f32 = u_xlat5.z;
  let x_1552 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1549) * x_1552) + 1.0f);
  let x_1555 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1555);
  let x_1558 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1558);
  let x_1562 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1562);
  let x_1565 : f32 = u_xlat26;
  let x_1567 : f32 = u_xlat6.x;
  u_xlat5.x = (x_1565 * x_1567);
  let x_1570 : f32 = u_xlat26;
  let x_1572 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1570 * x_1572);
  let x_1575 : vec4<f32> = u_xlat5;
  let x_1579 : vec3<f32> = (vec3<f32>(x_1575.x, x_1575.y, x_1575.z) * vec3<f32>(0.577350259f, 0.577350259f, 0.577350259f));
  let x_1580 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1579.x, x_1579.y, x_1579.z, x_1580.w);
  let x_1582 : vec4<f32> = u_xlat1;
  let x_1585 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(-(vec3<f32>(x_1582.x, x_1582.y, x_1582.z)), vec3<f32>(x_1585.x, x_1585.y, x_1585.z));
  let x_1590 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1590 >= 0.0f);
  let x_1592 : bool = u_xlatb18;
  if (x_1592) {
    let x_1596 : vec4<f32> = u_xlat5;
    x_1593 = -(vec3<f32>(x_1596.x, x_1596.y, x_1596.z));
  } else {
    let x_1600 : vec4<f32> = u_xlat5;
    x_1593 = vec3<f32>(x_1600.x, x_1600.y, x_1600.z);
  }
  let x_1602 : vec3<f32> = x_1593;
  let x_1603 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1602.x, x_1602.y, x_1602.z, x_1603.w);
  let x_1605 : vec4<f32> = u_xlat5;
  let x_1608 : vec4<f32> = x_33.x_SSAOParams;
  let x_1611 : vec3<f32> = u_xlat8;
  let x_1612 : vec3<f32> = ((vec3<f32>(x_1605.x, x_1605.y, x_1605.z) * vec3<f32>(x_1608.y, x_1608.y, x_1608.y)) + x_1611);
  let x_1613 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1612.x, x_1612.y, x_1612.z, x_1613.w);
  let x_1615 : vec4<f32> = u_xlat5;
  let x_1618 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1615.y, x_1615.y) * vec2<f32>(x_1618.x, x_1618.y));
  let x_1622 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1624 : vec4<f32> = u_xlat5;
  let x_1627 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1622.x, x_1622.y) * vec2<f32>(x_1624.x, x_1624.x)) + x_1627);
  let x_1630 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1632 : vec4<f32> = u_xlat5;
  let x_1635 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1630.x, x_1630.y) * vec2<f32>(x_1632.z, x_1632.z)) + x_1635);
  let x_1637 : vec3<f32> = u_xlat4;
  let x_1638 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_1637, vec3<f32>(x_1638.x, x_1638.y, x_1638.z));
  let x_1643 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1643));
  let x_1647 : vec2<f32> = u_xlat18;
  let x_1648 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1647 * vec2<f32>(x_1648.x, x_1648.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1652 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1652 * vec2<f32>(0.5f, 0.5f));
  let x_1654 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1654, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1661 : vec2<f32> = u_xlat18;
  let x_1663 : f32 = x_33.x_GlobalMipBias.x;
  let x_1664 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1661, x_1663);
  u_xlat11.x = x_1664.x;
  let x_1668 : f32 = x_33.x_ZBufferParams.z;
  let x_1670 : f32 = u_xlat11.x;
  let x_1673 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1668 * x_1670) + x_1673);
  let x_1675 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1675);
  let x_1678 : f32 = u_xlat3.x;
  let x_1680 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1678) + -(x_1680));
  let x_1685 : f32 = u_xlat3.x;
  let x_1688 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1685) < x_1688);
  let x_1692 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1692);
  let x_1696 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1696);
  let x_1700 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1700);
  let x_1704 : f32 = u_xlat3.y;
  let x_1706 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1704 * x_1706);
  let x_1710 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1710) + 1.0f);
  let x_1713 : f32 = u_xlat28;
  let x_1715 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1713 * x_1715);
  let x_1719 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1721 : vec2<f32> = u_xlat18;
  let x_1725 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1727 : vec3<f32> = ((vec3<f32>(x_1719.x, x_1719.y, x_1719.z) * vec3<f32>(x_1721.x, x_1721.x, x_1721.x)) + vec3<f32>(x_1725.x, x_1725.y, x_1725.z));
  let x_1728 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1727.x, x_1727.y, x_1727.z, x_1728.w);
  let x_1731 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1733 : f32 = u_xlat26;
  let x_1736 : vec4<f32> = u_xlat5;
  let x_1738 : vec3<f32> = ((vec3<f32>(x_1731.x, x_1731.y, x_1731.z) * vec3<f32>(x_1733, x_1733, x_1733)) + vec3<f32>(x_1736.x, x_1736.y, x_1736.z));
  let x_1739 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1738.x, x_1738.y, x_1738.z, x_1739.w);
  let x_1741 : vec4<f32> = u_xlat5;
  let x_1743 : vec3<f32> = u_xlat11;
  let x_1746 : vec3<f32> = u_xlat8;
  let x_1748 : vec3<f32> = ((vec3<f32>(x_1741.x, x_1741.y, x_1741.z) * vec3<f32>(x_1743.x, x_1743.x, x_1743.x)) + -(x_1746));
  let x_1749 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1748.x, x_1748.y, x_1748.z, x_1749.w);
  let x_1751 : vec4<f32> = u_xlat5;
  let x_1753 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_1751.x, x_1751.y, x_1751.z), vec3<f32>(x_1753.x, x_1753.y, x_1753.z));
  let x_1757 : f32 = u_xlat0;
  let x_1761 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1757) * 0.004f) + x_1761);
  let x_1765 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1765, 0.0f);
  let x_1768 : vec4<f32> = u_xlat5;
  let x_1770 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_1768.x, x_1768.y, x_1768.z), vec3<f32>(x_1770.x, x_1770.y, x_1770.z));
  let x_1773 : f32 = u_xlat26;
  u_xlat26 = (x_1773 + 0.0001f);
  let x_1775 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1775);
  let x_1777 : f32 = u_xlat26;
  let x_1779 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1777 * x_1779);
  let x_1783 : f32 = u_xlat18.x;
  let x_1785 : f32 = u_xlat3.x;
  let x_1787 : f32 = u_xlat25;
  u_xlat25 = ((x_1783 * x_1785) + x_1787);
  let x_1789 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1789.z, x_1789.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1794 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1794);
  let x_1798 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1798 * 52.982917786f);
  let x_1802 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1802);
  let x_1806 : f32 = u_xlat18.x;
  u_xlat26 = (x_1806 + 0.984375f);
  let x_1809 : f32 = u_xlat26;
  u_xlat26 = fract(x_1809);
  let x_1811 : f32 = u_xlat26;
  u_xlat3.z = ((x_1811 * 2.0f) + -1.0f);
  let x_1816 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1816 * 6.283185482f);
  let x_1820 : f32 = u_xlat3.z;
  let x_1823 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1820) * x_1823) + 1.0f);
  let x_1826 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1826);
  let x_1829 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1829);
  let x_1833 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1833);
  let x_1836 : f32 = u_xlat26;
  let x_1838 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1836 * x_1838);
  let x_1841 : f32 = u_xlat26;
  let x_1843 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1841 * x_1843);
  let x_1846 : vec4<f32> = u_xlat3;
  let x_1850 : vec3<f32> = (vec3<f32>(x_1846.x, x_1846.y, x_1846.z) * vec3<f32>(0.645497262f, 0.645497262f, 0.645497262f));
  let x_1851 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1850.x, x_1850.y, x_1850.z, x_1851.w);
  let x_1853 : vec4<f32> = u_xlat1;
  let x_1856 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_1853.x, x_1853.y, x_1853.z)), vec3<f32>(x_1856.x, x_1856.y, x_1856.z));
  let x_1861 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1861 >= 0.0f);
  let x_1863 : bool = u_xlatb18;
  if (x_1863) {
    let x_1867 : vec4<f32> = u_xlat3;
    x_1864 = -(vec3<f32>(x_1867.x, x_1867.y, x_1867.z));
  } else {
    let x_1871 : vec4<f32> = u_xlat3;
    x_1864 = vec3<f32>(x_1871.x, x_1871.y, x_1871.z);
  }
  let x_1873 : vec3<f32> = x_1864;
  let x_1874 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1873.x, x_1873.y, x_1873.z, x_1874.w);
  let x_1876 : vec4<f32> = u_xlat3;
  let x_1879 : vec4<f32> = x_33.x_SSAOParams;
  let x_1882 : vec3<f32> = u_xlat8;
  let x_1883 : vec3<f32> = ((vec3<f32>(x_1876.x, x_1876.y, x_1876.z) * vec3<f32>(x_1879.y, x_1879.y, x_1879.y)) + x_1882);
  let x_1884 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1883.x, x_1883.y, x_1883.z, x_1884.w);
  let x_1886 : vec4<f32> = u_xlat3;
  let x_1889 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1886.y, x_1886.y) * vec2<f32>(x_1889.x, x_1889.y));
  let x_1893 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1895 : vec4<f32> = u_xlat3;
  let x_1898 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1893.x, x_1893.y) * vec2<f32>(x_1895.x, x_1895.x)) + x_1898);
  let x_1901 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1903 : vec4<f32> = u_xlat3;
  let x_1906 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1901.x, x_1901.y) * vec2<f32>(x_1903.z, x_1903.z)) + x_1906);
  let x_1908 : vec3<f32> = u_xlat4;
  let x_1909 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1908, vec3<f32>(x_1909.x, x_1909.y, x_1909.z));
  let x_1914 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1914));
  let x_1918 : vec2<f32> = u_xlat18;
  let x_1919 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1918 * vec2<f32>(x_1919.x, x_1919.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1923 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1923 * vec2<f32>(0.5f, 0.5f));
  let x_1925 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1925, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1932 : vec2<f32> = u_xlat18;
  let x_1934 : f32 = x_33.x_GlobalMipBias.x;
  let x_1935 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1932, x_1934);
  u_xlat11.x = x_1935.x;
  let x_1939 : f32 = x_33.x_ZBufferParams.z;
  let x_1941 : f32 = u_xlat11.x;
  let x_1944 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1939 * x_1941) + x_1944);
  let x_1946 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1946);
  let x_1948 : f32 = u_xlat19;
  let x_1951 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1948) + -(x_1951));
  let x_1956 : f32 = u_xlat3.x;
  let x_1959 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1956) < x_1959);
  let x_1963 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1963);
  let x_1967 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1967);
  let x_1971 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1971);
  let x_1975 : f32 = u_xlat3.y;
  let x_1977 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1975 * x_1977);
  let x_1981 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1981) + 1.0f);
  let x_1984 : f32 = u_xlat19;
  let x_1986 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1984 * x_1986);
  let x_1990 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1992 : vec2<f32> = u_xlat18;
  let x_1996 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1998 : vec3<f32> = ((vec3<f32>(x_1990.x, x_1990.y, x_1990.z) * vec3<f32>(x_1992.x, x_1992.x, x_1992.x)) + vec3<f32>(x_1996.x, x_1996.y, x_1996.z));
  let x_1999 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1998.x, x_1998.y, x_1998.z, x_1999.w);
  let x_2002 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2004 : f32 = u_xlat26;
  let x_2007 : vec4<f32> = u_xlat5;
  let x_2009 : vec3<f32> = ((vec3<f32>(x_2002.x, x_2002.y, x_2002.z) * vec3<f32>(x_2004, x_2004, x_2004)) + vec3<f32>(x_2007.x, x_2007.y, x_2007.z));
  let x_2010 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2009.x, x_2009.y, x_2009.z, x_2010.w);
  let x_2012 : vec4<f32> = u_xlat5;
  let x_2014 : vec3<f32> = u_xlat11;
  let x_2017 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_2012.x, x_2012.y, x_2012.z) * vec3<f32>(x_2014.x, x_2014.x, x_2014.x)) + -(x_2017));
  let x_2020 : vec3<f32> = u_xlat11;
  let x_2021 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2020, vec3<f32>(x_2021.x, x_2021.y, x_2021.z));
  let x_2025 : f32 = u_xlat0;
  let x_2029 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2025) * 0.004f) + x_2029);
  let x_2033 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2033, 0.0f);
  let x_2036 : vec3<f32> = u_xlat11;
  let x_2037 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2036, x_2037);
  let x_2039 : f32 = u_xlat26;
  u_xlat26 = (x_2039 + 0.0001f);
  let x_2041 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2041);
  let x_2043 : f32 = u_xlat26;
  let x_2045 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2043 * x_2045);
  let x_2049 : f32 = u_xlat18.x;
  let x_2051 : f32 = u_xlat3.x;
  let x_2053 : f32 = u_xlat25;
  u_xlat25 = ((x_2049 * x_2051) + x_2053);
  let x_2055 : vec4<f32> = u_xlat2;
  let x_2058 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2055.x, x_2055.y, x_2055.x, x_2055.y) * vec4<f32>(x_2058.z, x_2058.z, x_2058.z, x_2058.z)) + vec4<f32>(10.414999962f, 24.335000992f, 12.497999191f, 29.201999664f));
  let x_2067 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2067.x, x_2067.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2072 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2072);
  let x_2076 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2076 * 52.982917786f);
  let x_2080 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2080);
  let x_2083 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2083.x, x_2083.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_2090 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2090);
  let x_2094 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2094 * 2.0f) + -1.0f);
  let x_2099 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2099 * 6.283185482f);
  let x_2103 : f32 = u_xlat5.z;
  let x_2106 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2103) * x_2106) + 1.0f);
  let x_2109 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2109);
  let x_2112 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2112);
  let x_2116 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2116);
  let x_2119 : f32 = u_xlat26;
  let x_2121 : f32 = u_xlat6.x;
  u_xlat5.x = (x_2119 * x_2121);
  let x_2124 : f32 = u_xlat26;
  let x_2126 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2124 * x_2126);
  let x_2129 : vec4<f32> = u_xlat5;
  let x_2133 : vec3<f32> = (vec3<f32>(x_2129.x, x_2129.y, x_2129.z) * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_2134 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2133.x, x_2133.y, x_2133.z, x_2134.w);
  let x_2136 : vec4<f32> = u_xlat1;
  let x_2139 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(-(vec3<f32>(x_2136.x, x_2136.y, x_2136.z)), vec3<f32>(x_2139.x, x_2139.y, x_2139.z));
  let x_2144 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2144 >= 0.0f);
  let x_2146 : bool = u_xlatb18;
  if (x_2146) {
    let x_2150 : vec4<f32> = u_xlat5;
    x_2147 = -(vec3<f32>(x_2150.x, x_2150.y, x_2150.z));
  } else {
    let x_2154 : vec4<f32> = u_xlat5;
    x_2147 = vec3<f32>(x_2154.x, x_2154.y, x_2154.z);
  }
  let x_2156 : vec3<f32> = x_2147;
  let x_2157 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2156.x, x_2156.y, x_2156.z, x_2157.w);
  let x_2159 : vec4<f32> = u_xlat5;
  let x_2162 : vec4<f32> = x_33.x_SSAOParams;
  let x_2165 : vec3<f32> = u_xlat8;
  let x_2166 : vec3<f32> = ((vec3<f32>(x_2159.x, x_2159.y, x_2159.z) * vec3<f32>(x_2162.y, x_2162.y, x_2162.y)) + x_2165);
  let x_2167 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2166.x, x_2166.y, x_2166.z, x_2167.w);
  let x_2169 : vec4<f32> = u_xlat5;
  let x_2172 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2169.y, x_2169.y) * vec2<f32>(x_2172.x, x_2172.y));
  let x_2176 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2178 : vec4<f32> = u_xlat5;
  let x_2181 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2176.x, x_2176.y) * vec2<f32>(x_2178.x, x_2178.x)) + x_2181);
  let x_2184 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2186 : vec4<f32> = u_xlat5;
  let x_2189 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2184.x, x_2184.y) * vec2<f32>(x_2186.z, x_2186.z)) + x_2189);
  let x_2191 : vec3<f32> = u_xlat4;
  let x_2192 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_2191, vec3<f32>(x_2192.x, x_2192.y, x_2192.z));
  let x_2197 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2197));
  let x_2201 : vec2<f32> = u_xlat18;
  let x_2202 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2201 * vec2<f32>(x_2202.x, x_2202.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2206 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2206 * vec2<f32>(0.5f, 0.5f));
  let x_2208 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2208, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2215 : vec2<f32> = u_xlat18;
  let x_2217 : f32 = x_33.x_GlobalMipBias.x;
  let x_2218 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2215, x_2217);
  u_xlat11.x = x_2218.x;
  let x_2222 : f32 = x_33.x_ZBufferParams.z;
  let x_2224 : f32 = u_xlat11.x;
  let x_2227 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2222 * x_2224) + x_2227);
  let x_2229 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2229);
  let x_2232 : f32 = u_xlat3.x;
  let x_2234 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2232) + -(x_2234));
  let x_2239 : f32 = u_xlat3.x;
  let x_2242 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2239) < x_2242);
  let x_2246 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2246);
  let x_2250 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2250);
  let x_2254 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2254);
  let x_2258 : f32 = u_xlat3.y;
  let x_2260 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2258 * x_2260);
  let x_2264 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2264) + 1.0f);
  let x_2267 : f32 = u_xlat28;
  let x_2269 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2267 * x_2269);
  let x_2273 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2275 : vec2<f32> = u_xlat18;
  let x_2279 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2281 : vec3<f32> = ((vec3<f32>(x_2273.x, x_2273.y, x_2273.z) * vec3<f32>(x_2275.x, x_2275.x, x_2275.x)) + vec3<f32>(x_2279.x, x_2279.y, x_2279.z));
  let x_2282 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2281.x, x_2281.y, x_2281.z, x_2282.w);
  let x_2285 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2287 : f32 = u_xlat26;
  let x_2290 : vec4<f32> = u_xlat5;
  let x_2292 : vec3<f32> = ((vec3<f32>(x_2285.x, x_2285.y, x_2285.z) * vec3<f32>(x_2287, x_2287, x_2287)) + vec3<f32>(x_2290.x, x_2290.y, x_2290.z));
  let x_2293 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2292.x, x_2292.y, x_2292.z, x_2293.w);
  let x_2295 : vec4<f32> = u_xlat5;
  let x_2297 : vec3<f32> = u_xlat11;
  let x_2300 : vec3<f32> = u_xlat8;
  let x_2302 : vec3<f32> = ((vec3<f32>(x_2295.x, x_2295.y, x_2295.z) * vec3<f32>(x_2297.x, x_2297.x, x_2297.x)) + -(x_2300));
  let x_2303 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2302.x, x_2302.y, x_2302.z, x_2303.w);
  let x_2305 : vec4<f32> = u_xlat5;
  let x_2307 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_2305.x, x_2305.y, x_2305.z), vec3<f32>(x_2307.x, x_2307.y, x_2307.z));
  let x_2311 : f32 = u_xlat0;
  let x_2315 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2311) * 0.004f) + x_2315);
  let x_2319 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2319, 0.0f);
  let x_2322 : vec4<f32> = u_xlat5;
  let x_2324 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_2322.x, x_2322.y, x_2322.z), vec3<f32>(x_2324.x, x_2324.y, x_2324.z));
  let x_2327 : f32 = u_xlat26;
  u_xlat26 = (x_2327 + 0.0001f);
  let x_2329 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2329);
  let x_2331 : f32 = u_xlat26;
  let x_2333 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2331 * x_2333);
  let x_2337 : f32 = u_xlat18.x;
  let x_2339 : f32 = u_xlat3.x;
  let x_2341 : f32 = u_xlat25;
  u_xlat25 = ((x_2337 * x_2339) + x_2341);
  let x_2343 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2343.z, x_2343.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2348 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2348);
  let x_2352 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2352 * 52.982917786f);
  let x_2356 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2356);
  let x_2359 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2359.x, x_2359.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2366 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2366);
  let x_2370 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2370 * 2.0f) + -1.0f);
  let x_2375 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2375 * 6.283185482f);
  let x_2379 : f32 = u_xlat3.z;
  let x_2382 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2379) * x_2382) + 1.0f);
  let x_2385 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2385);
  let x_2388 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2388);
  let x_2392 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2392);
  let x_2395 : f32 = u_xlat26;
  let x_2397 : f32 = u_xlat6.x;
  u_xlat3.x = (x_2395 * x_2397);
  let x_2400 : f32 = u_xlat26;
  let x_2402 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2400 * x_2402);
  let x_2405 : vec4<f32> = u_xlat3;
  let x_2409 : vec3<f32> = (vec3<f32>(x_2405.x, x_2405.y, x_2405.z) * vec3<f32>(0.763762653f, 0.763762653f, 0.763762653f));
  let x_2410 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2409.x, x_2409.y, x_2409.z, x_2410.w);
  let x_2412 : vec4<f32> = u_xlat1;
  let x_2415 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_2412.x, x_2412.y, x_2412.z)), vec3<f32>(x_2415.x, x_2415.y, x_2415.z));
  let x_2420 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2420 >= 0.0f);
  let x_2422 : bool = u_xlatb18;
  if (x_2422) {
    let x_2426 : vec4<f32> = u_xlat3;
    x_2423 = -(vec3<f32>(x_2426.x, x_2426.y, x_2426.z));
  } else {
    let x_2430 : vec4<f32> = u_xlat3;
    x_2423 = vec3<f32>(x_2430.x, x_2430.y, x_2430.z);
  }
  let x_2432 : vec3<f32> = x_2423;
  let x_2433 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2432.x, x_2432.y, x_2432.z, x_2433.w);
  let x_2435 : vec4<f32> = u_xlat3;
  let x_2438 : vec4<f32> = x_33.x_SSAOParams;
  let x_2441 : vec3<f32> = u_xlat8;
  let x_2442 : vec3<f32> = ((vec3<f32>(x_2435.x, x_2435.y, x_2435.z) * vec3<f32>(x_2438.y, x_2438.y, x_2438.y)) + x_2441);
  let x_2443 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2442.x, x_2442.y, x_2442.z, x_2443.w);
  let x_2445 : vec4<f32> = u_xlat3;
  let x_2448 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2445.y, x_2445.y) * vec2<f32>(x_2448.x, x_2448.y));
  let x_2452 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2454 : vec4<f32> = u_xlat3;
  let x_2457 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2452.x, x_2452.y) * vec2<f32>(x_2454.x, x_2454.x)) + x_2457);
  let x_2460 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2462 : vec4<f32> = u_xlat3;
  let x_2465 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2460.x, x_2460.y) * vec2<f32>(x_2462.z, x_2462.z)) + x_2465);
  let x_2467 : vec3<f32> = u_xlat4;
  let x_2468 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2467, vec3<f32>(x_2468.x, x_2468.y, x_2468.z));
  let x_2473 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2473));
  let x_2477 : vec2<f32> = u_xlat18;
  let x_2478 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2477 * vec2<f32>(x_2478.x, x_2478.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2482 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2482 * vec2<f32>(0.5f, 0.5f));
  let x_2484 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2484, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2491 : vec2<f32> = u_xlat18;
  let x_2493 : f32 = x_33.x_GlobalMipBias.x;
  let x_2494 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2491, x_2493);
  u_xlat11.x = x_2494.x;
  let x_2498 : f32 = x_33.x_ZBufferParams.z;
  let x_2500 : f32 = u_xlat11.x;
  let x_2503 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2498 * x_2500) + x_2503);
  let x_2505 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2505);
  let x_2507 : f32 = u_xlat19;
  let x_2510 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2507) + -(x_2510));
  let x_2515 : f32 = u_xlat3.x;
  let x_2518 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2515) < x_2518);
  let x_2522 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2522);
  let x_2526 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2526);
  let x_2530 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2530);
  let x_2534 : f32 = u_xlat3.y;
  let x_2536 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2534 * x_2536);
  let x_2540 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2540) + 1.0f);
  let x_2543 : f32 = u_xlat19;
  let x_2545 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2543 * x_2545);
  let x_2549 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2551 : vec2<f32> = u_xlat18;
  let x_2555 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2557 : vec3<f32> = ((vec3<f32>(x_2549.x, x_2549.y, x_2549.z) * vec3<f32>(x_2551.x, x_2551.x, x_2551.x)) + vec3<f32>(x_2555.x, x_2555.y, x_2555.z));
  let x_2558 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2557.x, x_2557.y, x_2557.z, x_2558.w);
  let x_2561 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2563 : f32 = u_xlat26;
  let x_2566 : vec4<f32> = u_xlat5;
  let x_2568 : vec3<f32> = ((vec3<f32>(x_2561.x, x_2561.y, x_2561.z) * vec3<f32>(x_2563, x_2563, x_2563)) + vec3<f32>(x_2566.x, x_2566.y, x_2566.z));
  let x_2569 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2568.x, x_2568.y, x_2568.z, x_2569.w);
  let x_2571 : vec4<f32> = u_xlat5;
  let x_2573 : vec3<f32> = u_xlat11;
  let x_2576 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_2571.x, x_2571.y, x_2571.z) * vec3<f32>(x_2573.x, x_2573.x, x_2573.x)) + -(x_2576));
  let x_2579 : vec3<f32> = u_xlat11;
  let x_2580 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2579, vec3<f32>(x_2580.x, x_2580.y, x_2580.z));
  let x_2584 : f32 = u_xlat0;
  let x_2588 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2584) * 0.004f) + x_2588);
  let x_2592 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2592, 0.0f);
  let x_2595 : vec3<f32> = u_xlat11;
  let x_2596 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2595, x_2596);
  let x_2598 : f32 = u_xlat26;
  u_xlat26 = (x_2598 + 0.0001f);
  let x_2600 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2600);
  let x_2602 : f32 = u_xlat26;
  let x_2604 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2602 * x_2604);
  let x_2608 : f32 = u_xlat18.x;
  let x_2610 : f32 = u_xlat3.x;
  let x_2612 : f32 = u_xlat25;
  u_xlat25 = ((x_2608 * x_2610) + x_2612);
  let x_2614 : vec4<f32> = u_xlat2;
  let x_2617 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2614.x, x_2614.y, x_2614.x, x_2614.y) * vec4<f32>(x_2617.z, x_2617.z, x_2617.z, x_2617.z)) + vec4<f32>(14.580999374f, 34.069000244f, 16.663999557f, 38.936000824f));
  let x_2626 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2626.x, x_2626.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2631 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2631);
  let x_2635 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2635 * 52.982917786f);
  let x_2639 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2639);
  let x_2642 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2642.x, x_2642.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2648 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2648);
  let x_2652 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2652 * 2.0f) + -1.0f);
  let x_2657 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2657 * 6.283185482f);
  let x_2661 : f32 = u_xlat5.z;
  let x_2664 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2661) * x_2664) + 1.0f);
  let x_2667 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2667);
  let x_2670 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2670);
  let x_2674 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2674);
  let x_2677 : f32 = u_xlat26;
  let x_2679 : f32 = u_xlat6.x;
  u_xlat5.x = (x_2677 * x_2679);
  let x_2682 : f32 = u_xlat26;
  let x_2684 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2682 * x_2684);
  let x_2687 : vec4<f32> = u_xlat5;
  let x_2691 : vec3<f32> = (vec3<f32>(x_2687.x, x_2687.y, x_2687.z) * vec3<f32>(0.816496611f, 0.816496611f, 0.816496611f));
  let x_2692 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2691.x, x_2691.y, x_2691.z, x_2692.w);
  let x_2694 : vec4<f32> = u_xlat1;
  let x_2697 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(-(vec3<f32>(x_2694.x, x_2694.y, x_2694.z)), vec3<f32>(x_2697.x, x_2697.y, x_2697.z));
  let x_2702 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2702 >= 0.0f);
  let x_2704 : bool = u_xlatb18;
  if (x_2704) {
    let x_2708 : vec4<f32> = u_xlat5;
    x_2705 = -(vec3<f32>(x_2708.x, x_2708.y, x_2708.z));
  } else {
    let x_2712 : vec4<f32> = u_xlat5;
    x_2705 = vec3<f32>(x_2712.x, x_2712.y, x_2712.z);
  }
  let x_2714 : vec3<f32> = x_2705;
  let x_2715 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2714.x, x_2714.y, x_2714.z, x_2715.w);
  let x_2717 : vec4<f32> = u_xlat5;
  let x_2720 : vec4<f32> = x_33.x_SSAOParams;
  let x_2723 : vec3<f32> = u_xlat8;
  let x_2724 : vec3<f32> = ((vec3<f32>(x_2717.x, x_2717.y, x_2717.z) * vec3<f32>(x_2720.y, x_2720.y, x_2720.y)) + x_2723);
  let x_2725 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2724.x, x_2724.y, x_2724.z, x_2725.w);
  let x_2727 : vec4<f32> = u_xlat5;
  let x_2730 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2727.y, x_2727.y) * vec2<f32>(x_2730.x, x_2730.y));
  let x_2734 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2736 : vec4<f32> = u_xlat5;
  let x_2739 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2734.x, x_2734.y) * vec2<f32>(x_2736.x, x_2736.x)) + x_2739);
  let x_2742 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2744 : vec4<f32> = u_xlat5;
  let x_2747 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2742.x, x_2742.y) * vec2<f32>(x_2744.z, x_2744.z)) + x_2747);
  let x_2749 : vec3<f32> = u_xlat4;
  let x_2750 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_2749, vec3<f32>(x_2750.x, x_2750.y, x_2750.z));
  let x_2755 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2755));
  let x_2759 : vec2<f32> = u_xlat18;
  let x_2760 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2759 * vec2<f32>(x_2760.x, x_2760.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2764 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2764 * vec2<f32>(0.5f, 0.5f));
  let x_2766 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2766, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2773 : vec2<f32> = u_xlat18;
  let x_2775 : f32 = x_33.x_GlobalMipBias.x;
  let x_2776 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2773, x_2775);
  u_xlat11.x = x_2776.x;
  let x_2780 : f32 = x_33.x_ZBufferParams.z;
  let x_2782 : f32 = u_xlat11.x;
  let x_2785 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2780 * x_2782) + x_2785);
  let x_2787 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2787);
  let x_2790 : f32 = u_xlat3.x;
  let x_2792 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2790) + -(x_2792));
  let x_2797 : f32 = u_xlat3.x;
  let x_2800 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2797) < x_2800);
  let x_2804 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2804);
  let x_2808 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2808);
  let x_2812 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2812);
  let x_2816 : f32 = u_xlat3.y;
  let x_2818 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2816 * x_2818);
  let x_2822 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2822) + 1.0f);
  let x_2825 : f32 = u_xlat28;
  let x_2827 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2825 * x_2827);
  let x_2831 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2833 : vec2<f32> = u_xlat18;
  let x_2837 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2839 : vec3<f32> = ((vec3<f32>(x_2831.x, x_2831.y, x_2831.z) * vec3<f32>(x_2833.x, x_2833.x, x_2833.x)) + vec3<f32>(x_2837.x, x_2837.y, x_2837.z));
  let x_2840 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2839.x, x_2839.y, x_2839.z, x_2840.w);
  let x_2843 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2845 : f32 = u_xlat26;
  let x_2848 : vec4<f32> = u_xlat5;
  let x_2850 : vec3<f32> = ((vec3<f32>(x_2843.x, x_2843.y, x_2843.z) * vec3<f32>(x_2845, x_2845, x_2845)) + vec3<f32>(x_2848.x, x_2848.y, x_2848.z));
  let x_2851 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2850.x, x_2850.y, x_2850.z, x_2851.w);
  let x_2853 : vec4<f32> = u_xlat5;
  let x_2855 : vec3<f32> = u_xlat11;
  let x_2858 : vec3<f32> = u_xlat8;
  let x_2860 : vec3<f32> = ((vec3<f32>(x_2853.x, x_2853.y, x_2853.z) * vec3<f32>(x_2855.x, x_2855.x, x_2855.x)) + -(x_2858));
  let x_2861 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2860.x, x_2860.y, x_2860.z, x_2861.w);
  let x_2863 : vec4<f32> = u_xlat5;
  let x_2865 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_2863.x, x_2863.y, x_2863.z), vec3<f32>(x_2865.x, x_2865.y, x_2865.z));
  let x_2869 : f32 = u_xlat0;
  let x_2873 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2869) * 0.004f) + x_2873);
  let x_2877 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2877, 0.0f);
  let x_2880 : vec4<f32> = u_xlat5;
  let x_2882 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_2880.x, x_2880.y, x_2880.z), vec3<f32>(x_2882.x, x_2882.y, x_2882.z));
  let x_2885 : f32 = u_xlat26;
  u_xlat26 = (x_2885 + 0.0001f);
  let x_2887 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2887);
  let x_2889 : f32 = u_xlat26;
  let x_2891 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2889 * x_2891);
  let x_2895 : f32 = u_xlat18.x;
  let x_2897 : f32 = u_xlat3.x;
  let x_2899 : f32 = u_xlat25;
  u_xlat25 = ((x_2895 * x_2897) + x_2899);
  let x_2901 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2901.z, x_2901.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2906 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2906);
  let x_2910 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2910 * 52.982917786f);
  let x_2914 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2914);
  let x_2917 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2917.x, x_2917.x) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2924 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2924);
  let x_2928 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2928 * 2.0f) + -1.0f);
  let x_2933 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2933 * 6.283185482f);
  let x_2937 : f32 = u_xlat3.z;
  let x_2940 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2937) * x_2940) + 1.0f);
  let x_2943 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2943);
  let x_2946 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2946);
  let x_2950 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2950);
  let x_2953 : f32 = u_xlat26;
  let x_2955 : f32 = u_xlat6.x;
  u_xlat3.x = (x_2953 * x_2955);
  let x_2958 : f32 = u_xlat26;
  let x_2960 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2958 * x_2960);
  let x_2963 : vec4<f32> = u_xlat3;
  let x_2967 : vec3<f32> = (vec3<f32>(x_2963.x, x_2963.y, x_2963.z) * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_2968 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2967.x, x_2967.y, x_2967.z, x_2968.w);
  let x_2970 : vec4<f32> = u_xlat1;
  let x_2973 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_2970.x, x_2970.y, x_2970.z)), vec3<f32>(x_2973.x, x_2973.y, x_2973.z));
  let x_2978 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2978 >= 0.0f);
  let x_2980 : bool = u_xlatb18;
  if (x_2980) {
    let x_2984 : vec4<f32> = u_xlat3;
    x_2981 = -(vec3<f32>(x_2984.x, x_2984.y, x_2984.z));
  } else {
    let x_2988 : vec4<f32> = u_xlat3;
    x_2981 = vec3<f32>(x_2988.x, x_2988.y, x_2988.z);
  }
  let x_2990 : vec3<f32> = x_2981;
  let x_2991 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2990.x, x_2990.y, x_2990.z, x_2991.w);
  let x_2993 : vec4<f32> = u_xlat3;
  let x_2996 : vec4<f32> = x_33.x_SSAOParams;
  let x_2999 : vec3<f32> = u_xlat8;
  let x_3000 : vec3<f32> = ((vec3<f32>(x_2993.x, x_2993.y, x_2993.z) * vec3<f32>(x_2996.y, x_2996.y, x_2996.y)) + x_2999);
  let x_3001 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3000.x, x_3000.y, x_3000.z, x_3001.w);
  let x_3003 : vec4<f32> = u_xlat3;
  let x_3006 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_3003.y, x_3003.y) * vec2<f32>(x_3006.x, x_3006.y));
  let x_3010 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3012 : vec4<f32> = u_xlat3;
  let x_3015 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3010.x, x_3010.y) * vec2<f32>(x_3012.x, x_3012.x)) + x_3015);
  let x_3018 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3020 : vec4<f32> = u_xlat3;
  let x_3023 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3018.x, x_3018.y) * vec2<f32>(x_3020.z, x_3020.z)) + x_3023);
  let x_3025 : vec3<f32> = u_xlat4;
  let x_3026 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_3025, vec3<f32>(x_3026.x, x_3026.y, x_3026.z));
  let x_3031 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_3031));
  let x_3035 : vec2<f32> = u_xlat18;
  let x_3036 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_3035 * vec2<f32>(x_3036.x, x_3036.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3040 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_3040 * vec2<f32>(0.5f, 0.5f));
  let x_3042 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_3042, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3049 : vec2<f32> = u_xlat18;
  let x_3051 : f32 = x_33.x_GlobalMipBias.x;
  let x_3052 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3049, x_3051);
  u_xlat11.x = x_3052.x;
  let x_3056 : f32 = x_33.x_ZBufferParams.z;
  let x_3058 : f32 = u_xlat11.x;
  let x_3061 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_3056 * x_3058) + x_3061);
  let x_3063 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_3063);
  let x_3065 : f32 = u_xlat19;
  let x_3068 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3065) + -(x_3068));
  let x_3073 : f32 = u_xlat3.x;
  let x_3076 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_3073) < x_3076);
  let x_3080 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_3080);
  let x_3084 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_3084);
  let x_3088 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_3088);
  let x_3092 : f32 = u_xlat3.y;
  let x_3094 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3092 * x_3094);
  let x_3098 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3098) + 1.0f);
  let x_3101 : f32 = u_xlat19;
  let x_3103 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3101 * x_3103);
  let x_3107 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3109 : vec2<f32> = u_xlat18;
  let x_3113 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3115 : vec3<f32> = ((vec3<f32>(x_3107.x, x_3107.y, x_3107.z) * vec3<f32>(x_3109.x, x_3109.x, x_3109.x)) + vec3<f32>(x_3113.x, x_3113.y, x_3113.z));
  let x_3116 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3115.x, x_3115.y, x_3115.z, x_3116.w);
  let x_3119 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3121 : f32 = u_xlat26;
  let x_3124 : vec4<f32> = u_xlat5;
  let x_3126 : vec3<f32> = ((vec3<f32>(x_3119.x, x_3119.y, x_3119.z) * vec3<f32>(x_3121, x_3121, x_3121)) + vec3<f32>(x_3124.x, x_3124.y, x_3124.z));
  let x_3127 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3126.x, x_3126.y, x_3126.z, x_3127.w);
  let x_3129 : vec4<f32> = u_xlat5;
  let x_3131 : vec3<f32> = u_xlat11;
  let x_3134 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_3129.x, x_3129.y, x_3129.z) * vec3<f32>(x_3131.x, x_3131.x, x_3131.x)) + -(x_3134));
  let x_3137 : vec3<f32> = u_xlat11;
  let x_3138 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_3137, vec3<f32>(x_3138.x, x_3138.y, x_3138.z));
  let x_3142 : f32 = u_xlat0;
  let x_3146 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3142) * 0.004f) + x_3146);
  let x_3150 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3150, 0.0f);
  let x_3153 : vec3<f32> = u_xlat11;
  let x_3154 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_3153, x_3154);
  let x_3156 : f32 = u_xlat26;
  u_xlat26 = (x_3156 + 0.0001f);
  let x_3158 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3158);
  let x_3160 : f32 = u_xlat26;
  let x_3162 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3160 * x_3162);
  let x_3166 : f32 = u_xlat18.x;
  let x_3168 : f32 = u_xlat3.x;
  let x_3170 : f32 = u_xlat25;
  u_xlat25 = ((x_3166 * x_3168) + x_3170);
  let x_3172 : vec4<f32> = u_xlat2;
  let x_3175 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_3172.x, x_3172.y, x_3172.x, x_3172.y) * vec4<f32>(x_3175.z, x_3175.z, x_3175.z, x_3175.z)) + vec4<f32>(18.746999741f, 43.803001404f, 20.829999924f, 48.670001984f));
  let x_3184 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_3184.x, x_3184.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_3189 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3189);
  let x_3193 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3193 * 52.982917786f);
  let x_3197 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3197);
  let x_3200 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_3200.x, x_3200.x) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_3207 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3207);
  let x_3211 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_3211 * 2.0f) + -1.0f);
  let x_3216 : f32 = u_xlat18.y;
  u_xlat18.x = (x_3216 * 6.283185482f);
  let x_3220 : f32 = u_xlat5.z;
  let x_3223 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_3220) * x_3223) + 1.0f);
  let x_3226 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_3226);
  let x_3229 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_3229);
  let x_3233 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_3233);
  let x_3236 : f32 = u_xlat26;
  let x_3238 : f32 = u_xlat6.x;
  u_xlat5.x = (x_3236 * x_3238);
  let x_3241 : f32 = u_xlat26;
  let x_3243 : f32 = u_xlat3.x;
  u_xlat5.y = (x_3241 * x_3243);
  let x_3246 : vec4<f32> = u_xlat5;
  let x_3250 : vec3<f32> = (vec3<f32>(x_3246.x, x_3246.y, x_3246.z) * vec3<f32>(0.912870944f, 0.912870944f, 0.912870944f));
  let x_3251 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3250.x, x_3250.y, x_3250.z, x_3251.w);
  let x_3253 : vec4<f32> = u_xlat1;
  let x_3256 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(-(vec3<f32>(x_3253.x, x_3253.y, x_3253.z)), vec3<f32>(x_3256.x, x_3256.y, x_3256.z));
  let x_3261 : f32 = u_xlat18.x;
  u_xlatb18 = (x_3261 >= 0.0f);
  let x_3263 : bool = u_xlatb18;
  if (x_3263) {
    let x_3267 : vec4<f32> = u_xlat5;
    x_3264 = -(vec3<f32>(x_3267.x, x_3267.y, x_3267.z));
  } else {
    let x_3271 : vec4<f32> = u_xlat5;
    x_3264 = vec3<f32>(x_3271.x, x_3271.y, x_3271.z);
  }
  let x_3273 : vec3<f32> = x_3264;
  let x_3274 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3273.x, x_3273.y, x_3273.z, x_3274.w);
  let x_3276 : vec4<f32> = u_xlat5;
  let x_3279 : vec4<f32> = x_33.x_SSAOParams;
  let x_3282 : vec3<f32> = u_xlat8;
  let x_3283 : vec3<f32> = ((vec3<f32>(x_3276.x, x_3276.y, x_3276.z) * vec3<f32>(x_3279.y, x_3279.y, x_3279.y)) + x_3282);
  let x_3284 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3283.x, x_3283.y, x_3283.z, x_3284.w);
  let x_3286 : vec4<f32> = u_xlat5;
  let x_3289 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_3286.y, x_3286.y) * vec2<f32>(x_3289.x, x_3289.y));
  let x_3293 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3295 : vec4<f32> = u_xlat5;
  let x_3298 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3293.x, x_3293.y) * vec2<f32>(x_3295.x, x_3295.x)) + x_3298);
  let x_3301 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3303 : vec4<f32> = u_xlat5;
  let x_3306 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3301.x, x_3301.y) * vec2<f32>(x_3303.z, x_3303.z)) + x_3306);
  let x_3308 : vec3<f32> = u_xlat4;
  let x_3309 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_3308, vec3<f32>(x_3309.x, x_3309.y, x_3309.z));
  let x_3314 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_3314));
  let x_3318 : vec2<f32> = u_xlat18;
  let x_3319 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_3318 * vec2<f32>(x_3319.x, x_3319.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3323 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_3323 * vec2<f32>(0.5f, 0.5f));
  let x_3325 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_3325, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3332 : vec2<f32> = u_xlat18;
  let x_3334 : f32 = x_33.x_GlobalMipBias.x;
  let x_3335 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3332, x_3334);
  u_xlat11.x = x_3335.x;
  let x_3339 : f32 = x_33.x_ZBufferParams.z;
  let x_3341 : f32 = u_xlat11.x;
  let x_3344 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_3339 * x_3341) + x_3344);
  let x_3346 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_3346);
  let x_3349 : f32 = u_xlat3.x;
  let x_3351 : f32 = u_xlat28;
  u_xlat3.x = (-(x_3349) + -(x_3351));
  let x_3356 : f32 = u_xlat3.x;
  let x_3359 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_3356) < x_3359);
  let x_3363 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_3363);
  let x_3367 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_3367);
  let x_3371 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_3371);
  let x_3375 : f32 = u_xlat3.y;
  let x_3377 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3375 * x_3377);
  let x_3381 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3381) + 1.0f);
  let x_3384 : f32 = u_xlat28;
  let x_3386 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3384 * x_3386);
  let x_3390 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3392 : vec2<f32> = u_xlat18;
  let x_3396 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3398 : vec3<f32> = ((vec3<f32>(x_3390.x, x_3390.y, x_3390.z) * vec3<f32>(x_3392.x, x_3392.x, x_3392.x)) + vec3<f32>(x_3396.x, x_3396.y, x_3396.z));
  let x_3399 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3398.x, x_3398.y, x_3398.z, x_3399.w);
  let x_3402 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3404 : f32 = u_xlat26;
  let x_3407 : vec4<f32> = u_xlat5;
  let x_3409 : vec3<f32> = ((vec3<f32>(x_3402.x, x_3402.y, x_3402.z) * vec3<f32>(x_3404, x_3404, x_3404)) + vec3<f32>(x_3407.x, x_3407.y, x_3407.z));
  let x_3410 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3409.x, x_3409.y, x_3409.z, x_3410.w);
  let x_3412 : vec4<f32> = u_xlat5;
  let x_3414 : vec3<f32> = u_xlat11;
  let x_3417 : vec3<f32> = u_xlat8;
  let x_3419 : vec3<f32> = ((vec3<f32>(x_3412.x, x_3412.y, x_3412.z) * vec3<f32>(x_3414.x, x_3414.x, x_3414.x)) + -(x_3417));
  let x_3420 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3419.x, x_3419.y, x_3419.z, x_3420.w);
  let x_3422 : vec4<f32> = u_xlat5;
  let x_3424 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_3422.x, x_3422.y, x_3422.z), vec3<f32>(x_3424.x, x_3424.y, x_3424.z));
  let x_3428 : f32 = u_xlat0;
  let x_3432 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3428) * 0.004f) + x_3432);
  let x_3436 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3436, 0.0f);
  let x_3439 : vec4<f32> = u_xlat5;
  let x_3441 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_3439.x, x_3439.y, x_3439.z), vec3<f32>(x_3441.x, x_3441.y, x_3441.z));
  let x_3444 : f32 = u_xlat26;
  u_xlat26 = (x_3444 + 0.0001f);
  let x_3446 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3446);
  let x_3448 : f32 = u_xlat26;
  let x_3450 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3448 * x_3450);
  let x_3454 : f32 = u_xlat18.x;
  let x_3456 : f32 = u_xlat3.x;
  let x_3458 : f32 = u_xlat25;
  u_xlat25 = ((x_3454 * x_3456) + x_3458);
  let x_3460 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_3460.z, x_3460.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_3465 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3465);
  let x_3469 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3469 * 52.982917786f);
  let x_3473 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3473);
  let x_3476 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_3476.x, x_3476.x) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_3483 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3483);
  let x_3487 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_3487 * 2.0f) + -1.0f);
  let x_3492 : f32 = u_xlat18.y;
  u_xlat18.x = (x_3492 * 6.283185482f);
  let x_3496 : f32 = u_xlat3.z;
  let x_3499 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_3496) * x_3499) + 1.0f);
  let x_3502 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_3502);
  let x_3505 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_3505);
  let x_3509 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_3509);
  let x_3512 : f32 = u_xlat26;
  let x_3514 : f32 = u_xlat6.x;
  u_xlat3.x = (x_3512 * x_3514);
  let x_3517 : f32 = u_xlat26;
  let x_3519 : f32 = u_xlat5.x;
  u_xlat3.y = (x_3517 * x_3519);
  let x_3522 : vec4<f32> = u_xlat3;
  let x_3526 : vec3<f32> = (vec3<f32>(x_3522.x, x_3522.y, x_3522.z) * vec3<f32>(0.957427144f, 0.957427144f, 0.957427144f));
  let x_3527 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3526.x, x_3526.y, x_3526.z, x_3527.w);
  let x_3529 : vec4<f32> = u_xlat1;
  let x_3532 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_3529.x, x_3529.y, x_3529.z)), vec3<f32>(x_3532.x, x_3532.y, x_3532.z));
  let x_3537 : f32 = u_xlat18.x;
  u_xlatb18 = (x_3537 >= 0.0f);
  let x_3539 : bool = u_xlatb18;
  if (x_3539) {
    let x_3543 : vec4<f32> = u_xlat3;
    x_3540 = -(vec3<f32>(x_3543.x, x_3543.y, x_3543.z));
  } else {
    let x_3547 : vec4<f32> = u_xlat3;
    x_3540 = vec3<f32>(x_3547.x, x_3547.y, x_3547.z);
  }
  let x_3549 : vec3<f32> = x_3540;
  let x_3550 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3549.x, x_3549.y, x_3549.z, x_3550.w);
  let x_3552 : vec4<f32> = u_xlat3;
  let x_3555 : vec4<f32> = x_33.x_SSAOParams;
  let x_3558 : vec3<f32> = u_xlat8;
  let x_3559 : vec3<f32> = ((vec3<f32>(x_3552.x, x_3552.y, x_3552.z) * vec3<f32>(x_3555.y, x_3555.y, x_3555.y)) + x_3558);
  let x_3560 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3559.x, x_3559.y, x_3559.z, x_3560.w);
  let x_3562 : vec4<f32> = u_xlat3;
  let x_3565 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_3562.y, x_3562.y) * vec2<f32>(x_3565.x, x_3565.y));
  let x_3569 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3571 : vec4<f32> = u_xlat3;
  let x_3574 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3569.x, x_3569.y) * vec2<f32>(x_3571.x, x_3571.x)) + x_3574);
  let x_3577 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3579 : vec4<f32> = u_xlat3;
  let x_3582 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3577.x, x_3577.y) * vec2<f32>(x_3579.z, x_3579.z)) + x_3582);
  let x_3584 : vec3<f32> = u_xlat4;
  let x_3585 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_3584, vec3<f32>(x_3585.x, x_3585.y, x_3585.z));
  let x_3590 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_3590));
  let x_3594 : vec2<f32> = u_xlat18;
  let x_3595 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_3594 * vec2<f32>(x_3595.x, x_3595.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3599 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_3599 * vec2<f32>(0.5f, 0.5f));
  let x_3601 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_3601, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3608 : vec2<f32> = u_xlat18;
  let x_3610 : f32 = x_33.x_GlobalMipBias.x;
  let x_3611 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3608, x_3610);
  u_xlat11.x = x_3611.x;
  let x_3615 : f32 = x_33.x_ZBufferParams.z;
  let x_3617 : f32 = u_xlat11.x;
  let x_3620 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_3615 * x_3617) + x_3620);
  let x_3622 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_3622);
  let x_3624 : f32 = u_xlat19;
  let x_3627 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3624) + -(x_3627));
  let x_3632 : f32 = u_xlat3.x;
  let x_3635 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_3632) < x_3635);
  let x_3639 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_3639);
  let x_3643 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_3643);
  let x_3647 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_3647);
  let x_3651 : f32 = u_xlat3.y;
  let x_3653 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3651 * x_3653);
  let x_3657 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3657) + 1.0f);
  let x_3660 : f32 = u_xlat19;
  let x_3662 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3660 * x_3662);
  let x_3666 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3668 : vec2<f32> = u_xlat18;
  let x_3672 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3674 : vec3<f32> = ((vec3<f32>(x_3666.x, x_3666.y, x_3666.z) * vec3<f32>(x_3668.x, x_3668.x, x_3668.x)) + vec3<f32>(x_3672.x, x_3672.y, x_3672.z));
  let x_3675 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3674.x, x_3674.y, x_3674.z, x_3675.w);
  let x_3678 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3680 : f32 = u_xlat26;
  let x_3683 : vec4<f32> = u_xlat5;
  let x_3685 : vec3<f32> = ((vec3<f32>(x_3678.x, x_3678.y, x_3678.z) * vec3<f32>(x_3680, x_3680, x_3680)) + vec3<f32>(x_3683.x, x_3683.y, x_3683.z));
  let x_3686 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3685.x, x_3685.y, x_3685.z, x_3686.w);
  let x_3688 : vec4<f32> = u_xlat5;
  let x_3690 : vec3<f32> = u_xlat11;
  let x_3693 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_3688.x, x_3688.y, x_3688.z) * vec3<f32>(x_3690.x, x_3690.x, x_3690.x)) + -(x_3693));
  let x_3696 : vec3<f32> = u_xlat11;
  let x_3697 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_3696, vec3<f32>(x_3697.x, x_3697.y, x_3697.z));
  let x_3701 : f32 = u_xlat0;
  let x_3705 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3701) * 0.004f) + x_3705);
  let x_3709 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3709, 0.0f);
  let x_3712 : vec3<f32> = u_xlat11;
  let x_3713 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_3712, x_3713);
  let x_3715 : f32 = u_xlat26;
  u_xlat26 = (x_3715 + 0.0001f);
  let x_3717 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3717);
  let x_3719 : f32 = u_xlat26;
  let x_3721 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3719 * x_3721);
  let x_3725 : f32 = u_xlat18.x;
  let x_3727 : f32 = u_xlat3.x;
  let x_3729 : f32 = u_xlat25;
  u_xlat25 = ((x_3725 * x_3727) + x_3729);
  let x_3731 : vec4<f32> = u_xlat2;
  let x_3734 : vec4<f32> = x_33.x_SSAOParams;
  let x_3740 : vec2<f32> = ((vec2<f32>(x_3731.x, x_3731.y) * vec2<f32>(x_3734.z, x_3734.z)) + vec2<f32>(22.913000107f, 53.537002563f));
  let x_3741 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3740.x, x_3740.y, x_3741.z, x_3741.w);
  let x_3743 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec2<f32>(x_3743.x, x_3743.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_3748 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3748);
  let x_3752 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3752 * 52.982917786f);
  let x_3756 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3756);
  let x_3759 : vec4<f32> = u_xlat2;
  let x_3763 : vec2<f32> = (vec2<f32>(x_3759.x, x_3759.x) + vec2<f32>(0.984375f, 0.125f));
  let x_3764 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3763.x, x_3763.y, x_3764.z, x_3764.w);
  let x_3767 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3767);
  let x_3771 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_3771 * 2.0f) + -1.0f);
  let x_3776 : f32 = u_xlat2.y;
  u_xlat2.x = (x_3776 * 6.283185482f);
  let x_3780 : f32 = u_xlat3.z;
  let x_3783 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_3780) * x_3783) + 1.0f);
  let x_3788 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_3788);
  let x_3792 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_3792);
  let x_3796 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_3796);
  let x_3800 : f32 = u_xlat10.x;
  let x_3802 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3800 * x_3802);
  let x_3806 : f32 = u_xlat2.x;
  let x_3808 : f32 = u_xlat10.x;
  u_xlat3.y = (x_3806 * x_3808);
  let x_3811 : vec4<f32> = u_xlat1;
  let x_3814 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(vec3<f32>(x_3811.x, x_3811.y, x_3811.z)), vec3<f32>(x_3814.x, x_3814.y, x_3814.z));
  let x_3819 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_3819 >= 0.0f);
  let x_3823 : bool = u_xlatb2.x;
  if (x_3823) {
    let x_3827 : vec4<f32> = u_xlat3;
    x_3824 = -(vec3<f32>(x_3827.x, x_3827.y, x_3827.z));
  } else {
    let x_3831 : vec4<f32> = u_xlat3;
    x_3824 = vec3<f32>(x_3831.x, x_3831.y, x_3831.z);
  }
  let x_3833 : vec3<f32> = x_3824;
  let x_3834 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3833.x, x_3833.y, x_3833.z, x_3834.w);
  let x_3836 : vec4<f32> = u_xlat2;
  let x_3839 : vec4<f32> = x_33.x_SSAOParams;
  let x_3842 : vec3<f32> = u_xlat8;
  let x_3843 : vec3<f32> = ((vec3<f32>(x_3836.x, x_3836.y, x_3836.z) * vec3<f32>(x_3839.y, x_3839.y, x_3839.y)) + x_3842);
  let x_3844 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3843.x, x_3843.y, x_3843.z, x_3844.w);
  let x_3846 : vec4<f32> = u_xlat2;
  let x_3849 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_3851 : vec2<f32> = (vec2<f32>(x_3846.y, x_3846.y) * vec2<f32>(x_3849.x, x_3849.y));
  let x_3852 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3851.x, x_3851.y, x_3852.z, x_3852.w);
  let x_3855 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3857 : vec4<f32> = u_xlat2;
  let x_3860 : vec4<f32> = u_xlat3;
  let x_3862 : vec2<f32> = ((vec2<f32>(x_3855.x, x_3855.y) * vec2<f32>(x_3857.x, x_3857.x)) + vec2<f32>(x_3860.x, x_3860.y));
  let x_3863 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3862.x, x_3862.y, x_3863.z, x_3863.w);
  let x_3866 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3868 : vec4<f32> = u_xlat2;
  let x_3871 : vec4<f32> = u_xlat3;
  let x_3873 : vec2<f32> = ((vec2<f32>(x_3866.x, x_3866.y) * vec2<f32>(x_3868.z, x_3868.z)) + vec2<f32>(x_3871.x, x_3871.y));
  let x_3874 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3873.x, x_3873.y, x_3874.z, x_3874.w);
  let x_3876 : vec3<f32> = u_xlat4;
  let x_3877 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_3876, vec3<f32>(x_3877.x, x_3877.y, x_3877.z));
  let x_3882 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_3882));
  let x_3886 : vec4<f32> = u_xlat3;
  let x_3888 : vec3<f32> = u_xlat10;
  let x_3891 : vec2<f32> = ((vec2<f32>(x_3886.x, x_3886.y) * vec2<f32>(x_3888.x, x_3888.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3892 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_3891.x, x_3891.y, x_3892.z);
  let x_3894 : vec3<f32> = u_xlat10;
  let x_3896 : vec2<f32> = (vec2<f32>(x_3894.x, x_3894.y) * vec2<f32>(0.5f, 0.5f));
  let x_3897 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_3896.x, x_3896.y, x_3897.z);
  let x_3899 : vec3<f32> = u_xlat10;
  let x_3903 : vec2<f32> = clamp(vec2<f32>(x_3899.x, x_3899.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3904 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_3903.x, x_3903.y, x_3904.z);
  let x_3909 : vec3<f32> = u_xlat10;
  let x_3912 : f32 = x_33.x_GlobalMipBias.x;
  let x_3913 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_3909.x, x_3909.y), x_3912);
  u_xlat26 = x_3913.x;
  let x_3916 : f32 = x_33.x_ZBufferParams.z;
  let x_3917 : f32 = u_xlat26;
  let x_3920 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_3916 * x_3917) + x_3920);
  let x_3924 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3924);
  let x_3928 : f32 = u_xlat2.x;
  let x_3931 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_3928) + -(x_3931));
  let x_3936 : f32 = u_xlat2.x;
  let x_3939 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_3936) < x_3939);
  let x_3942 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_3942);
  let x_3946 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_3946);
  let x_3950 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_3950);
  let x_3954 : f32 = u_xlat2.w;
  let x_3956 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3954 * x_3956);
  let x_3960 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_3960) + 1.0f);
  let x_3965 : f32 = u_xlat3.x;
  let x_3967 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_3965 * x_3967);
  let x_3970 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3972 : vec3<f32> = u_xlat10;
  let x_3976 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3978 : vec3<f32> = ((vec3<f32>(x_3970.x, x_3970.y, x_3970.z) * vec3<f32>(x_3972.x, x_3972.x, x_3972.x)) + vec3<f32>(x_3976.x, x_3976.y, x_3976.z));
  let x_3979 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3978.x, x_3978.y, x_3978.z, x_3979.w);
  let x_3982 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3984 : vec2<f32> = u_xlat18;
  let x_3987 : vec4<f32> = u_xlat3;
  let x_3989 : vec3<f32> = ((vec3<f32>(x_3982.x, x_3982.y, x_3982.z) * vec3<f32>(x_3984.x, x_3984.x, x_3984.x)) + vec3<f32>(x_3987.x, x_3987.y, x_3987.z));
  let x_3990 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3989.x, x_3989.y, x_3989.z, x_3990.w);
  let x_3992 : vec4<f32> = u_xlat3;
  let x_3994 : f32 = u_xlat26;
  let x_3997 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_3992.x, x_3992.y, x_3992.z) * vec3<f32>(x_3994, x_3994, x_3994)) + -(x_3997));
  let x_4000 : vec3<f32> = u_xlat8;
  let x_4001 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_4000, vec3<f32>(x_4001.x, x_4001.y, x_4001.z));
  let x_4005 : f32 = u_xlat0;
  let x_4009 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_4005) * 0.004f) + x_4009);
  let x_4013 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_4013, 0.0f);
  let x_4016 : vec3<f32> = u_xlat8;
  let x_4017 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_4016, x_4017);
  let x_4021 : f32 = u_xlat8.x;
  u_xlat8.x = (x_4021 + 0.0001f);
  let x_4025 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_4025);
  let x_4029 : f32 = u_xlat8.x;
  let x_4031 : f32 = u_xlat10.x;
  u_xlat8.x = (x_4029 * x_4031);
  let x_4035 : f32 = u_xlat8.x;
  let x_4037 : f32 = u_xlat2.x;
  let x_4039 : f32 = u_xlat25;
  u_xlat8.x = ((x_4035 * x_4037) + x_4039);
  let x_4043 : f32 = u_xlat8.x;
  let x_4045 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_4043 * x_4045);
  let x_4049 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_4049);
  let x_4051 : f32 = u_xlat0;
  let x_4053 : f32 = u_xlat16;
  u_xlat0 = ((-(x_4051) * x_4053) + 1.0f);
  let x_4056 : f32 = u_xlat0;
  let x_4057 : f32 = u_xlat0;
  u_xlat0 = (x_4056 * x_4057);
  let x_4060 : f32 = u_xlat8.x;
  let x_4062 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_4060 * x_4062);
  let x_4065 : f32 = u_xlat0;
  let x_4067 : f32 = u_xlat8.x;
  u_xlat0 = (x_4065 * x_4067);
  let x_4069 : f32 = u_xlat0;
  u_xlat0 = (x_4069 * 0.083333336f);
  let x_4072 : f32 = u_xlat0;
  u_xlat0 = clamp(x_4072, 0.0f, 1.0f);
  let x_4074 : f32 = u_xlat0;
  u_xlat0 = log2(x_4074);
  let x_4076 : f32 = u_xlat0;
  u_xlat0 = (x_4076 * 0.600000024f);
  let x_4079 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_4079);
  let x_4083 : vec4<f32> = u_xlat1;
  let x_4086 : vec3<f32> = ((vec3<f32>(x_4083.x, x_4083.y, x_4083.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_4087 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4087.x, x_4086.x, x_4086.y, x_4086.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

