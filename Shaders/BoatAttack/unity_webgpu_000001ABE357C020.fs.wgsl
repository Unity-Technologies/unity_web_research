type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_299 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_401 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3538 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_4017 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4126 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec4<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_193 : f32;
  var x_206 : f32;
  var x_218 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1899 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2025 : f32;
  var u_xlatb47 : vec2<bool>;
  var x_2081 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3487 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3621 : f32;
  var x_3632 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4418 : f32;
  var x_4431 : f32;
  var x_4483 : f32;
  var x_4494 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_173 : vec3<f32> = (-(x_167) + x_172);
  let x_174 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_177 : vec4<f32> = u_xlat4;
  let x_179 : vec4<f32> = u_xlat4;
  u_xlat67 = dot(vec3<f32>(x_177.x, x_177.y, x_177.z), vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_182);
  let x_184 : f32 = u_xlat67;
  let x_186 : vec4<f32> = u_xlat4;
  let x_188 : vec3<f32> = (vec3<f32>(x_184, x_184, x_184) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_189 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_188.x, x_188.y, x_188.z, x_189.w);
  let x_192 : bool = u_xlatb0;
  if (x_192) {
    let x_197 : f32 = u_xlat4.x;
    x_193 = x_197;
  } else {
    let x_202 : f32 = x_160.unity_MatrixV[0i].z;
    x_193 = x_202;
  }
  let x_203 : f32 = x_193;
  u_xlat5.x = x_203;
  let x_205 : bool = u_xlatb0;
  if (x_205) {
    let x_210 : f32 = u_xlat4.y;
    x_206 = x_210;
  } else {
    let x_214 : f32 = x_160.unity_MatrixV[1i].z;
    x_206 = x_214;
  }
  let x_215 : f32 = x_206;
  u_xlat5.y = x_215;
  let x_217 : bool = u_xlatb0;
  if (x_217) {
    let x_222 : f32 = u_xlat4.z;
    x_218 = x_222;
  } else {
    let x_226 : f32 = x_160.unity_MatrixV[2i].z;
    x_218 = x_226;
  }
  let x_227 : f32 = x_218;
  u_xlat5.z = x_227;
  let x_229 : vec3<f32> = u_xlat5;
  let x_233 : vec4<f32> = x_95.unity_WorldToObject[1i];
  let x_235 : vec3<f32> = (vec3<f32>(x_229.y, x_229.y, x_229.y) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_239 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_241 : vec3<f32> = u_xlat5;
  let x_244 : vec4<f32> = u_xlat4;
  let x_246 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(x_241.x, x_241.x, x_241.x)) + vec3<f32>(x_244.x, x_244.y, x_244.z));
  let x_247 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_250 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_252 : vec3<f32> = u_xlat5;
  let x_255 : vec4<f32> = u_xlat4;
  let x_257 : vec3<f32> = ((vec3<f32>(x_250.x, x_250.y, x_250.z) * vec3<f32>(x_252.z, x_252.z, x_252.z)) + vec3<f32>(x_255.x, x_255.y, x_255.z));
  let x_258 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_257.x, x_257.y, x_257.z, x_258.w);
  let x_260 : vec4<f32> = u_xlat4;
  let x_262 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_260.x, x_260.y, x_260.z), vec3<f32>(x_262.x, x_262.y, x_262.z));
  let x_267 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_267);
  let x_270 : vec3<f32> = u_xlat0;
  let x_272 : vec4<f32> = u_xlat4;
  let x_274 : vec3<f32> = (vec3<f32>(x_270.x, x_270.x, x_270.x) * vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_289 : vec4<f32> = vs_INTERP3;
  let x_292 : f32 = x_160.x_GlobalMipBias.x;
  let x_293 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_289.x, x_289.y), x_292);
  u_xlat6 = x_293;
  let x_295 : vec4<f32> = u_xlat6;
  let x_301 : vec4<f32> = x_299.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_295.x, x_295.y, x_295.z) * vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_310 : vec4<f32> = vs_INTERP3;
  let x_313 : f32 = x_160.x_GlobalMipBias.x;
  let x_314 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_310.x, x_310.y), x_313);
  u_xlat8 = vec4<f32>(x_314.w, x_314.x, x_314.y, x_314.z);
  let x_317 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_317.y, x_317.z, x_317.w, x_317.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_324 : vec4<f32> = u_xlat9;
  let x_325 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_324, x_325);
  let x_329 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_329);
  let x_333 : vec3<f32> = u_xlat0;
  let x_335 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_333.x, x_333.x, x_333.x) * vec3<f32>(x_335.x, x_335.y, x_335.z));
  let x_340 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_340 * 200.0f);
  let x_345 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_345, 1.0f);
  let x_348 : vec3<f32> = u_xlat0;
  let x_350 : vec4<f32> = u_xlat6;
  let x_352 : vec3<f32> = (vec3<f32>(x_348.x, x_348.x, x_348.x) * vec3<f32>(x_350.x, x_350.y, x_350.z));
  let x_353 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_352.x, x_352.y, x_352.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat30;
  let x_359 : vec3<f32> = (vec3<f32>(x_355.x, x_355.y, x_355.z) * vec3<f32>(x_357.y, x_357.y, x_357.y));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
  let x_362 : vec3<f32> = u_xlat30;
  let x_364 : vec4<f32> = u_xlat2;
  let x_367 : vec4<f32> = u_xlat3;
  let x_369 : vec3<f32> = ((vec3<f32>(x_362.x, x_362.x, x_362.x) * vec3<f32>(x_364.x, x_364.y, x_364.z)) + vec3<f32>(x_367.x, x_367.y, x_367.z));
  let x_370 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_369.x, x_369.y, x_369.z, x_370.w);
  let x_372 : vec3<f32> = u_xlat30;
  let x_374 : vec3<f32> = u_xlat1;
  let x_376 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_372.z, x_372.z, x_372.z) * x_374) + vec3<f32>(x_376.x, x_376.y, x_376.z));
  let x_379 : vec3<f32> = u_xlat1;
  let x_380 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_379, x_380);
  let x_384 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_384, 1.17549435e-37f);
  let x_389 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_389);
  let x_392 : vec3<f32> = u_xlat0;
  let x_394 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_392.x, x_392.x, x_392.x) * x_394);
  let x_396 : vec3<f32> = vs_INTERP0;
  let x_403 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres0;
  let x_406 : vec3<f32> = (x_396 + -(vec3<f32>(x_403.x, x_403.y, x_403.z)));
  let x_407 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_406.x, x_406.y, x_406.z, x_407.w);
  let x_409 : vec3<f32> = vs_INTERP0;
  let x_411 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres1;
  let x_414 : vec3<f32> = (x_409 + -(vec3<f32>(x_411.x, x_411.y, x_411.z)));
  let x_415 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_414.x, x_414.y, x_414.z, x_415.w);
  let x_417 : vec3<f32> = vs_INTERP0;
  let x_419 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres2;
  let x_422 : vec3<f32> = (x_417 + -(vec3<f32>(x_419.x, x_419.y, x_419.z)));
  let x_423 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_422.x, x_422.y, x_422.z, x_423.w);
  let x_426 : vec3<f32> = vs_INTERP0;
  let x_429 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres3;
  let x_432 : vec3<f32> = (x_426 + -(vec3<f32>(x_429.x, x_429.y, x_429.z)));
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec4<f32> = u_xlat2;
  let x_437 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_435.x, x_435.y, x_435.z), vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_441 : vec4<f32> = u_xlat3;
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_441.x, x_441.y, x_441.z), vec3<f32>(x_443.x, x_443.y, x_443.z));
  let x_447 : vec4<f32> = u_xlat9;
  let x_449 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_447.x, x_447.y, x_447.z), vec3<f32>(x_449.x, x_449.y, x_449.z));
  let x_453 : vec4<f32> = u_xlat10;
  let x_455 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_453.x, x_453.y, x_453.z), vec3<f32>(x_455.x, x_455.y, x_455.z));
  let x_462 : vec4<f32> = u_xlat2;
  let x_465 : vec4<f32> = x_401.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_462 < x_465);
  let x_468 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_468);
  let x_472 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_472);
  let x_476 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_476);
  let x_480 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_480);
  let x_484 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_484);
  let x_489 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_489);
  let x_493 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_493);
  let x_496 : vec4<f32> = u_xlat2;
  let x_498 : vec4<f32> = u_xlat3;
  let x_500 : vec3<f32> = (vec3<f32>(x_496.x, x_496.y, x_496.z) + vec3<f32>(x_498.y, x_498.z, x_498.w));
  let x_501 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_500.x, x_500.y, x_500.z, x_501.w);
  let x_503 : vec4<f32> = u_xlat2;
  let x_506 : vec3<f32> = max(vec3<f32>(x_503.x, x_503.y, x_503.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_507 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_507.x, x_506.x, x_506.y, x_506.z);
  let x_509 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_509, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_516 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_516) + 4.0f);
  let x_522 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_522);
  let x_525 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_525) << bitcast<u32>(2i));
  let x_528 : vec3<f32> = vs_INTERP0;
  let x_530 : i32 = u_xlati0;
  let x_533 : i32 = u_xlati0;
  let x_537 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_530 + 1i) / 4i)][((x_533 + 1i) % 4i)];
  let x_539 : vec3<f32> = (vec3<f32>(x_528.y, x_528.y, x_528.y) * vec3<f32>(x_537.x, x_537.y, x_537.z));
  let x_540 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_542 : i32 = u_xlati0;
  let x_544 : i32 = u_xlati0;
  let x_547 : vec4<f32> = x_401.x_MainLightWorldToShadow[(x_542 / 4i)][(x_544 % 4i)];
  let x_549 : vec3<f32> = vs_INTERP0;
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : vec3<f32> = ((vec3<f32>(x_547.x, x_547.y, x_547.z) * vec3<f32>(x_549.x, x_549.x, x_549.x)) + vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_555 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
  let x_557 : i32 = u_xlati0;
  let x_560 : i32 = u_xlati0;
  let x_564 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_557 + 2i) / 4i)][((x_560 + 2i) % 4i)];
  let x_566 : vec3<f32> = vs_INTERP0;
  let x_569 : vec4<f32> = u_xlat2;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.x, x_564.y, x_564.z) * vec3<f32>(x_566.z, x_566.z, x_566.z)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat2;
  let x_576 : i32 = u_xlati0;
  let x_579 : i32 = u_xlati0;
  let x_583 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_576 + 3i) / 4i)][((x_579 + 3i) % 4i)];
  let x_585 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(x_583.x, x_583.y, x_583.z));
  let x_586 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_585.x, x_585.y, x_585.z, x_586.w);
  let x_590 : f32 = x_401.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_590);
  let x_592 : bool = u_xlatb0;
  if (x_592) {
    let x_597 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb67 = (x_597 == 1.0f);
    let x_599 : bool = u_xlatb67;
    if (x_599) {
      let x_602 : vec4<f32> = u_xlat2;
      let x_606 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_606);
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.x, x_609.y);
      let x_612 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_624 : vec3<f32> = txVec0;
      let x_626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_624.xy, x_624.z);
      u_xlat9.x = x_626;
      let x_629 : vec4<f32> = u_xlat3;
      let x_630 : vec2<f32> = vec2<f32>(x_629.z, x_629.w);
      let x_632 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_630.x, x_630.y, x_632);
      let x_639 : vec3<f32> = txVec1;
      let x_641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_639.xy, x_639.z);
      u_xlat9.y = x_641;
      let x_643 : vec4<f32> = u_xlat2;
      let x_647 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_643.x, x_643.y, x_643.x, x_643.y) + x_647);
      let x_650 : vec4<f32> = u_xlat3;
      let x_651 : vec2<f32> = vec2<f32>(x_650.x, x_650.y);
      let x_653 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_651.x, x_651.y, x_653);
      let x_660 : vec3<f32> = txVec2;
      let x_662 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_660.xy, x_660.z);
      u_xlat9.z = x_662;
      let x_665 : vec4<f32> = u_xlat3;
      let x_666 : vec2<f32> = vec2<f32>(x_665.z, x_665.w);
      let x_668 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_666.x, x_666.y, x_668);
      let x_675 : vec3<f32> = txVec3;
      let x_677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_675.xy, x_675.z);
      u_xlat9.w = x_677;
      let x_679 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_679, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_686 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb68 = (x_686 == 2.0f);
      let x_688 : bool = u_xlatb68;
      if (x_688) {
        let x_691 : vec4<f32> = u_xlat2;
        let x_694 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_699 : vec2<f32> = ((vec2<f32>(x_691.x, x_691.y) * vec2<f32>(x_694.z, x_694.w)) + vec2<f32>(0.5f, 0.5f));
        let x_700 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_699.x, x_699.y, x_700.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat3;
        let x_704 : vec2<f32> = floor(vec2<f32>(x_702.x, x_702.y));
        let x_705 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_704.x, x_704.y, x_705.z, x_705.w);
        let x_709 : vec4<f32> = u_xlat2;
        let x_712 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_715 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_709.x, x_709.y) * vec2<f32>(x_712.z, x_712.w)) + -(vec2<f32>(x_715.x, x_715.y)));
        let x_719 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_719.x, x_719.x, x_719.y, x_719.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_723 : vec4<f32> = u_xlat9;
        let x_725 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_723.x, x_723.x, x_723.z, x_723.z) * vec4<f32>(x_725.x, x_725.x, x_725.z, x_725.z));
        let x_728 : vec4<f32> = u_xlat10;
        let x_732 : vec2<f32> = (vec2<f32>(x_728.y, x_728.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_733 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_732.x, x_733.y, x_732.y, x_733.w);
        let x_735 : vec4<f32> = u_xlat10;
        let x_738 : vec2<f32> = u_xlat47;
        let x_740 : vec2<f32> = ((vec2<f32>(x_735.x, x_735.z) * vec2<f32>(0.5f, 0.5f)) + -(x_738));
        let x_741 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
        let x_744 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_744) + vec2<f32>(1.0f, 1.0f));
        let x_749 : vec2<f32> = u_xlat47;
        let x_751 : vec2<f32> = min(x_749, vec2<f32>(0.0f, 0.0f));
        let x_752 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_751.x, x_751.y, x_752.z, x_752.w);
        let x_754 : vec4<f32> = u_xlat11;
        let x_757 : vec4<f32> = u_xlat11;
        let x_760 : vec2<f32> = u_xlat54;
        let x_761 : vec2<f32> = ((-(vec2<f32>(x_754.x, x_754.y)) * vec2<f32>(x_757.x, x_757.y)) + x_760);
        let x_762 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
        let x_764 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_764, vec2<f32>(0.0f, 0.0f));
        let x_766 : vec2<f32> = u_xlat47;
        let x_768 : vec2<f32> = u_xlat47;
        let x_770 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_766) * x_768) + vec2<f32>(x_770.y, x_770.w));
        let x_773 : vec4<f32> = u_xlat11;
        let x_775 : vec2<f32> = (vec2<f32>(x_773.x, x_773.y) + vec2<f32>(1.0f, 1.0f));
        let x_776 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_775.x, x_775.y, x_776.z, x_776.w);
        let x_778 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_778 + vec2<f32>(1.0f, 1.0f));
        let x_781 : vec4<f32> = u_xlat10;
        let x_785 : vec2<f32> = (vec2<f32>(x_781.x, x_781.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_786 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_785.x, x_785.y, x_786.z, x_786.w);
        let x_788 : vec2<f32> = u_xlat54;
        let x_789 : vec2<f32> = (x_788 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_790 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_789.x, x_789.y, x_790.z, x_790.w);
        let x_792 : vec4<f32> = u_xlat11;
        let x_794 : vec2<f32> = (vec2<f32>(x_792.x, x_792.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_795 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_794.x, x_794.y, x_795.z, x_795.w);
        let x_798 : vec2<f32> = u_xlat47;
        let x_799 : vec2<f32> = (x_798 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_800 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_799.x, x_799.y, x_800.z, x_800.w);
        let x_802 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_802.y, x_802.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_806 : f32 = u_xlat11.x;
        u_xlat12.z = x_806;
        let x_809 : f32 = u_xlat47.x;
        u_xlat12.w = x_809;
        let x_812 : f32 = u_xlat13.x;
        u_xlat10.z = x_812;
        let x_815 : f32 = u_xlat9.x;
        u_xlat10.w = x_815;
        let x_818 : vec4<f32> = u_xlat10;
        let x_820 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_818.z, x_818.w, x_818.x, x_818.z) + vec4<f32>(x_820.z, x_820.w, x_820.x, x_820.z));
        let x_824 : f32 = u_xlat12.y;
        u_xlat11.z = x_824;
        let x_827 : f32 = u_xlat47.y;
        u_xlat11.w = x_827;
        let x_830 : f32 = u_xlat10.y;
        u_xlat13.z = x_830;
        let x_833 : f32 = u_xlat9.z;
        u_xlat13.w = x_833;
        let x_835 : vec4<f32> = u_xlat11;
        let x_837 : vec4<f32> = u_xlat13;
        let x_839 : vec3<f32> = (vec3<f32>(x_835.z, x_835.y, x_835.w) + vec3<f32>(x_837.z, x_837.y, x_837.w));
        let x_840 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_839.x, x_839.y, x_839.z, x_840.w);
        let x_842 : vec4<f32> = u_xlat10;
        let x_844 : vec4<f32> = u_xlat14;
        let x_846 : vec3<f32> = (vec3<f32>(x_842.x, x_842.z, x_842.w) / vec3<f32>(x_844.z, x_844.w, x_844.y));
        let x_847 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_846.x, x_846.y, x_846.z, x_847.w);
        let x_849 : vec4<f32> = u_xlat10;
        let x_855 : vec3<f32> = (vec3<f32>(x_849.x, x_849.y, x_849.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_856 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
        let x_858 : vec4<f32> = u_xlat13;
        let x_860 : vec4<f32> = u_xlat9;
        let x_862 : vec3<f32> = (vec3<f32>(x_858.z, x_858.y, x_858.w) / vec3<f32>(x_860.x, x_860.y, x_860.z));
        let x_863 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_862.x, x_862.y, x_862.z, x_863.w);
        let x_865 : vec4<f32> = u_xlat11;
        let x_867 : vec3<f32> = (vec3<f32>(x_865.x, x_865.y, x_865.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_868 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_867.x, x_867.y, x_867.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat10;
        let x_873 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_875 : vec3<f32> = (vec3<f32>(x_870.y, x_870.x, x_870.z) * vec3<f32>(x_873.x, x_873.x, x_873.x));
        let x_876 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_875.x, x_875.y, x_875.z, x_876.w);
        let x_878 : vec4<f32> = u_xlat11;
        let x_881 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_883 : vec3<f32> = (vec3<f32>(x_878.x, x_878.y, x_878.z) * vec3<f32>(x_881.y, x_881.y, x_881.y));
        let x_884 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_883.x, x_883.y, x_883.z, x_884.w);
        let x_887 : f32 = u_xlat11.x;
        u_xlat10.w = x_887;
        let x_889 : vec4<f32> = u_xlat3;
        let x_892 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_895 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_889.x, x_889.y, x_889.x, x_889.y) * vec4<f32>(x_892.x, x_892.y, x_892.x, x_892.y)) + vec4<f32>(x_895.y, x_895.w, x_895.x, x_895.w));
        let x_898 : vec4<f32> = u_xlat3;
        let x_901 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_904 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_898.x, x_898.y) * vec2<f32>(x_901.x, x_901.y)) + vec2<f32>(x_904.z, x_904.w));
        let x_908 : f32 = u_xlat10.y;
        u_xlat11.w = x_908;
        let x_910 : vec4<f32> = u_xlat11;
        let x_911 : vec2<f32> = vec2<f32>(x_910.y, x_910.z);
        let x_912 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_912.x, x_911.x, x_912.z, x_911.y);
        let x_914 : vec4<f32> = u_xlat3;
        let x_917 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_920 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_914.x, x_914.y, x_914.x, x_914.y) * vec4<f32>(x_917.x, x_917.y, x_917.x, x_917.y)) + vec4<f32>(x_920.x, x_920.y, x_920.z, x_920.y));
        let x_923 : vec4<f32> = u_xlat3;
        let x_926 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_929 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_923.x, x_923.y, x_923.x, x_923.y) * vec4<f32>(x_926.x, x_926.y, x_926.x, x_926.y)) + vec4<f32>(x_929.w, x_929.y, x_929.w, x_929.z));
        let x_932 : vec4<f32> = u_xlat3;
        let x_935 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_938 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_932.x, x_932.y, x_932.x, x_932.y) * vec4<f32>(x_935.x, x_935.y, x_935.x, x_935.y)) + vec4<f32>(x_938.x, x_938.w, x_938.z, x_938.w));
        let x_942 : vec4<f32> = u_xlat9;
        let x_944 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_942.x, x_942.x, x_942.x, x_942.y) * vec4<f32>(x_944.z, x_944.w, x_944.y, x_944.z));
        let x_948 : vec4<f32> = u_xlat9;
        let x_950 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_948.y, x_948.y, x_948.z, x_948.z) * x_950);
        let x_954 : f32 = u_xlat9.z;
        let x_956 : f32 = u_xlat14.y;
        u_xlat68 = (x_954 * x_956);
        let x_959 : vec4<f32> = u_xlat12;
        let x_960 : vec2<f32> = vec2<f32>(x_959.x, x_959.y);
        let x_962 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec4;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat3.x = x_971;
        let x_974 : vec4<f32> = u_xlat12;
        let x_975 : vec2<f32> = vec2<f32>(x_974.z, x_974.w);
        let x_977 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_975.x, x_975.y, x_977);
        let x_985 : vec3<f32> = txVec5;
        let x_987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_985.xy, x_985.z);
        u_xlat25 = x_987;
        let x_988 : f32 = u_xlat25;
        let x_990 : f32 = u_xlat15.y;
        u_xlat25 = (x_988 * x_990);
        let x_993 : f32 = u_xlat15.x;
        let x_995 : f32 = u_xlat3.x;
        let x_997 : f32 = u_xlat25;
        u_xlat3.x = ((x_993 * x_995) + x_997);
        let x_1001 : vec2<f32> = u_xlat47;
        let x_1003 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec6;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1010.xy, x_1010.z);
        u_xlat25 = x_1012;
        let x_1014 : f32 = u_xlat15.z;
        let x_1015 : f32 = u_xlat25;
        let x_1018 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1014 * x_1015) + x_1018);
        let x_1022 : vec4<f32> = u_xlat11;
        let x_1023 : vec2<f32> = vec2<f32>(x_1022.x, x_1022.y);
        let x_1025 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1023.x, x_1023.y, x_1025);
        let x_1032 : vec3<f32> = txVec7;
        let x_1034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1032.xy, x_1032.z);
        u_xlat25 = x_1034;
        let x_1036 : f32 = u_xlat15.w;
        let x_1037 : f32 = u_xlat25;
        let x_1040 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1036 * x_1037) + x_1040);
        let x_1044 : vec4<f32> = u_xlat13;
        let x_1045 : vec2<f32> = vec2<f32>(x_1044.x, x_1044.y);
        let x_1047 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1045.x, x_1045.y, x_1047);
        let x_1054 : vec3<f32> = txVec8;
        let x_1056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1054.xy, x_1054.z);
        u_xlat25 = x_1056;
        let x_1058 : f32 = u_xlat16.x;
        let x_1059 : f32 = u_xlat25;
        let x_1062 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1058 * x_1059) + x_1062);
        let x_1066 : vec4<f32> = u_xlat13;
        let x_1067 : vec2<f32> = vec2<f32>(x_1066.z, x_1066.w);
        let x_1069 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1067.x, x_1067.y, x_1069);
        let x_1076 : vec3<f32> = txVec9;
        let x_1078 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1076.xy, x_1076.z);
        u_xlat25 = x_1078;
        let x_1080 : f32 = u_xlat16.y;
        let x_1081 : f32 = u_xlat25;
        let x_1084 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1080 * x_1081) + x_1084);
        let x_1088 : vec4<f32> = u_xlat11;
        let x_1089 : vec2<f32> = vec2<f32>(x_1088.z, x_1088.w);
        let x_1091 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1089.x, x_1089.y, x_1091);
        let x_1098 : vec3<f32> = txVec10;
        let x_1100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1098.xy, x_1098.z);
        u_xlat25 = x_1100;
        let x_1102 : f32 = u_xlat16.z;
        let x_1103 : f32 = u_xlat25;
        let x_1106 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1102 * x_1103) + x_1106);
        let x_1110 : vec4<f32> = u_xlat10;
        let x_1111 : vec2<f32> = vec2<f32>(x_1110.x, x_1110.y);
        let x_1113 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1111.x, x_1111.y, x_1113);
        let x_1120 : vec3<f32> = txVec11;
        let x_1122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1120.xy, x_1120.z);
        u_xlat25 = x_1122;
        let x_1124 : f32 = u_xlat16.w;
        let x_1125 : f32 = u_xlat25;
        let x_1128 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1124 * x_1125) + x_1128);
        let x_1132 : vec4<f32> = u_xlat10;
        let x_1133 : vec2<f32> = vec2<f32>(x_1132.z, x_1132.w);
        let x_1135 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1133.x, x_1133.y, x_1135);
        let x_1142 : vec3<f32> = txVec12;
        let x_1144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1142.xy, x_1142.z);
        u_xlat25 = x_1144;
        let x_1145 : f32 = u_xlat68;
        let x_1146 : f32 = u_xlat25;
        let x_1149 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1145 * x_1146) + x_1149);
      } else {
        let x_1152 : vec4<f32> = u_xlat2;
        let x_1155 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1158 : vec2<f32> = ((vec2<f32>(x_1152.x, x_1152.y) * vec2<f32>(x_1155.z, x_1155.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1159 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1158.x, x_1158.y, x_1159.z, x_1159.w);
        let x_1161 : vec4<f32> = u_xlat3;
        let x_1163 : vec2<f32> = floor(vec2<f32>(x_1161.x, x_1161.y));
        let x_1164 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1163.x, x_1163.y, x_1164.z, x_1164.w);
        let x_1166 : vec4<f32> = u_xlat2;
        let x_1169 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1172 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1166.x, x_1166.y) * vec2<f32>(x_1169.z, x_1169.w)) + -(vec2<f32>(x_1172.x, x_1172.y)));
        let x_1176 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1176.x, x_1176.x, x_1176.y, x_1176.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1179 : vec4<f32> = u_xlat9;
        let x_1181 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1179.x, x_1179.x, x_1179.z, x_1179.z) * vec4<f32>(x_1181.x, x_1181.x, x_1181.z, x_1181.z));
        let x_1184 : vec4<f32> = u_xlat10;
        let x_1188 : vec2<f32> = (vec2<f32>(x_1184.y, x_1184.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1189 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1189.x, x_1188.x, x_1189.z, x_1188.y);
        let x_1191 : vec4<f32> = u_xlat10;
        let x_1194 : vec2<f32> = u_xlat47;
        let x_1196 : vec2<f32> = ((vec2<f32>(x_1191.x, x_1191.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1194));
        let x_1197 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1196.x, x_1197.y, x_1196.y, x_1197.w);
        let x_1199 : vec2<f32> = u_xlat47;
        let x_1201 : vec2<f32> = (-(x_1199) + vec2<f32>(1.0f, 1.0f));
        let x_1202 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1201.x, x_1201.y, x_1202.z, x_1202.w);
        let x_1204 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1204, vec2<f32>(0.0f, 0.0f));
        let x_1206 : vec2<f32> = u_xlat54;
        let x_1208 : vec2<f32> = u_xlat54;
        let x_1210 : vec4<f32> = u_xlat10;
        let x_1212 : vec2<f32> = ((-(x_1206) * x_1208) + vec2<f32>(x_1210.x, x_1210.y));
        let x_1213 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1212.x, x_1212.y, x_1213.z, x_1213.w);
        let x_1215 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1215, vec2<f32>(0.0f, 0.0f));
        let x_1218 : vec2<f32> = u_xlat54;
        let x_1220 : vec2<f32> = u_xlat54;
        let x_1222 : vec4<f32> = u_xlat9;
        let x_1224 : vec2<f32> = ((-(x_1218) * x_1220) + vec2<f32>(x_1222.y, x_1222.w));
        let x_1225 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1224.x, x_1225.y, x_1224.y);
        let x_1227 : vec4<f32> = u_xlat10;
        let x_1230 : vec2<f32> = (vec2<f32>(x_1227.x, x_1227.y) + vec2<f32>(2.0f, 2.0f));
        let x_1231 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1230.x, x_1230.y, x_1231.z, x_1231.w);
        let x_1233 : vec3<f32> = u_xlat31;
        let x_1235 : vec2<f32> = (vec2<f32>(x_1233.x, x_1233.z) + vec2<f32>(2.0f, 2.0f));
        let x_1236 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1236.x, x_1235.x, x_1236.z, x_1235.y);
        let x_1239 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1239 * 0.081632003f);
        let x_1243 : vec4<f32> = u_xlat9;
        let x_1246 : vec3<f32> = (vec3<f32>(x_1243.z, x_1243.x, x_1243.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1247 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1246.x, x_1246.y, x_1246.z, x_1247.w);
        let x_1249 : vec4<f32> = u_xlat10;
        let x_1252 : vec2<f32> = (vec2<f32>(x_1249.x, x_1249.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1253 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1252.x, x_1252.y, x_1253.z, x_1253.w);
        let x_1256 : f32 = u_xlat13.y;
        u_xlat12.x = x_1256;
        let x_1258 : vec2<f32> = u_xlat47;
        let x_1265 : vec2<f32> = ((vec2<f32>(x_1258.x, x_1258.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1266 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1266.x, x_1265.x, x_1266.z, x_1265.y);
        let x_1268 : vec2<f32> = u_xlat47;
        let x_1272 : vec2<f32> = ((vec2<f32>(x_1268.x, x_1268.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1273 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1272.x, x_1273.y, x_1272.y, x_1273.w);
        let x_1276 : f32 = u_xlat9.x;
        u_xlat10.y = x_1276;
        let x_1279 : f32 = u_xlat11.y;
        u_xlat10.w = x_1279;
        let x_1281 : vec4<f32> = u_xlat10;
        let x_1282 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1281 + x_1282);
        let x_1284 : vec2<f32> = u_xlat47;
        let x_1287 : vec2<f32> = ((vec2<f32>(x_1284.y, x_1284.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1288 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1288.x, x_1287.x, x_1288.z, x_1287.y);
        let x_1290 : vec2<f32> = u_xlat47;
        let x_1293 : vec2<f32> = ((vec2<f32>(x_1290.y, x_1290.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1294 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1293.x, x_1294.y, x_1293.y, x_1294.w);
        let x_1297 : f32 = u_xlat9.y;
        u_xlat11.y = x_1297;
        let x_1299 : vec4<f32> = u_xlat11;
        let x_1300 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1299 + x_1300);
        let x_1302 : vec4<f32> = u_xlat10;
        let x_1303 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1302 / x_1303);
        let x_1305 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1305 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1311 : vec4<f32> = u_xlat11;
        let x_1312 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1311 / x_1312);
        let x_1314 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1314 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1316 : vec4<f32> = u_xlat10;
        let x_1319 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1316.w, x_1316.x, x_1316.y, x_1316.z) * vec4<f32>(x_1319.x, x_1319.x, x_1319.x, x_1319.x));
        let x_1322 : vec4<f32> = u_xlat11;
        let x_1325 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1322.x, x_1322.w, x_1322.y, x_1322.z) * vec4<f32>(x_1325.y, x_1325.y, x_1325.y, x_1325.y));
        let x_1328 : vec4<f32> = u_xlat10;
        let x_1329 : vec3<f32> = vec3<f32>(x_1328.y, x_1328.z, x_1328.w);
        let x_1330 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1329.x, x_1330.y, x_1329.y, x_1329.z);
        let x_1333 : f32 = u_xlat11.x;
        u_xlat13.y = x_1333;
        let x_1335 : vec4<f32> = u_xlat3;
        let x_1338 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1341 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1335.x, x_1335.y, x_1335.x, x_1335.y) * vec4<f32>(x_1338.x, x_1338.y, x_1338.x, x_1338.y)) + vec4<f32>(x_1341.x, x_1341.y, x_1341.z, x_1341.y));
        let x_1344 : vec4<f32> = u_xlat3;
        let x_1347 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1350 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1344.x, x_1344.y) * vec2<f32>(x_1347.x, x_1347.y)) + vec2<f32>(x_1350.w, x_1350.y));
        let x_1354 : f32 = u_xlat13.y;
        u_xlat10.y = x_1354;
        let x_1357 : f32 = u_xlat11.z;
        u_xlat13.y = x_1357;
        let x_1359 : vec4<f32> = u_xlat3;
        let x_1362 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1365 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1359.x, x_1359.y, x_1359.x, x_1359.y) * vec4<f32>(x_1362.x, x_1362.y, x_1362.x, x_1362.y)) + vec4<f32>(x_1365.x, x_1365.y, x_1365.z, x_1365.y));
        let x_1368 : vec4<f32> = u_xlat3;
        let x_1371 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1374 : vec4<f32> = u_xlat13;
        let x_1376 : vec2<f32> = ((vec2<f32>(x_1368.x, x_1368.y) * vec2<f32>(x_1371.x, x_1371.y)) + vec2<f32>(x_1374.w, x_1374.y));
        let x_1377 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1376.x, x_1376.y, x_1377.z, x_1377.w);
        let x_1380 : f32 = u_xlat13.y;
        u_xlat10.z = x_1380;
        let x_1383 : vec4<f32> = u_xlat3;
        let x_1386 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1389 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1383.x, x_1383.y, x_1383.x, x_1383.y) * vec4<f32>(x_1386.x, x_1386.y, x_1386.x, x_1386.y)) + vec4<f32>(x_1389.x, x_1389.y, x_1389.x, x_1389.z));
        let x_1393 : f32 = u_xlat11.w;
        u_xlat13.y = x_1393;
        let x_1396 : vec4<f32> = u_xlat3;
        let x_1399 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1402 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1396.x, x_1396.y, x_1396.x, x_1396.y) * vec4<f32>(x_1399.x, x_1399.y, x_1399.x, x_1399.y)) + vec4<f32>(x_1402.x, x_1402.y, x_1402.z, x_1402.y));
        let x_1406 : vec4<f32> = u_xlat3;
        let x_1409 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1412 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1406.x, x_1406.y) * vec2<f32>(x_1409.x, x_1409.y)) + vec2<f32>(x_1412.w, x_1412.y));
        let x_1416 : f32 = u_xlat13.y;
        u_xlat10.w = x_1416;
        let x_1419 : vec4<f32> = u_xlat3;
        let x_1422 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1425 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1419.x, x_1419.y) * vec2<f32>(x_1422.x, x_1422.y)) + vec2<f32>(x_1425.x, x_1425.w));
        let x_1428 : vec4<f32> = u_xlat13;
        let x_1429 : vec3<f32> = vec3<f32>(x_1428.x, x_1428.z, x_1428.w);
        let x_1430 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1429.x, x_1430.y, x_1429.y, x_1429.z);
        let x_1432 : vec4<f32> = u_xlat3;
        let x_1435 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1438 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1432.x, x_1432.y, x_1432.x, x_1432.y) * vec4<f32>(x_1435.x, x_1435.y, x_1435.x, x_1435.y)) + vec4<f32>(x_1438.x, x_1438.y, x_1438.z, x_1438.y));
        let x_1442 : vec4<f32> = u_xlat3;
        let x_1445 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1448 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1442.x, x_1442.y) * vec2<f32>(x_1445.x, x_1445.y)) + vec2<f32>(x_1448.w, x_1448.y));
        let x_1452 : f32 = u_xlat10.x;
        u_xlat11.x = x_1452;
        let x_1454 : vec4<f32> = u_xlat3;
        let x_1457 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1460 : vec4<f32> = u_xlat11;
        let x_1462 : vec2<f32> = ((vec2<f32>(x_1454.x, x_1454.y) * vec2<f32>(x_1457.x, x_1457.y)) + vec2<f32>(x_1460.x, x_1460.y));
        let x_1463 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1462.x, x_1462.y, x_1463.z, x_1463.w);
        let x_1466 : vec4<f32> = u_xlat9;
        let x_1468 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1466.x, x_1466.x, x_1466.x, x_1466.x) * x_1468);
        let x_1471 : vec4<f32> = u_xlat9;
        let x_1473 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1471.y, x_1471.y, x_1471.y, x_1471.y) * x_1473);
        let x_1476 : vec4<f32> = u_xlat9;
        let x_1478 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1476.z, x_1476.z, x_1476.z, x_1476.z) * x_1478);
        let x_1480 : vec4<f32> = u_xlat9;
        let x_1482 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1480.w, x_1480.w, x_1480.w, x_1480.w) * x_1482);
        let x_1485 : vec4<f32> = u_xlat14;
        let x_1486 : vec2<f32> = vec2<f32>(x_1485.x, x_1485.y);
        let x_1488 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1486.x, x_1486.y, x_1488);
        let x_1495 : vec3<f32> = txVec13;
        let x_1497 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1495.xy, x_1495.z);
        u_xlat68 = x_1497;
        let x_1499 : vec4<f32> = u_xlat14;
        let x_1500 : vec2<f32> = vec2<f32>(x_1499.z, x_1499.w);
        let x_1502 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1500.x, x_1500.y, x_1502);
        let x_1510 : vec3<f32> = txVec14;
        let x_1512 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1510.xy, x_1510.z);
        u_xlat70 = x_1512;
        let x_1513 : f32 = u_xlat70;
        let x_1515 : f32 = u_xlat19.y;
        u_xlat70 = (x_1513 * x_1515);
        let x_1518 : f32 = u_xlat19.x;
        let x_1519 : f32 = u_xlat68;
        let x_1521 : f32 = u_xlat70;
        u_xlat68 = ((x_1518 * x_1519) + x_1521);
        let x_1524 : vec2<f32> = u_xlat47;
        let x_1526 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1524.x, x_1524.y, x_1526);
        let x_1533 : vec3<f32> = txVec15;
        let x_1535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1533.xy, x_1533.z);
        u_xlat47.x = x_1535;
        let x_1538 : f32 = u_xlat19.z;
        let x_1540 : f32 = u_xlat47.x;
        let x_1542 : f32 = u_xlat68;
        u_xlat68 = ((x_1538 * x_1540) + x_1542);
        let x_1545 : vec4<f32> = u_xlat17;
        let x_1546 : vec2<f32> = vec2<f32>(x_1545.x, x_1545.y);
        let x_1548 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1546.x, x_1546.y, x_1548);
        let x_1555 : vec3<f32> = txVec16;
        let x_1557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1555.xy, x_1555.z);
        u_xlat47.x = x_1557;
        let x_1560 : f32 = u_xlat19.w;
        let x_1562 : f32 = u_xlat47.x;
        let x_1564 : f32 = u_xlat68;
        u_xlat68 = ((x_1560 * x_1562) + x_1564);
        let x_1567 : vec4<f32> = u_xlat15;
        let x_1568 : vec2<f32> = vec2<f32>(x_1567.x, x_1567.y);
        let x_1570 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1568.x, x_1568.y, x_1570);
        let x_1577 : vec3<f32> = txVec17;
        let x_1579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1577.xy, x_1577.z);
        u_xlat47.x = x_1579;
        let x_1582 : f32 = u_xlat20.x;
        let x_1584 : f32 = u_xlat47.x;
        let x_1586 : f32 = u_xlat68;
        u_xlat68 = ((x_1582 * x_1584) + x_1586);
        let x_1589 : vec4<f32> = u_xlat15;
        let x_1590 : vec2<f32> = vec2<f32>(x_1589.z, x_1589.w);
        let x_1592 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1590.x, x_1590.y, x_1592);
        let x_1599 : vec3<f32> = txVec18;
        let x_1601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1599.xy, x_1599.z);
        u_xlat47.x = x_1601;
        let x_1604 : f32 = u_xlat20.y;
        let x_1606 : f32 = u_xlat47.x;
        let x_1608 : f32 = u_xlat68;
        u_xlat68 = ((x_1604 * x_1606) + x_1608);
        let x_1611 : vec4<f32> = u_xlat16;
        let x_1612 : vec2<f32> = vec2<f32>(x_1611.x, x_1611.y);
        let x_1614 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1612.x, x_1612.y, x_1614);
        let x_1621 : vec3<f32> = txVec19;
        let x_1623 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1621.xy, x_1621.z);
        u_xlat47.x = x_1623;
        let x_1626 : f32 = u_xlat20.z;
        let x_1628 : f32 = u_xlat47.x;
        let x_1630 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat17;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.z, x_1633.w);
        let x_1636 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec20;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1643.xy, x_1643.z);
        u_xlat47.x = x_1645;
        let x_1648 : f32 = u_xlat20.w;
        let x_1650 : f32 = u_xlat47.x;
        let x_1652 : f32 = u_xlat68;
        u_xlat68 = ((x_1648 * x_1650) + x_1652);
        let x_1655 : vec4<f32> = u_xlat18;
        let x_1656 : vec2<f32> = vec2<f32>(x_1655.x, x_1655.y);
        let x_1658 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1656.x, x_1656.y, x_1658);
        let x_1665 : vec3<f32> = txVec21;
        let x_1667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1665.xy, x_1665.z);
        u_xlat47.x = x_1667;
        let x_1670 : f32 = u_xlat21.x;
        let x_1672 : f32 = u_xlat47.x;
        let x_1674 : f32 = u_xlat68;
        u_xlat68 = ((x_1670 * x_1672) + x_1674);
        let x_1677 : vec4<f32> = u_xlat18;
        let x_1678 : vec2<f32> = vec2<f32>(x_1677.z, x_1677.w);
        let x_1680 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1678.x, x_1678.y, x_1680);
        let x_1687 : vec3<f32> = txVec22;
        let x_1689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1687.xy, x_1687.z);
        u_xlat47.x = x_1689;
        let x_1692 : f32 = u_xlat21.y;
        let x_1694 : f32 = u_xlat47.x;
        let x_1696 : f32 = u_xlat68;
        u_xlat68 = ((x_1692 * x_1694) + x_1696);
        let x_1699 : vec2<f32> = u_xlat32;
        let x_1701 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1699.x, x_1699.y, x_1701);
        let x_1708 : vec3<f32> = txVec23;
        let x_1710 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1708.xy, x_1708.z);
        u_xlat47.x = x_1710;
        let x_1713 : f32 = u_xlat21.z;
        let x_1715 : f32 = u_xlat47.x;
        let x_1717 : f32 = u_xlat68;
        u_xlat68 = ((x_1713 * x_1715) + x_1717);
        let x_1720 : vec2<f32> = u_xlat60;
        let x_1722 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1720.x, x_1720.y, x_1722);
        let x_1729 : vec3<f32> = txVec24;
        let x_1731 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1729.xy, x_1729.z);
        u_xlat47.x = x_1731;
        let x_1734 : f32 = u_xlat21.w;
        let x_1736 : f32 = u_xlat47.x;
        let x_1738 : f32 = u_xlat68;
        u_xlat68 = ((x_1734 * x_1736) + x_1738);
        let x_1741 : vec4<f32> = u_xlat13;
        let x_1742 : vec2<f32> = vec2<f32>(x_1741.x, x_1741.y);
        let x_1744 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1742.x, x_1742.y, x_1744);
        let x_1751 : vec3<f32> = txVec25;
        let x_1753 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1751.xy, x_1751.z);
        u_xlat47.x = x_1753;
        let x_1756 : f32 = u_xlat9.x;
        let x_1758 : f32 = u_xlat47.x;
        let x_1760 : f32 = u_xlat68;
        u_xlat68 = ((x_1756 * x_1758) + x_1760);
        let x_1763 : vec4<f32> = u_xlat13;
        let x_1764 : vec2<f32> = vec2<f32>(x_1763.z, x_1763.w);
        let x_1766 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1764.x, x_1764.y, x_1766);
        let x_1773 : vec3<f32> = txVec26;
        let x_1775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1773.xy, x_1773.z);
        u_xlat47.x = x_1775;
        let x_1778 : f32 = u_xlat9.y;
        let x_1780 : f32 = u_xlat47.x;
        let x_1782 : f32 = u_xlat68;
        u_xlat68 = ((x_1778 * x_1780) + x_1782);
        let x_1785 : vec2<f32> = u_xlat55;
        let x_1787 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1785.x, x_1785.y, x_1787);
        let x_1794 : vec3<f32> = txVec27;
        let x_1796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1794.xy, x_1794.z);
        u_xlat47.x = x_1796;
        let x_1799 : f32 = u_xlat9.z;
        let x_1801 : f32 = u_xlat47.x;
        let x_1803 : f32 = u_xlat68;
        u_xlat68 = ((x_1799 * x_1801) + x_1803);
        let x_1806 : vec4<f32> = u_xlat3;
        let x_1807 : vec2<f32> = vec2<f32>(x_1806.x, x_1806.y);
        let x_1809 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1807.x, x_1807.y, x_1809);
        let x_1816 : vec3<f32> = txVec28;
        let x_1818 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1816.xy, x_1816.z);
        u_xlat3.x = x_1818;
        let x_1821 : f32 = u_xlat9.w;
        let x_1823 : f32 = u_xlat3.x;
        let x_1825 : f32 = u_xlat68;
        u_xlat67 = ((x_1821 * x_1823) + x_1825);
      }
    }
  } else {
    let x_1829 : vec4<f32> = u_xlat2;
    let x_1830 : vec2<f32> = vec2<f32>(x_1829.x, x_1829.y);
    let x_1832 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1830.x, x_1830.y, x_1832);
    let x_1839 : vec3<f32> = txVec29;
    let x_1841 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1839.xy, x_1839.z);
    u_xlat67 = x_1841;
  }
  let x_1843 : f32 = x_401.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1843) + 1.0f);
  let x_1846 : f32 = u_xlat67;
  let x_1848 : f32 = x_401.x_MainLightShadowParams.x;
  let x_1850 : f32 = u_xlat68;
  u_xlat67 = ((x_1846 * x_1848) + x_1850);
  let x_1854 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1854);
  let x_1858 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1858 >= 1.0f);
  let x_1860 : bool = u_xlatb25;
  let x_1861 : bool = u_xlatb3;
  u_xlatb3 = (x_1860 | x_1861);
  let x_1863 : bool = u_xlatb3;
  let x_1864 : f32 = u_xlat67;
  u_xlat67 = select(x_1864, 1.0f, x_1863);
  let x_1866 : vec3<f32> = u_xlat1;
  let x_1868 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1866, -(vec3<f32>(x_1868.x, x_1868.y, x_1868.z)));
  let x_1874 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1874, 0.0f, 1.0f);
  let x_1878 : f32 = u_xlat67;
  let x_1881 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1878, x_1878, x_1878) * vec3<f32>(x_1881.x, x_1881.y, x_1881.z));
  let x_1884 : vec3<f32> = u_xlat23;
  let x_1885 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1884 * vec3<f32>(x_1885.x, x_1885.x, x_1885.x));
  let x_1888 : vec3<f32> = u_xlat1;
  let x_1889 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1888 * vec3<f32>(x_1889.x, x_1889.y, x_1889.z));
  let x_1893 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1893 < 0.0f);
  let x_1896 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1896 + 1.0f);
  let x_1898 : bool = u_xlatb67;
  if (x_1898) {
    let x_1902 : f32 = u_xlat25;
    x_1899 = x_1902;
  } else {
    let x_1905 : f32 = x_95.unity_LODFade.x;
    x_1899 = x_1905;
  }
  let x_1906 : f32 = x_1899;
  u_xlat67 = x_1906;
  let x_1907 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1907);
  let x_1909 : vec4<f32> = u_xlat4;
  let x_1914 : vec4<f32> = x_160.x_ScreenParams;
  let x_1916 : vec3<f32> = (abs(vec3<f32>(x_1909.x, x_1909.y, x_1909.z)) * vec3<f32>(x_1914.x, x_1914.y, x_1914.x));
  let x_1917 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1916.x, x_1916.y, x_1916.z, x_1917.w);
  let x_1922 : vec4<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(vec3<f32>(x_1922.x, x_1922.y, x_1922.z));
  let x_1927 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1927 * 1025u);
  let x_1931 : u32 = u_xlatu47;
  u_xlatu69 = (x_1931 >> 6u);
  let x_1935 : u32 = u_xlatu69;
  let x_1936 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1935 ^ x_1936));
  let x_1939 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1939) * 9u);
  let x_1943 : u32 = u_xlatu47;
  u_xlatu69 = (x_1943 >> 11u);
  let x_1946 : u32 = u_xlatu69;
  let x_1947 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1946 ^ x_1947));
  let x_1950 : i32 = u_xlati47;
  u_xlati47 = (x_1950 * 32769i);
  let x_1953 : i32 = u_xlati47;
  let x_1956 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1953) ^ x_1956));
  let x_1959 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1959) * 1025u);
  let x_1962 : u32 = u_xlatu47;
  u_xlatu69 = (x_1962 >> 6u);
  let x_1964 : u32 = u_xlatu69;
  let x_1965 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1964 ^ x_1965));
  let x_1968 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1968) * 9u);
  let x_1971 : u32 = u_xlatu47;
  u_xlatu69 = (x_1971 >> 11u);
  let x_1973 : u32 = u_xlatu69;
  let x_1974 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1973 ^ x_1974));
  let x_1977 : i32 = u_xlati47;
  u_xlati47 = (x_1977 * 32769i);
  let x_1979 : i32 = u_xlati47;
  let x_1982 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1979) ^ x_1982));
  let x_1985 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1985) * 1025u);
  let x_1988 : u32 = u_xlatu47;
  u_xlatu69 = (x_1988 >> 6u);
  let x_1990 : u32 = u_xlatu69;
  let x_1991 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1990 ^ x_1991));
  let x_1994 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1994) * 9u);
  let x_1997 : u32 = u_xlatu47;
  u_xlatu69 = (x_1997 >> 11u);
  let x_1999 : u32 = u_xlatu69;
  let x_2000 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1999 ^ x_2000));
  let x_2003 : i32 = u_xlati47;
  u_xlati47 = (x_2003 * 32769i);
  param = 1065353216i;
  let x_2009 : i32 = u_xlati47;
  param_1 = x_2009;
  param_2 = 0i;
  param_3 = 23i;
  let x_2012 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_2012);
  let x_2016 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2016 + -1.0f);
  let x_2021 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_2021) + 1.0f);
  let x_2024 : bool = u_xlatb25;
  if (x_2024) {
    let x_2029 : f32 = u_xlat47.x;
    x_2025 = x_2029;
  } else {
    let x_2031 : f32 = u_xlat69;
    x_2025 = x_2031;
  }
  let x_2032 : f32 = x_2025;
  u_xlat25 = x_2032;
  let x_2033 : f32 = u_xlat67;
  let x_2035 : f32 = u_xlat25;
  u_xlat67 = ((x_2033 * 2.0f) + -(x_2035));
  let x_2038 : f32 = u_xlat67;
  let x_2040 : f32 = u_xlat6.w;
  u_xlat25 = (x_2038 * x_2040);
  let x_2043 : f32 = u_xlat25;
  u_xlatb47.x = (x_2043 >= 0.400000006f);
  let x_2048 : bool = u_xlatb47.x;
  let x_2049 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2049, x_2048);
  let x_2053 : f32 = u_xlat6.w;
  let x_2054 : f32 = u_xlat67;
  u_xlat67 = ((x_2053 * x_2054) + -0.400000006f);
  let x_2058 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2058);
  let x_2060 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2060);
  let x_2062 : f32 = u_xlat25;
  let x_2064 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2062) + abs(x_2064));
  let x_2067 : f32 = u_xlat25;
  u_xlat25 = max(x_2067, 0.0001f);
  let x_2070 : f32 = u_xlat67;
  let x_2071 : f32 = u_xlat25;
  u_xlat67 = (x_2070 / x_2071);
  let x_2073 : f32 = u_xlat67;
  u_xlat67 = (x_2073 + 0.5f);
  let x_2075 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2075, 0.0f, 1.0f);
  let x_2078 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2078 == 0.0f));
  let x_2080 : bool = u_xlatb25;
  if (x_2080) {
    let x_2084 : f32 = u_xlat67;
    x_2081 = x_2084;
  } else {
    let x_2087 : f32 = u_xlat47.x;
    x_2081 = x_2087;
  }
  let x_2088 : f32 = x_2081;
  u_xlat67 = x_2088;
  let x_2089 : f32 = u_xlat67;
  u_xlat47.x = (x_2089 + -0.0001f);
  let x_2094 : f32 = u_xlat47.x;
  u_xlatb47.x = (x_2094 < 0.0f);
  let x_2098 : bool = u_xlatb47.x;
  if (((select(0i, 1i, x_2098) * -1i) != 0i)) {
    discard;
  }
  let x_2106 : vec3<f32> = u_xlat22;
  let x_2107 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2106 * vec3<f32>(x_2107.y, x_2107.y, x_2107.y));
  let x_2110 : vec3<f32> = u_xlat30;
  let x_2112 : vec4<f32> = vs_INTERP2;
  let x_2115 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2110.x, x_2110.x, x_2110.x) * vec3<f32>(x_2112.x, x_2112.y, x_2112.z)) + x_2115);
  let x_2117 : vec3<f32> = u_xlat30;
  let x_2119 : vec3<f32> = vs_INTERP1;
  let x_2121 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2117.z, x_2117.z, x_2117.z) * x_2119) + x_2121);
  let x_2123 : vec3<f32> = u_xlat22;
  let x_2124 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2123, x_2124);
  let x_2128 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2128);
  let x_2131 : vec3<f32> = u_xlat22;
  let x_2132 : vec2<f32> = u_xlat47;
  let x_2134 : vec3<f32> = (x_2131 * vec3<f32>(x_2132.x, x_2132.x, x_2132.x));
  let x_2135 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2134.x, x_2134.y, x_2134.z, x_2135.w);
  u_xlat4.w = 1.0f;
  let x_2140 : vec4<f32> = x_95.unity_SHAr;
  let x_2141 : vec4<f32> = u_xlat4;
  u_xlat6.x = dot(x_2140, x_2141);
  let x_2146 : vec4<f32> = x_95.unity_SHAg;
  let x_2147 : vec4<f32> = u_xlat4;
  u_xlat6.y = dot(x_2146, x_2147);
  let x_2152 : vec4<f32> = x_95.unity_SHAb;
  let x_2153 : vec4<f32> = u_xlat4;
  u_xlat6.z = dot(x_2152, x_2153);
  let x_2156 : vec4<f32> = u_xlat4;
  let x_2158 : vec4<f32> = u_xlat4;
  u_xlat9 = (vec4<f32>(x_2156.y, x_2156.z, x_2156.z, x_2156.x) * vec4<f32>(x_2158.x, x_2158.y, x_2158.z, x_2158.z));
  let x_2163 : vec4<f32> = x_95.unity_SHBr;
  let x_2164 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_2163, x_2164);
  let x_2169 : vec4<f32> = x_95.unity_SHBg;
  let x_2170 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_2169, x_2170);
  let x_2174 : vec4<f32> = x_95.unity_SHBb;
  let x_2175 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_2174, x_2175);
  let x_2179 : f32 = u_xlat4.y;
  let x_2181 : f32 = u_xlat4.y;
  u_xlat22.x = (x_2179 * x_2181);
  let x_2185 : f32 = u_xlat4.x;
  let x_2187 : f32 = u_xlat4.x;
  let x_2190 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2185 * x_2187) + -(x_2190));
  let x_2196 : vec4<f32> = x_95.unity_SHC;
  let x_2198 : vec3<f32> = u_xlat22;
  let x_2201 : vec4<f32> = u_xlat10;
  u_xlat22 = ((vec3<f32>(x_2196.x, x_2196.y, x_2196.z) * vec3<f32>(x_2198.x, x_2198.x, x_2198.x)) + vec3<f32>(x_2201.x, x_2201.y, x_2201.z));
  let x_2204 : vec3<f32> = u_xlat22;
  let x_2205 : vec4<f32> = u_xlat6;
  u_xlat22 = (x_2204 + vec3<f32>(x_2205.x, x_2205.y, x_2205.z));
  let x_2208 : vec3<f32> = u_xlat22;
  u_xlat22 = max(x_2208, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2211 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2212 : vec2<f32> = vec2<f32>(x_2211.x, x_2211.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2212.x, x_2212.y));
  let x_2217 : vec2<f32> = u_xlat47;
  let x_2218 : vec4<f32> = hlslcc_FragCoord;
  let x_2220 : vec2<f32> = (x_2217 * vec2<f32>(x_2218.x, x_2218.y));
  let x_2221 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2220.x, x_2220.y, x_2221.z, x_2221.w);
  let x_2224 : f32 = u_xlat6.y;
  let x_2227 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2230 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2224 * x_2227) + x_2230);
  let x_2234 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2234) + 1.0f);
  let x_2239 : f32 = u_xlat8.x;
  u_xlat8.x = x_2239;
  let x_2242 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2242, 0.0f, 1.0f);
  let x_2245 : f32 = u_xlat67;
  u_xlat67 = x_2245;
  let x_2246 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2246, 0.0f, 1.0f);
  let x_2248 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2248 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2253 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2253) + 1.0f);
  let x_2258 : f32 = u_xlat47.x;
  let x_2260 : f32 = u_xlat47.x;
  u_xlat69 = (x_2258 * x_2260);
  let x_2262 : f32 = u_xlat69;
  u_xlat69 = max(x_2262, 0.0078125f);
  let x_2265 : f32 = u_xlat69;
  let x_2266 : f32 = u_xlat69;
  u_xlat70 = (x_2265 * x_2266);
  let x_2270 : f32 = u_xlat8.x;
  u_xlat71 = (x_2270 + 0.040000021f);
  let x_2273 : f32 = u_xlat71;
  u_xlat71 = min(x_2273, 1.0f);
  let x_2276 : f32 = u_xlat69;
  u_xlat28 = ((x_2276 * 4.0f) + 2.0f);
  let x_2284 : vec4<f32> = u_xlat6;
  let x_2287 : f32 = x_160.x_GlobalMipBias.x;
  let x_2288 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2284.x, x_2284.z), x_2287);
  u_xlat6.x = x_2288.x;
  let x_2293 : f32 = u_xlat6.x;
  u_xlat50 = (x_2293 + -1.0f);
  let x_2296 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2297 : f32 = u_xlat50;
  u_xlat50 = ((x_2296 * x_2297) + 1.0f);
  let x_2301 : f32 = u_xlat6.x;
  let x_2303 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2301, x_2303);
  let x_2306 : bool = u_xlatb0;
  if (x_2306) {
    let x_2310 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2310 == 1.0f);
    let x_2312 : bool = u_xlatb0;
    if (x_2312) {
      let x_2315 : vec4<f32> = u_xlat2;
      let x_2318 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2315.x, x_2315.y, x_2315.x, x_2315.y) + x_2318);
      let x_2321 : vec4<f32> = u_xlat8;
      let x_2322 : vec2<f32> = vec2<f32>(x_2321.x, x_2321.y);
      let x_2324 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2322.x, x_2322.y, x_2324);
      let x_2331 : vec3<f32> = txVec30;
      let x_2333 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2331.xy, x_2331.z);
      u_xlat9.x = x_2333;
      let x_2336 : vec4<f32> = u_xlat8;
      let x_2337 : vec2<f32> = vec2<f32>(x_2336.z, x_2336.w);
      let x_2339 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2337.x, x_2337.y, x_2339);
      let x_2346 : vec3<f32> = txVec31;
      let x_2348 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2346.xy, x_2346.z);
      u_xlat9.y = x_2348;
      let x_2350 : vec4<f32> = u_xlat2;
      let x_2353 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2350.x, x_2350.y, x_2350.x, x_2350.y) + x_2353);
      let x_2356 : vec4<f32> = u_xlat8;
      let x_2357 : vec2<f32> = vec2<f32>(x_2356.x, x_2356.y);
      let x_2359 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2357.x, x_2357.y, x_2359);
      let x_2366 : vec3<f32> = txVec32;
      let x_2368 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2366.xy, x_2366.z);
      u_xlat9.z = x_2368;
      let x_2371 : vec4<f32> = u_xlat8;
      let x_2372 : vec2<f32> = vec2<f32>(x_2371.z, x_2371.w);
      let x_2374 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2372.x, x_2372.y, x_2374);
      let x_2381 : vec3<f32> = txVec33;
      let x_2383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2381.xy, x_2381.z);
      u_xlat9.w = x_2383;
      let x_2385 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2385, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2391 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2391 == 2.0f);
      let x_2393 : bool = u_xlatb72;
      if (x_2393) {
        let x_2396 : vec4<f32> = u_xlat2;
        let x_2399 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2402 : vec2<f32> = ((vec2<f32>(x_2396.x, x_2396.y) * vec2<f32>(x_2399.z, x_2399.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2403 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2402.x, x_2402.y, x_2403.z, x_2403.w);
        let x_2405 : vec4<f32> = u_xlat8;
        let x_2407 : vec2<f32> = floor(vec2<f32>(x_2405.x, x_2405.y));
        let x_2408 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2407.x, x_2407.y, x_2408.z, x_2408.w);
        let x_2411 : vec4<f32> = u_xlat2;
        let x_2414 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2417 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2411.x, x_2411.y) * vec2<f32>(x_2414.z, x_2414.w)) + -(vec2<f32>(x_2417.x, x_2417.y)));
        let x_2421 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2421.x, x_2421.x, x_2421.y, x_2421.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2424 : vec4<f32> = u_xlat9;
        let x_2426 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2424.x, x_2424.x, x_2424.z, x_2424.z) * vec4<f32>(x_2426.x, x_2426.x, x_2426.z, x_2426.z));
        let x_2429 : vec4<f32> = u_xlat10;
        let x_2431 : vec2<f32> = (vec2<f32>(x_2429.y, x_2429.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2432 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2431.x, x_2432.y, x_2431.y, x_2432.w);
        let x_2434 : vec4<f32> = u_xlat10;
        let x_2437 : vec2<f32> = u_xlat52;
        let x_2439 : vec2<f32> = ((vec2<f32>(x_2434.x, x_2434.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2437));
        let x_2440 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2439.x, x_2439.y, x_2440.z, x_2440.w);
        let x_2442 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2442) + vec2<f32>(1.0f, 1.0f));
        let x_2445 : vec2<f32> = u_xlat52;
        let x_2446 : vec2<f32> = min(x_2445, vec2<f32>(0.0f, 0.0f));
        let x_2447 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2446.x, x_2446.y, x_2447.z, x_2447.w);
        let x_2449 : vec4<f32> = u_xlat11;
        let x_2452 : vec4<f32> = u_xlat11;
        let x_2455 : vec2<f32> = u_xlat54;
        let x_2456 : vec2<f32> = ((-(vec2<f32>(x_2449.x, x_2449.y)) * vec2<f32>(x_2452.x, x_2452.y)) + x_2455);
        let x_2457 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2456.x, x_2456.y, x_2457.z, x_2457.w);
        let x_2459 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2459, vec2<f32>(0.0f, 0.0f));
        let x_2461 : vec2<f32> = u_xlat52;
        let x_2463 : vec2<f32> = u_xlat52;
        let x_2465 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2461) * x_2463) + vec2<f32>(x_2465.y, x_2465.w));
        let x_2468 : vec4<f32> = u_xlat11;
        let x_2470 : vec2<f32> = (vec2<f32>(x_2468.x, x_2468.y) + vec2<f32>(1.0f, 1.0f));
        let x_2471 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2470.x, x_2470.y, x_2471.z, x_2471.w);
        let x_2473 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2473 + vec2<f32>(1.0f, 1.0f));
        let x_2475 : vec4<f32> = u_xlat10;
        let x_2477 : vec2<f32> = (vec2<f32>(x_2475.x, x_2475.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2478 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2477.x, x_2477.y, x_2478.z, x_2478.w);
        let x_2480 : vec2<f32> = u_xlat54;
        let x_2481 : vec2<f32> = (x_2480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2482 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2481.x, x_2481.y, x_2482.z, x_2482.w);
        let x_2484 : vec4<f32> = u_xlat11;
        let x_2486 : vec2<f32> = (vec2<f32>(x_2484.x, x_2484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2487 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2486.x, x_2486.y, x_2487.z, x_2487.w);
        let x_2489 : vec2<f32> = u_xlat52;
        let x_2490 : vec2<f32> = (x_2489 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2491 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2490.x, x_2490.y, x_2491.z, x_2491.w);
        let x_2493 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2493.y, x_2493.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2497 : f32 = u_xlat11.x;
        u_xlat12.z = x_2497;
        let x_2500 : f32 = u_xlat52.x;
        u_xlat12.w = x_2500;
        let x_2503 : f32 = u_xlat13.x;
        u_xlat10.z = x_2503;
        let x_2506 : f32 = u_xlat9.x;
        u_xlat10.w = x_2506;
        let x_2508 : vec4<f32> = u_xlat10;
        let x_2510 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2508.z, x_2508.w, x_2508.x, x_2508.z) + vec4<f32>(x_2510.z, x_2510.w, x_2510.x, x_2510.z));
        let x_2514 : f32 = u_xlat12.y;
        u_xlat11.z = x_2514;
        let x_2517 : f32 = u_xlat52.y;
        u_xlat11.w = x_2517;
        let x_2520 : f32 = u_xlat10.y;
        u_xlat13.z = x_2520;
        let x_2523 : f32 = u_xlat9.z;
        u_xlat13.w = x_2523;
        let x_2525 : vec4<f32> = u_xlat11;
        let x_2527 : vec4<f32> = u_xlat13;
        let x_2529 : vec3<f32> = (vec3<f32>(x_2525.z, x_2525.y, x_2525.w) + vec3<f32>(x_2527.z, x_2527.y, x_2527.w));
        let x_2530 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2529.x, x_2529.y, x_2529.z, x_2530.w);
        let x_2532 : vec4<f32> = u_xlat10;
        let x_2534 : vec4<f32> = u_xlat14;
        let x_2536 : vec3<f32> = (vec3<f32>(x_2532.x, x_2532.z, x_2532.w) / vec3<f32>(x_2534.z, x_2534.w, x_2534.y));
        let x_2537 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2536.x, x_2536.y, x_2536.z, x_2537.w);
        let x_2539 : vec4<f32> = u_xlat10;
        let x_2541 : vec3<f32> = (vec3<f32>(x_2539.x, x_2539.y, x_2539.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2542 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2541.x, x_2541.y, x_2541.z, x_2542.w);
        let x_2544 : vec4<f32> = u_xlat13;
        let x_2546 : vec4<f32> = u_xlat9;
        let x_2548 : vec3<f32> = (vec3<f32>(x_2544.z, x_2544.y, x_2544.w) / vec3<f32>(x_2546.x, x_2546.y, x_2546.z));
        let x_2549 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2548.x, x_2548.y, x_2548.z, x_2549.w);
        let x_2551 : vec4<f32> = u_xlat11;
        let x_2553 : vec3<f32> = (vec3<f32>(x_2551.x, x_2551.y, x_2551.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2554 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2553.x, x_2553.y, x_2553.z, x_2554.w);
        let x_2556 : vec4<f32> = u_xlat10;
        let x_2559 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2561 : vec3<f32> = (vec3<f32>(x_2556.y, x_2556.x, x_2556.z) * vec3<f32>(x_2559.x, x_2559.x, x_2559.x));
        let x_2562 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2561.x, x_2561.y, x_2561.z, x_2562.w);
        let x_2564 : vec4<f32> = u_xlat11;
        let x_2567 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2569 : vec3<f32> = (vec3<f32>(x_2564.x, x_2564.y, x_2564.z) * vec3<f32>(x_2567.y, x_2567.y, x_2567.y));
        let x_2570 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2569.x, x_2569.y, x_2569.z, x_2570.w);
        let x_2573 : f32 = u_xlat11.x;
        u_xlat10.w = x_2573;
        let x_2575 : vec4<f32> = u_xlat8;
        let x_2578 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2581 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2575.x, x_2575.y, x_2575.x, x_2575.y) * vec4<f32>(x_2578.x, x_2578.y, x_2578.x, x_2578.y)) + vec4<f32>(x_2581.y, x_2581.w, x_2581.x, x_2581.w));
        let x_2584 : vec4<f32> = u_xlat8;
        let x_2587 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2590 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2584.x, x_2584.y) * vec2<f32>(x_2587.x, x_2587.y)) + vec2<f32>(x_2590.z, x_2590.w));
        let x_2594 : f32 = u_xlat10.y;
        u_xlat11.w = x_2594;
        let x_2596 : vec4<f32> = u_xlat11;
        let x_2597 : vec2<f32> = vec2<f32>(x_2596.y, x_2596.z);
        let x_2598 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2598.x, x_2597.x, x_2598.z, x_2597.y);
        let x_2600 : vec4<f32> = u_xlat8;
        let x_2603 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2606 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2600.x, x_2600.y, x_2600.x, x_2600.y) * vec4<f32>(x_2603.x, x_2603.y, x_2603.x, x_2603.y)) + vec4<f32>(x_2606.x, x_2606.y, x_2606.z, x_2606.y));
        let x_2609 : vec4<f32> = u_xlat8;
        let x_2612 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2615 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2609.x, x_2609.y, x_2609.x, x_2609.y) * vec4<f32>(x_2612.x, x_2612.y, x_2612.x, x_2612.y)) + vec4<f32>(x_2615.w, x_2615.y, x_2615.w, x_2615.z));
        let x_2618 : vec4<f32> = u_xlat8;
        let x_2621 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2624 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2618.x, x_2618.y, x_2618.x, x_2618.y) * vec4<f32>(x_2621.x, x_2621.y, x_2621.x, x_2621.y)) + vec4<f32>(x_2624.x, x_2624.w, x_2624.z, x_2624.w));
        let x_2627 : vec4<f32> = u_xlat9;
        let x_2629 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2627.x, x_2627.x, x_2627.x, x_2627.y) * vec4<f32>(x_2629.z, x_2629.w, x_2629.y, x_2629.z));
        let x_2632 : vec4<f32> = u_xlat9;
        let x_2634 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2632.y, x_2632.y, x_2632.z, x_2632.z) * x_2634);
        let x_2638 : f32 = u_xlat9.z;
        let x_2640 : f32 = u_xlat14.y;
        u_xlat72 = (x_2638 * x_2640);
        let x_2643 : vec4<f32> = u_xlat12;
        let x_2644 : vec2<f32> = vec2<f32>(x_2643.x, x_2643.y);
        let x_2646 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2644.x, x_2644.y, x_2646);
        let x_2654 : vec3<f32> = txVec34;
        let x_2656 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2654.xy, x_2654.z);
        u_xlat73 = x_2656;
        let x_2658 : vec4<f32> = u_xlat12;
        let x_2659 : vec2<f32> = vec2<f32>(x_2658.z, x_2658.w);
        let x_2661 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2659.x, x_2659.y, x_2661);
        let x_2668 : vec3<f32> = txVec35;
        let x_2670 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2668.xy, x_2668.z);
        u_xlat8.x = x_2670;
        let x_2673 : f32 = u_xlat8.x;
        let x_2675 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2673 * x_2675);
        let x_2679 : f32 = u_xlat15.x;
        let x_2680 : f32 = u_xlat73;
        let x_2683 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2679 * x_2680) + x_2683);
        let x_2686 : vec2<f32> = u_xlat52;
        let x_2688 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2686.x, x_2686.y, x_2688);
        let x_2695 : vec3<f32> = txVec36;
        let x_2697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2695.xy, x_2695.z);
        u_xlat8.x = x_2697;
        let x_2700 : f32 = u_xlat15.z;
        let x_2702 : f32 = u_xlat8.x;
        let x_2704 : f32 = u_xlat73;
        u_xlat73 = ((x_2700 * x_2702) + x_2704);
        let x_2707 : vec4<f32> = u_xlat11;
        let x_2708 : vec2<f32> = vec2<f32>(x_2707.x, x_2707.y);
        let x_2710 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2708.x, x_2708.y, x_2710);
        let x_2717 : vec3<f32> = txVec37;
        let x_2719 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2717.xy, x_2717.z);
        u_xlat8.x = x_2719;
        let x_2722 : f32 = u_xlat15.w;
        let x_2724 : f32 = u_xlat8.x;
        let x_2726 : f32 = u_xlat73;
        u_xlat73 = ((x_2722 * x_2724) + x_2726);
        let x_2729 : vec4<f32> = u_xlat13;
        let x_2730 : vec2<f32> = vec2<f32>(x_2729.x, x_2729.y);
        let x_2732 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2730.x, x_2730.y, x_2732);
        let x_2739 : vec3<f32> = txVec38;
        let x_2741 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2739.xy, x_2739.z);
        u_xlat8.x = x_2741;
        let x_2744 : f32 = u_xlat16.x;
        let x_2746 : f32 = u_xlat8.x;
        let x_2748 : f32 = u_xlat73;
        u_xlat73 = ((x_2744 * x_2746) + x_2748);
        let x_2751 : vec4<f32> = u_xlat13;
        let x_2752 : vec2<f32> = vec2<f32>(x_2751.z, x_2751.w);
        let x_2754 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2752.x, x_2752.y, x_2754);
        let x_2761 : vec3<f32> = txVec39;
        let x_2763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2761.xy, x_2761.z);
        u_xlat8.x = x_2763;
        let x_2766 : f32 = u_xlat16.y;
        let x_2768 : f32 = u_xlat8.x;
        let x_2770 : f32 = u_xlat73;
        u_xlat73 = ((x_2766 * x_2768) + x_2770);
        let x_2773 : vec4<f32> = u_xlat11;
        let x_2774 : vec2<f32> = vec2<f32>(x_2773.z, x_2773.w);
        let x_2776 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2774.x, x_2774.y, x_2776);
        let x_2783 : vec3<f32> = txVec40;
        let x_2785 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2783.xy, x_2783.z);
        u_xlat8.x = x_2785;
        let x_2788 : f32 = u_xlat16.z;
        let x_2790 : f32 = u_xlat8.x;
        let x_2792 : f32 = u_xlat73;
        u_xlat73 = ((x_2788 * x_2790) + x_2792);
        let x_2795 : vec4<f32> = u_xlat10;
        let x_2796 : vec2<f32> = vec2<f32>(x_2795.x, x_2795.y);
        let x_2798 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2796.x, x_2796.y, x_2798);
        let x_2805 : vec3<f32> = txVec41;
        let x_2807 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2805.xy, x_2805.z);
        u_xlat8.x = x_2807;
        let x_2810 : f32 = u_xlat16.w;
        let x_2812 : f32 = u_xlat8.x;
        let x_2814 : f32 = u_xlat73;
        u_xlat73 = ((x_2810 * x_2812) + x_2814);
        let x_2817 : vec4<f32> = u_xlat10;
        let x_2818 : vec2<f32> = vec2<f32>(x_2817.z, x_2817.w);
        let x_2820 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2818.x, x_2818.y, x_2820);
        let x_2827 : vec3<f32> = txVec42;
        let x_2829 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2827.xy, x_2827.z);
        u_xlat8.x = x_2829;
        let x_2831 : f32 = u_xlat72;
        let x_2833 : f32 = u_xlat8.x;
        let x_2835 : f32 = u_xlat73;
        u_xlat0.x = ((x_2831 * x_2833) + x_2835);
      } else {
        let x_2839 : vec4<f32> = u_xlat2;
        let x_2842 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2845 : vec2<f32> = ((vec2<f32>(x_2839.x, x_2839.y) * vec2<f32>(x_2842.z, x_2842.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2846 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2845.x, x_2845.y, x_2846.z, x_2846.w);
        let x_2848 : vec4<f32> = u_xlat8;
        let x_2850 : vec2<f32> = floor(vec2<f32>(x_2848.x, x_2848.y));
        let x_2851 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2850.x, x_2850.y, x_2851.z, x_2851.w);
        let x_2853 : vec4<f32> = u_xlat2;
        let x_2856 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2859 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2853.x, x_2853.y) * vec2<f32>(x_2856.z, x_2856.w)) + -(vec2<f32>(x_2859.x, x_2859.y)));
        let x_2863 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2863.x, x_2863.x, x_2863.y, x_2863.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2866 : vec4<f32> = u_xlat9;
        let x_2868 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2866.x, x_2866.x, x_2866.z, x_2866.z) * vec4<f32>(x_2868.x, x_2868.x, x_2868.z, x_2868.z));
        let x_2871 : vec4<f32> = u_xlat10;
        let x_2873 : vec2<f32> = (vec2<f32>(x_2871.y, x_2871.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2874 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2874.x, x_2873.x, x_2874.z, x_2873.y);
        let x_2876 : vec4<f32> = u_xlat10;
        let x_2879 : vec2<f32> = u_xlat52;
        let x_2881 : vec2<f32> = ((vec2<f32>(x_2876.x, x_2876.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2879));
        let x_2882 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2881.x, x_2882.y, x_2881.y, x_2882.w);
        let x_2884 : vec2<f32> = u_xlat52;
        let x_2886 : vec2<f32> = (-(x_2884) + vec2<f32>(1.0f, 1.0f));
        let x_2887 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2886.x, x_2886.y, x_2887.z, x_2887.w);
        let x_2889 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2889, vec2<f32>(0.0f, 0.0f));
        let x_2891 : vec2<f32> = u_xlat54;
        let x_2893 : vec2<f32> = u_xlat54;
        let x_2895 : vec4<f32> = u_xlat10;
        let x_2897 : vec2<f32> = ((-(x_2891) * x_2893) + vec2<f32>(x_2895.x, x_2895.y));
        let x_2898 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2897.x, x_2897.y, x_2898.z, x_2898.w);
        let x_2900 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2900, vec2<f32>(0.0f, 0.0f));
        let x_2902 : vec2<f32> = u_xlat54;
        let x_2904 : vec2<f32> = u_xlat54;
        let x_2906 : vec4<f32> = u_xlat9;
        let x_2908 : vec2<f32> = ((-(x_2902) * x_2904) + vec2<f32>(x_2906.y, x_2906.w));
        let x_2909 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2908.x, x_2909.y, x_2908.y);
        let x_2911 : vec4<f32> = u_xlat10;
        let x_2913 : vec2<f32> = (vec2<f32>(x_2911.x, x_2911.y) + vec2<f32>(2.0f, 2.0f));
        let x_2914 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2913.x, x_2913.y, x_2914.z, x_2914.w);
        let x_2916 : vec3<f32> = u_xlat31;
        let x_2918 : vec2<f32> = (vec2<f32>(x_2916.x, x_2916.z) + vec2<f32>(2.0f, 2.0f));
        let x_2919 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2919.x, x_2918.x, x_2919.z, x_2918.y);
        let x_2922 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2922 * 0.081632003f);
        let x_2925 : vec4<f32> = u_xlat9;
        let x_2927 : vec3<f32> = (vec3<f32>(x_2925.z, x_2925.x, x_2925.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2928 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2927.x, x_2927.y, x_2927.z, x_2928.w);
        let x_2930 : vec4<f32> = u_xlat10;
        let x_2932 : vec2<f32> = (vec2<f32>(x_2930.x, x_2930.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2933 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2932.x, x_2932.y, x_2933.z, x_2933.w);
        let x_2936 : f32 = u_xlat13.y;
        u_xlat12.x = x_2936;
        let x_2938 : vec2<f32> = u_xlat52;
        let x_2941 : vec2<f32> = ((vec2<f32>(x_2938.x, x_2938.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2942 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2942.x, x_2941.x, x_2942.z, x_2941.y);
        let x_2944 : vec2<f32> = u_xlat52;
        let x_2947 : vec2<f32> = ((vec2<f32>(x_2944.x, x_2944.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2948 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2947.x, x_2948.y, x_2947.y, x_2948.w);
        let x_2951 : f32 = u_xlat9.x;
        u_xlat10.y = x_2951;
        let x_2954 : f32 = u_xlat11.y;
        u_xlat10.w = x_2954;
        let x_2956 : vec4<f32> = u_xlat10;
        let x_2957 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2956 + x_2957);
        let x_2959 : vec2<f32> = u_xlat52;
        let x_2962 : vec2<f32> = ((vec2<f32>(x_2959.y, x_2959.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2963 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2963.x, x_2962.x, x_2963.z, x_2962.y);
        let x_2965 : vec2<f32> = u_xlat52;
        let x_2968 : vec2<f32> = ((vec2<f32>(x_2965.y, x_2965.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2969 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2968.x, x_2969.y, x_2968.y, x_2969.w);
        let x_2972 : f32 = u_xlat9.y;
        u_xlat11.y = x_2972;
        let x_2974 : vec4<f32> = u_xlat11;
        let x_2975 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2974 + x_2975);
        let x_2977 : vec4<f32> = u_xlat10;
        let x_2978 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2977 / x_2978);
        let x_2980 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2980 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2982 : vec4<f32> = u_xlat11;
        let x_2983 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2982 / x_2983);
        let x_2985 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2985 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2987 : vec4<f32> = u_xlat10;
        let x_2990 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2987.w, x_2987.x, x_2987.y, x_2987.z) * vec4<f32>(x_2990.x, x_2990.x, x_2990.x, x_2990.x));
        let x_2993 : vec4<f32> = u_xlat11;
        let x_2996 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2993.x, x_2993.w, x_2993.y, x_2993.z) * vec4<f32>(x_2996.y, x_2996.y, x_2996.y, x_2996.y));
        let x_2999 : vec4<f32> = u_xlat10;
        let x_3000 : vec3<f32> = vec3<f32>(x_2999.y, x_2999.z, x_2999.w);
        let x_3001 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_3000.x, x_3001.y, x_3000.y, x_3000.z);
        let x_3004 : f32 = u_xlat11.x;
        u_xlat13.y = x_3004;
        let x_3006 : vec4<f32> = u_xlat8;
        let x_3009 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3012 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_3006.x, x_3006.y, x_3006.x, x_3006.y) * vec4<f32>(x_3009.x, x_3009.y, x_3009.x, x_3009.y)) + vec4<f32>(x_3012.x, x_3012.y, x_3012.z, x_3012.y));
        let x_3015 : vec4<f32> = u_xlat8;
        let x_3018 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3021 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_3015.x, x_3015.y) * vec2<f32>(x_3018.x, x_3018.y)) + vec2<f32>(x_3021.w, x_3021.y));
        let x_3025 : f32 = u_xlat13.y;
        u_xlat10.y = x_3025;
        let x_3028 : f32 = u_xlat11.z;
        u_xlat13.y = x_3028;
        let x_3030 : vec4<f32> = u_xlat8;
        let x_3033 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3036 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3030.x, x_3030.y, x_3030.x, x_3030.y) * vec4<f32>(x_3033.x, x_3033.y, x_3033.x, x_3033.y)) + vec4<f32>(x_3036.x, x_3036.y, x_3036.z, x_3036.y));
        let x_3039 : vec4<f32> = u_xlat8;
        let x_3042 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3045 : vec4<f32> = u_xlat13;
        let x_3047 : vec2<f32> = ((vec2<f32>(x_3039.x, x_3039.y) * vec2<f32>(x_3042.x, x_3042.y)) + vec2<f32>(x_3045.w, x_3045.y));
        let x_3048 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3047.x, x_3047.y, x_3048.z, x_3048.w);
        let x_3051 : f32 = u_xlat13.y;
        u_xlat10.z = x_3051;
        let x_3053 : vec4<f32> = u_xlat8;
        let x_3056 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3059 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3053.x, x_3053.y, x_3053.x, x_3053.y) * vec4<f32>(x_3056.x, x_3056.y, x_3056.x, x_3056.y)) + vec4<f32>(x_3059.x, x_3059.y, x_3059.x, x_3059.z));
        let x_3063 : f32 = u_xlat11.w;
        u_xlat13.y = x_3063;
        let x_3065 : vec4<f32> = u_xlat8;
        let x_3068 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3071 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3065.x, x_3065.y, x_3065.x, x_3065.y) * vec4<f32>(x_3068.x, x_3068.y, x_3068.x, x_3068.y)) + vec4<f32>(x_3071.x, x_3071.y, x_3071.z, x_3071.y));
        let x_3074 : vec4<f32> = u_xlat8;
        let x_3077 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3080 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3074.x, x_3074.y) * vec2<f32>(x_3077.x, x_3077.y)) + vec2<f32>(x_3080.w, x_3080.y));
        let x_3084 : f32 = u_xlat13.y;
        u_xlat10.w = x_3084;
        let x_3086 : vec4<f32> = u_xlat8;
        let x_3089 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3092 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3086.x, x_3086.y) * vec2<f32>(x_3089.x, x_3089.y)) + vec2<f32>(x_3092.x, x_3092.w));
        let x_3095 : vec4<f32> = u_xlat13;
        let x_3096 : vec3<f32> = vec3<f32>(x_3095.x, x_3095.z, x_3095.w);
        let x_3097 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3096.x, x_3097.y, x_3096.y, x_3096.z);
        let x_3099 : vec4<f32> = u_xlat8;
        let x_3102 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3105 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3099.x, x_3099.y, x_3099.x, x_3099.y) * vec4<f32>(x_3102.x, x_3102.y, x_3102.x, x_3102.y)) + vec4<f32>(x_3105.x, x_3105.y, x_3105.z, x_3105.y));
        let x_3108 : vec4<f32> = u_xlat8;
        let x_3111 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3114 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3108.x, x_3108.y) * vec2<f32>(x_3111.x, x_3111.y)) + vec2<f32>(x_3114.w, x_3114.y));
        let x_3118 : f32 = u_xlat10.x;
        u_xlat11.x = x_3118;
        let x_3120 : vec4<f32> = u_xlat8;
        let x_3123 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3126 : vec4<f32> = u_xlat11;
        let x_3128 : vec2<f32> = ((vec2<f32>(x_3120.x, x_3120.y) * vec2<f32>(x_3123.x, x_3123.y)) + vec2<f32>(x_3126.x, x_3126.y));
        let x_3129 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3128.x, x_3128.y, x_3129.z, x_3129.w);
        let x_3131 : vec4<f32> = u_xlat9;
        let x_3133 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3131.x, x_3131.x, x_3131.x, x_3131.x) * x_3133);
        let x_3135 : vec4<f32> = u_xlat9;
        let x_3137 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3135.y, x_3135.y, x_3135.y, x_3135.y) * x_3137);
        let x_3139 : vec4<f32> = u_xlat9;
        let x_3141 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3139.z, x_3139.z, x_3139.z, x_3139.z) * x_3141);
        let x_3143 : vec4<f32> = u_xlat9;
        let x_3145 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3143.w, x_3143.w, x_3143.w, x_3143.w) * x_3145);
        let x_3148 : vec4<f32> = u_xlat14;
        let x_3149 : vec2<f32> = vec2<f32>(x_3148.x, x_3148.y);
        let x_3151 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3149.x, x_3149.y, x_3151);
        let x_3158 : vec3<f32> = txVec43;
        let x_3160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3158.xy, x_3158.z);
        u_xlat72 = x_3160;
        let x_3162 : vec4<f32> = u_xlat14;
        let x_3163 : vec2<f32> = vec2<f32>(x_3162.z, x_3162.w);
        let x_3165 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3163.x, x_3163.y, x_3165);
        let x_3172 : vec3<f32> = txVec44;
        let x_3174 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3172.xy, x_3172.z);
        u_xlat73 = x_3174;
        let x_3175 : f32 = u_xlat73;
        let x_3177 : f32 = u_xlat19.y;
        u_xlat73 = (x_3175 * x_3177);
        let x_3180 : f32 = u_xlat19.x;
        let x_3181 : f32 = u_xlat72;
        let x_3183 : f32 = u_xlat73;
        u_xlat72 = ((x_3180 * x_3181) + x_3183);
        let x_3186 : vec2<f32> = u_xlat52;
        let x_3188 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3186.x, x_3186.y, x_3188);
        let x_3195 : vec3<f32> = txVec45;
        let x_3197 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3195.xy, x_3195.z);
        u_xlat73 = x_3197;
        let x_3199 : f32 = u_xlat19.z;
        let x_3200 : f32 = u_xlat73;
        let x_3202 : f32 = u_xlat72;
        u_xlat72 = ((x_3199 * x_3200) + x_3202);
        let x_3205 : vec4<f32> = u_xlat17;
        let x_3206 : vec2<f32> = vec2<f32>(x_3205.x, x_3205.y);
        let x_3208 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3206.x, x_3206.y, x_3208);
        let x_3215 : vec3<f32> = txVec46;
        let x_3217 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3215.xy, x_3215.z);
        u_xlat73 = x_3217;
        let x_3219 : f32 = u_xlat19.w;
        let x_3220 : f32 = u_xlat73;
        let x_3222 : f32 = u_xlat72;
        u_xlat72 = ((x_3219 * x_3220) + x_3222);
        let x_3225 : vec4<f32> = u_xlat15;
        let x_3226 : vec2<f32> = vec2<f32>(x_3225.x, x_3225.y);
        let x_3228 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3226.x, x_3226.y, x_3228);
        let x_3235 : vec3<f32> = txVec47;
        let x_3237 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3235.xy, x_3235.z);
        u_xlat73 = x_3237;
        let x_3239 : f32 = u_xlat20.x;
        let x_3240 : f32 = u_xlat73;
        let x_3242 : f32 = u_xlat72;
        u_xlat72 = ((x_3239 * x_3240) + x_3242);
        let x_3245 : vec4<f32> = u_xlat15;
        let x_3246 : vec2<f32> = vec2<f32>(x_3245.z, x_3245.w);
        let x_3248 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3246.x, x_3246.y, x_3248);
        let x_3255 : vec3<f32> = txVec48;
        let x_3257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3255.xy, x_3255.z);
        u_xlat73 = x_3257;
        let x_3259 : f32 = u_xlat20.y;
        let x_3260 : f32 = u_xlat73;
        let x_3262 : f32 = u_xlat72;
        u_xlat72 = ((x_3259 * x_3260) + x_3262);
        let x_3265 : vec4<f32> = u_xlat16;
        let x_3266 : vec2<f32> = vec2<f32>(x_3265.x, x_3265.y);
        let x_3268 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3266.x, x_3266.y, x_3268);
        let x_3275 : vec3<f32> = txVec49;
        let x_3277 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3275.xy, x_3275.z);
        u_xlat73 = x_3277;
        let x_3279 : f32 = u_xlat20.z;
        let x_3280 : f32 = u_xlat73;
        let x_3282 : f32 = u_xlat72;
        u_xlat72 = ((x_3279 * x_3280) + x_3282);
        let x_3285 : vec4<f32> = u_xlat17;
        let x_3286 : vec2<f32> = vec2<f32>(x_3285.z, x_3285.w);
        let x_3288 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3286.x, x_3286.y, x_3288);
        let x_3295 : vec3<f32> = txVec50;
        let x_3297 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3295.xy, x_3295.z);
        u_xlat73 = x_3297;
        let x_3299 : f32 = u_xlat20.w;
        let x_3300 : f32 = u_xlat73;
        let x_3302 : f32 = u_xlat72;
        u_xlat72 = ((x_3299 * x_3300) + x_3302);
        let x_3305 : vec4<f32> = u_xlat18;
        let x_3306 : vec2<f32> = vec2<f32>(x_3305.x, x_3305.y);
        let x_3308 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3306.x, x_3306.y, x_3308);
        let x_3315 : vec3<f32> = txVec51;
        let x_3317 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3315.xy, x_3315.z);
        u_xlat73 = x_3317;
        let x_3319 : f32 = u_xlat21.x;
        let x_3320 : f32 = u_xlat73;
        let x_3322 : f32 = u_xlat72;
        u_xlat72 = ((x_3319 * x_3320) + x_3322);
        let x_3325 : vec4<f32> = u_xlat18;
        let x_3326 : vec2<f32> = vec2<f32>(x_3325.z, x_3325.w);
        let x_3328 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3326.x, x_3326.y, x_3328);
        let x_3335 : vec3<f32> = txVec52;
        let x_3337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3335.xy, x_3335.z);
        u_xlat73 = x_3337;
        let x_3339 : f32 = u_xlat21.y;
        let x_3340 : f32 = u_xlat73;
        let x_3342 : f32 = u_xlat72;
        u_xlat72 = ((x_3339 * x_3340) + x_3342);
        let x_3345 : vec2<f32> = u_xlat32;
        let x_3347 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3345.x, x_3345.y, x_3347);
        let x_3354 : vec3<f32> = txVec53;
        let x_3356 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3354.xy, x_3354.z);
        u_xlat73 = x_3356;
        let x_3358 : f32 = u_xlat21.z;
        let x_3359 : f32 = u_xlat73;
        let x_3361 : f32 = u_xlat72;
        u_xlat72 = ((x_3358 * x_3359) + x_3361);
        let x_3364 : vec2<f32> = u_xlat60;
        let x_3366 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3364.x, x_3364.y, x_3366);
        let x_3373 : vec3<f32> = txVec54;
        let x_3375 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3373.xy, x_3373.z);
        u_xlat73 = x_3375;
        let x_3377 : f32 = u_xlat21.w;
        let x_3378 : f32 = u_xlat73;
        let x_3380 : f32 = u_xlat72;
        u_xlat72 = ((x_3377 * x_3378) + x_3380);
        let x_3383 : vec4<f32> = u_xlat13;
        let x_3384 : vec2<f32> = vec2<f32>(x_3383.x, x_3383.y);
        let x_3386 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3384.x, x_3384.y, x_3386);
        let x_3393 : vec3<f32> = txVec55;
        let x_3395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3393.xy, x_3393.z);
        u_xlat73 = x_3395;
        let x_3397 : f32 = u_xlat9.x;
        let x_3398 : f32 = u_xlat73;
        let x_3400 : f32 = u_xlat72;
        u_xlat72 = ((x_3397 * x_3398) + x_3400);
        let x_3403 : vec4<f32> = u_xlat13;
        let x_3404 : vec2<f32> = vec2<f32>(x_3403.z, x_3403.w);
        let x_3406 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3404.x, x_3404.y, x_3406);
        let x_3413 : vec3<f32> = txVec56;
        let x_3415 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3413.xy, x_3413.z);
        u_xlat73 = x_3415;
        let x_3417 : f32 = u_xlat9.y;
        let x_3418 : f32 = u_xlat73;
        let x_3420 : f32 = u_xlat72;
        u_xlat72 = ((x_3417 * x_3418) + x_3420);
        let x_3423 : vec2<f32> = u_xlat55;
        let x_3425 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3423.x, x_3423.y, x_3425);
        let x_3432 : vec3<f32> = txVec57;
        let x_3434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3432.xy, x_3432.z);
        u_xlat73 = x_3434;
        let x_3436 : f32 = u_xlat9.z;
        let x_3437 : f32 = u_xlat73;
        let x_3439 : f32 = u_xlat72;
        u_xlat72 = ((x_3436 * x_3437) + x_3439);
        let x_3442 : vec4<f32> = u_xlat8;
        let x_3443 : vec2<f32> = vec2<f32>(x_3442.x, x_3442.y);
        let x_3445 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3443.x, x_3443.y, x_3445);
        let x_3452 : vec3<f32> = txVec58;
        let x_3454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3452.xy, x_3452.z);
        u_xlat73 = x_3454;
        let x_3456 : f32 = u_xlat9.w;
        let x_3457 : f32 = u_xlat73;
        let x_3459 : f32 = u_xlat72;
        u_xlat0.x = ((x_3456 * x_3457) + x_3459);
      }
    }
  } else {
    let x_3464 : vec4<f32> = u_xlat2;
    let x_3465 : vec2<f32> = vec2<f32>(x_3464.x, x_3464.y);
    let x_3467 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3465.x, x_3465.y, x_3467);
    let x_3474 : vec3<f32> = txVec59;
    let x_3476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3474.xy, x_3474.z);
    u_xlat0.x = x_3476;
  }
  let x_3479 : f32 = u_xlat0.x;
  let x_3481 : f32 = x_401.x_MainLightShadowParams.x;
  let x_3483 : f32 = u_xlat68;
  u_xlat0.x = ((x_3479 * x_3481) + x_3483);
  let x_3486 : bool = u_xlatb3;
  if (x_3486) {
    x_3487 = 1.0f;
  } else {
    let x_3492 : f32 = u_xlat0.x;
    x_3487 = x_3492;
  }
  let x_3493 : f32 = x_3487;
  u_xlat0.x = x_3493;
  let x_3495 : vec3<f32> = vs_INTERP0;
  let x_3497 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3499 : vec3<f32> = (x_3495 + -(x_3497));
  let x_3500 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3499.x, x_3499.y, x_3499.z, x_3500.w);
  let x_3502 : vec4<f32> = u_xlat2;
  let x_3504 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3502.x, x_3502.y, x_3502.z), vec3<f32>(x_3504.x, x_3504.y, x_3504.z));
  let x_3509 : f32 = u_xlat2.x;
  let x_3511 : f32 = x_401.x_MainLightShadowParams.z;
  let x_3514 : f32 = x_401.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3509 * x_3511) + x_3514);
  let x_3518 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3518, 0.0f, 1.0f);
  let x_3523 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3523) + 1.0f);
  let x_3527 : f32 = u_xlat2.x;
  let x_3528 : f32 = u_xlat24;
  let x_3531 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3527 * x_3528) + x_3531);
  let x_3540 : f32 = x_3538.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3540 == -1.0f));
  let x_3544 : bool = u_xlatb2.x;
  if (x_3544) {
    let x_3547 : vec3<f32> = vs_INTERP0;
    let x_3550 : vec4<f32> = x_3538.x_MainLightWorldToLight[1i];
    let x_3552 : vec2<f32> = (vec2<f32>(x_3547.y, x_3547.y) * vec2<f32>(x_3550.x, x_3550.y));
    let x_3553 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3552.x, x_3552.y, x_3553.z, x_3553.w);
    let x_3556 : vec4<f32> = x_3538.x_MainLightWorldToLight[0i];
    let x_3558 : vec3<f32> = vs_INTERP0;
    let x_3561 : vec4<f32> = u_xlat2;
    let x_3563 : vec2<f32> = ((vec2<f32>(x_3556.x, x_3556.y) * vec2<f32>(x_3558.x, x_3558.x)) + vec2<f32>(x_3561.x, x_3561.y));
    let x_3564 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3563.x, x_3563.y, x_3564.z, x_3564.w);
    let x_3567 : vec4<f32> = x_3538.x_MainLightWorldToLight[2i];
    let x_3569 : vec3<f32> = vs_INTERP0;
    let x_3572 : vec4<f32> = u_xlat2;
    let x_3574 : vec2<f32> = ((vec2<f32>(x_3567.x, x_3567.y) * vec2<f32>(x_3569.z, x_3569.z)) + vec2<f32>(x_3572.x, x_3572.y));
    let x_3575 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3574.x, x_3574.y, x_3575.z, x_3575.w);
    let x_3577 : vec4<f32> = u_xlat2;
    let x_3580 : vec4<f32> = x_3538.x_MainLightWorldToLight[3i];
    let x_3582 : vec2<f32> = (vec2<f32>(x_3577.x, x_3577.y) + vec2<f32>(x_3580.x, x_3580.y));
    let x_3583 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3582.x, x_3582.y, x_3583.z, x_3583.w);
    let x_3585 : vec4<f32> = u_xlat2;
    let x_3588 : vec2<f32> = ((vec2<f32>(x_3585.x, x_3585.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3589 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3588.x, x_3588.y, x_3589.z, x_3589.w);
    let x_3596 : vec4<f32> = u_xlat2;
    let x_3599 : f32 = x_160.x_GlobalMipBias.x;
    let x_3600 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3596.x, x_3596.y), x_3599);
    u_xlat2 = x_3600;
    let x_3603 : f32 = x_3538.x_MainLightCookieTextureFormat;
    let x_3605 : f32 = x_3538.x_MainLightCookieTextureFormat;
    let x_3607 : f32 = x_3538.x_MainLightCookieTextureFormat;
    let x_3609 : f32 = x_3538.x_MainLightCookieTextureFormat;
    let x_3610 : vec4<f32> = vec4<f32>(x_3603, x_3605, x_3607, x_3609);
    let x_3617 : vec4<bool> = (vec4<f32>(x_3610.x, x_3610.y, x_3610.z, x_3610.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3617.x, x_3617.y);
    let x_3620 : bool = u_xlatb8.y;
    if (x_3620) {
      let x_3625 : f32 = u_xlat2.w;
      x_3621 = x_3625;
    } else {
      let x_3628 : f32 = u_xlat2.x;
      x_3621 = x_3628;
    }
    let x_3629 : f32 = x_3621;
    u_xlat68 = x_3629;
    let x_3631 : bool = u_xlatb8.x;
    if (x_3631) {
      let x_3635 : vec4<f32> = u_xlat2;
      x_3632 = vec3<f32>(x_3635.x, x_3635.y, x_3635.z);
    } else {
      let x_3638 : f32 = u_xlat68;
      x_3632 = vec3<f32>(x_3638, x_3638, x_3638);
    }
    let x_3640 : vec3<f32> = x_3632;
    let x_3641 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3640.x, x_3640.y, x_3640.z, x_3641.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3647 : vec4<f32> = u_xlat2;
  let x_3650 : vec4<f32> = x_160.x_MainLightColor;
  let x_3652 : vec3<f32> = (vec3<f32>(x_3647.x, x_3647.y, x_3647.z) * vec3<f32>(x_3650.x, x_3650.y, x_3650.z));
  let x_3653 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3652.x, x_3652.y, x_3652.z, x_3653.w);
  let x_3655 : f32 = u_xlat50;
  let x_3657 : vec4<f32> = u_xlat2;
  let x_3659 : vec3<f32> = (vec3<f32>(x_3655, x_3655, x_3655) * vec3<f32>(x_3657.x, x_3657.y, x_3657.z));
  let x_3660 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3659.x, x_3659.y, x_3659.z, x_3660.w);
  let x_3662 : vec3<f32> = u_xlat5;
  let x_3664 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(-(x_3662), vec3<f32>(x_3664.x, x_3664.y, x_3664.z));
  let x_3667 : f32 = u_xlat68;
  let x_3668 : f32 = u_xlat68;
  u_xlat68 = (x_3667 + x_3668);
  let x_3670 : vec4<f32> = u_xlat4;
  let x_3672 : f32 = u_xlat68;
  let x_3676 : vec3<f32> = u_xlat5;
  let x_3678 : vec3<f32> = ((vec3<f32>(x_3670.x, x_3670.y, x_3670.z) * -(vec3<f32>(x_3672, x_3672, x_3672))) + -(x_3676));
  let x_3679 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3678.x, x_3678.y, x_3678.z, x_3679.w);
  let x_3681 : vec4<f32> = u_xlat4;
  let x_3683 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(vec3<f32>(x_3681.x, x_3681.y, x_3681.z), x_3683);
  let x_3685 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3685, 0.0f, 1.0f);
  let x_3687 : f32 = u_xlat68;
  u_xlat68 = (-(x_3687) + 1.0f);
  let x_3690 : f32 = u_xlat68;
  let x_3691 : f32 = u_xlat68;
  u_xlat68 = (x_3690 * x_3691);
  let x_3693 : f32 = u_xlat68;
  let x_3694 : f32 = u_xlat68;
  u_xlat68 = (x_3693 * x_3694);
  let x_3697 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3697) * 0.699999988f) + 1.700000048f);
  let x_3705 : f32 = u_xlat3.x;
  let x_3707 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3705 * x_3707);
  let x_3711 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3711 * 6.0f);
  let x_3723 : vec4<f32> = u_xlat8;
  let x_3726 : f32 = u_xlat3.x;
  let x_3727 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3723.x, x_3723.y, x_3723.z), x_3726);
  u_xlat8 = x_3727;
  let x_3729 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3729 + -1.0f);
  let x_3733 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3735 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3733 * x_3735) + 1.0f);
  let x_3740 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3740, 0.0f);
  let x_3744 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3744);
  let x_3748 : f32 = u_xlat3.x;
  let x_3750 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3748 * x_3750);
  let x_3754 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3754);
  let x_3758 : f32 = u_xlat3.x;
  let x_3760 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3758 * x_3760);
  let x_3763 : vec4<f32> = u_xlat8;
  let x_3765 : vec4<f32> = u_xlat3;
  let x_3767 : vec3<f32> = (vec3<f32>(x_3763.x, x_3763.y, x_3763.z) * vec3<f32>(x_3765.x, x_3765.x, x_3765.x));
  let x_3768 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3767.x, x_3767.y, x_3767.z, x_3768.w);
  let x_3770 : f32 = u_xlat69;
  let x_3772 : f32 = u_xlat69;
  let x_3776 : vec2<f32> = ((vec2<f32>(x_3770, x_3770) * vec2<f32>(x_3772, x_3772)) + vec2<f32>(-1.0f, 1.0f));
  let x_3777 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3776.x, x_3777.y, x_3776.y, x_3777.w);
  let x_3780 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3780);
  let x_3783 : f32 = u_xlat71;
  u_xlat69 = (x_3783 + -0.039999999f);
  let x_3786 : f32 = u_xlat68;
  let x_3787 : f32 = u_xlat69;
  u_xlat68 = ((x_3786 * x_3787) + 0.039999999f);
  let x_3791 : f32 = u_xlat68;
  let x_3793 : f32 = u_xlat47.x;
  u_xlat68 = (x_3791 * x_3793);
  let x_3795 : f32 = u_xlat68;
  let x_3797 : vec4<f32> = u_xlat8;
  let x_3799 : vec3<f32> = (vec3<f32>(x_3795, x_3795, x_3795) * vec3<f32>(x_3797.x, x_3797.y, x_3797.z));
  let x_3800 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3799.x, x_3799.y, x_3799.z, x_3800.w);
  let x_3802 : vec3<f32> = u_xlat22;
  let x_3803 : vec3<f32> = u_xlat7;
  let x_3805 : vec4<f32> = u_xlat8;
  u_xlat22 = ((x_3802 * x_3803) + vec3<f32>(x_3805.x, x_3805.y, x_3805.z));
  let x_3809 : f32 = u_xlat0.x;
  let x_3811 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3809 * x_3811);
  let x_3814 : vec4<f32> = u_xlat4;
  let x_3817 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(vec3<f32>(x_3814.x, x_3814.y, x_3814.z), vec3<f32>(x_3817.x, x_3817.y, x_3817.z));
  let x_3820 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3820, 0.0f, 1.0f);
  let x_3823 : f32 = u_xlat0.x;
  let x_3824 : f32 = u_xlat68;
  u_xlat0.x = (x_3823 * x_3824);
  let x_3827 : vec3<f32> = u_xlat0;
  let x_3829 : vec4<f32> = u_xlat2;
  let x_3831 : vec3<f32> = (vec3<f32>(x_3827.x, x_3827.x, x_3827.x) * vec3<f32>(x_3829.x, x_3829.y, x_3829.z));
  let x_3832 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3831.x, x_3831.y, x_3831.z, x_3832.w);
  let x_3834 : vec3<f32> = u_xlat5;
  let x_3836 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3838 : vec3<f32> = (x_3834 + vec3<f32>(x_3836.x, x_3836.y, x_3836.z));
  let x_3839 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3838.x, x_3838.y, x_3838.z, x_3839.w);
  let x_3841 : vec4<f32> = u_xlat8;
  let x_3843 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3841.x, x_3841.y, x_3841.z), vec3<f32>(x_3843.x, x_3843.y, x_3843.z));
  let x_3848 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3848, 1.17549435e-37f);
  let x_3852 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3852);
  let x_3855 : vec3<f32> = u_xlat0;
  let x_3857 : vec4<f32> = u_xlat8;
  let x_3859 : vec3<f32> = (vec3<f32>(x_3855.x, x_3855.x, x_3855.x) * vec3<f32>(x_3857.x, x_3857.y, x_3857.z));
  let x_3860 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3859.x, x_3859.y, x_3859.z, x_3860.w);
  let x_3862 : vec4<f32> = u_xlat4;
  let x_3864 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3862.x, x_3862.y, x_3862.z), vec3<f32>(x_3864.x, x_3864.y, x_3864.z));
  let x_3869 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3869, 0.0f, 1.0f);
  let x_3873 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3875 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3873.x, x_3873.y, x_3873.z), vec3<f32>(x_3875.x, x_3875.y, x_3875.z));
  let x_3878 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3878, 0.0f, 1.0f);
  let x_3881 : f32 = u_xlat0.x;
  let x_3883 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3881 * x_3883);
  let x_3887 : f32 = u_xlat0.x;
  let x_3889 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3887 * x_3889) + 1.000010014f);
  let x_3894 : f32 = u_xlat68;
  let x_3895 : f32 = u_xlat68;
  u_xlat68 = (x_3894 * x_3895);
  let x_3898 : f32 = u_xlat0.x;
  let x_3900 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3898 * x_3900);
  let x_3903 : f32 = u_xlat68;
  u_xlat68 = max(x_3903, 0.100000001f);
  let x_3907 : f32 = u_xlat0.x;
  let x_3908 : f32 = u_xlat68;
  u_xlat0.x = (x_3907 * x_3908);
  let x_3911 : f32 = u_xlat28;
  let x_3913 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3911 * x_3913);
  let x_3916 : f32 = u_xlat70;
  let x_3918 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3916 / x_3918);
  let x_3921 : vec3<f32> = u_xlat0;
  let x_3925 : vec3<f32> = u_xlat7;
  let x_3926 : vec3<f32> = ((vec3<f32>(x_3921.x, x_3921.x, x_3921.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3925);
  let x_3927 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3926.x, x_3926.y, x_3926.z, x_3927.w);
  let x_3929 : vec4<f32> = u_xlat2;
  let x_3931 : vec4<f32> = u_xlat8;
  let x_3933 : vec3<f32> = (vec3<f32>(x_3929.x, x_3929.y, x_3929.z) * vec3<f32>(x_3931.x, x_3931.y, x_3931.z));
  let x_3934 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3933.x, x_3933.y, x_3933.z, x_3934.w);
  let x_3937 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3939 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3937, x_3939);
  let x_3943 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3943));
  let x_3947 : f32 = x_3538.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3949 : f32 = x_3538.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3951 : f32 = x_3538.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3953 : f32 = x_3538.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3954 : vec4<f32> = vec4<f32>(x_3947, x_3949, x_3951, x_3953);
  let x_3961 : vec4<bool> = (vec4<f32>(x_3954.x, x_3954.y, x_3954.z, x_3954.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb47 = vec2<bool>(x_3961.x, x_3961.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3972 : u32 = u_xlatu_loop_1;
    let x_3973 : u32 = u_xlatu0;
    if ((x_3972 < x_3973)) {
    } else {
      break;
    }
    let x_3976 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3976 >> 2u);
    let x_3979 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3979 & 3u));
    let x_3982 : u32 = u_xlatu71;
    let x_3985 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3982)];
    let x_3995 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_4000 : vec4<u32> = indexable[x_3995];
    u_xlat71 = dot(x_3985, bitcast<vec4<f32>>(x_4000));
    let x_4003 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_4003));
    let x_4006 : vec3<f32> = vs_INTERP0;
    let x_4018 : u32 = u_xlatu71;
    let x_4021 : vec4<f32> = x_4017.x_AdditionalLightsPosition[bitcast<i32>(x_4018)];
    let x_4024 : u32 = u_xlatu71;
    let x_4027 : vec4<f32> = x_4017.x_AdditionalLightsPosition[bitcast<i32>(x_4024)];
    let x_4029 : vec3<f32> = ((-(x_4006) * vec3<f32>(x_4021.w, x_4021.w, x_4021.w)) + vec3<f32>(x_4027.x, x_4027.y, x_4027.z));
    let x_4030 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4029.x, x_4029.y, x_4029.z, x_4030.w);
    let x_4032 : vec4<f32> = u_xlat9;
    let x_4034 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4032.x, x_4032.y, x_4032.z), vec3<f32>(x_4034.x, x_4034.y, x_4034.z));
    let x_4037 : f32 = u_xlat72;
    u_xlat72 = max(x_4037, 6.10351562e-05f);
    let x_4040 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_4040);
    let x_4042 : f32 = u_xlat73;
    let x_4044 : vec4<f32> = u_xlat9;
    let x_4046 : vec3<f32> = (vec3<f32>(x_4042, x_4042, x_4042) * vec3<f32>(x_4044.x, x_4044.y, x_4044.z));
    let x_4047 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4046.x, x_4046.y, x_4046.z, x_4047.w);
    let x_4050 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_4050);
    let x_4052 : f32 = u_xlat72;
    let x_4053 : u32 = u_xlatu71;
    let x_4056 : f32 = x_4017.x_AdditionalLightsAttenuation[bitcast<i32>(x_4053)].x;
    u_xlat72 = (x_4052 * x_4056);
    let x_4058 : f32 = u_xlat72;
    let x_4060 : f32 = u_xlat72;
    u_xlat72 = ((-(x_4058) * x_4060) + 1.0f);
    let x_4063 : f32 = u_xlat72;
    u_xlat72 = max(x_4063, 0.0f);
    let x_4065 : f32 = u_xlat72;
    let x_4066 : f32 = u_xlat72;
    u_xlat72 = (x_4065 * x_4066);
    let x_4068 : f32 = u_xlat72;
    let x_4069 : f32 = u_xlat74;
    u_xlat72 = (x_4068 * x_4069);
    let x_4071 : u32 = u_xlatu71;
    let x_4074 : vec4<f32> = x_4017.x_AdditionalLightsSpotDir[bitcast<i32>(x_4071)];
    let x_4076 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_4074.x, x_4074.y, x_4074.z), vec3<f32>(x_4076.x, x_4076.y, x_4076.z));
    let x_4079 : f32 = u_xlat74;
    let x_4080 : u32 = u_xlatu71;
    let x_4083 : f32 = x_4017.x_AdditionalLightsAttenuation[bitcast<i32>(x_4080)].z;
    let x_4085 : u32 = u_xlatu71;
    let x_4088 : f32 = x_4017.x_AdditionalLightsAttenuation[bitcast<i32>(x_4085)].w;
    u_xlat74 = ((x_4079 * x_4083) + x_4088);
    let x_4090 : f32 = u_xlat74;
    u_xlat74 = clamp(x_4090, 0.0f, 1.0f);
    let x_4092 : f32 = u_xlat74;
    let x_4093 : f32 = u_xlat74;
    u_xlat74 = (x_4092 * x_4093);
    let x_4095 : f32 = u_xlat72;
    let x_4096 : f32 = u_xlat74;
    u_xlat72 = (x_4095 * x_4096);
    let x_4099 : u32 = u_xlatu71;
    u_xlatu74 = (x_4099 >> 5u);
    let x_4102 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_4102) & 31i)));
    let x_4108 : i32 = u_xlati75;
    let x_4110 : u32 = u_xlatu74;
    let x_4113 : f32 = x_3538.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4110)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_4108) & bitcast<u32>(x_4113)));
    let x_4117 : i32 = u_xlati74;
    if ((x_4117 != 0i)) {
      let x_4127 : u32 = u_xlatu71;
      let x_4130 : f32 = x_4126.x_AdditionalLightsLightTypes[bitcast<i32>(x_4127)].el;
      u_xlati74 = i32(x_4130);
      let x_4132 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4132 != 0i));
      let x_4136 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_4136) << bitcast<u32>(2i));
      let x_4139 : i32 = u_xlati75;
      if ((x_4139 != 0i)) {
        let x_4143 : vec3<f32> = vs_INTERP0;
        let x_4145 : i32 = u_xlati76;
        let x_4148 : i32 = u_xlati76;
        let x_4152 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4145 + 1i) / 4i)][((x_4148 + 1i) % 4i)];
        let x_4154 : vec3<f32> = (vec3<f32>(x_4143.y, x_4143.y, x_4143.y) * vec3<f32>(x_4152.x, x_4152.y, x_4152.w));
        let x_4155 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4154.x, x_4154.y, x_4154.z, x_4155.w);
        let x_4157 : i32 = u_xlati76;
        let x_4159 : i32 = u_xlati76;
        let x_4162 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[(x_4157 / 4i)][(x_4159 % 4i)];
        let x_4164 : vec3<f32> = vs_INTERP0;
        let x_4167 : vec4<f32> = u_xlat11;
        let x_4169 : vec3<f32> = ((vec3<f32>(x_4162.x, x_4162.y, x_4162.w) * vec3<f32>(x_4164.x, x_4164.x, x_4164.x)) + vec3<f32>(x_4167.x, x_4167.y, x_4167.z));
        let x_4170 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4169.x, x_4169.y, x_4169.z, x_4170.w);
        let x_4172 : i32 = u_xlati76;
        let x_4175 : i32 = u_xlati76;
        let x_4179 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4172 + 2i) / 4i)][((x_4175 + 2i) % 4i)];
        let x_4181 : vec3<f32> = vs_INTERP0;
        let x_4184 : vec4<f32> = u_xlat11;
        let x_4186 : vec3<f32> = ((vec3<f32>(x_4179.x, x_4179.y, x_4179.w) * vec3<f32>(x_4181.z, x_4181.z, x_4181.z)) + vec3<f32>(x_4184.x, x_4184.y, x_4184.z));
        let x_4187 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4186.x, x_4186.y, x_4186.z, x_4187.w);
        let x_4189 : vec4<f32> = u_xlat11;
        let x_4191 : i32 = u_xlati76;
        let x_4194 : i32 = u_xlati76;
        let x_4198 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4191 + 3i) / 4i)][((x_4194 + 3i) % 4i)];
        let x_4200 : vec3<f32> = (vec3<f32>(x_4189.x, x_4189.y, x_4189.z) + vec3<f32>(x_4198.x, x_4198.y, x_4198.w));
        let x_4201 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4200.x, x_4200.y, x_4200.z, x_4201.w);
        let x_4203 : vec4<f32> = u_xlat11;
        let x_4205 : vec4<f32> = u_xlat11;
        let x_4207 : vec2<f32> = (vec2<f32>(x_4203.x, x_4203.y) / vec2<f32>(x_4205.z, x_4205.z));
        let x_4208 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4207.x, x_4207.y, x_4208.z, x_4208.w);
        let x_4210 : vec4<f32> = u_xlat11;
        let x_4213 : vec2<f32> = ((vec2<f32>(x_4210.x, x_4210.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4214 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4213.x, x_4213.y, x_4214.z, x_4214.w);
        let x_4216 : vec4<f32> = u_xlat11;
        let x_4220 : vec2<f32> = clamp(vec2<f32>(x_4216.x, x_4216.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4221 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4220.x, x_4220.y, x_4221.z, x_4221.w);
        let x_4223 : u32 = u_xlatu71;
        let x_4226 : vec4<f32> = x_4126.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4223)];
        let x_4228 : vec4<f32> = u_xlat11;
        let x_4231 : u32 = u_xlatu71;
        let x_4234 : vec4<f32> = x_4126.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4231)];
        let x_4236 : vec2<f32> = ((vec2<f32>(x_4226.x, x_4226.y) * vec2<f32>(x_4228.x, x_4228.y)) + vec2<f32>(x_4234.z, x_4234.w));
        let x_4237 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4236.x, x_4236.y, x_4237.z, x_4237.w);
      } else {
        let x_4241 : i32 = u_xlati74;
        u_xlatb74 = (x_4241 == 1i);
        let x_4243 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4243);
        let x_4245 : i32 = u_xlati74;
        if ((x_4245 != 0i)) {
          let x_4249 : vec3<f32> = vs_INTERP0;
          let x_4251 : i32 = u_xlati76;
          let x_4254 : i32 = u_xlati76;
          let x_4258 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4251 + 1i) / 4i)][((x_4254 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4249.y, x_4249.y) * vec2<f32>(x_4258.x, x_4258.y));
          let x_4261 : i32 = u_xlati76;
          let x_4263 : i32 = u_xlati76;
          let x_4266 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[(x_4261 / 4i)][(x_4263 % 4i)];
          let x_4268 : vec3<f32> = vs_INTERP0;
          let x_4271 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4266.x, x_4266.y) * vec2<f32>(x_4268.x, x_4268.x)) + x_4271);
          let x_4273 : i32 = u_xlati76;
          let x_4276 : i32 = u_xlati76;
          let x_4280 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4273 + 2i) / 4i)][((x_4276 + 2i) % 4i)];
          let x_4282 : vec3<f32> = vs_INTERP0;
          let x_4285 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4280.x, x_4280.y) * vec2<f32>(x_4282.z, x_4282.z)) + x_4285);
          let x_4287 : vec2<f32> = u_xlat55;
          let x_4288 : i32 = u_xlati76;
          let x_4291 : i32 = u_xlati76;
          let x_4295 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4288 + 3i) / 4i)][((x_4291 + 3i) % 4i)];
          u_xlat55 = (x_4287 + vec2<f32>(x_4295.x, x_4295.y));
          let x_4298 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4298 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4301 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4301);
          let x_4303 : u32 = u_xlatu71;
          let x_4306 : vec4<f32> = x_4126.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4303)];
          let x_4308 : vec2<f32> = u_xlat55;
          let x_4310 : u32 = u_xlatu71;
          let x_4313 : vec4<f32> = x_4126.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4310)];
          let x_4315 : vec2<f32> = ((vec2<f32>(x_4306.x, x_4306.y) * x_4308) + vec2<f32>(x_4313.z, x_4313.w));
          let x_4316 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4315.x, x_4315.y, x_4316.z, x_4316.w);
        } else {
          let x_4319 : vec3<f32> = vs_INTERP0;
          let x_4321 : i32 = u_xlati76;
          let x_4324 : i32 = u_xlati76;
          let x_4328 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4321 + 1i) / 4i)][((x_4324 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4319.y, x_4319.y, x_4319.y, x_4319.y) * x_4328);
          let x_4330 : i32 = u_xlati76;
          let x_4332 : i32 = u_xlati76;
          let x_4335 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[(x_4330 / 4i)][(x_4332 % 4i)];
          let x_4336 : vec3<f32> = vs_INTERP0;
          let x_4339 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4335 * vec4<f32>(x_4336.x, x_4336.x, x_4336.x, x_4336.x)) + x_4339);
          let x_4341 : i32 = u_xlati76;
          let x_4344 : i32 = u_xlati76;
          let x_4348 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4341 + 2i) / 4i)][((x_4344 + 2i) % 4i)];
          let x_4349 : vec3<f32> = vs_INTERP0;
          let x_4352 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4348 * vec4<f32>(x_4349.z, x_4349.z, x_4349.z, x_4349.z)) + x_4352);
          let x_4354 : vec4<f32> = u_xlat12;
          let x_4355 : i32 = u_xlati76;
          let x_4358 : i32 = u_xlati76;
          let x_4362 : vec4<f32> = x_4126.x_AdditionalLightsWorldToLights[((x_4355 + 3i) / 4i)][((x_4358 + 3i) % 4i)];
          u_xlat12 = (x_4354 + x_4362);
          let x_4364 : vec4<f32> = u_xlat12;
          let x_4366 : vec4<f32> = u_xlat12;
          let x_4368 : vec3<f32> = (vec3<f32>(x_4364.x, x_4364.y, x_4364.z) / vec3<f32>(x_4366.w, x_4366.w, x_4366.w));
          let x_4369 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4368.x, x_4368.y, x_4368.z, x_4369.w);
          let x_4371 : vec4<f32> = u_xlat12;
          let x_4373 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4371.x, x_4371.y, x_4371.z), vec3<f32>(x_4373.x, x_4373.y, x_4373.z));
          let x_4376 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4376);
          let x_4378 : f32 = u_xlat74;
          let x_4380 : vec4<f32> = u_xlat12;
          let x_4382 : vec3<f32> = (vec3<f32>(x_4378, x_4378, x_4378) * vec3<f32>(x_4380.x, x_4380.y, x_4380.z));
          let x_4383 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4382.x, x_4382.y, x_4382.z, x_4383.w);
          let x_4385 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4385.x, x_4385.y, x_4385.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4390 : f32 = u_xlat74;
          u_xlat74 = max(x_4390, 0.000001f);
          let x_4393 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4393);
          let x_4395 : f32 = u_xlat74;
          let x_4397 : vec4<f32> = u_xlat12;
          let x_4399 : vec3<f32> = (vec3<f32>(x_4395, x_4395, x_4395) * vec3<f32>(x_4397.z, x_4397.x, x_4397.y));
          let x_4400 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4399.x, x_4399.y, x_4399.z, x_4400.w);
          let x_4403 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4403);
          let x_4407 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4407, 0.0f, 1.0f);
          let x_4411 : vec4<f32> = u_xlat13;
          let x_4414 : vec4<bool> = (vec4<f32>(x_4411.y, x_4411.z, x_4411.y, x_4411.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4414.x, x_4414.y);
          let x_4417 : bool = u_xlatb55.x;
          if (x_4417) {
            let x_4422 : f32 = u_xlat13.x;
            x_4418 = x_4422;
          } else {
            let x_4425 : f32 = u_xlat13.x;
            x_4418 = -(x_4425);
          }
          let x_4427 : f32 = x_4418;
          u_xlat55.x = x_4427;
          let x_4430 : bool = u_xlatb55.y;
          if (x_4430) {
            let x_4435 : f32 = u_xlat13.x;
            x_4431 = x_4435;
          } else {
            let x_4438 : f32 = u_xlat13.x;
            x_4431 = -(x_4438);
          }
          let x_4440 : f32 = x_4431;
          u_xlat55.y = x_4440;
          let x_4442 : vec4<f32> = u_xlat12;
          let x_4444 : f32 = u_xlat74;
          let x_4447 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4442.x, x_4442.y) * vec2<f32>(x_4444, x_4444)) + x_4447);
          let x_4449 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4449 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4452 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4452, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4456 : u32 = u_xlatu71;
          let x_4459 : vec4<f32> = x_4126.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4456)];
          let x_4461 : vec2<f32> = u_xlat55;
          let x_4463 : u32 = u_xlatu71;
          let x_4466 : vec4<f32> = x_4126.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4463)];
          let x_4468 : vec2<f32> = ((vec2<f32>(x_4459.x, x_4459.y) * x_4461) + vec2<f32>(x_4466.z, x_4466.w));
          let x_4469 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4468.x, x_4468.y, x_4469.z, x_4469.w);
        }
      }
      let x_4476 : vec4<f32> = u_xlat11;
      let x_4479 : f32 = x_160.x_GlobalMipBias.x;
      let x_4480 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4476.x, x_4476.y), x_4479);
      u_xlat11 = x_4480;
      let x_4482 : bool = u_xlatb47.y;
      if (x_4482) {
        let x_4487 : f32 = u_xlat11.w;
        x_4483 = x_4487;
      } else {
        let x_4490 : f32 = u_xlat11.x;
        x_4483 = x_4490;
      }
      let x_4491 : f32 = x_4483;
      u_xlat74 = x_4491;
      let x_4493 : bool = u_xlatb47.x;
      if (x_4493) {
        let x_4497 : vec4<f32> = u_xlat11;
        x_4494 = vec3<f32>(x_4497.x, x_4497.y, x_4497.z);
      } else {
        let x_4500 : f32 = u_xlat74;
        x_4494 = vec3<f32>(x_4500, x_4500, x_4500);
      }
      let x_4502 : vec3<f32> = x_4494;
      let x_4503 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4502.x, x_4502.y, x_4502.z, x_4503.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4509 : vec4<f32> = u_xlat11;
    let x_4511 : u32 = u_xlatu71;
    let x_4514 : vec4<f32> = x_4017.x_AdditionalLightsColor[bitcast<i32>(x_4511)];
    let x_4516 : vec3<f32> = (vec3<f32>(x_4509.x, x_4509.y, x_4509.z) * vec3<f32>(x_4514.x, x_4514.y, x_4514.z));
    let x_4517 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4516.x, x_4516.y, x_4516.z, x_4517.w);
    let x_4519 : f32 = u_xlat50;
    let x_4521 : vec4<f32> = u_xlat11;
    let x_4523 : vec3<f32> = (vec3<f32>(x_4519, x_4519, x_4519) * vec3<f32>(x_4521.x, x_4521.y, x_4521.z));
    let x_4524 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4523.x, x_4523.y, x_4523.z, x_4524.w);
    let x_4526 : vec4<f32> = u_xlat4;
    let x_4528 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_4526.x, x_4526.y, x_4526.z), vec3<f32>(x_4528.x, x_4528.y, x_4528.z));
    let x_4531 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4531, 0.0f, 1.0f);
    let x_4533 : f32 = u_xlat71;
    let x_4534 : f32 = u_xlat72;
    u_xlat71 = (x_4533 * x_4534);
    let x_4536 : f32 = u_xlat71;
    let x_4538 : vec4<f32> = u_xlat11;
    let x_4540 : vec3<f32> = (vec3<f32>(x_4536, x_4536, x_4536) * vec3<f32>(x_4538.x, x_4538.y, x_4538.z));
    let x_4541 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4540.x, x_4540.y, x_4540.z, x_4541.w);
    let x_4543 : vec4<f32> = u_xlat9;
    let x_4545 : f32 = u_xlat73;
    let x_4548 : vec3<f32> = u_xlat5;
    let x_4549 : vec3<f32> = ((vec3<f32>(x_4543.x, x_4543.y, x_4543.z) * vec3<f32>(x_4545, x_4545, x_4545)) + x_4548);
    let x_4550 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4549.x, x_4549.y, x_4549.z, x_4550.w);
    let x_4552 : vec4<f32> = u_xlat9;
    let x_4554 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4552.x, x_4552.y, x_4552.z), vec3<f32>(x_4554.x, x_4554.y, x_4554.z));
    let x_4557 : f32 = u_xlat71;
    u_xlat71 = max(x_4557, 1.17549435e-37f);
    let x_4559 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4559);
    let x_4561 : f32 = u_xlat71;
    let x_4563 : vec4<f32> = u_xlat9;
    let x_4565 : vec3<f32> = (vec3<f32>(x_4561, x_4561, x_4561) * vec3<f32>(x_4563.x, x_4563.y, x_4563.z));
    let x_4566 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4565.x, x_4565.y, x_4565.z, x_4566.w);
    let x_4568 : vec4<f32> = u_xlat4;
    let x_4570 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4568.x, x_4568.y, x_4568.z), vec3<f32>(x_4570.x, x_4570.y, x_4570.z));
    let x_4573 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4573, 0.0f, 1.0f);
    let x_4575 : vec4<f32> = u_xlat10;
    let x_4577 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4575.x, x_4575.y, x_4575.z), vec3<f32>(x_4577.x, x_4577.y, x_4577.z));
    let x_4580 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4580, 0.0f, 1.0f);
    let x_4582 : f32 = u_xlat71;
    let x_4583 : f32 = u_xlat71;
    u_xlat71 = (x_4582 * x_4583);
    let x_4585 : f32 = u_xlat71;
    let x_4587 : f32 = u_xlat3.x;
    u_xlat71 = ((x_4585 * x_4587) + 1.000010014f);
    let x_4590 : f32 = u_xlat72;
    let x_4591 : f32 = u_xlat72;
    u_xlat72 = (x_4590 * x_4591);
    let x_4593 : f32 = u_xlat71;
    let x_4594 : f32 = u_xlat71;
    u_xlat71 = (x_4593 * x_4594);
    let x_4596 : f32 = u_xlat72;
    u_xlat72 = max(x_4596, 0.100000001f);
    let x_4598 : f32 = u_xlat71;
    let x_4599 : f32 = u_xlat72;
    u_xlat71 = (x_4598 * x_4599);
    let x_4601 : f32 = u_xlat28;
    let x_4602 : f32 = u_xlat71;
    u_xlat71 = (x_4601 * x_4602);
    let x_4604 : f32 = u_xlat70;
    let x_4605 : f32 = u_xlat71;
    u_xlat71 = (x_4604 / x_4605);
    let x_4607 : f32 = u_xlat71;
    let x_4610 : vec3<f32> = u_xlat7;
    let x_4611 : vec3<f32> = ((vec3<f32>(x_4607, x_4607, x_4607) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4610);
    let x_4612 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4611.x, x_4611.y, x_4611.z, x_4612.w);
    let x_4614 : vec4<f32> = u_xlat9;
    let x_4616 : vec4<f32> = u_xlat11;
    let x_4619 : vec4<f32> = u_xlat8;
    let x_4621 : vec3<f32> = ((vec3<f32>(x_4614.x, x_4614.y, x_4614.z) * vec3<f32>(x_4616.x, x_4616.y, x_4616.z)) + vec3<f32>(x_4619.x, x_4619.y, x_4619.z));
    let x_4622 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4621.x, x_4621.y, x_4621.z, x_4622.w);

    continuing {
      let x_4624 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4624 + bitcast<u32>(1i));
    }
  }
  let x_4626 : vec3<f32> = u_xlat22;
  let x_4627 : vec4<f32> = u_xlat6;
  let x_4630 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_4626 * vec3<f32>(x_4627.x, x_4627.x, x_4627.x)) + vec3<f32>(x_4630.x, x_4630.y, x_4630.z));
  let x_4633 : vec4<f32> = u_xlat8;
  let x_4635 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4633.x, x_4633.y, x_4633.z) + x_4635);
  let x_4639 : vec4<f32> = vs_INTERP4;
  let x_4641 : vec3<f32> = u_xlat1;
  let x_4643 : vec3<f32> = u_xlat0;
  let x_4644 : vec3<f32> = ((vec3<f32>(x_4639.w, x_4639.w, x_4639.w) * x_4641) + x_4643);
  let x_4645 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4644.x, x_4644.y, x_4644.z, x_4645.w);
  let x_4647 : bool = u_xlatb25;
  let x_4648 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4648, x_4647);
  let x_4654 : u32 = x_160.x_RenderingLayerMaxInt;
  let x_4656 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4654 & bitcast<u32>(x_4656));
  let x_4659 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4659);
  let x_4664 : f32 = u_xlat0.x;
  let x_4666 : f32 = x_160.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4664 * x_4666);
  let x_4670 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4670, 0.0f, 1.0f);
  let x_4673 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4673.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

