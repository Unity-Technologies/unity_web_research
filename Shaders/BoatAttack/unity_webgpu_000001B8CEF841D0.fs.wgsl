type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_299 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_401 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3518 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3995 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4104 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec4<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_193 : f32;
  var x_206 : f32;
  var x_218 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1899 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2025 : f32;
  var u_xlatb47 : vec2<bool>;
  var x_2081 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3467 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3601 : f32;
  var x_3612 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4396 : f32;
  var x_4409 : f32;
  var x_4461 : f32;
  var x_4472 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_173 : vec3<f32> = (-(x_167) + x_172);
  let x_174 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_177 : vec4<f32> = u_xlat4;
  let x_179 : vec4<f32> = u_xlat4;
  u_xlat67 = dot(vec3<f32>(x_177.x, x_177.y, x_177.z), vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_182);
  let x_184 : f32 = u_xlat67;
  let x_186 : vec4<f32> = u_xlat4;
  let x_188 : vec3<f32> = (vec3<f32>(x_184, x_184, x_184) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_189 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_188.x, x_188.y, x_188.z, x_189.w);
  let x_192 : bool = u_xlatb0;
  if (x_192) {
    let x_197 : f32 = u_xlat4.x;
    x_193 = x_197;
  } else {
    let x_202 : f32 = x_160.unity_MatrixV[0i].z;
    x_193 = x_202;
  }
  let x_203 : f32 = x_193;
  u_xlat5.x = x_203;
  let x_205 : bool = u_xlatb0;
  if (x_205) {
    let x_210 : f32 = u_xlat4.y;
    x_206 = x_210;
  } else {
    let x_214 : f32 = x_160.unity_MatrixV[1i].z;
    x_206 = x_214;
  }
  let x_215 : f32 = x_206;
  u_xlat5.y = x_215;
  let x_217 : bool = u_xlatb0;
  if (x_217) {
    let x_222 : f32 = u_xlat4.z;
    x_218 = x_222;
  } else {
    let x_226 : f32 = x_160.unity_MatrixV[2i].z;
    x_218 = x_226;
  }
  let x_227 : f32 = x_218;
  u_xlat5.z = x_227;
  let x_229 : vec3<f32> = u_xlat5;
  let x_233 : vec4<f32> = x_95.unity_WorldToObject[1i];
  let x_235 : vec3<f32> = (vec3<f32>(x_229.y, x_229.y, x_229.y) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_239 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_241 : vec3<f32> = u_xlat5;
  let x_244 : vec4<f32> = u_xlat4;
  let x_246 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(x_241.x, x_241.x, x_241.x)) + vec3<f32>(x_244.x, x_244.y, x_244.z));
  let x_247 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_250 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_252 : vec3<f32> = u_xlat5;
  let x_255 : vec4<f32> = u_xlat4;
  let x_257 : vec3<f32> = ((vec3<f32>(x_250.x, x_250.y, x_250.z) * vec3<f32>(x_252.z, x_252.z, x_252.z)) + vec3<f32>(x_255.x, x_255.y, x_255.z));
  let x_258 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_257.x, x_257.y, x_257.z, x_258.w);
  let x_260 : vec4<f32> = u_xlat4;
  let x_262 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_260.x, x_260.y, x_260.z), vec3<f32>(x_262.x, x_262.y, x_262.z));
  let x_267 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_267);
  let x_270 : vec3<f32> = u_xlat0;
  let x_272 : vec4<f32> = u_xlat4;
  let x_274 : vec3<f32> = (vec3<f32>(x_270.x, x_270.x, x_270.x) * vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_289 : vec4<f32> = vs_INTERP3;
  let x_292 : f32 = x_160.x_GlobalMipBias.x;
  let x_293 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_289.x, x_289.y), x_292);
  u_xlat6 = x_293;
  let x_295 : vec4<f32> = u_xlat6;
  let x_301 : vec4<f32> = x_299.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_295.x, x_295.y, x_295.z) * vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_310 : vec4<f32> = vs_INTERP3;
  let x_313 : f32 = x_160.x_GlobalMipBias.x;
  let x_314 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_310.x, x_310.y), x_313);
  u_xlat8 = vec4<f32>(x_314.w, x_314.x, x_314.y, x_314.z);
  let x_317 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_317.y, x_317.z, x_317.w, x_317.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_324 : vec4<f32> = u_xlat9;
  let x_325 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_324, x_325);
  let x_329 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_329);
  let x_333 : vec3<f32> = u_xlat0;
  let x_335 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_333.x, x_333.x, x_333.x) * vec3<f32>(x_335.x, x_335.y, x_335.z));
  let x_340 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_340 * 200.0f);
  let x_345 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_345, 1.0f);
  let x_348 : vec3<f32> = u_xlat0;
  let x_350 : vec4<f32> = u_xlat6;
  let x_352 : vec3<f32> = (vec3<f32>(x_348.x, x_348.x, x_348.x) * vec3<f32>(x_350.x, x_350.y, x_350.z));
  let x_353 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_352.x, x_352.y, x_352.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat30;
  let x_359 : vec3<f32> = (vec3<f32>(x_355.x, x_355.y, x_355.z) * vec3<f32>(x_357.y, x_357.y, x_357.y));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
  let x_362 : vec3<f32> = u_xlat30;
  let x_364 : vec4<f32> = u_xlat2;
  let x_367 : vec4<f32> = u_xlat3;
  let x_369 : vec3<f32> = ((vec3<f32>(x_362.x, x_362.x, x_362.x) * vec3<f32>(x_364.x, x_364.y, x_364.z)) + vec3<f32>(x_367.x, x_367.y, x_367.z));
  let x_370 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_369.x, x_369.y, x_369.z, x_370.w);
  let x_372 : vec3<f32> = u_xlat30;
  let x_374 : vec3<f32> = u_xlat1;
  let x_376 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_372.z, x_372.z, x_372.z) * x_374) + vec3<f32>(x_376.x, x_376.y, x_376.z));
  let x_379 : vec3<f32> = u_xlat1;
  let x_380 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_379, x_380);
  let x_384 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_384, 1.17549435e-37f);
  let x_389 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_389);
  let x_392 : vec3<f32> = u_xlat0;
  let x_394 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_392.x, x_392.x, x_392.x) * x_394);
  let x_396 : vec3<f32> = vs_INTERP0;
  let x_403 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres0;
  let x_406 : vec3<f32> = (x_396 + -(vec3<f32>(x_403.x, x_403.y, x_403.z)));
  let x_407 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_406.x, x_406.y, x_406.z, x_407.w);
  let x_409 : vec3<f32> = vs_INTERP0;
  let x_411 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres1;
  let x_414 : vec3<f32> = (x_409 + -(vec3<f32>(x_411.x, x_411.y, x_411.z)));
  let x_415 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_414.x, x_414.y, x_414.z, x_415.w);
  let x_417 : vec3<f32> = vs_INTERP0;
  let x_419 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres2;
  let x_422 : vec3<f32> = (x_417 + -(vec3<f32>(x_419.x, x_419.y, x_419.z)));
  let x_423 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_422.x, x_422.y, x_422.z, x_423.w);
  let x_426 : vec3<f32> = vs_INTERP0;
  let x_429 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres3;
  let x_432 : vec3<f32> = (x_426 + -(vec3<f32>(x_429.x, x_429.y, x_429.z)));
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec4<f32> = u_xlat2;
  let x_437 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_435.x, x_435.y, x_435.z), vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_441 : vec4<f32> = u_xlat3;
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_441.x, x_441.y, x_441.z), vec3<f32>(x_443.x, x_443.y, x_443.z));
  let x_447 : vec4<f32> = u_xlat9;
  let x_449 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_447.x, x_447.y, x_447.z), vec3<f32>(x_449.x, x_449.y, x_449.z));
  let x_453 : vec4<f32> = u_xlat10;
  let x_455 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_453.x, x_453.y, x_453.z), vec3<f32>(x_455.x, x_455.y, x_455.z));
  let x_462 : vec4<f32> = u_xlat2;
  let x_465 : vec4<f32> = x_401.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_462 < x_465);
  let x_468 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_468);
  let x_472 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_472);
  let x_476 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_476);
  let x_480 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_480);
  let x_484 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_484);
  let x_489 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_489);
  let x_493 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_493);
  let x_496 : vec4<f32> = u_xlat2;
  let x_498 : vec4<f32> = u_xlat3;
  let x_500 : vec3<f32> = (vec3<f32>(x_496.x, x_496.y, x_496.z) + vec3<f32>(x_498.y, x_498.z, x_498.w));
  let x_501 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_500.x, x_500.y, x_500.z, x_501.w);
  let x_503 : vec4<f32> = u_xlat2;
  let x_506 : vec3<f32> = max(vec3<f32>(x_503.x, x_503.y, x_503.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_507 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_507.x, x_506.x, x_506.y, x_506.z);
  let x_509 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_509, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_516 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_516) + 4.0f);
  let x_522 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_522);
  let x_525 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_525) << bitcast<u32>(2i));
  let x_528 : vec3<f32> = vs_INTERP0;
  let x_530 : i32 = u_xlati0;
  let x_533 : i32 = u_xlati0;
  let x_537 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_530 + 1i) / 4i)][((x_533 + 1i) % 4i)];
  let x_539 : vec3<f32> = (vec3<f32>(x_528.y, x_528.y, x_528.y) * vec3<f32>(x_537.x, x_537.y, x_537.z));
  let x_540 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_542 : i32 = u_xlati0;
  let x_544 : i32 = u_xlati0;
  let x_547 : vec4<f32> = x_401.x_MainLightWorldToShadow[(x_542 / 4i)][(x_544 % 4i)];
  let x_549 : vec3<f32> = vs_INTERP0;
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : vec3<f32> = ((vec3<f32>(x_547.x, x_547.y, x_547.z) * vec3<f32>(x_549.x, x_549.x, x_549.x)) + vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_555 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
  let x_557 : i32 = u_xlati0;
  let x_560 : i32 = u_xlati0;
  let x_564 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_557 + 2i) / 4i)][((x_560 + 2i) % 4i)];
  let x_566 : vec3<f32> = vs_INTERP0;
  let x_569 : vec4<f32> = u_xlat2;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.x, x_564.y, x_564.z) * vec3<f32>(x_566.z, x_566.z, x_566.z)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat2;
  let x_576 : i32 = u_xlati0;
  let x_579 : i32 = u_xlati0;
  let x_583 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_576 + 3i) / 4i)][((x_579 + 3i) % 4i)];
  let x_585 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(x_583.x, x_583.y, x_583.z));
  let x_586 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_585.x, x_585.y, x_585.z, x_586.w);
  let x_590 : f32 = x_401.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_590);
  let x_592 : bool = u_xlatb0;
  if (x_592) {
    let x_597 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb67 = (x_597 == 1.0f);
    let x_599 : bool = u_xlatb67;
    if (x_599) {
      let x_602 : vec4<f32> = u_xlat2;
      let x_606 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_606);
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.x, x_609.y);
      let x_612 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_624 : vec3<f32> = txVec0;
      let x_626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_624.xy, x_624.z);
      u_xlat9.x = x_626;
      let x_629 : vec4<f32> = u_xlat3;
      let x_630 : vec2<f32> = vec2<f32>(x_629.z, x_629.w);
      let x_632 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_630.x, x_630.y, x_632);
      let x_639 : vec3<f32> = txVec1;
      let x_641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_639.xy, x_639.z);
      u_xlat9.y = x_641;
      let x_643 : vec4<f32> = u_xlat2;
      let x_647 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_643.x, x_643.y, x_643.x, x_643.y) + x_647);
      let x_650 : vec4<f32> = u_xlat3;
      let x_651 : vec2<f32> = vec2<f32>(x_650.x, x_650.y);
      let x_653 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_651.x, x_651.y, x_653);
      let x_660 : vec3<f32> = txVec2;
      let x_662 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_660.xy, x_660.z);
      u_xlat9.z = x_662;
      let x_665 : vec4<f32> = u_xlat3;
      let x_666 : vec2<f32> = vec2<f32>(x_665.z, x_665.w);
      let x_668 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_666.x, x_666.y, x_668);
      let x_675 : vec3<f32> = txVec3;
      let x_677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_675.xy, x_675.z);
      u_xlat9.w = x_677;
      let x_679 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_679, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_686 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb68 = (x_686 == 2.0f);
      let x_688 : bool = u_xlatb68;
      if (x_688) {
        let x_691 : vec4<f32> = u_xlat2;
        let x_694 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_699 : vec2<f32> = ((vec2<f32>(x_691.x, x_691.y) * vec2<f32>(x_694.z, x_694.w)) + vec2<f32>(0.5f, 0.5f));
        let x_700 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_699.x, x_699.y, x_700.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat3;
        let x_704 : vec2<f32> = floor(vec2<f32>(x_702.x, x_702.y));
        let x_705 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_704.x, x_704.y, x_705.z, x_705.w);
        let x_709 : vec4<f32> = u_xlat2;
        let x_712 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_715 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_709.x, x_709.y) * vec2<f32>(x_712.z, x_712.w)) + -(vec2<f32>(x_715.x, x_715.y)));
        let x_719 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_719.x, x_719.x, x_719.y, x_719.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_723 : vec4<f32> = u_xlat9;
        let x_725 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_723.x, x_723.x, x_723.z, x_723.z) * vec4<f32>(x_725.x, x_725.x, x_725.z, x_725.z));
        let x_728 : vec4<f32> = u_xlat10;
        let x_732 : vec2<f32> = (vec2<f32>(x_728.y, x_728.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_733 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_732.x, x_733.y, x_732.y, x_733.w);
        let x_735 : vec4<f32> = u_xlat10;
        let x_738 : vec2<f32> = u_xlat47;
        let x_740 : vec2<f32> = ((vec2<f32>(x_735.x, x_735.z) * vec2<f32>(0.5f, 0.5f)) + -(x_738));
        let x_741 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
        let x_744 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_744) + vec2<f32>(1.0f, 1.0f));
        let x_749 : vec2<f32> = u_xlat47;
        let x_751 : vec2<f32> = min(x_749, vec2<f32>(0.0f, 0.0f));
        let x_752 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_751.x, x_751.y, x_752.z, x_752.w);
        let x_754 : vec4<f32> = u_xlat11;
        let x_757 : vec4<f32> = u_xlat11;
        let x_760 : vec2<f32> = u_xlat54;
        let x_761 : vec2<f32> = ((-(vec2<f32>(x_754.x, x_754.y)) * vec2<f32>(x_757.x, x_757.y)) + x_760);
        let x_762 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
        let x_764 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_764, vec2<f32>(0.0f, 0.0f));
        let x_766 : vec2<f32> = u_xlat47;
        let x_768 : vec2<f32> = u_xlat47;
        let x_770 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_766) * x_768) + vec2<f32>(x_770.y, x_770.w));
        let x_773 : vec4<f32> = u_xlat11;
        let x_775 : vec2<f32> = (vec2<f32>(x_773.x, x_773.y) + vec2<f32>(1.0f, 1.0f));
        let x_776 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_775.x, x_775.y, x_776.z, x_776.w);
        let x_778 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_778 + vec2<f32>(1.0f, 1.0f));
        let x_781 : vec4<f32> = u_xlat10;
        let x_785 : vec2<f32> = (vec2<f32>(x_781.x, x_781.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_786 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_785.x, x_785.y, x_786.z, x_786.w);
        let x_788 : vec2<f32> = u_xlat54;
        let x_789 : vec2<f32> = (x_788 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_790 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_789.x, x_789.y, x_790.z, x_790.w);
        let x_792 : vec4<f32> = u_xlat11;
        let x_794 : vec2<f32> = (vec2<f32>(x_792.x, x_792.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_795 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_794.x, x_794.y, x_795.z, x_795.w);
        let x_798 : vec2<f32> = u_xlat47;
        let x_799 : vec2<f32> = (x_798 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_800 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_799.x, x_799.y, x_800.z, x_800.w);
        let x_802 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_802.y, x_802.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_806 : f32 = u_xlat11.x;
        u_xlat12.z = x_806;
        let x_809 : f32 = u_xlat47.x;
        u_xlat12.w = x_809;
        let x_812 : f32 = u_xlat13.x;
        u_xlat10.z = x_812;
        let x_815 : f32 = u_xlat9.x;
        u_xlat10.w = x_815;
        let x_818 : vec4<f32> = u_xlat10;
        let x_820 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_818.z, x_818.w, x_818.x, x_818.z) + vec4<f32>(x_820.z, x_820.w, x_820.x, x_820.z));
        let x_824 : f32 = u_xlat12.y;
        u_xlat11.z = x_824;
        let x_827 : f32 = u_xlat47.y;
        u_xlat11.w = x_827;
        let x_830 : f32 = u_xlat10.y;
        u_xlat13.z = x_830;
        let x_833 : f32 = u_xlat9.z;
        u_xlat13.w = x_833;
        let x_835 : vec4<f32> = u_xlat11;
        let x_837 : vec4<f32> = u_xlat13;
        let x_839 : vec3<f32> = (vec3<f32>(x_835.z, x_835.y, x_835.w) + vec3<f32>(x_837.z, x_837.y, x_837.w));
        let x_840 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_839.x, x_839.y, x_839.z, x_840.w);
        let x_842 : vec4<f32> = u_xlat10;
        let x_844 : vec4<f32> = u_xlat14;
        let x_846 : vec3<f32> = (vec3<f32>(x_842.x, x_842.z, x_842.w) / vec3<f32>(x_844.z, x_844.w, x_844.y));
        let x_847 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_846.x, x_846.y, x_846.z, x_847.w);
        let x_849 : vec4<f32> = u_xlat10;
        let x_855 : vec3<f32> = (vec3<f32>(x_849.x, x_849.y, x_849.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_856 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
        let x_858 : vec4<f32> = u_xlat13;
        let x_860 : vec4<f32> = u_xlat9;
        let x_862 : vec3<f32> = (vec3<f32>(x_858.z, x_858.y, x_858.w) / vec3<f32>(x_860.x, x_860.y, x_860.z));
        let x_863 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_862.x, x_862.y, x_862.z, x_863.w);
        let x_865 : vec4<f32> = u_xlat11;
        let x_867 : vec3<f32> = (vec3<f32>(x_865.x, x_865.y, x_865.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_868 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_867.x, x_867.y, x_867.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat10;
        let x_873 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_875 : vec3<f32> = (vec3<f32>(x_870.y, x_870.x, x_870.z) * vec3<f32>(x_873.x, x_873.x, x_873.x));
        let x_876 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_875.x, x_875.y, x_875.z, x_876.w);
        let x_878 : vec4<f32> = u_xlat11;
        let x_881 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_883 : vec3<f32> = (vec3<f32>(x_878.x, x_878.y, x_878.z) * vec3<f32>(x_881.y, x_881.y, x_881.y));
        let x_884 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_883.x, x_883.y, x_883.z, x_884.w);
        let x_887 : f32 = u_xlat11.x;
        u_xlat10.w = x_887;
        let x_889 : vec4<f32> = u_xlat3;
        let x_892 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_895 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_889.x, x_889.y, x_889.x, x_889.y) * vec4<f32>(x_892.x, x_892.y, x_892.x, x_892.y)) + vec4<f32>(x_895.y, x_895.w, x_895.x, x_895.w));
        let x_898 : vec4<f32> = u_xlat3;
        let x_901 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_904 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_898.x, x_898.y) * vec2<f32>(x_901.x, x_901.y)) + vec2<f32>(x_904.z, x_904.w));
        let x_908 : f32 = u_xlat10.y;
        u_xlat11.w = x_908;
        let x_910 : vec4<f32> = u_xlat11;
        let x_911 : vec2<f32> = vec2<f32>(x_910.y, x_910.z);
        let x_912 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_912.x, x_911.x, x_912.z, x_911.y);
        let x_914 : vec4<f32> = u_xlat3;
        let x_917 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_920 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_914.x, x_914.y, x_914.x, x_914.y) * vec4<f32>(x_917.x, x_917.y, x_917.x, x_917.y)) + vec4<f32>(x_920.x, x_920.y, x_920.z, x_920.y));
        let x_923 : vec4<f32> = u_xlat3;
        let x_926 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_929 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_923.x, x_923.y, x_923.x, x_923.y) * vec4<f32>(x_926.x, x_926.y, x_926.x, x_926.y)) + vec4<f32>(x_929.w, x_929.y, x_929.w, x_929.z));
        let x_932 : vec4<f32> = u_xlat3;
        let x_935 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_938 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_932.x, x_932.y, x_932.x, x_932.y) * vec4<f32>(x_935.x, x_935.y, x_935.x, x_935.y)) + vec4<f32>(x_938.x, x_938.w, x_938.z, x_938.w));
        let x_942 : vec4<f32> = u_xlat9;
        let x_944 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_942.x, x_942.x, x_942.x, x_942.y) * vec4<f32>(x_944.z, x_944.w, x_944.y, x_944.z));
        let x_948 : vec4<f32> = u_xlat9;
        let x_950 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_948.y, x_948.y, x_948.z, x_948.z) * x_950);
        let x_954 : f32 = u_xlat9.z;
        let x_956 : f32 = u_xlat14.y;
        u_xlat68 = (x_954 * x_956);
        let x_959 : vec4<f32> = u_xlat12;
        let x_960 : vec2<f32> = vec2<f32>(x_959.x, x_959.y);
        let x_962 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec4;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat3.x = x_971;
        let x_974 : vec4<f32> = u_xlat12;
        let x_975 : vec2<f32> = vec2<f32>(x_974.z, x_974.w);
        let x_977 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_975.x, x_975.y, x_977);
        let x_985 : vec3<f32> = txVec5;
        let x_987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_985.xy, x_985.z);
        u_xlat25 = x_987;
        let x_988 : f32 = u_xlat25;
        let x_990 : f32 = u_xlat15.y;
        u_xlat25 = (x_988 * x_990);
        let x_993 : f32 = u_xlat15.x;
        let x_995 : f32 = u_xlat3.x;
        let x_997 : f32 = u_xlat25;
        u_xlat3.x = ((x_993 * x_995) + x_997);
        let x_1001 : vec2<f32> = u_xlat47;
        let x_1003 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec6;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1010.xy, x_1010.z);
        u_xlat25 = x_1012;
        let x_1014 : f32 = u_xlat15.z;
        let x_1015 : f32 = u_xlat25;
        let x_1018 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1014 * x_1015) + x_1018);
        let x_1022 : vec4<f32> = u_xlat11;
        let x_1023 : vec2<f32> = vec2<f32>(x_1022.x, x_1022.y);
        let x_1025 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1023.x, x_1023.y, x_1025);
        let x_1032 : vec3<f32> = txVec7;
        let x_1034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1032.xy, x_1032.z);
        u_xlat25 = x_1034;
        let x_1036 : f32 = u_xlat15.w;
        let x_1037 : f32 = u_xlat25;
        let x_1040 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1036 * x_1037) + x_1040);
        let x_1044 : vec4<f32> = u_xlat13;
        let x_1045 : vec2<f32> = vec2<f32>(x_1044.x, x_1044.y);
        let x_1047 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1045.x, x_1045.y, x_1047);
        let x_1054 : vec3<f32> = txVec8;
        let x_1056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1054.xy, x_1054.z);
        u_xlat25 = x_1056;
        let x_1058 : f32 = u_xlat16.x;
        let x_1059 : f32 = u_xlat25;
        let x_1062 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1058 * x_1059) + x_1062);
        let x_1066 : vec4<f32> = u_xlat13;
        let x_1067 : vec2<f32> = vec2<f32>(x_1066.z, x_1066.w);
        let x_1069 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1067.x, x_1067.y, x_1069);
        let x_1076 : vec3<f32> = txVec9;
        let x_1078 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1076.xy, x_1076.z);
        u_xlat25 = x_1078;
        let x_1080 : f32 = u_xlat16.y;
        let x_1081 : f32 = u_xlat25;
        let x_1084 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1080 * x_1081) + x_1084);
        let x_1088 : vec4<f32> = u_xlat11;
        let x_1089 : vec2<f32> = vec2<f32>(x_1088.z, x_1088.w);
        let x_1091 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1089.x, x_1089.y, x_1091);
        let x_1098 : vec3<f32> = txVec10;
        let x_1100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1098.xy, x_1098.z);
        u_xlat25 = x_1100;
        let x_1102 : f32 = u_xlat16.z;
        let x_1103 : f32 = u_xlat25;
        let x_1106 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1102 * x_1103) + x_1106);
        let x_1110 : vec4<f32> = u_xlat10;
        let x_1111 : vec2<f32> = vec2<f32>(x_1110.x, x_1110.y);
        let x_1113 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1111.x, x_1111.y, x_1113);
        let x_1120 : vec3<f32> = txVec11;
        let x_1122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1120.xy, x_1120.z);
        u_xlat25 = x_1122;
        let x_1124 : f32 = u_xlat16.w;
        let x_1125 : f32 = u_xlat25;
        let x_1128 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1124 * x_1125) + x_1128);
        let x_1132 : vec4<f32> = u_xlat10;
        let x_1133 : vec2<f32> = vec2<f32>(x_1132.z, x_1132.w);
        let x_1135 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1133.x, x_1133.y, x_1135);
        let x_1142 : vec3<f32> = txVec12;
        let x_1144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1142.xy, x_1142.z);
        u_xlat25 = x_1144;
        let x_1145 : f32 = u_xlat68;
        let x_1146 : f32 = u_xlat25;
        let x_1149 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1145 * x_1146) + x_1149);
      } else {
        let x_1152 : vec4<f32> = u_xlat2;
        let x_1155 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1158 : vec2<f32> = ((vec2<f32>(x_1152.x, x_1152.y) * vec2<f32>(x_1155.z, x_1155.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1159 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1158.x, x_1158.y, x_1159.z, x_1159.w);
        let x_1161 : vec4<f32> = u_xlat3;
        let x_1163 : vec2<f32> = floor(vec2<f32>(x_1161.x, x_1161.y));
        let x_1164 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1163.x, x_1163.y, x_1164.z, x_1164.w);
        let x_1166 : vec4<f32> = u_xlat2;
        let x_1169 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1172 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1166.x, x_1166.y) * vec2<f32>(x_1169.z, x_1169.w)) + -(vec2<f32>(x_1172.x, x_1172.y)));
        let x_1176 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1176.x, x_1176.x, x_1176.y, x_1176.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1179 : vec4<f32> = u_xlat9;
        let x_1181 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1179.x, x_1179.x, x_1179.z, x_1179.z) * vec4<f32>(x_1181.x, x_1181.x, x_1181.z, x_1181.z));
        let x_1184 : vec4<f32> = u_xlat10;
        let x_1188 : vec2<f32> = (vec2<f32>(x_1184.y, x_1184.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1189 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1189.x, x_1188.x, x_1189.z, x_1188.y);
        let x_1191 : vec4<f32> = u_xlat10;
        let x_1194 : vec2<f32> = u_xlat47;
        let x_1196 : vec2<f32> = ((vec2<f32>(x_1191.x, x_1191.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1194));
        let x_1197 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1196.x, x_1197.y, x_1196.y, x_1197.w);
        let x_1199 : vec2<f32> = u_xlat47;
        let x_1201 : vec2<f32> = (-(x_1199) + vec2<f32>(1.0f, 1.0f));
        let x_1202 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1201.x, x_1201.y, x_1202.z, x_1202.w);
        let x_1204 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1204, vec2<f32>(0.0f, 0.0f));
        let x_1206 : vec2<f32> = u_xlat54;
        let x_1208 : vec2<f32> = u_xlat54;
        let x_1210 : vec4<f32> = u_xlat10;
        let x_1212 : vec2<f32> = ((-(x_1206) * x_1208) + vec2<f32>(x_1210.x, x_1210.y));
        let x_1213 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1212.x, x_1212.y, x_1213.z, x_1213.w);
        let x_1215 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1215, vec2<f32>(0.0f, 0.0f));
        let x_1218 : vec2<f32> = u_xlat54;
        let x_1220 : vec2<f32> = u_xlat54;
        let x_1222 : vec4<f32> = u_xlat9;
        let x_1224 : vec2<f32> = ((-(x_1218) * x_1220) + vec2<f32>(x_1222.y, x_1222.w));
        let x_1225 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1224.x, x_1225.y, x_1224.y);
        let x_1227 : vec4<f32> = u_xlat10;
        let x_1230 : vec2<f32> = (vec2<f32>(x_1227.x, x_1227.y) + vec2<f32>(2.0f, 2.0f));
        let x_1231 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1230.x, x_1230.y, x_1231.z, x_1231.w);
        let x_1233 : vec3<f32> = u_xlat31;
        let x_1235 : vec2<f32> = (vec2<f32>(x_1233.x, x_1233.z) + vec2<f32>(2.0f, 2.0f));
        let x_1236 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1236.x, x_1235.x, x_1236.z, x_1235.y);
        let x_1239 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1239 * 0.081632003f);
        let x_1243 : vec4<f32> = u_xlat9;
        let x_1246 : vec3<f32> = (vec3<f32>(x_1243.z, x_1243.x, x_1243.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1247 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1246.x, x_1246.y, x_1246.z, x_1247.w);
        let x_1249 : vec4<f32> = u_xlat10;
        let x_1252 : vec2<f32> = (vec2<f32>(x_1249.x, x_1249.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1253 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1252.x, x_1252.y, x_1253.z, x_1253.w);
        let x_1256 : f32 = u_xlat13.y;
        u_xlat12.x = x_1256;
        let x_1258 : vec2<f32> = u_xlat47;
        let x_1265 : vec2<f32> = ((vec2<f32>(x_1258.x, x_1258.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1266 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1266.x, x_1265.x, x_1266.z, x_1265.y);
        let x_1268 : vec2<f32> = u_xlat47;
        let x_1272 : vec2<f32> = ((vec2<f32>(x_1268.x, x_1268.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1273 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1272.x, x_1273.y, x_1272.y, x_1273.w);
        let x_1276 : f32 = u_xlat9.x;
        u_xlat10.y = x_1276;
        let x_1279 : f32 = u_xlat11.y;
        u_xlat10.w = x_1279;
        let x_1281 : vec4<f32> = u_xlat10;
        let x_1282 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1281 + x_1282);
        let x_1284 : vec2<f32> = u_xlat47;
        let x_1287 : vec2<f32> = ((vec2<f32>(x_1284.y, x_1284.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1288 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1288.x, x_1287.x, x_1288.z, x_1287.y);
        let x_1290 : vec2<f32> = u_xlat47;
        let x_1293 : vec2<f32> = ((vec2<f32>(x_1290.y, x_1290.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1294 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1293.x, x_1294.y, x_1293.y, x_1294.w);
        let x_1297 : f32 = u_xlat9.y;
        u_xlat11.y = x_1297;
        let x_1299 : vec4<f32> = u_xlat11;
        let x_1300 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1299 + x_1300);
        let x_1302 : vec4<f32> = u_xlat10;
        let x_1303 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1302 / x_1303);
        let x_1305 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1305 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1311 : vec4<f32> = u_xlat11;
        let x_1312 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1311 / x_1312);
        let x_1314 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1314 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1316 : vec4<f32> = u_xlat10;
        let x_1319 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1316.w, x_1316.x, x_1316.y, x_1316.z) * vec4<f32>(x_1319.x, x_1319.x, x_1319.x, x_1319.x));
        let x_1322 : vec4<f32> = u_xlat11;
        let x_1325 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1322.x, x_1322.w, x_1322.y, x_1322.z) * vec4<f32>(x_1325.y, x_1325.y, x_1325.y, x_1325.y));
        let x_1328 : vec4<f32> = u_xlat10;
        let x_1329 : vec3<f32> = vec3<f32>(x_1328.y, x_1328.z, x_1328.w);
        let x_1330 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1329.x, x_1330.y, x_1329.y, x_1329.z);
        let x_1333 : f32 = u_xlat11.x;
        u_xlat13.y = x_1333;
        let x_1335 : vec4<f32> = u_xlat3;
        let x_1338 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1341 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1335.x, x_1335.y, x_1335.x, x_1335.y) * vec4<f32>(x_1338.x, x_1338.y, x_1338.x, x_1338.y)) + vec4<f32>(x_1341.x, x_1341.y, x_1341.z, x_1341.y));
        let x_1344 : vec4<f32> = u_xlat3;
        let x_1347 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1350 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1344.x, x_1344.y) * vec2<f32>(x_1347.x, x_1347.y)) + vec2<f32>(x_1350.w, x_1350.y));
        let x_1354 : f32 = u_xlat13.y;
        u_xlat10.y = x_1354;
        let x_1357 : f32 = u_xlat11.z;
        u_xlat13.y = x_1357;
        let x_1359 : vec4<f32> = u_xlat3;
        let x_1362 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1365 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1359.x, x_1359.y, x_1359.x, x_1359.y) * vec4<f32>(x_1362.x, x_1362.y, x_1362.x, x_1362.y)) + vec4<f32>(x_1365.x, x_1365.y, x_1365.z, x_1365.y));
        let x_1368 : vec4<f32> = u_xlat3;
        let x_1371 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1374 : vec4<f32> = u_xlat13;
        let x_1376 : vec2<f32> = ((vec2<f32>(x_1368.x, x_1368.y) * vec2<f32>(x_1371.x, x_1371.y)) + vec2<f32>(x_1374.w, x_1374.y));
        let x_1377 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1376.x, x_1376.y, x_1377.z, x_1377.w);
        let x_1380 : f32 = u_xlat13.y;
        u_xlat10.z = x_1380;
        let x_1383 : vec4<f32> = u_xlat3;
        let x_1386 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1389 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1383.x, x_1383.y, x_1383.x, x_1383.y) * vec4<f32>(x_1386.x, x_1386.y, x_1386.x, x_1386.y)) + vec4<f32>(x_1389.x, x_1389.y, x_1389.x, x_1389.z));
        let x_1393 : f32 = u_xlat11.w;
        u_xlat13.y = x_1393;
        let x_1396 : vec4<f32> = u_xlat3;
        let x_1399 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1402 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1396.x, x_1396.y, x_1396.x, x_1396.y) * vec4<f32>(x_1399.x, x_1399.y, x_1399.x, x_1399.y)) + vec4<f32>(x_1402.x, x_1402.y, x_1402.z, x_1402.y));
        let x_1406 : vec4<f32> = u_xlat3;
        let x_1409 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1412 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1406.x, x_1406.y) * vec2<f32>(x_1409.x, x_1409.y)) + vec2<f32>(x_1412.w, x_1412.y));
        let x_1416 : f32 = u_xlat13.y;
        u_xlat10.w = x_1416;
        let x_1419 : vec4<f32> = u_xlat3;
        let x_1422 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1425 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1419.x, x_1419.y) * vec2<f32>(x_1422.x, x_1422.y)) + vec2<f32>(x_1425.x, x_1425.w));
        let x_1428 : vec4<f32> = u_xlat13;
        let x_1429 : vec3<f32> = vec3<f32>(x_1428.x, x_1428.z, x_1428.w);
        let x_1430 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1429.x, x_1430.y, x_1429.y, x_1429.z);
        let x_1432 : vec4<f32> = u_xlat3;
        let x_1435 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1438 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1432.x, x_1432.y, x_1432.x, x_1432.y) * vec4<f32>(x_1435.x, x_1435.y, x_1435.x, x_1435.y)) + vec4<f32>(x_1438.x, x_1438.y, x_1438.z, x_1438.y));
        let x_1442 : vec4<f32> = u_xlat3;
        let x_1445 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1448 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1442.x, x_1442.y) * vec2<f32>(x_1445.x, x_1445.y)) + vec2<f32>(x_1448.w, x_1448.y));
        let x_1452 : f32 = u_xlat10.x;
        u_xlat11.x = x_1452;
        let x_1454 : vec4<f32> = u_xlat3;
        let x_1457 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1460 : vec4<f32> = u_xlat11;
        let x_1462 : vec2<f32> = ((vec2<f32>(x_1454.x, x_1454.y) * vec2<f32>(x_1457.x, x_1457.y)) + vec2<f32>(x_1460.x, x_1460.y));
        let x_1463 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1462.x, x_1462.y, x_1463.z, x_1463.w);
        let x_1466 : vec4<f32> = u_xlat9;
        let x_1468 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1466.x, x_1466.x, x_1466.x, x_1466.x) * x_1468);
        let x_1471 : vec4<f32> = u_xlat9;
        let x_1473 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1471.y, x_1471.y, x_1471.y, x_1471.y) * x_1473);
        let x_1476 : vec4<f32> = u_xlat9;
        let x_1478 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1476.z, x_1476.z, x_1476.z, x_1476.z) * x_1478);
        let x_1480 : vec4<f32> = u_xlat9;
        let x_1482 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1480.w, x_1480.w, x_1480.w, x_1480.w) * x_1482);
        let x_1485 : vec4<f32> = u_xlat14;
        let x_1486 : vec2<f32> = vec2<f32>(x_1485.x, x_1485.y);
        let x_1488 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1486.x, x_1486.y, x_1488);
        let x_1495 : vec3<f32> = txVec13;
        let x_1497 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1495.xy, x_1495.z);
        u_xlat68 = x_1497;
        let x_1499 : vec4<f32> = u_xlat14;
        let x_1500 : vec2<f32> = vec2<f32>(x_1499.z, x_1499.w);
        let x_1502 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1500.x, x_1500.y, x_1502);
        let x_1510 : vec3<f32> = txVec14;
        let x_1512 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1510.xy, x_1510.z);
        u_xlat70 = x_1512;
        let x_1513 : f32 = u_xlat70;
        let x_1515 : f32 = u_xlat19.y;
        u_xlat70 = (x_1513 * x_1515);
        let x_1518 : f32 = u_xlat19.x;
        let x_1519 : f32 = u_xlat68;
        let x_1521 : f32 = u_xlat70;
        u_xlat68 = ((x_1518 * x_1519) + x_1521);
        let x_1524 : vec2<f32> = u_xlat47;
        let x_1526 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1524.x, x_1524.y, x_1526);
        let x_1533 : vec3<f32> = txVec15;
        let x_1535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1533.xy, x_1533.z);
        u_xlat47.x = x_1535;
        let x_1538 : f32 = u_xlat19.z;
        let x_1540 : f32 = u_xlat47.x;
        let x_1542 : f32 = u_xlat68;
        u_xlat68 = ((x_1538 * x_1540) + x_1542);
        let x_1545 : vec4<f32> = u_xlat17;
        let x_1546 : vec2<f32> = vec2<f32>(x_1545.x, x_1545.y);
        let x_1548 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1546.x, x_1546.y, x_1548);
        let x_1555 : vec3<f32> = txVec16;
        let x_1557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1555.xy, x_1555.z);
        u_xlat47.x = x_1557;
        let x_1560 : f32 = u_xlat19.w;
        let x_1562 : f32 = u_xlat47.x;
        let x_1564 : f32 = u_xlat68;
        u_xlat68 = ((x_1560 * x_1562) + x_1564);
        let x_1567 : vec4<f32> = u_xlat15;
        let x_1568 : vec2<f32> = vec2<f32>(x_1567.x, x_1567.y);
        let x_1570 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1568.x, x_1568.y, x_1570);
        let x_1577 : vec3<f32> = txVec17;
        let x_1579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1577.xy, x_1577.z);
        u_xlat47.x = x_1579;
        let x_1582 : f32 = u_xlat20.x;
        let x_1584 : f32 = u_xlat47.x;
        let x_1586 : f32 = u_xlat68;
        u_xlat68 = ((x_1582 * x_1584) + x_1586);
        let x_1589 : vec4<f32> = u_xlat15;
        let x_1590 : vec2<f32> = vec2<f32>(x_1589.z, x_1589.w);
        let x_1592 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1590.x, x_1590.y, x_1592);
        let x_1599 : vec3<f32> = txVec18;
        let x_1601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1599.xy, x_1599.z);
        u_xlat47.x = x_1601;
        let x_1604 : f32 = u_xlat20.y;
        let x_1606 : f32 = u_xlat47.x;
        let x_1608 : f32 = u_xlat68;
        u_xlat68 = ((x_1604 * x_1606) + x_1608);
        let x_1611 : vec4<f32> = u_xlat16;
        let x_1612 : vec2<f32> = vec2<f32>(x_1611.x, x_1611.y);
        let x_1614 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1612.x, x_1612.y, x_1614);
        let x_1621 : vec3<f32> = txVec19;
        let x_1623 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1621.xy, x_1621.z);
        u_xlat47.x = x_1623;
        let x_1626 : f32 = u_xlat20.z;
        let x_1628 : f32 = u_xlat47.x;
        let x_1630 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat17;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.z, x_1633.w);
        let x_1636 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec20;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1643.xy, x_1643.z);
        u_xlat47.x = x_1645;
        let x_1648 : f32 = u_xlat20.w;
        let x_1650 : f32 = u_xlat47.x;
        let x_1652 : f32 = u_xlat68;
        u_xlat68 = ((x_1648 * x_1650) + x_1652);
        let x_1655 : vec4<f32> = u_xlat18;
        let x_1656 : vec2<f32> = vec2<f32>(x_1655.x, x_1655.y);
        let x_1658 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1656.x, x_1656.y, x_1658);
        let x_1665 : vec3<f32> = txVec21;
        let x_1667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1665.xy, x_1665.z);
        u_xlat47.x = x_1667;
        let x_1670 : f32 = u_xlat21.x;
        let x_1672 : f32 = u_xlat47.x;
        let x_1674 : f32 = u_xlat68;
        u_xlat68 = ((x_1670 * x_1672) + x_1674);
        let x_1677 : vec4<f32> = u_xlat18;
        let x_1678 : vec2<f32> = vec2<f32>(x_1677.z, x_1677.w);
        let x_1680 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1678.x, x_1678.y, x_1680);
        let x_1687 : vec3<f32> = txVec22;
        let x_1689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1687.xy, x_1687.z);
        u_xlat47.x = x_1689;
        let x_1692 : f32 = u_xlat21.y;
        let x_1694 : f32 = u_xlat47.x;
        let x_1696 : f32 = u_xlat68;
        u_xlat68 = ((x_1692 * x_1694) + x_1696);
        let x_1699 : vec2<f32> = u_xlat32;
        let x_1701 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1699.x, x_1699.y, x_1701);
        let x_1708 : vec3<f32> = txVec23;
        let x_1710 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1708.xy, x_1708.z);
        u_xlat47.x = x_1710;
        let x_1713 : f32 = u_xlat21.z;
        let x_1715 : f32 = u_xlat47.x;
        let x_1717 : f32 = u_xlat68;
        u_xlat68 = ((x_1713 * x_1715) + x_1717);
        let x_1720 : vec2<f32> = u_xlat60;
        let x_1722 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1720.x, x_1720.y, x_1722);
        let x_1729 : vec3<f32> = txVec24;
        let x_1731 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1729.xy, x_1729.z);
        u_xlat47.x = x_1731;
        let x_1734 : f32 = u_xlat21.w;
        let x_1736 : f32 = u_xlat47.x;
        let x_1738 : f32 = u_xlat68;
        u_xlat68 = ((x_1734 * x_1736) + x_1738);
        let x_1741 : vec4<f32> = u_xlat13;
        let x_1742 : vec2<f32> = vec2<f32>(x_1741.x, x_1741.y);
        let x_1744 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1742.x, x_1742.y, x_1744);
        let x_1751 : vec3<f32> = txVec25;
        let x_1753 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1751.xy, x_1751.z);
        u_xlat47.x = x_1753;
        let x_1756 : f32 = u_xlat9.x;
        let x_1758 : f32 = u_xlat47.x;
        let x_1760 : f32 = u_xlat68;
        u_xlat68 = ((x_1756 * x_1758) + x_1760);
        let x_1763 : vec4<f32> = u_xlat13;
        let x_1764 : vec2<f32> = vec2<f32>(x_1763.z, x_1763.w);
        let x_1766 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1764.x, x_1764.y, x_1766);
        let x_1773 : vec3<f32> = txVec26;
        let x_1775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1773.xy, x_1773.z);
        u_xlat47.x = x_1775;
        let x_1778 : f32 = u_xlat9.y;
        let x_1780 : f32 = u_xlat47.x;
        let x_1782 : f32 = u_xlat68;
        u_xlat68 = ((x_1778 * x_1780) + x_1782);
        let x_1785 : vec2<f32> = u_xlat55;
        let x_1787 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1785.x, x_1785.y, x_1787);
        let x_1794 : vec3<f32> = txVec27;
        let x_1796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1794.xy, x_1794.z);
        u_xlat47.x = x_1796;
        let x_1799 : f32 = u_xlat9.z;
        let x_1801 : f32 = u_xlat47.x;
        let x_1803 : f32 = u_xlat68;
        u_xlat68 = ((x_1799 * x_1801) + x_1803);
        let x_1806 : vec4<f32> = u_xlat3;
        let x_1807 : vec2<f32> = vec2<f32>(x_1806.x, x_1806.y);
        let x_1809 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1807.x, x_1807.y, x_1809);
        let x_1816 : vec3<f32> = txVec28;
        let x_1818 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1816.xy, x_1816.z);
        u_xlat3.x = x_1818;
        let x_1821 : f32 = u_xlat9.w;
        let x_1823 : f32 = u_xlat3.x;
        let x_1825 : f32 = u_xlat68;
        u_xlat67 = ((x_1821 * x_1823) + x_1825);
      }
    }
  } else {
    let x_1829 : vec4<f32> = u_xlat2;
    let x_1830 : vec2<f32> = vec2<f32>(x_1829.x, x_1829.y);
    let x_1832 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1830.x, x_1830.y, x_1832);
    let x_1839 : vec3<f32> = txVec29;
    let x_1841 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1839.xy, x_1839.z);
    u_xlat67 = x_1841;
  }
  let x_1843 : f32 = x_401.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1843) + 1.0f);
  let x_1846 : f32 = u_xlat67;
  let x_1848 : f32 = x_401.x_MainLightShadowParams.x;
  let x_1850 : f32 = u_xlat68;
  u_xlat67 = ((x_1846 * x_1848) + x_1850);
  let x_1854 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1854);
  let x_1858 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1858 >= 1.0f);
  let x_1860 : bool = u_xlatb25;
  let x_1861 : bool = u_xlatb3;
  u_xlatb3 = (x_1860 | x_1861);
  let x_1863 : bool = u_xlatb3;
  let x_1864 : f32 = u_xlat67;
  u_xlat67 = select(x_1864, 1.0f, x_1863);
  let x_1866 : vec3<f32> = u_xlat1;
  let x_1868 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1866, -(vec3<f32>(x_1868.x, x_1868.y, x_1868.z)));
  let x_1874 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1874, 0.0f, 1.0f);
  let x_1878 : f32 = u_xlat67;
  let x_1881 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1878, x_1878, x_1878) * vec3<f32>(x_1881.x, x_1881.y, x_1881.z));
  let x_1884 : vec3<f32> = u_xlat23;
  let x_1885 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1884 * vec3<f32>(x_1885.x, x_1885.x, x_1885.x));
  let x_1888 : vec3<f32> = u_xlat1;
  let x_1889 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1888 * vec3<f32>(x_1889.x, x_1889.y, x_1889.z));
  let x_1893 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1893 < 0.0f);
  let x_1896 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1896 + 1.0f);
  let x_1898 : bool = u_xlatb67;
  if (x_1898) {
    let x_1902 : f32 = u_xlat25;
    x_1899 = x_1902;
  } else {
    let x_1905 : f32 = x_95.unity_LODFade.x;
    x_1899 = x_1905;
  }
  let x_1906 : f32 = x_1899;
  u_xlat67 = x_1906;
  let x_1907 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1907);
  let x_1909 : vec4<f32> = u_xlat4;
  let x_1914 : vec4<f32> = x_160.x_ScreenParams;
  let x_1916 : vec3<f32> = (abs(vec3<f32>(x_1909.x, x_1909.y, x_1909.z)) * vec3<f32>(x_1914.x, x_1914.y, x_1914.x));
  let x_1917 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1916.x, x_1916.y, x_1916.z, x_1917.w);
  let x_1922 : vec4<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(vec3<f32>(x_1922.x, x_1922.y, x_1922.z));
  let x_1927 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1927 * 1025u);
  let x_1931 : u32 = u_xlatu47;
  u_xlatu69 = (x_1931 >> 6u);
  let x_1935 : u32 = u_xlatu69;
  let x_1936 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1935 ^ x_1936));
  let x_1939 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1939) * 9u);
  let x_1943 : u32 = u_xlatu47;
  u_xlatu69 = (x_1943 >> 11u);
  let x_1946 : u32 = u_xlatu69;
  let x_1947 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1946 ^ x_1947));
  let x_1950 : i32 = u_xlati47;
  u_xlati47 = (x_1950 * 32769i);
  let x_1953 : i32 = u_xlati47;
  let x_1956 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1953) ^ x_1956));
  let x_1959 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1959) * 1025u);
  let x_1962 : u32 = u_xlatu47;
  u_xlatu69 = (x_1962 >> 6u);
  let x_1964 : u32 = u_xlatu69;
  let x_1965 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1964 ^ x_1965));
  let x_1968 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1968) * 9u);
  let x_1971 : u32 = u_xlatu47;
  u_xlatu69 = (x_1971 >> 11u);
  let x_1973 : u32 = u_xlatu69;
  let x_1974 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1973 ^ x_1974));
  let x_1977 : i32 = u_xlati47;
  u_xlati47 = (x_1977 * 32769i);
  let x_1979 : i32 = u_xlati47;
  let x_1982 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1979) ^ x_1982));
  let x_1985 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1985) * 1025u);
  let x_1988 : u32 = u_xlatu47;
  u_xlatu69 = (x_1988 >> 6u);
  let x_1990 : u32 = u_xlatu69;
  let x_1991 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1990 ^ x_1991));
  let x_1994 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1994) * 9u);
  let x_1997 : u32 = u_xlatu47;
  u_xlatu69 = (x_1997 >> 11u);
  let x_1999 : u32 = u_xlatu69;
  let x_2000 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1999 ^ x_2000));
  let x_2003 : i32 = u_xlati47;
  u_xlati47 = (x_2003 * 32769i);
  param = 1065353216i;
  let x_2009 : i32 = u_xlati47;
  param_1 = x_2009;
  param_2 = 0i;
  param_3 = 23i;
  let x_2012 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_2012);
  let x_2016 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2016 + -1.0f);
  let x_2021 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_2021) + 1.0f);
  let x_2024 : bool = u_xlatb25;
  if (x_2024) {
    let x_2029 : f32 = u_xlat47.x;
    x_2025 = x_2029;
  } else {
    let x_2031 : f32 = u_xlat69;
    x_2025 = x_2031;
  }
  let x_2032 : f32 = x_2025;
  u_xlat25 = x_2032;
  let x_2033 : f32 = u_xlat67;
  let x_2035 : f32 = u_xlat25;
  u_xlat67 = ((x_2033 * 2.0f) + -(x_2035));
  let x_2038 : f32 = u_xlat67;
  let x_2040 : f32 = u_xlat6.w;
  u_xlat25 = (x_2038 * x_2040);
  let x_2043 : f32 = u_xlat25;
  u_xlatb47.x = (x_2043 >= 0.400000006f);
  let x_2048 : bool = u_xlatb47.x;
  let x_2049 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2049, x_2048);
  let x_2053 : f32 = u_xlat6.w;
  let x_2054 : f32 = u_xlat67;
  u_xlat67 = ((x_2053 * x_2054) + -0.400000006f);
  let x_2058 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2058);
  let x_2060 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2060);
  let x_2062 : f32 = u_xlat25;
  let x_2064 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2062) + abs(x_2064));
  let x_2067 : f32 = u_xlat25;
  u_xlat25 = max(x_2067, 0.0001f);
  let x_2070 : f32 = u_xlat67;
  let x_2071 : f32 = u_xlat25;
  u_xlat67 = (x_2070 / x_2071);
  let x_2073 : f32 = u_xlat67;
  u_xlat67 = (x_2073 + 0.5f);
  let x_2075 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2075, 0.0f, 1.0f);
  let x_2078 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2078 == 0.0f));
  let x_2080 : bool = u_xlatb25;
  if (x_2080) {
    let x_2084 : f32 = u_xlat67;
    x_2081 = x_2084;
  } else {
    let x_2087 : f32 = u_xlat47.x;
    x_2081 = x_2087;
  }
  let x_2088 : f32 = x_2081;
  u_xlat67 = x_2088;
  let x_2089 : f32 = u_xlat67;
  u_xlat47.x = (x_2089 + -0.0001f);
  let x_2094 : f32 = u_xlat47.x;
  u_xlatb47.x = (x_2094 < 0.0f);
  let x_2098 : bool = u_xlatb47.x;
  if (((select(0i, 1i, x_2098) * -1i) != 0i)) {
    discard;
  }
  let x_2106 : vec3<f32> = u_xlat22;
  let x_2107 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2106 * vec3<f32>(x_2107.y, x_2107.y, x_2107.y));
  let x_2110 : vec3<f32> = u_xlat30;
  let x_2112 : vec4<f32> = vs_INTERP2;
  let x_2115 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2110.x, x_2110.x, x_2110.x) * vec3<f32>(x_2112.x, x_2112.y, x_2112.z)) + x_2115);
  let x_2117 : vec3<f32> = u_xlat30;
  let x_2119 : vec3<f32> = vs_INTERP1;
  let x_2121 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2117.z, x_2117.z, x_2117.z) * x_2119) + x_2121);
  let x_2123 : vec3<f32> = u_xlat22;
  let x_2124 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2123, x_2124);
  let x_2128 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2128);
  let x_2131 : vec3<f32> = u_xlat22;
  let x_2132 : vec2<f32> = u_xlat47;
  u_xlat22 = (x_2131 * vec3<f32>(x_2132.x, x_2132.x, x_2132.x));
  let x_2142 : vec2<f32> = vs_INTERP5;
  let x_2144 : f32 = x_160.x_GlobalMipBias.x;
  let x_2145 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2142, x_2144);
  u_xlat4 = x_2145;
  let x_2150 : vec2<f32> = vs_INTERP5;
  let x_2152 : f32 = x_160.x_GlobalMipBias.x;
  let x_2153 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2150, x_2152);
  let x_2154 : vec3<f32> = vec3<f32>(x_2153.x, x_2153.y, x_2153.z);
  let x_2155 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2154.x, x_2154.y, x_2154.z, x_2155.w);
  let x_2157 : vec4<f32> = u_xlat4;
  let x_2160 : vec3<f32> = (vec3<f32>(x_2157.x, x_2157.y, x_2157.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2161 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2160.x, x_2160.y, x_2160.z, x_2161.w);
  let x_2163 : vec3<f32> = u_xlat22;
  let x_2164 : vec4<f32> = u_xlat4;
  u_xlat47.x = dot(x_2163, vec3<f32>(x_2164.x, x_2164.y, x_2164.z));
  let x_2169 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2169 + 0.5f);
  let x_2172 : vec2<f32> = u_xlat47;
  let x_2174 : vec4<f32> = u_xlat6;
  let x_2176 : vec3<f32> = (vec3<f32>(x_2172.x, x_2172.x, x_2172.x) * vec3<f32>(x_2174.x, x_2174.y, x_2174.z));
  let x_2177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2176.x, x_2176.y, x_2176.z, x_2177.w);
  let x_2180 : f32 = u_xlat4.w;
  u_xlat47.x = max(x_2180, 0.0001f);
  let x_2183 : vec4<f32> = u_xlat4;
  let x_2185 : vec2<f32> = u_xlat47;
  let x_2187 : vec3<f32> = (vec3<f32>(x_2183.x, x_2183.y, x_2183.z) / vec3<f32>(x_2185.x, x_2185.x, x_2185.x));
  let x_2188 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2187.x, x_2187.y, x_2187.z, x_2188.w);
  let x_2191 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2192 : vec2<f32> = vec2<f32>(x_2191.x, x_2191.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2192.x, x_2192.y));
  let x_2197 : vec2<f32> = u_xlat47;
  let x_2198 : vec4<f32> = hlslcc_FragCoord;
  let x_2200 : vec2<f32> = (x_2197 * vec2<f32>(x_2198.x, x_2198.y));
  let x_2201 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2200.x, x_2200.y, x_2201.z, x_2201.w);
  let x_2204 : f32 = u_xlat6.y;
  let x_2207 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2210 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2204 * x_2207) + x_2210);
  let x_2214 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2214) + 1.0f);
  let x_2219 : f32 = u_xlat8.x;
  u_xlat8.x = x_2219;
  let x_2222 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2222, 0.0f, 1.0f);
  let x_2225 : f32 = u_xlat67;
  u_xlat67 = x_2225;
  let x_2226 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2226, 0.0f, 1.0f);
  let x_2228 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2228 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2233 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2233) + 1.0f);
  let x_2238 : f32 = u_xlat47.x;
  let x_2240 : f32 = u_xlat47.x;
  u_xlat69 = (x_2238 * x_2240);
  let x_2242 : f32 = u_xlat69;
  u_xlat69 = max(x_2242, 0.0078125f);
  let x_2245 : f32 = u_xlat69;
  let x_2246 : f32 = u_xlat69;
  u_xlat70 = (x_2245 * x_2246);
  let x_2250 : f32 = u_xlat8.x;
  u_xlat71 = (x_2250 + 0.040000021f);
  let x_2253 : f32 = u_xlat71;
  u_xlat71 = min(x_2253, 1.0f);
  let x_2256 : f32 = u_xlat69;
  u_xlat28 = ((x_2256 * 4.0f) + 2.0f);
  let x_2264 : vec4<f32> = u_xlat6;
  let x_2267 : f32 = x_160.x_GlobalMipBias.x;
  let x_2268 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2264.x, x_2264.z), x_2267);
  u_xlat6.x = x_2268.x;
  let x_2273 : f32 = u_xlat6.x;
  u_xlat50 = (x_2273 + -1.0f);
  let x_2276 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2277 : f32 = u_xlat50;
  u_xlat50 = ((x_2276 * x_2277) + 1.0f);
  let x_2281 : f32 = u_xlat6.x;
  let x_2283 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2281, x_2283);
  let x_2286 : bool = u_xlatb0;
  if (x_2286) {
    let x_2290 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2290 == 1.0f);
    let x_2292 : bool = u_xlatb0;
    if (x_2292) {
      let x_2295 : vec4<f32> = u_xlat2;
      let x_2298 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2295.x, x_2295.y, x_2295.x, x_2295.y) + x_2298);
      let x_2301 : vec4<f32> = u_xlat8;
      let x_2302 : vec2<f32> = vec2<f32>(x_2301.x, x_2301.y);
      let x_2304 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2302.x, x_2302.y, x_2304);
      let x_2311 : vec3<f32> = txVec30;
      let x_2313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2311.xy, x_2311.z);
      u_xlat9.x = x_2313;
      let x_2316 : vec4<f32> = u_xlat8;
      let x_2317 : vec2<f32> = vec2<f32>(x_2316.z, x_2316.w);
      let x_2319 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2317.x, x_2317.y, x_2319);
      let x_2326 : vec3<f32> = txVec31;
      let x_2328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2326.xy, x_2326.z);
      u_xlat9.y = x_2328;
      let x_2330 : vec4<f32> = u_xlat2;
      let x_2333 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2330.x, x_2330.y, x_2330.x, x_2330.y) + x_2333);
      let x_2336 : vec4<f32> = u_xlat8;
      let x_2337 : vec2<f32> = vec2<f32>(x_2336.x, x_2336.y);
      let x_2339 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2337.x, x_2337.y, x_2339);
      let x_2346 : vec3<f32> = txVec32;
      let x_2348 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2346.xy, x_2346.z);
      u_xlat9.z = x_2348;
      let x_2351 : vec4<f32> = u_xlat8;
      let x_2352 : vec2<f32> = vec2<f32>(x_2351.z, x_2351.w);
      let x_2354 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2352.x, x_2352.y, x_2354);
      let x_2361 : vec3<f32> = txVec33;
      let x_2363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2361.xy, x_2361.z);
      u_xlat9.w = x_2363;
      let x_2365 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2365, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2371 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2371 == 2.0f);
      let x_2373 : bool = u_xlatb72;
      if (x_2373) {
        let x_2376 : vec4<f32> = u_xlat2;
        let x_2379 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2382 : vec2<f32> = ((vec2<f32>(x_2376.x, x_2376.y) * vec2<f32>(x_2379.z, x_2379.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2383 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2382.x, x_2382.y, x_2383.z, x_2383.w);
        let x_2385 : vec4<f32> = u_xlat8;
        let x_2387 : vec2<f32> = floor(vec2<f32>(x_2385.x, x_2385.y));
        let x_2388 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2387.x, x_2387.y, x_2388.z, x_2388.w);
        let x_2391 : vec4<f32> = u_xlat2;
        let x_2394 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2397 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2391.x, x_2391.y) * vec2<f32>(x_2394.z, x_2394.w)) + -(vec2<f32>(x_2397.x, x_2397.y)));
        let x_2401 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2401.x, x_2401.x, x_2401.y, x_2401.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2404 : vec4<f32> = u_xlat9;
        let x_2406 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2404.x, x_2404.x, x_2404.z, x_2404.z) * vec4<f32>(x_2406.x, x_2406.x, x_2406.z, x_2406.z));
        let x_2409 : vec4<f32> = u_xlat10;
        let x_2411 : vec2<f32> = (vec2<f32>(x_2409.y, x_2409.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2412 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2411.x, x_2412.y, x_2411.y, x_2412.w);
        let x_2414 : vec4<f32> = u_xlat10;
        let x_2417 : vec2<f32> = u_xlat52;
        let x_2419 : vec2<f32> = ((vec2<f32>(x_2414.x, x_2414.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2417));
        let x_2420 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2419.x, x_2419.y, x_2420.z, x_2420.w);
        let x_2422 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2422) + vec2<f32>(1.0f, 1.0f));
        let x_2425 : vec2<f32> = u_xlat52;
        let x_2426 : vec2<f32> = min(x_2425, vec2<f32>(0.0f, 0.0f));
        let x_2427 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2426.x, x_2426.y, x_2427.z, x_2427.w);
        let x_2429 : vec4<f32> = u_xlat11;
        let x_2432 : vec4<f32> = u_xlat11;
        let x_2435 : vec2<f32> = u_xlat54;
        let x_2436 : vec2<f32> = ((-(vec2<f32>(x_2429.x, x_2429.y)) * vec2<f32>(x_2432.x, x_2432.y)) + x_2435);
        let x_2437 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2436.x, x_2436.y, x_2437.z, x_2437.w);
        let x_2439 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2439, vec2<f32>(0.0f, 0.0f));
        let x_2441 : vec2<f32> = u_xlat52;
        let x_2443 : vec2<f32> = u_xlat52;
        let x_2445 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2441) * x_2443) + vec2<f32>(x_2445.y, x_2445.w));
        let x_2448 : vec4<f32> = u_xlat11;
        let x_2450 : vec2<f32> = (vec2<f32>(x_2448.x, x_2448.y) + vec2<f32>(1.0f, 1.0f));
        let x_2451 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2450.x, x_2450.y, x_2451.z, x_2451.w);
        let x_2453 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2453 + vec2<f32>(1.0f, 1.0f));
        let x_2455 : vec4<f32> = u_xlat10;
        let x_2457 : vec2<f32> = (vec2<f32>(x_2455.x, x_2455.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2458 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2457.x, x_2457.y, x_2458.z, x_2458.w);
        let x_2460 : vec2<f32> = u_xlat54;
        let x_2461 : vec2<f32> = (x_2460 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2462 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2461.x, x_2461.y, x_2462.z, x_2462.w);
        let x_2464 : vec4<f32> = u_xlat11;
        let x_2466 : vec2<f32> = (vec2<f32>(x_2464.x, x_2464.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2467 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2466.x, x_2466.y, x_2467.z, x_2467.w);
        let x_2469 : vec2<f32> = u_xlat52;
        let x_2470 : vec2<f32> = (x_2469 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2471 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2470.x, x_2470.y, x_2471.z, x_2471.w);
        let x_2473 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2473.y, x_2473.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2477 : f32 = u_xlat11.x;
        u_xlat12.z = x_2477;
        let x_2480 : f32 = u_xlat52.x;
        u_xlat12.w = x_2480;
        let x_2483 : f32 = u_xlat13.x;
        u_xlat10.z = x_2483;
        let x_2486 : f32 = u_xlat9.x;
        u_xlat10.w = x_2486;
        let x_2488 : vec4<f32> = u_xlat10;
        let x_2490 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2488.z, x_2488.w, x_2488.x, x_2488.z) + vec4<f32>(x_2490.z, x_2490.w, x_2490.x, x_2490.z));
        let x_2494 : f32 = u_xlat12.y;
        u_xlat11.z = x_2494;
        let x_2497 : f32 = u_xlat52.y;
        u_xlat11.w = x_2497;
        let x_2500 : f32 = u_xlat10.y;
        u_xlat13.z = x_2500;
        let x_2503 : f32 = u_xlat9.z;
        u_xlat13.w = x_2503;
        let x_2505 : vec4<f32> = u_xlat11;
        let x_2507 : vec4<f32> = u_xlat13;
        let x_2509 : vec3<f32> = (vec3<f32>(x_2505.z, x_2505.y, x_2505.w) + vec3<f32>(x_2507.z, x_2507.y, x_2507.w));
        let x_2510 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2509.x, x_2509.y, x_2509.z, x_2510.w);
        let x_2512 : vec4<f32> = u_xlat10;
        let x_2514 : vec4<f32> = u_xlat14;
        let x_2516 : vec3<f32> = (vec3<f32>(x_2512.x, x_2512.z, x_2512.w) / vec3<f32>(x_2514.z, x_2514.w, x_2514.y));
        let x_2517 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2516.x, x_2516.y, x_2516.z, x_2517.w);
        let x_2519 : vec4<f32> = u_xlat10;
        let x_2521 : vec3<f32> = (vec3<f32>(x_2519.x, x_2519.y, x_2519.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2522 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2521.x, x_2521.y, x_2521.z, x_2522.w);
        let x_2524 : vec4<f32> = u_xlat13;
        let x_2526 : vec4<f32> = u_xlat9;
        let x_2528 : vec3<f32> = (vec3<f32>(x_2524.z, x_2524.y, x_2524.w) / vec3<f32>(x_2526.x, x_2526.y, x_2526.z));
        let x_2529 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2528.x, x_2528.y, x_2528.z, x_2529.w);
        let x_2531 : vec4<f32> = u_xlat11;
        let x_2533 : vec3<f32> = (vec3<f32>(x_2531.x, x_2531.y, x_2531.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2534 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2533.x, x_2533.y, x_2533.z, x_2534.w);
        let x_2536 : vec4<f32> = u_xlat10;
        let x_2539 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2541 : vec3<f32> = (vec3<f32>(x_2536.y, x_2536.x, x_2536.z) * vec3<f32>(x_2539.x, x_2539.x, x_2539.x));
        let x_2542 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2541.x, x_2541.y, x_2541.z, x_2542.w);
        let x_2544 : vec4<f32> = u_xlat11;
        let x_2547 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2549 : vec3<f32> = (vec3<f32>(x_2544.x, x_2544.y, x_2544.z) * vec3<f32>(x_2547.y, x_2547.y, x_2547.y));
        let x_2550 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2549.x, x_2549.y, x_2549.z, x_2550.w);
        let x_2553 : f32 = u_xlat11.x;
        u_xlat10.w = x_2553;
        let x_2555 : vec4<f32> = u_xlat8;
        let x_2558 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2561 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2555.x, x_2555.y, x_2555.x, x_2555.y) * vec4<f32>(x_2558.x, x_2558.y, x_2558.x, x_2558.y)) + vec4<f32>(x_2561.y, x_2561.w, x_2561.x, x_2561.w));
        let x_2564 : vec4<f32> = u_xlat8;
        let x_2567 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2570 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2564.x, x_2564.y) * vec2<f32>(x_2567.x, x_2567.y)) + vec2<f32>(x_2570.z, x_2570.w));
        let x_2574 : f32 = u_xlat10.y;
        u_xlat11.w = x_2574;
        let x_2576 : vec4<f32> = u_xlat11;
        let x_2577 : vec2<f32> = vec2<f32>(x_2576.y, x_2576.z);
        let x_2578 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2578.x, x_2577.x, x_2578.z, x_2577.y);
        let x_2580 : vec4<f32> = u_xlat8;
        let x_2583 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2586 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2580.x, x_2580.y, x_2580.x, x_2580.y) * vec4<f32>(x_2583.x, x_2583.y, x_2583.x, x_2583.y)) + vec4<f32>(x_2586.x, x_2586.y, x_2586.z, x_2586.y));
        let x_2589 : vec4<f32> = u_xlat8;
        let x_2592 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2595 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2589.x, x_2589.y, x_2589.x, x_2589.y) * vec4<f32>(x_2592.x, x_2592.y, x_2592.x, x_2592.y)) + vec4<f32>(x_2595.w, x_2595.y, x_2595.w, x_2595.z));
        let x_2598 : vec4<f32> = u_xlat8;
        let x_2601 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2604 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2598.x, x_2598.y, x_2598.x, x_2598.y) * vec4<f32>(x_2601.x, x_2601.y, x_2601.x, x_2601.y)) + vec4<f32>(x_2604.x, x_2604.w, x_2604.z, x_2604.w));
        let x_2607 : vec4<f32> = u_xlat9;
        let x_2609 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2607.x, x_2607.x, x_2607.x, x_2607.y) * vec4<f32>(x_2609.z, x_2609.w, x_2609.y, x_2609.z));
        let x_2612 : vec4<f32> = u_xlat9;
        let x_2614 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2612.y, x_2612.y, x_2612.z, x_2612.z) * x_2614);
        let x_2618 : f32 = u_xlat9.z;
        let x_2620 : f32 = u_xlat14.y;
        u_xlat72 = (x_2618 * x_2620);
        let x_2623 : vec4<f32> = u_xlat12;
        let x_2624 : vec2<f32> = vec2<f32>(x_2623.x, x_2623.y);
        let x_2626 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2624.x, x_2624.y, x_2626);
        let x_2634 : vec3<f32> = txVec34;
        let x_2636 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2634.xy, x_2634.z);
        u_xlat73 = x_2636;
        let x_2638 : vec4<f32> = u_xlat12;
        let x_2639 : vec2<f32> = vec2<f32>(x_2638.z, x_2638.w);
        let x_2641 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2639.x, x_2639.y, x_2641);
        let x_2648 : vec3<f32> = txVec35;
        let x_2650 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2648.xy, x_2648.z);
        u_xlat8.x = x_2650;
        let x_2653 : f32 = u_xlat8.x;
        let x_2655 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2653 * x_2655);
        let x_2659 : f32 = u_xlat15.x;
        let x_2660 : f32 = u_xlat73;
        let x_2663 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2659 * x_2660) + x_2663);
        let x_2666 : vec2<f32> = u_xlat52;
        let x_2668 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2666.x, x_2666.y, x_2668);
        let x_2675 : vec3<f32> = txVec36;
        let x_2677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2675.xy, x_2675.z);
        u_xlat8.x = x_2677;
        let x_2680 : f32 = u_xlat15.z;
        let x_2682 : f32 = u_xlat8.x;
        let x_2684 : f32 = u_xlat73;
        u_xlat73 = ((x_2680 * x_2682) + x_2684);
        let x_2687 : vec4<f32> = u_xlat11;
        let x_2688 : vec2<f32> = vec2<f32>(x_2687.x, x_2687.y);
        let x_2690 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2688.x, x_2688.y, x_2690);
        let x_2697 : vec3<f32> = txVec37;
        let x_2699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2697.xy, x_2697.z);
        u_xlat8.x = x_2699;
        let x_2702 : f32 = u_xlat15.w;
        let x_2704 : f32 = u_xlat8.x;
        let x_2706 : f32 = u_xlat73;
        u_xlat73 = ((x_2702 * x_2704) + x_2706);
        let x_2709 : vec4<f32> = u_xlat13;
        let x_2710 : vec2<f32> = vec2<f32>(x_2709.x, x_2709.y);
        let x_2712 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2710.x, x_2710.y, x_2712);
        let x_2719 : vec3<f32> = txVec38;
        let x_2721 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2719.xy, x_2719.z);
        u_xlat8.x = x_2721;
        let x_2724 : f32 = u_xlat16.x;
        let x_2726 : f32 = u_xlat8.x;
        let x_2728 : f32 = u_xlat73;
        u_xlat73 = ((x_2724 * x_2726) + x_2728);
        let x_2731 : vec4<f32> = u_xlat13;
        let x_2732 : vec2<f32> = vec2<f32>(x_2731.z, x_2731.w);
        let x_2734 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2732.x, x_2732.y, x_2734);
        let x_2741 : vec3<f32> = txVec39;
        let x_2743 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2741.xy, x_2741.z);
        u_xlat8.x = x_2743;
        let x_2746 : f32 = u_xlat16.y;
        let x_2748 : f32 = u_xlat8.x;
        let x_2750 : f32 = u_xlat73;
        u_xlat73 = ((x_2746 * x_2748) + x_2750);
        let x_2753 : vec4<f32> = u_xlat11;
        let x_2754 : vec2<f32> = vec2<f32>(x_2753.z, x_2753.w);
        let x_2756 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2754.x, x_2754.y, x_2756);
        let x_2763 : vec3<f32> = txVec40;
        let x_2765 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2763.xy, x_2763.z);
        u_xlat8.x = x_2765;
        let x_2768 : f32 = u_xlat16.z;
        let x_2770 : f32 = u_xlat8.x;
        let x_2772 : f32 = u_xlat73;
        u_xlat73 = ((x_2768 * x_2770) + x_2772);
        let x_2775 : vec4<f32> = u_xlat10;
        let x_2776 : vec2<f32> = vec2<f32>(x_2775.x, x_2775.y);
        let x_2778 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2776.x, x_2776.y, x_2778);
        let x_2785 : vec3<f32> = txVec41;
        let x_2787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2785.xy, x_2785.z);
        u_xlat8.x = x_2787;
        let x_2790 : f32 = u_xlat16.w;
        let x_2792 : f32 = u_xlat8.x;
        let x_2794 : f32 = u_xlat73;
        u_xlat73 = ((x_2790 * x_2792) + x_2794);
        let x_2797 : vec4<f32> = u_xlat10;
        let x_2798 : vec2<f32> = vec2<f32>(x_2797.z, x_2797.w);
        let x_2800 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2798.x, x_2798.y, x_2800);
        let x_2807 : vec3<f32> = txVec42;
        let x_2809 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2807.xy, x_2807.z);
        u_xlat8.x = x_2809;
        let x_2811 : f32 = u_xlat72;
        let x_2813 : f32 = u_xlat8.x;
        let x_2815 : f32 = u_xlat73;
        u_xlat0.x = ((x_2811 * x_2813) + x_2815);
      } else {
        let x_2819 : vec4<f32> = u_xlat2;
        let x_2822 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2825 : vec2<f32> = ((vec2<f32>(x_2819.x, x_2819.y) * vec2<f32>(x_2822.z, x_2822.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2826 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2825.x, x_2825.y, x_2826.z, x_2826.w);
        let x_2828 : vec4<f32> = u_xlat8;
        let x_2830 : vec2<f32> = floor(vec2<f32>(x_2828.x, x_2828.y));
        let x_2831 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2830.x, x_2830.y, x_2831.z, x_2831.w);
        let x_2833 : vec4<f32> = u_xlat2;
        let x_2836 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2839 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2833.x, x_2833.y) * vec2<f32>(x_2836.z, x_2836.w)) + -(vec2<f32>(x_2839.x, x_2839.y)));
        let x_2843 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2843.x, x_2843.x, x_2843.y, x_2843.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2846 : vec4<f32> = u_xlat9;
        let x_2848 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2846.x, x_2846.x, x_2846.z, x_2846.z) * vec4<f32>(x_2848.x, x_2848.x, x_2848.z, x_2848.z));
        let x_2851 : vec4<f32> = u_xlat10;
        let x_2853 : vec2<f32> = (vec2<f32>(x_2851.y, x_2851.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2854 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2854.x, x_2853.x, x_2854.z, x_2853.y);
        let x_2856 : vec4<f32> = u_xlat10;
        let x_2859 : vec2<f32> = u_xlat52;
        let x_2861 : vec2<f32> = ((vec2<f32>(x_2856.x, x_2856.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2859));
        let x_2862 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2861.x, x_2862.y, x_2861.y, x_2862.w);
        let x_2864 : vec2<f32> = u_xlat52;
        let x_2866 : vec2<f32> = (-(x_2864) + vec2<f32>(1.0f, 1.0f));
        let x_2867 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2866.x, x_2866.y, x_2867.z, x_2867.w);
        let x_2869 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2869, vec2<f32>(0.0f, 0.0f));
        let x_2871 : vec2<f32> = u_xlat54;
        let x_2873 : vec2<f32> = u_xlat54;
        let x_2875 : vec4<f32> = u_xlat10;
        let x_2877 : vec2<f32> = ((-(x_2871) * x_2873) + vec2<f32>(x_2875.x, x_2875.y));
        let x_2878 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2877.x, x_2877.y, x_2878.z, x_2878.w);
        let x_2880 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2880, vec2<f32>(0.0f, 0.0f));
        let x_2882 : vec2<f32> = u_xlat54;
        let x_2884 : vec2<f32> = u_xlat54;
        let x_2886 : vec4<f32> = u_xlat9;
        let x_2888 : vec2<f32> = ((-(x_2882) * x_2884) + vec2<f32>(x_2886.y, x_2886.w));
        let x_2889 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2888.x, x_2889.y, x_2888.y);
        let x_2891 : vec4<f32> = u_xlat10;
        let x_2893 : vec2<f32> = (vec2<f32>(x_2891.x, x_2891.y) + vec2<f32>(2.0f, 2.0f));
        let x_2894 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2893.x, x_2893.y, x_2894.z, x_2894.w);
        let x_2896 : vec3<f32> = u_xlat31;
        let x_2898 : vec2<f32> = (vec2<f32>(x_2896.x, x_2896.z) + vec2<f32>(2.0f, 2.0f));
        let x_2899 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2899.x, x_2898.x, x_2899.z, x_2898.y);
        let x_2902 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2902 * 0.081632003f);
        let x_2905 : vec4<f32> = u_xlat9;
        let x_2907 : vec3<f32> = (vec3<f32>(x_2905.z, x_2905.x, x_2905.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2908 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2907.x, x_2907.y, x_2907.z, x_2908.w);
        let x_2910 : vec4<f32> = u_xlat10;
        let x_2912 : vec2<f32> = (vec2<f32>(x_2910.x, x_2910.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2913 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2912.x, x_2912.y, x_2913.z, x_2913.w);
        let x_2916 : f32 = u_xlat13.y;
        u_xlat12.x = x_2916;
        let x_2918 : vec2<f32> = u_xlat52;
        let x_2921 : vec2<f32> = ((vec2<f32>(x_2918.x, x_2918.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2922 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2922.x, x_2921.x, x_2922.z, x_2921.y);
        let x_2924 : vec2<f32> = u_xlat52;
        let x_2927 : vec2<f32> = ((vec2<f32>(x_2924.x, x_2924.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2928 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2927.x, x_2928.y, x_2927.y, x_2928.w);
        let x_2931 : f32 = u_xlat9.x;
        u_xlat10.y = x_2931;
        let x_2934 : f32 = u_xlat11.y;
        u_xlat10.w = x_2934;
        let x_2936 : vec4<f32> = u_xlat10;
        let x_2937 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2936 + x_2937);
        let x_2939 : vec2<f32> = u_xlat52;
        let x_2942 : vec2<f32> = ((vec2<f32>(x_2939.y, x_2939.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2943 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2943.x, x_2942.x, x_2943.z, x_2942.y);
        let x_2945 : vec2<f32> = u_xlat52;
        let x_2948 : vec2<f32> = ((vec2<f32>(x_2945.y, x_2945.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2949 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2948.x, x_2949.y, x_2948.y, x_2949.w);
        let x_2952 : f32 = u_xlat9.y;
        u_xlat11.y = x_2952;
        let x_2954 : vec4<f32> = u_xlat11;
        let x_2955 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2954 + x_2955);
        let x_2957 : vec4<f32> = u_xlat10;
        let x_2958 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2957 / x_2958);
        let x_2960 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2960 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2962 : vec4<f32> = u_xlat11;
        let x_2963 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2962 / x_2963);
        let x_2965 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2965 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2967 : vec4<f32> = u_xlat10;
        let x_2970 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2967.w, x_2967.x, x_2967.y, x_2967.z) * vec4<f32>(x_2970.x, x_2970.x, x_2970.x, x_2970.x));
        let x_2973 : vec4<f32> = u_xlat11;
        let x_2976 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2973.x, x_2973.w, x_2973.y, x_2973.z) * vec4<f32>(x_2976.y, x_2976.y, x_2976.y, x_2976.y));
        let x_2979 : vec4<f32> = u_xlat10;
        let x_2980 : vec3<f32> = vec3<f32>(x_2979.y, x_2979.z, x_2979.w);
        let x_2981 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2980.x, x_2981.y, x_2980.y, x_2980.z);
        let x_2984 : f32 = u_xlat11.x;
        u_xlat13.y = x_2984;
        let x_2986 : vec4<f32> = u_xlat8;
        let x_2989 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2992 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2986.x, x_2986.y, x_2986.x, x_2986.y) * vec4<f32>(x_2989.x, x_2989.y, x_2989.x, x_2989.y)) + vec4<f32>(x_2992.x, x_2992.y, x_2992.z, x_2992.y));
        let x_2995 : vec4<f32> = u_xlat8;
        let x_2998 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3001 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2995.x, x_2995.y) * vec2<f32>(x_2998.x, x_2998.y)) + vec2<f32>(x_3001.w, x_3001.y));
        let x_3005 : f32 = u_xlat13.y;
        u_xlat10.y = x_3005;
        let x_3008 : f32 = u_xlat11.z;
        u_xlat13.y = x_3008;
        let x_3010 : vec4<f32> = u_xlat8;
        let x_3013 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3016 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3010.x, x_3010.y, x_3010.x, x_3010.y) * vec4<f32>(x_3013.x, x_3013.y, x_3013.x, x_3013.y)) + vec4<f32>(x_3016.x, x_3016.y, x_3016.z, x_3016.y));
        let x_3019 : vec4<f32> = u_xlat8;
        let x_3022 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3025 : vec4<f32> = u_xlat13;
        let x_3027 : vec2<f32> = ((vec2<f32>(x_3019.x, x_3019.y) * vec2<f32>(x_3022.x, x_3022.y)) + vec2<f32>(x_3025.w, x_3025.y));
        let x_3028 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3027.x, x_3027.y, x_3028.z, x_3028.w);
        let x_3031 : f32 = u_xlat13.y;
        u_xlat10.z = x_3031;
        let x_3033 : vec4<f32> = u_xlat8;
        let x_3036 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3039 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3033.x, x_3033.y, x_3033.x, x_3033.y) * vec4<f32>(x_3036.x, x_3036.y, x_3036.x, x_3036.y)) + vec4<f32>(x_3039.x, x_3039.y, x_3039.x, x_3039.z));
        let x_3043 : f32 = u_xlat11.w;
        u_xlat13.y = x_3043;
        let x_3045 : vec4<f32> = u_xlat8;
        let x_3048 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3051 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3045.x, x_3045.y, x_3045.x, x_3045.y) * vec4<f32>(x_3048.x, x_3048.y, x_3048.x, x_3048.y)) + vec4<f32>(x_3051.x, x_3051.y, x_3051.z, x_3051.y));
        let x_3054 : vec4<f32> = u_xlat8;
        let x_3057 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3060 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3054.x, x_3054.y) * vec2<f32>(x_3057.x, x_3057.y)) + vec2<f32>(x_3060.w, x_3060.y));
        let x_3064 : f32 = u_xlat13.y;
        u_xlat10.w = x_3064;
        let x_3066 : vec4<f32> = u_xlat8;
        let x_3069 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3072 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3066.x, x_3066.y) * vec2<f32>(x_3069.x, x_3069.y)) + vec2<f32>(x_3072.x, x_3072.w));
        let x_3075 : vec4<f32> = u_xlat13;
        let x_3076 : vec3<f32> = vec3<f32>(x_3075.x, x_3075.z, x_3075.w);
        let x_3077 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3076.x, x_3077.y, x_3076.y, x_3076.z);
        let x_3079 : vec4<f32> = u_xlat8;
        let x_3082 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3085 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3079.x, x_3079.y, x_3079.x, x_3079.y) * vec4<f32>(x_3082.x, x_3082.y, x_3082.x, x_3082.y)) + vec4<f32>(x_3085.x, x_3085.y, x_3085.z, x_3085.y));
        let x_3088 : vec4<f32> = u_xlat8;
        let x_3091 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3094 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3088.x, x_3088.y) * vec2<f32>(x_3091.x, x_3091.y)) + vec2<f32>(x_3094.w, x_3094.y));
        let x_3098 : f32 = u_xlat10.x;
        u_xlat11.x = x_3098;
        let x_3100 : vec4<f32> = u_xlat8;
        let x_3103 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3106 : vec4<f32> = u_xlat11;
        let x_3108 : vec2<f32> = ((vec2<f32>(x_3100.x, x_3100.y) * vec2<f32>(x_3103.x, x_3103.y)) + vec2<f32>(x_3106.x, x_3106.y));
        let x_3109 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3108.x, x_3108.y, x_3109.z, x_3109.w);
        let x_3111 : vec4<f32> = u_xlat9;
        let x_3113 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3111.x, x_3111.x, x_3111.x, x_3111.x) * x_3113);
        let x_3115 : vec4<f32> = u_xlat9;
        let x_3117 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3115.y, x_3115.y, x_3115.y, x_3115.y) * x_3117);
        let x_3119 : vec4<f32> = u_xlat9;
        let x_3121 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3119.z, x_3119.z, x_3119.z, x_3119.z) * x_3121);
        let x_3123 : vec4<f32> = u_xlat9;
        let x_3125 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3123.w, x_3123.w, x_3123.w, x_3123.w) * x_3125);
        let x_3128 : vec4<f32> = u_xlat14;
        let x_3129 : vec2<f32> = vec2<f32>(x_3128.x, x_3128.y);
        let x_3131 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3129.x, x_3129.y, x_3131);
        let x_3138 : vec3<f32> = txVec43;
        let x_3140 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3138.xy, x_3138.z);
        u_xlat72 = x_3140;
        let x_3142 : vec4<f32> = u_xlat14;
        let x_3143 : vec2<f32> = vec2<f32>(x_3142.z, x_3142.w);
        let x_3145 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3143.x, x_3143.y, x_3145);
        let x_3152 : vec3<f32> = txVec44;
        let x_3154 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3152.xy, x_3152.z);
        u_xlat73 = x_3154;
        let x_3155 : f32 = u_xlat73;
        let x_3157 : f32 = u_xlat19.y;
        u_xlat73 = (x_3155 * x_3157);
        let x_3160 : f32 = u_xlat19.x;
        let x_3161 : f32 = u_xlat72;
        let x_3163 : f32 = u_xlat73;
        u_xlat72 = ((x_3160 * x_3161) + x_3163);
        let x_3166 : vec2<f32> = u_xlat52;
        let x_3168 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3166.x, x_3166.y, x_3168);
        let x_3175 : vec3<f32> = txVec45;
        let x_3177 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3175.xy, x_3175.z);
        u_xlat73 = x_3177;
        let x_3179 : f32 = u_xlat19.z;
        let x_3180 : f32 = u_xlat73;
        let x_3182 : f32 = u_xlat72;
        u_xlat72 = ((x_3179 * x_3180) + x_3182);
        let x_3185 : vec4<f32> = u_xlat17;
        let x_3186 : vec2<f32> = vec2<f32>(x_3185.x, x_3185.y);
        let x_3188 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3186.x, x_3186.y, x_3188);
        let x_3195 : vec3<f32> = txVec46;
        let x_3197 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3195.xy, x_3195.z);
        u_xlat73 = x_3197;
        let x_3199 : f32 = u_xlat19.w;
        let x_3200 : f32 = u_xlat73;
        let x_3202 : f32 = u_xlat72;
        u_xlat72 = ((x_3199 * x_3200) + x_3202);
        let x_3205 : vec4<f32> = u_xlat15;
        let x_3206 : vec2<f32> = vec2<f32>(x_3205.x, x_3205.y);
        let x_3208 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3206.x, x_3206.y, x_3208);
        let x_3215 : vec3<f32> = txVec47;
        let x_3217 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3215.xy, x_3215.z);
        u_xlat73 = x_3217;
        let x_3219 : f32 = u_xlat20.x;
        let x_3220 : f32 = u_xlat73;
        let x_3222 : f32 = u_xlat72;
        u_xlat72 = ((x_3219 * x_3220) + x_3222);
        let x_3225 : vec4<f32> = u_xlat15;
        let x_3226 : vec2<f32> = vec2<f32>(x_3225.z, x_3225.w);
        let x_3228 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3226.x, x_3226.y, x_3228);
        let x_3235 : vec3<f32> = txVec48;
        let x_3237 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3235.xy, x_3235.z);
        u_xlat73 = x_3237;
        let x_3239 : f32 = u_xlat20.y;
        let x_3240 : f32 = u_xlat73;
        let x_3242 : f32 = u_xlat72;
        u_xlat72 = ((x_3239 * x_3240) + x_3242);
        let x_3245 : vec4<f32> = u_xlat16;
        let x_3246 : vec2<f32> = vec2<f32>(x_3245.x, x_3245.y);
        let x_3248 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3246.x, x_3246.y, x_3248);
        let x_3255 : vec3<f32> = txVec49;
        let x_3257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3255.xy, x_3255.z);
        u_xlat73 = x_3257;
        let x_3259 : f32 = u_xlat20.z;
        let x_3260 : f32 = u_xlat73;
        let x_3262 : f32 = u_xlat72;
        u_xlat72 = ((x_3259 * x_3260) + x_3262);
        let x_3265 : vec4<f32> = u_xlat17;
        let x_3266 : vec2<f32> = vec2<f32>(x_3265.z, x_3265.w);
        let x_3268 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3266.x, x_3266.y, x_3268);
        let x_3275 : vec3<f32> = txVec50;
        let x_3277 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3275.xy, x_3275.z);
        u_xlat73 = x_3277;
        let x_3279 : f32 = u_xlat20.w;
        let x_3280 : f32 = u_xlat73;
        let x_3282 : f32 = u_xlat72;
        u_xlat72 = ((x_3279 * x_3280) + x_3282);
        let x_3285 : vec4<f32> = u_xlat18;
        let x_3286 : vec2<f32> = vec2<f32>(x_3285.x, x_3285.y);
        let x_3288 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3286.x, x_3286.y, x_3288);
        let x_3295 : vec3<f32> = txVec51;
        let x_3297 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3295.xy, x_3295.z);
        u_xlat73 = x_3297;
        let x_3299 : f32 = u_xlat21.x;
        let x_3300 : f32 = u_xlat73;
        let x_3302 : f32 = u_xlat72;
        u_xlat72 = ((x_3299 * x_3300) + x_3302);
        let x_3305 : vec4<f32> = u_xlat18;
        let x_3306 : vec2<f32> = vec2<f32>(x_3305.z, x_3305.w);
        let x_3308 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3306.x, x_3306.y, x_3308);
        let x_3315 : vec3<f32> = txVec52;
        let x_3317 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3315.xy, x_3315.z);
        u_xlat73 = x_3317;
        let x_3319 : f32 = u_xlat21.y;
        let x_3320 : f32 = u_xlat73;
        let x_3322 : f32 = u_xlat72;
        u_xlat72 = ((x_3319 * x_3320) + x_3322);
        let x_3325 : vec2<f32> = u_xlat32;
        let x_3327 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3325.x, x_3325.y, x_3327);
        let x_3334 : vec3<f32> = txVec53;
        let x_3336 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3334.xy, x_3334.z);
        u_xlat73 = x_3336;
        let x_3338 : f32 = u_xlat21.z;
        let x_3339 : f32 = u_xlat73;
        let x_3341 : f32 = u_xlat72;
        u_xlat72 = ((x_3338 * x_3339) + x_3341);
        let x_3344 : vec2<f32> = u_xlat60;
        let x_3346 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3344.x, x_3344.y, x_3346);
        let x_3353 : vec3<f32> = txVec54;
        let x_3355 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3353.xy, x_3353.z);
        u_xlat73 = x_3355;
        let x_3357 : f32 = u_xlat21.w;
        let x_3358 : f32 = u_xlat73;
        let x_3360 : f32 = u_xlat72;
        u_xlat72 = ((x_3357 * x_3358) + x_3360);
        let x_3363 : vec4<f32> = u_xlat13;
        let x_3364 : vec2<f32> = vec2<f32>(x_3363.x, x_3363.y);
        let x_3366 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3364.x, x_3364.y, x_3366);
        let x_3373 : vec3<f32> = txVec55;
        let x_3375 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3373.xy, x_3373.z);
        u_xlat73 = x_3375;
        let x_3377 : f32 = u_xlat9.x;
        let x_3378 : f32 = u_xlat73;
        let x_3380 : f32 = u_xlat72;
        u_xlat72 = ((x_3377 * x_3378) + x_3380);
        let x_3383 : vec4<f32> = u_xlat13;
        let x_3384 : vec2<f32> = vec2<f32>(x_3383.z, x_3383.w);
        let x_3386 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3384.x, x_3384.y, x_3386);
        let x_3393 : vec3<f32> = txVec56;
        let x_3395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3393.xy, x_3393.z);
        u_xlat73 = x_3395;
        let x_3397 : f32 = u_xlat9.y;
        let x_3398 : f32 = u_xlat73;
        let x_3400 : f32 = u_xlat72;
        u_xlat72 = ((x_3397 * x_3398) + x_3400);
        let x_3403 : vec2<f32> = u_xlat55;
        let x_3405 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3403.x, x_3403.y, x_3405);
        let x_3412 : vec3<f32> = txVec57;
        let x_3414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3412.xy, x_3412.z);
        u_xlat73 = x_3414;
        let x_3416 : f32 = u_xlat9.z;
        let x_3417 : f32 = u_xlat73;
        let x_3419 : f32 = u_xlat72;
        u_xlat72 = ((x_3416 * x_3417) + x_3419);
        let x_3422 : vec4<f32> = u_xlat8;
        let x_3423 : vec2<f32> = vec2<f32>(x_3422.x, x_3422.y);
        let x_3425 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3423.x, x_3423.y, x_3425);
        let x_3432 : vec3<f32> = txVec58;
        let x_3434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3432.xy, x_3432.z);
        u_xlat73 = x_3434;
        let x_3436 : f32 = u_xlat9.w;
        let x_3437 : f32 = u_xlat73;
        let x_3439 : f32 = u_xlat72;
        u_xlat0.x = ((x_3436 * x_3437) + x_3439);
      }
    }
  } else {
    let x_3444 : vec4<f32> = u_xlat2;
    let x_3445 : vec2<f32> = vec2<f32>(x_3444.x, x_3444.y);
    let x_3447 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3445.x, x_3445.y, x_3447);
    let x_3454 : vec3<f32> = txVec59;
    let x_3456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3454.xy, x_3454.z);
    u_xlat0.x = x_3456;
  }
  let x_3459 : f32 = u_xlat0.x;
  let x_3461 : f32 = x_401.x_MainLightShadowParams.x;
  let x_3463 : f32 = u_xlat68;
  u_xlat0.x = ((x_3459 * x_3461) + x_3463);
  let x_3466 : bool = u_xlatb3;
  if (x_3466) {
    x_3467 = 1.0f;
  } else {
    let x_3472 : f32 = u_xlat0.x;
    x_3467 = x_3472;
  }
  let x_3473 : f32 = x_3467;
  u_xlat0.x = x_3473;
  let x_3475 : vec3<f32> = vs_INTERP0;
  let x_3477 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3479 : vec3<f32> = (x_3475 + -(x_3477));
  let x_3480 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3479.x, x_3479.y, x_3479.z, x_3480.w);
  let x_3482 : vec4<f32> = u_xlat2;
  let x_3484 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3482.x, x_3482.y, x_3482.z), vec3<f32>(x_3484.x, x_3484.y, x_3484.z));
  let x_3489 : f32 = u_xlat2.x;
  let x_3491 : f32 = x_401.x_MainLightShadowParams.z;
  let x_3494 : f32 = x_401.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3489 * x_3491) + x_3494);
  let x_3498 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3498, 0.0f, 1.0f);
  let x_3503 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3503) + 1.0f);
  let x_3507 : f32 = u_xlat2.x;
  let x_3508 : f32 = u_xlat24;
  let x_3511 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3507 * x_3508) + x_3511);
  let x_3520 : f32 = x_3518.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3520 == -1.0f));
  let x_3524 : bool = u_xlatb2.x;
  if (x_3524) {
    let x_3527 : vec3<f32> = vs_INTERP0;
    let x_3530 : vec4<f32> = x_3518.x_MainLightWorldToLight[1i];
    let x_3532 : vec2<f32> = (vec2<f32>(x_3527.y, x_3527.y) * vec2<f32>(x_3530.x, x_3530.y));
    let x_3533 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3532.x, x_3532.y, x_3533.z, x_3533.w);
    let x_3536 : vec4<f32> = x_3518.x_MainLightWorldToLight[0i];
    let x_3538 : vec3<f32> = vs_INTERP0;
    let x_3541 : vec4<f32> = u_xlat2;
    let x_3543 : vec2<f32> = ((vec2<f32>(x_3536.x, x_3536.y) * vec2<f32>(x_3538.x, x_3538.x)) + vec2<f32>(x_3541.x, x_3541.y));
    let x_3544 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3543.x, x_3543.y, x_3544.z, x_3544.w);
    let x_3547 : vec4<f32> = x_3518.x_MainLightWorldToLight[2i];
    let x_3549 : vec3<f32> = vs_INTERP0;
    let x_3552 : vec4<f32> = u_xlat2;
    let x_3554 : vec2<f32> = ((vec2<f32>(x_3547.x, x_3547.y) * vec2<f32>(x_3549.z, x_3549.z)) + vec2<f32>(x_3552.x, x_3552.y));
    let x_3555 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3554.x, x_3554.y, x_3555.z, x_3555.w);
    let x_3557 : vec4<f32> = u_xlat2;
    let x_3560 : vec4<f32> = x_3518.x_MainLightWorldToLight[3i];
    let x_3562 : vec2<f32> = (vec2<f32>(x_3557.x, x_3557.y) + vec2<f32>(x_3560.x, x_3560.y));
    let x_3563 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3562.x, x_3562.y, x_3563.z, x_3563.w);
    let x_3565 : vec4<f32> = u_xlat2;
    let x_3568 : vec2<f32> = ((vec2<f32>(x_3565.x, x_3565.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3569 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3568.x, x_3568.y, x_3569.z, x_3569.w);
    let x_3576 : vec4<f32> = u_xlat2;
    let x_3579 : f32 = x_160.x_GlobalMipBias.x;
    let x_3580 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3576.x, x_3576.y), x_3579);
    u_xlat2 = x_3580;
    let x_3583 : f32 = x_3518.x_MainLightCookieTextureFormat;
    let x_3585 : f32 = x_3518.x_MainLightCookieTextureFormat;
    let x_3587 : f32 = x_3518.x_MainLightCookieTextureFormat;
    let x_3589 : f32 = x_3518.x_MainLightCookieTextureFormat;
    let x_3590 : vec4<f32> = vec4<f32>(x_3583, x_3585, x_3587, x_3589);
    let x_3597 : vec4<bool> = (vec4<f32>(x_3590.x, x_3590.y, x_3590.z, x_3590.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3597.x, x_3597.y);
    let x_3600 : bool = u_xlatb8.y;
    if (x_3600) {
      let x_3605 : f32 = u_xlat2.w;
      x_3601 = x_3605;
    } else {
      let x_3608 : f32 = u_xlat2.x;
      x_3601 = x_3608;
    }
    let x_3609 : f32 = x_3601;
    u_xlat68 = x_3609;
    let x_3611 : bool = u_xlatb8.x;
    if (x_3611) {
      let x_3615 : vec4<f32> = u_xlat2;
      x_3612 = vec3<f32>(x_3615.x, x_3615.y, x_3615.z);
    } else {
      let x_3618 : f32 = u_xlat68;
      x_3612 = vec3<f32>(x_3618, x_3618, x_3618);
    }
    let x_3620 : vec3<f32> = x_3612;
    let x_3621 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3620.x, x_3620.y, x_3620.z, x_3621.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3627 : vec4<f32> = u_xlat2;
  let x_3630 : vec4<f32> = x_160.x_MainLightColor;
  let x_3632 : vec3<f32> = (vec3<f32>(x_3627.x, x_3627.y, x_3627.z) * vec3<f32>(x_3630.x, x_3630.y, x_3630.z));
  let x_3633 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3632.x, x_3632.y, x_3632.z, x_3633.w);
  let x_3635 : f32 = u_xlat50;
  let x_3637 : vec4<f32> = u_xlat2;
  let x_3639 : vec3<f32> = (vec3<f32>(x_3635, x_3635, x_3635) * vec3<f32>(x_3637.x, x_3637.y, x_3637.z));
  let x_3640 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3639.x, x_3639.y, x_3639.z, x_3640.w);
  let x_3642 : vec3<f32> = u_xlat5;
  let x_3644 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(x_3642), x_3644);
  let x_3646 : f32 = u_xlat68;
  let x_3647 : f32 = u_xlat68;
  u_xlat68 = (x_3646 + x_3647);
  let x_3649 : vec3<f32> = u_xlat22;
  let x_3650 : f32 = u_xlat68;
  let x_3654 : vec3<f32> = u_xlat5;
  let x_3656 : vec3<f32> = ((x_3649 * -(vec3<f32>(x_3650, x_3650, x_3650))) + -(x_3654));
  let x_3657 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3656.x, x_3656.y, x_3656.z, x_3657.w);
  let x_3659 : vec3<f32> = u_xlat22;
  let x_3660 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(x_3659, x_3660);
  let x_3662 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3662, 0.0f, 1.0f);
  let x_3664 : f32 = u_xlat68;
  u_xlat68 = (-(x_3664) + 1.0f);
  let x_3667 : f32 = u_xlat68;
  let x_3668 : f32 = u_xlat68;
  u_xlat68 = (x_3667 * x_3668);
  let x_3670 : f32 = u_xlat68;
  let x_3671 : f32 = u_xlat68;
  u_xlat68 = (x_3670 * x_3671);
  let x_3674 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3674) * 0.699999988f) + 1.700000048f);
  let x_3682 : f32 = u_xlat3.x;
  let x_3684 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3682 * x_3684);
  let x_3688 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3688 * 6.0f);
  let x_3700 : vec4<f32> = u_xlat8;
  let x_3703 : f32 = u_xlat3.x;
  let x_3704 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3700.x, x_3700.y, x_3700.z), x_3703);
  u_xlat8 = x_3704;
  let x_3706 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3706 + -1.0f);
  let x_3710 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3712 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3710 * x_3712) + 1.0f);
  let x_3717 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3717, 0.0f);
  let x_3721 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3721);
  let x_3725 : f32 = u_xlat3.x;
  let x_3727 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3725 * x_3727);
  let x_3731 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3731);
  let x_3735 : f32 = u_xlat3.x;
  let x_3737 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3735 * x_3737);
  let x_3740 : vec4<f32> = u_xlat8;
  let x_3742 : vec4<f32> = u_xlat3;
  let x_3744 : vec3<f32> = (vec3<f32>(x_3740.x, x_3740.y, x_3740.z) * vec3<f32>(x_3742.x, x_3742.x, x_3742.x));
  let x_3745 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3744.x, x_3744.y, x_3744.z, x_3745.w);
  let x_3747 : f32 = u_xlat69;
  let x_3749 : f32 = u_xlat69;
  let x_3753 : vec2<f32> = ((vec2<f32>(x_3747, x_3747) * vec2<f32>(x_3749, x_3749)) + vec2<f32>(-1.0f, 1.0f));
  let x_3754 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3753.x, x_3754.y, x_3753.y, x_3754.w);
  let x_3757 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3757);
  let x_3760 : f32 = u_xlat71;
  u_xlat69 = (x_3760 + -0.039999999f);
  let x_3763 : f32 = u_xlat68;
  let x_3764 : f32 = u_xlat69;
  u_xlat68 = ((x_3763 * x_3764) + 0.039999999f);
  let x_3768 : f32 = u_xlat68;
  let x_3770 : f32 = u_xlat47.x;
  u_xlat68 = (x_3768 * x_3770);
  let x_3772 : f32 = u_xlat68;
  let x_3774 : vec4<f32> = u_xlat8;
  let x_3776 : vec3<f32> = (vec3<f32>(x_3772, x_3772, x_3772) * vec3<f32>(x_3774.x, x_3774.y, x_3774.z));
  let x_3777 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3776.x, x_3776.y, x_3776.z, x_3777.w);
  let x_3779 : vec4<f32> = u_xlat4;
  let x_3781 : vec3<f32> = u_xlat7;
  let x_3783 : vec4<f32> = u_xlat8;
  let x_3785 : vec3<f32> = ((vec3<f32>(x_3779.x, x_3779.y, x_3779.z) * x_3781) + vec3<f32>(x_3783.x, x_3783.y, x_3783.z));
  let x_3786 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3785.x, x_3785.y, x_3785.z, x_3786.w);
  let x_3789 : f32 = u_xlat0.x;
  let x_3791 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3789 * x_3791);
  let x_3794 : vec3<f32> = u_xlat22;
  let x_3796 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(x_3794, vec3<f32>(x_3796.x, x_3796.y, x_3796.z));
  let x_3799 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3799, 0.0f, 1.0f);
  let x_3802 : f32 = u_xlat0.x;
  let x_3803 : f32 = u_xlat68;
  u_xlat0.x = (x_3802 * x_3803);
  let x_3806 : vec3<f32> = u_xlat0;
  let x_3808 : vec4<f32> = u_xlat2;
  let x_3810 : vec3<f32> = (vec3<f32>(x_3806.x, x_3806.x, x_3806.x) * vec3<f32>(x_3808.x, x_3808.y, x_3808.z));
  let x_3811 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3810.x, x_3810.y, x_3810.z, x_3811.w);
  let x_3813 : vec3<f32> = u_xlat5;
  let x_3815 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3817 : vec3<f32> = (x_3813 + vec3<f32>(x_3815.x, x_3815.y, x_3815.z));
  let x_3818 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3817.x, x_3817.y, x_3817.z, x_3818.w);
  let x_3820 : vec4<f32> = u_xlat8;
  let x_3822 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3820.x, x_3820.y, x_3820.z), vec3<f32>(x_3822.x, x_3822.y, x_3822.z));
  let x_3827 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3827, 1.17549435e-37f);
  let x_3831 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3831);
  let x_3834 : vec3<f32> = u_xlat0;
  let x_3836 : vec4<f32> = u_xlat8;
  let x_3838 : vec3<f32> = (vec3<f32>(x_3834.x, x_3834.x, x_3834.x) * vec3<f32>(x_3836.x, x_3836.y, x_3836.z));
  let x_3839 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3838.x, x_3838.y, x_3838.z, x_3839.w);
  let x_3841 : vec3<f32> = u_xlat22;
  let x_3842 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3841, vec3<f32>(x_3842.x, x_3842.y, x_3842.z));
  let x_3847 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3847, 0.0f, 1.0f);
  let x_3851 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3853 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3851.x, x_3851.y, x_3851.z), vec3<f32>(x_3853.x, x_3853.y, x_3853.z));
  let x_3856 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3856, 0.0f, 1.0f);
  let x_3859 : f32 = u_xlat0.x;
  let x_3861 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3859 * x_3861);
  let x_3865 : f32 = u_xlat0.x;
  let x_3867 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3865 * x_3867) + 1.000010014f);
  let x_3872 : f32 = u_xlat68;
  let x_3873 : f32 = u_xlat68;
  u_xlat68 = (x_3872 * x_3873);
  let x_3876 : f32 = u_xlat0.x;
  let x_3878 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3876 * x_3878);
  let x_3881 : f32 = u_xlat68;
  u_xlat68 = max(x_3881, 0.100000001f);
  let x_3885 : f32 = u_xlat0.x;
  let x_3886 : f32 = u_xlat68;
  u_xlat0.x = (x_3885 * x_3886);
  let x_3889 : f32 = u_xlat28;
  let x_3891 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3889 * x_3891);
  let x_3894 : f32 = u_xlat70;
  let x_3896 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3894 / x_3896);
  let x_3899 : vec3<f32> = u_xlat0;
  let x_3903 : vec3<f32> = u_xlat7;
  let x_3904 : vec3<f32> = ((vec3<f32>(x_3899.x, x_3899.x, x_3899.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3903);
  let x_3905 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3904.x, x_3904.y, x_3904.z, x_3905.w);
  let x_3907 : vec4<f32> = u_xlat2;
  let x_3909 : vec4<f32> = u_xlat8;
  let x_3911 : vec3<f32> = (vec3<f32>(x_3907.x, x_3907.y, x_3907.z) * vec3<f32>(x_3909.x, x_3909.y, x_3909.z));
  let x_3912 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3911.x, x_3911.y, x_3911.z, x_3912.w);
  let x_3915 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3917 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3915, x_3917);
  let x_3921 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3921));
  let x_3925 : f32 = x_3518.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3927 : f32 = x_3518.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3929 : f32 = x_3518.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3931 : f32 = x_3518.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3932 : vec4<f32> = vec4<f32>(x_3925, x_3927, x_3929, x_3931);
  let x_3939 : vec4<bool> = (vec4<f32>(x_3932.x, x_3932.y, x_3932.z, x_3932.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb47 = vec2<bool>(x_3939.x, x_3939.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3950 : u32 = u_xlatu_loop_1;
    let x_3951 : u32 = u_xlatu0;
    if ((x_3950 < x_3951)) {
    } else {
      break;
    }
    let x_3954 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3954 >> 2u);
    let x_3957 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3957 & 3u));
    let x_3960 : u32 = u_xlatu71;
    let x_3963 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3960)];
    let x_3973 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3978 : vec4<u32> = indexable[x_3973];
    u_xlat71 = dot(x_3963, bitcast<vec4<f32>>(x_3978));
    let x_3981 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3981));
    let x_3984 : vec3<f32> = vs_INTERP0;
    let x_3996 : u32 = u_xlatu71;
    let x_3999 : vec4<f32> = x_3995.x_AdditionalLightsPosition[bitcast<i32>(x_3996)];
    let x_4002 : u32 = u_xlatu71;
    let x_4005 : vec4<f32> = x_3995.x_AdditionalLightsPosition[bitcast<i32>(x_4002)];
    let x_4007 : vec3<f32> = ((-(x_3984) * vec3<f32>(x_3999.w, x_3999.w, x_3999.w)) + vec3<f32>(x_4005.x, x_4005.y, x_4005.z));
    let x_4008 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4007.x, x_4007.y, x_4007.z, x_4008.w);
    let x_4010 : vec4<f32> = u_xlat9;
    let x_4012 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4010.x, x_4010.y, x_4010.z), vec3<f32>(x_4012.x, x_4012.y, x_4012.z));
    let x_4015 : f32 = u_xlat72;
    u_xlat72 = max(x_4015, 6.10351562e-05f);
    let x_4018 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_4018);
    let x_4020 : f32 = u_xlat73;
    let x_4022 : vec4<f32> = u_xlat9;
    let x_4024 : vec3<f32> = (vec3<f32>(x_4020, x_4020, x_4020) * vec3<f32>(x_4022.x, x_4022.y, x_4022.z));
    let x_4025 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4024.x, x_4024.y, x_4024.z, x_4025.w);
    let x_4028 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_4028);
    let x_4030 : f32 = u_xlat72;
    let x_4031 : u32 = u_xlatu71;
    let x_4034 : f32 = x_3995.x_AdditionalLightsAttenuation[bitcast<i32>(x_4031)].x;
    u_xlat72 = (x_4030 * x_4034);
    let x_4036 : f32 = u_xlat72;
    let x_4038 : f32 = u_xlat72;
    u_xlat72 = ((-(x_4036) * x_4038) + 1.0f);
    let x_4041 : f32 = u_xlat72;
    u_xlat72 = max(x_4041, 0.0f);
    let x_4043 : f32 = u_xlat72;
    let x_4044 : f32 = u_xlat72;
    u_xlat72 = (x_4043 * x_4044);
    let x_4046 : f32 = u_xlat72;
    let x_4047 : f32 = u_xlat74;
    u_xlat72 = (x_4046 * x_4047);
    let x_4049 : u32 = u_xlatu71;
    let x_4052 : vec4<f32> = x_3995.x_AdditionalLightsSpotDir[bitcast<i32>(x_4049)];
    let x_4054 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_4052.x, x_4052.y, x_4052.z), vec3<f32>(x_4054.x, x_4054.y, x_4054.z));
    let x_4057 : f32 = u_xlat74;
    let x_4058 : u32 = u_xlatu71;
    let x_4061 : f32 = x_3995.x_AdditionalLightsAttenuation[bitcast<i32>(x_4058)].z;
    let x_4063 : u32 = u_xlatu71;
    let x_4066 : f32 = x_3995.x_AdditionalLightsAttenuation[bitcast<i32>(x_4063)].w;
    u_xlat74 = ((x_4057 * x_4061) + x_4066);
    let x_4068 : f32 = u_xlat74;
    u_xlat74 = clamp(x_4068, 0.0f, 1.0f);
    let x_4070 : f32 = u_xlat74;
    let x_4071 : f32 = u_xlat74;
    u_xlat74 = (x_4070 * x_4071);
    let x_4073 : f32 = u_xlat72;
    let x_4074 : f32 = u_xlat74;
    u_xlat72 = (x_4073 * x_4074);
    let x_4077 : u32 = u_xlatu71;
    u_xlatu74 = (x_4077 >> 5u);
    let x_4080 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_4080) & 31i)));
    let x_4086 : i32 = u_xlati75;
    let x_4088 : u32 = u_xlatu74;
    let x_4091 : f32 = x_3518.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4088)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_4086) & bitcast<u32>(x_4091)));
    let x_4095 : i32 = u_xlati74;
    if ((x_4095 != 0i)) {
      let x_4105 : u32 = u_xlatu71;
      let x_4108 : f32 = x_4104.x_AdditionalLightsLightTypes[bitcast<i32>(x_4105)].el;
      u_xlati74 = i32(x_4108);
      let x_4110 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4110 != 0i));
      let x_4114 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_4114) << bitcast<u32>(2i));
      let x_4117 : i32 = u_xlati75;
      if ((x_4117 != 0i)) {
        let x_4121 : vec3<f32> = vs_INTERP0;
        let x_4123 : i32 = u_xlati76;
        let x_4126 : i32 = u_xlati76;
        let x_4130 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4123 + 1i) / 4i)][((x_4126 + 1i) % 4i)];
        let x_4132 : vec3<f32> = (vec3<f32>(x_4121.y, x_4121.y, x_4121.y) * vec3<f32>(x_4130.x, x_4130.y, x_4130.w));
        let x_4133 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4132.x, x_4132.y, x_4132.z, x_4133.w);
        let x_4135 : i32 = u_xlati76;
        let x_4137 : i32 = u_xlati76;
        let x_4140 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[(x_4135 / 4i)][(x_4137 % 4i)];
        let x_4142 : vec3<f32> = vs_INTERP0;
        let x_4145 : vec4<f32> = u_xlat11;
        let x_4147 : vec3<f32> = ((vec3<f32>(x_4140.x, x_4140.y, x_4140.w) * vec3<f32>(x_4142.x, x_4142.x, x_4142.x)) + vec3<f32>(x_4145.x, x_4145.y, x_4145.z));
        let x_4148 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4147.x, x_4147.y, x_4147.z, x_4148.w);
        let x_4150 : i32 = u_xlati76;
        let x_4153 : i32 = u_xlati76;
        let x_4157 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4150 + 2i) / 4i)][((x_4153 + 2i) % 4i)];
        let x_4159 : vec3<f32> = vs_INTERP0;
        let x_4162 : vec4<f32> = u_xlat11;
        let x_4164 : vec3<f32> = ((vec3<f32>(x_4157.x, x_4157.y, x_4157.w) * vec3<f32>(x_4159.z, x_4159.z, x_4159.z)) + vec3<f32>(x_4162.x, x_4162.y, x_4162.z));
        let x_4165 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4164.x, x_4164.y, x_4164.z, x_4165.w);
        let x_4167 : vec4<f32> = u_xlat11;
        let x_4169 : i32 = u_xlati76;
        let x_4172 : i32 = u_xlati76;
        let x_4176 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4169 + 3i) / 4i)][((x_4172 + 3i) % 4i)];
        let x_4178 : vec3<f32> = (vec3<f32>(x_4167.x, x_4167.y, x_4167.z) + vec3<f32>(x_4176.x, x_4176.y, x_4176.w));
        let x_4179 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4178.x, x_4178.y, x_4178.z, x_4179.w);
        let x_4181 : vec4<f32> = u_xlat11;
        let x_4183 : vec4<f32> = u_xlat11;
        let x_4185 : vec2<f32> = (vec2<f32>(x_4181.x, x_4181.y) / vec2<f32>(x_4183.z, x_4183.z));
        let x_4186 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4185.x, x_4185.y, x_4186.z, x_4186.w);
        let x_4188 : vec4<f32> = u_xlat11;
        let x_4191 : vec2<f32> = ((vec2<f32>(x_4188.x, x_4188.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4192 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4191.x, x_4191.y, x_4192.z, x_4192.w);
        let x_4194 : vec4<f32> = u_xlat11;
        let x_4198 : vec2<f32> = clamp(vec2<f32>(x_4194.x, x_4194.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4199 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4198.x, x_4198.y, x_4199.z, x_4199.w);
        let x_4201 : u32 = u_xlatu71;
        let x_4204 : vec4<f32> = x_4104.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4201)];
        let x_4206 : vec4<f32> = u_xlat11;
        let x_4209 : u32 = u_xlatu71;
        let x_4212 : vec4<f32> = x_4104.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4209)];
        let x_4214 : vec2<f32> = ((vec2<f32>(x_4204.x, x_4204.y) * vec2<f32>(x_4206.x, x_4206.y)) + vec2<f32>(x_4212.z, x_4212.w));
        let x_4215 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4214.x, x_4214.y, x_4215.z, x_4215.w);
      } else {
        let x_4219 : i32 = u_xlati74;
        u_xlatb74 = (x_4219 == 1i);
        let x_4221 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4221);
        let x_4223 : i32 = u_xlati74;
        if ((x_4223 != 0i)) {
          let x_4227 : vec3<f32> = vs_INTERP0;
          let x_4229 : i32 = u_xlati76;
          let x_4232 : i32 = u_xlati76;
          let x_4236 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4229 + 1i) / 4i)][((x_4232 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4227.y, x_4227.y) * vec2<f32>(x_4236.x, x_4236.y));
          let x_4239 : i32 = u_xlati76;
          let x_4241 : i32 = u_xlati76;
          let x_4244 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[(x_4239 / 4i)][(x_4241 % 4i)];
          let x_4246 : vec3<f32> = vs_INTERP0;
          let x_4249 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4244.x, x_4244.y) * vec2<f32>(x_4246.x, x_4246.x)) + x_4249);
          let x_4251 : i32 = u_xlati76;
          let x_4254 : i32 = u_xlati76;
          let x_4258 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4251 + 2i) / 4i)][((x_4254 + 2i) % 4i)];
          let x_4260 : vec3<f32> = vs_INTERP0;
          let x_4263 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4258.x, x_4258.y) * vec2<f32>(x_4260.z, x_4260.z)) + x_4263);
          let x_4265 : vec2<f32> = u_xlat55;
          let x_4266 : i32 = u_xlati76;
          let x_4269 : i32 = u_xlati76;
          let x_4273 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4266 + 3i) / 4i)][((x_4269 + 3i) % 4i)];
          u_xlat55 = (x_4265 + vec2<f32>(x_4273.x, x_4273.y));
          let x_4276 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4276 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4279 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4279);
          let x_4281 : u32 = u_xlatu71;
          let x_4284 : vec4<f32> = x_4104.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4281)];
          let x_4286 : vec2<f32> = u_xlat55;
          let x_4288 : u32 = u_xlatu71;
          let x_4291 : vec4<f32> = x_4104.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4288)];
          let x_4293 : vec2<f32> = ((vec2<f32>(x_4284.x, x_4284.y) * x_4286) + vec2<f32>(x_4291.z, x_4291.w));
          let x_4294 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4293.x, x_4293.y, x_4294.z, x_4294.w);
        } else {
          let x_4297 : vec3<f32> = vs_INTERP0;
          let x_4299 : i32 = u_xlati76;
          let x_4302 : i32 = u_xlati76;
          let x_4306 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4299 + 1i) / 4i)][((x_4302 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4297.y, x_4297.y, x_4297.y, x_4297.y) * x_4306);
          let x_4308 : i32 = u_xlati76;
          let x_4310 : i32 = u_xlati76;
          let x_4313 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[(x_4308 / 4i)][(x_4310 % 4i)];
          let x_4314 : vec3<f32> = vs_INTERP0;
          let x_4317 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4313 * vec4<f32>(x_4314.x, x_4314.x, x_4314.x, x_4314.x)) + x_4317);
          let x_4319 : i32 = u_xlati76;
          let x_4322 : i32 = u_xlati76;
          let x_4326 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4319 + 2i) / 4i)][((x_4322 + 2i) % 4i)];
          let x_4327 : vec3<f32> = vs_INTERP0;
          let x_4330 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4326 * vec4<f32>(x_4327.z, x_4327.z, x_4327.z, x_4327.z)) + x_4330);
          let x_4332 : vec4<f32> = u_xlat12;
          let x_4333 : i32 = u_xlati76;
          let x_4336 : i32 = u_xlati76;
          let x_4340 : vec4<f32> = x_4104.x_AdditionalLightsWorldToLights[((x_4333 + 3i) / 4i)][((x_4336 + 3i) % 4i)];
          u_xlat12 = (x_4332 + x_4340);
          let x_4342 : vec4<f32> = u_xlat12;
          let x_4344 : vec4<f32> = u_xlat12;
          let x_4346 : vec3<f32> = (vec3<f32>(x_4342.x, x_4342.y, x_4342.z) / vec3<f32>(x_4344.w, x_4344.w, x_4344.w));
          let x_4347 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4346.x, x_4346.y, x_4346.z, x_4347.w);
          let x_4349 : vec4<f32> = u_xlat12;
          let x_4351 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4349.x, x_4349.y, x_4349.z), vec3<f32>(x_4351.x, x_4351.y, x_4351.z));
          let x_4354 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4354);
          let x_4356 : f32 = u_xlat74;
          let x_4358 : vec4<f32> = u_xlat12;
          let x_4360 : vec3<f32> = (vec3<f32>(x_4356, x_4356, x_4356) * vec3<f32>(x_4358.x, x_4358.y, x_4358.z));
          let x_4361 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4360.x, x_4360.y, x_4360.z, x_4361.w);
          let x_4363 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4363.x, x_4363.y, x_4363.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4368 : f32 = u_xlat74;
          u_xlat74 = max(x_4368, 0.000001f);
          let x_4371 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4371);
          let x_4373 : f32 = u_xlat74;
          let x_4375 : vec4<f32> = u_xlat12;
          let x_4377 : vec3<f32> = (vec3<f32>(x_4373, x_4373, x_4373) * vec3<f32>(x_4375.z, x_4375.x, x_4375.y));
          let x_4378 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4377.x, x_4377.y, x_4377.z, x_4378.w);
          let x_4381 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4381);
          let x_4385 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4385, 0.0f, 1.0f);
          let x_4389 : vec4<f32> = u_xlat13;
          let x_4392 : vec4<bool> = (vec4<f32>(x_4389.y, x_4389.z, x_4389.y, x_4389.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4392.x, x_4392.y);
          let x_4395 : bool = u_xlatb55.x;
          if (x_4395) {
            let x_4400 : f32 = u_xlat13.x;
            x_4396 = x_4400;
          } else {
            let x_4403 : f32 = u_xlat13.x;
            x_4396 = -(x_4403);
          }
          let x_4405 : f32 = x_4396;
          u_xlat55.x = x_4405;
          let x_4408 : bool = u_xlatb55.y;
          if (x_4408) {
            let x_4413 : f32 = u_xlat13.x;
            x_4409 = x_4413;
          } else {
            let x_4416 : f32 = u_xlat13.x;
            x_4409 = -(x_4416);
          }
          let x_4418 : f32 = x_4409;
          u_xlat55.y = x_4418;
          let x_4420 : vec4<f32> = u_xlat12;
          let x_4422 : f32 = u_xlat74;
          let x_4425 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4420.x, x_4420.y) * vec2<f32>(x_4422, x_4422)) + x_4425);
          let x_4427 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4427 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4430 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4430, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4434 : u32 = u_xlatu71;
          let x_4437 : vec4<f32> = x_4104.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4434)];
          let x_4439 : vec2<f32> = u_xlat55;
          let x_4441 : u32 = u_xlatu71;
          let x_4444 : vec4<f32> = x_4104.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4441)];
          let x_4446 : vec2<f32> = ((vec2<f32>(x_4437.x, x_4437.y) * x_4439) + vec2<f32>(x_4444.z, x_4444.w));
          let x_4447 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4446.x, x_4446.y, x_4447.z, x_4447.w);
        }
      }
      let x_4454 : vec4<f32> = u_xlat11;
      let x_4457 : f32 = x_160.x_GlobalMipBias.x;
      let x_4458 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4454.x, x_4454.y), x_4457);
      u_xlat11 = x_4458;
      let x_4460 : bool = u_xlatb47.y;
      if (x_4460) {
        let x_4465 : f32 = u_xlat11.w;
        x_4461 = x_4465;
      } else {
        let x_4468 : f32 = u_xlat11.x;
        x_4461 = x_4468;
      }
      let x_4469 : f32 = x_4461;
      u_xlat74 = x_4469;
      let x_4471 : bool = u_xlatb47.x;
      if (x_4471) {
        let x_4475 : vec4<f32> = u_xlat11;
        x_4472 = vec3<f32>(x_4475.x, x_4475.y, x_4475.z);
      } else {
        let x_4478 : f32 = u_xlat74;
        x_4472 = vec3<f32>(x_4478, x_4478, x_4478);
      }
      let x_4480 : vec3<f32> = x_4472;
      let x_4481 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4480.x, x_4480.y, x_4480.z, x_4481.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4487 : vec4<f32> = u_xlat11;
    let x_4489 : u32 = u_xlatu71;
    let x_4492 : vec4<f32> = x_3995.x_AdditionalLightsColor[bitcast<i32>(x_4489)];
    let x_4494 : vec3<f32> = (vec3<f32>(x_4487.x, x_4487.y, x_4487.z) * vec3<f32>(x_4492.x, x_4492.y, x_4492.z));
    let x_4495 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4494.x, x_4494.y, x_4494.z, x_4495.w);
    let x_4497 : f32 = u_xlat50;
    let x_4499 : vec4<f32> = u_xlat11;
    let x_4501 : vec3<f32> = (vec3<f32>(x_4497, x_4497, x_4497) * vec3<f32>(x_4499.x, x_4499.y, x_4499.z));
    let x_4502 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4501.x, x_4501.y, x_4501.z, x_4502.w);
    let x_4504 : vec3<f32> = u_xlat22;
    let x_4505 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(x_4504, vec3<f32>(x_4505.x, x_4505.y, x_4505.z));
    let x_4508 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4508, 0.0f, 1.0f);
    let x_4510 : f32 = u_xlat71;
    let x_4511 : f32 = u_xlat72;
    u_xlat71 = (x_4510 * x_4511);
    let x_4513 : f32 = u_xlat71;
    let x_4515 : vec4<f32> = u_xlat11;
    let x_4517 : vec3<f32> = (vec3<f32>(x_4513, x_4513, x_4513) * vec3<f32>(x_4515.x, x_4515.y, x_4515.z));
    let x_4518 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4517.x, x_4517.y, x_4517.z, x_4518.w);
    let x_4520 : vec4<f32> = u_xlat9;
    let x_4522 : f32 = u_xlat73;
    let x_4525 : vec3<f32> = u_xlat5;
    let x_4526 : vec3<f32> = ((vec3<f32>(x_4520.x, x_4520.y, x_4520.z) * vec3<f32>(x_4522, x_4522, x_4522)) + x_4525);
    let x_4527 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4526.x, x_4526.y, x_4526.z, x_4527.w);
    let x_4529 : vec4<f32> = u_xlat9;
    let x_4531 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4529.x, x_4529.y, x_4529.z), vec3<f32>(x_4531.x, x_4531.y, x_4531.z));
    let x_4534 : f32 = u_xlat71;
    u_xlat71 = max(x_4534, 1.17549435e-37f);
    let x_4536 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4536);
    let x_4538 : f32 = u_xlat71;
    let x_4540 : vec4<f32> = u_xlat9;
    let x_4542 : vec3<f32> = (vec3<f32>(x_4538, x_4538, x_4538) * vec3<f32>(x_4540.x, x_4540.y, x_4540.z));
    let x_4543 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4542.x, x_4542.y, x_4542.z, x_4543.w);
    let x_4545 : vec3<f32> = u_xlat22;
    let x_4546 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(x_4545, vec3<f32>(x_4546.x, x_4546.y, x_4546.z));
    let x_4549 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4549, 0.0f, 1.0f);
    let x_4551 : vec4<f32> = u_xlat10;
    let x_4553 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4551.x, x_4551.y, x_4551.z), vec3<f32>(x_4553.x, x_4553.y, x_4553.z));
    let x_4556 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4556, 0.0f, 1.0f);
    let x_4558 : f32 = u_xlat71;
    let x_4559 : f32 = u_xlat71;
    u_xlat71 = (x_4558 * x_4559);
    let x_4561 : f32 = u_xlat71;
    let x_4563 : f32 = u_xlat3.x;
    u_xlat71 = ((x_4561 * x_4563) + 1.000010014f);
    let x_4566 : f32 = u_xlat72;
    let x_4567 : f32 = u_xlat72;
    u_xlat72 = (x_4566 * x_4567);
    let x_4569 : f32 = u_xlat71;
    let x_4570 : f32 = u_xlat71;
    u_xlat71 = (x_4569 * x_4570);
    let x_4572 : f32 = u_xlat72;
    u_xlat72 = max(x_4572, 0.100000001f);
    let x_4574 : f32 = u_xlat71;
    let x_4575 : f32 = u_xlat72;
    u_xlat71 = (x_4574 * x_4575);
    let x_4577 : f32 = u_xlat28;
    let x_4578 : f32 = u_xlat71;
    u_xlat71 = (x_4577 * x_4578);
    let x_4580 : f32 = u_xlat70;
    let x_4581 : f32 = u_xlat71;
    u_xlat71 = (x_4580 / x_4581);
    let x_4583 : f32 = u_xlat71;
    let x_4586 : vec3<f32> = u_xlat7;
    let x_4587 : vec3<f32> = ((vec3<f32>(x_4583, x_4583, x_4583) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4586);
    let x_4588 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4587.x, x_4587.y, x_4587.z, x_4588.w);
    let x_4590 : vec4<f32> = u_xlat9;
    let x_4592 : vec4<f32> = u_xlat11;
    let x_4595 : vec4<f32> = u_xlat8;
    let x_4597 : vec3<f32> = ((vec3<f32>(x_4590.x, x_4590.y, x_4590.z) * vec3<f32>(x_4592.x, x_4592.y, x_4592.z)) + vec3<f32>(x_4595.x, x_4595.y, x_4595.z));
    let x_4598 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4597.x, x_4597.y, x_4597.z, x_4598.w);

    continuing {
      let x_4600 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4600 + bitcast<u32>(1i));
    }
  }
  let x_4602 : vec4<f32> = u_xlat4;
  let x_4604 : vec4<f32> = u_xlat6;
  let x_4607 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4602.x, x_4602.y, x_4602.z) * vec3<f32>(x_4604.x, x_4604.x, x_4604.x)) + vec3<f32>(x_4607.x, x_4607.y, x_4607.z));
  let x_4610 : vec4<f32> = u_xlat8;
  let x_4612 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4610.x, x_4610.y, x_4610.z) + x_4612);
  let x_4616 : vec4<f32> = vs_INTERP4;
  let x_4618 : vec3<f32> = u_xlat1;
  let x_4620 : vec3<f32> = u_xlat0;
  let x_4621 : vec3<f32> = ((vec3<f32>(x_4616.w, x_4616.w, x_4616.w) * x_4618) + x_4620);
  let x_4622 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4621.x, x_4621.y, x_4621.z, x_4622.w);
  let x_4624 : bool = u_xlatb25;
  let x_4625 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4625, x_4624);
  let x_4631 : u32 = x_160.x_RenderingLayerMaxInt;
  let x_4633 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4631 & bitcast<u32>(x_4633));
  let x_4636 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4636);
  let x_4641 : f32 = u_xlat0.x;
  let x_4643 : f32 = x_160.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4641 * x_4643);
  let x_4647 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4647, 0.0f, 1.0f);
  let x_4650 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4650.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

