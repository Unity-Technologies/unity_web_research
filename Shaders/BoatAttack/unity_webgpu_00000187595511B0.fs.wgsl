struct x_Terrain {
  x_NormalScale0 : f32,
  x_NormalScale1 : f32,
  x_NormalScale2 : f32,
  x_NormalScale3 : f32,
  x_Metallic0 : f32,
  x_Metallic1 : f32,
  x_Metallic2 : f32,
  x_Metallic3 : f32,
  x_Smoothness0 : f32,
  x_Smoothness1 : f32,
  x_Smoothness2 : f32,
  x_Smoothness3 : f32,
  x_DiffuseRemapScale0 : vec4<f32>,
  x_DiffuseRemapScale1 : vec4<f32>,
  x_DiffuseRemapScale2 : vec4<f32>,
  x_DiffuseRemapScale3 : vec4<f32>,
  x_MaskMapRemapOffset0 : vec4<f32>,
  x_MaskMapRemapOffset1 : vec4<f32>,
  x_MaskMapRemapOffset2 : vec4<f32>,
  x_MaskMapRemapOffset3 : vec4<f32>,
  x_MaskMapRemapScale0 : vec4<f32>,
  x_MaskMapRemapScale1 : vec4<f32>,
  x_MaskMapRemapScale2 : vec4<f32>,
  x_MaskMapRemapScale3 : vec4<f32>,
  x_Control_ST : vec4<f32>,
  x_Control_TexelSize : vec4<f32>,
  x_DiffuseHasAlpha0 : f32,
  x_DiffuseHasAlpha1 : f32,
  x_DiffuseHasAlpha2 : f32,
  x_DiffuseHasAlpha3 : f32,
  x_LayerHasMask0 : f32,
  x_LayerHasMask1 : f32,
  x_LayerHasMask2 : f32,
  x_LayerHasMask3 : f32,
  x_Splat0_ST : vec4<f32>,
  x_Splat1_ST : vec4<f32>,
  x_Splat2_ST : vec4<f32>,
  x_Splat3_ST : vec4<f32>,
  x_HeightTransition : f32,
  x_NumLayersCount : f32,
  @size(8)
  padding : u32,
  x_TerrainHeightmapRecipSize : vec4<f32>,
  x_TerrainHeightmapScale : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding_1 : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(1) @binding(3) var<uniform> x_30 : x_Terrain;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(3) var x_Control : texture_2d<f32>;

@group(0) @binding(16) var sampler_Control : sampler;

@group(1) @binding(0) var<uniform> x_128 : PGlobals;

@group(0) @binding(4) var x_Splat0 : texture_2d<f32>;

@group(0) @binding(17) var sampler_Splat0 : sampler;

var<private> vs_TEXCOORD1 : vec4<f32>;

@group(0) @binding(5) var x_Splat1 : texture_2d<f32>;

@group(0) @binding(6) var x_Splat2 : texture_2d<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

@group(0) @binding(7) var x_Splat3 : texture_2d<f32>;

@group(0) @binding(8) var x_Normal0 : texture_2d<f32>;

@group(0) @binding(18) var sampler_Normal0 : sampler;

@group(0) @binding(9) var x_Normal1 : texture_2d<f32>;

@group(0) @binding(10) var x_Normal2 : texture_2d<f32>;

@group(0) @binding(11) var x_Normal3 : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_854 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(15) var samplerunity_Lightmap : sampler;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(12) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(19) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(13) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(20) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(14) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(2) var<uniform> x_2598 : UnityPerDraw;

@group(1) @binding(1) var<uniform> x_2867 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb64 : bool;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat42 : f32;
  var u_xlat21 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu64 : u32;
  var u_xlati64 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat25 : f32;
  var u_xlat46 : f32;
  var u_xlatb4 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var x_2464 : f32;
  var u_xlat23 : f32;
  var u_xlat44 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu4 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati4 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_35 : vec4<f32> = x_30.x_MaskMapRemapScale0;
  let x_42 : vec4<f32> = x_30.x_MaskMapRemapOffset0;
  u_xlat0 = ((vec3<f32>(x_35.x, x_35.y, x_35.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_42.x, x_42.y, x_42.w));
  let x_48 : vec4<f32> = x_30.x_MaskMapRemapScale1;
  let x_53 : vec4<f32> = x_30.x_MaskMapRemapOffset1;
  let x_55 : vec3<f32> = ((vec3<f32>(x_48.x, x_48.y, x_48.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_53.x, x_53.y, x_53.w));
  let x_56 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_55.x, x_55.y, x_55.z, x_56.w);
  let x_61 : vec4<f32> = x_30.x_MaskMapRemapScale2;
  let x_66 : vec4<f32> = x_30.x_MaskMapRemapOffset2;
  let x_68 : vec3<f32> = ((vec3<f32>(x_61.x, x_61.y, x_61.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_66.x, x_66.y, x_66.w));
  let x_69 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_68.x, x_68.y, x_68.z, x_69.w);
  let x_74 : vec4<f32> = x_30.x_MaskMapRemapScale3;
  let x_79 : vec4<f32> = x_30.x_MaskMapRemapOffset3;
  let x_81 : vec3<f32> = ((vec3<f32>(x_74.x, x_74.w, x_74.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_79.x, x_79.w, x_79.y));
  let x_82 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_81.x, x_81.y, x_82.z, x_81.z);
  let x_88 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_92 : vec2<f32> = (vec2<f32>(x_88.z, x_88.w) + vec2<f32>(-1.0f, -1.0f));
  let x_93 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_92.x, x_92.y, x_93.z, x_93.w);
  let x_96 : vec4<f32> = vs_TEXCOORD0;
  let x_98 : vec4<f32> = u_xlat4;
  let x_102 : vec2<f32> = ((vec2<f32>(x_96.x, x_96.y) * vec2<f32>(x_98.x, x_98.y)) + vec2<f32>(0.5f, 0.5f));
  let x_103 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_102.x, x_102.y, x_103.z, x_103.w);
  let x_105 : vec4<f32> = u_xlat4;
  let x_108 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_110 : vec2<f32> = (vec2<f32>(x_105.x, x_105.y) * vec2<f32>(x_108.x, x_108.y));
  let x_111 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_110.x, x_110.y, x_111.z, x_111.w);
  let x_123 : vec4<f32> = u_xlat4;
  let x_133 : f32 = x_128.x_GlobalMipBias.x;
  let x_134 : vec4<f32> = textureSampleBias(x_Control, sampler_Control, vec2<f32>(x_123.x, x_123.y), x_133);
  u_xlat4 = x_134;
  let x_137 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_137, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_147 : vec4<f32> = vs_TEXCOORD1;
  let x_150 : f32 = x_128.x_GlobalMipBias.x;
  let x_151 : vec4<f32> = textureSampleBias(x_Splat0, sampler_Splat0, vec2<f32>(x_147.x, x_147.y), x_150);
  u_xlat5 = x_151;
  let x_157 : vec4<f32> = vs_TEXCOORD1;
  let x_160 : f32 = x_128.x_GlobalMipBias.x;
  let x_161 : vec4<f32> = textureSampleBias(x_Splat1, sampler_Splat0, vec2<f32>(x_157.z, x_157.w), x_160);
  u_xlat6 = x_161;
  let x_168 : vec4<f32> = vs_TEXCOORD2;
  let x_171 : f32 = x_128.x_GlobalMipBias.x;
  let x_172 : vec4<f32> = textureSampleBias(x_Splat2, sampler_Splat0, vec2<f32>(x_168.x, x_168.y), x_171);
  u_xlat7 = x_172;
  let x_178 : vec4<f32> = vs_TEXCOORD2;
  let x_181 : f32 = x_128.x_GlobalMipBias.x;
  let x_182 : vec4<f32> = textureSampleBias(x_Splat3, sampler_Splat0, vec2<f32>(x_178.z, x_178.w), x_181);
  u_xlat8 = x_182;
  let x_185 : f32 = u_xlat5.w;
  u_xlat9.x = x_185;
  let x_188 : f32 = u_xlat6.w;
  u_xlat9.y = x_188;
  let x_192 : f32 = u_xlat7.w;
  u_xlat9.z = x_192;
  let x_196 : f32 = u_xlat8.w;
  u_xlat9.w = x_196;
  let x_199 : vec4<f32> = u_xlat9;
  let x_202 : f32 = x_30.x_Smoothness0;
  let x_205 : f32 = x_30.x_Smoothness1;
  let x_208 : f32 = x_30.x_Smoothness2;
  let x_211 : f32 = x_30.x_Smoothness3;
  u_xlat10 = (x_199 * vec4<f32>(x_202, x_205, x_208, x_211));
  let x_220 : f32 = x_30.x_NumLayersCount;
  u_xlatb64 = (4.0f >= x_220);
  let x_223 : vec4<f32> = u_xlat4;
  u_xlat11 = (-(x_223) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_226 : vec4<f32> = u_xlat9;
  let x_227 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_226 + -(x_227));
  let x_230 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_230 * vec4<f32>(20.0f, 20.0f, 20.0f, 20.0f));
  let x_234 : vec4<f32> = u_xlat11;
  u_xlat11 = clamp(x_234, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_239 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat11;
  u_xlat11 = ((x_239 * vec4<f32>(0.001f, 0.001f, 0.001f, 0.001f)) + x_243);
  let x_246 : vec4<f32> = u_xlat4;
  let x_247 : vec4<f32> = u_xlat11;
  u_xlat12 = (x_246 + -(x_247));
  let x_252 : f32 = u_xlat12.x;
  let x_255 : f32 = x_30.x_DiffuseRemapScale0.w;
  u_xlat13.x = (x_252 * x_255);
  let x_259 : f32 = u_xlat12.y;
  let x_262 : f32 = x_30.x_DiffuseRemapScale1.w;
  u_xlat13.y = (x_259 * x_262);
  let x_266 : f32 = u_xlat12.z;
  let x_269 : f32 = x_30.x_DiffuseRemapScale2.w;
  u_xlat13.z = (x_266 * x_269);
  let x_273 : f32 = u_xlat12.w;
  let x_276 : f32 = x_30.x_DiffuseRemapScale3.w;
  u_xlat13.w = (x_273 * x_276);
  let x_279 : vec4<f32> = u_xlat11;
  let x_280 : vec4<f32> = u_xlat13;
  u_xlat11 = (x_279 + x_280);
  let x_282 : bool = u_xlatb64;
  let x_283 : vec4<f32> = u_xlat11;
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = select(x_284, x_283, vec4<bool>(x_282, x_282, x_282, x_282));
  let x_289 : vec4<f32> = u_xlat4;
  u_xlat64 = dot(x_289, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_293 : f32 = u_xlat64;
  u_xlatb65 = (0.005f >= x_293);
  let x_295 : bool = u_xlatb65;
  if (((select(0i, 1i, x_295) * -1i) != 0i)) {
    discard;
  }
  let x_304 : f32 = u_xlat64;
  u_xlat64 = (x_304 + 6.10351562e-05f);
  let x_307 : vec4<f32> = u_xlat4;
  let x_308 : f32 = u_xlat64;
  u_xlat4 = (x_307 / vec4<f32>(x_308, x_308, x_308, x_308));
  let x_311 : vec4<f32> = u_xlat4;
  let x_314 : vec4<f32> = x_30.x_DiffuseRemapScale0;
  let x_316 : vec3<f32> = (vec3<f32>(x_311.x, x_311.x, x_311.x) * vec3<f32>(x_314.x, x_314.y, x_314.z));
  let x_317 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_316.x, x_316.y, x_316.z, x_317.w);
  let x_319 : vec4<f32> = u_xlat4;
  let x_322 : vec4<f32> = x_30.x_DiffuseRemapScale1;
  let x_324 : vec3<f32> = (vec3<f32>(x_319.y, x_319.y, x_319.y) * vec3<f32>(x_322.x, x_322.y, x_322.z));
  let x_325 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_324.x, x_324.y, x_324.z, x_325.w);
  let x_327 : vec4<f32> = u_xlat6;
  let x_329 : vec4<f32> = u_xlat12;
  let x_331 : vec3<f32> = (vec3<f32>(x_327.x, x_327.y, x_327.z) * vec3<f32>(x_329.x, x_329.y, x_329.z));
  let x_332 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_331.x, x_331.y, x_331.z, x_332.w);
  let x_334 : vec4<f32> = u_xlat5;
  let x_336 : vec4<f32> = u_xlat11;
  let x_339 : vec4<f32> = u_xlat6;
  let x_341 : vec3<f32> = ((vec3<f32>(x_334.x, x_334.y, x_334.z) * vec3<f32>(x_336.x, x_336.y, x_336.z)) + vec3<f32>(x_339.x, x_339.y, x_339.z));
  let x_342 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_341.x, x_341.y, x_341.z, x_342.w);
  let x_344 : vec4<f32> = u_xlat4;
  let x_347 : vec4<f32> = x_30.x_DiffuseRemapScale2;
  let x_349 : vec3<f32> = (vec3<f32>(x_344.z, x_344.z, x_344.z) * vec3<f32>(x_347.x, x_347.y, x_347.z));
  let x_350 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_349.x, x_349.y, x_349.z, x_350.w);
  let x_352 : vec4<f32> = u_xlat7;
  let x_354 : vec4<f32> = u_xlat6;
  let x_357 : vec4<f32> = u_xlat5;
  let x_359 : vec3<f32> = ((vec3<f32>(x_352.x, x_352.y, x_352.z) * vec3<f32>(x_354.x, x_354.y, x_354.z)) + vec3<f32>(x_357.x, x_357.y, x_357.z));
  let x_360 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
  let x_362 : vec4<f32> = u_xlat4;
  let x_365 : vec4<f32> = x_30.x_DiffuseRemapScale3;
  let x_367 : vec3<f32> = (vec3<f32>(x_362.w, x_362.w, x_362.w) * vec3<f32>(x_365.x, x_365.y, x_365.z));
  let x_368 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_367.x, x_367.y, x_367.z, x_368.w);
  let x_370 : vec4<f32> = u_xlat8;
  let x_372 : vec4<f32> = u_xlat6;
  let x_375 : vec4<f32> = u_xlat5;
  let x_377 : vec3<f32> = ((vec3<f32>(x_370.x, x_370.y, x_370.z) * vec3<f32>(x_372.x, x_372.y, x_372.z)) + vec3<f32>(x_375.x, x_375.y, x_375.z));
  let x_378 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_377.x, x_377.y, x_377.z, x_378.w);
  let x_385 : vec4<f32> = vs_TEXCOORD1;
  let x_388 : f32 = x_128.x_GlobalMipBias.x;
  let x_389 : vec4<f32> = textureSampleBias(x_Normal0, sampler_Normal0, vec2<f32>(x_385.x, x_385.y), x_388);
  let x_390 : vec3<f32> = vec3<f32>(x_389.x, x_389.y, x_389.w);
  let x_391 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_390.x, x_390.y, x_390.z, x_391.w);
  let x_394 : f32 = u_xlat6.x;
  let x_396 : f32 = u_xlat6.z;
  u_xlat6.x = (x_394 * x_396);
  let x_399 : vec4<f32> = u_xlat6;
  let x_404 : vec2<f32> = ((vec2<f32>(x_399.x, x_399.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_405 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_404.x, x_404.y, x_405.z, x_405.w);
  let x_407 : vec4<f32> = u_xlat6;
  let x_409 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_407.x, x_407.y), vec2<f32>(x_409.x, x_409.y));
  let x_412 : f32 = u_xlat64;
  u_xlat64 = min(x_412, 1.0f);
  let x_414 : f32 = u_xlat64;
  u_xlat64 = (-(x_414) + 1.0f);
  let x_417 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_417);
  let x_419 : f32 = u_xlat64;
  u_xlat7.z = max(x_419, 1.00000002e-16f);
  let x_423 : vec4<f32> = u_xlat6;
  let x_426 : f32 = x_30.x_NormalScale0;
  let x_428 : vec2<f32> = (vec2<f32>(x_423.x, x_423.y) * vec2<f32>(x_426, x_426));
  let x_429 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_428.x, x_428.y, x_429.z, x_429.w);
  let x_435 : vec4<f32> = vs_TEXCOORD1;
  let x_438 : f32 = x_128.x_GlobalMipBias.x;
  let x_439 : vec4<f32> = textureSampleBias(x_Normal1, sampler_Normal0, vec2<f32>(x_435.z, x_435.w), x_438);
  let x_440 : vec3<f32> = vec3<f32>(x_439.x, x_439.y, x_439.w);
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_444 : f32 = u_xlat6.x;
  let x_446 : f32 = u_xlat6.z;
  u_xlat6.x = (x_444 * x_446);
  let x_449 : vec4<f32> = u_xlat6;
  let x_452 : vec2<f32> = ((vec2<f32>(x_449.x, x_449.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_453 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_452.x, x_452.y, x_453.z, x_453.w);
  let x_455 : vec4<f32> = u_xlat6;
  let x_457 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_455.x, x_455.y), vec2<f32>(x_457.x, x_457.y));
  let x_460 : f32 = u_xlat64;
  u_xlat64 = min(x_460, 1.0f);
  let x_462 : f32 = u_xlat64;
  u_xlat64 = (-(x_462) + 1.0f);
  let x_465 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_465);
  let x_467 : f32 = u_xlat64;
  u_xlat8.z = max(x_467, 1.00000002e-16f);
  let x_470 : vec4<f32> = u_xlat6;
  let x_473 : f32 = x_30.x_NormalScale1;
  let x_475 : f32 = x_30.x_NormalScale1;
  let x_476 : vec2<f32> = vec2<f32>(x_473, x_475);
  let x_480 : vec2<f32> = (vec2<f32>(x_470.x, x_470.y) * vec2<f32>(x_476.x, x_476.y));
  let x_481 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_480.x, x_480.y, x_481.z, x_481.w);
  let x_483 : vec4<f32> = u_xlat4;
  let x_485 : vec4<f32> = u_xlat8;
  let x_487 : vec3<f32> = (vec3<f32>(x_483.y, x_483.y, x_483.y) * vec3<f32>(x_485.x, x_485.y, x_485.z));
  let x_488 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_487.x, x_487.y, x_487.z, x_488.w);
  let x_490 : vec4<f32> = u_xlat4;
  let x_492 : vec4<f32> = u_xlat7;
  let x_495 : vec4<f32> = u_xlat6;
  let x_497 : vec3<f32> = ((vec3<f32>(x_490.x, x_490.x, x_490.x) * vec3<f32>(x_492.x, x_492.y, x_492.z)) + vec3<f32>(x_495.x, x_495.y, x_495.z));
  let x_498 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_497.x, x_497.y, x_497.z, x_498.w);
  let x_504 : vec4<f32> = vs_TEXCOORD2;
  let x_507 : f32 = x_128.x_GlobalMipBias.x;
  let x_508 : vec4<f32> = textureSampleBias(x_Normal2, sampler_Normal0, vec2<f32>(x_504.x, x_504.y), x_507);
  let x_509 : vec3<f32> = vec3<f32>(x_508.x, x_508.y, x_508.w);
  let x_510 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_509.x, x_509.y, x_509.z, x_510.w);
  let x_513 : f32 = u_xlat7.x;
  let x_515 : f32 = u_xlat7.z;
  u_xlat7.x = (x_513 * x_515);
  let x_518 : vec4<f32> = u_xlat7;
  let x_521 : vec2<f32> = ((vec2<f32>(x_518.x, x_518.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_522 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_521.x, x_521.y, x_522.z, x_522.w);
  let x_524 : vec4<f32> = u_xlat7;
  let x_526 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_524.x, x_524.y), vec2<f32>(x_526.x, x_526.y));
  let x_529 : f32 = u_xlat64;
  u_xlat64 = min(x_529, 1.0f);
  let x_531 : f32 = u_xlat64;
  u_xlat64 = (-(x_531) + 1.0f);
  let x_534 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_534);
  let x_536 : f32 = u_xlat64;
  u_xlat8.z = max(x_536, 1.00000002e-16f);
  let x_539 : vec4<f32> = u_xlat7;
  let x_543 : f32 = x_30.x_NormalScale2;
  let x_545 : f32 = x_30.x_NormalScale2;
  let x_546 : vec2<f32> = vec2<f32>(x_543, x_545);
  let x_550 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(x_546.x, x_546.y));
  let x_551 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_550.x, x_550.y, x_551.z, x_551.w);
  let x_553 : vec4<f32> = u_xlat4;
  let x_555 : vec4<f32> = u_xlat8;
  let x_558 : vec4<f32> = u_xlat6;
  let x_560 : vec3<f32> = ((vec3<f32>(x_553.z, x_553.z, x_553.z) * vec3<f32>(x_555.x, x_555.y, x_555.z)) + vec3<f32>(x_558.x, x_558.y, x_558.z));
  let x_561 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_560.x, x_560.y, x_560.z, x_561.w);
  let x_567 : vec4<f32> = vs_TEXCOORD2;
  let x_570 : f32 = x_128.x_GlobalMipBias.x;
  let x_571 : vec4<f32> = textureSampleBias(x_Normal3, sampler_Normal0, vec2<f32>(x_567.z, x_567.w), x_570);
  let x_572 : vec3<f32> = vec3<f32>(x_571.x, x_571.y, x_571.w);
  let x_573 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_572.x, x_572.y, x_572.z, x_573.w);
  let x_576 : f32 = u_xlat7.x;
  let x_578 : f32 = u_xlat7.z;
  u_xlat7.x = (x_576 * x_578);
  let x_581 : vec4<f32> = u_xlat7;
  let x_584 : vec2<f32> = ((vec2<f32>(x_581.x, x_581.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_585 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_584.x, x_584.y, x_585.z, x_585.w);
  let x_587 : vec4<f32> = u_xlat7;
  let x_589 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_587.x, x_587.y), vec2<f32>(x_589.x, x_589.y));
  let x_592 : f32 = u_xlat64;
  u_xlat64 = min(x_592, 1.0f);
  let x_594 : f32 = u_xlat64;
  u_xlat64 = (-(x_594) + 1.0f);
  let x_597 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_597);
  let x_599 : f32 = u_xlat64;
  u_xlat8.z = max(x_599, 1.00000002e-16f);
  let x_602 : vec4<f32> = u_xlat7;
  let x_606 : f32 = x_30.x_NormalScale3;
  let x_608 : f32 = x_30.x_NormalScale3;
  let x_609 : vec2<f32> = vec2<f32>(x_606, x_608);
  let x_613 : vec2<f32> = (vec2<f32>(x_602.x, x_602.y) * vec2<f32>(x_609.x, x_609.y));
  let x_614 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_613.x, x_613.y, x_614.z, x_614.w);
  let x_616 : vec4<f32> = u_xlat4;
  let x_618 : vec4<f32> = u_xlat8;
  let x_621 : vec4<f32> = u_xlat6;
  let x_623 : vec3<f32> = ((vec3<f32>(x_616.w, x_616.w, x_616.w) * vec3<f32>(x_618.x, x_618.y, x_618.z)) + vec3<f32>(x_621.x, x_621.y, x_621.z));
  let x_624 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_623.x, x_623.y, x_623.z, x_624.w);
  let x_627 : f32 = u_xlat6.z;
  u_xlat6.w = (x_627 + 0.00001f);
  let x_631 : vec4<f32> = u_xlat6;
  let x_633 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_631.x, x_631.y, x_631.w), vec3<f32>(x_633.x, x_633.y, x_633.w));
  let x_636 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_636);
  let x_638 : f32 = u_xlat64;
  let x_640 : vec4<f32> = u_xlat6;
  let x_642 : vec3<f32> = (vec3<f32>(x_638, x_638, x_638) * vec3<f32>(x_640.x, x_640.y, x_640.w));
  let x_643 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_642.x, x_642.y, x_642.z, x_643.w);
  let x_646 : f32 = x_30.x_MaskMapRemapScale0.y;
  u_xlat7.x = x_646;
  let x_649 : f32 = x_30.x_MaskMapRemapScale1.y;
  u_xlat7.y = x_649;
  let x_652 : f32 = x_30.x_MaskMapRemapScale2.y;
  u_xlat7.z = x_652;
  let x_655 : f32 = x_30.x_MaskMapRemapScale3.y;
  u_xlat7.w = x_655;
  let x_658 : f32 = x_30.x_MaskMapRemapOffset0.y;
  u_xlat8.x = x_658;
  let x_661 : f32 = x_30.x_MaskMapRemapOffset1.y;
  u_xlat8.y = x_661;
  let x_664 : f32 = x_30.x_MaskMapRemapOffset2.y;
  u_xlat8.z = x_664;
  let x_667 : f32 = x_30.x_MaskMapRemapOffset3.y;
  u_xlat8.w = x_667;
  let x_669 : vec4<f32> = u_xlat7;
  let x_670 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_669 + x_670);
  let x_673 : f32 = u_xlat0.z;
  u_xlat8.x = x_673;
  let x_676 : f32 = u_xlat1.z;
  u_xlat8.y = x_676;
  let x_679 : f32 = u_xlat2.z;
  u_xlat8.z = x_679;
  let x_682 : f32 = u_xlat3.y;
  u_xlat8.w = x_682;
  let x_684 : vec4<f32> = u_xlat9;
  let x_687 : f32 = x_30.x_Smoothness0;
  let x_689 : f32 = x_30.x_Smoothness1;
  let x_691 : f32 = x_30.x_Smoothness2;
  let x_693 : f32 = x_30.x_Smoothness3;
  let x_696 : vec4<f32> = u_xlat8;
  u_xlat8 = ((-(x_684) * vec4<f32>(x_687, x_689, x_691, x_693)) + x_696);
  let x_700 : f32 = x_30.x_LayerHasMask0;
  let x_703 : f32 = x_30.x_LayerHasMask1;
  let x_706 : f32 = x_30.x_LayerHasMask2;
  let x_709 : f32 = x_30.x_LayerHasMask3;
  let x_711 : vec4<f32> = u_xlat8;
  let x_713 : vec4<f32> = u_xlat10;
  u_xlat8 = ((vec4<f32>(x_700, x_703, x_706, x_709) * x_711) + x_713);
  let x_716 : vec4<f32> = u_xlat4;
  let x_717 : vec4<f32> = u_xlat8;
  u_xlat42 = dot(x_716, x_717);
  let x_720 : f32 = u_xlat0.x;
  u_xlat8.x = x_720;
  let x_723 : f32 = u_xlat1.x;
  u_xlat8.y = x_723;
  let x_726 : f32 = u_xlat2.x;
  u_xlat8.z = x_726;
  let x_729 : f32 = u_xlat3.x;
  u_xlat8.w = x_729;
  let x_731 : vec4<f32> = u_xlat8;
  let x_734 : f32 = x_30.x_Metallic0;
  let x_737 : f32 = x_30.x_Metallic1;
  let x_740 : f32 = x_30.x_Metallic2;
  let x_743 : f32 = x_30.x_Metallic3;
  u_xlat8 = (x_731 + -(vec4<f32>(x_734, x_737, x_740, x_743)));
  let x_748 : f32 = x_30.x_LayerHasMask0;
  let x_750 : f32 = x_30.x_LayerHasMask1;
  let x_752 : f32 = x_30.x_LayerHasMask2;
  let x_754 : f32 = x_30.x_LayerHasMask3;
  let x_756 : vec4<f32> = u_xlat8;
  let x_759 : f32 = x_30.x_Metallic0;
  let x_761 : f32 = x_30.x_Metallic1;
  let x_763 : f32 = x_30.x_Metallic2;
  let x_765 : f32 = x_30.x_Metallic3;
  u_xlat8 = ((vec4<f32>(x_748, x_750, x_752, x_754) * x_756) + vec4<f32>(x_759, x_761, x_763, x_765));
  let x_768 : vec4<f32> = u_xlat4;
  let x_769 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_768, x_769);
  let x_773 : f32 = u_xlat0.y;
  u_xlat3.x = x_773;
  let x_776 : f32 = u_xlat1.y;
  u_xlat3.y = x_776;
  let x_779 : f32 = u_xlat2.y;
  u_xlat3.z = x_779;
  let x_781 : vec4<f32> = u_xlat7;
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat1 = (-(x_781) + x_783);
  let x_786 : f32 = x_30.x_LayerHasMask0;
  let x_788 : f32 = x_30.x_LayerHasMask1;
  let x_790 : f32 = x_30.x_LayerHasMask2;
  let x_792 : f32 = x_30.x_LayerHasMask3;
  let x_794 : vec4<f32> = u_xlat1;
  let x_796 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec4<f32>(x_786, x_788, x_790, x_792) * x_794) + x_796);
  let x_799 : vec4<f32> = u_xlat4;
  let x_800 : vec4<f32> = u_xlat1;
  u_xlat21 = dot(x_799, x_800);
  let x_802 : vec4<f32> = u_xlat6;
  let x_805 : vec4<f32> = vs_TEXCOORD5;
  let x_807 : vec3<f32> = (vec3<f32>(x_802.y, x_802.y, x_802.y) * vec3<f32>(x_805.x, x_805.y, x_805.z));
  let x_808 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_807.x, x_807.y, x_807.z, x_808.w);
  let x_810 : vec4<f32> = u_xlat6;
  let x_813 : vec4<f32> = vs_TEXCOORD4;
  let x_817 : vec4<f32> = u_xlat1;
  let x_819 : vec3<f32> = ((vec3<f32>(x_810.x, x_810.x, x_810.x) * -(vec3<f32>(x_813.x, x_813.y, x_813.z))) + vec3<f32>(x_817.x, x_817.y, x_817.z));
  let x_820 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_819.x, x_819.y, x_819.z, x_820.w);
  let x_822 : vec4<f32> = u_xlat6;
  let x_825 : vec4<f32> = vs_TEXCOORD3;
  let x_828 : vec4<f32> = u_xlat1;
  let x_830 : vec3<f32> = ((vec3<f32>(x_822.z, x_822.z, x_822.z) * vec3<f32>(x_825.x, x_825.y, x_825.z)) + vec3<f32>(x_828.x, x_828.y, x_828.z));
  let x_831 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_830.x, x_830.y, x_830.z, x_831.w);
  let x_833 : vec4<f32> = u_xlat1;
  let x_835 : vec4<f32> = u_xlat1;
  u_xlat64 = dot(vec3<f32>(x_833.x, x_833.y, x_833.z), vec3<f32>(x_835.x, x_835.y, x_835.z));
  let x_838 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_838);
  let x_840 : f32 = u_xlat64;
  let x_842 : vec4<f32> = u_xlat1;
  let x_844 : vec3<f32> = (vec3<f32>(x_840, x_840, x_840) * vec3<f32>(x_842.x, x_842.y, x_842.z));
  let x_845 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_844.x, x_844.y, x_844.z, x_845.w);
  let x_849 : vec3<f32> = vs_TEXCOORD7;
  let x_856 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres0;
  let x_859 : vec3<f32> = (x_849 + -(vec3<f32>(x_856.x, x_856.y, x_856.z)));
  let x_860 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_859.x, x_859.y, x_859.z, x_860.w);
  let x_862 : vec3<f32> = vs_TEXCOORD7;
  let x_864 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres1;
  let x_867 : vec3<f32> = (x_862 + -(vec3<f32>(x_864.x, x_864.y, x_864.z)));
  let x_868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_867.x, x_867.y, x_867.z, x_868.w);
  let x_870 : vec3<f32> = vs_TEXCOORD7;
  let x_872 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres2;
  let x_875 : vec3<f32> = (x_870 + -(vec3<f32>(x_872.x, x_872.y, x_872.z)));
  let x_876 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_875.x, x_875.y, x_875.z, x_876.w);
  let x_878 : vec3<f32> = vs_TEXCOORD7;
  let x_880 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres3;
  let x_883 : vec3<f32> = (x_878 + -(vec3<f32>(x_880.x, x_880.y, x_880.z)));
  let x_884 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_883.x, x_883.y, x_883.z, x_884.w);
  let x_886 : vec4<f32> = u_xlat2;
  let x_888 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_886.x, x_886.y, x_886.z), vec3<f32>(x_888.x, x_888.y, x_888.z));
  let x_892 : vec4<f32> = u_xlat3;
  let x_894 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_898 : vec4<f32> = u_xlat4;
  let x_900 : vec4<f32> = u_xlat4;
  u_xlat2.z = dot(vec3<f32>(x_898.x, x_898.y, x_898.z), vec3<f32>(x_900.x, x_900.y, x_900.z));
  let x_904 : vec4<f32> = u_xlat6;
  let x_906 : vec4<f32> = u_xlat6;
  u_xlat2.w = dot(vec3<f32>(x_904.x, x_904.y, x_904.z), vec3<f32>(x_906.x, x_906.y, x_906.z));
  let x_912 : vec4<f32> = u_xlat2;
  let x_914 : vec4<f32> = x_854.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_912 < x_914);
  let x_917 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_917);
  let x_921 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_921);
  let x_925 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_925);
  let x_929 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_929);
  let x_933 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_933);
  let x_938 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_938);
  let x_942 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_942);
  let x_945 : vec4<f32> = u_xlat2;
  let x_947 : vec4<f32> = u_xlat3;
  let x_949 : vec3<f32> = (vec3<f32>(x_945.x, x_945.y, x_945.z) + vec3<f32>(x_947.y, x_947.z, x_947.w));
  let x_950 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_949.x, x_949.y, x_949.z, x_950.w);
  let x_952 : vec4<f32> = u_xlat2;
  let x_955 : vec3<f32> = max(vec3<f32>(x_952.x, x_952.y, x_952.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_956 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_956.x, x_955.x, x_955.y, x_955.z);
  let x_958 : vec4<f32> = u_xlat3;
  u_xlat64 = dot(x_958, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_962 : f32 = u_xlat64;
  u_xlat64 = (-(x_962) + 4.0f);
  let x_967 : f32 = u_xlat64;
  u_xlatu64 = u32(x_967);
  let x_971 : u32 = u_xlatu64;
  u_xlati64 = (bitcast<i32>(x_971) << bitcast<u32>(2i));
  let x_974 : vec3<f32> = vs_TEXCOORD7;
  let x_976 : i32 = u_xlati64;
  let x_979 : i32 = u_xlati64;
  let x_983 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_976 + 1i) / 4i)][((x_979 + 1i) % 4i)];
  let x_985 : vec3<f32> = (vec3<f32>(x_974.y, x_974.y, x_974.y) * vec3<f32>(x_983.x, x_983.y, x_983.z));
  let x_986 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_985.x, x_985.y, x_985.z, x_986.w);
  let x_988 : i32 = u_xlati64;
  let x_990 : i32 = u_xlati64;
  let x_993 : vec4<f32> = x_854.x_MainLightWorldToShadow[(x_988 / 4i)][(x_990 % 4i)];
  let x_995 : vec3<f32> = vs_TEXCOORD7;
  let x_998 : vec4<f32> = u_xlat2;
  let x_1000 : vec3<f32> = ((vec3<f32>(x_993.x, x_993.y, x_993.z) * vec3<f32>(x_995.x, x_995.x, x_995.x)) + vec3<f32>(x_998.x, x_998.y, x_998.z));
  let x_1001 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1000.x, x_1000.y, x_1000.z, x_1001.w);
  let x_1003 : i32 = u_xlati64;
  let x_1006 : i32 = u_xlati64;
  let x_1010 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_1003 + 2i) / 4i)][((x_1006 + 2i) % 4i)];
  let x_1012 : vec3<f32> = vs_TEXCOORD7;
  let x_1015 : vec4<f32> = u_xlat2;
  let x_1017 : vec3<f32> = ((vec3<f32>(x_1010.x, x_1010.y, x_1010.z) * vec3<f32>(x_1012.z, x_1012.z, x_1012.z)) + vec3<f32>(x_1015.x, x_1015.y, x_1015.z));
  let x_1018 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1017.x, x_1017.y, x_1017.z, x_1018.w);
  let x_1020 : vec4<f32> = u_xlat2;
  let x_1022 : i32 = u_xlati64;
  let x_1025 : i32 = u_xlati64;
  let x_1029 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_1022 + 3i) / 4i)][((x_1025 + 3i) % 4i)];
  let x_1031 : vec3<f32> = (vec3<f32>(x_1020.x, x_1020.y, x_1020.z) + vec3<f32>(x_1029.x, x_1029.y, x_1029.z));
  let x_1032 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1031.x, x_1031.y, x_1031.z, x_1032.w);
  let x_1035 : f32 = vs_TEXCOORD7.y;
  let x_1037 : f32 = x_128.unity_MatrixV[1i].z;
  u_xlat64 = (x_1035 * x_1037);
  let x_1040 : f32 = x_128.unity_MatrixV[0i].z;
  let x_1042 : f32 = vs_TEXCOORD7.x;
  let x_1044 : f32 = u_xlat64;
  u_xlat64 = ((x_1040 * x_1042) + x_1044);
  let x_1047 : f32 = x_128.unity_MatrixV[2i].z;
  let x_1049 : f32 = vs_TEXCOORD7.z;
  let x_1051 : f32 = u_xlat64;
  u_xlat64 = ((x_1047 * x_1049) + x_1051);
  let x_1053 : f32 = u_xlat64;
  let x_1055 : f32 = x_128.unity_MatrixV[3i].z;
  u_xlat64 = (x_1053 + x_1055);
  let x_1057 : f32 = u_xlat64;
  let x_1060 : f32 = x_128.x_ProjectionParams.y;
  u_xlat64 = (-(x_1057) + -(x_1060));
  let x_1063 : f32 = u_xlat64;
  u_xlat64 = max(x_1063, 0.0f);
  let x_1065 : f32 = u_xlat64;
  let x_1067 : f32 = x_128.unity_FogParams.x;
  u_xlat64 = (x_1065 * x_1067);
  let x_1074 : vec4<f32> = vs_TEXCOORD0;
  let x_1077 : f32 = x_128.x_GlobalMipBias.x;
  let x_1078 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, vec2<f32>(x_1074.z, x_1074.w), x_1077);
  u_xlat3 = x_1078;
  let x_1083 : vec4<f32> = vs_TEXCOORD0;
  let x_1086 : f32 = x_128.x_GlobalMipBias.x;
  let x_1087 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, vec2<f32>(x_1083.z, x_1083.w), x_1086);
  let x_1088 : vec3<f32> = vec3<f32>(x_1087.x, x_1087.y, x_1087.z);
  let x_1089 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1088.x, x_1088.y, x_1088.z, x_1089.w);
  let x_1091 : vec4<f32> = u_xlat3;
  let x_1095 : vec3<f32> = (vec3<f32>(x_1091.x, x_1091.y, x_1091.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1096 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1095.x, x_1095.y, x_1095.z, x_1096.w);
  let x_1099 : vec4<f32> = u_xlat1;
  let x_1101 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_1099.x, x_1099.y, x_1099.z), vec3<f32>(x_1101.x, x_1101.y, x_1101.z));
  let x_1104 : f32 = u_xlat65;
  u_xlat65 = (x_1104 + 0.5f);
  let x_1106 : f32 = u_xlat65;
  let x_1108 : vec4<f32> = u_xlat4;
  let x_1110 : vec3<f32> = (vec3<f32>(x_1106, x_1106, x_1106) * vec3<f32>(x_1108.x, x_1108.y, x_1108.z));
  let x_1111 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1110.x, x_1110.y, x_1110.z, x_1111.w);
  let x_1114 : f32 = u_xlat3.w;
  u_xlat65 = max(x_1114, 0.0001f);
  let x_1117 : vec4<f32> = u_xlat3;
  let x_1119 : f32 = u_xlat65;
  let x_1121 : vec3<f32> = (vec3<f32>(x_1117.x, x_1117.y, x_1117.z) / vec3<f32>(x_1119, x_1119, x_1119));
  let x_1122 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1121.x, x_1121.y, x_1121.z, x_1122.w);
  let x_1126 : vec4<f32> = x_128.x_ScaledScreenParams;
  let x_1127 : vec2<f32> = vec2<f32>(x_1126.x, x_1126.y);
  let x_1131 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1127.x, x_1127.y));
  let x_1132 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1131.x, x_1131.y, x_1132.z, x_1132.w);
  let x_1134 : vec4<f32> = u_xlat4;
  let x_1136 : vec4<f32> = hlslcc_FragCoord;
  let x_1138 : vec2<f32> = (vec2<f32>(x_1134.x, x_1134.y) * vec2<f32>(x_1136.x, x_1136.y));
  let x_1139 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1138.x, x_1138.y, x_1139.z, x_1139.w);
  let x_1142 : f32 = u_xlat4.y;
  let x_1144 : f32 = x_128.x_ScaleBiasRt.x;
  let x_1147 : f32 = x_128.x_ScaleBiasRt.y;
  u_xlat65 = ((x_1142 * x_1144) + x_1147);
  let x_1149 : f32 = u_xlat65;
  u_xlat4.z = (-(x_1149) + 1.0f);
  let x_1154 : f32 = u_xlat0.x;
  u_xlat65 = ((-(x_1154) * 0.959999979f) + 0.959999979f);
  let x_1160 : f32 = u_xlat42;
  let x_1161 : f32 = u_xlat65;
  u_xlat66 = (x_1160 + -(x_1161));
  let x_1164 : f32 = u_xlat65;
  let x_1166 : vec4<f32> = u_xlat5;
  let x_1168 : vec3<f32> = (vec3<f32>(x_1164, x_1164, x_1164) * vec3<f32>(x_1166.x, x_1166.y, x_1166.z));
  let x_1169 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1168.x, x_1168.y, x_1168.z, x_1169.w);
  let x_1171 : vec4<f32> = u_xlat5;
  let x_1175 : vec3<f32> = (vec3<f32>(x_1171.x, x_1171.y, x_1171.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_1176 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1175.x, x_1175.y, x_1175.z, x_1176.w);
  let x_1178 : vec3<f32> = u_xlat0;
  let x_1180 : vec4<f32> = u_xlat5;
  let x_1185 : vec3<f32> = ((vec3<f32>(x_1178.x, x_1178.x, x_1178.x) * vec3<f32>(x_1180.x, x_1180.y, x_1180.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_1186 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1185.x, x_1185.y, x_1185.z, x_1186.w);
  let x_1188 : f32 = u_xlat42;
  u_xlat0.x = (-(x_1188) + 1.0f);
  let x_1193 : f32 = u_xlat0.x;
  let x_1195 : f32 = u_xlat0.x;
  u_xlat42 = (x_1193 * x_1195);
  let x_1197 : f32 = u_xlat42;
  u_xlat42 = max(x_1197, 0.0078125f);
  let x_1200 : f32 = u_xlat42;
  let x_1201 : f32 = u_xlat42;
  u_xlat65 = (x_1200 * x_1201);
  let x_1203 : f32 = u_xlat66;
  u_xlat66 = (x_1203 + 1.0f);
  let x_1205 : f32 = u_xlat66;
  u_xlat66 = clamp(x_1205, 0.0f, 1.0f);
  let x_1208 : f32 = u_xlat42;
  u_xlat25 = ((x_1208 * 4.0f) + 2.0f);
  let x_1216 : vec4<f32> = u_xlat4;
  let x_1219 : f32 = x_128.x_GlobalMipBias.x;
  let x_1220 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1216.x, x_1216.z), x_1219);
  u_xlat4.x = x_1220.x;
  let x_1225 : f32 = u_xlat4.x;
  u_xlat46 = (x_1225 + -1.0f);
  let x_1228 : f32 = x_128.x_AmbientOcclusionParam.w;
  let x_1229 : f32 = u_xlat46;
  u_xlat46 = ((x_1228 * x_1229) + 1.0f);
  let x_1232 : f32 = u_xlat21;
  let x_1234 : f32 = u_xlat4.x;
  u_xlat21 = min(x_1232, x_1234);
  let x_1238 : f32 = x_854.x_MainLightShadowParams.y;
  u_xlatb4 = (0.0f < x_1238);
  let x_1240 : bool = u_xlatb4;
  if (x_1240) {
    let x_1244 : f32 = x_854.x_MainLightShadowParams.y;
    u_xlatb4 = (x_1244 == 1.0f);
    let x_1246 : bool = u_xlatb4;
    if (x_1246) {
      let x_1249 : vec4<f32> = u_xlat2;
      let x_1252 : vec4<f32> = x_854.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y) + x_1252);
      let x_1255 : vec4<f32> = u_xlat7;
      let x_1256 : vec2<f32> = vec2<f32>(x_1255.x, x_1255.y);
      let x_1258 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_1256.x, x_1256.y, x_1258);
      let x_1270 : vec3<f32> = txVec0;
      let x_1272 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1270.xy, x_1270.z);
      u_xlat8.x = x_1272;
      let x_1275 : vec4<f32> = u_xlat7;
      let x_1276 : vec2<f32> = vec2<f32>(x_1275.z, x_1275.w);
      let x_1278 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_1276.x, x_1276.y, x_1278);
      let x_1285 : vec3<f32> = txVec1;
      let x_1287 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1285.xy, x_1285.z);
      u_xlat8.y = x_1287;
      let x_1289 : vec4<f32> = u_xlat2;
      let x_1292 : vec4<f32> = x_854.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1289.x, x_1289.y, x_1289.x, x_1289.y) + x_1292);
      let x_1295 : vec4<f32> = u_xlat7;
      let x_1296 : vec2<f32> = vec2<f32>(x_1295.x, x_1295.y);
      let x_1298 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_1296.x, x_1296.y, x_1298);
      let x_1305 : vec3<f32> = txVec2;
      let x_1307 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1305.xy, x_1305.z);
      u_xlat8.z = x_1307;
      let x_1310 : vec4<f32> = u_xlat7;
      let x_1311 : vec2<f32> = vec2<f32>(x_1310.z, x_1310.w);
      let x_1313 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_1311.x, x_1311.y, x_1313);
      let x_1320 : vec3<f32> = txVec3;
      let x_1322 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1320.xy, x_1320.z);
      u_xlat8.w = x_1322;
      let x_1324 : vec4<f32> = u_xlat8;
      u_xlat4.x = dot(x_1324, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1332 : f32 = x_854.x_MainLightShadowParams.y;
      u_xlatb67 = (x_1332 == 2.0f);
      let x_1334 : bool = u_xlatb67;
      if (x_1334) {
        let x_1337 : vec4<f32> = u_xlat2;
        let x_1340 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1343 : vec2<f32> = ((vec2<f32>(x_1337.x, x_1337.y) * vec2<f32>(x_1340.z, x_1340.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1344 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1343.x, x_1343.y, x_1344.z, x_1344.w);
        let x_1346 : vec4<f32> = u_xlat7;
        let x_1348 : vec2<f32> = floor(vec2<f32>(x_1346.x, x_1346.y));
        let x_1349 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1348.x, x_1348.y, x_1349.z, x_1349.w);
        let x_1353 : vec4<f32> = u_xlat2;
        let x_1356 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1359 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1353.x, x_1353.y) * vec2<f32>(x_1356.z, x_1356.w)) + -(vec2<f32>(x_1359.x, x_1359.y)));
        let x_1363 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1363.x, x_1363.x, x_1363.y, x_1363.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1367 : vec4<f32> = u_xlat8;
        let x_1369 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1367.x, x_1367.x, x_1367.z, x_1367.z) * vec4<f32>(x_1369.x, x_1369.x, x_1369.z, x_1369.z));
        let x_1372 : vec4<f32> = u_xlat9;
        let x_1376 : vec2<f32> = (vec2<f32>(x_1372.y, x_1372.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1376.x, x_1377.y, x_1376.y, x_1377.w);
        let x_1379 : vec4<f32> = u_xlat9;
        let x_1382 : vec2<f32> = u_xlat49;
        let x_1384 : vec2<f32> = ((vec2<f32>(x_1379.x, x_1379.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1382));
        let x_1385 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1384.x, x_1384.y, x_1385.z, x_1385.w);
        let x_1388 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_1388) + vec2<f32>(1.0f, 1.0f));
        let x_1391 : vec2<f32> = u_xlat49;
        let x_1393 : vec2<f32> = min(x_1391, vec2<f32>(0.0f, 0.0f));
        let x_1394 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1393.x, x_1393.y, x_1394.z, x_1394.w);
        let x_1396 : vec4<f32> = u_xlat10;
        let x_1399 : vec4<f32> = u_xlat10;
        let x_1402 : vec2<f32> = u_xlat51;
        let x_1403 : vec2<f32> = ((-(vec2<f32>(x_1396.x, x_1396.y)) * vec2<f32>(x_1399.x, x_1399.y)) + x_1402);
        let x_1404 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1403.x, x_1403.y, x_1404.z, x_1404.w);
        let x_1406 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_1406, vec2<f32>(0.0f, 0.0f));
        let x_1408 : vec2<f32> = u_xlat49;
        let x_1410 : vec2<f32> = u_xlat49;
        let x_1412 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_1408) * x_1410) + vec2<f32>(x_1412.y, x_1412.w));
        let x_1415 : vec4<f32> = u_xlat10;
        let x_1417 : vec2<f32> = (vec2<f32>(x_1415.x, x_1415.y) + vec2<f32>(1.0f, 1.0f));
        let x_1418 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1417.x, x_1417.y, x_1418.z, x_1418.w);
        let x_1420 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_1420 + vec2<f32>(1.0f, 1.0f));
        let x_1422 : vec4<f32> = u_xlat9;
        let x_1426 : vec2<f32> = (vec2<f32>(x_1422.x, x_1422.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1427 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1426.x, x_1426.y, x_1427.z, x_1427.w);
        let x_1429 : vec2<f32> = u_xlat51;
        let x_1430 : vec2<f32> = (x_1429 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1431 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1430.x, x_1430.y, x_1431.z, x_1431.w);
        let x_1433 : vec4<f32> = u_xlat10;
        let x_1435 : vec2<f32> = (vec2<f32>(x_1433.x, x_1433.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1436 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1435.x, x_1435.y, x_1436.z, x_1436.w);
        let x_1438 : vec2<f32> = u_xlat49;
        let x_1439 : vec2<f32> = (x_1438 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1440 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1439.x, x_1439.y, x_1440.z, x_1440.w);
        let x_1442 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1442.y, x_1442.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1446 : f32 = u_xlat10.x;
        u_xlat11.z = x_1446;
        let x_1449 : f32 = u_xlat49.x;
        u_xlat11.w = x_1449;
        let x_1452 : f32 = u_xlat12.x;
        u_xlat9.z = x_1452;
        let x_1455 : f32 = u_xlat8.x;
        u_xlat9.w = x_1455;
        let x_1457 : vec4<f32> = u_xlat9;
        let x_1459 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1457.z, x_1457.w, x_1457.x, x_1457.z) + vec4<f32>(x_1459.z, x_1459.w, x_1459.x, x_1459.z));
        let x_1463 : f32 = u_xlat11.y;
        u_xlat10.z = x_1463;
        let x_1466 : f32 = u_xlat49.y;
        u_xlat10.w = x_1466;
        let x_1469 : f32 = u_xlat9.y;
        u_xlat12.z = x_1469;
        let x_1472 : f32 = u_xlat8.z;
        u_xlat12.w = x_1472;
        let x_1474 : vec4<f32> = u_xlat10;
        let x_1476 : vec4<f32> = u_xlat12;
        let x_1478 : vec3<f32> = (vec3<f32>(x_1474.z, x_1474.y, x_1474.w) + vec3<f32>(x_1476.z, x_1476.y, x_1476.w));
        let x_1479 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1478.x, x_1478.y, x_1478.z, x_1479.w);
        let x_1481 : vec4<f32> = u_xlat9;
        let x_1483 : vec4<f32> = u_xlat13;
        let x_1485 : vec3<f32> = (vec3<f32>(x_1481.x, x_1481.z, x_1481.w) / vec3<f32>(x_1483.z, x_1483.w, x_1483.y));
        let x_1486 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1485.x, x_1485.y, x_1485.z, x_1486.w);
        let x_1488 : vec4<f32> = u_xlat9;
        let x_1493 : vec3<f32> = (vec3<f32>(x_1488.x, x_1488.y, x_1488.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1494 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1493.x, x_1493.y, x_1493.z, x_1494.w);
        let x_1496 : vec4<f32> = u_xlat12;
        let x_1498 : vec4<f32> = u_xlat8;
        let x_1500 : vec3<f32> = (vec3<f32>(x_1496.z, x_1496.y, x_1496.w) / vec3<f32>(x_1498.x, x_1498.y, x_1498.z));
        let x_1501 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1500.x, x_1500.y, x_1500.z, x_1501.w);
        let x_1503 : vec4<f32> = u_xlat10;
        let x_1505 : vec3<f32> = (vec3<f32>(x_1503.x, x_1503.y, x_1503.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1506 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1505.x, x_1505.y, x_1505.z, x_1506.w);
        let x_1508 : vec4<f32> = u_xlat9;
        let x_1511 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1513 : vec3<f32> = (vec3<f32>(x_1508.y, x_1508.x, x_1508.z) * vec3<f32>(x_1511.x, x_1511.x, x_1511.x));
        let x_1514 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1513.x, x_1513.y, x_1513.z, x_1514.w);
        let x_1516 : vec4<f32> = u_xlat10;
        let x_1519 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1521 : vec3<f32> = (vec3<f32>(x_1516.x, x_1516.y, x_1516.z) * vec3<f32>(x_1519.y, x_1519.y, x_1519.y));
        let x_1522 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1521.x, x_1521.y, x_1521.z, x_1522.w);
        let x_1525 : f32 = u_xlat10.x;
        u_xlat9.w = x_1525;
        let x_1527 : vec4<f32> = u_xlat7;
        let x_1530 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1533 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1527.x, x_1527.y, x_1527.x, x_1527.y) * vec4<f32>(x_1530.x, x_1530.y, x_1530.x, x_1530.y)) + vec4<f32>(x_1533.y, x_1533.w, x_1533.x, x_1533.w));
        let x_1536 : vec4<f32> = u_xlat7;
        let x_1539 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1542 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1536.x, x_1536.y) * vec2<f32>(x_1539.x, x_1539.y)) + vec2<f32>(x_1542.z, x_1542.w));
        let x_1546 : f32 = u_xlat9.y;
        u_xlat10.w = x_1546;
        let x_1548 : vec4<f32> = u_xlat10;
        let x_1549 : vec2<f32> = vec2<f32>(x_1548.y, x_1548.z);
        let x_1550 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1550.x, x_1549.x, x_1550.z, x_1549.y);
        let x_1552 : vec4<f32> = u_xlat7;
        let x_1555 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1558 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1552.x, x_1552.y, x_1552.x, x_1552.y) * vec4<f32>(x_1555.x, x_1555.y, x_1555.x, x_1555.y)) + vec4<f32>(x_1558.x, x_1558.y, x_1558.z, x_1558.y));
        let x_1561 : vec4<f32> = u_xlat7;
        let x_1564 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1567 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1561.x, x_1561.y, x_1561.x, x_1561.y) * vec4<f32>(x_1564.x, x_1564.y, x_1564.x, x_1564.y)) + vec4<f32>(x_1567.w, x_1567.y, x_1567.w, x_1567.z));
        let x_1570 : vec4<f32> = u_xlat7;
        let x_1573 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1576 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1570.x, x_1570.y, x_1570.x, x_1570.y) * vec4<f32>(x_1573.x, x_1573.y, x_1573.x, x_1573.y)) + vec4<f32>(x_1576.x, x_1576.w, x_1576.z, x_1576.w));
        let x_1580 : vec4<f32> = u_xlat8;
        let x_1582 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1580.x, x_1580.x, x_1580.x, x_1580.y) * vec4<f32>(x_1582.z, x_1582.w, x_1582.y, x_1582.z));
        let x_1586 : vec4<f32> = u_xlat8;
        let x_1588 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1586.y, x_1586.y, x_1586.z, x_1586.z) * x_1588);
        let x_1592 : f32 = u_xlat8.z;
        let x_1594 : f32 = u_xlat13.y;
        u_xlat67 = (x_1592 * x_1594);
        let x_1597 : vec4<f32> = u_xlat11;
        let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
        let x_1600 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
        let x_1608 : vec3<f32> = txVec4;
        let x_1610 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1608.xy, x_1608.z);
        u_xlat68 = x_1610;
        let x_1612 : vec4<f32> = u_xlat11;
        let x_1613 : vec2<f32> = vec2<f32>(x_1612.z, x_1612.w);
        let x_1615 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_1613.x, x_1613.y, x_1615);
        let x_1623 : vec3<f32> = txVec5;
        let x_1625 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1623.xy, x_1623.z);
        u_xlat69 = x_1625;
        let x_1626 : f32 = u_xlat69;
        let x_1628 : f32 = u_xlat14.y;
        u_xlat69 = (x_1626 * x_1628);
        let x_1631 : f32 = u_xlat14.x;
        let x_1632 : f32 = u_xlat68;
        let x_1634 : f32 = u_xlat69;
        u_xlat68 = ((x_1631 * x_1632) + x_1634);
        let x_1637 : vec2<f32> = u_xlat49;
        let x_1639 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1637.x, x_1637.y, x_1639);
        let x_1646 : vec3<f32> = txVec6;
        let x_1648 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1646.xy, x_1646.z);
        u_xlat69 = x_1648;
        let x_1650 : f32 = u_xlat14.z;
        let x_1651 : f32 = u_xlat69;
        let x_1653 : f32 = u_xlat68;
        u_xlat68 = ((x_1650 * x_1651) + x_1653);
        let x_1656 : vec4<f32> = u_xlat10;
        let x_1657 : vec2<f32> = vec2<f32>(x_1656.x, x_1656.y);
        let x_1659 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1657.x, x_1657.y, x_1659);
        let x_1666 : vec3<f32> = txVec7;
        let x_1668 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1666.xy, x_1666.z);
        u_xlat69 = x_1668;
        let x_1670 : f32 = u_xlat14.w;
        let x_1671 : f32 = u_xlat69;
        let x_1673 : f32 = u_xlat68;
        u_xlat68 = ((x_1670 * x_1671) + x_1673);
        let x_1676 : vec4<f32> = u_xlat12;
        let x_1677 : vec2<f32> = vec2<f32>(x_1676.x, x_1676.y);
        let x_1679 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1677.x, x_1677.y, x_1679);
        let x_1686 : vec3<f32> = txVec8;
        let x_1688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1686.xy, x_1686.z);
        u_xlat69 = x_1688;
        let x_1690 : f32 = u_xlat15.x;
        let x_1691 : f32 = u_xlat69;
        let x_1693 : f32 = u_xlat68;
        u_xlat68 = ((x_1690 * x_1691) + x_1693);
        let x_1696 : vec4<f32> = u_xlat12;
        let x_1697 : vec2<f32> = vec2<f32>(x_1696.z, x_1696.w);
        let x_1699 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1697.x, x_1697.y, x_1699);
        let x_1706 : vec3<f32> = txVec9;
        let x_1708 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1706.xy, x_1706.z);
        u_xlat69 = x_1708;
        let x_1710 : f32 = u_xlat15.y;
        let x_1711 : f32 = u_xlat69;
        let x_1713 : f32 = u_xlat68;
        u_xlat68 = ((x_1710 * x_1711) + x_1713);
        let x_1716 : vec4<f32> = u_xlat10;
        let x_1717 : vec2<f32> = vec2<f32>(x_1716.z, x_1716.w);
        let x_1719 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1717.x, x_1717.y, x_1719);
        let x_1726 : vec3<f32> = txVec10;
        let x_1728 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1726.xy, x_1726.z);
        u_xlat69 = x_1728;
        let x_1730 : f32 = u_xlat15.z;
        let x_1731 : f32 = u_xlat69;
        let x_1733 : f32 = u_xlat68;
        u_xlat68 = ((x_1730 * x_1731) + x_1733);
        let x_1736 : vec4<f32> = u_xlat9;
        let x_1737 : vec2<f32> = vec2<f32>(x_1736.x, x_1736.y);
        let x_1739 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1737.x, x_1737.y, x_1739);
        let x_1746 : vec3<f32> = txVec11;
        let x_1748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1746.xy, x_1746.z);
        u_xlat69 = x_1748;
        let x_1750 : f32 = u_xlat15.w;
        let x_1751 : f32 = u_xlat69;
        let x_1753 : f32 = u_xlat68;
        u_xlat68 = ((x_1750 * x_1751) + x_1753);
        let x_1756 : vec4<f32> = u_xlat9;
        let x_1757 : vec2<f32> = vec2<f32>(x_1756.z, x_1756.w);
        let x_1759 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1757.x, x_1757.y, x_1759);
        let x_1766 : vec3<f32> = txVec12;
        let x_1768 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1766.xy, x_1766.z);
        u_xlat69 = x_1768;
        let x_1769 : f32 = u_xlat67;
        let x_1770 : f32 = u_xlat69;
        let x_1772 : f32 = u_xlat68;
        u_xlat4.x = ((x_1769 * x_1770) + x_1772);
      } else {
        let x_1776 : vec4<f32> = u_xlat2;
        let x_1779 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1782 : vec2<f32> = ((vec2<f32>(x_1776.x, x_1776.y) * vec2<f32>(x_1779.z, x_1779.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1783 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1782.x, x_1782.y, x_1783.z, x_1783.w);
        let x_1785 : vec4<f32> = u_xlat7;
        let x_1787 : vec2<f32> = floor(vec2<f32>(x_1785.x, x_1785.y));
        let x_1788 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1787.x, x_1787.y, x_1788.z, x_1788.w);
        let x_1790 : vec4<f32> = u_xlat2;
        let x_1793 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1796 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1790.x, x_1790.y) * vec2<f32>(x_1793.z, x_1793.w)) + -(vec2<f32>(x_1796.x, x_1796.y)));
        let x_1800 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1800.x, x_1800.x, x_1800.y, x_1800.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1803 : vec4<f32> = u_xlat8;
        let x_1805 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1803.x, x_1803.x, x_1803.z, x_1803.z) * vec4<f32>(x_1805.x, x_1805.x, x_1805.z, x_1805.z));
        let x_1808 : vec4<f32> = u_xlat9;
        let x_1812 : vec2<f32> = (vec2<f32>(x_1808.y, x_1808.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1813 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1813.x, x_1812.x, x_1813.z, x_1812.y);
        let x_1815 : vec4<f32> = u_xlat9;
        let x_1818 : vec2<f32> = u_xlat49;
        let x_1820 : vec2<f32> = ((vec2<f32>(x_1815.x, x_1815.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1818));
        let x_1821 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1820.x, x_1821.y, x_1820.y, x_1821.w);
        let x_1823 : vec2<f32> = u_xlat49;
        let x_1825 : vec2<f32> = (-(x_1823) + vec2<f32>(1.0f, 1.0f));
        let x_1826 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1825.x, x_1825.y, x_1826.z, x_1826.w);
        let x_1828 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_1828, vec2<f32>(0.0f, 0.0f));
        let x_1830 : vec2<f32> = u_xlat51;
        let x_1832 : vec2<f32> = u_xlat51;
        let x_1834 : vec4<f32> = u_xlat9;
        let x_1836 : vec2<f32> = ((-(x_1830) * x_1832) + vec2<f32>(x_1834.x, x_1834.y));
        let x_1837 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1836.x, x_1836.y, x_1837.z, x_1837.w);
        let x_1839 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_1839, vec2<f32>(0.0f, 0.0f));
        let x_1842 : vec2<f32> = u_xlat51;
        let x_1844 : vec2<f32> = u_xlat51;
        let x_1846 : vec4<f32> = u_xlat8;
        let x_1848 : vec2<f32> = ((-(x_1842) * x_1844) + vec2<f32>(x_1846.y, x_1846.w));
        let x_1849 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1848.x, x_1849.y, x_1848.y);
        let x_1851 : vec4<f32> = u_xlat9;
        let x_1853 : vec2<f32> = (vec2<f32>(x_1851.x, x_1851.y) + vec2<f32>(2.0f, 2.0f));
        let x_1854 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1853.x, x_1853.y, x_1854.z, x_1854.w);
        let x_1856 : vec3<f32> = u_xlat29;
        let x_1858 : vec2<f32> = (vec2<f32>(x_1856.x, x_1856.z) + vec2<f32>(2.0f, 2.0f));
        let x_1859 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1859.x, x_1858.x, x_1859.z, x_1858.y);
        let x_1862 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1862 * 0.081632003f);
        let x_1866 : vec4<f32> = u_xlat8;
        let x_1869 : vec3<f32> = (vec3<f32>(x_1866.z, x_1866.x, x_1866.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1870 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1869.x, x_1869.y, x_1869.z, x_1870.w);
        let x_1872 : vec4<f32> = u_xlat9;
        let x_1875 : vec2<f32> = (vec2<f32>(x_1872.x, x_1872.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1876 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1875.x, x_1875.y, x_1876.z, x_1876.w);
        let x_1879 : f32 = u_xlat12.y;
        u_xlat11.x = x_1879;
        let x_1881 : vec2<f32> = u_xlat49;
        let x_1888 : vec2<f32> = ((vec2<f32>(x_1881.x, x_1881.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1889 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1889.x, x_1888.x, x_1889.z, x_1888.y);
        let x_1891 : vec2<f32> = u_xlat49;
        let x_1895 : vec2<f32> = ((vec2<f32>(x_1891.x, x_1891.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1896 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1895.x, x_1896.y, x_1895.y, x_1896.w);
        let x_1899 : f32 = u_xlat8.x;
        u_xlat9.y = x_1899;
        let x_1902 : f32 = u_xlat10.y;
        u_xlat9.w = x_1902;
        let x_1904 : vec4<f32> = u_xlat9;
        let x_1905 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1904 + x_1905);
        let x_1907 : vec2<f32> = u_xlat49;
        let x_1910 : vec2<f32> = ((vec2<f32>(x_1907.y, x_1907.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1911 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1911.x, x_1910.x, x_1911.z, x_1910.y);
        let x_1913 : vec2<f32> = u_xlat49;
        let x_1916 : vec2<f32> = ((vec2<f32>(x_1913.y, x_1913.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1917 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1916.x, x_1917.y, x_1916.y, x_1917.w);
        let x_1920 : f32 = u_xlat8.y;
        u_xlat10.y = x_1920;
        let x_1922 : vec4<f32> = u_xlat10;
        let x_1923 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1922 + x_1923);
        let x_1925 : vec4<f32> = u_xlat9;
        let x_1926 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1925 / x_1926);
        let x_1928 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1928 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1934 : vec4<f32> = u_xlat10;
        let x_1935 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1934 / x_1935);
        let x_1937 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1937 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1939 : vec4<f32> = u_xlat9;
        let x_1942 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1939.w, x_1939.x, x_1939.y, x_1939.z) * vec4<f32>(x_1942.x, x_1942.x, x_1942.x, x_1942.x));
        let x_1945 : vec4<f32> = u_xlat10;
        let x_1948 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1945.x, x_1945.w, x_1945.y, x_1945.z) * vec4<f32>(x_1948.y, x_1948.y, x_1948.y, x_1948.y));
        let x_1951 : vec4<f32> = u_xlat9;
        let x_1952 : vec3<f32> = vec3<f32>(x_1951.y, x_1951.z, x_1951.w);
        let x_1953 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1952.x, x_1953.y, x_1952.y, x_1952.z);
        let x_1956 : f32 = u_xlat10.x;
        u_xlat12.y = x_1956;
        let x_1958 : vec4<f32> = u_xlat7;
        let x_1961 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1964 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1958.x, x_1958.y, x_1958.x, x_1958.y) * vec4<f32>(x_1961.x, x_1961.y, x_1961.x, x_1961.y)) + vec4<f32>(x_1964.x, x_1964.y, x_1964.z, x_1964.y));
        let x_1967 : vec4<f32> = u_xlat7;
        let x_1970 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1973 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1967.x, x_1967.y) * vec2<f32>(x_1970.x, x_1970.y)) + vec2<f32>(x_1973.w, x_1973.y));
        let x_1977 : f32 = u_xlat12.y;
        u_xlat9.y = x_1977;
        let x_1980 : f32 = u_xlat10.z;
        u_xlat12.y = x_1980;
        let x_1982 : vec4<f32> = u_xlat7;
        let x_1985 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1988 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1982.x, x_1982.y, x_1982.x, x_1982.y) * vec4<f32>(x_1985.x, x_1985.y, x_1985.x, x_1985.y)) + vec4<f32>(x_1988.x, x_1988.y, x_1988.z, x_1988.y));
        let x_1991 : vec4<f32> = u_xlat7;
        let x_1994 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1997 : vec4<f32> = u_xlat12;
        let x_1999 : vec2<f32> = ((vec2<f32>(x_1991.x, x_1991.y) * vec2<f32>(x_1994.x, x_1994.y)) + vec2<f32>(x_1997.w, x_1997.y));
        let x_2000 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1999.x, x_1999.y, x_2000.z, x_2000.w);
        let x_2003 : f32 = u_xlat12.y;
        u_xlat9.z = x_2003;
        let x_2006 : vec4<f32> = u_xlat7;
        let x_2009 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2012 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2006.x, x_2006.y, x_2006.x, x_2006.y) * vec4<f32>(x_2009.x, x_2009.y, x_2009.x, x_2009.y)) + vec4<f32>(x_2012.x, x_2012.y, x_2012.x, x_2012.z));
        let x_2016 : f32 = u_xlat10.w;
        u_xlat12.y = x_2016;
        let x_2019 : vec4<f32> = u_xlat7;
        let x_2022 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2025 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2019.x, x_2019.y, x_2019.x, x_2019.y) * vec4<f32>(x_2022.x, x_2022.y, x_2022.x, x_2022.y)) + vec4<f32>(x_2025.x, x_2025.y, x_2025.z, x_2025.y));
        let x_2029 : vec4<f32> = u_xlat7;
        let x_2032 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2035 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_2029.x, x_2029.y) * vec2<f32>(x_2032.x, x_2032.y)) + vec2<f32>(x_2035.w, x_2035.y));
        let x_2039 : f32 = u_xlat12.y;
        u_xlat9.w = x_2039;
        let x_2042 : vec4<f32> = u_xlat7;
        let x_2045 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2048 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2042.x, x_2042.y) * vec2<f32>(x_2045.x, x_2045.y)) + vec2<f32>(x_2048.x, x_2048.w));
        let x_2051 : vec4<f32> = u_xlat12;
        let x_2052 : vec3<f32> = vec3<f32>(x_2051.x, x_2051.z, x_2051.w);
        let x_2053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2052.x, x_2053.y, x_2052.y, x_2052.z);
        let x_2055 : vec4<f32> = u_xlat7;
        let x_2058 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2061 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2055.x, x_2055.y, x_2055.x, x_2055.y) * vec4<f32>(x_2058.x, x_2058.y, x_2058.x, x_2058.y)) + vec4<f32>(x_2061.x, x_2061.y, x_2061.z, x_2061.y));
        let x_2065 : vec4<f32> = u_xlat7;
        let x_2068 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2071 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2065.x, x_2065.y) * vec2<f32>(x_2068.x, x_2068.y)) + vec2<f32>(x_2071.w, x_2071.y));
        let x_2075 : f32 = u_xlat9.x;
        u_xlat10.x = x_2075;
        let x_2077 : vec4<f32> = u_xlat7;
        let x_2080 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2083 : vec4<f32> = u_xlat10;
        let x_2085 : vec2<f32> = ((vec2<f32>(x_2077.x, x_2077.y) * vec2<f32>(x_2080.x, x_2080.y)) + vec2<f32>(x_2083.x, x_2083.y));
        let x_2086 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2085.x, x_2085.y, x_2086.z, x_2086.w);
        let x_2089 : vec4<f32> = u_xlat8;
        let x_2091 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2089.x, x_2089.x, x_2089.x, x_2089.x) * x_2091);
        let x_2094 : vec4<f32> = u_xlat8;
        let x_2096 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2094.y, x_2094.y, x_2094.y, x_2094.y) * x_2096);
        let x_2099 : vec4<f32> = u_xlat8;
        let x_2101 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2099.z, x_2099.z, x_2099.z, x_2099.z) * x_2101);
        let x_2103 : vec4<f32> = u_xlat8;
        let x_2105 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2103.w, x_2103.w, x_2103.w, x_2103.w) * x_2105);
        let x_2108 : vec4<f32> = u_xlat13;
        let x_2109 : vec2<f32> = vec2<f32>(x_2108.x, x_2108.y);
        let x_2111 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_2109.x, x_2109.y, x_2111);
        let x_2118 : vec3<f32> = txVec13;
        let x_2120 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2118.xy, x_2118.z);
        u_xlat67 = x_2120;
        let x_2122 : vec4<f32> = u_xlat13;
        let x_2123 : vec2<f32> = vec2<f32>(x_2122.z, x_2122.w);
        let x_2125 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_2123.x, x_2123.y, x_2125);
        let x_2132 : vec3<f32> = txVec14;
        let x_2134 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2132.xy, x_2132.z);
        u_xlat68 = x_2134;
        let x_2135 : f32 = u_xlat68;
        let x_2137 : f32 = u_xlat18.y;
        u_xlat68 = (x_2135 * x_2137);
        let x_2140 : f32 = u_xlat18.x;
        let x_2141 : f32 = u_xlat67;
        let x_2143 : f32 = u_xlat68;
        u_xlat67 = ((x_2140 * x_2141) + x_2143);
        let x_2146 : vec2<f32> = u_xlat49;
        let x_2148 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_2146.x, x_2146.y, x_2148);
        let x_2155 : vec3<f32> = txVec15;
        let x_2157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2155.xy, x_2155.z);
        u_xlat68 = x_2157;
        let x_2159 : f32 = u_xlat18.z;
        let x_2160 : f32 = u_xlat68;
        let x_2162 : f32 = u_xlat67;
        u_xlat67 = ((x_2159 * x_2160) + x_2162);
        let x_2165 : vec4<f32> = u_xlat16;
        let x_2166 : vec2<f32> = vec2<f32>(x_2165.x, x_2165.y);
        let x_2168 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_2166.x, x_2166.y, x_2168);
        let x_2175 : vec3<f32> = txVec16;
        let x_2177 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2175.xy, x_2175.z);
        u_xlat68 = x_2177;
        let x_2179 : f32 = u_xlat18.w;
        let x_2180 : f32 = u_xlat68;
        let x_2182 : f32 = u_xlat67;
        u_xlat67 = ((x_2179 * x_2180) + x_2182);
        let x_2185 : vec4<f32> = u_xlat14;
        let x_2186 : vec2<f32> = vec2<f32>(x_2185.x, x_2185.y);
        let x_2188 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_2186.x, x_2186.y, x_2188);
        let x_2195 : vec3<f32> = txVec17;
        let x_2197 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2195.xy, x_2195.z);
        u_xlat68 = x_2197;
        let x_2199 : f32 = u_xlat19.x;
        let x_2200 : f32 = u_xlat68;
        let x_2202 : f32 = u_xlat67;
        u_xlat67 = ((x_2199 * x_2200) + x_2202);
        let x_2205 : vec4<f32> = u_xlat14;
        let x_2206 : vec2<f32> = vec2<f32>(x_2205.z, x_2205.w);
        let x_2208 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_2206.x, x_2206.y, x_2208);
        let x_2215 : vec3<f32> = txVec18;
        let x_2217 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2215.xy, x_2215.z);
        u_xlat68 = x_2217;
        let x_2219 : f32 = u_xlat19.y;
        let x_2220 : f32 = u_xlat68;
        let x_2222 : f32 = u_xlat67;
        u_xlat67 = ((x_2219 * x_2220) + x_2222);
        let x_2225 : vec4<f32> = u_xlat15;
        let x_2226 : vec2<f32> = vec2<f32>(x_2225.x, x_2225.y);
        let x_2228 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_2226.x, x_2226.y, x_2228);
        let x_2235 : vec3<f32> = txVec19;
        let x_2237 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2235.xy, x_2235.z);
        u_xlat68 = x_2237;
        let x_2239 : f32 = u_xlat19.z;
        let x_2240 : f32 = u_xlat68;
        let x_2242 : f32 = u_xlat67;
        u_xlat67 = ((x_2239 * x_2240) + x_2242);
        let x_2245 : vec4<f32> = u_xlat16;
        let x_2246 : vec2<f32> = vec2<f32>(x_2245.z, x_2245.w);
        let x_2248 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_2246.x, x_2246.y, x_2248);
        let x_2255 : vec3<f32> = txVec20;
        let x_2257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2255.xy, x_2255.z);
        u_xlat68 = x_2257;
        let x_2259 : f32 = u_xlat19.w;
        let x_2260 : f32 = u_xlat68;
        let x_2262 : f32 = u_xlat67;
        u_xlat67 = ((x_2259 * x_2260) + x_2262);
        let x_2265 : vec4<f32> = u_xlat17;
        let x_2266 : vec2<f32> = vec2<f32>(x_2265.x, x_2265.y);
        let x_2268 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_2266.x, x_2266.y, x_2268);
        let x_2275 : vec3<f32> = txVec21;
        let x_2277 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2275.xy, x_2275.z);
        u_xlat68 = x_2277;
        let x_2279 : f32 = u_xlat20.x;
        let x_2280 : f32 = u_xlat68;
        let x_2282 : f32 = u_xlat67;
        u_xlat67 = ((x_2279 * x_2280) + x_2282);
        let x_2285 : vec4<f32> = u_xlat17;
        let x_2286 : vec2<f32> = vec2<f32>(x_2285.z, x_2285.w);
        let x_2288 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_2286.x, x_2286.y, x_2288);
        let x_2295 : vec3<f32> = txVec22;
        let x_2297 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2295.xy, x_2295.z);
        u_xlat68 = x_2297;
        let x_2299 : f32 = u_xlat20.y;
        let x_2300 : f32 = u_xlat68;
        let x_2302 : f32 = u_xlat67;
        u_xlat67 = ((x_2299 * x_2300) + x_2302);
        let x_2305 : vec2<f32> = u_xlat30;
        let x_2307 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_2305.x, x_2305.y, x_2307);
        let x_2314 : vec3<f32> = txVec23;
        let x_2316 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2314.xy, x_2314.z);
        u_xlat68 = x_2316;
        let x_2318 : f32 = u_xlat20.z;
        let x_2319 : f32 = u_xlat68;
        let x_2321 : f32 = u_xlat67;
        u_xlat67 = ((x_2318 * x_2319) + x_2321);
        let x_2324 : vec2<f32> = u_xlat57;
        let x_2326 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_2324.x, x_2324.y, x_2326);
        let x_2333 : vec3<f32> = txVec24;
        let x_2335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2333.xy, x_2333.z);
        u_xlat68 = x_2335;
        let x_2337 : f32 = u_xlat20.w;
        let x_2338 : f32 = u_xlat68;
        let x_2340 : f32 = u_xlat67;
        u_xlat67 = ((x_2337 * x_2338) + x_2340);
        let x_2343 : vec4<f32> = u_xlat12;
        let x_2344 : vec2<f32> = vec2<f32>(x_2343.x, x_2343.y);
        let x_2346 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_2344.x, x_2344.y, x_2346);
        let x_2353 : vec3<f32> = txVec25;
        let x_2355 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2353.xy, x_2353.z);
        u_xlat68 = x_2355;
        let x_2357 : f32 = u_xlat8.x;
        let x_2358 : f32 = u_xlat68;
        let x_2360 : f32 = u_xlat67;
        u_xlat67 = ((x_2357 * x_2358) + x_2360);
        let x_2363 : vec4<f32> = u_xlat12;
        let x_2364 : vec2<f32> = vec2<f32>(x_2363.z, x_2363.w);
        let x_2366 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_2364.x, x_2364.y, x_2366);
        let x_2373 : vec3<f32> = txVec26;
        let x_2375 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2373.xy, x_2373.z);
        u_xlat68 = x_2375;
        let x_2377 : f32 = u_xlat8.y;
        let x_2378 : f32 = u_xlat68;
        let x_2380 : f32 = u_xlat67;
        u_xlat67 = ((x_2377 * x_2378) + x_2380);
        let x_2383 : vec2<f32> = u_xlat52;
        let x_2385 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_2383.x, x_2383.y, x_2385);
        let x_2392 : vec3<f32> = txVec27;
        let x_2394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2392.xy, x_2392.z);
        u_xlat68 = x_2394;
        let x_2396 : f32 = u_xlat8.z;
        let x_2397 : f32 = u_xlat68;
        let x_2399 : f32 = u_xlat67;
        u_xlat67 = ((x_2396 * x_2397) + x_2399);
        let x_2402 : vec4<f32> = u_xlat7;
        let x_2403 : vec2<f32> = vec2<f32>(x_2402.x, x_2402.y);
        let x_2405 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_2403.x, x_2403.y, x_2405);
        let x_2412 : vec3<f32> = txVec28;
        let x_2414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2412.xy, x_2412.z);
        u_xlat68 = x_2414;
        let x_2416 : f32 = u_xlat8.w;
        let x_2417 : f32 = u_xlat68;
        let x_2419 : f32 = u_xlat67;
        u_xlat4.x = ((x_2416 * x_2417) + x_2419);
      }
    }
  } else {
    let x_2424 : vec4<f32> = u_xlat2;
    let x_2425 : vec2<f32> = vec2<f32>(x_2424.x, x_2424.y);
    let x_2427 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_2425.x, x_2425.y, x_2427);
    let x_2434 : vec3<f32> = txVec29;
    let x_2436 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2434.xy, x_2434.z);
    u_xlat4.x = x_2436;
  }
  let x_2439 : f32 = x_854.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_2439) + 1.0f);
  let x_2444 : f32 = u_xlat4.x;
  let x_2446 : f32 = x_854.x_MainLightShadowParams.x;
  let x_2449 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2444 * x_2446) + x_2449);
  let x_2454 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_2454);
  let x_2458 : f32 = u_xlat2.z;
  u_xlatb44 = (x_2458 >= 1.0f);
  let x_2460 : bool = u_xlatb44;
  let x_2461 : bool = u_xlatb23;
  u_xlatb23 = (x_2460 | x_2461);
  let x_2463 : bool = u_xlatb23;
  if (x_2463) {
    x_2464 = 1.0f;
  } else {
    let x_2469 : f32 = u_xlat2.x;
    x_2464 = x_2469;
  }
  let x_2470 : f32 = x_2464;
  u_xlat2.x = x_2470;
  let x_2472 : vec3<f32> = vs_TEXCOORD7;
  let x_2475 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  let x_2477 : vec3<f32> = (x_2472 + -(x_2475));
  let x_2478 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2477.x, x_2477.y, x_2477.z, x_2478.w);
  let x_2481 : vec4<f32> = u_xlat7;
  let x_2483 : vec4<f32> = u_xlat7;
  u_xlat23 = dot(vec3<f32>(x_2481.x, x_2481.y, x_2481.z), vec3<f32>(x_2483.x, x_2483.y, x_2483.z));
  let x_2486 : f32 = u_xlat23;
  let x_2488 : f32 = x_854.x_MainLightShadowParams.z;
  let x_2491 : f32 = x_854.x_MainLightShadowParams.w;
  u_xlat23 = ((x_2486 * x_2488) + x_2491);
  let x_2493 : f32 = u_xlat23;
  u_xlat23 = clamp(x_2493, 0.0f, 1.0f);
  let x_2497 : f32 = u_xlat2.x;
  u_xlat44 = (-(x_2497) + 1.0f);
  let x_2500 : f32 = u_xlat23;
  let x_2501 : f32 = u_xlat44;
  let x_2504 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2500 * x_2501) + x_2504);
  let x_2507 : f32 = u_xlat46;
  let x_2510 : vec4<f32> = x_128.x_MainLightColor;
  let x_2512 : vec3<f32> = (vec3<f32>(x_2507, x_2507, x_2507) * vec3<f32>(x_2510.x, x_2510.y, x_2510.z));
  let x_2513 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2512.x, x_2512.y, x_2512.z, x_2513.w);
  let x_2516 : f32 = vs_TEXCOORD3.w;
  u_xlat8.x = x_2516;
  let x_2519 : f32 = vs_TEXCOORD4.w;
  u_xlat8.y = x_2519;
  let x_2522 : f32 = vs_TEXCOORD5.w;
  u_xlat8.z = x_2522;
  let x_2524 : vec4<f32> = u_xlat8;
  let x_2527 : vec4<f32> = u_xlat1;
  u_xlat23 = dot(-(vec3<f32>(x_2524.x, x_2524.y, x_2524.z)), vec3<f32>(x_2527.x, x_2527.y, x_2527.z));
  let x_2530 : f32 = u_xlat23;
  let x_2531 : f32 = u_xlat23;
  u_xlat23 = (x_2530 + x_2531);
  let x_2533 : vec4<f32> = u_xlat1;
  let x_2535 : f32 = u_xlat23;
  let x_2539 : vec4<f32> = u_xlat8;
  let x_2542 : vec3<f32> = ((vec3<f32>(x_2533.x, x_2533.y, x_2533.z) * -(vec3<f32>(x_2535, x_2535, x_2535))) + -(vec3<f32>(x_2539.x, x_2539.y, x_2539.z)));
  let x_2543 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2542.x, x_2542.y, x_2542.z, x_2543.w);
  let x_2545 : vec4<f32> = u_xlat1;
  let x_2547 : vec4<f32> = u_xlat8;
  u_xlat23 = dot(vec3<f32>(x_2545.x, x_2545.y, x_2545.z), vec3<f32>(x_2547.x, x_2547.y, x_2547.z));
  let x_2550 : f32 = u_xlat23;
  u_xlat23 = clamp(x_2550, 0.0f, 1.0f);
  let x_2552 : f32 = u_xlat23;
  u_xlat23 = (-(x_2552) + 1.0f);
  let x_2555 : f32 = u_xlat23;
  let x_2556 : f32 = u_xlat23;
  u_xlat23 = (x_2555 * x_2556);
  let x_2558 : f32 = u_xlat23;
  let x_2559 : f32 = u_xlat23;
  u_xlat23 = (x_2558 * x_2559);
  let x_2562 : f32 = u_xlat0.x;
  u_xlat44 = ((-(x_2562) * 0.699999988f) + 1.700000048f);
  let x_2569 : f32 = u_xlat0.x;
  let x_2570 : f32 = u_xlat44;
  u_xlat0.x = (x_2569 * x_2570);
  let x_2574 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2574 * 6.0f);
  let x_2586 : vec4<f32> = u_xlat9;
  let x_2589 : f32 = u_xlat0.x;
  let x_2590 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2586.x, x_2586.y, x_2586.z), x_2589);
  u_xlat9 = x_2590;
  let x_2592 : f32 = u_xlat9.w;
  u_xlat0.x = (x_2592 + -1.0f);
  let x_2600 : f32 = x_2598.unity_SpecCube0_HDR.w;
  let x_2602 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2600 * x_2602) + 1.0f);
  let x_2607 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2607, 0.0f);
  let x_2611 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2611);
  let x_2615 : f32 = u_xlat0.x;
  let x_2617 : f32 = x_2598.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2615 * x_2617);
  let x_2621 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2621);
  let x_2625 : f32 = u_xlat0.x;
  let x_2627 : f32 = x_2598.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2625 * x_2627);
  let x_2630 : vec4<f32> = u_xlat9;
  let x_2632 : vec3<f32> = u_xlat0;
  let x_2634 : vec3<f32> = (vec3<f32>(x_2630.x, x_2630.y, x_2630.z) * vec3<f32>(x_2632.x, x_2632.x, x_2632.x));
  let x_2635 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2634.x, x_2634.y, x_2634.z, x_2635.w);
  let x_2637 : f32 = u_xlat42;
  let x_2639 : f32 = u_xlat42;
  let x_2643 : vec2<f32> = ((vec2<f32>(x_2637, x_2637) * vec2<f32>(x_2639, x_2639)) + vec2<f32>(-1.0f, 1.0f));
  let x_2644 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_2643.x, x_2644.y, x_2643.y);
  let x_2647 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2647);
  let x_2649 : vec4<f32> = u_xlat5;
  let x_2652 : f32 = u_xlat66;
  let x_2654 : vec3<f32> = (-(vec3<f32>(x_2649.x, x_2649.y, x_2649.z)) + vec3<f32>(x_2652, x_2652, x_2652));
  let x_2655 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2654.x, x_2654.y, x_2654.z, x_2655.w);
  let x_2657 : f32 = u_xlat23;
  let x_2659 : vec4<f32> = u_xlat10;
  let x_2662 : vec4<f32> = u_xlat5;
  let x_2664 : vec3<f32> = ((vec3<f32>(x_2657, x_2657, x_2657) * vec3<f32>(x_2659.x, x_2659.y, x_2659.z)) + vec3<f32>(x_2662.x, x_2662.y, x_2662.z));
  let x_2665 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2664.x, x_2664.y, x_2664.z, x_2665.w);
  let x_2667 : f32 = u_xlat42;
  let x_2669 : vec4<f32> = u_xlat10;
  let x_2671 : vec3<f32> = (vec3<f32>(x_2667, x_2667, x_2667) * vec3<f32>(x_2669.x, x_2669.y, x_2669.z));
  let x_2672 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2671.x, x_2671.y, x_2671.z, x_2672.w);
  let x_2674 : vec4<f32> = u_xlat9;
  let x_2676 : vec4<f32> = u_xlat10;
  let x_2678 : vec3<f32> = (vec3<f32>(x_2674.x, x_2674.y, x_2674.z) * vec3<f32>(x_2676.x, x_2676.y, x_2676.z));
  let x_2679 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2678.x, x_2678.y, x_2678.z, x_2679.w);
  let x_2681 : vec4<f32> = u_xlat3;
  let x_2683 : vec4<f32> = u_xlat6;
  let x_2686 : vec4<f32> = u_xlat9;
  let x_2688 : vec3<f32> = ((vec3<f32>(x_2681.x, x_2681.y, x_2681.z) * vec3<f32>(x_2683.x, x_2683.y, x_2683.z)) + vec3<f32>(x_2686.x, x_2686.y, x_2686.z));
  let x_2689 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2688.x, x_2688.y, x_2688.z, x_2689.w);
  let x_2692 : f32 = u_xlat2.x;
  let x_2694 : f32 = x_2598.unity_LightData.z;
  u_xlat42 = (x_2692 * x_2694);
  let x_2696 : vec4<f32> = u_xlat1;
  let x_2699 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_2696.x, x_2696.y, x_2696.z), vec3<f32>(x_2699.x, x_2699.y, x_2699.z));
  let x_2704 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2704, 0.0f, 1.0f);
  let x_2707 : f32 = u_xlat42;
  let x_2709 : f32 = u_xlat2.x;
  u_xlat42 = (x_2707 * x_2709);
  let x_2711 : f32 = u_xlat42;
  let x_2713 : vec4<f32> = u_xlat7;
  let x_2715 : vec3<f32> = (vec3<f32>(x_2711, x_2711, x_2711) * vec3<f32>(x_2713.x, x_2713.y, x_2713.z));
  let x_2716 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2715.x, x_2715.y, x_2715.z, x_2716.w);
  let x_2718 : vec4<f32> = u_xlat8;
  let x_2721 : vec4<f32> = x_128.x_MainLightPosition;
  let x_2723 : vec3<f32> = (vec3<f32>(x_2718.x, x_2718.y, x_2718.z) + vec3<f32>(x_2721.x, x_2721.y, x_2721.z));
  let x_2724 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2723.x, x_2723.y, x_2723.z, x_2724.w);
  let x_2726 : vec4<f32> = u_xlat7;
  let x_2728 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(vec3<f32>(x_2726.x, x_2726.y, x_2726.z), vec3<f32>(x_2728.x, x_2728.y, x_2728.z));
  let x_2731 : f32 = u_xlat42;
  u_xlat42 = max(x_2731, 1.17549435e-37f);
  let x_2734 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2734);
  let x_2736 : f32 = u_xlat42;
  let x_2738 : vec4<f32> = u_xlat7;
  let x_2740 : vec3<f32> = (vec3<f32>(x_2736, x_2736, x_2736) * vec3<f32>(x_2738.x, x_2738.y, x_2738.z));
  let x_2741 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2740.x, x_2740.y, x_2740.z, x_2741.w);
  let x_2743 : vec4<f32> = u_xlat1;
  let x_2745 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(vec3<f32>(x_2743.x, x_2743.y, x_2743.z), vec3<f32>(x_2745.x, x_2745.y, x_2745.z));
  let x_2748 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2748, 0.0f, 1.0f);
  let x_2751 : vec4<f32> = x_128.x_MainLightPosition;
  let x_2753 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(vec3<f32>(x_2751.x, x_2751.y, x_2751.z), vec3<f32>(x_2753.x, x_2753.y, x_2753.z));
  let x_2756 : f32 = u_xlat66;
  u_xlat66 = clamp(x_2756, 0.0f, 1.0f);
  let x_2758 : f32 = u_xlat42;
  let x_2759 : f32 = u_xlat42;
  u_xlat42 = (x_2758 * x_2759);
  let x_2761 : f32 = u_xlat42;
  let x_2763 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2761 * x_2763) + 1.000010014f);
  let x_2767 : f32 = u_xlat66;
  let x_2768 : f32 = u_xlat66;
  u_xlat66 = (x_2767 * x_2768);
  let x_2770 : f32 = u_xlat42;
  let x_2771 : f32 = u_xlat42;
  u_xlat42 = (x_2770 * x_2771);
  let x_2773 : f32 = u_xlat66;
  u_xlat66 = max(x_2773, 0.100000001f);
  let x_2776 : f32 = u_xlat42;
  let x_2777 : f32 = u_xlat66;
  u_xlat42 = (x_2776 * x_2777);
  let x_2779 : f32 = u_xlat25;
  let x_2780 : f32 = u_xlat42;
  u_xlat42 = (x_2779 * x_2780);
  let x_2782 : f32 = u_xlat65;
  let x_2783 : f32 = u_xlat42;
  u_xlat42 = (x_2782 / x_2783);
  let x_2785 : vec4<f32> = u_xlat5;
  let x_2787 : f32 = u_xlat42;
  let x_2790 : vec4<f32> = u_xlat6;
  let x_2792 : vec3<f32> = ((vec3<f32>(x_2785.x, x_2785.y, x_2785.z) * vec3<f32>(x_2787, x_2787, x_2787)) + vec3<f32>(x_2790.x, x_2790.y, x_2790.z));
  let x_2793 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2792.x, x_2792.y, x_2792.z, x_2793.w);
  let x_2795 : vec4<f32> = u_xlat2;
  let x_2797 : vec4<f32> = u_xlat7;
  let x_2799 : vec3<f32> = (vec3<f32>(x_2795.x, x_2795.y, x_2795.z) * vec3<f32>(x_2797.x, x_2797.y, x_2797.z));
  let x_2800 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2799.x, x_2799.y, x_2799.z, x_2800.w);
  let x_2803 : f32 = x_128.x_AdditionalLightsCount.x;
  let x_2805 : f32 = x_2598.unity_LightData.y;
  u_xlat42 = min(x_2803, x_2805);
  let x_2808 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2808));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2820 : u32 = u_xlatu_loop_1;
    let x_2821 : u32 = u_xlatu42;
    if ((x_2820 < x_2821)) {
    } else {
      break;
    }
    let x_2824 : u32 = u_xlatu_loop_1;
    u_xlatu4 = (x_2824 >> 2u);
    let x_2827 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_2827 & 3u));
    let x_2830 : u32 = u_xlatu4;
    let x_2833 : vec4<f32> = x_2598.unity_LightIndices[bitcast<i32>(x_2830)];
    let x_2843 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2848 : vec4<u32> = indexable[x_2843];
    u_xlat4.x = dot(x_2833, bitcast<vec4<f32>>(x_2848));
    let x_2854 : f32 = u_xlat4.x;
    u_xlati4 = i32(x_2854);
    let x_2856 : vec3<f32> = vs_TEXCOORD7;
    let x_2868 : i32 = u_xlati4;
    let x_2870 : vec4<f32> = x_2867.x_AdditionalLightsPosition[x_2868];
    let x_2873 : i32 = u_xlati4;
    let x_2875 : vec4<f32> = x_2867.x_AdditionalLightsPosition[x_2873];
    let x_2877 : vec3<f32> = ((-(x_2856) * vec3<f32>(x_2870.w, x_2870.w, x_2870.w)) + vec3<f32>(x_2875.x, x_2875.y, x_2875.z));
    let x_2878 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2877.x, x_2877.y, x_2877.z, x_2878.w);
    let x_2880 : vec4<f32> = u_xlat9;
    let x_2882 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_2880.x, x_2880.y, x_2880.z), vec3<f32>(x_2882.x, x_2882.y, x_2882.z));
    let x_2885 : f32 = u_xlat67;
    u_xlat67 = max(x_2885, 6.10351562e-05f);
    let x_2887 : f32 = u_xlat67;
    u_xlat68 = inverseSqrt(x_2887);
    let x_2889 : f32 = u_xlat68;
    let x_2891 : vec4<f32> = u_xlat9;
    let x_2893 : vec3<f32> = (vec3<f32>(x_2889, x_2889, x_2889) * vec3<f32>(x_2891.x, x_2891.y, x_2891.z));
    let x_2894 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2893.x, x_2893.y, x_2893.z, x_2894.w);
    let x_2896 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_2896);
    let x_2898 : f32 = u_xlat67;
    let x_2899 : i32 = u_xlati4;
    let x_2901 : f32 = x_2867.x_AdditionalLightsAttenuation[x_2899].x;
    u_xlat67 = (x_2898 * x_2901);
    let x_2903 : f32 = u_xlat67;
    let x_2905 : f32 = u_xlat67;
    u_xlat67 = ((-(x_2903) * x_2905) + 1.0f);
    let x_2908 : f32 = u_xlat67;
    u_xlat67 = max(x_2908, 0.0f);
    let x_2910 : f32 = u_xlat67;
    let x_2911 : f32 = u_xlat67;
    u_xlat67 = (x_2910 * x_2911);
    let x_2913 : f32 = u_xlat67;
    let x_2914 : f32 = u_xlat69;
    u_xlat67 = (x_2913 * x_2914);
    let x_2916 : i32 = u_xlati4;
    let x_2918 : vec4<f32> = x_2867.x_AdditionalLightsSpotDir[x_2916];
    let x_2920 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_2918.x, x_2918.y, x_2918.z), vec3<f32>(x_2920.x, x_2920.y, x_2920.z));
    let x_2923 : f32 = u_xlat69;
    let x_2924 : i32 = u_xlati4;
    let x_2926 : f32 = x_2867.x_AdditionalLightsAttenuation[x_2924].z;
    let x_2928 : i32 = u_xlati4;
    let x_2930 : f32 = x_2867.x_AdditionalLightsAttenuation[x_2928].w;
    u_xlat69 = ((x_2923 * x_2926) + x_2930);
    let x_2932 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2932, 0.0f, 1.0f);
    let x_2934 : f32 = u_xlat69;
    let x_2935 : f32 = u_xlat69;
    u_xlat69 = (x_2934 * x_2935);
    let x_2937 : f32 = u_xlat67;
    let x_2938 : f32 = u_xlat69;
    u_xlat67 = (x_2937 * x_2938);
    let x_2940 : f32 = u_xlat46;
    let x_2942 : i32 = u_xlati4;
    let x_2944 : vec4<f32> = x_2867.x_AdditionalLightsColor[x_2942];
    let x_2946 : vec3<f32> = (vec3<f32>(x_2940, x_2940, x_2940) * vec3<f32>(x_2944.x, x_2944.y, x_2944.z));
    let x_2947 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2946.x, x_2946.y, x_2946.z, x_2947.w);
    let x_2949 : vec4<f32> = u_xlat1;
    let x_2951 : vec4<f32> = u_xlat10;
    u_xlat4.x = dot(vec3<f32>(x_2949.x, x_2949.y, x_2949.z), vec3<f32>(x_2951.x, x_2951.y, x_2951.z));
    let x_2956 : f32 = u_xlat4.x;
    u_xlat4.x = clamp(x_2956, 0.0f, 1.0f);
    let x_2960 : f32 = u_xlat4.x;
    let x_2961 : f32 = u_xlat67;
    u_xlat4.x = (x_2960 * x_2961);
    let x_2964 : vec4<f32> = u_xlat4;
    let x_2966 : vec4<f32> = u_xlat11;
    let x_2968 : vec3<f32> = (vec3<f32>(x_2964.x, x_2964.x, x_2964.x) * vec3<f32>(x_2966.x, x_2966.y, x_2966.z));
    let x_2969 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2968.x, x_2968.y, x_2968.z, x_2969.w);
    let x_2971 : vec4<f32> = u_xlat9;
    let x_2973 : f32 = u_xlat68;
    let x_2976 : vec4<f32> = u_xlat8;
    let x_2978 : vec3<f32> = ((vec3<f32>(x_2971.x, x_2971.y, x_2971.z) * vec3<f32>(x_2973, x_2973, x_2973)) + vec3<f32>(x_2976.x, x_2976.y, x_2976.z));
    let x_2979 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2978.x, x_2978.y, x_2978.z, x_2979.w);
    let x_2981 : vec4<f32> = u_xlat9;
    let x_2983 : vec4<f32> = u_xlat9;
    u_xlat4.x = dot(vec3<f32>(x_2981.x, x_2981.y, x_2981.z), vec3<f32>(x_2983.x, x_2983.y, x_2983.z));
    let x_2988 : f32 = u_xlat4.x;
    u_xlat4.x = max(x_2988, 1.17549435e-37f);
    let x_2992 : f32 = u_xlat4.x;
    u_xlat4.x = inverseSqrt(x_2992);
    let x_2995 : vec4<f32> = u_xlat4;
    let x_2997 : vec4<f32> = u_xlat9;
    let x_2999 : vec3<f32> = (vec3<f32>(x_2995.x, x_2995.x, x_2995.x) * vec3<f32>(x_2997.x, x_2997.y, x_2997.z));
    let x_3000 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2999.x, x_2999.y, x_2999.z, x_3000.w);
    let x_3002 : vec4<f32> = u_xlat1;
    let x_3004 : vec4<f32> = u_xlat9;
    u_xlat4.x = dot(vec3<f32>(x_3002.x, x_3002.y, x_3002.z), vec3<f32>(x_3004.x, x_3004.y, x_3004.z));
    let x_3009 : f32 = u_xlat4.x;
    u_xlat4.x = clamp(x_3009, 0.0f, 1.0f);
    let x_3012 : vec4<f32> = u_xlat10;
    let x_3014 : vec4<f32> = u_xlat9;
    u_xlat4.w = dot(vec3<f32>(x_3012.x, x_3012.y, x_3012.z), vec3<f32>(x_3014.x, x_3014.y, x_3014.z));
    let x_3019 : f32 = u_xlat4.w;
    u_xlat4.w = clamp(x_3019, 0.0f, 1.0f);
    let x_3022 : vec4<f32> = u_xlat4;
    let x_3024 : vec4<f32> = u_xlat4;
    let x_3026 : vec2<f32> = (vec2<f32>(x_3022.x, x_3022.w) * vec2<f32>(x_3024.x, x_3024.w));
    let x_3027 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3026.x, x_3027.y, x_3027.z, x_3026.y);
    let x_3030 : f32 = u_xlat4.x;
    let x_3032 : f32 = u_xlat0.x;
    u_xlat4.x = ((x_3030 * x_3032) + 1.000010014f);
    let x_3037 : f32 = u_xlat4.x;
    let x_3039 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3037 * x_3039);
    let x_3043 : f32 = u_xlat4.w;
    u_xlat67 = max(x_3043, 0.100000001f);
    let x_3045 : f32 = u_xlat67;
    let x_3047 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3045 * x_3047);
    let x_3050 : f32 = u_xlat25;
    let x_3052 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3050 * x_3052);
    let x_3055 : f32 = u_xlat65;
    let x_3057 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3055 / x_3057);
    let x_3060 : vec4<f32> = u_xlat5;
    let x_3062 : vec4<f32> = u_xlat4;
    let x_3065 : vec4<f32> = u_xlat6;
    let x_3067 : vec3<f32> = ((vec3<f32>(x_3060.x, x_3060.y, x_3060.z) * vec3<f32>(x_3062.x, x_3062.x, x_3062.x)) + vec3<f32>(x_3065.x, x_3065.y, x_3065.z));
    let x_3068 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3067.x, x_3067.y, x_3067.z, x_3068.w);
    let x_3070 : vec4<f32> = u_xlat9;
    let x_3072 : vec4<f32> = u_xlat11;
    let x_3075 : vec4<f32> = u_xlat7;
    let x_3077 : vec3<f32> = ((vec3<f32>(x_3070.x, x_3070.y, x_3070.z) * vec3<f32>(x_3072.x, x_3072.y, x_3072.z)) + vec3<f32>(x_3075.x, x_3075.y, x_3075.z));
    let x_3078 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3077.x, x_3077.y, x_3077.z, x_3078.w);

    continuing {
      let x_3080 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3080 + bitcast<u32>(1i));
    }
  }
  let x_3082 : vec4<f32> = u_xlat3;
  let x_3084 : f32 = u_xlat21;
  let x_3087 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3082.x, x_3082.y, x_3082.z) * vec3<f32>(x_3084, x_3084, x_3084)) + vec3<f32>(x_3087.x, x_3087.y, x_3087.z));
  let x_3090 : vec4<f32> = u_xlat7;
  let x_3092 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3090.x, x_3090.y, x_3090.z) + x_3092);
  let x_3094 : f32 = u_xlat63;
  let x_3096 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3094, x_3094, x_3094) * x_3096);
  let x_3098 : f32 = u_xlat64;
  let x_3099 : f32 = u_xlat64;
  u_xlat63 = (x_3098 * -(x_3099));
  let x_3102 : f32 = u_xlat63;
  u_xlat63 = exp2(x_3102);
  let x_3106 : vec3<f32> = u_xlat0;
  let x_3107 : f32 = u_xlat63;
  let x_3109 : vec3<f32> = (x_3106 * vec3<f32>(x_3107, x_3107, x_3107));
  let x_3110 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3109.x, x_3109.y, x_3109.z, x_3110.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(6) vs_TEXCOORD7_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  main_1();
  return main_out(SV_Target0);
}

