struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3125 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3606 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3733 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1681 : f32;
  var x_1694 : f32;
  var x_1706 : f32;
  var u_xlat46 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat68 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatb8 : vec2<bool>;
  var x_3209 : f32;
  var x_3221 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu66 : u32;
  var u_xlati4 : i32;
  var u_xlat66 : f32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var u_xlati69 : i32;
  var u_xlati50 : i32;
  var u_xlatb69 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlatb50 : vec2<bool>;
  var x_4026 : f32;
  var x_4039 : f32;
  var x_4091 : f32;
  var x_4102 : vec3<f32>;
  var x_4269 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  let x_1656 : vec3<f32> = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1657 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1656.x, x_1656.y, x_1656.z, x_1657.w);
  let x_1661 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1661 == 0.0f);
  let x_1664 : vec3<f32> = vs_INTERP0;
  let x_1668 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat24 = (-(x_1664) + x_1668);
  let x_1670 : vec3<f32> = u_xlat24;
  let x_1671 : vec3<f32> = u_xlat24;
  u_xlat64 = dot(x_1670, x_1671);
  let x_1673 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1673);
  let x_1675 : f32 = u_xlat64;
  let x_1677 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1675, x_1675, x_1675) * x_1677);
  let x_1680 : bool = u_xlatb22.x;
  if (x_1680) {
    let x_1685 : f32 = u_xlat24.x;
    x_1681 = x_1685;
  } else {
    let x_1689 : f32 = x_66.unity_MatrixV[0i].z;
    x_1681 = x_1689;
  }
  let x_1690 : f32 = x_1681;
  u_xlat6.x = x_1690;
  let x_1693 : bool = u_xlatb22.x;
  if (x_1693) {
    let x_1698 : f32 = u_xlat24.y;
    x_1694 = x_1698;
  } else {
    let x_1701 : f32 = x_66.unity_MatrixV[1i].z;
    x_1694 = x_1701;
  }
  let x_1702 : f32 = x_1694;
  u_xlat6.y = x_1702;
  let x_1705 : bool = u_xlatb22.x;
  if (x_1705) {
    let x_1710 : f32 = u_xlat24.z;
    x_1706 = x_1710;
  } else {
    let x_1713 : f32 = x_66.unity_MatrixV[2i].z;
    x_1706 = x_1713;
  }
  let x_1714 : f32 = x_1706;
  u_xlat6.z = x_1714;
  u_xlat5.w = 1.0f;
  let x_1719 : vec4<f32> = x_1592.unity_SHAr;
  let x_1720 : vec4<f32> = u_xlat5;
  u_xlat7.x = dot(x_1719, x_1720);
  let x_1725 : vec4<f32> = x_1592.unity_SHAg;
  let x_1726 : vec4<f32> = u_xlat5;
  u_xlat7.y = dot(x_1725, x_1726);
  let x_1731 : vec4<f32> = x_1592.unity_SHAb;
  let x_1732 : vec4<f32> = u_xlat5;
  u_xlat7.z = dot(x_1731, x_1732);
  let x_1735 : vec4<f32> = u_xlat5;
  let x_1737 : vec4<f32> = u_xlat5;
  u_xlat8 = (vec4<f32>(x_1735.y, x_1735.z, x_1735.z, x_1735.x) * vec4<f32>(x_1737.x, x_1737.y, x_1737.z, x_1737.z));
  let x_1742 : vec4<f32> = x_1592.unity_SHBr;
  let x_1743 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_1742, x_1743);
  let x_1748 : vec4<f32> = x_1592.unity_SHBg;
  let x_1749 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_1748, x_1749);
  let x_1754 : vec4<f32> = x_1592.unity_SHBb;
  let x_1755 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_1754, x_1755);
  let x_1759 : f32 = u_xlat5.y;
  let x_1761 : f32 = u_xlat5.y;
  u_xlat22.x = (x_1759 * x_1761);
  let x_1765 : f32 = u_xlat5.x;
  let x_1767 : f32 = u_xlat5.x;
  let x_1770 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1765 * x_1767) + -(x_1770));
  let x_1776 : vec4<f32> = x_1592.unity_SHC;
  let x_1778 : vec3<f32> = u_xlat22;
  let x_1781 : vec4<f32> = u_xlat9;
  u_xlat24 = ((vec3<f32>(x_1776.x, x_1776.y, x_1776.z) * vec3<f32>(x_1778.x, x_1778.x, x_1778.x)) + vec3<f32>(x_1781.x, x_1781.y, x_1781.z));
  let x_1784 : vec3<f32> = u_xlat24;
  let x_1785 : vec4<f32> = u_xlat7;
  u_xlat24 = (x_1784 + vec3<f32>(x_1785.x, x_1785.y, x_1785.z));
  let x_1788 : vec3<f32> = u_xlat24;
  u_xlat24 = max(x_1788, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1792 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1793 : vec2<f32> = vec2<f32>(x_1792.x, x_1792.y);
  let x_1797 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1793.x, x_1793.y));
  let x_1798 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_1797.x, x_1798.y, x_1797.y);
  let x_1800 : vec3<f32> = u_xlat22;
  let x_1802 : vec4<f32> = hlslcc_FragCoord;
  let x_1804 : vec2<f32> = (vec2<f32>(x_1800.x, x_1800.z) * vec2<f32>(x_1802.x, x_1802.y));
  let x_1805 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1804.x, x_1804.y, x_1805.z, x_1805.w);
  let x_1808 : f32 = u_xlat7.y;
  let x_1811 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1814 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat22.x = ((x_1808 * x_1811) + x_1814);
  let x_1818 : f32 = u_xlat22.x;
  u_xlat7.z = (-(x_1818) + 1.0f);
  let x_1823 : f32 = u_xlat3.x;
  u_xlat3.x = x_1823;
  let x_1826 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1826, 0.0f, 1.0f);
  let x_1830 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1830, 1.0f);
  let x_1833 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1833 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1838 : f32 = u_xlat3.x;
  u_xlat22.x = (-(x_1838) + 1.0f);
  let x_1843 : f32 = u_xlat22.x;
  let x_1845 : f32 = u_xlat22.x;
  u_xlat64 = (x_1843 * x_1845);
  let x_1847 : f32 = u_xlat64;
  u_xlat64 = max(x_1847, 0.0078125f);
  let x_1850 : f32 = u_xlat64;
  let x_1851 : f32 = u_xlat64;
  u_xlat65 = (x_1850 * x_1851);
  let x_1854 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1854 + 0.040000021f);
  let x_1859 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1859, 1.0f);
  let x_1862 : f32 = u_xlat64;
  u_xlat25.x = ((x_1862 * 4.0f) + 2.0f);
  let x_1873 : vec4<f32> = u_xlat7;
  let x_1876 : f32 = x_66.x_GlobalMipBias.x;
  let x_1877 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1873.x, x_1873.z), x_1876);
  u_xlat46 = x_1877.x;
  let x_1879 : f32 = u_xlat46;
  u_xlat67 = (x_1879 + -1.0f);
  let x_1883 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1884 : f32 = u_xlat67;
  u_xlat67 = ((x_1883 * x_1884) + 1.0f);
  let x_1887 : f32 = u_xlat46;
  let x_1889 : f32 = vs_INTERP4.w;
  u_xlat46 = min(x_1887, x_1889);
  let x_1891 : bool = u_xlatb63;
  if (x_1891) {
    let x_1895 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1895 == 1.0f);
    let x_1897 : bool = u_xlatb63;
    if (x_1897) {
      let x_1901 : vec4<f32> = vs_INTERP9;
      let x_1904 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1901.x, x_1901.y, x_1901.x, x_1901.y) + x_1904);
      let x_1907 : vec4<f32> = u_xlat7;
      let x_1908 : vec2<f32> = vec2<f32>(x_1907.x, x_1907.y);
      let x_1910 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1908.x, x_1908.y, x_1910);
      let x_1917 : vec3<f32> = txVec30;
      let x_1919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1917.xy, x_1917.z);
      u_xlat8.x = x_1919;
      let x_1922 : vec4<f32> = u_xlat7;
      let x_1923 : vec2<f32> = vec2<f32>(x_1922.z, x_1922.w);
      let x_1925 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1923.x, x_1923.y, x_1925);
      let x_1932 : vec3<f32> = txVec31;
      let x_1934 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1932.xy, x_1932.z);
      u_xlat8.y = x_1934;
      let x_1936 : vec4<f32> = vs_INTERP9;
      let x_1939 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1936.x, x_1936.y, x_1936.x, x_1936.y) + x_1939);
      let x_1942 : vec4<f32> = u_xlat7;
      let x_1943 : vec2<f32> = vec2<f32>(x_1942.x, x_1942.y);
      let x_1945 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1943.x, x_1943.y, x_1945);
      let x_1952 : vec3<f32> = txVec32;
      let x_1954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1952.xy, x_1952.z);
      u_xlat8.z = x_1954;
      let x_1957 : vec4<f32> = u_xlat7;
      let x_1958 : vec2<f32> = vec2<f32>(x_1957.z, x_1957.w);
      let x_1960 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1958.x, x_1958.y, x_1960);
      let x_1967 : vec3<f32> = txVec33;
      let x_1969 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1967.xy, x_1967.z);
      u_xlat8.w = x_1969;
      let x_1971 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1971, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1976 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb68 = (x_1976 == 2.0f);
      let x_1978 : bool = u_xlatb68;
      if (x_1978) {
        let x_1981 : vec4<f32> = vs_INTERP9;
        let x_1984 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1987 : vec2<f32> = ((vec2<f32>(x_1981.x, x_1981.y) * vec2<f32>(x_1984.z, x_1984.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1988 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1987.x, x_1987.y, x_1988.z, x_1988.w);
        let x_1990 : vec4<f32> = u_xlat7;
        let x_1992 : vec2<f32> = floor(vec2<f32>(x_1990.x, x_1990.y));
        let x_1993 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1992.x, x_1992.y, x_1993.z, x_1993.w);
        let x_1995 : vec4<f32> = vs_INTERP9;
        let x_1998 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2001 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1995.x, x_1995.y) * vec2<f32>(x_1998.z, x_1998.w)) + -(vec2<f32>(x_2001.x, x_2001.y)));
        let x_2005 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2005.x, x_2005.x, x_2005.y, x_2005.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2008 : vec4<f32> = u_xlat8;
        let x_2010 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2008.x, x_2008.x, x_2008.z, x_2008.z) * vec4<f32>(x_2010.x, x_2010.x, x_2010.z, x_2010.z));
        let x_2013 : vec4<f32> = u_xlat9;
        let x_2015 : vec2<f32> = (vec2<f32>(x_2013.y, x_2013.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2016 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2015.x, x_2016.y, x_2015.y, x_2016.w);
        let x_2018 : vec4<f32> = u_xlat9;
        let x_2021 : vec2<f32> = u_xlat49;
        let x_2023 : vec2<f32> = ((vec2<f32>(x_2018.x, x_2018.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2021));
        let x_2024 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2023.x, x_2023.y, x_2024.z, x_2024.w);
        let x_2027 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2027) + vec2<f32>(1.0f, 1.0f));
        let x_2030 : vec2<f32> = u_xlat49;
        let x_2031 : vec2<f32> = min(x_2030, vec2<f32>(0.0f, 0.0f));
        let x_2032 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2031.x, x_2031.y, x_2032.z, x_2032.w);
        let x_2034 : vec4<f32> = u_xlat10;
        let x_2037 : vec4<f32> = u_xlat10;
        let x_2040 : vec2<f32> = u_xlat51;
        let x_2041 : vec2<f32> = ((-(vec2<f32>(x_2034.x, x_2034.y)) * vec2<f32>(x_2037.x, x_2037.y)) + x_2040);
        let x_2042 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2041.x, x_2041.y, x_2042.z, x_2042.w);
        let x_2044 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2044, vec2<f32>(0.0f, 0.0f));
        let x_2046 : vec2<f32> = u_xlat49;
        let x_2048 : vec2<f32> = u_xlat49;
        let x_2050 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2046) * x_2048) + vec2<f32>(x_2050.y, x_2050.w));
        let x_2053 : vec4<f32> = u_xlat10;
        let x_2055 : vec2<f32> = (vec2<f32>(x_2053.x, x_2053.y) + vec2<f32>(1.0f, 1.0f));
        let x_2056 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2055.x, x_2055.y, x_2056.z, x_2056.w);
        let x_2058 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2058 + vec2<f32>(1.0f, 1.0f));
        let x_2060 : vec4<f32> = u_xlat9;
        let x_2062 : vec2<f32> = (vec2<f32>(x_2060.x, x_2060.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2063 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2062.x, x_2062.y, x_2063.z, x_2063.w);
        let x_2065 : vec2<f32> = u_xlat51;
        let x_2066 : vec2<f32> = (x_2065 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2067 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2066.x, x_2066.y, x_2067.z, x_2067.w);
        let x_2069 : vec4<f32> = u_xlat10;
        let x_2071 : vec2<f32> = (vec2<f32>(x_2069.x, x_2069.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2072 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2071.x, x_2071.y, x_2072.z, x_2072.w);
        let x_2074 : vec2<f32> = u_xlat49;
        let x_2075 : vec2<f32> = (x_2074 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2076 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2075.x, x_2075.y, x_2076.z, x_2076.w);
        let x_2078 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2078.y, x_2078.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2082 : f32 = u_xlat10.x;
        u_xlat11.z = x_2082;
        let x_2085 : f32 = u_xlat49.x;
        u_xlat11.w = x_2085;
        let x_2088 : f32 = u_xlat12.x;
        u_xlat9.z = x_2088;
        let x_2091 : f32 = u_xlat8.x;
        u_xlat9.w = x_2091;
        let x_2093 : vec4<f32> = u_xlat9;
        let x_2095 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2093.z, x_2093.w, x_2093.x, x_2093.z) + vec4<f32>(x_2095.z, x_2095.w, x_2095.x, x_2095.z));
        let x_2099 : f32 = u_xlat11.y;
        u_xlat10.z = x_2099;
        let x_2102 : f32 = u_xlat49.y;
        u_xlat10.w = x_2102;
        let x_2105 : f32 = u_xlat9.y;
        u_xlat12.z = x_2105;
        let x_2108 : f32 = u_xlat8.z;
        u_xlat12.w = x_2108;
        let x_2110 : vec4<f32> = u_xlat10;
        let x_2112 : vec4<f32> = u_xlat12;
        let x_2114 : vec3<f32> = (vec3<f32>(x_2110.z, x_2110.y, x_2110.w) + vec3<f32>(x_2112.z, x_2112.y, x_2112.w));
        let x_2115 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2114.x, x_2114.y, x_2114.z, x_2115.w);
        let x_2117 : vec4<f32> = u_xlat9;
        let x_2119 : vec4<f32> = u_xlat13;
        let x_2121 : vec3<f32> = (vec3<f32>(x_2117.x, x_2117.z, x_2117.w) / vec3<f32>(x_2119.z, x_2119.w, x_2119.y));
        let x_2122 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2121.x, x_2121.y, x_2121.z, x_2122.w);
        let x_2124 : vec4<f32> = u_xlat9;
        let x_2126 : vec3<f32> = (vec3<f32>(x_2124.x, x_2124.y, x_2124.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2127 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2126.x, x_2126.y, x_2126.z, x_2127.w);
        let x_2129 : vec4<f32> = u_xlat12;
        let x_2131 : vec4<f32> = u_xlat8;
        let x_2133 : vec3<f32> = (vec3<f32>(x_2129.z, x_2129.y, x_2129.w) / vec3<f32>(x_2131.x, x_2131.y, x_2131.z));
        let x_2134 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2133.x, x_2133.y, x_2133.z, x_2134.w);
        let x_2136 : vec4<f32> = u_xlat10;
        let x_2138 : vec3<f32> = (vec3<f32>(x_2136.x, x_2136.y, x_2136.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2139 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2138.x, x_2138.y, x_2138.z, x_2139.w);
        let x_2141 : vec4<f32> = u_xlat9;
        let x_2144 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2146 : vec3<f32> = (vec3<f32>(x_2141.y, x_2141.x, x_2141.z) * vec3<f32>(x_2144.x, x_2144.x, x_2144.x));
        let x_2147 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2146.x, x_2146.y, x_2146.z, x_2147.w);
        let x_2149 : vec4<f32> = u_xlat10;
        let x_2152 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2154 : vec3<f32> = (vec3<f32>(x_2149.x, x_2149.y, x_2149.z) * vec3<f32>(x_2152.y, x_2152.y, x_2152.y));
        let x_2155 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2154.x, x_2154.y, x_2154.z, x_2155.w);
        let x_2158 : f32 = u_xlat10.x;
        u_xlat9.w = x_2158;
        let x_2160 : vec4<f32> = u_xlat7;
        let x_2163 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2166 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2160.x, x_2160.y, x_2160.x, x_2160.y) * vec4<f32>(x_2163.x, x_2163.y, x_2163.x, x_2163.y)) + vec4<f32>(x_2166.y, x_2166.w, x_2166.x, x_2166.w));
        let x_2169 : vec4<f32> = u_xlat7;
        let x_2172 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2175 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2169.x, x_2169.y) * vec2<f32>(x_2172.x, x_2172.y)) + vec2<f32>(x_2175.z, x_2175.w));
        let x_2179 : f32 = u_xlat9.y;
        u_xlat10.w = x_2179;
        let x_2181 : vec4<f32> = u_xlat10;
        let x_2182 : vec2<f32> = vec2<f32>(x_2181.y, x_2181.z);
        let x_2183 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2183.x, x_2182.x, x_2183.z, x_2182.y);
        let x_2185 : vec4<f32> = u_xlat7;
        let x_2188 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2191 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2185.x, x_2185.y, x_2185.x, x_2185.y) * vec4<f32>(x_2188.x, x_2188.y, x_2188.x, x_2188.y)) + vec4<f32>(x_2191.x, x_2191.y, x_2191.z, x_2191.y));
        let x_2194 : vec4<f32> = u_xlat7;
        let x_2197 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2200 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2194.x, x_2194.y, x_2194.x, x_2194.y) * vec4<f32>(x_2197.x, x_2197.y, x_2197.x, x_2197.y)) + vec4<f32>(x_2200.w, x_2200.y, x_2200.w, x_2200.z));
        let x_2203 : vec4<f32> = u_xlat7;
        let x_2206 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2209 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2203.x, x_2203.y, x_2203.x, x_2203.y) * vec4<f32>(x_2206.x, x_2206.y, x_2206.x, x_2206.y)) + vec4<f32>(x_2209.x, x_2209.w, x_2209.z, x_2209.w));
        let x_2212 : vec4<f32> = u_xlat8;
        let x_2214 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2212.x, x_2212.x, x_2212.x, x_2212.y) * vec4<f32>(x_2214.z, x_2214.w, x_2214.y, x_2214.z));
        let x_2217 : vec4<f32> = u_xlat8;
        let x_2219 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2217.y, x_2217.y, x_2217.z, x_2217.z) * x_2219);
        let x_2223 : f32 = u_xlat8.z;
        let x_2225 : f32 = u_xlat13.y;
        u_xlat68 = (x_2223 * x_2225);
        let x_2228 : vec4<f32> = u_xlat11;
        let x_2229 : vec2<f32> = vec2<f32>(x_2228.x, x_2228.y);
        let x_2231 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2229.x, x_2229.y, x_2231);
        let x_2239 : vec3<f32> = txVec34;
        let x_2241 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2239.xy, x_2239.z);
        u_xlat69 = x_2241;
        let x_2243 : vec4<f32> = u_xlat11;
        let x_2244 : vec2<f32> = vec2<f32>(x_2243.z, x_2243.w);
        let x_2246 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2244.x, x_2244.y, x_2246);
        let x_2253 : vec3<f32> = txVec35;
        let x_2255 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2253.xy, x_2253.z);
        u_xlat7.x = x_2255;
        let x_2258 : f32 = u_xlat7.x;
        let x_2260 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2258 * x_2260);
        let x_2264 : f32 = u_xlat14.x;
        let x_2265 : f32 = u_xlat69;
        let x_2268 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2264 * x_2265) + x_2268);
        let x_2271 : vec2<f32> = u_xlat49;
        let x_2273 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2271.x, x_2271.y, x_2273);
        let x_2280 : vec3<f32> = txVec36;
        let x_2282 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2280.xy, x_2280.z);
        u_xlat7.x = x_2282;
        let x_2285 : f32 = u_xlat14.z;
        let x_2287 : f32 = u_xlat7.x;
        let x_2289 : f32 = u_xlat69;
        u_xlat69 = ((x_2285 * x_2287) + x_2289);
        let x_2292 : vec4<f32> = u_xlat10;
        let x_2293 : vec2<f32> = vec2<f32>(x_2292.x, x_2292.y);
        let x_2295 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2293.x, x_2293.y, x_2295);
        let x_2302 : vec3<f32> = txVec37;
        let x_2304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2302.xy, x_2302.z);
        u_xlat7.x = x_2304;
        let x_2307 : f32 = u_xlat14.w;
        let x_2309 : f32 = u_xlat7.x;
        let x_2311 : f32 = u_xlat69;
        u_xlat69 = ((x_2307 * x_2309) + x_2311);
        let x_2314 : vec4<f32> = u_xlat12;
        let x_2315 : vec2<f32> = vec2<f32>(x_2314.x, x_2314.y);
        let x_2317 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2315.x, x_2315.y, x_2317);
        let x_2324 : vec3<f32> = txVec38;
        let x_2326 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2324.xy, x_2324.z);
        u_xlat7.x = x_2326;
        let x_2329 : f32 = u_xlat15.x;
        let x_2331 : f32 = u_xlat7.x;
        let x_2333 : f32 = u_xlat69;
        u_xlat69 = ((x_2329 * x_2331) + x_2333);
        let x_2336 : vec4<f32> = u_xlat12;
        let x_2337 : vec2<f32> = vec2<f32>(x_2336.z, x_2336.w);
        let x_2339 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2337.x, x_2337.y, x_2339);
        let x_2346 : vec3<f32> = txVec39;
        let x_2348 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2346.xy, x_2346.z);
        u_xlat7.x = x_2348;
        let x_2351 : f32 = u_xlat15.y;
        let x_2353 : f32 = u_xlat7.x;
        let x_2355 : f32 = u_xlat69;
        u_xlat69 = ((x_2351 * x_2353) + x_2355);
        let x_2358 : vec4<f32> = u_xlat10;
        let x_2359 : vec2<f32> = vec2<f32>(x_2358.z, x_2358.w);
        let x_2361 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2359.x, x_2359.y, x_2361);
        let x_2368 : vec3<f32> = txVec40;
        let x_2370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2368.xy, x_2368.z);
        u_xlat7.x = x_2370;
        let x_2373 : f32 = u_xlat15.z;
        let x_2375 : f32 = u_xlat7.x;
        let x_2377 : f32 = u_xlat69;
        u_xlat69 = ((x_2373 * x_2375) + x_2377);
        let x_2380 : vec4<f32> = u_xlat9;
        let x_2381 : vec2<f32> = vec2<f32>(x_2380.x, x_2380.y);
        let x_2383 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2381.x, x_2381.y, x_2383);
        let x_2390 : vec3<f32> = txVec41;
        let x_2392 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2390.xy, x_2390.z);
        u_xlat7.x = x_2392;
        let x_2395 : f32 = u_xlat15.w;
        let x_2397 : f32 = u_xlat7.x;
        let x_2399 : f32 = u_xlat69;
        u_xlat69 = ((x_2395 * x_2397) + x_2399);
        let x_2402 : vec4<f32> = u_xlat9;
        let x_2403 : vec2<f32> = vec2<f32>(x_2402.z, x_2402.w);
        let x_2405 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2403.x, x_2403.y, x_2405);
        let x_2412 : vec3<f32> = txVec42;
        let x_2414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2412.xy, x_2412.z);
        u_xlat7.x = x_2414;
        let x_2416 : f32 = u_xlat68;
        let x_2418 : f32 = u_xlat7.x;
        let x_2420 : f32 = u_xlat69;
        u_xlat63 = ((x_2416 * x_2418) + x_2420);
      } else {
        let x_2423 : vec4<f32> = vs_INTERP9;
        let x_2426 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2429 : vec2<f32> = ((vec2<f32>(x_2423.x, x_2423.y) * vec2<f32>(x_2426.z, x_2426.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2430 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2429.x, x_2429.y, x_2430.z, x_2430.w);
        let x_2432 : vec4<f32> = u_xlat7;
        let x_2434 : vec2<f32> = floor(vec2<f32>(x_2432.x, x_2432.y));
        let x_2435 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2434.x, x_2434.y, x_2435.z, x_2435.w);
        let x_2437 : vec4<f32> = vs_INTERP9;
        let x_2440 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2443 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2437.x, x_2437.y) * vec2<f32>(x_2440.z, x_2440.w)) + -(vec2<f32>(x_2443.x, x_2443.y)));
        let x_2447 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2447.x, x_2447.x, x_2447.y, x_2447.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2450 : vec4<f32> = u_xlat8;
        let x_2452 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2450.x, x_2450.x, x_2450.z, x_2450.z) * vec4<f32>(x_2452.x, x_2452.x, x_2452.z, x_2452.z));
        let x_2455 : vec4<f32> = u_xlat9;
        let x_2457 : vec2<f32> = (vec2<f32>(x_2455.y, x_2455.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2458 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2458.x, x_2457.x, x_2458.z, x_2457.y);
        let x_2460 : vec4<f32> = u_xlat9;
        let x_2463 : vec2<f32> = u_xlat49;
        let x_2465 : vec2<f32> = ((vec2<f32>(x_2460.x, x_2460.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2463));
        let x_2466 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2465.x, x_2466.y, x_2465.y, x_2466.w);
        let x_2468 : vec2<f32> = u_xlat49;
        let x_2470 : vec2<f32> = (-(x_2468) + vec2<f32>(1.0f, 1.0f));
        let x_2471 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2470.x, x_2470.y, x_2471.z, x_2471.w);
        let x_2473 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2473, vec2<f32>(0.0f, 0.0f));
        let x_2475 : vec2<f32> = u_xlat51;
        let x_2477 : vec2<f32> = u_xlat51;
        let x_2479 : vec4<f32> = u_xlat9;
        let x_2481 : vec2<f32> = ((-(x_2475) * x_2477) + vec2<f32>(x_2479.x, x_2479.y));
        let x_2482 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2481.x, x_2481.y, x_2482.z, x_2482.w);
        let x_2484 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2484, vec2<f32>(0.0f, 0.0f));
        let x_2487 : vec2<f32> = u_xlat51;
        let x_2489 : vec2<f32> = u_xlat51;
        let x_2491 : vec4<f32> = u_xlat8;
        let x_2493 : vec2<f32> = ((-(x_2487) * x_2489) + vec2<f32>(x_2491.y, x_2491.w));
        let x_2494 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2493.x, x_2494.y, x_2493.y);
        let x_2496 : vec4<f32> = u_xlat9;
        let x_2498 : vec2<f32> = (vec2<f32>(x_2496.x, x_2496.y) + vec2<f32>(2.0f, 2.0f));
        let x_2499 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2498.x, x_2498.y, x_2499.z, x_2499.w);
        let x_2501 : vec3<f32> = u_xlat29;
        let x_2503 : vec2<f32> = (vec2<f32>(x_2501.x, x_2501.z) + vec2<f32>(2.0f, 2.0f));
        let x_2504 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2504.x, x_2503.x, x_2504.z, x_2503.y);
        let x_2507 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2507 * 0.081632003f);
        let x_2510 : vec4<f32> = u_xlat8;
        let x_2512 : vec3<f32> = (vec3<f32>(x_2510.z, x_2510.x, x_2510.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2513 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2512.x, x_2512.y, x_2512.z, x_2513.w);
        let x_2515 : vec4<f32> = u_xlat9;
        let x_2517 : vec2<f32> = (vec2<f32>(x_2515.x, x_2515.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2518 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2517.x, x_2517.y, x_2518.z, x_2518.w);
        let x_2521 : f32 = u_xlat12.y;
        u_xlat11.x = x_2521;
        let x_2523 : vec2<f32> = u_xlat49;
        let x_2526 : vec2<f32> = ((vec2<f32>(x_2523.x, x_2523.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2527 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2527.x, x_2526.x, x_2527.z, x_2526.y);
        let x_2529 : vec2<f32> = u_xlat49;
        let x_2532 : vec2<f32> = ((vec2<f32>(x_2529.x, x_2529.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2532.x, x_2533.y, x_2532.y, x_2533.w);
        let x_2536 : f32 = u_xlat8.x;
        u_xlat9.y = x_2536;
        let x_2539 : f32 = u_xlat10.y;
        u_xlat9.w = x_2539;
        let x_2541 : vec4<f32> = u_xlat9;
        let x_2542 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2541 + x_2542);
        let x_2544 : vec2<f32> = u_xlat49;
        let x_2547 : vec2<f32> = ((vec2<f32>(x_2544.y, x_2544.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2548 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2548.x, x_2547.x, x_2548.z, x_2547.y);
        let x_2550 : vec2<f32> = u_xlat49;
        let x_2553 : vec2<f32> = ((vec2<f32>(x_2550.y, x_2550.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2554 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2553.x, x_2554.y, x_2553.y, x_2554.w);
        let x_2557 : f32 = u_xlat8.y;
        u_xlat10.y = x_2557;
        let x_2559 : vec4<f32> = u_xlat10;
        let x_2560 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2559 + x_2560);
        let x_2562 : vec4<f32> = u_xlat9;
        let x_2563 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2562 / x_2563);
        let x_2565 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2565 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2567 : vec4<f32> = u_xlat10;
        let x_2568 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2567 / x_2568);
        let x_2570 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2570 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2572 : vec4<f32> = u_xlat9;
        let x_2575 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2572.w, x_2572.x, x_2572.y, x_2572.z) * vec4<f32>(x_2575.x, x_2575.x, x_2575.x, x_2575.x));
        let x_2578 : vec4<f32> = u_xlat10;
        let x_2581 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2578.x, x_2578.w, x_2578.y, x_2578.z) * vec4<f32>(x_2581.y, x_2581.y, x_2581.y, x_2581.y));
        let x_2584 : vec4<f32> = u_xlat9;
        let x_2585 : vec3<f32> = vec3<f32>(x_2584.y, x_2584.z, x_2584.w);
        let x_2586 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2585.x, x_2586.y, x_2585.y, x_2585.z);
        let x_2589 : f32 = u_xlat10.x;
        u_xlat12.y = x_2589;
        let x_2591 : vec4<f32> = u_xlat7;
        let x_2594 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2597 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2591.x, x_2591.y, x_2591.x, x_2591.y) * vec4<f32>(x_2594.x, x_2594.y, x_2594.x, x_2594.y)) + vec4<f32>(x_2597.x, x_2597.y, x_2597.z, x_2597.y));
        let x_2600 : vec4<f32> = u_xlat7;
        let x_2603 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2606 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2600.x, x_2600.y) * vec2<f32>(x_2603.x, x_2603.y)) + vec2<f32>(x_2606.w, x_2606.y));
        let x_2610 : f32 = u_xlat12.y;
        u_xlat9.y = x_2610;
        let x_2613 : f32 = u_xlat10.z;
        u_xlat12.y = x_2613;
        let x_2615 : vec4<f32> = u_xlat7;
        let x_2618 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2621 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2615.x, x_2615.y, x_2615.x, x_2615.y) * vec4<f32>(x_2618.x, x_2618.y, x_2618.x, x_2618.y)) + vec4<f32>(x_2621.x, x_2621.y, x_2621.z, x_2621.y));
        let x_2624 : vec4<f32> = u_xlat7;
        let x_2627 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2630 : vec4<f32> = u_xlat12;
        let x_2632 : vec2<f32> = ((vec2<f32>(x_2624.x, x_2624.y) * vec2<f32>(x_2627.x, x_2627.y)) + vec2<f32>(x_2630.w, x_2630.y));
        let x_2633 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2632.x, x_2632.y, x_2633.z, x_2633.w);
        let x_2636 : f32 = u_xlat12.y;
        u_xlat9.z = x_2636;
        let x_2638 : vec4<f32> = u_xlat7;
        let x_2641 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2644 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2638.x, x_2638.y, x_2638.x, x_2638.y) * vec4<f32>(x_2641.x, x_2641.y, x_2641.x, x_2641.y)) + vec4<f32>(x_2644.x, x_2644.y, x_2644.x, x_2644.z));
        let x_2648 : f32 = u_xlat10.w;
        u_xlat12.y = x_2648;
        let x_2650 : vec4<f32> = u_xlat7;
        let x_2653 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2656 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2650.x, x_2650.y, x_2650.x, x_2650.y) * vec4<f32>(x_2653.x, x_2653.y, x_2653.x, x_2653.y)) + vec4<f32>(x_2656.x, x_2656.y, x_2656.z, x_2656.y));
        let x_2660 : vec4<f32> = u_xlat7;
        let x_2663 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2666 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_2660.x, x_2660.y) * vec2<f32>(x_2663.x, x_2663.y)) + vec2<f32>(x_2666.w, x_2666.y));
        let x_2670 : f32 = u_xlat12.y;
        u_xlat9.w = x_2670;
        let x_2673 : vec4<f32> = u_xlat7;
        let x_2676 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2679 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2673.x, x_2673.y) * vec2<f32>(x_2676.x, x_2676.y)) + vec2<f32>(x_2679.x, x_2679.w));
        let x_2682 : vec4<f32> = u_xlat12;
        let x_2683 : vec3<f32> = vec3<f32>(x_2682.x, x_2682.z, x_2682.w);
        let x_2684 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2683.x, x_2684.y, x_2683.y, x_2683.z);
        let x_2686 : vec4<f32> = u_xlat7;
        let x_2689 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2692 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2686.x, x_2686.y, x_2686.x, x_2686.y) * vec4<f32>(x_2689.x, x_2689.y, x_2689.x, x_2689.y)) + vec4<f32>(x_2692.x, x_2692.y, x_2692.z, x_2692.y));
        let x_2696 : vec4<f32> = u_xlat7;
        let x_2699 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2702 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2696.x, x_2696.y) * vec2<f32>(x_2699.x, x_2699.y)) + vec2<f32>(x_2702.w, x_2702.y));
        let x_2706 : f32 = u_xlat9.x;
        u_xlat10.x = x_2706;
        let x_2708 : vec4<f32> = u_xlat7;
        let x_2711 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2714 : vec4<f32> = u_xlat10;
        let x_2716 : vec2<f32> = ((vec2<f32>(x_2708.x, x_2708.y) * vec2<f32>(x_2711.x, x_2711.y)) + vec2<f32>(x_2714.x, x_2714.y));
        let x_2717 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2716.x, x_2716.y, x_2717.z, x_2717.w);
        let x_2719 : vec4<f32> = u_xlat8;
        let x_2721 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2719.x, x_2719.x, x_2719.x, x_2719.x) * x_2721);
        let x_2724 : vec4<f32> = u_xlat8;
        let x_2726 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2724.y, x_2724.y, x_2724.y, x_2724.y) * x_2726);
        let x_2729 : vec4<f32> = u_xlat8;
        let x_2731 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2729.z, x_2729.z, x_2729.z, x_2729.z) * x_2731);
        let x_2733 : vec4<f32> = u_xlat8;
        let x_2735 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2733.w, x_2733.w, x_2733.w, x_2733.w) * x_2735);
        let x_2738 : vec4<f32> = u_xlat13;
        let x_2739 : vec2<f32> = vec2<f32>(x_2738.x, x_2738.y);
        let x_2741 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2739.x, x_2739.y, x_2741);
        let x_2748 : vec3<f32> = txVec43;
        let x_2750 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2748.xy, x_2748.z);
        u_xlat68 = x_2750;
        let x_2752 : vec4<f32> = u_xlat13;
        let x_2753 : vec2<f32> = vec2<f32>(x_2752.z, x_2752.w);
        let x_2755 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2753.x, x_2753.y, x_2755);
        let x_2762 : vec3<f32> = txVec44;
        let x_2764 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2762.xy, x_2762.z);
        u_xlat69 = x_2764;
        let x_2765 : f32 = u_xlat69;
        let x_2767 : f32 = u_xlat18.y;
        u_xlat69 = (x_2765 * x_2767);
        let x_2770 : f32 = u_xlat18.x;
        let x_2771 : f32 = u_xlat68;
        let x_2773 : f32 = u_xlat69;
        u_xlat68 = ((x_2770 * x_2771) + x_2773);
        let x_2776 : vec2<f32> = u_xlat49;
        let x_2778 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2776.x, x_2776.y, x_2778);
        let x_2785 : vec3<f32> = txVec45;
        let x_2787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2785.xy, x_2785.z);
        u_xlat69 = x_2787;
        let x_2789 : f32 = u_xlat18.z;
        let x_2790 : f32 = u_xlat69;
        let x_2792 : f32 = u_xlat68;
        u_xlat68 = ((x_2789 * x_2790) + x_2792);
        let x_2795 : vec4<f32> = u_xlat16;
        let x_2796 : vec2<f32> = vec2<f32>(x_2795.x, x_2795.y);
        let x_2798 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2796.x, x_2796.y, x_2798);
        let x_2805 : vec3<f32> = txVec46;
        let x_2807 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2805.xy, x_2805.z);
        u_xlat69 = x_2807;
        let x_2809 : f32 = u_xlat18.w;
        let x_2810 : f32 = u_xlat69;
        let x_2812 : f32 = u_xlat68;
        u_xlat68 = ((x_2809 * x_2810) + x_2812);
        let x_2815 : vec4<f32> = u_xlat14;
        let x_2816 : vec2<f32> = vec2<f32>(x_2815.x, x_2815.y);
        let x_2818 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2816.x, x_2816.y, x_2818);
        let x_2825 : vec3<f32> = txVec47;
        let x_2827 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2825.xy, x_2825.z);
        u_xlat69 = x_2827;
        let x_2829 : f32 = u_xlat19.x;
        let x_2830 : f32 = u_xlat69;
        let x_2832 : f32 = u_xlat68;
        u_xlat68 = ((x_2829 * x_2830) + x_2832);
        let x_2835 : vec4<f32> = u_xlat14;
        let x_2836 : vec2<f32> = vec2<f32>(x_2835.z, x_2835.w);
        let x_2838 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2836.x, x_2836.y, x_2838);
        let x_2845 : vec3<f32> = txVec48;
        let x_2847 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2845.xy, x_2845.z);
        u_xlat69 = x_2847;
        let x_2849 : f32 = u_xlat19.y;
        let x_2850 : f32 = u_xlat69;
        let x_2852 : f32 = u_xlat68;
        u_xlat68 = ((x_2849 * x_2850) + x_2852);
        let x_2855 : vec4<f32> = u_xlat15;
        let x_2856 : vec2<f32> = vec2<f32>(x_2855.x, x_2855.y);
        let x_2858 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2856.x, x_2856.y, x_2858);
        let x_2865 : vec3<f32> = txVec49;
        let x_2867 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2865.xy, x_2865.z);
        u_xlat69 = x_2867;
        let x_2869 : f32 = u_xlat19.z;
        let x_2870 : f32 = u_xlat69;
        let x_2872 : f32 = u_xlat68;
        u_xlat68 = ((x_2869 * x_2870) + x_2872);
        let x_2875 : vec4<f32> = u_xlat16;
        let x_2876 : vec2<f32> = vec2<f32>(x_2875.z, x_2875.w);
        let x_2878 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2876.x, x_2876.y, x_2878);
        let x_2885 : vec3<f32> = txVec50;
        let x_2887 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2885.xy, x_2885.z);
        u_xlat69 = x_2887;
        let x_2889 : f32 = u_xlat19.w;
        let x_2890 : f32 = u_xlat69;
        let x_2892 : f32 = u_xlat68;
        u_xlat68 = ((x_2889 * x_2890) + x_2892);
        let x_2895 : vec4<f32> = u_xlat17;
        let x_2896 : vec2<f32> = vec2<f32>(x_2895.x, x_2895.y);
        let x_2898 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2896.x, x_2896.y, x_2898);
        let x_2905 : vec3<f32> = txVec51;
        let x_2907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2905.xy, x_2905.z);
        u_xlat69 = x_2907;
        let x_2909 : f32 = u_xlat20.x;
        let x_2910 : f32 = u_xlat69;
        let x_2912 : f32 = u_xlat68;
        u_xlat68 = ((x_2909 * x_2910) + x_2912);
        let x_2915 : vec4<f32> = u_xlat17;
        let x_2916 : vec2<f32> = vec2<f32>(x_2915.z, x_2915.w);
        let x_2918 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2916.x, x_2916.y, x_2918);
        let x_2925 : vec3<f32> = txVec52;
        let x_2927 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2925.xy, x_2925.z);
        u_xlat69 = x_2927;
        let x_2929 : f32 = u_xlat20.y;
        let x_2930 : f32 = u_xlat69;
        let x_2932 : f32 = u_xlat68;
        u_xlat68 = ((x_2929 * x_2930) + x_2932);
        let x_2935 : vec2<f32> = u_xlat30;
        let x_2937 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2935.x, x_2935.y, x_2937);
        let x_2944 : vec3<f32> = txVec53;
        let x_2946 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2944.xy, x_2944.z);
        u_xlat69 = x_2946;
        let x_2948 : f32 = u_xlat20.z;
        let x_2949 : f32 = u_xlat69;
        let x_2951 : f32 = u_xlat68;
        u_xlat68 = ((x_2948 * x_2949) + x_2951);
        let x_2954 : vec2<f32> = u_xlat57;
        let x_2956 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2954.x, x_2954.y, x_2956);
        let x_2963 : vec3<f32> = txVec54;
        let x_2965 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2963.xy, x_2963.z);
        u_xlat69 = x_2965;
        let x_2967 : f32 = u_xlat20.w;
        let x_2968 : f32 = u_xlat69;
        let x_2970 : f32 = u_xlat68;
        u_xlat68 = ((x_2967 * x_2968) + x_2970);
        let x_2973 : vec4<f32> = u_xlat12;
        let x_2974 : vec2<f32> = vec2<f32>(x_2973.x, x_2973.y);
        let x_2976 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2974.x, x_2974.y, x_2976);
        let x_2983 : vec3<f32> = txVec55;
        let x_2985 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2983.xy, x_2983.z);
        u_xlat69 = x_2985;
        let x_2987 : f32 = u_xlat8.x;
        let x_2988 : f32 = u_xlat69;
        let x_2990 : f32 = u_xlat68;
        u_xlat68 = ((x_2987 * x_2988) + x_2990);
        let x_2993 : vec4<f32> = u_xlat12;
        let x_2994 : vec2<f32> = vec2<f32>(x_2993.z, x_2993.w);
        let x_2996 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_2994.x, x_2994.y, x_2996);
        let x_3003 : vec3<f32> = txVec56;
        let x_3005 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3003.xy, x_3003.z);
        u_xlat69 = x_3005;
        let x_3007 : f32 = u_xlat8.y;
        let x_3008 : f32 = u_xlat69;
        let x_3010 : f32 = u_xlat68;
        u_xlat68 = ((x_3007 * x_3008) + x_3010);
        let x_3013 : vec2<f32> = u_xlat52;
        let x_3015 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3013.x, x_3013.y, x_3015);
        let x_3022 : vec3<f32> = txVec57;
        let x_3024 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3022.xy, x_3022.z);
        u_xlat69 = x_3024;
        let x_3026 : f32 = u_xlat8.z;
        let x_3027 : f32 = u_xlat69;
        let x_3029 : f32 = u_xlat68;
        u_xlat68 = ((x_3026 * x_3027) + x_3029);
        let x_3032 : vec4<f32> = u_xlat7;
        let x_3033 : vec2<f32> = vec2<f32>(x_3032.x, x_3032.y);
        let x_3035 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3033.x, x_3033.y, x_3035);
        let x_3042 : vec3<f32> = txVec58;
        let x_3044 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3042.xy, x_3042.z);
        u_xlat69 = x_3044;
        let x_3046 : f32 = u_xlat8.w;
        let x_3047 : f32 = u_xlat69;
        let x_3049 : f32 = u_xlat68;
        u_xlat63 = ((x_3046 * x_3047) + x_3049);
      }
    }
  } else {
    let x_3053 : vec4<f32> = vs_INTERP9;
    let x_3054 : vec2<f32> = vec2<f32>(x_3053.x, x_3053.y);
    let x_3056 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3054.x, x_3054.y, x_3056);
    let x_3063 : vec3<f32> = txVec59;
    let x_3065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3063.xy, x_3063.z);
    u_xlat63 = x_3065;
  }
  let x_3066 : f32 = u_xlat63;
  let x_3068 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3071 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3066 * x_3068) + x_3071);
  let x_3075 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3075);
  let x_3078 : f32 = vs_INTERP9.z;
  u_xlatb68 = (x_3078 >= 1.0f);
  let x_3080 : bool = u_xlatb4;
  let x_3081 : bool = u_xlatb68;
  u_xlatb4 = (x_3080 | x_3081);
  let x_3083 : bool = u_xlatb4;
  let x_3084 : f32 = u_xlat63;
  u_xlat63 = select(x_3084, 1.0f, x_3083);
  let x_3086 : vec3<f32> = vs_INTERP0;
  let x_3088 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3090 : vec3<f32> = (x_3086 + -(x_3088));
  let x_3091 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3090.x, x_3090.y, x_3090.z, x_3091.w);
  let x_3093 : vec4<f32> = u_xlat7;
  let x_3095 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3093.x, x_3093.y, x_3093.z), vec3<f32>(x_3095.x, x_3095.y, x_3095.z));
  let x_3100 : f32 = u_xlat4.x;
  let x_3102 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3105 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3100 * x_3102) + x_3105);
  let x_3109 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3109, 0.0f, 1.0f);
  let x_3112 : f32 = u_xlat63;
  u_xlat68 = (-(x_3112) + 1.0f);
  let x_3116 : f32 = u_xlat4.x;
  let x_3117 : f32 = u_xlat68;
  let x_3119 : f32 = u_xlat63;
  u_xlat63 = ((x_3116 * x_3117) + x_3119);
  let x_3127 : f32 = x_3125.x_MainLightCookieTextureFormat;
  u_xlatb4 = !((x_3127 == -1.0f));
  let x_3129 : bool = u_xlatb4;
  if (x_3129) {
    let x_3132 : vec3<f32> = vs_INTERP0;
    let x_3135 : vec4<f32> = x_3125.x_MainLightWorldToLight[1i];
    let x_3137 : vec2<f32> = (vec2<f32>(x_3132.y, x_3132.y) * vec2<f32>(x_3135.x, x_3135.y));
    let x_3138 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3137.x, x_3137.y, x_3138.z, x_3138.w);
    let x_3141 : vec4<f32> = x_3125.x_MainLightWorldToLight[0i];
    let x_3143 : vec3<f32> = vs_INTERP0;
    let x_3146 : vec4<f32> = u_xlat7;
    let x_3148 : vec2<f32> = ((vec2<f32>(x_3141.x, x_3141.y) * vec2<f32>(x_3143.x, x_3143.x)) + vec2<f32>(x_3146.x, x_3146.y));
    let x_3149 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3148.x, x_3148.y, x_3149.z, x_3149.w);
    let x_3152 : vec4<f32> = x_3125.x_MainLightWorldToLight[2i];
    let x_3154 : vec3<f32> = vs_INTERP0;
    let x_3157 : vec4<f32> = u_xlat7;
    let x_3159 : vec2<f32> = ((vec2<f32>(x_3152.x, x_3152.y) * vec2<f32>(x_3154.z, x_3154.z)) + vec2<f32>(x_3157.x, x_3157.y));
    let x_3160 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3159.x, x_3159.y, x_3160.z, x_3160.w);
    let x_3162 : vec4<f32> = u_xlat7;
    let x_3165 : vec4<f32> = x_3125.x_MainLightWorldToLight[3i];
    let x_3167 : vec2<f32> = (vec2<f32>(x_3162.x, x_3162.y) + vec2<f32>(x_3165.x, x_3165.y));
    let x_3168 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3167.x, x_3167.y, x_3168.z, x_3168.w);
    let x_3170 : vec4<f32> = u_xlat7;
    let x_3173 : vec2<f32> = ((vec2<f32>(x_3170.x, x_3170.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3174 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3173.x, x_3173.y, x_3174.z, x_3174.w);
    let x_3181 : vec4<f32> = u_xlat7;
    let x_3184 : f32 = x_66.x_GlobalMipBias.x;
    let x_3185 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3181.x, x_3181.y), x_3184);
    u_xlat7 = x_3185;
    let x_3190 : f32 = x_3125.x_MainLightCookieTextureFormat;
    let x_3192 : f32 = x_3125.x_MainLightCookieTextureFormat;
    let x_3194 : f32 = x_3125.x_MainLightCookieTextureFormat;
    let x_3196 : f32 = x_3125.x_MainLightCookieTextureFormat;
    let x_3197 : vec4<f32> = vec4<f32>(x_3190, x_3192, x_3194, x_3196);
    let x_3205 : vec4<bool> = (vec4<f32>(x_3197.x, x_3197.y, x_3197.z, x_3197.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3205.x, x_3205.y);
    let x_3208 : bool = u_xlatb8.y;
    if (x_3208) {
      let x_3213 : f32 = u_xlat7.w;
      x_3209 = x_3213;
    } else {
      let x_3216 : f32 = u_xlat7.x;
      x_3209 = x_3216;
    }
    let x_3217 : f32 = x_3209;
    u_xlat4.x = x_3217;
    let x_3220 : bool = u_xlatb8.x;
    if (x_3220) {
      let x_3224 : vec4<f32> = u_xlat7;
      x_3221 = vec3<f32>(x_3224.x, x_3224.y, x_3224.z);
    } else {
      let x_3227 : vec4<f32> = u_xlat4;
      x_3221 = vec3<f32>(x_3227.x, x_3227.x, x_3227.x);
    }
    let x_3229 : vec3<f32> = x_3221;
    let x_3230 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3229.x, x_3229.y, x_3229.z, x_3230.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3236 : vec4<f32> = u_xlat7;
  let x_3239 : vec4<f32> = x_66.x_MainLightColor;
  let x_3241 : vec3<f32> = (vec3<f32>(x_3236.x, x_3236.y, x_3236.z) * vec3<f32>(x_3239.x, x_3239.y, x_3239.z));
  let x_3242 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3241.x, x_3241.y, x_3241.z, x_3242.w);
  let x_3244 : f32 = u_xlat67;
  let x_3246 : vec4<f32> = u_xlat7;
  let x_3248 : vec3<f32> = (vec3<f32>(x_3244, x_3244, x_3244) * vec3<f32>(x_3246.x, x_3246.y, x_3246.z));
  let x_3249 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3248.x, x_3248.y, x_3248.z, x_3249.w);
  let x_3251 : vec4<f32> = u_xlat6;
  let x_3254 : vec4<f32> = u_xlat5;
  u_xlat4.x = dot(-(vec3<f32>(x_3251.x, x_3251.y, x_3251.z)), vec3<f32>(x_3254.x, x_3254.y, x_3254.z));
  let x_3259 : f32 = u_xlat4.x;
  let x_3261 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3259 + x_3261);
  let x_3264 : vec4<f32> = u_xlat5;
  let x_3266 : vec4<f32> = u_xlat4;
  let x_3270 : vec4<f32> = u_xlat6;
  let x_3273 : vec3<f32> = ((vec3<f32>(x_3264.x, x_3264.y, x_3264.z) * -(vec3<f32>(x_3266.x, x_3266.x, x_3266.x))) + -(vec3<f32>(x_3270.x, x_3270.y, x_3270.z)));
  let x_3274 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3273.x, x_3273.y, x_3273.z, x_3274.w);
  let x_3276 : vec4<f32> = u_xlat5;
  let x_3278 : vec4<f32> = u_xlat6;
  u_xlat4.x = dot(vec3<f32>(x_3276.x, x_3276.y, x_3276.z), vec3<f32>(x_3278.x, x_3278.y, x_3278.z));
  let x_3283 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3283, 0.0f, 1.0f);
  let x_3287 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3287) + 1.0f);
  let x_3292 : f32 = u_xlat4.x;
  let x_3294 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3292 * x_3294);
  let x_3298 : f32 = u_xlat4.x;
  let x_3300 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3298 * x_3300);
  let x_3304 : f32 = u_xlat22.x;
  u_xlat68 = ((-(x_3304) * 0.699999988f) + 1.700000048f);
  let x_3311 : f32 = u_xlat22.x;
  let x_3312 : f32 = u_xlat68;
  u_xlat22.x = (x_3311 * x_3312);
  let x_3316 : f32 = u_xlat22.x;
  u_xlat22.x = (x_3316 * 6.0f);
  let x_3328 : vec4<f32> = u_xlat8;
  let x_3331 : f32 = u_xlat22.x;
  let x_3332 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3328.x, x_3328.y, x_3328.z), x_3331);
  u_xlat8 = x_3332;
  let x_3334 : f32 = u_xlat8.w;
  u_xlat22.x = (x_3334 + -1.0f);
  let x_3338 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3340 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_3338 * x_3340) + 1.0f);
  let x_3345 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_3345, 0.0f);
  let x_3349 : f32 = u_xlat22.x;
  u_xlat22.x = log2(x_3349);
  let x_3353 : f32 = u_xlat22.x;
  let x_3355 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat22.x = (x_3353 * x_3355);
  let x_3359 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_3359);
  let x_3363 : f32 = u_xlat22.x;
  let x_3365 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat22.x = (x_3363 * x_3365);
  let x_3368 : vec4<f32> = u_xlat8;
  let x_3370 : vec3<f32> = u_xlat22;
  let x_3372 : vec3<f32> = (vec3<f32>(x_3368.x, x_3368.y, x_3368.z) * vec3<f32>(x_3370.x, x_3370.x, x_3370.x));
  let x_3373 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3372.x, x_3372.y, x_3372.z, x_3373.w);
  let x_3375 : f32 = u_xlat64;
  let x_3377 : f32 = u_xlat64;
  let x_3381 : vec2<f32> = ((vec2<f32>(x_3375, x_3375) * vec2<f32>(x_3377, x_3377)) + vec2<f32>(-1.0f, 1.0f));
  let x_3382 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_3381.x, x_3382.y, x_3381.y);
  let x_3385 : f32 = u_xlat22.z;
  u_xlat64 = (1.0f / x_3385);
  let x_3388 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3388 + -0.039999999f);
  let x_3393 : f32 = u_xlat4.x;
  let x_3395 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3393 * x_3395) + 0.039999999f);
  let x_3400 : f32 = u_xlat64;
  let x_3402 : f32 = u_xlat3.x;
  u_xlat64 = (x_3400 * x_3402);
  let x_3404 : f32 = u_xlat64;
  let x_3406 : vec4<f32> = u_xlat8;
  let x_3408 : vec3<f32> = (vec3<f32>(x_3404, x_3404, x_3404) * vec3<f32>(x_3406.x, x_3406.y, x_3406.z));
  let x_3409 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3408.x, x_3408.y, x_3408.z, x_3409.w);
  let x_3411 : vec3<f32> = u_xlat24;
  let x_3412 : vec3<f32> = u_xlat2;
  let x_3414 : vec4<f32> = u_xlat8;
  let x_3416 : vec3<f32> = ((x_3411 * x_3412) + vec3<f32>(x_3414.x, x_3414.y, x_3414.z));
  let x_3417 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3416.x, x_3416.y, x_3416.z, x_3417.w);
  let x_3419 : f32 = u_xlat63;
  let x_3421 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3419 * x_3421);
  let x_3423 : vec4<f32> = u_xlat5;
  let x_3426 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3423.x, x_3423.y, x_3423.z), vec3<f32>(x_3426.x, x_3426.y, x_3426.z));
  let x_3429 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3429, 0.0f, 1.0f);
  let x_3431 : f32 = u_xlat63;
  let x_3432 : f32 = u_xlat64;
  u_xlat63 = (x_3431 * x_3432);
  let x_3434 : f32 = u_xlat63;
  let x_3436 : vec4<f32> = u_xlat7;
  let x_3438 : vec3<f32> = (vec3<f32>(x_3434, x_3434, x_3434) * vec3<f32>(x_3436.x, x_3436.y, x_3436.z));
  let x_3439 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3438.x, x_3438.y, x_3438.z, x_3439.w);
  let x_3441 : vec4<f32> = u_xlat6;
  let x_3444 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3446 : vec3<f32> = (vec3<f32>(x_3441.x, x_3441.y, x_3441.z) + vec3<f32>(x_3444.x, x_3444.y, x_3444.z));
  let x_3447 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3446.x, x_3446.y, x_3446.z, x_3447.w);
  let x_3449 : vec4<f32> = u_xlat8;
  let x_3451 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3449.x, x_3449.y, x_3449.z), vec3<f32>(x_3451.x, x_3451.y, x_3451.z));
  let x_3454 : f32 = u_xlat63;
  u_xlat63 = max(x_3454, 1.17549435e-37f);
  let x_3457 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3457);
  let x_3459 : f32 = u_xlat63;
  let x_3461 : vec4<f32> = u_xlat8;
  let x_3463 : vec3<f32> = (vec3<f32>(x_3459, x_3459, x_3459) * vec3<f32>(x_3461.x, x_3461.y, x_3461.z));
  let x_3464 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3463.x, x_3463.y, x_3463.z, x_3464.w);
  let x_3466 : vec4<f32> = u_xlat5;
  let x_3468 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3466.x, x_3466.y, x_3466.z), vec3<f32>(x_3468.x, x_3468.y, x_3468.z));
  let x_3471 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3471, 0.0f, 1.0f);
  let x_3474 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3476 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3474.x, x_3474.y, x_3474.z), vec3<f32>(x_3476.x, x_3476.y, x_3476.z));
  let x_3479 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3479, 0.0f, 1.0f);
  let x_3481 : f32 = u_xlat63;
  let x_3482 : f32 = u_xlat63;
  u_xlat63 = (x_3481 * x_3482);
  let x_3484 : f32 = u_xlat63;
  let x_3486 : f32 = u_xlat22.x;
  u_xlat63 = ((x_3484 * x_3486) + 1.000010014f);
  let x_3490 : f32 = u_xlat64;
  let x_3491 : f32 = u_xlat64;
  u_xlat64 = (x_3490 * x_3491);
  let x_3493 : f32 = u_xlat63;
  let x_3494 : f32 = u_xlat63;
  u_xlat63 = (x_3493 * x_3494);
  let x_3496 : f32 = u_xlat64;
  u_xlat64 = max(x_3496, 0.100000001f);
  let x_3499 : f32 = u_xlat63;
  let x_3500 : f32 = u_xlat64;
  u_xlat63 = (x_3499 * x_3500);
  let x_3503 : f32 = u_xlat25.x;
  let x_3504 : f32 = u_xlat63;
  u_xlat63 = (x_3503 * x_3504);
  let x_3506 : f32 = u_xlat65;
  let x_3507 : f32 = u_xlat63;
  u_xlat63 = (x_3506 / x_3507);
  let x_3509 : f32 = u_xlat63;
  let x_3513 : vec3<f32> = u_xlat2;
  let x_3514 : vec3<f32> = ((vec3<f32>(x_3509, x_3509, x_3509) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3513);
  let x_3515 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3514.x, x_3514.y, x_3514.z, x_3515.w);
  let x_3517 : vec4<f32> = u_xlat7;
  let x_3519 : vec4<f32> = u_xlat8;
  let x_3521 : vec3<f32> = (vec3<f32>(x_3517.x, x_3517.y, x_3517.z) * vec3<f32>(x_3519.x, x_3519.y, x_3519.z));
  let x_3522 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3521.x, x_3521.y, x_3521.z, x_3522.w);
  let x_3525 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3527 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3525, x_3527);
  let x_3531 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3531));
  let x_3535 : f32 = x_3125.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3537 : f32 = x_3125.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3539 : f32 = x_3125.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3541 : f32 = x_3125.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3542 : vec4<f32> = vec4<f32>(x_3535, x_3537, x_3539, x_3541);
  let x_3548 : vec4<bool> = (vec4<f32>(x_3542.x, x_3542.y, x_3542.z, x_3542.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3548.x, x_3548.y);
  u_xlat9.x = 0.0f;
  u_xlat9.y = 0.0f;
  u_xlat9.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3559 : u32 = u_xlatu_loop_1;
    let x_3560 : u32 = u_xlatu63;
    if ((x_3559 < x_3560)) {
    } else {
      break;
    }
    let x_3563 : u32 = u_xlatu_loop_1;
    u_xlatu66 = (x_3563 >> 2u);
    let x_3567 : u32 = u_xlatu_loop_1;
    u_xlati4 = bitcast<i32>((x_3567 & 3u));
    let x_3571 : u32 = u_xlatu66;
    let x_3574 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3571)];
    let x_3584 : i32 = u_xlati4;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3589 : vec4<u32> = indexable[x_3584];
    u_xlat66 = dot(x_3574, bitcast<vec4<f32>>(x_3589));
    let x_3592 : f32 = u_xlat66;
    u_xlatu66 = bitcast<u32>(i32(x_3592));
    let x_3595 : vec3<f32> = vs_INTERP0;
    let x_3607 : u32 = u_xlatu66;
    let x_3610 : vec4<f32> = x_3606.x_AdditionalLightsPosition[bitcast<i32>(x_3607)];
    let x_3613 : u32 = u_xlatu66;
    let x_3616 : vec4<f32> = x_3606.x_AdditionalLightsPosition[bitcast<i32>(x_3613)];
    let x_3618 : vec3<f32> = ((-(x_3595) * vec3<f32>(x_3610.w, x_3610.w, x_3610.w)) + vec3<f32>(x_3616.x, x_3616.y, x_3616.z));
    let x_3619 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3618.x, x_3618.y, x_3618.z, x_3619.w);
    let x_3621 : vec4<f32> = u_xlat10;
    let x_3623 : vec4<f32> = u_xlat10;
    u_xlat4.x = dot(vec3<f32>(x_3621.x, x_3621.y, x_3621.z), vec3<f32>(x_3623.x, x_3623.y, x_3623.z));
    let x_3628 : f32 = u_xlat4.x;
    u_xlat4.x = max(x_3628, 6.10351562e-05f);
    let x_3633 : f32 = u_xlat4.x;
    u_xlat68 = inverseSqrt(x_3633);
    let x_3635 : f32 = u_xlat68;
    let x_3637 : vec4<f32> = u_xlat10;
    let x_3639 : vec3<f32> = (vec3<f32>(x_3635, x_3635, x_3635) * vec3<f32>(x_3637.x, x_3637.y, x_3637.z));
    let x_3640 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3639.x, x_3639.y, x_3639.z, x_3640.w);
    let x_3643 : f32 = u_xlat4.x;
    u_xlat69 = (1.0f / x_3643);
    let x_3646 : f32 = u_xlat4.x;
    let x_3647 : u32 = u_xlatu66;
    let x_3650 : f32 = x_3606.x_AdditionalLightsAttenuation[bitcast<i32>(x_3647)].x;
    u_xlat4.x = (x_3646 * x_3650);
    let x_3654 : f32 = u_xlat4.x;
    let x_3657 : f32 = u_xlat4.x;
    u_xlat4.x = ((-(x_3654) * x_3657) + 1.0f);
    let x_3662 : f32 = u_xlat4.x;
    u_xlat4.x = max(x_3662, 0.0f);
    let x_3666 : f32 = u_xlat4.x;
    let x_3668 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3666 * x_3668);
    let x_3672 : f32 = u_xlat4.x;
    let x_3673 : f32 = u_xlat69;
    u_xlat4.x = (x_3672 * x_3673);
    let x_3676 : u32 = u_xlatu66;
    let x_3679 : vec4<f32> = x_3606.x_AdditionalLightsSpotDir[bitcast<i32>(x_3676)];
    let x_3681 : vec4<f32> = u_xlat11;
    u_xlat69 = dot(vec3<f32>(x_3679.x, x_3679.y, x_3679.z), vec3<f32>(x_3681.x, x_3681.y, x_3681.z));
    let x_3684 : f32 = u_xlat69;
    let x_3685 : u32 = u_xlatu66;
    let x_3688 : f32 = x_3606.x_AdditionalLightsAttenuation[bitcast<i32>(x_3685)].z;
    let x_3690 : u32 = u_xlatu66;
    let x_3693 : f32 = x_3606.x_AdditionalLightsAttenuation[bitcast<i32>(x_3690)].w;
    u_xlat69 = ((x_3684 * x_3688) + x_3693);
    let x_3695 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3695, 0.0f, 1.0f);
    let x_3697 : f32 = u_xlat69;
    let x_3698 : f32 = u_xlat69;
    u_xlat69 = (x_3697 * x_3698);
    let x_3701 : f32 = u_xlat4.x;
    let x_3702 : f32 = u_xlat69;
    u_xlat4.x = (x_3701 * x_3702);
    let x_3706 : u32 = u_xlatu66;
    u_xlatu69 = (x_3706 >> 5u);
    let x_3709 : u32 = u_xlatu66;
    u_xlati70 = (1i << bitcast<u32>((bitcast<i32>(x_3709) & 31i)));
    let x_3715 : i32 = u_xlati70;
    let x_3717 : u32 = u_xlatu69;
    let x_3720 : f32 = x_3125.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3717)].el;
    u_xlati69 = bitcast<i32>((bitcast<u32>(x_3715) & bitcast<u32>(x_3720)));
    let x_3724 : i32 = u_xlati69;
    if ((x_3724 != 0i)) {
      let x_3734 : u32 = u_xlatu66;
      let x_3737 : f32 = x_3733.x_AdditionalLightsLightTypes[bitcast<i32>(x_3734)].el;
      u_xlati69 = i32(x_3737);
      let x_3739 : i32 = u_xlati69;
      u_xlati70 = select(1i, 0i, (x_3739 != 0i));
      let x_3743 : u32 = u_xlatu66;
      u_xlati50 = (bitcast<i32>(x_3743) << bitcast<u32>(2i));
      let x_3746 : i32 = u_xlati70;
      if ((x_3746 != 0i)) {
        let x_3750 : vec3<f32> = vs_INTERP0;
        let x_3752 : i32 = u_xlati50;
        let x_3755 : i32 = u_xlati50;
        let x_3759 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3752 + 1i) / 4i)][((x_3755 + 1i) % 4i)];
        let x_3761 : vec3<f32> = (vec3<f32>(x_3750.y, x_3750.y, x_3750.y) * vec3<f32>(x_3759.x, x_3759.y, x_3759.w));
        let x_3762 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3761.x, x_3761.y, x_3761.z, x_3762.w);
        let x_3764 : i32 = u_xlati50;
        let x_3766 : i32 = u_xlati50;
        let x_3769 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[(x_3764 / 4i)][(x_3766 % 4i)];
        let x_3771 : vec3<f32> = vs_INTERP0;
        let x_3774 : vec4<f32> = u_xlat12;
        let x_3776 : vec3<f32> = ((vec3<f32>(x_3769.x, x_3769.y, x_3769.w) * vec3<f32>(x_3771.x, x_3771.x, x_3771.x)) + vec3<f32>(x_3774.x, x_3774.y, x_3774.z));
        let x_3777 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3776.x, x_3776.y, x_3776.z, x_3777.w);
        let x_3779 : i32 = u_xlati50;
        let x_3782 : i32 = u_xlati50;
        let x_3786 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3779 + 2i) / 4i)][((x_3782 + 2i) % 4i)];
        let x_3788 : vec3<f32> = vs_INTERP0;
        let x_3791 : vec4<f32> = u_xlat12;
        let x_3793 : vec3<f32> = ((vec3<f32>(x_3786.x, x_3786.y, x_3786.w) * vec3<f32>(x_3788.z, x_3788.z, x_3788.z)) + vec3<f32>(x_3791.x, x_3791.y, x_3791.z));
        let x_3794 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3793.x, x_3793.y, x_3793.z, x_3794.w);
        let x_3796 : vec4<f32> = u_xlat12;
        let x_3798 : i32 = u_xlati50;
        let x_3801 : i32 = u_xlati50;
        let x_3805 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3798 + 3i) / 4i)][((x_3801 + 3i) % 4i)];
        let x_3807 : vec3<f32> = (vec3<f32>(x_3796.x, x_3796.y, x_3796.z) + vec3<f32>(x_3805.x, x_3805.y, x_3805.w));
        let x_3808 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3807.x, x_3807.y, x_3807.z, x_3808.w);
        let x_3810 : vec4<f32> = u_xlat12;
        let x_3812 : vec4<f32> = u_xlat12;
        let x_3814 : vec2<f32> = (vec2<f32>(x_3810.x, x_3810.y) / vec2<f32>(x_3812.z, x_3812.z));
        let x_3815 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3814.x, x_3814.y, x_3815.z, x_3815.w);
        let x_3817 : vec4<f32> = u_xlat12;
        let x_3820 : vec2<f32> = ((vec2<f32>(x_3817.x, x_3817.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3821 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3820.x, x_3820.y, x_3821.z, x_3821.w);
        let x_3823 : vec4<f32> = u_xlat12;
        let x_3827 : vec2<f32> = clamp(vec2<f32>(x_3823.x, x_3823.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3828 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3827.x, x_3827.y, x_3828.z, x_3828.w);
        let x_3830 : u32 = u_xlatu66;
        let x_3833 : vec4<f32> = x_3733.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3830)];
        let x_3835 : vec4<f32> = u_xlat12;
        let x_3838 : u32 = u_xlatu66;
        let x_3841 : vec4<f32> = x_3733.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3838)];
        let x_3843 : vec2<f32> = ((vec2<f32>(x_3833.x, x_3833.y) * vec2<f32>(x_3835.x, x_3835.y)) + vec2<f32>(x_3841.z, x_3841.w));
        let x_3844 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3843.x, x_3843.y, x_3844.z, x_3844.w);
      } else {
        let x_3848 : i32 = u_xlati69;
        u_xlatb69 = (x_3848 == 1i);
        let x_3850 : bool = u_xlatb69;
        u_xlati69 = select(0i, 1i, x_3850);
        let x_3852 : i32 = u_xlati69;
        if ((x_3852 != 0i)) {
          let x_3857 : vec3<f32> = vs_INTERP0;
          let x_3859 : i32 = u_xlati50;
          let x_3862 : i32 = u_xlati50;
          let x_3866 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3859 + 1i) / 4i)][((x_3862 + 1i) % 4i)];
          u_xlat54 = (vec2<f32>(x_3857.y, x_3857.y) * vec2<f32>(x_3866.x, x_3866.y));
          let x_3869 : i32 = u_xlati50;
          let x_3871 : i32 = u_xlati50;
          let x_3874 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[(x_3869 / 4i)][(x_3871 % 4i)];
          let x_3876 : vec3<f32> = vs_INTERP0;
          let x_3879 : vec2<f32> = u_xlat54;
          u_xlat54 = ((vec2<f32>(x_3874.x, x_3874.y) * vec2<f32>(x_3876.x, x_3876.x)) + x_3879);
          let x_3881 : i32 = u_xlati50;
          let x_3884 : i32 = u_xlati50;
          let x_3888 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3881 + 2i) / 4i)][((x_3884 + 2i) % 4i)];
          let x_3890 : vec3<f32> = vs_INTERP0;
          let x_3893 : vec2<f32> = u_xlat54;
          u_xlat54 = ((vec2<f32>(x_3888.x, x_3888.y) * vec2<f32>(x_3890.z, x_3890.z)) + x_3893);
          let x_3895 : vec2<f32> = u_xlat54;
          let x_3896 : i32 = u_xlati50;
          let x_3899 : i32 = u_xlati50;
          let x_3903 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3896 + 3i) / 4i)][((x_3899 + 3i) % 4i)];
          u_xlat54 = (x_3895 + vec2<f32>(x_3903.x, x_3903.y));
          let x_3906 : vec2<f32> = u_xlat54;
          u_xlat54 = ((x_3906 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3909 : vec2<f32> = u_xlat54;
          u_xlat54 = fract(x_3909);
          let x_3911 : u32 = u_xlatu66;
          let x_3914 : vec4<f32> = x_3733.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3911)];
          let x_3916 : vec2<f32> = u_xlat54;
          let x_3918 : u32 = u_xlatu66;
          let x_3921 : vec4<f32> = x_3733.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3918)];
          let x_3923 : vec2<f32> = ((vec2<f32>(x_3914.x, x_3914.y) * x_3916) + vec2<f32>(x_3921.z, x_3921.w));
          let x_3924 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3923.x, x_3923.y, x_3924.z, x_3924.w);
        } else {
          let x_3927 : vec3<f32> = vs_INTERP0;
          let x_3929 : i32 = u_xlati50;
          let x_3932 : i32 = u_xlati50;
          let x_3936 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3929 + 1i) / 4i)][((x_3932 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_3927.y, x_3927.y, x_3927.y, x_3927.y) * x_3936);
          let x_3938 : i32 = u_xlati50;
          let x_3940 : i32 = u_xlati50;
          let x_3943 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[(x_3938 / 4i)][(x_3940 % 4i)];
          let x_3944 : vec3<f32> = vs_INTERP0;
          let x_3947 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_3943 * vec4<f32>(x_3944.x, x_3944.x, x_3944.x, x_3944.x)) + x_3947);
          let x_3949 : i32 = u_xlati50;
          let x_3952 : i32 = u_xlati50;
          let x_3956 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3949 + 2i) / 4i)][((x_3952 + 2i) % 4i)];
          let x_3957 : vec3<f32> = vs_INTERP0;
          let x_3960 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_3956 * vec4<f32>(x_3957.z, x_3957.z, x_3957.z, x_3957.z)) + x_3960);
          let x_3962 : vec4<f32> = u_xlat13;
          let x_3963 : i32 = u_xlati50;
          let x_3966 : i32 = u_xlati50;
          let x_3970 : vec4<f32> = x_3733.x_AdditionalLightsWorldToLights[((x_3963 + 3i) / 4i)][((x_3966 + 3i) % 4i)];
          u_xlat13 = (x_3962 + x_3970);
          let x_3972 : vec4<f32> = u_xlat13;
          let x_3974 : vec4<f32> = u_xlat13;
          let x_3976 : vec3<f32> = (vec3<f32>(x_3972.x, x_3972.y, x_3972.z) / vec3<f32>(x_3974.w, x_3974.w, x_3974.w));
          let x_3977 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_3976.x, x_3976.y, x_3976.z, x_3977.w);
          let x_3979 : vec4<f32> = u_xlat13;
          let x_3981 : vec4<f32> = u_xlat13;
          u_xlat69 = dot(vec3<f32>(x_3979.x, x_3979.y, x_3979.z), vec3<f32>(x_3981.x, x_3981.y, x_3981.z));
          let x_3984 : f32 = u_xlat69;
          u_xlat69 = inverseSqrt(x_3984);
          let x_3986 : f32 = u_xlat69;
          let x_3988 : vec4<f32> = u_xlat13;
          let x_3990 : vec3<f32> = (vec3<f32>(x_3986, x_3986, x_3986) * vec3<f32>(x_3988.x, x_3988.y, x_3988.z));
          let x_3991 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_3990.x, x_3990.y, x_3990.z, x_3991.w);
          let x_3993 : vec4<f32> = u_xlat13;
          u_xlat69 = dot(abs(vec3<f32>(x_3993.x, x_3993.y, x_3993.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_3998 : f32 = u_xlat69;
          u_xlat69 = max(x_3998, 0.000001f);
          let x_4001 : f32 = u_xlat69;
          u_xlat69 = (1.0f / x_4001);
          let x_4003 : f32 = u_xlat69;
          let x_4005 : vec4<f32> = u_xlat13;
          let x_4007 : vec3<f32> = (vec3<f32>(x_4003, x_4003, x_4003) * vec3<f32>(x_4005.z, x_4005.x, x_4005.y));
          let x_4008 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4007.x, x_4007.y, x_4007.z, x_4008.w);
          let x_4011 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4011);
          let x_4015 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4015, 0.0f, 1.0f);
          let x_4019 : vec4<f32> = u_xlat14;
          let x_4022 : vec4<bool> = (vec4<f32>(x_4019.y, x_4019.z, x_4019.y, x_4019.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb50 = vec2<bool>(x_4022.x, x_4022.y);
          let x_4025 : bool = u_xlatb50.x;
          if (x_4025) {
            let x_4030 : f32 = u_xlat14.x;
            x_4026 = x_4030;
          } else {
            let x_4033 : f32 = u_xlat14.x;
            x_4026 = -(x_4033);
          }
          let x_4035 : f32 = x_4026;
          u_xlat50.x = x_4035;
          let x_4038 : bool = u_xlatb50.y;
          if (x_4038) {
            let x_4043 : f32 = u_xlat14.x;
            x_4039 = x_4043;
          } else {
            let x_4046 : f32 = u_xlat14.x;
            x_4039 = -(x_4046);
          }
          let x_4048 : f32 = x_4039;
          u_xlat50.y = x_4048;
          let x_4050 : vec4<f32> = u_xlat13;
          let x_4052 : f32 = u_xlat69;
          let x_4055 : vec2<f32> = u_xlat50;
          u_xlat50 = ((vec2<f32>(x_4050.x, x_4050.y) * vec2<f32>(x_4052, x_4052)) + x_4055);
          let x_4057 : vec2<f32> = u_xlat50;
          u_xlat50 = ((x_4057 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4060 : vec2<f32> = u_xlat50;
          u_xlat50 = clamp(x_4060, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4064 : u32 = u_xlatu66;
          let x_4067 : vec4<f32> = x_3733.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4064)];
          let x_4069 : vec2<f32> = u_xlat50;
          let x_4071 : u32 = u_xlatu66;
          let x_4074 : vec4<f32> = x_3733.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4071)];
          let x_4076 : vec2<f32> = ((vec2<f32>(x_4067.x, x_4067.y) * x_4069) + vec2<f32>(x_4074.z, x_4074.w));
          let x_4077 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4076.x, x_4076.y, x_4077.z, x_4077.w);
        }
      }
      let x_4084 : vec4<f32> = u_xlat12;
      let x_4087 : f32 = x_66.x_GlobalMipBias.x;
      let x_4088 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4084.x, x_4084.y), x_4087);
      u_xlat12 = x_4088;
      let x_4090 : bool = u_xlatb8.y;
      if (x_4090) {
        let x_4095 : f32 = u_xlat12.w;
        x_4091 = x_4095;
      } else {
        let x_4098 : f32 = u_xlat12.x;
        x_4091 = x_4098;
      }
      let x_4099 : f32 = x_4091;
      u_xlat69 = x_4099;
      let x_4101 : bool = u_xlatb8.x;
      if (x_4101) {
        let x_4105 : vec4<f32> = u_xlat12;
        x_4102 = vec3<f32>(x_4105.x, x_4105.y, x_4105.z);
      } else {
        let x_4108 : f32 = u_xlat69;
        x_4102 = vec3<f32>(x_4108, x_4108, x_4108);
      }
      let x_4110 : vec3<f32> = x_4102;
      let x_4111 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4110.x, x_4110.y, x_4110.z, x_4111.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4117 : vec4<f32> = u_xlat12;
    let x_4119 : u32 = u_xlatu66;
    let x_4122 : vec4<f32> = x_3606.x_AdditionalLightsColor[bitcast<i32>(x_4119)];
    let x_4124 : vec3<f32> = (vec3<f32>(x_4117.x, x_4117.y, x_4117.z) * vec3<f32>(x_4122.x, x_4122.y, x_4122.z));
    let x_4125 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4124.x, x_4124.y, x_4124.z, x_4125.w);
    let x_4127 : f32 = u_xlat67;
    let x_4129 : vec4<f32> = u_xlat12;
    let x_4131 : vec3<f32> = (vec3<f32>(x_4127, x_4127, x_4127) * vec3<f32>(x_4129.x, x_4129.y, x_4129.z));
    let x_4132 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4131.x, x_4131.y, x_4131.z, x_4132.w);
    let x_4134 : vec4<f32> = u_xlat5;
    let x_4136 : vec4<f32> = u_xlat11;
    u_xlat66 = dot(vec3<f32>(x_4134.x, x_4134.y, x_4134.z), vec3<f32>(x_4136.x, x_4136.y, x_4136.z));
    let x_4139 : f32 = u_xlat66;
    u_xlat66 = clamp(x_4139, 0.0f, 1.0f);
    let x_4141 : f32 = u_xlat66;
    let x_4143 : f32 = u_xlat4.x;
    u_xlat66 = (x_4141 * x_4143);
    let x_4145 : f32 = u_xlat66;
    let x_4147 : vec4<f32> = u_xlat12;
    let x_4149 : vec3<f32> = (vec3<f32>(x_4145, x_4145, x_4145) * vec3<f32>(x_4147.x, x_4147.y, x_4147.z));
    let x_4150 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4149.x, x_4149.y, x_4149.z, x_4150.w);
    let x_4152 : vec4<f32> = u_xlat10;
    let x_4154 : f32 = u_xlat68;
    let x_4157 : vec4<f32> = u_xlat6;
    let x_4159 : vec3<f32> = ((vec3<f32>(x_4152.x, x_4152.y, x_4152.z) * vec3<f32>(x_4154, x_4154, x_4154)) + vec3<f32>(x_4157.x, x_4157.y, x_4157.z));
    let x_4160 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4159.x, x_4159.y, x_4159.z, x_4160.w);
    let x_4162 : vec4<f32> = u_xlat10;
    let x_4164 : vec4<f32> = u_xlat10;
    u_xlat66 = dot(vec3<f32>(x_4162.x, x_4162.y, x_4162.z), vec3<f32>(x_4164.x, x_4164.y, x_4164.z));
    let x_4167 : f32 = u_xlat66;
    u_xlat66 = max(x_4167, 1.17549435e-37f);
    let x_4169 : f32 = u_xlat66;
    u_xlat66 = inverseSqrt(x_4169);
    let x_4171 : f32 = u_xlat66;
    let x_4173 : vec4<f32> = u_xlat10;
    let x_4175 : vec3<f32> = (vec3<f32>(x_4171, x_4171, x_4171) * vec3<f32>(x_4173.x, x_4173.y, x_4173.z));
    let x_4176 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4175.x, x_4175.y, x_4175.z, x_4176.w);
    let x_4178 : vec4<f32> = u_xlat5;
    let x_4180 : vec4<f32> = u_xlat10;
    u_xlat66 = dot(vec3<f32>(x_4178.x, x_4178.y, x_4178.z), vec3<f32>(x_4180.x, x_4180.y, x_4180.z));
    let x_4183 : f32 = u_xlat66;
    u_xlat66 = clamp(x_4183, 0.0f, 1.0f);
    let x_4185 : vec4<f32> = u_xlat11;
    let x_4187 : vec4<f32> = u_xlat10;
    u_xlat4.x = dot(vec3<f32>(x_4185.x, x_4185.y, x_4185.z), vec3<f32>(x_4187.x, x_4187.y, x_4187.z));
    let x_4192 : f32 = u_xlat4.x;
    u_xlat4.x = clamp(x_4192, 0.0f, 1.0f);
    let x_4195 : f32 = u_xlat66;
    let x_4196 : f32 = u_xlat66;
    u_xlat66 = (x_4195 * x_4196);
    let x_4198 : f32 = u_xlat66;
    let x_4200 : f32 = u_xlat22.x;
    u_xlat66 = ((x_4198 * x_4200) + 1.000010014f);
    let x_4204 : f32 = u_xlat4.x;
    let x_4206 : f32 = u_xlat4.x;
    u_xlat4.x = (x_4204 * x_4206);
    let x_4209 : f32 = u_xlat66;
    let x_4210 : f32 = u_xlat66;
    u_xlat66 = (x_4209 * x_4210);
    let x_4213 : f32 = u_xlat4.x;
    u_xlat4.x = max(x_4213, 0.100000001f);
    let x_4216 : f32 = u_xlat66;
    let x_4218 : f32 = u_xlat4.x;
    u_xlat66 = (x_4216 * x_4218);
    let x_4221 : f32 = u_xlat25.x;
    let x_4222 : f32 = u_xlat66;
    u_xlat66 = (x_4221 * x_4222);
    let x_4224 : f32 = u_xlat65;
    let x_4225 : f32 = u_xlat66;
    u_xlat66 = (x_4224 / x_4225);
    let x_4227 : f32 = u_xlat66;
    let x_4230 : vec3<f32> = u_xlat2;
    let x_4231 : vec3<f32> = ((vec3<f32>(x_4227, x_4227, x_4227) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4230);
    let x_4232 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4231.x, x_4231.y, x_4231.z, x_4232.w);
    let x_4234 : vec4<f32> = u_xlat10;
    let x_4236 : vec4<f32> = u_xlat12;
    let x_4239 : vec4<f32> = u_xlat9;
    let x_4241 : vec3<f32> = ((vec3<f32>(x_4234.x, x_4234.y, x_4234.z) * vec3<f32>(x_4236.x, x_4236.y, x_4236.z)) + vec3<f32>(x_4239.x, x_4239.y, x_4239.z));
    let x_4242 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4241.x, x_4241.y, x_4241.z, x_4242.w);

    continuing {
      let x_4244 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4244 + bitcast<u32>(1i));
    }
  }
  let x_4246 : vec4<f32> = u_xlat3;
  let x_4248 : f32 = u_xlat46;
  let x_4251 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_4246.x, x_4246.y, x_4246.z) * vec3<f32>(x_4248, x_4248, x_4248)) + vec3<f32>(x_4251.x, x_4251.y, x_4251.z));
  let x_4254 : vec4<f32> = u_xlat9;
  let x_4256 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4254.x, x_4254.y, x_4254.z) + x_4256);
  let x_4260 : vec4<f32> = vs_INTERP4;
  let x_4262 : vec3<f32> = u_xlat0;
  let x_4264 : vec3<f32> = u_xlat2;
  let x_4265 : vec3<f32> = ((vec3<f32>(x_4260.w, x_4260.w, x_4260.w) * x_4262) + x_4264);
  let x_4266 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4265.x, x_4265.y, x_4265.z, x_4266.w);
  let x_4268 : bool = u_xlatb43;
  if (x_4268) {
    let x_4273 : f32 = u_xlat1.x;
    x_4269 = x_4273;
  } else {
    x_4269 = 1.0f;
  }
  let x_4275 : f32 = x_4269;
  SV_Target0.w = x_4275;
  let x_4281 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4283 : f32 = x_1592.unity_RenderingLayer.x;
  u_xlatu0 = (x_4281 & bitcast<u32>(x_4283));
  let x_4286 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4286);
  let x_4291 : f32 = u_xlat0.x;
  let x_4293 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4291 * x_4293);
  let x_4297 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4297, 0.0f, 1.0f);
  let x_4300 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4300.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

