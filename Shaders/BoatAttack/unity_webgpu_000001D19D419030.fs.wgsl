struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(1) var x_MainTex : texture_2d<f32>;

@group(0) @binding(6) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(2) var x_MetallicTex : texture_2d<f32>;

@group(0) @binding(7) var sampler_MetallicTex : sampler;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_94 : MainLightShadows;

@group(1) @binding(2) var<uniform> x_329 : UnityPerDraw;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2199 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat21 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlatb3 : vec4<bool>;
  var u_xlatu21 : u32;
  var u_xlati21 : i32;
  var u_xlat62 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlat64 : f32;
  var u_xlat60 : f32;
  var u_xlat44 : f32;
  var u_xlatb65 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb6 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat66 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb41 : bool;
  var u_xlatb61 : bool;
  var x_1807 : f32;
  var u_xlat41 : f32;
  var u_xlat61 : f32;
  var u_xlatu60 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati66 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat67 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_TEXCOORD0;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_58 : vec4<f32> = vs_TEXCOORD0;
  let x_61 : f32 = x_44.x_GlobalMipBias.x;
  let x_62 : vec4<f32> = textureSampleBias(x_MetallicTex, sampler_MetallicTex, vec2<f32>(x_58.x, x_58.y), x_61);
  u_xlat1.x = x_62.x;
  let x_69 : vec4<f32> = vs_TEXCOORD3;
  let x_71 : vec4<f32> = vs_TEXCOORD3;
  u_xlat21.x = dot(vec3<f32>(x_69.x, x_69.y, x_69.z), vec3<f32>(x_71.x, x_71.y, x_71.z));
  let x_76 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_76);
  let x_80 : vec3<f32> = u_xlat21;
  let x_82 : vec4<f32> = vs_TEXCOORD3;
  let x_84 : vec3<f32> = (vec3<f32>(x_80.x, x_80.x, x_80.x) * vec3<f32>(x_82.x, x_82.y, x_82.z));
  let x_85 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_84.x, x_84.y, x_84.z, x_85.w);
  let x_89 : vec3<f32> = vs_TEXCOORD7;
  let x_97 : vec4<f32> = x_94.x_CascadeShadowSplitSpheres0;
  u_xlat21 = (x_89 + -(vec3<f32>(x_97.x, x_97.y, x_97.z)));
  let x_102 : vec3<f32> = vs_TEXCOORD7;
  let x_105 : vec4<f32> = x_94.x_CascadeShadowSplitSpheres1;
  u_xlat3 = (x_102 + -(vec3<f32>(x_105.x, x_105.y, x_105.z)));
  let x_110 : vec3<f32> = vs_TEXCOORD7;
  let x_113 : vec4<f32> = x_94.x_CascadeShadowSplitSpheres2;
  let x_116 : vec3<f32> = (x_110 + -(vec3<f32>(x_113.x, x_113.y, x_113.z)));
  let x_117 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_116.x, x_116.y, x_116.z, x_117.w);
  let x_120 : vec3<f32> = vs_TEXCOORD7;
  let x_123 : vec4<f32> = x_94.x_CascadeShadowSplitSpheres3;
  let x_126 : vec3<f32> = (x_120 + -(vec3<f32>(x_123.x, x_123.y, x_123.z)));
  let x_127 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_126.x, x_126.y, x_126.z, x_127.w);
  let x_130 : vec3<f32> = u_xlat21;
  let x_131 : vec3<f32> = u_xlat21;
  u_xlat6.x = dot(x_130, x_131);
  let x_134 : vec3<f32> = u_xlat3;
  let x_135 : vec3<f32> = u_xlat3;
  u_xlat6.y = dot(x_134, x_135);
  let x_139 : vec4<f32> = u_xlat4;
  let x_141 : vec4<f32> = u_xlat4;
  u_xlat6.z = dot(vec3<f32>(x_139.x, x_139.y, x_139.z), vec3<f32>(x_141.x, x_141.y, x_141.z));
  let x_146 : vec4<f32> = u_xlat5;
  let x_148 : vec4<f32> = u_xlat5;
  u_xlat6.w = dot(vec3<f32>(x_146.x, x_146.y, x_146.z), vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_156 : vec4<f32> = u_xlat6;
  let x_159 : vec4<f32> = x_94.x_CascadeShadowSplitSphereRadii;
  u_xlatb3 = (x_156 < x_159);
  let x_163 : bool = u_xlatb3.x;
  u_xlat4.x = select(0.0f, 1.0f, x_163);
  let x_168 : bool = u_xlatb3.y;
  u_xlat4.y = select(0.0f, 1.0f, x_168);
  let x_172 : bool = u_xlatb3.z;
  u_xlat4.z = select(0.0f, 1.0f, x_172);
  let x_176 : bool = u_xlatb3.w;
  u_xlat4.w = select(0.0f, 1.0f, x_176);
  let x_180 : bool = u_xlatb3.x;
  u_xlat21.x = select(-0.0f, -1.0f, x_180);
  let x_186 : bool = u_xlatb3.y;
  u_xlat21.y = select(-0.0f, -1.0f, x_186);
  let x_190 : bool = u_xlatb3.z;
  u_xlat21.z = select(-0.0f, -1.0f, x_190);
  let x_193 : vec3<f32> = u_xlat21;
  let x_194 : vec4<f32> = u_xlat4;
  u_xlat21 = (x_193 + vec3<f32>(x_194.y, x_194.z, x_194.w));
  let x_197 : vec3<f32> = u_xlat21;
  let x_199 : vec3<f32> = max(x_197, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_200 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_200.x, x_199.x, x_199.y, x_199.z);
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat21.x = dot(x_202, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_210 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_210) + 4.0f);
  let x_217 : f32 = u_xlat21.x;
  u_xlatu21 = u32(x_217);
  let x_221 : u32 = u_xlatu21;
  u_xlati21 = (bitcast<i32>(x_221) << bitcast<u32>(2i));
  let x_224 : vec3<f32> = vs_TEXCOORD7;
  let x_227 : i32 = u_xlati21;
  let x_230 : i32 = u_xlati21;
  let x_234 : vec4<f32> = x_94.x_MainLightWorldToShadow[((x_227 + 1i) / 4i)][((x_230 + 1i) % 4i)];
  u_xlat3 = (vec3<f32>(x_224.y, x_224.y, x_224.y) * vec3<f32>(x_234.x, x_234.y, x_234.z));
  let x_237 : i32 = u_xlati21;
  let x_239 : i32 = u_xlati21;
  let x_242 : vec4<f32> = x_94.x_MainLightWorldToShadow[(x_237 / 4i)][(x_239 % 4i)];
  let x_244 : vec3<f32> = vs_TEXCOORD7;
  let x_247 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_242.x, x_242.y, x_242.z) * vec3<f32>(x_244.x, x_244.x, x_244.x)) + x_247);
  let x_249 : i32 = u_xlati21;
  let x_252 : i32 = u_xlati21;
  let x_256 : vec4<f32> = x_94.x_MainLightWorldToShadow[((x_249 + 2i) / 4i)][((x_252 + 2i) % 4i)];
  let x_258 : vec3<f32> = vs_TEXCOORD7;
  let x_261 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_256.x, x_256.y, x_256.z) * vec3<f32>(x_258.z, x_258.z, x_258.z)) + x_261);
  let x_263 : vec3<f32> = u_xlat3;
  let x_264 : i32 = u_xlati21;
  let x_267 : i32 = u_xlati21;
  let x_271 : vec4<f32> = x_94.x_MainLightWorldToShadow[((x_264 + 3i) / 4i)][((x_267 + 3i) % 4i)];
  u_xlat21 = (x_263 + vec3<f32>(x_271.x, x_271.y, x_271.z));
  let x_275 : f32 = vs_TEXCOORD7.y;
  let x_278 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat3.x = (x_275 * x_278);
  let x_282 : f32 = x_44.unity_MatrixV[0i].z;
  let x_284 : f32 = vs_TEXCOORD7.x;
  let x_287 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_282 * x_284) + x_287);
  let x_291 : f32 = x_44.unity_MatrixV[2i].z;
  let x_293 : f32 = vs_TEXCOORD7.z;
  let x_296 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_291 * x_293) + x_296);
  let x_300 : f32 = u_xlat3.x;
  let x_302 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat3.x = (x_300 + x_302);
  let x_306 : f32 = u_xlat3.x;
  let x_310 : f32 = x_44.x_ProjectionParams.y;
  u_xlat3.x = (-(x_306) + -(x_310));
  let x_315 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_315, 0.0f);
  let x_319 : f32 = u_xlat3.x;
  let x_322 : f32 = x_44.unity_FogParams.x;
  u_xlat3.x = (x_319 * x_322);
  u_xlat2.w = 1.0f;
  let x_332 : vec4<f32> = x_329.unity_SHAr;
  let x_333 : vec4<f32> = u_xlat2;
  u_xlat4.x = dot(x_332, x_333);
  let x_338 : vec4<f32> = x_329.unity_SHAg;
  let x_339 : vec4<f32> = u_xlat2;
  u_xlat4.y = dot(x_338, x_339);
  let x_344 : vec4<f32> = x_329.unity_SHAb;
  let x_345 : vec4<f32> = u_xlat2;
  u_xlat4.z = dot(x_344, x_345);
  let x_348 : vec4<f32> = u_xlat2;
  let x_350 : vec4<f32> = u_xlat2;
  u_xlat5 = (vec4<f32>(x_348.y, x_348.z, x_348.z, x_348.x) * vec4<f32>(x_350.x, x_350.y, x_350.z, x_350.z));
  let x_355 : vec4<f32> = x_329.unity_SHBr;
  let x_356 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_355, x_356);
  let x_361 : vec4<f32> = x_329.unity_SHBg;
  let x_362 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_361, x_362);
  let x_367 : vec4<f32> = x_329.unity_SHBb;
  let x_368 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_367, x_368);
  let x_373 : f32 = u_xlat2.y;
  let x_375 : f32 = u_xlat2.y;
  u_xlat62 = (x_373 * x_375);
  let x_378 : f32 = u_xlat2.x;
  let x_380 : f32 = u_xlat2.x;
  let x_382 : f32 = u_xlat62;
  u_xlat62 = ((x_378 * x_380) + -(x_382));
  let x_388 : vec4<f32> = x_329.unity_SHC;
  let x_390 : f32 = u_xlat62;
  let x_393 : vec4<f32> = u_xlat6;
  u_xlat23 = ((vec3<f32>(x_388.x, x_388.y, x_388.z) * vec3<f32>(x_390, x_390, x_390)) + vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_396 : vec3<f32> = u_xlat23;
  let x_397 : vec4<f32> = u_xlat4;
  u_xlat23 = (x_396 + vec3<f32>(x_397.x, x_397.y, x_397.z));
  let x_400 : vec3<f32> = u_xlat23;
  u_xlat23 = max(x_400, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_404 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_405 : vec2<f32> = vec2<f32>(x_404.x, x_404.y);
  let x_409 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_405.x, x_405.y));
  let x_410 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_409.x, x_409.y, x_410.z, x_410.w);
  let x_412 : vec4<f32> = u_xlat4;
  let x_414 : vec4<f32> = hlslcc_FragCoord;
  let x_416 : vec2<f32> = (vec2<f32>(x_412.x, x_412.y) * vec2<f32>(x_414.x, x_414.y));
  let x_417 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_416.x, x_416.y, x_417.z, x_417.w);
  let x_420 : f32 = u_xlat4.y;
  let x_423 : f32 = x_44.x_ScaleBiasRt.x;
  let x_426 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat62 = ((x_420 * x_423) + x_426);
  let x_428 : f32 = u_xlat62;
  u_xlat4.z = (-(x_428) + 1.0f);
  let x_433 : f32 = u_xlat1.x;
  u_xlat62 = ((-(x_433) * 0.959999979f) + 0.959999979f);
  let x_439 : f32 = u_xlat62;
  u_xlat24 = (-(x_439) + 1.0f);
  let x_442 : vec4<f32> = u_xlat0;
  let x_444 : f32 = u_xlat62;
  let x_446 : vec3<f32> = (vec3<f32>(x_442.x, x_442.y, x_442.z) * vec3<f32>(x_444, x_444, x_444));
  let x_447 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_446.z, x_447.w);
  let x_449 : vec4<f32> = u_xlat0;
  let x_453 : vec3<f32> = (vec3<f32>(x_449.x, x_449.y, x_449.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_454 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_453.x, x_453.y, x_453.z, x_454.w);
  let x_456 : vec4<f32> = u_xlat1;
  let x_458 : vec4<f32> = u_xlat0;
  let x_463 : vec3<f32> = ((vec3<f32>(x_456.x, x_456.x, x_456.x) * vec3<f32>(x_458.x, x_458.y, x_458.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_464 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
  let x_467 : f32 = u_xlat0.w;
  u_xlat1.x = (-(x_467) + 1.0f);
  let x_472 : f32 = u_xlat1.x;
  let x_474 : f32 = u_xlat1.x;
  u_xlat62 = (x_472 * x_474);
  let x_476 : f32 = u_xlat62;
  u_xlat62 = max(x_476, 0.0078125f);
  let x_480 : f32 = u_xlat62;
  let x_481 : f32 = u_xlat62;
  u_xlat64 = (x_480 * x_481);
  let x_485 : f32 = u_xlat0.w;
  let x_486 : f32 = u_xlat24;
  u_xlat60 = (x_485 + x_486);
  let x_488 : f32 = u_xlat60;
  u_xlat60 = clamp(x_488, 0.0f, 1.0f);
  let x_490 : f32 = u_xlat62;
  u_xlat24 = ((x_490 * 4.0f) + 2.0f);
  let x_498 : vec4<f32> = u_xlat4;
  let x_501 : f32 = x_44.x_GlobalMipBias.x;
  let x_502 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_498.x, x_498.z), x_501);
  u_xlat4.x = x_502.x;
  let x_507 : f32 = u_xlat4.x;
  u_xlat44 = (x_507 + -1.0f);
  let x_510 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_511 : f32 = u_xlat44;
  u_xlat44 = ((x_510 * x_511) + 1.0f);
  let x_515 : f32 = u_xlat4.x;
  u_xlat4.x = min(x_515, 1.0f);
  let x_520 : f32 = x_94.x_MainLightShadowParams.y;
  u_xlatb65 = (0.0f < x_520);
  let x_522 : bool = u_xlatb65;
  if (x_522) {
    let x_526 : f32 = x_94.x_MainLightShadowParams.y;
    u_xlatb65 = (x_526 == 1.0f);
    let x_528 : bool = u_xlatb65;
    if (x_528) {
      let x_531 : vec3<f32> = u_xlat21;
      let x_535 : vec4<f32> = x_94.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_531.x, x_531.y, x_531.x, x_531.y) + x_535);
      let x_538 : vec4<f32> = u_xlat6;
      let x_539 : vec2<f32> = vec2<f32>(x_538.x, x_538.y);
      let x_541 : f32 = u_xlat21.z;
      txVec0 = vec3<f32>(x_539.x, x_539.y, x_541);
      let x_554 : vec3<f32> = txVec0;
      let x_556 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_554.xy, x_554.z);
      u_xlat7.x = x_556;
      let x_559 : vec4<f32> = u_xlat6;
      let x_560 : vec2<f32> = vec2<f32>(x_559.z, x_559.w);
      let x_562 : f32 = u_xlat21.z;
      txVec1 = vec3<f32>(x_560.x, x_560.y, x_562);
      let x_569 : vec3<f32> = txVec1;
      let x_571 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_569.xy, x_569.z);
      u_xlat7.y = x_571;
      let x_573 : vec3<f32> = u_xlat21;
      let x_576 : vec4<f32> = x_94.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_573.x, x_573.y, x_573.x, x_573.y) + x_576);
      let x_579 : vec4<f32> = u_xlat6;
      let x_580 : vec2<f32> = vec2<f32>(x_579.x, x_579.y);
      let x_582 : f32 = u_xlat21.z;
      txVec2 = vec3<f32>(x_580.x, x_580.y, x_582);
      let x_589 : vec3<f32> = txVec2;
      let x_591 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_589.xy, x_589.z);
      u_xlat7.z = x_591;
      let x_594 : vec4<f32> = u_xlat6;
      let x_595 : vec2<f32> = vec2<f32>(x_594.z, x_594.w);
      let x_597 : f32 = u_xlat21.z;
      txVec3 = vec3<f32>(x_595.x, x_595.y, x_597);
      let x_604 : vec3<f32> = txVec3;
      let x_606 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_604.xy, x_604.z);
      u_xlat7.w = x_606;
      let x_609 : vec4<f32> = u_xlat7;
      u_xlat65 = dot(x_609, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_616 : f32 = x_94.x_MainLightShadowParams.y;
      u_xlatb6 = (x_616 == 2.0f);
      let x_618 : bool = u_xlatb6;
      if (x_618) {
        let x_621 : vec3<f32> = u_xlat21;
        let x_624 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_629 : vec2<f32> = ((vec2<f32>(x_621.x, x_621.y) * vec2<f32>(x_624.z, x_624.w)) + vec2<f32>(0.5f, 0.5f));
        let x_630 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_629.x, x_629.y, x_630.z, x_630.w);
        let x_632 : vec4<f32> = u_xlat6;
        let x_634 : vec2<f32> = floor(vec2<f32>(x_632.x, x_632.y));
        let x_635 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_639 : vec3<f32> = u_xlat21;
        let x_642 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_645 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_639.x, x_639.y) * vec2<f32>(x_642.z, x_642.w)) + -(vec2<f32>(x_645.x, x_645.y)));
        let x_649 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_649.x, x_649.x, x_649.y, x_649.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_654 : vec4<f32> = u_xlat7;
        let x_656 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_654.x, x_654.x, x_654.z, x_654.z) * vec4<f32>(x_656.x, x_656.x, x_656.z, x_656.z));
        let x_659 : vec4<f32> = u_xlat8;
        let x_663 : vec2<f32> = (vec2<f32>(x_659.y, x_659.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_664 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_663.x, x_664.y, x_663.y, x_664.w);
        let x_666 : vec4<f32> = u_xlat8;
        let x_669 : vec2<f32> = u_xlat46;
        let x_671 : vec2<f32> = ((vec2<f32>(x_666.x, x_666.z) * vec2<f32>(0.5f, 0.5f)) + -(x_669));
        let x_672 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_671.x, x_671.y, x_672.z, x_672.w);
        let x_675 : vec2<f32> = u_xlat46;
        u_xlat48 = (-(x_675) + vec2<f32>(1.0f, 1.0f));
        let x_679 : vec2<f32> = u_xlat46;
        let x_681 : vec2<f32> = min(x_679, vec2<f32>(0.0f, 0.0f));
        let x_682 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_681.x, x_681.y, x_682.z, x_682.w);
        let x_684 : vec4<f32> = u_xlat9;
        let x_687 : vec4<f32> = u_xlat9;
        let x_690 : vec2<f32> = u_xlat48;
        let x_691 : vec2<f32> = ((-(vec2<f32>(x_684.x, x_684.y)) * vec2<f32>(x_687.x, x_687.y)) + x_690);
        let x_692 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_691.x, x_691.y, x_692.z, x_692.w);
        let x_694 : vec2<f32> = u_xlat46;
        u_xlat46 = max(x_694, vec2<f32>(0.0f, 0.0f));
        let x_696 : vec2<f32> = u_xlat46;
        let x_698 : vec2<f32> = u_xlat46;
        let x_700 : vec4<f32> = u_xlat7;
        u_xlat46 = ((-(x_696) * x_698) + vec2<f32>(x_700.y, x_700.w));
        let x_703 : vec4<f32> = u_xlat9;
        let x_705 : vec2<f32> = (vec2<f32>(x_703.x, x_703.y) + vec2<f32>(1.0f, 1.0f));
        let x_706 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_705.x, x_705.y, x_706.z, x_706.w);
        let x_708 : vec2<f32> = u_xlat46;
        u_xlat46 = (x_708 + vec2<f32>(1.0f, 1.0f));
        let x_711 : vec4<f32> = u_xlat8;
        let x_715 : vec2<f32> = (vec2<f32>(x_711.x, x_711.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_716 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_715.x, x_715.y, x_716.z, x_716.w);
        let x_718 : vec2<f32> = u_xlat48;
        let x_719 : vec2<f32> = (x_718 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_720 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_719.x, x_719.y, x_720.z, x_720.w);
        let x_722 : vec4<f32> = u_xlat9;
        let x_724 : vec2<f32> = (vec2<f32>(x_722.x, x_722.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_725 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_724.x, x_724.y, x_725.z, x_725.w);
        let x_728 : vec2<f32> = u_xlat46;
        let x_729 : vec2<f32> = (x_728 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_730 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_729.x, x_729.y, x_730.z, x_730.w);
        let x_732 : vec4<f32> = u_xlat7;
        u_xlat46 = (vec2<f32>(x_732.y, x_732.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_736 : f32 = u_xlat9.x;
        u_xlat10.z = x_736;
        let x_739 : f32 = u_xlat46.x;
        u_xlat10.w = x_739;
        let x_742 : f32 = u_xlat11.x;
        u_xlat8.z = x_742;
        let x_745 : f32 = u_xlat7.x;
        u_xlat8.w = x_745;
        let x_748 : vec4<f32> = u_xlat8;
        let x_750 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_748.z, x_748.w, x_748.x, x_748.z) + vec4<f32>(x_750.z, x_750.w, x_750.x, x_750.z));
        let x_754 : f32 = u_xlat10.y;
        u_xlat9.z = x_754;
        let x_757 : f32 = u_xlat46.y;
        u_xlat9.w = x_757;
        let x_760 : f32 = u_xlat8.y;
        u_xlat11.z = x_760;
        let x_763 : f32 = u_xlat7.z;
        u_xlat11.w = x_763;
        let x_765 : vec4<f32> = u_xlat9;
        let x_767 : vec4<f32> = u_xlat11;
        let x_769 : vec3<f32> = (vec3<f32>(x_765.z, x_765.y, x_765.w) + vec3<f32>(x_767.z, x_767.y, x_767.w));
        let x_770 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_769.x, x_769.y, x_769.z, x_770.w);
        let x_772 : vec4<f32> = u_xlat8;
        let x_774 : vec4<f32> = u_xlat12;
        let x_776 : vec3<f32> = (vec3<f32>(x_772.x, x_772.z, x_772.w) / vec3<f32>(x_774.z, x_774.w, x_774.y));
        let x_777 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_776.x, x_776.y, x_776.z, x_777.w);
        let x_779 : vec4<f32> = u_xlat8;
        let x_785 : vec3<f32> = (vec3<f32>(x_779.x, x_779.y, x_779.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_786 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_785.x, x_785.y, x_785.z, x_786.w);
        let x_788 : vec4<f32> = u_xlat11;
        let x_790 : vec4<f32> = u_xlat7;
        let x_792 : vec3<f32> = (vec3<f32>(x_788.z, x_788.y, x_788.w) / vec3<f32>(x_790.x, x_790.y, x_790.z));
        let x_793 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_792.x, x_792.y, x_792.z, x_793.w);
        let x_795 : vec4<f32> = u_xlat9;
        let x_797 : vec3<f32> = (vec3<f32>(x_795.x, x_795.y, x_795.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_798 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_797.x, x_797.y, x_797.z, x_798.w);
        let x_800 : vec4<f32> = u_xlat8;
        let x_803 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_805 : vec3<f32> = (vec3<f32>(x_800.y, x_800.x, x_800.z) * vec3<f32>(x_803.x, x_803.x, x_803.x));
        let x_806 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_805.x, x_805.y, x_805.z, x_806.w);
        let x_808 : vec4<f32> = u_xlat9;
        let x_811 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_813 : vec3<f32> = (vec3<f32>(x_808.x, x_808.y, x_808.z) * vec3<f32>(x_811.y, x_811.y, x_811.y));
        let x_814 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_813.x, x_813.y, x_813.z, x_814.w);
        let x_817 : f32 = u_xlat9.x;
        u_xlat8.w = x_817;
        let x_819 : vec4<f32> = u_xlat6;
        let x_822 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_825 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_819.x, x_819.y, x_819.x, x_819.y) * vec4<f32>(x_822.x, x_822.y, x_822.x, x_822.y)) + vec4<f32>(x_825.y, x_825.w, x_825.x, x_825.w));
        let x_828 : vec4<f32> = u_xlat6;
        let x_831 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_834 : vec4<f32> = u_xlat8;
        u_xlat46 = ((vec2<f32>(x_828.x, x_828.y) * vec2<f32>(x_831.x, x_831.y)) + vec2<f32>(x_834.z, x_834.w));
        let x_838 : f32 = u_xlat8.y;
        u_xlat9.w = x_838;
        let x_840 : vec4<f32> = u_xlat9;
        let x_841 : vec2<f32> = vec2<f32>(x_840.y, x_840.z);
        let x_842 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_842.x, x_841.x, x_842.z, x_841.y);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_850 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_844.x, x_844.y, x_844.x, x_844.y) * vec4<f32>(x_847.x, x_847.y, x_847.x, x_847.y)) + vec4<f32>(x_850.x, x_850.y, x_850.z, x_850.y));
        let x_853 : vec4<f32> = u_xlat6;
        let x_856 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_859 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_853.x, x_853.y, x_853.x, x_853.y) * vec4<f32>(x_856.x, x_856.y, x_856.x, x_856.y)) + vec4<f32>(x_859.w, x_859.y, x_859.w, x_859.z));
        let x_862 : vec4<f32> = u_xlat6;
        let x_865 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_868 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_862.x, x_862.y, x_862.x, x_862.y) * vec4<f32>(x_865.x, x_865.y, x_865.x, x_865.y)) + vec4<f32>(x_868.x, x_868.w, x_868.z, x_868.w));
        let x_872 : vec4<f32> = u_xlat7;
        let x_874 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_872.x, x_872.x, x_872.x, x_872.y) * vec4<f32>(x_874.z, x_874.w, x_874.y, x_874.z));
        let x_878 : vec4<f32> = u_xlat7;
        let x_880 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_878.y, x_878.y, x_878.z, x_878.z) * x_880);
        let x_883 : f32 = u_xlat7.z;
        let x_885 : f32 = u_xlat12.y;
        u_xlat6.x = (x_883 * x_885);
        let x_889 : vec4<f32> = u_xlat10;
        let x_890 : vec2<f32> = vec2<f32>(x_889.x, x_889.y);
        let x_892 : f32 = u_xlat21.z;
        txVec4 = vec3<f32>(x_890.x, x_890.y, x_892);
        let x_900 : vec3<f32> = txVec4;
        let x_902 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_900.xy, x_900.z);
        u_xlat26 = x_902;
        let x_904 : vec4<f32> = u_xlat10;
        let x_905 : vec2<f32> = vec2<f32>(x_904.z, x_904.w);
        let x_907 : f32 = u_xlat21.z;
        txVec5 = vec3<f32>(x_905.x, x_905.y, x_907);
        let x_914 : vec3<f32> = txVec5;
        let x_916 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_914.xy, x_914.z);
        u_xlat7.x = x_916;
        let x_919 : f32 = u_xlat7.x;
        let x_921 : f32 = u_xlat13.y;
        u_xlat7.x = (x_919 * x_921);
        let x_925 : f32 = u_xlat13.x;
        let x_926 : f32 = u_xlat26;
        let x_929 : f32 = u_xlat7.x;
        u_xlat26 = ((x_925 * x_926) + x_929);
        let x_932 : vec2<f32> = u_xlat46;
        let x_934 : f32 = u_xlat21.z;
        txVec6 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec6;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_941.xy, x_941.z);
        u_xlat46.x = x_943;
        let x_946 : f32 = u_xlat13.z;
        let x_948 : f32 = u_xlat46.x;
        let x_950 : f32 = u_xlat26;
        u_xlat26 = ((x_946 * x_948) + x_950);
        let x_953 : vec4<f32> = u_xlat9;
        let x_954 : vec2<f32> = vec2<f32>(x_953.x, x_953.y);
        let x_956 : f32 = u_xlat21.z;
        txVec7 = vec3<f32>(x_954.x, x_954.y, x_956);
        let x_963 : vec3<f32> = txVec7;
        let x_965 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_963.xy, x_963.z);
        u_xlat46.x = x_965;
        let x_968 : f32 = u_xlat13.w;
        let x_970 : f32 = u_xlat46.x;
        let x_972 : f32 = u_xlat26;
        u_xlat26 = ((x_968 * x_970) + x_972);
        let x_975 : vec4<f32> = u_xlat11;
        let x_976 : vec2<f32> = vec2<f32>(x_975.x, x_975.y);
        let x_978 : f32 = u_xlat21.z;
        txVec8 = vec3<f32>(x_976.x, x_976.y, x_978);
        let x_985 : vec3<f32> = txVec8;
        let x_987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_985.xy, x_985.z);
        u_xlat46.x = x_987;
        let x_990 : f32 = u_xlat14.x;
        let x_992 : f32 = u_xlat46.x;
        let x_994 : f32 = u_xlat26;
        u_xlat26 = ((x_990 * x_992) + x_994);
        let x_997 : vec4<f32> = u_xlat11;
        let x_998 : vec2<f32> = vec2<f32>(x_997.z, x_997.w);
        let x_1000 : f32 = u_xlat21.z;
        txVec9 = vec3<f32>(x_998.x, x_998.y, x_1000);
        let x_1007 : vec3<f32> = txVec9;
        let x_1009 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1007.xy, x_1007.z);
        u_xlat46.x = x_1009;
        let x_1012 : f32 = u_xlat14.y;
        let x_1014 : f32 = u_xlat46.x;
        let x_1016 : f32 = u_xlat26;
        u_xlat26 = ((x_1012 * x_1014) + x_1016);
        let x_1019 : vec4<f32> = u_xlat9;
        let x_1020 : vec2<f32> = vec2<f32>(x_1019.z, x_1019.w);
        let x_1022 : f32 = u_xlat21.z;
        txVec10 = vec3<f32>(x_1020.x, x_1020.y, x_1022);
        let x_1029 : vec3<f32> = txVec10;
        let x_1031 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1029.xy, x_1029.z);
        u_xlat46.x = x_1031;
        let x_1034 : f32 = u_xlat14.z;
        let x_1036 : f32 = u_xlat46.x;
        let x_1038 : f32 = u_xlat26;
        u_xlat26 = ((x_1034 * x_1036) + x_1038);
        let x_1041 : vec4<f32> = u_xlat8;
        let x_1042 : vec2<f32> = vec2<f32>(x_1041.x, x_1041.y);
        let x_1044 : f32 = u_xlat21.z;
        txVec11 = vec3<f32>(x_1042.x, x_1042.y, x_1044);
        let x_1051 : vec3<f32> = txVec11;
        let x_1053 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1051.xy, x_1051.z);
        u_xlat46.x = x_1053;
        let x_1056 : f32 = u_xlat14.w;
        let x_1058 : f32 = u_xlat46.x;
        let x_1060 : f32 = u_xlat26;
        u_xlat26 = ((x_1056 * x_1058) + x_1060);
        let x_1063 : vec4<f32> = u_xlat8;
        let x_1064 : vec2<f32> = vec2<f32>(x_1063.z, x_1063.w);
        let x_1066 : f32 = u_xlat21.z;
        txVec12 = vec3<f32>(x_1064.x, x_1064.y, x_1066);
        let x_1073 : vec3<f32> = txVec12;
        let x_1075 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1073.xy, x_1073.z);
        u_xlat46.x = x_1075;
        let x_1078 : f32 = u_xlat6.x;
        let x_1080 : f32 = u_xlat46.x;
        let x_1082 : f32 = u_xlat26;
        u_xlat65 = ((x_1078 * x_1080) + x_1082);
      } else {
        let x_1085 : vec3<f32> = u_xlat21;
        let x_1088 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1091 : vec2<f32> = ((vec2<f32>(x_1085.x, x_1085.y) * vec2<f32>(x_1088.z, x_1088.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1092 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1091.x, x_1091.y, x_1092.z, x_1092.w);
        let x_1094 : vec4<f32> = u_xlat6;
        let x_1096 : vec2<f32> = floor(vec2<f32>(x_1094.x, x_1094.y));
        let x_1097 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1096.x, x_1096.y, x_1097.z, x_1097.w);
        let x_1099 : vec3<f32> = u_xlat21;
        let x_1102 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1105 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_1099.x, x_1099.y) * vec2<f32>(x_1102.z, x_1102.w)) + -(vec2<f32>(x_1105.x, x_1105.y)));
        let x_1109 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_1109.x, x_1109.x, x_1109.y, x_1109.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1112 : vec4<f32> = u_xlat7;
        let x_1114 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1112.x, x_1112.x, x_1112.z, x_1112.z) * vec4<f32>(x_1114.x, x_1114.x, x_1114.z, x_1114.z));
        let x_1117 : vec4<f32> = u_xlat8;
        let x_1121 : vec2<f32> = (vec2<f32>(x_1117.y, x_1117.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1122 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1122.x, x_1121.x, x_1122.z, x_1121.y);
        let x_1124 : vec4<f32> = u_xlat8;
        let x_1127 : vec2<f32> = u_xlat46;
        let x_1129 : vec2<f32> = ((vec2<f32>(x_1124.x, x_1124.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1127));
        let x_1130 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1129.x, x_1130.y, x_1129.y, x_1130.w);
        let x_1132 : vec2<f32> = u_xlat46;
        let x_1134 : vec2<f32> = (-(x_1132) + vec2<f32>(1.0f, 1.0f));
        let x_1135 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1134.x, x_1134.y, x_1135.z, x_1135.w);
        let x_1137 : vec2<f32> = u_xlat46;
        u_xlat48 = min(x_1137, vec2<f32>(0.0f, 0.0f));
        let x_1139 : vec2<f32> = u_xlat48;
        let x_1141 : vec2<f32> = u_xlat48;
        let x_1143 : vec4<f32> = u_xlat8;
        let x_1145 : vec2<f32> = ((-(x_1139) * x_1141) + vec2<f32>(x_1143.x, x_1143.y));
        let x_1146 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1145.x, x_1145.y, x_1146.z, x_1146.w);
        let x_1148 : vec2<f32> = u_xlat46;
        u_xlat48 = max(x_1148, vec2<f32>(0.0f, 0.0f));
        let x_1151 : vec2<f32> = u_xlat48;
        let x_1153 : vec2<f32> = u_xlat48;
        let x_1155 : vec4<f32> = u_xlat7;
        let x_1157 : vec2<f32> = ((-(x_1151) * x_1153) + vec2<f32>(x_1155.y, x_1155.w));
        let x_1158 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_1157.x, x_1158.y, x_1157.y);
        let x_1160 : vec4<f32> = u_xlat8;
        let x_1163 : vec2<f32> = (vec2<f32>(x_1160.x, x_1160.y) + vec2<f32>(2.0f, 2.0f));
        let x_1164 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1163.x, x_1163.y, x_1164.z, x_1164.w);
        let x_1166 : vec3<f32> = u_xlat27;
        let x_1168 : vec2<f32> = (vec2<f32>(x_1166.x, x_1166.z) + vec2<f32>(2.0f, 2.0f));
        let x_1169 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1169.x, x_1168.x, x_1169.z, x_1168.y);
        let x_1172 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1172 * 0.081632003f);
        let x_1176 : vec4<f32> = u_xlat7;
        let x_1179 : vec3<f32> = (vec3<f32>(x_1176.z, x_1176.x, x_1176.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1180 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1179.x, x_1179.y, x_1179.z, x_1180.w);
        let x_1182 : vec4<f32> = u_xlat8;
        let x_1185 : vec2<f32> = (vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1186 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1185.x, x_1185.y, x_1186.z, x_1186.w);
        let x_1189 : f32 = u_xlat11.y;
        u_xlat10.x = x_1189;
        let x_1191 : vec2<f32> = u_xlat46;
        let x_1198 : vec2<f32> = ((vec2<f32>(x_1191.x, x_1191.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1199 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1199.x, x_1198.x, x_1199.z, x_1198.y);
        let x_1201 : vec2<f32> = u_xlat46;
        let x_1205 : vec2<f32> = ((vec2<f32>(x_1201.x, x_1201.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1206 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1205.x, x_1206.y, x_1205.y, x_1206.w);
        let x_1209 : f32 = u_xlat7.x;
        u_xlat8.y = x_1209;
        let x_1212 : f32 = u_xlat9.y;
        u_xlat8.w = x_1212;
        let x_1214 : vec4<f32> = u_xlat8;
        let x_1215 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1214 + x_1215);
        let x_1217 : vec2<f32> = u_xlat46;
        let x_1220 : vec2<f32> = ((vec2<f32>(x_1217.y, x_1217.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1221 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1221.x, x_1220.x, x_1221.z, x_1220.y);
        let x_1223 : vec2<f32> = u_xlat46;
        let x_1226 : vec2<f32> = ((vec2<f32>(x_1223.y, x_1223.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1227 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1226.x, x_1227.y, x_1226.y, x_1227.w);
        let x_1230 : f32 = u_xlat7.y;
        u_xlat9.y = x_1230;
        let x_1232 : vec4<f32> = u_xlat9;
        let x_1233 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1232 + x_1233);
        let x_1235 : vec4<f32> = u_xlat8;
        let x_1236 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1235 / x_1236);
        let x_1238 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1238 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1244 : vec4<f32> = u_xlat9;
        let x_1245 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1244 / x_1245);
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1247 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1249 : vec4<f32> = u_xlat8;
        let x_1252 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1249.w, x_1249.x, x_1249.y, x_1249.z) * vec4<f32>(x_1252.x, x_1252.x, x_1252.x, x_1252.x));
        let x_1255 : vec4<f32> = u_xlat9;
        let x_1258 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1255.x, x_1255.w, x_1255.y, x_1255.z) * vec4<f32>(x_1258.y, x_1258.y, x_1258.y, x_1258.y));
        let x_1261 : vec4<f32> = u_xlat8;
        let x_1262 : vec3<f32> = vec3<f32>(x_1261.y, x_1261.z, x_1261.w);
        let x_1263 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1262.x, x_1263.y, x_1262.y, x_1262.z);
        let x_1266 : f32 = u_xlat9.x;
        u_xlat11.y = x_1266;
        let x_1268 : vec4<f32> = u_xlat6;
        let x_1271 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1274 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1268.x, x_1268.y, x_1268.x, x_1268.y) * vec4<f32>(x_1271.x, x_1271.y, x_1271.x, x_1271.y)) + vec4<f32>(x_1274.x, x_1274.y, x_1274.z, x_1274.y));
        let x_1277 : vec4<f32> = u_xlat6;
        let x_1280 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1283 : vec4<f32> = u_xlat11;
        u_xlat46 = ((vec2<f32>(x_1277.x, x_1277.y) * vec2<f32>(x_1280.x, x_1280.y)) + vec2<f32>(x_1283.w, x_1283.y));
        let x_1287 : f32 = u_xlat11.y;
        u_xlat8.y = x_1287;
        let x_1290 : f32 = u_xlat9.z;
        u_xlat11.y = x_1290;
        let x_1292 : vec4<f32> = u_xlat6;
        let x_1295 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1298 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1292.x, x_1292.y, x_1292.x, x_1292.y) * vec4<f32>(x_1295.x, x_1295.y, x_1295.x, x_1295.y)) + vec4<f32>(x_1298.x, x_1298.y, x_1298.z, x_1298.y));
        let x_1301 : vec4<f32> = u_xlat6;
        let x_1304 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1307 : vec4<f32> = u_xlat11;
        let x_1309 : vec2<f32> = ((vec2<f32>(x_1301.x, x_1301.y) * vec2<f32>(x_1304.x, x_1304.y)) + vec2<f32>(x_1307.w, x_1307.y));
        let x_1310 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1309.x, x_1309.y, x_1310.z, x_1310.w);
        let x_1313 : f32 = u_xlat11.y;
        u_xlat8.z = x_1313;
        let x_1316 : vec4<f32> = u_xlat6;
        let x_1319 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1322 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1316.x, x_1316.y, x_1316.x, x_1316.y) * vec4<f32>(x_1319.x, x_1319.y, x_1319.x, x_1319.y)) + vec4<f32>(x_1322.x, x_1322.y, x_1322.x, x_1322.z));
        let x_1326 : f32 = u_xlat9.w;
        u_xlat11.y = x_1326;
        let x_1329 : vec4<f32> = u_xlat6;
        let x_1332 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1335 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1329.x, x_1329.y, x_1329.x, x_1329.y) * vec4<f32>(x_1332.x, x_1332.y, x_1332.x, x_1332.y)) + vec4<f32>(x_1335.x, x_1335.y, x_1335.z, x_1335.y));
        let x_1339 : vec4<f32> = u_xlat6;
        let x_1342 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1345 : vec4<f32> = u_xlat11;
        u_xlat28 = ((vec2<f32>(x_1339.x, x_1339.y) * vec2<f32>(x_1342.x, x_1342.y)) + vec2<f32>(x_1345.w, x_1345.y));
        let x_1349 : f32 = u_xlat11.y;
        u_xlat8.w = x_1349;
        let x_1352 : vec4<f32> = u_xlat6;
        let x_1355 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1358 : vec4<f32> = u_xlat8;
        u_xlat54 = ((vec2<f32>(x_1352.x, x_1352.y) * vec2<f32>(x_1355.x, x_1355.y)) + vec2<f32>(x_1358.x, x_1358.w));
        let x_1361 : vec4<f32> = u_xlat11;
        let x_1362 : vec3<f32> = vec3<f32>(x_1361.x, x_1361.z, x_1361.w);
        let x_1363 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1362.x, x_1363.y, x_1362.y, x_1362.z);
        let x_1365 : vec4<f32> = u_xlat6;
        let x_1368 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1371 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1365.x, x_1365.y, x_1365.x, x_1365.y) * vec4<f32>(x_1368.x, x_1368.y, x_1368.x, x_1368.y)) + vec4<f32>(x_1371.x, x_1371.y, x_1371.z, x_1371.y));
        let x_1375 : vec4<f32> = u_xlat6;
        let x_1378 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1381 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1375.x, x_1375.y) * vec2<f32>(x_1378.x, x_1378.y)) + vec2<f32>(x_1381.w, x_1381.y));
        let x_1385 : f32 = u_xlat8.x;
        u_xlat9.x = x_1385;
        let x_1387 : vec4<f32> = u_xlat6;
        let x_1390 : vec4<f32> = x_94.x_MainLightShadowmapSize;
        let x_1393 : vec4<f32> = u_xlat9;
        let x_1395 : vec2<f32> = ((vec2<f32>(x_1387.x, x_1387.y) * vec2<f32>(x_1390.x, x_1390.y)) + vec2<f32>(x_1393.x, x_1393.y));
        let x_1396 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1395.x, x_1395.y, x_1396.z, x_1396.w);
        let x_1399 : vec4<f32> = u_xlat7;
        let x_1401 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1399.x, x_1399.x, x_1399.x, x_1399.x) * x_1401);
        let x_1404 : vec4<f32> = u_xlat7;
        let x_1406 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1404.y, x_1404.y, x_1404.y, x_1404.y) * x_1406);
        let x_1409 : vec4<f32> = u_xlat7;
        let x_1411 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1409.z, x_1409.z, x_1409.z, x_1409.z) * x_1411);
        let x_1413 : vec4<f32> = u_xlat7;
        let x_1415 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1413.w, x_1413.w, x_1413.w, x_1413.w) * x_1415);
        let x_1418 : vec4<f32> = u_xlat12;
        let x_1419 : vec2<f32> = vec2<f32>(x_1418.x, x_1418.y);
        let x_1421 : f32 = u_xlat21.z;
        txVec13 = vec3<f32>(x_1419.x, x_1419.y, x_1421);
        let x_1428 : vec3<f32> = txVec13;
        let x_1430 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1428.xy, x_1428.z);
        u_xlat8.x = x_1430;
        let x_1433 : vec4<f32> = u_xlat12;
        let x_1434 : vec2<f32> = vec2<f32>(x_1433.z, x_1433.w);
        let x_1436 : f32 = u_xlat21.z;
        txVec14 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
        let x_1444 : vec3<f32> = txVec14;
        let x_1446 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1444.xy, x_1444.z);
        u_xlat68 = x_1446;
        let x_1447 : f32 = u_xlat68;
        let x_1449 : f32 = u_xlat17.y;
        u_xlat68 = (x_1447 * x_1449);
        let x_1452 : f32 = u_xlat17.x;
        let x_1454 : f32 = u_xlat8.x;
        let x_1456 : f32 = u_xlat68;
        u_xlat8.x = ((x_1452 * x_1454) + x_1456);
        let x_1460 : vec2<f32> = u_xlat46;
        let x_1462 : f32 = u_xlat21.z;
        txVec15 = vec3<f32>(x_1460.x, x_1460.y, x_1462);
        let x_1469 : vec3<f32> = txVec15;
        let x_1471 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1469.xy, x_1469.z);
        u_xlat46.x = x_1471;
        let x_1474 : f32 = u_xlat17.z;
        let x_1476 : f32 = u_xlat46.x;
        let x_1479 : f32 = u_xlat8.x;
        u_xlat46.x = ((x_1474 * x_1476) + x_1479);
        let x_1483 : vec4<f32> = u_xlat15;
        let x_1484 : vec2<f32> = vec2<f32>(x_1483.x, x_1483.y);
        let x_1486 : f32 = u_xlat21.z;
        txVec16 = vec3<f32>(x_1484.x, x_1484.y, x_1486);
        let x_1494 : vec3<f32> = txVec16;
        let x_1496 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1494.xy, x_1494.z);
        u_xlat66 = x_1496;
        let x_1498 : f32 = u_xlat17.w;
        let x_1499 : f32 = u_xlat66;
        let x_1502 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1498 * x_1499) + x_1502);
        let x_1506 : vec4<f32> = u_xlat13;
        let x_1507 : vec2<f32> = vec2<f32>(x_1506.x, x_1506.y);
        let x_1509 : f32 = u_xlat21.z;
        txVec17 = vec3<f32>(x_1507.x, x_1507.y, x_1509);
        let x_1516 : vec3<f32> = txVec17;
        let x_1518 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1516.xy, x_1516.z);
        u_xlat66 = x_1518;
        let x_1520 : f32 = u_xlat18.x;
        let x_1521 : f32 = u_xlat66;
        let x_1524 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1520 * x_1521) + x_1524);
        let x_1528 : vec4<f32> = u_xlat13;
        let x_1529 : vec2<f32> = vec2<f32>(x_1528.z, x_1528.w);
        let x_1531 : f32 = u_xlat21.z;
        txVec18 = vec3<f32>(x_1529.x, x_1529.y, x_1531);
        let x_1538 : vec3<f32> = txVec18;
        let x_1540 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1538.xy, x_1538.z);
        u_xlat66 = x_1540;
        let x_1542 : f32 = u_xlat18.y;
        let x_1543 : f32 = u_xlat66;
        let x_1546 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1542 * x_1543) + x_1546);
        let x_1550 : vec4<f32> = u_xlat14;
        let x_1551 : vec2<f32> = vec2<f32>(x_1550.x, x_1550.y);
        let x_1553 : f32 = u_xlat21.z;
        txVec19 = vec3<f32>(x_1551.x, x_1551.y, x_1553);
        let x_1560 : vec3<f32> = txVec19;
        let x_1562 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1560.xy, x_1560.z);
        u_xlat66 = x_1562;
        let x_1564 : f32 = u_xlat18.z;
        let x_1565 : f32 = u_xlat66;
        let x_1568 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1564 * x_1565) + x_1568);
        let x_1572 : vec4<f32> = u_xlat15;
        let x_1573 : vec2<f32> = vec2<f32>(x_1572.z, x_1572.w);
        let x_1575 : f32 = u_xlat21.z;
        txVec20 = vec3<f32>(x_1573.x, x_1573.y, x_1575);
        let x_1582 : vec3<f32> = txVec20;
        let x_1584 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1582.xy, x_1582.z);
        u_xlat66 = x_1584;
        let x_1586 : f32 = u_xlat18.w;
        let x_1587 : f32 = u_xlat66;
        let x_1590 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1586 * x_1587) + x_1590);
        let x_1594 : vec4<f32> = u_xlat16;
        let x_1595 : vec2<f32> = vec2<f32>(x_1594.x, x_1594.y);
        let x_1597 : f32 = u_xlat21.z;
        txVec21 = vec3<f32>(x_1595.x, x_1595.y, x_1597);
        let x_1604 : vec3<f32> = txVec21;
        let x_1606 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1604.xy, x_1604.z);
        u_xlat66 = x_1606;
        let x_1608 : f32 = u_xlat19.x;
        let x_1609 : f32 = u_xlat66;
        let x_1612 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1608 * x_1609) + x_1612);
        let x_1616 : vec4<f32> = u_xlat16;
        let x_1617 : vec2<f32> = vec2<f32>(x_1616.z, x_1616.w);
        let x_1619 : f32 = u_xlat21.z;
        txVec22 = vec3<f32>(x_1617.x, x_1617.y, x_1619);
        let x_1626 : vec3<f32> = txVec22;
        let x_1628 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1626.xy, x_1626.z);
        u_xlat66 = x_1628;
        let x_1630 : f32 = u_xlat19.y;
        let x_1631 : f32 = u_xlat66;
        let x_1634 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1630 * x_1631) + x_1634);
        let x_1638 : vec2<f32> = u_xlat28;
        let x_1640 : f32 = u_xlat21.z;
        txVec23 = vec3<f32>(x_1638.x, x_1638.y, x_1640);
        let x_1647 : vec3<f32> = txVec23;
        let x_1649 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1647.xy, x_1647.z);
        u_xlat66 = x_1649;
        let x_1651 : f32 = u_xlat19.z;
        let x_1652 : f32 = u_xlat66;
        let x_1655 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1651 * x_1652) + x_1655);
        let x_1659 : vec2<f32> = u_xlat54;
        let x_1661 : f32 = u_xlat21.z;
        txVec24 = vec3<f32>(x_1659.x, x_1659.y, x_1661);
        let x_1668 : vec3<f32> = txVec24;
        let x_1670 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1668.xy, x_1668.z);
        u_xlat66 = x_1670;
        let x_1672 : f32 = u_xlat19.w;
        let x_1673 : f32 = u_xlat66;
        let x_1676 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1672 * x_1673) + x_1676);
        let x_1680 : vec4<f32> = u_xlat11;
        let x_1681 : vec2<f32> = vec2<f32>(x_1680.x, x_1680.y);
        let x_1683 : f32 = u_xlat21.z;
        txVec25 = vec3<f32>(x_1681.x, x_1681.y, x_1683);
        let x_1690 : vec3<f32> = txVec25;
        let x_1692 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1690.xy, x_1690.z);
        u_xlat66 = x_1692;
        let x_1694 : f32 = u_xlat7.x;
        let x_1695 : f32 = u_xlat66;
        let x_1698 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1694 * x_1695) + x_1698);
        let x_1702 : vec4<f32> = u_xlat11;
        let x_1703 : vec2<f32> = vec2<f32>(x_1702.z, x_1702.w);
        let x_1705 : f32 = u_xlat21.z;
        txVec26 = vec3<f32>(x_1703.x, x_1703.y, x_1705);
        let x_1712 : vec3<f32> = txVec26;
        let x_1714 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1712.xy, x_1712.z);
        u_xlat66 = x_1714;
        let x_1716 : f32 = u_xlat7.y;
        let x_1717 : f32 = u_xlat66;
        let x_1720 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1716 * x_1717) + x_1720);
        let x_1724 : vec2<f32> = u_xlat49;
        let x_1726 : f32 = u_xlat21.z;
        txVec27 = vec3<f32>(x_1724.x, x_1724.y, x_1726);
        let x_1733 : vec3<f32> = txVec27;
        let x_1735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1733.xy, x_1733.z);
        u_xlat66 = x_1735;
        let x_1737 : f32 = u_xlat7.z;
        let x_1738 : f32 = u_xlat66;
        let x_1741 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1737 * x_1738) + x_1741);
        let x_1745 : vec4<f32> = u_xlat6;
        let x_1746 : vec2<f32> = vec2<f32>(x_1745.x, x_1745.y);
        let x_1748 : f32 = u_xlat21.z;
        txVec28 = vec3<f32>(x_1746.x, x_1746.y, x_1748);
        let x_1755 : vec3<f32> = txVec28;
        let x_1757 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1755.xy, x_1755.z);
        u_xlat6.x = x_1757;
        let x_1760 : f32 = u_xlat7.w;
        let x_1762 : f32 = u_xlat6.x;
        let x_1765 : f32 = u_xlat46.x;
        u_xlat65 = ((x_1760 * x_1762) + x_1765);
      }
    }
  } else {
    let x_1769 : vec3<f32> = u_xlat21;
    let x_1770 : vec2<f32> = vec2<f32>(x_1769.x, x_1769.y);
    let x_1772 : f32 = u_xlat21.z;
    txVec29 = vec3<f32>(x_1770.x, x_1770.y, x_1772);
    let x_1779 : vec3<f32> = txVec29;
    let x_1781 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1779.xy, x_1779.z);
    u_xlat65 = x_1781;
  }
  let x_1783 : f32 = x_94.x_MainLightShadowParams.x;
  u_xlat21.x = (-(x_1783) + 1.0f);
  let x_1787 : f32 = u_xlat65;
  let x_1789 : f32 = x_94.x_MainLightShadowParams.x;
  let x_1792 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_1787 * x_1789) + x_1792);
  let x_1797 : f32 = u_xlat21.z;
  u_xlatb41 = (0.0f >= x_1797);
  let x_1801 : f32 = u_xlat21.z;
  u_xlatb61 = (x_1801 >= 1.0f);
  let x_1803 : bool = u_xlatb61;
  let x_1804 : bool = u_xlatb41;
  u_xlatb41 = (x_1803 | x_1804);
  let x_1806 : bool = u_xlatb41;
  if (x_1806) {
    x_1807 = 1.0f;
  } else {
    let x_1812 : f32 = u_xlat21.x;
    x_1807 = x_1812;
  }
  let x_1813 : f32 = x_1807;
  u_xlat21.x = x_1813;
  let x_1815 : vec3<f32> = vs_TEXCOORD7;
  let x_1818 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_1820 : vec3<f32> = (x_1815 + -(x_1818));
  let x_1821 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1820.x, x_1820.y, x_1820.z, x_1821.w);
  let x_1824 : vec4<f32> = u_xlat6;
  let x_1826 : vec4<f32> = u_xlat6;
  u_xlat41 = dot(vec3<f32>(x_1824.x, x_1824.y, x_1824.z), vec3<f32>(x_1826.x, x_1826.y, x_1826.z));
  let x_1829 : f32 = u_xlat41;
  let x_1831 : f32 = x_94.x_MainLightShadowParams.z;
  let x_1834 : f32 = x_94.x_MainLightShadowParams.w;
  u_xlat41 = ((x_1829 * x_1831) + x_1834);
  let x_1836 : f32 = u_xlat41;
  u_xlat41 = clamp(x_1836, 0.0f, 1.0f);
  let x_1840 : f32 = u_xlat21.x;
  u_xlat61 = (-(x_1840) + 1.0f);
  let x_1843 : f32 = u_xlat41;
  let x_1844 : f32 = u_xlat61;
  let x_1847 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_1843 * x_1844) + x_1847);
  let x_1850 : f32 = u_xlat44;
  let x_1853 : vec4<f32> = x_44.x_MainLightColor;
  let x_1855 : vec3<f32> = (vec3<f32>(x_1850, x_1850, x_1850) * vec3<f32>(x_1853.x, x_1853.y, x_1853.z));
  let x_1856 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1855.x, x_1855.y, x_1855.z, x_1856.w);
  let x_1859 : f32 = vs_TEXCOORD3.w;
  u_xlat7.x = x_1859;
  let x_1863 : f32 = vs_TEXCOORD4.w;
  u_xlat7.y = x_1863;
  let x_1867 : f32 = vs_TEXCOORD5.w;
  u_xlat7.z = x_1867;
  let x_1869 : vec4<f32> = u_xlat7;
  let x_1872 : vec4<f32> = u_xlat2;
  u_xlat41 = dot(-(vec3<f32>(x_1869.x, x_1869.y, x_1869.z)), vec3<f32>(x_1872.x, x_1872.y, x_1872.z));
  let x_1875 : f32 = u_xlat41;
  let x_1876 : f32 = u_xlat41;
  u_xlat41 = (x_1875 + x_1876);
  let x_1878 : vec4<f32> = u_xlat2;
  let x_1880 : f32 = u_xlat41;
  let x_1884 : vec4<f32> = u_xlat7;
  let x_1887 : vec3<f32> = ((vec3<f32>(x_1878.x, x_1878.y, x_1878.z) * -(vec3<f32>(x_1880, x_1880, x_1880))) + -(vec3<f32>(x_1884.x, x_1884.y, x_1884.z)));
  let x_1888 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1887.x, x_1887.y, x_1887.z, x_1888.w);
  let x_1890 : vec4<f32> = u_xlat2;
  let x_1892 : vec4<f32> = u_xlat7;
  u_xlat41 = dot(vec3<f32>(x_1890.x, x_1890.y, x_1890.z), vec3<f32>(x_1892.x, x_1892.y, x_1892.z));
  let x_1895 : f32 = u_xlat41;
  u_xlat41 = clamp(x_1895, 0.0f, 1.0f);
  let x_1897 : f32 = u_xlat41;
  u_xlat41 = (-(x_1897) + 1.0f);
  let x_1900 : f32 = u_xlat41;
  let x_1901 : f32 = u_xlat41;
  u_xlat1.z = (x_1900 * x_1901);
  let x_1905 : f32 = u_xlat1.x;
  u_xlat1.w = ((-(x_1905) * 0.699999988f) + 1.700000048f);
  let x_1912 : vec4<f32> = u_xlat1;
  let x_1914 : vec4<f32> = u_xlat1;
  let x_1916 : vec2<f32> = (vec2<f32>(x_1912.w, x_1912.z) * vec2<f32>(x_1914.x, x_1914.z));
  let x_1917 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1916.x, x_1917.y, x_1916.y, x_1917.w);
  let x_1920 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1920 * 6.0f);
  let x_1932 : vec4<f32> = u_xlat8;
  let x_1935 : f32 = u_xlat1.x;
  let x_1936 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1932.x, x_1932.y, x_1932.z), x_1935);
  u_xlat8 = x_1936;
  let x_1938 : f32 = u_xlat8.w;
  u_xlat1.x = (x_1938 + -1.0f);
  let x_1942 : f32 = x_329.unity_SpecCube0_HDR.w;
  let x_1944 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1942 * x_1944) + 1.0f);
  let x_1949 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1949, 0.0f);
  let x_1953 : f32 = u_xlat1.x;
  u_xlat1.x = log2(x_1953);
  let x_1957 : f32 = u_xlat1.x;
  let x_1959 : f32 = x_329.unity_SpecCube0_HDR.y;
  u_xlat1.x = (x_1957 * x_1959);
  let x_1963 : f32 = u_xlat1.x;
  u_xlat1.x = exp2(x_1963);
  let x_1967 : f32 = u_xlat1.x;
  let x_1969 : f32 = x_329.unity_SpecCube0_HDR.x;
  u_xlat1.x = (x_1967 * x_1969);
  let x_1972 : vec4<f32> = u_xlat8;
  let x_1974 : vec4<f32> = u_xlat1;
  let x_1976 : vec3<f32> = (vec3<f32>(x_1972.x, x_1972.y, x_1972.z) * vec3<f32>(x_1974.x, x_1974.x, x_1974.x));
  let x_1977 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1976.x, x_1976.y, x_1976.z, x_1977.w);
  let x_1979 : f32 = u_xlat62;
  let x_1981 : f32 = u_xlat62;
  let x_1985 : vec2<f32> = ((vec2<f32>(x_1979, x_1979) * vec2<f32>(x_1981, x_1981)) + vec2<f32>(-1.0f, 1.0f));
  let x_1986 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1985.x, x_1986.y, x_1986.z, x_1985.y);
  let x_1989 : f32 = u_xlat1.w;
  u_xlat61 = (1.0f / x_1989);
  let x_1991 : vec4<f32> = u_xlat0;
  let x_1994 : f32 = u_xlat60;
  let x_1996 : vec3<f32> = (-(vec3<f32>(x_1991.x, x_1991.y, x_1991.z)) + vec3<f32>(x_1994, x_1994, x_1994));
  let x_1997 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1997.w);
  let x_1999 : vec4<f32> = u_xlat1;
  let x_2001 : vec4<f32> = u_xlat9;
  let x_2004 : vec4<f32> = u_xlat0;
  let x_2006 : vec3<f32> = ((vec3<f32>(x_1999.z, x_1999.z, x_1999.z) * vec3<f32>(x_2001.x, x_2001.y, x_2001.z)) + vec3<f32>(x_2004.x, x_2004.y, x_2004.z));
  let x_2007 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2006.x, x_2006.y, x_2006.z, x_2007.w);
  let x_2009 : f32 = u_xlat61;
  let x_2011 : vec4<f32> = u_xlat9;
  let x_2013 : vec3<f32> = (vec3<f32>(x_2009, x_2009, x_2009) * vec3<f32>(x_2011.x, x_2011.y, x_2011.z));
  let x_2014 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2013.x, x_2013.y, x_2013.z, x_2014.w);
  let x_2016 : vec4<f32> = u_xlat8;
  let x_2018 : vec4<f32> = u_xlat9;
  let x_2020 : vec3<f32> = (vec3<f32>(x_2016.x, x_2016.y, x_2016.z) * vec3<f32>(x_2018.x, x_2018.y, x_2018.z));
  let x_2021 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2020.x, x_2020.y, x_2020.z, x_2021.w);
  let x_2023 : vec3<f32> = u_xlat23;
  let x_2024 : vec4<f32> = u_xlat5;
  let x_2027 : vec4<f32> = u_xlat8;
  u_xlat23 = ((x_2023 * vec3<f32>(x_2024.x, x_2024.y, x_2024.z)) + vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
  let x_2031 : f32 = u_xlat21.x;
  let x_2033 : f32 = x_329.unity_LightData.z;
  u_xlat60 = (x_2031 * x_2033);
  let x_2035 : vec4<f32> = u_xlat2;
  let x_2038 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat21.x = dot(vec3<f32>(x_2035.x, x_2035.y, x_2035.z), vec3<f32>(x_2038.x, x_2038.y, x_2038.z));
  let x_2043 : f32 = u_xlat21.x;
  u_xlat21.x = clamp(x_2043, 0.0f, 1.0f);
  let x_2046 : f32 = u_xlat60;
  let x_2048 : f32 = u_xlat21.x;
  u_xlat60 = (x_2046 * x_2048);
  let x_2050 : f32 = u_xlat60;
  let x_2052 : vec4<f32> = u_xlat6;
  u_xlat21 = (vec3<f32>(x_2050, x_2050, x_2050) * vec3<f32>(x_2052.x, x_2052.y, x_2052.z));
  let x_2055 : vec4<f32> = u_xlat7;
  let x_2058 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2060 : vec3<f32> = (vec3<f32>(x_2055.x, x_2055.y, x_2055.z) + vec3<f32>(x_2058.x, x_2058.y, x_2058.z));
  let x_2061 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2060.x, x_2060.y, x_2060.z, x_2061.w);
  let x_2063 : vec4<f32> = u_xlat6;
  let x_2065 : vec4<f32> = u_xlat6;
  u_xlat60 = dot(vec3<f32>(x_2063.x, x_2063.y, x_2063.z), vec3<f32>(x_2065.x, x_2065.y, x_2065.z));
  let x_2068 : f32 = u_xlat60;
  u_xlat60 = max(x_2068, 1.17549435e-37f);
  let x_2071 : f32 = u_xlat60;
  u_xlat60 = inverseSqrt(x_2071);
  let x_2073 : f32 = u_xlat60;
  let x_2075 : vec4<f32> = u_xlat6;
  let x_2077 : vec3<f32> = (vec3<f32>(x_2073, x_2073, x_2073) * vec3<f32>(x_2075.x, x_2075.y, x_2075.z));
  let x_2078 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2077.x, x_2077.y, x_2077.z, x_2078.w);
  let x_2080 : vec4<f32> = u_xlat2;
  let x_2082 : vec4<f32> = u_xlat6;
  u_xlat60 = dot(vec3<f32>(x_2080.x, x_2080.y, x_2080.z), vec3<f32>(x_2082.x, x_2082.y, x_2082.z));
  let x_2085 : f32 = u_xlat60;
  u_xlat60 = clamp(x_2085, 0.0f, 1.0f);
  let x_2088 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2090 : vec4<f32> = u_xlat6;
  u_xlat62 = dot(vec3<f32>(x_2088.x, x_2088.y, x_2088.z), vec3<f32>(x_2090.x, x_2090.y, x_2090.z));
  let x_2093 : f32 = u_xlat62;
  u_xlat62 = clamp(x_2093, 0.0f, 1.0f);
  let x_2095 : f32 = u_xlat60;
  let x_2096 : f32 = u_xlat60;
  u_xlat60 = (x_2095 * x_2096);
  let x_2098 : f32 = u_xlat60;
  let x_2100 : f32 = u_xlat1.x;
  u_xlat60 = ((x_2098 * x_2100) + 1.000010014f);
  let x_2104 : f32 = u_xlat62;
  let x_2105 : f32 = u_xlat62;
  u_xlat62 = (x_2104 * x_2105);
  let x_2107 : f32 = u_xlat60;
  let x_2108 : f32 = u_xlat60;
  u_xlat60 = (x_2107 * x_2108);
  let x_2110 : f32 = u_xlat62;
  u_xlat62 = max(x_2110, 0.100000001f);
  let x_2113 : f32 = u_xlat60;
  let x_2114 : f32 = u_xlat62;
  u_xlat60 = (x_2113 * x_2114);
  let x_2116 : f32 = u_xlat24;
  let x_2117 : f32 = u_xlat60;
  u_xlat60 = (x_2116 * x_2117);
  let x_2119 : f32 = u_xlat64;
  let x_2120 : f32 = u_xlat60;
  u_xlat60 = (x_2119 / x_2120);
  let x_2122 : vec4<f32> = u_xlat0;
  let x_2124 : f32 = u_xlat60;
  let x_2127 : vec4<f32> = u_xlat5;
  let x_2129 : vec3<f32> = ((vec3<f32>(x_2122.x, x_2122.y, x_2122.z) * vec3<f32>(x_2124, x_2124, x_2124)) + vec3<f32>(x_2127.x, x_2127.y, x_2127.z));
  let x_2130 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2129.x, x_2129.y, x_2129.z, x_2130.w);
  let x_2132 : vec3<f32> = u_xlat21;
  let x_2133 : vec4<f32> = u_xlat6;
  u_xlat21 = (x_2132 * vec3<f32>(x_2133.x, x_2133.y, x_2133.z));
  let x_2137 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2139 : f32 = x_329.unity_LightData.y;
  u_xlat60 = min(x_2137, x_2139);
  let x_2142 : f32 = u_xlat60;
  u_xlatu60 = bitcast<u32>(i32(x_2142));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2154 : u32 = u_xlatu_loop_1;
    let x_2155 : u32 = u_xlatu60;
    if ((x_2154 < x_2155)) {
    } else {
      break;
    }
    let x_2158 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_2158 >> 2u);
    let x_2161 : u32 = u_xlatu_loop_1;
    u_xlati66 = bitcast<i32>((x_2161 & 3u));
    let x_2164 : u32 = u_xlatu65;
    let x_2167 : vec4<f32> = x_329.unity_LightIndices[bitcast<i32>(x_2164)];
    let x_2177 : i32 = u_xlati66;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2182 : vec4<u32> = indexable[x_2177];
    u_xlat65 = dot(x_2167, bitcast<vec4<f32>>(x_2182));
    let x_2186 : f32 = u_xlat65;
    u_xlati65 = i32(x_2186);
    let x_2188 : vec3<f32> = vs_TEXCOORD7;
    let x_2200 : i32 = u_xlati65;
    let x_2202 : vec4<f32> = x_2199.x_AdditionalLightsPosition[x_2200];
    let x_2205 : i32 = u_xlati65;
    let x_2207 : vec4<f32> = x_2199.x_AdditionalLightsPosition[x_2205];
    let x_2209 : vec3<f32> = ((-(x_2188) * vec3<f32>(x_2202.w, x_2202.w, x_2202.w)) + vec3<f32>(x_2207.x, x_2207.y, x_2207.z));
    let x_2210 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2209.x, x_2209.y, x_2209.z, x_2210.w);
    let x_2212 : vec4<f32> = u_xlat8;
    let x_2214 : vec4<f32> = u_xlat8;
    u_xlat66 = dot(vec3<f32>(x_2212.x, x_2212.y, x_2212.z), vec3<f32>(x_2214.x, x_2214.y, x_2214.z));
    let x_2217 : f32 = u_xlat66;
    u_xlat66 = max(x_2217, 6.10351562e-05f);
    let x_2221 : f32 = u_xlat66;
    u_xlat67 = inverseSqrt(x_2221);
    let x_2223 : f32 = u_xlat67;
    let x_2225 : vec4<f32> = u_xlat8;
    let x_2227 : vec3<f32> = (vec3<f32>(x_2223, x_2223, x_2223) * vec3<f32>(x_2225.x, x_2225.y, x_2225.z));
    let x_2228 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2227.x, x_2227.y, x_2227.z, x_2228.w);
    let x_2230 : f32 = u_xlat66;
    u_xlat68 = (1.0f / x_2230);
    let x_2232 : f32 = u_xlat66;
    let x_2233 : i32 = u_xlati65;
    let x_2235 : f32 = x_2199.x_AdditionalLightsAttenuation[x_2233].x;
    u_xlat66 = (x_2232 * x_2235);
    let x_2237 : f32 = u_xlat66;
    let x_2239 : f32 = u_xlat66;
    u_xlat66 = ((-(x_2237) * x_2239) + 1.0f);
    let x_2242 : f32 = u_xlat66;
    u_xlat66 = max(x_2242, 0.0f);
    let x_2244 : f32 = u_xlat66;
    let x_2245 : f32 = u_xlat66;
    u_xlat66 = (x_2244 * x_2245);
    let x_2247 : f32 = u_xlat66;
    let x_2248 : f32 = u_xlat68;
    u_xlat66 = (x_2247 * x_2248);
    let x_2250 : i32 = u_xlati65;
    let x_2252 : vec4<f32> = x_2199.x_AdditionalLightsSpotDir[x_2250];
    let x_2254 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_2252.x, x_2252.y, x_2252.z), vec3<f32>(x_2254.x, x_2254.y, x_2254.z));
    let x_2257 : f32 = u_xlat68;
    let x_2258 : i32 = u_xlati65;
    let x_2260 : f32 = x_2199.x_AdditionalLightsAttenuation[x_2258].z;
    let x_2262 : i32 = u_xlati65;
    let x_2264 : f32 = x_2199.x_AdditionalLightsAttenuation[x_2262].w;
    u_xlat68 = ((x_2257 * x_2260) + x_2264);
    let x_2266 : f32 = u_xlat68;
    u_xlat68 = clamp(x_2266, 0.0f, 1.0f);
    let x_2268 : f32 = u_xlat68;
    let x_2269 : f32 = u_xlat68;
    u_xlat68 = (x_2268 * x_2269);
    let x_2271 : f32 = u_xlat66;
    let x_2272 : f32 = u_xlat68;
    u_xlat66 = (x_2271 * x_2272);
    let x_2274 : f32 = u_xlat44;
    let x_2276 : i32 = u_xlati65;
    let x_2278 : vec4<f32> = x_2199.x_AdditionalLightsColor[x_2276];
    let x_2280 : vec3<f32> = (vec3<f32>(x_2274, x_2274, x_2274) * vec3<f32>(x_2278.x, x_2278.y, x_2278.z));
    let x_2281 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2280.x, x_2280.y, x_2280.z, x_2281.w);
    let x_2283 : vec4<f32> = u_xlat2;
    let x_2285 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2283.x, x_2283.y, x_2283.z), vec3<f32>(x_2285.x, x_2285.y, x_2285.z));
    let x_2288 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2288, 0.0f, 1.0f);
    let x_2290 : f32 = u_xlat65;
    let x_2291 : f32 = u_xlat66;
    u_xlat65 = (x_2290 * x_2291);
    let x_2293 : f32 = u_xlat65;
    let x_2295 : vec4<f32> = u_xlat10;
    let x_2297 : vec3<f32> = (vec3<f32>(x_2293, x_2293, x_2293) * vec3<f32>(x_2295.x, x_2295.y, x_2295.z));
    let x_2298 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2297.x, x_2297.y, x_2297.z, x_2298.w);
    let x_2300 : vec4<f32> = u_xlat8;
    let x_2302 : f32 = u_xlat67;
    let x_2305 : vec4<f32> = u_xlat7;
    let x_2307 : vec3<f32> = ((vec3<f32>(x_2300.x, x_2300.y, x_2300.z) * vec3<f32>(x_2302, x_2302, x_2302)) + vec3<f32>(x_2305.x, x_2305.y, x_2305.z));
    let x_2308 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2307.x, x_2307.y, x_2307.z, x_2308.w);
    let x_2310 : vec4<f32> = u_xlat8;
    let x_2312 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(vec3<f32>(x_2310.x, x_2310.y, x_2310.z), vec3<f32>(x_2312.x, x_2312.y, x_2312.z));
    let x_2315 : f32 = u_xlat65;
    u_xlat65 = max(x_2315, 1.17549435e-37f);
    let x_2317 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_2317);
    let x_2319 : f32 = u_xlat65;
    let x_2321 : vec4<f32> = u_xlat8;
    let x_2323 : vec3<f32> = (vec3<f32>(x_2319, x_2319, x_2319) * vec3<f32>(x_2321.x, x_2321.y, x_2321.z));
    let x_2324 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2323.x, x_2323.y, x_2323.z, x_2324.w);
    let x_2326 : vec4<f32> = u_xlat2;
    let x_2328 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(vec3<f32>(x_2326.x, x_2326.y, x_2326.z), vec3<f32>(x_2328.x, x_2328.y, x_2328.z));
    let x_2331 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2331, 0.0f, 1.0f);
    let x_2333 : vec4<f32> = u_xlat9;
    let x_2335 : vec4<f32> = u_xlat8;
    u_xlat66 = dot(vec3<f32>(x_2333.x, x_2333.y, x_2333.z), vec3<f32>(x_2335.x, x_2335.y, x_2335.z));
    let x_2338 : f32 = u_xlat66;
    u_xlat66 = clamp(x_2338, 0.0f, 1.0f);
    let x_2340 : f32 = u_xlat65;
    let x_2341 : f32 = u_xlat65;
    u_xlat65 = (x_2340 * x_2341);
    let x_2343 : f32 = u_xlat65;
    let x_2345 : f32 = u_xlat1.x;
    u_xlat65 = ((x_2343 * x_2345) + 1.000010014f);
    let x_2348 : f32 = u_xlat66;
    let x_2349 : f32 = u_xlat66;
    u_xlat66 = (x_2348 * x_2349);
    let x_2351 : f32 = u_xlat65;
    let x_2352 : f32 = u_xlat65;
    u_xlat65 = (x_2351 * x_2352);
    let x_2354 : f32 = u_xlat66;
    u_xlat66 = max(x_2354, 0.100000001f);
    let x_2356 : f32 = u_xlat65;
    let x_2357 : f32 = u_xlat66;
    u_xlat65 = (x_2356 * x_2357);
    let x_2359 : f32 = u_xlat24;
    let x_2360 : f32 = u_xlat65;
    u_xlat65 = (x_2359 * x_2360);
    let x_2362 : f32 = u_xlat64;
    let x_2363 : f32 = u_xlat65;
    u_xlat65 = (x_2362 / x_2363);
    let x_2365 : vec4<f32> = u_xlat0;
    let x_2367 : f32 = u_xlat65;
    let x_2370 : vec4<f32> = u_xlat5;
    let x_2372 : vec3<f32> = ((vec3<f32>(x_2365.x, x_2365.y, x_2365.z) * vec3<f32>(x_2367, x_2367, x_2367)) + vec3<f32>(x_2370.x, x_2370.y, x_2370.z));
    let x_2373 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2372.x, x_2372.y, x_2372.z, x_2373.w);
    let x_2375 : vec4<f32> = u_xlat8;
    let x_2377 : vec4<f32> = u_xlat10;
    let x_2380 : vec4<f32> = u_xlat6;
    let x_2382 : vec3<f32> = ((vec3<f32>(x_2375.x, x_2375.y, x_2375.z) * vec3<f32>(x_2377.x, x_2377.y, x_2377.z)) + vec3<f32>(x_2380.x, x_2380.y, x_2380.z));
    let x_2383 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2382.x, x_2382.y, x_2382.z, x_2383.w);

    continuing {
      let x_2385 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2385 + bitcast<u32>(1i));
    }
  }
  let x_2387 : vec3<f32> = u_xlat23;
  let x_2388 : vec4<f32> = u_xlat4;
  let x_2391 : vec3<f32> = u_xlat21;
  let x_2392 : vec3<f32> = ((x_2387 * vec3<f32>(x_2388.x, x_2388.x, x_2388.x)) + x_2391);
  let x_2393 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2392.x, x_2392.y, x_2392.z, x_2393.w);
  let x_2395 : vec4<f32> = u_xlat6;
  let x_2397 : vec4<f32> = u_xlat0;
  let x_2399 : vec3<f32> = (vec3<f32>(x_2395.x, x_2395.y, x_2395.z) + vec3<f32>(x_2397.x, x_2397.y, x_2397.z));
  let x_2400 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2399.x, x_2399.y, x_2399.z, x_2400.w);
  let x_2403 : f32 = u_xlat3.x;
  let x_2405 : f32 = u_xlat3.x;
  u_xlat60 = (x_2403 * -(x_2405));
  let x_2408 : f32 = u_xlat60;
  u_xlat60 = exp2(x_2408);
  let x_2410 : vec4<f32> = u_xlat0;
  let x_2414 : vec4<f32> = x_44.unity_FogColor;
  let x_2417 : vec3<f32> = (vec3<f32>(x_2410.x, x_2410.y, x_2410.z) + -(vec3<f32>(x_2414.x, x_2414.y, x_2414.z)));
  let x_2418 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2417.x, x_2417.y, x_2417.z, x_2418.w);
  let x_2422 : f32 = u_xlat60;
  let x_2424 : vec4<f32> = u_xlat0;
  let x_2428 : vec4<f32> = x_44.unity_FogColor;
  let x_2430 : vec3<f32> = ((vec3<f32>(x_2422, x_2422, x_2422) * vec3<f32>(x_2424.x, x_2424.y, x_2424.z)) + vec3<f32>(x_2428.x, x_2428.y, x_2428.z));
  let x_2431 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2430.x, x_2430.y, x_2430.z, x_2431.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD3_param : vec4<f32>, @location(4) vs_TEXCOORD7_param : vec3<f32>, @location(2) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD5_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  main_1();
  return main_out(SV_Target0);
}

