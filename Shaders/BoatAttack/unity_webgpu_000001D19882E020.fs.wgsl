struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_256 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3368 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3802 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3907 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1571 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu44 : u32;
  var u_xlatu24 : u32;
  var u_xlati44 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : vec2<f32>;
  var x_1704 : f32;
  var u_xlatb23 : vec2<bool>;
  var x_1735 : f32;
  var u_xlat44 : f32;
  var u_xlatb2 : bool;
  var x_1782 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb8 : vec2<bool>;
  var x_3450 : f32;
  var x_3461 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatb44 : vec2<bool>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var u_xlat68 : f32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlatu71 : u32;
  var u_xlati73 : i32;
  var u_xlati71 : i32;
  var u_xlati11 : i32;
  var u_xlat32 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4210 : f32;
  var x_4223 : f32;
  var x_4285 : f32;
  var x_4296 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb63;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat63 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat63;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat63;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat63;
  u_xlat63 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat63;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_258 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][1i];
  let x_260 : vec3<f32> = (vec3<f32>(x_250.y, x_250.y, x_250.y) * vec3<f32>(x_258.x, x_258.y, x_258.z));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][0i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec4<f32> = u_xlat6;
  let x_271 : vec3<f32> = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.x, x_266.x, x_266.x)) + vec3<f32>(x_269.x, x_269.y, x_269.z));
  let x_272 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_271.x, x_271.y, x_271.z, x_272.w);
  let x_275 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][2i];
  let x_277 : vec3<f32> = vs_INTERP0;
  let x_280 : vec4<f32> = u_xlat6;
  let x_282 : vec3<f32> = ((vec3<f32>(x_275.x, x_275.y, x_275.z) * vec3<f32>(x_277.z, x_277.z, x_277.z)) + vec3<f32>(x_280.x, x_280.y, x_280.z));
  let x_283 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_282.x, x_282.y, x_282.z, x_283.w);
  let x_285 : vec4<f32> = u_xlat6;
  let x_289 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][3i];
  let x_291 : vec3<f32> = (vec3<f32>(x_285.x, x_285.y, x_285.z) + vec3<f32>(x_289.x, x_289.y, x_289.z));
  let x_292 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_291.x, x_291.y, x_291.z, x_292.w);
  let x_296 : f32 = x_256.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_296);
  let x_298 : bool = u_xlatb63;
  if (x_298) {
    let x_303 : f32 = x_256.x_MainLightShadowParams.y;
    u_xlatb64 = (x_303 == 1.0f);
    let x_305 : bool = u_xlatb64;
    if (x_305) {
      let x_309 : vec4<f32> = u_xlat6;
      let x_313 : vec4<f32> = x_256.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_309.x, x_309.y, x_309.x, x_309.y) + x_313);
      let x_316 : vec4<f32> = u_xlat7;
      let x_317 : vec2<f32> = vec2<f32>(x_316.x, x_316.y);
      let x_319 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_317.x, x_317.y, x_319);
      let x_332 : vec3<f32> = txVec0;
      let x_334 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_332.xy, x_332.z);
      u_xlat8.x = x_334;
      let x_337 : vec4<f32> = u_xlat7;
      let x_338 : vec2<f32> = vec2<f32>(x_337.z, x_337.w);
      let x_340 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_338.x, x_338.y, x_340);
      let x_347 : vec3<f32> = txVec1;
      let x_349 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_347.xy, x_347.z);
      u_xlat8.y = x_349;
      let x_351 : vec4<f32> = u_xlat6;
      let x_354 : vec4<f32> = x_256.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_351.x, x_351.y, x_351.x, x_351.y) + x_354);
      let x_357 : vec4<f32> = u_xlat7;
      let x_358 : vec2<f32> = vec2<f32>(x_357.x, x_357.y);
      let x_360 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_358.x, x_358.y, x_360);
      let x_367 : vec3<f32> = txVec2;
      let x_369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_367.xy, x_367.z);
      u_xlat8.z = x_369;
      let x_372 : vec4<f32> = u_xlat7;
      let x_373 : vec2<f32> = vec2<f32>(x_372.z, x_372.w);
      let x_375 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_373.x, x_373.y, x_375);
      let x_382 : vec3<f32> = txVec3;
      let x_384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_382.xy, x_382.z);
      u_xlat8.w = x_384;
      let x_386 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_386, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_393 : f32 = x_256.x_MainLightShadowParams.y;
      u_xlatb65 = (x_393 == 2.0f);
      let x_395 : bool = u_xlatb65;
      if (x_395) {
        let x_398 : vec4<f32> = u_xlat6;
        let x_402 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_407 : vec2<f32> = ((vec2<f32>(x_398.x, x_398.y) * vec2<f32>(x_402.z, x_402.w)) + vec2<f32>(0.5f, 0.5f));
        let x_408 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_407.x, x_407.y, x_408.z, x_408.w);
        let x_410 : vec4<f32> = u_xlat7;
        let x_412 : vec2<f32> = floor(vec2<f32>(x_410.x, x_410.y));
        let x_413 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_412.x, x_412.y, x_413.z, x_413.w);
        let x_417 : vec4<f32> = u_xlat6;
        let x_420 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_423 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_417.x, x_417.y) * vec2<f32>(x_420.z, x_420.w)) + -(vec2<f32>(x_423.x, x_423.y)));
        let x_427 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_427.x, x_427.x, x_427.y, x_427.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_432 : vec4<f32> = u_xlat8;
        let x_434 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_432.x, x_432.x, x_432.z, x_432.z) * vec4<f32>(x_434.x, x_434.x, x_434.z, x_434.z));
        let x_437 : vec4<f32> = u_xlat9;
        let x_441 : vec2<f32> = (vec2<f32>(x_437.y, x_437.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_442 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_441.x, x_442.y, x_441.y, x_442.w);
        let x_444 : vec4<f32> = u_xlat9;
        let x_447 : vec2<f32> = u_xlat49;
        let x_449 : vec2<f32> = ((vec2<f32>(x_444.x, x_444.z) * vec2<f32>(0.5f, 0.5f)) + -(x_447));
        let x_450 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_449.x, x_449.y, x_450.z, x_450.w);
        let x_453 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_453) + vec2<f32>(1.0f, 1.0f));
        let x_458 : vec2<f32> = u_xlat49;
        let x_460 : vec2<f32> = min(x_458, vec2<f32>(0.0f, 0.0f));
        let x_461 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_460.x, x_460.y, x_461.z, x_461.w);
        let x_463 : vec4<f32> = u_xlat10;
        let x_466 : vec4<f32> = u_xlat10;
        let x_469 : vec2<f32> = u_xlat51;
        let x_470 : vec2<f32> = ((-(vec2<f32>(x_463.x, x_463.y)) * vec2<f32>(x_466.x, x_466.y)) + x_469);
        let x_471 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_470.x, x_470.y, x_471.z, x_471.w);
        let x_473 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_473, vec2<f32>(0.0f, 0.0f));
        let x_475 : vec2<f32> = u_xlat49;
        let x_477 : vec2<f32> = u_xlat49;
        let x_479 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_475) * x_477) + vec2<f32>(x_479.y, x_479.w));
        let x_482 : vec4<f32> = u_xlat10;
        let x_484 : vec2<f32> = (vec2<f32>(x_482.x, x_482.y) + vec2<f32>(1.0f, 1.0f));
        let x_485 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_484.x, x_484.y, x_485.z, x_485.w);
        let x_487 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_487 + vec2<f32>(1.0f, 1.0f));
        let x_490 : vec4<f32> = u_xlat9;
        let x_494 : vec2<f32> = (vec2<f32>(x_490.x, x_490.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_495 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_494.x, x_494.y, x_495.z, x_495.w);
        let x_497 : vec2<f32> = u_xlat51;
        let x_498 : vec2<f32> = (x_497 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_499 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat10;
        let x_503 : vec2<f32> = (vec2<f32>(x_501.x, x_501.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_504 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_503.x, x_503.y, x_504.z, x_504.w);
        let x_507 : vec2<f32> = u_xlat49;
        let x_508 : vec2<f32> = (x_507 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_509 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_511.y, x_511.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_515 : f32 = u_xlat10.x;
        u_xlat11.z = x_515;
        let x_518 : f32 = u_xlat49.x;
        u_xlat11.w = x_518;
        let x_521 : f32 = u_xlat12.x;
        u_xlat9.z = x_521;
        let x_524 : f32 = u_xlat8.x;
        u_xlat9.w = x_524;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_527.z, x_527.w, x_527.x, x_527.z) + vec4<f32>(x_529.z, x_529.w, x_529.x, x_529.z));
        let x_533 : f32 = u_xlat11.y;
        u_xlat10.z = x_533;
        let x_536 : f32 = u_xlat49.y;
        u_xlat10.w = x_536;
        let x_539 : f32 = u_xlat9.y;
        u_xlat12.z = x_539;
        let x_542 : f32 = u_xlat8.z;
        u_xlat12.w = x_542;
        let x_544 : vec4<f32> = u_xlat10;
        let x_546 : vec4<f32> = u_xlat12;
        let x_548 : vec3<f32> = (vec3<f32>(x_544.z, x_544.y, x_544.w) + vec3<f32>(x_546.z, x_546.y, x_546.w));
        let x_549 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_548.x, x_548.y, x_548.z, x_549.w);
        let x_551 : vec4<f32> = u_xlat9;
        let x_553 : vec4<f32> = u_xlat13;
        let x_555 : vec3<f32> = (vec3<f32>(x_551.x, x_551.z, x_551.w) / vec3<f32>(x_553.z, x_553.w, x_553.y));
        let x_556 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_555.x, x_555.y, x_555.z, x_556.w);
        let x_558 : vec4<f32> = u_xlat9;
        let x_564 : vec3<f32> = (vec3<f32>(x_558.x, x_558.y, x_558.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_565 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat12;
        let x_569 : vec4<f32> = u_xlat8;
        let x_571 : vec3<f32> = (vec3<f32>(x_567.z, x_567.y, x_567.w) / vec3<f32>(x_569.x, x_569.y, x_569.z));
        let x_572 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
        let x_574 : vec4<f32> = u_xlat10;
        let x_576 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_577 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_576.x, x_576.y, x_576.z, x_577.w);
        let x_579 : vec4<f32> = u_xlat9;
        let x_582 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_584 : vec3<f32> = (vec3<f32>(x_579.y, x_579.x, x_579.z) * vec3<f32>(x_582.x, x_582.x, x_582.x));
        let x_585 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_584.x, x_584.y, x_584.z, x_585.w);
        let x_587 : vec4<f32> = u_xlat10;
        let x_590 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_592 : vec3<f32> = (vec3<f32>(x_587.x, x_587.y, x_587.z) * vec3<f32>(x_590.y, x_590.y, x_590.y));
        let x_593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_596 : f32 = u_xlat10.x;
        u_xlat9.w = x_596;
        let x_598 : vec4<f32> = u_xlat7;
        let x_601 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_604 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_598.x, x_598.y, x_598.x, x_598.y) * vec4<f32>(x_601.x, x_601.y, x_601.x, x_601.y)) + vec4<f32>(x_604.y, x_604.w, x_604.x, x_604.w));
        let x_607 : vec4<f32> = u_xlat7;
        let x_610 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_613 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_607.x, x_607.y) * vec2<f32>(x_610.x, x_610.y)) + vec2<f32>(x_613.z, x_613.w));
        let x_617 : f32 = u_xlat9.y;
        u_xlat10.w = x_617;
        let x_619 : vec4<f32> = u_xlat10;
        let x_620 : vec2<f32> = vec2<f32>(x_619.y, x_619.z);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_621.x, x_620.x, x_621.z, x_620.y);
        let x_623 : vec4<f32> = u_xlat7;
        let x_626 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_623.x, x_623.y, x_623.x, x_623.y) * vec4<f32>(x_626.x, x_626.y, x_626.x, x_626.y)) + vec4<f32>(x_629.x, x_629.y, x_629.z, x_629.y));
        let x_632 : vec4<f32> = u_xlat7;
        let x_635 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_638 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_632.x, x_632.y, x_632.x, x_632.y) * vec4<f32>(x_635.x, x_635.y, x_635.x, x_635.y)) + vec4<f32>(x_638.w, x_638.y, x_638.w, x_638.z));
        let x_641 : vec4<f32> = u_xlat7;
        let x_644 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_647 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_641.x, x_641.y, x_641.x, x_641.y) * vec4<f32>(x_644.x, x_644.y, x_644.x, x_644.y)) + vec4<f32>(x_647.x, x_647.w, x_647.z, x_647.w));
        let x_651 : vec4<f32> = u_xlat8;
        let x_653 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_651.x, x_651.x, x_651.x, x_651.y) * vec4<f32>(x_653.z, x_653.w, x_653.y, x_653.z));
        let x_657 : vec4<f32> = u_xlat8;
        let x_659 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_657.y, x_657.y, x_657.z, x_657.z) * x_659);
        let x_663 : f32 = u_xlat8.z;
        let x_665 : f32 = u_xlat13.y;
        u_xlat65 = (x_663 * x_665);
        let x_668 : vec4<f32> = u_xlat11;
        let x_669 : vec2<f32> = vec2<f32>(x_668.x, x_668.y);
        let x_671 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_669.x, x_669.y, x_671);
        let x_679 : vec3<f32> = txVec4;
        let x_681 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_679.xy, x_679.z);
        u_xlat67 = x_681;
        let x_683 : vec4<f32> = u_xlat11;
        let x_684 : vec2<f32> = vec2<f32>(x_683.z, x_683.w);
        let x_686 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_684.x, x_684.y, x_686);
        let x_694 : vec3<f32> = txVec5;
        let x_696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_694.xy, x_694.z);
        u_xlat69 = x_696;
        let x_697 : f32 = u_xlat69;
        let x_699 : f32 = u_xlat14.y;
        u_xlat69 = (x_697 * x_699);
        let x_702 : f32 = u_xlat14.x;
        let x_703 : f32 = u_xlat67;
        let x_705 : f32 = u_xlat69;
        u_xlat67 = ((x_702 * x_703) + x_705);
        let x_708 : vec2<f32> = u_xlat49;
        let x_710 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_708.x, x_708.y, x_710);
        let x_717 : vec3<f32> = txVec6;
        let x_719 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_717.xy, x_717.z);
        u_xlat69 = x_719;
        let x_721 : f32 = u_xlat14.z;
        let x_722 : f32 = u_xlat69;
        let x_724 : f32 = u_xlat67;
        u_xlat67 = ((x_721 * x_722) + x_724);
        let x_727 : vec4<f32> = u_xlat10;
        let x_728 : vec2<f32> = vec2<f32>(x_727.x, x_727.y);
        let x_730 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_728.x, x_728.y, x_730);
        let x_737 : vec3<f32> = txVec7;
        let x_739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_737.xy, x_737.z);
        u_xlat69 = x_739;
        let x_741 : f32 = u_xlat14.w;
        let x_742 : f32 = u_xlat69;
        let x_744 : f32 = u_xlat67;
        u_xlat67 = ((x_741 * x_742) + x_744);
        let x_747 : vec4<f32> = u_xlat12;
        let x_748 : vec2<f32> = vec2<f32>(x_747.x, x_747.y);
        let x_750 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_748.x, x_748.y, x_750);
        let x_757 : vec3<f32> = txVec8;
        let x_759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_757.xy, x_757.z);
        u_xlat69 = x_759;
        let x_761 : f32 = u_xlat15.x;
        let x_762 : f32 = u_xlat69;
        let x_764 : f32 = u_xlat67;
        u_xlat67 = ((x_761 * x_762) + x_764);
        let x_767 : vec4<f32> = u_xlat12;
        let x_768 : vec2<f32> = vec2<f32>(x_767.z, x_767.w);
        let x_770 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_768.x, x_768.y, x_770);
        let x_777 : vec3<f32> = txVec9;
        let x_779 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_777.xy, x_777.z);
        u_xlat69 = x_779;
        let x_781 : f32 = u_xlat15.y;
        let x_782 : f32 = u_xlat69;
        let x_784 : f32 = u_xlat67;
        u_xlat67 = ((x_781 * x_782) + x_784);
        let x_787 : vec4<f32> = u_xlat10;
        let x_788 : vec2<f32> = vec2<f32>(x_787.z, x_787.w);
        let x_790 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_788.x, x_788.y, x_790);
        let x_797 : vec3<f32> = txVec10;
        let x_799 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_797.xy, x_797.z);
        u_xlat69 = x_799;
        let x_801 : f32 = u_xlat15.z;
        let x_802 : f32 = u_xlat69;
        let x_804 : f32 = u_xlat67;
        u_xlat67 = ((x_801 * x_802) + x_804);
        let x_807 : vec4<f32> = u_xlat9;
        let x_808 : vec2<f32> = vec2<f32>(x_807.x, x_807.y);
        let x_810 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_808.x, x_808.y, x_810);
        let x_817 : vec3<f32> = txVec11;
        let x_819 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_817.xy, x_817.z);
        u_xlat69 = x_819;
        let x_821 : f32 = u_xlat15.w;
        let x_822 : f32 = u_xlat69;
        let x_824 : f32 = u_xlat67;
        u_xlat67 = ((x_821 * x_822) + x_824);
        let x_827 : vec4<f32> = u_xlat9;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_837 : vec3<f32> = txVec12;
        let x_839 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_837.xy, x_837.z);
        u_xlat69 = x_839;
        let x_840 : f32 = u_xlat65;
        let x_841 : f32 = u_xlat69;
        let x_843 : f32 = u_xlat67;
        u_xlat64 = ((x_840 * x_841) + x_843);
      } else {
        let x_846 : vec4<f32> = u_xlat6;
        let x_849 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_852 : vec2<f32> = ((vec2<f32>(x_846.x, x_846.y) * vec2<f32>(x_849.z, x_849.w)) + vec2<f32>(0.5f, 0.5f));
        let x_853 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_852.x, x_852.y, x_853.z, x_853.w);
        let x_855 : vec4<f32> = u_xlat7;
        let x_857 : vec2<f32> = floor(vec2<f32>(x_855.x, x_855.y));
        let x_858 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_857.x, x_857.y, x_858.z, x_858.w);
        let x_860 : vec4<f32> = u_xlat6;
        let x_863 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_866 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_860.x, x_860.y) * vec2<f32>(x_863.z, x_863.w)) + -(vec2<f32>(x_866.x, x_866.y)));
        let x_870 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_870.x, x_870.x, x_870.y, x_870.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_873 : vec4<f32> = u_xlat8;
        let x_875 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z) * vec4<f32>(x_875.x, x_875.x, x_875.z, x_875.z));
        let x_878 : vec4<f32> = u_xlat9;
        let x_882 : vec2<f32> = (vec2<f32>(x_878.y, x_878.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_883 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_883.x, x_882.x, x_883.z, x_882.y);
        let x_885 : vec4<f32> = u_xlat9;
        let x_888 : vec2<f32> = u_xlat49;
        let x_890 : vec2<f32> = ((vec2<f32>(x_885.x, x_885.z) * vec2<f32>(0.5f, 0.5f)) + -(x_888));
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_890.x, x_891.y, x_890.y, x_891.w);
        let x_893 : vec2<f32> = u_xlat49;
        let x_895 : vec2<f32> = (-(x_893) + vec2<f32>(1.0f, 1.0f));
        let x_896 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_895.x, x_895.y, x_896.z, x_896.w);
        let x_898 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_898, vec2<f32>(0.0f, 0.0f));
        let x_900 : vec2<f32> = u_xlat51;
        let x_902 : vec2<f32> = u_xlat51;
        let x_904 : vec4<f32> = u_xlat9;
        let x_906 : vec2<f32> = ((-(x_900) * x_902) + vec2<f32>(x_904.x, x_904.y));
        let x_907 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_906.x, x_906.y, x_907.z, x_907.w);
        let x_909 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_909, vec2<f32>(0.0f, 0.0f));
        let x_912 : vec2<f32> = u_xlat51;
        let x_914 : vec2<f32> = u_xlat51;
        let x_916 : vec4<f32> = u_xlat8;
        let x_918 : vec2<f32> = ((-(x_912) * x_914) + vec2<f32>(x_916.y, x_916.w));
        let x_919 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_918.x, x_919.y, x_918.y);
        let x_921 : vec4<f32> = u_xlat9;
        let x_924 : vec2<f32> = (vec2<f32>(x_921.x, x_921.y) + vec2<f32>(2.0f, 2.0f));
        let x_925 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_924.x, x_924.y, x_925.z, x_925.w);
        let x_927 : vec3<f32> = u_xlat29;
        let x_929 : vec2<f32> = (vec2<f32>(x_927.x, x_927.z) + vec2<f32>(2.0f, 2.0f));
        let x_930 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_930.x, x_929.x, x_930.z, x_929.y);
        let x_933 : f32 = u_xlat8.y;
        u_xlat11.z = (x_933 * 0.081632003f);
        let x_937 : vec4<f32> = u_xlat8;
        let x_940 : vec3<f32> = (vec3<f32>(x_937.z, x_937.x, x_937.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_941 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_940.x, x_940.y, x_940.z, x_941.w);
        let x_943 : vec4<f32> = u_xlat9;
        let x_946 : vec2<f32> = (vec2<f32>(x_943.x, x_943.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_947 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_946.x, x_946.y, x_947.z, x_947.w);
        let x_950 : f32 = u_xlat12.y;
        u_xlat11.x = x_950;
        let x_952 : vec2<f32> = u_xlat49;
        let x_959 : vec2<f32> = ((vec2<f32>(x_952.x, x_952.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_960 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_960.x, x_959.x, x_960.z, x_959.y);
        let x_962 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = ((vec2<f32>(x_962.x, x_962.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_967 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_966.x, x_967.y, x_966.y, x_967.w);
        let x_970 : f32 = u_xlat8.x;
        u_xlat9.y = x_970;
        let x_973 : f32 = u_xlat10.y;
        u_xlat9.w = x_973;
        let x_975 : vec4<f32> = u_xlat9;
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_975 + x_976);
        let x_978 : vec2<f32> = u_xlat49;
        let x_981 : vec2<f32> = ((vec2<f32>(x_978.y, x_978.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_982 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_982.x, x_981.x, x_982.z, x_981.y);
        let x_984 : vec2<f32> = u_xlat49;
        let x_987 : vec2<f32> = ((vec2<f32>(x_984.y, x_984.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_988 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_987.x, x_988.y, x_987.y, x_988.w);
        let x_991 : f32 = u_xlat8.y;
        u_xlat10.y = x_991;
        let x_993 : vec4<f32> = u_xlat10;
        let x_994 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_993 + x_994);
        let x_996 : vec4<f32> = u_xlat9;
        let x_997 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_996 / x_997);
        let x_999 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_999 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1005 : vec4<f32> = u_xlat10;
        let x_1006 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1005 / x_1006);
        let x_1008 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1008 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1010 : vec4<f32> = u_xlat9;
        let x_1013 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1010.w, x_1010.x, x_1010.y, x_1010.z) * vec4<f32>(x_1013.x, x_1013.x, x_1013.x, x_1013.x));
        let x_1016 : vec4<f32> = u_xlat10;
        let x_1019 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1016.x, x_1016.w, x_1016.y, x_1016.z) * vec4<f32>(x_1019.y, x_1019.y, x_1019.y, x_1019.y));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1023 : vec3<f32> = vec3<f32>(x_1022.y, x_1022.z, x_1022.w);
        let x_1024 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1023.x, x_1024.y, x_1023.y, x_1023.z);
        let x_1027 : f32 = u_xlat10.x;
        u_xlat12.y = x_1027;
        let x_1029 : vec4<f32> = u_xlat7;
        let x_1032 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1035 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1029.x, x_1029.y, x_1029.x, x_1029.y) * vec4<f32>(x_1032.x, x_1032.y, x_1032.x, x_1032.y)) + vec4<f32>(x_1035.x, x_1035.y, x_1035.z, x_1035.y));
        let x_1038 : vec4<f32> = u_xlat7;
        let x_1041 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1044 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1038.x, x_1038.y) * vec2<f32>(x_1041.x, x_1041.y)) + vec2<f32>(x_1044.w, x_1044.y));
        let x_1048 : f32 = u_xlat12.y;
        u_xlat9.y = x_1048;
        let x_1051 : f32 = u_xlat10.z;
        u_xlat12.y = x_1051;
        let x_1053 : vec4<f32> = u_xlat7;
        let x_1056 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1059 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1053.x, x_1053.y, x_1053.x, x_1053.y) * vec4<f32>(x_1056.x, x_1056.y, x_1056.x, x_1056.y)) + vec4<f32>(x_1059.x, x_1059.y, x_1059.z, x_1059.y));
        let x_1062 : vec4<f32> = u_xlat7;
        let x_1065 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1068 : vec4<f32> = u_xlat12;
        let x_1070 : vec2<f32> = ((vec2<f32>(x_1062.x, x_1062.y) * vec2<f32>(x_1065.x, x_1065.y)) + vec2<f32>(x_1068.w, x_1068.y));
        let x_1071 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1070.x, x_1070.y, x_1071.z, x_1071.w);
        let x_1074 : f32 = u_xlat12.y;
        u_xlat9.z = x_1074;
        let x_1077 : vec4<f32> = u_xlat7;
        let x_1080 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1077.x, x_1077.y, x_1077.x, x_1077.y) * vec4<f32>(x_1080.x, x_1080.y, x_1080.x, x_1080.y)) + vec4<f32>(x_1083.x, x_1083.y, x_1083.x, x_1083.z));
        let x_1087 : f32 = u_xlat10.w;
        u_xlat12.y = x_1087;
        let x_1090 : vec4<f32> = u_xlat7;
        let x_1093 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1096 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1090.x, x_1090.y, x_1090.x, x_1090.y) * vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.y)) + vec4<f32>(x_1096.x, x_1096.y, x_1096.z, x_1096.y));
        let x_1100 : vec4<f32> = u_xlat7;
        let x_1103 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat12;
        let x_1108 : vec2<f32> = ((vec2<f32>(x_1100.x, x_1100.y) * vec2<f32>(x_1103.x, x_1103.y)) + vec2<f32>(x_1106.w, x_1106.y));
        let x_1109 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1108.x, x_1108.y, x_1109.z);
        let x_1112 : f32 = u_xlat12.y;
        u_xlat9.w = x_1112;
        let x_1115 : vec4<f32> = u_xlat7;
        let x_1118 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1121 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1118.x, x_1118.y)) + vec2<f32>(x_1121.x, x_1121.w));
        let x_1124 : vec4<f32> = u_xlat12;
        let x_1125 : vec3<f32> = vec3<f32>(x_1124.x, x_1124.z, x_1124.w);
        let x_1126 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1125.x, x_1126.y, x_1125.y, x_1125.z);
        let x_1128 : vec4<f32> = u_xlat7;
        let x_1131 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1134 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1128.x, x_1128.y, x_1128.x, x_1128.y) * vec4<f32>(x_1131.x, x_1131.y, x_1131.x, x_1131.y)) + vec4<f32>(x_1134.x, x_1134.y, x_1134.z, x_1134.y));
        let x_1138 : vec4<f32> = u_xlat7;
        let x_1141 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1144 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1141.x, x_1141.y)) + vec2<f32>(x_1144.w, x_1144.y));
        let x_1148 : f32 = u_xlat9.x;
        u_xlat10.x = x_1148;
        let x_1150 : vec4<f32> = u_xlat7;
        let x_1153 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1156 : vec4<f32> = u_xlat10;
        let x_1158 : vec2<f32> = ((vec2<f32>(x_1150.x, x_1150.y) * vec2<f32>(x_1153.x, x_1153.y)) + vec2<f32>(x_1156.x, x_1156.y));
        let x_1159 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1158.x, x_1158.y, x_1159.z, x_1159.w);
        let x_1162 : vec4<f32> = u_xlat8;
        let x_1164 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1162.x, x_1162.x, x_1162.x, x_1162.x) * x_1164);
        let x_1167 : vec4<f32> = u_xlat8;
        let x_1169 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1167.y, x_1167.y, x_1167.y, x_1167.y) * x_1169);
        let x_1172 : vec4<f32> = u_xlat8;
        let x_1174 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1172.z, x_1172.z, x_1172.z, x_1172.z) * x_1174);
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1176.w, x_1176.w, x_1176.w, x_1176.w) * x_1178);
        let x_1181 : vec4<f32> = u_xlat13;
        let x_1182 : vec2<f32> = vec2<f32>(x_1181.x, x_1181.y);
        let x_1184 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1182.x, x_1182.y, x_1184);
        let x_1191 : vec3<f32> = txVec13;
        let x_1193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1191.xy, x_1191.z);
        u_xlat65 = x_1193;
        let x_1195 : vec4<f32> = u_xlat13;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.z, x_1195.w);
        let x_1198 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec14;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat67 = x_1207;
        let x_1208 : f32 = u_xlat67;
        let x_1210 : f32 = u_xlat18.y;
        u_xlat67 = (x_1208 * x_1210);
        let x_1213 : f32 = u_xlat18.x;
        let x_1214 : f32 = u_xlat65;
        let x_1216 : f32 = u_xlat67;
        u_xlat65 = ((x_1213 * x_1214) + x_1216);
        let x_1219 : vec2<f32> = u_xlat49;
        let x_1221 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1219.x, x_1219.y, x_1221);
        let x_1228 : vec3<f32> = txVec15;
        let x_1230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1228.xy, x_1228.z);
        u_xlat67 = x_1230;
        let x_1232 : f32 = u_xlat18.z;
        let x_1233 : f32 = u_xlat67;
        let x_1235 : f32 = u_xlat65;
        u_xlat65 = ((x_1232 * x_1233) + x_1235);
        let x_1238 : vec4<f32> = u_xlat16;
        let x_1239 : vec2<f32> = vec2<f32>(x_1238.x, x_1238.y);
        let x_1241 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1239.x, x_1239.y, x_1241);
        let x_1248 : vec3<f32> = txVec16;
        let x_1250 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1248.xy, x_1248.z);
        u_xlat67 = x_1250;
        let x_1252 : f32 = u_xlat18.w;
        let x_1253 : f32 = u_xlat67;
        let x_1255 : f32 = u_xlat65;
        u_xlat65 = ((x_1252 * x_1253) + x_1255);
        let x_1258 : vec4<f32> = u_xlat14;
        let x_1259 : vec2<f32> = vec2<f32>(x_1258.x, x_1258.y);
        let x_1261 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1259.x, x_1259.y, x_1261);
        let x_1268 : vec3<f32> = txVec17;
        let x_1270 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1268.xy, x_1268.z);
        u_xlat67 = x_1270;
        let x_1272 : f32 = u_xlat19.x;
        let x_1273 : f32 = u_xlat67;
        let x_1275 : f32 = u_xlat65;
        u_xlat65 = ((x_1272 * x_1273) + x_1275);
        let x_1278 : vec4<f32> = u_xlat14;
        let x_1279 : vec2<f32> = vec2<f32>(x_1278.z, x_1278.w);
        let x_1281 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1279.x, x_1279.y, x_1281);
        let x_1288 : vec3<f32> = txVec18;
        let x_1290 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1288.xy, x_1288.z);
        u_xlat67 = x_1290;
        let x_1292 : f32 = u_xlat19.y;
        let x_1293 : f32 = u_xlat67;
        let x_1295 : f32 = u_xlat65;
        u_xlat65 = ((x_1292 * x_1293) + x_1295);
        let x_1298 : vec4<f32> = u_xlat15;
        let x_1299 : vec2<f32> = vec2<f32>(x_1298.x, x_1298.y);
        let x_1301 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1299.x, x_1299.y, x_1301);
        let x_1308 : vec3<f32> = txVec19;
        let x_1310 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1308.xy, x_1308.z);
        u_xlat67 = x_1310;
        let x_1312 : f32 = u_xlat19.z;
        let x_1313 : f32 = u_xlat67;
        let x_1315 : f32 = u_xlat65;
        u_xlat65 = ((x_1312 * x_1313) + x_1315);
        let x_1318 : vec4<f32> = u_xlat16;
        let x_1319 : vec2<f32> = vec2<f32>(x_1318.z, x_1318.w);
        let x_1321 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1319.x, x_1319.y, x_1321);
        let x_1328 : vec3<f32> = txVec20;
        let x_1330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1328.xy, x_1328.z);
        u_xlat67 = x_1330;
        let x_1332 : f32 = u_xlat19.w;
        let x_1333 : f32 = u_xlat67;
        let x_1335 : f32 = u_xlat65;
        u_xlat65 = ((x_1332 * x_1333) + x_1335);
        let x_1338 : vec4<f32> = u_xlat17;
        let x_1339 : vec2<f32> = vec2<f32>(x_1338.x, x_1338.y);
        let x_1341 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1339.x, x_1339.y, x_1341);
        let x_1348 : vec3<f32> = txVec21;
        let x_1350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1348.xy, x_1348.z);
        u_xlat67 = x_1350;
        let x_1352 : f32 = u_xlat20.x;
        let x_1353 : f32 = u_xlat67;
        let x_1355 : f32 = u_xlat65;
        u_xlat65 = ((x_1352 * x_1353) + x_1355);
        let x_1358 : vec4<f32> = u_xlat17;
        let x_1359 : vec2<f32> = vec2<f32>(x_1358.z, x_1358.w);
        let x_1361 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1359.x, x_1359.y, x_1361);
        let x_1368 : vec3<f32> = txVec22;
        let x_1370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1368.xy, x_1368.z);
        u_xlat67 = x_1370;
        let x_1372 : f32 = u_xlat20.y;
        let x_1373 : f32 = u_xlat67;
        let x_1375 : f32 = u_xlat65;
        u_xlat65 = ((x_1372 * x_1373) + x_1375);
        let x_1378 : vec3<f32> = u_xlat30;
        let x_1379 : vec2<f32> = vec2<f32>(x_1378.x, x_1378.y);
        let x_1381 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1379.x, x_1379.y, x_1381);
        let x_1388 : vec3<f32> = txVec23;
        let x_1390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1388.xy, x_1388.z);
        u_xlat67 = x_1390;
        let x_1392 : f32 = u_xlat20.z;
        let x_1393 : f32 = u_xlat67;
        let x_1395 : f32 = u_xlat65;
        u_xlat65 = ((x_1392 * x_1393) + x_1395);
        let x_1398 : vec2<f32> = u_xlat57;
        let x_1400 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1398.x, x_1398.y, x_1400);
        let x_1407 : vec3<f32> = txVec24;
        let x_1409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1407.xy, x_1407.z);
        u_xlat67 = x_1409;
        let x_1411 : f32 = u_xlat20.w;
        let x_1412 : f32 = u_xlat67;
        let x_1414 : f32 = u_xlat65;
        u_xlat65 = ((x_1411 * x_1412) + x_1414);
        let x_1417 : vec4<f32> = u_xlat12;
        let x_1418 : vec2<f32> = vec2<f32>(x_1417.x, x_1417.y);
        let x_1420 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1418.x, x_1418.y, x_1420);
        let x_1427 : vec3<f32> = txVec25;
        let x_1429 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1427.xy, x_1427.z);
        u_xlat67 = x_1429;
        let x_1431 : f32 = u_xlat8.x;
        let x_1432 : f32 = u_xlat67;
        let x_1434 : f32 = u_xlat65;
        u_xlat65 = ((x_1431 * x_1432) + x_1434);
        let x_1437 : vec4<f32> = u_xlat12;
        let x_1438 : vec2<f32> = vec2<f32>(x_1437.z, x_1437.w);
        let x_1440 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1438.x, x_1438.y, x_1440);
        let x_1447 : vec3<f32> = txVec26;
        let x_1449 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1447.xy, x_1447.z);
        u_xlat67 = x_1449;
        let x_1451 : f32 = u_xlat8.y;
        let x_1452 : f32 = u_xlat67;
        let x_1454 : f32 = u_xlat65;
        u_xlat65 = ((x_1451 * x_1452) + x_1454);
        let x_1457 : vec2<f32> = u_xlat52;
        let x_1459 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1457.x, x_1457.y, x_1459);
        let x_1466 : vec3<f32> = txVec27;
        let x_1468 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1466.xy, x_1466.z);
        u_xlat67 = x_1468;
        let x_1470 : f32 = u_xlat8.z;
        let x_1471 : f32 = u_xlat67;
        let x_1473 : f32 = u_xlat65;
        u_xlat65 = ((x_1470 * x_1471) + x_1473);
        let x_1476 : vec4<f32> = u_xlat7;
        let x_1477 : vec2<f32> = vec2<f32>(x_1476.x, x_1476.y);
        let x_1479 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec28;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat67 = x_1488;
        let x_1490 : f32 = u_xlat8.w;
        let x_1491 : f32 = u_xlat67;
        let x_1493 : f32 = u_xlat65;
        u_xlat64 = ((x_1490 * x_1491) + x_1493);
      }
    }
  } else {
    let x_1497 : vec4<f32> = u_xlat6;
    let x_1498 : vec2<f32> = vec2<f32>(x_1497.x, x_1497.y);
    let x_1500 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1498.x, x_1498.y, x_1500);
    let x_1507 : vec3<f32> = txVec29;
    let x_1509 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1507.xy, x_1507.z);
    u_xlat64 = x_1509;
  }
  let x_1511 : f32 = x_256.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1511) + 1.0f);
  let x_1514 : f32 = u_xlat64;
  let x_1516 : f32 = x_256.x_MainLightShadowParams.x;
  let x_1518 : f32 = u_xlat65;
  u_xlat64 = ((x_1514 * x_1516) + x_1518);
  let x_1522 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1522);
  let x_1526 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1526 >= 1.0f);
  let x_1528 : bool = u_xlatb67;
  let x_1529 : bool = u_xlatb6;
  u_xlatb67 = (x_1528 | x_1529);
  let x_1531 : bool = u_xlatb67;
  let x_1532 : f32 = u_xlat64;
  u_xlat64 = select(x_1532, 1.0f, x_1531);
  let x_1534 : vec3<f32> = u_xlat0;
  let x_1536 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1534, -(vec3<f32>(x_1536.x, x_1536.y, x_1536.z)));
  let x_1542 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1542, 0.0f, 1.0f);
  let x_1545 : f32 = u_xlat64;
  let x_1549 : vec4<f32> = x_90.x_MainLightColor;
  let x_1551 : vec3<f32> = (vec3<f32>(x_1545, x_1545, x_1545) * vec3<f32>(x_1549.x, x_1549.y, x_1549.z));
  let x_1552 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1551.x, x_1551.y, x_1551.z, x_1552.w);
  let x_1554 : vec3<f32> = u_xlat0;
  let x_1556 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1554.x, x_1554.x, x_1554.x) * vec3<f32>(x_1556.x, x_1556.y, x_1556.z));
  let x_1559 : vec3<f32> = u_xlat0;
  let x_1560 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1559 * vec3<f32>(x_1560.x, x_1560.y, x_1560.z));
  let x_1564 : f32 = x_145.unity_LODFade.x;
  u_xlatb64 = (x_1564 < 0.0f);
  let x_1567 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1567 + 1.0f);
  let x_1570 : bool = u_xlatb64;
  if (x_1570) {
    let x_1575 : f32 = u_xlat3.x;
    x_1571 = x_1575;
  } else {
    let x_1578 : f32 = x_145.unity_LODFade.x;
    x_1571 = x_1578;
  }
  let x_1579 : f32 = x_1571;
  u_xlat64 = x_1579;
  let x_1581 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1581);
  let x_1583 : vec3<f32> = u_xlat2;
  let x_1586 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1583) * vec3<f32>(x_1586.x, x_1586.y, x_1586.x));
  let x_1592 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1592);
  let x_1596 : u32 = u_xlatu2.z;
  u_xlatu44 = (x_1596 * 1025u);
  let x_1600 : u32 = u_xlatu44;
  u_xlatu24 = (x_1600 >> 6u);
  let x_1604 : u32 = u_xlatu44;
  let x_1605 : u32 = u_xlatu24;
  u_xlati44 = bitcast<i32>((x_1604 ^ x_1605));
  let x_1608 : i32 = u_xlati44;
  u_xlatu44 = (bitcast<u32>(x_1608) * 9u);
  let x_1612 : u32 = u_xlatu44;
  u_xlatu24 = (x_1612 >> 11u);
  let x_1615 : u32 = u_xlatu44;
  let x_1616 : u32 = u_xlatu24;
  u_xlati44 = bitcast<i32>((x_1615 ^ x_1616));
  let x_1619 : i32 = u_xlati44;
  u_xlati44 = (x_1619 * 32769i);
  let x_1623 : i32 = u_xlati44;
  let x_1626 : u32 = u_xlatu2.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1623) ^ x_1626));
  let x_1630 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1630) * 1025u);
  let x_1633 : u32 = u_xlatu23;
  u_xlatu44 = (x_1633 >> 6u);
  let x_1635 : u32 = u_xlatu44;
  let x_1636 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1635 ^ x_1636));
  let x_1639 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1639) * 9u);
  let x_1642 : u32 = u_xlatu23;
  u_xlatu44 = (x_1642 >> 11u);
  let x_1644 : u32 = u_xlatu44;
  let x_1645 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1644 ^ x_1645));
  let x_1648 : i32 = u_xlati23;
  u_xlati23 = (x_1648 * 32769i);
  let x_1651 : i32 = u_xlati23;
  let x_1654 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1651) ^ x_1654));
  let x_1657 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1657) * 1025u);
  let x_1662 : u32 = u_xlatu2.x;
  u_xlatu23 = (x_1662 >> 6u);
  let x_1664 : u32 = u_xlatu23;
  let x_1666 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1664 ^ x_1666));
  let x_1669 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1669) * 9u);
  let x_1674 : u32 = u_xlatu2.x;
  u_xlatu23 = (x_1674 >> 11u);
  let x_1676 : u32 = u_xlatu23;
  let x_1678 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1676 ^ x_1678));
  let x_1681 : i32 = u_xlati2;
  u_xlati2 = (x_1681 * 32769i);
  param = 1065353216i;
  let x_1687 : i32 = u_xlati2;
  param_1 = x_1687;
  param_2 = 0i;
  param_3 = 23i;
  let x_1690 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1690);
  let x_1694 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1694 + -1.0f);
  let x_1699 : f32 = u_xlat2.x;
  u_xlat23.x = (-(x_1699) + 1.0f);
  let x_1703 : bool = u_xlatb3;
  if (x_1703) {
    let x_1708 : f32 = u_xlat2.x;
    x_1704 = x_1708;
  } else {
    let x_1711 : f32 = u_xlat23.x;
    x_1704 = x_1711;
  }
  let x_1712 : f32 = x_1704;
  u_xlat2.x = x_1712;
  let x_1714 : f32 = u_xlat64;
  let x_1717 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1714 * 2.0f) + -(x_1717));
  let x_1720 : f32 = u_xlat64;
  let x_1722 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1720 * x_1722);
  let x_1729 : f32 = u_xlat2.x;
  u_xlatb23.x = (x_1729 >= 0.400000006f);
  let x_1734 : bool = u_xlatb23.x;
  if (x_1734) {
    let x_1739 : f32 = u_xlat2.x;
    x_1735 = x_1739;
  } else {
    x_1735 = 0.0f;
  }
  let x_1741 : f32 = x_1735;
  u_xlat23.x = x_1741;
  let x_1744 : f32 = u_xlat3.w;
  let x_1745 : f32 = u_xlat64;
  u_xlat64 = ((x_1744 * x_1745) + -0.400000006f);
  let x_1751 : f32 = u_xlat2.x;
  u_xlat44 = dpdxCoarse(x_1751);
  let x_1754 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1754);
  let x_1758 : f32 = u_xlat2.x;
  let x_1760 : f32 = u_xlat44;
  u_xlat2.x = (abs(x_1758) + abs(x_1760));
  let x_1765 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1765, 0.0001f);
  let x_1769 : f32 = u_xlat64;
  let x_1771 : f32 = u_xlat2.x;
  u_xlat64 = (x_1769 / x_1771);
  let x_1773 : f32 = u_xlat64;
  u_xlat64 = (x_1773 + 0.5f);
  let x_1775 : f32 = u_xlat64;
  u_xlat64 = clamp(x_1775, 0.0f, 1.0f);
  let x_1779 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1779 == 0.0f));
  let x_1781 : bool = u_xlatb2;
  if (x_1781) {
    let x_1785 : f32 = u_xlat64;
    x_1782 = x_1785;
  } else {
    let x_1788 : f32 = u_xlat23.x;
    x_1782 = x_1788;
  }
  let x_1789 : f32 = x_1782;
  u_xlat64 = x_1789;
  let x_1790 : f32 = u_xlat64;
  u_xlat23.x = (x_1790 + -0.0001f);
  let x_1795 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1795 < 0.0f);
  let x_1799 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1799) * -1i) != 0i)) {
    discard;
  }
  let x_1809 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1809);
  let x_1813 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb23.y = (x_1813 >= 0.0f);
  let x_1817 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1817);
  let x_1821 : bool = u_xlatb23.y;
  u_xlat23.y = select(-1.0f, 1.0f, x_1821);
  let x_1825 : f32 = u_xlat23.y;
  let x_1827 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1825 * x_1827);
  let x_1830 : vec3<f32> = vs_INTERP1;
  let x_1832 : vec4<f32> = vs_INTERP2;
  let x_1834 : vec3<f32> = (vec3<f32>(x_1830.z, x_1830.x, x_1830.y) * vec3<f32>(x_1832.y, x_1832.z, x_1832.x));
  let x_1835 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1834.x, x_1834.y, x_1834.z, x_1835.w);
  let x_1837 : vec3<f32> = vs_INTERP1;
  let x_1839 : vec4<f32> = vs_INTERP2;
  let x_1842 : vec4<f32> = u_xlat3;
  let x_1845 : vec3<f32> = ((vec3<f32>(x_1837.y, x_1837.z, x_1837.x) * vec3<f32>(x_1839.z, x_1839.x, x_1839.y)) + -(vec3<f32>(x_1842.x, x_1842.y, x_1842.z)));
  let x_1846 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1845.x, x_1845.y, x_1845.z, x_1846.w);
  let x_1848 : vec2<f32> = u_xlat23;
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1852 : vec3<f32> = (vec3<f32>(x_1848.x, x_1848.x, x_1848.x) * vec3<f32>(x_1850.x, x_1850.y, x_1850.z));
  let x_1853 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1852.x, x_1852.y, x_1852.z, x_1853.w);
  let x_1855 : vec4<f32> = u_xlat3;
  let x_1857 : vec3<f32> = u_xlat26;
  let x_1859 : vec3<f32> = (vec3<f32>(x_1855.x, x_1855.y, x_1855.z) * vec3<f32>(x_1857.y, x_1857.y, x_1857.y));
  let x_1860 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1859.x, x_1859.y, x_1859.z, x_1860.w);
  let x_1862 : vec3<f32> = u_xlat26;
  let x_1864 : vec4<f32> = vs_INTERP2;
  let x_1867 : vec4<f32> = u_xlat3;
  let x_1869 : vec3<f32> = ((vec3<f32>(x_1862.x, x_1862.x, x_1862.x) * vec3<f32>(x_1864.x, x_1864.y, x_1864.z)) + vec3<f32>(x_1867.x, x_1867.y, x_1867.z));
  let x_1870 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1869.x, x_1869.y, x_1869.z, x_1870.w);
  let x_1872 : vec3<f32> = u_xlat26;
  let x_1874 : vec3<f32> = vs_INTERP1;
  let x_1876 : vec4<f32> = u_xlat3;
  let x_1878 : vec3<f32> = ((vec3<f32>(x_1872.z, x_1872.z, x_1872.z) * x_1874) + vec3<f32>(x_1876.x, x_1876.y, x_1876.z));
  let x_1879 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1878.x, x_1878.y, x_1878.z, x_1879.w);
  let x_1881 : vec4<f32> = u_xlat3;
  let x_1883 : vec4<f32> = u_xlat3;
  u_xlat23.x = dot(vec3<f32>(x_1881.x, x_1881.y, x_1881.z), vec3<f32>(x_1883.x, x_1883.y, x_1883.z));
  let x_1888 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1888);
  let x_1891 : vec2<f32> = u_xlat23;
  let x_1893 : vec4<f32> = u_xlat3;
  let x_1895 : vec3<f32> = (vec3<f32>(x_1891.x, x_1891.x, x_1891.x) * vec3<f32>(x_1893.x, x_1893.y, x_1893.z));
  let x_1896 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1895.x, x_1895.y, x_1895.z, x_1896.w);
  let x_1899 : f32 = vs_INTERP0.y;
  let x_1901 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1899 * x_1901);
  let x_1905 : f32 = x_90.unity_MatrixV[0i].z;
  let x_1907 : f32 = vs_INTERP0.x;
  let x_1910 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1905 * x_1907) + x_1910);
  let x_1914 : f32 = x_90.unity_MatrixV[2i].z;
  let x_1916 : f32 = vs_INTERP0.z;
  let x_1919 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1914 * x_1916) + x_1919);
  let x_1923 : f32 = u_xlat23.x;
  let x_1925 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1923 + x_1925);
  let x_1929 : f32 = u_xlat23.x;
  let x_1932 : f32 = x_90.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1929) + -(x_1932));
  let x_1937 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1937, 0.0f);
  let x_1941 : f32 = u_xlat23.x;
  let x_1944 : f32 = x_90.unity_FogParams.x;
  u_xlat23.x = (x_1941 * x_1944);
  u_xlat3.w = 1.0f;
  let x_1950 : vec4<f32> = x_145.unity_SHAr;
  let x_1951 : vec4<f32> = u_xlat3;
  u_xlat6.x = dot(x_1950, x_1951);
  let x_1956 : vec4<f32> = x_145.unity_SHAg;
  let x_1957 : vec4<f32> = u_xlat3;
  u_xlat6.y = dot(x_1956, x_1957);
  let x_1962 : vec4<f32> = x_145.unity_SHAb;
  let x_1963 : vec4<f32> = u_xlat3;
  u_xlat6.z = dot(x_1962, x_1963);
  let x_1966 : vec4<f32> = u_xlat3;
  let x_1968 : vec4<f32> = u_xlat3;
  u_xlat7 = (vec4<f32>(x_1966.y, x_1966.z, x_1966.z, x_1966.x) * vec4<f32>(x_1968.x, x_1968.y, x_1968.z, x_1968.z));
  let x_1973 : vec4<f32> = x_145.unity_SHBr;
  let x_1974 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(x_1973, x_1974);
  let x_1979 : vec4<f32> = x_145.unity_SHBg;
  let x_1980 : vec4<f32> = u_xlat7;
  u_xlat8.y = dot(x_1979, x_1980);
  let x_1984 : vec4<f32> = x_145.unity_SHBb;
  let x_1985 : vec4<f32> = u_xlat7;
  u_xlat8.z = dot(x_1984, x_1985);
  let x_1989 : f32 = u_xlat3.y;
  let x_1991 : f32 = u_xlat3.y;
  u_xlat44 = (x_1989 * x_1991);
  let x_1994 : f32 = u_xlat3.x;
  let x_1996 : f32 = u_xlat3.x;
  let x_1998 : f32 = u_xlat44;
  u_xlat44 = ((x_1994 * x_1996) + -(x_1998));
  let x_2003 : vec4<f32> = x_145.unity_SHC;
  let x_2005 : f32 = u_xlat44;
  let x_2008 : vec4<f32> = u_xlat8;
  u_xlat26 = ((vec3<f32>(x_2003.x, x_2003.y, x_2003.z) * vec3<f32>(x_2005, x_2005, x_2005)) + vec3<f32>(x_2008.x, x_2008.y, x_2008.z));
  let x_2011 : vec3<f32> = u_xlat26;
  let x_2012 : vec4<f32> = u_xlat6;
  u_xlat26 = (x_2011 + vec3<f32>(x_2012.x, x_2012.y, x_2012.z));
  let x_2015 : vec3<f32> = u_xlat26;
  u_xlat26 = max(x_2015, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2019 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2020 : vec2<f32> = vec2<f32>(x_2019.x, x_2019.y);
  let x_2024 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2020.x, x_2020.y));
  let x_2025 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2024.x, x_2024.y, x_2025.z, x_2025.w);
  let x_2027 : vec4<f32> = u_xlat6;
  let x_2029 : vec4<f32> = hlslcc_FragCoord;
  let x_2031 : vec2<f32> = (vec2<f32>(x_2027.x, x_2027.y) * vec2<f32>(x_2029.x, x_2029.y));
  let x_2032 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2031.x, x_2031.y, x_2032.z, x_2032.w);
  let x_2035 : f32 = u_xlat6.y;
  let x_2038 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2041 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat44 = ((x_2035 * x_2038) + x_2041);
  let x_2043 : f32 = u_xlat44;
  u_xlat6.z = (-(x_2043) + 1.0f);
  let x_2048 : f32 = u_xlat5.x;
  u_xlat5.x = x_2048;
  let x_2051 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2051, 0.0f, 1.0f);
  let x_2054 : f32 = u_xlat64;
  u_xlat64 = x_2054;
  let x_2055 : f32 = u_xlat64;
  u_xlat64 = clamp(x_2055, 0.0f, 1.0f);
  let x_2057 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2057 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2062 : f32 = u_xlat5.x;
  u_xlat44 = (-(x_2062) + 1.0f);
  let x_2066 : f32 = u_xlat44;
  let x_2067 : f32 = u_xlat44;
  u_xlat66 = (x_2066 * x_2067);
  let x_2069 : f32 = u_xlat66;
  u_xlat66 = max(x_2069, 0.0078125f);
  let x_2072 : f32 = u_xlat66;
  let x_2073 : f32 = u_xlat66;
  u_xlat67 = (x_2072 * x_2073);
  let x_2076 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2076 + 0.040000021f);
  let x_2081 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2081, 1.0f);
  let x_2085 : f32 = u_xlat66;
  u_xlat27 = ((x_2085 * 4.0f) + 2.0f);
  let x_2094 : vec4<f32> = u_xlat6;
  let x_2097 : f32 = x_90.x_GlobalMipBias.x;
  let x_2098 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2094.x, x_2094.z), x_2097);
  u_xlat6.x = x_2098.x;
  let x_2103 : f32 = u_xlat6.x;
  u_xlat48 = (x_2103 + -1.0f);
  let x_2107 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2108 : f32 = u_xlat48;
  u_xlat48 = ((x_2107 * x_2108) + 1.0f);
  let x_2112 : f32 = u_xlat6.x;
  let x_2114 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2112, x_2114);
  let x_2117 : bool = u_xlatb63;
  if (x_2117) {
    let x_2121 : f32 = x_256.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2121 == 1.0f);
    let x_2123 : bool = u_xlatb63;
    if (x_2123) {
      let x_2127 : vec4<f32> = vs_INTERP9;
      let x_2130 : vec4<f32> = x_256.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2127.x, x_2127.y, x_2127.x, x_2127.y) + x_2130);
      let x_2133 : vec4<f32> = u_xlat7;
      let x_2134 : vec2<f32> = vec2<f32>(x_2133.x, x_2133.y);
      let x_2136 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2134.x, x_2134.y, x_2136);
      let x_2143 : vec3<f32> = txVec30;
      let x_2145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2143.xy, x_2143.z);
      u_xlat8.x = x_2145;
      let x_2148 : vec4<f32> = u_xlat7;
      let x_2149 : vec2<f32> = vec2<f32>(x_2148.z, x_2148.w);
      let x_2151 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2149.x, x_2149.y, x_2151);
      let x_2158 : vec3<f32> = txVec31;
      let x_2160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2158.xy, x_2158.z);
      u_xlat8.y = x_2160;
      let x_2162 : vec4<f32> = vs_INTERP9;
      let x_2165 : vec4<f32> = x_256.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2162.x, x_2162.y, x_2162.x, x_2162.y) + x_2165);
      let x_2168 : vec4<f32> = u_xlat7;
      let x_2169 : vec2<f32> = vec2<f32>(x_2168.x, x_2168.y);
      let x_2171 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2169.x, x_2169.y, x_2171);
      let x_2178 : vec3<f32> = txVec32;
      let x_2180 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2178.xy, x_2178.z);
      u_xlat8.z = x_2180;
      let x_2183 : vec4<f32> = u_xlat7;
      let x_2184 : vec2<f32> = vec2<f32>(x_2183.z, x_2183.w);
      let x_2186 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2184.x, x_2184.y, x_2186);
      let x_2193 : vec3<f32> = txVec33;
      let x_2195 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2193.xy, x_2193.z);
      u_xlat8.w = x_2195;
      let x_2197 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2197, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2202 : f32 = x_256.x_MainLightShadowParams.y;
      u_xlatb69 = (x_2202 == 2.0f);
      let x_2204 : bool = u_xlatb69;
      if (x_2204) {
        let x_2207 : vec4<f32> = vs_INTERP9;
        let x_2210 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2213 : vec2<f32> = ((vec2<f32>(x_2207.x, x_2207.y) * vec2<f32>(x_2210.z, x_2210.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2214 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2213.x, x_2213.y, x_2214.z, x_2214.w);
        let x_2216 : vec4<f32> = u_xlat7;
        let x_2218 : vec2<f32> = floor(vec2<f32>(x_2216.x, x_2216.y));
        let x_2219 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2218.x, x_2218.y, x_2219.z, x_2219.w);
        let x_2221 : vec4<f32> = vs_INTERP9;
        let x_2224 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2227 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2221.x, x_2221.y) * vec2<f32>(x_2224.z, x_2224.w)) + -(vec2<f32>(x_2227.x, x_2227.y)));
        let x_2231 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2231.x, x_2231.x, x_2231.y, x_2231.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2234 : vec4<f32> = u_xlat8;
        let x_2236 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2234.x, x_2234.x, x_2234.z, x_2234.z) * vec4<f32>(x_2236.x, x_2236.x, x_2236.z, x_2236.z));
        let x_2239 : vec4<f32> = u_xlat9;
        let x_2241 : vec2<f32> = (vec2<f32>(x_2239.y, x_2239.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2242 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2241.x, x_2242.y, x_2241.y, x_2242.w);
        let x_2244 : vec4<f32> = u_xlat9;
        let x_2247 : vec2<f32> = u_xlat49;
        let x_2249 : vec2<f32> = ((vec2<f32>(x_2244.x, x_2244.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2247));
        let x_2250 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2249.x, x_2249.y, x_2250.z, x_2250.w);
        let x_2252 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2252) + vec2<f32>(1.0f, 1.0f));
        let x_2255 : vec2<f32> = u_xlat49;
        let x_2256 : vec2<f32> = min(x_2255, vec2<f32>(0.0f, 0.0f));
        let x_2257 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2256.x, x_2256.y, x_2257.z, x_2257.w);
        let x_2259 : vec4<f32> = u_xlat10;
        let x_2262 : vec4<f32> = u_xlat10;
        let x_2265 : vec2<f32> = u_xlat51;
        let x_2266 : vec2<f32> = ((-(vec2<f32>(x_2259.x, x_2259.y)) * vec2<f32>(x_2262.x, x_2262.y)) + x_2265);
        let x_2267 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2266.x, x_2266.y, x_2267.z, x_2267.w);
        let x_2269 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2269, vec2<f32>(0.0f, 0.0f));
        let x_2271 : vec2<f32> = u_xlat49;
        let x_2273 : vec2<f32> = u_xlat49;
        let x_2275 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2271) * x_2273) + vec2<f32>(x_2275.y, x_2275.w));
        let x_2278 : vec4<f32> = u_xlat10;
        let x_2280 : vec2<f32> = (vec2<f32>(x_2278.x, x_2278.y) + vec2<f32>(1.0f, 1.0f));
        let x_2281 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2280.x, x_2280.y, x_2281.z, x_2281.w);
        let x_2283 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2283 + vec2<f32>(1.0f, 1.0f));
        let x_2285 : vec4<f32> = u_xlat9;
        let x_2287 : vec2<f32> = (vec2<f32>(x_2285.x, x_2285.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2288 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2287.x, x_2287.y, x_2288.z, x_2288.w);
        let x_2290 : vec2<f32> = u_xlat51;
        let x_2291 : vec2<f32> = (x_2290 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2292 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2291.x, x_2291.y, x_2292.z, x_2292.w);
        let x_2294 : vec4<f32> = u_xlat10;
        let x_2296 : vec2<f32> = (vec2<f32>(x_2294.x, x_2294.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2297 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2296.x, x_2296.y, x_2297.z, x_2297.w);
        let x_2299 : vec2<f32> = u_xlat49;
        let x_2300 : vec2<f32> = (x_2299 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2301 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2300.x, x_2300.y, x_2301.z, x_2301.w);
        let x_2303 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2303.y, x_2303.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2307 : f32 = u_xlat10.x;
        u_xlat11.z = x_2307;
        let x_2310 : f32 = u_xlat49.x;
        u_xlat11.w = x_2310;
        let x_2313 : f32 = u_xlat12.x;
        u_xlat9.z = x_2313;
        let x_2316 : f32 = u_xlat8.x;
        u_xlat9.w = x_2316;
        let x_2318 : vec4<f32> = u_xlat9;
        let x_2320 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2318.z, x_2318.w, x_2318.x, x_2318.z) + vec4<f32>(x_2320.z, x_2320.w, x_2320.x, x_2320.z));
        let x_2324 : f32 = u_xlat11.y;
        u_xlat10.z = x_2324;
        let x_2327 : f32 = u_xlat49.y;
        u_xlat10.w = x_2327;
        let x_2330 : f32 = u_xlat9.y;
        u_xlat12.z = x_2330;
        let x_2333 : f32 = u_xlat8.z;
        u_xlat12.w = x_2333;
        let x_2335 : vec4<f32> = u_xlat10;
        let x_2337 : vec4<f32> = u_xlat12;
        let x_2339 : vec3<f32> = (vec3<f32>(x_2335.z, x_2335.y, x_2335.w) + vec3<f32>(x_2337.z, x_2337.y, x_2337.w));
        let x_2340 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2339.x, x_2339.y, x_2339.z, x_2340.w);
        let x_2342 : vec4<f32> = u_xlat9;
        let x_2344 : vec4<f32> = u_xlat13;
        let x_2346 : vec3<f32> = (vec3<f32>(x_2342.x, x_2342.z, x_2342.w) / vec3<f32>(x_2344.z, x_2344.w, x_2344.y));
        let x_2347 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2346.x, x_2346.y, x_2346.z, x_2347.w);
        let x_2349 : vec4<f32> = u_xlat9;
        let x_2351 : vec3<f32> = (vec3<f32>(x_2349.x, x_2349.y, x_2349.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2352 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2351.x, x_2351.y, x_2351.z, x_2352.w);
        let x_2354 : vec4<f32> = u_xlat12;
        let x_2356 : vec4<f32> = u_xlat8;
        let x_2358 : vec3<f32> = (vec3<f32>(x_2354.z, x_2354.y, x_2354.w) / vec3<f32>(x_2356.x, x_2356.y, x_2356.z));
        let x_2359 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2358.x, x_2358.y, x_2358.z, x_2359.w);
        let x_2361 : vec4<f32> = u_xlat10;
        let x_2363 : vec3<f32> = (vec3<f32>(x_2361.x, x_2361.y, x_2361.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2364 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2363.x, x_2363.y, x_2363.z, x_2364.w);
        let x_2366 : vec4<f32> = u_xlat9;
        let x_2369 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2371 : vec3<f32> = (vec3<f32>(x_2366.y, x_2366.x, x_2366.z) * vec3<f32>(x_2369.x, x_2369.x, x_2369.x));
        let x_2372 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2371.x, x_2371.y, x_2371.z, x_2372.w);
        let x_2374 : vec4<f32> = u_xlat10;
        let x_2377 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2379 : vec3<f32> = (vec3<f32>(x_2374.x, x_2374.y, x_2374.z) * vec3<f32>(x_2377.y, x_2377.y, x_2377.y));
        let x_2380 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2379.x, x_2379.y, x_2379.z, x_2380.w);
        let x_2383 : f32 = u_xlat10.x;
        u_xlat9.w = x_2383;
        let x_2385 : vec4<f32> = u_xlat7;
        let x_2388 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2391 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2385.x, x_2385.y, x_2385.x, x_2385.y) * vec4<f32>(x_2388.x, x_2388.y, x_2388.x, x_2388.y)) + vec4<f32>(x_2391.y, x_2391.w, x_2391.x, x_2391.w));
        let x_2394 : vec4<f32> = u_xlat7;
        let x_2397 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2400 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2394.x, x_2394.y) * vec2<f32>(x_2397.x, x_2397.y)) + vec2<f32>(x_2400.z, x_2400.w));
        let x_2404 : f32 = u_xlat9.y;
        u_xlat10.w = x_2404;
        let x_2406 : vec4<f32> = u_xlat10;
        let x_2407 : vec2<f32> = vec2<f32>(x_2406.y, x_2406.z);
        let x_2408 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2408.x, x_2407.x, x_2408.z, x_2407.y);
        let x_2410 : vec4<f32> = u_xlat7;
        let x_2413 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2416 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2410.x, x_2410.y, x_2410.x, x_2410.y) * vec4<f32>(x_2413.x, x_2413.y, x_2413.x, x_2413.y)) + vec4<f32>(x_2416.x, x_2416.y, x_2416.z, x_2416.y));
        let x_2419 : vec4<f32> = u_xlat7;
        let x_2422 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2425 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2419.x, x_2419.y, x_2419.x, x_2419.y) * vec4<f32>(x_2422.x, x_2422.y, x_2422.x, x_2422.y)) + vec4<f32>(x_2425.w, x_2425.y, x_2425.w, x_2425.z));
        let x_2428 : vec4<f32> = u_xlat7;
        let x_2431 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2434 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2428.x, x_2428.y, x_2428.x, x_2428.y) * vec4<f32>(x_2431.x, x_2431.y, x_2431.x, x_2431.y)) + vec4<f32>(x_2434.x, x_2434.w, x_2434.z, x_2434.w));
        let x_2437 : vec4<f32> = u_xlat8;
        let x_2439 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2437.x, x_2437.x, x_2437.x, x_2437.y) * vec4<f32>(x_2439.z, x_2439.w, x_2439.y, x_2439.z));
        let x_2442 : vec4<f32> = u_xlat8;
        let x_2444 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2442.y, x_2442.y, x_2442.z, x_2442.z) * x_2444);
        let x_2447 : f32 = u_xlat8.z;
        let x_2449 : f32 = u_xlat13.y;
        u_xlat69 = (x_2447 * x_2449);
        let x_2452 : vec4<f32> = u_xlat11;
        let x_2453 : vec2<f32> = vec2<f32>(x_2452.x, x_2452.y);
        let x_2455 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2453.x, x_2453.y, x_2455);
        let x_2462 : vec3<f32> = txVec34;
        let x_2464 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2462.xy, x_2462.z);
        u_xlat7.x = x_2464;
        let x_2467 : vec4<f32> = u_xlat11;
        let x_2468 : vec2<f32> = vec2<f32>(x_2467.z, x_2467.w);
        let x_2470 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2468.x, x_2468.y, x_2470);
        let x_2478 : vec3<f32> = txVec35;
        let x_2480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2478.xy, x_2478.z);
        u_xlat28 = x_2480;
        let x_2481 : f32 = u_xlat28;
        let x_2483 : f32 = u_xlat14.y;
        u_xlat28 = (x_2481 * x_2483);
        let x_2486 : f32 = u_xlat14.x;
        let x_2488 : f32 = u_xlat7.x;
        let x_2490 : f32 = u_xlat28;
        u_xlat7.x = ((x_2486 * x_2488) + x_2490);
        let x_2494 : vec2<f32> = u_xlat49;
        let x_2496 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2494.x, x_2494.y, x_2496);
        let x_2503 : vec3<f32> = txVec36;
        let x_2505 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2503.xy, x_2503.z);
        u_xlat28 = x_2505;
        let x_2507 : f32 = u_xlat14.z;
        let x_2508 : f32 = u_xlat28;
        let x_2511 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2507 * x_2508) + x_2511);
        let x_2515 : vec4<f32> = u_xlat10;
        let x_2516 : vec2<f32> = vec2<f32>(x_2515.x, x_2515.y);
        let x_2518 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2516.x, x_2516.y, x_2518);
        let x_2525 : vec3<f32> = txVec37;
        let x_2527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2525.xy, x_2525.z);
        u_xlat28 = x_2527;
        let x_2529 : f32 = u_xlat14.w;
        let x_2530 : f32 = u_xlat28;
        let x_2533 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2529 * x_2530) + x_2533);
        let x_2537 : vec4<f32> = u_xlat12;
        let x_2538 : vec2<f32> = vec2<f32>(x_2537.x, x_2537.y);
        let x_2540 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2538.x, x_2538.y, x_2540);
        let x_2547 : vec3<f32> = txVec38;
        let x_2549 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2547.xy, x_2547.z);
        u_xlat28 = x_2549;
        let x_2551 : f32 = u_xlat15.x;
        let x_2552 : f32 = u_xlat28;
        let x_2555 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2551 * x_2552) + x_2555);
        let x_2559 : vec4<f32> = u_xlat12;
        let x_2560 : vec2<f32> = vec2<f32>(x_2559.z, x_2559.w);
        let x_2562 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2560.x, x_2560.y, x_2562);
        let x_2569 : vec3<f32> = txVec39;
        let x_2571 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2569.xy, x_2569.z);
        u_xlat28 = x_2571;
        let x_2573 : f32 = u_xlat15.y;
        let x_2574 : f32 = u_xlat28;
        let x_2577 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2573 * x_2574) + x_2577);
        let x_2581 : vec4<f32> = u_xlat10;
        let x_2582 : vec2<f32> = vec2<f32>(x_2581.z, x_2581.w);
        let x_2584 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2582.x, x_2582.y, x_2584);
        let x_2591 : vec3<f32> = txVec40;
        let x_2593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2591.xy, x_2591.z);
        u_xlat28 = x_2593;
        let x_2595 : f32 = u_xlat15.z;
        let x_2596 : f32 = u_xlat28;
        let x_2599 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2595 * x_2596) + x_2599);
        let x_2603 : vec4<f32> = u_xlat9;
        let x_2604 : vec2<f32> = vec2<f32>(x_2603.x, x_2603.y);
        let x_2606 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2604.x, x_2604.y, x_2606);
        let x_2613 : vec3<f32> = txVec41;
        let x_2615 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2613.xy, x_2613.z);
        u_xlat28 = x_2615;
        let x_2617 : f32 = u_xlat15.w;
        let x_2618 : f32 = u_xlat28;
        let x_2621 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2617 * x_2618) + x_2621);
        let x_2625 : vec4<f32> = u_xlat9;
        let x_2626 : vec2<f32> = vec2<f32>(x_2625.z, x_2625.w);
        let x_2628 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2626.x, x_2626.y, x_2628);
        let x_2635 : vec3<f32> = txVec42;
        let x_2637 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2635.xy, x_2635.z);
        u_xlat28 = x_2637;
        let x_2638 : f32 = u_xlat69;
        let x_2639 : f32 = u_xlat28;
        let x_2642 : f32 = u_xlat7.x;
        u_xlat63 = ((x_2638 * x_2639) + x_2642);
      } else {
        let x_2645 : vec4<f32> = vs_INTERP9;
        let x_2648 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2651 : vec2<f32> = ((vec2<f32>(x_2645.x, x_2645.y) * vec2<f32>(x_2648.z, x_2648.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2652 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2651.x, x_2651.y, x_2652.z, x_2652.w);
        let x_2654 : vec4<f32> = u_xlat7;
        let x_2656 : vec2<f32> = floor(vec2<f32>(x_2654.x, x_2654.y));
        let x_2657 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2656.x, x_2656.y, x_2657.z, x_2657.w);
        let x_2659 : vec4<f32> = vs_INTERP9;
        let x_2662 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2665 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2659.x, x_2659.y) * vec2<f32>(x_2662.z, x_2662.w)) + -(vec2<f32>(x_2665.x, x_2665.y)));
        let x_2669 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2669.x, x_2669.x, x_2669.y, x_2669.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2672 : vec4<f32> = u_xlat8;
        let x_2674 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2672.x, x_2672.x, x_2672.z, x_2672.z) * vec4<f32>(x_2674.x, x_2674.x, x_2674.z, x_2674.z));
        let x_2677 : vec4<f32> = u_xlat9;
        let x_2679 : vec2<f32> = (vec2<f32>(x_2677.y, x_2677.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2680 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2680.x, x_2679.x, x_2680.z, x_2679.y);
        let x_2682 : vec4<f32> = u_xlat9;
        let x_2685 : vec2<f32> = u_xlat49;
        let x_2687 : vec2<f32> = ((vec2<f32>(x_2682.x, x_2682.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2685));
        let x_2688 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2687.x, x_2688.y, x_2687.y, x_2688.w);
        let x_2690 : vec2<f32> = u_xlat49;
        let x_2692 : vec2<f32> = (-(x_2690) + vec2<f32>(1.0f, 1.0f));
        let x_2693 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2692.x, x_2692.y, x_2693.z, x_2693.w);
        let x_2695 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2695, vec2<f32>(0.0f, 0.0f));
        let x_2697 : vec2<f32> = u_xlat51;
        let x_2699 : vec2<f32> = u_xlat51;
        let x_2701 : vec4<f32> = u_xlat9;
        let x_2703 : vec2<f32> = ((-(x_2697) * x_2699) + vec2<f32>(x_2701.x, x_2701.y));
        let x_2704 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2703.x, x_2703.y, x_2704.z, x_2704.w);
        let x_2706 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2706, vec2<f32>(0.0f, 0.0f));
        let x_2708 : vec2<f32> = u_xlat51;
        let x_2710 : vec2<f32> = u_xlat51;
        let x_2712 : vec4<f32> = u_xlat8;
        let x_2714 : vec2<f32> = ((-(x_2708) * x_2710) + vec2<f32>(x_2712.y, x_2712.w));
        let x_2715 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2714.x, x_2715.y, x_2714.y);
        let x_2717 : vec4<f32> = u_xlat9;
        let x_2719 : vec2<f32> = (vec2<f32>(x_2717.x, x_2717.y) + vec2<f32>(2.0f, 2.0f));
        let x_2720 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2719.x, x_2719.y, x_2720.z, x_2720.w);
        let x_2722 : vec3<f32> = u_xlat29;
        let x_2724 : vec2<f32> = (vec2<f32>(x_2722.x, x_2722.z) + vec2<f32>(2.0f, 2.0f));
        let x_2725 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2725.x, x_2724.x, x_2725.z, x_2724.y);
        let x_2728 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2728 * 0.081632003f);
        let x_2731 : vec4<f32> = u_xlat8;
        let x_2733 : vec3<f32> = (vec3<f32>(x_2731.z, x_2731.x, x_2731.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2734 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2733.x, x_2733.y, x_2733.z, x_2734.w);
        let x_2736 : vec4<f32> = u_xlat9;
        let x_2738 : vec2<f32> = (vec2<f32>(x_2736.x, x_2736.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2739 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2738.x, x_2738.y, x_2739.z, x_2739.w);
        let x_2742 : f32 = u_xlat12.y;
        u_xlat11.x = x_2742;
        let x_2744 : vec2<f32> = u_xlat49;
        let x_2747 : vec2<f32> = ((vec2<f32>(x_2744.x, x_2744.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2748 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2748.x, x_2747.x, x_2748.z, x_2747.y);
        let x_2750 : vec2<f32> = u_xlat49;
        let x_2753 : vec2<f32> = ((vec2<f32>(x_2750.x, x_2750.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2754 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2753.x, x_2754.y, x_2753.y, x_2754.w);
        let x_2757 : f32 = u_xlat8.x;
        u_xlat9.y = x_2757;
        let x_2760 : f32 = u_xlat10.y;
        u_xlat9.w = x_2760;
        let x_2762 : vec4<f32> = u_xlat9;
        let x_2763 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2762 + x_2763);
        let x_2765 : vec2<f32> = u_xlat49;
        let x_2768 : vec2<f32> = ((vec2<f32>(x_2765.y, x_2765.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2769 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2769.x, x_2768.x, x_2769.z, x_2768.y);
        let x_2771 : vec2<f32> = u_xlat49;
        let x_2774 : vec2<f32> = ((vec2<f32>(x_2771.y, x_2771.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2775 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2774.x, x_2775.y, x_2774.y, x_2775.w);
        let x_2778 : f32 = u_xlat8.y;
        u_xlat10.y = x_2778;
        let x_2780 : vec4<f32> = u_xlat10;
        let x_2781 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2780 + x_2781);
        let x_2783 : vec4<f32> = u_xlat9;
        let x_2784 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2783 / x_2784);
        let x_2786 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2786 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2788 : vec4<f32> = u_xlat10;
        let x_2789 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2788 / x_2789);
        let x_2791 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2791 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2793 : vec4<f32> = u_xlat9;
        let x_2796 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2793.w, x_2793.x, x_2793.y, x_2793.z) * vec4<f32>(x_2796.x, x_2796.x, x_2796.x, x_2796.x));
        let x_2799 : vec4<f32> = u_xlat10;
        let x_2802 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2799.x, x_2799.w, x_2799.y, x_2799.z) * vec4<f32>(x_2802.y, x_2802.y, x_2802.y, x_2802.y));
        let x_2805 : vec4<f32> = u_xlat9;
        let x_2806 : vec3<f32> = vec3<f32>(x_2805.y, x_2805.z, x_2805.w);
        let x_2807 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2806.x, x_2807.y, x_2806.y, x_2806.z);
        let x_2810 : f32 = u_xlat10.x;
        u_xlat12.y = x_2810;
        let x_2812 : vec4<f32> = u_xlat7;
        let x_2815 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2818 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2812.x, x_2812.y, x_2812.x, x_2812.y) * vec4<f32>(x_2815.x, x_2815.y, x_2815.x, x_2815.y)) + vec4<f32>(x_2818.x, x_2818.y, x_2818.z, x_2818.y));
        let x_2821 : vec4<f32> = u_xlat7;
        let x_2824 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2827 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2821.x, x_2821.y) * vec2<f32>(x_2824.x, x_2824.y)) + vec2<f32>(x_2827.w, x_2827.y));
        let x_2831 : f32 = u_xlat12.y;
        u_xlat9.y = x_2831;
        let x_2834 : f32 = u_xlat10.z;
        u_xlat12.y = x_2834;
        let x_2836 : vec4<f32> = u_xlat7;
        let x_2839 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2842 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2836.x, x_2836.y, x_2836.x, x_2836.y) * vec4<f32>(x_2839.x, x_2839.y, x_2839.x, x_2839.y)) + vec4<f32>(x_2842.x, x_2842.y, x_2842.z, x_2842.y));
        let x_2845 : vec4<f32> = u_xlat7;
        let x_2848 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2851 : vec4<f32> = u_xlat12;
        let x_2853 : vec2<f32> = ((vec2<f32>(x_2845.x, x_2845.y) * vec2<f32>(x_2848.x, x_2848.y)) + vec2<f32>(x_2851.w, x_2851.y));
        let x_2854 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2853.x, x_2853.y, x_2854.z, x_2854.w);
        let x_2857 : f32 = u_xlat12.y;
        u_xlat9.z = x_2857;
        let x_2859 : vec4<f32> = u_xlat7;
        let x_2862 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2865 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2859.x, x_2859.y, x_2859.x, x_2859.y) * vec4<f32>(x_2862.x, x_2862.y, x_2862.x, x_2862.y)) + vec4<f32>(x_2865.x, x_2865.y, x_2865.x, x_2865.z));
        let x_2869 : f32 = u_xlat10.w;
        u_xlat12.y = x_2869;
        let x_2871 : vec4<f32> = u_xlat7;
        let x_2874 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2877 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2871.x, x_2871.y, x_2871.x, x_2871.y) * vec4<f32>(x_2874.x, x_2874.y, x_2874.x, x_2874.y)) + vec4<f32>(x_2877.x, x_2877.y, x_2877.z, x_2877.y));
        let x_2880 : vec4<f32> = u_xlat7;
        let x_2883 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2886 : vec4<f32> = u_xlat12;
        let x_2888 : vec2<f32> = ((vec2<f32>(x_2880.x, x_2880.y) * vec2<f32>(x_2883.x, x_2883.y)) + vec2<f32>(x_2886.w, x_2886.y));
        let x_2889 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2888.x, x_2888.y, x_2889.z);
        let x_2892 : f32 = u_xlat12.y;
        u_xlat9.w = x_2892;
        let x_2894 : vec4<f32> = u_xlat7;
        let x_2897 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2900 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2894.x, x_2894.y) * vec2<f32>(x_2897.x, x_2897.y)) + vec2<f32>(x_2900.x, x_2900.w));
        let x_2903 : vec4<f32> = u_xlat12;
        let x_2904 : vec3<f32> = vec3<f32>(x_2903.x, x_2903.z, x_2903.w);
        let x_2905 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2904.x, x_2905.y, x_2904.y, x_2904.z);
        let x_2907 : vec4<f32> = u_xlat7;
        let x_2910 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2913 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2907.x, x_2907.y, x_2907.x, x_2907.y) * vec4<f32>(x_2910.x, x_2910.y, x_2910.x, x_2910.y)) + vec4<f32>(x_2913.x, x_2913.y, x_2913.z, x_2913.y));
        let x_2916 : vec4<f32> = u_xlat7;
        let x_2919 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2922 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2916.x, x_2916.y) * vec2<f32>(x_2919.x, x_2919.y)) + vec2<f32>(x_2922.w, x_2922.y));
        let x_2926 : f32 = u_xlat9.x;
        u_xlat10.x = x_2926;
        let x_2928 : vec4<f32> = u_xlat7;
        let x_2931 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2934 : vec4<f32> = u_xlat10;
        let x_2936 : vec2<f32> = ((vec2<f32>(x_2928.x, x_2928.y) * vec2<f32>(x_2931.x, x_2931.y)) + vec2<f32>(x_2934.x, x_2934.y));
        let x_2937 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2936.x, x_2936.y, x_2937.z, x_2937.w);
        let x_2939 : vec4<f32> = u_xlat8;
        let x_2941 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2939.x, x_2939.x, x_2939.x, x_2939.x) * x_2941);
        let x_2943 : vec4<f32> = u_xlat8;
        let x_2945 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2943.y, x_2943.y, x_2943.y, x_2943.y) * x_2945);
        let x_2947 : vec4<f32> = u_xlat8;
        let x_2949 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2947.z, x_2947.z, x_2947.z, x_2947.z) * x_2949);
        let x_2951 : vec4<f32> = u_xlat8;
        let x_2953 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2951.w, x_2951.w, x_2951.w, x_2951.w) * x_2953);
        let x_2956 : vec4<f32> = u_xlat13;
        let x_2957 : vec2<f32> = vec2<f32>(x_2956.x, x_2956.y);
        let x_2959 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2957.x, x_2957.y, x_2959);
        let x_2966 : vec3<f32> = txVec43;
        let x_2968 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2966.xy, x_2966.z);
        u_xlat69 = x_2968;
        let x_2970 : vec4<f32> = u_xlat13;
        let x_2971 : vec2<f32> = vec2<f32>(x_2970.z, x_2970.w);
        let x_2973 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2971.x, x_2971.y, x_2973);
        let x_2980 : vec3<f32> = txVec44;
        let x_2982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2980.xy, x_2980.z);
        u_xlat9.x = x_2982;
        let x_2985 : f32 = u_xlat9.x;
        let x_2987 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2985 * x_2987);
        let x_2991 : f32 = u_xlat18.x;
        let x_2992 : f32 = u_xlat69;
        let x_2995 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2991 * x_2992) + x_2995);
        let x_2998 : vec2<f32> = u_xlat49;
        let x_3000 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2998.x, x_2998.y, x_3000);
        let x_3007 : vec3<f32> = txVec45;
        let x_3009 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3007.xy, x_3007.z);
        u_xlat49.x = x_3009;
        let x_3012 : f32 = u_xlat18.z;
        let x_3014 : f32 = u_xlat49.x;
        let x_3016 : f32 = u_xlat69;
        u_xlat69 = ((x_3012 * x_3014) + x_3016);
        let x_3019 : vec4<f32> = u_xlat16;
        let x_3020 : vec2<f32> = vec2<f32>(x_3019.x, x_3019.y);
        let x_3022 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_3020.x, x_3020.y, x_3022);
        let x_3029 : vec3<f32> = txVec46;
        let x_3031 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3029.xy, x_3029.z);
        u_xlat49.x = x_3031;
        let x_3034 : f32 = u_xlat18.w;
        let x_3036 : f32 = u_xlat49.x;
        let x_3038 : f32 = u_xlat69;
        u_xlat69 = ((x_3034 * x_3036) + x_3038);
        let x_3041 : vec4<f32> = u_xlat14;
        let x_3042 : vec2<f32> = vec2<f32>(x_3041.x, x_3041.y);
        let x_3044 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3042.x, x_3042.y, x_3044);
        let x_3051 : vec3<f32> = txVec47;
        let x_3053 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3051.xy, x_3051.z);
        u_xlat49.x = x_3053;
        let x_3056 : f32 = u_xlat19.x;
        let x_3058 : f32 = u_xlat49.x;
        let x_3060 : f32 = u_xlat69;
        u_xlat69 = ((x_3056 * x_3058) + x_3060);
        let x_3063 : vec4<f32> = u_xlat14;
        let x_3064 : vec2<f32> = vec2<f32>(x_3063.z, x_3063.w);
        let x_3066 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3064.x, x_3064.y, x_3066);
        let x_3073 : vec3<f32> = txVec48;
        let x_3075 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3073.xy, x_3073.z);
        u_xlat49.x = x_3075;
        let x_3078 : f32 = u_xlat19.y;
        let x_3080 : f32 = u_xlat49.x;
        let x_3082 : f32 = u_xlat69;
        u_xlat69 = ((x_3078 * x_3080) + x_3082);
        let x_3085 : vec4<f32> = u_xlat15;
        let x_3086 : vec2<f32> = vec2<f32>(x_3085.x, x_3085.y);
        let x_3088 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3086.x, x_3086.y, x_3088);
        let x_3095 : vec3<f32> = txVec49;
        let x_3097 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3095.xy, x_3095.z);
        u_xlat49.x = x_3097;
        let x_3100 : f32 = u_xlat19.z;
        let x_3102 : f32 = u_xlat49.x;
        let x_3104 : f32 = u_xlat69;
        u_xlat69 = ((x_3100 * x_3102) + x_3104);
        let x_3107 : vec4<f32> = u_xlat16;
        let x_3108 : vec2<f32> = vec2<f32>(x_3107.z, x_3107.w);
        let x_3110 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3108.x, x_3108.y, x_3110);
        let x_3117 : vec3<f32> = txVec50;
        let x_3119 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3117.xy, x_3117.z);
        u_xlat49.x = x_3119;
        let x_3122 : f32 = u_xlat19.w;
        let x_3124 : f32 = u_xlat49.x;
        let x_3126 : f32 = u_xlat69;
        u_xlat69 = ((x_3122 * x_3124) + x_3126);
        let x_3129 : vec4<f32> = u_xlat17;
        let x_3130 : vec2<f32> = vec2<f32>(x_3129.x, x_3129.y);
        let x_3132 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3130.x, x_3130.y, x_3132);
        let x_3139 : vec3<f32> = txVec51;
        let x_3141 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3139.xy, x_3139.z);
        u_xlat49.x = x_3141;
        let x_3144 : f32 = u_xlat20.x;
        let x_3146 : f32 = u_xlat49.x;
        let x_3148 : f32 = u_xlat69;
        u_xlat69 = ((x_3144 * x_3146) + x_3148);
        let x_3151 : vec4<f32> = u_xlat17;
        let x_3152 : vec2<f32> = vec2<f32>(x_3151.z, x_3151.w);
        let x_3154 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3152.x, x_3152.y, x_3154);
        let x_3161 : vec3<f32> = txVec52;
        let x_3163 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3161.xy, x_3161.z);
        u_xlat49.x = x_3163;
        let x_3166 : f32 = u_xlat20.y;
        let x_3168 : f32 = u_xlat49.x;
        let x_3170 : f32 = u_xlat69;
        u_xlat69 = ((x_3166 * x_3168) + x_3170);
        let x_3173 : vec3<f32> = u_xlat30;
        let x_3174 : vec2<f32> = vec2<f32>(x_3173.x, x_3173.y);
        let x_3176 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3174.x, x_3174.y, x_3176);
        let x_3183 : vec3<f32> = txVec53;
        let x_3185 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3183.xy, x_3183.z);
        u_xlat49.x = x_3185;
        let x_3188 : f32 = u_xlat20.z;
        let x_3190 : f32 = u_xlat49.x;
        let x_3192 : f32 = u_xlat69;
        u_xlat69 = ((x_3188 * x_3190) + x_3192);
        let x_3195 : vec2<f32> = u_xlat57;
        let x_3197 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3195.x, x_3195.y, x_3197);
        let x_3204 : vec3<f32> = txVec54;
        let x_3206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3204.xy, x_3204.z);
        u_xlat49.x = x_3206;
        let x_3209 : f32 = u_xlat20.w;
        let x_3211 : f32 = u_xlat49.x;
        let x_3213 : f32 = u_xlat69;
        u_xlat69 = ((x_3209 * x_3211) + x_3213);
        let x_3216 : vec4<f32> = u_xlat12;
        let x_3217 : vec2<f32> = vec2<f32>(x_3216.x, x_3216.y);
        let x_3219 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3217.x, x_3217.y, x_3219);
        let x_3226 : vec3<f32> = txVec55;
        let x_3228 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3226.xy, x_3226.z);
        u_xlat49.x = x_3228;
        let x_3231 : f32 = u_xlat8.x;
        let x_3233 : f32 = u_xlat49.x;
        let x_3235 : f32 = u_xlat69;
        u_xlat69 = ((x_3231 * x_3233) + x_3235);
        let x_3238 : vec4<f32> = u_xlat12;
        let x_3239 : vec2<f32> = vec2<f32>(x_3238.z, x_3238.w);
        let x_3241 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3239.x, x_3239.y, x_3241);
        let x_3248 : vec3<f32> = txVec56;
        let x_3250 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3248.xy, x_3248.z);
        u_xlat49.x = x_3250;
        let x_3253 : f32 = u_xlat8.y;
        let x_3255 : f32 = u_xlat49.x;
        let x_3257 : f32 = u_xlat69;
        u_xlat69 = ((x_3253 * x_3255) + x_3257);
        let x_3260 : vec2<f32> = u_xlat52;
        let x_3262 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3260.x, x_3260.y, x_3262);
        let x_3269 : vec3<f32> = txVec57;
        let x_3271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3269.xy, x_3269.z);
        u_xlat49.x = x_3271;
        let x_3274 : f32 = u_xlat8.z;
        let x_3276 : f32 = u_xlat49.x;
        let x_3278 : f32 = u_xlat69;
        u_xlat69 = ((x_3274 * x_3276) + x_3278);
        let x_3281 : vec4<f32> = u_xlat7;
        let x_3282 : vec2<f32> = vec2<f32>(x_3281.x, x_3281.y);
        let x_3284 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3282.x, x_3282.y, x_3284);
        let x_3291 : vec3<f32> = txVec58;
        let x_3293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3291.xy, x_3291.z);
        u_xlat7.x = x_3293;
        let x_3296 : f32 = u_xlat8.w;
        let x_3298 : f32 = u_xlat7.x;
        let x_3300 : f32 = u_xlat69;
        u_xlat63 = ((x_3296 * x_3298) + x_3300);
      }
    }
  } else {
    let x_3304 : vec4<f32> = vs_INTERP9;
    let x_3305 : vec2<f32> = vec2<f32>(x_3304.x, x_3304.y);
    let x_3307 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3305.x, x_3305.y, x_3307);
    let x_3314 : vec3<f32> = txVec59;
    let x_3316 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3314.xy, x_3314.z);
    u_xlat63 = x_3316;
  }
  let x_3317 : f32 = u_xlat63;
  let x_3319 : f32 = x_256.x_MainLightShadowParams.x;
  let x_3321 : f32 = u_xlat65;
  u_xlat63 = ((x_3317 * x_3319) + x_3321);
  let x_3324 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3324);
  let x_3327 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3327 >= 1.0f);
  let x_3329 : bool = u_xlatb65;
  let x_3330 : bool = u_xlatb69;
  u_xlatb65 = (x_3329 | x_3330);
  let x_3332 : bool = u_xlatb65;
  let x_3333 : f32 = u_xlat63;
  u_xlat63 = select(x_3333, 1.0f, x_3332);
  let x_3335 : vec3<f32> = vs_INTERP0;
  let x_3337 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3339 : vec3<f32> = (x_3335 + -(x_3337));
  let x_3340 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3339.x, x_3339.y, x_3339.z, x_3340.w);
  let x_3342 : vec4<f32> = u_xlat7;
  let x_3344 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3342.x, x_3342.y, x_3342.z), vec3<f32>(x_3344.x, x_3344.y, x_3344.z));
  let x_3347 : f32 = u_xlat65;
  let x_3349 : f32 = x_256.x_MainLightShadowParams.z;
  let x_3352 : f32 = x_256.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3347 * x_3349) + x_3352);
  let x_3354 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3354, 0.0f, 1.0f);
  let x_3356 : f32 = u_xlat63;
  u_xlat69 = (-(x_3356) + 1.0f);
  let x_3359 : f32 = u_xlat65;
  let x_3360 : f32 = u_xlat69;
  let x_3362 : f32 = u_xlat63;
  u_xlat63 = ((x_3359 * x_3360) + x_3362);
  let x_3370 : f32 = x_3368.x_MainLightCookieTextureFormat;
  u_xlatb65 = !((x_3370 == -1.0f));
  let x_3372 : bool = u_xlatb65;
  if (x_3372) {
    let x_3375 : vec3<f32> = vs_INTERP0;
    let x_3378 : vec4<f32> = x_3368.x_MainLightWorldToLight[1i];
    let x_3380 : vec2<f32> = (vec2<f32>(x_3375.y, x_3375.y) * vec2<f32>(x_3378.x, x_3378.y));
    let x_3381 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3380.x, x_3380.y, x_3381.z, x_3381.w);
    let x_3384 : vec4<f32> = x_3368.x_MainLightWorldToLight[0i];
    let x_3386 : vec3<f32> = vs_INTERP0;
    let x_3389 : vec4<f32> = u_xlat7;
    let x_3391 : vec2<f32> = ((vec2<f32>(x_3384.x, x_3384.y) * vec2<f32>(x_3386.x, x_3386.x)) + vec2<f32>(x_3389.x, x_3389.y));
    let x_3392 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3391.x, x_3391.y, x_3392.z, x_3392.w);
    let x_3395 : vec4<f32> = x_3368.x_MainLightWorldToLight[2i];
    let x_3397 : vec3<f32> = vs_INTERP0;
    let x_3400 : vec4<f32> = u_xlat7;
    let x_3402 : vec2<f32> = ((vec2<f32>(x_3395.x, x_3395.y) * vec2<f32>(x_3397.z, x_3397.z)) + vec2<f32>(x_3400.x, x_3400.y));
    let x_3403 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3402.x, x_3402.y, x_3403.z, x_3403.w);
    let x_3405 : vec4<f32> = u_xlat7;
    let x_3408 : vec4<f32> = x_3368.x_MainLightWorldToLight[3i];
    let x_3410 : vec2<f32> = (vec2<f32>(x_3405.x, x_3405.y) + vec2<f32>(x_3408.x, x_3408.y));
    let x_3411 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3410.x, x_3410.y, x_3411.z, x_3411.w);
    let x_3413 : vec4<f32> = u_xlat7;
    let x_3416 : vec2<f32> = ((vec2<f32>(x_3413.x, x_3413.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3417 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3416.x, x_3416.y, x_3417.z, x_3417.w);
    let x_3424 : vec4<f32> = u_xlat7;
    let x_3427 : f32 = x_90.x_GlobalMipBias.x;
    let x_3428 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3424.x, x_3424.y), x_3427);
    u_xlat7 = x_3428;
    let x_3431 : f32 = x_3368.x_MainLightCookieTextureFormat;
    let x_3433 : f32 = x_3368.x_MainLightCookieTextureFormat;
    let x_3435 : f32 = x_3368.x_MainLightCookieTextureFormat;
    let x_3437 : f32 = x_3368.x_MainLightCookieTextureFormat;
    let x_3438 : vec4<f32> = vec4<f32>(x_3431, x_3433, x_3435, x_3437);
    let x_3446 : vec4<bool> = (vec4<f32>(x_3438.x, x_3438.y, x_3438.z, x_3438.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3446.x, x_3446.y);
    let x_3449 : bool = u_xlatb8.y;
    if (x_3449) {
      let x_3454 : f32 = u_xlat7.w;
      x_3450 = x_3454;
    } else {
      let x_3457 : f32 = u_xlat7.x;
      x_3450 = x_3457;
    }
    let x_3458 : f32 = x_3450;
    u_xlat65 = x_3458;
    let x_3460 : bool = u_xlatb8.x;
    if (x_3460) {
      let x_3464 : vec4<f32> = u_xlat7;
      x_3461 = vec3<f32>(x_3464.x, x_3464.y, x_3464.z);
    } else {
      let x_3467 : f32 = u_xlat65;
      x_3461 = vec3<f32>(x_3467, x_3467, x_3467);
    }
    let x_3469 : vec3<f32> = x_3461;
    let x_3470 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3469.x, x_3469.y, x_3469.z, x_3470.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3476 : vec4<f32> = u_xlat7;
  let x_3479 : vec4<f32> = x_90.x_MainLightColor;
  let x_3481 : vec3<f32> = (vec3<f32>(x_3476.x, x_3476.y, x_3476.z) * vec3<f32>(x_3479.x, x_3479.y, x_3479.z));
  let x_3482 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3481.x, x_3481.y, x_3481.z, x_3482.w);
  let x_3484 : f32 = u_xlat48;
  let x_3486 : vec4<f32> = u_xlat7;
  let x_3488 : vec3<f32> = (vec3<f32>(x_3484, x_3484, x_3484) * vec3<f32>(x_3486.x, x_3486.y, x_3486.z));
  let x_3489 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3488.x, x_3488.y, x_3488.z, x_3489.w);
  let x_3491 : vec3<f32> = u_xlat1;
  let x_3493 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3491), vec3<f32>(x_3493.x, x_3493.y, x_3493.z));
  let x_3496 : f32 = u_xlat65;
  let x_3497 : f32 = u_xlat65;
  u_xlat65 = (x_3496 + x_3497);
  let x_3499 : vec4<f32> = u_xlat3;
  let x_3501 : f32 = u_xlat65;
  let x_3505 : vec3<f32> = u_xlat1;
  let x_3507 : vec3<f32> = ((vec3<f32>(x_3499.x, x_3499.y, x_3499.z) * -(vec3<f32>(x_3501, x_3501, x_3501))) + -(x_3505));
  let x_3508 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3507.x, x_3507.y, x_3507.z, x_3508.w);
  let x_3510 : vec4<f32> = u_xlat3;
  let x_3512 : vec3<f32> = u_xlat1;
  u_xlat65 = dot(vec3<f32>(x_3510.x, x_3510.y, x_3510.z), x_3512);
  let x_3514 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3514, 0.0f, 1.0f);
  let x_3516 : f32 = u_xlat65;
  u_xlat65 = (-(x_3516) + 1.0f);
  let x_3519 : f32 = u_xlat65;
  let x_3520 : f32 = u_xlat65;
  u_xlat65 = (x_3519 * x_3520);
  let x_3522 : f32 = u_xlat65;
  let x_3523 : f32 = u_xlat65;
  u_xlat65 = (x_3522 * x_3523);
  let x_3525 : f32 = u_xlat44;
  u_xlat69 = ((-(x_3525) * 0.699999988f) + 1.700000048f);
  let x_3531 : f32 = u_xlat44;
  let x_3532 : f32 = u_xlat69;
  u_xlat44 = (x_3531 * x_3532);
  let x_3534 : f32 = u_xlat44;
  u_xlat44 = (x_3534 * 6.0f);
  let x_3545 : vec4<f32> = u_xlat8;
  let x_3547 : f32 = u_xlat44;
  let x_3548 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3545.x, x_3545.y, x_3545.z), x_3547);
  u_xlat8 = x_3548;
  let x_3550 : f32 = u_xlat8.w;
  u_xlat44 = (x_3550 + -1.0f);
  let x_3553 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3554 : f32 = u_xlat44;
  u_xlat44 = ((x_3553 * x_3554) + 1.0f);
  let x_3557 : f32 = u_xlat44;
  u_xlat44 = max(x_3557, 0.0f);
  let x_3559 : f32 = u_xlat44;
  u_xlat44 = log2(x_3559);
  let x_3561 : f32 = u_xlat44;
  let x_3563 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat44 = (x_3561 * x_3563);
  let x_3565 : f32 = u_xlat44;
  u_xlat44 = exp2(x_3565);
  let x_3567 : f32 = u_xlat44;
  let x_3569 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat44 = (x_3567 * x_3569);
  let x_3571 : vec4<f32> = u_xlat8;
  let x_3573 : f32 = u_xlat44;
  let x_3575 : vec3<f32> = (vec3<f32>(x_3571.x, x_3571.y, x_3571.z) * vec3<f32>(x_3573, x_3573, x_3573));
  let x_3576 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3575.x, x_3575.y, x_3575.z, x_3576.w);
  let x_3578 : f32 = u_xlat66;
  let x_3580 : f32 = u_xlat66;
  let x_3584 : vec2<f32> = ((vec2<f32>(x_3578, x_3578) * vec2<f32>(x_3580, x_3580)) + vec2<f32>(-1.0f, 1.0f));
  let x_3585 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3584.x, x_3584.y, x_3585.z, x_3585.w);
  let x_3588 : f32 = u_xlat9.y;
  u_xlat44 = (1.0f / x_3588);
  let x_3591 : f32 = u_xlat5.x;
  u_xlat66 = (x_3591 + -0.039999999f);
  let x_3594 : f32 = u_xlat65;
  let x_3595 : f32 = u_xlat66;
  u_xlat65 = ((x_3594 * x_3595) + 0.039999999f);
  let x_3599 : f32 = u_xlat65;
  let x_3600 : f32 = u_xlat44;
  u_xlat44 = (x_3599 * x_3600);
  let x_3602 : f32 = u_xlat44;
  let x_3604 : vec4<f32> = u_xlat8;
  let x_3606 : vec3<f32> = (vec3<f32>(x_3602, x_3602, x_3602) * vec3<f32>(x_3604.x, x_3604.y, x_3604.z));
  let x_3607 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3606.x, x_3606.y, x_3606.z, x_3607.w);
  let x_3609 : vec3<f32> = u_xlat26;
  let x_3610 : vec3<f32> = u_xlat4;
  let x_3612 : vec4<f32> = u_xlat8;
  let x_3614 : vec3<f32> = ((x_3609 * x_3610) + vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
  let x_3615 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3614.x, x_3614.y, x_3614.z, x_3615.w);
  let x_3617 : f32 = u_xlat63;
  let x_3619 : f32 = x_145.unity_LightData.z;
  u_xlat63 = (x_3617 * x_3619);
  let x_3621 : vec4<f32> = u_xlat3;
  let x_3624 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat44 = dot(vec3<f32>(x_3621.x, x_3621.y, x_3621.z), vec3<f32>(x_3624.x, x_3624.y, x_3624.z));
  let x_3627 : f32 = u_xlat44;
  u_xlat44 = clamp(x_3627, 0.0f, 1.0f);
  let x_3629 : f32 = u_xlat63;
  let x_3630 : f32 = u_xlat44;
  u_xlat63 = (x_3629 * x_3630);
  let x_3632 : f32 = u_xlat63;
  let x_3634 : vec4<f32> = u_xlat7;
  let x_3636 : vec3<f32> = (vec3<f32>(x_3632, x_3632, x_3632) * vec3<f32>(x_3634.x, x_3634.y, x_3634.z));
  let x_3637 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3636.x, x_3636.y, x_3636.z, x_3637.w);
  let x_3639 : vec3<f32> = u_xlat1;
  let x_3641 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3643 : vec3<f32> = (x_3639 + vec3<f32>(x_3641.x, x_3641.y, x_3641.z));
  let x_3644 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3643.x, x_3643.y, x_3643.z, x_3644.w);
  let x_3646 : vec4<f32> = u_xlat8;
  let x_3648 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3646.x, x_3646.y, x_3646.z), vec3<f32>(x_3648.x, x_3648.y, x_3648.z));
  let x_3651 : f32 = u_xlat63;
  u_xlat63 = max(x_3651, 1.17549435e-37f);
  let x_3654 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3654);
  let x_3656 : f32 = u_xlat63;
  let x_3658 : vec4<f32> = u_xlat8;
  let x_3660 : vec3<f32> = (vec3<f32>(x_3656, x_3656, x_3656) * vec3<f32>(x_3658.x, x_3658.y, x_3658.z));
  let x_3661 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3660.x, x_3660.y, x_3660.z, x_3661.w);
  let x_3663 : vec4<f32> = u_xlat3;
  let x_3665 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3663.x, x_3663.y, x_3663.z), vec3<f32>(x_3665.x, x_3665.y, x_3665.z));
  let x_3668 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3668, 0.0f, 1.0f);
  let x_3671 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3673 : vec4<f32> = u_xlat8;
  u_xlat44 = dot(vec3<f32>(x_3671.x, x_3671.y, x_3671.z), vec3<f32>(x_3673.x, x_3673.y, x_3673.z));
  let x_3676 : f32 = u_xlat44;
  u_xlat44 = clamp(x_3676, 0.0f, 1.0f);
  let x_3678 : f32 = u_xlat63;
  let x_3679 : f32 = u_xlat63;
  u_xlat63 = (x_3678 * x_3679);
  let x_3681 : f32 = u_xlat63;
  let x_3683 : f32 = u_xlat9.x;
  u_xlat63 = ((x_3681 * x_3683) + 1.000010014f);
  let x_3687 : f32 = u_xlat44;
  let x_3688 : f32 = u_xlat44;
  u_xlat44 = (x_3687 * x_3688);
  let x_3690 : f32 = u_xlat63;
  let x_3691 : f32 = u_xlat63;
  u_xlat63 = (x_3690 * x_3691);
  let x_3693 : f32 = u_xlat44;
  u_xlat44 = max(x_3693, 0.100000001f);
  let x_3696 : f32 = u_xlat63;
  let x_3697 : f32 = u_xlat44;
  u_xlat63 = (x_3696 * x_3697);
  let x_3699 : f32 = u_xlat27;
  let x_3700 : f32 = u_xlat63;
  u_xlat63 = (x_3699 * x_3700);
  let x_3702 : f32 = u_xlat67;
  let x_3703 : f32 = u_xlat63;
  u_xlat63 = (x_3702 / x_3703);
  let x_3705 : f32 = u_xlat63;
  let x_3709 : vec3<f32> = u_xlat4;
  let x_3710 : vec3<f32> = ((vec3<f32>(x_3705, x_3705, x_3705) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3709);
  let x_3711 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3710.x, x_3710.y, x_3710.z, x_3711.w);
  let x_3713 : vec4<f32> = u_xlat7;
  let x_3715 : vec4<f32> = u_xlat8;
  let x_3717 : vec3<f32> = (vec3<f32>(x_3713.x, x_3713.y, x_3713.z) * vec3<f32>(x_3715.x, x_3715.y, x_3715.z));
  let x_3718 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3717.x, x_3717.y, x_3717.z, x_3718.w);
  let x_3721 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3723 : f32 = x_145.unity_LightData.y;
  u_xlat63 = min(x_3721, x_3723);
  let x_3726 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3726));
  let x_3731 : f32 = x_3368.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3733 : f32 = x_3368.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3735 : f32 = x_3368.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3737 : f32 = x_3368.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3738 : vec4<f32> = vec4<f32>(x_3731, x_3733, x_3735, x_3737);
  let x_3745 : vec4<bool> = (vec4<f32>(x_3738.x, x_3738.y, x_3738.z, x_3738.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb44 = vec2<bool>(x_3745.x, x_3745.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3756 : u32 = u_xlatu_loop_1;
    let x_3757 : u32 = u_xlatu63;
    if ((x_3756 < x_3757)) {
    } else {
      break;
    }
    let x_3760 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3760 >> 2u);
    let x_3763 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3763 & 3u));
    let x_3767 : u32 = u_xlatu68;
    let x_3770 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3767)];
    let x_3780 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3785 : vec4<u32> = indexable[x_3780];
    u_xlat68 = dot(x_3770, bitcast<vec4<f32>>(x_3785));
    let x_3788 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3788));
    let x_3791 : vec3<f32> = vs_INTERP0;
    let x_3803 : u32 = u_xlatu68;
    let x_3806 : vec4<f32> = x_3802.x_AdditionalLightsPosition[bitcast<i32>(x_3803)];
    let x_3809 : u32 = u_xlatu68;
    let x_3812 : vec4<f32> = x_3802.x_AdditionalLightsPosition[bitcast<i32>(x_3809)];
    u_xlat30 = ((-(x_3791) * vec3<f32>(x_3806.w, x_3806.w, x_3806.w)) + vec3<f32>(x_3812.x, x_3812.y, x_3812.z));
    let x_3815 : vec3<f32> = u_xlat30;
    let x_3816 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(x_3815, x_3816);
    let x_3818 : f32 = u_xlat69;
    u_xlat69 = max(x_3818, 6.10351562e-05f);
    let x_3822 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3822);
    let x_3824 : f32 = u_xlat70;
    let x_3826 : vec3<f32> = u_xlat30;
    let x_3827 : vec3<f32> = (vec3<f32>(x_3824, x_3824, x_3824) * x_3826);
    let x_3828 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3827.x, x_3827.y, x_3827.z, x_3828.w);
    let x_3831 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3831);
    let x_3833 : f32 = u_xlat69;
    let x_3834 : u32 = u_xlatu68;
    let x_3837 : f32 = x_3802.x_AdditionalLightsAttenuation[bitcast<i32>(x_3834)].x;
    u_xlat69 = (x_3833 * x_3837);
    let x_3839 : f32 = u_xlat69;
    let x_3841 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3839) * x_3841) + 1.0f);
    let x_3844 : f32 = u_xlat69;
    u_xlat69 = max(x_3844, 0.0f);
    let x_3846 : f32 = u_xlat69;
    let x_3847 : f32 = u_xlat69;
    u_xlat69 = (x_3846 * x_3847);
    let x_3849 : f32 = u_xlat69;
    let x_3850 : f32 = u_xlat71;
    u_xlat69 = (x_3849 * x_3850);
    let x_3852 : u32 = u_xlatu68;
    let x_3855 : vec4<f32> = x_3802.x_AdditionalLightsSpotDir[bitcast<i32>(x_3852)];
    let x_3857 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3855.x, x_3855.y, x_3855.z), vec3<f32>(x_3857.x, x_3857.y, x_3857.z));
    let x_3860 : f32 = u_xlat71;
    let x_3861 : u32 = u_xlatu68;
    let x_3864 : f32 = x_3802.x_AdditionalLightsAttenuation[bitcast<i32>(x_3861)].z;
    let x_3866 : u32 = u_xlatu68;
    let x_3869 : f32 = x_3802.x_AdditionalLightsAttenuation[bitcast<i32>(x_3866)].w;
    u_xlat71 = ((x_3860 * x_3864) + x_3869);
    let x_3871 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3871, 0.0f, 1.0f);
    let x_3873 : f32 = u_xlat71;
    let x_3874 : f32 = u_xlat71;
    u_xlat71 = (x_3873 * x_3874);
    let x_3876 : f32 = u_xlat69;
    let x_3877 : f32 = u_xlat71;
    u_xlat69 = (x_3876 * x_3877);
    let x_3880 : u32 = u_xlatu68;
    u_xlatu71 = (x_3880 >> 5u);
    let x_3883 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3883) & 31i)));
    let x_3889 : i32 = u_xlati73;
    let x_3891 : u32 = u_xlatu71;
    let x_3894 : f32 = x_3368.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3891)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3889) & bitcast<u32>(x_3894)));
    let x_3898 : i32 = u_xlati71;
    if ((x_3898 != 0i)) {
      let x_3908 : u32 = u_xlatu68;
      let x_3911 : f32 = x_3907.x_AdditionalLightsLightTypes[bitcast<i32>(x_3908)].el;
      u_xlati71 = i32(x_3911);
      let x_3913 : i32 = u_xlati71;
      u_xlati73 = select(1i, 0i, (x_3913 != 0i));
      let x_3917 : u32 = u_xlatu68;
      u_xlati11 = (bitcast<i32>(x_3917) << bitcast<u32>(2i));
      let x_3920 : i32 = u_xlati73;
      if ((x_3920 != 0i)) {
        let x_3925 : vec3<f32> = vs_INTERP0;
        let x_3927 : i32 = u_xlati11;
        let x_3930 : i32 = u_xlati11;
        let x_3934 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_3927 + 1i) / 4i)][((x_3930 + 1i) % 4i)];
        u_xlat32 = (vec3<f32>(x_3925.y, x_3925.y, x_3925.y) * vec3<f32>(x_3934.x, x_3934.y, x_3934.w));
        let x_3937 : i32 = u_xlati11;
        let x_3939 : i32 = u_xlati11;
        let x_3942 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[(x_3937 / 4i)][(x_3939 % 4i)];
        let x_3944 : vec3<f32> = vs_INTERP0;
        let x_3947 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3942.x, x_3942.y, x_3942.w) * vec3<f32>(x_3944.x, x_3944.x, x_3944.x)) + x_3947);
        let x_3949 : i32 = u_xlati11;
        let x_3952 : i32 = u_xlati11;
        let x_3956 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_3949 + 2i) / 4i)][((x_3952 + 2i) % 4i)];
        let x_3958 : vec3<f32> = vs_INTERP0;
        let x_3961 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3956.x, x_3956.y, x_3956.w) * vec3<f32>(x_3958.z, x_3958.z, x_3958.z)) + x_3961);
        let x_3963 : vec3<f32> = u_xlat32;
        let x_3964 : i32 = u_xlati11;
        let x_3967 : i32 = u_xlati11;
        let x_3971 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_3964 + 3i) / 4i)][((x_3967 + 3i) % 4i)];
        u_xlat32 = (x_3963 + vec3<f32>(x_3971.x, x_3971.y, x_3971.w));
        let x_3974 : vec3<f32> = u_xlat32;
        let x_3976 : vec3<f32> = u_xlat32;
        let x_3978 : vec2<f32> = (vec2<f32>(x_3974.x, x_3974.y) / vec2<f32>(x_3976.z, x_3976.z));
        let x_3979 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3978.x, x_3978.y, x_3979.z);
        let x_3981 : vec3<f32> = u_xlat32;
        let x_3984 : vec2<f32> = ((vec2<f32>(x_3981.x, x_3981.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3985 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3984.x, x_3984.y, x_3985.z);
        let x_3987 : vec3<f32> = u_xlat32;
        let x_3991 : vec2<f32> = clamp(vec2<f32>(x_3987.x, x_3987.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3992 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3991.x, x_3991.y, x_3992.z);
        let x_3994 : u32 = u_xlatu68;
        let x_3997 : vec4<f32> = x_3907.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3994)];
        let x_3999 : vec3<f32> = u_xlat32;
        let x_4002 : u32 = u_xlatu68;
        let x_4005 : vec4<f32> = x_3907.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4002)];
        let x_4007 : vec2<f32> = ((vec2<f32>(x_3997.x, x_3997.y) * vec2<f32>(x_3999.x, x_3999.y)) + vec2<f32>(x_4005.z, x_4005.w));
        let x_4008 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_4007.x, x_4007.y, x_4008.z);
      } else {
        let x_4012 : i32 = u_xlati71;
        u_xlatb71 = (x_4012 == 1i);
        let x_4014 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_4014);
        let x_4016 : i32 = u_xlati71;
        if ((x_4016 != 0i)) {
          let x_4020 : vec3<f32> = vs_INTERP0;
          let x_4022 : i32 = u_xlati11;
          let x_4025 : i32 = u_xlati11;
          let x_4029 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_4022 + 1i) / 4i)][((x_4025 + 1i) % 4i)];
          let x_4031 : vec2<f32> = (vec2<f32>(x_4020.y, x_4020.y) * vec2<f32>(x_4029.x, x_4029.y));
          let x_4032 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4031.x, x_4031.y, x_4032.z, x_4032.w);
          let x_4034 : i32 = u_xlati11;
          let x_4036 : i32 = u_xlati11;
          let x_4039 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[(x_4034 / 4i)][(x_4036 % 4i)];
          let x_4041 : vec3<f32> = vs_INTERP0;
          let x_4044 : vec4<f32> = u_xlat12;
          let x_4046 : vec2<f32> = ((vec2<f32>(x_4039.x, x_4039.y) * vec2<f32>(x_4041.x, x_4041.x)) + vec2<f32>(x_4044.x, x_4044.y));
          let x_4047 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4046.x, x_4046.y, x_4047.z, x_4047.w);
          let x_4049 : i32 = u_xlati11;
          let x_4052 : i32 = u_xlati11;
          let x_4056 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_4049 + 2i) / 4i)][((x_4052 + 2i) % 4i)];
          let x_4058 : vec3<f32> = vs_INTERP0;
          let x_4061 : vec4<f32> = u_xlat12;
          let x_4063 : vec2<f32> = ((vec2<f32>(x_4056.x, x_4056.y) * vec2<f32>(x_4058.z, x_4058.z)) + vec2<f32>(x_4061.x, x_4061.y));
          let x_4064 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4063.x, x_4063.y, x_4064.z, x_4064.w);
          let x_4066 : vec4<f32> = u_xlat12;
          let x_4068 : i32 = u_xlati11;
          let x_4071 : i32 = u_xlati11;
          let x_4075 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_4068 + 3i) / 4i)][((x_4071 + 3i) % 4i)];
          let x_4077 : vec2<f32> = (vec2<f32>(x_4066.x, x_4066.y) + vec2<f32>(x_4075.x, x_4075.y));
          let x_4078 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4077.x, x_4077.y, x_4078.z, x_4078.w);
          let x_4080 : vec4<f32> = u_xlat12;
          let x_4083 : vec2<f32> = ((vec2<f32>(x_4080.x, x_4080.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4084 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4083.x, x_4083.y, x_4084.z, x_4084.w);
          let x_4086 : vec4<f32> = u_xlat12;
          let x_4088 : vec2<f32> = fract(vec2<f32>(x_4086.x, x_4086.y));
          let x_4089 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4088.x, x_4088.y, x_4089.z, x_4089.w);
          let x_4091 : u32 = u_xlatu68;
          let x_4094 : vec4<f32> = x_3907.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4091)];
          let x_4096 : vec4<f32> = u_xlat12;
          let x_4099 : u32 = u_xlatu68;
          let x_4102 : vec4<f32> = x_3907.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4099)];
          let x_4104 : vec2<f32> = ((vec2<f32>(x_4094.x, x_4094.y) * vec2<f32>(x_4096.x, x_4096.y)) + vec2<f32>(x_4102.z, x_4102.w));
          let x_4105 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4104.x, x_4104.y, x_4105.z);
        } else {
          let x_4108 : vec3<f32> = vs_INTERP0;
          let x_4110 : i32 = u_xlati11;
          let x_4113 : i32 = u_xlati11;
          let x_4117 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_4110 + 1i) / 4i)][((x_4113 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4108.y, x_4108.y, x_4108.y, x_4108.y) * x_4117);
          let x_4119 : i32 = u_xlati11;
          let x_4121 : i32 = u_xlati11;
          let x_4124 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[(x_4119 / 4i)][(x_4121 % 4i)];
          let x_4125 : vec3<f32> = vs_INTERP0;
          let x_4128 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4124 * vec4<f32>(x_4125.x, x_4125.x, x_4125.x, x_4125.x)) + x_4128);
          let x_4130 : i32 = u_xlati11;
          let x_4133 : i32 = u_xlati11;
          let x_4137 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_4130 + 2i) / 4i)][((x_4133 + 2i) % 4i)];
          let x_4138 : vec3<f32> = vs_INTERP0;
          let x_4141 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4137 * vec4<f32>(x_4138.z, x_4138.z, x_4138.z, x_4138.z)) + x_4141);
          let x_4143 : vec4<f32> = u_xlat12;
          let x_4144 : i32 = u_xlati11;
          let x_4147 : i32 = u_xlati11;
          let x_4151 : vec4<f32> = x_3907.x_AdditionalLightsWorldToLights[((x_4144 + 3i) / 4i)][((x_4147 + 3i) % 4i)];
          u_xlat12 = (x_4143 + x_4151);
          let x_4153 : vec4<f32> = u_xlat12;
          let x_4155 : vec4<f32> = u_xlat12;
          let x_4157 : vec3<f32> = (vec3<f32>(x_4153.x, x_4153.y, x_4153.z) / vec3<f32>(x_4155.w, x_4155.w, x_4155.w));
          let x_4158 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4157.x, x_4157.y, x_4157.z, x_4158.w);
          let x_4160 : vec4<f32> = u_xlat12;
          let x_4162 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4160.x, x_4160.y, x_4160.z), vec3<f32>(x_4162.x, x_4162.y, x_4162.z));
          let x_4165 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4165);
          let x_4167 : f32 = u_xlat71;
          let x_4169 : vec4<f32> = u_xlat12;
          let x_4171 : vec3<f32> = (vec3<f32>(x_4167, x_4167, x_4167) * vec3<f32>(x_4169.x, x_4169.y, x_4169.z));
          let x_4172 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4171.x, x_4171.y, x_4171.z, x_4172.w);
          let x_4174 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4174.x, x_4174.y, x_4174.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4179 : f32 = u_xlat71;
          u_xlat71 = max(x_4179, 0.000001f);
          let x_4182 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4182);
          let x_4184 : f32 = u_xlat71;
          let x_4186 : vec4<f32> = u_xlat12;
          let x_4188 : vec3<f32> = (vec3<f32>(x_4184, x_4184, x_4184) * vec3<f32>(x_4186.z, x_4186.x, x_4186.y));
          let x_4189 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4188.x, x_4188.y, x_4188.z, x_4189.w);
          let x_4192 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4192);
          let x_4196 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4196, 0.0f, 1.0f);
          let x_4201 : vec4<f32> = u_xlat13;
          let x_4204 : vec4<bool> = (vec4<f32>(x_4201.y, x_4201.y, x_4201.y, x_4201.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4205 : vec2<bool> = vec2<bool>(x_4204.x, x_4204.w);
          let x_4206 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4205.x, x_4206.y, x_4206.z, x_4205.y);
          let x_4209 : bool = u_xlatb11.x;
          if (x_4209) {
            let x_4214 : f32 = u_xlat13.x;
            x_4210 = x_4214;
          } else {
            let x_4217 : f32 = u_xlat13.x;
            x_4210 = -(x_4217);
          }
          let x_4219 : f32 = x_4210;
          u_xlat11.x = x_4219;
          let x_4222 : bool = u_xlatb11.w;
          if (x_4222) {
            let x_4227 : f32 = u_xlat13.x;
            x_4223 = x_4227;
          } else {
            let x_4230 : f32 = u_xlat13.x;
            x_4223 = -(x_4230);
          }
          let x_4232 : f32 = x_4223;
          u_xlat11.w = x_4232;
          let x_4234 : vec4<f32> = u_xlat12;
          let x_4236 : f32 = u_xlat71;
          let x_4239 : vec4<f32> = u_xlat11;
          let x_4241 : vec2<f32> = ((vec2<f32>(x_4234.x, x_4234.y) * vec2<f32>(x_4236, x_4236)) + vec2<f32>(x_4239.x, x_4239.w));
          let x_4242 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4241.x, x_4242.y, x_4242.z, x_4241.y);
          let x_4244 : vec4<f32> = u_xlat11;
          let x_4247 : vec2<f32> = ((vec2<f32>(x_4244.x, x_4244.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4248 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4247.x, x_4248.y, x_4248.z, x_4247.y);
          let x_4250 : vec4<f32> = u_xlat11;
          let x_4254 : vec2<f32> = clamp(vec2<f32>(x_4250.x, x_4250.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4255 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4254.x, x_4255.y, x_4255.z, x_4254.y);
          let x_4257 : u32 = u_xlatu68;
          let x_4260 : vec4<f32> = x_3907.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4257)];
          let x_4262 : vec4<f32> = u_xlat11;
          let x_4265 : u32 = u_xlatu68;
          let x_4268 : vec4<f32> = x_3907.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4265)];
          let x_4270 : vec2<f32> = ((vec2<f32>(x_4260.x, x_4260.y) * vec2<f32>(x_4262.x, x_4262.w)) + vec2<f32>(x_4268.z, x_4268.w));
          let x_4271 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4270.x, x_4270.y, x_4271.z);
        }
      }
      let x_4278 : vec3<f32> = u_xlat32;
      let x_4281 : f32 = x_90.x_GlobalMipBias.x;
      let x_4282 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4278.x, x_4278.y), x_4281);
      u_xlat11 = x_4282;
      let x_4284 : bool = u_xlatb44.y;
      if (x_4284) {
        let x_4289 : f32 = u_xlat11.w;
        x_4285 = x_4289;
      } else {
        let x_4292 : f32 = u_xlat11.x;
        x_4285 = x_4292;
      }
      let x_4293 : f32 = x_4285;
      u_xlat71 = x_4293;
      let x_4295 : bool = u_xlatb44.x;
      if (x_4295) {
        let x_4299 : vec4<f32> = u_xlat11;
        x_4296 = vec3<f32>(x_4299.x, x_4299.y, x_4299.z);
      } else {
        let x_4302 : f32 = u_xlat71;
        x_4296 = vec3<f32>(x_4302, x_4302, x_4302);
      }
      let x_4304 : vec3<f32> = x_4296;
      let x_4305 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4304.x, x_4304.y, x_4304.z, x_4305.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4311 : vec4<f32> = u_xlat11;
    let x_4313 : u32 = u_xlatu68;
    let x_4316 : vec4<f32> = x_3802.x_AdditionalLightsColor[bitcast<i32>(x_4313)];
    let x_4318 : vec3<f32> = (vec3<f32>(x_4311.x, x_4311.y, x_4311.z) * vec3<f32>(x_4316.x, x_4316.y, x_4316.z));
    let x_4319 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4318.x, x_4318.y, x_4318.z, x_4319.w);
    let x_4321 : f32 = u_xlat48;
    let x_4323 : vec4<f32> = u_xlat11;
    let x_4325 : vec3<f32> = (vec3<f32>(x_4321, x_4321, x_4321) * vec3<f32>(x_4323.x, x_4323.y, x_4323.z));
    let x_4326 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4325.x, x_4325.y, x_4325.z, x_4326.w);
    let x_4328 : vec4<f32> = u_xlat3;
    let x_4330 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4328.x, x_4328.y, x_4328.z), vec3<f32>(x_4330.x, x_4330.y, x_4330.z));
    let x_4333 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4333, 0.0f, 1.0f);
    let x_4335 : f32 = u_xlat68;
    let x_4336 : f32 = u_xlat69;
    u_xlat68 = (x_4335 * x_4336);
    let x_4338 : f32 = u_xlat68;
    let x_4340 : vec4<f32> = u_xlat11;
    let x_4342 : vec3<f32> = (vec3<f32>(x_4338, x_4338, x_4338) * vec3<f32>(x_4340.x, x_4340.y, x_4340.z));
    let x_4343 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4342.x, x_4342.y, x_4342.z, x_4343.w);
    let x_4345 : vec3<f32> = u_xlat30;
    let x_4346 : f32 = u_xlat70;
    let x_4349 : vec3<f32> = u_xlat1;
    u_xlat30 = ((x_4345 * vec3<f32>(x_4346, x_4346, x_4346)) + x_4349);
    let x_4351 : vec3<f32> = u_xlat30;
    let x_4352 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(x_4351, x_4352);
    let x_4354 : f32 = u_xlat68;
    u_xlat68 = max(x_4354, 1.17549435e-37f);
    let x_4356 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4356);
    let x_4358 : f32 = u_xlat68;
    let x_4360 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_4358, x_4358, x_4358) * x_4360);
    let x_4362 : vec4<f32> = u_xlat3;
    let x_4364 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(vec3<f32>(x_4362.x, x_4362.y, x_4362.z), x_4364);
    let x_4366 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4366, 0.0f, 1.0f);
    let x_4368 : vec4<f32> = u_xlat10;
    let x_4370 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(vec3<f32>(x_4368.x, x_4368.y, x_4368.z), x_4370);
    let x_4372 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4372, 0.0f, 1.0f);
    let x_4374 : f32 = u_xlat68;
    let x_4375 : f32 = u_xlat68;
    u_xlat68 = (x_4374 * x_4375);
    let x_4377 : f32 = u_xlat68;
    let x_4379 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4377 * x_4379) + 1.000010014f);
    let x_4382 : f32 = u_xlat69;
    let x_4383 : f32 = u_xlat69;
    u_xlat69 = (x_4382 * x_4383);
    let x_4385 : f32 = u_xlat68;
    let x_4386 : f32 = u_xlat68;
    u_xlat68 = (x_4385 * x_4386);
    let x_4388 : f32 = u_xlat69;
    u_xlat69 = max(x_4388, 0.100000001f);
    let x_4390 : f32 = u_xlat68;
    let x_4391 : f32 = u_xlat69;
    u_xlat68 = (x_4390 * x_4391);
    let x_4393 : f32 = u_xlat27;
    let x_4394 : f32 = u_xlat68;
    u_xlat68 = (x_4393 * x_4394);
    let x_4396 : f32 = u_xlat67;
    let x_4397 : f32 = u_xlat68;
    u_xlat68 = (x_4396 / x_4397);
    let x_4399 : f32 = u_xlat68;
    let x_4402 : vec3<f32> = u_xlat4;
    u_xlat30 = ((vec3<f32>(x_4399, x_4399, x_4399) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4402);
    let x_4404 : vec3<f32> = u_xlat30;
    let x_4405 : vec4<f32> = u_xlat11;
    let x_4408 : vec4<f32> = u_xlat8;
    let x_4410 : vec3<f32> = ((x_4404 * vec3<f32>(x_4405.x, x_4405.y, x_4405.z)) + vec3<f32>(x_4408.x, x_4408.y, x_4408.z));
    let x_4411 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4410.x, x_4410.y, x_4410.z, x_4411.w);

    continuing {
      let x_4413 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4413 + bitcast<u32>(1i));
    }
  }
  let x_4415 : vec4<f32> = u_xlat5;
  let x_4417 : vec4<f32> = u_xlat6;
  let x_4420 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec3<f32>(x_4415.x, x_4415.y, x_4415.z) * vec3<f32>(x_4417.x, x_4417.x, x_4417.x)) + vec3<f32>(x_4420.x, x_4420.y, x_4420.z));
  let x_4423 : vec4<f32> = u_xlat8;
  let x_4425 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_4423.x, x_4423.y, x_4423.z) + x_4425);
  let x_4427 : vec4<f32> = vs_INTERP4;
  let x_4429 : vec3<f32> = u_xlat0;
  let x_4431 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_4427.w, x_4427.w, x_4427.w) * x_4429) + x_4431);
  let x_4434 : f32 = u_xlat23.x;
  let x_4436 : f32 = u_xlat23.x;
  u_xlat63 = (x_4434 * -(x_4436));
  let x_4439 : f32 = u_xlat63;
  u_xlat63 = exp2(x_4439);
  let x_4441 : vec3<f32> = u_xlat0;
  let x_4444 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_4441 + -(vec3<f32>(x_4444.x, x_4444.y, x_4444.z)));
  let x_4450 : f32 = u_xlat63;
  let x_4452 : vec3<f32> = u_xlat0;
  let x_4455 : vec4<f32> = x_90.unity_FogColor;
  let x_4457 : vec3<f32> = ((vec3<f32>(x_4450, x_4450, x_4450) * x_4452) + vec3<f32>(x_4455.x, x_4455.y, x_4455.z));
  let x_4458 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4457.x, x_4457.y, x_4457.z, x_4458.w);
  let x_4460 : bool = u_xlatb2;
  let x_4461 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_4461, x_4460);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

