type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  unity_FogColor : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

var<private> vs_TEXCOORD5 : vec4<f32>;

@group(1) @binding(1) var<uniform> x_28 : UnityPerDraw;

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(2) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_134 : PGlobals;

@group(1) @binding(2) var<uniform> x_147 : MainLightShadows;

var<private> vs_TEXCOORD4 : vec4<f32>;

@group(0) @binding(1) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(3) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlatb48 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat48 : f32;
  var u_xlatb2 : bool;
  var u_xlat34 : vec2<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat36 : vec2<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat18 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat19 : vec3<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlat42 : vec2<f32>;
  var u_xlat37 : vec2<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat52 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat50 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb18 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = vs_TEXCOORD5;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_15 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_14.x, x_14.y, x_14.z, x_15.w);
  u_xlat0.w = 1.0f;
  let x_33 : vec4<f32> = x_28.unity_SHAr;
  let x_34 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(x_33, x_34);
  let x_40 : vec4<f32> = x_28.unity_SHAg;
  let x_41 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(x_40, x_41);
  let x_47 : vec4<f32> = x_28.unity_SHAb;
  let x_48 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(x_47, x_48);
  let x_51 : vec4<f32> = vs_TEXCOORD5;
  let x_53 : vec4<f32> = vs_TEXCOORD5;
  u_xlat0 = (vec4<f32>(x_51.y, x_51.z, x_51.z, x_51.x) * vec4<f32>(x_53.x, x_53.y, x_53.z, x_53.z));
  let x_59 : vec4<f32> = x_28.unity_SHBr;
  let x_60 : vec4<f32> = u_xlat0;
  u_xlat2.x = dot(x_59, x_60);
  let x_65 : vec4<f32> = x_28.unity_SHBg;
  let x_66 : vec4<f32> = u_xlat0;
  u_xlat2.y = dot(x_65, x_66);
  let x_71 : vec4<f32> = x_28.unity_SHBb;
  let x_72 : vec4<f32> = u_xlat0;
  u_xlat2.z = dot(x_71, x_72);
  let x_77 : f32 = vs_TEXCOORD5.y;
  let x_79 : f32 = vs_TEXCOORD5.y;
  u_xlat0.x = (x_77 * x_79);
  let x_83 : f32 = vs_TEXCOORD5.x;
  let x_85 : f32 = vs_TEXCOORD5.x;
  let x_88 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_83 * x_85) + -(x_88));
  let x_94 : vec4<f32> = x_28.unity_SHC;
  let x_96 : vec4<f32> = u_xlat0;
  let x_99 : vec4<f32> = u_xlat2;
  let x_101 : vec3<f32> = ((vec3<f32>(x_94.x, x_94.y, x_94.z) * vec3<f32>(x_96.x, x_96.x, x_96.x)) + vec3<f32>(x_99.x, x_99.y, x_99.z));
  let x_102 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_101.x, x_101.y, x_101.z, x_102.w);
  let x_104 : vec4<f32> = u_xlat0;
  let x_106 : vec4<f32> = u_xlat1;
  let x_108 : vec3<f32> = (vec3<f32>(x_104.x, x_104.y, x_104.z) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_111 : vec4<f32> = u_xlat0;
  let x_115 : vec3<f32> = max(vec3<f32>(x_111.x, x_111.y, x_111.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_116 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_115.x, x_115.y, x_115.z, x_116.w);
  let x_131 : vec2<f32> = vs_TEXCOORD0;
  let x_138 : f32 = x_134.x_GlobalMipBias.x;
  let x_139 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, x_131, x_138);
  u_xlat1 = x_139;
  let x_150 : f32 = x_147.x_MainLightShadowParams.y;
  u_xlatb48 = (0.0f < x_150);
  let x_152 : bool = u_xlatb48;
  if (x_152) {
    let x_156 : f32 = x_147.x_MainLightShadowParams.y;
    u_xlatb48 = (x_156 == 1.0f);
    let x_158 : bool = u_xlatb48;
    if (x_158) {
      let x_162 : vec4<f32> = vs_TEXCOORD4;
      let x_166 : vec4<f32> = x_147.x_MainLightShadowOffset0;
      u_xlat2 = (vec4<f32>(x_162.x, x_162.y, x_162.x, x_162.y) + x_166);
      let x_170 : vec4<f32> = u_xlat2;
      let x_171 : vec2<f32> = vec2<f32>(x_170.x, x_170.y);
      let x_173 : f32 = vs_TEXCOORD4.z;
      txVec0 = vec3<f32>(x_171.x, x_171.y, x_173);
      let x_186 : vec3<f32> = txVec0;
      let x_188 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_186.xy, x_186.z);
      u_xlat3.x = x_188;
      let x_191 : vec4<f32> = u_xlat2;
      let x_192 : vec2<f32> = vec2<f32>(x_191.z, x_191.w);
      let x_194 : f32 = vs_TEXCOORD4.z;
      txVec1 = vec3<f32>(x_192.x, x_192.y, x_194);
      let x_201 : vec3<f32> = txVec1;
      let x_203 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_201.xy, x_201.z);
      u_xlat3.y = x_203;
      let x_205 : vec4<f32> = vs_TEXCOORD4;
      let x_209 : vec4<f32> = x_147.x_MainLightShadowOffset1;
      u_xlat2 = (vec4<f32>(x_205.x, x_205.y, x_205.x, x_205.y) + x_209);
      let x_212 : vec4<f32> = u_xlat2;
      let x_213 : vec2<f32> = vec2<f32>(x_212.x, x_212.y);
      let x_215 : f32 = vs_TEXCOORD4.z;
      txVec2 = vec3<f32>(x_213.x, x_213.y, x_215);
      let x_222 : vec3<f32> = txVec2;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat3.z = x_224;
      let x_227 : vec4<f32> = u_xlat2;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = vs_TEXCOORD4.z;
      txVec3 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec3;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat3.w = x_239;
      let x_242 : vec4<f32> = u_xlat3;
      u_xlat48 = dot(x_242, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_249 : f32 = x_147.x_MainLightShadowParams.y;
      u_xlatb2 = (x_249 == 2.0f);
      let x_252 : bool = u_xlatb2;
      if (x_252) {
        let x_255 : vec4<f32> = vs_TEXCOORD4;
        let x_259 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_264 : vec2<f32> = ((vec2<f32>(x_255.x, x_255.y) * vec2<f32>(x_259.z, x_259.w)) + vec2<f32>(0.5f, 0.5f));
        let x_265 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_264.x, x_264.y, x_265.z, x_265.w);
        let x_267 : vec4<f32> = u_xlat2;
        let x_269 : vec2<f32> = floor(vec2<f32>(x_267.x, x_267.y));
        let x_270 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_269.x, x_269.y, x_270.z, x_270.w);
        let x_274 : vec4<f32> = vs_TEXCOORD4;
        let x_277 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_280 : vec4<f32> = u_xlat2;
        u_xlat34 = ((vec2<f32>(x_274.x, x_274.y) * vec2<f32>(x_277.z, x_277.w)) + -(vec2<f32>(x_280.x, x_280.y)));
        let x_284 : vec2<f32> = u_xlat34;
        u_xlat3 = (vec4<f32>(x_284.x, x_284.x, x_284.y, x_284.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_289 : vec4<f32> = u_xlat3;
        let x_291 : vec4<f32> = u_xlat3;
        u_xlat4 = (vec4<f32>(x_289.x, x_289.x, x_289.z, x_289.z) * vec4<f32>(x_291.x, x_291.x, x_291.z, x_291.z));
        let x_294 : vec4<f32> = u_xlat4;
        let x_298 : vec2<f32> = (vec2<f32>(x_294.y, x_294.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_299 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_298.x, x_299.y, x_298.y, x_299.w);
        let x_301 : vec4<f32> = u_xlat4;
        let x_304 : vec2<f32> = u_xlat34;
        let x_306 : vec2<f32> = ((vec2<f32>(x_301.x, x_301.z) * vec2<f32>(0.5f, 0.5f)) + -(x_304));
        let x_307 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_306.x, x_306.y, x_307.z, x_307.w);
        let x_310 : vec2<f32> = u_xlat34;
        u_xlat36 = (-(x_310) + vec2<f32>(1.0f, 1.0f));
        let x_315 : vec2<f32> = u_xlat34;
        let x_317 : vec2<f32> = min(x_315, vec2<f32>(0.0f, 0.0f));
        let x_318 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_317.x, x_317.y, x_318.z, x_318.w);
        let x_320 : vec4<f32> = u_xlat5;
        let x_323 : vec4<f32> = u_xlat5;
        let x_326 : vec2<f32> = u_xlat36;
        let x_327 : vec2<f32> = ((-(vec2<f32>(x_320.x, x_320.y)) * vec2<f32>(x_323.x, x_323.y)) + x_326);
        let x_328 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_327.x, x_327.y, x_328.z, x_328.w);
        let x_330 : vec2<f32> = u_xlat34;
        u_xlat34 = max(x_330, vec2<f32>(0.0f, 0.0f));
        let x_332 : vec2<f32> = u_xlat34;
        let x_334 : vec2<f32> = u_xlat34;
        let x_336 : vec4<f32> = u_xlat3;
        u_xlat34 = ((-(x_332) * x_334) + vec2<f32>(x_336.y, x_336.w));
        let x_339 : vec4<f32> = u_xlat5;
        let x_341 : vec2<f32> = (vec2<f32>(x_339.x, x_339.y) + vec2<f32>(1.0f, 1.0f));
        let x_342 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_344 : vec2<f32> = u_xlat34;
        u_xlat34 = (x_344 + vec2<f32>(1.0f, 1.0f));
        let x_347 : vec4<f32> = u_xlat4;
        let x_351 : vec2<f32> = (vec2<f32>(x_347.x, x_347.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_352 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_351.x, x_351.y, x_352.z, x_352.w);
        let x_354 : vec2<f32> = u_xlat36;
        let x_355 : vec2<f32> = (x_354 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_356 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_355.x, x_355.y, x_356.z, x_356.w);
        let x_358 : vec4<f32> = u_xlat5;
        let x_360 : vec2<f32> = (vec2<f32>(x_358.x, x_358.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_361 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_360.x, x_360.y, x_361.z, x_361.w);
        let x_364 : vec2<f32> = u_xlat34;
        let x_365 : vec2<f32> = (x_364 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_366 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_365.x, x_365.y, x_366.z, x_366.w);
        let x_368 : vec4<f32> = u_xlat3;
        u_xlat34 = (vec2<f32>(x_368.y, x_368.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_372 : f32 = u_xlat5.x;
        u_xlat6.z = x_372;
        let x_375 : f32 = u_xlat34.x;
        u_xlat6.w = x_375;
        let x_378 : f32 = u_xlat7.x;
        u_xlat4.z = x_378;
        let x_381 : f32 = u_xlat3.x;
        u_xlat4.w = x_381;
        let x_384 : vec4<f32> = u_xlat4;
        let x_386 : vec4<f32> = u_xlat6;
        u_xlat8 = (vec4<f32>(x_384.z, x_384.w, x_384.x, x_384.z) + vec4<f32>(x_386.z, x_386.w, x_386.x, x_386.z));
        let x_390 : f32 = u_xlat6.y;
        u_xlat5.z = x_390;
        let x_393 : f32 = u_xlat34.y;
        u_xlat5.w = x_393;
        let x_396 : f32 = u_xlat4.y;
        u_xlat7.z = x_396;
        let x_399 : f32 = u_xlat3.z;
        u_xlat7.w = x_399;
        let x_401 : vec4<f32> = u_xlat5;
        let x_403 : vec4<f32> = u_xlat7;
        let x_405 : vec3<f32> = (vec3<f32>(x_401.z, x_401.y, x_401.w) + vec3<f32>(x_403.z, x_403.y, x_403.w));
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_405.x, x_405.y, x_405.z, x_406.w);
        let x_408 : vec4<f32> = u_xlat4;
        let x_410 : vec4<f32> = u_xlat8;
        let x_412 : vec3<f32> = (vec3<f32>(x_408.x, x_408.z, x_408.w) / vec3<f32>(x_410.z, x_410.w, x_410.y));
        let x_413 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_412.x, x_412.y, x_412.z, x_413.w);
        let x_415 : vec4<f32> = u_xlat4;
        let x_421 : vec3<f32> = (vec3<f32>(x_415.x, x_415.y, x_415.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_422 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_421.x, x_421.y, x_421.z, x_422.w);
        let x_424 : vec4<f32> = u_xlat7;
        let x_426 : vec4<f32> = u_xlat3;
        let x_428 : vec3<f32> = (vec3<f32>(x_424.z, x_424.y, x_424.w) / vec3<f32>(x_426.x, x_426.y, x_426.z));
        let x_429 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_428.x, x_428.y, x_428.z, x_429.w);
        let x_431 : vec4<f32> = u_xlat5;
        let x_433 : vec3<f32> = (vec3<f32>(x_431.x, x_431.y, x_431.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_434 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_433.x, x_433.y, x_433.z, x_434.w);
        let x_436 : vec4<f32> = u_xlat4;
        let x_439 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_441 : vec3<f32> = (vec3<f32>(x_436.y, x_436.x, x_436.z) * vec3<f32>(x_439.x, x_439.x, x_439.x));
        let x_442 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
        let x_444 : vec4<f32> = u_xlat5;
        let x_447 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_449 : vec3<f32> = (vec3<f32>(x_444.x, x_444.y, x_444.z) * vec3<f32>(x_447.y, x_447.y, x_447.y));
        let x_450 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_449.x, x_449.y, x_449.z, x_450.w);
        let x_453 : f32 = u_xlat5.x;
        u_xlat4.w = x_453;
        let x_455 : vec4<f32> = u_xlat2;
        let x_458 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_461 : vec4<f32> = u_xlat4;
        u_xlat6 = ((vec4<f32>(x_455.x, x_455.y, x_455.x, x_455.y) * vec4<f32>(x_458.x, x_458.y, x_458.x, x_458.y)) + vec4<f32>(x_461.y, x_461.w, x_461.x, x_461.w));
        let x_464 : vec4<f32> = u_xlat2;
        let x_467 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_470 : vec4<f32> = u_xlat4;
        u_xlat34 = ((vec2<f32>(x_464.x, x_464.y) * vec2<f32>(x_467.x, x_467.y)) + vec2<f32>(x_470.z, x_470.w));
        let x_474 : f32 = u_xlat4.y;
        u_xlat5.w = x_474;
        let x_476 : vec4<f32> = u_xlat5;
        let x_477 : vec2<f32> = vec2<f32>(x_476.y, x_476.z);
        let x_478 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_478.x, x_477.x, x_478.z, x_477.y);
        let x_480 : vec4<f32> = u_xlat2;
        let x_483 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_486 : vec4<f32> = u_xlat4;
        u_xlat7 = ((vec4<f32>(x_480.x, x_480.y, x_480.x, x_480.y) * vec4<f32>(x_483.x, x_483.y, x_483.x, x_483.y)) + vec4<f32>(x_486.x, x_486.y, x_486.z, x_486.y));
        let x_489 : vec4<f32> = u_xlat2;
        let x_492 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_495 : vec4<f32> = u_xlat5;
        u_xlat5 = ((vec4<f32>(x_489.x, x_489.y, x_489.x, x_489.y) * vec4<f32>(x_492.x, x_492.y, x_492.x, x_492.y)) + vec4<f32>(x_495.w, x_495.y, x_495.w, x_495.z));
        let x_498 : vec4<f32> = u_xlat2;
        let x_501 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_504 : vec4<f32> = u_xlat4;
        u_xlat4 = ((vec4<f32>(x_498.x, x_498.y, x_498.x, x_498.y) * vec4<f32>(x_501.x, x_501.y, x_501.x, x_501.y)) + vec4<f32>(x_504.x, x_504.w, x_504.z, x_504.w));
        let x_508 : vec4<f32> = u_xlat3;
        let x_510 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_508.x, x_508.x, x_508.x, x_508.y) * vec4<f32>(x_510.z, x_510.w, x_510.y, x_510.z));
        let x_514 : vec4<f32> = u_xlat3;
        let x_516 : vec4<f32> = u_xlat8;
        u_xlat10 = (vec4<f32>(x_514.y, x_514.y, x_514.z, x_514.z) * x_516);
        let x_519 : f32 = u_xlat3.z;
        let x_521 : f32 = u_xlat8.y;
        u_xlat2.x = (x_519 * x_521);
        let x_525 : vec4<f32> = u_xlat6;
        let x_526 : vec2<f32> = vec2<f32>(x_525.x, x_525.y);
        let x_528 : f32 = vs_TEXCOORD4.z;
        txVec4 = vec3<f32>(x_526.x, x_526.y, x_528);
        let x_536 : vec3<f32> = txVec4;
        let x_538 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_536.xy, x_536.z);
        u_xlat18 = x_538;
        let x_540 : vec4<f32> = u_xlat6;
        let x_541 : vec2<f32> = vec2<f32>(x_540.z, x_540.w);
        let x_543 : f32 = vs_TEXCOORD4.z;
        txVec5 = vec3<f32>(x_541.x, x_541.y, x_543);
        let x_550 : vec3<f32> = txVec5;
        let x_552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_550.xy, x_550.z);
        u_xlat3.x = x_552;
        let x_555 : f32 = u_xlat3.x;
        let x_557 : f32 = u_xlat9.y;
        u_xlat3.x = (x_555 * x_557);
        let x_561 : f32 = u_xlat9.x;
        let x_562 : f32 = u_xlat18;
        let x_565 : f32 = u_xlat3.x;
        u_xlat18 = ((x_561 * x_562) + x_565);
        let x_568 : vec2<f32> = u_xlat34;
        let x_570 : f32 = vs_TEXCOORD4.z;
        txVec6 = vec3<f32>(x_568.x, x_568.y, x_570);
        let x_577 : vec3<f32> = txVec6;
        let x_579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_577.xy, x_577.z);
        u_xlat34.x = x_579;
        let x_582 : f32 = u_xlat9.z;
        let x_584 : f32 = u_xlat34.x;
        let x_586 : f32 = u_xlat18;
        u_xlat18 = ((x_582 * x_584) + x_586);
        let x_589 : vec4<f32> = u_xlat5;
        let x_590 : vec2<f32> = vec2<f32>(x_589.x, x_589.y);
        let x_592 : f32 = vs_TEXCOORD4.z;
        txVec7 = vec3<f32>(x_590.x, x_590.y, x_592);
        let x_599 : vec3<f32> = txVec7;
        let x_601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_599.xy, x_599.z);
        u_xlat34.x = x_601;
        let x_604 : f32 = u_xlat9.w;
        let x_606 : f32 = u_xlat34.x;
        let x_608 : f32 = u_xlat18;
        u_xlat18 = ((x_604 * x_606) + x_608);
        let x_611 : vec4<f32> = u_xlat7;
        let x_612 : vec2<f32> = vec2<f32>(x_611.x, x_611.y);
        let x_614 : f32 = vs_TEXCOORD4.z;
        txVec8 = vec3<f32>(x_612.x, x_612.y, x_614);
        let x_621 : vec3<f32> = txVec8;
        let x_623 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_621.xy, x_621.z);
        u_xlat34.x = x_623;
        let x_626 : f32 = u_xlat10.x;
        let x_628 : f32 = u_xlat34.x;
        let x_630 : f32 = u_xlat18;
        u_xlat18 = ((x_626 * x_628) + x_630);
        let x_633 : vec4<f32> = u_xlat7;
        let x_634 : vec2<f32> = vec2<f32>(x_633.z, x_633.w);
        let x_636 : f32 = vs_TEXCOORD4.z;
        txVec9 = vec3<f32>(x_634.x, x_634.y, x_636);
        let x_643 : vec3<f32> = txVec9;
        let x_645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_643.xy, x_643.z);
        u_xlat34.x = x_645;
        let x_648 : f32 = u_xlat10.y;
        let x_650 : f32 = u_xlat34.x;
        let x_652 : f32 = u_xlat18;
        u_xlat18 = ((x_648 * x_650) + x_652);
        let x_655 : vec4<f32> = u_xlat5;
        let x_656 : vec2<f32> = vec2<f32>(x_655.z, x_655.w);
        let x_658 : f32 = vs_TEXCOORD4.z;
        txVec10 = vec3<f32>(x_656.x, x_656.y, x_658);
        let x_665 : vec3<f32> = txVec10;
        let x_667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_665.xy, x_665.z);
        u_xlat34.x = x_667;
        let x_670 : f32 = u_xlat10.z;
        let x_672 : f32 = u_xlat34.x;
        let x_674 : f32 = u_xlat18;
        u_xlat18 = ((x_670 * x_672) + x_674);
        let x_677 : vec4<f32> = u_xlat4;
        let x_678 : vec2<f32> = vec2<f32>(x_677.x, x_677.y);
        let x_680 : f32 = vs_TEXCOORD4.z;
        txVec11 = vec3<f32>(x_678.x, x_678.y, x_680);
        let x_687 : vec3<f32> = txVec11;
        let x_689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_687.xy, x_687.z);
        u_xlat34.x = x_689;
        let x_692 : f32 = u_xlat10.w;
        let x_694 : f32 = u_xlat34.x;
        let x_696 : f32 = u_xlat18;
        u_xlat18 = ((x_692 * x_694) + x_696);
        let x_699 : vec4<f32> = u_xlat4;
        let x_700 : vec2<f32> = vec2<f32>(x_699.z, x_699.w);
        let x_702 : f32 = vs_TEXCOORD4.z;
        txVec12 = vec3<f32>(x_700.x, x_700.y, x_702);
        let x_709 : vec3<f32> = txVec12;
        let x_711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_709.xy, x_709.z);
        u_xlat34.x = x_711;
        let x_714 : f32 = u_xlat2.x;
        let x_716 : f32 = u_xlat34.x;
        let x_718 : f32 = u_xlat18;
        u_xlat48 = ((x_714 * x_716) + x_718);
      } else {
        let x_721 : vec4<f32> = vs_TEXCOORD4;
        let x_724 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_727 : vec2<f32> = ((vec2<f32>(x_721.x, x_721.y) * vec2<f32>(x_724.z, x_724.w)) + vec2<f32>(0.5f, 0.5f));
        let x_728 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_727.x, x_727.y, x_728.z, x_728.w);
        let x_730 : vec4<f32> = u_xlat2;
        let x_732 : vec2<f32> = floor(vec2<f32>(x_730.x, x_730.y));
        let x_733 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_732.x, x_732.y, x_733.z, x_733.w);
        let x_735 : vec4<f32> = vs_TEXCOORD4;
        let x_738 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_741 : vec4<f32> = u_xlat2;
        u_xlat34 = ((vec2<f32>(x_735.x, x_735.y) * vec2<f32>(x_738.z, x_738.w)) + -(vec2<f32>(x_741.x, x_741.y)));
        let x_745 : vec2<f32> = u_xlat34;
        u_xlat3 = (vec4<f32>(x_745.x, x_745.x, x_745.y, x_745.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_748 : vec4<f32> = u_xlat3;
        let x_750 : vec4<f32> = u_xlat3;
        u_xlat4 = (vec4<f32>(x_748.x, x_748.x, x_748.z, x_748.z) * vec4<f32>(x_750.x, x_750.x, x_750.z, x_750.z));
        let x_753 : vec4<f32> = u_xlat4;
        let x_757 : vec2<f32> = (vec2<f32>(x_753.y, x_753.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_758 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_758.x, x_757.x, x_758.z, x_757.y);
        let x_760 : vec4<f32> = u_xlat4;
        let x_763 : vec2<f32> = u_xlat34;
        let x_765 : vec2<f32> = ((vec2<f32>(x_760.x, x_760.z) * vec2<f32>(0.5f, 0.5f)) + -(x_763));
        let x_766 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_765.x, x_766.y, x_765.y, x_766.w);
        let x_768 : vec2<f32> = u_xlat34;
        let x_770 : vec2<f32> = (-(x_768) + vec2<f32>(1.0f, 1.0f));
        let x_771 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_770.x, x_770.y, x_771.z, x_771.w);
        let x_773 : vec2<f32> = u_xlat34;
        u_xlat36 = min(x_773, vec2<f32>(0.0f, 0.0f));
        let x_775 : vec2<f32> = u_xlat36;
        let x_777 : vec2<f32> = u_xlat36;
        let x_779 : vec4<f32> = u_xlat4;
        let x_781 : vec2<f32> = ((-(x_775) * x_777) + vec2<f32>(x_779.x, x_779.y));
        let x_782 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_781.x, x_781.y, x_782.z, x_782.w);
        let x_784 : vec2<f32> = u_xlat34;
        u_xlat36 = max(x_784, vec2<f32>(0.0f, 0.0f));
        let x_787 : vec2<f32> = u_xlat36;
        let x_789 : vec2<f32> = u_xlat36;
        let x_791 : vec4<f32> = u_xlat3;
        let x_793 : vec2<f32> = ((-(x_787) * x_789) + vec2<f32>(x_791.y, x_791.w));
        let x_794 : vec3<f32> = u_xlat19;
        u_xlat19 = vec3<f32>(x_793.x, x_794.y, x_793.y);
        let x_796 : vec4<f32> = u_xlat4;
        let x_799 : vec2<f32> = (vec2<f32>(x_796.x, x_796.y) + vec2<f32>(2.0f, 2.0f));
        let x_800 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_799.x, x_799.y, x_800.z, x_800.w);
        let x_802 : vec3<f32> = u_xlat19;
        let x_804 : vec2<f32> = (vec2<f32>(x_802.x, x_802.z) + vec2<f32>(2.0f, 2.0f));
        let x_805 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_805.x, x_804.x, x_805.z, x_804.y);
        let x_808 : f32 = u_xlat3.y;
        u_xlat6.z = (x_808 * 0.081632003f);
        let x_812 : vec4<f32> = u_xlat3;
        let x_815 : vec3<f32> = (vec3<f32>(x_812.z, x_812.x, x_812.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_816 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_815.x, x_815.y, x_815.z, x_816.w);
        let x_818 : vec4<f32> = u_xlat4;
        let x_821 : vec2<f32> = (vec2<f32>(x_818.x, x_818.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_822 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_821.x, x_821.y, x_822.z, x_822.w);
        let x_825 : f32 = u_xlat7.y;
        u_xlat6.x = x_825;
        let x_827 : vec2<f32> = u_xlat34;
        let x_834 : vec2<f32> = ((vec2<f32>(x_827.x, x_827.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_835 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_835.x, x_834.x, x_835.z, x_834.y);
        let x_837 : vec2<f32> = u_xlat34;
        let x_841 : vec2<f32> = ((vec2<f32>(x_837.x, x_837.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_842 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_841.x, x_842.y, x_841.y, x_842.w);
        let x_845 : f32 = u_xlat3.x;
        u_xlat4.y = x_845;
        let x_848 : f32 = u_xlat5.y;
        u_xlat4.w = x_848;
        let x_850 : vec4<f32> = u_xlat4;
        let x_851 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_850 + x_851);
        let x_853 : vec2<f32> = u_xlat34;
        let x_856 : vec2<f32> = ((vec2<f32>(x_853.y, x_853.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_857 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_857.x, x_856.x, x_857.z, x_856.y);
        let x_859 : vec2<f32> = u_xlat34;
        let x_862 : vec2<f32> = ((vec2<f32>(x_859.y, x_859.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_863 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_862.x, x_863.y, x_862.y, x_863.w);
        let x_866 : f32 = u_xlat3.y;
        u_xlat5.y = x_866;
        let x_868 : vec4<f32> = u_xlat5;
        let x_869 : vec4<f32> = u_xlat7;
        u_xlat3 = (x_868 + x_869);
        let x_871 : vec4<f32> = u_xlat4;
        let x_872 : vec4<f32> = u_xlat6;
        u_xlat4 = (x_871 / x_872);
        let x_874 : vec4<f32> = u_xlat4;
        u_xlat4 = (x_874 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_880 : vec4<f32> = u_xlat5;
        let x_881 : vec4<f32> = u_xlat3;
        u_xlat5 = (x_880 / x_881);
        let x_883 : vec4<f32> = u_xlat5;
        u_xlat5 = (x_883 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_885 : vec4<f32> = u_xlat4;
        let x_888 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        u_xlat4 = (vec4<f32>(x_885.w, x_885.x, x_885.y, x_885.z) * vec4<f32>(x_888.x, x_888.x, x_888.x, x_888.x));
        let x_891 : vec4<f32> = u_xlat5;
        let x_894 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        u_xlat5 = (vec4<f32>(x_891.x, x_891.w, x_891.y, x_891.z) * vec4<f32>(x_894.y, x_894.y, x_894.y, x_894.y));
        let x_897 : vec4<f32> = u_xlat4;
        let x_898 : vec3<f32> = vec3<f32>(x_897.y, x_897.z, x_897.w);
        let x_899 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_898.x, x_899.y, x_898.y, x_898.z);
        let x_902 : f32 = u_xlat5.x;
        u_xlat7.y = x_902;
        let x_904 : vec4<f32> = u_xlat2;
        let x_907 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_910 : vec4<f32> = u_xlat7;
        u_xlat8 = ((vec4<f32>(x_904.x, x_904.y, x_904.x, x_904.y) * vec4<f32>(x_907.x, x_907.y, x_907.x, x_907.y)) + vec4<f32>(x_910.x, x_910.y, x_910.z, x_910.y));
        let x_913 : vec4<f32> = u_xlat2;
        let x_916 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_919 : vec4<f32> = u_xlat7;
        u_xlat34 = ((vec2<f32>(x_913.x, x_913.y) * vec2<f32>(x_916.x, x_916.y)) + vec2<f32>(x_919.w, x_919.y));
        let x_923 : f32 = u_xlat7.y;
        u_xlat4.y = x_923;
        let x_926 : f32 = u_xlat5.z;
        u_xlat7.y = x_926;
        let x_928 : vec4<f32> = u_xlat2;
        let x_931 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_934 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_928.x, x_928.y, x_928.x, x_928.y) * vec4<f32>(x_931.x, x_931.y, x_931.x, x_931.y)) + vec4<f32>(x_934.x, x_934.y, x_934.z, x_934.y));
        let x_937 : vec4<f32> = u_xlat2;
        let x_940 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_943 : vec4<f32> = u_xlat7;
        let x_945 : vec2<f32> = ((vec2<f32>(x_937.x, x_937.y) * vec2<f32>(x_940.x, x_940.y)) + vec2<f32>(x_943.w, x_943.y));
        let x_946 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_945.x, x_945.y, x_946.z, x_946.w);
        let x_949 : f32 = u_xlat7.y;
        u_xlat4.z = x_949;
        let x_952 : vec4<f32> = u_xlat2;
        let x_955 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_958 : vec4<f32> = u_xlat4;
        u_xlat11 = ((vec4<f32>(x_952.x, x_952.y, x_952.x, x_952.y) * vec4<f32>(x_955.x, x_955.y, x_955.x, x_955.y)) + vec4<f32>(x_958.x, x_958.y, x_958.x, x_958.z));
        let x_962 : f32 = u_xlat5.w;
        u_xlat7.y = x_962;
        let x_965 : vec4<f32> = u_xlat2;
        let x_968 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_971 : vec4<f32> = u_xlat7;
        u_xlat12 = ((vec4<f32>(x_965.x, x_965.y, x_965.x, x_965.y) * vec4<f32>(x_968.x, x_968.y, x_968.x, x_968.y)) + vec4<f32>(x_971.x, x_971.y, x_971.z, x_971.y));
        let x_975 : vec4<f32> = u_xlat2;
        let x_978 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_981 : vec4<f32> = u_xlat7;
        u_xlat20 = ((vec2<f32>(x_975.x, x_975.y) * vec2<f32>(x_978.x, x_978.y)) + vec2<f32>(x_981.w, x_981.y));
        let x_985 : f32 = u_xlat7.y;
        u_xlat4.w = x_985;
        let x_988 : vec4<f32> = u_xlat2;
        let x_991 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_994 : vec4<f32> = u_xlat4;
        u_xlat42 = ((vec2<f32>(x_988.x, x_988.y) * vec2<f32>(x_991.x, x_991.y)) + vec2<f32>(x_994.x, x_994.w));
        let x_997 : vec4<f32> = u_xlat7;
        let x_998 : vec3<f32> = vec3<f32>(x_997.x, x_997.z, x_997.w);
        let x_999 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_998.x, x_999.y, x_998.y, x_998.z);
        let x_1001 : vec4<f32> = u_xlat2;
        let x_1004 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_1007 : vec4<f32> = u_xlat5;
        u_xlat7 = ((vec4<f32>(x_1001.x, x_1001.y, x_1001.x, x_1001.y) * vec4<f32>(x_1004.x, x_1004.y, x_1004.x, x_1004.y)) + vec4<f32>(x_1007.x, x_1007.y, x_1007.z, x_1007.y));
        let x_1011 : vec4<f32> = u_xlat2;
        let x_1014 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_1017 : vec4<f32> = u_xlat5;
        u_xlat37 = ((vec2<f32>(x_1011.x, x_1011.y) * vec2<f32>(x_1014.x, x_1014.y)) + vec2<f32>(x_1017.w, x_1017.y));
        let x_1021 : f32 = u_xlat4.x;
        u_xlat5.x = x_1021;
        let x_1023 : vec4<f32> = u_xlat2;
        let x_1026 : vec4<f32> = x_147.x_MainLightShadowmapSize;
        let x_1029 : vec4<f32> = u_xlat5;
        let x_1031 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.y) * vec2<f32>(x_1026.x, x_1026.y)) + vec2<f32>(x_1029.x, x_1029.y));
        let x_1032 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_1031.x, x_1031.y, x_1032.z, x_1032.w);
        let x_1035 : vec4<f32> = u_xlat3;
        let x_1037 : vec4<f32> = u_xlat6;
        u_xlat13 = (vec4<f32>(x_1035.x, x_1035.x, x_1035.x, x_1035.x) * x_1037);
        let x_1040 : vec4<f32> = u_xlat3;
        let x_1042 : vec4<f32> = u_xlat6;
        u_xlat14 = (vec4<f32>(x_1040.y, x_1040.y, x_1040.y, x_1040.y) * x_1042);
        let x_1045 : vec4<f32> = u_xlat3;
        let x_1047 : vec4<f32> = u_xlat6;
        u_xlat15 = (vec4<f32>(x_1045.z, x_1045.z, x_1045.z, x_1045.z) * x_1047);
        let x_1049 : vec4<f32> = u_xlat3;
        let x_1051 : vec4<f32> = u_xlat6;
        u_xlat3 = (vec4<f32>(x_1049.w, x_1049.w, x_1049.w, x_1049.w) * x_1051);
        let x_1054 : vec4<f32> = u_xlat8;
        let x_1055 : vec2<f32> = vec2<f32>(x_1054.x, x_1054.y);
        let x_1057 : f32 = vs_TEXCOORD4.z;
        txVec13 = vec3<f32>(x_1055.x, x_1055.y, x_1057);
        let x_1064 : vec3<f32> = txVec13;
        let x_1066 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1064.xy, x_1064.z);
        u_xlat4.x = x_1066;
        let x_1069 : vec4<f32> = u_xlat8;
        let x_1070 : vec2<f32> = vec2<f32>(x_1069.z, x_1069.w);
        let x_1072 : f32 = vs_TEXCOORD4.z;
        txVec14 = vec3<f32>(x_1070.x, x_1070.y, x_1072);
        let x_1080 : vec3<f32> = txVec14;
        let x_1082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1080.xy, x_1080.z);
        u_xlat52 = x_1082;
        let x_1083 : f32 = u_xlat52;
        let x_1085 : f32 = u_xlat13.y;
        u_xlat52 = (x_1083 * x_1085);
        let x_1088 : f32 = u_xlat13.x;
        let x_1090 : f32 = u_xlat4.x;
        let x_1092 : f32 = u_xlat52;
        u_xlat4.x = ((x_1088 * x_1090) + x_1092);
        let x_1096 : vec2<f32> = u_xlat34;
        let x_1098 : f32 = vs_TEXCOORD4.z;
        txVec15 = vec3<f32>(x_1096.x, x_1096.y, x_1098);
        let x_1105 : vec3<f32> = txVec15;
        let x_1107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1105.xy, x_1105.z);
        u_xlat34.x = x_1107;
        let x_1110 : f32 = u_xlat13.z;
        let x_1112 : f32 = u_xlat34.x;
        let x_1115 : f32 = u_xlat4.x;
        u_xlat34.x = ((x_1110 * x_1112) + x_1115);
        let x_1119 : vec4<f32> = u_xlat11;
        let x_1120 : vec2<f32> = vec2<f32>(x_1119.x, x_1119.y);
        let x_1122 : f32 = vs_TEXCOORD4.z;
        txVec16 = vec3<f32>(x_1120.x, x_1120.y, x_1122);
        let x_1130 : vec3<f32> = txVec16;
        let x_1132 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1130.xy, x_1130.z);
        u_xlat50 = x_1132;
        let x_1134 : f32 = u_xlat13.w;
        let x_1135 : f32 = u_xlat50;
        let x_1138 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1134 * x_1135) + x_1138);
        let x_1142 : vec4<f32> = u_xlat9;
        let x_1143 : vec2<f32> = vec2<f32>(x_1142.x, x_1142.y);
        let x_1145 : f32 = vs_TEXCOORD4.z;
        txVec17 = vec3<f32>(x_1143.x, x_1143.y, x_1145);
        let x_1152 : vec3<f32> = txVec17;
        let x_1154 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1152.xy, x_1152.z);
        u_xlat50 = x_1154;
        let x_1156 : f32 = u_xlat14.x;
        let x_1157 : f32 = u_xlat50;
        let x_1160 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1156 * x_1157) + x_1160);
        let x_1164 : vec4<f32> = u_xlat9;
        let x_1165 : vec2<f32> = vec2<f32>(x_1164.z, x_1164.w);
        let x_1167 : f32 = vs_TEXCOORD4.z;
        txVec18 = vec3<f32>(x_1165.x, x_1165.y, x_1167);
        let x_1174 : vec3<f32> = txVec18;
        let x_1176 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1174.xy, x_1174.z);
        u_xlat50 = x_1176;
        let x_1178 : f32 = u_xlat14.y;
        let x_1179 : f32 = u_xlat50;
        let x_1182 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1178 * x_1179) + x_1182);
        let x_1186 : vec4<f32> = u_xlat10;
        let x_1187 : vec2<f32> = vec2<f32>(x_1186.x, x_1186.y);
        let x_1189 : f32 = vs_TEXCOORD4.z;
        txVec19 = vec3<f32>(x_1187.x, x_1187.y, x_1189);
        let x_1196 : vec3<f32> = txVec19;
        let x_1198 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1196.xy, x_1196.z);
        u_xlat50 = x_1198;
        let x_1200 : f32 = u_xlat14.z;
        let x_1201 : f32 = u_xlat50;
        let x_1204 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1200 * x_1201) + x_1204);
        let x_1208 : vec4<f32> = u_xlat11;
        let x_1209 : vec2<f32> = vec2<f32>(x_1208.z, x_1208.w);
        let x_1211 : f32 = vs_TEXCOORD4.z;
        txVec20 = vec3<f32>(x_1209.x, x_1209.y, x_1211);
        let x_1218 : vec3<f32> = txVec20;
        let x_1220 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1218.xy, x_1218.z);
        u_xlat50 = x_1220;
        let x_1222 : f32 = u_xlat14.w;
        let x_1223 : f32 = u_xlat50;
        let x_1226 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1222 * x_1223) + x_1226);
        let x_1230 : vec4<f32> = u_xlat12;
        let x_1231 : vec2<f32> = vec2<f32>(x_1230.x, x_1230.y);
        let x_1233 : f32 = vs_TEXCOORD4.z;
        txVec21 = vec3<f32>(x_1231.x, x_1231.y, x_1233);
        let x_1240 : vec3<f32> = txVec21;
        let x_1242 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1240.xy, x_1240.z);
        u_xlat50 = x_1242;
        let x_1244 : f32 = u_xlat15.x;
        let x_1245 : f32 = u_xlat50;
        let x_1248 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1244 * x_1245) + x_1248);
        let x_1252 : vec4<f32> = u_xlat12;
        let x_1253 : vec2<f32> = vec2<f32>(x_1252.z, x_1252.w);
        let x_1255 : f32 = vs_TEXCOORD4.z;
        txVec22 = vec3<f32>(x_1253.x, x_1253.y, x_1255);
        let x_1262 : vec3<f32> = txVec22;
        let x_1264 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1262.xy, x_1262.z);
        u_xlat50 = x_1264;
        let x_1266 : f32 = u_xlat15.y;
        let x_1267 : f32 = u_xlat50;
        let x_1270 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1266 * x_1267) + x_1270);
        let x_1274 : vec2<f32> = u_xlat20;
        let x_1276 : f32 = vs_TEXCOORD4.z;
        txVec23 = vec3<f32>(x_1274.x, x_1274.y, x_1276);
        let x_1283 : vec3<f32> = txVec23;
        let x_1285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1283.xy, x_1283.z);
        u_xlat50 = x_1285;
        let x_1287 : f32 = u_xlat15.z;
        let x_1288 : f32 = u_xlat50;
        let x_1291 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1287 * x_1288) + x_1291);
        let x_1295 : vec2<f32> = u_xlat42;
        let x_1297 : f32 = vs_TEXCOORD4.z;
        txVec24 = vec3<f32>(x_1295.x, x_1295.y, x_1297);
        let x_1304 : vec3<f32> = txVec24;
        let x_1306 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1304.xy, x_1304.z);
        u_xlat50 = x_1306;
        let x_1308 : f32 = u_xlat15.w;
        let x_1309 : f32 = u_xlat50;
        let x_1312 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1308 * x_1309) + x_1312);
        let x_1316 : vec4<f32> = u_xlat7;
        let x_1317 : vec2<f32> = vec2<f32>(x_1316.x, x_1316.y);
        let x_1319 : f32 = vs_TEXCOORD4.z;
        txVec25 = vec3<f32>(x_1317.x, x_1317.y, x_1319);
        let x_1326 : vec3<f32> = txVec25;
        let x_1328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1326.xy, x_1326.z);
        u_xlat50 = x_1328;
        let x_1330 : f32 = u_xlat3.x;
        let x_1331 : f32 = u_xlat50;
        let x_1334 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1330 * x_1331) + x_1334);
        let x_1338 : vec4<f32> = u_xlat7;
        let x_1339 : vec2<f32> = vec2<f32>(x_1338.z, x_1338.w);
        let x_1341 : f32 = vs_TEXCOORD4.z;
        txVec26 = vec3<f32>(x_1339.x, x_1339.y, x_1341);
        let x_1348 : vec3<f32> = txVec26;
        let x_1350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1348.xy, x_1348.z);
        u_xlat50 = x_1350;
        let x_1352 : f32 = u_xlat3.y;
        let x_1353 : f32 = u_xlat50;
        let x_1356 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1352 * x_1353) + x_1356);
        let x_1360 : vec2<f32> = u_xlat37;
        let x_1362 : f32 = vs_TEXCOORD4.z;
        txVec27 = vec3<f32>(x_1360.x, x_1360.y, x_1362);
        let x_1369 : vec3<f32> = txVec27;
        let x_1371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1369.xy, x_1369.z);
        u_xlat50 = x_1371;
        let x_1373 : f32 = u_xlat3.z;
        let x_1374 : f32 = u_xlat50;
        let x_1377 : f32 = u_xlat34.x;
        u_xlat34.x = ((x_1373 * x_1374) + x_1377);
        let x_1381 : vec4<f32> = u_xlat2;
        let x_1382 : vec2<f32> = vec2<f32>(x_1381.x, x_1381.y);
        let x_1384 : f32 = vs_TEXCOORD4.z;
        txVec28 = vec3<f32>(x_1382.x, x_1382.y, x_1384);
        let x_1391 : vec3<f32> = txVec28;
        let x_1393 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1391.xy, x_1391.z);
        u_xlat2.x = x_1393;
        let x_1396 : f32 = u_xlat3.w;
        let x_1398 : f32 = u_xlat2.x;
        let x_1401 : f32 = u_xlat34.x;
        u_xlat48 = ((x_1396 * x_1398) + x_1401);
      }
    }
  } else {
    let x_1405 : vec4<f32> = vs_TEXCOORD4;
    let x_1406 : vec2<f32> = vec2<f32>(x_1405.x, x_1405.y);
    let x_1408 : f32 = vs_TEXCOORD4.z;
    txVec29 = vec3<f32>(x_1406.x, x_1406.y, x_1408);
    let x_1415 : vec3<f32> = txVec29;
    let x_1417 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1415.xy, x_1415.z);
    u_xlat48 = x_1417;
  }
  let x_1419 : f32 = x_147.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1419) + 1.0f);
  let x_1423 : f32 = u_xlat48;
  let x_1425 : f32 = x_147.x_MainLightShadowParams.x;
  let x_1428 : f32 = u_xlat2.x;
  u_xlat48 = ((x_1423 * x_1425) + x_1428);
  let x_1431 : f32 = vs_TEXCOORD4.z;
  u_xlatb2 = (0.0f >= x_1431);
  let x_1435 : f32 = vs_TEXCOORD4.z;
  u_xlatb18 = (x_1435 >= 1.0f);
  let x_1437 : bool = u_xlatb18;
  let x_1438 : bool = u_xlatb2;
  u_xlatb2 = (x_1437 | x_1438);
  let x_1440 : bool = u_xlatb2;
  let x_1441 : f32 = u_xlat48;
  u_xlat48 = select(x_1441, 1.0f, x_1440);
  let x_1444 : vec4<f32> = vs_TEXCOORD3;
  let x_1446 : f32 = u_xlat48;
  let x_1449 : vec4<f32> = u_xlat0;
  let x_1451 : vec3<f32> = ((vec3<f32>(x_1444.x, x_1444.y, x_1444.z) * vec3<f32>(x_1446, x_1446, x_1446)) + vec3<f32>(x_1449.x, x_1449.y, x_1449.z));
  let x_1452 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1451.x, x_1451.y, x_1451.z, x_1452.w);
  let x_1455 : f32 = vs_TEXCOORD3.w;
  let x_1457 : f32 = vs_TEXCOORD3.w;
  u_xlat48 = (x_1455 * -(x_1457));
  let x_1460 : f32 = u_xlat48;
  u_xlat48 = exp2(x_1460);
  let x_1462 : vec4<f32> = u_xlat1;
  let x_1464 : vec4<f32> = u_xlat0;
  let x_1469 : vec4<f32> = x_134.unity_FogColor;
  let x_1472 : vec3<f32> = ((vec3<f32>(x_1462.x, x_1462.y, x_1462.z) * vec3<f32>(x_1464.x, x_1464.y, x_1464.z)) + -(vec3<f32>(x_1469.x, x_1469.y, x_1469.z)));
  let x_1473 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1472.x, x_1472.y, x_1472.z, x_1473.w);
  let x_1477 : f32 = u_xlat48;
  let x_1479 : vec4<f32> = u_xlat0;
  let x_1483 : vec4<f32> = x_134.unity_FogColor;
  let x_1485 : vec3<f32> = ((vec3<f32>(x_1477, x_1477, x_1477) * vec3<f32>(x_1479.x, x_1479.y, x_1479.z)) + vec3<f32>(x_1483.x, x_1483.y, x_1483.z));
  let x_1486 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1485.x, x_1485.y, x_1485.z, x_1486.w);
  let x_1489 : f32 = u_xlat1.w;
  SV_Target0.w = x_1489;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(3) vs_TEXCOORD5_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec2<f32>, @location(2) vs_TEXCOORD4_param : vec4<f32>, @location(1) vs_TEXCOORD3_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

