struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_NightFade : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(5) var Texture2D_52571568 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_52571568 : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_45 : PGlobals;

@group(0) @binding(7) var Texture2D_8BA53EED : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_8BA53EED : sampler;

@group(0) @binding(8) var Texture2D_AB84E4D0 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_AB84E4D0 : sampler;

@group(1) @binding(2) var<uniform> x_120 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_F0A81025 : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_F0A81025 : sampler;

var<private> vs_INTERP2 : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_499 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2106 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat45 : f32;
  var u_xlatb45 : bool;
  var u_xlat3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat68 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat5 : vec4<f32>;
  var x_270 : vec3<f32>;
  var u_xlat6 : vec3<f32>;
  var u_xlat69 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlat25 : f32;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlat47 : f32;
  var u_xlatb71 : bool;
  var u_xlat8 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb28 : bool;
  var u_xlat28 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat50 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb50 : bool;
  var u_xlat74 : f32;
  var u_xlatu68 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati71 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati69 : i32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_40 : vec4<f32> = vs_INTERP3;
  let x_51 : f32 = x_45.x_GlobalMipBias.x;
  let x_52 : vec4<f32> = textureSampleBias(Texture2D_52571568, samplerTexture2D_52571568, vec2<f32>(x_40.x, x_40.y), x_51);
  u_xlat0 = vec3<f32>(x_52.x, x_52.y, x_52.z);
  let x_60 : vec4<f32> = vs_INTERP3;
  let x_63 : f32 = x_45.x_GlobalMipBias.x;
  let x_64 : vec4<f32> = textureSampleBias(Texture2D_8BA53EED, samplerTexture2D_8BA53EED, vec2<f32>(x_60.x, x_60.y), x_63);
  let x_65 : vec3<f32> = vec3<f32>(x_64.x, x_64.y, x_64.w);
  let x_66 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_65.x, x_65.y, x_65.z, x_66.w);
  let x_70 : f32 = u_xlat1.x;
  let x_73 : f32 = u_xlat1.z;
  u_xlat1.x = (x_70 * x_73);
  let x_76 : vec4<f32> = u_xlat1;
  let x_83 : vec2<f32> = ((vec2<f32>(x_76.x, x_76.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_84 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  let x_87 : vec4<f32> = u_xlat1;
  let x_89 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec2<f32>(x_87.x, x_87.y), vec2<f32>(x_89.x, x_89.y));
  let x_92 : f32 = u_xlat66;
  u_xlat66 = min(x_92, 1.0f);
  let x_94 : f32 = u_xlat66;
  u_xlat66 = (-(x_94) + 1.0f);
  let x_97 : f32 = u_xlat66;
  u_xlat66 = sqrt(x_97);
  let x_99 : f32 = u_xlat66;
  u_xlat66 = max(x_99, 1.00000002e-16f);
  let x_108 : vec4<f32> = vs_INTERP3;
  let x_111 : f32 = x_45.x_GlobalMipBias.x;
  let x_112 : vec4<f32> = textureSampleBias(Texture2D_AB84E4D0, samplerTexture2D_AB84E4D0, vec2<f32>(x_108.x, x_108.y), x_111);
  let x_113 : vec3<f32> = vec3<f32>(x_112.x, x_112.y, x_112.z);
  let x_114 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_125 : vec4<f32> = x_120.unity_ObjectToWorld[3i];
  let x_128 : vec4<f32> = x_120.unity_ObjectToWorld[3i];
  u_xlat45 = dot(vec3<f32>(x_125.x, x_125.y, x_125.z), vec3<f32>(x_128.x, x_128.y, x_128.z));
  let x_131 : f32 = u_xlat45;
  u_xlat45 = sqrt(x_131);
  let x_133 : f32 = u_xlat45;
  u_xlat45 = fract(x_133);
  let x_135 : f32 = u_xlat45;
  let x_138 : f32 = x_45.x_NightFade;
  u_xlat45 = (x_135 + x_138);
  let x_143 : f32 = u_xlat45;
  u_xlatb45 = (x_143 >= 1.0f);
  let x_145 : bool = u_xlatb45;
  u_xlat45 = select(0.0f, 1.0f, x_145);
  let x_154 : vec4<f32> = vs_INTERP3;
  let x_157 : f32 = x_45.x_GlobalMipBias.x;
  let x_158 : vec4<f32> = textureSampleBias(Texture2D_F0A81025, samplerTexture2D_F0A81025, vec2<f32>(x_154.x, x_154.y), x_157);
  u_xlat3 = vec3<f32>(x_158.x, x_158.w, x_158.y);
  let x_163 : f32 = vs_INTERP2.w;
  u_xlatb67 = (0.0f < x_163);
  let x_166 : bool = u_xlatb67;
  u_xlat67 = select(-1.0f, 1.0f, x_166);
  let x_170 : f32 = x_120.unity_WorldTransformParams.w;
  u_xlatb68 = (x_170 >= 0.0f);
  let x_173 : bool = u_xlatb68;
  u_xlat68 = select(-1.0f, 1.0f, x_173);
  let x_175 : f32 = u_xlat67;
  let x_176 : f32 = u_xlat68;
  u_xlat67 = (x_175 * x_176);
  let x_181 : vec3<f32> = vs_INTERP1;
  let x_183 : vec4<f32> = vs_INTERP2;
  u_xlat4 = (vec3<f32>(x_181.z, x_181.x, x_181.y) * vec3<f32>(x_183.y, x_183.z, x_183.x));
  let x_186 : vec3<f32> = vs_INTERP1;
  let x_188 : vec4<f32> = vs_INTERP2;
  let x_191 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_186.y, x_186.z, x_186.x) * vec3<f32>(x_188.z, x_188.x, x_188.y)) + -(x_191));
  let x_194 : f32 = u_xlat67;
  let x_196 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_194, x_194, x_194) * x_196);
  let x_198 : vec4<f32> = u_xlat1;
  let x_200 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_198.y, x_198.y, x_198.y) * x_200);
  let x_202 : vec4<f32> = u_xlat1;
  let x_204 : vec4<f32> = vs_INTERP2;
  let x_207 : vec3<f32> = u_xlat4;
  let x_208 : vec3<f32> = ((vec3<f32>(x_202.x, x_202.x, x_202.x) * vec3<f32>(x_204.x, x_204.y, x_204.z)) + x_207);
  let x_209 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_208.x, x_208.y, x_209.z, x_208.z);
  let x_211 : f32 = u_xlat66;
  let x_213 : vec3<f32> = vs_INTERP1;
  let x_215 : vec4<f32> = u_xlat1;
  let x_217 : vec3<f32> = ((vec3<f32>(x_211, x_211, x_211) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.w));
  let x_218 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_217.x, x_217.y, x_218.z, x_217.z);
  let x_220 : vec4<f32> = u_xlat1;
  let x_222 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec3<f32>(x_220.x, x_220.y, x_220.w), vec3<f32>(x_222.x, x_222.y, x_222.w));
  let x_225 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_225);
  let x_227 : f32 = u_xlat66;
  let x_229 : vec4<f32> = u_xlat1;
  let x_231 : vec3<f32> = (vec3<f32>(x_227, x_227, x_227) * vec3<f32>(x_229.x, x_229.y, x_229.w));
  let x_232 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_231.x, x_231.y, x_232.z, x_231.z);
  let x_237 : f32 = x_45.unity_OrthoParams.w;
  u_xlatb66 = (x_237 == 0.0f);
  let x_240 : vec3<f32> = vs_INTERP0;
  let x_245 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_240) + x_245);
  let x_247 : vec3<f32> = u_xlat4;
  let x_248 : vec3<f32> = u_xlat4;
  u_xlat68 = dot(x_247, x_248);
  let x_250 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_250);
  let x_252 : f32 = u_xlat68;
  let x_254 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_252, x_252, x_252) * x_254);
  let x_259 : f32 = x_45.unity_MatrixV[0i].z;
  u_xlat5.x = x_259;
  let x_262 : f32 = x_45.unity_MatrixV[1i].z;
  u_xlat5.y = x_262;
  let x_267 : f32 = x_45.unity_MatrixV[2i].z;
  u_xlat5.z = x_267;
  let x_269 : bool = u_xlatb66;
  if (x_269) {
    let x_273 : vec3<f32> = u_xlat4;
    x_270 = x_273;
  } else {
    let x_275 : vec4<f32> = u_xlat5;
    x_270 = vec3<f32>(x_275.x, x_275.y, x_275.z);
  }
  let x_277 : vec3<f32> = x_270;
  u_xlat4 = x_277;
  let x_279 : f32 = vs_INTERP0.y;
  let x_281 : f32 = x_45.unity_MatrixV[1i].z;
  u_xlat66 = (x_279 * x_281);
  let x_284 : f32 = x_45.unity_MatrixV[0i].z;
  let x_286 : f32 = vs_INTERP0.x;
  let x_288 : f32 = u_xlat66;
  u_xlat66 = ((x_284 * x_286) + x_288);
  let x_291 : f32 = x_45.unity_MatrixV[2i].z;
  let x_293 : f32 = vs_INTERP0.z;
  let x_295 : f32 = u_xlat66;
  u_xlat66 = ((x_291 * x_293) + x_295);
  let x_297 : f32 = u_xlat66;
  let x_299 : f32 = x_45.unity_MatrixV[3i].z;
  u_xlat66 = (x_297 + x_299);
  let x_301 : f32 = u_xlat66;
  let x_305 : f32 = x_45.x_ProjectionParams.y;
  u_xlat66 = (-(x_301) + -(x_305));
  let x_308 : f32 = u_xlat66;
  u_xlat66 = max(x_308, 0.0f);
  let x_310 : f32 = u_xlat66;
  let x_313 : f32 = x_45.unity_FogParams.x;
  u_xlat66 = (x_310 * x_313);
  let x_322 : vec2<f32> = vs_INTERP4;
  let x_324 : f32 = x_45.x_GlobalMipBias.x;
  let x_325 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_322, x_324);
  u_xlat5 = x_325;
  let x_331 : vec2<f32> = vs_INTERP4;
  let x_333 : f32 = x_45.x_GlobalMipBias.x;
  let x_334 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_331, x_333);
  u_xlat6 = vec3<f32>(x_334.x, x_334.y, x_334.z);
  let x_336 : vec4<f32> = u_xlat5;
  let x_340 : vec3<f32> = (vec3<f32>(x_336.x, x_336.y, x_336.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_341 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_340.x, x_340.y, x_340.z, x_341.w);
  let x_343 : vec4<f32> = u_xlat1;
  let x_345 : vec4<f32> = u_xlat5;
  u_xlat68 = dot(vec3<f32>(x_343.x, x_343.y, x_343.w), vec3<f32>(x_345.x, x_345.y, x_345.z));
  let x_348 : f32 = u_xlat68;
  u_xlat68 = (x_348 + 0.5f);
  let x_351 : f32 = u_xlat68;
  let x_353 : vec3<f32> = u_xlat6;
  let x_354 : vec3<f32> = (vec3<f32>(x_351, x_351, x_351) * x_353);
  let x_355 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_354.x, x_354.y, x_354.z, x_355.w);
  let x_358 : f32 = u_xlat5.w;
  u_xlat68 = max(x_358, 0.0001f);
  let x_361 : vec4<f32> = u_xlat5;
  let x_363 : f32 = u_xlat68;
  let x_365 : vec3<f32> = (vec3<f32>(x_361.x, x_361.y, x_361.z) / vec3<f32>(x_363, x_363, x_363));
  let x_366 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_365.x, x_365.y, x_365.z, x_366.w);
  let x_370 : vec4<f32> = x_45.x_ScaledScreenParams;
  let x_371 : vec2<f32> = vec2<f32>(x_370.x, x_370.y);
  let x_375 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_371.x, x_371.y));
  let x_376 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_375.x, x_375.y, x_376.z);
  let x_378 : vec3<f32> = u_xlat6;
  let x_380 : vec4<f32> = hlslcc_FragCoord;
  let x_382 : vec2<f32> = (vec2<f32>(x_378.x, x_378.y) * vec2<f32>(x_380.x, x_380.y));
  let x_383 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_382.x, x_382.y, x_383.z);
  let x_386 : f32 = u_xlat6.y;
  let x_389 : f32 = x_45.x_ScaleBiasRt.x;
  let x_392 : f32 = x_45.x_ScaleBiasRt.y;
  u_xlat68 = ((x_386 * x_389) + x_392);
  let x_394 : f32 = u_xlat68;
  u_xlat6.z = (-(x_394) + 1.0f);
  let x_398 : vec3<f32> = u_xlat3;
  let x_399 : vec2<f32> = vec2<f32>(x_398.x, x_398.y);
  let x_400 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_399.x, x_399.y, x_400.z);
  let x_402 : vec3<f32> = u_xlat3;
  let x_406 : vec2<f32> = clamp(vec2<f32>(x_402.x, x_402.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_407 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_406.x, x_406.y, x_407.z);
  let x_410 : f32 = u_xlat3.x;
  u_xlat68 = ((-(x_410) * 0.959999979f) + 0.959999979f);
  let x_416 : f32 = u_xlat68;
  let x_419 : f32 = u_xlat3.y;
  u_xlat69 = (-(x_416) + x_419);
  let x_422 : vec3<f32> = u_xlat0;
  let x_423 : f32 = u_xlat68;
  u_xlat7 = (x_422 * vec3<f32>(x_423, x_423, x_423));
  let x_426 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_426 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_430 : vec3<f32> = u_xlat3;
  let x_432 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_430.x, x_430.x, x_430.x) * x_432) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_438 : f32 = u_xlat3.y;
  u_xlat68 = (-(x_438) + 1.0f);
  let x_441 : f32 = u_xlat68;
  let x_442 : f32 = u_xlat68;
  u_xlat3.x = (x_441 * x_442);
  let x_446 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_446, 0.0078125f);
  let x_452 : f32 = u_xlat3.x;
  let x_454 : f32 = u_xlat3.x;
  u_xlat25 = (x_452 * x_454);
  let x_456 : f32 = u_xlat69;
  u_xlat69 = (x_456 + 1.0f);
  let x_458 : f32 = u_xlat69;
  u_xlat69 = min(x_458, 1.0f);
  let x_462 : f32 = u_xlat3.x;
  u_xlat70 = ((x_462 * 4.0f) + 2.0f);
  let x_472 : vec3<f32> = u_xlat6;
  let x_475 : f32 = x_45.x_GlobalMipBias.x;
  let x_476 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_472.x, x_472.z), x_475);
  u_xlat71 = x_476.x;
  let x_478 : f32 = u_xlat71;
  u_xlat6.x = (x_478 + -1.0f);
  let x_483 : f32 = x_45.x_AmbientOcclusionParam.w;
  let x_485 : f32 = u_xlat6.x;
  u_xlat6.x = ((x_483 * x_485) + 1.0f);
  let x_491 : f32 = u_xlat3.z;
  let x_492 : f32 = u_xlat71;
  u_xlat47 = min(x_491, x_492);
  let x_501 : f32 = x_499.x_MainLightShadowParams.y;
  u_xlatb71 = (0.0f < x_501);
  let x_503 : bool = u_xlatb71;
  if (x_503) {
    let x_507 : f32 = x_499.x_MainLightShadowParams.y;
    u_xlatb71 = (x_507 == 1.0f);
    let x_509 : bool = u_xlatb71;
    if (x_509) {
      let x_514 : vec4<f32> = vs_INTERP8;
      let x_518 : vec4<f32> = x_499.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_514.x, x_514.y, x_514.x, x_514.y) + x_518);
      let x_521 : vec4<f32> = u_xlat8;
      let x_522 : vec2<f32> = vec2<f32>(x_521.x, x_521.y);
      let x_524 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_522.x, x_522.y, x_524);
      let x_537 : vec3<f32> = txVec0;
      let x_539 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_537.xy, x_537.z);
      u_xlat9.x = x_539;
      let x_542 : vec4<f32> = u_xlat8;
      let x_543 : vec2<f32> = vec2<f32>(x_542.z, x_542.w);
      let x_545 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_543.x, x_543.y, x_545);
      let x_552 : vec3<f32> = txVec1;
      let x_554 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_552.xy, x_552.z);
      u_xlat9.y = x_554;
      let x_556 : vec4<f32> = vs_INTERP8;
      let x_560 : vec4<f32> = x_499.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_556.x, x_556.y, x_556.x, x_556.y) + x_560);
      let x_563 : vec4<f32> = u_xlat8;
      let x_564 : vec2<f32> = vec2<f32>(x_563.x, x_563.y);
      let x_566 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_564.x, x_564.y, x_566);
      let x_573 : vec3<f32> = txVec2;
      let x_575 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_573.xy, x_573.z);
      u_xlat9.z = x_575;
      let x_578 : vec4<f32> = u_xlat8;
      let x_579 : vec2<f32> = vec2<f32>(x_578.z, x_578.w);
      let x_581 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_579.x, x_579.y, x_581);
      let x_588 : vec3<f32> = txVec3;
      let x_590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_588.xy, x_588.z);
      u_xlat9.w = x_590;
      let x_592 : vec4<f32> = u_xlat9;
      u_xlat71 = dot(x_592, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_599 : f32 = x_499.x_MainLightShadowParams.y;
      u_xlatb28 = (x_599 == 2.0f);
      let x_601 : bool = u_xlatb28;
      if (x_601) {
        let x_605 : vec4<f32> = vs_INTERP8;
        let x_608 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_612 : vec2<f32> = ((vec2<f32>(x_605.x, x_605.y) * vec2<f32>(x_608.z, x_608.w)) + vec2<f32>(0.5f, 0.5f));
        let x_613 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_612.x, x_612.y, x_613.z);
        let x_615 : vec3<f32> = u_xlat28;
        let x_617 : vec2<f32> = floor(vec2<f32>(x_615.x, x_615.y));
        let x_618 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_617.x, x_617.y, x_618.z);
        let x_620 : vec4<f32> = vs_INTERP8;
        let x_623 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_626 : vec3<f32> = u_xlat28;
        let x_629 : vec2<f32> = ((vec2<f32>(x_620.x, x_620.y) * vec2<f32>(x_623.z, x_623.w)) + -(vec2<f32>(x_626.x, x_626.y)));
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_629.x, x_629.y, x_630.z, x_630.w);
        let x_632 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_632.x, x_632.x, x_632.y, x_632.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_637 : vec4<f32> = u_xlat9;
        let x_639 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_637.x, x_637.x, x_637.z, x_637.z) * vec4<f32>(x_639.x, x_639.x, x_639.z, x_639.z));
        let x_644 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_644.y, x_644.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_649 : vec4<f32> = u_xlat10;
        let x_652 : vec4<f32> = u_xlat8;
        let x_655 : vec2<f32> = ((vec2<f32>(x_649.x, x_649.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_652.x, x_652.y)));
        let x_656 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_655.x, x_656.y, x_655.y, x_656.w);
        let x_658 : vec4<f32> = u_xlat8;
        let x_661 : vec2<f32> = (-(vec2<f32>(x_658.x, x_658.y)) + vec2<f32>(1.0f, 1.0f));
        let x_662 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_661.x, x_661.y, x_662.z, x_662.w);
        let x_665 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_665.x, x_665.y), vec2<f32>(0.0f, 0.0f));
        let x_669 : vec2<f32> = u_xlat54;
        let x_671 : vec2<f32> = u_xlat54;
        let x_673 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_669) * x_671) + vec2<f32>(x_673.x, x_673.y));
        let x_676 : vec4<f32> = u_xlat8;
        let x_678 : vec2<f32> = max(vec2<f32>(x_676.x, x_676.y), vec2<f32>(0.0f, 0.0f));
        let x_679 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_678.x, x_678.y, x_679.z, x_679.w);
        let x_681 : vec4<f32> = u_xlat8;
        let x_684 : vec4<f32> = u_xlat8;
        let x_687 : vec4<f32> = u_xlat9;
        let x_689 : vec2<f32> = ((-(vec2<f32>(x_681.x, x_681.y)) * vec2<f32>(x_684.x, x_684.y)) + vec2<f32>(x_687.y, x_687.w));
        let x_690 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_689.x, x_689.y, x_690.z, x_690.w);
        let x_692 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_692 + vec2<f32>(1.0f, 1.0f));
        let x_694 : vec4<f32> = u_xlat8;
        let x_696 : vec2<f32> = (vec2<f32>(x_694.x, x_694.y) + vec2<f32>(1.0f, 1.0f));
        let x_697 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_696.x, x_696.y, x_697.z, x_697.w);
        let x_700 : vec4<f32> = u_xlat9;
        let x_704 : vec2<f32> = (vec2<f32>(x_700.x, x_700.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_705 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_704.x, x_704.y, x_705.z, x_705.w);
        let x_708 : vec4<f32> = u_xlat10;
        let x_710 : vec2<f32> = (vec2<f32>(x_708.x, x_708.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_711 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_710.x, x_710.y, x_711.z, x_711.w);
        let x_713 : vec2<f32> = u_xlat54;
        let x_714 : vec2<f32> = (x_713 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_715 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_714.x, x_714.y, x_715.z, x_715.w);
        let x_718 : vec4<f32> = u_xlat8;
        let x_720 : vec2<f32> = (vec2<f32>(x_718.x, x_718.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_721 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_720.x, x_720.y, x_721.z, x_721.w);
        let x_723 : vec4<f32> = u_xlat9;
        let x_725 : vec2<f32> = (vec2<f32>(x_723.y, x_723.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_726 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_725.x, x_725.y, x_726.z, x_726.w);
        let x_729 : f32 = u_xlat10.x;
        u_xlat11.z = x_729;
        let x_732 : f32 = u_xlat8.x;
        u_xlat11.w = x_732;
        let x_735 : f32 = u_xlat13.x;
        u_xlat12.z = x_735;
        let x_738 : f32 = u_xlat52.x;
        u_xlat12.w = x_738;
        let x_740 : vec4<f32> = u_xlat11;
        let x_742 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_740.z, x_740.w, x_740.x, x_740.z) + vec4<f32>(x_742.z, x_742.w, x_742.x, x_742.z));
        let x_746 : f32 = u_xlat11.y;
        u_xlat10.z = x_746;
        let x_749 : f32 = u_xlat8.y;
        u_xlat10.w = x_749;
        let x_752 : f32 = u_xlat12.y;
        u_xlat13.z = x_752;
        let x_755 : f32 = u_xlat52.y;
        u_xlat13.w = x_755;
        let x_757 : vec4<f32> = u_xlat10;
        let x_759 : vec4<f32> = u_xlat13;
        let x_761 : vec3<f32> = (vec3<f32>(x_757.z, x_757.y, x_757.w) + vec3<f32>(x_759.z, x_759.y, x_759.w));
        let x_762 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_761.x, x_761.y, x_761.z, x_762.w);
        let x_764 : vec4<f32> = u_xlat12;
        let x_766 : vec4<f32> = u_xlat9;
        let x_768 : vec3<f32> = (vec3<f32>(x_764.x, x_764.z, x_764.w) / vec3<f32>(x_766.z, x_766.w, x_766.y));
        let x_769 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_768.x, x_768.y, x_768.z, x_769.w);
        let x_771 : vec4<f32> = u_xlat10;
        let x_776 : vec3<f32> = (vec3<f32>(x_771.x, x_771.y, x_771.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_777 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_776.x, x_776.y, x_776.z, x_777.w);
        let x_779 : vec4<f32> = u_xlat13;
        let x_781 : vec4<f32> = u_xlat8;
        let x_783 : vec3<f32> = (vec3<f32>(x_779.z, x_779.y, x_779.w) / vec3<f32>(x_781.x, x_781.y, x_781.z));
        let x_784 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_783.x, x_783.y, x_783.z, x_784.w);
        let x_786 : vec4<f32> = u_xlat11;
        let x_788 : vec3<f32> = (vec3<f32>(x_786.x, x_786.y, x_786.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_789 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_788.x, x_788.y, x_788.z, x_789.w);
        let x_791 : vec4<f32> = u_xlat10;
        let x_794 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_796 : vec3<f32> = (vec3<f32>(x_791.y, x_791.x, x_791.z) * vec3<f32>(x_794.x, x_794.x, x_794.x));
        let x_797 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_796.x, x_796.y, x_796.z, x_797.w);
        let x_799 : vec4<f32> = u_xlat11;
        let x_802 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_804 : vec3<f32> = (vec3<f32>(x_799.x, x_799.y, x_799.z) * vec3<f32>(x_802.y, x_802.y, x_802.y));
        let x_805 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_804.x, x_804.y, x_804.z, x_805.w);
        let x_808 : f32 = u_xlat11.x;
        u_xlat10.w = x_808;
        let x_810 : vec3<f32> = u_xlat28;
        let x_813 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_816 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_810.x, x_810.y, x_810.x, x_810.y) * vec4<f32>(x_813.x, x_813.y, x_813.x, x_813.y)) + vec4<f32>(x_816.y, x_816.w, x_816.x, x_816.w));
        let x_819 : vec3<f32> = u_xlat28;
        let x_822 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_825 : vec4<f32> = u_xlat10;
        let x_827 : vec2<f32> = ((vec2<f32>(x_819.x, x_819.y) * vec2<f32>(x_822.x, x_822.y)) + vec2<f32>(x_825.z, x_825.w));
        let x_828 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_827.x, x_827.y, x_828.z, x_828.w);
        let x_831 : f32 = u_xlat10.y;
        u_xlat11.w = x_831;
        let x_833 : vec4<f32> = u_xlat11;
        let x_834 : vec2<f32> = vec2<f32>(x_833.y, x_833.z);
        let x_835 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_835.x, x_834.x, x_835.z, x_834.y);
        let x_838 : vec3<f32> = u_xlat28;
        let x_841 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_844 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_838.x, x_838.y, x_838.x, x_838.y) * vec4<f32>(x_841.x, x_841.y, x_841.x, x_841.y)) + vec4<f32>(x_844.x, x_844.y, x_844.z, x_844.y));
        let x_847 : vec3<f32> = u_xlat28;
        let x_850 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_853 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_847.x, x_847.y, x_847.x, x_847.y) * vec4<f32>(x_850.x, x_850.y, x_850.x, x_850.y)) + vec4<f32>(x_853.w, x_853.y, x_853.w, x_853.z));
        let x_856 : vec3<f32> = u_xlat28;
        let x_859 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_862 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_856.x, x_856.y, x_856.x, x_856.y) * vec4<f32>(x_859.x, x_859.y, x_859.x, x_859.y)) + vec4<f32>(x_862.x, x_862.w, x_862.z, x_862.w));
        let x_866 : vec4<f32> = u_xlat8;
        let x_868 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_866.x, x_866.x, x_866.x, x_866.y) * vec4<f32>(x_868.z, x_868.w, x_868.y, x_868.z));
        let x_872 : vec4<f32> = u_xlat8;
        let x_874 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_872.y, x_872.y, x_872.z, x_872.z) * x_874);
        let x_877 : f32 = u_xlat8.z;
        let x_879 : f32 = u_xlat9.y;
        u_xlat28.x = (x_877 * x_879);
        let x_883 : vec4<f32> = u_xlat12;
        let x_884 : vec2<f32> = vec2<f32>(x_883.x, x_883.y);
        let x_886 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_884.x, x_884.y, x_886);
        let x_894 : vec3<f32> = txVec4;
        let x_896 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_894.xy, x_894.z);
        u_xlat50 = x_896;
        let x_898 : vec4<f32> = u_xlat12;
        let x_899 : vec2<f32> = vec2<f32>(x_898.z, x_898.w);
        let x_901 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_899.x, x_899.y, x_901);
        let x_909 : vec3<f32> = txVec5;
        let x_911 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_909.xy, x_909.z);
        u_xlat72 = x_911;
        let x_912 : f32 = u_xlat72;
        let x_914 : f32 = u_xlat15.y;
        u_xlat72 = (x_912 * x_914);
        let x_917 : f32 = u_xlat15.x;
        let x_918 : f32 = u_xlat50;
        let x_920 : f32 = u_xlat72;
        u_xlat50 = ((x_917 * x_918) + x_920);
        let x_923 : vec4<f32> = u_xlat13;
        let x_924 : vec2<f32> = vec2<f32>(x_923.x, x_923.y);
        let x_926 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_924.x, x_924.y, x_926);
        let x_933 : vec3<f32> = txVec6;
        let x_935 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_933.xy, x_933.z);
        u_xlat72 = x_935;
        let x_937 : f32 = u_xlat15.z;
        let x_938 : f32 = u_xlat72;
        let x_940 : f32 = u_xlat50;
        u_xlat50 = ((x_937 * x_938) + x_940);
        let x_943 : vec4<f32> = u_xlat11;
        let x_944 : vec2<f32> = vec2<f32>(x_943.x, x_943.y);
        let x_946 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_944.x, x_944.y, x_946);
        let x_953 : vec3<f32> = txVec7;
        let x_955 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_953.xy, x_953.z);
        u_xlat72 = x_955;
        let x_957 : f32 = u_xlat15.w;
        let x_958 : f32 = u_xlat72;
        let x_960 : f32 = u_xlat50;
        u_xlat50 = ((x_957 * x_958) + x_960);
        let x_963 : vec4<f32> = u_xlat14;
        let x_964 : vec2<f32> = vec2<f32>(x_963.x, x_963.y);
        let x_966 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_964.x, x_964.y, x_966);
        let x_973 : vec3<f32> = txVec8;
        let x_975 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_973.xy, x_973.z);
        u_xlat72 = x_975;
        let x_977 : f32 = u_xlat16.x;
        let x_978 : f32 = u_xlat72;
        let x_980 : f32 = u_xlat50;
        u_xlat50 = ((x_977 * x_978) + x_980);
        let x_983 : vec4<f32> = u_xlat14;
        let x_984 : vec2<f32> = vec2<f32>(x_983.z, x_983.w);
        let x_986 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_984.x, x_984.y, x_986);
        let x_993 : vec3<f32> = txVec9;
        let x_995 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_993.xy, x_993.z);
        u_xlat72 = x_995;
        let x_997 : f32 = u_xlat16.y;
        let x_998 : f32 = u_xlat72;
        let x_1000 : f32 = u_xlat50;
        u_xlat50 = ((x_997 * x_998) + x_1000);
        let x_1003 : vec4<f32> = u_xlat11;
        let x_1004 : vec2<f32> = vec2<f32>(x_1003.z, x_1003.w);
        let x_1006 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_1004.x, x_1004.y, x_1006);
        let x_1013 : vec3<f32> = txVec10;
        let x_1015 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1013.xy, x_1013.z);
        u_xlat72 = x_1015;
        let x_1017 : f32 = u_xlat16.z;
        let x_1018 : f32 = u_xlat72;
        let x_1020 : f32 = u_xlat50;
        u_xlat50 = ((x_1017 * x_1018) + x_1020);
        let x_1023 : vec4<f32> = u_xlat10;
        let x_1024 : vec2<f32> = vec2<f32>(x_1023.x, x_1023.y);
        let x_1026 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_1024.x, x_1024.y, x_1026);
        let x_1033 : vec3<f32> = txVec11;
        let x_1035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1033.xy, x_1033.z);
        u_xlat72 = x_1035;
        let x_1037 : f32 = u_xlat16.w;
        let x_1038 : f32 = u_xlat72;
        let x_1040 : f32 = u_xlat50;
        u_xlat50 = ((x_1037 * x_1038) + x_1040);
        let x_1043 : vec4<f32> = u_xlat10;
        let x_1044 : vec2<f32> = vec2<f32>(x_1043.z, x_1043.w);
        let x_1046 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1044.x, x_1044.y, x_1046);
        let x_1053 : vec3<f32> = txVec12;
        let x_1055 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1053.xy, x_1053.z);
        u_xlat72 = x_1055;
        let x_1057 : f32 = u_xlat28.x;
        let x_1058 : f32 = u_xlat72;
        let x_1060 : f32 = u_xlat50;
        u_xlat71 = ((x_1057 * x_1058) + x_1060);
      } else {
        let x_1063 : vec4<f32> = vs_INTERP8;
        let x_1066 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1069 : vec2<f32> = ((vec2<f32>(x_1063.x, x_1063.y) * vec2<f32>(x_1066.z, x_1066.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1070 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_1069.x, x_1069.y, x_1070.z);
        let x_1072 : vec3<f32> = u_xlat28;
        let x_1074 : vec2<f32> = floor(vec2<f32>(x_1072.x, x_1072.y));
        let x_1075 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_1074.x, x_1074.y, x_1075.z);
        let x_1077 : vec4<f32> = vs_INTERP8;
        let x_1080 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1083 : vec3<f32> = u_xlat28;
        let x_1086 : vec2<f32> = ((vec2<f32>(x_1077.x, x_1077.y) * vec2<f32>(x_1080.z, x_1080.w)) + -(vec2<f32>(x_1083.x, x_1083.y)));
        let x_1087 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
        let x_1089 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1089.x, x_1089.x, x_1089.y, x_1089.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1092 : vec4<f32> = u_xlat9;
        let x_1094 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1092.x, x_1092.x, x_1092.z, x_1092.z) * vec4<f32>(x_1094.x, x_1094.x, x_1094.z, x_1094.z));
        let x_1097 : vec4<f32> = u_xlat10;
        let x_1101 : vec2<f32> = (vec2<f32>(x_1097.y, x_1097.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1102 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1102.x, x_1101.x, x_1102.z, x_1101.y);
        let x_1104 : vec4<f32> = u_xlat10;
        let x_1107 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1104.x, x_1104.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1107.x, x_1107.y)));
        let x_1111 : vec4<f32> = u_xlat8;
        let x_1114 : vec2<f32> = (-(vec2<f32>(x_1111.x, x_1111.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1115 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1114.x, x_1115.y, x_1114.y, x_1115.w);
        let x_1117 : vec4<f32> = u_xlat8;
        let x_1119 : vec2<f32> = min(vec2<f32>(x_1117.x, x_1117.y), vec2<f32>(0.0f, 0.0f));
        let x_1120 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1119.x, x_1119.y, x_1120.z, x_1120.w);
        let x_1122 : vec4<f32> = u_xlat10;
        let x_1125 : vec4<f32> = u_xlat10;
        let x_1128 : vec4<f32> = u_xlat9;
        let x_1130 : vec2<f32> = ((-(vec2<f32>(x_1122.x, x_1122.y)) * vec2<f32>(x_1125.x, x_1125.y)) + vec2<f32>(x_1128.x, x_1128.z));
        let x_1131 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1130.x, x_1131.y, x_1130.y, x_1131.w);
        let x_1133 : vec4<f32> = u_xlat8;
        let x_1135 : vec2<f32> = max(vec2<f32>(x_1133.x, x_1133.y), vec2<f32>(0.0f, 0.0f));
        let x_1136 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1135.x, x_1135.y, x_1136.z, x_1136.w);
        let x_1138 : vec4<f32> = u_xlat10;
        let x_1141 : vec4<f32> = u_xlat10;
        let x_1144 : vec4<f32> = u_xlat9;
        let x_1146 : vec2<f32> = ((-(vec2<f32>(x_1138.x, x_1138.y)) * vec2<f32>(x_1141.x, x_1141.y)) + vec2<f32>(x_1144.y, x_1144.w));
        let x_1147 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1147.x, x_1146.x, x_1147.z, x_1146.y);
        let x_1149 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1149 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1153 : f32 = u_xlat9.y;
        u_xlat10.z = (x_1153 * 0.081632003f);
        let x_1157 : vec2<f32> = u_xlat52;
        let x_1160 : vec2<f32> = (vec2<f32>(x_1157.y, x_1157.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1161 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1160.x, x_1160.y, x_1161.z, x_1161.w);
        let x_1163 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_1163.x, x_1163.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1167 : f32 = u_xlat9.w;
        u_xlat12.z = (x_1167 * 0.081632003f);
        let x_1171 : f32 = u_xlat12.y;
        u_xlat10.x = x_1171;
        let x_1173 : vec4<f32> = u_xlat8;
        let x_1180 : vec2<f32> = ((vec2<f32>(x_1173.x, x_1173.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1181 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1181.x, x_1180.x, x_1181.z, x_1180.y);
        let x_1183 : vec4<f32> = u_xlat8;
        let x_1187 : vec2<f32> = ((vec2<f32>(x_1183.x, x_1183.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1188 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1187.x, x_1188.y, x_1187.y, x_1188.w);
        let x_1191 : f32 = u_xlat52.x;
        u_xlat9.y = x_1191;
        let x_1194 : f32 = u_xlat11.y;
        u_xlat9.w = x_1194;
        let x_1196 : vec4<f32> = u_xlat9;
        let x_1197 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1196 + x_1197);
        let x_1199 : vec4<f32> = u_xlat8;
        let x_1202 : vec2<f32> = ((vec2<f32>(x_1199.y, x_1199.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1203.x, x_1202.x, x_1203.z, x_1202.y);
        let x_1205 : vec4<f32> = u_xlat8;
        let x_1208 : vec2<f32> = ((vec2<f32>(x_1205.y, x_1205.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1209 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1208.x, x_1209.y, x_1208.y, x_1209.w);
        let x_1212 : f32 = u_xlat52.y;
        u_xlat11.y = x_1212;
        let x_1214 : vec4<f32> = u_xlat11;
        let x_1215 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1214 + x_1215);
        let x_1217 : vec4<f32> = u_xlat9;
        let x_1218 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_1217 / x_1218);
        let x_1220 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1220 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1226 : vec4<f32> = u_xlat11;
        let x_1227 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_1226 / x_1227);
        let x_1229 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1229 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1231 : vec4<f32> = u_xlat9;
        let x_1234 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1231.w, x_1231.x, x_1231.y, x_1231.z) * vec4<f32>(x_1234.x, x_1234.x, x_1234.x, x_1234.x));
        let x_1237 : vec4<f32> = u_xlat11;
        let x_1240 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1237.x, x_1237.w, x_1237.y, x_1237.z) * vec4<f32>(x_1240.y, x_1240.y, x_1240.y, x_1240.y));
        let x_1243 : vec4<f32> = u_xlat9;
        let x_1244 : vec3<f32> = vec3<f32>(x_1243.y, x_1243.z, x_1243.w);
        let x_1245 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1244.x, x_1245.y, x_1244.y, x_1244.z);
        let x_1248 : f32 = u_xlat11.x;
        u_xlat12.y = x_1248;
        let x_1250 : vec3<f32> = u_xlat28;
        let x_1253 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1256 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1250.x, x_1250.y, x_1250.x, x_1250.y) * vec4<f32>(x_1253.x, x_1253.y, x_1253.x, x_1253.y)) + vec4<f32>(x_1256.x, x_1256.y, x_1256.z, x_1256.y));
        let x_1259 : vec3<f32> = u_xlat28;
        let x_1262 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat12;
        let x_1267 : vec2<f32> = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.w, x_1265.y));
        let x_1268 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1267.x, x_1267.y, x_1268.z, x_1268.w);
        let x_1271 : f32 = u_xlat12.y;
        u_xlat9.y = x_1271;
        let x_1274 : f32 = u_xlat11.z;
        u_xlat12.y = x_1274;
        let x_1276 : vec3<f32> = u_xlat28;
        let x_1279 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1282 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_1276.x, x_1276.y, x_1276.x, x_1276.y) * vec4<f32>(x_1279.x, x_1279.y, x_1279.x, x_1279.y)) + vec4<f32>(x_1282.x, x_1282.y, x_1282.z, x_1282.y));
        let x_1286 : vec3<f32> = u_xlat28;
        let x_1289 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1292 : vec4<f32> = u_xlat12;
        u_xlat58 = ((vec2<f32>(x_1286.x, x_1286.y) * vec2<f32>(x_1289.x, x_1289.y)) + vec2<f32>(x_1292.w, x_1292.y));
        let x_1296 : f32 = u_xlat12.y;
        u_xlat9.z = x_1296;
        let x_1298 : vec3<f32> = u_xlat28;
        let x_1301 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1304 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1298.x, x_1298.y, x_1298.x, x_1298.y) * vec4<f32>(x_1301.x, x_1301.y, x_1301.x, x_1301.y)) + vec4<f32>(x_1304.x, x_1304.y, x_1304.x, x_1304.z));
        let x_1308 : f32 = u_xlat11.w;
        u_xlat12.y = x_1308;
        let x_1311 : vec3<f32> = u_xlat28;
        let x_1314 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1317 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1311.x, x_1311.y, x_1311.x, x_1311.y) * vec4<f32>(x_1314.x, x_1314.y, x_1314.x, x_1314.y)) + vec4<f32>(x_1317.x, x_1317.y, x_1317.z, x_1317.y));
        let x_1321 : vec3<f32> = u_xlat28;
        let x_1324 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1327 : vec4<f32> = u_xlat12;
        let x_1329 : vec2<f32> = ((vec2<f32>(x_1321.x, x_1321.y) * vec2<f32>(x_1324.x, x_1324.y)) + vec2<f32>(x_1327.w, x_1327.y));
        let x_1330 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1329.x, x_1329.y, x_1330.z);
        let x_1333 : f32 = u_xlat12.y;
        u_xlat9.w = x_1333;
        let x_1336 : vec3<f32> = u_xlat28;
        let x_1339 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1342 : vec4<f32> = u_xlat9;
        u_xlat18 = ((vec2<f32>(x_1336.x, x_1336.y) * vec2<f32>(x_1339.x, x_1339.y)) + vec2<f32>(x_1342.x, x_1342.w));
        let x_1345 : vec4<f32> = u_xlat12;
        let x_1346 : vec3<f32> = vec3<f32>(x_1345.x, x_1345.z, x_1345.w);
        let x_1347 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1346.x, x_1347.y, x_1346.y, x_1346.z);
        let x_1349 : vec3<f32> = u_xlat28;
        let x_1352 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1355 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1349.x, x_1349.y, x_1349.x, x_1349.y) * vec4<f32>(x_1352.x, x_1352.y, x_1352.x, x_1352.y)) + vec4<f32>(x_1355.x, x_1355.y, x_1355.z, x_1355.y));
        let x_1359 : vec3<f32> = u_xlat28;
        let x_1362 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1365 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1359.x, x_1359.y) * vec2<f32>(x_1362.x, x_1362.y)) + vec2<f32>(x_1365.w, x_1365.y));
        let x_1369 : f32 = u_xlat9.x;
        u_xlat11.x = x_1369;
        let x_1371 : vec3<f32> = u_xlat28;
        let x_1374 : vec4<f32> = x_499.x_MainLightShadowmapSize;
        let x_1377 : vec4<f32> = u_xlat11;
        let x_1379 : vec2<f32> = ((vec2<f32>(x_1371.x, x_1371.y) * vec2<f32>(x_1374.x, x_1374.y)) + vec2<f32>(x_1377.x, x_1377.y));
        let x_1380 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_1379.x, x_1379.y, x_1380.z);
        let x_1383 : vec4<f32> = u_xlat8;
        let x_1385 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1383.x, x_1383.x, x_1383.x, x_1383.x) * x_1385);
        let x_1388 : vec4<f32> = u_xlat8;
        let x_1390 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_1388.y, x_1388.y, x_1388.y, x_1388.y) * x_1390);
        let x_1393 : vec4<f32> = u_xlat8;
        let x_1395 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_1393.z, x_1393.z, x_1393.z, x_1393.z) * x_1395);
        let x_1397 : vec4<f32> = u_xlat8;
        let x_1399 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_1397.w, x_1397.w, x_1397.w, x_1397.w) * x_1399);
        let x_1402 : vec4<f32> = u_xlat13;
        let x_1403 : vec2<f32> = vec2<f32>(x_1402.x, x_1402.y);
        let x_1405 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1403.x, x_1403.y, x_1405);
        let x_1412 : vec3<f32> = txVec13;
        let x_1414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1412.xy, x_1412.z);
        u_xlat72 = x_1414;
        let x_1416 : vec4<f32> = u_xlat13;
        let x_1417 : vec2<f32> = vec2<f32>(x_1416.z, x_1416.w);
        let x_1419 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1417.x, x_1417.y, x_1419);
        let x_1427 : vec3<f32> = txVec14;
        let x_1429 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1427.xy, x_1427.z);
        u_xlat73 = x_1429;
        let x_1430 : f32 = u_xlat73;
        let x_1432 : f32 = u_xlat19.y;
        u_xlat73 = (x_1430 * x_1432);
        let x_1435 : f32 = u_xlat19.x;
        let x_1436 : f32 = u_xlat72;
        let x_1438 : f32 = u_xlat73;
        u_xlat72 = ((x_1435 * x_1436) + x_1438);
        let x_1441 : vec4<f32> = u_xlat14;
        let x_1442 : vec2<f32> = vec2<f32>(x_1441.x, x_1441.y);
        let x_1444 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1442.x, x_1442.y, x_1444);
        let x_1451 : vec3<f32> = txVec15;
        let x_1453 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1451.xy, x_1451.z);
        u_xlat73 = x_1453;
        let x_1455 : f32 = u_xlat19.z;
        let x_1456 : f32 = u_xlat73;
        let x_1458 : f32 = u_xlat72;
        u_xlat72 = ((x_1455 * x_1456) + x_1458);
        let x_1461 : vec4<f32> = u_xlat16;
        let x_1462 : vec2<f32> = vec2<f32>(x_1461.x, x_1461.y);
        let x_1464 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1462.x, x_1462.y, x_1464);
        let x_1471 : vec3<f32> = txVec16;
        let x_1473 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1471.xy, x_1471.z);
        u_xlat73 = x_1473;
        let x_1475 : f32 = u_xlat19.w;
        let x_1476 : f32 = u_xlat73;
        let x_1478 : f32 = u_xlat72;
        u_xlat72 = ((x_1475 * x_1476) + x_1478);
        let x_1481 : vec4<f32> = u_xlat15;
        let x_1482 : vec2<f32> = vec2<f32>(x_1481.x, x_1481.y);
        let x_1484 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1482.x, x_1482.y, x_1484);
        let x_1491 : vec3<f32> = txVec17;
        let x_1493 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1491.xy, x_1491.z);
        u_xlat73 = x_1493;
        let x_1495 : f32 = u_xlat20.x;
        let x_1496 : f32 = u_xlat73;
        let x_1498 : f32 = u_xlat72;
        u_xlat72 = ((x_1495 * x_1496) + x_1498);
        let x_1501 : vec4<f32> = u_xlat15;
        let x_1502 : vec2<f32> = vec2<f32>(x_1501.z, x_1501.w);
        let x_1504 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec18;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat73 = x_1513;
        let x_1515 : f32 = u_xlat20.y;
        let x_1516 : f32 = u_xlat73;
        let x_1518 : f32 = u_xlat72;
        u_xlat72 = ((x_1515 * x_1516) + x_1518);
        let x_1521 : vec2<f32> = u_xlat58;
        let x_1523 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1521.x, x_1521.y, x_1523);
        let x_1530 : vec3<f32> = txVec19;
        let x_1532 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1530.xy, x_1530.z);
        u_xlat73 = x_1532;
        let x_1534 : f32 = u_xlat20.z;
        let x_1535 : f32 = u_xlat73;
        let x_1537 : f32 = u_xlat72;
        u_xlat72 = ((x_1534 * x_1535) + x_1537);
        let x_1540 : vec4<f32> = u_xlat16;
        let x_1541 : vec2<f32> = vec2<f32>(x_1540.z, x_1540.w);
        let x_1543 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1541.x, x_1541.y, x_1543);
        let x_1550 : vec3<f32> = txVec20;
        let x_1552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1550.xy, x_1550.z);
        u_xlat73 = x_1552;
        let x_1554 : f32 = u_xlat20.w;
        let x_1555 : f32 = u_xlat73;
        let x_1557 : f32 = u_xlat72;
        u_xlat72 = ((x_1554 * x_1555) + x_1557);
        let x_1560 : vec4<f32> = u_xlat17;
        let x_1561 : vec2<f32> = vec2<f32>(x_1560.x, x_1560.y);
        let x_1563 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1561.x, x_1561.y, x_1563);
        let x_1570 : vec3<f32> = txVec21;
        let x_1572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1570.xy, x_1570.z);
        u_xlat73 = x_1572;
        let x_1574 : f32 = u_xlat21.x;
        let x_1575 : f32 = u_xlat73;
        let x_1577 : f32 = u_xlat72;
        u_xlat72 = ((x_1574 * x_1575) + x_1577);
        let x_1580 : vec4<f32> = u_xlat17;
        let x_1581 : vec2<f32> = vec2<f32>(x_1580.z, x_1580.w);
        let x_1583 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_1581.x, x_1581.y, x_1583);
        let x_1590 : vec3<f32> = txVec22;
        let x_1592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1590.xy, x_1590.z);
        u_xlat73 = x_1592;
        let x_1594 : f32 = u_xlat21.y;
        let x_1595 : f32 = u_xlat73;
        let x_1597 : f32 = u_xlat72;
        u_xlat72 = ((x_1594 * x_1595) + x_1597);
        let x_1600 : vec3<f32> = u_xlat31;
        let x_1601 : vec2<f32> = vec2<f32>(x_1600.x, x_1600.y);
        let x_1603 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec23;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat73 = x_1612;
        let x_1614 : f32 = u_xlat21.z;
        let x_1615 : f32 = u_xlat73;
        let x_1617 : f32 = u_xlat72;
        u_xlat72 = ((x_1614 * x_1615) + x_1617);
        let x_1620 : vec2<f32> = u_xlat18;
        let x_1622 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_1620.x, x_1620.y, x_1622);
        let x_1629 : vec3<f32> = txVec24;
        let x_1631 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1629.xy, x_1629.z);
        u_xlat73 = x_1631;
        let x_1633 : f32 = u_xlat21.w;
        let x_1634 : f32 = u_xlat73;
        let x_1636 : f32 = u_xlat72;
        u_xlat72 = ((x_1633 * x_1634) + x_1636);
        let x_1639 : vec4<f32> = u_xlat12;
        let x_1640 : vec2<f32> = vec2<f32>(x_1639.x, x_1639.y);
        let x_1642 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_1640.x, x_1640.y, x_1642);
        let x_1649 : vec3<f32> = txVec25;
        let x_1651 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1649.xy, x_1649.z);
        u_xlat73 = x_1651;
        let x_1653 : f32 = u_xlat8.x;
        let x_1654 : f32 = u_xlat73;
        let x_1656 : f32 = u_xlat72;
        u_xlat72 = ((x_1653 * x_1654) + x_1656);
        let x_1659 : vec4<f32> = u_xlat12;
        let x_1660 : vec2<f32> = vec2<f32>(x_1659.z, x_1659.w);
        let x_1662 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_1660.x, x_1660.y, x_1662);
        let x_1669 : vec3<f32> = txVec26;
        let x_1671 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1669.xy, x_1669.z);
        u_xlat73 = x_1671;
        let x_1673 : f32 = u_xlat8.y;
        let x_1674 : f32 = u_xlat73;
        let x_1676 : f32 = u_xlat72;
        u_xlat72 = ((x_1673 * x_1674) + x_1676);
        let x_1679 : vec2<f32> = u_xlat55;
        let x_1681 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_1679.x, x_1679.y, x_1681);
        let x_1688 : vec3<f32> = txVec27;
        let x_1690 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1688.xy, x_1688.z);
        u_xlat73 = x_1690;
        let x_1692 : f32 = u_xlat8.z;
        let x_1693 : f32 = u_xlat73;
        let x_1695 : f32 = u_xlat72;
        u_xlat72 = ((x_1692 * x_1693) + x_1695);
        let x_1698 : vec3<f32> = u_xlat28;
        let x_1699 : vec2<f32> = vec2<f32>(x_1698.x, x_1698.y);
        let x_1701 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_1699.x, x_1699.y, x_1701);
        let x_1708 : vec3<f32> = txVec28;
        let x_1710 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1708.xy, x_1708.z);
        u_xlat28.x = x_1710;
        let x_1713 : f32 = u_xlat8.w;
        let x_1715 : f32 = u_xlat28.x;
        let x_1717 : f32 = u_xlat72;
        u_xlat71 = ((x_1713 * x_1715) + x_1717);
      }
    }
  } else {
    let x_1721 : vec4<f32> = vs_INTERP8;
    let x_1722 : vec2<f32> = vec2<f32>(x_1721.x, x_1721.y);
    let x_1724 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_1722.x, x_1722.y, x_1724);
    let x_1731 : vec3<f32> = txVec29;
    let x_1733 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1731.xy, x_1731.z);
    u_xlat71 = x_1733;
  }
  let x_1735 : f32 = x_499.x_MainLightShadowParams.x;
  u_xlat28.x = (-(x_1735) + 1.0f);
  let x_1739 : f32 = u_xlat71;
  let x_1741 : f32 = x_499.x_MainLightShadowParams.x;
  let x_1744 : f32 = u_xlat28.x;
  u_xlat71 = ((x_1739 * x_1741) + x_1744);
  let x_1747 : f32 = vs_INTERP8.z;
  u_xlatb28 = (0.0f >= x_1747);
  let x_1751 : f32 = vs_INTERP8.z;
  u_xlatb50 = (x_1751 >= 1.0f);
  let x_1753 : bool = u_xlatb50;
  let x_1754 : bool = u_xlatb28;
  u_xlatb28 = (x_1753 | x_1754);
  let x_1756 : bool = u_xlatb28;
  let x_1757 : f32 = u_xlat71;
  u_xlat71 = select(x_1757, 1.0f, x_1756);
  let x_1759 : vec3<f32> = vs_INTERP0;
  let x_1761 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat28 = (x_1759 + -(x_1761));
  let x_1764 : vec3<f32> = u_xlat28;
  let x_1765 : vec3<f32> = u_xlat28;
  u_xlat28.x = dot(x_1764, x_1765);
  let x_1769 : f32 = u_xlat28.x;
  let x_1771 : f32 = x_499.x_MainLightShadowParams.z;
  let x_1774 : f32 = x_499.x_MainLightShadowParams.w;
  u_xlat28.x = ((x_1769 * x_1771) + x_1774);
  let x_1778 : f32 = u_xlat28.x;
  u_xlat28.x = clamp(x_1778, 0.0f, 1.0f);
  let x_1781 : f32 = u_xlat71;
  u_xlat50 = (-(x_1781) + 1.0f);
  let x_1785 : f32 = u_xlat28.x;
  let x_1786 : f32 = u_xlat50;
  let x_1788 : f32 = u_xlat71;
  u_xlat71 = ((x_1785 * x_1786) + x_1788);
  let x_1790 : vec3<f32> = u_xlat6;
  let x_1793 : vec4<f32> = x_45.x_MainLightColor;
  u_xlat28 = (vec3<f32>(x_1790.x, x_1790.x, x_1790.x) * vec3<f32>(x_1793.x, x_1793.y, x_1793.z));
  let x_1796 : vec3<f32> = u_xlat4;
  let x_1798 : vec4<f32> = u_xlat1;
  u_xlat73 = dot(-(x_1796), vec3<f32>(x_1798.x, x_1798.y, x_1798.w));
  let x_1801 : f32 = u_xlat73;
  let x_1802 : f32 = u_xlat73;
  u_xlat73 = (x_1801 + x_1802);
  let x_1804 : vec4<f32> = u_xlat1;
  let x_1806 : f32 = u_xlat73;
  let x_1810 : vec3<f32> = u_xlat4;
  let x_1812 : vec3<f32> = ((vec3<f32>(x_1804.x, x_1804.y, x_1804.w) * -(vec3<f32>(x_1806, x_1806, x_1806))) + -(x_1810));
  let x_1813 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1812.x, x_1812.y, x_1812.z, x_1813.w);
  let x_1815 : vec4<f32> = u_xlat1;
  let x_1817 : vec3<f32> = u_xlat4;
  u_xlat73 = dot(vec3<f32>(x_1815.x, x_1815.y, x_1815.w), x_1817);
  let x_1819 : f32 = u_xlat73;
  u_xlat73 = clamp(x_1819, 0.0f, 1.0f);
  let x_1821 : f32 = u_xlat73;
  u_xlat73 = (-(x_1821) + 1.0f);
  let x_1824 : f32 = u_xlat73;
  let x_1825 : f32 = u_xlat73;
  u_xlat73 = (x_1824 * x_1825);
  let x_1827 : f32 = u_xlat73;
  let x_1828 : f32 = u_xlat73;
  u_xlat73 = (x_1827 * x_1828);
  let x_1831 : f32 = u_xlat68;
  u_xlat74 = ((-(x_1831) * 0.699999988f) + 1.700000048f);
  let x_1837 : f32 = u_xlat68;
  let x_1838 : f32 = u_xlat74;
  u_xlat2.w = (x_1837 * x_1838);
  let x_1841 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_1841 * vec4<f32>(14.0f, 14.0f, 14.0f, 6.0f));
  let x_1854 : vec4<f32> = u_xlat8;
  let x_1857 : f32 = u_xlat2.w;
  let x_1858 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1854.x, x_1854.y, x_1854.z), x_1857);
  u_xlat8 = x_1858;
  let x_1860 : f32 = u_xlat8.w;
  u_xlat68 = (x_1860 + -1.0f);
  let x_1863 : f32 = x_120.unity_SpecCube0_HDR.w;
  let x_1864 : f32 = u_xlat68;
  u_xlat68 = ((x_1863 * x_1864) + 1.0f);
  let x_1867 : f32 = u_xlat68;
  u_xlat68 = max(x_1867, 0.0f);
  let x_1869 : f32 = u_xlat68;
  u_xlat68 = log2(x_1869);
  let x_1871 : f32 = u_xlat68;
  let x_1873 : f32 = x_120.unity_SpecCube0_HDR.y;
  u_xlat68 = (x_1871 * x_1873);
  let x_1875 : f32 = u_xlat68;
  u_xlat68 = exp2(x_1875);
  let x_1877 : f32 = u_xlat68;
  let x_1879 : f32 = x_120.unity_SpecCube0_HDR.x;
  u_xlat68 = (x_1877 * x_1879);
  let x_1881 : vec4<f32> = u_xlat8;
  let x_1883 : f32 = u_xlat68;
  let x_1885 : vec3<f32> = (vec3<f32>(x_1881.x, x_1881.y, x_1881.z) * vec3<f32>(x_1883, x_1883, x_1883));
  let x_1886 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1885.x, x_1885.y, x_1885.z, x_1886.w);
  let x_1888 : vec3<f32> = u_xlat3;
  let x_1890 : vec3<f32> = u_xlat3;
  let x_1894 : vec2<f32> = ((vec2<f32>(x_1888.x, x_1888.x) * vec2<f32>(x_1890.x, x_1890.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_1895 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1894.x, x_1894.y, x_1895.z, x_1895.w);
  let x_1898 : f32 = u_xlat9.y;
  u_xlat68 = (1.0f / x_1898);
  let x_1900 : vec3<f32> = u_xlat0;
  let x_1902 : f32 = u_xlat69;
  u_xlat31 = (-(x_1900) + vec3<f32>(x_1902, x_1902, x_1902));
  let x_1905 : f32 = u_xlat73;
  let x_1907 : vec3<f32> = u_xlat31;
  let x_1909 : vec3<f32> = u_xlat0;
  u_xlat31 = ((vec3<f32>(x_1905, x_1905, x_1905) * x_1907) + x_1909);
  let x_1911 : f32 = u_xlat68;
  let x_1913 : vec3<f32> = u_xlat31;
  u_xlat31 = (vec3<f32>(x_1911, x_1911, x_1911) * x_1913);
  let x_1915 : vec4<f32> = u_xlat8;
  let x_1917 : vec3<f32> = u_xlat31;
  let x_1918 : vec3<f32> = (vec3<f32>(x_1915.x, x_1915.y, x_1915.z) * x_1917);
  let x_1919 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1918.x, x_1918.y, x_1918.z, x_1919.w);
  let x_1921 : vec4<f32> = u_xlat5;
  let x_1923 : vec3<f32> = u_xlat7;
  let x_1925 : vec4<f32> = u_xlat8;
  let x_1927 : vec3<f32> = ((vec3<f32>(x_1921.x, x_1921.y, x_1921.z) * x_1923) + vec3<f32>(x_1925.x, x_1925.y, x_1925.z));
  let x_1928 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1927.x, x_1927.y, x_1927.z, x_1928.w);
  let x_1930 : f32 = u_xlat71;
  let x_1933 : f32 = x_120.unity_LightData.z;
  u_xlat68 = (x_1930 * x_1933);
  let x_1935 : vec4<f32> = u_xlat1;
  let x_1938 : vec4<f32> = x_45.x_MainLightPosition;
  u_xlat3.x = dot(vec3<f32>(x_1935.x, x_1935.y, x_1935.w), vec3<f32>(x_1938.x, x_1938.y, x_1938.z));
  let x_1943 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1943, 0.0f, 1.0f);
  let x_1946 : f32 = u_xlat68;
  let x_1948 : f32 = u_xlat3.x;
  u_xlat68 = (x_1946 * x_1948);
  let x_1950 : f32 = u_xlat68;
  let x_1952 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_1950, x_1950, x_1950) * x_1952);
  let x_1954 : vec3<f32> = u_xlat4;
  let x_1956 : vec4<f32> = x_45.x_MainLightPosition;
  let x_1958 : vec3<f32> = (x_1954 + vec3<f32>(x_1956.x, x_1956.y, x_1956.z));
  let x_1959 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1958.x, x_1958.y, x_1958.z, x_1959.w);
  let x_1961 : vec4<f32> = u_xlat8;
  let x_1963 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_1961.x, x_1961.y, x_1961.z), vec3<f32>(x_1963.x, x_1963.y, x_1963.z));
  let x_1966 : f32 = u_xlat68;
  u_xlat68 = max(x_1966, 1.17549435e-37f);
  let x_1969 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_1969);
  let x_1971 : f32 = u_xlat68;
  let x_1973 : vec4<f32> = u_xlat8;
  let x_1975 : vec3<f32> = (vec3<f32>(x_1971, x_1971, x_1971) * vec3<f32>(x_1973.x, x_1973.y, x_1973.z));
  let x_1976 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1975.x, x_1975.y, x_1975.z, x_1976.w);
  let x_1978 : vec4<f32> = u_xlat1;
  let x_1980 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_1978.x, x_1978.y, x_1978.w), vec3<f32>(x_1980.x, x_1980.y, x_1980.z));
  let x_1983 : f32 = u_xlat68;
  u_xlat68 = clamp(x_1983, 0.0f, 1.0f);
  let x_1986 : vec4<f32> = x_45.x_MainLightPosition;
  let x_1988 : vec4<f32> = u_xlat8;
  u_xlat3.x = dot(vec3<f32>(x_1986.x, x_1986.y, x_1986.z), vec3<f32>(x_1988.x, x_1988.y, x_1988.z));
  let x_1993 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1993, 0.0f, 1.0f);
  let x_1996 : f32 = u_xlat68;
  let x_1997 : f32 = u_xlat68;
  u_xlat68 = (x_1996 * x_1997);
  let x_1999 : f32 = u_xlat68;
  let x_2001 : f32 = u_xlat9.x;
  u_xlat68 = ((x_1999 * x_2001) + 1.000010014f);
  let x_2006 : f32 = u_xlat3.x;
  let x_2008 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2006 * x_2008);
  let x_2011 : f32 = u_xlat68;
  let x_2012 : f32 = u_xlat68;
  u_xlat68 = (x_2011 * x_2012);
  let x_2015 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2015, 0.100000001f);
  let x_2019 : f32 = u_xlat68;
  let x_2021 : f32 = u_xlat3.x;
  u_xlat68 = (x_2019 * x_2021);
  let x_2023 : f32 = u_xlat70;
  let x_2024 : f32 = u_xlat68;
  u_xlat68 = (x_2023 * x_2024);
  let x_2026 : f32 = u_xlat25;
  let x_2027 : f32 = u_xlat68;
  u_xlat68 = (x_2026 / x_2027);
  let x_2029 : vec3<f32> = u_xlat0;
  let x_2030 : f32 = u_xlat68;
  let x_2033 : vec3<f32> = u_xlat7;
  let x_2034 : vec3<f32> = ((x_2029 * vec3<f32>(x_2030, x_2030, x_2030)) + x_2033);
  let x_2035 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2034.x, x_2034.y, x_2034.z, x_2035.w);
  let x_2037 : vec3<f32> = u_xlat28;
  let x_2038 : vec4<f32> = u_xlat8;
  u_xlat28 = (x_2037 * vec3<f32>(x_2038.x, x_2038.y, x_2038.z));
  let x_2042 : f32 = x_45.x_AdditionalLightsCount.x;
  let x_2044 : f32 = x_120.unity_LightData.y;
  u_xlat68 = min(x_2042, x_2044);
  let x_2048 : f32 = u_xlat68;
  u_xlatu68 = bitcast<u32>(i32(x_2048));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2060 : u32 = u_xlatu_loop_1;
    let x_2061 : u32 = u_xlatu68;
    if ((x_2060 < x_2061)) {
    } else {
      break;
    }
    let x_2064 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_2064 >> 2u);
    let x_2068 : u32 = u_xlatu_loop_1;
    u_xlati71 = bitcast<i32>((x_2068 & 3u));
    let x_2071 : u32 = u_xlatu69;
    let x_2074 : vec4<f32> = x_120.unity_LightIndices[bitcast<i32>(x_2071)];
    let x_2084 : i32 = u_xlati71;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2089 : vec4<u32> = indexable[x_2084];
    u_xlat69 = dot(x_2074, bitcast<vec4<f32>>(x_2089));
    let x_2093 : f32 = u_xlat69;
    u_xlati69 = i32(x_2093);
    let x_2095 : vec3<f32> = vs_INTERP0;
    let x_2107 : i32 = u_xlati69;
    let x_2109 : vec4<f32> = x_2106.x_AdditionalLightsPosition[x_2107];
    let x_2112 : i32 = u_xlati69;
    let x_2114 : vec4<f32> = x_2106.x_AdditionalLightsPosition[x_2112];
    u_xlat31 = ((-(x_2095) * vec3<f32>(x_2109.w, x_2109.w, x_2109.w)) + vec3<f32>(x_2114.x, x_2114.y, x_2114.z));
    let x_2117 : vec3<f32> = u_xlat31;
    let x_2118 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(x_2117, x_2118);
    let x_2120 : f32 = u_xlat71;
    u_xlat71 = max(x_2120, 6.10351562e-05f);
    let x_2123 : f32 = u_xlat71;
    u_xlat73 = inverseSqrt(x_2123);
    let x_2125 : f32 = u_xlat73;
    let x_2127 : vec3<f32> = u_xlat31;
    let x_2128 : vec3<f32> = (vec3<f32>(x_2125, x_2125, x_2125) * x_2127);
    let x_2129 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2128.x, x_2128.y, x_2128.z, x_2129.w);
    let x_2131 : f32 = u_xlat71;
    u_xlat74 = (1.0f / x_2131);
    let x_2133 : f32 = u_xlat71;
    let x_2134 : i32 = u_xlati69;
    let x_2136 : f32 = x_2106.x_AdditionalLightsAttenuation[x_2134].x;
    u_xlat71 = (x_2133 * x_2136);
    let x_2138 : f32 = u_xlat71;
    let x_2140 : f32 = u_xlat71;
    u_xlat71 = ((-(x_2138) * x_2140) + 1.0f);
    let x_2143 : f32 = u_xlat71;
    u_xlat71 = max(x_2143, 0.0f);
    let x_2145 : f32 = u_xlat71;
    let x_2146 : f32 = u_xlat71;
    u_xlat71 = (x_2145 * x_2146);
    let x_2148 : f32 = u_xlat71;
    let x_2149 : f32 = u_xlat74;
    u_xlat71 = (x_2148 * x_2149);
    let x_2151 : i32 = u_xlati69;
    let x_2153 : vec4<f32> = x_2106.x_AdditionalLightsSpotDir[x_2151];
    let x_2155 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_2153.x, x_2153.y, x_2153.z), vec3<f32>(x_2155.x, x_2155.y, x_2155.z));
    let x_2158 : f32 = u_xlat74;
    let x_2159 : i32 = u_xlati69;
    let x_2161 : f32 = x_2106.x_AdditionalLightsAttenuation[x_2159].z;
    let x_2163 : i32 = u_xlati69;
    let x_2165 : f32 = x_2106.x_AdditionalLightsAttenuation[x_2163].w;
    u_xlat74 = ((x_2158 * x_2161) + x_2165);
    let x_2167 : f32 = u_xlat74;
    u_xlat74 = clamp(x_2167, 0.0f, 1.0f);
    let x_2169 : f32 = u_xlat74;
    let x_2170 : f32 = u_xlat74;
    u_xlat74 = (x_2169 * x_2170);
    let x_2172 : f32 = u_xlat71;
    let x_2173 : f32 = u_xlat74;
    u_xlat71 = (x_2172 * x_2173);
    let x_2175 : vec3<f32> = u_xlat6;
    let x_2177 : i32 = u_xlati69;
    let x_2179 : vec4<f32> = x_2106.x_AdditionalLightsColor[x_2177];
    let x_2181 : vec3<f32> = (vec3<f32>(x_2175.x, x_2175.x, x_2175.x) * vec3<f32>(x_2179.x, x_2179.y, x_2179.z));
    let x_2182 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2181.x, x_2181.y, x_2181.z, x_2182.w);
    let x_2184 : vec4<f32> = u_xlat1;
    let x_2186 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_2184.x, x_2184.y, x_2184.w), vec3<f32>(x_2186.x, x_2186.y, x_2186.z));
    let x_2189 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2189, 0.0f, 1.0f);
    let x_2191 : f32 = u_xlat69;
    let x_2192 : f32 = u_xlat71;
    u_xlat69 = (x_2191 * x_2192);
    let x_2194 : f32 = u_xlat69;
    let x_2196 : vec4<f32> = u_xlat11;
    let x_2198 : vec3<f32> = (vec3<f32>(x_2194, x_2194, x_2194) * vec3<f32>(x_2196.x, x_2196.y, x_2196.z));
    let x_2199 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2198.x, x_2198.y, x_2198.z, x_2199.w);
    let x_2201 : vec3<f32> = u_xlat31;
    let x_2202 : f32 = u_xlat73;
    let x_2205 : vec3<f32> = u_xlat4;
    u_xlat31 = ((x_2201 * vec3<f32>(x_2202, x_2202, x_2202)) + x_2205);
    let x_2207 : vec3<f32> = u_xlat31;
    let x_2208 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_2207, x_2208);
    let x_2210 : f32 = u_xlat69;
    u_xlat69 = max(x_2210, 1.17549435e-37f);
    let x_2212 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_2212);
    let x_2214 : f32 = u_xlat69;
    let x_2216 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_2214, x_2214, x_2214) * x_2216);
    let x_2218 : vec4<f32> = u_xlat1;
    let x_2220 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_2218.x, x_2218.y, x_2218.w), x_2220);
    let x_2222 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2222, 0.0f, 1.0f);
    let x_2224 : vec4<f32> = u_xlat10;
    let x_2226 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(vec3<f32>(x_2224.x, x_2224.y, x_2224.z), x_2226);
    let x_2228 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2228, 0.0f, 1.0f);
    let x_2230 : f32 = u_xlat69;
    let x_2231 : f32 = u_xlat69;
    u_xlat69 = (x_2230 * x_2231);
    let x_2233 : f32 = u_xlat69;
    let x_2235 : f32 = u_xlat9.x;
    u_xlat69 = ((x_2233 * x_2235) + 1.000010014f);
    let x_2238 : f32 = u_xlat71;
    let x_2239 : f32 = u_xlat71;
    u_xlat71 = (x_2238 * x_2239);
    let x_2241 : f32 = u_xlat69;
    let x_2242 : f32 = u_xlat69;
    u_xlat69 = (x_2241 * x_2242);
    let x_2244 : f32 = u_xlat71;
    u_xlat71 = max(x_2244, 0.100000001f);
    let x_2246 : f32 = u_xlat69;
    let x_2247 : f32 = u_xlat71;
    u_xlat69 = (x_2246 * x_2247);
    let x_2249 : f32 = u_xlat70;
    let x_2250 : f32 = u_xlat69;
    u_xlat69 = (x_2249 * x_2250);
    let x_2252 : f32 = u_xlat25;
    let x_2253 : f32 = u_xlat69;
    u_xlat69 = (x_2252 / x_2253);
    let x_2255 : vec3<f32> = u_xlat0;
    let x_2256 : f32 = u_xlat69;
    let x_2259 : vec3<f32> = u_xlat7;
    u_xlat31 = ((x_2255 * vec3<f32>(x_2256, x_2256, x_2256)) + x_2259);
    let x_2261 : vec3<f32> = u_xlat31;
    let x_2262 : vec4<f32> = u_xlat11;
    let x_2265 : vec4<f32> = u_xlat8;
    let x_2267 : vec3<f32> = ((x_2261 * vec3<f32>(x_2262.x, x_2262.y, x_2262.z)) + vec3<f32>(x_2265.x, x_2265.y, x_2265.z));
    let x_2268 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2267.x, x_2267.y, x_2267.z, x_2268.w);

    continuing {
      let x_2270 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2270 + bitcast<u32>(1i));
    }
  }
  let x_2272 : vec4<f32> = u_xlat5;
  let x_2274 : f32 = u_xlat47;
  let x_2277 : vec3<f32> = u_xlat28;
  u_xlat0 = ((vec3<f32>(x_2272.x, x_2272.y, x_2272.z) * vec3<f32>(x_2274, x_2274, x_2274)) + x_2277);
  let x_2279 : vec4<f32> = u_xlat8;
  let x_2281 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_2279.x, x_2279.y, x_2279.z) + x_2281);
  let x_2283 : vec4<f32> = u_xlat2;
  let x_2285 : f32 = u_xlat45;
  let x_2288 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_2283.x, x_2283.y, x_2283.z) * vec3<f32>(x_2285, x_2285, x_2285)) + x_2288);
  let x_2290 : f32 = u_xlat66;
  let x_2291 : f32 = u_xlat66;
  u_xlat66 = (x_2290 * -(x_2291));
  let x_2294 : f32 = u_xlat66;
  u_xlat66 = exp2(x_2294);
  let x_2296 : vec3<f32> = u_xlat0;
  let x_2299 : vec4<f32> = x_45.unity_FogColor;
  u_xlat0 = (x_2296 + -(vec3<f32>(x_2299.x, x_2299.y, x_2299.z)));
  let x_2305 : f32 = u_xlat66;
  let x_2307 : vec3<f32> = u_xlat0;
  let x_2310 : vec4<f32> = x_45.unity_FogColor;
  let x_2312 : vec3<f32> = ((vec3<f32>(x_2305, x_2305, x_2305) * x_2307) + vec3<f32>(x_2310.x, x_2310.y, x_2310.z));
  let x_2313 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2312.x, x_2312.y, x_2312.z, x_2313.w);
  let x_2318 : u32 = x_45.x_RenderingLayerMaxInt;
  let x_2320 : f32 = x_120.unity_RenderingLayer.x;
  u_xlatu0 = (x_2318 & bitcast<u32>(x_2320));
  let x_2323 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_2323);
  let x_2328 : f32 = u_xlat0.x;
  let x_2330 : f32 = x_45.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_2328 * x_2330);
  let x_2335 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_2335, 0.0f, 1.0f);
  SV_Target0.w = 1.0f;
  let x_2340 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_2340.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>, @location(5) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

