type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_CameraNormalsTexture : sampler;

@group(0) @binding(2) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_95 : vec2<f32> = vs_TEXCOORD0;
  let x_97 : f32 = x_34.x_GlobalMipBias.x;
  let x_98 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_95, x_97);
  u_xlat1 = vec3<f32>(x_98.x, x_98.y, x_98.z);
  let x_104 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_104) + 1.0f);
  let x_110 : f32 = u_xlat0;
  let x_112 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_110 * x_112);
  let x_118 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_120 : vec2<f32> = vs_TEXCOORD0;
  let x_125 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat2 = ((vec3<f32>(x_118.x, x_118.y, x_118.z) * vec3<f32>(x_120.x, x_120.x, x_120.x)) + vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_130 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_132 : vec2<f32> = u_xlat14;
  let x_135 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_130.x, x_130.y, x_130.z) * vec3<f32>(x_132.x, x_132.x, x_132.x)) + x_135);
  let x_139 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_141 : f32 = u_xlat21;
  let x_144 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_139.x, x_139.y, x_139.z) * vec3<f32>(x_141, x_141, x_141)) + x_144);
  let x_146 : vec2<f32> = vs_TEXCOORD0;
  let x_149 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = (x_146 + vec2<f32>(x_149.z, x_149.w));
  let x_154 : vec2<f32> = u_xlat14;
  let x_156 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  let x_158 : vec2<f32> = (x_154 * vec2<f32>(x_156.x, x_156.y));
  let x_159 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_158.x, x_158.y, x_159.z, x_159.w);
  let x_167 : vec4<f32> = u_xlat3;
  let x_170 : f32 = x_34.x_GlobalMipBias.x;
  let x_171 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_167.x, x_167.y), x_170);
  u_xlat22 = x_171.w;
  let x_174 : f32 = u_xlat22;
  u_xlat23 = fract(x_174);
  let x_176 : f32 = u_xlat23;
  u_xlat3.z = ((x_176 * 2.0f) + -1.0f);
  let x_182 : f32 = u_xlat22;
  u_xlat22 = (x_182 + 0.9296875f);
  let x_185 : f32 = u_xlat22;
  u_xlat22 = (x_185 * 628.31854248f);
  let x_189 : f32 = u_xlat3.z;
  let x_192 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_189) * x_192) + 1.0f);
  let x_195 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_195);
  let x_198 : f32 = u_xlat22;
  u_xlat4.x = sin(x_198);
  let x_202 : f32 = u_xlat22;
  u_xlat5.x = cos(x_202);
  let x_205 : f32 = u_xlat23;
  let x_207 : f32 = u_xlat5.x;
  u_xlat3.x = (x_205 * x_207);
  let x_210 : f32 = u_xlat23;
  let x_212 : f32 = u_xlat4.x;
  u_xlat3.y = (x_210 * x_212);
  let x_215 : vec3<f32> = u_xlat1;
  let x_216 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(x_215, vec3<f32>(x_216.x, x_216.y, x_216.z));
  let x_220 : f32 = u_xlat22;
  u_xlatb22 = (x_220 >= 0.0f);
  let x_222 : bool = u_xlatb22;
  u_xlat22 = select(-1.0f, 1.0f, x_222);
  let x_224 : f32 = u_xlat22;
  let x_226 : vec4<f32> = u_xlat3;
  let x_228 : vec3<f32> = (vec3<f32>(x_224, x_224, x_224) * vec3<f32>(x_226.x, x_226.y, x_226.z));
  let x_229 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_228.x, x_228.y, x_228.z, x_229.w);
  let x_231 : vec4<f32> = u_xlat3;
  let x_234 : vec4<f32> = x_34.x_SSAOParams;
  let x_236 : vec3<f32> = (vec3<f32>(x_231.x, x_231.y, x_231.z) * vec3<f32>(x_234.y, x_234.y, x_234.y));
  let x_237 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_236.x, x_236.y, x_236.z, x_237.w);
  let x_239 : vec4<f32> = u_xlat3;
  let x_244 : vec3<f32> = u_xlat2;
  let x_245 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_244);
  let x_246 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_249 : vec4<f32> = u_xlat3;
  let x_253 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_255 : vec2<f32> = (vec2<f32>(x_249.y, x_249.y) * vec2<f32>(x_253.x, x_253.y));
  let x_256 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_255.x, x_256.y, x_255.y);
  let x_259 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_261 : vec4<f32> = u_xlat3;
  let x_264 : vec3<f32> = u_xlat10;
  let x_266 : vec2<f32> = ((vec2<f32>(x_259.x, x_259.y) * vec2<f32>(x_261.x, x_261.x)) + vec2<f32>(x_264.x, x_264.z));
  let x_267 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_266.x, x_266.y, x_267.z, x_267.w);
  let x_270 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_272 : vec4<f32> = u_xlat3;
  let x_275 : vec4<f32> = u_xlat3;
  let x_277 : vec2<f32> = ((vec2<f32>(x_270.x, x_270.y) * vec2<f32>(x_272.z, x_272.z)) + vec2<f32>(x_275.x, x_275.y));
  let x_278 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_277.x, x_277.y, x_278.z, x_278.w);
  let x_280 : vec4<f32> = u_xlat3;
  let x_283 : vec2<f32> = (vec2<f32>(x_280.x, x_280.y) + vec2<f32>(1.0f, 1.0f));
  let x_284 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_283.x, x_283.y, x_284.z, x_284.w);
  let x_286 : vec4<f32> = u_xlat3;
  let x_289 : vec2<f32> = (vec2<f32>(x_286.x, x_286.y) * vec2<f32>(0.5f, 0.5f));
  let x_290 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_289.x, x_289.y, x_290.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat3;
  let x_296 : vec2<f32> = clamp(vec2<f32>(x_292.x, x_292.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_297 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_296.x, x_296.y, x_297.z, x_297.w);
  let x_302 : vec4<f32> = u_xlat3;
  let x_305 : f32 = x_34.x_GlobalMipBias.x;
  let x_306 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_302.x, x_302.y), x_305);
  u_xlat22 = x_306.x;
  let x_309 : f32 = u_xlat7.x;
  let x_311 : f32 = u_xlat22;
  let x_314 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_309) * x_311) + x_314);
  let x_317 : f32 = u_xlat0;
  let x_318 : f32 = u_xlat23;
  u_xlat17 = (x_317 + -(x_318));
  let x_322 : f32 = u_xlat17;
  let x_325 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_322) < x_325);
  let x_327 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_327);
  let x_329 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_329);
  let x_331 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_331);
  let x_333 : f32 = u_xlat22;
  let x_334 : f32 = u_xlat17;
  u_xlat22 = (x_333 * x_334);
  let x_337 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_337) + 1.0f);
  let x_341 : f32 = u_xlat23;
  let x_343 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_341 * x_343);
  let x_346 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_348 : vec4<f32> = u_xlat3;
  let x_352 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_354 : vec3<f32> = ((vec3<f32>(x_346.x, x_346.y, x_346.z) * vec3<f32>(x_348.x, x_348.x, x_348.x)) + vec3<f32>(x_352.x, x_352.y, x_352.z));
  let x_355 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_354.x, x_355.y, x_354.y, x_354.z);
  let x_358 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_360 : vec3<f32> = u_xlat10;
  let x_363 : vec4<f32> = u_xlat3;
  let x_365 : vec3<f32> = ((vec3<f32>(x_358.x, x_358.y, x_358.z) * vec3<f32>(x_360.x, x_360.x, x_360.x)) + vec3<f32>(x_363.x, x_363.z, x_363.w));
  let x_366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_365.x, x_365.y, x_365.z, x_366.w);
  let x_369 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_371 : f32 = u_xlat23;
  let x_374 : vec4<f32> = u_xlat3;
  let x_376 : vec3<f32> = ((vec3<f32>(x_369.x, x_369.y, x_369.z) * vec3<f32>(x_371, x_371, x_371)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_377 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_376.x, x_376.y, x_376.z, x_377.w);
  let x_379 : vec3<f32> = u_xlat2;
  let x_381 : vec4<f32> = u_xlat3;
  let x_383 : vec3<f32> = (-(x_379) + vec3<f32>(x_381.x, x_381.y, x_381.z));
  let x_384 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_383.x, x_383.y, x_383.z, x_384.w);
  let x_386 : vec4<f32> = u_xlat3;
  let x_388 : vec3<f32> = u_xlat1;
  u_xlat23 = dot(vec3<f32>(x_386.x, x_386.y, x_386.z), x_388);
  let x_390 : f32 = u_xlat0;
  let x_394 : f32 = u_xlat23;
  u_xlat23 = ((-(x_390) * 0.004f) + x_394);
  let x_396 : f32 = u_xlat23;
  u_xlat23 = max(x_396, 0.0f);
  let x_398 : vec4<f32> = u_xlat3;
  let x_400 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_398.x, x_398.y, x_398.z), vec3<f32>(x_400.x, x_400.y, x_400.z));
  let x_405 : f32 = u_xlat3.x;
  u_xlat3.x = (x_405 + 0.0001f);
  let x_410 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_410);
  let x_413 : f32 = u_xlat23;
  let x_415 : f32 = u_xlat3.x;
  u_xlat23 = (x_413 * x_415);
  let x_417 : vec2<f32> = u_xlat14;
  let x_420 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_417.x, x_417.y, x_417.x, x_417.y) * vec4<f32>(x_420.x, x_420.y, x_420.x, x_420.y)) + vec4<f32>(0.25f, 0.25f, 0.5f, 0.5f));
  let x_429 : vec4<f32> = u_xlat3;
  let x_432 : f32 = x_34.x_GlobalMipBias.x;
  let x_433 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_429.x, x_429.y), x_432);
  u_xlat3.x = x_433.w;
  let x_436 : vec4<f32> = u_xlat3;
  let x_441 : vec2<f32> = (vec2<f32>(x_436.x, x_436.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_442 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_441.x, x_441.y, x_442.z, x_442.w);
  let x_445 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_445);
  let x_449 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_449 * 2.0f) + -1.0f);
  let x_454 : f32 = u_xlat3.y;
  u_xlat3.x = (x_454 * 628.31854248f);
  let x_458 : f32 = u_xlat4.z;
  let x_461 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_458) * x_461) + 1.0f);
  let x_466 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_466);
  let x_470 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_470);
  let x_474 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_474);
  let x_478 : f32 = u_xlat10.x;
  let x_480 : f32 = u_xlat5.x;
  u_xlat4.x = (x_478 * x_480);
  let x_484 : f32 = u_xlat3.x;
  let x_486 : f32 = u_xlat10.x;
  u_xlat4.y = (x_484 * x_486);
  let x_489 : vec3<f32> = u_xlat1;
  let x_490 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(x_489, x_490);
  let x_495 : f32 = u_xlat3.x;
  u_xlatb3 = (x_495 >= 0.0f);
  let x_497 : bool = u_xlatb3;
  u_xlat3.x = select(-1.0f, 1.0f, x_497);
  let x_500 : vec4<f32> = u_xlat3;
  let x_502 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_500.x, x_500.x, x_500.x) * x_502);
  let x_504 : vec3<f32> = u_xlat4;
  let x_506 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_504 * vec3<f32>(x_506.y, x_506.y, x_506.y));
  let x_509 : vec3<f32> = u_xlat4;
  let x_513 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_509 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_513);
  let x_515 : vec3<f32> = u_xlat4;
  let x_518 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_520 : vec2<f32> = (vec2<f32>(x_515.y, x_515.y) * vec2<f32>(x_518.x, x_518.y));
  let x_521 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_520.x, x_520.y, x_521.z, x_521.w);
  let x_524 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_526 : vec3<f32> = u_xlat4;
  let x_529 : vec4<f32> = u_xlat3;
  let x_531 : vec2<f32> = ((vec2<f32>(x_524.x, x_524.y) * vec2<f32>(x_526.x, x_526.x)) + vec2<f32>(x_529.x, x_529.y));
  let x_532 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_531.x, x_531.y, x_532.z, x_532.w);
  let x_535 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_537 : vec3<f32> = u_xlat4;
  let x_540 : vec4<f32> = u_xlat3;
  let x_542 : vec2<f32> = ((vec2<f32>(x_535.x, x_535.y) * vec2<f32>(x_537.z, x_537.z)) + vec2<f32>(x_540.x, x_540.y));
  let x_543 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_542.x, x_542.y, x_543.z, x_543.w);
  let x_545 : vec4<f32> = u_xlat3;
  let x_547 : vec2<f32> = (vec2<f32>(x_545.x, x_545.y) + vec2<f32>(1.0f, 1.0f));
  let x_548 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_547.x, x_547.y, x_548.z, x_548.w);
  let x_550 : vec4<f32> = u_xlat3;
  let x_552 : vec2<f32> = (vec2<f32>(x_550.x, x_550.y) * vec2<f32>(0.5f, 0.5f));
  let x_553 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
  let x_555 : vec4<f32> = u_xlat3;
  let x_559 : vec2<f32> = clamp(vec2<f32>(x_555.x, x_555.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_560 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_559.x, x_559.y, x_560.z, x_560.w);
  let x_565 : vec4<f32> = u_xlat3;
  let x_568 : f32 = x_34.x_GlobalMipBias.x;
  let x_569 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_565.x, x_565.y), x_568);
  u_xlat4.x = x_569.x;
  let x_574 : f32 = u_xlat7.x;
  let x_577 : f32 = u_xlat4.x;
  let x_580 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_574) * x_577) + x_580);
  let x_584 : f32 = u_xlat0;
  let x_586 : f32 = u_xlat11.x;
  u_xlat18 = (x_584 + -(x_586));
  let x_592 : f32 = u_xlat18;
  let x_595 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_592) < x_595);
  let x_599 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_599);
  let x_603 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_603);
  let x_607 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_607);
  let x_611 : f32 = u_xlat4.x;
  let x_613 : f32 = u_xlat4.z;
  u_xlat4.x = (x_611 * x_613);
  let x_617 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_617) + 1.0f);
  let x_622 : f32 = u_xlat11.x;
  let x_624 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_622 * x_624);
  let x_628 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_630 : vec4<f32> = u_xlat3;
  let x_634 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_628.x, x_628.y, x_628.z) * vec3<f32>(x_630.x, x_630.x, x_630.x)) + vec3<f32>(x_634.x, x_634.y, x_634.z));
  let x_638 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_640 : vec3<f32> = u_xlat10;
  let x_643 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_638.x, x_638.y, x_638.z) * vec3<f32>(x_640.x, x_640.x, x_640.x)) + x_643);
  let x_646 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_648 : vec3<f32> = u_xlat11;
  let x_651 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_646.x, x_646.y, x_646.z) * vec3<f32>(x_648.x, x_648.x, x_648.x)) + x_651);
  let x_653 : vec3<f32> = u_xlat2;
  let x_655 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_653) + x_655);
  let x_657 : vec3<f32> = u_xlat11;
  let x_658 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_657, x_658);
  let x_661 : f32 = u_xlat0;
  let x_665 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_661) * 0.004f) + x_665);
  let x_669 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_669, 0.0f);
  let x_672 : vec3<f32> = u_xlat11;
  let x_673 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_672, x_673);
  let x_677 : f32 = u_xlat10.x;
  u_xlat10.x = (x_677 + 0.0001f);
  let x_681 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_681);
  let x_685 : f32 = u_xlat10.x;
  let x_687 : f32 = u_xlat3.x;
  u_xlat3.x = (x_685 * x_687);
  let x_691 : f32 = u_xlat4.x;
  let x_693 : f32 = u_xlat3.x;
  u_xlat3.x = (x_691 * x_693);
  let x_696 : f32 = u_xlat23;
  let x_697 : f32 = u_xlat22;
  let x_700 : f32 = u_xlat3.x;
  u_xlat22 = ((x_696 * x_697) + x_700);
  let x_705 : vec4<f32> = u_xlat3;
  let x_708 : f32 = x_34.x_GlobalMipBias.x;
  let x_709 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_705.z, x_705.w), x_708);
  u_xlat23 = x_709.w;
  let x_711 : f32 = u_xlat23;
  let x_716 : vec2<f32> = (vec2<f32>(x_711, x_711) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_717 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_716.x, x_716.y, x_717.z, x_717.w);
  let x_720 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_720);
  let x_722 : f32 = u_xlat23;
  u_xlat4.z = ((x_722 * 2.0f) + -1.0f);
  let x_727 : f32 = u_xlat3.y;
  u_xlat23 = (x_727 * 628.31854248f);
  let x_730 : f32 = u_xlat4.z;
  let x_733 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_730) * x_733) + 1.0f);
  let x_738 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_738);
  let x_741 : f32 = u_xlat23;
  u_xlat5.x = sin(x_741);
  let x_745 : f32 = u_xlat23;
  u_xlat6 = cos(x_745);
  let x_748 : f32 = u_xlat3.x;
  let x_749 : f32 = u_xlat6;
  u_xlat4.x = (x_748 * x_749);
  let x_753 : f32 = u_xlat3.x;
  let x_755 : f32 = u_xlat5.x;
  u_xlat4.y = (x_753 * x_755);
  let x_758 : vec3<f32> = u_xlat1;
  let x_759 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_758, x_759);
  let x_762 : f32 = u_xlat23;
  u_xlatb23 = (x_762 >= 0.0f);
  let x_764 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_764);
  let x_766 : f32 = u_xlat23;
  let x_768 : vec3<f32> = u_xlat4;
  let x_769 : vec3<f32> = (vec3<f32>(x_766, x_766, x_766) * x_768);
  let x_770 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_769.x, x_769.y, x_769.z, x_770.w);
  let x_772 : vec4<f32> = u_xlat3;
  let x_775 : vec4<f32> = x_34.x_SSAOParams;
  let x_777 : vec3<f32> = (vec3<f32>(x_772.x, x_772.y, x_772.z) * vec3<f32>(x_775.y, x_775.y, x_775.y));
  let x_778 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_777.x, x_777.y, x_777.z, x_778.w);
  let x_780 : vec4<f32> = u_xlat3;
  let x_785 : vec3<f32> = u_xlat2;
  let x_786 : vec3<f32> = ((vec3<f32>(x_780.x, x_780.y, x_780.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_785);
  let x_787 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_786.x, x_786.y, x_786.z, x_787.w);
  let x_789 : vec4<f32> = u_xlat3;
  let x_792 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_794 : vec2<f32> = (vec2<f32>(x_789.y, x_789.y) * vec2<f32>(x_792.x, x_792.y));
  let x_795 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_794.x, x_795.y, x_794.y);
  let x_798 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_800 : vec4<f32> = u_xlat3;
  let x_803 : vec3<f32> = u_xlat10;
  let x_805 : vec2<f32> = ((vec2<f32>(x_798.x, x_798.y) * vec2<f32>(x_800.x, x_800.x)) + vec2<f32>(x_803.x, x_803.z));
  let x_806 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_805.x, x_805.y, x_806.z, x_806.w);
  let x_809 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_811 : vec4<f32> = u_xlat3;
  let x_814 : vec4<f32> = u_xlat3;
  let x_816 : vec2<f32> = ((vec2<f32>(x_809.x, x_809.y) * vec2<f32>(x_811.z, x_811.z)) + vec2<f32>(x_814.x, x_814.y));
  let x_817 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_816.x, x_816.y, x_817.z, x_817.w);
  let x_819 : vec4<f32> = u_xlat3;
  let x_821 : vec2<f32> = (vec2<f32>(x_819.x, x_819.y) + vec2<f32>(1.0f, 1.0f));
  let x_822 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_821.x, x_821.y, x_822.z, x_822.w);
  let x_824 : vec4<f32> = u_xlat3;
  let x_826 : vec2<f32> = (vec2<f32>(x_824.x, x_824.y) * vec2<f32>(0.5f, 0.5f));
  let x_827 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_826.x, x_826.y, x_827.z, x_827.w);
  let x_829 : vec4<f32> = u_xlat3;
  let x_833 : vec2<f32> = clamp(vec2<f32>(x_829.x, x_829.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_834 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_833.x, x_833.y, x_834.z, x_834.w);
  let x_839 : vec4<f32> = u_xlat3;
  let x_842 : f32 = x_34.x_GlobalMipBias.x;
  let x_843 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_839.x, x_839.y), x_842);
  u_xlat23 = x_843.x;
  let x_846 : f32 = u_xlat7.x;
  let x_848 : f32 = u_xlat23;
  let x_851 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_846) * x_848) + x_851);
  let x_854 : f32 = u_xlat0;
  let x_855 : f32 = u_xlat17;
  u_xlat24 = (x_854 + -(x_855));
  let x_859 : f32 = u_xlat24;
  let x_862 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_859) < x_862);
  let x_864 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_864);
  let x_866 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_866);
  let x_868 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_868);
  let x_870 : f32 = u_xlat23;
  let x_871 : f32 = u_xlat24;
  u_xlat23 = (x_870 * x_871);
  let x_874 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_874) + 1.0f);
  let x_878 : f32 = u_xlat17;
  let x_880 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_878 * x_880);
  let x_883 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_885 : vec4<f32> = u_xlat3;
  let x_889 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_883.x, x_883.y, x_883.z) * vec3<f32>(x_885.x, x_885.x, x_885.x)) + vec3<f32>(x_889.x, x_889.y, x_889.z));
  let x_893 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_895 : vec3<f32> = u_xlat10;
  let x_898 : vec3<f32> = u_xlat4;
  let x_899 : vec3<f32> = ((vec3<f32>(x_893.x, x_893.y, x_893.z) * vec3<f32>(x_895.x, x_895.x, x_895.x)) + x_898);
  let x_900 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_899.x, x_899.y, x_900.z, x_899.z);
  let x_903 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_905 : f32 = u_xlat17;
  let x_908 : vec4<f32> = u_xlat3;
  let x_910 : vec3<f32> = ((vec3<f32>(x_903.x, x_903.y, x_903.z) * vec3<f32>(x_905, x_905, x_905)) + vec3<f32>(x_908.x, x_908.y, x_908.w));
  let x_911 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_910.x, x_910.y, x_910.z, x_911.w);
  let x_913 : vec3<f32> = u_xlat2;
  let x_915 : vec4<f32> = u_xlat3;
  let x_917 : vec3<f32> = (-(x_913) + vec3<f32>(x_915.x, x_915.y, x_915.z));
  let x_918 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_917.x, x_917.y, x_917.z, x_918.w);
  let x_920 : vec4<f32> = u_xlat3;
  let x_922 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_920.x, x_920.y, x_920.z), x_922);
  let x_924 : f32 = u_xlat0;
  let x_927 : f32 = u_xlat24;
  u_xlat24 = ((-(x_924) * 0.004f) + x_927);
  let x_929 : f32 = u_xlat24;
  u_xlat24 = max(x_929, 0.0f);
  let x_931 : vec4<f32> = u_xlat3;
  let x_933 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_931.x, x_931.y, x_931.z), vec3<f32>(x_933.x, x_933.y, x_933.z));
  let x_938 : f32 = u_xlat3.x;
  u_xlat3.x = (x_938 + 0.0001f);
  let x_942 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_942);
  let x_946 : f32 = u_xlat3.x;
  let x_947 : f32 = u_xlat24;
  u_xlat3.x = (x_946 * x_947);
  let x_951 : f32 = u_xlat3.x;
  let x_952 : f32 = u_xlat23;
  let x_954 : f32 = u_xlat22;
  u_xlat22 = ((x_951 * x_952) + x_954);
  let x_956 : vec2<f32> = u_xlat14;
  let x_958 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = ((x_956 * vec2<f32>(x_958.x, x_958.y)) + vec2<f32>(0.75f, 0.75f));
  let x_967 : vec2<f32> = u_xlat14;
  let x_969 : f32 = x_34.x_GlobalMipBias.x;
  let x_970 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_967, x_969);
  u_xlat14.x = x_970.w;
  let x_973 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_973.x, x_973.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_980 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_980);
  let x_984 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_984 * 2.0f) + -1.0f);
  let x_989 : f32 = u_xlat14.y;
  u_xlat14.x = (x_989 * 628.31854248f);
  let x_993 : f32 = u_xlat3.z;
  let x_996 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_993) * x_996) + 1.0f);
  let x_999 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_999);
  let x_1002 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_1002);
  let x_1006 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_1006);
  let x_1009 : f32 = u_xlat21;
  let x_1011 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1009 * x_1011);
  let x_1014 : f32 = u_xlat21;
  let x_1016 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1014 * x_1016);
  let x_1019 : vec3<f32> = u_xlat1;
  let x_1020 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(x_1019, vec3<f32>(x_1020.x, x_1020.y, x_1020.z));
  let x_1025 : f32 = u_xlat14.x;
  u_xlatb14 = (x_1025 >= 0.0f);
  let x_1027 : bool = u_xlatb14;
  u_xlat14.x = select(-1.0f, 1.0f, x_1027);
  let x_1030 : vec2<f32> = u_xlat14;
  let x_1032 : vec4<f32> = u_xlat3;
  let x_1034 : vec3<f32> = (vec3<f32>(x_1030.x, x_1030.x, x_1030.x) * vec3<f32>(x_1032.x, x_1032.y, x_1032.z));
  let x_1035 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1034.x, x_1034.y, x_1034.z, x_1035.w);
  let x_1037 : vec4<f32> = u_xlat3;
  let x_1040 : vec4<f32> = x_34.x_SSAOParams;
  let x_1042 : vec3<f32> = (vec3<f32>(x_1037.x, x_1037.y, x_1037.z) * vec3<f32>(x_1040.y, x_1040.y, x_1040.y));
  let x_1043 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1042.x, x_1042.y, x_1042.z, x_1043.w);
  let x_1045 : vec4<f32> = u_xlat3;
  let x_1050 : vec3<f32> = u_xlat2;
  let x_1051 : vec3<f32> = ((vec3<f32>(x_1045.x, x_1045.y, x_1045.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1050);
  let x_1052 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1052.w);
  let x_1054 : vec4<f32> = u_xlat3;
  let x_1057 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_1054.y, x_1054.y) * vec2<f32>(x_1057.x, x_1057.y));
  let x_1061 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1063 : vec4<f32> = u_xlat3;
  let x_1066 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1061.x, x_1061.y) * vec2<f32>(x_1063.x, x_1063.x)) + x_1066);
  let x_1069 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1071 : vec4<f32> = u_xlat3;
  let x_1074 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1069.x, x_1069.y) * vec2<f32>(x_1071.z, x_1071.z)) + x_1074);
  let x_1076 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1076 + vec2<f32>(1.0f, 1.0f));
  let x_1078 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1078 * vec2<f32>(0.5f, 0.5f));
  let x_1080 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_1080, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1087 : vec2<f32> = u_xlat14;
  let x_1089 : f32 = x_34.x_GlobalMipBias.x;
  let x_1090 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1087, x_1089);
  u_xlat23 = x_1090.x;
  let x_1093 : f32 = u_xlat7.x;
  let x_1095 : f32 = u_xlat23;
  let x_1098 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_1093) * x_1095) + x_1098);
  let x_1102 : f32 = u_xlat7.x;
  let x_1104 : f32 = u_xlat0;
  u_xlat3.x = (-(x_1102) + x_1104);
  let x_1108 : f32 = u_xlat3.x;
  let x_1111 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_1108) < x_1111);
  let x_1113 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_1113);
  let x_1116 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1116);
  let x_1118 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1118);
  let x_1120 : f32 = u_xlat23;
  let x_1122 : f32 = u_xlat3.x;
  u_xlat23 = (x_1120 * x_1122);
  let x_1125 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_1125) + 1.0f);
  let x_1129 : f32 = u_xlat7.x;
  let x_1131 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_1129 * x_1131);
  let x_1135 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1137 : vec2<f32> = u_xlat14;
  let x_1141 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_1143 : vec3<f32> = ((vec3<f32>(x_1135.x, x_1135.y, x_1135.z) * vec3<f32>(x_1137.x, x_1137.x, x_1137.x)) + vec3<f32>(x_1141.x, x_1141.y, x_1141.z));
  let x_1144 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1143.x, x_1143.y, x_1143.z, x_1144.w);
  let x_1147 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1149 : f32 = u_xlat21;
  let x_1152 : vec4<f32> = u_xlat3;
  let x_1154 : vec3<f32> = ((vec3<f32>(x_1147.x, x_1147.y, x_1147.z) * vec3<f32>(x_1149, x_1149, x_1149)) + vec3<f32>(x_1152.x, x_1152.y, x_1152.z));
  let x_1155 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1154.x, x_1154.y, x_1154.z, x_1155.w);
  let x_1158 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1160 : vec3<f32> = u_xlat7;
  let x_1163 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_1158.x, x_1158.y, x_1158.z) * vec3<f32>(x_1160.x, x_1160.x, x_1160.x)) + vec3<f32>(x_1163.x, x_1163.y, x_1163.z));
  let x_1166 : vec3<f32> = u_xlat2;
  let x_1168 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_1166) + x_1168);
  let x_1170 : vec3<f32> = u_xlat7;
  let x_1171 : vec3<f32> = u_xlat1;
  u_xlat2.x = dot(x_1170, x_1171);
  let x_1174 : f32 = u_xlat0;
  let x_1178 : f32 = u_xlat2.x;
  u_xlat2.x = ((-(x_1174) * 0.004f) + x_1178);
  let x_1182 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1182, 0.0f);
  let x_1185 : vec3<f32> = u_xlat7;
  let x_1186 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_1185, x_1186);
  let x_1190 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1190 + 0.0001f);
  let x_1194 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_1194);
  let x_1198 : f32 = u_xlat7.x;
  let x_1200 : f32 = u_xlat2.x;
  u_xlat7.x = (x_1198 * x_1200);
  let x_1204 : f32 = u_xlat7.x;
  let x_1205 : f32 = u_xlat23;
  let x_1207 : f32 = u_xlat22;
  u_xlat7.x = ((x_1204 * x_1205) + x_1207);
  let x_1211 : f32 = u_xlat7.x;
  let x_1213 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_1211 * x_1213);
  let x_1217 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_1217);
  let x_1220 : f32 = u_xlat0;
  let x_1223 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_1220) * x_1223) + 1.0f);
  let x_1226 : f32 = u_xlat0;
  let x_1227 : f32 = u_xlat0;
  u_xlat0 = (x_1226 * x_1227);
  let x_1230 : f32 = u_xlat7.x;
  let x_1232 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_1230 * x_1232);
  let x_1235 : f32 = u_xlat0;
  let x_1237 : f32 = u_xlat7.x;
  u_xlat0 = (x_1235 * x_1237);
  let x_1239 : f32 = u_xlat0;
  u_xlat0 = (x_1239 * 0.25f);
  let x_1241 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1241, 0.0f, 1.0f);
  let x_1243 : f32 = u_xlat0;
  u_xlat0 = log2(x_1243);
  let x_1245 : f32 = u_xlat0;
  u_xlat0 = (x_1245 * 0.600000024f);
  let x_1248 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1248);
  let x_1252 : vec3<f32> = u_xlat1;
  let x_1255 : vec3<f32> = ((x_1252 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1256 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1256.x, x_1255.x, x_1255.y, x_1255.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

