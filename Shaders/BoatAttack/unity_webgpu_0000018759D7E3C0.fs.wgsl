struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3466 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1680 : f32;
  var x_1693 : f32;
  var x_1705 : f32;
  var u_xlat46 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat68 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu66 : u32;
  var u_xlati4 : i32;
  var u_xlat66 : f32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati66 : i32;
  var x_3703 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  let x_1656 : vec3<f32> = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1657 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1656.x, x_1656.y, x_1656.z, x_1657.w);
  let x_1660 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1660 == 0.0f);
  let x_1663 : vec3<f32> = vs_INTERP0;
  let x_1667 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat24 = (-(x_1663) + x_1667);
  let x_1669 : vec3<f32> = u_xlat24;
  let x_1670 : vec3<f32> = u_xlat24;
  u_xlat64 = dot(x_1669, x_1670);
  let x_1672 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1672);
  let x_1674 : f32 = u_xlat64;
  let x_1676 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1674, x_1674, x_1674) * x_1676);
  let x_1679 : bool = u_xlatb22.x;
  if (x_1679) {
    let x_1684 : f32 = u_xlat24.x;
    x_1680 = x_1684;
  } else {
    let x_1688 : f32 = x_66.unity_MatrixV[0i].z;
    x_1680 = x_1688;
  }
  let x_1689 : f32 = x_1680;
  u_xlat6.x = x_1689;
  let x_1692 : bool = u_xlatb22.x;
  if (x_1692) {
    let x_1697 : f32 = u_xlat24.y;
    x_1693 = x_1697;
  } else {
    let x_1700 : f32 = x_66.unity_MatrixV[1i].z;
    x_1693 = x_1700;
  }
  let x_1701 : f32 = x_1693;
  u_xlat6.y = x_1701;
  let x_1704 : bool = u_xlatb22.x;
  if (x_1704) {
    let x_1709 : f32 = u_xlat24.z;
    x_1705 = x_1709;
  } else {
    let x_1712 : f32 = x_66.unity_MatrixV[2i].z;
    x_1705 = x_1712;
  }
  let x_1713 : f32 = x_1705;
  u_xlat6.z = x_1713;
  u_xlat5.w = 1.0f;
  let x_1718 : vec4<f32> = x_1592.unity_SHAr;
  let x_1719 : vec4<f32> = u_xlat5;
  u_xlat7.x = dot(x_1718, x_1719);
  let x_1724 : vec4<f32> = x_1592.unity_SHAg;
  let x_1725 : vec4<f32> = u_xlat5;
  u_xlat7.y = dot(x_1724, x_1725);
  let x_1730 : vec4<f32> = x_1592.unity_SHAb;
  let x_1731 : vec4<f32> = u_xlat5;
  u_xlat7.z = dot(x_1730, x_1731);
  let x_1734 : vec4<f32> = u_xlat5;
  let x_1736 : vec4<f32> = u_xlat5;
  u_xlat8 = (vec4<f32>(x_1734.y, x_1734.z, x_1734.z, x_1734.x) * vec4<f32>(x_1736.x, x_1736.y, x_1736.z, x_1736.z));
  let x_1741 : vec4<f32> = x_1592.unity_SHBr;
  let x_1742 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_1741, x_1742);
  let x_1747 : vec4<f32> = x_1592.unity_SHBg;
  let x_1748 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_1747, x_1748);
  let x_1753 : vec4<f32> = x_1592.unity_SHBb;
  let x_1754 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_1753, x_1754);
  let x_1758 : f32 = u_xlat5.y;
  let x_1760 : f32 = u_xlat5.y;
  u_xlat22.x = (x_1758 * x_1760);
  let x_1764 : f32 = u_xlat5.x;
  let x_1766 : f32 = u_xlat5.x;
  let x_1769 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1764 * x_1766) + -(x_1769));
  let x_1775 : vec4<f32> = x_1592.unity_SHC;
  let x_1777 : vec3<f32> = u_xlat22;
  let x_1780 : vec4<f32> = u_xlat9;
  u_xlat24 = ((vec3<f32>(x_1775.x, x_1775.y, x_1775.z) * vec3<f32>(x_1777.x, x_1777.x, x_1777.x)) + vec3<f32>(x_1780.x, x_1780.y, x_1780.z));
  let x_1783 : vec3<f32> = u_xlat24;
  let x_1784 : vec4<f32> = u_xlat7;
  u_xlat24 = (x_1783 + vec3<f32>(x_1784.x, x_1784.y, x_1784.z));
  let x_1787 : vec3<f32> = u_xlat24;
  u_xlat24 = max(x_1787, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1791 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1792 : vec2<f32> = vec2<f32>(x_1791.x, x_1791.y);
  let x_1796 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1792.x, x_1792.y));
  let x_1797 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_1796.x, x_1797.y, x_1796.y);
  let x_1799 : vec3<f32> = u_xlat22;
  let x_1801 : vec4<f32> = hlslcc_FragCoord;
  let x_1803 : vec2<f32> = (vec2<f32>(x_1799.x, x_1799.z) * vec2<f32>(x_1801.x, x_1801.y));
  let x_1804 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1803.x, x_1803.y, x_1804.z, x_1804.w);
  let x_1807 : f32 = u_xlat7.y;
  let x_1809 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1812 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat22.x = ((x_1807 * x_1809) + x_1812);
  let x_1816 : f32 = u_xlat22.x;
  u_xlat7.z = (-(x_1816) + 1.0f);
  let x_1821 : f32 = u_xlat3.x;
  u_xlat3.x = x_1821;
  let x_1824 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1824, 0.0f, 1.0f);
  let x_1828 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1828, 1.0f);
  let x_1831 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1831 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1836 : f32 = u_xlat3.x;
  u_xlat22.x = (-(x_1836) + 1.0f);
  let x_1841 : f32 = u_xlat22.x;
  let x_1843 : f32 = u_xlat22.x;
  u_xlat64 = (x_1841 * x_1843);
  let x_1845 : f32 = u_xlat64;
  u_xlat64 = max(x_1845, 0.0078125f);
  let x_1848 : f32 = u_xlat64;
  let x_1849 : f32 = u_xlat64;
  u_xlat65 = (x_1848 * x_1849);
  let x_1852 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1852 + 0.040000021f);
  let x_1857 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1857, 1.0f);
  let x_1860 : f32 = u_xlat64;
  u_xlat25.x = ((x_1860 * 4.0f) + 2.0f);
  let x_1871 : vec4<f32> = u_xlat7;
  let x_1874 : f32 = x_66.x_GlobalMipBias.x;
  let x_1875 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1871.x, x_1871.z), x_1874);
  u_xlat46 = x_1875.x;
  let x_1877 : f32 = u_xlat46;
  u_xlat67 = (x_1877 + -1.0f);
  let x_1881 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1882 : f32 = u_xlat67;
  u_xlat67 = ((x_1881 * x_1882) + 1.0f);
  let x_1885 : f32 = u_xlat46;
  let x_1887 : f32 = vs_INTERP4.w;
  u_xlat46 = min(x_1885, x_1887);
  let x_1889 : bool = u_xlatb63;
  if (x_1889) {
    let x_1893 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1893 == 1.0f);
    let x_1895 : bool = u_xlatb63;
    if (x_1895) {
      let x_1899 : vec4<f32> = vs_INTERP9;
      let x_1902 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1899.x, x_1899.y, x_1899.x, x_1899.y) + x_1902);
      let x_1905 : vec4<f32> = u_xlat7;
      let x_1906 : vec2<f32> = vec2<f32>(x_1905.x, x_1905.y);
      let x_1908 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1906.x, x_1906.y, x_1908);
      let x_1915 : vec3<f32> = txVec30;
      let x_1917 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1915.xy, x_1915.z);
      u_xlat8.x = x_1917;
      let x_1920 : vec4<f32> = u_xlat7;
      let x_1921 : vec2<f32> = vec2<f32>(x_1920.z, x_1920.w);
      let x_1923 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1921.x, x_1921.y, x_1923);
      let x_1930 : vec3<f32> = txVec31;
      let x_1932 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1930.xy, x_1930.z);
      u_xlat8.y = x_1932;
      let x_1934 : vec4<f32> = vs_INTERP9;
      let x_1937 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1934.x, x_1934.y, x_1934.x, x_1934.y) + x_1937);
      let x_1940 : vec4<f32> = u_xlat7;
      let x_1941 : vec2<f32> = vec2<f32>(x_1940.x, x_1940.y);
      let x_1943 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1941.x, x_1941.y, x_1943);
      let x_1950 : vec3<f32> = txVec32;
      let x_1952 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1950.xy, x_1950.z);
      u_xlat8.z = x_1952;
      let x_1955 : vec4<f32> = u_xlat7;
      let x_1956 : vec2<f32> = vec2<f32>(x_1955.z, x_1955.w);
      let x_1958 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1956.x, x_1956.y, x_1958);
      let x_1965 : vec3<f32> = txVec33;
      let x_1967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1965.xy, x_1965.z);
      u_xlat8.w = x_1967;
      let x_1969 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1969, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1974 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb68 = (x_1974 == 2.0f);
      let x_1976 : bool = u_xlatb68;
      if (x_1976) {
        let x_1979 : vec4<f32> = vs_INTERP9;
        let x_1982 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1985 : vec2<f32> = ((vec2<f32>(x_1979.x, x_1979.y) * vec2<f32>(x_1982.z, x_1982.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1986 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1985.x, x_1985.y, x_1986.z, x_1986.w);
        let x_1988 : vec4<f32> = u_xlat7;
        let x_1990 : vec2<f32> = floor(vec2<f32>(x_1988.x, x_1988.y));
        let x_1991 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1990.x, x_1990.y, x_1991.z, x_1991.w);
        let x_1993 : vec4<f32> = vs_INTERP9;
        let x_1996 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1999 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1993.x, x_1993.y) * vec2<f32>(x_1996.z, x_1996.w)) + -(vec2<f32>(x_1999.x, x_1999.y)));
        let x_2003 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2003.x, x_2003.x, x_2003.y, x_2003.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2006 : vec4<f32> = u_xlat8;
        let x_2008 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2006.x, x_2006.x, x_2006.z, x_2006.z) * vec4<f32>(x_2008.x, x_2008.x, x_2008.z, x_2008.z));
        let x_2011 : vec4<f32> = u_xlat9;
        let x_2013 : vec2<f32> = (vec2<f32>(x_2011.y, x_2011.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2014 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2013.x, x_2014.y, x_2013.y, x_2014.w);
        let x_2016 : vec4<f32> = u_xlat9;
        let x_2019 : vec2<f32> = u_xlat49;
        let x_2021 : vec2<f32> = ((vec2<f32>(x_2016.x, x_2016.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2019));
        let x_2022 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2021.x, x_2021.y, x_2022.z, x_2022.w);
        let x_2025 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2025) + vec2<f32>(1.0f, 1.0f));
        let x_2028 : vec2<f32> = u_xlat49;
        let x_2029 : vec2<f32> = min(x_2028, vec2<f32>(0.0f, 0.0f));
        let x_2030 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2029.x, x_2029.y, x_2030.z, x_2030.w);
        let x_2032 : vec4<f32> = u_xlat10;
        let x_2035 : vec4<f32> = u_xlat10;
        let x_2038 : vec2<f32> = u_xlat51;
        let x_2039 : vec2<f32> = ((-(vec2<f32>(x_2032.x, x_2032.y)) * vec2<f32>(x_2035.x, x_2035.y)) + x_2038);
        let x_2040 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2039.x, x_2039.y, x_2040.z, x_2040.w);
        let x_2042 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2042, vec2<f32>(0.0f, 0.0f));
        let x_2044 : vec2<f32> = u_xlat49;
        let x_2046 : vec2<f32> = u_xlat49;
        let x_2048 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2044) * x_2046) + vec2<f32>(x_2048.y, x_2048.w));
        let x_2051 : vec4<f32> = u_xlat10;
        let x_2053 : vec2<f32> = (vec2<f32>(x_2051.x, x_2051.y) + vec2<f32>(1.0f, 1.0f));
        let x_2054 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2053.x, x_2053.y, x_2054.z, x_2054.w);
        let x_2056 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2056 + vec2<f32>(1.0f, 1.0f));
        let x_2058 : vec4<f32> = u_xlat9;
        let x_2060 : vec2<f32> = (vec2<f32>(x_2058.x, x_2058.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2061 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2060.x, x_2060.y, x_2061.z, x_2061.w);
        let x_2063 : vec2<f32> = u_xlat51;
        let x_2064 : vec2<f32> = (x_2063 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2065 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2064.x, x_2064.y, x_2065.z, x_2065.w);
        let x_2067 : vec4<f32> = u_xlat10;
        let x_2069 : vec2<f32> = (vec2<f32>(x_2067.x, x_2067.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2070 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2069.x, x_2069.y, x_2070.z, x_2070.w);
        let x_2072 : vec2<f32> = u_xlat49;
        let x_2073 : vec2<f32> = (x_2072 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2074 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2073.x, x_2073.y, x_2074.z, x_2074.w);
        let x_2076 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2076.y, x_2076.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2080 : f32 = u_xlat10.x;
        u_xlat11.z = x_2080;
        let x_2083 : f32 = u_xlat49.x;
        u_xlat11.w = x_2083;
        let x_2086 : f32 = u_xlat12.x;
        u_xlat9.z = x_2086;
        let x_2089 : f32 = u_xlat8.x;
        u_xlat9.w = x_2089;
        let x_2091 : vec4<f32> = u_xlat9;
        let x_2093 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2091.z, x_2091.w, x_2091.x, x_2091.z) + vec4<f32>(x_2093.z, x_2093.w, x_2093.x, x_2093.z));
        let x_2097 : f32 = u_xlat11.y;
        u_xlat10.z = x_2097;
        let x_2100 : f32 = u_xlat49.y;
        u_xlat10.w = x_2100;
        let x_2103 : f32 = u_xlat9.y;
        u_xlat12.z = x_2103;
        let x_2106 : f32 = u_xlat8.z;
        u_xlat12.w = x_2106;
        let x_2108 : vec4<f32> = u_xlat10;
        let x_2110 : vec4<f32> = u_xlat12;
        let x_2112 : vec3<f32> = (vec3<f32>(x_2108.z, x_2108.y, x_2108.w) + vec3<f32>(x_2110.z, x_2110.y, x_2110.w));
        let x_2113 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2112.x, x_2112.y, x_2112.z, x_2113.w);
        let x_2115 : vec4<f32> = u_xlat9;
        let x_2117 : vec4<f32> = u_xlat13;
        let x_2119 : vec3<f32> = (vec3<f32>(x_2115.x, x_2115.z, x_2115.w) / vec3<f32>(x_2117.z, x_2117.w, x_2117.y));
        let x_2120 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2119.x, x_2119.y, x_2119.z, x_2120.w);
        let x_2122 : vec4<f32> = u_xlat9;
        let x_2124 : vec3<f32> = (vec3<f32>(x_2122.x, x_2122.y, x_2122.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2125 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2124.x, x_2124.y, x_2124.z, x_2125.w);
        let x_2127 : vec4<f32> = u_xlat12;
        let x_2129 : vec4<f32> = u_xlat8;
        let x_2131 : vec3<f32> = (vec3<f32>(x_2127.z, x_2127.y, x_2127.w) / vec3<f32>(x_2129.x, x_2129.y, x_2129.z));
        let x_2132 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2131.x, x_2131.y, x_2131.z, x_2132.w);
        let x_2134 : vec4<f32> = u_xlat10;
        let x_2136 : vec3<f32> = (vec3<f32>(x_2134.x, x_2134.y, x_2134.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2137 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2136.x, x_2136.y, x_2136.z, x_2137.w);
        let x_2139 : vec4<f32> = u_xlat9;
        let x_2142 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2144 : vec3<f32> = (vec3<f32>(x_2139.y, x_2139.x, x_2139.z) * vec3<f32>(x_2142.x, x_2142.x, x_2142.x));
        let x_2145 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2144.x, x_2144.y, x_2144.z, x_2145.w);
        let x_2147 : vec4<f32> = u_xlat10;
        let x_2150 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2152 : vec3<f32> = (vec3<f32>(x_2147.x, x_2147.y, x_2147.z) * vec3<f32>(x_2150.y, x_2150.y, x_2150.y));
        let x_2153 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2152.x, x_2152.y, x_2152.z, x_2153.w);
        let x_2156 : f32 = u_xlat10.x;
        u_xlat9.w = x_2156;
        let x_2158 : vec4<f32> = u_xlat7;
        let x_2161 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2164 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2158.x, x_2158.y, x_2158.x, x_2158.y) * vec4<f32>(x_2161.x, x_2161.y, x_2161.x, x_2161.y)) + vec4<f32>(x_2164.y, x_2164.w, x_2164.x, x_2164.w));
        let x_2167 : vec4<f32> = u_xlat7;
        let x_2170 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2173 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2167.x, x_2167.y) * vec2<f32>(x_2170.x, x_2170.y)) + vec2<f32>(x_2173.z, x_2173.w));
        let x_2177 : f32 = u_xlat9.y;
        u_xlat10.w = x_2177;
        let x_2179 : vec4<f32> = u_xlat10;
        let x_2180 : vec2<f32> = vec2<f32>(x_2179.y, x_2179.z);
        let x_2181 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2181.x, x_2180.x, x_2181.z, x_2180.y);
        let x_2183 : vec4<f32> = u_xlat7;
        let x_2186 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2189 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2183.x, x_2183.y, x_2183.x, x_2183.y) * vec4<f32>(x_2186.x, x_2186.y, x_2186.x, x_2186.y)) + vec4<f32>(x_2189.x, x_2189.y, x_2189.z, x_2189.y));
        let x_2192 : vec4<f32> = u_xlat7;
        let x_2195 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2198 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2192.x, x_2192.y, x_2192.x, x_2192.y) * vec4<f32>(x_2195.x, x_2195.y, x_2195.x, x_2195.y)) + vec4<f32>(x_2198.w, x_2198.y, x_2198.w, x_2198.z));
        let x_2201 : vec4<f32> = u_xlat7;
        let x_2204 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2207 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2201.x, x_2201.y, x_2201.x, x_2201.y) * vec4<f32>(x_2204.x, x_2204.y, x_2204.x, x_2204.y)) + vec4<f32>(x_2207.x, x_2207.w, x_2207.z, x_2207.w));
        let x_2210 : vec4<f32> = u_xlat8;
        let x_2212 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2210.x, x_2210.x, x_2210.x, x_2210.y) * vec4<f32>(x_2212.z, x_2212.w, x_2212.y, x_2212.z));
        let x_2215 : vec4<f32> = u_xlat8;
        let x_2217 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2215.y, x_2215.y, x_2215.z, x_2215.z) * x_2217);
        let x_2221 : f32 = u_xlat8.z;
        let x_2223 : f32 = u_xlat13.y;
        u_xlat68 = (x_2221 * x_2223);
        let x_2226 : vec4<f32> = u_xlat11;
        let x_2227 : vec2<f32> = vec2<f32>(x_2226.x, x_2226.y);
        let x_2229 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2227.x, x_2227.y, x_2229);
        let x_2237 : vec3<f32> = txVec34;
        let x_2239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2237.xy, x_2237.z);
        u_xlat69 = x_2239;
        let x_2241 : vec4<f32> = u_xlat11;
        let x_2242 : vec2<f32> = vec2<f32>(x_2241.z, x_2241.w);
        let x_2244 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2242.x, x_2242.y, x_2244);
        let x_2251 : vec3<f32> = txVec35;
        let x_2253 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2251.xy, x_2251.z);
        u_xlat7.x = x_2253;
        let x_2256 : f32 = u_xlat7.x;
        let x_2258 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2256 * x_2258);
        let x_2262 : f32 = u_xlat14.x;
        let x_2263 : f32 = u_xlat69;
        let x_2266 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2262 * x_2263) + x_2266);
        let x_2269 : vec2<f32> = u_xlat49;
        let x_2271 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2269.x, x_2269.y, x_2271);
        let x_2278 : vec3<f32> = txVec36;
        let x_2280 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2278.xy, x_2278.z);
        u_xlat7.x = x_2280;
        let x_2283 : f32 = u_xlat14.z;
        let x_2285 : f32 = u_xlat7.x;
        let x_2287 : f32 = u_xlat69;
        u_xlat69 = ((x_2283 * x_2285) + x_2287);
        let x_2290 : vec4<f32> = u_xlat10;
        let x_2291 : vec2<f32> = vec2<f32>(x_2290.x, x_2290.y);
        let x_2293 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2291.x, x_2291.y, x_2293);
        let x_2300 : vec3<f32> = txVec37;
        let x_2302 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2300.xy, x_2300.z);
        u_xlat7.x = x_2302;
        let x_2305 : f32 = u_xlat14.w;
        let x_2307 : f32 = u_xlat7.x;
        let x_2309 : f32 = u_xlat69;
        u_xlat69 = ((x_2305 * x_2307) + x_2309);
        let x_2312 : vec4<f32> = u_xlat12;
        let x_2313 : vec2<f32> = vec2<f32>(x_2312.x, x_2312.y);
        let x_2315 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2313.x, x_2313.y, x_2315);
        let x_2322 : vec3<f32> = txVec38;
        let x_2324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2322.xy, x_2322.z);
        u_xlat7.x = x_2324;
        let x_2327 : f32 = u_xlat15.x;
        let x_2329 : f32 = u_xlat7.x;
        let x_2331 : f32 = u_xlat69;
        u_xlat69 = ((x_2327 * x_2329) + x_2331);
        let x_2334 : vec4<f32> = u_xlat12;
        let x_2335 : vec2<f32> = vec2<f32>(x_2334.z, x_2334.w);
        let x_2337 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2335.x, x_2335.y, x_2337);
        let x_2344 : vec3<f32> = txVec39;
        let x_2346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2344.xy, x_2344.z);
        u_xlat7.x = x_2346;
        let x_2349 : f32 = u_xlat15.y;
        let x_2351 : f32 = u_xlat7.x;
        let x_2353 : f32 = u_xlat69;
        u_xlat69 = ((x_2349 * x_2351) + x_2353);
        let x_2356 : vec4<f32> = u_xlat10;
        let x_2357 : vec2<f32> = vec2<f32>(x_2356.z, x_2356.w);
        let x_2359 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2357.x, x_2357.y, x_2359);
        let x_2366 : vec3<f32> = txVec40;
        let x_2368 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2366.xy, x_2366.z);
        u_xlat7.x = x_2368;
        let x_2371 : f32 = u_xlat15.z;
        let x_2373 : f32 = u_xlat7.x;
        let x_2375 : f32 = u_xlat69;
        u_xlat69 = ((x_2371 * x_2373) + x_2375);
        let x_2378 : vec4<f32> = u_xlat9;
        let x_2379 : vec2<f32> = vec2<f32>(x_2378.x, x_2378.y);
        let x_2381 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2379.x, x_2379.y, x_2381);
        let x_2388 : vec3<f32> = txVec41;
        let x_2390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2388.xy, x_2388.z);
        u_xlat7.x = x_2390;
        let x_2393 : f32 = u_xlat15.w;
        let x_2395 : f32 = u_xlat7.x;
        let x_2397 : f32 = u_xlat69;
        u_xlat69 = ((x_2393 * x_2395) + x_2397);
        let x_2400 : vec4<f32> = u_xlat9;
        let x_2401 : vec2<f32> = vec2<f32>(x_2400.z, x_2400.w);
        let x_2403 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2401.x, x_2401.y, x_2403);
        let x_2410 : vec3<f32> = txVec42;
        let x_2412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2410.xy, x_2410.z);
        u_xlat7.x = x_2412;
        let x_2414 : f32 = u_xlat68;
        let x_2416 : f32 = u_xlat7.x;
        let x_2418 : f32 = u_xlat69;
        u_xlat63 = ((x_2414 * x_2416) + x_2418);
      } else {
        let x_2421 : vec4<f32> = vs_INTERP9;
        let x_2424 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2427 : vec2<f32> = ((vec2<f32>(x_2421.x, x_2421.y) * vec2<f32>(x_2424.z, x_2424.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2428 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2427.x, x_2427.y, x_2428.z, x_2428.w);
        let x_2430 : vec4<f32> = u_xlat7;
        let x_2432 : vec2<f32> = floor(vec2<f32>(x_2430.x, x_2430.y));
        let x_2433 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2432.x, x_2432.y, x_2433.z, x_2433.w);
        let x_2435 : vec4<f32> = vs_INTERP9;
        let x_2438 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2441 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2435.x, x_2435.y) * vec2<f32>(x_2438.z, x_2438.w)) + -(vec2<f32>(x_2441.x, x_2441.y)));
        let x_2445 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2445.x, x_2445.x, x_2445.y, x_2445.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2448 : vec4<f32> = u_xlat8;
        let x_2450 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2448.x, x_2448.x, x_2448.z, x_2448.z) * vec4<f32>(x_2450.x, x_2450.x, x_2450.z, x_2450.z));
        let x_2453 : vec4<f32> = u_xlat9;
        let x_2455 : vec2<f32> = (vec2<f32>(x_2453.y, x_2453.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2456 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2456.x, x_2455.x, x_2456.z, x_2455.y);
        let x_2458 : vec4<f32> = u_xlat9;
        let x_2461 : vec2<f32> = u_xlat49;
        let x_2463 : vec2<f32> = ((vec2<f32>(x_2458.x, x_2458.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2461));
        let x_2464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2463.x, x_2464.y, x_2463.y, x_2464.w);
        let x_2466 : vec2<f32> = u_xlat49;
        let x_2468 : vec2<f32> = (-(x_2466) + vec2<f32>(1.0f, 1.0f));
        let x_2469 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2468.x, x_2468.y, x_2469.z, x_2469.w);
        let x_2471 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2471, vec2<f32>(0.0f, 0.0f));
        let x_2473 : vec2<f32> = u_xlat51;
        let x_2475 : vec2<f32> = u_xlat51;
        let x_2477 : vec4<f32> = u_xlat9;
        let x_2479 : vec2<f32> = ((-(x_2473) * x_2475) + vec2<f32>(x_2477.x, x_2477.y));
        let x_2480 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2479.x, x_2479.y, x_2480.z, x_2480.w);
        let x_2482 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2482, vec2<f32>(0.0f, 0.0f));
        let x_2485 : vec2<f32> = u_xlat51;
        let x_2487 : vec2<f32> = u_xlat51;
        let x_2489 : vec4<f32> = u_xlat8;
        let x_2491 : vec2<f32> = ((-(x_2485) * x_2487) + vec2<f32>(x_2489.y, x_2489.w));
        let x_2492 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2491.x, x_2492.y, x_2491.y);
        let x_2494 : vec4<f32> = u_xlat9;
        let x_2496 : vec2<f32> = (vec2<f32>(x_2494.x, x_2494.y) + vec2<f32>(2.0f, 2.0f));
        let x_2497 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2496.x, x_2496.y, x_2497.z, x_2497.w);
        let x_2499 : vec3<f32> = u_xlat29;
        let x_2501 : vec2<f32> = (vec2<f32>(x_2499.x, x_2499.z) + vec2<f32>(2.0f, 2.0f));
        let x_2502 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2502.x, x_2501.x, x_2502.z, x_2501.y);
        let x_2505 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2505 * 0.081632003f);
        let x_2508 : vec4<f32> = u_xlat8;
        let x_2510 : vec3<f32> = (vec3<f32>(x_2508.z, x_2508.x, x_2508.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2511 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2510.x, x_2510.y, x_2510.z, x_2511.w);
        let x_2513 : vec4<f32> = u_xlat9;
        let x_2515 : vec2<f32> = (vec2<f32>(x_2513.x, x_2513.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2516 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2515.x, x_2515.y, x_2516.z, x_2516.w);
        let x_2519 : f32 = u_xlat12.y;
        u_xlat11.x = x_2519;
        let x_2521 : vec2<f32> = u_xlat49;
        let x_2524 : vec2<f32> = ((vec2<f32>(x_2521.x, x_2521.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2525 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2525.x, x_2524.x, x_2525.z, x_2524.y);
        let x_2527 : vec2<f32> = u_xlat49;
        let x_2530 : vec2<f32> = ((vec2<f32>(x_2527.x, x_2527.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2531 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2530.x, x_2531.y, x_2530.y, x_2531.w);
        let x_2534 : f32 = u_xlat8.x;
        u_xlat9.y = x_2534;
        let x_2537 : f32 = u_xlat10.y;
        u_xlat9.w = x_2537;
        let x_2539 : vec4<f32> = u_xlat9;
        let x_2540 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2539 + x_2540);
        let x_2542 : vec2<f32> = u_xlat49;
        let x_2545 : vec2<f32> = ((vec2<f32>(x_2542.y, x_2542.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2546 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2546.x, x_2545.x, x_2546.z, x_2545.y);
        let x_2548 : vec2<f32> = u_xlat49;
        let x_2551 : vec2<f32> = ((vec2<f32>(x_2548.y, x_2548.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2552 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2551.x, x_2552.y, x_2551.y, x_2552.w);
        let x_2555 : f32 = u_xlat8.y;
        u_xlat10.y = x_2555;
        let x_2557 : vec4<f32> = u_xlat10;
        let x_2558 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2557 + x_2558);
        let x_2560 : vec4<f32> = u_xlat9;
        let x_2561 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2560 / x_2561);
        let x_2563 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2563 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2565 : vec4<f32> = u_xlat10;
        let x_2566 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2565 / x_2566);
        let x_2568 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2568 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2570 : vec4<f32> = u_xlat9;
        let x_2573 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2570.w, x_2570.x, x_2570.y, x_2570.z) * vec4<f32>(x_2573.x, x_2573.x, x_2573.x, x_2573.x));
        let x_2576 : vec4<f32> = u_xlat10;
        let x_2579 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2576.x, x_2576.w, x_2576.y, x_2576.z) * vec4<f32>(x_2579.y, x_2579.y, x_2579.y, x_2579.y));
        let x_2582 : vec4<f32> = u_xlat9;
        let x_2583 : vec3<f32> = vec3<f32>(x_2582.y, x_2582.z, x_2582.w);
        let x_2584 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2583.x, x_2584.y, x_2583.y, x_2583.z);
        let x_2587 : f32 = u_xlat10.x;
        u_xlat12.y = x_2587;
        let x_2589 : vec4<f32> = u_xlat7;
        let x_2592 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2595 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2589.x, x_2589.y, x_2589.x, x_2589.y) * vec4<f32>(x_2592.x, x_2592.y, x_2592.x, x_2592.y)) + vec4<f32>(x_2595.x, x_2595.y, x_2595.z, x_2595.y));
        let x_2598 : vec4<f32> = u_xlat7;
        let x_2601 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2604 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2598.x, x_2598.y) * vec2<f32>(x_2601.x, x_2601.y)) + vec2<f32>(x_2604.w, x_2604.y));
        let x_2608 : f32 = u_xlat12.y;
        u_xlat9.y = x_2608;
        let x_2611 : f32 = u_xlat10.z;
        u_xlat12.y = x_2611;
        let x_2613 : vec4<f32> = u_xlat7;
        let x_2616 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2619 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2613.x, x_2613.y, x_2613.x, x_2613.y) * vec4<f32>(x_2616.x, x_2616.y, x_2616.x, x_2616.y)) + vec4<f32>(x_2619.x, x_2619.y, x_2619.z, x_2619.y));
        let x_2622 : vec4<f32> = u_xlat7;
        let x_2625 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2628 : vec4<f32> = u_xlat12;
        let x_2630 : vec2<f32> = ((vec2<f32>(x_2622.x, x_2622.y) * vec2<f32>(x_2625.x, x_2625.y)) + vec2<f32>(x_2628.w, x_2628.y));
        let x_2631 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2630.x, x_2630.y, x_2631.z, x_2631.w);
        let x_2634 : f32 = u_xlat12.y;
        u_xlat9.z = x_2634;
        let x_2636 : vec4<f32> = u_xlat7;
        let x_2639 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2642 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2636.x, x_2636.y, x_2636.x, x_2636.y) * vec4<f32>(x_2639.x, x_2639.y, x_2639.x, x_2639.y)) + vec4<f32>(x_2642.x, x_2642.y, x_2642.x, x_2642.z));
        let x_2646 : f32 = u_xlat10.w;
        u_xlat12.y = x_2646;
        let x_2648 : vec4<f32> = u_xlat7;
        let x_2651 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2654 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2648.x, x_2648.y, x_2648.x, x_2648.y) * vec4<f32>(x_2651.x, x_2651.y, x_2651.x, x_2651.y)) + vec4<f32>(x_2654.x, x_2654.y, x_2654.z, x_2654.y));
        let x_2658 : vec4<f32> = u_xlat7;
        let x_2661 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2664 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_2658.x, x_2658.y) * vec2<f32>(x_2661.x, x_2661.y)) + vec2<f32>(x_2664.w, x_2664.y));
        let x_2668 : f32 = u_xlat12.y;
        u_xlat9.w = x_2668;
        let x_2671 : vec4<f32> = u_xlat7;
        let x_2674 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2677 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2671.x, x_2671.y) * vec2<f32>(x_2674.x, x_2674.y)) + vec2<f32>(x_2677.x, x_2677.w));
        let x_2680 : vec4<f32> = u_xlat12;
        let x_2681 : vec3<f32> = vec3<f32>(x_2680.x, x_2680.z, x_2680.w);
        let x_2682 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2681.x, x_2682.y, x_2681.y, x_2681.z);
        let x_2684 : vec4<f32> = u_xlat7;
        let x_2687 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2690 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2684.x, x_2684.y, x_2684.x, x_2684.y) * vec4<f32>(x_2687.x, x_2687.y, x_2687.x, x_2687.y)) + vec4<f32>(x_2690.x, x_2690.y, x_2690.z, x_2690.y));
        let x_2694 : vec4<f32> = u_xlat7;
        let x_2697 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2700 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2694.x, x_2694.y) * vec2<f32>(x_2697.x, x_2697.y)) + vec2<f32>(x_2700.w, x_2700.y));
        let x_2704 : f32 = u_xlat9.x;
        u_xlat10.x = x_2704;
        let x_2706 : vec4<f32> = u_xlat7;
        let x_2709 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2712 : vec4<f32> = u_xlat10;
        let x_2714 : vec2<f32> = ((vec2<f32>(x_2706.x, x_2706.y) * vec2<f32>(x_2709.x, x_2709.y)) + vec2<f32>(x_2712.x, x_2712.y));
        let x_2715 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2714.x, x_2714.y, x_2715.z, x_2715.w);
        let x_2717 : vec4<f32> = u_xlat8;
        let x_2719 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2717.x, x_2717.x, x_2717.x, x_2717.x) * x_2719);
        let x_2722 : vec4<f32> = u_xlat8;
        let x_2724 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2722.y, x_2722.y, x_2722.y, x_2722.y) * x_2724);
        let x_2727 : vec4<f32> = u_xlat8;
        let x_2729 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2727.z, x_2727.z, x_2727.z, x_2727.z) * x_2729);
        let x_2731 : vec4<f32> = u_xlat8;
        let x_2733 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2731.w, x_2731.w, x_2731.w, x_2731.w) * x_2733);
        let x_2736 : vec4<f32> = u_xlat13;
        let x_2737 : vec2<f32> = vec2<f32>(x_2736.x, x_2736.y);
        let x_2739 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2737.x, x_2737.y, x_2739);
        let x_2746 : vec3<f32> = txVec43;
        let x_2748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2746.xy, x_2746.z);
        u_xlat68 = x_2748;
        let x_2750 : vec4<f32> = u_xlat13;
        let x_2751 : vec2<f32> = vec2<f32>(x_2750.z, x_2750.w);
        let x_2753 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2751.x, x_2751.y, x_2753);
        let x_2760 : vec3<f32> = txVec44;
        let x_2762 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2760.xy, x_2760.z);
        u_xlat69 = x_2762;
        let x_2763 : f32 = u_xlat69;
        let x_2765 : f32 = u_xlat18.y;
        u_xlat69 = (x_2763 * x_2765);
        let x_2768 : f32 = u_xlat18.x;
        let x_2769 : f32 = u_xlat68;
        let x_2771 : f32 = u_xlat69;
        u_xlat68 = ((x_2768 * x_2769) + x_2771);
        let x_2774 : vec2<f32> = u_xlat49;
        let x_2776 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2774.x, x_2774.y, x_2776);
        let x_2783 : vec3<f32> = txVec45;
        let x_2785 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2783.xy, x_2783.z);
        u_xlat69 = x_2785;
        let x_2787 : f32 = u_xlat18.z;
        let x_2788 : f32 = u_xlat69;
        let x_2790 : f32 = u_xlat68;
        u_xlat68 = ((x_2787 * x_2788) + x_2790);
        let x_2793 : vec4<f32> = u_xlat16;
        let x_2794 : vec2<f32> = vec2<f32>(x_2793.x, x_2793.y);
        let x_2796 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2794.x, x_2794.y, x_2796);
        let x_2803 : vec3<f32> = txVec46;
        let x_2805 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2803.xy, x_2803.z);
        u_xlat69 = x_2805;
        let x_2807 : f32 = u_xlat18.w;
        let x_2808 : f32 = u_xlat69;
        let x_2810 : f32 = u_xlat68;
        u_xlat68 = ((x_2807 * x_2808) + x_2810);
        let x_2813 : vec4<f32> = u_xlat14;
        let x_2814 : vec2<f32> = vec2<f32>(x_2813.x, x_2813.y);
        let x_2816 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2814.x, x_2814.y, x_2816);
        let x_2823 : vec3<f32> = txVec47;
        let x_2825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2823.xy, x_2823.z);
        u_xlat69 = x_2825;
        let x_2827 : f32 = u_xlat19.x;
        let x_2828 : f32 = u_xlat69;
        let x_2830 : f32 = u_xlat68;
        u_xlat68 = ((x_2827 * x_2828) + x_2830);
        let x_2833 : vec4<f32> = u_xlat14;
        let x_2834 : vec2<f32> = vec2<f32>(x_2833.z, x_2833.w);
        let x_2836 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2834.x, x_2834.y, x_2836);
        let x_2843 : vec3<f32> = txVec48;
        let x_2845 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2843.xy, x_2843.z);
        u_xlat69 = x_2845;
        let x_2847 : f32 = u_xlat19.y;
        let x_2848 : f32 = u_xlat69;
        let x_2850 : f32 = u_xlat68;
        u_xlat68 = ((x_2847 * x_2848) + x_2850);
        let x_2853 : vec4<f32> = u_xlat15;
        let x_2854 : vec2<f32> = vec2<f32>(x_2853.x, x_2853.y);
        let x_2856 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2854.x, x_2854.y, x_2856);
        let x_2863 : vec3<f32> = txVec49;
        let x_2865 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2863.xy, x_2863.z);
        u_xlat69 = x_2865;
        let x_2867 : f32 = u_xlat19.z;
        let x_2868 : f32 = u_xlat69;
        let x_2870 : f32 = u_xlat68;
        u_xlat68 = ((x_2867 * x_2868) + x_2870);
        let x_2873 : vec4<f32> = u_xlat16;
        let x_2874 : vec2<f32> = vec2<f32>(x_2873.z, x_2873.w);
        let x_2876 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2874.x, x_2874.y, x_2876);
        let x_2883 : vec3<f32> = txVec50;
        let x_2885 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2883.xy, x_2883.z);
        u_xlat69 = x_2885;
        let x_2887 : f32 = u_xlat19.w;
        let x_2888 : f32 = u_xlat69;
        let x_2890 : f32 = u_xlat68;
        u_xlat68 = ((x_2887 * x_2888) + x_2890);
        let x_2893 : vec4<f32> = u_xlat17;
        let x_2894 : vec2<f32> = vec2<f32>(x_2893.x, x_2893.y);
        let x_2896 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2894.x, x_2894.y, x_2896);
        let x_2903 : vec3<f32> = txVec51;
        let x_2905 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2903.xy, x_2903.z);
        u_xlat69 = x_2905;
        let x_2907 : f32 = u_xlat20.x;
        let x_2908 : f32 = u_xlat69;
        let x_2910 : f32 = u_xlat68;
        u_xlat68 = ((x_2907 * x_2908) + x_2910);
        let x_2913 : vec4<f32> = u_xlat17;
        let x_2914 : vec2<f32> = vec2<f32>(x_2913.z, x_2913.w);
        let x_2916 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2914.x, x_2914.y, x_2916);
        let x_2923 : vec3<f32> = txVec52;
        let x_2925 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2923.xy, x_2923.z);
        u_xlat69 = x_2925;
        let x_2927 : f32 = u_xlat20.y;
        let x_2928 : f32 = u_xlat69;
        let x_2930 : f32 = u_xlat68;
        u_xlat68 = ((x_2927 * x_2928) + x_2930);
        let x_2933 : vec2<f32> = u_xlat30;
        let x_2935 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2933.x, x_2933.y, x_2935);
        let x_2942 : vec3<f32> = txVec53;
        let x_2944 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2942.xy, x_2942.z);
        u_xlat69 = x_2944;
        let x_2946 : f32 = u_xlat20.z;
        let x_2947 : f32 = u_xlat69;
        let x_2949 : f32 = u_xlat68;
        u_xlat68 = ((x_2946 * x_2947) + x_2949);
        let x_2952 : vec2<f32> = u_xlat57;
        let x_2954 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2952.x, x_2952.y, x_2954);
        let x_2961 : vec3<f32> = txVec54;
        let x_2963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2961.xy, x_2961.z);
        u_xlat69 = x_2963;
        let x_2965 : f32 = u_xlat20.w;
        let x_2966 : f32 = u_xlat69;
        let x_2968 : f32 = u_xlat68;
        u_xlat68 = ((x_2965 * x_2966) + x_2968);
        let x_2971 : vec4<f32> = u_xlat12;
        let x_2972 : vec2<f32> = vec2<f32>(x_2971.x, x_2971.y);
        let x_2974 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2972.x, x_2972.y, x_2974);
        let x_2981 : vec3<f32> = txVec55;
        let x_2983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2981.xy, x_2981.z);
        u_xlat69 = x_2983;
        let x_2985 : f32 = u_xlat8.x;
        let x_2986 : f32 = u_xlat69;
        let x_2988 : f32 = u_xlat68;
        u_xlat68 = ((x_2985 * x_2986) + x_2988);
        let x_2991 : vec4<f32> = u_xlat12;
        let x_2992 : vec2<f32> = vec2<f32>(x_2991.z, x_2991.w);
        let x_2994 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_2992.x, x_2992.y, x_2994);
        let x_3001 : vec3<f32> = txVec56;
        let x_3003 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3001.xy, x_3001.z);
        u_xlat69 = x_3003;
        let x_3005 : f32 = u_xlat8.y;
        let x_3006 : f32 = u_xlat69;
        let x_3008 : f32 = u_xlat68;
        u_xlat68 = ((x_3005 * x_3006) + x_3008);
        let x_3011 : vec2<f32> = u_xlat52;
        let x_3013 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3011.x, x_3011.y, x_3013);
        let x_3020 : vec3<f32> = txVec57;
        let x_3022 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3020.xy, x_3020.z);
        u_xlat69 = x_3022;
        let x_3024 : f32 = u_xlat8.z;
        let x_3025 : f32 = u_xlat69;
        let x_3027 : f32 = u_xlat68;
        u_xlat68 = ((x_3024 * x_3025) + x_3027);
        let x_3030 : vec4<f32> = u_xlat7;
        let x_3031 : vec2<f32> = vec2<f32>(x_3030.x, x_3030.y);
        let x_3033 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3031.x, x_3031.y, x_3033);
        let x_3040 : vec3<f32> = txVec58;
        let x_3042 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3040.xy, x_3040.z);
        u_xlat69 = x_3042;
        let x_3044 : f32 = u_xlat8.w;
        let x_3045 : f32 = u_xlat69;
        let x_3047 : f32 = u_xlat68;
        u_xlat63 = ((x_3044 * x_3045) + x_3047);
      }
    }
  } else {
    let x_3051 : vec4<f32> = vs_INTERP9;
    let x_3052 : vec2<f32> = vec2<f32>(x_3051.x, x_3051.y);
    let x_3054 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3052.x, x_3052.y, x_3054);
    let x_3061 : vec3<f32> = txVec59;
    let x_3063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3061.xy, x_3061.z);
    u_xlat63 = x_3063;
  }
  let x_3064 : f32 = u_xlat63;
  let x_3066 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3069 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3064 * x_3066) + x_3069);
  let x_3073 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3073);
  let x_3076 : f32 = vs_INTERP9.z;
  u_xlatb68 = (x_3076 >= 1.0f);
  let x_3078 : bool = u_xlatb4;
  let x_3079 : bool = u_xlatb68;
  u_xlatb4 = (x_3078 | x_3079);
  let x_3081 : bool = u_xlatb4;
  let x_3082 : f32 = u_xlat63;
  u_xlat63 = select(x_3082, 1.0f, x_3081);
  let x_3084 : vec3<f32> = vs_INTERP0;
  let x_3086 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3088 : vec3<f32> = (x_3084 + -(x_3086));
  let x_3089 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3088.x, x_3088.y, x_3088.z, x_3089.w);
  let x_3091 : vec4<f32> = u_xlat7;
  let x_3093 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3091.x, x_3091.y, x_3091.z), vec3<f32>(x_3093.x, x_3093.y, x_3093.z));
  let x_3098 : f32 = u_xlat4.x;
  let x_3100 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3103 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3098 * x_3100) + x_3103);
  let x_3107 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3107, 0.0f, 1.0f);
  let x_3110 : f32 = u_xlat63;
  u_xlat68 = (-(x_3110) + 1.0f);
  let x_3114 : f32 = u_xlat4.x;
  let x_3115 : f32 = u_xlat68;
  let x_3117 : f32 = u_xlat63;
  u_xlat63 = ((x_3114 * x_3115) + x_3117);
  let x_3119 : f32 = u_xlat67;
  let x_3122 : vec4<f32> = x_66.x_MainLightColor;
  let x_3124 : vec3<f32> = (vec3<f32>(x_3119, x_3119, x_3119) * vec3<f32>(x_3122.x, x_3122.y, x_3122.z));
  let x_3125 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3124.x, x_3124.y, x_3124.z, x_3125.w);
  let x_3127 : vec4<f32> = u_xlat6;
  let x_3130 : vec4<f32> = u_xlat5;
  u_xlat4.x = dot(-(vec3<f32>(x_3127.x, x_3127.y, x_3127.z)), vec3<f32>(x_3130.x, x_3130.y, x_3130.z));
  let x_3135 : f32 = u_xlat4.x;
  let x_3137 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3135 + x_3137);
  let x_3140 : vec4<f32> = u_xlat5;
  let x_3142 : vec4<f32> = u_xlat4;
  let x_3146 : vec4<f32> = u_xlat6;
  let x_3149 : vec3<f32> = ((vec3<f32>(x_3140.x, x_3140.y, x_3140.z) * -(vec3<f32>(x_3142.x, x_3142.x, x_3142.x))) + -(vec3<f32>(x_3146.x, x_3146.y, x_3146.z)));
  let x_3150 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3149.x, x_3149.y, x_3149.z, x_3150.w);
  let x_3152 : vec4<f32> = u_xlat5;
  let x_3154 : vec4<f32> = u_xlat6;
  u_xlat4.x = dot(vec3<f32>(x_3152.x, x_3152.y, x_3152.z), vec3<f32>(x_3154.x, x_3154.y, x_3154.z));
  let x_3159 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3159, 0.0f, 1.0f);
  let x_3163 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3163) + 1.0f);
  let x_3168 : f32 = u_xlat4.x;
  let x_3170 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3168 * x_3170);
  let x_3174 : f32 = u_xlat4.x;
  let x_3176 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3174 * x_3176);
  let x_3180 : f32 = u_xlat22.x;
  u_xlat68 = ((-(x_3180) * 0.699999988f) + 1.700000048f);
  let x_3187 : f32 = u_xlat22.x;
  let x_3188 : f32 = u_xlat68;
  u_xlat22.x = (x_3187 * x_3188);
  let x_3192 : f32 = u_xlat22.x;
  u_xlat22.x = (x_3192 * 6.0f);
  let x_3204 : vec4<f32> = u_xlat8;
  let x_3207 : f32 = u_xlat22.x;
  let x_3208 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3204.x, x_3204.y, x_3204.z), x_3207);
  u_xlat8 = x_3208;
  let x_3210 : f32 = u_xlat8.w;
  u_xlat22.x = (x_3210 + -1.0f);
  let x_3214 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3216 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_3214 * x_3216) + 1.0f);
  let x_3221 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_3221, 0.0f);
  let x_3225 : f32 = u_xlat22.x;
  u_xlat22.x = log2(x_3225);
  let x_3229 : f32 = u_xlat22.x;
  let x_3231 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat22.x = (x_3229 * x_3231);
  let x_3235 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_3235);
  let x_3239 : f32 = u_xlat22.x;
  let x_3241 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat22.x = (x_3239 * x_3241);
  let x_3244 : vec4<f32> = u_xlat8;
  let x_3246 : vec3<f32> = u_xlat22;
  let x_3248 : vec3<f32> = (vec3<f32>(x_3244.x, x_3244.y, x_3244.z) * vec3<f32>(x_3246.x, x_3246.x, x_3246.x));
  let x_3249 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3248.x, x_3248.y, x_3248.z, x_3249.w);
  let x_3251 : f32 = u_xlat64;
  let x_3253 : f32 = u_xlat64;
  let x_3257 : vec2<f32> = ((vec2<f32>(x_3251, x_3251) * vec2<f32>(x_3253, x_3253)) + vec2<f32>(-1.0f, 1.0f));
  let x_3258 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_3257.x, x_3258.y, x_3257.y);
  let x_3261 : f32 = u_xlat22.z;
  u_xlat64 = (1.0f / x_3261);
  let x_3264 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3264 + -0.039999999f);
  let x_3269 : f32 = u_xlat4.x;
  let x_3271 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3269 * x_3271) + 0.039999999f);
  let x_3276 : f32 = u_xlat64;
  let x_3278 : f32 = u_xlat3.x;
  u_xlat64 = (x_3276 * x_3278);
  let x_3280 : f32 = u_xlat64;
  let x_3282 : vec4<f32> = u_xlat8;
  let x_3284 : vec3<f32> = (vec3<f32>(x_3280, x_3280, x_3280) * vec3<f32>(x_3282.x, x_3282.y, x_3282.z));
  let x_3285 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3284.x, x_3284.y, x_3284.z, x_3285.w);
  let x_3287 : vec3<f32> = u_xlat24;
  let x_3288 : vec3<f32> = u_xlat2;
  let x_3290 : vec4<f32> = u_xlat8;
  let x_3292 : vec3<f32> = ((x_3287 * x_3288) + vec3<f32>(x_3290.x, x_3290.y, x_3290.z));
  let x_3293 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3292.x, x_3292.y, x_3292.z, x_3293.w);
  let x_3295 : f32 = u_xlat63;
  let x_3297 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3295 * x_3297);
  let x_3299 : vec4<f32> = u_xlat5;
  let x_3302 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3299.x, x_3299.y, x_3299.z), vec3<f32>(x_3302.x, x_3302.y, x_3302.z));
  let x_3305 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3305, 0.0f, 1.0f);
  let x_3307 : f32 = u_xlat63;
  let x_3308 : f32 = u_xlat64;
  u_xlat63 = (x_3307 * x_3308);
  let x_3310 : f32 = u_xlat63;
  let x_3312 : vec4<f32> = u_xlat7;
  let x_3314 : vec3<f32> = (vec3<f32>(x_3310, x_3310, x_3310) * vec3<f32>(x_3312.x, x_3312.y, x_3312.z));
  let x_3315 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3314.x, x_3314.y, x_3314.z, x_3315.w);
  let x_3317 : vec4<f32> = u_xlat6;
  let x_3320 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3322 : vec3<f32> = (vec3<f32>(x_3317.x, x_3317.y, x_3317.z) + vec3<f32>(x_3320.x, x_3320.y, x_3320.z));
  let x_3323 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3322.x, x_3322.y, x_3322.z, x_3323.w);
  let x_3325 : vec4<f32> = u_xlat8;
  let x_3327 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3325.x, x_3325.y, x_3325.z), vec3<f32>(x_3327.x, x_3327.y, x_3327.z));
  let x_3330 : f32 = u_xlat63;
  u_xlat63 = max(x_3330, 1.17549435e-37f);
  let x_3333 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3333);
  let x_3335 : f32 = u_xlat63;
  let x_3337 : vec4<f32> = u_xlat8;
  let x_3339 : vec3<f32> = (vec3<f32>(x_3335, x_3335, x_3335) * vec3<f32>(x_3337.x, x_3337.y, x_3337.z));
  let x_3340 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3339.x, x_3339.y, x_3339.z, x_3340.w);
  let x_3342 : vec4<f32> = u_xlat5;
  let x_3344 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3342.x, x_3342.y, x_3342.z), vec3<f32>(x_3344.x, x_3344.y, x_3344.z));
  let x_3347 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3347, 0.0f, 1.0f);
  let x_3350 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3352 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3350.x, x_3350.y, x_3350.z), vec3<f32>(x_3352.x, x_3352.y, x_3352.z));
  let x_3355 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3355, 0.0f, 1.0f);
  let x_3357 : f32 = u_xlat63;
  let x_3358 : f32 = u_xlat63;
  u_xlat63 = (x_3357 * x_3358);
  let x_3360 : f32 = u_xlat63;
  let x_3362 : f32 = u_xlat22.x;
  u_xlat63 = ((x_3360 * x_3362) + 1.000010014f);
  let x_3366 : f32 = u_xlat64;
  let x_3367 : f32 = u_xlat64;
  u_xlat64 = (x_3366 * x_3367);
  let x_3369 : f32 = u_xlat63;
  let x_3370 : f32 = u_xlat63;
  u_xlat63 = (x_3369 * x_3370);
  let x_3372 : f32 = u_xlat64;
  u_xlat64 = max(x_3372, 0.100000001f);
  let x_3375 : f32 = u_xlat63;
  let x_3376 : f32 = u_xlat64;
  u_xlat63 = (x_3375 * x_3376);
  let x_3379 : f32 = u_xlat25.x;
  let x_3380 : f32 = u_xlat63;
  u_xlat63 = (x_3379 * x_3380);
  let x_3382 : f32 = u_xlat65;
  let x_3383 : f32 = u_xlat63;
  u_xlat63 = (x_3382 / x_3383);
  let x_3385 : f32 = u_xlat63;
  let x_3389 : vec3<f32> = u_xlat2;
  let x_3390 : vec3<f32> = ((vec3<f32>(x_3385, x_3385, x_3385) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3389);
  let x_3391 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3390.x, x_3390.y, x_3390.z, x_3391.w);
  let x_3393 : vec4<f32> = u_xlat7;
  let x_3395 : vec4<f32> = u_xlat8;
  let x_3397 : vec3<f32> = (vec3<f32>(x_3393.x, x_3393.y, x_3393.z) * vec3<f32>(x_3395.x, x_3395.y, x_3395.z));
  let x_3398 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3397.x, x_3397.y, x_3397.z, x_3398.w);
  let x_3401 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3403 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3401, x_3403);
  let x_3407 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3407));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3419 : u32 = u_xlatu_loop_1;
    let x_3420 : u32 = u_xlatu63;
    if ((x_3419 < x_3420)) {
    } else {
      break;
    }
    let x_3423 : u32 = u_xlatu_loop_1;
    u_xlatu66 = (x_3423 >> 2u);
    let x_3427 : u32 = u_xlatu_loop_1;
    u_xlati4 = bitcast<i32>((x_3427 & 3u));
    let x_3431 : u32 = u_xlatu66;
    let x_3434 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3431)];
    let x_3444 : i32 = u_xlati4;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3449 : vec4<u32> = indexable[x_3444];
    u_xlat66 = dot(x_3434, bitcast<vec4<f32>>(x_3449));
    let x_3453 : f32 = u_xlat66;
    u_xlati66 = i32(x_3453);
    let x_3455 : vec3<f32> = vs_INTERP0;
    let x_3467 : i32 = u_xlati66;
    let x_3469 : vec4<f32> = x_3466.x_AdditionalLightsPosition[x_3467];
    let x_3472 : i32 = u_xlati66;
    let x_3474 : vec4<f32> = x_3466.x_AdditionalLightsPosition[x_3472];
    let x_3476 : vec3<f32> = ((-(x_3455) * vec3<f32>(x_3469.w, x_3469.w, x_3469.w)) + vec3<f32>(x_3474.x, x_3474.y, x_3474.z));
    let x_3477 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3476.x, x_3476.y, x_3476.z, x_3477.w);
    let x_3479 : vec4<f32> = u_xlat9;
    let x_3481 : vec4<f32> = u_xlat9;
    u_xlat4.x = dot(vec3<f32>(x_3479.x, x_3479.y, x_3479.z), vec3<f32>(x_3481.x, x_3481.y, x_3481.z));
    let x_3486 : f32 = u_xlat4.x;
    u_xlat4.x = max(x_3486, 6.10351562e-05f);
    let x_3491 : f32 = u_xlat4.x;
    u_xlat68 = inverseSqrt(x_3491);
    let x_3493 : f32 = u_xlat68;
    let x_3495 : vec4<f32> = u_xlat9;
    let x_3497 : vec3<f32> = (vec3<f32>(x_3493, x_3493, x_3493) * vec3<f32>(x_3495.x, x_3495.y, x_3495.z));
    let x_3498 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3497.x, x_3497.y, x_3497.z, x_3498.w);
    let x_3501 : f32 = u_xlat4.x;
    u_xlat69 = (1.0f / x_3501);
    let x_3504 : f32 = u_xlat4.x;
    let x_3505 : i32 = u_xlati66;
    let x_3507 : f32 = x_3466.x_AdditionalLightsAttenuation[x_3505].x;
    u_xlat4.x = (x_3504 * x_3507);
    let x_3511 : f32 = u_xlat4.x;
    let x_3514 : f32 = u_xlat4.x;
    u_xlat4.x = ((-(x_3511) * x_3514) + 1.0f);
    let x_3519 : f32 = u_xlat4.x;
    u_xlat4.x = max(x_3519, 0.0f);
    let x_3523 : f32 = u_xlat4.x;
    let x_3525 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3523 * x_3525);
    let x_3529 : f32 = u_xlat4.x;
    let x_3530 : f32 = u_xlat69;
    u_xlat4.x = (x_3529 * x_3530);
    let x_3533 : i32 = u_xlati66;
    let x_3535 : vec4<f32> = x_3466.x_AdditionalLightsSpotDir[x_3533];
    let x_3537 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3535.x, x_3535.y, x_3535.z), vec3<f32>(x_3537.x, x_3537.y, x_3537.z));
    let x_3540 : f32 = u_xlat69;
    let x_3541 : i32 = u_xlati66;
    let x_3543 : f32 = x_3466.x_AdditionalLightsAttenuation[x_3541].z;
    let x_3545 : i32 = u_xlati66;
    let x_3547 : f32 = x_3466.x_AdditionalLightsAttenuation[x_3545].w;
    u_xlat69 = ((x_3540 * x_3543) + x_3547);
    let x_3549 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3549, 0.0f, 1.0f);
    let x_3551 : f32 = u_xlat69;
    let x_3552 : f32 = u_xlat69;
    u_xlat69 = (x_3551 * x_3552);
    let x_3555 : f32 = u_xlat4.x;
    let x_3556 : f32 = u_xlat69;
    u_xlat4.x = (x_3555 * x_3556);
    let x_3559 : f32 = u_xlat67;
    let x_3561 : i32 = u_xlati66;
    let x_3563 : vec4<f32> = x_3466.x_AdditionalLightsColor[x_3561];
    let x_3565 : vec3<f32> = (vec3<f32>(x_3559, x_3559, x_3559) * vec3<f32>(x_3563.x, x_3563.y, x_3563.z));
    let x_3566 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3565.x, x_3565.y, x_3565.z, x_3566.w);
    let x_3568 : vec4<f32> = u_xlat5;
    let x_3570 : vec4<f32> = u_xlat10;
    u_xlat66 = dot(vec3<f32>(x_3568.x, x_3568.y, x_3568.z), vec3<f32>(x_3570.x, x_3570.y, x_3570.z));
    let x_3573 : f32 = u_xlat66;
    u_xlat66 = clamp(x_3573, 0.0f, 1.0f);
    let x_3575 : f32 = u_xlat66;
    let x_3577 : f32 = u_xlat4.x;
    u_xlat66 = (x_3575 * x_3577);
    let x_3579 : f32 = u_xlat66;
    let x_3581 : vec4<f32> = u_xlat11;
    let x_3583 : vec3<f32> = (vec3<f32>(x_3579, x_3579, x_3579) * vec3<f32>(x_3581.x, x_3581.y, x_3581.z));
    let x_3584 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3583.x, x_3583.y, x_3583.z, x_3584.w);
    let x_3586 : vec4<f32> = u_xlat9;
    let x_3588 : f32 = u_xlat68;
    let x_3591 : vec4<f32> = u_xlat6;
    let x_3593 : vec3<f32> = ((vec3<f32>(x_3586.x, x_3586.y, x_3586.z) * vec3<f32>(x_3588, x_3588, x_3588)) + vec3<f32>(x_3591.x, x_3591.y, x_3591.z));
    let x_3594 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3593.x, x_3593.y, x_3593.z, x_3594.w);
    let x_3596 : vec4<f32> = u_xlat9;
    let x_3598 : vec4<f32> = u_xlat9;
    u_xlat66 = dot(vec3<f32>(x_3596.x, x_3596.y, x_3596.z), vec3<f32>(x_3598.x, x_3598.y, x_3598.z));
    let x_3601 : f32 = u_xlat66;
    u_xlat66 = max(x_3601, 1.17549435e-37f);
    let x_3603 : f32 = u_xlat66;
    u_xlat66 = inverseSqrt(x_3603);
    let x_3605 : f32 = u_xlat66;
    let x_3607 : vec4<f32> = u_xlat9;
    let x_3609 : vec3<f32> = (vec3<f32>(x_3605, x_3605, x_3605) * vec3<f32>(x_3607.x, x_3607.y, x_3607.z));
    let x_3610 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3609.x, x_3609.y, x_3609.z, x_3610.w);
    let x_3612 : vec4<f32> = u_xlat5;
    let x_3614 : vec4<f32> = u_xlat9;
    u_xlat66 = dot(vec3<f32>(x_3612.x, x_3612.y, x_3612.z), vec3<f32>(x_3614.x, x_3614.y, x_3614.z));
    let x_3617 : f32 = u_xlat66;
    u_xlat66 = clamp(x_3617, 0.0f, 1.0f);
    let x_3619 : vec4<f32> = u_xlat10;
    let x_3621 : vec4<f32> = u_xlat9;
    u_xlat4.x = dot(vec3<f32>(x_3619.x, x_3619.y, x_3619.z), vec3<f32>(x_3621.x, x_3621.y, x_3621.z));
    let x_3626 : f32 = u_xlat4.x;
    u_xlat4.x = clamp(x_3626, 0.0f, 1.0f);
    let x_3629 : f32 = u_xlat66;
    let x_3630 : f32 = u_xlat66;
    u_xlat66 = (x_3629 * x_3630);
    let x_3632 : f32 = u_xlat66;
    let x_3634 : f32 = u_xlat22.x;
    u_xlat66 = ((x_3632 * x_3634) + 1.000010014f);
    let x_3638 : f32 = u_xlat4.x;
    let x_3640 : f32 = u_xlat4.x;
    u_xlat4.x = (x_3638 * x_3640);
    let x_3643 : f32 = u_xlat66;
    let x_3644 : f32 = u_xlat66;
    u_xlat66 = (x_3643 * x_3644);
    let x_3647 : f32 = u_xlat4.x;
    u_xlat4.x = max(x_3647, 0.100000001f);
    let x_3650 : f32 = u_xlat66;
    let x_3652 : f32 = u_xlat4.x;
    u_xlat66 = (x_3650 * x_3652);
    let x_3655 : f32 = u_xlat25.x;
    let x_3656 : f32 = u_xlat66;
    u_xlat66 = (x_3655 * x_3656);
    let x_3658 : f32 = u_xlat65;
    let x_3659 : f32 = u_xlat66;
    u_xlat66 = (x_3658 / x_3659);
    let x_3661 : f32 = u_xlat66;
    let x_3664 : vec3<f32> = u_xlat2;
    let x_3665 : vec3<f32> = ((vec3<f32>(x_3661, x_3661, x_3661) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3664);
    let x_3666 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3665.x, x_3665.y, x_3665.z, x_3666.w);
    let x_3668 : vec4<f32> = u_xlat9;
    let x_3670 : vec4<f32> = u_xlat11;
    let x_3673 : vec4<f32> = u_xlat8;
    let x_3675 : vec3<f32> = ((vec3<f32>(x_3668.x, x_3668.y, x_3668.z) * vec3<f32>(x_3670.x, x_3670.y, x_3670.z)) + vec3<f32>(x_3673.x, x_3673.y, x_3673.z));
    let x_3676 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3675.x, x_3675.y, x_3675.z, x_3676.w);

    continuing {
      let x_3678 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3678 + bitcast<u32>(1i));
    }
  }
  let x_3680 : vec4<f32> = u_xlat3;
  let x_3682 : f32 = u_xlat46;
  let x_3685 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_3680.x, x_3680.y, x_3680.z) * vec3<f32>(x_3682, x_3682, x_3682)) + vec3<f32>(x_3685.x, x_3685.y, x_3685.z));
  let x_3688 : vec4<f32> = u_xlat8;
  let x_3690 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3688.x, x_3688.y, x_3688.z) + x_3690);
  let x_3694 : vec4<f32> = vs_INTERP4;
  let x_3696 : vec3<f32> = u_xlat0;
  let x_3698 : vec3<f32> = u_xlat2;
  let x_3699 : vec3<f32> = ((vec3<f32>(x_3694.w, x_3694.w, x_3694.w) * x_3696) + x_3698);
  let x_3700 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3699.x, x_3699.y, x_3699.z, x_3700.w);
  let x_3702 : bool = u_xlatb43;
  if (x_3702) {
    let x_3707 : f32 = u_xlat1.x;
    x_3703 = x_3707;
  } else {
    x_3703 = 1.0f;
  }
  let x_3709 : f32 = x_3703;
  SV_Target0.w = x_3709;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

