struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3182 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3631 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3759 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1689 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatb8 : vec2<bool>;
  var x_3266 : f32;
  var x_3278 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var u_xlati69 : i32;
  var u_xlati50 : i32;
  var u_xlat54 : vec2<f32>;
  var u_xlatb50 : vec2<bool>;
  var x_4051 : f32;
  var x_4064 : f32;
  var x_4116 : f32;
  var x_4127 : vec3<f32>;
  var x_4310 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1659 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1659 == 0.0f);
  let x_1662 : vec3<f32> = vs_INTERP0;
  let x_1666 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1662) + x_1666);
  let x_1668 : vec3<f32> = u_xlat25;
  let x_1669 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1668, x_1669);
  let x_1671 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1671);
  let x_1673 : f32 = u_xlat64;
  let x_1675 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1673, x_1673, x_1673) * x_1675);
  let x_1679 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat5.x = x_1679;
  let x_1682 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat5.y = x_1682;
  let x_1685 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat5.z = x_1685;
  let x_1688 : bool = u_xlatb22.x;
  if (x_1688) {
    let x_1692 : vec3<f32> = u_xlat25;
    x_1689 = x_1692;
  } else {
    let x_1694 : vec4<f32> = u_xlat5;
    x_1689 = vec3<f32>(x_1694.x, x_1694.y, x_1694.z);
  }
  let x_1696 : vec3<f32> = x_1689;
  u_xlat25 = x_1696;
  let x_1698 : f32 = vs_INTERP0.y;
  let x_1700 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat22.x = (x_1698 * x_1700);
  let x_1704 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1706 : f32 = vs_INTERP0.x;
  let x_1709 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1704 * x_1706) + x_1709);
  let x_1713 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1715 : f32 = vs_INTERP0.z;
  let x_1718 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1713 * x_1715) + x_1718);
  let x_1722 : f32 = u_xlat22.x;
  let x_1724 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat22.x = (x_1722 + x_1724);
  let x_1728 : f32 = u_xlat22.x;
  let x_1732 : f32 = x_66.x_ProjectionParams.y;
  u_xlat22.x = (-(x_1728) + -(x_1732));
  let x_1737 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_1737, 0.0f);
  let x_1741 : f32 = u_xlat22.x;
  let x_1744 : f32 = x_66.unity_FogParams.x;
  u_xlat22.x = (x_1741 * x_1744);
  let x_1754 : vec2<f32> = vs_INTERP5;
  let x_1756 : f32 = x_66.x_GlobalMipBias.x;
  let x_1757 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1754, x_1756);
  u_xlat5 = x_1757;
  let x_1762 : vec2<f32> = vs_INTERP5;
  let x_1764 : f32 = x_66.x_GlobalMipBias.x;
  let x_1765 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1762, x_1764);
  let x_1766 : vec3<f32> = vec3<f32>(x_1765.x, x_1765.y, x_1765.z);
  let x_1767 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1766.x, x_1766.y, x_1766.z, x_1767.w);
  let x_1769 : vec4<f32> = u_xlat5;
  let x_1772 : vec3<f32> = (vec3<f32>(x_1769.x, x_1769.y, x_1769.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1773 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1772.x, x_1772.y, x_1772.z, x_1773.w);
  let x_1775 : vec3<f32> = u_xlat24;
  let x_1776 : vec4<f32> = u_xlat5;
  u_xlat64 = dot(x_1775, vec3<f32>(x_1776.x, x_1776.y, x_1776.z));
  let x_1779 : f32 = u_xlat64;
  u_xlat64 = (x_1779 + 0.5f);
  let x_1781 : f32 = u_xlat64;
  let x_1783 : vec4<f32> = u_xlat6;
  let x_1785 : vec3<f32> = (vec3<f32>(x_1781, x_1781, x_1781) * vec3<f32>(x_1783.x, x_1783.y, x_1783.z));
  let x_1786 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1785.x, x_1785.y, x_1785.z, x_1786.w);
  let x_1789 : f32 = u_xlat5.w;
  u_xlat64 = max(x_1789, 0.0001f);
  let x_1791 : vec4<f32> = u_xlat5;
  let x_1793 : f32 = u_xlat64;
  let x_1795 : vec3<f32> = (vec3<f32>(x_1791.x, x_1791.y, x_1791.z) / vec3<f32>(x_1793, x_1793, x_1793));
  let x_1796 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1795.x, x_1795.y, x_1795.z, x_1796.w);
  let x_1799 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1800 : vec2<f32> = vec2<f32>(x_1799.x, x_1799.y);
  let x_1804 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1800.x, x_1800.y));
  let x_1805 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1804.x, x_1804.y, x_1805.z, x_1805.w);
  let x_1807 : vec4<f32> = u_xlat6;
  let x_1809 : vec4<f32> = hlslcc_FragCoord;
  let x_1811 : vec2<f32> = (vec2<f32>(x_1807.x, x_1807.y) * vec2<f32>(x_1809.x, x_1809.y));
  let x_1812 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1811.x, x_1811.y, x_1812.z, x_1812.w);
  let x_1815 : f32 = u_xlat6.y;
  let x_1818 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1821 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1815 * x_1818) + x_1821);
  let x_1823 : f32 = u_xlat64;
  u_xlat6.z = (-(x_1823) + 1.0f);
  let x_1828 : f32 = u_xlat3.x;
  u_xlat3.x = x_1828;
  let x_1831 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1831, 0.0f, 1.0f);
  let x_1835 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1835, 1.0f);
  let x_1838 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1838 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1843 : f32 = u_xlat3.x;
  u_xlat64 = (-(x_1843) + 1.0f);
  let x_1846 : f32 = u_xlat64;
  let x_1847 : f32 = u_xlat64;
  u_xlat65 = (x_1846 * x_1847);
  let x_1849 : f32 = u_xlat65;
  u_xlat65 = max(x_1849, 0.0078125f);
  let x_1853 : f32 = u_xlat65;
  let x_1854 : f32 = u_xlat65;
  u_xlat68 = (x_1853 * x_1854);
  let x_1857 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1857 + 0.040000021f);
  let x_1862 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1862, 1.0f);
  let x_1865 : f32 = u_xlat65;
  u_xlat27.x = ((x_1865 * 4.0f) + 2.0f);
  let x_1875 : vec4<f32> = u_xlat6;
  let x_1878 : f32 = x_66.x_GlobalMipBias.x;
  let x_1879 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1875.x, x_1875.z), x_1878);
  u_xlat6.x = x_1879.x;
  let x_1884 : f32 = u_xlat6.x;
  u_xlat48 = (x_1884 + -1.0f);
  let x_1888 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1889 : f32 = u_xlat48;
  u_xlat48 = ((x_1888 * x_1889) + 1.0f);
  let x_1893 : f32 = u_xlat6.x;
  let x_1895 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1893, x_1895);
  let x_1898 : bool = u_xlatb63;
  if (x_1898) {
    let x_1902 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1902 == 1.0f);
    let x_1904 : bool = u_xlatb63;
    if (x_1904) {
      let x_1908 : vec4<f32> = vs_INTERP9;
      let x_1911 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1908.x, x_1908.y, x_1908.x, x_1908.y) + x_1911);
      let x_1914 : vec4<f32> = u_xlat7;
      let x_1915 : vec2<f32> = vec2<f32>(x_1914.x, x_1914.y);
      let x_1917 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1915.x, x_1915.y, x_1917);
      let x_1924 : vec3<f32> = txVec30;
      let x_1926 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1924.xy, x_1924.z);
      u_xlat8.x = x_1926;
      let x_1929 : vec4<f32> = u_xlat7;
      let x_1930 : vec2<f32> = vec2<f32>(x_1929.z, x_1929.w);
      let x_1932 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1930.x, x_1930.y, x_1932);
      let x_1939 : vec3<f32> = txVec31;
      let x_1941 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1939.xy, x_1939.z);
      u_xlat8.y = x_1941;
      let x_1943 : vec4<f32> = vs_INTERP9;
      let x_1946 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1943.x, x_1943.y, x_1943.x, x_1943.y) + x_1946);
      let x_1949 : vec4<f32> = u_xlat7;
      let x_1950 : vec2<f32> = vec2<f32>(x_1949.x, x_1949.y);
      let x_1952 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1950.x, x_1950.y, x_1952);
      let x_1959 : vec3<f32> = txVec32;
      let x_1961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1959.xy, x_1959.z);
      u_xlat8.z = x_1961;
      let x_1964 : vec4<f32> = u_xlat7;
      let x_1965 : vec2<f32> = vec2<f32>(x_1964.z, x_1964.w);
      let x_1967 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1965.x, x_1965.y, x_1967);
      let x_1974 : vec3<f32> = txVec33;
      let x_1976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1974.xy, x_1974.z);
      u_xlat8.w = x_1976;
      let x_1978 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1978, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1983 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb69 = (x_1983 == 2.0f);
      let x_1985 : bool = u_xlatb69;
      if (x_1985) {
        let x_1988 : vec4<f32> = vs_INTERP9;
        let x_1991 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1994 : vec2<f32> = ((vec2<f32>(x_1988.x, x_1988.y) * vec2<f32>(x_1991.z, x_1991.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1995 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1994.x, x_1994.y, x_1995.z, x_1995.w);
        let x_1997 : vec4<f32> = u_xlat7;
        let x_1999 : vec2<f32> = floor(vec2<f32>(x_1997.x, x_1997.y));
        let x_2000 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1999.x, x_1999.y, x_2000.z, x_2000.w);
        let x_2002 : vec4<f32> = vs_INTERP9;
        let x_2005 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2008 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2002.x, x_2002.y) * vec2<f32>(x_2005.z, x_2005.w)) + -(vec2<f32>(x_2008.x, x_2008.y)));
        let x_2012 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2012.x, x_2012.x, x_2012.y, x_2012.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2015 : vec4<f32> = u_xlat8;
        let x_2017 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2015.x, x_2015.x, x_2015.z, x_2015.z) * vec4<f32>(x_2017.x, x_2017.x, x_2017.z, x_2017.z));
        let x_2020 : vec4<f32> = u_xlat9;
        let x_2022 : vec2<f32> = (vec2<f32>(x_2020.y, x_2020.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2023 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2022.x, x_2023.y, x_2022.y, x_2023.w);
        let x_2025 : vec4<f32> = u_xlat9;
        let x_2028 : vec2<f32> = u_xlat49;
        let x_2030 : vec2<f32> = ((vec2<f32>(x_2025.x, x_2025.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2028));
        let x_2031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2030.x, x_2030.y, x_2031.z, x_2031.w);
        let x_2034 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2034) + vec2<f32>(1.0f, 1.0f));
        let x_2037 : vec2<f32> = u_xlat49;
        let x_2038 : vec2<f32> = min(x_2037, vec2<f32>(0.0f, 0.0f));
        let x_2039 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2038.x, x_2038.y, x_2039.z, x_2039.w);
        let x_2041 : vec4<f32> = u_xlat10;
        let x_2044 : vec4<f32> = u_xlat10;
        let x_2047 : vec2<f32> = u_xlat51;
        let x_2048 : vec2<f32> = ((-(vec2<f32>(x_2041.x, x_2041.y)) * vec2<f32>(x_2044.x, x_2044.y)) + x_2047);
        let x_2049 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2048.x, x_2048.y, x_2049.z, x_2049.w);
        let x_2051 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2051, vec2<f32>(0.0f, 0.0f));
        let x_2053 : vec2<f32> = u_xlat49;
        let x_2055 : vec2<f32> = u_xlat49;
        let x_2057 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2053) * x_2055) + vec2<f32>(x_2057.y, x_2057.w));
        let x_2060 : vec4<f32> = u_xlat10;
        let x_2062 : vec2<f32> = (vec2<f32>(x_2060.x, x_2060.y) + vec2<f32>(1.0f, 1.0f));
        let x_2063 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2062.x, x_2062.y, x_2063.z, x_2063.w);
        let x_2065 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2065 + vec2<f32>(1.0f, 1.0f));
        let x_2067 : vec4<f32> = u_xlat9;
        let x_2069 : vec2<f32> = (vec2<f32>(x_2067.x, x_2067.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2070 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2069.x, x_2069.y, x_2070.z, x_2070.w);
        let x_2072 : vec2<f32> = u_xlat51;
        let x_2073 : vec2<f32> = (x_2072 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2074 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2073.x, x_2073.y, x_2074.z, x_2074.w);
        let x_2076 : vec4<f32> = u_xlat10;
        let x_2078 : vec2<f32> = (vec2<f32>(x_2076.x, x_2076.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2079 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2078.x, x_2078.y, x_2079.z, x_2079.w);
        let x_2081 : vec2<f32> = u_xlat49;
        let x_2082 : vec2<f32> = (x_2081 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2083 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2082.x, x_2082.y, x_2083.z, x_2083.w);
        let x_2085 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2085.y, x_2085.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2089 : f32 = u_xlat10.x;
        u_xlat11.z = x_2089;
        let x_2092 : f32 = u_xlat49.x;
        u_xlat11.w = x_2092;
        let x_2095 : f32 = u_xlat12.x;
        u_xlat9.z = x_2095;
        let x_2098 : f32 = u_xlat8.x;
        u_xlat9.w = x_2098;
        let x_2100 : vec4<f32> = u_xlat9;
        let x_2102 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2100.z, x_2100.w, x_2100.x, x_2100.z) + vec4<f32>(x_2102.z, x_2102.w, x_2102.x, x_2102.z));
        let x_2106 : f32 = u_xlat11.y;
        u_xlat10.z = x_2106;
        let x_2109 : f32 = u_xlat49.y;
        u_xlat10.w = x_2109;
        let x_2112 : f32 = u_xlat9.y;
        u_xlat12.z = x_2112;
        let x_2115 : f32 = u_xlat8.z;
        u_xlat12.w = x_2115;
        let x_2117 : vec4<f32> = u_xlat10;
        let x_2119 : vec4<f32> = u_xlat12;
        let x_2121 : vec3<f32> = (vec3<f32>(x_2117.z, x_2117.y, x_2117.w) + vec3<f32>(x_2119.z, x_2119.y, x_2119.w));
        let x_2122 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2121.x, x_2121.y, x_2121.z, x_2122.w);
        let x_2124 : vec4<f32> = u_xlat9;
        let x_2126 : vec4<f32> = u_xlat13;
        let x_2128 : vec3<f32> = (vec3<f32>(x_2124.x, x_2124.z, x_2124.w) / vec3<f32>(x_2126.z, x_2126.w, x_2126.y));
        let x_2129 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2128.x, x_2128.y, x_2128.z, x_2129.w);
        let x_2131 : vec4<f32> = u_xlat9;
        let x_2133 : vec3<f32> = (vec3<f32>(x_2131.x, x_2131.y, x_2131.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2134 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2133.x, x_2133.y, x_2133.z, x_2134.w);
        let x_2136 : vec4<f32> = u_xlat12;
        let x_2138 : vec4<f32> = u_xlat8;
        let x_2140 : vec3<f32> = (vec3<f32>(x_2136.z, x_2136.y, x_2136.w) / vec3<f32>(x_2138.x, x_2138.y, x_2138.z));
        let x_2141 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2140.x, x_2140.y, x_2140.z, x_2141.w);
        let x_2143 : vec4<f32> = u_xlat10;
        let x_2145 : vec3<f32> = (vec3<f32>(x_2143.x, x_2143.y, x_2143.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2146 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2145.x, x_2145.y, x_2145.z, x_2146.w);
        let x_2148 : vec4<f32> = u_xlat9;
        let x_2151 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2153 : vec3<f32> = (vec3<f32>(x_2148.y, x_2148.x, x_2148.z) * vec3<f32>(x_2151.x, x_2151.x, x_2151.x));
        let x_2154 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2153.x, x_2153.y, x_2153.z, x_2154.w);
        let x_2156 : vec4<f32> = u_xlat10;
        let x_2159 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2161 : vec3<f32> = (vec3<f32>(x_2156.x, x_2156.y, x_2156.z) * vec3<f32>(x_2159.y, x_2159.y, x_2159.y));
        let x_2162 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2161.x, x_2161.y, x_2161.z, x_2162.w);
        let x_2165 : f32 = u_xlat10.x;
        u_xlat9.w = x_2165;
        let x_2167 : vec4<f32> = u_xlat7;
        let x_2170 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2173 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2167.x, x_2167.y, x_2167.x, x_2167.y) * vec4<f32>(x_2170.x, x_2170.y, x_2170.x, x_2170.y)) + vec4<f32>(x_2173.y, x_2173.w, x_2173.x, x_2173.w));
        let x_2176 : vec4<f32> = u_xlat7;
        let x_2179 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2182 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2176.x, x_2176.y) * vec2<f32>(x_2179.x, x_2179.y)) + vec2<f32>(x_2182.z, x_2182.w));
        let x_2186 : f32 = u_xlat9.y;
        u_xlat10.w = x_2186;
        let x_2188 : vec4<f32> = u_xlat10;
        let x_2189 : vec2<f32> = vec2<f32>(x_2188.y, x_2188.z);
        let x_2190 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2190.x, x_2189.x, x_2190.z, x_2189.y);
        let x_2192 : vec4<f32> = u_xlat7;
        let x_2195 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2198 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2192.x, x_2192.y, x_2192.x, x_2192.y) * vec4<f32>(x_2195.x, x_2195.y, x_2195.x, x_2195.y)) + vec4<f32>(x_2198.x, x_2198.y, x_2198.z, x_2198.y));
        let x_2201 : vec4<f32> = u_xlat7;
        let x_2204 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2207 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2201.x, x_2201.y, x_2201.x, x_2201.y) * vec4<f32>(x_2204.x, x_2204.y, x_2204.x, x_2204.y)) + vec4<f32>(x_2207.w, x_2207.y, x_2207.w, x_2207.z));
        let x_2210 : vec4<f32> = u_xlat7;
        let x_2213 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2216 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2210.x, x_2210.y, x_2210.x, x_2210.y) * vec4<f32>(x_2213.x, x_2213.y, x_2213.x, x_2213.y)) + vec4<f32>(x_2216.x, x_2216.w, x_2216.z, x_2216.w));
        let x_2219 : vec4<f32> = u_xlat8;
        let x_2221 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2219.x, x_2219.x, x_2219.x, x_2219.y) * vec4<f32>(x_2221.z, x_2221.w, x_2221.y, x_2221.z));
        let x_2224 : vec4<f32> = u_xlat8;
        let x_2226 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2224.y, x_2224.y, x_2224.z, x_2224.z) * x_2226);
        let x_2230 : f32 = u_xlat8.z;
        let x_2232 : f32 = u_xlat13.y;
        u_xlat69 = (x_2230 * x_2232);
        let x_2235 : vec4<f32> = u_xlat11;
        let x_2236 : vec2<f32> = vec2<f32>(x_2235.x, x_2235.y);
        let x_2238 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2236.x, x_2236.y, x_2238);
        let x_2245 : vec3<f32> = txVec34;
        let x_2247 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2245.xy, x_2245.z);
        u_xlat7.x = x_2247;
        let x_2250 : vec4<f32> = u_xlat11;
        let x_2251 : vec2<f32> = vec2<f32>(x_2250.z, x_2250.w);
        let x_2253 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2251.x, x_2251.y, x_2253);
        let x_2260 : vec3<f32> = txVec35;
        let x_2262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2260.xy, x_2260.z);
        u_xlat28.x = x_2262;
        let x_2265 : f32 = u_xlat28.x;
        let x_2267 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2265 * x_2267);
        let x_2271 : f32 = u_xlat14.x;
        let x_2273 : f32 = u_xlat7.x;
        let x_2276 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2271 * x_2273) + x_2276);
        let x_2280 : vec2<f32> = u_xlat49;
        let x_2282 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2280.x, x_2280.y, x_2282);
        let x_2289 : vec3<f32> = txVec36;
        let x_2291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2289.xy, x_2289.z);
        u_xlat28.x = x_2291;
        let x_2294 : f32 = u_xlat14.z;
        let x_2296 : f32 = u_xlat28.x;
        let x_2299 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2294 * x_2296) + x_2299);
        let x_2303 : vec4<f32> = u_xlat10;
        let x_2304 : vec2<f32> = vec2<f32>(x_2303.x, x_2303.y);
        let x_2306 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2304.x, x_2304.y, x_2306);
        let x_2313 : vec3<f32> = txVec37;
        let x_2315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2313.xy, x_2313.z);
        u_xlat28.x = x_2315;
        let x_2318 : f32 = u_xlat14.w;
        let x_2320 : f32 = u_xlat28.x;
        let x_2323 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2318 * x_2320) + x_2323);
        let x_2327 : vec4<f32> = u_xlat12;
        let x_2328 : vec2<f32> = vec2<f32>(x_2327.x, x_2327.y);
        let x_2330 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2328.x, x_2328.y, x_2330);
        let x_2337 : vec3<f32> = txVec38;
        let x_2339 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2337.xy, x_2337.z);
        u_xlat28.x = x_2339;
        let x_2342 : f32 = u_xlat15.x;
        let x_2344 : f32 = u_xlat28.x;
        let x_2347 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2342 * x_2344) + x_2347);
        let x_2351 : vec4<f32> = u_xlat12;
        let x_2352 : vec2<f32> = vec2<f32>(x_2351.z, x_2351.w);
        let x_2354 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2352.x, x_2352.y, x_2354);
        let x_2361 : vec3<f32> = txVec39;
        let x_2363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2361.xy, x_2361.z);
        u_xlat28.x = x_2363;
        let x_2366 : f32 = u_xlat15.y;
        let x_2368 : f32 = u_xlat28.x;
        let x_2371 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2366 * x_2368) + x_2371);
        let x_2375 : vec4<f32> = u_xlat10;
        let x_2376 : vec2<f32> = vec2<f32>(x_2375.z, x_2375.w);
        let x_2378 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2376.x, x_2376.y, x_2378);
        let x_2385 : vec3<f32> = txVec40;
        let x_2387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2385.xy, x_2385.z);
        u_xlat28.x = x_2387;
        let x_2390 : f32 = u_xlat15.z;
        let x_2392 : f32 = u_xlat28.x;
        let x_2395 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2390 * x_2392) + x_2395);
        let x_2399 : vec4<f32> = u_xlat9;
        let x_2400 : vec2<f32> = vec2<f32>(x_2399.x, x_2399.y);
        let x_2402 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2400.x, x_2400.y, x_2402);
        let x_2409 : vec3<f32> = txVec41;
        let x_2411 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2409.xy, x_2409.z);
        u_xlat28.x = x_2411;
        let x_2414 : f32 = u_xlat15.w;
        let x_2416 : f32 = u_xlat28.x;
        let x_2419 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2414 * x_2416) + x_2419);
        let x_2423 : vec4<f32> = u_xlat9;
        let x_2424 : vec2<f32> = vec2<f32>(x_2423.z, x_2423.w);
        let x_2426 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2424.x, x_2424.y, x_2426);
        let x_2433 : vec3<f32> = txVec42;
        let x_2435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2433.xy, x_2433.z);
        u_xlat28.x = x_2435;
        let x_2437 : f32 = u_xlat69;
        let x_2439 : f32 = u_xlat28.x;
        let x_2442 : f32 = u_xlat7.x;
        u_xlat63 = ((x_2437 * x_2439) + x_2442);
      } else {
        let x_2445 : vec4<f32> = vs_INTERP9;
        let x_2448 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2451 : vec2<f32> = ((vec2<f32>(x_2445.x, x_2445.y) * vec2<f32>(x_2448.z, x_2448.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2452 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2451.x, x_2451.y, x_2452.z, x_2452.w);
        let x_2454 : vec4<f32> = u_xlat7;
        let x_2456 : vec2<f32> = floor(vec2<f32>(x_2454.x, x_2454.y));
        let x_2457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2456.x, x_2456.y, x_2457.z, x_2457.w);
        let x_2459 : vec4<f32> = vs_INTERP9;
        let x_2462 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2465 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2459.x, x_2459.y) * vec2<f32>(x_2462.z, x_2462.w)) + -(vec2<f32>(x_2465.x, x_2465.y)));
        let x_2469 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2469.x, x_2469.x, x_2469.y, x_2469.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2472 : vec4<f32> = u_xlat8;
        let x_2474 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2472.x, x_2472.x, x_2472.z, x_2472.z) * vec4<f32>(x_2474.x, x_2474.x, x_2474.z, x_2474.z));
        let x_2477 : vec4<f32> = u_xlat9;
        let x_2479 : vec2<f32> = (vec2<f32>(x_2477.y, x_2477.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2480 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2480.x, x_2479.x, x_2480.z, x_2479.y);
        let x_2482 : vec4<f32> = u_xlat9;
        let x_2485 : vec2<f32> = u_xlat49;
        let x_2487 : vec2<f32> = ((vec2<f32>(x_2482.x, x_2482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2485));
        let x_2488 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2487.x, x_2488.y, x_2487.y, x_2488.w);
        let x_2490 : vec2<f32> = u_xlat49;
        let x_2492 : vec2<f32> = (-(x_2490) + vec2<f32>(1.0f, 1.0f));
        let x_2493 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2492.x, x_2492.y, x_2493.z, x_2493.w);
        let x_2495 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2495, vec2<f32>(0.0f, 0.0f));
        let x_2497 : vec2<f32> = u_xlat51;
        let x_2499 : vec2<f32> = u_xlat51;
        let x_2501 : vec4<f32> = u_xlat9;
        let x_2503 : vec2<f32> = ((-(x_2497) * x_2499) + vec2<f32>(x_2501.x, x_2501.y));
        let x_2504 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2503.x, x_2503.y, x_2504.z, x_2504.w);
        let x_2506 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2506, vec2<f32>(0.0f, 0.0f));
        let x_2509 : vec2<f32> = u_xlat51;
        let x_2511 : vec2<f32> = u_xlat51;
        let x_2513 : vec4<f32> = u_xlat8;
        let x_2515 : vec2<f32> = ((-(x_2509) * x_2511) + vec2<f32>(x_2513.y, x_2513.w));
        let x_2516 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2515.x, x_2516.y, x_2515.y);
        let x_2518 : vec4<f32> = u_xlat9;
        let x_2520 : vec2<f32> = (vec2<f32>(x_2518.x, x_2518.y) + vec2<f32>(2.0f, 2.0f));
        let x_2521 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2520.x, x_2520.y, x_2521.z, x_2521.w);
        let x_2523 : vec3<f32> = u_xlat29;
        let x_2525 : vec2<f32> = (vec2<f32>(x_2523.x, x_2523.z) + vec2<f32>(2.0f, 2.0f));
        let x_2526 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2526.x, x_2525.x, x_2526.z, x_2525.y);
        let x_2529 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2529 * 0.081632003f);
        let x_2532 : vec4<f32> = u_xlat8;
        let x_2534 : vec3<f32> = (vec3<f32>(x_2532.z, x_2532.x, x_2532.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2535 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2534.x, x_2534.y, x_2534.z, x_2535.w);
        let x_2537 : vec4<f32> = u_xlat9;
        let x_2539 : vec2<f32> = (vec2<f32>(x_2537.x, x_2537.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2540 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2539.x, x_2539.y, x_2540.z, x_2540.w);
        let x_2543 : f32 = u_xlat12.y;
        u_xlat11.x = x_2543;
        let x_2545 : vec2<f32> = u_xlat49;
        let x_2548 : vec2<f32> = ((vec2<f32>(x_2545.x, x_2545.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2549 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2549.x, x_2548.x, x_2549.z, x_2548.y);
        let x_2551 : vec2<f32> = u_xlat49;
        let x_2554 : vec2<f32> = ((vec2<f32>(x_2551.x, x_2551.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2554.x, x_2555.y, x_2554.y, x_2555.w);
        let x_2558 : f32 = u_xlat8.x;
        u_xlat9.y = x_2558;
        let x_2561 : f32 = u_xlat10.y;
        u_xlat9.w = x_2561;
        let x_2563 : vec4<f32> = u_xlat9;
        let x_2564 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2563 + x_2564);
        let x_2566 : vec2<f32> = u_xlat49;
        let x_2569 : vec2<f32> = ((vec2<f32>(x_2566.y, x_2566.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2570 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2570.x, x_2569.x, x_2570.z, x_2569.y);
        let x_2572 : vec2<f32> = u_xlat49;
        let x_2575 : vec2<f32> = ((vec2<f32>(x_2572.y, x_2572.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2576 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2575.x, x_2576.y, x_2575.y, x_2576.w);
        let x_2579 : f32 = u_xlat8.y;
        u_xlat10.y = x_2579;
        let x_2581 : vec4<f32> = u_xlat10;
        let x_2582 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2581 + x_2582);
        let x_2584 : vec4<f32> = u_xlat9;
        let x_2585 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2584 / x_2585);
        let x_2587 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2587 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2589 : vec4<f32> = u_xlat10;
        let x_2590 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2589 / x_2590);
        let x_2592 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2592 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2594 : vec4<f32> = u_xlat9;
        let x_2597 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2594.w, x_2594.x, x_2594.y, x_2594.z) * vec4<f32>(x_2597.x, x_2597.x, x_2597.x, x_2597.x));
        let x_2600 : vec4<f32> = u_xlat10;
        let x_2603 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2600.x, x_2600.w, x_2600.y, x_2600.z) * vec4<f32>(x_2603.y, x_2603.y, x_2603.y, x_2603.y));
        let x_2606 : vec4<f32> = u_xlat9;
        let x_2607 : vec3<f32> = vec3<f32>(x_2606.y, x_2606.z, x_2606.w);
        let x_2608 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2607.x, x_2608.y, x_2607.y, x_2607.z);
        let x_2611 : f32 = u_xlat10.x;
        u_xlat12.y = x_2611;
        let x_2613 : vec4<f32> = u_xlat7;
        let x_2616 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2619 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2613.x, x_2613.y, x_2613.x, x_2613.y) * vec4<f32>(x_2616.x, x_2616.y, x_2616.x, x_2616.y)) + vec4<f32>(x_2619.x, x_2619.y, x_2619.z, x_2619.y));
        let x_2622 : vec4<f32> = u_xlat7;
        let x_2625 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2628 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2622.x, x_2622.y) * vec2<f32>(x_2625.x, x_2625.y)) + vec2<f32>(x_2628.w, x_2628.y));
        let x_2632 : f32 = u_xlat12.y;
        u_xlat9.y = x_2632;
        let x_2635 : f32 = u_xlat10.z;
        u_xlat12.y = x_2635;
        let x_2637 : vec4<f32> = u_xlat7;
        let x_2640 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2643 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2637.x, x_2637.y, x_2637.x, x_2637.y) * vec4<f32>(x_2640.x, x_2640.y, x_2640.x, x_2640.y)) + vec4<f32>(x_2643.x, x_2643.y, x_2643.z, x_2643.y));
        let x_2646 : vec4<f32> = u_xlat7;
        let x_2649 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2652 : vec4<f32> = u_xlat12;
        let x_2654 : vec2<f32> = ((vec2<f32>(x_2646.x, x_2646.y) * vec2<f32>(x_2649.x, x_2649.y)) + vec2<f32>(x_2652.w, x_2652.y));
        let x_2655 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2654.x, x_2654.y, x_2655.z, x_2655.w);
        let x_2658 : f32 = u_xlat12.y;
        u_xlat9.z = x_2658;
        let x_2660 : vec4<f32> = u_xlat7;
        let x_2663 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2666 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2660.x, x_2660.y, x_2660.x, x_2660.y) * vec4<f32>(x_2663.x, x_2663.y, x_2663.x, x_2663.y)) + vec4<f32>(x_2666.x, x_2666.y, x_2666.x, x_2666.z));
        let x_2670 : f32 = u_xlat10.w;
        u_xlat12.y = x_2670;
        let x_2672 : vec4<f32> = u_xlat7;
        let x_2675 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2678 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2672.x, x_2672.y, x_2672.x, x_2672.y) * vec4<f32>(x_2675.x, x_2675.y, x_2675.x, x_2675.y)) + vec4<f32>(x_2678.x, x_2678.y, x_2678.z, x_2678.y));
        let x_2682 : vec4<f32> = u_xlat7;
        let x_2685 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2688 : vec4<f32> = u_xlat12;
        let x_2690 : vec2<f32> = ((vec2<f32>(x_2682.x, x_2682.y) * vec2<f32>(x_2685.x, x_2685.y)) + vec2<f32>(x_2688.w, x_2688.y));
        let x_2691 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2690.x, x_2690.y, x_2691.z);
        let x_2694 : f32 = u_xlat12.y;
        u_xlat9.w = x_2694;
        let x_2697 : vec4<f32> = u_xlat7;
        let x_2700 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2703 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2697.x, x_2697.y) * vec2<f32>(x_2700.x, x_2700.y)) + vec2<f32>(x_2703.x, x_2703.w));
        let x_2706 : vec4<f32> = u_xlat12;
        let x_2707 : vec3<f32> = vec3<f32>(x_2706.x, x_2706.z, x_2706.w);
        let x_2708 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2707.x, x_2708.y, x_2707.y, x_2707.z);
        let x_2710 : vec4<f32> = u_xlat7;
        let x_2713 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2716 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2710.x, x_2710.y, x_2710.x, x_2710.y) * vec4<f32>(x_2713.x, x_2713.y, x_2713.x, x_2713.y)) + vec4<f32>(x_2716.x, x_2716.y, x_2716.z, x_2716.y));
        let x_2720 : vec4<f32> = u_xlat7;
        let x_2723 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2726 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2720.x, x_2720.y) * vec2<f32>(x_2723.x, x_2723.y)) + vec2<f32>(x_2726.w, x_2726.y));
        let x_2730 : f32 = u_xlat9.x;
        u_xlat10.x = x_2730;
        let x_2732 : vec4<f32> = u_xlat7;
        let x_2735 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2738 : vec4<f32> = u_xlat10;
        let x_2740 : vec2<f32> = ((vec2<f32>(x_2732.x, x_2732.y) * vec2<f32>(x_2735.x, x_2735.y)) + vec2<f32>(x_2738.x, x_2738.y));
        let x_2741 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2740.x, x_2740.y, x_2741.z, x_2741.w);
        let x_2743 : vec4<f32> = u_xlat8;
        let x_2745 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2743.x, x_2743.x, x_2743.x, x_2743.x) * x_2745);
        let x_2748 : vec4<f32> = u_xlat8;
        let x_2750 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2748.y, x_2748.y, x_2748.y, x_2748.y) * x_2750);
        let x_2753 : vec4<f32> = u_xlat8;
        let x_2755 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2753.z, x_2753.z, x_2753.z, x_2753.z) * x_2755);
        let x_2757 : vec4<f32> = u_xlat8;
        let x_2759 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2757.w, x_2757.w, x_2757.w, x_2757.w) * x_2759);
        let x_2762 : vec4<f32> = u_xlat13;
        let x_2763 : vec2<f32> = vec2<f32>(x_2762.x, x_2762.y);
        let x_2765 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2763.x, x_2763.y, x_2765);
        let x_2772 : vec3<f32> = txVec43;
        let x_2774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2772.xy, x_2772.z);
        u_xlat69 = x_2774;
        let x_2776 : vec4<f32> = u_xlat13;
        let x_2777 : vec2<f32> = vec2<f32>(x_2776.z, x_2776.w);
        let x_2779 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2777.x, x_2777.y, x_2779);
        let x_2786 : vec3<f32> = txVec44;
        let x_2788 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2786.xy, x_2786.z);
        u_xlat9.x = x_2788;
        let x_2791 : f32 = u_xlat9.x;
        let x_2793 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2791 * x_2793);
        let x_2797 : f32 = u_xlat18.x;
        let x_2798 : f32 = u_xlat69;
        let x_2801 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2797 * x_2798) + x_2801);
        let x_2804 : vec2<f32> = u_xlat49;
        let x_2806 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2804.x, x_2804.y, x_2806);
        let x_2813 : vec3<f32> = txVec45;
        let x_2815 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2813.xy, x_2813.z);
        u_xlat49.x = x_2815;
        let x_2818 : f32 = u_xlat18.z;
        let x_2820 : f32 = u_xlat49.x;
        let x_2822 : f32 = u_xlat69;
        u_xlat69 = ((x_2818 * x_2820) + x_2822);
        let x_2825 : vec4<f32> = u_xlat16;
        let x_2826 : vec2<f32> = vec2<f32>(x_2825.x, x_2825.y);
        let x_2828 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2826.x, x_2826.y, x_2828);
        let x_2835 : vec3<f32> = txVec46;
        let x_2837 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2835.xy, x_2835.z);
        u_xlat49.x = x_2837;
        let x_2840 : f32 = u_xlat18.w;
        let x_2842 : f32 = u_xlat49.x;
        let x_2844 : f32 = u_xlat69;
        u_xlat69 = ((x_2840 * x_2842) + x_2844);
        let x_2847 : vec4<f32> = u_xlat14;
        let x_2848 : vec2<f32> = vec2<f32>(x_2847.x, x_2847.y);
        let x_2850 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2848.x, x_2848.y, x_2850);
        let x_2857 : vec3<f32> = txVec47;
        let x_2859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2857.xy, x_2857.z);
        u_xlat49.x = x_2859;
        let x_2862 : f32 = u_xlat19.x;
        let x_2864 : f32 = u_xlat49.x;
        let x_2866 : f32 = u_xlat69;
        u_xlat69 = ((x_2862 * x_2864) + x_2866);
        let x_2869 : vec4<f32> = u_xlat14;
        let x_2870 : vec2<f32> = vec2<f32>(x_2869.z, x_2869.w);
        let x_2872 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2870.x, x_2870.y, x_2872);
        let x_2879 : vec3<f32> = txVec48;
        let x_2881 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2879.xy, x_2879.z);
        u_xlat49.x = x_2881;
        let x_2884 : f32 = u_xlat19.y;
        let x_2886 : f32 = u_xlat49.x;
        let x_2888 : f32 = u_xlat69;
        u_xlat69 = ((x_2884 * x_2886) + x_2888);
        let x_2891 : vec4<f32> = u_xlat15;
        let x_2892 : vec2<f32> = vec2<f32>(x_2891.x, x_2891.y);
        let x_2894 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2892.x, x_2892.y, x_2894);
        let x_2901 : vec3<f32> = txVec49;
        let x_2903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2901.xy, x_2901.z);
        u_xlat49.x = x_2903;
        let x_2906 : f32 = u_xlat19.z;
        let x_2908 : f32 = u_xlat49.x;
        let x_2910 : f32 = u_xlat69;
        u_xlat69 = ((x_2906 * x_2908) + x_2910);
        let x_2913 : vec4<f32> = u_xlat16;
        let x_2914 : vec2<f32> = vec2<f32>(x_2913.z, x_2913.w);
        let x_2916 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2914.x, x_2914.y, x_2916);
        let x_2923 : vec3<f32> = txVec50;
        let x_2925 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2923.xy, x_2923.z);
        u_xlat49.x = x_2925;
        let x_2928 : f32 = u_xlat19.w;
        let x_2930 : f32 = u_xlat49.x;
        let x_2932 : f32 = u_xlat69;
        u_xlat69 = ((x_2928 * x_2930) + x_2932);
        let x_2935 : vec4<f32> = u_xlat17;
        let x_2936 : vec2<f32> = vec2<f32>(x_2935.x, x_2935.y);
        let x_2938 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2936.x, x_2936.y, x_2938);
        let x_2945 : vec3<f32> = txVec51;
        let x_2947 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2945.xy, x_2945.z);
        u_xlat49.x = x_2947;
        let x_2950 : f32 = u_xlat20.x;
        let x_2952 : f32 = u_xlat49.x;
        let x_2954 : f32 = u_xlat69;
        u_xlat69 = ((x_2950 * x_2952) + x_2954);
        let x_2957 : vec4<f32> = u_xlat17;
        let x_2958 : vec2<f32> = vec2<f32>(x_2957.z, x_2957.w);
        let x_2960 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2958.x, x_2958.y, x_2960);
        let x_2967 : vec3<f32> = txVec52;
        let x_2969 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2967.xy, x_2967.z);
        u_xlat49.x = x_2969;
        let x_2972 : f32 = u_xlat20.y;
        let x_2974 : f32 = u_xlat49.x;
        let x_2976 : f32 = u_xlat69;
        u_xlat69 = ((x_2972 * x_2974) + x_2976);
        let x_2979 : vec3<f32> = u_xlat30;
        let x_2980 : vec2<f32> = vec2<f32>(x_2979.x, x_2979.y);
        let x_2982 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2980.x, x_2980.y, x_2982);
        let x_2989 : vec3<f32> = txVec53;
        let x_2991 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2989.xy, x_2989.z);
        u_xlat49.x = x_2991;
        let x_2994 : f32 = u_xlat20.z;
        let x_2996 : f32 = u_xlat49.x;
        let x_2998 : f32 = u_xlat69;
        u_xlat69 = ((x_2994 * x_2996) + x_2998);
        let x_3001 : vec2<f32> = u_xlat57;
        let x_3003 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3001.x, x_3001.y, x_3003);
        let x_3010 : vec3<f32> = txVec54;
        let x_3012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3010.xy, x_3010.z);
        u_xlat49.x = x_3012;
        let x_3015 : f32 = u_xlat20.w;
        let x_3017 : f32 = u_xlat49.x;
        let x_3019 : f32 = u_xlat69;
        u_xlat69 = ((x_3015 * x_3017) + x_3019);
        let x_3022 : vec4<f32> = u_xlat12;
        let x_3023 : vec2<f32> = vec2<f32>(x_3022.x, x_3022.y);
        let x_3025 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3023.x, x_3023.y, x_3025);
        let x_3032 : vec3<f32> = txVec55;
        let x_3034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3032.xy, x_3032.z);
        u_xlat49.x = x_3034;
        let x_3037 : f32 = u_xlat8.x;
        let x_3039 : f32 = u_xlat49.x;
        let x_3041 : f32 = u_xlat69;
        u_xlat69 = ((x_3037 * x_3039) + x_3041);
        let x_3044 : vec4<f32> = u_xlat12;
        let x_3045 : vec2<f32> = vec2<f32>(x_3044.z, x_3044.w);
        let x_3047 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3045.x, x_3045.y, x_3047);
        let x_3054 : vec3<f32> = txVec56;
        let x_3056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3054.xy, x_3054.z);
        u_xlat49.x = x_3056;
        let x_3059 : f32 = u_xlat8.y;
        let x_3061 : f32 = u_xlat49.x;
        let x_3063 : f32 = u_xlat69;
        u_xlat69 = ((x_3059 * x_3061) + x_3063);
        let x_3066 : vec2<f32> = u_xlat52;
        let x_3068 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3066.x, x_3066.y, x_3068);
        let x_3075 : vec3<f32> = txVec57;
        let x_3077 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3075.xy, x_3075.z);
        u_xlat49.x = x_3077;
        let x_3080 : f32 = u_xlat8.z;
        let x_3082 : f32 = u_xlat49.x;
        let x_3084 : f32 = u_xlat69;
        u_xlat69 = ((x_3080 * x_3082) + x_3084);
        let x_3087 : vec4<f32> = u_xlat7;
        let x_3088 : vec2<f32> = vec2<f32>(x_3087.x, x_3087.y);
        let x_3090 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3088.x, x_3088.y, x_3090);
        let x_3097 : vec3<f32> = txVec58;
        let x_3099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3097.xy, x_3097.z);
        u_xlat7.x = x_3099;
        let x_3102 : f32 = u_xlat8.w;
        let x_3104 : f32 = u_xlat7.x;
        let x_3106 : f32 = u_xlat69;
        u_xlat63 = ((x_3102 * x_3104) + x_3106);
      }
    }
  } else {
    let x_3110 : vec4<f32> = vs_INTERP9;
    let x_3111 : vec2<f32> = vec2<f32>(x_3110.x, x_3110.y);
    let x_3113 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3111.x, x_3111.y, x_3113);
    let x_3120 : vec3<f32> = txVec59;
    let x_3122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3120.xy, x_3120.z);
    u_xlat63 = x_3122;
  }
  let x_3123 : f32 = u_xlat63;
  let x_3125 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3128 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3123 * x_3125) + x_3128);
  let x_3132 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3132);
  let x_3135 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3135 >= 1.0f);
  let x_3137 : bool = u_xlatb4;
  let x_3138 : bool = u_xlatb69;
  u_xlatb4 = (x_3137 | x_3138);
  let x_3140 : bool = u_xlatb4;
  let x_3141 : f32 = u_xlat63;
  u_xlat63 = select(x_3141, 1.0f, x_3140);
  let x_3143 : vec3<f32> = vs_INTERP0;
  let x_3145 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3147 : vec3<f32> = (x_3143 + -(x_3145));
  let x_3148 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3147.x, x_3147.y, x_3147.z, x_3148.w);
  let x_3150 : vec4<f32> = u_xlat7;
  let x_3152 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3150.x, x_3150.y, x_3150.z), vec3<f32>(x_3152.x, x_3152.y, x_3152.z));
  let x_3157 : f32 = u_xlat4.x;
  let x_3159 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3162 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3157 * x_3159) + x_3162);
  let x_3166 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3166, 0.0f, 1.0f);
  let x_3169 : f32 = u_xlat63;
  u_xlat69 = (-(x_3169) + 1.0f);
  let x_3173 : f32 = u_xlat4.x;
  let x_3174 : f32 = u_xlat69;
  let x_3176 : f32 = u_xlat63;
  u_xlat63 = ((x_3173 * x_3174) + x_3176);
  let x_3184 : f32 = x_3182.x_MainLightCookieTextureFormat;
  u_xlatb4 = !((x_3184 == -1.0f));
  let x_3186 : bool = u_xlatb4;
  if (x_3186) {
    let x_3189 : vec3<f32> = vs_INTERP0;
    let x_3192 : vec4<f32> = x_3182.x_MainLightWorldToLight[1i];
    let x_3194 : vec2<f32> = (vec2<f32>(x_3189.y, x_3189.y) * vec2<f32>(x_3192.x, x_3192.y));
    let x_3195 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3194.x, x_3194.y, x_3195.z, x_3195.w);
    let x_3198 : vec4<f32> = x_3182.x_MainLightWorldToLight[0i];
    let x_3200 : vec3<f32> = vs_INTERP0;
    let x_3203 : vec4<f32> = u_xlat7;
    let x_3205 : vec2<f32> = ((vec2<f32>(x_3198.x, x_3198.y) * vec2<f32>(x_3200.x, x_3200.x)) + vec2<f32>(x_3203.x, x_3203.y));
    let x_3206 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3205.x, x_3205.y, x_3206.z, x_3206.w);
    let x_3209 : vec4<f32> = x_3182.x_MainLightWorldToLight[2i];
    let x_3211 : vec3<f32> = vs_INTERP0;
    let x_3214 : vec4<f32> = u_xlat7;
    let x_3216 : vec2<f32> = ((vec2<f32>(x_3209.x, x_3209.y) * vec2<f32>(x_3211.z, x_3211.z)) + vec2<f32>(x_3214.x, x_3214.y));
    let x_3217 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3216.x, x_3216.y, x_3217.z, x_3217.w);
    let x_3219 : vec4<f32> = u_xlat7;
    let x_3222 : vec4<f32> = x_3182.x_MainLightWorldToLight[3i];
    let x_3224 : vec2<f32> = (vec2<f32>(x_3219.x, x_3219.y) + vec2<f32>(x_3222.x, x_3222.y));
    let x_3225 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3224.x, x_3224.y, x_3225.z, x_3225.w);
    let x_3227 : vec4<f32> = u_xlat7;
    let x_3230 : vec2<f32> = ((vec2<f32>(x_3227.x, x_3227.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3231 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3230.x, x_3230.y, x_3231.z, x_3231.w);
    let x_3238 : vec4<f32> = u_xlat7;
    let x_3241 : f32 = x_66.x_GlobalMipBias.x;
    let x_3242 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3238.x, x_3238.y), x_3241);
    u_xlat7 = x_3242;
    let x_3247 : f32 = x_3182.x_MainLightCookieTextureFormat;
    let x_3249 : f32 = x_3182.x_MainLightCookieTextureFormat;
    let x_3251 : f32 = x_3182.x_MainLightCookieTextureFormat;
    let x_3253 : f32 = x_3182.x_MainLightCookieTextureFormat;
    let x_3254 : vec4<f32> = vec4<f32>(x_3247, x_3249, x_3251, x_3253);
    let x_3262 : vec4<bool> = (vec4<f32>(x_3254.x, x_3254.y, x_3254.z, x_3254.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3262.x, x_3262.y);
    let x_3265 : bool = u_xlatb8.y;
    if (x_3265) {
      let x_3270 : f32 = u_xlat7.w;
      x_3266 = x_3270;
    } else {
      let x_3273 : f32 = u_xlat7.x;
      x_3266 = x_3273;
    }
    let x_3274 : f32 = x_3266;
    u_xlat4.x = x_3274;
    let x_3277 : bool = u_xlatb8.x;
    if (x_3277) {
      let x_3281 : vec4<f32> = u_xlat7;
      x_3278 = vec3<f32>(x_3281.x, x_3281.y, x_3281.z);
    } else {
      let x_3284 : vec4<f32> = u_xlat4;
      x_3278 = vec3<f32>(x_3284.x, x_3284.x, x_3284.x);
    }
    let x_3286 : vec3<f32> = x_3278;
    let x_3287 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3286.x, x_3286.y, x_3286.z, x_3287.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3293 : vec4<f32> = u_xlat7;
  let x_3296 : vec4<f32> = x_66.x_MainLightColor;
  let x_3298 : vec3<f32> = (vec3<f32>(x_3293.x, x_3293.y, x_3293.z) * vec3<f32>(x_3296.x, x_3296.y, x_3296.z));
  let x_3299 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3298.x, x_3298.y, x_3298.z, x_3299.w);
  let x_3301 : f32 = u_xlat48;
  let x_3303 : vec4<f32> = u_xlat7;
  let x_3305 : vec3<f32> = (vec3<f32>(x_3301, x_3301, x_3301) * vec3<f32>(x_3303.x, x_3303.y, x_3303.z));
  let x_3306 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3305.x, x_3305.y, x_3305.z, x_3306.w);
  let x_3308 : vec3<f32> = u_xlat25;
  let x_3310 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(x_3308), x_3310);
  let x_3314 : f32 = u_xlat4.x;
  let x_3316 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3314 + x_3316);
  let x_3319 : vec3<f32> = u_xlat24;
  let x_3320 : vec4<f32> = u_xlat4;
  let x_3324 : vec3<f32> = u_xlat25;
  let x_3326 : vec3<f32> = ((x_3319 * -(vec3<f32>(x_3320.x, x_3320.x, x_3320.x))) + -(x_3324));
  let x_3327 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3326.x, x_3326.y, x_3326.z, x_3327.w);
  let x_3329 : vec3<f32> = u_xlat24;
  let x_3330 : vec3<f32> = u_xlat25;
  u_xlat4.x = dot(x_3329, x_3330);
  let x_3334 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3334, 0.0f, 1.0f);
  let x_3338 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3338) + 1.0f);
  let x_3343 : f32 = u_xlat4.x;
  let x_3345 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3343 * x_3345);
  let x_3349 : f32 = u_xlat4.x;
  let x_3351 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3349 * x_3351);
  let x_3354 : f32 = u_xlat64;
  u_xlat69 = ((-(x_3354) * 0.699999988f) + 1.700000048f);
  let x_3360 : f32 = u_xlat64;
  let x_3361 : f32 = u_xlat69;
  u_xlat64 = (x_3360 * x_3361);
  let x_3363 : f32 = u_xlat64;
  u_xlat64 = (x_3363 * 6.0f);
  let x_3374 : vec4<f32> = u_xlat8;
  let x_3376 : f32 = u_xlat64;
  let x_3377 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3374.x, x_3374.y, x_3374.z), x_3376);
  u_xlat8 = x_3377;
  let x_3379 : f32 = u_xlat8.w;
  u_xlat64 = (x_3379 + -1.0f);
  let x_3382 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3383 : f32 = u_xlat64;
  u_xlat64 = ((x_3382 * x_3383) + 1.0f);
  let x_3386 : f32 = u_xlat64;
  u_xlat64 = max(x_3386, 0.0f);
  let x_3388 : f32 = u_xlat64;
  u_xlat64 = log2(x_3388);
  let x_3390 : f32 = u_xlat64;
  let x_3392 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat64 = (x_3390 * x_3392);
  let x_3394 : f32 = u_xlat64;
  u_xlat64 = exp2(x_3394);
  let x_3396 : f32 = u_xlat64;
  let x_3398 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat64 = (x_3396 * x_3398);
  let x_3400 : vec4<f32> = u_xlat8;
  let x_3402 : f32 = u_xlat64;
  let x_3404 : vec3<f32> = (vec3<f32>(x_3400.x, x_3400.y, x_3400.z) * vec3<f32>(x_3402, x_3402, x_3402));
  let x_3405 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3404.x, x_3404.y, x_3404.z, x_3405.w);
  let x_3407 : f32 = u_xlat65;
  let x_3409 : f32 = u_xlat65;
  let x_3413 : vec2<f32> = ((vec2<f32>(x_3407, x_3407) * vec2<f32>(x_3409, x_3409)) + vec2<f32>(-1.0f, 1.0f));
  let x_3414 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3413.x, x_3413.y, x_3414.z, x_3414.w);
  let x_3417 : f32 = u_xlat9.y;
  u_xlat64 = (1.0f / x_3417);
  let x_3420 : f32 = u_xlat3.x;
  u_xlat65 = (x_3420 + -0.039999999f);
  let x_3424 : f32 = u_xlat4.x;
  let x_3425 : f32 = u_xlat65;
  u_xlat65 = ((x_3424 * x_3425) + 0.039999999f);
  let x_3429 : f32 = u_xlat64;
  let x_3430 : f32 = u_xlat65;
  u_xlat64 = (x_3429 * x_3430);
  let x_3432 : f32 = u_xlat64;
  let x_3434 : vec4<f32> = u_xlat8;
  let x_3436 : vec3<f32> = (vec3<f32>(x_3432, x_3432, x_3432) * vec3<f32>(x_3434.x, x_3434.y, x_3434.z));
  let x_3437 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3436.x, x_3436.y, x_3436.z, x_3437.w);
  let x_3439 : vec4<f32> = u_xlat5;
  let x_3441 : vec3<f32> = u_xlat2;
  let x_3443 : vec4<f32> = u_xlat8;
  let x_3445 : vec3<f32> = ((vec3<f32>(x_3439.x, x_3439.y, x_3439.z) * x_3441) + vec3<f32>(x_3443.x, x_3443.y, x_3443.z));
  let x_3446 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3445.x, x_3445.y, x_3445.z, x_3446.w);
  let x_3448 : f32 = u_xlat63;
  let x_3450 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3448 * x_3450);
  let x_3452 : vec3<f32> = u_xlat24;
  let x_3454 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3452, vec3<f32>(x_3454.x, x_3454.y, x_3454.z));
  let x_3457 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3457, 0.0f, 1.0f);
  let x_3459 : f32 = u_xlat63;
  let x_3460 : f32 = u_xlat64;
  u_xlat63 = (x_3459 * x_3460);
  let x_3462 : f32 = u_xlat63;
  let x_3464 : vec4<f32> = u_xlat7;
  let x_3466 : vec3<f32> = (vec3<f32>(x_3462, x_3462, x_3462) * vec3<f32>(x_3464.x, x_3464.y, x_3464.z));
  let x_3467 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3466.x, x_3466.y, x_3466.z, x_3467.w);
  let x_3469 : vec3<f32> = u_xlat25;
  let x_3471 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3473 : vec3<f32> = (x_3469 + vec3<f32>(x_3471.x, x_3471.y, x_3471.z));
  let x_3474 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3473.x, x_3473.y, x_3473.z, x_3474.w);
  let x_3476 : vec4<f32> = u_xlat8;
  let x_3478 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3476.x, x_3476.y, x_3476.z), vec3<f32>(x_3478.x, x_3478.y, x_3478.z));
  let x_3481 : f32 = u_xlat63;
  u_xlat63 = max(x_3481, 1.17549435e-37f);
  let x_3484 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3484);
  let x_3486 : f32 = u_xlat63;
  let x_3488 : vec4<f32> = u_xlat8;
  let x_3490 : vec3<f32> = (vec3<f32>(x_3486, x_3486, x_3486) * vec3<f32>(x_3488.x, x_3488.y, x_3488.z));
  let x_3491 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3490.x, x_3490.y, x_3490.z, x_3491.w);
  let x_3493 : vec3<f32> = u_xlat24;
  let x_3494 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3493, vec3<f32>(x_3494.x, x_3494.y, x_3494.z));
  let x_3497 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3497, 0.0f, 1.0f);
  let x_3500 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3502 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3500.x, x_3500.y, x_3500.z), vec3<f32>(x_3502.x, x_3502.y, x_3502.z));
  let x_3505 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3505, 0.0f, 1.0f);
  let x_3507 : f32 = u_xlat63;
  let x_3508 : f32 = u_xlat63;
  u_xlat63 = (x_3507 * x_3508);
  let x_3510 : f32 = u_xlat63;
  let x_3512 : f32 = u_xlat9.x;
  u_xlat63 = ((x_3510 * x_3512) + 1.000010014f);
  let x_3516 : f32 = u_xlat64;
  let x_3517 : f32 = u_xlat64;
  u_xlat64 = (x_3516 * x_3517);
  let x_3519 : f32 = u_xlat63;
  let x_3520 : f32 = u_xlat63;
  u_xlat63 = (x_3519 * x_3520);
  let x_3522 : f32 = u_xlat64;
  u_xlat64 = max(x_3522, 0.100000001f);
  let x_3525 : f32 = u_xlat63;
  let x_3526 : f32 = u_xlat64;
  u_xlat63 = (x_3525 * x_3526);
  let x_3529 : f32 = u_xlat27.x;
  let x_3530 : f32 = u_xlat63;
  u_xlat63 = (x_3529 * x_3530);
  let x_3532 : f32 = u_xlat68;
  let x_3533 : f32 = u_xlat63;
  u_xlat63 = (x_3532 / x_3533);
  let x_3535 : f32 = u_xlat63;
  let x_3539 : vec3<f32> = u_xlat2;
  let x_3540 : vec3<f32> = ((vec3<f32>(x_3535, x_3535, x_3535) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3539);
  let x_3541 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3540.x, x_3540.y, x_3540.z, x_3541.w);
  let x_3543 : vec4<f32> = u_xlat7;
  let x_3545 : vec4<f32> = u_xlat8;
  let x_3547 : vec3<f32> = (vec3<f32>(x_3543.x, x_3543.y, x_3543.z) * vec3<f32>(x_3545.x, x_3545.y, x_3545.z));
  let x_3548 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3547.x, x_3547.y, x_3547.z, x_3548.w);
  let x_3551 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3553 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3551, x_3553);
  let x_3557 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3557));
  let x_3561 : f32 = x_3182.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3563 : f32 = x_3182.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3565 : f32 = x_3182.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3567 : f32 = x_3182.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3568 : vec4<f32> = vec4<f32>(x_3561, x_3563, x_3565, x_3567);
  let x_3574 : vec4<bool> = (vec4<f32>(x_3568.x, x_3568.y, x_3568.z, x_3568.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3574.x, x_3574.y);
  u_xlat30.x = 0.0f;
  u_xlat30.y = 0.0f;
  u_xlat30.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3585 : u32 = u_xlatu_loop_1;
    let x_3586 : u32 = u_xlatu63;
    if ((x_3585 < x_3586)) {
    } else {
      break;
    }
    let x_3589 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3589 >> 2u);
    let x_3593 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3593 & 3u));
    let x_3596 : u32 = u_xlatu65;
    let x_3599 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3596)];
    let x_3609 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3614 : vec4<u32> = indexable[x_3609];
    u_xlat65 = dot(x_3599, bitcast<vec4<f32>>(x_3614));
    let x_3617 : f32 = u_xlat65;
    u_xlatu65 = bitcast<u32>(i32(x_3617));
    let x_3620 : vec3<f32> = vs_INTERP0;
    let x_3632 : u32 = u_xlatu65;
    let x_3635 : vec4<f32> = x_3631.x_AdditionalLightsPosition[bitcast<i32>(x_3632)];
    let x_3638 : u32 = u_xlatu65;
    let x_3641 : vec4<f32> = x_3631.x_AdditionalLightsPosition[bitcast<i32>(x_3638)];
    let x_3643 : vec3<f32> = ((-(x_3620) * vec3<f32>(x_3635.w, x_3635.w, x_3635.w)) + vec3<f32>(x_3641.x, x_3641.y, x_3641.z));
    let x_3644 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3643.x, x_3643.y, x_3643.z, x_3644.w);
    let x_3646 : vec4<f32> = u_xlat10;
    let x_3648 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_3646.x, x_3646.y, x_3646.z), vec3<f32>(x_3648.x, x_3648.y, x_3648.z));
    let x_3653 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3653, 6.10351562e-05f);
    let x_3658 : f32 = u_xlat3.x;
    u_xlat4.x = inverseSqrt(x_3658);
    let x_3661 : vec4<f32> = u_xlat4;
    let x_3663 : vec4<f32> = u_xlat10;
    let x_3665 : vec3<f32> = (vec3<f32>(x_3661.x, x_3661.x, x_3661.x) * vec3<f32>(x_3663.x, x_3663.y, x_3663.z));
    let x_3666 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3665.x, x_3665.y, x_3665.z, x_3666.w);
    let x_3669 : f32 = u_xlat3.x;
    u_xlat69 = (1.0f / x_3669);
    let x_3672 : f32 = u_xlat3.x;
    let x_3673 : u32 = u_xlatu65;
    let x_3676 : f32 = x_3631.x_AdditionalLightsAttenuation[bitcast<i32>(x_3673)].x;
    u_xlat3.x = (x_3672 * x_3676);
    let x_3680 : f32 = u_xlat3.x;
    let x_3683 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3680) * x_3683) + 1.0f);
    let x_3688 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3688, 0.0f);
    let x_3692 : f32 = u_xlat3.x;
    let x_3694 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3692 * x_3694);
    let x_3698 : f32 = u_xlat3.x;
    let x_3699 : f32 = u_xlat69;
    u_xlat3.x = (x_3698 * x_3699);
    let x_3702 : u32 = u_xlatu65;
    let x_3705 : vec4<f32> = x_3631.x_AdditionalLightsSpotDir[bitcast<i32>(x_3702)];
    let x_3707 : vec4<f32> = u_xlat11;
    u_xlat69 = dot(vec3<f32>(x_3705.x, x_3705.y, x_3705.z), vec3<f32>(x_3707.x, x_3707.y, x_3707.z));
    let x_3710 : f32 = u_xlat69;
    let x_3711 : u32 = u_xlatu65;
    let x_3714 : f32 = x_3631.x_AdditionalLightsAttenuation[bitcast<i32>(x_3711)].z;
    let x_3716 : u32 = u_xlatu65;
    let x_3719 : f32 = x_3631.x_AdditionalLightsAttenuation[bitcast<i32>(x_3716)].w;
    u_xlat69 = ((x_3710 * x_3714) + x_3719);
    let x_3721 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3721, 0.0f, 1.0f);
    let x_3723 : f32 = u_xlat69;
    let x_3724 : f32 = u_xlat69;
    u_xlat69 = (x_3723 * x_3724);
    let x_3727 : f32 = u_xlat3.x;
    let x_3728 : f32 = u_xlat69;
    u_xlat3.x = (x_3727 * x_3728);
    let x_3732 : u32 = u_xlatu65;
    u_xlatu69 = (x_3732 >> 5u);
    let x_3735 : u32 = u_xlatu65;
    u_xlati70 = (1i << bitcast<u32>((bitcast<i32>(x_3735) & 31i)));
    let x_3741 : i32 = u_xlati70;
    let x_3743 : u32 = u_xlatu69;
    let x_3746 : f32 = x_3182.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3743)].el;
    u_xlati69 = bitcast<i32>((bitcast<u32>(x_3741) & bitcast<u32>(x_3746)));
    let x_3750 : i32 = u_xlati69;
    if ((x_3750 != 0i)) {
      let x_3760 : u32 = u_xlatu65;
      let x_3763 : f32 = x_3759.x_AdditionalLightsLightTypes[bitcast<i32>(x_3760)].el;
      u_xlati69 = i32(x_3763);
      let x_3765 : i32 = u_xlati69;
      u_xlati70 = select(1i, 0i, (x_3765 != 0i));
      let x_3769 : u32 = u_xlatu65;
      u_xlati50 = (bitcast<i32>(x_3769) << bitcast<u32>(2i));
      let x_3772 : i32 = u_xlati70;
      if ((x_3772 != 0i)) {
        let x_3776 : vec3<f32> = vs_INTERP0;
        let x_3778 : i32 = u_xlati50;
        let x_3781 : i32 = u_xlati50;
        let x_3785 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3778 + 1i) / 4i)][((x_3781 + 1i) % 4i)];
        let x_3787 : vec3<f32> = (vec3<f32>(x_3776.y, x_3776.y, x_3776.y) * vec3<f32>(x_3785.x, x_3785.y, x_3785.w));
        let x_3788 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3787.x, x_3787.y, x_3787.z, x_3788.w);
        let x_3790 : i32 = u_xlati50;
        let x_3792 : i32 = u_xlati50;
        let x_3795 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[(x_3790 / 4i)][(x_3792 % 4i)];
        let x_3797 : vec3<f32> = vs_INTERP0;
        let x_3800 : vec4<f32> = u_xlat12;
        let x_3802 : vec3<f32> = ((vec3<f32>(x_3795.x, x_3795.y, x_3795.w) * vec3<f32>(x_3797.x, x_3797.x, x_3797.x)) + vec3<f32>(x_3800.x, x_3800.y, x_3800.z));
        let x_3803 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3802.x, x_3802.y, x_3802.z, x_3803.w);
        let x_3805 : i32 = u_xlati50;
        let x_3808 : i32 = u_xlati50;
        let x_3812 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3805 + 2i) / 4i)][((x_3808 + 2i) % 4i)];
        let x_3814 : vec3<f32> = vs_INTERP0;
        let x_3817 : vec4<f32> = u_xlat12;
        let x_3819 : vec3<f32> = ((vec3<f32>(x_3812.x, x_3812.y, x_3812.w) * vec3<f32>(x_3814.z, x_3814.z, x_3814.z)) + vec3<f32>(x_3817.x, x_3817.y, x_3817.z));
        let x_3820 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3819.x, x_3819.y, x_3819.z, x_3820.w);
        let x_3822 : vec4<f32> = u_xlat12;
        let x_3824 : i32 = u_xlati50;
        let x_3827 : i32 = u_xlati50;
        let x_3831 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3824 + 3i) / 4i)][((x_3827 + 3i) % 4i)];
        let x_3833 : vec3<f32> = (vec3<f32>(x_3822.x, x_3822.y, x_3822.z) + vec3<f32>(x_3831.x, x_3831.y, x_3831.w));
        let x_3834 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3833.x, x_3833.y, x_3833.z, x_3834.w);
        let x_3836 : vec4<f32> = u_xlat12;
        let x_3838 : vec4<f32> = u_xlat12;
        let x_3840 : vec2<f32> = (vec2<f32>(x_3836.x, x_3836.y) / vec2<f32>(x_3838.z, x_3838.z));
        let x_3841 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3840.x, x_3840.y, x_3841.z, x_3841.w);
        let x_3843 : vec4<f32> = u_xlat12;
        let x_3846 : vec2<f32> = ((vec2<f32>(x_3843.x, x_3843.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3847 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3846.x, x_3846.y, x_3847.z, x_3847.w);
        let x_3849 : vec4<f32> = u_xlat12;
        let x_3853 : vec2<f32> = clamp(vec2<f32>(x_3849.x, x_3849.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3854 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3853.x, x_3853.y, x_3854.z, x_3854.w);
        let x_3856 : u32 = u_xlatu65;
        let x_3859 : vec4<f32> = x_3759.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3856)];
        let x_3861 : vec4<f32> = u_xlat12;
        let x_3864 : u32 = u_xlatu65;
        let x_3867 : vec4<f32> = x_3759.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3864)];
        let x_3869 : vec2<f32> = ((vec2<f32>(x_3859.x, x_3859.y) * vec2<f32>(x_3861.x, x_3861.y)) + vec2<f32>(x_3867.z, x_3867.w));
        let x_3870 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3869.x, x_3869.y, x_3870.z, x_3870.w);
      } else {
        let x_3873 : i32 = u_xlati69;
        u_xlatb69 = (x_3873 == 1i);
        let x_3875 : bool = u_xlatb69;
        u_xlati69 = select(0i, 1i, x_3875);
        let x_3877 : i32 = u_xlati69;
        if ((x_3877 != 0i)) {
          let x_3882 : vec3<f32> = vs_INTERP0;
          let x_3884 : i32 = u_xlati50;
          let x_3887 : i32 = u_xlati50;
          let x_3891 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3884 + 1i) / 4i)][((x_3887 + 1i) % 4i)];
          u_xlat54 = (vec2<f32>(x_3882.y, x_3882.y) * vec2<f32>(x_3891.x, x_3891.y));
          let x_3894 : i32 = u_xlati50;
          let x_3896 : i32 = u_xlati50;
          let x_3899 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[(x_3894 / 4i)][(x_3896 % 4i)];
          let x_3901 : vec3<f32> = vs_INTERP0;
          let x_3904 : vec2<f32> = u_xlat54;
          u_xlat54 = ((vec2<f32>(x_3899.x, x_3899.y) * vec2<f32>(x_3901.x, x_3901.x)) + x_3904);
          let x_3906 : i32 = u_xlati50;
          let x_3909 : i32 = u_xlati50;
          let x_3913 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3906 + 2i) / 4i)][((x_3909 + 2i) % 4i)];
          let x_3915 : vec3<f32> = vs_INTERP0;
          let x_3918 : vec2<f32> = u_xlat54;
          u_xlat54 = ((vec2<f32>(x_3913.x, x_3913.y) * vec2<f32>(x_3915.z, x_3915.z)) + x_3918);
          let x_3920 : vec2<f32> = u_xlat54;
          let x_3921 : i32 = u_xlati50;
          let x_3924 : i32 = u_xlati50;
          let x_3928 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3921 + 3i) / 4i)][((x_3924 + 3i) % 4i)];
          u_xlat54 = (x_3920 + vec2<f32>(x_3928.x, x_3928.y));
          let x_3931 : vec2<f32> = u_xlat54;
          u_xlat54 = ((x_3931 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3934 : vec2<f32> = u_xlat54;
          u_xlat54 = fract(x_3934);
          let x_3936 : u32 = u_xlatu65;
          let x_3939 : vec4<f32> = x_3759.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3936)];
          let x_3941 : vec2<f32> = u_xlat54;
          let x_3943 : u32 = u_xlatu65;
          let x_3946 : vec4<f32> = x_3759.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3943)];
          let x_3948 : vec2<f32> = ((vec2<f32>(x_3939.x, x_3939.y) * x_3941) + vec2<f32>(x_3946.z, x_3946.w));
          let x_3949 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3948.x, x_3948.y, x_3949.z, x_3949.w);
        } else {
          let x_3952 : vec3<f32> = vs_INTERP0;
          let x_3954 : i32 = u_xlati50;
          let x_3957 : i32 = u_xlati50;
          let x_3961 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3954 + 1i) / 4i)][((x_3957 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_3952.y, x_3952.y, x_3952.y, x_3952.y) * x_3961);
          let x_3963 : i32 = u_xlati50;
          let x_3965 : i32 = u_xlati50;
          let x_3968 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[(x_3963 / 4i)][(x_3965 % 4i)];
          let x_3969 : vec3<f32> = vs_INTERP0;
          let x_3972 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_3968 * vec4<f32>(x_3969.x, x_3969.x, x_3969.x, x_3969.x)) + x_3972);
          let x_3974 : i32 = u_xlati50;
          let x_3977 : i32 = u_xlati50;
          let x_3981 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3974 + 2i) / 4i)][((x_3977 + 2i) % 4i)];
          let x_3982 : vec3<f32> = vs_INTERP0;
          let x_3985 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_3981 * vec4<f32>(x_3982.z, x_3982.z, x_3982.z, x_3982.z)) + x_3985);
          let x_3987 : vec4<f32> = u_xlat13;
          let x_3988 : i32 = u_xlati50;
          let x_3991 : i32 = u_xlati50;
          let x_3995 : vec4<f32> = x_3759.x_AdditionalLightsWorldToLights[((x_3988 + 3i) / 4i)][((x_3991 + 3i) % 4i)];
          u_xlat13 = (x_3987 + x_3995);
          let x_3997 : vec4<f32> = u_xlat13;
          let x_3999 : vec4<f32> = u_xlat13;
          let x_4001 : vec3<f32> = (vec3<f32>(x_3997.x, x_3997.y, x_3997.z) / vec3<f32>(x_3999.w, x_3999.w, x_3999.w));
          let x_4002 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4001.x, x_4001.y, x_4001.z, x_4002.w);
          let x_4004 : vec4<f32> = u_xlat13;
          let x_4006 : vec4<f32> = u_xlat13;
          u_xlat69 = dot(vec3<f32>(x_4004.x, x_4004.y, x_4004.z), vec3<f32>(x_4006.x, x_4006.y, x_4006.z));
          let x_4009 : f32 = u_xlat69;
          u_xlat69 = inverseSqrt(x_4009);
          let x_4011 : f32 = u_xlat69;
          let x_4013 : vec4<f32> = u_xlat13;
          let x_4015 : vec3<f32> = (vec3<f32>(x_4011, x_4011, x_4011) * vec3<f32>(x_4013.x, x_4013.y, x_4013.z));
          let x_4016 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4015.x, x_4015.y, x_4015.z, x_4016.w);
          let x_4018 : vec4<f32> = u_xlat13;
          u_xlat69 = dot(abs(vec3<f32>(x_4018.x, x_4018.y, x_4018.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4023 : f32 = u_xlat69;
          u_xlat69 = max(x_4023, 0.000001f);
          let x_4026 : f32 = u_xlat69;
          u_xlat69 = (1.0f / x_4026);
          let x_4028 : f32 = u_xlat69;
          let x_4030 : vec4<f32> = u_xlat13;
          let x_4032 : vec3<f32> = (vec3<f32>(x_4028, x_4028, x_4028) * vec3<f32>(x_4030.z, x_4030.x, x_4030.y));
          let x_4033 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4032.x, x_4032.y, x_4032.z, x_4033.w);
          let x_4036 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4036);
          let x_4040 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4040, 0.0f, 1.0f);
          let x_4044 : vec4<f32> = u_xlat14;
          let x_4047 : vec4<bool> = (vec4<f32>(x_4044.y, x_4044.z, x_4044.y, x_4044.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb50 = vec2<bool>(x_4047.x, x_4047.y);
          let x_4050 : bool = u_xlatb50.x;
          if (x_4050) {
            let x_4055 : f32 = u_xlat14.x;
            x_4051 = x_4055;
          } else {
            let x_4058 : f32 = u_xlat14.x;
            x_4051 = -(x_4058);
          }
          let x_4060 : f32 = x_4051;
          u_xlat50.x = x_4060;
          let x_4063 : bool = u_xlatb50.y;
          if (x_4063) {
            let x_4068 : f32 = u_xlat14.x;
            x_4064 = x_4068;
          } else {
            let x_4071 : f32 = u_xlat14.x;
            x_4064 = -(x_4071);
          }
          let x_4073 : f32 = x_4064;
          u_xlat50.y = x_4073;
          let x_4075 : vec4<f32> = u_xlat13;
          let x_4077 : f32 = u_xlat69;
          let x_4080 : vec2<f32> = u_xlat50;
          u_xlat50 = ((vec2<f32>(x_4075.x, x_4075.y) * vec2<f32>(x_4077, x_4077)) + x_4080);
          let x_4082 : vec2<f32> = u_xlat50;
          u_xlat50 = ((x_4082 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4085 : vec2<f32> = u_xlat50;
          u_xlat50 = clamp(x_4085, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4089 : u32 = u_xlatu65;
          let x_4092 : vec4<f32> = x_3759.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4089)];
          let x_4094 : vec2<f32> = u_xlat50;
          let x_4096 : u32 = u_xlatu65;
          let x_4099 : vec4<f32> = x_3759.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4096)];
          let x_4101 : vec2<f32> = ((vec2<f32>(x_4092.x, x_4092.y) * x_4094) + vec2<f32>(x_4099.z, x_4099.w));
          let x_4102 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4101.x, x_4101.y, x_4102.z, x_4102.w);
        }
      }
      let x_4109 : vec4<f32> = u_xlat12;
      let x_4112 : f32 = x_66.x_GlobalMipBias.x;
      let x_4113 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4109.x, x_4109.y), x_4112);
      u_xlat12 = x_4113;
      let x_4115 : bool = u_xlatb8.y;
      if (x_4115) {
        let x_4120 : f32 = u_xlat12.w;
        x_4116 = x_4120;
      } else {
        let x_4123 : f32 = u_xlat12.x;
        x_4116 = x_4123;
      }
      let x_4124 : f32 = x_4116;
      u_xlat69 = x_4124;
      let x_4126 : bool = u_xlatb8.x;
      if (x_4126) {
        let x_4130 : vec4<f32> = u_xlat12;
        x_4127 = vec3<f32>(x_4130.x, x_4130.y, x_4130.z);
      } else {
        let x_4133 : f32 = u_xlat69;
        x_4127 = vec3<f32>(x_4133, x_4133, x_4133);
      }
      let x_4135 : vec3<f32> = x_4127;
      let x_4136 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4135.x, x_4135.y, x_4135.z, x_4136.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4142 : vec4<f32> = u_xlat12;
    let x_4144 : u32 = u_xlatu65;
    let x_4147 : vec4<f32> = x_3631.x_AdditionalLightsColor[bitcast<i32>(x_4144)];
    let x_4149 : vec3<f32> = (vec3<f32>(x_4142.x, x_4142.y, x_4142.z) * vec3<f32>(x_4147.x, x_4147.y, x_4147.z));
    let x_4150 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4149.x, x_4149.y, x_4149.z, x_4150.w);
    let x_4152 : f32 = u_xlat48;
    let x_4154 : vec4<f32> = u_xlat12;
    let x_4156 : vec3<f32> = (vec3<f32>(x_4152, x_4152, x_4152) * vec3<f32>(x_4154.x, x_4154.y, x_4154.z));
    let x_4157 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4156.x, x_4156.y, x_4156.z, x_4157.w);
    let x_4159 : vec3<f32> = u_xlat24;
    let x_4160 : vec4<f32> = u_xlat11;
    u_xlat65 = dot(x_4159, vec3<f32>(x_4160.x, x_4160.y, x_4160.z));
    let x_4163 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4163, 0.0f, 1.0f);
    let x_4165 : f32 = u_xlat65;
    let x_4167 : f32 = u_xlat3.x;
    u_xlat65 = (x_4165 * x_4167);
    let x_4169 : f32 = u_xlat65;
    let x_4171 : vec4<f32> = u_xlat12;
    let x_4173 : vec3<f32> = (vec3<f32>(x_4169, x_4169, x_4169) * vec3<f32>(x_4171.x, x_4171.y, x_4171.z));
    let x_4174 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4173.x, x_4173.y, x_4173.z, x_4174.w);
    let x_4176 : vec4<f32> = u_xlat10;
    let x_4178 : vec4<f32> = u_xlat4;
    let x_4181 : vec3<f32> = u_xlat25;
    let x_4182 : vec3<f32> = ((vec3<f32>(x_4176.x, x_4176.y, x_4176.z) * vec3<f32>(x_4178.x, x_4178.x, x_4178.x)) + x_4181);
    let x_4183 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4182.x, x_4182.y, x_4182.z, x_4183.w);
    let x_4185 : vec4<f32> = u_xlat10;
    let x_4187 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_4185.x, x_4185.y, x_4185.z), vec3<f32>(x_4187.x, x_4187.y, x_4187.z));
    let x_4190 : f32 = u_xlat65;
    u_xlat65 = max(x_4190, 1.17549435e-37f);
    let x_4192 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_4192);
    let x_4194 : f32 = u_xlat65;
    let x_4196 : vec4<f32> = u_xlat10;
    let x_4198 : vec3<f32> = (vec3<f32>(x_4194, x_4194, x_4194) * vec3<f32>(x_4196.x, x_4196.y, x_4196.z));
    let x_4199 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4198.x, x_4198.y, x_4198.z, x_4199.w);
    let x_4201 : vec3<f32> = u_xlat24;
    let x_4202 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(x_4201, vec3<f32>(x_4202.x, x_4202.y, x_4202.z));
    let x_4205 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4205, 0.0f, 1.0f);
    let x_4207 : vec4<f32> = u_xlat11;
    let x_4209 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_4207.x, x_4207.y, x_4207.z), vec3<f32>(x_4209.x, x_4209.y, x_4209.z));
    let x_4214 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4214, 0.0f, 1.0f);
    let x_4217 : f32 = u_xlat65;
    let x_4218 : f32 = u_xlat65;
    u_xlat65 = (x_4217 * x_4218);
    let x_4220 : f32 = u_xlat65;
    let x_4222 : f32 = u_xlat9.x;
    u_xlat65 = ((x_4220 * x_4222) + 1.000010014f);
    let x_4226 : f32 = u_xlat3.x;
    let x_4228 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4226 * x_4228);
    let x_4231 : f32 = u_xlat65;
    let x_4232 : f32 = u_xlat65;
    u_xlat65 = (x_4231 * x_4232);
    let x_4235 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4235, 0.100000001f);
    let x_4238 : f32 = u_xlat65;
    let x_4240 : f32 = u_xlat3.x;
    u_xlat65 = (x_4238 * x_4240);
    let x_4243 : f32 = u_xlat27.x;
    let x_4244 : f32 = u_xlat65;
    u_xlat65 = (x_4243 * x_4244);
    let x_4246 : f32 = u_xlat68;
    let x_4247 : f32 = u_xlat65;
    u_xlat65 = (x_4246 / x_4247);
    let x_4249 : f32 = u_xlat65;
    let x_4252 : vec3<f32> = u_xlat2;
    let x_4253 : vec3<f32> = ((vec3<f32>(x_4249, x_4249, x_4249) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4252);
    let x_4254 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4253.x, x_4253.y, x_4253.z, x_4254.w);
    let x_4256 : vec4<f32> = u_xlat10;
    let x_4258 : vec4<f32> = u_xlat12;
    let x_4261 : vec3<f32> = u_xlat30;
    u_xlat30 = ((vec3<f32>(x_4256.x, x_4256.y, x_4256.z) * vec3<f32>(x_4258.x, x_4258.y, x_4258.z)) + x_4261);

    continuing {
      let x_4263 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4263 + bitcast<u32>(1i));
    }
  }
  let x_4265 : vec4<f32> = u_xlat5;
  let x_4267 : vec4<f32> = u_xlat6;
  let x_4270 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_4265.x, x_4265.y, x_4265.z) * vec3<f32>(x_4267.x, x_4267.x, x_4267.x)) + vec3<f32>(x_4270.x, x_4270.y, x_4270.z));
  let x_4273 : vec3<f32> = u_xlat30;
  let x_4274 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_4273 + x_4274);
  let x_4276 : vec4<f32> = vs_INTERP4;
  let x_4278 : vec3<f32> = u_xlat0;
  let x_4280 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4276.w, x_4276.w, x_4276.w) * x_4278) + x_4280);
  let x_4283 : f32 = u_xlat22.x;
  let x_4285 : f32 = u_xlat22.x;
  u_xlat63 = (x_4283 * -(x_4285));
  let x_4288 : f32 = u_xlat63;
  u_xlat63 = exp2(x_4288);
  let x_4290 : vec3<f32> = u_xlat0;
  let x_4293 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_4290 + -(vec3<f32>(x_4293.x, x_4293.y, x_4293.z)));
  let x_4299 : f32 = u_xlat63;
  let x_4301 : vec3<f32> = u_xlat0;
  let x_4304 : vec4<f32> = x_66.unity_FogColor;
  let x_4306 : vec3<f32> = ((vec3<f32>(x_4299, x_4299, x_4299) * x_4301) + vec3<f32>(x_4304.x, x_4304.y, x_4304.z));
  let x_4307 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4306.x, x_4306.y, x_4306.z, x_4307.w);
  let x_4309 : bool = u_xlatb43;
  if (x_4309) {
    let x_4314 : f32 = u_xlat1.x;
    x_4310 = x_4314;
  } else {
    x_4310 = 1.0f;
  }
  let x_4316 : f32 = x_4310;
  SV_Target0.w = x_4316;
  let x_4322 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4324 : f32 = x_1592.unity_RenderingLayer.x;
  u_xlatu0 = (x_4322 & bitcast<u32>(x_4324));
  let x_4327 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4327);
  let x_4332 : f32 = u_xlat0.x;
  let x_4334 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4332 * x_4334);
  let x_4338 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4338, 0.0f, 1.0f);
  let x_4342 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4342.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

