type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1_TexelSize : vec4<f32>,
  x_MainTex_TexelSize : vec4<f32>,
  Texture2D_DE8BF47E_TexelSize : vec4<f32>,
  Vector1_6E11FCEA : f32,
  Vector1_A492C01C : f32,
  Vector1_8B35DE98 : f32,
  @size(4)
  padding_2 : u32,
  Texture2D_C005B064_TexelSize : vec4<f32>,
  Texture2D_D7D66558_TexelSize : vec4<f32>,
  Vector1_90E376AD : f32,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_59 : UnityPerDraw;

@group(0) @binding(6) var x_MainTex : texture_2d<f32>;

@group(0) @binding(15) var sampler_MainTex : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_146 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(9) var Texture2D_D7D66558 : texture_2d<f32>;

@group(0) @binding(18) var samplerTexture2D_D7D66558 : sampler;

@group(1) @binding(4) var<uniform> x_206 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_DE8BF47E : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_DE8BF47E : sampler;

@group(0) @binding(8) var Texture2D_C005B064 : texture_2d<f32>;

@group(0) @binding(17) var samplerTexture2D_C005B064 : sampler;

@group(0) @binding(5) var x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1 : texture_2d<f32>;

@group(0) @binding(14) var sampler_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1 : sampler;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(11) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_859 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(13) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(10) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2510 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb20 : vec2<bool>;
  var u_xlat20 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat61 : f32;
  var u_xlat62 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat64 : f32;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlat24 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_658 : vec3<f32>;
  var u_xlat25 : f32;
  var u_xlat45 : f32;
  var u_xlatb65 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb6 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat66 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlat67 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu63 : u32;
  var u_xlati65 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati63 : i32;
  var u_xlat60 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_29 : vec3<f32> = vs_INTERP1;
  let x_30 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_29, x_30);
  let x_36 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_36);
  let x_40 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_40);
  let x_50 : f32 = vs_INTERP2.w;
  u_xlatb20.x = (0.0f < x_50);
  let x_64 : f32 = x_59.unity_WorldTransformParams.w;
  u_xlatb20.y = (x_64 >= 0.0f);
  let x_71 : bool = u_xlatb20.x;
  u_xlat20.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb20.y;
  u_xlat20.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat20.y;
  let x_82 : f32 = u_xlat20.x;
  u_xlat20.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  let x_90 : vec3<f32> = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_90.x, x_90.y, x_90.z, x_91.w);
  let x_93 : vec3<f32> = vs_INTERP1;
  let x_95 : vec4<f32> = vs_INTERP2;
  let x_98 : vec4<f32> = u_xlat1;
  let x_101 : vec3<f32> = ((vec3<f32>(x_93.y, x_93.z, x_93.x) * vec3<f32>(x_95.z, x_95.x, x_95.y)) + -(vec3<f32>(x_98.x, x_98.y, x_98.z)));
  let x_102 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_101.x, x_101.y, x_101.z, x_102.w);
  let x_104 : vec3<f32> = u_xlat20;
  let x_106 : vec4<f32> = u_xlat1;
  let x_108 : vec3<f32> = (vec3<f32>(x_104.x, x_104.x, x_104.x) * vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_109.x, x_108.x, x_108.y, x_108.z);
  let x_111 : vec4<f32> = u_xlat0;
  let x_113 : vec3<f32> = vs_INTERP1;
  let x_114 : vec3<f32> = (vec3<f32>(x_111.x, x_111.x, x_111.x) * x_113);
  let x_115 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_114.x, x_114.y, x_114.z, x_115.w);
  let x_118 : vec4<f32> = u_xlat0;
  let x_120 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_118.x, x_118.x, x_118.x) * vec3<f32>(x_120.x, x_120.y, x_120.z));
  let x_124 : vec4<f32> = u_xlat0;
  let x_126 : vec4<f32> = u_xlat0;
  u_xlat3 = (vec3<f32>(x_124.y, x_124.z, x_124.w) * vec3<f32>(x_126.x, x_126.x, x_126.x));
  let x_142 : vec4<f32> = vs_INTERP3;
  let x_149 : f32 = x_146.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_142.x, x_142.y), x_149);
  u_xlat4 = x_150;
  let x_152 : f32 = u_xlat4.w;
  u_xlat0.x = (x_152 + -0.5f);
  let x_158 : f32 = u_xlat0.x;
  let x_163 : f32 = vs_INTERP0.y;
  u_xlat61 = ((x_158 * 4.0f) + x_163);
  let x_165 : f32 = u_xlat61;
  u_xlat61 = (x_165 * 0.330000013f);
  let x_170 : f32 = vs_INTERP0.y;
  u_xlat62 = (x_170 + 1.0f);
  let x_172 : f32 = u_xlat62;
  u_xlat62 = ((x_172 * -1.333333373f) + 1.0f);
  let x_176 : f32 = u_xlat61;
  let x_177 : f32 = u_xlat62;
  u_xlat61 = max(x_176, x_177);
  let x_179 : f32 = u_xlat61;
  u_xlat1.w = max(x_179, 0.100000001f);
  let x_184 : vec4<f32> = vs_INTERP3;
  let x_187 : vec2<f32> = (vec2<f32>(x_184.x, x_184.y) * vec2<f32>(4.0f, 4.0f));
  let x_188 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_187.x, x_187.y, x_188.z);
  let x_196 : vec3<f32> = u_xlat5;
  let x_199 : f32 = x_146.x_GlobalMipBias.x;
  let x_200 : vec4<f32> = textureSampleBias(Texture2D_D7D66558, samplerTexture2D_D7D66558, vec2<f32>(x_196.x, x_196.y), x_199);
  let x_201 : vec3<f32> = vec3<f32>(x_200.x, x_200.y, x_200.z);
  let x_202 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_209 : f32 = x_206.Vector1_8B35DE98;
  u_xlat62 = ((-(x_209) * 0.011111f) + 0.949999988f);
  let x_218 : f32 = x_206.Vector1_A492C01C;
  u_xlat63 = (x_218 + -10.0f);
  let x_221 : f32 = u_xlat63;
  let x_224 : f32 = vs_INTERP0.y;
  u_xlat63 = (-(x_221) + x_224);
  let x_226 : f32 = u_xlat63;
  u_xlat63 = (x_226 * 0.050000001f);
  let x_229 : f32 = u_xlat63;
  u_xlat63 = clamp(x_229, 0.0f, 1.0f);
  let x_232 : f32 = u_xlat63;
  u_xlat64 = ((x_232 * -2.0f) + 3.0f);
  let x_237 : f32 = u_xlat63;
  let x_238 : f32 = u_xlat63;
  u_xlat63 = (x_237 * x_238);
  let x_240 : f32 = u_xlat63;
  let x_241 : f32 = u_xlat64;
  u_xlat63 = (x_240 * x_241);
  let x_249 : vec4<f32> = vs_INTERP3;
  let x_252 : f32 = x_146.x_GlobalMipBias.x;
  let x_253 : vec4<f32> = textureSampleBias(Texture2D_DE8BF47E, samplerTexture2D_DE8BF47E, vec2<f32>(x_249.x, x_249.y), x_252);
  u_xlat7 = x_253;
  let x_255 : vec4<f32> = u_xlat7;
  u_xlat27 = ((vec3<f32>(x_255.w, x_255.y, x_255.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_262 : vec3<f32> = u_xlat3;
  let x_263 : vec3<f32> = u_xlat27;
  u_xlat3 = (x_262 * vec3<f32>(x_263.y, x_263.y, x_263.y));
  let x_266 : vec3<f32> = u_xlat27;
  let x_268 : vec3<f32> = u_xlat2;
  let x_270 : vec3<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_266.x, x_266.x, x_266.x) * x_268) + x_270);
  let x_272 : vec3<f32> = u_xlat27;
  let x_274 : vec4<f32> = u_xlat1;
  let x_277 : vec3<f32> = u_xlat2;
  let x_278 : vec3<f32> = ((vec3<f32>(x_272.z, x_272.z, x_272.z) * vec3<f32>(x_274.x, x_274.y, x_274.z)) + x_277);
  let x_279 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_278.x, x_278.y, x_278.z, x_279.w);
  let x_281 : vec4<f32> = u_xlat1;
  let x_283 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_281.x, x_281.y, x_281.z), vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_288 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_288, 1.17549435e-37f);
  let x_293 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_293);
  let x_297 : f32 = u_xlat1.x;
  let x_299 : f32 = u_xlat1.y;
  u_xlat1.x = (x_297 * x_299);
  let x_302 : f32 = u_xlat63;
  let x_304 : f32 = u_xlat1.x;
  let x_306 : f32 = u_xlat62;
  u_xlat1.x = ((x_302 * x_304) + -(x_306));
  let x_311 : f32 = u_xlat1.x;
  u_xlat1.x = (x_311 * 10.0f);
  let x_316 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_316, 0.0f, 1.0f);
  let x_322 : f32 = u_xlat1.x;
  u_xlat21.x = ((x_322 * -2.0f) + 3.0f);
  let x_327 : f32 = u_xlat1.x;
  let x_329 : f32 = u_xlat1.x;
  u_xlat1.x = (x_327 * x_329);
  let x_333 : f32 = u_xlat1.x;
  let x_335 : f32 = u_xlat21.x;
  u_xlat1.x = (x_333 * x_335);
  let x_338 : vec4<f32> = u_xlat1;
  let x_341 : vec2<f32> = min(vec2<f32>(x_338.x, x_338.w), vec2<f32>(1.0f, 1.0f));
  let x_342 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_341.x, x_342.y, x_342.z, x_341.y);
  let x_345 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_345) + 1.0f);
  let x_349 : vec4<f32> = u_xlat4;
  let x_351 : vec4<f32> = u_xlat6;
  u_xlat2 = (vec3<f32>(x_349.x, x_349.y, x_349.z) + -(vec3<f32>(x_351.x, x_351.y, x_351.z)));
  let x_355 : vec4<f32> = u_xlat1;
  let x_357 : vec3<f32> = u_xlat2;
  let x_359 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_355.x, x_355.x, x_355.x) * x_357) + vec3<f32>(x_359.x, x_359.y, x_359.z));
  let x_362 : vec4<f32> = u_xlat1;
  let x_364 : vec3<f32> = u_xlat2;
  u_xlat3 = (vec3<f32>(x_362.w, x_362.w, x_362.w) * x_364);
  let x_372 : vec3<f32> = u_xlat5;
  let x_375 : f32 = x_146.x_GlobalMipBias.x;
  let x_376 : vec4<f32> = textureSampleBias(Texture2D_C005B064, samplerTexture2D_C005B064, vec2<f32>(x_372.x, x_372.y), x_375);
  u_xlat24 = vec3<f32>(x_376.x, x_376.y, x_376.w);
  let x_379 : f32 = u_xlat24.x;
  let x_381 : f32 = u_xlat24.z;
  u_xlat24.x = (x_379 * x_381);
  let x_384 : vec3<f32> = u_xlat24;
  let x_389 : vec2<f32> = ((vec2<f32>(x_384.x, x_384.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_390 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_389.x, x_389.y, x_390.z);
  let x_392 : vec3<f32> = u_xlat5;
  let x_394 : vec3<f32> = u_xlat5;
  u_xlat21.x = dot(vec2<f32>(x_392.x, x_392.y), vec2<f32>(x_394.x, x_394.y));
  let x_399 : f32 = u_xlat21.x;
  u_xlat21.x = min(x_399, 1.0f);
  let x_403 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_403) + 1.0f);
  let x_408 : f32 = u_xlat21.x;
  u_xlat21.x = sqrt(x_408);
  let x_412 : f32 = u_xlat21.x;
  u_xlat5.z = max(x_412, 1.00000002e-16f);
  let x_419 : vec4<f32> = x_59.unity_ObjectToWorld[0i];
  let x_422 : vec4<f32> = x_59.unity_ObjectToWorld[0i];
  u_xlat21.x = dot(vec3<f32>(x_419.x, x_419.y, x_419.z), vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_427 : f32 = u_xlat21.x;
  u_xlat6.x = sqrt(x_427);
  let x_431 : vec4<f32> = x_59.unity_ObjectToWorld[1i];
  let x_434 : vec4<f32> = x_59.unity_ObjectToWorld[1i];
  u_xlat21.x = dot(vec3<f32>(x_431.x, x_431.y, x_431.z), vec3<f32>(x_434.x, x_434.y, x_434.z));
  let x_439 : f32 = u_xlat21.x;
  u_xlat6.y = sqrt(x_439);
  let x_444 : vec4<f32> = x_59.unity_ObjectToWorld[2i];
  let x_447 : vec4<f32> = x_59.unity_ObjectToWorld[2i];
  u_xlat21.x = dot(vec3<f32>(x_444.x, x_444.y, x_444.z), vec3<f32>(x_447.x, x_447.y, x_447.z));
  let x_452 : f32 = u_xlat21.x;
  u_xlat6.z = sqrt(x_452);
  let x_455 : vec4<f32> = u_xlat6;
  let x_457 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(vec3<f32>(x_455.x, x_455.y, x_455.z), vec3<f32>(x_457.x, x_457.y, x_457.z));
  let x_462 : f32 = u_xlat21.x;
  u_xlat21.x = sqrt(x_462);
  let x_466 : f32 = u_xlat21.x;
  let x_469 : f32 = x_206.Vector1_90E376AD;
  u_xlat21.x = (x_466 * x_469);
  let x_473 : f32 = u_xlat21.x;
  u_xlat21.x = (x_473 * 30.0f);
  let x_477 : vec2<f32> = u_xlat21;
  let x_479 : vec4<f32> = vs_INTERP3;
  u_xlat21 = (vec2<f32>(x_477.x, x_477.x) * vec2<f32>(x_479.x, x_479.y));
  let x_487 : vec2<f32> = u_xlat21;
  let x_489 : f32 = x_146.x_GlobalMipBias.x;
  let x_490 : vec4<f32> = textureSampleBias(x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1, sampler_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1, x_487, x_489);
  u_xlat24 = vec3<f32>(x_490.x, x_490.y, x_490.w);
  let x_493 : f32 = u_xlat24.x;
  let x_495 : f32 = u_xlat24.z;
  u_xlat24.x = (x_493 * x_495);
  let x_498 : vec3<f32> = u_xlat24;
  u_xlat21 = ((vec2<f32>(x_498.x, x_498.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_502 : vec2<f32> = u_xlat21;
  let x_503 : vec2<f32> = u_xlat21;
  u_xlat62 = dot(x_502, x_503);
  let x_505 : f32 = u_xlat62;
  u_xlat62 = min(x_505, 1.0f);
  let x_507 : f32 = u_xlat62;
  u_xlat62 = (-(x_507) + 1.0f);
  let x_510 : f32 = u_xlat62;
  u_xlat62 = sqrt(x_510);
  let x_512 : f32 = u_xlat62;
  u_xlat62 = max(x_512, 1.00000002e-16f);
  let x_514 : vec2<f32> = u_xlat21;
  let x_515 : vec3<f32> = u_xlat27;
  let x_517 : vec2<f32> = (x_514 + vec2<f32>(x_515.x, x_515.y));
  let x_518 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_517.x, x_517.y, x_518.z, x_518.w);
  let x_520 : f32 = u_xlat62;
  let x_522 : f32 = u_xlat27.z;
  u_xlat6.z = (x_520 * x_522);
  let x_525 : vec4<f32> = u_xlat6;
  let x_527 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(vec3<f32>(x_525.x, x_525.y, x_525.z), vec3<f32>(x_527.x, x_527.y, x_527.z));
  let x_532 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_532, 1.17549435e-37f);
  let x_536 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_536);
  let x_539 : vec4<f32> = u_xlat6;
  let x_541 : vec2<f32> = u_xlat21;
  let x_544 : vec3<f32> = u_xlat5;
  u_xlat24 = ((vec3<f32>(x_539.x, x_539.y, x_539.z) * vec3<f32>(x_541.x, x_541.x, x_541.x)) + -(x_544));
  let x_547 : vec4<f32> = u_xlat1;
  let x_549 : vec3<f32> = u_xlat24;
  let x_551 : vec3<f32> = u_xlat5;
  let x_552 : vec3<f32> = ((vec3<f32>(x_547.x, x_547.x, x_547.x) * x_549) + x_551);
  let x_553 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_553.x, x_552.x, x_552.y, x_552.z);
  let x_556 : f32 = u_xlat0.x;
  u_xlat0.x = (-(abs(x_556)) + 1.0f);
  let x_561 : vec4<f32> = u_xlat0;
  let x_562 : vec4<f32> = u_xlat4;
  u_xlat0 = (x_561 * vec4<f32>(x_562.x, x_562.z, x_562.z, x_562.z));
  let x_566 : f32 = u_xlat0.x;
  let x_568 : f32 = x_206.Vector1_6E11FCEA;
  u_xlat0.x = (x_566 * x_568);
  let x_572 : f32 = u_xlat1.x;
  let x_574 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_572 * x_574) + -0.850000024f);
  let x_580 : f32 = u_xlat1.w;
  let x_582 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_580 * x_582) + 0.850000024f);
  let x_588 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_588, 0.0f, 1.0f);
  let x_591 : vec4<f32> = u_xlat4;
  let x_593 : vec4<f32> = vs_INTERP2;
  let x_596 : vec4<f32> = u_xlat0;
  u_xlat20 = ((vec3<f32>(x_591.y, x_591.y, x_591.y) * vec3<f32>(x_593.x, x_593.y, x_593.z)) + vec3<f32>(x_596.y, x_596.z, x_596.w));
  let x_599 : vec4<f32> = u_xlat4;
  let x_601 : vec3<f32> = vs_INTERP1;
  let x_603 : vec3<f32> = u_xlat20;
  u_xlat20 = ((vec3<f32>(x_599.w, x_599.w, x_599.w) * x_601) + x_603);
  let x_605 : vec3<f32> = u_xlat20;
  let x_606 : vec3<f32> = u_xlat20;
  u_xlat1.x = dot(x_605, x_606);
  let x_610 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_610);
  let x_613 : vec3<f32> = u_xlat20;
  let x_614 : vec4<f32> = u_xlat1;
  u_xlat20 = (x_613 * vec3<f32>(x_614.x, x_614.x, x_614.x));
  let x_619 : f32 = x_146.unity_OrthoParams.w;
  u_xlatb1 = (x_619 == 0.0f);
  let x_621 : vec3<f32> = vs_INTERP0;
  let x_626 : vec3<f32> = x_146.x_WorldSpaceCameraPos;
  let x_627 : vec3<f32> = (-(x_621) + x_626);
  let x_628 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_627.x, x_627.y, x_627.z, x_628.w);
  let x_630 : vec4<f32> = u_xlat4;
  let x_632 : vec4<f32> = u_xlat4;
  u_xlat21.x = dot(vec3<f32>(x_630.x, x_630.y, x_630.z), vec3<f32>(x_632.x, x_632.y, x_632.z));
  let x_637 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_637);
  let x_640 : vec2<f32> = u_xlat21;
  let x_642 : vec4<f32> = u_xlat4;
  let x_644 : vec3<f32> = (vec3<f32>(x_640.x, x_640.x, x_640.x) * vec3<f32>(x_642.x, x_642.y, x_642.z));
  let x_645 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_644.x, x_644.y, x_644.z, x_645.w);
  let x_649 : f32 = x_146.unity_MatrixV[0i].z;
  u_xlat5.x = x_649;
  let x_652 : f32 = x_146.unity_MatrixV[1i].z;
  u_xlat5.y = x_652;
  let x_655 : f32 = x_146.unity_MatrixV[2i].z;
  u_xlat5.z = x_655;
  let x_657 : bool = u_xlatb1;
  if (x_657) {
    let x_661 : vec4<f32> = u_xlat4;
    x_658 = vec3<f32>(x_661.x, x_661.y, x_661.z);
  } else {
    let x_664 : vec3<f32> = u_xlat5;
    x_658 = x_664;
  }
  let x_665 : vec3<f32> = x_658;
  let x_666 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_665.x, x_665.y, x_665.z, x_666.w);
  let x_669 : f32 = vs_INTERP0.y;
  let x_671 : f32 = x_146.unity_MatrixV[1i].z;
  u_xlat62 = (x_669 * x_671);
  let x_674 : f32 = x_146.unity_MatrixV[0i].z;
  let x_676 : f32 = vs_INTERP0.x;
  let x_678 : f32 = u_xlat62;
  u_xlat62 = ((x_674 * x_676) + x_678);
  let x_681 : f32 = x_146.unity_MatrixV[2i].z;
  let x_683 : f32 = vs_INTERP0.z;
  let x_685 : f32 = u_xlat62;
  u_xlat62 = ((x_681 * x_683) + x_685);
  let x_687 : f32 = u_xlat62;
  let x_689 : f32 = x_146.unity_MatrixV[3i].z;
  u_xlat62 = (x_687 + x_689);
  let x_691 : f32 = u_xlat62;
  let x_695 : f32 = x_146.x_ProjectionParams.y;
  u_xlat62 = (-(x_691) + -(x_695));
  let x_698 : f32 = u_xlat62;
  u_xlat62 = max(x_698, 0.0f);
  let x_700 : f32 = u_xlat62;
  let x_703 : f32 = x_146.unity_FogParams.x;
  u_xlat62 = (x_700 * x_703);
  let x_712 : vec2<f32> = vs_INTERP4;
  let x_714 : f32 = x_146.x_GlobalMipBias.x;
  let x_715 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_712, x_714);
  u_xlat4 = x_715;
  let x_720 : vec2<f32> = vs_INTERP4;
  let x_722 : f32 = x_146.x_GlobalMipBias.x;
  let x_723 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_720, x_722);
  u_xlat5 = vec3<f32>(x_723.x, x_723.y, x_723.z);
  let x_725 : vec4<f32> = u_xlat4;
  let x_728 : vec3<f32> = (vec3<f32>(x_725.x, x_725.y, x_725.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_729 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
  let x_731 : vec3<f32> = u_xlat20;
  let x_732 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_731, vec3<f32>(x_732.x, x_732.y, x_732.z));
  let x_735 : f32 = u_xlat63;
  u_xlat63 = (x_735 + 0.5f);
  let x_738 : f32 = u_xlat63;
  let x_740 : vec3<f32> = u_xlat5;
  let x_741 : vec3<f32> = (vec3<f32>(x_738, x_738, x_738) * x_740);
  let x_742 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_741.x, x_741.y, x_741.z, x_742.w);
  let x_745 : f32 = u_xlat4.w;
  u_xlat63 = max(x_745, 0.0001f);
  let x_748 : vec4<f32> = u_xlat4;
  let x_750 : f32 = u_xlat63;
  let x_752 : vec3<f32> = (vec3<f32>(x_748.x, x_748.y, x_748.z) / vec3<f32>(x_750, x_750, x_750));
  let x_753 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_752.x, x_752.y, x_752.z, x_753.w);
  let x_756 : vec4<f32> = x_146.x_ScaledScreenParams;
  let x_757 : vec2<f32> = vec2<f32>(x_756.x, x_756.y);
  let x_761 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_757.x, x_757.y));
  let x_762 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_761.x, x_761.y, x_762.z);
  let x_764 : vec3<f32> = u_xlat5;
  let x_766 : vec4<f32> = hlslcc_FragCoord;
  let x_768 : vec2<f32> = (vec2<f32>(x_764.x, x_764.y) * vec2<f32>(x_766.x, x_766.y));
  let x_769 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_768.x, x_768.y, x_769.z);
  let x_772 : f32 = u_xlat5.y;
  let x_775 : f32 = x_146.x_ScaleBiasRt.x;
  let x_778 : f32 = x_146.x_ScaleBiasRt.y;
  u_xlat63 = ((x_772 * x_775) + x_778);
  let x_780 : f32 = u_xlat63;
  u_xlat5.z = (-(x_780) + 1.0f);
  let x_784 : vec3<f32> = u_xlat3;
  u_xlat3 = (x_784 * vec3<f32>(0.863999963f, 0.863999963f, 0.863999963f));
  let x_788 : vec4<f32> = u_xlat1;
  let x_790 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_788.w, x_788.w, x_788.w) * x_790) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_795 : vec3<f32> = u_xlat2;
  u_xlat2 = ((x_795 * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_802 : f32 = u_xlat0.x;
  u_xlat61 = (-(x_802) + 1.0f);
  let x_805 : f32 = u_xlat61;
  let x_806 : f32 = u_xlat61;
  u_xlat63 = (x_805 * x_806);
  let x_808 : f32 = u_xlat63;
  u_xlat63 = max(x_808, 0.0078125f);
  let x_811 : f32 = u_xlat63;
  let x_812 : f32 = u_xlat63;
  u_xlat64 = (x_811 * x_812);
  let x_815 : f32 = u_xlat0.x;
  u_xlat0.x = (x_815 + 0.136000037f);
  let x_820 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_820, 1.0f);
  let x_824 : f32 = u_xlat63;
  u_xlat25 = ((x_824 * 4.0f) + 2.0f);
  let x_832 : vec3<f32> = u_xlat5;
  let x_835 : f32 = x_146.x_GlobalMipBias.x;
  let x_836 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_832.x, x_832.z), x_835);
  u_xlat5.x = x_836.x;
  let x_841 : f32 = u_xlat5.x;
  u_xlat45 = (x_841 + -1.0f);
  let x_844 : f32 = x_146.x_AmbientOcclusionParam.w;
  let x_845 : f32 = u_xlat45;
  u_xlat45 = ((x_844 * x_845) + 1.0f);
  let x_849 : f32 = u_xlat7.x;
  let x_851 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_849, x_851);
  let x_861 : f32 = x_859.x_MainLightShadowParams.y;
  u_xlatb65 = (0.0f < x_861);
  let x_863 : bool = u_xlatb65;
  if (x_863) {
    let x_867 : f32 = x_859.x_MainLightShadowParams.y;
    u_xlatb65 = (x_867 == 1.0f);
    let x_869 : bool = u_xlatb65;
    if (x_869) {
      let x_873 : vec4<f32> = vs_INTERP8;
      let x_876 : vec4<f32> = x_859.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_873.x, x_873.y, x_873.x, x_873.y) + x_876);
      let x_879 : vec4<f32> = u_xlat6;
      let x_880 : vec2<f32> = vec2<f32>(x_879.x, x_879.y);
      let x_882 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_880.x, x_880.y, x_882);
      let x_894 : vec3<f32> = txVec0;
      let x_896 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_894.xy, x_894.z);
      u_xlat7.x = x_896;
      let x_899 : vec4<f32> = u_xlat6;
      let x_900 : vec2<f32> = vec2<f32>(x_899.z, x_899.w);
      let x_902 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_900.x, x_900.y, x_902);
      let x_909 : vec3<f32> = txVec1;
      let x_911 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_909.xy, x_909.z);
      u_xlat7.y = x_911;
      let x_913 : vec4<f32> = vs_INTERP8;
      let x_916 : vec4<f32> = x_859.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_913.x, x_913.y, x_913.x, x_913.y) + x_916);
      let x_919 : vec4<f32> = u_xlat6;
      let x_920 : vec2<f32> = vec2<f32>(x_919.x, x_919.y);
      let x_922 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_920.x, x_920.y, x_922);
      let x_929 : vec3<f32> = txVec2;
      let x_931 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_929.xy, x_929.z);
      u_xlat7.z = x_931;
      let x_934 : vec4<f32> = u_xlat6;
      let x_935 : vec2<f32> = vec2<f32>(x_934.z, x_934.w);
      let x_937 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_935.x, x_935.y, x_937);
      let x_944 : vec3<f32> = txVec3;
      let x_946 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_944.xy, x_944.z);
      u_xlat7.w = x_946;
      let x_949 : vec4<f32> = u_xlat7;
      u_xlat65 = dot(x_949, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_956 : f32 = x_859.x_MainLightShadowParams.y;
      u_xlatb6 = (x_956 == 2.0f);
      let x_958 : bool = u_xlatb6;
      if (x_958) {
        let x_961 : vec4<f32> = vs_INTERP8;
        let x_964 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_968 : vec2<f32> = ((vec2<f32>(x_961.x, x_961.y) * vec2<f32>(x_964.z, x_964.w)) + vec2<f32>(0.5f, 0.5f));
        let x_969 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_968.x, x_968.y, x_969.z, x_969.w);
        let x_971 : vec4<f32> = u_xlat6;
        let x_973 : vec2<f32> = floor(vec2<f32>(x_971.x, x_971.y));
        let x_974 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_973.x, x_973.y, x_974.z, x_974.w);
        let x_977 : vec4<f32> = vs_INTERP8;
        let x_980 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_983 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_977.x, x_977.y) * vec2<f32>(x_980.z, x_980.w)) + -(vec2<f32>(x_983.x, x_983.y)));
        let x_987 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_987.x, x_987.x, x_987.y, x_987.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_992 : vec4<f32> = u_xlat7;
        let x_994 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_992.x, x_992.x, x_992.z, x_992.z) * vec4<f32>(x_994.x, x_994.x, x_994.z, x_994.z));
        let x_997 : vec4<f32> = u_xlat8;
        let x_1001 : vec2<f32> = (vec2<f32>(x_997.y, x_997.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1002 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1001.x, x_1002.y, x_1001.y, x_1002.w);
        let x_1004 : vec4<f32> = u_xlat8;
        let x_1007 : vec2<f32> = u_xlat46;
        let x_1009 : vec2<f32> = ((vec2<f32>(x_1004.x, x_1004.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1007));
        let x_1010 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1009.x, x_1009.y, x_1010.z, x_1010.w);
        let x_1013 : vec2<f32> = u_xlat46;
        u_xlat48 = (-(x_1013) + vec2<f32>(1.0f, 1.0f));
        let x_1017 : vec2<f32> = u_xlat46;
        let x_1019 : vec2<f32> = min(x_1017, vec2<f32>(0.0f, 0.0f));
        let x_1020 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1019.x, x_1019.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1025 : vec4<f32> = u_xlat9;
        let x_1028 : vec2<f32> = u_xlat48;
        let x_1029 : vec2<f32> = ((-(vec2<f32>(x_1022.x, x_1022.y)) * vec2<f32>(x_1025.x, x_1025.y)) + x_1028);
        let x_1030 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
        let x_1032 : vec2<f32> = u_xlat46;
        u_xlat46 = max(x_1032, vec2<f32>(0.0f, 0.0f));
        let x_1034 : vec2<f32> = u_xlat46;
        let x_1036 : vec2<f32> = u_xlat46;
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat46 = ((-(x_1034) * x_1036) + vec2<f32>(x_1038.y, x_1038.w));
        let x_1041 : vec4<f32> = u_xlat9;
        let x_1043 : vec2<f32> = (vec2<f32>(x_1041.x, x_1041.y) + vec2<f32>(1.0f, 1.0f));
        let x_1044 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1043.x, x_1043.y, x_1044.z, x_1044.w);
        let x_1046 : vec2<f32> = u_xlat46;
        u_xlat46 = (x_1046 + vec2<f32>(1.0f, 1.0f));
        let x_1049 : vec4<f32> = u_xlat8;
        let x_1053 : vec2<f32> = (vec2<f32>(x_1049.x, x_1049.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1054 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1053.y, x_1054.z, x_1054.w);
        let x_1056 : vec2<f32> = u_xlat48;
        let x_1057 : vec2<f32> = (x_1056 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1058 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1057.x, x_1057.y, x_1058.z, x_1058.w);
        let x_1060 : vec4<f32> = u_xlat9;
        let x_1062 : vec2<f32> = (vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1063 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1062.x, x_1062.y, x_1063.z, x_1063.w);
        let x_1066 : vec2<f32> = u_xlat46;
        let x_1067 : vec2<f32> = (x_1066 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1068 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1067.x, x_1067.y, x_1068.z, x_1068.w);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat46 = (vec2<f32>(x_1070.y, x_1070.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1074 : f32 = u_xlat9.x;
        u_xlat10.z = x_1074;
        let x_1077 : f32 = u_xlat46.x;
        u_xlat10.w = x_1077;
        let x_1080 : f32 = u_xlat11.x;
        u_xlat8.z = x_1080;
        let x_1083 : f32 = u_xlat7.x;
        u_xlat8.w = x_1083;
        let x_1086 : vec4<f32> = u_xlat8;
        let x_1088 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_1086.z, x_1086.w, x_1086.x, x_1086.z) + vec4<f32>(x_1088.z, x_1088.w, x_1088.x, x_1088.z));
        let x_1092 : f32 = u_xlat10.y;
        u_xlat9.z = x_1092;
        let x_1095 : f32 = u_xlat46.y;
        u_xlat9.w = x_1095;
        let x_1098 : f32 = u_xlat8.y;
        u_xlat11.z = x_1098;
        let x_1101 : f32 = u_xlat7.z;
        u_xlat11.w = x_1101;
        let x_1103 : vec4<f32> = u_xlat9;
        let x_1105 : vec4<f32> = u_xlat11;
        let x_1107 : vec3<f32> = (vec3<f32>(x_1103.z, x_1103.y, x_1103.w) + vec3<f32>(x_1105.z, x_1105.y, x_1105.w));
        let x_1108 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1107.x, x_1107.y, x_1107.z, x_1108.w);
        let x_1110 : vec4<f32> = u_xlat8;
        let x_1112 : vec4<f32> = u_xlat12;
        let x_1114 : vec3<f32> = (vec3<f32>(x_1110.x, x_1110.z, x_1110.w) / vec3<f32>(x_1112.z, x_1112.w, x_1112.y));
        let x_1115 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1114.x, x_1114.y, x_1114.z, x_1115.w);
        let x_1117 : vec4<f32> = u_xlat8;
        let x_1122 : vec3<f32> = (vec3<f32>(x_1117.x, x_1117.y, x_1117.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1123 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1122.x, x_1122.y, x_1122.z, x_1123.w);
        let x_1125 : vec4<f32> = u_xlat11;
        let x_1127 : vec4<f32> = u_xlat7;
        let x_1129 : vec3<f32> = (vec3<f32>(x_1125.z, x_1125.y, x_1125.w) / vec3<f32>(x_1127.x, x_1127.y, x_1127.z));
        let x_1130 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1129.x, x_1129.y, x_1129.z, x_1130.w);
        let x_1132 : vec4<f32> = u_xlat9;
        let x_1134 : vec3<f32> = (vec3<f32>(x_1132.x, x_1132.y, x_1132.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1135 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1134.x, x_1134.y, x_1134.z, x_1135.w);
        let x_1137 : vec4<f32> = u_xlat8;
        let x_1140 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1142 : vec3<f32> = (vec3<f32>(x_1137.y, x_1137.x, x_1137.z) * vec3<f32>(x_1140.x, x_1140.x, x_1140.x));
        let x_1143 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1142.x, x_1142.y, x_1142.z, x_1143.w);
        let x_1145 : vec4<f32> = u_xlat9;
        let x_1148 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1150 : vec3<f32> = (vec3<f32>(x_1145.x, x_1145.y, x_1145.z) * vec3<f32>(x_1148.y, x_1148.y, x_1148.y));
        let x_1151 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1150.x, x_1150.y, x_1150.z, x_1151.w);
        let x_1154 : f32 = u_xlat9.x;
        u_xlat8.w = x_1154;
        let x_1156 : vec4<f32> = u_xlat6;
        let x_1159 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1162 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1156.x, x_1156.y, x_1156.x, x_1156.y) * vec4<f32>(x_1159.x, x_1159.y, x_1159.x, x_1159.y)) + vec4<f32>(x_1162.y, x_1162.w, x_1162.x, x_1162.w));
        let x_1165 : vec4<f32> = u_xlat6;
        let x_1168 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1171 : vec4<f32> = u_xlat8;
        u_xlat46 = ((vec2<f32>(x_1165.x, x_1165.y) * vec2<f32>(x_1168.x, x_1168.y)) + vec2<f32>(x_1171.z, x_1171.w));
        let x_1175 : f32 = u_xlat8.y;
        u_xlat9.w = x_1175;
        let x_1177 : vec4<f32> = u_xlat9;
        let x_1178 : vec2<f32> = vec2<f32>(x_1177.y, x_1177.z);
        let x_1179 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1179.x, x_1178.x, x_1179.z, x_1178.y);
        let x_1181 : vec4<f32> = u_xlat6;
        let x_1184 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1187 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_1181.x, x_1181.y, x_1181.x, x_1181.y) * vec4<f32>(x_1184.x, x_1184.y, x_1184.x, x_1184.y)) + vec4<f32>(x_1187.x, x_1187.y, x_1187.z, x_1187.y));
        let x_1190 : vec4<f32> = u_xlat6;
        let x_1193 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1196 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1190.x, x_1190.y, x_1190.x, x_1190.y) * vec4<f32>(x_1193.x, x_1193.y, x_1193.x, x_1193.y)) + vec4<f32>(x_1196.w, x_1196.y, x_1196.w, x_1196.z));
        let x_1199 : vec4<f32> = u_xlat6;
        let x_1202 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1205 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_1199.x, x_1199.y, x_1199.x, x_1199.y) * vec4<f32>(x_1202.x, x_1202.y, x_1202.x, x_1202.y)) + vec4<f32>(x_1205.x, x_1205.w, x_1205.z, x_1205.w));
        let x_1209 : vec4<f32> = u_xlat7;
        let x_1211 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_1209.x, x_1209.x, x_1209.x, x_1209.y) * vec4<f32>(x_1211.z, x_1211.w, x_1211.y, x_1211.z));
        let x_1215 : vec4<f32> = u_xlat7;
        let x_1217 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_1215.y, x_1215.y, x_1215.z, x_1215.z) * x_1217);
        let x_1220 : f32 = u_xlat7.z;
        let x_1222 : f32 = u_xlat12.y;
        u_xlat6.x = (x_1220 * x_1222);
        let x_1226 : vec4<f32> = u_xlat10;
        let x_1227 : vec2<f32> = vec2<f32>(x_1226.x, x_1226.y);
        let x_1229 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_1227.x, x_1227.y, x_1229);
        let x_1237 : vec3<f32> = txVec4;
        let x_1239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1237.xy, x_1237.z);
        u_xlat26 = x_1239;
        let x_1241 : vec4<f32> = u_xlat10;
        let x_1242 : vec2<f32> = vec2<f32>(x_1241.z, x_1241.w);
        let x_1244 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_1242.x, x_1242.y, x_1244);
        let x_1251 : vec3<f32> = txVec5;
        let x_1253 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1251.xy, x_1251.z);
        u_xlat7.x = x_1253;
        let x_1256 : f32 = u_xlat7.x;
        let x_1258 : f32 = u_xlat13.y;
        u_xlat7.x = (x_1256 * x_1258);
        let x_1262 : f32 = u_xlat13.x;
        let x_1263 : f32 = u_xlat26;
        let x_1266 : f32 = u_xlat7.x;
        u_xlat26 = ((x_1262 * x_1263) + x_1266);
        let x_1269 : vec2<f32> = u_xlat46;
        let x_1271 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_1269.x, x_1269.y, x_1271);
        let x_1278 : vec3<f32> = txVec6;
        let x_1280 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1278.xy, x_1278.z);
        u_xlat46.x = x_1280;
        let x_1283 : f32 = u_xlat13.z;
        let x_1285 : f32 = u_xlat46.x;
        let x_1287 : f32 = u_xlat26;
        u_xlat26 = ((x_1283 * x_1285) + x_1287);
        let x_1290 : vec4<f32> = u_xlat9;
        let x_1291 : vec2<f32> = vec2<f32>(x_1290.x, x_1290.y);
        let x_1293 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_1291.x, x_1291.y, x_1293);
        let x_1300 : vec3<f32> = txVec7;
        let x_1302 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1300.xy, x_1300.z);
        u_xlat46.x = x_1302;
        let x_1305 : f32 = u_xlat13.w;
        let x_1307 : f32 = u_xlat46.x;
        let x_1309 : f32 = u_xlat26;
        u_xlat26 = ((x_1305 * x_1307) + x_1309);
        let x_1312 : vec4<f32> = u_xlat11;
        let x_1313 : vec2<f32> = vec2<f32>(x_1312.x, x_1312.y);
        let x_1315 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_1313.x, x_1313.y, x_1315);
        let x_1322 : vec3<f32> = txVec8;
        let x_1324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1322.xy, x_1322.z);
        u_xlat46.x = x_1324;
        let x_1327 : f32 = u_xlat14.x;
        let x_1329 : f32 = u_xlat46.x;
        let x_1331 : f32 = u_xlat26;
        u_xlat26 = ((x_1327 * x_1329) + x_1331);
        let x_1334 : vec4<f32> = u_xlat11;
        let x_1335 : vec2<f32> = vec2<f32>(x_1334.z, x_1334.w);
        let x_1337 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_1335.x, x_1335.y, x_1337);
        let x_1344 : vec3<f32> = txVec9;
        let x_1346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1344.xy, x_1344.z);
        u_xlat46.x = x_1346;
        let x_1349 : f32 = u_xlat14.y;
        let x_1351 : f32 = u_xlat46.x;
        let x_1353 : f32 = u_xlat26;
        u_xlat26 = ((x_1349 * x_1351) + x_1353);
        let x_1356 : vec4<f32> = u_xlat9;
        let x_1357 : vec2<f32> = vec2<f32>(x_1356.z, x_1356.w);
        let x_1359 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_1357.x, x_1357.y, x_1359);
        let x_1366 : vec3<f32> = txVec10;
        let x_1368 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1366.xy, x_1366.z);
        u_xlat46.x = x_1368;
        let x_1371 : f32 = u_xlat14.z;
        let x_1373 : f32 = u_xlat46.x;
        let x_1375 : f32 = u_xlat26;
        u_xlat26 = ((x_1371 * x_1373) + x_1375);
        let x_1378 : vec4<f32> = u_xlat8;
        let x_1379 : vec2<f32> = vec2<f32>(x_1378.x, x_1378.y);
        let x_1381 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_1379.x, x_1379.y, x_1381);
        let x_1388 : vec3<f32> = txVec11;
        let x_1390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1388.xy, x_1388.z);
        u_xlat46.x = x_1390;
        let x_1393 : f32 = u_xlat14.w;
        let x_1395 : f32 = u_xlat46.x;
        let x_1397 : f32 = u_xlat26;
        u_xlat26 = ((x_1393 * x_1395) + x_1397);
        let x_1400 : vec4<f32> = u_xlat8;
        let x_1401 : vec2<f32> = vec2<f32>(x_1400.z, x_1400.w);
        let x_1403 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1401.x, x_1401.y, x_1403);
        let x_1410 : vec3<f32> = txVec12;
        let x_1412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1410.xy, x_1410.z);
        u_xlat46.x = x_1412;
        let x_1415 : f32 = u_xlat6.x;
        let x_1417 : f32 = u_xlat46.x;
        let x_1419 : f32 = u_xlat26;
        u_xlat65 = ((x_1415 * x_1417) + x_1419);
      } else {
        let x_1422 : vec4<f32> = vs_INTERP8;
        let x_1425 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1428 : vec2<f32> = ((vec2<f32>(x_1422.x, x_1422.y) * vec2<f32>(x_1425.z, x_1425.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1429 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1428.x, x_1428.y, x_1429.z, x_1429.w);
        let x_1431 : vec4<f32> = u_xlat6;
        let x_1433 : vec2<f32> = floor(vec2<f32>(x_1431.x, x_1431.y));
        let x_1434 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1433.x, x_1433.y, x_1434.z, x_1434.w);
        let x_1436 : vec4<f32> = vs_INTERP8;
        let x_1439 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1442 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_1436.x, x_1436.y) * vec2<f32>(x_1439.z, x_1439.w)) + -(vec2<f32>(x_1442.x, x_1442.y)));
        let x_1446 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_1446.x, x_1446.x, x_1446.y, x_1446.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1449 : vec4<f32> = u_xlat7;
        let x_1451 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1449.x, x_1449.x, x_1449.z, x_1449.z) * vec4<f32>(x_1451.x, x_1451.x, x_1451.z, x_1451.z));
        let x_1454 : vec4<f32> = u_xlat8;
        let x_1458 : vec2<f32> = (vec2<f32>(x_1454.y, x_1454.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1459 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1459.x, x_1458.x, x_1459.z, x_1458.y);
        let x_1461 : vec4<f32> = u_xlat8;
        let x_1464 : vec2<f32> = u_xlat46;
        let x_1466 : vec2<f32> = ((vec2<f32>(x_1461.x, x_1461.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1464));
        let x_1467 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1466.x, x_1467.y, x_1466.y, x_1467.w);
        let x_1469 : vec2<f32> = u_xlat46;
        let x_1471 : vec2<f32> = (-(x_1469) + vec2<f32>(1.0f, 1.0f));
        let x_1472 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1471.x, x_1471.y, x_1472.z, x_1472.w);
        let x_1474 : vec2<f32> = u_xlat46;
        u_xlat48 = min(x_1474, vec2<f32>(0.0f, 0.0f));
        let x_1476 : vec2<f32> = u_xlat48;
        let x_1478 : vec2<f32> = u_xlat48;
        let x_1480 : vec4<f32> = u_xlat8;
        let x_1482 : vec2<f32> = ((-(x_1476) * x_1478) + vec2<f32>(x_1480.x, x_1480.y));
        let x_1483 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1482.x, x_1482.y, x_1483.z, x_1483.w);
        let x_1485 : vec2<f32> = u_xlat46;
        u_xlat48 = max(x_1485, vec2<f32>(0.0f, 0.0f));
        let x_1487 : vec2<f32> = u_xlat48;
        let x_1489 : vec2<f32> = u_xlat48;
        let x_1491 : vec4<f32> = u_xlat7;
        let x_1493 : vec2<f32> = ((-(x_1487) * x_1489) + vec2<f32>(x_1491.y, x_1491.w));
        let x_1494 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_1493.x, x_1494.y, x_1493.y);
        let x_1496 : vec4<f32> = u_xlat8;
        let x_1498 : vec2<f32> = (vec2<f32>(x_1496.x, x_1496.y) + vec2<f32>(2.0f, 2.0f));
        let x_1499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1498.x, x_1498.y, x_1499.z, x_1499.w);
        let x_1501 : vec3<f32> = u_xlat27;
        let x_1503 : vec2<f32> = (vec2<f32>(x_1501.x, x_1501.z) + vec2<f32>(2.0f, 2.0f));
        let x_1504 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1504.x, x_1503.x, x_1504.z, x_1503.y);
        let x_1507 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1507 * 0.081632003f);
        let x_1511 : vec4<f32> = u_xlat7;
        let x_1514 : vec3<f32> = (vec3<f32>(x_1511.z, x_1511.x, x_1511.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1515 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1514.x, x_1514.y, x_1514.z, x_1515.w);
        let x_1517 : vec4<f32> = u_xlat8;
        let x_1520 : vec2<f32> = (vec2<f32>(x_1517.x, x_1517.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1521 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1520.x, x_1520.y, x_1521.z, x_1521.w);
        let x_1524 : f32 = u_xlat11.y;
        u_xlat10.x = x_1524;
        let x_1526 : vec2<f32> = u_xlat46;
        let x_1533 : vec2<f32> = ((vec2<f32>(x_1526.x, x_1526.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1534 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1534.x, x_1533.x, x_1534.z, x_1533.y);
        let x_1536 : vec2<f32> = u_xlat46;
        let x_1540 : vec2<f32> = ((vec2<f32>(x_1536.x, x_1536.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1541 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1540.x, x_1541.y, x_1540.y, x_1541.w);
        let x_1544 : f32 = u_xlat7.x;
        u_xlat8.y = x_1544;
        let x_1547 : f32 = u_xlat9.y;
        u_xlat8.w = x_1547;
        let x_1549 : vec4<f32> = u_xlat8;
        let x_1550 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1549 + x_1550);
        let x_1552 : vec2<f32> = u_xlat46;
        let x_1555 : vec2<f32> = ((vec2<f32>(x_1552.y, x_1552.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1556 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1556.x, x_1555.x, x_1556.z, x_1555.y);
        let x_1558 : vec2<f32> = u_xlat46;
        let x_1561 : vec2<f32> = ((vec2<f32>(x_1558.y, x_1558.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1562 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1561.x, x_1562.y, x_1561.y, x_1562.w);
        let x_1565 : f32 = u_xlat7.y;
        u_xlat9.y = x_1565;
        let x_1567 : vec4<f32> = u_xlat9;
        let x_1568 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1567 + x_1568);
        let x_1570 : vec4<f32> = u_xlat8;
        let x_1571 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1570 / x_1571);
        let x_1573 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1573 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1579 : vec4<f32> = u_xlat9;
        let x_1580 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1579 / x_1580);
        let x_1582 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1582 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1584 : vec4<f32> = u_xlat8;
        let x_1587 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1584.w, x_1584.x, x_1584.y, x_1584.z) * vec4<f32>(x_1587.x, x_1587.x, x_1587.x, x_1587.x));
        let x_1590 : vec4<f32> = u_xlat9;
        let x_1593 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1590.x, x_1590.w, x_1590.y, x_1590.z) * vec4<f32>(x_1593.y, x_1593.y, x_1593.y, x_1593.y));
        let x_1596 : vec4<f32> = u_xlat8;
        let x_1597 : vec3<f32> = vec3<f32>(x_1596.y, x_1596.z, x_1596.w);
        let x_1598 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1597.x, x_1598.y, x_1597.y, x_1597.z);
        let x_1601 : f32 = u_xlat9.x;
        u_xlat11.y = x_1601;
        let x_1603 : vec4<f32> = u_xlat6;
        let x_1606 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1609 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1603.x, x_1603.y, x_1603.x, x_1603.y) * vec4<f32>(x_1606.x, x_1606.y, x_1606.x, x_1606.y)) + vec4<f32>(x_1609.x, x_1609.y, x_1609.z, x_1609.y));
        let x_1612 : vec4<f32> = u_xlat6;
        let x_1615 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1618 : vec4<f32> = u_xlat11;
        u_xlat46 = ((vec2<f32>(x_1612.x, x_1612.y) * vec2<f32>(x_1615.x, x_1615.y)) + vec2<f32>(x_1618.w, x_1618.y));
        let x_1622 : f32 = u_xlat11.y;
        u_xlat8.y = x_1622;
        let x_1625 : f32 = u_xlat9.z;
        u_xlat11.y = x_1625;
        let x_1627 : vec4<f32> = u_xlat6;
        let x_1630 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1633 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1627.x, x_1627.y, x_1627.x, x_1627.y) * vec4<f32>(x_1630.x, x_1630.y, x_1630.x, x_1630.y)) + vec4<f32>(x_1633.x, x_1633.y, x_1633.z, x_1633.y));
        let x_1636 : vec4<f32> = u_xlat6;
        let x_1639 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1642 : vec4<f32> = u_xlat11;
        let x_1644 : vec2<f32> = ((vec2<f32>(x_1636.x, x_1636.y) * vec2<f32>(x_1639.x, x_1639.y)) + vec2<f32>(x_1642.w, x_1642.y));
        let x_1645 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1644.x, x_1644.y, x_1645.z, x_1645.w);
        let x_1648 : f32 = u_xlat11.y;
        u_xlat8.z = x_1648;
        let x_1651 : vec4<f32> = u_xlat6;
        let x_1654 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1657 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1651.x, x_1651.y, x_1651.x, x_1651.y) * vec4<f32>(x_1654.x, x_1654.y, x_1654.x, x_1654.y)) + vec4<f32>(x_1657.x, x_1657.y, x_1657.x, x_1657.z));
        let x_1661 : f32 = u_xlat9.w;
        u_xlat11.y = x_1661;
        let x_1664 : vec4<f32> = u_xlat6;
        let x_1667 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1670 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1664.x, x_1664.y, x_1664.x, x_1664.y) * vec4<f32>(x_1667.x, x_1667.y, x_1667.x, x_1667.y)) + vec4<f32>(x_1670.x, x_1670.y, x_1670.z, x_1670.y));
        let x_1674 : vec4<f32> = u_xlat6;
        let x_1677 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1680 : vec4<f32> = u_xlat11;
        let x_1682 : vec2<f32> = ((vec2<f32>(x_1674.x, x_1674.y) * vec2<f32>(x_1677.x, x_1677.y)) + vec2<f32>(x_1680.w, x_1680.y));
        let x_1683 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_1682.x, x_1682.y, x_1683.z);
        let x_1686 : f32 = u_xlat11.y;
        u_xlat8.w = x_1686;
        let x_1689 : vec4<f32> = u_xlat6;
        let x_1692 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1695 : vec4<f32> = u_xlat8;
        u_xlat54 = ((vec2<f32>(x_1689.x, x_1689.y) * vec2<f32>(x_1692.x, x_1692.y)) + vec2<f32>(x_1695.x, x_1695.w));
        let x_1698 : vec4<f32> = u_xlat11;
        let x_1699 : vec3<f32> = vec3<f32>(x_1698.x, x_1698.z, x_1698.w);
        let x_1700 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1699.x, x_1700.y, x_1699.y, x_1699.z);
        let x_1702 : vec4<f32> = u_xlat6;
        let x_1705 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1708 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1702.x, x_1702.y, x_1702.x, x_1702.y) * vec4<f32>(x_1705.x, x_1705.y, x_1705.x, x_1705.y)) + vec4<f32>(x_1708.x, x_1708.y, x_1708.z, x_1708.y));
        let x_1712 : vec4<f32> = u_xlat6;
        let x_1715 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1718 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1712.x, x_1712.y) * vec2<f32>(x_1715.x, x_1715.y)) + vec2<f32>(x_1718.w, x_1718.y));
        let x_1722 : f32 = u_xlat8.x;
        u_xlat9.x = x_1722;
        let x_1724 : vec4<f32> = u_xlat6;
        let x_1727 : vec4<f32> = x_859.x_MainLightShadowmapSize;
        let x_1730 : vec4<f32> = u_xlat9;
        let x_1732 : vec2<f32> = ((vec2<f32>(x_1724.x, x_1724.y) * vec2<f32>(x_1727.x, x_1727.y)) + vec2<f32>(x_1730.x, x_1730.y));
        let x_1733 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1732.x, x_1732.y, x_1733.z, x_1733.w);
        let x_1736 : vec4<f32> = u_xlat7;
        let x_1738 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1736.x, x_1736.x, x_1736.x, x_1736.x) * x_1738);
        let x_1741 : vec4<f32> = u_xlat7;
        let x_1743 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1741.y, x_1741.y, x_1741.y, x_1741.y) * x_1743);
        let x_1746 : vec4<f32> = u_xlat7;
        let x_1748 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1746.z, x_1746.z, x_1746.z, x_1746.z) * x_1748);
        let x_1750 : vec4<f32> = u_xlat7;
        let x_1752 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1750.w, x_1750.w, x_1750.w, x_1750.w) * x_1752);
        let x_1755 : vec4<f32> = u_xlat12;
        let x_1756 : vec2<f32> = vec2<f32>(x_1755.x, x_1755.y);
        let x_1758 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1756.x, x_1756.y, x_1758);
        let x_1765 : vec3<f32> = txVec13;
        let x_1767 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1765.xy, x_1765.z);
        u_xlat8.x = x_1767;
        let x_1770 : vec4<f32> = u_xlat12;
        let x_1771 : vec2<f32> = vec2<f32>(x_1770.z, x_1770.w);
        let x_1773 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1771.x, x_1771.y, x_1773);
        let x_1781 : vec3<f32> = txVec14;
        let x_1783 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1781.xy, x_1781.z);
        u_xlat68 = x_1783;
        let x_1784 : f32 = u_xlat68;
        let x_1786 : f32 = u_xlat17.y;
        u_xlat68 = (x_1784 * x_1786);
        let x_1789 : f32 = u_xlat17.x;
        let x_1791 : f32 = u_xlat8.x;
        let x_1793 : f32 = u_xlat68;
        u_xlat8.x = ((x_1789 * x_1791) + x_1793);
        let x_1797 : vec2<f32> = u_xlat46;
        let x_1799 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1797.x, x_1797.y, x_1799);
        let x_1806 : vec3<f32> = txVec15;
        let x_1808 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1806.xy, x_1806.z);
        u_xlat46.x = x_1808;
        let x_1811 : f32 = u_xlat17.z;
        let x_1813 : f32 = u_xlat46.x;
        let x_1816 : f32 = u_xlat8.x;
        u_xlat46.x = ((x_1811 * x_1813) + x_1816);
        let x_1820 : vec4<f32> = u_xlat15;
        let x_1821 : vec2<f32> = vec2<f32>(x_1820.x, x_1820.y);
        let x_1823 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1821.x, x_1821.y, x_1823);
        let x_1831 : vec3<f32> = txVec16;
        let x_1833 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1831.xy, x_1831.z);
        u_xlat66 = x_1833;
        let x_1835 : f32 = u_xlat17.w;
        let x_1836 : f32 = u_xlat66;
        let x_1839 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1835 * x_1836) + x_1839);
        let x_1843 : vec4<f32> = u_xlat13;
        let x_1844 : vec2<f32> = vec2<f32>(x_1843.x, x_1843.y);
        let x_1846 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1844.x, x_1844.y, x_1846);
        let x_1853 : vec3<f32> = txVec17;
        let x_1855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1853.xy, x_1853.z);
        u_xlat66 = x_1855;
        let x_1857 : f32 = u_xlat18.x;
        let x_1858 : f32 = u_xlat66;
        let x_1861 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1857 * x_1858) + x_1861);
        let x_1865 : vec4<f32> = u_xlat13;
        let x_1866 : vec2<f32> = vec2<f32>(x_1865.z, x_1865.w);
        let x_1868 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1866.x, x_1866.y, x_1868);
        let x_1875 : vec3<f32> = txVec18;
        let x_1877 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1875.xy, x_1875.z);
        u_xlat66 = x_1877;
        let x_1879 : f32 = u_xlat18.y;
        let x_1880 : f32 = u_xlat66;
        let x_1883 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1879 * x_1880) + x_1883);
        let x_1887 : vec4<f32> = u_xlat14;
        let x_1888 : vec2<f32> = vec2<f32>(x_1887.x, x_1887.y);
        let x_1890 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1888.x, x_1888.y, x_1890);
        let x_1897 : vec3<f32> = txVec19;
        let x_1899 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1897.xy, x_1897.z);
        u_xlat66 = x_1899;
        let x_1901 : f32 = u_xlat18.z;
        let x_1902 : f32 = u_xlat66;
        let x_1905 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1901 * x_1902) + x_1905);
        let x_1909 : vec4<f32> = u_xlat15;
        let x_1910 : vec2<f32> = vec2<f32>(x_1909.z, x_1909.w);
        let x_1912 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1910.x, x_1910.y, x_1912);
        let x_1919 : vec3<f32> = txVec20;
        let x_1921 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1919.xy, x_1919.z);
        u_xlat66 = x_1921;
        let x_1923 : f32 = u_xlat18.w;
        let x_1924 : f32 = u_xlat66;
        let x_1927 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1923 * x_1924) + x_1927);
        let x_1931 : vec4<f32> = u_xlat16;
        let x_1932 : vec2<f32> = vec2<f32>(x_1931.x, x_1931.y);
        let x_1934 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1932.x, x_1932.y, x_1934);
        let x_1941 : vec3<f32> = txVec21;
        let x_1943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1941.xy, x_1941.z);
        u_xlat66 = x_1943;
        let x_1945 : f32 = u_xlat19.x;
        let x_1946 : f32 = u_xlat66;
        let x_1949 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1945 * x_1946) + x_1949);
        let x_1953 : vec4<f32> = u_xlat16;
        let x_1954 : vec2<f32> = vec2<f32>(x_1953.z, x_1953.w);
        let x_1956 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_1954.x, x_1954.y, x_1956);
        let x_1963 : vec3<f32> = txVec22;
        let x_1965 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1963.xy, x_1963.z);
        u_xlat66 = x_1965;
        let x_1967 : f32 = u_xlat19.y;
        let x_1968 : f32 = u_xlat66;
        let x_1971 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1967 * x_1968) + x_1971);
        let x_1975 : vec3<f32> = u_xlat28;
        let x_1976 : vec2<f32> = vec2<f32>(x_1975.x, x_1975.y);
        let x_1978 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_1976.x, x_1976.y, x_1978);
        let x_1985 : vec3<f32> = txVec23;
        let x_1987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1985.xy, x_1985.z);
        u_xlat66 = x_1987;
        let x_1989 : f32 = u_xlat19.z;
        let x_1990 : f32 = u_xlat66;
        let x_1993 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1989 * x_1990) + x_1993);
        let x_1997 : vec2<f32> = u_xlat54;
        let x_1999 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_1997.x, x_1997.y, x_1999);
        let x_2006 : vec3<f32> = txVec24;
        let x_2008 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2006.xy, x_2006.z);
        u_xlat66 = x_2008;
        let x_2010 : f32 = u_xlat19.w;
        let x_2011 : f32 = u_xlat66;
        let x_2014 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2010 * x_2011) + x_2014);
        let x_2018 : vec4<f32> = u_xlat11;
        let x_2019 : vec2<f32> = vec2<f32>(x_2018.x, x_2018.y);
        let x_2021 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_2019.x, x_2019.y, x_2021);
        let x_2028 : vec3<f32> = txVec25;
        let x_2030 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2028.xy, x_2028.z);
        u_xlat66 = x_2030;
        let x_2032 : f32 = u_xlat7.x;
        let x_2033 : f32 = u_xlat66;
        let x_2036 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2032 * x_2033) + x_2036);
        let x_2040 : vec4<f32> = u_xlat11;
        let x_2041 : vec2<f32> = vec2<f32>(x_2040.z, x_2040.w);
        let x_2043 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_2041.x, x_2041.y, x_2043);
        let x_2050 : vec3<f32> = txVec26;
        let x_2052 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2050.xy, x_2050.z);
        u_xlat66 = x_2052;
        let x_2054 : f32 = u_xlat7.y;
        let x_2055 : f32 = u_xlat66;
        let x_2058 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2054 * x_2055) + x_2058);
        let x_2062 : vec2<f32> = u_xlat49;
        let x_2064 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_2062.x, x_2062.y, x_2064);
        let x_2071 : vec3<f32> = txVec27;
        let x_2073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2071.xy, x_2071.z);
        u_xlat66 = x_2073;
        let x_2075 : f32 = u_xlat7.z;
        let x_2076 : f32 = u_xlat66;
        let x_2079 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_2075 * x_2076) + x_2079);
        let x_2083 : vec4<f32> = u_xlat6;
        let x_2084 : vec2<f32> = vec2<f32>(x_2083.x, x_2083.y);
        let x_2086 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_2084.x, x_2084.y, x_2086);
        let x_2093 : vec3<f32> = txVec28;
        let x_2095 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2093.xy, x_2093.z);
        u_xlat6.x = x_2095;
        let x_2098 : f32 = u_xlat7.w;
        let x_2100 : f32 = u_xlat6.x;
        let x_2103 : f32 = u_xlat46.x;
        u_xlat65 = ((x_2098 * x_2100) + x_2103);
      }
    }
  } else {
    let x_2107 : vec4<f32> = vs_INTERP8;
    let x_2108 : vec2<f32> = vec2<f32>(x_2107.x, x_2107.y);
    let x_2110 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_2108.x, x_2108.y, x_2110);
    let x_2117 : vec3<f32> = txVec29;
    let x_2119 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2117.xy, x_2117.z);
    u_xlat65 = x_2119;
  }
  let x_2121 : f32 = x_859.x_MainLightShadowParams.x;
  u_xlat6.x = (-(x_2121) + 1.0f);
  let x_2125 : f32 = u_xlat65;
  let x_2127 : f32 = x_859.x_MainLightShadowParams.x;
  let x_2130 : f32 = u_xlat6.x;
  u_xlat65 = ((x_2125 * x_2127) + x_2130);
  let x_2133 : f32 = vs_INTERP8.z;
  u_xlatb6 = (0.0f >= x_2133);
  let x_2137 : f32 = vs_INTERP8.z;
  u_xlatb26 = (x_2137 >= 1.0f);
  let x_2139 : bool = u_xlatb26;
  let x_2140 : bool = u_xlatb6;
  u_xlatb6 = (x_2139 | x_2140);
  let x_2142 : bool = u_xlatb6;
  let x_2143 : f32 = u_xlat65;
  u_xlat65 = select(x_2143, 1.0f, x_2142);
  let x_2145 : vec3<f32> = vs_INTERP0;
  let x_2147 : vec3<f32> = x_146.x_WorldSpaceCameraPos;
  let x_2149 : vec3<f32> = (x_2145 + -(x_2147));
  let x_2150 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2149.x, x_2149.y, x_2149.z, x_2150.w);
  let x_2152 : vec4<f32> = u_xlat6;
  let x_2154 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_2152.x, x_2152.y, x_2152.z), vec3<f32>(x_2154.x, x_2154.y, x_2154.z));
  let x_2159 : f32 = u_xlat6.x;
  let x_2161 : f32 = x_859.x_MainLightShadowParams.z;
  let x_2164 : f32 = x_859.x_MainLightShadowParams.w;
  u_xlat6.x = ((x_2159 * x_2161) + x_2164);
  let x_2168 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_2168, 0.0f, 1.0f);
  let x_2171 : f32 = u_xlat65;
  u_xlat26 = (-(x_2171) + 1.0f);
  let x_2175 : f32 = u_xlat6.x;
  let x_2176 : f32 = u_xlat26;
  let x_2178 : f32 = u_xlat65;
  u_xlat65 = ((x_2175 * x_2176) + x_2178);
  let x_2180 : f32 = u_xlat45;
  let x_2183 : vec4<f32> = x_146.x_MainLightColor;
  let x_2185 : vec3<f32> = (vec3<f32>(x_2180, x_2180, x_2180) * vec3<f32>(x_2183.x, x_2183.y, x_2183.z));
  let x_2186 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2185.x, x_2185.y, x_2185.z, x_2186.w);
  let x_2188 : vec4<f32> = u_xlat1;
  let x_2191 : vec3<f32> = u_xlat20;
  u_xlat66 = dot(-(vec3<f32>(x_2188.x, x_2188.y, x_2188.z)), x_2191);
  let x_2193 : f32 = u_xlat66;
  let x_2194 : f32 = u_xlat66;
  u_xlat66 = (x_2193 + x_2194);
  let x_2196 : vec3<f32> = u_xlat20;
  let x_2197 : f32 = u_xlat66;
  let x_2201 : vec4<f32> = u_xlat1;
  let x_2204 : vec3<f32> = ((x_2196 * -(vec3<f32>(x_2197, x_2197, x_2197))) + -(vec3<f32>(x_2201.x, x_2201.y, x_2201.z)));
  let x_2205 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2204.x, x_2204.y, x_2204.z, x_2205.w);
  let x_2207 : vec3<f32> = u_xlat20;
  let x_2208 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(x_2207, vec3<f32>(x_2208.x, x_2208.y, x_2208.z));
  let x_2211 : f32 = u_xlat66;
  u_xlat66 = clamp(x_2211, 0.0f, 1.0f);
  let x_2213 : f32 = u_xlat66;
  u_xlat66 = (-(x_2213) + 1.0f);
  let x_2216 : f32 = u_xlat66;
  let x_2217 : f32 = u_xlat66;
  u_xlat66 = (x_2216 * x_2217);
  let x_2219 : f32 = u_xlat66;
  let x_2220 : f32 = u_xlat66;
  u_xlat66 = (x_2219 * x_2220);
  let x_2223 : f32 = u_xlat61;
  u_xlat67 = ((-(x_2223) * 0.699999988f) + 1.700000048f);
  let x_2229 : f32 = u_xlat61;
  let x_2230 : f32 = u_xlat67;
  u_xlat61 = (x_2229 * x_2230);
  let x_2232 : f32 = u_xlat61;
  u_xlat61 = (x_2232 * 6.0f);
  let x_2243 : vec4<f32> = u_xlat7;
  let x_2245 : f32 = u_xlat61;
  let x_2246 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2243.x, x_2243.y, x_2243.z), x_2245);
  u_xlat7 = x_2246;
  let x_2248 : f32 = u_xlat7.w;
  u_xlat61 = (x_2248 + -1.0f);
  let x_2251 : f32 = x_59.unity_SpecCube0_HDR.w;
  let x_2252 : f32 = u_xlat61;
  u_xlat61 = ((x_2251 * x_2252) + 1.0f);
  let x_2255 : f32 = u_xlat61;
  u_xlat61 = max(x_2255, 0.0f);
  let x_2257 : f32 = u_xlat61;
  u_xlat61 = log2(x_2257);
  let x_2259 : f32 = u_xlat61;
  let x_2261 : f32 = x_59.unity_SpecCube0_HDR.y;
  u_xlat61 = (x_2259 * x_2261);
  let x_2263 : f32 = u_xlat61;
  u_xlat61 = exp2(x_2263);
  let x_2265 : f32 = u_xlat61;
  let x_2267 : f32 = x_59.unity_SpecCube0_HDR.x;
  u_xlat61 = (x_2265 * x_2267);
  let x_2269 : vec4<f32> = u_xlat7;
  let x_2271 : f32 = u_xlat61;
  let x_2273 : vec3<f32> = (vec3<f32>(x_2269.x, x_2269.y, x_2269.z) * vec3<f32>(x_2271, x_2271, x_2271));
  let x_2274 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2273.x, x_2273.y, x_2273.z, x_2274.w);
  let x_2276 : f32 = u_xlat63;
  let x_2278 : f32 = u_xlat63;
  let x_2282 : vec2<f32> = ((vec2<f32>(x_2276, x_2276) * vec2<f32>(x_2278, x_2278)) + vec2<f32>(-1.0f, 1.0f));
  let x_2283 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2282.x, x_2282.y, x_2283.z, x_2283.w);
  let x_2286 : f32 = u_xlat8.y;
  u_xlat61 = (1.0f / x_2286);
  let x_2288 : vec3<f32> = u_xlat2;
  let x_2290 : vec4<f32> = u_xlat0;
  u_xlat28 = (-(x_2288) + vec3<f32>(x_2290.x, x_2290.x, x_2290.x));
  let x_2293 : f32 = u_xlat66;
  let x_2295 : vec3<f32> = u_xlat28;
  let x_2297 : vec3<f32> = u_xlat2;
  u_xlat28 = ((vec3<f32>(x_2293, x_2293, x_2293) * x_2295) + x_2297);
  let x_2299 : f32 = u_xlat61;
  let x_2301 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_2299, x_2299, x_2299) * x_2301);
  let x_2303 : vec4<f32> = u_xlat7;
  let x_2305 : vec3<f32> = u_xlat28;
  let x_2306 : vec3<f32> = (vec3<f32>(x_2303.x, x_2303.y, x_2303.z) * x_2305);
  let x_2307 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2306.x, x_2306.y, x_2306.z, x_2307.w);
  let x_2309 : vec4<f32> = u_xlat4;
  let x_2311 : vec3<f32> = u_xlat3;
  let x_2313 : vec4<f32> = u_xlat7;
  let x_2315 : vec3<f32> = ((vec3<f32>(x_2309.x, x_2309.y, x_2309.z) * x_2311) + vec3<f32>(x_2313.x, x_2313.y, x_2313.z));
  let x_2316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2315.x, x_2315.y, x_2315.z, x_2316.w);
  let x_2318 : f32 = u_xlat65;
  let x_2320 : f32 = x_59.unity_LightData.z;
  u_xlat0.x = (x_2318 * x_2320);
  let x_2323 : vec3<f32> = u_xlat20;
  let x_2325 : vec4<f32> = x_146.x_MainLightPosition;
  u_xlat61 = dot(x_2323, vec3<f32>(x_2325.x, x_2325.y, x_2325.z));
  let x_2328 : f32 = u_xlat61;
  u_xlat61 = clamp(x_2328, 0.0f, 1.0f);
  let x_2331 : f32 = u_xlat0.x;
  let x_2332 : f32 = u_xlat61;
  u_xlat0.x = (x_2331 * x_2332);
  let x_2335 : vec4<f32> = u_xlat0;
  let x_2337 : vec4<f32> = u_xlat6;
  let x_2339 : vec3<f32> = (vec3<f32>(x_2335.x, x_2335.x, x_2335.x) * vec3<f32>(x_2337.x, x_2337.y, x_2337.z));
  let x_2340 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2339.x, x_2339.y, x_2339.z, x_2340.w);
  let x_2342 : vec4<f32> = u_xlat1;
  let x_2345 : vec4<f32> = x_146.x_MainLightPosition;
  let x_2347 : vec3<f32> = (vec3<f32>(x_2342.x, x_2342.y, x_2342.z) + vec3<f32>(x_2345.x, x_2345.y, x_2345.z));
  let x_2348 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2347.x, x_2347.y, x_2347.z, x_2348.w);
  let x_2350 : vec4<f32> = u_xlat7;
  let x_2352 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(vec3<f32>(x_2350.x, x_2350.y, x_2350.z), vec3<f32>(x_2352.x, x_2352.y, x_2352.z));
  let x_2357 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2357, 1.17549435e-37f);
  let x_2361 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_2361);
  let x_2364 : vec4<f32> = u_xlat0;
  let x_2366 : vec4<f32> = u_xlat7;
  let x_2368 : vec3<f32> = (vec3<f32>(x_2364.x, x_2364.x, x_2364.x) * vec3<f32>(x_2366.x, x_2366.y, x_2366.z));
  let x_2369 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2368.x, x_2368.y, x_2368.z, x_2369.w);
  let x_2371 : vec3<f32> = u_xlat20;
  let x_2372 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_2371, vec3<f32>(x_2372.x, x_2372.y, x_2372.z));
  let x_2377 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_2377, 0.0f, 1.0f);
  let x_2381 : vec4<f32> = x_146.x_MainLightPosition;
  let x_2383 : vec4<f32> = u_xlat7;
  u_xlat61 = dot(vec3<f32>(x_2381.x, x_2381.y, x_2381.z), vec3<f32>(x_2383.x, x_2383.y, x_2383.z));
  let x_2386 : f32 = u_xlat61;
  u_xlat61 = clamp(x_2386, 0.0f, 1.0f);
  let x_2389 : f32 = u_xlat0.x;
  let x_2391 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2389 * x_2391);
  let x_2395 : f32 = u_xlat0.x;
  let x_2397 : f32 = u_xlat8.x;
  u_xlat0.x = ((x_2395 * x_2397) + 1.000010014f);
  let x_2402 : f32 = u_xlat61;
  let x_2403 : f32 = u_xlat61;
  u_xlat61 = (x_2402 * x_2403);
  let x_2406 : f32 = u_xlat0.x;
  let x_2408 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2406 * x_2408);
  let x_2411 : f32 = u_xlat61;
  u_xlat61 = max(x_2411, 0.100000001f);
  let x_2414 : f32 = u_xlat0.x;
  let x_2415 : f32 = u_xlat61;
  u_xlat0.x = (x_2414 * x_2415);
  let x_2418 : f32 = u_xlat25;
  let x_2420 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2418 * x_2420);
  let x_2423 : f32 = u_xlat64;
  let x_2425 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2423 / x_2425);
  let x_2428 : vec3<f32> = u_xlat2;
  let x_2429 : vec4<f32> = u_xlat0;
  let x_2432 : vec3<f32> = u_xlat3;
  let x_2433 : vec3<f32> = ((x_2428 * vec3<f32>(x_2429.x, x_2429.x, x_2429.x)) + x_2432);
  let x_2434 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2433.x, x_2433.y, x_2433.z, x_2434.w);
  let x_2436 : vec4<f32> = u_xlat6;
  let x_2438 : vec4<f32> = u_xlat7;
  let x_2440 : vec3<f32> = (vec3<f32>(x_2436.x, x_2436.y, x_2436.z) * vec3<f32>(x_2438.x, x_2438.y, x_2438.z));
  let x_2441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2440.x, x_2440.y, x_2440.z, x_2441.w);
  let x_2444 : f32 = x_146.x_AdditionalLightsCount.x;
  let x_2446 : f32 = x_59.unity_LightData.y;
  u_xlat0.x = min(x_2444, x_2446);
  let x_2452 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_2452));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2464 : u32 = u_xlatu_loop_1;
    let x_2465 : u32 = u_xlatu0;
    if ((x_2464 < x_2465)) {
    } else {
      break;
    }
    let x_2468 : u32 = u_xlatu_loop_1;
    u_xlatu63 = (x_2468 >> 2u);
    let x_2472 : u32 = u_xlatu_loop_1;
    u_xlati65 = bitcast<i32>((x_2472 & 3u));
    let x_2475 : u32 = u_xlatu63;
    let x_2478 : vec4<f32> = x_59.unity_LightIndices[bitcast<i32>(x_2475)];
    let x_2488 : i32 = u_xlati65;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2493 : vec4<u32> = indexable[x_2488];
    u_xlat63 = dot(x_2478, bitcast<vec4<f32>>(x_2493));
    let x_2497 : f32 = u_xlat63;
    u_xlati63 = i32(x_2497);
    let x_2499 : vec3<f32> = vs_INTERP0;
    let x_2511 : i32 = u_xlati63;
    let x_2513 : vec4<f32> = x_2510.x_AdditionalLightsPosition[x_2511];
    let x_2516 : i32 = u_xlati63;
    let x_2518 : vec4<f32> = x_2510.x_AdditionalLightsPosition[x_2516];
    u_xlat28 = ((-(x_2499) * vec3<f32>(x_2513.w, x_2513.w, x_2513.w)) + vec3<f32>(x_2518.x, x_2518.y, x_2518.z));
    let x_2521 : vec3<f32> = u_xlat28;
    let x_2522 : vec3<f32> = u_xlat28;
    u_xlat65 = dot(x_2521, x_2522);
    let x_2524 : f32 = u_xlat65;
    u_xlat65 = max(x_2524, 6.10351562e-05f);
    let x_2527 : f32 = u_xlat65;
    u_xlat66 = inverseSqrt(x_2527);
    let x_2529 : f32 = u_xlat66;
    let x_2531 : vec3<f32> = u_xlat28;
    let x_2532 : vec3<f32> = (vec3<f32>(x_2529, x_2529, x_2529) * x_2531);
    let x_2533 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2532.x, x_2532.y, x_2532.z, x_2533.w);
    let x_2535 : f32 = u_xlat65;
    u_xlat67 = (1.0f / x_2535);
    let x_2537 : f32 = u_xlat65;
    let x_2538 : i32 = u_xlati63;
    let x_2540 : f32 = x_2510.x_AdditionalLightsAttenuation[x_2538].x;
    u_xlat65 = (x_2537 * x_2540);
    let x_2542 : f32 = u_xlat65;
    let x_2544 : f32 = u_xlat65;
    u_xlat65 = ((-(x_2542) * x_2544) + 1.0f);
    let x_2547 : f32 = u_xlat65;
    u_xlat65 = max(x_2547, 0.0f);
    let x_2549 : f32 = u_xlat65;
    let x_2550 : f32 = u_xlat65;
    u_xlat65 = (x_2549 * x_2550);
    let x_2552 : f32 = u_xlat65;
    let x_2553 : f32 = u_xlat67;
    u_xlat65 = (x_2552 * x_2553);
    let x_2555 : i32 = u_xlati63;
    let x_2557 : vec4<f32> = x_2510.x_AdditionalLightsSpotDir[x_2555];
    let x_2559 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_2557.x, x_2557.y, x_2557.z), vec3<f32>(x_2559.x, x_2559.y, x_2559.z));
    let x_2562 : f32 = u_xlat67;
    let x_2563 : i32 = u_xlati63;
    let x_2565 : f32 = x_2510.x_AdditionalLightsAttenuation[x_2563].z;
    let x_2567 : i32 = u_xlati63;
    let x_2569 : f32 = x_2510.x_AdditionalLightsAttenuation[x_2567].w;
    u_xlat67 = ((x_2562 * x_2565) + x_2569);
    let x_2571 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2571, 0.0f, 1.0f);
    let x_2573 : f32 = u_xlat67;
    let x_2574 : f32 = u_xlat67;
    u_xlat67 = (x_2573 * x_2574);
    let x_2576 : f32 = u_xlat65;
    let x_2577 : f32 = u_xlat67;
    u_xlat65 = (x_2576 * x_2577);
    let x_2579 : f32 = u_xlat45;
    let x_2581 : i32 = u_xlati63;
    let x_2583 : vec4<f32> = x_2510.x_AdditionalLightsColor[x_2581];
    let x_2585 : vec3<f32> = (vec3<f32>(x_2579, x_2579, x_2579) * vec3<f32>(x_2583.x, x_2583.y, x_2583.z));
    let x_2586 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2585.x, x_2585.y, x_2585.z, x_2586.w);
    let x_2588 : vec3<f32> = u_xlat20;
    let x_2589 : vec4<f32> = u_xlat9;
    u_xlat63 = dot(x_2588, vec3<f32>(x_2589.x, x_2589.y, x_2589.z));
    let x_2592 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2592, 0.0f, 1.0f);
    let x_2594 : f32 = u_xlat63;
    let x_2595 : f32 = u_xlat65;
    u_xlat63 = (x_2594 * x_2595);
    let x_2597 : f32 = u_xlat63;
    let x_2599 : vec4<f32> = u_xlat10;
    let x_2601 : vec3<f32> = (vec3<f32>(x_2597, x_2597, x_2597) * vec3<f32>(x_2599.x, x_2599.y, x_2599.z));
    let x_2602 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2601.x, x_2601.y, x_2601.z, x_2602.w);
    let x_2604 : vec3<f32> = u_xlat28;
    let x_2605 : f32 = u_xlat66;
    let x_2608 : vec4<f32> = u_xlat1;
    u_xlat28 = ((x_2604 * vec3<f32>(x_2605, x_2605, x_2605)) + vec3<f32>(x_2608.x, x_2608.y, x_2608.z));
    let x_2611 : vec3<f32> = u_xlat28;
    let x_2612 : vec3<f32> = u_xlat28;
    u_xlat63 = dot(x_2611, x_2612);
    let x_2614 : f32 = u_xlat63;
    u_xlat63 = max(x_2614, 1.17549435e-37f);
    let x_2616 : f32 = u_xlat63;
    u_xlat63 = inverseSqrt(x_2616);
    let x_2618 : f32 = u_xlat63;
    let x_2620 : vec3<f32> = u_xlat28;
    u_xlat28 = (vec3<f32>(x_2618, x_2618, x_2618) * x_2620);
    let x_2622 : vec3<f32> = u_xlat20;
    let x_2623 : vec3<f32> = u_xlat28;
    u_xlat63 = dot(x_2622, x_2623);
    let x_2625 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2625, 0.0f, 1.0f);
    let x_2627 : vec4<f32> = u_xlat9;
    let x_2629 : vec3<f32> = u_xlat28;
    u_xlat65 = dot(vec3<f32>(x_2627.x, x_2627.y, x_2627.z), x_2629);
    let x_2631 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2631, 0.0f, 1.0f);
    let x_2633 : f32 = u_xlat63;
    let x_2634 : f32 = u_xlat63;
    u_xlat63 = (x_2633 * x_2634);
    let x_2636 : f32 = u_xlat63;
    let x_2638 : f32 = u_xlat8.x;
    u_xlat63 = ((x_2636 * x_2638) + 1.000010014f);
    let x_2641 : f32 = u_xlat65;
    let x_2642 : f32 = u_xlat65;
    u_xlat65 = (x_2641 * x_2642);
    let x_2644 : f32 = u_xlat63;
    let x_2645 : f32 = u_xlat63;
    u_xlat63 = (x_2644 * x_2645);
    let x_2647 : f32 = u_xlat65;
    u_xlat65 = max(x_2647, 0.100000001f);
    let x_2649 : f32 = u_xlat63;
    let x_2650 : f32 = u_xlat65;
    u_xlat63 = (x_2649 * x_2650);
    let x_2652 : f32 = u_xlat25;
    let x_2653 : f32 = u_xlat63;
    u_xlat63 = (x_2652 * x_2653);
    let x_2655 : f32 = u_xlat64;
    let x_2656 : f32 = u_xlat63;
    u_xlat63 = (x_2655 / x_2656);
    let x_2658 : vec3<f32> = u_xlat2;
    let x_2659 : f32 = u_xlat63;
    let x_2662 : vec3<f32> = u_xlat3;
    u_xlat28 = ((x_2658 * vec3<f32>(x_2659, x_2659, x_2659)) + x_2662);
    let x_2664 : vec3<f32> = u_xlat28;
    let x_2665 : vec4<f32> = u_xlat10;
    let x_2668 : vec4<f32> = u_xlat7;
    let x_2670 : vec3<f32> = ((x_2664 * vec3<f32>(x_2665.x, x_2665.y, x_2665.z)) + vec3<f32>(x_2668.x, x_2668.y, x_2668.z));
    let x_2671 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2670.x, x_2670.y, x_2670.z, x_2671.w);

    continuing {
      let x_2673 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2673 + bitcast<u32>(1i));
    }
  }
  let x_2675 : vec4<f32> = u_xlat4;
  let x_2677 : vec3<f32> = u_xlat5;
  let x_2680 : vec4<f32> = u_xlat6;
  let x_2682 : vec3<f32> = ((vec3<f32>(x_2675.x, x_2675.y, x_2675.z) * vec3<f32>(x_2677.x, x_2677.x, x_2677.x)) + vec3<f32>(x_2680.x, x_2680.y, x_2680.z));
  let x_2683 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2682.x, x_2682.y, x_2682.z, x_2683.w);
  let x_2685 : vec4<f32> = u_xlat7;
  let x_2687 : vec4<f32> = u_xlat0;
  let x_2689 : vec3<f32> = (vec3<f32>(x_2685.x, x_2685.y, x_2685.z) + vec3<f32>(x_2687.x, x_2687.y, x_2687.z));
  let x_2690 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2689.x, x_2689.y, x_2689.z, x_2690.w);
  let x_2693 : f32 = u_xlat62;
  let x_2694 : f32 = u_xlat62;
  u_xlat60 = (x_2693 * -(x_2694));
  let x_2697 : f32 = u_xlat60;
  u_xlat60 = exp2(x_2697);
  let x_2699 : vec4<f32> = u_xlat0;
  let x_2703 : vec4<f32> = x_146.unity_FogColor;
  let x_2706 : vec3<f32> = (vec3<f32>(x_2699.x, x_2699.y, x_2699.z) + -(vec3<f32>(x_2703.x, x_2703.y, x_2703.z)));
  let x_2707 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2706.x, x_2706.y, x_2706.z, x_2707.w);
  let x_2711 : f32 = u_xlat60;
  let x_2713 : vec4<f32> = u_xlat0;
  let x_2717 : vec4<f32> = x_146.unity_FogColor;
  let x_2719 : vec3<f32> = ((vec3<f32>(x_2711, x_2711, x_2711) * vec3<f32>(x_2713.x, x_2713.y, x_2713.z)) + vec3<f32>(x_2717.x, x_2717.y, x_2717.z));
  let x_2720 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2719.x, x_2719.y, x_2719.z, x_2720.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>, @location(5) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0);
}

