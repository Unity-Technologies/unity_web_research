type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb2 : vec4<bool>;
  var x_464 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var x_473 : vec3<f32>;
  var x_484 : vec3<f32>;
  var x_495 : vec3<f32>;
  var x_506 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_99 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_101 : vec2<f32> = vs_TEXCOORD0;
  let x_106 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_108 : vec3<f32> = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_113 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_115 : vec3<f32> = u_xlat8;
  let x_118 : vec4<f32> = u_xlat1;
  let x_120 : vec3<f32> = ((vec3<f32>(x_113.x, x_113.y, x_113.z) * vec3<f32>(x_115.x, x_115.x, x_115.x)) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_123 : f32 = u_xlat16;
  let x_125 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_123, x_123, x_123) * vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_131 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_131 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_136 : vec3<f32> = u_xlat9;
  let x_138 : vec2<f32> = vs_TEXCOORD0;
  let x_139 : vec2<f32> = (vec2<f32>(x_136.x, x_136.y) + x_138);
  let x_140 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_139.x, x_139.y, x_140.z);
  let x_145 : vec3<f32> = u_xlat9;
  let x_148 : f32 = x_33.x_GlobalMipBias.x;
  let x_149 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_145.x, x_145.y), x_148);
  u_xlat1.x = x_149.x;
  let x_153 : f32 = x_33.x_ZBufferParams.z;
  let x_155 : f32 = u_xlat1.x;
  let x_158 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_153 * x_155) + x_158);
  let x_162 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_162);
  let x_167 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_167 * 2.0f);
  u_xlat2.y = 0.0f;
  u_xlat18.y = 0.0f;
  let x_176 : vec4<f32> = u_xlat2;
  let x_178 : vec2<f32> = vs_TEXCOORD0;
  let x_179 : vec2<f32> = (vec2<f32>(x_176.x, x_176.y) + x_178);
  let x_180 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_179.x, x_179.y, x_180.z, x_180.w);
  let x_185 : vec4<f32> = u_xlat3;
  let x_188 : f32 = x_33.x_GlobalMipBias.x;
  let x_189 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_185.x, x_185.y), x_188);
  u_xlat1.x = x_189.x;
  let x_193 : f32 = x_33.x_ZBufferParams.z;
  let x_195 : f32 = u_xlat1.x;
  let x_198 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_193 * x_195) + x_198);
  let x_202 : f32 = u_xlat1.x;
  u_xlat3.z = (1.0f / x_202);
  u_xlat12.x = 0.0f;
  let x_208 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_208 * 2.0f);
  let x_211 : vec3<f32> = u_xlat12;
  let x_213 : vec2<f32> = vs_TEXCOORD0;
  let x_214 : vec2<f32> = (vec2<f32>(x_211.x, x_211.y) + x_213);
  let x_215 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_214.x, x_214.y, x_215.z);
  let x_220 : vec3<f32> = u_xlat12;
  let x_223 : f32 = x_33.x_GlobalMipBias.x;
  let x_224 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_220.x, x_220.y), x_223);
  u_xlat1.x = x_224.x;
  let x_228 : f32 = x_33.x_ZBufferParams.z;
  let x_230 : f32 = u_xlat1.x;
  let x_233 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_228 * x_230) + x_233);
  let x_237 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_237);
  u_xlat13.x = 0.0f;
  let x_243 : f32 = x_33.x_SourceSize.w;
  u_xlat13.y = (x_243 * -2.0f);
  let x_246 : vec3<f32> = u_xlat13;
  let x_248 : vec2<f32> = vs_TEXCOORD0;
  let x_249 : vec2<f32> = (vec2<f32>(x_246.x, x_246.y) + x_248);
  let x_250 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_249.x, x_249.y, x_250.z);
  let x_255 : vec3<f32> = u_xlat13;
  let x_258 : f32 = x_33.x_GlobalMipBias.x;
  let x_259 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_255.x, x_255.y), x_258);
  u_xlat1.x = x_259.x;
  let x_263 : f32 = x_33.x_ZBufferParams.z;
  let x_265 : f32 = u_xlat1.x;
  let x_268 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_263 * x_265) + x_268);
  let x_272 : f32 = u_xlat1.x;
  u_xlat13.z = (1.0f / x_272);
  let x_276 : f32 = x_33.x_SourceSize.z;
  u_xlat18.x = x_276;
  let x_278 : vec2<f32> = u_xlat18;
  let x_284 : vec2<f32> = vs_TEXCOORD0;
  u_xlat2 = ((vec4<f32>(x_278.x, x_278.y, x_278.x, x_278.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_284.x, x_284.y, x_284.x, x_284.y));
  let x_290 : vec4<f32> = u_xlat2;
  let x_293 : f32 = x_33.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat1.x = x_294.x;
  let x_298 : f32 = x_33.x_ZBufferParams.z;
  let x_300 : f32 = u_xlat1.x;
  let x_303 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_298 * x_300) + x_303);
  let x_307 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_307);
  let x_313 : vec4<f32> = u_xlat2;
  let x_316 : f32 = x_33.x_GlobalMipBias.x;
  let x_317 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_313.z, x_313.w), x_316);
  u_xlat2.x = x_317.x;
  let x_321 : f32 = x_33.x_ZBufferParams.z;
  let x_323 : f32 = u_xlat2.x;
  let x_326 : f32 = x_33.x_ZBufferParams.w;
  u_xlat2.x = ((x_321 * x_323) + x_326);
  let x_330 : f32 = u_xlat2.x;
  u_xlat2.x = (1.0f / x_330);
  u_xlat6.x = 2.0f;
  let x_336 : f32 = x_33.x_SourceSize.w;
  u_xlat6.y = x_336;
  let x_339 : vec4<f32> = u_xlat6;
  let x_342 : vec2<f32> = vs_TEXCOORD0;
  u_xlat6 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_339.x, x_339.y, x_339.x, x_339.y)) + vec4<f32>(x_342.x, x_342.y, x_342.x, x_342.y));
  let x_349 : vec4<f32> = u_xlat6;
  let x_352 : f32 = x_33.x_GlobalMipBias.x;
  let x_353 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_349.x, x_349.y), x_352);
  u_xlat10.x = x_353.x;
  let x_357 : f32 = x_33.x_ZBufferParams.z;
  let x_359 : f32 = u_xlat10.x;
  let x_362 : f32 = x_33.x_ZBufferParams.w;
  u_xlat10.x = ((x_357 * x_359) + x_362);
  let x_366 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_366);
  let x_372 : vec4<f32> = u_xlat6;
  let x_375 : f32 = x_33.x_GlobalMipBias.x;
  let x_376 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_372.z, x_372.w), x_375);
  u_xlat18.x = x_376.x;
  let x_380 : f32 = x_33.x_ZBufferParams.z;
  let x_382 : f32 = u_xlat18.x;
  let x_385 : f32 = x_33.x_ZBufferParams.w;
  u_xlat18.x = ((x_380 * x_382) + x_385);
  let x_389 : f32 = u_xlat18.x;
  u_xlat18.x = (1.0f / x_389);
  let x_393 : f32 = u_xlat9.z;
  let x_396 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_393 * 2.0f) + -(x_396));
  let x_400 : f32 = u_xlat0;
  let x_403 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_400) + x_403);
  let x_407 : f32 = u_xlat3.z;
  let x_410 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_407 * 2.0f) + -(x_410));
  let x_414 : f32 = u_xlat0;
  let x_417 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_414) + x_417);
  let x_422 : f32 = u_xlat1.x;
  let x_425 : f32 = u_xlat2.x;
  u_xlatb1 = (abs(x_422) < abs(x_425));
  let x_429 : f32 = u_xlat13.z;
  let x_432 : f32 = u_xlat18.x;
  u_xlat2.x = ((x_429 * 2.0f) + -(x_432));
  let x_437 : f32 = u_xlat12.z;
  let x_440 : f32 = u_xlat10.x;
  u_xlat2.y = ((x_437 * 2.0f) + -(x_440));
  let x_444 : f32 = u_xlat0;
  let x_447 : vec4<f32> = u_xlat2;
  let x_449 : vec2<f32> = (-(vec2<f32>(x_444, x_444)) + vec2<f32>(x_447.x, x_447.y));
  let x_450 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_449.x, x_449.y, x_450.z, x_450.w);
  let x_456 : f32 = u_xlat2.x;
  let x_459 : f32 = u_xlat2.y;
  u_xlatb2.x = (abs(x_456) < abs(x_459));
  let x_463 : bool = u_xlatb1;
  if (x_463) {
    let x_467 : vec3<f32> = u_xlat9;
    x_464 = x_467;
  } else {
    let x_469 : vec3<f32> = u_xlat13;
    x_464 = x_469;
  }
  let x_470 : vec3<f32> = x_464;
  u_xlat10 = x_470;
  let x_472 : bool = u_xlatb1;
  if (x_472) {
    let x_476 : vec3<f32> = u_xlat13;
    x_473 = x_476;
  } else {
    let x_478 : vec4<f32> = u_xlat3;
    x_473 = vec3<f32>(x_478.x, x_478.y, x_478.z);
  }
  let x_480 : vec3<f32> = x_473;
  let x_481 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_481.x, x_480.x, x_480.y, x_480.z);
  let x_483 : bool = u_xlatb1;
  if (x_483) {
    let x_487 : vec3<f32> = u_xlat12;
    x_484 = x_487;
  } else {
    let x_489 : vec4<f32> = u_xlat3;
    x_484 = vec3<f32>(x_489.x, x_489.y, x_489.z);
  }
  let x_491 : vec3<f32> = x_484;
  let x_492 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_491.x, x_491.y, x_491.z, x_492.w);
  let x_494 : bool = u_xlatb1;
  if (x_494) {
    let x_498 : vec3<f32> = u_xlat9;
    x_495 = x_498;
  } else {
    let x_500 : vec3<f32> = u_xlat12;
    x_495 = x_500;
  }
  let x_501 : vec3<f32> = x_495;
  let x_502 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_502.x, x_501.x, x_501.y, x_501.z);
  let x_505 : bool = u_xlatb2.x;
  if (x_505) {
    let x_509 : vec3<f32> = u_xlat10;
    x_506 = vec2<f32>(x_509.x, x_509.y);
  } else {
    let x_512 : vec4<f32> = u_xlat3;
    x_506 = vec2<f32>(x_512.x, x_512.y);
  }
  let x_514 : vec2<f32> = x_506;
  let x_515 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_514.x, x_514.y, x_515.z);
  let x_518 : f32 = u_xlat10.z;
  u_xlat5.x = x_518;
  let x_521 : f32 = u_xlat3.z;
  u_xlat1.x = x_521;
  let x_524 : bool = u_xlatb2.x;
  let x_525 : vec4<f32> = u_xlat5;
  let x_526 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_526, x_525, vec4<bool>(x_524, x_524, x_524, x_524));
  let x_531 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_531) + 1.0f);
  let x_534 : vec4<f32> = u_xlat1;
  let x_537 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_539 : vec2<f32> = (vec2<f32>(x_534.w, x_534.x) * vec2<f32>(x_537.x, x_537.x));
  let x_540 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_539.x, x_540.y, x_540.z, x_539.y);
  let x_543 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_545 : vec4<f32> = u_xlat1;
  let x_549 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_551 : vec3<f32> = ((vec3<f32>(x_543.z, x_543.x, x_543.y) * vec3<f32>(x_545.y, x_545.y, x_545.y)) + vec3<f32>(x_549.z, x_549.x, x_549.y));
  let x_552 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_551.x, x_551.y, x_551.z, x_552.w);
  let x_555 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_557 : f32 = u_xlat17;
  let x_560 : vec4<f32> = u_xlat3;
  let x_562 : vec3<f32> = ((vec3<f32>(x_555.z, x_555.x, x_555.y) * vec3<f32>(x_557, x_557, x_557)) + vec3<f32>(x_560.x, x_560.y, x_560.z));
  let x_563 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_562.x, x_562.y, x_562.z, x_563.w);
  let x_565 : vec4<f32> = u_xlat3;
  let x_567 : vec4<f32> = u_xlat1;
  let x_570 : vec3<f32> = u_xlat8;
  let x_573 : vec3<f32> = ((vec3<f32>(x_565.x, x_565.y, x_565.z) * vec3<f32>(x_567.x, x_567.x, x_567.x)) + -(vec3<f32>(x_570.z, x_570.x, x_570.y)));
  let x_574 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_573.x, x_573.y, x_573.z, x_574.w);
  let x_577 : f32 = u_xlat10.y;
  u_xlat2.x = (-(x_577) + 1.0f);
  let x_582 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_584 : vec3<f32> = u_xlat10;
  let x_588 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat10 = ((vec3<f32>(x_582.y, x_582.z, x_582.x) * vec3<f32>(x_584.x, x_584.x, x_584.x)) + vec3<f32>(x_588.y, x_588.z, x_588.x));
  let x_592 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_594 : vec4<f32> = u_xlat2;
  let x_597 : vec3<f32> = u_xlat10;
  let x_598 : vec3<f32> = ((vec3<f32>(x_592.y, x_592.z, x_592.x) * vec3<f32>(x_594.x, x_594.x, x_594.x)) + x_597);
  let x_599 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_598.x, x_598.y, x_598.z, x_599.w);
  let x_601 : vec4<f32> = u_xlat2;
  let x_603 : vec4<f32> = u_xlat1;
  let x_606 : vec3<f32> = u_xlat8;
  let x_609 : vec3<f32> = ((vec3<f32>(x_601.x, x_601.y, x_601.z) * vec3<f32>(x_603.w, x_603.w, x_603.w)) + -(vec3<f32>(x_606.y, x_606.z, x_606.x)));
  let x_610 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
  let x_612 : vec4<f32> = u_xlat1;
  let x_614 : vec4<f32> = u_xlat2;
  let x_616 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) * vec3<f32>(x_614.x, x_614.y, x_614.z));
  let x_617 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_616.x, x_616.y, x_616.z, x_617.w);
  let x_619 : vec4<f32> = u_xlat1;
  let x_621 : vec4<f32> = u_xlat2;
  let x_624 : vec4<f32> = u_xlat3;
  let x_627 : vec3<f32> = ((vec3<f32>(x_619.z, x_619.x, x_619.y) * vec3<f32>(x_621.y, x_621.z, x_621.x)) + -(vec3<f32>(x_624.x, x_624.y, x_624.z)));
  let x_628 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_627.x, x_627.y, x_627.z, x_628.w);
  let x_631 : vec4<f32> = u_xlat1;
  let x_633 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_631.x, x_631.y, x_631.z), vec3<f32>(x_633.x, x_633.y, x_633.z));
  let x_636 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_636);
  let x_638 : f32 = u_xlat25;
  let x_640 : vec4<f32> = u_xlat1;
  let x_642 : vec3<f32> = (vec3<f32>(x_638, x_638, x_638) * vec3<f32>(x_640.x, x_640.y, x_640.z));
  let x_643 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_642.x, x_642.y, x_642.z, x_643.w);
  let x_645 : vec2<f32> = vs_TEXCOORD0;
  let x_648 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_650 : vec2<f32> = (x_645 + vec2<f32>(x_648.z, x_648.w));
  let x_651 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_650.x, x_650.y, x_651.z, x_651.w);
  let x_653 : vec4<f32> = u_xlat2;
  let x_656 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_653.x, x_653.y) * vec2<f32>(x_656.x, x_656.y));
  let x_664 : vec2<f32> = u_xlat18;
  let x_666 : f32 = x_33.x_GlobalMipBias.x;
  let x_667 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_664, x_666);
  u_xlat25 = x_667.w;
  let x_669 : f32 = u_xlat25;
  u_xlat18.x = fract(x_669);
  let x_673 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_673 * 2.0f) + -1.0f);
  let x_678 : f32 = u_xlat25;
  u_xlat25 = (x_678 + 0.9296875f);
  let x_681 : f32 = u_xlat25;
  u_xlat25 = (x_681 * 628.31854248f);
  let x_685 : f32 = u_xlat3.z;
  let x_688 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_685) * x_688) + 1.0f);
  let x_693 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_693);
  let x_697 : f32 = u_xlat25;
  u_xlat4.x = sin(x_697);
  let x_700 : f32 = u_xlat25;
  u_xlat5.x = cos(x_700);
  let x_704 : f32 = u_xlat18.x;
  let x_706 : f32 = u_xlat5.x;
  u_xlat3.x = (x_704 * x_706);
  let x_710 : f32 = u_xlat18.x;
  let x_712 : f32 = u_xlat4.x;
  u_xlat3.y = (x_710 * x_712);
  let x_715 : vec4<f32> = u_xlat1;
  let x_717 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_715.x, x_715.y, x_715.z), vec3<f32>(x_717.x, x_717.y, x_717.z));
  let x_721 : f32 = u_xlat25;
  u_xlatb25 = (x_721 >= 0.0f);
  let x_723 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_723);
  let x_725 : f32 = u_xlat25;
  let x_727 : vec4<f32> = u_xlat3;
  let x_729 : vec3<f32> = (vec3<f32>(x_725, x_725, x_725) * vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_730 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_729.x, x_729.y, x_729.z, x_730.w);
  let x_732 : vec4<f32> = u_xlat3;
  let x_735 : vec4<f32> = x_33.x_SSAOParams;
  let x_737 : vec3<f32> = (vec3<f32>(x_732.x, x_732.y, x_732.z) * vec3<f32>(x_735.y, x_735.y, x_735.y));
  let x_738 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_737.x, x_737.y, x_737.z, x_738.w);
  let x_740 : vec4<f32> = u_xlat3;
  let x_745 : vec3<f32> = u_xlat8;
  let x_746 : vec3<f32> = ((vec3<f32>(x_740.x, x_740.y, x_740.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_745);
  let x_747 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_746.x, x_746.y, x_746.z, x_747.w);
  let x_749 : vec4<f32> = u_xlat3;
  let x_753 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_749.y, x_749.y) * vec2<f32>(x_753.x, x_753.y));
  let x_757 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_759 : vec4<f32> = u_xlat3;
  let x_762 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_759.x, x_759.x)) + x_762);
  let x_766 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_768 : vec4<f32> = u_xlat3;
  let x_771 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_766.x, x_766.y) * vec2<f32>(x_768.z, x_768.z)) + x_771);
  let x_774 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_774;
  let x_777 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_777;
  let x_780 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_780;
  let x_782 : vec3<f32> = u_xlat4;
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_782, vec3<f32>(x_783.x, x_783.y, x_783.z));
  let x_786 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_786));
  let x_790 : vec2<f32> = u_xlat18;
  let x_791 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_790 * vec2<f32>(x_791.x, x_791.x)) + vec2<f32>(1.0f, 1.0f));
  let x_796 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_796 * vec2<f32>(0.5f, 0.5f));
  let x_799 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_799, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_806 : vec2<f32> = u_xlat18;
  let x_808 : f32 = x_33.x_GlobalMipBias.x;
  let x_809 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_806, x_808);
  u_xlat3.x = x_809.x;
  let x_814 : f32 = x_33.x_ZBufferParams.z;
  let x_816 : f32 = u_xlat3.x;
  let x_819 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_814 * x_816) + x_819);
  let x_823 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_823);
  let x_826 : f32 = u_xlat25;
  let x_829 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_826) + -(x_829));
  let x_832 : f32 = u_xlat25;
  let x_835 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_832) < x_835);
  let x_837 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_837);
  let x_843 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_843);
  let x_847 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_847);
  let x_850 : f32 = u_xlat25;
  let x_852 : f32 = u_xlat3.x;
  u_xlat25 = (x_850 * x_852);
  let x_856 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_856) + 1.0f);
  let x_860 : f32 = u_xlat11.x;
  let x_862 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_860 * x_862);
  let x_866 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_868 : vec2<f32> = u_xlat18;
  let x_872 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_866.x, x_866.y, x_866.z) * vec3<f32>(x_868.x, x_868.x, x_868.x)) + vec3<f32>(x_872.x, x_872.y, x_872.z));
  let x_876 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_878 : f32 = u_xlat26;
  let x_881 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_876.x, x_876.y, x_876.z) * vec3<f32>(x_878, x_878, x_878)) + x_881);
  let x_883 : vec3<f32> = u_xlat11;
  let x_884 : vec4<f32> = u_xlat3;
  let x_887 : vec3<f32> = u_xlat8;
  let x_889 : vec3<f32> = ((x_883 * vec3<f32>(x_884.x, x_884.x, x_884.x)) + -(x_887));
  let x_890 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_889.x, x_889.y, x_889.z, x_890.w);
  let x_892 : vec4<f32> = u_xlat3;
  let x_894 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_898 : f32 = u_xlat0;
  let x_903 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_898) * 0.004f) + x_903);
  let x_907 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_907, 0.0f);
  let x_910 : vec4<f32> = u_xlat3;
  let x_912 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_910.x, x_910.y, x_910.z), vec3<f32>(x_912.x, x_912.y, x_912.z));
  let x_915 : f32 = u_xlat26;
  u_xlat26 = (x_915 + 0.0001f);
  let x_918 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_918);
  let x_920 : f32 = u_xlat26;
  let x_922 : f32 = u_xlat18.x;
  u_xlat18.x = (x_920 * x_922);
  let x_925 : vec4<f32> = u_xlat2;
  let x_928 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_925.x, x_925.y, x_925.x, x_925.y) * vec4<f32>(x_928.x, x_928.y, x_928.x, x_928.y)) + vec4<f32>(0.125f, 0.125f, 0.25f, 0.25f));
  let x_938 : vec4<f32> = u_xlat3;
  let x_941 : f32 = x_33.x_GlobalMipBias.x;
  let x_942 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_938.x, x_938.y), x_941);
  u_xlat26 = x_942.w;
  let x_944 : f32 = u_xlat26;
  let x_949 : vec2<f32> = (vec2<f32>(x_944, x_944) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_950 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_949.x, x_949.y, x_950.z, x_950.w);
  let x_953 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_953);
  let x_955 : f32 = u_xlat26;
  u_xlat5.z = ((x_955 * 2.0f) + -1.0f);
  let x_960 : f32 = u_xlat3.y;
  u_xlat26 = (x_960 * 628.31854248f);
  let x_963 : f32 = u_xlat5.z;
  let x_966 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_963) * x_966) + 1.0f);
  let x_971 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_971);
  let x_974 : f32 = u_xlat26;
  u_xlat6.x = sin(x_974);
  let x_978 : f32 = u_xlat26;
  u_xlat7 = cos(x_978);
  let x_981 : f32 = u_xlat3.x;
  let x_982 : f32 = u_xlat7;
  u_xlat5.x = (x_981 * x_982);
  let x_986 : f32 = u_xlat3.x;
  let x_988 : f32 = u_xlat6.x;
  u_xlat5.y = (x_986 * x_988);
  let x_991 : vec4<f32> = u_xlat1;
  let x_993 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_991.x, x_991.y, x_991.z), vec3<f32>(x_993.x, x_993.y, x_993.z));
  let x_997 : f32 = u_xlat26;
  u_xlatb26 = (x_997 >= 0.0f);
  let x_999 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_999);
  let x_1001 : f32 = u_xlat26;
  let x_1003 : vec4<f32> = u_xlat5;
  let x_1005 : vec3<f32> = (vec3<f32>(x_1001, x_1001, x_1001) * vec3<f32>(x_1003.x, x_1003.y, x_1003.z));
  let x_1006 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1005.x, x_1005.y, x_1005.z, x_1006.w);
  let x_1008 : vec4<f32> = u_xlat5;
  let x_1011 : vec4<f32> = x_33.x_SSAOParams;
  let x_1013 : vec3<f32> = (vec3<f32>(x_1008.x, x_1008.y, x_1008.z) * vec3<f32>(x_1011.y, x_1011.y, x_1011.y));
  let x_1014 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1013.x, x_1013.y, x_1013.z, x_1014.w);
  let x_1016 : vec4<f32> = u_xlat5;
  let x_1021 : vec3<f32> = u_xlat8;
  let x_1022 : vec3<f32> = ((vec3<f32>(x_1016.x, x_1016.y, x_1016.z) * vec3<f32>(0.114062503f, 0.114062503f, 0.114062503f)) + x_1021);
  let x_1023 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1022.x, x_1022.y, x_1022.z, x_1023.w);
  let x_1025 : vec4<f32> = u_xlat5;
  let x_1028 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1030 : vec2<f32> = (vec2<f32>(x_1025.y, x_1025.y) * vec2<f32>(x_1028.x, x_1028.y));
  let x_1031 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1030.x, x_1030.y, x_1031.z, x_1031.w);
  let x_1034 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1036 : vec4<f32> = u_xlat5;
  let x_1039 : vec4<f32> = u_xlat3;
  let x_1041 : vec2<f32> = ((vec2<f32>(x_1034.x, x_1034.y) * vec2<f32>(x_1036.x, x_1036.x)) + vec2<f32>(x_1039.x, x_1039.y));
  let x_1042 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1041.x, x_1041.y, x_1042.z, x_1042.w);
  let x_1045 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1047 : vec4<f32> = u_xlat5;
  let x_1050 : vec4<f32> = u_xlat3;
  let x_1052 : vec2<f32> = ((vec2<f32>(x_1045.x, x_1045.y) * vec2<f32>(x_1047.z, x_1047.z)) + vec2<f32>(x_1050.x, x_1050.y));
  let x_1053 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1052.x, x_1052.y, x_1053.z, x_1053.w);
  let x_1055 : vec3<f32> = u_xlat4;
  let x_1056 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(x_1055, vec3<f32>(x_1056.x, x_1056.y, x_1056.z));
  let x_1060 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_1060));
  let x_1063 : vec4<f32> = u_xlat3;
  let x_1065 : f32 = u_xlat28;
  let x_1068 : vec2<f32> = ((vec2<f32>(x_1063.x, x_1063.y) * vec2<f32>(x_1065, x_1065)) + vec2<f32>(1.0f, 1.0f));
  let x_1069 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
  let x_1071 : vec4<f32> = u_xlat3;
  let x_1073 : vec2<f32> = (vec2<f32>(x_1071.x, x_1071.y) * vec2<f32>(0.5f, 0.5f));
  let x_1074 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1073.x, x_1073.y, x_1074.z, x_1074.w);
  let x_1076 : vec4<f32> = u_xlat3;
  let x_1080 : vec2<f32> = clamp(vec2<f32>(x_1076.x, x_1076.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1081 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1080.x, x_1080.y, x_1081.z, x_1081.w);
  let x_1086 : vec4<f32> = u_xlat3;
  let x_1089 : f32 = x_33.x_GlobalMipBias.x;
  let x_1090 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1086.x, x_1086.y), x_1089);
  u_xlat28 = x_1090.x;
  let x_1093 : f32 = x_33.x_ZBufferParams.z;
  let x_1094 : f32 = u_xlat28;
  let x_1097 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_1093 * x_1094) + x_1097);
  let x_1101 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_1101);
  let x_1104 : f32 = u_xlat26;
  let x_1107 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_1104) + -(x_1107));
  let x_1110 : f32 = u_xlat26;
  let x_1113 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_1110) < x_1113);
  let x_1115 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_1115);
  let x_1118 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_1118);
  let x_1120 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_1120);
  let x_1122 : f32 = u_xlat26;
  let x_1123 : f32 = u_xlat28;
  u_xlat26 = (x_1122 * x_1123);
  let x_1126 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_1126) + 1.0f);
  let x_1131 : f32 = u_xlat5.x;
  let x_1133 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_1131 * x_1133);
  let x_1136 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1138 : vec4<f32> = u_xlat3;
  let x_1142 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1144 : vec3<f32> = ((vec3<f32>(x_1136.x, x_1136.y, x_1136.z) * vec3<f32>(x_1138.x, x_1138.x, x_1138.x)) + vec3<f32>(x_1142.x, x_1142.y, x_1142.z));
  let x_1145 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1144.x, x_1144.y, x_1144.z, x_1145.w);
  let x_1148 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1150 : vec3<f32> = u_xlat11;
  let x_1153 : vec4<f32> = u_xlat5;
  let x_1155 : vec3<f32> = ((vec3<f32>(x_1148.x, x_1148.y, x_1148.z) * vec3<f32>(x_1150.x, x_1150.x, x_1150.x)) + vec3<f32>(x_1153.x, x_1153.y, x_1153.z));
  let x_1156 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1155.x, x_1155.y, x_1155.z, x_1156.w);
  let x_1158 : vec4<f32> = u_xlat5;
  let x_1160 : f32 = u_xlat28;
  let x_1163 : vec3<f32> = u_xlat8;
  let x_1165 : vec3<f32> = ((vec3<f32>(x_1158.x, x_1158.y, x_1158.z) * vec3<f32>(x_1160, x_1160, x_1160)) + -(x_1163));
  let x_1166 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1165.x, x_1165.y, x_1165.z, x_1166.w);
  let x_1168 : vec4<f32> = u_xlat5;
  let x_1170 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(vec3<f32>(x_1168.x, x_1168.y, x_1168.z), vec3<f32>(x_1170.x, x_1170.y, x_1170.z));
  let x_1174 : f32 = u_xlat0;
  let x_1178 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1174) * 0.004f) + x_1178);
  let x_1182 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1182, 0.0f);
  let x_1185 : vec4<f32> = u_xlat5;
  let x_1187 : vec4<f32> = u_xlat5;
  u_xlat11.x = dot(vec3<f32>(x_1185.x, x_1185.y, x_1185.z), vec3<f32>(x_1187.x, x_1187.y, x_1187.z));
  let x_1192 : f32 = u_xlat11.x;
  u_xlat11.x = (x_1192 + 0.0001f);
  let x_1196 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_1196);
  let x_1200 : f32 = u_xlat11.x;
  let x_1202 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1200 * x_1202);
  let x_1205 : f32 = u_xlat26;
  let x_1207 : f32 = u_xlat3.x;
  u_xlat26 = (x_1205 * x_1207);
  let x_1210 : f32 = u_xlat18.x;
  let x_1211 : f32 = u_xlat25;
  let x_1213 : f32 = u_xlat26;
  u_xlat25 = ((x_1210 * x_1211) + x_1213);
  let x_1218 : vec4<f32> = u_xlat3;
  let x_1221 : f32 = x_33.x_GlobalMipBias.x;
  let x_1222 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1218.z, x_1218.w), x_1221);
  u_xlat18.x = x_1222.w;
  let x_1225 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1225.x, x_1225.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1232 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1232);
  let x_1236 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1236 * 2.0f) + -1.0f);
  let x_1241 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1241 * 628.31854248f);
  let x_1245 : f32 = u_xlat3.z;
  let x_1248 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1245) * x_1248) + 1.0f);
  let x_1251 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1251);
  let x_1254 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1254);
  let x_1258 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1258);
  let x_1261 : f32 = u_xlat26;
  let x_1263 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1261 * x_1263);
  let x_1266 : f32 = u_xlat26;
  let x_1268 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1266 * x_1268);
  let x_1271 : vec4<f32> = u_xlat1;
  let x_1273 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1271.x, x_1271.y, x_1271.z), vec3<f32>(x_1273.x, x_1273.y, x_1273.z));
  let x_1279 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1279 >= 0.0f);
  let x_1281 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1281);
  let x_1284 : vec2<f32> = u_xlat18;
  let x_1286 : vec4<f32> = u_xlat3;
  let x_1288 : vec3<f32> = (vec3<f32>(x_1284.x, x_1284.x, x_1284.x) * vec3<f32>(x_1286.x, x_1286.y, x_1286.z));
  let x_1289 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1288.x, x_1288.y, x_1288.z, x_1289.w);
  let x_1291 : vec4<f32> = u_xlat3;
  let x_1294 : vec4<f32> = x_33.x_SSAOParams;
  let x_1296 : vec3<f32> = (vec3<f32>(x_1291.x, x_1291.y, x_1291.z) * vec3<f32>(x_1294.y, x_1294.y, x_1294.y));
  let x_1297 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1296.x, x_1296.y, x_1296.z, x_1297.w);
  let x_1299 : vec4<f32> = u_xlat3;
  let x_1304 : vec3<f32> = u_xlat8;
  let x_1305 : vec3<f32> = ((vec3<f32>(x_1299.x, x_1299.y, x_1299.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1304);
  let x_1306 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1305.x, x_1305.y, x_1305.z, x_1306.w);
  let x_1308 : vec4<f32> = u_xlat3;
  let x_1311 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1308.y, x_1308.y) * vec2<f32>(x_1311.x, x_1311.y));
  let x_1315 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1317 : vec4<f32> = u_xlat3;
  let x_1320 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1315.x, x_1315.y) * vec2<f32>(x_1317.x, x_1317.x)) + x_1320);
  let x_1323 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1325 : vec4<f32> = u_xlat3;
  let x_1328 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1323.x, x_1323.y) * vec2<f32>(x_1325.z, x_1325.z)) + x_1328);
  let x_1330 : vec3<f32> = u_xlat4;
  let x_1331 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1330, vec3<f32>(x_1331.x, x_1331.y, x_1331.z));
  let x_1336 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1336));
  let x_1340 : vec2<f32> = u_xlat18;
  let x_1341 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1340 * vec2<f32>(x_1341.x, x_1341.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1345 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1345 * vec2<f32>(0.5f, 0.5f));
  let x_1347 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1347, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1354 : vec2<f32> = u_xlat18;
  let x_1356 : f32 = x_33.x_GlobalMipBias.x;
  let x_1357 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1354, x_1356);
  u_xlat11.x = x_1357.x;
  let x_1362 : f32 = x_33.x_ZBufferParams.z;
  let x_1364 : f32 = u_xlat11.x;
  let x_1367 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1362 * x_1364) + x_1367);
  let x_1369 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1369);
  let x_1371 : f32 = u_xlat19;
  let x_1374 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1371) + -(x_1374));
  let x_1379 : f32 = u_xlat3.x;
  let x_1382 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1379) < x_1382);
  let x_1386 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1386);
  let x_1390 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1390);
  let x_1394 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1394);
  let x_1398 : f32 = u_xlat3.y;
  let x_1400 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1398 * x_1400);
  let x_1404 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1404) + 1.0f);
  let x_1407 : f32 = u_xlat19;
  let x_1409 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1407 * x_1409);
  let x_1413 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1415 : vec2<f32> = u_xlat18;
  let x_1419 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1421 : vec3<f32> = ((vec3<f32>(x_1413.x, x_1413.y, x_1413.z) * vec3<f32>(x_1415.x, x_1415.x, x_1415.x)) + vec3<f32>(x_1419.x, x_1419.y, x_1419.z));
  let x_1422 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1421.x, x_1421.y, x_1421.z, x_1422.w);
  let x_1425 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1427 : f32 = u_xlat26;
  let x_1430 : vec4<f32> = u_xlat5;
  let x_1432 : vec3<f32> = ((vec3<f32>(x_1425.x, x_1425.y, x_1425.z) * vec3<f32>(x_1427, x_1427, x_1427)) + vec3<f32>(x_1430.x, x_1430.y, x_1430.z));
  let x_1433 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1432.x, x_1432.y, x_1432.z, x_1433.w);
  let x_1435 : vec4<f32> = u_xlat5;
  let x_1437 : vec3<f32> = u_xlat11;
  let x_1440 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_1435.x, x_1435.y, x_1435.z) * vec3<f32>(x_1437.x, x_1437.x, x_1437.x)) + -(x_1440));
  let x_1443 : vec3<f32> = u_xlat11;
  let x_1444 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1443, vec3<f32>(x_1444.x, x_1444.y, x_1444.z));
  let x_1448 : f32 = u_xlat0;
  let x_1452 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1448) * 0.004f) + x_1452);
  let x_1456 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1456, 0.0f);
  let x_1459 : vec3<f32> = u_xlat11;
  let x_1460 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1459, x_1460);
  let x_1462 : f32 = u_xlat26;
  u_xlat26 = (x_1462 + 0.0001f);
  let x_1464 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1464);
  let x_1466 : f32 = u_xlat26;
  let x_1468 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1466 * x_1468);
  let x_1472 : f32 = u_xlat18.x;
  let x_1474 : f32 = u_xlat3.x;
  let x_1476 : f32 = u_xlat25;
  u_xlat25 = ((x_1472 * x_1474) + x_1476);
  let x_1478 : vec4<f32> = u_xlat2;
  let x_1481 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1478.x, x_1478.y, x_1478.x, x_1478.y) * vec4<f32>(x_1481.x, x_1481.y, x_1481.x, x_1481.y)) + vec4<f32>(0.375f, 0.375f, 0.5f, 0.5f));
  let x_1490 : vec4<f32> = u_xlat3;
  let x_1493 : f32 = x_33.x_GlobalMipBias.x;
  let x_1494 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1490.x, x_1490.y), x_1493);
  u_xlat18.x = x_1494.w;
  let x_1497 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1497.x, x_1497.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1504 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1504);
  let x_1508 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1508 * 2.0f) + -1.0f);
  let x_1513 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1513 * 628.31854248f);
  let x_1517 : f32 = u_xlat5.z;
  let x_1520 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1517) * x_1520) + 1.0f);
  let x_1523 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1523);
  let x_1526 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1526);
  let x_1530 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1530);
  let x_1533 : f32 = u_xlat26;
  let x_1535 : f32 = u_xlat6.x;
  u_xlat5.x = (x_1533 * x_1535);
  let x_1538 : f32 = u_xlat26;
  let x_1540 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1538 * x_1540);
  let x_1543 : vec4<f32> = u_xlat1;
  let x_1545 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_1543.x, x_1543.y, x_1543.z), vec3<f32>(x_1545.x, x_1545.y, x_1545.z));
  let x_1550 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1550 >= 0.0f);
  let x_1552 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1552);
  let x_1555 : vec2<f32> = u_xlat18;
  let x_1557 : vec4<f32> = u_xlat5;
  let x_1559 : vec3<f32> = (vec3<f32>(x_1555.x, x_1555.x, x_1555.x) * vec3<f32>(x_1557.x, x_1557.y, x_1557.z));
  let x_1560 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1559.x, x_1559.y, x_1559.z, x_1560.w);
  let x_1562 : vec4<f32> = u_xlat5;
  let x_1565 : vec4<f32> = x_33.x_SSAOParams;
  let x_1567 : vec3<f32> = (vec3<f32>(x_1562.x, x_1562.y, x_1562.z) * vec3<f32>(x_1565.y, x_1565.y, x_1565.y));
  let x_1568 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1567.x, x_1567.y, x_1567.z, x_1568.w);
  let x_1570 : vec4<f32> = u_xlat5;
  let x_1575 : vec3<f32> = u_xlat8;
  let x_1576 : vec3<f32> = ((vec3<f32>(x_1570.x, x_1570.y, x_1570.z) * vec3<f32>(0.2265625f, 0.2265625f, 0.2265625f)) + x_1575);
  let x_1577 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1576.x, x_1576.y, x_1576.z, x_1577.w);
  let x_1579 : vec4<f32> = u_xlat5;
  let x_1582 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1579.y, x_1579.y) * vec2<f32>(x_1582.x, x_1582.y));
  let x_1586 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1588 : vec4<f32> = u_xlat5;
  let x_1591 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1586.x, x_1586.y) * vec2<f32>(x_1588.x, x_1588.x)) + x_1591);
  let x_1594 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1596 : vec4<f32> = u_xlat5;
  let x_1599 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1594.x, x_1594.y) * vec2<f32>(x_1596.z, x_1596.z)) + x_1599);
  let x_1601 : vec3<f32> = u_xlat4;
  let x_1602 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_1601, vec3<f32>(x_1602.x, x_1602.y, x_1602.z));
  let x_1607 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1607));
  let x_1611 : vec2<f32> = u_xlat18;
  let x_1612 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1611 * vec2<f32>(x_1612.x, x_1612.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1616 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1616 * vec2<f32>(0.5f, 0.5f));
  let x_1618 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1618, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1625 : vec2<f32> = u_xlat18;
  let x_1627 : f32 = x_33.x_GlobalMipBias.x;
  let x_1628 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1625, x_1627);
  u_xlat11.x = x_1628.x;
  let x_1632 : f32 = x_33.x_ZBufferParams.z;
  let x_1634 : f32 = u_xlat11.x;
  let x_1637 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1632 * x_1634) + x_1637);
  let x_1639 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1639);
  let x_1642 : f32 = u_xlat3.x;
  let x_1644 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1642) + -(x_1644));
  let x_1649 : f32 = u_xlat3.x;
  let x_1652 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1649) < x_1652);
  let x_1656 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1656);
  let x_1660 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1660);
  let x_1664 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1664);
  let x_1668 : f32 = u_xlat3.y;
  let x_1670 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1668 * x_1670);
  let x_1674 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1674) + 1.0f);
  let x_1677 : f32 = u_xlat28;
  let x_1679 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1677 * x_1679);
  let x_1683 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1685 : vec2<f32> = u_xlat18;
  let x_1689 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1691 : vec3<f32> = ((vec3<f32>(x_1683.x, x_1683.y, x_1683.z) * vec3<f32>(x_1685.x, x_1685.x, x_1685.x)) + vec3<f32>(x_1689.x, x_1689.y, x_1689.z));
  let x_1692 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1691.x, x_1691.y, x_1691.z, x_1692.w);
  let x_1695 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1697 : f32 = u_xlat26;
  let x_1700 : vec4<f32> = u_xlat5;
  let x_1702 : vec3<f32> = ((vec3<f32>(x_1695.x, x_1695.y, x_1695.z) * vec3<f32>(x_1697, x_1697, x_1697)) + vec3<f32>(x_1700.x, x_1700.y, x_1700.z));
  let x_1703 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1702.x, x_1702.y, x_1702.z, x_1703.w);
  let x_1705 : vec4<f32> = u_xlat5;
  let x_1707 : vec3<f32> = u_xlat11;
  let x_1710 : vec3<f32> = u_xlat8;
  let x_1712 : vec3<f32> = ((vec3<f32>(x_1705.x, x_1705.y, x_1705.z) * vec3<f32>(x_1707.x, x_1707.x, x_1707.x)) + -(x_1710));
  let x_1713 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1712.x, x_1712.y, x_1712.z, x_1713.w);
  let x_1715 : vec4<f32> = u_xlat5;
  let x_1717 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_1715.x, x_1715.y, x_1715.z), vec3<f32>(x_1717.x, x_1717.y, x_1717.z));
  let x_1721 : f32 = u_xlat0;
  let x_1725 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1721) * 0.004f) + x_1725);
  let x_1729 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1729, 0.0f);
  let x_1732 : vec4<f32> = u_xlat5;
  let x_1734 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_1732.x, x_1732.y, x_1732.z), vec3<f32>(x_1734.x, x_1734.y, x_1734.z));
  let x_1737 : f32 = u_xlat26;
  u_xlat26 = (x_1737 + 0.0001f);
  let x_1739 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1739);
  let x_1741 : f32 = u_xlat26;
  let x_1743 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1741 * x_1743);
  let x_1747 : f32 = u_xlat18.x;
  let x_1749 : f32 = u_xlat3.x;
  let x_1751 : f32 = u_xlat25;
  u_xlat25 = ((x_1747 * x_1749) + x_1751);
  let x_1756 : vec4<f32> = u_xlat3;
  let x_1759 : f32 = x_33.x_GlobalMipBias.x;
  let x_1760 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1756.z, x_1756.w), x_1759);
  u_xlat18.x = x_1760.w;
  let x_1764 : f32 = u_xlat18.x;
  u_xlat26 = (x_1764 + 0.984375f);
  let x_1767 : f32 = u_xlat26;
  u_xlat26 = fract(x_1767);
  let x_1769 : f32 = u_xlat26;
  u_xlat3.z = ((x_1769 * 2.0f) + -1.0f);
  let x_1774 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1774 * 628.31854248f);
  let x_1778 : f32 = u_xlat3.z;
  let x_1781 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1778) * x_1781) + 1.0f);
  let x_1784 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1784);
  let x_1787 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1787);
  let x_1791 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1791);
  let x_1794 : f32 = u_xlat26;
  let x_1796 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1794 * x_1796);
  let x_1799 : f32 = u_xlat26;
  let x_1801 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1799 * x_1801);
  let x_1804 : vec4<f32> = u_xlat1;
  let x_1806 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1804.x, x_1804.y, x_1804.z), vec3<f32>(x_1806.x, x_1806.y, x_1806.z));
  let x_1811 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1811 >= 0.0f);
  let x_1813 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1813);
  let x_1816 : vec2<f32> = u_xlat18;
  let x_1818 : vec4<f32> = u_xlat3;
  let x_1820 : vec3<f32> = (vec3<f32>(x_1816.x, x_1816.x, x_1816.x) * vec3<f32>(x_1818.x, x_1818.y, x_1818.z));
  let x_1821 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1820.x, x_1820.y, x_1820.z, x_1821.w);
  let x_1823 : vec4<f32> = u_xlat3;
  let x_1826 : vec4<f32> = x_33.x_SSAOParams;
  let x_1828 : vec3<f32> = (vec3<f32>(x_1823.x, x_1823.y, x_1823.z) * vec3<f32>(x_1826.y, x_1826.y, x_1826.y));
  let x_1829 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1828.x, x_1828.y, x_1828.z, x_1829.w);
  let x_1831 : vec4<f32> = u_xlat3;
  let x_1836 : vec3<f32> = u_xlat8;
  let x_1837 : vec3<f32> = ((vec3<f32>(x_1831.x, x_1831.y, x_1831.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1836);
  let x_1838 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1837.x, x_1837.y, x_1837.z, x_1838.w);
  let x_1840 : vec4<f32> = u_xlat3;
  let x_1843 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1840.y, x_1840.y) * vec2<f32>(x_1843.x, x_1843.y));
  let x_1847 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1849 : vec4<f32> = u_xlat3;
  let x_1852 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1847.x, x_1847.y) * vec2<f32>(x_1849.x, x_1849.x)) + x_1852);
  let x_1855 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1857 : vec4<f32> = u_xlat3;
  let x_1860 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1855.x, x_1855.y) * vec2<f32>(x_1857.z, x_1857.z)) + x_1860);
  let x_1862 : vec3<f32> = u_xlat4;
  let x_1863 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1862, vec3<f32>(x_1863.x, x_1863.y, x_1863.z));
  let x_1868 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1868));
  let x_1872 : vec2<f32> = u_xlat18;
  let x_1873 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1872 * vec2<f32>(x_1873.x, x_1873.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1877 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1877 * vec2<f32>(0.5f, 0.5f));
  let x_1879 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1879, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1886 : vec2<f32> = u_xlat18;
  let x_1888 : f32 = x_33.x_GlobalMipBias.x;
  let x_1889 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1886, x_1888);
  u_xlat11.x = x_1889.x;
  let x_1893 : f32 = x_33.x_ZBufferParams.z;
  let x_1895 : f32 = u_xlat11.x;
  let x_1898 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1893 * x_1895) + x_1898);
  let x_1900 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1900);
  let x_1902 : f32 = u_xlat19;
  let x_1905 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1902) + -(x_1905));
  let x_1910 : f32 = u_xlat3.x;
  let x_1913 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1910) < x_1913);
  let x_1917 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1917);
  let x_1921 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1921);
  let x_1925 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1925);
  let x_1929 : f32 = u_xlat3.y;
  let x_1931 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1929 * x_1931);
  let x_1935 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1935) + 1.0f);
  let x_1938 : f32 = u_xlat19;
  let x_1940 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1938 * x_1940);
  let x_1944 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1946 : vec2<f32> = u_xlat18;
  let x_1950 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1952 : vec3<f32> = ((vec3<f32>(x_1944.x, x_1944.y, x_1944.z) * vec3<f32>(x_1946.x, x_1946.x, x_1946.x)) + vec3<f32>(x_1950.x, x_1950.y, x_1950.z));
  let x_1953 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1952.x, x_1952.y, x_1952.z, x_1953.w);
  let x_1956 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1958 : f32 = u_xlat26;
  let x_1961 : vec4<f32> = u_xlat5;
  let x_1963 : vec3<f32> = ((vec3<f32>(x_1956.x, x_1956.y, x_1956.z) * vec3<f32>(x_1958, x_1958, x_1958)) + vec3<f32>(x_1961.x, x_1961.y, x_1961.z));
  let x_1964 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1963.x, x_1963.y, x_1963.z, x_1964.w);
  let x_1966 : vec4<f32> = u_xlat5;
  let x_1968 : vec3<f32> = u_xlat11;
  let x_1971 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_1966.x, x_1966.y, x_1966.z) * vec3<f32>(x_1968.x, x_1968.x, x_1968.x)) + -(x_1971));
  let x_1974 : vec3<f32> = u_xlat11;
  let x_1975 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1974, vec3<f32>(x_1975.x, x_1975.y, x_1975.z));
  let x_1979 : f32 = u_xlat0;
  let x_1983 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1979) * 0.004f) + x_1983);
  let x_1987 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1987, 0.0f);
  let x_1990 : vec3<f32> = u_xlat11;
  let x_1991 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1990, x_1991);
  let x_1993 : f32 = u_xlat26;
  u_xlat26 = (x_1993 + 0.0001f);
  let x_1995 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1995);
  let x_1997 : f32 = u_xlat26;
  let x_1999 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1997 * x_1999);
  let x_2003 : f32 = u_xlat18.x;
  let x_2005 : f32 = u_xlat3.x;
  let x_2007 : f32 = u_xlat25;
  u_xlat25 = ((x_2003 * x_2005) + x_2007);
  let x_2009 : vec4<f32> = u_xlat2;
  let x_2012 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2009.x, x_2009.y, x_2009.x, x_2009.y) * vec4<f32>(x_2012.x, x_2012.y, x_2012.x, x_2012.y)) + vec4<f32>(0.625f, 0.625f, 0.75f, 0.75f));
  let x_2022 : vec4<f32> = u_xlat3;
  let x_2025 : f32 = x_33.x_GlobalMipBias.x;
  let x_2026 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2022.x, x_2022.y), x_2025);
  u_xlat18.x = x_2026.w;
  let x_2029 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2029.x, x_2029.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_2036 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2036);
  let x_2040 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2040 * 2.0f) + -1.0f);
  let x_2045 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2045 * 628.31854248f);
  let x_2049 : f32 = u_xlat5.z;
  let x_2052 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2049) * x_2052) + 1.0f);
  let x_2055 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2055);
  let x_2058 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2058);
  let x_2062 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2062);
  let x_2065 : f32 = u_xlat26;
  let x_2067 : f32 = u_xlat6.x;
  u_xlat5.x = (x_2065 * x_2067);
  let x_2070 : f32 = u_xlat26;
  let x_2072 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2070 * x_2072);
  let x_2075 : vec4<f32> = u_xlat1;
  let x_2077 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_2075.x, x_2075.y, x_2075.z), vec3<f32>(x_2077.x, x_2077.y, x_2077.z));
  let x_2082 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2082 >= 0.0f);
  let x_2084 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2084);
  let x_2087 : vec2<f32> = u_xlat18;
  let x_2089 : vec4<f32> = u_xlat5;
  let x_2091 : vec3<f32> = (vec3<f32>(x_2087.x, x_2087.x, x_2087.x) * vec3<f32>(x_2089.x, x_2089.y, x_2089.z));
  let x_2092 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2091.x, x_2091.y, x_2091.z, x_2092.w);
  let x_2094 : vec4<f32> = u_xlat5;
  let x_2097 : vec4<f32> = x_33.x_SSAOParams;
  let x_2099 : vec3<f32> = (vec3<f32>(x_2094.x, x_2094.y, x_2094.z) * vec3<f32>(x_2097.y, x_2097.y, x_2097.y));
  let x_2100 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2099.x, x_2099.y, x_2099.z, x_2100.w);
  let x_2102 : vec4<f32> = u_xlat5;
  let x_2107 : vec3<f32> = u_xlat8;
  let x_2108 : vec3<f32> = ((vec3<f32>(x_2102.x, x_2102.y, x_2102.z) * vec3<f32>(0.451562494f, 0.451562494f, 0.451562494f)) + x_2107);
  let x_2109 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2108.x, x_2108.y, x_2108.z, x_2109.w);
  let x_2111 : vec4<f32> = u_xlat5;
  let x_2114 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2111.y, x_2111.y) * vec2<f32>(x_2114.x, x_2114.y));
  let x_2118 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2120 : vec4<f32> = u_xlat5;
  let x_2123 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2118.x, x_2118.y) * vec2<f32>(x_2120.x, x_2120.x)) + x_2123);
  let x_2126 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2128 : vec4<f32> = u_xlat5;
  let x_2131 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2126.x, x_2126.y) * vec2<f32>(x_2128.z, x_2128.z)) + x_2131);
  let x_2133 : vec3<f32> = u_xlat4;
  let x_2134 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_2133, vec3<f32>(x_2134.x, x_2134.y, x_2134.z));
  let x_2139 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2139));
  let x_2143 : vec2<f32> = u_xlat18;
  let x_2144 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2143 * vec2<f32>(x_2144.x, x_2144.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2148 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2148 * vec2<f32>(0.5f, 0.5f));
  let x_2150 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2150, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2157 : vec2<f32> = u_xlat18;
  let x_2159 : f32 = x_33.x_GlobalMipBias.x;
  let x_2160 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2157, x_2159);
  u_xlat11.x = x_2160.x;
  let x_2164 : f32 = x_33.x_ZBufferParams.z;
  let x_2166 : f32 = u_xlat11.x;
  let x_2169 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2164 * x_2166) + x_2169);
  let x_2171 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2171);
  let x_2174 : f32 = u_xlat3.x;
  let x_2176 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2174) + -(x_2176));
  let x_2181 : f32 = u_xlat3.x;
  let x_2184 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2181) < x_2184);
  let x_2188 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2188);
  let x_2192 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2192);
  let x_2196 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2196);
  let x_2200 : f32 = u_xlat3.y;
  let x_2202 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2200 * x_2202);
  let x_2206 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2206) + 1.0f);
  let x_2209 : f32 = u_xlat28;
  let x_2211 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2209 * x_2211);
  let x_2215 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2217 : vec2<f32> = u_xlat18;
  let x_2221 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2223 : vec3<f32> = ((vec3<f32>(x_2215.x, x_2215.y, x_2215.z) * vec3<f32>(x_2217.x, x_2217.x, x_2217.x)) + vec3<f32>(x_2221.x, x_2221.y, x_2221.z));
  let x_2224 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2223.x, x_2223.y, x_2223.z, x_2224.w);
  let x_2227 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2229 : f32 = u_xlat26;
  let x_2232 : vec4<f32> = u_xlat5;
  let x_2234 : vec3<f32> = ((vec3<f32>(x_2227.x, x_2227.y, x_2227.z) * vec3<f32>(x_2229, x_2229, x_2229)) + vec3<f32>(x_2232.x, x_2232.y, x_2232.z));
  let x_2235 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2234.x, x_2234.y, x_2234.z, x_2235.w);
  let x_2237 : vec4<f32> = u_xlat5;
  let x_2239 : vec3<f32> = u_xlat11;
  let x_2242 : vec3<f32> = u_xlat8;
  let x_2244 : vec3<f32> = ((vec3<f32>(x_2237.x, x_2237.y, x_2237.z) * vec3<f32>(x_2239.x, x_2239.x, x_2239.x)) + -(x_2242));
  let x_2245 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2244.x, x_2244.y, x_2244.z, x_2245.w);
  let x_2247 : vec4<f32> = u_xlat5;
  let x_2249 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_2247.x, x_2247.y, x_2247.z), vec3<f32>(x_2249.x, x_2249.y, x_2249.z));
  let x_2253 : f32 = u_xlat0;
  let x_2257 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2253) * 0.004f) + x_2257);
  let x_2261 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2261, 0.0f);
  let x_2264 : vec4<f32> = u_xlat5;
  let x_2266 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_2264.x, x_2264.y, x_2264.z), vec3<f32>(x_2266.x, x_2266.y, x_2266.z));
  let x_2269 : f32 = u_xlat26;
  u_xlat26 = (x_2269 + 0.0001f);
  let x_2271 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2271);
  let x_2273 : f32 = u_xlat26;
  let x_2275 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2273 * x_2275);
  let x_2279 : f32 = u_xlat18.x;
  let x_2281 : f32 = u_xlat3.x;
  let x_2283 : f32 = u_xlat25;
  u_xlat25 = ((x_2279 * x_2281) + x_2283);
  let x_2288 : vec4<f32> = u_xlat3;
  let x_2291 : f32 = x_33.x_GlobalMipBias.x;
  let x_2292 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2288.z, x_2288.w), x_2291);
  u_xlat18.x = x_2292.w;
  let x_2295 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2295.x, x_2295.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2302 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2302);
  let x_2306 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2306 * 2.0f) + -1.0f);
  let x_2311 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2311 * 628.31854248f);
  let x_2315 : f32 = u_xlat3.z;
  let x_2318 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2315) * x_2318) + 1.0f);
  let x_2321 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2321);
  let x_2324 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2324);
  let x_2328 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2328);
  let x_2331 : f32 = u_xlat26;
  let x_2333 : f32 = u_xlat6.x;
  u_xlat3.x = (x_2331 * x_2333);
  let x_2336 : f32 = u_xlat26;
  let x_2338 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2336 * x_2338);
  let x_2341 : vec4<f32> = u_xlat1;
  let x_2343 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_2341.x, x_2341.y, x_2341.z), vec3<f32>(x_2343.x, x_2343.y, x_2343.z));
  let x_2348 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2348 >= 0.0f);
  let x_2350 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2350);
  let x_2353 : vec2<f32> = u_xlat18;
  let x_2355 : vec4<f32> = u_xlat3;
  let x_2357 : vec3<f32> = (vec3<f32>(x_2353.x, x_2353.x, x_2353.x) * vec3<f32>(x_2355.x, x_2355.y, x_2355.z));
  let x_2358 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2357.x, x_2357.y, x_2357.z, x_2358.w);
  let x_2360 : vec4<f32> = u_xlat3;
  let x_2363 : vec4<f32> = x_33.x_SSAOParams;
  let x_2365 : vec3<f32> = (vec3<f32>(x_2360.x, x_2360.y, x_2360.z) * vec3<f32>(x_2363.y, x_2363.y, x_2363.y));
  let x_2366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2365.x, x_2365.y, x_2365.z, x_2366.w);
  let x_2368 : vec4<f32> = u_xlat3;
  let x_2373 : vec3<f32> = u_xlat8;
  let x_2374 : vec3<f32> = ((vec3<f32>(x_2368.x, x_2368.y, x_2368.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_2373);
  let x_2375 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2374.x, x_2374.y, x_2374.z, x_2375.w);
  let x_2377 : vec4<f32> = u_xlat3;
  let x_2380 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2377.y, x_2377.y) * vec2<f32>(x_2380.x, x_2380.y));
  let x_2384 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2386 : vec4<f32> = u_xlat3;
  let x_2389 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2384.x, x_2384.y) * vec2<f32>(x_2386.x, x_2386.x)) + x_2389);
  let x_2392 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2394 : vec4<f32> = u_xlat3;
  let x_2397 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2392.x, x_2392.y) * vec2<f32>(x_2394.z, x_2394.z)) + x_2397);
  let x_2399 : vec3<f32> = u_xlat4;
  let x_2400 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2399, vec3<f32>(x_2400.x, x_2400.y, x_2400.z));
  let x_2405 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2405));
  let x_2409 : vec2<f32> = u_xlat18;
  let x_2410 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2409 * vec2<f32>(x_2410.x, x_2410.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2414 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2414 * vec2<f32>(0.5f, 0.5f));
  let x_2416 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2416, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2423 : vec2<f32> = u_xlat18;
  let x_2425 : f32 = x_33.x_GlobalMipBias.x;
  let x_2426 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2423, x_2425);
  u_xlat11.x = x_2426.x;
  let x_2430 : f32 = x_33.x_ZBufferParams.z;
  let x_2432 : f32 = u_xlat11.x;
  let x_2435 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2430 * x_2432) + x_2435);
  let x_2437 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2437);
  let x_2439 : f32 = u_xlat19;
  let x_2442 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2439) + -(x_2442));
  let x_2447 : f32 = u_xlat3.x;
  let x_2450 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2447) < x_2450);
  let x_2454 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2454);
  let x_2458 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2458);
  let x_2462 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2462);
  let x_2466 : f32 = u_xlat3.y;
  let x_2468 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2466 * x_2468);
  let x_2472 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2472) + 1.0f);
  let x_2475 : f32 = u_xlat19;
  let x_2477 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2475 * x_2477);
  let x_2481 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2483 : vec2<f32> = u_xlat18;
  let x_2487 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2489 : vec3<f32> = ((vec3<f32>(x_2481.x, x_2481.y, x_2481.z) * vec3<f32>(x_2483.x, x_2483.x, x_2483.x)) + vec3<f32>(x_2487.x, x_2487.y, x_2487.z));
  let x_2490 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2489.x, x_2489.y, x_2489.z, x_2490.w);
  let x_2493 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2495 : f32 = u_xlat26;
  let x_2498 : vec4<f32> = u_xlat5;
  let x_2500 : vec3<f32> = ((vec3<f32>(x_2493.x, x_2493.y, x_2493.z) * vec3<f32>(x_2495, x_2495, x_2495)) + vec3<f32>(x_2498.x, x_2498.y, x_2498.z));
  let x_2501 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2500.x, x_2500.y, x_2500.z, x_2501.w);
  let x_2503 : vec4<f32> = u_xlat5;
  let x_2505 : vec3<f32> = u_xlat11;
  let x_2508 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_2503.x, x_2503.y, x_2503.z) * vec3<f32>(x_2505.x, x_2505.x, x_2505.x)) + -(x_2508));
  let x_2511 : vec3<f32> = u_xlat11;
  let x_2512 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2511, vec3<f32>(x_2512.x, x_2512.y, x_2512.z));
  let x_2516 : f32 = u_xlat0;
  let x_2520 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2516) * 0.004f) + x_2520);
  let x_2524 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2524, 0.0f);
  let x_2527 : vec3<f32> = u_xlat11;
  let x_2528 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2527, x_2528);
  let x_2530 : f32 = u_xlat26;
  u_xlat26 = (x_2530 + 0.0001f);
  let x_2532 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2532);
  let x_2534 : f32 = u_xlat26;
  let x_2536 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2534 * x_2536);
  let x_2540 : f32 = u_xlat18.x;
  let x_2542 : f32 = u_xlat3.x;
  let x_2544 : f32 = u_xlat25;
  u_xlat25 = ((x_2540 * x_2542) + x_2544);
  let x_2546 : vec4<f32> = u_xlat2;
  let x_2549 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_2554 : vec2<f32> = ((vec2<f32>(x_2546.x, x_2546.y) * vec2<f32>(x_2549.x, x_2549.y)) + vec2<f32>(0.875f, 0.875f));
  let x_2555 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2554.x, x_2554.y, x_2555.z, x_2555.w);
  let x_2560 : vec4<f32> = u_xlat2;
  let x_2563 : f32 = x_33.x_GlobalMipBias.x;
  let x_2564 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2560.x, x_2560.y), x_2563);
  u_xlat2.x = x_2564.w;
  let x_2567 : vec4<f32> = u_xlat2;
  let x_2571 : vec2<f32> = (vec2<f32>(x_2567.x, x_2567.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2572 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2571.x, x_2571.y, x_2572.z, x_2572.w);
  let x_2575 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_2575);
  let x_2579 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_2579 * 2.0f) + -1.0f);
  let x_2584 : f32 = u_xlat2.y;
  u_xlat2.x = (x_2584 * 628.31854248f);
  let x_2588 : f32 = u_xlat3.z;
  let x_2591 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_2588) * x_2591) + 1.0f);
  let x_2596 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_2596);
  let x_2600 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_2600);
  let x_2604 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_2604);
  let x_2608 : f32 = u_xlat10.x;
  let x_2610 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2608 * x_2610);
  let x_2614 : f32 = u_xlat2.x;
  let x_2616 : f32 = u_xlat10.x;
  u_xlat3.y = (x_2614 * x_2616);
  let x_2619 : vec4<f32> = u_xlat1;
  let x_2621 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(vec3<f32>(x_2619.x, x_2619.y, x_2619.z), vec3<f32>(x_2621.x, x_2621.y, x_2621.z));
  let x_2626 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_2626 >= 0.0f);
  let x_2630 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_2630);
  let x_2633 : vec4<f32> = u_xlat2;
  let x_2635 : vec4<f32> = u_xlat3;
  let x_2637 : vec3<f32> = (vec3<f32>(x_2633.x, x_2633.x, x_2633.x) * vec3<f32>(x_2635.x, x_2635.y, x_2635.z));
  let x_2638 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2637.x, x_2637.y, x_2637.z, x_2638.w);
  let x_2640 : vec4<f32> = u_xlat2;
  let x_2643 : vec4<f32> = x_33.x_SSAOParams;
  let x_2645 : vec3<f32> = (vec3<f32>(x_2640.x, x_2640.y, x_2640.z) * vec3<f32>(x_2643.y, x_2643.y, x_2643.y));
  let x_2646 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2645.x, x_2645.y, x_2645.z, x_2646.w);
  let x_2648 : vec4<f32> = u_xlat2;
  let x_2653 : vec3<f32> = u_xlat8;
  let x_2654 : vec3<f32> = ((vec3<f32>(x_2648.x, x_2648.y, x_2648.z) * vec3<f32>(0.7890625f, 0.7890625f, 0.7890625f)) + x_2653);
  let x_2655 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2654.x, x_2654.y, x_2654.z, x_2655.w);
  let x_2657 : vec4<f32> = u_xlat2;
  let x_2660 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_2662 : vec2<f32> = (vec2<f32>(x_2657.y, x_2657.y) * vec2<f32>(x_2660.x, x_2660.y));
  let x_2663 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2662.x, x_2662.y, x_2663.z, x_2663.w);
  let x_2666 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2668 : vec4<f32> = u_xlat2;
  let x_2671 : vec4<f32> = u_xlat3;
  let x_2673 : vec2<f32> = ((vec2<f32>(x_2666.x, x_2666.y) * vec2<f32>(x_2668.x, x_2668.x)) + vec2<f32>(x_2671.x, x_2671.y));
  let x_2674 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2673.x, x_2673.y, x_2674.z, x_2674.w);
  let x_2677 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2679 : vec4<f32> = u_xlat2;
  let x_2682 : vec4<f32> = u_xlat3;
  let x_2684 : vec2<f32> = ((vec2<f32>(x_2677.x, x_2677.y) * vec2<f32>(x_2679.z, x_2679.z)) + vec2<f32>(x_2682.x, x_2682.y));
  let x_2685 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2684.x, x_2684.y, x_2685.z, x_2685.w);
  let x_2687 : vec3<f32> = u_xlat4;
  let x_2688 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_2687, vec3<f32>(x_2688.x, x_2688.y, x_2688.z));
  let x_2693 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_2693));
  let x_2697 : vec4<f32> = u_xlat3;
  let x_2699 : vec3<f32> = u_xlat10;
  let x_2702 : vec2<f32> = ((vec2<f32>(x_2697.x, x_2697.y) * vec2<f32>(x_2699.x, x_2699.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2703 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2702.x, x_2702.y, x_2703.z);
  let x_2705 : vec3<f32> = u_xlat10;
  let x_2707 : vec2<f32> = (vec2<f32>(x_2705.x, x_2705.y) * vec2<f32>(0.5f, 0.5f));
  let x_2708 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2707.x, x_2707.y, x_2708.z);
  let x_2710 : vec3<f32> = u_xlat10;
  let x_2714 : vec2<f32> = clamp(vec2<f32>(x_2710.x, x_2710.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2715 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2714.x, x_2714.y, x_2715.z);
  let x_2720 : vec3<f32> = u_xlat10;
  let x_2723 : f32 = x_33.x_GlobalMipBias.x;
  let x_2724 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2720.x, x_2720.y), x_2723);
  u_xlat26 = x_2724.x;
  let x_2727 : f32 = x_33.x_ZBufferParams.z;
  let x_2728 : f32 = u_xlat26;
  let x_2731 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_2727 * x_2728) + x_2731);
  let x_2735 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2735);
  let x_2739 : f32 = u_xlat2.x;
  let x_2742 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_2739) + -(x_2742));
  let x_2747 : f32 = u_xlat2.x;
  let x_2750 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_2747) < x_2750);
  let x_2753 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_2753);
  let x_2757 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_2757);
  let x_2761 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_2761);
  let x_2765 : f32 = u_xlat2.w;
  let x_2767 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2765 * x_2767);
  let x_2771 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_2771) + 1.0f);
  let x_2776 : f32 = u_xlat3.x;
  let x_2778 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_2776 * x_2778);
  let x_2781 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2783 : vec3<f32> = u_xlat10;
  let x_2787 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2789 : vec3<f32> = ((vec3<f32>(x_2781.x, x_2781.y, x_2781.z) * vec3<f32>(x_2783.x, x_2783.x, x_2783.x)) + vec3<f32>(x_2787.x, x_2787.y, x_2787.z));
  let x_2790 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2789.x, x_2789.y, x_2789.z, x_2790.w);
  let x_2793 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2795 : vec2<f32> = u_xlat18;
  let x_2798 : vec4<f32> = u_xlat3;
  let x_2800 : vec3<f32> = ((vec3<f32>(x_2793.x, x_2793.y, x_2793.z) * vec3<f32>(x_2795.x, x_2795.x, x_2795.x)) + vec3<f32>(x_2798.x, x_2798.y, x_2798.z));
  let x_2801 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2800.x, x_2800.y, x_2800.z, x_2801.w);
  let x_2803 : vec4<f32> = u_xlat3;
  let x_2805 : f32 = u_xlat26;
  let x_2808 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_2803.x, x_2803.y, x_2803.z) * vec3<f32>(x_2805, x_2805, x_2805)) + -(x_2808));
  let x_2811 : vec3<f32> = u_xlat8;
  let x_2812 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_2811, vec3<f32>(x_2812.x, x_2812.y, x_2812.z));
  let x_2816 : f32 = u_xlat0;
  let x_2820 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_2816) * 0.004f) + x_2820);
  let x_2824 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_2824, 0.0f);
  let x_2827 : vec3<f32> = u_xlat8;
  let x_2828 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_2827, x_2828);
  let x_2832 : f32 = u_xlat8.x;
  u_xlat8.x = (x_2832 + 0.0001f);
  let x_2836 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_2836);
  let x_2840 : f32 = u_xlat8.x;
  let x_2842 : f32 = u_xlat10.x;
  u_xlat8.x = (x_2840 * x_2842);
  let x_2846 : f32 = u_xlat8.x;
  let x_2848 : f32 = u_xlat2.x;
  let x_2850 : f32 = u_xlat25;
  u_xlat8.x = ((x_2846 * x_2848) + x_2850);
  let x_2854 : f32 = u_xlat8.x;
  let x_2856 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_2854 * x_2856);
  let x_2860 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_2860);
  let x_2862 : f32 = u_xlat0;
  let x_2864 : f32 = u_xlat16;
  u_xlat0 = ((-(x_2862) * x_2864) + 1.0f);
  let x_2867 : f32 = u_xlat0;
  let x_2868 : f32 = u_xlat0;
  u_xlat0 = (x_2867 * x_2868);
  let x_2871 : f32 = u_xlat8.x;
  let x_2873 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_2871 * x_2873);
  let x_2876 : f32 = u_xlat0;
  let x_2878 : f32 = u_xlat8.x;
  u_xlat0 = (x_2876 * x_2878);
  let x_2880 : f32 = u_xlat0;
  u_xlat0 = (x_2880 * 0.125f);
  let x_2882 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2882, 0.0f, 1.0f);
  let x_2884 : f32 = u_xlat0;
  u_xlat0 = log2(x_2884);
  let x_2886 : f32 = u_xlat0;
  u_xlat0 = (x_2886 * 0.600000024f);
  let x_2889 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2889);
  let x_2893 : vec4<f32> = u_xlat1;
  let x_2897 : vec3<f32> = ((vec3<f32>(x_2893.x, x_2893.y, x_2893.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2898 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2898.x, x_2897.x, x_2897.y, x_2897.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

