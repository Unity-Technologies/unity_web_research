type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_98 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_100 : vec2<f32> = vs_TEXCOORD0;
  let x_105 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_98.x, x_98.y, x_98.z) * vec3<f32>(x_100.x, x_100.x, x_100.x)) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_110 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_112 : vec3<f32> = u_xlat8;
  let x_115 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_110.x, x_110.y, x_110.z) * vec3<f32>(x_112.x, x_112.x, x_112.x)) + x_115);
  let x_117 : f32 = u_xlat16;
  let x_119 : vec3<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_117, x_117, x_117) * x_119);
  let x_121 : vec3<f32> = u_xlat8;
  u_xlat1 = dpdyCoarse(vec3<f32>(x_121.z, x_121.x, x_121.y));
  let x_126 : vec3<f32> = u_xlat8;
  let x_128 : vec3<f32> = dpdxCoarse(vec3<f32>(x_126.y, x_126.z, x_126.x));
  let x_129 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_128.x, x_128.y, x_128.z, x_129.w);
  let x_132 : vec3<f32> = u_xlat1;
  let x_133 : vec4<f32> = u_xlat2;
  let x_135 : vec3<f32> = (x_132 * vec3<f32>(x_133.x, x_133.y, x_133.z));
  let x_136 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_135.x, x_135.y, x_135.z, x_136.w);
  let x_138 : vec3<f32> = u_xlat1;
  let x_140 : vec4<f32> = u_xlat2;
  let x_143 : vec4<f32> = u_xlat3;
  u_xlat1 = ((vec3<f32>(x_138.z, x_138.x, x_138.y) * vec3<f32>(x_140.y, x_140.z, x_140.x)) + -(vec3<f32>(x_143.x, x_143.y, x_143.z)));
  let x_148 : vec3<f32> = u_xlat1;
  let x_149 : vec3<f32> = u_xlat1;
  u_xlat25 = dot(x_148, x_149);
  let x_151 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_151);
  let x_153 : f32 = u_xlat25;
  let x_155 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_153, x_153, x_153) * x_155);
  let x_157 : vec2<f32> = vs_TEXCOORD0;
  let x_160 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_162 : vec2<f32> = (x_157 + vec2<f32>(x_160.z, x_160.w));
  let x_163 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_162.x, x_162.y, x_163.z, x_163.w);
  let x_167 : vec4<f32> = u_xlat2;
  let x_170 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_167.x, x_167.y) * vec2<f32>(x_170.x, x_170.y));
  let x_178 : vec2<f32> = u_xlat18;
  let x_180 : f32 = x_33.x_GlobalMipBias.x;
  let x_181 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_178, x_180);
  u_xlat25 = x_181.w;
  let x_183 : f32 = u_xlat25;
  u_xlat18.x = fract(x_183);
  let x_187 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_187 * 2.0f) + -1.0f);
  let x_193 : f32 = u_xlat25;
  u_xlat25 = (x_193 + 0.9296875f);
  let x_196 : f32 = u_xlat25;
  u_xlat25 = (x_196 * 628.31854248f);
  let x_200 : f32 = u_xlat3.z;
  let x_203 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_200) * x_203) + 1.0f);
  let x_208 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_208);
  let x_212 : f32 = u_xlat25;
  u_xlat4.x = sin(x_212);
  let x_216 : f32 = u_xlat25;
  u_xlat5.x = cos(x_216);
  let x_220 : f32 = u_xlat18.x;
  let x_222 : f32 = u_xlat5.x;
  u_xlat3.x = (x_220 * x_222);
  let x_226 : f32 = u_xlat18.x;
  let x_228 : f32 = u_xlat4.x;
  u_xlat3.y = (x_226 * x_228);
  let x_231 : vec3<f32> = u_xlat1;
  let x_232 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_231, vec3<f32>(x_232.x, x_232.y, x_232.z));
  let x_236 : f32 = u_xlat25;
  u_xlatb25 = (x_236 >= 0.0f);
  let x_238 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_238);
  let x_240 : f32 = u_xlat25;
  let x_242 : vec4<f32> = u_xlat3;
  let x_244 : vec3<f32> = (vec3<f32>(x_240, x_240, x_240) * vec3<f32>(x_242.x, x_242.y, x_242.z));
  let x_245 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_244.x, x_244.y, x_244.z, x_245.w);
  let x_247 : vec4<f32> = u_xlat3;
  let x_250 : vec4<f32> = x_33.x_SSAOParams;
  let x_252 : vec3<f32> = (vec3<f32>(x_247.x, x_247.y, x_247.z) * vec3<f32>(x_250.y, x_250.y, x_250.y));
  let x_253 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_252.x, x_252.y, x_252.z, x_253.w);
  let x_255 : vec4<f32> = u_xlat3;
  let x_260 : vec3<f32> = u_xlat8;
  let x_261 : vec3<f32> = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_260);
  let x_262 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_261.x, x_261.y, x_261.z, x_262.w);
  let x_264 : vec4<f32> = u_xlat3;
  let x_268 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_264.y, x_264.y) * vec2<f32>(x_268.x, x_268.y));
  let x_272 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_274 : vec4<f32> = u_xlat3;
  let x_277 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_272.x, x_272.y) * vec2<f32>(x_274.x, x_274.x)) + x_277);
  let x_281 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_283 : vec4<f32> = u_xlat3;
  let x_286 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_281.x, x_281.y) * vec2<f32>(x_283.z, x_283.z)) + x_286);
  let x_289 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_289;
  let x_292 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_292;
  let x_295 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_295;
  let x_297 : vec3<f32> = u_xlat4;
  let x_298 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_297, vec3<f32>(x_298.x, x_298.y, x_298.z));
  let x_301 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_301));
  let x_305 : vec2<f32> = u_xlat18;
  let x_306 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_305 * vec2<f32>(x_306.x, x_306.x)) + vec2<f32>(1.0f, 1.0f));
  let x_311 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_311 * vec2<f32>(0.5f, 0.5f));
  let x_314 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_314, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_321 : vec2<f32> = u_xlat18;
  let x_323 : f32 = x_33.x_GlobalMipBias.x;
  let x_324 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_321, x_323);
  u_xlat3.x = x_324.x;
  let x_329 : f32 = x_33.x_ZBufferParams.z;
  let x_331 : f32 = u_xlat3.x;
  let x_334 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_329 * x_331) + x_334);
  let x_338 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_338);
  let x_341 : f32 = u_xlat25;
  let x_344 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_341) + -(x_344));
  let x_347 : f32 = u_xlat25;
  let x_350 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_347) < x_350);
  let x_352 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_352);
  let x_358 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_358);
  let x_362 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_362);
  let x_365 : f32 = u_xlat25;
  let x_367 : f32 = u_xlat3.x;
  u_xlat25 = (x_365 * x_367);
  let x_371 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_371) + 1.0f);
  let x_375 : f32 = u_xlat11.x;
  let x_377 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_375 * x_377);
  let x_381 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_383 : vec2<f32> = u_xlat18;
  let x_387 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_381.x, x_381.y, x_381.z) * vec3<f32>(x_383.x, x_383.x, x_383.x)) + vec3<f32>(x_387.x, x_387.y, x_387.z));
  let x_391 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_393 : f32 = u_xlat26;
  let x_396 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_391.x, x_391.y, x_391.z) * vec3<f32>(x_393, x_393, x_393)) + x_396);
  let x_398 : vec3<f32> = u_xlat11;
  let x_399 : vec4<f32> = u_xlat3;
  let x_402 : vec3<f32> = u_xlat8;
  let x_404 : vec3<f32> = ((x_398 * vec3<f32>(x_399.x, x_399.x, x_399.x)) + -(x_402));
  let x_405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_407 : vec4<f32> = u_xlat3;
  let x_409 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_407.x, x_407.y, x_407.z), x_409);
  let x_412 : f32 = u_xlat0;
  let x_417 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_412) * 0.004f) + x_417);
  let x_421 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_421, 0.0f);
  let x_424 : vec4<f32> = u_xlat3;
  let x_426 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_424.x, x_424.y, x_424.z), vec3<f32>(x_426.x, x_426.y, x_426.z));
  let x_429 : f32 = u_xlat26;
  u_xlat26 = (x_429 + 0.0001f);
  let x_432 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_432);
  let x_434 : f32 = u_xlat26;
  let x_436 : f32 = u_xlat18.x;
  u_xlat18.x = (x_434 * x_436);
  let x_439 : vec4<f32> = u_xlat2;
  let x_442 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_439.x, x_439.y, x_439.x, x_439.y) * vec4<f32>(x_442.x, x_442.y, x_442.x, x_442.y)) + vec4<f32>(0.125f, 0.125f, 0.25f, 0.25f));
  let x_452 : vec4<f32> = u_xlat3;
  let x_455 : f32 = x_33.x_GlobalMipBias.x;
  let x_456 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_452.x, x_452.y), x_455);
  u_xlat26 = x_456.w;
  let x_458 : f32 = u_xlat26;
  let x_463 : vec2<f32> = (vec2<f32>(x_458, x_458) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_464 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_463.x, x_463.y, x_464.z, x_464.w);
  let x_467 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_467);
  let x_469 : f32 = u_xlat26;
  u_xlat5.z = ((x_469 * 2.0f) + -1.0f);
  let x_474 : f32 = u_xlat3.y;
  u_xlat26 = (x_474 * 628.31854248f);
  let x_477 : f32 = u_xlat5.z;
  let x_480 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_477) * x_480) + 1.0f);
  let x_485 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_485);
  let x_489 : f32 = u_xlat26;
  u_xlat6 = sin(x_489);
  let x_492 : f32 = u_xlat26;
  u_xlat7 = cos(x_492);
  let x_495 : f32 = u_xlat3.x;
  let x_496 : f32 = u_xlat7;
  u_xlat5.x = (x_495 * x_496);
  let x_500 : f32 = u_xlat3.x;
  let x_501 : f32 = u_xlat6;
  u_xlat5.y = (x_500 * x_501);
  let x_504 : vec3<f32> = u_xlat1;
  let x_505 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_504, x_505);
  let x_508 : f32 = u_xlat26;
  u_xlatb26 = (x_508 >= 0.0f);
  let x_510 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_510);
  let x_512 : f32 = u_xlat26;
  let x_514 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_512, x_512, x_512) * x_514);
  let x_516 : vec3<f32> = u_xlat5;
  let x_518 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_516 * vec3<f32>(x_518.y, x_518.y, x_518.y));
  let x_521 : vec3<f32> = u_xlat5;
  let x_525 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_521 * vec3<f32>(0.114062503f, 0.114062503f, 0.114062503f)) + x_525);
  let x_527 : vec3<f32> = u_xlat5;
  let x_530 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_532 : vec2<f32> = (vec2<f32>(x_527.y, x_527.y) * vec2<f32>(x_530.x, x_530.y));
  let x_533 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
  let x_536 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_538 : vec3<f32> = u_xlat5;
  let x_541 : vec4<f32> = u_xlat3;
  let x_543 : vec2<f32> = ((vec2<f32>(x_536.x, x_536.y) * vec2<f32>(x_538.x, x_538.x)) + vec2<f32>(x_541.x, x_541.y));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_544.z, x_544.w);
  let x_547 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_549 : vec3<f32> = u_xlat5;
  let x_552 : vec4<f32> = u_xlat3;
  let x_554 : vec2<f32> = ((vec2<f32>(x_547.x, x_547.y) * vec2<f32>(x_549.z, x_549.z)) + vec2<f32>(x_552.x, x_552.y));
  let x_555 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_554.x, x_554.y, x_555.z, x_555.w);
  let x_557 : vec3<f32> = u_xlat4;
  let x_558 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_557, x_558);
  let x_561 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_561));
  let x_564 : vec4<f32> = u_xlat3;
  let x_566 : f32 = u_xlat28;
  let x_569 : vec2<f32> = ((vec2<f32>(x_564.x, x_564.y) * vec2<f32>(x_566, x_566)) + vec2<f32>(1.0f, 1.0f));
  let x_570 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_569.x, x_569.y, x_570.z, x_570.w);
  let x_572 : vec4<f32> = u_xlat3;
  let x_574 : vec2<f32> = (vec2<f32>(x_572.x, x_572.y) * vec2<f32>(0.5f, 0.5f));
  let x_575 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_574.x, x_574.y, x_575.z, x_575.w);
  let x_577 : vec4<f32> = u_xlat3;
  let x_581 : vec2<f32> = clamp(vec2<f32>(x_577.x, x_577.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_582 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_581.x, x_581.y, x_582.z, x_582.w);
  let x_587 : vec4<f32> = u_xlat3;
  let x_590 : f32 = x_33.x_GlobalMipBias.x;
  let x_591 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_587.x, x_587.y), x_590);
  u_xlat28 = x_591.x;
  let x_594 : f32 = x_33.x_ZBufferParams.z;
  let x_595 : f32 = u_xlat28;
  let x_598 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_594 * x_595) + x_598);
  let x_602 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_602);
  let x_605 : f32 = u_xlat26;
  let x_608 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_605) + -(x_608));
  let x_611 : f32 = u_xlat26;
  let x_614 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_611) < x_614);
  let x_616 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_616);
  let x_619 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_619);
  let x_621 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_621);
  let x_623 : f32 = u_xlat26;
  let x_624 : f32 = u_xlat28;
  u_xlat26 = (x_623 * x_624);
  let x_627 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_627) + 1.0f);
  let x_632 : f32 = u_xlat5.x;
  let x_634 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_632 * x_634);
  let x_637 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_639 : vec4<f32> = u_xlat3;
  let x_643 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_637.x, x_637.y, x_637.z) * vec3<f32>(x_639.x, x_639.x, x_639.x)) + vec3<f32>(x_643.x, x_643.y, x_643.z));
  let x_647 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_649 : vec3<f32> = u_xlat11;
  let x_652 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_647.x, x_647.y, x_647.z) * vec3<f32>(x_649.x, x_649.x, x_649.x)) + x_652);
  let x_654 : vec3<f32> = u_xlat5;
  let x_655 : f32 = u_xlat28;
  let x_658 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_654 * vec3<f32>(x_655, x_655, x_655)) + -(x_658));
  let x_661 : vec3<f32> = u_xlat5;
  let x_662 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_661, x_662);
  let x_665 : f32 = u_xlat0;
  let x_669 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_665) * 0.004f) + x_669);
  let x_673 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_673, 0.0f);
  let x_676 : vec3<f32> = u_xlat5;
  let x_677 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_676, x_677);
  let x_681 : f32 = u_xlat11.x;
  u_xlat11.x = (x_681 + 0.0001f);
  let x_685 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_685);
  let x_689 : f32 = u_xlat11.x;
  let x_691 : f32 = u_xlat3.x;
  u_xlat3.x = (x_689 * x_691);
  let x_694 : f32 = u_xlat26;
  let x_696 : f32 = u_xlat3.x;
  u_xlat26 = (x_694 * x_696);
  let x_699 : f32 = u_xlat18.x;
  let x_700 : f32 = u_xlat25;
  let x_702 : f32 = u_xlat26;
  u_xlat25 = ((x_699 * x_700) + x_702);
  let x_707 : vec4<f32> = u_xlat3;
  let x_710 : f32 = x_33.x_GlobalMipBias.x;
  let x_711 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_707.z, x_707.w), x_710);
  u_xlat18.x = x_711.w;
  let x_714 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_714.x, x_714.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_721 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_721);
  let x_725 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_725 * 2.0f) + -1.0f);
  let x_730 : f32 = u_xlat18.y;
  u_xlat18.x = (x_730 * 628.31854248f);
  let x_734 : f32 = u_xlat3.z;
  let x_737 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_734) * x_737) + 1.0f);
  let x_740 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_740);
  let x_743 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_743);
  let x_747 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_747);
  let x_749 : f32 = u_xlat26;
  let x_750 : f32 = u_xlat6;
  u_xlat3.x = (x_749 * x_750);
  let x_753 : f32 = u_xlat26;
  let x_755 : f32 = u_xlat5.x;
  u_xlat3.y = (x_753 * x_755);
  let x_758 : vec3<f32> = u_xlat1;
  let x_759 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_758, vec3<f32>(x_759.x, x_759.y, x_759.z));
  let x_765 : f32 = u_xlat18.x;
  u_xlatb18 = (x_765 >= 0.0f);
  let x_767 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_767);
  let x_770 : vec2<f32> = u_xlat18;
  let x_772 : vec4<f32> = u_xlat3;
  let x_774 : vec3<f32> = (vec3<f32>(x_770.x, x_770.x, x_770.x) * vec3<f32>(x_772.x, x_772.y, x_772.z));
  let x_775 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_774.x, x_774.y, x_774.z, x_775.w);
  let x_777 : vec4<f32> = u_xlat3;
  let x_780 : vec4<f32> = x_33.x_SSAOParams;
  let x_782 : vec3<f32> = (vec3<f32>(x_777.x, x_777.y, x_777.z) * vec3<f32>(x_780.y, x_780.y, x_780.y));
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_782.x, x_782.y, x_782.z, x_783.w);
  let x_785 : vec4<f32> = u_xlat3;
  let x_790 : vec3<f32> = u_xlat8;
  let x_791 : vec3<f32> = ((vec3<f32>(x_785.x, x_785.y, x_785.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_790);
  let x_792 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_791.x, x_791.y, x_791.z, x_792.w);
  let x_794 : vec4<f32> = u_xlat3;
  let x_797 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_794.y, x_794.y) * vec2<f32>(x_797.x, x_797.y));
  let x_801 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_803 : vec4<f32> = u_xlat3;
  let x_806 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_801.x, x_801.y) * vec2<f32>(x_803.x, x_803.x)) + x_806);
  let x_809 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_811 : vec4<f32> = u_xlat3;
  let x_814 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_809.x, x_809.y) * vec2<f32>(x_811.z, x_811.z)) + x_814);
  let x_816 : vec3<f32> = u_xlat4;
  let x_817 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_816, vec3<f32>(x_817.x, x_817.y, x_817.z));
  let x_822 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_822));
  let x_826 : vec2<f32> = u_xlat18;
  let x_827 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_826 * vec2<f32>(x_827.x, x_827.x)) + vec2<f32>(1.0f, 1.0f));
  let x_831 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_831 * vec2<f32>(0.5f, 0.5f));
  let x_833 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_833, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_840 : vec2<f32> = u_xlat18;
  let x_842 : f32 = x_33.x_GlobalMipBias.x;
  let x_843 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_840, x_842);
  u_xlat11.x = x_843.x;
  let x_848 : f32 = x_33.x_ZBufferParams.z;
  let x_850 : f32 = u_xlat11.x;
  let x_853 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_848 * x_850) + x_853);
  let x_855 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_855);
  let x_857 : f32 = u_xlat19;
  let x_860 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_857) + -(x_860));
  let x_865 : f32 = u_xlat3.x;
  let x_868 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_865) < x_868);
  let x_872 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_872);
  let x_876 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_876);
  let x_880 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_880);
  let x_884 : f32 = u_xlat3.y;
  let x_886 : f32 = u_xlat3.x;
  u_xlat3.x = (x_884 * x_886);
  let x_890 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_890) + 1.0f);
  let x_893 : f32 = u_xlat19;
  let x_895 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_893 * x_895);
  let x_899 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_901 : vec2<f32> = u_xlat18;
  let x_905 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_899.x, x_899.y, x_899.z) * vec3<f32>(x_901.x, x_901.x, x_901.x)) + vec3<f32>(x_905.x, x_905.y, x_905.z));
  let x_909 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_911 : f32 = u_xlat26;
  let x_914 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_909.x, x_909.y, x_909.z) * vec3<f32>(x_911, x_911, x_911)) + x_914);
  let x_916 : vec3<f32> = u_xlat5;
  let x_917 : vec3<f32> = u_xlat11;
  let x_920 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_916 * vec3<f32>(x_917.x, x_917.x, x_917.x)) + -(x_920));
  let x_923 : vec3<f32> = u_xlat11;
  let x_924 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_923, x_924);
  let x_927 : f32 = u_xlat0;
  let x_931 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_927) * 0.004f) + x_931);
  let x_935 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_935, 0.0f);
  let x_938 : vec3<f32> = u_xlat11;
  let x_939 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_938, x_939);
  let x_941 : f32 = u_xlat26;
  u_xlat26 = (x_941 + 0.0001f);
  let x_943 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_943);
  let x_945 : f32 = u_xlat26;
  let x_947 : f32 = u_xlat18.x;
  u_xlat18.x = (x_945 * x_947);
  let x_951 : f32 = u_xlat18.x;
  let x_953 : f32 = u_xlat3.x;
  let x_955 : f32 = u_xlat25;
  u_xlat25 = ((x_951 * x_953) + x_955);
  let x_957 : vec4<f32> = u_xlat2;
  let x_960 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_957.x, x_957.y, x_957.x, x_957.y) * vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y)) + vec4<f32>(0.375f, 0.375f, 0.5f, 0.5f));
  let x_969 : vec4<f32> = u_xlat3;
  let x_972 : f32 = x_33.x_GlobalMipBias.x;
  let x_973 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_969.x, x_969.y), x_972);
  u_xlat18.x = x_973.w;
  let x_976 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_976.x, x_976.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_983 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_983);
  let x_987 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_987 * 2.0f) + -1.0f);
  let x_992 : f32 = u_xlat18.y;
  u_xlat18.x = (x_992 * 628.31854248f);
  let x_996 : f32 = u_xlat5.z;
  let x_999 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_996) * x_999) + 1.0f);
  let x_1002 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1002);
  let x_1005 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1005);
  let x_1009 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1009);
  let x_1011 : f32 = u_xlat26;
  let x_1012 : f32 = u_xlat6;
  u_xlat5.x = (x_1011 * x_1012);
  let x_1015 : f32 = u_xlat26;
  let x_1017 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1015 * x_1017);
  let x_1020 : vec3<f32> = u_xlat1;
  let x_1021 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_1020, x_1021);
  let x_1025 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1025 >= 0.0f);
  let x_1027 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1027);
  let x_1030 : vec2<f32> = u_xlat18;
  let x_1032 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1030.x, x_1030.x, x_1030.x) * x_1032);
  let x_1034 : vec3<f32> = u_xlat5;
  let x_1036 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1034 * vec3<f32>(x_1036.y, x_1036.y, x_1036.y));
  let x_1039 : vec3<f32> = u_xlat5;
  let x_1043 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1039 * vec3<f32>(0.2265625f, 0.2265625f, 0.2265625f)) + x_1043);
  let x_1045 : vec3<f32> = u_xlat5;
  let x_1048 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1045.y, x_1045.y) * vec2<f32>(x_1048.x, x_1048.y));
  let x_1052 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1054 : vec3<f32> = u_xlat5;
  let x_1057 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1052.x, x_1052.y) * vec2<f32>(x_1054.x, x_1054.x)) + x_1057);
  let x_1060 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1062 : vec3<f32> = u_xlat5;
  let x_1065 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1062.z, x_1062.z)) + x_1065);
  let x_1067 : vec3<f32> = u_xlat4;
  let x_1068 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1067, x_1068);
  let x_1072 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1072));
  let x_1076 : vec2<f32> = u_xlat18;
  let x_1077 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1076 * vec2<f32>(x_1077.x, x_1077.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1081 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1081 * vec2<f32>(0.5f, 0.5f));
  let x_1083 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1083, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1090 : vec2<f32> = u_xlat18;
  let x_1092 : f32 = x_33.x_GlobalMipBias.x;
  let x_1093 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1090, x_1092);
  u_xlat11.x = x_1093.x;
  let x_1097 : f32 = x_33.x_ZBufferParams.z;
  let x_1099 : f32 = u_xlat11.x;
  let x_1102 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1097 * x_1099) + x_1102);
  let x_1104 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1104);
  let x_1107 : f32 = u_xlat3.x;
  let x_1109 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1107) + -(x_1109));
  let x_1114 : f32 = u_xlat3.x;
  let x_1117 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1114) < x_1117);
  let x_1121 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1121);
  let x_1125 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1125);
  let x_1129 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1129);
  let x_1133 : f32 = u_xlat3.y;
  let x_1135 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1133 * x_1135);
  let x_1139 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1139) + 1.0f);
  let x_1142 : f32 = u_xlat28;
  let x_1144 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1142 * x_1144);
  let x_1148 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1150 : vec2<f32> = u_xlat18;
  let x_1154 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1148.x, x_1148.y, x_1148.z) * vec3<f32>(x_1150.x, x_1150.x, x_1150.x)) + vec3<f32>(x_1154.x, x_1154.y, x_1154.z));
  let x_1158 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1160 : f32 = u_xlat26;
  let x_1163 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1158.x, x_1158.y, x_1158.z) * vec3<f32>(x_1160, x_1160, x_1160)) + x_1163);
  let x_1165 : vec3<f32> = u_xlat5;
  let x_1166 : vec3<f32> = u_xlat11;
  let x_1169 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1165 * vec3<f32>(x_1166.x, x_1166.x, x_1166.x)) + -(x_1169));
  let x_1172 : vec3<f32> = u_xlat5;
  let x_1173 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1172, x_1173);
  let x_1176 : f32 = u_xlat0;
  let x_1180 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1176) * 0.004f) + x_1180);
  let x_1184 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1184, 0.0f);
  let x_1187 : vec3<f32> = u_xlat5;
  let x_1188 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1187, x_1188);
  let x_1190 : f32 = u_xlat26;
  u_xlat26 = (x_1190 + 0.0001f);
  let x_1192 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1192);
  let x_1194 : f32 = u_xlat26;
  let x_1196 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1194 * x_1196);
  let x_1200 : f32 = u_xlat18.x;
  let x_1202 : f32 = u_xlat3.x;
  let x_1204 : f32 = u_xlat25;
  u_xlat25 = ((x_1200 * x_1202) + x_1204);
  let x_1209 : vec4<f32> = u_xlat3;
  let x_1212 : f32 = x_33.x_GlobalMipBias.x;
  let x_1213 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1209.z, x_1209.w), x_1212);
  u_xlat18.x = x_1213.w;
  let x_1217 : f32 = u_xlat18.x;
  u_xlat26 = (x_1217 + 0.984375f);
  let x_1220 : f32 = u_xlat26;
  u_xlat26 = fract(x_1220);
  let x_1222 : f32 = u_xlat26;
  u_xlat3.z = ((x_1222 * 2.0f) + -1.0f);
  let x_1227 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1227 * 628.31854248f);
  let x_1231 : f32 = u_xlat3.z;
  let x_1234 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1231) * x_1234) + 1.0f);
  let x_1237 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1237);
  let x_1240 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1240);
  let x_1244 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1244);
  let x_1246 : f32 = u_xlat26;
  let x_1247 : f32 = u_xlat6;
  u_xlat3.x = (x_1246 * x_1247);
  let x_1250 : f32 = u_xlat26;
  let x_1252 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1250 * x_1252);
  let x_1255 : vec3<f32> = u_xlat1;
  let x_1256 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_1255, vec3<f32>(x_1256.x, x_1256.y, x_1256.z));
  let x_1261 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1261 >= 0.0f);
  let x_1263 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1263);
  let x_1266 : vec2<f32> = u_xlat18;
  let x_1268 : vec4<f32> = u_xlat3;
  let x_1270 : vec3<f32> = (vec3<f32>(x_1266.x, x_1266.x, x_1266.x) * vec3<f32>(x_1268.x, x_1268.y, x_1268.z));
  let x_1271 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1270.x, x_1270.y, x_1270.z, x_1271.w);
  let x_1273 : vec4<f32> = u_xlat3;
  let x_1276 : vec4<f32> = x_33.x_SSAOParams;
  let x_1278 : vec3<f32> = (vec3<f32>(x_1273.x, x_1273.y, x_1273.z) * vec3<f32>(x_1276.y, x_1276.y, x_1276.y));
  let x_1279 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1278.x, x_1278.y, x_1278.z, x_1279.w);
  let x_1281 : vec4<f32> = u_xlat3;
  let x_1286 : vec3<f32> = u_xlat8;
  let x_1287 : vec3<f32> = ((vec3<f32>(x_1281.x, x_1281.y, x_1281.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1286);
  let x_1288 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1287.x, x_1287.y, x_1287.z, x_1288.w);
  let x_1290 : vec4<f32> = u_xlat3;
  let x_1293 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1290.y, x_1290.y) * vec2<f32>(x_1293.x, x_1293.y));
  let x_1297 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1299 : vec4<f32> = u_xlat3;
  let x_1302 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1297.x, x_1297.y) * vec2<f32>(x_1299.x, x_1299.x)) + x_1302);
  let x_1305 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1307 : vec4<f32> = u_xlat3;
  let x_1310 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1305.x, x_1305.y) * vec2<f32>(x_1307.z, x_1307.z)) + x_1310);
  let x_1312 : vec3<f32> = u_xlat4;
  let x_1313 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1312, vec3<f32>(x_1313.x, x_1313.y, x_1313.z));
  let x_1318 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1318));
  let x_1322 : vec2<f32> = u_xlat18;
  let x_1323 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1322 * vec2<f32>(x_1323.x, x_1323.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1327 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1327 * vec2<f32>(0.5f, 0.5f));
  let x_1329 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1329, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1336 : vec2<f32> = u_xlat18;
  let x_1338 : f32 = x_33.x_GlobalMipBias.x;
  let x_1339 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1336, x_1338);
  u_xlat11.x = x_1339.x;
  let x_1343 : f32 = x_33.x_ZBufferParams.z;
  let x_1345 : f32 = u_xlat11.x;
  let x_1348 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1343 * x_1345) + x_1348);
  let x_1350 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1350);
  let x_1352 : f32 = u_xlat19;
  let x_1355 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1352) + -(x_1355));
  let x_1360 : f32 = u_xlat3.x;
  let x_1363 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1360) < x_1363);
  let x_1367 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1367);
  let x_1371 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1371);
  let x_1375 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1375);
  let x_1379 : f32 = u_xlat3.y;
  let x_1381 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1379 * x_1381);
  let x_1385 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1385) + 1.0f);
  let x_1388 : f32 = u_xlat19;
  let x_1390 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1388 * x_1390);
  let x_1394 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1396 : vec2<f32> = u_xlat18;
  let x_1400 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1394.x, x_1394.y, x_1394.z) * vec3<f32>(x_1396.x, x_1396.x, x_1396.x)) + vec3<f32>(x_1400.x, x_1400.y, x_1400.z));
  let x_1404 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1406 : f32 = u_xlat26;
  let x_1409 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1404.x, x_1404.y, x_1404.z) * vec3<f32>(x_1406, x_1406, x_1406)) + x_1409);
  let x_1411 : vec3<f32> = u_xlat5;
  let x_1412 : vec3<f32> = u_xlat11;
  let x_1415 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1411 * vec3<f32>(x_1412.x, x_1412.x, x_1412.x)) + -(x_1415));
  let x_1418 : vec3<f32> = u_xlat11;
  let x_1419 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1418, x_1419);
  let x_1422 : f32 = u_xlat0;
  let x_1426 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1422) * 0.004f) + x_1426);
  let x_1430 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1430, 0.0f);
  let x_1433 : vec3<f32> = u_xlat11;
  let x_1434 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1433, x_1434);
  let x_1436 : f32 = u_xlat26;
  u_xlat26 = (x_1436 + 0.0001f);
  let x_1438 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1438);
  let x_1440 : f32 = u_xlat26;
  let x_1442 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1440 * x_1442);
  let x_1446 : f32 = u_xlat18.x;
  let x_1448 : f32 = u_xlat3.x;
  let x_1450 : f32 = u_xlat25;
  u_xlat25 = ((x_1446 * x_1448) + x_1450);
  let x_1452 : vec4<f32> = u_xlat2;
  let x_1455 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1452.x, x_1452.y, x_1452.x, x_1452.y) * vec4<f32>(x_1455.x, x_1455.y, x_1455.x, x_1455.y)) + vec4<f32>(0.625f, 0.625f, 0.75f, 0.75f));
  let x_1465 : vec4<f32> = u_xlat3;
  let x_1468 : f32 = x_33.x_GlobalMipBias.x;
  let x_1469 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1465.x, x_1465.y), x_1468);
  u_xlat18.x = x_1469.w;
  let x_1472 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1472.x, x_1472.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1479 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1479);
  let x_1483 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1483 * 2.0f) + -1.0f);
  let x_1488 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1488 * 628.31854248f);
  let x_1492 : f32 = u_xlat5.z;
  let x_1495 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1492) * x_1495) + 1.0f);
  let x_1498 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1498);
  let x_1501 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1501);
  let x_1505 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1505);
  let x_1507 : f32 = u_xlat26;
  let x_1508 : f32 = u_xlat6;
  u_xlat5.x = (x_1507 * x_1508);
  let x_1511 : f32 = u_xlat26;
  let x_1513 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1511 * x_1513);
  let x_1516 : vec3<f32> = u_xlat1;
  let x_1517 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_1516, x_1517);
  let x_1521 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1521 >= 0.0f);
  let x_1523 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1523);
  let x_1526 : vec2<f32> = u_xlat18;
  let x_1528 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1526.x, x_1526.x, x_1526.x) * x_1528);
  let x_1530 : vec3<f32> = u_xlat5;
  let x_1532 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1530 * vec3<f32>(x_1532.y, x_1532.y, x_1532.y));
  let x_1535 : vec3<f32> = u_xlat5;
  let x_1539 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1535 * vec3<f32>(0.451562494f, 0.451562494f, 0.451562494f)) + x_1539);
  let x_1541 : vec3<f32> = u_xlat5;
  let x_1544 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1541.y, x_1541.y) * vec2<f32>(x_1544.x, x_1544.y));
  let x_1548 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1550 : vec3<f32> = u_xlat5;
  let x_1553 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1548.x, x_1548.y) * vec2<f32>(x_1550.x, x_1550.x)) + x_1553);
  let x_1556 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1558 : vec3<f32> = u_xlat5;
  let x_1561 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1556.x, x_1556.y) * vec2<f32>(x_1558.z, x_1558.z)) + x_1561);
  let x_1563 : vec3<f32> = u_xlat4;
  let x_1564 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1563, x_1564);
  let x_1568 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1568));
  let x_1572 : vec2<f32> = u_xlat18;
  let x_1573 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1572 * vec2<f32>(x_1573.x, x_1573.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1577 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1577 * vec2<f32>(0.5f, 0.5f));
  let x_1579 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1579, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1586 : vec2<f32> = u_xlat18;
  let x_1588 : f32 = x_33.x_GlobalMipBias.x;
  let x_1589 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1586, x_1588);
  u_xlat11.x = x_1589.x;
  let x_1593 : f32 = x_33.x_ZBufferParams.z;
  let x_1595 : f32 = u_xlat11.x;
  let x_1598 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1593 * x_1595) + x_1598);
  let x_1600 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1600);
  let x_1603 : f32 = u_xlat3.x;
  let x_1605 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1603) + -(x_1605));
  let x_1610 : f32 = u_xlat3.x;
  let x_1613 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1610) < x_1613);
  let x_1617 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1617);
  let x_1621 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1621);
  let x_1625 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1625);
  let x_1629 : f32 = u_xlat3.y;
  let x_1631 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1629 * x_1631);
  let x_1635 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1635) + 1.0f);
  let x_1638 : f32 = u_xlat28;
  let x_1640 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1638 * x_1640);
  let x_1644 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1646 : vec2<f32> = u_xlat18;
  let x_1650 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1644.x, x_1644.y, x_1644.z) * vec3<f32>(x_1646.x, x_1646.x, x_1646.x)) + vec3<f32>(x_1650.x, x_1650.y, x_1650.z));
  let x_1654 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1656 : f32 = u_xlat26;
  let x_1659 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1654.x, x_1654.y, x_1654.z) * vec3<f32>(x_1656, x_1656, x_1656)) + x_1659);
  let x_1661 : vec3<f32> = u_xlat5;
  let x_1662 : vec3<f32> = u_xlat11;
  let x_1665 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1661 * vec3<f32>(x_1662.x, x_1662.x, x_1662.x)) + -(x_1665));
  let x_1668 : vec3<f32> = u_xlat5;
  let x_1669 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1668, x_1669);
  let x_1672 : f32 = u_xlat0;
  let x_1676 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1672) * 0.004f) + x_1676);
  let x_1680 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1680, 0.0f);
  let x_1683 : vec3<f32> = u_xlat5;
  let x_1684 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1683, x_1684);
  let x_1686 : f32 = u_xlat26;
  u_xlat26 = (x_1686 + 0.0001f);
  let x_1688 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1688);
  let x_1690 : f32 = u_xlat26;
  let x_1692 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1690 * x_1692);
  let x_1696 : f32 = u_xlat18.x;
  let x_1698 : f32 = u_xlat3.x;
  let x_1700 : f32 = u_xlat25;
  u_xlat25 = ((x_1696 * x_1698) + x_1700);
  let x_1705 : vec4<f32> = u_xlat3;
  let x_1708 : f32 = x_33.x_GlobalMipBias.x;
  let x_1709 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1705.z, x_1705.w), x_1708);
  u_xlat18.x = x_1709.w;
  let x_1712 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1712.x, x_1712.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1719 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1719);
  let x_1723 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1723 * 2.0f) + -1.0f);
  let x_1728 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1728 * 628.31854248f);
  let x_1732 : f32 = u_xlat3.z;
  let x_1735 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1732) * x_1735) + 1.0f);
  let x_1738 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1738);
  let x_1741 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1741);
  let x_1745 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1745);
  let x_1747 : f32 = u_xlat26;
  let x_1748 : f32 = u_xlat6;
  u_xlat3.x = (x_1747 * x_1748);
  let x_1751 : f32 = u_xlat26;
  let x_1753 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1751 * x_1753);
  let x_1756 : vec3<f32> = u_xlat1;
  let x_1757 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_1756, vec3<f32>(x_1757.x, x_1757.y, x_1757.z));
  let x_1762 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1762 >= 0.0f);
  let x_1764 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1764);
  let x_1767 : vec2<f32> = u_xlat18;
  let x_1769 : vec4<f32> = u_xlat3;
  let x_1771 : vec3<f32> = (vec3<f32>(x_1767.x, x_1767.x, x_1767.x) * vec3<f32>(x_1769.x, x_1769.y, x_1769.z));
  let x_1772 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1771.x, x_1771.y, x_1771.z, x_1772.w);
  let x_1774 : vec4<f32> = u_xlat3;
  let x_1777 : vec4<f32> = x_33.x_SSAOParams;
  let x_1779 : vec3<f32> = (vec3<f32>(x_1774.x, x_1774.y, x_1774.z) * vec3<f32>(x_1777.y, x_1777.y, x_1777.y));
  let x_1780 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1779.x, x_1779.y, x_1779.z, x_1780.w);
  let x_1782 : vec4<f32> = u_xlat3;
  let x_1787 : vec3<f32> = u_xlat8;
  let x_1788 : vec3<f32> = ((vec3<f32>(x_1782.x, x_1782.y, x_1782.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1787);
  let x_1789 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1788.x, x_1788.y, x_1788.z, x_1789.w);
  let x_1791 : vec4<f32> = u_xlat3;
  let x_1794 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1791.y, x_1791.y) * vec2<f32>(x_1794.x, x_1794.y));
  let x_1798 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1800 : vec4<f32> = u_xlat3;
  let x_1803 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1798.x, x_1798.y) * vec2<f32>(x_1800.x, x_1800.x)) + x_1803);
  let x_1806 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1808 : vec4<f32> = u_xlat3;
  let x_1811 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1806.x, x_1806.y) * vec2<f32>(x_1808.z, x_1808.z)) + x_1811);
  let x_1813 : vec3<f32> = u_xlat4;
  let x_1814 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1813, vec3<f32>(x_1814.x, x_1814.y, x_1814.z));
  let x_1819 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1819));
  let x_1823 : vec2<f32> = u_xlat18;
  let x_1824 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1823 * vec2<f32>(x_1824.x, x_1824.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1828 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1828 * vec2<f32>(0.5f, 0.5f));
  let x_1830 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1830, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1837 : vec2<f32> = u_xlat18;
  let x_1839 : f32 = x_33.x_GlobalMipBias.x;
  let x_1840 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1837, x_1839);
  u_xlat11.x = x_1840.x;
  let x_1844 : f32 = x_33.x_ZBufferParams.z;
  let x_1846 : f32 = u_xlat11.x;
  let x_1849 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1844 * x_1846) + x_1849);
  let x_1851 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1851);
  let x_1853 : f32 = u_xlat19;
  let x_1856 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1853) + -(x_1856));
  let x_1861 : f32 = u_xlat3.x;
  let x_1864 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1861) < x_1864);
  let x_1868 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1868);
  let x_1872 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1872);
  let x_1876 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1876);
  let x_1880 : f32 = u_xlat3.y;
  let x_1882 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1880 * x_1882);
  let x_1886 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1886) + 1.0f);
  let x_1889 : f32 = u_xlat19;
  let x_1891 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1889 * x_1891);
  let x_1895 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1897 : vec2<f32> = u_xlat18;
  let x_1901 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1895.x, x_1895.y, x_1895.z) * vec3<f32>(x_1897.x, x_1897.x, x_1897.x)) + vec3<f32>(x_1901.x, x_1901.y, x_1901.z));
  let x_1905 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1907 : f32 = u_xlat26;
  let x_1910 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1905.x, x_1905.y, x_1905.z) * vec3<f32>(x_1907, x_1907, x_1907)) + x_1910);
  let x_1912 : vec3<f32> = u_xlat5;
  let x_1913 : vec3<f32> = u_xlat11;
  let x_1916 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1912 * vec3<f32>(x_1913.x, x_1913.x, x_1913.x)) + -(x_1916));
  let x_1919 : vec3<f32> = u_xlat11;
  let x_1920 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1919, x_1920);
  let x_1923 : f32 = u_xlat0;
  let x_1927 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1923) * 0.004f) + x_1927);
  let x_1931 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1931, 0.0f);
  let x_1934 : vec3<f32> = u_xlat11;
  let x_1935 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1934, x_1935);
  let x_1937 : f32 = u_xlat26;
  u_xlat26 = (x_1937 + 0.0001f);
  let x_1939 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1939);
  let x_1941 : f32 = u_xlat26;
  let x_1943 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1941 * x_1943);
  let x_1947 : f32 = u_xlat18.x;
  let x_1949 : f32 = u_xlat3.x;
  let x_1951 : f32 = u_xlat25;
  u_xlat25 = ((x_1947 * x_1949) + x_1951);
  let x_1953 : vec4<f32> = u_xlat2;
  let x_1956 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_1961 : vec2<f32> = ((vec2<f32>(x_1953.x, x_1953.y) * vec2<f32>(x_1956.x, x_1956.y)) + vec2<f32>(0.875f, 0.875f));
  let x_1962 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1961.x, x_1961.y, x_1962.z, x_1962.w);
  let x_1967 : vec4<f32> = u_xlat2;
  let x_1970 : f32 = x_33.x_GlobalMipBias.x;
  let x_1971 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1967.x, x_1967.y), x_1970);
  u_xlat2.x = x_1971.w;
  let x_1974 : vec4<f32> = u_xlat2;
  let x_1978 : vec2<f32> = (vec2<f32>(x_1974.x, x_1974.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_1979 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1978.x, x_1978.y, x_1979.z, x_1979.w);
  let x_1982 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1982);
  let x_1986 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_1986 * 2.0f) + -1.0f);
  let x_1991 : f32 = u_xlat2.y;
  u_xlat2.x = (x_1991 * 628.31854248f);
  let x_1996 : f32 = u_xlat3.z;
  let x_1999 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1996) * x_1999) + 1.0f);
  let x_2004 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_2004);
  let x_2008 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_2008);
  let x_2012 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_2012);
  let x_2016 : f32 = u_xlat10.x;
  let x_2018 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2016 * x_2018);
  let x_2022 : f32 = u_xlat2.x;
  let x_2024 : f32 = u_xlat10.x;
  u_xlat3.y = (x_2022 * x_2024);
  let x_2027 : vec3<f32> = u_xlat1;
  let x_2028 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_2027, vec3<f32>(x_2028.x, x_2028.y, x_2028.z));
  let x_2036 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_2036 >= 0.0f);
  let x_2040 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_2040);
  let x_2043 : vec4<f32> = u_xlat2;
  let x_2045 : vec4<f32> = u_xlat3;
  let x_2047 : vec3<f32> = (vec3<f32>(x_2043.x, x_2043.x, x_2043.x) * vec3<f32>(x_2045.x, x_2045.y, x_2045.z));
  let x_2048 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2047.x, x_2047.y, x_2047.z, x_2048.w);
  let x_2050 : vec4<f32> = u_xlat2;
  let x_2053 : vec4<f32> = x_33.x_SSAOParams;
  let x_2055 : vec3<f32> = (vec3<f32>(x_2050.x, x_2050.y, x_2050.z) * vec3<f32>(x_2053.y, x_2053.y, x_2053.y));
  let x_2056 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2055.x, x_2055.y, x_2055.z, x_2056.w);
  let x_2058 : vec4<f32> = u_xlat2;
  let x_2063 : vec3<f32> = u_xlat8;
  let x_2064 : vec3<f32> = ((vec3<f32>(x_2058.x, x_2058.y, x_2058.z) * vec3<f32>(0.7890625f, 0.7890625f, 0.7890625f)) + x_2063);
  let x_2065 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2064.x, x_2064.y, x_2064.z, x_2065.w);
  let x_2067 : vec4<f32> = u_xlat2;
  let x_2070 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_2072 : vec2<f32> = (vec2<f32>(x_2067.y, x_2067.y) * vec2<f32>(x_2070.x, x_2070.y));
  let x_2073 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2072.x, x_2072.y, x_2073.z, x_2073.w);
  let x_2076 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2078 : vec4<f32> = u_xlat2;
  let x_2081 : vec4<f32> = u_xlat3;
  let x_2083 : vec2<f32> = ((vec2<f32>(x_2076.x, x_2076.y) * vec2<f32>(x_2078.x, x_2078.x)) + vec2<f32>(x_2081.x, x_2081.y));
  let x_2084 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2083.x, x_2083.y, x_2084.z, x_2084.w);
  let x_2087 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2089 : vec4<f32> = u_xlat2;
  let x_2092 : vec4<f32> = u_xlat3;
  let x_2094 : vec2<f32> = ((vec2<f32>(x_2087.x, x_2087.y) * vec2<f32>(x_2089.z, x_2089.z)) + vec2<f32>(x_2092.x, x_2092.y));
  let x_2095 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2094.x, x_2094.y, x_2095.z, x_2095.w);
  let x_2097 : vec3<f32> = u_xlat4;
  let x_2098 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_2097, vec3<f32>(x_2098.x, x_2098.y, x_2098.z));
  let x_2103 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_2103));
  let x_2107 : vec4<f32> = u_xlat3;
  let x_2109 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_2107.x, x_2107.y) * vec2<f32>(x_2109.x, x_2109.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2113 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_2113 * vec2<f32>(0.5f, 0.5f));
  let x_2115 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_2115, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2122 : vec2<f32> = u_xlat10;
  let x_2124 : f32 = x_33.x_GlobalMipBias.x;
  let x_2125 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2122, x_2124);
  u_xlat26 = x_2125.x;
  let x_2128 : f32 = x_33.x_ZBufferParams.z;
  let x_2129 : f32 = u_xlat26;
  let x_2132 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_2128 * x_2129) + x_2132);
  let x_2136 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2136);
  let x_2140 : f32 = u_xlat2.x;
  let x_2143 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_2140) + -(x_2143));
  let x_2148 : f32 = u_xlat2.x;
  let x_2151 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_2148) < x_2151);
  let x_2154 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_2154);
  let x_2158 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_2158);
  let x_2162 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_2162);
  let x_2166 : f32 = u_xlat2.w;
  let x_2168 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2166 * x_2168);
  let x_2172 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_2172) + 1.0f);
  let x_2177 : f32 = u_xlat3.x;
  let x_2179 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_2177 * x_2179);
  let x_2182 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2184 : vec2<f32> = u_xlat10;
  let x_2188 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2190 : vec3<f32> = ((vec3<f32>(x_2182.x, x_2182.y, x_2182.z) * vec3<f32>(x_2184.x, x_2184.x, x_2184.x)) + vec3<f32>(x_2188.x, x_2188.y, x_2188.z));
  let x_2191 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2190.x, x_2190.y, x_2190.z, x_2191.w);
  let x_2194 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2196 : vec2<f32> = u_xlat18;
  let x_2199 : vec4<f32> = u_xlat3;
  let x_2201 : vec3<f32> = ((vec3<f32>(x_2194.x, x_2194.y, x_2194.z) * vec3<f32>(x_2196.x, x_2196.x, x_2196.x)) + vec3<f32>(x_2199.x, x_2199.y, x_2199.z));
  let x_2202 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2201.x, x_2201.y, x_2201.z, x_2202.w);
  let x_2204 : vec4<f32> = u_xlat3;
  let x_2206 : f32 = u_xlat26;
  let x_2209 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_2204.x, x_2204.y, x_2204.z) * vec3<f32>(x_2206, x_2206, x_2206)) + -(x_2209));
  let x_2212 : vec3<f32> = u_xlat8;
  let x_2213 : vec3<f32> = u_xlat1;
  u_xlat10.x = dot(x_2212, x_2213);
  let x_2216 : f32 = u_xlat0;
  let x_2220 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_2216) * 0.004f) + x_2220);
  let x_2224 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_2224, 0.0f);
  let x_2227 : vec3<f32> = u_xlat8;
  let x_2228 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_2227, x_2228);
  let x_2232 : f32 = u_xlat8.x;
  u_xlat8.x = (x_2232 + 0.0001f);
  let x_2236 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_2236);
  let x_2240 : f32 = u_xlat8.x;
  let x_2242 : f32 = u_xlat10.x;
  u_xlat8.x = (x_2240 * x_2242);
  let x_2246 : f32 = u_xlat8.x;
  let x_2248 : f32 = u_xlat2.x;
  let x_2250 : f32 = u_xlat25;
  u_xlat8.x = ((x_2246 * x_2248) + x_2250);
  let x_2254 : f32 = u_xlat8.x;
  let x_2256 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_2254 * x_2256);
  let x_2260 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_2260);
  let x_2262 : f32 = u_xlat0;
  let x_2264 : f32 = u_xlat16;
  u_xlat0 = ((-(x_2262) * x_2264) + 1.0f);
  let x_2267 : f32 = u_xlat0;
  let x_2268 : f32 = u_xlat0;
  u_xlat0 = (x_2267 * x_2268);
  let x_2271 : f32 = u_xlat8.x;
  let x_2273 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_2271 * x_2273);
  let x_2276 : f32 = u_xlat0;
  let x_2278 : f32 = u_xlat8.x;
  u_xlat0 = (x_2276 * x_2278);
  let x_2280 : f32 = u_xlat0;
  u_xlat0 = (x_2280 * 0.125f);
  let x_2282 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2282, 0.0f, 1.0f);
  let x_2284 : f32 = u_xlat0;
  u_xlat0 = log2(x_2284);
  let x_2286 : f32 = u_xlat0;
  u_xlat0 = (x_2286 * 0.600000024f);
  let x_2289 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2289);
  let x_2293 : vec3<f32> = u_xlat1;
  let x_2296 : vec3<f32> = ((x_2293 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2297 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2297.x, x_2296.x, x_2296.y, x_2296.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

