type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
}

var<private> vs_TEXCOORD6 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_20 : MainLightShadows;

var<private> vs_TEXCOORD5 : vec4<f32>;

@group(1) @binding(1) var<uniform> x_231 : UnityPerDraw;

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(2) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_328 : PGlobals;

@group(0) @binding(1) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(3) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlat17 : vec3<f32>;
  var u_xlat51 : f32;
  var u_xlatb51 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb52 : bool;
  var u_xlat37 : vec2<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat39 : vec2<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat52 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat20 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat21 : vec3<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat22 : vec2<f32>;
  var u_xlat45 : vec2<f32>;
  var u_xlat40 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb17 : bool;
  var u_xlatb34 : bool;
  var x_1618 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec3<f32> = vs_TEXCOORD6;
  let x_25 : vec4<f32> = x_20.x_CascadeShadowSplitSpheres0;
  let x_28 : vec3<f32> = (x_13 + -(vec3<f32>(x_25.x, x_25.y, x_25.z)));
  let x_29 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_28.x, x_28.y, x_28.z, x_29.w);
  let x_32 : vec3<f32> = vs_TEXCOORD6;
  let x_35 : vec4<f32> = x_20.x_CascadeShadowSplitSpheres1;
  let x_38 : vec3<f32> = (x_32 + -(vec3<f32>(x_35.x, x_35.y, x_35.z)));
  let x_39 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_38.x, x_38.y, x_38.z, x_39.w);
  let x_42 : vec3<f32> = vs_TEXCOORD6;
  let x_45 : vec4<f32> = x_20.x_CascadeShadowSplitSpheres2;
  let x_48 : vec3<f32> = (x_42 + -(vec3<f32>(x_45.x, x_45.y, x_45.z)));
  let x_49 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_48.x, x_48.y, x_48.z, x_49.w);
  let x_52 : vec3<f32> = vs_TEXCOORD6;
  let x_55 : vec4<f32> = x_20.x_CascadeShadowSplitSpheres3;
  let x_58 : vec3<f32> = (x_52 + -(vec3<f32>(x_55.x, x_55.y, x_55.z)));
  let x_59 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_58.x, x_58.y, x_58.z, x_59.w);
  let x_61 : vec4<f32> = u_xlat0;
  let x_63 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec3<f32>(x_61.x, x_61.y, x_61.z), vec3<f32>(x_63.x, x_63.y, x_63.z));
  let x_69 : vec4<f32> = u_xlat1;
  let x_71 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(x_69.x, x_69.y, x_69.z), vec3<f32>(x_71.x, x_71.y, x_71.z));
  let x_76 : vec4<f32> = u_xlat2;
  let x_78 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(x_76.x, x_76.y, x_76.z), vec3<f32>(x_78.x, x_78.y, x_78.z));
  let x_83 : vec4<f32> = u_xlat3;
  let x_85 : vec4<f32> = u_xlat3;
  u_xlat0.w = dot(vec3<f32>(x_83.x, x_83.y, x_83.z), vec3<f32>(x_85.x, x_85.y, x_85.z));
  let x_94 : vec4<f32> = u_xlat0;
  let x_97 : vec4<f32> = x_20.x_CascadeShadowSplitSphereRadii;
  u_xlatb0 = (x_94 < x_97);
  let x_101 : bool = u_xlatb0.x;
  u_xlat1.x = select(0.0f, 1.0f, x_101);
  let x_107 : bool = u_xlatb0.y;
  u_xlat1.y = select(0.0f, 1.0f, x_107);
  let x_111 : bool = u_xlatb0.z;
  u_xlat1.z = select(0.0f, 1.0f, x_111);
  let x_115 : bool = u_xlatb0.w;
  u_xlat1.w = select(0.0f, 1.0f, x_115);
  let x_119 : bool = u_xlatb0.x;
  u_xlat0.x = select(-0.0f, -1.0f, x_119);
  let x_125 : bool = u_xlatb0.y;
  u_xlat0.y = select(-0.0f, -1.0f, x_125);
  let x_129 : bool = u_xlatb0.z;
  u_xlat0.z = select(-0.0f, -1.0f, x_129);
  let x_132 : vec4<f32> = u_xlat0;
  let x_134 : vec4<f32> = u_xlat1;
  let x_136 : vec3<f32> = (vec3<f32>(x_132.x, x_132.y, x_132.z) + vec3<f32>(x_134.y, x_134.z, x_134.w));
  let x_137 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_136.x, x_136.y, x_136.z, x_137.w);
  let x_139 : vec4<f32> = u_xlat0;
  let x_142 : vec3<f32> = max(vec3<f32>(x_139.x, x_139.y, x_139.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_143 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_143.x, x_142.x, x_142.y, x_142.z);
  let x_145 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(x_145, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_153 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_153) + 4.0f);
  let x_160 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_160);
  let x_164 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_164) << bitcast<u32>(2i));
  let x_169 : vec3<f32> = vs_TEXCOORD6;
  let x_172 : i32 = u_xlati0;
  let x_175 : i32 = u_xlati0;
  let x_179 : vec4<f32> = x_20.x_MainLightWorldToShadow[((x_172 + 1i) / 4i)][((x_175 + 1i) % 4i)];
  u_xlat17 = (vec3<f32>(x_169.y, x_169.y, x_169.y) * vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : i32 = u_xlati0;
  let x_184 : i32 = u_xlati0;
  let x_187 : vec4<f32> = x_20.x_MainLightWorldToShadow[(x_182 / 4i)][(x_184 % 4i)];
  let x_189 : vec3<f32> = vs_TEXCOORD6;
  let x_192 : vec3<f32> = u_xlat17;
  u_xlat17 = ((vec3<f32>(x_187.x, x_187.y, x_187.z) * vec3<f32>(x_189.x, x_189.x, x_189.x)) + x_192);
  let x_194 : i32 = u_xlati0;
  let x_197 : i32 = u_xlati0;
  let x_201 : vec4<f32> = x_20.x_MainLightWorldToShadow[((x_194 + 2i) / 4i)][((x_197 + 2i) % 4i)];
  let x_203 : vec3<f32> = vs_TEXCOORD6;
  let x_206 : vec3<f32> = u_xlat17;
  u_xlat17 = ((vec3<f32>(x_201.x, x_201.y, x_201.z) * vec3<f32>(x_203.z, x_203.z, x_203.z)) + x_206);
  let x_208 : vec3<f32> = u_xlat17;
  let x_209 : i32 = u_xlati0;
  let x_212 : i32 = u_xlati0;
  let x_216 : vec4<f32> = x_20.x_MainLightWorldToShadow[((x_209 + 3i) / 4i)][((x_212 + 3i) % 4i)];
  let x_218 : vec3<f32> = (x_208 + vec3<f32>(x_216.x, x_216.y, x_216.z));
  let x_219 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_218.x, x_218.y, x_218.z, x_219.w);
  let x_223 : vec4<f32> = vs_TEXCOORD5;
  let x_224 : vec3<f32> = vec3<f32>(x_223.x, x_223.y, x_223.z);
  let x_225 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_224.x, x_224.y, x_224.z, x_225.w);
  u_xlat1.w = 1.0f;
  let x_234 : vec4<f32> = x_231.unity_SHAr;
  let x_235 : vec4<f32> = u_xlat1;
  u_xlat2.x = dot(x_234, x_235);
  let x_240 : vec4<f32> = x_231.unity_SHAg;
  let x_241 : vec4<f32> = u_xlat1;
  u_xlat2.y = dot(x_240, x_241);
  let x_246 : vec4<f32> = x_231.unity_SHAb;
  let x_247 : vec4<f32> = u_xlat1;
  u_xlat2.z = dot(x_246, x_247);
  let x_250 : vec4<f32> = vs_TEXCOORD5;
  let x_252 : vec4<f32> = vs_TEXCOORD5;
  u_xlat1 = (vec4<f32>(x_250.y, x_250.z, x_250.z, x_250.x) * vec4<f32>(x_252.x, x_252.y, x_252.z, x_252.z));
  let x_257 : vec4<f32> = x_231.unity_SHBr;
  let x_258 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(x_257, x_258);
  let x_263 : vec4<f32> = x_231.unity_SHBg;
  let x_264 : vec4<f32> = u_xlat1;
  u_xlat3.y = dot(x_263, x_264);
  let x_269 : vec4<f32> = x_231.unity_SHBb;
  let x_270 : vec4<f32> = u_xlat1;
  u_xlat3.z = dot(x_269, x_270);
  let x_276 : f32 = vs_TEXCOORD5.y;
  let x_278 : f32 = vs_TEXCOORD5.y;
  u_xlat51 = (x_276 * x_278);
  let x_281 : f32 = vs_TEXCOORD5.x;
  let x_283 : f32 = vs_TEXCOORD5.x;
  let x_285 : f32 = u_xlat51;
  u_xlat51 = ((x_281 * x_283) + -(x_285));
  let x_290 : vec4<f32> = x_231.unity_SHC;
  let x_292 : f32 = u_xlat51;
  let x_295 : vec4<f32> = u_xlat3;
  let x_297 : vec3<f32> = ((vec3<f32>(x_290.x, x_290.y, x_290.z) * vec3<f32>(x_292, x_292, x_292)) + vec3<f32>(x_295.x, x_295.y, x_295.z));
  let x_298 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_297.x, x_297.y, x_297.z, x_298.w);
  let x_300 : vec4<f32> = u_xlat1;
  let x_302 : vec4<f32> = u_xlat2;
  let x_304 : vec3<f32> = (vec3<f32>(x_300.x, x_300.y, x_300.z) + vec3<f32>(x_302.x, x_302.y, x_302.z));
  let x_305 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_304.x, x_304.y, x_304.z, x_305.w);
  let x_307 : vec4<f32> = u_xlat1;
  let x_309 : vec3<f32> = max(vec3<f32>(x_307.x, x_307.y, x_307.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_310 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_309.x, x_309.y, x_309.z, x_310.w);
  let x_325 : vec2<f32> = vs_TEXCOORD0;
  let x_331 : f32 = x_328.x_GlobalMipBias.x;
  let x_332 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, x_325, x_331);
  u_xlat2 = x_332;
  let x_336 : f32 = x_20.x_MainLightShadowParams.y;
  u_xlatb51 = (0.0f < x_336);
  let x_338 : bool = u_xlatb51;
  if (x_338) {
    let x_342 : f32 = x_20.x_MainLightShadowParams.y;
    u_xlatb51 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb51;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat0;
      let x_351 : vec4<f32> = x_20.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat0.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_370 : vec3<f32> = txVec0;
      let x_372 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_370.xy, x_370.z);
      u_xlat4.x = x_372;
      let x_375 : vec4<f32> = u_xlat3;
      let x_376 : vec2<f32> = vec2<f32>(x_375.z, x_375.w);
      let x_378 : f32 = u_xlat0.z;
      txVec1 = vec3<f32>(x_376.x, x_376.y, x_378);
      let x_385 : vec3<f32> = txVec1;
      let x_387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_385.xy, x_385.z);
      u_xlat4.y = x_387;
      let x_389 : vec4<f32> = u_xlat0;
      let x_393 : vec4<f32> = x_20.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_389.x, x_389.y, x_389.x, x_389.y) + x_393);
      let x_396 : vec4<f32> = u_xlat3;
      let x_397 : vec2<f32> = vec2<f32>(x_396.x, x_396.y);
      let x_399 : f32 = u_xlat0.z;
      txVec2 = vec3<f32>(x_397.x, x_397.y, x_399);
      let x_406 : vec3<f32> = txVec2;
      let x_408 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_406.xy, x_406.z);
      u_xlat4.z = x_408;
      let x_411 : vec4<f32> = u_xlat3;
      let x_412 : vec2<f32> = vec2<f32>(x_411.z, x_411.w);
      let x_414 : f32 = u_xlat0.z;
      txVec3 = vec3<f32>(x_412.x, x_412.y, x_414);
      let x_421 : vec3<f32> = txVec3;
      let x_423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_421.xy, x_421.z);
      u_xlat4.w = x_423;
      let x_425 : vec4<f32> = u_xlat4;
      u_xlat51 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_20.x_MainLightShadowParams.y;
      u_xlatb52 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb52;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat0;
        let x_441 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat3;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat0;
        let x_459 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat3;
        u_xlat37 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat37;
        u_xlat4 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_471 : vec4<f32> = u_xlat4;
        let x_473 : vec4<f32> = u_xlat4;
        u_xlat5 = (vec4<f32>(x_471.x, x_471.x, x_471.z, x_471.z) * vec4<f32>(x_473.x, x_473.x, x_473.z, x_473.z));
        let x_476 : vec4<f32> = u_xlat5;
        let x_480 : vec2<f32> = (vec2<f32>(x_476.y, x_476.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_481 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_480.x, x_481.y, x_480.y, x_481.w);
        let x_483 : vec4<f32> = u_xlat5;
        let x_486 : vec2<f32> = u_xlat37;
        let x_488 : vec2<f32> = ((vec2<f32>(x_483.x, x_483.z) * vec2<f32>(0.5f, 0.5f)) + -(x_486));
        let x_489 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_488.x, x_488.y, x_489.z, x_489.w);
        let x_492 : vec2<f32> = u_xlat37;
        u_xlat39 = (-(x_492) + vec2<f32>(1.0f, 1.0f));
        let x_497 : vec2<f32> = u_xlat37;
        let x_499 : vec2<f32> = min(x_497, vec2<f32>(0.0f, 0.0f));
        let x_500 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_499.x, x_499.y, x_500.z, x_500.w);
        let x_502 : vec4<f32> = u_xlat6;
        let x_505 : vec4<f32> = u_xlat6;
        let x_508 : vec2<f32> = u_xlat39;
        let x_509 : vec2<f32> = ((-(vec2<f32>(x_502.x, x_502.y)) * vec2<f32>(x_505.x, x_505.y)) + x_508);
        let x_510 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
        let x_512 : vec2<f32> = u_xlat37;
        u_xlat37 = max(x_512, vec2<f32>(0.0f, 0.0f));
        let x_514 : vec2<f32> = u_xlat37;
        let x_516 : vec2<f32> = u_xlat37;
        let x_518 : vec4<f32> = u_xlat4;
        u_xlat37 = ((-(x_514) * x_516) + vec2<f32>(x_518.y, x_518.w));
        let x_521 : vec4<f32> = u_xlat6;
        let x_523 : vec2<f32> = (vec2<f32>(x_521.x, x_521.y) + vec2<f32>(1.0f, 1.0f));
        let x_524 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_523.x, x_523.y, x_524.z, x_524.w);
        let x_526 : vec2<f32> = u_xlat37;
        u_xlat37 = (x_526 + vec2<f32>(1.0f, 1.0f));
        let x_529 : vec4<f32> = u_xlat5;
        let x_533 : vec2<f32> = (vec2<f32>(x_529.x, x_529.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_534 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_533.x, x_533.y, x_534.z, x_534.w);
        let x_536 : vec2<f32> = u_xlat39;
        let x_537 : vec2<f32> = (x_536 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_538 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_537.x, x_537.y, x_538.z, x_538.w);
        let x_540 : vec4<f32> = u_xlat6;
        let x_542 : vec2<f32> = (vec2<f32>(x_540.x, x_540.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_543 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_542.x, x_542.y, x_543.z, x_543.w);
        let x_546 : vec2<f32> = u_xlat37;
        let x_547 : vec2<f32> = (x_546 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_548.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat4;
        u_xlat37 = (vec2<f32>(x_550.y, x_550.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_554 : f32 = u_xlat6.x;
        u_xlat7.z = x_554;
        let x_557 : f32 = u_xlat37.x;
        u_xlat7.w = x_557;
        let x_560 : f32 = u_xlat8.x;
        u_xlat5.z = x_560;
        let x_563 : f32 = u_xlat4.x;
        u_xlat5.w = x_563;
        let x_566 : vec4<f32> = u_xlat5;
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat9 = (vec4<f32>(x_566.z, x_566.w, x_566.x, x_566.z) + vec4<f32>(x_568.z, x_568.w, x_568.x, x_568.z));
        let x_572 : f32 = u_xlat7.y;
        u_xlat6.z = x_572;
        let x_575 : f32 = u_xlat37.y;
        u_xlat6.w = x_575;
        let x_578 : f32 = u_xlat5.y;
        u_xlat8.z = x_578;
        let x_581 : f32 = u_xlat4.z;
        u_xlat8.w = x_581;
        let x_583 : vec4<f32> = u_xlat6;
        let x_585 : vec4<f32> = u_xlat8;
        let x_587 : vec3<f32> = (vec3<f32>(x_583.z, x_583.y, x_583.w) + vec3<f32>(x_585.z, x_585.y, x_585.w));
        let x_588 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_587.x, x_587.y, x_587.z, x_588.w);
        let x_590 : vec4<f32> = u_xlat5;
        let x_592 : vec4<f32> = u_xlat9;
        let x_594 : vec3<f32> = (vec3<f32>(x_590.x, x_590.z, x_590.w) / vec3<f32>(x_592.z, x_592.w, x_592.y));
        let x_595 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_594.x, x_594.y, x_594.z, x_595.w);
        let x_597 : vec4<f32> = u_xlat5;
        let x_603 : vec3<f32> = (vec3<f32>(x_597.x, x_597.y, x_597.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_604 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_603.x, x_603.y, x_603.z, x_604.w);
        let x_606 : vec4<f32> = u_xlat8;
        let x_608 : vec4<f32> = u_xlat4;
        let x_610 : vec3<f32> = (vec3<f32>(x_606.z, x_606.y, x_606.w) / vec3<f32>(x_608.x, x_608.y, x_608.z));
        let x_611 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_610.x, x_610.y, x_610.z, x_611.w);
        let x_613 : vec4<f32> = u_xlat6;
        let x_615 : vec3<f32> = (vec3<f32>(x_613.x, x_613.y, x_613.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_616 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_615.x, x_615.y, x_615.z, x_616.w);
        let x_618 : vec4<f32> = u_xlat5;
        let x_621 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_623 : vec3<f32> = (vec3<f32>(x_618.y, x_618.x, x_618.z) * vec3<f32>(x_621.x, x_621.x, x_621.x));
        let x_624 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_623.x, x_623.y, x_623.z, x_624.w);
        let x_626 : vec4<f32> = u_xlat6;
        let x_629 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_631 : vec3<f32> = (vec3<f32>(x_626.x, x_626.y, x_626.z) * vec3<f32>(x_629.y, x_629.y, x_629.y));
        let x_632 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_631.x, x_631.y, x_631.z, x_632.w);
        let x_635 : f32 = u_xlat6.x;
        u_xlat5.w = x_635;
        let x_637 : vec4<f32> = u_xlat3;
        let x_640 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_643 : vec4<f32> = u_xlat5;
        u_xlat7 = ((vec4<f32>(x_637.x, x_637.y, x_637.x, x_637.y) * vec4<f32>(x_640.x, x_640.y, x_640.x, x_640.y)) + vec4<f32>(x_643.y, x_643.w, x_643.x, x_643.w));
        let x_646 : vec4<f32> = u_xlat3;
        let x_649 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_652 : vec4<f32> = u_xlat5;
        u_xlat37 = ((vec2<f32>(x_646.x, x_646.y) * vec2<f32>(x_649.x, x_649.y)) + vec2<f32>(x_652.z, x_652.w));
        let x_656 : f32 = u_xlat5.y;
        u_xlat6.w = x_656;
        let x_658 : vec4<f32> = u_xlat6;
        let x_659 : vec2<f32> = vec2<f32>(x_658.y, x_658.z);
        let x_660 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_660.x, x_659.x, x_660.z, x_659.y);
        let x_662 : vec4<f32> = u_xlat3;
        let x_665 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_668 : vec4<f32> = u_xlat5;
        u_xlat8 = ((vec4<f32>(x_662.x, x_662.y, x_662.x, x_662.y) * vec4<f32>(x_665.x, x_665.y, x_665.x, x_665.y)) + vec4<f32>(x_668.x, x_668.y, x_668.z, x_668.y));
        let x_671 : vec4<f32> = u_xlat3;
        let x_674 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_677 : vec4<f32> = u_xlat6;
        u_xlat6 = ((vec4<f32>(x_671.x, x_671.y, x_671.x, x_671.y) * vec4<f32>(x_674.x, x_674.y, x_674.x, x_674.y)) + vec4<f32>(x_677.w, x_677.y, x_677.w, x_677.z));
        let x_680 : vec4<f32> = u_xlat3;
        let x_683 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_686 : vec4<f32> = u_xlat5;
        u_xlat5 = ((vec4<f32>(x_680.x, x_680.y, x_680.x, x_680.y) * vec4<f32>(x_683.x, x_683.y, x_683.x, x_683.y)) + vec4<f32>(x_686.x, x_686.w, x_686.z, x_686.w));
        let x_690 : vec4<f32> = u_xlat4;
        let x_692 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_690.x, x_690.x, x_690.x, x_690.y) * vec4<f32>(x_692.z, x_692.w, x_692.y, x_692.z));
        let x_696 : vec4<f32> = u_xlat4;
        let x_698 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_696.y, x_696.y, x_696.z, x_696.z) * x_698);
        let x_702 : f32 = u_xlat4.z;
        let x_704 : f32 = u_xlat9.y;
        u_xlat52 = (x_702 * x_704);
        let x_707 : vec4<f32> = u_xlat7;
        let x_708 : vec2<f32> = vec2<f32>(x_707.x, x_707.y);
        let x_710 : f32 = u_xlat0.z;
        txVec4 = vec3<f32>(x_708.x, x_708.y, x_710);
        let x_717 : vec3<f32> = txVec4;
        let x_719 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_717.xy, x_717.z);
        u_xlat3.x = x_719;
        let x_722 : vec4<f32> = u_xlat7;
        let x_723 : vec2<f32> = vec2<f32>(x_722.z, x_722.w);
        let x_725 : f32 = u_xlat0.z;
        txVec5 = vec3<f32>(x_723.x, x_723.y, x_725);
        let x_733 : vec3<f32> = txVec5;
        let x_735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_733.xy, x_733.z);
        u_xlat20 = x_735;
        let x_736 : f32 = u_xlat20;
        let x_738 : f32 = u_xlat10.y;
        u_xlat20 = (x_736 * x_738);
        let x_741 : f32 = u_xlat10.x;
        let x_743 : f32 = u_xlat3.x;
        let x_745 : f32 = u_xlat20;
        u_xlat3.x = ((x_741 * x_743) + x_745);
        let x_749 : vec2<f32> = u_xlat37;
        let x_751 : f32 = u_xlat0.z;
        txVec6 = vec3<f32>(x_749.x, x_749.y, x_751);
        let x_758 : vec3<f32> = txVec6;
        let x_760 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_758.xy, x_758.z);
        u_xlat20 = x_760;
        let x_762 : f32 = u_xlat10.z;
        let x_763 : f32 = u_xlat20;
        let x_766 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_762 * x_763) + x_766);
        let x_770 : vec4<f32> = u_xlat6;
        let x_771 : vec2<f32> = vec2<f32>(x_770.x, x_770.y);
        let x_773 : f32 = u_xlat0.z;
        txVec7 = vec3<f32>(x_771.x, x_771.y, x_773);
        let x_780 : vec3<f32> = txVec7;
        let x_782 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_780.xy, x_780.z);
        u_xlat20 = x_782;
        let x_784 : f32 = u_xlat10.w;
        let x_785 : f32 = u_xlat20;
        let x_788 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_784 * x_785) + x_788);
        let x_792 : vec4<f32> = u_xlat8;
        let x_793 : vec2<f32> = vec2<f32>(x_792.x, x_792.y);
        let x_795 : f32 = u_xlat0.z;
        txVec8 = vec3<f32>(x_793.x, x_793.y, x_795);
        let x_802 : vec3<f32> = txVec8;
        let x_804 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_802.xy, x_802.z);
        u_xlat20 = x_804;
        let x_806 : f32 = u_xlat11.x;
        let x_807 : f32 = u_xlat20;
        let x_810 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_806 * x_807) + x_810);
        let x_814 : vec4<f32> = u_xlat8;
        let x_815 : vec2<f32> = vec2<f32>(x_814.z, x_814.w);
        let x_817 : f32 = u_xlat0.z;
        txVec9 = vec3<f32>(x_815.x, x_815.y, x_817);
        let x_824 : vec3<f32> = txVec9;
        let x_826 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_824.xy, x_824.z);
        u_xlat20 = x_826;
        let x_828 : f32 = u_xlat11.y;
        let x_829 : f32 = u_xlat20;
        let x_832 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_828 * x_829) + x_832);
        let x_836 : vec4<f32> = u_xlat6;
        let x_837 : vec2<f32> = vec2<f32>(x_836.z, x_836.w);
        let x_839 : f32 = u_xlat0.z;
        txVec10 = vec3<f32>(x_837.x, x_837.y, x_839);
        let x_846 : vec3<f32> = txVec10;
        let x_848 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_846.xy, x_846.z);
        u_xlat20 = x_848;
        let x_850 : f32 = u_xlat11.z;
        let x_851 : f32 = u_xlat20;
        let x_854 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_850 * x_851) + x_854);
        let x_858 : vec4<f32> = u_xlat5;
        let x_859 : vec2<f32> = vec2<f32>(x_858.x, x_858.y);
        let x_861 : f32 = u_xlat0.z;
        txVec11 = vec3<f32>(x_859.x, x_859.y, x_861);
        let x_868 : vec3<f32> = txVec11;
        let x_870 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_868.xy, x_868.z);
        u_xlat20 = x_870;
        let x_872 : f32 = u_xlat11.w;
        let x_873 : f32 = u_xlat20;
        let x_876 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_872 * x_873) + x_876);
        let x_880 : vec4<f32> = u_xlat5;
        let x_881 : vec2<f32> = vec2<f32>(x_880.z, x_880.w);
        let x_883 : f32 = u_xlat0.z;
        txVec12 = vec3<f32>(x_881.x, x_881.y, x_883);
        let x_890 : vec3<f32> = txVec12;
        let x_892 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_890.xy, x_890.z);
        u_xlat20 = x_892;
        let x_893 : f32 = u_xlat52;
        let x_894 : f32 = u_xlat20;
        let x_897 : f32 = u_xlat3.x;
        u_xlat51 = ((x_893 * x_894) + x_897);
      } else {
        let x_900 : vec4<f32> = u_xlat0;
        let x_903 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_906 : vec2<f32> = ((vec2<f32>(x_900.x, x_900.y) * vec2<f32>(x_903.z, x_903.w)) + vec2<f32>(0.5f, 0.5f));
        let x_907 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_906.x, x_906.y, x_907.z, x_907.w);
        let x_909 : vec4<f32> = u_xlat3;
        let x_911 : vec2<f32> = floor(vec2<f32>(x_909.x, x_909.y));
        let x_912 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_911.x, x_911.y, x_912.z, x_912.w);
        let x_914 : vec4<f32> = u_xlat0;
        let x_917 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_920 : vec4<f32> = u_xlat3;
        u_xlat37 = ((vec2<f32>(x_914.x, x_914.y) * vec2<f32>(x_917.z, x_917.w)) + -(vec2<f32>(x_920.x, x_920.y)));
        let x_924 : vec2<f32> = u_xlat37;
        u_xlat4 = (vec4<f32>(x_924.x, x_924.x, x_924.y, x_924.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_927 : vec4<f32> = u_xlat4;
        let x_929 : vec4<f32> = u_xlat4;
        u_xlat5 = (vec4<f32>(x_927.x, x_927.x, x_927.z, x_927.z) * vec4<f32>(x_929.x, x_929.x, x_929.z, x_929.z));
        let x_932 : vec4<f32> = u_xlat5;
        let x_936 : vec2<f32> = (vec2<f32>(x_932.y, x_932.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_937 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_937.x, x_936.x, x_937.z, x_936.y);
        let x_939 : vec4<f32> = u_xlat5;
        let x_942 : vec2<f32> = u_xlat37;
        let x_944 : vec2<f32> = ((vec2<f32>(x_939.x, x_939.z) * vec2<f32>(0.5f, 0.5f)) + -(x_942));
        let x_945 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_944.x, x_945.y, x_944.y, x_945.w);
        let x_947 : vec2<f32> = u_xlat37;
        let x_949 : vec2<f32> = (-(x_947) + vec2<f32>(1.0f, 1.0f));
        let x_950 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_949.x, x_949.y, x_950.z, x_950.w);
        let x_952 : vec2<f32> = u_xlat37;
        u_xlat39 = min(x_952, vec2<f32>(0.0f, 0.0f));
        let x_954 : vec2<f32> = u_xlat39;
        let x_956 : vec2<f32> = u_xlat39;
        let x_958 : vec4<f32> = u_xlat5;
        let x_960 : vec2<f32> = ((-(x_954) * x_956) + vec2<f32>(x_958.x, x_958.y));
        let x_961 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_960.x, x_960.y, x_961.z, x_961.w);
        let x_963 : vec2<f32> = u_xlat37;
        u_xlat39 = max(x_963, vec2<f32>(0.0f, 0.0f));
        let x_966 : vec2<f32> = u_xlat39;
        let x_968 : vec2<f32> = u_xlat39;
        let x_970 : vec4<f32> = u_xlat4;
        let x_972 : vec2<f32> = ((-(x_966) * x_968) + vec2<f32>(x_970.y, x_970.w));
        let x_973 : vec3<f32> = u_xlat21;
        u_xlat21 = vec3<f32>(x_972.x, x_973.y, x_972.y);
        let x_975 : vec4<f32> = u_xlat5;
        let x_978 : vec2<f32> = (vec2<f32>(x_975.x, x_975.y) + vec2<f32>(2.0f, 2.0f));
        let x_979 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_978.x, x_978.y, x_979.z, x_979.w);
        let x_981 : vec3<f32> = u_xlat21;
        let x_983 : vec2<f32> = (vec2<f32>(x_981.x, x_981.z) + vec2<f32>(2.0f, 2.0f));
        let x_984 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_984.x, x_983.x, x_984.z, x_983.y);
        let x_987 : f32 = u_xlat4.y;
        u_xlat7.z = (x_987 * 0.081632003f);
        let x_991 : vec4<f32> = u_xlat4;
        let x_994 : vec3<f32> = (vec3<f32>(x_991.z, x_991.x, x_991.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_995 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_994.x, x_994.y, x_994.z, x_995.w);
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec2<f32> = (vec2<f32>(x_997.x, x_997.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1001 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_1000.x, x_1000.y, x_1001.z, x_1001.w);
        let x_1004 : f32 = u_xlat8.y;
        u_xlat7.x = x_1004;
        let x_1006 : vec2<f32> = u_xlat37;
        let x_1013 : vec2<f32> = ((vec2<f32>(x_1006.x, x_1006.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1014 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1014.x, x_1013.x, x_1014.z, x_1013.y);
        let x_1016 : vec2<f32> = u_xlat37;
        let x_1020 : vec2<f32> = ((vec2<f32>(x_1016.x, x_1016.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1021 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1020.x, x_1021.y, x_1020.y, x_1021.w);
        let x_1024 : f32 = u_xlat4.x;
        u_xlat5.y = x_1024;
        let x_1027 : f32 = u_xlat6.y;
        u_xlat5.w = x_1027;
        let x_1029 : vec4<f32> = u_xlat5;
        let x_1030 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1029 + x_1030);
        let x_1032 : vec2<f32> = u_xlat37;
        let x_1035 : vec2<f32> = ((vec2<f32>(x_1032.y, x_1032.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1036 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1036.x, x_1035.x, x_1036.z, x_1035.y);
        let x_1038 : vec2<f32> = u_xlat37;
        let x_1041 : vec2<f32> = ((vec2<f32>(x_1038.y, x_1038.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1042 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1041.x, x_1042.y, x_1041.y, x_1042.w);
        let x_1045 : f32 = u_xlat4.y;
        u_xlat6.y = x_1045;
        let x_1047 : vec4<f32> = u_xlat6;
        let x_1048 : vec4<f32> = u_xlat8;
        u_xlat4 = (x_1047 + x_1048);
        let x_1050 : vec4<f32> = u_xlat5;
        let x_1051 : vec4<f32> = u_xlat7;
        u_xlat5 = (x_1050 / x_1051);
        let x_1053 : vec4<f32> = u_xlat5;
        u_xlat5 = (x_1053 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1059 : vec4<f32> = u_xlat6;
        let x_1060 : vec4<f32> = u_xlat4;
        u_xlat6 = (x_1059 / x_1060);
        let x_1062 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1062 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1064 : vec4<f32> = u_xlat5;
        let x_1067 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        u_xlat5 = (vec4<f32>(x_1064.w, x_1064.x, x_1064.y, x_1064.z) * vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x));
        let x_1070 : vec4<f32> = u_xlat6;
        let x_1073 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        u_xlat6 = (vec4<f32>(x_1070.x, x_1070.w, x_1070.y, x_1070.z) * vec4<f32>(x_1073.y, x_1073.y, x_1073.y, x_1073.y));
        let x_1076 : vec4<f32> = u_xlat5;
        let x_1077 : vec3<f32> = vec3<f32>(x_1076.y, x_1076.z, x_1076.w);
        let x_1078 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1077.x, x_1078.y, x_1077.y, x_1077.z);
        let x_1081 : f32 = u_xlat6.x;
        u_xlat8.y = x_1081;
        let x_1083 : vec4<f32> = u_xlat3;
        let x_1086 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1089 : vec4<f32> = u_xlat8;
        u_xlat9 = ((vec4<f32>(x_1083.x, x_1083.y, x_1083.x, x_1083.y) * vec4<f32>(x_1086.x, x_1086.y, x_1086.x, x_1086.y)) + vec4<f32>(x_1089.x, x_1089.y, x_1089.z, x_1089.y));
        let x_1092 : vec4<f32> = u_xlat3;
        let x_1095 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1098 : vec4<f32> = u_xlat8;
        u_xlat37 = ((vec2<f32>(x_1092.x, x_1092.y) * vec2<f32>(x_1095.x, x_1095.y)) + vec2<f32>(x_1098.w, x_1098.y));
        let x_1102 : f32 = u_xlat8.y;
        u_xlat5.y = x_1102;
        let x_1105 : f32 = u_xlat6.z;
        u_xlat8.y = x_1105;
        let x_1107 : vec4<f32> = u_xlat3;
        let x_1110 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1113 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1107.x, x_1107.y, x_1107.x, x_1107.y) * vec4<f32>(x_1110.x, x_1110.y, x_1110.x, x_1110.y)) + vec4<f32>(x_1113.x, x_1113.y, x_1113.z, x_1113.y));
        let x_1116 : vec4<f32> = u_xlat3;
        let x_1119 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat8;
        let x_1124 : vec2<f32> = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1119.x, x_1119.y)) + vec2<f32>(x_1122.w, x_1122.y));
        let x_1125 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1124.x, x_1124.y, x_1125.z, x_1125.w);
        let x_1128 : f32 = u_xlat8.y;
        u_xlat5.z = x_1128;
        let x_1131 : vec4<f32> = u_xlat3;
        let x_1134 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1137 : vec4<f32> = u_xlat5;
        u_xlat12 = ((vec4<f32>(x_1131.x, x_1131.y, x_1131.x, x_1131.y) * vec4<f32>(x_1134.x, x_1134.y, x_1134.x, x_1134.y)) + vec4<f32>(x_1137.x, x_1137.y, x_1137.x, x_1137.z));
        let x_1141 : f32 = u_xlat6.w;
        u_xlat8.y = x_1141;
        let x_1144 : vec4<f32> = u_xlat3;
        let x_1147 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat13 = ((vec4<f32>(x_1144.x, x_1144.y, x_1144.x, x_1144.y) * vec4<f32>(x_1147.x, x_1147.y, x_1147.x, x_1147.y)) + vec4<f32>(x_1150.x, x_1150.y, x_1150.z, x_1150.y));
        let x_1154 : vec4<f32> = u_xlat3;
        let x_1157 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1160 : vec4<f32> = u_xlat8;
        u_xlat22 = ((vec2<f32>(x_1154.x, x_1154.y) * vec2<f32>(x_1157.x, x_1157.y)) + vec2<f32>(x_1160.w, x_1160.y));
        let x_1164 : f32 = u_xlat8.y;
        u_xlat5.w = x_1164;
        let x_1167 : vec4<f32> = u_xlat3;
        let x_1170 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1173 : vec4<f32> = u_xlat5;
        u_xlat45 = ((vec2<f32>(x_1167.x, x_1167.y) * vec2<f32>(x_1170.x, x_1170.y)) + vec2<f32>(x_1173.x, x_1173.w));
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1177 : vec3<f32> = vec3<f32>(x_1176.x, x_1176.z, x_1176.w);
        let x_1178 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1177.x, x_1178.y, x_1177.y, x_1177.z);
        let x_1180 : vec4<f32> = u_xlat3;
        let x_1183 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1186 : vec4<f32> = u_xlat6;
        u_xlat8 = ((vec4<f32>(x_1180.x, x_1180.y, x_1180.x, x_1180.y) * vec4<f32>(x_1183.x, x_1183.y, x_1183.x, x_1183.y)) + vec4<f32>(x_1186.x, x_1186.y, x_1186.z, x_1186.y));
        let x_1190 : vec4<f32> = u_xlat3;
        let x_1193 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1196 : vec4<f32> = u_xlat6;
        u_xlat40 = ((vec2<f32>(x_1190.x, x_1190.y) * vec2<f32>(x_1193.x, x_1193.y)) + vec2<f32>(x_1196.w, x_1196.y));
        let x_1200 : f32 = u_xlat5.x;
        u_xlat6.x = x_1200;
        let x_1202 : vec4<f32> = u_xlat3;
        let x_1205 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1208 : vec4<f32> = u_xlat6;
        let x_1210 : vec2<f32> = ((vec2<f32>(x_1202.x, x_1202.y) * vec2<f32>(x_1205.x, x_1205.y)) + vec2<f32>(x_1208.x, x_1208.y));
        let x_1211 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1210.x, x_1210.y, x_1211.z, x_1211.w);
        let x_1214 : vec4<f32> = u_xlat4;
        let x_1216 : vec4<f32> = u_xlat7;
        u_xlat14 = (vec4<f32>(x_1214.x, x_1214.x, x_1214.x, x_1214.x) * x_1216);
        let x_1219 : vec4<f32> = u_xlat4;
        let x_1221 : vec4<f32> = u_xlat7;
        u_xlat15 = (vec4<f32>(x_1219.y, x_1219.y, x_1219.y, x_1219.y) * x_1221);
        let x_1224 : vec4<f32> = u_xlat4;
        let x_1226 : vec4<f32> = u_xlat7;
        u_xlat16 = (vec4<f32>(x_1224.z, x_1224.z, x_1224.z, x_1224.z) * x_1226);
        let x_1228 : vec4<f32> = u_xlat4;
        let x_1230 : vec4<f32> = u_xlat7;
        u_xlat4 = (vec4<f32>(x_1228.w, x_1228.w, x_1228.w, x_1228.w) * x_1230);
        let x_1233 : vec4<f32> = u_xlat9;
        let x_1234 : vec2<f32> = vec2<f32>(x_1233.x, x_1233.y);
        let x_1236 : f32 = u_xlat0.z;
        txVec13 = vec3<f32>(x_1234.x, x_1234.y, x_1236);
        let x_1243 : vec3<f32> = txVec13;
        let x_1245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1243.xy, x_1243.z);
        u_xlat52 = x_1245;
        let x_1247 : vec4<f32> = u_xlat9;
        let x_1248 : vec2<f32> = vec2<f32>(x_1247.z, x_1247.w);
        let x_1250 : f32 = u_xlat0.z;
        txVec14 = vec3<f32>(x_1248.x, x_1248.y, x_1250);
        let x_1257 : vec3<f32> = txVec14;
        let x_1259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1257.xy, x_1257.z);
        u_xlat5.x = x_1259;
        let x_1262 : f32 = u_xlat5.x;
        let x_1264 : f32 = u_xlat14.y;
        u_xlat5.x = (x_1262 * x_1264);
        let x_1268 : f32 = u_xlat14.x;
        let x_1269 : f32 = u_xlat52;
        let x_1272 : f32 = u_xlat5.x;
        u_xlat52 = ((x_1268 * x_1269) + x_1272);
        let x_1275 : vec2<f32> = u_xlat37;
        let x_1277 : f32 = u_xlat0.z;
        txVec15 = vec3<f32>(x_1275.x, x_1275.y, x_1277);
        let x_1284 : vec3<f32> = txVec15;
        let x_1286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1284.xy, x_1284.z);
        u_xlat37.x = x_1286;
        let x_1289 : f32 = u_xlat14.z;
        let x_1291 : f32 = u_xlat37.x;
        let x_1293 : f32 = u_xlat52;
        u_xlat52 = ((x_1289 * x_1291) + x_1293);
        let x_1296 : vec4<f32> = u_xlat12;
        let x_1297 : vec2<f32> = vec2<f32>(x_1296.x, x_1296.y);
        let x_1299 : f32 = u_xlat0.z;
        txVec16 = vec3<f32>(x_1297.x, x_1297.y, x_1299);
        let x_1306 : vec3<f32> = txVec16;
        let x_1308 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1306.xy, x_1306.z);
        u_xlat37.x = x_1308;
        let x_1311 : f32 = u_xlat14.w;
        let x_1313 : f32 = u_xlat37.x;
        let x_1315 : f32 = u_xlat52;
        u_xlat52 = ((x_1311 * x_1313) + x_1315);
        let x_1318 : vec4<f32> = u_xlat10;
        let x_1319 : vec2<f32> = vec2<f32>(x_1318.x, x_1318.y);
        let x_1321 : f32 = u_xlat0.z;
        txVec17 = vec3<f32>(x_1319.x, x_1319.y, x_1321);
        let x_1328 : vec3<f32> = txVec17;
        let x_1330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1328.xy, x_1328.z);
        u_xlat37.x = x_1330;
        let x_1333 : f32 = u_xlat15.x;
        let x_1335 : f32 = u_xlat37.x;
        let x_1337 : f32 = u_xlat52;
        u_xlat52 = ((x_1333 * x_1335) + x_1337);
        let x_1340 : vec4<f32> = u_xlat10;
        let x_1341 : vec2<f32> = vec2<f32>(x_1340.z, x_1340.w);
        let x_1343 : f32 = u_xlat0.z;
        txVec18 = vec3<f32>(x_1341.x, x_1341.y, x_1343);
        let x_1350 : vec3<f32> = txVec18;
        let x_1352 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1350.xy, x_1350.z);
        u_xlat37.x = x_1352;
        let x_1355 : f32 = u_xlat15.y;
        let x_1357 : f32 = u_xlat37.x;
        let x_1359 : f32 = u_xlat52;
        u_xlat52 = ((x_1355 * x_1357) + x_1359);
        let x_1362 : vec4<f32> = u_xlat11;
        let x_1363 : vec2<f32> = vec2<f32>(x_1362.x, x_1362.y);
        let x_1365 : f32 = u_xlat0.z;
        txVec19 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec19;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat37.x = x_1374;
        let x_1377 : f32 = u_xlat15.z;
        let x_1379 : f32 = u_xlat37.x;
        let x_1381 : f32 = u_xlat52;
        u_xlat52 = ((x_1377 * x_1379) + x_1381);
        let x_1384 : vec4<f32> = u_xlat12;
        let x_1385 : vec2<f32> = vec2<f32>(x_1384.z, x_1384.w);
        let x_1387 : f32 = u_xlat0.z;
        txVec20 = vec3<f32>(x_1385.x, x_1385.y, x_1387);
        let x_1394 : vec3<f32> = txVec20;
        let x_1396 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1394.xy, x_1394.z);
        u_xlat37.x = x_1396;
        let x_1399 : f32 = u_xlat15.w;
        let x_1401 : f32 = u_xlat37.x;
        let x_1403 : f32 = u_xlat52;
        u_xlat52 = ((x_1399 * x_1401) + x_1403);
        let x_1406 : vec4<f32> = u_xlat13;
        let x_1407 : vec2<f32> = vec2<f32>(x_1406.x, x_1406.y);
        let x_1409 : f32 = u_xlat0.z;
        txVec21 = vec3<f32>(x_1407.x, x_1407.y, x_1409);
        let x_1416 : vec3<f32> = txVec21;
        let x_1418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1416.xy, x_1416.z);
        u_xlat37.x = x_1418;
        let x_1421 : f32 = u_xlat16.x;
        let x_1423 : f32 = u_xlat37.x;
        let x_1425 : f32 = u_xlat52;
        u_xlat52 = ((x_1421 * x_1423) + x_1425);
        let x_1428 : vec4<f32> = u_xlat13;
        let x_1429 : vec2<f32> = vec2<f32>(x_1428.z, x_1428.w);
        let x_1431 : f32 = u_xlat0.z;
        txVec22 = vec3<f32>(x_1429.x, x_1429.y, x_1431);
        let x_1438 : vec3<f32> = txVec22;
        let x_1440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1438.xy, x_1438.z);
        u_xlat37.x = x_1440;
        let x_1443 : f32 = u_xlat16.y;
        let x_1445 : f32 = u_xlat37.x;
        let x_1447 : f32 = u_xlat52;
        u_xlat52 = ((x_1443 * x_1445) + x_1447);
        let x_1450 : vec2<f32> = u_xlat22;
        let x_1452 : f32 = u_xlat0.z;
        txVec23 = vec3<f32>(x_1450.x, x_1450.y, x_1452);
        let x_1459 : vec3<f32> = txVec23;
        let x_1461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1459.xy, x_1459.z);
        u_xlat37.x = x_1461;
        let x_1464 : f32 = u_xlat16.z;
        let x_1466 : f32 = u_xlat37.x;
        let x_1468 : f32 = u_xlat52;
        u_xlat52 = ((x_1464 * x_1466) + x_1468);
        let x_1471 : vec2<f32> = u_xlat45;
        let x_1473 : f32 = u_xlat0.z;
        txVec24 = vec3<f32>(x_1471.x, x_1471.y, x_1473);
        let x_1480 : vec3<f32> = txVec24;
        let x_1482 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1480.xy, x_1480.z);
        u_xlat37.x = x_1482;
        let x_1485 : f32 = u_xlat16.w;
        let x_1487 : f32 = u_xlat37.x;
        let x_1489 : f32 = u_xlat52;
        u_xlat52 = ((x_1485 * x_1487) + x_1489);
        let x_1492 : vec4<f32> = u_xlat8;
        let x_1493 : vec2<f32> = vec2<f32>(x_1492.x, x_1492.y);
        let x_1495 : f32 = u_xlat0.z;
        txVec25 = vec3<f32>(x_1493.x, x_1493.y, x_1495);
        let x_1502 : vec3<f32> = txVec25;
        let x_1504 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1502.xy, x_1502.z);
        u_xlat37.x = x_1504;
        let x_1507 : f32 = u_xlat4.x;
        let x_1509 : f32 = u_xlat37.x;
        let x_1511 : f32 = u_xlat52;
        u_xlat52 = ((x_1507 * x_1509) + x_1511);
        let x_1514 : vec4<f32> = u_xlat8;
        let x_1515 : vec2<f32> = vec2<f32>(x_1514.z, x_1514.w);
        let x_1517 : f32 = u_xlat0.z;
        txVec26 = vec3<f32>(x_1515.x, x_1515.y, x_1517);
        let x_1524 : vec3<f32> = txVec26;
        let x_1526 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1524.xy, x_1524.z);
        u_xlat37.x = x_1526;
        let x_1529 : f32 = u_xlat4.y;
        let x_1531 : f32 = u_xlat37.x;
        let x_1533 : f32 = u_xlat52;
        u_xlat52 = ((x_1529 * x_1531) + x_1533);
        let x_1536 : vec2<f32> = u_xlat40;
        let x_1538 : f32 = u_xlat0.z;
        txVec27 = vec3<f32>(x_1536.x, x_1536.y, x_1538);
        let x_1545 : vec3<f32> = txVec27;
        let x_1547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1545.xy, x_1545.z);
        u_xlat37.x = x_1547;
        let x_1550 : f32 = u_xlat4.z;
        let x_1552 : f32 = u_xlat37.x;
        let x_1554 : f32 = u_xlat52;
        u_xlat52 = ((x_1550 * x_1552) + x_1554);
        let x_1557 : vec4<f32> = u_xlat3;
        let x_1558 : vec2<f32> = vec2<f32>(x_1557.x, x_1557.y);
        let x_1560 : f32 = u_xlat0.z;
        txVec28 = vec3<f32>(x_1558.x, x_1558.y, x_1560);
        let x_1567 : vec3<f32> = txVec28;
        let x_1569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1567.xy, x_1567.z);
        u_xlat3.x = x_1569;
        let x_1572 : f32 = u_xlat4.w;
        let x_1574 : f32 = u_xlat3.x;
        let x_1576 : f32 = u_xlat52;
        u_xlat51 = ((x_1572 * x_1574) + x_1576);
      }
    }
  } else {
    let x_1580 : vec4<f32> = u_xlat0;
    let x_1581 : vec2<f32> = vec2<f32>(x_1580.x, x_1580.y);
    let x_1583 : f32 = u_xlat0.z;
    txVec29 = vec3<f32>(x_1581.x, x_1581.y, x_1583);
    let x_1590 : vec3<f32> = txVec29;
    let x_1592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1590.xy, x_1590.z);
    u_xlat51 = x_1592;
  }
  let x_1594 : f32 = x_20.x_MainLightShadowParams.x;
  u_xlat0.x = (-(x_1594) + 1.0f);
  let x_1598 : f32 = u_xlat51;
  let x_1600 : f32 = x_20.x_MainLightShadowParams.x;
  let x_1603 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1598 * x_1600) + x_1603);
  let x_1608 : f32 = u_xlat0.z;
  u_xlatb17 = (0.0f >= x_1608);
  let x_1612 : f32 = u_xlat0.z;
  u_xlatb34 = (x_1612 >= 1.0f);
  let x_1614 : bool = u_xlatb34;
  let x_1615 : bool = u_xlatb17;
  u_xlatb17 = (x_1614 | x_1615);
  let x_1617 : bool = u_xlatb17;
  if (x_1617) {
    x_1618 = 1.0f;
  } else {
    let x_1623 : f32 = u_xlat0.x;
    x_1618 = x_1623;
  }
  let x_1624 : f32 = x_1618;
  u_xlat0.x = x_1624;
  let x_1627 : vec4<f32> = vs_TEXCOORD3;
  let x_1629 : vec4<f32> = u_xlat0;
  let x_1632 : vec4<f32> = u_xlat1;
  let x_1634 : vec3<f32> = ((vec3<f32>(x_1627.x, x_1627.y, x_1627.z) * vec3<f32>(x_1629.x, x_1629.x, x_1629.x)) + vec3<f32>(x_1632.x, x_1632.y, x_1632.z));
  let x_1635 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1634.x, x_1634.y, x_1634.z, x_1635.w);
  let x_1639 : vec4<f32> = u_xlat0;
  let x_1641 : vec4<f32> = u_xlat2;
  let x_1643 : vec3<f32> = (vec3<f32>(x_1639.x, x_1639.y, x_1639.z) * vec3<f32>(x_1641.x, x_1641.y, x_1641.z));
  let x_1644 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1643.x, x_1643.y, x_1643.z, x_1644.w);
  let x_1647 : f32 = u_xlat2.w;
  SV_Target0.w = x_1647;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(3) vs_TEXCOORD6_param : vec3<f32>, @location(2) vs_TEXCOORD5_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec2<f32>, @location(1) vs_TEXCOORD3_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD6 = vs_TEXCOORD6_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

