struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_256 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3607 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1571 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu44 : u32;
  var u_xlatu24 : u32;
  var u_xlati44 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : vec2<f32>;
  var x_1705 : f32;
  var u_xlatb23 : vec2<bool>;
  var x_1736 : f32;
  var u_xlat44 : f32;
  var u_xlatb2 : bool;
  var x_1783 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati66 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat68 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb63;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat63 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat63;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat63;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat63;
  u_xlat63 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat63;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_258 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][1i];
  let x_260 : vec3<f32> = (vec3<f32>(x_250.y, x_250.y, x_250.y) * vec3<f32>(x_258.x, x_258.y, x_258.z));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][0i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec4<f32> = u_xlat6;
  let x_271 : vec3<f32> = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.x, x_266.x, x_266.x)) + vec3<f32>(x_269.x, x_269.y, x_269.z));
  let x_272 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_271.x, x_271.y, x_271.z, x_272.w);
  let x_275 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][2i];
  let x_277 : vec3<f32> = vs_INTERP0;
  let x_280 : vec4<f32> = u_xlat6;
  let x_282 : vec3<f32> = ((vec3<f32>(x_275.x, x_275.y, x_275.z) * vec3<f32>(x_277.z, x_277.z, x_277.z)) + vec3<f32>(x_280.x, x_280.y, x_280.z));
  let x_283 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_282.x, x_282.y, x_282.z, x_283.w);
  let x_285 : vec4<f32> = u_xlat6;
  let x_289 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][3i];
  let x_291 : vec3<f32> = (vec3<f32>(x_285.x, x_285.y, x_285.z) + vec3<f32>(x_289.x, x_289.y, x_289.z));
  let x_292 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_291.x, x_291.y, x_291.z, x_292.w);
  let x_296 : f32 = x_256.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_296);
  let x_298 : bool = u_xlatb63;
  if (x_298) {
    let x_303 : f32 = x_256.x_MainLightShadowParams.y;
    u_xlatb64 = (x_303 == 1.0f);
    let x_305 : bool = u_xlatb64;
    if (x_305) {
      let x_309 : vec4<f32> = u_xlat6;
      let x_313 : vec4<f32> = x_256.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_309.x, x_309.y, x_309.x, x_309.y) + x_313);
      let x_316 : vec4<f32> = u_xlat7;
      let x_317 : vec2<f32> = vec2<f32>(x_316.x, x_316.y);
      let x_319 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_317.x, x_317.y, x_319);
      let x_332 : vec3<f32> = txVec0;
      let x_334 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_332.xy, x_332.z);
      u_xlat8.x = x_334;
      let x_337 : vec4<f32> = u_xlat7;
      let x_338 : vec2<f32> = vec2<f32>(x_337.z, x_337.w);
      let x_340 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_338.x, x_338.y, x_340);
      let x_347 : vec3<f32> = txVec1;
      let x_349 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_347.xy, x_347.z);
      u_xlat8.y = x_349;
      let x_351 : vec4<f32> = u_xlat6;
      let x_355 : vec4<f32> = x_256.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_351.x, x_351.y, x_351.x, x_351.y) + x_355);
      let x_358 : vec4<f32> = u_xlat7;
      let x_359 : vec2<f32> = vec2<f32>(x_358.x, x_358.y);
      let x_361 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_359.x, x_359.y, x_361);
      let x_368 : vec3<f32> = txVec2;
      let x_370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_368.xy, x_368.z);
      u_xlat8.z = x_370;
      let x_373 : vec4<f32> = u_xlat7;
      let x_374 : vec2<f32> = vec2<f32>(x_373.z, x_373.w);
      let x_376 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_374.x, x_374.y, x_376);
      let x_383 : vec3<f32> = txVec3;
      let x_385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_383.xy, x_383.z);
      u_xlat8.w = x_385;
      let x_387 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_387, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_394 : f32 = x_256.x_MainLightShadowParams.y;
      u_xlatb65 = (x_394 == 2.0f);
      let x_396 : bool = u_xlatb65;
      if (x_396) {
        let x_399 : vec4<f32> = u_xlat6;
        let x_402 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_407 : vec2<f32> = ((vec2<f32>(x_399.x, x_399.y) * vec2<f32>(x_402.z, x_402.w)) + vec2<f32>(0.5f, 0.5f));
        let x_408 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_407.x, x_407.y, x_408.z, x_408.w);
        let x_410 : vec4<f32> = u_xlat7;
        let x_412 : vec2<f32> = floor(vec2<f32>(x_410.x, x_410.y));
        let x_413 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_412.x, x_412.y, x_413.z, x_413.w);
        let x_417 : vec4<f32> = u_xlat6;
        let x_420 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_423 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_417.x, x_417.y) * vec2<f32>(x_420.z, x_420.w)) + -(vec2<f32>(x_423.x, x_423.y)));
        let x_427 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_427.x, x_427.x, x_427.y, x_427.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_432 : vec4<f32> = u_xlat8;
        let x_434 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_432.x, x_432.x, x_432.z, x_432.z) * vec4<f32>(x_434.x, x_434.x, x_434.z, x_434.z));
        let x_437 : vec4<f32> = u_xlat9;
        let x_441 : vec2<f32> = (vec2<f32>(x_437.y, x_437.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_442 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_441.x, x_442.y, x_441.y, x_442.w);
        let x_444 : vec4<f32> = u_xlat9;
        let x_447 : vec2<f32> = u_xlat49;
        let x_449 : vec2<f32> = ((vec2<f32>(x_444.x, x_444.z) * vec2<f32>(0.5f, 0.5f)) + -(x_447));
        let x_450 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_449.x, x_449.y, x_450.z, x_450.w);
        let x_453 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_453) + vec2<f32>(1.0f, 1.0f));
        let x_458 : vec2<f32> = u_xlat49;
        let x_460 : vec2<f32> = min(x_458, vec2<f32>(0.0f, 0.0f));
        let x_461 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_460.x, x_460.y, x_461.z, x_461.w);
        let x_463 : vec4<f32> = u_xlat10;
        let x_466 : vec4<f32> = u_xlat10;
        let x_469 : vec2<f32> = u_xlat51;
        let x_470 : vec2<f32> = ((-(vec2<f32>(x_463.x, x_463.y)) * vec2<f32>(x_466.x, x_466.y)) + x_469);
        let x_471 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_470.x, x_470.y, x_471.z, x_471.w);
        let x_473 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_473, vec2<f32>(0.0f, 0.0f));
        let x_475 : vec2<f32> = u_xlat49;
        let x_477 : vec2<f32> = u_xlat49;
        let x_479 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_475) * x_477) + vec2<f32>(x_479.y, x_479.w));
        let x_482 : vec4<f32> = u_xlat10;
        let x_484 : vec2<f32> = (vec2<f32>(x_482.x, x_482.y) + vec2<f32>(1.0f, 1.0f));
        let x_485 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_484.x, x_484.y, x_485.z, x_485.w);
        let x_487 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_487 + vec2<f32>(1.0f, 1.0f));
        let x_490 : vec4<f32> = u_xlat9;
        let x_494 : vec2<f32> = (vec2<f32>(x_490.x, x_490.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_495 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_494.x, x_494.y, x_495.z, x_495.w);
        let x_497 : vec2<f32> = u_xlat51;
        let x_498 : vec2<f32> = (x_497 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_499 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat10;
        let x_503 : vec2<f32> = (vec2<f32>(x_501.x, x_501.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_504 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_503.x, x_503.y, x_504.z, x_504.w);
        let x_507 : vec2<f32> = u_xlat49;
        let x_508 : vec2<f32> = (x_507 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_509 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_511.y, x_511.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_515 : f32 = u_xlat10.x;
        u_xlat11.z = x_515;
        let x_518 : f32 = u_xlat49.x;
        u_xlat11.w = x_518;
        let x_521 : f32 = u_xlat12.x;
        u_xlat9.z = x_521;
        let x_524 : f32 = u_xlat8.x;
        u_xlat9.w = x_524;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_527.z, x_527.w, x_527.x, x_527.z) + vec4<f32>(x_529.z, x_529.w, x_529.x, x_529.z));
        let x_533 : f32 = u_xlat11.y;
        u_xlat10.z = x_533;
        let x_536 : f32 = u_xlat49.y;
        u_xlat10.w = x_536;
        let x_539 : f32 = u_xlat9.y;
        u_xlat12.z = x_539;
        let x_542 : f32 = u_xlat8.z;
        u_xlat12.w = x_542;
        let x_544 : vec4<f32> = u_xlat10;
        let x_546 : vec4<f32> = u_xlat12;
        let x_548 : vec3<f32> = (vec3<f32>(x_544.z, x_544.y, x_544.w) + vec3<f32>(x_546.z, x_546.y, x_546.w));
        let x_549 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_548.x, x_548.y, x_548.z, x_549.w);
        let x_551 : vec4<f32> = u_xlat9;
        let x_553 : vec4<f32> = u_xlat13;
        let x_555 : vec3<f32> = (vec3<f32>(x_551.x, x_551.z, x_551.w) / vec3<f32>(x_553.z, x_553.w, x_553.y));
        let x_556 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_555.x, x_555.y, x_555.z, x_556.w);
        let x_558 : vec4<f32> = u_xlat9;
        let x_564 : vec3<f32> = (vec3<f32>(x_558.x, x_558.y, x_558.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_565 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat12;
        let x_569 : vec4<f32> = u_xlat8;
        let x_571 : vec3<f32> = (vec3<f32>(x_567.z, x_567.y, x_567.w) / vec3<f32>(x_569.x, x_569.y, x_569.z));
        let x_572 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
        let x_574 : vec4<f32> = u_xlat10;
        let x_576 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_577 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_576.x, x_576.y, x_576.z, x_577.w);
        let x_579 : vec4<f32> = u_xlat9;
        let x_582 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_584 : vec3<f32> = (vec3<f32>(x_579.y, x_579.x, x_579.z) * vec3<f32>(x_582.x, x_582.x, x_582.x));
        let x_585 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_584.x, x_584.y, x_584.z, x_585.w);
        let x_587 : vec4<f32> = u_xlat10;
        let x_590 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_592 : vec3<f32> = (vec3<f32>(x_587.x, x_587.y, x_587.z) * vec3<f32>(x_590.y, x_590.y, x_590.y));
        let x_593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_596 : f32 = u_xlat10.x;
        u_xlat9.w = x_596;
        let x_598 : vec4<f32> = u_xlat7;
        let x_601 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_604 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_598.x, x_598.y, x_598.x, x_598.y) * vec4<f32>(x_601.x, x_601.y, x_601.x, x_601.y)) + vec4<f32>(x_604.y, x_604.w, x_604.x, x_604.w));
        let x_607 : vec4<f32> = u_xlat7;
        let x_610 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_613 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_607.x, x_607.y) * vec2<f32>(x_610.x, x_610.y)) + vec2<f32>(x_613.z, x_613.w));
        let x_617 : f32 = u_xlat9.y;
        u_xlat10.w = x_617;
        let x_619 : vec4<f32> = u_xlat10;
        let x_620 : vec2<f32> = vec2<f32>(x_619.y, x_619.z);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_621.x, x_620.x, x_621.z, x_620.y);
        let x_623 : vec4<f32> = u_xlat7;
        let x_626 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_623.x, x_623.y, x_623.x, x_623.y) * vec4<f32>(x_626.x, x_626.y, x_626.x, x_626.y)) + vec4<f32>(x_629.x, x_629.y, x_629.z, x_629.y));
        let x_632 : vec4<f32> = u_xlat7;
        let x_635 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_638 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_632.x, x_632.y, x_632.x, x_632.y) * vec4<f32>(x_635.x, x_635.y, x_635.x, x_635.y)) + vec4<f32>(x_638.w, x_638.y, x_638.w, x_638.z));
        let x_641 : vec4<f32> = u_xlat7;
        let x_644 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_647 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_641.x, x_641.y, x_641.x, x_641.y) * vec4<f32>(x_644.x, x_644.y, x_644.x, x_644.y)) + vec4<f32>(x_647.x, x_647.w, x_647.z, x_647.w));
        let x_651 : vec4<f32> = u_xlat8;
        let x_653 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_651.x, x_651.x, x_651.x, x_651.y) * vec4<f32>(x_653.z, x_653.w, x_653.y, x_653.z));
        let x_657 : vec4<f32> = u_xlat8;
        let x_659 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_657.y, x_657.y, x_657.z, x_657.z) * x_659);
        let x_663 : f32 = u_xlat8.z;
        let x_665 : f32 = u_xlat13.y;
        u_xlat65 = (x_663 * x_665);
        let x_668 : vec4<f32> = u_xlat11;
        let x_669 : vec2<f32> = vec2<f32>(x_668.x, x_668.y);
        let x_671 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_669.x, x_669.y, x_671);
        let x_679 : vec3<f32> = txVec4;
        let x_681 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_679.xy, x_679.z);
        u_xlat67 = x_681;
        let x_683 : vec4<f32> = u_xlat11;
        let x_684 : vec2<f32> = vec2<f32>(x_683.z, x_683.w);
        let x_686 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_684.x, x_684.y, x_686);
        let x_694 : vec3<f32> = txVec5;
        let x_696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_694.xy, x_694.z);
        u_xlat69 = x_696;
        let x_697 : f32 = u_xlat69;
        let x_699 : f32 = u_xlat14.y;
        u_xlat69 = (x_697 * x_699);
        let x_702 : f32 = u_xlat14.x;
        let x_703 : f32 = u_xlat67;
        let x_705 : f32 = u_xlat69;
        u_xlat67 = ((x_702 * x_703) + x_705);
        let x_708 : vec2<f32> = u_xlat49;
        let x_710 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_708.x, x_708.y, x_710);
        let x_717 : vec3<f32> = txVec6;
        let x_719 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_717.xy, x_717.z);
        u_xlat69 = x_719;
        let x_721 : f32 = u_xlat14.z;
        let x_722 : f32 = u_xlat69;
        let x_724 : f32 = u_xlat67;
        u_xlat67 = ((x_721 * x_722) + x_724);
        let x_727 : vec4<f32> = u_xlat10;
        let x_728 : vec2<f32> = vec2<f32>(x_727.x, x_727.y);
        let x_730 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_728.x, x_728.y, x_730);
        let x_737 : vec3<f32> = txVec7;
        let x_739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_737.xy, x_737.z);
        u_xlat69 = x_739;
        let x_741 : f32 = u_xlat14.w;
        let x_742 : f32 = u_xlat69;
        let x_744 : f32 = u_xlat67;
        u_xlat67 = ((x_741 * x_742) + x_744);
        let x_747 : vec4<f32> = u_xlat12;
        let x_748 : vec2<f32> = vec2<f32>(x_747.x, x_747.y);
        let x_750 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_748.x, x_748.y, x_750);
        let x_757 : vec3<f32> = txVec8;
        let x_759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_757.xy, x_757.z);
        u_xlat69 = x_759;
        let x_761 : f32 = u_xlat15.x;
        let x_762 : f32 = u_xlat69;
        let x_764 : f32 = u_xlat67;
        u_xlat67 = ((x_761 * x_762) + x_764);
        let x_767 : vec4<f32> = u_xlat12;
        let x_768 : vec2<f32> = vec2<f32>(x_767.z, x_767.w);
        let x_770 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_768.x, x_768.y, x_770);
        let x_777 : vec3<f32> = txVec9;
        let x_779 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_777.xy, x_777.z);
        u_xlat69 = x_779;
        let x_781 : f32 = u_xlat15.y;
        let x_782 : f32 = u_xlat69;
        let x_784 : f32 = u_xlat67;
        u_xlat67 = ((x_781 * x_782) + x_784);
        let x_787 : vec4<f32> = u_xlat10;
        let x_788 : vec2<f32> = vec2<f32>(x_787.z, x_787.w);
        let x_790 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_788.x, x_788.y, x_790);
        let x_797 : vec3<f32> = txVec10;
        let x_799 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_797.xy, x_797.z);
        u_xlat69 = x_799;
        let x_801 : f32 = u_xlat15.z;
        let x_802 : f32 = u_xlat69;
        let x_804 : f32 = u_xlat67;
        u_xlat67 = ((x_801 * x_802) + x_804);
        let x_807 : vec4<f32> = u_xlat9;
        let x_808 : vec2<f32> = vec2<f32>(x_807.x, x_807.y);
        let x_810 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_808.x, x_808.y, x_810);
        let x_817 : vec3<f32> = txVec11;
        let x_819 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_817.xy, x_817.z);
        u_xlat69 = x_819;
        let x_821 : f32 = u_xlat15.w;
        let x_822 : f32 = u_xlat69;
        let x_824 : f32 = u_xlat67;
        u_xlat67 = ((x_821 * x_822) + x_824);
        let x_827 : vec4<f32> = u_xlat9;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_837 : vec3<f32> = txVec12;
        let x_839 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_837.xy, x_837.z);
        u_xlat69 = x_839;
        let x_840 : f32 = u_xlat65;
        let x_841 : f32 = u_xlat69;
        let x_843 : f32 = u_xlat67;
        u_xlat64 = ((x_840 * x_841) + x_843);
      } else {
        let x_846 : vec4<f32> = u_xlat6;
        let x_849 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_852 : vec2<f32> = ((vec2<f32>(x_846.x, x_846.y) * vec2<f32>(x_849.z, x_849.w)) + vec2<f32>(0.5f, 0.5f));
        let x_853 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_852.x, x_852.y, x_853.z, x_853.w);
        let x_855 : vec4<f32> = u_xlat7;
        let x_857 : vec2<f32> = floor(vec2<f32>(x_855.x, x_855.y));
        let x_858 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_857.x, x_857.y, x_858.z, x_858.w);
        let x_860 : vec4<f32> = u_xlat6;
        let x_863 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_866 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_860.x, x_860.y) * vec2<f32>(x_863.z, x_863.w)) + -(vec2<f32>(x_866.x, x_866.y)));
        let x_870 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_870.x, x_870.x, x_870.y, x_870.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_873 : vec4<f32> = u_xlat8;
        let x_875 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z) * vec4<f32>(x_875.x, x_875.x, x_875.z, x_875.z));
        let x_878 : vec4<f32> = u_xlat9;
        let x_882 : vec2<f32> = (vec2<f32>(x_878.y, x_878.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_883 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_883.x, x_882.x, x_883.z, x_882.y);
        let x_885 : vec4<f32> = u_xlat9;
        let x_888 : vec2<f32> = u_xlat49;
        let x_890 : vec2<f32> = ((vec2<f32>(x_885.x, x_885.z) * vec2<f32>(0.5f, 0.5f)) + -(x_888));
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_890.x, x_891.y, x_890.y, x_891.w);
        let x_893 : vec2<f32> = u_xlat49;
        let x_895 : vec2<f32> = (-(x_893) + vec2<f32>(1.0f, 1.0f));
        let x_896 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_895.x, x_895.y, x_896.z, x_896.w);
        let x_898 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_898, vec2<f32>(0.0f, 0.0f));
        let x_900 : vec2<f32> = u_xlat51;
        let x_902 : vec2<f32> = u_xlat51;
        let x_904 : vec4<f32> = u_xlat9;
        let x_906 : vec2<f32> = ((-(x_900) * x_902) + vec2<f32>(x_904.x, x_904.y));
        let x_907 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_906.x, x_906.y, x_907.z, x_907.w);
        let x_909 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_909, vec2<f32>(0.0f, 0.0f));
        let x_912 : vec2<f32> = u_xlat51;
        let x_914 : vec2<f32> = u_xlat51;
        let x_916 : vec4<f32> = u_xlat8;
        let x_918 : vec2<f32> = ((-(x_912) * x_914) + vec2<f32>(x_916.y, x_916.w));
        let x_919 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_918.x, x_919.y, x_918.y);
        let x_921 : vec4<f32> = u_xlat9;
        let x_924 : vec2<f32> = (vec2<f32>(x_921.x, x_921.y) + vec2<f32>(2.0f, 2.0f));
        let x_925 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_924.x, x_924.y, x_925.z, x_925.w);
        let x_927 : vec3<f32> = u_xlat29;
        let x_929 : vec2<f32> = (vec2<f32>(x_927.x, x_927.z) + vec2<f32>(2.0f, 2.0f));
        let x_930 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_930.x, x_929.x, x_930.z, x_929.y);
        let x_933 : f32 = u_xlat8.y;
        u_xlat11.z = (x_933 * 0.081632003f);
        let x_937 : vec4<f32> = u_xlat8;
        let x_940 : vec3<f32> = (vec3<f32>(x_937.z, x_937.x, x_937.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_941 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_940.x, x_940.y, x_940.z, x_941.w);
        let x_943 : vec4<f32> = u_xlat9;
        let x_946 : vec2<f32> = (vec2<f32>(x_943.x, x_943.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_947 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_946.x, x_946.y, x_947.z, x_947.w);
        let x_950 : f32 = u_xlat12.y;
        u_xlat11.x = x_950;
        let x_952 : vec2<f32> = u_xlat49;
        let x_959 : vec2<f32> = ((vec2<f32>(x_952.x, x_952.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_960 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_960.x, x_959.x, x_960.z, x_959.y);
        let x_962 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = ((vec2<f32>(x_962.x, x_962.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_967 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_966.x, x_967.y, x_966.y, x_967.w);
        let x_970 : f32 = u_xlat8.x;
        u_xlat9.y = x_970;
        let x_973 : f32 = u_xlat10.y;
        u_xlat9.w = x_973;
        let x_975 : vec4<f32> = u_xlat9;
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_975 + x_976);
        let x_978 : vec2<f32> = u_xlat49;
        let x_981 : vec2<f32> = ((vec2<f32>(x_978.y, x_978.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_982 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_982.x, x_981.x, x_982.z, x_981.y);
        let x_984 : vec2<f32> = u_xlat49;
        let x_987 : vec2<f32> = ((vec2<f32>(x_984.y, x_984.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_988 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_987.x, x_988.y, x_987.y, x_988.w);
        let x_991 : f32 = u_xlat8.y;
        u_xlat10.y = x_991;
        let x_993 : vec4<f32> = u_xlat10;
        let x_994 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_993 + x_994);
        let x_996 : vec4<f32> = u_xlat9;
        let x_997 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_996 / x_997);
        let x_999 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_999 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1005 : vec4<f32> = u_xlat10;
        let x_1006 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1005 / x_1006);
        let x_1008 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1008 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1010 : vec4<f32> = u_xlat9;
        let x_1013 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1010.w, x_1010.x, x_1010.y, x_1010.z) * vec4<f32>(x_1013.x, x_1013.x, x_1013.x, x_1013.x));
        let x_1016 : vec4<f32> = u_xlat10;
        let x_1019 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1016.x, x_1016.w, x_1016.y, x_1016.z) * vec4<f32>(x_1019.y, x_1019.y, x_1019.y, x_1019.y));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1023 : vec3<f32> = vec3<f32>(x_1022.y, x_1022.z, x_1022.w);
        let x_1024 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1023.x, x_1024.y, x_1023.y, x_1023.z);
        let x_1027 : f32 = u_xlat10.x;
        u_xlat12.y = x_1027;
        let x_1029 : vec4<f32> = u_xlat7;
        let x_1032 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1035 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1029.x, x_1029.y, x_1029.x, x_1029.y) * vec4<f32>(x_1032.x, x_1032.y, x_1032.x, x_1032.y)) + vec4<f32>(x_1035.x, x_1035.y, x_1035.z, x_1035.y));
        let x_1038 : vec4<f32> = u_xlat7;
        let x_1041 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1044 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1038.x, x_1038.y) * vec2<f32>(x_1041.x, x_1041.y)) + vec2<f32>(x_1044.w, x_1044.y));
        let x_1048 : f32 = u_xlat12.y;
        u_xlat9.y = x_1048;
        let x_1051 : f32 = u_xlat10.z;
        u_xlat12.y = x_1051;
        let x_1053 : vec4<f32> = u_xlat7;
        let x_1056 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1059 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1053.x, x_1053.y, x_1053.x, x_1053.y) * vec4<f32>(x_1056.x, x_1056.y, x_1056.x, x_1056.y)) + vec4<f32>(x_1059.x, x_1059.y, x_1059.z, x_1059.y));
        let x_1062 : vec4<f32> = u_xlat7;
        let x_1065 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1068 : vec4<f32> = u_xlat12;
        let x_1070 : vec2<f32> = ((vec2<f32>(x_1062.x, x_1062.y) * vec2<f32>(x_1065.x, x_1065.y)) + vec2<f32>(x_1068.w, x_1068.y));
        let x_1071 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1070.x, x_1070.y, x_1071.z, x_1071.w);
        let x_1074 : f32 = u_xlat12.y;
        u_xlat9.z = x_1074;
        let x_1077 : vec4<f32> = u_xlat7;
        let x_1080 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1077.x, x_1077.y, x_1077.x, x_1077.y) * vec4<f32>(x_1080.x, x_1080.y, x_1080.x, x_1080.y)) + vec4<f32>(x_1083.x, x_1083.y, x_1083.x, x_1083.z));
        let x_1087 : f32 = u_xlat10.w;
        u_xlat12.y = x_1087;
        let x_1090 : vec4<f32> = u_xlat7;
        let x_1093 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1096 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1090.x, x_1090.y, x_1090.x, x_1090.y) * vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.y)) + vec4<f32>(x_1096.x, x_1096.y, x_1096.z, x_1096.y));
        let x_1100 : vec4<f32> = u_xlat7;
        let x_1103 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat12;
        let x_1108 : vec2<f32> = ((vec2<f32>(x_1100.x, x_1100.y) * vec2<f32>(x_1103.x, x_1103.y)) + vec2<f32>(x_1106.w, x_1106.y));
        let x_1109 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1108.x, x_1108.y, x_1109.z);
        let x_1112 : f32 = u_xlat12.y;
        u_xlat9.w = x_1112;
        let x_1115 : vec4<f32> = u_xlat7;
        let x_1118 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1121 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1118.x, x_1118.y)) + vec2<f32>(x_1121.x, x_1121.w));
        let x_1124 : vec4<f32> = u_xlat12;
        let x_1125 : vec3<f32> = vec3<f32>(x_1124.x, x_1124.z, x_1124.w);
        let x_1126 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1125.x, x_1126.y, x_1125.y, x_1125.z);
        let x_1128 : vec4<f32> = u_xlat7;
        let x_1131 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1134 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1128.x, x_1128.y, x_1128.x, x_1128.y) * vec4<f32>(x_1131.x, x_1131.y, x_1131.x, x_1131.y)) + vec4<f32>(x_1134.x, x_1134.y, x_1134.z, x_1134.y));
        let x_1138 : vec4<f32> = u_xlat7;
        let x_1141 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1144 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1141.x, x_1141.y)) + vec2<f32>(x_1144.w, x_1144.y));
        let x_1148 : f32 = u_xlat9.x;
        u_xlat10.x = x_1148;
        let x_1150 : vec4<f32> = u_xlat7;
        let x_1153 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1156 : vec4<f32> = u_xlat10;
        let x_1158 : vec2<f32> = ((vec2<f32>(x_1150.x, x_1150.y) * vec2<f32>(x_1153.x, x_1153.y)) + vec2<f32>(x_1156.x, x_1156.y));
        let x_1159 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1158.x, x_1158.y, x_1159.z, x_1159.w);
        let x_1162 : vec4<f32> = u_xlat8;
        let x_1164 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1162.x, x_1162.x, x_1162.x, x_1162.x) * x_1164);
        let x_1167 : vec4<f32> = u_xlat8;
        let x_1169 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1167.y, x_1167.y, x_1167.y, x_1167.y) * x_1169);
        let x_1172 : vec4<f32> = u_xlat8;
        let x_1174 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1172.z, x_1172.z, x_1172.z, x_1172.z) * x_1174);
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1176.w, x_1176.w, x_1176.w, x_1176.w) * x_1178);
        let x_1181 : vec4<f32> = u_xlat13;
        let x_1182 : vec2<f32> = vec2<f32>(x_1181.x, x_1181.y);
        let x_1184 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1182.x, x_1182.y, x_1184);
        let x_1191 : vec3<f32> = txVec13;
        let x_1193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1191.xy, x_1191.z);
        u_xlat65 = x_1193;
        let x_1195 : vec4<f32> = u_xlat13;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.z, x_1195.w);
        let x_1198 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec14;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat67 = x_1207;
        let x_1208 : f32 = u_xlat67;
        let x_1210 : f32 = u_xlat18.y;
        u_xlat67 = (x_1208 * x_1210);
        let x_1213 : f32 = u_xlat18.x;
        let x_1214 : f32 = u_xlat65;
        let x_1216 : f32 = u_xlat67;
        u_xlat65 = ((x_1213 * x_1214) + x_1216);
        let x_1219 : vec2<f32> = u_xlat49;
        let x_1221 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1219.x, x_1219.y, x_1221);
        let x_1228 : vec3<f32> = txVec15;
        let x_1230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1228.xy, x_1228.z);
        u_xlat67 = x_1230;
        let x_1232 : f32 = u_xlat18.z;
        let x_1233 : f32 = u_xlat67;
        let x_1235 : f32 = u_xlat65;
        u_xlat65 = ((x_1232 * x_1233) + x_1235);
        let x_1238 : vec4<f32> = u_xlat16;
        let x_1239 : vec2<f32> = vec2<f32>(x_1238.x, x_1238.y);
        let x_1241 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1239.x, x_1239.y, x_1241);
        let x_1248 : vec3<f32> = txVec16;
        let x_1250 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1248.xy, x_1248.z);
        u_xlat67 = x_1250;
        let x_1252 : f32 = u_xlat18.w;
        let x_1253 : f32 = u_xlat67;
        let x_1255 : f32 = u_xlat65;
        u_xlat65 = ((x_1252 * x_1253) + x_1255);
        let x_1258 : vec4<f32> = u_xlat14;
        let x_1259 : vec2<f32> = vec2<f32>(x_1258.x, x_1258.y);
        let x_1261 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1259.x, x_1259.y, x_1261);
        let x_1268 : vec3<f32> = txVec17;
        let x_1270 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1268.xy, x_1268.z);
        u_xlat67 = x_1270;
        let x_1272 : f32 = u_xlat19.x;
        let x_1273 : f32 = u_xlat67;
        let x_1275 : f32 = u_xlat65;
        u_xlat65 = ((x_1272 * x_1273) + x_1275);
        let x_1278 : vec4<f32> = u_xlat14;
        let x_1279 : vec2<f32> = vec2<f32>(x_1278.z, x_1278.w);
        let x_1281 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1279.x, x_1279.y, x_1281);
        let x_1288 : vec3<f32> = txVec18;
        let x_1290 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1288.xy, x_1288.z);
        u_xlat67 = x_1290;
        let x_1292 : f32 = u_xlat19.y;
        let x_1293 : f32 = u_xlat67;
        let x_1295 : f32 = u_xlat65;
        u_xlat65 = ((x_1292 * x_1293) + x_1295);
        let x_1298 : vec4<f32> = u_xlat15;
        let x_1299 : vec2<f32> = vec2<f32>(x_1298.x, x_1298.y);
        let x_1301 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1299.x, x_1299.y, x_1301);
        let x_1308 : vec3<f32> = txVec19;
        let x_1310 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1308.xy, x_1308.z);
        u_xlat67 = x_1310;
        let x_1312 : f32 = u_xlat19.z;
        let x_1313 : f32 = u_xlat67;
        let x_1315 : f32 = u_xlat65;
        u_xlat65 = ((x_1312 * x_1313) + x_1315);
        let x_1318 : vec4<f32> = u_xlat16;
        let x_1319 : vec2<f32> = vec2<f32>(x_1318.z, x_1318.w);
        let x_1321 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1319.x, x_1319.y, x_1321);
        let x_1328 : vec3<f32> = txVec20;
        let x_1330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1328.xy, x_1328.z);
        u_xlat67 = x_1330;
        let x_1332 : f32 = u_xlat19.w;
        let x_1333 : f32 = u_xlat67;
        let x_1335 : f32 = u_xlat65;
        u_xlat65 = ((x_1332 * x_1333) + x_1335);
        let x_1338 : vec4<f32> = u_xlat17;
        let x_1339 : vec2<f32> = vec2<f32>(x_1338.x, x_1338.y);
        let x_1341 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1339.x, x_1339.y, x_1341);
        let x_1348 : vec3<f32> = txVec21;
        let x_1350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1348.xy, x_1348.z);
        u_xlat67 = x_1350;
        let x_1352 : f32 = u_xlat20.x;
        let x_1353 : f32 = u_xlat67;
        let x_1355 : f32 = u_xlat65;
        u_xlat65 = ((x_1352 * x_1353) + x_1355);
        let x_1358 : vec4<f32> = u_xlat17;
        let x_1359 : vec2<f32> = vec2<f32>(x_1358.z, x_1358.w);
        let x_1361 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1359.x, x_1359.y, x_1361);
        let x_1368 : vec3<f32> = txVec22;
        let x_1370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1368.xy, x_1368.z);
        u_xlat67 = x_1370;
        let x_1372 : f32 = u_xlat20.y;
        let x_1373 : f32 = u_xlat67;
        let x_1375 : f32 = u_xlat65;
        u_xlat65 = ((x_1372 * x_1373) + x_1375);
        let x_1378 : vec3<f32> = u_xlat30;
        let x_1379 : vec2<f32> = vec2<f32>(x_1378.x, x_1378.y);
        let x_1381 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1379.x, x_1379.y, x_1381);
        let x_1388 : vec3<f32> = txVec23;
        let x_1390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1388.xy, x_1388.z);
        u_xlat67 = x_1390;
        let x_1392 : f32 = u_xlat20.z;
        let x_1393 : f32 = u_xlat67;
        let x_1395 : f32 = u_xlat65;
        u_xlat65 = ((x_1392 * x_1393) + x_1395);
        let x_1398 : vec2<f32> = u_xlat57;
        let x_1400 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1398.x, x_1398.y, x_1400);
        let x_1407 : vec3<f32> = txVec24;
        let x_1409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1407.xy, x_1407.z);
        u_xlat67 = x_1409;
        let x_1411 : f32 = u_xlat20.w;
        let x_1412 : f32 = u_xlat67;
        let x_1414 : f32 = u_xlat65;
        u_xlat65 = ((x_1411 * x_1412) + x_1414);
        let x_1417 : vec4<f32> = u_xlat12;
        let x_1418 : vec2<f32> = vec2<f32>(x_1417.x, x_1417.y);
        let x_1420 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1418.x, x_1418.y, x_1420);
        let x_1427 : vec3<f32> = txVec25;
        let x_1429 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1427.xy, x_1427.z);
        u_xlat67 = x_1429;
        let x_1431 : f32 = u_xlat8.x;
        let x_1432 : f32 = u_xlat67;
        let x_1434 : f32 = u_xlat65;
        u_xlat65 = ((x_1431 * x_1432) + x_1434);
        let x_1437 : vec4<f32> = u_xlat12;
        let x_1438 : vec2<f32> = vec2<f32>(x_1437.z, x_1437.w);
        let x_1440 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1438.x, x_1438.y, x_1440);
        let x_1447 : vec3<f32> = txVec26;
        let x_1449 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1447.xy, x_1447.z);
        u_xlat67 = x_1449;
        let x_1451 : f32 = u_xlat8.y;
        let x_1452 : f32 = u_xlat67;
        let x_1454 : f32 = u_xlat65;
        u_xlat65 = ((x_1451 * x_1452) + x_1454);
        let x_1457 : vec2<f32> = u_xlat52;
        let x_1459 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1457.x, x_1457.y, x_1459);
        let x_1466 : vec3<f32> = txVec27;
        let x_1468 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1466.xy, x_1466.z);
        u_xlat67 = x_1468;
        let x_1470 : f32 = u_xlat8.z;
        let x_1471 : f32 = u_xlat67;
        let x_1473 : f32 = u_xlat65;
        u_xlat65 = ((x_1470 * x_1471) + x_1473);
        let x_1476 : vec4<f32> = u_xlat7;
        let x_1477 : vec2<f32> = vec2<f32>(x_1476.x, x_1476.y);
        let x_1479 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec28;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat67 = x_1488;
        let x_1490 : f32 = u_xlat8.w;
        let x_1491 : f32 = u_xlat67;
        let x_1493 : f32 = u_xlat65;
        u_xlat64 = ((x_1490 * x_1491) + x_1493);
      }
    }
  } else {
    let x_1497 : vec4<f32> = u_xlat6;
    let x_1498 : vec2<f32> = vec2<f32>(x_1497.x, x_1497.y);
    let x_1500 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1498.x, x_1498.y, x_1500);
    let x_1507 : vec3<f32> = txVec29;
    let x_1509 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1507.xy, x_1507.z);
    u_xlat64 = x_1509;
  }
  let x_1511 : f32 = x_256.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1511) + 1.0f);
  let x_1514 : f32 = u_xlat64;
  let x_1516 : f32 = x_256.x_MainLightShadowParams.x;
  let x_1518 : f32 = u_xlat65;
  u_xlat64 = ((x_1514 * x_1516) + x_1518);
  let x_1522 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1522);
  let x_1526 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1526 >= 1.0f);
  let x_1528 : bool = u_xlatb67;
  let x_1529 : bool = u_xlatb6;
  u_xlatb67 = (x_1528 | x_1529);
  let x_1531 : bool = u_xlatb67;
  let x_1532 : f32 = u_xlat64;
  u_xlat64 = select(x_1532, 1.0f, x_1531);
  let x_1534 : vec3<f32> = u_xlat0;
  let x_1536 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1534, -(vec3<f32>(x_1536.x, x_1536.y, x_1536.z)));
  let x_1542 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1542, 0.0f, 1.0f);
  let x_1545 : f32 = u_xlat64;
  let x_1549 : vec4<f32> = x_90.x_MainLightColor;
  let x_1551 : vec3<f32> = (vec3<f32>(x_1545, x_1545, x_1545) * vec3<f32>(x_1549.x, x_1549.y, x_1549.z));
  let x_1552 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1551.x, x_1551.y, x_1551.z, x_1552.w);
  let x_1554 : vec3<f32> = u_xlat0;
  let x_1556 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1554.x, x_1554.x, x_1554.x) * vec3<f32>(x_1556.x, x_1556.y, x_1556.z));
  let x_1559 : vec3<f32> = u_xlat0;
  let x_1560 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1559 * vec3<f32>(x_1560.x, x_1560.y, x_1560.z));
  let x_1564 : f32 = x_145.unity_LODFade.x;
  u_xlatb64 = (x_1564 < 0.0f);
  let x_1567 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1567 + 1.0f);
  let x_1570 : bool = u_xlatb64;
  if (x_1570) {
    let x_1575 : f32 = u_xlat3.x;
    x_1571 = x_1575;
  } else {
    let x_1578 : f32 = x_145.unity_LODFade.x;
    x_1571 = x_1578;
  }
  let x_1579 : f32 = x_1571;
  u_xlat64 = x_1579;
  let x_1581 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1581);
  let x_1583 : vec3<f32> = u_xlat2;
  let x_1587 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1583) * vec3<f32>(x_1587.x, x_1587.y, x_1587.x));
  let x_1593 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1593);
  let x_1597 : u32 = u_xlatu2.z;
  u_xlatu44 = (x_1597 * 1025u);
  let x_1601 : u32 = u_xlatu44;
  u_xlatu24 = (x_1601 >> 6u);
  let x_1605 : u32 = u_xlatu44;
  let x_1606 : u32 = u_xlatu24;
  u_xlati44 = bitcast<i32>((x_1605 ^ x_1606));
  let x_1609 : i32 = u_xlati44;
  u_xlatu44 = (bitcast<u32>(x_1609) * 9u);
  let x_1613 : u32 = u_xlatu44;
  u_xlatu24 = (x_1613 >> 11u);
  let x_1616 : u32 = u_xlatu44;
  let x_1617 : u32 = u_xlatu24;
  u_xlati44 = bitcast<i32>((x_1616 ^ x_1617));
  let x_1620 : i32 = u_xlati44;
  u_xlati44 = (x_1620 * 32769i);
  let x_1624 : i32 = u_xlati44;
  let x_1627 : u32 = u_xlatu2.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1624) ^ x_1627));
  let x_1631 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1631) * 1025u);
  let x_1634 : u32 = u_xlatu23;
  u_xlatu44 = (x_1634 >> 6u);
  let x_1636 : u32 = u_xlatu44;
  let x_1637 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1636 ^ x_1637));
  let x_1640 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1640) * 9u);
  let x_1643 : u32 = u_xlatu23;
  u_xlatu44 = (x_1643 >> 11u);
  let x_1645 : u32 = u_xlatu44;
  let x_1646 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1645 ^ x_1646));
  let x_1649 : i32 = u_xlati23;
  u_xlati23 = (x_1649 * 32769i);
  let x_1652 : i32 = u_xlati23;
  let x_1655 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1652) ^ x_1655));
  let x_1658 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1658) * 1025u);
  let x_1663 : u32 = u_xlatu2.x;
  u_xlatu23 = (x_1663 >> 6u);
  let x_1665 : u32 = u_xlatu23;
  let x_1667 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1665 ^ x_1667));
  let x_1670 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1670) * 9u);
  let x_1675 : u32 = u_xlatu2.x;
  u_xlatu23 = (x_1675 >> 11u);
  let x_1677 : u32 = u_xlatu23;
  let x_1679 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1677 ^ x_1679));
  let x_1682 : i32 = u_xlati2;
  u_xlati2 = (x_1682 * 32769i);
  param = 1065353216i;
  let x_1688 : i32 = u_xlati2;
  param_1 = x_1688;
  param_2 = 0i;
  param_3 = 23i;
  let x_1691 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1691);
  let x_1695 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1695 + -1.0f);
  let x_1700 : f32 = u_xlat2.x;
  u_xlat23.x = (-(x_1700) + 1.0f);
  let x_1704 : bool = u_xlatb3;
  if (x_1704) {
    let x_1709 : f32 = u_xlat2.x;
    x_1705 = x_1709;
  } else {
    let x_1712 : f32 = u_xlat23.x;
    x_1705 = x_1712;
  }
  let x_1713 : f32 = x_1705;
  u_xlat2.x = x_1713;
  let x_1715 : f32 = u_xlat64;
  let x_1718 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1715 * 2.0f) + -(x_1718));
  let x_1721 : f32 = u_xlat64;
  let x_1723 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1721 * x_1723);
  let x_1730 : f32 = u_xlat2.x;
  u_xlatb23.x = (x_1730 >= 0.400000006f);
  let x_1735 : bool = u_xlatb23.x;
  if (x_1735) {
    let x_1740 : f32 = u_xlat2.x;
    x_1736 = x_1740;
  } else {
    x_1736 = 0.0f;
  }
  let x_1742 : f32 = x_1736;
  u_xlat23.x = x_1742;
  let x_1745 : f32 = u_xlat3.w;
  let x_1746 : f32 = u_xlat64;
  u_xlat64 = ((x_1745 * x_1746) + -0.400000006f);
  let x_1752 : f32 = u_xlat2.x;
  u_xlat44 = dpdxCoarse(x_1752);
  let x_1755 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1755);
  let x_1759 : f32 = u_xlat2.x;
  let x_1761 : f32 = u_xlat44;
  u_xlat2.x = (abs(x_1759) + abs(x_1761));
  let x_1766 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1766, 0.0001f);
  let x_1770 : f32 = u_xlat64;
  let x_1772 : f32 = u_xlat2.x;
  u_xlat64 = (x_1770 / x_1772);
  let x_1774 : f32 = u_xlat64;
  u_xlat64 = (x_1774 + 0.5f);
  let x_1776 : f32 = u_xlat64;
  u_xlat64 = clamp(x_1776, 0.0f, 1.0f);
  let x_1780 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1780 == 0.0f));
  let x_1782 : bool = u_xlatb2;
  if (x_1782) {
    let x_1786 : f32 = u_xlat64;
    x_1783 = x_1786;
  } else {
    let x_1789 : f32 = u_xlat23.x;
    x_1783 = x_1789;
  }
  let x_1790 : f32 = x_1783;
  u_xlat64 = x_1790;
  let x_1791 : f32 = u_xlat64;
  u_xlat23.x = (x_1791 + -0.0001f);
  let x_1796 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1796 < 0.0f);
  let x_1800 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1800) * -1i) != 0i)) {
    discard;
  }
  let x_1810 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1810);
  let x_1814 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb23.y = (x_1814 >= 0.0f);
  let x_1818 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1818);
  let x_1822 : bool = u_xlatb23.y;
  u_xlat23.y = select(-1.0f, 1.0f, x_1822);
  let x_1826 : f32 = u_xlat23.y;
  let x_1828 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1826 * x_1828);
  let x_1831 : vec3<f32> = vs_INTERP1;
  let x_1833 : vec4<f32> = vs_INTERP2;
  let x_1835 : vec3<f32> = (vec3<f32>(x_1831.z, x_1831.x, x_1831.y) * vec3<f32>(x_1833.y, x_1833.z, x_1833.x));
  let x_1836 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1835.x, x_1835.y, x_1835.z, x_1836.w);
  let x_1838 : vec3<f32> = vs_INTERP1;
  let x_1840 : vec4<f32> = vs_INTERP2;
  let x_1843 : vec4<f32> = u_xlat3;
  let x_1846 : vec3<f32> = ((vec3<f32>(x_1838.y, x_1838.z, x_1838.x) * vec3<f32>(x_1840.z, x_1840.x, x_1840.y)) + -(vec3<f32>(x_1843.x, x_1843.y, x_1843.z)));
  let x_1847 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1846.x, x_1846.y, x_1846.z, x_1847.w);
  let x_1849 : vec2<f32> = u_xlat23;
  let x_1851 : vec4<f32> = u_xlat3;
  let x_1853 : vec3<f32> = (vec3<f32>(x_1849.x, x_1849.x, x_1849.x) * vec3<f32>(x_1851.x, x_1851.y, x_1851.z));
  let x_1854 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1853.x, x_1853.y, x_1853.z, x_1854.w);
  let x_1856 : vec4<f32> = u_xlat3;
  let x_1858 : vec3<f32> = u_xlat26;
  let x_1860 : vec3<f32> = (vec3<f32>(x_1856.x, x_1856.y, x_1856.z) * vec3<f32>(x_1858.y, x_1858.y, x_1858.y));
  let x_1861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1860.x, x_1860.y, x_1860.z, x_1861.w);
  let x_1863 : vec3<f32> = u_xlat26;
  let x_1865 : vec4<f32> = vs_INTERP2;
  let x_1868 : vec4<f32> = u_xlat3;
  let x_1870 : vec3<f32> = ((vec3<f32>(x_1863.x, x_1863.x, x_1863.x) * vec3<f32>(x_1865.x, x_1865.y, x_1865.z)) + vec3<f32>(x_1868.x, x_1868.y, x_1868.z));
  let x_1871 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1870.x, x_1870.y, x_1870.z, x_1871.w);
  let x_1873 : vec3<f32> = u_xlat26;
  let x_1875 : vec3<f32> = vs_INTERP1;
  let x_1877 : vec4<f32> = u_xlat3;
  let x_1879 : vec3<f32> = ((vec3<f32>(x_1873.z, x_1873.z, x_1873.z) * x_1875) + vec3<f32>(x_1877.x, x_1877.y, x_1877.z));
  let x_1880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1879.x, x_1879.y, x_1879.z, x_1880.w);
  let x_1882 : vec4<f32> = u_xlat3;
  let x_1884 : vec4<f32> = u_xlat3;
  u_xlat23.x = dot(vec3<f32>(x_1882.x, x_1882.y, x_1882.z), vec3<f32>(x_1884.x, x_1884.y, x_1884.z));
  let x_1889 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1889);
  let x_1892 : vec2<f32> = u_xlat23;
  let x_1894 : vec4<f32> = u_xlat3;
  let x_1896 : vec3<f32> = (vec3<f32>(x_1892.x, x_1892.x, x_1892.x) * vec3<f32>(x_1894.x, x_1894.y, x_1894.z));
  let x_1897 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1896.x, x_1896.y, x_1896.z, x_1897.w);
  let x_1900 : f32 = vs_INTERP0.y;
  let x_1902 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1900 * x_1902);
  let x_1906 : f32 = x_90.unity_MatrixV[0i].z;
  let x_1908 : f32 = vs_INTERP0.x;
  let x_1911 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1906 * x_1908) + x_1911);
  let x_1915 : f32 = x_90.unity_MatrixV[2i].z;
  let x_1917 : f32 = vs_INTERP0.z;
  let x_1920 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1915 * x_1917) + x_1920);
  let x_1924 : f32 = u_xlat23.x;
  let x_1926 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1924 + x_1926);
  let x_1930 : f32 = u_xlat23.x;
  let x_1934 : f32 = x_90.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1930) + -(x_1934));
  let x_1939 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1939, 0.0f);
  let x_1943 : f32 = u_xlat23.x;
  let x_1946 : f32 = x_90.unity_FogParams.x;
  u_xlat23.x = (x_1943 * x_1946);
  let x_1956 : vec2<f32> = vs_INTERP5;
  let x_1958 : f32 = x_90.x_GlobalMipBias.x;
  let x_1959 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1956, x_1958);
  u_xlat26 = vec3<f32>(x_1959.x, x_1959.y, x_1959.z);
  let x_1962 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1963 : vec2<f32> = vec2<f32>(x_1962.x, x_1962.y);
  let x_1967 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1963.x, x_1963.y));
  let x_1968 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1967.x, x_1967.y, x_1968.z, x_1968.w);
  let x_1970 : vec4<f32> = u_xlat6;
  let x_1972 : vec4<f32> = hlslcc_FragCoord;
  let x_1974 : vec2<f32> = (vec2<f32>(x_1970.x, x_1970.y) * vec2<f32>(x_1972.x, x_1972.y));
  let x_1975 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1974.x, x_1974.y, x_1975.z, x_1975.w);
  let x_1978 : f32 = u_xlat6.y;
  let x_1981 : f32 = x_90.x_ScaleBiasRt.x;
  let x_1984 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat44 = ((x_1978 * x_1981) + x_1984);
  let x_1986 : f32 = u_xlat44;
  u_xlat6.z = (-(x_1986) + 1.0f);
  let x_1991 : f32 = u_xlat5.x;
  u_xlat5.x = x_1991;
  let x_1994 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1994, 0.0f, 1.0f);
  let x_1997 : f32 = u_xlat64;
  u_xlat64 = x_1997;
  let x_1998 : f32 = u_xlat64;
  u_xlat64 = clamp(x_1998, 0.0f, 1.0f);
  let x_2000 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2000 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2005 : f32 = u_xlat5.x;
  u_xlat44 = (-(x_2005) + 1.0f);
  let x_2009 : f32 = u_xlat44;
  let x_2010 : f32 = u_xlat44;
  u_xlat66 = (x_2009 * x_2010);
  let x_2012 : f32 = u_xlat66;
  u_xlat66 = max(x_2012, 0.0078125f);
  let x_2015 : f32 = u_xlat66;
  let x_2016 : f32 = u_xlat66;
  u_xlat67 = (x_2015 * x_2016);
  let x_2019 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2019 + 0.040000021f);
  let x_2024 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2024, 1.0f);
  let x_2028 : f32 = u_xlat66;
  u_xlat27 = ((x_2028 * 4.0f) + 2.0f);
  let x_2037 : vec4<f32> = u_xlat6;
  let x_2040 : f32 = x_90.x_GlobalMipBias.x;
  let x_2041 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2037.x, x_2037.z), x_2040);
  u_xlat6.x = x_2041.x;
  let x_2046 : f32 = u_xlat6.x;
  u_xlat48 = (x_2046 + -1.0f);
  let x_2050 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2051 : f32 = u_xlat48;
  u_xlat48 = ((x_2050 * x_2051) + 1.0f);
  let x_2055 : f32 = u_xlat6.x;
  let x_2057 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2055, x_2057);
  let x_2060 : bool = u_xlatb63;
  if (x_2060) {
    let x_2064 : f32 = x_256.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2064 == 1.0f);
    let x_2066 : bool = u_xlatb63;
    if (x_2066) {
      let x_2070 : vec4<f32> = vs_INTERP9;
      let x_2073 : vec4<f32> = x_256.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2070.x, x_2070.y, x_2070.x, x_2070.y) + x_2073);
      let x_2076 : vec4<f32> = u_xlat7;
      let x_2077 : vec2<f32> = vec2<f32>(x_2076.x, x_2076.y);
      let x_2079 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2077.x, x_2077.y, x_2079);
      let x_2086 : vec3<f32> = txVec30;
      let x_2088 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2086.xy, x_2086.z);
      u_xlat8.x = x_2088;
      let x_2091 : vec4<f32> = u_xlat7;
      let x_2092 : vec2<f32> = vec2<f32>(x_2091.z, x_2091.w);
      let x_2094 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2092.x, x_2092.y, x_2094);
      let x_2101 : vec3<f32> = txVec31;
      let x_2103 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2101.xy, x_2101.z);
      u_xlat8.y = x_2103;
      let x_2105 : vec4<f32> = vs_INTERP9;
      let x_2108 : vec4<f32> = x_256.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2105.x, x_2105.y, x_2105.x, x_2105.y) + x_2108);
      let x_2111 : vec4<f32> = u_xlat7;
      let x_2112 : vec2<f32> = vec2<f32>(x_2111.x, x_2111.y);
      let x_2114 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2112.x, x_2112.y, x_2114);
      let x_2121 : vec3<f32> = txVec32;
      let x_2123 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2121.xy, x_2121.z);
      u_xlat8.z = x_2123;
      let x_2126 : vec4<f32> = u_xlat7;
      let x_2127 : vec2<f32> = vec2<f32>(x_2126.z, x_2126.w);
      let x_2129 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2127.x, x_2127.y, x_2129);
      let x_2136 : vec3<f32> = txVec33;
      let x_2138 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2136.xy, x_2136.z);
      u_xlat8.w = x_2138;
      let x_2140 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2140, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2145 : f32 = x_256.x_MainLightShadowParams.y;
      u_xlatb69 = (x_2145 == 2.0f);
      let x_2147 : bool = u_xlatb69;
      if (x_2147) {
        let x_2150 : vec4<f32> = vs_INTERP9;
        let x_2153 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2156 : vec2<f32> = ((vec2<f32>(x_2150.x, x_2150.y) * vec2<f32>(x_2153.z, x_2153.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2157 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2156.x, x_2156.y, x_2157.z, x_2157.w);
        let x_2159 : vec4<f32> = u_xlat7;
        let x_2161 : vec2<f32> = floor(vec2<f32>(x_2159.x, x_2159.y));
        let x_2162 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2161.x, x_2161.y, x_2162.z, x_2162.w);
        let x_2164 : vec4<f32> = vs_INTERP9;
        let x_2167 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2170 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2164.x, x_2164.y) * vec2<f32>(x_2167.z, x_2167.w)) + -(vec2<f32>(x_2170.x, x_2170.y)));
        let x_2174 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2174.x, x_2174.x, x_2174.y, x_2174.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2177 : vec4<f32> = u_xlat8;
        let x_2179 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2177.x, x_2177.x, x_2177.z, x_2177.z) * vec4<f32>(x_2179.x, x_2179.x, x_2179.z, x_2179.z));
        let x_2182 : vec4<f32> = u_xlat9;
        let x_2184 : vec2<f32> = (vec2<f32>(x_2182.y, x_2182.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2185 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2184.x, x_2185.y, x_2184.y, x_2185.w);
        let x_2187 : vec4<f32> = u_xlat9;
        let x_2190 : vec2<f32> = u_xlat49;
        let x_2192 : vec2<f32> = ((vec2<f32>(x_2187.x, x_2187.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2190));
        let x_2193 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2192.x, x_2192.y, x_2193.z, x_2193.w);
        let x_2195 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2195) + vec2<f32>(1.0f, 1.0f));
        let x_2198 : vec2<f32> = u_xlat49;
        let x_2199 : vec2<f32> = min(x_2198, vec2<f32>(0.0f, 0.0f));
        let x_2200 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2199.x, x_2199.y, x_2200.z, x_2200.w);
        let x_2202 : vec4<f32> = u_xlat10;
        let x_2205 : vec4<f32> = u_xlat10;
        let x_2208 : vec2<f32> = u_xlat51;
        let x_2209 : vec2<f32> = ((-(vec2<f32>(x_2202.x, x_2202.y)) * vec2<f32>(x_2205.x, x_2205.y)) + x_2208);
        let x_2210 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2209.x, x_2209.y, x_2210.z, x_2210.w);
        let x_2212 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2212, vec2<f32>(0.0f, 0.0f));
        let x_2214 : vec2<f32> = u_xlat49;
        let x_2216 : vec2<f32> = u_xlat49;
        let x_2218 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2214) * x_2216) + vec2<f32>(x_2218.y, x_2218.w));
        let x_2221 : vec4<f32> = u_xlat10;
        let x_2223 : vec2<f32> = (vec2<f32>(x_2221.x, x_2221.y) + vec2<f32>(1.0f, 1.0f));
        let x_2224 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2223.x, x_2223.y, x_2224.z, x_2224.w);
        let x_2226 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2226 + vec2<f32>(1.0f, 1.0f));
        let x_2228 : vec4<f32> = u_xlat9;
        let x_2230 : vec2<f32> = (vec2<f32>(x_2228.x, x_2228.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2231 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2230.x, x_2230.y, x_2231.z, x_2231.w);
        let x_2233 : vec2<f32> = u_xlat51;
        let x_2234 : vec2<f32> = (x_2233 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2235 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2234.x, x_2234.y, x_2235.z, x_2235.w);
        let x_2237 : vec4<f32> = u_xlat10;
        let x_2239 : vec2<f32> = (vec2<f32>(x_2237.x, x_2237.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2240 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2239.x, x_2239.y, x_2240.z, x_2240.w);
        let x_2242 : vec2<f32> = u_xlat49;
        let x_2243 : vec2<f32> = (x_2242 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2244 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2243.x, x_2243.y, x_2244.z, x_2244.w);
        let x_2246 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2246.y, x_2246.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2250 : f32 = u_xlat10.x;
        u_xlat11.z = x_2250;
        let x_2253 : f32 = u_xlat49.x;
        u_xlat11.w = x_2253;
        let x_2256 : f32 = u_xlat12.x;
        u_xlat9.z = x_2256;
        let x_2259 : f32 = u_xlat8.x;
        u_xlat9.w = x_2259;
        let x_2261 : vec4<f32> = u_xlat9;
        let x_2263 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2261.z, x_2261.w, x_2261.x, x_2261.z) + vec4<f32>(x_2263.z, x_2263.w, x_2263.x, x_2263.z));
        let x_2267 : f32 = u_xlat11.y;
        u_xlat10.z = x_2267;
        let x_2270 : f32 = u_xlat49.y;
        u_xlat10.w = x_2270;
        let x_2273 : f32 = u_xlat9.y;
        u_xlat12.z = x_2273;
        let x_2276 : f32 = u_xlat8.z;
        u_xlat12.w = x_2276;
        let x_2278 : vec4<f32> = u_xlat10;
        let x_2280 : vec4<f32> = u_xlat12;
        let x_2282 : vec3<f32> = (vec3<f32>(x_2278.z, x_2278.y, x_2278.w) + vec3<f32>(x_2280.z, x_2280.y, x_2280.w));
        let x_2283 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2282.x, x_2282.y, x_2282.z, x_2283.w);
        let x_2285 : vec4<f32> = u_xlat9;
        let x_2287 : vec4<f32> = u_xlat13;
        let x_2289 : vec3<f32> = (vec3<f32>(x_2285.x, x_2285.z, x_2285.w) / vec3<f32>(x_2287.z, x_2287.w, x_2287.y));
        let x_2290 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2289.x, x_2289.y, x_2289.z, x_2290.w);
        let x_2292 : vec4<f32> = u_xlat9;
        let x_2294 : vec3<f32> = (vec3<f32>(x_2292.x, x_2292.y, x_2292.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2295 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2294.x, x_2294.y, x_2294.z, x_2295.w);
        let x_2297 : vec4<f32> = u_xlat12;
        let x_2299 : vec4<f32> = u_xlat8;
        let x_2301 : vec3<f32> = (vec3<f32>(x_2297.z, x_2297.y, x_2297.w) / vec3<f32>(x_2299.x, x_2299.y, x_2299.z));
        let x_2302 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2301.x, x_2301.y, x_2301.z, x_2302.w);
        let x_2304 : vec4<f32> = u_xlat10;
        let x_2306 : vec3<f32> = (vec3<f32>(x_2304.x, x_2304.y, x_2304.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2307 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2306.x, x_2306.y, x_2306.z, x_2307.w);
        let x_2309 : vec4<f32> = u_xlat9;
        let x_2312 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2314 : vec3<f32> = (vec3<f32>(x_2309.y, x_2309.x, x_2309.z) * vec3<f32>(x_2312.x, x_2312.x, x_2312.x));
        let x_2315 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2314.x, x_2314.y, x_2314.z, x_2315.w);
        let x_2317 : vec4<f32> = u_xlat10;
        let x_2320 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2322 : vec3<f32> = (vec3<f32>(x_2317.x, x_2317.y, x_2317.z) * vec3<f32>(x_2320.y, x_2320.y, x_2320.y));
        let x_2323 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2322.x, x_2322.y, x_2322.z, x_2323.w);
        let x_2326 : f32 = u_xlat10.x;
        u_xlat9.w = x_2326;
        let x_2328 : vec4<f32> = u_xlat7;
        let x_2331 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2334 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2328.x, x_2328.y, x_2328.x, x_2328.y) * vec4<f32>(x_2331.x, x_2331.y, x_2331.x, x_2331.y)) + vec4<f32>(x_2334.y, x_2334.w, x_2334.x, x_2334.w));
        let x_2337 : vec4<f32> = u_xlat7;
        let x_2340 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2343 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2337.x, x_2337.y) * vec2<f32>(x_2340.x, x_2340.y)) + vec2<f32>(x_2343.z, x_2343.w));
        let x_2347 : f32 = u_xlat9.y;
        u_xlat10.w = x_2347;
        let x_2349 : vec4<f32> = u_xlat10;
        let x_2350 : vec2<f32> = vec2<f32>(x_2349.y, x_2349.z);
        let x_2351 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2351.x, x_2350.x, x_2351.z, x_2350.y);
        let x_2353 : vec4<f32> = u_xlat7;
        let x_2356 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2359 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2353.x, x_2353.y, x_2353.x, x_2353.y) * vec4<f32>(x_2356.x, x_2356.y, x_2356.x, x_2356.y)) + vec4<f32>(x_2359.x, x_2359.y, x_2359.z, x_2359.y));
        let x_2362 : vec4<f32> = u_xlat7;
        let x_2365 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2368 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2362.x, x_2362.y, x_2362.x, x_2362.y) * vec4<f32>(x_2365.x, x_2365.y, x_2365.x, x_2365.y)) + vec4<f32>(x_2368.w, x_2368.y, x_2368.w, x_2368.z));
        let x_2371 : vec4<f32> = u_xlat7;
        let x_2374 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2377 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2371.x, x_2371.y, x_2371.x, x_2371.y) * vec4<f32>(x_2374.x, x_2374.y, x_2374.x, x_2374.y)) + vec4<f32>(x_2377.x, x_2377.w, x_2377.z, x_2377.w));
        let x_2380 : vec4<f32> = u_xlat8;
        let x_2382 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2380.x, x_2380.x, x_2380.x, x_2380.y) * vec4<f32>(x_2382.z, x_2382.w, x_2382.y, x_2382.z));
        let x_2385 : vec4<f32> = u_xlat8;
        let x_2387 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2385.y, x_2385.y, x_2385.z, x_2385.z) * x_2387);
        let x_2390 : f32 = u_xlat8.z;
        let x_2392 : f32 = u_xlat13.y;
        u_xlat69 = (x_2390 * x_2392);
        let x_2395 : vec4<f32> = u_xlat11;
        let x_2396 : vec2<f32> = vec2<f32>(x_2395.x, x_2395.y);
        let x_2398 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2396.x, x_2396.y, x_2398);
        let x_2405 : vec3<f32> = txVec34;
        let x_2407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2405.xy, x_2405.z);
        u_xlat7.x = x_2407;
        let x_2410 : vec4<f32> = u_xlat11;
        let x_2411 : vec2<f32> = vec2<f32>(x_2410.z, x_2410.w);
        let x_2413 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2411.x, x_2411.y, x_2413);
        let x_2421 : vec3<f32> = txVec35;
        let x_2423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2421.xy, x_2421.z);
        u_xlat28 = x_2423;
        let x_2424 : f32 = u_xlat28;
        let x_2426 : f32 = u_xlat14.y;
        u_xlat28 = (x_2424 * x_2426);
        let x_2429 : f32 = u_xlat14.x;
        let x_2431 : f32 = u_xlat7.x;
        let x_2433 : f32 = u_xlat28;
        u_xlat7.x = ((x_2429 * x_2431) + x_2433);
        let x_2437 : vec2<f32> = u_xlat49;
        let x_2439 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2437.x, x_2437.y, x_2439);
        let x_2446 : vec3<f32> = txVec36;
        let x_2448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2446.xy, x_2446.z);
        u_xlat28 = x_2448;
        let x_2450 : f32 = u_xlat14.z;
        let x_2451 : f32 = u_xlat28;
        let x_2454 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2450 * x_2451) + x_2454);
        let x_2458 : vec4<f32> = u_xlat10;
        let x_2459 : vec2<f32> = vec2<f32>(x_2458.x, x_2458.y);
        let x_2461 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2459.x, x_2459.y, x_2461);
        let x_2468 : vec3<f32> = txVec37;
        let x_2470 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2468.xy, x_2468.z);
        u_xlat28 = x_2470;
        let x_2472 : f32 = u_xlat14.w;
        let x_2473 : f32 = u_xlat28;
        let x_2476 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2472 * x_2473) + x_2476);
        let x_2480 : vec4<f32> = u_xlat12;
        let x_2481 : vec2<f32> = vec2<f32>(x_2480.x, x_2480.y);
        let x_2483 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2481.x, x_2481.y, x_2483);
        let x_2490 : vec3<f32> = txVec38;
        let x_2492 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2490.xy, x_2490.z);
        u_xlat28 = x_2492;
        let x_2494 : f32 = u_xlat15.x;
        let x_2495 : f32 = u_xlat28;
        let x_2498 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2494 * x_2495) + x_2498);
        let x_2502 : vec4<f32> = u_xlat12;
        let x_2503 : vec2<f32> = vec2<f32>(x_2502.z, x_2502.w);
        let x_2505 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2503.x, x_2503.y, x_2505);
        let x_2512 : vec3<f32> = txVec39;
        let x_2514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2512.xy, x_2512.z);
        u_xlat28 = x_2514;
        let x_2516 : f32 = u_xlat15.y;
        let x_2517 : f32 = u_xlat28;
        let x_2520 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2516 * x_2517) + x_2520);
        let x_2524 : vec4<f32> = u_xlat10;
        let x_2525 : vec2<f32> = vec2<f32>(x_2524.z, x_2524.w);
        let x_2527 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2525.x, x_2525.y, x_2527);
        let x_2534 : vec3<f32> = txVec40;
        let x_2536 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2534.xy, x_2534.z);
        u_xlat28 = x_2536;
        let x_2538 : f32 = u_xlat15.z;
        let x_2539 : f32 = u_xlat28;
        let x_2542 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2538 * x_2539) + x_2542);
        let x_2546 : vec4<f32> = u_xlat9;
        let x_2547 : vec2<f32> = vec2<f32>(x_2546.x, x_2546.y);
        let x_2549 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2547.x, x_2547.y, x_2549);
        let x_2556 : vec3<f32> = txVec41;
        let x_2558 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2556.xy, x_2556.z);
        u_xlat28 = x_2558;
        let x_2560 : f32 = u_xlat15.w;
        let x_2561 : f32 = u_xlat28;
        let x_2564 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2560 * x_2561) + x_2564);
        let x_2568 : vec4<f32> = u_xlat9;
        let x_2569 : vec2<f32> = vec2<f32>(x_2568.z, x_2568.w);
        let x_2571 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2569.x, x_2569.y, x_2571);
        let x_2578 : vec3<f32> = txVec42;
        let x_2580 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2578.xy, x_2578.z);
        u_xlat28 = x_2580;
        let x_2581 : f32 = u_xlat69;
        let x_2582 : f32 = u_xlat28;
        let x_2585 : f32 = u_xlat7.x;
        u_xlat63 = ((x_2581 * x_2582) + x_2585);
      } else {
        let x_2588 : vec4<f32> = vs_INTERP9;
        let x_2591 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2594 : vec2<f32> = ((vec2<f32>(x_2588.x, x_2588.y) * vec2<f32>(x_2591.z, x_2591.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2595 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2594.x, x_2594.y, x_2595.z, x_2595.w);
        let x_2597 : vec4<f32> = u_xlat7;
        let x_2599 : vec2<f32> = floor(vec2<f32>(x_2597.x, x_2597.y));
        let x_2600 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2599.x, x_2599.y, x_2600.z, x_2600.w);
        let x_2602 : vec4<f32> = vs_INTERP9;
        let x_2605 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2608 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2602.x, x_2602.y) * vec2<f32>(x_2605.z, x_2605.w)) + -(vec2<f32>(x_2608.x, x_2608.y)));
        let x_2612 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2612.x, x_2612.x, x_2612.y, x_2612.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2615 : vec4<f32> = u_xlat8;
        let x_2617 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2615.x, x_2615.x, x_2615.z, x_2615.z) * vec4<f32>(x_2617.x, x_2617.x, x_2617.z, x_2617.z));
        let x_2620 : vec4<f32> = u_xlat9;
        let x_2622 : vec2<f32> = (vec2<f32>(x_2620.y, x_2620.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2623 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2623.x, x_2622.x, x_2623.z, x_2622.y);
        let x_2625 : vec4<f32> = u_xlat9;
        let x_2628 : vec2<f32> = u_xlat49;
        let x_2630 : vec2<f32> = ((vec2<f32>(x_2625.x, x_2625.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2628));
        let x_2631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2630.x, x_2631.y, x_2630.y, x_2631.w);
        let x_2633 : vec2<f32> = u_xlat49;
        let x_2635 : vec2<f32> = (-(x_2633) + vec2<f32>(1.0f, 1.0f));
        let x_2636 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2635.x, x_2635.y, x_2636.z, x_2636.w);
        let x_2638 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2638, vec2<f32>(0.0f, 0.0f));
        let x_2640 : vec2<f32> = u_xlat51;
        let x_2642 : vec2<f32> = u_xlat51;
        let x_2644 : vec4<f32> = u_xlat9;
        let x_2646 : vec2<f32> = ((-(x_2640) * x_2642) + vec2<f32>(x_2644.x, x_2644.y));
        let x_2647 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2646.x, x_2646.y, x_2647.z, x_2647.w);
        let x_2649 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2649, vec2<f32>(0.0f, 0.0f));
        let x_2651 : vec2<f32> = u_xlat51;
        let x_2653 : vec2<f32> = u_xlat51;
        let x_2655 : vec4<f32> = u_xlat8;
        let x_2657 : vec2<f32> = ((-(x_2651) * x_2653) + vec2<f32>(x_2655.y, x_2655.w));
        let x_2658 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2657.x, x_2658.y, x_2657.y);
        let x_2660 : vec4<f32> = u_xlat9;
        let x_2662 : vec2<f32> = (vec2<f32>(x_2660.x, x_2660.y) + vec2<f32>(2.0f, 2.0f));
        let x_2663 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2662.x, x_2662.y, x_2663.z, x_2663.w);
        let x_2665 : vec3<f32> = u_xlat29;
        let x_2667 : vec2<f32> = (vec2<f32>(x_2665.x, x_2665.z) + vec2<f32>(2.0f, 2.0f));
        let x_2668 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2668.x, x_2667.x, x_2668.z, x_2667.y);
        let x_2671 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2671 * 0.081632003f);
        let x_2674 : vec4<f32> = u_xlat8;
        let x_2676 : vec3<f32> = (vec3<f32>(x_2674.z, x_2674.x, x_2674.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2677 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2676.x, x_2676.y, x_2676.z, x_2677.w);
        let x_2679 : vec4<f32> = u_xlat9;
        let x_2681 : vec2<f32> = (vec2<f32>(x_2679.x, x_2679.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2682 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2681.x, x_2681.y, x_2682.z, x_2682.w);
        let x_2685 : f32 = u_xlat12.y;
        u_xlat11.x = x_2685;
        let x_2687 : vec2<f32> = u_xlat49;
        let x_2690 : vec2<f32> = ((vec2<f32>(x_2687.x, x_2687.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2691 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2691.x, x_2690.x, x_2691.z, x_2690.y);
        let x_2693 : vec2<f32> = u_xlat49;
        let x_2696 : vec2<f32> = ((vec2<f32>(x_2693.x, x_2693.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2697 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2696.x, x_2697.y, x_2696.y, x_2697.w);
        let x_2700 : f32 = u_xlat8.x;
        u_xlat9.y = x_2700;
        let x_2703 : f32 = u_xlat10.y;
        u_xlat9.w = x_2703;
        let x_2705 : vec4<f32> = u_xlat9;
        let x_2706 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2705 + x_2706);
        let x_2708 : vec2<f32> = u_xlat49;
        let x_2711 : vec2<f32> = ((vec2<f32>(x_2708.y, x_2708.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2712 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2712.x, x_2711.x, x_2712.z, x_2711.y);
        let x_2714 : vec2<f32> = u_xlat49;
        let x_2717 : vec2<f32> = ((vec2<f32>(x_2714.y, x_2714.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2718 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2717.x, x_2718.y, x_2717.y, x_2718.w);
        let x_2721 : f32 = u_xlat8.y;
        u_xlat10.y = x_2721;
        let x_2723 : vec4<f32> = u_xlat10;
        let x_2724 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2723 + x_2724);
        let x_2726 : vec4<f32> = u_xlat9;
        let x_2727 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2726 / x_2727);
        let x_2729 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2729 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2731 : vec4<f32> = u_xlat10;
        let x_2732 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2731 / x_2732);
        let x_2734 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2734 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2736 : vec4<f32> = u_xlat9;
        let x_2739 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2736.w, x_2736.x, x_2736.y, x_2736.z) * vec4<f32>(x_2739.x, x_2739.x, x_2739.x, x_2739.x));
        let x_2742 : vec4<f32> = u_xlat10;
        let x_2745 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2742.x, x_2742.w, x_2742.y, x_2742.z) * vec4<f32>(x_2745.y, x_2745.y, x_2745.y, x_2745.y));
        let x_2748 : vec4<f32> = u_xlat9;
        let x_2749 : vec3<f32> = vec3<f32>(x_2748.y, x_2748.z, x_2748.w);
        let x_2750 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2749.x, x_2750.y, x_2749.y, x_2749.z);
        let x_2753 : f32 = u_xlat10.x;
        u_xlat12.y = x_2753;
        let x_2755 : vec4<f32> = u_xlat7;
        let x_2758 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2761 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2755.x, x_2755.y, x_2755.x, x_2755.y) * vec4<f32>(x_2758.x, x_2758.y, x_2758.x, x_2758.y)) + vec4<f32>(x_2761.x, x_2761.y, x_2761.z, x_2761.y));
        let x_2764 : vec4<f32> = u_xlat7;
        let x_2767 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2770 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2764.x, x_2764.y) * vec2<f32>(x_2767.x, x_2767.y)) + vec2<f32>(x_2770.w, x_2770.y));
        let x_2774 : f32 = u_xlat12.y;
        u_xlat9.y = x_2774;
        let x_2777 : f32 = u_xlat10.z;
        u_xlat12.y = x_2777;
        let x_2779 : vec4<f32> = u_xlat7;
        let x_2782 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2785 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2779.x, x_2779.y, x_2779.x, x_2779.y) * vec4<f32>(x_2782.x, x_2782.y, x_2782.x, x_2782.y)) + vec4<f32>(x_2785.x, x_2785.y, x_2785.z, x_2785.y));
        let x_2788 : vec4<f32> = u_xlat7;
        let x_2791 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2794 : vec4<f32> = u_xlat12;
        let x_2796 : vec2<f32> = ((vec2<f32>(x_2788.x, x_2788.y) * vec2<f32>(x_2791.x, x_2791.y)) + vec2<f32>(x_2794.w, x_2794.y));
        let x_2797 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2796.x, x_2796.y, x_2797.z, x_2797.w);
        let x_2800 : f32 = u_xlat12.y;
        u_xlat9.z = x_2800;
        let x_2802 : vec4<f32> = u_xlat7;
        let x_2805 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2808 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2802.x, x_2802.y, x_2802.x, x_2802.y) * vec4<f32>(x_2805.x, x_2805.y, x_2805.x, x_2805.y)) + vec4<f32>(x_2808.x, x_2808.y, x_2808.x, x_2808.z));
        let x_2812 : f32 = u_xlat10.w;
        u_xlat12.y = x_2812;
        let x_2814 : vec4<f32> = u_xlat7;
        let x_2817 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2820 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2814.x, x_2814.y, x_2814.x, x_2814.y) * vec4<f32>(x_2817.x, x_2817.y, x_2817.x, x_2817.y)) + vec4<f32>(x_2820.x, x_2820.y, x_2820.z, x_2820.y));
        let x_2823 : vec4<f32> = u_xlat7;
        let x_2826 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2829 : vec4<f32> = u_xlat12;
        let x_2831 : vec2<f32> = ((vec2<f32>(x_2823.x, x_2823.y) * vec2<f32>(x_2826.x, x_2826.y)) + vec2<f32>(x_2829.w, x_2829.y));
        let x_2832 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2831.x, x_2831.y, x_2832.z);
        let x_2835 : f32 = u_xlat12.y;
        u_xlat9.w = x_2835;
        let x_2837 : vec4<f32> = u_xlat7;
        let x_2840 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2843 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2837.x, x_2837.y) * vec2<f32>(x_2840.x, x_2840.y)) + vec2<f32>(x_2843.x, x_2843.w));
        let x_2846 : vec4<f32> = u_xlat12;
        let x_2847 : vec3<f32> = vec3<f32>(x_2846.x, x_2846.z, x_2846.w);
        let x_2848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2847.x, x_2848.y, x_2847.y, x_2847.z);
        let x_2850 : vec4<f32> = u_xlat7;
        let x_2853 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2856 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2850.x, x_2850.y, x_2850.x, x_2850.y) * vec4<f32>(x_2853.x, x_2853.y, x_2853.x, x_2853.y)) + vec4<f32>(x_2856.x, x_2856.y, x_2856.z, x_2856.y));
        let x_2859 : vec4<f32> = u_xlat7;
        let x_2862 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2865 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2859.x, x_2859.y) * vec2<f32>(x_2862.x, x_2862.y)) + vec2<f32>(x_2865.w, x_2865.y));
        let x_2869 : f32 = u_xlat9.x;
        u_xlat10.x = x_2869;
        let x_2871 : vec4<f32> = u_xlat7;
        let x_2874 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2877 : vec4<f32> = u_xlat10;
        let x_2879 : vec2<f32> = ((vec2<f32>(x_2871.x, x_2871.y) * vec2<f32>(x_2874.x, x_2874.y)) + vec2<f32>(x_2877.x, x_2877.y));
        let x_2880 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2879.x, x_2879.y, x_2880.z, x_2880.w);
        let x_2882 : vec4<f32> = u_xlat8;
        let x_2884 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2882.x, x_2882.x, x_2882.x, x_2882.x) * x_2884);
        let x_2886 : vec4<f32> = u_xlat8;
        let x_2888 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2886.y, x_2886.y, x_2886.y, x_2886.y) * x_2888);
        let x_2890 : vec4<f32> = u_xlat8;
        let x_2892 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2890.z, x_2890.z, x_2890.z, x_2890.z) * x_2892);
        let x_2894 : vec4<f32> = u_xlat8;
        let x_2896 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2894.w, x_2894.w, x_2894.w, x_2894.w) * x_2896);
        let x_2899 : vec4<f32> = u_xlat13;
        let x_2900 : vec2<f32> = vec2<f32>(x_2899.x, x_2899.y);
        let x_2902 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2900.x, x_2900.y, x_2902);
        let x_2909 : vec3<f32> = txVec43;
        let x_2911 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2909.xy, x_2909.z);
        u_xlat69 = x_2911;
        let x_2913 : vec4<f32> = u_xlat13;
        let x_2914 : vec2<f32> = vec2<f32>(x_2913.z, x_2913.w);
        let x_2916 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2914.x, x_2914.y, x_2916);
        let x_2923 : vec3<f32> = txVec44;
        let x_2925 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2923.xy, x_2923.z);
        u_xlat9.x = x_2925;
        let x_2928 : f32 = u_xlat9.x;
        let x_2930 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2928 * x_2930);
        let x_2934 : f32 = u_xlat18.x;
        let x_2935 : f32 = u_xlat69;
        let x_2938 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2934 * x_2935) + x_2938);
        let x_2941 : vec2<f32> = u_xlat49;
        let x_2943 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2941.x, x_2941.y, x_2943);
        let x_2950 : vec3<f32> = txVec45;
        let x_2952 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2950.xy, x_2950.z);
        u_xlat49.x = x_2952;
        let x_2955 : f32 = u_xlat18.z;
        let x_2957 : f32 = u_xlat49.x;
        let x_2959 : f32 = u_xlat69;
        u_xlat69 = ((x_2955 * x_2957) + x_2959);
        let x_2962 : vec4<f32> = u_xlat16;
        let x_2963 : vec2<f32> = vec2<f32>(x_2962.x, x_2962.y);
        let x_2965 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2963.x, x_2963.y, x_2965);
        let x_2972 : vec3<f32> = txVec46;
        let x_2974 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2972.xy, x_2972.z);
        u_xlat49.x = x_2974;
        let x_2977 : f32 = u_xlat18.w;
        let x_2979 : f32 = u_xlat49.x;
        let x_2981 : f32 = u_xlat69;
        u_xlat69 = ((x_2977 * x_2979) + x_2981);
        let x_2984 : vec4<f32> = u_xlat14;
        let x_2985 : vec2<f32> = vec2<f32>(x_2984.x, x_2984.y);
        let x_2987 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2985.x, x_2985.y, x_2987);
        let x_2994 : vec3<f32> = txVec47;
        let x_2996 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2994.xy, x_2994.z);
        u_xlat49.x = x_2996;
        let x_2999 : f32 = u_xlat19.x;
        let x_3001 : f32 = u_xlat49.x;
        let x_3003 : f32 = u_xlat69;
        u_xlat69 = ((x_2999 * x_3001) + x_3003);
        let x_3006 : vec4<f32> = u_xlat14;
        let x_3007 : vec2<f32> = vec2<f32>(x_3006.z, x_3006.w);
        let x_3009 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3007.x, x_3007.y, x_3009);
        let x_3016 : vec3<f32> = txVec48;
        let x_3018 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3016.xy, x_3016.z);
        u_xlat49.x = x_3018;
        let x_3021 : f32 = u_xlat19.y;
        let x_3023 : f32 = u_xlat49.x;
        let x_3025 : f32 = u_xlat69;
        u_xlat69 = ((x_3021 * x_3023) + x_3025);
        let x_3028 : vec4<f32> = u_xlat15;
        let x_3029 : vec2<f32> = vec2<f32>(x_3028.x, x_3028.y);
        let x_3031 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3029.x, x_3029.y, x_3031);
        let x_3038 : vec3<f32> = txVec49;
        let x_3040 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3038.xy, x_3038.z);
        u_xlat49.x = x_3040;
        let x_3043 : f32 = u_xlat19.z;
        let x_3045 : f32 = u_xlat49.x;
        let x_3047 : f32 = u_xlat69;
        u_xlat69 = ((x_3043 * x_3045) + x_3047);
        let x_3050 : vec4<f32> = u_xlat16;
        let x_3051 : vec2<f32> = vec2<f32>(x_3050.z, x_3050.w);
        let x_3053 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3051.x, x_3051.y, x_3053);
        let x_3060 : vec3<f32> = txVec50;
        let x_3062 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3060.xy, x_3060.z);
        u_xlat49.x = x_3062;
        let x_3065 : f32 = u_xlat19.w;
        let x_3067 : f32 = u_xlat49.x;
        let x_3069 : f32 = u_xlat69;
        u_xlat69 = ((x_3065 * x_3067) + x_3069);
        let x_3072 : vec4<f32> = u_xlat17;
        let x_3073 : vec2<f32> = vec2<f32>(x_3072.x, x_3072.y);
        let x_3075 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3073.x, x_3073.y, x_3075);
        let x_3082 : vec3<f32> = txVec51;
        let x_3084 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3082.xy, x_3082.z);
        u_xlat49.x = x_3084;
        let x_3087 : f32 = u_xlat20.x;
        let x_3089 : f32 = u_xlat49.x;
        let x_3091 : f32 = u_xlat69;
        u_xlat69 = ((x_3087 * x_3089) + x_3091);
        let x_3094 : vec4<f32> = u_xlat17;
        let x_3095 : vec2<f32> = vec2<f32>(x_3094.z, x_3094.w);
        let x_3097 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3095.x, x_3095.y, x_3097);
        let x_3104 : vec3<f32> = txVec52;
        let x_3106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3104.xy, x_3104.z);
        u_xlat49.x = x_3106;
        let x_3109 : f32 = u_xlat20.y;
        let x_3111 : f32 = u_xlat49.x;
        let x_3113 : f32 = u_xlat69;
        u_xlat69 = ((x_3109 * x_3111) + x_3113);
        let x_3116 : vec3<f32> = u_xlat30;
        let x_3117 : vec2<f32> = vec2<f32>(x_3116.x, x_3116.y);
        let x_3119 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3117.x, x_3117.y, x_3119);
        let x_3126 : vec3<f32> = txVec53;
        let x_3128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3126.xy, x_3126.z);
        u_xlat49.x = x_3128;
        let x_3131 : f32 = u_xlat20.z;
        let x_3133 : f32 = u_xlat49.x;
        let x_3135 : f32 = u_xlat69;
        u_xlat69 = ((x_3131 * x_3133) + x_3135);
        let x_3138 : vec2<f32> = u_xlat57;
        let x_3140 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3138.x, x_3138.y, x_3140);
        let x_3147 : vec3<f32> = txVec54;
        let x_3149 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3147.xy, x_3147.z);
        u_xlat49.x = x_3149;
        let x_3152 : f32 = u_xlat20.w;
        let x_3154 : f32 = u_xlat49.x;
        let x_3156 : f32 = u_xlat69;
        u_xlat69 = ((x_3152 * x_3154) + x_3156);
        let x_3159 : vec4<f32> = u_xlat12;
        let x_3160 : vec2<f32> = vec2<f32>(x_3159.x, x_3159.y);
        let x_3162 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3160.x, x_3160.y, x_3162);
        let x_3169 : vec3<f32> = txVec55;
        let x_3171 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3169.xy, x_3169.z);
        u_xlat49.x = x_3171;
        let x_3174 : f32 = u_xlat8.x;
        let x_3176 : f32 = u_xlat49.x;
        let x_3178 : f32 = u_xlat69;
        u_xlat69 = ((x_3174 * x_3176) + x_3178);
        let x_3181 : vec4<f32> = u_xlat12;
        let x_3182 : vec2<f32> = vec2<f32>(x_3181.z, x_3181.w);
        let x_3184 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3182.x, x_3182.y, x_3184);
        let x_3191 : vec3<f32> = txVec56;
        let x_3193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3191.xy, x_3191.z);
        u_xlat49.x = x_3193;
        let x_3196 : f32 = u_xlat8.y;
        let x_3198 : f32 = u_xlat49.x;
        let x_3200 : f32 = u_xlat69;
        u_xlat69 = ((x_3196 * x_3198) + x_3200);
        let x_3203 : vec2<f32> = u_xlat52;
        let x_3205 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3203.x, x_3203.y, x_3205);
        let x_3212 : vec3<f32> = txVec57;
        let x_3214 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3212.xy, x_3212.z);
        u_xlat49.x = x_3214;
        let x_3217 : f32 = u_xlat8.z;
        let x_3219 : f32 = u_xlat49.x;
        let x_3221 : f32 = u_xlat69;
        u_xlat69 = ((x_3217 * x_3219) + x_3221);
        let x_3224 : vec4<f32> = u_xlat7;
        let x_3225 : vec2<f32> = vec2<f32>(x_3224.x, x_3224.y);
        let x_3227 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3225.x, x_3225.y, x_3227);
        let x_3234 : vec3<f32> = txVec58;
        let x_3236 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3234.xy, x_3234.z);
        u_xlat7.x = x_3236;
        let x_3239 : f32 = u_xlat8.w;
        let x_3241 : f32 = u_xlat7.x;
        let x_3243 : f32 = u_xlat69;
        u_xlat63 = ((x_3239 * x_3241) + x_3243);
      }
    }
  } else {
    let x_3247 : vec4<f32> = vs_INTERP9;
    let x_3248 : vec2<f32> = vec2<f32>(x_3247.x, x_3247.y);
    let x_3250 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3248.x, x_3248.y, x_3250);
    let x_3257 : vec3<f32> = txVec59;
    let x_3259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3257.xy, x_3257.z);
    u_xlat63 = x_3259;
  }
  let x_3260 : f32 = u_xlat63;
  let x_3262 : f32 = x_256.x_MainLightShadowParams.x;
  let x_3264 : f32 = u_xlat65;
  u_xlat63 = ((x_3260 * x_3262) + x_3264);
  let x_3267 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3267);
  let x_3270 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3270 >= 1.0f);
  let x_3272 : bool = u_xlatb65;
  let x_3273 : bool = u_xlatb69;
  u_xlatb65 = (x_3272 | x_3273);
  let x_3275 : bool = u_xlatb65;
  let x_3276 : f32 = u_xlat63;
  u_xlat63 = select(x_3276, 1.0f, x_3275);
  let x_3278 : vec3<f32> = vs_INTERP0;
  let x_3280 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3282 : vec3<f32> = (x_3278 + -(x_3280));
  let x_3283 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3282.x, x_3282.y, x_3282.z, x_3283.w);
  let x_3285 : vec4<f32> = u_xlat7;
  let x_3287 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3285.x, x_3285.y, x_3285.z), vec3<f32>(x_3287.x, x_3287.y, x_3287.z));
  let x_3290 : f32 = u_xlat65;
  let x_3292 : f32 = x_256.x_MainLightShadowParams.z;
  let x_3295 : f32 = x_256.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3290 * x_3292) + x_3295);
  let x_3297 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3297, 0.0f, 1.0f);
  let x_3299 : f32 = u_xlat63;
  u_xlat69 = (-(x_3299) + 1.0f);
  let x_3302 : f32 = u_xlat65;
  let x_3303 : f32 = u_xlat69;
  let x_3305 : f32 = u_xlat63;
  u_xlat63 = ((x_3302 * x_3303) + x_3305);
  let x_3307 : f32 = u_xlat48;
  let x_3310 : vec4<f32> = x_90.x_MainLightColor;
  let x_3312 : vec3<f32> = (vec3<f32>(x_3307, x_3307, x_3307) * vec3<f32>(x_3310.x, x_3310.y, x_3310.z));
  let x_3313 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3312.x, x_3312.y, x_3312.z, x_3313.w);
  let x_3315 : vec3<f32> = u_xlat1;
  let x_3317 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3315), vec3<f32>(x_3317.x, x_3317.y, x_3317.z));
  let x_3320 : f32 = u_xlat65;
  let x_3321 : f32 = u_xlat65;
  u_xlat65 = (x_3320 + x_3321);
  let x_3323 : vec4<f32> = u_xlat3;
  let x_3325 : f32 = u_xlat65;
  let x_3329 : vec3<f32> = u_xlat1;
  let x_3331 : vec3<f32> = ((vec3<f32>(x_3323.x, x_3323.y, x_3323.z) * -(vec3<f32>(x_3325, x_3325, x_3325))) + -(x_3329));
  let x_3332 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3331.x, x_3331.y, x_3331.z, x_3332.w);
  let x_3334 : vec4<f32> = u_xlat3;
  let x_3336 : vec3<f32> = u_xlat1;
  u_xlat65 = dot(vec3<f32>(x_3334.x, x_3334.y, x_3334.z), x_3336);
  let x_3338 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3338, 0.0f, 1.0f);
  let x_3340 : f32 = u_xlat65;
  u_xlat65 = (-(x_3340) + 1.0f);
  let x_3343 : f32 = u_xlat65;
  let x_3344 : f32 = u_xlat65;
  u_xlat65 = (x_3343 * x_3344);
  let x_3346 : f32 = u_xlat65;
  let x_3347 : f32 = u_xlat65;
  u_xlat65 = (x_3346 * x_3347);
  let x_3349 : f32 = u_xlat44;
  u_xlat69 = ((-(x_3349) * 0.699999988f) + 1.700000048f);
  let x_3355 : f32 = u_xlat44;
  let x_3356 : f32 = u_xlat69;
  u_xlat44 = (x_3355 * x_3356);
  let x_3358 : f32 = u_xlat44;
  u_xlat44 = (x_3358 * 6.0f);
  let x_3369 : vec4<f32> = u_xlat8;
  let x_3371 : f32 = u_xlat44;
  let x_3372 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3369.x, x_3369.y, x_3369.z), x_3371);
  u_xlat8 = x_3372;
  let x_3374 : f32 = u_xlat8.w;
  u_xlat44 = (x_3374 + -1.0f);
  let x_3377 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3378 : f32 = u_xlat44;
  u_xlat44 = ((x_3377 * x_3378) + 1.0f);
  let x_3381 : f32 = u_xlat44;
  u_xlat44 = max(x_3381, 0.0f);
  let x_3383 : f32 = u_xlat44;
  u_xlat44 = log2(x_3383);
  let x_3385 : f32 = u_xlat44;
  let x_3387 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat44 = (x_3385 * x_3387);
  let x_3389 : f32 = u_xlat44;
  u_xlat44 = exp2(x_3389);
  let x_3391 : f32 = u_xlat44;
  let x_3393 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat44 = (x_3391 * x_3393);
  let x_3395 : vec4<f32> = u_xlat8;
  let x_3397 : f32 = u_xlat44;
  let x_3399 : vec3<f32> = (vec3<f32>(x_3395.x, x_3395.y, x_3395.z) * vec3<f32>(x_3397, x_3397, x_3397));
  let x_3400 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3399.x, x_3399.y, x_3399.z, x_3400.w);
  let x_3402 : f32 = u_xlat66;
  let x_3404 : f32 = u_xlat66;
  let x_3408 : vec2<f32> = ((vec2<f32>(x_3402, x_3402) * vec2<f32>(x_3404, x_3404)) + vec2<f32>(-1.0f, 1.0f));
  let x_3409 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3408.x, x_3408.y, x_3409.z, x_3409.w);
  let x_3412 : f32 = u_xlat9.y;
  u_xlat44 = (1.0f / x_3412);
  let x_3415 : f32 = u_xlat5.x;
  u_xlat66 = (x_3415 + -0.039999999f);
  let x_3418 : f32 = u_xlat65;
  let x_3419 : f32 = u_xlat66;
  u_xlat65 = ((x_3418 * x_3419) + 0.039999999f);
  let x_3423 : f32 = u_xlat65;
  let x_3424 : f32 = u_xlat44;
  u_xlat44 = (x_3423 * x_3424);
  let x_3426 : f32 = u_xlat44;
  let x_3428 : vec4<f32> = u_xlat8;
  let x_3430 : vec3<f32> = (vec3<f32>(x_3426, x_3426, x_3426) * vec3<f32>(x_3428.x, x_3428.y, x_3428.z));
  let x_3431 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3430.x, x_3430.y, x_3430.z, x_3431.w);
  let x_3433 : vec3<f32> = u_xlat26;
  let x_3434 : vec3<f32> = u_xlat4;
  let x_3436 : vec4<f32> = u_xlat8;
  let x_3438 : vec3<f32> = ((x_3433 * x_3434) + vec3<f32>(x_3436.x, x_3436.y, x_3436.z));
  let x_3439 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3438.x, x_3438.y, x_3438.z, x_3439.w);
  let x_3441 : f32 = u_xlat63;
  let x_3443 : f32 = x_145.unity_LightData.z;
  u_xlat63 = (x_3441 * x_3443);
  let x_3445 : vec4<f32> = u_xlat3;
  let x_3448 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat44 = dot(vec3<f32>(x_3445.x, x_3445.y, x_3445.z), vec3<f32>(x_3448.x, x_3448.y, x_3448.z));
  let x_3451 : f32 = u_xlat44;
  u_xlat44 = clamp(x_3451, 0.0f, 1.0f);
  let x_3453 : f32 = u_xlat63;
  let x_3454 : f32 = u_xlat44;
  u_xlat63 = (x_3453 * x_3454);
  let x_3456 : f32 = u_xlat63;
  let x_3458 : vec4<f32> = u_xlat7;
  let x_3460 : vec3<f32> = (vec3<f32>(x_3456, x_3456, x_3456) * vec3<f32>(x_3458.x, x_3458.y, x_3458.z));
  let x_3461 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3460.x, x_3460.y, x_3460.z, x_3461.w);
  let x_3463 : vec3<f32> = u_xlat1;
  let x_3465 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3467 : vec3<f32> = (x_3463 + vec3<f32>(x_3465.x, x_3465.y, x_3465.z));
  let x_3468 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3467.x, x_3467.y, x_3467.z, x_3468.w);
  let x_3470 : vec4<f32> = u_xlat8;
  let x_3472 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3470.x, x_3470.y, x_3470.z), vec3<f32>(x_3472.x, x_3472.y, x_3472.z));
  let x_3475 : f32 = u_xlat63;
  u_xlat63 = max(x_3475, 1.17549435e-37f);
  let x_3478 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3478);
  let x_3480 : f32 = u_xlat63;
  let x_3482 : vec4<f32> = u_xlat8;
  let x_3484 : vec3<f32> = (vec3<f32>(x_3480, x_3480, x_3480) * vec3<f32>(x_3482.x, x_3482.y, x_3482.z));
  let x_3485 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3484.x, x_3484.y, x_3484.z, x_3485.w);
  let x_3487 : vec4<f32> = u_xlat3;
  let x_3489 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3487.x, x_3487.y, x_3487.z), vec3<f32>(x_3489.x, x_3489.y, x_3489.z));
  let x_3492 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3492, 0.0f, 1.0f);
  let x_3495 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3497 : vec4<f32> = u_xlat8;
  u_xlat44 = dot(vec3<f32>(x_3495.x, x_3495.y, x_3495.z), vec3<f32>(x_3497.x, x_3497.y, x_3497.z));
  let x_3500 : f32 = u_xlat44;
  u_xlat44 = clamp(x_3500, 0.0f, 1.0f);
  let x_3502 : f32 = u_xlat63;
  let x_3503 : f32 = u_xlat63;
  u_xlat63 = (x_3502 * x_3503);
  let x_3505 : f32 = u_xlat63;
  let x_3507 : f32 = u_xlat9.x;
  u_xlat63 = ((x_3505 * x_3507) + 1.000010014f);
  let x_3511 : f32 = u_xlat44;
  let x_3512 : f32 = u_xlat44;
  u_xlat44 = (x_3511 * x_3512);
  let x_3514 : f32 = u_xlat63;
  let x_3515 : f32 = u_xlat63;
  u_xlat63 = (x_3514 * x_3515);
  let x_3517 : f32 = u_xlat44;
  u_xlat44 = max(x_3517, 0.100000001f);
  let x_3520 : f32 = u_xlat63;
  let x_3521 : f32 = u_xlat44;
  u_xlat63 = (x_3520 * x_3521);
  let x_3523 : f32 = u_xlat27;
  let x_3524 : f32 = u_xlat63;
  u_xlat63 = (x_3523 * x_3524);
  let x_3526 : f32 = u_xlat67;
  let x_3527 : f32 = u_xlat63;
  u_xlat63 = (x_3526 / x_3527);
  let x_3529 : f32 = u_xlat63;
  let x_3533 : vec3<f32> = u_xlat4;
  let x_3534 : vec3<f32> = ((vec3<f32>(x_3529, x_3529, x_3529) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3533);
  let x_3535 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3534.x, x_3534.y, x_3534.z, x_3535.w);
  let x_3537 : vec4<f32> = u_xlat7;
  let x_3539 : vec4<f32> = u_xlat8;
  let x_3541 : vec3<f32> = (vec3<f32>(x_3537.x, x_3537.y, x_3537.z) * vec3<f32>(x_3539.x, x_3539.y, x_3539.z));
  let x_3542 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3541.x, x_3541.y, x_3541.z, x_3542.w);
  let x_3545 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3547 : f32 = x_145.unity_LightData.y;
  u_xlat63 = min(x_3545, x_3547);
  let x_3550 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3550));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3562 : u32 = u_xlatu_loop_1;
    let x_3563 : u32 = u_xlatu63;
    if ((x_3562 < x_3563)) {
    } else {
      break;
    }
    let x_3566 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3566 >> 2u);
    let x_3569 : u32 = u_xlatu_loop_1;
    u_xlati66 = bitcast<i32>((x_3569 & 3u));
    let x_3572 : u32 = u_xlatu65;
    let x_3575 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3572)];
    let x_3585 : i32 = u_xlati66;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3590 : vec4<u32> = indexable[x_3585];
    u_xlat65 = dot(x_3575, bitcast<vec4<f32>>(x_3590));
    let x_3594 : f32 = u_xlat65;
    u_xlati65 = i32(x_3594);
    let x_3596 : vec3<f32> = vs_INTERP0;
    let x_3608 : i32 = u_xlati65;
    let x_3610 : vec4<f32> = x_3607.x_AdditionalLightsPosition[x_3608];
    let x_3613 : i32 = u_xlati65;
    let x_3615 : vec4<f32> = x_3607.x_AdditionalLightsPosition[x_3613];
    u_xlat30 = ((-(x_3596) * vec3<f32>(x_3610.w, x_3610.w, x_3610.w)) + vec3<f32>(x_3615.x, x_3615.y, x_3615.z));
    let x_3618 : vec3<f32> = u_xlat30;
    let x_3619 : vec3<f32> = u_xlat30;
    u_xlat66 = dot(x_3618, x_3619);
    let x_3621 : f32 = u_xlat66;
    u_xlat66 = max(x_3621, 6.10351562e-05f);
    let x_3625 : f32 = u_xlat66;
    u_xlat68 = inverseSqrt(x_3625);
    let x_3627 : f32 = u_xlat68;
    let x_3629 : vec3<f32> = u_xlat30;
    let x_3630 : vec3<f32> = (vec3<f32>(x_3627, x_3627, x_3627) * x_3629);
    let x_3631 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3630.x, x_3630.y, x_3630.z, x_3631.w);
    let x_3633 : f32 = u_xlat66;
    u_xlat69 = (1.0f / x_3633);
    let x_3635 : f32 = u_xlat66;
    let x_3636 : i32 = u_xlati65;
    let x_3638 : f32 = x_3607.x_AdditionalLightsAttenuation[x_3636].x;
    u_xlat66 = (x_3635 * x_3638);
    let x_3640 : f32 = u_xlat66;
    let x_3642 : f32 = u_xlat66;
    u_xlat66 = ((-(x_3640) * x_3642) + 1.0f);
    let x_3645 : f32 = u_xlat66;
    u_xlat66 = max(x_3645, 0.0f);
    let x_3647 : f32 = u_xlat66;
    let x_3648 : f32 = u_xlat66;
    u_xlat66 = (x_3647 * x_3648);
    let x_3650 : f32 = u_xlat66;
    let x_3651 : f32 = u_xlat69;
    u_xlat66 = (x_3650 * x_3651);
    let x_3653 : i32 = u_xlati65;
    let x_3655 : vec4<f32> = x_3607.x_AdditionalLightsSpotDir[x_3653];
    let x_3657 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3655.x, x_3655.y, x_3655.z), vec3<f32>(x_3657.x, x_3657.y, x_3657.z));
    let x_3660 : f32 = u_xlat69;
    let x_3661 : i32 = u_xlati65;
    let x_3663 : f32 = x_3607.x_AdditionalLightsAttenuation[x_3661].z;
    let x_3665 : i32 = u_xlati65;
    let x_3667 : f32 = x_3607.x_AdditionalLightsAttenuation[x_3665].w;
    u_xlat69 = ((x_3660 * x_3663) + x_3667);
    let x_3669 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3669, 0.0f, 1.0f);
    let x_3671 : f32 = u_xlat69;
    let x_3672 : f32 = u_xlat69;
    u_xlat69 = (x_3671 * x_3672);
    let x_3674 : f32 = u_xlat66;
    let x_3675 : f32 = u_xlat69;
    u_xlat66 = (x_3674 * x_3675);
    let x_3677 : f32 = u_xlat48;
    let x_3679 : i32 = u_xlati65;
    let x_3681 : vec4<f32> = x_3607.x_AdditionalLightsColor[x_3679];
    let x_3683 : vec3<f32> = (vec3<f32>(x_3677, x_3677, x_3677) * vec3<f32>(x_3681.x, x_3681.y, x_3681.z));
    let x_3684 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3683.x, x_3683.y, x_3683.z, x_3684.w);
    let x_3686 : vec4<f32> = u_xlat3;
    let x_3688 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_3686.x, x_3686.y, x_3686.z), vec3<f32>(x_3688.x, x_3688.y, x_3688.z));
    let x_3691 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3691, 0.0f, 1.0f);
    let x_3693 : f32 = u_xlat65;
    let x_3694 : f32 = u_xlat66;
    u_xlat65 = (x_3693 * x_3694);
    let x_3696 : f32 = u_xlat65;
    let x_3698 : vec4<f32> = u_xlat11;
    let x_3700 : vec3<f32> = (vec3<f32>(x_3696, x_3696, x_3696) * vec3<f32>(x_3698.x, x_3698.y, x_3698.z));
    let x_3701 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3700.x, x_3700.y, x_3700.z, x_3701.w);
    let x_3703 : vec3<f32> = u_xlat30;
    let x_3704 : f32 = u_xlat68;
    let x_3707 : vec3<f32> = u_xlat1;
    u_xlat30 = ((x_3703 * vec3<f32>(x_3704, x_3704, x_3704)) + x_3707);
    let x_3709 : vec3<f32> = u_xlat30;
    let x_3710 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(x_3709, x_3710);
    let x_3712 : f32 = u_xlat65;
    u_xlat65 = max(x_3712, 1.17549435e-37f);
    let x_3714 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3714);
    let x_3716 : f32 = u_xlat65;
    let x_3718 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_3716, x_3716, x_3716) * x_3718);
    let x_3720 : vec4<f32> = u_xlat3;
    let x_3722 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(vec3<f32>(x_3720.x, x_3720.y, x_3720.z), x_3722);
    let x_3724 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3724, 0.0f, 1.0f);
    let x_3726 : vec4<f32> = u_xlat10;
    let x_3728 : vec3<f32> = u_xlat30;
    u_xlat66 = dot(vec3<f32>(x_3726.x, x_3726.y, x_3726.z), x_3728);
    let x_3730 : f32 = u_xlat66;
    u_xlat66 = clamp(x_3730, 0.0f, 1.0f);
    let x_3732 : f32 = u_xlat65;
    let x_3733 : f32 = u_xlat65;
    u_xlat65 = (x_3732 * x_3733);
    let x_3735 : f32 = u_xlat65;
    let x_3737 : f32 = u_xlat9.x;
    u_xlat65 = ((x_3735 * x_3737) + 1.000010014f);
    let x_3740 : f32 = u_xlat66;
    let x_3741 : f32 = u_xlat66;
    u_xlat66 = (x_3740 * x_3741);
    let x_3743 : f32 = u_xlat65;
    let x_3744 : f32 = u_xlat65;
    u_xlat65 = (x_3743 * x_3744);
    let x_3746 : f32 = u_xlat66;
    u_xlat66 = max(x_3746, 0.100000001f);
    let x_3748 : f32 = u_xlat65;
    let x_3749 : f32 = u_xlat66;
    u_xlat65 = (x_3748 * x_3749);
    let x_3751 : f32 = u_xlat27;
    let x_3752 : f32 = u_xlat65;
    u_xlat65 = (x_3751 * x_3752);
    let x_3754 : f32 = u_xlat67;
    let x_3755 : f32 = u_xlat65;
    u_xlat65 = (x_3754 / x_3755);
    let x_3757 : f32 = u_xlat65;
    let x_3760 : vec3<f32> = u_xlat4;
    u_xlat30 = ((vec3<f32>(x_3757, x_3757, x_3757) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3760);
    let x_3762 : vec3<f32> = u_xlat30;
    let x_3763 : vec4<f32> = u_xlat11;
    let x_3766 : vec4<f32> = u_xlat8;
    let x_3768 : vec3<f32> = ((x_3762 * vec3<f32>(x_3763.x, x_3763.y, x_3763.z)) + vec3<f32>(x_3766.x, x_3766.y, x_3766.z));
    let x_3769 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3768.x, x_3768.y, x_3768.z, x_3769.w);

    continuing {
      let x_3771 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3771 + bitcast<u32>(1i));
    }
  }
  let x_3773 : vec4<f32> = u_xlat5;
  let x_3775 : vec4<f32> = u_xlat6;
  let x_3778 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec3<f32>(x_3773.x, x_3773.y, x_3773.z) * vec3<f32>(x_3775.x, x_3775.x, x_3775.x)) + vec3<f32>(x_3778.x, x_3778.y, x_3778.z));
  let x_3781 : vec4<f32> = u_xlat8;
  let x_3783 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_3781.x, x_3781.y, x_3781.z) + x_3783);
  let x_3785 : vec4<f32> = vs_INTERP4;
  let x_3787 : vec3<f32> = u_xlat0;
  let x_3789 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_3785.w, x_3785.w, x_3785.w) * x_3787) + x_3789);
  let x_3792 : f32 = u_xlat23.x;
  let x_3794 : f32 = u_xlat23.x;
  u_xlat63 = (x_3792 * -(x_3794));
  let x_3797 : f32 = u_xlat63;
  u_xlat63 = exp2(x_3797);
  let x_3799 : vec3<f32> = u_xlat0;
  let x_3802 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_3799 + -(vec3<f32>(x_3802.x, x_3802.y, x_3802.z)));
  let x_3808 : f32 = u_xlat63;
  let x_3810 : vec3<f32> = u_xlat0;
  let x_3813 : vec4<f32> = x_90.unity_FogColor;
  let x_3815 : vec3<f32> = ((vec3<f32>(x_3808, x_3808, x_3808) * x_3810) + vec3<f32>(x_3813.x, x_3813.y, x_3813.z));
  let x_3816 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3815.x, x_3815.y, x_3815.z, x_3816.w);
  let x_3818 : bool = u_xlatb2;
  let x_3819 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_3819, x_3818);
  let x_3826 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_3828 : f32 = x_145.unity_RenderingLayer.x;
  u_xlatu0 = (x_3826 & bitcast<u32>(x_3828));
  let x_3831 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3831);
  let x_3836 : f32 = u_xlat0.x;
  let x_3838 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3836 * x_3838);
  let x_3842 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3842, 0.0f, 1.0f);
  let x_3846 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3846.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

