struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3334 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3770 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3898 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1851 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3419 : f32;
  var x_3430 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlatu71 : u32;
  var u_xlati73 : i32;
  var u_xlati71 : i32;
  var u_xlati52 : i32;
  var u_xlatb71 : bool;
  var u_xlat56 : vec2<f32>;
  var u_xlatb52 : vec2<bool>;
  var x_4191 : f32;
  var x_4204 : f32;
  var x_4256 : f32;
  var x_4267 : vec3<f32>;
  var x_4452 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  let x_1816 : vec3<f32> = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1817 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1816.x, x_1816.y, x_1816.z, x_1817.w);
  let x_1821 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1821 == 0.0f);
  let x_1824 : vec3<f32> = vs_INTERP0;
  let x_1828 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1824) + x_1828);
  let x_1830 : vec3<f32> = u_xlat25;
  let x_1831 : vec3<f32> = u_xlat25;
  u_xlat67 = dot(x_1830, x_1831);
  let x_1833 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1833);
  let x_1835 : f32 = u_xlat67;
  let x_1837 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1835, x_1835, x_1835) * x_1837);
  let x_1841 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat7.x = x_1841;
  let x_1844 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat7.y = x_1844;
  let x_1847 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat7.z = x_1847;
  let x_1850 : bool = u_xlatb23.x;
  if (x_1850) {
    let x_1854 : vec3<f32> = u_xlat25;
    x_1851 = x_1854;
  } else {
    let x_1856 : vec4<f32> = u_xlat7;
    x_1851 = vec3<f32>(x_1856.x, x_1856.y, x_1856.z);
  }
  let x_1858 : vec3<f32> = x_1851;
  u_xlat25 = x_1858;
  let x_1860 : f32 = vs_INTERP0.y;
  let x_1862 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1860 * x_1862);
  let x_1866 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1868 : f32 = vs_INTERP0.x;
  let x_1871 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1866 * x_1868) + x_1871);
  let x_1875 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1877 : f32 = vs_INTERP0.z;
  let x_1880 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1875 * x_1877) + x_1880);
  let x_1884 : f32 = u_xlat23.x;
  let x_1886 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1884 + x_1886);
  let x_1890 : f32 = u_xlat23.x;
  let x_1894 : f32 = x_66.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1890) + -(x_1894));
  let x_1899 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1899, 0.0f);
  let x_1903 : f32 = u_xlat23.x;
  let x_1906 : f32 = x_66.unity_FogParams.x;
  u_xlat23.x = (x_1903 * x_1906);
  u_xlat6.w = 1.0f;
  let x_1912 : vec4<f32> = x_1752.unity_SHAr;
  let x_1913 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_1912, x_1913);
  let x_1918 : vec4<f32> = x_1752.unity_SHAg;
  let x_1919 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_1918, x_1919);
  let x_1924 : vec4<f32> = x_1752.unity_SHAb;
  let x_1925 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_1924, x_1925);
  let x_1928 : vec4<f32> = u_xlat6;
  let x_1930 : vec4<f32> = u_xlat6;
  u_xlat8 = (vec4<f32>(x_1928.y, x_1928.z, x_1928.z, x_1928.x) * vec4<f32>(x_1930.x, x_1930.y, x_1930.z, x_1930.z));
  let x_1935 : vec4<f32> = x_1752.unity_SHBr;
  let x_1936 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_1935, x_1936);
  let x_1941 : vec4<f32> = x_1752.unity_SHBg;
  let x_1942 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_1941, x_1942);
  let x_1947 : vec4<f32> = x_1752.unity_SHBb;
  let x_1948 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_1947, x_1948);
  let x_1952 : f32 = u_xlat6.y;
  let x_1954 : f32 = u_xlat6.y;
  u_xlat67 = (x_1952 * x_1954);
  let x_1957 : f32 = u_xlat6.x;
  let x_1959 : f32 = u_xlat6.x;
  let x_1961 : f32 = u_xlat67;
  u_xlat67 = ((x_1957 * x_1959) + -(x_1961));
  let x_1966 : vec4<f32> = x_1752.unity_SHC;
  let x_1968 : f32 = u_xlat67;
  let x_1971 : vec4<f32> = u_xlat9;
  u_xlat27 = ((vec3<f32>(x_1966.x, x_1966.y, x_1966.z) * vec3<f32>(x_1968, x_1968, x_1968)) + vec3<f32>(x_1971.x, x_1971.y, x_1971.z));
  let x_1974 : vec3<f32> = u_xlat27;
  let x_1975 : vec4<f32> = u_xlat7;
  u_xlat27 = (x_1974 + vec3<f32>(x_1975.x, x_1975.y, x_1975.z));
  let x_1978 : vec3<f32> = u_xlat27;
  u_xlat27 = max(x_1978, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1981 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1982 : vec2<f32> = vec2<f32>(x_1981.x, x_1981.y);
  let x_1986 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1982.x, x_1982.y));
  let x_1987 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1986.x, x_1986.y, x_1987.z, x_1987.w);
  let x_1989 : vec4<f32> = u_xlat7;
  let x_1991 : vec4<f32> = hlslcc_FragCoord;
  let x_1993 : vec2<f32> = (vec2<f32>(x_1989.x, x_1989.y) * vec2<f32>(x_1991.x, x_1991.y));
  let x_1994 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1993.x, x_1993.y, x_1994.z, x_1994.w);
  let x_1997 : f32 = u_xlat7.y;
  let x_2000 : f32 = x_66.x_ScaleBiasRt.x;
  let x_2003 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat67 = ((x_1997 * x_2000) + x_2003);
  let x_2005 : f32 = u_xlat67;
  u_xlat7.z = (-(x_2005) + 1.0f);
  let x_2010 : f32 = u_xlat3.x;
  u_xlat3.x = x_2010;
  let x_2013 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_2013, 0.0f, 1.0f);
  let x_2017 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_2017, 1.0f);
  let x_2020 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_2020 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2025 : f32 = u_xlat3.x;
  u_xlat67 = (-(x_2025) + 1.0f);
  let x_2028 : f32 = u_xlat67;
  let x_2029 : f32 = u_xlat67;
  u_xlat68 = (x_2028 * x_2029);
  let x_2031 : f32 = u_xlat68;
  u_xlat68 = max(x_2031, 0.0078125f);
  let x_2035 : f32 = u_xlat68;
  let x_2036 : f32 = u_xlat68;
  u_xlat72 = (x_2035 * x_2036);
  let x_2039 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2039 + 0.040000021f);
  let x_2044 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_2044, 1.0f);
  let x_2047 : f32 = u_xlat68;
  u_xlat29.x = ((x_2047 * 4.0f) + 2.0f);
  let x_2056 : vec4<f32> = u_xlat7;
  let x_2059 : f32 = x_66.x_GlobalMipBias.x;
  let x_2060 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2056.x, x_2056.z), x_2059);
  u_xlat7.x = x_2060.x;
  let x_2064 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2064 + -1.0f);
  let x_2068 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2070 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2068 * x_2070) + 1.0f);
  let x_2075 : f32 = u_xlat7.x;
  let x_2077 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2075, x_2077);
  let x_2080 : bool = u_xlatb66;
  if (x_2080) {
    let x_2084 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2084 == 1.0f);
    let x_2086 : bool = u_xlatb66;
    if (x_2086) {
      let x_2089 : vec4<f32> = u_xlat4;
      let x_2092 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2089.x, x_2089.y, x_2089.x, x_2089.y) + x_2092);
      let x_2095 : vec4<f32> = u_xlat8;
      let x_2096 : vec2<f32> = vec2<f32>(x_2095.x, x_2095.y);
      let x_2098 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2096.x, x_2096.y, x_2098);
      let x_2105 : vec3<f32> = txVec30;
      let x_2107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2105.xy, x_2105.z);
      u_xlat9.x = x_2107;
      let x_2110 : vec4<f32> = u_xlat8;
      let x_2111 : vec2<f32> = vec2<f32>(x_2110.z, x_2110.w);
      let x_2113 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2111.x, x_2111.y, x_2113);
      let x_2120 : vec3<f32> = txVec31;
      let x_2122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2120.xy, x_2120.z);
      u_xlat9.y = x_2122;
      let x_2124 : vec4<f32> = u_xlat4;
      let x_2127 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2124.x, x_2124.y, x_2124.x, x_2124.y) + x_2127);
      let x_2130 : vec4<f32> = u_xlat8;
      let x_2131 : vec2<f32> = vec2<f32>(x_2130.x, x_2130.y);
      let x_2133 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2131.x, x_2131.y, x_2133);
      let x_2140 : vec3<f32> = txVec32;
      let x_2142 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2140.xy, x_2140.z);
      u_xlat9.z = x_2142;
      let x_2145 : vec4<f32> = u_xlat8;
      let x_2146 : vec2<f32> = vec2<f32>(x_2145.z, x_2145.w);
      let x_2148 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2146.x, x_2146.y, x_2148);
      let x_2155 : vec3<f32> = txVec33;
      let x_2157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2155.xy, x_2155.z);
      u_xlat9.w = x_2157;
      let x_2159 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2159, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2164 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2164 == 2.0f);
      let x_2166 : bool = u_xlatb73;
      if (x_2166) {
        let x_2169 : vec4<f32> = u_xlat4;
        let x_2172 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2175 : vec2<f32> = ((vec2<f32>(x_2169.x, x_2169.y) * vec2<f32>(x_2172.z, x_2172.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2176 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2175.x, x_2175.y, x_2176.z, x_2176.w);
        let x_2178 : vec4<f32> = u_xlat8;
        let x_2180 : vec2<f32> = floor(vec2<f32>(x_2178.x, x_2178.y));
        let x_2181 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2180.x, x_2180.y, x_2181.z, x_2181.w);
        let x_2183 : vec4<f32> = u_xlat4;
        let x_2186 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2189 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2183.x, x_2183.y) * vec2<f32>(x_2186.z, x_2186.w)) + -(vec2<f32>(x_2189.x, x_2189.y)));
        let x_2193 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2193.x, x_2193.x, x_2193.y, x_2193.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2196 : vec4<f32> = u_xlat9;
        let x_2198 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2196.x, x_2196.x, x_2196.z, x_2196.z) * vec4<f32>(x_2198.x, x_2198.x, x_2198.z, x_2198.z));
        let x_2201 : vec4<f32> = u_xlat10;
        let x_2203 : vec2<f32> = (vec2<f32>(x_2201.y, x_2201.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2204 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2203.x, x_2204.y, x_2203.y, x_2204.w);
        let x_2206 : vec4<f32> = u_xlat10;
        let x_2209 : vec2<f32> = u_xlat52;
        let x_2211 : vec2<f32> = ((vec2<f32>(x_2206.x, x_2206.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2209));
        let x_2212 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2211.x, x_2211.y, x_2212.z, x_2212.w);
        let x_2215 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2215) + vec2<f32>(1.0f, 1.0f));
        let x_2218 : vec2<f32> = u_xlat52;
        let x_2219 : vec2<f32> = min(x_2218, vec2<f32>(0.0f, 0.0f));
        let x_2220 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2219.x, x_2219.y, x_2220.z, x_2220.w);
        let x_2222 : vec4<f32> = u_xlat11;
        let x_2225 : vec4<f32> = u_xlat11;
        let x_2228 : vec2<f32> = u_xlat54;
        let x_2229 : vec2<f32> = ((-(vec2<f32>(x_2222.x, x_2222.y)) * vec2<f32>(x_2225.x, x_2225.y)) + x_2228);
        let x_2230 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2229.x, x_2229.y, x_2230.z, x_2230.w);
        let x_2232 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2232, vec2<f32>(0.0f, 0.0f));
        let x_2234 : vec2<f32> = u_xlat52;
        let x_2236 : vec2<f32> = u_xlat52;
        let x_2238 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2234) * x_2236) + vec2<f32>(x_2238.y, x_2238.w));
        let x_2241 : vec4<f32> = u_xlat11;
        let x_2243 : vec2<f32> = (vec2<f32>(x_2241.x, x_2241.y) + vec2<f32>(1.0f, 1.0f));
        let x_2244 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2243.x, x_2243.y, x_2244.z, x_2244.w);
        let x_2246 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2246 + vec2<f32>(1.0f, 1.0f));
        let x_2248 : vec4<f32> = u_xlat10;
        let x_2250 : vec2<f32> = (vec2<f32>(x_2248.x, x_2248.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2251 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2250.x, x_2250.y, x_2251.z, x_2251.w);
        let x_2253 : vec2<f32> = u_xlat54;
        let x_2254 : vec2<f32> = (x_2253 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2255 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2254.x, x_2254.y, x_2255.z, x_2255.w);
        let x_2257 : vec4<f32> = u_xlat11;
        let x_2259 : vec2<f32> = (vec2<f32>(x_2257.x, x_2257.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2260 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2259.x, x_2259.y, x_2260.z, x_2260.w);
        let x_2262 : vec2<f32> = u_xlat52;
        let x_2263 : vec2<f32> = (x_2262 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2264 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2263.x, x_2263.y, x_2264.z, x_2264.w);
        let x_2266 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2266.y, x_2266.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2270 : f32 = u_xlat11.x;
        u_xlat12.z = x_2270;
        let x_2273 : f32 = u_xlat52.x;
        u_xlat12.w = x_2273;
        let x_2276 : f32 = u_xlat13.x;
        u_xlat10.z = x_2276;
        let x_2279 : f32 = u_xlat9.x;
        u_xlat10.w = x_2279;
        let x_2281 : vec4<f32> = u_xlat10;
        let x_2283 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2281.z, x_2281.w, x_2281.x, x_2281.z) + vec4<f32>(x_2283.z, x_2283.w, x_2283.x, x_2283.z));
        let x_2287 : f32 = u_xlat12.y;
        u_xlat11.z = x_2287;
        let x_2290 : f32 = u_xlat52.y;
        u_xlat11.w = x_2290;
        let x_2293 : f32 = u_xlat10.y;
        u_xlat13.z = x_2293;
        let x_2296 : f32 = u_xlat9.z;
        u_xlat13.w = x_2296;
        let x_2298 : vec4<f32> = u_xlat11;
        let x_2300 : vec4<f32> = u_xlat13;
        let x_2302 : vec3<f32> = (vec3<f32>(x_2298.z, x_2298.y, x_2298.w) + vec3<f32>(x_2300.z, x_2300.y, x_2300.w));
        let x_2303 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2302.x, x_2302.y, x_2302.z, x_2303.w);
        let x_2305 : vec4<f32> = u_xlat10;
        let x_2307 : vec4<f32> = u_xlat14;
        let x_2309 : vec3<f32> = (vec3<f32>(x_2305.x, x_2305.z, x_2305.w) / vec3<f32>(x_2307.z, x_2307.w, x_2307.y));
        let x_2310 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2309.x, x_2309.y, x_2309.z, x_2310.w);
        let x_2312 : vec4<f32> = u_xlat10;
        let x_2314 : vec3<f32> = (vec3<f32>(x_2312.x, x_2312.y, x_2312.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2315 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2314.x, x_2314.y, x_2314.z, x_2315.w);
        let x_2317 : vec4<f32> = u_xlat13;
        let x_2319 : vec4<f32> = u_xlat9;
        let x_2321 : vec3<f32> = (vec3<f32>(x_2317.z, x_2317.y, x_2317.w) / vec3<f32>(x_2319.x, x_2319.y, x_2319.z));
        let x_2322 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2321.x, x_2321.y, x_2321.z, x_2322.w);
        let x_2324 : vec4<f32> = u_xlat11;
        let x_2326 : vec3<f32> = (vec3<f32>(x_2324.x, x_2324.y, x_2324.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2327 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2326.x, x_2326.y, x_2326.z, x_2327.w);
        let x_2329 : vec4<f32> = u_xlat10;
        let x_2332 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2334 : vec3<f32> = (vec3<f32>(x_2329.y, x_2329.x, x_2329.z) * vec3<f32>(x_2332.x, x_2332.x, x_2332.x));
        let x_2335 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2334.x, x_2334.y, x_2334.z, x_2335.w);
        let x_2337 : vec4<f32> = u_xlat11;
        let x_2340 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2342 : vec3<f32> = (vec3<f32>(x_2337.x, x_2337.y, x_2337.z) * vec3<f32>(x_2340.y, x_2340.y, x_2340.y));
        let x_2343 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2342.x, x_2342.y, x_2342.z, x_2343.w);
        let x_2346 : f32 = u_xlat11.x;
        u_xlat10.w = x_2346;
        let x_2348 : vec4<f32> = u_xlat8;
        let x_2351 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2354 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2348.x, x_2348.y, x_2348.x, x_2348.y) * vec4<f32>(x_2351.x, x_2351.y, x_2351.x, x_2351.y)) + vec4<f32>(x_2354.y, x_2354.w, x_2354.x, x_2354.w));
        let x_2357 : vec4<f32> = u_xlat8;
        let x_2360 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2363 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2357.x, x_2357.y) * vec2<f32>(x_2360.x, x_2360.y)) + vec2<f32>(x_2363.z, x_2363.w));
        let x_2367 : f32 = u_xlat10.y;
        u_xlat11.w = x_2367;
        let x_2369 : vec4<f32> = u_xlat11;
        let x_2370 : vec2<f32> = vec2<f32>(x_2369.y, x_2369.z);
        let x_2371 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2371.x, x_2370.x, x_2371.z, x_2370.y);
        let x_2373 : vec4<f32> = u_xlat8;
        let x_2376 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2379 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2373.x, x_2373.y, x_2373.x, x_2373.y) * vec4<f32>(x_2376.x, x_2376.y, x_2376.x, x_2376.y)) + vec4<f32>(x_2379.x, x_2379.y, x_2379.z, x_2379.y));
        let x_2382 : vec4<f32> = u_xlat8;
        let x_2385 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2388 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2382.x, x_2382.y, x_2382.x, x_2382.y) * vec4<f32>(x_2385.x, x_2385.y, x_2385.x, x_2385.y)) + vec4<f32>(x_2388.w, x_2388.y, x_2388.w, x_2388.z));
        let x_2391 : vec4<f32> = u_xlat8;
        let x_2394 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2397 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2391.x, x_2391.y, x_2391.x, x_2391.y) * vec4<f32>(x_2394.x, x_2394.y, x_2394.x, x_2394.y)) + vec4<f32>(x_2397.x, x_2397.w, x_2397.z, x_2397.w));
        let x_2400 : vec4<f32> = u_xlat9;
        let x_2402 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2400.x, x_2400.x, x_2400.x, x_2400.y) * vec4<f32>(x_2402.z, x_2402.w, x_2402.y, x_2402.z));
        let x_2405 : vec4<f32> = u_xlat9;
        let x_2407 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2405.y, x_2405.y, x_2405.z, x_2405.z) * x_2407);
        let x_2411 : f32 = u_xlat9.z;
        let x_2413 : f32 = u_xlat14.y;
        u_xlat73 = (x_2411 * x_2413);
        let x_2416 : vec4<f32> = u_xlat12;
        let x_2417 : vec2<f32> = vec2<f32>(x_2416.x, x_2416.y);
        let x_2419 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2417.x, x_2417.y, x_2419);
        let x_2426 : vec3<f32> = txVec34;
        let x_2428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2426.xy, x_2426.z);
        u_xlat8.x = x_2428;
        let x_2431 : vec4<f32> = u_xlat12;
        let x_2432 : vec2<f32> = vec2<f32>(x_2431.z, x_2431.w);
        let x_2434 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2432.x, x_2432.y, x_2434);
        let x_2442 : vec3<f32> = txVec35;
        let x_2444 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2442.xy, x_2442.z);
        u_xlat30 = x_2444;
        let x_2445 : f32 = u_xlat30;
        let x_2447 : f32 = u_xlat15.y;
        u_xlat30 = (x_2445 * x_2447);
        let x_2450 : f32 = u_xlat15.x;
        let x_2452 : f32 = u_xlat8.x;
        let x_2454 : f32 = u_xlat30;
        u_xlat8.x = ((x_2450 * x_2452) + x_2454);
        let x_2458 : vec2<f32> = u_xlat52;
        let x_2460 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2458.x, x_2458.y, x_2460);
        let x_2467 : vec3<f32> = txVec36;
        let x_2469 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2467.xy, x_2467.z);
        u_xlat30 = x_2469;
        let x_2471 : f32 = u_xlat15.z;
        let x_2472 : f32 = u_xlat30;
        let x_2475 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2471 * x_2472) + x_2475);
        let x_2479 : vec4<f32> = u_xlat11;
        let x_2480 : vec2<f32> = vec2<f32>(x_2479.x, x_2479.y);
        let x_2482 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2480.x, x_2480.y, x_2482);
        let x_2489 : vec3<f32> = txVec37;
        let x_2491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2489.xy, x_2489.z);
        u_xlat30 = x_2491;
        let x_2493 : f32 = u_xlat15.w;
        let x_2494 : f32 = u_xlat30;
        let x_2497 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2493 * x_2494) + x_2497);
        let x_2501 : vec4<f32> = u_xlat13;
        let x_2502 : vec2<f32> = vec2<f32>(x_2501.x, x_2501.y);
        let x_2504 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2502.x, x_2502.y, x_2504);
        let x_2511 : vec3<f32> = txVec38;
        let x_2513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2511.xy, x_2511.z);
        u_xlat30 = x_2513;
        let x_2515 : f32 = u_xlat16.x;
        let x_2516 : f32 = u_xlat30;
        let x_2519 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2515 * x_2516) + x_2519);
        let x_2523 : vec4<f32> = u_xlat13;
        let x_2524 : vec2<f32> = vec2<f32>(x_2523.z, x_2523.w);
        let x_2526 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2524.x, x_2524.y, x_2526);
        let x_2533 : vec3<f32> = txVec39;
        let x_2535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2533.xy, x_2533.z);
        u_xlat30 = x_2535;
        let x_2537 : f32 = u_xlat16.y;
        let x_2538 : f32 = u_xlat30;
        let x_2541 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2537 * x_2538) + x_2541);
        let x_2545 : vec4<f32> = u_xlat11;
        let x_2546 : vec2<f32> = vec2<f32>(x_2545.z, x_2545.w);
        let x_2548 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2546.x, x_2546.y, x_2548);
        let x_2555 : vec3<f32> = txVec40;
        let x_2557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2555.xy, x_2555.z);
        u_xlat30 = x_2557;
        let x_2559 : f32 = u_xlat16.z;
        let x_2560 : f32 = u_xlat30;
        let x_2563 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2559 * x_2560) + x_2563);
        let x_2567 : vec4<f32> = u_xlat10;
        let x_2568 : vec2<f32> = vec2<f32>(x_2567.x, x_2567.y);
        let x_2570 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2568.x, x_2568.y, x_2570);
        let x_2577 : vec3<f32> = txVec41;
        let x_2579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2577.xy, x_2577.z);
        u_xlat30 = x_2579;
        let x_2581 : f32 = u_xlat16.w;
        let x_2582 : f32 = u_xlat30;
        let x_2585 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2581 * x_2582) + x_2585);
        let x_2589 : vec4<f32> = u_xlat10;
        let x_2590 : vec2<f32> = vec2<f32>(x_2589.z, x_2589.w);
        let x_2592 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2590.x, x_2590.y, x_2592);
        let x_2599 : vec3<f32> = txVec42;
        let x_2601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2599.xy, x_2599.z);
        u_xlat30 = x_2601;
        let x_2602 : f32 = u_xlat73;
        let x_2603 : f32 = u_xlat30;
        let x_2606 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2602 * x_2603) + x_2606);
      } else {
        let x_2609 : vec4<f32> = u_xlat4;
        let x_2612 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2615 : vec2<f32> = ((vec2<f32>(x_2609.x, x_2609.y) * vec2<f32>(x_2612.z, x_2612.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2616 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2615.x, x_2615.y, x_2616.z, x_2616.w);
        let x_2618 : vec4<f32> = u_xlat8;
        let x_2620 : vec2<f32> = floor(vec2<f32>(x_2618.x, x_2618.y));
        let x_2621 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2620.x, x_2620.y, x_2621.z, x_2621.w);
        let x_2623 : vec4<f32> = u_xlat4;
        let x_2626 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2629 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2623.x, x_2623.y) * vec2<f32>(x_2626.z, x_2626.w)) + -(vec2<f32>(x_2629.x, x_2629.y)));
        let x_2633 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2633.x, x_2633.x, x_2633.y, x_2633.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2636 : vec4<f32> = u_xlat9;
        let x_2638 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2636.x, x_2636.x, x_2636.z, x_2636.z) * vec4<f32>(x_2638.x, x_2638.x, x_2638.z, x_2638.z));
        let x_2641 : vec4<f32> = u_xlat10;
        let x_2643 : vec2<f32> = (vec2<f32>(x_2641.y, x_2641.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2644 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2644.x, x_2643.x, x_2644.z, x_2643.y);
        let x_2646 : vec4<f32> = u_xlat10;
        let x_2649 : vec2<f32> = u_xlat52;
        let x_2651 : vec2<f32> = ((vec2<f32>(x_2646.x, x_2646.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2649));
        let x_2652 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2651.x, x_2652.y, x_2651.y, x_2652.w);
        let x_2654 : vec2<f32> = u_xlat52;
        let x_2656 : vec2<f32> = (-(x_2654) + vec2<f32>(1.0f, 1.0f));
        let x_2657 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2656.x, x_2656.y, x_2657.z, x_2657.w);
        let x_2659 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2659, vec2<f32>(0.0f, 0.0f));
        let x_2661 : vec2<f32> = u_xlat54;
        let x_2663 : vec2<f32> = u_xlat54;
        let x_2665 : vec4<f32> = u_xlat10;
        let x_2667 : vec2<f32> = ((-(x_2661) * x_2663) + vec2<f32>(x_2665.x, x_2665.y));
        let x_2668 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2667.x, x_2667.y, x_2668.z, x_2668.w);
        let x_2670 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2670, vec2<f32>(0.0f, 0.0f));
        let x_2673 : vec2<f32> = u_xlat54;
        let x_2675 : vec2<f32> = u_xlat54;
        let x_2677 : vec4<f32> = u_xlat9;
        let x_2679 : vec2<f32> = ((-(x_2673) * x_2675) + vec2<f32>(x_2677.y, x_2677.w));
        let x_2680 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2679.x, x_2680.y, x_2679.y);
        let x_2682 : vec4<f32> = u_xlat10;
        let x_2684 : vec2<f32> = (vec2<f32>(x_2682.x, x_2682.y) + vec2<f32>(2.0f, 2.0f));
        let x_2685 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2684.x, x_2684.y, x_2685.z, x_2685.w);
        let x_2687 : vec3<f32> = u_xlat31;
        let x_2689 : vec2<f32> = (vec2<f32>(x_2687.x, x_2687.z) + vec2<f32>(2.0f, 2.0f));
        let x_2690 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2690.x, x_2689.x, x_2690.z, x_2689.y);
        let x_2693 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2693 * 0.081632003f);
        let x_2696 : vec4<f32> = u_xlat9;
        let x_2698 : vec3<f32> = (vec3<f32>(x_2696.z, x_2696.x, x_2696.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2699 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2698.x, x_2698.y, x_2698.z, x_2699.w);
        let x_2701 : vec4<f32> = u_xlat10;
        let x_2703 : vec2<f32> = (vec2<f32>(x_2701.x, x_2701.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2704 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2703.x, x_2703.y, x_2704.z, x_2704.w);
        let x_2707 : f32 = u_xlat13.y;
        u_xlat12.x = x_2707;
        let x_2709 : vec2<f32> = u_xlat52;
        let x_2712 : vec2<f32> = ((vec2<f32>(x_2709.x, x_2709.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2713 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2713.x, x_2712.x, x_2713.z, x_2712.y);
        let x_2715 : vec2<f32> = u_xlat52;
        let x_2718 : vec2<f32> = ((vec2<f32>(x_2715.x, x_2715.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2719 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2718.x, x_2719.y, x_2718.y, x_2719.w);
        let x_2722 : f32 = u_xlat9.x;
        u_xlat10.y = x_2722;
        let x_2725 : f32 = u_xlat11.y;
        u_xlat10.w = x_2725;
        let x_2727 : vec4<f32> = u_xlat10;
        let x_2728 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2727 + x_2728);
        let x_2730 : vec2<f32> = u_xlat52;
        let x_2733 : vec2<f32> = ((vec2<f32>(x_2730.y, x_2730.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2734 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2734.x, x_2733.x, x_2734.z, x_2733.y);
        let x_2736 : vec2<f32> = u_xlat52;
        let x_2739 : vec2<f32> = ((vec2<f32>(x_2736.y, x_2736.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2740 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2739.x, x_2740.y, x_2739.y, x_2740.w);
        let x_2743 : f32 = u_xlat9.y;
        u_xlat11.y = x_2743;
        let x_2745 : vec4<f32> = u_xlat11;
        let x_2746 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2745 + x_2746);
        let x_2748 : vec4<f32> = u_xlat10;
        let x_2749 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2748 / x_2749);
        let x_2751 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2751 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2753 : vec4<f32> = u_xlat11;
        let x_2754 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2753 / x_2754);
        let x_2756 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2756 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2758 : vec4<f32> = u_xlat10;
        let x_2761 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2758.w, x_2758.x, x_2758.y, x_2758.z) * vec4<f32>(x_2761.x, x_2761.x, x_2761.x, x_2761.x));
        let x_2764 : vec4<f32> = u_xlat11;
        let x_2767 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2764.x, x_2764.w, x_2764.y, x_2764.z) * vec4<f32>(x_2767.y, x_2767.y, x_2767.y, x_2767.y));
        let x_2770 : vec4<f32> = u_xlat10;
        let x_2771 : vec3<f32> = vec3<f32>(x_2770.y, x_2770.z, x_2770.w);
        let x_2772 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2771.x, x_2772.y, x_2771.y, x_2771.z);
        let x_2775 : f32 = u_xlat11.x;
        u_xlat13.y = x_2775;
        let x_2777 : vec4<f32> = u_xlat8;
        let x_2780 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2783 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2777.x, x_2777.y, x_2777.x, x_2777.y) * vec4<f32>(x_2780.x, x_2780.y, x_2780.x, x_2780.y)) + vec4<f32>(x_2783.x, x_2783.y, x_2783.z, x_2783.y));
        let x_2786 : vec4<f32> = u_xlat8;
        let x_2789 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2792 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2786.x, x_2786.y) * vec2<f32>(x_2789.x, x_2789.y)) + vec2<f32>(x_2792.w, x_2792.y));
        let x_2796 : f32 = u_xlat13.y;
        u_xlat10.y = x_2796;
        let x_2799 : f32 = u_xlat11.z;
        u_xlat13.y = x_2799;
        let x_2801 : vec4<f32> = u_xlat8;
        let x_2804 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2807 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2801.x, x_2801.y, x_2801.x, x_2801.y) * vec4<f32>(x_2804.x, x_2804.y, x_2804.x, x_2804.y)) + vec4<f32>(x_2807.x, x_2807.y, x_2807.z, x_2807.y));
        let x_2810 : vec4<f32> = u_xlat8;
        let x_2813 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2816 : vec4<f32> = u_xlat13;
        let x_2818 : vec2<f32> = ((vec2<f32>(x_2810.x, x_2810.y) * vec2<f32>(x_2813.x, x_2813.y)) + vec2<f32>(x_2816.w, x_2816.y));
        let x_2819 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2818.x, x_2818.y, x_2819.z, x_2819.w);
        let x_2822 : f32 = u_xlat13.y;
        u_xlat10.z = x_2822;
        let x_2824 : vec4<f32> = u_xlat8;
        let x_2827 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2830 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2824.x, x_2824.y, x_2824.x, x_2824.y) * vec4<f32>(x_2827.x, x_2827.y, x_2827.x, x_2827.y)) + vec4<f32>(x_2830.x, x_2830.y, x_2830.x, x_2830.z));
        let x_2834 : f32 = u_xlat11.w;
        u_xlat13.y = x_2834;
        let x_2836 : vec4<f32> = u_xlat8;
        let x_2839 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2842 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2836.x, x_2836.y, x_2836.x, x_2836.y) * vec4<f32>(x_2839.x, x_2839.y, x_2839.x, x_2839.y)) + vec4<f32>(x_2842.x, x_2842.y, x_2842.z, x_2842.y));
        let x_2846 : vec4<f32> = u_xlat8;
        let x_2849 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2852 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2846.x, x_2846.y) * vec2<f32>(x_2849.x, x_2849.y)) + vec2<f32>(x_2852.w, x_2852.y));
        let x_2856 : f32 = u_xlat13.y;
        u_xlat10.w = x_2856;
        let x_2859 : vec4<f32> = u_xlat8;
        let x_2862 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2865 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2859.x, x_2859.y) * vec2<f32>(x_2862.x, x_2862.y)) + vec2<f32>(x_2865.x, x_2865.w));
        let x_2868 : vec4<f32> = u_xlat13;
        let x_2869 : vec3<f32> = vec3<f32>(x_2868.x, x_2868.z, x_2868.w);
        let x_2870 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2869.x, x_2870.y, x_2869.y, x_2869.z);
        let x_2872 : vec4<f32> = u_xlat8;
        let x_2875 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2878 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2872.x, x_2872.y, x_2872.x, x_2872.y) * vec4<f32>(x_2875.x, x_2875.y, x_2875.x, x_2875.y)) + vec4<f32>(x_2878.x, x_2878.y, x_2878.z, x_2878.y));
        let x_2882 : vec4<f32> = u_xlat8;
        let x_2885 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2888 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2882.x, x_2882.y) * vec2<f32>(x_2885.x, x_2885.y)) + vec2<f32>(x_2888.w, x_2888.y));
        let x_2892 : f32 = u_xlat10.x;
        u_xlat11.x = x_2892;
        let x_2894 : vec4<f32> = u_xlat8;
        let x_2897 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2900 : vec4<f32> = u_xlat11;
        let x_2902 : vec2<f32> = ((vec2<f32>(x_2894.x, x_2894.y) * vec2<f32>(x_2897.x, x_2897.y)) + vec2<f32>(x_2900.x, x_2900.y));
        let x_2903 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2902.x, x_2902.y, x_2903.z, x_2903.w);
        let x_2906 : vec4<f32> = u_xlat9;
        let x_2908 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2906.x, x_2906.x, x_2906.x, x_2906.x) * x_2908);
        let x_2911 : vec4<f32> = u_xlat9;
        let x_2913 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2911.y, x_2911.y, x_2911.y, x_2911.y) * x_2913);
        let x_2916 : vec4<f32> = u_xlat9;
        let x_2918 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2916.z, x_2916.z, x_2916.z, x_2916.z) * x_2918);
        let x_2920 : vec4<f32> = u_xlat9;
        let x_2922 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2920.w, x_2920.w, x_2920.w, x_2920.w) * x_2922);
        let x_2925 : vec4<f32> = u_xlat14;
        let x_2926 : vec2<f32> = vec2<f32>(x_2925.x, x_2925.y);
        let x_2928 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2926.x, x_2926.y, x_2928);
        let x_2935 : vec3<f32> = txVec43;
        let x_2937 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2935.xy, x_2935.z);
        u_xlat73 = x_2937;
        let x_2939 : vec4<f32> = u_xlat14;
        let x_2940 : vec2<f32> = vec2<f32>(x_2939.z, x_2939.w);
        let x_2942 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2940.x, x_2940.y, x_2942);
        let x_2949 : vec3<f32> = txVec44;
        let x_2951 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2949.xy, x_2949.z);
        u_xlat10.x = x_2951;
        let x_2954 : f32 = u_xlat10.x;
        let x_2956 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2954 * x_2956);
        let x_2960 : f32 = u_xlat19.x;
        let x_2961 : f32 = u_xlat73;
        let x_2964 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2960 * x_2961) + x_2964);
        let x_2967 : vec2<f32> = u_xlat52;
        let x_2969 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2967.x, x_2967.y, x_2969);
        let x_2976 : vec3<f32> = txVec45;
        let x_2978 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2976.xy, x_2976.z);
        u_xlat52.x = x_2978;
        let x_2981 : f32 = u_xlat19.z;
        let x_2983 : f32 = u_xlat52.x;
        let x_2985 : f32 = u_xlat73;
        u_xlat73 = ((x_2981 * x_2983) + x_2985);
        let x_2988 : vec4<f32> = u_xlat17;
        let x_2989 : vec2<f32> = vec2<f32>(x_2988.x, x_2988.y);
        let x_2991 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2989.x, x_2989.y, x_2991);
        let x_2998 : vec3<f32> = txVec46;
        let x_3000 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2998.xy, x_2998.z);
        u_xlat52.x = x_3000;
        let x_3003 : f32 = u_xlat19.w;
        let x_3005 : f32 = u_xlat52.x;
        let x_3007 : f32 = u_xlat73;
        u_xlat73 = ((x_3003 * x_3005) + x_3007);
        let x_3010 : vec4<f32> = u_xlat15;
        let x_3011 : vec2<f32> = vec2<f32>(x_3010.x, x_3010.y);
        let x_3013 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_3011.x, x_3011.y, x_3013);
        let x_3020 : vec3<f32> = txVec47;
        let x_3022 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3020.xy, x_3020.z);
        u_xlat52.x = x_3022;
        let x_3025 : f32 = u_xlat20.x;
        let x_3027 : f32 = u_xlat52.x;
        let x_3029 : f32 = u_xlat73;
        u_xlat73 = ((x_3025 * x_3027) + x_3029);
        let x_3032 : vec4<f32> = u_xlat15;
        let x_3033 : vec2<f32> = vec2<f32>(x_3032.z, x_3032.w);
        let x_3035 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_3033.x, x_3033.y, x_3035);
        let x_3042 : vec3<f32> = txVec48;
        let x_3044 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3042.xy, x_3042.z);
        u_xlat52.x = x_3044;
        let x_3047 : f32 = u_xlat20.y;
        let x_3049 : f32 = u_xlat52.x;
        let x_3051 : f32 = u_xlat73;
        u_xlat73 = ((x_3047 * x_3049) + x_3051);
        let x_3054 : vec4<f32> = u_xlat16;
        let x_3055 : vec2<f32> = vec2<f32>(x_3054.x, x_3054.y);
        let x_3057 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_3055.x, x_3055.y, x_3057);
        let x_3064 : vec3<f32> = txVec49;
        let x_3066 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3064.xy, x_3064.z);
        u_xlat52.x = x_3066;
        let x_3069 : f32 = u_xlat20.z;
        let x_3071 : f32 = u_xlat52.x;
        let x_3073 : f32 = u_xlat73;
        u_xlat73 = ((x_3069 * x_3071) + x_3073);
        let x_3076 : vec4<f32> = u_xlat17;
        let x_3077 : vec2<f32> = vec2<f32>(x_3076.z, x_3076.w);
        let x_3079 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3077.x, x_3077.y, x_3079);
        let x_3086 : vec3<f32> = txVec50;
        let x_3088 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3086.xy, x_3086.z);
        u_xlat52.x = x_3088;
        let x_3091 : f32 = u_xlat20.w;
        let x_3093 : f32 = u_xlat52.x;
        let x_3095 : f32 = u_xlat73;
        u_xlat73 = ((x_3091 * x_3093) + x_3095);
        let x_3098 : vec4<f32> = u_xlat18;
        let x_3099 : vec2<f32> = vec2<f32>(x_3098.x, x_3098.y);
        let x_3101 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3099.x, x_3099.y, x_3101);
        let x_3108 : vec3<f32> = txVec51;
        let x_3110 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3108.xy, x_3108.z);
        u_xlat52.x = x_3110;
        let x_3113 : f32 = u_xlat21.x;
        let x_3115 : f32 = u_xlat52.x;
        let x_3117 : f32 = u_xlat73;
        u_xlat73 = ((x_3113 * x_3115) + x_3117);
        let x_3120 : vec4<f32> = u_xlat18;
        let x_3121 : vec2<f32> = vec2<f32>(x_3120.z, x_3120.w);
        let x_3123 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3121.x, x_3121.y, x_3123);
        let x_3130 : vec3<f32> = txVec52;
        let x_3132 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3130.xy, x_3130.z);
        u_xlat52.x = x_3132;
        let x_3135 : f32 = u_xlat21.y;
        let x_3137 : f32 = u_xlat52.x;
        let x_3139 : f32 = u_xlat73;
        u_xlat73 = ((x_3135 * x_3137) + x_3139);
        let x_3142 : vec2<f32> = u_xlat32;
        let x_3144 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3142.x, x_3142.y, x_3144);
        let x_3151 : vec3<f32> = txVec53;
        let x_3153 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3151.xy, x_3151.z);
        u_xlat52.x = x_3153;
        let x_3156 : f32 = u_xlat21.z;
        let x_3158 : f32 = u_xlat52.x;
        let x_3160 : f32 = u_xlat73;
        u_xlat73 = ((x_3156 * x_3158) + x_3160);
        let x_3163 : vec2<f32> = u_xlat60;
        let x_3165 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3163.x, x_3163.y, x_3165);
        let x_3172 : vec3<f32> = txVec54;
        let x_3174 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3172.xy, x_3172.z);
        u_xlat52.x = x_3174;
        let x_3177 : f32 = u_xlat21.w;
        let x_3179 : f32 = u_xlat52.x;
        let x_3181 : f32 = u_xlat73;
        u_xlat73 = ((x_3177 * x_3179) + x_3181);
        let x_3184 : vec4<f32> = u_xlat13;
        let x_3185 : vec2<f32> = vec2<f32>(x_3184.x, x_3184.y);
        let x_3187 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3185.x, x_3185.y, x_3187);
        let x_3194 : vec3<f32> = txVec55;
        let x_3196 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3194.xy, x_3194.z);
        u_xlat52.x = x_3196;
        let x_3199 : f32 = u_xlat9.x;
        let x_3201 : f32 = u_xlat52.x;
        let x_3203 : f32 = u_xlat73;
        u_xlat73 = ((x_3199 * x_3201) + x_3203);
        let x_3206 : vec4<f32> = u_xlat13;
        let x_3207 : vec2<f32> = vec2<f32>(x_3206.z, x_3206.w);
        let x_3209 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3207.x, x_3207.y, x_3209);
        let x_3216 : vec3<f32> = txVec56;
        let x_3218 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3216.xy, x_3216.z);
        u_xlat52.x = x_3218;
        let x_3221 : f32 = u_xlat9.y;
        let x_3223 : f32 = u_xlat52.x;
        let x_3225 : f32 = u_xlat73;
        u_xlat73 = ((x_3221 * x_3223) + x_3225);
        let x_3228 : vec2<f32> = u_xlat55;
        let x_3230 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3228.x, x_3228.y, x_3230);
        let x_3237 : vec3<f32> = txVec57;
        let x_3239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3237.xy, x_3237.z);
        u_xlat52.x = x_3239;
        let x_3242 : f32 = u_xlat9.z;
        let x_3244 : f32 = u_xlat52.x;
        let x_3246 : f32 = u_xlat73;
        u_xlat73 = ((x_3242 * x_3244) + x_3246);
        let x_3249 : vec4<f32> = u_xlat8;
        let x_3250 : vec2<f32> = vec2<f32>(x_3249.x, x_3249.y);
        let x_3252 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3250.x, x_3250.y, x_3252);
        let x_3259 : vec3<f32> = txVec58;
        let x_3261 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3259.xy, x_3259.z);
        u_xlat8.x = x_3261;
        let x_3264 : f32 = u_xlat9.w;
        let x_3266 : f32 = u_xlat8.x;
        let x_3268 : f32 = u_xlat73;
        u_xlat66 = ((x_3264 * x_3266) + x_3268);
      }
    }
  } else {
    let x_3272 : vec4<f32> = u_xlat4;
    let x_3273 : vec2<f32> = vec2<f32>(x_3272.x, x_3272.y);
    let x_3275 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3273.x, x_3273.y, x_3275);
    let x_3282 : vec3<f32> = txVec59;
    let x_3284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3282.xy, x_3282.z);
    u_xlat66 = x_3284;
  }
  let x_3285 : f32 = u_xlat66;
  let x_3287 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3289 : f32 = u_xlat70;
  u_xlat66 = ((x_3285 * x_3287) + x_3289);
  let x_3291 : bool = u_xlatb5;
  let x_3292 : f32 = u_xlat66;
  u_xlat66 = select(x_3292, 1.0f, x_3291);
  let x_3294 : vec3<f32> = vs_INTERP0;
  let x_3296 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3298 : vec3<f32> = (x_3294 + -(x_3296));
  let x_3299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3298.x, x_3298.y, x_3298.z, x_3299.w);
  let x_3301 : vec4<f32> = u_xlat4;
  let x_3303 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3301.x, x_3301.y, x_3301.z), vec3<f32>(x_3303.x, x_3303.y, x_3303.z));
  let x_3308 : f32 = u_xlat4.x;
  let x_3310 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3313 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3308 * x_3310) + x_3313);
  let x_3317 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3317, 0.0f, 1.0f);
  let x_3321 : f32 = u_xlat66;
  u_xlat26 = (-(x_3321) + 1.0f);
  let x_3325 : f32 = u_xlat4.x;
  let x_3326 : f32 = u_xlat26;
  let x_3328 : f32 = u_xlat66;
  u_xlat66 = ((x_3325 * x_3326) + x_3328);
  let x_3336 : f32 = x_3334.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3336 == -1.0f));
  let x_3340 : bool = u_xlatb4.x;
  if (x_3340) {
    let x_3343 : vec3<f32> = vs_INTERP0;
    let x_3346 : vec4<f32> = x_3334.x_MainLightWorldToLight[1i];
    let x_3348 : vec2<f32> = (vec2<f32>(x_3343.y, x_3343.y) * vec2<f32>(x_3346.x, x_3346.y));
    let x_3349 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3348.x, x_3348.y, x_3349.z, x_3349.w);
    let x_3352 : vec4<f32> = x_3334.x_MainLightWorldToLight[0i];
    let x_3354 : vec3<f32> = vs_INTERP0;
    let x_3357 : vec4<f32> = u_xlat4;
    let x_3359 : vec2<f32> = ((vec2<f32>(x_3352.x, x_3352.y) * vec2<f32>(x_3354.x, x_3354.x)) + vec2<f32>(x_3357.x, x_3357.y));
    let x_3360 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3359.x, x_3359.y, x_3360.z, x_3360.w);
    let x_3363 : vec4<f32> = x_3334.x_MainLightWorldToLight[2i];
    let x_3365 : vec3<f32> = vs_INTERP0;
    let x_3368 : vec4<f32> = u_xlat4;
    let x_3370 : vec2<f32> = ((vec2<f32>(x_3363.x, x_3363.y) * vec2<f32>(x_3365.z, x_3365.z)) + vec2<f32>(x_3368.x, x_3368.y));
    let x_3371 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3370.x, x_3370.y, x_3371.z, x_3371.w);
    let x_3373 : vec4<f32> = u_xlat4;
    let x_3376 : vec4<f32> = x_3334.x_MainLightWorldToLight[3i];
    let x_3378 : vec2<f32> = (vec2<f32>(x_3373.x, x_3373.y) + vec2<f32>(x_3376.x, x_3376.y));
    let x_3379 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3378.x, x_3378.y, x_3379.z, x_3379.w);
    let x_3381 : vec4<f32> = u_xlat4;
    let x_3384 : vec2<f32> = ((vec2<f32>(x_3381.x, x_3381.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3385 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3384.x, x_3384.y, x_3385.z, x_3385.w);
    let x_3392 : vec4<f32> = u_xlat4;
    let x_3395 : f32 = x_66.x_GlobalMipBias.x;
    let x_3396 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3392.x, x_3392.y), x_3395);
    u_xlat4 = x_3396;
    let x_3401 : f32 = x_3334.x_MainLightCookieTextureFormat;
    let x_3403 : f32 = x_3334.x_MainLightCookieTextureFormat;
    let x_3405 : f32 = x_3334.x_MainLightCookieTextureFormat;
    let x_3407 : f32 = x_3334.x_MainLightCookieTextureFormat;
    let x_3408 : vec4<f32> = vec4<f32>(x_3401, x_3403, x_3405, x_3407);
    let x_3415 : vec4<bool> = (vec4<f32>(x_3408.x, x_3408.y, x_3408.z, x_3408.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3415.x, x_3415.y);
    let x_3418 : bool = u_xlatb8.y;
    if (x_3418) {
      let x_3423 : f32 = u_xlat4.w;
      x_3419 = x_3423;
    } else {
      let x_3426 : f32 = u_xlat4.x;
      x_3419 = x_3426;
    }
    let x_3427 : f32 = x_3419;
    u_xlat70 = x_3427;
    let x_3429 : bool = u_xlatb8.x;
    if (x_3429) {
      let x_3433 : vec4<f32> = u_xlat4;
      x_3430 = vec3<f32>(x_3433.x, x_3433.y, x_3433.z);
    } else {
      let x_3436 : f32 = u_xlat70;
      x_3430 = vec3<f32>(x_3436, x_3436, x_3436);
    }
    let x_3438 : vec3<f32> = x_3430;
    let x_3439 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3438.x, x_3438.y, x_3438.z, x_3439.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3445 : vec4<f32> = u_xlat4;
  let x_3448 : vec4<f32> = x_66.x_MainLightColor;
  let x_3450 : vec3<f32> = (vec3<f32>(x_3445.x, x_3445.y, x_3445.z) * vec3<f32>(x_3448.x, x_3448.y, x_3448.z));
  let x_3451 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3450.x, x_3450.y, x_3450.z, x_3451.w);
  let x_3453 : vec2<f32> = u_xlat51;
  let x_3455 : vec4<f32> = u_xlat4;
  let x_3457 : vec3<f32> = (vec3<f32>(x_3453.x, x_3453.x, x_3453.x) * vec3<f32>(x_3455.x, x_3455.y, x_3455.z));
  let x_3458 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3457.x, x_3457.y, x_3457.z, x_3458.w);
  let x_3460 : vec3<f32> = u_xlat25;
  let x_3462 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(-(x_3460), vec3<f32>(x_3462.x, x_3462.y, x_3462.z));
  let x_3465 : f32 = u_xlat70;
  let x_3466 : f32 = u_xlat70;
  u_xlat70 = (x_3465 + x_3466);
  let x_3468 : vec4<f32> = u_xlat6;
  let x_3470 : f32 = u_xlat70;
  let x_3474 : vec3<f32> = u_xlat25;
  let x_3476 : vec3<f32> = ((vec3<f32>(x_3468.x, x_3468.y, x_3468.z) * -(vec3<f32>(x_3470, x_3470, x_3470))) + -(x_3474));
  let x_3477 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3476.x, x_3476.y, x_3476.z, x_3477.w);
  let x_3479 : vec4<f32> = u_xlat6;
  let x_3481 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(vec3<f32>(x_3479.x, x_3479.y, x_3479.z), x_3481);
  let x_3483 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3483, 0.0f, 1.0f);
  let x_3485 : f32 = u_xlat70;
  u_xlat70 = (-(x_3485) + 1.0f);
  let x_3488 : f32 = u_xlat70;
  let x_3489 : f32 = u_xlat70;
  u_xlat70 = (x_3488 * x_3489);
  let x_3491 : f32 = u_xlat70;
  let x_3492 : f32 = u_xlat70;
  u_xlat70 = (x_3491 * x_3492);
  let x_3494 : f32 = u_xlat67;
  u_xlat5.x = ((-(x_3494) * 0.699999988f) + 1.700000048f);
  let x_3501 : f32 = u_xlat67;
  let x_3503 : f32 = u_xlat5.x;
  u_xlat67 = (x_3501 * x_3503);
  let x_3505 : f32 = u_xlat67;
  u_xlat67 = (x_3505 * 6.0f);
  let x_3516 : vec4<f32> = u_xlat8;
  let x_3518 : f32 = u_xlat67;
  let x_3519 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3516.x, x_3516.y, x_3516.z), x_3518);
  u_xlat8 = x_3519;
  let x_3521 : f32 = u_xlat8.w;
  u_xlat67 = (x_3521 + -1.0f);
  let x_3524 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3525 : f32 = u_xlat67;
  u_xlat67 = ((x_3524 * x_3525) + 1.0f);
  let x_3528 : f32 = u_xlat67;
  u_xlat67 = max(x_3528, 0.0f);
  let x_3530 : f32 = u_xlat67;
  u_xlat67 = log2(x_3530);
  let x_3532 : f32 = u_xlat67;
  let x_3534 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat67 = (x_3532 * x_3534);
  let x_3536 : f32 = u_xlat67;
  u_xlat67 = exp2(x_3536);
  let x_3538 : f32 = u_xlat67;
  let x_3540 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat67 = (x_3538 * x_3540);
  let x_3542 : vec4<f32> = u_xlat8;
  let x_3544 : f32 = u_xlat67;
  let x_3546 : vec3<f32> = (vec3<f32>(x_3542.x, x_3542.y, x_3542.z) * vec3<f32>(x_3544, x_3544, x_3544));
  let x_3547 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3546.x, x_3546.y, x_3546.z, x_3547.w);
  let x_3549 : f32 = u_xlat68;
  let x_3551 : f32 = u_xlat68;
  let x_3555 : vec2<f32> = ((vec2<f32>(x_3549, x_3549) * vec2<f32>(x_3551, x_3551)) + vec2<f32>(-1.0f, 1.0f));
  let x_3556 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3555.x, x_3555.y, x_3556.z, x_3556.w);
  let x_3559 : f32 = u_xlat9.y;
  u_xlat67 = (1.0f / x_3559);
  let x_3562 : f32 = u_xlat3.x;
  u_xlat68 = (x_3562 + -0.039999999f);
  let x_3565 : f32 = u_xlat70;
  let x_3566 : f32 = u_xlat68;
  u_xlat68 = ((x_3565 * x_3566) + 0.039999999f);
  let x_3570 : f32 = u_xlat67;
  let x_3571 : f32 = u_xlat68;
  u_xlat67 = (x_3570 * x_3571);
  let x_3573 : f32 = u_xlat67;
  let x_3575 : vec4<f32> = u_xlat8;
  let x_3577 : vec3<f32> = (vec3<f32>(x_3573, x_3573, x_3573) * vec3<f32>(x_3575.x, x_3575.y, x_3575.z));
  let x_3578 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3577.x, x_3577.y, x_3577.z, x_3578.w);
  let x_3580 : vec3<f32> = u_xlat27;
  let x_3581 : vec3<f32> = u_xlat2;
  let x_3583 : vec4<f32> = u_xlat8;
  let x_3585 : vec3<f32> = ((x_3580 * x_3581) + vec3<f32>(x_3583.x, x_3583.y, x_3583.z));
  let x_3586 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3585.x, x_3585.y, x_3585.z, x_3586.w);
  let x_3588 : f32 = u_xlat66;
  let x_3590 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3588 * x_3590);
  let x_3592 : vec4<f32> = u_xlat6;
  let x_3595 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3592.x, x_3592.y, x_3592.z), vec3<f32>(x_3595.x, x_3595.y, x_3595.z));
  let x_3598 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3598, 0.0f, 1.0f);
  let x_3600 : f32 = u_xlat66;
  let x_3601 : f32 = u_xlat67;
  u_xlat66 = (x_3600 * x_3601);
  let x_3603 : f32 = u_xlat66;
  let x_3605 : vec4<f32> = u_xlat4;
  let x_3607 : vec3<f32> = (vec3<f32>(x_3603, x_3603, x_3603) * vec3<f32>(x_3605.x, x_3605.y, x_3605.z));
  let x_3608 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3607.x, x_3607.y, x_3607.z, x_3608.w);
  let x_3610 : vec3<f32> = u_xlat25;
  let x_3612 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3614 : vec3<f32> = (x_3610 + vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
  let x_3615 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3614.x, x_3614.y, x_3614.z, x_3615.w);
  let x_3617 : vec4<f32> = u_xlat8;
  let x_3619 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3617.x, x_3617.y, x_3617.z), vec3<f32>(x_3619.x, x_3619.y, x_3619.z));
  let x_3622 : f32 = u_xlat66;
  u_xlat66 = max(x_3622, 1.17549435e-37f);
  let x_3625 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3625);
  let x_3627 : f32 = u_xlat66;
  let x_3629 : vec4<f32> = u_xlat8;
  let x_3631 : vec3<f32> = (vec3<f32>(x_3627, x_3627, x_3627) * vec3<f32>(x_3629.x, x_3629.y, x_3629.z));
  let x_3632 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3631.x, x_3631.y, x_3631.z, x_3632.w);
  let x_3634 : vec4<f32> = u_xlat6;
  let x_3636 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3634.x, x_3634.y, x_3634.z), vec3<f32>(x_3636.x, x_3636.y, x_3636.z));
  let x_3639 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3639, 0.0f, 1.0f);
  let x_3642 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3644 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3642.x, x_3642.y, x_3642.z), vec3<f32>(x_3644.x, x_3644.y, x_3644.z));
  let x_3647 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3647, 0.0f, 1.0f);
  let x_3649 : f32 = u_xlat66;
  let x_3650 : f32 = u_xlat66;
  u_xlat66 = (x_3649 * x_3650);
  let x_3652 : f32 = u_xlat66;
  let x_3654 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3652 * x_3654) + 1.000010014f);
  let x_3658 : f32 = u_xlat67;
  let x_3659 : f32 = u_xlat67;
  u_xlat67 = (x_3658 * x_3659);
  let x_3661 : f32 = u_xlat66;
  let x_3662 : f32 = u_xlat66;
  u_xlat66 = (x_3661 * x_3662);
  let x_3664 : f32 = u_xlat67;
  u_xlat67 = max(x_3664, 0.100000001f);
  let x_3667 : f32 = u_xlat66;
  let x_3668 : f32 = u_xlat67;
  u_xlat66 = (x_3667 * x_3668);
  let x_3671 : f32 = u_xlat29.x;
  let x_3672 : f32 = u_xlat66;
  u_xlat66 = (x_3671 * x_3672);
  let x_3674 : f32 = u_xlat72;
  let x_3675 : f32 = u_xlat66;
  u_xlat66 = (x_3674 / x_3675);
  let x_3677 : f32 = u_xlat66;
  let x_3681 : vec3<f32> = u_xlat2;
  let x_3682 : vec3<f32> = ((vec3<f32>(x_3677, x_3677, x_3677) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3681);
  let x_3683 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3682.x, x_3682.y, x_3682.z, x_3683.w);
  let x_3685 : vec4<f32> = u_xlat4;
  let x_3687 : vec4<f32> = u_xlat8;
  let x_3689 : vec3<f32> = (vec3<f32>(x_3685.x, x_3685.y, x_3685.z) * vec3<f32>(x_3687.x, x_3687.y, x_3687.z));
  let x_3690 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3689.x, x_3689.y, x_3689.z, x_3690.w);
  let x_3693 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3695 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3693, x_3695);
  let x_3697 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3697));
  let x_3701 : f32 = x_3334.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3703 : f32 = x_3334.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3705 : f32 = x_3334.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3707 : f32 = x_3334.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3708 : vec4<f32> = vec4<f32>(x_3701, x_3703, x_3705, x_3707);
  let x_3714 : vec4<bool> = (vec4<f32>(x_3708.x, x_3708.y, x_3708.z, x_3708.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3714.x, x_3714.y);
  u_xlat31.x = 0.0f;
  u_xlat31.y = 0.0f;
  u_xlat31.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3725 : u32 = u_xlatu_loop_1;
    let x_3726 : u32 = u_xlatu66;
    if ((x_3725 < x_3726)) {
    } else {
      break;
    }
    let x_3729 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3729 >> 2u);
    let x_3732 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3732 & 3u));
    let x_3735 : u32 = u_xlatu68;
    let x_3738 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3735)];
    let x_3748 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3753 : vec4<u32> = indexable[x_3748];
    u_xlat68 = dot(x_3738, bitcast<vec4<f32>>(x_3753));
    let x_3756 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3756));
    let x_3759 : vec3<f32> = vs_INTERP0;
    let x_3771 : u32 = u_xlatu68;
    let x_3774 : vec4<f32> = x_3770.x_AdditionalLightsPosition[bitcast<i32>(x_3771)];
    let x_3777 : u32 = u_xlatu68;
    let x_3780 : vec4<f32> = x_3770.x_AdditionalLightsPosition[bitcast<i32>(x_3777)];
    let x_3782 : vec3<f32> = ((-(x_3759) * vec3<f32>(x_3774.w, x_3774.w, x_3774.w)) + vec3<f32>(x_3780.x, x_3780.y, x_3780.z));
    let x_3783 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3782.x, x_3782.y, x_3782.z, x_3783.w);
    let x_3785 : vec4<f32> = u_xlat10;
    let x_3787 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_3785.x, x_3785.y, x_3785.z), vec3<f32>(x_3787.x, x_3787.y, x_3787.z));
    let x_3792 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3792, 6.10351562e-05f);
    let x_3797 : f32 = u_xlat3.x;
    u_xlat70 = inverseSqrt(x_3797);
    let x_3799 : f32 = u_xlat70;
    let x_3801 : vec4<f32> = u_xlat10;
    let x_3803 : vec3<f32> = (vec3<f32>(x_3799, x_3799, x_3799) * vec3<f32>(x_3801.x, x_3801.y, x_3801.z));
    let x_3804 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3803.x, x_3803.y, x_3803.z, x_3804.w);
    let x_3808 : f32 = u_xlat3.x;
    u_xlat71 = (1.0f / x_3808);
    let x_3811 : f32 = u_xlat3.x;
    let x_3812 : u32 = u_xlatu68;
    let x_3815 : f32 = x_3770.x_AdditionalLightsAttenuation[bitcast<i32>(x_3812)].x;
    u_xlat3.x = (x_3811 * x_3815);
    let x_3819 : f32 = u_xlat3.x;
    let x_3822 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3819) * x_3822) + 1.0f);
    let x_3827 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3827, 0.0f);
    let x_3831 : f32 = u_xlat3.x;
    let x_3833 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3831 * x_3833);
    let x_3837 : f32 = u_xlat3.x;
    let x_3838 : f32 = u_xlat71;
    u_xlat3.x = (x_3837 * x_3838);
    let x_3841 : u32 = u_xlatu68;
    let x_3844 : vec4<f32> = x_3770.x_AdditionalLightsSpotDir[bitcast<i32>(x_3841)];
    let x_3846 : vec4<f32> = u_xlat11;
    u_xlat71 = dot(vec3<f32>(x_3844.x, x_3844.y, x_3844.z), vec3<f32>(x_3846.x, x_3846.y, x_3846.z));
    let x_3849 : f32 = u_xlat71;
    let x_3850 : u32 = u_xlatu68;
    let x_3853 : f32 = x_3770.x_AdditionalLightsAttenuation[bitcast<i32>(x_3850)].z;
    let x_3855 : u32 = u_xlatu68;
    let x_3858 : f32 = x_3770.x_AdditionalLightsAttenuation[bitcast<i32>(x_3855)].w;
    u_xlat71 = ((x_3849 * x_3853) + x_3858);
    let x_3860 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3860, 0.0f, 1.0f);
    let x_3862 : f32 = u_xlat71;
    let x_3863 : f32 = u_xlat71;
    u_xlat71 = (x_3862 * x_3863);
    let x_3866 : f32 = u_xlat3.x;
    let x_3867 : f32 = u_xlat71;
    u_xlat3.x = (x_3866 * x_3867);
    let x_3871 : u32 = u_xlatu68;
    u_xlatu71 = (x_3871 >> 5u);
    let x_3874 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3874) & 31i)));
    let x_3880 : i32 = u_xlati73;
    let x_3882 : u32 = u_xlatu71;
    let x_3885 : f32 = x_3334.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3882)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3880) & bitcast<u32>(x_3885)));
    let x_3889 : i32 = u_xlati71;
    if ((x_3889 != 0i)) {
      let x_3899 : u32 = u_xlatu68;
      let x_3902 : f32 = x_3898.x_AdditionalLightsLightTypes[bitcast<i32>(x_3899)].el;
      u_xlati71 = i32(x_3902);
      let x_3904 : i32 = u_xlati71;
      u_xlati73 = select(1i, 0i, (x_3904 != 0i));
      let x_3908 : u32 = u_xlatu68;
      u_xlati52 = (bitcast<i32>(x_3908) << bitcast<u32>(2i));
      let x_3911 : i32 = u_xlati73;
      if ((x_3911 != 0i)) {
        let x_3915 : vec3<f32> = vs_INTERP0;
        let x_3917 : i32 = u_xlati52;
        let x_3920 : i32 = u_xlati52;
        let x_3924 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_3917 + 1i) / 4i)][((x_3920 + 1i) % 4i)];
        let x_3926 : vec3<f32> = (vec3<f32>(x_3915.y, x_3915.y, x_3915.y) * vec3<f32>(x_3924.x, x_3924.y, x_3924.w));
        let x_3927 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3926.x, x_3926.y, x_3926.z, x_3927.w);
        let x_3929 : i32 = u_xlati52;
        let x_3931 : i32 = u_xlati52;
        let x_3934 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[(x_3929 / 4i)][(x_3931 % 4i)];
        let x_3936 : vec3<f32> = vs_INTERP0;
        let x_3939 : vec4<f32> = u_xlat12;
        let x_3941 : vec3<f32> = ((vec3<f32>(x_3934.x, x_3934.y, x_3934.w) * vec3<f32>(x_3936.x, x_3936.x, x_3936.x)) + vec3<f32>(x_3939.x, x_3939.y, x_3939.z));
        let x_3942 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3941.x, x_3941.y, x_3941.z, x_3942.w);
        let x_3944 : i32 = u_xlati52;
        let x_3947 : i32 = u_xlati52;
        let x_3951 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_3944 + 2i) / 4i)][((x_3947 + 2i) % 4i)];
        let x_3953 : vec3<f32> = vs_INTERP0;
        let x_3956 : vec4<f32> = u_xlat12;
        let x_3958 : vec3<f32> = ((vec3<f32>(x_3951.x, x_3951.y, x_3951.w) * vec3<f32>(x_3953.z, x_3953.z, x_3953.z)) + vec3<f32>(x_3956.x, x_3956.y, x_3956.z));
        let x_3959 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3958.x, x_3958.y, x_3958.z, x_3959.w);
        let x_3961 : vec4<f32> = u_xlat12;
        let x_3963 : i32 = u_xlati52;
        let x_3966 : i32 = u_xlati52;
        let x_3970 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_3963 + 3i) / 4i)][((x_3966 + 3i) % 4i)];
        let x_3972 : vec3<f32> = (vec3<f32>(x_3961.x, x_3961.y, x_3961.z) + vec3<f32>(x_3970.x, x_3970.y, x_3970.w));
        let x_3973 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3972.x, x_3972.y, x_3972.z, x_3973.w);
        let x_3975 : vec4<f32> = u_xlat12;
        let x_3977 : vec4<f32> = u_xlat12;
        let x_3979 : vec2<f32> = (vec2<f32>(x_3975.x, x_3975.y) / vec2<f32>(x_3977.z, x_3977.z));
        let x_3980 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3979.x, x_3979.y, x_3980.z, x_3980.w);
        let x_3982 : vec4<f32> = u_xlat12;
        let x_3985 : vec2<f32> = ((vec2<f32>(x_3982.x, x_3982.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3986 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3985.x, x_3985.y, x_3986.z, x_3986.w);
        let x_3988 : vec4<f32> = u_xlat12;
        let x_3992 : vec2<f32> = clamp(vec2<f32>(x_3988.x, x_3988.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3993 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3992.x, x_3992.y, x_3993.z, x_3993.w);
        let x_3995 : u32 = u_xlatu68;
        let x_3998 : vec4<f32> = x_3898.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3995)];
        let x_4000 : vec4<f32> = u_xlat12;
        let x_4003 : u32 = u_xlatu68;
        let x_4006 : vec4<f32> = x_3898.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4003)];
        let x_4008 : vec2<f32> = ((vec2<f32>(x_3998.x, x_3998.y) * vec2<f32>(x_4000.x, x_4000.y)) + vec2<f32>(x_4006.z, x_4006.w));
        let x_4009 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4008.x, x_4008.y, x_4009.z, x_4009.w);
      } else {
        let x_4013 : i32 = u_xlati71;
        u_xlatb71 = (x_4013 == 1i);
        let x_4015 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_4015);
        let x_4017 : i32 = u_xlati71;
        if ((x_4017 != 0i)) {
          let x_4022 : vec3<f32> = vs_INTERP0;
          let x_4024 : i32 = u_xlati52;
          let x_4027 : i32 = u_xlati52;
          let x_4031 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_4024 + 1i) / 4i)][((x_4027 + 1i) % 4i)];
          u_xlat56 = (vec2<f32>(x_4022.y, x_4022.y) * vec2<f32>(x_4031.x, x_4031.y));
          let x_4034 : i32 = u_xlati52;
          let x_4036 : i32 = u_xlati52;
          let x_4039 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[(x_4034 / 4i)][(x_4036 % 4i)];
          let x_4041 : vec3<f32> = vs_INTERP0;
          let x_4044 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4039.x, x_4039.y) * vec2<f32>(x_4041.x, x_4041.x)) + x_4044);
          let x_4046 : i32 = u_xlati52;
          let x_4049 : i32 = u_xlati52;
          let x_4053 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_4046 + 2i) / 4i)][((x_4049 + 2i) % 4i)];
          let x_4055 : vec3<f32> = vs_INTERP0;
          let x_4058 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4053.x, x_4053.y) * vec2<f32>(x_4055.z, x_4055.z)) + x_4058);
          let x_4060 : vec2<f32> = u_xlat56;
          let x_4061 : i32 = u_xlati52;
          let x_4064 : i32 = u_xlati52;
          let x_4068 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_4061 + 3i) / 4i)][((x_4064 + 3i) % 4i)];
          u_xlat56 = (x_4060 + vec2<f32>(x_4068.x, x_4068.y));
          let x_4071 : vec2<f32> = u_xlat56;
          u_xlat56 = ((x_4071 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4074 : vec2<f32> = u_xlat56;
          u_xlat56 = fract(x_4074);
          let x_4076 : u32 = u_xlatu68;
          let x_4079 : vec4<f32> = x_3898.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4076)];
          let x_4081 : vec2<f32> = u_xlat56;
          let x_4083 : u32 = u_xlatu68;
          let x_4086 : vec4<f32> = x_3898.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4083)];
          let x_4088 : vec2<f32> = ((vec2<f32>(x_4079.x, x_4079.y) * x_4081) + vec2<f32>(x_4086.z, x_4086.w));
          let x_4089 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4088.x, x_4088.y, x_4089.z, x_4089.w);
        } else {
          let x_4092 : vec3<f32> = vs_INTERP0;
          let x_4094 : i32 = u_xlati52;
          let x_4097 : i32 = u_xlati52;
          let x_4101 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_4094 + 1i) / 4i)][((x_4097 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_4092.y, x_4092.y, x_4092.y, x_4092.y) * x_4101);
          let x_4103 : i32 = u_xlati52;
          let x_4105 : i32 = u_xlati52;
          let x_4108 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[(x_4103 / 4i)][(x_4105 % 4i)];
          let x_4109 : vec3<f32> = vs_INTERP0;
          let x_4112 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4108 * vec4<f32>(x_4109.x, x_4109.x, x_4109.x, x_4109.x)) + x_4112);
          let x_4114 : i32 = u_xlati52;
          let x_4117 : i32 = u_xlati52;
          let x_4121 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_4114 + 2i) / 4i)][((x_4117 + 2i) % 4i)];
          let x_4122 : vec3<f32> = vs_INTERP0;
          let x_4125 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4121 * vec4<f32>(x_4122.z, x_4122.z, x_4122.z, x_4122.z)) + x_4125);
          let x_4127 : vec4<f32> = u_xlat13;
          let x_4128 : i32 = u_xlati52;
          let x_4131 : i32 = u_xlati52;
          let x_4135 : vec4<f32> = x_3898.x_AdditionalLightsWorldToLights[((x_4128 + 3i) / 4i)][((x_4131 + 3i) % 4i)];
          u_xlat13 = (x_4127 + x_4135);
          let x_4137 : vec4<f32> = u_xlat13;
          let x_4139 : vec4<f32> = u_xlat13;
          let x_4141 : vec3<f32> = (vec3<f32>(x_4137.x, x_4137.y, x_4137.z) / vec3<f32>(x_4139.w, x_4139.w, x_4139.w));
          let x_4142 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4141.x, x_4141.y, x_4141.z, x_4142.w);
          let x_4144 : vec4<f32> = u_xlat13;
          let x_4146 : vec4<f32> = u_xlat13;
          u_xlat71 = dot(vec3<f32>(x_4144.x, x_4144.y, x_4144.z), vec3<f32>(x_4146.x, x_4146.y, x_4146.z));
          let x_4149 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4149);
          let x_4151 : f32 = u_xlat71;
          let x_4153 : vec4<f32> = u_xlat13;
          let x_4155 : vec3<f32> = (vec3<f32>(x_4151, x_4151, x_4151) * vec3<f32>(x_4153.x, x_4153.y, x_4153.z));
          let x_4156 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4155.x, x_4155.y, x_4155.z, x_4156.w);
          let x_4158 : vec4<f32> = u_xlat13;
          u_xlat71 = dot(abs(vec3<f32>(x_4158.x, x_4158.y, x_4158.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4163 : f32 = u_xlat71;
          u_xlat71 = max(x_4163, 0.000001f);
          let x_4166 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4166);
          let x_4168 : f32 = u_xlat71;
          let x_4170 : vec4<f32> = u_xlat13;
          let x_4172 : vec3<f32> = (vec3<f32>(x_4168, x_4168, x_4168) * vec3<f32>(x_4170.z, x_4170.x, x_4170.y));
          let x_4173 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4172.x, x_4172.y, x_4172.z, x_4173.w);
          let x_4176 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4176);
          let x_4180 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4180, 0.0f, 1.0f);
          let x_4184 : vec4<f32> = u_xlat14;
          let x_4187 : vec4<bool> = (vec4<f32>(x_4184.y, x_4184.z, x_4184.y, x_4184.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb52 = vec2<bool>(x_4187.x, x_4187.y);
          let x_4190 : bool = u_xlatb52.x;
          if (x_4190) {
            let x_4195 : f32 = u_xlat14.x;
            x_4191 = x_4195;
          } else {
            let x_4198 : f32 = u_xlat14.x;
            x_4191 = -(x_4198);
          }
          let x_4200 : f32 = x_4191;
          u_xlat52.x = x_4200;
          let x_4203 : bool = u_xlatb52.y;
          if (x_4203) {
            let x_4208 : f32 = u_xlat14.x;
            x_4204 = x_4208;
          } else {
            let x_4211 : f32 = u_xlat14.x;
            x_4204 = -(x_4211);
          }
          let x_4213 : f32 = x_4204;
          u_xlat52.y = x_4213;
          let x_4215 : vec4<f32> = u_xlat13;
          let x_4217 : f32 = u_xlat71;
          let x_4220 : vec2<f32> = u_xlat52;
          u_xlat52 = ((vec2<f32>(x_4215.x, x_4215.y) * vec2<f32>(x_4217, x_4217)) + x_4220);
          let x_4222 : vec2<f32> = u_xlat52;
          u_xlat52 = ((x_4222 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4225 : vec2<f32> = u_xlat52;
          u_xlat52 = clamp(x_4225, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4229 : u32 = u_xlatu68;
          let x_4232 : vec4<f32> = x_3898.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4229)];
          let x_4234 : vec2<f32> = u_xlat52;
          let x_4236 : u32 = u_xlatu68;
          let x_4239 : vec4<f32> = x_3898.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4236)];
          let x_4241 : vec2<f32> = ((vec2<f32>(x_4232.x, x_4232.y) * x_4234) + vec2<f32>(x_4239.z, x_4239.w));
          let x_4242 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4241.x, x_4241.y, x_4242.z, x_4242.w);
        }
      }
      let x_4249 : vec4<f32> = u_xlat12;
      let x_4252 : f32 = x_66.x_GlobalMipBias.x;
      let x_4253 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4249.x, x_4249.y), x_4252);
      u_xlat12 = x_4253;
      let x_4255 : bool = u_xlatb8.y;
      if (x_4255) {
        let x_4260 : f32 = u_xlat12.w;
        x_4256 = x_4260;
      } else {
        let x_4263 : f32 = u_xlat12.x;
        x_4256 = x_4263;
      }
      let x_4264 : f32 = x_4256;
      u_xlat71 = x_4264;
      let x_4266 : bool = u_xlatb8.x;
      if (x_4266) {
        let x_4270 : vec4<f32> = u_xlat12;
        x_4267 = vec3<f32>(x_4270.x, x_4270.y, x_4270.z);
      } else {
        let x_4273 : f32 = u_xlat71;
        x_4267 = vec3<f32>(x_4273, x_4273, x_4273);
      }
      let x_4275 : vec3<f32> = x_4267;
      let x_4276 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4275.x, x_4275.y, x_4275.z, x_4276.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4282 : vec4<f32> = u_xlat12;
    let x_4284 : u32 = u_xlatu68;
    let x_4287 : vec4<f32> = x_3770.x_AdditionalLightsColor[bitcast<i32>(x_4284)];
    let x_4289 : vec3<f32> = (vec3<f32>(x_4282.x, x_4282.y, x_4282.z) * vec3<f32>(x_4287.x, x_4287.y, x_4287.z));
    let x_4290 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4289.x, x_4289.y, x_4289.z, x_4290.w);
    let x_4292 : vec2<f32> = u_xlat51;
    let x_4294 : vec4<f32> = u_xlat12;
    let x_4296 : vec3<f32> = (vec3<f32>(x_4292.x, x_4292.x, x_4292.x) * vec3<f32>(x_4294.x, x_4294.y, x_4294.z));
    let x_4297 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4296.x, x_4296.y, x_4296.z, x_4297.w);
    let x_4299 : vec4<f32> = u_xlat6;
    let x_4301 : vec4<f32> = u_xlat11;
    u_xlat68 = dot(vec3<f32>(x_4299.x, x_4299.y, x_4299.z), vec3<f32>(x_4301.x, x_4301.y, x_4301.z));
    let x_4304 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4304, 0.0f, 1.0f);
    let x_4306 : f32 = u_xlat68;
    let x_4308 : f32 = u_xlat3.x;
    u_xlat68 = (x_4306 * x_4308);
    let x_4310 : f32 = u_xlat68;
    let x_4312 : vec4<f32> = u_xlat12;
    let x_4314 : vec3<f32> = (vec3<f32>(x_4310, x_4310, x_4310) * vec3<f32>(x_4312.x, x_4312.y, x_4312.z));
    let x_4315 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4314.x, x_4314.y, x_4314.z, x_4315.w);
    let x_4317 : vec4<f32> = u_xlat10;
    let x_4319 : f32 = u_xlat70;
    let x_4322 : vec3<f32> = u_xlat25;
    let x_4323 : vec3<f32> = ((vec3<f32>(x_4317.x, x_4317.y, x_4317.z) * vec3<f32>(x_4319, x_4319, x_4319)) + x_4322);
    let x_4324 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4323.x, x_4323.y, x_4323.z, x_4324.w);
    let x_4326 : vec4<f32> = u_xlat10;
    let x_4328 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4326.x, x_4326.y, x_4326.z), vec3<f32>(x_4328.x, x_4328.y, x_4328.z));
    let x_4331 : f32 = u_xlat68;
    u_xlat68 = max(x_4331, 1.17549435e-37f);
    let x_4333 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4333);
    let x_4335 : f32 = u_xlat68;
    let x_4337 : vec4<f32> = u_xlat10;
    let x_4339 : vec3<f32> = (vec3<f32>(x_4335, x_4335, x_4335) * vec3<f32>(x_4337.x, x_4337.y, x_4337.z));
    let x_4340 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4339.x, x_4339.y, x_4339.z, x_4340.w);
    let x_4342 : vec4<f32> = u_xlat6;
    let x_4344 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4342.x, x_4342.y, x_4342.z), vec3<f32>(x_4344.x, x_4344.y, x_4344.z));
    let x_4347 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4347, 0.0f, 1.0f);
    let x_4349 : vec4<f32> = u_xlat11;
    let x_4351 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_4349.x, x_4349.y, x_4349.z), vec3<f32>(x_4351.x, x_4351.y, x_4351.z));
    let x_4356 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4356, 0.0f, 1.0f);
    let x_4359 : f32 = u_xlat68;
    let x_4360 : f32 = u_xlat68;
    u_xlat68 = (x_4359 * x_4360);
    let x_4362 : f32 = u_xlat68;
    let x_4364 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4362 * x_4364) + 1.000010014f);
    let x_4368 : f32 = u_xlat3.x;
    let x_4370 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4368 * x_4370);
    let x_4373 : f32 = u_xlat68;
    let x_4374 : f32 = u_xlat68;
    u_xlat68 = (x_4373 * x_4374);
    let x_4377 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4377, 0.100000001f);
    let x_4380 : f32 = u_xlat68;
    let x_4382 : f32 = u_xlat3.x;
    u_xlat68 = (x_4380 * x_4382);
    let x_4385 : f32 = u_xlat29.x;
    let x_4386 : f32 = u_xlat68;
    u_xlat68 = (x_4385 * x_4386);
    let x_4388 : f32 = u_xlat72;
    let x_4389 : f32 = u_xlat68;
    u_xlat68 = (x_4388 / x_4389);
    let x_4391 : f32 = u_xlat68;
    let x_4394 : vec3<f32> = u_xlat2;
    let x_4395 : vec3<f32> = ((vec3<f32>(x_4391, x_4391, x_4391) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4394);
    let x_4396 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4395.x, x_4395.y, x_4395.z, x_4396.w);
    let x_4398 : vec4<f32> = u_xlat10;
    let x_4400 : vec4<f32> = u_xlat12;
    let x_4403 : vec3<f32> = u_xlat31;
    u_xlat31 = ((vec3<f32>(x_4398.x, x_4398.y, x_4398.z) * vec3<f32>(x_4400.x, x_4400.y, x_4400.z)) + x_4403);

    continuing {
      let x_4405 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4405 + bitcast<u32>(1i));
    }
  }
  let x_4407 : vec4<f32> = u_xlat5;
  let x_4409 : vec4<f32> = u_xlat7;
  let x_4412 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4407.x, x_4407.y, x_4407.z) * vec3<f32>(x_4409.x, x_4409.x, x_4409.x)) + vec3<f32>(x_4412.x, x_4412.y, x_4412.z));
  let x_4415 : vec3<f32> = u_xlat31;
  let x_4416 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_4415 + x_4416);
  let x_4418 : vec4<f32> = vs_INTERP4;
  let x_4420 : vec3<f32> = u_xlat0;
  let x_4422 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4418.w, x_4418.w, x_4418.w) * x_4420) + x_4422);
  let x_4425 : f32 = u_xlat23.x;
  let x_4427 : f32 = u_xlat23.x;
  u_xlat66 = (x_4425 * -(x_4427));
  let x_4430 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4430);
  let x_4432 : vec3<f32> = u_xlat0;
  let x_4435 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_4432 + -(vec3<f32>(x_4435.x, x_4435.y, x_4435.z)));
  let x_4441 : f32 = u_xlat66;
  let x_4443 : vec3<f32> = u_xlat0;
  let x_4446 : vec4<f32> = x_66.unity_FogColor;
  let x_4448 : vec3<f32> = ((vec3<f32>(x_4441, x_4441, x_4441) * x_4443) + vec3<f32>(x_4446.x, x_4446.y, x_4446.z));
  let x_4449 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4448.x, x_4448.y, x_4448.z, x_4449.w);
  let x_4451 : bool = u_xlatb45;
  if (x_4451) {
    let x_4456 : f32 = u_xlat1.x;
    x_4452 = x_4456;
  } else {
    x_4452 = 1.0f;
  }
  let x_4458 : f32 = x_4452;
  SV_Target0.w = x_4458;
  let x_4464 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4466 : f32 = x_1752.unity_RenderingLayer.x;
  u_xlatu0 = (x_4464 & bitcast<u32>(x_4466));
  let x_4469 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4469);
  let x_4474 : f32 = u_xlat0.x;
  let x_4476 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4474 * x_4476);
  let x_4480 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4480, 0.0f, 1.0f);
  let x_4483 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4483.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

