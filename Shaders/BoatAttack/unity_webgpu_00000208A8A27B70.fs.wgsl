struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3491 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1688 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var x_3731 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1658 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1658 == 0.0f);
  let x_1661 : vec3<f32> = vs_INTERP0;
  let x_1665 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1661) + x_1665);
  let x_1667 : vec3<f32> = u_xlat25;
  let x_1668 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1667, x_1668);
  let x_1670 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1670);
  let x_1672 : f32 = u_xlat64;
  let x_1674 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1672, x_1672, x_1672) * x_1674);
  let x_1678 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat5.x = x_1678;
  let x_1681 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat5.y = x_1681;
  let x_1684 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat5.z = x_1684;
  let x_1687 : bool = u_xlatb22.x;
  if (x_1687) {
    let x_1691 : vec3<f32> = u_xlat25;
    x_1688 = x_1691;
  } else {
    let x_1693 : vec4<f32> = u_xlat5;
    x_1688 = vec3<f32>(x_1693.x, x_1693.y, x_1693.z);
  }
  let x_1695 : vec3<f32> = x_1688;
  u_xlat25 = x_1695;
  let x_1697 : f32 = vs_INTERP0.y;
  let x_1699 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat22.x = (x_1697 * x_1699);
  let x_1703 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1705 : f32 = vs_INTERP0.x;
  let x_1708 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1703 * x_1705) + x_1708);
  let x_1712 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1714 : f32 = vs_INTERP0.z;
  let x_1717 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1712 * x_1714) + x_1717);
  let x_1721 : f32 = u_xlat22.x;
  let x_1723 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat22.x = (x_1721 + x_1723);
  let x_1727 : f32 = u_xlat22.x;
  let x_1730 : f32 = x_66.x_ProjectionParams.y;
  u_xlat22.x = (-(x_1727) + -(x_1730));
  let x_1735 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_1735, 0.0f);
  let x_1739 : f32 = u_xlat22.x;
  let x_1742 : f32 = x_66.unity_FogParams.x;
  u_xlat22.x = (x_1739 * x_1742);
  let x_1752 : vec2<f32> = vs_INTERP5;
  let x_1754 : f32 = x_66.x_GlobalMipBias.x;
  let x_1755 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1752, x_1754);
  u_xlat5 = x_1755;
  let x_1760 : vec2<f32> = vs_INTERP5;
  let x_1762 : f32 = x_66.x_GlobalMipBias.x;
  let x_1763 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1760, x_1762);
  let x_1764 : vec3<f32> = vec3<f32>(x_1763.x, x_1763.y, x_1763.z);
  let x_1765 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1764.x, x_1764.y, x_1764.z, x_1765.w);
  let x_1767 : vec4<f32> = u_xlat5;
  let x_1770 : vec3<f32> = (vec3<f32>(x_1767.x, x_1767.y, x_1767.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1771 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1770.x, x_1770.y, x_1770.z, x_1771.w);
  let x_1773 : vec3<f32> = u_xlat24;
  let x_1774 : vec4<f32> = u_xlat5;
  u_xlat64 = dot(x_1773, vec3<f32>(x_1774.x, x_1774.y, x_1774.z));
  let x_1777 : f32 = u_xlat64;
  u_xlat64 = (x_1777 + 0.5f);
  let x_1779 : f32 = u_xlat64;
  let x_1781 : vec4<f32> = u_xlat6;
  let x_1783 : vec3<f32> = (vec3<f32>(x_1779, x_1779, x_1779) * vec3<f32>(x_1781.x, x_1781.y, x_1781.z));
  let x_1784 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1783.x, x_1783.y, x_1783.z, x_1784.w);
  let x_1787 : f32 = u_xlat5.w;
  u_xlat64 = max(x_1787, 0.0001f);
  let x_1789 : vec4<f32> = u_xlat5;
  let x_1791 : f32 = u_xlat64;
  let x_1793 : vec3<f32> = (vec3<f32>(x_1789.x, x_1789.y, x_1789.z) / vec3<f32>(x_1791, x_1791, x_1791));
  let x_1794 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1793.x, x_1793.y, x_1793.z, x_1794.w);
  let x_1797 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1798 : vec2<f32> = vec2<f32>(x_1797.x, x_1797.y);
  let x_1802 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1798.x, x_1798.y));
  let x_1803 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1802.x, x_1802.y, x_1803.z, x_1803.w);
  let x_1805 : vec4<f32> = u_xlat6;
  let x_1807 : vec4<f32> = hlslcc_FragCoord;
  let x_1809 : vec2<f32> = (vec2<f32>(x_1805.x, x_1805.y) * vec2<f32>(x_1807.x, x_1807.y));
  let x_1810 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1809.x, x_1809.y, x_1810.z, x_1810.w);
  let x_1813 : f32 = u_xlat6.y;
  let x_1816 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1819 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1813 * x_1816) + x_1819);
  let x_1821 : f32 = u_xlat64;
  u_xlat6.z = (-(x_1821) + 1.0f);
  let x_1826 : f32 = u_xlat3.x;
  u_xlat3.x = x_1826;
  let x_1829 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1829, 0.0f, 1.0f);
  let x_1833 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1833, 1.0f);
  let x_1836 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1836 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1841 : f32 = u_xlat3.x;
  u_xlat64 = (-(x_1841) + 1.0f);
  let x_1844 : f32 = u_xlat64;
  let x_1845 : f32 = u_xlat64;
  u_xlat65 = (x_1844 * x_1845);
  let x_1847 : f32 = u_xlat65;
  u_xlat65 = max(x_1847, 0.0078125f);
  let x_1851 : f32 = u_xlat65;
  let x_1852 : f32 = u_xlat65;
  u_xlat68 = (x_1851 * x_1852);
  let x_1855 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1855 + 0.040000021f);
  let x_1860 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1860, 1.0f);
  let x_1863 : f32 = u_xlat65;
  u_xlat27.x = ((x_1863 * 4.0f) + 2.0f);
  let x_1873 : vec4<f32> = u_xlat6;
  let x_1876 : f32 = x_66.x_GlobalMipBias.x;
  let x_1877 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1873.x, x_1873.z), x_1876);
  u_xlat6.x = x_1877.x;
  let x_1882 : f32 = u_xlat6.x;
  u_xlat48 = (x_1882 + -1.0f);
  let x_1886 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1887 : f32 = u_xlat48;
  u_xlat48 = ((x_1886 * x_1887) + 1.0f);
  let x_1891 : f32 = u_xlat6.x;
  let x_1893 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1891, x_1893);
  let x_1896 : bool = u_xlatb63;
  if (x_1896) {
    let x_1900 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1900 == 1.0f);
    let x_1902 : bool = u_xlatb63;
    if (x_1902) {
      let x_1906 : vec4<f32> = vs_INTERP9;
      let x_1909 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1906.x, x_1906.y, x_1906.x, x_1906.y) + x_1909);
      let x_1912 : vec4<f32> = u_xlat7;
      let x_1913 : vec2<f32> = vec2<f32>(x_1912.x, x_1912.y);
      let x_1915 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1913.x, x_1913.y, x_1915);
      let x_1922 : vec3<f32> = txVec30;
      let x_1924 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1922.xy, x_1922.z);
      u_xlat8.x = x_1924;
      let x_1927 : vec4<f32> = u_xlat7;
      let x_1928 : vec2<f32> = vec2<f32>(x_1927.z, x_1927.w);
      let x_1930 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1928.x, x_1928.y, x_1930);
      let x_1937 : vec3<f32> = txVec31;
      let x_1939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1937.xy, x_1937.z);
      u_xlat8.y = x_1939;
      let x_1941 : vec4<f32> = vs_INTERP9;
      let x_1944 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1941.x, x_1941.y, x_1941.x, x_1941.y) + x_1944);
      let x_1947 : vec4<f32> = u_xlat7;
      let x_1948 : vec2<f32> = vec2<f32>(x_1947.x, x_1947.y);
      let x_1950 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1948.x, x_1948.y, x_1950);
      let x_1957 : vec3<f32> = txVec32;
      let x_1959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1957.xy, x_1957.z);
      u_xlat8.z = x_1959;
      let x_1962 : vec4<f32> = u_xlat7;
      let x_1963 : vec2<f32> = vec2<f32>(x_1962.z, x_1962.w);
      let x_1965 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1963.x, x_1963.y, x_1965);
      let x_1972 : vec3<f32> = txVec33;
      let x_1974 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1972.xy, x_1972.z);
      u_xlat8.w = x_1974;
      let x_1976 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1976, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1981 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb69 = (x_1981 == 2.0f);
      let x_1983 : bool = u_xlatb69;
      if (x_1983) {
        let x_1986 : vec4<f32> = vs_INTERP9;
        let x_1989 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1992 : vec2<f32> = ((vec2<f32>(x_1986.x, x_1986.y) * vec2<f32>(x_1989.z, x_1989.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1993 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1992.x, x_1992.y, x_1993.z, x_1993.w);
        let x_1995 : vec4<f32> = u_xlat7;
        let x_1997 : vec2<f32> = floor(vec2<f32>(x_1995.x, x_1995.y));
        let x_1998 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1997.x, x_1997.y, x_1998.z, x_1998.w);
        let x_2000 : vec4<f32> = vs_INTERP9;
        let x_2003 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2006 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2000.x, x_2000.y) * vec2<f32>(x_2003.z, x_2003.w)) + -(vec2<f32>(x_2006.x, x_2006.y)));
        let x_2010 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2010.x, x_2010.x, x_2010.y, x_2010.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2013 : vec4<f32> = u_xlat8;
        let x_2015 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2013.x, x_2013.x, x_2013.z, x_2013.z) * vec4<f32>(x_2015.x, x_2015.x, x_2015.z, x_2015.z));
        let x_2018 : vec4<f32> = u_xlat9;
        let x_2020 : vec2<f32> = (vec2<f32>(x_2018.y, x_2018.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2021 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2020.x, x_2021.y, x_2020.y, x_2021.w);
        let x_2023 : vec4<f32> = u_xlat9;
        let x_2026 : vec2<f32> = u_xlat49;
        let x_2028 : vec2<f32> = ((vec2<f32>(x_2023.x, x_2023.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2026));
        let x_2029 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2028.x, x_2028.y, x_2029.z, x_2029.w);
        let x_2032 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2032) + vec2<f32>(1.0f, 1.0f));
        let x_2035 : vec2<f32> = u_xlat49;
        let x_2036 : vec2<f32> = min(x_2035, vec2<f32>(0.0f, 0.0f));
        let x_2037 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2036.x, x_2036.y, x_2037.z, x_2037.w);
        let x_2039 : vec4<f32> = u_xlat10;
        let x_2042 : vec4<f32> = u_xlat10;
        let x_2045 : vec2<f32> = u_xlat51;
        let x_2046 : vec2<f32> = ((-(vec2<f32>(x_2039.x, x_2039.y)) * vec2<f32>(x_2042.x, x_2042.y)) + x_2045);
        let x_2047 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2046.x, x_2046.y, x_2047.z, x_2047.w);
        let x_2049 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2049, vec2<f32>(0.0f, 0.0f));
        let x_2051 : vec2<f32> = u_xlat49;
        let x_2053 : vec2<f32> = u_xlat49;
        let x_2055 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2051) * x_2053) + vec2<f32>(x_2055.y, x_2055.w));
        let x_2058 : vec4<f32> = u_xlat10;
        let x_2060 : vec2<f32> = (vec2<f32>(x_2058.x, x_2058.y) + vec2<f32>(1.0f, 1.0f));
        let x_2061 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2060.x, x_2060.y, x_2061.z, x_2061.w);
        let x_2063 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2063 + vec2<f32>(1.0f, 1.0f));
        let x_2065 : vec4<f32> = u_xlat9;
        let x_2067 : vec2<f32> = (vec2<f32>(x_2065.x, x_2065.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2068 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2067.x, x_2067.y, x_2068.z, x_2068.w);
        let x_2070 : vec2<f32> = u_xlat51;
        let x_2071 : vec2<f32> = (x_2070 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2072 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2071.x, x_2071.y, x_2072.z, x_2072.w);
        let x_2074 : vec4<f32> = u_xlat10;
        let x_2076 : vec2<f32> = (vec2<f32>(x_2074.x, x_2074.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2077 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2076.x, x_2076.y, x_2077.z, x_2077.w);
        let x_2079 : vec2<f32> = u_xlat49;
        let x_2080 : vec2<f32> = (x_2079 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2081 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2080.x, x_2080.y, x_2081.z, x_2081.w);
        let x_2083 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2083.y, x_2083.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2087 : f32 = u_xlat10.x;
        u_xlat11.z = x_2087;
        let x_2090 : f32 = u_xlat49.x;
        u_xlat11.w = x_2090;
        let x_2093 : f32 = u_xlat12.x;
        u_xlat9.z = x_2093;
        let x_2096 : f32 = u_xlat8.x;
        u_xlat9.w = x_2096;
        let x_2098 : vec4<f32> = u_xlat9;
        let x_2100 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2098.z, x_2098.w, x_2098.x, x_2098.z) + vec4<f32>(x_2100.z, x_2100.w, x_2100.x, x_2100.z));
        let x_2104 : f32 = u_xlat11.y;
        u_xlat10.z = x_2104;
        let x_2107 : f32 = u_xlat49.y;
        u_xlat10.w = x_2107;
        let x_2110 : f32 = u_xlat9.y;
        u_xlat12.z = x_2110;
        let x_2113 : f32 = u_xlat8.z;
        u_xlat12.w = x_2113;
        let x_2115 : vec4<f32> = u_xlat10;
        let x_2117 : vec4<f32> = u_xlat12;
        let x_2119 : vec3<f32> = (vec3<f32>(x_2115.z, x_2115.y, x_2115.w) + vec3<f32>(x_2117.z, x_2117.y, x_2117.w));
        let x_2120 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2119.x, x_2119.y, x_2119.z, x_2120.w);
        let x_2122 : vec4<f32> = u_xlat9;
        let x_2124 : vec4<f32> = u_xlat13;
        let x_2126 : vec3<f32> = (vec3<f32>(x_2122.x, x_2122.z, x_2122.w) / vec3<f32>(x_2124.z, x_2124.w, x_2124.y));
        let x_2127 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2126.x, x_2126.y, x_2126.z, x_2127.w);
        let x_2129 : vec4<f32> = u_xlat9;
        let x_2131 : vec3<f32> = (vec3<f32>(x_2129.x, x_2129.y, x_2129.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2132 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2131.x, x_2131.y, x_2131.z, x_2132.w);
        let x_2134 : vec4<f32> = u_xlat12;
        let x_2136 : vec4<f32> = u_xlat8;
        let x_2138 : vec3<f32> = (vec3<f32>(x_2134.z, x_2134.y, x_2134.w) / vec3<f32>(x_2136.x, x_2136.y, x_2136.z));
        let x_2139 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2138.x, x_2138.y, x_2138.z, x_2139.w);
        let x_2141 : vec4<f32> = u_xlat10;
        let x_2143 : vec3<f32> = (vec3<f32>(x_2141.x, x_2141.y, x_2141.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2144 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2143.x, x_2143.y, x_2143.z, x_2144.w);
        let x_2146 : vec4<f32> = u_xlat9;
        let x_2149 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2151 : vec3<f32> = (vec3<f32>(x_2146.y, x_2146.x, x_2146.z) * vec3<f32>(x_2149.x, x_2149.x, x_2149.x));
        let x_2152 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2151.x, x_2151.y, x_2151.z, x_2152.w);
        let x_2154 : vec4<f32> = u_xlat10;
        let x_2157 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2159 : vec3<f32> = (vec3<f32>(x_2154.x, x_2154.y, x_2154.z) * vec3<f32>(x_2157.y, x_2157.y, x_2157.y));
        let x_2160 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2159.x, x_2159.y, x_2159.z, x_2160.w);
        let x_2163 : f32 = u_xlat10.x;
        u_xlat9.w = x_2163;
        let x_2165 : vec4<f32> = u_xlat7;
        let x_2168 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2171 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2165.x, x_2165.y, x_2165.x, x_2165.y) * vec4<f32>(x_2168.x, x_2168.y, x_2168.x, x_2168.y)) + vec4<f32>(x_2171.y, x_2171.w, x_2171.x, x_2171.w));
        let x_2174 : vec4<f32> = u_xlat7;
        let x_2177 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2180 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2174.x, x_2174.y) * vec2<f32>(x_2177.x, x_2177.y)) + vec2<f32>(x_2180.z, x_2180.w));
        let x_2184 : f32 = u_xlat9.y;
        u_xlat10.w = x_2184;
        let x_2186 : vec4<f32> = u_xlat10;
        let x_2187 : vec2<f32> = vec2<f32>(x_2186.y, x_2186.z);
        let x_2188 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2188.x, x_2187.x, x_2188.z, x_2187.y);
        let x_2190 : vec4<f32> = u_xlat7;
        let x_2193 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2196 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2190.x, x_2190.y, x_2190.x, x_2190.y) * vec4<f32>(x_2193.x, x_2193.y, x_2193.x, x_2193.y)) + vec4<f32>(x_2196.x, x_2196.y, x_2196.z, x_2196.y));
        let x_2199 : vec4<f32> = u_xlat7;
        let x_2202 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2205 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2199.x, x_2199.y, x_2199.x, x_2199.y) * vec4<f32>(x_2202.x, x_2202.y, x_2202.x, x_2202.y)) + vec4<f32>(x_2205.w, x_2205.y, x_2205.w, x_2205.z));
        let x_2208 : vec4<f32> = u_xlat7;
        let x_2211 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2214 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2208.x, x_2208.y, x_2208.x, x_2208.y) * vec4<f32>(x_2211.x, x_2211.y, x_2211.x, x_2211.y)) + vec4<f32>(x_2214.x, x_2214.w, x_2214.z, x_2214.w));
        let x_2217 : vec4<f32> = u_xlat8;
        let x_2219 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2217.x, x_2217.x, x_2217.x, x_2217.y) * vec4<f32>(x_2219.z, x_2219.w, x_2219.y, x_2219.z));
        let x_2222 : vec4<f32> = u_xlat8;
        let x_2224 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2222.y, x_2222.y, x_2222.z, x_2222.z) * x_2224);
        let x_2228 : f32 = u_xlat8.z;
        let x_2230 : f32 = u_xlat13.y;
        u_xlat69 = (x_2228 * x_2230);
        let x_2233 : vec4<f32> = u_xlat11;
        let x_2234 : vec2<f32> = vec2<f32>(x_2233.x, x_2233.y);
        let x_2236 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2234.x, x_2234.y, x_2236);
        let x_2243 : vec3<f32> = txVec34;
        let x_2245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2243.xy, x_2243.z);
        u_xlat7.x = x_2245;
        let x_2248 : vec4<f32> = u_xlat11;
        let x_2249 : vec2<f32> = vec2<f32>(x_2248.z, x_2248.w);
        let x_2251 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2249.x, x_2249.y, x_2251);
        let x_2258 : vec3<f32> = txVec35;
        let x_2260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2258.xy, x_2258.z);
        u_xlat28.x = x_2260;
        let x_2263 : f32 = u_xlat28.x;
        let x_2265 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2263 * x_2265);
        let x_2269 : f32 = u_xlat14.x;
        let x_2271 : f32 = u_xlat7.x;
        let x_2274 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2269 * x_2271) + x_2274);
        let x_2278 : vec2<f32> = u_xlat49;
        let x_2280 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2278.x, x_2278.y, x_2280);
        let x_2287 : vec3<f32> = txVec36;
        let x_2289 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2287.xy, x_2287.z);
        u_xlat28.x = x_2289;
        let x_2292 : f32 = u_xlat14.z;
        let x_2294 : f32 = u_xlat28.x;
        let x_2297 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2292 * x_2294) + x_2297);
        let x_2301 : vec4<f32> = u_xlat10;
        let x_2302 : vec2<f32> = vec2<f32>(x_2301.x, x_2301.y);
        let x_2304 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2302.x, x_2302.y, x_2304);
        let x_2311 : vec3<f32> = txVec37;
        let x_2313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2311.xy, x_2311.z);
        u_xlat28.x = x_2313;
        let x_2316 : f32 = u_xlat14.w;
        let x_2318 : f32 = u_xlat28.x;
        let x_2321 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2316 * x_2318) + x_2321);
        let x_2325 : vec4<f32> = u_xlat12;
        let x_2326 : vec2<f32> = vec2<f32>(x_2325.x, x_2325.y);
        let x_2328 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2326.x, x_2326.y, x_2328);
        let x_2335 : vec3<f32> = txVec38;
        let x_2337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2335.xy, x_2335.z);
        u_xlat28.x = x_2337;
        let x_2340 : f32 = u_xlat15.x;
        let x_2342 : f32 = u_xlat28.x;
        let x_2345 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2340 * x_2342) + x_2345);
        let x_2349 : vec4<f32> = u_xlat12;
        let x_2350 : vec2<f32> = vec2<f32>(x_2349.z, x_2349.w);
        let x_2352 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2350.x, x_2350.y, x_2352);
        let x_2359 : vec3<f32> = txVec39;
        let x_2361 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2359.xy, x_2359.z);
        u_xlat28.x = x_2361;
        let x_2364 : f32 = u_xlat15.y;
        let x_2366 : f32 = u_xlat28.x;
        let x_2369 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2364 * x_2366) + x_2369);
        let x_2373 : vec4<f32> = u_xlat10;
        let x_2374 : vec2<f32> = vec2<f32>(x_2373.z, x_2373.w);
        let x_2376 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2374.x, x_2374.y, x_2376);
        let x_2383 : vec3<f32> = txVec40;
        let x_2385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2383.xy, x_2383.z);
        u_xlat28.x = x_2385;
        let x_2388 : f32 = u_xlat15.z;
        let x_2390 : f32 = u_xlat28.x;
        let x_2393 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2388 * x_2390) + x_2393);
        let x_2397 : vec4<f32> = u_xlat9;
        let x_2398 : vec2<f32> = vec2<f32>(x_2397.x, x_2397.y);
        let x_2400 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2398.x, x_2398.y, x_2400);
        let x_2407 : vec3<f32> = txVec41;
        let x_2409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2407.xy, x_2407.z);
        u_xlat28.x = x_2409;
        let x_2412 : f32 = u_xlat15.w;
        let x_2414 : f32 = u_xlat28.x;
        let x_2417 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2412 * x_2414) + x_2417);
        let x_2421 : vec4<f32> = u_xlat9;
        let x_2422 : vec2<f32> = vec2<f32>(x_2421.z, x_2421.w);
        let x_2424 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2422.x, x_2422.y, x_2424);
        let x_2431 : vec3<f32> = txVec42;
        let x_2433 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2431.xy, x_2431.z);
        u_xlat28.x = x_2433;
        let x_2435 : f32 = u_xlat69;
        let x_2437 : f32 = u_xlat28.x;
        let x_2440 : f32 = u_xlat7.x;
        u_xlat63 = ((x_2435 * x_2437) + x_2440);
      } else {
        let x_2443 : vec4<f32> = vs_INTERP9;
        let x_2446 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2449 : vec2<f32> = ((vec2<f32>(x_2443.x, x_2443.y) * vec2<f32>(x_2446.z, x_2446.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2450 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2449.x, x_2449.y, x_2450.z, x_2450.w);
        let x_2452 : vec4<f32> = u_xlat7;
        let x_2454 : vec2<f32> = floor(vec2<f32>(x_2452.x, x_2452.y));
        let x_2455 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2454.x, x_2454.y, x_2455.z, x_2455.w);
        let x_2457 : vec4<f32> = vs_INTERP9;
        let x_2460 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2463 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2457.x, x_2457.y) * vec2<f32>(x_2460.z, x_2460.w)) + -(vec2<f32>(x_2463.x, x_2463.y)));
        let x_2467 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2467.x, x_2467.x, x_2467.y, x_2467.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2470 : vec4<f32> = u_xlat8;
        let x_2472 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2470.x, x_2470.x, x_2470.z, x_2470.z) * vec4<f32>(x_2472.x, x_2472.x, x_2472.z, x_2472.z));
        let x_2475 : vec4<f32> = u_xlat9;
        let x_2477 : vec2<f32> = (vec2<f32>(x_2475.y, x_2475.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2478.x, x_2477.x, x_2478.z, x_2477.y);
        let x_2480 : vec4<f32> = u_xlat9;
        let x_2483 : vec2<f32> = u_xlat49;
        let x_2485 : vec2<f32> = ((vec2<f32>(x_2480.x, x_2480.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2483));
        let x_2486 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2485.x, x_2486.y, x_2485.y, x_2486.w);
        let x_2488 : vec2<f32> = u_xlat49;
        let x_2490 : vec2<f32> = (-(x_2488) + vec2<f32>(1.0f, 1.0f));
        let x_2491 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2490.x, x_2490.y, x_2491.z, x_2491.w);
        let x_2493 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2493, vec2<f32>(0.0f, 0.0f));
        let x_2495 : vec2<f32> = u_xlat51;
        let x_2497 : vec2<f32> = u_xlat51;
        let x_2499 : vec4<f32> = u_xlat9;
        let x_2501 : vec2<f32> = ((-(x_2495) * x_2497) + vec2<f32>(x_2499.x, x_2499.y));
        let x_2502 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2501.x, x_2501.y, x_2502.z, x_2502.w);
        let x_2504 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2504, vec2<f32>(0.0f, 0.0f));
        let x_2507 : vec2<f32> = u_xlat51;
        let x_2509 : vec2<f32> = u_xlat51;
        let x_2511 : vec4<f32> = u_xlat8;
        let x_2513 : vec2<f32> = ((-(x_2507) * x_2509) + vec2<f32>(x_2511.y, x_2511.w));
        let x_2514 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2513.x, x_2514.y, x_2513.y);
        let x_2516 : vec4<f32> = u_xlat9;
        let x_2518 : vec2<f32> = (vec2<f32>(x_2516.x, x_2516.y) + vec2<f32>(2.0f, 2.0f));
        let x_2519 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2518.x, x_2518.y, x_2519.z, x_2519.w);
        let x_2521 : vec3<f32> = u_xlat29;
        let x_2523 : vec2<f32> = (vec2<f32>(x_2521.x, x_2521.z) + vec2<f32>(2.0f, 2.0f));
        let x_2524 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2524.x, x_2523.x, x_2524.z, x_2523.y);
        let x_2527 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2527 * 0.081632003f);
        let x_2530 : vec4<f32> = u_xlat8;
        let x_2532 : vec3<f32> = (vec3<f32>(x_2530.z, x_2530.x, x_2530.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2533 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2532.x, x_2532.y, x_2532.z, x_2533.w);
        let x_2535 : vec4<f32> = u_xlat9;
        let x_2537 : vec2<f32> = (vec2<f32>(x_2535.x, x_2535.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2538 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2537.x, x_2537.y, x_2538.z, x_2538.w);
        let x_2541 : f32 = u_xlat12.y;
        u_xlat11.x = x_2541;
        let x_2543 : vec2<f32> = u_xlat49;
        let x_2546 : vec2<f32> = ((vec2<f32>(x_2543.x, x_2543.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2547 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2547.x, x_2546.x, x_2547.z, x_2546.y);
        let x_2549 : vec2<f32> = u_xlat49;
        let x_2552 : vec2<f32> = ((vec2<f32>(x_2549.x, x_2549.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2553 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2552.x, x_2553.y, x_2552.y, x_2553.w);
        let x_2556 : f32 = u_xlat8.x;
        u_xlat9.y = x_2556;
        let x_2559 : f32 = u_xlat10.y;
        u_xlat9.w = x_2559;
        let x_2561 : vec4<f32> = u_xlat9;
        let x_2562 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2561 + x_2562);
        let x_2564 : vec2<f32> = u_xlat49;
        let x_2567 : vec2<f32> = ((vec2<f32>(x_2564.y, x_2564.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2568 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2568.x, x_2567.x, x_2568.z, x_2567.y);
        let x_2570 : vec2<f32> = u_xlat49;
        let x_2573 : vec2<f32> = ((vec2<f32>(x_2570.y, x_2570.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2574 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2573.x, x_2574.y, x_2573.y, x_2574.w);
        let x_2577 : f32 = u_xlat8.y;
        u_xlat10.y = x_2577;
        let x_2579 : vec4<f32> = u_xlat10;
        let x_2580 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2579 + x_2580);
        let x_2582 : vec4<f32> = u_xlat9;
        let x_2583 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2582 / x_2583);
        let x_2585 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2585 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2587 : vec4<f32> = u_xlat10;
        let x_2588 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2587 / x_2588);
        let x_2590 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2590 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2592 : vec4<f32> = u_xlat9;
        let x_2595 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2592.w, x_2592.x, x_2592.y, x_2592.z) * vec4<f32>(x_2595.x, x_2595.x, x_2595.x, x_2595.x));
        let x_2598 : vec4<f32> = u_xlat10;
        let x_2601 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2598.x, x_2598.w, x_2598.y, x_2598.z) * vec4<f32>(x_2601.y, x_2601.y, x_2601.y, x_2601.y));
        let x_2604 : vec4<f32> = u_xlat9;
        let x_2605 : vec3<f32> = vec3<f32>(x_2604.y, x_2604.z, x_2604.w);
        let x_2606 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2605.x, x_2606.y, x_2605.y, x_2605.z);
        let x_2609 : f32 = u_xlat10.x;
        u_xlat12.y = x_2609;
        let x_2611 : vec4<f32> = u_xlat7;
        let x_2614 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2617 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2611.x, x_2611.y, x_2611.x, x_2611.y) * vec4<f32>(x_2614.x, x_2614.y, x_2614.x, x_2614.y)) + vec4<f32>(x_2617.x, x_2617.y, x_2617.z, x_2617.y));
        let x_2620 : vec4<f32> = u_xlat7;
        let x_2623 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2626 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2620.x, x_2620.y) * vec2<f32>(x_2623.x, x_2623.y)) + vec2<f32>(x_2626.w, x_2626.y));
        let x_2630 : f32 = u_xlat12.y;
        u_xlat9.y = x_2630;
        let x_2633 : f32 = u_xlat10.z;
        u_xlat12.y = x_2633;
        let x_2635 : vec4<f32> = u_xlat7;
        let x_2638 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2641 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2635.x, x_2635.y, x_2635.x, x_2635.y) * vec4<f32>(x_2638.x, x_2638.y, x_2638.x, x_2638.y)) + vec4<f32>(x_2641.x, x_2641.y, x_2641.z, x_2641.y));
        let x_2644 : vec4<f32> = u_xlat7;
        let x_2647 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2650 : vec4<f32> = u_xlat12;
        let x_2652 : vec2<f32> = ((vec2<f32>(x_2644.x, x_2644.y) * vec2<f32>(x_2647.x, x_2647.y)) + vec2<f32>(x_2650.w, x_2650.y));
        let x_2653 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2652.x, x_2652.y, x_2653.z, x_2653.w);
        let x_2656 : f32 = u_xlat12.y;
        u_xlat9.z = x_2656;
        let x_2658 : vec4<f32> = u_xlat7;
        let x_2661 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2664 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2658.x, x_2658.y, x_2658.x, x_2658.y) * vec4<f32>(x_2661.x, x_2661.y, x_2661.x, x_2661.y)) + vec4<f32>(x_2664.x, x_2664.y, x_2664.x, x_2664.z));
        let x_2668 : f32 = u_xlat10.w;
        u_xlat12.y = x_2668;
        let x_2670 : vec4<f32> = u_xlat7;
        let x_2673 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2676 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2670.x, x_2670.y, x_2670.x, x_2670.y) * vec4<f32>(x_2673.x, x_2673.y, x_2673.x, x_2673.y)) + vec4<f32>(x_2676.x, x_2676.y, x_2676.z, x_2676.y));
        let x_2680 : vec4<f32> = u_xlat7;
        let x_2683 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2686 : vec4<f32> = u_xlat12;
        let x_2688 : vec2<f32> = ((vec2<f32>(x_2680.x, x_2680.y) * vec2<f32>(x_2683.x, x_2683.y)) + vec2<f32>(x_2686.w, x_2686.y));
        let x_2689 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2688.x, x_2688.y, x_2689.z);
        let x_2692 : f32 = u_xlat12.y;
        u_xlat9.w = x_2692;
        let x_2695 : vec4<f32> = u_xlat7;
        let x_2698 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2701 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2695.x, x_2695.y) * vec2<f32>(x_2698.x, x_2698.y)) + vec2<f32>(x_2701.x, x_2701.w));
        let x_2704 : vec4<f32> = u_xlat12;
        let x_2705 : vec3<f32> = vec3<f32>(x_2704.x, x_2704.z, x_2704.w);
        let x_2706 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2705.x, x_2706.y, x_2705.y, x_2705.z);
        let x_2708 : vec4<f32> = u_xlat7;
        let x_2711 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2714 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2708.x, x_2708.y, x_2708.x, x_2708.y) * vec4<f32>(x_2711.x, x_2711.y, x_2711.x, x_2711.y)) + vec4<f32>(x_2714.x, x_2714.y, x_2714.z, x_2714.y));
        let x_2718 : vec4<f32> = u_xlat7;
        let x_2721 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2724 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2718.x, x_2718.y) * vec2<f32>(x_2721.x, x_2721.y)) + vec2<f32>(x_2724.w, x_2724.y));
        let x_2728 : f32 = u_xlat9.x;
        u_xlat10.x = x_2728;
        let x_2730 : vec4<f32> = u_xlat7;
        let x_2733 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2736 : vec4<f32> = u_xlat10;
        let x_2738 : vec2<f32> = ((vec2<f32>(x_2730.x, x_2730.y) * vec2<f32>(x_2733.x, x_2733.y)) + vec2<f32>(x_2736.x, x_2736.y));
        let x_2739 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2738.x, x_2738.y, x_2739.z, x_2739.w);
        let x_2741 : vec4<f32> = u_xlat8;
        let x_2743 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2741.x, x_2741.x, x_2741.x, x_2741.x) * x_2743);
        let x_2746 : vec4<f32> = u_xlat8;
        let x_2748 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2746.y, x_2746.y, x_2746.y, x_2746.y) * x_2748);
        let x_2751 : vec4<f32> = u_xlat8;
        let x_2753 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2751.z, x_2751.z, x_2751.z, x_2751.z) * x_2753);
        let x_2755 : vec4<f32> = u_xlat8;
        let x_2757 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2755.w, x_2755.w, x_2755.w, x_2755.w) * x_2757);
        let x_2760 : vec4<f32> = u_xlat13;
        let x_2761 : vec2<f32> = vec2<f32>(x_2760.x, x_2760.y);
        let x_2763 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2761.x, x_2761.y, x_2763);
        let x_2770 : vec3<f32> = txVec43;
        let x_2772 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2770.xy, x_2770.z);
        u_xlat69 = x_2772;
        let x_2774 : vec4<f32> = u_xlat13;
        let x_2775 : vec2<f32> = vec2<f32>(x_2774.z, x_2774.w);
        let x_2777 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2775.x, x_2775.y, x_2777);
        let x_2784 : vec3<f32> = txVec44;
        let x_2786 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2784.xy, x_2784.z);
        u_xlat9.x = x_2786;
        let x_2789 : f32 = u_xlat9.x;
        let x_2791 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2789 * x_2791);
        let x_2795 : f32 = u_xlat18.x;
        let x_2796 : f32 = u_xlat69;
        let x_2799 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2795 * x_2796) + x_2799);
        let x_2802 : vec2<f32> = u_xlat49;
        let x_2804 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2802.x, x_2802.y, x_2804);
        let x_2811 : vec3<f32> = txVec45;
        let x_2813 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2811.xy, x_2811.z);
        u_xlat49.x = x_2813;
        let x_2816 : f32 = u_xlat18.z;
        let x_2818 : f32 = u_xlat49.x;
        let x_2820 : f32 = u_xlat69;
        u_xlat69 = ((x_2816 * x_2818) + x_2820);
        let x_2823 : vec4<f32> = u_xlat16;
        let x_2824 : vec2<f32> = vec2<f32>(x_2823.x, x_2823.y);
        let x_2826 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2824.x, x_2824.y, x_2826);
        let x_2833 : vec3<f32> = txVec46;
        let x_2835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2833.xy, x_2833.z);
        u_xlat49.x = x_2835;
        let x_2838 : f32 = u_xlat18.w;
        let x_2840 : f32 = u_xlat49.x;
        let x_2842 : f32 = u_xlat69;
        u_xlat69 = ((x_2838 * x_2840) + x_2842);
        let x_2845 : vec4<f32> = u_xlat14;
        let x_2846 : vec2<f32> = vec2<f32>(x_2845.x, x_2845.y);
        let x_2848 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2846.x, x_2846.y, x_2848);
        let x_2855 : vec3<f32> = txVec47;
        let x_2857 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2855.xy, x_2855.z);
        u_xlat49.x = x_2857;
        let x_2860 : f32 = u_xlat19.x;
        let x_2862 : f32 = u_xlat49.x;
        let x_2864 : f32 = u_xlat69;
        u_xlat69 = ((x_2860 * x_2862) + x_2864);
        let x_2867 : vec4<f32> = u_xlat14;
        let x_2868 : vec2<f32> = vec2<f32>(x_2867.z, x_2867.w);
        let x_2870 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2868.x, x_2868.y, x_2870);
        let x_2877 : vec3<f32> = txVec48;
        let x_2879 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2877.xy, x_2877.z);
        u_xlat49.x = x_2879;
        let x_2882 : f32 = u_xlat19.y;
        let x_2884 : f32 = u_xlat49.x;
        let x_2886 : f32 = u_xlat69;
        u_xlat69 = ((x_2882 * x_2884) + x_2886);
        let x_2889 : vec4<f32> = u_xlat15;
        let x_2890 : vec2<f32> = vec2<f32>(x_2889.x, x_2889.y);
        let x_2892 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2890.x, x_2890.y, x_2892);
        let x_2899 : vec3<f32> = txVec49;
        let x_2901 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2899.xy, x_2899.z);
        u_xlat49.x = x_2901;
        let x_2904 : f32 = u_xlat19.z;
        let x_2906 : f32 = u_xlat49.x;
        let x_2908 : f32 = u_xlat69;
        u_xlat69 = ((x_2904 * x_2906) + x_2908);
        let x_2911 : vec4<f32> = u_xlat16;
        let x_2912 : vec2<f32> = vec2<f32>(x_2911.z, x_2911.w);
        let x_2914 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2912.x, x_2912.y, x_2914);
        let x_2921 : vec3<f32> = txVec50;
        let x_2923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2921.xy, x_2921.z);
        u_xlat49.x = x_2923;
        let x_2926 : f32 = u_xlat19.w;
        let x_2928 : f32 = u_xlat49.x;
        let x_2930 : f32 = u_xlat69;
        u_xlat69 = ((x_2926 * x_2928) + x_2930);
        let x_2933 : vec4<f32> = u_xlat17;
        let x_2934 : vec2<f32> = vec2<f32>(x_2933.x, x_2933.y);
        let x_2936 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2934.x, x_2934.y, x_2936);
        let x_2943 : vec3<f32> = txVec51;
        let x_2945 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2943.xy, x_2943.z);
        u_xlat49.x = x_2945;
        let x_2948 : f32 = u_xlat20.x;
        let x_2950 : f32 = u_xlat49.x;
        let x_2952 : f32 = u_xlat69;
        u_xlat69 = ((x_2948 * x_2950) + x_2952);
        let x_2955 : vec4<f32> = u_xlat17;
        let x_2956 : vec2<f32> = vec2<f32>(x_2955.z, x_2955.w);
        let x_2958 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2956.x, x_2956.y, x_2958);
        let x_2965 : vec3<f32> = txVec52;
        let x_2967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2965.xy, x_2965.z);
        u_xlat49.x = x_2967;
        let x_2970 : f32 = u_xlat20.y;
        let x_2972 : f32 = u_xlat49.x;
        let x_2974 : f32 = u_xlat69;
        u_xlat69 = ((x_2970 * x_2972) + x_2974);
        let x_2977 : vec3<f32> = u_xlat30;
        let x_2978 : vec2<f32> = vec2<f32>(x_2977.x, x_2977.y);
        let x_2980 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2978.x, x_2978.y, x_2980);
        let x_2987 : vec3<f32> = txVec53;
        let x_2989 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2987.xy, x_2987.z);
        u_xlat49.x = x_2989;
        let x_2992 : f32 = u_xlat20.z;
        let x_2994 : f32 = u_xlat49.x;
        let x_2996 : f32 = u_xlat69;
        u_xlat69 = ((x_2992 * x_2994) + x_2996);
        let x_2999 : vec2<f32> = u_xlat57;
        let x_3001 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2999.x, x_2999.y, x_3001);
        let x_3008 : vec3<f32> = txVec54;
        let x_3010 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3008.xy, x_3008.z);
        u_xlat49.x = x_3010;
        let x_3013 : f32 = u_xlat20.w;
        let x_3015 : f32 = u_xlat49.x;
        let x_3017 : f32 = u_xlat69;
        u_xlat69 = ((x_3013 * x_3015) + x_3017);
        let x_3020 : vec4<f32> = u_xlat12;
        let x_3021 : vec2<f32> = vec2<f32>(x_3020.x, x_3020.y);
        let x_3023 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3021.x, x_3021.y, x_3023);
        let x_3030 : vec3<f32> = txVec55;
        let x_3032 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3030.xy, x_3030.z);
        u_xlat49.x = x_3032;
        let x_3035 : f32 = u_xlat8.x;
        let x_3037 : f32 = u_xlat49.x;
        let x_3039 : f32 = u_xlat69;
        u_xlat69 = ((x_3035 * x_3037) + x_3039);
        let x_3042 : vec4<f32> = u_xlat12;
        let x_3043 : vec2<f32> = vec2<f32>(x_3042.z, x_3042.w);
        let x_3045 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3043.x, x_3043.y, x_3045);
        let x_3052 : vec3<f32> = txVec56;
        let x_3054 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3052.xy, x_3052.z);
        u_xlat49.x = x_3054;
        let x_3057 : f32 = u_xlat8.y;
        let x_3059 : f32 = u_xlat49.x;
        let x_3061 : f32 = u_xlat69;
        u_xlat69 = ((x_3057 * x_3059) + x_3061);
        let x_3064 : vec2<f32> = u_xlat52;
        let x_3066 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3064.x, x_3064.y, x_3066);
        let x_3073 : vec3<f32> = txVec57;
        let x_3075 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3073.xy, x_3073.z);
        u_xlat49.x = x_3075;
        let x_3078 : f32 = u_xlat8.z;
        let x_3080 : f32 = u_xlat49.x;
        let x_3082 : f32 = u_xlat69;
        u_xlat69 = ((x_3078 * x_3080) + x_3082);
        let x_3085 : vec4<f32> = u_xlat7;
        let x_3086 : vec2<f32> = vec2<f32>(x_3085.x, x_3085.y);
        let x_3088 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3086.x, x_3086.y, x_3088);
        let x_3095 : vec3<f32> = txVec58;
        let x_3097 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3095.xy, x_3095.z);
        u_xlat7.x = x_3097;
        let x_3100 : f32 = u_xlat8.w;
        let x_3102 : f32 = u_xlat7.x;
        let x_3104 : f32 = u_xlat69;
        u_xlat63 = ((x_3100 * x_3102) + x_3104);
      }
    }
  } else {
    let x_3108 : vec4<f32> = vs_INTERP9;
    let x_3109 : vec2<f32> = vec2<f32>(x_3108.x, x_3108.y);
    let x_3111 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3109.x, x_3109.y, x_3111);
    let x_3118 : vec3<f32> = txVec59;
    let x_3120 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3118.xy, x_3118.z);
    u_xlat63 = x_3120;
  }
  let x_3121 : f32 = u_xlat63;
  let x_3123 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3126 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3121 * x_3123) + x_3126);
  let x_3130 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3130);
  let x_3133 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3133 >= 1.0f);
  let x_3135 : bool = u_xlatb4;
  let x_3136 : bool = u_xlatb69;
  u_xlatb4 = (x_3135 | x_3136);
  let x_3138 : bool = u_xlatb4;
  let x_3139 : f32 = u_xlat63;
  u_xlat63 = select(x_3139, 1.0f, x_3138);
  let x_3141 : vec3<f32> = vs_INTERP0;
  let x_3143 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3145 : vec3<f32> = (x_3141 + -(x_3143));
  let x_3146 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3145.x, x_3145.y, x_3145.z, x_3146.w);
  let x_3148 : vec4<f32> = u_xlat7;
  let x_3150 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3148.x, x_3148.y, x_3148.z), vec3<f32>(x_3150.x, x_3150.y, x_3150.z));
  let x_3155 : f32 = u_xlat4.x;
  let x_3157 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3160 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3155 * x_3157) + x_3160);
  let x_3164 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3164, 0.0f, 1.0f);
  let x_3167 : f32 = u_xlat63;
  u_xlat69 = (-(x_3167) + 1.0f);
  let x_3171 : f32 = u_xlat4.x;
  let x_3172 : f32 = u_xlat69;
  let x_3174 : f32 = u_xlat63;
  u_xlat63 = ((x_3171 * x_3172) + x_3174);
  let x_3176 : f32 = u_xlat48;
  let x_3179 : vec4<f32> = x_66.x_MainLightColor;
  let x_3181 : vec3<f32> = (vec3<f32>(x_3176, x_3176, x_3176) * vec3<f32>(x_3179.x, x_3179.y, x_3179.z));
  let x_3182 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3181.x, x_3181.y, x_3181.z, x_3182.w);
  let x_3184 : vec3<f32> = u_xlat25;
  let x_3186 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(x_3184), x_3186);
  let x_3190 : f32 = u_xlat4.x;
  let x_3192 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3190 + x_3192);
  let x_3195 : vec3<f32> = u_xlat24;
  let x_3196 : vec4<f32> = u_xlat4;
  let x_3200 : vec3<f32> = u_xlat25;
  let x_3202 : vec3<f32> = ((x_3195 * -(vec3<f32>(x_3196.x, x_3196.x, x_3196.x))) + -(x_3200));
  let x_3203 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3202.x, x_3202.y, x_3202.z, x_3203.w);
  let x_3205 : vec3<f32> = u_xlat24;
  let x_3206 : vec3<f32> = u_xlat25;
  u_xlat4.x = dot(x_3205, x_3206);
  let x_3210 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3210, 0.0f, 1.0f);
  let x_3214 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3214) + 1.0f);
  let x_3219 : f32 = u_xlat4.x;
  let x_3221 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3219 * x_3221);
  let x_3225 : f32 = u_xlat4.x;
  let x_3227 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3225 * x_3227);
  let x_3230 : f32 = u_xlat64;
  u_xlat69 = ((-(x_3230) * 0.699999988f) + 1.700000048f);
  let x_3236 : f32 = u_xlat64;
  let x_3237 : f32 = u_xlat69;
  u_xlat64 = (x_3236 * x_3237);
  let x_3239 : f32 = u_xlat64;
  u_xlat64 = (x_3239 * 6.0f);
  let x_3250 : vec4<f32> = u_xlat8;
  let x_3252 : f32 = u_xlat64;
  let x_3253 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3250.x, x_3250.y, x_3250.z), x_3252);
  u_xlat8 = x_3253;
  let x_3255 : f32 = u_xlat8.w;
  u_xlat64 = (x_3255 + -1.0f);
  let x_3258 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3259 : f32 = u_xlat64;
  u_xlat64 = ((x_3258 * x_3259) + 1.0f);
  let x_3262 : f32 = u_xlat64;
  u_xlat64 = max(x_3262, 0.0f);
  let x_3264 : f32 = u_xlat64;
  u_xlat64 = log2(x_3264);
  let x_3266 : f32 = u_xlat64;
  let x_3268 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat64 = (x_3266 * x_3268);
  let x_3270 : f32 = u_xlat64;
  u_xlat64 = exp2(x_3270);
  let x_3272 : f32 = u_xlat64;
  let x_3274 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat64 = (x_3272 * x_3274);
  let x_3276 : vec4<f32> = u_xlat8;
  let x_3278 : f32 = u_xlat64;
  let x_3280 : vec3<f32> = (vec3<f32>(x_3276.x, x_3276.y, x_3276.z) * vec3<f32>(x_3278, x_3278, x_3278));
  let x_3281 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3280.x, x_3280.y, x_3280.z, x_3281.w);
  let x_3283 : f32 = u_xlat65;
  let x_3285 : f32 = u_xlat65;
  let x_3289 : vec2<f32> = ((vec2<f32>(x_3283, x_3283) * vec2<f32>(x_3285, x_3285)) + vec2<f32>(-1.0f, 1.0f));
  let x_3290 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3289.x, x_3289.y, x_3290.z, x_3290.w);
  let x_3293 : f32 = u_xlat9.y;
  u_xlat64 = (1.0f / x_3293);
  let x_3296 : f32 = u_xlat3.x;
  u_xlat65 = (x_3296 + -0.039999999f);
  let x_3300 : f32 = u_xlat4.x;
  let x_3301 : f32 = u_xlat65;
  u_xlat65 = ((x_3300 * x_3301) + 0.039999999f);
  let x_3305 : f32 = u_xlat64;
  let x_3306 : f32 = u_xlat65;
  u_xlat64 = (x_3305 * x_3306);
  let x_3308 : f32 = u_xlat64;
  let x_3310 : vec4<f32> = u_xlat8;
  let x_3312 : vec3<f32> = (vec3<f32>(x_3308, x_3308, x_3308) * vec3<f32>(x_3310.x, x_3310.y, x_3310.z));
  let x_3313 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3312.x, x_3312.y, x_3312.z, x_3313.w);
  let x_3315 : vec4<f32> = u_xlat5;
  let x_3317 : vec3<f32> = u_xlat2;
  let x_3319 : vec4<f32> = u_xlat8;
  let x_3321 : vec3<f32> = ((vec3<f32>(x_3315.x, x_3315.y, x_3315.z) * x_3317) + vec3<f32>(x_3319.x, x_3319.y, x_3319.z));
  let x_3322 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3321.x, x_3321.y, x_3321.z, x_3322.w);
  let x_3324 : f32 = u_xlat63;
  let x_3326 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3324 * x_3326);
  let x_3328 : vec3<f32> = u_xlat24;
  let x_3330 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3328, vec3<f32>(x_3330.x, x_3330.y, x_3330.z));
  let x_3333 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3333, 0.0f, 1.0f);
  let x_3335 : f32 = u_xlat63;
  let x_3336 : f32 = u_xlat64;
  u_xlat63 = (x_3335 * x_3336);
  let x_3338 : f32 = u_xlat63;
  let x_3340 : vec4<f32> = u_xlat7;
  let x_3342 : vec3<f32> = (vec3<f32>(x_3338, x_3338, x_3338) * vec3<f32>(x_3340.x, x_3340.y, x_3340.z));
  let x_3343 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3342.x, x_3342.y, x_3342.z, x_3343.w);
  let x_3345 : vec3<f32> = u_xlat25;
  let x_3347 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3349 : vec3<f32> = (x_3345 + vec3<f32>(x_3347.x, x_3347.y, x_3347.z));
  let x_3350 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3349.x, x_3349.y, x_3349.z, x_3350.w);
  let x_3352 : vec4<f32> = u_xlat8;
  let x_3354 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3352.x, x_3352.y, x_3352.z), vec3<f32>(x_3354.x, x_3354.y, x_3354.z));
  let x_3357 : f32 = u_xlat63;
  u_xlat63 = max(x_3357, 1.17549435e-37f);
  let x_3360 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3360);
  let x_3362 : f32 = u_xlat63;
  let x_3364 : vec4<f32> = u_xlat8;
  let x_3366 : vec3<f32> = (vec3<f32>(x_3362, x_3362, x_3362) * vec3<f32>(x_3364.x, x_3364.y, x_3364.z));
  let x_3367 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3366.x, x_3366.y, x_3366.z, x_3367.w);
  let x_3369 : vec3<f32> = u_xlat24;
  let x_3370 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3369, vec3<f32>(x_3370.x, x_3370.y, x_3370.z));
  let x_3373 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3373, 0.0f, 1.0f);
  let x_3376 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3378 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3376.x, x_3376.y, x_3376.z), vec3<f32>(x_3378.x, x_3378.y, x_3378.z));
  let x_3381 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3381, 0.0f, 1.0f);
  let x_3383 : f32 = u_xlat63;
  let x_3384 : f32 = u_xlat63;
  u_xlat63 = (x_3383 * x_3384);
  let x_3386 : f32 = u_xlat63;
  let x_3388 : f32 = u_xlat9.x;
  u_xlat63 = ((x_3386 * x_3388) + 1.000010014f);
  let x_3392 : f32 = u_xlat64;
  let x_3393 : f32 = u_xlat64;
  u_xlat64 = (x_3392 * x_3393);
  let x_3395 : f32 = u_xlat63;
  let x_3396 : f32 = u_xlat63;
  u_xlat63 = (x_3395 * x_3396);
  let x_3398 : f32 = u_xlat64;
  u_xlat64 = max(x_3398, 0.100000001f);
  let x_3401 : f32 = u_xlat63;
  let x_3402 : f32 = u_xlat64;
  u_xlat63 = (x_3401 * x_3402);
  let x_3405 : f32 = u_xlat27.x;
  let x_3406 : f32 = u_xlat63;
  u_xlat63 = (x_3405 * x_3406);
  let x_3408 : f32 = u_xlat68;
  let x_3409 : f32 = u_xlat63;
  u_xlat63 = (x_3408 / x_3409);
  let x_3411 : f32 = u_xlat63;
  let x_3415 : vec3<f32> = u_xlat2;
  let x_3416 : vec3<f32> = ((vec3<f32>(x_3411, x_3411, x_3411) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3415);
  let x_3417 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3416.x, x_3416.y, x_3416.z, x_3417.w);
  let x_3419 : vec4<f32> = u_xlat7;
  let x_3421 : vec4<f32> = u_xlat8;
  let x_3423 : vec3<f32> = (vec3<f32>(x_3419.x, x_3419.y, x_3419.z) * vec3<f32>(x_3421.x, x_3421.y, x_3421.z));
  let x_3424 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3423.x, x_3423.y, x_3423.z, x_3424.w);
  let x_3427 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3429 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3427, x_3429);
  let x_3433 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3433));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3445 : u32 = u_xlatu_loop_1;
    let x_3446 : u32 = u_xlatu63;
    if ((x_3445 < x_3446)) {
    } else {
      break;
    }
    let x_3449 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3449 >> 2u);
    let x_3453 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3453 & 3u));
    let x_3456 : u32 = u_xlatu65;
    let x_3459 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3456)];
    let x_3469 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3474 : vec4<u32> = indexable[x_3469];
    u_xlat65 = dot(x_3459, bitcast<vec4<f32>>(x_3474));
    let x_3478 : f32 = u_xlat65;
    u_xlati65 = i32(x_3478);
    let x_3480 : vec3<f32> = vs_INTERP0;
    let x_3492 : i32 = u_xlati65;
    let x_3494 : vec4<f32> = x_3491.x_AdditionalLightsPosition[x_3492];
    let x_3497 : i32 = u_xlati65;
    let x_3499 : vec4<f32> = x_3491.x_AdditionalLightsPosition[x_3497];
    u_xlat30 = ((-(x_3480) * vec3<f32>(x_3494.w, x_3494.w, x_3494.w)) + vec3<f32>(x_3499.x, x_3499.y, x_3499.z));
    let x_3502 : vec3<f32> = u_xlat30;
    let x_3503 : vec3<f32> = u_xlat30;
    u_xlat3.x = dot(x_3502, x_3503);
    let x_3507 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3507, 6.10351562e-05f);
    let x_3512 : f32 = u_xlat3.x;
    u_xlat4.x = inverseSqrt(x_3512);
    let x_3515 : vec4<f32> = u_xlat4;
    let x_3517 : vec3<f32> = u_xlat30;
    let x_3518 : vec3<f32> = (vec3<f32>(x_3515.x, x_3515.x, x_3515.x) * x_3517);
    let x_3519 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3518.x, x_3518.y, x_3518.z, x_3519.w);
    let x_3522 : f32 = u_xlat3.x;
    u_xlat69 = (1.0f / x_3522);
    let x_3525 : f32 = u_xlat3.x;
    let x_3526 : i32 = u_xlati65;
    let x_3528 : f32 = x_3491.x_AdditionalLightsAttenuation[x_3526].x;
    u_xlat3.x = (x_3525 * x_3528);
    let x_3532 : f32 = u_xlat3.x;
    let x_3535 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3532) * x_3535) + 1.0f);
    let x_3540 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3540, 0.0f);
    let x_3544 : f32 = u_xlat3.x;
    let x_3546 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3544 * x_3546);
    let x_3550 : f32 = u_xlat3.x;
    let x_3551 : f32 = u_xlat69;
    u_xlat3.x = (x_3550 * x_3551);
    let x_3554 : i32 = u_xlati65;
    let x_3556 : vec4<f32> = x_3491.x_AdditionalLightsSpotDir[x_3554];
    let x_3558 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3556.x, x_3556.y, x_3556.z), vec3<f32>(x_3558.x, x_3558.y, x_3558.z));
    let x_3561 : f32 = u_xlat69;
    let x_3562 : i32 = u_xlati65;
    let x_3564 : f32 = x_3491.x_AdditionalLightsAttenuation[x_3562].z;
    let x_3566 : i32 = u_xlati65;
    let x_3568 : f32 = x_3491.x_AdditionalLightsAttenuation[x_3566].w;
    u_xlat69 = ((x_3561 * x_3564) + x_3568);
    let x_3570 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3570, 0.0f, 1.0f);
    let x_3572 : f32 = u_xlat69;
    let x_3573 : f32 = u_xlat69;
    u_xlat69 = (x_3572 * x_3573);
    let x_3576 : f32 = u_xlat3.x;
    let x_3577 : f32 = u_xlat69;
    u_xlat3.x = (x_3576 * x_3577);
    let x_3580 : f32 = u_xlat48;
    let x_3582 : i32 = u_xlati65;
    let x_3584 : vec4<f32> = x_3491.x_AdditionalLightsColor[x_3582];
    let x_3586 : vec3<f32> = (vec3<f32>(x_3580, x_3580, x_3580) * vec3<f32>(x_3584.x, x_3584.y, x_3584.z));
    let x_3587 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3586.x, x_3586.y, x_3586.z, x_3587.w);
    let x_3589 : vec3<f32> = u_xlat24;
    let x_3590 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(x_3589, vec3<f32>(x_3590.x, x_3590.y, x_3590.z));
    let x_3593 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3593, 0.0f, 1.0f);
    let x_3595 : f32 = u_xlat65;
    let x_3597 : f32 = u_xlat3.x;
    u_xlat65 = (x_3595 * x_3597);
    let x_3599 : f32 = u_xlat65;
    let x_3601 : vec4<f32> = u_xlat11;
    let x_3603 : vec3<f32> = (vec3<f32>(x_3599, x_3599, x_3599) * vec3<f32>(x_3601.x, x_3601.y, x_3601.z));
    let x_3604 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3603.x, x_3603.y, x_3603.z, x_3604.w);
    let x_3606 : vec3<f32> = u_xlat30;
    let x_3607 : vec4<f32> = u_xlat4;
    let x_3610 : vec3<f32> = u_xlat25;
    u_xlat30 = ((x_3606 * vec3<f32>(x_3607.x, x_3607.x, x_3607.x)) + x_3610);
    let x_3612 : vec3<f32> = u_xlat30;
    let x_3613 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(x_3612, x_3613);
    let x_3615 : f32 = u_xlat65;
    u_xlat65 = max(x_3615, 1.17549435e-37f);
    let x_3617 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3617);
    let x_3619 : f32 = u_xlat65;
    let x_3621 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_3619, x_3619, x_3619) * x_3621);
    let x_3623 : vec3<f32> = u_xlat24;
    let x_3624 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(x_3623, x_3624);
    let x_3626 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3626, 0.0f, 1.0f);
    let x_3628 : vec4<f32> = u_xlat10;
    let x_3630 : vec3<f32> = u_xlat30;
    u_xlat3.x = dot(vec3<f32>(x_3628.x, x_3628.y, x_3628.z), x_3630);
    let x_3634 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3634, 0.0f, 1.0f);
    let x_3637 : f32 = u_xlat65;
    let x_3638 : f32 = u_xlat65;
    u_xlat65 = (x_3637 * x_3638);
    let x_3640 : f32 = u_xlat65;
    let x_3642 : f32 = u_xlat9.x;
    u_xlat65 = ((x_3640 * x_3642) + 1.000010014f);
    let x_3646 : f32 = u_xlat3.x;
    let x_3648 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3646 * x_3648);
    let x_3651 : f32 = u_xlat65;
    let x_3652 : f32 = u_xlat65;
    u_xlat65 = (x_3651 * x_3652);
    let x_3655 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3655, 0.100000001f);
    let x_3658 : f32 = u_xlat65;
    let x_3660 : f32 = u_xlat3.x;
    u_xlat65 = (x_3658 * x_3660);
    let x_3663 : f32 = u_xlat27.x;
    let x_3664 : f32 = u_xlat65;
    u_xlat65 = (x_3663 * x_3664);
    let x_3666 : f32 = u_xlat68;
    let x_3667 : f32 = u_xlat65;
    u_xlat65 = (x_3666 / x_3667);
    let x_3669 : f32 = u_xlat65;
    let x_3672 : vec3<f32> = u_xlat2;
    u_xlat30 = ((vec3<f32>(x_3669, x_3669, x_3669) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3672);
    let x_3674 : vec3<f32> = u_xlat30;
    let x_3675 : vec4<f32> = u_xlat11;
    let x_3678 : vec4<f32> = u_xlat8;
    let x_3680 : vec3<f32> = ((x_3674 * vec3<f32>(x_3675.x, x_3675.y, x_3675.z)) + vec3<f32>(x_3678.x, x_3678.y, x_3678.z));
    let x_3681 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3680.x, x_3680.y, x_3680.z, x_3681.w);

    continuing {
      let x_3683 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3683 + bitcast<u32>(1i));
    }
  }
  let x_3685 : vec4<f32> = u_xlat5;
  let x_3687 : vec4<f32> = u_xlat6;
  let x_3690 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_3685.x, x_3685.y, x_3685.z) * vec3<f32>(x_3687.x, x_3687.x, x_3687.x)) + vec3<f32>(x_3690.x, x_3690.y, x_3690.z));
  let x_3693 : vec4<f32> = u_xlat8;
  let x_3695 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3693.x, x_3693.y, x_3693.z) + x_3695);
  let x_3697 : vec4<f32> = vs_INTERP4;
  let x_3699 : vec3<f32> = u_xlat0;
  let x_3701 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3697.w, x_3697.w, x_3697.w) * x_3699) + x_3701);
  let x_3704 : f32 = u_xlat22.x;
  let x_3706 : f32 = u_xlat22.x;
  u_xlat63 = (x_3704 * -(x_3706));
  let x_3709 : f32 = u_xlat63;
  u_xlat63 = exp2(x_3709);
  let x_3711 : vec3<f32> = u_xlat0;
  let x_3714 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_3711 + -(vec3<f32>(x_3714.x, x_3714.y, x_3714.z)));
  let x_3720 : f32 = u_xlat63;
  let x_3722 : vec3<f32> = u_xlat0;
  let x_3725 : vec4<f32> = x_66.unity_FogColor;
  let x_3727 : vec3<f32> = ((vec3<f32>(x_3720, x_3720, x_3720) * x_3722) + vec3<f32>(x_3725.x, x_3725.y, x_3725.z));
  let x_3728 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3727.x, x_3727.y, x_3727.z, x_3728.w);
  let x_3730 : bool = u_xlatb43;
  if (x_3730) {
    let x_3735 : f32 = u_xlat1.x;
    x_3731 = x_3735;
  } else {
    x_3731 = 1.0f;
  }
  let x_3737 : f32 = x_3731;
  SV_Target0.w = x_3737;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

