struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(4) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(5) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_283 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(7) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_620 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2295 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat41 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlatb4 : vec3<bool>;
  var u_xlat5 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlatb21 : vec3<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlatb20 : bool;
  var u_xlat40 : f32;
  var x_392 : f32;
  var x_405 : f32;
  var x_416 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat62 : f32;
  var u_xlat63 : f32;
  var u_xlat64 : f32;
  var u_xlat60 : f32;
  var u_xlatb63 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat66 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat65 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatu20 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu63 : u32;
  var u_xlati65 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati63 : i32;
  var u_xlat67 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat41 = (x_87 + x_90);
  let x_92 : f32 = u_xlat41;
  u_xlat41 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  let x_100 : vec3<f32> = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_100.x, x_100.y, x_100.z, x_101.w);
  let x_103 : vec4<f32> = u_xlat3;
  let x_105 : vec4<f32> = u_xlat3;
  let x_107 : vec3<f32> = (vec3<f32>(x_103.x, x_103.y, x_103.z) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_111 : vec3<f32> = u_xlat2;
  u_xlat4 = (-(x_111) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_114 : vec4<f32> = u_xlat3;
  let x_117 : vec3<f32> = u_xlat4;
  let x_119 : vec3<f32> = ((-(vec3<f32>(x_114.x, x_114.y, x_114.z)) * x_117) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_122 : vec4<f32> = u_xlat0;
  let x_124 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec3<f32>(x_122.x, x_122.y, x_122.z) + vec3<f32>(x_124.x, x_124.y, x_124.z));
  let x_127 : vec3<f32> = u_xlat2;
  let x_128 : vec3<f32> = u_xlat4;
  u_xlat2 = (x_127 * x_128);
  let x_136 : vec4<f32> = u_xlat0;
  let x_139 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_136.x, x_136.y, x_136.z, x_136.x));
  u_xlatb4 = vec3<bool>(x_139.x, x_139.y, x_139.z);
  let x_144 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_144);
  let x_149 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_149);
  let x_153 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_153);
  let x_157 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_157);
  let x_161 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_161);
  let x_165 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_165);
  let x_168 : vec4<f32> = u_xlat3;
  let x_170 : vec3<f32> = u_xlat4;
  let x_171 : vec3<f32> = (vec3<f32>(x_168.x, x_168.y, x_168.z) * x_170);
  let x_172 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_171.x, x_171.y, x_171.z, x_172.w);
  let x_174 : vec3<f32> = u_xlat2;
  let x_175 : vec4<f32> = u_xlat5;
  let x_178 : vec4<f32> = u_xlat3;
  u_xlat2 = ((x_174 * vec3<f32>(x_175.x, x_175.y, x_175.z)) + vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_181 : vec4<f32> = u_xlat0;
  let x_184 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_181.x, x_181.y, x_181.z)) + x_184);
  let x_186 : f32 = u_xlat41;
  let x_188 : vec3<f32> = u_xlat2;
  let x_190 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_186, x_186, x_186) * x_188) + vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = (x_194 + -0.150000006f);
  let x_199 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_199);
  let x_203 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_203) + 1.0f);
  let x_207 : vec4<f32> = u_xlat0;
  let x_212 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_207.x, x_207.x, x_207.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_212);
  let x_218 : vec4<f32> = vs_INTERP3;
  let x_221 : f32 = x_44.x_GlobalMipBias.x;
  let x_222 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_218.x, x_218.y), x_221);
  let x_223 : vec3<f32> = vec3<f32>(x_222.x, x_222.y, x_222.w);
  let x_224 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_223.x, x_223.y, x_223.z, x_224.w);
  let x_227 : f32 = u_xlat3.x;
  let x_229 : f32 = u_xlat3.z;
  u_xlat3.x = (x_227 * x_229);
  let x_234 : vec4<f32> = u_xlat3;
  u_xlat20 = ((vec2<f32>(x_234.x, x_234.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_242 : vec2<f32> = u_xlat20;
  let x_243 : vec2<f32> = u_xlat20;
  u_xlat41 = dot(x_242, x_243);
  let x_245 : f32 = u_xlat41;
  u_xlat41 = min(x_245, 1.0f);
  let x_247 : f32 = u_xlat41;
  u_xlat41 = (-(x_247) + 1.0f);
  let x_250 : f32 = u_xlat41;
  u_xlat41 = sqrt(x_250);
  let x_252 : f32 = u_xlat41;
  u_xlat41 = max(x_252, 1.00000002e-16f);
  let x_256 : f32 = u_xlat1.x;
  let x_258 : f32 = u_xlat0.x;
  u_xlat0.x = (x_256 + x_258);
  let x_262 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_262, 0.0f, 1.0f);
  let x_266 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_266, 0.0f);
  let x_270 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_270, 0.850000024f);
  let x_277 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_277);
  let x_285 : f32 = x_283.unity_WorldTransformParams.w;
  u_xlatb21.z = (x_285 >= 0.0f);
  let x_290 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_290);
  let x_294 : bool = u_xlatb21.z;
  u_xlat21.z = select(-1.0f, 1.0f, x_294);
  let x_298 : f32 = u_xlat21.z;
  let x_300 : f32 = u_xlat21.x;
  u_xlat21.x = (x_298 * x_300);
  let x_305 : vec3<f32> = vs_INTERP1;
  let x_307 : vec4<f32> = vs_INTERP2;
  let x_309 : vec3<f32> = (vec3<f32>(x_305.z, x_305.x, x_305.y) * vec3<f32>(x_307.y, x_307.z, x_307.x));
  let x_310 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_309.x, x_309.y, x_309.z, x_310.w);
  let x_312 : vec3<f32> = vs_INTERP1;
  let x_314 : vec4<f32> = vs_INTERP2;
  let x_317 : vec4<f32> = u_xlat3;
  let x_320 : vec3<f32> = ((vec3<f32>(x_312.y, x_312.z, x_312.x) * vec3<f32>(x_314.z, x_314.x, x_314.y)) + -(vec3<f32>(x_317.x, x_317.y, x_317.z)));
  let x_321 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_320.x, x_320.y, x_320.z, x_321.w);
  let x_323 : vec3<f32> = u_xlat21;
  let x_325 : vec4<f32> = u_xlat3;
  let x_327 : vec3<f32> = (vec3<f32>(x_323.x, x_323.x, x_323.x) * vec3<f32>(x_325.x, x_325.y, x_325.z));
  let x_328 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_327.x, x_327.y, x_327.z, x_328.w);
  let x_330 : vec2<f32> = u_xlat20;
  let x_332 : vec4<f32> = u_xlat3;
  let x_334 : vec3<f32> = (vec3<f32>(x_330.y, x_330.y, x_330.y) * vec3<f32>(x_332.x, x_332.y, x_332.z));
  let x_335 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_334.x, x_334.y, x_334.z, x_335.w);
  let x_337 : vec2<f32> = u_xlat20;
  let x_339 : vec4<f32> = vs_INTERP2;
  let x_342 : vec4<f32> = u_xlat3;
  let x_344 : vec3<f32> = ((vec3<f32>(x_337.x, x_337.x, x_337.x) * vec3<f32>(x_339.x, x_339.y, x_339.z)) + vec3<f32>(x_342.x, x_342.y, x_342.z));
  let x_345 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_344.x, x_344.y, x_344.z, x_345.w);
  let x_347 : f32 = u_xlat41;
  let x_349 : vec3<f32> = vs_INTERP1;
  let x_351 : vec4<f32> = u_xlat3;
  u_xlat21 = ((vec3<f32>(x_347, x_347, x_347) * x_349) + vec3<f32>(x_351.x, x_351.y, x_351.z));
  let x_354 : vec3<f32> = u_xlat21;
  let x_355 : vec3<f32> = u_xlat21;
  u_xlat20.x = dot(x_354, x_355);
  let x_359 : f32 = u_xlat20.x;
  u_xlat20.x = inverseSqrt(x_359);
  let x_362 : vec2<f32> = u_xlat20;
  let x_364 : vec3<f32> = u_xlat21;
  let x_365 : vec3<f32> = (vec3<f32>(x_362.x, x_362.x, x_362.x) * x_364);
  let x_366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_365.x, x_365.y, x_365.z, x_366.w);
  let x_371 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb20 = (x_371 == 0.0f);
  let x_374 : vec3<f32> = vs_INTERP0;
  let x_379 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat21 = (-(x_374) + x_379);
  let x_382 : vec3<f32> = u_xlat21;
  let x_383 : vec3<f32> = u_xlat21;
  u_xlat40 = dot(x_382, x_383);
  let x_385 : f32 = u_xlat40;
  u_xlat40 = inverseSqrt(x_385);
  let x_387 : f32 = u_xlat40;
  let x_389 : vec3<f32> = u_xlat21;
  u_xlat21 = (vec3<f32>(x_387, x_387, x_387) * x_389);
  let x_391 : bool = u_xlatb20;
  if (x_391) {
    let x_396 : f32 = u_xlat21.x;
    x_392 = x_396;
  } else {
    let x_401 : f32 = x_44.unity_MatrixV[0i].z;
    x_392 = x_401;
  }
  let x_402 : f32 = x_392;
  u_xlat4.x = x_402;
  let x_404 : bool = u_xlatb20;
  if (x_404) {
    let x_409 : f32 = u_xlat21.y;
    x_405 = x_409;
  } else {
    let x_412 : f32 = x_44.unity_MatrixV[1i].z;
    x_405 = x_412;
  }
  let x_413 : f32 = x_405;
  u_xlat4.y = x_413;
  let x_415 : bool = u_xlatb20;
  if (x_415) {
    let x_420 : f32 = u_xlat21.z;
    x_416 = x_420;
  } else {
    let x_424 : f32 = x_44.unity_MatrixV[2i].z;
    x_416 = x_424;
  }
  let x_425 : f32 = x_416;
  u_xlat4.z = x_425;
  u_xlat3.w = 1.0f;
  let x_430 : vec4<f32> = x_283.unity_SHAr;
  let x_431 : vec4<f32> = u_xlat3;
  u_xlat5.x = dot(x_430, x_431);
  let x_436 : vec4<f32> = x_283.unity_SHAg;
  let x_437 : vec4<f32> = u_xlat3;
  u_xlat5.y = dot(x_436, x_437);
  let x_442 : vec4<f32> = x_283.unity_SHAb;
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat5.z = dot(x_442, x_443);
  let x_447 : vec4<f32> = u_xlat3;
  let x_449 : vec4<f32> = u_xlat3;
  u_xlat6 = (vec4<f32>(x_447.y, x_447.z, x_447.z, x_447.x) * vec4<f32>(x_449.x, x_449.y, x_449.z, x_449.z));
  let x_455 : vec4<f32> = x_283.unity_SHBr;
  let x_456 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_455, x_456);
  let x_461 : vec4<f32> = x_283.unity_SHBg;
  let x_462 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_461, x_462);
  let x_467 : vec4<f32> = x_283.unity_SHBb;
  let x_468 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_467, x_468);
  let x_472 : f32 = u_xlat3.y;
  let x_474 : f32 = u_xlat3.y;
  u_xlat20.x = (x_472 * x_474);
  let x_478 : f32 = u_xlat3.x;
  let x_480 : f32 = u_xlat3.x;
  let x_483 : f32 = u_xlat20.x;
  u_xlat20.x = ((x_478 * x_480) + -(x_483));
  let x_489 : vec4<f32> = x_283.unity_SHC;
  let x_491 : vec2<f32> = u_xlat20;
  let x_494 : vec4<f32> = u_xlat7;
  u_xlat21 = ((vec3<f32>(x_489.x, x_489.y, x_489.z) * vec3<f32>(x_491.x, x_491.x, x_491.x)) + vec3<f32>(x_494.x, x_494.y, x_494.z));
  let x_497 : vec3<f32> = u_xlat21;
  let x_498 : vec4<f32> = u_xlat5;
  u_xlat21 = (x_497 + vec3<f32>(x_498.x, x_498.y, x_498.z));
  let x_501 : vec3<f32> = u_xlat21;
  u_xlat21 = max(x_501, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_506 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_507 : vec2<f32> = vec2<f32>(x_506.x, x_506.y);
  u_xlat20 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_507.x, x_507.y));
  let x_512 : vec2<f32> = u_xlat20;
  let x_513 : vec4<f32> = hlslcc_FragCoord;
  let x_515 : vec2<f32> = (x_512 * vec2<f32>(x_513.x, x_513.y));
  let x_516 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_515.x, x_515.y, x_516.z, x_516.w);
  let x_519 : f32 = u_xlat5.y;
  let x_522 : f32 = x_44.x_ScaleBiasRt.x;
  let x_525 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat20.x = ((x_519 * x_522) + x_525);
  let x_529 : f32 = u_xlat20.x;
  u_xlat5.z = (-(x_529) + 1.0f);
  let x_534 : f32 = u_xlat0.x;
  u_xlat20.x = ((-(x_534) * 0.959999979f) + 0.959999979f);
  let x_541 : f32 = u_xlat20.x;
  let x_544 : f32 = u_xlat1.x;
  u_xlat40 = (-(x_541) + x_544);
  let x_546 : vec2<f32> = u_xlat20;
  let x_548 : vec3<f32> = u_xlat2;
  let x_549 : vec3<f32> = (vec3<f32>(x_546.x, x_546.x, x_546.x) * x_548);
  let x_550 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_549.x, x_549.y, x_549.z, x_550.w);
  let x_552 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_552 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_556 : vec4<f32> = u_xlat0;
  let x_558 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_556.x, x_556.x, x_556.x) * x_558) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_564 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_564) + 1.0f);
  let x_569 : f32 = u_xlat0.x;
  let x_571 : f32 = u_xlat0.x;
  u_xlat20.x = (x_569 * x_571);
  let x_575 : f32 = u_xlat20.x;
  let x_577 : f32 = u_xlat20.x;
  u_xlat1.x = (x_575 * x_577);
  let x_580 : f32 = u_xlat40;
  u_xlat40 = (x_580 + 1.0f);
  let x_582 : f32 = u_xlat40;
  u_xlat40 = min(x_582, 1.0f);
  let x_586 : f32 = u_xlat20.x;
  u_xlat62 = ((x_586 * 4.0f) + 2.0f);
  let x_596 : vec4<f32> = u_xlat5;
  let x_599 : f32 = x_44.x_GlobalMipBias.x;
  let x_600 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_596.x, x_596.z), x_599);
  u_xlat63 = x_600.x;
  let x_603 : f32 = u_xlat63;
  u_xlat64 = (x_603 + -1.0f);
  let x_606 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_607 : f32 = u_xlat64;
  u_xlat64 = ((x_606 * x_607) + 1.0f);
  let x_612 : f32 = u_xlat0.w;
  let x_613 : f32 = u_xlat63;
  u_xlat60 = min(x_612, x_613);
  let x_622 : f32 = x_620.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_622);
  let x_624 : bool = u_xlatb63;
  if (x_624) {
    let x_628 : f32 = x_620.x_MainLightShadowParams.y;
    u_xlatb63 = (x_628 == 1.0f);
    let x_630 : bool = u_xlatb63;
    if (x_630) {
      let x_634 : vec4<f32> = vs_INTERP8;
      let x_637 : vec4<f32> = x_620.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_634.x, x_634.y, x_634.x, x_634.y) + x_637);
      let x_640 : vec4<f32> = u_xlat5;
      let x_641 : vec2<f32> = vec2<f32>(x_640.x, x_640.y);
      let x_643 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_641.x, x_641.y, x_643);
      let x_655 : vec3<f32> = txVec0;
      let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
      u_xlat7.x = x_657;
      let x_660 : vec4<f32> = u_xlat5;
      let x_661 : vec2<f32> = vec2<f32>(x_660.z, x_660.w);
      let x_663 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_661.x, x_661.y, x_663);
      let x_670 : vec3<f32> = txVec1;
      let x_672 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_670.xy, x_670.z);
      u_xlat7.y = x_672;
      let x_674 : vec4<f32> = vs_INTERP8;
      let x_677 : vec4<f32> = x_620.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_674.x, x_674.y, x_674.x, x_674.y) + x_677);
      let x_680 : vec4<f32> = u_xlat5;
      let x_681 : vec2<f32> = vec2<f32>(x_680.x, x_680.y);
      let x_683 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_681.x, x_681.y, x_683);
      let x_690 : vec3<f32> = txVec2;
      let x_692 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_690.xy, x_690.z);
      u_xlat7.z = x_692;
      let x_695 : vec4<f32> = u_xlat5;
      let x_696 : vec2<f32> = vec2<f32>(x_695.z, x_695.w);
      let x_698 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_696.x, x_696.y, x_698);
      let x_705 : vec3<f32> = txVec3;
      let x_707 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_705.xy, x_705.z);
      u_xlat7.w = x_707;
      let x_709 : vec4<f32> = u_xlat7;
      u_xlat63 = dot(x_709, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_716 : f32 = x_620.x_MainLightShadowParams.y;
      u_xlatb5 = (x_716 == 2.0f);
      let x_718 : bool = u_xlatb5;
      if (x_718) {
        let x_721 : vec4<f32> = vs_INTERP8;
        let x_724 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_728 : vec2<f32> = ((vec2<f32>(x_721.x, x_721.y) * vec2<f32>(x_724.z, x_724.w)) + vec2<f32>(0.5f, 0.5f));
        let x_729 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_728.x, x_728.y, x_729.z, x_729.w);
        let x_731 : vec4<f32> = u_xlat5;
        let x_733 : vec2<f32> = floor(vec2<f32>(x_731.x, x_731.y));
        let x_734 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_733.x, x_733.y, x_734.z, x_734.w);
        let x_737 : vec4<f32> = vs_INTERP8;
        let x_740 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_743 : vec4<f32> = u_xlat5;
        u_xlat45 = ((vec2<f32>(x_737.x, x_737.y) * vec2<f32>(x_740.z, x_740.w)) + -(vec2<f32>(x_743.x, x_743.y)));
        let x_747 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_747.x, x_747.x, x_747.y, x_747.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_752 : vec4<f32> = u_xlat7;
        let x_754 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_752.x, x_752.x, x_752.z, x_752.z) * vec4<f32>(x_754.x, x_754.x, x_754.z, x_754.z));
        let x_757 : vec4<f32> = u_xlat8;
        let x_761 : vec2<f32> = (vec2<f32>(x_757.y, x_757.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_762 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_761.x, x_762.y, x_761.y, x_762.w);
        let x_764 : vec4<f32> = u_xlat8;
        let x_767 : vec2<f32> = u_xlat45;
        let x_769 : vec2<f32> = ((vec2<f32>(x_764.x, x_764.z) * vec2<f32>(0.5f, 0.5f)) + -(x_767));
        let x_770 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_769.x, x_769.y, x_770.z, x_770.w);
        let x_773 : vec2<f32> = u_xlat45;
        u_xlat48 = (-(x_773) + vec2<f32>(1.0f, 1.0f));
        let x_777 : vec2<f32> = u_xlat45;
        let x_779 : vec2<f32> = min(x_777, vec2<f32>(0.0f, 0.0f));
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_779.x, x_779.y, x_780.z, x_780.w);
        let x_782 : vec4<f32> = u_xlat9;
        let x_785 : vec4<f32> = u_xlat9;
        let x_788 : vec2<f32> = u_xlat48;
        let x_789 : vec2<f32> = ((-(vec2<f32>(x_782.x, x_782.y)) * vec2<f32>(x_785.x, x_785.y)) + x_788);
        let x_790 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_789.x, x_789.y, x_790.z, x_790.w);
        let x_792 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_792, vec2<f32>(0.0f, 0.0f));
        let x_794 : vec2<f32> = u_xlat45;
        let x_796 : vec2<f32> = u_xlat45;
        let x_798 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_794) * x_796) + vec2<f32>(x_798.y, x_798.w));
        let x_801 : vec4<f32> = u_xlat9;
        let x_803 : vec2<f32> = (vec2<f32>(x_801.x, x_801.y) + vec2<f32>(1.0f, 1.0f));
        let x_804 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_803.x, x_803.y, x_804.z, x_804.w);
        let x_806 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_806 + vec2<f32>(1.0f, 1.0f));
        let x_809 : vec4<f32> = u_xlat8;
        let x_813 : vec2<f32> = (vec2<f32>(x_809.x, x_809.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_814 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat48;
        let x_817 : vec2<f32> = (x_816 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_818 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_817.x, x_817.y, x_818.z, x_818.w);
        let x_820 : vec4<f32> = u_xlat9;
        let x_822 : vec2<f32> = (vec2<f32>(x_820.x, x_820.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_823 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_822.x, x_822.y, x_823.z, x_823.w);
        let x_826 : vec2<f32> = u_xlat45;
        let x_827 : vec2<f32> = (x_826 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_828 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_827.x, x_827.y, x_828.z, x_828.w);
        let x_830 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_830.y, x_830.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_834 : f32 = u_xlat9.x;
        u_xlat10.z = x_834;
        let x_837 : f32 = u_xlat45.x;
        u_xlat10.w = x_837;
        let x_840 : f32 = u_xlat11.x;
        u_xlat8.z = x_840;
        let x_843 : f32 = u_xlat7.x;
        u_xlat8.w = x_843;
        let x_846 : vec4<f32> = u_xlat8;
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_846.z, x_846.w, x_846.x, x_846.z) + vec4<f32>(x_848.z, x_848.w, x_848.x, x_848.z));
        let x_852 : f32 = u_xlat10.y;
        u_xlat9.z = x_852;
        let x_855 : f32 = u_xlat45.y;
        u_xlat9.w = x_855;
        let x_858 : f32 = u_xlat8.y;
        u_xlat11.z = x_858;
        let x_861 : f32 = u_xlat7.z;
        u_xlat11.w = x_861;
        let x_863 : vec4<f32> = u_xlat9;
        let x_865 : vec4<f32> = u_xlat11;
        let x_867 : vec3<f32> = (vec3<f32>(x_863.z, x_863.y, x_863.w) + vec3<f32>(x_865.z, x_865.y, x_865.w));
        let x_868 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_867.x, x_867.y, x_867.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat8;
        let x_872 : vec4<f32> = u_xlat12;
        let x_874 : vec3<f32> = (vec3<f32>(x_870.x, x_870.z, x_870.w) / vec3<f32>(x_872.z, x_872.w, x_872.y));
        let x_875 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_874.x, x_874.y, x_874.z, x_875.w);
        let x_877 : vec4<f32> = u_xlat8;
        let x_883 : vec3<f32> = (vec3<f32>(x_877.x, x_877.y, x_877.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_884 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_883.x, x_883.y, x_883.z, x_884.w);
        let x_886 : vec4<f32> = u_xlat11;
        let x_888 : vec4<f32> = u_xlat7;
        let x_890 : vec3<f32> = (vec3<f32>(x_886.z, x_886.y, x_886.w) / vec3<f32>(x_888.x, x_888.y, x_888.z));
        let x_891 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_890.x, x_890.y, x_890.z, x_891.w);
        let x_893 : vec4<f32> = u_xlat9;
        let x_895 : vec3<f32> = (vec3<f32>(x_893.x, x_893.y, x_893.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_896 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_895.x, x_895.y, x_895.z, x_896.w);
        let x_898 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_903 : vec3<f32> = (vec3<f32>(x_898.y, x_898.x, x_898.z) * vec3<f32>(x_901.x, x_901.x, x_901.x));
        let x_904 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_903.x, x_903.y, x_903.z, x_904.w);
        let x_906 : vec4<f32> = u_xlat9;
        let x_909 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_911 : vec3<f32> = (vec3<f32>(x_906.x, x_906.y, x_906.z) * vec3<f32>(x_909.y, x_909.y, x_909.y));
        let x_912 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_911.x, x_911.y, x_911.z, x_912.w);
        let x_915 : f32 = u_xlat9.x;
        u_xlat8.w = x_915;
        let x_917 : vec4<f32> = u_xlat5;
        let x_920 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_917.x, x_917.y, x_917.x, x_917.y) * vec4<f32>(x_920.x, x_920.y, x_920.x, x_920.y)) + vec4<f32>(x_923.y, x_923.w, x_923.x, x_923.w));
        let x_926 : vec4<f32> = u_xlat5;
        let x_929 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_932 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_926.x, x_926.y) * vec2<f32>(x_929.x, x_929.y)) + vec2<f32>(x_932.z, x_932.w));
        let x_936 : f32 = u_xlat8.y;
        u_xlat9.w = x_936;
        let x_938 : vec4<f32> = u_xlat9;
        let x_939 : vec2<f32> = vec2<f32>(x_938.y, x_938.z);
        let x_940 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_940.x, x_939.x, x_940.z, x_939.y);
        let x_942 : vec4<f32> = u_xlat5;
        let x_945 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_948 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_942.x, x_942.y, x_942.x, x_942.y) * vec4<f32>(x_945.x, x_945.y, x_945.x, x_945.y)) + vec4<f32>(x_948.x, x_948.y, x_948.z, x_948.y));
        let x_951 : vec4<f32> = u_xlat5;
        let x_954 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_957 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_951.x, x_951.y, x_951.x, x_951.y) * vec4<f32>(x_954.x, x_954.y, x_954.x, x_954.y)) + vec4<f32>(x_957.w, x_957.y, x_957.w, x_957.z));
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.w, x_966.z, x_966.w));
        let x_970 : vec4<f32> = u_xlat7;
        let x_972 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_970.x, x_970.x, x_970.x, x_970.y) * vec4<f32>(x_972.z, x_972.w, x_972.y, x_972.z));
        let x_976 : vec4<f32> = u_xlat7;
        let x_978 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_976.y, x_976.y, x_976.z, x_976.z) * x_978);
        let x_981 : f32 = u_xlat7.z;
        let x_983 : f32 = u_xlat12.y;
        u_xlat5.x = (x_981 * x_983);
        let x_987 : vec4<f32> = u_xlat10;
        let x_988 : vec2<f32> = vec2<f32>(x_987.x, x_987.y);
        let x_990 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_988.x, x_988.y, x_990);
        let x_998 : vec3<f32> = txVec4;
        let x_1000 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_998.xy, x_998.z);
        u_xlat25 = x_1000;
        let x_1002 : vec4<f32> = u_xlat10;
        let x_1003 : vec2<f32> = vec2<f32>(x_1002.z, x_1002.w);
        let x_1005 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_1003.x, x_1003.y, x_1005);
        let x_1013 : vec3<f32> = txVec5;
        let x_1015 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1013.xy, x_1013.z);
        u_xlat66 = x_1015;
        let x_1016 : f32 = u_xlat66;
        let x_1018 : f32 = u_xlat13.y;
        u_xlat66 = (x_1016 * x_1018);
        let x_1021 : f32 = u_xlat13.x;
        let x_1022 : f32 = u_xlat25;
        let x_1024 : f32 = u_xlat66;
        u_xlat25 = ((x_1021 * x_1022) + x_1024);
        let x_1027 : vec2<f32> = u_xlat45;
        let x_1029 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_1027.x, x_1027.y, x_1029);
        let x_1036 : vec3<f32> = txVec6;
        let x_1038 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1036.xy, x_1036.z);
        u_xlat45.x = x_1038;
        let x_1041 : f32 = u_xlat13.z;
        let x_1043 : f32 = u_xlat45.x;
        let x_1045 : f32 = u_xlat25;
        u_xlat25 = ((x_1041 * x_1043) + x_1045);
        let x_1048 : vec4<f32> = u_xlat9;
        let x_1049 : vec2<f32> = vec2<f32>(x_1048.x, x_1048.y);
        let x_1051 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_1049.x, x_1049.y, x_1051);
        let x_1058 : vec3<f32> = txVec7;
        let x_1060 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1058.xy, x_1058.z);
        u_xlat45.x = x_1060;
        let x_1063 : f32 = u_xlat13.w;
        let x_1065 : f32 = u_xlat45.x;
        let x_1067 : f32 = u_xlat25;
        u_xlat25 = ((x_1063 * x_1065) + x_1067);
        let x_1070 : vec4<f32> = u_xlat11;
        let x_1071 : vec2<f32> = vec2<f32>(x_1070.x, x_1070.y);
        let x_1073 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_1071.x, x_1071.y, x_1073);
        let x_1080 : vec3<f32> = txVec8;
        let x_1082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1080.xy, x_1080.z);
        u_xlat45.x = x_1082;
        let x_1085 : f32 = u_xlat14.x;
        let x_1087 : f32 = u_xlat45.x;
        let x_1089 : f32 = u_xlat25;
        u_xlat25 = ((x_1085 * x_1087) + x_1089);
        let x_1092 : vec4<f32> = u_xlat11;
        let x_1093 : vec2<f32> = vec2<f32>(x_1092.z, x_1092.w);
        let x_1095 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_1093.x, x_1093.y, x_1095);
        let x_1102 : vec3<f32> = txVec9;
        let x_1104 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1102.xy, x_1102.z);
        u_xlat45.x = x_1104;
        let x_1107 : f32 = u_xlat14.y;
        let x_1109 : f32 = u_xlat45.x;
        let x_1111 : f32 = u_xlat25;
        u_xlat25 = ((x_1107 * x_1109) + x_1111);
        let x_1114 : vec4<f32> = u_xlat9;
        let x_1115 : vec2<f32> = vec2<f32>(x_1114.z, x_1114.w);
        let x_1117 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_1115.x, x_1115.y, x_1117);
        let x_1124 : vec3<f32> = txVec10;
        let x_1126 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1124.xy, x_1124.z);
        u_xlat45.x = x_1126;
        let x_1129 : f32 = u_xlat14.z;
        let x_1131 : f32 = u_xlat45.x;
        let x_1133 : f32 = u_xlat25;
        u_xlat25 = ((x_1129 * x_1131) + x_1133);
        let x_1136 : vec4<f32> = u_xlat8;
        let x_1137 : vec2<f32> = vec2<f32>(x_1136.x, x_1136.y);
        let x_1139 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_1137.x, x_1137.y, x_1139);
        let x_1146 : vec3<f32> = txVec11;
        let x_1148 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1146.xy, x_1146.z);
        u_xlat45.x = x_1148;
        let x_1151 : f32 = u_xlat14.w;
        let x_1153 : f32 = u_xlat45.x;
        let x_1155 : f32 = u_xlat25;
        u_xlat25 = ((x_1151 * x_1153) + x_1155);
        let x_1158 : vec4<f32> = u_xlat8;
        let x_1159 : vec2<f32> = vec2<f32>(x_1158.z, x_1158.w);
        let x_1161 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1159.x, x_1159.y, x_1161);
        let x_1168 : vec3<f32> = txVec12;
        let x_1170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1168.xy, x_1168.z);
        u_xlat45.x = x_1170;
        let x_1173 : f32 = u_xlat5.x;
        let x_1175 : f32 = u_xlat45.x;
        let x_1177 : f32 = u_xlat25;
        u_xlat63 = ((x_1173 * x_1175) + x_1177);
      } else {
        let x_1180 : vec4<f32> = vs_INTERP8;
        let x_1183 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1186 : vec2<f32> = ((vec2<f32>(x_1180.x, x_1180.y) * vec2<f32>(x_1183.z, x_1183.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1187 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1186.x, x_1186.y, x_1187.z, x_1187.w);
        let x_1189 : vec4<f32> = u_xlat5;
        let x_1191 : vec2<f32> = floor(vec2<f32>(x_1189.x, x_1189.y));
        let x_1192 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1191.x, x_1191.y, x_1192.z, x_1192.w);
        let x_1194 : vec4<f32> = vs_INTERP8;
        let x_1197 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1200 : vec4<f32> = u_xlat5;
        u_xlat45 = ((vec2<f32>(x_1194.x, x_1194.y) * vec2<f32>(x_1197.z, x_1197.w)) + -(vec2<f32>(x_1200.x, x_1200.y)));
        let x_1204 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_1204.x, x_1204.x, x_1204.y, x_1204.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1207 : vec4<f32> = u_xlat7;
        let x_1209 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1207.x, x_1207.x, x_1207.z, x_1207.z) * vec4<f32>(x_1209.x, x_1209.x, x_1209.z, x_1209.z));
        let x_1212 : vec4<f32> = u_xlat8;
        let x_1216 : vec2<f32> = (vec2<f32>(x_1212.y, x_1212.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1217 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1217.x, x_1216.x, x_1217.z, x_1216.y);
        let x_1219 : vec4<f32> = u_xlat8;
        let x_1222 : vec2<f32> = u_xlat45;
        let x_1224 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1222));
        let x_1225 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1224.x, x_1225.y, x_1224.y, x_1225.w);
        let x_1227 : vec2<f32> = u_xlat45;
        let x_1229 : vec2<f32> = (-(x_1227) + vec2<f32>(1.0f, 1.0f));
        let x_1230 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
        let x_1232 : vec2<f32> = u_xlat45;
        u_xlat48 = min(x_1232, vec2<f32>(0.0f, 0.0f));
        let x_1234 : vec2<f32> = u_xlat48;
        let x_1236 : vec2<f32> = u_xlat48;
        let x_1238 : vec4<f32> = u_xlat8;
        let x_1240 : vec2<f32> = ((-(x_1234) * x_1236) + vec2<f32>(x_1238.x, x_1238.y));
        let x_1241 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1240.x, x_1240.y, x_1241.z, x_1241.w);
        let x_1243 : vec2<f32> = u_xlat45;
        u_xlat48 = max(x_1243, vec2<f32>(0.0f, 0.0f));
        let x_1246 : vec2<f32> = u_xlat48;
        let x_1248 : vec2<f32> = u_xlat48;
        let x_1250 : vec4<f32> = u_xlat7;
        let x_1252 : vec2<f32> = ((-(x_1246) * x_1248) + vec2<f32>(x_1250.y, x_1250.w));
        let x_1253 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_1252.x, x_1253.y, x_1252.y);
        let x_1255 : vec4<f32> = u_xlat8;
        let x_1257 : vec2<f32> = (vec2<f32>(x_1255.x, x_1255.y) + vec2<f32>(2.0f, 2.0f));
        let x_1258 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1257.x, x_1257.y, x_1258.z, x_1258.w);
        let x_1260 : vec3<f32> = u_xlat27;
        let x_1262 : vec2<f32> = (vec2<f32>(x_1260.x, x_1260.z) + vec2<f32>(2.0f, 2.0f));
        let x_1263 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1263.x, x_1262.x, x_1263.z, x_1262.y);
        let x_1266 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1266 * 0.081632003f);
        let x_1270 : vec4<f32> = u_xlat7;
        let x_1273 : vec3<f32> = (vec3<f32>(x_1270.z, x_1270.x, x_1270.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1274 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1273.x, x_1273.y, x_1273.z, x_1274.w);
        let x_1276 : vec4<f32> = u_xlat8;
        let x_1279 : vec2<f32> = (vec2<f32>(x_1276.x, x_1276.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1280 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1279.x, x_1279.y, x_1280.z, x_1280.w);
        let x_1283 : f32 = u_xlat11.y;
        u_xlat10.x = x_1283;
        let x_1285 : vec2<f32> = u_xlat45;
        let x_1292 : vec2<f32> = ((vec2<f32>(x_1285.x, x_1285.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1293 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1293.x, x_1292.x, x_1293.z, x_1292.y);
        let x_1295 : vec2<f32> = u_xlat45;
        let x_1299 : vec2<f32> = ((vec2<f32>(x_1295.x, x_1295.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1300 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1299.x, x_1300.y, x_1299.y, x_1300.w);
        let x_1303 : f32 = u_xlat7.x;
        u_xlat8.y = x_1303;
        let x_1306 : f32 = u_xlat9.y;
        u_xlat8.w = x_1306;
        let x_1308 : vec4<f32> = u_xlat8;
        let x_1309 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1308 + x_1309);
        let x_1311 : vec2<f32> = u_xlat45;
        let x_1314 : vec2<f32> = ((vec2<f32>(x_1311.y, x_1311.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1315 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1315.x, x_1314.x, x_1315.z, x_1314.y);
        let x_1317 : vec2<f32> = u_xlat45;
        let x_1320 : vec2<f32> = ((vec2<f32>(x_1317.y, x_1317.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1321 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1320.x, x_1321.y, x_1320.y, x_1321.w);
        let x_1324 : f32 = u_xlat7.y;
        u_xlat9.y = x_1324;
        let x_1326 : vec4<f32> = u_xlat9;
        let x_1327 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1326 + x_1327);
        let x_1329 : vec4<f32> = u_xlat8;
        let x_1330 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1329 / x_1330);
        let x_1332 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1332 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1338 : vec4<f32> = u_xlat9;
        let x_1339 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1338 / x_1339);
        let x_1341 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1341 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1343 : vec4<f32> = u_xlat8;
        let x_1346 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1343.w, x_1343.x, x_1343.y, x_1343.z) * vec4<f32>(x_1346.x, x_1346.x, x_1346.x, x_1346.x));
        let x_1349 : vec4<f32> = u_xlat9;
        let x_1352 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1349.x, x_1349.w, x_1349.y, x_1349.z) * vec4<f32>(x_1352.y, x_1352.y, x_1352.y, x_1352.y));
        let x_1355 : vec4<f32> = u_xlat8;
        let x_1356 : vec3<f32> = vec3<f32>(x_1355.y, x_1355.z, x_1355.w);
        let x_1357 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1356.x, x_1357.y, x_1356.y, x_1356.z);
        let x_1360 : f32 = u_xlat9.x;
        u_xlat11.y = x_1360;
        let x_1362 : vec4<f32> = u_xlat5;
        let x_1365 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1368 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1362.x, x_1362.y, x_1362.x, x_1362.y) * vec4<f32>(x_1365.x, x_1365.y, x_1365.x, x_1365.y)) + vec4<f32>(x_1368.x, x_1368.y, x_1368.z, x_1368.y));
        let x_1371 : vec4<f32> = u_xlat5;
        let x_1374 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1377 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1371.x, x_1371.y) * vec2<f32>(x_1374.x, x_1374.y)) + vec2<f32>(x_1377.w, x_1377.y));
        let x_1381 : f32 = u_xlat11.y;
        u_xlat8.y = x_1381;
        let x_1384 : f32 = u_xlat9.z;
        u_xlat11.y = x_1384;
        let x_1386 : vec4<f32> = u_xlat5;
        let x_1389 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1392 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1386.x, x_1386.y, x_1386.x, x_1386.y) * vec4<f32>(x_1389.x, x_1389.y, x_1389.x, x_1389.y)) + vec4<f32>(x_1392.x, x_1392.y, x_1392.z, x_1392.y));
        let x_1395 : vec4<f32> = u_xlat5;
        let x_1398 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1401 : vec4<f32> = u_xlat11;
        let x_1403 : vec2<f32> = ((vec2<f32>(x_1395.x, x_1395.y) * vec2<f32>(x_1398.x, x_1398.y)) + vec2<f32>(x_1401.w, x_1401.y));
        let x_1404 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1403.x, x_1403.y, x_1404.z, x_1404.w);
        let x_1407 : f32 = u_xlat11.y;
        u_xlat8.z = x_1407;
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1413 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1416 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1410.x, x_1410.y, x_1410.x, x_1410.y) * vec4<f32>(x_1413.x, x_1413.y, x_1413.x, x_1413.y)) + vec4<f32>(x_1416.x, x_1416.y, x_1416.x, x_1416.z));
        let x_1420 : f32 = u_xlat9.w;
        u_xlat11.y = x_1420;
        let x_1423 : vec4<f32> = u_xlat5;
        let x_1426 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1429 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1423.x, x_1423.y, x_1423.x, x_1423.y) * vec4<f32>(x_1426.x, x_1426.y, x_1426.x, x_1426.y)) + vec4<f32>(x_1429.x, x_1429.y, x_1429.z, x_1429.y));
        let x_1433 : vec4<f32> = u_xlat5;
        let x_1436 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1439 : vec4<f32> = u_xlat11;
        u_xlat28 = ((vec2<f32>(x_1433.x, x_1433.y) * vec2<f32>(x_1436.x, x_1436.y)) + vec2<f32>(x_1439.w, x_1439.y));
        let x_1443 : f32 = u_xlat11.y;
        u_xlat8.w = x_1443;
        let x_1446 : vec4<f32> = u_xlat5;
        let x_1449 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1452 : vec4<f32> = u_xlat8;
        u_xlat54 = ((vec2<f32>(x_1446.x, x_1446.y) * vec2<f32>(x_1449.x, x_1449.y)) + vec2<f32>(x_1452.x, x_1452.w));
        let x_1455 : vec4<f32> = u_xlat11;
        let x_1456 : vec3<f32> = vec3<f32>(x_1455.x, x_1455.z, x_1455.w);
        let x_1457 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1456.x, x_1457.y, x_1456.y, x_1456.z);
        let x_1459 : vec4<f32> = u_xlat5;
        let x_1462 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1465 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1459.x, x_1459.y, x_1459.x, x_1459.y) * vec4<f32>(x_1462.x, x_1462.y, x_1462.x, x_1462.y)) + vec4<f32>(x_1465.x, x_1465.y, x_1465.z, x_1465.y));
        let x_1469 : vec4<f32> = u_xlat5;
        let x_1472 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1475 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1469.x, x_1469.y) * vec2<f32>(x_1472.x, x_1472.y)) + vec2<f32>(x_1475.w, x_1475.y));
        let x_1479 : f32 = u_xlat8.x;
        u_xlat9.x = x_1479;
        let x_1481 : vec4<f32> = u_xlat5;
        let x_1484 : vec4<f32> = x_620.x_MainLightShadowmapSize;
        let x_1487 : vec4<f32> = u_xlat9;
        let x_1489 : vec2<f32> = ((vec2<f32>(x_1481.x, x_1481.y) * vec2<f32>(x_1484.x, x_1484.y)) + vec2<f32>(x_1487.x, x_1487.y));
        let x_1490 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1489.x, x_1489.y, x_1490.z, x_1490.w);
        let x_1493 : vec4<f32> = u_xlat7;
        let x_1495 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1493.x, x_1493.x, x_1493.x, x_1493.x) * x_1495);
        let x_1498 : vec4<f32> = u_xlat7;
        let x_1500 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1498.y, x_1498.y, x_1498.y, x_1498.y) * x_1500);
        let x_1503 : vec4<f32> = u_xlat7;
        let x_1505 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1503.z, x_1503.z, x_1503.z, x_1503.z) * x_1505);
        let x_1507 : vec4<f32> = u_xlat7;
        let x_1509 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1507.w, x_1507.w, x_1507.w, x_1507.w) * x_1509);
        let x_1512 : vec4<f32> = u_xlat12;
        let x_1513 : vec2<f32> = vec2<f32>(x_1512.x, x_1512.y);
        let x_1515 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1513.x, x_1513.y, x_1515);
        let x_1522 : vec3<f32> = txVec13;
        let x_1524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1522.xy, x_1522.z);
        u_xlat66 = x_1524;
        let x_1526 : vec4<f32> = u_xlat12;
        let x_1527 : vec2<f32> = vec2<f32>(x_1526.z, x_1526.w);
        let x_1529 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1527.x, x_1527.y, x_1529);
        let x_1536 : vec3<f32> = txVec14;
        let x_1538 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1536.xy, x_1536.z);
        u_xlat8.x = x_1538;
        let x_1541 : f32 = u_xlat8.x;
        let x_1543 : f32 = u_xlat17.y;
        u_xlat8.x = (x_1541 * x_1543);
        let x_1547 : f32 = u_xlat17.x;
        let x_1548 : f32 = u_xlat66;
        let x_1551 : f32 = u_xlat8.x;
        u_xlat66 = ((x_1547 * x_1548) + x_1551);
        let x_1554 : vec2<f32> = u_xlat45;
        let x_1556 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1554.x, x_1554.y, x_1556);
        let x_1563 : vec3<f32> = txVec15;
        let x_1565 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1563.xy, x_1563.z);
        u_xlat45.x = x_1565;
        let x_1568 : f32 = u_xlat17.z;
        let x_1570 : f32 = u_xlat45.x;
        let x_1572 : f32 = u_xlat66;
        u_xlat45.x = ((x_1568 * x_1570) + x_1572);
        let x_1576 : vec4<f32> = u_xlat15;
        let x_1577 : vec2<f32> = vec2<f32>(x_1576.x, x_1576.y);
        let x_1579 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1577.x, x_1577.y, x_1579);
        let x_1587 : vec3<f32> = txVec16;
        let x_1589 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1587.xy, x_1587.z);
        u_xlat65 = x_1589;
        let x_1591 : f32 = u_xlat17.w;
        let x_1592 : f32 = u_xlat65;
        let x_1595 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1591 * x_1592) + x_1595);
        let x_1599 : vec4<f32> = u_xlat13;
        let x_1600 : vec2<f32> = vec2<f32>(x_1599.x, x_1599.y);
        let x_1602 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1600.x, x_1600.y, x_1602);
        let x_1609 : vec3<f32> = txVec17;
        let x_1611 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1609.xy, x_1609.z);
        u_xlat65 = x_1611;
        let x_1613 : f32 = u_xlat18.x;
        let x_1614 : f32 = u_xlat65;
        let x_1617 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1613 * x_1614) + x_1617);
        let x_1621 : vec4<f32> = u_xlat13;
        let x_1622 : vec2<f32> = vec2<f32>(x_1621.z, x_1621.w);
        let x_1624 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1622.x, x_1622.y, x_1624);
        let x_1631 : vec3<f32> = txVec18;
        let x_1633 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1631.xy, x_1631.z);
        u_xlat65 = x_1633;
        let x_1635 : f32 = u_xlat18.y;
        let x_1636 : f32 = u_xlat65;
        let x_1639 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1635 * x_1636) + x_1639);
        let x_1643 : vec4<f32> = u_xlat14;
        let x_1644 : vec2<f32> = vec2<f32>(x_1643.x, x_1643.y);
        let x_1646 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1644.x, x_1644.y, x_1646);
        let x_1653 : vec3<f32> = txVec19;
        let x_1655 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1653.xy, x_1653.z);
        u_xlat65 = x_1655;
        let x_1657 : f32 = u_xlat18.z;
        let x_1658 : f32 = u_xlat65;
        let x_1661 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1657 * x_1658) + x_1661);
        let x_1665 : vec4<f32> = u_xlat15;
        let x_1666 : vec2<f32> = vec2<f32>(x_1665.z, x_1665.w);
        let x_1668 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1666.x, x_1666.y, x_1668);
        let x_1675 : vec3<f32> = txVec20;
        let x_1677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1675.xy, x_1675.z);
        u_xlat65 = x_1677;
        let x_1679 : f32 = u_xlat18.w;
        let x_1680 : f32 = u_xlat65;
        let x_1683 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1679 * x_1680) + x_1683);
        let x_1687 : vec4<f32> = u_xlat16;
        let x_1688 : vec2<f32> = vec2<f32>(x_1687.x, x_1687.y);
        let x_1690 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1688.x, x_1688.y, x_1690);
        let x_1697 : vec3<f32> = txVec21;
        let x_1699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1697.xy, x_1697.z);
        u_xlat65 = x_1699;
        let x_1701 : f32 = u_xlat19.x;
        let x_1702 : f32 = u_xlat65;
        let x_1705 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1701 * x_1702) + x_1705);
        let x_1709 : vec4<f32> = u_xlat16;
        let x_1710 : vec2<f32> = vec2<f32>(x_1709.z, x_1709.w);
        let x_1712 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_1710.x, x_1710.y, x_1712);
        let x_1719 : vec3<f32> = txVec22;
        let x_1721 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1719.xy, x_1719.z);
        u_xlat65 = x_1721;
        let x_1723 : f32 = u_xlat19.y;
        let x_1724 : f32 = u_xlat65;
        let x_1727 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1723 * x_1724) + x_1727);
        let x_1731 : vec2<f32> = u_xlat28;
        let x_1733 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_1731.x, x_1731.y, x_1733);
        let x_1740 : vec3<f32> = txVec23;
        let x_1742 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1740.xy, x_1740.z);
        u_xlat65 = x_1742;
        let x_1744 : f32 = u_xlat19.z;
        let x_1745 : f32 = u_xlat65;
        let x_1748 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1744 * x_1745) + x_1748);
        let x_1752 : vec2<f32> = u_xlat54;
        let x_1754 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_1752.x, x_1752.y, x_1754);
        let x_1761 : vec3<f32> = txVec24;
        let x_1763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1761.xy, x_1761.z);
        u_xlat65 = x_1763;
        let x_1765 : f32 = u_xlat19.w;
        let x_1766 : f32 = u_xlat65;
        let x_1769 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1765 * x_1766) + x_1769);
        let x_1773 : vec4<f32> = u_xlat11;
        let x_1774 : vec2<f32> = vec2<f32>(x_1773.x, x_1773.y);
        let x_1776 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_1774.x, x_1774.y, x_1776);
        let x_1783 : vec3<f32> = txVec25;
        let x_1785 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1783.xy, x_1783.z);
        u_xlat65 = x_1785;
        let x_1787 : f32 = u_xlat7.x;
        let x_1788 : f32 = u_xlat65;
        let x_1791 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1787 * x_1788) + x_1791);
        let x_1795 : vec4<f32> = u_xlat11;
        let x_1796 : vec2<f32> = vec2<f32>(x_1795.z, x_1795.w);
        let x_1798 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_1796.x, x_1796.y, x_1798);
        let x_1805 : vec3<f32> = txVec26;
        let x_1807 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1805.xy, x_1805.z);
        u_xlat65 = x_1807;
        let x_1809 : f32 = u_xlat7.y;
        let x_1810 : f32 = u_xlat65;
        let x_1813 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1809 * x_1810) + x_1813);
        let x_1817 : vec2<f32> = u_xlat49;
        let x_1819 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_1817.x, x_1817.y, x_1819);
        let x_1826 : vec3<f32> = txVec27;
        let x_1828 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1826.xy, x_1826.z);
        u_xlat65 = x_1828;
        let x_1830 : f32 = u_xlat7.z;
        let x_1831 : f32 = u_xlat65;
        let x_1834 : f32 = u_xlat45.x;
        u_xlat45.x = ((x_1830 * x_1831) + x_1834);
        let x_1838 : vec4<f32> = u_xlat5;
        let x_1839 : vec2<f32> = vec2<f32>(x_1838.x, x_1838.y);
        let x_1841 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_1839.x, x_1839.y, x_1841);
        let x_1848 : vec3<f32> = txVec28;
        let x_1850 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1848.xy, x_1848.z);
        u_xlat5.x = x_1850;
        let x_1853 : f32 = u_xlat7.w;
        let x_1855 : f32 = u_xlat5.x;
        let x_1858 : f32 = u_xlat45.x;
        u_xlat63 = ((x_1853 * x_1855) + x_1858);
      }
    }
  } else {
    let x_1862 : vec4<f32> = vs_INTERP8;
    let x_1863 : vec2<f32> = vec2<f32>(x_1862.x, x_1862.y);
    let x_1865 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_1863.x, x_1863.y, x_1865);
    let x_1872 : vec3<f32> = txVec29;
    let x_1874 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1872.xy, x_1872.z);
    u_xlat63 = x_1874;
  }
  let x_1876 : f32 = x_620.x_MainLightShadowParams.x;
  u_xlat5.x = (-(x_1876) + 1.0f);
  let x_1880 : f32 = u_xlat63;
  let x_1882 : f32 = x_620.x_MainLightShadowParams.x;
  let x_1885 : f32 = u_xlat5.x;
  u_xlat63 = ((x_1880 * x_1882) + x_1885);
  let x_1888 : f32 = vs_INTERP8.z;
  u_xlatb5 = (0.0f >= x_1888);
  let x_1892 : f32 = vs_INTERP8.z;
  u_xlatb25 = (x_1892 >= 1.0f);
  let x_1894 : bool = u_xlatb25;
  let x_1895 : bool = u_xlatb5;
  u_xlatb5 = (x_1894 | x_1895);
  let x_1897 : bool = u_xlatb5;
  let x_1898 : f32 = u_xlat63;
  u_xlat63 = select(x_1898, 1.0f, x_1897);
  let x_1900 : vec3<f32> = vs_INTERP0;
  let x_1902 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_1904 : vec3<f32> = (x_1900 + -(x_1902));
  let x_1905 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1904.x, x_1904.y, x_1904.z, x_1905.w);
  let x_1907 : vec4<f32> = u_xlat5;
  let x_1909 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec3<f32>(x_1907.x, x_1907.y, x_1907.z), vec3<f32>(x_1909.x, x_1909.y, x_1909.z));
  let x_1914 : f32 = u_xlat5.x;
  let x_1916 : f32 = x_620.x_MainLightShadowParams.z;
  let x_1919 : f32 = x_620.x_MainLightShadowParams.w;
  u_xlat5.x = ((x_1914 * x_1916) + x_1919);
  let x_1923 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1923, 0.0f, 1.0f);
  let x_1926 : f32 = u_xlat63;
  u_xlat25 = (-(x_1926) + 1.0f);
  let x_1930 : f32 = u_xlat5.x;
  let x_1931 : f32 = u_xlat25;
  let x_1933 : f32 = u_xlat63;
  u_xlat63 = ((x_1930 * x_1931) + x_1933);
  let x_1935 : f32 = u_xlat64;
  let x_1938 : vec4<f32> = x_44.x_MainLightColor;
  let x_1940 : vec3<f32> = (vec3<f32>(x_1935, x_1935, x_1935) * vec3<f32>(x_1938.x, x_1938.y, x_1938.z));
  let x_1941 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1940.x, x_1940.y, x_1940.z, x_1941.w);
  let x_1943 : vec3<f32> = u_xlat4;
  let x_1945 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_1943), vec3<f32>(x_1945.x, x_1945.y, x_1945.z));
  let x_1948 : f32 = u_xlat65;
  let x_1949 : f32 = u_xlat65;
  u_xlat65 = (x_1948 + x_1949);
  let x_1951 : vec4<f32> = u_xlat3;
  let x_1953 : f32 = u_xlat65;
  let x_1957 : vec3<f32> = u_xlat4;
  let x_1959 : vec3<f32> = ((vec3<f32>(x_1951.x, x_1951.y, x_1951.z) * -(vec3<f32>(x_1953, x_1953, x_1953))) + -(x_1957));
  let x_1960 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1959.x, x_1959.y, x_1959.z, x_1960.w);
  let x_1962 : vec4<f32> = u_xlat3;
  let x_1964 : vec3<f32> = u_xlat4;
  u_xlat65 = dot(vec3<f32>(x_1962.x, x_1962.y, x_1962.z), x_1964);
  let x_1966 : f32 = u_xlat65;
  u_xlat65 = clamp(x_1966, 0.0f, 1.0f);
  let x_1968 : f32 = u_xlat65;
  u_xlat65 = (-(x_1968) + 1.0f);
  let x_1971 : f32 = u_xlat65;
  let x_1972 : f32 = u_xlat65;
  u_xlat65 = (x_1971 * x_1972);
  let x_1974 : f32 = u_xlat65;
  let x_1975 : f32 = u_xlat65;
  u_xlat65 = (x_1974 * x_1975);
  let x_1978 : f32 = u_xlat0.x;
  u_xlat66 = ((-(x_1978) * 0.699999988f) + 1.700000048f);
  let x_1985 : f32 = u_xlat0.x;
  let x_1986 : f32 = u_xlat66;
  u_xlat0.x = (x_1985 * x_1986);
  let x_1990 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1990 * 6.0f);
  let x_2002 : vec4<f32> = u_xlat7;
  let x_2005 : f32 = u_xlat0.x;
  let x_2006 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2002.x, x_2002.y, x_2002.z), x_2005);
  u_xlat7 = x_2006;
  let x_2008 : f32 = u_xlat7.w;
  u_xlat0.x = (x_2008 + -1.0f);
  let x_2012 : f32 = x_283.unity_SpecCube0_HDR.w;
  let x_2014 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2012 * x_2014) + 1.0f);
  let x_2019 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2019, 0.0f);
  let x_2023 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2023);
  let x_2027 : f32 = u_xlat0.x;
  let x_2029 : f32 = x_283.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2027 * x_2029);
  let x_2033 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2033);
  let x_2037 : f32 = u_xlat0.x;
  let x_2039 : f32 = x_283.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2037 * x_2039);
  let x_2042 : vec4<f32> = u_xlat7;
  let x_2044 : vec4<f32> = u_xlat0;
  let x_2046 : vec3<f32> = (vec3<f32>(x_2042.x, x_2042.y, x_2042.z) * vec3<f32>(x_2044.x, x_2044.x, x_2044.x));
  let x_2047 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2046.x, x_2046.y, x_2046.z, x_2047.w);
  let x_2049 : vec2<f32> = u_xlat20;
  let x_2051 : vec2<f32> = u_xlat20;
  let x_2055 : vec2<f32> = ((vec2<f32>(x_2049.x, x_2049.x) * vec2<f32>(x_2051.x, x_2051.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2056 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2055.x, x_2055.y, x_2056.z, x_2056.w);
  let x_2059 : f32 = u_xlat0.y;
  u_xlat20.x = (1.0f / x_2059);
  let x_2062 : vec3<f32> = u_xlat2;
  let x_2064 : f32 = u_xlat40;
  let x_2066 : vec3<f32> = (-(x_2062) + vec3<f32>(x_2064, x_2064, x_2064));
  let x_2067 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2066.x, x_2066.y, x_2066.z, x_2067.w);
  let x_2069 : f32 = u_xlat65;
  let x_2071 : vec4<f32> = u_xlat8;
  let x_2074 : vec3<f32> = u_xlat2;
  let x_2075 : vec3<f32> = ((vec3<f32>(x_2069, x_2069, x_2069) * vec3<f32>(x_2071.x, x_2071.y, x_2071.z)) + x_2074);
  let x_2076 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2075.x, x_2075.y, x_2075.z, x_2076.w);
  let x_2078 : vec2<f32> = u_xlat20;
  let x_2080 : vec4<f32> = u_xlat8;
  let x_2082 : vec3<f32> = (vec3<f32>(x_2078.x, x_2078.x, x_2078.x) * vec3<f32>(x_2080.x, x_2080.y, x_2080.z));
  let x_2083 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2082.x, x_2082.y, x_2082.z, x_2083.w);
  let x_2085 : vec4<f32> = u_xlat7;
  let x_2087 : vec4<f32> = u_xlat8;
  let x_2089 : vec3<f32> = (vec3<f32>(x_2085.x, x_2085.y, x_2085.z) * vec3<f32>(x_2087.x, x_2087.y, x_2087.z));
  let x_2090 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2089.x, x_2089.y, x_2089.z, x_2090.w);
  let x_2092 : vec3<f32> = u_xlat21;
  let x_2093 : vec4<f32> = u_xlat6;
  let x_2096 : vec4<f32> = u_xlat7;
  u_xlat21 = ((x_2092 * vec3<f32>(x_2093.x, x_2093.y, x_2093.z)) + vec3<f32>(x_2096.x, x_2096.y, x_2096.z));
  let x_2099 : f32 = u_xlat63;
  let x_2102 : f32 = x_283.unity_LightData.z;
  u_xlat20.x = (x_2099 * x_2102);
  let x_2105 : vec4<f32> = u_xlat3;
  let x_2108 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat40 = dot(vec3<f32>(x_2105.x, x_2105.y, x_2105.z), vec3<f32>(x_2108.x, x_2108.y, x_2108.z));
  let x_2111 : f32 = u_xlat40;
  u_xlat40 = clamp(x_2111, 0.0f, 1.0f);
  let x_2113 : f32 = u_xlat40;
  let x_2115 : f32 = u_xlat20.x;
  u_xlat20.x = (x_2113 * x_2115);
  let x_2118 : vec2<f32> = u_xlat20;
  let x_2120 : vec4<f32> = u_xlat5;
  let x_2122 : vec3<f32> = (vec3<f32>(x_2118.x, x_2118.x, x_2118.x) * vec3<f32>(x_2120.x, x_2120.y, x_2120.z));
  let x_2123 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2122.x, x_2122.y, x_2122.z, x_2123.w);
  let x_2125 : vec3<f32> = u_xlat4;
  let x_2127 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2129 : vec3<f32> = (x_2125 + vec3<f32>(x_2127.x, x_2127.y, x_2127.z));
  let x_2130 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2129.x, x_2129.y, x_2129.z, x_2130.w);
  let x_2132 : vec4<f32> = u_xlat7;
  let x_2134 : vec4<f32> = u_xlat7;
  u_xlat20.x = dot(vec3<f32>(x_2132.x, x_2132.y, x_2132.z), vec3<f32>(x_2134.x, x_2134.y, x_2134.z));
  let x_2139 : f32 = u_xlat20.x;
  u_xlat20.x = max(x_2139, 1.17549435e-37f);
  let x_2144 : f32 = u_xlat20.x;
  u_xlat20.x = inverseSqrt(x_2144);
  let x_2147 : vec2<f32> = u_xlat20;
  let x_2149 : vec4<f32> = u_xlat7;
  let x_2151 : vec3<f32> = (vec3<f32>(x_2147.x, x_2147.x, x_2147.x) * vec3<f32>(x_2149.x, x_2149.y, x_2149.z));
  let x_2152 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2151.x, x_2151.y, x_2151.z, x_2152.w);
  let x_2154 : vec4<f32> = u_xlat3;
  let x_2156 : vec4<f32> = u_xlat7;
  u_xlat20.x = dot(vec3<f32>(x_2154.x, x_2154.y, x_2154.z), vec3<f32>(x_2156.x, x_2156.y, x_2156.z));
  let x_2161 : f32 = u_xlat20.x;
  u_xlat20.x = clamp(x_2161, 0.0f, 1.0f);
  let x_2165 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2167 : vec4<f32> = u_xlat7;
  u_xlat20.y = dot(vec3<f32>(x_2165.x, x_2165.y, x_2165.z), vec3<f32>(x_2167.x, x_2167.y, x_2167.z));
  let x_2172 : f32 = u_xlat20.y;
  u_xlat20.y = clamp(x_2172, 0.0f, 1.0f);
  let x_2175 : vec2<f32> = u_xlat20;
  let x_2176 : vec2<f32> = u_xlat20;
  u_xlat20 = (x_2175 * x_2176);
  let x_2179 : f32 = u_xlat20.x;
  let x_2181 : f32 = u_xlat0.x;
  u_xlat20.x = ((x_2179 * x_2181) + 1.000010014f);
  let x_2187 : f32 = u_xlat20.x;
  let x_2189 : f32 = u_xlat20.x;
  u_xlat20.x = (x_2187 * x_2189);
  let x_2193 : f32 = u_xlat20.y;
  u_xlat40 = max(x_2193, 0.100000001f);
  let x_2196 : f32 = u_xlat40;
  let x_2198 : f32 = u_xlat20.x;
  u_xlat20.x = (x_2196 * x_2198);
  let x_2201 : f32 = u_xlat62;
  let x_2203 : f32 = u_xlat20.x;
  u_xlat20.x = (x_2201 * x_2203);
  let x_2207 : f32 = u_xlat1.x;
  let x_2209 : f32 = u_xlat20.x;
  u_xlat20.x = (x_2207 / x_2209);
  let x_2212 : vec3<f32> = u_xlat2;
  let x_2213 : vec2<f32> = u_xlat20;
  let x_2216 : vec4<f32> = u_xlat6;
  let x_2218 : vec3<f32> = ((x_2212 * vec3<f32>(x_2213.x, x_2213.x, x_2213.x)) + vec3<f32>(x_2216.x, x_2216.y, x_2216.z));
  let x_2219 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2218.x, x_2218.y, x_2218.z, x_2219.w);
  let x_2221 : vec4<f32> = u_xlat5;
  let x_2223 : vec4<f32> = u_xlat7;
  let x_2225 : vec3<f32> = (vec3<f32>(x_2221.x, x_2221.y, x_2221.z) * vec3<f32>(x_2223.x, x_2223.y, x_2223.z));
  let x_2226 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2225.x, x_2225.y, x_2225.z, x_2226.w);
  let x_2229 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2231 : f32 = x_283.unity_LightData.y;
  u_xlat20.x = min(x_2229, x_2231);
  let x_2237 : f32 = u_xlat20.x;
  u_xlatu20 = bitcast<u32>(i32(x_2237));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2249 : u32 = u_xlatu_loop_1;
    let x_2250 : u32 = u_xlatu20;
    if ((x_2249 < x_2250)) {
    } else {
      break;
    }
    let x_2253 : u32 = u_xlatu_loop_1;
    u_xlatu63 = (x_2253 >> 2u);
    let x_2257 : u32 = u_xlatu_loop_1;
    u_xlati65 = bitcast<i32>((x_2257 & 3u));
    let x_2260 : u32 = u_xlatu63;
    let x_2263 : vec4<f32> = x_283.unity_LightIndices[bitcast<i32>(x_2260)];
    let x_2273 : i32 = u_xlati65;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2278 : vec4<u32> = indexable[x_2273];
    u_xlat63 = dot(x_2263, bitcast<vec4<f32>>(x_2278));
    let x_2282 : f32 = u_xlat63;
    u_xlati63 = i32(x_2282);
    let x_2284 : vec3<f32> = vs_INTERP0;
    let x_2296 : i32 = u_xlati63;
    let x_2298 : vec4<f32> = x_2295.x_AdditionalLightsPosition[x_2296];
    let x_2301 : i32 = u_xlati63;
    let x_2303 : vec4<f32> = x_2295.x_AdditionalLightsPosition[x_2301];
    let x_2305 : vec3<f32> = ((-(x_2284) * vec3<f32>(x_2298.w, x_2298.w, x_2298.w)) + vec3<f32>(x_2303.x, x_2303.y, x_2303.z));
    let x_2306 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2305.x, x_2305.y, x_2305.z, x_2306.w);
    let x_2308 : vec4<f32> = u_xlat8;
    let x_2310 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(vec3<f32>(x_2308.x, x_2308.y, x_2308.z), vec3<f32>(x_2310.x, x_2310.y, x_2310.z));
    let x_2313 : f32 = u_xlat65;
    u_xlat65 = max(x_2313, 6.10351562e-05f);
    let x_2316 : f32 = u_xlat65;
    u_xlat66 = inverseSqrt(x_2316);
    let x_2318 : f32 = u_xlat66;
    let x_2320 : vec4<f32> = u_xlat8;
    let x_2322 : vec3<f32> = (vec3<f32>(x_2318, x_2318, x_2318) * vec3<f32>(x_2320.x, x_2320.y, x_2320.z));
    let x_2323 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2322.x, x_2322.y, x_2322.z, x_2323.w);
    let x_2326 : f32 = u_xlat65;
    u_xlat67 = (1.0f / x_2326);
    let x_2328 : f32 = u_xlat65;
    let x_2329 : i32 = u_xlati63;
    let x_2331 : f32 = x_2295.x_AdditionalLightsAttenuation[x_2329].x;
    u_xlat65 = (x_2328 * x_2331);
    let x_2333 : f32 = u_xlat65;
    let x_2335 : f32 = u_xlat65;
    u_xlat65 = ((-(x_2333) * x_2335) + 1.0f);
    let x_2338 : f32 = u_xlat65;
    u_xlat65 = max(x_2338, 0.0f);
    let x_2340 : f32 = u_xlat65;
    let x_2341 : f32 = u_xlat65;
    u_xlat65 = (x_2340 * x_2341);
    let x_2343 : f32 = u_xlat65;
    let x_2344 : f32 = u_xlat67;
    u_xlat65 = (x_2343 * x_2344);
    let x_2346 : i32 = u_xlati63;
    let x_2348 : vec4<f32> = x_2295.x_AdditionalLightsSpotDir[x_2346];
    let x_2350 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_2348.x, x_2348.y, x_2348.z), vec3<f32>(x_2350.x, x_2350.y, x_2350.z));
    let x_2353 : f32 = u_xlat67;
    let x_2354 : i32 = u_xlati63;
    let x_2356 : f32 = x_2295.x_AdditionalLightsAttenuation[x_2354].z;
    let x_2358 : i32 = u_xlati63;
    let x_2360 : f32 = x_2295.x_AdditionalLightsAttenuation[x_2358].w;
    u_xlat67 = ((x_2353 * x_2356) + x_2360);
    let x_2362 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2362, 0.0f, 1.0f);
    let x_2364 : f32 = u_xlat67;
    let x_2365 : f32 = u_xlat67;
    u_xlat67 = (x_2364 * x_2365);
    let x_2367 : f32 = u_xlat65;
    let x_2368 : f32 = u_xlat67;
    u_xlat65 = (x_2367 * x_2368);
    let x_2370 : f32 = u_xlat64;
    let x_2372 : i32 = u_xlati63;
    let x_2374 : vec4<f32> = x_2295.x_AdditionalLightsColor[x_2372];
    let x_2376 : vec3<f32> = (vec3<f32>(x_2370, x_2370, x_2370) * vec3<f32>(x_2374.x, x_2374.y, x_2374.z));
    let x_2377 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2376.x, x_2376.y, x_2376.z, x_2377.w);
    let x_2379 : vec4<f32> = u_xlat3;
    let x_2381 : vec4<f32> = u_xlat9;
    u_xlat63 = dot(vec3<f32>(x_2379.x, x_2379.y, x_2379.z), vec3<f32>(x_2381.x, x_2381.y, x_2381.z));
    let x_2384 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2384, 0.0f, 1.0f);
    let x_2386 : f32 = u_xlat63;
    let x_2387 : f32 = u_xlat65;
    u_xlat63 = (x_2386 * x_2387);
    let x_2389 : f32 = u_xlat63;
    let x_2391 : vec4<f32> = u_xlat10;
    let x_2393 : vec3<f32> = (vec3<f32>(x_2389, x_2389, x_2389) * vec3<f32>(x_2391.x, x_2391.y, x_2391.z));
    let x_2394 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2393.x, x_2393.y, x_2393.z, x_2394.w);
    let x_2396 : vec4<f32> = u_xlat8;
    let x_2398 : f32 = u_xlat66;
    let x_2401 : vec3<f32> = u_xlat4;
    let x_2402 : vec3<f32> = ((vec3<f32>(x_2396.x, x_2396.y, x_2396.z) * vec3<f32>(x_2398, x_2398, x_2398)) + x_2401);
    let x_2403 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2402.x, x_2402.y, x_2402.z, x_2403.w);
    let x_2405 : vec4<f32> = u_xlat8;
    let x_2407 : vec4<f32> = u_xlat8;
    u_xlat63 = dot(vec3<f32>(x_2405.x, x_2405.y, x_2405.z), vec3<f32>(x_2407.x, x_2407.y, x_2407.z));
    let x_2410 : f32 = u_xlat63;
    u_xlat63 = max(x_2410, 1.17549435e-37f);
    let x_2412 : f32 = u_xlat63;
    u_xlat63 = inverseSqrt(x_2412);
    let x_2414 : f32 = u_xlat63;
    let x_2416 : vec4<f32> = u_xlat8;
    let x_2418 : vec3<f32> = (vec3<f32>(x_2414, x_2414, x_2414) * vec3<f32>(x_2416.x, x_2416.y, x_2416.z));
    let x_2419 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2418.x, x_2418.y, x_2418.z, x_2419.w);
    let x_2421 : vec4<f32> = u_xlat3;
    let x_2423 : vec4<f32> = u_xlat8;
    u_xlat63 = dot(vec3<f32>(x_2421.x, x_2421.y, x_2421.z), vec3<f32>(x_2423.x, x_2423.y, x_2423.z));
    let x_2426 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2426, 0.0f, 1.0f);
    let x_2428 : vec4<f32> = u_xlat9;
    let x_2430 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(vec3<f32>(x_2428.x, x_2428.y, x_2428.z), vec3<f32>(x_2430.x, x_2430.y, x_2430.z));
    let x_2433 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2433, 0.0f, 1.0f);
    let x_2435 : f32 = u_xlat63;
    let x_2436 : f32 = u_xlat63;
    u_xlat63 = (x_2435 * x_2436);
    let x_2438 : f32 = u_xlat63;
    let x_2440 : f32 = u_xlat0.x;
    u_xlat63 = ((x_2438 * x_2440) + 1.000010014f);
    let x_2443 : f32 = u_xlat65;
    let x_2444 : f32 = u_xlat65;
    u_xlat65 = (x_2443 * x_2444);
    let x_2446 : f32 = u_xlat63;
    let x_2447 : f32 = u_xlat63;
    u_xlat63 = (x_2446 * x_2447);
    let x_2449 : f32 = u_xlat65;
    u_xlat65 = max(x_2449, 0.100000001f);
    let x_2451 : f32 = u_xlat63;
    let x_2452 : f32 = u_xlat65;
    u_xlat63 = (x_2451 * x_2452);
    let x_2454 : f32 = u_xlat62;
    let x_2455 : f32 = u_xlat63;
    u_xlat63 = (x_2454 * x_2455);
    let x_2458 : f32 = u_xlat1.x;
    let x_2459 : f32 = u_xlat63;
    u_xlat63 = (x_2458 / x_2459);
    let x_2461 : vec3<f32> = u_xlat2;
    let x_2462 : f32 = u_xlat63;
    let x_2465 : vec4<f32> = u_xlat6;
    let x_2467 : vec3<f32> = ((x_2461 * vec3<f32>(x_2462, x_2462, x_2462)) + vec3<f32>(x_2465.x, x_2465.y, x_2465.z));
    let x_2468 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2467.x, x_2467.y, x_2467.z, x_2468.w);
    let x_2470 : vec4<f32> = u_xlat8;
    let x_2472 : vec4<f32> = u_xlat10;
    let x_2475 : vec4<f32> = u_xlat7;
    let x_2477 : vec3<f32> = ((vec3<f32>(x_2470.x, x_2470.y, x_2470.z) * vec3<f32>(x_2472.x, x_2472.y, x_2472.z)) + vec3<f32>(x_2475.x, x_2475.y, x_2475.z));
    let x_2478 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2477.x, x_2477.y, x_2477.z, x_2478.w);

    continuing {
      let x_2480 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2480 + bitcast<u32>(1i));
    }
  }
  let x_2482 : vec3<f32> = u_xlat21;
  let x_2483 : f32 = u_xlat60;
  let x_2486 : vec4<f32> = u_xlat5;
  let x_2488 : vec3<f32> = ((x_2482 * vec3<f32>(x_2483, x_2483, x_2483)) + vec3<f32>(x_2486.x, x_2486.y, x_2486.z));
  let x_2489 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2488.x, x_2488.y, x_2488.z, x_2489.w);
  let x_2493 : vec4<f32> = u_xlat7;
  let x_2495 : vec4<f32> = u_xlat0;
  let x_2497 : vec3<f32> = (vec3<f32>(x_2493.x, x_2493.y, x_2493.z) + vec3<f32>(x_2495.x, x_2495.y, x_2495.z));
  let x_2498 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2497.x, x_2497.y, x_2497.z, x_2498.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0);
}

