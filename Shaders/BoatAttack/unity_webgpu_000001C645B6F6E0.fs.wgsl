type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraNormalsTexture : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var x_232 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var x_518 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var x_791 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var x_1060 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_95 : vec2<f32> = vs_TEXCOORD0;
  let x_97 : f32 = x_34.x_GlobalMipBias.x;
  let x_98 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_95, x_97);
  u_xlat1 = vec3<f32>(x_98.x, x_98.y, x_98.z);
  let x_104 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_104) + 1.0f);
  let x_110 : f32 = u_xlat0;
  let x_112 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_110 * x_112);
  let x_119 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_121 : vec2<f32> = vs_TEXCOORD0;
  let x_126 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat2 = ((vec3<f32>(x_119.x, x_119.y, x_119.z) * vec3<f32>(x_121.x, x_121.x, x_121.x)) + vec3<f32>(x_126.x, x_126.y, x_126.z));
  let x_131 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_133 : vec2<f32> = u_xlat14;
  let x_136 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_131.x, x_131.y, x_131.z) * vec3<f32>(x_133.x, x_133.x, x_133.x)) + x_136);
  let x_140 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_142 : f32 = u_xlat21;
  let x_145 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_140.x, x_140.y, x_140.z) * vec3<f32>(x_142, x_142, x_142)) + x_145);
  let x_147 : vec2<f32> = vs_TEXCOORD0;
  let x_149 : vec4<f32> = x_34.x_ScaledScreenParams;
  u_xlat14 = (x_147 * vec2<f32>(x_149.x, x_149.y));
  let x_154 : vec2<f32> = u_xlat14;
  let x_156 : vec4<f32> = x_34.x_SSAOParams;
  let x_158 : vec2<f32> = (x_154 * vec2<f32>(x_156.z, x_156.z));
  let x_159 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_158.x, x_158.y, x_159.z, x_159.w);
  let x_162 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec2<f32>(x_162.x, x_162.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_168 : f32 = u_xlat22;
  u_xlat22 = fract(x_168);
  let x_170 : f32 = u_xlat22;
  u_xlat22 = (x_170 * 52.982917786f);
  let x_173 : f32 = u_xlat22;
  u_xlat22 = fract(x_173);
  let x_176 : f32 = u_xlat22;
  u_xlat23 = fract(x_176);
  let x_178 : f32 = u_xlat23;
  u_xlat3.z = ((x_178 * 2.0f) + -1.0f);
  let x_184 : f32 = u_xlat22;
  u_xlat22 = (x_184 + 0.9296875f);
  let x_187 : f32 = u_xlat22;
  u_xlat22 = (x_187 * 6.283185482f);
  let x_191 : f32 = u_xlat3.z;
  let x_194 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_191) * x_194) + 1.0f);
  let x_197 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_197);
  let x_200 : f32 = u_xlat22;
  u_xlat4.x = sin(x_200);
  let x_204 : f32 = u_xlat22;
  u_xlat5.x = cos(x_204);
  let x_207 : f32 = u_xlat23;
  let x_209 : f32 = u_xlat5.x;
  u_xlat3.x = (x_207 * x_209);
  let x_212 : f32 = u_xlat23;
  let x_214 : f32 = u_xlat4.x;
  u_xlat3.y = (x_212 * x_214);
  let x_217 : vec4<f32> = u_xlat3;
  let x_220 : vec3<f32> = (vec3<f32>(x_217.x, x_217.y, x_217.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_221 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_220.x, x_220.y, x_220.z, x_221.w);
  let x_223 : vec3<f32> = u_xlat1;
  let x_225 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(-(x_223), vec3<f32>(x_225.x, x_225.y, x_225.z));
  let x_229 : f32 = u_xlat22;
  u_xlatb22 = (x_229 >= 0.0f);
  let x_231 : bool = u_xlatb22;
  if (x_231) {
    let x_235 : vec4<f32> = u_xlat3;
    x_232 = -(vec3<f32>(x_235.x, x_235.y, x_235.z));
  } else {
    let x_239 : vec4<f32> = u_xlat3;
    x_232 = vec3<f32>(x_239.x, x_239.y, x_239.z);
  }
  let x_241 : vec3<f32> = x_232;
  let x_242 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_241.x, x_241.y, x_241.z, x_242.w);
  let x_244 : vec4<f32> = u_xlat3;
  let x_247 : vec4<f32> = x_34.x_SSAOParams;
  let x_250 : vec3<f32> = u_xlat2;
  let x_251 : vec3<f32> = ((vec3<f32>(x_244.x, x_244.y, x_244.z) * vec3<f32>(x_247.y, x_247.y, x_247.y)) + x_250);
  let x_252 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_251.x, x_251.y, x_251.z, x_252.w);
  let x_255 : vec4<f32> = u_xlat3;
  let x_259 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_261 : vec2<f32> = (vec2<f32>(x_255.y, x_255.y) * vec2<f32>(x_259.x, x_259.y));
  let x_262 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_261.x, x_262.y, x_261.y);
  let x_265 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_267 : vec4<f32> = u_xlat3;
  let x_270 : vec3<f32> = u_xlat10;
  let x_272 : vec2<f32> = ((vec2<f32>(x_265.x, x_265.y) * vec2<f32>(x_267.x, x_267.x)) + vec2<f32>(x_270.x, x_270.z));
  let x_273 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_272.x, x_272.y, x_273.z, x_273.w);
  let x_276 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_278 : vec4<f32> = u_xlat3;
  let x_281 : vec4<f32> = u_xlat3;
  let x_283 : vec2<f32> = ((vec2<f32>(x_276.x, x_276.y) * vec2<f32>(x_278.z, x_278.z)) + vec2<f32>(x_281.x, x_281.y));
  let x_284 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_283.x, x_283.y, x_284.z, x_284.w);
  let x_286 : vec4<f32> = u_xlat3;
  let x_289 : vec2<f32> = (vec2<f32>(x_286.x, x_286.y) + vec2<f32>(1.0f, 1.0f));
  let x_290 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_289.x, x_289.y, x_290.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat3;
  let x_295 : vec2<f32> = (vec2<f32>(x_292.x, x_292.y) * vec2<f32>(0.5f, 0.5f));
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_295.x, x_295.y, x_296.z, x_296.w);
  let x_298 : vec4<f32> = u_xlat3;
  let x_302 : vec2<f32> = clamp(vec2<f32>(x_298.x, x_298.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_303 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_302.x, x_302.y, x_303.z, x_303.w);
  let x_308 : vec4<f32> = u_xlat3;
  let x_311 : f32 = x_34.x_GlobalMipBias.x;
  let x_312 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_308.x, x_308.y), x_311);
  u_xlat22 = x_312.x;
  let x_315 : f32 = u_xlat7.x;
  let x_317 : f32 = u_xlat22;
  let x_320 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_315) * x_317) + x_320);
  let x_323 : f32 = u_xlat0;
  let x_324 : f32 = u_xlat23;
  u_xlat17 = (x_323 + -(x_324));
  let x_328 : f32 = u_xlat17;
  let x_331 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_328) < x_331);
  let x_333 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_333);
  let x_335 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_335);
  let x_337 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_337);
  let x_339 : f32 = u_xlat22;
  let x_340 : f32 = u_xlat17;
  u_xlat22 = (x_339 * x_340);
  let x_343 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_343) + 1.0f);
  let x_347 : f32 = u_xlat23;
  let x_349 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_347 * x_349);
  let x_352 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_354 : vec4<f32> = u_xlat3;
  let x_358 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_360 : vec3<f32> = ((vec3<f32>(x_352.x, x_352.y, x_352.z) * vec3<f32>(x_354.x, x_354.x, x_354.x)) + vec3<f32>(x_358.x, x_358.y, x_358.z));
  let x_361 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_360.x, x_361.y, x_360.y, x_360.z);
  let x_364 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_366 : vec3<f32> = u_xlat10;
  let x_369 : vec4<f32> = u_xlat3;
  let x_371 : vec3<f32> = ((vec3<f32>(x_364.x, x_364.y, x_364.z) * vec3<f32>(x_366.x, x_366.x, x_366.x)) + vec3<f32>(x_369.x, x_369.z, x_369.w));
  let x_372 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_371.x, x_371.y, x_371.z, x_372.w);
  let x_375 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_377 : f32 = u_xlat23;
  let x_380 : vec4<f32> = u_xlat3;
  let x_382 : vec3<f32> = ((vec3<f32>(x_375.x, x_375.y, x_375.z) * vec3<f32>(x_377, x_377, x_377)) + vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_383 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_382.x, x_382.y, x_382.z, x_383.w);
  let x_385 : vec3<f32> = u_xlat2;
  let x_387 : vec4<f32> = u_xlat3;
  let x_389 : vec3<f32> = (-(x_385) + vec3<f32>(x_387.x, x_387.y, x_387.z));
  let x_390 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_389.x, x_389.y, x_389.z, x_390.w);
  let x_392 : vec4<f32> = u_xlat3;
  let x_394 : vec3<f32> = u_xlat1;
  u_xlat23 = dot(vec3<f32>(x_392.x, x_392.y, x_392.z), x_394);
  let x_396 : f32 = u_xlat0;
  let x_400 : f32 = u_xlat23;
  u_xlat23 = ((-(x_396) * 0.004f) + x_400);
  let x_402 : f32 = u_xlat23;
  u_xlat23 = max(x_402, 0.0f);
  let x_404 : vec4<f32> = u_xlat3;
  let x_406 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_404.x, x_404.y, x_404.z), vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_411 : f32 = u_xlat3.x;
  u_xlat3.x = (x_411 + 0.0001f);
  let x_416 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_416);
  let x_419 : f32 = u_xlat23;
  let x_421 : f32 = u_xlat3.x;
  u_xlat23 = (x_419 * x_421);
  let x_423 : vec2<f32> = u_xlat14;
  let x_426 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_423.x, x_423.y, x_423.x, x_423.y) * vec4<f32>(x_426.z, x_426.z, x_426.z, x_426.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_435 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec2<f32>(x_435.x, x_435.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_440 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_440);
  let x_444 : f32 = u_xlat3.x;
  u_xlat3.x = (x_444 * 52.982917786f);
  let x_448 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_448);
  let x_451 : vec4<f32> = u_xlat3;
  let x_456 : vec2<f32> = (vec2<f32>(x_451.x, x_451.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_457 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_456.x, x_456.y, x_457.z, x_457.w);
  let x_460 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_460);
  let x_464 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_464 * 2.0f) + -1.0f);
  let x_469 : f32 = u_xlat3.y;
  u_xlat3.x = (x_469 * 6.283185482f);
  let x_473 : f32 = u_xlat4.z;
  let x_476 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_473) * x_476) + 1.0f);
  let x_481 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_481);
  let x_485 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_485);
  let x_489 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_489);
  let x_493 : f32 = u_xlat10.x;
  let x_495 : f32 = u_xlat5.x;
  u_xlat4.x = (x_493 * x_495);
  let x_499 : f32 = u_xlat3.x;
  let x_501 : f32 = u_xlat10.x;
  u_xlat4.y = (x_499 * x_501);
  let x_504 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_504 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_508 : vec3<f32> = u_xlat1;
  let x_510 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(-(x_508), x_510);
  let x_515 : f32 = u_xlat3.x;
  u_xlatb3 = (x_515 >= 0.0f);
  let x_517 : bool = u_xlatb3;
  if (x_517) {
    let x_521 : vec3<f32> = u_xlat4;
    x_518 = -(x_521);
  } else {
    let x_524 : vec3<f32> = u_xlat4;
    x_518 = x_524;
  }
  let x_525 : vec3<f32> = x_518;
  u_xlat4 = x_525;
  let x_526 : vec3<f32> = u_xlat4;
  let x_528 : vec4<f32> = x_34.x_SSAOParams;
  let x_531 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_526 * vec3<f32>(x_528.y, x_528.y, x_528.y)) + x_531);
  let x_533 : vec3<f32> = u_xlat4;
  let x_536 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_538 : vec2<f32> = (vec2<f32>(x_533.y, x_533.y) * vec2<f32>(x_536.x, x_536.y));
  let x_539 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_538.x, x_538.y, x_539.z, x_539.w);
  let x_542 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_544 : vec3<f32> = u_xlat4;
  let x_547 : vec4<f32> = u_xlat3;
  let x_549 : vec2<f32> = ((vec2<f32>(x_542.x, x_542.y) * vec2<f32>(x_544.x, x_544.x)) + vec2<f32>(x_547.x, x_547.y));
  let x_550 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_549.x, x_549.y, x_550.z, x_550.w);
  let x_553 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_555 : vec3<f32> = u_xlat4;
  let x_558 : vec4<f32> = u_xlat3;
  let x_560 : vec2<f32> = ((vec2<f32>(x_553.x, x_553.y) * vec2<f32>(x_555.z, x_555.z)) + vec2<f32>(x_558.x, x_558.y));
  let x_561 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_560.x, x_560.y, x_561.z, x_561.w);
  let x_563 : vec4<f32> = u_xlat3;
  let x_565 : vec2<f32> = (vec2<f32>(x_563.x, x_563.y) + vec2<f32>(1.0f, 1.0f));
  let x_566 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_565.x, x_565.y, x_566.z, x_566.w);
  let x_568 : vec4<f32> = u_xlat3;
  let x_570 : vec2<f32> = (vec2<f32>(x_568.x, x_568.y) * vec2<f32>(0.5f, 0.5f));
  let x_571 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_570.x, x_570.y, x_571.z, x_571.w);
  let x_573 : vec4<f32> = u_xlat3;
  let x_577 : vec2<f32> = clamp(vec2<f32>(x_573.x, x_573.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_578 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_577.x, x_577.y, x_578.z, x_578.w);
  let x_583 : vec4<f32> = u_xlat3;
  let x_586 : f32 = x_34.x_GlobalMipBias.x;
  let x_587 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_583.x, x_583.y), x_586);
  u_xlat4.x = x_587.x;
  let x_592 : f32 = u_xlat7.x;
  let x_595 : f32 = u_xlat4.x;
  let x_598 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_592) * x_595) + x_598);
  let x_602 : f32 = u_xlat0;
  let x_604 : f32 = u_xlat11.x;
  u_xlat18 = (x_602 + -(x_604));
  let x_610 : f32 = u_xlat18;
  let x_613 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_610) < x_613);
  let x_617 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_617);
  let x_621 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_621);
  let x_625 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_625);
  let x_629 : f32 = u_xlat4.x;
  let x_631 : f32 = u_xlat4.z;
  u_xlat4.x = (x_629 * x_631);
  let x_635 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_635) + 1.0f);
  let x_640 : f32 = u_xlat11.x;
  let x_642 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_640 * x_642);
  let x_646 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_648 : vec4<f32> = u_xlat3;
  let x_652 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_646.x, x_646.y, x_646.z) * vec3<f32>(x_648.x, x_648.x, x_648.x)) + vec3<f32>(x_652.x, x_652.y, x_652.z));
  let x_656 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_658 : vec3<f32> = u_xlat10;
  let x_661 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_656.x, x_656.y, x_656.z) * vec3<f32>(x_658.x, x_658.x, x_658.x)) + x_661);
  let x_664 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_666 : vec3<f32> = u_xlat11;
  let x_669 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_664.x, x_664.y, x_664.z) * vec3<f32>(x_666.x, x_666.x, x_666.x)) + x_669);
  let x_671 : vec3<f32> = u_xlat2;
  let x_673 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_671) + x_673);
  let x_675 : vec3<f32> = u_xlat11;
  let x_676 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_675, x_676);
  let x_679 : f32 = u_xlat0;
  let x_683 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_679) * 0.004f) + x_683);
  let x_687 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_687, 0.0f);
  let x_690 : vec3<f32> = u_xlat11;
  let x_691 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_690, x_691);
  let x_695 : f32 = u_xlat10.x;
  u_xlat10.x = (x_695 + 0.0001f);
  let x_699 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_699);
  let x_703 : f32 = u_xlat10.x;
  let x_705 : f32 = u_xlat3.x;
  u_xlat3.x = (x_703 * x_705);
  let x_709 : f32 = u_xlat4.x;
  let x_711 : f32 = u_xlat3.x;
  u_xlat3.x = (x_709 * x_711);
  let x_714 : f32 = u_xlat23;
  let x_715 : f32 = u_xlat22;
  let x_718 : f32 = u_xlat3.x;
  u_xlat22 = ((x_714 * x_715) + x_718);
  let x_720 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_720.z, x_720.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_723 : f32 = u_xlat23;
  u_xlat23 = fract(x_723);
  let x_725 : f32 = u_xlat23;
  u_xlat23 = (x_725 * 52.982917786f);
  let x_727 : f32 = u_xlat23;
  u_xlat23 = fract(x_727);
  let x_729 : f32 = u_xlat23;
  let x_734 : vec2<f32> = (vec2<f32>(x_729, x_729) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_735 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_734.x, x_734.y, x_735.z, x_735.w);
  let x_738 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_738);
  let x_740 : f32 = u_xlat23;
  u_xlat4.z = ((x_740 * 2.0f) + -1.0f);
  let x_745 : f32 = u_xlat3.y;
  u_xlat23 = (x_745 * 6.283185482f);
  let x_748 : f32 = u_xlat4.z;
  let x_751 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_748) * x_751) + 1.0f);
  let x_756 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_756);
  let x_759 : f32 = u_xlat23;
  u_xlat5.x = sin(x_759);
  let x_763 : f32 = u_xlat23;
  u_xlat6 = cos(x_763);
  let x_766 : f32 = u_xlat3.x;
  let x_767 : f32 = u_xlat6;
  u_xlat4.x = (x_766 * x_767);
  let x_771 : f32 = u_xlat3.x;
  let x_773 : f32 = u_xlat5.x;
  u_xlat4.y = (x_771 * x_773);
  let x_776 : vec3<f32> = u_xlat4;
  let x_779 : vec3<f32> = (x_776 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_780 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_779.x, x_779.y, x_779.z, x_780.w);
  let x_782 : vec3<f32> = u_xlat1;
  let x_784 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_782), vec3<f32>(x_784.x, x_784.y, x_784.z));
  let x_788 : f32 = u_xlat23;
  u_xlatb23 = (x_788 >= 0.0f);
  let x_790 : bool = u_xlatb23;
  if (x_790) {
    let x_794 : vec4<f32> = u_xlat3;
    x_791 = -(vec3<f32>(x_794.x, x_794.y, x_794.z));
  } else {
    let x_798 : vec4<f32> = u_xlat3;
    x_791 = vec3<f32>(x_798.x, x_798.y, x_798.z);
  }
  let x_800 : vec3<f32> = x_791;
  let x_801 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_800.x, x_800.y, x_800.z, x_801.w);
  let x_803 : vec4<f32> = u_xlat3;
  let x_806 : vec4<f32> = x_34.x_SSAOParams;
  let x_809 : vec3<f32> = u_xlat2;
  let x_810 : vec3<f32> = ((vec3<f32>(x_803.x, x_803.y, x_803.z) * vec3<f32>(x_806.y, x_806.y, x_806.y)) + x_809);
  let x_811 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_810.x, x_810.y, x_810.z, x_811.w);
  let x_813 : vec4<f32> = u_xlat3;
  let x_816 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_818 : vec2<f32> = (vec2<f32>(x_813.y, x_813.y) * vec2<f32>(x_816.x, x_816.y));
  let x_819 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_818.x, x_819.y, x_818.y);
  let x_822 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_824 : vec4<f32> = u_xlat3;
  let x_827 : vec3<f32> = u_xlat10;
  let x_829 : vec2<f32> = ((vec2<f32>(x_822.x, x_822.y) * vec2<f32>(x_824.x, x_824.x)) + vec2<f32>(x_827.x, x_827.z));
  let x_830 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_829.x, x_829.y, x_830.z, x_830.w);
  let x_833 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_835 : vec4<f32> = u_xlat3;
  let x_838 : vec4<f32> = u_xlat3;
  let x_840 : vec2<f32> = ((vec2<f32>(x_833.x, x_833.y) * vec2<f32>(x_835.z, x_835.z)) + vec2<f32>(x_838.x, x_838.y));
  let x_841 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_840.x, x_840.y, x_841.z, x_841.w);
  let x_843 : vec4<f32> = u_xlat3;
  let x_845 : vec2<f32> = (vec2<f32>(x_843.x, x_843.y) + vec2<f32>(1.0f, 1.0f));
  let x_846 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_845.x, x_845.y, x_846.z, x_846.w);
  let x_848 : vec4<f32> = u_xlat3;
  let x_850 : vec2<f32> = (vec2<f32>(x_848.x, x_848.y) * vec2<f32>(0.5f, 0.5f));
  let x_851 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
  let x_853 : vec4<f32> = u_xlat3;
  let x_857 : vec2<f32> = clamp(vec2<f32>(x_853.x, x_853.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_858 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_857.x, x_857.y, x_858.z, x_858.w);
  let x_863 : vec4<f32> = u_xlat3;
  let x_866 : f32 = x_34.x_GlobalMipBias.x;
  let x_867 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_863.x, x_863.y), x_866);
  u_xlat23 = x_867.x;
  let x_870 : f32 = u_xlat7.x;
  let x_872 : f32 = u_xlat23;
  let x_875 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_870) * x_872) + x_875);
  let x_878 : f32 = u_xlat0;
  let x_879 : f32 = u_xlat17;
  u_xlat24 = (x_878 + -(x_879));
  let x_883 : f32 = u_xlat24;
  let x_886 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_883) < x_886);
  let x_888 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_888);
  let x_890 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_890);
  let x_892 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_892);
  let x_894 : f32 = u_xlat23;
  let x_895 : f32 = u_xlat24;
  u_xlat23 = (x_894 * x_895);
  let x_898 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_898) + 1.0f);
  let x_902 : f32 = u_xlat17;
  let x_904 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_902 * x_904);
  let x_907 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_909 : vec4<f32> = u_xlat3;
  let x_913 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_907.x, x_907.y, x_907.z) * vec3<f32>(x_909.x, x_909.x, x_909.x)) + vec3<f32>(x_913.x, x_913.y, x_913.z));
  let x_917 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_919 : vec3<f32> = u_xlat10;
  let x_922 : vec3<f32> = u_xlat4;
  let x_923 : vec3<f32> = ((vec3<f32>(x_917.x, x_917.y, x_917.z) * vec3<f32>(x_919.x, x_919.x, x_919.x)) + x_922);
  let x_924 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_923.z);
  let x_927 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_929 : f32 = u_xlat17;
  let x_932 : vec4<f32> = u_xlat3;
  let x_934 : vec3<f32> = ((vec3<f32>(x_927.x, x_927.y, x_927.z) * vec3<f32>(x_929, x_929, x_929)) + vec3<f32>(x_932.x, x_932.y, x_932.w));
  let x_935 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_934.x, x_934.y, x_934.z, x_935.w);
  let x_937 : vec3<f32> = u_xlat2;
  let x_939 : vec4<f32> = u_xlat3;
  let x_941 : vec3<f32> = (-(x_937) + vec3<f32>(x_939.x, x_939.y, x_939.z));
  let x_942 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_941.x, x_941.y, x_941.z, x_942.w);
  let x_944 : vec4<f32> = u_xlat3;
  let x_946 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_944.x, x_944.y, x_944.z), x_946);
  let x_948 : f32 = u_xlat0;
  let x_951 : f32 = u_xlat24;
  u_xlat24 = ((-(x_948) * 0.004f) + x_951);
  let x_953 : f32 = u_xlat24;
  u_xlat24 = max(x_953, 0.0f);
  let x_955 : vec4<f32> = u_xlat3;
  let x_957 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_955.x, x_955.y, x_955.z), vec3<f32>(x_957.x, x_957.y, x_957.z));
  let x_962 : f32 = u_xlat3.x;
  u_xlat3.x = (x_962 + 0.0001f);
  let x_966 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_966);
  let x_970 : f32 = u_xlat3.x;
  let x_971 : f32 = u_xlat24;
  u_xlat3.x = (x_970 * x_971);
  let x_975 : f32 = u_xlat3.x;
  let x_976 : f32 = u_xlat23;
  let x_978 : f32 = u_xlat22;
  u_xlat22 = ((x_975 * x_976) + x_978);
  let x_980 : vec2<f32> = u_xlat14;
  let x_982 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat14 = ((x_980 * vec2<f32>(x_982.z, x_982.z)) + vec2<f32>(6.248999596f, 14.600999832f));
  let x_989 : vec2<f32> = u_xlat14;
  u_xlat14.x = dot(x_989, vec2<f32>(0.067110561f, 0.00583715f));
  let x_993 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_993);
  let x_997 : f32 = u_xlat14.x;
  u_xlat14.x = (x_997 * 52.982917786f);
  let x_1001 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1001);
  let x_1004 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_1004.x, x_1004.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1011 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1011);
  let x_1015 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_1015 * 2.0f) + -1.0f);
  let x_1020 : f32 = u_xlat14.y;
  u_xlat14.x = (x_1020 * 6.283185482f);
  let x_1024 : f32 = u_xlat3.z;
  let x_1027 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_1024) * x_1027) + 1.0f);
  let x_1030 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_1030);
  let x_1033 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_1033);
  let x_1037 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_1037);
  let x_1040 : f32 = u_xlat21;
  let x_1042 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1040 * x_1042);
  let x_1045 : f32 = u_xlat21;
  let x_1047 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1045 * x_1047);
  let x_1050 : vec3<f32> = u_xlat1;
  let x_1052 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(-(x_1050), vec3<f32>(x_1052.x, x_1052.y, x_1052.z));
  let x_1057 : f32 = u_xlat14.x;
  u_xlatb14 = (x_1057 >= 0.0f);
  let x_1059 : bool = u_xlatb14;
  if (x_1059) {
    let x_1063 : vec4<f32> = u_xlat3;
    x_1060 = -(vec3<f32>(x_1063.x, x_1063.y, x_1063.z));
  } else {
    let x_1067 : vec4<f32> = u_xlat3;
    x_1060 = vec3<f32>(x_1067.x, x_1067.y, x_1067.z);
  }
  let x_1069 : vec3<f32> = x_1060;
  let x_1070 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1069.x, x_1069.y, x_1069.z, x_1070.w);
  let x_1072 : vec4<f32> = u_xlat3;
  let x_1075 : vec4<f32> = x_34.x_SSAOParams;
  let x_1078 : vec3<f32> = u_xlat2;
  let x_1079 : vec3<f32> = ((vec3<f32>(x_1072.x, x_1072.y, x_1072.z) * vec3<f32>(x_1075.y, x_1075.y, x_1075.y)) + x_1078);
  let x_1080 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1079.x, x_1079.y, x_1079.z, x_1080.w);
  let x_1082 : vec4<f32> = u_xlat3;
  let x_1085 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_1082.y, x_1082.y) * vec2<f32>(x_1085.x, x_1085.y));
  let x_1089 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1091 : vec4<f32> = u_xlat3;
  let x_1094 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1089.x, x_1089.y) * vec2<f32>(x_1091.x, x_1091.x)) + x_1094);
  let x_1097 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1099 : vec4<f32> = u_xlat3;
  let x_1102 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1097.x, x_1097.y) * vec2<f32>(x_1099.z, x_1099.z)) + x_1102);
  let x_1104 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1104 + vec2<f32>(1.0f, 1.0f));
  let x_1106 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1106 * vec2<f32>(0.5f, 0.5f));
  let x_1108 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_1108, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1115 : vec2<f32> = u_xlat14;
  let x_1117 : f32 = x_34.x_GlobalMipBias.x;
  let x_1118 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1115, x_1117);
  u_xlat23 = x_1118.x;
  let x_1121 : f32 = u_xlat7.x;
  let x_1123 : f32 = u_xlat23;
  let x_1126 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_1121) * x_1123) + x_1126);
  let x_1130 : f32 = u_xlat7.x;
  let x_1132 : f32 = u_xlat0;
  u_xlat3.x = (-(x_1130) + x_1132);
  let x_1136 : f32 = u_xlat3.x;
  let x_1139 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_1136) < x_1139);
  let x_1141 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_1141);
  let x_1144 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1144);
  let x_1146 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1146);
  let x_1148 : f32 = u_xlat23;
  let x_1150 : f32 = u_xlat3.x;
  u_xlat23 = (x_1148 * x_1150);
  let x_1153 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_1153) + 1.0f);
  let x_1157 : f32 = u_xlat7.x;
  let x_1159 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_1157 * x_1159);
  let x_1163 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1165 : vec2<f32> = u_xlat14;
  let x_1169 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_1171 : vec3<f32> = ((vec3<f32>(x_1163.x, x_1163.y, x_1163.z) * vec3<f32>(x_1165.x, x_1165.x, x_1165.x)) + vec3<f32>(x_1169.x, x_1169.y, x_1169.z));
  let x_1172 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1171.x, x_1171.y, x_1171.z, x_1172.w);
  let x_1175 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1177 : f32 = u_xlat21;
  let x_1180 : vec4<f32> = u_xlat3;
  let x_1182 : vec3<f32> = ((vec3<f32>(x_1175.x, x_1175.y, x_1175.z) * vec3<f32>(x_1177, x_1177, x_1177)) + vec3<f32>(x_1180.x, x_1180.y, x_1180.z));
  let x_1183 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1182.x, x_1182.y, x_1182.z, x_1183.w);
  let x_1186 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1188 : vec3<f32> = u_xlat7;
  let x_1191 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_1186.x, x_1186.y, x_1186.z) * vec3<f32>(x_1188.x, x_1188.x, x_1188.x)) + vec3<f32>(x_1191.x, x_1191.y, x_1191.z));
  let x_1194 : vec3<f32> = u_xlat2;
  let x_1196 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_1194) + x_1196);
  let x_1198 : vec3<f32> = u_xlat7;
  let x_1199 : vec3<f32> = u_xlat1;
  u_xlat2.x = dot(x_1198, x_1199);
  let x_1202 : f32 = u_xlat0;
  let x_1206 : f32 = u_xlat2.x;
  u_xlat2.x = ((-(x_1202) * 0.004f) + x_1206);
  let x_1210 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1210, 0.0f);
  let x_1213 : vec3<f32> = u_xlat7;
  let x_1214 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_1213, x_1214);
  let x_1218 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1218 + 0.0001f);
  let x_1222 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_1222);
  let x_1226 : f32 = u_xlat7.x;
  let x_1228 : f32 = u_xlat2.x;
  u_xlat7.x = (x_1226 * x_1228);
  let x_1232 : f32 = u_xlat7.x;
  let x_1233 : f32 = u_xlat23;
  let x_1235 : f32 = u_xlat22;
  u_xlat7.x = ((x_1232 * x_1233) + x_1235);
  let x_1239 : f32 = u_xlat7.x;
  let x_1241 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_1239 * x_1241);
  let x_1245 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_1245);
  let x_1248 : f32 = u_xlat0;
  let x_1251 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_1248) * x_1251) + 1.0f);
  let x_1254 : f32 = u_xlat0;
  let x_1255 : f32 = u_xlat0;
  u_xlat0 = (x_1254 * x_1255);
  let x_1258 : f32 = u_xlat7.x;
  let x_1260 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_1258 * x_1260);
  let x_1263 : f32 = u_xlat0;
  let x_1265 : f32 = u_xlat7.x;
  u_xlat0 = (x_1263 * x_1265);
  let x_1267 : f32 = u_xlat0;
  u_xlat0 = (x_1267 * 0.25f);
  let x_1270 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1270, 0.0f, 1.0f);
  let x_1272 : f32 = u_xlat0;
  u_xlat0 = log2(x_1272);
  let x_1274 : f32 = u_xlat0;
  u_xlat0 = (x_1274 * 0.600000024f);
  let x_1277 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1277);
  let x_1281 : vec3<f32> = u_xlat1;
  let x_1283 : vec3<f32> = ((x_1281 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1284 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1284.x, x_1283.x, x_1283.y, x_1283.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

