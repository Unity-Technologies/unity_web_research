type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_299 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_401 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3854 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec4<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_193 : f32;
  var x_206 : f32;
  var x_218 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1899 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2025 : f32;
  var u_xlatb47 : bool;
  var x_2079 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3463 : f32;
  var u_xlat24 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_173 : vec3<f32> = (-(x_167) + x_172);
  let x_174 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_177 : vec4<f32> = u_xlat4;
  let x_179 : vec4<f32> = u_xlat4;
  u_xlat67 = dot(vec3<f32>(x_177.x, x_177.y, x_177.z), vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_182);
  let x_184 : f32 = u_xlat67;
  let x_186 : vec4<f32> = u_xlat4;
  let x_188 : vec3<f32> = (vec3<f32>(x_184, x_184, x_184) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_189 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_188.x, x_188.y, x_188.z, x_189.w);
  let x_192 : bool = u_xlatb0;
  if (x_192) {
    let x_197 : f32 = u_xlat4.x;
    x_193 = x_197;
  } else {
    let x_202 : f32 = x_160.unity_MatrixV[0i].z;
    x_193 = x_202;
  }
  let x_203 : f32 = x_193;
  u_xlat5.x = x_203;
  let x_205 : bool = u_xlatb0;
  if (x_205) {
    let x_210 : f32 = u_xlat4.y;
    x_206 = x_210;
  } else {
    let x_214 : f32 = x_160.unity_MatrixV[1i].z;
    x_206 = x_214;
  }
  let x_215 : f32 = x_206;
  u_xlat5.y = x_215;
  let x_217 : bool = u_xlatb0;
  if (x_217) {
    let x_222 : f32 = u_xlat4.z;
    x_218 = x_222;
  } else {
    let x_226 : f32 = x_160.unity_MatrixV[2i].z;
    x_218 = x_226;
  }
  let x_227 : f32 = x_218;
  u_xlat5.z = x_227;
  let x_229 : vec3<f32> = u_xlat5;
  let x_233 : vec4<f32> = x_95.unity_WorldToObject[1i];
  let x_235 : vec3<f32> = (vec3<f32>(x_229.y, x_229.y, x_229.y) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_239 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_241 : vec3<f32> = u_xlat5;
  let x_244 : vec4<f32> = u_xlat4;
  let x_246 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(x_241.x, x_241.x, x_241.x)) + vec3<f32>(x_244.x, x_244.y, x_244.z));
  let x_247 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_250 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_252 : vec3<f32> = u_xlat5;
  let x_255 : vec4<f32> = u_xlat4;
  let x_257 : vec3<f32> = ((vec3<f32>(x_250.x, x_250.y, x_250.z) * vec3<f32>(x_252.z, x_252.z, x_252.z)) + vec3<f32>(x_255.x, x_255.y, x_255.z));
  let x_258 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_257.x, x_257.y, x_257.z, x_258.w);
  let x_260 : vec4<f32> = u_xlat4;
  let x_262 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_260.x, x_260.y, x_260.z), vec3<f32>(x_262.x, x_262.y, x_262.z));
  let x_267 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_267);
  let x_270 : vec3<f32> = u_xlat0;
  let x_272 : vec4<f32> = u_xlat4;
  let x_274 : vec3<f32> = (vec3<f32>(x_270.x, x_270.x, x_270.x) * vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_289 : vec4<f32> = vs_INTERP3;
  let x_292 : f32 = x_160.x_GlobalMipBias.x;
  let x_293 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_289.x, x_289.y), x_292);
  u_xlat6 = x_293;
  let x_295 : vec4<f32> = u_xlat6;
  let x_301 : vec4<f32> = x_299.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_295.x, x_295.y, x_295.z) * vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_310 : vec4<f32> = vs_INTERP3;
  let x_313 : f32 = x_160.x_GlobalMipBias.x;
  let x_314 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_310.x, x_310.y), x_313);
  u_xlat8 = vec4<f32>(x_314.w, x_314.x, x_314.y, x_314.z);
  let x_317 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_317.y, x_317.z, x_317.w, x_317.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_324 : vec4<f32> = u_xlat9;
  let x_325 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_324, x_325);
  let x_329 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_329);
  let x_333 : vec3<f32> = u_xlat0;
  let x_335 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_333.x, x_333.x, x_333.x) * vec3<f32>(x_335.x, x_335.y, x_335.z));
  let x_340 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_340 * 200.0f);
  let x_345 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_345, 1.0f);
  let x_348 : vec3<f32> = u_xlat0;
  let x_350 : vec4<f32> = u_xlat6;
  let x_352 : vec3<f32> = (vec3<f32>(x_348.x, x_348.x, x_348.x) * vec3<f32>(x_350.x, x_350.y, x_350.z));
  let x_353 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_352.x, x_352.y, x_352.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat30;
  let x_359 : vec3<f32> = (vec3<f32>(x_355.x, x_355.y, x_355.z) * vec3<f32>(x_357.y, x_357.y, x_357.y));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
  let x_362 : vec3<f32> = u_xlat30;
  let x_364 : vec4<f32> = u_xlat2;
  let x_367 : vec4<f32> = u_xlat3;
  let x_369 : vec3<f32> = ((vec3<f32>(x_362.x, x_362.x, x_362.x) * vec3<f32>(x_364.x, x_364.y, x_364.z)) + vec3<f32>(x_367.x, x_367.y, x_367.z));
  let x_370 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_369.x, x_369.y, x_369.z, x_370.w);
  let x_372 : vec3<f32> = u_xlat30;
  let x_374 : vec3<f32> = u_xlat1;
  let x_376 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_372.z, x_372.z, x_372.z) * x_374) + vec3<f32>(x_376.x, x_376.y, x_376.z));
  let x_379 : vec3<f32> = u_xlat1;
  let x_380 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_379, x_380);
  let x_384 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_384, 1.17549435e-37f);
  let x_389 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_389);
  let x_392 : vec3<f32> = u_xlat0;
  let x_394 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_392.x, x_392.x, x_392.x) * x_394);
  let x_396 : vec3<f32> = vs_INTERP0;
  let x_403 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres0;
  let x_406 : vec3<f32> = (x_396 + -(vec3<f32>(x_403.x, x_403.y, x_403.z)));
  let x_407 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_406.x, x_406.y, x_406.z, x_407.w);
  let x_409 : vec3<f32> = vs_INTERP0;
  let x_411 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres1;
  let x_414 : vec3<f32> = (x_409 + -(vec3<f32>(x_411.x, x_411.y, x_411.z)));
  let x_415 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_414.x, x_414.y, x_414.z, x_415.w);
  let x_417 : vec3<f32> = vs_INTERP0;
  let x_419 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres2;
  let x_422 : vec3<f32> = (x_417 + -(vec3<f32>(x_419.x, x_419.y, x_419.z)));
  let x_423 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_422.x, x_422.y, x_422.z, x_423.w);
  let x_426 : vec3<f32> = vs_INTERP0;
  let x_429 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres3;
  let x_432 : vec3<f32> = (x_426 + -(vec3<f32>(x_429.x, x_429.y, x_429.z)));
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec4<f32> = u_xlat2;
  let x_437 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_435.x, x_435.y, x_435.z), vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_441 : vec4<f32> = u_xlat3;
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_441.x, x_441.y, x_441.z), vec3<f32>(x_443.x, x_443.y, x_443.z));
  let x_447 : vec4<f32> = u_xlat9;
  let x_449 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_447.x, x_447.y, x_447.z), vec3<f32>(x_449.x, x_449.y, x_449.z));
  let x_453 : vec4<f32> = u_xlat10;
  let x_455 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_453.x, x_453.y, x_453.z), vec3<f32>(x_455.x, x_455.y, x_455.z));
  let x_462 : vec4<f32> = u_xlat2;
  let x_465 : vec4<f32> = x_401.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_462 < x_465);
  let x_468 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_468);
  let x_472 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_472);
  let x_476 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_476);
  let x_480 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_480);
  let x_484 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_484);
  let x_489 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_489);
  let x_493 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_493);
  let x_496 : vec4<f32> = u_xlat2;
  let x_498 : vec4<f32> = u_xlat3;
  let x_500 : vec3<f32> = (vec3<f32>(x_496.x, x_496.y, x_496.z) + vec3<f32>(x_498.y, x_498.z, x_498.w));
  let x_501 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_500.x, x_500.y, x_500.z, x_501.w);
  let x_503 : vec4<f32> = u_xlat2;
  let x_506 : vec3<f32> = max(vec3<f32>(x_503.x, x_503.y, x_503.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_507 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_507.x, x_506.x, x_506.y, x_506.z);
  let x_509 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_509, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_516 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_516) + 4.0f);
  let x_522 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_522);
  let x_525 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_525) << bitcast<u32>(2i));
  let x_528 : vec3<f32> = vs_INTERP0;
  let x_530 : i32 = u_xlati0;
  let x_533 : i32 = u_xlati0;
  let x_537 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_530 + 1i) / 4i)][((x_533 + 1i) % 4i)];
  let x_539 : vec3<f32> = (vec3<f32>(x_528.y, x_528.y, x_528.y) * vec3<f32>(x_537.x, x_537.y, x_537.z));
  let x_540 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_542 : i32 = u_xlati0;
  let x_544 : i32 = u_xlati0;
  let x_547 : vec4<f32> = x_401.x_MainLightWorldToShadow[(x_542 / 4i)][(x_544 % 4i)];
  let x_549 : vec3<f32> = vs_INTERP0;
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : vec3<f32> = ((vec3<f32>(x_547.x, x_547.y, x_547.z) * vec3<f32>(x_549.x, x_549.x, x_549.x)) + vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_555 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
  let x_557 : i32 = u_xlati0;
  let x_560 : i32 = u_xlati0;
  let x_564 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_557 + 2i) / 4i)][((x_560 + 2i) % 4i)];
  let x_566 : vec3<f32> = vs_INTERP0;
  let x_569 : vec4<f32> = u_xlat2;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.x, x_564.y, x_564.z) * vec3<f32>(x_566.z, x_566.z, x_566.z)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat2;
  let x_576 : i32 = u_xlati0;
  let x_579 : i32 = u_xlati0;
  let x_583 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_576 + 3i) / 4i)][((x_579 + 3i) % 4i)];
  let x_585 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(x_583.x, x_583.y, x_583.z));
  let x_586 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_585.x, x_585.y, x_585.z, x_586.w);
  let x_590 : f32 = x_401.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_590);
  let x_592 : bool = u_xlatb0;
  if (x_592) {
    let x_597 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb67 = (x_597 == 1.0f);
    let x_599 : bool = u_xlatb67;
    if (x_599) {
      let x_602 : vec4<f32> = u_xlat2;
      let x_606 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_606);
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.x, x_609.y);
      let x_612 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_624 : vec3<f32> = txVec0;
      let x_626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_624.xy, x_624.z);
      u_xlat9.x = x_626;
      let x_629 : vec4<f32> = u_xlat3;
      let x_630 : vec2<f32> = vec2<f32>(x_629.z, x_629.w);
      let x_632 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_630.x, x_630.y, x_632);
      let x_639 : vec3<f32> = txVec1;
      let x_641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_639.xy, x_639.z);
      u_xlat9.y = x_641;
      let x_643 : vec4<f32> = u_xlat2;
      let x_647 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_643.x, x_643.y, x_643.x, x_643.y) + x_647);
      let x_650 : vec4<f32> = u_xlat3;
      let x_651 : vec2<f32> = vec2<f32>(x_650.x, x_650.y);
      let x_653 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_651.x, x_651.y, x_653);
      let x_660 : vec3<f32> = txVec2;
      let x_662 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_660.xy, x_660.z);
      u_xlat9.z = x_662;
      let x_665 : vec4<f32> = u_xlat3;
      let x_666 : vec2<f32> = vec2<f32>(x_665.z, x_665.w);
      let x_668 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_666.x, x_666.y, x_668);
      let x_675 : vec3<f32> = txVec3;
      let x_677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_675.xy, x_675.z);
      u_xlat9.w = x_677;
      let x_679 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_679, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_686 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb68 = (x_686 == 2.0f);
      let x_688 : bool = u_xlatb68;
      if (x_688) {
        let x_691 : vec4<f32> = u_xlat2;
        let x_694 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_699 : vec2<f32> = ((vec2<f32>(x_691.x, x_691.y) * vec2<f32>(x_694.z, x_694.w)) + vec2<f32>(0.5f, 0.5f));
        let x_700 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_699.x, x_699.y, x_700.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat3;
        let x_704 : vec2<f32> = floor(vec2<f32>(x_702.x, x_702.y));
        let x_705 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_704.x, x_704.y, x_705.z, x_705.w);
        let x_709 : vec4<f32> = u_xlat2;
        let x_712 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_715 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_709.x, x_709.y) * vec2<f32>(x_712.z, x_712.w)) + -(vec2<f32>(x_715.x, x_715.y)));
        let x_719 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_719.x, x_719.x, x_719.y, x_719.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_723 : vec4<f32> = u_xlat9;
        let x_725 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_723.x, x_723.x, x_723.z, x_723.z) * vec4<f32>(x_725.x, x_725.x, x_725.z, x_725.z));
        let x_728 : vec4<f32> = u_xlat10;
        let x_732 : vec2<f32> = (vec2<f32>(x_728.y, x_728.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_733 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_732.x, x_733.y, x_732.y, x_733.w);
        let x_735 : vec4<f32> = u_xlat10;
        let x_738 : vec2<f32> = u_xlat47;
        let x_740 : vec2<f32> = ((vec2<f32>(x_735.x, x_735.z) * vec2<f32>(0.5f, 0.5f)) + -(x_738));
        let x_741 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
        let x_744 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_744) + vec2<f32>(1.0f, 1.0f));
        let x_749 : vec2<f32> = u_xlat47;
        let x_751 : vec2<f32> = min(x_749, vec2<f32>(0.0f, 0.0f));
        let x_752 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_751.x, x_751.y, x_752.z, x_752.w);
        let x_754 : vec4<f32> = u_xlat11;
        let x_757 : vec4<f32> = u_xlat11;
        let x_760 : vec2<f32> = u_xlat54;
        let x_761 : vec2<f32> = ((-(vec2<f32>(x_754.x, x_754.y)) * vec2<f32>(x_757.x, x_757.y)) + x_760);
        let x_762 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
        let x_764 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_764, vec2<f32>(0.0f, 0.0f));
        let x_766 : vec2<f32> = u_xlat47;
        let x_768 : vec2<f32> = u_xlat47;
        let x_770 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_766) * x_768) + vec2<f32>(x_770.y, x_770.w));
        let x_773 : vec4<f32> = u_xlat11;
        let x_775 : vec2<f32> = (vec2<f32>(x_773.x, x_773.y) + vec2<f32>(1.0f, 1.0f));
        let x_776 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_775.x, x_775.y, x_776.z, x_776.w);
        let x_778 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_778 + vec2<f32>(1.0f, 1.0f));
        let x_781 : vec4<f32> = u_xlat10;
        let x_785 : vec2<f32> = (vec2<f32>(x_781.x, x_781.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_786 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_785.x, x_785.y, x_786.z, x_786.w);
        let x_788 : vec2<f32> = u_xlat54;
        let x_789 : vec2<f32> = (x_788 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_790 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_789.x, x_789.y, x_790.z, x_790.w);
        let x_792 : vec4<f32> = u_xlat11;
        let x_794 : vec2<f32> = (vec2<f32>(x_792.x, x_792.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_795 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_794.x, x_794.y, x_795.z, x_795.w);
        let x_798 : vec2<f32> = u_xlat47;
        let x_799 : vec2<f32> = (x_798 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_800 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_799.x, x_799.y, x_800.z, x_800.w);
        let x_802 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_802.y, x_802.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_806 : f32 = u_xlat11.x;
        u_xlat12.z = x_806;
        let x_809 : f32 = u_xlat47.x;
        u_xlat12.w = x_809;
        let x_812 : f32 = u_xlat13.x;
        u_xlat10.z = x_812;
        let x_815 : f32 = u_xlat9.x;
        u_xlat10.w = x_815;
        let x_818 : vec4<f32> = u_xlat10;
        let x_820 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_818.z, x_818.w, x_818.x, x_818.z) + vec4<f32>(x_820.z, x_820.w, x_820.x, x_820.z));
        let x_824 : f32 = u_xlat12.y;
        u_xlat11.z = x_824;
        let x_827 : f32 = u_xlat47.y;
        u_xlat11.w = x_827;
        let x_830 : f32 = u_xlat10.y;
        u_xlat13.z = x_830;
        let x_833 : f32 = u_xlat9.z;
        u_xlat13.w = x_833;
        let x_835 : vec4<f32> = u_xlat11;
        let x_837 : vec4<f32> = u_xlat13;
        let x_839 : vec3<f32> = (vec3<f32>(x_835.z, x_835.y, x_835.w) + vec3<f32>(x_837.z, x_837.y, x_837.w));
        let x_840 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_839.x, x_839.y, x_839.z, x_840.w);
        let x_842 : vec4<f32> = u_xlat10;
        let x_844 : vec4<f32> = u_xlat14;
        let x_846 : vec3<f32> = (vec3<f32>(x_842.x, x_842.z, x_842.w) / vec3<f32>(x_844.z, x_844.w, x_844.y));
        let x_847 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_846.x, x_846.y, x_846.z, x_847.w);
        let x_849 : vec4<f32> = u_xlat10;
        let x_855 : vec3<f32> = (vec3<f32>(x_849.x, x_849.y, x_849.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_856 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
        let x_858 : vec4<f32> = u_xlat13;
        let x_860 : vec4<f32> = u_xlat9;
        let x_862 : vec3<f32> = (vec3<f32>(x_858.z, x_858.y, x_858.w) / vec3<f32>(x_860.x, x_860.y, x_860.z));
        let x_863 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_862.x, x_862.y, x_862.z, x_863.w);
        let x_865 : vec4<f32> = u_xlat11;
        let x_867 : vec3<f32> = (vec3<f32>(x_865.x, x_865.y, x_865.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_868 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_867.x, x_867.y, x_867.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat10;
        let x_873 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_875 : vec3<f32> = (vec3<f32>(x_870.y, x_870.x, x_870.z) * vec3<f32>(x_873.x, x_873.x, x_873.x));
        let x_876 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_875.x, x_875.y, x_875.z, x_876.w);
        let x_878 : vec4<f32> = u_xlat11;
        let x_881 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_883 : vec3<f32> = (vec3<f32>(x_878.x, x_878.y, x_878.z) * vec3<f32>(x_881.y, x_881.y, x_881.y));
        let x_884 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_883.x, x_883.y, x_883.z, x_884.w);
        let x_887 : f32 = u_xlat11.x;
        u_xlat10.w = x_887;
        let x_889 : vec4<f32> = u_xlat3;
        let x_892 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_895 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_889.x, x_889.y, x_889.x, x_889.y) * vec4<f32>(x_892.x, x_892.y, x_892.x, x_892.y)) + vec4<f32>(x_895.y, x_895.w, x_895.x, x_895.w));
        let x_898 : vec4<f32> = u_xlat3;
        let x_901 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_904 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_898.x, x_898.y) * vec2<f32>(x_901.x, x_901.y)) + vec2<f32>(x_904.z, x_904.w));
        let x_908 : f32 = u_xlat10.y;
        u_xlat11.w = x_908;
        let x_910 : vec4<f32> = u_xlat11;
        let x_911 : vec2<f32> = vec2<f32>(x_910.y, x_910.z);
        let x_912 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_912.x, x_911.x, x_912.z, x_911.y);
        let x_914 : vec4<f32> = u_xlat3;
        let x_917 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_920 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_914.x, x_914.y, x_914.x, x_914.y) * vec4<f32>(x_917.x, x_917.y, x_917.x, x_917.y)) + vec4<f32>(x_920.x, x_920.y, x_920.z, x_920.y));
        let x_923 : vec4<f32> = u_xlat3;
        let x_926 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_929 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_923.x, x_923.y, x_923.x, x_923.y) * vec4<f32>(x_926.x, x_926.y, x_926.x, x_926.y)) + vec4<f32>(x_929.w, x_929.y, x_929.w, x_929.z));
        let x_932 : vec4<f32> = u_xlat3;
        let x_935 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_938 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_932.x, x_932.y, x_932.x, x_932.y) * vec4<f32>(x_935.x, x_935.y, x_935.x, x_935.y)) + vec4<f32>(x_938.x, x_938.w, x_938.z, x_938.w));
        let x_942 : vec4<f32> = u_xlat9;
        let x_944 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_942.x, x_942.x, x_942.x, x_942.y) * vec4<f32>(x_944.z, x_944.w, x_944.y, x_944.z));
        let x_948 : vec4<f32> = u_xlat9;
        let x_950 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_948.y, x_948.y, x_948.z, x_948.z) * x_950);
        let x_954 : f32 = u_xlat9.z;
        let x_956 : f32 = u_xlat14.y;
        u_xlat68 = (x_954 * x_956);
        let x_959 : vec4<f32> = u_xlat12;
        let x_960 : vec2<f32> = vec2<f32>(x_959.x, x_959.y);
        let x_962 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec4;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat3.x = x_971;
        let x_974 : vec4<f32> = u_xlat12;
        let x_975 : vec2<f32> = vec2<f32>(x_974.z, x_974.w);
        let x_977 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_975.x, x_975.y, x_977);
        let x_985 : vec3<f32> = txVec5;
        let x_987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_985.xy, x_985.z);
        u_xlat25 = x_987;
        let x_988 : f32 = u_xlat25;
        let x_990 : f32 = u_xlat15.y;
        u_xlat25 = (x_988 * x_990);
        let x_993 : f32 = u_xlat15.x;
        let x_995 : f32 = u_xlat3.x;
        let x_997 : f32 = u_xlat25;
        u_xlat3.x = ((x_993 * x_995) + x_997);
        let x_1001 : vec2<f32> = u_xlat47;
        let x_1003 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec6;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1010.xy, x_1010.z);
        u_xlat25 = x_1012;
        let x_1014 : f32 = u_xlat15.z;
        let x_1015 : f32 = u_xlat25;
        let x_1018 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1014 * x_1015) + x_1018);
        let x_1022 : vec4<f32> = u_xlat11;
        let x_1023 : vec2<f32> = vec2<f32>(x_1022.x, x_1022.y);
        let x_1025 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1023.x, x_1023.y, x_1025);
        let x_1032 : vec3<f32> = txVec7;
        let x_1034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1032.xy, x_1032.z);
        u_xlat25 = x_1034;
        let x_1036 : f32 = u_xlat15.w;
        let x_1037 : f32 = u_xlat25;
        let x_1040 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1036 * x_1037) + x_1040);
        let x_1044 : vec4<f32> = u_xlat13;
        let x_1045 : vec2<f32> = vec2<f32>(x_1044.x, x_1044.y);
        let x_1047 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1045.x, x_1045.y, x_1047);
        let x_1054 : vec3<f32> = txVec8;
        let x_1056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1054.xy, x_1054.z);
        u_xlat25 = x_1056;
        let x_1058 : f32 = u_xlat16.x;
        let x_1059 : f32 = u_xlat25;
        let x_1062 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1058 * x_1059) + x_1062);
        let x_1066 : vec4<f32> = u_xlat13;
        let x_1067 : vec2<f32> = vec2<f32>(x_1066.z, x_1066.w);
        let x_1069 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1067.x, x_1067.y, x_1069);
        let x_1076 : vec3<f32> = txVec9;
        let x_1078 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1076.xy, x_1076.z);
        u_xlat25 = x_1078;
        let x_1080 : f32 = u_xlat16.y;
        let x_1081 : f32 = u_xlat25;
        let x_1084 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1080 * x_1081) + x_1084);
        let x_1088 : vec4<f32> = u_xlat11;
        let x_1089 : vec2<f32> = vec2<f32>(x_1088.z, x_1088.w);
        let x_1091 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1089.x, x_1089.y, x_1091);
        let x_1098 : vec3<f32> = txVec10;
        let x_1100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1098.xy, x_1098.z);
        u_xlat25 = x_1100;
        let x_1102 : f32 = u_xlat16.z;
        let x_1103 : f32 = u_xlat25;
        let x_1106 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1102 * x_1103) + x_1106);
        let x_1110 : vec4<f32> = u_xlat10;
        let x_1111 : vec2<f32> = vec2<f32>(x_1110.x, x_1110.y);
        let x_1113 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1111.x, x_1111.y, x_1113);
        let x_1120 : vec3<f32> = txVec11;
        let x_1122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1120.xy, x_1120.z);
        u_xlat25 = x_1122;
        let x_1124 : f32 = u_xlat16.w;
        let x_1125 : f32 = u_xlat25;
        let x_1128 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1124 * x_1125) + x_1128);
        let x_1132 : vec4<f32> = u_xlat10;
        let x_1133 : vec2<f32> = vec2<f32>(x_1132.z, x_1132.w);
        let x_1135 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1133.x, x_1133.y, x_1135);
        let x_1142 : vec3<f32> = txVec12;
        let x_1144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1142.xy, x_1142.z);
        u_xlat25 = x_1144;
        let x_1145 : f32 = u_xlat68;
        let x_1146 : f32 = u_xlat25;
        let x_1149 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1145 * x_1146) + x_1149);
      } else {
        let x_1152 : vec4<f32> = u_xlat2;
        let x_1155 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1158 : vec2<f32> = ((vec2<f32>(x_1152.x, x_1152.y) * vec2<f32>(x_1155.z, x_1155.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1159 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1158.x, x_1158.y, x_1159.z, x_1159.w);
        let x_1161 : vec4<f32> = u_xlat3;
        let x_1163 : vec2<f32> = floor(vec2<f32>(x_1161.x, x_1161.y));
        let x_1164 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1163.x, x_1163.y, x_1164.z, x_1164.w);
        let x_1166 : vec4<f32> = u_xlat2;
        let x_1169 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1172 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1166.x, x_1166.y) * vec2<f32>(x_1169.z, x_1169.w)) + -(vec2<f32>(x_1172.x, x_1172.y)));
        let x_1176 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1176.x, x_1176.x, x_1176.y, x_1176.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1179 : vec4<f32> = u_xlat9;
        let x_1181 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1179.x, x_1179.x, x_1179.z, x_1179.z) * vec4<f32>(x_1181.x, x_1181.x, x_1181.z, x_1181.z));
        let x_1184 : vec4<f32> = u_xlat10;
        let x_1188 : vec2<f32> = (vec2<f32>(x_1184.y, x_1184.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1189 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1189.x, x_1188.x, x_1189.z, x_1188.y);
        let x_1191 : vec4<f32> = u_xlat10;
        let x_1194 : vec2<f32> = u_xlat47;
        let x_1196 : vec2<f32> = ((vec2<f32>(x_1191.x, x_1191.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1194));
        let x_1197 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1196.x, x_1197.y, x_1196.y, x_1197.w);
        let x_1199 : vec2<f32> = u_xlat47;
        let x_1201 : vec2<f32> = (-(x_1199) + vec2<f32>(1.0f, 1.0f));
        let x_1202 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1201.x, x_1201.y, x_1202.z, x_1202.w);
        let x_1204 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1204, vec2<f32>(0.0f, 0.0f));
        let x_1206 : vec2<f32> = u_xlat54;
        let x_1208 : vec2<f32> = u_xlat54;
        let x_1210 : vec4<f32> = u_xlat10;
        let x_1212 : vec2<f32> = ((-(x_1206) * x_1208) + vec2<f32>(x_1210.x, x_1210.y));
        let x_1213 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1212.x, x_1212.y, x_1213.z, x_1213.w);
        let x_1215 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1215, vec2<f32>(0.0f, 0.0f));
        let x_1218 : vec2<f32> = u_xlat54;
        let x_1220 : vec2<f32> = u_xlat54;
        let x_1222 : vec4<f32> = u_xlat9;
        let x_1224 : vec2<f32> = ((-(x_1218) * x_1220) + vec2<f32>(x_1222.y, x_1222.w));
        let x_1225 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1224.x, x_1225.y, x_1224.y);
        let x_1227 : vec4<f32> = u_xlat10;
        let x_1230 : vec2<f32> = (vec2<f32>(x_1227.x, x_1227.y) + vec2<f32>(2.0f, 2.0f));
        let x_1231 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1230.x, x_1230.y, x_1231.z, x_1231.w);
        let x_1233 : vec3<f32> = u_xlat31;
        let x_1235 : vec2<f32> = (vec2<f32>(x_1233.x, x_1233.z) + vec2<f32>(2.0f, 2.0f));
        let x_1236 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1236.x, x_1235.x, x_1236.z, x_1235.y);
        let x_1239 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1239 * 0.081632003f);
        let x_1243 : vec4<f32> = u_xlat9;
        let x_1246 : vec3<f32> = (vec3<f32>(x_1243.z, x_1243.x, x_1243.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1247 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1246.x, x_1246.y, x_1246.z, x_1247.w);
        let x_1249 : vec4<f32> = u_xlat10;
        let x_1252 : vec2<f32> = (vec2<f32>(x_1249.x, x_1249.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1253 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1252.x, x_1252.y, x_1253.z, x_1253.w);
        let x_1256 : f32 = u_xlat13.y;
        u_xlat12.x = x_1256;
        let x_1258 : vec2<f32> = u_xlat47;
        let x_1265 : vec2<f32> = ((vec2<f32>(x_1258.x, x_1258.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1266 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1266.x, x_1265.x, x_1266.z, x_1265.y);
        let x_1268 : vec2<f32> = u_xlat47;
        let x_1272 : vec2<f32> = ((vec2<f32>(x_1268.x, x_1268.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1273 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1272.x, x_1273.y, x_1272.y, x_1273.w);
        let x_1276 : f32 = u_xlat9.x;
        u_xlat10.y = x_1276;
        let x_1279 : f32 = u_xlat11.y;
        u_xlat10.w = x_1279;
        let x_1281 : vec4<f32> = u_xlat10;
        let x_1282 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1281 + x_1282);
        let x_1284 : vec2<f32> = u_xlat47;
        let x_1287 : vec2<f32> = ((vec2<f32>(x_1284.y, x_1284.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1288 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1288.x, x_1287.x, x_1288.z, x_1287.y);
        let x_1290 : vec2<f32> = u_xlat47;
        let x_1293 : vec2<f32> = ((vec2<f32>(x_1290.y, x_1290.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1294 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1293.x, x_1294.y, x_1293.y, x_1294.w);
        let x_1297 : f32 = u_xlat9.y;
        u_xlat11.y = x_1297;
        let x_1299 : vec4<f32> = u_xlat11;
        let x_1300 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1299 + x_1300);
        let x_1302 : vec4<f32> = u_xlat10;
        let x_1303 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1302 / x_1303);
        let x_1305 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1305 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1311 : vec4<f32> = u_xlat11;
        let x_1312 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1311 / x_1312);
        let x_1314 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1314 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1316 : vec4<f32> = u_xlat10;
        let x_1319 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1316.w, x_1316.x, x_1316.y, x_1316.z) * vec4<f32>(x_1319.x, x_1319.x, x_1319.x, x_1319.x));
        let x_1322 : vec4<f32> = u_xlat11;
        let x_1325 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1322.x, x_1322.w, x_1322.y, x_1322.z) * vec4<f32>(x_1325.y, x_1325.y, x_1325.y, x_1325.y));
        let x_1328 : vec4<f32> = u_xlat10;
        let x_1329 : vec3<f32> = vec3<f32>(x_1328.y, x_1328.z, x_1328.w);
        let x_1330 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1329.x, x_1330.y, x_1329.y, x_1329.z);
        let x_1333 : f32 = u_xlat11.x;
        u_xlat13.y = x_1333;
        let x_1335 : vec4<f32> = u_xlat3;
        let x_1338 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1341 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1335.x, x_1335.y, x_1335.x, x_1335.y) * vec4<f32>(x_1338.x, x_1338.y, x_1338.x, x_1338.y)) + vec4<f32>(x_1341.x, x_1341.y, x_1341.z, x_1341.y));
        let x_1344 : vec4<f32> = u_xlat3;
        let x_1347 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1350 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1344.x, x_1344.y) * vec2<f32>(x_1347.x, x_1347.y)) + vec2<f32>(x_1350.w, x_1350.y));
        let x_1354 : f32 = u_xlat13.y;
        u_xlat10.y = x_1354;
        let x_1357 : f32 = u_xlat11.z;
        u_xlat13.y = x_1357;
        let x_1359 : vec4<f32> = u_xlat3;
        let x_1362 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1365 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1359.x, x_1359.y, x_1359.x, x_1359.y) * vec4<f32>(x_1362.x, x_1362.y, x_1362.x, x_1362.y)) + vec4<f32>(x_1365.x, x_1365.y, x_1365.z, x_1365.y));
        let x_1368 : vec4<f32> = u_xlat3;
        let x_1371 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1374 : vec4<f32> = u_xlat13;
        let x_1376 : vec2<f32> = ((vec2<f32>(x_1368.x, x_1368.y) * vec2<f32>(x_1371.x, x_1371.y)) + vec2<f32>(x_1374.w, x_1374.y));
        let x_1377 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1376.x, x_1376.y, x_1377.z, x_1377.w);
        let x_1380 : f32 = u_xlat13.y;
        u_xlat10.z = x_1380;
        let x_1383 : vec4<f32> = u_xlat3;
        let x_1386 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1389 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1383.x, x_1383.y, x_1383.x, x_1383.y) * vec4<f32>(x_1386.x, x_1386.y, x_1386.x, x_1386.y)) + vec4<f32>(x_1389.x, x_1389.y, x_1389.x, x_1389.z));
        let x_1393 : f32 = u_xlat11.w;
        u_xlat13.y = x_1393;
        let x_1396 : vec4<f32> = u_xlat3;
        let x_1399 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1402 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1396.x, x_1396.y, x_1396.x, x_1396.y) * vec4<f32>(x_1399.x, x_1399.y, x_1399.x, x_1399.y)) + vec4<f32>(x_1402.x, x_1402.y, x_1402.z, x_1402.y));
        let x_1406 : vec4<f32> = u_xlat3;
        let x_1409 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1412 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1406.x, x_1406.y) * vec2<f32>(x_1409.x, x_1409.y)) + vec2<f32>(x_1412.w, x_1412.y));
        let x_1416 : f32 = u_xlat13.y;
        u_xlat10.w = x_1416;
        let x_1419 : vec4<f32> = u_xlat3;
        let x_1422 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1425 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1419.x, x_1419.y) * vec2<f32>(x_1422.x, x_1422.y)) + vec2<f32>(x_1425.x, x_1425.w));
        let x_1428 : vec4<f32> = u_xlat13;
        let x_1429 : vec3<f32> = vec3<f32>(x_1428.x, x_1428.z, x_1428.w);
        let x_1430 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1429.x, x_1430.y, x_1429.y, x_1429.z);
        let x_1432 : vec4<f32> = u_xlat3;
        let x_1435 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1438 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1432.x, x_1432.y, x_1432.x, x_1432.y) * vec4<f32>(x_1435.x, x_1435.y, x_1435.x, x_1435.y)) + vec4<f32>(x_1438.x, x_1438.y, x_1438.z, x_1438.y));
        let x_1442 : vec4<f32> = u_xlat3;
        let x_1445 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1448 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1442.x, x_1442.y) * vec2<f32>(x_1445.x, x_1445.y)) + vec2<f32>(x_1448.w, x_1448.y));
        let x_1452 : f32 = u_xlat10.x;
        u_xlat11.x = x_1452;
        let x_1454 : vec4<f32> = u_xlat3;
        let x_1457 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1460 : vec4<f32> = u_xlat11;
        let x_1462 : vec2<f32> = ((vec2<f32>(x_1454.x, x_1454.y) * vec2<f32>(x_1457.x, x_1457.y)) + vec2<f32>(x_1460.x, x_1460.y));
        let x_1463 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1462.x, x_1462.y, x_1463.z, x_1463.w);
        let x_1466 : vec4<f32> = u_xlat9;
        let x_1468 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1466.x, x_1466.x, x_1466.x, x_1466.x) * x_1468);
        let x_1471 : vec4<f32> = u_xlat9;
        let x_1473 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1471.y, x_1471.y, x_1471.y, x_1471.y) * x_1473);
        let x_1476 : vec4<f32> = u_xlat9;
        let x_1478 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1476.z, x_1476.z, x_1476.z, x_1476.z) * x_1478);
        let x_1480 : vec4<f32> = u_xlat9;
        let x_1482 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1480.w, x_1480.w, x_1480.w, x_1480.w) * x_1482);
        let x_1485 : vec4<f32> = u_xlat14;
        let x_1486 : vec2<f32> = vec2<f32>(x_1485.x, x_1485.y);
        let x_1488 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1486.x, x_1486.y, x_1488);
        let x_1495 : vec3<f32> = txVec13;
        let x_1497 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1495.xy, x_1495.z);
        u_xlat68 = x_1497;
        let x_1499 : vec4<f32> = u_xlat14;
        let x_1500 : vec2<f32> = vec2<f32>(x_1499.z, x_1499.w);
        let x_1502 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1500.x, x_1500.y, x_1502);
        let x_1510 : vec3<f32> = txVec14;
        let x_1512 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1510.xy, x_1510.z);
        u_xlat70 = x_1512;
        let x_1513 : f32 = u_xlat70;
        let x_1515 : f32 = u_xlat19.y;
        u_xlat70 = (x_1513 * x_1515);
        let x_1518 : f32 = u_xlat19.x;
        let x_1519 : f32 = u_xlat68;
        let x_1521 : f32 = u_xlat70;
        u_xlat68 = ((x_1518 * x_1519) + x_1521);
        let x_1524 : vec2<f32> = u_xlat47;
        let x_1526 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1524.x, x_1524.y, x_1526);
        let x_1533 : vec3<f32> = txVec15;
        let x_1535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1533.xy, x_1533.z);
        u_xlat47.x = x_1535;
        let x_1538 : f32 = u_xlat19.z;
        let x_1540 : f32 = u_xlat47.x;
        let x_1542 : f32 = u_xlat68;
        u_xlat68 = ((x_1538 * x_1540) + x_1542);
        let x_1545 : vec4<f32> = u_xlat17;
        let x_1546 : vec2<f32> = vec2<f32>(x_1545.x, x_1545.y);
        let x_1548 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1546.x, x_1546.y, x_1548);
        let x_1555 : vec3<f32> = txVec16;
        let x_1557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1555.xy, x_1555.z);
        u_xlat47.x = x_1557;
        let x_1560 : f32 = u_xlat19.w;
        let x_1562 : f32 = u_xlat47.x;
        let x_1564 : f32 = u_xlat68;
        u_xlat68 = ((x_1560 * x_1562) + x_1564);
        let x_1567 : vec4<f32> = u_xlat15;
        let x_1568 : vec2<f32> = vec2<f32>(x_1567.x, x_1567.y);
        let x_1570 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1568.x, x_1568.y, x_1570);
        let x_1577 : vec3<f32> = txVec17;
        let x_1579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1577.xy, x_1577.z);
        u_xlat47.x = x_1579;
        let x_1582 : f32 = u_xlat20.x;
        let x_1584 : f32 = u_xlat47.x;
        let x_1586 : f32 = u_xlat68;
        u_xlat68 = ((x_1582 * x_1584) + x_1586);
        let x_1589 : vec4<f32> = u_xlat15;
        let x_1590 : vec2<f32> = vec2<f32>(x_1589.z, x_1589.w);
        let x_1592 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1590.x, x_1590.y, x_1592);
        let x_1599 : vec3<f32> = txVec18;
        let x_1601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1599.xy, x_1599.z);
        u_xlat47.x = x_1601;
        let x_1604 : f32 = u_xlat20.y;
        let x_1606 : f32 = u_xlat47.x;
        let x_1608 : f32 = u_xlat68;
        u_xlat68 = ((x_1604 * x_1606) + x_1608);
        let x_1611 : vec4<f32> = u_xlat16;
        let x_1612 : vec2<f32> = vec2<f32>(x_1611.x, x_1611.y);
        let x_1614 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1612.x, x_1612.y, x_1614);
        let x_1621 : vec3<f32> = txVec19;
        let x_1623 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1621.xy, x_1621.z);
        u_xlat47.x = x_1623;
        let x_1626 : f32 = u_xlat20.z;
        let x_1628 : f32 = u_xlat47.x;
        let x_1630 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat17;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.z, x_1633.w);
        let x_1636 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec20;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1643.xy, x_1643.z);
        u_xlat47.x = x_1645;
        let x_1648 : f32 = u_xlat20.w;
        let x_1650 : f32 = u_xlat47.x;
        let x_1652 : f32 = u_xlat68;
        u_xlat68 = ((x_1648 * x_1650) + x_1652);
        let x_1655 : vec4<f32> = u_xlat18;
        let x_1656 : vec2<f32> = vec2<f32>(x_1655.x, x_1655.y);
        let x_1658 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1656.x, x_1656.y, x_1658);
        let x_1665 : vec3<f32> = txVec21;
        let x_1667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1665.xy, x_1665.z);
        u_xlat47.x = x_1667;
        let x_1670 : f32 = u_xlat21.x;
        let x_1672 : f32 = u_xlat47.x;
        let x_1674 : f32 = u_xlat68;
        u_xlat68 = ((x_1670 * x_1672) + x_1674);
        let x_1677 : vec4<f32> = u_xlat18;
        let x_1678 : vec2<f32> = vec2<f32>(x_1677.z, x_1677.w);
        let x_1680 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1678.x, x_1678.y, x_1680);
        let x_1687 : vec3<f32> = txVec22;
        let x_1689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1687.xy, x_1687.z);
        u_xlat47.x = x_1689;
        let x_1692 : f32 = u_xlat21.y;
        let x_1694 : f32 = u_xlat47.x;
        let x_1696 : f32 = u_xlat68;
        u_xlat68 = ((x_1692 * x_1694) + x_1696);
        let x_1699 : vec2<f32> = u_xlat32;
        let x_1701 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1699.x, x_1699.y, x_1701);
        let x_1708 : vec3<f32> = txVec23;
        let x_1710 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1708.xy, x_1708.z);
        u_xlat47.x = x_1710;
        let x_1713 : f32 = u_xlat21.z;
        let x_1715 : f32 = u_xlat47.x;
        let x_1717 : f32 = u_xlat68;
        u_xlat68 = ((x_1713 * x_1715) + x_1717);
        let x_1720 : vec2<f32> = u_xlat60;
        let x_1722 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1720.x, x_1720.y, x_1722);
        let x_1729 : vec3<f32> = txVec24;
        let x_1731 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1729.xy, x_1729.z);
        u_xlat47.x = x_1731;
        let x_1734 : f32 = u_xlat21.w;
        let x_1736 : f32 = u_xlat47.x;
        let x_1738 : f32 = u_xlat68;
        u_xlat68 = ((x_1734 * x_1736) + x_1738);
        let x_1741 : vec4<f32> = u_xlat13;
        let x_1742 : vec2<f32> = vec2<f32>(x_1741.x, x_1741.y);
        let x_1744 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1742.x, x_1742.y, x_1744);
        let x_1751 : vec3<f32> = txVec25;
        let x_1753 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1751.xy, x_1751.z);
        u_xlat47.x = x_1753;
        let x_1756 : f32 = u_xlat9.x;
        let x_1758 : f32 = u_xlat47.x;
        let x_1760 : f32 = u_xlat68;
        u_xlat68 = ((x_1756 * x_1758) + x_1760);
        let x_1763 : vec4<f32> = u_xlat13;
        let x_1764 : vec2<f32> = vec2<f32>(x_1763.z, x_1763.w);
        let x_1766 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1764.x, x_1764.y, x_1766);
        let x_1773 : vec3<f32> = txVec26;
        let x_1775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1773.xy, x_1773.z);
        u_xlat47.x = x_1775;
        let x_1778 : f32 = u_xlat9.y;
        let x_1780 : f32 = u_xlat47.x;
        let x_1782 : f32 = u_xlat68;
        u_xlat68 = ((x_1778 * x_1780) + x_1782);
        let x_1785 : vec2<f32> = u_xlat55;
        let x_1787 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1785.x, x_1785.y, x_1787);
        let x_1794 : vec3<f32> = txVec27;
        let x_1796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1794.xy, x_1794.z);
        u_xlat47.x = x_1796;
        let x_1799 : f32 = u_xlat9.z;
        let x_1801 : f32 = u_xlat47.x;
        let x_1803 : f32 = u_xlat68;
        u_xlat68 = ((x_1799 * x_1801) + x_1803);
        let x_1806 : vec4<f32> = u_xlat3;
        let x_1807 : vec2<f32> = vec2<f32>(x_1806.x, x_1806.y);
        let x_1809 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1807.x, x_1807.y, x_1809);
        let x_1816 : vec3<f32> = txVec28;
        let x_1818 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1816.xy, x_1816.z);
        u_xlat3.x = x_1818;
        let x_1821 : f32 = u_xlat9.w;
        let x_1823 : f32 = u_xlat3.x;
        let x_1825 : f32 = u_xlat68;
        u_xlat67 = ((x_1821 * x_1823) + x_1825);
      }
    }
  } else {
    let x_1829 : vec4<f32> = u_xlat2;
    let x_1830 : vec2<f32> = vec2<f32>(x_1829.x, x_1829.y);
    let x_1832 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1830.x, x_1830.y, x_1832);
    let x_1839 : vec3<f32> = txVec29;
    let x_1841 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1839.xy, x_1839.z);
    u_xlat67 = x_1841;
  }
  let x_1843 : f32 = x_401.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1843) + 1.0f);
  let x_1846 : f32 = u_xlat67;
  let x_1848 : f32 = x_401.x_MainLightShadowParams.x;
  let x_1850 : f32 = u_xlat68;
  u_xlat67 = ((x_1846 * x_1848) + x_1850);
  let x_1854 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1854);
  let x_1858 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1858 >= 1.0f);
  let x_1860 : bool = u_xlatb25;
  let x_1861 : bool = u_xlatb3;
  u_xlatb3 = (x_1860 | x_1861);
  let x_1863 : bool = u_xlatb3;
  let x_1864 : f32 = u_xlat67;
  u_xlat67 = select(x_1864, 1.0f, x_1863);
  let x_1866 : vec3<f32> = u_xlat1;
  let x_1868 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1866, -(vec3<f32>(x_1868.x, x_1868.y, x_1868.z)));
  let x_1874 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1874, 0.0f, 1.0f);
  let x_1878 : f32 = u_xlat67;
  let x_1881 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1878, x_1878, x_1878) * vec3<f32>(x_1881.x, x_1881.y, x_1881.z));
  let x_1884 : vec3<f32> = u_xlat23;
  let x_1885 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1884 * vec3<f32>(x_1885.x, x_1885.x, x_1885.x));
  let x_1888 : vec3<f32> = u_xlat1;
  let x_1889 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1888 * vec3<f32>(x_1889.x, x_1889.y, x_1889.z));
  let x_1893 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1893 < 0.0f);
  let x_1896 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1896 + 1.0f);
  let x_1898 : bool = u_xlatb67;
  if (x_1898) {
    let x_1902 : f32 = u_xlat25;
    x_1899 = x_1902;
  } else {
    let x_1905 : f32 = x_95.unity_LODFade.x;
    x_1899 = x_1905;
  }
  let x_1906 : f32 = x_1899;
  u_xlat67 = x_1906;
  let x_1907 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1907);
  let x_1909 : vec4<f32> = u_xlat4;
  let x_1914 : vec4<f32> = x_160.x_ScreenParams;
  let x_1916 : vec3<f32> = (abs(vec3<f32>(x_1909.x, x_1909.y, x_1909.z)) * vec3<f32>(x_1914.x, x_1914.y, x_1914.x));
  let x_1917 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1916.x, x_1916.y, x_1916.z, x_1917.w);
  let x_1922 : vec4<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(vec3<f32>(x_1922.x, x_1922.y, x_1922.z));
  let x_1927 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1927 * 1025u);
  let x_1931 : u32 = u_xlatu47;
  u_xlatu69 = (x_1931 >> 6u);
  let x_1935 : u32 = u_xlatu69;
  let x_1936 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1935 ^ x_1936));
  let x_1939 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1939) * 9u);
  let x_1943 : u32 = u_xlatu47;
  u_xlatu69 = (x_1943 >> 11u);
  let x_1946 : u32 = u_xlatu69;
  let x_1947 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1946 ^ x_1947));
  let x_1950 : i32 = u_xlati47;
  u_xlati47 = (x_1950 * 32769i);
  let x_1953 : i32 = u_xlati47;
  let x_1956 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1953) ^ x_1956));
  let x_1959 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1959) * 1025u);
  let x_1962 : u32 = u_xlatu47;
  u_xlatu69 = (x_1962 >> 6u);
  let x_1964 : u32 = u_xlatu69;
  let x_1965 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1964 ^ x_1965));
  let x_1968 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1968) * 9u);
  let x_1971 : u32 = u_xlatu47;
  u_xlatu69 = (x_1971 >> 11u);
  let x_1973 : u32 = u_xlatu69;
  let x_1974 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1973 ^ x_1974));
  let x_1977 : i32 = u_xlati47;
  u_xlati47 = (x_1977 * 32769i);
  let x_1979 : i32 = u_xlati47;
  let x_1982 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1979) ^ x_1982));
  let x_1985 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1985) * 1025u);
  let x_1988 : u32 = u_xlatu47;
  u_xlatu69 = (x_1988 >> 6u);
  let x_1990 : u32 = u_xlatu69;
  let x_1991 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1990 ^ x_1991));
  let x_1994 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1994) * 9u);
  let x_1997 : u32 = u_xlatu47;
  u_xlatu69 = (x_1997 >> 11u);
  let x_1999 : u32 = u_xlatu69;
  let x_2000 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1999 ^ x_2000));
  let x_2003 : i32 = u_xlati47;
  u_xlati47 = (x_2003 * 32769i);
  param = 1065353216i;
  let x_2009 : i32 = u_xlati47;
  param_1 = x_2009;
  param_2 = 0i;
  param_3 = 23i;
  let x_2012 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_2012);
  let x_2016 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2016 + -1.0f);
  let x_2021 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_2021) + 1.0f);
  let x_2024 : bool = u_xlatb25;
  if (x_2024) {
    let x_2029 : f32 = u_xlat47.x;
    x_2025 = x_2029;
  } else {
    let x_2031 : f32 = u_xlat69;
    x_2025 = x_2031;
  }
  let x_2032 : f32 = x_2025;
  u_xlat25 = x_2032;
  let x_2033 : f32 = u_xlat67;
  let x_2035 : f32 = u_xlat25;
  u_xlat67 = ((x_2033 * 2.0f) + -(x_2035));
  let x_2038 : f32 = u_xlat67;
  let x_2040 : f32 = u_xlat6.w;
  u_xlat25 = (x_2038 * x_2040);
  let x_2043 : f32 = u_xlat25;
  u_xlatb47 = (x_2043 >= 0.400000006f);
  let x_2046 : bool = u_xlatb47;
  let x_2047 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2047, x_2046);
  let x_2051 : f32 = u_xlat6.w;
  let x_2052 : f32 = u_xlat67;
  u_xlat67 = ((x_2051 * x_2052) + -0.400000006f);
  let x_2056 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2056);
  let x_2058 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2058);
  let x_2060 : f32 = u_xlat25;
  let x_2062 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2060) + abs(x_2062));
  let x_2065 : f32 = u_xlat25;
  u_xlat25 = max(x_2065, 0.0001f);
  let x_2068 : f32 = u_xlat67;
  let x_2069 : f32 = u_xlat25;
  u_xlat67 = (x_2068 / x_2069);
  let x_2071 : f32 = u_xlat67;
  u_xlat67 = (x_2071 + 0.5f);
  let x_2073 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2073, 0.0f, 1.0f);
  let x_2076 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2076 == 0.0f));
  let x_2078 : bool = u_xlatb25;
  if (x_2078) {
    let x_2082 : f32 = u_xlat67;
    x_2079 = x_2082;
  } else {
    let x_2085 : f32 = u_xlat47.x;
    x_2079 = x_2085;
  }
  let x_2086 : f32 = x_2079;
  u_xlat67 = x_2086;
  let x_2087 : f32 = u_xlat67;
  u_xlat47.x = (x_2087 + -0.0001f);
  let x_2092 : f32 = u_xlat47.x;
  u_xlatb47 = (x_2092 < 0.0f);
  let x_2094 : bool = u_xlatb47;
  if (((select(0i, 1i, x_2094) * -1i) != 0i)) {
    discard;
  }
  let x_2102 : vec3<f32> = u_xlat22;
  let x_2103 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2102 * vec3<f32>(x_2103.y, x_2103.y, x_2103.y));
  let x_2106 : vec3<f32> = u_xlat30;
  let x_2108 : vec4<f32> = vs_INTERP2;
  let x_2111 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2106.x, x_2106.x, x_2106.x) * vec3<f32>(x_2108.x, x_2108.y, x_2108.z)) + x_2111);
  let x_2113 : vec3<f32> = u_xlat30;
  let x_2115 : vec3<f32> = vs_INTERP1;
  let x_2117 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2113.z, x_2113.z, x_2113.z) * x_2115) + x_2117);
  let x_2119 : vec3<f32> = u_xlat22;
  let x_2120 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2119, x_2120);
  let x_2124 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2124);
  let x_2127 : vec3<f32> = u_xlat22;
  let x_2128 : vec2<f32> = u_xlat47;
  u_xlat22 = (x_2127 * vec3<f32>(x_2128.x, x_2128.x, x_2128.x));
  let x_2138 : vec2<f32> = vs_INTERP5;
  let x_2140 : f32 = x_160.x_GlobalMipBias.x;
  let x_2141 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2138, x_2140);
  u_xlat4 = x_2141;
  let x_2146 : vec2<f32> = vs_INTERP5;
  let x_2148 : f32 = x_160.x_GlobalMipBias.x;
  let x_2149 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2146, x_2148);
  let x_2150 : vec3<f32> = vec3<f32>(x_2149.x, x_2149.y, x_2149.z);
  let x_2151 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2150.x, x_2150.y, x_2150.z, x_2151.w);
  let x_2153 : vec4<f32> = u_xlat4;
  let x_2156 : vec3<f32> = (vec3<f32>(x_2153.x, x_2153.y, x_2153.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2157 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2156.x, x_2156.y, x_2156.z, x_2157.w);
  let x_2159 : vec3<f32> = u_xlat22;
  let x_2160 : vec4<f32> = u_xlat4;
  u_xlat47.x = dot(x_2159, vec3<f32>(x_2160.x, x_2160.y, x_2160.z));
  let x_2165 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2165 + 0.5f);
  let x_2168 : vec2<f32> = u_xlat47;
  let x_2170 : vec4<f32> = u_xlat6;
  let x_2172 : vec3<f32> = (vec3<f32>(x_2168.x, x_2168.x, x_2168.x) * vec3<f32>(x_2170.x, x_2170.y, x_2170.z));
  let x_2173 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2172.x, x_2172.y, x_2172.z, x_2173.w);
  let x_2176 : f32 = u_xlat4.w;
  u_xlat47.x = max(x_2176, 0.0001f);
  let x_2179 : vec4<f32> = u_xlat4;
  let x_2181 : vec2<f32> = u_xlat47;
  let x_2183 : vec3<f32> = (vec3<f32>(x_2179.x, x_2179.y, x_2179.z) / vec3<f32>(x_2181.x, x_2181.x, x_2181.x));
  let x_2184 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2183.x, x_2183.y, x_2183.z, x_2184.w);
  let x_2187 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2188 : vec2<f32> = vec2<f32>(x_2187.x, x_2187.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2188.x, x_2188.y));
  let x_2193 : vec2<f32> = u_xlat47;
  let x_2194 : vec4<f32> = hlslcc_FragCoord;
  let x_2196 : vec2<f32> = (x_2193 * vec2<f32>(x_2194.x, x_2194.y));
  let x_2197 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2196.x, x_2196.y, x_2197.z, x_2197.w);
  let x_2200 : f32 = u_xlat6.y;
  let x_2203 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2206 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2200 * x_2203) + x_2206);
  let x_2210 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2210) + 1.0f);
  let x_2215 : f32 = u_xlat8.x;
  u_xlat8.x = x_2215;
  let x_2218 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2218, 0.0f, 1.0f);
  let x_2221 : f32 = u_xlat67;
  u_xlat67 = x_2221;
  let x_2222 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2222, 0.0f, 1.0f);
  let x_2224 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2224 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2229 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2229) + 1.0f);
  let x_2234 : f32 = u_xlat47.x;
  let x_2236 : f32 = u_xlat47.x;
  u_xlat69 = (x_2234 * x_2236);
  let x_2238 : f32 = u_xlat69;
  u_xlat69 = max(x_2238, 0.0078125f);
  let x_2241 : f32 = u_xlat69;
  let x_2242 : f32 = u_xlat69;
  u_xlat70 = (x_2241 * x_2242);
  let x_2246 : f32 = u_xlat8.x;
  u_xlat71 = (x_2246 + 0.040000021f);
  let x_2249 : f32 = u_xlat71;
  u_xlat71 = min(x_2249, 1.0f);
  let x_2252 : f32 = u_xlat69;
  u_xlat28 = ((x_2252 * 4.0f) + 2.0f);
  let x_2260 : vec4<f32> = u_xlat6;
  let x_2263 : f32 = x_160.x_GlobalMipBias.x;
  let x_2264 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2260.x, x_2260.z), x_2263);
  u_xlat6.x = x_2264.x;
  let x_2269 : f32 = u_xlat6.x;
  u_xlat50 = (x_2269 + -1.0f);
  let x_2272 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2273 : f32 = u_xlat50;
  u_xlat50 = ((x_2272 * x_2273) + 1.0f);
  let x_2277 : f32 = u_xlat6.x;
  let x_2279 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2277, x_2279);
  let x_2282 : bool = u_xlatb0;
  if (x_2282) {
    let x_2286 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2286 == 1.0f);
    let x_2288 : bool = u_xlatb0;
    if (x_2288) {
      let x_2291 : vec4<f32> = u_xlat2;
      let x_2294 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2291.x, x_2291.y, x_2291.x, x_2291.y) + x_2294);
      let x_2297 : vec4<f32> = u_xlat8;
      let x_2298 : vec2<f32> = vec2<f32>(x_2297.x, x_2297.y);
      let x_2300 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2298.x, x_2298.y, x_2300);
      let x_2307 : vec3<f32> = txVec30;
      let x_2309 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2307.xy, x_2307.z);
      u_xlat9.x = x_2309;
      let x_2312 : vec4<f32> = u_xlat8;
      let x_2313 : vec2<f32> = vec2<f32>(x_2312.z, x_2312.w);
      let x_2315 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2313.x, x_2313.y, x_2315);
      let x_2322 : vec3<f32> = txVec31;
      let x_2324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2322.xy, x_2322.z);
      u_xlat9.y = x_2324;
      let x_2326 : vec4<f32> = u_xlat2;
      let x_2329 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2326.x, x_2326.y, x_2326.x, x_2326.y) + x_2329);
      let x_2332 : vec4<f32> = u_xlat8;
      let x_2333 : vec2<f32> = vec2<f32>(x_2332.x, x_2332.y);
      let x_2335 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2333.x, x_2333.y, x_2335);
      let x_2342 : vec3<f32> = txVec32;
      let x_2344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2342.xy, x_2342.z);
      u_xlat9.z = x_2344;
      let x_2347 : vec4<f32> = u_xlat8;
      let x_2348 : vec2<f32> = vec2<f32>(x_2347.z, x_2347.w);
      let x_2350 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2348.x, x_2348.y, x_2350);
      let x_2357 : vec3<f32> = txVec33;
      let x_2359 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2357.xy, x_2357.z);
      u_xlat9.w = x_2359;
      let x_2361 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2361, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2367 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2367 == 2.0f);
      let x_2369 : bool = u_xlatb72;
      if (x_2369) {
        let x_2372 : vec4<f32> = u_xlat2;
        let x_2375 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2378 : vec2<f32> = ((vec2<f32>(x_2372.x, x_2372.y) * vec2<f32>(x_2375.z, x_2375.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2379 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2378.x, x_2378.y, x_2379.z, x_2379.w);
        let x_2381 : vec4<f32> = u_xlat8;
        let x_2383 : vec2<f32> = floor(vec2<f32>(x_2381.x, x_2381.y));
        let x_2384 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2383.x, x_2383.y, x_2384.z, x_2384.w);
        let x_2387 : vec4<f32> = u_xlat2;
        let x_2390 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2393 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2387.x, x_2387.y) * vec2<f32>(x_2390.z, x_2390.w)) + -(vec2<f32>(x_2393.x, x_2393.y)));
        let x_2397 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2397.x, x_2397.x, x_2397.y, x_2397.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2400 : vec4<f32> = u_xlat9;
        let x_2402 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2400.x, x_2400.x, x_2400.z, x_2400.z) * vec4<f32>(x_2402.x, x_2402.x, x_2402.z, x_2402.z));
        let x_2405 : vec4<f32> = u_xlat10;
        let x_2407 : vec2<f32> = (vec2<f32>(x_2405.y, x_2405.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2408 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2407.x, x_2408.y, x_2407.y, x_2408.w);
        let x_2410 : vec4<f32> = u_xlat10;
        let x_2413 : vec2<f32> = u_xlat52;
        let x_2415 : vec2<f32> = ((vec2<f32>(x_2410.x, x_2410.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2413));
        let x_2416 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2415.x, x_2415.y, x_2416.z, x_2416.w);
        let x_2418 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2418) + vec2<f32>(1.0f, 1.0f));
        let x_2421 : vec2<f32> = u_xlat52;
        let x_2422 : vec2<f32> = min(x_2421, vec2<f32>(0.0f, 0.0f));
        let x_2423 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2422.x, x_2422.y, x_2423.z, x_2423.w);
        let x_2425 : vec4<f32> = u_xlat11;
        let x_2428 : vec4<f32> = u_xlat11;
        let x_2431 : vec2<f32> = u_xlat54;
        let x_2432 : vec2<f32> = ((-(vec2<f32>(x_2425.x, x_2425.y)) * vec2<f32>(x_2428.x, x_2428.y)) + x_2431);
        let x_2433 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2432.x, x_2432.y, x_2433.z, x_2433.w);
        let x_2435 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2435, vec2<f32>(0.0f, 0.0f));
        let x_2437 : vec2<f32> = u_xlat52;
        let x_2439 : vec2<f32> = u_xlat52;
        let x_2441 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2437) * x_2439) + vec2<f32>(x_2441.y, x_2441.w));
        let x_2444 : vec4<f32> = u_xlat11;
        let x_2446 : vec2<f32> = (vec2<f32>(x_2444.x, x_2444.y) + vec2<f32>(1.0f, 1.0f));
        let x_2447 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2446.x, x_2446.y, x_2447.z, x_2447.w);
        let x_2449 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2449 + vec2<f32>(1.0f, 1.0f));
        let x_2451 : vec4<f32> = u_xlat10;
        let x_2453 : vec2<f32> = (vec2<f32>(x_2451.x, x_2451.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2454 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2453.x, x_2453.y, x_2454.z, x_2454.w);
        let x_2456 : vec2<f32> = u_xlat54;
        let x_2457 : vec2<f32> = (x_2456 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2458 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2457.x, x_2457.y, x_2458.z, x_2458.w);
        let x_2460 : vec4<f32> = u_xlat11;
        let x_2462 : vec2<f32> = (vec2<f32>(x_2460.x, x_2460.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2463 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2462.x, x_2462.y, x_2463.z, x_2463.w);
        let x_2465 : vec2<f32> = u_xlat52;
        let x_2466 : vec2<f32> = (x_2465 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2467 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2466.x, x_2466.y, x_2467.z, x_2467.w);
        let x_2469 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2469.y, x_2469.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2473 : f32 = u_xlat11.x;
        u_xlat12.z = x_2473;
        let x_2476 : f32 = u_xlat52.x;
        u_xlat12.w = x_2476;
        let x_2479 : f32 = u_xlat13.x;
        u_xlat10.z = x_2479;
        let x_2482 : f32 = u_xlat9.x;
        u_xlat10.w = x_2482;
        let x_2484 : vec4<f32> = u_xlat10;
        let x_2486 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2484.z, x_2484.w, x_2484.x, x_2484.z) + vec4<f32>(x_2486.z, x_2486.w, x_2486.x, x_2486.z));
        let x_2490 : f32 = u_xlat12.y;
        u_xlat11.z = x_2490;
        let x_2493 : f32 = u_xlat52.y;
        u_xlat11.w = x_2493;
        let x_2496 : f32 = u_xlat10.y;
        u_xlat13.z = x_2496;
        let x_2499 : f32 = u_xlat9.z;
        u_xlat13.w = x_2499;
        let x_2501 : vec4<f32> = u_xlat11;
        let x_2503 : vec4<f32> = u_xlat13;
        let x_2505 : vec3<f32> = (vec3<f32>(x_2501.z, x_2501.y, x_2501.w) + vec3<f32>(x_2503.z, x_2503.y, x_2503.w));
        let x_2506 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2505.x, x_2505.y, x_2505.z, x_2506.w);
        let x_2508 : vec4<f32> = u_xlat10;
        let x_2510 : vec4<f32> = u_xlat14;
        let x_2512 : vec3<f32> = (vec3<f32>(x_2508.x, x_2508.z, x_2508.w) / vec3<f32>(x_2510.z, x_2510.w, x_2510.y));
        let x_2513 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2512.x, x_2512.y, x_2512.z, x_2513.w);
        let x_2515 : vec4<f32> = u_xlat10;
        let x_2517 : vec3<f32> = (vec3<f32>(x_2515.x, x_2515.y, x_2515.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2518 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2517.x, x_2517.y, x_2517.z, x_2518.w);
        let x_2520 : vec4<f32> = u_xlat13;
        let x_2522 : vec4<f32> = u_xlat9;
        let x_2524 : vec3<f32> = (vec3<f32>(x_2520.z, x_2520.y, x_2520.w) / vec3<f32>(x_2522.x, x_2522.y, x_2522.z));
        let x_2525 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2524.x, x_2524.y, x_2524.z, x_2525.w);
        let x_2527 : vec4<f32> = u_xlat11;
        let x_2529 : vec3<f32> = (vec3<f32>(x_2527.x, x_2527.y, x_2527.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2530 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2529.x, x_2529.y, x_2529.z, x_2530.w);
        let x_2532 : vec4<f32> = u_xlat10;
        let x_2535 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2537 : vec3<f32> = (vec3<f32>(x_2532.y, x_2532.x, x_2532.z) * vec3<f32>(x_2535.x, x_2535.x, x_2535.x));
        let x_2538 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2537.x, x_2537.y, x_2537.z, x_2538.w);
        let x_2540 : vec4<f32> = u_xlat11;
        let x_2543 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2545 : vec3<f32> = (vec3<f32>(x_2540.x, x_2540.y, x_2540.z) * vec3<f32>(x_2543.y, x_2543.y, x_2543.y));
        let x_2546 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2545.x, x_2545.y, x_2545.z, x_2546.w);
        let x_2549 : f32 = u_xlat11.x;
        u_xlat10.w = x_2549;
        let x_2551 : vec4<f32> = u_xlat8;
        let x_2554 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2557 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2551.x, x_2551.y, x_2551.x, x_2551.y) * vec4<f32>(x_2554.x, x_2554.y, x_2554.x, x_2554.y)) + vec4<f32>(x_2557.y, x_2557.w, x_2557.x, x_2557.w));
        let x_2560 : vec4<f32> = u_xlat8;
        let x_2563 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2566 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2560.x, x_2560.y) * vec2<f32>(x_2563.x, x_2563.y)) + vec2<f32>(x_2566.z, x_2566.w));
        let x_2570 : f32 = u_xlat10.y;
        u_xlat11.w = x_2570;
        let x_2572 : vec4<f32> = u_xlat11;
        let x_2573 : vec2<f32> = vec2<f32>(x_2572.y, x_2572.z);
        let x_2574 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2574.x, x_2573.x, x_2574.z, x_2573.y);
        let x_2576 : vec4<f32> = u_xlat8;
        let x_2579 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2582 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2576.x, x_2576.y, x_2576.x, x_2576.y) * vec4<f32>(x_2579.x, x_2579.y, x_2579.x, x_2579.y)) + vec4<f32>(x_2582.x, x_2582.y, x_2582.z, x_2582.y));
        let x_2585 : vec4<f32> = u_xlat8;
        let x_2588 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2591 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2585.x, x_2585.y, x_2585.x, x_2585.y) * vec4<f32>(x_2588.x, x_2588.y, x_2588.x, x_2588.y)) + vec4<f32>(x_2591.w, x_2591.y, x_2591.w, x_2591.z));
        let x_2594 : vec4<f32> = u_xlat8;
        let x_2597 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2600 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2594.x, x_2594.y, x_2594.x, x_2594.y) * vec4<f32>(x_2597.x, x_2597.y, x_2597.x, x_2597.y)) + vec4<f32>(x_2600.x, x_2600.w, x_2600.z, x_2600.w));
        let x_2603 : vec4<f32> = u_xlat9;
        let x_2605 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2603.x, x_2603.x, x_2603.x, x_2603.y) * vec4<f32>(x_2605.z, x_2605.w, x_2605.y, x_2605.z));
        let x_2608 : vec4<f32> = u_xlat9;
        let x_2610 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2608.y, x_2608.y, x_2608.z, x_2608.z) * x_2610);
        let x_2614 : f32 = u_xlat9.z;
        let x_2616 : f32 = u_xlat14.y;
        u_xlat72 = (x_2614 * x_2616);
        let x_2619 : vec4<f32> = u_xlat12;
        let x_2620 : vec2<f32> = vec2<f32>(x_2619.x, x_2619.y);
        let x_2622 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2620.x, x_2620.y, x_2622);
        let x_2630 : vec3<f32> = txVec34;
        let x_2632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2630.xy, x_2630.z);
        u_xlat73 = x_2632;
        let x_2634 : vec4<f32> = u_xlat12;
        let x_2635 : vec2<f32> = vec2<f32>(x_2634.z, x_2634.w);
        let x_2637 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2635.x, x_2635.y, x_2637);
        let x_2644 : vec3<f32> = txVec35;
        let x_2646 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2644.xy, x_2644.z);
        u_xlat8.x = x_2646;
        let x_2649 : f32 = u_xlat8.x;
        let x_2651 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2649 * x_2651);
        let x_2655 : f32 = u_xlat15.x;
        let x_2656 : f32 = u_xlat73;
        let x_2659 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2655 * x_2656) + x_2659);
        let x_2662 : vec2<f32> = u_xlat52;
        let x_2664 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2662.x, x_2662.y, x_2664);
        let x_2671 : vec3<f32> = txVec36;
        let x_2673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2671.xy, x_2671.z);
        u_xlat8.x = x_2673;
        let x_2676 : f32 = u_xlat15.z;
        let x_2678 : f32 = u_xlat8.x;
        let x_2680 : f32 = u_xlat73;
        u_xlat73 = ((x_2676 * x_2678) + x_2680);
        let x_2683 : vec4<f32> = u_xlat11;
        let x_2684 : vec2<f32> = vec2<f32>(x_2683.x, x_2683.y);
        let x_2686 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2684.x, x_2684.y, x_2686);
        let x_2693 : vec3<f32> = txVec37;
        let x_2695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2693.xy, x_2693.z);
        u_xlat8.x = x_2695;
        let x_2698 : f32 = u_xlat15.w;
        let x_2700 : f32 = u_xlat8.x;
        let x_2702 : f32 = u_xlat73;
        u_xlat73 = ((x_2698 * x_2700) + x_2702);
        let x_2705 : vec4<f32> = u_xlat13;
        let x_2706 : vec2<f32> = vec2<f32>(x_2705.x, x_2705.y);
        let x_2708 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2706.x, x_2706.y, x_2708);
        let x_2715 : vec3<f32> = txVec38;
        let x_2717 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2715.xy, x_2715.z);
        u_xlat8.x = x_2717;
        let x_2720 : f32 = u_xlat16.x;
        let x_2722 : f32 = u_xlat8.x;
        let x_2724 : f32 = u_xlat73;
        u_xlat73 = ((x_2720 * x_2722) + x_2724);
        let x_2727 : vec4<f32> = u_xlat13;
        let x_2728 : vec2<f32> = vec2<f32>(x_2727.z, x_2727.w);
        let x_2730 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2728.x, x_2728.y, x_2730);
        let x_2737 : vec3<f32> = txVec39;
        let x_2739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2737.xy, x_2737.z);
        u_xlat8.x = x_2739;
        let x_2742 : f32 = u_xlat16.y;
        let x_2744 : f32 = u_xlat8.x;
        let x_2746 : f32 = u_xlat73;
        u_xlat73 = ((x_2742 * x_2744) + x_2746);
        let x_2749 : vec4<f32> = u_xlat11;
        let x_2750 : vec2<f32> = vec2<f32>(x_2749.z, x_2749.w);
        let x_2752 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2750.x, x_2750.y, x_2752);
        let x_2759 : vec3<f32> = txVec40;
        let x_2761 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2759.xy, x_2759.z);
        u_xlat8.x = x_2761;
        let x_2764 : f32 = u_xlat16.z;
        let x_2766 : f32 = u_xlat8.x;
        let x_2768 : f32 = u_xlat73;
        u_xlat73 = ((x_2764 * x_2766) + x_2768);
        let x_2771 : vec4<f32> = u_xlat10;
        let x_2772 : vec2<f32> = vec2<f32>(x_2771.x, x_2771.y);
        let x_2774 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2772.x, x_2772.y, x_2774);
        let x_2781 : vec3<f32> = txVec41;
        let x_2783 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2781.xy, x_2781.z);
        u_xlat8.x = x_2783;
        let x_2786 : f32 = u_xlat16.w;
        let x_2788 : f32 = u_xlat8.x;
        let x_2790 : f32 = u_xlat73;
        u_xlat73 = ((x_2786 * x_2788) + x_2790);
        let x_2793 : vec4<f32> = u_xlat10;
        let x_2794 : vec2<f32> = vec2<f32>(x_2793.z, x_2793.w);
        let x_2796 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2794.x, x_2794.y, x_2796);
        let x_2803 : vec3<f32> = txVec42;
        let x_2805 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2803.xy, x_2803.z);
        u_xlat8.x = x_2805;
        let x_2807 : f32 = u_xlat72;
        let x_2809 : f32 = u_xlat8.x;
        let x_2811 : f32 = u_xlat73;
        u_xlat0.x = ((x_2807 * x_2809) + x_2811);
      } else {
        let x_2815 : vec4<f32> = u_xlat2;
        let x_2818 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2821 : vec2<f32> = ((vec2<f32>(x_2815.x, x_2815.y) * vec2<f32>(x_2818.z, x_2818.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2822 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2821.x, x_2821.y, x_2822.z, x_2822.w);
        let x_2824 : vec4<f32> = u_xlat8;
        let x_2826 : vec2<f32> = floor(vec2<f32>(x_2824.x, x_2824.y));
        let x_2827 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2826.x, x_2826.y, x_2827.z, x_2827.w);
        let x_2829 : vec4<f32> = u_xlat2;
        let x_2832 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2835 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2829.x, x_2829.y) * vec2<f32>(x_2832.z, x_2832.w)) + -(vec2<f32>(x_2835.x, x_2835.y)));
        let x_2839 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2839.x, x_2839.x, x_2839.y, x_2839.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2842 : vec4<f32> = u_xlat9;
        let x_2844 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2842.x, x_2842.x, x_2842.z, x_2842.z) * vec4<f32>(x_2844.x, x_2844.x, x_2844.z, x_2844.z));
        let x_2847 : vec4<f32> = u_xlat10;
        let x_2849 : vec2<f32> = (vec2<f32>(x_2847.y, x_2847.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2850 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2850.x, x_2849.x, x_2850.z, x_2849.y);
        let x_2852 : vec4<f32> = u_xlat10;
        let x_2855 : vec2<f32> = u_xlat52;
        let x_2857 : vec2<f32> = ((vec2<f32>(x_2852.x, x_2852.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2855));
        let x_2858 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2857.x, x_2858.y, x_2857.y, x_2858.w);
        let x_2860 : vec2<f32> = u_xlat52;
        let x_2862 : vec2<f32> = (-(x_2860) + vec2<f32>(1.0f, 1.0f));
        let x_2863 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2862.x, x_2862.y, x_2863.z, x_2863.w);
        let x_2865 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2865, vec2<f32>(0.0f, 0.0f));
        let x_2867 : vec2<f32> = u_xlat54;
        let x_2869 : vec2<f32> = u_xlat54;
        let x_2871 : vec4<f32> = u_xlat10;
        let x_2873 : vec2<f32> = ((-(x_2867) * x_2869) + vec2<f32>(x_2871.x, x_2871.y));
        let x_2874 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2873.x, x_2873.y, x_2874.z, x_2874.w);
        let x_2876 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2876, vec2<f32>(0.0f, 0.0f));
        let x_2878 : vec2<f32> = u_xlat54;
        let x_2880 : vec2<f32> = u_xlat54;
        let x_2882 : vec4<f32> = u_xlat9;
        let x_2884 : vec2<f32> = ((-(x_2878) * x_2880) + vec2<f32>(x_2882.y, x_2882.w));
        let x_2885 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2884.x, x_2885.y, x_2884.y);
        let x_2887 : vec4<f32> = u_xlat10;
        let x_2889 : vec2<f32> = (vec2<f32>(x_2887.x, x_2887.y) + vec2<f32>(2.0f, 2.0f));
        let x_2890 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2889.x, x_2889.y, x_2890.z, x_2890.w);
        let x_2892 : vec3<f32> = u_xlat31;
        let x_2894 : vec2<f32> = (vec2<f32>(x_2892.x, x_2892.z) + vec2<f32>(2.0f, 2.0f));
        let x_2895 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2895.x, x_2894.x, x_2895.z, x_2894.y);
        let x_2898 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2898 * 0.081632003f);
        let x_2901 : vec4<f32> = u_xlat9;
        let x_2903 : vec3<f32> = (vec3<f32>(x_2901.z, x_2901.x, x_2901.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2904 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2903.x, x_2903.y, x_2903.z, x_2904.w);
        let x_2906 : vec4<f32> = u_xlat10;
        let x_2908 : vec2<f32> = (vec2<f32>(x_2906.x, x_2906.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2909 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2908.x, x_2908.y, x_2909.z, x_2909.w);
        let x_2912 : f32 = u_xlat13.y;
        u_xlat12.x = x_2912;
        let x_2914 : vec2<f32> = u_xlat52;
        let x_2917 : vec2<f32> = ((vec2<f32>(x_2914.x, x_2914.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2918 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2918.x, x_2917.x, x_2918.z, x_2917.y);
        let x_2920 : vec2<f32> = u_xlat52;
        let x_2923 : vec2<f32> = ((vec2<f32>(x_2920.x, x_2920.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2924 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2923.x, x_2924.y, x_2923.y, x_2924.w);
        let x_2927 : f32 = u_xlat9.x;
        u_xlat10.y = x_2927;
        let x_2930 : f32 = u_xlat11.y;
        u_xlat10.w = x_2930;
        let x_2932 : vec4<f32> = u_xlat10;
        let x_2933 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2932 + x_2933);
        let x_2935 : vec2<f32> = u_xlat52;
        let x_2938 : vec2<f32> = ((vec2<f32>(x_2935.y, x_2935.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2939 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2939.x, x_2938.x, x_2939.z, x_2938.y);
        let x_2941 : vec2<f32> = u_xlat52;
        let x_2944 : vec2<f32> = ((vec2<f32>(x_2941.y, x_2941.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2945 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2944.x, x_2945.y, x_2944.y, x_2945.w);
        let x_2948 : f32 = u_xlat9.y;
        u_xlat11.y = x_2948;
        let x_2950 : vec4<f32> = u_xlat11;
        let x_2951 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2950 + x_2951);
        let x_2953 : vec4<f32> = u_xlat10;
        let x_2954 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2953 / x_2954);
        let x_2956 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2956 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2958 : vec4<f32> = u_xlat11;
        let x_2959 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2958 / x_2959);
        let x_2961 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2961 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2963 : vec4<f32> = u_xlat10;
        let x_2966 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2963.w, x_2963.x, x_2963.y, x_2963.z) * vec4<f32>(x_2966.x, x_2966.x, x_2966.x, x_2966.x));
        let x_2969 : vec4<f32> = u_xlat11;
        let x_2972 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2969.x, x_2969.w, x_2969.y, x_2969.z) * vec4<f32>(x_2972.y, x_2972.y, x_2972.y, x_2972.y));
        let x_2975 : vec4<f32> = u_xlat10;
        let x_2976 : vec3<f32> = vec3<f32>(x_2975.y, x_2975.z, x_2975.w);
        let x_2977 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2976.x, x_2977.y, x_2976.y, x_2976.z);
        let x_2980 : f32 = u_xlat11.x;
        u_xlat13.y = x_2980;
        let x_2982 : vec4<f32> = u_xlat8;
        let x_2985 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2988 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2982.x, x_2982.y, x_2982.x, x_2982.y) * vec4<f32>(x_2985.x, x_2985.y, x_2985.x, x_2985.y)) + vec4<f32>(x_2988.x, x_2988.y, x_2988.z, x_2988.y));
        let x_2991 : vec4<f32> = u_xlat8;
        let x_2994 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2997 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2991.x, x_2991.y) * vec2<f32>(x_2994.x, x_2994.y)) + vec2<f32>(x_2997.w, x_2997.y));
        let x_3001 : f32 = u_xlat13.y;
        u_xlat10.y = x_3001;
        let x_3004 : f32 = u_xlat11.z;
        u_xlat13.y = x_3004;
        let x_3006 : vec4<f32> = u_xlat8;
        let x_3009 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3012 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3006.x, x_3006.y, x_3006.x, x_3006.y) * vec4<f32>(x_3009.x, x_3009.y, x_3009.x, x_3009.y)) + vec4<f32>(x_3012.x, x_3012.y, x_3012.z, x_3012.y));
        let x_3015 : vec4<f32> = u_xlat8;
        let x_3018 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3021 : vec4<f32> = u_xlat13;
        let x_3023 : vec2<f32> = ((vec2<f32>(x_3015.x, x_3015.y) * vec2<f32>(x_3018.x, x_3018.y)) + vec2<f32>(x_3021.w, x_3021.y));
        let x_3024 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3023.x, x_3023.y, x_3024.z, x_3024.w);
        let x_3027 : f32 = u_xlat13.y;
        u_xlat10.z = x_3027;
        let x_3029 : vec4<f32> = u_xlat8;
        let x_3032 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3035 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3029.x, x_3029.y, x_3029.x, x_3029.y) * vec4<f32>(x_3032.x, x_3032.y, x_3032.x, x_3032.y)) + vec4<f32>(x_3035.x, x_3035.y, x_3035.x, x_3035.z));
        let x_3039 : f32 = u_xlat11.w;
        u_xlat13.y = x_3039;
        let x_3041 : vec4<f32> = u_xlat8;
        let x_3044 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3047 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3041.x, x_3041.y, x_3041.x, x_3041.y) * vec4<f32>(x_3044.x, x_3044.y, x_3044.x, x_3044.y)) + vec4<f32>(x_3047.x, x_3047.y, x_3047.z, x_3047.y));
        let x_3050 : vec4<f32> = u_xlat8;
        let x_3053 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3056 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3050.x, x_3050.y) * vec2<f32>(x_3053.x, x_3053.y)) + vec2<f32>(x_3056.w, x_3056.y));
        let x_3060 : f32 = u_xlat13.y;
        u_xlat10.w = x_3060;
        let x_3062 : vec4<f32> = u_xlat8;
        let x_3065 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3068 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3062.x, x_3062.y) * vec2<f32>(x_3065.x, x_3065.y)) + vec2<f32>(x_3068.x, x_3068.w));
        let x_3071 : vec4<f32> = u_xlat13;
        let x_3072 : vec3<f32> = vec3<f32>(x_3071.x, x_3071.z, x_3071.w);
        let x_3073 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3072.x, x_3073.y, x_3072.y, x_3072.z);
        let x_3075 : vec4<f32> = u_xlat8;
        let x_3078 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3081 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3075.x, x_3075.y, x_3075.x, x_3075.y) * vec4<f32>(x_3078.x, x_3078.y, x_3078.x, x_3078.y)) + vec4<f32>(x_3081.x, x_3081.y, x_3081.z, x_3081.y));
        let x_3084 : vec4<f32> = u_xlat8;
        let x_3087 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3090 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3084.x, x_3084.y) * vec2<f32>(x_3087.x, x_3087.y)) + vec2<f32>(x_3090.w, x_3090.y));
        let x_3094 : f32 = u_xlat10.x;
        u_xlat11.x = x_3094;
        let x_3096 : vec4<f32> = u_xlat8;
        let x_3099 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3102 : vec4<f32> = u_xlat11;
        let x_3104 : vec2<f32> = ((vec2<f32>(x_3096.x, x_3096.y) * vec2<f32>(x_3099.x, x_3099.y)) + vec2<f32>(x_3102.x, x_3102.y));
        let x_3105 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3104.x, x_3104.y, x_3105.z, x_3105.w);
        let x_3107 : vec4<f32> = u_xlat9;
        let x_3109 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3107.x, x_3107.x, x_3107.x, x_3107.x) * x_3109);
        let x_3111 : vec4<f32> = u_xlat9;
        let x_3113 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3111.y, x_3111.y, x_3111.y, x_3111.y) * x_3113);
        let x_3115 : vec4<f32> = u_xlat9;
        let x_3117 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3115.z, x_3115.z, x_3115.z, x_3115.z) * x_3117);
        let x_3119 : vec4<f32> = u_xlat9;
        let x_3121 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3119.w, x_3119.w, x_3119.w, x_3119.w) * x_3121);
        let x_3124 : vec4<f32> = u_xlat14;
        let x_3125 : vec2<f32> = vec2<f32>(x_3124.x, x_3124.y);
        let x_3127 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3125.x, x_3125.y, x_3127);
        let x_3134 : vec3<f32> = txVec43;
        let x_3136 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3134.xy, x_3134.z);
        u_xlat72 = x_3136;
        let x_3138 : vec4<f32> = u_xlat14;
        let x_3139 : vec2<f32> = vec2<f32>(x_3138.z, x_3138.w);
        let x_3141 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3139.x, x_3139.y, x_3141);
        let x_3148 : vec3<f32> = txVec44;
        let x_3150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3148.xy, x_3148.z);
        u_xlat73 = x_3150;
        let x_3151 : f32 = u_xlat73;
        let x_3153 : f32 = u_xlat19.y;
        u_xlat73 = (x_3151 * x_3153);
        let x_3156 : f32 = u_xlat19.x;
        let x_3157 : f32 = u_xlat72;
        let x_3159 : f32 = u_xlat73;
        u_xlat72 = ((x_3156 * x_3157) + x_3159);
        let x_3162 : vec2<f32> = u_xlat52;
        let x_3164 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3162.x, x_3162.y, x_3164);
        let x_3171 : vec3<f32> = txVec45;
        let x_3173 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3171.xy, x_3171.z);
        u_xlat73 = x_3173;
        let x_3175 : f32 = u_xlat19.z;
        let x_3176 : f32 = u_xlat73;
        let x_3178 : f32 = u_xlat72;
        u_xlat72 = ((x_3175 * x_3176) + x_3178);
        let x_3181 : vec4<f32> = u_xlat17;
        let x_3182 : vec2<f32> = vec2<f32>(x_3181.x, x_3181.y);
        let x_3184 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3182.x, x_3182.y, x_3184);
        let x_3191 : vec3<f32> = txVec46;
        let x_3193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3191.xy, x_3191.z);
        u_xlat73 = x_3193;
        let x_3195 : f32 = u_xlat19.w;
        let x_3196 : f32 = u_xlat73;
        let x_3198 : f32 = u_xlat72;
        u_xlat72 = ((x_3195 * x_3196) + x_3198);
        let x_3201 : vec4<f32> = u_xlat15;
        let x_3202 : vec2<f32> = vec2<f32>(x_3201.x, x_3201.y);
        let x_3204 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3202.x, x_3202.y, x_3204);
        let x_3211 : vec3<f32> = txVec47;
        let x_3213 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3211.xy, x_3211.z);
        u_xlat73 = x_3213;
        let x_3215 : f32 = u_xlat20.x;
        let x_3216 : f32 = u_xlat73;
        let x_3218 : f32 = u_xlat72;
        u_xlat72 = ((x_3215 * x_3216) + x_3218);
        let x_3221 : vec4<f32> = u_xlat15;
        let x_3222 : vec2<f32> = vec2<f32>(x_3221.z, x_3221.w);
        let x_3224 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3222.x, x_3222.y, x_3224);
        let x_3231 : vec3<f32> = txVec48;
        let x_3233 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3231.xy, x_3231.z);
        u_xlat73 = x_3233;
        let x_3235 : f32 = u_xlat20.y;
        let x_3236 : f32 = u_xlat73;
        let x_3238 : f32 = u_xlat72;
        u_xlat72 = ((x_3235 * x_3236) + x_3238);
        let x_3241 : vec4<f32> = u_xlat16;
        let x_3242 : vec2<f32> = vec2<f32>(x_3241.x, x_3241.y);
        let x_3244 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3242.x, x_3242.y, x_3244);
        let x_3251 : vec3<f32> = txVec49;
        let x_3253 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3251.xy, x_3251.z);
        u_xlat73 = x_3253;
        let x_3255 : f32 = u_xlat20.z;
        let x_3256 : f32 = u_xlat73;
        let x_3258 : f32 = u_xlat72;
        u_xlat72 = ((x_3255 * x_3256) + x_3258);
        let x_3261 : vec4<f32> = u_xlat17;
        let x_3262 : vec2<f32> = vec2<f32>(x_3261.z, x_3261.w);
        let x_3264 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3262.x, x_3262.y, x_3264);
        let x_3271 : vec3<f32> = txVec50;
        let x_3273 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3271.xy, x_3271.z);
        u_xlat73 = x_3273;
        let x_3275 : f32 = u_xlat20.w;
        let x_3276 : f32 = u_xlat73;
        let x_3278 : f32 = u_xlat72;
        u_xlat72 = ((x_3275 * x_3276) + x_3278);
        let x_3281 : vec4<f32> = u_xlat18;
        let x_3282 : vec2<f32> = vec2<f32>(x_3281.x, x_3281.y);
        let x_3284 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3282.x, x_3282.y, x_3284);
        let x_3291 : vec3<f32> = txVec51;
        let x_3293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3291.xy, x_3291.z);
        u_xlat73 = x_3293;
        let x_3295 : f32 = u_xlat21.x;
        let x_3296 : f32 = u_xlat73;
        let x_3298 : f32 = u_xlat72;
        u_xlat72 = ((x_3295 * x_3296) + x_3298);
        let x_3301 : vec4<f32> = u_xlat18;
        let x_3302 : vec2<f32> = vec2<f32>(x_3301.z, x_3301.w);
        let x_3304 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3302.x, x_3302.y, x_3304);
        let x_3311 : vec3<f32> = txVec52;
        let x_3313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3311.xy, x_3311.z);
        u_xlat73 = x_3313;
        let x_3315 : f32 = u_xlat21.y;
        let x_3316 : f32 = u_xlat73;
        let x_3318 : f32 = u_xlat72;
        u_xlat72 = ((x_3315 * x_3316) + x_3318);
        let x_3321 : vec2<f32> = u_xlat32;
        let x_3323 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3321.x, x_3321.y, x_3323);
        let x_3330 : vec3<f32> = txVec53;
        let x_3332 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3330.xy, x_3330.z);
        u_xlat73 = x_3332;
        let x_3334 : f32 = u_xlat21.z;
        let x_3335 : f32 = u_xlat73;
        let x_3337 : f32 = u_xlat72;
        u_xlat72 = ((x_3334 * x_3335) + x_3337);
        let x_3340 : vec2<f32> = u_xlat60;
        let x_3342 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3340.x, x_3340.y, x_3342);
        let x_3349 : vec3<f32> = txVec54;
        let x_3351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3349.xy, x_3349.z);
        u_xlat73 = x_3351;
        let x_3353 : f32 = u_xlat21.w;
        let x_3354 : f32 = u_xlat73;
        let x_3356 : f32 = u_xlat72;
        u_xlat72 = ((x_3353 * x_3354) + x_3356);
        let x_3359 : vec4<f32> = u_xlat13;
        let x_3360 : vec2<f32> = vec2<f32>(x_3359.x, x_3359.y);
        let x_3362 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3360.x, x_3360.y, x_3362);
        let x_3369 : vec3<f32> = txVec55;
        let x_3371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3369.xy, x_3369.z);
        u_xlat73 = x_3371;
        let x_3373 : f32 = u_xlat9.x;
        let x_3374 : f32 = u_xlat73;
        let x_3376 : f32 = u_xlat72;
        u_xlat72 = ((x_3373 * x_3374) + x_3376);
        let x_3379 : vec4<f32> = u_xlat13;
        let x_3380 : vec2<f32> = vec2<f32>(x_3379.z, x_3379.w);
        let x_3382 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3380.x, x_3380.y, x_3382);
        let x_3389 : vec3<f32> = txVec56;
        let x_3391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3389.xy, x_3389.z);
        u_xlat73 = x_3391;
        let x_3393 : f32 = u_xlat9.y;
        let x_3394 : f32 = u_xlat73;
        let x_3396 : f32 = u_xlat72;
        u_xlat72 = ((x_3393 * x_3394) + x_3396);
        let x_3399 : vec2<f32> = u_xlat55;
        let x_3401 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3399.x, x_3399.y, x_3401);
        let x_3408 : vec3<f32> = txVec57;
        let x_3410 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3408.xy, x_3408.z);
        u_xlat73 = x_3410;
        let x_3412 : f32 = u_xlat9.z;
        let x_3413 : f32 = u_xlat73;
        let x_3415 : f32 = u_xlat72;
        u_xlat72 = ((x_3412 * x_3413) + x_3415);
        let x_3418 : vec4<f32> = u_xlat8;
        let x_3419 : vec2<f32> = vec2<f32>(x_3418.x, x_3418.y);
        let x_3421 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3419.x, x_3419.y, x_3421);
        let x_3428 : vec3<f32> = txVec58;
        let x_3430 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3428.xy, x_3428.z);
        u_xlat73 = x_3430;
        let x_3432 : f32 = u_xlat9.w;
        let x_3433 : f32 = u_xlat73;
        let x_3435 : f32 = u_xlat72;
        u_xlat0.x = ((x_3432 * x_3433) + x_3435);
      }
    }
  } else {
    let x_3440 : vec4<f32> = u_xlat2;
    let x_3441 : vec2<f32> = vec2<f32>(x_3440.x, x_3440.y);
    let x_3443 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3441.x, x_3441.y, x_3443);
    let x_3450 : vec3<f32> = txVec59;
    let x_3452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3450.xy, x_3450.z);
    u_xlat0.x = x_3452;
  }
  let x_3455 : f32 = u_xlat0.x;
  let x_3457 : f32 = x_401.x_MainLightShadowParams.x;
  let x_3459 : f32 = u_xlat68;
  u_xlat0.x = ((x_3455 * x_3457) + x_3459);
  let x_3462 : bool = u_xlatb3;
  if (x_3462) {
    x_3463 = 1.0f;
  } else {
    let x_3468 : f32 = u_xlat0.x;
    x_3463 = x_3468;
  }
  let x_3469 : f32 = x_3463;
  u_xlat0.x = x_3469;
  let x_3471 : vec3<f32> = vs_INTERP0;
  let x_3473 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3475 : vec3<f32> = (x_3471 + -(x_3473));
  let x_3476 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3475.x, x_3475.y, x_3475.z, x_3476.w);
  let x_3478 : vec4<f32> = u_xlat2;
  let x_3480 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3478.x, x_3478.y, x_3478.z), vec3<f32>(x_3480.x, x_3480.y, x_3480.z));
  let x_3485 : f32 = u_xlat2.x;
  let x_3487 : f32 = x_401.x_MainLightShadowParams.z;
  let x_3490 : f32 = x_401.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3485 * x_3487) + x_3490);
  let x_3494 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3494, 0.0f, 1.0f);
  let x_3499 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3499) + 1.0f);
  let x_3503 : f32 = u_xlat2.x;
  let x_3504 : f32 = u_xlat24;
  let x_3507 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3503 * x_3504) + x_3507);
  let x_3510 : f32 = u_xlat50;
  let x_3513 : vec4<f32> = x_160.x_MainLightColor;
  let x_3515 : vec3<f32> = (vec3<f32>(x_3510, x_3510, x_3510) * vec3<f32>(x_3513.x, x_3513.y, x_3513.z));
  let x_3516 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3515.x, x_3515.y, x_3515.z, x_3516.w);
  let x_3518 : vec3<f32> = u_xlat5;
  let x_3520 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(x_3518), x_3520);
  let x_3522 : f32 = u_xlat68;
  let x_3523 : f32 = u_xlat68;
  u_xlat68 = (x_3522 + x_3523);
  let x_3525 : vec3<f32> = u_xlat22;
  let x_3526 : f32 = u_xlat68;
  let x_3530 : vec3<f32> = u_xlat5;
  let x_3532 : vec3<f32> = ((x_3525 * -(vec3<f32>(x_3526, x_3526, x_3526))) + -(x_3530));
  let x_3533 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3532.x, x_3532.y, x_3532.z, x_3533.w);
  let x_3535 : vec3<f32> = u_xlat22;
  let x_3536 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(x_3535, x_3536);
  let x_3538 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3538, 0.0f, 1.0f);
  let x_3540 : f32 = u_xlat68;
  u_xlat68 = (-(x_3540) + 1.0f);
  let x_3543 : f32 = u_xlat68;
  let x_3544 : f32 = u_xlat68;
  u_xlat68 = (x_3543 * x_3544);
  let x_3546 : f32 = u_xlat68;
  let x_3547 : f32 = u_xlat68;
  u_xlat68 = (x_3546 * x_3547);
  let x_3550 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3550) * 0.699999988f) + 1.700000048f);
  let x_3558 : f32 = u_xlat3.x;
  let x_3560 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3558 * x_3560);
  let x_3564 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3564 * 6.0f);
  let x_3576 : vec4<f32> = u_xlat8;
  let x_3579 : f32 = u_xlat3.x;
  let x_3580 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3576.x, x_3576.y, x_3576.z), x_3579);
  u_xlat8 = x_3580;
  let x_3582 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3582 + -1.0f);
  let x_3586 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3588 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3586 * x_3588) + 1.0f);
  let x_3593 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3593, 0.0f);
  let x_3597 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3597);
  let x_3601 : f32 = u_xlat3.x;
  let x_3603 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3601 * x_3603);
  let x_3607 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3607);
  let x_3611 : f32 = u_xlat3.x;
  let x_3613 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3611 * x_3613);
  let x_3616 : vec4<f32> = u_xlat8;
  let x_3618 : vec4<f32> = u_xlat3;
  let x_3620 : vec3<f32> = (vec3<f32>(x_3616.x, x_3616.y, x_3616.z) * vec3<f32>(x_3618.x, x_3618.x, x_3618.x));
  let x_3621 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3620.x, x_3620.y, x_3620.z, x_3621.w);
  let x_3623 : f32 = u_xlat69;
  let x_3625 : f32 = u_xlat69;
  let x_3629 : vec2<f32> = ((vec2<f32>(x_3623, x_3623) * vec2<f32>(x_3625, x_3625)) + vec2<f32>(-1.0f, 1.0f));
  let x_3630 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3629.x, x_3630.y, x_3629.y, x_3630.w);
  let x_3633 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3633);
  let x_3636 : f32 = u_xlat71;
  u_xlat69 = (x_3636 + -0.039999999f);
  let x_3639 : f32 = u_xlat68;
  let x_3640 : f32 = u_xlat69;
  u_xlat68 = ((x_3639 * x_3640) + 0.039999999f);
  let x_3644 : f32 = u_xlat68;
  let x_3646 : f32 = u_xlat47.x;
  u_xlat68 = (x_3644 * x_3646);
  let x_3648 : f32 = u_xlat68;
  let x_3650 : vec4<f32> = u_xlat8;
  let x_3652 : vec3<f32> = (vec3<f32>(x_3648, x_3648, x_3648) * vec3<f32>(x_3650.x, x_3650.y, x_3650.z));
  let x_3653 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3652.x, x_3652.y, x_3652.z, x_3653.w);
  let x_3655 : vec4<f32> = u_xlat4;
  let x_3657 : vec3<f32> = u_xlat7;
  let x_3659 : vec4<f32> = u_xlat8;
  let x_3661 : vec3<f32> = ((vec3<f32>(x_3655.x, x_3655.y, x_3655.z) * x_3657) + vec3<f32>(x_3659.x, x_3659.y, x_3659.z));
  let x_3662 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3661.x, x_3661.y, x_3661.z, x_3662.w);
  let x_3665 : f32 = u_xlat0.x;
  let x_3667 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3665 * x_3667);
  let x_3670 : vec3<f32> = u_xlat22;
  let x_3672 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(x_3670, vec3<f32>(x_3672.x, x_3672.y, x_3672.z));
  let x_3675 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3675, 0.0f, 1.0f);
  let x_3678 : f32 = u_xlat0.x;
  let x_3679 : f32 = u_xlat68;
  u_xlat0.x = (x_3678 * x_3679);
  let x_3682 : vec3<f32> = u_xlat0;
  let x_3684 : vec4<f32> = u_xlat2;
  let x_3686 : vec3<f32> = (vec3<f32>(x_3682.x, x_3682.x, x_3682.x) * vec3<f32>(x_3684.x, x_3684.y, x_3684.z));
  let x_3687 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3686.x, x_3686.y, x_3686.z, x_3687.w);
  let x_3689 : vec3<f32> = u_xlat5;
  let x_3691 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3693 : vec3<f32> = (x_3689 + vec3<f32>(x_3691.x, x_3691.y, x_3691.z));
  let x_3694 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3693.x, x_3693.y, x_3693.z, x_3694.w);
  let x_3696 : vec4<f32> = u_xlat8;
  let x_3698 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3696.x, x_3696.y, x_3696.z), vec3<f32>(x_3698.x, x_3698.y, x_3698.z));
  let x_3703 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3703, 1.17549435e-37f);
  let x_3707 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3707);
  let x_3710 : vec3<f32> = u_xlat0;
  let x_3712 : vec4<f32> = u_xlat8;
  let x_3714 : vec3<f32> = (vec3<f32>(x_3710.x, x_3710.x, x_3710.x) * vec3<f32>(x_3712.x, x_3712.y, x_3712.z));
  let x_3715 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3714.x, x_3714.y, x_3714.z, x_3715.w);
  let x_3717 : vec3<f32> = u_xlat22;
  let x_3718 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3717, vec3<f32>(x_3718.x, x_3718.y, x_3718.z));
  let x_3723 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3723, 0.0f, 1.0f);
  let x_3727 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3729 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3727.x, x_3727.y, x_3727.z), vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
  let x_3732 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3732, 0.0f, 1.0f);
  let x_3735 : f32 = u_xlat0.x;
  let x_3737 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3735 * x_3737);
  let x_3741 : f32 = u_xlat0.x;
  let x_3743 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3741 * x_3743) + 1.000010014f);
  let x_3748 : f32 = u_xlat68;
  let x_3749 : f32 = u_xlat68;
  u_xlat68 = (x_3748 * x_3749);
  let x_3752 : f32 = u_xlat0.x;
  let x_3754 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3752 * x_3754);
  let x_3757 : f32 = u_xlat68;
  u_xlat68 = max(x_3757, 0.100000001f);
  let x_3761 : f32 = u_xlat0.x;
  let x_3762 : f32 = u_xlat68;
  u_xlat0.x = (x_3761 * x_3762);
  let x_3765 : f32 = u_xlat28;
  let x_3767 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3765 * x_3767);
  let x_3770 : f32 = u_xlat70;
  let x_3772 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3770 / x_3772);
  let x_3775 : vec3<f32> = u_xlat0;
  let x_3779 : vec3<f32> = u_xlat7;
  let x_3780 : vec3<f32> = ((vec3<f32>(x_3775.x, x_3775.x, x_3775.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3779);
  let x_3781 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3780.x, x_3780.y, x_3780.z, x_3781.w);
  let x_3783 : vec4<f32> = u_xlat2;
  let x_3785 : vec4<f32> = u_xlat8;
  let x_3787 : vec3<f32> = (vec3<f32>(x_3783.x, x_3783.y, x_3783.z) * vec3<f32>(x_3785.x, x_3785.y, x_3785.z));
  let x_3788 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3787.x, x_3787.y, x_3787.z, x_3788.w);
  let x_3791 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3793 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3791, x_3793);
  let x_3797 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3797));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3809 : u32 = u_xlatu_loop_1;
    let x_3810 : u32 = u_xlatu0;
    if ((x_3809 < x_3810)) {
    } else {
      break;
    }
    let x_3812 : u32 = u_xlatu_loop_1;
    u_xlatu47 = (x_3812 >> 2u);
    let x_3815 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3815 & 3u));
    let x_3818 : u32 = u_xlatu47;
    let x_3821 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3818)];
    let x_3831 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3836 : vec4<u32> = indexable[x_3831];
    u_xlat47.x = dot(x_3821, bitcast<vec4<f32>>(x_3836));
    let x_3841 : f32 = u_xlat47.x;
    u_xlati47 = i32(x_3841);
    let x_3843 : vec3<f32> = vs_INTERP0;
    let x_3855 : i32 = u_xlati47;
    let x_3857 : vec4<f32> = x_3854.x_AdditionalLightsPosition[x_3855];
    let x_3860 : i32 = u_xlati47;
    let x_3862 : vec4<f32> = x_3854.x_AdditionalLightsPosition[x_3860];
    let x_3864 : vec3<f32> = ((-(x_3843) * vec3<f32>(x_3857.w, x_3857.w, x_3857.w)) + vec3<f32>(x_3862.x, x_3862.y, x_3862.z));
    let x_3865 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3864.x, x_3864.y, x_3864.z, x_3865.w);
    let x_3867 : vec4<f32> = u_xlat9;
    let x_3869 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3867.x, x_3867.y, x_3867.z), vec3<f32>(x_3869.x, x_3869.y, x_3869.z));
    let x_3872 : f32 = u_xlat69;
    u_xlat69 = max(x_3872, 6.10351562e-05f);
    let x_3875 : f32 = u_xlat69;
    u_xlat71 = inverseSqrt(x_3875);
    let x_3877 : f32 = u_xlat71;
    let x_3879 : vec4<f32> = u_xlat9;
    let x_3881 : vec3<f32> = (vec3<f32>(x_3877, x_3877, x_3877) * vec3<f32>(x_3879.x, x_3879.y, x_3879.z));
    let x_3882 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3881.x, x_3881.y, x_3881.z, x_3882.w);
    let x_3884 : f32 = u_xlat69;
    u_xlat72 = (1.0f / x_3884);
    let x_3886 : f32 = u_xlat69;
    let x_3887 : i32 = u_xlati47;
    let x_3889 : f32 = x_3854.x_AdditionalLightsAttenuation[x_3887].x;
    u_xlat69 = (x_3886 * x_3889);
    let x_3891 : f32 = u_xlat69;
    let x_3893 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3891) * x_3893) + 1.0f);
    let x_3896 : f32 = u_xlat69;
    u_xlat69 = max(x_3896, 0.0f);
    let x_3898 : f32 = u_xlat69;
    let x_3899 : f32 = u_xlat69;
    u_xlat69 = (x_3898 * x_3899);
    let x_3901 : f32 = u_xlat69;
    let x_3902 : f32 = u_xlat72;
    u_xlat69 = (x_3901 * x_3902);
    let x_3904 : i32 = u_xlati47;
    let x_3906 : vec4<f32> = x_3854.x_AdditionalLightsSpotDir[x_3904];
    let x_3908 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3906.x, x_3906.y, x_3906.z), vec3<f32>(x_3908.x, x_3908.y, x_3908.z));
    let x_3911 : f32 = u_xlat72;
    let x_3912 : i32 = u_xlati47;
    let x_3914 : f32 = x_3854.x_AdditionalLightsAttenuation[x_3912].z;
    let x_3916 : i32 = u_xlati47;
    let x_3918 : f32 = x_3854.x_AdditionalLightsAttenuation[x_3916].w;
    u_xlat72 = ((x_3911 * x_3914) + x_3918);
    let x_3920 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3920, 0.0f, 1.0f);
    let x_3922 : f32 = u_xlat72;
    let x_3923 : f32 = u_xlat72;
    u_xlat72 = (x_3922 * x_3923);
    let x_3925 : f32 = u_xlat69;
    let x_3926 : f32 = u_xlat72;
    u_xlat69 = (x_3925 * x_3926);
    let x_3928 : f32 = u_xlat50;
    let x_3930 : i32 = u_xlati47;
    let x_3932 : vec4<f32> = x_3854.x_AdditionalLightsColor[x_3930];
    let x_3934 : vec3<f32> = (vec3<f32>(x_3928, x_3928, x_3928) * vec3<f32>(x_3932.x, x_3932.y, x_3932.z));
    let x_3935 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3934.x, x_3934.y, x_3934.z, x_3935.w);
    let x_3937 : vec3<f32> = u_xlat22;
    let x_3938 : vec4<f32> = u_xlat10;
    u_xlat47.x = dot(x_3937, vec3<f32>(x_3938.x, x_3938.y, x_3938.z));
    let x_3943 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_3943, 0.0f, 1.0f);
    let x_3947 : f32 = u_xlat47.x;
    let x_3948 : f32 = u_xlat69;
    u_xlat47.x = (x_3947 * x_3948);
    let x_3951 : vec2<f32> = u_xlat47;
    let x_3953 : vec4<f32> = u_xlat11;
    let x_3955 : vec3<f32> = (vec3<f32>(x_3951.x, x_3951.x, x_3951.x) * vec3<f32>(x_3953.x, x_3953.y, x_3953.z));
    let x_3956 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3955.x, x_3955.y, x_3955.z, x_3956.w);
    let x_3958 : vec4<f32> = u_xlat9;
    let x_3960 : f32 = u_xlat71;
    let x_3963 : vec3<f32> = u_xlat5;
    let x_3964 : vec3<f32> = ((vec3<f32>(x_3958.x, x_3958.y, x_3958.z) * vec3<f32>(x_3960, x_3960, x_3960)) + x_3963);
    let x_3965 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3964.x, x_3964.y, x_3964.z, x_3965.w);
    let x_3967 : vec4<f32> = u_xlat9;
    let x_3969 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(vec3<f32>(x_3967.x, x_3967.y, x_3967.z), vec3<f32>(x_3969.x, x_3969.y, x_3969.z));
    let x_3974 : f32 = u_xlat47.x;
    u_xlat47.x = max(x_3974, 1.17549435e-37f);
    let x_3978 : f32 = u_xlat47.x;
    u_xlat47.x = inverseSqrt(x_3978);
    let x_3981 : vec2<f32> = u_xlat47;
    let x_3983 : vec4<f32> = u_xlat9;
    let x_3985 : vec3<f32> = (vec3<f32>(x_3981.x, x_3981.x, x_3981.x) * vec3<f32>(x_3983.x, x_3983.y, x_3983.z));
    let x_3986 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3985.x, x_3985.y, x_3985.z, x_3986.w);
    let x_3988 : vec3<f32> = u_xlat22;
    let x_3989 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(x_3988, vec3<f32>(x_3989.x, x_3989.y, x_3989.z));
    let x_3994 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_3994, 0.0f, 1.0f);
    let x_3997 : vec4<f32> = u_xlat10;
    let x_3999 : vec4<f32> = u_xlat9;
    u_xlat47.y = dot(vec3<f32>(x_3997.x, x_3997.y, x_3997.z), vec3<f32>(x_3999.x, x_3999.y, x_3999.z));
    let x_4004 : f32 = u_xlat47.y;
    u_xlat47.y = clamp(x_4004, 0.0f, 1.0f);
    let x_4007 : vec2<f32> = u_xlat47;
    let x_4008 : vec2<f32> = u_xlat47;
    u_xlat47 = (x_4007 * x_4008);
    let x_4011 : f32 = u_xlat47.x;
    let x_4013 : f32 = u_xlat3.x;
    u_xlat47.x = ((x_4011 * x_4013) + 1.000010014f);
    let x_4018 : f32 = u_xlat47.x;
    let x_4020 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4018 * x_4020);
    let x_4024 : f32 = u_xlat47.y;
    u_xlat69 = max(x_4024, 0.100000001f);
    let x_4026 : f32 = u_xlat69;
    let x_4028 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4026 * x_4028);
    let x_4031 : f32 = u_xlat28;
    let x_4033 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4031 * x_4033);
    let x_4036 : f32 = u_xlat70;
    let x_4038 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4036 / x_4038);
    let x_4041 : vec2<f32> = u_xlat47;
    let x_4044 : vec3<f32> = u_xlat7;
    let x_4045 : vec3<f32> = ((vec3<f32>(x_4041.x, x_4041.x, x_4041.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4044);
    let x_4046 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4045.x, x_4045.y, x_4045.z, x_4046.w);
    let x_4048 : vec4<f32> = u_xlat9;
    let x_4050 : vec4<f32> = u_xlat11;
    let x_4053 : vec4<f32> = u_xlat8;
    let x_4055 : vec3<f32> = ((vec3<f32>(x_4048.x, x_4048.y, x_4048.z) * vec3<f32>(x_4050.x, x_4050.y, x_4050.z)) + vec3<f32>(x_4053.x, x_4053.y, x_4053.z));
    let x_4056 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4055.x, x_4055.y, x_4055.z, x_4056.w);

    continuing {
      let x_4058 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4058 + bitcast<u32>(1i));
    }
  }
  let x_4060 : vec4<f32> = u_xlat4;
  let x_4062 : vec4<f32> = u_xlat6;
  let x_4065 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4060.x, x_4060.y, x_4060.z) * vec3<f32>(x_4062.x, x_4062.x, x_4062.x)) + vec3<f32>(x_4065.x, x_4065.y, x_4065.z));
  let x_4068 : vec4<f32> = u_xlat8;
  let x_4070 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4068.x, x_4068.y, x_4068.z) + x_4070);
  let x_4074 : vec4<f32> = vs_INTERP4;
  let x_4076 : vec3<f32> = u_xlat1;
  let x_4078 : vec3<f32> = u_xlat0;
  let x_4079 : vec3<f32> = ((vec3<f32>(x_4074.w, x_4074.w, x_4074.w) * x_4076) + x_4078);
  let x_4080 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4079.x, x_4079.y, x_4079.z, x_4080.w);
  let x_4082 : bool = u_xlatb25;
  let x_4083 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4083, x_4082);
  let x_4089 : u32 = x_160.x_RenderingLayerMaxInt;
  let x_4091 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4089 & bitcast<u32>(x_4091));
  let x_4094 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4094);
  let x_4099 : f32 = u_xlat0.x;
  let x_4101 : f32 = x_160.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4099 * x_4101);
  let x_4105 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4105, 0.0f, 1.0f);
  let x_4108 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4108.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

