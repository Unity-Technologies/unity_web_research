type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_158 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_261 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_362 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3726 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_197 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb46 : bool;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var x_1704 : f32;
  var u_xlatu3 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu68 : u32;
  var u_xlati46 : i32;
  var u_xlat46 : f32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var u_xlat27 : f32;
  var u_xlat71 : f32;
  var u_xlat49 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat29 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : bool;
  var x_3325 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat66 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_148 : vec3<f32> = u_xlat22;
  let x_149 : vec3<f32> = u_xlat0;
  let x_151 : vec3<f32> = (x_148 * vec3<f32>(x_149.x, x_149.x, x_149.x));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_151.z, x_152.w);
  let x_161 : f32 = x_158.unity_OrthoParams.w;
  u_xlatb0 = (x_161 == 0.0f);
  let x_165 : vec3<f32> = vs_INTERP0;
  let x_170 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_165) + x_170);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_173, x_174);
  let x_176 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_176);
  let x_178 : f32 = u_xlat67;
  let x_180 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_178, x_178, x_178) * x_180);
  let x_186 : f32 = x_158.unity_MatrixV[0i].z;
  u_xlat5.x = x_186;
  let x_190 : f32 = x_158.unity_MatrixV[1i].z;
  u_xlat5.y = x_190;
  let x_194 : f32 = x_158.unity_MatrixV[2i].z;
  u_xlat5.z = x_194;
  let x_196 : bool = u_xlatb0;
  if (x_196) {
    let x_200 : vec3<f32> = u_xlat4;
    x_197 = x_200;
  } else {
    let x_202 : vec3<f32> = u_xlat5;
    x_197 = x_202;
  }
  let x_203 : vec3<f32> = x_197;
  u_xlat4 = x_203;
  let x_204 : vec3<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat5 = (vec3<f32>(x_204.y, x_204.y, x_204.y) * vec3<f32>(x_208.x, x_208.y, x_208.z));
  let x_212 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_214 : vec3<f32> = u_xlat4;
  let x_217 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_212.x, x_212.y, x_212.z) * vec3<f32>(x_214.x, x_214.x, x_214.x)) + x_217);
  let x_220 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_222 : vec3<f32> = u_xlat4;
  let x_225 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_220.x, x_220.y, x_220.z) * vec3<f32>(x_222.z, x_222.z, x_222.z)) + x_225);
  let x_227 : vec3<f32> = u_xlat5;
  let x_228 : vec3<f32> = u_xlat5;
  u_xlat0.x = dot(x_227, x_228);
  let x_232 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_232);
  let x_235 : vec3<f32> = u_xlat0;
  let x_237 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_235.x, x_235.x, x_235.x) * x_237);
  let x_251 : vec4<f32> = vs_INTERP3;
  let x_254 : f32 = x_158.x_GlobalMipBias.x;
  let x_255 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_251.x, x_251.y), x_254);
  u_xlat6 = x_255;
  let x_257 : vec4<f32> = u_xlat6;
  let x_263 : vec4<f32> = x_261.Color_C30C7CA3;
  let x_265 : vec3<f32> = (vec3<f32>(x_257.x, x_257.y, x_257.z) * vec3<f32>(x_263.x, x_263.y, x_263.z));
  let x_266 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_265.x, x_265.y, x_265.z, x_266.w);
  let x_274 : vec4<f32> = vs_INTERP3;
  let x_277 : f32 = x_158.x_GlobalMipBias.x;
  let x_278 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_274.x, x_274.y), x_277);
  u_xlat8 = vec4<f32>(x_278.w, x_278.x, x_278.y, x_278.z);
  let x_281 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_281.y, x_281.z, x_281.w, x_281.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_288 : vec4<f32> = u_xlat9;
  let x_289 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_288, x_289);
  let x_293 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_293);
  let x_297 : vec3<f32> = u_xlat0;
  let x_299 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_297.x, x_297.x, x_297.x) * vec3<f32>(x_299.x, x_299.y, x_299.z));
  let x_304 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_304 * 200.0f);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_309, 1.0f);
  let x_312 : vec3<f32> = u_xlat0;
  let x_314 : vec4<f32> = u_xlat6;
  let x_316 : vec3<f32> = (vec3<f32>(x_312.x, x_312.x, x_312.x) * vec3<f32>(x_314.x, x_314.y, x_314.z));
  let x_317 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_316.x, x_316.y, x_316.z, x_317.w);
  let x_319 : vec4<f32> = u_xlat3;
  let x_321 : vec3<f32> = u_xlat30;
  let x_323 : vec3<f32> = (vec3<f32>(x_319.x, x_319.y, x_319.z) * vec3<f32>(x_321.y, x_321.y, x_321.y));
  let x_324 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_323.x, x_323.y, x_323.z, x_324.w);
  let x_326 : vec3<f32> = u_xlat30;
  let x_328 : vec3<f32> = u_xlat2;
  let x_330 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_326.x, x_326.x, x_326.x) * x_328) + vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec3<f32> = u_xlat30;
  let x_335 : vec3<f32> = u_xlat1;
  let x_337 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_333.z, x_333.z, x_333.z) * x_335) + x_337);
  let x_339 : vec3<f32> = u_xlat1;
  let x_340 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_339, x_340);
  let x_344 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_344, 1.17549435e-37f);
  let x_349 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_349);
  let x_352 : vec3<f32> = u_xlat0;
  let x_354 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_352.x, x_352.x, x_352.x) * x_354);
  let x_356 : vec3<f32> = vs_INTERP0;
  let x_364 : vec4<f32> = x_362.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_356.y, x_356.y, x_356.y) * vec3<f32>(x_364.x, x_364.y, x_364.z));
  let x_368 : vec4<f32> = x_362.x_MainLightWorldToShadow[0i][0i];
  let x_370 : vec3<f32> = vs_INTERP0;
  let x_373 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_368.x, x_368.y, x_368.z) * vec3<f32>(x_370.x, x_370.x, x_370.x)) + x_373);
  let x_376 : vec4<f32> = x_362.x_MainLightWorldToShadow[0i][2i];
  let x_378 : vec3<f32> = vs_INTERP0;
  let x_381 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_376.x, x_376.y, x_376.z) * vec3<f32>(x_378.z, x_378.z, x_378.z)) + x_381);
  let x_383 : vec3<f32> = u_xlat2;
  let x_385 : vec4<f32> = x_362.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_383 + vec3<f32>(x_385.x, x_385.y, x_385.z));
  let x_390 : f32 = x_362.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_390);
  let x_392 : bool = u_xlatb0;
  if (x_392) {
    let x_397 : f32 = x_362.x_MainLightShadowParams.y;
    u_xlatb67 = (x_397 == 1.0f);
    let x_399 : bool = u_xlatb67;
    if (x_399) {
      let x_402 : vec3<f32> = u_xlat2;
      let x_406 : vec4<f32> = x_362.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_402.x, x_402.y, x_402.x, x_402.y) + x_406);
      let x_409 : vec4<f32> = u_xlat3;
      let x_410 : vec2<f32> = vec2<f32>(x_409.x, x_409.y);
      let x_412 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_410.x, x_410.y, x_412);
      let x_424 : vec3<f32> = txVec0;
      let x_426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_424.xy, x_424.z);
      u_xlat9.x = x_426;
      let x_429 : vec4<f32> = u_xlat3;
      let x_430 : vec2<f32> = vec2<f32>(x_429.z, x_429.w);
      let x_432 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_430.x, x_430.y, x_432);
      let x_439 : vec3<f32> = txVec1;
      let x_441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_439.xy, x_439.z);
      u_xlat9.y = x_441;
      let x_443 : vec3<f32> = u_xlat2;
      let x_446 : vec4<f32> = x_362.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_443.x, x_443.y, x_443.x, x_443.y) + x_446);
      let x_449 : vec4<f32> = u_xlat3;
      let x_450 : vec2<f32> = vec2<f32>(x_449.x, x_449.y);
      let x_452 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_450.x, x_450.y, x_452);
      let x_459 : vec3<f32> = txVec2;
      let x_461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_459.xy, x_459.z);
      u_xlat9.z = x_461;
      let x_464 : vec4<f32> = u_xlat3;
      let x_465 : vec2<f32> = vec2<f32>(x_464.z, x_464.w);
      let x_467 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_465.x, x_465.y, x_467);
      let x_474 : vec3<f32> = txVec3;
      let x_476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_474.xy, x_474.z);
      u_xlat9.w = x_476;
      let x_478 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_478, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_485 : f32 = x_362.x_MainLightShadowParams.y;
      u_xlatb68 = (x_485 == 2.0f);
      let x_487 : bool = u_xlatb68;
      if (x_487) {
        let x_490 : vec3<f32> = u_xlat2;
        let x_494 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_499 : vec2<f32> = ((vec2<f32>(x_490.x, x_490.y) * vec2<f32>(x_494.z, x_494.w)) + vec2<f32>(0.5f, 0.5f));
        let x_500 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_499.x, x_499.y, x_500.z, x_500.w);
        let x_502 : vec4<f32> = u_xlat3;
        let x_504 : vec2<f32> = floor(vec2<f32>(x_502.x, x_502.y));
        let x_505 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_504.x, x_504.y, x_505.z, x_505.w);
        let x_509 : vec3<f32> = u_xlat2;
        let x_512 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_515 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_509.x, x_509.y) * vec2<f32>(x_512.z, x_512.w)) + -(vec2<f32>(x_515.x, x_515.y)));
        let x_519 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_519.x, x_519.x, x_519.y, x_519.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_524 : vec4<f32> = u_xlat9;
        let x_526 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_524.x, x_524.x, x_524.z, x_524.z) * vec4<f32>(x_526.x, x_526.x, x_526.z, x_526.z));
        let x_529 : vec4<f32> = u_xlat10;
        let x_533 : vec2<f32> = (vec2<f32>(x_529.y, x_529.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_534 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_533.x, x_534.y, x_533.y, x_534.w);
        let x_536 : vec4<f32> = u_xlat10;
        let x_539 : vec2<f32> = u_xlat47;
        let x_541 : vec2<f32> = ((vec2<f32>(x_536.x, x_536.z) * vec2<f32>(0.5f, 0.5f)) + -(x_539));
        let x_542 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_545) + vec2<f32>(1.0f, 1.0f));
        let x_550 : vec2<f32> = u_xlat47;
        let x_552 : vec2<f32> = min(x_550, vec2<f32>(0.0f, 0.0f));
        let x_553 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat11;
        let x_558 : vec4<f32> = u_xlat11;
        let x_561 : vec2<f32> = u_xlat54;
        let x_562 : vec2<f32> = ((-(vec2<f32>(x_555.x, x_555.y)) * vec2<f32>(x_558.x, x_558.y)) + x_561);
        let x_563 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_562.x, x_562.y, x_563.z, x_563.w);
        let x_565 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_565, vec2<f32>(0.0f, 0.0f));
        let x_567 : vec2<f32> = u_xlat47;
        let x_569 : vec2<f32> = u_xlat47;
        let x_571 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_567) * x_569) + vec2<f32>(x_571.y, x_571.w));
        let x_574 : vec4<f32> = u_xlat11;
        let x_576 : vec2<f32> = (vec2<f32>(x_574.x, x_574.y) + vec2<f32>(1.0f, 1.0f));
        let x_577 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_576.x, x_576.y, x_577.z, x_577.w);
        let x_579 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_579 + vec2<f32>(1.0f, 1.0f));
        let x_582 : vec4<f32> = u_xlat10;
        let x_586 : vec2<f32> = (vec2<f32>(x_582.x, x_582.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_587 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_586.x, x_586.y, x_587.z, x_587.w);
        let x_589 : vec2<f32> = u_xlat54;
        let x_590 : vec2<f32> = (x_589 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_591 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_590.x, x_590.y, x_591.z, x_591.w);
        let x_593 : vec4<f32> = u_xlat11;
        let x_595 : vec2<f32> = (vec2<f32>(x_593.x, x_593.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_596 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_595.x, x_595.y, x_596.z, x_596.w);
        let x_599 : vec2<f32> = u_xlat47;
        let x_600 : vec2<f32> = (x_599 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_601 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_600.x, x_600.y, x_601.z, x_601.w);
        let x_603 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_603.y, x_603.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_607 : f32 = u_xlat11.x;
        u_xlat12.z = x_607;
        let x_610 : f32 = u_xlat47.x;
        u_xlat12.w = x_610;
        let x_613 : f32 = u_xlat13.x;
        u_xlat10.z = x_613;
        let x_616 : f32 = u_xlat9.x;
        u_xlat10.w = x_616;
        let x_619 : vec4<f32> = u_xlat10;
        let x_621 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_619.z, x_619.w, x_619.x, x_619.z) + vec4<f32>(x_621.z, x_621.w, x_621.x, x_621.z));
        let x_625 : f32 = u_xlat12.y;
        u_xlat11.z = x_625;
        let x_628 : f32 = u_xlat47.y;
        u_xlat11.w = x_628;
        let x_631 : f32 = u_xlat10.y;
        u_xlat13.z = x_631;
        let x_634 : f32 = u_xlat9.z;
        u_xlat13.w = x_634;
        let x_636 : vec4<f32> = u_xlat11;
        let x_638 : vec4<f32> = u_xlat13;
        let x_640 : vec3<f32> = (vec3<f32>(x_636.z, x_636.y, x_636.w) + vec3<f32>(x_638.z, x_638.y, x_638.w));
        let x_641 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_640.x, x_640.y, x_640.z, x_641.w);
        let x_643 : vec4<f32> = u_xlat10;
        let x_645 : vec4<f32> = u_xlat14;
        let x_647 : vec3<f32> = (vec3<f32>(x_643.x, x_643.z, x_643.w) / vec3<f32>(x_645.z, x_645.w, x_645.y));
        let x_648 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_647.x, x_647.y, x_647.z, x_648.w);
        let x_650 : vec4<f32> = u_xlat10;
        let x_656 : vec3<f32> = (vec3<f32>(x_650.x, x_650.y, x_650.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_657 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_656.x, x_656.y, x_656.z, x_657.w);
        let x_659 : vec4<f32> = u_xlat13;
        let x_661 : vec4<f32> = u_xlat9;
        let x_663 : vec3<f32> = (vec3<f32>(x_659.z, x_659.y, x_659.w) / vec3<f32>(x_661.x, x_661.y, x_661.z));
        let x_664 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_663.x, x_663.y, x_663.z, x_664.w);
        let x_666 : vec4<f32> = u_xlat11;
        let x_668 : vec3<f32> = (vec3<f32>(x_666.x, x_666.y, x_666.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_669 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_668.x, x_668.y, x_668.z, x_669.w);
        let x_671 : vec4<f32> = u_xlat10;
        let x_674 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_676 : vec3<f32> = (vec3<f32>(x_671.y, x_671.x, x_671.z) * vec3<f32>(x_674.x, x_674.x, x_674.x));
        let x_677 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_676.x, x_676.y, x_676.z, x_677.w);
        let x_679 : vec4<f32> = u_xlat11;
        let x_682 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_684 : vec3<f32> = (vec3<f32>(x_679.x, x_679.y, x_679.z) * vec3<f32>(x_682.y, x_682.y, x_682.y));
        let x_685 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_684.x, x_684.y, x_684.z, x_685.w);
        let x_688 : f32 = u_xlat11.x;
        u_xlat10.w = x_688;
        let x_690 : vec4<f32> = u_xlat3;
        let x_693 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_696 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_690.x, x_690.y, x_690.x, x_690.y) * vec4<f32>(x_693.x, x_693.y, x_693.x, x_693.y)) + vec4<f32>(x_696.y, x_696.w, x_696.x, x_696.w));
        let x_699 : vec4<f32> = u_xlat3;
        let x_702 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_705 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_699.x, x_699.y) * vec2<f32>(x_702.x, x_702.y)) + vec2<f32>(x_705.z, x_705.w));
        let x_709 : f32 = u_xlat10.y;
        u_xlat11.w = x_709;
        let x_711 : vec4<f32> = u_xlat11;
        let x_712 : vec2<f32> = vec2<f32>(x_711.y, x_711.z);
        let x_713 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_713.x, x_712.x, x_713.z, x_712.y);
        let x_715 : vec4<f32> = u_xlat3;
        let x_718 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_715.x, x_715.y, x_715.x, x_715.y) * vec4<f32>(x_718.x, x_718.y, x_718.x, x_718.y)) + vec4<f32>(x_721.x, x_721.y, x_721.z, x_721.y));
        let x_724 : vec4<f32> = u_xlat3;
        let x_727 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_730 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_724.x, x_724.y, x_724.x, x_724.y) * vec4<f32>(x_727.x, x_727.y, x_727.x, x_727.y)) + vec4<f32>(x_730.w, x_730.y, x_730.w, x_730.z));
        let x_733 : vec4<f32> = u_xlat3;
        let x_736 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_739 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_733.x, x_733.y, x_733.x, x_733.y) * vec4<f32>(x_736.x, x_736.y, x_736.x, x_736.y)) + vec4<f32>(x_739.x, x_739.w, x_739.z, x_739.w));
        let x_743 : vec4<f32> = u_xlat9;
        let x_745 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_743.x, x_743.x, x_743.x, x_743.y) * vec4<f32>(x_745.z, x_745.w, x_745.y, x_745.z));
        let x_749 : vec4<f32> = u_xlat9;
        let x_751 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_749.y, x_749.y, x_749.z, x_749.z) * x_751);
        let x_755 : f32 = u_xlat9.z;
        let x_757 : f32 = u_xlat14.y;
        u_xlat68 = (x_755 * x_757);
        let x_760 : vec4<f32> = u_xlat12;
        let x_761 : vec2<f32> = vec2<f32>(x_760.x, x_760.y);
        let x_763 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_761.x, x_761.y, x_763);
        let x_770 : vec3<f32> = txVec4;
        let x_772 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_770.xy, x_770.z);
        u_xlat3.x = x_772;
        let x_775 : vec4<f32> = u_xlat12;
        let x_776 : vec2<f32> = vec2<f32>(x_775.z, x_775.w);
        let x_778 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_786 : vec3<f32> = txVec5;
        let x_788 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_786.xy, x_786.z);
        u_xlat25 = x_788;
        let x_789 : f32 = u_xlat25;
        let x_791 : f32 = u_xlat15.y;
        u_xlat25 = (x_789 * x_791);
        let x_794 : f32 = u_xlat15.x;
        let x_796 : f32 = u_xlat3.x;
        let x_798 : f32 = u_xlat25;
        u_xlat3.x = ((x_794 * x_796) + x_798);
        let x_802 : vec2<f32> = u_xlat47;
        let x_804 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_802.x, x_802.y, x_804);
        let x_811 : vec3<f32> = txVec6;
        let x_813 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_811.xy, x_811.z);
        u_xlat25 = x_813;
        let x_815 : f32 = u_xlat15.z;
        let x_816 : f32 = u_xlat25;
        let x_819 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_815 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat11;
        let x_824 : vec2<f32> = vec2<f32>(x_823.x, x_823.y);
        let x_826 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec7;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat25 = x_835;
        let x_837 : f32 = u_xlat15.w;
        let x_838 : f32 = u_xlat25;
        let x_841 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_837 * x_838) + x_841);
        let x_845 : vec4<f32> = u_xlat13;
        let x_846 : vec2<f32> = vec2<f32>(x_845.x, x_845.y);
        let x_848 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_846.x, x_846.y, x_848);
        let x_855 : vec3<f32> = txVec8;
        let x_857 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_855.xy, x_855.z);
        u_xlat25 = x_857;
        let x_859 : f32 = u_xlat16.x;
        let x_860 : f32 = u_xlat25;
        let x_863 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_859 * x_860) + x_863);
        let x_867 : vec4<f32> = u_xlat13;
        let x_868 : vec2<f32> = vec2<f32>(x_867.z, x_867.w);
        let x_870 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_868.x, x_868.y, x_870);
        let x_877 : vec3<f32> = txVec9;
        let x_879 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_877.xy, x_877.z);
        u_xlat25 = x_879;
        let x_881 : f32 = u_xlat16.y;
        let x_882 : f32 = u_xlat25;
        let x_885 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_881 * x_882) + x_885);
        let x_889 : vec4<f32> = u_xlat11;
        let x_890 : vec2<f32> = vec2<f32>(x_889.z, x_889.w);
        let x_892 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_890.x, x_890.y, x_892);
        let x_899 : vec3<f32> = txVec10;
        let x_901 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_899.xy, x_899.z);
        u_xlat25 = x_901;
        let x_903 : f32 = u_xlat16.z;
        let x_904 : f32 = u_xlat25;
        let x_907 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_903 * x_904) + x_907);
        let x_911 : vec4<f32> = u_xlat10;
        let x_912 : vec2<f32> = vec2<f32>(x_911.x, x_911.y);
        let x_914 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec11;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat25 = x_923;
        let x_925 : f32 = u_xlat16.w;
        let x_926 : f32 = u_xlat25;
        let x_929 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_925 * x_926) + x_929);
        let x_933 : vec4<f32> = u_xlat10;
        let x_934 : vec2<f32> = vec2<f32>(x_933.z, x_933.w);
        let x_936 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_934.x, x_934.y, x_936);
        let x_943 : vec3<f32> = txVec12;
        let x_945 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_943.xy, x_943.z);
        u_xlat25 = x_945;
        let x_946 : f32 = u_xlat68;
        let x_947 : f32 = u_xlat25;
        let x_950 : f32 = u_xlat3.x;
        u_xlat67 = ((x_946 * x_947) + x_950);
      } else {
        let x_953 : vec3<f32> = u_xlat2;
        let x_956 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_959 : vec2<f32> = ((vec2<f32>(x_953.x, x_953.y) * vec2<f32>(x_956.z, x_956.w)) + vec2<f32>(0.5f, 0.5f));
        let x_960 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_959.x, x_959.y, x_960.z, x_960.w);
        let x_962 : vec4<f32> = u_xlat3;
        let x_964 : vec2<f32> = floor(vec2<f32>(x_962.x, x_962.y));
        let x_965 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_964.x, x_964.y, x_965.z, x_965.w);
        let x_967 : vec3<f32> = u_xlat2;
        let x_970 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_973 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_967.x, x_967.y) * vec2<f32>(x_970.z, x_970.w)) + -(vec2<f32>(x_973.x, x_973.y)));
        let x_977 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_977.x, x_977.x, x_977.y, x_977.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_980 : vec4<f32> = u_xlat9;
        let x_982 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_980.x, x_980.x, x_980.z, x_980.z) * vec4<f32>(x_982.x, x_982.x, x_982.z, x_982.z));
        let x_985 : vec4<f32> = u_xlat10;
        let x_989 : vec2<f32> = (vec2<f32>(x_985.y, x_985.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_990 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_990.x, x_989.x, x_990.z, x_989.y);
        let x_992 : vec4<f32> = u_xlat10;
        let x_995 : vec2<f32> = u_xlat47;
        let x_997 : vec2<f32> = ((vec2<f32>(x_992.x, x_992.z) * vec2<f32>(0.5f, 0.5f)) + -(x_995));
        let x_998 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_997.x, x_998.y, x_997.y, x_998.w);
        let x_1000 : vec2<f32> = u_xlat47;
        let x_1002 : vec2<f32> = (-(x_1000) + vec2<f32>(1.0f, 1.0f));
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1002.x, x_1002.y, x_1003.z, x_1003.w);
        let x_1005 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1005, vec2<f32>(0.0f, 0.0f));
        let x_1007 : vec2<f32> = u_xlat54;
        let x_1009 : vec2<f32> = u_xlat54;
        let x_1011 : vec4<f32> = u_xlat10;
        let x_1013 : vec2<f32> = ((-(x_1007) * x_1009) + vec2<f32>(x_1011.x, x_1011.y));
        let x_1014 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1013.x, x_1013.y, x_1014.z, x_1014.w);
        let x_1016 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1016, vec2<f32>(0.0f, 0.0f));
        let x_1019 : vec2<f32> = u_xlat54;
        let x_1021 : vec2<f32> = u_xlat54;
        let x_1023 : vec4<f32> = u_xlat9;
        let x_1025 : vec2<f32> = ((-(x_1019) * x_1021) + vec2<f32>(x_1023.y, x_1023.w));
        let x_1026 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1025.x, x_1026.y, x_1025.y);
        let x_1028 : vec4<f32> = u_xlat10;
        let x_1031 : vec2<f32> = (vec2<f32>(x_1028.x, x_1028.y) + vec2<f32>(2.0f, 2.0f));
        let x_1032 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1031.x, x_1031.y, x_1032.z, x_1032.w);
        let x_1034 : vec3<f32> = u_xlat31;
        let x_1036 : vec2<f32> = (vec2<f32>(x_1034.x, x_1034.z) + vec2<f32>(2.0f, 2.0f));
        let x_1037 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1037.x, x_1036.x, x_1037.z, x_1036.y);
        let x_1040 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1040 * 0.081632003f);
        let x_1044 : vec4<f32> = u_xlat9;
        let x_1047 : vec3<f32> = (vec3<f32>(x_1044.z, x_1044.x, x_1044.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1048 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1047.x, x_1047.y, x_1047.z, x_1048.w);
        let x_1050 : vec4<f32> = u_xlat10;
        let x_1053 : vec2<f32> = (vec2<f32>(x_1050.x, x_1050.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1054 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1053.x, x_1053.y, x_1054.z, x_1054.w);
        let x_1057 : f32 = u_xlat13.y;
        u_xlat12.x = x_1057;
        let x_1059 : vec2<f32> = u_xlat47;
        let x_1066 : vec2<f32> = ((vec2<f32>(x_1059.x, x_1059.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1067 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1067.x, x_1066.x, x_1067.z, x_1066.y);
        let x_1069 : vec2<f32> = u_xlat47;
        let x_1073 : vec2<f32> = ((vec2<f32>(x_1069.x, x_1069.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1074 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1073.x, x_1074.y, x_1073.y, x_1074.w);
        let x_1077 : f32 = u_xlat9.x;
        u_xlat10.y = x_1077;
        let x_1080 : f32 = u_xlat11.y;
        u_xlat10.w = x_1080;
        let x_1082 : vec4<f32> = u_xlat10;
        let x_1083 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1082 + x_1083);
        let x_1085 : vec2<f32> = u_xlat47;
        let x_1088 : vec2<f32> = ((vec2<f32>(x_1085.y, x_1085.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1089 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1089.x, x_1088.x, x_1089.z, x_1088.y);
        let x_1091 : vec2<f32> = u_xlat47;
        let x_1094 : vec2<f32> = ((vec2<f32>(x_1091.y, x_1091.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1095 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1095.w);
        let x_1098 : f32 = u_xlat9.y;
        u_xlat11.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1100 + x_1101);
        let x_1103 : vec4<f32> = u_xlat10;
        let x_1104 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1103 / x_1104);
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1106 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1112 : vec4<f32> = u_xlat11;
        let x_1113 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1112 / x_1113);
        let x_1115 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1115 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1117 : vec4<f32> = u_xlat10;
        let x_1120 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1117.w, x_1117.x, x_1117.y, x_1117.z) * vec4<f32>(x_1120.x, x_1120.x, x_1120.x, x_1120.x));
        let x_1123 : vec4<f32> = u_xlat11;
        let x_1126 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1123.x, x_1123.w, x_1123.y, x_1123.z) * vec4<f32>(x_1126.y, x_1126.y, x_1126.y, x_1126.y));
        let x_1129 : vec4<f32> = u_xlat10;
        let x_1130 : vec3<f32> = vec3<f32>(x_1129.y, x_1129.z, x_1129.w);
        let x_1131 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1130.x, x_1131.y, x_1130.y, x_1130.z);
        let x_1134 : f32 = u_xlat11.x;
        u_xlat13.y = x_1134;
        let x_1136 : vec4<f32> = u_xlat3;
        let x_1139 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1136.x, x_1136.y, x_1136.x, x_1136.y) * vec4<f32>(x_1139.x, x_1139.y, x_1139.x, x_1139.y)) + vec4<f32>(x_1142.x, x_1142.y, x_1142.z, x_1142.y));
        let x_1145 : vec4<f32> = u_xlat3;
        let x_1148 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1151 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1145.x, x_1145.y) * vec2<f32>(x_1148.x, x_1148.y)) + vec2<f32>(x_1151.w, x_1151.y));
        let x_1155 : f32 = u_xlat13.y;
        u_xlat10.y = x_1155;
        let x_1158 : f32 = u_xlat11.z;
        u_xlat13.y = x_1158;
        let x_1160 : vec4<f32> = u_xlat3;
        let x_1163 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1166 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1160.x, x_1160.y, x_1160.x, x_1160.y) * vec4<f32>(x_1163.x, x_1163.y, x_1163.x, x_1163.y)) + vec4<f32>(x_1166.x, x_1166.y, x_1166.z, x_1166.y));
        let x_1169 : vec4<f32> = u_xlat3;
        let x_1172 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1175 : vec4<f32> = u_xlat13;
        let x_1177 : vec2<f32> = ((vec2<f32>(x_1169.x, x_1169.y) * vec2<f32>(x_1172.x, x_1172.y)) + vec2<f32>(x_1175.w, x_1175.y));
        let x_1178 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1177.x, x_1177.y, x_1178.z, x_1178.w);
        let x_1181 : f32 = u_xlat13.y;
        u_xlat10.z = x_1181;
        let x_1184 : vec4<f32> = u_xlat3;
        let x_1187 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1184.x, x_1184.y, x_1184.x, x_1184.y) * vec4<f32>(x_1187.x, x_1187.y, x_1187.x, x_1187.y)) + vec4<f32>(x_1190.x, x_1190.y, x_1190.x, x_1190.z));
        let x_1194 : f32 = u_xlat11.w;
        u_xlat13.y = x_1194;
        let x_1197 : vec4<f32> = u_xlat3;
        let x_1200 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat3;
        let x_1210 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat13.y;
        u_xlat10.w = x_1217;
        let x_1220 : vec4<f32> = u_xlat3;
        let x_1223 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1226 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1220.x, x_1220.y) * vec2<f32>(x_1223.x, x_1223.y)) + vec2<f32>(x_1226.x, x_1226.w));
        let x_1229 : vec4<f32> = u_xlat13;
        let x_1230 : vec3<f32> = vec3<f32>(x_1229.x, x_1229.z, x_1229.w);
        let x_1231 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1230.x, x_1231.y, x_1230.y, x_1230.z);
        let x_1233 : vec4<f32> = u_xlat3;
        let x_1236 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1239 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1233.x, x_1233.y, x_1233.x, x_1233.y) * vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y)) + vec4<f32>(x_1239.x, x_1239.y, x_1239.z, x_1239.y));
        let x_1243 : vec4<f32> = u_xlat3;
        let x_1246 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1249 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1243.x, x_1243.y) * vec2<f32>(x_1246.x, x_1246.y)) + vec2<f32>(x_1249.w, x_1249.y));
        let x_1253 : f32 = u_xlat10.x;
        u_xlat11.x = x_1253;
        let x_1255 : vec4<f32> = u_xlat3;
        let x_1258 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1261 : vec4<f32> = u_xlat11;
        let x_1263 : vec2<f32> = ((vec2<f32>(x_1255.x, x_1255.y) * vec2<f32>(x_1258.x, x_1258.y)) + vec2<f32>(x_1261.x, x_1261.y));
        let x_1264 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1263.x, x_1263.y, x_1264.z, x_1264.w);
        let x_1267 : vec4<f32> = u_xlat9;
        let x_1269 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1267.x, x_1267.x, x_1267.x, x_1267.x) * x_1269);
        let x_1272 : vec4<f32> = u_xlat9;
        let x_1274 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1272.y, x_1272.y, x_1272.y, x_1272.y) * x_1274);
        let x_1277 : vec4<f32> = u_xlat9;
        let x_1279 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1277.z, x_1277.z, x_1277.z, x_1277.z) * x_1279);
        let x_1281 : vec4<f32> = u_xlat9;
        let x_1283 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1281.w, x_1281.w, x_1281.w, x_1281.w) * x_1283);
        let x_1286 : vec4<f32> = u_xlat14;
        let x_1287 : vec2<f32> = vec2<f32>(x_1286.x, x_1286.y);
        let x_1289 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1287.x, x_1287.y, x_1289);
        let x_1296 : vec3<f32> = txVec13;
        let x_1298 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1296.xy, x_1296.z);
        u_xlat68 = x_1298;
        let x_1300 : vec4<f32> = u_xlat14;
        let x_1301 : vec2<f32> = vec2<f32>(x_1300.z, x_1300.w);
        let x_1303 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1301.x, x_1301.y, x_1303);
        let x_1311 : vec3<f32> = txVec14;
        let x_1313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1311.xy, x_1311.z);
        u_xlat70 = x_1313;
        let x_1314 : f32 = u_xlat70;
        let x_1316 : f32 = u_xlat19.y;
        u_xlat70 = (x_1314 * x_1316);
        let x_1319 : f32 = u_xlat19.x;
        let x_1320 : f32 = u_xlat68;
        let x_1322 : f32 = u_xlat70;
        u_xlat68 = ((x_1319 * x_1320) + x_1322);
        let x_1325 : vec2<f32> = u_xlat47;
        let x_1327 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1325.x, x_1325.y, x_1327);
        let x_1334 : vec3<f32> = txVec15;
        let x_1336 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1334.xy, x_1334.z);
        u_xlat47.x = x_1336;
        let x_1339 : f32 = u_xlat19.z;
        let x_1341 : f32 = u_xlat47.x;
        let x_1343 : f32 = u_xlat68;
        u_xlat68 = ((x_1339 * x_1341) + x_1343);
        let x_1346 : vec4<f32> = u_xlat17;
        let x_1347 : vec2<f32> = vec2<f32>(x_1346.x, x_1346.y);
        let x_1349 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1347.x, x_1347.y, x_1349);
        let x_1356 : vec3<f32> = txVec16;
        let x_1358 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1356.xy, x_1356.z);
        u_xlat47.x = x_1358;
        let x_1361 : f32 = u_xlat19.w;
        let x_1363 : f32 = u_xlat47.x;
        let x_1365 : f32 = u_xlat68;
        u_xlat68 = ((x_1361 * x_1363) + x_1365);
        let x_1368 : vec4<f32> = u_xlat15;
        let x_1369 : vec2<f32> = vec2<f32>(x_1368.x, x_1368.y);
        let x_1371 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1369.x, x_1369.y, x_1371);
        let x_1378 : vec3<f32> = txVec17;
        let x_1380 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1378.xy, x_1378.z);
        u_xlat47.x = x_1380;
        let x_1383 : f32 = u_xlat20.x;
        let x_1385 : f32 = u_xlat47.x;
        let x_1387 : f32 = u_xlat68;
        u_xlat68 = ((x_1383 * x_1385) + x_1387);
        let x_1390 : vec4<f32> = u_xlat15;
        let x_1391 : vec2<f32> = vec2<f32>(x_1390.z, x_1390.w);
        let x_1393 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec18;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat47.x = x_1402;
        let x_1405 : f32 = u_xlat20.y;
        let x_1407 : f32 = u_xlat47.x;
        let x_1409 : f32 = u_xlat68;
        u_xlat68 = ((x_1405 * x_1407) + x_1409);
        let x_1412 : vec4<f32> = u_xlat16;
        let x_1413 : vec2<f32> = vec2<f32>(x_1412.x, x_1412.y);
        let x_1415 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1413.x, x_1413.y, x_1415);
        let x_1422 : vec3<f32> = txVec19;
        let x_1424 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1422.xy, x_1422.z);
        u_xlat47.x = x_1424;
        let x_1427 : f32 = u_xlat20.z;
        let x_1429 : f32 = u_xlat47.x;
        let x_1431 : f32 = u_xlat68;
        u_xlat68 = ((x_1427 * x_1429) + x_1431);
        let x_1434 : vec4<f32> = u_xlat17;
        let x_1435 : vec2<f32> = vec2<f32>(x_1434.z, x_1434.w);
        let x_1437 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1435.x, x_1435.y, x_1437);
        let x_1444 : vec3<f32> = txVec20;
        let x_1446 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1444.xy, x_1444.z);
        u_xlat47.x = x_1446;
        let x_1449 : f32 = u_xlat20.w;
        let x_1451 : f32 = u_xlat47.x;
        let x_1453 : f32 = u_xlat68;
        u_xlat68 = ((x_1449 * x_1451) + x_1453);
        let x_1456 : vec4<f32> = u_xlat18;
        let x_1457 : vec2<f32> = vec2<f32>(x_1456.x, x_1456.y);
        let x_1459 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1457.x, x_1457.y, x_1459);
        let x_1466 : vec3<f32> = txVec21;
        let x_1468 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1466.xy, x_1466.z);
        u_xlat47.x = x_1468;
        let x_1471 : f32 = u_xlat21.x;
        let x_1473 : f32 = u_xlat47.x;
        let x_1475 : f32 = u_xlat68;
        u_xlat68 = ((x_1471 * x_1473) + x_1475);
        let x_1478 : vec4<f32> = u_xlat18;
        let x_1479 : vec2<f32> = vec2<f32>(x_1478.z, x_1478.w);
        let x_1481 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1479.x, x_1479.y, x_1481);
        let x_1488 : vec3<f32> = txVec22;
        let x_1490 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1488.xy, x_1488.z);
        u_xlat47.x = x_1490;
        let x_1493 : f32 = u_xlat21.y;
        let x_1495 : f32 = u_xlat47.x;
        let x_1497 : f32 = u_xlat68;
        u_xlat68 = ((x_1493 * x_1495) + x_1497);
        let x_1500 : vec2<f32> = u_xlat32;
        let x_1502 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1500.x, x_1500.y, x_1502);
        let x_1509 : vec3<f32> = txVec23;
        let x_1511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1509.xy, x_1509.z);
        u_xlat47.x = x_1511;
        let x_1514 : f32 = u_xlat21.z;
        let x_1516 : f32 = u_xlat47.x;
        let x_1518 : f32 = u_xlat68;
        u_xlat68 = ((x_1514 * x_1516) + x_1518);
        let x_1521 : vec2<f32> = u_xlat60;
        let x_1523 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1521.x, x_1521.y, x_1523);
        let x_1530 : vec3<f32> = txVec24;
        let x_1532 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1530.xy, x_1530.z);
        u_xlat47.x = x_1532;
        let x_1535 : f32 = u_xlat21.w;
        let x_1537 : f32 = u_xlat47.x;
        let x_1539 : f32 = u_xlat68;
        u_xlat68 = ((x_1535 * x_1537) + x_1539);
        let x_1542 : vec4<f32> = u_xlat13;
        let x_1543 : vec2<f32> = vec2<f32>(x_1542.x, x_1542.y);
        let x_1545 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1543.x, x_1543.y, x_1545);
        let x_1552 : vec3<f32> = txVec25;
        let x_1554 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1552.xy, x_1552.z);
        u_xlat47.x = x_1554;
        let x_1557 : f32 = u_xlat9.x;
        let x_1559 : f32 = u_xlat47.x;
        let x_1561 : f32 = u_xlat68;
        u_xlat68 = ((x_1557 * x_1559) + x_1561);
        let x_1564 : vec4<f32> = u_xlat13;
        let x_1565 : vec2<f32> = vec2<f32>(x_1564.z, x_1564.w);
        let x_1567 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1565.x, x_1565.y, x_1567);
        let x_1574 : vec3<f32> = txVec26;
        let x_1576 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1574.xy, x_1574.z);
        u_xlat47.x = x_1576;
        let x_1579 : f32 = u_xlat9.y;
        let x_1581 : f32 = u_xlat47.x;
        let x_1583 : f32 = u_xlat68;
        u_xlat68 = ((x_1579 * x_1581) + x_1583);
        let x_1586 : vec2<f32> = u_xlat55;
        let x_1588 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1586.x, x_1586.y, x_1588);
        let x_1595 : vec3<f32> = txVec27;
        let x_1597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1595.xy, x_1595.z);
        u_xlat47.x = x_1597;
        let x_1600 : f32 = u_xlat9.z;
        let x_1602 : f32 = u_xlat47.x;
        let x_1604 : f32 = u_xlat68;
        u_xlat68 = ((x_1600 * x_1602) + x_1604);
        let x_1607 : vec4<f32> = u_xlat3;
        let x_1608 : vec2<f32> = vec2<f32>(x_1607.x, x_1607.y);
        let x_1610 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1608.x, x_1608.y, x_1610);
        let x_1617 : vec3<f32> = txVec28;
        let x_1619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1617.xy, x_1617.z);
        u_xlat3.x = x_1619;
        let x_1622 : f32 = u_xlat9.w;
        let x_1624 : f32 = u_xlat3.x;
        let x_1626 : f32 = u_xlat68;
        u_xlat67 = ((x_1622 * x_1624) + x_1626);
      }
    }
  } else {
    let x_1630 : vec3<f32> = u_xlat2;
    let x_1631 : vec2<f32> = vec2<f32>(x_1630.x, x_1630.y);
    let x_1633 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1631.x, x_1631.y, x_1633);
    let x_1640 : vec3<f32> = txVec29;
    let x_1642 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1640.xy, x_1640.z);
    u_xlat67 = x_1642;
  }
  let x_1644 : f32 = x_362.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1644) + 1.0f);
  let x_1648 : f32 = u_xlat67;
  let x_1650 : f32 = x_362.x_MainLightShadowParams.x;
  let x_1653 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1648 * x_1650) + x_1653);
  let x_1657 : f32 = u_xlat2.z;
  u_xlatb24 = (0.0f >= x_1657);
  let x_1661 : f32 = u_xlat2.z;
  u_xlatb46 = (x_1661 >= 1.0f);
  let x_1663 : bool = u_xlatb46;
  let x_1664 : bool = u_xlatb24;
  u_xlatb24 = (x_1663 | x_1664);
  let x_1666 : bool = u_xlatb24;
  let x_1667 : f32 = u_xlat67;
  u_xlat67 = select(x_1667, 1.0f, x_1666);
  let x_1669 : vec3<f32> = u_xlat1;
  let x_1671 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat1.x = dot(x_1669, -(vec3<f32>(x_1671.x, x_1671.y, x_1671.z)));
  let x_1677 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1677, 0.0f, 1.0f);
  let x_1681 : f32 = u_xlat67;
  let x_1685 : vec4<f32> = x_158.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1681, x_1681, x_1681) * vec3<f32>(x_1685.x, x_1685.y, x_1685.z));
  let x_1688 : vec3<f32> = u_xlat23;
  let x_1689 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1688 * vec3<f32>(x_1689.x, x_1689.x, x_1689.x));
  let x_1692 : vec3<f32> = u_xlat1;
  let x_1693 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1692 * vec3<f32>(x_1693.x, x_1693.y, x_1693.z));
  let x_1697 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1697 < 0.0f);
  let x_1701 : f32 = x_95.unity_LODFade.x;
  u_xlat24 = (x_1701 + 1.0f);
  let x_1703 : bool = u_xlatb67;
  if (x_1703) {
    let x_1707 : f32 = u_xlat24;
    x_1704 = x_1707;
  } else {
    let x_1710 : f32 = x_95.unity_LODFade.x;
    x_1704 = x_1710;
  }
  let x_1711 : f32 = x_1704;
  u_xlat67 = x_1711;
  let x_1712 : f32 = u_xlat67;
  u_xlatb24 = (0.5f >= x_1712);
  let x_1714 : vec3<f32> = u_xlat5;
  let x_1717 : vec4<f32> = x_158.x_ScreenParams;
  let x_1719 : vec3<f32> = (abs(x_1714) * vec3<f32>(x_1717.x, x_1717.y, x_1717.x));
  let x_1720 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1719.x, x_1719.y, x_1719.z, x_1720.w);
  let x_1725 : vec4<f32> = u_xlat3;
  u_xlatu3 = vec3<u32>(vec3<f32>(x_1725.x, x_1725.y, x_1725.z));
  let x_1730 : u32 = u_xlatu3.z;
  u_xlatu46 = (x_1730 * 1025u);
  let x_1734 : u32 = u_xlatu46;
  u_xlatu68 = (x_1734 >> 6u);
  let x_1738 : u32 = u_xlatu68;
  let x_1739 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1738 ^ x_1739));
  let x_1742 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1742) * 9u);
  let x_1746 : u32 = u_xlatu46;
  u_xlatu68 = (x_1746 >> 11u);
  let x_1749 : u32 = u_xlatu68;
  let x_1750 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1749 ^ x_1750));
  let x_1753 : i32 = u_xlati46;
  u_xlati46 = (x_1753 * 32769i);
  let x_1756 : i32 = u_xlati46;
  let x_1759 : u32 = u_xlatu3.y;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1756) ^ x_1759));
  let x_1762 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1762) * 1025u);
  let x_1765 : u32 = u_xlatu46;
  u_xlatu68 = (x_1765 >> 6u);
  let x_1767 : u32 = u_xlatu68;
  let x_1768 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1767 ^ x_1768));
  let x_1771 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1771) * 9u);
  let x_1774 : u32 = u_xlatu46;
  u_xlatu68 = (x_1774 >> 11u);
  let x_1776 : u32 = u_xlatu68;
  let x_1777 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1776 ^ x_1777));
  let x_1780 : i32 = u_xlati46;
  u_xlati46 = (x_1780 * 32769i);
  let x_1782 : i32 = u_xlati46;
  let x_1785 : u32 = u_xlatu3.x;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1782) ^ x_1785));
  let x_1788 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1788) * 1025u);
  let x_1791 : u32 = u_xlatu46;
  u_xlatu68 = (x_1791 >> 6u);
  let x_1793 : u32 = u_xlatu68;
  let x_1794 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1793 ^ x_1794));
  let x_1797 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1797) * 9u);
  let x_1800 : u32 = u_xlatu46;
  u_xlatu68 = (x_1800 >> 11u);
  let x_1802 : u32 = u_xlatu68;
  let x_1803 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1802 ^ x_1803));
  let x_1806 : i32 = u_xlati46;
  u_xlati46 = (x_1806 * 32769i);
  param = 1065353216i;
  let x_1813 : i32 = u_xlati46;
  param_1 = x_1813;
  param_2 = 0i;
  param_3 = 23i;
  let x_1816 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat46 = bitcast<f32>(x_1816);
  let x_1818 : f32 = u_xlat46;
  u_xlat46 = (x_1818 + -1.0f);
  let x_1820 : f32 = u_xlat46;
  u_xlat68 = (-(x_1820) + 1.0f);
  let x_1823 : bool = u_xlatb24;
  let x_1824 : f32 = u_xlat46;
  let x_1825 : f32 = u_xlat68;
  u_xlat24 = select(x_1825, x_1824, x_1823);
  let x_1827 : f32 = u_xlat67;
  let x_1829 : f32 = u_xlat24;
  u_xlat67 = ((x_1827 * 2.0f) + -(x_1829));
  let x_1832 : f32 = u_xlat67;
  let x_1834 : f32 = u_xlat6.w;
  u_xlat24 = (x_1832 * x_1834);
  let x_1836 : f32 = u_xlat24;
  u_xlatb46 = (x_1836 >= 0.400000006f);
  let x_1839 : bool = u_xlatb46;
  let x_1840 : f32 = u_xlat24;
  u_xlat46 = select(0.0f, x_1840, x_1839);
  let x_1843 : f32 = u_xlat6.w;
  let x_1844 : f32 = u_xlat67;
  u_xlat67 = ((x_1843 * x_1844) + -0.400000006f);
  let x_1848 : f32 = u_xlat24;
  u_xlat68 = dpdxCoarse(x_1848);
  let x_1850 : f32 = u_xlat24;
  u_xlat24 = dpdyCoarse(x_1850);
  let x_1852 : f32 = u_xlat24;
  let x_1854 : f32 = u_xlat68;
  u_xlat24 = (abs(x_1852) + abs(x_1854));
  let x_1857 : f32 = u_xlat24;
  u_xlat24 = max(x_1857, 0.0001f);
  let x_1860 : f32 = u_xlat67;
  let x_1861 : f32 = u_xlat24;
  u_xlat67 = (x_1860 / x_1861);
  let x_1863 : f32 = u_xlat67;
  u_xlat67 = (x_1863 + 0.5f);
  let x_1865 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1865, 0.0f, 1.0f);
  let x_1868 : f32 = x_158.x_AlphaToMaskAvailable;
  u_xlatb24 = !((x_1868 == 0.0f));
  let x_1870 : bool = u_xlatb24;
  let x_1871 : f32 = u_xlat67;
  let x_1872 : f32 = u_xlat46;
  u_xlat67 = select(x_1872, x_1871, x_1870);
  let x_1874 : f32 = u_xlat67;
  u_xlat46 = (x_1874 + -0.0001f);
  let x_1877 : f32 = u_xlat46;
  u_xlatb46 = (x_1877 < 0.0f);
  let x_1879 : bool = u_xlatb46;
  if (((select(0i, 1i, x_1879) * -1i) != 0i)) {
    discard;
  }
  let x_1887 : vec3<f32> = u_xlat22;
  let x_1888 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_1887 * vec3<f32>(x_1888.y, x_1888.y, x_1888.y));
  let x_1891 : vec3<f32> = u_xlat30;
  let x_1893 : vec4<f32> = vs_INTERP2;
  let x_1896 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1891.x, x_1891.x, x_1891.x) * vec3<f32>(x_1893.x, x_1893.y, x_1893.z)) + x_1896);
  let x_1898 : vec3<f32> = u_xlat30;
  let x_1900 : vec3<f32> = vs_INTERP1;
  let x_1902 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1898.z, x_1898.z, x_1898.z) * x_1900) + x_1902);
  let x_1904 : vec3<f32> = u_xlat22;
  let x_1905 : vec3<f32> = u_xlat22;
  u_xlat46 = dot(x_1904, x_1905);
  let x_1907 : f32 = u_xlat46;
  u_xlat46 = inverseSqrt(x_1907);
  let x_1909 : vec3<f32> = u_xlat22;
  let x_1910 : f32 = u_xlat46;
  u_xlat22 = (x_1909 * vec3<f32>(x_1910, x_1910, x_1910));
  let x_1914 : f32 = vs_INTERP0.y;
  let x_1916 : f32 = x_158.unity_MatrixV[1i].z;
  u_xlat46 = (x_1914 * x_1916);
  let x_1919 : f32 = x_158.unity_MatrixV[0i].z;
  let x_1921 : f32 = vs_INTERP0.x;
  let x_1923 : f32 = u_xlat46;
  u_xlat46 = ((x_1919 * x_1921) + x_1923);
  let x_1926 : f32 = x_158.unity_MatrixV[2i].z;
  let x_1928 : f32 = vs_INTERP0.z;
  let x_1930 : f32 = u_xlat46;
  u_xlat46 = ((x_1926 * x_1928) + x_1930);
  let x_1932 : f32 = u_xlat46;
  let x_1934 : f32 = x_158.unity_MatrixV[3i].z;
  u_xlat46 = (x_1932 + x_1934);
  let x_1936 : f32 = u_xlat46;
  let x_1939 : f32 = x_158.x_ProjectionParams.y;
  u_xlat46 = (-(x_1936) + -(x_1939));
  let x_1942 : f32 = u_xlat46;
  u_xlat46 = max(x_1942, 0.0f);
  let x_1944 : f32 = u_xlat46;
  let x_1947 : f32 = x_158.unity_FogParams.x;
  u_xlat46 = (x_1944 * x_1947);
  let x_1956 : vec2<f32> = vs_INTERP5;
  let x_1958 : f32 = x_158.x_GlobalMipBias.x;
  let x_1959 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1956, x_1958);
  u_xlat3 = x_1959;
  let x_1964 : vec2<f32> = vs_INTERP5;
  let x_1966 : f32 = x_158.x_GlobalMipBias.x;
  let x_1967 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1964, x_1966);
  u_xlat5 = vec3<f32>(x_1967.x, x_1967.y, x_1967.z);
  let x_1969 : vec4<f32> = u_xlat3;
  let x_1972 : vec3<f32> = (vec3<f32>(x_1969.x, x_1969.y, x_1969.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1973 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1972.x, x_1972.y, x_1972.z, x_1973.w);
  let x_1975 : vec3<f32> = u_xlat22;
  let x_1976 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(x_1975, vec3<f32>(x_1976.x, x_1976.y, x_1976.z));
  let x_1979 : f32 = u_xlat68;
  u_xlat68 = (x_1979 + 0.5f);
  let x_1981 : f32 = u_xlat68;
  let x_1983 : vec3<f32> = u_xlat5;
  let x_1984 : vec3<f32> = (vec3<f32>(x_1981, x_1981, x_1981) * x_1983);
  let x_1985 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1984.x, x_1984.y, x_1984.z, x_1985.w);
  let x_1988 : f32 = u_xlat3.w;
  u_xlat68 = max(x_1988, 0.0001f);
  let x_1990 : vec4<f32> = u_xlat3;
  let x_1992 : f32 = u_xlat68;
  let x_1994 : vec3<f32> = (vec3<f32>(x_1990.x, x_1990.y, x_1990.z) / vec3<f32>(x_1992, x_1992, x_1992));
  let x_1995 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1994.x, x_1994.y, x_1994.z, x_1995.w);
  let x_1998 : vec4<f32> = x_158.x_ScaledScreenParams;
  let x_1999 : vec2<f32> = vec2<f32>(x_1998.x, x_1998.y);
  let x_2003 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1999.x, x_1999.y));
  let x_2004 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_2003.x, x_2003.y, x_2004.z);
  let x_2006 : vec3<f32> = u_xlat5;
  let x_2008 : vec4<f32> = hlslcc_FragCoord;
  let x_2010 : vec2<f32> = (vec2<f32>(x_2006.x, x_2006.y) * vec2<f32>(x_2008.x, x_2008.y));
  let x_2011 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_2010.x, x_2010.y, x_2011.z);
  let x_2014 : f32 = u_xlat5.y;
  let x_2017 : f32 = x_158.x_ScaleBiasRt.x;
  let x_2020 : f32 = x_158.x_ScaleBiasRt.y;
  u_xlat68 = ((x_2014 * x_2017) + x_2020);
  let x_2022 : f32 = u_xlat68;
  u_xlat5.z = (-(x_2022) + 1.0f);
  let x_2027 : f32 = u_xlat8.x;
  u_xlat8.x = x_2027;
  let x_2030 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2030, 0.0f, 1.0f);
  let x_2033 : f32 = u_xlat67;
  u_xlat67 = x_2033;
  let x_2034 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2034, 0.0f, 1.0f);
  let x_2036 : vec4<f32> = u_xlat7;
  let x_2040 : vec3<f32> = (vec3<f32>(x_2036.x, x_2036.y, x_2036.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2041 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2040.x, x_2040.y, x_2040.z, x_2041.w);
  let x_2044 : f32 = u_xlat8.x;
  u_xlat68 = (-(x_2044) + 1.0f);
  let x_2048 : f32 = u_xlat68;
  let x_2049 : f32 = u_xlat68;
  u_xlat69 = (x_2048 * x_2049);
  let x_2051 : f32 = u_xlat69;
  u_xlat69 = max(x_2051, 0.0078125f);
  let x_2054 : f32 = u_xlat69;
  let x_2055 : f32 = u_xlat69;
  u_xlat70 = (x_2054 * x_2055);
  let x_2059 : f32 = u_xlat8.x;
  u_xlat27 = (x_2059 + 0.040000021f);
  let x_2062 : f32 = u_xlat27;
  u_xlat27 = min(x_2062, 1.0f);
  let x_2065 : f32 = u_xlat69;
  u_xlat71 = ((x_2065 * 4.0f) + 2.0f);
  let x_2074 : vec3<f32> = u_xlat5;
  let x_2077 : f32 = x_158.x_GlobalMipBias.x;
  let x_2078 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2074.x, x_2074.z), x_2077);
  u_xlat5.x = x_2078.x;
  let x_2083 : f32 = u_xlat5.x;
  u_xlat49 = (x_2083 + -1.0f);
  let x_2087 : f32 = x_158.x_AmbientOcclusionParam.w;
  let x_2088 : f32 = u_xlat49;
  u_xlat49 = ((x_2087 * x_2088) + 1.0f);
  let x_2092 : f32 = u_xlat5.x;
  let x_2094 : f32 = vs_INTERP4.w;
  u_xlat5.x = min(x_2092, x_2094);
  let x_2097 : bool = u_xlatb0;
  if (x_2097) {
    let x_2101 : f32 = x_362.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2101 == 1.0f);
    let x_2103 : bool = u_xlatb0;
    if (x_2103) {
      let x_2107 : vec4<f32> = vs_INTERP9;
      let x_2110 : vec4<f32> = x_362.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2107.x, x_2107.y, x_2107.x, x_2107.y) + x_2110);
      let x_2113 : vec4<f32> = u_xlat7;
      let x_2114 : vec2<f32> = vec2<f32>(x_2113.x, x_2113.y);
      let x_2116 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2114.x, x_2114.y, x_2116);
      let x_2123 : vec3<f32> = txVec30;
      let x_2125 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2123.xy, x_2123.z);
      u_xlat8.x = x_2125;
      let x_2128 : vec4<f32> = u_xlat7;
      let x_2129 : vec2<f32> = vec2<f32>(x_2128.z, x_2128.w);
      let x_2131 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2129.x, x_2129.y, x_2131);
      let x_2138 : vec3<f32> = txVec31;
      let x_2140 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2138.xy, x_2138.z);
      u_xlat8.y = x_2140;
      let x_2142 : vec4<f32> = vs_INTERP9;
      let x_2145 : vec4<f32> = x_362.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2142.x, x_2142.y, x_2142.x, x_2142.y) + x_2145);
      let x_2148 : vec4<f32> = u_xlat7;
      let x_2149 : vec2<f32> = vec2<f32>(x_2148.x, x_2148.y);
      let x_2151 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2149.x, x_2149.y, x_2151);
      let x_2158 : vec3<f32> = txVec32;
      let x_2160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2158.xy, x_2158.z);
      u_xlat8.z = x_2160;
      let x_2163 : vec4<f32> = u_xlat7;
      let x_2164 : vec2<f32> = vec2<f32>(x_2163.z, x_2163.w);
      let x_2166 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2164.x, x_2164.y, x_2166);
      let x_2173 : vec3<f32> = txVec33;
      let x_2175 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2173.xy, x_2173.z);
      u_xlat8.w = x_2175;
      let x_2177 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2177, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2183 : f32 = x_362.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2183 == 2.0f);
      let x_2185 : bool = u_xlatb72;
      if (x_2185) {
        let x_2188 : vec4<f32> = vs_INTERP9;
        let x_2191 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2194 : vec2<f32> = ((vec2<f32>(x_2188.x, x_2188.y) * vec2<f32>(x_2191.z, x_2191.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2195 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2194.x, x_2194.y, x_2195.z, x_2195.w);
        let x_2197 : vec4<f32> = u_xlat7;
        let x_2199 : vec2<f32> = floor(vec2<f32>(x_2197.x, x_2197.y));
        let x_2200 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2199.x, x_2199.y, x_2200.z, x_2200.w);
        let x_2203 : vec4<f32> = vs_INTERP9;
        let x_2206 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2209 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2203.x, x_2203.y) * vec2<f32>(x_2206.z, x_2206.w)) + -(vec2<f32>(x_2209.x, x_2209.y)));
        let x_2213 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2213.x, x_2213.x, x_2213.y, x_2213.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2216 : vec4<f32> = u_xlat8;
        let x_2218 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2216.x, x_2216.x, x_2216.z, x_2216.z) * vec4<f32>(x_2218.x, x_2218.x, x_2218.z, x_2218.z));
        let x_2221 : vec4<f32> = u_xlat9;
        let x_2223 : vec2<f32> = (vec2<f32>(x_2221.y, x_2221.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2224 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2223.x, x_2224.y, x_2223.y, x_2224.w);
        let x_2226 : vec4<f32> = u_xlat9;
        let x_2229 : vec2<f32> = u_xlat51;
        let x_2231 : vec2<f32> = ((vec2<f32>(x_2226.x, x_2226.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2229));
        let x_2232 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2231.x, x_2231.y, x_2232.z, x_2232.w);
        let x_2235 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_2235) + vec2<f32>(1.0f, 1.0f));
        let x_2238 : vec2<f32> = u_xlat51;
        let x_2239 : vec2<f32> = min(x_2238, vec2<f32>(0.0f, 0.0f));
        let x_2240 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2239.x, x_2239.y, x_2240.z, x_2240.w);
        let x_2242 : vec4<f32> = u_xlat10;
        let x_2245 : vec4<f32> = u_xlat10;
        let x_2248 : vec2<f32> = u_xlat53;
        let x_2249 : vec2<f32> = ((-(vec2<f32>(x_2242.x, x_2242.y)) * vec2<f32>(x_2245.x, x_2245.y)) + x_2248);
        let x_2250 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2249.x, x_2249.y, x_2250.z, x_2250.w);
        let x_2252 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_2252, vec2<f32>(0.0f, 0.0f));
        let x_2254 : vec2<f32> = u_xlat51;
        let x_2256 : vec2<f32> = u_xlat51;
        let x_2258 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_2254) * x_2256) + vec2<f32>(x_2258.y, x_2258.w));
        let x_2261 : vec4<f32> = u_xlat10;
        let x_2263 : vec2<f32> = (vec2<f32>(x_2261.x, x_2261.y) + vec2<f32>(1.0f, 1.0f));
        let x_2264 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2263.x, x_2263.y, x_2264.z, x_2264.w);
        let x_2266 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2266 + vec2<f32>(1.0f, 1.0f));
        let x_2268 : vec4<f32> = u_xlat9;
        let x_2270 : vec2<f32> = (vec2<f32>(x_2268.x, x_2268.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2271 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2270.x, x_2270.y, x_2271.z, x_2271.w);
        let x_2273 : vec2<f32> = u_xlat53;
        let x_2274 : vec2<f32> = (x_2273 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2275 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2274.x, x_2274.y, x_2275.z, x_2275.w);
        let x_2277 : vec4<f32> = u_xlat10;
        let x_2279 : vec2<f32> = (vec2<f32>(x_2277.x, x_2277.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2280 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2279.x, x_2279.y, x_2280.z, x_2280.w);
        let x_2282 : vec2<f32> = u_xlat51;
        let x_2283 : vec2<f32> = (x_2282 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2284 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2283.x, x_2283.y, x_2284.z, x_2284.w);
        let x_2286 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_2286.y, x_2286.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2290 : f32 = u_xlat10.x;
        u_xlat11.z = x_2290;
        let x_2293 : f32 = u_xlat51.x;
        u_xlat11.w = x_2293;
        let x_2296 : f32 = u_xlat12.x;
        u_xlat9.z = x_2296;
        let x_2299 : f32 = u_xlat8.x;
        u_xlat9.w = x_2299;
        let x_2301 : vec4<f32> = u_xlat9;
        let x_2303 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2301.z, x_2301.w, x_2301.x, x_2301.z) + vec4<f32>(x_2303.z, x_2303.w, x_2303.x, x_2303.z));
        let x_2307 : f32 = u_xlat11.y;
        u_xlat10.z = x_2307;
        let x_2310 : f32 = u_xlat51.y;
        u_xlat10.w = x_2310;
        let x_2313 : f32 = u_xlat9.y;
        u_xlat12.z = x_2313;
        let x_2316 : f32 = u_xlat8.z;
        u_xlat12.w = x_2316;
        let x_2318 : vec4<f32> = u_xlat10;
        let x_2320 : vec4<f32> = u_xlat12;
        let x_2322 : vec3<f32> = (vec3<f32>(x_2318.z, x_2318.y, x_2318.w) + vec3<f32>(x_2320.z, x_2320.y, x_2320.w));
        let x_2323 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2322.x, x_2322.y, x_2322.z, x_2323.w);
        let x_2325 : vec4<f32> = u_xlat9;
        let x_2327 : vec4<f32> = u_xlat13;
        let x_2329 : vec3<f32> = (vec3<f32>(x_2325.x, x_2325.z, x_2325.w) / vec3<f32>(x_2327.z, x_2327.w, x_2327.y));
        let x_2330 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2329.x, x_2329.y, x_2329.z, x_2330.w);
        let x_2332 : vec4<f32> = u_xlat9;
        let x_2334 : vec3<f32> = (vec3<f32>(x_2332.x, x_2332.y, x_2332.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2335 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2334.x, x_2334.y, x_2334.z, x_2335.w);
        let x_2337 : vec4<f32> = u_xlat12;
        let x_2339 : vec4<f32> = u_xlat8;
        let x_2341 : vec3<f32> = (vec3<f32>(x_2337.z, x_2337.y, x_2337.w) / vec3<f32>(x_2339.x, x_2339.y, x_2339.z));
        let x_2342 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2341.x, x_2341.y, x_2341.z, x_2342.w);
        let x_2344 : vec4<f32> = u_xlat10;
        let x_2346 : vec3<f32> = (vec3<f32>(x_2344.x, x_2344.y, x_2344.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2347 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2346.x, x_2346.y, x_2346.z, x_2347.w);
        let x_2349 : vec4<f32> = u_xlat9;
        let x_2352 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2354 : vec3<f32> = (vec3<f32>(x_2349.y, x_2349.x, x_2349.z) * vec3<f32>(x_2352.x, x_2352.x, x_2352.x));
        let x_2355 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2354.x, x_2354.y, x_2354.z, x_2355.w);
        let x_2357 : vec4<f32> = u_xlat10;
        let x_2360 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2362 : vec3<f32> = (vec3<f32>(x_2357.x, x_2357.y, x_2357.z) * vec3<f32>(x_2360.y, x_2360.y, x_2360.y));
        let x_2363 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2362.x, x_2362.y, x_2362.z, x_2363.w);
        let x_2366 : f32 = u_xlat10.x;
        u_xlat9.w = x_2366;
        let x_2368 : vec4<f32> = u_xlat7;
        let x_2371 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2374 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2368.x, x_2368.y, x_2368.x, x_2368.y) * vec4<f32>(x_2371.x, x_2371.y, x_2371.x, x_2371.y)) + vec4<f32>(x_2374.y, x_2374.w, x_2374.x, x_2374.w));
        let x_2377 : vec4<f32> = u_xlat7;
        let x_2380 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2383 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_2377.x, x_2377.y) * vec2<f32>(x_2380.x, x_2380.y)) + vec2<f32>(x_2383.z, x_2383.w));
        let x_2387 : f32 = u_xlat9.y;
        u_xlat10.w = x_2387;
        let x_2389 : vec4<f32> = u_xlat10;
        let x_2390 : vec2<f32> = vec2<f32>(x_2389.y, x_2389.z);
        let x_2391 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2391.x, x_2390.x, x_2391.z, x_2390.y);
        let x_2393 : vec4<f32> = u_xlat7;
        let x_2396 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2399 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2393.x, x_2393.y, x_2393.x, x_2393.y) * vec4<f32>(x_2396.x, x_2396.y, x_2396.x, x_2396.y)) + vec4<f32>(x_2399.x, x_2399.y, x_2399.z, x_2399.y));
        let x_2402 : vec4<f32> = u_xlat7;
        let x_2405 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2408 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2402.x, x_2402.y, x_2402.x, x_2402.y) * vec4<f32>(x_2405.x, x_2405.y, x_2405.x, x_2405.y)) + vec4<f32>(x_2408.w, x_2408.y, x_2408.w, x_2408.z));
        let x_2411 : vec4<f32> = u_xlat7;
        let x_2414 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2417 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2411.x, x_2411.y, x_2411.x, x_2411.y) * vec4<f32>(x_2414.x, x_2414.y, x_2414.x, x_2414.y)) + vec4<f32>(x_2417.x, x_2417.w, x_2417.z, x_2417.w));
        let x_2420 : vec4<f32> = u_xlat8;
        let x_2422 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2420.x, x_2420.x, x_2420.x, x_2420.y) * vec4<f32>(x_2422.z, x_2422.w, x_2422.y, x_2422.z));
        let x_2425 : vec4<f32> = u_xlat8;
        let x_2427 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2425.y, x_2425.y, x_2425.z, x_2425.z) * x_2427);
        let x_2431 : f32 = u_xlat8.z;
        let x_2433 : f32 = u_xlat13.y;
        u_xlat72 = (x_2431 * x_2433);
        let x_2436 : vec4<f32> = u_xlat11;
        let x_2437 : vec2<f32> = vec2<f32>(x_2436.x, x_2436.y);
        let x_2439 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2437.x, x_2437.y, x_2439);
        let x_2446 : vec3<f32> = txVec34;
        let x_2448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2446.xy, x_2446.z);
        u_xlat7.x = x_2448;
        let x_2451 : vec4<f32> = u_xlat11;
        let x_2452 : vec2<f32> = vec2<f32>(x_2451.z, x_2451.w);
        let x_2454 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2452.x, x_2452.y, x_2454);
        let x_2462 : vec3<f32> = txVec35;
        let x_2464 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2462.xy, x_2462.z);
        u_xlat29 = x_2464;
        let x_2465 : f32 = u_xlat29;
        let x_2467 : f32 = u_xlat14.y;
        u_xlat29 = (x_2465 * x_2467);
        let x_2470 : f32 = u_xlat14.x;
        let x_2472 : f32 = u_xlat7.x;
        let x_2474 : f32 = u_xlat29;
        u_xlat7.x = ((x_2470 * x_2472) + x_2474);
        let x_2478 : vec2<f32> = u_xlat51;
        let x_2480 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2478.x, x_2478.y, x_2480);
        let x_2487 : vec3<f32> = txVec36;
        let x_2489 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2487.xy, x_2487.z);
        u_xlat29 = x_2489;
        let x_2491 : f32 = u_xlat14.z;
        let x_2492 : f32 = u_xlat29;
        let x_2495 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2491 * x_2492) + x_2495);
        let x_2499 : vec4<f32> = u_xlat10;
        let x_2500 : vec2<f32> = vec2<f32>(x_2499.x, x_2499.y);
        let x_2502 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2500.x, x_2500.y, x_2502);
        let x_2509 : vec3<f32> = txVec37;
        let x_2511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2509.xy, x_2509.z);
        u_xlat29 = x_2511;
        let x_2513 : f32 = u_xlat14.w;
        let x_2514 : f32 = u_xlat29;
        let x_2517 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2513 * x_2514) + x_2517);
        let x_2521 : vec4<f32> = u_xlat12;
        let x_2522 : vec2<f32> = vec2<f32>(x_2521.x, x_2521.y);
        let x_2524 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2522.x, x_2522.y, x_2524);
        let x_2531 : vec3<f32> = txVec38;
        let x_2533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2531.xy, x_2531.z);
        u_xlat29 = x_2533;
        let x_2535 : f32 = u_xlat15.x;
        let x_2536 : f32 = u_xlat29;
        let x_2539 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2535 * x_2536) + x_2539);
        let x_2543 : vec4<f32> = u_xlat12;
        let x_2544 : vec2<f32> = vec2<f32>(x_2543.z, x_2543.w);
        let x_2546 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2544.x, x_2544.y, x_2546);
        let x_2553 : vec3<f32> = txVec39;
        let x_2555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2553.xy, x_2553.z);
        u_xlat29 = x_2555;
        let x_2557 : f32 = u_xlat15.y;
        let x_2558 : f32 = u_xlat29;
        let x_2561 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2557 * x_2558) + x_2561);
        let x_2565 : vec4<f32> = u_xlat10;
        let x_2566 : vec2<f32> = vec2<f32>(x_2565.z, x_2565.w);
        let x_2568 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2566.x, x_2566.y, x_2568);
        let x_2575 : vec3<f32> = txVec40;
        let x_2577 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2575.xy, x_2575.z);
        u_xlat29 = x_2577;
        let x_2579 : f32 = u_xlat15.z;
        let x_2580 : f32 = u_xlat29;
        let x_2583 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2579 * x_2580) + x_2583);
        let x_2587 : vec4<f32> = u_xlat9;
        let x_2588 : vec2<f32> = vec2<f32>(x_2587.x, x_2587.y);
        let x_2590 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2588.x, x_2588.y, x_2590);
        let x_2597 : vec3<f32> = txVec41;
        let x_2599 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2597.xy, x_2597.z);
        u_xlat29 = x_2599;
        let x_2601 : f32 = u_xlat15.w;
        let x_2602 : f32 = u_xlat29;
        let x_2605 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2601 * x_2602) + x_2605);
        let x_2609 : vec4<f32> = u_xlat9;
        let x_2610 : vec2<f32> = vec2<f32>(x_2609.z, x_2609.w);
        let x_2612 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2610.x, x_2610.y, x_2612);
        let x_2619 : vec3<f32> = txVec42;
        let x_2621 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2619.xy, x_2619.z);
        u_xlat29 = x_2621;
        let x_2622 : f32 = u_xlat72;
        let x_2623 : f32 = u_xlat29;
        let x_2626 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_2622 * x_2623) + x_2626);
      } else {
        let x_2630 : vec4<f32> = vs_INTERP9;
        let x_2633 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2636 : vec2<f32> = ((vec2<f32>(x_2630.x, x_2630.y) * vec2<f32>(x_2633.z, x_2633.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2637 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2636.x, x_2636.y, x_2637.z, x_2637.w);
        let x_2639 : vec4<f32> = u_xlat7;
        let x_2641 : vec2<f32> = floor(vec2<f32>(x_2639.x, x_2639.y));
        let x_2642 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2641.x, x_2641.y, x_2642.z, x_2642.w);
        let x_2644 : vec4<f32> = vs_INTERP9;
        let x_2647 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2650 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2644.x, x_2644.y) * vec2<f32>(x_2647.z, x_2647.w)) + -(vec2<f32>(x_2650.x, x_2650.y)));
        let x_2654 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2654.x, x_2654.x, x_2654.y, x_2654.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2657 : vec4<f32> = u_xlat8;
        let x_2659 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2657.x, x_2657.x, x_2657.z, x_2657.z) * vec4<f32>(x_2659.x, x_2659.x, x_2659.z, x_2659.z));
        let x_2662 : vec4<f32> = u_xlat9;
        let x_2664 : vec2<f32> = (vec2<f32>(x_2662.y, x_2662.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2665 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2665.x, x_2664.x, x_2665.z, x_2664.y);
        let x_2667 : vec4<f32> = u_xlat9;
        let x_2670 : vec2<f32> = u_xlat51;
        let x_2672 : vec2<f32> = ((vec2<f32>(x_2667.x, x_2667.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2670));
        let x_2673 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2672.x, x_2673.y, x_2672.y, x_2673.w);
        let x_2675 : vec2<f32> = u_xlat51;
        let x_2677 : vec2<f32> = (-(x_2675) + vec2<f32>(1.0f, 1.0f));
        let x_2678 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2677.x, x_2677.y, x_2678.z, x_2678.w);
        let x_2680 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_2680, vec2<f32>(0.0f, 0.0f));
        let x_2682 : vec2<f32> = u_xlat53;
        let x_2684 : vec2<f32> = u_xlat53;
        let x_2686 : vec4<f32> = u_xlat9;
        let x_2688 : vec2<f32> = ((-(x_2682) * x_2684) + vec2<f32>(x_2686.x, x_2686.y));
        let x_2689 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2688.x, x_2688.y, x_2689.z, x_2689.w);
        let x_2691 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_2691, vec2<f32>(0.0f, 0.0f));
        let x_2693 : vec2<f32> = u_xlat53;
        let x_2695 : vec2<f32> = u_xlat53;
        let x_2697 : vec4<f32> = u_xlat8;
        let x_2699 : vec2<f32> = ((-(x_2693) * x_2695) + vec2<f32>(x_2697.y, x_2697.w));
        let x_2700 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2699.x, x_2700.y, x_2699.y);
        let x_2702 : vec4<f32> = u_xlat9;
        let x_2704 : vec2<f32> = (vec2<f32>(x_2702.x, x_2702.y) + vec2<f32>(2.0f, 2.0f));
        let x_2705 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2704.x, x_2704.y, x_2705.z, x_2705.w);
        let x_2707 : vec3<f32> = u_xlat30;
        let x_2709 : vec2<f32> = (vec2<f32>(x_2707.x, x_2707.z) + vec2<f32>(2.0f, 2.0f));
        let x_2710 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2710.x, x_2709.x, x_2710.z, x_2709.y);
        let x_2713 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2713 * 0.081632003f);
        let x_2716 : vec4<f32> = u_xlat8;
        let x_2718 : vec3<f32> = (vec3<f32>(x_2716.z, x_2716.x, x_2716.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2719 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2718.x, x_2718.y, x_2718.z, x_2719.w);
        let x_2721 : vec4<f32> = u_xlat9;
        let x_2723 : vec2<f32> = (vec2<f32>(x_2721.x, x_2721.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2724 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2723.x, x_2723.y, x_2724.z, x_2724.w);
        let x_2727 : f32 = u_xlat12.y;
        u_xlat11.x = x_2727;
        let x_2729 : vec2<f32> = u_xlat51;
        let x_2732 : vec2<f32> = ((vec2<f32>(x_2729.x, x_2729.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2733 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2733.x, x_2732.x, x_2733.z, x_2732.y);
        let x_2735 : vec2<f32> = u_xlat51;
        let x_2738 : vec2<f32> = ((vec2<f32>(x_2735.x, x_2735.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2739 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2738.x, x_2739.y, x_2738.y, x_2739.w);
        let x_2742 : f32 = u_xlat8.x;
        u_xlat9.y = x_2742;
        let x_2745 : f32 = u_xlat10.y;
        u_xlat9.w = x_2745;
        let x_2747 : vec4<f32> = u_xlat9;
        let x_2748 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2747 + x_2748);
        let x_2750 : vec2<f32> = u_xlat51;
        let x_2753 : vec2<f32> = ((vec2<f32>(x_2750.y, x_2750.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2754 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2754.x, x_2753.x, x_2754.z, x_2753.y);
        let x_2756 : vec2<f32> = u_xlat51;
        let x_2759 : vec2<f32> = ((vec2<f32>(x_2756.y, x_2756.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2760 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2759.x, x_2760.y, x_2759.y, x_2760.w);
        let x_2763 : f32 = u_xlat8.y;
        u_xlat10.y = x_2763;
        let x_2765 : vec4<f32> = u_xlat10;
        let x_2766 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2765 + x_2766);
        let x_2768 : vec4<f32> = u_xlat9;
        let x_2769 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2768 / x_2769);
        let x_2771 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2771 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2773 : vec4<f32> = u_xlat10;
        let x_2774 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2773 / x_2774);
        let x_2776 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2776 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2778 : vec4<f32> = u_xlat9;
        let x_2781 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2778.w, x_2778.x, x_2778.y, x_2778.z) * vec4<f32>(x_2781.x, x_2781.x, x_2781.x, x_2781.x));
        let x_2784 : vec4<f32> = u_xlat10;
        let x_2787 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2784.x, x_2784.w, x_2784.y, x_2784.z) * vec4<f32>(x_2787.y, x_2787.y, x_2787.y, x_2787.y));
        let x_2790 : vec4<f32> = u_xlat9;
        let x_2791 : vec3<f32> = vec3<f32>(x_2790.y, x_2790.z, x_2790.w);
        let x_2792 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2791.x, x_2792.y, x_2791.y, x_2791.z);
        let x_2795 : f32 = u_xlat10.x;
        u_xlat12.y = x_2795;
        let x_2797 : vec4<f32> = u_xlat7;
        let x_2800 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2803 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2797.x, x_2797.y, x_2797.x, x_2797.y) * vec4<f32>(x_2800.x, x_2800.y, x_2800.x, x_2800.y)) + vec4<f32>(x_2803.x, x_2803.y, x_2803.z, x_2803.y));
        let x_2806 : vec4<f32> = u_xlat7;
        let x_2809 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2812 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_2806.x, x_2806.y) * vec2<f32>(x_2809.x, x_2809.y)) + vec2<f32>(x_2812.w, x_2812.y));
        let x_2816 : f32 = u_xlat12.y;
        u_xlat9.y = x_2816;
        let x_2819 : f32 = u_xlat10.z;
        u_xlat12.y = x_2819;
        let x_2821 : vec4<f32> = u_xlat7;
        let x_2824 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2827 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2821.x, x_2821.y, x_2821.x, x_2821.y) * vec4<f32>(x_2824.x, x_2824.y, x_2824.x, x_2824.y)) + vec4<f32>(x_2827.x, x_2827.y, x_2827.z, x_2827.y));
        let x_2830 : vec4<f32> = u_xlat7;
        let x_2833 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2836 : vec4<f32> = u_xlat12;
        let x_2838 : vec2<f32> = ((vec2<f32>(x_2830.x, x_2830.y) * vec2<f32>(x_2833.x, x_2833.y)) + vec2<f32>(x_2836.w, x_2836.y));
        let x_2839 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2838.x, x_2838.y, x_2839.z, x_2839.w);
        let x_2842 : f32 = u_xlat12.y;
        u_xlat9.z = x_2842;
        let x_2844 : vec4<f32> = u_xlat7;
        let x_2847 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2850 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2844.x, x_2844.y, x_2844.x, x_2844.y) * vec4<f32>(x_2847.x, x_2847.y, x_2847.x, x_2847.y)) + vec4<f32>(x_2850.x, x_2850.y, x_2850.x, x_2850.z));
        let x_2854 : f32 = u_xlat10.w;
        u_xlat12.y = x_2854;
        let x_2856 : vec4<f32> = u_xlat7;
        let x_2859 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2862 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2856.x, x_2856.y, x_2856.x, x_2856.y) * vec4<f32>(x_2859.x, x_2859.y, x_2859.x, x_2859.y)) + vec4<f32>(x_2862.x, x_2862.y, x_2862.z, x_2862.y));
        let x_2865 : vec4<f32> = u_xlat7;
        let x_2868 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2871 : vec4<f32> = u_xlat12;
        let x_2873 : vec2<f32> = ((vec2<f32>(x_2865.x, x_2865.y) * vec2<f32>(x_2868.x, x_2868.y)) + vec2<f32>(x_2871.w, x_2871.y));
        let x_2874 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2873.x, x_2873.y, x_2874.z);
        let x_2877 : f32 = u_xlat12.y;
        u_xlat9.w = x_2877;
        let x_2880 : vec4<f32> = u_xlat7;
        let x_2883 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2886 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_2880.x, x_2880.y) * vec2<f32>(x_2883.x, x_2883.y)) + vec2<f32>(x_2886.x, x_2886.w));
        let x_2889 : vec4<f32> = u_xlat12;
        let x_2890 : vec3<f32> = vec3<f32>(x_2889.x, x_2889.z, x_2889.w);
        let x_2891 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2890.x, x_2891.y, x_2890.y, x_2890.z);
        let x_2893 : vec4<f32> = u_xlat7;
        let x_2896 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2899 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2893.x, x_2893.y, x_2893.x, x_2893.y) * vec4<f32>(x_2896.x, x_2896.y, x_2896.x, x_2896.y)) + vec4<f32>(x_2899.x, x_2899.y, x_2899.z, x_2899.y));
        let x_2902 : vec4<f32> = u_xlat7;
        let x_2905 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2908 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_2902.x, x_2902.y) * vec2<f32>(x_2905.x, x_2905.y)) + vec2<f32>(x_2908.w, x_2908.y));
        let x_2912 : f32 = u_xlat9.x;
        u_xlat10.x = x_2912;
        let x_2914 : vec4<f32> = u_xlat7;
        let x_2917 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2920 : vec4<f32> = u_xlat10;
        let x_2922 : vec2<f32> = ((vec2<f32>(x_2914.x, x_2914.y) * vec2<f32>(x_2917.x, x_2917.y)) + vec2<f32>(x_2920.x, x_2920.y));
        let x_2923 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2922.x, x_2922.y, x_2923.z, x_2923.w);
        let x_2925 : vec4<f32> = u_xlat8;
        let x_2927 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2925.x, x_2925.x, x_2925.x, x_2925.x) * x_2927);
        let x_2929 : vec4<f32> = u_xlat8;
        let x_2931 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2929.y, x_2929.y, x_2929.y, x_2929.y) * x_2931);
        let x_2933 : vec4<f32> = u_xlat8;
        let x_2935 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2933.z, x_2933.z, x_2933.z, x_2933.z) * x_2935);
        let x_2937 : vec4<f32> = u_xlat8;
        let x_2939 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2937.w, x_2937.w, x_2937.w, x_2937.w) * x_2939);
        let x_2942 : vec4<f32> = u_xlat13;
        let x_2943 : vec2<f32> = vec2<f32>(x_2942.x, x_2942.y);
        let x_2945 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2943.x, x_2943.y, x_2945);
        let x_2952 : vec3<f32> = txVec43;
        let x_2954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2952.xy, x_2952.z);
        u_xlat72 = x_2954;
        let x_2956 : vec4<f32> = u_xlat13;
        let x_2957 : vec2<f32> = vec2<f32>(x_2956.z, x_2956.w);
        let x_2959 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2957.x, x_2957.y, x_2959);
        let x_2966 : vec3<f32> = txVec44;
        let x_2968 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2966.xy, x_2966.z);
        u_xlat9.x = x_2968;
        let x_2971 : f32 = u_xlat9.x;
        let x_2973 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2971 * x_2973);
        let x_2977 : f32 = u_xlat18.x;
        let x_2978 : f32 = u_xlat72;
        let x_2981 : f32 = u_xlat9.x;
        u_xlat72 = ((x_2977 * x_2978) + x_2981);
        let x_2984 : vec2<f32> = u_xlat51;
        let x_2986 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2984.x, x_2984.y, x_2986);
        let x_2993 : vec3<f32> = txVec45;
        let x_2995 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2993.xy, x_2993.z);
        u_xlat51.x = x_2995;
        let x_2998 : f32 = u_xlat18.z;
        let x_3000 : f32 = u_xlat51.x;
        let x_3002 : f32 = u_xlat72;
        u_xlat72 = ((x_2998 * x_3000) + x_3002);
        let x_3005 : vec4<f32> = u_xlat16;
        let x_3006 : vec2<f32> = vec2<f32>(x_3005.x, x_3005.y);
        let x_3008 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_3006.x, x_3006.y, x_3008);
        let x_3015 : vec3<f32> = txVec46;
        let x_3017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3015.xy, x_3015.z);
        u_xlat51.x = x_3017;
        let x_3020 : f32 = u_xlat18.w;
        let x_3022 : f32 = u_xlat51.x;
        let x_3024 : f32 = u_xlat72;
        u_xlat72 = ((x_3020 * x_3022) + x_3024);
        let x_3027 : vec4<f32> = u_xlat14;
        let x_3028 : vec2<f32> = vec2<f32>(x_3027.x, x_3027.y);
        let x_3030 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3028.x, x_3028.y, x_3030);
        let x_3037 : vec3<f32> = txVec47;
        let x_3039 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3037.xy, x_3037.z);
        u_xlat51.x = x_3039;
        let x_3042 : f32 = u_xlat19.x;
        let x_3044 : f32 = u_xlat51.x;
        let x_3046 : f32 = u_xlat72;
        u_xlat72 = ((x_3042 * x_3044) + x_3046);
        let x_3049 : vec4<f32> = u_xlat14;
        let x_3050 : vec2<f32> = vec2<f32>(x_3049.z, x_3049.w);
        let x_3052 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3050.x, x_3050.y, x_3052);
        let x_3059 : vec3<f32> = txVec48;
        let x_3061 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3059.xy, x_3059.z);
        u_xlat51.x = x_3061;
        let x_3064 : f32 = u_xlat19.y;
        let x_3066 : f32 = u_xlat51.x;
        let x_3068 : f32 = u_xlat72;
        u_xlat72 = ((x_3064 * x_3066) + x_3068);
        let x_3071 : vec4<f32> = u_xlat15;
        let x_3072 : vec2<f32> = vec2<f32>(x_3071.x, x_3071.y);
        let x_3074 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3072.x, x_3072.y, x_3074);
        let x_3081 : vec3<f32> = txVec49;
        let x_3083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3081.xy, x_3081.z);
        u_xlat51.x = x_3083;
        let x_3086 : f32 = u_xlat19.z;
        let x_3088 : f32 = u_xlat51.x;
        let x_3090 : f32 = u_xlat72;
        u_xlat72 = ((x_3086 * x_3088) + x_3090);
        let x_3093 : vec4<f32> = u_xlat16;
        let x_3094 : vec2<f32> = vec2<f32>(x_3093.z, x_3093.w);
        let x_3096 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3094.x, x_3094.y, x_3096);
        let x_3103 : vec3<f32> = txVec50;
        let x_3105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3103.xy, x_3103.z);
        u_xlat51.x = x_3105;
        let x_3108 : f32 = u_xlat19.w;
        let x_3110 : f32 = u_xlat51.x;
        let x_3112 : f32 = u_xlat72;
        u_xlat72 = ((x_3108 * x_3110) + x_3112);
        let x_3115 : vec4<f32> = u_xlat17;
        let x_3116 : vec2<f32> = vec2<f32>(x_3115.x, x_3115.y);
        let x_3118 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3116.x, x_3116.y, x_3118);
        let x_3125 : vec3<f32> = txVec51;
        let x_3127 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3125.xy, x_3125.z);
        u_xlat51.x = x_3127;
        let x_3130 : f32 = u_xlat20.x;
        let x_3132 : f32 = u_xlat51.x;
        let x_3134 : f32 = u_xlat72;
        u_xlat72 = ((x_3130 * x_3132) + x_3134);
        let x_3137 : vec4<f32> = u_xlat17;
        let x_3138 : vec2<f32> = vec2<f32>(x_3137.z, x_3137.w);
        let x_3140 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3138.x, x_3138.y, x_3140);
        let x_3147 : vec3<f32> = txVec52;
        let x_3149 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3147.xy, x_3147.z);
        u_xlat51.x = x_3149;
        let x_3152 : f32 = u_xlat20.y;
        let x_3154 : f32 = u_xlat51.x;
        let x_3156 : f32 = u_xlat72;
        u_xlat72 = ((x_3152 * x_3154) + x_3156);
        let x_3159 : vec3<f32> = u_xlat31;
        let x_3160 : vec2<f32> = vec2<f32>(x_3159.x, x_3159.y);
        let x_3162 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3160.x, x_3160.y, x_3162);
        let x_3169 : vec3<f32> = txVec53;
        let x_3171 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3169.xy, x_3169.z);
        u_xlat51.x = x_3171;
        let x_3174 : f32 = u_xlat20.z;
        let x_3176 : f32 = u_xlat51.x;
        let x_3178 : f32 = u_xlat72;
        u_xlat72 = ((x_3174 * x_3176) + x_3178);
        let x_3181 : vec2<f32> = u_xlat59;
        let x_3183 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3181.x, x_3181.y, x_3183);
        let x_3190 : vec3<f32> = txVec54;
        let x_3192 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3190.xy, x_3190.z);
        u_xlat51.x = x_3192;
        let x_3195 : f32 = u_xlat20.w;
        let x_3197 : f32 = u_xlat51.x;
        let x_3199 : f32 = u_xlat72;
        u_xlat72 = ((x_3195 * x_3197) + x_3199);
        let x_3202 : vec4<f32> = u_xlat12;
        let x_3203 : vec2<f32> = vec2<f32>(x_3202.x, x_3202.y);
        let x_3205 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3203.x, x_3203.y, x_3205);
        let x_3212 : vec3<f32> = txVec55;
        let x_3214 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3212.xy, x_3212.z);
        u_xlat51.x = x_3214;
        let x_3217 : f32 = u_xlat8.x;
        let x_3219 : f32 = u_xlat51.x;
        let x_3221 : f32 = u_xlat72;
        u_xlat72 = ((x_3217 * x_3219) + x_3221);
        let x_3224 : vec4<f32> = u_xlat12;
        let x_3225 : vec2<f32> = vec2<f32>(x_3224.z, x_3224.w);
        let x_3227 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3225.x, x_3225.y, x_3227);
        let x_3234 : vec3<f32> = txVec56;
        let x_3236 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3234.xy, x_3234.z);
        u_xlat51.x = x_3236;
        let x_3239 : f32 = u_xlat8.y;
        let x_3241 : f32 = u_xlat51.x;
        let x_3243 : f32 = u_xlat72;
        u_xlat72 = ((x_3239 * x_3241) + x_3243);
        let x_3246 : vec2<f32> = u_xlat54;
        let x_3248 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3246.x, x_3246.y, x_3248);
        let x_3255 : vec3<f32> = txVec57;
        let x_3257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3255.xy, x_3255.z);
        u_xlat51.x = x_3257;
        let x_3260 : f32 = u_xlat8.z;
        let x_3262 : f32 = u_xlat51.x;
        let x_3264 : f32 = u_xlat72;
        u_xlat72 = ((x_3260 * x_3262) + x_3264);
        let x_3267 : vec4<f32> = u_xlat7;
        let x_3268 : vec2<f32> = vec2<f32>(x_3267.x, x_3267.y);
        let x_3270 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3268.x, x_3268.y, x_3270);
        let x_3277 : vec3<f32> = txVec58;
        let x_3279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3277.xy, x_3277.z);
        u_xlat7.x = x_3279;
        let x_3282 : f32 = u_xlat8.w;
        let x_3284 : f32 = u_xlat7.x;
        let x_3286 : f32 = u_xlat72;
        u_xlat0.x = ((x_3282 * x_3284) + x_3286);
      }
    }
  } else {
    let x_3291 : vec4<f32> = vs_INTERP9;
    let x_3292 : vec2<f32> = vec2<f32>(x_3291.x, x_3291.y);
    let x_3294 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3292.x, x_3292.y, x_3294);
    let x_3301 : vec3<f32> = txVec59;
    let x_3303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3301.xy, x_3301.z);
    u_xlat0.x = x_3303;
  }
  let x_3306 : f32 = u_xlat0.x;
  let x_3308 : f32 = x_362.x_MainLightShadowParams.x;
  let x_3311 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3306 * x_3308) + x_3311);
  let x_3316 : f32 = vs_INTERP9.z;
  u_xlatb2 = (0.0f >= x_3316);
  let x_3319 : f32 = vs_INTERP9.z;
  u_xlatb72 = (x_3319 >= 1.0f);
  let x_3321 : bool = u_xlatb2;
  let x_3322 : bool = u_xlatb72;
  u_xlatb2 = (x_3321 | x_3322);
  let x_3324 : bool = u_xlatb2;
  if (x_3324) {
    x_3325 = 1.0f;
  } else {
    let x_3330 : f32 = u_xlat0.x;
    x_3325 = x_3330;
  }
  let x_3331 : f32 = x_3325;
  u_xlat0.x = x_3331;
  let x_3333 : vec3<f32> = vs_INTERP0;
  let x_3335 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  let x_3337 : vec3<f32> = (x_3333 + -(x_3335));
  let x_3338 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3337.x, x_3337.y, x_3337.z, x_3338.w);
  let x_3340 : vec4<f32> = u_xlat7;
  let x_3342 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3340.x, x_3340.y, x_3340.z), vec3<f32>(x_3342.x, x_3342.y, x_3342.z));
  let x_3347 : f32 = u_xlat2.x;
  let x_3349 : f32 = x_362.x_MainLightShadowParams.z;
  let x_3352 : f32 = x_362.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3347 * x_3349) + x_3352);
  let x_3356 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3356, 0.0f, 1.0f);
  let x_3360 : f32 = u_xlat0.x;
  u_xlat72 = (-(x_3360) + 1.0f);
  let x_3364 : f32 = u_xlat2.x;
  let x_3365 : f32 = u_xlat72;
  let x_3368 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3364 * x_3365) + x_3368);
  let x_3371 : f32 = u_xlat49;
  let x_3374 : vec4<f32> = x_158.x_MainLightColor;
  let x_3376 : vec3<f32> = (vec3<f32>(x_3371, x_3371, x_3371) * vec3<f32>(x_3374.x, x_3374.y, x_3374.z));
  let x_3377 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3376.x, x_3376.y, x_3376.z, x_3377.w);
  let x_3379 : vec3<f32> = u_xlat4;
  let x_3381 : vec3<f32> = u_xlat22;
  u_xlat2.x = dot(-(x_3379), x_3381);
  let x_3385 : f32 = u_xlat2.x;
  let x_3387 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3385 + x_3387);
  let x_3390 : vec3<f32> = u_xlat22;
  let x_3391 : vec3<f32> = u_xlat2;
  let x_3395 : vec3<f32> = u_xlat4;
  let x_3397 : vec3<f32> = ((x_3390 * -(vec3<f32>(x_3391.x, x_3391.x, x_3391.x))) + -(x_3395));
  let x_3398 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3397.x, x_3397.y, x_3397.z, x_3398.w);
  let x_3400 : vec3<f32> = u_xlat22;
  let x_3401 : vec3<f32> = u_xlat4;
  u_xlat2.x = dot(x_3400, x_3401);
  let x_3405 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3405, 0.0f, 1.0f);
  let x_3409 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3409) + 1.0f);
  let x_3414 : f32 = u_xlat2.x;
  let x_3416 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3414 * x_3416);
  let x_3420 : f32 = u_xlat2.x;
  let x_3422 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3420 * x_3422);
  let x_3425 : f32 = u_xlat68;
  u_xlat72 = ((-(x_3425) * 0.699999988f) + 1.700000048f);
  let x_3431 : f32 = u_xlat68;
  let x_3432 : f32 = u_xlat72;
  u_xlat68 = (x_3431 * x_3432);
  let x_3434 : f32 = u_xlat68;
  u_xlat68 = (x_3434 * 6.0f);
  let x_3445 : vec4<f32> = u_xlat8;
  let x_3447 : f32 = u_xlat68;
  let x_3448 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3445.x, x_3445.y, x_3445.z), x_3447);
  u_xlat8 = x_3448;
  let x_3450 : f32 = u_xlat8.w;
  u_xlat68 = (x_3450 + -1.0f);
  let x_3453 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3454 : f32 = u_xlat68;
  u_xlat68 = ((x_3453 * x_3454) + 1.0f);
  let x_3457 : f32 = u_xlat68;
  u_xlat68 = max(x_3457, 0.0f);
  let x_3459 : f32 = u_xlat68;
  u_xlat68 = log2(x_3459);
  let x_3461 : f32 = u_xlat68;
  let x_3463 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat68 = (x_3461 * x_3463);
  let x_3465 : f32 = u_xlat68;
  u_xlat68 = exp2(x_3465);
  let x_3467 : f32 = u_xlat68;
  let x_3469 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat68 = (x_3467 * x_3469);
  let x_3471 : vec4<f32> = u_xlat8;
  let x_3473 : f32 = u_xlat68;
  let x_3475 : vec3<f32> = (vec3<f32>(x_3471.x, x_3471.y, x_3471.z) * vec3<f32>(x_3473, x_3473, x_3473));
  let x_3476 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3475.x, x_3475.y, x_3475.z, x_3476.w);
  let x_3478 : f32 = u_xlat69;
  let x_3480 : f32 = u_xlat69;
  let x_3484 : vec2<f32> = ((vec2<f32>(x_3478, x_3478) * vec2<f32>(x_3480, x_3480)) + vec2<f32>(-1.0f, 1.0f));
  let x_3485 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3484.x, x_3484.y, x_3485.z, x_3485.w);
  let x_3488 : f32 = u_xlat9.y;
  u_xlat68 = (1.0f / x_3488);
  let x_3490 : f32 = u_xlat27;
  u_xlat69 = (x_3490 + -0.039999999f);
  let x_3494 : f32 = u_xlat2.x;
  let x_3495 : f32 = u_xlat69;
  u_xlat2.x = ((x_3494 * x_3495) + 0.039999999f);
  let x_3501 : f32 = u_xlat2.x;
  let x_3502 : f32 = u_xlat68;
  u_xlat2.x = (x_3501 * x_3502);
  let x_3505 : vec3<f32> = u_xlat2;
  let x_3507 : vec4<f32> = u_xlat8;
  let x_3509 : vec3<f32> = (vec3<f32>(x_3505.x, x_3505.x, x_3505.x) * vec3<f32>(x_3507.x, x_3507.y, x_3507.z));
  let x_3510 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3509.x, x_3509.y, x_3509.z, x_3510.w);
  let x_3512 : vec4<f32> = u_xlat3;
  let x_3514 : vec4<f32> = u_xlat6;
  let x_3517 : vec4<f32> = u_xlat8;
  let x_3519 : vec3<f32> = ((vec3<f32>(x_3512.x, x_3512.y, x_3512.z) * vec3<f32>(x_3514.x, x_3514.y, x_3514.z)) + vec3<f32>(x_3517.x, x_3517.y, x_3517.z));
  let x_3520 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3519.x, x_3519.y, x_3519.z, x_3520.w);
  let x_3523 : f32 = u_xlat0.x;
  let x_3525 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3523 * x_3525);
  let x_3528 : vec3<f32> = u_xlat22;
  let x_3530 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat2.x = dot(x_3528, vec3<f32>(x_3530.x, x_3530.y, x_3530.z));
  let x_3535 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3535, 0.0f, 1.0f);
  let x_3539 : f32 = u_xlat0.x;
  let x_3541 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3539 * x_3541);
  let x_3544 : vec3<f32> = u_xlat0;
  let x_3546 : vec4<f32> = u_xlat7;
  let x_3548 : vec3<f32> = (vec3<f32>(x_3544.x, x_3544.x, x_3544.x) * vec3<f32>(x_3546.x, x_3546.y, x_3546.z));
  let x_3549 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3548.x, x_3548.y, x_3548.z, x_3549.w);
  let x_3551 : vec3<f32> = u_xlat4;
  let x_3553 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3555 : vec3<f32> = (x_3551 + vec3<f32>(x_3553.x, x_3553.y, x_3553.z));
  let x_3556 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3555.x, x_3555.y, x_3555.z, x_3556.w);
  let x_3558 : vec4<f32> = u_xlat8;
  let x_3560 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3558.x, x_3558.y, x_3558.z), vec3<f32>(x_3560.x, x_3560.y, x_3560.z));
  let x_3565 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3565, 1.17549435e-37f);
  let x_3569 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3569);
  let x_3572 : vec3<f32> = u_xlat0;
  let x_3574 : vec4<f32> = u_xlat8;
  let x_3576 : vec3<f32> = (vec3<f32>(x_3572.x, x_3572.x, x_3572.x) * vec3<f32>(x_3574.x, x_3574.y, x_3574.z));
  let x_3577 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3576.x, x_3576.y, x_3576.z, x_3577.w);
  let x_3579 : vec3<f32> = u_xlat22;
  let x_3580 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3579, vec3<f32>(x_3580.x, x_3580.y, x_3580.z));
  let x_3585 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3585, 0.0f, 1.0f);
  let x_3589 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3591 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3589.x, x_3589.y, x_3589.z), vec3<f32>(x_3591.x, x_3591.y, x_3591.z));
  let x_3596 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3596, 0.0f, 1.0f);
  let x_3600 : f32 = u_xlat0.x;
  let x_3602 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3600 * x_3602);
  let x_3606 : f32 = u_xlat0.x;
  let x_3608 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_3606 * x_3608) + 1.000010014f);
  let x_3614 : f32 = u_xlat2.x;
  let x_3616 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3614 * x_3616);
  let x_3620 : f32 = u_xlat0.x;
  let x_3622 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3620 * x_3622);
  let x_3626 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3626, 0.100000001f);
  let x_3631 : f32 = u_xlat0.x;
  let x_3633 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3631 * x_3633);
  let x_3636 : f32 = u_xlat71;
  let x_3638 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3636 * x_3638);
  let x_3641 : f32 = u_xlat70;
  let x_3643 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3641 / x_3643);
  let x_3646 : vec3<f32> = u_xlat0;
  let x_3650 : vec4<f32> = u_xlat6;
  let x_3652 : vec3<f32> = ((vec3<f32>(x_3646.x, x_3646.x, x_3646.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3650.x, x_3650.y, x_3650.z));
  let x_3653 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3652.x, x_3652.y, x_3652.z, x_3653.w);
  let x_3655 : vec4<f32> = u_xlat7;
  let x_3657 : vec4<f32> = u_xlat8;
  let x_3659 : vec3<f32> = (vec3<f32>(x_3655.x, x_3655.y, x_3655.z) * vec3<f32>(x_3657.x, x_3657.y, x_3657.z));
  let x_3660 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3659.x, x_3659.y, x_3659.z, x_3660.w);
  let x_3663 : f32 = x_158.x_AdditionalLightsCount.x;
  let x_3665 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3663, x_3665);
  let x_3670 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3670));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3682 : u32 = u_xlatu_loop_1;
    let x_3683 : u32 = u_xlatu0;
    if ((x_3682 < x_3683)) {
    } else {
      break;
    }
    let x_3685 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3685 >> 2u);
    let x_3688 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3688 & 3u));
    let x_3691 : u32 = u_xlatu68;
    let x_3694 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3691)];
    let x_3704 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3709 : vec4<u32> = indexable[x_3704];
    u_xlat68 = dot(x_3694, bitcast<vec4<f32>>(x_3709));
    let x_3713 : f32 = u_xlat68;
    u_xlati68 = i32(x_3713);
    let x_3715 : vec3<f32> = vs_INTERP0;
    let x_3727 : i32 = u_xlati68;
    let x_3729 : vec4<f32> = x_3726.x_AdditionalLightsPosition[x_3727];
    let x_3732 : i32 = u_xlati68;
    let x_3734 : vec4<f32> = x_3726.x_AdditionalLightsPosition[x_3732];
    u_xlat31 = ((-(x_3715) * vec3<f32>(x_3729.w, x_3729.w, x_3729.w)) + vec3<f32>(x_3734.x, x_3734.y, x_3734.z));
    let x_3737 : vec3<f32> = u_xlat31;
    let x_3738 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_3737, x_3738);
    let x_3740 : f32 = u_xlat69;
    u_xlat69 = max(x_3740, 6.10351562e-05f);
    let x_3743 : f32 = u_xlat69;
    u_xlat27 = inverseSqrt(x_3743);
    let x_3745 : f32 = u_xlat27;
    let x_3747 : vec3<f32> = u_xlat31;
    let x_3748 : vec3<f32> = (vec3<f32>(x_3745, x_3745, x_3745) * x_3747);
    let x_3749 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3748.x, x_3748.y, x_3748.z, x_3749.w);
    let x_3751 : f32 = u_xlat69;
    u_xlat72 = (1.0f / x_3751);
    let x_3753 : f32 = u_xlat69;
    let x_3754 : i32 = u_xlati68;
    let x_3756 : f32 = x_3726.x_AdditionalLightsAttenuation[x_3754].x;
    u_xlat69 = (x_3753 * x_3756);
    let x_3758 : f32 = u_xlat69;
    let x_3760 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3758) * x_3760) + 1.0f);
    let x_3763 : f32 = u_xlat69;
    u_xlat69 = max(x_3763, 0.0f);
    let x_3765 : f32 = u_xlat69;
    let x_3766 : f32 = u_xlat69;
    u_xlat69 = (x_3765 * x_3766);
    let x_3768 : f32 = u_xlat69;
    let x_3769 : f32 = u_xlat72;
    u_xlat69 = (x_3768 * x_3769);
    let x_3771 : i32 = u_xlati68;
    let x_3773 : vec4<f32> = x_3726.x_AdditionalLightsSpotDir[x_3771];
    let x_3775 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3773.x, x_3773.y, x_3773.z), vec3<f32>(x_3775.x, x_3775.y, x_3775.z));
    let x_3778 : f32 = u_xlat72;
    let x_3779 : i32 = u_xlati68;
    let x_3781 : f32 = x_3726.x_AdditionalLightsAttenuation[x_3779].z;
    let x_3783 : i32 = u_xlati68;
    let x_3785 : f32 = x_3726.x_AdditionalLightsAttenuation[x_3783].w;
    u_xlat72 = ((x_3778 * x_3781) + x_3785);
    let x_3787 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3787, 0.0f, 1.0f);
    let x_3789 : f32 = u_xlat72;
    let x_3790 : f32 = u_xlat72;
    u_xlat72 = (x_3789 * x_3790);
    let x_3792 : f32 = u_xlat69;
    let x_3793 : f32 = u_xlat72;
    u_xlat69 = (x_3792 * x_3793);
    let x_3795 : f32 = u_xlat49;
    let x_3797 : i32 = u_xlati68;
    let x_3799 : vec4<f32> = x_3726.x_AdditionalLightsColor[x_3797];
    let x_3801 : vec3<f32> = (vec3<f32>(x_3795, x_3795, x_3795) * vec3<f32>(x_3799.x, x_3799.y, x_3799.z));
    let x_3802 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3801.x, x_3801.y, x_3801.z, x_3802.w);
    let x_3804 : vec3<f32> = u_xlat22;
    let x_3805 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_3804, vec3<f32>(x_3805.x, x_3805.y, x_3805.z));
    let x_3808 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3808, 0.0f, 1.0f);
    let x_3810 : f32 = u_xlat68;
    let x_3811 : f32 = u_xlat69;
    u_xlat68 = (x_3810 * x_3811);
    let x_3813 : f32 = u_xlat68;
    let x_3815 : vec4<f32> = u_xlat11;
    let x_3817 : vec3<f32> = (vec3<f32>(x_3813, x_3813, x_3813) * vec3<f32>(x_3815.x, x_3815.y, x_3815.z));
    let x_3818 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3817.x, x_3817.y, x_3817.z, x_3818.w);
    let x_3820 : vec3<f32> = u_xlat31;
    let x_3821 : f32 = u_xlat27;
    let x_3824 : vec3<f32> = u_xlat4;
    u_xlat31 = ((x_3820 * vec3<f32>(x_3821, x_3821, x_3821)) + x_3824);
    let x_3826 : vec3<f32> = u_xlat31;
    let x_3827 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3826, x_3827);
    let x_3829 : f32 = u_xlat68;
    u_xlat68 = max(x_3829, 1.17549435e-37f);
    let x_3831 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3831);
    let x_3833 : f32 = u_xlat68;
    let x_3835 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_3833, x_3833, x_3833) * x_3835);
    let x_3837 : vec3<f32> = u_xlat22;
    let x_3838 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3837, x_3838);
    let x_3840 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3840, 0.0f, 1.0f);
    let x_3842 : vec4<f32> = u_xlat10;
    let x_3844 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_3842.x, x_3842.y, x_3842.z), x_3844);
    let x_3846 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3846, 0.0f, 1.0f);
    let x_3848 : f32 = u_xlat68;
    let x_3849 : f32 = u_xlat68;
    u_xlat68 = (x_3848 * x_3849);
    let x_3851 : f32 = u_xlat68;
    let x_3853 : f32 = u_xlat9.x;
    u_xlat68 = ((x_3851 * x_3853) + 1.000010014f);
    let x_3856 : f32 = u_xlat69;
    let x_3857 : f32 = u_xlat69;
    u_xlat69 = (x_3856 * x_3857);
    let x_3859 : f32 = u_xlat68;
    let x_3860 : f32 = u_xlat68;
    u_xlat68 = (x_3859 * x_3860);
    let x_3862 : f32 = u_xlat69;
    u_xlat69 = max(x_3862, 0.100000001f);
    let x_3864 : f32 = u_xlat68;
    let x_3865 : f32 = u_xlat69;
    u_xlat68 = (x_3864 * x_3865);
    let x_3867 : f32 = u_xlat71;
    let x_3868 : f32 = u_xlat68;
    u_xlat68 = (x_3867 * x_3868);
    let x_3870 : f32 = u_xlat70;
    let x_3871 : f32 = u_xlat68;
    u_xlat68 = (x_3870 / x_3871);
    let x_3873 : f32 = u_xlat68;
    let x_3876 : vec4<f32> = u_xlat6;
    u_xlat31 = ((vec3<f32>(x_3873, x_3873, x_3873) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3876.x, x_3876.y, x_3876.z));
    let x_3879 : vec3<f32> = u_xlat31;
    let x_3880 : vec4<f32> = u_xlat11;
    let x_3883 : vec4<f32> = u_xlat8;
    let x_3885 : vec3<f32> = ((x_3879 * vec3<f32>(x_3880.x, x_3880.y, x_3880.z)) + vec3<f32>(x_3883.x, x_3883.y, x_3883.z));
    let x_3886 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3885.x, x_3885.y, x_3885.z, x_3886.w);

    continuing {
      let x_3888 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3888 + bitcast<u32>(1i));
    }
  }
  let x_3890 : vec4<f32> = u_xlat3;
  let x_3892 : vec3<f32> = u_xlat5;
  let x_3895 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_3890.x, x_3890.y, x_3890.z) * vec3<f32>(x_3892.x, x_3892.x, x_3892.x)) + vec3<f32>(x_3895.x, x_3895.y, x_3895.z));
  let x_3898 : vec4<f32> = u_xlat8;
  let x_3900 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3898.x, x_3898.y, x_3898.z) + x_3900);
  let x_3902 : vec4<f32> = vs_INTERP4;
  let x_3904 : vec3<f32> = u_xlat1;
  let x_3906 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_3902.w, x_3902.w, x_3902.w) * x_3904) + x_3906);
  let x_3909 : f32 = u_xlat46;
  let x_3910 : f32 = u_xlat46;
  u_xlat66 = (x_3909 * -(x_3910));
  let x_3913 : f32 = u_xlat66;
  u_xlat66 = exp2(x_3913);
  let x_3915 : vec3<f32> = u_xlat0;
  let x_3918 : vec4<f32> = x_158.unity_FogColor;
  u_xlat0 = (x_3915 + -(vec3<f32>(x_3918.x, x_3918.y, x_3918.z)));
  let x_3924 : f32 = u_xlat66;
  let x_3926 : vec3<f32> = u_xlat0;
  let x_3929 : vec4<f32> = x_158.unity_FogColor;
  let x_3931 : vec3<f32> = ((vec3<f32>(x_3924, x_3924, x_3924) * x_3926) + vec3<f32>(x_3929.x, x_3929.y, x_3929.z));
  let x_3932 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3931.x, x_3931.y, x_3931.z, x_3932.w);
  let x_3934 : bool = u_xlatb24;
  let x_3935 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_3935, x_3934);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

