type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_94 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_158 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_261 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_360 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3424 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3921 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4031 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_197 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb46 : bool;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var x_1702 : f32;
  var u_xlatu3 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu68 : u32;
  var u_xlati46 : i32;
  var u_xlat46 : f32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat44 : vec2<f32>;
  var u_xlat66 : f32;
  var u_xlat69 : f32;
  var u_xlat71 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb6 : bool;
  var u_xlat50 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec35 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3372 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3507 : f32;
  var x_3519 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu72 : u32;
  var u_xlati73 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlat75 : f32;
  var u_xlatu75 : u32;
  var u_xlati76 : i32;
  var u_xlati75 : i32;
  var u_xlati11 : i32;
  var u_xlat33 : vec3<f32>;
  var u_xlatb75 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4333 : f32;
  var x_4346 : f32;
  var x_4408 : f32;
  var x_4419 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_64 : vec3<f32> = vs_INTERP1;
  let x_65 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_64, x_65);
  let x_71 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_71);
  let x_75 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_75);
  let x_85 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_85);
  let x_98 : f32 = x_94.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_98 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec4<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec4<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_148 : vec3<f32> = u_xlat22;
  let x_149 : vec4<f32> = u_xlat0;
  let x_151 : vec3<f32> = (x_148 * vec3<f32>(x_149.x, x_149.x, x_149.x));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_151.z, x_152.w);
  let x_161 : f32 = x_158.unity_OrthoParams.w;
  u_xlatb0 = (x_161 == 0.0f);
  let x_165 : vec3<f32> = vs_INTERP0;
  let x_170 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_165) + x_170);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_173, x_174);
  let x_176 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_176);
  let x_178 : f32 = u_xlat67;
  let x_180 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_178, x_178, x_178) * x_180);
  let x_186 : f32 = x_158.unity_MatrixV[0i].z;
  u_xlat5.x = x_186;
  let x_190 : f32 = x_158.unity_MatrixV[1i].z;
  u_xlat5.y = x_190;
  let x_194 : f32 = x_158.unity_MatrixV[2i].z;
  u_xlat5.z = x_194;
  let x_196 : bool = u_xlatb0;
  if (x_196) {
    let x_200 : vec3<f32> = u_xlat4;
    x_197 = x_200;
  } else {
    let x_202 : vec3<f32> = u_xlat5;
    x_197 = x_202;
  }
  let x_203 : vec3<f32> = x_197;
  u_xlat4 = x_203;
  let x_204 : vec3<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_94.unity_WorldToObject[1i];
  u_xlat5 = (vec3<f32>(x_204.y, x_204.y, x_204.y) * vec3<f32>(x_208.x, x_208.y, x_208.z));
  let x_212 : vec4<f32> = x_94.unity_WorldToObject[0i];
  let x_214 : vec3<f32> = u_xlat4;
  let x_217 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_212.x, x_212.y, x_212.z) * vec3<f32>(x_214.x, x_214.x, x_214.x)) + x_217);
  let x_220 : vec4<f32> = x_94.unity_WorldToObject[2i];
  let x_222 : vec3<f32> = u_xlat4;
  let x_225 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_220.x, x_220.y, x_220.z) * vec3<f32>(x_222.z, x_222.z, x_222.z)) + x_225);
  let x_227 : vec3<f32> = u_xlat5;
  let x_228 : vec3<f32> = u_xlat5;
  u_xlat0.x = dot(x_227, x_228);
  let x_232 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_232);
  let x_235 : vec4<f32> = u_xlat0;
  let x_237 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_235.x, x_235.x, x_235.x) * x_237);
  let x_251 : vec4<f32> = vs_INTERP3;
  let x_254 : f32 = x_158.x_GlobalMipBias.x;
  let x_255 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_251.x, x_251.y), x_254);
  u_xlat6 = x_255;
  let x_257 : vec4<f32> = u_xlat6;
  let x_263 : vec4<f32> = x_261.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_257.x, x_257.y, x_257.z) * vec3<f32>(x_263.x, x_263.y, x_263.z));
  let x_272 : vec4<f32> = vs_INTERP3;
  let x_275 : f32 = x_158.x_GlobalMipBias.x;
  let x_276 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_272.x, x_272.y), x_275);
  u_xlat8 = vec4<f32>(x_276.w, x_276.x, x_276.y, x_276.z);
  let x_279 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_279.y, x_279.z, x_279.w, x_279.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_286 : vec4<f32> = u_xlat9;
  let x_287 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_286, x_287);
  let x_291 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_291);
  let x_295 : vec4<f32> = u_xlat0;
  let x_297 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_295.x, x_295.x, x_295.x) * vec3<f32>(x_297.x, x_297.y, x_297.z));
  let x_302 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_302 * 200.0f);
  let x_307 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_307, 1.0f);
  let x_310 : vec4<f32> = u_xlat0;
  let x_312 : vec4<f32> = u_xlat6;
  let x_314 : vec3<f32> = (vec3<f32>(x_310.x, x_310.x, x_310.x) * vec3<f32>(x_312.x, x_312.y, x_312.z));
  let x_315 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_314.x, x_314.y, x_314.z, x_315.w);
  let x_317 : vec4<f32> = u_xlat3;
  let x_319 : vec3<f32> = u_xlat30;
  let x_321 : vec3<f32> = (vec3<f32>(x_317.x, x_317.y, x_317.z) * vec3<f32>(x_319.y, x_319.y, x_319.y));
  let x_322 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_321.x, x_321.y, x_321.z, x_322.w);
  let x_324 : vec3<f32> = u_xlat30;
  let x_326 : vec3<f32> = u_xlat2;
  let x_328 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_324.x, x_324.x, x_324.x) * x_326) + vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_331 : vec3<f32> = u_xlat30;
  let x_333 : vec3<f32> = u_xlat1;
  let x_335 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_331.z, x_331.z, x_331.z) * x_333) + x_335);
  let x_337 : vec3<f32> = u_xlat1;
  let x_338 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_337, x_338);
  let x_342 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_342, 1.17549435e-37f);
  let x_347 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_347);
  let x_350 : vec4<f32> = u_xlat0;
  let x_352 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_350.x, x_350.x, x_350.x) * x_352);
  let x_354 : vec3<f32> = vs_INTERP0;
  let x_362 : vec4<f32> = x_360.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_354.y, x_354.y, x_354.y) * vec3<f32>(x_362.x, x_362.y, x_362.z));
  let x_366 : vec4<f32> = x_360.x_MainLightWorldToShadow[0i][0i];
  let x_368 : vec3<f32> = vs_INTERP0;
  let x_371 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_366.x, x_366.y, x_366.z) * vec3<f32>(x_368.x, x_368.x, x_368.x)) + x_371);
  let x_374 : vec4<f32> = x_360.x_MainLightWorldToShadow[0i][2i];
  let x_376 : vec3<f32> = vs_INTERP0;
  let x_379 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_374.x, x_374.y, x_374.z) * vec3<f32>(x_376.z, x_376.z, x_376.z)) + x_379);
  let x_381 : vec3<f32> = u_xlat2;
  let x_383 : vec4<f32> = x_360.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_381 + vec3<f32>(x_383.x, x_383.y, x_383.z));
  let x_388 : f32 = x_360.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_388);
  let x_390 : bool = u_xlatb0;
  if (x_390) {
    let x_395 : f32 = x_360.x_MainLightShadowParams.y;
    u_xlatb67 = (x_395 == 1.0f);
    let x_397 : bool = u_xlatb67;
    if (x_397) {
      let x_400 : vec3<f32> = u_xlat2;
      let x_404 : vec4<f32> = x_360.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_400.x, x_400.y, x_400.x, x_400.y) + x_404);
      let x_407 : vec4<f32> = u_xlat3;
      let x_408 : vec2<f32> = vec2<f32>(x_407.x, x_407.y);
      let x_410 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_408.x, x_408.y, x_410);
      let x_422 : vec3<f32> = txVec0;
      let x_424 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_422.xy, x_422.z);
      u_xlat9.x = x_424;
      let x_427 : vec4<f32> = u_xlat3;
      let x_428 : vec2<f32> = vec2<f32>(x_427.z, x_427.w);
      let x_430 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_428.x, x_428.y, x_430);
      let x_437 : vec3<f32> = txVec1;
      let x_439 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_437.xy, x_437.z);
      u_xlat9.y = x_439;
      let x_441 : vec3<f32> = u_xlat2;
      let x_445 : vec4<f32> = x_360.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_441.x, x_441.y, x_441.x, x_441.y) + x_445);
      let x_448 : vec4<f32> = u_xlat3;
      let x_449 : vec2<f32> = vec2<f32>(x_448.x, x_448.y);
      let x_451 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_449.x, x_449.y, x_451);
      let x_458 : vec3<f32> = txVec2;
      let x_460 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_458.xy, x_458.z);
      u_xlat9.z = x_460;
      let x_463 : vec4<f32> = u_xlat3;
      let x_464 : vec2<f32> = vec2<f32>(x_463.z, x_463.w);
      let x_466 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_464.x, x_464.y, x_466);
      let x_473 : vec3<f32> = txVec3;
      let x_475 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_473.xy, x_473.z);
      u_xlat9.w = x_475;
      let x_477 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_477, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_484 : f32 = x_360.x_MainLightShadowParams.y;
      u_xlatb68 = (x_484 == 2.0f);
      let x_486 : bool = u_xlatb68;
      if (x_486) {
        let x_489 : vec3<f32> = u_xlat2;
        let x_492 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_497 : vec2<f32> = ((vec2<f32>(x_489.x, x_489.y) * vec2<f32>(x_492.z, x_492.w)) + vec2<f32>(0.5f, 0.5f));
        let x_498 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_497.x, x_497.y, x_498.z, x_498.w);
        let x_500 : vec4<f32> = u_xlat3;
        let x_502 : vec2<f32> = floor(vec2<f32>(x_500.x, x_500.y));
        let x_503 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_502.x, x_502.y, x_503.z, x_503.w);
        let x_507 : vec3<f32> = u_xlat2;
        let x_510 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_513 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_507.x, x_507.y) * vec2<f32>(x_510.z, x_510.w)) + -(vec2<f32>(x_513.x, x_513.y)));
        let x_517 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_517.x, x_517.x, x_517.y, x_517.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_522 : vec4<f32> = u_xlat9;
        let x_524 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_522.x, x_522.x, x_522.z, x_522.z) * vec4<f32>(x_524.x, x_524.x, x_524.z, x_524.z));
        let x_527 : vec4<f32> = u_xlat10;
        let x_531 : vec2<f32> = (vec2<f32>(x_527.y, x_527.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_532 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_531.x, x_532.y, x_531.y, x_532.w);
        let x_534 : vec4<f32> = u_xlat10;
        let x_537 : vec2<f32> = u_xlat47;
        let x_539 : vec2<f32> = ((vec2<f32>(x_534.x, x_534.z) * vec2<f32>(0.5f, 0.5f)) + -(x_537));
        let x_540 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_539.x, x_539.y, x_540.z, x_540.w);
        let x_543 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_543) + vec2<f32>(1.0f, 1.0f));
        let x_548 : vec2<f32> = u_xlat47;
        let x_550 : vec2<f32> = min(x_548, vec2<f32>(0.0f, 0.0f));
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_550.x, x_550.y, x_551.z, x_551.w);
        let x_553 : vec4<f32> = u_xlat11;
        let x_556 : vec4<f32> = u_xlat11;
        let x_559 : vec2<f32> = u_xlat54;
        let x_560 : vec2<f32> = ((-(vec2<f32>(x_553.x, x_553.y)) * vec2<f32>(x_556.x, x_556.y)) + x_559);
        let x_561 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_560.x, x_560.y, x_561.z, x_561.w);
        let x_563 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_563, vec2<f32>(0.0f, 0.0f));
        let x_565 : vec2<f32> = u_xlat47;
        let x_567 : vec2<f32> = u_xlat47;
        let x_569 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_565) * x_567) + vec2<f32>(x_569.y, x_569.w));
        let x_572 : vec4<f32> = u_xlat11;
        let x_574 : vec2<f32> = (vec2<f32>(x_572.x, x_572.y) + vec2<f32>(1.0f, 1.0f));
        let x_575 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_574.x, x_574.y, x_575.z, x_575.w);
        let x_577 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_577 + vec2<f32>(1.0f, 1.0f));
        let x_580 : vec4<f32> = u_xlat10;
        let x_584 : vec2<f32> = (vec2<f32>(x_580.x, x_580.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_585 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_584.x, x_584.y, x_585.z, x_585.w);
        let x_587 : vec2<f32> = u_xlat54;
        let x_588 : vec2<f32> = (x_587 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_589 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_588.x, x_588.y, x_589.z, x_589.w);
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec2<f32> = (vec2<f32>(x_591.x, x_591.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_594 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
        let x_597 : vec2<f32> = u_xlat47;
        let x_598 : vec2<f32> = (x_597 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_599 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_598.x, x_598.y, x_599.z, x_599.w);
        let x_601 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_601.y, x_601.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_605 : f32 = u_xlat11.x;
        u_xlat12.z = x_605;
        let x_608 : f32 = u_xlat47.x;
        u_xlat12.w = x_608;
        let x_611 : f32 = u_xlat13.x;
        u_xlat10.z = x_611;
        let x_614 : f32 = u_xlat9.x;
        u_xlat10.w = x_614;
        let x_617 : vec4<f32> = u_xlat10;
        let x_619 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_617.z, x_617.w, x_617.x, x_617.z) + vec4<f32>(x_619.z, x_619.w, x_619.x, x_619.z));
        let x_623 : f32 = u_xlat12.y;
        u_xlat11.z = x_623;
        let x_626 : f32 = u_xlat47.y;
        u_xlat11.w = x_626;
        let x_629 : f32 = u_xlat10.y;
        u_xlat13.z = x_629;
        let x_632 : f32 = u_xlat9.z;
        u_xlat13.w = x_632;
        let x_634 : vec4<f32> = u_xlat11;
        let x_636 : vec4<f32> = u_xlat13;
        let x_638 : vec3<f32> = (vec3<f32>(x_634.z, x_634.y, x_634.w) + vec3<f32>(x_636.z, x_636.y, x_636.w));
        let x_639 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_638.x, x_638.y, x_638.z, x_639.w);
        let x_641 : vec4<f32> = u_xlat10;
        let x_643 : vec4<f32> = u_xlat14;
        let x_645 : vec3<f32> = (vec3<f32>(x_641.x, x_641.z, x_641.w) / vec3<f32>(x_643.z, x_643.w, x_643.y));
        let x_646 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_645.x, x_645.y, x_645.z, x_646.w);
        let x_648 : vec4<f32> = u_xlat10;
        let x_654 : vec3<f32> = (vec3<f32>(x_648.x, x_648.y, x_648.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_655 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_654.x, x_654.y, x_654.z, x_655.w);
        let x_657 : vec4<f32> = u_xlat13;
        let x_659 : vec4<f32> = u_xlat9;
        let x_661 : vec3<f32> = (vec3<f32>(x_657.z, x_657.y, x_657.w) / vec3<f32>(x_659.x, x_659.y, x_659.z));
        let x_662 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_661.x, x_661.y, x_661.z, x_662.w);
        let x_664 : vec4<f32> = u_xlat11;
        let x_666 : vec3<f32> = (vec3<f32>(x_664.x, x_664.y, x_664.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_667 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_666.x, x_666.y, x_666.z, x_667.w);
        let x_669 : vec4<f32> = u_xlat10;
        let x_672 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_674 : vec3<f32> = (vec3<f32>(x_669.y, x_669.x, x_669.z) * vec3<f32>(x_672.x, x_672.x, x_672.x));
        let x_675 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_674.x, x_674.y, x_674.z, x_675.w);
        let x_677 : vec4<f32> = u_xlat11;
        let x_680 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_682 : vec3<f32> = (vec3<f32>(x_677.x, x_677.y, x_677.z) * vec3<f32>(x_680.y, x_680.y, x_680.y));
        let x_683 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_682.x, x_682.y, x_682.z, x_683.w);
        let x_686 : f32 = u_xlat11.x;
        u_xlat10.w = x_686;
        let x_688 : vec4<f32> = u_xlat3;
        let x_691 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_694 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_688.x, x_688.y, x_688.x, x_688.y) * vec4<f32>(x_691.x, x_691.y, x_691.x, x_691.y)) + vec4<f32>(x_694.y, x_694.w, x_694.x, x_694.w));
        let x_697 : vec4<f32> = u_xlat3;
        let x_700 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_703 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_697.x, x_697.y) * vec2<f32>(x_700.x, x_700.y)) + vec2<f32>(x_703.z, x_703.w));
        let x_707 : f32 = u_xlat10.y;
        u_xlat11.w = x_707;
        let x_709 : vec4<f32> = u_xlat11;
        let x_710 : vec2<f32> = vec2<f32>(x_709.y, x_709.z);
        let x_711 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_711.x, x_710.x, x_711.z, x_710.y);
        let x_713 : vec4<f32> = u_xlat3;
        let x_716 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_719 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_713.x, x_713.y, x_713.x, x_713.y) * vec4<f32>(x_716.x, x_716.y, x_716.x, x_716.y)) + vec4<f32>(x_719.x, x_719.y, x_719.z, x_719.y));
        let x_722 : vec4<f32> = u_xlat3;
        let x_725 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_728 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_722.x, x_722.y, x_722.x, x_722.y) * vec4<f32>(x_725.x, x_725.y, x_725.x, x_725.y)) + vec4<f32>(x_728.w, x_728.y, x_728.w, x_728.z));
        let x_731 : vec4<f32> = u_xlat3;
        let x_734 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_731.x, x_731.y, x_731.x, x_731.y) * vec4<f32>(x_734.x, x_734.y, x_734.x, x_734.y)) + vec4<f32>(x_737.x, x_737.w, x_737.z, x_737.w));
        let x_741 : vec4<f32> = u_xlat9;
        let x_743 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_741.x, x_741.x, x_741.x, x_741.y) * vec4<f32>(x_743.z, x_743.w, x_743.y, x_743.z));
        let x_747 : vec4<f32> = u_xlat9;
        let x_749 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_747.y, x_747.y, x_747.z, x_747.z) * x_749);
        let x_753 : f32 = u_xlat9.z;
        let x_755 : f32 = u_xlat14.y;
        u_xlat68 = (x_753 * x_755);
        let x_758 : vec4<f32> = u_xlat12;
        let x_759 : vec2<f32> = vec2<f32>(x_758.x, x_758.y);
        let x_761 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec4;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat3.x = x_770;
        let x_773 : vec4<f32> = u_xlat12;
        let x_774 : vec2<f32> = vec2<f32>(x_773.z, x_773.w);
        let x_776 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_774.x, x_774.y, x_776);
        let x_784 : vec3<f32> = txVec5;
        let x_786 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_784.xy, x_784.z);
        u_xlat25 = x_786;
        let x_787 : f32 = u_xlat25;
        let x_789 : f32 = u_xlat15.y;
        u_xlat25 = (x_787 * x_789);
        let x_792 : f32 = u_xlat15.x;
        let x_794 : f32 = u_xlat3.x;
        let x_796 : f32 = u_xlat25;
        u_xlat3.x = ((x_792 * x_794) + x_796);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec6;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat25 = x_811;
        let x_813 : f32 = u_xlat15.z;
        let x_814 : f32 = u_xlat25;
        let x_817 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_813 * x_814) + x_817);
        let x_821 : vec4<f32> = u_xlat11;
        let x_822 : vec2<f32> = vec2<f32>(x_821.x, x_821.y);
        let x_824 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_822.x, x_822.y, x_824);
        let x_831 : vec3<f32> = txVec7;
        let x_833 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_831.xy, x_831.z);
        u_xlat25 = x_833;
        let x_835 : f32 = u_xlat15.w;
        let x_836 : f32 = u_xlat25;
        let x_839 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_835 * x_836) + x_839);
        let x_843 : vec4<f32> = u_xlat13;
        let x_844 : vec2<f32> = vec2<f32>(x_843.x, x_843.y);
        let x_846 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_844.x, x_844.y, x_846);
        let x_853 : vec3<f32> = txVec8;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat25 = x_855;
        let x_857 : f32 = u_xlat16.x;
        let x_858 : f32 = u_xlat25;
        let x_861 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_857 * x_858) + x_861);
        let x_865 : vec4<f32> = u_xlat13;
        let x_866 : vec2<f32> = vec2<f32>(x_865.z, x_865.w);
        let x_868 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_866.x, x_866.y, x_868);
        let x_875 : vec3<f32> = txVec9;
        let x_877 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_875.xy, x_875.z);
        u_xlat25 = x_877;
        let x_879 : f32 = u_xlat16.y;
        let x_880 : f32 = u_xlat25;
        let x_883 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_879 * x_880) + x_883);
        let x_887 : vec4<f32> = u_xlat11;
        let x_888 : vec2<f32> = vec2<f32>(x_887.z, x_887.w);
        let x_890 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_888.x, x_888.y, x_890);
        let x_897 : vec3<f32> = txVec10;
        let x_899 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_897.xy, x_897.z);
        u_xlat25 = x_899;
        let x_901 : f32 = u_xlat16.z;
        let x_902 : f32 = u_xlat25;
        let x_905 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_901 * x_902) + x_905);
        let x_909 : vec4<f32> = u_xlat10;
        let x_910 : vec2<f32> = vec2<f32>(x_909.x, x_909.y);
        let x_912 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_910.x, x_910.y, x_912);
        let x_919 : vec3<f32> = txVec11;
        let x_921 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_919.xy, x_919.z);
        u_xlat25 = x_921;
        let x_923 : f32 = u_xlat16.w;
        let x_924 : f32 = u_xlat25;
        let x_927 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_923 * x_924) + x_927);
        let x_931 : vec4<f32> = u_xlat10;
        let x_932 : vec2<f32> = vec2<f32>(x_931.z, x_931.w);
        let x_934 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec12;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_941.xy, x_941.z);
        u_xlat25 = x_943;
        let x_944 : f32 = u_xlat68;
        let x_945 : f32 = u_xlat25;
        let x_948 : f32 = u_xlat3.x;
        u_xlat67 = ((x_944 * x_945) + x_948);
      } else {
        let x_951 : vec3<f32> = u_xlat2;
        let x_954 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_957 : vec2<f32> = ((vec2<f32>(x_951.x, x_951.y) * vec2<f32>(x_954.z, x_954.w)) + vec2<f32>(0.5f, 0.5f));
        let x_958 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_957.x, x_957.y, x_958.z, x_958.w);
        let x_960 : vec4<f32> = u_xlat3;
        let x_962 : vec2<f32> = floor(vec2<f32>(x_960.x, x_960.y));
        let x_963 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_962.x, x_962.y, x_963.z, x_963.w);
        let x_965 : vec3<f32> = u_xlat2;
        let x_968 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_971 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_965.x, x_965.y) * vec2<f32>(x_968.z, x_968.w)) + -(vec2<f32>(x_971.x, x_971.y)));
        let x_975 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_975.x, x_975.x, x_975.y, x_975.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_978 : vec4<f32> = u_xlat9;
        let x_980 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_978.x, x_978.x, x_978.z, x_978.z) * vec4<f32>(x_980.x, x_980.x, x_980.z, x_980.z));
        let x_983 : vec4<f32> = u_xlat10;
        let x_987 : vec2<f32> = (vec2<f32>(x_983.y, x_983.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_988 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_988.x, x_987.x, x_988.z, x_987.y);
        let x_990 : vec4<f32> = u_xlat10;
        let x_993 : vec2<f32> = u_xlat47;
        let x_995 : vec2<f32> = ((vec2<f32>(x_990.x, x_990.z) * vec2<f32>(0.5f, 0.5f)) + -(x_993));
        let x_996 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_995.x, x_996.y, x_995.y, x_996.w);
        let x_998 : vec2<f32> = u_xlat47;
        let x_1000 : vec2<f32> = (-(x_998) + vec2<f32>(1.0f, 1.0f));
        let x_1001 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1000.x, x_1000.y, x_1001.z, x_1001.w);
        let x_1003 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1003, vec2<f32>(0.0f, 0.0f));
        let x_1005 : vec2<f32> = u_xlat54;
        let x_1007 : vec2<f32> = u_xlat54;
        let x_1009 : vec4<f32> = u_xlat10;
        let x_1011 : vec2<f32> = ((-(x_1005) * x_1007) + vec2<f32>(x_1009.x, x_1009.y));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1012.z, x_1012.w);
        let x_1014 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1014, vec2<f32>(0.0f, 0.0f));
        let x_1017 : vec2<f32> = u_xlat54;
        let x_1019 : vec2<f32> = u_xlat54;
        let x_1021 : vec4<f32> = u_xlat9;
        let x_1023 : vec2<f32> = ((-(x_1017) * x_1019) + vec2<f32>(x_1021.y, x_1021.w));
        let x_1024 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1023.x, x_1024.y, x_1023.y);
        let x_1026 : vec4<f32> = u_xlat10;
        let x_1029 : vec2<f32> = (vec2<f32>(x_1026.x, x_1026.y) + vec2<f32>(2.0f, 2.0f));
        let x_1030 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
        let x_1032 : vec3<f32> = u_xlat31;
        let x_1034 : vec2<f32> = (vec2<f32>(x_1032.x, x_1032.z) + vec2<f32>(2.0f, 2.0f));
        let x_1035 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1035.x, x_1034.x, x_1035.z, x_1034.y);
        let x_1038 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1038 * 0.081632003f);
        let x_1042 : vec4<f32> = u_xlat9;
        let x_1045 : vec3<f32> = (vec3<f32>(x_1042.z, x_1042.x, x_1042.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1046 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1045.x, x_1045.y, x_1045.z, x_1046.w);
        let x_1048 : vec4<f32> = u_xlat10;
        let x_1051 : vec2<f32> = (vec2<f32>(x_1048.x, x_1048.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1052 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1051.x, x_1051.y, x_1052.z, x_1052.w);
        let x_1055 : f32 = u_xlat13.y;
        u_xlat12.x = x_1055;
        let x_1057 : vec2<f32> = u_xlat47;
        let x_1064 : vec2<f32> = ((vec2<f32>(x_1057.x, x_1057.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1065 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1065.x, x_1064.x, x_1065.z, x_1064.y);
        let x_1067 : vec2<f32> = u_xlat47;
        let x_1071 : vec2<f32> = ((vec2<f32>(x_1067.x, x_1067.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1072 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1071.x, x_1072.y, x_1071.y, x_1072.w);
        let x_1075 : f32 = u_xlat9.x;
        u_xlat10.y = x_1075;
        let x_1078 : f32 = u_xlat11.y;
        u_xlat10.w = x_1078;
        let x_1080 : vec4<f32> = u_xlat10;
        let x_1081 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1080 + x_1081);
        let x_1083 : vec2<f32> = u_xlat47;
        let x_1086 : vec2<f32> = ((vec2<f32>(x_1083.y, x_1083.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1087 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1087.x, x_1086.x, x_1087.z, x_1086.y);
        let x_1089 : vec2<f32> = u_xlat47;
        let x_1092 : vec2<f32> = ((vec2<f32>(x_1089.y, x_1089.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1093 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1092.x, x_1093.y, x_1092.y, x_1093.w);
        let x_1096 : f32 = u_xlat9.y;
        u_xlat11.y = x_1096;
        let x_1098 : vec4<f32> = u_xlat11;
        let x_1099 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1098 + x_1099);
        let x_1101 : vec4<f32> = u_xlat10;
        let x_1102 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1101 / x_1102);
        let x_1104 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1104 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1110 : vec4<f32> = u_xlat11;
        let x_1111 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1110 / x_1111);
        let x_1113 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1113 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1115 : vec4<f32> = u_xlat10;
        let x_1118 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1115.w, x_1115.x, x_1115.y, x_1115.z) * vec4<f32>(x_1118.x, x_1118.x, x_1118.x, x_1118.x));
        let x_1121 : vec4<f32> = u_xlat11;
        let x_1124 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1121.x, x_1121.w, x_1121.y, x_1121.z) * vec4<f32>(x_1124.y, x_1124.y, x_1124.y, x_1124.y));
        let x_1127 : vec4<f32> = u_xlat10;
        let x_1128 : vec3<f32> = vec3<f32>(x_1127.y, x_1127.z, x_1127.w);
        let x_1129 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1128.x, x_1129.y, x_1128.y, x_1128.z);
        let x_1132 : f32 = u_xlat11.x;
        u_xlat13.y = x_1132;
        let x_1134 : vec4<f32> = u_xlat3;
        let x_1137 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1140 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1134.x, x_1134.y, x_1134.x, x_1134.y) * vec4<f32>(x_1137.x, x_1137.y, x_1137.x, x_1137.y)) + vec4<f32>(x_1140.x, x_1140.y, x_1140.z, x_1140.y));
        let x_1143 : vec4<f32> = u_xlat3;
        let x_1146 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1149 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1143.x, x_1143.y) * vec2<f32>(x_1146.x, x_1146.y)) + vec2<f32>(x_1149.w, x_1149.y));
        let x_1153 : f32 = u_xlat13.y;
        u_xlat10.y = x_1153;
        let x_1156 : f32 = u_xlat11.z;
        u_xlat13.y = x_1156;
        let x_1158 : vec4<f32> = u_xlat3;
        let x_1161 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1164 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1158.x, x_1158.y, x_1158.x, x_1158.y) * vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y)) + vec4<f32>(x_1164.x, x_1164.y, x_1164.z, x_1164.y));
        let x_1167 : vec4<f32> = u_xlat3;
        let x_1170 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1173 : vec4<f32> = u_xlat13;
        let x_1175 : vec2<f32> = ((vec2<f32>(x_1167.x, x_1167.y) * vec2<f32>(x_1170.x, x_1170.y)) + vec2<f32>(x_1173.w, x_1173.y));
        let x_1176 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1175.x, x_1175.y, x_1176.z, x_1176.w);
        let x_1179 : f32 = u_xlat13.y;
        u_xlat10.z = x_1179;
        let x_1182 : vec4<f32> = u_xlat3;
        let x_1185 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1188 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1182.x, x_1182.y, x_1182.x, x_1182.y) * vec4<f32>(x_1185.x, x_1185.y, x_1185.x, x_1185.y)) + vec4<f32>(x_1188.x, x_1188.y, x_1188.x, x_1188.z));
        let x_1192 : f32 = u_xlat11.w;
        u_xlat13.y = x_1192;
        let x_1195 : vec4<f32> = u_xlat3;
        let x_1198 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1201 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1195.x, x_1195.y, x_1195.x, x_1195.y) * vec4<f32>(x_1198.x, x_1198.y, x_1198.x, x_1198.y)) + vec4<f32>(x_1201.x, x_1201.y, x_1201.z, x_1201.y));
        let x_1205 : vec4<f32> = u_xlat3;
        let x_1208 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1211 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1205.x, x_1205.y) * vec2<f32>(x_1208.x, x_1208.y)) + vec2<f32>(x_1211.w, x_1211.y));
        let x_1215 : f32 = u_xlat13.y;
        u_xlat10.w = x_1215;
        let x_1218 : vec4<f32> = u_xlat3;
        let x_1221 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1224 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1218.x, x_1218.y) * vec2<f32>(x_1221.x, x_1221.y)) + vec2<f32>(x_1224.x, x_1224.w));
        let x_1227 : vec4<f32> = u_xlat13;
        let x_1228 : vec3<f32> = vec3<f32>(x_1227.x, x_1227.z, x_1227.w);
        let x_1229 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1228.x, x_1229.y, x_1228.y, x_1228.z);
        let x_1231 : vec4<f32> = u_xlat3;
        let x_1234 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1237 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1231.x, x_1231.y, x_1231.x, x_1231.y) * vec4<f32>(x_1234.x, x_1234.y, x_1234.x, x_1234.y)) + vec4<f32>(x_1237.x, x_1237.y, x_1237.z, x_1237.y));
        let x_1241 : vec4<f32> = u_xlat3;
        let x_1244 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1247 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1241.x, x_1241.y) * vec2<f32>(x_1244.x, x_1244.y)) + vec2<f32>(x_1247.w, x_1247.y));
        let x_1251 : f32 = u_xlat10.x;
        u_xlat11.x = x_1251;
        let x_1253 : vec4<f32> = u_xlat3;
        let x_1256 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_1259 : vec4<f32> = u_xlat11;
        let x_1261 : vec2<f32> = ((vec2<f32>(x_1253.x, x_1253.y) * vec2<f32>(x_1256.x, x_1256.y)) + vec2<f32>(x_1259.x, x_1259.y));
        let x_1262 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1261.x, x_1261.y, x_1262.z, x_1262.w);
        let x_1265 : vec4<f32> = u_xlat9;
        let x_1267 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1265.x, x_1265.x, x_1265.x, x_1265.x) * x_1267);
        let x_1270 : vec4<f32> = u_xlat9;
        let x_1272 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1270.y, x_1270.y, x_1270.y, x_1270.y) * x_1272);
        let x_1275 : vec4<f32> = u_xlat9;
        let x_1277 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1275.z, x_1275.z, x_1275.z, x_1275.z) * x_1277);
        let x_1279 : vec4<f32> = u_xlat9;
        let x_1281 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1279.w, x_1279.w, x_1279.w, x_1279.w) * x_1281);
        let x_1284 : vec4<f32> = u_xlat14;
        let x_1285 : vec2<f32> = vec2<f32>(x_1284.x, x_1284.y);
        let x_1287 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1285.x, x_1285.y, x_1287);
        let x_1294 : vec3<f32> = txVec13;
        let x_1296 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1294.xy, x_1294.z);
        u_xlat68 = x_1296;
        let x_1298 : vec4<f32> = u_xlat14;
        let x_1299 : vec2<f32> = vec2<f32>(x_1298.z, x_1298.w);
        let x_1301 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1299.x, x_1299.y, x_1301);
        let x_1309 : vec3<f32> = txVec14;
        let x_1311 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1309.xy, x_1309.z);
        u_xlat70 = x_1311;
        let x_1312 : f32 = u_xlat70;
        let x_1314 : f32 = u_xlat19.y;
        u_xlat70 = (x_1312 * x_1314);
        let x_1317 : f32 = u_xlat19.x;
        let x_1318 : f32 = u_xlat68;
        let x_1320 : f32 = u_xlat70;
        u_xlat68 = ((x_1317 * x_1318) + x_1320);
        let x_1323 : vec2<f32> = u_xlat47;
        let x_1325 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1323.x, x_1323.y, x_1325);
        let x_1332 : vec3<f32> = txVec15;
        let x_1334 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1332.xy, x_1332.z);
        u_xlat47.x = x_1334;
        let x_1337 : f32 = u_xlat19.z;
        let x_1339 : f32 = u_xlat47.x;
        let x_1341 : f32 = u_xlat68;
        u_xlat68 = ((x_1337 * x_1339) + x_1341);
        let x_1344 : vec4<f32> = u_xlat17;
        let x_1345 : vec2<f32> = vec2<f32>(x_1344.x, x_1344.y);
        let x_1347 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1345.x, x_1345.y, x_1347);
        let x_1354 : vec3<f32> = txVec16;
        let x_1356 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1354.xy, x_1354.z);
        u_xlat47.x = x_1356;
        let x_1359 : f32 = u_xlat19.w;
        let x_1361 : f32 = u_xlat47.x;
        let x_1363 : f32 = u_xlat68;
        u_xlat68 = ((x_1359 * x_1361) + x_1363);
        let x_1366 : vec4<f32> = u_xlat15;
        let x_1367 : vec2<f32> = vec2<f32>(x_1366.x, x_1366.y);
        let x_1369 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1367.x, x_1367.y, x_1369);
        let x_1376 : vec3<f32> = txVec17;
        let x_1378 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1376.xy, x_1376.z);
        u_xlat47.x = x_1378;
        let x_1381 : f32 = u_xlat20.x;
        let x_1383 : f32 = u_xlat47.x;
        let x_1385 : f32 = u_xlat68;
        u_xlat68 = ((x_1381 * x_1383) + x_1385);
        let x_1388 : vec4<f32> = u_xlat15;
        let x_1389 : vec2<f32> = vec2<f32>(x_1388.z, x_1388.w);
        let x_1391 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec18;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat20.y;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat68;
        u_xlat68 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat16;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec19;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat47.x = x_1422;
        let x_1425 : f32 = u_xlat20.z;
        let x_1427 : f32 = u_xlat47.x;
        let x_1429 : f32 = u_xlat68;
        u_xlat68 = ((x_1425 * x_1427) + x_1429);
        let x_1432 : vec4<f32> = u_xlat17;
        let x_1433 : vec2<f32> = vec2<f32>(x_1432.z, x_1432.w);
        let x_1435 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1433.x, x_1433.y, x_1435);
        let x_1442 : vec3<f32> = txVec20;
        let x_1444 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1442.xy, x_1442.z);
        u_xlat47.x = x_1444;
        let x_1447 : f32 = u_xlat20.w;
        let x_1449 : f32 = u_xlat47.x;
        let x_1451 : f32 = u_xlat68;
        u_xlat68 = ((x_1447 * x_1449) + x_1451);
        let x_1454 : vec4<f32> = u_xlat18;
        let x_1455 : vec2<f32> = vec2<f32>(x_1454.x, x_1454.y);
        let x_1457 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1455.x, x_1455.y, x_1457);
        let x_1464 : vec3<f32> = txVec21;
        let x_1466 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1464.xy, x_1464.z);
        u_xlat47.x = x_1466;
        let x_1469 : f32 = u_xlat21.x;
        let x_1471 : f32 = u_xlat47.x;
        let x_1473 : f32 = u_xlat68;
        u_xlat68 = ((x_1469 * x_1471) + x_1473);
        let x_1476 : vec4<f32> = u_xlat18;
        let x_1477 : vec2<f32> = vec2<f32>(x_1476.z, x_1476.w);
        let x_1479 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec22;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat47.x = x_1488;
        let x_1491 : f32 = u_xlat21.y;
        let x_1493 : f32 = u_xlat47.x;
        let x_1495 : f32 = u_xlat68;
        u_xlat68 = ((x_1491 * x_1493) + x_1495);
        let x_1498 : vec2<f32> = u_xlat32;
        let x_1500 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1498.x, x_1498.y, x_1500);
        let x_1507 : vec3<f32> = txVec23;
        let x_1509 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1507.xy, x_1507.z);
        u_xlat47.x = x_1509;
        let x_1512 : f32 = u_xlat21.z;
        let x_1514 : f32 = u_xlat47.x;
        let x_1516 : f32 = u_xlat68;
        u_xlat68 = ((x_1512 * x_1514) + x_1516);
        let x_1519 : vec2<f32> = u_xlat60;
        let x_1521 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1519.x, x_1519.y, x_1521);
        let x_1528 : vec3<f32> = txVec24;
        let x_1530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1528.xy, x_1528.z);
        u_xlat47.x = x_1530;
        let x_1533 : f32 = u_xlat21.w;
        let x_1535 : f32 = u_xlat47.x;
        let x_1537 : f32 = u_xlat68;
        u_xlat68 = ((x_1533 * x_1535) + x_1537);
        let x_1540 : vec4<f32> = u_xlat13;
        let x_1541 : vec2<f32> = vec2<f32>(x_1540.x, x_1540.y);
        let x_1543 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1541.x, x_1541.y, x_1543);
        let x_1550 : vec3<f32> = txVec25;
        let x_1552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1550.xy, x_1550.z);
        u_xlat47.x = x_1552;
        let x_1555 : f32 = u_xlat9.x;
        let x_1557 : f32 = u_xlat47.x;
        let x_1559 : f32 = u_xlat68;
        u_xlat68 = ((x_1555 * x_1557) + x_1559);
        let x_1562 : vec4<f32> = u_xlat13;
        let x_1563 : vec2<f32> = vec2<f32>(x_1562.z, x_1562.w);
        let x_1565 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1563.x, x_1563.y, x_1565);
        let x_1572 : vec3<f32> = txVec26;
        let x_1574 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1572.xy, x_1572.z);
        u_xlat47.x = x_1574;
        let x_1577 : f32 = u_xlat9.y;
        let x_1579 : f32 = u_xlat47.x;
        let x_1581 : f32 = u_xlat68;
        u_xlat68 = ((x_1577 * x_1579) + x_1581);
        let x_1584 : vec2<f32> = u_xlat55;
        let x_1586 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1584.x, x_1584.y, x_1586);
        let x_1593 : vec3<f32> = txVec27;
        let x_1595 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1593.xy, x_1593.z);
        u_xlat47.x = x_1595;
        let x_1598 : f32 = u_xlat9.z;
        let x_1600 : f32 = u_xlat47.x;
        let x_1602 : f32 = u_xlat68;
        u_xlat68 = ((x_1598 * x_1600) + x_1602);
        let x_1605 : vec4<f32> = u_xlat3;
        let x_1606 : vec2<f32> = vec2<f32>(x_1605.x, x_1605.y);
        let x_1608 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1606.x, x_1606.y, x_1608);
        let x_1615 : vec3<f32> = txVec28;
        let x_1617 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1615.xy, x_1615.z);
        u_xlat3.x = x_1617;
        let x_1620 : f32 = u_xlat9.w;
        let x_1622 : f32 = u_xlat3.x;
        let x_1624 : f32 = u_xlat68;
        u_xlat67 = ((x_1620 * x_1622) + x_1624);
      }
    }
  } else {
    let x_1628 : vec3<f32> = u_xlat2;
    let x_1629 : vec2<f32> = vec2<f32>(x_1628.x, x_1628.y);
    let x_1631 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1629.x, x_1629.y, x_1631);
    let x_1638 : vec3<f32> = txVec29;
    let x_1640 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1638.xy, x_1638.z);
    u_xlat67 = x_1640;
  }
  let x_1642 : f32 = x_360.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1642) + 1.0f);
  let x_1646 : f32 = u_xlat67;
  let x_1648 : f32 = x_360.x_MainLightShadowParams.x;
  let x_1651 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1646 * x_1648) + x_1651);
  let x_1655 : f32 = u_xlat2.z;
  u_xlatb24 = (0.0f >= x_1655);
  let x_1659 : f32 = u_xlat2.z;
  u_xlatb46 = (x_1659 >= 1.0f);
  let x_1661 : bool = u_xlatb46;
  let x_1662 : bool = u_xlatb24;
  u_xlatb24 = (x_1661 | x_1662);
  let x_1664 : bool = u_xlatb24;
  let x_1665 : f32 = u_xlat67;
  u_xlat67 = select(x_1665, 1.0f, x_1664);
  let x_1667 : vec3<f32> = u_xlat1;
  let x_1669 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat1.x = dot(x_1667, -(vec3<f32>(x_1669.x, x_1669.y, x_1669.z)));
  let x_1675 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1675, 0.0f, 1.0f);
  let x_1679 : f32 = u_xlat67;
  let x_1683 : vec4<f32> = x_158.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1679, x_1679, x_1679) * vec3<f32>(x_1683.x, x_1683.y, x_1683.z));
  let x_1686 : vec3<f32> = u_xlat23;
  let x_1687 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1686 * vec3<f32>(x_1687.x, x_1687.x, x_1687.x));
  let x_1690 : vec3<f32> = u_xlat1;
  let x_1691 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1690 * vec3<f32>(x_1691.x, x_1691.y, x_1691.z));
  let x_1695 : f32 = x_94.unity_LODFade.x;
  u_xlatb67 = (x_1695 < 0.0f);
  let x_1699 : f32 = x_94.unity_LODFade.x;
  u_xlat24 = (x_1699 + 1.0f);
  let x_1701 : bool = u_xlatb67;
  if (x_1701) {
    let x_1705 : f32 = u_xlat24;
    x_1702 = x_1705;
  } else {
    let x_1708 : f32 = x_94.unity_LODFade.x;
    x_1702 = x_1708;
  }
  let x_1709 : f32 = x_1702;
  u_xlat67 = x_1709;
  let x_1710 : f32 = u_xlat67;
  u_xlatb24 = (0.5f >= x_1710);
  let x_1712 : vec3<f32> = u_xlat5;
  let x_1716 : vec4<f32> = x_158.x_ScreenParams;
  let x_1718 : vec3<f32> = (abs(x_1712) * vec3<f32>(x_1716.x, x_1716.y, x_1716.x));
  let x_1719 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1718.x, x_1718.y, x_1718.z, x_1719.w);
  let x_1724 : vec4<f32> = u_xlat3;
  u_xlatu3 = vec3<u32>(vec3<f32>(x_1724.x, x_1724.y, x_1724.z));
  let x_1729 : u32 = u_xlatu3.z;
  u_xlatu46 = (x_1729 * 1025u);
  let x_1733 : u32 = u_xlatu46;
  u_xlatu68 = (x_1733 >> 6u);
  let x_1737 : u32 = u_xlatu68;
  let x_1738 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1737 ^ x_1738));
  let x_1741 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1741) * 9u);
  let x_1745 : u32 = u_xlatu46;
  u_xlatu68 = (x_1745 >> 11u);
  let x_1748 : u32 = u_xlatu68;
  let x_1749 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1748 ^ x_1749));
  let x_1752 : i32 = u_xlati46;
  u_xlati46 = (x_1752 * 32769i);
  let x_1755 : i32 = u_xlati46;
  let x_1758 : u32 = u_xlatu3.y;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1755) ^ x_1758));
  let x_1761 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1761) * 1025u);
  let x_1764 : u32 = u_xlatu46;
  u_xlatu68 = (x_1764 >> 6u);
  let x_1766 : u32 = u_xlatu68;
  let x_1767 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1766 ^ x_1767));
  let x_1770 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1770) * 9u);
  let x_1773 : u32 = u_xlatu46;
  u_xlatu68 = (x_1773 >> 11u);
  let x_1775 : u32 = u_xlatu68;
  let x_1776 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1775 ^ x_1776));
  let x_1779 : i32 = u_xlati46;
  u_xlati46 = (x_1779 * 32769i);
  let x_1781 : i32 = u_xlati46;
  let x_1784 : u32 = u_xlatu3.x;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1781) ^ x_1784));
  let x_1787 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1787) * 1025u);
  let x_1790 : u32 = u_xlatu46;
  u_xlatu68 = (x_1790 >> 6u);
  let x_1792 : u32 = u_xlatu68;
  let x_1793 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1792 ^ x_1793));
  let x_1796 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1796) * 9u);
  let x_1799 : u32 = u_xlatu46;
  u_xlatu68 = (x_1799 >> 11u);
  let x_1801 : u32 = u_xlatu68;
  let x_1802 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1801 ^ x_1802));
  let x_1805 : i32 = u_xlati46;
  u_xlati46 = (x_1805 * 32769i);
  param = 1065353216i;
  let x_1812 : i32 = u_xlati46;
  param_1 = x_1812;
  param_2 = 0i;
  param_3 = 23i;
  let x_1815 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat46 = bitcast<f32>(x_1815);
  let x_1817 : f32 = u_xlat46;
  u_xlat46 = (x_1817 + -1.0f);
  let x_1819 : f32 = u_xlat46;
  u_xlat68 = (-(x_1819) + 1.0f);
  let x_1822 : bool = u_xlatb24;
  let x_1823 : f32 = u_xlat46;
  let x_1824 : f32 = u_xlat68;
  u_xlat24 = select(x_1824, x_1823, x_1822);
  let x_1826 : f32 = u_xlat67;
  let x_1828 : f32 = u_xlat24;
  u_xlat67 = ((x_1826 * 2.0f) + -(x_1828));
  let x_1831 : f32 = u_xlat67;
  let x_1833 : f32 = u_xlat6.w;
  u_xlat24 = (x_1831 * x_1833);
  let x_1835 : f32 = u_xlat24;
  u_xlatb46 = (x_1835 >= 0.400000006f);
  let x_1838 : bool = u_xlatb46;
  let x_1839 : f32 = u_xlat24;
  u_xlat46 = select(0.0f, x_1839, x_1838);
  let x_1842 : f32 = u_xlat6.w;
  let x_1843 : f32 = u_xlat67;
  u_xlat67 = ((x_1842 * x_1843) + -0.400000006f);
  let x_1847 : f32 = u_xlat24;
  u_xlat68 = dpdxCoarse(x_1847);
  let x_1849 : f32 = u_xlat24;
  u_xlat24 = dpdyCoarse(x_1849);
  let x_1851 : f32 = u_xlat24;
  let x_1853 : f32 = u_xlat68;
  u_xlat24 = (abs(x_1851) + abs(x_1853));
  let x_1856 : f32 = u_xlat24;
  u_xlat24 = max(x_1856, 0.0001f);
  let x_1859 : f32 = u_xlat67;
  let x_1860 : f32 = u_xlat24;
  u_xlat67 = (x_1859 / x_1860);
  let x_1862 : f32 = u_xlat67;
  u_xlat67 = (x_1862 + 0.5f);
  let x_1864 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1864, 0.0f, 1.0f);
  let x_1867 : f32 = x_158.x_AlphaToMaskAvailable;
  u_xlatb24 = !((x_1867 == 0.0f));
  let x_1869 : bool = u_xlatb24;
  let x_1870 : f32 = u_xlat67;
  let x_1871 : f32 = u_xlat46;
  u_xlat67 = select(x_1871, x_1870, x_1869);
  let x_1873 : f32 = u_xlat67;
  u_xlat46 = (x_1873 + -0.0001f);
  let x_1876 : f32 = u_xlat46;
  u_xlatb46 = (x_1876 < 0.0f);
  let x_1878 : bool = u_xlatb46;
  if (((select(0i, 1i, x_1878) * -1i) != 0i)) {
    discard;
  }
  let x_1886 : vec3<f32> = u_xlat22;
  let x_1887 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_1886 * vec3<f32>(x_1887.y, x_1887.y, x_1887.y));
  let x_1890 : vec3<f32> = u_xlat30;
  let x_1892 : vec4<f32> = vs_INTERP2;
  let x_1895 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1890.x, x_1890.x, x_1890.x) * vec3<f32>(x_1892.x, x_1892.y, x_1892.z)) + x_1895);
  let x_1897 : vec3<f32> = u_xlat30;
  let x_1899 : vec3<f32> = vs_INTERP1;
  let x_1901 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1897.z, x_1897.z, x_1897.z) * x_1899) + x_1901);
  let x_1903 : vec3<f32> = u_xlat22;
  let x_1904 : vec3<f32> = u_xlat22;
  u_xlat46 = dot(x_1903, x_1904);
  let x_1906 : f32 = u_xlat46;
  u_xlat46 = inverseSqrt(x_1906);
  let x_1908 : vec3<f32> = u_xlat22;
  let x_1909 : f32 = u_xlat46;
  let x_1911 : vec3<f32> = (x_1908 * vec3<f32>(x_1909, x_1909, x_1909));
  let x_1912 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1911.x, x_1911.y, x_1911.z, x_1912.w);
  let x_1915 : f32 = vs_INTERP0.y;
  let x_1917 : f32 = x_158.unity_MatrixV[1i].z;
  u_xlat22.x = (x_1915 * x_1917);
  let x_1921 : f32 = x_158.unity_MatrixV[0i].z;
  let x_1923 : f32 = vs_INTERP0.x;
  let x_1926 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1921 * x_1923) + x_1926);
  let x_1930 : f32 = x_158.unity_MatrixV[2i].z;
  let x_1932 : f32 = vs_INTERP0.z;
  let x_1935 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1930 * x_1932) + x_1935);
  let x_1939 : f32 = u_xlat22.x;
  let x_1941 : f32 = x_158.unity_MatrixV[3i].z;
  u_xlat22.x = (x_1939 + x_1941);
  let x_1945 : f32 = u_xlat22.x;
  let x_1949 : f32 = x_158.x_ProjectionParams.y;
  u_xlat22.x = (-(x_1945) + -(x_1949));
  let x_1954 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_1954, 0.0f);
  let x_1958 : f32 = u_xlat22.x;
  let x_1961 : f32 = x_158.unity_FogParams.x;
  u_xlat22.x = (x_1958 * x_1961);
  u_xlat3.w = 1.0f;
  let x_1967 : vec4<f32> = x_94.unity_SHAr;
  let x_1968 : vec4<f32> = u_xlat3;
  u_xlat5.x = dot(x_1967, x_1968);
  let x_1973 : vec4<f32> = x_94.unity_SHAg;
  let x_1974 : vec4<f32> = u_xlat3;
  u_xlat5.y = dot(x_1973, x_1974);
  let x_1979 : vec4<f32> = x_94.unity_SHAb;
  let x_1980 : vec4<f32> = u_xlat3;
  u_xlat5.z = dot(x_1979, x_1980);
  let x_1983 : vec4<f32> = u_xlat3;
  let x_1985 : vec4<f32> = u_xlat3;
  u_xlat6 = (vec4<f32>(x_1983.y, x_1983.z, x_1983.z, x_1983.x) * vec4<f32>(x_1985.x, x_1985.y, x_1985.z, x_1985.z));
  let x_1990 : vec4<f32> = x_94.unity_SHBr;
  let x_1991 : vec4<f32> = u_xlat6;
  u_xlat9.x = dot(x_1990, x_1991);
  let x_1996 : vec4<f32> = x_94.unity_SHBg;
  let x_1997 : vec4<f32> = u_xlat6;
  u_xlat9.y = dot(x_1996, x_1997);
  let x_2001 : vec4<f32> = x_94.unity_SHBb;
  let x_2002 : vec4<f32> = u_xlat6;
  u_xlat9.z = dot(x_2001, x_2002);
  let x_2007 : f32 = u_xlat3.y;
  let x_2009 : f32 = u_xlat3.y;
  u_xlat44.x = (x_2007 * x_2009);
  let x_2013 : f32 = u_xlat3.x;
  let x_2015 : f32 = u_xlat3.x;
  let x_2018 : f32 = u_xlat44.x;
  u_xlat44.x = ((x_2013 * x_2015) + -(x_2018));
  let x_2024 : vec4<f32> = x_94.unity_SHC;
  let x_2026 : vec2<f32> = u_xlat44;
  let x_2029 : vec4<f32> = u_xlat9;
  let x_2031 : vec3<f32> = ((vec3<f32>(x_2024.x, x_2024.y, x_2024.z) * vec3<f32>(x_2026.x, x_2026.x, x_2026.x)) + vec3<f32>(x_2029.x, x_2029.y, x_2029.z));
  let x_2032 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2031.x, x_2031.y, x_2031.z, x_2032.w);
  let x_2034 : vec3<f32> = u_xlat5;
  let x_2035 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_2034 + vec3<f32>(x_2035.x, x_2035.y, x_2035.z));
  let x_2038 : vec3<f32> = u_xlat5;
  u_xlat5 = max(x_2038, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2042 : vec4<f32> = x_158.x_ScaledScreenParams;
  let x_2043 : vec2<f32> = vec2<f32>(x_2042.x, x_2042.y);
  u_xlat44 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2043.x, x_2043.y));
  let x_2048 : vec2<f32> = u_xlat44;
  let x_2049 : vec4<f32> = hlslcc_FragCoord;
  let x_2051 : vec2<f32> = (x_2048 * vec2<f32>(x_2049.x, x_2049.y));
  let x_2052 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2051.x, x_2051.y, x_2052.z, x_2052.w);
  let x_2055 : f32 = u_xlat6.y;
  let x_2058 : f32 = x_158.x_ScaleBiasRt.x;
  let x_2061 : f32 = x_158.x_ScaleBiasRt.y;
  u_xlat44.x = ((x_2055 * x_2058) + x_2061);
  let x_2065 : f32 = u_xlat44.x;
  u_xlat6.z = (-(x_2065) + 1.0f);
  let x_2070 : f32 = u_xlat8.x;
  u_xlat8.x = x_2070;
  let x_2073 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2073, 0.0f, 1.0f);
  let x_2076 : f32 = u_xlat67;
  u_xlat67 = x_2076;
  let x_2077 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2077, 0.0f, 1.0f);
  let x_2079 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2079 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2084 : f32 = u_xlat8.x;
  u_xlat44.x = (-(x_2084) + 1.0f);
  let x_2090 : f32 = u_xlat44.x;
  let x_2092 : f32 = u_xlat44.x;
  u_xlat66 = (x_2090 * x_2092);
  let x_2094 : f32 = u_xlat66;
  u_xlat66 = max(x_2094, 0.0078125f);
  let x_2097 : f32 = u_xlat66;
  let x_2098 : f32 = u_xlat66;
  u_xlat46 = (x_2097 * x_2098);
  let x_2101 : f32 = u_xlat8.x;
  u_xlat68 = (x_2101 + 0.040000021f);
  let x_2104 : f32 = u_xlat68;
  u_xlat68 = min(x_2104, 1.0f);
  let x_2107 : f32 = u_xlat66;
  u_xlat69 = ((x_2107 * 4.0f) + 2.0f);
  let x_2116 : vec4<f32> = u_xlat6;
  let x_2119 : f32 = x_158.x_GlobalMipBias.x;
  let x_2120 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2116.x, x_2116.z), x_2119);
  u_xlat70 = x_2120.x;
  let x_2123 : f32 = u_xlat70;
  u_xlat71 = (x_2123 + -1.0f);
  let x_2127 : f32 = x_158.x_AmbientOcclusionParam.w;
  let x_2128 : f32 = u_xlat71;
  u_xlat71 = ((x_2127 * x_2128) + 1.0f);
  let x_2131 : f32 = u_xlat70;
  let x_2133 : f32 = vs_INTERP4.w;
  u_xlat70 = min(x_2131, x_2133);
  let x_2135 : bool = u_xlatb0;
  if (x_2135) {
    let x_2139 : f32 = x_360.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2139 == 1.0f);
    let x_2141 : bool = u_xlatb0;
    if (x_2141) {
      let x_2145 : vec4<f32> = vs_INTERP9;
      let x_2148 : vec4<f32> = x_360.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_2145.x, x_2145.y, x_2145.x, x_2145.y) + x_2148);
      let x_2151 : vec4<f32> = u_xlat6;
      let x_2152 : vec2<f32> = vec2<f32>(x_2151.x, x_2151.y);
      let x_2154 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2152.x, x_2152.y, x_2154);
      let x_2161 : vec3<f32> = txVec30;
      let x_2163 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2161.xy, x_2161.z);
      u_xlat8.x = x_2163;
      let x_2166 : vec4<f32> = u_xlat6;
      let x_2167 : vec2<f32> = vec2<f32>(x_2166.z, x_2166.w);
      let x_2169 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2167.x, x_2167.y, x_2169);
      let x_2176 : vec3<f32> = txVec31;
      let x_2178 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2176.xy, x_2176.z);
      u_xlat8.y = x_2178;
      let x_2180 : vec4<f32> = vs_INTERP9;
      let x_2183 : vec4<f32> = x_360.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_2180.x, x_2180.y, x_2180.x, x_2180.y) + x_2183);
      let x_2186 : vec4<f32> = u_xlat6;
      let x_2187 : vec2<f32> = vec2<f32>(x_2186.x, x_2186.y);
      let x_2189 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2187.x, x_2187.y, x_2189);
      let x_2196 : vec3<f32> = txVec32;
      let x_2198 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2196.xy, x_2196.z);
      u_xlat8.z = x_2198;
      let x_2201 : vec4<f32> = u_xlat6;
      let x_2202 : vec2<f32> = vec2<f32>(x_2201.z, x_2201.w);
      let x_2204 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2202.x, x_2202.y, x_2204);
      let x_2211 : vec3<f32> = txVec33;
      let x_2213 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2211.xy, x_2211.z);
      u_xlat8.w = x_2213;
      let x_2215 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2215, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2221 : f32 = x_360.x_MainLightShadowParams.y;
      u_xlatb6 = (x_2221 == 2.0f);
      let x_2223 : bool = u_xlatb6;
      if (x_2223) {
        let x_2226 : vec4<f32> = vs_INTERP9;
        let x_2229 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2232 : vec2<f32> = ((vec2<f32>(x_2226.x, x_2226.y) * vec2<f32>(x_2229.z, x_2229.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2233 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2232.x, x_2232.y, x_2233.z, x_2233.w);
        let x_2235 : vec4<f32> = u_xlat6;
        let x_2237 : vec2<f32> = floor(vec2<f32>(x_2235.x, x_2235.y));
        let x_2238 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2237.x, x_2237.y, x_2238.z, x_2238.w);
        let x_2241 : vec4<f32> = vs_INTERP9;
        let x_2244 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2247 : vec4<f32> = u_xlat6;
        u_xlat50 = ((vec2<f32>(x_2241.x, x_2241.y) * vec2<f32>(x_2244.z, x_2244.w)) + -(vec2<f32>(x_2247.x, x_2247.y)));
        let x_2251 : vec2<f32> = u_xlat50;
        u_xlat8 = (vec4<f32>(x_2251.x, x_2251.x, x_2251.y, x_2251.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2254 : vec4<f32> = u_xlat8;
        let x_2256 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2254.x, x_2254.x, x_2254.z, x_2254.z) * vec4<f32>(x_2256.x, x_2256.x, x_2256.z, x_2256.z));
        let x_2259 : vec4<f32> = u_xlat9;
        let x_2261 : vec2<f32> = (vec2<f32>(x_2259.y, x_2259.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2262 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2261.x, x_2262.y, x_2261.y, x_2262.w);
        let x_2264 : vec4<f32> = u_xlat9;
        let x_2267 : vec2<f32> = u_xlat50;
        let x_2269 : vec2<f32> = ((vec2<f32>(x_2264.x, x_2264.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2267));
        let x_2270 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2269.x, x_2269.y, x_2270.z, x_2270.w);
        let x_2273 : vec2<f32> = u_xlat50;
        u_xlat53 = (-(x_2273) + vec2<f32>(1.0f, 1.0f));
        let x_2276 : vec2<f32> = u_xlat50;
        let x_2277 : vec2<f32> = min(x_2276, vec2<f32>(0.0f, 0.0f));
        let x_2278 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2277.x, x_2277.y, x_2278.z, x_2278.w);
        let x_2280 : vec4<f32> = u_xlat10;
        let x_2283 : vec4<f32> = u_xlat10;
        let x_2286 : vec2<f32> = u_xlat53;
        let x_2287 : vec2<f32> = ((-(vec2<f32>(x_2280.x, x_2280.y)) * vec2<f32>(x_2283.x, x_2283.y)) + x_2286);
        let x_2288 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2287.x, x_2287.y, x_2288.z, x_2288.w);
        let x_2290 : vec2<f32> = u_xlat50;
        u_xlat50 = max(x_2290, vec2<f32>(0.0f, 0.0f));
        let x_2292 : vec2<f32> = u_xlat50;
        let x_2294 : vec2<f32> = u_xlat50;
        let x_2296 : vec4<f32> = u_xlat8;
        u_xlat50 = ((-(x_2292) * x_2294) + vec2<f32>(x_2296.y, x_2296.w));
        let x_2299 : vec4<f32> = u_xlat10;
        let x_2301 : vec2<f32> = (vec2<f32>(x_2299.x, x_2299.y) + vec2<f32>(1.0f, 1.0f));
        let x_2302 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2301.x, x_2301.y, x_2302.z, x_2302.w);
        let x_2304 : vec2<f32> = u_xlat50;
        u_xlat50 = (x_2304 + vec2<f32>(1.0f, 1.0f));
        let x_2306 : vec4<f32> = u_xlat9;
        let x_2308 : vec2<f32> = (vec2<f32>(x_2306.x, x_2306.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2309 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2308.x, x_2308.y, x_2309.z, x_2309.w);
        let x_2311 : vec2<f32> = u_xlat53;
        let x_2312 : vec2<f32> = (x_2311 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2313 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2312.x, x_2312.y, x_2313.z, x_2313.w);
        let x_2315 : vec4<f32> = u_xlat10;
        let x_2317 : vec2<f32> = (vec2<f32>(x_2315.x, x_2315.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2318 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2317.x, x_2317.y, x_2318.z, x_2318.w);
        let x_2320 : vec2<f32> = u_xlat50;
        let x_2321 : vec2<f32> = (x_2320 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2322 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2321.x, x_2321.y, x_2322.z, x_2322.w);
        let x_2324 : vec4<f32> = u_xlat8;
        u_xlat50 = (vec2<f32>(x_2324.y, x_2324.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2328 : f32 = u_xlat10.x;
        u_xlat11.z = x_2328;
        let x_2331 : f32 = u_xlat50.x;
        u_xlat11.w = x_2331;
        let x_2334 : f32 = u_xlat12.x;
        u_xlat9.z = x_2334;
        let x_2337 : f32 = u_xlat8.x;
        u_xlat9.w = x_2337;
        let x_2339 : vec4<f32> = u_xlat9;
        let x_2341 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2339.z, x_2339.w, x_2339.x, x_2339.z) + vec4<f32>(x_2341.z, x_2341.w, x_2341.x, x_2341.z));
        let x_2345 : f32 = u_xlat11.y;
        u_xlat10.z = x_2345;
        let x_2348 : f32 = u_xlat50.y;
        u_xlat10.w = x_2348;
        let x_2351 : f32 = u_xlat9.y;
        u_xlat12.z = x_2351;
        let x_2354 : f32 = u_xlat8.z;
        u_xlat12.w = x_2354;
        let x_2356 : vec4<f32> = u_xlat10;
        let x_2358 : vec4<f32> = u_xlat12;
        let x_2360 : vec3<f32> = (vec3<f32>(x_2356.z, x_2356.y, x_2356.w) + vec3<f32>(x_2358.z, x_2358.y, x_2358.w));
        let x_2361 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2360.x, x_2360.y, x_2360.z, x_2361.w);
        let x_2363 : vec4<f32> = u_xlat9;
        let x_2365 : vec4<f32> = u_xlat13;
        let x_2367 : vec3<f32> = (vec3<f32>(x_2363.x, x_2363.z, x_2363.w) / vec3<f32>(x_2365.z, x_2365.w, x_2365.y));
        let x_2368 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2367.x, x_2367.y, x_2367.z, x_2368.w);
        let x_2370 : vec4<f32> = u_xlat9;
        let x_2372 : vec3<f32> = (vec3<f32>(x_2370.x, x_2370.y, x_2370.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2373 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2372.x, x_2372.y, x_2372.z, x_2373.w);
        let x_2375 : vec4<f32> = u_xlat12;
        let x_2377 : vec4<f32> = u_xlat8;
        let x_2379 : vec3<f32> = (vec3<f32>(x_2375.z, x_2375.y, x_2375.w) / vec3<f32>(x_2377.x, x_2377.y, x_2377.z));
        let x_2380 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2379.x, x_2379.y, x_2379.z, x_2380.w);
        let x_2382 : vec4<f32> = u_xlat10;
        let x_2384 : vec3<f32> = (vec3<f32>(x_2382.x, x_2382.y, x_2382.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2385 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2384.x, x_2384.y, x_2384.z, x_2385.w);
        let x_2387 : vec4<f32> = u_xlat9;
        let x_2390 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2392 : vec3<f32> = (vec3<f32>(x_2387.y, x_2387.x, x_2387.z) * vec3<f32>(x_2390.x, x_2390.x, x_2390.x));
        let x_2393 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2392.x, x_2392.y, x_2392.z, x_2393.w);
        let x_2395 : vec4<f32> = u_xlat10;
        let x_2398 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2400 : vec3<f32> = (vec3<f32>(x_2395.x, x_2395.y, x_2395.z) * vec3<f32>(x_2398.y, x_2398.y, x_2398.y));
        let x_2401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2400.x, x_2400.y, x_2400.z, x_2401.w);
        let x_2404 : f32 = u_xlat10.x;
        u_xlat9.w = x_2404;
        let x_2406 : vec4<f32> = u_xlat6;
        let x_2409 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2412 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2406.x, x_2406.y, x_2406.x, x_2406.y) * vec4<f32>(x_2409.x, x_2409.y, x_2409.x, x_2409.y)) + vec4<f32>(x_2412.y, x_2412.w, x_2412.x, x_2412.w));
        let x_2415 : vec4<f32> = u_xlat6;
        let x_2418 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2421 : vec4<f32> = u_xlat9;
        u_xlat50 = ((vec2<f32>(x_2415.x, x_2415.y) * vec2<f32>(x_2418.x, x_2418.y)) + vec2<f32>(x_2421.z, x_2421.w));
        let x_2425 : f32 = u_xlat9.y;
        u_xlat10.w = x_2425;
        let x_2427 : vec4<f32> = u_xlat10;
        let x_2428 : vec2<f32> = vec2<f32>(x_2427.y, x_2427.z);
        let x_2429 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2429.x, x_2428.x, x_2429.z, x_2428.y);
        let x_2431 : vec4<f32> = u_xlat6;
        let x_2434 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2437 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2431.x, x_2431.y, x_2431.x, x_2431.y) * vec4<f32>(x_2434.x, x_2434.y, x_2434.x, x_2434.y)) + vec4<f32>(x_2437.x, x_2437.y, x_2437.z, x_2437.y));
        let x_2440 : vec4<f32> = u_xlat6;
        let x_2443 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2446 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2440.x, x_2440.y, x_2440.x, x_2440.y) * vec4<f32>(x_2443.x, x_2443.y, x_2443.x, x_2443.y)) + vec4<f32>(x_2446.w, x_2446.y, x_2446.w, x_2446.z));
        let x_2449 : vec4<f32> = u_xlat6;
        let x_2452 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2455 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2449.x, x_2449.y, x_2449.x, x_2449.y) * vec4<f32>(x_2452.x, x_2452.y, x_2452.x, x_2452.y)) + vec4<f32>(x_2455.x, x_2455.w, x_2455.z, x_2455.w));
        let x_2458 : vec4<f32> = u_xlat8;
        let x_2460 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2458.x, x_2458.x, x_2458.x, x_2458.y) * vec4<f32>(x_2460.z, x_2460.w, x_2460.y, x_2460.z));
        let x_2463 : vec4<f32> = u_xlat8;
        let x_2465 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2463.y, x_2463.y, x_2463.z, x_2463.z) * x_2465);
        let x_2468 : f32 = u_xlat8.z;
        let x_2470 : f32 = u_xlat13.y;
        u_xlat6.x = (x_2468 * x_2470);
        let x_2474 : vec4<f32> = u_xlat11;
        let x_2475 : vec2<f32> = vec2<f32>(x_2474.x, x_2474.y);
        let x_2477 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2475.x, x_2475.y, x_2477);
        let x_2485 : vec3<f32> = txVec34;
        let x_2487 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2485.xy, x_2485.z);
        u_xlat28 = x_2487;
        let x_2489 : vec4<f32> = u_xlat11;
        let x_2490 : vec2<f32> = vec2<f32>(x_2489.z, x_2489.w);
        let x_2492 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2490.x, x_2490.y, x_2492);
        let x_2500 : vec3<f32> = txVec35;
        let x_2502 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2500.xy, x_2500.z);
        u_xlat73 = x_2502;
        let x_2503 : f32 = u_xlat73;
        let x_2505 : f32 = u_xlat14.y;
        u_xlat73 = (x_2503 * x_2505);
        let x_2508 : f32 = u_xlat14.x;
        let x_2509 : f32 = u_xlat28;
        let x_2511 : f32 = u_xlat73;
        u_xlat28 = ((x_2508 * x_2509) + x_2511);
        let x_2514 : vec2<f32> = u_xlat50;
        let x_2516 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2514.x, x_2514.y, x_2516);
        let x_2523 : vec3<f32> = txVec36;
        let x_2525 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2523.xy, x_2523.z);
        u_xlat50.x = x_2525;
        let x_2528 : f32 = u_xlat14.z;
        let x_2530 : f32 = u_xlat50.x;
        let x_2532 : f32 = u_xlat28;
        u_xlat28 = ((x_2528 * x_2530) + x_2532);
        let x_2535 : vec4<f32> = u_xlat10;
        let x_2536 : vec2<f32> = vec2<f32>(x_2535.x, x_2535.y);
        let x_2538 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2536.x, x_2536.y, x_2538);
        let x_2545 : vec3<f32> = txVec37;
        let x_2547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2545.xy, x_2545.z);
        u_xlat50.x = x_2547;
        let x_2550 : f32 = u_xlat14.w;
        let x_2552 : f32 = u_xlat50.x;
        let x_2554 : f32 = u_xlat28;
        u_xlat28 = ((x_2550 * x_2552) + x_2554);
        let x_2557 : vec4<f32> = u_xlat12;
        let x_2558 : vec2<f32> = vec2<f32>(x_2557.x, x_2557.y);
        let x_2560 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2558.x, x_2558.y, x_2560);
        let x_2567 : vec3<f32> = txVec38;
        let x_2569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2567.xy, x_2567.z);
        u_xlat50.x = x_2569;
        let x_2572 : f32 = u_xlat15.x;
        let x_2574 : f32 = u_xlat50.x;
        let x_2576 : f32 = u_xlat28;
        u_xlat28 = ((x_2572 * x_2574) + x_2576);
        let x_2579 : vec4<f32> = u_xlat12;
        let x_2580 : vec2<f32> = vec2<f32>(x_2579.z, x_2579.w);
        let x_2582 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2580.x, x_2580.y, x_2582);
        let x_2589 : vec3<f32> = txVec39;
        let x_2591 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2589.xy, x_2589.z);
        u_xlat50.x = x_2591;
        let x_2594 : f32 = u_xlat15.y;
        let x_2596 : f32 = u_xlat50.x;
        let x_2598 : f32 = u_xlat28;
        u_xlat28 = ((x_2594 * x_2596) + x_2598);
        let x_2601 : vec4<f32> = u_xlat10;
        let x_2602 : vec2<f32> = vec2<f32>(x_2601.z, x_2601.w);
        let x_2604 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2602.x, x_2602.y, x_2604);
        let x_2611 : vec3<f32> = txVec40;
        let x_2613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2611.xy, x_2611.z);
        u_xlat50.x = x_2613;
        let x_2616 : f32 = u_xlat15.z;
        let x_2618 : f32 = u_xlat50.x;
        let x_2620 : f32 = u_xlat28;
        u_xlat28 = ((x_2616 * x_2618) + x_2620);
        let x_2623 : vec4<f32> = u_xlat9;
        let x_2624 : vec2<f32> = vec2<f32>(x_2623.x, x_2623.y);
        let x_2626 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2624.x, x_2624.y, x_2626);
        let x_2633 : vec3<f32> = txVec41;
        let x_2635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2633.xy, x_2633.z);
        u_xlat50.x = x_2635;
        let x_2638 : f32 = u_xlat15.w;
        let x_2640 : f32 = u_xlat50.x;
        let x_2642 : f32 = u_xlat28;
        u_xlat28 = ((x_2638 * x_2640) + x_2642);
        let x_2645 : vec4<f32> = u_xlat9;
        let x_2646 : vec2<f32> = vec2<f32>(x_2645.z, x_2645.w);
        let x_2648 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2646.x, x_2646.y, x_2648);
        let x_2655 : vec3<f32> = txVec42;
        let x_2657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2655.xy, x_2655.z);
        u_xlat50.x = x_2657;
        let x_2660 : f32 = u_xlat6.x;
        let x_2662 : f32 = u_xlat50.x;
        let x_2664 : f32 = u_xlat28;
        u_xlat0.x = ((x_2660 * x_2662) + x_2664);
      } else {
        let x_2668 : vec4<f32> = vs_INTERP9;
        let x_2671 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2674 : vec2<f32> = ((vec2<f32>(x_2668.x, x_2668.y) * vec2<f32>(x_2671.z, x_2671.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2675 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2674.x, x_2674.y, x_2675.z, x_2675.w);
        let x_2677 : vec4<f32> = u_xlat6;
        let x_2679 : vec2<f32> = floor(vec2<f32>(x_2677.x, x_2677.y));
        let x_2680 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2679.x, x_2679.y, x_2680.z, x_2680.w);
        let x_2682 : vec4<f32> = vs_INTERP9;
        let x_2685 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2688 : vec4<f32> = u_xlat6;
        u_xlat50 = ((vec2<f32>(x_2682.x, x_2682.y) * vec2<f32>(x_2685.z, x_2685.w)) + -(vec2<f32>(x_2688.x, x_2688.y)));
        let x_2692 : vec2<f32> = u_xlat50;
        u_xlat8 = (vec4<f32>(x_2692.x, x_2692.x, x_2692.y, x_2692.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2695 : vec4<f32> = u_xlat8;
        let x_2697 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2695.x, x_2695.x, x_2695.z, x_2695.z) * vec4<f32>(x_2697.x, x_2697.x, x_2697.z, x_2697.z));
        let x_2700 : vec4<f32> = u_xlat9;
        let x_2702 : vec2<f32> = (vec2<f32>(x_2700.y, x_2700.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2703 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2703.x, x_2702.x, x_2703.z, x_2702.y);
        let x_2705 : vec4<f32> = u_xlat9;
        let x_2708 : vec2<f32> = u_xlat50;
        let x_2710 : vec2<f32> = ((vec2<f32>(x_2705.x, x_2705.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2708));
        let x_2711 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2710.x, x_2711.y, x_2710.y, x_2711.w);
        let x_2713 : vec2<f32> = u_xlat50;
        let x_2715 : vec2<f32> = (-(x_2713) + vec2<f32>(1.0f, 1.0f));
        let x_2716 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2715.x, x_2715.y, x_2716.z, x_2716.w);
        let x_2718 : vec2<f32> = u_xlat50;
        u_xlat53 = min(x_2718, vec2<f32>(0.0f, 0.0f));
        let x_2720 : vec2<f32> = u_xlat53;
        let x_2722 : vec2<f32> = u_xlat53;
        let x_2724 : vec4<f32> = u_xlat9;
        let x_2726 : vec2<f32> = ((-(x_2720) * x_2722) + vec2<f32>(x_2724.x, x_2724.y));
        let x_2727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2726.x, x_2726.y, x_2727.z, x_2727.w);
        let x_2729 : vec2<f32> = u_xlat50;
        u_xlat53 = max(x_2729, vec2<f32>(0.0f, 0.0f));
        let x_2731 : vec2<f32> = u_xlat53;
        let x_2733 : vec2<f32> = u_xlat53;
        let x_2735 : vec4<f32> = u_xlat8;
        let x_2737 : vec2<f32> = ((-(x_2731) * x_2733) + vec2<f32>(x_2735.y, x_2735.w));
        let x_2738 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2737.x, x_2738.y, x_2737.y);
        let x_2740 : vec4<f32> = u_xlat9;
        let x_2742 : vec2<f32> = (vec2<f32>(x_2740.x, x_2740.y) + vec2<f32>(2.0f, 2.0f));
        let x_2743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2742.x, x_2742.y, x_2743.z, x_2743.w);
        let x_2745 : vec3<f32> = u_xlat30;
        let x_2747 : vec2<f32> = (vec2<f32>(x_2745.x, x_2745.z) + vec2<f32>(2.0f, 2.0f));
        let x_2748 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2748.x, x_2747.x, x_2748.z, x_2747.y);
        let x_2751 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2751 * 0.081632003f);
        let x_2754 : vec4<f32> = u_xlat8;
        let x_2756 : vec3<f32> = (vec3<f32>(x_2754.z, x_2754.x, x_2754.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2757 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2756.x, x_2756.y, x_2756.z, x_2757.w);
        let x_2759 : vec4<f32> = u_xlat9;
        let x_2761 : vec2<f32> = (vec2<f32>(x_2759.x, x_2759.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2762 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2761.x, x_2761.y, x_2762.z, x_2762.w);
        let x_2765 : f32 = u_xlat12.y;
        u_xlat11.x = x_2765;
        let x_2767 : vec2<f32> = u_xlat50;
        let x_2770 : vec2<f32> = ((vec2<f32>(x_2767.x, x_2767.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2771 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2771.x, x_2770.x, x_2771.z, x_2770.y);
        let x_2773 : vec2<f32> = u_xlat50;
        let x_2776 : vec2<f32> = ((vec2<f32>(x_2773.x, x_2773.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2777 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2776.x, x_2777.y, x_2776.y, x_2777.w);
        let x_2780 : f32 = u_xlat8.x;
        u_xlat9.y = x_2780;
        let x_2783 : f32 = u_xlat10.y;
        u_xlat9.w = x_2783;
        let x_2785 : vec4<f32> = u_xlat9;
        let x_2786 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2785 + x_2786);
        let x_2788 : vec2<f32> = u_xlat50;
        let x_2791 : vec2<f32> = ((vec2<f32>(x_2788.y, x_2788.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2792 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2792.x, x_2791.x, x_2792.z, x_2791.y);
        let x_2794 : vec2<f32> = u_xlat50;
        let x_2797 : vec2<f32> = ((vec2<f32>(x_2794.y, x_2794.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2798 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2797.x, x_2798.y, x_2797.y, x_2798.w);
        let x_2801 : f32 = u_xlat8.y;
        u_xlat10.y = x_2801;
        let x_2803 : vec4<f32> = u_xlat10;
        let x_2804 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2803 + x_2804);
        let x_2806 : vec4<f32> = u_xlat9;
        let x_2807 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2806 / x_2807);
        let x_2809 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2809 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2811 : vec4<f32> = u_xlat10;
        let x_2812 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2811 / x_2812);
        let x_2814 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2814 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2816 : vec4<f32> = u_xlat9;
        let x_2819 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2816.w, x_2816.x, x_2816.y, x_2816.z) * vec4<f32>(x_2819.x, x_2819.x, x_2819.x, x_2819.x));
        let x_2822 : vec4<f32> = u_xlat10;
        let x_2825 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2822.x, x_2822.w, x_2822.y, x_2822.z) * vec4<f32>(x_2825.y, x_2825.y, x_2825.y, x_2825.y));
        let x_2828 : vec4<f32> = u_xlat9;
        let x_2829 : vec3<f32> = vec3<f32>(x_2828.y, x_2828.z, x_2828.w);
        let x_2830 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2829.x, x_2830.y, x_2829.y, x_2829.z);
        let x_2833 : f32 = u_xlat10.x;
        u_xlat12.y = x_2833;
        let x_2835 : vec4<f32> = u_xlat6;
        let x_2838 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2841 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2835.x, x_2835.y, x_2835.x, x_2835.y) * vec4<f32>(x_2838.x, x_2838.y, x_2838.x, x_2838.y)) + vec4<f32>(x_2841.x, x_2841.y, x_2841.z, x_2841.y));
        let x_2844 : vec4<f32> = u_xlat6;
        let x_2847 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2850 : vec4<f32> = u_xlat12;
        u_xlat50 = ((vec2<f32>(x_2844.x, x_2844.y) * vec2<f32>(x_2847.x, x_2847.y)) + vec2<f32>(x_2850.w, x_2850.y));
        let x_2854 : f32 = u_xlat12.y;
        u_xlat9.y = x_2854;
        let x_2857 : f32 = u_xlat10.z;
        u_xlat12.y = x_2857;
        let x_2859 : vec4<f32> = u_xlat6;
        let x_2862 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2865 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2859.x, x_2859.y, x_2859.x, x_2859.y) * vec4<f32>(x_2862.x, x_2862.y, x_2862.x, x_2862.y)) + vec4<f32>(x_2865.x, x_2865.y, x_2865.z, x_2865.y));
        let x_2868 : vec4<f32> = u_xlat6;
        let x_2871 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2874 : vec4<f32> = u_xlat12;
        let x_2876 : vec2<f32> = ((vec2<f32>(x_2868.x, x_2868.y) * vec2<f32>(x_2871.x, x_2871.y)) + vec2<f32>(x_2874.w, x_2874.y));
        let x_2877 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2876.x, x_2876.y, x_2877.z, x_2877.w);
        let x_2880 : f32 = u_xlat12.y;
        u_xlat9.z = x_2880;
        let x_2882 : vec4<f32> = u_xlat6;
        let x_2885 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2888 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2882.x, x_2882.y, x_2882.x, x_2882.y) * vec4<f32>(x_2885.x, x_2885.y, x_2885.x, x_2885.y)) + vec4<f32>(x_2888.x, x_2888.y, x_2888.x, x_2888.z));
        let x_2892 : f32 = u_xlat10.w;
        u_xlat12.y = x_2892;
        let x_2894 : vec4<f32> = u_xlat6;
        let x_2897 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2900 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2894.x, x_2894.y, x_2894.x, x_2894.y) * vec4<f32>(x_2897.x, x_2897.y, x_2897.x, x_2897.y)) + vec4<f32>(x_2900.x, x_2900.y, x_2900.z, x_2900.y));
        let x_2903 : vec4<f32> = u_xlat6;
        let x_2906 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2909 : vec4<f32> = u_xlat12;
        let x_2911 : vec2<f32> = ((vec2<f32>(x_2903.x, x_2903.y) * vec2<f32>(x_2906.x, x_2906.y)) + vec2<f32>(x_2909.w, x_2909.y));
        let x_2912 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2911.x, x_2911.y, x_2912.z);
        let x_2915 : f32 = u_xlat12.y;
        u_xlat9.w = x_2915;
        let x_2918 : vec4<f32> = u_xlat6;
        let x_2921 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2924 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_2918.x, x_2918.y) * vec2<f32>(x_2921.x, x_2921.y)) + vec2<f32>(x_2924.x, x_2924.w));
        let x_2927 : vec4<f32> = u_xlat12;
        let x_2928 : vec3<f32> = vec3<f32>(x_2927.x, x_2927.z, x_2927.w);
        let x_2929 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2928.x, x_2929.y, x_2928.y, x_2928.z);
        let x_2931 : vec4<f32> = u_xlat6;
        let x_2934 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2937 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2931.x, x_2931.y, x_2931.x, x_2931.y) * vec4<f32>(x_2934.x, x_2934.y, x_2934.x, x_2934.y)) + vec4<f32>(x_2937.x, x_2937.y, x_2937.z, x_2937.y));
        let x_2940 : vec4<f32> = u_xlat6;
        let x_2943 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2946 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_2940.x, x_2940.y) * vec2<f32>(x_2943.x, x_2943.y)) + vec2<f32>(x_2946.w, x_2946.y));
        let x_2950 : f32 = u_xlat9.x;
        u_xlat10.x = x_2950;
        let x_2952 : vec4<f32> = u_xlat6;
        let x_2955 : vec4<f32> = x_360.x_MainLightShadowmapSize;
        let x_2958 : vec4<f32> = u_xlat10;
        let x_2960 : vec2<f32> = ((vec2<f32>(x_2952.x, x_2952.y) * vec2<f32>(x_2955.x, x_2955.y)) + vec2<f32>(x_2958.x, x_2958.y));
        let x_2961 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2960.x, x_2960.y, x_2961.z, x_2961.w);
        let x_2963 : vec4<f32> = u_xlat8;
        let x_2965 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2963.x, x_2963.x, x_2963.x, x_2963.x) * x_2965);
        let x_2967 : vec4<f32> = u_xlat8;
        let x_2969 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2967.y, x_2967.y, x_2967.y, x_2967.y) * x_2969);
        let x_2971 : vec4<f32> = u_xlat8;
        let x_2973 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2971.z, x_2971.z, x_2971.z, x_2971.z) * x_2973);
        let x_2975 : vec4<f32> = u_xlat8;
        let x_2977 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2975.w, x_2975.w, x_2975.w, x_2975.w) * x_2977);
        let x_2980 : vec4<f32> = u_xlat13;
        let x_2981 : vec2<f32> = vec2<f32>(x_2980.x, x_2980.y);
        let x_2983 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2981.x, x_2981.y, x_2983);
        let x_2990 : vec3<f32> = txVec43;
        let x_2992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2990.xy, x_2990.z);
        u_xlat73 = x_2992;
        let x_2994 : vec4<f32> = u_xlat13;
        let x_2995 : vec2<f32> = vec2<f32>(x_2994.z, x_2994.w);
        let x_2997 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2995.x, x_2995.y, x_2997);
        let x_3004 : vec3<f32> = txVec44;
        let x_3006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3004.xy, x_3004.z);
        u_xlat9.x = x_3006;
        let x_3009 : f32 = u_xlat9.x;
        let x_3011 : f32 = u_xlat18.y;
        u_xlat9.x = (x_3009 * x_3011);
        let x_3015 : f32 = u_xlat18.x;
        let x_3016 : f32 = u_xlat73;
        let x_3019 : f32 = u_xlat9.x;
        u_xlat73 = ((x_3015 * x_3016) + x_3019);
        let x_3022 : vec2<f32> = u_xlat50;
        let x_3024 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_3022.x, x_3022.y, x_3024);
        let x_3031 : vec3<f32> = txVec45;
        let x_3033 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3031.xy, x_3031.z);
        u_xlat50.x = x_3033;
        let x_3036 : f32 = u_xlat18.z;
        let x_3038 : f32 = u_xlat50.x;
        let x_3040 : f32 = u_xlat73;
        u_xlat50.x = ((x_3036 * x_3038) + x_3040);
        let x_3044 : vec4<f32> = u_xlat16;
        let x_3045 : vec2<f32> = vec2<f32>(x_3044.x, x_3044.y);
        let x_3047 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_3045.x, x_3045.y, x_3047);
        let x_3055 : vec3<f32> = txVec46;
        let x_3057 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3055.xy, x_3055.z);
        u_xlat72 = x_3057;
        let x_3059 : f32 = u_xlat18.w;
        let x_3060 : f32 = u_xlat72;
        let x_3063 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3059 * x_3060) + x_3063);
        let x_3067 : vec4<f32> = u_xlat14;
        let x_3068 : vec2<f32> = vec2<f32>(x_3067.x, x_3067.y);
        let x_3070 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3068.x, x_3068.y, x_3070);
        let x_3077 : vec3<f32> = txVec47;
        let x_3079 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3077.xy, x_3077.z);
        u_xlat72 = x_3079;
        let x_3081 : f32 = u_xlat19.x;
        let x_3082 : f32 = u_xlat72;
        let x_3085 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3081 * x_3082) + x_3085);
        let x_3089 : vec4<f32> = u_xlat14;
        let x_3090 : vec2<f32> = vec2<f32>(x_3089.z, x_3089.w);
        let x_3092 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3090.x, x_3090.y, x_3092);
        let x_3099 : vec3<f32> = txVec48;
        let x_3101 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3099.xy, x_3099.z);
        u_xlat72 = x_3101;
        let x_3103 : f32 = u_xlat19.y;
        let x_3104 : f32 = u_xlat72;
        let x_3107 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3103 * x_3104) + x_3107);
        let x_3111 : vec4<f32> = u_xlat15;
        let x_3112 : vec2<f32> = vec2<f32>(x_3111.x, x_3111.y);
        let x_3114 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3112.x, x_3112.y, x_3114);
        let x_3121 : vec3<f32> = txVec49;
        let x_3123 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3121.xy, x_3121.z);
        u_xlat72 = x_3123;
        let x_3125 : f32 = u_xlat19.z;
        let x_3126 : f32 = u_xlat72;
        let x_3129 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3125 * x_3126) + x_3129);
        let x_3133 : vec4<f32> = u_xlat16;
        let x_3134 : vec2<f32> = vec2<f32>(x_3133.z, x_3133.w);
        let x_3136 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3134.x, x_3134.y, x_3136);
        let x_3143 : vec3<f32> = txVec50;
        let x_3145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3143.xy, x_3143.z);
        u_xlat72 = x_3145;
        let x_3147 : f32 = u_xlat19.w;
        let x_3148 : f32 = u_xlat72;
        let x_3151 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3147 * x_3148) + x_3151);
        let x_3155 : vec4<f32> = u_xlat17;
        let x_3156 : vec2<f32> = vec2<f32>(x_3155.x, x_3155.y);
        let x_3158 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3156.x, x_3156.y, x_3158);
        let x_3165 : vec3<f32> = txVec51;
        let x_3167 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3165.xy, x_3165.z);
        u_xlat72 = x_3167;
        let x_3169 : f32 = u_xlat20.x;
        let x_3170 : f32 = u_xlat72;
        let x_3173 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3169 * x_3170) + x_3173);
        let x_3177 : vec4<f32> = u_xlat17;
        let x_3178 : vec2<f32> = vec2<f32>(x_3177.z, x_3177.w);
        let x_3180 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3178.x, x_3178.y, x_3180);
        let x_3187 : vec3<f32> = txVec52;
        let x_3189 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3187.xy, x_3187.z);
        u_xlat72 = x_3189;
        let x_3191 : f32 = u_xlat20.y;
        let x_3192 : f32 = u_xlat72;
        let x_3195 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3191 * x_3192) + x_3195);
        let x_3199 : vec3<f32> = u_xlat31;
        let x_3200 : vec2<f32> = vec2<f32>(x_3199.x, x_3199.y);
        let x_3202 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3200.x, x_3200.y, x_3202);
        let x_3209 : vec3<f32> = txVec53;
        let x_3211 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3209.xy, x_3209.z);
        u_xlat72 = x_3211;
        let x_3213 : f32 = u_xlat20.z;
        let x_3214 : f32 = u_xlat72;
        let x_3217 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3213 * x_3214) + x_3217);
        let x_3221 : vec2<f32> = u_xlat59;
        let x_3223 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3221.x, x_3221.y, x_3223);
        let x_3230 : vec3<f32> = txVec54;
        let x_3232 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3230.xy, x_3230.z);
        u_xlat72 = x_3232;
        let x_3234 : f32 = u_xlat20.w;
        let x_3235 : f32 = u_xlat72;
        let x_3238 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3234 * x_3235) + x_3238);
        let x_3242 : vec4<f32> = u_xlat12;
        let x_3243 : vec2<f32> = vec2<f32>(x_3242.x, x_3242.y);
        let x_3245 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3243.x, x_3243.y, x_3245);
        let x_3252 : vec3<f32> = txVec55;
        let x_3254 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3252.xy, x_3252.z);
        u_xlat72 = x_3254;
        let x_3256 : f32 = u_xlat8.x;
        let x_3257 : f32 = u_xlat72;
        let x_3260 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3256 * x_3257) + x_3260);
        let x_3264 : vec4<f32> = u_xlat12;
        let x_3265 : vec2<f32> = vec2<f32>(x_3264.z, x_3264.w);
        let x_3267 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3265.x, x_3265.y, x_3267);
        let x_3274 : vec3<f32> = txVec56;
        let x_3276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3274.xy, x_3274.z);
        u_xlat72 = x_3276;
        let x_3278 : f32 = u_xlat8.y;
        let x_3279 : f32 = u_xlat72;
        let x_3282 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3278 * x_3279) + x_3282);
        let x_3286 : vec2<f32> = u_xlat54;
        let x_3288 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3286.x, x_3286.y, x_3288);
        let x_3295 : vec3<f32> = txVec57;
        let x_3297 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3295.xy, x_3295.z);
        u_xlat72 = x_3297;
        let x_3299 : f32 = u_xlat8.z;
        let x_3300 : f32 = u_xlat72;
        let x_3303 : f32 = u_xlat50.x;
        u_xlat50.x = ((x_3299 * x_3300) + x_3303);
        let x_3307 : vec4<f32> = u_xlat6;
        let x_3308 : vec2<f32> = vec2<f32>(x_3307.x, x_3307.y);
        let x_3310 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3308.x, x_3308.y, x_3310);
        let x_3317 : vec3<f32> = txVec58;
        let x_3319 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3317.xy, x_3317.z);
        u_xlat6.x = x_3319;
        let x_3322 : f32 = u_xlat8.w;
        let x_3324 : f32 = u_xlat6.x;
        let x_3327 : f32 = u_xlat50.x;
        u_xlat0.x = ((x_3322 * x_3324) + x_3327);
      }
    }
  } else {
    let x_3332 : vec4<f32> = vs_INTERP9;
    let x_3333 : vec2<f32> = vec2<f32>(x_3332.x, x_3332.y);
    let x_3335 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3333.x, x_3333.y, x_3335);
    let x_3342 : vec3<f32> = txVec59;
    let x_3344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3342.xy, x_3342.z);
    u_xlat0.x = x_3344;
  }
  let x_3347 : f32 = u_xlat0.x;
  let x_3349 : f32 = x_360.x_MainLightShadowParams.x;
  let x_3352 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3347 * x_3349) + x_3352);
  let x_3359 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3359);
  let x_3363 : f32 = vs_INTERP9.z;
  u_xlatb6 = (x_3363 >= 1.0f);
  let x_3366 : bool = u_xlatb2.x;
  let x_3367 : bool = u_xlatb6;
  u_xlatb2.x = (x_3366 | x_3367);
  let x_3371 : bool = u_xlatb2.x;
  if (x_3371) {
    x_3372 = 1.0f;
  } else {
    let x_3377 : f32 = u_xlat0.x;
    x_3372 = x_3377;
  }
  let x_3378 : f32 = x_3372;
  u_xlat0.x = x_3378;
  let x_3380 : vec3<f32> = vs_INTERP0;
  let x_3382 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  let x_3384 : vec3<f32> = (x_3380 + -(x_3382));
  let x_3385 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3384.x, x_3384.y, x_3384.z, x_3385.w);
  let x_3387 : vec4<f32> = u_xlat6;
  let x_3389 : vec4<f32> = u_xlat6;
  u_xlat2.x = dot(vec3<f32>(x_3387.x, x_3387.y, x_3387.z), vec3<f32>(x_3389.x, x_3389.y, x_3389.z));
  let x_3394 : f32 = u_xlat2.x;
  let x_3396 : f32 = x_360.x_MainLightShadowParams.z;
  let x_3399 : f32 = x_360.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3394 * x_3396) + x_3399);
  let x_3403 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3403, 0.0f, 1.0f);
  let x_3407 : f32 = u_xlat0.x;
  u_xlat6.x = (-(x_3407) + 1.0f);
  let x_3412 : f32 = u_xlat2.x;
  let x_3414 : f32 = u_xlat6.x;
  let x_3417 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3412 * x_3414) + x_3417);
  let x_3426 : f32 = x_3424.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3426 == -1.0f));
  let x_3430 : bool = u_xlatb2.x;
  if (x_3430) {
    let x_3433 : vec3<f32> = vs_INTERP0;
    let x_3436 : vec4<f32> = x_3424.x_MainLightWorldToLight[1i];
    let x_3438 : vec2<f32> = (vec2<f32>(x_3433.y, x_3433.y) * vec2<f32>(x_3436.x, x_3436.y));
    let x_3439 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3438.x, x_3438.y, x_3439.z, x_3439.w);
    let x_3442 : vec4<f32> = x_3424.x_MainLightWorldToLight[0i];
    let x_3444 : vec3<f32> = vs_INTERP0;
    let x_3447 : vec4<f32> = u_xlat6;
    let x_3449 : vec2<f32> = ((vec2<f32>(x_3442.x, x_3442.y) * vec2<f32>(x_3444.x, x_3444.x)) + vec2<f32>(x_3447.x, x_3447.y));
    let x_3450 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3449.x, x_3449.y, x_3450.z, x_3450.w);
    let x_3453 : vec4<f32> = x_3424.x_MainLightWorldToLight[2i];
    let x_3455 : vec3<f32> = vs_INTERP0;
    let x_3458 : vec4<f32> = u_xlat6;
    let x_3460 : vec2<f32> = ((vec2<f32>(x_3453.x, x_3453.y) * vec2<f32>(x_3455.z, x_3455.z)) + vec2<f32>(x_3458.x, x_3458.y));
    let x_3461 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3460.x, x_3460.y, x_3461.z, x_3461.w);
    let x_3463 : vec4<f32> = u_xlat6;
    let x_3466 : vec4<f32> = x_3424.x_MainLightWorldToLight[3i];
    let x_3468 : vec2<f32> = (vec2<f32>(x_3463.x, x_3463.y) + vec2<f32>(x_3466.x, x_3466.y));
    let x_3469 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3468.x, x_3468.y, x_3469.z, x_3469.w);
    let x_3471 : vec4<f32> = u_xlat6;
    let x_3474 : vec2<f32> = ((vec2<f32>(x_3471.x, x_3471.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3475 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3474.x, x_3474.y, x_3475.z, x_3475.w);
    let x_3482 : vec4<f32> = u_xlat6;
    let x_3485 : f32 = x_158.x_GlobalMipBias.x;
    let x_3486 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3482.x, x_3482.y), x_3485);
    u_xlat6 = x_3486;
    let x_3489 : f32 = x_3424.x_MainLightCookieTextureFormat;
    let x_3491 : f32 = x_3424.x_MainLightCookieTextureFormat;
    let x_3493 : f32 = x_3424.x_MainLightCookieTextureFormat;
    let x_3495 : f32 = x_3424.x_MainLightCookieTextureFormat;
    let x_3496 : vec4<f32> = vec4<f32>(x_3489, x_3491, x_3493, x_3495);
    let x_3503 : vec4<bool> = (vec4<f32>(x_3496.x, x_3496.y, x_3496.z, x_3496.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3503.x, x_3503.y);
    let x_3506 : bool = u_xlatb8.y;
    if (x_3506) {
      let x_3511 : f32 = u_xlat6.w;
      x_3507 = x_3511;
    } else {
      let x_3514 : f32 = u_xlat6.x;
      x_3507 = x_3514;
    }
    let x_3515 : f32 = x_3507;
    u_xlat2.x = x_3515;
    let x_3518 : bool = u_xlatb8.x;
    if (x_3518) {
      let x_3522 : vec4<f32> = u_xlat6;
      x_3519 = vec3<f32>(x_3522.x, x_3522.y, x_3522.z);
    } else {
      let x_3525 : vec3<f32> = u_xlat2;
      x_3519 = vec3<f32>(x_3525.x, x_3525.x, x_3525.x);
    }
    let x_3527 : vec3<f32> = x_3519;
    let x_3528 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3527.x, x_3527.y, x_3527.z, x_3528.w);
  } else {
    u_xlat6.x = 1.0f;
    u_xlat6.y = 1.0f;
    u_xlat6.z = 1.0f;
  }
  let x_3534 : vec4<f32> = u_xlat6;
  let x_3537 : vec4<f32> = x_158.x_MainLightColor;
  let x_3539 : vec3<f32> = (vec3<f32>(x_3534.x, x_3534.y, x_3534.z) * vec3<f32>(x_3537.x, x_3537.y, x_3537.z));
  let x_3540 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3539.x, x_3539.y, x_3539.z, x_3540.w);
  let x_3542 : f32 = u_xlat71;
  let x_3544 : vec4<f32> = u_xlat6;
  let x_3546 : vec3<f32> = (vec3<f32>(x_3542, x_3542, x_3542) * vec3<f32>(x_3544.x, x_3544.y, x_3544.z));
  let x_3547 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3546.x, x_3546.y, x_3546.z, x_3547.w);
  let x_3549 : vec3<f32> = u_xlat4;
  let x_3551 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(x_3549), vec3<f32>(x_3551.x, x_3551.y, x_3551.z));
  let x_3556 : f32 = u_xlat2.x;
  let x_3558 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3556 + x_3558);
  let x_3561 : vec4<f32> = u_xlat3;
  let x_3563 : vec3<f32> = u_xlat2;
  let x_3567 : vec3<f32> = u_xlat4;
  let x_3569 : vec3<f32> = ((vec3<f32>(x_3561.x, x_3561.y, x_3561.z) * -(vec3<f32>(x_3563.x, x_3563.x, x_3563.x))) + -(x_3567));
  let x_3570 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3569.x, x_3569.y, x_3569.z, x_3570.w);
  let x_3572 : vec4<f32> = u_xlat3;
  let x_3574 : vec3<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_3572.x, x_3572.y, x_3572.z), x_3574);
  let x_3578 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3578, 0.0f, 1.0f);
  let x_3582 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3582) + 1.0f);
  let x_3587 : f32 = u_xlat2.x;
  let x_3589 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3587 * x_3589);
  let x_3593 : f32 = u_xlat2.x;
  let x_3595 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3593 * x_3595);
  let x_3599 : f32 = u_xlat44.x;
  u_xlat72 = ((-(x_3599) * 0.699999988f) + 1.700000048f);
  let x_3606 : f32 = u_xlat44.x;
  let x_3607 : f32 = u_xlat72;
  u_xlat44.x = (x_3606 * x_3607);
  let x_3611 : f32 = u_xlat44.x;
  u_xlat44.x = (x_3611 * 6.0f);
  let x_3623 : vec4<f32> = u_xlat8;
  let x_3626 : f32 = u_xlat44.x;
  let x_3627 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3623.x, x_3623.y, x_3623.z), x_3626);
  u_xlat8 = x_3627;
  let x_3629 : f32 = u_xlat8.w;
  u_xlat44.x = (x_3629 + -1.0f);
  let x_3633 : f32 = x_94.unity_SpecCube0_HDR.w;
  let x_3635 : f32 = u_xlat44.x;
  u_xlat44.x = ((x_3633 * x_3635) + 1.0f);
  let x_3640 : f32 = u_xlat44.x;
  u_xlat44.x = max(x_3640, 0.0f);
  let x_3644 : f32 = u_xlat44.x;
  u_xlat44.x = log2(x_3644);
  let x_3648 : f32 = u_xlat44.x;
  let x_3650 : f32 = x_94.unity_SpecCube0_HDR.y;
  u_xlat44.x = (x_3648 * x_3650);
  let x_3654 : f32 = u_xlat44.x;
  u_xlat44.x = exp2(x_3654);
  let x_3658 : f32 = u_xlat44.x;
  let x_3660 : f32 = x_94.unity_SpecCube0_HDR.x;
  u_xlat44.x = (x_3658 * x_3660);
  let x_3663 : vec4<f32> = u_xlat8;
  let x_3665 : vec2<f32> = u_xlat44;
  let x_3667 : vec3<f32> = (vec3<f32>(x_3663.x, x_3663.y, x_3663.z) * vec3<f32>(x_3665.x, x_3665.x, x_3665.x));
  let x_3668 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3667.x, x_3667.y, x_3667.z, x_3668.w);
  let x_3670 : f32 = u_xlat66;
  let x_3672 : f32 = u_xlat66;
  u_xlat44 = ((vec2<f32>(x_3670, x_3670) * vec2<f32>(x_3672, x_3672)) + vec2<f32>(-1.0f, 1.0f));
  let x_3678 : f32 = u_xlat44.y;
  u_xlat66 = (1.0f / x_3678);
  let x_3680 : f32 = u_xlat68;
  u_xlat68 = (x_3680 + -0.039999999f);
  let x_3684 : f32 = u_xlat2.x;
  let x_3685 : f32 = u_xlat68;
  u_xlat2.x = ((x_3684 * x_3685) + 0.039999999f);
  let x_3690 : f32 = u_xlat66;
  let x_3692 : f32 = u_xlat2.x;
  u_xlat66 = (x_3690 * x_3692);
  let x_3694 : f32 = u_xlat66;
  let x_3696 : vec4<f32> = u_xlat8;
  let x_3698 : vec3<f32> = (vec3<f32>(x_3694, x_3694, x_3694) * vec3<f32>(x_3696.x, x_3696.y, x_3696.z));
  let x_3699 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3698.x, x_3698.y, x_3698.z, x_3699.w);
  let x_3701 : vec3<f32> = u_xlat5;
  let x_3702 : vec3<f32> = u_xlat7;
  let x_3704 : vec4<f32> = u_xlat8;
  u_xlat5 = ((x_3701 * x_3702) + vec3<f32>(x_3704.x, x_3704.y, x_3704.z));
  let x_3708 : f32 = u_xlat0.x;
  let x_3710 : f32 = x_94.unity_LightData.z;
  u_xlat0.x = (x_3708 * x_3710);
  let x_3713 : vec4<f32> = u_xlat3;
  let x_3716 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat66 = dot(vec3<f32>(x_3713.x, x_3713.y, x_3713.z), vec3<f32>(x_3716.x, x_3716.y, x_3716.z));
  let x_3719 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3719, 0.0f, 1.0f);
  let x_3721 : f32 = u_xlat66;
  let x_3723 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3721 * x_3723);
  let x_3726 : vec4<f32> = u_xlat0;
  let x_3728 : vec4<f32> = u_xlat6;
  let x_3730 : vec3<f32> = (vec3<f32>(x_3726.x, x_3726.x, x_3726.x) * vec3<f32>(x_3728.x, x_3728.y, x_3728.z));
  let x_3731 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3730.x, x_3730.y, x_3730.z, x_3731.w);
  let x_3733 : vec3<f32> = u_xlat4;
  let x_3735 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3737 : vec3<f32> = (x_3733 + vec3<f32>(x_3735.x, x_3735.y, x_3735.z));
  let x_3738 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3737.x, x_3737.y, x_3737.z, x_3738.w);
  let x_3740 : vec4<f32> = u_xlat8;
  let x_3742 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3740.x, x_3740.y, x_3740.z), vec3<f32>(x_3742.x, x_3742.y, x_3742.z));
  let x_3747 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3747, 1.17549435e-37f);
  let x_3751 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3751);
  let x_3754 : vec4<f32> = u_xlat0;
  let x_3756 : vec4<f32> = u_xlat8;
  let x_3758 : vec3<f32> = (vec3<f32>(x_3754.x, x_3754.x, x_3754.x) * vec3<f32>(x_3756.x, x_3756.y, x_3756.z));
  let x_3759 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3758.x, x_3758.y, x_3758.z, x_3759.w);
  let x_3761 : vec4<f32> = u_xlat3;
  let x_3763 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3761.x, x_3761.y, x_3761.z), vec3<f32>(x_3763.x, x_3763.y, x_3763.z));
  let x_3768 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3768, 0.0f, 1.0f);
  let x_3772 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3774 : vec4<f32> = u_xlat8;
  u_xlat0.w = dot(vec3<f32>(x_3772.x, x_3772.y, x_3772.z), vec3<f32>(x_3774.x, x_3774.y, x_3774.z));
  let x_3779 : f32 = u_xlat0.w;
  u_xlat0.w = clamp(x_3779, 0.0f, 1.0f);
  let x_3782 : vec4<f32> = u_xlat0;
  let x_3784 : vec4<f32> = u_xlat0;
  let x_3786 : vec2<f32> = (vec2<f32>(x_3782.x, x_3782.w) * vec2<f32>(x_3784.x, x_3784.w));
  let x_3787 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3786.x, x_3787.y, x_3787.z, x_3786.y);
  let x_3790 : f32 = u_xlat0.x;
  let x_3792 : f32 = u_xlat44.x;
  u_xlat0.x = ((x_3790 * x_3792) + 1.000010014f);
  let x_3798 : f32 = u_xlat0.x;
  let x_3800 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3798 * x_3800);
  let x_3804 : f32 = u_xlat0.w;
  u_xlat66 = max(x_3804, 0.100000001f);
  let x_3807 : f32 = u_xlat66;
  let x_3809 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3807 * x_3809);
  let x_3812 : f32 = u_xlat69;
  let x_3814 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3812 * x_3814);
  let x_3817 : f32 = u_xlat46;
  let x_3819 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3817 / x_3819);
  let x_3822 : vec4<f32> = u_xlat0;
  let x_3826 : vec3<f32> = u_xlat7;
  let x_3827 : vec3<f32> = ((vec3<f32>(x_3822.x, x_3822.x, x_3822.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3826);
  let x_3828 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3827.x, x_3827.y, x_3827.z, x_3828.w);
  let x_3830 : vec4<f32> = u_xlat6;
  let x_3832 : vec4<f32> = u_xlat8;
  let x_3834 : vec3<f32> = (vec3<f32>(x_3830.x, x_3830.y, x_3830.z) * vec3<f32>(x_3832.x, x_3832.y, x_3832.z));
  let x_3835 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3834.x, x_3834.y, x_3834.z, x_3835.w);
  let x_3838 : f32 = x_158.x_AdditionalLightsCount.x;
  let x_3840 : f32 = x_94.unity_LightData.y;
  u_xlat0.x = min(x_3838, x_3840);
  let x_3845 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3845));
  let x_3849 : f32 = x_3424.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3851 : f32 = x_3424.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3853 : f32 = x_3424.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3855 : f32 = x_3424.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3856 : vec4<f32> = vec4<f32>(x_3849, x_3851, x_3853, x_3855);
  let x_3863 : vec4<bool> = (vec4<f32>(x_3856.x, x_3856.y, x_3856.z, x_3856.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3864 : vec2<bool> = vec2<bool>(x_3863.x, x_3863.w);
  let x_3865 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3864.x, x_3865.y, x_3865.z, x_3864.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3876 : u32 = u_xlatu_loop_1;
    let x_3877 : u32 = u_xlatu0;
    if ((x_3876 < x_3877)) {
    } else {
      break;
    }
    let x_3880 : u32 = u_xlatu_loop_1;
    u_xlatu72 = (x_3880 >> 2u);
    let x_3883 : u32 = u_xlatu_loop_1;
    u_xlati73 = bitcast<i32>((x_3883 & 3u));
    let x_3886 : u32 = u_xlatu72;
    let x_3889 : vec4<f32> = x_94.unity_LightIndices[bitcast<i32>(x_3886)];
    let x_3899 : i32 = u_xlati73;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3904 : vec4<u32> = indexable[x_3899];
    u_xlat72 = dot(x_3889, bitcast<vec4<f32>>(x_3904));
    let x_3907 : f32 = u_xlat72;
    u_xlatu72 = bitcast<u32>(i32(x_3907));
    let x_3910 : vec3<f32> = vs_INTERP0;
    let x_3922 : u32 = u_xlatu72;
    let x_3925 : vec4<f32> = x_3921.x_AdditionalLightsPosition[bitcast<i32>(x_3922)];
    let x_3928 : u32 = u_xlatu72;
    let x_3931 : vec4<f32> = x_3921.x_AdditionalLightsPosition[bitcast<i32>(x_3928)];
    let x_3933 : vec3<f32> = ((-(x_3910) * vec3<f32>(x_3925.w, x_3925.w, x_3925.w)) + vec3<f32>(x_3931.x, x_3931.y, x_3931.z));
    let x_3934 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3933.x, x_3933.y, x_3933.z, x_3934.w);
    let x_3936 : vec4<f32> = u_xlat9;
    let x_3938 : vec4<f32> = u_xlat9;
    u_xlat73 = dot(vec3<f32>(x_3936.x, x_3936.y, x_3936.z), vec3<f32>(x_3938.x, x_3938.y, x_3938.z));
    let x_3941 : f32 = u_xlat73;
    u_xlat73 = max(x_3941, 6.10351562e-05f);
    let x_3945 : f32 = u_xlat73;
    u_xlat74 = inverseSqrt(x_3945);
    let x_3947 : f32 = u_xlat74;
    let x_3949 : vec4<f32> = u_xlat9;
    let x_3951 : vec3<f32> = (vec3<f32>(x_3947, x_3947, x_3947) * vec3<f32>(x_3949.x, x_3949.y, x_3949.z));
    let x_3952 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3951.x, x_3951.y, x_3951.z, x_3952.w);
    let x_3955 : f32 = u_xlat73;
    u_xlat75 = (1.0f / x_3955);
    let x_3957 : f32 = u_xlat73;
    let x_3958 : u32 = u_xlatu72;
    let x_3961 : f32 = x_3921.x_AdditionalLightsAttenuation[bitcast<i32>(x_3958)].x;
    u_xlat73 = (x_3957 * x_3961);
    let x_3963 : f32 = u_xlat73;
    let x_3965 : f32 = u_xlat73;
    u_xlat73 = ((-(x_3963) * x_3965) + 1.0f);
    let x_3968 : f32 = u_xlat73;
    u_xlat73 = max(x_3968, 0.0f);
    let x_3970 : f32 = u_xlat73;
    let x_3971 : f32 = u_xlat73;
    u_xlat73 = (x_3970 * x_3971);
    let x_3973 : f32 = u_xlat73;
    let x_3974 : f32 = u_xlat75;
    u_xlat73 = (x_3973 * x_3974);
    let x_3976 : u32 = u_xlatu72;
    let x_3979 : vec4<f32> = x_3921.x_AdditionalLightsSpotDir[bitcast<i32>(x_3976)];
    let x_3981 : vec4<f32> = u_xlat10;
    u_xlat75 = dot(vec3<f32>(x_3979.x, x_3979.y, x_3979.z), vec3<f32>(x_3981.x, x_3981.y, x_3981.z));
    let x_3984 : f32 = u_xlat75;
    let x_3985 : u32 = u_xlatu72;
    let x_3988 : f32 = x_3921.x_AdditionalLightsAttenuation[bitcast<i32>(x_3985)].z;
    let x_3990 : u32 = u_xlatu72;
    let x_3993 : f32 = x_3921.x_AdditionalLightsAttenuation[bitcast<i32>(x_3990)].w;
    u_xlat75 = ((x_3984 * x_3988) + x_3993);
    let x_3995 : f32 = u_xlat75;
    u_xlat75 = clamp(x_3995, 0.0f, 1.0f);
    let x_3997 : f32 = u_xlat75;
    let x_3998 : f32 = u_xlat75;
    u_xlat75 = (x_3997 * x_3998);
    let x_4000 : f32 = u_xlat73;
    let x_4001 : f32 = u_xlat75;
    u_xlat73 = (x_4000 * x_4001);
    let x_4004 : u32 = u_xlatu72;
    u_xlatu75 = (x_4004 >> 5u);
    let x_4007 : u32 = u_xlatu72;
    u_xlati76 = (1i << bitcast<u32>((bitcast<i32>(x_4007) & 31i)));
    let x_4013 : i32 = u_xlati76;
    let x_4015 : u32 = u_xlatu75;
    let x_4018 : f32 = x_3424.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4015)].el;
    u_xlati75 = bitcast<i32>((bitcast<u32>(x_4013) & bitcast<u32>(x_4018)));
    let x_4022 : i32 = u_xlati75;
    if ((x_4022 != 0i)) {
      let x_4032 : u32 = u_xlatu72;
      let x_4035 : f32 = x_4031.x_AdditionalLightsLightTypes[bitcast<i32>(x_4032)].el;
      u_xlati75 = i32(x_4035);
      let x_4037 : i32 = u_xlati75;
      u_xlati76 = select(1i, 0i, (x_4037 != 0i));
      let x_4041 : u32 = u_xlatu72;
      u_xlati11 = (bitcast<i32>(x_4041) << bitcast<u32>(2i));
      let x_4044 : i32 = u_xlati76;
      if ((x_4044 != 0i)) {
        let x_4049 : vec3<f32> = vs_INTERP0;
        let x_4051 : i32 = u_xlati11;
        let x_4054 : i32 = u_xlati11;
        let x_4058 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4051 + 1i) / 4i)][((x_4054 + 1i) % 4i)];
        u_xlat33 = (vec3<f32>(x_4049.y, x_4049.y, x_4049.y) * vec3<f32>(x_4058.x, x_4058.y, x_4058.w));
        let x_4061 : i32 = u_xlati11;
        let x_4063 : i32 = u_xlati11;
        let x_4066 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[(x_4061 / 4i)][(x_4063 % 4i)];
        let x_4068 : vec3<f32> = vs_INTERP0;
        let x_4071 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4066.x, x_4066.y, x_4066.w) * vec3<f32>(x_4068.x, x_4068.x, x_4068.x)) + x_4071);
        let x_4073 : i32 = u_xlati11;
        let x_4076 : i32 = u_xlati11;
        let x_4080 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4073 + 2i) / 4i)][((x_4076 + 2i) % 4i)];
        let x_4082 : vec3<f32> = vs_INTERP0;
        let x_4085 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4080.x, x_4080.y, x_4080.w) * vec3<f32>(x_4082.z, x_4082.z, x_4082.z)) + x_4085);
        let x_4087 : vec3<f32> = u_xlat33;
        let x_4088 : i32 = u_xlati11;
        let x_4091 : i32 = u_xlati11;
        let x_4095 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4088 + 3i) / 4i)][((x_4091 + 3i) % 4i)];
        u_xlat33 = (x_4087 + vec3<f32>(x_4095.x, x_4095.y, x_4095.w));
        let x_4098 : vec3<f32> = u_xlat33;
        let x_4100 : vec3<f32> = u_xlat33;
        let x_4102 : vec2<f32> = (vec2<f32>(x_4098.x, x_4098.y) / vec2<f32>(x_4100.z, x_4100.z));
        let x_4103 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4102.x, x_4102.y, x_4103.z);
        let x_4105 : vec3<f32> = u_xlat33;
        let x_4108 : vec2<f32> = ((vec2<f32>(x_4105.x, x_4105.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4109 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4108.x, x_4108.y, x_4109.z);
        let x_4111 : vec3<f32> = u_xlat33;
        let x_4115 : vec2<f32> = clamp(vec2<f32>(x_4111.x, x_4111.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4116 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4115.x, x_4115.y, x_4116.z);
        let x_4118 : u32 = u_xlatu72;
        let x_4121 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4118)];
        let x_4123 : vec3<f32> = u_xlat33;
        let x_4126 : u32 = u_xlatu72;
        let x_4129 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4126)];
        let x_4131 : vec2<f32> = ((vec2<f32>(x_4121.x, x_4121.y) * vec2<f32>(x_4123.x, x_4123.y)) + vec2<f32>(x_4129.z, x_4129.w));
        let x_4132 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4131.x, x_4131.y, x_4132.z);
      } else {
        let x_4136 : i32 = u_xlati75;
        u_xlatb75 = (x_4136 == 1i);
        let x_4138 : bool = u_xlatb75;
        u_xlati75 = select(0i, 1i, x_4138);
        let x_4140 : i32 = u_xlati75;
        if ((x_4140 != 0i)) {
          let x_4144 : vec3<f32> = vs_INTERP0;
          let x_4146 : i32 = u_xlati11;
          let x_4149 : i32 = u_xlati11;
          let x_4153 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4146 + 1i) / 4i)][((x_4149 + 1i) % 4i)];
          let x_4155 : vec2<f32> = (vec2<f32>(x_4144.y, x_4144.y) * vec2<f32>(x_4153.x, x_4153.y));
          let x_4156 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4155.x, x_4155.y, x_4156.z, x_4156.w);
          let x_4158 : i32 = u_xlati11;
          let x_4160 : i32 = u_xlati11;
          let x_4163 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[(x_4158 / 4i)][(x_4160 % 4i)];
          let x_4165 : vec3<f32> = vs_INTERP0;
          let x_4168 : vec4<f32> = u_xlat12;
          let x_4170 : vec2<f32> = ((vec2<f32>(x_4163.x, x_4163.y) * vec2<f32>(x_4165.x, x_4165.x)) + vec2<f32>(x_4168.x, x_4168.y));
          let x_4171 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4170.x, x_4170.y, x_4171.z, x_4171.w);
          let x_4173 : i32 = u_xlati11;
          let x_4176 : i32 = u_xlati11;
          let x_4180 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4173 + 2i) / 4i)][((x_4176 + 2i) % 4i)];
          let x_4182 : vec3<f32> = vs_INTERP0;
          let x_4185 : vec4<f32> = u_xlat12;
          let x_4187 : vec2<f32> = ((vec2<f32>(x_4180.x, x_4180.y) * vec2<f32>(x_4182.z, x_4182.z)) + vec2<f32>(x_4185.x, x_4185.y));
          let x_4188 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4187.x, x_4187.y, x_4188.z, x_4188.w);
          let x_4190 : vec4<f32> = u_xlat12;
          let x_4192 : i32 = u_xlati11;
          let x_4195 : i32 = u_xlati11;
          let x_4199 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4192 + 3i) / 4i)][((x_4195 + 3i) % 4i)];
          let x_4201 : vec2<f32> = (vec2<f32>(x_4190.x, x_4190.y) + vec2<f32>(x_4199.x, x_4199.y));
          let x_4202 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4201.x, x_4201.y, x_4202.z, x_4202.w);
          let x_4204 : vec4<f32> = u_xlat12;
          let x_4207 : vec2<f32> = ((vec2<f32>(x_4204.x, x_4204.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4208 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4207.x, x_4207.y, x_4208.z, x_4208.w);
          let x_4210 : vec4<f32> = u_xlat12;
          let x_4212 : vec2<f32> = fract(vec2<f32>(x_4210.x, x_4210.y));
          let x_4213 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4212.x, x_4212.y, x_4213.z, x_4213.w);
          let x_4215 : u32 = u_xlatu72;
          let x_4218 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4215)];
          let x_4220 : vec4<f32> = u_xlat12;
          let x_4223 : u32 = u_xlatu72;
          let x_4226 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4223)];
          let x_4228 : vec2<f32> = ((vec2<f32>(x_4218.x, x_4218.y) * vec2<f32>(x_4220.x, x_4220.y)) + vec2<f32>(x_4226.z, x_4226.w));
          let x_4229 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4228.x, x_4228.y, x_4229.z);
        } else {
          let x_4232 : vec3<f32> = vs_INTERP0;
          let x_4234 : i32 = u_xlati11;
          let x_4237 : i32 = u_xlati11;
          let x_4241 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4234 + 1i) / 4i)][((x_4237 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4232.y, x_4232.y, x_4232.y, x_4232.y) * x_4241);
          let x_4243 : i32 = u_xlati11;
          let x_4245 : i32 = u_xlati11;
          let x_4248 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[(x_4243 / 4i)][(x_4245 % 4i)];
          let x_4249 : vec3<f32> = vs_INTERP0;
          let x_4252 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4248 * vec4<f32>(x_4249.x, x_4249.x, x_4249.x, x_4249.x)) + x_4252);
          let x_4254 : i32 = u_xlati11;
          let x_4257 : i32 = u_xlati11;
          let x_4261 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4254 + 2i) / 4i)][((x_4257 + 2i) % 4i)];
          let x_4262 : vec3<f32> = vs_INTERP0;
          let x_4265 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4261 * vec4<f32>(x_4262.z, x_4262.z, x_4262.z, x_4262.z)) + x_4265);
          let x_4267 : vec4<f32> = u_xlat12;
          let x_4268 : i32 = u_xlati11;
          let x_4271 : i32 = u_xlati11;
          let x_4275 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4268 + 3i) / 4i)][((x_4271 + 3i) % 4i)];
          u_xlat12 = (x_4267 + x_4275);
          let x_4277 : vec4<f32> = u_xlat12;
          let x_4279 : vec4<f32> = u_xlat12;
          let x_4281 : vec3<f32> = (vec3<f32>(x_4277.x, x_4277.y, x_4277.z) / vec3<f32>(x_4279.w, x_4279.w, x_4279.w));
          let x_4282 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4281.x, x_4281.y, x_4281.z, x_4282.w);
          let x_4284 : vec4<f32> = u_xlat12;
          let x_4286 : vec4<f32> = u_xlat12;
          u_xlat75 = dot(vec3<f32>(x_4284.x, x_4284.y, x_4284.z), vec3<f32>(x_4286.x, x_4286.y, x_4286.z));
          let x_4289 : f32 = u_xlat75;
          u_xlat75 = inverseSqrt(x_4289);
          let x_4291 : f32 = u_xlat75;
          let x_4293 : vec4<f32> = u_xlat12;
          let x_4295 : vec3<f32> = (vec3<f32>(x_4291, x_4291, x_4291) * vec3<f32>(x_4293.x, x_4293.y, x_4293.z));
          let x_4296 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4295.x, x_4295.y, x_4295.z, x_4296.w);
          let x_4298 : vec4<f32> = u_xlat12;
          u_xlat75 = dot(abs(vec3<f32>(x_4298.x, x_4298.y, x_4298.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4303 : f32 = u_xlat75;
          u_xlat75 = max(x_4303, 0.000001f);
          let x_4306 : f32 = u_xlat75;
          u_xlat75 = (1.0f / x_4306);
          let x_4308 : f32 = u_xlat75;
          let x_4310 : vec4<f32> = u_xlat12;
          let x_4312 : vec3<f32> = (vec3<f32>(x_4308, x_4308, x_4308) * vec3<f32>(x_4310.z, x_4310.x, x_4310.y));
          let x_4313 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4312.x, x_4312.y, x_4312.z, x_4313.w);
          let x_4316 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4316);
          let x_4320 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4320, 0.0f, 1.0f);
          let x_4324 : vec4<f32> = u_xlat13;
          let x_4327 : vec4<bool> = (vec4<f32>(x_4324.y, x_4324.y, x_4324.y, x_4324.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4328 : vec2<bool> = vec2<bool>(x_4327.x, x_4327.w);
          let x_4329 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4328.x, x_4329.y, x_4329.z, x_4328.y);
          let x_4332 : bool = u_xlatb11.x;
          if (x_4332) {
            let x_4337 : f32 = u_xlat13.x;
            x_4333 = x_4337;
          } else {
            let x_4340 : f32 = u_xlat13.x;
            x_4333 = -(x_4340);
          }
          let x_4342 : f32 = x_4333;
          u_xlat11.x = x_4342;
          let x_4345 : bool = u_xlatb11.w;
          if (x_4345) {
            let x_4350 : f32 = u_xlat13.x;
            x_4346 = x_4350;
          } else {
            let x_4353 : f32 = u_xlat13.x;
            x_4346 = -(x_4353);
          }
          let x_4355 : f32 = x_4346;
          u_xlat11.w = x_4355;
          let x_4357 : vec4<f32> = u_xlat12;
          let x_4359 : f32 = u_xlat75;
          let x_4362 : vec4<f32> = u_xlat11;
          let x_4364 : vec2<f32> = ((vec2<f32>(x_4357.x, x_4357.y) * vec2<f32>(x_4359, x_4359)) + vec2<f32>(x_4362.x, x_4362.w));
          let x_4365 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4364.x, x_4365.y, x_4365.z, x_4364.y);
          let x_4367 : vec4<f32> = u_xlat11;
          let x_4370 : vec2<f32> = ((vec2<f32>(x_4367.x, x_4367.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4371 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4370.x, x_4371.y, x_4371.z, x_4370.y);
          let x_4373 : vec4<f32> = u_xlat11;
          let x_4377 : vec2<f32> = clamp(vec2<f32>(x_4373.x, x_4373.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4378 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4377.x, x_4378.y, x_4378.z, x_4377.y);
          let x_4380 : u32 = u_xlatu72;
          let x_4383 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4380)];
          let x_4385 : vec4<f32> = u_xlat11;
          let x_4388 : u32 = u_xlatu72;
          let x_4391 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4388)];
          let x_4393 : vec2<f32> = ((vec2<f32>(x_4383.x, x_4383.y) * vec2<f32>(x_4385.x, x_4385.w)) + vec2<f32>(x_4391.z, x_4391.w));
          let x_4394 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4393.x, x_4393.y, x_4394.z);
        }
      }
      let x_4401 : vec3<f32> = u_xlat33;
      let x_4404 : f32 = x_158.x_GlobalMipBias.x;
      let x_4405 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4401.x, x_4401.y), x_4404);
      u_xlat11 = x_4405;
      let x_4407 : bool = u_xlatb2.w;
      if (x_4407) {
        let x_4412 : f32 = u_xlat11.w;
        x_4408 = x_4412;
      } else {
        let x_4415 : f32 = u_xlat11.x;
        x_4408 = x_4415;
      }
      let x_4416 : f32 = x_4408;
      u_xlat75 = x_4416;
      let x_4418 : bool = u_xlatb2.x;
      if (x_4418) {
        let x_4422 : vec4<f32> = u_xlat11;
        x_4419 = vec3<f32>(x_4422.x, x_4422.y, x_4422.z);
      } else {
        let x_4425 : f32 = u_xlat75;
        x_4419 = vec3<f32>(x_4425, x_4425, x_4425);
      }
      let x_4427 : vec3<f32> = x_4419;
      let x_4428 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4427.x, x_4427.y, x_4427.z, x_4428.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4434 : vec4<f32> = u_xlat11;
    let x_4436 : u32 = u_xlatu72;
    let x_4439 : vec4<f32> = x_3921.x_AdditionalLightsColor[bitcast<i32>(x_4436)];
    let x_4441 : vec3<f32> = (vec3<f32>(x_4434.x, x_4434.y, x_4434.z) * vec3<f32>(x_4439.x, x_4439.y, x_4439.z));
    let x_4442 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4441.x, x_4441.y, x_4441.z, x_4442.w);
    let x_4444 : f32 = u_xlat71;
    let x_4446 : vec4<f32> = u_xlat11;
    let x_4448 : vec3<f32> = (vec3<f32>(x_4444, x_4444, x_4444) * vec3<f32>(x_4446.x, x_4446.y, x_4446.z));
    let x_4449 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4448.x, x_4448.y, x_4448.z, x_4449.w);
    let x_4451 : vec4<f32> = u_xlat3;
    let x_4453 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_4451.x, x_4451.y, x_4451.z), vec3<f32>(x_4453.x, x_4453.y, x_4453.z));
    let x_4456 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4456, 0.0f, 1.0f);
    let x_4458 : f32 = u_xlat72;
    let x_4459 : f32 = u_xlat73;
    u_xlat72 = (x_4458 * x_4459);
    let x_4461 : f32 = u_xlat72;
    let x_4463 : vec4<f32> = u_xlat11;
    let x_4465 : vec3<f32> = (vec3<f32>(x_4461, x_4461, x_4461) * vec3<f32>(x_4463.x, x_4463.y, x_4463.z));
    let x_4466 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4465.x, x_4465.y, x_4465.z, x_4466.w);
    let x_4468 : vec4<f32> = u_xlat9;
    let x_4470 : f32 = u_xlat74;
    let x_4473 : vec3<f32> = u_xlat4;
    let x_4474 : vec3<f32> = ((vec3<f32>(x_4468.x, x_4468.y, x_4468.z) * vec3<f32>(x_4470, x_4470, x_4470)) + x_4473);
    let x_4475 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4474.x, x_4474.y, x_4474.z, x_4475.w);
    let x_4477 : vec4<f32> = u_xlat9;
    let x_4479 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4477.x, x_4477.y, x_4477.z), vec3<f32>(x_4479.x, x_4479.y, x_4479.z));
    let x_4482 : f32 = u_xlat72;
    u_xlat72 = max(x_4482, 1.17549435e-37f);
    let x_4484 : f32 = u_xlat72;
    u_xlat72 = inverseSqrt(x_4484);
    let x_4486 : f32 = u_xlat72;
    let x_4488 : vec4<f32> = u_xlat9;
    let x_4490 : vec3<f32> = (vec3<f32>(x_4486, x_4486, x_4486) * vec3<f32>(x_4488.x, x_4488.y, x_4488.z));
    let x_4491 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4490.x, x_4490.y, x_4490.z, x_4491.w);
    let x_4493 : vec4<f32> = u_xlat3;
    let x_4495 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4493.x, x_4493.y, x_4493.z), vec3<f32>(x_4495.x, x_4495.y, x_4495.z));
    let x_4498 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4498, 0.0f, 1.0f);
    let x_4500 : vec4<f32> = u_xlat10;
    let x_4502 : vec4<f32> = u_xlat9;
    u_xlat73 = dot(vec3<f32>(x_4500.x, x_4500.y, x_4500.z), vec3<f32>(x_4502.x, x_4502.y, x_4502.z));
    let x_4505 : f32 = u_xlat73;
    u_xlat73 = clamp(x_4505, 0.0f, 1.0f);
    let x_4507 : f32 = u_xlat72;
    let x_4508 : f32 = u_xlat72;
    u_xlat72 = (x_4507 * x_4508);
    let x_4510 : f32 = u_xlat72;
    let x_4512 : f32 = u_xlat44.x;
    u_xlat72 = ((x_4510 * x_4512) + 1.000010014f);
    let x_4515 : f32 = u_xlat73;
    let x_4516 : f32 = u_xlat73;
    u_xlat73 = (x_4515 * x_4516);
    let x_4518 : f32 = u_xlat72;
    let x_4519 : f32 = u_xlat72;
    u_xlat72 = (x_4518 * x_4519);
    let x_4521 : f32 = u_xlat73;
    u_xlat73 = max(x_4521, 0.100000001f);
    let x_4523 : f32 = u_xlat72;
    let x_4524 : f32 = u_xlat73;
    u_xlat72 = (x_4523 * x_4524);
    let x_4526 : f32 = u_xlat69;
    let x_4527 : f32 = u_xlat72;
    u_xlat72 = (x_4526 * x_4527);
    let x_4529 : f32 = u_xlat46;
    let x_4530 : f32 = u_xlat72;
    u_xlat72 = (x_4529 / x_4530);
    let x_4532 : f32 = u_xlat72;
    let x_4535 : vec3<f32> = u_xlat7;
    let x_4536 : vec3<f32> = ((vec3<f32>(x_4532, x_4532, x_4532) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4535);
    let x_4537 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4536.x, x_4536.y, x_4536.z, x_4537.w);
    let x_4539 : vec4<f32> = u_xlat9;
    let x_4541 : vec4<f32> = u_xlat11;
    let x_4544 : vec4<f32> = u_xlat8;
    let x_4546 : vec3<f32> = ((vec3<f32>(x_4539.x, x_4539.y, x_4539.z) * vec3<f32>(x_4541.x, x_4541.y, x_4541.z)) + vec3<f32>(x_4544.x, x_4544.y, x_4544.z));
    let x_4547 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4546.x, x_4546.y, x_4546.z, x_4547.w);

    continuing {
      let x_4549 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4549 + bitcast<u32>(1i));
    }
  }
  let x_4551 : vec3<f32> = u_xlat5;
  let x_4552 : f32 = u_xlat70;
  let x_4555 : vec4<f32> = u_xlat6;
  let x_4557 : vec3<f32> = ((x_4551 * vec3<f32>(x_4552, x_4552, x_4552)) + vec3<f32>(x_4555.x, x_4555.y, x_4555.z));
  let x_4558 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4557.x, x_4558.y, x_4557.y, x_4557.z);
  let x_4560 : vec4<f32> = u_xlat8;
  let x_4562 : vec4<f32> = u_xlat0;
  let x_4564 : vec3<f32> = (vec3<f32>(x_4560.x, x_4560.y, x_4560.z) + vec3<f32>(x_4562.x, x_4562.z, x_4562.w));
  let x_4565 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4564.x, x_4565.y, x_4564.y, x_4564.z);
  let x_4567 : vec4<f32> = vs_INTERP4;
  let x_4569 : vec3<f32> = u_xlat1;
  let x_4571 : vec4<f32> = u_xlat0;
  let x_4573 : vec3<f32> = ((vec3<f32>(x_4567.w, x_4567.w, x_4567.w) * x_4569) + vec3<f32>(x_4571.x, x_4571.z, x_4571.w));
  let x_4574 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4573.x, x_4574.y, x_4573.y, x_4573.z);
  let x_4577 : f32 = u_xlat22.x;
  let x_4579 : f32 = u_xlat22.x;
  u_xlat22.x = (x_4577 * -(x_4579));
  let x_4584 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_4584);
  let x_4587 : vec4<f32> = u_xlat0;
  let x_4591 : vec4<f32> = x_158.unity_FogColor;
  let x_4594 : vec3<f32> = (vec3<f32>(x_4587.x, x_4587.z, x_4587.w) + -(vec3<f32>(x_4591.x, x_4591.y, x_4591.z)));
  let x_4595 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_4594.x, x_4595.y, x_4594.y, x_4594.z);
  let x_4599 : vec3<f32> = u_xlat22;
  let x_4601 : vec4<f32> = u_xlat0;
  let x_4605 : vec4<f32> = x_158.unity_FogColor;
  let x_4607 : vec3<f32> = ((vec3<f32>(x_4599.x, x_4599.x, x_4599.x) * vec3<f32>(x_4601.x, x_4601.z, x_4601.w)) + vec3<f32>(x_4605.x, x_4605.y, x_4605.z));
  let x_4608 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4607.x, x_4607.y, x_4607.z, x_4608.w);
  let x_4610 : bool = u_xlatb24;
  let x_4611 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4611, x_4610);
  let x_4617 : u32 = x_158.x_RenderingLayerMaxInt;
  let x_4619 : f32 = x_94.unity_RenderingLayer.x;
  u_xlatu0 = (x_4617 & bitcast<u32>(x_4619));
  let x_4622 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4622);
  let x_4627 : f32 = u_xlat0.x;
  let x_4629 : f32 = x_158.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4627 * x_4629);
  let x_4633 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4633, 0.0f, 1.0f);
  let x_4636 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4636.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

