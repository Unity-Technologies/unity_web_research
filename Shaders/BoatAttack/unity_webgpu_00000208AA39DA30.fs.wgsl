type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb2 : vec4<bool>;
  var x_465 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var x_474 : vec3<f32>;
  var x_485 : vec3<f32>;
  var x_496 : vec3<f32>;
  var x_507 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb25 : bool;
  var x_733 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var x_1016 : vec3<f32>;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var x_1309 : vec3<f32>;
  var u_xlat19 : f32;
  var x_1595 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_100 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_102 : vec2<f32> = vs_TEXCOORD0;
  let x_107 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_109 : vec3<f32> = ((vec3<f32>(x_100.x, x_100.y, x_100.z) * vec3<f32>(x_102.x, x_102.x, x_102.x)) + vec3<f32>(x_107.x, x_107.y, x_107.z));
  let x_110 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_109.x, x_109.y, x_109.z, x_110.w);
  let x_114 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_116 : vec3<f32> = u_xlat8;
  let x_119 : vec4<f32> = u_xlat1;
  let x_121 : vec3<f32> = ((vec3<f32>(x_114.x, x_114.y, x_114.z) * vec3<f32>(x_116.x, x_116.x, x_116.x)) + vec3<f32>(x_119.x, x_119.y, x_119.z));
  let x_122 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_121.x, x_121.y, x_121.z, x_122.w);
  let x_124 : f32 = u_xlat16;
  let x_126 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_124, x_124, x_124) * vec3<f32>(x_126.x, x_126.y, x_126.z));
  let x_132 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_132 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_137 : vec3<f32> = u_xlat9;
  let x_139 : vec2<f32> = vs_TEXCOORD0;
  let x_140 : vec2<f32> = (vec2<f32>(x_137.x, x_137.y) + x_139);
  let x_141 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_140.x, x_140.y, x_141.z);
  let x_146 : vec3<f32> = u_xlat9;
  let x_149 : f32 = x_33.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_146.x, x_146.y), x_149);
  u_xlat1.x = x_150.x;
  let x_154 : f32 = x_33.x_ZBufferParams.z;
  let x_156 : f32 = u_xlat1.x;
  let x_159 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_154 * x_156) + x_159);
  let x_163 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_163);
  let x_168 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_168 * 2.0f);
  u_xlat2.y = 0.0f;
  u_xlat18.y = 0.0f;
  let x_177 : vec4<f32> = u_xlat2;
  let x_179 : vec2<f32> = vs_TEXCOORD0;
  let x_180 : vec2<f32> = (vec2<f32>(x_177.x, x_177.y) + x_179);
  let x_181 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_180.x, x_180.y, x_181.z, x_181.w);
  let x_186 : vec4<f32> = u_xlat3;
  let x_189 : f32 = x_33.x_GlobalMipBias.x;
  let x_190 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_186.x, x_186.y), x_189);
  u_xlat1.x = x_190.x;
  let x_194 : f32 = x_33.x_ZBufferParams.z;
  let x_196 : f32 = u_xlat1.x;
  let x_199 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_194 * x_196) + x_199);
  let x_203 : f32 = u_xlat1.x;
  u_xlat3.z = (1.0f / x_203);
  u_xlat12.x = 0.0f;
  let x_209 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_209 * 2.0f);
  let x_212 : vec3<f32> = u_xlat12;
  let x_214 : vec2<f32> = vs_TEXCOORD0;
  let x_215 : vec2<f32> = (vec2<f32>(x_212.x, x_212.y) + x_214);
  let x_216 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_215.x, x_215.y, x_216.z);
  let x_221 : vec3<f32> = u_xlat12;
  let x_224 : f32 = x_33.x_GlobalMipBias.x;
  let x_225 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_221.x, x_221.y), x_224);
  u_xlat1.x = x_225.x;
  let x_229 : f32 = x_33.x_ZBufferParams.z;
  let x_231 : f32 = u_xlat1.x;
  let x_234 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_229 * x_231) + x_234);
  let x_238 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_238);
  u_xlat13.x = 0.0f;
  let x_244 : f32 = x_33.x_SourceSize.w;
  u_xlat13.y = (x_244 * -2.0f);
  let x_247 : vec3<f32> = u_xlat13;
  let x_249 : vec2<f32> = vs_TEXCOORD0;
  let x_250 : vec2<f32> = (vec2<f32>(x_247.x, x_247.y) + x_249);
  let x_251 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_250.x, x_250.y, x_251.z);
  let x_256 : vec3<f32> = u_xlat13;
  let x_259 : f32 = x_33.x_GlobalMipBias.x;
  let x_260 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_256.x, x_256.y), x_259);
  u_xlat1.x = x_260.x;
  let x_264 : f32 = x_33.x_ZBufferParams.z;
  let x_266 : f32 = u_xlat1.x;
  let x_269 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_264 * x_266) + x_269);
  let x_273 : f32 = u_xlat1.x;
  u_xlat13.z = (1.0f / x_273);
  let x_277 : f32 = x_33.x_SourceSize.z;
  u_xlat18.x = x_277;
  let x_279 : vec2<f32> = u_xlat18;
  let x_285 : vec2<f32> = vs_TEXCOORD0;
  u_xlat2 = ((vec4<f32>(x_279.x, x_279.y, x_279.x, x_279.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_285.x, x_285.y, x_285.x, x_285.y));
  let x_291 : vec4<f32> = u_xlat2;
  let x_294 : f32 = x_33.x_GlobalMipBias.x;
  let x_295 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_291.x, x_291.y), x_294);
  u_xlat1.x = x_295.x;
  let x_299 : f32 = x_33.x_ZBufferParams.z;
  let x_301 : f32 = u_xlat1.x;
  let x_304 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_299 * x_301) + x_304);
  let x_308 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_308);
  let x_314 : vec4<f32> = u_xlat2;
  let x_317 : f32 = x_33.x_GlobalMipBias.x;
  let x_318 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_314.z, x_314.w), x_317);
  u_xlat2.x = x_318.x;
  let x_322 : f32 = x_33.x_ZBufferParams.z;
  let x_324 : f32 = u_xlat2.x;
  let x_327 : f32 = x_33.x_ZBufferParams.w;
  u_xlat2.x = ((x_322 * x_324) + x_327);
  let x_331 : f32 = u_xlat2.x;
  u_xlat2.x = (1.0f / x_331);
  u_xlat6.x = 2.0f;
  let x_337 : f32 = x_33.x_SourceSize.w;
  u_xlat6.y = x_337;
  let x_340 : vec4<f32> = u_xlat6;
  let x_343 : vec2<f32> = vs_TEXCOORD0;
  u_xlat6 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_340.x, x_340.y, x_340.x, x_340.y)) + vec4<f32>(x_343.x, x_343.y, x_343.x, x_343.y));
  let x_350 : vec4<f32> = u_xlat6;
  let x_353 : f32 = x_33.x_GlobalMipBias.x;
  let x_354 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_350.x, x_350.y), x_353);
  u_xlat10.x = x_354.x;
  let x_358 : f32 = x_33.x_ZBufferParams.z;
  let x_360 : f32 = u_xlat10.x;
  let x_363 : f32 = x_33.x_ZBufferParams.w;
  u_xlat10.x = ((x_358 * x_360) + x_363);
  let x_367 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_367);
  let x_373 : vec4<f32> = u_xlat6;
  let x_376 : f32 = x_33.x_GlobalMipBias.x;
  let x_377 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_373.z, x_373.w), x_376);
  u_xlat18.x = x_377.x;
  let x_381 : f32 = x_33.x_ZBufferParams.z;
  let x_383 : f32 = u_xlat18.x;
  let x_386 : f32 = x_33.x_ZBufferParams.w;
  u_xlat18.x = ((x_381 * x_383) + x_386);
  let x_390 : f32 = u_xlat18.x;
  u_xlat18.x = (1.0f / x_390);
  let x_394 : f32 = u_xlat9.z;
  let x_397 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_394 * 2.0f) + -(x_397));
  let x_401 : f32 = u_xlat0;
  let x_404 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_401) + x_404);
  let x_408 : f32 = u_xlat3.z;
  let x_411 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_408 * 2.0f) + -(x_411));
  let x_415 : f32 = u_xlat0;
  let x_418 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_415) + x_418);
  let x_423 : f32 = u_xlat1.x;
  let x_426 : f32 = u_xlat2.x;
  u_xlatb1 = (abs(x_423) < abs(x_426));
  let x_430 : f32 = u_xlat13.z;
  let x_433 : f32 = u_xlat18.x;
  u_xlat2.x = ((x_430 * 2.0f) + -(x_433));
  let x_438 : f32 = u_xlat12.z;
  let x_441 : f32 = u_xlat10.x;
  u_xlat2.y = ((x_438 * 2.0f) + -(x_441));
  let x_445 : f32 = u_xlat0;
  let x_448 : vec4<f32> = u_xlat2;
  let x_450 : vec2<f32> = (-(vec2<f32>(x_445, x_445)) + vec2<f32>(x_448.x, x_448.y));
  let x_451 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_450.x, x_450.y, x_451.z, x_451.w);
  let x_457 : f32 = u_xlat2.x;
  let x_460 : f32 = u_xlat2.y;
  u_xlatb2.x = (abs(x_457) < abs(x_460));
  let x_464 : bool = u_xlatb1;
  if (x_464) {
    let x_468 : vec3<f32> = u_xlat9;
    x_465 = x_468;
  } else {
    let x_470 : vec3<f32> = u_xlat13;
    x_465 = x_470;
  }
  let x_471 : vec3<f32> = x_465;
  u_xlat10 = x_471;
  let x_473 : bool = u_xlatb1;
  if (x_473) {
    let x_477 : vec3<f32> = u_xlat13;
    x_474 = x_477;
  } else {
    let x_479 : vec4<f32> = u_xlat3;
    x_474 = vec3<f32>(x_479.x, x_479.y, x_479.z);
  }
  let x_481 : vec3<f32> = x_474;
  let x_482 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_482.x, x_481.x, x_481.y, x_481.z);
  let x_484 : bool = u_xlatb1;
  if (x_484) {
    let x_488 : vec3<f32> = u_xlat12;
    x_485 = x_488;
  } else {
    let x_490 : vec4<f32> = u_xlat3;
    x_485 = vec3<f32>(x_490.x, x_490.y, x_490.z);
  }
  let x_492 : vec3<f32> = x_485;
  let x_493 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_492.x, x_492.y, x_492.z, x_493.w);
  let x_495 : bool = u_xlatb1;
  if (x_495) {
    let x_499 : vec3<f32> = u_xlat9;
    x_496 = x_499;
  } else {
    let x_501 : vec3<f32> = u_xlat12;
    x_496 = x_501;
  }
  let x_502 : vec3<f32> = x_496;
  let x_503 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_503.x, x_502.x, x_502.y, x_502.z);
  let x_506 : bool = u_xlatb2.x;
  if (x_506) {
    let x_510 : vec3<f32> = u_xlat10;
    x_507 = vec2<f32>(x_510.x, x_510.y);
  } else {
    let x_513 : vec4<f32> = u_xlat3;
    x_507 = vec2<f32>(x_513.x, x_513.y);
  }
  let x_515 : vec2<f32> = x_507;
  let x_516 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_515.x, x_515.y, x_516.z);
  let x_519 : f32 = u_xlat10.z;
  u_xlat5.x = x_519;
  let x_522 : f32 = u_xlat3.z;
  u_xlat1.x = x_522;
  let x_525 : bool = u_xlatb2.x;
  let x_526 : vec4<f32> = u_xlat5;
  let x_527 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_527, x_526, vec4<bool>(x_525, x_525, x_525, x_525));
  let x_532 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_532) + 1.0f);
  let x_535 : vec4<f32> = u_xlat1;
  let x_538 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_540 : vec2<f32> = (vec2<f32>(x_535.w, x_535.x) * vec2<f32>(x_538.x, x_538.x));
  let x_541 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_540.x, x_541.y, x_541.z, x_540.y);
  let x_544 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_546 : vec4<f32> = u_xlat1;
  let x_550 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_552 : vec3<f32> = ((vec3<f32>(x_544.z, x_544.x, x_544.y) * vec3<f32>(x_546.y, x_546.y, x_546.y)) + vec3<f32>(x_550.z, x_550.x, x_550.y));
  let x_553 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_552.x, x_552.y, x_552.z, x_553.w);
  let x_556 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_558 : f32 = u_xlat17;
  let x_561 : vec4<f32> = u_xlat3;
  let x_563 : vec3<f32> = ((vec3<f32>(x_556.z, x_556.x, x_556.y) * vec3<f32>(x_558, x_558, x_558)) + vec3<f32>(x_561.x, x_561.y, x_561.z));
  let x_564 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_568 : vec4<f32> = u_xlat1;
  let x_571 : vec3<f32> = u_xlat8;
  let x_574 : vec3<f32> = ((vec3<f32>(x_566.x, x_566.y, x_566.z) * vec3<f32>(x_568.x, x_568.x, x_568.x)) + -(vec3<f32>(x_571.z, x_571.x, x_571.y)));
  let x_575 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_574.x, x_574.y, x_574.z, x_575.w);
  let x_578 : f32 = u_xlat10.y;
  u_xlat2.x = (-(x_578) + 1.0f);
  let x_583 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_585 : vec3<f32> = u_xlat10;
  let x_589 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat10 = ((vec3<f32>(x_583.y, x_583.z, x_583.x) * vec3<f32>(x_585.x, x_585.x, x_585.x)) + vec3<f32>(x_589.y, x_589.z, x_589.x));
  let x_593 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_595 : vec4<f32> = u_xlat2;
  let x_598 : vec3<f32> = u_xlat10;
  let x_599 : vec3<f32> = ((vec3<f32>(x_593.y, x_593.z, x_593.x) * vec3<f32>(x_595.x, x_595.x, x_595.x)) + x_598);
  let x_600 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_599.x, x_599.y, x_599.z, x_600.w);
  let x_602 : vec4<f32> = u_xlat2;
  let x_604 : vec4<f32> = u_xlat1;
  let x_607 : vec3<f32> = u_xlat8;
  let x_610 : vec3<f32> = ((vec3<f32>(x_602.x, x_602.y, x_602.z) * vec3<f32>(x_604.w, x_604.w, x_604.w)) + -(vec3<f32>(x_607.y, x_607.z, x_607.x)));
  let x_611 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_610.x, x_610.y, x_610.z, x_611.w);
  let x_613 : vec4<f32> = u_xlat1;
  let x_615 : vec4<f32> = u_xlat2;
  let x_617 : vec3<f32> = (vec3<f32>(x_613.x, x_613.y, x_613.z) * vec3<f32>(x_615.x, x_615.y, x_615.z));
  let x_618 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_617.x, x_617.y, x_617.z, x_618.w);
  let x_620 : vec4<f32> = u_xlat1;
  let x_622 : vec4<f32> = u_xlat2;
  let x_625 : vec4<f32> = u_xlat3;
  let x_628 : vec3<f32> = ((vec3<f32>(x_620.z, x_620.x, x_620.y) * vec3<f32>(x_622.y, x_622.z, x_622.x)) + -(vec3<f32>(x_625.x, x_625.y, x_625.z)));
  let x_629 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_628.x, x_628.y, x_628.z, x_629.w);
  let x_632 : vec4<f32> = u_xlat1;
  let x_634 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_632.x, x_632.y, x_632.z), vec3<f32>(x_634.x, x_634.y, x_634.z));
  let x_637 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_637);
  let x_639 : f32 = u_xlat25;
  let x_641 : vec4<f32> = u_xlat1;
  let x_643 : vec3<f32> = (vec3<f32>(x_639, x_639, x_639) * vec3<f32>(x_641.x, x_641.y, x_641.z));
  let x_644 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_643.x, x_643.y, x_643.z, x_644.w);
  let x_646 : vec2<f32> = vs_TEXCOORD0;
  let x_648 : vec4<f32> = x_33.x_ScaledScreenParams;
  let x_650 : vec2<f32> = (x_646 * vec2<f32>(x_648.x, x_648.y));
  let x_651 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_650.x, x_650.y, x_651.z, x_651.w);
  let x_653 : vec4<f32> = u_xlat2;
  let x_656 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat18 = (vec2<f32>(x_653.x, x_653.y) * vec2<f32>(x_656.z, x_656.z));
  let x_659 : vec2<f32> = u_xlat18;
  u_xlat25 = dot(x_659, vec2<f32>(0.067110561f, 0.00583715f));
  let x_664 : f32 = u_xlat25;
  u_xlat25 = fract(x_664);
  let x_666 : f32 = u_xlat25;
  u_xlat25 = (x_666 * 52.982917786f);
  let x_669 : f32 = u_xlat25;
  u_xlat25 = fract(x_669);
  let x_671 : f32 = u_xlat25;
  u_xlat18.x = fract(x_671);
  let x_675 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_675 * 2.0f) + -1.0f);
  let x_680 : f32 = u_xlat25;
  u_xlat25 = (x_680 + 0.9296875f);
  let x_683 : f32 = u_xlat25;
  u_xlat25 = (x_683 * 6.283185482f);
  let x_687 : f32 = u_xlat3.z;
  let x_690 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_687) * x_690) + 1.0f);
  let x_695 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_695);
  let x_699 : f32 = u_xlat25;
  u_xlat4.x = sin(x_699);
  let x_702 : f32 = u_xlat25;
  u_xlat5.x = cos(x_702);
  let x_706 : f32 = u_xlat18.x;
  let x_708 : f32 = u_xlat5.x;
  u_xlat3.x = (x_706 * x_708);
  let x_712 : f32 = u_xlat18.x;
  let x_714 : f32 = u_xlat4.x;
  u_xlat3.y = (x_712 * x_714);
  let x_717 : vec4<f32> = u_xlat3;
  let x_720 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_721 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_720.x, x_720.y, x_720.z, x_721.w);
  let x_723 : vec4<f32> = u_xlat1;
  let x_726 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(-(vec3<f32>(x_723.x, x_723.y, x_723.z)), vec3<f32>(x_726.x, x_726.y, x_726.z));
  let x_730 : f32 = u_xlat25;
  u_xlatb25 = (x_730 >= 0.0f);
  let x_732 : bool = u_xlatb25;
  if (x_732) {
    let x_736 : vec4<f32> = u_xlat3;
    x_733 = -(vec3<f32>(x_736.x, x_736.y, x_736.z));
  } else {
    let x_740 : vec4<f32> = u_xlat3;
    x_733 = vec3<f32>(x_740.x, x_740.y, x_740.z);
  }
  let x_742 : vec3<f32> = x_733;
  let x_743 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
  let x_745 : vec4<f32> = u_xlat3;
  let x_748 : vec4<f32> = x_33.x_SSAOParams;
  let x_751 : vec3<f32> = u_xlat8;
  let x_752 : vec3<f32> = ((vec3<f32>(x_745.x, x_745.y, x_745.z) * vec3<f32>(x_748.y, x_748.y, x_748.y)) + x_751);
  let x_753 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_752.x, x_752.y, x_752.z, x_753.w);
  let x_755 : vec4<f32> = u_xlat3;
  let x_759 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_755.y, x_755.y) * vec2<f32>(x_759.x, x_759.y));
  let x_763 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_765 : vec4<f32> = u_xlat3;
  let x_768 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_763.x, x_763.y) * vec2<f32>(x_765.x, x_765.x)) + x_768);
  let x_771 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_773 : vec4<f32> = u_xlat3;
  let x_776 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_771.x, x_771.y) * vec2<f32>(x_773.z, x_773.z)) + x_776);
  let x_780 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_780;
  let x_783 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_783;
  let x_786 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_786;
  let x_788 : vec3<f32> = u_xlat4;
  let x_789 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_788, vec3<f32>(x_789.x, x_789.y, x_789.z));
  let x_792 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_792));
  let x_796 : vec2<f32> = u_xlat18;
  let x_797 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_796 * vec2<f32>(x_797.x, x_797.x)) + vec2<f32>(1.0f, 1.0f));
  let x_802 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_802 * vec2<f32>(0.5f, 0.5f));
  let x_805 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_805, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_812 : vec2<f32> = u_xlat18;
  let x_814 : f32 = x_33.x_GlobalMipBias.x;
  let x_815 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_812, x_814);
  u_xlat3.x = x_815.x;
  let x_820 : f32 = x_33.x_ZBufferParams.z;
  let x_822 : f32 = u_xlat3.x;
  let x_825 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_820 * x_822) + x_825);
  let x_829 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_829);
  let x_832 : f32 = u_xlat25;
  let x_835 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_832) + -(x_835));
  let x_838 : f32 = u_xlat25;
  let x_841 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_838) < x_841);
  let x_843 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_843);
  let x_849 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_849);
  let x_853 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_853);
  let x_856 : f32 = u_xlat25;
  let x_858 : f32 = u_xlat3.x;
  u_xlat25 = (x_856 * x_858);
  let x_862 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_862) + 1.0f);
  let x_866 : f32 = u_xlat11.x;
  let x_868 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_866 * x_868);
  let x_872 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_874 : vec2<f32> = u_xlat18;
  let x_878 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_872.x, x_872.y, x_872.z) * vec3<f32>(x_874.x, x_874.x, x_874.x)) + vec3<f32>(x_878.x, x_878.y, x_878.z));
  let x_882 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_884 : f32 = u_xlat26;
  let x_887 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_882.x, x_882.y, x_882.z) * vec3<f32>(x_884, x_884, x_884)) + x_887);
  let x_889 : vec3<f32> = u_xlat11;
  let x_890 : vec4<f32> = u_xlat3;
  let x_893 : vec3<f32> = u_xlat8;
  let x_895 : vec3<f32> = ((x_889 * vec3<f32>(x_890.x, x_890.x, x_890.x)) + -(x_893));
  let x_896 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_895.x, x_895.y, x_895.z, x_896.w);
  let x_898 : vec4<f32> = u_xlat3;
  let x_900 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_898.x, x_898.y, x_898.z), vec3<f32>(x_900.x, x_900.y, x_900.z));
  let x_904 : f32 = u_xlat0;
  let x_909 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_904) * 0.004f) + x_909);
  let x_913 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_913, 0.0f);
  let x_916 : vec4<f32> = u_xlat3;
  let x_918 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_916.x, x_916.y, x_916.z), vec3<f32>(x_918.x, x_918.y, x_918.z));
  let x_921 : f32 = u_xlat26;
  u_xlat26 = (x_921 + 0.0001f);
  let x_924 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_924);
  let x_926 : f32 = u_xlat26;
  let x_928 : f32 = u_xlat18.x;
  u_xlat18.x = (x_926 * x_928);
  let x_931 : vec4<f32> = u_xlat2;
  let x_934 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_931.x, x_931.y, x_931.x, x_931.y) * vec4<f32>(x_934.z, x_934.z, x_934.z, x_934.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_943 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec2<f32>(x_943.x, x_943.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_946 : f32 = u_xlat26;
  u_xlat26 = fract(x_946);
  let x_948 : f32 = u_xlat26;
  u_xlat26 = (x_948 * 52.982917786f);
  let x_950 : f32 = u_xlat26;
  u_xlat26 = fract(x_950);
  let x_952 : f32 = u_xlat26;
  let x_957 : vec2<f32> = (vec2<f32>(x_952, x_952) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_958 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_957.x, x_957.y, x_958.z, x_958.w);
  let x_961 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_961);
  let x_963 : f32 = u_xlat26;
  u_xlat5.z = ((x_963 * 2.0f) + -1.0f);
  let x_968 : f32 = u_xlat3.y;
  u_xlat26 = (x_968 * 6.283185482f);
  let x_971 : f32 = u_xlat5.z;
  let x_974 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_971) * x_974) + 1.0f);
  let x_979 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_979);
  let x_982 : f32 = u_xlat26;
  u_xlat6.x = sin(x_982);
  let x_986 : f32 = u_xlat26;
  u_xlat7 = cos(x_986);
  let x_989 : f32 = u_xlat3.x;
  let x_990 : f32 = u_xlat7;
  u_xlat5.x = (x_989 * x_990);
  let x_994 : f32 = u_xlat3.x;
  let x_996 : f32 = u_xlat6.x;
  u_xlat5.y = (x_994 * x_996);
  let x_999 : vec4<f32> = u_xlat5;
  let x_1003 : vec3<f32> = (vec3<f32>(x_999.x, x_999.y, x_999.z) * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_1004 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1004.w);
  let x_1006 : vec4<f32> = u_xlat1;
  let x_1009 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(-(vec3<f32>(x_1006.x, x_1006.y, x_1006.z)), vec3<f32>(x_1009.x, x_1009.y, x_1009.z));
  let x_1013 : f32 = u_xlat26;
  u_xlatb26 = (x_1013 >= 0.0f);
  let x_1015 : bool = u_xlatb26;
  if (x_1015) {
    let x_1019 : vec4<f32> = u_xlat5;
    x_1016 = -(vec3<f32>(x_1019.x, x_1019.y, x_1019.z));
  } else {
    let x_1023 : vec4<f32> = u_xlat5;
    x_1016 = vec3<f32>(x_1023.x, x_1023.y, x_1023.z);
  }
  let x_1025 : vec3<f32> = x_1016;
  let x_1026 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1025.x, x_1025.y, x_1025.z, x_1026.w);
  let x_1028 : vec4<f32> = u_xlat5;
  let x_1031 : vec4<f32> = x_33.x_SSAOParams;
  let x_1034 : vec3<f32> = u_xlat8;
  let x_1035 : vec3<f32> = ((vec3<f32>(x_1028.x, x_1028.y, x_1028.z) * vec3<f32>(x_1031.y, x_1031.y, x_1031.y)) + x_1034);
  let x_1036 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1035.x, x_1035.y, x_1035.z, x_1036.w);
  let x_1038 : vec4<f32> = u_xlat5;
  let x_1041 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1043 : vec2<f32> = (vec2<f32>(x_1038.y, x_1038.y) * vec2<f32>(x_1041.x, x_1041.y));
  let x_1044 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1043.x, x_1043.y, x_1044.z, x_1044.w);
  let x_1047 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1049 : vec4<f32> = u_xlat5;
  let x_1052 : vec4<f32> = u_xlat3;
  let x_1054 : vec2<f32> = ((vec2<f32>(x_1047.x, x_1047.y) * vec2<f32>(x_1049.x, x_1049.x)) + vec2<f32>(x_1052.x, x_1052.y));
  let x_1055 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1054.x, x_1054.y, x_1055.z, x_1055.w);
  let x_1058 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1060 : vec4<f32> = u_xlat5;
  let x_1063 : vec4<f32> = u_xlat3;
  let x_1065 : vec2<f32> = ((vec2<f32>(x_1058.x, x_1058.y) * vec2<f32>(x_1060.z, x_1060.z)) + vec2<f32>(x_1063.x, x_1063.y));
  let x_1066 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1065.x, x_1065.y, x_1066.z, x_1066.w);
  let x_1068 : vec3<f32> = u_xlat4;
  let x_1069 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(x_1068, vec3<f32>(x_1069.x, x_1069.y, x_1069.z));
  let x_1073 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_1073));
  let x_1076 : vec4<f32> = u_xlat3;
  let x_1078 : f32 = u_xlat28;
  let x_1081 : vec2<f32> = ((vec2<f32>(x_1076.x, x_1076.y) * vec2<f32>(x_1078, x_1078)) + vec2<f32>(1.0f, 1.0f));
  let x_1082 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1081.x, x_1081.y, x_1082.z, x_1082.w);
  let x_1084 : vec4<f32> = u_xlat3;
  let x_1086 : vec2<f32> = (vec2<f32>(x_1084.x, x_1084.y) * vec2<f32>(0.5f, 0.5f));
  let x_1087 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
  let x_1089 : vec4<f32> = u_xlat3;
  let x_1093 : vec2<f32> = clamp(vec2<f32>(x_1089.x, x_1089.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1094 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1093.x, x_1093.y, x_1094.z, x_1094.w);
  let x_1099 : vec4<f32> = u_xlat3;
  let x_1102 : f32 = x_33.x_GlobalMipBias.x;
  let x_1103 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1099.x, x_1099.y), x_1102);
  u_xlat28 = x_1103.x;
  let x_1106 : f32 = x_33.x_ZBufferParams.z;
  let x_1107 : f32 = u_xlat28;
  let x_1110 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_1106 * x_1107) + x_1110);
  let x_1114 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_1114);
  let x_1117 : f32 = u_xlat26;
  let x_1120 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_1117) + -(x_1120));
  let x_1123 : f32 = u_xlat26;
  let x_1126 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_1123) < x_1126);
  let x_1128 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_1128);
  let x_1131 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_1131);
  let x_1133 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_1133);
  let x_1135 : f32 = u_xlat26;
  let x_1136 : f32 = u_xlat28;
  u_xlat26 = (x_1135 * x_1136);
  let x_1139 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_1139) + 1.0f);
  let x_1144 : f32 = u_xlat5.x;
  let x_1146 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_1144 * x_1146);
  let x_1149 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1151 : vec4<f32> = u_xlat3;
  let x_1155 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1157 : vec3<f32> = ((vec3<f32>(x_1149.x, x_1149.y, x_1149.z) * vec3<f32>(x_1151.x, x_1151.x, x_1151.x)) + vec3<f32>(x_1155.x, x_1155.y, x_1155.z));
  let x_1158 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1157.x, x_1157.y, x_1157.z, x_1158.w);
  let x_1161 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1163 : vec3<f32> = u_xlat11;
  let x_1166 : vec4<f32> = u_xlat5;
  let x_1168 : vec3<f32> = ((vec3<f32>(x_1161.x, x_1161.y, x_1161.z) * vec3<f32>(x_1163.x, x_1163.x, x_1163.x)) + vec3<f32>(x_1166.x, x_1166.y, x_1166.z));
  let x_1169 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1168.x, x_1168.y, x_1168.z, x_1169.w);
  let x_1171 : vec4<f32> = u_xlat5;
  let x_1173 : f32 = u_xlat28;
  let x_1176 : vec3<f32> = u_xlat8;
  let x_1178 : vec3<f32> = ((vec3<f32>(x_1171.x, x_1171.y, x_1171.z) * vec3<f32>(x_1173, x_1173, x_1173)) + -(x_1176));
  let x_1179 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1178.x, x_1178.y, x_1178.z, x_1179.w);
  let x_1181 : vec4<f32> = u_xlat5;
  let x_1183 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(vec3<f32>(x_1181.x, x_1181.y, x_1181.z), vec3<f32>(x_1183.x, x_1183.y, x_1183.z));
  let x_1187 : f32 = u_xlat0;
  let x_1191 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1187) * 0.004f) + x_1191);
  let x_1195 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1195, 0.0f);
  let x_1198 : vec4<f32> = u_xlat5;
  let x_1200 : vec4<f32> = u_xlat5;
  u_xlat11.x = dot(vec3<f32>(x_1198.x, x_1198.y, x_1198.z), vec3<f32>(x_1200.x, x_1200.y, x_1200.z));
  let x_1205 : f32 = u_xlat11.x;
  u_xlat11.x = (x_1205 + 0.0001f);
  let x_1209 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_1209);
  let x_1213 : f32 = u_xlat11.x;
  let x_1215 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1213 * x_1215);
  let x_1218 : f32 = u_xlat26;
  let x_1220 : f32 = u_xlat3.x;
  u_xlat26 = (x_1218 * x_1220);
  let x_1223 : f32 = u_xlat18.x;
  let x_1224 : f32 = u_xlat25;
  let x_1226 : f32 = u_xlat26;
  u_xlat25 = ((x_1223 * x_1224) + x_1226);
  let x_1228 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1228.z, x_1228.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1233 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1233);
  let x_1237 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1237 * 52.982917786f);
  let x_1241 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1241);
  let x_1244 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1244.x, x_1244.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1251 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1251);
  let x_1255 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1255 * 2.0f) + -1.0f);
  let x_1260 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1260 * 6.283185482f);
  let x_1264 : f32 = u_xlat3.z;
  let x_1267 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1264) * x_1267) + 1.0f);
  let x_1270 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1270);
  let x_1273 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1273);
  let x_1277 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1277);
  let x_1280 : f32 = u_xlat26;
  let x_1282 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1280 * x_1282);
  let x_1285 : f32 = u_xlat26;
  let x_1287 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1285 * x_1287);
  let x_1290 : vec4<f32> = u_xlat3;
  let x_1294 : vec3<f32> = (vec3<f32>(x_1290.x, x_1290.y, x_1290.z) * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_1295 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1294.x, x_1294.y, x_1294.z, x_1295.w);
  let x_1297 : vec4<f32> = u_xlat1;
  let x_1300 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_1297.x, x_1297.y, x_1297.z)), vec3<f32>(x_1300.x, x_1300.y, x_1300.z));
  let x_1306 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1306 >= 0.0f);
  let x_1308 : bool = u_xlatb18;
  if (x_1308) {
    let x_1312 : vec4<f32> = u_xlat3;
    x_1309 = -(vec3<f32>(x_1312.x, x_1312.y, x_1312.z));
  } else {
    let x_1316 : vec4<f32> = u_xlat3;
    x_1309 = vec3<f32>(x_1316.x, x_1316.y, x_1316.z);
  }
  let x_1318 : vec3<f32> = x_1309;
  let x_1319 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1318.x, x_1318.y, x_1318.z, x_1319.w);
  let x_1321 : vec4<f32> = u_xlat3;
  let x_1324 : vec4<f32> = x_33.x_SSAOParams;
  let x_1327 : vec3<f32> = u_xlat8;
  let x_1328 : vec3<f32> = ((vec3<f32>(x_1321.x, x_1321.y, x_1321.z) * vec3<f32>(x_1324.y, x_1324.y, x_1324.y)) + x_1327);
  let x_1329 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1328.x, x_1328.y, x_1328.z, x_1329.w);
  let x_1331 : vec4<f32> = u_xlat3;
  let x_1334 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1331.y, x_1331.y) * vec2<f32>(x_1334.x, x_1334.y));
  let x_1338 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1340 : vec4<f32> = u_xlat3;
  let x_1343 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1338.x, x_1338.y) * vec2<f32>(x_1340.x, x_1340.x)) + x_1343);
  let x_1346 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1348 : vec4<f32> = u_xlat3;
  let x_1351 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1346.x, x_1346.y) * vec2<f32>(x_1348.z, x_1348.z)) + x_1351);
  let x_1353 : vec3<f32> = u_xlat4;
  let x_1354 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1353, vec3<f32>(x_1354.x, x_1354.y, x_1354.z));
  let x_1359 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1359));
  let x_1363 : vec2<f32> = u_xlat18;
  let x_1364 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1363 * vec2<f32>(x_1364.x, x_1364.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1368 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1368 * vec2<f32>(0.5f, 0.5f));
  let x_1370 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1370, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1377 : vec2<f32> = u_xlat18;
  let x_1379 : f32 = x_33.x_GlobalMipBias.x;
  let x_1380 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1377, x_1379);
  u_xlat11.x = x_1380.x;
  let x_1385 : f32 = x_33.x_ZBufferParams.z;
  let x_1387 : f32 = u_xlat11.x;
  let x_1390 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1385 * x_1387) + x_1390);
  let x_1392 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1392);
  let x_1394 : f32 = u_xlat19;
  let x_1397 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1394) + -(x_1397));
  let x_1402 : f32 = u_xlat3.x;
  let x_1405 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1402) < x_1405);
  let x_1409 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1409);
  let x_1413 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1413);
  let x_1417 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1417);
  let x_1421 : f32 = u_xlat3.y;
  let x_1423 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1421 * x_1423);
  let x_1427 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1427) + 1.0f);
  let x_1430 : f32 = u_xlat19;
  let x_1432 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1430 * x_1432);
  let x_1436 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1438 : vec2<f32> = u_xlat18;
  let x_1442 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1444 : vec3<f32> = ((vec3<f32>(x_1436.x, x_1436.y, x_1436.z) * vec3<f32>(x_1438.x, x_1438.x, x_1438.x)) + vec3<f32>(x_1442.x, x_1442.y, x_1442.z));
  let x_1445 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1444.x, x_1444.y, x_1444.z, x_1445.w);
  let x_1448 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1450 : f32 = u_xlat26;
  let x_1453 : vec4<f32> = u_xlat5;
  let x_1455 : vec3<f32> = ((vec3<f32>(x_1448.x, x_1448.y, x_1448.z) * vec3<f32>(x_1450, x_1450, x_1450)) + vec3<f32>(x_1453.x, x_1453.y, x_1453.z));
  let x_1456 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1455.x, x_1455.y, x_1455.z, x_1456.w);
  let x_1458 : vec4<f32> = u_xlat5;
  let x_1460 : vec3<f32> = u_xlat11;
  let x_1463 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_1458.x, x_1458.y, x_1458.z) * vec3<f32>(x_1460.x, x_1460.x, x_1460.x)) + -(x_1463));
  let x_1466 : vec3<f32> = u_xlat11;
  let x_1467 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1466, vec3<f32>(x_1467.x, x_1467.y, x_1467.z));
  let x_1471 : f32 = u_xlat0;
  let x_1475 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1471) * 0.004f) + x_1475);
  let x_1479 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1479, 0.0f);
  let x_1482 : vec3<f32> = u_xlat11;
  let x_1483 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1482, x_1483);
  let x_1485 : f32 = u_xlat26;
  u_xlat26 = (x_1485 + 0.0001f);
  let x_1487 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1487);
  let x_1489 : f32 = u_xlat26;
  let x_1491 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1489 * x_1491);
  let x_1495 : f32 = u_xlat18.x;
  let x_1497 : f32 = u_xlat3.x;
  let x_1499 : f32 = u_xlat25;
  u_xlat25 = ((x_1495 * x_1497) + x_1499);
  let x_1501 : vec4<f32> = u_xlat2;
  let x_1504 : vec4<f32> = x_33.x_SSAOParams;
  let x_1510 : vec2<f32> = ((vec2<f32>(x_1501.x, x_1501.y) * vec2<f32>(x_1504.z, x_1504.z)) + vec2<f32>(6.248999596f, 14.600999832f));
  let x_1511 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1510.x, x_1510.y, x_1511.z, x_1511.w);
  let x_1513 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec2<f32>(x_1513.x, x_1513.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1518 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1518);
  let x_1522 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1522 * 52.982917786f);
  let x_1526 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1526);
  let x_1529 : vec4<f32> = u_xlat2;
  let x_1534 : vec2<f32> = (vec2<f32>(x_1529.x, x_1529.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1535 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1534.x, x_1534.y, x_1535.z, x_1535.w);
  let x_1538 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1538);
  let x_1542 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_1542 * 2.0f) + -1.0f);
  let x_1547 : f32 = u_xlat2.y;
  u_xlat2.x = (x_1547 * 6.283185482f);
  let x_1551 : f32 = u_xlat3.z;
  let x_1554 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1551) * x_1554) + 1.0f);
  let x_1559 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_1559);
  let x_1563 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_1563);
  let x_1567 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_1567);
  let x_1571 : f32 = u_xlat10.x;
  let x_1573 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1571 * x_1573);
  let x_1577 : f32 = u_xlat2.x;
  let x_1579 : f32 = u_xlat10.x;
  u_xlat3.y = (x_1577 * x_1579);
  let x_1582 : vec4<f32> = u_xlat1;
  let x_1585 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(vec3<f32>(x_1582.x, x_1582.y, x_1582.z)), vec3<f32>(x_1585.x, x_1585.y, x_1585.z));
  let x_1590 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_1590 >= 0.0f);
  let x_1594 : bool = u_xlatb2.x;
  if (x_1594) {
    let x_1598 : vec4<f32> = u_xlat3;
    x_1595 = -(vec3<f32>(x_1598.x, x_1598.y, x_1598.z));
  } else {
    let x_1602 : vec4<f32> = u_xlat3;
    x_1595 = vec3<f32>(x_1602.x, x_1602.y, x_1602.z);
  }
  let x_1604 : vec3<f32> = x_1595;
  let x_1605 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1604.x, x_1604.y, x_1604.z, x_1605.w);
  let x_1607 : vec4<f32> = u_xlat2;
  let x_1610 : vec4<f32> = x_33.x_SSAOParams;
  let x_1613 : vec3<f32> = u_xlat8;
  let x_1614 : vec3<f32> = ((vec3<f32>(x_1607.x, x_1607.y, x_1607.z) * vec3<f32>(x_1610.y, x_1610.y, x_1610.y)) + x_1613);
  let x_1615 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1614.x, x_1614.y, x_1614.z, x_1615.w);
  let x_1617 : vec4<f32> = u_xlat2;
  let x_1620 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1622 : vec2<f32> = (vec2<f32>(x_1617.y, x_1617.y) * vec2<f32>(x_1620.x, x_1620.y));
  let x_1623 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1622.x, x_1622.y, x_1623.z, x_1623.w);
  let x_1626 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1628 : vec4<f32> = u_xlat2;
  let x_1631 : vec4<f32> = u_xlat3;
  let x_1633 : vec2<f32> = ((vec2<f32>(x_1626.x, x_1626.y) * vec2<f32>(x_1628.x, x_1628.x)) + vec2<f32>(x_1631.x, x_1631.y));
  let x_1634 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1633.x, x_1633.y, x_1634.z, x_1634.w);
  let x_1637 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1639 : vec4<f32> = u_xlat2;
  let x_1642 : vec4<f32> = u_xlat3;
  let x_1644 : vec2<f32> = ((vec2<f32>(x_1637.x, x_1637.y) * vec2<f32>(x_1639.z, x_1639.z)) + vec2<f32>(x_1642.x, x_1642.y));
  let x_1645 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1644.x, x_1644.y, x_1645.z, x_1645.w);
  let x_1647 : vec3<f32> = u_xlat4;
  let x_1648 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_1647, vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1653 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_1653));
  let x_1657 : vec4<f32> = u_xlat3;
  let x_1659 : vec3<f32> = u_xlat10;
  let x_1662 : vec2<f32> = ((vec2<f32>(x_1657.x, x_1657.y) * vec2<f32>(x_1659.x, x_1659.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1663 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1662.x, x_1662.y, x_1663.z);
  let x_1665 : vec3<f32> = u_xlat10;
  let x_1667 : vec2<f32> = (vec2<f32>(x_1665.x, x_1665.y) * vec2<f32>(0.5f, 0.5f));
  let x_1668 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1667.x, x_1667.y, x_1668.z);
  let x_1670 : vec3<f32> = u_xlat10;
  let x_1674 : vec2<f32> = clamp(vec2<f32>(x_1670.x, x_1670.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1675 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1674.x, x_1674.y, x_1675.z);
  let x_1680 : vec3<f32> = u_xlat10;
  let x_1683 : f32 = x_33.x_GlobalMipBias.x;
  let x_1684 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1680.x, x_1680.y), x_1683);
  u_xlat26 = x_1684.x;
  let x_1687 : f32 = x_33.x_ZBufferParams.z;
  let x_1688 : f32 = u_xlat26;
  let x_1691 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_1687 * x_1688) + x_1691);
  let x_1695 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1695);
  let x_1699 : f32 = u_xlat2.x;
  let x_1702 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_1699) + -(x_1702));
  let x_1707 : f32 = u_xlat2.x;
  let x_1710 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_1707) < x_1710);
  let x_1713 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_1713);
  let x_1717 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_1717);
  let x_1721 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_1721);
  let x_1725 : f32 = u_xlat2.w;
  let x_1727 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1725 * x_1727);
  let x_1731 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_1731) + 1.0f);
  let x_1736 : f32 = u_xlat3.x;
  let x_1738 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_1736 * x_1738);
  let x_1741 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1743 : vec3<f32> = u_xlat10;
  let x_1747 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1749 : vec3<f32> = ((vec3<f32>(x_1741.x, x_1741.y, x_1741.z) * vec3<f32>(x_1743.x, x_1743.x, x_1743.x)) + vec3<f32>(x_1747.x, x_1747.y, x_1747.z));
  let x_1750 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1749.x, x_1749.y, x_1749.z, x_1750.w);
  let x_1753 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1755 : vec2<f32> = u_xlat18;
  let x_1758 : vec4<f32> = u_xlat3;
  let x_1760 : vec3<f32> = ((vec3<f32>(x_1753.x, x_1753.y, x_1753.z) * vec3<f32>(x_1755.x, x_1755.x, x_1755.x)) + vec3<f32>(x_1758.x, x_1758.y, x_1758.z));
  let x_1761 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1760.x, x_1760.y, x_1760.z, x_1761.w);
  let x_1763 : vec4<f32> = u_xlat3;
  let x_1765 : f32 = u_xlat26;
  let x_1768 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_1763.x, x_1763.y, x_1763.z) * vec3<f32>(x_1765, x_1765, x_1765)) + -(x_1768));
  let x_1771 : vec3<f32> = u_xlat8;
  let x_1772 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_1771, vec3<f32>(x_1772.x, x_1772.y, x_1772.z));
  let x_1776 : f32 = u_xlat0;
  let x_1780 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_1776) * 0.004f) + x_1780);
  let x_1784 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_1784, 0.0f);
  let x_1787 : vec3<f32> = u_xlat8;
  let x_1788 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_1787, x_1788);
  let x_1792 : f32 = u_xlat8.x;
  u_xlat8.x = (x_1792 + 0.0001f);
  let x_1796 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_1796);
  let x_1800 : f32 = u_xlat8.x;
  let x_1802 : f32 = u_xlat10.x;
  u_xlat8.x = (x_1800 * x_1802);
  let x_1806 : f32 = u_xlat8.x;
  let x_1808 : f32 = u_xlat2.x;
  let x_1810 : f32 = u_xlat25;
  u_xlat8.x = ((x_1806 * x_1808) + x_1810);
  let x_1814 : f32 = u_xlat8.x;
  let x_1816 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_1814 * x_1816);
  let x_1820 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_1820);
  let x_1822 : f32 = u_xlat0;
  let x_1824 : f32 = u_xlat16;
  u_xlat0 = ((-(x_1822) * x_1824) + 1.0f);
  let x_1827 : f32 = u_xlat0;
  let x_1828 : f32 = u_xlat0;
  u_xlat0 = (x_1827 * x_1828);
  let x_1831 : f32 = u_xlat8.x;
  let x_1833 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_1831 * x_1833);
  let x_1836 : f32 = u_xlat0;
  let x_1838 : f32 = u_xlat8.x;
  u_xlat0 = (x_1836 * x_1838);
  let x_1840 : f32 = u_xlat0;
  u_xlat0 = (x_1840 * 0.25f);
  let x_1843 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1843, 0.0f, 1.0f);
  let x_1845 : f32 = u_xlat0;
  u_xlat0 = log2(x_1845);
  let x_1847 : f32 = u_xlat0;
  u_xlat0 = (x_1847 * 0.600000024f);
  let x_1850 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1850);
  let x_1854 : vec4<f32> = u_xlat1;
  let x_1857 : vec3<f32> = ((vec3<f32>(x_1854.x, x_1854.y, x_1854.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1858 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1858.x, x_1857.x, x_1857.y, x_1857.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

