type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_279 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_381 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3784 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_186 : f32;
  var x_199 : f32;
  var x_211 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1879 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2001 : f32;
  var u_xlatb47 : bool;
  var x_2055 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3396 : f32;
  var u_xlat24 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_167) + x_172);
  let x_175 : vec3<f32> = u_xlat4;
  let x_176 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_175, x_176);
  let x_178 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_178);
  let x_180 : f32 = u_xlat67;
  let x_182 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_180, x_180, x_180) * x_182);
  let x_185 : bool = u_xlatb0;
  if (x_185) {
    let x_190 : f32 = u_xlat4.x;
    x_186 = x_190;
  } else {
    let x_195 : f32 = x_160.unity_MatrixV[0i].z;
    x_186 = x_195;
  }
  let x_196 : f32 = x_186;
  u_xlat5.x = x_196;
  let x_198 : bool = u_xlatb0;
  if (x_198) {
    let x_203 : f32 = u_xlat4.y;
    x_199 = x_203;
  } else {
    let x_207 : f32 = x_160.unity_MatrixV[1i].z;
    x_199 = x_207;
  }
  let x_208 : f32 = x_199;
  u_xlat5.y = x_208;
  let x_210 : bool = u_xlatb0;
  if (x_210) {
    let x_215 : f32 = u_xlat4.z;
    x_211 = x_215;
  } else {
    let x_219 : f32 = x_160.unity_MatrixV[2i].z;
    x_211 = x_219;
  }
  let x_220 : f32 = x_211;
  u_xlat5.z = x_220;
  let x_222 : vec3<f32> = u_xlat5;
  let x_226 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat4 = (vec3<f32>(x_222.y, x_222.y, x_222.y) * vec3<f32>(x_226.x, x_226.y, x_226.z));
  let x_230 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_232 : vec3<f32> = u_xlat5;
  let x_235 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_230.x, x_230.y, x_230.z) * vec3<f32>(x_232.x, x_232.x, x_232.x)) + x_235);
  let x_238 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_240 : vec3<f32> = u_xlat5;
  let x_243 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_238.x, x_238.y, x_238.z) * vec3<f32>(x_240.z, x_240.z, x_240.z)) + x_243);
  let x_245 : vec3<f32> = u_xlat4;
  let x_246 : vec3<f32> = u_xlat4;
  u_xlat0.x = dot(x_245, x_246);
  let x_250 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_250);
  let x_253 : vec3<f32> = u_xlat0;
  let x_255 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_253.x, x_253.x, x_253.x) * x_255);
  let x_269 : vec4<f32> = vs_INTERP3;
  let x_272 : f32 = x_160.x_GlobalMipBias.x;
  let x_273 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_269.x, x_269.y), x_272);
  u_xlat6 = x_273;
  let x_275 : vec4<f32> = u_xlat6;
  let x_281 : vec4<f32> = x_279.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_275.x, x_275.y, x_275.z) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_290 : vec4<f32> = vs_INTERP3;
  let x_293 : f32 = x_160.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat8 = vec4<f32>(x_294.w, x_294.x, x_294.y, x_294.z);
  let x_297 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_297.y, x_297.z, x_297.w, x_297.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_304 : vec4<f32> = u_xlat9;
  let x_305 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_304, x_305);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_309);
  let x_313 : vec3<f32> = u_xlat0;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_313.x, x_313.x, x_313.x) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_320 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_320 * 200.0f);
  let x_325 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_325, 1.0f);
  let x_328 : vec3<f32> = u_xlat0;
  let x_330 : vec4<f32> = u_xlat6;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.x, x_328.x, x_328.x) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = u_xlat30;
  let x_339 : vec3<f32> = (vec3<f32>(x_335.x, x_335.y, x_335.z) * vec3<f32>(x_337.y, x_337.y, x_337.y));
  let x_340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_339.x, x_339.y, x_339.z, x_340.w);
  let x_342 : vec3<f32> = u_xlat30;
  let x_344 : vec4<f32> = u_xlat2;
  let x_347 : vec4<f32> = u_xlat3;
  let x_349 : vec3<f32> = ((vec3<f32>(x_342.x, x_342.x, x_342.x) * vec3<f32>(x_344.x, x_344.y, x_344.z)) + vec3<f32>(x_347.x, x_347.y, x_347.z));
  let x_350 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_349.x, x_349.y, x_349.z, x_350.w);
  let x_352 : vec3<f32> = u_xlat30;
  let x_354 : vec3<f32> = u_xlat1;
  let x_356 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_352.z, x_352.z, x_352.z) * x_354) + vec3<f32>(x_356.x, x_356.y, x_356.z));
  let x_359 : vec3<f32> = u_xlat1;
  let x_360 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_359, x_360);
  let x_364 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_364, 1.17549435e-37f);
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_369);
  let x_372 : vec3<f32> = u_xlat0;
  let x_374 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_372.x, x_372.x, x_372.x) * x_374);
  let x_376 : vec3<f32> = vs_INTERP0;
  let x_383 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres0;
  let x_386 : vec3<f32> = (x_376 + -(vec3<f32>(x_383.x, x_383.y, x_383.z)));
  let x_387 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_389 : vec3<f32> = vs_INTERP0;
  let x_391 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres1;
  let x_394 : vec3<f32> = (x_389 + -(vec3<f32>(x_391.x, x_391.y, x_391.z)));
  let x_395 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_394.x, x_394.y, x_394.z, x_395.w);
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres2;
  let x_402 : vec3<f32> = (x_397 + -(vec3<f32>(x_399.x, x_399.y, x_399.z)));
  let x_403 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_402.x, x_402.y, x_402.z, x_403.w);
  let x_406 : vec3<f32> = vs_INTERP0;
  let x_409 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres3;
  let x_412 : vec3<f32> = (x_406 + -(vec3<f32>(x_409.x, x_409.y, x_409.z)));
  let x_413 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_412.x, x_412.y, x_412.z, x_413.w);
  let x_415 : vec4<f32> = u_xlat2;
  let x_417 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_415.x, x_415.y, x_415.z), vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_421 : vec4<f32> = u_xlat3;
  let x_423 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_421.x, x_421.y, x_421.z), vec3<f32>(x_423.x, x_423.y, x_423.z));
  let x_427 : vec4<f32> = u_xlat9;
  let x_429 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_427.x, x_427.y, x_427.z), vec3<f32>(x_429.x, x_429.y, x_429.z));
  let x_433 : vec4<f32> = u_xlat10;
  let x_435 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_433.x, x_433.y, x_433.z), vec3<f32>(x_435.x, x_435.y, x_435.z));
  let x_442 : vec4<f32> = u_xlat2;
  let x_445 : vec4<f32> = x_381.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_442 < x_445);
  let x_448 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_448);
  let x_452 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_452);
  let x_456 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_456);
  let x_460 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_460);
  let x_464 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_464);
  let x_469 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_469);
  let x_473 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_473);
  let x_476 : vec4<f32> = u_xlat2;
  let x_478 : vec4<f32> = u_xlat3;
  let x_480 : vec3<f32> = (vec3<f32>(x_476.x, x_476.y, x_476.z) + vec3<f32>(x_478.y, x_478.z, x_478.w));
  let x_481 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_480.x, x_480.y, x_480.z, x_481.w);
  let x_483 : vec4<f32> = u_xlat2;
  let x_486 : vec3<f32> = max(vec3<f32>(x_483.x, x_483.y, x_483.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_487 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_487.x, x_486.x, x_486.y, x_486.z);
  let x_489 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_489, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_496 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_496) + 4.0f);
  let x_502 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_502);
  let x_505 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_505) << bitcast<u32>(2i));
  let x_508 : vec3<f32> = vs_INTERP0;
  let x_510 : i32 = u_xlati0;
  let x_513 : i32 = u_xlati0;
  let x_517 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_510 + 1i) / 4i)][((x_513 + 1i) % 4i)];
  let x_519 : vec3<f32> = (vec3<f32>(x_508.y, x_508.y, x_508.y) * vec3<f32>(x_517.x, x_517.y, x_517.z));
  let x_520 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_519.x, x_519.y, x_519.z, x_520.w);
  let x_522 : i32 = u_xlati0;
  let x_524 : i32 = u_xlati0;
  let x_527 : vec4<f32> = x_381.x_MainLightWorldToShadow[(x_522 / 4i)][(x_524 % 4i)];
  let x_529 : vec3<f32> = vs_INTERP0;
  let x_532 : vec4<f32> = u_xlat2;
  let x_534 : vec3<f32> = ((vec3<f32>(x_527.x, x_527.y, x_527.z) * vec3<f32>(x_529.x, x_529.x, x_529.x)) + vec3<f32>(x_532.x, x_532.y, x_532.z));
  let x_535 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_534.x, x_534.y, x_534.z, x_535.w);
  let x_537 : i32 = u_xlati0;
  let x_540 : i32 = u_xlati0;
  let x_544 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_537 + 2i) / 4i)][((x_540 + 2i) % 4i)];
  let x_546 : vec3<f32> = vs_INTERP0;
  let x_549 : vec4<f32> = u_xlat2;
  let x_551 : vec3<f32> = ((vec3<f32>(x_544.x, x_544.y, x_544.z) * vec3<f32>(x_546.z, x_546.z, x_546.z)) + vec3<f32>(x_549.x, x_549.y, x_549.z));
  let x_552 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_551.x, x_551.y, x_551.z, x_552.w);
  let x_554 : vec4<f32> = u_xlat2;
  let x_556 : i32 = u_xlati0;
  let x_559 : i32 = u_xlati0;
  let x_563 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_556 + 3i) / 4i)][((x_559 + 3i) % 4i)];
  let x_565 : vec3<f32> = (vec3<f32>(x_554.x, x_554.y, x_554.z) + vec3<f32>(x_563.x, x_563.y, x_563.z));
  let x_566 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_565.x, x_565.y, x_565.z, x_566.w);
  let x_570 : f32 = x_381.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_570);
  let x_572 : bool = u_xlatb0;
  if (x_572) {
    let x_577 : f32 = x_381.x_MainLightShadowParams.y;
    u_xlatb67 = (x_577 == 1.0f);
    let x_579 : bool = u_xlatb67;
    if (x_579) {
      let x_582 : vec4<f32> = u_xlat2;
      let x_586 : vec4<f32> = x_381.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_582.x, x_582.y, x_582.x, x_582.y) + x_586);
      let x_589 : vec4<f32> = u_xlat3;
      let x_590 : vec2<f32> = vec2<f32>(x_589.x, x_589.y);
      let x_592 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_590.x, x_590.y, x_592);
      let x_604 : vec3<f32> = txVec0;
      let x_606 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_604.xy, x_604.z);
      u_xlat9.x = x_606;
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.z, x_609.w);
      let x_612 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_619 : vec3<f32> = txVec1;
      let x_621 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_619.xy, x_619.z);
      u_xlat9.y = x_621;
      let x_623 : vec4<f32> = u_xlat2;
      let x_627 : vec4<f32> = x_381.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_623.x, x_623.y, x_623.x, x_623.y) + x_627);
      let x_630 : vec4<f32> = u_xlat3;
      let x_631 : vec2<f32> = vec2<f32>(x_630.x, x_630.y);
      let x_633 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_631.x, x_631.y, x_633);
      let x_640 : vec3<f32> = txVec2;
      let x_642 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_640.xy, x_640.z);
      u_xlat9.z = x_642;
      let x_645 : vec4<f32> = u_xlat3;
      let x_646 : vec2<f32> = vec2<f32>(x_645.z, x_645.w);
      let x_648 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_646.x, x_646.y, x_648);
      let x_655 : vec3<f32> = txVec3;
      let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
      u_xlat9.w = x_657;
      let x_659 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_659, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_666 : f32 = x_381.x_MainLightShadowParams.y;
      u_xlatb68 = (x_666 == 2.0f);
      let x_668 : bool = u_xlatb68;
      if (x_668) {
        let x_671 : vec4<f32> = u_xlat2;
        let x_674 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_679 : vec2<f32> = ((vec2<f32>(x_671.x, x_671.y) * vec2<f32>(x_674.z, x_674.w)) + vec2<f32>(0.5f, 0.5f));
        let x_680 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_679.x, x_679.y, x_680.z, x_680.w);
        let x_682 : vec4<f32> = u_xlat3;
        let x_684 : vec2<f32> = floor(vec2<f32>(x_682.x, x_682.y));
        let x_685 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_684.x, x_684.y, x_685.z, x_685.w);
        let x_689 : vec4<f32> = u_xlat2;
        let x_692 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_695 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_689.x, x_689.y) * vec2<f32>(x_692.z, x_692.w)) + -(vec2<f32>(x_695.x, x_695.y)));
        let x_699 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_699.x, x_699.x, x_699.y, x_699.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_703 : vec4<f32> = u_xlat9;
        let x_705 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_703.x, x_703.x, x_703.z, x_703.z) * vec4<f32>(x_705.x, x_705.x, x_705.z, x_705.z));
        let x_708 : vec4<f32> = u_xlat10;
        let x_712 : vec2<f32> = (vec2<f32>(x_708.y, x_708.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_713 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_712.x, x_713.y, x_712.y, x_713.w);
        let x_715 : vec4<f32> = u_xlat10;
        let x_718 : vec2<f32> = u_xlat47;
        let x_720 : vec2<f32> = ((vec2<f32>(x_715.x, x_715.z) * vec2<f32>(0.5f, 0.5f)) + -(x_718));
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_720.x, x_720.y, x_721.z, x_721.w);
        let x_724 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_724) + vec2<f32>(1.0f, 1.0f));
        let x_729 : vec2<f32> = u_xlat47;
        let x_731 : vec2<f32> = min(x_729, vec2<f32>(0.0f, 0.0f));
        let x_732 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_731.x, x_731.y, x_732.z, x_732.w);
        let x_734 : vec4<f32> = u_xlat11;
        let x_737 : vec4<f32> = u_xlat11;
        let x_740 : vec2<f32> = u_xlat54;
        let x_741 : vec2<f32> = ((-(vec2<f32>(x_734.x, x_734.y)) * vec2<f32>(x_737.x, x_737.y)) + x_740);
        let x_742 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_741.x, x_741.y, x_742.z, x_742.w);
        let x_744 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_744, vec2<f32>(0.0f, 0.0f));
        let x_746 : vec2<f32> = u_xlat47;
        let x_748 : vec2<f32> = u_xlat47;
        let x_750 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_746) * x_748) + vec2<f32>(x_750.y, x_750.w));
        let x_753 : vec4<f32> = u_xlat11;
        let x_755 : vec2<f32> = (vec2<f32>(x_753.x, x_753.y) + vec2<f32>(1.0f, 1.0f));
        let x_756 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_755.x, x_755.y, x_756.z, x_756.w);
        let x_758 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_758 + vec2<f32>(1.0f, 1.0f));
        let x_761 : vec4<f32> = u_xlat10;
        let x_765 : vec2<f32> = (vec2<f32>(x_761.x, x_761.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_766 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_765.x, x_765.y, x_766.z, x_766.w);
        let x_768 : vec2<f32> = u_xlat54;
        let x_769 : vec2<f32> = (x_768 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_770 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_769.x, x_769.y, x_770.z, x_770.w);
        let x_772 : vec4<f32> = u_xlat11;
        let x_774 : vec2<f32> = (vec2<f32>(x_772.x, x_772.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_775 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_774.x, x_774.y, x_775.z, x_775.w);
        let x_778 : vec2<f32> = u_xlat47;
        let x_779 : vec2<f32> = (x_778 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_780 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_779.x, x_779.y, x_780.z, x_780.w);
        let x_782 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_782.y, x_782.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_786 : f32 = u_xlat11.x;
        u_xlat12.z = x_786;
        let x_789 : f32 = u_xlat47.x;
        u_xlat12.w = x_789;
        let x_792 : f32 = u_xlat13.x;
        u_xlat10.z = x_792;
        let x_795 : f32 = u_xlat9.x;
        u_xlat10.w = x_795;
        let x_798 : vec4<f32> = u_xlat10;
        let x_800 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_798.z, x_798.w, x_798.x, x_798.z) + vec4<f32>(x_800.z, x_800.w, x_800.x, x_800.z));
        let x_804 : f32 = u_xlat12.y;
        u_xlat11.z = x_804;
        let x_807 : f32 = u_xlat47.y;
        u_xlat11.w = x_807;
        let x_810 : f32 = u_xlat10.y;
        u_xlat13.z = x_810;
        let x_813 : f32 = u_xlat9.z;
        u_xlat13.w = x_813;
        let x_815 : vec4<f32> = u_xlat11;
        let x_817 : vec4<f32> = u_xlat13;
        let x_819 : vec3<f32> = (vec3<f32>(x_815.z, x_815.y, x_815.w) + vec3<f32>(x_817.z, x_817.y, x_817.w));
        let x_820 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_819.x, x_819.y, x_819.z, x_820.w);
        let x_822 : vec4<f32> = u_xlat10;
        let x_824 : vec4<f32> = u_xlat14;
        let x_826 : vec3<f32> = (vec3<f32>(x_822.x, x_822.z, x_822.w) / vec3<f32>(x_824.z, x_824.w, x_824.y));
        let x_827 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_826.x, x_826.y, x_826.z, x_827.w);
        let x_829 : vec4<f32> = u_xlat10;
        let x_835 : vec3<f32> = (vec3<f32>(x_829.x, x_829.y, x_829.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_836 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_835.x, x_835.y, x_835.z, x_836.w);
        let x_838 : vec4<f32> = u_xlat13;
        let x_840 : vec4<f32> = u_xlat9;
        let x_842 : vec3<f32> = (vec3<f32>(x_838.z, x_838.y, x_838.w) / vec3<f32>(x_840.x, x_840.y, x_840.z));
        let x_843 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_842.x, x_842.y, x_842.z, x_843.w);
        let x_845 : vec4<f32> = u_xlat11;
        let x_847 : vec3<f32> = (vec3<f32>(x_845.x, x_845.y, x_845.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_848 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat10;
        let x_853 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_855 : vec3<f32> = (vec3<f32>(x_850.y, x_850.x, x_850.z) * vec3<f32>(x_853.x, x_853.x, x_853.x));
        let x_856 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
        let x_858 : vec4<f32> = u_xlat11;
        let x_861 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_863 : vec3<f32> = (vec3<f32>(x_858.x, x_858.y, x_858.z) * vec3<f32>(x_861.y, x_861.y, x_861.y));
        let x_864 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_863.x, x_863.y, x_863.z, x_864.w);
        let x_867 : f32 = u_xlat11.x;
        u_xlat10.w = x_867;
        let x_869 : vec4<f32> = u_xlat3;
        let x_872 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_875 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_869.x, x_869.y, x_869.x, x_869.y) * vec4<f32>(x_872.x, x_872.y, x_872.x, x_872.y)) + vec4<f32>(x_875.y, x_875.w, x_875.x, x_875.w));
        let x_878 : vec4<f32> = u_xlat3;
        let x_881 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_884 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_878.x, x_878.y) * vec2<f32>(x_881.x, x_881.y)) + vec2<f32>(x_884.z, x_884.w));
        let x_888 : f32 = u_xlat10.y;
        u_xlat11.w = x_888;
        let x_890 : vec4<f32> = u_xlat11;
        let x_891 : vec2<f32> = vec2<f32>(x_890.y, x_890.z);
        let x_892 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_892.x, x_891.x, x_892.z, x_891.y);
        let x_894 : vec4<f32> = u_xlat3;
        let x_897 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_900 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_894.x, x_894.y, x_894.x, x_894.y) * vec4<f32>(x_897.x, x_897.y, x_897.x, x_897.y)) + vec4<f32>(x_900.x, x_900.y, x_900.z, x_900.y));
        let x_903 : vec4<f32> = u_xlat3;
        let x_906 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_909 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_903.x, x_903.y, x_903.x, x_903.y) * vec4<f32>(x_906.x, x_906.y, x_906.x, x_906.y)) + vec4<f32>(x_909.w, x_909.y, x_909.w, x_909.z));
        let x_912 : vec4<f32> = u_xlat3;
        let x_915 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_918 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_912.x, x_912.y, x_912.x, x_912.y) * vec4<f32>(x_915.x, x_915.y, x_915.x, x_915.y)) + vec4<f32>(x_918.x, x_918.w, x_918.z, x_918.w));
        let x_922 : vec4<f32> = u_xlat9;
        let x_924 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_922.x, x_922.x, x_922.x, x_922.y) * vec4<f32>(x_924.z, x_924.w, x_924.y, x_924.z));
        let x_928 : vec4<f32> = u_xlat9;
        let x_930 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_928.y, x_928.y, x_928.z, x_928.z) * x_930);
        let x_934 : f32 = u_xlat9.z;
        let x_936 : f32 = u_xlat14.y;
        u_xlat68 = (x_934 * x_936);
        let x_939 : vec4<f32> = u_xlat12;
        let x_940 : vec2<f32> = vec2<f32>(x_939.x, x_939.y);
        let x_942 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_940.x, x_940.y, x_942);
        let x_949 : vec3<f32> = txVec4;
        let x_951 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_949.xy, x_949.z);
        u_xlat3.x = x_951;
        let x_954 : vec4<f32> = u_xlat12;
        let x_955 : vec2<f32> = vec2<f32>(x_954.z, x_954.w);
        let x_957 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_955.x, x_955.y, x_957);
        let x_965 : vec3<f32> = txVec5;
        let x_967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_965.xy, x_965.z);
        u_xlat25 = x_967;
        let x_968 : f32 = u_xlat25;
        let x_970 : f32 = u_xlat15.y;
        u_xlat25 = (x_968 * x_970);
        let x_973 : f32 = u_xlat15.x;
        let x_975 : f32 = u_xlat3.x;
        let x_977 : f32 = u_xlat25;
        u_xlat3.x = ((x_973 * x_975) + x_977);
        let x_981 : vec2<f32> = u_xlat47;
        let x_983 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_981.x, x_981.y, x_983);
        let x_990 : vec3<f32> = txVec6;
        let x_992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_990.xy, x_990.z);
        u_xlat25 = x_992;
        let x_994 : f32 = u_xlat15.z;
        let x_995 : f32 = u_xlat25;
        let x_998 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_994 * x_995) + x_998);
        let x_1002 : vec4<f32> = u_xlat11;
        let x_1003 : vec2<f32> = vec2<f32>(x_1002.x, x_1002.y);
        let x_1005 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1003.x, x_1003.y, x_1005);
        let x_1012 : vec3<f32> = txVec7;
        let x_1014 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1012.xy, x_1012.z);
        u_xlat25 = x_1014;
        let x_1016 : f32 = u_xlat15.w;
        let x_1017 : f32 = u_xlat25;
        let x_1020 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1016 * x_1017) + x_1020);
        let x_1024 : vec4<f32> = u_xlat13;
        let x_1025 : vec2<f32> = vec2<f32>(x_1024.x, x_1024.y);
        let x_1027 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1025.x, x_1025.y, x_1027);
        let x_1034 : vec3<f32> = txVec8;
        let x_1036 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1034.xy, x_1034.z);
        u_xlat25 = x_1036;
        let x_1038 : f32 = u_xlat16.x;
        let x_1039 : f32 = u_xlat25;
        let x_1042 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1038 * x_1039) + x_1042);
        let x_1046 : vec4<f32> = u_xlat13;
        let x_1047 : vec2<f32> = vec2<f32>(x_1046.z, x_1046.w);
        let x_1049 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1047.x, x_1047.y, x_1049);
        let x_1056 : vec3<f32> = txVec9;
        let x_1058 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1056.xy, x_1056.z);
        u_xlat25 = x_1058;
        let x_1060 : f32 = u_xlat16.y;
        let x_1061 : f32 = u_xlat25;
        let x_1064 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1060 * x_1061) + x_1064);
        let x_1068 : vec4<f32> = u_xlat11;
        let x_1069 : vec2<f32> = vec2<f32>(x_1068.z, x_1068.w);
        let x_1071 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1069.x, x_1069.y, x_1071);
        let x_1078 : vec3<f32> = txVec10;
        let x_1080 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1078.xy, x_1078.z);
        u_xlat25 = x_1080;
        let x_1082 : f32 = u_xlat16.z;
        let x_1083 : f32 = u_xlat25;
        let x_1086 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1082 * x_1083) + x_1086);
        let x_1090 : vec4<f32> = u_xlat10;
        let x_1091 : vec2<f32> = vec2<f32>(x_1090.x, x_1090.y);
        let x_1093 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1091.x, x_1091.y, x_1093);
        let x_1100 : vec3<f32> = txVec11;
        let x_1102 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1100.xy, x_1100.z);
        u_xlat25 = x_1102;
        let x_1104 : f32 = u_xlat16.w;
        let x_1105 : f32 = u_xlat25;
        let x_1108 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1104 * x_1105) + x_1108);
        let x_1112 : vec4<f32> = u_xlat10;
        let x_1113 : vec2<f32> = vec2<f32>(x_1112.z, x_1112.w);
        let x_1115 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1113.x, x_1113.y, x_1115);
        let x_1122 : vec3<f32> = txVec12;
        let x_1124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1122.xy, x_1122.z);
        u_xlat25 = x_1124;
        let x_1125 : f32 = u_xlat68;
        let x_1126 : f32 = u_xlat25;
        let x_1129 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1125 * x_1126) + x_1129);
      } else {
        let x_1132 : vec4<f32> = u_xlat2;
        let x_1135 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1138 : vec2<f32> = ((vec2<f32>(x_1132.x, x_1132.y) * vec2<f32>(x_1135.z, x_1135.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1139 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1138.x, x_1138.y, x_1139.z, x_1139.w);
        let x_1141 : vec4<f32> = u_xlat3;
        let x_1143 : vec2<f32> = floor(vec2<f32>(x_1141.x, x_1141.y));
        let x_1144 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1143.x, x_1143.y, x_1144.z, x_1144.w);
        let x_1146 : vec4<f32> = u_xlat2;
        let x_1149 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1152 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1149.z, x_1149.w)) + -(vec2<f32>(x_1152.x, x_1152.y)));
        let x_1156 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1156.x, x_1156.x, x_1156.y, x_1156.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1159 : vec4<f32> = u_xlat9;
        let x_1161 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1159.x, x_1159.x, x_1159.z, x_1159.z) * vec4<f32>(x_1161.x, x_1161.x, x_1161.z, x_1161.z));
        let x_1164 : vec4<f32> = u_xlat10;
        let x_1168 : vec2<f32> = (vec2<f32>(x_1164.y, x_1164.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1169 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1169.x, x_1168.x, x_1169.z, x_1168.y);
        let x_1171 : vec4<f32> = u_xlat10;
        let x_1174 : vec2<f32> = u_xlat47;
        let x_1176 : vec2<f32> = ((vec2<f32>(x_1171.x, x_1171.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1174));
        let x_1177 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1176.x, x_1177.y, x_1176.y, x_1177.w);
        let x_1179 : vec2<f32> = u_xlat47;
        let x_1181 : vec2<f32> = (-(x_1179) + vec2<f32>(1.0f, 1.0f));
        let x_1182 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1181.x, x_1181.y, x_1182.z, x_1182.w);
        let x_1184 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1184, vec2<f32>(0.0f, 0.0f));
        let x_1186 : vec2<f32> = u_xlat54;
        let x_1188 : vec2<f32> = u_xlat54;
        let x_1190 : vec4<f32> = u_xlat10;
        let x_1192 : vec2<f32> = ((-(x_1186) * x_1188) + vec2<f32>(x_1190.x, x_1190.y));
        let x_1193 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1192.x, x_1192.y, x_1193.z, x_1193.w);
        let x_1195 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1195, vec2<f32>(0.0f, 0.0f));
        let x_1198 : vec2<f32> = u_xlat54;
        let x_1200 : vec2<f32> = u_xlat54;
        let x_1202 : vec4<f32> = u_xlat9;
        let x_1204 : vec2<f32> = ((-(x_1198) * x_1200) + vec2<f32>(x_1202.y, x_1202.w));
        let x_1205 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1204.x, x_1205.y, x_1204.y);
        let x_1207 : vec4<f32> = u_xlat10;
        let x_1210 : vec2<f32> = (vec2<f32>(x_1207.x, x_1207.y) + vec2<f32>(2.0f, 2.0f));
        let x_1211 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1210.x, x_1210.y, x_1211.z, x_1211.w);
        let x_1213 : vec3<f32> = u_xlat31;
        let x_1215 : vec2<f32> = (vec2<f32>(x_1213.x, x_1213.z) + vec2<f32>(2.0f, 2.0f));
        let x_1216 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1216.x, x_1215.x, x_1216.z, x_1215.y);
        let x_1219 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1219 * 0.081632003f);
        let x_1223 : vec4<f32> = u_xlat9;
        let x_1226 : vec3<f32> = (vec3<f32>(x_1223.z, x_1223.x, x_1223.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1227 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1226.x, x_1226.y, x_1226.z, x_1227.w);
        let x_1229 : vec4<f32> = u_xlat10;
        let x_1232 : vec2<f32> = (vec2<f32>(x_1229.x, x_1229.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1232.x, x_1232.y, x_1233.z, x_1233.w);
        let x_1236 : f32 = u_xlat13.y;
        u_xlat12.x = x_1236;
        let x_1238 : vec2<f32> = u_xlat47;
        let x_1245 : vec2<f32> = ((vec2<f32>(x_1238.x, x_1238.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1246 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1246.x, x_1245.x, x_1246.z, x_1245.y);
        let x_1248 : vec2<f32> = u_xlat47;
        let x_1252 : vec2<f32> = ((vec2<f32>(x_1248.x, x_1248.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1253 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1252.x, x_1253.y, x_1252.y, x_1253.w);
        let x_1256 : f32 = u_xlat9.x;
        u_xlat10.y = x_1256;
        let x_1259 : f32 = u_xlat11.y;
        u_xlat10.w = x_1259;
        let x_1261 : vec4<f32> = u_xlat10;
        let x_1262 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1261 + x_1262);
        let x_1264 : vec2<f32> = u_xlat47;
        let x_1267 : vec2<f32> = ((vec2<f32>(x_1264.y, x_1264.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1268 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1268.x, x_1267.x, x_1268.z, x_1267.y);
        let x_1270 : vec2<f32> = u_xlat47;
        let x_1273 : vec2<f32> = ((vec2<f32>(x_1270.y, x_1270.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1274 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1273.x, x_1274.y, x_1273.y, x_1274.w);
        let x_1277 : f32 = u_xlat9.y;
        u_xlat11.y = x_1277;
        let x_1279 : vec4<f32> = u_xlat11;
        let x_1280 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1279 + x_1280);
        let x_1282 : vec4<f32> = u_xlat10;
        let x_1283 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1282 / x_1283);
        let x_1285 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1285 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1291 : vec4<f32> = u_xlat11;
        let x_1292 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1291 / x_1292);
        let x_1294 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1294 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1296 : vec4<f32> = u_xlat10;
        let x_1299 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1296.w, x_1296.x, x_1296.y, x_1296.z) * vec4<f32>(x_1299.x, x_1299.x, x_1299.x, x_1299.x));
        let x_1302 : vec4<f32> = u_xlat11;
        let x_1305 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1302.x, x_1302.w, x_1302.y, x_1302.z) * vec4<f32>(x_1305.y, x_1305.y, x_1305.y, x_1305.y));
        let x_1308 : vec4<f32> = u_xlat10;
        let x_1309 : vec3<f32> = vec3<f32>(x_1308.y, x_1308.z, x_1308.w);
        let x_1310 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1309.x, x_1310.y, x_1309.y, x_1309.z);
        let x_1313 : f32 = u_xlat11.x;
        u_xlat13.y = x_1313;
        let x_1315 : vec4<f32> = u_xlat3;
        let x_1318 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1321 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1315.x, x_1315.y, x_1315.x, x_1315.y) * vec4<f32>(x_1318.x, x_1318.y, x_1318.x, x_1318.y)) + vec4<f32>(x_1321.x, x_1321.y, x_1321.z, x_1321.y));
        let x_1324 : vec4<f32> = u_xlat3;
        let x_1327 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1330 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1324.x, x_1324.y) * vec2<f32>(x_1327.x, x_1327.y)) + vec2<f32>(x_1330.w, x_1330.y));
        let x_1334 : f32 = u_xlat13.y;
        u_xlat10.y = x_1334;
        let x_1337 : f32 = u_xlat11.z;
        u_xlat13.y = x_1337;
        let x_1339 : vec4<f32> = u_xlat3;
        let x_1342 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1345 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1339.x, x_1339.y, x_1339.x, x_1339.y) * vec4<f32>(x_1342.x, x_1342.y, x_1342.x, x_1342.y)) + vec4<f32>(x_1345.x, x_1345.y, x_1345.z, x_1345.y));
        let x_1348 : vec4<f32> = u_xlat3;
        let x_1351 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1354 : vec4<f32> = u_xlat13;
        let x_1356 : vec2<f32> = ((vec2<f32>(x_1348.x, x_1348.y) * vec2<f32>(x_1351.x, x_1351.y)) + vec2<f32>(x_1354.w, x_1354.y));
        let x_1357 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1356.x, x_1356.y, x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat13.y;
        u_xlat10.z = x_1360;
        let x_1363 : vec4<f32> = u_xlat3;
        let x_1366 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1369 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1363.x, x_1363.y, x_1363.x, x_1363.y) * vec4<f32>(x_1366.x, x_1366.y, x_1366.x, x_1366.y)) + vec4<f32>(x_1369.x, x_1369.y, x_1369.x, x_1369.z));
        let x_1373 : f32 = u_xlat11.w;
        u_xlat13.y = x_1373;
        let x_1376 : vec4<f32> = u_xlat3;
        let x_1379 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1382 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1376.x, x_1376.y, x_1376.x, x_1376.y) * vec4<f32>(x_1379.x, x_1379.y, x_1379.x, x_1379.y)) + vec4<f32>(x_1382.x, x_1382.y, x_1382.z, x_1382.y));
        let x_1386 : vec4<f32> = u_xlat3;
        let x_1389 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1392 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1386.x, x_1386.y) * vec2<f32>(x_1389.x, x_1389.y)) + vec2<f32>(x_1392.w, x_1392.y));
        let x_1396 : f32 = u_xlat13.y;
        u_xlat10.w = x_1396;
        let x_1399 : vec4<f32> = u_xlat3;
        let x_1402 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1405 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1399.x, x_1399.y) * vec2<f32>(x_1402.x, x_1402.y)) + vec2<f32>(x_1405.x, x_1405.w));
        let x_1408 : vec4<f32> = u_xlat13;
        let x_1409 : vec3<f32> = vec3<f32>(x_1408.x, x_1408.z, x_1408.w);
        let x_1410 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1409.x, x_1410.y, x_1409.y, x_1409.z);
        let x_1412 : vec4<f32> = u_xlat3;
        let x_1415 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1418 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1412.x, x_1412.y, x_1412.x, x_1412.y) * vec4<f32>(x_1415.x, x_1415.y, x_1415.x, x_1415.y)) + vec4<f32>(x_1418.x, x_1418.y, x_1418.z, x_1418.y));
        let x_1422 : vec4<f32> = u_xlat3;
        let x_1425 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1428 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1422.x, x_1422.y) * vec2<f32>(x_1425.x, x_1425.y)) + vec2<f32>(x_1428.w, x_1428.y));
        let x_1432 : f32 = u_xlat10.x;
        u_xlat11.x = x_1432;
        let x_1434 : vec4<f32> = u_xlat3;
        let x_1437 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1440 : vec4<f32> = u_xlat11;
        let x_1442 : vec2<f32> = ((vec2<f32>(x_1434.x, x_1434.y) * vec2<f32>(x_1437.x, x_1437.y)) + vec2<f32>(x_1440.x, x_1440.y));
        let x_1443 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1442.x, x_1442.y, x_1443.z, x_1443.w);
        let x_1446 : vec4<f32> = u_xlat9;
        let x_1448 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1446.x, x_1446.x, x_1446.x, x_1446.x) * x_1448);
        let x_1451 : vec4<f32> = u_xlat9;
        let x_1453 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1451.y, x_1451.y, x_1451.y, x_1451.y) * x_1453);
        let x_1456 : vec4<f32> = u_xlat9;
        let x_1458 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1456.z, x_1456.z, x_1456.z, x_1456.z) * x_1458);
        let x_1460 : vec4<f32> = u_xlat9;
        let x_1462 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1460.w, x_1460.w, x_1460.w, x_1460.w) * x_1462);
        let x_1465 : vec4<f32> = u_xlat14;
        let x_1466 : vec2<f32> = vec2<f32>(x_1465.x, x_1465.y);
        let x_1468 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1466.x, x_1466.y, x_1468);
        let x_1475 : vec3<f32> = txVec13;
        let x_1477 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1475.xy, x_1475.z);
        u_xlat68 = x_1477;
        let x_1479 : vec4<f32> = u_xlat14;
        let x_1480 : vec2<f32> = vec2<f32>(x_1479.z, x_1479.w);
        let x_1482 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1490 : vec3<f32> = txVec14;
        let x_1492 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1490.xy, x_1490.z);
        u_xlat70 = x_1492;
        let x_1493 : f32 = u_xlat70;
        let x_1495 : f32 = u_xlat19.y;
        u_xlat70 = (x_1493 * x_1495);
        let x_1498 : f32 = u_xlat19.x;
        let x_1499 : f32 = u_xlat68;
        let x_1501 : f32 = u_xlat70;
        u_xlat68 = ((x_1498 * x_1499) + x_1501);
        let x_1504 : vec2<f32> = u_xlat47;
        let x_1506 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1504.x, x_1504.y, x_1506);
        let x_1513 : vec3<f32> = txVec15;
        let x_1515 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1513.xy, x_1513.z);
        u_xlat47.x = x_1515;
        let x_1518 : f32 = u_xlat19.z;
        let x_1520 : f32 = u_xlat47.x;
        let x_1522 : f32 = u_xlat68;
        u_xlat68 = ((x_1518 * x_1520) + x_1522);
        let x_1525 : vec4<f32> = u_xlat17;
        let x_1526 : vec2<f32> = vec2<f32>(x_1525.x, x_1525.y);
        let x_1528 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1526.x, x_1526.y, x_1528);
        let x_1535 : vec3<f32> = txVec16;
        let x_1537 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1535.xy, x_1535.z);
        u_xlat47.x = x_1537;
        let x_1540 : f32 = u_xlat19.w;
        let x_1542 : f32 = u_xlat47.x;
        let x_1544 : f32 = u_xlat68;
        u_xlat68 = ((x_1540 * x_1542) + x_1544);
        let x_1547 : vec4<f32> = u_xlat15;
        let x_1548 : vec2<f32> = vec2<f32>(x_1547.x, x_1547.y);
        let x_1550 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1548.x, x_1548.y, x_1550);
        let x_1557 : vec3<f32> = txVec17;
        let x_1559 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1557.xy, x_1557.z);
        u_xlat47.x = x_1559;
        let x_1562 : f32 = u_xlat20.x;
        let x_1564 : f32 = u_xlat47.x;
        let x_1566 : f32 = u_xlat68;
        u_xlat68 = ((x_1562 * x_1564) + x_1566);
        let x_1569 : vec4<f32> = u_xlat15;
        let x_1570 : vec2<f32> = vec2<f32>(x_1569.z, x_1569.w);
        let x_1572 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1570.x, x_1570.y, x_1572);
        let x_1579 : vec3<f32> = txVec18;
        let x_1581 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1579.xy, x_1579.z);
        u_xlat47.x = x_1581;
        let x_1584 : f32 = u_xlat20.y;
        let x_1586 : f32 = u_xlat47.x;
        let x_1588 : f32 = u_xlat68;
        u_xlat68 = ((x_1584 * x_1586) + x_1588);
        let x_1591 : vec4<f32> = u_xlat16;
        let x_1592 : vec2<f32> = vec2<f32>(x_1591.x, x_1591.y);
        let x_1594 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1592.x, x_1592.y, x_1594);
        let x_1601 : vec3<f32> = txVec19;
        let x_1603 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1601.xy, x_1601.z);
        u_xlat47.x = x_1603;
        let x_1606 : f32 = u_xlat20.z;
        let x_1608 : f32 = u_xlat47.x;
        let x_1610 : f32 = u_xlat68;
        u_xlat68 = ((x_1606 * x_1608) + x_1610);
        let x_1613 : vec4<f32> = u_xlat17;
        let x_1614 : vec2<f32> = vec2<f32>(x_1613.z, x_1613.w);
        let x_1616 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1614.x, x_1614.y, x_1616);
        let x_1623 : vec3<f32> = txVec20;
        let x_1625 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1623.xy, x_1623.z);
        u_xlat47.x = x_1625;
        let x_1628 : f32 = u_xlat20.w;
        let x_1630 : f32 = u_xlat47.x;
        let x_1632 : f32 = u_xlat68;
        u_xlat68 = ((x_1628 * x_1630) + x_1632);
        let x_1635 : vec4<f32> = u_xlat18;
        let x_1636 : vec2<f32> = vec2<f32>(x_1635.x, x_1635.y);
        let x_1638 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1636.x, x_1636.y, x_1638);
        let x_1645 : vec3<f32> = txVec21;
        let x_1647 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1645.xy, x_1645.z);
        u_xlat47.x = x_1647;
        let x_1650 : f32 = u_xlat21.x;
        let x_1652 : f32 = u_xlat47.x;
        let x_1654 : f32 = u_xlat68;
        u_xlat68 = ((x_1650 * x_1652) + x_1654);
        let x_1657 : vec4<f32> = u_xlat18;
        let x_1658 : vec2<f32> = vec2<f32>(x_1657.z, x_1657.w);
        let x_1660 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1658.x, x_1658.y, x_1660);
        let x_1667 : vec3<f32> = txVec22;
        let x_1669 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1667.xy, x_1667.z);
        u_xlat47.x = x_1669;
        let x_1672 : f32 = u_xlat21.y;
        let x_1674 : f32 = u_xlat47.x;
        let x_1676 : f32 = u_xlat68;
        u_xlat68 = ((x_1672 * x_1674) + x_1676);
        let x_1679 : vec2<f32> = u_xlat32;
        let x_1681 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1679.x, x_1679.y, x_1681);
        let x_1688 : vec3<f32> = txVec23;
        let x_1690 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1688.xy, x_1688.z);
        u_xlat47.x = x_1690;
        let x_1693 : f32 = u_xlat21.z;
        let x_1695 : f32 = u_xlat47.x;
        let x_1697 : f32 = u_xlat68;
        u_xlat68 = ((x_1693 * x_1695) + x_1697);
        let x_1700 : vec2<f32> = u_xlat60;
        let x_1702 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1700.x, x_1700.y, x_1702);
        let x_1709 : vec3<f32> = txVec24;
        let x_1711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1709.xy, x_1709.z);
        u_xlat47.x = x_1711;
        let x_1714 : f32 = u_xlat21.w;
        let x_1716 : f32 = u_xlat47.x;
        let x_1718 : f32 = u_xlat68;
        u_xlat68 = ((x_1714 * x_1716) + x_1718);
        let x_1721 : vec4<f32> = u_xlat13;
        let x_1722 : vec2<f32> = vec2<f32>(x_1721.x, x_1721.y);
        let x_1724 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1722.x, x_1722.y, x_1724);
        let x_1731 : vec3<f32> = txVec25;
        let x_1733 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1731.xy, x_1731.z);
        u_xlat47.x = x_1733;
        let x_1736 : f32 = u_xlat9.x;
        let x_1738 : f32 = u_xlat47.x;
        let x_1740 : f32 = u_xlat68;
        u_xlat68 = ((x_1736 * x_1738) + x_1740);
        let x_1743 : vec4<f32> = u_xlat13;
        let x_1744 : vec2<f32> = vec2<f32>(x_1743.z, x_1743.w);
        let x_1746 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1744.x, x_1744.y, x_1746);
        let x_1753 : vec3<f32> = txVec26;
        let x_1755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1753.xy, x_1753.z);
        u_xlat47.x = x_1755;
        let x_1758 : f32 = u_xlat9.y;
        let x_1760 : f32 = u_xlat47.x;
        let x_1762 : f32 = u_xlat68;
        u_xlat68 = ((x_1758 * x_1760) + x_1762);
        let x_1765 : vec2<f32> = u_xlat55;
        let x_1767 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1765.x, x_1765.y, x_1767);
        let x_1774 : vec3<f32> = txVec27;
        let x_1776 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1774.xy, x_1774.z);
        u_xlat47.x = x_1776;
        let x_1779 : f32 = u_xlat9.z;
        let x_1781 : f32 = u_xlat47.x;
        let x_1783 : f32 = u_xlat68;
        u_xlat68 = ((x_1779 * x_1781) + x_1783);
        let x_1786 : vec4<f32> = u_xlat3;
        let x_1787 : vec2<f32> = vec2<f32>(x_1786.x, x_1786.y);
        let x_1789 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1787.x, x_1787.y, x_1789);
        let x_1796 : vec3<f32> = txVec28;
        let x_1798 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1796.xy, x_1796.z);
        u_xlat3.x = x_1798;
        let x_1801 : f32 = u_xlat9.w;
        let x_1803 : f32 = u_xlat3.x;
        let x_1805 : f32 = u_xlat68;
        u_xlat67 = ((x_1801 * x_1803) + x_1805);
      }
    }
  } else {
    let x_1809 : vec4<f32> = u_xlat2;
    let x_1810 : vec2<f32> = vec2<f32>(x_1809.x, x_1809.y);
    let x_1812 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1810.x, x_1810.y, x_1812);
    let x_1819 : vec3<f32> = txVec29;
    let x_1821 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1819.xy, x_1819.z);
    u_xlat67 = x_1821;
  }
  let x_1823 : f32 = x_381.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1823) + 1.0f);
  let x_1826 : f32 = u_xlat67;
  let x_1828 : f32 = x_381.x_MainLightShadowParams.x;
  let x_1830 : f32 = u_xlat68;
  u_xlat67 = ((x_1826 * x_1828) + x_1830);
  let x_1834 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1834);
  let x_1838 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1838 >= 1.0f);
  let x_1840 : bool = u_xlatb25;
  let x_1841 : bool = u_xlatb3;
  u_xlatb3 = (x_1840 | x_1841);
  let x_1843 : bool = u_xlatb3;
  let x_1844 : f32 = u_xlat67;
  u_xlat67 = select(x_1844, 1.0f, x_1843);
  let x_1846 : vec3<f32> = u_xlat1;
  let x_1848 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1846, -(vec3<f32>(x_1848.x, x_1848.y, x_1848.z)));
  let x_1854 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1854, 0.0f, 1.0f);
  let x_1858 : f32 = u_xlat67;
  let x_1861 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1858, x_1858, x_1858) * vec3<f32>(x_1861.x, x_1861.y, x_1861.z));
  let x_1864 : vec3<f32> = u_xlat23;
  let x_1865 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1864 * vec3<f32>(x_1865.x, x_1865.x, x_1865.x));
  let x_1868 : vec3<f32> = u_xlat1;
  let x_1869 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1868 * vec3<f32>(x_1869.x, x_1869.y, x_1869.z));
  let x_1873 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1873 < 0.0f);
  let x_1876 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1876 + 1.0f);
  let x_1878 : bool = u_xlatb67;
  if (x_1878) {
    let x_1882 : f32 = u_xlat25;
    x_1879 = x_1882;
  } else {
    let x_1885 : f32 = x_95.unity_LODFade.x;
    x_1879 = x_1885;
  }
  let x_1886 : f32 = x_1879;
  u_xlat67 = x_1886;
  let x_1887 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1887);
  let x_1889 : vec3<f32> = u_xlat4;
  let x_1893 : vec4<f32> = x_160.x_ScreenParams;
  u_xlat4 = (abs(x_1889) * vec3<f32>(x_1893.x, x_1893.y, x_1893.x));
  let x_1899 : vec3<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(x_1899);
  let x_1903 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1903 * 1025u);
  let x_1907 : u32 = u_xlatu47;
  u_xlatu69 = (x_1907 >> 6u);
  let x_1911 : u32 = u_xlatu69;
  let x_1912 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1911 ^ x_1912));
  let x_1915 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1915) * 9u);
  let x_1919 : u32 = u_xlatu47;
  u_xlatu69 = (x_1919 >> 11u);
  let x_1922 : u32 = u_xlatu69;
  let x_1923 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1922 ^ x_1923));
  let x_1926 : i32 = u_xlati47;
  u_xlati47 = (x_1926 * 32769i);
  let x_1929 : i32 = u_xlati47;
  let x_1932 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1929) ^ x_1932));
  let x_1935 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1935) * 1025u);
  let x_1938 : u32 = u_xlatu47;
  u_xlatu69 = (x_1938 >> 6u);
  let x_1940 : u32 = u_xlatu69;
  let x_1941 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1940 ^ x_1941));
  let x_1944 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1944) * 9u);
  let x_1947 : u32 = u_xlatu47;
  u_xlatu69 = (x_1947 >> 11u);
  let x_1949 : u32 = u_xlatu69;
  let x_1950 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1949 ^ x_1950));
  let x_1953 : i32 = u_xlati47;
  u_xlati47 = (x_1953 * 32769i);
  let x_1955 : i32 = u_xlati47;
  let x_1958 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1955) ^ x_1958));
  let x_1961 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1961) * 1025u);
  let x_1964 : u32 = u_xlatu47;
  u_xlatu69 = (x_1964 >> 6u);
  let x_1966 : u32 = u_xlatu69;
  let x_1967 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1966 ^ x_1967));
  let x_1970 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1970) * 9u);
  let x_1973 : u32 = u_xlatu47;
  u_xlatu69 = (x_1973 >> 11u);
  let x_1975 : u32 = u_xlatu69;
  let x_1976 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1975 ^ x_1976));
  let x_1979 : i32 = u_xlati47;
  u_xlati47 = (x_1979 * 32769i);
  param = 1065353216i;
  let x_1985 : i32 = u_xlati47;
  param_1 = x_1985;
  param_2 = 0i;
  param_3 = 23i;
  let x_1988 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_1988);
  let x_1992 : f32 = u_xlat47.x;
  u_xlat47.x = (x_1992 + -1.0f);
  let x_1997 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_1997) + 1.0f);
  let x_2000 : bool = u_xlatb25;
  if (x_2000) {
    let x_2005 : f32 = u_xlat47.x;
    x_2001 = x_2005;
  } else {
    let x_2007 : f32 = u_xlat69;
    x_2001 = x_2007;
  }
  let x_2008 : f32 = x_2001;
  u_xlat25 = x_2008;
  let x_2009 : f32 = u_xlat67;
  let x_2011 : f32 = u_xlat25;
  u_xlat67 = ((x_2009 * 2.0f) + -(x_2011));
  let x_2014 : f32 = u_xlat67;
  let x_2016 : f32 = u_xlat6.w;
  u_xlat25 = (x_2014 * x_2016);
  let x_2019 : f32 = u_xlat25;
  u_xlatb47 = (x_2019 >= 0.400000006f);
  let x_2022 : bool = u_xlatb47;
  let x_2023 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2023, x_2022);
  let x_2027 : f32 = u_xlat6.w;
  let x_2028 : f32 = u_xlat67;
  u_xlat67 = ((x_2027 * x_2028) + -0.400000006f);
  let x_2032 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2032);
  let x_2034 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2034);
  let x_2036 : f32 = u_xlat25;
  let x_2038 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2036) + abs(x_2038));
  let x_2041 : f32 = u_xlat25;
  u_xlat25 = max(x_2041, 0.0001f);
  let x_2044 : f32 = u_xlat67;
  let x_2045 : f32 = u_xlat25;
  u_xlat67 = (x_2044 / x_2045);
  let x_2047 : f32 = u_xlat67;
  u_xlat67 = (x_2047 + 0.5f);
  let x_2049 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2049, 0.0f, 1.0f);
  let x_2052 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2052 == 0.0f));
  let x_2054 : bool = u_xlatb25;
  if (x_2054) {
    let x_2058 : f32 = u_xlat67;
    x_2055 = x_2058;
  } else {
    let x_2061 : f32 = u_xlat47.x;
    x_2055 = x_2061;
  }
  let x_2062 : f32 = x_2055;
  u_xlat67 = x_2062;
  let x_2063 : f32 = u_xlat67;
  u_xlat47.x = (x_2063 + -0.0001f);
  let x_2068 : f32 = u_xlat47.x;
  u_xlatb47 = (x_2068 < 0.0f);
  let x_2070 : bool = u_xlatb47;
  if (((select(0i, 1i, x_2070) * -1i) != 0i)) {
    discard;
  }
  let x_2078 : vec3<f32> = u_xlat22;
  let x_2079 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2078 * vec3<f32>(x_2079.y, x_2079.y, x_2079.y));
  let x_2082 : vec3<f32> = u_xlat30;
  let x_2084 : vec4<f32> = vs_INTERP2;
  let x_2087 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2082.x, x_2082.x, x_2082.x) * vec3<f32>(x_2084.x, x_2084.y, x_2084.z)) + x_2087);
  let x_2089 : vec3<f32> = u_xlat30;
  let x_2091 : vec3<f32> = vs_INTERP1;
  let x_2093 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2089.z, x_2089.z, x_2089.z) * x_2091) + x_2093);
  let x_2095 : vec3<f32> = u_xlat22;
  let x_2096 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2095, x_2096);
  let x_2100 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2100);
  let x_2103 : vec3<f32> = u_xlat22;
  let x_2104 : vec2<f32> = u_xlat47;
  u_xlat22 = (x_2103 * vec3<f32>(x_2104.x, x_2104.x, x_2104.x));
  let x_2114 : vec2<f32> = vs_INTERP5;
  let x_2116 : f32 = x_160.x_GlobalMipBias.x;
  let x_2117 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2114, x_2116);
  u_xlat4 = vec3<f32>(x_2117.x, x_2117.y, x_2117.z);
  let x_2120 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2121 : vec2<f32> = vec2<f32>(x_2120.x, x_2120.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2121.x, x_2121.y));
  let x_2126 : vec2<f32> = u_xlat47;
  let x_2127 : vec4<f32> = hlslcc_FragCoord;
  let x_2129 : vec2<f32> = (x_2126 * vec2<f32>(x_2127.x, x_2127.y));
  let x_2130 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2129.x, x_2129.y, x_2130.z, x_2130.w);
  let x_2133 : f32 = u_xlat6.y;
  let x_2136 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2139 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2133 * x_2136) + x_2139);
  let x_2143 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2143) + 1.0f);
  let x_2148 : f32 = u_xlat8.x;
  u_xlat8.x = x_2148;
  let x_2151 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2151, 0.0f, 1.0f);
  let x_2154 : f32 = u_xlat67;
  u_xlat67 = x_2154;
  let x_2155 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2155, 0.0f, 1.0f);
  let x_2157 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2157 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2162 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2162) + 1.0f);
  let x_2167 : f32 = u_xlat47.x;
  let x_2169 : f32 = u_xlat47.x;
  u_xlat69 = (x_2167 * x_2169);
  let x_2171 : f32 = u_xlat69;
  u_xlat69 = max(x_2171, 0.0078125f);
  let x_2174 : f32 = u_xlat69;
  let x_2175 : f32 = u_xlat69;
  u_xlat70 = (x_2174 * x_2175);
  let x_2179 : f32 = u_xlat8.x;
  u_xlat71 = (x_2179 + 0.040000021f);
  let x_2182 : f32 = u_xlat71;
  u_xlat71 = min(x_2182, 1.0f);
  let x_2185 : f32 = u_xlat69;
  u_xlat28 = ((x_2185 * 4.0f) + 2.0f);
  let x_2193 : vec4<f32> = u_xlat6;
  let x_2196 : f32 = x_160.x_GlobalMipBias.x;
  let x_2197 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2193.x, x_2193.z), x_2196);
  u_xlat6.x = x_2197.x;
  let x_2202 : f32 = u_xlat6.x;
  u_xlat50 = (x_2202 + -1.0f);
  let x_2205 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2206 : f32 = u_xlat50;
  u_xlat50 = ((x_2205 * x_2206) + 1.0f);
  let x_2210 : f32 = u_xlat6.x;
  let x_2212 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2210, x_2212);
  let x_2215 : bool = u_xlatb0;
  if (x_2215) {
    let x_2219 : f32 = x_381.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2219 == 1.0f);
    let x_2221 : bool = u_xlatb0;
    if (x_2221) {
      let x_2224 : vec4<f32> = u_xlat2;
      let x_2227 : vec4<f32> = x_381.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2224.x, x_2224.y, x_2224.x, x_2224.y) + x_2227);
      let x_2230 : vec4<f32> = u_xlat8;
      let x_2231 : vec2<f32> = vec2<f32>(x_2230.x, x_2230.y);
      let x_2233 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2231.x, x_2231.y, x_2233);
      let x_2240 : vec3<f32> = txVec30;
      let x_2242 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2240.xy, x_2240.z);
      u_xlat9.x = x_2242;
      let x_2245 : vec4<f32> = u_xlat8;
      let x_2246 : vec2<f32> = vec2<f32>(x_2245.z, x_2245.w);
      let x_2248 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2246.x, x_2246.y, x_2248);
      let x_2255 : vec3<f32> = txVec31;
      let x_2257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2255.xy, x_2255.z);
      u_xlat9.y = x_2257;
      let x_2259 : vec4<f32> = u_xlat2;
      let x_2262 : vec4<f32> = x_381.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2259.x, x_2259.y, x_2259.x, x_2259.y) + x_2262);
      let x_2265 : vec4<f32> = u_xlat8;
      let x_2266 : vec2<f32> = vec2<f32>(x_2265.x, x_2265.y);
      let x_2268 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2266.x, x_2266.y, x_2268);
      let x_2275 : vec3<f32> = txVec32;
      let x_2277 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2275.xy, x_2275.z);
      u_xlat9.z = x_2277;
      let x_2280 : vec4<f32> = u_xlat8;
      let x_2281 : vec2<f32> = vec2<f32>(x_2280.z, x_2280.w);
      let x_2283 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2281.x, x_2281.y, x_2283);
      let x_2290 : vec3<f32> = txVec33;
      let x_2292 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2290.xy, x_2290.z);
      u_xlat9.w = x_2292;
      let x_2294 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2294, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2300 : f32 = x_381.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2300 == 2.0f);
      let x_2302 : bool = u_xlatb72;
      if (x_2302) {
        let x_2305 : vec4<f32> = u_xlat2;
        let x_2308 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2311 : vec2<f32> = ((vec2<f32>(x_2305.x, x_2305.y) * vec2<f32>(x_2308.z, x_2308.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2312 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2311.x, x_2311.y, x_2312.z, x_2312.w);
        let x_2314 : vec4<f32> = u_xlat8;
        let x_2316 : vec2<f32> = floor(vec2<f32>(x_2314.x, x_2314.y));
        let x_2317 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2316.x, x_2316.y, x_2317.z, x_2317.w);
        let x_2320 : vec4<f32> = u_xlat2;
        let x_2323 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2326 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2320.x, x_2320.y) * vec2<f32>(x_2323.z, x_2323.w)) + -(vec2<f32>(x_2326.x, x_2326.y)));
        let x_2330 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2330.x, x_2330.x, x_2330.y, x_2330.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2333 : vec4<f32> = u_xlat9;
        let x_2335 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2333.x, x_2333.x, x_2333.z, x_2333.z) * vec4<f32>(x_2335.x, x_2335.x, x_2335.z, x_2335.z));
        let x_2338 : vec4<f32> = u_xlat10;
        let x_2340 : vec2<f32> = (vec2<f32>(x_2338.y, x_2338.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2341 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2340.x, x_2341.y, x_2340.y, x_2341.w);
        let x_2343 : vec4<f32> = u_xlat10;
        let x_2346 : vec2<f32> = u_xlat52;
        let x_2348 : vec2<f32> = ((vec2<f32>(x_2343.x, x_2343.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2346));
        let x_2349 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2348.x, x_2348.y, x_2349.z, x_2349.w);
        let x_2351 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2351) + vec2<f32>(1.0f, 1.0f));
        let x_2354 : vec2<f32> = u_xlat52;
        let x_2355 : vec2<f32> = min(x_2354, vec2<f32>(0.0f, 0.0f));
        let x_2356 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2355.x, x_2355.y, x_2356.z, x_2356.w);
        let x_2358 : vec4<f32> = u_xlat11;
        let x_2361 : vec4<f32> = u_xlat11;
        let x_2364 : vec2<f32> = u_xlat54;
        let x_2365 : vec2<f32> = ((-(vec2<f32>(x_2358.x, x_2358.y)) * vec2<f32>(x_2361.x, x_2361.y)) + x_2364);
        let x_2366 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2365.x, x_2365.y, x_2366.z, x_2366.w);
        let x_2368 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2368, vec2<f32>(0.0f, 0.0f));
        let x_2370 : vec2<f32> = u_xlat52;
        let x_2372 : vec2<f32> = u_xlat52;
        let x_2374 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2370) * x_2372) + vec2<f32>(x_2374.y, x_2374.w));
        let x_2377 : vec4<f32> = u_xlat11;
        let x_2379 : vec2<f32> = (vec2<f32>(x_2377.x, x_2377.y) + vec2<f32>(1.0f, 1.0f));
        let x_2380 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2379.x, x_2379.y, x_2380.z, x_2380.w);
        let x_2382 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2382 + vec2<f32>(1.0f, 1.0f));
        let x_2384 : vec4<f32> = u_xlat10;
        let x_2386 : vec2<f32> = (vec2<f32>(x_2384.x, x_2384.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2387 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2386.x, x_2386.y, x_2387.z, x_2387.w);
        let x_2389 : vec2<f32> = u_xlat54;
        let x_2390 : vec2<f32> = (x_2389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2391 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2390.x, x_2390.y, x_2391.z, x_2391.w);
        let x_2393 : vec4<f32> = u_xlat11;
        let x_2395 : vec2<f32> = (vec2<f32>(x_2393.x, x_2393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2396 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2395.x, x_2395.y, x_2396.z, x_2396.w);
        let x_2398 : vec2<f32> = u_xlat52;
        let x_2399 : vec2<f32> = (x_2398 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2400 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2399.x, x_2399.y, x_2400.z, x_2400.w);
        let x_2402 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2402.y, x_2402.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2406 : f32 = u_xlat11.x;
        u_xlat12.z = x_2406;
        let x_2409 : f32 = u_xlat52.x;
        u_xlat12.w = x_2409;
        let x_2412 : f32 = u_xlat13.x;
        u_xlat10.z = x_2412;
        let x_2415 : f32 = u_xlat9.x;
        u_xlat10.w = x_2415;
        let x_2417 : vec4<f32> = u_xlat10;
        let x_2419 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2417.z, x_2417.w, x_2417.x, x_2417.z) + vec4<f32>(x_2419.z, x_2419.w, x_2419.x, x_2419.z));
        let x_2423 : f32 = u_xlat12.y;
        u_xlat11.z = x_2423;
        let x_2426 : f32 = u_xlat52.y;
        u_xlat11.w = x_2426;
        let x_2429 : f32 = u_xlat10.y;
        u_xlat13.z = x_2429;
        let x_2432 : f32 = u_xlat9.z;
        u_xlat13.w = x_2432;
        let x_2434 : vec4<f32> = u_xlat11;
        let x_2436 : vec4<f32> = u_xlat13;
        let x_2438 : vec3<f32> = (vec3<f32>(x_2434.z, x_2434.y, x_2434.w) + vec3<f32>(x_2436.z, x_2436.y, x_2436.w));
        let x_2439 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2438.x, x_2438.y, x_2438.z, x_2439.w);
        let x_2441 : vec4<f32> = u_xlat10;
        let x_2443 : vec4<f32> = u_xlat14;
        let x_2445 : vec3<f32> = (vec3<f32>(x_2441.x, x_2441.z, x_2441.w) / vec3<f32>(x_2443.z, x_2443.w, x_2443.y));
        let x_2446 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2445.x, x_2445.y, x_2445.z, x_2446.w);
        let x_2448 : vec4<f32> = u_xlat10;
        let x_2450 : vec3<f32> = (vec3<f32>(x_2448.x, x_2448.y, x_2448.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2451 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2450.x, x_2450.y, x_2450.z, x_2451.w);
        let x_2453 : vec4<f32> = u_xlat13;
        let x_2455 : vec4<f32> = u_xlat9;
        let x_2457 : vec3<f32> = (vec3<f32>(x_2453.z, x_2453.y, x_2453.w) / vec3<f32>(x_2455.x, x_2455.y, x_2455.z));
        let x_2458 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2457.x, x_2457.y, x_2457.z, x_2458.w);
        let x_2460 : vec4<f32> = u_xlat11;
        let x_2462 : vec3<f32> = (vec3<f32>(x_2460.x, x_2460.y, x_2460.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2463 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2462.x, x_2462.y, x_2462.z, x_2463.w);
        let x_2465 : vec4<f32> = u_xlat10;
        let x_2468 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2470 : vec3<f32> = (vec3<f32>(x_2465.y, x_2465.x, x_2465.z) * vec3<f32>(x_2468.x, x_2468.x, x_2468.x));
        let x_2471 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2470.x, x_2470.y, x_2470.z, x_2471.w);
        let x_2473 : vec4<f32> = u_xlat11;
        let x_2476 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2478 : vec3<f32> = (vec3<f32>(x_2473.x, x_2473.y, x_2473.z) * vec3<f32>(x_2476.y, x_2476.y, x_2476.y));
        let x_2479 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2478.x, x_2478.y, x_2478.z, x_2479.w);
        let x_2482 : f32 = u_xlat11.x;
        u_xlat10.w = x_2482;
        let x_2484 : vec4<f32> = u_xlat8;
        let x_2487 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2490 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2484.x, x_2484.y, x_2484.x, x_2484.y) * vec4<f32>(x_2487.x, x_2487.y, x_2487.x, x_2487.y)) + vec4<f32>(x_2490.y, x_2490.w, x_2490.x, x_2490.w));
        let x_2493 : vec4<f32> = u_xlat8;
        let x_2496 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2499 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2493.x, x_2493.y) * vec2<f32>(x_2496.x, x_2496.y)) + vec2<f32>(x_2499.z, x_2499.w));
        let x_2503 : f32 = u_xlat10.y;
        u_xlat11.w = x_2503;
        let x_2505 : vec4<f32> = u_xlat11;
        let x_2506 : vec2<f32> = vec2<f32>(x_2505.y, x_2505.z);
        let x_2507 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2507.x, x_2506.x, x_2507.z, x_2506.y);
        let x_2509 : vec4<f32> = u_xlat8;
        let x_2512 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2515 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2509.x, x_2509.y, x_2509.x, x_2509.y) * vec4<f32>(x_2512.x, x_2512.y, x_2512.x, x_2512.y)) + vec4<f32>(x_2515.x, x_2515.y, x_2515.z, x_2515.y));
        let x_2518 : vec4<f32> = u_xlat8;
        let x_2521 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2524 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2518.x, x_2518.y, x_2518.x, x_2518.y) * vec4<f32>(x_2521.x, x_2521.y, x_2521.x, x_2521.y)) + vec4<f32>(x_2524.w, x_2524.y, x_2524.w, x_2524.z));
        let x_2527 : vec4<f32> = u_xlat8;
        let x_2530 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2533 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2527.x, x_2527.y, x_2527.x, x_2527.y) * vec4<f32>(x_2530.x, x_2530.y, x_2530.x, x_2530.y)) + vec4<f32>(x_2533.x, x_2533.w, x_2533.z, x_2533.w));
        let x_2536 : vec4<f32> = u_xlat9;
        let x_2538 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2536.x, x_2536.x, x_2536.x, x_2536.y) * vec4<f32>(x_2538.z, x_2538.w, x_2538.y, x_2538.z));
        let x_2541 : vec4<f32> = u_xlat9;
        let x_2543 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2541.y, x_2541.y, x_2541.z, x_2541.z) * x_2543);
        let x_2547 : f32 = u_xlat9.z;
        let x_2549 : f32 = u_xlat14.y;
        u_xlat72 = (x_2547 * x_2549);
        let x_2552 : vec4<f32> = u_xlat12;
        let x_2553 : vec2<f32> = vec2<f32>(x_2552.x, x_2552.y);
        let x_2555 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2553.x, x_2553.y, x_2555);
        let x_2563 : vec3<f32> = txVec34;
        let x_2565 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2563.xy, x_2563.z);
        u_xlat73 = x_2565;
        let x_2567 : vec4<f32> = u_xlat12;
        let x_2568 : vec2<f32> = vec2<f32>(x_2567.z, x_2567.w);
        let x_2570 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2568.x, x_2568.y, x_2570);
        let x_2577 : vec3<f32> = txVec35;
        let x_2579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2577.xy, x_2577.z);
        u_xlat8.x = x_2579;
        let x_2582 : f32 = u_xlat8.x;
        let x_2584 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2582 * x_2584);
        let x_2588 : f32 = u_xlat15.x;
        let x_2589 : f32 = u_xlat73;
        let x_2592 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2588 * x_2589) + x_2592);
        let x_2595 : vec2<f32> = u_xlat52;
        let x_2597 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2595.x, x_2595.y, x_2597);
        let x_2604 : vec3<f32> = txVec36;
        let x_2606 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2604.xy, x_2604.z);
        u_xlat8.x = x_2606;
        let x_2609 : f32 = u_xlat15.z;
        let x_2611 : f32 = u_xlat8.x;
        let x_2613 : f32 = u_xlat73;
        u_xlat73 = ((x_2609 * x_2611) + x_2613);
        let x_2616 : vec4<f32> = u_xlat11;
        let x_2617 : vec2<f32> = vec2<f32>(x_2616.x, x_2616.y);
        let x_2619 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2617.x, x_2617.y, x_2619);
        let x_2626 : vec3<f32> = txVec37;
        let x_2628 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2626.xy, x_2626.z);
        u_xlat8.x = x_2628;
        let x_2631 : f32 = u_xlat15.w;
        let x_2633 : f32 = u_xlat8.x;
        let x_2635 : f32 = u_xlat73;
        u_xlat73 = ((x_2631 * x_2633) + x_2635);
        let x_2638 : vec4<f32> = u_xlat13;
        let x_2639 : vec2<f32> = vec2<f32>(x_2638.x, x_2638.y);
        let x_2641 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2639.x, x_2639.y, x_2641);
        let x_2648 : vec3<f32> = txVec38;
        let x_2650 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2648.xy, x_2648.z);
        u_xlat8.x = x_2650;
        let x_2653 : f32 = u_xlat16.x;
        let x_2655 : f32 = u_xlat8.x;
        let x_2657 : f32 = u_xlat73;
        u_xlat73 = ((x_2653 * x_2655) + x_2657);
        let x_2660 : vec4<f32> = u_xlat13;
        let x_2661 : vec2<f32> = vec2<f32>(x_2660.z, x_2660.w);
        let x_2663 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2661.x, x_2661.y, x_2663);
        let x_2670 : vec3<f32> = txVec39;
        let x_2672 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2670.xy, x_2670.z);
        u_xlat8.x = x_2672;
        let x_2675 : f32 = u_xlat16.y;
        let x_2677 : f32 = u_xlat8.x;
        let x_2679 : f32 = u_xlat73;
        u_xlat73 = ((x_2675 * x_2677) + x_2679);
        let x_2682 : vec4<f32> = u_xlat11;
        let x_2683 : vec2<f32> = vec2<f32>(x_2682.z, x_2682.w);
        let x_2685 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2683.x, x_2683.y, x_2685);
        let x_2692 : vec3<f32> = txVec40;
        let x_2694 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2692.xy, x_2692.z);
        u_xlat8.x = x_2694;
        let x_2697 : f32 = u_xlat16.z;
        let x_2699 : f32 = u_xlat8.x;
        let x_2701 : f32 = u_xlat73;
        u_xlat73 = ((x_2697 * x_2699) + x_2701);
        let x_2704 : vec4<f32> = u_xlat10;
        let x_2705 : vec2<f32> = vec2<f32>(x_2704.x, x_2704.y);
        let x_2707 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2705.x, x_2705.y, x_2707);
        let x_2714 : vec3<f32> = txVec41;
        let x_2716 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2714.xy, x_2714.z);
        u_xlat8.x = x_2716;
        let x_2719 : f32 = u_xlat16.w;
        let x_2721 : f32 = u_xlat8.x;
        let x_2723 : f32 = u_xlat73;
        u_xlat73 = ((x_2719 * x_2721) + x_2723);
        let x_2726 : vec4<f32> = u_xlat10;
        let x_2727 : vec2<f32> = vec2<f32>(x_2726.z, x_2726.w);
        let x_2729 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2727.x, x_2727.y, x_2729);
        let x_2736 : vec3<f32> = txVec42;
        let x_2738 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2736.xy, x_2736.z);
        u_xlat8.x = x_2738;
        let x_2740 : f32 = u_xlat72;
        let x_2742 : f32 = u_xlat8.x;
        let x_2744 : f32 = u_xlat73;
        u_xlat0.x = ((x_2740 * x_2742) + x_2744);
      } else {
        let x_2748 : vec4<f32> = u_xlat2;
        let x_2751 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2754 : vec2<f32> = ((vec2<f32>(x_2748.x, x_2748.y) * vec2<f32>(x_2751.z, x_2751.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2755 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2754.x, x_2754.y, x_2755.z, x_2755.w);
        let x_2757 : vec4<f32> = u_xlat8;
        let x_2759 : vec2<f32> = floor(vec2<f32>(x_2757.x, x_2757.y));
        let x_2760 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2759.x, x_2759.y, x_2760.z, x_2760.w);
        let x_2762 : vec4<f32> = u_xlat2;
        let x_2765 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2768 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2762.x, x_2762.y) * vec2<f32>(x_2765.z, x_2765.w)) + -(vec2<f32>(x_2768.x, x_2768.y)));
        let x_2772 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2772.x, x_2772.x, x_2772.y, x_2772.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2775 : vec4<f32> = u_xlat9;
        let x_2777 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2775.x, x_2775.x, x_2775.z, x_2775.z) * vec4<f32>(x_2777.x, x_2777.x, x_2777.z, x_2777.z));
        let x_2780 : vec4<f32> = u_xlat10;
        let x_2782 : vec2<f32> = (vec2<f32>(x_2780.y, x_2780.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2783 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2783.x, x_2782.x, x_2783.z, x_2782.y);
        let x_2785 : vec4<f32> = u_xlat10;
        let x_2788 : vec2<f32> = u_xlat52;
        let x_2790 : vec2<f32> = ((vec2<f32>(x_2785.x, x_2785.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2788));
        let x_2791 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2790.x, x_2791.y, x_2790.y, x_2791.w);
        let x_2793 : vec2<f32> = u_xlat52;
        let x_2795 : vec2<f32> = (-(x_2793) + vec2<f32>(1.0f, 1.0f));
        let x_2796 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2795.x, x_2795.y, x_2796.z, x_2796.w);
        let x_2798 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2798, vec2<f32>(0.0f, 0.0f));
        let x_2800 : vec2<f32> = u_xlat54;
        let x_2802 : vec2<f32> = u_xlat54;
        let x_2804 : vec4<f32> = u_xlat10;
        let x_2806 : vec2<f32> = ((-(x_2800) * x_2802) + vec2<f32>(x_2804.x, x_2804.y));
        let x_2807 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2806.x, x_2806.y, x_2807.z, x_2807.w);
        let x_2809 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2809, vec2<f32>(0.0f, 0.0f));
        let x_2811 : vec2<f32> = u_xlat54;
        let x_2813 : vec2<f32> = u_xlat54;
        let x_2815 : vec4<f32> = u_xlat9;
        let x_2817 : vec2<f32> = ((-(x_2811) * x_2813) + vec2<f32>(x_2815.y, x_2815.w));
        let x_2818 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2817.x, x_2818.y, x_2817.y);
        let x_2820 : vec4<f32> = u_xlat10;
        let x_2822 : vec2<f32> = (vec2<f32>(x_2820.x, x_2820.y) + vec2<f32>(2.0f, 2.0f));
        let x_2823 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2822.x, x_2822.y, x_2823.z, x_2823.w);
        let x_2825 : vec3<f32> = u_xlat31;
        let x_2827 : vec2<f32> = (vec2<f32>(x_2825.x, x_2825.z) + vec2<f32>(2.0f, 2.0f));
        let x_2828 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2828.x, x_2827.x, x_2828.z, x_2827.y);
        let x_2831 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2831 * 0.081632003f);
        let x_2834 : vec4<f32> = u_xlat9;
        let x_2836 : vec3<f32> = (vec3<f32>(x_2834.z, x_2834.x, x_2834.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2837 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2836.x, x_2836.y, x_2836.z, x_2837.w);
        let x_2839 : vec4<f32> = u_xlat10;
        let x_2841 : vec2<f32> = (vec2<f32>(x_2839.x, x_2839.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2842 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2841.x, x_2841.y, x_2842.z, x_2842.w);
        let x_2845 : f32 = u_xlat13.y;
        u_xlat12.x = x_2845;
        let x_2847 : vec2<f32> = u_xlat52;
        let x_2850 : vec2<f32> = ((vec2<f32>(x_2847.x, x_2847.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2851 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2851.x, x_2850.x, x_2851.z, x_2850.y);
        let x_2853 : vec2<f32> = u_xlat52;
        let x_2856 : vec2<f32> = ((vec2<f32>(x_2853.x, x_2853.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2857 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2856.x, x_2857.y, x_2856.y, x_2857.w);
        let x_2860 : f32 = u_xlat9.x;
        u_xlat10.y = x_2860;
        let x_2863 : f32 = u_xlat11.y;
        u_xlat10.w = x_2863;
        let x_2865 : vec4<f32> = u_xlat10;
        let x_2866 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2865 + x_2866);
        let x_2868 : vec2<f32> = u_xlat52;
        let x_2871 : vec2<f32> = ((vec2<f32>(x_2868.y, x_2868.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2872 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2872.x, x_2871.x, x_2872.z, x_2871.y);
        let x_2874 : vec2<f32> = u_xlat52;
        let x_2877 : vec2<f32> = ((vec2<f32>(x_2874.y, x_2874.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2878 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2877.x, x_2878.y, x_2877.y, x_2878.w);
        let x_2881 : f32 = u_xlat9.y;
        u_xlat11.y = x_2881;
        let x_2883 : vec4<f32> = u_xlat11;
        let x_2884 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2883 + x_2884);
        let x_2886 : vec4<f32> = u_xlat10;
        let x_2887 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2886 / x_2887);
        let x_2889 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2889 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2891 : vec4<f32> = u_xlat11;
        let x_2892 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2891 / x_2892);
        let x_2894 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2894 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2896 : vec4<f32> = u_xlat10;
        let x_2899 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2896.w, x_2896.x, x_2896.y, x_2896.z) * vec4<f32>(x_2899.x, x_2899.x, x_2899.x, x_2899.x));
        let x_2902 : vec4<f32> = u_xlat11;
        let x_2905 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2902.x, x_2902.w, x_2902.y, x_2902.z) * vec4<f32>(x_2905.y, x_2905.y, x_2905.y, x_2905.y));
        let x_2908 : vec4<f32> = u_xlat10;
        let x_2909 : vec3<f32> = vec3<f32>(x_2908.y, x_2908.z, x_2908.w);
        let x_2910 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2909.x, x_2910.y, x_2909.y, x_2909.z);
        let x_2913 : f32 = u_xlat11.x;
        u_xlat13.y = x_2913;
        let x_2915 : vec4<f32> = u_xlat8;
        let x_2918 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2921 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2915.x, x_2915.y, x_2915.x, x_2915.y) * vec4<f32>(x_2918.x, x_2918.y, x_2918.x, x_2918.y)) + vec4<f32>(x_2921.x, x_2921.y, x_2921.z, x_2921.y));
        let x_2924 : vec4<f32> = u_xlat8;
        let x_2927 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2930 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2924.x, x_2924.y) * vec2<f32>(x_2927.x, x_2927.y)) + vec2<f32>(x_2930.w, x_2930.y));
        let x_2934 : f32 = u_xlat13.y;
        u_xlat10.y = x_2934;
        let x_2937 : f32 = u_xlat11.z;
        u_xlat13.y = x_2937;
        let x_2939 : vec4<f32> = u_xlat8;
        let x_2942 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2945 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2939.x, x_2939.y, x_2939.x, x_2939.y) * vec4<f32>(x_2942.x, x_2942.y, x_2942.x, x_2942.y)) + vec4<f32>(x_2945.x, x_2945.y, x_2945.z, x_2945.y));
        let x_2948 : vec4<f32> = u_xlat8;
        let x_2951 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2954 : vec4<f32> = u_xlat13;
        let x_2956 : vec2<f32> = ((vec2<f32>(x_2948.x, x_2948.y) * vec2<f32>(x_2951.x, x_2951.y)) + vec2<f32>(x_2954.w, x_2954.y));
        let x_2957 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2956.x, x_2956.y, x_2957.z, x_2957.w);
        let x_2960 : f32 = u_xlat13.y;
        u_xlat10.z = x_2960;
        let x_2962 : vec4<f32> = u_xlat8;
        let x_2965 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2968 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2962.x, x_2962.y, x_2962.x, x_2962.y) * vec4<f32>(x_2965.x, x_2965.y, x_2965.x, x_2965.y)) + vec4<f32>(x_2968.x, x_2968.y, x_2968.x, x_2968.z));
        let x_2972 : f32 = u_xlat11.w;
        u_xlat13.y = x_2972;
        let x_2974 : vec4<f32> = u_xlat8;
        let x_2977 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2980 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2974.x, x_2974.y, x_2974.x, x_2974.y) * vec4<f32>(x_2977.x, x_2977.y, x_2977.x, x_2977.y)) + vec4<f32>(x_2980.x, x_2980.y, x_2980.z, x_2980.y));
        let x_2983 : vec4<f32> = u_xlat8;
        let x_2986 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2989 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2983.x, x_2983.y) * vec2<f32>(x_2986.x, x_2986.y)) + vec2<f32>(x_2989.w, x_2989.y));
        let x_2993 : f32 = u_xlat13.y;
        u_xlat10.w = x_2993;
        let x_2995 : vec4<f32> = u_xlat8;
        let x_2998 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3001 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2995.x, x_2995.y) * vec2<f32>(x_2998.x, x_2998.y)) + vec2<f32>(x_3001.x, x_3001.w));
        let x_3004 : vec4<f32> = u_xlat13;
        let x_3005 : vec3<f32> = vec3<f32>(x_3004.x, x_3004.z, x_3004.w);
        let x_3006 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3005.x, x_3006.y, x_3005.y, x_3005.z);
        let x_3008 : vec4<f32> = u_xlat8;
        let x_3011 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3014 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3008.x, x_3008.y, x_3008.x, x_3008.y) * vec4<f32>(x_3011.x, x_3011.y, x_3011.x, x_3011.y)) + vec4<f32>(x_3014.x, x_3014.y, x_3014.z, x_3014.y));
        let x_3017 : vec4<f32> = u_xlat8;
        let x_3020 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3023 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3017.x, x_3017.y) * vec2<f32>(x_3020.x, x_3020.y)) + vec2<f32>(x_3023.w, x_3023.y));
        let x_3027 : f32 = u_xlat10.x;
        u_xlat11.x = x_3027;
        let x_3029 : vec4<f32> = u_xlat8;
        let x_3032 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3035 : vec4<f32> = u_xlat11;
        let x_3037 : vec2<f32> = ((vec2<f32>(x_3029.x, x_3029.y) * vec2<f32>(x_3032.x, x_3032.y)) + vec2<f32>(x_3035.x, x_3035.y));
        let x_3038 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3037.x, x_3037.y, x_3038.z, x_3038.w);
        let x_3040 : vec4<f32> = u_xlat9;
        let x_3042 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3040.x, x_3040.x, x_3040.x, x_3040.x) * x_3042);
        let x_3044 : vec4<f32> = u_xlat9;
        let x_3046 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3044.y, x_3044.y, x_3044.y, x_3044.y) * x_3046);
        let x_3048 : vec4<f32> = u_xlat9;
        let x_3050 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3048.z, x_3048.z, x_3048.z, x_3048.z) * x_3050);
        let x_3052 : vec4<f32> = u_xlat9;
        let x_3054 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3052.w, x_3052.w, x_3052.w, x_3052.w) * x_3054);
        let x_3057 : vec4<f32> = u_xlat14;
        let x_3058 : vec2<f32> = vec2<f32>(x_3057.x, x_3057.y);
        let x_3060 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3058.x, x_3058.y, x_3060);
        let x_3067 : vec3<f32> = txVec43;
        let x_3069 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3067.xy, x_3067.z);
        u_xlat72 = x_3069;
        let x_3071 : vec4<f32> = u_xlat14;
        let x_3072 : vec2<f32> = vec2<f32>(x_3071.z, x_3071.w);
        let x_3074 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3072.x, x_3072.y, x_3074);
        let x_3081 : vec3<f32> = txVec44;
        let x_3083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3081.xy, x_3081.z);
        u_xlat73 = x_3083;
        let x_3084 : f32 = u_xlat73;
        let x_3086 : f32 = u_xlat19.y;
        u_xlat73 = (x_3084 * x_3086);
        let x_3089 : f32 = u_xlat19.x;
        let x_3090 : f32 = u_xlat72;
        let x_3092 : f32 = u_xlat73;
        u_xlat72 = ((x_3089 * x_3090) + x_3092);
        let x_3095 : vec2<f32> = u_xlat52;
        let x_3097 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3095.x, x_3095.y, x_3097);
        let x_3104 : vec3<f32> = txVec45;
        let x_3106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3104.xy, x_3104.z);
        u_xlat73 = x_3106;
        let x_3108 : f32 = u_xlat19.z;
        let x_3109 : f32 = u_xlat73;
        let x_3111 : f32 = u_xlat72;
        u_xlat72 = ((x_3108 * x_3109) + x_3111);
        let x_3114 : vec4<f32> = u_xlat17;
        let x_3115 : vec2<f32> = vec2<f32>(x_3114.x, x_3114.y);
        let x_3117 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3115.x, x_3115.y, x_3117);
        let x_3124 : vec3<f32> = txVec46;
        let x_3126 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3124.xy, x_3124.z);
        u_xlat73 = x_3126;
        let x_3128 : f32 = u_xlat19.w;
        let x_3129 : f32 = u_xlat73;
        let x_3131 : f32 = u_xlat72;
        u_xlat72 = ((x_3128 * x_3129) + x_3131);
        let x_3134 : vec4<f32> = u_xlat15;
        let x_3135 : vec2<f32> = vec2<f32>(x_3134.x, x_3134.y);
        let x_3137 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3135.x, x_3135.y, x_3137);
        let x_3144 : vec3<f32> = txVec47;
        let x_3146 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3144.xy, x_3144.z);
        u_xlat73 = x_3146;
        let x_3148 : f32 = u_xlat20.x;
        let x_3149 : f32 = u_xlat73;
        let x_3151 : f32 = u_xlat72;
        u_xlat72 = ((x_3148 * x_3149) + x_3151);
        let x_3154 : vec4<f32> = u_xlat15;
        let x_3155 : vec2<f32> = vec2<f32>(x_3154.z, x_3154.w);
        let x_3157 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3155.x, x_3155.y, x_3157);
        let x_3164 : vec3<f32> = txVec48;
        let x_3166 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3164.xy, x_3164.z);
        u_xlat73 = x_3166;
        let x_3168 : f32 = u_xlat20.y;
        let x_3169 : f32 = u_xlat73;
        let x_3171 : f32 = u_xlat72;
        u_xlat72 = ((x_3168 * x_3169) + x_3171);
        let x_3174 : vec4<f32> = u_xlat16;
        let x_3175 : vec2<f32> = vec2<f32>(x_3174.x, x_3174.y);
        let x_3177 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3175.x, x_3175.y, x_3177);
        let x_3184 : vec3<f32> = txVec49;
        let x_3186 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3184.xy, x_3184.z);
        u_xlat73 = x_3186;
        let x_3188 : f32 = u_xlat20.z;
        let x_3189 : f32 = u_xlat73;
        let x_3191 : f32 = u_xlat72;
        u_xlat72 = ((x_3188 * x_3189) + x_3191);
        let x_3194 : vec4<f32> = u_xlat17;
        let x_3195 : vec2<f32> = vec2<f32>(x_3194.z, x_3194.w);
        let x_3197 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3195.x, x_3195.y, x_3197);
        let x_3204 : vec3<f32> = txVec50;
        let x_3206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3204.xy, x_3204.z);
        u_xlat73 = x_3206;
        let x_3208 : f32 = u_xlat20.w;
        let x_3209 : f32 = u_xlat73;
        let x_3211 : f32 = u_xlat72;
        u_xlat72 = ((x_3208 * x_3209) + x_3211);
        let x_3214 : vec4<f32> = u_xlat18;
        let x_3215 : vec2<f32> = vec2<f32>(x_3214.x, x_3214.y);
        let x_3217 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3215.x, x_3215.y, x_3217);
        let x_3224 : vec3<f32> = txVec51;
        let x_3226 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3224.xy, x_3224.z);
        u_xlat73 = x_3226;
        let x_3228 : f32 = u_xlat21.x;
        let x_3229 : f32 = u_xlat73;
        let x_3231 : f32 = u_xlat72;
        u_xlat72 = ((x_3228 * x_3229) + x_3231);
        let x_3234 : vec4<f32> = u_xlat18;
        let x_3235 : vec2<f32> = vec2<f32>(x_3234.z, x_3234.w);
        let x_3237 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3235.x, x_3235.y, x_3237);
        let x_3244 : vec3<f32> = txVec52;
        let x_3246 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3244.xy, x_3244.z);
        u_xlat73 = x_3246;
        let x_3248 : f32 = u_xlat21.y;
        let x_3249 : f32 = u_xlat73;
        let x_3251 : f32 = u_xlat72;
        u_xlat72 = ((x_3248 * x_3249) + x_3251);
        let x_3254 : vec2<f32> = u_xlat32;
        let x_3256 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3254.x, x_3254.y, x_3256);
        let x_3263 : vec3<f32> = txVec53;
        let x_3265 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3263.xy, x_3263.z);
        u_xlat73 = x_3265;
        let x_3267 : f32 = u_xlat21.z;
        let x_3268 : f32 = u_xlat73;
        let x_3270 : f32 = u_xlat72;
        u_xlat72 = ((x_3267 * x_3268) + x_3270);
        let x_3273 : vec2<f32> = u_xlat60;
        let x_3275 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3273.x, x_3273.y, x_3275);
        let x_3282 : vec3<f32> = txVec54;
        let x_3284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3282.xy, x_3282.z);
        u_xlat73 = x_3284;
        let x_3286 : f32 = u_xlat21.w;
        let x_3287 : f32 = u_xlat73;
        let x_3289 : f32 = u_xlat72;
        u_xlat72 = ((x_3286 * x_3287) + x_3289);
        let x_3292 : vec4<f32> = u_xlat13;
        let x_3293 : vec2<f32> = vec2<f32>(x_3292.x, x_3292.y);
        let x_3295 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3293.x, x_3293.y, x_3295);
        let x_3302 : vec3<f32> = txVec55;
        let x_3304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3302.xy, x_3302.z);
        u_xlat73 = x_3304;
        let x_3306 : f32 = u_xlat9.x;
        let x_3307 : f32 = u_xlat73;
        let x_3309 : f32 = u_xlat72;
        u_xlat72 = ((x_3306 * x_3307) + x_3309);
        let x_3312 : vec4<f32> = u_xlat13;
        let x_3313 : vec2<f32> = vec2<f32>(x_3312.z, x_3312.w);
        let x_3315 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3313.x, x_3313.y, x_3315);
        let x_3322 : vec3<f32> = txVec56;
        let x_3324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3322.xy, x_3322.z);
        u_xlat73 = x_3324;
        let x_3326 : f32 = u_xlat9.y;
        let x_3327 : f32 = u_xlat73;
        let x_3329 : f32 = u_xlat72;
        u_xlat72 = ((x_3326 * x_3327) + x_3329);
        let x_3332 : vec2<f32> = u_xlat55;
        let x_3334 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3332.x, x_3332.y, x_3334);
        let x_3341 : vec3<f32> = txVec57;
        let x_3343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3341.xy, x_3341.z);
        u_xlat73 = x_3343;
        let x_3345 : f32 = u_xlat9.z;
        let x_3346 : f32 = u_xlat73;
        let x_3348 : f32 = u_xlat72;
        u_xlat72 = ((x_3345 * x_3346) + x_3348);
        let x_3351 : vec4<f32> = u_xlat8;
        let x_3352 : vec2<f32> = vec2<f32>(x_3351.x, x_3351.y);
        let x_3354 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3352.x, x_3352.y, x_3354);
        let x_3361 : vec3<f32> = txVec58;
        let x_3363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3361.xy, x_3361.z);
        u_xlat73 = x_3363;
        let x_3365 : f32 = u_xlat9.w;
        let x_3366 : f32 = u_xlat73;
        let x_3368 : f32 = u_xlat72;
        u_xlat0.x = ((x_3365 * x_3366) + x_3368);
      }
    }
  } else {
    let x_3373 : vec4<f32> = u_xlat2;
    let x_3374 : vec2<f32> = vec2<f32>(x_3373.x, x_3373.y);
    let x_3376 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3374.x, x_3374.y, x_3376);
    let x_3383 : vec3<f32> = txVec59;
    let x_3385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3383.xy, x_3383.z);
    u_xlat0.x = x_3385;
  }
  let x_3388 : f32 = u_xlat0.x;
  let x_3390 : f32 = x_381.x_MainLightShadowParams.x;
  let x_3392 : f32 = u_xlat68;
  u_xlat0.x = ((x_3388 * x_3390) + x_3392);
  let x_3395 : bool = u_xlatb3;
  if (x_3395) {
    x_3396 = 1.0f;
  } else {
    let x_3401 : f32 = u_xlat0.x;
    x_3396 = x_3401;
  }
  let x_3402 : f32 = x_3396;
  u_xlat0.x = x_3402;
  let x_3404 : vec3<f32> = vs_INTERP0;
  let x_3406 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3408 : vec3<f32> = (x_3404 + -(x_3406));
  let x_3409 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3408.x, x_3408.y, x_3408.z, x_3409.w);
  let x_3411 : vec4<f32> = u_xlat2;
  let x_3413 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3411.x, x_3411.y, x_3411.z), vec3<f32>(x_3413.x, x_3413.y, x_3413.z));
  let x_3418 : f32 = u_xlat2.x;
  let x_3420 : f32 = x_381.x_MainLightShadowParams.z;
  let x_3423 : f32 = x_381.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3418 * x_3420) + x_3423);
  let x_3427 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3427, 0.0f, 1.0f);
  let x_3432 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3432) + 1.0f);
  let x_3436 : f32 = u_xlat2.x;
  let x_3437 : f32 = u_xlat24;
  let x_3440 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3436 * x_3437) + x_3440);
  let x_3443 : f32 = u_xlat50;
  let x_3446 : vec4<f32> = x_160.x_MainLightColor;
  let x_3448 : vec3<f32> = (vec3<f32>(x_3443, x_3443, x_3443) * vec3<f32>(x_3446.x, x_3446.y, x_3446.z));
  let x_3449 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3448.x, x_3448.y, x_3448.z, x_3449.w);
  let x_3451 : vec3<f32> = u_xlat5;
  let x_3453 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(x_3451), x_3453);
  let x_3455 : f32 = u_xlat68;
  let x_3456 : f32 = u_xlat68;
  u_xlat68 = (x_3455 + x_3456);
  let x_3458 : vec3<f32> = u_xlat22;
  let x_3459 : f32 = u_xlat68;
  let x_3463 : vec3<f32> = u_xlat5;
  let x_3465 : vec3<f32> = ((x_3458 * -(vec3<f32>(x_3459, x_3459, x_3459))) + -(x_3463));
  let x_3466 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3465.x, x_3465.y, x_3465.z, x_3466.w);
  let x_3468 : vec3<f32> = u_xlat22;
  let x_3469 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(x_3468, x_3469);
  let x_3471 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3471, 0.0f, 1.0f);
  let x_3473 : f32 = u_xlat68;
  u_xlat68 = (-(x_3473) + 1.0f);
  let x_3476 : f32 = u_xlat68;
  let x_3477 : f32 = u_xlat68;
  u_xlat68 = (x_3476 * x_3477);
  let x_3479 : f32 = u_xlat68;
  let x_3480 : f32 = u_xlat68;
  u_xlat68 = (x_3479 * x_3480);
  let x_3483 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3483) * 0.699999988f) + 1.700000048f);
  let x_3491 : f32 = u_xlat3.x;
  let x_3493 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3491 * x_3493);
  let x_3497 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3497 * 6.0f);
  let x_3509 : vec4<f32> = u_xlat8;
  let x_3512 : f32 = u_xlat3.x;
  let x_3513 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3509.x, x_3509.y, x_3509.z), x_3512);
  u_xlat8 = x_3513;
  let x_3515 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3515 + -1.0f);
  let x_3519 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3521 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3519 * x_3521) + 1.0f);
  let x_3526 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3526, 0.0f);
  let x_3530 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3530);
  let x_3534 : f32 = u_xlat3.x;
  let x_3536 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3534 * x_3536);
  let x_3540 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3540);
  let x_3544 : f32 = u_xlat3.x;
  let x_3546 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3544 * x_3546);
  let x_3549 : vec4<f32> = u_xlat8;
  let x_3551 : vec4<f32> = u_xlat3;
  let x_3553 : vec3<f32> = (vec3<f32>(x_3549.x, x_3549.y, x_3549.z) * vec3<f32>(x_3551.x, x_3551.x, x_3551.x));
  let x_3554 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3553.x, x_3553.y, x_3553.z, x_3554.w);
  let x_3556 : f32 = u_xlat69;
  let x_3558 : f32 = u_xlat69;
  let x_3562 : vec2<f32> = ((vec2<f32>(x_3556, x_3556) * vec2<f32>(x_3558, x_3558)) + vec2<f32>(-1.0f, 1.0f));
  let x_3563 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3562.x, x_3563.y, x_3562.y, x_3563.w);
  let x_3566 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3566);
  let x_3569 : f32 = u_xlat71;
  u_xlat69 = (x_3569 + -0.039999999f);
  let x_3572 : f32 = u_xlat68;
  let x_3573 : f32 = u_xlat69;
  u_xlat68 = ((x_3572 * x_3573) + 0.039999999f);
  let x_3577 : f32 = u_xlat68;
  let x_3579 : f32 = u_xlat47.x;
  u_xlat68 = (x_3577 * x_3579);
  let x_3581 : f32 = u_xlat68;
  let x_3583 : vec4<f32> = u_xlat8;
  let x_3585 : vec3<f32> = (vec3<f32>(x_3581, x_3581, x_3581) * vec3<f32>(x_3583.x, x_3583.y, x_3583.z));
  let x_3586 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3585.x, x_3585.y, x_3585.z, x_3586.w);
  let x_3588 : vec3<f32> = u_xlat4;
  let x_3589 : vec3<f32> = u_xlat7;
  let x_3591 : vec4<f32> = u_xlat8;
  u_xlat4 = ((x_3588 * x_3589) + vec3<f32>(x_3591.x, x_3591.y, x_3591.z));
  let x_3595 : f32 = u_xlat0.x;
  let x_3597 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3595 * x_3597);
  let x_3600 : vec3<f32> = u_xlat22;
  let x_3602 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(x_3600, vec3<f32>(x_3602.x, x_3602.y, x_3602.z));
  let x_3605 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3605, 0.0f, 1.0f);
  let x_3608 : f32 = u_xlat0.x;
  let x_3609 : f32 = u_xlat68;
  u_xlat0.x = (x_3608 * x_3609);
  let x_3612 : vec3<f32> = u_xlat0;
  let x_3614 : vec4<f32> = u_xlat2;
  let x_3616 : vec3<f32> = (vec3<f32>(x_3612.x, x_3612.x, x_3612.x) * vec3<f32>(x_3614.x, x_3614.y, x_3614.z));
  let x_3617 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3616.x, x_3616.y, x_3616.z, x_3617.w);
  let x_3619 : vec3<f32> = u_xlat5;
  let x_3621 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3623 : vec3<f32> = (x_3619 + vec3<f32>(x_3621.x, x_3621.y, x_3621.z));
  let x_3624 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3623.x, x_3623.y, x_3623.z, x_3624.w);
  let x_3626 : vec4<f32> = u_xlat8;
  let x_3628 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3626.x, x_3626.y, x_3626.z), vec3<f32>(x_3628.x, x_3628.y, x_3628.z));
  let x_3633 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3633, 1.17549435e-37f);
  let x_3637 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3637);
  let x_3640 : vec3<f32> = u_xlat0;
  let x_3642 : vec4<f32> = u_xlat8;
  let x_3644 : vec3<f32> = (vec3<f32>(x_3640.x, x_3640.x, x_3640.x) * vec3<f32>(x_3642.x, x_3642.y, x_3642.z));
  let x_3645 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3644.x, x_3644.y, x_3644.z, x_3645.w);
  let x_3647 : vec3<f32> = u_xlat22;
  let x_3648 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3647, vec3<f32>(x_3648.x, x_3648.y, x_3648.z));
  let x_3653 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3653, 0.0f, 1.0f);
  let x_3657 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3659 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3657.x, x_3657.y, x_3657.z), vec3<f32>(x_3659.x, x_3659.y, x_3659.z));
  let x_3662 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3662, 0.0f, 1.0f);
  let x_3665 : f32 = u_xlat0.x;
  let x_3667 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3665 * x_3667);
  let x_3671 : f32 = u_xlat0.x;
  let x_3673 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3671 * x_3673) + 1.000010014f);
  let x_3678 : f32 = u_xlat68;
  let x_3679 : f32 = u_xlat68;
  u_xlat68 = (x_3678 * x_3679);
  let x_3682 : f32 = u_xlat0.x;
  let x_3684 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3682 * x_3684);
  let x_3687 : f32 = u_xlat68;
  u_xlat68 = max(x_3687, 0.100000001f);
  let x_3691 : f32 = u_xlat0.x;
  let x_3692 : f32 = u_xlat68;
  u_xlat0.x = (x_3691 * x_3692);
  let x_3695 : f32 = u_xlat28;
  let x_3697 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3695 * x_3697);
  let x_3700 : f32 = u_xlat70;
  let x_3702 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3700 / x_3702);
  let x_3705 : vec3<f32> = u_xlat0;
  let x_3709 : vec3<f32> = u_xlat7;
  let x_3710 : vec3<f32> = ((vec3<f32>(x_3705.x, x_3705.x, x_3705.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3709);
  let x_3711 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3710.x, x_3710.y, x_3710.z, x_3711.w);
  let x_3713 : vec4<f32> = u_xlat2;
  let x_3715 : vec4<f32> = u_xlat8;
  let x_3717 : vec3<f32> = (vec3<f32>(x_3713.x, x_3713.y, x_3713.z) * vec3<f32>(x_3715.x, x_3715.y, x_3715.z));
  let x_3718 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3717.x, x_3717.y, x_3717.z, x_3718.w);
  let x_3721 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3723 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3721, x_3723);
  let x_3727 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3727));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3739 : u32 = u_xlatu_loop_1;
    let x_3740 : u32 = u_xlatu0;
    if ((x_3739 < x_3740)) {
    } else {
      break;
    }
    let x_3742 : u32 = u_xlatu_loop_1;
    u_xlatu47 = (x_3742 >> 2u);
    let x_3745 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3745 & 3u));
    let x_3748 : u32 = u_xlatu47;
    let x_3751 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3748)];
    let x_3761 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3766 : vec4<u32> = indexable[x_3761];
    u_xlat47.x = dot(x_3751, bitcast<vec4<f32>>(x_3766));
    let x_3771 : f32 = u_xlat47.x;
    u_xlati47 = i32(x_3771);
    let x_3773 : vec3<f32> = vs_INTERP0;
    let x_3785 : i32 = u_xlati47;
    let x_3787 : vec4<f32> = x_3784.x_AdditionalLightsPosition[x_3785];
    let x_3790 : i32 = u_xlati47;
    let x_3792 : vec4<f32> = x_3784.x_AdditionalLightsPosition[x_3790];
    let x_3794 : vec3<f32> = ((-(x_3773) * vec3<f32>(x_3787.w, x_3787.w, x_3787.w)) + vec3<f32>(x_3792.x, x_3792.y, x_3792.z));
    let x_3795 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3794.x, x_3794.y, x_3794.z, x_3795.w);
    let x_3797 : vec4<f32> = u_xlat9;
    let x_3799 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3797.x, x_3797.y, x_3797.z), vec3<f32>(x_3799.x, x_3799.y, x_3799.z));
    let x_3802 : f32 = u_xlat69;
    u_xlat69 = max(x_3802, 6.10351562e-05f);
    let x_3805 : f32 = u_xlat69;
    u_xlat71 = inverseSqrt(x_3805);
    let x_3807 : f32 = u_xlat71;
    let x_3809 : vec4<f32> = u_xlat9;
    let x_3811 : vec3<f32> = (vec3<f32>(x_3807, x_3807, x_3807) * vec3<f32>(x_3809.x, x_3809.y, x_3809.z));
    let x_3812 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3811.x, x_3811.y, x_3811.z, x_3812.w);
    let x_3814 : f32 = u_xlat69;
    u_xlat72 = (1.0f / x_3814);
    let x_3816 : f32 = u_xlat69;
    let x_3817 : i32 = u_xlati47;
    let x_3819 : f32 = x_3784.x_AdditionalLightsAttenuation[x_3817].x;
    u_xlat69 = (x_3816 * x_3819);
    let x_3821 : f32 = u_xlat69;
    let x_3823 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3821) * x_3823) + 1.0f);
    let x_3826 : f32 = u_xlat69;
    u_xlat69 = max(x_3826, 0.0f);
    let x_3828 : f32 = u_xlat69;
    let x_3829 : f32 = u_xlat69;
    u_xlat69 = (x_3828 * x_3829);
    let x_3831 : f32 = u_xlat69;
    let x_3832 : f32 = u_xlat72;
    u_xlat69 = (x_3831 * x_3832);
    let x_3834 : i32 = u_xlati47;
    let x_3836 : vec4<f32> = x_3784.x_AdditionalLightsSpotDir[x_3834];
    let x_3838 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3836.x, x_3836.y, x_3836.z), vec3<f32>(x_3838.x, x_3838.y, x_3838.z));
    let x_3841 : f32 = u_xlat72;
    let x_3842 : i32 = u_xlati47;
    let x_3844 : f32 = x_3784.x_AdditionalLightsAttenuation[x_3842].z;
    let x_3846 : i32 = u_xlati47;
    let x_3848 : f32 = x_3784.x_AdditionalLightsAttenuation[x_3846].w;
    u_xlat72 = ((x_3841 * x_3844) + x_3848);
    let x_3850 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3850, 0.0f, 1.0f);
    let x_3852 : f32 = u_xlat72;
    let x_3853 : f32 = u_xlat72;
    u_xlat72 = (x_3852 * x_3853);
    let x_3855 : f32 = u_xlat69;
    let x_3856 : f32 = u_xlat72;
    u_xlat69 = (x_3855 * x_3856);
    let x_3858 : f32 = u_xlat50;
    let x_3860 : i32 = u_xlati47;
    let x_3862 : vec4<f32> = x_3784.x_AdditionalLightsColor[x_3860];
    let x_3864 : vec3<f32> = (vec3<f32>(x_3858, x_3858, x_3858) * vec3<f32>(x_3862.x, x_3862.y, x_3862.z));
    let x_3865 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3864.x, x_3864.y, x_3864.z, x_3865.w);
    let x_3867 : vec3<f32> = u_xlat22;
    let x_3868 : vec4<f32> = u_xlat10;
    u_xlat47.x = dot(x_3867, vec3<f32>(x_3868.x, x_3868.y, x_3868.z));
    let x_3873 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_3873, 0.0f, 1.0f);
    let x_3877 : f32 = u_xlat47.x;
    let x_3878 : f32 = u_xlat69;
    u_xlat47.x = (x_3877 * x_3878);
    let x_3881 : vec2<f32> = u_xlat47;
    let x_3883 : vec4<f32> = u_xlat11;
    let x_3885 : vec3<f32> = (vec3<f32>(x_3881.x, x_3881.x, x_3881.x) * vec3<f32>(x_3883.x, x_3883.y, x_3883.z));
    let x_3886 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3885.x, x_3885.y, x_3885.z, x_3886.w);
    let x_3888 : vec4<f32> = u_xlat9;
    let x_3890 : f32 = u_xlat71;
    let x_3893 : vec3<f32> = u_xlat5;
    let x_3894 : vec3<f32> = ((vec3<f32>(x_3888.x, x_3888.y, x_3888.z) * vec3<f32>(x_3890, x_3890, x_3890)) + x_3893);
    let x_3895 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3894.x, x_3894.y, x_3894.z, x_3895.w);
    let x_3897 : vec4<f32> = u_xlat9;
    let x_3899 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(vec3<f32>(x_3897.x, x_3897.y, x_3897.z), vec3<f32>(x_3899.x, x_3899.y, x_3899.z));
    let x_3904 : f32 = u_xlat47.x;
    u_xlat47.x = max(x_3904, 1.17549435e-37f);
    let x_3908 : f32 = u_xlat47.x;
    u_xlat47.x = inverseSqrt(x_3908);
    let x_3911 : vec2<f32> = u_xlat47;
    let x_3913 : vec4<f32> = u_xlat9;
    let x_3915 : vec3<f32> = (vec3<f32>(x_3911.x, x_3911.x, x_3911.x) * vec3<f32>(x_3913.x, x_3913.y, x_3913.z));
    let x_3916 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3915.x, x_3915.y, x_3915.z, x_3916.w);
    let x_3918 : vec3<f32> = u_xlat22;
    let x_3919 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(x_3918, vec3<f32>(x_3919.x, x_3919.y, x_3919.z));
    let x_3924 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_3924, 0.0f, 1.0f);
    let x_3927 : vec4<f32> = u_xlat10;
    let x_3929 : vec4<f32> = u_xlat9;
    u_xlat47.y = dot(vec3<f32>(x_3927.x, x_3927.y, x_3927.z), vec3<f32>(x_3929.x, x_3929.y, x_3929.z));
    let x_3934 : f32 = u_xlat47.y;
    u_xlat47.y = clamp(x_3934, 0.0f, 1.0f);
    let x_3937 : vec2<f32> = u_xlat47;
    let x_3938 : vec2<f32> = u_xlat47;
    u_xlat47 = (x_3937 * x_3938);
    let x_3941 : f32 = u_xlat47.x;
    let x_3943 : f32 = u_xlat3.x;
    u_xlat47.x = ((x_3941 * x_3943) + 1.000010014f);
    let x_3948 : f32 = u_xlat47.x;
    let x_3950 : f32 = u_xlat47.x;
    u_xlat47.x = (x_3948 * x_3950);
    let x_3954 : f32 = u_xlat47.y;
    u_xlat69 = max(x_3954, 0.100000001f);
    let x_3956 : f32 = u_xlat69;
    let x_3958 : f32 = u_xlat47.x;
    u_xlat47.x = (x_3956 * x_3958);
    let x_3961 : f32 = u_xlat28;
    let x_3963 : f32 = u_xlat47.x;
    u_xlat47.x = (x_3961 * x_3963);
    let x_3966 : f32 = u_xlat70;
    let x_3968 : f32 = u_xlat47.x;
    u_xlat47.x = (x_3966 / x_3968);
    let x_3971 : vec2<f32> = u_xlat47;
    let x_3974 : vec3<f32> = u_xlat7;
    let x_3975 : vec3<f32> = ((vec3<f32>(x_3971.x, x_3971.x, x_3971.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3974);
    let x_3976 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3975.x, x_3975.y, x_3975.z, x_3976.w);
    let x_3978 : vec4<f32> = u_xlat9;
    let x_3980 : vec4<f32> = u_xlat11;
    let x_3983 : vec4<f32> = u_xlat8;
    let x_3985 : vec3<f32> = ((vec3<f32>(x_3978.x, x_3978.y, x_3978.z) * vec3<f32>(x_3980.x, x_3980.y, x_3980.z)) + vec3<f32>(x_3983.x, x_3983.y, x_3983.z));
    let x_3986 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3985.x, x_3985.y, x_3985.z, x_3986.w);

    continuing {
      let x_3988 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3988 + bitcast<u32>(1i));
    }
  }
  let x_3990 : vec3<f32> = u_xlat4;
  let x_3991 : vec4<f32> = u_xlat6;
  let x_3994 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_3990 * vec3<f32>(x_3991.x, x_3991.x, x_3991.x)) + vec3<f32>(x_3994.x, x_3994.y, x_3994.z));
  let x_3997 : vec4<f32> = u_xlat8;
  let x_3999 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3997.x, x_3997.y, x_3997.z) + x_3999);
  let x_4003 : vec4<f32> = vs_INTERP4;
  let x_4005 : vec3<f32> = u_xlat1;
  let x_4007 : vec3<f32> = u_xlat0;
  let x_4008 : vec3<f32> = ((vec3<f32>(x_4003.w, x_4003.w, x_4003.w) * x_4005) + x_4007);
  let x_4009 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4008.x, x_4008.y, x_4008.z, x_4009.w);
  let x_4011 : bool = u_xlatb25;
  let x_4012 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4012, x_4011);
  let x_4018 : u32 = x_160.x_RenderingLayerMaxInt;
  let x_4020 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4018 & bitcast<u32>(x_4020));
  let x_4023 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4023);
  let x_4028 : f32 = u_xlat0.x;
  let x_4030 : f32 = x_160.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4028 * x_4030);
  let x_4034 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4034, 0.0f, 1.0f);
  let x_4037 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4037.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

