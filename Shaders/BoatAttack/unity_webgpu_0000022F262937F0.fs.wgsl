type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var u_xlatb11 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_107 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_109 : vec2<f32> = vs_TEXCOORD0;
  let x_114 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_107.x, x_107.y, x_107.z) * vec3<f32>(x_109.x, x_109.x, x_109.x)) + vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_119 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_121 : vec2<f32> = u_xlat14;
  let x_124 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_119.x, x_119.y, x_119.z) * vec3<f32>(x_121.x, x_121.x, x_121.x)) + x_124);
  let x_128 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_130 : f32 = u_xlat21;
  let x_133 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_128.x, x_128.y, x_128.z) * vec3<f32>(x_130, x_130, x_130)) + x_133);
  let x_136 : vec3<f32> = u_xlat1;
  u_xlat2 = dpdyCoarse(vec3<f32>(x_136.z, x_136.x, x_136.y));
  let x_141 : vec3<f32> = u_xlat1;
  let x_143 : vec3<f32> = dpdxCoarse(vec3<f32>(x_141.y, x_141.z, x_141.x));
  let x_144 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = u_xlat2;
  let x_148 : vec4<f32> = u_xlat3;
  u_xlat4 = (x_147 * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_151 : vec3<f32> = u_xlat2;
  let x_153 : vec4<f32> = u_xlat3;
  let x_156 : vec3<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_151.z, x_151.x, x_151.y) * vec3<f32>(x_153.y, x_153.z, x_153.x)) + -(x_156));
  let x_159 : vec3<f32> = u_xlat2;
  let x_160 : vec3<f32> = u_xlat2;
  u_xlat14.x = dot(x_159, x_160);
  let x_164 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_164);
  let x_167 : vec2<f32> = u_xlat14;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_167.x, x_167.x, x_167.x) * x_169);
  let x_171 : vec2<f32> = vs_TEXCOORD0;
  let x_174 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = (x_171 + vec2<f32>(x_174.z, x_174.w));
  let x_177 : vec2<f32> = u_xlat14;
  let x_179 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  let x_181 : vec2<f32> = (x_177 * vec2<f32>(x_179.x, x_179.y));
  let x_182 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_181.x, x_181.y, x_182.z, x_182.w);
  let x_190 : vec4<f32> = u_xlat3;
  let x_193 : f32 = x_34.x_GlobalMipBias.x;
  let x_194 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_190.x, x_190.y), x_193);
  u_xlat22 = x_194.w;
  let x_197 : f32 = u_xlat22;
  u_xlat23 = fract(x_197);
  let x_199 : f32 = u_xlat23;
  u_xlat3.z = ((x_199 * 2.0f) + -1.0f);
  let x_205 : f32 = u_xlat22;
  u_xlat22 = (x_205 + 0.9296875f);
  let x_208 : f32 = u_xlat22;
  u_xlat22 = (x_208 * 628.31854248f);
  let x_212 : f32 = u_xlat3.z;
  let x_215 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_212) * x_215) + 1.0f);
  let x_218 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_218);
  let x_220 : f32 = u_xlat22;
  u_xlat4.x = sin(x_220);
  let x_224 : f32 = u_xlat22;
  u_xlat5.x = cos(x_224);
  let x_227 : f32 = u_xlat23;
  let x_229 : f32 = u_xlat5.x;
  u_xlat3.x = (x_227 * x_229);
  let x_232 : f32 = u_xlat23;
  let x_234 : f32 = u_xlat4.x;
  u_xlat3.y = (x_232 * x_234);
  let x_237 : vec3<f32> = u_xlat2;
  let x_238 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(x_237, vec3<f32>(x_238.x, x_238.y, x_238.z));
  let x_242 : f32 = u_xlat22;
  u_xlatb22 = (x_242 >= 0.0f);
  let x_244 : bool = u_xlatb22;
  u_xlat22 = select(-1.0f, 1.0f, x_244);
  let x_246 : f32 = u_xlat22;
  let x_248 : vec4<f32> = u_xlat3;
  let x_250 : vec3<f32> = (vec3<f32>(x_246, x_246, x_246) * vec3<f32>(x_248.x, x_248.y, x_248.z));
  let x_251 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_250.x, x_250.y, x_250.z, x_251.w);
  let x_253 : vec4<f32> = u_xlat3;
  let x_256 : vec4<f32> = x_34.x_SSAOParams;
  let x_258 : vec3<f32> = (vec3<f32>(x_253.x, x_253.y, x_253.z) * vec3<f32>(x_256.y, x_256.y, x_256.y));
  let x_259 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec4<f32> = u_xlat3;
  let x_266 : vec3<f32> = u_xlat1;
  let x_267 : vec3<f32> = ((vec3<f32>(x_261.x, x_261.y, x_261.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_266);
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_271 : vec4<f32> = u_xlat3;
  let x_275 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_277 : vec2<f32> = (vec2<f32>(x_271.y, x_271.y) * vec2<f32>(x_275.x, x_275.y));
  let x_278 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_277.x, x_278.y, x_277.y);
  let x_281 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_283 : vec4<f32> = u_xlat3;
  let x_286 : vec3<f32> = u_xlat10;
  let x_288 : vec2<f32> = ((vec2<f32>(x_281.x, x_281.y) * vec2<f32>(x_283.x, x_283.x)) + vec2<f32>(x_286.x, x_286.z));
  let x_289 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_288.x, x_288.y, x_289.z, x_289.w);
  let x_292 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_294 : vec4<f32> = u_xlat3;
  let x_297 : vec4<f32> = u_xlat3;
  let x_299 : vec2<f32> = ((vec2<f32>(x_292.x, x_292.y) * vec2<f32>(x_294.z, x_294.z)) + vec2<f32>(x_297.x, x_297.y));
  let x_300 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
  let x_302 : vec4<f32> = u_xlat3;
  let x_305 : vec2<f32> = (vec2<f32>(x_302.x, x_302.y) + vec2<f32>(1.0f, 1.0f));
  let x_306 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_305.x, x_305.y, x_306.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat3;
  let x_311 : vec2<f32> = (vec2<f32>(x_308.x, x_308.y) * vec2<f32>(0.5f, 0.5f));
  let x_312 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_311.x, x_311.y, x_312.z, x_312.w);
  let x_314 : vec4<f32> = u_xlat3;
  let x_318 : vec2<f32> = clamp(vec2<f32>(x_314.x, x_314.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_319 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_318.x, x_318.y, x_319.z, x_319.w);
  let x_324 : vec4<f32> = u_xlat3;
  let x_327 : f32 = x_34.x_GlobalMipBias.x;
  let x_328 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_324.x, x_324.y), x_327);
  u_xlat22 = x_328.x;
  let x_331 : f32 = u_xlat7.x;
  let x_333 : f32 = u_xlat22;
  let x_336 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_331) * x_333) + x_336);
  let x_339 : f32 = u_xlat0;
  let x_340 : f32 = u_xlat23;
  u_xlat17 = (x_339 + -(x_340));
  let x_344 : f32 = u_xlat17;
  let x_347 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_344) < x_347);
  let x_349 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_349);
  let x_351 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_351);
  let x_353 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_353);
  let x_355 : f32 = u_xlat22;
  let x_356 : f32 = u_xlat17;
  u_xlat22 = (x_355 * x_356);
  let x_359 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_359) + 1.0f);
  let x_363 : f32 = u_xlat23;
  let x_365 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_363 * x_365);
  let x_368 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_370 : vec4<f32> = u_xlat3;
  let x_374 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_376 : vec3<f32> = ((vec3<f32>(x_368.x, x_368.y, x_368.z) * vec3<f32>(x_370.x, x_370.x, x_370.x)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_377 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_376.x, x_377.y, x_376.y, x_376.z);
  let x_380 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_382 : vec3<f32> = u_xlat10;
  let x_385 : vec4<f32> = u_xlat3;
  let x_387 : vec3<f32> = ((vec3<f32>(x_380.x, x_380.y, x_380.z) * vec3<f32>(x_382.x, x_382.x, x_382.x)) + vec3<f32>(x_385.x, x_385.z, x_385.w));
  let x_388 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_387.x, x_387.y, x_387.z, x_388.w);
  let x_391 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_393 : f32 = u_xlat23;
  let x_396 : vec4<f32> = u_xlat3;
  let x_398 : vec3<f32> = ((vec3<f32>(x_391.x, x_391.y, x_391.z) * vec3<f32>(x_393, x_393, x_393)) + vec3<f32>(x_396.x, x_396.y, x_396.z));
  let x_399 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_398.x, x_398.y, x_398.z, x_399.w);
  let x_401 : vec3<f32> = u_xlat1;
  let x_403 : vec4<f32> = u_xlat3;
  let x_405 : vec3<f32> = (-(x_401) + vec3<f32>(x_403.x, x_403.y, x_403.z));
  let x_406 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_405.x, x_405.y, x_405.z, x_406.w);
  let x_408 : vec4<f32> = u_xlat3;
  let x_410 : vec3<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_408.x, x_408.y, x_408.z), x_410);
  let x_412 : f32 = u_xlat0;
  let x_416 : f32 = u_xlat23;
  u_xlat23 = ((-(x_412) * 0.004f) + x_416);
  let x_418 : f32 = u_xlat23;
  u_xlat23 = max(x_418, 0.0f);
  let x_420 : vec4<f32> = u_xlat3;
  let x_422 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_420.x, x_420.y, x_420.z), vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_427 : f32 = u_xlat3.x;
  u_xlat3.x = (x_427 + 0.0001f);
  let x_432 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_432);
  let x_435 : f32 = u_xlat23;
  let x_437 : f32 = u_xlat3.x;
  u_xlat23 = (x_435 * x_437);
  let x_439 : vec2<f32> = u_xlat14;
  let x_442 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_439.x, x_439.y, x_439.x, x_439.y) * vec4<f32>(x_442.x, x_442.y, x_442.x, x_442.y)) + vec4<f32>(0.083333336f, 0.083333336f, 0.166666672f, 0.166666672f));
  let x_452 : vec4<f32> = u_xlat3;
  let x_455 : f32 = x_34.x_GlobalMipBias.x;
  let x_456 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_452.x, x_452.y), x_455);
  u_xlat3.x = x_456.w;
  let x_459 : vec4<f32> = u_xlat3;
  let x_464 : vec2<f32> = (vec2<f32>(x_459.x, x_459.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_465 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_464.x, x_464.y, x_465.z, x_465.w);
  let x_468 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_468);
  let x_472 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_472 * 2.0f) + -1.0f);
  let x_477 : f32 = u_xlat3.y;
  u_xlat3.x = (x_477 * 628.31854248f);
  let x_481 : f32 = u_xlat4.z;
  let x_484 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_481) * x_484) + 1.0f);
  let x_489 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_489);
  let x_493 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_493);
  let x_497 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_497);
  let x_501 : f32 = u_xlat10.x;
  let x_503 : f32 = u_xlat5.x;
  u_xlat4.x = (x_501 * x_503);
  let x_507 : f32 = u_xlat3.x;
  let x_509 : f32 = u_xlat10.x;
  u_xlat4.y = (x_507 * x_509);
  let x_512 : vec3<f32> = u_xlat2;
  let x_513 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(x_512, x_513);
  let x_518 : f32 = u_xlat3.x;
  u_xlatb3 = (x_518 >= 0.0f);
  let x_520 : bool = u_xlatb3;
  u_xlat3.x = select(-1.0f, 1.0f, x_520);
  let x_523 : vec4<f32> = u_xlat3;
  let x_525 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_523.x, x_523.x, x_523.x) * x_525);
  let x_527 : vec3<f32> = u_xlat4;
  let x_529 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_527 * vec3<f32>(x_529.y, x_529.y, x_529.y));
  let x_532 : vec3<f32> = u_xlat4;
  let x_536 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_532 * vec3<f32>(0.106250003f, 0.106250003f, 0.106250003f)) + x_536);
  let x_538 : vec3<f32> = u_xlat4;
  let x_541 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_543 : vec2<f32> = (vec2<f32>(x_538.y, x_538.y) * vec2<f32>(x_541.x, x_541.y));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_544.z, x_544.w);
  let x_547 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_549 : vec3<f32> = u_xlat4;
  let x_552 : vec4<f32> = u_xlat3;
  let x_554 : vec2<f32> = ((vec2<f32>(x_547.x, x_547.y) * vec2<f32>(x_549.x, x_549.x)) + vec2<f32>(x_552.x, x_552.y));
  let x_555 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_554.x, x_554.y, x_555.z, x_555.w);
  let x_558 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_560 : vec3<f32> = u_xlat4;
  let x_563 : vec4<f32> = u_xlat3;
  let x_565 : vec2<f32> = ((vec2<f32>(x_558.x, x_558.y) * vec2<f32>(x_560.z, x_560.z)) + vec2<f32>(x_563.x, x_563.y));
  let x_566 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_565.x, x_565.y, x_566.z, x_566.w);
  let x_568 : vec4<f32> = u_xlat3;
  let x_570 : vec2<f32> = (vec2<f32>(x_568.x, x_568.y) + vec2<f32>(1.0f, 1.0f));
  let x_571 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_570.x, x_570.y, x_571.z, x_571.w);
  let x_573 : vec4<f32> = u_xlat3;
  let x_575 : vec2<f32> = (vec2<f32>(x_573.x, x_573.y) * vec2<f32>(0.5f, 0.5f));
  let x_576 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_575.x, x_575.y, x_576.z, x_576.w);
  let x_578 : vec4<f32> = u_xlat3;
  let x_582 : vec2<f32> = clamp(vec2<f32>(x_578.x, x_578.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_583 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_582.x, x_582.y, x_583.z, x_583.w);
  let x_588 : vec4<f32> = u_xlat3;
  let x_591 : f32 = x_34.x_GlobalMipBias.x;
  let x_592 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_588.x, x_588.y), x_591);
  u_xlat4.x = x_592.x;
  let x_597 : f32 = u_xlat7.x;
  let x_600 : f32 = u_xlat4.x;
  let x_603 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_597) * x_600) + x_603);
  let x_607 : f32 = u_xlat0;
  let x_609 : f32 = u_xlat11.x;
  u_xlat18 = (x_607 + -(x_609));
  let x_615 : f32 = u_xlat18;
  let x_618 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_615) < x_618);
  let x_622 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_622);
  let x_626 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_626);
  let x_630 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_630);
  let x_634 : f32 = u_xlat4.x;
  let x_636 : f32 = u_xlat4.z;
  u_xlat4.x = (x_634 * x_636);
  let x_640 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_640) + 1.0f);
  let x_645 : f32 = u_xlat11.x;
  let x_647 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_645 * x_647);
  let x_651 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_653 : vec4<f32> = u_xlat3;
  let x_657 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_651.x, x_651.y, x_651.z) * vec3<f32>(x_653.x, x_653.x, x_653.x)) + vec3<f32>(x_657.x, x_657.y, x_657.z));
  let x_661 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_663 : vec3<f32> = u_xlat10;
  let x_666 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_661.x, x_661.y, x_661.z) * vec3<f32>(x_663.x, x_663.x, x_663.x)) + x_666);
  let x_669 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_671 : vec3<f32> = u_xlat11;
  let x_674 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_669.x, x_669.y, x_669.z) * vec3<f32>(x_671.x, x_671.x, x_671.x)) + x_674);
  let x_676 : vec3<f32> = u_xlat1;
  let x_678 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_676) + x_678);
  let x_680 : vec3<f32> = u_xlat11;
  let x_681 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_680, x_681);
  let x_684 : f32 = u_xlat0;
  let x_688 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_684) * 0.004f) + x_688);
  let x_692 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_692, 0.0f);
  let x_695 : vec3<f32> = u_xlat11;
  let x_696 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_695, x_696);
  let x_700 : f32 = u_xlat10.x;
  u_xlat10.x = (x_700 + 0.0001f);
  let x_704 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_704);
  let x_708 : f32 = u_xlat10.x;
  let x_710 : f32 = u_xlat3.x;
  u_xlat3.x = (x_708 * x_710);
  let x_714 : f32 = u_xlat4.x;
  let x_716 : f32 = u_xlat3.x;
  u_xlat3.x = (x_714 * x_716);
  let x_719 : f32 = u_xlat23;
  let x_720 : f32 = u_xlat22;
  let x_723 : f32 = u_xlat3.x;
  u_xlat22 = ((x_719 * x_720) + x_723);
  let x_728 : vec4<f32> = u_xlat3;
  let x_731 : f32 = x_34.x_GlobalMipBias.x;
  let x_732 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_728.z, x_728.w), x_731);
  u_xlat23 = x_732.w;
  let x_734 : f32 = u_xlat23;
  let x_739 : vec2<f32> = (vec2<f32>(x_734, x_734) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_740 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
  let x_743 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_743);
  let x_745 : f32 = u_xlat23;
  u_xlat4.z = ((x_745 * 2.0f) + -1.0f);
  let x_750 : f32 = u_xlat3.y;
  u_xlat23 = (x_750 * 628.31854248f);
  let x_753 : f32 = u_xlat4.z;
  let x_756 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_753) * x_756) + 1.0f);
  let x_761 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_761);
  let x_764 : f32 = u_xlat23;
  u_xlat5.x = sin(x_764);
  let x_768 : f32 = u_xlat23;
  u_xlat6 = cos(x_768);
  let x_771 : f32 = u_xlat3.x;
  let x_772 : f32 = u_xlat6;
  u_xlat4.x = (x_771 * x_772);
  let x_776 : f32 = u_xlat3.x;
  let x_778 : f32 = u_xlat5.x;
  u_xlat4.y = (x_776 * x_778);
  let x_781 : vec3<f32> = u_xlat2;
  let x_782 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_781, x_782);
  let x_785 : f32 = u_xlat23;
  u_xlatb23 = (x_785 >= 0.0f);
  let x_787 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_787);
  let x_789 : f32 = u_xlat23;
  let x_791 : vec3<f32> = u_xlat4;
  let x_792 : vec3<f32> = (vec3<f32>(x_789, x_789, x_789) * x_791);
  let x_793 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_792.x, x_792.y, x_792.z, x_793.w);
  let x_795 : vec4<f32> = u_xlat3;
  let x_798 : vec4<f32> = x_34.x_SSAOParams;
  let x_800 : vec3<f32> = (vec3<f32>(x_795.x, x_795.y, x_795.z) * vec3<f32>(x_798.y, x_798.y, x_798.y));
  let x_801 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_800.x, x_800.y, x_800.z, x_801.w);
  let x_803 : vec4<f32> = u_xlat3;
  let x_808 : vec3<f32> = u_xlat1;
  let x_809 : vec3<f32> = ((vec3<f32>(x_803.x, x_803.y, x_803.z) * vec3<f32>(0.125f, 0.125f, 0.125f)) + x_808);
  let x_810 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_809.x, x_809.y, x_809.z, x_810.w);
  let x_812 : vec4<f32> = u_xlat3;
  let x_815 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_817 : vec2<f32> = (vec2<f32>(x_812.y, x_812.y) * vec2<f32>(x_815.x, x_815.y));
  let x_818 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_817.x, x_818.y, x_817.y);
  let x_821 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_823 : vec4<f32> = u_xlat3;
  let x_826 : vec3<f32> = u_xlat10;
  let x_828 : vec2<f32> = ((vec2<f32>(x_821.x, x_821.y) * vec2<f32>(x_823.x, x_823.x)) + vec2<f32>(x_826.x, x_826.z));
  let x_829 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_828.x, x_828.y, x_829.z, x_829.w);
  let x_832 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_834 : vec4<f32> = u_xlat3;
  let x_837 : vec4<f32> = u_xlat3;
  let x_839 : vec2<f32> = ((vec2<f32>(x_832.x, x_832.y) * vec2<f32>(x_834.z, x_834.z)) + vec2<f32>(x_837.x, x_837.y));
  let x_840 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_839.x, x_839.y, x_840.z, x_840.w);
  let x_842 : vec4<f32> = u_xlat3;
  let x_844 : vec2<f32> = (vec2<f32>(x_842.x, x_842.y) + vec2<f32>(1.0f, 1.0f));
  let x_845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_844.x, x_844.y, x_845.z, x_845.w);
  let x_847 : vec4<f32> = u_xlat3;
  let x_849 : vec2<f32> = (vec2<f32>(x_847.x, x_847.y) * vec2<f32>(0.5f, 0.5f));
  let x_850 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_849.x, x_849.y, x_850.z, x_850.w);
  let x_852 : vec4<f32> = u_xlat3;
  let x_856 : vec2<f32> = clamp(vec2<f32>(x_852.x, x_852.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_857 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_856.x, x_856.y, x_857.z, x_857.w);
  let x_862 : vec4<f32> = u_xlat3;
  let x_865 : f32 = x_34.x_GlobalMipBias.x;
  let x_866 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_862.x, x_862.y), x_865);
  u_xlat23 = x_866.x;
  let x_869 : f32 = u_xlat7.x;
  let x_871 : f32 = u_xlat23;
  let x_874 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_869) * x_871) + x_874);
  let x_877 : f32 = u_xlat0;
  let x_878 : f32 = u_xlat17;
  u_xlat24 = (x_877 + -(x_878));
  let x_882 : f32 = u_xlat24;
  let x_885 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_882) < x_885);
  let x_887 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_887);
  let x_889 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_889);
  let x_891 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_891);
  let x_893 : f32 = u_xlat23;
  let x_894 : f32 = u_xlat24;
  u_xlat23 = (x_893 * x_894);
  let x_897 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_897) + 1.0f);
  let x_901 : f32 = u_xlat17;
  let x_903 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_901 * x_903);
  let x_906 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_908 : vec4<f32> = u_xlat3;
  let x_912 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_906.x, x_906.y, x_906.z) * vec3<f32>(x_908.x, x_908.x, x_908.x)) + vec3<f32>(x_912.x, x_912.y, x_912.z));
  let x_916 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_918 : vec3<f32> = u_xlat10;
  let x_921 : vec3<f32> = u_xlat4;
  let x_922 : vec3<f32> = ((vec3<f32>(x_916.x, x_916.y, x_916.z) * vec3<f32>(x_918.x, x_918.x, x_918.x)) + x_921);
  let x_923 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_922.z);
  let x_926 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_928 : f32 = u_xlat17;
  let x_931 : vec4<f32> = u_xlat3;
  let x_933 : vec3<f32> = ((vec3<f32>(x_926.x, x_926.y, x_926.z) * vec3<f32>(x_928, x_928, x_928)) + vec3<f32>(x_931.x, x_931.y, x_931.w));
  let x_934 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_933.x, x_933.y, x_933.z, x_934.w);
  let x_936 : vec3<f32> = u_xlat1;
  let x_938 : vec4<f32> = u_xlat3;
  let x_940 : vec3<f32> = (-(x_936) + vec3<f32>(x_938.x, x_938.y, x_938.z));
  let x_941 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_940.x, x_940.y, x_940.z, x_941.w);
  let x_943 : vec4<f32> = u_xlat3;
  let x_945 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_943.x, x_943.y, x_943.z), x_945);
  let x_947 : f32 = u_xlat0;
  let x_950 : f32 = u_xlat24;
  u_xlat24 = ((-(x_947) * 0.004f) + x_950);
  let x_952 : f32 = u_xlat24;
  u_xlat24 = max(x_952, 0.0f);
  let x_954 : vec4<f32> = u_xlat3;
  let x_956 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_954.x, x_954.y, x_954.z), vec3<f32>(x_956.x, x_956.y, x_956.z));
  let x_961 : f32 = u_xlat3.x;
  u_xlat3.x = (x_961 + 0.0001f);
  let x_965 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_965);
  let x_969 : f32 = u_xlat3.x;
  let x_970 : f32 = u_xlat24;
  u_xlat3.x = (x_969 * x_970);
  let x_974 : f32 = u_xlat3.x;
  let x_975 : f32 = u_xlat23;
  let x_977 : f32 = u_xlat22;
  u_xlat22 = ((x_974 * x_975) + x_977);
  let x_979 : vec2<f32> = u_xlat14;
  let x_982 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_979.x, x_979.y, x_979.x, x_979.y) * vec4<f32>(x_982.x, x_982.y, x_982.x, x_982.y)) + vec4<f32>(0.25f, 0.25f, 0.333333343f, 0.333333343f));
  let x_992 : vec4<f32> = u_xlat3;
  let x_995 : f32 = x_34.x_GlobalMipBias.x;
  let x_996 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_992.x, x_992.y), x_995);
  u_xlat23 = x_996.w;
  let x_998 : f32 = u_xlat23;
  let x_1003 : vec2<f32> = (vec2<f32>(x_998, x_998) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1004 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1003.x, x_1003.y, x_1004.z, x_1004.w);
  let x_1007 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1007);
  let x_1009 : f32 = u_xlat23;
  u_xlat4.z = ((x_1009 * 2.0f) + -1.0f);
  let x_1014 : f32 = u_xlat3.y;
  u_xlat23 = (x_1014 * 628.31854248f);
  let x_1017 : f32 = u_xlat4.z;
  let x_1020 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1017) * x_1020) + 1.0f);
  let x_1025 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1025);
  let x_1028 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1028);
  let x_1031 : f32 = u_xlat23;
  u_xlat6 = cos(x_1031);
  let x_1034 : f32 = u_xlat3.x;
  let x_1035 : f32 = u_xlat6;
  u_xlat4.x = (x_1034 * x_1035);
  let x_1039 : f32 = u_xlat3.x;
  let x_1041 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1039 * x_1041);
  let x_1044 : vec3<f32> = u_xlat2;
  let x_1045 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1044, x_1045);
  let x_1047 : f32 = u_xlat23;
  u_xlatb23 = (x_1047 >= 0.0f);
  let x_1049 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1049);
  let x_1051 : f32 = u_xlat23;
  let x_1053 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1051, x_1051, x_1051) * x_1053);
  let x_1055 : vec3<f32> = u_xlat4;
  let x_1057 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1055 * vec3<f32>(x_1057.y, x_1057.y, x_1057.y));
  let x_1060 : vec3<f32> = u_xlat4;
  let x_1064 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1060 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1064);
  let x_1066 : vec3<f32> = u_xlat4;
  let x_1069 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1071 : vec2<f32> = (vec2<f32>(x_1066.y, x_1066.y) * vec2<f32>(x_1069.x, x_1069.y));
  let x_1072 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1071.x, x_1071.y, x_1072.z, x_1072.w);
  let x_1075 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1077 : vec3<f32> = u_xlat4;
  let x_1080 : vec4<f32> = u_xlat3;
  let x_1082 : vec2<f32> = ((vec2<f32>(x_1075.x, x_1075.y) * vec2<f32>(x_1077.x, x_1077.x)) + vec2<f32>(x_1080.x, x_1080.y));
  let x_1083 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1082.x, x_1082.y, x_1083.z, x_1083.w);
  let x_1086 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1088 : vec3<f32> = u_xlat4;
  let x_1091 : vec4<f32> = u_xlat3;
  let x_1093 : vec2<f32> = ((vec2<f32>(x_1086.x, x_1086.y) * vec2<f32>(x_1088.z, x_1088.z)) + vec2<f32>(x_1091.x, x_1091.y));
  let x_1094 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1093.x, x_1093.y, x_1094.z, x_1094.w);
  let x_1096 : vec4<f32> = u_xlat3;
  let x_1098 : vec2<f32> = (vec2<f32>(x_1096.x, x_1096.y) + vec2<f32>(1.0f, 1.0f));
  let x_1099 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1098.x, x_1098.y, x_1099.z, x_1099.w);
  let x_1101 : vec4<f32> = u_xlat3;
  let x_1103 : vec2<f32> = (vec2<f32>(x_1101.x, x_1101.y) * vec2<f32>(0.5f, 0.5f));
  let x_1104 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1103.x, x_1103.y, x_1104.z, x_1104.w);
  let x_1106 : vec4<f32> = u_xlat3;
  let x_1110 : vec2<f32> = clamp(vec2<f32>(x_1106.x, x_1106.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1111 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1110.x, x_1110.y, x_1111.z, x_1111.w);
  let x_1116 : vec4<f32> = u_xlat3;
  let x_1119 : f32 = x_34.x_GlobalMipBias.x;
  let x_1120 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1116.x, x_1116.y), x_1119);
  u_xlat23 = x_1120.x;
  let x_1123 : f32 = u_xlat7.x;
  let x_1125 : f32 = u_xlat23;
  let x_1128 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1123) * x_1125) + x_1128);
  let x_1131 : f32 = u_xlat0;
  let x_1133 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1131 + -(x_1133));
  let x_1139 : f32 = u_xlat11.x;
  let x_1142 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1139) < x_1142);
  let x_1144 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1144);
  let x_1147 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1147);
  let x_1149 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1149);
  let x_1151 : f32 = u_xlat23;
  let x_1153 : f32 = u_xlat11.x;
  u_xlat23 = (x_1151 * x_1153);
  let x_1156 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1156) + 1.0f);
  let x_1161 : f32 = u_xlat4.x;
  let x_1163 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1161 * x_1163);
  let x_1167 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1169 : vec4<f32> = u_xlat3;
  let x_1173 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1167.x, x_1167.y, x_1167.z) * vec3<f32>(x_1169.x, x_1169.x, x_1169.x)) + vec3<f32>(x_1173.x, x_1173.y, x_1173.z));
  let x_1177 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1179 : vec3<f32> = u_xlat10;
  let x_1182 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1177.x, x_1177.y, x_1177.z) * vec3<f32>(x_1179.x, x_1179.x, x_1179.x)) + x_1182);
  let x_1185 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1187 : vec3<f32> = u_xlat4;
  let x_1190 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1185.x, x_1185.y, x_1185.z) * vec3<f32>(x_1187.x, x_1187.x, x_1187.x)) + x_1190);
  let x_1192 : vec3<f32> = u_xlat1;
  let x_1194 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1192) + x_1194);
  let x_1196 : vec3<f32> = u_xlat4;
  let x_1197 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_1196, x_1197);
  let x_1200 : f32 = u_xlat0;
  let x_1204 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1200) * 0.004f) + x_1204);
  let x_1208 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1208, 0.0f);
  let x_1211 : vec3<f32> = u_xlat4;
  let x_1212 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1211, x_1212);
  let x_1216 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1216 + 0.0001f);
  let x_1220 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1220);
  let x_1224 : f32 = u_xlat10.x;
  let x_1226 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1224 * x_1226);
  let x_1230 : f32 = u_xlat3.x;
  let x_1231 : f32 = u_xlat23;
  let x_1233 : f32 = u_xlat22;
  u_xlat22 = ((x_1230 * x_1231) + x_1233);
  let x_1238 : vec4<f32> = u_xlat3;
  let x_1241 : f32 = x_34.x_GlobalMipBias.x;
  let x_1242 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1238.z, x_1238.w), x_1241);
  u_xlat23 = x_1242.w;
  let x_1244 : f32 = u_xlat23;
  u_xlat3.x = (x_1244 + 0.984375f);
  let x_1249 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1249);
  let x_1253 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1253 * 2.0f) + -1.0f);
  let x_1257 : f32 = u_xlat23;
  u_xlat23 = (x_1257 * 628.31854248f);
  let x_1260 : f32 = u_xlat3.z;
  let x_1263 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1260) * x_1263) + 1.0f);
  let x_1266 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1266);
  let x_1268 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1268);
  let x_1271 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1271);
  let x_1274 : f32 = u_xlat24;
  let x_1276 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1274 * x_1276);
  let x_1279 : f32 = u_xlat24;
  let x_1281 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1279 * x_1281);
  let x_1284 : vec3<f32> = u_xlat2;
  let x_1285 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(x_1284, vec3<f32>(x_1285.x, x_1285.y, x_1285.z));
  let x_1288 : f32 = u_xlat23;
  u_xlatb23 = (x_1288 >= 0.0f);
  let x_1290 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1290);
  let x_1292 : f32 = u_xlat23;
  let x_1294 : vec4<f32> = u_xlat3;
  let x_1296 : vec3<f32> = (vec3<f32>(x_1292, x_1292, x_1292) * vec3<f32>(x_1294.x, x_1294.y, x_1294.z));
  let x_1297 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1296.x, x_1296.y, x_1296.z, x_1297.w);
  let x_1299 : vec4<f32> = u_xlat3;
  let x_1302 : vec4<f32> = x_34.x_SSAOParams;
  let x_1304 : vec3<f32> = (vec3<f32>(x_1299.x, x_1299.y, x_1299.z) * vec3<f32>(x_1302.y, x_1302.y, x_1302.y));
  let x_1305 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1304.x, x_1304.y, x_1304.z, x_1305.w);
  let x_1307 : vec4<f32> = u_xlat3;
  let x_1312 : vec3<f32> = u_xlat1;
  let x_1313 : vec3<f32> = ((vec3<f32>(x_1307.x, x_1307.y, x_1307.z) * vec3<f32>(0.200000003f, 0.200000003f, 0.200000003f)) + x_1312);
  let x_1314 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1313.x, x_1313.y, x_1313.z, x_1314.w);
  let x_1316 : vec4<f32> = u_xlat3;
  let x_1319 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1321 : vec2<f32> = (vec2<f32>(x_1316.y, x_1316.y) * vec2<f32>(x_1319.x, x_1319.y));
  let x_1322 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1321.x, x_1322.y, x_1321.y);
  let x_1325 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1327 : vec4<f32> = u_xlat3;
  let x_1330 : vec3<f32> = u_xlat10;
  let x_1332 : vec2<f32> = ((vec2<f32>(x_1325.x, x_1325.y) * vec2<f32>(x_1327.x, x_1327.x)) + vec2<f32>(x_1330.x, x_1330.z));
  let x_1333 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1332.x, x_1332.y, x_1333.z, x_1333.w);
  let x_1336 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1338 : vec4<f32> = u_xlat3;
  let x_1341 : vec4<f32> = u_xlat3;
  let x_1343 : vec2<f32> = ((vec2<f32>(x_1336.x, x_1336.y) * vec2<f32>(x_1338.z, x_1338.z)) + vec2<f32>(x_1341.x, x_1341.y));
  let x_1344 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1343.x, x_1343.y, x_1344.z, x_1344.w);
  let x_1346 : vec4<f32> = u_xlat3;
  let x_1348 : vec2<f32> = (vec2<f32>(x_1346.x, x_1346.y) + vec2<f32>(1.0f, 1.0f));
  let x_1349 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1348.x, x_1348.y, x_1349.z, x_1349.w);
  let x_1351 : vec4<f32> = u_xlat3;
  let x_1353 : vec2<f32> = (vec2<f32>(x_1351.x, x_1351.y) * vec2<f32>(0.5f, 0.5f));
  let x_1354 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1353.x, x_1353.y, x_1354.z, x_1354.w);
  let x_1356 : vec4<f32> = u_xlat3;
  let x_1360 : vec2<f32> = clamp(vec2<f32>(x_1356.x, x_1356.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1361 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1360.x, x_1360.y, x_1361.z, x_1361.w);
  let x_1366 : vec4<f32> = u_xlat3;
  let x_1369 : f32 = x_34.x_GlobalMipBias.x;
  let x_1370 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1366.x, x_1366.y), x_1369);
  u_xlat23 = x_1370.x;
  let x_1373 : f32 = u_xlat7.x;
  let x_1375 : f32 = u_xlat23;
  let x_1378 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1373) * x_1375) + x_1378);
  let x_1380 : f32 = u_xlat0;
  let x_1381 : f32 = u_xlat17;
  u_xlat24 = (x_1380 + -(x_1381));
  let x_1384 : f32 = u_xlat24;
  let x_1387 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1384) < x_1387);
  let x_1389 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1389);
  let x_1391 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1391);
  let x_1393 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1393);
  let x_1395 : f32 = u_xlat23;
  let x_1396 : f32 = u_xlat24;
  u_xlat23 = (x_1395 * x_1396);
  let x_1399 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1399) + 1.0f);
  let x_1403 : f32 = u_xlat17;
  let x_1405 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1403 * x_1405);
  let x_1408 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1410 : vec4<f32> = u_xlat3;
  let x_1414 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1408.x, x_1408.y, x_1408.z) * vec3<f32>(x_1410.x, x_1410.x, x_1410.x)) + vec3<f32>(x_1414.x, x_1414.y, x_1414.z));
  let x_1418 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1420 : vec3<f32> = u_xlat10;
  let x_1423 : vec3<f32> = u_xlat4;
  let x_1424 : vec3<f32> = ((vec3<f32>(x_1418.x, x_1418.y, x_1418.z) * vec3<f32>(x_1420.x, x_1420.x, x_1420.x)) + x_1423);
  let x_1425 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1424.x, x_1424.y, x_1425.z, x_1424.z);
  let x_1428 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1430 : f32 = u_xlat17;
  let x_1433 : vec4<f32> = u_xlat3;
  let x_1435 : vec3<f32> = ((vec3<f32>(x_1428.x, x_1428.y, x_1428.z) * vec3<f32>(x_1430, x_1430, x_1430)) + vec3<f32>(x_1433.x, x_1433.y, x_1433.w));
  let x_1436 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1435.x, x_1435.y, x_1435.z, x_1436.w);
  let x_1438 : vec3<f32> = u_xlat1;
  let x_1440 : vec4<f32> = u_xlat3;
  let x_1442 : vec3<f32> = (-(x_1438) + vec3<f32>(x_1440.x, x_1440.y, x_1440.z));
  let x_1443 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1442.x, x_1442.y, x_1442.z, x_1443.w);
  let x_1445 : vec4<f32> = u_xlat3;
  let x_1447 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1445.x, x_1445.y, x_1445.z), x_1447);
  let x_1449 : f32 = u_xlat0;
  let x_1452 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1449) * 0.004f) + x_1452);
  let x_1454 : f32 = u_xlat24;
  u_xlat24 = max(x_1454, 0.0f);
  let x_1456 : vec4<f32> = u_xlat3;
  let x_1458 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1456.x, x_1456.y, x_1456.z), vec3<f32>(x_1458.x, x_1458.y, x_1458.z));
  let x_1463 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1463 + 0.0001f);
  let x_1467 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1467);
  let x_1471 : f32 = u_xlat3.x;
  let x_1472 : f32 = u_xlat24;
  u_xlat3.x = (x_1471 * x_1472);
  let x_1476 : f32 = u_xlat3.x;
  let x_1477 : f32 = u_xlat23;
  let x_1479 : f32 = u_xlat22;
  u_xlat22 = ((x_1476 * x_1477) + x_1479);
  let x_1481 : vec2<f32> = u_xlat14;
  let x_1484 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1481.x, x_1481.y, x_1481.x, x_1481.y) * vec4<f32>(x_1484.x, x_1484.y, x_1484.x, x_1484.y)) + vec4<f32>(0.416666687f, 0.416666687f, 0.5f, 0.5f));
  let x_1493 : vec4<f32> = u_xlat3;
  let x_1496 : f32 = x_34.x_GlobalMipBias.x;
  let x_1497 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1493.x, x_1493.y), x_1496);
  u_xlat23 = x_1497.w;
  let x_1499 : f32 = u_xlat23;
  let x_1504 : vec2<f32> = (vec2<f32>(x_1499, x_1499) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1505 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1504.x, x_1504.y, x_1505.z, x_1505.w);
  let x_1508 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1508);
  let x_1510 : f32 = u_xlat23;
  u_xlat4.z = ((x_1510 * 2.0f) + -1.0f);
  let x_1515 : f32 = u_xlat3.y;
  u_xlat23 = (x_1515 * 628.31854248f);
  let x_1518 : f32 = u_xlat4.z;
  let x_1521 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1518) * x_1521) + 1.0f);
  let x_1526 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1526);
  let x_1529 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1529);
  let x_1532 : f32 = u_xlat23;
  u_xlat6 = cos(x_1532);
  let x_1535 : f32 = u_xlat3.x;
  let x_1536 : f32 = u_xlat6;
  u_xlat4.x = (x_1535 * x_1536);
  let x_1540 : f32 = u_xlat3.x;
  let x_1542 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1540 * x_1542);
  let x_1545 : vec3<f32> = u_xlat2;
  let x_1546 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1545, x_1546);
  let x_1548 : f32 = u_xlat23;
  u_xlatb23 = (x_1548 >= 0.0f);
  let x_1550 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1550);
  let x_1552 : f32 = u_xlat23;
  let x_1554 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1552, x_1552, x_1552) * x_1554);
  let x_1556 : vec3<f32> = u_xlat4;
  let x_1558 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1556 * vec3<f32>(x_1558.y, x_1558.y, x_1558.y));
  let x_1561 : vec3<f32> = u_xlat4;
  let x_1565 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1561 * vec3<f32>(0.256250024f, 0.256250024f, 0.256250024f)) + x_1565);
  let x_1567 : vec3<f32> = u_xlat4;
  let x_1570 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1572 : vec2<f32> = (vec2<f32>(x_1567.y, x_1567.y) * vec2<f32>(x_1570.x, x_1570.y));
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1572.x, x_1572.y, x_1573.z, x_1573.w);
  let x_1576 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1578 : vec3<f32> = u_xlat4;
  let x_1581 : vec4<f32> = u_xlat3;
  let x_1583 : vec2<f32> = ((vec2<f32>(x_1576.x, x_1576.y) * vec2<f32>(x_1578.x, x_1578.x)) + vec2<f32>(x_1581.x, x_1581.y));
  let x_1584 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1583.x, x_1583.y, x_1584.z, x_1584.w);
  let x_1587 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1589 : vec3<f32> = u_xlat4;
  let x_1592 : vec4<f32> = u_xlat3;
  let x_1594 : vec2<f32> = ((vec2<f32>(x_1587.x, x_1587.y) * vec2<f32>(x_1589.z, x_1589.z)) + vec2<f32>(x_1592.x, x_1592.y));
  let x_1595 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1594.x, x_1594.y, x_1595.z, x_1595.w);
  let x_1597 : vec4<f32> = u_xlat3;
  let x_1599 : vec2<f32> = (vec2<f32>(x_1597.x, x_1597.y) + vec2<f32>(1.0f, 1.0f));
  let x_1600 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1599.x, x_1599.y, x_1600.z, x_1600.w);
  let x_1602 : vec4<f32> = u_xlat3;
  let x_1604 : vec2<f32> = (vec2<f32>(x_1602.x, x_1602.y) * vec2<f32>(0.5f, 0.5f));
  let x_1605 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1604.x, x_1604.y, x_1605.z, x_1605.w);
  let x_1607 : vec4<f32> = u_xlat3;
  let x_1611 : vec2<f32> = clamp(vec2<f32>(x_1607.x, x_1607.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1612 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1611.x, x_1611.y, x_1612.z, x_1612.w);
  let x_1617 : vec4<f32> = u_xlat3;
  let x_1620 : f32 = x_34.x_GlobalMipBias.x;
  let x_1621 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1617.x, x_1617.y), x_1620);
  u_xlat23 = x_1621.x;
  let x_1624 : f32 = u_xlat7.x;
  let x_1626 : f32 = u_xlat23;
  let x_1629 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1624) * x_1626) + x_1629);
  let x_1632 : f32 = u_xlat0;
  let x_1634 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1632 + -(x_1634));
  let x_1639 : f32 = u_xlat11.x;
  let x_1642 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1639) < x_1642);
  let x_1644 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1644);
  let x_1647 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1647);
  let x_1649 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1649);
  let x_1651 : f32 = u_xlat23;
  let x_1653 : f32 = u_xlat11.x;
  u_xlat23 = (x_1651 * x_1653);
  let x_1656 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1656) + 1.0f);
  let x_1661 : f32 = u_xlat4.x;
  let x_1663 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1661 * x_1663);
  let x_1667 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1669 : vec4<f32> = u_xlat3;
  let x_1673 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1667.x, x_1667.y, x_1667.z) * vec3<f32>(x_1669.x, x_1669.x, x_1669.x)) + vec3<f32>(x_1673.x, x_1673.y, x_1673.z));
  let x_1677 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1679 : vec3<f32> = u_xlat10;
  let x_1682 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1677.x, x_1677.y, x_1677.z) * vec3<f32>(x_1679.x, x_1679.x, x_1679.x)) + x_1682);
  let x_1685 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1687 : vec3<f32> = u_xlat4;
  let x_1690 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1685.x, x_1685.y, x_1685.z) * vec3<f32>(x_1687.x, x_1687.x, x_1687.x)) + x_1690);
  let x_1692 : vec3<f32> = u_xlat1;
  let x_1694 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1692) + x_1694);
  let x_1696 : vec3<f32> = u_xlat4;
  let x_1697 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_1696, x_1697);
  let x_1700 : f32 = u_xlat0;
  let x_1704 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1700) * 0.004f) + x_1704);
  let x_1708 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1708, 0.0f);
  let x_1711 : vec3<f32> = u_xlat4;
  let x_1712 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1711, x_1712);
  let x_1716 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1716 + 0.0001f);
  let x_1720 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1720);
  let x_1724 : f32 = u_xlat10.x;
  let x_1726 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1724 * x_1726);
  let x_1730 : f32 = u_xlat3.x;
  let x_1731 : f32 = u_xlat23;
  let x_1733 : f32 = u_xlat22;
  u_xlat22 = ((x_1730 * x_1731) + x_1733);
  let x_1738 : vec4<f32> = u_xlat3;
  let x_1741 : f32 = x_34.x_GlobalMipBias.x;
  let x_1742 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1738.z, x_1738.w), x_1741);
  u_xlat23 = x_1742.w;
  let x_1744 : f32 = u_xlat23;
  let x_1749 : vec2<f32> = (vec2<f32>(x_1744, x_1744) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1750 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1749.x, x_1749.y, x_1750.z, x_1750.w);
  let x_1753 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1753);
  let x_1755 : f32 = u_xlat23;
  u_xlat4.z = ((x_1755 * 2.0f) + -1.0f);
  let x_1760 : f32 = u_xlat3.y;
  u_xlat23 = (x_1760 * 628.31854248f);
  let x_1763 : f32 = u_xlat4.z;
  let x_1766 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1763) * x_1766) + 1.0f);
  let x_1771 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1771);
  let x_1774 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1774);
  let x_1777 : f32 = u_xlat23;
  u_xlat6 = cos(x_1777);
  let x_1780 : f32 = u_xlat3.x;
  let x_1781 : f32 = u_xlat6;
  u_xlat4.x = (x_1780 * x_1781);
  let x_1785 : f32 = u_xlat3.x;
  let x_1787 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1785 * x_1787);
  let x_1790 : vec3<f32> = u_xlat2;
  let x_1791 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1790, x_1791);
  let x_1793 : f32 = u_xlat23;
  u_xlatb23 = (x_1793 >= 0.0f);
  let x_1795 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1795);
  let x_1797 : f32 = u_xlat23;
  let x_1799 : vec3<f32> = u_xlat4;
  let x_1800 : vec3<f32> = (vec3<f32>(x_1797, x_1797, x_1797) * x_1799);
  let x_1801 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1800.x, x_1800.y, x_1800.z, x_1801.w);
  let x_1803 : vec4<f32> = u_xlat3;
  let x_1806 : vec4<f32> = x_34.x_SSAOParams;
  let x_1808 : vec3<f32> = (vec3<f32>(x_1803.x, x_1803.y, x_1803.z) * vec3<f32>(x_1806.y, x_1806.y, x_1806.y));
  let x_1809 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1808.x, x_1808.y, x_1808.z, x_1809.w);
  let x_1811 : vec4<f32> = u_xlat3;
  let x_1816 : vec3<f32> = u_xlat1;
  let x_1817 : vec3<f32> = ((vec3<f32>(x_1811.x, x_1811.y, x_1811.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1816);
  let x_1818 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1817.x, x_1817.y, x_1817.z, x_1818.w);
  let x_1820 : vec4<f32> = u_xlat3;
  let x_1823 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1825 : vec2<f32> = (vec2<f32>(x_1820.y, x_1820.y) * vec2<f32>(x_1823.x, x_1823.y));
  let x_1826 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1825.x, x_1826.y, x_1825.y);
  let x_1829 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1831 : vec4<f32> = u_xlat3;
  let x_1834 : vec3<f32> = u_xlat10;
  let x_1836 : vec2<f32> = ((vec2<f32>(x_1829.x, x_1829.y) * vec2<f32>(x_1831.x, x_1831.x)) + vec2<f32>(x_1834.x, x_1834.z));
  let x_1837 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1836.x, x_1836.y, x_1837.z, x_1837.w);
  let x_1840 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1842 : vec4<f32> = u_xlat3;
  let x_1845 : vec4<f32> = u_xlat3;
  let x_1847 : vec2<f32> = ((vec2<f32>(x_1840.x, x_1840.y) * vec2<f32>(x_1842.z, x_1842.z)) + vec2<f32>(x_1845.x, x_1845.y));
  let x_1848 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1847.x, x_1847.y, x_1848.z, x_1848.w);
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1852 : vec2<f32> = (vec2<f32>(x_1850.x, x_1850.y) + vec2<f32>(1.0f, 1.0f));
  let x_1853 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1852.x, x_1852.y, x_1853.z, x_1853.w);
  let x_1855 : vec4<f32> = u_xlat3;
  let x_1857 : vec2<f32> = (vec2<f32>(x_1855.x, x_1855.y) * vec2<f32>(0.5f, 0.5f));
  let x_1858 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1857.x, x_1857.y, x_1858.z, x_1858.w);
  let x_1860 : vec4<f32> = u_xlat3;
  let x_1864 : vec2<f32> = clamp(vec2<f32>(x_1860.x, x_1860.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1865 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1864.x, x_1864.y, x_1865.z, x_1865.w);
  let x_1870 : vec4<f32> = u_xlat3;
  let x_1873 : f32 = x_34.x_GlobalMipBias.x;
  let x_1874 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1870.x, x_1870.y), x_1873);
  u_xlat23 = x_1874.x;
  let x_1877 : f32 = u_xlat7.x;
  let x_1879 : f32 = u_xlat23;
  let x_1882 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1877) * x_1879) + x_1882);
  let x_1884 : f32 = u_xlat0;
  let x_1885 : f32 = u_xlat17;
  u_xlat24 = (x_1884 + -(x_1885));
  let x_1888 : f32 = u_xlat24;
  let x_1891 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1888) < x_1891);
  let x_1893 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1893);
  let x_1895 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1895);
  let x_1897 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1897);
  let x_1899 : f32 = u_xlat23;
  let x_1900 : f32 = u_xlat24;
  u_xlat23 = (x_1899 * x_1900);
  let x_1903 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1903) + 1.0f);
  let x_1907 : f32 = u_xlat17;
  let x_1909 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1907 * x_1909);
  let x_1912 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1914 : vec4<f32> = u_xlat3;
  let x_1918 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1912.x, x_1912.y, x_1912.z) * vec3<f32>(x_1914.x, x_1914.x, x_1914.x)) + vec3<f32>(x_1918.x, x_1918.y, x_1918.z));
  let x_1922 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1924 : vec3<f32> = u_xlat10;
  let x_1927 : vec3<f32> = u_xlat4;
  let x_1928 : vec3<f32> = ((vec3<f32>(x_1922.x, x_1922.y, x_1922.z) * vec3<f32>(x_1924.x, x_1924.x, x_1924.x)) + x_1927);
  let x_1929 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1928.x, x_1928.y, x_1929.z, x_1928.z);
  let x_1932 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1934 : f32 = u_xlat17;
  let x_1937 : vec4<f32> = u_xlat3;
  let x_1939 : vec3<f32> = ((vec3<f32>(x_1932.x, x_1932.y, x_1932.z) * vec3<f32>(x_1934, x_1934, x_1934)) + vec3<f32>(x_1937.x, x_1937.y, x_1937.w));
  let x_1940 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1939.x, x_1939.y, x_1939.z, x_1940.w);
  let x_1942 : vec3<f32> = u_xlat1;
  let x_1944 : vec4<f32> = u_xlat3;
  let x_1946 : vec3<f32> = (-(x_1942) + vec3<f32>(x_1944.x, x_1944.y, x_1944.z));
  let x_1947 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1946.x, x_1946.y, x_1946.z, x_1947.w);
  let x_1949 : vec4<f32> = u_xlat3;
  let x_1951 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1949.x, x_1949.y, x_1949.z), x_1951);
  let x_1953 : f32 = u_xlat0;
  let x_1956 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1953) * 0.004f) + x_1956);
  let x_1958 : f32 = u_xlat24;
  u_xlat24 = max(x_1958, 0.0f);
  let x_1960 : vec4<f32> = u_xlat3;
  let x_1962 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1960.x, x_1960.y, x_1960.z), vec3<f32>(x_1962.x, x_1962.y, x_1962.z));
  let x_1967 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1967 + 0.0001f);
  let x_1971 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1971);
  let x_1975 : f32 = u_xlat3.x;
  let x_1976 : f32 = u_xlat24;
  u_xlat3.x = (x_1975 * x_1976);
  let x_1980 : f32 = u_xlat3.x;
  let x_1981 : f32 = u_xlat23;
  let x_1983 : f32 = u_xlat22;
  u_xlat22 = ((x_1980 * x_1981) + x_1983);
  let x_1985 : vec2<f32> = u_xlat14;
  let x_1988 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1985.x, x_1985.y, x_1985.x, x_1985.y) * vec4<f32>(x_1988.x, x_1988.y, x_1988.x, x_1988.y)) + vec4<f32>(0.583333373f, 0.583333373f, 0.666666687f, 0.666666687f));
  let x_1998 : vec4<f32> = u_xlat3;
  let x_2001 : f32 = x_34.x_GlobalMipBias.x;
  let x_2002 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1998.x, x_1998.y), x_2001);
  u_xlat23 = x_2002.w;
  let x_2004 : f32 = u_xlat23;
  let x_2008 : vec2<f32> = (vec2<f32>(x_2004, x_2004) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2009 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2008.x, x_2008.y, x_2009.z, x_2009.w);
  let x_2012 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2012);
  let x_2014 : f32 = u_xlat23;
  u_xlat4.z = ((x_2014 * 2.0f) + -1.0f);
  let x_2019 : f32 = u_xlat3.y;
  u_xlat23 = (x_2019 * 628.31854248f);
  let x_2022 : f32 = u_xlat4.z;
  let x_2025 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2022) * x_2025) + 1.0f);
  let x_2030 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2030);
  let x_2033 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2033);
  let x_2036 : f32 = u_xlat23;
  u_xlat6 = cos(x_2036);
  let x_2039 : f32 = u_xlat3.x;
  let x_2040 : f32 = u_xlat6;
  u_xlat4.x = (x_2039 * x_2040);
  let x_2044 : f32 = u_xlat3.x;
  let x_2046 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2044 * x_2046);
  let x_2049 : vec3<f32> = u_xlat2;
  let x_2050 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_2049, x_2050);
  let x_2052 : f32 = u_xlat23;
  u_xlatb23 = (x_2052 >= 0.0f);
  let x_2054 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2054);
  let x_2056 : f32 = u_xlat23;
  let x_2058 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_2056, x_2056, x_2056) * x_2058);
  let x_2060 : vec3<f32> = u_xlat4;
  let x_2062 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_2060 * vec3<f32>(x_2062.y, x_2062.y, x_2062.y));
  let x_2065 : vec3<f32> = u_xlat4;
  let x_2069 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_2065 * vec3<f32>(0.40625003f, 0.40625003f, 0.40625003f)) + x_2069);
  let x_2071 : vec3<f32> = u_xlat4;
  let x_2074 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2076 : vec2<f32> = (vec2<f32>(x_2071.y, x_2071.y) * vec2<f32>(x_2074.x, x_2074.y));
  let x_2077 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2076.x, x_2076.y, x_2077.z, x_2077.w);
  let x_2080 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2082 : vec3<f32> = u_xlat4;
  let x_2085 : vec4<f32> = u_xlat3;
  let x_2087 : vec2<f32> = ((vec2<f32>(x_2080.x, x_2080.y) * vec2<f32>(x_2082.x, x_2082.x)) + vec2<f32>(x_2085.x, x_2085.y));
  let x_2088 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2087.x, x_2087.y, x_2088.z, x_2088.w);
  let x_2091 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2093 : vec3<f32> = u_xlat4;
  let x_2096 : vec4<f32> = u_xlat3;
  let x_2098 : vec2<f32> = ((vec2<f32>(x_2091.x, x_2091.y) * vec2<f32>(x_2093.z, x_2093.z)) + vec2<f32>(x_2096.x, x_2096.y));
  let x_2099 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2098.x, x_2098.y, x_2099.z, x_2099.w);
  let x_2101 : vec4<f32> = u_xlat3;
  let x_2103 : vec2<f32> = (vec2<f32>(x_2101.x, x_2101.y) + vec2<f32>(1.0f, 1.0f));
  let x_2104 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2103.x, x_2103.y, x_2104.z, x_2104.w);
  let x_2106 : vec4<f32> = u_xlat3;
  let x_2108 : vec2<f32> = (vec2<f32>(x_2106.x, x_2106.y) * vec2<f32>(0.5f, 0.5f));
  let x_2109 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2108.x, x_2108.y, x_2109.z, x_2109.w);
  let x_2111 : vec4<f32> = u_xlat3;
  let x_2115 : vec2<f32> = clamp(vec2<f32>(x_2111.x, x_2111.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2116 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2115.x, x_2115.y, x_2116.z, x_2116.w);
  let x_2121 : vec4<f32> = u_xlat3;
  let x_2124 : f32 = x_34.x_GlobalMipBias.x;
  let x_2125 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2121.x, x_2121.y), x_2124);
  u_xlat23 = x_2125.x;
  let x_2128 : f32 = u_xlat7.x;
  let x_2130 : f32 = u_xlat23;
  let x_2133 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2128) * x_2130) + x_2133);
  let x_2136 : f32 = u_xlat0;
  let x_2138 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2136 + -(x_2138));
  let x_2143 : f32 = u_xlat11.x;
  let x_2146 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2143) < x_2146);
  let x_2148 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2148);
  let x_2151 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2151);
  let x_2153 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2153);
  let x_2155 : f32 = u_xlat23;
  let x_2157 : f32 = u_xlat11.x;
  u_xlat23 = (x_2155 * x_2157);
  let x_2160 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2160) + 1.0f);
  let x_2165 : f32 = u_xlat4.x;
  let x_2167 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2165 * x_2167);
  let x_2171 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2173 : vec4<f32> = u_xlat3;
  let x_2177 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2171.x, x_2171.y, x_2171.z) * vec3<f32>(x_2173.x, x_2173.x, x_2173.x)) + vec3<f32>(x_2177.x, x_2177.y, x_2177.z));
  let x_2181 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2183 : vec3<f32> = u_xlat10;
  let x_2186 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2181.x, x_2181.y, x_2181.z) * vec3<f32>(x_2183.x, x_2183.x, x_2183.x)) + x_2186);
  let x_2189 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2191 : vec3<f32> = u_xlat4;
  let x_2194 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2189.x, x_2189.y, x_2189.z) * vec3<f32>(x_2191.x, x_2191.x, x_2191.x)) + x_2194);
  let x_2196 : vec3<f32> = u_xlat1;
  let x_2198 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2196) + x_2198);
  let x_2200 : vec3<f32> = u_xlat4;
  let x_2201 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_2200, x_2201);
  let x_2204 : f32 = u_xlat0;
  let x_2208 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2204) * 0.004f) + x_2208);
  let x_2212 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2212, 0.0f);
  let x_2215 : vec3<f32> = u_xlat4;
  let x_2216 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2215, x_2216);
  let x_2220 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2220 + 0.0001f);
  let x_2224 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2224);
  let x_2228 : f32 = u_xlat10.x;
  let x_2230 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2228 * x_2230);
  let x_2234 : f32 = u_xlat3.x;
  let x_2235 : f32 = u_xlat23;
  let x_2237 : f32 = u_xlat22;
  u_xlat22 = ((x_2234 * x_2235) + x_2237);
  let x_2242 : vec4<f32> = u_xlat3;
  let x_2245 : f32 = x_34.x_GlobalMipBias.x;
  let x_2246 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2242.z, x_2242.w), x_2245);
  u_xlat23 = x_2246.w;
  let x_2248 : f32 = u_xlat23;
  let x_2253 : vec2<f32> = (vec2<f32>(x_2248, x_2248) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2254 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2253.x, x_2253.y, x_2254.z, x_2254.w);
  let x_2257 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2257);
  let x_2259 : f32 = u_xlat23;
  u_xlat4.z = ((x_2259 * 2.0f) + -1.0f);
  let x_2264 : f32 = u_xlat3.y;
  u_xlat23 = (x_2264 * 628.31854248f);
  let x_2267 : f32 = u_xlat4.z;
  let x_2270 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2267) * x_2270) + 1.0f);
  let x_2275 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2275);
  let x_2278 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2278);
  let x_2281 : f32 = u_xlat23;
  u_xlat6 = cos(x_2281);
  let x_2284 : f32 = u_xlat3.x;
  let x_2285 : f32 = u_xlat6;
  u_xlat4.x = (x_2284 * x_2285);
  let x_2289 : f32 = u_xlat3.x;
  let x_2291 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2289 * x_2291);
  let x_2294 : vec3<f32> = u_xlat2;
  let x_2295 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_2294, x_2295);
  let x_2297 : f32 = u_xlat23;
  u_xlatb23 = (x_2297 >= 0.0f);
  let x_2299 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2299);
  let x_2301 : f32 = u_xlat23;
  let x_2303 : vec3<f32> = u_xlat4;
  let x_2304 : vec3<f32> = (vec3<f32>(x_2301, x_2301, x_2301) * x_2303);
  let x_2305 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2304.x, x_2304.y, x_2304.z, x_2305.w);
  let x_2307 : vec4<f32> = u_xlat3;
  let x_2310 : vec4<f32> = x_34.x_SSAOParams;
  let x_2312 : vec3<f32> = (vec3<f32>(x_2307.x, x_2307.y, x_2307.z) * vec3<f32>(x_2310.y, x_2310.y, x_2310.y));
  let x_2313 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2312.x, x_2312.y, x_2312.z, x_2313.w);
  let x_2315 : vec4<f32> = u_xlat3;
  let x_2319 : vec3<f32> = u_xlat1;
  let x_2320 : vec3<f32> = ((vec3<f32>(x_2315.x, x_2315.y, x_2315.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + x_2319);
  let x_2321 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2320.x, x_2320.y, x_2320.z, x_2321.w);
  let x_2323 : vec4<f32> = u_xlat3;
  let x_2326 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2328 : vec2<f32> = (vec2<f32>(x_2323.y, x_2323.y) * vec2<f32>(x_2326.x, x_2326.y));
  let x_2329 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2328.x, x_2329.y, x_2328.y);
  let x_2332 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2334 : vec4<f32> = u_xlat3;
  let x_2337 : vec3<f32> = u_xlat10;
  let x_2339 : vec2<f32> = ((vec2<f32>(x_2332.x, x_2332.y) * vec2<f32>(x_2334.x, x_2334.x)) + vec2<f32>(x_2337.x, x_2337.z));
  let x_2340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2339.x, x_2339.y, x_2340.z, x_2340.w);
  let x_2343 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2345 : vec4<f32> = u_xlat3;
  let x_2348 : vec4<f32> = u_xlat3;
  let x_2350 : vec2<f32> = ((vec2<f32>(x_2343.x, x_2343.y) * vec2<f32>(x_2345.z, x_2345.z)) + vec2<f32>(x_2348.x, x_2348.y));
  let x_2351 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2350.x, x_2350.y, x_2351.z, x_2351.w);
  let x_2353 : vec4<f32> = u_xlat3;
  let x_2355 : vec2<f32> = (vec2<f32>(x_2353.x, x_2353.y) + vec2<f32>(1.0f, 1.0f));
  let x_2356 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2355.x, x_2355.y, x_2356.z, x_2356.w);
  let x_2358 : vec4<f32> = u_xlat3;
  let x_2360 : vec2<f32> = (vec2<f32>(x_2358.x, x_2358.y) * vec2<f32>(0.5f, 0.5f));
  let x_2361 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2360.x, x_2360.y, x_2361.z, x_2361.w);
  let x_2363 : vec4<f32> = u_xlat3;
  let x_2367 : vec2<f32> = clamp(vec2<f32>(x_2363.x, x_2363.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2368 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2367.x, x_2367.y, x_2368.z, x_2368.w);
  let x_2373 : vec4<f32> = u_xlat3;
  let x_2376 : f32 = x_34.x_GlobalMipBias.x;
  let x_2377 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2373.x, x_2373.y), x_2376);
  u_xlat23 = x_2377.x;
  let x_2380 : f32 = u_xlat7.x;
  let x_2382 : f32 = u_xlat23;
  let x_2385 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2380) * x_2382) + x_2385);
  let x_2387 : f32 = u_xlat0;
  let x_2388 : f32 = u_xlat17;
  u_xlat24 = (x_2387 + -(x_2388));
  let x_2391 : f32 = u_xlat24;
  let x_2394 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2391) < x_2394);
  let x_2396 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2396);
  let x_2398 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2398);
  let x_2400 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2400);
  let x_2402 : f32 = u_xlat23;
  let x_2403 : f32 = u_xlat24;
  u_xlat23 = (x_2402 * x_2403);
  let x_2406 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2406) + 1.0f);
  let x_2410 : f32 = u_xlat17;
  let x_2412 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2410 * x_2412);
  let x_2415 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2417 : vec4<f32> = u_xlat3;
  let x_2421 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2415.x, x_2415.y, x_2415.z) * vec3<f32>(x_2417.x, x_2417.x, x_2417.x)) + vec3<f32>(x_2421.x, x_2421.y, x_2421.z));
  let x_2425 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2427 : vec3<f32> = u_xlat10;
  let x_2430 : vec3<f32> = u_xlat4;
  let x_2431 : vec3<f32> = ((vec3<f32>(x_2425.x, x_2425.y, x_2425.z) * vec3<f32>(x_2427.x, x_2427.x, x_2427.x)) + x_2430);
  let x_2432 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2431.x, x_2431.y, x_2432.z, x_2431.z);
  let x_2435 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2437 : f32 = u_xlat17;
  let x_2440 : vec4<f32> = u_xlat3;
  let x_2442 : vec3<f32> = ((vec3<f32>(x_2435.x, x_2435.y, x_2435.z) * vec3<f32>(x_2437, x_2437, x_2437)) + vec3<f32>(x_2440.x, x_2440.y, x_2440.w));
  let x_2443 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2442.x, x_2442.y, x_2442.z, x_2443.w);
  let x_2445 : vec3<f32> = u_xlat1;
  let x_2447 : vec4<f32> = u_xlat3;
  let x_2449 : vec3<f32> = (-(x_2445) + vec3<f32>(x_2447.x, x_2447.y, x_2447.z));
  let x_2450 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2449.x, x_2449.y, x_2449.z, x_2450.w);
  let x_2452 : vec4<f32> = u_xlat3;
  let x_2454 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_2452.x, x_2452.y, x_2452.z), x_2454);
  let x_2456 : f32 = u_xlat0;
  let x_2459 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2456) * 0.004f) + x_2459);
  let x_2461 : f32 = u_xlat24;
  u_xlat24 = max(x_2461, 0.0f);
  let x_2463 : vec4<f32> = u_xlat3;
  let x_2465 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2463.x, x_2463.y, x_2463.z), vec3<f32>(x_2465.x, x_2465.y, x_2465.z));
  let x_2470 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2470 + 0.0001f);
  let x_2474 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2474);
  let x_2478 : f32 = u_xlat3.x;
  let x_2479 : f32 = u_xlat24;
  u_xlat3.x = (x_2478 * x_2479);
  let x_2483 : f32 = u_xlat3.x;
  let x_2484 : f32 = u_xlat23;
  let x_2486 : f32 = u_xlat22;
  u_xlat22 = ((x_2483 * x_2484) + x_2486);
  let x_2488 : vec2<f32> = u_xlat14;
  let x_2491 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2488.x, x_2488.y, x_2488.x, x_2488.y) * vec4<f32>(x_2491.x, x_2491.y, x_2491.x, x_2491.y)) + vec4<f32>(0.75f, 0.75f, 0.833333373f, 0.833333373f));
  let x_2501 : vec4<f32> = u_xlat3;
  let x_2504 : f32 = x_34.x_GlobalMipBias.x;
  let x_2505 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2501.x, x_2501.y), x_2504);
  u_xlat23 = x_2505.w;
  let x_2507 : f32 = u_xlat23;
  let x_2512 : vec2<f32> = (vec2<f32>(x_2507, x_2507) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2513 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2512.x, x_2512.y, x_2513.z, x_2513.w);
  let x_2516 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2516);
  let x_2518 : f32 = u_xlat23;
  u_xlat4.z = ((x_2518 * 2.0f) + -1.0f);
  let x_2523 : f32 = u_xlat3.y;
  u_xlat23 = (x_2523 * 628.31854248f);
  let x_2526 : f32 = u_xlat4.z;
  let x_2529 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2526) * x_2529) + 1.0f);
  let x_2534 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2534);
  let x_2537 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2537);
  let x_2540 : f32 = u_xlat23;
  u_xlat6 = cos(x_2540);
  let x_2543 : f32 = u_xlat3.x;
  let x_2544 : f32 = u_xlat6;
  u_xlat4.x = (x_2543 * x_2544);
  let x_2548 : f32 = u_xlat3.x;
  let x_2550 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2548 * x_2550);
  let x_2553 : vec3<f32> = u_xlat2;
  let x_2554 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_2553, x_2554);
  let x_2556 : f32 = u_xlat23;
  u_xlatb23 = (x_2556 >= 0.0f);
  let x_2558 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2558);
  let x_2560 : f32 = u_xlat23;
  let x_2562 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_2560, x_2560, x_2560) * x_2562);
  let x_2564 : vec3<f32> = u_xlat4;
  let x_2566 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_2564 * vec3<f32>(x_2566.y, x_2566.y, x_2566.y));
  let x_2569 : vec3<f32> = u_xlat4;
  let x_2573 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_2569 * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_2573);
  let x_2575 : vec3<f32> = u_xlat4;
  let x_2578 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2580 : vec2<f32> = (vec2<f32>(x_2575.y, x_2575.y) * vec2<f32>(x_2578.x, x_2578.y));
  let x_2581 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2580.x, x_2580.y, x_2581.z, x_2581.w);
  let x_2584 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2586 : vec3<f32> = u_xlat4;
  let x_2589 : vec4<f32> = u_xlat3;
  let x_2591 : vec2<f32> = ((vec2<f32>(x_2584.x, x_2584.y) * vec2<f32>(x_2586.x, x_2586.x)) + vec2<f32>(x_2589.x, x_2589.y));
  let x_2592 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2591.x, x_2591.y, x_2592.z, x_2592.w);
  let x_2595 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2597 : vec3<f32> = u_xlat4;
  let x_2600 : vec4<f32> = u_xlat3;
  let x_2602 : vec2<f32> = ((vec2<f32>(x_2595.x, x_2595.y) * vec2<f32>(x_2597.z, x_2597.z)) + vec2<f32>(x_2600.x, x_2600.y));
  let x_2603 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2602.x, x_2602.y, x_2603.z, x_2603.w);
  let x_2605 : vec4<f32> = u_xlat3;
  let x_2607 : vec2<f32> = (vec2<f32>(x_2605.x, x_2605.y) + vec2<f32>(1.0f, 1.0f));
  let x_2608 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2607.x, x_2607.y, x_2608.z, x_2608.w);
  let x_2610 : vec4<f32> = u_xlat3;
  let x_2612 : vec2<f32> = (vec2<f32>(x_2610.x, x_2610.y) * vec2<f32>(0.5f, 0.5f));
  let x_2613 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2612.x, x_2612.y, x_2613.z, x_2613.w);
  let x_2615 : vec4<f32> = u_xlat3;
  let x_2619 : vec2<f32> = clamp(vec2<f32>(x_2615.x, x_2615.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2620 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2619.x, x_2619.y, x_2620.z, x_2620.w);
  let x_2625 : vec4<f32> = u_xlat3;
  let x_2628 : f32 = x_34.x_GlobalMipBias.x;
  let x_2629 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2625.x, x_2625.y), x_2628);
  u_xlat23 = x_2629.x;
  let x_2632 : f32 = u_xlat7.x;
  let x_2634 : f32 = u_xlat23;
  let x_2637 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2632) * x_2634) + x_2637);
  let x_2640 : f32 = u_xlat0;
  let x_2642 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2640 + -(x_2642));
  let x_2647 : f32 = u_xlat11.x;
  let x_2650 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2647) < x_2650);
  let x_2652 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2652);
  let x_2655 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2655);
  let x_2657 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2657);
  let x_2659 : f32 = u_xlat23;
  let x_2661 : f32 = u_xlat11.x;
  u_xlat23 = (x_2659 * x_2661);
  let x_2664 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2664) + 1.0f);
  let x_2669 : f32 = u_xlat4.x;
  let x_2671 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2669 * x_2671);
  let x_2675 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2677 : vec4<f32> = u_xlat3;
  let x_2681 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2675.x, x_2675.y, x_2675.z) * vec3<f32>(x_2677.x, x_2677.x, x_2677.x)) + vec3<f32>(x_2681.x, x_2681.y, x_2681.z));
  let x_2685 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2687 : vec3<f32> = u_xlat10;
  let x_2690 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2685.x, x_2685.y, x_2685.z) * vec3<f32>(x_2687.x, x_2687.x, x_2687.x)) + x_2690);
  let x_2693 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2695 : vec3<f32> = u_xlat4;
  let x_2698 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2693.x, x_2693.y, x_2693.z) * vec3<f32>(x_2695.x, x_2695.x, x_2695.x)) + x_2698);
  let x_2700 : vec3<f32> = u_xlat1;
  let x_2702 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2700) + x_2702);
  let x_2704 : vec3<f32> = u_xlat4;
  let x_2705 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_2704, x_2705);
  let x_2708 : f32 = u_xlat0;
  let x_2712 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2708) * 0.004f) + x_2712);
  let x_2716 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2716, 0.0f);
  let x_2719 : vec3<f32> = u_xlat4;
  let x_2720 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2719, x_2720);
  let x_2724 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2724 + 0.0001f);
  let x_2728 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2728);
  let x_2732 : f32 = u_xlat10.x;
  let x_2734 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2732 * x_2734);
  let x_2738 : f32 = u_xlat3.x;
  let x_2739 : f32 = u_xlat23;
  let x_2741 : f32 = u_xlat22;
  u_xlat22 = ((x_2738 * x_2739) + x_2741);
  let x_2746 : vec4<f32> = u_xlat3;
  let x_2749 : f32 = x_34.x_GlobalMipBias.x;
  let x_2750 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2746.z, x_2746.w), x_2749);
  u_xlat23 = x_2750.w;
  let x_2752 : f32 = u_xlat23;
  let x_2757 : vec2<f32> = (vec2<f32>(x_2752, x_2752) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_2758 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2757.x, x_2757.y, x_2758.z, x_2758.w);
  let x_2761 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2761);
  let x_2763 : f32 = u_xlat23;
  u_xlat4.z = ((x_2763 * 2.0f) + -1.0f);
  let x_2768 : f32 = u_xlat3.y;
  u_xlat23 = (x_2768 * 628.31854248f);
  let x_2771 : f32 = u_xlat4.z;
  let x_2774 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2771) * x_2774) + 1.0f);
  let x_2779 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2779);
  let x_2782 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2782);
  let x_2785 : f32 = u_xlat23;
  u_xlat6 = cos(x_2785);
  let x_2788 : f32 = u_xlat3.x;
  let x_2789 : f32 = u_xlat6;
  u_xlat4.x = (x_2788 * x_2789);
  let x_2793 : f32 = u_xlat3.x;
  let x_2795 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2793 * x_2795);
  let x_2798 : vec3<f32> = u_xlat2;
  let x_2799 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_2798, x_2799);
  let x_2801 : f32 = u_xlat23;
  u_xlatb23 = (x_2801 >= 0.0f);
  let x_2803 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2803);
  let x_2805 : f32 = u_xlat23;
  let x_2807 : vec3<f32> = u_xlat4;
  let x_2808 : vec3<f32> = (vec3<f32>(x_2805, x_2805, x_2805) * x_2807);
  let x_2809 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2808.x, x_2808.y, x_2808.z, x_2809.w);
  let x_2811 : vec4<f32> = u_xlat3;
  let x_2814 : vec4<f32> = x_34.x_SSAOParams;
  let x_2816 : vec3<f32> = (vec3<f32>(x_2811.x, x_2811.y, x_2811.z) * vec3<f32>(x_2814.y, x_2814.y, x_2814.y));
  let x_2817 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2816.x, x_2816.y, x_2816.z, x_2817.w);
  let x_2819 : vec4<f32> = u_xlat3;
  let x_2824 : vec3<f32> = u_xlat1;
  let x_2825 : vec3<f32> = ((vec3<f32>(x_2819.x, x_2819.y, x_2819.z) * vec3<f32>(0.725000083f, 0.725000083f, 0.725000083f)) + x_2824);
  let x_2826 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2825.x, x_2825.y, x_2825.z, x_2826.w);
  let x_2828 : vec4<f32> = u_xlat3;
  let x_2831 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2833 : vec2<f32> = (vec2<f32>(x_2828.y, x_2828.y) * vec2<f32>(x_2831.x, x_2831.y));
  let x_2834 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2833.x, x_2834.y, x_2833.y);
  let x_2837 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2839 : vec4<f32> = u_xlat3;
  let x_2842 : vec3<f32> = u_xlat10;
  let x_2844 : vec2<f32> = ((vec2<f32>(x_2837.x, x_2837.y) * vec2<f32>(x_2839.x, x_2839.x)) + vec2<f32>(x_2842.x, x_2842.z));
  let x_2845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2844.x, x_2844.y, x_2845.z, x_2845.w);
  let x_2848 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2850 : vec4<f32> = u_xlat3;
  let x_2853 : vec4<f32> = u_xlat3;
  let x_2855 : vec2<f32> = ((vec2<f32>(x_2848.x, x_2848.y) * vec2<f32>(x_2850.z, x_2850.z)) + vec2<f32>(x_2853.x, x_2853.y));
  let x_2856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2855.x, x_2855.y, x_2856.z, x_2856.w);
  let x_2858 : vec4<f32> = u_xlat3;
  let x_2860 : vec2<f32> = (vec2<f32>(x_2858.x, x_2858.y) + vec2<f32>(1.0f, 1.0f));
  let x_2861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2860.x, x_2860.y, x_2861.z, x_2861.w);
  let x_2863 : vec4<f32> = u_xlat3;
  let x_2865 : vec2<f32> = (vec2<f32>(x_2863.x, x_2863.y) * vec2<f32>(0.5f, 0.5f));
  let x_2866 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2865.x, x_2865.y, x_2866.z, x_2866.w);
  let x_2868 : vec4<f32> = u_xlat3;
  let x_2872 : vec2<f32> = clamp(vec2<f32>(x_2868.x, x_2868.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2873 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2872.x, x_2872.y, x_2873.z, x_2873.w);
  let x_2878 : vec4<f32> = u_xlat3;
  let x_2881 : f32 = x_34.x_GlobalMipBias.x;
  let x_2882 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2878.x, x_2878.y), x_2881);
  u_xlat23 = x_2882.x;
  let x_2885 : f32 = u_xlat7.x;
  let x_2887 : f32 = u_xlat23;
  let x_2890 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2885) * x_2887) + x_2890);
  let x_2892 : f32 = u_xlat0;
  let x_2893 : f32 = u_xlat17;
  u_xlat24 = (x_2892 + -(x_2893));
  let x_2896 : f32 = u_xlat24;
  let x_2899 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2896) < x_2899);
  let x_2901 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2901);
  let x_2903 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2903);
  let x_2905 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2905);
  let x_2907 : f32 = u_xlat23;
  let x_2908 : f32 = u_xlat24;
  u_xlat23 = (x_2907 * x_2908);
  let x_2911 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2911) + 1.0f);
  let x_2915 : f32 = u_xlat17;
  let x_2917 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2915 * x_2917);
  let x_2920 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2922 : vec4<f32> = u_xlat3;
  let x_2926 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2920.x, x_2920.y, x_2920.z) * vec3<f32>(x_2922.x, x_2922.x, x_2922.x)) + vec3<f32>(x_2926.x, x_2926.y, x_2926.z));
  let x_2930 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2932 : vec3<f32> = u_xlat10;
  let x_2935 : vec3<f32> = u_xlat4;
  let x_2936 : vec3<f32> = ((vec3<f32>(x_2930.x, x_2930.y, x_2930.z) * vec3<f32>(x_2932.x, x_2932.x, x_2932.x)) + x_2935);
  let x_2937 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2936.x, x_2936.y, x_2937.z, x_2936.z);
  let x_2940 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2942 : f32 = u_xlat17;
  let x_2945 : vec4<f32> = u_xlat3;
  let x_2947 : vec3<f32> = ((vec3<f32>(x_2940.x, x_2940.y, x_2940.z) * vec3<f32>(x_2942, x_2942, x_2942)) + vec3<f32>(x_2945.x, x_2945.y, x_2945.w));
  let x_2948 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2947.x, x_2947.y, x_2947.z, x_2948.w);
  let x_2950 : vec3<f32> = u_xlat1;
  let x_2952 : vec4<f32> = u_xlat3;
  let x_2954 : vec3<f32> = (-(x_2950) + vec3<f32>(x_2952.x, x_2952.y, x_2952.z));
  let x_2955 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2954.x, x_2954.y, x_2954.z, x_2955.w);
  let x_2957 : vec4<f32> = u_xlat3;
  let x_2959 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_2957.x, x_2957.y, x_2957.z), x_2959);
  let x_2961 : f32 = u_xlat0;
  let x_2964 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2961) * 0.004f) + x_2964);
  let x_2966 : f32 = u_xlat24;
  u_xlat24 = max(x_2966, 0.0f);
  let x_2968 : vec4<f32> = u_xlat3;
  let x_2970 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2968.x, x_2968.y, x_2968.z), vec3<f32>(x_2970.x, x_2970.y, x_2970.z));
  let x_2975 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2975 + 0.0001f);
  let x_2979 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2979);
  let x_2983 : f32 = u_xlat3.x;
  let x_2984 : f32 = u_xlat24;
  u_xlat3.x = (x_2983 * x_2984);
  let x_2988 : f32 = u_xlat3.x;
  let x_2989 : f32 = u_xlat23;
  let x_2991 : f32 = u_xlat22;
  u_xlat22 = ((x_2988 * x_2989) + x_2991);
  let x_2993 : vec2<f32> = u_xlat14;
  let x_2995 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = ((x_2993 * vec2<f32>(x_2995.x, x_2995.y)) + vec2<f32>(0.916666687f, 0.916666687f));
  let x_3004 : vec2<f32> = u_xlat14;
  let x_3006 : f32 = x_34.x_GlobalMipBias.x;
  let x_3007 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_3004, x_3006);
  u_xlat14.x = x_3007.w;
  let x_3010 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_3010.x, x_3010.x) + vec2<f32>(0.984375f, 0.125f));
  let x_3015 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_3015);
  let x_3019 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_3019 * 2.0f) + -1.0f);
  let x_3024 : f32 = u_xlat14.y;
  u_xlat14.x = (x_3024 * 628.31854248f);
  let x_3028 : f32 = u_xlat3.z;
  let x_3031 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_3028) * x_3031) + 1.0f);
  let x_3034 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_3034);
  let x_3037 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_3037);
  let x_3041 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_3041);
  let x_3044 : f32 = u_xlat21;
  let x_3046 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3044 * x_3046);
  let x_3049 : f32 = u_xlat21;
  let x_3051 : f32 = u_xlat4.x;
  u_xlat3.y = (x_3049 * x_3051);
  let x_3054 : vec3<f32> = u_xlat2;
  let x_3055 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(x_3054, vec3<f32>(x_3055.x, x_3055.y, x_3055.z));
  let x_3060 : f32 = u_xlat14.x;
  u_xlatb14 = (x_3060 >= 0.0f);
  let x_3062 : bool = u_xlatb14;
  u_xlat14.x = select(-1.0f, 1.0f, x_3062);
  let x_3065 : vec2<f32> = u_xlat14;
  let x_3067 : vec4<f32> = u_xlat3;
  let x_3069 : vec3<f32> = (vec3<f32>(x_3065.x, x_3065.x, x_3065.x) * vec3<f32>(x_3067.x, x_3067.y, x_3067.z));
  let x_3070 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3069.x, x_3069.y, x_3069.z, x_3070.w);
  let x_3072 : vec4<f32> = u_xlat3;
  let x_3075 : vec4<f32> = x_34.x_SSAOParams;
  let x_3077 : vec3<f32> = (vec3<f32>(x_3072.x, x_3072.y, x_3072.z) * vec3<f32>(x_3075.y, x_3075.y, x_3075.y));
  let x_3078 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3077.x, x_3077.y, x_3077.z, x_3078.w);
  let x_3080 : vec4<f32> = u_xlat3;
  let x_3085 : vec3<f32> = u_xlat1;
  let x_3086 : vec3<f32> = ((vec3<f32>(x_3080.x, x_3080.y, x_3080.z) * vec3<f32>(0.856249988f, 0.856249988f, 0.856249988f)) + x_3085);
  let x_3087 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3086.x, x_3086.y, x_3086.z, x_3087.w);
  let x_3089 : vec4<f32> = u_xlat3;
  let x_3092 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_3089.y, x_3089.y) * vec2<f32>(x_3092.x, x_3092.y));
  let x_3096 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_3098 : vec4<f32> = u_xlat3;
  let x_3101 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_3096.x, x_3096.y) * vec2<f32>(x_3098.x, x_3098.x)) + x_3101);
  let x_3104 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_3106 : vec4<f32> = u_xlat3;
  let x_3109 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_3104.x, x_3104.y) * vec2<f32>(x_3106.z, x_3106.z)) + x_3109);
  let x_3111 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_3111 + vec2<f32>(1.0f, 1.0f));
  let x_3113 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_3113 * vec2<f32>(0.5f, 0.5f));
  let x_3115 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_3115, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3122 : vec2<f32> = u_xlat14;
  let x_3124 : f32 = x_34.x_GlobalMipBias.x;
  let x_3125 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3122, x_3124);
  u_xlat23 = x_3125.x;
  let x_3128 : f32 = u_xlat7.x;
  let x_3130 : f32 = u_xlat23;
  let x_3133 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_3128) * x_3130) + x_3133);
  let x_3137 : f32 = u_xlat7.x;
  let x_3139 : f32 = u_xlat0;
  u_xlat3.x = (-(x_3137) + x_3139);
  let x_3143 : f32 = u_xlat3.x;
  let x_3146 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_3143) < x_3146);
  let x_3148 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_3148);
  let x_3151 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_3151);
  let x_3153 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_3153);
  let x_3155 : f32 = u_xlat23;
  let x_3157 : f32 = u_xlat3.x;
  u_xlat23 = (x_3155 * x_3157);
  let x_3160 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_3160) + 1.0f);
  let x_3164 : f32 = u_xlat7.x;
  let x_3166 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_3164 * x_3166);
  let x_3170 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_3172 : vec2<f32> = u_xlat14;
  let x_3176 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_3178 : vec3<f32> = ((vec3<f32>(x_3170.x, x_3170.y, x_3170.z) * vec3<f32>(x_3172.x, x_3172.x, x_3172.x)) + vec3<f32>(x_3176.x, x_3176.y, x_3176.z));
  let x_3179 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3178.x, x_3178.y, x_3178.z, x_3179.w);
  let x_3182 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_3184 : f32 = u_xlat21;
  let x_3187 : vec4<f32> = u_xlat3;
  let x_3189 : vec3<f32> = ((vec3<f32>(x_3182.x, x_3182.y, x_3182.z) * vec3<f32>(x_3184, x_3184, x_3184)) + vec3<f32>(x_3187.x, x_3187.y, x_3187.z));
  let x_3190 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3189.x, x_3189.y, x_3189.z, x_3190.w);
  let x_3193 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_3195 : vec3<f32> = u_xlat7;
  let x_3198 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_3193.x, x_3193.y, x_3193.z) * vec3<f32>(x_3195.x, x_3195.x, x_3195.x)) + vec3<f32>(x_3198.x, x_3198.y, x_3198.z));
  let x_3201 : vec3<f32> = u_xlat1;
  let x_3203 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_3201) + x_3203);
  let x_3205 : vec3<f32> = u_xlat7;
  let x_3206 : vec3<f32> = u_xlat2;
  u_xlat1.x = dot(x_3205, x_3206);
  let x_3209 : f32 = u_xlat0;
  let x_3213 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_3209) * 0.004f) + x_3213);
  let x_3217 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_3217, 0.0f);
  let x_3220 : vec3<f32> = u_xlat7;
  let x_3221 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_3220, x_3221);
  let x_3225 : f32 = u_xlat7.x;
  u_xlat7.x = (x_3225 + 0.0001f);
  let x_3229 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_3229);
  let x_3233 : f32 = u_xlat7.x;
  let x_3235 : f32 = u_xlat1.x;
  u_xlat7.x = (x_3233 * x_3235);
  let x_3239 : f32 = u_xlat7.x;
  let x_3240 : f32 = u_xlat23;
  let x_3242 : f32 = u_xlat22;
  u_xlat7.x = ((x_3239 * x_3240) + x_3242);
  let x_3246 : f32 = u_xlat7.x;
  let x_3248 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_3246 * x_3248);
  let x_3252 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_3252);
  let x_3255 : f32 = u_xlat0;
  let x_3258 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_3255) * x_3258) + 1.0f);
  let x_3261 : f32 = u_xlat0;
  let x_3262 : f32 = u_xlat0;
  u_xlat0 = (x_3261 * x_3262);
  let x_3265 : f32 = u_xlat7.x;
  let x_3267 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_3265 * x_3267);
  let x_3270 : f32 = u_xlat0;
  let x_3272 : f32 = u_xlat7.x;
  u_xlat0 = (x_3270 * x_3272);
  let x_3274 : f32 = u_xlat0;
  u_xlat0 = (x_3274 * 0.083333336f);
  let x_3276 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3276, 0.0f, 1.0f);
  let x_3278 : f32 = u_xlat0;
  u_xlat0 = log2(x_3278);
  let x_3280 : f32 = u_xlat0;
  u_xlat0 = (x_3280 * 0.600000024f);
  let x_3283 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3283);
  let x_3287 : vec3<f32> = u_xlat2;
  let x_3289 : vec3<f32> = ((x_3287 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3290 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3290.x, x_3289.x, x_3289.y, x_3289.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

