struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

@group(0) @binding(1) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(4) var samplerunity_Lightmap : sampler;

var<private> vs_TEXCOORD1 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_26 : PGlobals;

@group(0) @binding(0) var unity_Lightmap : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec3<f32>;

@group(1) @binding(1) var<uniform> x_97 : MainLightShadows;

var<private> vs_TEXCOORD4 : vec4<f32>;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(5) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD3 : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(6) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

var<private> SV_Target3 : vec4<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

var<private> SV_Target2 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat45 : f32;
  var u_xlatb45 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlat31 : vec2<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat33 : vec2<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat16 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat17 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat39 : vec2<f32>;
  var u_xlat34 : vec2<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat48 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat46 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb16 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec2<f32> = vs_TEXCOORD1;
  let x_33 : f32 = x_26.x_GlobalMipBias.x;
  let x_34 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_23, x_33);
  u_xlat0 = x_34;
  let x_40 : vec2<f32> = vs_TEXCOORD1;
  let x_42 : f32 = x_26.x_GlobalMipBias.x;
  let x_43 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_40, x_42);
  let x_45 : vec3<f32> = vec3<f32>(x_43.x, x_43.y, x_43.z);
  let x_46 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_45.x, x_45.y, x_45.z, x_46.w);
  let x_48 : vec4<f32> = u_xlat0;
  let x_52 : vec3<f32> = (vec3<f32>(x_48.x, x_48.y, x_48.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_53 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_52.x, x_52.y, x_52.z, x_53.w);
  let x_57 : vec3<f32> = vs_TEXCOORD5;
  let x_58 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(x_57, vec3<f32>(x_58.x, x_58.y, x_58.z));
  let x_64 : f32 = u_xlat0.x;
  u_xlat0.x = (x_64 + 0.5f);
  let x_68 : vec4<f32> = u_xlat0;
  let x_70 : vec4<f32> = u_xlat1;
  let x_72 : vec3<f32> = (vec3<f32>(x_68.x, x_68.x, x_68.x) * vec3<f32>(x_70.x, x_70.y, x_70.z));
  let x_73 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_72.x, x_72.y, x_72.z, x_73.w);
  let x_78 : f32 = u_xlat0.w;
  u_xlat45 = max(x_78, 0.0001f);
  let x_81 : vec4<f32> = u_xlat0;
  let x_83 : f32 = u_xlat45;
  let x_85 : vec3<f32> = (vec3<f32>(x_81.x, x_81.y, x_81.z) / vec3<f32>(x_83, x_83, x_83));
  let x_86 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_85.x, x_85.y, x_85.z, x_86.w);
  let x_101 : f32 = x_97.x_MainLightShadowParams.y;
  u_xlatb45 = (0.0f < x_101);
  let x_103 : bool = u_xlatb45;
  if (x_103) {
    let x_107 : f32 = x_97.x_MainLightShadowParams.y;
    u_xlatb45 = (x_107 == 1.0f);
    let x_110 : bool = u_xlatb45;
    if (x_110) {
      let x_115 : vec4<f32> = vs_TEXCOORD4;
      let x_120 : vec4<f32> = x_97.x_MainLightShadowOffset0;
      u_xlat1 = (vec4<f32>(x_115.x, x_115.y, x_115.x, x_115.y) + x_120);
      let x_124 : vec4<f32> = u_xlat1;
      let x_125 : vec2<f32> = vec2<f32>(x_124.x, x_124.y);
      let x_129 : f32 = vs_TEXCOORD4.z;
      txVec0 = vec3<f32>(x_125.x, x_125.y, x_129);
      let x_142 : vec3<f32> = txVec0;
      let x_144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_142.xy, x_142.z);
      u_xlat2.x = x_144;
      let x_147 : vec4<f32> = u_xlat1;
      let x_148 : vec2<f32> = vec2<f32>(x_147.z, x_147.w);
      let x_150 : f32 = vs_TEXCOORD4.z;
      txVec1 = vec3<f32>(x_148.x, x_148.y, x_150);
      let x_157 : vec3<f32> = txVec1;
      let x_159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_157.xy, x_157.z);
      u_xlat2.y = x_159;
      let x_161 : vec4<f32> = vs_TEXCOORD4;
      let x_165 : vec4<f32> = x_97.x_MainLightShadowOffset1;
      u_xlat1 = (vec4<f32>(x_161.x, x_161.y, x_161.x, x_161.y) + x_165);
      let x_168 : vec4<f32> = u_xlat1;
      let x_169 : vec2<f32> = vec2<f32>(x_168.x, x_168.y);
      let x_171 : f32 = vs_TEXCOORD4.z;
      txVec2 = vec3<f32>(x_169.x, x_169.y, x_171);
      let x_178 : vec3<f32> = txVec2;
      let x_180 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_178.xy, x_178.z);
      u_xlat2.z = x_180;
      let x_183 : vec4<f32> = u_xlat1;
      let x_184 : vec2<f32> = vec2<f32>(x_183.z, x_183.w);
      let x_186 : f32 = vs_TEXCOORD4.z;
      txVec3 = vec3<f32>(x_184.x, x_184.y, x_186);
      let x_193 : vec3<f32> = txVec3;
      let x_195 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_193.xy, x_193.z);
      u_xlat2.w = x_195;
      let x_197 : vec4<f32> = u_xlat2;
      u_xlat45 = dot(x_197, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_204 : f32 = x_97.x_MainLightShadowParams.y;
      u_xlatb1 = (x_204 == 2.0f);
      let x_207 : bool = u_xlatb1;
      if (x_207) {
        let x_210 : vec4<f32> = vs_TEXCOORD4;
        let x_214 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_218 : vec2<f32> = ((vec2<f32>(x_210.x, x_210.y) * vec2<f32>(x_214.z, x_214.w)) + vec2<f32>(0.5f, 0.5f));
        let x_219 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_218.x, x_218.y, x_219.z, x_219.w);
        let x_221 : vec4<f32> = u_xlat1;
        let x_223 : vec2<f32> = floor(vec2<f32>(x_221.x, x_221.y));
        let x_224 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_223.x, x_223.y, x_224.z, x_224.w);
        let x_228 : vec4<f32> = vs_TEXCOORD4;
        let x_231 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_234 : vec4<f32> = u_xlat1;
        u_xlat31 = ((vec2<f32>(x_228.x, x_228.y) * vec2<f32>(x_231.z, x_231.w)) + -(vec2<f32>(x_234.x, x_234.y)));
        let x_238 : vec2<f32> = u_xlat31;
        u_xlat2 = (vec4<f32>(x_238.x, x_238.x, x_238.y, x_238.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_243 : vec4<f32> = u_xlat2;
        let x_245 : vec4<f32> = u_xlat2;
        u_xlat3 = (vec4<f32>(x_243.x, x_243.x, x_243.z, x_243.z) * vec4<f32>(x_245.x, x_245.x, x_245.z, x_245.z));
        let x_248 : vec4<f32> = u_xlat3;
        let x_252 : vec2<f32> = (vec2<f32>(x_248.y, x_248.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_253 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_252.x, x_253.y, x_252.y, x_253.w);
        let x_255 : vec4<f32> = u_xlat3;
        let x_258 : vec2<f32> = u_xlat31;
        let x_260 : vec2<f32> = ((vec2<f32>(x_255.x, x_255.z) * vec2<f32>(0.5f, 0.5f)) + -(x_258));
        let x_261 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_260.x, x_260.y, x_261.z, x_261.w);
        let x_264 : vec2<f32> = u_xlat31;
        u_xlat33 = (-(x_264) + vec2<f32>(1.0f, 1.0f));
        let x_269 : vec2<f32> = u_xlat31;
        let x_271 : vec2<f32> = min(x_269, vec2<f32>(0.0f, 0.0f));
        let x_272 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_271.x, x_271.y, x_272.z, x_272.w);
        let x_274 : vec4<f32> = u_xlat4;
        let x_277 : vec4<f32> = u_xlat4;
        let x_280 : vec2<f32> = u_xlat33;
        let x_281 : vec2<f32> = ((-(vec2<f32>(x_274.x, x_274.y)) * vec2<f32>(x_277.x, x_277.y)) + x_280);
        let x_282 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_281.x, x_281.y, x_282.z, x_282.w);
        let x_284 : vec2<f32> = u_xlat31;
        u_xlat31 = max(x_284, vec2<f32>(0.0f, 0.0f));
        let x_286 : vec2<f32> = u_xlat31;
        let x_288 : vec2<f32> = u_xlat31;
        let x_290 : vec4<f32> = u_xlat2;
        u_xlat31 = ((-(x_286) * x_288) + vec2<f32>(x_290.y, x_290.w));
        let x_293 : vec4<f32> = u_xlat4;
        let x_295 : vec2<f32> = (vec2<f32>(x_293.x, x_293.y) + vec2<f32>(1.0f, 1.0f));
        let x_296 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_295.x, x_295.y, x_296.z, x_296.w);
        let x_298 : vec2<f32> = u_xlat31;
        u_xlat31 = (x_298 + vec2<f32>(1.0f, 1.0f));
        let x_301 : vec4<f32> = u_xlat3;
        let x_305 : vec2<f32> = (vec2<f32>(x_301.x, x_301.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_306 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_305.x, x_305.y, x_306.z, x_306.w);
        let x_308 : vec2<f32> = u_xlat33;
        let x_309 : vec2<f32> = (x_308 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_310 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_309.x, x_309.y, x_310.z, x_310.w);
        let x_312 : vec4<f32> = u_xlat4;
        let x_314 : vec2<f32> = (vec2<f32>(x_312.x, x_312.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_315 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_314.x, x_314.y, x_315.z, x_315.w);
        let x_318 : vec2<f32> = u_xlat31;
        let x_319 : vec2<f32> = (x_318 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_320 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_319.x, x_319.y, x_320.z, x_320.w);
        let x_322 : vec4<f32> = u_xlat2;
        u_xlat31 = (vec2<f32>(x_322.y, x_322.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_326 : f32 = u_xlat4.x;
        u_xlat5.z = x_326;
        let x_329 : f32 = u_xlat31.x;
        u_xlat5.w = x_329;
        let x_332 : f32 = u_xlat6.x;
        u_xlat3.z = x_332;
        let x_335 : f32 = u_xlat2.x;
        u_xlat3.w = x_335;
        let x_338 : vec4<f32> = u_xlat3;
        let x_340 : vec4<f32> = u_xlat5;
        u_xlat7 = (vec4<f32>(x_338.z, x_338.w, x_338.x, x_338.z) + vec4<f32>(x_340.z, x_340.w, x_340.x, x_340.z));
        let x_344 : f32 = u_xlat5.y;
        u_xlat4.z = x_344;
        let x_347 : f32 = u_xlat31.y;
        u_xlat4.w = x_347;
        let x_350 : f32 = u_xlat3.y;
        u_xlat6.z = x_350;
        let x_353 : f32 = u_xlat2.z;
        u_xlat6.w = x_353;
        let x_355 : vec4<f32> = u_xlat4;
        let x_357 : vec4<f32> = u_xlat6;
        let x_359 : vec3<f32> = (vec3<f32>(x_355.z, x_355.y, x_355.w) + vec3<f32>(x_357.z, x_357.y, x_357.w));
        let x_360 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
        let x_362 : vec4<f32> = u_xlat3;
        let x_364 : vec4<f32> = u_xlat7;
        let x_366 : vec3<f32> = (vec3<f32>(x_362.x, x_362.z, x_362.w) / vec3<f32>(x_364.z, x_364.w, x_364.y));
        let x_367 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_366.x, x_366.y, x_366.z, x_367.w);
        let x_369 : vec4<f32> = u_xlat3;
        let x_374 : vec3<f32> = (vec3<f32>(x_369.x, x_369.y, x_369.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_375 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_374.x, x_374.y, x_374.z, x_375.w);
        let x_377 : vec4<f32> = u_xlat6;
        let x_379 : vec4<f32> = u_xlat2;
        let x_381 : vec3<f32> = (vec3<f32>(x_377.z, x_377.y, x_377.w) / vec3<f32>(x_379.x, x_379.y, x_379.z));
        let x_382 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_381.x, x_381.y, x_381.z, x_382.w);
        let x_384 : vec4<f32> = u_xlat4;
        let x_386 : vec3<f32> = (vec3<f32>(x_384.x, x_384.y, x_384.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_387 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
        let x_389 : vec4<f32> = u_xlat3;
        let x_392 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_394 : vec3<f32> = (vec3<f32>(x_389.y, x_389.x, x_389.z) * vec3<f32>(x_392.x, x_392.x, x_392.x));
        let x_395 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_394.x, x_394.y, x_394.z, x_395.w);
        let x_397 : vec4<f32> = u_xlat4;
        let x_400 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_402 : vec3<f32> = (vec3<f32>(x_397.x, x_397.y, x_397.z) * vec3<f32>(x_400.y, x_400.y, x_400.y));
        let x_403 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_402.x, x_402.y, x_402.z, x_403.w);
        let x_406 : f32 = u_xlat4.x;
        u_xlat3.w = x_406;
        let x_408 : vec4<f32> = u_xlat1;
        let x_411 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_414 : vec4<f32> = u_xlat3;
        u_xlat5 = ((vec4<f32>(x_408.x, x_408.y, x_408.x, x_408.y) * vec4<f32>(x_411.x, x_411.y, x_411.x, x_411.y)) + vec4<f32>(x_414.y, x_414.w, x_414.x, x_414.w));
        let x_417 : vec4<f32> = u_xlat1;
        let x_420 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_423 : vec4<f32> = u_xlat3;
        u_xlat31 = ((vec2<f32>(x_417.x, x_417.y) * vec2<f32>(x_420.x, x_420.y)) + vec2<f32>(x_423.z, x_423.w));
        let x_427 : f32 = u_xlat3.y;
        u_xlat4.w = x_427;
        let x_429 : vec4<f32> = u_xlat4;
        let x_430 : vec2<f32> = vec2<f32>(x_429.y, x_429.z);
        let x_431 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_431.x, x_430.x, x_431.z, x_430.y);
        let x_433 : vec4<f32> = u_xlat1;
        let x_436 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_439 : vec4<f32> = u_xlat3;
        u_xlat6 = ((vec4<f32>(x_433.x, x_433.y, x_433.x, x_433.y) * vec4<f32>(x_436.x, x_436.y, x_436.x, x_436.y)) + vec4<f32>(x_439.x, x_439.y, x_439.z, x_439.y));
        let x_442 : vec4<f32> = u_xlat1;
        let x_445 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_448 : vec4<f32> = u_xlat4;
        u_xlat4 = ((vec4<f32>(x_442.x, x_442.y, x_442.x, x_442.y) * vec4<f32>(x_445.x, x_445.y, x_445.x, x_445.y)) + vec4<f32>(x_448.w, x_448.y, x_448.w, x_448.z));
        let x_451 : vec4<f32> = u_xlat1;
        let x_454 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_457 : vec4<f32> = u_xlat3;
        u_xlat3 = ((vec4<f32>(x_451.x, x_451.y, x_451.x, x_451.y) * vec4<f32>(x_454.x, x_454.y, x_454.x, x_454.y)) + vec4<f32>(x_457.x, x_457.w, x_457.z, x_457.w));
        let x_461 : vec4<f32> = u_xlat2;
        let x_463 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_461.x, x_461.x, x_461.x, x_461.y) * vec4<f32>(x_463.z, x_463.w, x_463.y, x_463.z));
        let x_467 : vec4<f32> = u_xlat2;
        let x_469 : vec4<f32> = u_xlat7;
        u_xlat9 = (vec4<f32>(x_467.y, x_467.y, x_467.z, x_467.z) * x_469);
        let x_472 : f32 = u_xlat2.z;
        let x_474 : f32 = u_xlat7.y;
        u_xlat1.x = (x_472 * x_474);
        let x_478 : vec4<f32> = u_xlat5;
        let x_479 : vec2<f32> = vec2<f32>(x_478.x, x_478.y);
        let x_481 : f32 = vs_TEXCOORD4.z;
        txVec4 = vec3<f32>(x_479.x, x_479.y, x_481);
        let x_489 : vec3<f32> = txVec4;
        let x_491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_489.xy, x_489.z);
        u_xlat16 = x_491;
        let x_493 : vec4<f32> = u_xlat5;
        let x_494 : vec2<f32> = vec2<f32>(x_493.z, x_493.w);
        let x_496 : f32 = vs_TEXCOORD4.z;
        txVec5 = vec3<f32>(x_494.x, x_494.y, x_496);
        let x_503 : vec3<f32> = txVec5;
        let x_505 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_503.xy, x_503.z);
        u_xlat2.x = x_505;
        let x_508 : f32 = u_xlat2.x;
        let x_510 : f32 = u_xlat8.y;
        u_xlat2.x = (x_508 * x_510);
        let x_514 : f32 = u_xlat8.x;
        let x_515 : f32 = u_xlat16;
        let x_518 : f32 = u_xlat2.x;
        u_xlat16 = ((x_514 * x_515) + x_518);
        let x_521 : vec2<f32> = u_xlat31;
        let x_523 : f32 = vs_TEXCOORD4.z;
        txVec6 = vec3<f32>(x_521.x, x_521.y, x_523);
        let x_530 : vec3<f32> = txVec6;
        let x_532 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_530.xy, x_530.z);
        u_xlat31.x = x_532;
        let x_535 : f32 = u_xlat8.z;
        let x_537 : f32 = u_xlat31.x;
        let x_539 : f32 = u_xlat16;
        u_xlat16 = ((x_535 * x_537) + x_539);
        let x_542 : vec4<f32> = u_xlat4;
        let x_543 : vec2<f32> = vec2<f32>(x_542.x, x_542.y);
        let x_545 : f32 = vs_TEXCOORD4.z;
        txVec7 = vec3<f32>(x_543.x, x_543.y, x_545);
        let x_552 : vec3<f32> = txVec7;
        let x_554 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_552.xy, x_552.z);
        u_xlat31.x = x_554;
        let x_557 : f32 = u_xlat8.w;
        let x_559 : f32 = u_xlat31.x;
        let x_561 : f32 = u_xlat16;
        u_xlat16 = ((x_557 * x_559) + x_561);
        let x_564 : vec4<f32> = u_xlat6;
        let x_565 : vec2<f32> = vec2<f32>(x_564.x, x_564.y);
        let x_567 : f32 = vs_TEXCOORD4.z;
        txVec8 = vec3<f32>(x_565.x, x_565.y, x_567);
        let x_574 : vec3<f32> = txVec8;
        let x_576 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_574.xy, x_574.z);
        u_xlat31.x = x_576;
        let x_579 : f32 = u_xlat9.x;
        let x_581 : f32 = u_xlat31.x;
        let x_583 : f32 = u_xlat16;
        u_xlat16 = ((x_579 * x_581) + x_583);
        let x_586 : vec4<f32> = u_xlat6;
        let x_587 : vec2<f32> = vec2<f32>(x_586.z, x_586.w);
        let x_589 : f32 = vs_TEXCOORD4.z;
        txVec9 = vec3<f32>(x_587.x, x_587.y, x_589);
        let x_596 : vec3<f32> = txVec9;
        let x_598 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_596.xy, x_596.z);
        u_xlat31.x = x_598;
        let x_601 : f32 = u_xlat9.y;
        let x_603 : f32 = u_xlat31.x;
        let x_605 : f32 = u_xlat16;
        u_xlat16 = ((x_601 * x_603) + x_605);
        let x_608 : vec4<f32> = u_xlat4;
        let x_609 : vec2<f32> = vec2<f32>(x_608.z, x_608.w);
        let x_611 : f32 = vs_TEXCOORD4.z;
        txVec10 = vec3<f32>(x_609.x, x_609.y, x_611);
        let x_618 : vec3<f32> = txVec10;
        let x_620 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_618.xy, x_618.z);
        u_xlat31.x = x_620;
        let x_623 : f32 = u_xlat9.z;
        let x_625 : f32 = u_xlat31.x;
        let x_627 : f32 = u_xlat16;
        u_xlat16 = ((x_623 * x_625) + x_627);
        let x_630 : vec4<f32> = u_xlat3;
        let x_631 : vec2<f32> = vec2<f32>(x_630.x, x_630.y);
        let x_633 : f32 = vs_TEXCOORD4.z;
        txVec11 = vec3<f32>(x_631.x, x_631.y, x_633);
        let x_640 : vec3<f32> = txVec11;
        let x_642 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_640.xy, x_640.z);
        u_xlat31.x = x_642;
        let x_645 : f32 = u_xlat9.w;
        let x_647 : f32 = u_xlat31.x;
        let x_649 : f32 = u_xlat16;
        u_xlat16 = ((x_645 * x_647) + x_649);
        let x_652 : vec4<f32> = u_xlat3;
        let x_653 : vec2<f32> = vec2<f32>(x_652.z, x_652.w);
        let x_655 : f32 = vs_TEXCOORD4.z;
        txVec12 = vec3<f32>(x_653.x, x_653.y, x_655);
        let x_662 : vec3<f32> = txVec12;
        let x_664 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_662.xy, x_662.z);
        u_xlat31.x = x_664;
        let x_667 : f32 = u_xlat1.x;
        let x_669 : f32 = u_xlat31.x;
        let x_671 : f32 = u_xlat16;
        u_xlat45 = ((x_667 * x_669) + x_671);
      } else {
        let x_674 : vec4<f32> = vs_TEXCOORD4;
        let x_677 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_680 : vec2<f32> = ((vec2<f32>(x_674.x, x_674.y) * vec2<f32>(x_677.z, x_677.w)) + vec2<f32>(0.5f, 0.5f));
        let x_681 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_680.x, x_680.y, x_681.z, x_681.w);
        let x_683 : vec4<f32> = u_xlat1;
        let x_685 : vec2<f32> = floor(vec2<f32>(x_683.x, x_683.y));
        let x_686 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_685.x, x_685.y, x_686.z, x_686.w);
        let x_688 : vec4<f32> = vs_TEXCOORD4;
        let x_691 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_694 : vec4<f32> = u_xlat1;
        u_xlat31 = ((vec2<f32>(x_688.x, x_688.y) * vec2<f32>(x_691.z, x_691.w)) + -(vec2<f32>(x_694.x, x_694.y)));
        let x_698 : vec2<f32> = u_xlat31;
        u_xlat2 = (vec4<f32>(x_698.x, x_698.x, x_698.y, x_698.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_701 : vec4<f32> = u_xlat2;
        let x_703 : vec4<f32> = u_xlat2;
        u_xlat3 = (vec4<f32>(x_701.x, x_701.x, x_701.z, x_701.z) * vec4<f32>(x_703.x, x_703.x, x_703.z, x_703.z));
        let x_706 : vec4<f32> = u_xlat3;
        let x_710 : vec2<f32> = (vec2<f32>(x_706.y, x_706.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_711 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_711.x, x_710.x, x_711.z, x_710.y);
        let x_713 : vec4<f32> = u_xlat3;
        let x_716 : vec2<f32> = u_xlat31;
        let x_718 : vec2<f32> = ((vec2<f32>(x_713.x, x_713.z) * vec2<f32>(0.5f, 0.5f)) + -(x_716));
        let x_719 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_718.x, x_719.y, x_718.y, x_719.w);
        let x_721 : vec2<f32> = u_xlat31;
        let x_723 : vec2<f32> = (-(x_721) + vec2<f32>(1.0f, 1.0f));
        let x_724 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_723.x, x_723.y, x_724.z, x_724.w);
        let x_726 : vec2<f32> = u_xlat31;
        u_xlat33 = min(x_726, vec2<f32>(0.0f, 0.0f));
        let x_728 : vec2<f32> = u_xlat33;
        let x_730 : vec2<f32> = u_xlat33;
        let x_732 : vec4<f32> = u_xlat3;
        let x_734 : vec2<f32> = ((-(x_728) * x_730) + vec2<f32>(x_732.x, x_732.y));
        let x_735 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_734.x, x_734.y, x_735.z, x_735.w);
        let x_737 : vec2<f32> = u_xlat31;
        u_xlat33 = max(x_737, vec2<f32>(0.0f, 0.0f));
        let x_740 : vec2<f32> = u_xlat33;
        let x_742 : vec2<f32> = u_xlat33;
        let x_744 : vec4<f32> = u_xlat2;
        let x_746 : vec2<f32> = ((-(x_740) * x_742) + vec2<f32>(x_744.y, x_744.w));
        let x_747 : vec3<f32> = u_xlat17;
        u_xlat17 = vec3<f32>(x_746.x, x_747.y, x_746.y);
        let x_749 : vec4<f32> = u_xlat3;
        let x_752 : vec2<f32> = (vec2<f32>(x_749.x, x_749.y) + vec2<f32>(2.0f, 2.0f));
        let x_753 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_752.x, x_752.y, x_753.z, x_753.w);
        let x_755 : vec3<f32> = u_xlat17;
        let x_757 : vec2<f32> = (vec2<f32>(x_755.x, x_755.z) + vec2<f32>(2.0f, 2.0f));
        let x_758 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_758.x, x_757.x, x_758.z, x_757.y);
        let x_761 : f32 = u_xlat2.y;
        u_xlat5.z = (x_761 * 0.081632003f);
        let x_765 : vec4<f32> = u_xlat2;
        let x_768 : vec3<f32> = (vec3<f32>(x_765.z, x_765.x, x_765.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_769 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_768.x, x_768.y, x_768.z, x_769.w);
        let x_771 : vec4<f32> = u_xlat3;
        let x_774 : vec2<f32> = (vec2<f32>(x_771.x, x_771.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_775 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_774.x, x_774.y, x_775.z, x_775.w);
        let x_778 : f32 = u_xlat6.y;
        u_xlat5.x = x_778;
        let x_780 : vec2<f32> = u_xlat31;
        let x_787 : vec2<f32> = ((vec2<f32>(x_780.x, x_780.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_788 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_788.x, x_787.x, x_788.z, x_787.y);
        let x_790 : vec2<f32> = u_xlat31;
        let x_794 : vec2<f32> = ((vec2<f32>(x_790.x, x_790.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_795 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_794.x, x_795.y, x_794.y, x_795.w);
        let x_798 : f32 = u_xlat2.x;
        u_xlat3.y = x_798;
        let x_801 : f32 = u_xlat4.y;
        u_xlat3.w = x_801;
        let x_803 : vec4<f32> = u_xlat3;
        let x_804 : vec4<f32> = u_xlat5;
        u_xlat5 = (x_803 + x_804);
        let x_806 : vec2<f32> = u_xlat31;
        let x_809 : vec2<f32> = ((vec2<f32>(x_806.y, x_806.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_810 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_810.x, x_809.x, x_810.z, x_809.y);
        let x_812 : vec2<f32> = u_xlat31;
        let x_815 : vec2<f32> = ((vec2<f32>(x_812.y, x_812.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_816 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_815.x, x_816.y, x_815.y, x_816.w);
        let x_819 : f32 = u_xlat2.y;
        u_xlat4.y = x_819;
        let x_821 : vec4<f32> = u_xlat4;
        let x_822 : vec4<f32> = u_xlat6;
        u_xlat2 = (x_821 + x_822);
        let x_824 : vec4<f32> = u_xlat3;
        let x_825 : vec4<f32> = u_xlat5;
        u_xlat3 = (x_824 / x_825);
        let x_827 : vec4<f32> = u_xlat3;
        u_xlat3 = (x_827 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_833 : vec4<f32> = u_xlat4;
        let x_834 : vec4<f32> = u_xlat2;
        u_xlat4 = (x_833 / x_834);
        let x_836 : vec4<f32> = u_xlat4;
        u_xlat4 = (x_836 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_838 : vec4<f32> = u_xlat3;
        let x_841 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        u_xlat3 = (vec4<f32>(x_838.w, x_838.x, x_838.y, x_838.z) * vec4<f32>(x_841.x, x_841.x, x_841.x, x_841.x));
        let x_844 : vec4<f32> = u_xlat4;
        let x_847 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        u_xlat4 = (vec4<f32>(x_844.x, x_844.w, x_844.y, x_844.z) * vec4<f32>(x_847.y, x_847.y, x_847.y, x_847.y));
        let x_850 : vec4<f32> = u_xlat3;
        let x_851 : vec3<f32> = vec3<f32>(x_850.y, x_850.z, x_850.w);
        let x_852 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_851.x, x_852.y, x_851.y, x_851.z);
        let x_855 : f32 = u_xlat4.x;
        u_xlat6.y = x_855;
        let x_857 : vec4<f32> = u_xlat1;
        let x_860 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_863 : vec4<f32> = u_xlat6;
        u_xlat7 = ((vec4<f32>(x_857.x, x_857.y, x_857.x, x_857.y) * vec4<f32>(x_860.x, x_860.y, x_860.x, x_860.y)) + vec4<f32>(x_863.x, x_863.y, x_863.z, x_863.y));
        let x_866 : vec4<f32> = u_xlat1;
        let x_869 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_872 : vec4<f32> = u_xlat6;
        u_xlat31 = ((vec2<f32>(x_866.x, x_866.y) * vec2<f32>(x_869.x, x_869.y)) + vec2<f32>(x_872.w, x_872.y));
        let x_876 : f32 = u_xlat6.y;
        u_xlat3.y = x_876;
        let x_879 : f32 = u_xlat4.z;
        u_xlat6.y = x_879;
        let x_881 : vec4<f32> = u_xlat1;
        let x_884 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_887 : vec4<f32> = u_xlat6;
        u_xlat8 = ((vec4<f32>(x_881.x, x_881.y, x_881.x, x_881.y) * vec4<f32>(x_884.x, x_884.y, x_884.x, x_884.y)) + vec4<f32>(x_887.x, x_887.y, x_887.z, x_887.y));
        let x_890 : vec4<f32> = u_xlat1;
        let x_893 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_896 : vec4<f32> = u_xlat6;
        let x_898 : vec2<f32> = ((vec2<f32>(x_890.x, x_890.y) * vec2<f32>(x_893.x, x_893.y)) + vec2<f32>(x_896.w, x_896.y));
        let x_899 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_898.x, x_898.y, x_899.z, x_899.w);
        let x_902 : f32 = u_xlat6.y;
        u_xlat3.z = x_902;
        let x_905 : vec4<f32> = u_xlat1;
        let x_908 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_911 : vec4<f32> = u_xlat3;
        u_xlat10 = ((vec4<f32>(x_905.x, x_905.y, x_905.x, x_905.y) * vec4<f32>(x_908.x, x_908.y, x_908.x, x_908.y)) + vec4<f32>(x_911.x, x_911.y, x_911.x, x_911.z));
        let x_915 : f32 = u_xlat4.w;
        u_xlat6.y = x_915;
        let x_918 : vec4<f32> = u_xlat1;
        let x_921 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_924 : vec4<f32> = u_xlat6;
        u_xlat11 = ((vec4<f32>(x_918.x, x_918.y, x_918.x, x_918.y) * vec4<f32>(x_921.x, x_921.y, x_921.x, x_921.y)) + vec4<f32>(x_924.x, x_924.y, x_924.z, x_924.y));
        let x_928 : vec4<f32> = u_xlat1;
        let x_931 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_934 : vec4<f32> = u_xlat6;
        u_xlat18 = ((vec2<f32>(x_928.x, x_928.y) * vec2<f32>(x_931.x, x_931.y)) + vec2<f32>(x_934.w, x_934.y));
        let x_938 : f32 = u_xlat6.y;
        u_xlat3.w = x_938;
        let x_941 : vec4<f32> = u_xlat1;
        let x_944 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_947 : vec4<f32> = u_xlat3;
        u_xlat39 = ((vec2<f32>(x_941.x, x_941.y) * vec2<f32>(x_944.x, x_944.y)) + vec2<f32>(x_947.x, x_947.w));
        let x_950 : vec4<f32> = u_xlat6;
        let x_951 : vec3<f32> = vec3<f32>(x_950.x, x_950.z, x_950.w);
        let x_952 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_951.x, x_952.y, x_951.y, x_951.z);
        let x_954 : vec4<f32> = u_xlat1;
        let x_957 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_960 : vec4<f32> = u_xlat4;
        u_xlat6 = ((vec4<f32>(x_954.x, x_954.y, x_954.x, x_954.y) * vec4<f32>(x_957.x, x_957.y, x_957.x, x_957.y)) + vec4<f32>(x_960.x, x_960.y, x_960.z, x_960.y));
        let x_964 : vec4<f32> = u_xlat1;
        let x_967 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_970 : vec4<f32> = u_xlat4;
        u_xlat34 = ((vec2<f32>(x_964.x, x_964.y) * vec2<f32>(x_967.x, x_967.y)) + vec2<f32>(x_970.w, x_970.y));
        let x_974 : f32 = u_xlat3.x;
        u_xlat4.x = x_974;
        let x_976 : vec4<f32> = u_xlat1;
        let x_979 : vec4<f32> = x_97.x_MainLightShadowmapSize;
        let x_982 : vec4<f32> = u_xlat4;
        let x_984 : vec2<f32> = ((vec2<f32>(x_976.x, x_976.y) * vec2<f32>(x_979.x, x_979.y)) + vec2<f32>(x_982.x, x_982.y));
        let x_985 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_984.x, x_984.y, x_985.z, x_985.w);
        let x_988 : vec4<f32> = u_xlat2;
        let x_990 : vec4<f32> = u_xlat5;
        u_xlat12 = (vec4<f32>(x_988.x, x_988.x, x_988.x, x_988.x) * x_990);
        let x_993 : vec4<f32> = u_xlat2;
        let x_995 : vec4<f32> = u_xlat5;
        u_xlat13 = (vec4<f32>(x_993.y, x_993.y, x_993.y, x_993.y) * x_995);
        let x_998 : vec4<f32> = u_xlat2;
        let x_1000 : vec4<f32> = u_xlat5;
        u_xlat14 = (vec4<f32>(x_998.z, x_998.z, x_998.z, x_998.z) * x_1000);
        let x_1002 : vec4<f32> = u_xlat2;
        let x_1004 : vec4<f32> = u_xlat5;
        u_xlat2 = (vec4<f32>(x_1002.w, x_1002.w, x_1002.w, x_1002.w) * x_1004);
        let x_1007 : vec4<f32> = u_xlat7;
        let x_1008 : vec2<f32> = vec2<f32>(x_1007.x, x_1007.y);
        let x_1010 : f32 = vs_TEXCOORD4.z;
        txVec13 = vec3<f32>(x_1008.x, x_1008.y, x_1010);
        let x_1017 : vec3<f32> = txVec13;
        let x_1019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1017.xy, x_1017.z);
        u_xlat3.x = x_1019;
        let x_1022 : vec4<f32> = u_xlat7;
        let x_1023 : vec2<f32> = vec2<f32>(x_1022.z, x_1022.w);
        let x_1025 : f32 = vs_TEXCOORD4.z;
        txVec14 = vec3<f32>(x_1023.x, x_1023.y, x_1025);
        let x_1033 : vec3<f32> = txVec14;
        let x_1035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1033.xy, x_1033.z);
        u_xlat48 = x_1035;
        let x_1036 : f32 = u_xlat48;
        let x_1038 : f32 = u_xlat12.y;
        u_xlat48 = (x_1036 * x_1038);
        let x_1041 : f32 = u_xlat12.x;
        let x_1043 : f32 = u_xlat3.x;
        let x_1045 : f32 = u_xlat48;
        u_xlat3.x = ((x_1041 * x_1043) + x_1045);
        let x_1049 : vec2<f32> = u_xlat31;
        let x_1051 : f32 = vs_TEXCOORD4.z;
        txVec15 = vec3<f32>(x_1049.x, x_1049.y, x_1051);
        let x_1058 : vec3<f32> = txVec15;
        let x_1060 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1058.xy, x_1058.z);
        u_xlat31.x = x_1060;
        let x_1063 : f32 = u_xlat12.z;
        let x_1065 : f32 = u_xlat31.x;
        let x_1068 : f32 = u_xlat3.x;
        u_xlat31.x = ((x_1063 * x_1065) + x_1068);
        let x_1072 : vec4<f32> = u_xlat10;
        let x_1073 : vec2<f32> = vec2<f32>(x_1072.x, x_1072.y);
        let x_1075 : f32 = vs_TEXCOORD4.z;
        txVec16 = vec3<f32>(x_1073.x, x_1073.y, x_1075);
        let x_1083 : vec3<f32> = txVec16;
        let x_1085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1083.xy, x_1083.z);
        u_xlat46 = x_1085;
        let x_1087 : f32 = u_xlat12.w;
        let x_1088 : f32 = u_xlat46;
        let x_1091 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1087 * x_1088) + x_1091);
        let x_1095 : vec4<f32> = u_xlat8;
        let x_1096 : vec2<f32> = vec2<f32>(x_1095.x, x_1095.y);
        let x_1098 : f32 = vs_TEXCOORD4.z;
        txVec17 = vec3<f32>(x_1096.x, x_1096.y, x_1098);
        let x_1105 : vec3<f32> = txVec17;
        let x_1107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1105.xy, x_1105.z);
        u_xlat46 = x_1107;
        let x_1109 : f32 = u_xlat13.x;
        let x_1110 : f32 = u_xlat46;
        let x_1113 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1109 * x_1110) + x_1113);
        let x_1117 : vec4<f32> = u_xlat8;
        let x_1118 : vec2<f32> = vec2<f32>(x_1117.z, x_1117.w);
        let x_1120 : f32 = vs_TEXCOORD4.z;
        txVec18 = vec3<f32>(x_1118.x, x_1118.y, x_1120);
        let x_1127 : vec3<f32> = txVec18;
        let x_1129 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1127.xy, x_1127.z);
        u_xlat46 = x_1129;
        let x_1131 : f32 = u_xlat13.y;
        let x_1132 : f32 = u_xlat46;
        let x_1135 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1131 * x_1132) + x_1135);
        let x_1139 : vec4<f32> = u_xlat9;
        let x_1140 : vec2<f32> = vec2<f32>(x_1139.x, x_1139.y);
        let x_1142 : f32 = vs_TEXCOORD4.z;
        txVec19 = vec3<f32>(x_1140.x, x_1140.y, x_1142);
        let x_1149 : vec3<f32> = txVec19;
        let x_1151 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1149.xy, x_1149.z);
        u_xlat46 = x_1151;
        let x_1153 : f32 = u_xlat13.z;
        let x_1154 : f32 = u_xlat46;
        let x_1157 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1153 * x_1154) + x_1157);
        let x_1161 : vec4<f32> = u_xlat10;
        let x_1162 : vec2<f32> = vec2<f32>(x_1161.z, x_1161.w);
        let x_1164 : f32 = vs_TEXCOORD4.z;
        txVec20 = vec3<f32>(x_1162.x, x_1162.y, x_1164);
        let x_1171 : vec3<f32> = txVec20;
        let x_1173 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1171.xy, x_1171.z);
        u_xlat46 = x_1173;
        let x_1175 : f32 = u_xlat13.w;
        let x_1176 : f32 = u_xlat46;
        let x_1179 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1175 * x_1176) + x_1179);
        let x_1183 : vec4<f32> = u_xlat11;
        let x_1184 : vec2<f32> = vec2<f32>(x_1183.x, x_1183.y);
        let x_1186 : f32 = vs_TEXCOORD4.z;
        txVec21 = vec3<f32>(x_1184.x, x_1184.y, x_1186);
        let x_1193 : vec3<f32> = txVec21;
        let x_1195 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1193.xy, x_1193.z);
        u_xlat46 = x_1195;
        let x_1197 : f32 = u_xlat14.x;
        let x_1198 : f32 = u_xlat46;
        let x_1201 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1197 * x_1198) + x_1201);
        let x_1205 : vec4<f32> = u_xlat11;
        let x_1206 : vec2<f32> = vec2<f32>(x_1205.z, x_1205.w);
        let x_1208 : f32 = vs_TEXCOORD4.z;
        txVec22 = vec3<f32>(x_1206.x, x_1206.y, x_1208);
        let x_1215 : vec3<f32> = txVec22;
        let x_1217 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1215.xy, x_1215.z);
        u_xlat46 = x_1217;
        let x_1219 : f32 = u_xlat14.y;
        let x_1220 : f32 = u_xlat46;
        let x_1223 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1219 * x_1220) + x_1223);
        let x_1227 : vec2<f32> = u_xlat18;
        let x_1229 : f32 = vs_TEXCOORD4.z;
        txVec23 = vec3<f32>(x_1227.x, x_1227.y, x_1229);
        let x_1236 : vec3<f32> = txVec23;
        let x_1238 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1236.xy, x_1236.z);
        u_xlat46 = x_1238;
        let x_1240 : f32 = u_xlat14.z;
        let x_1241 : f32 = u_xlat46;
        let x_1244 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1240 * x_1241) + x_1244);
        let x_1248 : vec2<f32> = u_xlat39;
        let x_1250 : f32 = vs_TEXCOORD4.z;
        txVec24 = vec3<f32>(x_1248.x, x_1248.y, x_1250);
        let x_1257 : vec3<f32> = txVec24;
        let x_1259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1257.xy, x_1257.z);
        u_xlat46 = x_1259;
        let x_1261 : f32 = u_xlat14.w;
        let x_1262 : f32 = u_xlat46;
        let x_1265 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1261 * x_1262) + x_1265);
        let x_1269 : vec4<f32> = u_xlat6;
        let x_1270 : vec2<f32> = vec2<f32>(x_1269.x, x_1269.y);
        let x_1272 : f32 = vs_TEXCOORD4.z;
        txVec25 = vec3<f32>(x_1270.x, x_1270.y, x_1272);
        let x_1279 : vec3<f32> = txVec25;
        let x_1281 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1279.xy, x_1279.z);
        u_xlat46 = x_1281;
        let x_1283 : f32 = u_xlat2.x;
        let x_1284 : f32 = u_xlat46;
        let x_1287 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1283 * x_1284) + x_1287);
        let x_1291 : vec4<f32> = u_xlat6;
        let x_1292 : vec2<f32> = vec2<f32>(x_1291.z, x_1291.w);
        let x_1294 : f32 = vs_TEXCOORD4.z;
        txVec26 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec26;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat46 = x_1303;
        let x_1305 : f32 = u_xlat2.y;
        let x_1306 : f32 = u_xlat46;
        let x_1309 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1305 * x_1306) + x_1309);
        let x_1313 : vec2<f32> = u_xlat34;
        let x_1315 : f32 = vs_TEXCOORD4.z;
        txVec27 = vec3<f32>(x_1313.x, x_1313.y, x_1315);
        let x_1322 : vec3<f32> = txVec27;
        let x_1324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1322.xy, x_1322.z);
        u_xlat46 = x_1324;
        let x_1326 : f32 = u_xlat2.z;
        let x_1327 : f32 = u_xlat46;
        let x_1330 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1326 * x_1327) + x_1330);
        let x_1334 : vec4<f32> = u_xlat1;
        let x_1335 : vec2<f32> = vec2<f32>(x_1334.x, x_1334.y);
        let x_1337 : f32 = vs_TEXCOORD4.z;
        txVec28 = vec3<f32>(x_1335.x, x_1335.y, x_1337);
        let x_1344 : vec3<f32> = txVec28;
        let x_1346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1344.xy, x_1344.z);
        u_xlat1.x = x_1346;
        let x_1349 : f32 = u_xlat2.w;
        let x_1351 : f32 = u_xlat1.x;
        let x_1354 : f32 = u_xlat31.x;
        u_xlat45 = ((x_1349 * x_1351) + x_1354);
      }
    }
  } else {
    let x_1358 : vec4<f32> = vs_TEXCOORD4;
    let x_1359 : vec2<f32> = vec2<f32>(x_1358.x, x_1358.y);
    let x_1361 : f32 = vs_TEXCOORD4.z;
    txVec29 = vec3<f32>(x_1359.x, x_1359.y, x_1361);
    let x_1368 : vec3<f32> = txVec29;
    let x_1370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1368.xy, x_1368.z);
    u_xlat45 = x_1370;
  }
  let x_1372 : f32 = x_97.x_MainLightShadowParams.x;
  u_xlat1.x = (-(x_1372) + 1.0f);
  let x_1376 : f32 = u_xlat45;
  let x_1378 : f32 = x_97.x_MainLightShadowParams.x;
  let x_1381 : f32 = u_xlat1.x;
  u_xlat45 = ((x_1376 * x_1378) + x_1381);
  let x_1384 : f32 = vs_TEXCOORD4.z;
  u_xlatb1 = (0.0f >= x_1384);
  let x_1388 : f32 = vs_TEXCOORD4.z;
  u_xlatb16 = (x_1388 >= 1.0f);
  let x_1390 : bool = u_xlatb16;
  let x_1391 : bool = u_xlatb1;
  u_xlatb1 = (x_1390 | x_1391);
  let x_1393 : bool = u_xlatb1;
  let x_1394 : f32 = u_xlat45;
  u_xlat45 = select(x_1394, 1.0f, x_1393);
  let x_1397 : vec4<f32> = vs_TEXCOORD3;
  let x_1399 : f32 = u_xlat45;
  let x_1402 : vec4<f32> = u_xlat0;
  let x_1404 : vec3<f32> = ((vec3<f32>(x_1397.x, x_1397.y, x_1397.z) * vec3<f32>(x_1399, x_1399, x_1399)) + vec3<f32>(x_1402.x, x_1402.y, x_1402.z));
  let x_1405 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1404.x, x_1404.y, x_1404.z, x_1405.w);
  let x_1413 : vec2<f32> = vs_TEXCOORD0;
  let x_1415 : f32 = x_26.x_GlobalMipBias.x;
  let x_1416 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, x_1413, x_1415);
  let x_1417 : vec3<f32> = vec3<f32>(x_1416.x, x_1416.y, x_1416.z);
  let x_1418 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1417.x, x_1417.y, x_1417.z, x_1418.w);
  let x_1420 : vec4<f32> = u_xlat1;
  let x_1423 : vec4<f32> = vs_TEXCOORD2;
  let x_1425 : vec3<f32> = (vec3<f32>(x_1420.x, x_1420.y, x_1420.z) * vec3<f32>(x_1423.x, x_1423.y, x_1423.z));
  let x_1426 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1425.x, x_1425.y, x_1425.z, x_1426.w);
  let x_1430 : vec4<f32> = u_xlat0;
  let x_1432 : vec4<f32> = u_xlat1;
  let x_1434 : vec3<f32> = (vec3<f32>(x_1430.x, x_1430.y, x_1430.z) * vec3<f32>(x_1432.x, x_1432.y, x_1432.z));
  let x_1435 : vec4<f32> = SV_Target3;
  SV_Target3 = vec4<f32>(x_1434.x, x_1434.y, x_1434.z, x_1435.w);
  SV_Target0 = vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f);
  SV_Target1 = vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f);
  let x_1442 : vec3<f32> = vs_TEXCOORD5;
  let x_1443 : vec4<f32> = SV_Target2;
  SV_Target2 = vec4<f32>(x_1442.x, x_1442.y, x_1442.z, x_1443.w);
  SV_Target2.w = 0.0f;
  SV_Target3.w = 1.0f;
  return;
}

struct main_out {
  @location(3)
  SV_Target3_1 : vec4<f32>,
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
  @location(2)
  SV_Target2_1 : vec4<f32>,
}

@fragment
fn main(@location(1) vs_TEXCOORD1_param : vec2<f32>, @location(5) vs_TEXCOORD5_param : vec3<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec2<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target3, SV_Target0, SV_Target1, SV_Target2);
}

