struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_NightFade : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var Texture2D_52571568 : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_52571568 : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_45 : PGlobals;

@group(0) @binding(5) var Texture2D_8BA53EED : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_8BA53EED : sampler;

@group(0) @binding(6) var Texture2D_AB84E4D0 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_AB84E4D0 : sampler;

@group(1) @binding(2) var<uniform> x_120 : UnityPerDraw;

@group(0) @binding(4) var Texture2D_F0A81025 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_F0A81025 : sampler;

var<private> vs_INTERP2 : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_305 : MainLightShadows;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2376 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat45 : f32;
  var u_xlatb45 : bool;
  var u_xlat3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat68 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlatb66 : bool;
  var u_xlat5 : vec4<f32>;
  var x_289 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlatb5 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlat69 : f32;
  var u_xlat70 : f32;
  var u_xlat25 : f32;
  var u_xlat71 : f32;
  var u_xlat72 : f32;
  var u_xlat47 : f32;
  var u_xlatb71 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb7 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat29 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat74 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb27 : bool;
  var u_xlatb49 : bool;
  var x_2006 : f32;
  var u_xlat27 : vec3<f32>;
  var u_xlat49 : f32;
  var u_xlatu68 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu25 : u32;
  var u_xlati71 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati25 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_40 : vec4<f32> = vs_INTERP3;
  let x_51 : f32 = x_45.x_GlobalMipBias.x;
  let x_52 : vec4<f32> = textureSampleBias(Texture2D_52571568, samplerTexture2D_52571568, vec2<f32>(x_40.x, x_40.y), x_51);
  u_xlat0 = vec3<f32>(x_52.x, x_52.y, x_52.z);
  let x_60 : vec4<f32> = vs_INTERP3;
  let x_63 : f32 = x_45.x_GlobalMipBias.x;
  let x_64 : vec4<f32> = textureSampleBias(Texture2D_8BA53EED, samplerTexture2D_8BA53EED, vec2<f32>(x_60.x, x_60.y), x_63);
  let x_65 : vec3<f32> = vec3<f32>(x_64.x, x_64.y, x_64.w);
  let x_66 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_65.x, x_65.y, x_65.z, x_66.w);
  let x_70 : f32 = u_xlat1.x;
  let x_73 : f32 = u_xlat1.z;
  u_xlat1.x = (x_70 * x_73);
  let x_76 : vec4<f32> = u_xlat1;
  let x_83 : vec2<f32> = ((vec2<f32>(x_76.x, x_76.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_84 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  let x_87 : vec4<f32> = u_xlat1;
  let x_89 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec2<f32>(x_87.x, x_87.y), vec2<f32>(x_89.x, x_89.y));
  let x_92 : f32 = u_xlat66;
  u_xlat66 = min(x_92, 1.0f);
  let x_94 : f32 = u_xlat66;
  u_xlat66 = (-(x_94) + 1.0f);
  let x_97 : f32 = u_xlat66;
  u_xlat66 = sqrt(x_97);
  let x_99 : f32 = u_xlat66;
  u_xlat66 = max(x_99, 1.00000002e-16f);
  let x_108 : vec4<f32> = vs_INTERP3;
  let x_111 : f32 = x_45.x_GlobalMipBias.x;
  let x_112 : vec4<f32> = textureSampleBias(Texture2D_AB84E4D0, samplerTexture2D_AB84E4D0, vec2<f32>(x_108.x, x_108.y), x_111);
  let x_113 : vec3<f32> = vec3<f32>(x_112.x, x_112.y, x_112.z);
  let x_114 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_125 : vec4<f32> = x_120.unity_ObjectToWorld[3i];
  let x_128 : vec4<f32> = x_120.unity_ObjectToWorld[3i];
  u_xlat45 = dot(vec3<f32>(x_125.x, x_125.y, x_125.z), vec3<f32>(x_128.x, x_128.y, x_128.z));
  let x_131 : f32 = u_xlat45;
  u_xlat45 = sqrt(x_131);
  let x_133 : f32 = u_xlat45;
  u_xlat45 = fract(x_133);
  let x_135 : f32 = u_xlat45;
  let x_138 : f32 = x_45.x_NightFade;
  u_xlat45 = (x_135 + x_138);
  let x_143 : f32 = u_xlat45;
  u_xlatb45 = (x_143 >= 1.0f);
  let x_145 : bool = u_xlatb45;
  u_xlat45 = select(0.0f, 1.0f, x_145);
  let x_154 : vec4<f32> = vs_INTERP3;
  let x_157 : f32 = x_45.x_GlobalMipBias.x;
  let x_158 : vec4<f32> = textureSampleBias(Texture2D_F0A81025, samplerTexture2D_F0A81025, vec2<f32>(x_154.x, x_154.y), x_157);
  u_xlat3 = vec3<f32>(x_158.x, x_158.w, x_158.y);
  let x_163 : f32 = vs_INTERP2.w;
  u_xlatb67 = (0.0f < x_163);
  let x_166 : bool = u_xlatb67;
  u_xlat67 = select(-1.0f, 1.0f, x_166);
  let x_170 : f32 = x_120.unity_WorldTransformParams.w;
  u_xlatb68 = (x_170 >= 0.0f);
  let x_173 : bool = u_xlatb68;
  u_xlat68 = select(-1.0f, 1.0f, x_173);
  let x_175 : f32 = u_xlat67;
  let x_176 : f32 = u_xlat68;
  u_xlat67 = (x_175 * x_176);
  let x_181 : vec3<f32> = vs_INTERP1;
  let x_183 : vec4<f32> = vs_INTERP2;
  let x_185 : vec3<f32> = (vec3<f32>(x_181.z, x_181.x, x_181.y) * vec3<f32>(x_183.y, x_183.z, x_183.x));
  let x_186 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_185.x, x_185.y, x_185.z, x_186.w);
  let x_188 : vec3<f32> = vs_INTERP1;
  let x_190 : vec4<f32> = vs_INTERP2;
  let x_193 : vec4<f32> = u_xlat4;
  let x_196 : vec3<f32> = ((vec3<f32>(x_188.y, x_188.z, x_188.x) * vec3<f32>(x_190.z, x_190.x, x_190.y)) + -(vec3<f32>(x_193.x, x_193.y, x_193.z)));
  let x_197 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_196.x, x_196.y, x_196.z, x_197.w);
  let x_199 : f32 = u_xlat67;
  let x_201 : vec4<f32> = u_xlat4;
  let x_203 : vec3<f32> = (vec3<f32>(x_199, x_199, x_199) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat1;
  let x_208 : vec4<f32> = u_xlat4;
  let x_210 : vec3<f32> = (vec3<f32>(x_206.y, x_206.y, x_206.y) * vec3<f32>(x_208.x, x_208.y, x_208.z));
  let x_211 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec4<f32> = u_xlat1;
  let x_215 : vec4<f32> = vs_INTERP2;
  let x_218 : vec4<f32> = u_xlat4;
  let x_220 : vec3<f32> = ((vec3<f32>(x_213.x, x_213.x, x_213.x) * vec3<f32>(x_215.x, x_215.y, x_215.z)) + vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_221 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_220.x, x_220.y, x_221.z, x_220.z);
  let x_223 : f32 = u_xlat66;
  let x_225 : vec3<f32> = vs_INTERP1;
  let x_227 : vec4<f32> = u_xlat1;
  let x_229 : vec3<f32> = ((vec3<f32>(x_223, x_223, x_223) * x_225) + vec3<f32>(x_227.x, x_227.y, x_227.w));
  let x_230 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_229.x, x_229.y, x_230.z, x_229.z);
  let x_232 : vec4<f32> = u_xlat1;
  let x_234 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec3<f32>(x_232.x, x_232.y, x_232.w), vec3<f32>(x_234.x, x_234.y, x_234.w));
  let x_237 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_237);
  let x_239 : f32 = u_xlat66;
  let x_241 : vec4<f32> = u_xlat1;
  let x_243 : vec3<f32> = (vec3<f32>(x_239, x_239, x_239) * vec3<f32>(x_241.x, x_241.y, x_241.w));
  let x_244 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_243.x, x_243.y, x_243.z, x_244.w);
  let x_249 : f32 = x_45.unity_OrthoParams.w;
  u_xlatb66 = (x_249 == 0.0f);
  let x_252 : vec3<f32> = vs_INTERP0;
  let x_257 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  let x_258 : vec3<f32> = (-(x_252) + x_257);
  let x_259 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_258.x, x_258.y, x_259.z, x_258.z);
  let x_261 : vec4<f32> = u_xlat1;
  let x_263 : vec4<f32> = u_xlat1;
  u_xlat68 = dot(vec3<f32>(x_261.x, x_261.y, x_261.w), vec3<f32>(x_263.x, x_263.y, x_263.w));
  let x_266 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_266);
  let x_268 : vec4<f32> = u_xlat1;
  let x_270 : f32 = u_xlat68;
  let x_272 : vec3<f32> = (vec3<f32>(x_268.x, x_268.y, x_268.w) * vec3<f32>(x_270, x_270, x_270));
  let x_273 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_272.x, x_272.y, x_273.z, x_272.z);
  let x_278 : f32 = x_45.unity_MatrixV[0i].z;
  u_xlat5.x = x_278;
  let x_281 : f32 = x_45.unity_MatrixV[1i].z;
  u_xlat5.y = x_281;
  let x_286 : f32 = x_45.unity_MatrixV[2i].z;
  u_xlat5.z = x_286;
  let x_288 : bool = u_xlatb66;
  if (x_288) {
    let x_292 : vec4<f32> = u_xlat1;
    x_289 = vec3<f32>(x_292.x, x_292.y, x_292.w);
  } else {
    let x_295 : vec4<f32> = u_xlat5;
    x_289 = vec3<f32>(x_295.x, x_295.y, x_295.z);
  }
  let x_297 : vec3<f32> = x_289;
  let x_298 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_297.x, x_297.y, x_298.z, x_297.z);
  let x_300 : vec3<f32> = vs_INTERP0;
  let x_307 : vec4<f32> = x_305.x_CascadeShadowSplitSpheres0;
  let x_310 : vec3<f32> = (x_300 + -(vec3<f32>(x_307.x, x_307.y, x_307.z)));
  let x_311 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_310.x, x_310.y, x_310.z, x_311.w);
  let x_314 : vec3<f32> = vs_INTERP0;
  let x_316 : vec4<f32> = x_305.x_CascadeShadowSplitSpheres1;
  let x_319 : vec3<f32> = (x_314 + -(vec3<f32>(x_316.x, x_316.y, x_316.z)));
  let x_320 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_319.x, x_319.y, x_319.z, x_320.w);
  let x_323 : vec3<f32> = vs_INTERP0;
  let x_325 : vec4<f32> = x_305.x_CascadeShadowSplitSpheres2;
  let x_328 : vec3<f32> = (x_323 + -(vec3<f32>(x_325.x, x_325.y, x_325.z)));
  let x_329 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_328.x, x_328.y, x_328.z, x_329.w);
  let x_332 : vec3<f32> = vs_INTERP0;
  let x_335 : vec4<f32> = x_305.x_CascadeShadowSplitSpheres3;
  u_xlat8 = (x_332 + -(vec3<f32>(x_335.x, x_335.y, x_335.z)));
  let x_339 : vec4<f32> = u_xlat5;
  let x_341 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec3<f32>(x_339.x, x_339.y, x_339.z), vec3<f32>(x_341.x, x_341.y, x_341.z));
  let x_345 : vec4<f32> = u_xlat6;
  let x_347 : vec4<f32> = u_xlat6;
  u_xlat5.y = dot(vec3<f32>(x_345.x, x_345.y, x_345.z), vec3<f32>(x_347.x, x_347.y, x_347.z));
  let x_351 : vec4<f32> = u_xlat7;
  let x_353 : vec4<f32> = u_xlat7;
  u_xlat5.z = dot(vec3<f32>(x_351.x, x_351.y, x_351.z), vec3<f32>(x_353.x, x_353.y, x_353.z));
  let x_357 : vec3<f32> = u_xlat8;
  let x_358 : vec3<f32> = u_xlat8;
  u_xlat5.w = dot(x_357, x_358);
  let x_364 : vec4<f32> = u_xlat5;
  let x_367 : vec4<f32> = x_305.x_CascadeShadowSplitSphereRadii;
  u_xlatb5 = (x_364 < x_367);
  let x_370 : bool = u_xlatb5.x;
  u_xlat6.x = select(0.0f, 1.0f, x_370);
  let x_374 : bool = u_xlatb5.y;
  u_xlat6.y = select(0.0f, 1.0f, x_374);
  let x_378 : bool = u_xlatb5.z;
  u_xlat6.z = select(0.0f, 1.0f, x_378);
  let x_382 : bool = u_xlatb5.w;
  u_xlat6.w = select(0.0f, 1.0f, x_382);
  let x_386 : bool = u_xlatb5.x;
  u_xlat5.x = select(-0.0f, -1.0f, x_386);
  let x_391 : bool = u_xlatb5.y;
  u_xlat5.y = select(-0.0f, -1.0f, x_391);
  let x_395 : bool = u_xlatb5.z;
  u_xlat5.z = select(-0.0f, -1.0f, x_395);
  let x_398 : vec4<f32> = u_xlat5;
  let x_400 : vec4<f32> = u_xlat6;
  let x_402 : vec3<f32> = (vec3<f32>(x_398.x, x_398.y, x_398.z) + vec3<f32>(x_400.y, x_400.z, x_400.w));
  let x_403 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_402.x, x_402.y, x_402.z, x_403.w);
  let x_405 : vec4<f32> = u_xlat5;
  let x_408 : vec3<f32> = max(vec3<f32>(x_405.x, x_405.y, x_405.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_409 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_409.x, x_408.x, x_408.y, x_408.z);
  let x_411 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_411, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_416 : f32 = u_xlat66;
  u_xlat66 = (-(x_416) + 4.0f);
  let x_421 : f32 = u_xlat66;
  u_xlatu66 = u32(x_421);
  let x_425 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_425) << bitcast<u32>(2i));
  let x_428 : vec3<f32> = vs_INTERP0;
  let x_430 : i32 = u_xlati66;
  let x_433 : i32 = u_xlati66;
  let x_437 : vec4<f32> = x_305.x_MainLightWorldToShadow[((x_430 + 1i) / 4i)][((x_433 + 1i) % 4i)];
  let x_439 : vec3<f32> = (vec3<f32>(x_428.y, x_428.y, x_428.y) * vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_440 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_439.x, x_439.y, x_439.z, x_440.w);
  let x_442 : i32 = u_xlati66;
  let x_444 : i32 = u_xlati66;
  let x_447 : vec4<f32> = x_305.x_MainLightWorldToShadow[(x_442 / 4i)][(x_444 % 4i)];
  let x_449 : vec3<f32> = vs_INTERP0;
  let x_452 : vec4<f32> = u_xlat5;
  let x_454 : vec3<f32> = ((vec3<f32>(x_447.x, x_447.y, x_447.z) * vec3<f32>(x_449.x, x_449.x, x_449.x)) + vec3<f32>(x_452.x, x_452.y, x_452.z));
  let x_455 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_457 : i32 = u_xlati66;
  let x_460 : i32 = u_xlati66;
  let x_464 : vec4<f32> = x_305.x_MainLightWorldToShadow[((x_457 + 2i) / 4i)][((x_460 + 2i) % 4i)];
  let x_466 : vec3<f32> = vs_INTERP0;
  let x_469 : vec4<f32> = u_xlat5;
  let x_471 : vec3<f32> = ((vec3<f32>(x_464.x, x_464.y, x_464.z) * vec3<f32>(x_466.z, x_466.z, x_466.z)) + vec3<f32>(x_469.x, x_469.y, x_469.z));
  let x_472 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_471.x, x_471.y, x_471.z, x_472.w);
  let x_474 : vec4<f32> = u_xlat5;
  let x_476 : i32 = u_xlati66;
  let x_479 : i32 = u_xlati66;
  let x_483 : vec4<f32> = x_305.x_MainLightWorldToShadow[((x_476 + 3i) / 4i)][((x_479 + 3i) % 4i)];
  let x_485 : vec3<f32> = (vec3<f32>(x_474.x, x_474.y, x_474.z) + vec3<f32>(x_483.x, x_483.y, x_483.z));
  let x_486 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_485.x, x_485.y, x_485.z, x_486.w);
  let x_489 : f32 = vs_INTERP0.y;
  let x_491 : f32 = x_45.unity_MatrixV[1i].z;
  u_xlat66 = (x_489 * x_491);
  let x_494 : f32 = x_45.unity_MatrixV[0i].z;
  let x_496 : f32 = vs_INTERP0.x;
  let x_498 : f32 = u_xlat66;
  u_xlat66 = ((x_494 * x_496) + x_498);
  let x_501 : f32 = x_45.unity_MatrixV[2i].z;
  let x_503 : f32 = vs_INTERP0.z;
  let x_505 : f32 = u_xlat66;
  u_xlat66 = ((x_501 * x_503) + x_505);
  let x_507 : f32 = u_xlat66;
  let x_509 : f32 = x_45.unity_MatrixV[3i].z;
  u_xlat66 = (x_507 + x_509);
  let x_511 : f32 = u_xlat66;
  let x_515 : f32 = x_45.x_ProjectionParams.y;
  u_xlat66 = (-(x_511) + -(x_515));
  let x_518 : f32 = u_xlat66;
  u_xlat66 = max(x_518, 0.0f);
  let x_520 : f32 = u_xlat66;
  let x_523 : f32 = x_45.unity_FogParams.x;
  u_xlat66 = (x_520 * x_523);
  u_xlat4.w = 1.0f;
  let x_528 : vec4<f32> = x_120.unity_SHAr;
  let x_529 : vec4<f32> = u_xlat4;
  u_xlat6.x = dot(x_528, x_529);
  let x_534 : vec4<f32> = x_120.unity_SHAg;
  let x_535 : vec4<f32> = u_xlat4;
  u_xlat6.y = dot(x_534, x_535);
  let x_540 : vec4<f32> = x_120.unity_SHAb;
  let x_541 : vec4<f32> = u_xlat4;
  u_xlat6.z = dot(x_540, x_541);
  let x_544 : vec4<f32> = u_xlat4;
  let x_546 : vec4<f32> = u_xlat4;
  u_xlat7 = (vec4<f32>(x_544.y, x_544.z, x_544.z, x_544.x) * vec4<f32>(x_546.x, x_546.y, x_546.z, x_546.z));
  let x_551 : vec4<f32> = x_120.unity_SHBr;
  let x_552 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(x_551, x_552);
  let x_557 : vec4<f32> = x_120.unity_SHBg;
  let x_558 : vec4<f32> = u_xlat7;
  u_xlat8.y = dot(x_557, x_558);
  let x_563 : vec4<f32> = x_120.unity_SHBb;
  let x_564 : vec4<f32> = u_xlat7;
  u_xlat8.z = dot(x_563, x_564);
  let x_568 : f32 = u_xlat4.y;
  let x_570 : f32 = u_xlat4.y;
  u_xlat68 = (x_568 * x_570);
  let x_573 : f32 = u_xlat4.x;
  let x_575 : f32 = u_xlat4.x;
  let x_577 : f32 = u_xlat68;
  u_xlat68 = ((x_573 * x_575) + -(x_577));
  let x_582 : vec4<f32> = x_120.unity_SHC;
  let x_584 : f32 = u_xlat68;
  let x_587 : vec3<f32> = u_xlat8;
  let x_588 : vec3<f32> = ((vec3<f32>(x_582.x, x_582.y, x_582.z) * vec3<f32>(x_584, x_584, x_584)) + x_587);
  let x_589 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_588.x, x_588.y, x_588.z, x_589.w);
  let x_591 : vec4<f32> = u_xlat6;
  let x_593 : vec4<f32> = u_xlat7;
  let x_595 : vec3<f32> = (vec3<f32>(x_591.x, x_591.y, x_591.z) + vec3<f32>(x_593.x, x_593.y, x_593.z));
  let x_596 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_595.x, x_595.y, x_595.z, x_596.w);
  let x_598 : vec4<f32> = u_xlat6;
  let x_600 : vec3<f32> = max(vec3<f32>(x_598.x, x_598.y, x_598.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_601 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_600.x, x_600.y, x_600.z, x_601.w);
  let x_605 : vec4<f32> = x_45.x_ScaledScreenParams;
  let x_606 : vec2<f32> = vec2<f32>(x_605.x, x_605.y);
  let x_610 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_606.x, x_606.y));
  let x_611 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
  let x_613 : vec4<f32> = u_xlat7;
  let x_615 : vec4<f32> = hlslcc_FragCoord;
  let x_617 : vec2<f32> = (vec2<f32>(x_613.x, x_613.y) * vec2<f32>(x_615.x, x_615.y));
  let x_618 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_617.x, x_617.y, x_618.z, x_618.w);
  let x_621 : f32 = u_xlat7.y;
  let x_624 : f32 = x_45.x_ScaleBiasRt.x;
  let x_627 : f32 = x_45.x_ScaleBiasRt.y;
  u_xlat68 = ((x_621 * x_624) + x_627);
  let x_629 : f32 = u_xlat68;
  u_xlat7.z = (-(x_629) + 1.0f);
  let x_633 : vec3<f32> = u_xlat3;
  let x_634 : vec2<f32> = vec2<f32>(x_633.x, x_633.y);
  let x_635 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_634.x, x_634.y, x_635.z);
  let x_637 : vec3<f32> = u_xlat3;
  let x_641 : vec2<f32> = clamp(vec2<f32>(x_637.x, x_637.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_642 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_641.x, x_641.y, x_642.z);
  let x_645 : f32 = u_xlat3.x;
  u_xlat68 = ((-(x_645) * 0.959999979f) + 0.959999979f);
  let x_651 : f32 = u_xlat68;
  u_xlat69 = (-(x_651) + 1.0f);
  let x_654 : vec3<f32> = u_xlat0;
  let x_655 : f32 = u_xlat68;
  u_xlat8 = (x_654 * vec3<f32>(x_655, x_655, x_655));
  let x_658 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_658 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_662 : vec3<f32> = u_xlat3;
  let x_664 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_662.x, x_662.x, x_662.x) * x_664) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_670 : f32 = u_xlat3.y;
  u_xlat68 = (-(x_670) + 1.0f);
  let x_673 : f32 = u_xlat68;
  let x_674 : f32 = u_xlat68;
  u_xlat3.x = (x_673 * x_674);
  let x_678 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_678, 0.0078125f);
  let x_684 : f32 = u_xlat3.x;
  let x_686 : f32 = u_xlat3.x;
  u_xlat70 = (x_684 * x_686);
  let x_689 : f32 = u_xlat69;
  let x_691 : f32 = u_xlat3.y;
  u_xlat25 = (x_689 + x_691);
  let x_693 : f32 = u_xlat25;
  u_xlat25 = min(x_693, 1.0f);
  let x_696 : f32 = u_xlat3.x;
  u_xlat69 = ((x_696 * 4.0f) + 2.0f);
  let x_705 : vec4<f32> = u_xlat7;
  let x_708 : f32 = x_45.x_GlobalMipBias.x;
  let x_709 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_705.x, x_705.z), x_708);
  u_xlat71 = x_709.x;
  let x_712 : f32 = u_xlat71;
  u_xlat72 = (x_712 + -1.0f);
  let x_715 : f32 = x_45.x_AmbientOcclusionParam.w;
  let x_716 : f32 = u_xlat72;
  u_xlat72 = ((x_715 * x_716) + 1.0f);
  let x_721 : f32 = u_xlat3.z;
  let x_722 : f32 = u_xlat71;
  u_xlat47 = min(x_721, x_722);
  let x_726 : f32 = x_305.x_MainLightShadowParams.y;
  u_xlatb71 = (0.0f < x_726);
  let x_728 : bool = u_xlatb71;
  if (x_728) {
    let x_732 : f32 = x_305.x_MainLightShadowParams.y;
    u_xlatb71 = (x_732 == 1.0f);
    let x_734 : bool = u_xlatb71;
    if (x_734) {
      let x_737 : vec4<f32> = u_xlat5;
      let x_740 : vec4<f32> = x_305.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_737.x, x_737.y, x_737.x, x_737.y) + x_740);
      let x_743 : vec4<f32> = u_xlat7;
      let x_744 : vec2<f32> = vec2<f32>(x_743.x, x_743.y);
      let x_746 : f32 = u_xlat5.z;
      txVec0 = vec3<f32>(x_744.x, x_744.y, x_746);
      let x_759 : vec3<f32> = txVec0;
      let x_761 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_759.xy, x_759.z);
      u_xlat9.x = x_761;
      let x_764 : vec4<f32> = u_xlat7;
      let x_765 : vec2<f32> = vec2<f32>(x_764.z, x_764.w);
      let x_767 : f32 = u_xlat5.z;
      txVec1 = vec3<f32>(x_765.x, x_765.y, x_767);
      let x_774 : vec3<f32> = txVec1;
      let x_776 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_774.xy, x_774.z);
      u_xlat9.y = x_776;
      let x_778 : vec4<f32> = u_xlat5;
      let x_781 : vec4<f32> = x_305.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_778.x, x_778.y, x_778.x, x_778.y) + x_781);
      let x_784 : vec4<f32> = u_xlat7;
      let x_785 : vec2<f32> = vec2<f32>(x_784.x, x_784.y);
      let x_787 : f32 = u_xlat5.z;
      txVec2 = vec3<f32>(x_785.x, x_785.y, x_787);
      let x_794 : vec3<f32> = txVec2;
      let x_796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_794.xy, x_794.z);
      u_xlat9.z = x_796;
      let x_799 : vec4<f32> = u_xlat7;
      let x_800 : vec2<f32> = vec2<f32>(x_799.z, x_799.w);
      let x_802 : f32 = u_xlat5.z;
      txVec3 = vec3<f32>(x_800.x, x_800.y, x_802);
      let x_809 : vec3<f32> = txVec3;
      let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
      u_xlat9.w = x_811;
      let x_813 : vec4<f32> = u_xlat9;
      u_xlat71 = dot(x_813, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_820 : f32 = x_305.x_MainLightShadowParams.y;
      u_xlatb7 = (x_820 == 2.0f);
      let x_822 : bool = u_xlatb7;
      if (x_822) {
        let x_825 : vec4<f32> = u_xlat5;
        let x_828 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_833 : vec2<f32> = ((vec2<f32>(x_825.x, x_825.y) * vec2<f32>(x_828.z, x_828.w)) + vec2<f32>(0.5f, 0.5f));
        let x_834 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_833.x, x_833.y, x_834.z, x_834.w);
        let x_836 : vec4<f32> = u_xlat7;
        let x_838 : vec2<f32> = floor(vec2<f32>(x_836.x, x_836.y));
        let x_839 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_838.x, x_838.y, x_839.z, x_839.w);
        let x_843 : vec4<f32> = u_xlat5;
        let x_846 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_849 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_843.x, x_843.y) * vec2<f32>(x_846.z, x_846.w)) + -(vec2<f32>(x_849.x, x_849.y)));
        let x_853 : vec2<f32> = u_xlat51;
        u_xlat9 = (vec4<f32>(x_853.x, x_853.x, x_853.y, x_853.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_858 : vec4<f32> = u_xlat9;
        let x_860 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_858.x, x_858.x, x_858.z, x_858.z) * vec4<f32>(x_860.x, x_860.x, x_860.z, x_860.z));
        let x_863 : vec4<f32> = u_xlat10;
        let x_867 : vec2<f32> = (vec2<f32>(x_863.y, x_863.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_868 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_868.y, x_867.y, x_868.w);
        let x_870 : vec4<f32> = u_xlat10;
        let x_873 : vec2<f32> = u_xlat51;
        let x_875 : vec2<f32> = ((vec2<f32>(x_870.x, x_870.z) * vec2<f32>(0.5f, 0.5f)) + -(x_873));
        let x_876 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_875.x, x_875.y, x_876.z, x_876.w);
        let x_879 : vec2<f32> = u_xlat51;
        u_xlat54 = (-(x_879) + vec2<f32>(1.0f, 1.0f));
        let x_883 : vec2<f32> = u_xlat51;
        let x_885 : vec2<f32> = min(x_883, vec2<f32>(0.0f, 0.0f));
        let x_886 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_885.x, x_885.y, x_886.z, x_886.w);
        let x_888 : vec4<f32> = u_xlat11;
        let x_891 : vec4<f32> = u_xlat11;
        let x_894 : vec2<f32> = u_xlat54;
        let x_895 : vec2<f32> = ((-(vec2<f32>(x_888.x, x_888.y)) * vec2<f32>(x_891.x, x_891.y)) + x_894);
        let x_896 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_895.x, x_895.y, x_896.z, x_896.w);
        let x_898 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_898, vec2<f32>(0.0f, 0.0f));
        let x_900 : vec2<f32> = u_xlat51;
        let x_902 : vec2<f32> = u_xlat51;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_900) * x_902) + vec2<f32>(x_904.y, x_904.w));
        let x_907 : vec4<f32> = u_xlat11;
        let x_909 : vec2<f32> = (vec2<f32>(x_907.x, x_907.y) + vec2<f32>(1.0f, 1.0f));
        let x_910 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_909.x, x_909.y, x_910.z, x_910.w);
        let x_912 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_912 + vec2<f32>(1.0f, 1.0f));
        let x_915 : vec4<f32> = u_xlat10;
        let x_919 : vec2<f32> = (vec2<f32>(x_915.x, x_915.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_920 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_919.x, x_919.y, x_920.z, x_920.w);
        let x_922 : vec2<f32> = u_xlat54;
        let x_923 : vec2<f32> = (x_922 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_924 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat11;
        let x_928 : vec2<f32> = (vec2<f32>(x_926.x, x_926.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_929 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_932 : vec2<f32> = u_xlat51;
        let x_933 : vec2<f32> = (x_932 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_934 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_933.x, x_933.y, x_934.z, x_934.w);
        let x_936 : vec4<f32> = u_xlat9;
        u_xlat51 = (vec2<f32>(x_936.y, x_936.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_940 : f32 = u_xlat11.x;
        u_xlat12.z = x_940;
        let x_943 : f32 = u_xlat51.x;
        u_xlat12.w = x_943;
        let x_946 : f32 = u_xlat13.x;
        u_xlat10.z = x_946;
        let x_949 : f32 = u_xlat9.x;
        u_xlat10.w = x_949;
        let x_952 : vec4<f32> = u_xlat10;
        let x_954 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_952.z, x_952.w, x_952.x, x_952.z) + vec4<f32>(x_954.z, x_954.w, x_954.x, x_954.z));
        let x_958 : f32 = u_xlat12.y;
        u_xlat11.z = x_958;
        let x_961 : f32 = u_xlat51.y;
        u_xlat11.w = x_961;
        let x_964 : f32 = u_xlat10.y;
        u_xlat13.z = x_964;
        let x_967 : f32 = u_xlat9.z;
        u_xlat13.w = x_967;
        let x_969 : vec4<f32> = u_xlat11;
        let x_971 : vec4<f32> = u_xlat13;
        let x_973 : vec3<f32> = (vec3<f32>(x_969.z, x_969.y, x_969.w) + vec3<f32>(x_971.z, x_971.y, x_971.w));
        let x_974 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_973.x, x_973.y, x_973.z, x_974.w);
        let x_976 : vec4<f32> = u_xlat10;
        let x_978 : vec4<f32> = u_xlat14;
        let x_980 : vec3<f32> = (vec3<f32>(x_976.x, x_976.z, x_976.w) / vec3<f32>(x_978.z, x_978.w, x_978.y));
        let x_981 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_980.x, x_980.y, x_980.z, x_981.w);
        let x_983 : vec4<f32> = u_xlat10;
        let x_989 : vec3<f32> = (vec3<f32>(x_983.x, x_983.y, x_983.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_990 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_989.x, x_989.y, x_989.z, x_990.w);
        let x_992 : vec4<f32> = u_xlat13;
        let x_994 : vec4<f32> = u_xlat9;
        let x_996 : vec3<f32> = (vec3<f32>(x_992.z, x_992.y, x_992.w) / vec3<f32>(x_994.x, x_994.y, x_994.z));
        let x_997 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_996.x, x_996.y, x_996.z, x_997.w);
        let x_999 : vec4<f32> = u_xlat11;
        let x_1001 : vec3<f32> = (vec3<f32>(x_999.x, x_999.y, x_999.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1002 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1001.x, x_1001.y, x_1001.z, x_1002.w);
        let x_1004 : vec4<f32> = u_xlat10;
        let x_1007 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1009 : vec3<f32> = (vec3<f32>(x_1004.y, x_1004.x, x_1004.z) * vec3<f32>(x_1007.x, x_1007.x, x_1007.x));
        let x_1010 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1009.x, x_1009.y, x_1009.z, x_1010.w);
        let x_1012 : vec4<f32> = u_xlat11;
        let x_1015 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1017 : vec3<f32> = (vec3<f32>(x_1012.x, x_1012.y, x_1012.z) * vec3<f32>(x_1015.y, x_1015.y, x_1015.y));
        let x_1018 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1017.x, x_1017.y, x_1017.z, x_1018.w);
        let x_1021 : f32 = u_xlat11.x;
        u_xlat10.w = x_1021;
        let x_1023 : vec4<f32> = u_xlat7;
        let x_1026 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1029 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1023.x, x_1023.y, x_1023.x, x_1023.y) * vec4<f32>(x_1026.x, x_1026.y, x_1026.x, x_1026.y)) + vec4<f32>(x_1029.y, x_1029.w, x_1029.x, x_1029.w));
        let x_1032 : vec4<f32> = u_xlat7;
        let x_1035 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1038 : vec4<f32> = u_xlat10;
        u_xlat51 = ((vec2<f32>(x_1032.x, x_1032.y) * vec2<f32>(x_1035.x, x_1035.y)) + vec2<f32>(x_1038.z, x_1038.w));
        let x_1042 : f32 = u_xlat10.y;
        u_xlat11.w = x_1042;
        let x_1044 : vec4<f32> = u_xlat11;
        let x_1045 : vec2<f32> = vec2<f32>(x_1044.y, x_1044.z);
        let x_1046 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1046.x, x_1045.x, x_1046.z, x_1045.y);
        let x_1048 : vec4<f32> = u_xlat7;
        let x_1051 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1054 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_1048.x, x_1048.y, x_1048.x, x_1048.y) * vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y)) + vec4<f32>(x_1054.x, x_1054.y, x_1054.z, x_1054.y));
        let x_1057 : vec4<f32> = u_xlat7;
        let x_1060 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1063 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_1057.x, x_1057.y, x_1057.x, x_1057.y) * vec4<f32>(x_1060.x, x_1060.y, x_1060.x, x_1060.y)) + vec4<f32>(x_1063.w, x_1063.y, x_1063.w, x_1063.z));
        let x_1066 : vec4<f32> = u_xlat7;
        let x_1069 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1072 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1066.x, x_1066.y, x_1066.x, x_1066.y) * vec4<f32>(x_1069.x, x_1069.y, x_1069.x, x_1069.y)) + vec4<f32>(x_1072.x, x_1072.w, x_1072.z, x_1072.w));
        let x_1076 : vec4<f32> = u_xlat9;
        let x_1078 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_1076.x, x_1076.x, x_1076.x, x_1076.y) * vec4<f32>(x_1078.z, x_1078.w, x_1078.y, x_1078.z));
        let x_1082 : vec4<f32> = u_xlat9;
        let x_1084 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_1082.y, x_1082.y, x_1082.z, x_1082.z) * x_1084);
        let x_1087 : f32 = u_xlat9.z;
        let x_1089 : f32 = u_xlat14.y;
        u_xlat7.x = (x_1087 * x_1089);
        let x_1093 : vec4<f32> = u_xlat12;
        let x_1094 : vec2<f32> = vec2<f32>(x_1093.x, x_1093.y);
        let x_1096 : f32 = u_xlat5.z;
        txVec4 = vec3<f32>(x_1094.x, x_1094.y, x_1096);
        let x_1104 : vec3<f32> = txVec4;
        let x_1106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1104.xy, x_1104.z);
        u_xlat29 = x_1106;
        let x_1108 : vec4<f32> = u_xlat12;
        let x_1109 : vec2<f32> = vec2<f32>(x_1108.z, x_1108.w);
        let x_1111 : f32 = u_xlat5.z;
        txVec5 = vec3<f32>(x_1109.x, x_1109.y, x_1111);
        let x_1119 : vec3<f32> = txVec5;
        let x_1121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1119.xy, x_1119.z);
        u_xlat74 = x_1121;
        let x_1122 : f32 = u_xlat74;
        let x_1124 : f32 = u_xlat15.y;
        u_xlat74 = (x_1122 * x_1124);
        let x_1127 : f32 = u_xlat15.x;
        let x_1128 : f32 = u_xlat29;
        let x_1130 : f32 = u_xlat74;
        u_xlat29 = ((x_1127 * x_1128) + x_1130);
        let x_1133 : vec2<f32> = u_xlat51;
        let x_1135 : f32 = u_xlat5.z;
        txVec6 = vec3<f32>(x_1133.x, x_1133.y, x_1135);
        let x_1142 : vec3<f32> = txVec6;
        let x_1144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1142.xy, x_1142.z);
        u_xlat51.x = x_1144;
        let x_1147 : f32 = u_xlat15.z;
        let x_1149 : f32 = u_xlat51.x;
        let x_1151 : f32 = u_xlat29;
        u_xlat29 = ((x_1147 * x_1149) + x_1151);
        let x_1154 : vec4<f32> = u_xlat11;
        let x_1155 : vec2<f32> = vec2<f32>(x_1154.x, x_1154.y);
        let x_1157 : f32 = u_xlat5.z;
        txVec7 = vec3<f32>(x_1155.x, x_1155.y, x_1157);
        let x_1164 : vec3<f32> = txVec7;
        let x_1166 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1164.xy, x_1164.z);
        u_xlat51.x = x_1166;
        let x_1169 : f32 = u_xlat15.w;
        let x_1171 : f32 = u_xlat51.x;
        let x_1173 : f32 = u_xlat29;
        u_xlat29 = ((x_1169 * x_1171) + x_1173);
        let x_1176 : vec4<f32> = u_xlat13;
        let x_1177 : vec2<f32> = vec2<f32>(x_1176.x, x_1176.y);
        let x_1179 : f32 = u_xlat5.z;
        txVec8 = vec3<f32>(x_1177.x, x_1177.y, x_1179);
        let x_1186 : vec3<f32> = txVec8;
        let x_1188 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1186.xy, x_1186.z);
        u_xlat51.x = x_1188;
        let x_1191 : f32 = u_xlat16.x;
        let x_1193 : f32 = u_xlat51.x;
        let x_1195 : f32 = u_xlat29;
        u_xlat29 = ((x_1191 * x_1193) + x_1195);
        let x_1198 : vec4<f32> = u_xlat13;
        let x_1199 : vec2<f32> = vec2<f32>(x_1198.z, x_1198.w);
        let x_1201 : f32 = u_xlat5.z;
        txVec9 = vec3<f32>(x_1199.x, x_1199.y, x_1201);
        let x_1208 : vec3<f32> = txVec9;
        let x_1210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1208.xy, x_1208.z);
        u_xlat51.x = x_1210;
        let x_1213 : f32 = u_xlat16.y;
        let x_1215 : f32 = u_xlat51.x;
        let x_1217 : f32 = u_xlat29;
        u_xlat29 = ((x_1213 * x_1215) + x_1217);
        let x_1220 : vec4<f32> = u_xlat11;
        let x_1221 : vec2<f32> = vec2<f32>(x_1220.z, x_1220.w);
        let x_1223 : f32 = u_xlat5.z;
        txVec10 = vec3<f32>(x_1221.x, x_1221.y, x_1223);
        let x_1230 : vec3<f32> = txVec10;
        let x_1232 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1230.xy, x_1230.z);
        u_xlat51.x = x_1232;
        let x_1235 : f32 = u_xlat16.z;
        let x_1237 : f32 = u_xlat51.x;
        let x_1239 : f32 = u_xlat29;
        u_xlat29 = ((x_1235 * x_1237) + x_1239);
        let x_1242 : vec4<f32> = u_xlat10;
        let x_1243 : vec2<f32> = vec2<f32>(x_1242.x, x_1242.y);
        let x_1245 : f32 = u_xlat5.z;
        txVec11 = vec3<f32>(x_1243.x, x_1243.y, x_1245);
        let x_1252 : vec3<f32> = txVec11;
        let x_1254 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1252.xy, x_1252.z);
        u_xlat51.x = x_1254;
        let x_1257 : f32 = u_xlat16.w;
        let x_1259 : f32 = u_xlat51.x;
        let x_1261 : f32 = u_xlat29;
        u_xlat29 = ((x_1257 * x_1259) + x_1261);
        let x_1264 : vec4<f32> = u_xlat10;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat5.z;
        txVec12 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec12;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat51.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat51.x;
        let x_1283 : f32 = u_xlat29;
        u_xlat71 = ((x_1279 * x_1281) + x_1283);
      } else {
        let x_1286 : vec4<f32> = u_xlat5;
        let x_1289 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1292 : vec2<f32> = ((vec2<f32>(x_1286.x, x_1286.y) * vec2<f32>(x_1289.z, x_1289.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1293 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1292.x, x_1292.y, x_1293.z, x_1293.w);
        let x_1295 : vec4<f32> = u_xlat7;
        let x_1297 : vec2<f32> = floor(vec2<f32>(x_1295.x, x_1295.y));
        let x_1298 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1297.x, x_1297.y, x_1298.z, x_1298.w);
        let x_1300 : vec4<f32> = u_xlat5;
        let x_1303 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1306 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1300.x, x_1300.y) * vec2<f32>(x_1303.z, x_1303.w)) + -(vec2<f32>(x_1306.x, x_1306.y)));
        let x_1310 : vec2<f32> = u_xlat51;
        u_xlat9 = (vec4<f32>(x_1310.x, x_1310.x, x_1310.y, x_1310.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1313 : vec4<f32> = u_xlat9;
        let x_1315 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1313.x, x_1313.x, x_1313.z, x_1313.z) * vec4<f32>(x_1315.x, x_1315.x, x_1315.z, x_1315.z));
        let x_1318 : vec4<f32> = u_xlat10;
        let x_1322 : vec2<f32> = (vec2<f32>(x_1318.y, x_1318.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1323 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1323.x, x_1322.x, x_1323.z, x_1322.y);
        let x_1325 : vec4<f32> = u_xlat10;
        let x_1328 : vec2<f32> = u_xlat51;
        let x_1330 : vec2<f32> = ((vec2<f32>(x_1325.x, x_1325.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1328));
        let x_1331 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1330.x, x_1331.y, x_1330.y, x_1331.w);
        let x_1333 : vec2<f32> = u_xlat51;
        let x_1335 : vec2<f32> = (-(x_1333) + vec2<f32>(1.0f, 1.0f));
        let x_1336 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1335.x, x_1335.y, x_1336.z, x_1336.w);
        let x_1338 : vec2<f32> = u_xlat51;
        u_xlat54 = min(x_1338, vec2<f32>(0.0f, 0.0f));
        let x_1340 : vec2<f32> = u_xlat54;
        let x_1342 : vec2<f32> = u_xlat54;
        let x_1344 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = ((-(x_1340) * x_1342) + vec2<f32>(x_1344.x, x_1344.y));
        let x_1347 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1346.x, x_1346.y, x_1347.z, x_1347.w);
        let x_1349 : vec2<f32> = u_xlat51;
        u_xlat54 = max(x_1349, vec2<f32>(0.0f, 0.0f));
        let x_1352 : vec2<f32> = u_xlat54;
        let x_1354 : vec2<f32> = u_xlat54;
        let x_1356 : vec4<f32> = u_xlat9;
        let x_1358 : vec2<f32> = ((-(x_1352) * x_1354) + vec2<f32>(x_1356.y, x_1356.w));
        let x_1359 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1358.x, x_1359.y, x_1358.y);
        let x_1361 : vec4<f32> = u_xlat10;
        let x_1363 : vec2<f32> = (vec2<f32>(x_1361.x, x_1361.y) + vec2<f32>(2.0f, 2.0f));
        let x_1364 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1363.x, x_1363.y, x_1364.z, x_1364.w);
        let x_1366 : vec3<f32> = u_xlat31;
        let x_1368 : vec2<f32> = (vec2<f32>(x_1366.x, x_1366.z) + vec2<f32>(2.0f, 2.0f));
        let x_1369 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1369.x, x_1368.x, x_1369.z, x_1368.y);
        let x_1372 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1372 * 0.081632003f);
        let x_1376 : vec4<f32> = u_xlat9;
        let x_1379 : vec3<f32> = (vec3<f32>(x_1376.z, x_1376.x, x_1376.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1380 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1379.x, x_1379.y, x_1379.z, x_1380.w);
        let x_1382 : vec4<f32> = u_xlat10;
        let x_1385 : vec2<f32> = (vec2<f32>(x_1382.x, x_1382.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1386 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1385.x, x_1385.y, x_1386.z, x_1386.w);
        let x_1389 : f32 = u_xlat13.y;
        u_xlat12.x = x_1389;
        let x_1391 : vec2<f32> = u_xlat51;
        let x_1398 : vec2<f32> = ((vec2<f32>(x_1391.x, x_1391.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1399 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1399.x, x_1398.x, x_1399.z, x_1398.y);
        let x_1401 : vec2<f32> = u_xlat51;
        let x_1405 : vec2<f32> = ((vec2<f32>(x_1401.x, x_1401.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1406 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1405.x, x_1406.y, x_1405.y, x_1406.w);
        let x_1409 : f32 = u_xlat9.x;
        u_xlat10.y = x_1409;
        let x_1412 : f32 = u_xlat11.y;
        u_xlat10.w = x_1412;
        let x_1414 : vec4<f32> = u_xlat10;
        let x_1415 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1414 + x_1415);
        let x_1417 : vec2<f32> = u_xlat51;
        let x_1420 : vec2<f32> = ((vec2<f32>(x_1417.y, x_1417.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1421 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1421.x, x_1420.x, x_1421.z, x_1420.y);
        let x_1423 : vec2<f32> = u_xlat51;
        let x_1426 : vec2<f32> = ((vec2<f32>(x_1423.y, x_1423.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1427 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1426.x, x_1427.y, x_1426.y, x_1427.w);
        let x_1430 : f32 = u_xlat9.y;
        u_xlat11.y = x_1430;
        let x_1432 : vec4<f32> = u_xlat11;
        let x_1433 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1432 + x_1433);
        let x_1435 : vec4<f32> = u_xlat10;
        let x_1436 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1435 / x_1436);
        let x_1438 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1438 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1444 : vec4<f32> = u_xlat11;
        let x_1445 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1444 / x_1445);
        let x_1447 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1447 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1449 : vec4<f32> = u_xlat10;
        let x_1452 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1449.w, x_1449.x, x_1449.y, x_1449.z) * vec4<f32>(x_1452.x, x_1452.x, x_1452.x, x_1452.x));
        let x_1455 : vec4<f32> = u_xlat11;
        let x_1458 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1455.x, x_1455.w, x_1455.y, x_1455.z) * vec4<f32>(x_1458.y, x_1458.y, x_1458.y, x_1458.y));
        let x_1461 : vec4<f32> = u_xlat10;
        let x_1462 : vec3<f32> = vec3<f32>(x_1461.y, x_1461.z, x_1461.w);
        let x_1463 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1462.x, x_1463.y, x_1462.y, x_1462.z);
        let x_1466 : f32 = u_xlat11.x;
        u_xlat13.y = x_1466;
        let x_1468 : vec4<f32> = u_xlat7;
        let x_1471 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1474 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1468.x, x_1468.y, x_1468.x, x_1468.y) * vec4<f32>(x_1471.x, x_1471.y, x_1471.x, x_1471.y)) + vec4<f32>(x_1474.x, x_1474.y, x_1474.z, x_1474.y));
        let x_1477 : vec4<f32> = u_xlat7;
        let x_1480 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1483 : vec4<f32> = u_xlat13;
        u_xlat51 = ((vec2<f32>(x_1477.x, x_1477.y) * vec2<f32>(x_1480.x, x_1480.y)) + vec2<f32>(x_1483.w, x_1483.y));
        let x_1487 : f32 = u_xlat13.y;
        u_xlat10.y = x_1487;
        let x_1490 : f32 = u_xlat11.z;
        u_xlat13.y = x_1490;
        let x_1492 : vec4<f32> = u_xlat7;
        let x_1495 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1498 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1492.x, x_1492.y, x_1492.x, x_1492.y) * vec4<f32>(x_1495.x, x_1495.y, x_1495.x, x_1495.y)) + vec4<f32>(x_1498.x, x_1498.y, x_1498.z, x_1498.y));
        let x_1501 : vec4<f32> = u_xlat7;
        let x_1504 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1507 : vec4<f32> = u_xlat13;
        let x_1509 : vec2<f32> = ((vec2<f32>(x_1501.x, x_1501.y) * vec2<f32>(x_1504.x, x_1504.y)) + vec2<f32>(x_1507.w, x_1507.y));
        let x_1510 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1509.x, x_1509.y, x_1510.z, x_1510.w);
        let x_1513 : f32 = u_xlat13.y;
        u_xlat10.z = x_1513;
        let x_1516 : vec4<f32> = u_xlat7;
        let x_1519 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1522 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1516.x, x_1516.y, x_1516.x, x_1516.y) * vec4<f32>(x_1519.x, x_1519.y, x_1519.x, x_1519.y)) + vec4<f32>(x_1522.x, x_1522.y, x_1522.x, x_1522.z));
        let x_1526 : f32 = u_xlat11.w;
        u_xlat13.y = x_1526;
        let x_1529 : vec4<f32> = u_xlat7;
        let x_1532 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1535 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1529.x, x_1529.y, x_1529.x, x_1529.y) * vec4<f32>(x_1532.x, x_1532.y, x_1532.x, x_1532.y)) + vec4<f32>(x_1535.x, x_1535.y, x_1535.z, x_1535.y));
        let x_1539 : vec4<f32> = u_xlat7;
        let x_1542 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1545 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1539.x, x_1539.y) * vec2<f32>(x_1542.x, x_1542.y)) + vec2<f32>(x_1545.w, x_1545.y));
        let x_1549 : f32 = u_xlat13.y;
        u_xlat10.w = x_1549;
        let x_1552 : vec4<f32> = u_xlat7;
        let x_1555 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1558 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1552.x, x_1552.y) * vec2<f32>(x_1555.x, x_1555.y)) + vec2<f32>(x_1558.x, x_1558.w));
        let x_1561 : vec4<f32> = u_xlat13;
        let x_1562 : vec3<f32> = vec3<f32>(x_1561.x, x_1561.z, x_1561.w);
        let x_1563 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1562.x, x_1563.y, x_1562.y, x_1562.z);
        let x_1565 : vec4<f32> = u_xlat7;
        let x_1568 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1571 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1565.x, x_1565.y, x_1565.x, x_1565.y) * vec4<f32>(x_1568.x, x_1568.y, x_1568.x, x_1568.y)) + vec4<f32>(x_1571.x, x_1571.y, x_1571.z, x_1571.y));
        let x_1575 : vec4<f32> = u_xlat7;
        let x_1578 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1581 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1575.x, x_1575.y) * vec2<f32>(x_1578.x, x_1578.y)) + vec2<f32>(x_1581.w, x_1581.y));
        let x_1585 : f32 = u_xlat10.x;
        u_xlat11.x = x_1585;
        let x_1587 : vec4<f32> = u_xlat7;
        let x_1590 : vec4<f32> = x_305.x_MainLightShadowmapSize;
        let x_1593 : vec4<f32> = u_xlat11;
        let x_1595 : vec2<f32> = ((vec2<f32>(x_1587.x, x_1587.y) * vec2<f32>(x_1590.x, x_1590.y)) + vec2<f32>(x_1593.x, x_1593.y));
        let x_1596 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1595.x, x_1595.y, x_1596.z, x_1596.w);
        let x_1599 : vec4<f32> = u_xlat9;
        let x_1601 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1599.x, x_1599.x, x_1599.x, x_1599.x) * x_1601);
        let x_1604 : vec4<f32> = u_xlat9;
        let x_1606 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1604.y, x_1604.y, x_1604.y, x_1604.y) * x_1606);
        let x_1609 : vec4<f32> = u_xlat9;
        let x_1611 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1609.z, x_1609.z, x_1609.z, x_1609.z) * x_1611);
        let x_1613 : vec4<f32> = u_xlat9;
        let x_1615 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1613.w, x_1613.w, x_1613.w, x_1613.w) * x_1615);
        let x_1618 : vec4<f32> = u_xlat14;
        let x_1619 : vec2<f32> = vec2<f32>(x_1618.x, x_1618.y);
        let x_1621 : f32 = u_xlat5.z;
        txVec13 = vec3<f32>(x_1619.x, x_1619.y, x_1621);
        let x_1628 : vec3<f32> = txVec13;
        let x_1630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1628.xy, x_1628.z);
        u_xlat74 = x_1630;
        let x_1632 : vec4<f32> = u_xlat14;
        let x_1633 : vec2<f32> = vec2<f32>(x_1632.z, x_1632.w);
        let x_1635 : f32 = u_xlat5.z;
        txVec14 = vec3<f32>(x_1633.x, x_1633.y, x_1635);
        let x_1642 : vec3<f32> = txVec14;
        let x_1644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1642.xy, x_1642.z);
        u_xlat10.x = x_1644;
        let x_1647 : f32 = u_xlat10.x;
        let x_1649 : f32 = u_xlat19.y;
        u_xlat10.x = (x_1647 * x_1649);
        let x_1653 : f32 = u_xlat19.x;
        let x_1654 : f32 = u_xlat74;
        let x_1657 : f32 = u_xlat10.x;
        u_xlat74 = ((x_1653 * x_1654) + x_1657);
        let x_1660 : vec2<f32> = u_xlat51;
        let x_1662 : f32 = u_xlat5.z;
        txVec15 = vec3<f32>(x_1660.x, x_1660.y, x_1662);
        let x_1669 : vec3<f32> = txVec15;
        let x_1671 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1669.xy, x_1669.z);
        u_xlat51.x = x_1671;
        let x_1674 : f32 = u_xlat19.z;
        let x_1676 : f32 = u_xlat51.x;
        let x_1678 : f32 = u_xlat74;
        u_xlat51.x = ((x_1674 * x_1676) + x_1678);
        let x_1682 : vec4<f32> = u_xlat17;
        let x_1683 : vec2<f32> = vec2<f32>(x_1682.x, x_1682.y);
        let x_1685 : f32 = u_xlat5.z;
        txVec16 = vec3<f32>(x_1683.x, x_1683.y, x_1685);
        let x_1693 : vec3<f32> = txVec16;
        let x_1695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1693.xy, x_1693.z);
        u_xlat73 = x_1695;
        let x_1697 : f32 = u_xlat19.w;
        let x_1698 : f32 = u_xlat73;
        let x_1701 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1697 * x_1698) + x_1701);
        let x_1705 : vec4<f32> = u_xlat15;
        let x_1706 : vec2<f32> = vec2<f32>(x_1705.x, x_1705.y);
        let x_1708 : f32 = u_xlat5.z;
        txVec17 = vec3<f32>(x_1706.x, x_1706.y, x_1708);
        let x_1715 : vec3<f32> = txVec17;
        let x_1717 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1715.xy, x_1715.z);
        u_xlat73 = x_1717;
        let x_1719 : f32 = u_xlat20.x;
        let x_1720 : f32 = u_xlat73;
        let x_1723 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1719 * x_1720) + x_1723);
        let x_1727 : vec4<f32> = u_xlat15;
        let x_1728 : vec2<f32> = vec2<f32>(x_1727.z, x_1727.w);
        let x_1730 : f32 = u_xlat5.z;
        txVec18 = vec3<f32>(x_1728.x, x_1728.y, x_1730);
        let x_1737 : vec3<f32> = txVec18;
        let x_1739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1737.xy, x_1737.z);
        u_xlat73 = x_1739;
        let x_1741 : f32 = u_xlat20.y;
        let x_1742 : f32 = u_xlat73;
        let x_1745 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1741 * x_1742) + x_1745);
        let x_1749 : vec4<f32> = u_xlat16;
        let x_1750 : vec2<f32> = vec2<f32>(x_1749.x, x_1749.y);
        let x_1752 : f32 = u_xlat5.z;
        txVec19 = vec3<f32>(x_1750.x, x_1750.y, x_1752);
        let x_1759 : vec3<f32> = txVec19;
        let x_1761 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1759.xy, x_1759.z);
        u_xlat73 = x_1761;
        let x_1763 : f32 = u_xlat20.z;
        let x_1764 : f32 = u_xlat73;
        let x_1767 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1763 * x_1764) + x_1767);
        let x_1771 : vec4<f32> = u_xlat17;
        let x_1772 : vec2<f32> = vec2<f32>(x_1771.z, x_1771.w);
        let x_1774 : f32 = u_xlat5.z;
        txVec20 = vec3<f32>(x_1772.x, x_1772.y, x_1774);
        let x_1781 : vec3<f32> = txVec20;
        let x_1783 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1781.xy, x_1781.z);
        u_xlat73 = x_1783;
        let x_1785 : f32 = u_xlat20.w;
        let x_1786 : f32 = u_xlat73;
        let x_1789 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1785 * x_1786) + x_1789);
        let x_1793 : vec4<f32> = u_xlat18;
        let x_1794 : vec2<f32> = vec2<f32>(x_1793.x, x_1793.y);
        let x_1796 : f32 = u_xlat5.z;
        txVec21 = vec3<f32>(x_1794.x, x_1794.y, x_1796);
        let x_1803 : vec3<f32> = txVec21;
        let x_1805 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1803.xy, x_1803.z);
        u_xlat73 = x_1805;
        let x_1807 : f32 = u_xlat21.x;
        let x_1808 : f32 = u_xlat73;
        let x_1811 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1807 * x_1808) + x_1811);
        let x_1815 : vec4<f32> = u_xlat18;
        let x_1816 : vec2<f32> = vec2<f32>(x_1815.z, x_1815.w);
        let x_1818 : f32 = u_xlat5.z;
        txVec22 = vec3<f32>(x_1816.x, x_1816.y, x_1818);
        let x_1825 : vec3<f32> = txVec22;
        let x_1827 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1825.xy, x_1825.z);
        u_xlat73 = x_1827;
        let x_1829 : f32 = u_xlat21.y;
        let x_1830 : f32 = u_xlat73;
        let x_1833 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1829 * x_1830) + x_1833);
        let x_1837 : vec2<f32> = u_xlat32;
        let x_1839 : f32 = u_xlat5.z;
        txVec23 = vec3<f32>(x_1837.x, x_1837.y, x_1839);
        let x_1846 : vec3<f32> = txVec23;
        let x_1848 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1846.xy, x_1846.z);
        u_xlat73 = x_1848;
        let x_1850 : f32 = u_xlat21.z;
        let x_1851 : f32 = u_xlat73;
        let x_1854 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1850 * x_1851) + x_1854);
        let x_1858 : vec2<f32> = u_xlat60;
        let x_1860 : f32 = u_xlat5.z;
        txVec24 = vec3<f32>(x_1858.x, x_1858.y, x_1860);
        let x_1867 : vec3<f32> = txVec24;
        let x_1869 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1867.xy, x_1867.z);
        u_xlat73 = x_1869;
        let x_1871 : f32 = u_xlat21.w;
        let x_1872 : f32 = u_xlat73;
        let x_1875 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1871 * x_1872) + x_1875);
        let x_1879 : vec4<f32> = u_xlat13;
        let x_1880 : vec2<f32> = vec2<f32>(x_1879.x, x_1879.y);
        let x_1882 : f32 = u_xlat5.z;
        txVec25 = vec3<f32>(x_1880.x, x_1880.y, x_1882);
        let x_1889 : vec3<f32> = txVec25;
        let x_1891 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1889.xy, x_1889.z);
        u_xlat73 = x_1891;
        let x_1893 : f32 = u_xlat9.x;
        let x_1894 : f32 = u_xlat73;
        let x_1897 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1893 * x_1894) + x_1897);
        let x_1901 : vec4<f32> = u_xlat13;
        let x_1902 : vec2<f32> = vec2<f32>(x_1901.z, x_1901.w);
        let x_1904 : f32 = u_xlat5.z;
        txVec26 = vec3<f32>(x_1902.x, x_1902.y, x_1904);
        let x_1911 : vec3<f32> = txVec26;
        let x_1913 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1911.xy, x_1911.z);
        u_xlat73 = x_1913;
        let x_1915 : f32 = u_xlat9.y;
        let x_1916 : f32 = u_xlat73;
        let x_1919 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1915 * x_1916) + x_1919);
        let x_1923 : vec2<f32> = u_xlat55;
        let x_1925 : f32 = u_xlat5.z;
        txVec27 = vec3<f32>(x_1923.x, x_1923.y, x_1925);
        let x_1932 : vec3<f32> = txVec27;
        let x_1934 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1932.xy, x_1932.z);
        u_xlat73 = x_1934;
        let x_1936 : f32 = u_xlat9.z;
        let x_1937 : f32 = u_xlat73;
        let x_1940 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1936 * x_1937) + x_1940);
        let x_1944 : vec4<f32> = u_xlat7;
        let x_1945 : vec2<f32> = vec2<f32>(x_1944.x, x_1944.y);
        let x_1947 : f32 = u_xlat5.z;
        txVec28 = vec3<f32>(x_1945.x, x_1945.y, x_1947);
        let x_1954 : vec3<f32> = txVec28;
        let x_1956 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1954.xy, x_1954.z);
        u_xlat7.x = x_1956;
        let x_1959 : f32 = u_xlat9.w;
        let x_1961 : f32 = u_xlat7.x;
        let x_1964 : f32 = u_xlat51.x;
        u_xlat71 = ((x_1959 * x_1961) + x_1964);
      }
    }
  } else {
    let x_1968 : vec4<f32> = u_xlat5;
    let x_1969 : vec2<f32> = vec2<f32>(x_1968.x, x_1968.y);
    let x_1971 : f32 = u_xlat5.z;
    txVec29 = vec3<f32>(x_1969.x, x_1969.y, x_1971);
    let x_1978 : vec3<f32> = txVec29;
    let x_1980 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1978.xy, x_1978.z);
    u_xlat71 = x_1980;
  }
  let x_1982 : f32 = x_305.x_MainLightShadowParams.x;
  u_xlat5.x = (-(x_1982) + 1.0f);
  let x_1986 : f32 = u_xlat71;
  let x_1988 : f32 = x_305.x_MainLightShadowParams.x;
  let x_1991 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_1986 * x_1988) + x_1991);
  let x_1996 : f32 = u_xlat5.z;
  u_xlatb27 = (0.0f >= x_1996);
  let x_2000 : f32 = u_xlat5.z;
  u_xlatb49 = (x_2000 >= 1.0f);
  let x_2002 : bool = u_xlatb49;
  let x_2003 : bool = u_xlatb27;
  u_xlatb27 = (x_2002 | x_2003);
  let x_2005 : bool = u_xlatb27;
  if (x_2005) {
    x_2006 = 1.0f;
  } else {
    let x_2011 : f32 = u_xlat5.x;
    x_2006 = x_2011;
  }
  let x_2012 : f32 = x_2006;
  u_xlat5.x = x_2012;
  let x_2015 : vec3<f32> = vs_INTERP0;
  let x_2017 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat27 = (x_2015 + -(x_2017));
  let x_2020 : vec3<f32> = u_xlat27;
  let x_2021 : vec3<f32> = u_xlat27;
  u_xlat27.x = dot(x_2020, x_2021);
  let x_2025 : f32 = u_xlat27.x;
  let x_2027 : f32 = x_305.x_MainLightShadowParams.z;
  let x_2030 : f32 = x_305.x_MainLightShadowParams.w;
  u_xlat27.x = ((x_2025 * x_2027) + x_2030);
  let x_2034 : f32 = u_xlat27.x;
  u_xlat27.x = clamp(x_2034, 0.0f, 1.0f);
  let x_2039 : f32 = u_xlat5.x;
  u_xlat49 = (-(x_2039) + 1.0f);
  let x_2043 : f32 = u_xlat27.x;
  let x_2044 : f32 = u_xlat49;
  let x_2047 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_2043 * x_2044) + x_2047);
  let x_2050 : f32 = u_xlat72;
  let x_2053 : vec4<f32> = x_45.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_2050, x_2050, x_2050) * vec3<f32>(x_2053.x, x_2053.y, x_2053.z));
  let x_2056 : vec4<f32> = u_xlat1;
  let x_2059 : vec4<f32> = u_xlat4;
  u_xlat7.x = dot(-(vec3<f32>(x_2056.x, x_2056.y, x_2056.w)), vec3<f32>(x_2059.x, x_2059.y, x_2059.z));
  let x_2064 : f32 = u_xlat7.x;
  let x_2066 : f32 = u_xlat7.x;
  u_xlat7.x = (x_2064 + x_2066);
  let x_2069 : vec4<f32> = u_xlat4;
  let x_2071 : vec4<f32> = u_xlat7;
  let x_2075 : vec4<f32> = u_xlat1;
  let x_2078 : vec3<f32> = ((vec3<f32>(x_2069.x, x_2069.y, x_2069.z) * -(vec3<f32>(x_2071.x, x_2071.x, x_2071.x))) + -(vec3<f32>(x_2075.x, x_2075.y, x_2075.w)));
  let x_2079 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2078.x, x_2078.y, x_2078.z, x_2079.w);
  let x_2081 : vec4<f32> = u_xlat4;
  let x_2083 : vec4<f32> = u_xlat1;
  u_xlat73 = dot(vec3<f32>(x_2081.x, x_2081.y, x_2081.z), vec3<f32>(x_2083.x, x_2083.y, x_2083.w));
  let x_2086 : f32 = u_xlat73;
  u_xlat73 = clamp(x_2086, 0.0f, 1.0f);
  let x_2088 : f32 = u_xlat73;
  u_xlat73 = (-(x_2088) + 1.0f);
  let x_2091 : f32 = u_xlat73;
  let x_2092 : f32 = u_xlat73;
  u_xlat73 = (x_2091 * x_2092);
  let x_2094 : f32 = u_xlat73;
  let x_2095 : f32 = u_xlat73;
  u_xlat73 = (x_2094 * x_2095);
  let x_2097 : f32 = u_xlat68;
  u_xlat74 = ((-(x_2097) * 0.699999988f) + 1.700000048f);
  let x_2103 : f32 = u_xlat68;
  let x_2104 : f32 = u_xlat74;
  u_xlat2.w = (x_2103 * x_2104);
  let x_2107 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_2107 * vec4<f32>(14.0f, 14.0f, 14.0f, 6.0f));
  let x_2120 : vec4<f32> = u_xlat7;
  let x_2123 : f32 = u_xlat2.w;
  let x_2124 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2120.x, x_2120.y, x_2120.z), x_2123);
  u_xlat9 = x_2124;
  let x_2126 : f32 = u_xlat9.w;
  u_xlat68 = (x_2126 + -1.0f);
  let x_2129 : f32 = x_120.unity_SpecCube0_HDR.w;
  let x_2130 : f32 = u_xlat68;
  u_xlat68 = ((x_2129 * x_2130) + 1.0f);
  let x_2133 : f32 = u_xlat68;
  u_xlat68 = max(x_2133, 0.0f);
  let x_2135 : f32 = u_xlat68;
  u_xlat68 = log2(x_2135);
  let x_2137 : f32 = u_xlat68;
  let x_2139 : f32 = x_120.unity_SpecCube0_HDR.y;
  u_xlat68 = (x_2137 * x_2139);
  let x_2141 : f32 = u_xlat68;
  u_xlat68 = exp2(x_2141);
  let x_2143 : f32 = u_xlat68;
  let x_2145 : f32 = x_120.unity_SpecCube0_HDR.x;
  u_xlat68 = (x_2143 * x_2145);
  let x_2147 : vec4<f32> = u_xlat9;
  let x_2149 : f32 = u_xlat68;
  let x_2151 : vec3<f32> = (vec3<f32>(x_2147.x, x_2147.y, x_2147.z) * vec3<f32>(x_2149, x_2149, x_2149));
  let x_2152 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2151.x, x_2151.y, x_2151.z, x_2152.w);
  let x_2154 : vec3<f32> = u_xlat3;
  let x_2156 : vec3<f32> = u_xlat3;
  let x_2160 : vec2<f32> = ((vec2<f32>(x_2154.x, x_2154.x) * vec2<f32>(x_2156.x, x_2156.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2161 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2160.x, x_2160.y, x_2161.z, x_2161.w);
  let x_2164 : f32 = u_xlat9.y;
  u_xlat68 = (1.0f / x_2164);
  let x_2166 : vec3<f32> = u_xlat0;
  let x_2168 : f32 = u_xlat25;
  u_xlat31 = (-(x_2166) + vec3<f32>(x_2168, x_2168, x_2168));
  let x_2171 : f32 = u_xlat73;
  let x_2173 : vec3<f32> = u_xlat31;
  let x_2175 : vec3<f32> = u_xlat0;
  u_xlat31 = ((vec3<f32>(x_2171, x_2171, x_2171) * x_2173) + x_2175);
  let x_2177 : f32 = u_xlat68;
  let x_2179 : vec3<f32> = u_xlat31;
  u_xlat31 = (vec3<f32>(x_2177, x_2177, x_2177) * x_2179);
  let x_2181 : vec4<f32> = u_xlat7;
  let x_2183 : vec3<f32> = u_xlat31;
  let x_2184 : vec3<f32> = (vec3<f32>(x_2181.x, x_2181.y, x_2181.z) * x_2183);
  let x_2185 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2184.x, x_2184.y, x_2184.z, x_2185.w);
  let x_2187 : vec4<f32> = u_xlat6;
  let x_2189 : vec3<f32> = u_xlat8;
  let x_2191 : vec4<f32> = u_xlat7;
  let x_2193 : vec3<f32> = ((vec3<f32>(x_2187.x, x_2187.y, x_2187.z) * x_2189) + vec3<f32>(x_2191.x, x_2191.y, x_2191.z));
  let x_2194 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2193.x, x_2193.y, x_2193.z, x_2194.w);
  let x_2197 : f32 = u_xlat5.x;
  let x_2199 : f32 = x_120.unity_LightData.z;
  u_xlat68 = (x_2197 * x_2199);
  let x_2201 : vec4<f32> = u_xlat4;
  let x_2204 : vec4<f32> = x_45.x_MainLightPosition;
  u_xlat3.x = dot(vec3<f32>(x_2201.x, x_2201.y, x_2201.z), vec3<f32>(x_2204.x, x_2204.y, x_2204.z));
  let x_2209 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_2209, 0.0f, 1.0f);
  let x_2212 : f32 = u_xlat68;
  let x_2214 : f32 = u_xlat3.x;
  u_xlat68 = (x_2212 * x_2214);
  let x_2216 : f32 = u_xlat68;
  let x_2218 : vec3<f32> = u_xlat27;
  let x_2219 : vec3<f32> = (vec3<f32>(x_2216, x_2216, x_2216) * x_2218);
  let x_2220 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2219.x, x_2219.y, x_2219.z, x_2220.w);
  let x_2222 : vec4<f32> = u_xlat1;
  let x_2225 : vec4<f32> = x_45.x_MainLightPosition;
  let x_2227 : vec3<f32> = (vec3<f32>(x_2222.x, x_2222.y, x_2222.w) + vec3<f32>(x_2225.x, x_2225.y, x_2225.z));
  let x_2228 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2227.x, x_2227.y, x_2227.z, x_2228.w);
  let x_2230 : vec4<f32> = u_xlat7;
  let x_2232 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(vec3<f32>(x_2230.x, x_2230.y, x_2230.z), vec3<f32>(x_2232.x, x_2232.y, x_2232.z));
  let x_2235 : f32 = u_xlat68;
  u_xlat68 = max(x_2235, 1.17549435e-37f);
  let x_2238 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_2238);
  let x_2240 : f32 = u_xlat68;
  let x_2242 : vec4<f32> = u_xlat7;
  let x_2244 : vec3<f32> = (vec3<f32>(x_2240, x_2240, x_2240) * vec3<f32>(x_2242.x, x_2242.y, x_2242.z));
  let x_2245 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2244.x, x_2244.y, x_2244.z, x_2245.w);
  let x_2247 : vec4<f32> = u_xlat4;
  let x_2249 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(vec3<f32>(x_2247.x, x_2247.y, x_2247.z), vec3<f32>(x_2249.x, x_2249.y, x_2249.z));
  let x_2252 : f32 = u_xlat68;
  u_xlat68 = clamp(x_2252, 0.0f, 1.0f);
  let x_2255 : vec4<f32> = x_45.x_MainLightPosition;
  let x_2257 : vec4<f32> = u_xlat7;
  u_xlat3.x = dot(vec3<f32>(x_2255.x, x_2255.y, x_2255.z), vec3<f32>(x_2257.x, x_2257.y, x_2257.z));
  let x_2262 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_2262, 0.0f, 1.0f);
  let x_2265 : f32 = u_xlat68;
  let x_2266 : f32 = u_xlat68;
  u_xlat68 = (x_2265 * x_2266);
  let x_2268 : f32 = u_xlat68;
  let x_2270 : f32 = u_xlat9.x;
  u_xlat68 = ((x_2268 * x_2270) + 1.000010014f);
  let x_2275 : f32 = u_xlat3.x;
  let x_2277 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2275 * x_2277);
  let x_2280 : f32 = u_xlat68;
  let x_2281 : f32 = u_xlat68;
  u_xlat68 = (x_2280 * x_2281);
  let x_2284 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2284, 0.100000001f);
  let x_2288 : f32 = u_xlat68;
  let x_2290 : f32 = u_xlat3.x;
  u_xlat68 = (x_2288 * x_2290);
  let x_2292 : f32 = u_xlat69;
  let x_2293 : f32 = u_xlat68;
  u_xlat68 = (x_2292 * x_2293);
  let x_2295 : f32 = u_xlat70;
  let x_2296 : f32 = u_xlat68;
  u_xlat68 = (x_2295 / x_2296);
  let x_2298 : vec3<f32> = u_xlat0;
  let x_2299 : f32 = u_xlat68;
  let x_2302 : vec3<f32> = u_xlat8;
  let x_2303 : vec3<f32> = ((x_2298 * vec3<f32>(x_2299, x_2299, x_2299)) + x_2302);
  let x_2304 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2303.x, x_2303.y, x_2303.z, x_2304.w);
  let x_2306 : vec4<f32> = u_xlat5;
  let x_2308 : vec4<f32> = u_xlat7;
  let x_2310 : vec3<f32> = (vec3<f32>(x_2306.x, x_2306.y, x_2306.z) * vec3<f32>(x_2308.x, x_2308.y, x_2308.z));
  let x_2311 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2310.x, x_2310.y, x_2310.z, x_2311.w);
  let x_2314 : f32 = x_45.x_AdditionalLightsCount.x;
  let x_2316 : f32 = x_120.unity_LightData.y;
  u_xlat68 = min(x_2314, x_2316);
  let x_2319 : f32 = u_xlat68;
  u_xlatu68 = bitcast<u32>(i32(x_2319));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2331 : u32 = u_xlatu_loop_1;
    let x_2332 : u32 = u_xlatu68;
    if ((x_2331 < x_2332)) {
    } else {
      break;
    }
    let x_2335 : u32 = u_xlatu_loop_1;
    u_xlatu25 = (x_2335 >> 2u);
    let x_2338 : u32 = u_xlatu_loop_1;
    u_xlati71 = bitcast<i32>((x_2338 & 3u));
    let x_2341 : u32 = u_xlatu25;
    let x_2344 : vec4<f32> = x_120.unity_LightIndices[bitcast<i32>(x_2341)];
    let x_2354 : i32 = u_xlati71;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2359 : vec4<u32> = indexable[x_2354];
    u_xlat25 = dot(x_2344, bitcast<vec4<f32>>(x_2359));
    let x_2363 : f32 = u_xlat25;
    u_xlati25 = i32(x_2363);
    let x_2365 : vec3<f32> = vs_INTERP0;
    let x_2377 : i32 = u_xlati25;
    let x_2379 : vec4<f32> = x_2376.x_AdditionalLightsPosition[x_2377];
    let x_2382 : i32 = u_xlati25;
    let x_2384 : vec4<f32> = x_2376.x_AdditionalLightsPosition[x_2382];
    u_xlat31 = ((-(x_2365) * vec3<f32>(x_2379.w, x_2379.w, x_2379.w)) + vec3<f32>(x_2384.x, x_2384.y, x_2384.z));
    let x_2387 : vec3<f32> = u_xlat31;
    let x_2388 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(x_2387, x_2388);
    let x_2390 : f32 = u_xlat71;
    u_xlat71 = max(x_2390, 6.10351562e-05f);
    let x_2393 : f32 = u_xlat71;
    u_xlat73 = inverseSqrt(x_2393);
    let x_2395 : f32 = u_xlat73;
    let x_2397 : vec3<f32> = u_xlat31;
    let x_2398 : vec3<f32> = (vec3<f32>(x_2395, x_2395, x_2395) * x_2397);
    let x_2399 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2398.x, x_2398.y, x_2398.z, x_2399.w);
    let x_2401 : f32 = u_xlat71;
    u_xlat74 = (1.0f / x_2401);
    let x_2403 : f32 = u_xlat71;
    let x_2404 : i32 = u_xlati25;
    let x_2406 : f32 = x_2376.x_AdditionalLightsAttenuation[x_2404].x;
    u_xlat71 = (x_2403 * x_2406);
    let x_2408 : f32 = u_xlat71;
    let x_2410 : f32 = u_xlat71;
    u_xlat71 = ((-(x_2408) * x_2410) + 1.0f);
    let x_2413 : f32 = u_xlat71;
    u_xlat71 = max(x_2413, 0.0f);
    let x_2415 : f32 = u_xlat71;
    let x_2416 : f32 = u_xlat71;
    u_xlat71 = (x_2415 * x_2416);
    let x_2418 : f32 = u_xlat71;
    let x_2419 : f32 = u_xlat74;
    u_xlat71 = (x_2418 * x_2419);
    let x_2421 : i32 = u_xlati25;
    let x_2423 : vec4<f32> = x_2376.x_AdditionalLightsSpotDir[x_2421];
    let x_2425 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_2423.x, x_2423.y, x_2423.z), vec3<f32>(x_2425.x, x_2425.y, x_2425.z));
    let x_2428 : f32 = u_xlat74;
    let x_2429 : i32 = u_xlati25;
    let x_2431 : f32 = x_2376.x_AdditionalLightsAttenuation[x_2429].z;
    let x_2433 : i32 = u_xlati25;
    let x_2435 : f32 = x_2376.x_AdditionalLightsAttenuation[x_2433].w;
    u_xlat74 = ((x_2428 * x_2431) + x_2435);
    let x_2437 : f32 = u_xlat74;
    u_xlat74 = clamp(x_2437, 0.0f, 1.0f);
    let x_2439 : f32 = u_xlat74;
    let x_2440 : f32 = u_xlat74;
    u_xlat74 = (x_2439 * x_2440);
    let x_2442 : f32 = u_xlat71;
    let x_2443 : f32 = u_xlat74;
    u_xlat71 = (x_2442 * x_2443);
    let x_2445 : f32 = u_xlat72;
    let x_2447 : i32 = u_xlati25;
    let x_2449 : vec4<f32> = x_2376.x_AdditionalLightsColor[x_2447];
    let x_2451 : vec3<f32> = (vec3<f32>(x_2445, x_2445, x_2445) * vec3<f32>(x_2449.x, x_2449.y, x_2449.z));
    let x_2452 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2451.x, x_2451.y, x_2451.z, x_2452.w);
    let x_2454 : vec4<f32> = u_xlat4;
    let x_2456 : vec4<f32> = u_xlat10;
    u_xlat25 = dot(vec3<f32>(x_2454.x, x_2454.y, x_2454.z), vec3<f32>(x_2456.x, x_2456.y, x_2456.z));
    let x_2459 : f32 = u_xlat25;
    u_xlat25 = clamp(x_2459, 0.0f, 1.0f);
    let x_2461 : f32 = u_xlat25;
    let x_2462 : f32 = u_xlat71;
    u_xlat25 = (x_2461 * x_2462);
    let x_2464 : f32 = u_xlat25;
    let x_2466 : vec4<f32> = u_xlat11;
    let x_2468 : vec3<f32> = (vec3<f32>(x_2464, x_2464, x_2464) * vec3<f32>(x_2466.x, x_2466.y, x_2466.z));
    let x_2469 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2468.x, x_2468.y, x_2468.z, x_2469.w);
    let x_2471 : vec3<f32> = u_xlat31;
    let x_2472 : f32 = u_xlat73;
    let x_2475 : vec4<f32> = u_xlat1;
    u_xlat31 = ((x_2471 * vec3<f32>(x_2472, x_2472, x_2472)) + vec3<f32>(x_2475.x, x_2475.y, x_2475.w));
    let x_2478 : vec3<f32> = u_xlat31;
    let x_2479 : vec3<f32> = u_xlat31;
    u_xlat25 = dot(x_2478, x_2479);
    let x_2481 : f32 = u_xlat25;
    u_xlat25 = max(x_2481, 1.17549435e-37f);
    let x_2483 : f32 = u_xlat25;
    u_xlat25 = inverseSqrt(x_2483);
    let x_2485 : f32 = u_xlat25;
    let x_2487 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_2485, x_2485, x_2485) * x_2487);
    let x_2489 : vec4<f32> = u_xlat4;
    let x_2491 : vec3<f32> = u_xlat31;
    u_xlat25 = dot(vec3<f32>(x_2489.x, x_2489.y, x_2489.z), x_2491);
    let x_2493 : f32 = u_xlat25;
    u_xlat25 = clamp(x_2493, 0.0f, 1.0f);
    let x_2495 : vec4<f32> = u_xlat10;
    let x_2497 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(vec3<f32>(x_2495.x, x_2495.y, x_2495.z), x_2497);
    let x_2499 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2499, 0.0f, 1.0f);
    let x_2501 : f32 = u_xlat25;
    let x_2502 : f32 = u_xlat25;
    u_xlat25 = (x_2501 * x_2502);
    let x_2504 : f32 = u_xlat25;
    let x_2506 : f32 = u_xlat9.x;
    u_xlat25 = ((x_2504 * x_2506) + 1.000010014f);
    let x_2509 : f32 = u_xlat71;
    let x_2510 : f32 = u_xlat71;
    u_xlat71 = (x_2509 * x_2510);
    let x_2512 : f32 = u_xlat25;
    let x_2513 : f32 = u_xlat25;
    u_xlat25 = (x_2512 * x_2513);
    let x_2515 : f32 = u_xlat71;
    u_xlat71 = max(x_2515, 0.100000001f);
    let x_2517 : f32 = u_xlat25;
    let x_2518 : f32 = u_xlat71;
    u_xlat25 = (x_2517 * x_2518);
    let x_2520 : f32 = u_xlat69;
    let x_2521 : f32 = u_xlat25;
    u_xlat25 = (x_2520 * x_2521);
    let x_2523 : f32 = u_xlat70;
    let x_2524 : f32 = u_xlat25;
    u_xlat25 = (x_2523 / x_2524);
    let x_2526 : vec3<f32> = u_xlat0;
    let x_2527 : f32 = u_xlat25;
    let x_2530 : vec3<f32> = u_xlat8;
    u_xlat31 = ((x_2526 * vec3<f32>(x_2527, x_2527, x_2527)) + x_2530);
    let x_2532 : vec3<f32> = u_xlat31;
    let x_2533 : vec4<f32> = u_xlat11;
    let x_2536 : vec4<f32> = u_xlat7;
    let x_2538 : vec3<f32> = ((x_2532 * vec3<f32>(x_2533.x, x_2533.y, x_2533.z)) + vec3<f32>(x_2536.x, x_2536.y, x_2536.z));
    let x_2539 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2538.x, x_2538.y, x_2538.z, x_2539.w);

    continuing {
      let x_2541 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2541 + bitcast<u32>(1i));
    }
  }
  let x_2543 : vec4<f32> = u_xlat6;
  let x_2545 : f32 = u_xlat47;
  let x_2548 : vec4<f32> = u_xlat5;
  u_xlat0 = ((vec3<f32>(x_2543.x, x_2543.y, x_2543.z) * vec3<f32>(x_2545, x_2545, x_2545)) + vec3<f32>(x_2548.x, x_2548.y, x_2548.z));
  let x_2551 : vec4<f32> = u_xlat7;
  let x_2553 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_2551.x, x_2551.y, x_2551.z) + x_2553);
  let x_2555 : vec4<f32> = u_xlat2;
  let x_2557 : f32 = u_xlat45;
  let x_2560 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_2555.x, x_2555.y, x_2555.z) * vec3<f32>(x_2557, x_2557, x_2557)) + x_2560);
  let x_2562 : f32 = u_xlat66;
  let x_2563 : f32 = u_xlat66;
  u_xlat66 = (x_2562 * -(x_2563));
  let x_2566 : f32 = u_xlat66;
  u_xlat66 = exp2(x_2566);
  let x_2568 : vec3<f32> = u_xlat0;
  let x_2571 : vec4<f32> = x_45.unity_FogColor;
  u_xlat0 = (x_2568 + -(vec3<f32>(x_2571.x, x_2571.y, x_2571.z)));
  let x_2577 : f32 = u_xlat66;
  let x_2579 : vec3<f32> = u_xlat0;
  let x_2582 : vec4<f32> = x_45.unity_FogColor;
  let x_2584 : vec3<f32> = ((vec3<f32>(x_2577, x_2577, x_2577) * x_2579) + vec3<f32>(x_2582.x, x_2582.y, x_2582.z));
  let x_2585 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2584.x, x_2584.y, x_2584.z, x_2585.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0);
}

