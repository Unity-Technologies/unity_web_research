struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3456 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1689 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var x_3696 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1659 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1659 == 0.0f);
  let x_1662 : vec3<f32> = vs_INTERP0;
  let x_1666 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1662) + x_1666);
  let x_1668 : vec3<f32> = u_xlat25;
  let x_1669 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1668, x_1669);
  let x_1671 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1671);
  let x_1673 : f32 = u_xlat64;
  let x_1675 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1673, x_1673, x_1673) * x_1675);
  let x_1679 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat5.x = x_1679;
  let x_1682 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat5.y = x_1682;
  let x_1685 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat5.z = x_1685;
  let x_1688 : bool = u_xlatb22.x;
  if (x_1688) {
    let x_1692 : vec3<f32> = u_xlat25;
    x_1689 = x_1692;
  } else {
    let x_1694 : vec4<f32> = u_xlat5;
    x_1689 = vec3<f32>(x_1694.x, x_1694.y, x_1694.z);
  }
  let x_1696 : vec3<f32> = x_1689;
  u_xlat25 = x_1696;
  let x_1698 : f32 = vs_INTERP0.y;
  let x_1700 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat22.x = (x_1698 * x_1700);
  let x_1704 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1706 : f32 = vs_INTERP0.x;
  let x_1709 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1704 * x_1706) + x_1709);
  let x_1713 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1715 : f32 = vs_INTERP0.z;
  let x_1718 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1713 * x_1715) + x_1718);
  let x_1722 : f32 = u_xlat22.x;
  let x_1724 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat22.x = (x_1722 + x_1724);
  let x_1728 : f32 = u_xlat22.x;
  let x_1732 : f32 = x_66.x_ProjectionParams.y;
  u_xlat22.x = (-(x_1728) + -(x_1732));
  let x_1737 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_1737, 0.0f);
  let x_1741 : f32 = u_xlat22.x;
  let x_1744 : f32 = x_66.unity_FogParams.x;
  u_xlat22.x = (x_1741 * x_1744);
  let x_1754 : vec2<f32> = vs_INTERP5;
  let x_1756 : f32 = x_66.x_GlobalMipBias.x;
  let x_1757 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1754, x_1756);
  let x_1758 : vec3<f32> = vec3<f32>(x_1757.x, x_1757.y, x_1757.z);
  let x_1759 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1758.x, x_1758.y, x_1758.z, x_1759.w);
  let x_1762 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1763 : vec2<f32> = vec2<f32>(x_1762.x, x_1762.y);
  let x_1767 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1763.x, x_1763.y));
  let x_1768 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1767.x, x_1767.y, x_1768.z, x_1768.w);
  let x_1770 : vec4<f32> = u_xlat6;
  let x_1772 : vec4<f32> = hlslcc_FragCoord;
  let x_1774 : vec2<f32> = (vec2<f32>(x_1770.x, x_1770.y) * vec2<f32>(x_1772.x, x_1772.y));
  let x_1775 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1774.x, x_1774.y, x_1775.z, x_1775.w);
  let x_1778 : f32 = u_xlat6.y;
  let x_1781 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1784 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1778 * x_1781) + x_1784);
  let x_1786 : f32 = u_xlat64;
  u_xlat6.z = (-(x_1786) + 1.0f);
  let x_1791 : f32 = u_xlat3.x;
  u_xlat3.x = x_1791;
  let x_1794 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1794, 0.0f, 1.0f);
  let x_1798 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1798, 1.0f);
  let x_1801 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1801 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1806 : f32 = u_xlat3.x;
  u_xlat64 = (-(x_1806) + 1.0f);
  let x_1809 : f32 = u_xlat64;
  let x_1810 : f32 = u_xlat64;
  u_xlat65 = (x_1809 * x_1810);
  let x_1812 : f32 = u_xlat65;
  u_xlat65 = max(x_1812, 0.0078125f);
  let x_1816 : f32 = u_xlat65;
  let x_1817 : f32 = u_xlat65;
  u_xlat68 = (x_1816 * x_1817);
  let x_1820 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1820 + 0.040000021f);
  let x_1825 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1825, 1.0f);
  let x_1828 : f32 = u_xlat65;
  u_xlat27.x = ((x_1828 * 4.0f) + 2.0f);
  let x_1838 : vec4<f32> = u_xlat6;
  let x_1841 : f32 = x_66.x_GlobalMipBias.x;
  let x_1842 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1838.x, x_1838.z), x_1841);
  u_xlat6.x = x_1842.x;
  let x_1847 : f32 = u_xlat6.x;
  u_xlat48 = (x_1847 + -1.0f);
  let x_1851 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1852 : f32 = u_xlat48;
  u_xlat48 = ((x_1851 * x_1852) + 1.0f);
  let x_1856 : f32 = u_xlat6.x;
  let x_1858 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1856, x_1858);
  let x_1861 : bool = u_xlatb63;
  if (x_1861) {
    let x_1865 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1865 == 1.0f);
    let x_1867 : bool = u_xlatb63;
    if (x_1867) {
      let x_1871 : vec4<f32> = vs_INTERP9;
      let x_1874 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1871.x, x_1871.y, x_1871.x, x_1871.y) + x_1874);
      let x_1877 : vec4<f32> = u_xlat7;
      let x_1878 : vec2<f32> = vec2<f32>(x_1877.x, x_1877.y);
      let x_1880 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1878.x, x_1878.y, x_1880);
      let x_1887 : vec3<f32> = txVec30;
      let x_1889 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1887.xy, x_1887.z);
      u_xlat8.x = x_1889;
      let x_1892 : vec4<f32> = u_xlat7;
      let x_1893 : vec2<f32> = vec2<f32>(x_1892.z, x_1892.w);
      let x_1895 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1893.x, x_1893.y, x_1895);
      let x_1902 : vec3<f32> = txVec31;
      let x_1904 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1902.xy, x_1902.z);
      u_xlat8.y = x_1904;
      let x_1906 : vec4<f32> = vs_INTERP9;
      let x_1909 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1906.x, x_1906.y, x_1906.x, x_1906.y) + x_1909);
      let x_1912 : vec4<f32> = u_xlat7;
      let x_1913 : vec2<f32> = vec2<f32>(x_1912.x, x_1912.y);
      let x_1915 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1913.x, x_1913.y, x_1915);
      let x_1922 : vec3<f32> = txVec32;
      let x_1924 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1922.xy, x_1922.z);
      u_xlat8.z = x_1924;
      let x_1927 : vec4<f32> = u_xlat7;
      let x_1928 : vec2<f32> = vec2<f32>(x_1927.z, x_1927.w);
      let x_1930 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1928.x, x_1928.y, x_1930);
      let x_1937 : vec3<f32> = txVec33;
      let x_1939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1937.xy, x_1937.z);
      u_xlat8.w = x_1939;
      let x_1941 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1941, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1946 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb69 = (x_1946 == 2.0f);
      let x_1948 : bool = u_xlatb69;
      if (x_1948) {
        let x_1951 : vec4<f32> = vs_INTERP9;
        let x_1954 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1957 : vec2<f32> = ((vec2<f32>(x_1951.x, x_1951.y) * vec2<f32>(x_1954.z, x_1954.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1958 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1957.x, x_1957.y, x_1958.z, x_1958.w);
        let x_1960 : vec4<f32> = u_xlat7;
        let x_1962 : vec2<f32> = floor(vec2<f32>(x_1960.x, x_1960.y));
        let x_1963 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1962.x, x_1962.y, x_1963.z, x_1963.w);
        let x_1965 : vec4<f32> = vs_INTERP9;
        let x_1968 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1971 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1965.x, x_1965.y) * vec2<f32>(x_1968.z, x_1968.w)) + -(vec2<f32>(x_1971.x, x_1971.y)));
        let x_1975 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1975.x, x_1975.x, x_1975.y, x_1975.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1978 : vec4<f32> = u_xlat8;
        let x_1980 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1978.x, x_1978.x, x_1978.z, x_1978.z) * vec4<f32>(x_1980.x, x_1980.x, x_1980.z, x_1980.z));
        let x_1983 : vec4<f32> = u_xlat9;
        let x_1985 : vec2<f32> = (vec2<f32>(x_1983.y, x_1983.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1986 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1985.x, x_1986.y, x_1985.y, x_1986.w);
        let x_1988 : vec4<f32> = u_xlat9;
        let x_1991 : vec2<f32> = u_xlat49;
        let x_1993 : vec2<f32> = ((vec2<f32>(x_1988.x, x_1988.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1991));
        let x_1994 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1993.x, x_1993.y, x_1994.z, x_1994.w);
        let x_1997 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_1997) + vec2<f32>(1.0f, 1.0f));
        let x_2000 : vec2<f32> = u_xlat49;
        let x_2001 : vec2<f32> = min(x_2000, vec2<f32>(0.0f, 0.0f));
        let x_2002 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2001.x, x_2001.y, x_2002.z, x_2002.w);
        let x_2004 : vec4<f32> = u_xlat10;
        let x_2007 : vec4<f32> = u_xlat10;
        let x_2010 : vec2<f32> = u_xlat51;
        let x_2011 : vec2<f32> = ((-(vec2<f32>(x_2004.x, x_2004.y)) * vec2<f32>(x_2007.x, x_2007.y)) + x_2010);
        let x_2012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2011.x, x_2011.y, x_2012.z, x_2012.w);
        let x_2014 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2014, vec2<f32>(0.0f, 0.0f));
        let x_2016 : vec2<f32> = u_xlat49;
        let x_2018 : vec2<f32> = u_xlat49;
        let x_2020 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2016) * x_2018) + vec2<f32>(x_2020.y, x_2020.w));
        let x_2023 : vec4<f32> = u_xlat10;
        let x_2025 : vec2<f32> = (vec2<f32>(x_2023.x, x_2023.y) + vec2<f32>(1.0f, 1.0f));
        let x_2026 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2025.x, x_2025.y, x_2026.z, x_2026.w);
        let x_2028 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2028 + vec2<f32>(1.0f, 1.0f));
        let x_2030 : vec4<f32> = u_xlat9;
        let x_2032 : vec2<f32> = (vec2<f32>(x_2030.x, x_2030.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2033 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2032.x, x_2032.y, x_2033.z, x_2033.w);
        let x_2035 : vec2<f32> = u_xlat51;
        let x_2036 : vec2<f32> = (x_2035 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2037 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2036.x, x_2036.y, x_2037.z, x_2037.w);
        let x_2039 : vec4<f32> = u_xlat10;
        let x_2041 : vec2<f32> = (vec2<f32>(x_2039.x, x_2039.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2042 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2041.x, x_2041.y, x_2042.z, x_2042.w);
        let x_2044 : vec2<f32> = u_xlat49;
        let x_2045 : vec2<f32> = (x_2044 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2046 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2045.x, x_2045.y, x_2046.z, x_2046.w);
        let x_2048 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2048.y, x_2048.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2052 : f32 = u_xlat10.x;
        u_xlat11.z = x_2052;
        let x_2055 : f32 = u_xlat49.x;
        u_xlat11.w = x_2055;
        let x_2058 : f32 = u_xlat12.x;
        u_xlat9.z = x_2058;
        let x_2061 : f32 = u_xlat8.x;
        u_xlat9.w = x_2061;
        let x_2063 : vec4<f32> = u_xlat9;
        let x_2065 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2063.z, x_2063.w, x_2063.x, x_2063.z) + vec4<f32>(x_2065.z, x_2065.w, x_2065.x, x_2065.z));
        let x_2069 : f32 = u_xlat11.y;
        u_xlat10.z = x_2069;
        let x_2072 : f32 = u_xlat49.y;
        u_xlat10.w = x_2072;
        let x_2075 : f32 = u_xlat9.y;
        u_xlat12.z = x_2075;
        let x_2078 : f32 = u_xlat8.z;
        u_xlat12.w = x_2078;
        let x_2080 : vec4<f32> = u_xlat10;
        let x_2082 : vec4<f32> = u_xlat12;
        let x_2084 : vec3<f32> = (vec3<f32>(x_2080.z, x_2080.y, x_2080.w) + vec3<f32>(x_2082.z, x_2082.y, x_2082.w));
        let x_2085 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2084.x, x_2084.y, x_2084.z, x_2085.w);
        let x_2087 : vec4<f32> = u_xlat9;
        let x_2089 : vec4<f32> = u_xlat13;
        let x_2091 : vec3<f32> = (vec3<f32>(x_2087.x, x_2087.z, x_2087.w) / vec3<f32>(x_2089.z, x_2089.w, x_2089.y));
        let x_2092 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2091.x, x_2091.y, x_2091.z, x_2092.w);
        let x_2094 : vec4<f32> = u_xlat9;
        let x_2096 : vec3<f32> = (vec3<f32>(x_2094.x, x_2094.y, x_2094.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2097 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2096.x, x_2096.y, x_2096.z, x_2097.w);
        let x_2099 : vec4<f32> = u_xlat12;
        let x_2101 : vec4<f32> = u_xlat8;
        let x_2103 : vec3<f32> = (vec3<f32>(x_2099.z, x_2099.y, x_2099.w) / vec3<f32>(x_2101.x, x_2101.y, x_2101.z));
        let x_2104 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2103.x, x_2103.y, x_2103.z, x_2104.w);
        let x_2106 : vec4<f32> = u_xlat10;
        let x_2108 : vec3<f32> = (vec3<f32>(x_2106.x, x_2106.y, x_2106.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2109 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2108.x, x_2108.y, x_2108.z, x_2109.w);
        let x_2111 : vec4<f32> = u_xlat9;
        let x_2114 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2116 : vec3<f32> = (vec3<f32>(x_2111.y, x_2111.x, x_2111.z) * vec3<f32>(x_2114.x, x_2114.x, x_2114.x));
        let x_2117 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2116.x, x_2116.y, x_2116.z, x_2117.w);
        let x_2119 : vec4<f32> = u_xlat10;
        let x_2122 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2124 : vec3<f32> = (vec3<f32>(x_2119.x, x_2119.y, x_2119.z) * vec3<f32>(x_2122.y, x_2122.y, x_2122.y));
        let x_2125 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2124.x, x_2124.y, x_2124.z, x_2125.w);
        let x_2128 : f32 = u_xlat10.x;
        u_xlat9.w = x_2128;
        let x_2130 : vec4<f32> = u_xlat7;
        let x_2133 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2136 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2130.x, x_2130.y, x_2130.x, x_2130.y) * vec4<f32>(x_2133.x, x_2133.y, x_2133.x, x_2133.y)) + vec4<f32>(x_2136.y, x_2136.w, x_2136.x, x_2136.w));
        let x_2139 : vec4<f32> = u_xlat7;
        let x_2142 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2145 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2139.x, x_2139.y) * vec2<f32>(x_2142.x, x_2142.y)) + vec2<f32>(x_2145.z, x_2145.w));
        let x_2149 : f32 = u_xlat9.y;
        u_xlat10.w = x_2149;
        let x_2151 : vec4<f32> = u_xlat10;
        let x_2152 : vec2<f32> = vec2<f32>(x_2151.y, x_2151.z);
        let x_2153 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2153.x, x_2152.x, x_2153.z, x_2152.y);
        let x_2155 : vec4<f32> = u_xlat7;
        let x_2158 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2161 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2155.x, x_2155.y, x_2155.x, x_2155.y) * vec4<f32>(x_2158.x, x_2158.y, x_2158.x, x_2158.y)) + vec4<f32>(x_2161.x, x_2161.y, x_2161.z, x_2161.y));
        let x_2164 : vec4<f32> = u_xlat7;
        let x_2167 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2170 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2164.x, x_2164.y, x_2164.x, x_2164.y) * vec4<f32>(x_2167.x, x_2167.y, x_2167.x, x_2167.y)) + vec4<f32>(x_2170.w, x_2170.y, x_2170.w, x_2170.z));
        let x_2173 : vec4<f32> = u_xlat7;
        let x_2176 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2179 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2173.x, x_2173.y, x_2173.x, x_2173.y) * vec4<f32>(x_2176.x, x_2176.y, x_2176.x, x_2176.y)) + vec4<f32>(x_2179.x, x_2179.w, x_2179.z, x_2179.w));
        let x_2182 : vec4<f32> = u_xlat8;
        let x_2184 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2182.x, x_2182.x, x_2182.x, x_2182.y) * vec4<f32>(x_2184.z, x_2184.w, x_2184.y, x_2184.z));
        let x_2187 : vec4<f32> = u_xlat8;
        let x_2189 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2187.y, x_2187.y, x_2187.z, x_2187.z) * x_2189);
        let x_2193 : f32 = u_xlat8.z;
        let x_2195 : f32 = u_xlat13.y;
        u_xlat69 = (x_2193 * x_2195);
        let x_2198 : vec4<f32> = u_xlat11;
        let x_2199 : vec2<f32> = vec2<f32>(x_2198.x, x_2198.y);
        let x_2201 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2199.x, x_2199.y, x_2201);
        let x_2208 : vec3<f32> = txVec34;
        let x_2210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2208.xy, x_2208.z);
        u_xlat7.x = x_2210;
        let x_2213 : vec4<f32> = u_xlat11;
        let x_2214 : vec2<f32> = vec2<f32>(x_2213.z, x_2213.w);
        let x_2216 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2214.x, x_2214.y, x_2216);
        let x_2223 : vec3<f32> = txVec35;
        let x_2225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2223.xy, x_2223.z);
        u_xlat28.x = x_2225;
        let x_2228 : f32 = u_xlat28.x;
        let x_2230 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2228 * x_2230);
        let x_2234 : f32 = u_xlat14.x;
        let x_2236 : f32 = u_xlat7.x;
        let x_2239 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2234 * x_2236) + x_2239);
        let x_2243 : vec2<f32> = u_xlat49;
        let x_2245 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2243.x, x_2243.y, x_2245);
        let x_2252 : vec3<f32> = txVec36;
        let x_2254 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2252.xy, x_2252.z);
        u_xlat28.x = x_2254;
        let x_2257 : f32 = u_xlat14.z;
        let x_2259 : f32 = u_xlat28.x;
        let x_2262 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2257 * x_2259) + x_2262);
        let x_2266 : vec4<f32> = u_xlat10;
        let x_2267 : vec2<f32> = vec2<f32>(x_2266.x, x_2266.y);
        let x_2269 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2267.x, x_2267.y, x_2269);
        let x_2276 : vec3<f32> = txVec37;
        let x_2278 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2276.xy, x_2276.z);
        u_xlat28.x = x_2278;
        let x_2281 : f32 = u_xlat14.w;
        let x_2283 : f32 = u_xlat28.x;
        let x_2286 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2281 * x_2283) + x_2286);
        let x_2290 : vec4<f32> = u_xlat12;
        let x_2291 : vec2<f32> = vec2<f32>(x_2290.x, x_2290.y);
        let x_2293 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2291.x, x_2291.y, x_2293);
        let x_2300 : vec3<f32> = txVec38;
        let x_2302 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2300.xy, x_2300.z);
        u_xlat28.x = x_2302;
        let x_2305 : f32 = u_xlat15.x;
        let x_2307 : f32 = u_xlat28.x;
        let x_2310 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2305 * x_2307) + x_2310);
        let x_2314 : vec4<f32> = u_xlat12;
        let x_2315 : vec2<f32> = vec2<f32>(x_2314.z, x_2314.w);
        let x_2317 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2315.x, x_2315.y, x_2317);
        let x_2324 : vec3<f32> = txVec39;
        let x_2326 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2324.xy, x_2324.z);
        u_xlat28.x = x_2326;
        let x_2329 : f32 = u_xlat15.y;
        let x_2331 : f32 = u_xlat28.x;
        let x_2334 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2329 * x_2331) + x_2334);
        let x_2338 : vec4<f32> = u_xlat10;
        let x_2339 : vec2<f32> = vec2<f32>(x_2338.z, x_2338.w);
        let x_2341 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2339.x, x_2339.y, x_2341);
        let x_2348 : vec3<f32> = txVec40;
        let x_2350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2348.xy, x_2348.z);
        u_xlat28.x = x_2350;
        let x_2353 : f32 = u_xlat15.z;
        let x_2355 : f32 = u_xlat28.x;
        let x_2358 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2353 * x_2355) + x_2358);
        let x_2362 : vec4<f32> = u_xlat9;
        let x_2363 : vec2<f32> = vec2<f32>(x_2362.x, x_2362.y);
        let x_2365 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2363.x, x_2363.y, x_2365);
        let x_2372 : vec3<f32> = txVec41;
        let x_2374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2372.xy, x_2372.z);
        u_xlat28.x = x_2374;
        let x_2377 : f32 = u_xlat15.w;
        let x_2379 : f32 = u_xlat28.x;
        let x_2382 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2377 * x_2379) + x_2382);
        let x_2386 : vec4<f32> = u_xlat9;
        let x_2387 : vec2<f32> = vec2<f32>(x_2386.z, x_2386.w);
        let x_2389 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2387.x, x_2387.y, x_2389);
        let x_2396 : vec3<f32> = txVec42;
        let x_2398 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2396.xy, x_2396.z);
        u_xlat28.x = x_2398;
        let x_2400 : f32 = u_xlat69;
        let x_2402 : f32 = u_xlat28.x;
        let x_2405 : f32 = u_xlat7.x;
        u_xlat63 = ((x_2400 * x_2402) + x_2405);
      } else {
        let x_2408 : vec4<f32> = vs_INTERP9;
        let x_2411 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2414 : vec2<f32> = ((vec2<f32>(x_2408.x, x_2408.y) * vec2<f32>(x_2411.z, x_2411.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2415 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2414.x, x_2414.y, x_2415.z, x_2415.w);
        let x_2417 : vec4<f32> = u_xlat7;
        let x_2419 : vec2<f32> = floor(vec2<f32>(x_2417.x, x_2417.y));
        let x_2420 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2419.x, x_2419.y, x_2420.z, x_2420.w);
        let x_2422 : vec4<f32> = vs_INTERP9;
        let x_2425 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2428 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2422.x, x_2422.y) * vec2<f32>(x_2425.z, x_2425.w)) + -(vec2<f32>(x_2428.x, x_2428.y)));
        let x_2432 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2432.x, x_2432.x, x_2432.y, x_2432.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2435 : vec4<f32> = u_xlat8;
        let x_2437 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2435.x, x_2435.x, x_2435.z, x_2435.z) * vec4<f32>(x_2437.x, x_2437.x, x_2437.z, x_2437.z));
        let x_2440 : vec4<f32> = u_xlat9;
        let x_2442 : vec2<f32> = (vec2<f32>(x_2440.y, x_2440.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2443 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2443.x, x_2442.x, x_2443.z, x_2442.y);
        let x_2445 : vec4<f32> = u_xlat9;
        let x_2448 : vec2<f32> = u_xlat49;
        let x_2450 : vec2<f32> = ((vec2<f32>(x_2445.x, x_2445.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2448));
        let x_2451 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2450.x, x_2451.y, x_2450.y, x_2451.w);
        let x_2453 : vec2<f32> = u_xlat49;
        let x_2455 : vec2<f32> = (-(x_2453) + vec2<f32>(1.0f, 1.0f));
        let x_2456 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2455.x, x_2455.y, x_2456.z, x_2456.w);
        let x_2458 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2458, vec2<f32>(0.0f, 0.0f));
        let x_2460 : vec2<f32> = u_xlat51;
        let x_2462 : vec2<f32> = u_xlat51;
        let x_2464 : vec4<f32> = u_xlat9;
        let x_2466 : vec2<f32> = ((-(x_2460) * x_2462) + vec2<f32>(x_2464.x, x_2464.y));
        let x_2467 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2466.x, x_2466.y, x_2467.z, x_2467.w);
        let x_2469 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2469, vec2<f32>(0.0f, 0.0f));
        let x_2472 : vec2<f32> = u_xlat51;
        let x_2474 : vec2<f32> = u_xlat51;
        let x_2476 : vec4<f32> = u_xlat8;
        let x_2478 : vec2<f32> = ((-(x_2472) * x_2474) + vec2<f32>(x_2476.y, x_2476.w));
        let x_2479 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2478.x, x_2479.y, x_2478.y);
        let x_2481 : vec4<f32> = u_xlat9;
        let x_2483 : vec2<f32> = (vec2<f32>(x_2481.x, x_2481.y) + vec2<f32>(2.0f, 2.0f));
        let x_2484 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2483.x, x_2483.y, x_2484.z, x_2484.w);
        let x_2486 : vec3<f32> = u_xlat29;
        let x_2488 : vec2<f32> = (vec2<f32>(x_2486.x, x_2486.z) + vec2<f32>(2.0f, 2.0f));
        let x_2489 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2489.x, x_2488.x, x_2489.z, x_2488.y);
        let x_2492 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2492 * 0.081632003f);
        let x_2495 : vec4<f32> = u_xlat8;
        let x_2497 : vec3<f32> = (vec3<f32>(x_2495.z, x_2495.x, x_2495.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2498 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2497.x, x_2497.y, x_2497.z, x_2498.w);
        let x_2500 : vec4<f32> = u_xlat9;
        let x_2502 : vec2<f32> = (vec2<f32>(x_2500.x, x_2500.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2503 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2502.x, x_2502.y, x_2503.z, x_2503.w);
        let x_2506 : f32 = u_xlat12.y;
        u_xlat11.x = x_2506;
        let x_2508 : vec2<f32> = u_xlat49;
        let x_2511 : vec2<f32> = ((vec2<f32>(x_2508.x, x_2508.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2512 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2512.x, x_2511.x, x_2512.z, x_2511.y);
        let x_2514 : vec2<f32> = u_xlat49;
        let x_2517 : vec2<f32> = ((vec2<f32>(x_2514.x, x_2514.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2518 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2517.x, x_2518.y, x_2517.y, x_2518.w);
        let x_2521 : f32 = u_xlat8.x;
        u_xlat9.y = x_2521;
        let x_2524 : f32 = u_xlat10.y;
        u_xlat9.w = x_2524;
        let x_2526 : vec4<f32> = u_xlat9;
        let x_2527 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2526 + x_2527);
        let x_2529 : vec2<f32> = u_xlat49;
        let x_2532 : vec2<f32> = ((vec2<f32>(x_2529.y, x_2529.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2533 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2533.x, x_2532.x, x_2533.z, x_2532.y);
        let x_2535 : vec2<f32> = u_xlat49;
        let x_2538 : vec2<f32> = ((vec2<f32>(x_2535.y, x_2535.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2539 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2538.x, x_2539.y, x_2538.y, x_2539.w);
        let x_2542 : f32 = u_xlat8.y;
        u_xlat10.y = x_2542;
        let x_2544 : vec4<f32> = u_xlat10;
        let x_2545 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2544 + x_2545);
        let x_2547 : vec4<f32> = u_xlat9;
        let x_2548 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2547 / x_2548);
        let x_2550 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2550 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2552 : vec4<f32> = u_xlat10;
        let x_2553 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2552 / x_2553);
        let x_2555 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2555 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2557 : vec4<f32> = u_xlat9;
        let x_2560 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2557.w, x_2557.x, x_2557.y, x_2557.z) * vec4<f32>(x_2560.x, x_2560.x, x_2560.x, x_2560.x));
        let x_2563 : vec4<f32> = u_xlat10;
        let x_2566 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2563.x, x_2563.w, x_2563.y, x_2563.z) * vec4<f32>(x_2566.y, x_2566.y, x_2566.y, x_2566.y));
        let x_2569 : vec4<f32> = u_xlat9;
        let x_2570 : vec3<f32> = vec3<f32>(x_2569.y, x_2569.z, x_2569.w);
        let x_2571 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2570.x, x_2571.y, x_2570.y, x_2570.z);
        let x_2574 : f32 = u_xlat10.x;
        u_xlat12.y = x_2574;
        let x_2576 : vec4<f32> = u_xlat7;
        let x_2579 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2582 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2576.x, x_2576.y, x_2576.x, x_2576.y) * vec4<f32>(x_2579.x, x_2579.y, x_2579.x, x_2579.y)) + vec4<f32>(x_2582.x, x_2582.y, x_2582.z, x_2582.y));
        let x_2585 : vec4<f32> = u_xlat7;
        let x_2588 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2591 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2585.x, x_2585.y) * vec2<f32>(x_2588.x, x_2588.y)) + vec2<f32>(x_2591.w, x_2591.y));
        let x_2595 : f32 = u_xlat12.y;
        u_xlat9.y = x_2595;
        let x_2598 : f32 = u_xlat10.z;
        u_xlat12.y = x_2598;
        let x_2600 : vec4<f32> = u_xlat7;
        let x_2603 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2606 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2600.x, x_2600.y, x_2600.x, x_2600.y) * vec4<f32>(x_2603.x, x_2603.y, x_2603.x, x_2603.y)) + vec4<f32>(x_2606.x, x_2606.y, x_2606.z, x_2606.y));
        let x_2609 : vec4<f32> = u_xlat7;
        let x_2612 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2615 : vec4<f32> = u_xlat12;
        let x_2617 : vec2<f32> = ((vec2<f32>(x_2609.x, x_2609.y) * vec2<f32>(x_2612.x, x_2612.y)) + vec2<f32>(x_2615.w, x_2615.y));
        let x_2618 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2617.x, x_2617.y, x_2618.z, x_2618.w);
        let x_2621 : f32 = u_xlat12.y;
        u_xlat9.z = x_2621;
        let x_2623 : vec4<f32> = u_xlat7;
        let x_2626 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2629 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2623.x, x_2623.y, x_2623.x, x_2623.y) * vec4<f32>(x_2626.x, x_2626.y, x_2626.x, x_2626.y)) + vec4<f32>(x_2629.x, x_2629.y, x_2629.x, x_2629.z));
        let x_2633 : f32 = u_xlat10.w;
        u_xlat12.y = x_2633;
        let x_2635 : vec4<f32> = u_xlat7;
        let x_2638 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2641 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2635.x, x_2635.y, x_2635.x, x_2635.y) * vec4<f32>(x_2638.x, x_2638.y, x_2638.x, x_2638.y)) + vec4<f32>(x_2641.x, x_2641.y, x_2641.z, x_2641.y));
        let x_2645 : vec4<f32> = u_xlat7;
        let x_2648 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2651 : vec4<f32> = u_xlat12;
        let x_2653 : vec2<f32> = ((vec2<f32>(x_2645.x, x_2645.y) * vec2<f32>(x_2648.x, x_2648.y)) + vec2<f32>(x_2651.w, x_2651.y));
        let x_2654 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2653.x, x_2653.y, x_2654.z);
        let x_2657 : f32 = u_xlat12.y;
        u_xlat9.w = x_2657;
        let x_2660 : vec4<f32> = u_xlat7;
        let x_2663 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2666 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2660.x, x_2660.y) * vec2<f32>(x_2663.x, x_2663.y)) + vec2<f32>(x_2666.x, x_2666.w));
        let x_2669 : vec4<f32> = u_xlat12;
        let x_2670 : vec3<f32> = vec3<f32>(x_2669.x, x_2669.z, x_2669.w);
        let x_2671 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2670.x, x_2671.y, x_2670.y, x_2670.z);
        let x_2673 : vec4<f32> = u_xlat7;
        let x_2676 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2679 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2673.x, x_2673.y, x_2673.x, x_2673.y) * vec4<f32>(x_2676.x, x_2676.y, x_2676.x, x_2676.y)) + vec4<f32>(x_2679.x, x_2679.y, x_2679.z, x_2679.y));
        let x_2683 : vec4<f32> = u_xlat7;
        let x_2686 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2689 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2683.x, x_2683.y) * vec2<f32>(x_2686.x, x_2686.y)) + vec2<f32>(x_2689.w, x_2689.y));
        let x_2693 : f32 = u_xlat9.x;
        u_xlat10.x = x_2693;
        let x_2695 : vec4<f32> = u_xlat7;
        let x_2698 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2701 : vec4<f32> = u_xlat10;
        let x_2703 : vec2<f32> = ((vec2<f32>(x_2695.x, x_2695.y) * vec2<f32>(x_2698.x, x_2698.y)) + vec2<f32>(x_2701.x, x_2701.y));
        let x_2704 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2703.x, x_2703.y, x_2704.z, x_2704.w);
        let x_2706 : vec4<f32> = u_xlat8;
        let x_2708 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2706.x, x_2706.x, x_2706.x, x_2706.x) * x_2708);
        let x_2711 : vec4<f32> = u_xlat8;
        let x_2713 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2711.y, x_2711.y, x_2711.y, x_2711.y) * x_2713);
        let x_2716 : vec4<f32> = u_xlat8;
        let x_2718 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2716.z, x_2716.z, x_2716.z, x_2716.z) * x_2718);
        let x_2720 : vec4<f32> = u_xlat8;
        let x_2722 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2720.w, x_2720.w, x_2720.w, x_2720.w) * x_2722);
        let x_2725 : vec4<f32> = u_xlat13;
        let x_2726 : vec2<f32> = vec2<f32>(x_2725.x, x_2725.y);
        let x_2728 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2726.x, x_2726.y, x_2728);
        let x_2735 : vec3<f32> = txVec43;
        let x_2737 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2735.xy, x_2735.z);
        u_xlat69 = x_2737;
        let x_2739 : vec4<f32> = u_xlat13;
        let x_2740 : vec2<f32> = vec2<f32>(x_2739.z, x_2739.w);
        let x_2742 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2740.x, x_2740.y, x_2742);
        let x_2749 : vec3<f32> = txVec44;
        let x_2751 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2749.xy, x_2749.z);
        u_xlat9.x = x_2751;
        let x_2754 : f32 = u_xlat9.x;
        let x_2756 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2754 * x_2756);
        let x_2760 : f32 = u_xlat18.x;
        let x_2761 : f32 = u_xlat69;
        let x_2764 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2760 * x_2761) + x_2764);
        let x_2767 : vec2<f32> = u_xlat49;
        let x_2769 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2767.x, x_2767.y, x_2769);
        let x_2776 : vec3<f32> = txVec45;
        let x_2778 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2776.xy, x_2776.z);
        u_xlat49.x = x_2778;
        let x_2781 : f32 = u_xlat18.z;
        let x_2783 : f32 = u_xlat49.x;
        let x_2785 : f32 = u_xlat69;
        u_xlat69 = ((x_2781 * x_2783) + x_2785);
        let x_2788 : vec4<f32> = u_xlat16;
        let x_2789 : vec2<f32> = vec2<f32>(x_2788.x, x_2788.y);
        let x_2791 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2789.x, x_2789.y, x_2791);
        let x_2798 : vec3<f32> = txVec46;
        let x_2800 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2798.xy, x_2798.z);
        u_xlat49.x = x_2800;
        let x_2803 : f32 = u_xlat18.w;
        let x_2805 : f32 = u_xlat49.x;
        let x_2807 : f32 = u_xlat69;
        u_xlat69 = ((x_2803 * x_2805) + x_2807);
        let x_2810 : vec4<f32> = u_xlat14;
        let x_2811 : vec2<f32> = vec2<f32>(x_2810.x, x_2810.y);
        let x_2813 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2811.x, x_2811.y, x_2813);
        let x_2820 : vec3<f32> = txVec47;
        let x_2822 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2820.xy, x_2820.z);
        u_xlat49.x = x_2822;
        let x_2825 : f32 = u_xlat19.x;
        let x_2827 : f32 = u_xlat49.x;
        let x_2829 : f32 = u_xlat69;
        u_xlat69 = ((x_2825 * x_2827) + x_2829);
        let x_2832 : vec4<f32> = u_xlat14;
        let x_2833 : vec2<f32> = vec2<f32>(x_2832.z, x_2832.w);
        let x_2835 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2833.x, x_2833.y, x_2835);
        let x_2842 : vec3<f32> = txVec48;
        let x_2844 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2842.xy, x_2842.z);
        u_xlat49.x = x_2844;
        let x_2847 : f32 = u_xlat19.y;
        let x_2849 : f32 = u_xlat49.x;
        let x_2851 : f32 = u_xlat69;
        u_xlat69 = ((x_2847 * x_2849) + x_2851);
        let x_2854 : vec4<f32> = u_xlat15;
        let x_2855 : vec2<f32> = vec2<f32>(x_2854.x, x_2854.y);
        let x_2857 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2855.x, x_2855.y, x_2857);
        let x_2864 : vec3<f32> = txVec49;
        let x_2866 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2864.xy, x_2864.z);
        u_xlat49.x = x_2866;
        let x_2869 : f32 = u_xlat19.z;
        let x_2871 : f32 = u_xlat49.x;
        let x_2873 : f32 = u_xlat69;
        u_xlat69 = ((x_2869 * x_2871) + x_2873);
        let x_2876 : vec4<f32> = u_xlat16;
        let x_2877 : vec2<f32> = vec2<f32>(x_2876.z, x_2876.w);
        let x_2879 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2877.x, x_2877.y, x_2879);
        let x_2886 : vec3<f32> = txVec50;
        let x_2888 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2886.xy, x_2886.z);
        u_xlat49.x = x_2888;
        let x_2891 : f32 = u_xlat19.w;
        let x_2893 : f32 = u_xlat49.x;
        let x_2895 : f32 = u_xlat69;
        u_xlat69 = ((x_2891 * x_2893) + x_2895);
        let x_2898 : vec4<f32> = u_xlat17;
        let x_2899 : vec2<f32> = vec2<f32>(x_2898.x, x_2898.y);
        let x_2901 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2899.x, x_2899.y, x_2901);
        let x_2908 : vec3<f32> = txVec51;
        let x_2910 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2908.xy, x_2908.z);
        u_xlat49.x = x_2910;
        let x_2913 : f32 = u_xlat20.x;
        let x_2915 : f32 = u_xlat49.x;
        let x_2917 : f32 = u_xlat69;
        u_xlat69 = ((x_2913 * x_2915) + x_2917);
        let x_2920 : vec4<f32> = u_xlat17;
        let x_2921 : vec2<f32> = vec2<f32>(x_2920.z, x_2920.w);
        let x_2923 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2921.x, x_2921.y, x_2923);
        let x_2930 : vec3<f32> = txVec52;
        let x_2932 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2930.xy, x_2930.z);
        u_xlat49.x = x_2932;
        let x_2935 : f32 = u_xlat20.y;
        let x_2937 : f32 = u_xlat49.x;
        let x_2939 : f32 = u_xlat69;
        u_xlat69 = ((x_2935 * x_2937) + x_2939);
        let x_2942 : vec3<f32> = u_xlat30;
        let x_2943 : vec2<f32> = vec2<f32>(x_2942.x, x_2942.y);
        let x_2945 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2943.x, x_2943.y, x_2945);
        let x_2952 : vec3<f32> = txVec53;
        let x_2954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2952.xy, x_2952.z);
        u_xlat49.x = x_2954;
        let x_2957 : f32 = u_xlat20.z;
        let x_2959 : f32 = u_xlat49.x;
        let x_2961 : f32 = u_xlat69;
        u_xlat69 = ((x_2957 * x_2959) + x_2961);
        let x_2964 : vec2<f32> = u_xlat57;
        let x_2966 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2964.x, x_2964.y, x_2966);
        let x_2973 : vec3<f32> = txVec54;
        let x_2975 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2973.xy, x_2973.z);
        u_xlat49.x = x_2975;
        let x_2978 : f32 = u_xlat20.w;
        let x_2980 : f32 = u_xlat49.x;
        let x_2982 : f32 = u_xlat69;
        u_xlat69 = ((x_2978 * x_2980) + x_2982);
        let x_2985 : vec4<f32> = u_xlat12;
        let x_2986 : vec2<f32> = vec2<f32>(x_2985.x, x_2985.y);
        let x_2988 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2986.x, x_2986.y, x_2988);
        let x_2995 : vec3<f32> = txVec55;
        let x_2997 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2995.xy, x_2995.z);
        u_xlat49.x = x_2997;
        let x_3000 : f32 = u_xlat8.x;
        let x_3002 : f32 = u_xlat49.x;
        let x_3004 : f32 = u_xlat69;
        u_xlat69 = ((x_3000 * x_3002) + x_3004);
        let x_3007 : vec4<f32> = u_xlat12;
        let x_3008 : vec2<f32> = vec2<f32>(x_3007.z, x_3007.w);
        let x_3010 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3008.x, x_3008.y, x_3010);
        let x_3017 : vec3<f32> = txVec56;
        let x_3019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3017.xy, x_3017.z);
        u_xlat49.x = x_3019;
        let x_3022 : f32 = u_xlat8.y;
        let x_3024 : f32 = u_xlat49.x;
        let x_3026 : f32 = u_xlat69;
        u_xlat69 = ((x_3022 * x_3024) + x_3026);
        let x_3029 : vec2<f32> = u_xlat52;
        let x_3031 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3029.x, x_3029.y, x_3031);
        let x_3038 : vec3<f32> = txVec57;
        let x_3040 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3038.xy, x_3038.z);
        u_xlat49.x = x_3040;
        let x_3043 : f32 = u_xlat8.z;
        let x_3045 : f32 = u_xlat49.x;
        let x_3047 : f32 = u_xlat69;
        u_xlat69 = ((x_3043 * x_3045) + x_3047);
        let x_3050 : vec4<f32> = u_xlat7;
        let x_3051 : vec2<f32> = vec2<f32>(x_3050.x, x_3050.y);
        let x_3053 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3051.x, x_3051.y, x_3053);
        let x_3060 : vec3<f32> = txVec58;
        let x_3062 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3060.xy, x_3060.z);
        u_xlat7.x = x_3062;
        let x_3065 : f32 = u_xlat8.w;
        let x_3067 : f32 = u_xlat7.x;
        let x_3069 : f32 = u_xlat69;
        u_xlat63 = ((x_3065 * x_3067) + x_3069);
      }
    }
  } else {
    let x_3073 : vec4<f32> = vs_INTERP9;
    let x_3074 : vec2<f32> = vec2<f32>(x_3073.x, x_3073.y);
    let x_3076 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3074.x, x_3074.y, x_3076);
    let x_3083 : vec3<f32> = txVec59;
    let x_3085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3083.xy, x_3083.z);
    u_xlat63 = x_3085;
  }
  let x_3086 : f32 = u_xlat63;
  let x_3088 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3091 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3086 * x_3088) + x_3091);
  let x_3095 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3095);
  let x_3098 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3098 >= 1.0f);
  let x_3100 : bool = u_xlatb4;
  let x_3101 : bool = u_xlatb69;
  u_xlatb4 = (x_3100 | x_3101);
  let x_3103 : bool = u_xlatb4;
  let x_3104 : f32 = u_xlat63;
  u_xlat63 = select(x_3104, 1.0f, x_3103);
  let x_3106 : vec3<f32> = vs_INTERP0;
  let x_3108 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3110 : vec3<f32> = (x_3106 + -(x_3108));
  let x_3111 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3110.x, x_3110.y, x_3110.z, x_3111.w);
  let x_3113 : vec4<f32> = u_xlat7;
  let x_3115 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3113.x, x_3113.y, x_3113.z), vec3<f32>(x_3115.x, x_3115.y, x_3115.z));
  let x_3120 : f32 = u_xlat4.x;
  let x_3122 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3125 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3120 * x_3122) + x_3125);
  let x_3129 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3129, 0.0f, 1.0f);
  let x_3132 : f32 = u_xlat63;
  u_xlat69 = (-(x_3132) + 1.0f);
  let x_3136 : f32 = u_xlat4.x;
  let x_3137 : f32 = u_xlat69;
  let x_3139 : f32 = u_xlat63;
  u_xlat63 = ((x_3136 * x_3137) + x_3139);
  let x_3141 : f32 = u_xlat48;
  let x_3144 : vec4<f32> = x_66.x_MainLightColor;
  let x_3146 : vec3<f32> = (vec3<f32>(x_3141, x_3141, x_3141) * vec3<f32>(x_3144.x, x_3144.y, x_3144.z));
  let x_3147 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3146.x, x_3146.y, x_3146.z, x_3147.w);
  let x_3149 : vec3<f32> = u_xlat25;
  let x_3151 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(x_3149), x_3151);
  let x_3155 : f32 = u_xlat4.x;
  let x_3157 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3155 + x_3157);
  let x_3160 : vec3<f32> = u_xlat24;
  let x_3161 : vec4<f32> = u_xlat4;
  let x_3165 : vec3<f32> = u_xlat25;
  let x_3167 : vec3<f32> = ((x_3160 * -(vec3<f32>(x_3161.x, x_3161.x, x_3161.x))) + -(x_3165));
  let x_3168 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3167.x, x_3167.y, x_3167.z, x_3168.w);
  let x_3170 : vec3<f32> = u_xlat24;
  let x_3171 : vec3<f32> = u_xlat25;
  u_xlat4.x = dot(x_3170, x_3171);
  let x_3175 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3175, 0.0f, 1.0f);
  let x_3179 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3179) + 1.0f);
  let x_3184 : f32 = u_xlat4.x;
  let x_3186 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3184 * x_3186);
  let x_3190 : f32 = u_xlat4.x;
  let x_3192 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3190 * x_3192);
  let x_3195 : f32 = u_xlat64;
  u_xlat69 = ((-(x_3195) * 0.699999988f) + 1.700000048f);
  let x_3201 : f32 = u_xlat64;
  let x_3202 : f32 = u_xlat69;
  u_xlat64 = (x_3201 * x_3202);
  let x_3204 : f32 = u_xlat64;
  u_xlat64 = (x_3204 * 6.0f);
  let x_3215 : vec4<f32> = u_xlat8;
  let x_3217 : f32 = u_xlat64;
  let x_3218 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3215.x, x_3215.y, x_3215.z), x_3217);
  u_xlat8 = x_3218;
  let x_3220 : f32 = u_xlat8.w;
  u_xlat64 = (x_3220 + -1.0f);
  let x_3223 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3224 : f32 = u_xlat64;
  u_xlat64 = ((x_3223 * x_3224) + 1.0f);
  let x_3227 : f32 = u_xlat64;
  u_xlat64 = max(x_3227, 0.0f);
  let x_3229 : f32 = u_xlat64;
  u_xlat64 = log2(x_3229);
  let x_3231 : f32 = u_xlat64;
  let x_3233 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat64 = (x_3231 * x_3233);
  let x_3235 : f32 = u_xlat64;
  u_xlat64 = exp2(x_3235);
  let x_3237 : f32 = u_xlat64;
  let x_3239 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat64 = (x_3237 * x_3239);
  let x_3241 : vec4<f32> = u_xlat8;
  let x_3243 : f32 = u_xlat64;
  let x_3245 : vec3<f32> = (vec3<f32>(x_3241.x, x_3241.y, x_3241.z) * vec3<f32>(x_3243, x_3243, x_3243));
  let x_3246 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3245.x, x_3245.y, x_3245.z, x_3246.w);
  let x_3248 : f32 = u_xlat65;
  let x_3250 : f32 = u_xlat65;
  let x_3254 : vec2<f32> = ((vec2<f32>(x_3248, x_3248) * vec2<f32>(x_3250, x_3250)) + vec2<f32>(-1.0f, 1.0f));
  let x_3255 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3254.x, x_3254.y, x_3255.z, x_3255.w);
  let x_3258 : f32 = u_xlat9.y;
  u_xlat64 = (1.0f / x_3258);
  let x_3261 : f32 = u_xlat3.x;
  u_xlat65 = (x_3261 + -0.039999999f);
  let x_3265 : f32 = u_xlat4.x;
  let x_3266 : f32 = u_xlat65;
  u_xlat65 = ((x_3265 * x_3266) + 0.039999999f);
  let x_3270 : f32 = u_xlat64;
  let x_3271 : f32 = u_xlat65;
  u_xlat64 = (x_3270 * x_3271);
  let x_3273 : f32 = u_xlat64;
  let x_3275 : vec4<f32> = u_xlat8;
  let x_3277 : vec3<f32> = (vec3<f32>(x_3273, x_3273, x_3273) * vec3<f32>(x_3275.x, x_3275.y, x_3275.z));
  let x_3278 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3277.x, x_3277.y, x_3277.z, x_3278.w);
  let x_3280 : vec4<f32> = u_xlat5;
  let x_3282 : vec3<f32> = u_xlat2;
  let x_3284 : vec4<f32> = u_xlat8;
  let x_3286 : vec3<f32> = ((vec3<f32>(x_3280.x, x_3280.y, x_3280.z) * x_3282) + vec3<f32>(x_3284.x, x_3284.y, x_3284.z));
  let x_3287 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3286.x, x_3286.y, x_3286.z, x_3287.w);
  let x_3289 : f32 = u_xlat63;
  let x_3291 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3289 * x_3291);
  let x_3293 : vec3<f32> = u_xlat24;
  let x_3295 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3293, vec3<f32>(x_3295.x, x_3295.y, x_3295.z));
  let x_3298 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3298, 0.0f, 1.0f);
  let x_3300 : f32 = u_xlat63;
  let x_3301 : f32 = u_xlat64;
  u_xlat63 = (x_3300 * x_3301);
  let x_3303 : f32 = u_xlat63;
  let x_3305 : vec4<f32> = u_xlat7;
  let x_3307 : vec3<f32> = (vec3<f32>(x_3303, x_3303, x_3303) * vec3<f32>(x_3305.x, x_3305.y, x_3305.z));
  let x_3308 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3307.x, x_3307.y, x_3307.z, x_3308.w);
  let x_3310 : vec3<f32> = u_xlat25;
  let x_3312 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3314 : vec3<f32> = (x_3310 + vec3<f32>(x_3312.x, x_3312.y, x_3312.z));
  let x_3315 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3314.x, x_3314.y, x_3314.z, x_3315.w);
  let x_3317 : vec4<f32> = u_xlat8;
  let x_3319 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3317.x, x_3317.y, x_3317.z), vec3<f32>(x_3319.x, x_3319.y, x_3319.z));
  let x_3322 : f32 = u_xlat63;
  u_xlat63 = max(x_3322, 1.17549435e-37f);
  let x_3325 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3325);
  let x_3327 : f32 = u_xlat63;
  let x_3329 : vec4<f32> = u_xlat8;
  let x_3331 : vec3<f32> = (vec3<f32>(x_3327, x_3327, x_3327) * vec3<f32>(x_3329.x, x_3329.y, x_3329.z));
  let x_3332 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3331.x, x_3331.y, x_3331.z, x_3332.w);
  let x_3334 : vec3<f32> = u_xlat24;
  let x_3335 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3334, vec3<f32>(x_3335.x, x_3335.y, x_3335.z));
  let x_3338 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3338, 0.0f, 1.0f);
  let x_3341 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3343 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3341.x, x_3341.y, x_3341.z), vec3<f32>(x_3343.x, x_3343.y, x_3343.z));
  let x_3346 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3346, 0.0f, 1.0f);
  let x_3348 : f32 = u_xlat63;
  let x_3349 : f32 = u_xlat63;
  u_xlat63 = (x_3348 * x_3349);
  let x_3351 : f32 = u_xlat63;
  let x_3353 : f32 = u_xlat9.x;
  u_xlat63 = ((x_3351 * x_3353) + 1.000010014f);
  let x_3357 : f32 = u_xlat64;
  let x_3358 : f32 = u_xlat64;
  u_xlat64 = (x_3357 * x_3358);
  let x_3360 : f32 = u_xlat63;
  let x_3361 : f32 = u_xlat63;
  u_xlat63 = (x_3360 * x_3361);
  let x_3363 : f32 = u_xlat64;
  u_xlat64 = max(x_3363, 0.100000001f);
  let x_3366 : f32 = u_xlat63;
  let x_3367 : f32 = u_xlat64;
  u_xlat63 = (x_3366 * x_3367);
  let x_3370 : f32 = u_xlat27.x;
  let x_3371 : f32 = u_xlat63;
  u_xlat63 = (x_3370 * x_3371);
  let x_3373 : f32 = u_xlat68;
  let x_3374 : f32 = u_xlat63;
  u_xlat63 = (x_3373 / x_3374);
  let x_3376 : f32 = u_xlat63;
  let x_3380 : vec3<f32> = u_xlat2;
  let x_3381 : vec3<f32> = ((vec3<f32>(x_3376, x_3376, x_3376) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3380);
  let x_3382 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3381.x, x_3381.y, x_3381.z, x_3382.w);
  let x_3384 : vec4<f32> = u_xlat7;
  let x_3386 : vec4<f32> = u_xlat8;
  let x_3388 : vec3<f32> = (vec3<f32>(x_3384.x, x_3384.y, x_3384.z) * vec3<f32>(x_3386.x, x_3386.y, x_3386.z));
  let x_3389 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3388.x, x_3388.y, x_3388.z, x_3389.w);
  let x_3392 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3394 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3392, x_3394);
  let x_3398 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3398));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3410 : u32 = u_xlatu_loop_1;
    let x_3411 : u32 = u_xlatu63;
    if ((x_3410 < x_3411)) {
    } else {
      break;
    }
    let x_3414 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3414 >> 2u);
    let x_3418 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3418 & 3u));
    let x_3421 : u32 = u_xlatu65;
    let x_3424 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3421)];
    let x_3434 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3439 : vec4<u32> = indexable[x_3434];
    u_xlat65 = dot(x_3424, bitcast<vec4<f32>>(x_3439));
    let x_3443 : f32 = u_xlat65;
    u_xlati65 = i32(x_3443);
    let x_3445 : vec3<f32> = vs_INTERP0;
    let x_3457 : i32 = u_xlati65;
    let x_3459 : vec4<f32> = x_3456.x_AdditionalLightsPosition[x_3457];
    let x_3462 : i32 = u_xlati65;
    let x_3464 : vec4<f32> = x_3456.x_AdditionalLightsPosition[x_3462];
    u_xlat30 = ((-(x_3445) * vec3<f32>(x_3459.w, x_3459.w, x_3459.w)) + vec3<f32>(x_3464.x, x_3464.y, x_3464.z));
    let x_3467 : vec3<f32> = u_xlat30;
    let x_3468 : vec3<f32> = u_xlat30;
    u_xlat3.x = dot(x_3467, x_3468);
    let x_3472 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3472, 6.10351562e-05f);
    let x_3477 : f32 = u_xlat3.x;
    u_xlat4.x = inverseSqrt(x_3477);
    let x_3480 : vec4<f32> = u_xlat4;
    let x_3482 : vec3<f32> = u_xlat30;
    let x_3483 : vec3<f32> = (vec3<f32>(x_3480.x, x_3480.x, x_3480.x) * x_3482);
    let x_3484 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3483.x, x_3483.y, x_3483.z, x_3484.w);
    let x_3487 : f32 = u_xlat3.x;
    u_xlat69 = (1.0f / x_3487);
    let x_3490 : f32 = u_xlat3.x;
    let x_3491 : i32 = u_xlati65;
    let x_3493 : f32 = x_3456.x_AdditionalLightsAttenuation[x_3491].x;
    u_xlat3.x = (x_3490 * x_3493);
    let x_3497 : f32 = u_xlat3.x;
    let x_3500 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3497) * x_3500) + 1.0f);
    let x_3505 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3505, 0.0f);
    let x_3509 : f32 = u_xlat3.x;
    let x_3511 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3509 * x_3511);
    let x_3515 : f32 = u_xlat3.x;
    let x_3516 : f32 = u_xlat69;
    u_xlat3.x = (x_3515 * x_3516);
    let x_3519 : i32 = u_xlati65;
    let x_3521 : vec4<f32> = x_3456.x_AdditionalLightsSpotDir[x_3519];
    let x_3523 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3521.x, x_3521.y, x_3521.z), vec3<f32>(x_3523.x, x_3523.y, x_3523.z));
    let x_3526 : f32 = u_xlat69;
    let x_3527 : i32 = u_xlati65;
    let x_3529 : f32 = x_3456.x_AdditionalLightsAttenuation[x_3527].z;
    let x_3531 : i32 = u_xlati65;
    let x_3533 : f32 = x_3456.x_AdditionalLightsAttenuation[x_3531].w;
    u_xlat69 = ((x_3526 * x_3529) + x_3533);
    let x_3535 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3535, 0.0f, 1.0f);
    let x_3537 : f32 = u_xlat69;
    let x_3538 : f32 = u_xlat69;
    u_xlat69 = (x_3537 * x_3538);
    let x_3541 : f32 = u_xlat3.x;
    let x_3542 : f32 = u_xlat69;
    u_xlat3.x = (x_3541 * x_3542);
    let x_3545 : f32 = u_xlat48;
    let x_3547 : i32 = u_xlati65;
    let x_3549 : vec4<f32> = x_3456.x_AdditionalLightsColor[x_3547];
    let x_3551 : vec3<f32> = (vec3<f32>(x_3545, x_3545, x_3545) * vec3<f32>(x_3549.x, x_3549.y, x_3549.z));
    let x_3552 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3551.x, x_3551.y, x_3551.z, x_3552.w);
    let x_3554 : vec3<f32> = u_xlat24;
    let x_3555 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(x_3554, vec3<f32>(x_3555.x, x_3555.y, x_3555.z));
    let x_3558 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3558, 0.0f, 1.0f);
    let x_3560 : f32 = u_xlat65;
    let x_3562 : f32 = u_xlat3.x;
    u_xlat65 = (x_3560 * x_3562);
    let x_3564 : f32 = u_xlat65;
    let x_3566 : vec4<f32> = u_xlat11;
    let x_3568 : vec3<f32> = (vec3<f32>(x_3564, x_3564, x_3564) * vec3<f32>(x_3566.x, x_3566.y, x_3566.z));
    let x_3569 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3568.x, x_3568.y, x_3568.z, x_3569.w);
    let x_3571 : vec3<f32> = u_xlat30;
    let x_3572 : vec4<f32> = u_xlat4;
    let x_3575 : vec3<f32> = u_xlat25;
    u_xlat30 = ((x_3571 * vec3<f32>(x_3572.x, x_3572.x, x_3572.x)) + x_3575);
    let x_3577 : vec3<f32> = u_xlat30;
    let x_3578 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(x_3577, x_3578);
    let x_3580 : f32 = u_xlat65;
    u_xlat65 = max(x_3580, 1.17549435e-37f);
    let x_3582 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3582);
    let x_3584 : f32 = u_xlat65;
    let x_3586 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_3584, x_3584, x_3584) * x_3586);
    let x_3588 : vec3<f32> = u_xlat24;
    let x_3589 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(x_3588, x_3589);
    let x_3591 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3591, 0.0f, 1.0f);
    let x_3593 : vec4<f32> = u_xlat10;
    let x_3595 : vec3<f32> = u_xlat30;
    u_xlat3.x = dot(vec3<f32>(x_3593.x, x_3593.y, x_3593.z), x_3595);
    let x_3599 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3599, 0.0f, 1.0f);
    let x_3602 : f32 = u_xlat65;
    let x_3603 : f32 = u_xlat65;
    u_xlat65 = (x_3602 * x_3603);
    let x_3605 : f32 = u_xlat65;
    let x_3607 : f32 = u_xlat9.x;
    u_xlat65 = ((x_3605 * x_3607) + 1.000010014f);
    let x_3611 : f32 = u_xlat3.x;
    let x_3613 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3611 * x_3613);
    let x_3616 : f32 = u_xlat65;
    let x_3617 : f32 = u_xlat65;
    u_xlat65 = (x_3616 * x_3617);
    let x_3620 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3620, 0.100000001f);
    let x_3623 : f32 = u_xlat65;
    let x_3625 : f32 = u_xlat3.x;
    u_xlat65 = (x_3623 * x_3625);
    let x_3628 : f32 = u_xlat27.x;
    let x_3629 : f32 = u_xlat65;
    u_xlat65 = (x_3628 * x_3629);
    let x_3631 : f32 = u_xlat68;
    let x_3632 : f32 = u_xlat65;
    u_xlat65 = (x_3631 / x_3632);
    let x_3634 : f32 = u_xlat65;
    let x_3637 : vec3<f32> = u_xlat2;
    u_xlat30 = ((vec3<f32>(x_3634, x_3634, x_3634) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3637);
    let x_3639 : vec3<f32> = u_xlat30;
    let x_3640 : vec4<f32> = u_xlat11;
    let x_3643 : vec4<f32> = u_xlat8;
    let x_3645 : vec3<f32> = ((x_3639 * vec3<f32>(x_3640.x, x_3640.y, x_3640.z)) + vec3<f32>(x_3643.x, x_3643.y, x_3643.z));
    let x_3646 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3645.x, x_3645.y, x_3645.z, x_3646.w);

    continuing {
      let x_3648 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3648 + bitcast<u32>(1i));
    }
  }
  let x_3650 : vec4<f32> = u_xlat5;
  let x_3652 : vec4<f32> = u_xlat6;
  let x_3655 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_3650.x, x_3650.y, x_3650.z) * vec3<f32>(x_3652.x, x_3652.x, x_3652.x)) + vec3<f32>(x_3655.x, x_3655.y, x_3655.z));
  let x_3658 : vec4<f32> = u_xlat8;
  let x_3660 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3658.x, x_3658.y, x_3658.z) + x_3660);
  let x_3662 : vec4<f32> = vs_INTERP4;
  let x_3664 : vec3<f32> = u_xlat0;
  let x_3666 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3662.w, x_3662.w, x_3662.w) * x_3664) + x_3666);
  let x_3669 : f32 = u_xlat22.x;
  let x_3671 : f32 = u_xlat22.x;
  u_xlat63 = (x_3669 * -(x_3671));
  let x_3674 : f32 = u_xlat63;
  u_xlat63 = exp2(x_3674);
  let x_3676 : vec3<f32> = u_xlat0;
  let x_3679 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_3676 + -(vec3<f32>(x_3679.x, x_3679.y, x_3679.z)));
  let x_3685 : f32 = u_xlat63;
  let x_3687 : vec3<f32> = u_xlat0;
  let x_3690 : vec4<f32> = x_66.unity_FogColor;
  let x_3692 : vec3<f32> = ((vec3<f32>(x_3685, x_3685, x_3685) * x_3687) + vec3<f32>(x_3690.x, x_3690.y, x_3690.z));
  let x_3693 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3692.x, x_3692.y, x_3692.z, x_3693.w);
  let x_3695 : bool = u_xlatb43;
  if (x_3695) {
    let x_3700 : f32 = u_xlat1.x;
    x_3696 = x_3700;
  } else {
    x_3696 = 1.0f;
  }
  let x_3702 : f32 = x_3696;
  SV_Target0.w = x_3702;
  let x_3708 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_3710 : f32 = x_1592.unity_RenderingLayer.x;
  u_xlatu0 = (x_3708 & bitcast<u32>(x_3710));
  let x_3713 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3713);
  let x_3718 : f32 = u_xlat0.x;
  let x_3720 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3718 * x_3720);
  let x_3724 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3724, 0.0f, 1.0f);
  let x_3728 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3728.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

