struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_NightFade : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(5) var Texture2D_52571568 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_52571568 : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_45 : PGlobals;

@group(0) @binding(7) var Texture2D_8BA53EED : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_8BA53EED : sampler;

@group(0) @binding(8) var Texture2D_AB84E4D0 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_AB84E4D0 : sampler;

@group(1) @binding(2) var<uniform> x_120 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_F0A81025 : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_F0A81025 : sampler;

var<private> vs_INTERP2 : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_283 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2325 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat45 : f32;
  var u_xlatb45 : bool;
  var u_xlat3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat68 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat5 : vec4<f32>;
  var x_270 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlatb5 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlat69 : f32;
  var u_xlat25 : f32;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlat72 : f32;
  var u_xlat47 : f32;
  var u_xlatb71 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb7 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat29 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat74 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb27 : bool;
  var u_xlatb49 : bool;
  var x_1959 : f32;
  var u_xlat27 : vec3<f32>;
  var u_xlat49 : f32;
  var u_xlatu68 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati71 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati69 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_40 : vec4<f32> = vs_INTERP3;
  let x_51 : f32 = x_45.x_GlobalMipBias.x;
  let x_52 : vec4<f32> = textureSampleBias(Texture2D_52571568, samplerTexture2D_52571568, vec2<f32>(x_40.x, x_40.y), x_51);
  u_xlat0 = vec3<f32>(x_52.x, x_52.y, x_52.z);
  let x_60 : vec4<f32> = vs_INTERP3;
  let x_63 : f32 = x_45.x_GlobalMipBias.x;
  let x_64 : vec4<f32> = textureSampleBias(Texture2D_8BA53EED, samplerTexture2D_8BA53EED, vec2<f32>(x_60.x, x_60.y), x_63);
  let x_65 : vec3<f32> = vec3<f32>(x_64.x, x_64.y, x_64.w);
  let x_66 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_65.x, x_65.y, x_65.z, x_66.w);
  let x_70 : f32 = u_xlat1.x;
  let x_73 : f32 = u_xlat1.z;
  u_xlat1.x = (x_70 * x_73);
  let x_76 : vec4<f32> = u_xlat1;
  let x_83 : vec2<f32> = ((vec2<f32>(x_76.x, x_76.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_84 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  let x_87 : vec4<f32> = u_xlat1;
  let x_89 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec2<f32>(x_87.x, x_87.y), vec2<f32>(x_89.x, x_89.y));
  let x_92 : f32 = u_xlat66;
  u_xlat66 = min(x_92, 1.0f);
  let x_94 : f32 = u_xlat66;
  u_xlat66 = (-(x_94) + 1.0f);
  let x_97 : f32 = u_xlat66;
  u_xlat66 = sqrt(x_97);
  let x_99 : f32 = u_xlat66;
  u_xlat66 = max(x_99, 1.00000002e-16f);
  let x_108 : vec4<f32> = vs_INTERP3;
  let x_111 : f32 = x_45.x_GlobalMipBias.x;
  let x_112 : vec4<f32> = textureSampleBias(Texture2D_AB84E4D0, samplerTexture2D_AB84E4D0, vec2<f32>(x_108.x, x_108.y), x_111);
  let x_113 : vec3<f32> = vec3<f32>(x_112.x, x_112.y, x_112.z);
  let x_114 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_125 : vec4<f32> = x_120.unity_ObjectToWorld[3i];
  let x_128 : vec4<f32> = x_120.unity_ObjectToWorld[3i];
  u_xlat45 = dot(vec3<f32>(x_125.x, x_125.y, x_125.z), vec3<f32>(x_128.x, x_128.y, x_128.z));
  let x_131 : f32 = u_xlat45;
  u_xlat45 = sqrt(x_131);
  let x_133 : f32 = u_xlat45;
  u_xlat45 = fract(x_133);
  let x_135 : f32 = u_xlat45;
  let x_138 : f32 = x_45.x_NightFade;
  u_xlat45 = (x_135 + x_138);
  let x_143 : f32 = u_xlat45;
  u_xlatb45 = (x_143 >= 1.0f);
  let x_145 : bool = u_xlatb45;
  u_xlat45 = select(0.0f, 1.0f, x_145);
  let x_154 : vec4<f32> = vs_INTERP3;
  let x_157 : f32 = x_45.x_GlobalMipBias.x;
  let x_158 : vec4<f32> = textureSampleBias(Texture2D_F0A81025, samplerTexture2D_F0A81025, vec2<f32>(x_154.x, x_154.y), x_157);
  u_xlat3 = vec3<f32>(x_158.x, x_158.w, x_158.y);
  let x_163 : f32 = vs_INTERP2.w;
  u_xlatb67 = (0.0f < x_163);
  let x_166 : bool = u_xlatb67;
  u_xlat67 = select(-1.0f, 1.0f, x_166);
  let x_170 : f32 = x_120.unity_WorldTransformParams.w;
  u_xlatb68 = (x_170 >= 0.0f);
  let x_173 : bool = u_xlatb68;
  u_xlat68 = select(-1.0f, 1.0f, x_173);
  let x_175 : f32 = u_xlat67;
  let x_176 : f32 = u_xlat68;
  u_xlat67 = (x_175 * x_176);
  let x_181 : vec3<f32> = vs_INTERP1;
  let x_183 : vec4<f32> = vs_INTERP2;
  u_xlat4 = (vec3<f32>(x_181.z, x_181.x, x_181.y) * vec3<f32>(x_183.y, x_183.z, x_183.x));
  let x_186 : vec3<f32> = vs_INTERP1;
  let x_188 : vec4<f32> = vs_INTERP2;
  let x_191 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_186.y, x_186.z, x_186.x) * vec3<f32>(x_188.z, x_188.x, x_188.y)) + -(x_191));
  let x_194 : f32 = u_xlat67;
  let x_196 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_194, x_194, x_194) * x_196);
  let x_198 : vec4<f32> = u_xlat1;
  let x_200 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_198.y, x_198.y, x_198.y) * x_200);
  let x_202 : vec4<f32> = u_xlat1;
  let x_204 : vec4<f32> = vs_INTERP2;
  let x_207 : vec3<f32> = u_xlat4;
  let x_208 : vec3<f32> = ((vec3<f32>(x_202.x, x_202.x, x_202.x) * vec3<f32>(x_204.x, x_204.y, x_204.z)) + x_207);
  let x_209 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_208.x, x_208.y, x_209.z, x_208.z);
  let x_211 : f32 = u_xlat66;
  let x_213 : vec3<f32> = vs_INTERP1;
  let x_215 : vec4<f32> = u_xlat1;
  let x_217 : vec3<f32> = ((vec3<f32>(x_211, x_211, x_211) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.w));
  let x_218 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_217.x, x_217.y, x_218.z, x_217.z);
  let x_220 : vec4<f32> = u_xlat1;
  let x_222 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec3<f32>(x_220.x, x_220.y, x_220.w), vec3<f32>(x_222.x, x_222.y, x_222.w));
  let x_225 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_225);
  let x_227 : f32 = u_xlat66;
  let x_229 : vec4<f32> = u_xlat1;
  let x_231 : vec3<f32> = (vec3<f32>(x_227, x_227, x_227) * vec3<f32>(x_229.x, x_229.y, x_229.w));
  let x_232 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_231.x, x_231.y, x_232.z, x_231.z);
  let x_237 : f32 = x_45.unity_OrthoParams.w;
  u_xlatb66 = (x_237 == 0.0f);
  let x_240 : vec3<f32> = vs_INTERP0;
  let x_245 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_240) + x_245);
  let x_247 : vec3<f32> = u_xlat4;
  let x_248 : vec3<f32> = u_xlat4;
  u_xlat68 = dot(x_247, x_248);
  let x_250 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_250);
  let x_252 : f32 = u_xlat68;
  let x_254 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_252, x_252, x_252) * x_254);
  let x_259 : f32 = x_45.unity_MatrixV[0i].z;
  u_xlat5.x = x_259;
  let x_262 : f32 = x_45.unity_MatrixV[1i].z;
  u_xlat5.y = x_262;
  let x_267 : f32 = x_45.unity_MatrixV[2i].z;
  u_xlat5.z = x_267;
  let x_269 : bool = u_xlatb66;
  if (x_269) {
    let x_273 : vec3<f32> = u_xlat4;
    x_270 = x_273;
  } else {
    let x_275 : vec4<f32> = u_xlat5;
    x_270 = vec3<f32>(x_275.x, x_275.y, x_275.z);
  }
  let x_277 : vec3<f32> = x_270;
  u_xlat4 = x_277;
  let x_278 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = x_283.x_CascadeShadowSplitSpheres0;
  let x_288 : vec3<f32> = (x_278 + -(vec3<f32>(x_285.x, x_285.y, x_285.z)));
  let x_289 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_288.x, x_288.y, x_288.z, x_289.w);
  let x_292 : vec3<f32> = vs_INTERP0;
  let x_294 : vec4<f32> = x_283.x_CascadeShadowSplitSpheres1;
  let x_297 : vec3<f32> = (x_292 + -(vec3<f32>(x_294.x, x_294.y, x_294.z)));
  let x_298 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_297.x, x_297.y, x_297.z, x_298.w);
  let x_301 : vec3<f32> = vs_INTERP0;
  let x_303 : vec4<f32> = x_283.x_CascadeShadowSplitSpheres2;
  let x_306 : vec3<f32> = (x_301 + -(vec3<f32>(x_303.x, x_303.y, x_303.z)));
  let x_307 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_306.x, x_306.y, x_306.z, x_307.w);
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = x_283.x_CascadeShadowSplitSpheres3;
  u_xlat8 = (x_310 + -(vec3<f32>(x_313.x, x_313.y, x_313.z)));
  let x_317 : vec4<f32> = u_xlat5;
  let x_319 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec3<f32>(x_317.x, x_317.y, x_317.z), vec3<f32>(x_319.x, x_319.y, x_319.z));
  let x_323 : vec4<f32> = u_xlat6;
  let x_325 : vec4<f32> = u_xlat6;
  u_xlat5.y = dot(vec3<f32>(x_323.x, x_323.y, x_323.z), vec3<f32>(x_325.x, x_325.y, x_325.z));
  let x_329 : vec4<f32> = u_xlat7;
  let x_331 : vec4<f32> = u_xlat7;
  u_xlat5.z = dot(vec3<f32>(x_329.x, x_329.y, x_329.z), vec3<f32>(x_331.x, x_331.y, x_331.z));
  let x_335 : vec3<f32> = u_xlat8;
  let x_336 : vec3<f32> = u_xlat8;
  u_xlat5.w = dot(x_335, x_336);
  let x_342 : vec4<f32> = u_xlat5;
  let x_345 : vec4<f32> = x_283.x_CascadeShadowSplitSphereRadii;
  u_xlatb5 = (x_342 < x_345);
  let x_348 : bool = u_xlatb5.x;
  u_xlat6.x = select(0.0f, 1.0f, x_348);
  let x_352 : bool = u_xlatb5.y;
  u_xlat6.y = select(0.0f, 1.0f, x_352);
  let x_356 : bool = u_xlatb5.z;
  u_xlat6.z = select(0.0f, 1.0f, x_356);
  let x_360 : bool = u_xlatb5.w;
  u_xlat6.w = select(0.0f, 1.0f, x_360);
  let x_364 : bool = u_xlatb5.x;
  u_xlat5.x = select(-0.0f, -1.0f, x_364);
  let x_369 : bool = u_xlatb5.y;
  u_xlat5.y = select(-0.0f, -1.0f, x_369);
  let x_373 : bool = u_xlatb5.z;
  u_xlat5.z = select(-0.0f, -1.0f, x_373);
  let x_376 : vec4<f32> = u_xlat5;
  let x_378 : vec4<f32> = u_xlat6;
  let x_380 : vec3<f32> = (vec3<f32>(x_376.x, x_376.y, x_376.z) + vec3<f32>(x_378.y, x_378.z, x_378.w));
  let x_381 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_380.x, x_380.y, x_380.z, x_381.w);
  let x_383 : vec4<f32> = u_xlat5;
  let x_386 : vec3<f32> = max(vec3<f32>(x_383.x, x_383.y, x_383.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_387 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_387.x, x_386.x, x_386.y, x_386.z);
  let x_389 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_389, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_394 : f32 = u_xlat66;
  u_xlat66 = (-(x_394) + 4.0f);
  let x_399 : f32 = u_xlat66;
  u_xlatu66 = u32(x_399);
  let x_403 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_403) << bitcast<u32>(2i));
  let x_406 : vec3<f32> = vs_INTERP0;
  let x_408 : i32 = u_xlati66;
  let x_411 : i32 = u_xlati66;
  let x_415 : vec4<f32> = x_283.x_MainLightWorldToShadow[((x_408 + 1i) / 4i)][((x_411 + 1i) % 4i)];
  let x_417 : vec3<f32> = (vec3<f32>(x_406.y, x_406.y, x_406.y) * vec3<f32>(x_415.x, x_415.y, x_415.z));
  let x_418 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_417.x, x_417.y, x_417.z, x_418.w);
  let x_420 : i32 = u_xlati66;
  let x_422 : i32 = u_xlati66;
  let x_425 : vec4<f32> = x_283.x_MainLightWorldToShadow[(x_420 / 4i)][(x_422 % 4i)];
  let x_427 : vec3<f32> = vs_INTERP0;
  let x_430 : vec4<f32> = u_xlat5;
  let x_432 : vec3<f32> = ((vec3<f32>(x_425.x, x_425.y, x_425.z) * vec3<f32>(x_427.x, x_427.x, x_427.x)) + vec3<f32>(x_430.x, x_430.y, x_430.z));
  let x_433 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : i32 = u_xlati66;
  let x_438 : i32 = u_xlati66;
  let x_442 : vec4<f32> = x_283.x_MainLightWorldToShadow[((x_435 + 2i) / 4i)][((x_438 + 2i) % 4i)];
  let x_444 : vec3<f32> = vs_INTERP0;
  let x_447 : vec4<f32> = u_xlat5;
  let x_449 : vec3<f32> = ((vec3<f32>(x_442.x, x_442.y, x_442.z) * vec3<f32>(x_444.z, x_444.z, x_444.z)) + vec3<f32>(x_447.x, x_447.y, x_447.z));
  let x_450 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_449.x, x_449.y, x_449.z, x_450.w);
  let x_452 : vec4<f32> = u_xlat5;
  let x_454 : i32 = u_xlati66;
  let x_457 : i32 = u_xlati66;
  let x_461 : vec4<f32> = x_283.x_MainLightWorldToShadow[((x_454 + 3i) / 4i)][((x_457 + 3i) % 4i)];
  let x_463 : vec3<f32> = (vec3<f32>(x_452.x, x_452.y, x_452.z) + vec3<f32>(x_461.x, x_461.y, x_461.z));
  let x_464 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
  let x_467 : f32 = vs_INTERP0.y;
  let x_469 : f32 = x_45.unity_MatrixV[1i].z;
  u_xlat66 = (x_467 * x_469);
  let x_472 : f32 = x_45.unity_MatrixV[0i].z;
  let x_474 : f32 = vs_INTERP0.x;
  let x_476 : f32 = u_xlat66;
  u_xlat66 = ((x_472 * x_474) + x_476);
  let x_479 : f32 = x_45.unity_MatrixV[2i].z;
  let x_481 : f32 = vs_INTERP0.z;
  let x_483 : f32 = u_xlat66;
  u_xlat66 = ((x_479 * x_481) + x_483);
  let x_485 : f32 = u_xlat66;
  let x_487 : f32 = x_45.unity_MatrixV[3i].z;
  u_xlat66 = (x_485 + x_487);
  let x_489 : f32 = u_xlat66;
  let x_493 : f32 = x_45.x_ProjectionParams.y;
  u_xlat66 = (-(x_489) + -(x_493));
  let x_496 : f32 = u_xlat66;
  u_xlat66 = max(x_496, 0.0f);
  let x_498 : f32 = u_xlat66;
  let x_501 : f32 = x_45.unity_FogParams.x;
  u_xlat66 = (x_498 * x_501);
  let x_510 : vec2<f32> = vs_INTERP4;
  let x_512 : f32 = x_45.x_GlobalMipBias.x;
  let x_513 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_510, x_512);
  u_xlat6 = x_513;
  let x_518 : vec2<f32> = vs_INTERP4;
  let x_520 : f32 = x_45.x_GlobalMipBias.x;
  let x_521 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_518, x_520);
  let x_522 : vec3<f32> = vec3<f32>(x_521.x, x_521.y, x_521.z);
  let x_523 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_522.x, x_522.y, x_522.z, x_523.w);
  let x_525 : vec4<f32> = u_xlat6;
  let x_529 : vec3<f32> = (vec3<f32>(x_525.x, x_525.y, x_525.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_530 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_529.x, x_529.y, x_529.z, x_530.w);
  let x_532 : vec4<f32> = u_xlat1;
  let x_534 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_532.x, x_532.y, x_532.w), vec3<f32>(x_534.x, x_534.y, x_534.z));
  let x_537 : f32 = u_xlat68;
  u_xlat68 = (x_537 + 0.5f);
  let x_540 : f32 = u_xlat68;
  let x_542 : vec4<f32> = u_xlat7;
  let x_544 : vec3<f32> = (vec3<f32>(x_540, x_540, x_540) * vec3<f32>(x_542.x, x_542.y, x_542.z));
  let x_545 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_544.x, x_544.y, x_544.z, x_545.w);
  let x_548 : f32 = u_xlat6.w;
  u_xlat68 = max(x_548, 0.0001f);
  let x_551 : vec4<f32> = u_xlat6;
  let x_553 : f32 = u_xlat68;
  let x_555 : vec3<f32> = (vec3<f32>(x_551.x, x_551.y, x_551.z) / vec3<f32>(x_553, x_553, x_553));
  let x_556 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_555.x, x_555.y, x_555.z, x_556.w);
  let x_560 : vec4<f32> = x_45.x_ScaledScreenParams;
  let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
  let x_565 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_561.x, x_561.y));
  let x_566 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_565.x, x_565.y, x_566.z, x_566.w);
  let x_568 : vec4<f32> = u_xlat7;
  let x_570 : vec4<f32> = hlslcc_FragCoord;
  let x_572 : vec2<f32> = (vec2<f32>(x_568.x, x_568.y) * vec2<f32>(x_570.x, x_570.y));
  let x_573 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_572.x, x_572.y, x_573.z, x_573.w);
  let x_576 : f32 = u_xlat7.y;
  let x_579 : f32 = x_45.x_ScaleBiasRt.x;
  let x_582 : f32 = x_45.x_ScaleBiasRt.y;
  u_xlat68 = ((x_576 * x_579) + x_582);
  let x_584 : f32 = u_xlat68;
  u_xlat7.z = (-(x_584) + 1.0f);
  let x_588 : vec3<f32> = u_xlat3;
  let x_589 : vec2<f32> = vec2<f32>(x_588.x, x_588.y);
  let x_590 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_589.x, x_589.y, x_590.z);
  let x_592 : vec3<f32> = u_xlat3;
  let x_596 : vec2<f32> = clamp(vec2<f32>(x_592.x, x_592.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_597 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_596.x, x_596.y, x_597.z);
  let x_600 : f32 = u_xlat3.x;
  u_xlat68 = ((-(x_600) * 0.959999979f) + 0.959999979f);
  let x_606 : f32 = u_xlat68;
  let x_609 : f32 = u_xlat3.y;
  u_xlat69 = (-(x_606) + x_609);
  let x_611 : vec3<f32> = u_xlat0;
  let x_612 : f32 = u_xlat68;
  u_xlat8 = (x_611 * vec3<f32>(x_612, x_612, x_612));
  let x_615 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_615 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_619 : vec3<f32> = u_xlat3;
  let x_621 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_619.x, x_619.x, x_619.x) * x_621) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_627 : f32 = u_xlat3.y;
  u_xlat68 = (-(x_627) + 1.0f);
  let x_630 : f32 = u_xlat68;
  let x_631 : f32 = u_xlat68;
  u_xlat3.x = (x_630 * x_631);
  let x_635 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_635, 0.0078125f);
  let x_641 : f32 = u_xlat3.x;
  let x_643 : f32 = u_xlat3.x;
  u_xlat25 = (x_641 * x_643);
  let x_645 : f32 = u_xlat69;
  u_xlat69 = (x_645 + 1.0f);
  let x_647 : f32 = u_xlat69;
  u_xlat69 = min(x_647, 1.0f);
  let x_651 : f32 = u_xlat3.x;
  u_xlat70 = ((x_651 * 4.0f) + 2.0f);
  let x_660 : vec4<f32> = u_xlat7;
  let x_663 : f32 = x_45.x_GlobalMipBias.x;
  let x_664 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_660.x, x_660.z), x_663);
  u_xlat71 = x_664.x;
  let x_667 : f32 = u_xlat71;
  u_xlat72 = (x_667 + -1.0f);
  let x_670 : f32 = x_45.x_AmbientOcclusionParam.w;
  let x_671 : f32 = u_xlat72;
  u_xlat72 = ((x_670 * x_671) + 1.0f);
  let x_676 : f32 = u_xlat3.z;
  let x_677 : f32 = u_xlat71;
  u_xlat47 = min(x_676, x_677);
  let x_681 : f32 = x_283.x_MainLightShadowParams.y;
  u_xlatb71 = (0.0f < x_681);
  let x_683 : bool = u_xlatb71;
  if (x_683) {
    let x_687 : f32 = x_283.x_MainLightShadowParams.y;
    u_xlatb71 = (x_687 == 1.0f);
    let x_689 : bool = u_xlatb71;
    if (x_689) {
      let x_692 : vec4<f32> = u_xlat5;
      let x_695 : vec4<f32> = x_283.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_692.x, x_692.y, x_692.x, x_692.y) + x_695);
      let x_698 : vec4<f32> = u_xlat7;
      let x_699 : vec2<f32> = vec2<f32>(x_698.x, x_698.y);
      let x_701 : f32 = u_xlat5.z;
      txVec0 = vec3<f32>(x_699.x, x_699.y, x_701);
      let x_714 : vec3<f32> = txVec0;
      let x_716 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_714.xy, x_714.z);
      u_xlat9.x = x_716;
      let x_719 : vec4<f32> = u_xlat7;
      let x_720 : vec2<f32> = vec2<f32>(x_719.z, x_719.w);
      let x_722 : f32 = u_xlat5.z;
      txVec1 = vec3<f32>(x_720.x, x_720.y, x_722);
      let x_729 : vec3<f32> = txVec1;
      let x_731 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_729.xy, x_729.z);
      u_xlat9.y = x_731;
      let x_733 : vec4<f32> = u_xlat5;
      let x_736 : vec4<f32> = x_283.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_733.x, x_733.y, x_733.x, x_733.y) + x_736);
      let x_739 : vec4<f32> = u_xlat7;
      let x_740 : vec2<f32> = vec2<f32>(x_739.x, x_739.y);
      let x_742 : f32 = u_xlat5.z;
      txVec2 = vec3<f32>(x_740.x, x_740.y, x_742);
      let x_749 : vec3<f32> = txVec2;
      let x_751 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_749.xy, x_749.z);
      u_xlat9.z = x_751;
      let x_754 : vec4<f32> = u_xlat7;
      let x_755 : vec2<f32> = vec2<f32>(x_754.z, x_754.w);
      let x_757 : f32 = u_xlat5.z;
      txVec3 = vec3<f32>(x_755.x, x_755.y, x_757);
      let x_764 : vec3<f32> = txVec3;
      let x_766 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_764.xy, x_764.z);
      u_xlat9.w = x_766;
      let x_768 : vec4<f32> = u_xlat9;
      u_xlat71 = dot(x_768, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_775 : f32 = x_283.x_MainLightShadowParams.y;
      u_xlatb7 = (x_775 == 2.0f);
      let x_777 : bool = u_xlatb7;
      if (x_777) {
        let x_780 : vec4<f32> = u_xlat5;
        let x_783 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_787 : vec2<f32> = ((vec2<f32>(x_780.x, x_780.y) * vec2<f32>(x_783.z, x_783.w)) + vec2<f32>(0.5f, 0.5f));
        let x_788 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_787.x, x_787.y, x_788.z, x_788.w);
        let x_790 : vec4<f32> = u_xlat7;
        let x_792 : vec2<f32> = floor(vec2<f32>(x_790.x, x_790.y));
        let x_793 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_792.x, x_792.y, x_793.z, x_793.w);
        let x_797 : vec4<f32> = u_xlat5;
        let x_800 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_797.x, x_797.y) * vec2<f32>(x_800.z, x_800.w)) + -(vec2<f32>(x_803.x, x_803.y)));
        let x_807 : vec2<f32> = u_xlat51;
        u_xlat9 = (vec4<f32>(x_807.x, x_807.x, x_807.y, x_807.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_812 : vec4<f32> = u_xlat9;
        let x_814 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_812.x, x_812.x, x_812.z, x_812.z) * vec4<f32>(x_814.x, x_814.x, x_814.z, x_814.z));
        let x_817 : vec4<f32> = u_xlat10;
        let x_821 : vec2<f32> = (vec2<f32>(x_817.y, x_817.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_822 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_821.x, x_822.y, x_821.y, x_822.w);
        let x_824 : vec4<f32> = u_xlat10;
        let x_827 : vec2<f32> = u_xlat51;
        let x_829 : vec2<f32> = ((vec2<f32>(x_824.x, x_824.z) * vec2<f32>(0.5f, 0.5f)) + -(x_827));
        let x_830 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_829.x, x_829.y, x_830.z, x_830.w);
        let x_833 : vec2<f32> = u_xlat51;
        u_xlat54 = (-(x_833) + vec2<f32>(1.0f, 1.0f));
        let x_837 : vec2<f32> = u_xlat51;
        let x_839 : vec2<f32> = min(x_837, vec2<f32>(0.0f, 0.0f));
        let x_840 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_839.x, x_839.y, x_840.z, x_840.w);
        let x_842 : vec4<f32> = u_xlat11;
        let x_845 : vec4<f32> = u_xlat11;
        let x_848 : vec2<f32> = u_xlat54;
        let x_849 : vec2<f32> = ((-(vec2<f32>(x_842.x, x_842.y)) * vec2<f32>(x_845.x, x_845.y)) + x_848);
        let x_850 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_849.x, x_849.y, x_850.z, x_850.w);
        let x_852 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_852, vec2<f32>(0.0f, 0.0f));
        let x_854 : vec2<f32> = u_xlat51;
        let x_856 : vec2<f32> = u_xlat51;
        let x_858 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_854) * x_856) + vec2<f32>(x_858.y, x_858.w));
        let x_861 : vec4<f32> = u_xlat11;
        let x_863 : vec2<f32> = (vec2<f32>(x_861.x, x_861.y) + vec2<f32>(1.0f, 1.0f));
        let x_864 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_863.x, x_863.y, x_864.z, x_864.w);
        let x_866 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_866 + vec2<f32>(1.0f, 1.0f));
        let x_869 : vec4<f32> = u_xlat10;
        let x_873 : vec2<f32> = (vec2<f32>(x_869.x, x_869.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_874 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_873.x, x_873.y, x_874.z, x_874.w);
        let x_876 : vec2<f32> = u_xlat54;
        let x_877 : vec2<f32> = (x_876 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_878 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_877.x, x_877.y, x_878.z, x_878.w);
        let x_880 : vec4<f32> = u_xlat11;
        let x_882 : vec2<f32> = (vec2<f32>(x_880.x, x_880.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_883 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_882.x, x_882.y, x_883.z, x_883.w);
        let x_886 : vec2<f32> = u_xlat51;
        let x_887 : vec2<f32> = (x_886 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_888 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_887.x, x_887.y, x_888.z, x_888.w);
        let x_890 : vec4<f32> = u_xlat9;
        u_xlat51 = (vec2<f32>(x_890.y, x_890.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_894 : f32 = u_xlat11.x;
        u_xlat12.z = x_894;
        let x_897 : f32 = u_xlat51.x;
        u_xlat12.w = x_897;
        let x_900 : f32 = u_xlat13.x;
        u_xlat10.z = x_900;
        let x_903 : f32 = u_xlat9.x;
        u_xlat10.w = x_903;
        let x_906 : vec4<f32> = u_xlat10;
        let x_908 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_906.z, x_906.w, x_906.x, x_906.z) + vec4<f32>(x_908.z, x_908.w, x_908.x, x_908.z));
        let x_912 : f32 = u_xlat12.y;
        u_xlat11.z = x_912;
        let x_915 : f32 = u_xlat51.y;
        u_xlat11.w = x_915;
        let x_918 : f32 = u_xlat10.y;
        u_xlat13.z = x_918;
        let x_921 : f32 = u_xlat9.z;
        u_xlat13.w = x_921;
        let x_923 : vec4<f32> = u_xlat11;
        let x_925 : vec4<f32> = u_xlat13;
        let x_927 : vec3<f32> = (vec3<f32>(x_923.z, x_923.y, x_923.w) + vec3<f32>(x_925.z, x_925.y, x_925.w));
        let x_928 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_927.x, x_927.y, x_927.z, x_928.w);
        let x_930 : vec4<f32> = u_xlat10;
        let x_932 : vec4<f32> = u_xlat14;
        let x_934 : vec3<f32> = (vec3<f32>(x_930.x, x_930.z, x_930.w) / vec3<f32>(x_932.z, x_932.w, x_932.y));
        let x_935 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_934.x, x_934.y, x_934.z, x_935.w);
        let x_937 : vec4<f32> = u_xlat10;
        let x_942 : vec3<f32> = (vec3<f32>(x_937.x, x_937.y, x_937.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_943 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_942.x, x_942.y, x_942.z, x_943.w);
        let x_945 : vec4<f32> = u_xlat13;
        let x_947 : vec4<f32> = u_xlat9;
        let x_949 : vec3<f32> = (vec3<f32>(x_945.z, x_945.y, x_945.w) / vec3<f32>(x_947.x, x_947.y, x_947.z));
        let x_950 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_949.x, x_949.y, x_949.z, x_950.w);
        let x_952 : vec4<f32> = u_xlat11;
        let x_954 : vec3<f32> = (vec3<f32>(x_952.x, x_952.y, x_952.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_955 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_954.x, x_954.y, x_954.z, x_955.w);
        let x_957 : vec4<f32> = u_xlat10;
        let x_960 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_962 : vec3<f32> = (vec3<f32>(x_957.y, x_957.x, x_957.z) * vec3<f32>(x_960.x, x_960.x, x_960.x));
        let x_963 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_962.x, x_962.y, x_962.z, x_963.w);
        let x_965 : vec4<f32> = u_xlat11;
        let x_968 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_970 : vec3<f32> = (vec3<f32>(x_965.x, x_965.y, x_965.z) * vec3<f32>(x_968.y, x_968.y, x_968.y));
        let x_971 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_970.x, x_970.y, x_970.z, x_971.w);
        let x_974 : f32 = u_xlat11.x;
        u_xlat10.w = x_974;
        let x_976 : vec4<f32> = u_xlat7;
        let x_979 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_982 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_976.x, x_976.y, x_976.x, x_976.y) * vec4<f32>(x_979.x, x_979.y, x_979.x, x_979.y)) + vec4<f32>(x_982.y, x_982.w, x_982.x, x_982.w));
        let x_985 : vec4<f32> = u_xlat7;
        let x_988 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_991 : vec4<f32> = u_xlat10;
        u_xlat51 = ((vec2<f32>(x_985.x, x_985.y) * vec2<f32>(x_988.x, x_988.y)) + vec2<f32>(x_991.z, x_991.w));
        let x_995 : f32 = u_xlat10.y;
        u_xlat11.w = x_995;
        let x_997 : vec4<f32> = u_xlat11;
        let x_998 : vec2<f32> = vec2<f32>(x_997.y, x_997.z);
        let x_999 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_999.x, x_998.x, x_999.z, x_998.y);
        let x_1001 : vec4<f32> = u_xlat7;
        let x_1004 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1007 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_1001.x, x_1001.y, x_1001.x, x_1001.y) * vec4<f32>(x_1004.x, x_1004.y, x_1004.x, x_1004.y)) + vec4<f32>(x_1007.x, x_1007.y, x_1007.z, x_1007.y));
        let x_1010 : vec4<f32> = u_xlat7;
        let x_1013 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1016 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_1010.x, x_1010.y, x_1010.x, x_1010.y) * vec4<f32>(x_1013.x, x_1013.y, x_1013.x, x_1013.y)) + vec4<f32>(x_1016.w, x_1016.y, x_1016.w, x_1016.z));
        let x_1019 : vec4<f32> = u_xlat7;
        let x_1022 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1025 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1019.x, x_1019.y, x_1019.x, x_1019.y) * vec4<f32>(x_1022.x, x_1022.y, x_1022.x, x_1022.y)) + vec4<f32>(x_1025.x, x_1025.w, x_1025.z, x_1025.w));
        let x_1029 : vec4<f32> = u_xlat9;
        let x_1031 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_1029.x, x_1029.x, x_1029.x, x_1029.y) * vec4<f32>(x_1031.z, x_1031.w, x_1031.y, x_1031.z));
        let x_1035 : vec4<f32> = u_xlat9;
        let x_1037 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_1035.y, x_1035.y, x_1035.z, x_1035.z) * x_1037);
        let x_1040 : f32 = u_xlat9.z;
        let x_1042 : f32 = u_xlat14.y;
        u_xlat7.x = (x_1040 * x_1042);
        let x_1046 : vec4<f32> = u_xlat12;
        let x_1047 : vec2<f32> = vec2<f32>(x_1046.x, x_1046.y);
        let x_1049 : f32 = u_xlat5.z;
        txVec4 = vec3<f32>(x_1047.x, x_1047.y, x_1049);
        let x_1057 : vec3<f32> = txVec4;
        let x_1059 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1057.xy, x_1057.z);
        u_xlat29 = x_1059;
        let x_1061 : vec4<f32> = u_xlat12;
        let x_1062 : vec2<f32> = vec2<f32>(x_1061.z, x_1061.w);
        let x_1064 : f32 = u_xlat5.z;
        txVec5 = vec3<f32>(x_1062.x, x_1062.y, x_1064);
        let x_1072 : vec3<f32> = txVec5;
        let x_1074 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1072.xy, x_1072.z);
        u_xlat74 = x_1074;
        let x_1075 : f32 = u_xlat74;
        let x_1077 : f32 = u_xlat15.y;
        u_xlat74 = (x_1075 * x_1077);
        let x_1080 : f32 = u_xlat15.x;
        let x_1081 : f32 = u_xlat29;
        let x_1083 : f32 = u_xlat74;
        u_xlat29 = ((x_1080 * x_1081) + x_1083);
        let x_1086 : vec2<f32> = u_xlat51;
        let x_1088 : f32 = u_xlat5.z;
        txVec6 = vec3<f32>(x_1086.x, x_1086.y, x_1088);
        let x_1095 : vec3<f32> = txVec6;
        let x_1097 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1095.xy, x_1095.z);
        u_xlat51.x = x_1097;
        let x_1100 : f32 = u_xlat15.z;
        let x_1102 : f32 = u_xlat51.x;
        let x_1104 : f32 = u_xlat29;
        u_xlat29 = ((x_1100 * x_1102) + x_1104);
        let x_1107 : vec4<f32> = u_xlat11;
        let x_1108 : vec2<f32> = vec2<f32>(x_1107.x, x_1107.y);
        let x_1110 : f32 = u_xlat5.z;
        txVec7 = vec3<f32>(x_1108.x, x_1108.y, x_1110);
        let x_1117 : vec3<f32> = txVec7;
        let x_1119 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1117.xy, x_1117.z);
        u_xlat51.x = x_1119;
        let x_1122 : f32 = u_xlat15.w;
        let x_1124 : f32 = u_xlat51.x;
        let x_1126 : f32 = u_xlat29;
        u_xlat29 = ((x_1122 * x_1124) + x_1126);
        let x_1129 : vec4<f32> = u_xlat13;
        let x_1130 : vec2<f32> = vec2<f32>(x_1129.x, x_1129.y);
        let x_1132 : f32 = u_xlat5.z;
        txVec8 = vec3<f32>(x_1130.x, x_1130.y, x_1132);
        let x_1139 : vec3<f32> = txVec8;
        let x_1141 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1139.xy, x_1139.z);
        u_xlat51.x = x_1141;
        let x_1144 : f32 = u_xlat16.x;
        let x_1146 : f32 = u_xlat51.x;
        let x_1148 : f32 = u_xlat29;
        u_xlat29 = ((x_1144 * x_1146) + x_1148);
        let x_1151 : vec4<f32> = u_xlat13;
        let x_1152 : vec2<f32> = vec2<f32>(x_1151.z, x_1151.w);
        let x_1154 : f32 = u_xlat5.z;
        txVec9 = vec3<f32>(x_1152.x, x_1152.y, x_1154);
        let x_1161 : vec3<f32> = txVec9;
        let x_1163 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1161.xy, x_1161.z);
        u_xlat51.x = x_1163;
        let x_1166 : f32 = u_xlat16.y;
        let x_1168 : f32 = u_xlat51.x;
        let x_1170 : f32 = u_xlat29;
        u_xlat29 = ((x_1166 * x_1168) + x_1170);
        let x_1173 : vec4<f32> = u_xlat11;
        let x_1174 : vec2<f32> = vec2<f32>(x_1173.z, x_1173.w);
        let x_1176 : f32 = u_xlat5.z;
        txVec10 = vec3<f32>(x_1174.x, x_1174.y, x_1176);
        let x_1183 : vec3<f32> = txVec10;
        let x_1185 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1183.xy, x_1183.z);
        u_xlat51.x = x_1185;
        let x_1188 : f32 = u_xlat16.z;
        let x_1190 : f32 = u_xlat51.x;
        let x_1192 : f32 = u_xlat29;
        u_xlat29 = ((x_1188 * x_1190) + x_1192);
        let x_1195 : vec4<f32> = u_xlat10;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.x, x_1195.y);
        let x_1198 : f32 = u_xlat5.z;
        txVec11 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec11;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat51.x = x_1207;
        let x_1210 : f32 = u_xlat16.w;
        let x_1212 : f32 = u_xlat51.x;
        let x_1214 : f32 = u_xlat29;
        u_xlat29 = ((x_1210 * x_1212) + x_1214);
        let x_1217 : vec4<f32> = u_xlat10;
        let x_1218 : vec2<f32> = vec2<f32>(x_1217.z, x_1217.w);
        let x_1220 : f32 = u_xlat5.z;
        txVec12 = vec3<f32>(x_1218.x, x_1218.y, x_1220);
        let x_1227 : vec3<f32> = txVec12;
        let x_1229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1227.xy, x_1227.z);
        u_xlat51.x = x_1229;
        let x_1232 : f32 = u_xlat7.x;
        let x_1234 : f32 = u_xlat51.x;
        let x_1236 : f32 = u_xlat29;
        u_xlat71 = ((x_1232 * x_1234) + x_1236);
      } else {
        let x_1239 : vec4<f32> = u_xlat5;
        let x_1242 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1245 : vec2<f32> = ((vec2<f32>(x_1239.x, x_1239.y) * vec2<f32>(x_1242.z, x_1242.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1246 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1245.x, x_1245.y, x_1246.z, x_1246.w);
        let x_1248 : vec4<f32> = u_xlat7;
        let x_1250 : vec2<f32> = floor(vec2<f32>(x_1248.x, x_1248.y));
        let x_1251 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1250.x, x_1250.y, x_1251.z, x_1251.w);
        let x_1253 : vec4<f32> = u_xlat5;
        let x_1256 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1259 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1253.x, x_1253.y) * vec2<f32>(x_1256.z, x_1256.w)) + -(vec2<f32>(x_1259.x, x_1259.y)));
        let x_1263 : vec2<f32> = u_xlat51;
        u_xlat9 = (vec4<f32>(x_1263.x, x_1263.x, x_1263.y, x_1263.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1266 : vec4<f32> = u_xlat9;
        let x_1268 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1266.x, x_1266.x, x_1266.z, x_1266.z) * vec4<f32>(x_1268.x, x_1268.x, x_1268.z, x_1268.z));
        let x_1271 : vec4<f32> = u_xlat10;
        let x_1275 : vec2<f32> = (vec2<f32>(x_1271.y, x_1271.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1276 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1276.x, x_1275.x, x_1276.z, x_1275.y);
        let x_1278 : vec4<f32> = u_xlat10;
        let x_1281 : vec2<f32> = u_xlat51;
        let x_1283 : vec2<f32> = ((vec2<f32>(x_1278.x, x_1278.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1281));
        let x_1284 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1283.x, x_1284.y, x_1283.y, x_1284.w);
        let x_1286 : vec2<f32> = u_xlat51;
        let x_1288 : vec2<f32> = (-(x_1286) + vec2<f32>(1.0f, 1.0f));
        let x_1289 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1288.x, x_1288.y, x_1289.z, x_1289.w);
        let x_1291 : vec2<f32> = u_xlat51;
        u_xlat54 = min(x_1291, vec2<f32>(0.0f, 0.0f));
        let x_1293 : vec2<f32> = u_xlat54;
        let x_1295 : vec2<f32> = u_xlat54;
        let x_1297 : vec4<f32> = u_xlat10;
        let x_1299 : vec2<f32> = ((-(x_1293) * x_1295) + vec2<f32>(x_1297.x, x_1297.y));
        let x_1300 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1299.x, x_1299.y, x_1300.z, x_1300.w);
        let x_1302 : vec2<f32> = u_xlat51;
        u_xlat54 = max(x_1302, vec2<f32>(0.0f, 0.0f));
        let x_1305 : vec2<f32> = u_xlat54;
        let x_1307 : vec2<f32> = u_xlat54;
        let x_1309 : vec4<f32> = u_xlat9;
        let x_1311 : vec2<f32> = ((-(x_1305) * x_1307) + vec2<f32>(x_1309.y, x_1309.w));
        let x_1312 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1311.x, x_1312.y, x_1311.y);
        let x_1314 : vec4<f32> = u_xlat10;
        let x_1316 : vec2<f32> = (vec2<f32>(x_1314.x, x_1314.y) + vec2<f32>(2.0f, 2.0f));
        let x_1317 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1316.x, x_1316.y, x_1317.z, x_1317.w);
        let x_1319 : vec3<f32> = u_xlat31;
        let x_1321 : vec2<f32> = (vec2<f32>(x_1319.x, x_1319.z) + vec2<f32>(2.0f, 2.0f));
        let x_1322 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1322.x, x_1321.x, x_1322.z, x_1321.y);
        let x_1325 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1325 * 0.081632003f);
        let x_1329 : vec4<f32> = u_xlat9;
        let x_1332 : vec3<f32> = (vec3<f32>(x_1329.z, x_1329.x, x_1329.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1333 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1332.x, x_1332.y, x_1332.z, x_1333.w);
        let x_1335 : vec4<f32> = u_xlat10;
        let x_1338 : vec2<f32> = (vec2<f32>(x_1335.x, x_1335.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1339 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1338.x, x_1338.y, x_1339.z, x_1339.w);
        let x_1342 : f32 = u_xlat13.y;
        u_xlat12.x = x_1342;
        let x_1344 : vec2<f32> = u_xlat51;
        let x_1351 : vec2<f32> = ((vec2<f32>(x_1344.x, x_1344.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1352 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1352.x, x_1351.x, x_1352.z, x_1351.y);
        let x_1354 : vec2<f32> = u_xlat51;
        let x_1358 : vec2<f32> = ((vec2<f32>(x_1354.x, x_1354.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1359 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1358.x, x_1359.y, x_1358.y, x_1359.w);
        let x_1362 : f32 = u_xlat9.x;
        u_xlat10.y = x_1362;
        let x_1365 : f32 = u_xlat11.y;
        u_xlat10.w = x_1365;
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1367 + x_1368);
        let x_1370 : vec2<f32> = u_xlat51;
        let x_1373 : vec2<f32> = ((vec2<f32>(x_1370.y, x_1370.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1374 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1374.x, x_1373.x, x_1374.z, x_1373.y);
        let x_1376 : vec2<f32> = u_xlat51;
        let x_1379 : vec2<f32> = ((vec2<f32>(x_1376.y, x_1376.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1380 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1379.x, x_1380.y, x_1379.y, x_1380.w);
        let x_1383 : f32 = u_xlat9.y;
        u_xlat11.y = x_1383;
        let x_1385 : vec4<f32> = u_xlat11;
        let x_1386 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1385 + x_1386);
        let x_1388 : vec4<f32> = u_xlat10;
        let x_1389 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1388 / x_1389);
        let x_1391 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1391 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1397 : vec4<f32> = u_xlat11;
        let x_1398 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1397 / x_1398);
        let x_1400 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1400 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1402 : vec4<f32> = u_xlat10;
        let x_1405 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1402.w, x_1402.x, x_1402.y, x_1402.z) * vec4<f32>(x_1405.x, x_1405.x, x_1405.x, x_1405.x));
        let x_1408 : vec4<f32> = u_xlat11;
        let x_1411 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1408.x, x_1408.w, x_1408.y, x_1408.z) * vec4<f32>(x_1411.y, x_1411.y, x_1411.y, x_1411.y));
        let x_1414 : vec4<f32> = u_xlat10;
        let x_1415 : vec3<f32> = vec3<f32>(x_1414.y, x_1414.z, x_1414.w);
        let x_1416 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1415.x, x_1416.y, x_1415.y, x_1415.z);
        let x_1419 : f32 = u_xlat11.x;
        u_xlat13.y = x_1419;
        let x_1421 : vec4<f32> = u_xlat7;
        let x_1424 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1427 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1421.x, x_1421.y, x_1421.x, x_1421.y) * vec4<f32>(x_1424.x, x_1424.y, x_1424.x, x_1424.y)) + vec4<f32>(x_1427.x, x_1427.y, x_1427.z, x_1427.y));
        let x_1430 : vec4<f32> = u_xlat7;
        let x_1433 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1436 : vec4<f32> = u_xlat13;
        u_xlat51 = ((vec2<f32>(x_1430.x, x_1430.y) * vec2<f32>(x_1433.x, x_1433.y)) + vec2<f32>(x_1436.w, x_1436.y));
        let x_1440 : f32 = u_xlat13.y;
        u_xlat10.y = x_1440;
        let x_1443 : f32 = u_xlat11.z;
        u_xlat13.y = x_1443;
        let x_1445 : vec4<f32> = u_xlat7;
        let x_1448 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1451 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1445.x, x_1445.y, x_1445.x, x_1445.y) * vec4<f32>(x_1448.x, x_1448.y, x_1448.x, x_1448.y)) + vec4<f32>(x_1451.x, x_1451.y, x_1451.z, x_1451.y));
        let x_1454 : vec4<f32> = u_xlat7;
        let x_1457 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1460 : vec4<f32> = u_xlat13;
        let x_1462 : vec2<f32> = ((vec2<f32>(x_1454.x, x_1454.y) * vec2<f32>(x_1457.x, x_1457.y)) + vec2<f32>(x_1460.w, x_1460.y));
        let x_1463 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1462.x, x_1462.y, x_1463.z, x_1463.w);
        let x_1466 : f32 = u_xlat13.y;
        u_xlat10.z = x_1466;
        let x_1469 : vec4<f32> = u_xlat7;
        let x_1472 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1475 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1469.x, x_1469.y, x_1469.x, x_1469.y) * vec4<f32>(x_1472.x, x_1472.y, x_1472.x, x_1472.y)) + vec4<f32>(x_1475.x, x_1475.y, x_1475.x, x_1475.z));
        let x_1479 : f32 = u_xlat11.w;
        u_xlat13.y = x_1479;
        let x_1482 : vec4<f32> = u_xlat7;
        let x_1485 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1488 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1482.x, x_1482.y, x_1482.x, x_1482.y) * vec4<f32>(x_1485.x, x_1485.y, x_1485.x, x_1485.y)) + vec4<f32>(x_1488.x, x_1488.y, x_1488.z, x_1488.y));
        let x_1492 : vec4<f32> = u_xlat7;
        let x_1495 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1498 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1492.x, x_1492.y) * vec2<f32>(x_1495.x, x_1495.y)) + vec2<f32>(x_1498.w, x_1498.y));
        let x_1502 : f32 = u_xlat13.y;
        u_xlat10.w = x_1502;
        let x_1505 : vec4<f32> = u_xlat7;
        let x_1508 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1511 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1505.x, x_1505.y) * vec2<f32>(x_1508.x, x_1508.y)) + vec2<f32>(x_1511.x, x_1511.w));
        let x_1514 : vec4<f32> = u_xlat13;
        let x_1515 : vec3<f32> = vec3<f32>(x_1514.x, x_1514.z, x_1514.w);
        let x_1516 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1515.x, x_1516.y, x_1515.y, x_1515.z);
        let x_1518 : vec4<f32> = u_xlat7;
        let x_1521 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1524 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1518.x, x_1518.y, x_1518.x, x_1518.y) * vec4<f32>(x_1521.x, x_1521.y, x_1521.x, x_1521.y)) + vec4<f32>(x_1524.x, x_1524.y, x_1524.z, x_1524.y));
        let x_1528 : vec4<f32> = u_xlat7;
        let x_1531 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1534 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1528.x, x_1528.y) * vec2<f32>(x_1531.x, x_1531.y)) + vec2<f32>(x_1534.w, x_1534.y));
        let x_1538 : f32 = u_xlat10.x;
        u_xlat11.x = x_1538;
        let x_1540 : vec4<f32> = u_xlat7;
        let x_1543 : vec4<f32> = x_283.x_MainLightShadowmapSize;
        let x_1546 : vec4<f32> = u_xlat11;
        let x_1548 : vec2<f32> = ((vec2<f32>(x_1540.x, x_1540.y) * vec2<f32>(x_1543.x, x_1543.y)) + vec2<f32>(x_1546.x, x_1546.y));
        let x_1549 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1548.x, x_1548.y, x_1549.z, x_1549.w);
        let x_1552 : vec4<f32> = u_xlat9;
        let x_1554 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1552.x, x_1552.x, x_1552.x, x_1552.x) * x_1554);
        let x_1557 : vec4<f32> = u_xlat9;
        let x_1559 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1557.y, x_1557.y, x_1557.y, x_1557.y) * x_1559);
        let x_1562 : vec4<f32> = u_xlat9;
        let x_1564 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1562.z, x_1562.z, x_1562.z, x_1562.z) * x_1564);
        let x_1566 : vec4<f32> = u_xlat9;
        let x_1568 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1566.w, x_1566.w, x_1566.w, x_1566.w) * x_1568);
        let x_1571 : vec4<f32> = u_xlat14;
        let x_1572 : vec2<f32> = vec2<f32>(x_1571.x, x_1571.y);
        let x_1574 : f32 = u_xlat5.z;
        txVec13 = vec3<f32>(x_1572.x, x_1572.y, x_1574);
        let x_1581 : vec3<f32> = txVec13;
        let x_1583 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1581.xy, x_1581.z);
        u_xlat74 = x_1583;
        let x_1585 : vec4<f32> = u_xlat14;
        let x_1586 : vec2<f32> = vec2<f32>(x_1585.z, x_1585.w);
        let x_1588 : f32 = u_xlat5.z;
        txVec14 = vec3<f32>(x_1586.x, x_1586.y, x_1588);
        let x_1595 : vec3<f32> = txVec14;
        let x_1597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1595.xy, x_1595.z);
        u_xlat10.x = x_1597;
        let x_1600 : f32 = u_xlat10.x;
        let x_1602 : f32 = u_xlat19.y;
        u_xlat10.x = (x_1600 * x_1602);
        let x_1606 : f32 = u_xlat19.x;
        let x_1607 : f32 = u_xlat74;
        let x_1610 : f32 = u_xlat10.x;
        u_xlat74 = ((x_1606 * x_1607) + x_1610);
        let x_1613 : vec2<f32> = u_xlat51;
        let x_1615 : f32 = u_xlat5.z;
        txVec15 = vec3<f32>(x_1613.x, x_1613.y, x_1615);
        let x_1622 : vec3<f32> = txVec15;
        let x_1624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1622.xy, x_1622.z);
        u_xlat51.x = x_1624;
        let x_1627 : f32 = u_xlat19.z;
        let x_1629 : f32 = u_xlat51.x;
        let x_1631 : f32 = u_xlat74;
        u_xlat51.x = ((x_1627 * x_1629) + x_1631);
        let x_1635 : vec4<f32> = u_xlat17;
        let x_1636 : vec2<f32> = vec2<f32>(x_1635.x, x_1635.y);
        let x_1638 : f32 = u_xlat5.z;
        txVec16 = vec3<f32>(x_1636.x, x_1636.y, x_1638);
        let x_1646 : vec3<f32> = txVec16;
        let x_1648 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1646.xy, x_1646.z);
        u_xlat73 = x_1648;
        let x_1650 : f32 = u_xlat19.w;
        let x_1651 : f32 = u_xlat73;
        let x_1654 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1650 * x_1651) + x_1654);
        let x_1658 : vec4<f32> = u_xlat15;
        let x_1659 : vec2<f32> = vec2<f32>(x_1658.x, x_1658.y);
        let x_1661 : f32 = u_xlat5.z;
        txVec17 = vec3<f32>(x_1659.x, x_1659.y, x_1661);
        let x_1668 : vec3<f32> = txVec17;
        let x_1670 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1668.xy, x_1668.z);
        u_xlat73 = x_1670;
        let x_1672 : f32 = u_xlat20.x;
        let x_1673 : f32 = u_xlat73;
        let x_1676 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1672 * x_1673) + x_1676);
        let x_1680 : vec4<f32> = u_xlat15;
        let x_1681 : vec2<f32> = vec2<f32>(x_1680.z, x_1680.w);
        let x_1683 : f32 = u_xlat5.z;
        txVec18 = vec3<f32>(x_1681.x, x_1681.y, x_1683);
        let x_1690 : vec3<f32> = txVec18;
        let x_1692 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1690.xy, x_1690.z);
        u_xlat73 = x_1692;
        let x_1694 : f32 = u_xlat20.y;
        let x_1695 : f32 = u_xlat73;
        let x_1698 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1694 * x_1695) + x_1698);
        let x_1702 : vec4<f32> = u_xlat16;
        let x_1703 : vec2<f32> = vec2<f32>(x_1702.x, x_1702.y);
        let x_1705 : f32 = u_xlat5.z;
        txVec19 = vec3<f32>(x_1703.x, x_1703.y, x_1705);
        let x_1712 : vec3<f32> = txVec19;
        let x_1714 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1712.xy, x_1712.z);
        u_xlat73 = x_1714;
        let x_1716 : f32 = u_xlat20.z;
        let x_1717 : f32 = u_xlat73;
        let x_1720 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1716 * x_1717) + x_1720);
        let x_1724 : vec4<f32> = u_xlat17;
        let x_1725 : vec2<f32> = vec2<f32>(x_1724.z, x_1724.w);
        let x_1727 : f32 = u_xlat5.z;
        txVec20 = vec3<f32>(x_1725.x, x_1725.y, x_1727);
        let x_1734 : vec3<f32> = txVec20;
        let x_1736 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1734.xy, x_1734.z);
        u_xlat73 = x_1736;
        let x_1738 : f32 = u_xlat20.w;
        let x_1739 : f32 = u_xlat73;
        let x_1742 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1738 * x_1739) + x_1742);
        let x_1746 : vec4<f32> = u_xlat18;
        let x_1747 : vec2<f32> = vec2<f32>(x_1746.x, x_1746.y);
        let x_1749 : f32 = u_xlat5.z;
        txVec21 = vec3<f32>(x_1747.x, x_1747.y, x_1749);
        let x_1756 : vec3<f32> = txVec21;
        let x_1758 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1756.xy, x_1756.z);
        u_xlat73 = x_1758;
        let x_1760 : f32 = u_xlat21.x;
        let x_1761 : f32 = u_xlat73;
        let x_1764 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1760 * x_1761) + x_1764);
        let x_1768 : vec4<f32> = u_xlat18;
        let x_1769 : vec2<f32> = vec2<f32>(x_1768.z, x_1768.w);
        let x_1771 : f32 = u_xlat5.z;
        txVec22 = vec3<f32>(x_1769.x, x_1769.y, x_1771);
        let x_1778 : vec3<f32> = txVec22;
        let x_1780 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1778.xy, x_1778.z);
        u_xlat73 = x_1780;
        let x_1782 : f32 = u_xlat21.y;
        let x_1783 : f32 = u_xlat73;
        let x_1786 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1782 * x_1783) + x_1786);
        let x_1790 : vec2<f32> = u_xlat32;
        let x_1792 : f32 = u_xlat5.z;
        txVec23 = vec3<f32>(x_1790.x, x_1790.y, x_1792);
        let x_1799 : vec3<f32> = txVec23;
        let x_1801 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1799.xy, x_1799.z);
        u_xlat73 = x_1801;
        let x_1803 : f32 = u_xlat21.z;
        let x_1804 : f32 = u_xlat73;
        let x_1807 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1803 * x_1804) + x_1807);
        let x_1811 : vec2<f32> = u_xlat60;
        let x_1813 : f32 = u_xlat5.z;
        txVec24 = vec3<f32>(x_1811.x, x_1811.y, x_1813);
        let x_1820 : vec3<f32> = txVec24;
        let x_1822 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1820.xy, x_1820.z);
        u_xlat73 = x_1822;
        let x_1824 : f32 = u_xlat21.w;
        let x_1825 : f32 = u_xlat73;
        let x_1828 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1824 * x_1825) + x_1828);
        let x_1832 : vec4<f32> = u_xlat13;
        let x_1833 : vec2<f32> = vec2<f32>(x_1832.x, x_1832.y);
        let x_1835 : f32 = u_xlat5.z;
        txVec25 = vec3<f32>(x_1833.x, x_1833.y, x_1835);
        let x_1842 : vec3<f32> = txVec25;
        let x_1844 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1842.xy, x_1842.z);
        u_xlat73 = x_1844;
        let x_1846 : f32 = u_xlat9.x;
        let x_1847 : f32 = u_xlat73;
        let x_1850 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1846 * x_1847) + x_1850);
        let x_1854 : vec4<f32> = u_xlat13;
        let x_1855 : vec2<f32> = vec2<f32>(x_1854.z, x_1854.w);
        let x_1857 : f32 = u_xlat5.z;
        txVec26 = vec3<f32>(x_1855.x, x_1855.y, x_1857);
        let x_1864 : vec3<f32> = txVec26;
        let x_1866 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1864.xy, x_1864.z);
        u_xlat73 = x_1866;
        let x_1868 : f32 = u_xlat9.y;
        let x_1869 : f32 = u_xlat73;
        let x_1872 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1868 * x_1869) + x_1872);
        let x_1876 : vec2<f32> = u_xlat55;
        let x_1878 : f32 = u_xlat5.z;
        txVec27 = vec3<f32>(x_1876.x, x_1876.y, x_1878);
        let x_1885 : vec3<f32> = txVec27;
        let x_1887 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1885.xy, x_1885.z);
        u_xlat73 = x_1887;
        let x_1889 : f32 = u_xlat9.z;
        let x_1890 : f32 = u_xlat73;
        let x_1893 : f32 = u_xlat51.x;
        u_xlat51.x = ((x_1889 * x_1890) + x_1893);
        let x_1897 : vec4<f32> = u_xlat7;
        let x_1898 : vec2<f32> = vec2<f32>(x_1897.x, x_1897.y);
        let x_1900 : f32 = u_xlat5.z;
        txVec28 = vec3<f32>(x_1898.x, x_1898.y, x_1900);
        let x_1907 : vec3<f32> = txVec28;
        let x_1909 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1907.xy, x_1907.z);
        u_xlat7.x = x_1909;
        let x_1912 : f32 = u_xlat9.w;
        let x_1914 : f32 = u_xlat7.x;
        let x_1917 : f32 = u_xlat51.x;
        u_xlat71 = ((x_1912 * x_1914) + x_1917);
      }
    }
  } else {
    let x_1921 : vec4<f32> = u_xlat5;
    let x_1922 : vec2<f32> = vec2<f32>(x_1921.x, x_1921.y);
    let x_1924 : f32 = u_xlat5.z;
    txVec29 = vec3<f32>(x_1922.x, x_1922.y, x_1924);
    let x_1931 : vec3<f32> = txVec29;
    let x_1933 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1931.xy, x_1931.z);
    u_xlat71 = x_1933;
  }
  let x_1935 : f32 = x_283.x_MainLightShadowParams.x;
  u_xlat5.x = (-(x_1935) + 1.0f);
  let x_1939 : f32 = u_xlat71;
  let x_1941 : f32 = x_283.x_MainLightShadowParams.x;
  let x_1944 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_1939 * x_1941) + x_1944);
  let x_1949 : f32 = u_xlat5.z;
  u_xlatb27 = (0.0f >= x_1949);
  let x_1953 : f32 = u_xlat5.z;
  u_xlatb49 = (x_1953 >= 1.0f);
  let x_1955 : bool = u_xlatb49;
  let x_1956 : bool = u_xlatb27;
  u_xlatb27 = (x_1955 | x_1956);
  let x_1958 : bool = u_xlatb27;
  if (x_1958) {
    x_1959 = 1.0f;
  } else {
    let x_1964 : f32 = u_xlat5.x;
    x_1959 = x_1964;
  }
  let x_1965 : f32 = x_1959;
  u_xlat5.x = x_1965;
  let x_1968 : vec3<f32> = vs_INTERP0;
  let x_1970 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat27 = (x_1968 + -(x_1970));
  let x_1973 : vec3<f32> = u_xlat27;
  let x_1974 : vec3<f32> = u_xlat27;
  u_xlat27.x = dot(x_1973, x_1974);
  let x_1978 : f32 = u_xlat27.x;
  let x_1980 : f32 = x_283.x_MainLightShadowParams.z;
  let x_1983 : f32 = x_283.x_MainLightShadowParams.w;
  u_xlat27.x = ((x_1978 * x_1980) + x_1983);
  let x_1987 : f32 = u_xlat27.x;
  u_xlat27.x = clamp(x_1987, 0.0f, 1.0f);
  let x_1992 : f32 = u_xlat5.x;
  u_xlat49 = (-(x_1992) + 1.0f);
  let x_1996 : f32 = u_xlat27.x;
  let x_1997 : f32 = u_xlat49;
  let x_2000 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_1996 * x_1997) + x_2000);
  let x_2003 : f32 = u_xlat72;
  let x_2006 : vec4<f32> = x_45.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_2003, x_2003, x_2003) * vec3<f32>(x_2006.x, x_2006.y, x_2006.z));
  let x_2009 : vec3<f32> = u_xlat4;
  let x_2011 : vec4<f32> = u_xlat1;
  u_xlat7.x = dot(-(x_2009), vec3<f32>(x_2011.x, x_2011.y, x_2011.w));
  let x_2016 : f32 = u_xlat7.x;
  let x_2018 : f32 = u_xlat7.x;
  u_xlat7.x = (x_2016 + x_2018);
  let x_2021 : vec4<f32> = u_xlat1;
  let x_2023 : vec4<f32> = u_xlat7;
  let x_2027 : vec3<f32> = u_xlat4;
  let x_2029 : vec3<f32> = ((vec3<f32>(x_2021.x, x_2021.y, x_2021.w) * -(vec3<f32>(x_2023.x, x_2023.x, x_2023.x))) + -(x_2027));
  let x_2030 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2029.x, x_2029.y, x_2029.z, x_2030.w);
  let x_2032 : vec4<f32> = u_xlat1;
  let x_2034 : vec3<f32> = u_xlat4;
  u_xlat73 = dot(vec3<f32>(x_2032.x, x_2032.y, x_2032.w), x_2034);
  let x_2036 : f32 = u_xlat73;
  u_xlat73 = clamp(x_2036, 0.0f, 1.0f);
  let x_2038 : f32 = u_xlat73;
  u_xlat73 = (-(x_2038) + 1.0f);
  let x_2041 : f32 = u_xlat73;
  let x_2042 : f32 = u_xlat73;
  u_xlat73 = (x_2041 * x_2042);
  let x_2044 : f32 = u_xlat73;
  let x_2045 : f32 = u_xlat73;
  u_xlat73 = (x_2044 * x_2045);
  let x_2047 : f32 = u_xlat68;
  u_xlat74 = ((-(x_2047) * 0.699999988f) + 1.700000048f);
  let x_2053 : f32 = u_xlat68;
  let x_2054 : f32 = u_xlat74;
  u_xlat2.w = (x_2053 * x_2054);
  let x_2057 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_2057 * vec4<f32>(14.0f, 14.0f, 14.0f, 6.0f));
  let x_2070 : vec4<f32> = u_xlat7;
  let x_2073 : f32 = u_xlat2.w;
  let x_2074 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2070.x, x_2070.y, x_2070.z), x_2073);
  u_xlat9 = x_2074;
  let x_2076 : f32 = u_xlat9.w;
  u_xlat68 = (x_2076 + -1.0f);
  let x_2079 : f32 = x_120.unity_SpecCube0_HDR.w;
  let x_2080 : f32 = u_xlat68;
  u_xlat68 = ((x_2079 * x_2080) + 1.0f);
  let x_2083 : f32 = u_xlat68;
  u_xlat68 = max(x_2083, 0.0f);
  let x_2085 : f32 = u_xlat68;
  u_xlat68 = log2(x_2085);
  let x_2087 : f32 = u_xlat68;
  let x_2089 : f32 = x_120.unity_SpecCube0_HDR.y;
  u_xlat68 = (x_2087 * x_2089);
  let x_2091 : f32 = u_xlat68;
  u_xlat68 = exp2(x_2091);
  let x_2093 : f32 = u_xlat68;
  let x_2095 : f32 = x_120.unity_SpecCube0_HDR.x;
  u_xlat68 = (x_2093 * x_2095);
  let x_2097 : vec4<f32> = u_xlat9;
  let x_2099 : f32 = u_xlat68;
  let x_2101 : vec3<f32> = (vec3<f32>(x_2097.x, x_2097.y, x_2097.z) * vec3<f32>(x_2099, x_2099, x_2099));
  let x_2102 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2101.x, x_2101.y, x_2101.z, x_2102.w);
  let x_2104 : vec3<f32> = u_xlat3;
  let x_2106 : vec3<f32> = u_xlat3;
  let x_2110 : vec2<f32> = ((vec2<f32>(x_2104.x, x_2104.x) * vec2<f32>(x_2106.x, x_2106.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2111 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2110.x, x_2110.y, x_2111.z, x_2111.w);
  let x_2114 : f32 = u_xlat9.y;
  u_xlat68 = (1.0f / x_2114);
  let x_2116 : vec3<f32> = u_xlat0;
  let x_2118 : f32 = u_xlat69;
  u_xlat31 = (-(x_2116) + vec3<f32>(x_2118, x_2118, x_2118));
  let x_2121 : f32 = u_xlat73;
  let x_2123 : vec3<f32> = u_xlat31;
  let x_2125 : vec3<f32> = u_xlat0;
  u_xlat31 = ((vec3<f32>(x_2121, x_2121, x_2121) * x_2123) + x_2125);
  let x_2127 : f32 = u_xlat68;
  let x_2129 : vec3<f32> = u_xlat31;
  u_xlat31 = (vec3<f32>(x_2127, x_2127, x_2127) * x_2129);
  let x_2131 : vec4<f32> = u_xlat7;
  let x_2133 : vec3<f32> = u_xlat31;
  let x_2134 : vec3<f32> = (vec3<f32>(x_2131.x, x_2131.y, x_2131.z) * x_2133);
  let x_2135 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2134.x, x_2134.y, x_2134.z, x_2135.w);
  let x_2137 : vec4<f32> = u_xlat6;
  let x_2139 : vec3<f32> = u_xlat8;
  let x_2141 : vec4<f32> = u_xlat7;
  let x_2143 : vec3<f32> = ((vec3<f32>(x_2137.x, x_2137.y, x_2137.z) * x_2139) + vec3<f32>(x_2141.x, x_2141.y, x_2141.z));
  let x_2144 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2143.x, x_2143.y, x_2143.z, x_2144.w);
  let x_2147 : f32 = u_xlat5.x;
  let x_2149 : f32 = x_120.unity_LightData.z;
  u_xlat68 = (x_2147 * x_2149);
  let x_2151 : vec4<f32> = u_xlat1;
  let x_2154 : vec4<f32> = x_45.x_MainLightPosition;
  u_xlat3.x = dot(vec3<f32>(x_2151.x, x_2151.y, x_2151.w), vec3<f32>(x_2154.x, x_2154.y, x_2154.z));
  let x_2159 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_2159, 0.0f, 1.0f);
  let x_2162 : f32 = u_xlat68;
  let x_2164 : f32 = u_xlat3.x;
  u_xlat68 = (x_2162 * x_2164);
  let x_2166 : f32 = u_xlat68;
  let x_2168 : vec3<f32> = u_xlat27;
  let x_2169 : vec3<f32> = (vec3<f32>(x_2166, x_2166, x_2166) * x_2168);
  let x_2170 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2169.x, x_2169.y, x_2169.z, x_2170.w);
  let x_2172 : vec3<f32> = u_xlat4;
  let x_2174 : vec4<f32> = x_45.x_MainLightPosition;
  let x_2176 : vec3<f32> = (x_2172 + vec3<f32>(x_2174.x, x_2174.y, x_2174.z));
  let x_2177 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2176.x, x_2176.y, x_2176.z, x_2177.w);
  let x_2179 : vec4<f32> = u_xlat7;
  let x_2181 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(vec3<f32>(x_2179.x, x_2179.y, x_2179.z), vec3<f32>(x_2181.x, x_2181.y, x_2181.z));
  let x_2184 : f32 = u_xlat68;
  u_xlat68 = max(x_2184, 1.17549435e-37f);
  let x_2187 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_2187);
  let x_2189 : f32 = u_xlat68;
  let x_2191 : vec4<f32> = u_xlat7;
  let x_2193 : vec3<f32> = (vec3<f32>(x_2189, x_2189, x_2189) * vec3<f32>(x_2191.x, x_2191.y, x_2191.z));
  let x_2194 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2193.x, x_2193.y, x_2193.z, x_2194.w);
  let x_2196 : vec4<f32> = u_xlat1;
  let x_2198 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(vec3<f32>(x_2196.x, x_2196.y, x_2196.w), vec3<f32>(x_2198.x, x_2198.y, x_2198.z));
  let x_2201 : f32 = u_xlat68;
  u_xlat68 = clamp(x_2201, 0.0f, 1.0f);
  let x_2204 : vec4<f32> = x_45.x_MainLightPosition;
  let x_2206 : vec4<f32> = u_xlat7;
  u_xlat3.x = dot(vec3<f32>(x_2204.x, x_2204.y, x_2204.z), vec3<f32>(x_2206.x, x_2206.y, x_2206.z));
  let x_2211 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_2211, 0.0f, 1.0f);
  let x_2214 : f32 = u_xlat68;
  let x_2215 : f32 = u_xlat68;
  u_xlat68 = (x_2214 * x_2215);
  let x_2217 : f32 = u_xlat68;
  let x_2219 : f32 = u_xlat9.x;
  u_xlat68 = ((x_2217 * x_2219) + 1.000010014f);
  let x_2224 : f32 = u_xlat3.x;
  let x_2226 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2224 * x_2226);
  let x_2229 : f32 = u_xlat68;
  let x_2230 : f32 = u_xlat68;
  u_xlat68 = (x_2229 * x_2230);
  let x_2233 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2233, 0.100000001f);
  let x_2237 : f32 = u_xlat68;
  let x_2239 : f32 = u_xlat3.x;
  u_xlat68 = (x_2237 * x_2239);
  let x_2241 : f32 = u_xlat70;
  let x_2242 : f32 = u_xlat68;
  u_xlat68 = (x_2241 * x_2242);
  let x_2244 : f32 = u_xlat25;
  let x_2245 : f32 = u_xlat68;
  u_xlat68 = (x_2244 / x_2245);
  let x_2247 : vec3<f32> = u_xlat0;
  let x_2248 : f32 = u_xlat68;
  let x_2251 : vec3<f32> = u_xlat8;
  let x_2252 : vec3<f32> = ((x_2247 * vec3<f32>(x_2248, x_2248, x_2248)) + x_2251);
  let x_2253 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2252.x, x_2252.y, x_2252.z, x_2253.w);
  let x_2255 : vec4<f32> = u_xlat5;
  let x_2257 : vec4<f32> = u_xlat7;
  let x_2259 : vec3<f32> = (vec3<f32>(x_2255.x, x_2255.y, x_2255.z) * vec3<f32>(x_2257.x, x_2257.y, x_2257.z));
  let x_2260 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2259.x, x_2259.y, x_2259.z, x_2260.w);
  let x_2263 : f32 = x_45.x_AdditionalLightsCount.x;
  let x_2265 : f32 = x_120.unity_LightData.y;
  u_xlat68 = min(x_2263, x_2265);
  let x_2268 : f32 = u_xlat68;
  u_xlatu68 = bitcast<u32>(i32(x_2268));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2280 : u32 = u_xlatu_loop_1;
    let x_2281 : u32 = u_xlatu68;
    if ((x_2280 < x_2281)) {
    } else {
      break;
    }
    let x_2284 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_2284 >> 2u);
    let x_2287 : u32 = u_xlatu_loop_1;
    u_xlati71 = bitcast<i32>((x_2287 & 3u));
    let x_2290 : u32 = u_xlatu69;
    let x_2293 : vec4<f32> = x_120.unity_LightIndices[bitcast<i32>(x_2290)];
    let x_2303 : i32 = u_xlati71;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2308 : vec4<u32> = indexable[x_2303];
    u_xlat69 = dot(x_2293, bitcast<vec4<f32>>(x_2308));
    let x_2312 : f32 = u_xlat69;
    u_xlati69 = i32(x_2312);
    let x_2314 : vec3<f32> = vs_INTERP0;
    let x_2326 : i32 = u_xlati69;
    let x_2328 : vec4<f32> = x_2325.x_AdditionalLightsPosition[x_2326];
    let x_2331 : i32 = u_xlati69;
    let x_2333 : vec4<f32> = x_2325.x_AdditionalLightsPosition[x_2331];
    u_xlat31 = ((-(x_2314) * vec3<f32>(x_2328.w, x_2328.w, x_2328.w)) + vec3<f32>(x_2333.x, x_2333.y, x_2333.z));
    let x_2336 : vec3<f32> = u_xlat31;
    let x_2337 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(x_2336, x_2337);
    let x_2339 : f32 = u_xlat71;
    u_xlat71 = max(x_2339, 6.10351562e-05f);
    let x_2342 : f32 = u_xlat71;
    u_xlat73 = inverseSqrt(x_2342);
    let x_2344 : f32 = u_xlat73;
    let x_2346 : vec3<f32> = u_xlat31;
    let x_2347 : vec3<f32> = (vec3<f32>(x_2344, x_2344, x_2344) * x_2346);
    let x_2348 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2347.x, x_2347.y, x_2347.z, x_2348.w);
    let x_2350 : f32 = u_xlat71;
    u_xlat74 = (1.0f / x_2350);
    let x_2352 : f32 = u_xlat71;
    let x_2353 : i32 = u_xlati69;
    let x_2355 : f32 = x_2325.x_AdditionalLightsAttenuation[x_2353].x;
    u_xlat71 = (x_2352 * x_2355);
    let x_2357 : f32 = u_xlat71;
    let x_2359 : f32 = u_xlat71;
    u_xlat71 = ((-(x_2357) * x_2359) + 1.0f);
    let x_2362 : f32 = u_xlat71;
    u_xlat71 = max(x_2362, 0.0f);
    let x_2364 : f32 = u_xlat71;
    let x_2365 : f32 = u_xlat71;
    u_xlat71 = (x_2364 * x_2365);
    let x_2367 : f32 = u_xlat71;
    let x_2368 : f32 = u_xlat74;
    u_xlat71 = (x_2367 * x_2368);
    let x_2370 : i32 = u_xlati69;
    let x_2372 : vec4<f32> = x_2325.x_AdditionalLightsSpotDir[x_2370];
    let x_2374 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_2372.x, x_2372.y, x_2372.z), vec3<f32>(x_2374.x, x_2374.y, x_2374.z));
    let x_2377 : f32 = u_xlat74;
    let x_2378 : i32 = u_xlati69;
    let x_2380 : f32 = x_2325.x_AdditionalLightsAttenuation[x_2378].z;
    let x_2382 : i32 = u_xlati69;
    let x_2384 : f32 = x_2325.x_AdditionalLightsAttenuation[x_2382].w;
    u_xlat74 = ((x_2377 * x_2380) + x_2384);
    let x_2386 : f32 = u_xlat74;
    u_xlat74 = clamp(x_2386, 0.0f, 1.0f);
    let x_2388 : f32 = u_xlat74;
    let x_2389 : f32 = u_xlat74;
    u_xlat74 = (x_2388 * x_2389);
    let x_2391 : f32 = u_xlat71;
    let x_2392 : f32 = u_xlat74;
    u_xlat71 = (x_2391 * x_2392);
    let x_2394 : f32 = u_xlat72;
    let x_2396 : i32 = u_xlati69;
    let x_2398 : vec4<f32> = x_2325.x_AdditionalLightsColor[x_2396];
    let x_2400 : vec3<f32> = (vec3<f32>(x_2394, x_2394, x_2394) * vec3<f32>(x_2398.x, x_2398.y, x_2398.z));
    let x_2401 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2400.x, x_2400.y, x_2400.z, x_2401.w);
    let x_2403 : vec4<f32> = u_xlat1;
    let x_2405 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_2403.x, x_2403.y, x_2403.w), vec3<f32>(x_2405.x, x_2405.y, x_2405.z));
    let x_2408 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2408, 0.0f, 1.0f);
    let x_2410 : f32 = u_xlat69;
    let x_2411 : f32 = u_xlat71;
    u_xlat69 = (x_2410 * x_2411);
    let x_2413 : f32 = u_xlat69;
    let x_2415 : vec4<f32> = u_xlat11;
    let x_2417 : vec3<f32> = (vec3<f32>(x_2413, x_2413, x_2413) * vec3<f32>(x_2415.x, x_2415.y, x_2415.z));
    let x_2418 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2417.x, x_2417.y, x_2417.z, x_2418.w);
    let x_2420 : vec3<f32> = u_xlat31;
    let x_2421 : f32 = u_xlat73;
    let x_2424 : vec3<f32> = u_xlat4;
    u_xlat31 = ((x_2420 * vec3<f32>(x_2421, x_2421, x_2421)) + x_2424);
    let x_2426 : vec3<f32> = u_xlat31;
    let x_2427 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_2426, x_2427);
    let x_2429 : f32 = u_xlat69;
    u_xlat69 = max(x_2429, 1.17549435e-37f);
    let x_2431 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_2431);
    let x_2433 : f32 = u_xlat69;
    let x_2435 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_2433, x_2433, x_2433) * x_2435);
    let x_2437 : vec4<f32> = u_xlat1;
    let x_2439 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_2437.x, x_2437.y, x_2437.w), x_2439);
    let x_2441 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2441, 0.0f, 1.0f);
    let x_2443 : vec4<f32> = u_xlat10;
    let x_2445 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(vec3<f32>(x_2443.x, x_2443.y, x_2443.z), x_2445);
    let x_2447 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2447, 0.0f, 1.0f);
    let x_2449 : f32 = u_xlat69;
    let x_2450 : f32 = u_xlat69;
    u_xlat69 = (x_2449 * x_2450);
    let x_2452 : f32 = u_xlat69;
    let x_2454 : f32 = u_xlat9.x;
    u_xlat69 = ((x_2452 * x_2454) + 1.000010014f);
    let x_2457 : f32 = u_xlat71;
    let x_2458 : f32 = u_xlat71;
    u_xlat71 = (x_2457 * x_2458);
    let x_2460 : f32 = u_xlat69;
    let x_2461 : f32 = u_xlat69;
    u_xlat69 = (x_2460 * x_2461);
    let x_2463 : f32 = u_xlat71;
    u_xlat71 = max(x_2463, 0.100000001f);
    let x_2465 : f32 = u_xlat69;
    let x_2466 : f32 = u_xlat71;
    u_xlat69 = (x_2465 * x_2466);
    let x_2468 : f32 = u_xlat70;
    let x_2469 : f32 = u_xlat69;
    u_xlat69 = (x_2468 * x_2469);
    let x_2471 : f32 = u_xlat25;
    let x_2472 : f32 = u_xlat69;
    u_xlat69 = (x_2471 / x_2472);
    let x_2474 : vec3<f32> = u_xlat0;
    let x_2475 : f32 = u_xlat69;
    let x_2478 : vec3<f32> = u_xlat8;
    u_xlat31 = ((x_2474 * vec3<f32>(x_2475, x_2475, x_2475)) + x_2478);
    let x_2480 : vec3<f32> = u_xlat31;
    let x_2481 : vec4<f32> = u_xlat11;
    let x_2484 : vec4<f32> = u_xlat7;
    let x_2486 : vec3<f32> = ((x_2480 * vec3<f32>(x_2481.x, x_2481.y, x_2481.z)) + vec3<f32>(x_2484.x, x_2484.y, x_2484.z));
    let x_2487 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2486.x, x_2486.y, x_2486.z, x_2487.w);

    continuing {
      let x_2489 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2489 + bitcast<u32>(1i));
    }
  }
  let x_2491 : vec4<f32> = u_xlat6;
  let x_2493 : f32 = u_xlat47;
  let x_2496 : vec4<f32> = u_xlat5;
  u_xlat0 = ((vec3<f32>(x_2491.x, x_2491.y, x_2491.z) * vec3<f32>(x_2493, x_2493, x_2493)) + vec3<f32>(x_2496.x, x_2496.y, x_2496.z));
  let x_2499 : vec4<f32> = u_xlat7;
  let x_2501 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_2499.x, x_2499.y, x_2499.z) + x_2501);
  let x_2503 : vec4<f32> = u_xlat2;
  let x_2505 : f32 = u_xlat45;
  let x_2508 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_2503.x, x_2503.y, x_2503.z) * vec3<f32>(x_2505, x_2505, x_2505)) + x_2508);
  let x_2510 : f32 = u_xlat66;
  let x_2511 : f32 = u_xlat66;
  u_xlat66 = (x_2510 * -(x_2511));
  let x_2514 : f32 = u_xlat66;
  u_xlat66 = exp2(x_2514);
  let x_2516 : vec3<f32> = u_xlat0;
  let x_2519 : vec4<f32> = x_45.unity_FogColor;
  u_xlat0 = (x_2516 + -(vec3<f32>(x_2519.x, x_2519.y, x_2519.z)));
  let x_2525 : f32 = u_xlat66;
  let x_2527 : vec3<f32> = u_xlat0;
  let x_2530 : vec4<f32> = x_45.unity_FogColor;
  let x_2532 : vec3<f32> = ((vec3<f32>(x_2525, x_2525, x_2525) * x_2527) + vec3<f32>(x_2530.x, x_2530.y, x_2530.z));
  let x_2533 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2532.x, x_2532.y, x_2532.z, x_2533.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

