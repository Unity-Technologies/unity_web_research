struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_NightFade : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(4) var Texture2D_52571568 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_52571568 : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_45 : PGlobals;

@group(0) @binding(6) var Texture2D_8BA53EED : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_8BA53EED : sampler;

@group(0) @binding(7) var Texture2D_AB84E4D0 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_AB84E4D0 : sampler;

@group(1) @binding(2) var<uniform> x_122 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_F0A81025 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_F0A81025 : sampler;

var<private> vs_INTERP2 : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_319 : MainLightShadows;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2259 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat2 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlatb45 : bool;
  var u_xlat3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat68 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlatb66 : bool;
  var u_xlat5 : vec3<f32>;
  var x_279 : f32;
  var x_291 : f32;
  var x_303 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlat25 : f32;
  var u_xlat69 : f32;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlat47 : f32;
  var u_xlatb70 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat72 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat29 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat74 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlatb48 : bool;
  var x_1912 : f32;
  var u_xlat26 : vec3<f32>;
  var u_xlat48 : f32;
  var u_xlat73 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati3 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_40 : vec4<f32> = vs_INTERP3;
  let x_51 : f32 = x_45.x_GlobalMipBias.x;
  let x_52 : vec4<f32> = textureSampleBias(Texture2D_52571568, samplerTexture2D_52571568, vec2<f32>(x_40.x, x_40.y), x_51);
  u_xlat0 = vec3<f32>(x_52.x, x_52.y, x_52.z);
  let x_60 : vec4<f32> = vs_INTERP3;
  let x_63 : f32 = x_45.x_GlobalMipBias.x;
  let x_64 : vec4<f32> = textureSampleBias(Texture2D_8BA53EED, samplerTexture2D_8BA53EED, vec2<f32>(x_60.x, x_60.y), x_63);
  let x_65 : vec3<f32> = vec3<f32>(x_64.x, x_64.y, x_64.w);
  let x_66 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_65.x, x_65.y, x_65.z, x_66.w);
  let x_70 : f32 = u_xlat1.x;
  let x_73 : f32 = u_xlat1.z;
  u_xlat1.x = (x_70 * x_73);
  let x_76 : vec4<f32> = u_xlat1;
  let x_83 : vec2<f32> = ((vec2<f32>(x_76.x, x_76.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_84 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  let x_87 : vec4<f32> = u_xlat1;
  let x_89 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec2<f32>(x_87.x, x_87.y), vec2<f32>(x_89.x, x_89.y));
  let x_92 : f32 = u_xlat66;
  u_xlat66 = min(x_92, 1.0f);
  let x_94 : f32 = u_xlat66;
  u_xlat66 = (-(x_94) + 1.0f);
  let x_97 : f32 = u_xlat66;
  u_xlat66 = sqrt(x_97);
  let x_99 : f32 = u_xlat66;
  u_xlat66 = max(x_99, 1.00000002e-16f);
  let x_108 : vec4<f32> = vs_INTERP3;
  let x_111 : f32 = x_45.x_GlobalMipBias.x;
  let x_112 : vec4<f32> = textureSampleBias(Texture2D_AB84E4D0, samplerTexture2D_AB84E4D0, vec2<f32>(x_108.x, x_108.y), x_111);
  u_xlat2 = vec3<f32>(x_112.x, x_112.y, x_112.z);
  let x_114 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_114 * vec3<f32>(14.0f, 14.0f, 14.0f));
  let x_127 : vec4<f32> = x_122.unity_ObjectToWorld[3i];
  let x_130 : vec4<f32> = x_122.unity_ObjectToWorld[3i];
  u_xlat45 = dot(vec3<f32>(x_127.x, x_127.y, x_127.z), vec3<f32>(x_130.x, x_130.y, x_130.z));
  let x_133 : f32 = u_xlat45;
  u_xlat45 = sqrt(x_133);
  let x_135 : f32 = u_xlat45;
  u_xlat45 = fract(x_135);
  let x_137 : f32 = u_xlat45;
  let x_140 : f32 = x_45.x_NightFade;
  u_xlat45 = (x_137 + x_140);
  let x_145 : f32 = u_xlat45;
  u_xlatb45 = (x_145 >= 1.0f);
  let x_147 : bool = u_xlatb45;
  u_xlat45 = select(0.0f, 1.0f, x_147);
  let x_156 : vec4<f32> = vs_INTERP3;
  let x_159 : f32 = x_45.x_GlobalMipBias.x;
  let x_160 : vec4<f32> = textureSampleBias(Texture2D_F0A81025, samplerTexture2D_F0A81025, vec2<f32>(x_156.x, x_156.y), x_159);
  u_xlat3 = vec3<f32>(x_160.x, x_160.w, x_160.y);
  let x_165 : f32 = vs_INTERP2.w;
  u_xlatb67 = (0.0f < x_165);
  let x_168 : bool = u_xlatb67;
  u_xlat67 = select(-1.0f, 1.0f, x_168);
  let x_172 : f32 = x_122.unity_WorldTransformParams.w;
  u_xlatb68 = (x_172 >= 0.0f);
  let x_175 : bool = u_xlatb68;
  u_xlat68 = select(-1.0f, 1.0f, x_175);
  let x_177 : f32 = u_xlat67;
  let x_178 : f32 = u_xlat68;
  u_xlat67 = (x_177 * x_178);
  let x_183 : vec3<f32> = vs_INTERP1;
  let x_185 : vec4<f32> = vs_INTERP2;
  let x_187 : vec3<f32> = (vec3<f32>(x_183.z, x_183.x, x_183.y) * vec3<f32>(x_185.y, x_185.z, x_185.x));
  let x_188 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_187.x, x_187.y, x_187.z, x_188.w);
  let x_190 : vec3<f32> = vs_INTERP1;
  let x_192 : vec4<f32> = vs_INTERP2;
  let x_195 : vec4<f32> = u_xlat4;
  let x_198 : vec3<f32> = ((vec3<f32>(x_190.y, x_190.z, x_190.x) * vec3<f32>(x_192.z, x_192.x, x_192.y)) + -(vec3<f32>(x_195.x, x_195.y, x_195.z)));
  let x_199 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_198.x, x_198.y, x_198.z, x_199.w);
  let x_201 : f32 = u_xlat67;
  let x_203 : vec4<f32> = u_xlat4;
  let x_205 : vec3<f32> = (vec3<f32>(x_201, x_201, x_201) * vec3<f32>(x_203.x, x_203.y, x_203.z));
  let x_206 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_205.x, x_205.y, x_205.z, x_206.w);
  let x_208 : vec4<f32> = u_xlat1;
  let x_210 : vec4<f32> = u_xlat4;
  let x_212 : vec3<f32> = (vec3<f32>(x_208.y, x_208.y, x_208.y) * vec3<f32>(x_210.x, x_210.y, x_210.z));
  let x_213 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_212.x, x_212.y, x_212.z, x_213.w);
  let x_215 : vec4<f32> = u_xlat1;
  let x_217 : vec4<f32> = vs_INTERP2;
  let x_220 : vec4<f32> = u_xlat4;
  let x_222 : vec3<f32> = ((vec3<f32>(x_215.x, x_215.x, x_215.x) * vec3<f32>(x_217.x, x_217.y, x_217.z)) + vec3<f32>(x_220.x, x_220.y, x_220.z));
  let x_223 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_222.x, x_222.y, x_223.z, x_222.z);
  let x_225 : f32 = u_xlat66;
  let x_227 : vec3<f32> = vs_INTERP1;
  let x_229 : vec4<f32> = u_xlat1;
  let x_231 : vec3<f32> = ((vec3<f32>(x_225, x_225, x_225) * x_227) + vec3<f32>(x_229.x, x_229.y, x_229.w));
  let x_232 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_231.x, x_231.y, x_232.z, x_231.z);
  let x_234 : vec4<f32> = u_xlat1;
  let x_236 : vec4<f32> = u_xlat1;
  u_xlat66 = dot(vec3<f32>(x_234.x, x_234.y, x_234.w), vec3<f32>(x_236.x, x_236.y, x_236.w));
  let x_239 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_239);
  let x_241 : f32 = u_xlat66;
  let x_243 : vec4<f32> = u_xlat1;
  let x_245 : vec3<f32> = (vec3<f32>(x_241, x_241, x_241) * vec3<f32>(x_243.x, x_243.y, x_243.w));
  let x_246 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_245.x, x_245.y, x_246.z, x_245.z);
  let x_251 : f32 = x_45.unity_OrthoParams.w;
  u_xlatb66 = (x_251 == 0.0f);
  let x_254 : vec3<f32> = vs_INTERP0;
  let x_259 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  let x_260 : vec3<f32> = (-(x_254) + x_259);
  let x_261 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec4<f32> = u_xlat4;
  let x_265 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(vec3<f32>(x_263.x, x_263.y, x_263.z), vec3<f32>(x_265.x, x_265.y, x_265.z));
  let x_268 : f32 = u_xlat68;
  u_xlat68 = inverseSqrt(x_268);
  let x_270 : f32 = u_xlat68;
  let x_272 : vec4<f32> = u_xlat4;
  let x_274 : vec3<f32> = (vec3<f32>(x_270, x_270, x_270) * vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_278 : bool = u_xlatb66;
  if (x_278) {
    let x_283 : f32 = u_xlat4.x;
    x_279 = x_283;
  } else {
    let x_287 : f32 = x_45.unity_MatrixV[0i].z;
    x_279 = x_287;
  }
  let x_288 : f32 = x_279;
  u_xlat5.x = x_288;
  let x_290 : bool = u_xlatb66;
  if (x_290) {
    let x_296 : f32 = u_xlat4.y;
    x_291 = x_296;
  } else {
    let x_299 : f32 = x_45.unity_MatrixV[1i].z;
    x_291 = x_299;
  }
  let x_300 : f32 = x_291;
  u_xlat5.y = x_300;
  let x_302 : bool = u_xlatb66;
  if (x_302) {
    let x_307 : f32 = u_xlat4.z;
    x_303 = x_307;
  } else {
    let x_311 : f32 = x_45.unity_MatrixV[2i].z;
    x_303 = x_311;
  }
  let x_312 : f32 = x_303;
  u_xlat5.z = x_312;
  let x_314 : vec3<f32> = vs_INTERP0;
  let x_321 : vec4<f32> = x_319.x_CascadeShadowSplitSpheres0;
  let x_324 : vec3<f32> = (x_314 + -(vec3<f32>(x_321.x, x_321.y, x_321.z)));
  let x_325 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_324.x, x_324.y, x_324.z, x_325.w);
  let x_328 : vec3<f32> = vs_INTERP0;
  let x_330 : vec4<f32> = x_319.x_CascadeShadowSplitSpheres1;
  let x_333 : vec3<f32> = (x_328 + -(vec3<f32>(x_330.x, x_330.y, x_330.z)));
  let x_334 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_333.x, x_333.y, x_333.z, x_334.w);
  let x_337 : vec3<f32> = vs_INTERP0;
  let x_339 : vec4<f32> = x_319.x_CascadeShadowSplitSpheres2;
  let x_342 : vec3<f32> = (x_337 + -(vec3<f32>(x_339.x, x_339.y, x_339.z)));
  let x_343 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_342.x, x_342.y, x_342.z, x_343.w);
  let x_346 : vec3<f32> = vs_INTERP0;
  let x_349 : vec4<f32> = x_319.x_CascadeShadowSplitSpheres3;
  u_xlat8 = (x_346 + -(vec3<f32>(x_349.x, x_349.y, x_349.z)));
  let x_353 : vec4<f32> = u_xlat4;
  let x_355 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_353.x, x_353.y, x_353.z), vec3<f32>(x_355.x, x_355.y, x_355.z));
  let x_359 : vec4<f32> = u_xlat6;
  let x_361 : vec4<f32> = u_xlat6;
  u_xlat4.y = dot(vec3<f32>(x_359.x, x_359.y, x_359.z), vec3<f32>(x_361.x, x_361.y, x_361.z));
  let x_365 : vec4<f32> = u_xlat7;
  let x_367 : vec4<f32> = u_xlat7;
  u_xlat4.z = dot(vec3<f32>(x_365.x, x_365.y, x_365.z), vec3<f32>(x_367.x, x_367.y, x_367.z));
  let x_371 : vec3<f32> = u_xlat8;
  let x_372 : vec3<f32> = u_xlat8;
  u_xlat4.w = dot(x_371, x_372);
  let x_378 : vec4<f32> = u_xlat4;
  let x_381 : vec4<f32> = x_319.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_378 < x_381);
  let x_384 : bool = u_xlatb4.x;
  u_xlat6.x = select(0.0f, 1.0f, x_384);
  let x_388 : bool = u_xlatb4.y;
  u_xlat6.y = select(0.0f, 1.0f, x_388);
  let x_392 : bool = u_xlatb4.z;
  u_xlat6.z = select(0.0f, 1.0f, x_392);
  let x_396 : bool = u_xlatb4.w;
  u_xlat6.w = select(0.0f, 1.0f, x_396);
  let x_400 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_400);
  let x_405 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_405);
  let x_409 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_409);
  let x_412 : vec4<f32> = u_xlat4;
  let x_414 : vec4<f32> = u_xlat6;
  let x_416 : vec3<f32> = (vec3<f32>(x_412.x, x_412.y, x_412.z) + vec3<f32>(x_414.y, x_414.z, x_414.w));
  let x_417 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_416.x, x_416.y, x_416.z, x_417.w);
  let x_419 : vec4<f32> = u_xlat4;
  let x_422 : vec3<f32> = max(vec3<f32>(x_419.x, x_419.y, x_419.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_423 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_423.x, x_422.x, x_422.y, x_422.z);
  let x_425 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_425, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_430 : f32 = u_xlat66;
  u_xlat66 = (-(x_430) + 4.0f);
  let x_435 : f32 = u_xlat66;
  u_xlatu66 = u32(x_435);
  let x_439 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_439) << bitcast<u32>(2i));
  let x_442 : vec3<f32> = vs_INTERP0;
  let x_444 : i32 = u_xlati66;
  let x_447 : i32 = u_xlati66;
  let x_451 : vec4<f32> = x_319.x_MainLightWorldToShadow[((x_444 + 1i) / 4i)][((x_447 + 1i) % 4i)];
  let x_453 : vec3<f32> = (vec3<f32>(x_442.y, x_442.y, x_442.y) * vec3<f32>(x_451.x, x_451.y, x_451.z));
  let x_454 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_453.x, x_453.y, x_453.z, x_454.w);
  let x_456 : i32 = u_xlati66;
  let x_458 : i32 = u_xlati66;
  let x_461 : vec4<f32> = x_319.x_MainLightWorldToShadow[(x_456 / 4i)][(x_458 % 4i)];
  let x_463 : vec3<f32> = vs_INTERP0;
  let x_466 : vec4<f32> = u_xlat4;
  let x_468 : vec3<f32> = ((vec3<f32>(x_461.x, x_461.y, x_461.z) * vec3<f32>(x_463.x, x_463.x, x_463.x)) + vec3<f32>(x_466.x, x_466.y, x_466.z));
  let x_469 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
  let x_471 : i32 = u_xlati66;
  let x_474 : i32 = u_xlati66;
  let x_478 : vec4<f32> = x_319.x_MainLightWorldToShadow[((x_471 + 2i) / 4i)][((x_474 + 2i) % 4i)];
  let x_480 : vec3<f32> = vs_INTERP0;
  let x_483 : vec4<f32> = u_xlat4;
  let x_485 : vec3<f32> = ((vec3<f32>(x_478.x, x_478.y, x_478.z) * vec3<f32>(x_480.z, x_480.z, x_480.z)) + vec3<f32>(x_483.x, x_483.y, x_483.z));
  let x_486 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_485.x, x_485.y, x_485.z, x_486.w);
  let x_488 : vec4<f32> = u_xlat4;
  let x_490 : i32 = u_xlati66;
  let x_493 : i32 = u_xlati66;
  let x_497 : vec4<f32> = x_319.x_MainLightWorldToShadow[((x_490 + 3i) / 4i)][((x_493 + 3i) % 4i)];
  let x_499 : vec3<f32> = (vec3<f32>(x_488.x, x_488.y, x_488.z) + vec3<f32>(x_497.x, x_497.y, x_497.z));
  let x_500 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_499.x, x_499.y, x_499.z, x_500.w);
  let x_509 : vec2<f32> = vs_INTERP4;
  let x_511 : f32 = x_45.x_GlobalMipBias.x;
  let x_512 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_509, x_511);
  let x_513 : vec3<f32> = vec3<f32>(x_512.x, x_512.y, x_512.z);
  let x_514 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_513.x, x_513.y, x_513.z, x_514.w);
  let x_518 : vec4<f32> = x_45.x_ScaledScreenParams;
  let x_519 : vec2<f32> = vec2<f32>(x_518.x, x_518.y);
  let x_523 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_519.x, x_519.y));
  let x_524 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_523.x, x_523.y, x_524.z, x_524.w);
  let x_526 : vec4<f32> = u_xlat7;
  let x_528 : vec4<f32> = hlslcc_FragCoord;
  let x_530 : vec2<f32> = (vec2<f32>(x_526.x, x_526.y) * vec2<f32>(x_528.x, x_528.y));
  let x_531 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_530.x, x_530.y, x_531.z, x_531.w);
  let x_534 : f32 = u_xlat7.y;
  let x_537 : f32 = x_45.x_ScaleBiasRt.x;
  let x_540 : f32 = x_45.x_ScaleBiasRt.y;
  u_xlat66 = ((x_534 * x_537) + x_540);
  let x_542 : f32 = u_xlat66;
  u_xlat7.z = (-(x_542) + 1.0f);
  let x_546 : vec3<f32> = u_xlat3;
  let x_547 : vec2<f32> = vec2<f32>(x_546.x, x_546.y);
  let x_548 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_547.x, x_547.y, x_548.z);
  let x_550 : vec3<f32> = u_xlat3;
  let x_554 : vec2<f32> = clamp(vec2<f32>(x_550.x, x_550.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_555 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_554.x, x_554.y, x_555.z);
  let x_558 : f32 = u_xlat3.x;
  u_xlat66 = ((-(x_558) * 0.959999979f) + 0.959999979f);
  let x_563 : f32 = u_xlat66;
  let x_566 : f32 = u_xlat3.y;
  u_xlat68 = (-(x_563) + x_566);
  let x_568 : f32 = u_xlat66;
  let x_570 : vec3<f32> = u_xlat0;
  u_xlat8 = (vec3<f32>(x_568, x_568, x_568) * x_570);
  let x_572 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_572 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_576 : vec3<f32> = u_xlat3;
  let x_578 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_576.x, x_576.x, x_576.x) * x_578) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_584 : f32 = u_xlat3.y;
  u_xlat66 = (-(x_584) + 1.0f);
  let x_587 : f32 = u_xlat66;
  let x_588 : f32 = u_xlat66;
  u_xlat3.x = (x_587 * x_588);
  let x_592 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_592, 0.0078125f);
  let x_598 : f32 = u_xlat3.x;
  let x_600 : f32 = u_xlat3.x;
  u_xlat25 = (x_598 * x_600);
  let x_602 : f32 = u_xlat68;
  u_xlat68 = (x_602 + 1.0f);
  let x_604 : f32 = u_xlat68;
  u_xlat68 = min(x_604, 1.0f);
  let x_608 : f32 = u_xlat3.x;
  u_xlat69 = ((x_608 * 4.0f) + 2.0f);
  let x_617 : vec4<f32> = u_xlat7;
  let x_620 : f32 = x_45.x_GlobalMipBias.x;
  let x_621 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_617.x, x_617.z), x_620);
  u_xlat70 = x_621.x;
  let x_624 : f32 = u_xlat70;
  u_xlat71 = (x_624 + -1.0f);
  let x_627 : f32 = x_45.x_AmbientOcclusionParam.w;
  let x_628 : f32 = u_xlat71;
  u_xlat71 = ((x_627 * x_628) + 1.0f);
  let x_633 : f32 = u_xlat3.z;
  let x_634 : f32 = u_xlat70;
  u_xlat47 = min(x_633, x_634);
  let x_638 : f32 = x_319.x_MainLightShadowParams.y;
  u_xlatb70 = (0.0f < x_638);
  let x_640 : bool = u_xlatb70;
  if (x_640) {
    let x_644 : f32 = x_319.x_MainLightShadowParams.y;
    u_xlatb70 = (x_644 == 1.0f);
    let x_646 : bool = u_xlatb70;
    if (x_646) {
      let x_649 : vec4<f32> = u_xlat4;
      let x_652 : vec4<f32> = x_319.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_649.x, x_649.y, x_649.x, x_649.y) + x_652);
      let x_655 : vec4<f32> = u_xlat7;
      let x_656 : vec2<f32> = vec2<f32>(x_655.x, x_655.y);
      let x_658 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_656.x, x_656.y, x_658);
      let x_671 : vec3<f32> = txVec0;
      let x_673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_671.xy, x_671.z);
      u_xlat9.x = x_673;
      let x_676 : vec4<f32> = u_xlat7;
      let x_677 : vec2<f32> = vec2<f32>(x_676.z, x_676.w);
      let x_679 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_677.x, x_677.y, x_679);
      let x_686 : vec3<f32> = txVec1;
      let x_688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_686.xy, x_686.z);
      u_xlat9.y = x_688;
      let x_690 : vec4<f32> = u_xlat4;
      let x_693 : vec4<f32> = x_319.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_690.x, x_690.y, x_690.x, x_690.y) + x_693);
      let x_696 : vec4<f32> = u_xlat7;
      let x_697 : vec2<f32> = vec2<f32>(x_696.x, x_696.y);
      let x_699 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_697.x, x_697.y, x_699);
      let x_706 : vec3<f32> = txVec2;
      let x_708 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_706.xy, x_706.z);
      u_xlat9.z = x_708;
      let x_711 : vec4<f32> = u_xlat7;
      let x_712 : vec2<f32> = vec2<f32>(x_711.z, x_711.w);
      let x_714 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_712.x, x_712.y, x_714);
      let x_721 : vec3<f32> = txVec3;
      let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
      u_xlat9.w = x_723;
      let x_725 : vec4<f32> = u_xlat9;
      u_xlat70 = dot(x_725, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_732 : f32 = x_319.x_MainLightShadowParams.y;
      u_xlatb72 = (x_732 == 2.0f);
      let x_734 : bool = u_xlatb72;
      if (x_734) {
        let x_737 : vec4<f32> = u_xlat4;
        let x_740 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_745 : vec2<f32> = ((vec2<f32>(x_737.x, x_737.y) * vec2<f32>(x_740.z, x_740.w)) + vec2<f32>(0.5f, 0.5f));
        let x_746 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_745.x, x_745.y, x_746.z, x_746.w);
        let x_748 : vec4<f32> = u_xlat7;
        let x_750 : vec2<f32> = floor(vec2<f32>(x_748.x, x_748.y));
        let x_751 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_750.x, x_750.y, x_751.z, x_751.w);
        let x_755 : vec4<f32> = u_xlat4;
        let x_758 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_761 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_755.x, x_755.y) * vec2<f32>(x_758.z, x_758.w)) + -(vec2<f32>(x_761.x, x_761.y)));
        let x_765 : vec2<f32> = u_xlat51;
        u_xlat9 = (vec4<f32>(x_765.x, x_765.x, x_765.y, x_765.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_770 : vec4<f32> = u_xlat9;
        let x_772 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_770.x, x_770.x, x_770.z, x_770.z) * vec4<f32>(x_772.x, x_772.x, x_772.z, x_772.z));
        let x_775 : vec4<f32> = u_xlat10;
        let x_779 : vec2<f32> = (vec2<f32>(x_775.y, x_775.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_779.x, x_780.y, x_779.y, x_780.w);
        let x_782 : vec4<f32> = u_xlat10;
        let x_785 : vec2<f32> = u_xlat51;
        let x_787 : vec2<f32> = ((vec2<f32>(x_782.x, x_782.z) * vec2<f32>(0.5f, 0.5f)) + -(x_785));
        let x_788 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_787.x, x_787.y, x_788.z, x_788.w);
        let x_791 : vec2<f32> = u_xlat51;
        u_xlat54 = (-(x_791) + vec2<f32>(1.0f, 1.0f));
        let x_795 : vec2<f32> = u_xlat51;
        let x_797 : vec2<f32> = min(x_795, vec2<f32>(0.0f, 0.0f));
        let x_798 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_797.x, x_797.y, x_798.z, x_798.w);
        let x_800 : vec4<f32> = u_xlat11;
        let x_803 : vec4<f32> = u_xlat11;
        let x_806 : vec2<f32> = u_xlat54;
        let x_807 : vec2<f32> = ((-(vec2<f32>(x_800.x, x_800.y)) * vec2<f32>(x_803.x, x_803.y)) + x_806);
        let x_808 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_807.x, x_807.y, x_808.z, x_808.w);
        let x_810 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_810, vec2<f32>(0.0f, 0.0f));
        let x_812 : vec2<f32> = u_xlat51;
        let x_814 : vec2<f32> = u_xlat51;
        let x_816 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_812) * x_814) + vec2<f32>(x_816.y, x_816.w));
        let x_819 : vec4<f32> = u_xlat11;
        let x_821 : vec2<f32> = (vec2<f32>(x_819.x, x_819.y) + vec2<f32>(1.0f, 1.0f));
        let x_822 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_821.x, x_821.y, x_822.z, x_822.w);
        let x_824 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_824 + vec2<f32>(1.0f, 1.0f));
        let x_827 : vec4<f32> = u_xlat10;
        let x_831 : vec2<f32> = (vec2<f32>(x_827.x, x_827.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_832 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec2<f32> = u_xlat54;
        let x_835 : vec2<f32> = (x_834 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_836 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_835.x, x_835.y, x_836.z, x_836.w);
        let x_838 : vec4<f32> = u_xlat11;
        let x_840 : vec2<f32> = (vec2<f32>(x_838.x, x_838.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_841 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_840.x, x_840.y, x_841.z, x_841.w);
        let x_844 : vec2<f32> = u_xlat51;
        let x_845 : vec2<f32> = (x_844 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_846 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_845.x, x_845.y, x_846.z, x_846.w);
        let x_848 : vec4<f32> = u_xlat9;
        u_xlat51 = (vec2<f32>(x_848.y, x_848.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_852 : f32 = u_xlat11.x;
        u_xlat12.z = x_852;
        let x_855 : f32 = u_xlat51.x;
        u_xlat12.w = x_855;
        let x_858 : f32 = u_xlat13.x;
        u_xlat10.z = x_858;
        let x_861 : f32 = u_xlat9.x;
        u_xlat10.w = x_861;
        let x_864 : vec4<f32> = u_xlat10;
        let x_866 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_864.z, x_864.w, x_864.x, x_864.z) + vec4<f32>(x_866.z, x_866.w, x_866.x, x_866.z));
        let x_870 : f32 = u_xlat12.y;
        u_xlat11.z = x_870;
        let x_873 : f32 = u_xlat51.y;
        u_xlat11.w = x_873;
        let x_876 : f32 = u_xlat10.y;
        u_xlat13.z = x_876;
        let x_879 : f32 = u_xlat9.z;
        u_xlat13.w = x_879;
        let x_881 : vec4<f32> = u_xlat11;
        let x_883 : vec4<f32> = u_xlat13;
        let x_885 : vec3<f32> = (vec3<f32>(x_881.z, x_881.y, x_881.w) + vec3<f32>(x_883.z, x_883.y, x_883.w));
        let x_886 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_885.x, x_885.y, x_885.z, x_886.w);
        let x_888 : vec4<f32> = u_xlat10;
        let x_890 : vec4<f32> = u_xlat14;
        let x_892 : vec3<f32> = (vec3<f32>(x_888.x, x_888.z, x_888.w) / vec3<f32>(x_890.z, x_890.w, x_890.y));
        let x_893 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_892.x, x_892.y, x_892.z, x_893.w);
        let x_895 : vec4<f32> = u_xlat10;
        let x_901 : vec3<f32> = (vec3<f32>(x_895.x, x_895.y, x_895.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_902 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_901.x, x_901.y, x_901.z, x_902.w);
        let x_904 : vec4<f32> = u_xlat13;
        let x_906 : vec4<f32> = u_xlat9;
        let x_908 : vec3<f32> = (vec3<f32>(x_904.z, x_904.y, x_904.w) / vec3<f32>(x_906.x, x_906.y, x_906.z));
        let x_909 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_908.x, x_908.y, x_908.z, x_909.w);
        let x_911 : vec4<f32> = u_xlat11;
        let x_913 : vec3<f32> = (vec3<f32>(x_911.x, x_911.y, x_911.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_914 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_913.x, x_913.y, x_913.z, x_914.w);
        let x_916 : vec4<f32> = u_xlat10;
        let x_919 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_921 : vec3<f32> = (vec3<f32>(x_916.y, x_916.x, x_916.z) * vec3<f32>(x_919.x, x_919.x, x_919.x));
        let x_922 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_921.x, x_921.y, x_921.z, x_922.w);
        let x_924 : vec4<f32> = u_xlat11;
        let x_927 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_929 : vec3<f32> = (vec3<f32>(x_924.x, x_924.y, x_924.z) * vec3<f32>(x_927.y, x_927.y, x_927.y));
        let x_930 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_929.x, x_929.y, x_929.z, x_930.w);
        let x_933 : f32 = u_xlat11.x;
        u_xlat10.w = x_933;
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_941 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_935.x, x_935.y, x_935.x, x_935.y) * vec4<f32>(x_938.x, x_938.y, x_938.x, x_938.y)) + vec4<f32>(x_941.y, x_941.w, x_941.x, x_941.w));
        let x_944 : vec4<f32> = u_xlat7;
        let x_947 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_950 : vec4<f32> = u_xlat10;
        u_xlat51 = ((vec2<f32>(x_944.x, x_944.y) * vec2<f32>(x_947.x, x_947.y)) + vec2<f32>(x_950.z, x_950.w));
        let x_954 : f32 = u_xlat10.y;
        u_xlat11.w = x_954;
        let x_956 : vec4<f32> = u_xlat11;
        let x_957 : vec2<f32> = vec2<f32>(x_956.y, x_956.z);
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec4<f32> = u_xlat7;
        let x_963 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat7;
        let x_972 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_969.x, x_969.y, x_969.x, x_969.y) * vec4<f32>(x_972.x, x_972.y, x_972.x, x_972.y)) + vec4<f32>(x_975.w, x_975.y, x_975.w, x_975.z));
        let x_978 : vec4<f32> = u_xlat7;
        let x_981 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_984 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_978.x, x_978.y, x_978.x, x_978.y) * vec4<f32>(x_981.x, x_981.y, x_981.x, x_981.y)) + vec4<f32>(x_984.x, x_984.w, x_984.z, x_984.w));
        let x_988 : vec4<f32> = u_xlat9;
        let x_990 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_988.x, x_988.x, x_988.x, x_988.y) * vec4<f32>(x_990.z, x_990.w, x_990.y, x_990.z));
        let x_994 : vec4<f32> = u_xlat9;
        let x_996 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_994.y, x_994.y, x_994.z, x_994.z) * x_996);
        let x_1000 : f32 = u_xlat9.z;
        let x_1002 : f32 = u_xlat14.y;
        u_xlat72 = (x_1000 * x_1002);
        let x_1005 : vec4<f32> = u_xlat12;
        let x_1006 : vec2<f32> = vec2<f32>(x_1005.x, x_1005.y);
        let x_1008 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_1006.x, x_1006.y, x_1008);
        let x_1015 : vec3<f32> = txVec4;
        let x_1017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1015.xy, x_1015.z);
        u_xlat7.x = x_1017;
        let x_1020 : vec4<f32> = u_xlat12;
        let x_1021 : vec2<f32> = vec2<f32>(x_1020.z, x_1020.w);
        let x_1023 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_1021.x, x_1021.y, x_1023);
        let x_1031 : vec3<f32> = txVec5;
        let x_1033 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1031.xy, x_1031.z);
        u_xlat29 = x_1033;
        let x_1034 : f32 = u_xlat29;
        let x_1036 : f32 = u_xlat15.y;
        u_xlat29 = (x_1034 * x_1036);
        let x_1039 : f32 = u_xlat15.x;
        let x_1041 : f32 = u_xlat7.x;
        let x_1043 : f32 = u_xlat29;
        u_xlat7.x = ((x_1039 * x_1041) + x_1043);
        let x_1047 : vec2<f32> = u_xlat51;
        let x_1049 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_1047.x, x_1047.y, x_1049);
        let x_1056 : vec3<f32> = txVec6;
        let x_1058 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1056.xy, x_1056.z);
        u_xlat29 = x_1058;
        let x_1060 : f32 = u_xlat15.z;
        let x_1061 : f32 = u_xlat29;
        let x_1064 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1060 * x_1061) + x_1064);
        let x_1068 : vec4<f32> = u_xlat11;
        let x_1069 : vec2<f32> = vec2<f32>(x_1068.x, x_1068.y);
        let x_1071 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_1069.x, x_1069.y, x_1071);
        let x_1078 : vec3<f32> = txVec7;
        let x_1080 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1078.xy, x_1078.z);
        u_xlat29 = x_1080;
        let x_1082 : f32 = u_xlat15.w;
        let x_1083 : f32 = u_xlat29;
        let x_1086 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1082 * x_1083) + x_1086);
        let x_1090 : vec4<f32> = u_xlat13;
        let x_1091 : vec2<f32> = vec2<f32>(x_1090.x, x_1090.y);
        let x_1093 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_1091.x, x_1091.y, x_1093);
        let x_1100 : vec3<f32> = txVec8;
        let x_1102 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1100.xy, x_1100.z);
        u_xlat29 = x_1102;
        let x_1104 : f32 = u_xlat16.x;
        let x_1105 : f32 = u_xlat29;
        let x_1108 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1104 * x_1105) + x_1108);
        let x_1112 : vec4<f32> = u_xlat13;
        let x_1113 : vec2<f32> = vec2<f32>(x_1112.z, x_1112.w);
        let x_1115 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_1113.x, x_1113.y, x_1115);
        let x_1122 : vec3<f32> = txVec9;
        let x_1124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1122.xy, x_1122.z);
        u_xlat29 = x_1124;
        let x_1126 : f32 = u_xlat16.y;
        let x_1127 : f32 = u_xlat29;
        let x_1130 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1126 * x_1127) + x_1130);
        let x_1134 : vec4<f32> = u_xlat11;
        let x_1135 : vec2<f32> = vec2<f32>(x_1134.z, x_1134.w);
        let x_1137 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_1135.x, x_1135.y, x_1137);
        let x_1144 : vec3<f32> = txVec10;
        let x_1146 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1144.xy, x_1144.z);
        u_xlat29 = x_1146;
        let x_1148 : f32 = u_xlat16.z;
        let x_1149 : f32 = u_xlat29;
        let x_1152 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1148 * x_1149) + x_1152);
        let x_1156 : vec4<f32> = u_xlat10;
        let x_1157 : vec2<f32> = vec2<f32>(x_1156.x, x_1156.y);
        let x_1159 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_1157.x, x_1157.y, x_1159);
        let x_1166 : vec3<f32> = txVec11;
        let x_1168 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1166.xy, x_1166.z);
        u_xlat29 = x_1168;
        let x_1170 : f32 = u_xlat16.w;
        let x_1171 : f32 = u_xlat29;
        let x_1174 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_1170 * x_1171) + x_1174);
        let x_1178 : vec4<f32> = u_xlat10;
        let x_1179 : vec2<f32> = vec2<f32>(x_1178.z, x_1178.w);
        let x_1181 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_1179.x, x_1179.y, x_1181);
        let x_1188 : vec3<f32> = txVec12;
        let x_1190 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1188.xy, x_1188.z);
        u_xlat29 = x_1190;
        let x_1191 : f32 = u_xlat72;
        let x_1192 : f32 = u_xlat29;
        let x_1195 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1191 * x_1192) + x_1195);
      } else {
        let x_1198 : vec4<f32> = u_xlat4;
        let x_1201 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1204 : vec2<f32> = ((vec2<f32>(x_1198.x, x_1198.y) * vec2<f32>(x_1201.z, x_1201.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1205 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1204.x, x_1204.y, x_1205.z, x_1205.w);
        let x_1207 : vec4<f32> = u_xlat7;
        let x_1209 : vec2<f32> = floor(vec2<f32>(x_1207.x, x_1207.y));
        let x_1210 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1209.x, x_1209.y, x_1210.z, x_1210.w);
        let x_1212 : vec4<f32> = u_xlat4;
        let x_1215 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1212.x, x_1212.y) * vec2<f32>(x_1215.z, x_1215.w)) + -(vec2<f32>(x_1218.x, x_1218.y)));
        let x_1222 : vec2<f32> = u_xlat51;
        u_xlat9 = (vec4<f32>(x_1222.x, x_1222.x, x_1222.y, x_1222.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1225 : vec4<f32> = u_xlat9;
        let x_1227 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1225.x, x_1225.x, x_1225.z, x_1225.z) * vec4<f32>(x_1227.x, x_1227.x, x_1227.z, x_1227.z));
        let x_1230 : vec4<f32> = u_xlat10;
        let x_1234 : vec2<f32> = (vec2<f32>(x_1230.y, x_1230.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1235 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1235.x, x_1234.x, x_1235.z, x_1234.y);
        let x_1237 : vec4<f32> = u_xlat10;
        let x_1240 : vec2<f32> = u_xlat51;
        let x_1242 : vec2<f32> = ((vec2<f32>(x_1237.x, x_1237.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1240));
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1242.x, x_1243.y, x_1242.y, x_1243.w);
        let x_1245 : vec2<f32> = u_xlat51;
        let x_1247 : vec2<f32> = (-(x_1245) + vec2<f32>(1.0f, 1.0f));
        let x_1248 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1247.x, x_1247.y, x_1248.z, x_1248.w);
        let x_1250 : vec2<f32> = u_xlat51;
        u_xlat54 = min(x_1250, vec2<f32>(0.0f, 0.0f));
        let x_1252 : vec2<f32> = u_xlat54;
        let x_1254 : vec2<f32> = u_xlat54;
        let x_1256 : vec4<f32> = u_xlat10;
        let x_1258 : vec2<f32> = ((-(x_1252) * x_1254) + vec2<f32>(x_1256.x, x_1256.y));
        let x_1259 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1258.x, x_1258.y, x_1259.z, x_1259.w);
        let x_1261 : vec2<f32> = u_xlat51;
        u_xlat54 = max(x_1261, vec2<f32>(0.0f, 0.0f));
        let x_1264 : vec2<f32> = u_xlat54;
        let x_1266 : vec2<f32> = u_xlat54;
        let x_1268 : vec4<f32> = u_xlat9;
        let x_1270 : vec2<f32> = ((-(x_1264) * x_1266) + vec2<f32>(x_1268.y, x_1268.w));
        let x_1271 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1270.x, x_1271.y, x_1270.y);
        let x_1273 : vec4<f32> = u_xlat10;
        let x_1275 : vec2<f32> = (vec2<f32>(x_1273.x, x_1273.y) + vec2<f32>(2.0f, 2.0f));
        let x_1276 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1275.x, x_1275.y, x_1276.z, x_1276.w);
        let x_1278 : vec3<f32> = u_xlat31;
        let x_1280 : vec2<f32> = (vec2<f32>(x_1278.x, x_1278.z) + vec2<f32>(2.0f, 2.0f));
        let x_1281 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1281.x, x_1280.x, x_1281.z, x_1280.y);
        let x_1284 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1284 * 0.081632003f);
        let x_1288 : vec4<f32> = u_xlat9;
        let x_1291 : vec3<f32> = (vec3<f32>(x_1288.z, x_1288.x, x_1288.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1292 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1291.x, x_1291.y, x_1291.z, x_1292.w);
        let x_1294 : vec4<f32> = u_xlat10;
        let x_1297 : vec2<f32> = (vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1298 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1297.x, x_1297.y, x_1298.z, x_1298.w);
        let x_1301 : f32 = u_xlat13.y;
        u_xlat12.x = x_1301;
        let x_1303 : vec2<f32> = u_xlat51;
        let x_1310 : vec2<f32> = ((vec2<f32>(x_1303.x, x_1303.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1311 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1311.x, x_1310.x, x_1311.z, x_1310.y);
        let x_1313 : vec2<f32> = u_xlat51;
        let x_1317 : vec2<f32> = ((vec2<f32>(x_1313.x, x_1313.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1318 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1317.x, x_1318.y, x_1317.y, x_1318.w);
        let x_1321 : f32 = u_xlat9.x;
        u_xlat10.y = x_1321;
        let x_1324 : f32 = u_xlat11.y;
        u_xlat10.w = x_1324;
        let x_1326 : vec4<f32> = u_xlat10;
        let x_1327 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1326 + x_1327);
        let x_1329 : vec2<f32> = u_xlat51;
        let x_1332 : vec2<f32> = ((vec2<f32>(x_1329.y, x_1329.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1333 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1333.x, x_1332.x, x_1333.z, x_1332.y);
        let x_1335 : vec2<f32> = u_xlat51;
        let x_1338 : vec2<f32> = ((vec2<f32>(x_1335.y, x_1335.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1339 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1338.x, x_1339.y, x_1338.y, x_1339.w);
        let x_1342 : f32 = u_xlat9.y;
        u_xlat11.y = x_1342;
        let x_1344 : vec4<f32> = u_xlat11;
        let x_1345 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1344 + x_1345);
        let x_1347 : vec4<f32> = u_xlat10;
        let x_1348 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1347 / x_1348);
        let x_1350 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1350 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1356 : vec4<f32> = u_xlat11;
        let x_1357 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1356 / x_1357);
        let x_1359 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1359 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1361 : vec4<f32> = u_xlat10;
        let x_1364 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1361.w, x_1361.x, x_1361.y, x_1361.z) * vec4<f32>(x_1364.x, x_1364.x, x_1364.x, x_1364.x));
        let x_1367 : vec4<f32> = u_xlat11;
        let x_1370 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1367.x, x_1367.w, x_1367.y, x_1367.z) * vec4<f32>(x_1370.y, x_1370.y, x_1370.y, x_1370.y));
        let x_1373 : vec4<f32> = u_xlat10;
        let x_1374 : vec3<f32> = vec3<f32>(x_1373.y, x_1373.z, x_1373.w);
        let x_1375 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1374.x, x_1375.y, x_1374.y, x_1374.z);
        let x_1378 : f32 = u_xlat11.x;
        u_xlat13.y = x_1378;
        let x_1380 : vec4<f32> = u_xlat7;
        let x_1383 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1386 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1380.x, x_1380.y, x_1380.x, x_1380.y) * vec4<f32>(x_1383.x, x_1383.y, x_1383.x, x_1383.y)) + vec4<f32>(x_1386.x, x_1386.y, x_1386.z, x_1386.y));
        let x_1389 : vec4<f32> = u_xlat7;
        let x_1392 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1395 : vec4<f32> = u_xlat13;
        u_xlat51 = ((vec2<f32>(x_1389.x, x_1389.y) * vec2<f32>(x_1392.x, x_1392.y)) + vec2<f32>(x_1395.w, x_1395.y));
        let x_1399 : f32 = u_xlat13.y;
        u_xlat10.y = x_1399;
        let x_1402 : f32 = u_xlat11.z;
        u_xlat13.y = x_1402;
        let x_1404 : vec4<f32> = u_xlat7;
        let x_1407 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1410 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1404.x, x_1404.y, x_1404.x, x_1404.y) * vec4<f32>(x_1407.x, x_1407.y, x_1407.x, x_1407.y)) + vec4<f32>(x_1410.x, x_1410.y, x_1410.z, x_1410.y));
        let x_1413 : vec4<f32> = u_xlat7;
        let x_1416 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1419 : vec4<f32> = u_xlat13;
        let x_1421 : vec2<f32> = ((vec2<f32>(x_1413.x, x_1413.y) * vec2<f32>(x_1416.x, x_1416.y)) + vec2<f32>(x_1419.w, x_1419.y));
        let x_1422 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1421.x, x_1421.y, x_1422.z, x_1422.w);
        let x_1425 : f32 = u_xlat13.y;
        u_xlat10.z = x_1425;
        let x_1428 : vec4<f32> = u_xlat7;
        let x_1431 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1434 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1428.x, x_1428.y, x_1428.x, x_1428.y) * vec4<f32>(x_1431.x, x_1431.y, x_1431.x, x_1431.y)) + vec4<f32>(x_1434.x, x_1434.y, x_1434.x, x_1434.z));
        let x_1438 : f32 = u_xlat11.w;
        u_xlat13.y = x_1438;
        let x_1441 : vec4<f32> = u_xlat7;
        let x_1444 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1447 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1441.x, x_1441.y, x_1441.x, x_1441.y) * vec4<f32>(x_1444.x, x_1444.y, x_1444.x, x_1444.y)) + vec4<f32>(x_1447.x, x_1447.y, x_1447.z, x_1447.y));
        let x_1451 : vec4<f32> = u_xlat7;
        let x_1454 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1457 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1451.x, x_1451.y) * vec2<f32>(x_1454.x, x_1454.y)) + vec2<f32>(x_1457.w, x_1457.y));
        let x_1461 : f32 = u_xlat13.y;
        u_xlat10.w = x_1461;
        let x_1464 : vec4<f32> = u_xlat7;
        let x_1467 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1470 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1464.x, x_1464.y) * vec2<f32>(x_1467.x, x_1467.y)) + vec2<f32>(x_1470.x, x_1470.w));
        let x_1473 : vec4<f32> = u_xlat13;
        let x_1474 : vec3<f32> = vec3<f32>(x_1473.x, x_1473.z, x_1473.w);
        let x_1475 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1474.x, x_1475.y, x_1474.y, x_1474.z);
        let x_1477 : vec4<f32> = u_xlat7;
        let x_1480 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1483 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1477.x, x_1477.y, x_1477.x, x_1477.y) * vec4<f32>(x_1480.x, x_1480.y, x_1480.x, x_1480.y)) + vec4<f32>(x_1483.x, x_1483.y, x_1483.z, x_1483.y));
        let x_1487 : vec4<f32> = u_xlat7;
        let x_1490 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1493 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1487.x, x_1487.y) * vec2<f32>(x_1490.x, x_1490.y)) + vec2<f32>(x_1493.w, x_1493.y));
        let x_1497 : f32 = u_xlat10.x;
        u_xlat11.x = x_1497;
        let x_1499 : vec4<f32> = u_xlat7;
        let x_1502 : vec4<f32> = x_319.x_MainLightShadowmapSize;
        let x_1505 : vec4<f32> = u_xlat11;
        let x_1507 : vec2<f32> = ((vec2<f32>(x_1499.x, x_1499.y) * vec2<f32>(x_1502.x, x_1502.y)) + vec2<f32>(x_1505.x, x_1505.y));
        let x_1508 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1507.x, x_1507.y, x_1508.z, x_1508.w);
        let x_1511 : vec4<f32> = u_xlat9;
        let x_1513 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1511.x, x_1511.x, x_1511.x, x_1511.x) * x_1513);
        let x_1516 : vec4<f32> = u_xlat9;
        let x_1518 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1516.y, x_1516.y, x_1516.y, x_1516.y) * x_1518);
        let x_1521 : vec4<f32> = u_xlat9;
        let x_1523 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1521.z, x_1521.z, x_1521.z, x_1521.z) * x_1523);
        let x_1525 : vec4<f32> = u_xlat9;
        let x_1527 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1525.w, x_1525.w, x_1525.w, x_1525.w) * x_1527);
        let x_1530 : vec4<f32> = u_xlat14;
        let x_1531 : vec2<f32> = vec2<f32>(x_1530.x, x_1530.y);
        let x_1533 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1531.x, x_1531.y, x_1533);
        let x_1540 : vec3<f32> = txVec13;
        let x_1542 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1540.xy, x_1540.z);
        u_xlat72 = x_1542;
        let x_1544 : vec4<f32> = u_xlat14;
        let x_1545 : vec2<f32> = vec2<f32>(x_1544.z, x_1544.w);
        let x_1547 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1545.x, x_1545.y, x_1547);
        let x_1555 : vec3<f32> = txVec14;
        let x_1557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1555.xy, x_1555.z);
        u_xlat74 = x_1557;
        let x_1558 : f32 = u_xlat74;
        let x_1560 : f32 = u_xlat19.y;
        u_xlat74 = (x_1558 * x_1560);
        let x_1563 : f32 = u_xlat19.x;
        let x_1564 : f32 = u_xlat72;
        let x_1566 : f32 = u_xlat74;
        u_xlat72 = ((x_1563 * x_1564) + x_1566);
        let x_1569 : vec2<f32> = u_xlat51;
        let x_1571 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1569.x, x_1569.y, x_1571);
        let x_1578 : vec3<f32> = txVec15;
        let x_1580 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1578.xy, x_1578.z);
        u_xlat51.x = x_1580;
        let x_1583 : f32 = u_xlat19.z;
        let x_1585 : f32 = u_xlat51.x;
        let x_1587 : f32 = u_xlat72;
        u_xlat72 = ((x_1583 * x_1585) + x_1587);
        let x_1590 : vec4<f32> = u_xlat17;
        let x_1591 : vec2<f32> = vec2<f32>(x_1590.x, x_1590.y);
        let x_1593 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1591.x, x_1591.y, x_1593);
        let x_1600 : vec3<f32> = txVec16;
        let x_1602 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1600.xy, x_1600.z);
        u_xlat51.x = x_1602;
        let x_1605 : f32 = u_xlat19.w;
        let x_1607 : f32 = u_xlat51.x;
        let x_1609 : f32 = u_xlat72;
        u_xlat72 = ((x_1605 * x_1607) + x_1609);
        let x_1612 : vec4<f32> = u_xlat15;
        let x_1613 : vec2<f32> = vec2<f32>(x_1612.x, x_1612.y);
        let x_1615 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1613.x, x_1613.y, x_1615);
        let x_1622 : vec3<f32> = txVec17;
        let x_1624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1622.xy, x_1622.z);
        u_xlat51.x = x_1624;
        let x_1627 : f32 = u_xlat20.x;
        let x_1629 : f32 = u_xlat51.x;
        let x_1631 : f32 = u_xlat72;
        u_xlat72 = ((x_1627 * x_1629) + x_1631);
        let x_1634 : vec4<f32> = u_xlat15;
        let x_1635 : vec2<f32> = vec2<f32>(x_1634.z, x_1634.w);
        let x_1637 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1635.x, x_1635.y, x_1637);
        let x_1644 : vec3<f32> = txVec18;
        let x_1646 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1644.xy, x_1644.z);
        u_xlat51.x = x_1646;
        let x_1649 : f32 = u_xlat20.y;
        let x_1651 : f32 = u_xlat51.x;
        let x_1653 : f32 = u_xlat72;
        u_xlat72 = ((x_1649 * x_1651) + x_1653);
        let x_1656 : vec4<f32> = u_xlat16;
        let x_1657 : vec2<f32> = vec2<f32>(x_1656.x, x_1656.y);
        let x_1659 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1657.x, x_1657.y, x_1659);
        let x_1666 : vec3<f32> = txVec19;
        let x_1668 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1666.xy, x_1666.z);
        u_xlat51.x = x_1668;
        let x_1671 : f32 = u_xlat20.z;
        let x_1673 : f32 = u_xlat51.x;
        let x_1675 : f32 = u_xlat72;
        u_xlat72 = ((x_1671 * x_1673) + x_1675);
        let x_1678 : vec4<f32> = u_xlat17;
        let x_1679 : vec2<f32> = vec2<f32>(x_1678.z, x_1678.w);
        let x_1681 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1679.x, x_1679.y, x_1681);
        let x_1688 : vec3<f32> = txVec20;
        let x_1690 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1688.xy, x_1688.z);
        u_xlat51.x = x_1690;
        let x_1693 : f32 = u_xlat20.w;
        let x_1695 : f32 = u_xlat51.x;
        let x_1697 : f32 = u_xlat72;
        u_xlat72 = ((x_1693 * x_1695) + x_1697);
        let x_1700 : vec4<f32> = u_xlat18;
        let x_1701 : vec2<f32> = vec2<f32>(x_1700.x, x_1700.y);
        let x_1703 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1701.x, x_1701.y, x_1703);
        let x_1710 : vec3<f32> = txVec21;
        let x_1712 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1710.xy, x_1710.z);
        u_xlat51.x = x_1712;
        let x_1715 : f32 = u_xlat21.x;
        let x_1717 : f32 = u_xlat51.x;
        let x_1719 : f32 = u_xlat72;
        u_xlat72 = ((x_1715 * x_1717) + x_1719);
        let x_1722 : vec4<f32> = u_xlat18;
        let x_1723 : vec2<f32> = vec2<f32>(x_1722.z, x_1722.w);
        let x_1725 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1723.x, x_1723.y, x_1725);
        let x_1732 : vec3<f32> = txVec22;
        let x_1734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1732.xy, x_1732.z);
        u_xlat51.x = x_1734;
        let x_1737 : f32 = u_xlat21.y;
        let x_1739 : f32 = u_xlat51.x;
        let x_1741 : f32 = u_xlat72;
        u_xlat72 = ((x_1737 * x_1739) + x_1741);
        let x_1744 : vec2<f32> = u_xlat32;
        let x_1746 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1744.x, x_1744.y, x_1746);
        let x_1753 : vec3<f32> = txVec23;
        let x_1755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1753.xy, x_1753.z);
        u_xlat51.x = x_1755;
        let x_1758 : f32 = u_xlat21.z;
        let x_1760 : f32 = u_xlat51.x;
        let x_1762 : f32 = u_xlat72;
        u_xlat72 = ((x_1758 * x_1760) + x_1762);
        let x_1765 : vec2<f32> = u_xlat60;
        let x_1767 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1765.x, x_1765.y, x_1767);
        let x_1774 : vec3<f32> = txVec24;
        let x_1776 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1774.xy, x_1774.z);
        u_xlat51.x = x_1776;
        let x_1779 : f32 = u_xlat21.w;
        let x_1781 : f32 = u_xlat51.x;
        let x_1783 : f32 = u_xlat72;
        u_xlat72 = ((x_1779 * x_1781) + x_1783);
        let x_1786 : vec4<f32> = u_xlat13;
        let x_1787 : vec2<f32> = vec2<f32>(x_1786.x, x_1786.y);
        let x_1789 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1787.x, x_1787.y, x_1789);
        let x_1796 : vec3<f32> = txVec25;
        let x_1798 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1796.xy, x_1796.z);
        u_xlat51.x = x_1798;
        let x_1801 : f32 = u_xlat9.x;
        let x_1803 : f32 = u_xlat51.x;
        let x_1805 : f32 = u_xlat72;
        u_xlat72 = ((x_1801 * x_1803) + x_1805);
        let x_1808 : vec4<f32> = u_xlat13;
        let x_1809 : vec2<f32> = vec2<f32>(x_1808.z, x_1808.w);
        let x_1811 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1809.x, x_1809.y, x_1811);
        let x_1818 : vec3<f32> = txVec26;
        let x_1820 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1818.xy, x_1818.z);
        u_xlat51.x = x_1820;
        let x_1823 : f32 = u_xlat9.y;
        let x_1825 : f32 = u_xlat51.x;
        let x_1827 : f32 = u_xlat72;
        u_xlat72 = ((x_1823 * x_1825) + x_1827);
        let x_1830 : vec2<f32> = u_xlat55;
        let x_1832 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1830.x, x_1830.y, x_1832);
        let x_1839 : vec3<f32> = txVec27;
        let x_1841 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1839.xy, x_1839.z);
        u_xlat51.x = x_1841;
        let x_1844 : f32 = u_xlat9.z;
        let x_1846 : f32 = u_xlat51.x;
        let x_1848 : f32 = u_xlat72;
        u_xlat72 = ((x_1844 * x_1846) + x_1848);
        let x_1851 : vec4<f32> = u_xlat7;
        let x_1852 : vec2<f32> = vec2<f32>(x_1851.x, x_1851.y);
        let x_1854 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1852.x, x_1852.y, x_1854);
        let x_1861 : vec3<f32> = txVec28;
        let x_1863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1861.xy, x_1861.z);
        u_xlat7.x = x_1863;
        let x_1866 : f32 = u_xlat9.w;
        let x_1868 : f32 = u_xlat7.x;
        let x_1870 : f32 = u_xlat72;
        u_xlat70 = ((x_1866 * x_1868) + x_1870);
      }
    }
  } else {
    let x_1874 : vec4<f32> = u_xlat4;
    let x_1875 : vec2<f32> = vec2<f32>(x_1874.x, x_1874.y);
    let x_1877 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1875.x, x_1875.y, x_1877);
    let x_1884 : vec3<f32> = txVec29;
    let x_1886 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1884.xy, x_1884.z);
    u_xlat70 = x_1886;
  }
  let x_1888 : f32 = x_319.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1888) + 1.0f);
  let x_1892 : f32 = u_xlat70;
  let x_1894 : f32 = x_319.x_MainLightShadowParams.x;
  let x_1897 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_1892 * x_1894) + x_1897);
  let x_1902 : f32 = u_xlat4.z;
  u_xlatb26 = (0.0f >= x_1902);
  let x_1906 : f32 = u_xlat4.z;
  u_xlatb48 = (x_1906 >= 1.0f);
  let x_1908 : bool = u_xlatb48;
  let x_1909 : bool = u_xlatb26;
  u_xlatb26 = (x_1908 | x_1909);
  let x_1911 : bool = u_xlatb26;
  if (x_1911) {
    x_1912 = 1.0f;
  } else {
    let x_1917 : f32 = u_xlat4.x;
    x_1912 = x_1917;
  }
  let x_1918 : f32 = x_1912;
  u_xlat4.x = x_1918;
  let x_1921 : vec3<f32> = vs_INTERP0;
  let x_1923 : vec3<f32> = x_45.x_WorldSpaceCameraPos;
  u_xlat26 = (x_1921 + -(x_1923));
  let x_1926 : vec3<f32> = u_xlat26;
  let x_1927 : vec3<f32> = u_xlat26;
  u_xlat26.x = dot(x_1926, x_1927);
  let x_1931 : f32 = u_xlat26.x;
  let x_1933 : f32 = x_319.x_MainLightShadowParams.z;
  let x_1936 : f32 = x_319.x_MainLightShadowParams.w;
  u_xlat26.x = ((x_1931 * x_1933) + x_1936);
  let x_1940 : f32 = u_xlat26.x;
  u_xlat26.x = clamp(x_1940, 0.0f, 1.0f);
  let x_1945 : f32 = u_xlat4.x;
  u_xlat48 = (-(x_1945) + 1.0f);
  let x_1949 : f32 = u_xlat26.x;
  let x_1950 : f32 = u_xlat48;
  let x_1953 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_1949 * x_1950) + x_1953);
  let x_1956 : f32 = u_xlat71;
  let x_1959 : vec4<f32> = x_45.x_MainLightColor;
  u_xlat26 = (vec3<f32>(x_1956, x_1956, x_1956) * vec3<f32>(x_1959.x, x_1959.y, x_1959.z));
  let x_1962 : vec3<f32> = u_xlat5;
  let x_1964 : vec4<f32> = u_xlat1;
  u_xlat72 = dot(-(x_1962), vec3<f32>(x_1964.x, x_1964.y, x_1964.w));
  let x_1967 : f32 = u_xlat72;
  let x_1968 : f32 = u_xlat72;
  u_xlat72 = (x_1967 + x_1968);
  let x_1970 : vec4<f32> = u_xlat1;
  let x_1972 : f32 = u_xlat72;
  let x_1976 : vec3<f32> = u_xlat5;
  let x_1978 : vec3<f32> = ((vec3<f32>(x_1970.x, x_1970.y, x_1970.w) * -(vec3<f32>(x_1972, x_1972, x_1972))) + -(x_1976));
  let x_1979 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1978.x, x_1978.y, x_1978.z, x_1979.w);
  let x_1981 : vec4<f32> = u_xlat1;
  let x_1983 : vec3<f32> = u_xlat5;
  u_xlat72 = dot(vec3<f32>(x_1981.x, x_1981.y, x_1981.w), x_1983);
  let x_1985 : f32 = u_xlat72;
  u_xlat72 = clamp(x_1985, 0.0f, 1.0f);
  let x_1987 : f32 = u_xlat72;
  u_xlat72 = (-(x_1987) + 1.0f);
  let x_1990 : f32 = u_xlat72;
  let x_1991 : f32 = u_xlat72;
  u_xlat72 = (x_1990 * x_1991);
  let x_1993 : f32 = u_xlat72;
  let x_1994 : f32 = u_xlat72;
  u_xlat72 = (x_1993 * x_1994);
  let x_1997 : f32 = u_xlat66;
  u_xlat73 = ((-(x_1997) * 0.699999988f) + 1.700000048f);
  let x_2003 : f32 = u_xlat66;
  let x_2004 : f32 = u_xlat73;
  u_xlat66 = (x_2003 * x_2004);
  let x_2006 : f32 = u_xlat66;
  u_xlat66 = (x_2006 * 6.0f);
  let x_2017 : vec4<f32> = u_xlat7;
  let x_2019 : f32 = u_xlat66;
  let x_2020 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2017.x, x_2017.y, x_2017.z), x_2019);
  u_xlat7 = x_2020;
  let x_2022 : f32 = u_xlat7.w;
  u_xlat66 = (x_2022 + -1.0f);
  let x_2025 : f32 = x_122.unity_SpecCube0_HDR.w;
  let x_2026 : f32 = u_xlat66;
  u_xlat66 = ((x_2025 * x_2026) + 1.0f);
  let x_2029 : f32 = u_xlat66;
  u_xlat66 = max(x_2029, 0.0f);
  let x_2031 : f32 = u_xlat66;
  u_xlat66 = log2(x_2031);
  let x_2033 : f32 = u_xlat66;
  let x_2035 : f32 = x_122.unity_SpecCube0_HDR.y;
  u_xlat66 = (x_2033 * x_2035);
  let x_2037 : f32 = u_xlat66;
  u_xlat66 = exp2(x_2037);
  let x_2039 : f32 = u_xlat66;
  let x_2041 : f32 = x_122.unity_SpecCube0_HDR.x;
  u_xlat66 = (x_2039 * x_2041);
  let x_2043 : vec4<f32> = u_xlat7;
  let x_2045 : f32 = u_xlat66;
  let x_2047 : vec3<f32> = (vec3<f32>(x_2043.x, x_2043.y, x_2043.z) * vec3<f32>(x_2045, x_2045, x_2045));
  let x_2048 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2047.x, x_2047.y, x_2047.z, x_2048.w);
  let x_2050 : vec3<f32> = u_xlat3;
  let x_2052 : vec3<f32> = u_xlat3;
  let x_2056 : vec2<f32> = ((vec2<f32>(x_2050.x, x_2050.x) * vec2<f32>(x_2052.x, x_2052.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2057 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2056.x, x_2056.y, x_2057.z, x_2057.w);
  let x_2060 : f32 = u_xlat9.y;
  u_xlat66 = (1.0f / x_2060);
  let x_2062 : vec3<f32> = u_xlat0;
  let x_2064 : f32 = u_xlat68;
  u_xlat31 = (-(x_2062) + vec3<f32>(x_2064, x_2064, x_2064));
  let x_2067 : f32 = u_xlat72;
  let x_2069 : vec3<f32> = u_xlat31;
  let x_2071 : vec3<f32> = u_xlat0;
  u_xlat31 = ((vec3<f32>(x_2067, x_2067, x_2067) * x_2069) + x_2071);
  let x_2073 : f32 = u_xlat66;
  let x_2075 : vec3<f32> = u_xlat31;
  u_xlat31 = (vec3<f32>(x_2073, x_2073, x_2073) * x_2075);
  let x_2077 : vec4<f32> = u_xlat7;
  let x_2079 : vec3<f32> = u_xlat31;
  let x_2080 : vec3<f32> = (vec3<f32>(x_2077.x, x_2077.y, x_2077.z) * x_2079);
  let x_2081 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2080.x, x_2080.y, x_2080.z, x_2081.w);
  let x_2083 : vec4<f32> = u_xlat6;
  let x_2085 : vec3<f32> = u_xlat8;
  let x_2087 : vec4<f32> = u_xlat7;
  let x_2089 : vec3<f32> = ((vec3<f32>(x_2083.x, x_2083.y, x_2083.z) * x_2085) + vec3<f32>(x_2087.x, x_2087.y, x_2087.z));
  let x_2090 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2089.x, x_2089.y, x_2089.z, x_2090.w);
  let x_2093 : f32 = u_xlat4.x;
  let x_2095 : f32 = x_122.unity_LightData.z;
  u_xlat66 = (x_2093 * x_2095);
  let x_2097 : vec4<f32> = u_xlat1;
  let x_2100 : vec4<f32> = x_45.x_MainLightPosition;
  u_xlat68 = dot(vec3<f32>(x_2097.x, x_2097.y, x_2097.w), vec3<f32>(x_2100.x, x_2100.y, x_2100.z));
  let x_2103 : f32 = u_xlat68;
  u_xlat68 = clamp(x_2103, 0.0f, 1.0f);
  let x_2105 : f32 = u_xlat66;
  let x_2106 : f32 = u_xlat68;
  u_xlat66 = (x_2105 * x_2106);
  let x_2108 : f32 = u_xlat66;
  let x_2110 : vec3<f32> = u_xlat26;
  let x_2111 : vec3<f32> = (vec3<f32>(x_2108, x_2108, x_2108) * x_2110);
  let x_2112 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2111.x, x_2111.y, x_2111.z, x_2112.w);
  let x_2114 : vec3<f32> = u_xlat5;
  let x_2116 : vec4<f32> = x_45.x_MainLightPosition;
  let x_2118 : vec3<f32> = (x_2114 + vec3<f32>(x_2116.x, x_2116.y, x_2116.z));
  let x_2119 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2118.x, x_2118.y, x_2118.z, x_2119.w);
  let x_2121 : vec4<f32> = u_xlat7;
  let x_2123 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(vec3<f32>(x_2121.x, x_2121.y, x_2121.z), vec3<f32>(x_2123.x, x_2123.y, x_2123.z));
  let x_2126 : f32 = u_xlat66;
  u_xlat66 = max(x_2126, 1.17549435e-37f);
  let x_2129 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_2129);
  let x_2131 : f32 = u_xlat66;
  let x_2133 : vec4<f32> = u_xlat7;
  let x_2135 : vec3<f32> = (vec3<f32>(x_2131, x_2131, x_2131) * vec3<f32>(x_2133.x, x_2133.y, x_2133.z));
  let x_2136 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2135.x, x_2135.y, x_2135.z, x_2136.w);
  let x_2138 : vec4<f32> = u_xlat1;
  let x_2140 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(vec3<f32>(x_2138.x, x_2138.y, x_2138.w), vec3<f32>(x_2140.x, x_2140.y, x_2140.z));
  let x_2143 : f32 = u_xlat66;
  u_xlat66 = clamp(x_2143, 0.0f, 1.0f);
  let x_2146 : vec4<f32> = x_45.x_MainLightPosition;
  let x_2148 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(vec3<f32>(x_2146.x, x_2146.y, x_2146.z), vec3<f32>(x_2148.x, x_2148.y, x_2148.z));
  let x_2151 : f32 = u_xlat68;
  u_xlat68 = clamp(x_2151, 0.0f, 1.0f);
  let x_2153 : f32 = u_xlat66;
  let x_2154 : f32 = u_xlat66;
  u_xlat66 = (x_2153 * x_2154);
  let x_2156 : f32 = u_xlat66;
  let x_2158 : f32 = u_xlat9.x;
  u_xlat66 = ((x_2156 * x_2158) + 1.000010014f);
  let x_2162 : f32 = u_xlat68;
  let x_2163 : f32 = u_xlat68;
  u_xlat68 = (x_2162 * x_2163);
  let x_2165 : f32 = u_xlat66;
  let x_2166 : f32 = u_xlat66;
  u_xlat66 = (x_2165 * x_2166);
  let x_2168 : f32 = u_xlat68;
  u_xlat68 = max(x_2168, 0.100000001f);
  let x_2171 : f32 = u_xlat66;
  let x_2172 : f32 = u_xlat68;
  u_xlat66 = (x_2171 * x_2172);
  let x_2174 : f32 = u_xlat69;
  let x_2175 : f32 = u_xlat66;
  u_xlat66 = (x_2174 * x_2175);
  let x_2177 : f32 = u_xlat25;
  let x_2178 : f32 = u_xlat66;
  u_xlat66 = (x_2177 / x_2178);
  let x_2180 : vec3<f32> = u_xlat0;
  let x_2181 : f32 = u_xlat66;
  let x_2184 : vec3<f32> = u_xlat8;
  let x_2185 : vec3<f32> = ((x_2180 * vec3<f32>(x_2181, x_2181, x_2181)) + x_2184);
  let x_2186 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2185.x, x_2185.y, x_2185.z, x_2186.w);
  let x_2188 : vec4<f32> = u_xlat4;
  let x_2190 : vec4<f32> = u_xlat7;
  let x_2192 : vec3<f32> = (vec3<f32>(x_2188.x, x_2188.y, x_2188.z) * vec3<f32>(x_2190.x, x_2190.y, x_2190.z));
  let x_2193 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2192.x, x_2192.y, x_2192.z, x_2193.w);
  let x_2196 : f32 = x_45.x_AdditionalLightsCount.x;
  let x_2198 : f32 = x_122.unity_LightData.y;
  u_xlat66 = min(x_2196, x_2198);
  let x_2200 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_2200));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2212 : u32 = u_xlatu_loop_1;
    let x_2213 : u32 = u_xlatu66;
    if ((x_2212 < x_2213)) {
    } else {
      break;
    }
    let x_2216 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_2216 >> 2u);
    let x_2219 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_2219 & 3u));
    let x_2222 : u32 = u_xlatu3;
    let x_2225 : vec4<f32> = x_122.unity_LightIndices[bitcast<i32>(x_2222)];
    let x_2235 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2240 : vec4<u32> = indexable[x_2235];
    u_xlat3.x = dot(x_2225, bitcast<vec4<f32>>(x_2240));
    let x_2246 : f32 = u_xlat3.x;
    u_xlati3 = i32(x_2246);
    let x_2248 : vec3<f32> = vs_INTERP0;
    let x_2260 : i32 = u_xlati3;
    let x_2262 : vec4<f32> = x_2259.x_AdditionalLightsPosition[x_2260];
    let x_2265 : i32 = u_xlati3;
    let x_2267 : vec4<f32> = x_2259.x_AdditionalLightsPosition[x_2265];
    u_xlat31 = ((-(x_2248) * vec3<f32>(x_2262.w, x_2262.w, x_2262.w)) + vec3<f32>(x_2267.x, x_2267.y, x_2267.z));
    let x_2270 : vec3<f32> = u_xlat31;
    let x_2271 : vec3<f32> = u_xlat31;
    u_xlat70 = dot(x_2270, x_2271);
    let x_2273 : f32 = u_xlat70;
    u_xlat70 = max(x_2273, 6.10351562e-05f);
    let x_2276 : f32 = u_xlat70;
    u_xlat72 = inverseSqrt(x_2276);
    let x_2278 : f32 = u_xlat72;
    let x_2280 : vec3<f32> = u_xlat31;
    let x_2281 : vec3<f32> = (vec3<f32>(x_2278, x_2278, x_2278) * x_2280);
    let x_2282 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2281.x, x_2281.y, x_2281.z, x_2282.w);
    let x_2284 : f32 = u_xlat70;
    u_xlat73 = (1.0f / x_2284);
    let x_2286 : f32 = u_xlat70;
    let x_2287 : i32 = u_xlati3;
    let x_2289 : f32 = x_2259.x_AdditionalLightsAttenuation[x_2287].x;
    u_xlat70 = (x_2286 * x_2289);
    let x_2291 : f32 = u_xlat70;
    let x_2293 : f32 = u_xlat70;
    u_xlat70 = ((-(x_2291) * x_2293) + 1.0f);
    let x_2296 : f32 = u_xlat70;
    u_xlat70 = max(x_2296, 0.0f);
    let x_2298 : f32 = u_xlat70;
    let x_2299 : f32 = u_xlat70;
    u_xlat70 = (x_2298 * x_2299);
    let x_2301 : f32 = u_xlat70;
    let x_2302 : f32 = u_xlat73;
    u_xlat70 = (x_2301 * x_2302);
    let x_2304 : i32 = u_xlati3;
    let x_2306 : vec4<f32> = x_2259.x_AdditionalLightsSpotDir[x_2304];
    let x_2308 : vec4<f32> = u_xlat10;
    u_xlat73 = dot(vec3<f32>(x_2306.x, x_2306.y, x_2306.z), vec3<f32>(x_2308.x, x_2308.y, x_2308.z));
    let x_2311 : f32 = u_xlat73;
    let x_2312 : i32 = u_xlati3;
    let x_2314 : f32 = x_2259.x_AdditionalLightsAttenuation[x_2312].z;
    let x_2316 : i32 = u_xlati3;
    let x_2318 : f32 = x_2259.x_AdditionalLightsAttenuation[x_2316].w;
    u_xlat73 = ((x_2311 * x_2314) + x_2318);
    let x_2320 : f32 = u_xlat73;
    u_xlat73 = clamp(x_2320, 0.0f, 1.0f);
    let x_2322 : f32 = u_xlat73;
    let x_2323 : f32 = u_xlat73;
    u_xlat73 = (x_2322 * x_2323);
    let x_2325 : f32 = u_xlat70;
    let x_2326 : f32 = u_xlat73;
    u_xlat70 = (x_2325 * x_2326);
    let x_2328 : f32 = u_xlat71;
    let x_2330 : i32 = u_xlati3;
    let x_2332 : vec4<f32> = x_2259.x_AdditionalLightsColor[x_2330];
    let x_2334 : vec3<f32> = (vec3<f32>(x_2328, x_2328, x_2328) * vec3<f32>(x_2332.x, x_2332.y, x_2332.z));
    let x_2335 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2334.x, x_2334.y, x_2334.z, x_2335.w);
    let x_2337 : vec4<f32> = u_xlat1;
    let x_2339 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_2337.x, x_2337.y, x_2337.w), vec3<f32>(x_2339.x, x_2339.y, x_2339.z));
    let x_2344 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_2344, 0.0f, 1.0f);
    let x_2348 : f32 = u_xlat3.x;
    let x_2349 : f32 = u_xlat70;
    u_xlat3.x = (x_2348 * x_2349);
    let x_2352 : vec3<f32> = u_xlat3;
    let x_2354 : vec4<f32> = u_xlat11;
    let x_2356 : vec3<f32> = (vec3<f32>(x_2352.x, x_2352.x, x_2352.x) * vec3<f32>(x_2354.x, x_2354.y, x_2354.z));
    let x_2357 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2356.x, x_2356.y, x_2356.z, x_2357.w);
    let x_2359 : vec3<f32> = u_xlat31;
    let x_2360 : f32 = u_xlat72;
    let x_2363 : vec3<f32> = u_xlat5;
    u_xlat31 = ((x_2359 * vec3<f32>(x_2360, x_2360, x_2360)) + x_2363);
    let x_2365 : vec3<f32> = u_xlat31;
    let x_2366 : vec3<f32> = u_xlat31;
    u_xlat3.x = dot(x_2365, x_2366);
    let x_2370 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_2370, 1.17549435e-37f);
    let x_2374 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_2374);
    let x_2377 : vec3<f32> = u_xlat3;
    let x_2379 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_2377.x, x_2377.x, x_2377.x) * x_2379);
    let x_2381 : vec4<f32> = u_xlat1;
    let x_2383 : vec3<f32> = u_xlat31;
    u_xlat3.x = dot(vec3<f32>(x_2381.x, x_2381.y, x_2381.w), x_2383);
    let x_2387 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_2387, 0.0f, 1.0f);
    let x_2390 : vec4<f32> = u_xlat10;
    let x_2392 : vec3<f32> = u_xlat31;
    u_xlat70 = dot(vec3<f32>(x_2390.x, x_2390.y, x_2390.z), x_2392);
    let x_2394 : f32 = u_xlat70;
    u_xlat70 = clamp(x_2394, 0.0f, 1.0f);
    let x_2397 : f32 = u_xlat3.x;
    let x_2399 : f32 = u_xlat3.x;
    u_xlat3.x = (x_2397 * x_2399);
    let x_2403 : f32 = u_xlat3.x;
    let x_2405 : f32 = u_xlat9.x;
    u_xlat3.x = ((x_2403 * x_2405) + 1.000010014f);
    let x_2409 : f32 = u_xlat70;
    let x_2410 : f32 = u_xlat70;
    u_xlat70 = (x_2409 * x_2410);
    let x_2413 : f32 = u_xlat3.x;
    let x_2415 : f32 = u_xlat3.x;
    u_xlat3.x = (x_2413 * x_2415);
    let x_2418 : f32 = u_xlat70;
    u_xlat70 = max(x_2418, 0.100000001f);
    let x_2421 : f32 = u_xlat3.x;
    let x_2422 : f32 = u_xlat70;
    u_xlat3.x = (x_2421 * x_2422);
    let x_2425 : f32 = u_xlat69;
    let x_2427 : f32 = u_xlat3.x;
    u_xlat3.x = (x_2425 * x_2427);
    let x_2430 : f32 = u_xlat25;
    let x_2432 : f32 = u_xlat3.x;
    u_xlat3.x = (x_2430 / x_2432);
    let x_2435 : vec3<f32> = u_xlat0;
    let x_2436 : vec3<f32> = u_xlat3;
    let x_2439 : vec3<f32> = u_xlat8;
    u_xlat31 = ((x_2435 * vec3<f32>(x_2436.x, x_2436.x, x_2436.x)) + x_2439);
    let x_2441 : vec3<f32> = u_xlat31;
    let x_2442 : vec4<f32> = u_xlat11;
    let x_2445 : vec4<f32> = u_xlat7;
    let x_2447 : vec3<f32> = ((x_2441 * vec3<f32>(x_2442.x, x_2442.y, x_2442.z)) + vec3<f32>(x_2445.x, x_2445.y, x_2445.z));
    let x_2448 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2447.x, x_2447.y, x_2447.z, x_2448.w);

    continuing {
      let x_2450 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2450 + bitcast<u32>(1i));
    }
  }
  let x_2452 : vec4<f32> = u_xlat6;
  let x_2454 : f32 = u_xlat47;
  let x_2457 : vec4<f32> = u_xlat4;
  u_xlat0 = ((vec3<f32>(x_2452.x, x_2452.y, x_2452.z) * vec3<f32>(x_2454, x_2454, x_2454)) + vec3<f32>(x_2457.x, x_2457.y, x_2457.z));
  let x_2460 : vec4<f32> = u_xlat7;
  let x_2462 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_2460.x, x_2460.y, x_2460.z) + x_2462);
  let x_2466 : vec3<f32> = u_xlat2;
  let x_2467 : f32 = u_xlat45;
  let x_2470 : vec3<f32> = u_xlat0;
  let x_2471 : vec3<f32> = ((x_2466 * vec3<f32>(x_2467, x_2467, x_2467)) + x_2470);
  let x_2472 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2471.x, x_2471.y, x_2471.z, x_2472.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

