struct x_Terrain {
  x_NormalScale0 : f32,
  x_NormalScale1 : f32,
  x_NormalScale2 : f32,
  x_NormalScale3 : f32,
  x_Metallic0 : f32,
  x_Metallic1 : f32,
  x_Metallic2 : f32,
  x_Metallic3 : f32,
  x_Smoothness0 : f32,
  x_Smoothness1 : f32,
  x_Smoothness2 : f32,
  x_Smoothness3 : f32,
  x_DiffuseRemapScale0 : vec4<f32>,
  x_DiffuseRemapScale1 : vec4<f32>,
  x_DiffuseRemapScale2 : vec4<f32>,
  x_DiffuseRemapScale3 : vec4<f32>,
  x_MaskMapRemapOffset0 : vec4<f32>,
  x_MaskMapRemapOffset1 : vec4<f32>,
  x_MaskMapRemapOffset2 : vec4<f32>,
  x_MaskMapRemapOffset3 : vec4<f32>,
  x_MaskMapRemapScale0 : vec4<f32>,
  x_MaskMapRemapScale1 : vec4<f32>,
  x_MaskMapRemapScale2 : vec4<f32>,
  x_MaskMapRemapScale3 : vec4<f32>,
  x_Control_ST : vec4<f32>,
  x_Control_TexelSize : vec4<f32>,
  x_DiffuseHasAlpha0 : f32,
  x_DiffuseHasAlpha1 : f32,
  x_DiffuseHasAlpha2 : f32,
  x_DiffuseHasAlpha3 : f32,
  x_LayerHasMask0 : f32,
  x_LayerHasMask1 : f32,
  x_LayerHasMask2 : f32,
  x_LayerHasMask3 : f32,
  x_Splat0_ST : vec4<f32>,
  x_Splat1_ST : vec4<f32>,
  x_Splat2_ST : vec4<f32>,
  x_Splat3_ST : vec4<f32>,
  x_HeightTransition : f32,
  x_NumLayersCount : f32,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(1) @binding(3) var<uniform> x_30 : x_Terrain;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(1) var x_Control : texture_2d<f32>;

@group(0) @binding(13) var sampler_Control : sampler;

@group(1) @binding(0) var<uniform> x_128 : PGlobals;

@group(0) @binding(2) var x_Splat0 : texture_2d<f32>;

@group(0) @binding(14) var sampler_Splat0 : sampler;

var<private> vs_TEXCOORD1 : vec4<f32>;

@group(0) @binding(3) var x_Splat1 : texture_2d<f32>;

@group(0) @binding(4) var x_Splat2 : texture_2d<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

@group(0) @binding(5) var x_Splat3 : texture_2d<f32>;

@group(0) @binding(6) var x_Normal0 : texture_2d<f32>;

@group(0) @binding(15) var sampler_Normal0 : sampler;

@group(0) @binding(7) var x_Normal1 : texture_2d<f32>;

@group(0) @binding(8) var x_Normal2 : texture_2d<f32>;

@group(0) @binding(9) var x_Normal3 : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_842 : MainLightShadows;

@group(1) @binding(2) var<uniform> x_1058 : UnityPerDraw;

@group(0) @binding(10) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(16) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(11) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(17) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(12) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2915 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb64 : bool;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat64 : f32;
  var u_xlat42 : f32;
  var u_xlat21 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu2 : u32;
  var u_xlati2 : i32;
  var u_xlat23 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat25 : f32;
  var u_xlat46 : f32;
  var u_xlatb4 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var x_2472 : f32;
  var u_xlat44 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu64 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati64 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_35 : vec4<f32> = x_30.x_MaskMapRemapScale0;
  let x_42 : vec4<f32> = x_30.x_MaskMapRemapOffset0;
  u_xlat0 = ((vec3<f32>(x_35.x, x_35.y, x_35.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_42.x, x_42.y, x_42.w));
  let x_48 : vec4<f32> = x_30.x_MaskMapRemapScale1;
  let x_53 : vec4<f32> = x_30.x_MaskMapRemapOffset1;
  let x_55 : vec3<f32> = ((vec3<f32>(x_48.x, x_48.y, x_48.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_53.x, x_53.y, x_53.w));
  let x_56 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_55.x, x_55.y, x_55.z, x_56.w);
  let x_61 : vec4<f32> = x_30.x_MaskMapRemapScale2;
  let x_66 : vec4<f32> = x_30.x_MaskMapRemapOffset2;
  let x_68 : vec3<f32> = ((vec3<f32>(x_61.x, x_61.y, x_61.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_66.x, x_66.y, x_66.w));
  let x_69 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_68.x, x_68.y, x_68.z, x_69.w);
  let x_74 : vec4<f32> = x_30.x_MaskMapRemapScale3;
  let x_79 : vec4<f32> = x_30.x_MaskMapRemapOffset3;
  let x_81 : vec3<f32> = ((vec3<f32>(x_74.x, x_74.w, x_74.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_79.x, x_79.w, x_79.y));
  let x_82 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_81.x, x_81.y, x_82.z, x_81.z);
  let x_88 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_92 : vec2<f32> = (vec2<f32>(x_88.z, x_88.w) + vec2<f32>(-1.0f, -1.0f));
  let x_93 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_92.x, x_92.y, x_93.z, x_93.w);
  let x_96 : vec4<f32> = vs_TEXCOORD0;
  let x_98 : vec4<f32> = u_xlat4;
  let x_102 : vec2<f32> = ((vec2<f32>(x_96.x, x_96.y) * vec2<f32>(x_98.x, x_98.y)) + vec2<f32>(0.5f, 0.5f));
  let x_103 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_102.x, x_102.y, x_103.z, x_103.w);
  let x_105 : vec4<f32> = u_xlat4;
  let x_108 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_110 : vec2<f32> = (vec2<f32>(x_105.x, x_105.y) * vec2<f32>(x_108.x, x_108.y));
  let x_111 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_110.x, x_110.y, x_111.z, x_111.w);
  let x_123 : vec4<f32> = u_xlat4;
  let x_133 : f32 = x_128.x_GlobalMipBias.x;
  let x_134 : vec4<f32> = textureSampleBias(x_Control, sampler_Control, vec2<f32>(x_123.x, x_123.y), x_133);
  u_xlat4 = x_134;
  let x_137 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_137, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_147 : vec4<f32> = vs_TEXCOORD1;
  let x_150 : f32 = x_128.x_GlobalMipBias.x;
  let x_151 : vec4<f32> = textureSampleBias(x_Splat0, sampler_Splat0, vec2<f32>(x_147.x, x_147.y), x_150);
  u_xlat5 = x_151;
  let x_157 : vec4<f32> = vs_TEXCOORD1;
  let x_160 : f32 = x_128.x_GlobalMipBias.x;
  let x_161 : vec4<f32> = textureSampleBias(x_Splat1, sampler_Splat0, vec2<f32>(x_157.z, x_157.w), x_160);
  u_xlat6 = x_161;
  let x_168 : vec4<f32> = vs_TEXCOORD2;
  let x_171 : f32 = x_128.x_GlobalMipBias.x;
  let x_172 : vec4<f32> = textureSampleBias(x_Splat2, sampler_Splat0, vec2<f32>(x_168.x, x_168.y), x_171);
  u_xlat7 = x_172;
  let x_178 : vec4<f32> = vs_TEXCOORD2;
  let x_181 : f32 = x_128.x_GlobalMipBias.x;
  let x_182 : vec4<f32> = textureSampleBias(x_Splat3, sampler_Splat0, vec2<f32>(x_178.z, x_178.w), x_181);
  u_xlat8 = x_182;
  let x_185 : f32 = u_xlat5.w;
  u_xlat9.x = x_185;
  let x_188 : f32 = u_xlat6.w;
  u_xlat9.y = x_188;
  let x_192 : f32 = u_xlat7.w;
  u_xlat9.z = x_192;
  let x_196 : f32 = u_xlat8.w;
  u_xlat9.w = x_196;
  let x_199 : vec4<f32> = u_xlat9;
  let x_202 : f32 = x_30.x_Smoothness0;
  let x_205 : f32 = x_30.x_Smoothness1;
  let x_208 : f32 = x_30.x_Smoothness2;
  let x_211 : f32 = x_30.x_Smoothness3;
  u_xlat10 = (x_199 * vec4<f32>(x_202, x_205, x_208, x_211));
  let x_220 : f32 = x_30.x_NumLayersCount;
  u_xlatb64 = (4.0f >= x_220);
  let x_223 : vec4<f32> = u_xlat4;
  u_xlat11 = (-(x_223) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_226 : vec4<f32> = u_xlat9;
  let x_227 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_226 + -(x_227));
  let x_230 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_230 * vec4<f32>(20.0f, 20.0f, 20.0f, 20.0f));
  let x_234 : vec4<f32> = u_xlat11;
  u_xlat11 = clamp(x_234, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_239 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat11;
  u_xlat11 = ((x_239 * vec4<f32>(0.001f, 0.001f, 0.001f, 0.001f)) + x_243);
  let x_246 : vec4<f32> = u_xlat4;
  let x_247 : vec4<f32> = u_xlat11;
  u_xlat12 = (x_246 + -(x_247));
  let x_252 : f32 = u_xlat12.x;
  let x_255 : f32 = x_30.x_DiffuseRemapScale0.w;
  u_xlat13.x = (x_252 * x_255);
  let x_259 : f32 = u_xlat12.y;
  let x_262 : f32 = x_30.x_DiffuseRemapScale1.w;
  u_xlat13.y = (x_259 * x_262);
  let x_266 : f32 = u_xlat12.z;
  let x_269 : f32 = x_30.x_DiffuseRemapScale2.w;
  u_xlat13.z = (x_266 * x_269);
  let x_273 : f32 = u_xlat12.w;
  let x_276 : f32 = x_30.x_DiffuseRemapScale3.w;
  u_xlat13.w = (x_273 * x_276);
  let x_279 : vec4<f32> = u_xlat11;
  let x_280 : vec4<f32> = u_xlat13;
  u_xlat11 = (x_279 + x_280);
  let x_282 : bool = u_xlatb64;
  let x_283 : vec4<f32> = u_xlat11;
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = select(x_284, x_283, vec4<bool>(x_282, x_282, x_282, x_282));
  let x_289 : vec4<f32> = u_xlat4;
  u_xlat64 = dot(x_289, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_291 : f32 = u_xlat64;
  u_xlat64 = (x_291 + 6.10351562e-05f);
  let x_294 : vec4<f32> = u_xlat4;
  let x_295 : f32 = u_xlat64;
  u_xlat4 = (x_294 / vec4<f32>(x_295, x_295, x_295, x_295));
  let x_298 : vec4<f32> = u_xlat4;
  let x_301 : vec4<f32> = x_30.x_DiffuseRemapScale0;
  let x_303 : vec3<f32> = (vec3<f32>(x_298.x, x_298.x, x_298.x) * vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_304 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_303.x, x_303.y, x_303.z, x_304.w);
  let x_306 : vec4<f32> = u_xlat4;
  let x_309 : vec4<f32> = x_30.x_DiffuseRemapScale1;
  let x_311 : vec3<f32> = (vec3<f32>(x_306.y, x_306.y, x_306.y) * vec3<f32>(x_309.x, x_309.y, x_309.z));
  let x_312 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_311.x, x_311.y, x_311.z, x_312.w);
  let x_314 : vec4<f32> = u_xlat6;
  let x_316 : vec4<f32> = u_xlat12;
  let x_318 : vec3<f32> = (vec3<f32>(x_314.x, x_314.y, x_314.z) * vec3<f32>(x_316.x, x_316.y, x_316.z));
  let x_319 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_318.x, x_318.y, x_318.z, x_319.w);
  let x_321 : vec4<f32> = u_xlat5;
  let x_323 : vec4<f32> = u_xlat11;
  let x_326 : vec4<f32> = u_xlat6;
  let x_328 : vec3<f32> = ((vec3<f32>(x_321.x, x_321.y, x_321.z) * vec3<f32>(x_323.x, x_323.y, x_323.z)) + vec3<f32>(x_326.x, x_326.y, x_326.z));
  let x_329 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_328.x, x_328.y, x_328.z, x_329.w);
  let x_331 : vec4<f32> = u_xlat4;
  let x_334 : vec4<f32> = x_30.x_DiffuseRemapScale2;
  let x_336 : vec3<f32> = (vec3<f32>(x_331.z, x_331.z, x_331.z) * vec3<f32>(x_334.x, x_334.y, x_334.z));
  let x_337 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_336.x, x_336.y, x_336.z, x_337.w);
  let x_339 : vec4<f32> = u_xlat7;
  let x_341 : vec4<f32> = u_xlat6;
  let x_344 : vec4<f32> = u_xlat5;
  let x_346 : vec3<f32> = ((vec3<f32>(x_339.x, x_339.y, x_339.z) * vec3<f32>(x_341.x, x_341.y, x_341.z)) + vec3<f32>(x_344.x, x_344.y, x_344.z));
  let x_347 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_346.x, x_346.y, x_346.z, x_347.w);
  let x_349 : vec4<f32> = u_xlat4;
  let x_352 : vec4<f32> = x_30.x_DiffuseRemapScale3;
  let x_354 : vec3<f32> = (vec3<f32>(x_349.w, x_349.w, x_349.w) * vec3<f32>(x_352.x, x_352.y, x_352.z));
  let x_355 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_354.x, x_354.y, x_354.z, x_355.w);
  let x_357 : vec4<f32> = u_xlat8;
  let x_359 : vec4<f32> = u_xlat6;
  let x_362 : vec4<f32> = u_xlat5;
  let x_364 : vec3<f32> = ((vec3<f32>(x_357.x, x_357.y, x_357.z) * vec3<f32>(x_359.x, x_359.y, x_359.z)) + vec3<f32>(x_362.x, x_362.y, x_362.z));
  let x_365 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_364.x, x_364.y, x_364.z, x_365.w);
  let x_372 : vec4<f32> = vs_TEXCOORD1;
  let x_375 : f32 = x_128.x_GlobalMipBias.x;
  let x_376 : vec4<f32> = textureSampleBias(x_Normal0, sampler_Normal0, vec2<f32>(x_372.x, x_372.y), x_375);
  let x_377 : vec3<f32> = vec3<f32>(x_376.x, x_376.y, x_376.w);
  let x_378 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_377.x, x_377.y, x_377.z, x_378.w);
  let x_381 : f32 = u_xlat6.x;
  let x_383 : f32 = u_xlat6.z;
  u_xlat6.x = (x_381 * x_383);
  let x_386 : vec4<f32> = u_xlat6;
  let x_391 : vec2<f32> = ((vec2<f32>(x_386.x, x_386.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_392 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_391.x, x_391.y, x_392.z, x_392.w);
  let x_394 : vec4<f32> = u_xlat6;
  let x_396 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_394.x, x_394.y), vec2<f32>(x_396.x, x_396.y));
  let x_399 : f32 = u_xlat64;
  u_xlat64 = min(x_399, 1.0f);
  let x_401 : f32 = u_xlat64;
  u_xlat64 = (-(x_401) + 1.0f);
  let x_404 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_404);
  let x_406 : f32 = u_xlat64;
  u_xlat7.z = max(x_406, 1.00000002e-16f);
  let x_410 : vec4<f32> = u_xlat6;
  let x_414 : f32 = x_30.x_NormalScale0;
  let x_416 : vec2<f32> = (vec2<f32>(x_410.x, x_410.y) * vec2<f32>(x_414, x_414));
  let x_417 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_416.x, x_416.y, x_417.z, x_417.w);
  let x_423 : vec4<f32> = vs_TEXCOORD1;
  let x_426 : f32 = x_128.x_GlobalMipBias.x;
  let x_427 : vec4<f32> = textureSampleBias(x_Normal1, sampler_Normal0, vec2<f32>(x_423.z, x_423.w), x_426);
  let x_428 : vec3<f32> = vec3<f32>(x_427.x, x_427.y, x_427.w);
  let x_429 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_428.x, x_428.y, x_428.z, x_429.w);
  let x_432 : f32 = u_xlat6.x;
  let x_434 : f32 = u_xlat6.z;
  u_xlat6.x = (x_432 * x_434);
  let x_437 : vec4<f32> = u_xlat6;
  let x_440 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_441.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat6;
  let x_445 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_443.x, x_443.y), vec2<f32>(x_445.x, x_445.y));
  let x_448 : f32 = u_xlat64;
  u_xlat64 = min(x_448, 1.0f);
  let x_450 : f32 = u_xlat64;
  u_xlat64 = (-(x_450) + 1.0f);
  let x_453 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_453);
  let x_455 : f32 = u_xlat64;
  u_xlat8.z = max(x_455, 1.00000002e-16f);
  let x_458 : vec4<f32> = u_xlat6;
  let x_461 : f32 = x_30.x_NormalScale1;
  let x_463 : f32 = x_30.x_NormalScale1;
  let x_464 : vec2<f32> = vec2<f32>(x_461, x_463);
  let x_468 : vec2<f32> = (vec2<f32>(x_458.x, x_458.y) * vec2<f32>(x_464.x, x_464.y));
  let x_469 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_469.z, x_469.w);
  let x_471 : vec4<f32> = u_xlat4;
  let x_473 : vec4<f32> = u_xlat8;
  let x_475 : vec3<f32> = (vec3<f32>(x_471.y, x_471.y, x_471.y) * vec3<f32>(x_473.x, x_473.y, x_473.z));
  let x_476 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_475.x, x_475.y, x_475.z, x_476.w);
  let x_478 : vec4<f32> = u_xlat4;
  let x_480 : vec4<f32> = u_xlat7;
  let x_483 : vec4<f32> = u_xlat6;
  let x_485 : vec3<f32> = ((vec3<f32>(x_478.x, x_478.x, x_478.x) * vec3<f32>(x_480.x, x_480.y, x_480.z)) + vec3<f32>(x_483.x, x_483.y, x_483.z));
  let x_486 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_485.x, x_485.y, x_485.z, x_486.w);
  let x_492 : vec4<f32> = vs_TEXCOORD2;
  let x_495 : f32 = x_128.x_GlobalMipBias.x;
  let x_496 : vec4<f32> = textureSampleBias(x_Normal2, sampler_Normal0, vec2<f32>(x_492.x, x_492.y), x_495);
  let x_497 : vec3<f32> = vec3<f32>(x_496.x, x_496.y, x_496.w);
  let x_498 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_497.x, x_497.y, x_497.z, x_498.w);
  let x_501 : f32 = u_xlat7.x;
  let x_503 : f32 = u_xlat7.z;
  u_xlat7.x = (x_501 * x_503);
  let x_506 : vec4<f32> = u_xlat7;
  let x_509 : vec2<f32> = ((vec2<f32>(x_506.x, x_506.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_510 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
  let x_512 : vec4<f32> = u_xlat7;
  let x_514 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_512.x, x_512.y), vec2<f32>(x_514.x, x_514.y));
  let x_517 : f32 = u_xlat64;
  u_xlat64 = min(x_517, 1.0f);
  let x_519 : f32 = u_xlat64;
  u_xlat64 = (-(x_519) + 1.0f);
  let x_522 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_522);
  let x_524 : f32 = u_xlat64;
  u_xlat8.z = max(x_524, 1.00000002e-16f);
  let x_527 : vec4<f32> = u_xlat7;
  let x_531 : f32 = x_30.x_NormalScale2;
  let x_533 : f32 = x_30.x_NormalScale2;
  let x_534 : vec2<f32> = vec2<f32>(x_531, x_533);
  let x_538 : vec2<f32> = (vec2<f32>(x_527.x, x_527.y) * vec2<f32>(x_534.x, x_534.y));
  let x_539 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_539.z, x_539.w);
  let x_541 : vec4<f32> = u_xlat4;
  let x_543 : vec4<f32> = u_xlat8;
  let x_546 : vec4<f32> = u_xlat6;
  let x_548 : vec3<f32> = ((vec3<f32>(x_541.z, x_541.z, x_541.z) * vec3<f32>(x_543.x, x_543.y, x_543.z)) + vec3<f32>(x_546.x, x_546.y, x_546.z));
  let x_549 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_548.x, x_548.y, x_548.z, x_549.w);
  let x_555 : vec4<f32> = vs_TEXCOORD2;
  let x_558 : f32 = x_128.x_GlobalMipBias.x;
  let x_559 : vec4<f32> = textureSampleBias(x_Normal3, sampler_Normal0, vec2<f32>(x_555.z, x_555.w), x_558);
  let x_560 : vec3<f32> = vec3<f32>(x_559.x, x_559.y, x_559.w);
  let x_561 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_560.x, x_560.y, x_560.z, x_561.w);
  let x_564 : f32 = u_xlat7.x;
  let x_566 : f32 = u_xlat7.z;
  u_xlat7.x = (x_564 * x_566);
  let x_569 : vec4<f32> = u_xlat7;
  let x_572 : vec2<f32> = ((vec2<f32>(x_569.x, x_569.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_573 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_572.x, x_572.y, x_573.z, x_573.w);
  let x_575 : vec4<f32> = u_xlat7;
  let x_577 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_575.x, x_575.y), vec2<f32>(x_577.x, x_577.y));
  let x_580 : f32 = u_xlat64;
  u_xlat64 = min(x_580, 1.0f);
  let x_582 : f32 = u_xlat64;
  u_xlat64 = (-(x_582) + 1.0f);
  let x_585 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_585);
  let x_587 : f32 = u_xlat64;
  u_xlat8.z = max(x_587, 1.00000002e-16f);
  let x_590 : vec4<f32> = u_xlat7;
  let x_594 : f32 = x_30.x_NormalScale3;
  let x_596 : f32 = x_30.x_NormalScale3;
  let x_597 : vec2<f32> = vec2<f32>(x_594, x_596);
  let x_601 : vec2<f32> = (vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_597.x, x_597.y));
  let x_602 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_601.x, x_601.y, x_602.z, x_602.w);
  let x_604 : vec4<f32> = u_xlat4;
  let x_606 : vec4<f32> = u_xlat8;
  let x_609 : vec4<f32> = u_xlat6;
  let x_611 : vec3<f32> = ((vec3<f32>(x_604.w, x_604.w, x_604.w) * vec3<f32>(x_606.x, x_606.y, x_606.z)) + vec3<f32>(x_609.x, x_609.y, x_609.z));
  let x_612 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_611.x, x_611.y, x_611.z, x_612.w);
  let x_615 : f32 = u_xlat6.z;
  u_xlat6.w = (x_615 + 0.00001f);
  let x_619 : vec4<f32> = u_xlat6;
  let x_621 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_619.x, x_619.y, x_619.w), vec3<f32>(x_621.x, x_621.y, x_621.w));
  let x_624 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_624);
  let x_626 : f32 = u_xlat64;
  let x_628 : vec4<f32> = u_xlat6;
  let x_630 : vec3<f32> = (vec3<f32>(x_626, x_626, x_626) * vec3<f32>(x_628.x, x_628.y, x_628.w));
  let x_631 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
  let x_634 : f32 = x_30.x_MaskMapRemapScale0.y;
  u_xlat7.x = x_634;
  let x_637 : f32 = x_30.x_MaskMapRemapScale1.y;
  u_xlat7.y = x_637;
  let x_640 : f32 = x_30.x_MaskMapRemapScale2.y;
  u_xlat7.z = x_640;
  let x_643 : f32 = x_30.x_MaskMapRemapScale3.y;
  u_xlat7.w = x_643;
  let x_646 : f32 = x_30.x_MaskMapRemapOffset0.y;
  u_xlat8.x = x_646;
  let x_649 : f32 = x_30.x_MaskMapRemapOffset1.y;
  u_xlat8.y = x_649;
  let x_652 : f32 = x_30.x_MaskMapRemapOffset2.y;
  u_xlat8.z = x_652;
  let x_655 : f32 = x_30.x_MaskMapRemapOffset3.y;
  u_xlat8.w = x_655;
  let x_657 : vec4<f32> = u_xlat7;
  let x_658 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_657 + x_658);
  let x_661 : f32 = u_xlat0.z;
  u_xlat8.x = x_661;
  let x_664 : f32 = u_xlat1.z;
  u_xlat8.y = x_664;
  let x_667 : f32 = u_xlat2.z;
  u_xlat8.z = x_667;
  let x_670 : f32 = u_xlat3.y;
  u_xlat8.w = x_670;
  let x_672 : vec4<f32> = u_xlat9;
  let x_675 : f32 = x_30.x_Smoothness0;
  let x_677 : f32 = x_30.x_Smoothness1;
  let x_679 : f32 = x_30.x_Smoothness2;
  let x_681 : f32 = x_30.x_Smoothness3;
  let x_684 : vec4<f32> = u_xlat8;
  u_xlat8 = ((-(x_672) * vec4<f32>(x_675, x_677, x_679, x_681)) + x_684);
  let x_688 : f32 = x_30.x_LayerHasMask0;
  let x_691 : f32 = x_30.x_LayerHasMask1;
  let x_694 : f32 = x_30.x_LayerHasMask2;
  let x_697 : f32 = x_30.x_LayerHasMask3;
  let x_699 : vec4<f32> = u_xlat8;
  let x_701 : vec4<f32> = u_xlat10;
  u_xlat8 = ((vec4<f32>(x_688, x_691, x_694, x_697) * x_699) + x_701);
  let x_704 : vec4<f32> = u_xlat4;
  let x_705 : vec4<f32> = u_xlat8;
  u_xlat42 = dot(x_704, x_705);
  let x_708 : f32 = u_xlat0.x;
  u_xlat8.x = x_708;
  let x_711 : f32 = u_xlat1.x;
  u_xlat8.y = x_711;
  let x_714 : f32 = u_xlat2.x;
  u_xlat8.z = x_714;
  let x_717 : f32 = u_xlat3.x;
  u_xlat8.w = x_717;
  let x_719 : vec4<f32> = u_xlat8;
  let x_722 : f32 = x_30.x_Metallic0;
  let x_725 : f32 = x_30.x_Metallic1;
  let x_728 : f32 = x_30.x_Metallic2;
  let x_731 : f32 = x_30.x_Metallic3;
  u_xlat8 = (x_719 + -(vec4<f32>(x_722, x_725, x_728, x_731)));
  let x_736 : f32 = x_30.x_LayerHasMask0;
  let x_738 : f32 = x_30.x_LayerHasMask1;
  let x_740 : f32 = x_30.x_LayerHasMask2;
  let x_742 : f32 = x_30.x_LayerHasMask3;
  let x_744 : vec4<f32> = u_xlat8;
  let x_747 : f32 = x_30.x_Metallic0;
  let x_749 : f32 = x_30.x_Metallic1;
  let x_751 : f32 = x_30.x_Metallic2;
  let x_753 : f32 = x_30.x_Metallic3;
  u_xlat8 = ((vec4<f32>(x_736, x_738, x_740, x_742) * x_744) + vec4<f32>(x_747, x_749, x_751, x_753));
  let x_756 : vec4<f32> = u_xlat4;
  let x_757 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_756, x_757);
  let x_761 : f32 = u_xlat0.y;
  u_xlat3.x = x_761;
  let x_764 : f32 = u_xlat1.y;
  u_xlat3.y = x_764;
  let x_767 : f32 = u_xlat2.y;
  u_xlat3.z = x_767;
  let x_769 : vec4<f32> = u_xlat7;
  let x_771 : vec4<f32> = u_xlat3;
  u_xlat1 = (-(x_769) + x_771);
  let x_774 : f32 = x_30.x_LayerHasMask0;
  let x_776 : f32 = x_30.x_LayerHasMask1;
  let x_778 : f32 = x_30.x_LayerHasMask2;
  let x_780 : f32 = x_30.x_LayerHasMask3;
  let x_782 : vec4<f32> = u_xlat1;
  let x_784 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec4<f32>(x_774, x_776, x_778, x_780) * x_782) + x_784);
  let x_787 : vec4<f32> = u_xlat4;
  let x_788 : vec4<f32> = u_xlat1;
  u_xlat21 = dot(x_787, x_788);
  let x_790 : vec4<f32> = u_xlat6;
  let x_793 : vec4<f32> = vs_TEXCOORD5;
  let x_795 : vec3<f32> = (vec3<f32>(x_790.y, x_790.y, x_790.y) * vec3<f32>(x_793.x, x_793.y, x_793.z));
  let x_796 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_795.x, x_795.y, x_795.z, x_796.w);
  let x_798 : vec4<f32> = u_xlat6;
  let x_801 : vec4<f32> = vs_TEXCOORD4;
  let x_805 : vec4<f32> = u_xlat1;
  let x_807 : vec3<f32> = ((vec3<f32>(x_798.x, x_798.x, x_798.x) * -(vec3<f32>(x_801.x, x_801.y, x_801.z))) + vec3<f32>(x_805.x, x_805.y, x_805.z));
  let x_808 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_807.x, x_807.y, x_807.z, x_808.w);
  let x_810 : vec4<f32> = u_xlat6;
  let x_813 : vec4<f32> = vs_TEXCOORD3;
  let x_816 : vec4<f32> = u_xlat1;
  let x_818 : vec3<f32> = ((vec3<f32>(x_810.z, x_810.z, x_810.z) * vec3<f32>(x_813.x, x_813.y, x_813.z)) + vec3<f32>(x_816.x, x_816.y, x_816.z));
  let x_819 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
  let x_821 : vec4<f32> = u_xlat1;
  let x_823 : vec4<f32> = u_xlat1;
  u_xlat64 = dot(vec3<f32>(x_821.x, x_821.y, x_821.z), vec3<f32>(x_823.x, x_823.y, x_823.z));
  let x_826 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_826);
  let x_828 : f32 = u_xlat64;
  let x_830 : vec4<f32> = u_xlat1;
  let x_832 : vec3<f32> = (vec3<f32>(x_828, x_828, x_828) * vec3<f32>(x_830.x, x_830.y, x_830.z));
  let x_833 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_832.x, x_832.y, x_832.z, x_833.w);
  let x_837 : vec3<f32> = vs_TEXCOORD7;
  let x_844 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres0;
  let x_847 : vec3<f32> = (x_837 + -(vec3<f32>(x_844.x, x_844.y, x_844.z)));
  let x_848 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
  let x_850 : vec3<f32> = vs_TEXCOORD7;
  let x_852 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres1;
  let x_855 : vec3<f32> = (x_850 + -(vec3<f32>(x_852.x, x_852.y, x_852.z)));
  let x_856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
  let x_858 : vec3<f32> = vs_TEXCOORD7;
  let x_860 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres2;
  let x_863 : vec3<f32> = (x_858 + -(vec3<f32>(x_860.x, x_860.y, x_860.z)));
  let x_864 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_863.x, x_863.y, x_863.z, x_864.w);
  let x_866 : vec3<f32> = vs_TEXCOORD7;
  let x_868 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres3;
  let x_871 : vec3<f32> = (x_866 + -(vec3<f32>(x_868.x, x_868.y, x_868.z)));
  let x_872 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_871.x, x_871.y, x_871.z, x_872.w);
  let x_874 : vec4<f32> = u_xlat2;
  let x_876 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_874.x, x_874.y, x_874.z), vec3<f32>(x_876.x, x_876.y, x_876.z));
  let x_880 : vec4<f32> = u_xlat3;
  let x_882 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_880.x, x_880.y, x_880.z), vec3<f32>(x_882.x, x_882.y, x_882.z));
  let x_886 : vec4<f32> = u_xlat4;
  let x_888 : vec4<f32> = u_xlat4;
  u_xlat2.z = dot(vec3<f32>(x_886.x, x_886.y, x_886.z), vec3<f32>(x_888.x, x_888.y, x_888.z));
  let x_892 : vec4<f32> = u_xlat6;
  let x_894 : vec4<f32> = u_xlat6;
  u_xlat2.w = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_900 : vec4<f32> = u_xlat2;
  let x_902 : vec4<f32> = x_842.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_900 < x_902);
  let x_905 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_905);
  let x_909 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_909);
  let x_913 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_913);
  let x_917 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_917);
  let x_921 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_921);
  let x_926 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_926);
  let x_930 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_930);
  let x_933 : vec4<f32> = u_xlat2;
  let x_935 : vec4<f32> = u_xlat3;
  let x_937 : vec3<f32> = (vec3<f32>(x_933.x, x_933.y, x_933.z) + vec3<f32>(x_935.y, x_935.z, x_935.w));
  let x_938 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_937.x, x_937.y, x_937.z, x_938.w);
  let x_940 : vec4<f32> = u_xlat2;
  let x_943 : vec3<f32> = max(vec3<f32>(x_940.x, x_940.y, x_940.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_944 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_944.x, x_943.x, x_943.y, x_943.z);
  let x_946 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_946, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_952 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_952) + 4.0f);
  let x_959 : f32 = u_xlat2.x;
  u_xlatu2 = u32(x_959);
  let x_963 : u32 = u_xlatu2;
  u_xlati2 = (bitcast<i32>(x_963) << bitcast<u32>(2i));
  let x_967 : vec3<f32> = vs_TEXCOORD7;
  let x_969 : i32 = u_xlati2;
  let x_972 : i32 = u_xlati2;
  let x_976 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_969 + 1i) / 4i)][((x_972 + 1i) % 4i)];
  u_xlat23 = (vec3<f32>(x_967.y, x_967.y, x_967.y) * vec3<f32>(x_976.x, x_976.y, x_976.z));
  let x_979 : i32 = u_xlati2;
  let x_981 : i32 = u_xlati2;
  let x_984 : vec4<f32> = x_842.x_MainLightWorldToShadow[(x_979 / 4i)][(x_981 % 4i)];
  let x_986 : vec3<f32> = vs_TEXCOORD7;
  let x_989 : vec3<f32> = u_xlat23;
  u_xlat23 = ((vec3<f32>(x_984.x, x_984.y, x_984.z) * vec3<f32>(x_986.x, x_986.x, x_986.x)) + x_989);
  let x_991 : i32 = u_xlati2;
  let x_994 : i32 = u_xlati2;
  let x_998 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_991 + 2i) / 4i)][((x_994 + 2i) % 4i)];
  let x_1000 : vec3<f32> = vs_TEXCOORD7;
  let x_1003 : vec3<f32> = u_xlat23;
  u_xlat23 = ((vec3<f32>(x_998.x, x_998.y, x_998.z) * vec3<f32>(x_1000.z, x_1000.z, x_1000.z)) + x_1003);
  let x_1005 : vec3<f32> = u_xlat23;
  let x_1006 : i32 = u_xlati2;
  let x_1009 : i32 = u_xlati2;
  let x_1013 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_1006 + 3i) / 4i)][((x_1009 + 3i) % 4i)];
  let x_1015 : vec3<f32> = (x_1005 + vec3<f32>(x_1013.x, x_1013.y, x_1013.z));
  let x_1016 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1015.x, x_1015.y, x_1015.z, x_1016.w);
  let x_1020 : f32 = vs_TEXCOORD7.y;
  let x_1022 : f32 = x_128.unity_MatrixV[1i].z;
  u_xlat65 = (x_1020 * x_1022);
  let x_1025 : f32 = x_128.unity_MatrixV[0i].z;
  let x_1027 : f32 = vs_TEXCOORD7.x;
  let x_1029 : f32 = u_xlat65;
  u_xlat65 = ((x_1025 * x_1027) + x_1029);
  let x_1032 : f32 = x_128.unity_MatrixV[2i].z;
  let x_1034 : f32 = vs_TEXCOORD7.z;
  let x_1036 : f32 = u_xlat65;
  u_xlat65 = ((x_1032 * x_1034) + x_1036);
  let x_1038 : f32 = u_xlat65;
  let x_1040 : f32 = x_128.unity_MatrixV[3i].z;
  u_xlat65 = (x_1038 + x_1040);
  let x_1042 : f32 = u_xlat65;
  let x_1045 : f32 = x_128.x_ProjectionParams.y;
  u_xlat65 = (-(x_1042) + -(x_1045));
  let x_1048 : f32 = u_xlat65;
  u_xlat65 = max(x_1048, 0.0f);
  let x_1050 : f32 = u_xlat65;
  let x_1052 : f32 = x_128.unity_FogParams.x;
  u_xlat65 = (x_1050 * x_1052);
  u_xlat1.w = 1.0f;
  let x_1060 : vec4<f32> = x_1058.unity_SHAr;
  let x_1061 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(x_1060, x_1061);
  let x_1065 : vec4<f32> = x_1058.unity_SHAg;
  let x_1066 : vec4<f32> = u_xlat1;
  u_xlat3.y = dot(x_1065, x_1066);
  let x_1070 : vec4<f32> = x_1058.unity_SHAb;
  let x_1071 : vec4<f32> = u_xlat1;
  u_xlat3.z = dot(x_1070, x_1071);
  let x_1074 : vec4<f32> = u_xlat1;
  let x_1076 : vec4<f32> = u_xlat1;
  u_xlat4 = (vec4<f32>(x_1074.y, x_1074.z, x_1074.z, x_1074.x) * vec4<f32>(x_1076.x, x_1076.y, x_1076.z, x_1076.z));
  let x_1080 : vec4<f32> = x_1058.unity_SHBr;
  let x_1081 : vec4<f32> = u_xlat4;
  u_xlat6.x = dot(x_1080, x_1081);
  let x_1085 : vec4<f32> = x_1058.unity_SHBg;
  let x_1086 : vec4<f32> = u_xlat4;
  u_xlat6.y = dot(x_1085, x_1086);
  let x_1090 : vec4<f32> = x_1058.unity_SHBb;
  let x_1091 : vec4<f32> = u_xlat4;
  u_xlat6.z = dot(x_1090, x_1091);
  let x_1095 : f32 = u_xlat1.y;
  let x_1097 : f32 = u_xlat1.y;
  u_xlat64 = (x_1095 * x_1097);
  let x_1100 : f32 = u_xlat1.x;
  let x_1102 : f32 = u_xlat1.x;
  let x_1104 : f32 = u_xlat64;
  u_xlat64 = ((x_1100 * x_1102) + -(x_1104));
  let x_1109 : vec4<f32> = x_1058.unity_SHC;
  let x_1111 : f32 = u_xlat64;
  let x_1114 : vec4<f32> = u_xlat6;
  let x_1116 : vec3<f32> = ((vec3<f32>(x_1109.x, x_1109.y, x_1109.z) * vec3<f32>(x_1111, x_1111, x_1111)) + vec3<f32>(x_1114.x, x_1114.y, x_1114.z));
  let x_1117 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1116.x, x_1116.y, x_1116.z, x_1117.w);
  let x_1119 : vec4<f32> = u_xlat3;
  let x_1121 : vec4<f32> = u_xlat4;
  let x_1123 : vec3<f32> = (vec3<f32>(x_1119.x, x_1119.y, x_1119.z) + vec3<f32>(x_1121.x, x_1121.y, x_1121.z));
  let x_1124 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1123.x, x_1123.y, x_1123.z, x_1124.w);
  let x_1126 : vec4<f32> = u_xlat3;
  let x_1128 : vec3<f32> = max(vec3<f32>(x_1126.x, x_1126.y, x_1126.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1129 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1128.x, x_1128.y, x_1128.z, x_1129.w);
  let x_1133 : vec4<f32> = x_128.x_ScaledScreenParams;
  let x_1134 : vec2<f32> = vec2<f32>(x_1133.x, x_1133.y);
  let x_1138 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1134.x, x_1134.y));
  let x_1139 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1138.x, x_1138.y, x_1139.z, x_1139.w);
  let x_1141 : vec4<f32> = u_xlat4;
  let x_1143 : vec4<f32> = hlslcc_FragCoord;
  let x_1145 : vec2<f32> = (vec2<f32>(x_1141.x, x_1141.y) * vec2<f32>(x_1143.x, x_1143.y));
  let x_1146 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1145.x, x_1145.y, x_1146.z, x_1146.w);
  let x_1149 : f32 = u_xlat4.y;
  let x_1151 : f32 = x_128.x_ScaleBiasRt.x;
  let x_1154 : f32 = x_128.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1149 * x_1151) + x_1154);
  let x_1156 : f32 = u_xlat64;
  u_xlat4.z = (-(x_1156) + 1.0f);
  let x_1161 : f32 = u_xlat0.x;
  u_xlat64 = ((-(x_1161) * 0.959999979f) + 0.959999979f);
  let x_1167 : f32 = u_xlat64;
  u_xlat66 = (-(x_1167) + 1.0f);
  let x_1170 : f32 = u_xlat64;
  let x_1172 : vec4<f32> = u_xlat5;
  let x_1174 : vec3<f32> = (vec3<f32>(x_1170, x_1170, x_1170) * vec3<f32>(x_1172.x, x_1172.y, x_1172.z));
  let x_1175 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1174.x, x_1174.y, x_1174.z, x_1175.w);
  let x_1177 : vec4<f32> = u_xlat5;
  let x_1181 : vec3<f32> = (vec3<f32>(x_1177.x, x_1177.y, x_1177.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_1182 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1181.x, x_1181.y, x_1181.z, x_1182.w);
  let x_1184 : vec3<f32> = u_xlat0;
  let x_1186 : vec4<f32> = u_xlat5;
  let x_1191 : vec3<f32> = ((vec3<f32>(x_1184.x, x_1184.x, x_1184.x) * vec3<f32>(x_1186.x, x_1186.y, x_1186.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_1192 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1191.x, x_1191.y, x_1191.z, x_1192.w);
  let x_1194 : f32 = u_xlat42;
  u_xlat0.x = (-(x_1194) + 1.0f);
  let x_1199 : f32 = u_xlat0.x;
  let x_1201 : f32 = u_xlat0.x;
  u_xlat64 = (x_1199 * x_1201);
  let x_1203 : f32 = u_xlat64;
  u_xlat64 = max(x_1203, 0.0078125f);
  let x_1207 : f32 = u_xlat64;
  let x_1208 : f32 = u_xlat64;
  u_xlat25 = (x_1207 * x_1208);
  let x_1210 : f32 = u_xlat42;
  let x_1211 : f32 = u_xlat66;
  u_xlat42 = (x_1210 + x_1211);
  let x_1213 : f32 = u_xlat42;
  u_xlat42 = clamp(x_1213, 0.0f, 1.0f);
  let x_1215 : f32 = u_xlat64;
  u_xlat66 = ((x_1215 * 4.0f) + 2.0f);
  let x_1223 : vec4<f32> = u_xlat4;
  let x_1226 : f32 = x_128.x_GlobalMipBias.x;
  let x_1227 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1223.x, x_1223.z), x_1226);
  u_xlat4.x = x_1227.x;
  let x_1232 : f32 = u_xlat4.x;
  u_xlat46 = (x_1232 + -1.0f);
  let x_1235 : f32 = x_128.x_AmbientOcclusionParam.w;
  let x_1236 : f32 = u_xlat46;
  u_xlat46 = ((x_1235 * x_1236) + 1.0f);
  let x_1239 : f32 = u_xlat21;
  let x_1241 : f32 = u_xlat4.x;
  u_xlat21 = min(x_1239, x_1241);
  let x_1245 : f32 = x_842.x_MainLightShadowParams.y;
  u_xlatb4 = (0.0f < x_1245);
  let x_1247 : bool = u_xlatb4;
  if (x_1247) {
    let x_1251 : f32 = x_842.x_MainLightShadowParams.y;
    u_xlatb4 = (x_1251 == 1.0f);
    let x_1253 : bool = u_xlatb4;
    if (x_1253) {
      let x_1256 : vec4<f32> = u_xlat2;
      let x_1259 : vec4<f32> = x_842.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1256.x, x_1256.y, x_1256.x, x_1256.y) + x_1259);
      let x_1262 : vec4<f32> = u_xlat7;
      let x_1263 : vec2<f32> = vec2<f32>(x_1262.x, x_1262.y);
      let x_1265 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_1263.x, x_1263.y, x_1265);
      let x_1277 : vec3<f32> = txVec0;
      let x_1279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1277.xy, x_1277.z);
      u_xlat8.x = x_1279;
      let x_1282 : vec4<f32> = u_xlat7;
      let x_1283 : vec2<f32> = vec2<f32>(x_1282.z, x_1282.w);
      let x_1285 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_1283.x, x_1283.y, x_1285);
      let x_1292 : vec3<f32> = txVec1;
      let x_1294 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1292.xy, x_1292.z);
      u_xlat8.y = x_1294;
      let x_1296 : vec4<f32> = u_xlat2;
      let x_1299 : vec4<f32> = x_842.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1296.x, x_1296.y, x_1296.x, x_1296.y) + x_1299);
      let x_1302 : vec4<f32> = u_xlat7;
      let x_1303 : vec2<f32> = vec2<f32>(x_1302.x, x_1302.y);
      let x_1305 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
      let x_1312 : vec3<f32> = txVec2;
      let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
      u_xlat8.z = x_1314;
      let x_1317 : vec4<f32> = u_xlat7;
      let x_1318 : vec2<f32> = vec2<f32>(x_1317.z, x_1317.w);
      let x_1320 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_1318.x, x_1318.y, x_1320);
      let x_1327 : vec3<f32> = txVec3;
      let x_1329 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1327.xy, x_1327.z);
      u_xlat8.w = x_1329;
      let x_1331 : vec4<f32> = u_xlat8;
      u_xlat4.x = dot(x_1331, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1339 : f32 = x_842.x_MainLightShadowParams.y;
      u_xlatb67 = (x_1339 == 2.0f);
      let x_1341 : bool = u_xlatb67;
      if (x_1341) {
        let x_1344 : vec4<f32> = u_xlat2;
        let x_1347 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1350 : vec2<f32> = ((vec2<f32>(x_1344.x, x_1344.y) * vec2<f32>(x_1347.z, x_1347.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1351 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1350.x, x_1350.y, x_1351.z, x_1351.w);
        let x_1353 : vec4<f32> = u_xlat7;
        let x_1355 : vec2<f32> = floor(vec2<f32>(x_1353.x, x_1353.y));
        let x_1356 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1355.x, x_1355.y, x_1356.z, x_1356.w);
        let x_1360 : vec4<f32> = u_xlat2;
        let x_1363 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1366 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1360.x, x_1360.y) * vec2<f32>(x_1363.z, x_1363.w)) + -(vec2<f32>(x_1366.x, x_1366.y)));
        let x_1370 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1370.x, x_1370.x, x_1370.y, x_1370.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1374 : vec4<f32> = u_xlat8;
        let x_1376 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1374.x, x_1374.x, x_1374.z, x_1374.z) * vec4<f32>(x_1376.x, x_1376.x, x_1376.z, x_1376.z));
        let x_1379 : vec4<f32> = u_xlat9;
        let x_1383 : vec2<f32> = (vec2<f32>(x_1379.y, x_1379.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1384 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1383.x, x_1384.y, x_1383.y, x_1384.w);
        let x_1386 : vec4<f32> = u_xlat9;
        let x_1389 : vec2<f32> = u_xlat49;
        let x_1391 : vec2<f32> = ((vec2<f32>(x_1386.x, x_1386.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1389));
        let x_1392 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1391.x, x_1391.y, x_1392.z, x_1392.w);
        let x_1395 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_1395) + vec2<f32>(1.0f, 1.0f));
        let x_1398 : vec2<f32> = u_xlat49;
        let x_1400 : vec2<f32> = min(x_1398, vec2<f32>(0.0f, 0.0f));
        let x_1401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1400.x, x_1400.y, x_1401.z, x_1401.w);
        let x_1403 : vec4<f32> = u_xlat10;
        let x_1406 : vec4<f32> = u_xlat10;
        let x_1409 : vec2<f32> = u_xlat51;
        let x_1410 : vec2<f32> = ((-(vec2<f32>(x_1403.x, x_1403.y)) * vec2<f32>(x_1406.x, x_1406.y)) + x_1409);
        let x_1411 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1410.x, x_1410.y, x_1411.z, x_1411.w);
        let x_1413 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_1413, vec2<f32>(0.0f, 0.0f));
        let x_1415 : vec2<f32> = u_xlat49;
        let x_1417 : vec2<f32> = u_xlat49;
        let x_1419 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_1415) * x_1417) + vec2<f32>(x_1419.y, x_1419.w));
        let x_1422 : vec4<f32> = u_xlat10;
        let x_1424 : vec2<f32> = (vec2<f32>(x_1422.x, x_1422.y) + vec2<f32>(1.0f, 1.0f));
        let x_1425 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1424.x, x_1424.y, x_1425.z, x_1425.w);
        let x_1427 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_1427 + vec2<f32>(1.0f, 1.0f));
        let x_1429 : vec4<f32> = u_xlat9;
        let x_1433 : vec2<f32> = (vec2<f32>(x_1429.x, x_1429.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1434 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1433.x, x_1433.y, x_1434.z, x_1434.w);
        let x_1436 : vec2<f32> = u_xlat51;
        let x_1437 : vec2<f32> = (x_1436 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1438 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1437.x, x_1437.y, x_1438.z, x_1438.w);
        let x_1440 : vec4<f32> = u_xlat10;
        let x_1442 : vec2<f32> = (vec2<f32>(x_1440.x, x_1440.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1443 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1442.x, x_1442.y, x_1443.z, x_1443.w);
        let x_1445 : vec2<f32> = u_xlat49;
        let x_1446 : vec2<f32> = (x_1445 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1447 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1446.x, x_1446.y, x_1447.z, x_1447.w);
        let x_1449 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1449.y, x_1449.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1453 : f32 = u_xlat10.x;
        u_xlat11.z = x_1453;
        let x_1456 : f32 = u_xlat49.x;
        u_xlat11.w = x_1456;
        let x_1459 : f32 = u_xlat12.x;
        u_xlat9.z = x_1459;
        let x_1462 : f32 = u_xlat8.x;
        u_xlat9.w = x_1462;
        let x_1464 : vec4<f32> = u_xlat9;
        let x_1466 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1464.z, x_1464.w, x_1464.x, x_1464.z) + vec4<f32>(x_1466.z, x_1466.w, x_1466.x, x_1466.z));
        let x_1470 : f32 = u_xlat11.y;
        u_xlat10.z = x_1470;
        let x_1473 : f32 = u_xlat49.y;
        u_xlat10.w = x_1473;
        let x_1476 : f32 = u_xlat9.y;
        u_xlat12.z = x_1476;
        let x_1479 : f32 = u_xlat8.z;
        u_xlat12.w = x_1479;
        let x_1481 : vec4<f32> = u_xlat10;
        let x_1483 : vec4<f32> = u_xlat12;
        let x_1485 : vec3<f32> = (vec3<f32>(x_1481.z, x_1481.y, x_1481.w) + vec3<f32>(x_1483.z, x_1483.y, x_1483.w));
        let x_1486 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1485.x, x_1485.y, x_1485.z, x_1486.w);
        let x_1488 : vec4<f32> = u_xlat9;
        let x_1490 : vec4<f32> = u_xlat13;
        let x_1492 : vec3<f32> = (vec3<f32>(x_1488.x, x_1488.z, x_1488.w) / vec3<f32>(x_1490.z, x_1490.w, x_1490.y));
        let x_1493 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1492.x, x_1492.y, x_1492.z, x_1493.w);
        let x_1495 : vec4<f32> = u_xlat9;
        let x_1501 : vec3<f32> = (vec3<f32>(x_1495.x, x_1495.y, x_1495.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1502 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1501.x, x_1501.y, x_1501.z, x_1502.w);
        let x_1504 : vec4<f32> = u_xlat12;
        let x_1506 : vec4<f32> = u_xlat8;
        let x_1508 : vec3<f32> = (vec3<f32>(x_1504.z, x_1504.y, x_1504.w) / vec3<f32>(x_1506.x, x_1506.y, x_1506.z));
        let x_1509 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1508.x, x_1508.y, x_1508.z, x_1509.w);
        let x_1511 : vec4<f32> = u_xlat10;
        let x_1513 : vec3<f32> = (vec3<f32>(x_1511.x, x_1511.y, x_1511.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1514 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1513.x, x_1513.y, x_1513.z, x_1514.w);
        let x_1516 : vec4<f32> = u_xlat9;
        let x_1519 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1521 : vec3<f32> = (vec3<f32>(x_1516.y, x_1516.x, x_1516.z) * vec3<f32>(x_1519.x, x_1519.x, x_1519.x));
        let x_1522 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1521.x, x_1521.y, x_1521.z, x_1522.w);
        let x_1524 : vec4<f32> = u_xlat10;
        let x_1527 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1529 : vec3<f32> = (vec3<f32>(x_1524.x, x_1524.y, x_1524.z) * vec3<f32>(x_1527.y, x_1527.y, x_1527.y));
        let x_1530 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1529.x, x_1529.y, x_1529.z, x_1530.w);
        let x_1533 : f32 = u_xlat10.x;
        u_xlat9.w = x_1533;
        let x_1535 : vec4<f32> = u_xlat7;
        let x_1538 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1541 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1535.x, x_1535.y, x_1535.x, x_1535.y) * vec4<f32>(x_1538.x, x_1538.y, x_1538.x, x_1538.y)) + vec4<f32>(x_1541.y, x_1541.w, x_1541.x, x_1541.w));
        let x_1544 : vec4<f32> = u_xlat7;
        let x_1547 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1550 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1544.x, x_1544.y) * vec2<f32>(x_1547.x, x_1547.y)) + vec2<f32>(x_1550.z, x_1550.w));
        let x_1554 : f32 = u_xlat9.y;
        u_xlat10.w = x_1554;
        let x_1556 : vec4<f32> = u_xlat10;
        let x_1557 : vec2<f32> = vec2<f32>(x_1556.y, x_1556.z);
        let x_1558 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1558.x, x_1557.x, x_1558.z, x_1557.y);
        let x_1560 : vec4<f32> = u_xlat7;
        let x_1563 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1566 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1560.x, x_1560.y, x_1560.x, x_1560.y) * vec4<f32>(x_1563.x, x_1563.y, x_1563.x, x_1563.y)) + vec4<f32>(x_1566.x, x_1566.y, x_1566.z, x_1566.y));
        let x_1569 : vec4<f32> = u_xlat7;
        let x_1572 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1575 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1569.x, x_1569.y, x_1569.x, x_1569.y) * vec4<f32>(x_1572.x, x_1572.y, x_1572.x, x_1572.y)) + vec4<f32>(x_1575.w, x_1575.y, x_1575.w, x_1575.z));
        let x_1578 : vec4<f32> = u_xlat7;
        let x_1581 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1584 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1578.x, x_1578.y, x_1578.x, x_1578.y) * vec4<f32>(x_1581.x, x_1581.y, x_1581.x, x_1581.y)) + vec4<f32>(x_1584.x, x_1584.w, x_1584.z, x_1584.w));
        let x_1588 : vec4<f32> = u_xlat8;
        let x_1590 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1588.x, x_1588.x, x_1588.x, x_1588.y) * vec4<f32>(x_1590.z, x_1590.w, x_1590.y, x_1590.z));
        let x_1594 : vec4<f32> = u_xlat8;
        let x_1596 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1594.y, x_1594.y, x_1594.z, x_1594.z) * x_1596);
        let x_1600 : f32 = u_xlat8.z;
        let x_1602 : f32 = u_xlat13.y;
        u_xlat67 = (x_1600 * x_1602);
        let x_1605 : vec4<f32> = u_xlat11;
        let x_1606 : vec2<f32> = vec2<f32>(x_1605.x, x_1605.y);
        let x_1608 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_1606.x, x_1606.y, x_1608);
        let x_1616 : vec3<f32> = txVec4;
        let x_1618 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1616.xy, x_1616.z);
        u_xlat68 = x_1618;
        let x_1620 : vec4<f32> = u_xlat11;
        let x_1621 : vec2<f32> = vec2<f32>(x_1620.z, x_1620.w);
        let x_1623 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1631 : vec3<f32> = txVec5;
        let x_1633 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1631.xy, x_1631.z);
        u_xlat69 = x_1633;
        let x_1634 : f32 = u_xlat69;
        let x_1636 : f32 = u_xlat14.y;
        u_xlat69 = (x_1634 * x_1636);
        let x_1639 : f32 = u_xlat14.x;
        let x_1640 : f32 = u_xlat68;
        let x_1642 : f32 = u_xlat69;
        u_xlat68 = ((x_1639 * x_1640) + x_1642);
        let x_1645 : vec2<f32> = u_xlat49;
        let x_1647 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1645.x, x_1645.y, x_1647);
        let x_1654 : vec3<f32> = txVec6;
        let x_1656 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1654.xy, x_1654.z);
        u_xlat69 = x_1656;
        let x_1658 : f32 = u_xlat14.z;
        let x_1659 : f32 = u_xlat69;
        let x_1661 : f32 = u_xlat68;
        u_xlat68 = ((x_1658 * x_1659) + x_1661);
        let x_1664 : vec4<f32> = u_xlat10;
        let x_1665 : vec2<f32> = vec2<f32>(x_1664.x, x_1664.y);
        let x_1667 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1665.x, x_1665.y, x_1667);
        let x_1674 : vec3<f32> = txVec7;
        let x_1676 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1674.xy, x_1674.z);
        u_xlat69 = x_1676;
        let x_1678 : f32 = u_xlat14.w;
        let x_1679 : f32 = u_xlat69;
        let x_1681 : f32 = u_xlat68;
        u_xlat68 = ((x_1678 * x_1679) + x_1681);
        let x_1684 : vec4<f32> = u_xlat12;
        let x_1685 : vec2<f32> = vec2<f32>(x_1684.x, x_1684.y);
        let x_1687 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1685.x, x_1685.y, x_1687);
        let x_1694 : vec3<f32> = txVec8;
        let x_1696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1694.xy, x_1694.z);
        u_xlat69 = x_1696;
        let x_1698 : f32 = u_xlat15.x;
        let x_1699 : f32 = u_xlat69;
        let x_1701 : f32 = u_xlat68;
        u_xlat68 = ((x_1698 * x_1699) + x_1701);
        let x_1704 : vec4<f32> = u_xlat12;
        let x_1705 : vec2<f32> = vec2<f32>(x_1704.z, x_1704.w);
        let x_1707 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1705.x, x_1705.y, x_1707);
        let x_1714 : vec3<f32> = txVec9;
        let x_1716 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1714.xy, x_1714.z);
        u_xlat69 = x_1716;
        let x_1718 : f32 = u_xlat15.y;
        let x_1719 : f32 = u_xlat69;
        let x_1721 : f32 = u_xlat68;
        u_xlat68 = ((x_1718 * x_1719) + x_1721);
        let x_1724 : vec4<f32> = u_xlat10;
        let x_1725 : vec2<f32> = vec2<f32>(x_1724.z, x_1724.w);
        let x_1727 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1725.x, x_1725.y, x_1727);
        let x_1734 : vec3<f32> = txVec10;
        let x_1736 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1734.xy, x_1734.z);
        u_xlat69 = x_1736;
        let x_1738 : f32 = u_xlat15.z;
        let x_1739 : f32 = u_xlat69;
        let x_1741 : f32 = u_xlat68;
        u_xlat68 = ((x_1738 * x_1739) + x_1741);
        let x_1744 : vec4<f32> = u_xlat9;
        let x_1745 : vec2<f32> = vec2<f32>(x_1744.x, x_1744.y);
        let x_1747 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1745.x, x_1745.y, x_1747);
        let x_1754 : vec3<f32> = txVec11;
        let x_1756 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1754.xy, x_1754.z);
        u_xlat69 = x_1756;
        let x_1758 : f32 = u_xlat15.w;
        let x_1759 : f32 = u_xlat69;
        let x_1761 : f32 = u_xlat68;
        u_xlat68 = ((x_1758 * x_1759) + x_1761);
        let x_1764 : vec4<f32> = u_xlat9;
        let x_1765 : vec2<f32> = vec2<f32>(x_1764.z, x_1764.w);
        let x_1767 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1765.x, x_1765.y, x_1767);
        let x_1774 : vec3<f32> = txVec12;
        let x_1776 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1774.xy, x_1774.z);
        u_xlat69 = x_1776;
        let x_1777 : f32 = u_xlat67;
        let x_1778 : f32 = u_xlat69;
        let x_1780 : f32 = u_xlat68;
        u_xlat4.x = ((x_1777 * x_1778) + x_1780);
      } else {
        let x_1784 : vec4<f32> = u_xlat2;
        let x_1787 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1790 : vec2<f32> = ((vec2<f32>(x_1784.x, x_1784.y) * vec2<f32>(x_1787.z, x_1787.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1791 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1790.x, x_1790.y, x_1791.z, x_1791.w);
        let x_1793 : vec4<f32> = u_xlat7;
        let x_1795 : vec2<f32> = floor(vec2<f32>(x_1793.x, x_1793.y));
        let x_1796 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1795.x, x_1795.y, x_1796.z, x_1796.w);
        let x_1798 : vec4<f32> = u_xlat2;
        let x_1801 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1804 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1798.x, x_1798.y) * vec2<f32>(x_1801.z, x_1801.w)) + -(vec2<f32>(x_1804.x, x_1804.y)));
        let x_1808 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_1808.x, x_1808.x, x_1808.y, x_1808.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1811 : vec4<f32> = u_xlat8;
        let x_1813 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1811.x, x_1811.x, x_1811.z, x_1811.z) * vec4<f32>(x_1813.x, x_1813.x, x_1813.z, x_1813.z));
        let x_1816 : vec4<f32> = u_xlat9;
        let x_1820 : vec2<f32> = (vec2<f32>(x_1816.y, x_1816.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1821 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1821.x, x_1820.x, x_1821.z, x_1820.y);
        let x_1823 : vec4<f32> = u_xlat9;
        let x_1826 : vec2<f32> = u_xlat49;
        let x_1828 : vec2<f32> = ((vec2<f32>(x_1823.x, x_1823.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1826));
        let x_1829 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1828.x, x_1829.y, x_1828.y, x_1829.w);
        let x_1831 : vec2<f32> = u_xlat49;
        let x_1833 : vec2<f32> = (-(x_1831) + vec2<f32>(1.0f, 1.0f));
        let x_1834 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1833.x, x_1833.y, x_1834.z, x_1834.w);
        let x_1836 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_1836, vec2<f32>(0.0f, 0.0f));
        let x_1838 : vec2<f32> = u_xlat51;
        let x_1840 : vec2<f32> = u_xlat51;
        let x_1842 : vec4<f32> = u_xlat9;
        let x_1844 : vec2<f32> = ((-(x_1838) * x_1840) + vec2<f32>(x_1842.x, x_1842.y));
        let x_1845 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1844.x, x_1844.y, x_1845.z, x_1845.w);
        let x_1847 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_1847, vec2<f32>(0.0f, 0.0f));
        let x_1850 : vec2<f32> = u_xlat51;
        let x_1852 : vec2<f32> = u_xlat51;
        let x_1854 : vec4<f32> = u_xlat8;
        let x_1856 : vec2<f32> = ((-(x_1850) * x_1852) + vec2<f32>(x_1854.y, x_1854.w));
        let x_1857 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1856.x, x_1857.y, x_1856.y);
        let x_1859 : vec4<f32> = u_xlat9;
        let x_1861 : vec2<f32> = (vec2<f32>(x_1859.x, x_1859.y) + vec2<f32>(2.0f, 2.0f));
        let x_1862 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1861.x, x_1861.y, x_1862.z, x_1862.w);
        let x_1864 : vec3<f32> = u_xlat29;
        let x_1866 : vec2<f32> = (vec2<f32>(x_1864.x, x_1864.z) + vec2<f32>(2.0f, 2.0f));
        let x_1867 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1867.x, x_1866.x, x_1867.z, x_1866.y);
        let x_1870 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1870 * 0.081632003f);
        let x_1874 : vec4<f32> = u_xlat8;
        let x_1877 : vec3<f32> = (vec3<f32>(x_1874.z, x_1874.x, x_1874.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1878 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1877.x, x_1877.y, x_1877.z, x_1878.w);
        let x_1880 : vec4<f32> = u_xlat9;
        let x_1883 : vec2<f32> = (vec2<f32>(x_1880.x, x_1880.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1884 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1883.x, x_1883.y, x_1884.z, x_1884.w);
        let x_1887 : f32 = u_xlat12.y;
        u_xlat11.x = x_1887;
        let x_1889 : vec2<f32> = u_xlat49;
        let x_1896 : vec2<f32> = ((vec2<f32>(x_1889.x, x_1889.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1897 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1897.x, x_1896.x, x_1897.z, x_1896.y);
        let x_1899 : vec2<f32> = u_xlat49;
        let x_1903 : vec2<f32> = ((vec2<f32>(x_1899.x, x_1899.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1904 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1903.x, x_1904.y, x_1903.y, x_1904.w);
        let x_1907 : f32 = u_xlat8.x;
        u_xlat9.y = x_1907;
        let x_1910 : f32 = u_xlat10.y;
        u_xlat9.w = x_1910;
        let x_1912 : vec4<f32> = u_xlat9;
        let x_1913 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1912 + x_1913);
        let x_1915 : vec2<f32> = u_xlat49;
        let x_1918 : vec2<f32> = ((vec2<f32>(x_1915.y, x_1915.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1919 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1919.x, x_1918.x, x_1919.z, x_1918.y);
        let x_1921 : vec2<f32> = u_xlat49;
        let x_1924 : vec2<f32> = ((vec2<f32>(x_1921.y, x_1921.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1925 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1924.x, x_1925.y, x_1924.y, x_1925.w);
        let x_1928 : f32 = u_xlat8.y;
        u_xlat10.y = x_1928;
        let x_1930 : vec4<f32> = u_xlat10;
        let x_1931 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1930 + x_1931);
        let x_1933 : vec4<f32> = u_xlat9;
        let x_1934 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1933 / x_1934);
        let x_1936 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1936 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1942 : vec4<f32> = u_xlat10;
        let x_1943 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1942 / x_1943);
        let x_1945 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1945 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1947 : vec4<f32> = u_xlat9;
        let x_1950 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1947.w, x_1947.x, x_1947.y, x_1947.z) * vec4<f32>(x_1950.x, x_1950.x, x_1950.x, x_1950.x));
        let x_1953 : vec4<f32> = u_xlat10;
        let x_1956 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1953.x, x_1953.w, x_1953.y, x_1953.z) * vec4<f32>(x_1956.y, x_1956.y, x_1956.y, x_1956.y));
        let x_1959 : vec4<f32> = u_xlat9;
        let x_1960 : vec3<f32> = vec3<f32>(x_1959.y, x_1959.z, x_1959.w);
        let x_1961 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1960.x, x_1961.y, x_1960.y, x_1960.z);
        let x_1964 : f32 = u_xlat10.x;
        u_xlat12.y = x_1964;
        let x_1966 : vec4<f32> = u_xlat7;
        let x_1969 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1972 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1966.x, x_1966.y, x_1966.x, x_1966.y) * vec4<f32>(x_1969.x, x_1969.y, x_1969.x, x_1969.y)) + vec4<f32>(x_1972.x, x_1972.y, x_1972.z, x_1972.y));
        let x_1975 : vec4<f32> = u_xlat7;
        let x_1978 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1981 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1975.x, x_1975.y) * vec2<f32>(x_1978.x, x_1978.y)) + vec2<f32>(x_1981.w, x_1981.y));
        let x_1985 : f32 = u_xlat12.y;
        u_xlat9.y = x_1985;
        let x_1988 : f32 = u_xlat10.z;
        u_xlat12.y = x_1988;
        let x_1990 : vec4<f32> = u_xlat7;
        let x_1993 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1996 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1990.x, x_1990.y, x_1990.x, x_1990.y) * vec4<f32>(x_1993.x, x_1993.y, x_1993.x, x_1993.y)) + vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1996.y));
        let x_1999 : vec4<f32> = u_xlat7;
        let x_2002 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2005 : vec4<f32> = u_xlat12;
        let x_2007 : vec2<f32> = ((vec2<f32>(x_1999.x, x_1999.y) * vec2<f32>(x_2002.x, x_2002.y)) + vec2<f32>(x_2005.w, x_2005.y));
        let x_2008 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2007.x, x_2007.y, x_2008.z, x_2008.w);
        let x_2011 : f32 = u_xlat12.y;
        u_xlat9.z = x_2011;
        let x_2014 : vec4<f32> = u_xlat7;
        let x_2017 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2020 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2014.x, x_2014.y, x_2014.x, x_2014.y) * vec4<f32>(x_2017.x, x_2017.y, x_2017.x, x_2017.y)) + vec4<f32>(x_2020.x, x_2020.y, x_2020.x, x_2020.z));
        let x_2024 : f32 = u_xlat10.w;
        u_xlat12.y = x_2024;
        let x_2027 : vec4<f32> = u_xlat7;
        let x_2030 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2033 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2027.x, x_2027.y, x_2027.x, x_2027.y) * vec4<f32>(x_2030.x, x_2030.y, x_2030.x, x_2030.y)) + vec4<f32>(x_2033.x, x_2033.y, x_2033.z, x_2033.y));
        let x_2037 : vec4<f32> = u_xlat7;
        let x_2040 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2043 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_2037.x, x_2037.y) * vec2<f32>(x_2040.x, x_2040.y)) + vec2<f32>(x_2043.w, x_2043.y));
        let x_2047 : f32 = u_xlat12.y;
        u_xlat9.w = x_2047;
        let x_2050 : vec4<f32> = u_xlat7;
        let x_2053 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2056 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2050.x, x_2050.y) * vec2<f32>(x_2053.x, x_2053.y)) + vec2<f32>(x_2056.x, x_2056.w));
        let x_2059 : vec4<f32> = u_xlat12;
        let x_2060 : vec3<f32> = vec3<f32>(x_2059.x, x_2059.z, x_2059.w);
        let x_2061 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2060.x, x_2061.y, x_2060.y, x_2060.z);
        let x_2063 : vec4<f32> = u_xlat7;
        let x_2066 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2069 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2063.x, x_2063.y, x_2063.x, x_2063.y) * vec4<f32>(x_2066.x, x_2066.y, x_2066.x, x_2066.y)) + vec4<f32>(x_2069.x, x_2069.y, x_2069.z, x_2069.y));
        let x_2073 : vec4<f32> = u_xlat7;
        let x_2076 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2079 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2073.x, x_2073.y) * vec2<f32>(x_2076.x, x_2076.y)) + vec2<f32>(x_2079.w, x_2079.y));
        let x_2083 : f32 = u_xlat9.x;
        u_xlat10.x = x_2083;
        let x_2085 : vec4<f32> = u_xlat7;
        let x_2088 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2091 : vec4<f32> = u_xlat10;
        let x_2093 : vec2<f32> = ((vec2<f32>(x_2085.x, x_2085.y) * vec2<f32>(x_2088.x, x_2088.y)) + vec2<f32>(x_2091.x, x_2091.y));
        let x_2094 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2093.x, x_2093.y, x_2094.z, x_2094.w);
        let x_2097 : vec4<f32> = u_xlat8;
        let x_2099 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2097.x, x_2097.x, x_2097.x, x_2097.x) * x_2099);
        let x_2102 : vec4<f32> = u_xlat8;
        let x_2104 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2102.y, x_2102.y, x_2102.y, x_2102.y) * x_2104);
        let x_2107 : vec4<f32> = u_xlat8;
        let x_2109 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2107.z, x_2107.z, x_2107.z, x_2107.z) * x_2109);
        let x_2111 : vec4<f32> = u_xlat8;
        let x_2113 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2111.w, x_2111.w, x_2111.w, x_2111.w) * x_2113);
        let x_2116 : vec4<f32> = u_xlat13;
        let x_2117 : vec2<f32> = vec2<f32>(x_2116.x, x_2116.y);
        let x_2119 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_2117.x, x_2117.y, x_2119);
        let x_2126 : vec3<f32> = txVec13;
        let x_2128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2126.xy, x_2126.z);
        u_xlat67 = x_2128;
        let x_2130 : vec4<f32> = u_xlat13;
        let x_2131 : vec2<f32> = vec2<f32>(x_2130.z, x_2130.w);
        let x_2133 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_2131.x, x_2131.y, x_2133);
        let x_2140 : vec3<f32> = txVec14;
        let x_2142 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2140.xy, x_2140.z);
        u_xlat68 = x_2142;
        let x_2143 : f32 = u_xlat68;
        let x_2145 : f32 = u_xlat18.y;
        u_xlat68 = (x_2143 * x_2145);
        let x_2148 : f32 = u_xlat18.x;
        let x_2149 : f32 = u_xlat67;
        let x_2151 : f32 = u_xlat68;
        u_xlat67 = ((x_2148 * x_2149) + x_2151);
        let x_2154 : vec2<f32> = u_xlat49;
        let x_2156 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_2154.x, x_2154.y, x_2156);
        let x_2163 : vec3<f32> = txVec15;
        let x_2165 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2163.xy, x_2163.z);
        u_xlat68 = x_2165;
        let x_2167 : f32 = u_xlat18.z;
        let x_2168 : f32 = u_xlat68;
        let x_2170 : f32 = u_xlat67;
        u_xlat67 = ((x_2167 * x_2168) + x_2170);
        let x_2173 : vec4<f32> = u_xlat16;
        let x_2174 : vec2<f32> = vec2<f32>(x_2173.x, x_2173.y);
        let x_2176 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_2174.x, x_2174.y, x_2176);
        let x_2183 : vec3<f32> = txVec16;
        let x_2185 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2183.xy, x_2183.z);
        u_xlat68 = x_2185;
        let x_2187 : f32 = u_xlat18.w;
        let x_2188 : f32 = u_xlat68;
        let x_2190 : f32 = u_xlat67;
        u_xlat67 = ((x_2187 * x_2188) + x_2190);
        let x_2193 : vec4<f32> = u_xlat14;
        let x_2194 : vec2<f32> = vec2<f32>(x_2193.x, x_2193.y);
        let x_2196 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_2194.x, x_2194.y, x_2196);
        let x_2203 : vec3<f32> = txVec17;
        let x_2205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2203.xy, x_2203.z);
        u_xlat68 = x_2205;
        let x_2207 : f32 = u_xlat19.x;
        let x_2208 : f32 = u_xlat68;
        let x_2210 : f32 = u_xlat67;
        u_xlat67 = ((x_2207 * x_2208) + x_2210);
        let x_2213 : vec4<f32> = u_xlat14;
        let x_2214 : vec2<f32> = vec2<f32>(x_2213.z, x_2213.w);
        let x_2216 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_2214.x, x_2214.y, x_2216);
        let x_2223 : vec3<f32> = txVec18;
        let x_2225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2223.xy, x_2223.z);
        u_xlat68 = x_2225;
        let x_2227 : f32 = u_xlat19.y;
        let x_2228 : f32 = u_xlat68;
        let x_2230 : f32 = u_xlat67;
        u_xlat67 = ((x_2227 * x_2228) + x_2230);
        let x_2233 : vec4<f32> = u_xlat15;
        let x_2234 : vec2<f32> = vec2<f32>(x_2233.x, x_2233.y);
        let x_2236 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_2234.x, x_2234.y, x_2236);
        let x_2243 : vec3<f32> = txVec19;
        let x_2245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2243.xy, x_2243.z);
        u_xlat68 = x_2245;
        let x_2247 : f32 = u_xlat19.z;
        let x_2248 : f32 = u_xlat68;
        let x_2250 : f32 = u_xlat67;
        u_xlat67 = ((x_2247 * x_2248) + x_2250);
        let x_2253 : vec4<f32> = u_xlat16;
        let x_2254 : vec2<f32> = vec2<f32>(x_2253.z, x_2253.w);
        let x_2256 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_2254.x, x_2254.y, x_2256);
        let x_2263 : vec3<f32> = txVec20;
        let x_2265 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2263.xy, x_2263.z);
        u_xlat68 = x_2265;
        let x_2267 : f32 = u_xlat19.w;
        let x_2268 : f32 = u_xlat68;
        let x_2270 : f32 = u_xlat67;
        u_xlat67 = ((x_2267 * x_2268) + x_2270);
        let x_2273 : vec4<f32> = u_xlat17;
        let x_2274 : vec2<f32> = vec2<f32>(x_2273.x, x_2273.y);
        let x_2276 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_2274.x, x_2274.y, x_2276);
        let x_2283 : vec3<f32> = txVec21;
        let x_2285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2283.xy, x_2283.z);
        u_xlat68 = x_2285;
        let x_2287 : f32 = u_xlat20.x;
        let x_2288 : f32 = u_xlat68;
        let x_2290 : f32 = u_xlat67;
        u_xlat67 = ((x_2287 * x_2288) + x_2290);
        let x_2293 : vec4<f32> = u_xlat17;
        let x_2294 : vec2<f32> = vec2<f32>(x_2293.z, x_2293.w);
        let x_2296 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_2294.x, x_2294.y, x_2296);
        let x_2303 : vec3<f32> = txVec22;
        let x_2305 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2303.xy, x_2303.z);
        u_xlat68 = x_2305;
        let x_2307 : f32 = u_xlat20.y;
        let x_2308 : f32 = u_xlat68;
        let x_2310 : f32 = u_xlat67;
        u_xlat67 = ((x_2307 * x_2308) + x_2310);
        let x_2313 : vec2<f32> = u_xlat30;
        let x_2315 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_2313.x, x_2313.y, x_2315);
        let x_2322 : vec3<f32> = txVec23;
        let x_2324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2322.xy, x_2322.z);
        u_xlat68 = x_2324;
        let x_2326 : f32 = u_xlat20.z;
        let x_2327 : f32 = u_xlat68;
        let x_2329 : f32 = u_xlat67;
        u_xlat67 = ((x_2326 * x_2327) + x_2329);
        let x_2332 : vec2<f32> = u_xlat57;
        let x_2334 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_2332.x, x_2332.y, x_2334);
        let x_2341 : vec3<f32> = txVec24;
        let x_2343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2341.xy, x_2341.z);
        u_xlat68 = x_2343;
        let x_2345 : f32 = u_xlat20.w;
        let x_2346 : f32 = u_xlat68;
        let x_2348 : f32 = u_xlat67;
        u_xlat67 = ((x_2345 * x_2346) + x_2348);
        let x_2351 : vec4<f32> = u_xlat12;
        let x_2352 : vec2<f32> = vec2<f32>(x_2351.x, x_2351.y);
        let x_2354 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_2352.x, x_2352.y, x_2354);
        let x_2361 : vec3<f32> = txVec25;
        let x_2363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2361.xy, x_2361.z);
        u_xlat68 = x_2363;
        let x_2365 : f32 = u_xlat8.x;
        let x_2366 : f32 = u_xlat68;
        let x_2368 : f32 = u_xlat67;
        u_xlat67 = ((x_2365 * x_2366) + x_2368);
        let x_2371 : vec4<f32> = u_xlat12;
        let x_2372 : vec2<f32> = vec2<f32>(x_2371.z, x_2371.w);
        let x_2374 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_2372.x, x_2372.y, x_2374);
        let x_2381 : vec3<f32> = txVec26;
        let x_2383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2381.xy, x_2381.z);
        u_xlat68 = x_2383;
        let x_2385 : f32 = u_xlat8.y;
        let x_2386 : f32 = u_xlat68;
        let x_2388 : f32 = u_xlat67;
        u_xlat67 = ((x_2385 * x_2386) + x_2388);
        let x_2391 : vec2<f32> = u_xlat52;
        let x_2393 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_2391.x, x_2391.y, x_2393);
        let x_2400 : vec3<f32> = txVec27;
        let x_2402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2400.xy, x_2400.z);
        u_xlat68 = x_2402;
        let x_2404 : f32 = u_xlat8.z;
        let x_2405 : f32 = u_xlat68;
        let x_2407 : f32 = u_xlat67;
        u_xlat67 = ((x_2404 * x_2405) + x_2407);
        let x_2410 : vec4<f32> = u_xlat7;
        let x_2411 : vec2<f32> = vec2<f32>(x_2410.x, x_2410.y);
        let x_2413 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_2411.x, x_2411.y, x_2413);
        let x_2420 : vec3<f32> = txVec28;
        let x_2422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2420.xy, x_2420.z);
        u_xlat68 = x_2422;
        let x_2424 : f32 = u_xlat8.w;
        let x_2425 : f32 = u_xlat68;
        let x_2427 : f32 = u_xlat67;
        u_xlat4.x = ((x_2424 * x_2425) + x_2427);
      }
    }
  } else {
    let x_2432 : vec4<f32> = u_xlat2;
    let x_2433 : vec2<f32> = vec2<f32>(x_2432.x, x_2432.y);
    let x_2435 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_2433.x, x_2433.y, x_2435);
    let x_2442 : vec3<f32> = txVec29;
    let x_2444 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2442.xy, x_2442.z);
    u_xlat4.x = x_2444;
  }
  let x_2447 : f32 = x_842.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_2447) + 1.0f);
  let x_2452 : f32 = u_xlat4.x;
  let x_2454 : f32 = x_842.x_MainLightShadowParams.x;
  let x_2457 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2452 * x_2454) + x_2457);
  let x_2462 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_2462);
  let x_2466 : f32 = u_xlat2.z;
  u_xlatb44 = (x_2466 >= 1.0f);
  let x_2468 : bool = u_xlatb44;
  let x_2469 : bool = u_xlatb23;
  u_xlatb23 = (x_2468 | x_2469);
  let x_2471 : bool = u_xlatb23;
  if (x_2471) {
    x_2472 = 1.0f;
  } else {
    let x_2477 : f32 = u_xlat2.x;
    x_2472 = x_2477;
  }
  let x_2478 : f32 = x_2472;
  u_xlat2.x = x_2478;
  let x_2480 : vec3<f32> = vs_TEXCOORD7;
  let x_2483 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  let x_2485 : vec3<f32> = (x_2480 + -(x_2483));
  let x_2486 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2485.x, x_2485.y, x_2485.z, x_2486.w);
  let x_2488 : vec4<f32> = u_xlat7;
  let x_2490 : vec4<f32> = u_xlat7;
  u_xlat23.x = dot(vec3<f32>(x_2488.x, x_2488.y, x_2488.z), vec3<f32>(x_2490.x, x_2490.y, x_2490.z));
  let x_2495 : f32 = u_xlat23.x;
  let x_2497 : f32 = x_842.x_MainLightShadowParams.z;
  let x_2500 : f32 = x_842.x_MainLightShadowParams.w;
  u_xlat23.x = ((x_2495 * x_2497) + x_2500);
  let x_2504 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_2504, 0.0f, 1.0f);
  let x_2509 : f32 = u_xlat2.x;
  u_xlat44 = (-(x_2509) + 1.0f);
  let x_2513 : f32 = u_xlat23.x;
  let x_2514 : f32 = u_xlat44;
  let x_2517 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2513 * x_2514) + x_2517);
  let x_2520 : f32 = u_xlat46;
  let x_2523 : vec4<f32> = x_128.x_MainLightColor;
  let x_2525 : vec3<f32> = (vec3<f32>(x_2520, x_2520, x_2520) * vec3<f32>(x_2523.x, x_2523.y, x_2523.z));
  let x_2526 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2525.x, x_2525.y, x_2525.z, x_2526.w);
  let x_2529 : f32 = vs_TEXCOORD3.w;
  u_xlat8.x = x_2529;
  let x_2532 : f32 = vs_TEXCOORD4.w;
  u_xlat8.y = x_2532;
  let x_2535 : f32 = vs_TEXCOORD5.w;
  u_xlat8.z = x_2535;
  let x_2537 : vec4<f32> = u_xlat8;
  let x_2540 : vec4<f32> = u_xlat1;
  u_xlat23.x = dot(-(vec3<f32>(x_2537.x, x_2537.y, x_2537.z)), vec3<f32>(x_2540.x, x_2540.y, x_2540.z));
  let x_2545 : f32 = u_xlat23.x;
  let x_2547 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2545 + x_2547);
  let x_2550 : vec4<f32> = u_xlat1;
  let x_2552 : vec3<f32> = u_xlat23;
  let x_2556 : vec4<f32> = u_xlat8;
  let x_2559 : vec3<f32> = ((vec3<f32>(x_2550.x, x_2550.y, x_2550.z) * -(vec3<f32>(x_2552.x, x_2552.x, x_2552.x))) + -(vec3<f32>(x_2556.x, x_2556.y, x_2556.z)));
  let x_2560 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2559.x, x_2559.y, x_2559.z, x_2560.w);
  let x_2562 : vec4<f32> = u_xlat1;
  let x_2564 : vec4<f32> = u_xlat8;
  u_xlat23.x = dot(vec3<f32>(x_2562.x, x_2562.y, x_2562.z), vec3<f32>(x_2564.x, x_2564.y, x_2564.z));
  let x_2569 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_2569, 0.0f, 1.0f);
  let x_2573 : f32 = u_xlat23.x;
  u_xlat23.x = (-(x_2573) + 1.0f);
  let x_2578 : f32 = u_xlat23.x;
  let x_2580 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2578 * x_2580);
  let x_2584 : f32 = u_xlat23.x;
  let x_2586 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2584 * x_2586);
  let x_2590 : f32 = u_xlat0.x;
  u_xlat44 = ((-(x_2590) * 0.699999988f) + 1.700000048f);
  let x_2597 : f32 = u_xlat0.x;
  let x_2598 : f32 = u_xlat44;
  u_xlat0.x = (x_2597 * x_2598);
  let x_2602 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2602 * 6.0f);
  let x_2614 : vec4<f32> = u_xlat9;
  let x_2617 : f32 = u_xlat0.x;
  let x_2618 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2614.x, x_2614.y, x_2614.z), x_2617);
  u_xlat9 = x_2618;
  let x_2620 : f32 = u_xlat9.w;
  u_xlat0.x = (x_2620 + -1.0f);
  let x_2624 : f32 = x_1058.unity_SpecCube0_HDR.w;
  let x_2626 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2624 * x_2626) + 1.0f);
  let x_2631 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2631, 0.0f);
  let x_2635 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2635);
  let x_2639 : f32 = u_xlat0.x;
  let x_2641 : f32 = x_1058.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2639 * x_2641);
  let x_2645 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2645);
  let x_2649 : f32 = u_xlat0.x;
  let x_2651 : f32 = x_1058.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2649 * x_2651);
  let x_2654 : vec4<f32> = u_xlat9;
  let x_2656 : vec3<f32> = u_xlat0;
  let x_2658 : vec3<f32> = (vec3<f32>(x_2654.x, x_2654.y, x_2654.z) * vec3<f32>(x_2656.x, x_2656.x, x_2656.x));
  let x_2659 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2658.x, x_2658.y, x_2658.z, x_2659.w);
  let x_2661 : f32 = u_xlat64;
  let x_2663 : f32 = u_xlat64;
  let x_2667 : vec2<f32> = ((vec2<f32>(x_2661, x_2661) * vec2<f32>(x_2663, x_2663)) + vec2<f32>(-1.0f, 1.0f));
  let x_2668 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2667.x, x_2668.y, x_2668.z, x_2667.y);
  let x_2671 : f32 = u_xlat4.w;
  u_xlat0.x = (1.0f / x_2671);
  let x_2674 : vec4<f32> = u_xlat5;
  let x_2677 : f32 = u_xlat42;
  let x_2679 : vec3<f32> = (-(vec3<f32>(x_2674.x, x_2674.y, x_2674.z)) + vec3<f32>(x_2677, x_2677, x_2677));
  let x_2680 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2679.x, x_2679.y, x_2679.z, x_2680.w);
  let x_2682 : vec3<f32> = u_xlat23;
  let x_2684 : vec4<f32> = u_xlat10;
  let x_2687 : vec4<f32> = u_xlat5;
  let x_2689 : vec3<f32> = ((vec3<f32>(x_2682.x, x_2682.x, x_2682.x) * vec3<f32>(x_2684.x, x_2684.y, x_2684.z)) + vec3<f32>(x_2687.x, x_2687.y, x_2687.z));
  let x_2690 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2689.x, x_2689.y, x_2689.z, x_2690.w);
  let x_2692 : vec3<f32> = u_xlat0;
  let x_2694 : vec4<f32> = u_xlat10;
  let x_2696 : vec3<f32> = (vec3<f32>(x_2692.x, x_2692.x, x_2692.x) * vec3<f32>(x_2694.x, x_2694.y, x_2694.z));
  let x_2697 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_2696.x, x_2696.y, x_2696.z, x_2697.w);
  let x_2699 : vec4<f32> = u_xlat9;
  let x_2701 : vec4<f32> = u_xlat10;
  let x_2703 : vec3<f32> = (vec3<f32>(x_2699.x, x_2699.y, x_2699.z) * vec3<f32>(x_2701.x, x_2701.y, x_2701.z));
  let x_2704 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2703.x, x_2703.y, x_2703.z, x_2704.w);
  let x_2706 : vec4<f32> = u_xlat3;
  let x_2708 : vec4<f32> = u_xlat6;
  let x_2711 : vec4<f32> = u_xlat9;
  let x_2713 : vec3<f32> = ((vec3<f32>(x_2706.x, x_2706.y, x_2706.z) * vec3<f32>(x_2708.x, x_2708.y, x_2708.z)) + vec3<f32>(x_2711.x, x_2711.y, x_2711.z));
  let x_2714 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2713.x, x_2713.y, x_2713.z, x_2714.w);
  let x_2717 : f32 = u_xlat2.x;
  let x_2719 : f32 = x_1058.unity_LightData.z;
  u_xlat0.x = (x_2717 * x_2719);
  let x_2722 : vec4<f32> = u_xlat1;
  let x_2725 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat42 = dot(vec3<f32>(x_2722.x, x_2722.y, x_2722.z), vec3<f32>(x_2725.x, x_2725.y, x_2725.z));
  let x_2728 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2728, 0.0f, 1.0f);
  let x_2730 : f32 = u_xlat42;
  let x_2732 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2730 * x_2732);
  let x_2735 : vec3<f32> = u_xlat0;
  let x_2737 : vec4<f32> = u_xlat7;
  let x_2739 : vec3<f32> = (vec3<f32>(x_2735.x, x_2735.x, x_2735.x) * vec3<f32>(x_2737.x, x_2737.y, x_2737.z));
  let x_2740 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2739.x, x_2739.y, x_2739.z, x_2740.w);
  let x_2742 : vec4<f32> = u_xlat8;
  let x_2745 : vec4<f32> = x_128.x_MainLightPosition;
  let x_2747 : vec3<f32> = (vec3<f32>(x_2742.x, x_2742.y, x_2742.z) + vec3<f32>(x_2745.x, x_2745.y, x_2745.z));
  let x_2748 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2747.x, x_2747.y, x_2747.z, x_2748.w);
  let x_2750 : vec4<f32> = u_xlat7;
  let x_2752 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(vec3<f32>(x_2750.x, x_2750.y, x_2750.z), vec3<f32>(x_2752.x, x_2752.y, x_2752.z));
  let x_2757 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2757, 1.17549435e-37f);
  let x_2762 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_2762);
  let x_2765 : vec3<f32> = u_xlat0;
  let x_2767 : vec4<f32> = u_xlat7;
  let x_2769 : vec3<f32> = (vec3<f32>(x_2765.x, x_2765.x, x_2765.x) * vec3<f32>(x_2767.x, x_2767.y, x_2767.z));
  let x_2770 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2769.x, x_2769.y, x_2769.z, x_2770.w);
  let x_2772 : vec4<f32> = u_xlat1;
  let x_2774 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(vec3<f32>(x_2772.x, x_2772.y, x_2772.z), vec3<f32>(x_2774.x, x_2774.y, x_2774.z));
  let x_2779 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_2779, 0.0f, 1.0f);
  let x_2783 : vec4<f32> = x_128.x_MainLightPosition;
  let x_2785 : vec4<f32> = u_xlat7;
  u_xlat0.z = dot(vec3<f32>(x_2783.x, x_2783.y, x_2783.z), vec3<f32>(x_2785.x, x_2785.y, x_2785.z));
  let x_2790 : f32 = u_xlat0.z;
  u_xlat0.z = clamp(x_2790, 0.0f, 1.0f);
  let x_2793 : vec3<f32> = u_xlat0;
  let x_2795 : vec3<f32> = u_xlat0;
  let x_2797 : vec2<f32> = (vec2<f32>(x_2793.x, x_2793.z) * vec2<f32>(x_2795.x, x_2795.z));
  let x_2798 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_2797.x, x_2798.y, x_2797.y);
  let x_2801 : f32 = u_xlat0.x;
  let x_2803 : f32 = u_xlat4.x;
  u_xlat0.x = ((x_2801 * x_2803) + 1.000010014f);
  let x_2809 : f32 = u_xlat0.x;
  let x_2811 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2809 * x_2811);
  let x_2815 : f32 = u_xlat0.z;
  u_xlat42 = max(x_2815, 0.100000001f);
  let x_2818 : f32 = u_xlat42;
  let x_2820 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2818 * x_2820);
  let x_2823 : f32 = u_xlat66;
  let x_2825 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2823 * x_2825);
  let x_2828 : f32 = u_xlat25;
  let x_2830 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2828 / x_2830);
  let x_2833 : vec4<f32> = u_xlat5;
  let x_2835 : vec3<f32> = u_xlat0;
  let x_2838 : vec4<f32> = u_xlat6;
  let x_2840 : vec3<f32> = ((vec3<f32>(x_2833.x, x_2833.y, x_2833.z) * vec3<f32>(x_2835.x, x_2835.x, x_2835.x)) + vec3<f32>(x_2838.x, x_2838.y, x_2838.z));
  let x_2841 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2840.x, x_2840.y, x_2840.z, x_2841.w);
  let x_2843 : vec4<f32> = u_xlat2;
  let x_2845 : vec4<f32> = u_xlat7;
  let x_2847 : vec3<f32> = (vec3<f32>(x_2843.x, x_2843.y, x_2843.z) * vec3<f32>(x_2845.x, x_2845.y, x_2845.z));
  let x_2848 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2847.x, x_2847.y, x_2847.z, x_2848.w);
  let x_2851 : f32 = x_128.x_AdditionalLightsCount.x;
  let x_2853 : f32 = x_1058.unity_LightData.y;
  u_xlat0.x = min(x_2851, x_2853);
  let x_2858 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_2858));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2870 : u32 = u_xlatu_loop_1;
    let x_2871 : u32 = u_xlatu0;
    if ((x_2870 < x_2871)) {
    } else {
      break;
    }
    let x_2874 : u32 = u_xlatu_loop_1;
    u_xlatu64 = (x_2874 >> 2u);
    let x_2877 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_2877 & 3u));
    let x_2880 : u32 = u_xlatu64;
    let x_2883 : vec4<f32> = x_1058.unity_LightIndices[bitcast<i32>(x_2880)];
    let x_2893 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2898 : vec4<u32> = indexable[x_2893];
    u_xlat64 = dot(x_2883, bitcast<vec4<f32>>(x_2898));
    let x_2902 : f32 = u_xlat64;
    u_xlati64 = i32(x_2902);
    let x_2904 : vec3<f32> = vs_TEXCOORD7;
    let x_2916 : i32 = u_xlati64;
    let x_2918 : vec4<f32> = x_2915.x_AdditionalLightsPosition[x_2916];
    let x_2921 : i32 = u_xlati64;
    let x_2923 : vec4<f32> = x_2915.x_AdditionalLightsPosition[x_2921];
    let x_2925 : vec3<f32> = ((-(x_2904) * vec3<f32>(x_2918.w, x_2918.w, x_2918.w)) + vec3<f32>(x_2923.x, x_2923.y, x_2923.z));
    let x_2926 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2925.x, x_2925.y, x_2925.z, x_2926.w);
    let x_2928 : vec4<f32> = u_xlat9;
    let x_2930 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_2928.x, x_2928.y, x_2928.z), vec3<f32>(x_2930.x, x_2930.y, x_2930.z));
    let x_2933 : f32 = u_xlat67;
    u_xlat67 = max(x_2933, 6.10351562e-05f);
    let x_2935 : f32 = u_xlat67;
    u_xlat68 = inverseSqrt(x_2935);
    let x_2937 : f32 = u_xlat68;
    let x_2939 : vec4<f32> = u_xlat9;
    let x_2941 : vec3<f32> = (vec3<f32>(x_2937, x_2937, x_2937) * vec3<f32>(x_2939.x, x_2939.y, x_2939.z));
    let x_2942 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2941.x, x_2941.y, x_2941.z, x_2942.w);
    let x_2944 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_2944);
    let x_2946 : f32 = u_xlat67;
    let x_2947 : i32 = u_xlati64;
    let x_2949 : f32 = x_2915.x_AdditionalLightsAttenuation[x_2947].x;
    u_xlat67 = (x_2946 * x_2949);
    let x_2951 : f32 = u_xlat67;
    let x_2953 : f32 = u_xlat67;
    u_xlat67 = ((-(x_2951) * x_2953) + 1.0f);
    let x_2956 : f32 = u_xlat67;
    u_xlat67 = max(x_2956, 0.0f);
    let x_2958 : f32 = u_xlat67;
    let x_2959 : f32 = u_xlat67;
    u_xlat67 = (x_2958 * x_2959);
    let x_2961 : f32 = u_xlat67;
    let x_2962 : f32 = u_xlat69;
    u_xlat67 = (x_2961 * x_2962);
    let x_2964 : i32 = u_xlati64;
    let x_2966 : vec4<f32> = x_2915.x_AdditionalLightsSpotDir[x_2964];
    let x_2968 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_2966.x, x_2966.y, x_2966.z), vec3<f32>(x_2968.x, x_2968.y, x_2968.z));
    let x_2971 : f32 = u_xlat69;
    let x_2972 : i32 = u_xlati64;
    let x_2974 : f32 = x_2915.x_AdditionalLightsAttenuation[x_2972].z;
    let x_2976 : i32 = u_xlati64;
    let x_2978 : f32 = x_2915.x_AdditionalLightsAttenuation[x_2976].w;
    u_xlat69 = ((x_2971 * x_2974) + x_2978);
    let x_2980 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2980, 0.0f, 1.0f);
    let x_2982 : f32 = u_xlat69;
    let x_2983 : f32 = u_xlat69;
    u_xlat69 = (x_2982 * x_2983);
    let x_2985 : f32 = u_xlat67;
    let x_2986 : f32 = u_xlat69;
    u_xlat67 = (x_2985 * x_2986);
    let x_2988 : f32 = u_xlat46;
    let x_2990 : i32 = u_xlati64;
    let x_2992 : vec4<f32> = x_2915.x_AdditionalLightsColor[x_2990];
    let x_2994 : vec3<f32> = (vec3<f32>(x_2988, x_2988, x_2988) * vec3<f32>(x_2992.x, x_2992.y, x_2992.z));
    let x_2995 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2994.x, x_2994.y, x_2994.z, x_2995.w);
    let x_2997 : vec4<f32> = u_xlat1;
    let x_2999 : vec4<f32> = u_xlat10;
    u_xlat64 = dot(vec3<f32>(x_2997.x, x_2997.y, x_2997.z), vec3<f32>(x_2999.x, x_2999.y, x_2999.z));
    let x_3002 : f32 = u_xlat64;
    u_xlat64 = clamp(x_3002, 0.0f, 1.0f);
    let x_3004 : f32 = u_xlat64;
    let x_3005 : f32 = u_xlat67;
    u_xlat64 = (x_3004 * x_3005);
    let x_3007 : f32 = u_xlat64;
    let x_3009 : vec4<f32> = u_xlat11;
    let x_3011 : vec3<f32> = (vec3<f32>(x_3007, x_3007, x_3007) * vec3<f32>(x_3009.x, x_3009.y, x_3009.z));
    let x_3012 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3011.x, x_3011.y, x_3011.z, x_3012.w);
    let x_3014 : vec4<f32> = u_xlat9;
    let x_3016 : f32 = u_xlat68;
    let x_3019 : vec4<f32> = u_xlat8;
    let x_3021 : vec3<f32> = ((vec3<f32>(x_3014.x, x_3014.y, x_3014.z) * vec3<f32>(x_3016, x_3016, x_3016)) + vec3<f32>(x_3019.x, x_3019.y, x_3019.z));
    let x_3022 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3021.x, x_3021.y, x_3021.z, x_3022.w);
    let x_3024 : vec4<f32> = u_xlat9;
    let x_3026 : vec4<f32> = u_xlat9;
    u_xlat64 = dot(vec3<f32>(x_3024.x, x_3024.y, x_3024.z), vec3<f32>(x_3026.x, x_3026.y, x_3026.z));
    let x_3029 : f32 = u_xlat64;
    u_xlat64 = max(x_3029, 1.17549435e-37f);
    let x_3031 : f32 = u_xlat64;
    u_xlat64 = inverseSqrt(x_3031);
    let x_3033 : f32 = u_xlat64;
    let x_3035 : vec4<f32> = u_xlat9;
    let x_3037 : vec3<f32> = (vec3<f32>(x_3033, x_3033, x_3033) * vec3<f32>(x_3035.x, x_3035.y, x_3035.z));
    let x_3038 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3037.x, x_3037.y, x_3037.z, x_3038.w);
    let x_3040 : vec4<f32> = u_xlat1;
    let x_3042 : vec4<f32> = u_xlat9;
    u_xlat64 = dot(vec3<f32>(x_3040.x, x_3040.y, x_3040.z), vec3<f32>(x_3042.x, x_3042.y, x_3042.z));
    let x_3045 : f32 = u_xlat64;
    u_xlat64 = clamp(x_3045, 0.0f, 1.0f);
    let x_3047 : vec4<f32> = u_xlat10;
    let x_3049 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3047.x, x_3047.y, x_3047.z), vec3<f32>(x_3049.x, x_3049.y, x_3049.z));
    let x_3052 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3052, 0.0f, 1.0f);
    let x_3054 : f32 = u_xlat64;
    let x_3055 : f32 = u_xlat64;
    u_xlat64 = (x_3054 * x_3055);
    let x_3057 : f32 = u_xlat64;
    let x_3059 : f32 = u_xlat4.x;
    u_xlat64 = ((x_3057 * x_3059) + 1.000010014f);
    let x_3062 : f32 = u_xlat67;
    let x_3063 : f32 = u_xlat67;
    u_xlat67 = (x_3062 * x_3063);
    let x_3065 : f32 = u_xlat64;
    let x_3066 : f32 = u_xlat64;
    u_xlat64 = (x_3065 * x_3066);
    let x_3068 : f32 = u_xlat67;
    u_xlat67 = max(x_3068, 0.100000001f);
    let x_3070 : f32 = u_xlat64;
    let x_3071 : f32 = u_xlat67;
    u_xlat64 = (x_3070 * x_3071);
    let x_3073 : f32 = u_xlat66;
    let x_3074 : f32 = u_xlat64;
    u_xlat64 = (x_3073 * x_3074);
    let x_3076 : f32 = u_xlat25;
    let x_3077 : f32 = u_xlat64;
    u_xlat64 = (x_3076 / x_3077);
    let x_3079 : vec4<f32> = u_xlat5;
    let x_3081 : f32 = u_xlat64;
    let x_3084 : vec4<f32> = u_xlat6;
    let x_3086 : vec3<f32> = ((vec3<f32>(x_3079.x, x_3079.y, x_3079.z) * vec3<f32>(x_3081, x_3081, x_3081)) + vec3<f32>(x_3084.x, x_3084.y, x_3084.z));
    let x_3087 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3086.x, x_3086.y, x_3086.z, x_3087.w);
    let x_3089 : vec4<f32> = u_xlat9;
    let x_3091 : vec4<f32> = u_xlat11;
    let x_3094 : vec4<f32> = u_xlat7;
    let x_3096 : vec3<f32> = ((vec3<f32>(x_3089.x, x_3089.y, x_3089.z) * vec3<f32>(x_3091.x, x_3091.y, x_3091.z)) + vec3<f32>(x_3094.x, x_3094.y, x_3094.z));
    let x_3097 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3096.x, x_3096.y, x_3096.z, x_3097.w);

    continuing {
      let x_3099 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3099 + bitcast<u32>(1i));
    }
  }
  let x_3101 : vec4<f32> = u_xlat3;
  let x_3103 : f32 = u_xlat21;
  let x_3106 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3101.x, x_3101.y, x_3101.z) * vec3<f32>(x_3103, x_3103, x_3103)) + vec3<f32>(x_3106.x, x_3106.y, x_3106.z));
  let x_3109 : vec4<f32> = u_xlat7;
  let x_3111 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3109.x, x_3109.y, x_3109.z) + x_3111);
  let x_3113 : f32 = u_xlat65;
  let x_3114 : f32 = u_xlat65;
  u_xlat1.x = (x_3113 * -(x_3114));
  let x_3119 : f32 = u_xlat1.x;
  u_xlat1.x = exp2(x_3119);
  let x_3122 : vec3<f32> = u_xlat0;
  let x_3123 : f32 = u_xlat63;
  let x_3127 : vec4<f32> = x_128.unity_FogColor;
  u_xlat0 = ((x_3122 * vec3<f32>(x_3123, x_3123, x_3123)) + -(vec3<f32>(x_3127.x, x_3127.y, x_3127.z)));
  let x_3133 : vec4<f32> = u_xlat1;
  let x_3135 : vec3<f32> = u_xlat0;
  let x_3138 : vec4<f32> = x_128.unity_FogColor;
  let x_3140 : vec3<f32> = ((vec3<f32>(x_3133.x, x_3133.x, x_3133.x) * x_3135) + vec3<f32>(x_3138.x, x_3138.y, x_3138.z));
  let x_3141 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3140.x, x_3140.y, x_3140.z, x_3141.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(6) vs_TEXCOORD7_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  main_1();
  return main_out(SV_Target0);
}

