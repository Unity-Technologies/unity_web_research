struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(2) var x_MainTex : texture_2d<f32>;

@group(0) @binding(8) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(3) var x_MetallicTex : texture_2d<f32>;

@group(0) @binding(9) var sampler_MetallicTex : sampler;

var<private> vs_TEXCOORD7 : vec3<f32>;

var<private> vs_TEXCOORD3 : vec3<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

@group(0) @binding(4) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_304 : MainLightShadows;

var<private> vs_TEXCOORD8 : vec4<f32>;

@group(0) @binding(5) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(2) var<uniform> x_1702 : UnityPerDraw;

@group(1) @binding(1) var<uniform> x_1938 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : f32;
  var u_xlatb21 : bool;
  var u_xlat2 : vec3<f32>;
  var u_xlat41 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat21 : vec3<f32>;
  var x_111 : vec3<f32>;
  var u_xlat62 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat60 : f32;
  var u_xlat44 : f32;
  var u_xlatb65 : bool;
  var u_xlat6 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb6 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat66 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlat67 : f32;
  var u_xlatu60 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu63 : u32;
  var u_xlati65 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati63 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_TEXCOORD0;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_59 : vec4<f32> = vs_TEXCOORD0;
  let x_62 : f32 = x_44.x_GlobalMipBias.x;
  let x_63 : vec4<f32> = textureSampleBias(x_MetallicTex, sampler_MetallicTex, vec2<f32>(x_59.x, x_59.y), x_62);
  u_xlat1 = x_63.x;
  let x_70 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_70 == 0.0f);
  let x_77 : vec3<f32> = vs_TEXCOORD7;
  let x_82 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat2 = (-(x_77) + x_82);
  let x_85 : vec3<f32> = u_xlat2;
  let x_86 : vec3<f32> = u_xlat2;
  u_xlat41 = dot(x_85, x_86);
  let x_88 : f32 = u_xlat41;
  u_xlat41 = inverseSqrt(x_88);
  let x_90 : f32 = u_xlat41;
  let x_92 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_90, x_90, x_90) * x_92);
  let x_99 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat3.x = x_99;
  let x_102 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat3.y = x_102;
  let x_107 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat3.z = x_107;
  let x_110 : bool = u_xlatb21;
  if (x_110) {
    let x_114 : vec3<f32> = u_xlat2;
    x_111 = x_114;
  } else {
    let x_116 : vec3<f32> = u_xlat3;
    x_111 = x_116;
  }
  let x_117 : vec3<f32> = x_111;
  u_xlat21 = x_117;
  let x_119 : vec3<f32> = vs_TEXCOORD3;
  let x_120 : vec3<f32> = vs_TEXCOORD3;
  u_xlat2.x = dot(x_119, x_120);
  let x_124 : f32 = u_xlat2.x;
  u_xlat2.x = inverseSqrt(x_124);
  let x_127 : vec3<f32> = u_xlat2;
  let x_129 : vec3<f32> = vs_TEXCOORD3;
  u_xlat2 = (vec3<f32>(x_127.x, x_127.x, x_127.x) * x_129);
  let x_133 : f32 = vs_TEXCOORD7.y;
  let x_135 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat62 = (x_133 * x_135);
  let x_138 : f32 = x_44.unity_MatrixV[0i].z;
  let x_140 : f32 = vs_TEXCOORD7.x;
  let x_142 : f32 = u_xlat62;
  u_xlat62 = ((x_138 * x_140) + x_142);
  let x_145 : f32 = x_44.unity_MatrixV[2i].z;
  let x_147 : f32 = vs_TEXCOORD7.z;
  let x_149 : f32 = u_xlat62;
  u_xlat62 = ((x_145 * x_147) + x_149);
  let x_151 : f32 = u_xlat62;
  let x_154 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat62 = (x_151 + x_154);
  let x_156 : f32 = u_xlat62;
  let x_160 : f32 = x_44.x_ProjectionParams.y;
  u_xlat62 = (-(x_156) + -(x_160));
  let x_163 : f32 = u_xlat62;
  u_xlat62 = max(x_163, 0.0f);
  let x_165 : f32 = u_xlat62;
  let x_168 : f32 = x_44.unity_FogParams.x;
  u_xlat62 = (x_165 * x_168);
  let x_175 : vec4<f32> = vs_TEXCOORD0;
  let x_178 : f32 = x_44.x_GlobalMipBias.x;
  let x_179 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, vec2<f32>(x_175.z, x_175.w), x_178);
  u_xlat3 = vec3<f32>(x_179.x, x_179.y, x_179.z);
  let x_185 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_186 : vec2<f32> = vec2<f32>(x_185.x, x_185.y);
  let x_190 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_186.x, x_186.y));
  let x_191 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_190.x, x_190.y, x_191.z);
  let x_193 : vec3<f32> = u_xlat4;
  let x_195 : vec4<f32> = hlslcc_FragCoord;
  let x_197 : vec2<f32> = (vec2<f32>(x_193.x, x_193.y) * vec2<f32>(x_195.x, x_195.y));
  let x_198 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_197.x, x_197.y, x_198.z);
  let x_202 : f32 = u_xlat4.y;
  let x_205 : f32 = x_44.x_ScaleBiasRt.x;
  let x_208 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat63 = ((x_202 * x_205) + x_208);
  let x_210 : f32 = u_xlat63;
  u_xlat4.z = (-(x_210) + 1.0f);
  let x_214 : f32 = u_xlat1;
  u_xlat63 = ((-(x_214) * 0.959999979f) + 0.959999979f);
  let x_220 : f32 = u_xlat63;
  u_xlat24 = (-(x_220) + 1.0f);
  let x_224 : vec4<f32> = u_xlat0;
  let x_226 : f32 = u_xlat63;
  u_xlat5 = (vec3<f32>(x_224.x, x_224.y, x_224.z) * vec3<f32>(x_226, x_226, x_226));
  let x_229 : vec4<f32> = u_xlat0;
  let x_233 : vec3<f32> = (vec3<f32>(x_229.x, x_229.y, x_229.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_234 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_233.x, x_233.y, x_233.z, x_234.w);
  let x_236 : f32 = u_xlat1;
  let x_238 : vec4<f32> = u_xlat0;
  let x_243 : vec3<f32> = ((vec3<f32>(x_236, x_236, x_236) * vec3<f32>(x_238.x, x_238.y, x_238.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_244 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_243.x, x_243.y, x_243.z, x_244.w);
  let x_247 : f32 = u_xlat0.w;
  u_xlat1 = (-(x_247) + 1.0f);
  let x_250 : f32 = u_xlat1;
  let x_251 : f32 = u_xlat1;
  u_xlat63 = (x_250 * x_251);
  let x_253 : f32 = u_xlat63;
  u_xlat63 = max(x_253, 0.0078125f);
  let x_257 : f32 = u_xlat63;
  let x_258 : f32 = u_xlat63;
  u_xlat64 = (x_257 * x_258);
  let x_262 : f32 = u_xlat0.w;
  let x_263 : f32 = u_xlat24;
  u_xlat60 = (x_262 + x_263);
  let x_265 : f32 = u_xlat60;
  u_xlat60 = clamp(x_265, 0.0f, 1.0f);
  let x_267 : f32 = u_xlat63;
  u_xlat24 = ((x_267 * 4.0f) + 2.0f);
  let x_277 : vec3<f32> = u_xlat4;
  let x_280 : f32 = x_44.x_GlobalMipBias.x;
  let x_281 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_277.x, x_277.z), x_280);
  u_xlat4.x = x_281.x;
  let x_286 : f32 = u_xlat4.x;
  u_xlat44 = (x_286 + -1.0f);
  let x_291 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_292 : f32 = u_xlat44;
  u_xlat44 = ((x_291 * x_292) + 1.0f);
  let x_296 : f32 = u_xlat4.x;
  u_xlat4.x = min(x_296, 1.0f);
  let x_306 : f32 = x_304.x_MainLightShadowParams.y;
  u_xlatb65 = (0.0f < x_306);
  let x_308 : bool = u_xlatb65;
  if (x_308) {
    let x_312 : f32 = x_304.x_MainLightShadowParams.y;
    u_xlatb65 = (x_312 == 1.0f);
    let x_314 : bool = u_xlatb65;
    if (x_314) {
      let x_319 : vec4<f32> = vs_TEXCOORD8;
      let x_322 : vec4<f32> = x_304.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_319.x, x_319.y, x_319.x, x_319.y) + x_322);
      let x_325 : vec4<f32> = u_xlat6;
      let x_326 : vec2<f32> = vec2<f32>(x_325.x, x_325.y);
      let x_328 : f32 = vs_TEXCOORD8.z;
      txVec0 = vec3<f32>(x_326.x, x_326.y, x_328);
      let x_341 : vec3<f32> = txVec0;
      let x_343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_341.xy, x_341.z);
      u_xlat7.x = x_343;
      let x_346 : vec4<f32> = u_xlat6;
      let x_347 : vec2<f32> = vec2<f32>(x_346.z, x_346.w);
      let x_349 : f32 = vs_TEXCOORD8.z;
      txVec1 = vec3<f32>(x_347.x, x_347.y, x_349);
      let x_356 : vec3<f32> = txVec1;
      let x_358 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_356.xy, x_356.z);
      u_xlat7.y = x_358;
      let x_360 : vec4<f32> = vs_TEXCOORD8;
      let x_363 : vec4<f32> = x_304.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_360.x, x_360.y, x_360.x, x_360.y) + x_363);
      let x_366 : vec4<f32> = u_xlat6;
      let x_367 : vec2<f32> = vec2<f32>(x_366.x, x_366.y);
      let x_369 : f32 = vs_TEXCOORD8.z;
      txVec2 = vec3<f32>(x_367.x, x_367.y, x_369);
      let x_376 : vec3<f32> = txVec2;
      let x_378 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_376.xy, x_376.z);
      u_xlat7.z = x_378;
      let x_381 : vec4<f32> = u_xlat6;
      let x_382 : vec2<f32> = vec2<f32>(x_381.z, x_381.w);
      let x_384 : f32 = vs_TEXCOORD8.z;
      txVec3 = vec3<f32>(x_382.x, x_382.y, x_384);
      let x_391 : vec3<f32> = txVec3;
      let x_393 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_391.xy, x_391.z);
      u_xlat7.w = x_393;
      let x_396 : vec4<f32> = u_xlat7;
      u_xlat65 = dot(x_396, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_403 : f32 = x_304.x_MainLightShadowParams.y;
      u_xlatb6 = (x_403 == 2.0f);
      let x_405 : bool = u_xlatb6;
      if (x_405) {
        let x_408 : vec4<f32> = vs_TEXCOORD8;
        let x_411 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_416 : vec2<f32> = ((vec2<f32>(x_408.x, x_408.y) * vec2<f32>(x_411.z, x_411.w)) + vec2<f32>(0.5f, 0.5f));
        let x_417 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_416.x, x_416.y, x_417.z, x_417.w);
        let x_419 : vec4<f32> = u_xlat6;
        let x_421 : vec2<f32> = floor(vec2<f32>(x_419.x, x_419.y));
        let x_422 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_421.x, x_421.y, x_422.z, x_422.w);
        let x_426 : vec4<f32> = vs_TEXCOORD8;
        let x_429 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_432 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_426.x, x_426.y) * vec2<f32>(x_429.z, x_429.w)) + -(vec2<f32>(x_432.x, x_432.y)));
        let x_436 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_436.x, x_436.x, x_436.y, x_436.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_441 : vec4<f32> = u_xlat7;
        let x_443 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_441.x, x_441.x, x_441.z, x_441.z) * vec4<f32>(x_443.x, x_443.x, x_443.z, x_443.z));
        let x_446 : vec4<f32> = u_xlat8;
        let x_450 : vec2<f32> = (vec2<f32>(x_446.y, x_446.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_451 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_450.x, x_451.y, x_450.y, x_451.w);
        let x_453 : vec4<f32> = u_xlat8;
        let x_456 : vec2<f32> = u_xlat46;
        let x_458 : vec2<f32> = ((vec2<f32>(x_453.x, x_453.z) * vec2<f32>(0.5f, 0.5f)) + -(x_456));
        let x_459 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_458.x, x_458.y, x_459.z, x_459.w);
        let x_462 : vec2<f32> = u_xlat46;
        u_xlat48 = (-(x_462) + vec2<f32>(1.0f, 1.0f));
        let x_466 : vec2<f32> = u_xlat46;
        let x_468 : vec2<f32> = min(x_466, vec2<f32>(0.0f, 0.0f));
        let x_469 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_468.x, x_468.y, x_469.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat9;
        let x_474 : vec4<f32> = u_xlat9;
        let x_477 : vec2<f32> = u_xlat48;
        let x_478 : vec2<f32> = ((-(vec2<f32>(x_471.x, x_471.y)) * vec2<f32>(x_474.x, x_474.y)) + x_477);
        let x_479 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_478.x, x_478.y, x_479.z, x_479.w);
        let x_481 : vec2<f32> = u_xlat46;
        u_xlat46 = max(x_481, vec2<f32>(0.0f, 0.0f));
        let x_483 : vec2<f32> = u_xlat46;
        let x_485 : vec2<f32> = u_xlat46;
        let x_487 : vec4<f32> = u_xlat7;
        u_xlat46 = ((-(x_483) * x_485) + vec2<f32>(x_487.y, x_487.w));
        let x_490 : vec4<f32> = u_xlat9;
        let x_492 : vec2<f32> = (vec2<f32>(x_490.x, x_490.y) + vec2<f32>(1.0f, 1.0f));
        let x_493 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_492.x, x_492.y, x_493.z, x_493.w);
        let x_495 : vec2<f32> = u_xlat46;
        u_xlat46 = (x_495 + vec2<f32>(1.0f, 1.0f));
        let x_498 : vec4<f32> = u_xlat8;
        let x_502 : vec2<f32> = (vec2<f32>(x_498.x, x_498.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_503 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_502.x, x_502.y, x_503.z, x_503.w);
        let x_505 : vec2<f32> = u_xlat48;
        let x_506 : vec2<f32> = (x_505 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_507 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_506.x, x_506.y, x_507.z, x_507.w);
        let x_509 : vec4<f32> = u_xlat9;
        let x_511 : vec2<f32> = (vec2<f32>(x_509.x, x_509.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_512 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_511.x, x_511.y, x_512.z, x_512.w);
        let x_515 : vec2<f32> = u_xlat46;
        let x_516 : vec2<f32> = (x_515 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_517 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_516.x, x_516.y, x_517.z, x_517.w);
        let x_519 : vec4<f32> = u_xlat7;
        u_xlat46 = (vec2<f32>(x_519.y, x_519.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_523 : f32 = u_xlat9.x;
        u_xlat10.z = x_523;
        let x_526 : f32 = u_xlat46.x;
        u_xlat10.w = x_526;
        let x_529 : f32 = u_xlat11.x;
        u_xlat8.z = x_529;
        let x_532 : f32 = u_xlat7.x;
        u_xlat8.w = x_532;
        let x_535 : vec4<f32> = u_xlat8;
        let x_537 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_535.z, x_535.w, x_535.x, x_535.z) + vec4<f32>(x_537.z, x_537.w, x_537.x, x_537.z));
        let x_541 : f32 = u_xlat10.y;
        u_xlat9.z = x_541;
        let x_544 : f32 = u_xlat46.y;
        u_xlat9.w = x_544;
        let x_547 : f32 = u_xlat8.y;
        u_xlat11.z = x_547;
        let x_550 : f32 = u_xlat7.z;
        u_xlat11.w = x_550;
        let x_552 : vec4<f32> = u_xlat9;
        let x_554 : vec4<f32> = u_xlat11;
        let x_556 : vec3<f32> = (vec3<f32>(x_552.z, x_552.y, x_552.w) + vec3<f32>(x_554.z, x_554.y, x_554.w));
        let x_557 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_556.x, x_556.y, x_556.z, x_557.w);
        let x_559 : vec4<f32> = u_xlat8;
        let x_561 : vec4<f32> = u_xlat12;
        let x_563 : vec3<f32> = (vec3<f32>(x_559.x, x_559.z, x_559.w) / vec3<f32>(x_561.z, x_561.w, x_561.y));
        let x_564 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
        let x_566 : vec4<f32> = u_xlat8;
        let x_572 : vec3<f32> = (vec3<f32>(x_566.x, x_566.y, x_566.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_573 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_572.x, x_572.y, x_572.z, x_573.w);
        let x_575 : vec4<f32> = u_xlat11;
        let x_577 : vec4<f32> = u_xlat7;
        let x_579 : vec3<f32> = (vec3<f32>(x_575.z, x_575.y, x_575.w) / vec3<f32>(x_577.x, x_577.y, x_577.z));
        let x_580 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
        let x_582 : vec4<f32> = u_xlat9;
        let x_584 : vec3<f32> = (vec3<f32>(x_582.x, x_582.y, x_582.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_585 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_584.x, x_584.y, x_584.z, x_585.w);
        let x_587 : vec4<f32> = u_xlat8;
        let x_590 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_592 : vec3<f32> = (vec3<f32>(x_587.y, x_587.x, x_587.z) * vec3<f32>(x_590.x, x_590.x, x_590.x));
        let x_593 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_595 : vec4<f32> = u_xlat9;
        let x_598 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_600 : vec3<f32> = (vec3<f32>(x_595.x, x_595.y, x_595.z) * vec3<f32>(x_598.y, x_598.y, x_598.y));
        let x_601 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_600.x, x_600.y, x_600.z, x_601.w);
        let x_604 : f32 = u_xlat9.x;
        u_xlat8.w = x_604;
        let x_606 : vec4<f32> = u_xlat6;
        let x_609 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.y, x_612.w, x_612.x, x_612.w));
        let x_615 : vec4<f32> = u_xlat6;
        let x_618 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat8;
        u_xlat46 = ((vec2<f32>(x_615.x, x_615.y) * vec2<f32>(x_618.x, x_618.y)) + vec2<f32>(x_621.z, x_621.w));
        let x_625 : f32 = u_xlat8.y;
        u_xlat9.w = x_625;
        let x_627 : vec4<f32> = u_xlat9;
        let x_628 : vec2<f32> = vec2<f32>(x_627.y, x_627.z);
        let x_629 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_629.x, x_628.x, x_629.z, x_628.y);
        let x_631 : vec4<f32> = u_xlat6;
        let x_634 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_637 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_631.x, x_631.y, x_631.x, x_631.y) * vec4<f32>(x_634.x, x_634.y, x_634.x, x_634.y)) + vec4<f32>(x_637.x, x_637.y, x_637.z, x_637.y));
        let x_640 : vec4<f32> = u_xlat6;
        let x_643 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_646 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_640.x, x_640.y, x_640.x, x_640.y) * vec4<f32>(x_643.x, x_643.y, x_643.x, x_643.y)) + vec4<f32>(x_646.w, x_646.y, x_646.w, x_646.z));
        let x_649 : vec4<f32> = u_xlat6;
        let x_652 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_655 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_649.x, x_649.y, x_649.x, x_649.y) * vec4<f32>(x_652.x, x_652.y, x_652.x, x_652.y)) + vec4<f32>(x_655.x, x_655.w, x_655.z, x_655.w));
        let x_659 : vec4<f32> = u_xlat7;
        let x_661 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_659.x, x_659.x, x_659.x, x_659.y) * vec4<f32>(x_661.z, x_661.w, x_661.y, x_661.z));
        let x_665 : vec4<f32> = u_xlat7;
        let x_667 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_665.y, x_665.y, x_665.z, x_665.z) * x_667);
        let x_670 : f32 = u_xlat7.z;
        let x_672 : f32 = u_xlat12.y;
        u_xlat6.x = (x_670 * x_672);
        let x_676 : vec4<f32> = u_xlat10;
        let x_677 : vec2<f32> = vec2<f32>(x_676.x, x_676.y);
        let x_679 : f32 = vs_TEXCOORD8.z;
        txVec4 = vec3<f32>(x_677.x, x_677.y, x_679);
        let x_687 : vec3<f32> = txVec4;
        let x_689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_687.xy, x_687.z);
        u_xlat26 = x_689;
        let x_691 : vec4<f32> = u_xlat10;
        let x_692 : vec2<f32> = vec2<f32>(x_691.z, x_691.w);
        let x_694 : f32 = vs_TEXCOORD8.z;
        txVec5 = vec3<f32>(x_692.x, x_692.y, x_694);
        let x_701 : vec3<f32> = txVec5;
        let x_703 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_701.xy, x_701.z);
        u_xlat7.x = x_703;
        let x_706 : f32 = u_xlat7.x;
        let x_708 : f32 = u_xlat13.y;
        u_xlat7.x = (x_706 * x_708);
        let x_712 : f32 = u_xlat13.x;
        let x_713 : f32 = u_xlat26;
        let x_716 : f32 = u_xlat7.x;
        u_xlat26 = ((x_712 * x_713) + x_716);
        let x_719 : vec2<f32> = u_xlat46;
        let x_721 : f32 = vs_TEXCOORD8.z;
        txVec6 = vec3<f32>(x_719.x, x_719.y, x_721);
        let x_728 : vec3<f32> = txVec6;
        let x_730 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_728.xy, x_728.z);
        u_xlat46.x = x_730;
        let x_733 : f32 = u_xlat13.z;
        let x_735 : f32 = u_xlat46.x;
        let x_737 : f32 = u_xlat26;
        u_xlat26 = ((x_733 * x_735) + x_737);
        let x_740 : vec4<f32> = u_xlat9;
        let x_741 : vec2<f32> = vec2<f32>(x_740.x, x_740.y);
        let x_743 : f32 = vs_TEXCOORD8.z;
        txVec7 = vec3<f32>(x_741.x, x_741.y, x_743);
        let x_750 : vec3<f32> = txVec7;
        let x_752 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_750.xy, x_750.z);
        u_xlat46.x = x_752;
        let x_755 : f32 = u_xlat13.w;
        let x_757 : f32 = u_xlat46.x;
        let x_759 : f32 = u_xlat26;
        u_xlat26 = ((x_755 * x_757) + x_759);
        let x_762 : vec4<f32> = u_xlat11;
        let x_763 : vec2<f32> = vec2<f32>(x_762.x, x_762.y);
        let x_765 : f32 = vs_TEXCOORD8.z;
        txVec8 = vec3<f32>(x_763.x, x_763.y, x_765);
        let x_772 : vec3<f32> = txVec8;
        let x_774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_772.xy, x_772.z);
        u_xlat46.x = x_774;
        let x_777 : f32 = u_xlat14.x;
        let x_779 : f32 = u_xlat46.x;
        let x_781 : f32 = u_xlat26;
        u_xlat26 = ((x_777 * x_779) + x_781);
        let x_784 : vec4<f32> = u_xlat11;
        let x_785 : vec2<f32> = vec2<f32>(x_784.z, x_784.w);
        let x_787 : f32 = vs_TEXCOORD8.z;
        txVec9 = vec3<f32>(x_785.x, x_785.y, x_787);
        let x_794 : vec3<f32> = txVec9;
        let x_796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_794.xy, x_794.z);
        u_xlat46.x = x_796;
        let x_799 : f32 = u_xlat14.y;
        let x_801 : f32 = u_xlat46.x;
        let x_803 : f32 = u_xlat26;
        u_xlat26 = ((x_799 * x_801) + x_803);
        let x_806 : vec4<f32> = u_xlat9;
        let x_807 : vec2<f32> = vec2<f32>(x_806.z, x_806.w);
        let x_809 : f32 = vs_TEXCOORD8.z;
        txVec10 = vec3<f32>(x_807.x, x_807.y, x_809);
        let x_816 : vec3<f32> = txVec10;
        let x_818 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_816.xy, x_816.z);
        u_xlat46.x = x_818;
        let x_821 : f32 = u_xlat14.z;
        let x_823 : f32 = u_xlat46.x;
        let x_825 : f32 = u_xlat26;
        u_xlat26 = ((x_821 * x_823) + x_825);
        let x_828 : vec4<f32> = u_xlat8;
        let x_829 : vec2<f32> = vec2<f32>(x_828.x, x_828.y);
        let x_831 : f32 = vs_TEXCOORD8.z;
        txVec11 = vec3<f32>(x_829.x, x_829.y, x_831);
        let x_838 : vec3<f32> = txVec11;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat46.x = x_840;
        let x_843 : f32 = u_xlat14.w;
        let x_845 : f32 = u_xlat46.x;
        let x_847 : f32 = u_xlat26;
        u_xlat26 = ((x_843 * x_845) + x_847);
        let x_850 : vec4<f32> = u_xlat8;
        let x_851 : vec2<f32> = vec2<f32>(x_850.z, x_850.w);
        let x_853 : f32 = vs_TEXCOORD8.z;
        txVec12 = vec3<f32>(x_851.x, x_851.y, x_853);
        let x_860 : vec3<f32> = txVec12;
        let x_862 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_860.xy, x_860.z);
        u_xlat46.x = x_862;
        let x_865 : f32 = u_xlat6.x;
        let x_867 : f32 = u_xlat46.x;
        let x_869 : f32 = u_xlat26;
        u_xlat65 = ((x_865 * x_867) + x_869);
      } else {
        let x_872 : vec4<f32> = vs_TEXCOORD8;
        let x_875 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_878 : vec2<f32> = ((vec2<f32>(x_872.x, x_872.y) * vec2<f32>(x_875.z, x_875.w)) + vec2<f32>(0.5f, 0.5f));
        let x_879 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_878.x, x_878.y, x_879.z, x_879.w);
        let x_881 : vec4<f32> = u_xlat6;
        let x_883 : vec2<f32> = floor(vec2<f32>(x_881.x, x_881.y));
        let x_884 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_883.x, x_883.y, x_884.z, x_884.w);
        let x_886 : vec4<f32> = vs_TEXCOORD8;
        let x_889 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_892 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_886.x, x_886.y) * vec2<f32>(x_889.z, x_889.w)) + -(vec2<f32>(x_892.x, x_892.y)));
        let x_896 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_896.x, x_896.x, x_896.y, x_896.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_899 : vec4<f32> = u_xlat7;
        let x_901 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_899.x, x_899.x, x_899.z, x_899.z) * vec4<f32>(x_901.x, x_901.x, x_901.z, x_901.z));
        let x_904 : vec4<f32> = u_xlat8;
        let x_908 : vec2<f32> = (vec2<f32>(x_904.y, x_904.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_909 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_909.x, x_908.x, x_909.z, x_908.y);
        let x_911 : vec4<f32> = u_xlat8;
        let x_914 : vec2<f32> = u_xlat46;
        let x_916 : vec2<f32> = ((vec2<f32>(x_911.x, x_911.z) * vec2<f32>(0.5f, 0.5f)) + -(x_914));
        let x_917 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_916.x, x_917.y, x_916.y, x_917.w);
        let x_919 : vec2<f32> = u_xlat46;
        let x_921 : vec2<f32> = (-(x_919) + vec2<f32>(1.0f, 1.0f));
        let x_922 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_921.x, x_921.y, x_922.z, x_922.w);
        let x_924 : vec2<f32> = u_xlat46;
        u_xlat48 = min(x_924, vec2<f32>(0.0f, 0.0f));
        let x_926 : vec2<f32> = u_xlat48;
        let x_928 : vec2<f32> = u_xlat48;
        let x_930 : vec4<f32> = u_xlat8;
        let x_932 : vec2<f32> = ((-(x_926) * x_928) + vec2<f32>(x_930.x, x_930.y));
        let x_933 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_932.x, x_932.y, x_933.z, x_933.w);
        let x_935 : vec2<f32> = u_xlat46;
        u_xlat48 = max(x_935, vec2<f32>(0.0f, 0.0f));
        let x_938 : vec2<f32> = u_xlat48;
        let x_940 : vec2<f32> = u_xlat48;
        let x_942 : vec4<f32> = u_xlat7;
        let x_944 : vec2<f32> = ((-(x_938) * x_940) + vec2<f32>(x_942.y, x_942.w));
        let x_945 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_944.x, x_945.y, x_944.y);
        let x_947 : vec4<f32> = u_xlat8;
        let x_950 : vec2<f32> = (vec2<f32>(x_947.x, x_947.y) + vec2<f32>(2.0f, 2.0f));
        let x_951 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_950.x, x_950.y, x_951.z, x_951.w);
        let x_953 : vec3<f32> = u_xlat27;
        let x_955 : vec2<f32> = (vec2<f32>(x_953.x, x_953.z) + vec2<f32>(2.0f, 2.0f));
        let x_956 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_956.x, x_955.x, x_956.z, x_955.y);
        let x_959 : f32 = u_xlat7.y;
        u_xlat10.z = (x_959 * 0.081632003f);
        let x_963 : vec4<f32> = u_xlat7;
        let x_966 : vec3<f32> = (vec3<f32>(x_963.z, x_963.x, x_963.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_967 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_966.x, x_966.y, x_966.z, x_967.w);
        let x_969 : vec4<f32> = u_xlat8;
        let x_972 : vec2<f32> = (vec2<f32>(x_969.x, x_969.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_973 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_972.x, x_972.y, x_973.z, x_973.w);
        let x_976 : f32 = u_xlat11.y;
        u_xlat10.x = x_976;
        let x_978 : vec2<f32> = u_xlat46;
        let x_985 : vec2<f32> = ((vec2<f32>(x_978.x, x_978.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_986 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_986.x, x_985.x, x_986.z, x_985.y);
        let x_988 : vec2<f32> = u_xlat46;
        let x_992 : vec2<f32> = ((vec2<f32>(x_988.x, x_988.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_993 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_992.x, x_993.y, x_992.y, x_993.w);
        let x_996 : f32 = u_xlat7.x;
        u_xlat8.y = x_996;
        let x_999 : f32 = u_xlat9.y;
        u_xlat8.w = x_999;
        let x_1001 : vec4<f32> = u_xlat8;
        let x_1002 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1001 + x_1002);
        let x_1004 : vec2<f32> = u_xlat46;
        let x_1007 : vec2<f32> = ((vec2<f32>(x_1004.y, x_1004.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1008 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1008.x, x_1007.x, x_1008.z, x_1007.y);
        let x_1010 : vec2<f32> = u_xlat46;
        let x_1013 : vec2<f32> = ((vec2<f32>(x_1010.y, x_1010.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1014 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1013.x, x_1014.y, x_1013.y, x_1014.w);
        let x_1017 : f32 = u_xlat7.y;
        u_xlat9.y = x_1017;
        let x_1019 : vec4<f32> = u_xlat9;
        let x_1020 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1019 + x_1020);
        let x_1022 : vec4<f32> = u_xlat8;
        let x_1023 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1022 / x_1023);
        let x_1025 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1025 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1031 : vec4<f32> = u_xlat9;
        let x_1032 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1031 / x_1032);
        let x_1034 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1034 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1036 : vec4<f32> = u_xlat8;
        let x_1039 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1036.w, x_1036.x, x_1036.y, x_1036.z) * vec4<f32>(x_1039.x, x_1039.x, x_1039.x, x_1039.x));
        let x_1042 : vec4<f32> = u_xlat9;
        let x_1045 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1042.x, x_1042.w, x_1042.y, x_1042.z) * vec4<f32>(x_1045.y, x_1045.y, x_1045.y, x_1045.y));
        let x_1048 : vec4<f32> = u_xlat8;
        let x_1049 : vec3<f32> = vec3<f32>(x_1048.y, x_1048.z, x_1048.w);
        let x_1050 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1049.x, x_1050.y, x_1049.y, x_1049.z);
        let x_1053 : f32 = u_xlat9.x;
        u_xlat11.y = x_1053;
        let x_1055 : vec4<f32> = u_xlat6;
        let x_1058 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1055.x, x_1055.y, x_1055.x, x_1055.y) * vec4<f32>(x_1058.x, x_1058.y, x_1058.x, x_1058.y)) + vec4<f32>(x_1061.x, x_1061.y, x_1061.z, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat6;
        let x_1067 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1070 : vec4<f32> = u_xlat11;
        u_xlat46 = ((vec2<f32>(x_1064.x, x_1064.y) * vec2<f32>(x_1067.x, x_1067.y)) + vec2<f32>(x_1070.w, x_1070.y));
        let x_1074 : f32 = u_xlat11.y;
        u_xlat8.y = x_1074;
        let x_1077 : f32 = u_xlat9.z;
        u_xlat11.y = x_1077;
        let x_1079 : vec4<f32> = u_xlat6;
        let x_1082 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1085 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1079.x, x_1079.y, x_1079.x, x_1079.y) * vec4<f32>(x_1082.x, x_1082.y, x_1082.x, x_1082.y)) + vec4<f32>(x_1085.x, x_1085.y, x_1085.z, x_1085.y));
        let x_1088 : vec4<f32> = u_xlat6;
        let x_1091 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        let x_1096 : vec2<f32> = ((vec2<f32>(x_1088.x, x_1088.y) * vec2<f32>(x_1091.x, x_1091.y)) + vec2<f32>(x_1094.w, x_1094.y));
        let x_1097 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1096.x, x_1096.y, x_1097.z, x_1097.w);
        let x_1100 : f32 = u_xlat11.y;
        u_xlat8.z = x_1100;
        let x_1103 : vec4<f32> = u_xlat6;
        let x_1106 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1109 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y) * vec4<f32>(x_1106.x, x_1106.y, x_1106.x, x_1106.y)) + vec4<f32>(x_1109.x, x_1109.y, x_1109.x, x_1109.z));
        let x_1113 : f32 = u_xlat9.w;
        u_xlat11.y = x_1113;
        let x_1116 : vec4<f32> = u_xlat6;
        let x_1119 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1116.x, x_1116.y, x_1116.x, x_1116.y) * vec4<f32>(x_1119.x, x_1119.y, x_1119.x, x_1119.y)) + vec4<f32>(x_1122.x, x_1122.y, x_1122.z, x_1122.y));
        let x_1126 : vec4<f32> = u_xlat6;
        let x_1129 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1132 : vec4<f32> = u_xlat11;
        let x_1134 : vec2<f32> = ((vec2<f32>(x_1126.x, x_1126.y) * vec2<f32>(x_1129.x, x_1129.y)) + vec2<f32>(x_1132.w, x_1132.y));
        let x_1135 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_1134.x, x_1134.y, x_1135.z);
        let x_1138 : f32 = u_xlat11.y;
        u_xlat8.w = x_1138;
        let x_1141 : vec4<f32> = u_xlat6;
        let x_1144 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1147 : vec4<f32> = u_xlat8;
        u_xlat54 = ((vec2<f32>(x_1141.x, x_1141.y) * vec2<f32>(x_1144.x, x_1144.y)) + vec2<f32>(x_1147.x, x_1147.w));
        let x_1150 : vec4<f32> = u_xlat11;
        let x_1151 : vec3<f32> = vec3<f32>(x_1150.x, x_1150.z, x_1150.w);
        let x_1152 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1151.x, x_1152.y, x_1151.y, x_1151.z);
        let x_1154 : vec4<f32> = u_xlat6;
        let x_1157 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1160 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.y) * vec4<f32>(x_1157.x, x_1157.y, x_1157.x, x_1157.y)) + vec4<f32>(x_1160.x, x_1160.y, x_1160.z, x_1160.y));
        let x_1164 : vec4<f32> = u_xlat6;
        let x_1167 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1170 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1164.x, x_1164.y) * vec2<f32>(x_1167.x, x_1167.y)) + vec2<f32>(x_1170.w, x_1170.y));
        let x_1174 : f32 = u_xlat8.x;
        u_xlat9.x = x_1174;
        let x_1176 : vec4<f32> = u_xlat6;
        let x_1179 : vec4<f32> = x_304.x_MainLightShadowmapSize;
        let x_1182 : vec4<f32> = u_xlat9;
        let x_1184 : vec2<f32> = ((vec2<f32>(x_1176.x, x_1176.y) * vec2<f32>(x_1179.x, x_1179.y)) + vec2<f32>(x_1182.x, x_1182.y));
        let x_1185 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1184.x, x_1184.y, x_1185.z, x_1185.w);
        let x_1188 : vec4<f32> = u_xlat7;
        let x_1190 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1188.x, x_1188.x, x_1188.x, x_1188.x) * x_1190);
        let x_1193 : vec4<f32> = u_xlat7;
        let x_1195 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1193.y, x_1193.y, x_1193.y, x_1193.y) * x_1195);
        let x_1198 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1198.z, x_1198.z, x_1198.z, x_1198.z) * x_1200);
        let x_1202 : vec4<f32> = u_xlat7;
        let x_1204 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1202.w, x_1202.w, x_1202.w, x_1202.w) * x_1204);
        let x_1207 : vec4<f32> = u_xlat12;
        let x_1208 : vec2<f32> = vec2<f32>(x_1207.x, x_1207.y);
        let x_1210 : f32 = vs_TEXCOORD8.z;
        txVec13 = vec3<f32>(x_1208.x, x_1208.y, x_1210);
        let x_1217 : vec3<f32> = txVec13;
        let x_1219 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1217.xy, x_1217.z);
        u_xlat8.x = x_1219;
        let x_1222 : vec4<f32> = u_xlat12;
        let x_1223 : vec2<f32> = vec2<f32>(x_1222.z, x_1222.w);
        let x_1225 : f32 = vs_TEXCOORD8.z;
        txVec14 = vec3<f32>(x_1223.x, x_1223.y, x_1225);
        let x_1233 : vec3<f32> = txVec14;
        let x_1235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1233.xy, x_1233.z);
        u_xlat68 = x_1235;
        let x_1236 : f32 = u_xlat68;
        let x_1238 : f32 = u_xlat17.y;
        u_xlat68 = (x_1236 * x_1238);
        let x_1241 : f32 = u_xlat17.x;
        let x_1243 : f32 = u_xlat8.x;
        let x_1245 : f32 = u_xlat68;
        u_xlat8.x = ((x_1241 * x_1243) + x_1245);
        let x_1249 : vec2<f32> = u_xlat46;
        let x_1251 : f32 = vs_TEXCOORD8.z;
        txVec15 = vec3<f32>(x_1249.x, x_1249.y, x_1251);
        let x_1258 : vec3<f32> = txVec15;
        let x_1260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1258.xy, x_1258.z);
        u_xlat46.x = x_1260;
        let x_1263 : f32 = u_xlat17.z;
        let x_1265 : f32 = u_xlat46.x;
        let x_1268 : f32 = u_xlat8.x;
        u_xlat46.x = ((x_1263 * x_1265) + x_1268);
        let x_1272 : vec4<f32> = u_xlat15;
        let x_1273 : vec2<f32> = vec2<f32>(x_1272.x, x_1272.y);
        let x_1275 : f32 = vs_TEXCOORD8.z;
        txVec16 = vec3<f32>(x_1273.x, x_1273.y, x_1275);
        let x_1283 : vec3<f32> = txVec16;
        let x_1285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1283.xy, x_1283.z);
        u_xlat66 = x_1285;
        let x_1287 : f32 = u_xlat17.w;
        let x_1288 : f32 = u_xlat66;
        let x_1291 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1287 * x_1288) + x_1291);
        let x_1295 : vec4<f32> = u_xlat13;
        let x_1296 : vec2<f32> = vec2<f32>(x_1295.x, x_1295.y);
        let x_1298 : f32 = vs_TEXCOORD8.z;
        txVec17 = vec3<f32>(x_1296.x, x_1296.y, x_1298);
        let x_1305 : vec3<f32> = txVec17;
        let x_1307 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1305.xy, x_1305.z);
        u_xlat66 = x_1307;
        let x_1309 : f32 = u_xlat18.x;
        let x_1310 : f32 = u_xlat66;
        let x_1313 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1309 * x_1310) + x_1313);
        let x_1317 : vec4<f32> = u_xlat13;
        let x_1318 : vec2<f32> = vec2<f32>(x_1317.z, x_1317.w);
        let x_1320 : f32 = vs_TEXCOORD8.z;
        txVec18 = vec3<f32>(x_1318.x, x_1318.y, x_1320);
        let x_1327 : vec3<f32> = txVec18;
        let x_1329 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1327.xy, x_1327.z);
        u_xlat66 = x_1329;
        let x_1331 : f32 = u_xlat18.y;
        let x_1332 : f32 = u_xlat66;
        let x_1335 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1331 * x_1332) + x_1335);
        let x_1339 : vec4<f32> = u_xlat14;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.x, x_1339.y);
        let x_1342 : f32 = vs_TEXCOORD8.z;
        txVec19 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec19;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat66 = x_1351;
        let x_1353 : f32 = u_xlat18.z;
        let x_1354 : f32 = u_xlat66;
        let x_1357 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1353 * x_1354) + x_1357);
        let x_1361 : vec4<f32> = u_xlat15;
        let x_1362 : vec2<f32> = vec2<f32>(x_1361.z, x_1361.w);
        let x_1364 : f32 = vs_TEXCOORD8.z;
        txVec20 = vec3<f32>(x_1362.x, x_1362.y, x_1364);
        let x_1371 : vec3<f32> = txVec20;
        let x_1373 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1371.xy, x_1371.z);
        u_xlat66 = x_1373;
        let x_1375 : f32 = u_xlat18.w;
        let x_1376 : f32 = u_xlat66;
        let x_1379 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1375 * x_1376) + x_1379);
        let x_1383 : vec4<f32> = u_xlat16;
        let x_1384 : vec2<f32> = vec2<f32>(x_1383.x, x_1383.y);
        let x_1386 : f32 = vs_TEXCOORD8.z;
        txVec21 = vec3<f32>(x_1384.x, x_1384.y, x_1386);
        let x_1393 : vec3<f32> = txVec21;
        let x_1395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1393.xy, x_1393.z);
        u_xlat66 = x_1395;
        let x_1397 : f32 = u_xlat19.x;
        let x_1398 : f32 = u_xlat66;
        let x_1401 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1397 * x_1398) + x_1401);
        let x_1405 : vec4<f32> = u_xlat16;
        let x_1406 : vec2<f32> = vec2<f32>(x_1405.z, x_1405.w);
        let x_1408 : f32 = vs_TEXCOORD8.z;
        txVec22 = vec3<f32>(x_1406.x, x_1406.y, x_1408);
        let x_1415 : vec3<f32> = txVec22;
        let x_1417 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1415.xy, x_1415.z);
        u_xlat66 = x_1417;
        let x_1419 : f32 = u_xlat19.y;
        let x_1420 : f32 = u_xlat66;
        let x_1423 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1419 * x_1420) + x_1423);
        let x_1427 : vec3<f32> = u_xlat28;
        let x_1428 : vec2<f32> = vec2<f32>(x_1427.x, x_1427.y);
        let x_1430 : f32 = vs_TEXCOORD8.z;
        txVec23 = vec3<f32>(x_1428.x, x_1428.y, x_1430);
        let x_1437 : vec3<f32> = txVec23;
        let x_1439 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1437.xy, x_1437.z);
        u_xlat66 = x_1439;
        let x_1441 : f32 = u_xlat19.z;
        let x_1442 : f32 = u_xlat66;
        let x_1445 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1441 * x_1442) + x_1445);
        let x_1449 : vec2<f32> = u_xlat54;
        let x_1451 : f32 = vs_TEXCOORD8.z;
        txVec24 = vec3<f32>(x_1449.x, x_1449.y, x_1451);
        let x_1458 : vec3<f32> = txVec24;
        let x_1460 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1458.xy, x_1458.z);
        u_xlat66 = x_1460;
        let x_1462 : f32 = u_xlat19.w;
        let x_1463 : f32 = u_xlat66;
        let x_1466 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1462 * x_1463) + x_1466);
        let x_1470 : vec4<f32> = u_xlat11;
        let x_1471 : vec2<f32> = vec2<f32>(x_1470.x, x_1470.y);
        let x_1473 : f32 = vs_TEXCOORD8.z;
        txVec25 = vec3<f32>(x_1471.x, x_1471.y, x_1473);
        let x_1480 : vec3<f32> = txVec25;
        let x_1482 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1480.xy, x_1480.z);
        u_xlat66 = x_1482;
        let x_1484 : f32 = u_xlat7.x;
        let x_1485 : f32 = u_xlat66;
        let x_1488 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1484 * x_1485) + x_1488);
        let x_1492 : vec4<f32> = u_xlat11;
        let x_1493 : vec2<f32> = vec2<f32>(x_1492.z, x_1492.w);
        let x_1495 : f32 = vs_TEXCOORD8.z;
        txVec26 = vec3<f32>(x_1493.x, x_1493.y, x_1495);
        let x_1502 : vec3<f32> = txVec26;
        let x_1504 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1502.xy, x_1502.z);
        u_xlat66 = x_1504;
        let x_1506 : f32 = u_xlat7.y;
        let x_1507 : f32 = u_xlat66;
        let x_1510 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1506 * x_1507) + x_1510);
        let x_1514 : vec2<f32> = u_xlat49;
        let x_1516 : f32 = vs_TEXCOORD8.z;
        txVec27 = vec3<f32>(x_1514.x, x_1514.y, x_1516);
        let x_1523 : vec3<f32> = txVec27;
        let x_1525 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1523.xy, x_1523.z);
        u_xlat66 = x_1525;
        let x_1527 : f32 = u_xlat7.z;
        let x_1528 : f32 = u_xlat66;
        let x_1531 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1527 * x_1528) + x_1531);
        let x_1535 : vec4<f32> = u_xlat6;
        let x_1536 : vec2<f32> = vec2<f32>(x_1535.x, x_1535.y);
        let x_1538 : f32 = vs_TEXCOORD8.z;
        txVec28 = vec3<f32>(x_1536.x, x_1536.y, x_1538);
        let x_1545 : vec3<f32> = txVec28;
        let x_1547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1545.xy, x_1545.z);
        u_xlat6.x = x_1547;
        let x_1550 : f32 = u_xlat7.w;
        let x_1552 : f32 = u_xlat6.x;
        let x_1555 : f32 = u_xlat46.x;
        u_xlat65 = ((x_1550 * x_1552) + x_1555);
      }
    }
  } else {
    let x_1559 : vec4<f32> = vs_TEXCOORD8;
    let x_1560 : vec2<f32> = vec2<f32>(x_1559.x, x_1559.y);
    let x_1562 : f32 = vs_TEXCOORD8.z;
    txVec29 = vec3<f32>(x_1560.x, x_1560.y, x_1562);
    let x_1569 : vec3<f32> = txVec29;
    let x_1571 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1569.xy, x_1569.z);
    u_xlat65 = x_1571;
  }
  let x_1573 : f32 = x_304.x_MainLightShadowParams.x;
  u_xlat6.x = (-(x_1573) + 1.0f);
  let x_1577 : f32 = u_xlat65;
  let x_1579 : f32 = x_304.x_MainLightShadowParams.x;
  let x_1582 : f32 = u_xlat6.x;
  u_xlat65 = ((x_1577 * x_1579) + x_1582);
  let x_1585 : f32 = vs_TEXCOORD8.z;
  u_xlatb6 = (0.0f >= x_1585);
  let x_1589 : f32 = vs_TEXCOORD8.z;
  u_xlatb26 = (x_1589 >= 1.0f);
  let x_1591 : bool = u_xlatb26;
  let x_1592 : bool = u_xlatb6;
  u_xlatb6 = (x_1591 | x_1592);
  let x_1594 : bool = u_xlatb6;
  let x_1595 : f32 = u_xlat65;
  u_xlat65 = select(x_1595, 1.0f, x_1594);
  let x_1597 : vec3<f32> = vs_TEXCOORD7;
  let x_1599 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_1601 : vec3<f32> = (x_1597 + -(x_1599));
  let x_1602 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1601.x, x_1601.y, x_1601.z, x_1602.w);
  let x_1604 : vec4<f32> = u_xlat6;
  let x_1606 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_1604.x, x_1604.y, x_1604.z), vec3<f32>(x_1606.x, x_1606.y, x_1606.z));
  let x_1611 : f32 = u_xlat6.x;
  let x_1613 : f32 = x_304.x_MainLightShadowParams.z;
  let x_1616 : f32 = x_304.x_MainLightShadowParams.w;
  u_xlat6.x = ((x_1611 * x_1613) + x_1616);
  let x_1620 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1620, 0.0f, 1.0f);
  let x_1623 : f32 = u_xlat65;
  u_xlat26 = (-(x_1623) + 1.0f);
  let x_1627 : f32 = u_xlat6.x;
  let x_1628 : f32 = u_xlat26;
  let x_1630 : f32 = u_xlat65;
  u_xlat65 = ((x_1627 * x_1628) + x_1630);
  let x_1632 : f32 = u_xlat44;
  let x_1635 : vec4<f32> = x_44.x_MainLightColor;
  let x_1637 : vec3<f32> = (vec3<f32>(x_1632, x_1632, x_1632) * vec3<f32>(x_1635.x, x_1635.y, x_1635.z));
  let x_1638 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1637.x, x_1637.y, x_1637.z, x_1638.w);
  let x_1640 : vec3<f32> = u_xlat21;
  let x_1642 : vec3<f32> = u_xlat2;
  u_xlat66 = dot(-(x_1640), x_1642);
  let x_1644 : f32 = u_xlat66;
  let x_1645 : f32 = u_xlat66;
  u_xlat66 = (x_1644 + x_1645);
  let x_1647 : vec3<f32> = u_xlat2;
  let x_1648 : f32 = u_xlat66;
  let x_1652 : vec3<f32> = u_xlat21;
  let x_1654 : vec3<f32> = ((x_1647 * -(vec3<f32>(x_1648, x_1648, x_1648))) + -(x_1652));
  let x_1655 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1654.x, x_1654.y, x_1654.z, x_1655.w);
  let x_1657 : vec3<f32> = u_xlat2;
  let x_1658 : vec3<f32> = u_xlat21;
  u_xlat66 = dot(x_1657, x_1658);
  let x_1660 : f32 = u_xlat66;
  u_xlat66 = clamp(x_1660, 0.0f, 1.0f);
  let x_1662 : f32 = u_xlat66;
  u_xlat66 = (-(x_1662) + 1.0f);
  let x_1665 : f32 = u_xlat66;
  let x_1666 : f32 = u_xlat66;
  u_xlat66 = (x_1665 * x_1666);
  let x_1668 : f32 = u_xlat66;
  let x_1669 : f32 = u_xlat66;
  u_xlat66 = (x_1668 * x_1669);
  let x_1672 : f32 = u_xlat1;
  u_xlat67 = ((-(x_1672) * 0.699999988f) + 1.700000048f);
  let x_1678 : f32 = u_xlat1;
  let x_1679 : f32 = u_xlat67;
  u_xlat1 = (x_1678 * x_1679);
  let x_1681 : f32 = u_xlat1;
  u_xlat1 = (x_1681 * 6.0f);
  let x_1692 : vec4<f32> = u_xlat7;
  let x_1694 : f32 = u_xlat1;
  let x_1695 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1692.x, x_1692.y, x_1692.z), x_1694);
  u_xlat7 = x_1695;
  let x_1697 : f32 = u_xlat7.w;
  u_xlat1 = (x_1697 + -1.0f);
  let x_1704 : f32 = x_1702.unity_SpecCube0_HDR.w;
  let x_1705 : f32 = u_xlat1;
  u_xlat1 = ((x_1704 * x_1705) + 1.0f);
  let x_1708 : f32 = u_xlat1;
  u_xlat1 = max(x_1708, 0.0f);
  let x_1710 : f32 = u_xlat1;
  u_xlat1 = log2(x_1710);
  let x_1712 : f32 = u_xlat1;
  let x_1714 : f32 = x_1702.unity_SpecCube0_HDR.y;
  u_xlat1 = (x_1712 * x_1714);
  let x_1716 : f32 = u_xlat1;
  u_xlat1 = exp2(x_1716);
  let x_1718 : f32 = u_xlat1;
  let x_1720 : f32 = x_1702.unity_SpecCube0_HDR.x;
  u_xlat1 = (x_1718 * x_1720);
  let x_1722 : vec4<f32> = u_xlat7;
  let x_1724 : f32 = u_xlat1;
  let x_1726 : vec3<f32> = (vec3<f32>(x_1722.x, x_1722.y, x_1722.z) * vec3<f32>(x_1724, x_1724, x_1724));
  let x_1727 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1726.x, x_1726.y, x_1726.z, x_1727.w);
  let x_1729 : f32 = u_xlat63;
  let x_1731 : f32 = u_xlat63;
  let x_1735 : vec2<f32> = ((vec2<f32>(x_1729, x_1729) * vec2<f32>(x_1731, x_1731)) + vec2<f32>(-1.0f, 1.0f));
  let x_1736 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1735.x, x_1735.y, x_1736.z, x_1736.w);
  let x_1739 : f32 = u_xlat8.y;
  u_xlat1 = (1.0f / x_1739);
  let x_1741 : vec4<f32> = u_xlat0;
  let x_1744 : f32 = u_xlat60;
  u_xlat28 = (-(vec3<f32>(x_1741.x, x_1741.y, x_1741.z)) + vec3<f32>(x_1744, x_1744, x_1744));
  let x_1747 : f32 = u_xlat66;
  let x_1749 : vec3<f32> = u_xlat28;
  let x_1751 : vec4<f32> = u_xlat0;
  u_xlat28 = ((vec3<f32>(x_1747, x_1747, x_1747) * x_1749) + vec3<f32>(x_1751.x, x_1751.y, x_1751.z));
  let x_1754 : f32 = u_xlat1;
  let x_1756 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_1754, x_1754, x_1754) * x_1756);
  let x_1758 : vec4<f32> = u_xlat7;
  let x_1760 : vec3<f32> = u_xlat28;
  let x_1761 : vec3<f32> = (vec3<f32>(x_1758.x, x_1758.y, x_1758.z) * x_1760);
  let x_1762 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1761.x, x_1761.y, x_1761.z, x_1762.w);
  let x_1764 : vec3<f32> = u_xlat3;
  let x_1765 : vec3<f32> = u_xlat5;
  let x_1767 : vec4<f32> = u_xlat7;
  u_xlat3 = ((x_1764 * x_1765) + vec3<f32>(x_1767.x, x_1767.y, x_1767.z));
  let x_1770 : f32 = u_xlat65;
  let x_1773 : f32 = x_1702.unity_LightData.z;
  u_xlat60 = (x_1770 * x_1773);
  let x_1775 : vec3<f32> = u_xlat2;
  let x_1777 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat1 = dot(x_1775, vec3<f32>(x_1777.x, x_1777.y, x_1777.z));
  let x_1780 : f32 = u_xlat1;
  u_xlat1 = clamp(x_1780, 0.0f, 1.0f);
  let x_1782 : f32 = u_xlat60;
  let x_1783 : f32 = u_xlat1;
  u_xlat60 = (x_1782 * x_1783);
  let x_1785 : f32 = u_xlat60;
  let x_1787 : vec4<f32> = u_xlat6;
  let x_1789 : vec3<f32> = (vec3<f32>(x_1785, x_1785, x_1785) * vec3<f32>(x_1787.x, x_1787.y, x_1787.z));
  let x_1790 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1789.x, x_1789.y, x_1789.z, x_1790.w);
  let x_1792 : vec3<f32> = u_xlat21;
  let x_1794 : vec4<f32> = x_44.x_MainLightPosition;
  let x_1796 : vec3<f32> = (x_1792 + vec3<f32>(x_1794.x, x_1794.y, x_1794.z));
  let x_1797 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1796.x, x_1796.y, x_1796.z, x_1797.w);
  let x_1799 : vec4<f32> = u_xlat7;
  let x_1801 : vec4<f32> = u_xlat7;
  u_xlat60 = dot(vec3<f32>(x_1799.x, x_1799.y, x_1799.z), vec3<f32>(x_1801.x, x_1801.y, x_1801.z));
  let x_1804 : f32 = u_xlat60;
  u_xlat60 = max(x_1804, 1.17549435e-37f);
  let x_1807 : f32 = u_xlat60;
  u_xlat60 = inverseSqrt(x_1807);
  let x_1809 : f32 = u_xlat60;
  let x_1811 : vec4<f32> = u_xlat7;
  let x_1813 : vec3<f32> = (vec3<f32>(x_1809, x_1809, x_1809) * vec3<f32>(x_1811.x, x_1811.y, x_1811.z));
  let x_1814 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1813.x, x_1813.y, x_1813.z, x_1814.w);
  let x_1816 : vec3<f32> = u_xlat2;
  let x_1817 : vec4<f32> = u_xlat7;
  u_xlat60 = dot(x_1816, vec3<f32>(x_1817.x, x_1817.y, x_1817.z));
  let x_1820 : f32 = u_xlat60;
  u_xlat60 = clamp(x_1820, 0.0f, 1.0f);
  let x_1823 : vec4<f32> = x_44.x_MainLightPosition;
  let x_1825 : vec4<f32> = u_xlat7;
  u_xlat1 = dot(vec3<f32>(x_1823.x, x_1823.y, x_1823.z), vec3<f32>(x_1825.x, x_1825.y, x_1825.z));
  let x_1828 : f32 = u_xlat1;
  u_xlat1 = clamp(x_1828, 0.0f, 1.0f);
  let x_1830 : f32 = u_xlat60;
  let x_1831 : f32 = u_xlat60;
  u_xlat60 = (x_1830 * x_1831);
  let x_1833 : f32 = u_xlat60;
  let x_1835 : f32 = u_xlat8.x;
  u_xlat60 = ((x_1833 * x_1835) + 1.000010014f);
  let x_1839 : f32 = u_xlat1;
  let x_1840 : f32 = u_xlat1;
  u_xlat1 = (x_1839 * x_1840);
  let x_1842 : f32 = u_xlat60;
  let x_1843 : f32 = u_xlat60;
  u_xlat60 = (x_1842 * x_1843);
  let x_1845 : f32 = u_xlat1;
  u_xlat1 = max(x_1845, 0.100000001f);
  let x_1848 : f32 = u_xlat60;
  let x_1849 : f32 = u_xlat1;
  u_xlat60 = (x_1848 * x_1849);
  let x_1851 : f32 = u_xlat24;
  let x_1852 : f32 = u_xlat60;
  u_xlat60 = (x_1851 * x_1852);
  let x_1854 : f32 = u_xlat64;
  let x_1855 : f32 = u_xlat60;
  u_xlat60 = (x_1854 / x_1855);
  let x_1857 : vec4<f32> = u_xlat0;
  let x_1859 : f32 = u_xlat60;
  let x_1862 : vec3<f32> = u_xlat5;
  let x_1863 : vec3<f32> = ((vec3<f32>(x_1857.x, x_1857.y, x_1857.z) * vec3<f32>(x_1859, x_1859, x_1859)) + x_1862);
  let x_1864 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1863.x, x_1863.y, x_1863.z, x_1864.w);
  let x_1866 : vec4<f32> = u_xlat6;
  let x_1868 : vec4<f32> = u_xlat7;
  let x_1870 : vec3<f32> = (vec3<f32>(x_1866.x, x_1866.y, x_1866.z) * vec3<f32>(x_1868.x, x_1868.y, x_1868.z));
  let x_1871 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1870.x, x_1870.y, x_1870.z, x_1871.w);
  let x_1874 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_1876 : f32 = x_1702.unity_LightData.y;
  u_xlat60 = min(x_1874, x_1876);
  let x_1880 : f32 = u_xlat60;
  u_xlatu60 = bitcast<u32>(i32(x_1880));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_1892 : u32 = u_xlatu_loop_1;
    let x_1893 : u32 = u_xlatu60;
    if ((x_1892 < x_1893)) {
    } else {
      break;
    }
    let x_1896 : u32 = u_xlatu_loop_1;
    u_xlatu63 = (x_1896 >> 2u);
    let x_1900 : u32 = u_xlatu_loop_1;
    u_xlati65 = bitcast<i32>((x_1900 & 3u));
    let x_1903 : u32 = u_xlatu63;
    let x_1906 : vec4<f32> = x_1702.unity_LightIndices[bitcast<i32>(x_1903)];
    let x_1916 : i32 = u_xlati65;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_1921 : vec4<u32> = indexable[x_1916];
    u_xlat63 = dot(x_1906, bitcast<vec4<f32>>(x_1921));
    let x_1925 : f32 = u_xlat63;
    u_xlati63 = i32(x_1925);
    let x_1927 : vec3<f32> = vs_TEXCOORD7;
    let x_1939 : i32 = u_xlati63;
    let x_1941 : vec4<f32> = x_1938.x_AdditionalLightsPosition[x_1939];
    let x_1944 : i32 = u_xlati63;
    let x_1946 : vec4<f32> = x_1938.x_AdditionalLightsPosition[x_1944];
    u_xlat28 = ((-(x_1927) * vec3<f32>(x_1941.w, x_1941.w, x_1941.w)) + vec3<f32>(x_1946.x, x_1946.y, x_1946.z));
    let x_1949 : vec3<f32> = u_xlat28;
    let x_1950 : vec3<f32> = u_xlat28;
    u_xlat65 = dot(x_1949, x_1950);
    let x_1952 : f32 = u_xlat65;
    u_xlat65 = max(x_1952, 6.10351562e-05f);
    let x_1955 : f32 = u_xlat65;
    u_xlat66 = inverseSqrt(x_1955);
    let x_1957 : f32 = u_xlat66;
    let x_1959 : vec3<f32> = u_xlat28;
    let x_1960 : vec3<f32> = (vec3<f32>(x_1957, x_1957, x_1957) * x_1959);
    let x_1961 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_1960.x, x_1960.y, x_1960.z, x_1961.w);
    let x_1963 : f32 = u_xlat65;
    u_xlat67 = (1.0f / x_1963);
    let x_1965 : f32 = u_xlat65;
    let x_1966 : i32 = u_xlati63;
    let x_1968 : f32 = x_1938.x_AdditionalLightsAttenuation[x_1966].x;
    u_xlat65 = (x_1965 * x_1968);
    let x_1970 : f32 = u_xlat65;
    let x_1972 : f32 = u_xlat65;
    u_xlat65 = ((-(x_1970) * x_1972) + 1.0f);
    let x_1975 : f32 = u_xlat65;
    u_xlat65 = max(x_1975, 0.0f);
    let x_1977 : f32 = u_xlat65;
    let x_1978 : f32 = u_xlat65;
    u_xlat65 = (x_1977 * x_1978);
    let x_1980 : f32 = u_xlat65;
    let x_1981 : f32 = u_xlat67;
    u_xlat65 = (x_1980 * x_1981);
    let x_1983 : i32 = u_xlati63;
    let x_1985 : vec4<f32> = x_1938.x_AdditionalLightsSpotDir[x_1983];
    let x_1987 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_1985.x, x_1985.y, x_1985.z), vec3<f32>(x_1987.x, x_1987.y, x_1987.z));
    let x_1990 : f32 = u_xlat67;
    let x_1991 : i32 = u_xlati63;
    let x_1993 : f32 = x_1938.x_AdditionalLightsAttenuation[x_1991].z;
    let x_1995 : i32 = u_xlati63;
    let x_1997 : f32 = x_1938.x_AdditionalLightsAttenuation[x_1995].w;
    u_xlat67 = ((x_1990 * x_1993) + x_1997);
    let x_1999 : f32 = u_xlat67;
    u_xlat67 = clamp(x_1999, 0.0f, 1.0f);
    let x_2001 : f32 = u_xlat67;
    let x_2002 : f32 = u_xlat67;
    u_xlat67 = (x_2001 * x_2002);
    let x_2004 : f32 = u_xlat65;
    let x_2005 : f32 = u_xlat67;
    u_xlat65 = (x_2004 * x_2005);
    let x_2007 : f32 = u_xlat44;
    let x_2009 : i32 = u_xlati63;
    let x_2011 : vec4<f32> = x_1938.x_AdditionalLightsColor[x_2009];
    let x_2013 : vec3<f32> = (vec3<f32>(x_2007, x_2007, x_2007) * vec3<f32>(x_2011.x, x_2011.y, x_2011.z));
    let x_2014 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2013.x, x_2013.y, x_2013.z, x_2014.w);
    let x_2016 : vec3<f32> = u_xlat2;
    let x_2017 : vec4<f32> = u_xlat9;
    u_xlat63 = dot(x_2016, vec3<f32>(x_2017.x, x_2017.y, x_2017.z));
    let x_2020 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2020, 0.0f, 1.0f);
    let x_2022 : f32 = u_xlat63;
    let x_2023 : f32 = u_xlat65;
    u_xlat63 = (x_2022 * x_2023);
    let x_2025 : f32 = u_xlat63;
    let x_2027 : vec4<f32> = u_xlat10;
    let x_2029 : vec3<f32> = (vec3<f32>(x_2025, x_2025, x_2025) * vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
    let x_2030 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2029.x, x_2029.y, x_2029.z, x_2030.w);
    let x_2032 : vec3<f32> = u_xlat28;
    let x_2033 : f32 = u_xlat66;
    let x_2036 : vec3<f32> = u_xlat21;
    u_xlat28 = ((x_2032 * vec3<f32>(x_2033, x_2033, x_2033)) + x_2036);
    let x_2038 : vec3<f32> = u_xlat28;
    let x_2039 : vec3<f32> = u_xlat28;
    u_xlat63 = dot(x_2038, x_2039);
    let x_2041 : f32 = u_xlat63;
    u_xlat63 = max(x_2041, 1.17549435e-37f);
    let x_2043 : f32 = u_xlat63;
    u_xlat63 = inverseSqrt(x_2043);
    let x_2045 : f32 = u_xlat63;
    let x_2047 : vec3<f32> = u_xlat28;
    u_xlat28 = (vec3<f32>(x_2045, x_2045, x_2045) * x_2047);
    let x_2049 : vec3<f32> = u_xlat2;
    let x_2050 : vec3<f32> = u_xlat28;
    u_xlat63 = dot(x_2049, x_2050);
    let x_2052 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2052, 0.0f, 1.0f);
    let x_2054 : vec4<f32> = u_xlat9;
    let x_2056 : vec3<f32> = u_xlat28;
    u_xlat65 = dot(vec3<f32>(x_2054.x, x_2054.y, x_2054.z), x_2056);
    let x_2058 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2058, 0.0f, 1.0f);
    let x_2060 : f32 = u_xlat63;
    let x_2061 : f32 = u_xlat63;
    u_xlat63 = (x_2060 * x_2061);
    let x_2063 : f32 = u_xlat63;
    let x_2065 : f32 = u_xlat8.x;
    u_xlat63 = ((x_2063 * x_2065) + 1.000010014f);
    let x_2068 : f32 = u_xlat65;
    let x_2069 : f32 = u_xlat65;
    u_xlat65 = (x_2068 * x_2069);
    let x_2071 : f32 = u_xlat63;
    let x_2072 : f32 = u_xlat63;
    u_xlat63 = (x_2071 * x_2072);
    let x_2074 : f32 = u_xlat65;
    u_xlat65 = max(x_2074, 0.100000001f);
    let x_2076 : f32 = u_xlat63;
    let x_2077 : f32 = u_xlat65;
    u_xlat63 = (x_2076 * x_2077);
    let x_2079 : f32 = u_xlat24;
    let x_2080 : f32 = u_xlat63;
    u_xlat63 = (x_2079 * x_2080);
    let x_2082 : f32 = u_xlat64;
    let x_2083 : f32 = u_xlat63;
    u_xlat63 = (x_2082 / x_2083);
    let x_2085 : vec4<f32> = u_xlat0;
    let x_2087 : f32 = u_xlat63;
    let x_2090 : vec3<f32> = u_xlat5;
    u_xlat28 = ((vec3<f32>(x_2085.x, x_2085.y, x_2085.z) * vec3<f32>(x_2087, x_2087, x_2087)) + x_2090);
    let x_2092 : vec3<f32> = u_xlat28;
    let x_2093 : vec4<f32> = u_xlat10;
    let x_2096 : vec4<f32> = u_xlat7;
    let x_2098 : vec3<f32> = ((x_2092 * vec3<f32>(x_2093.x, x_2093.y, x_2093.z)) + vec3<f32>(x_2096.x, x_2096.y, x_2096.z));
    let x_2099 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2098.x, x_2098.y, x_2098.z, x_2099.w);

    continuing {
      let x_2101 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2101 + bitcast<u32>(1i));
    }
  }
  let x_2103 : vec3<f32> = u_xlat3;
  let x_2104 : vec3<f32> = u_xlat4;
  let x_2107 : vec4<f32> = u_xlat6;
  let x_2109 : vec3<f32> = ((x_2103 * vec3<f32>(x_2104.x, x_2104.x, x_2104.x)) + vec3<f32>(x_2107.x, x_2107.y, x_2107.z));
  let x_2110 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2109.x, x_2109.y, x_2109.z, x_2110.w);
  let x_2112 : vec4<f32> = u_xlat7;
  let x_2114 : vec4<f32> = u_xlat0;
  let x_2116 : vec3<f32> = (vec3<f32>(x_2112.x, x_2112.y, x_2112.z) + vec3<f32>(x_2114.x, x_2114.y, x_2114.z));
  let x_2117 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2116.x, x_2116.y, x_2116.z, x_2117.w);
  let x_2119 : f32 = u_xlat62;
  let x_2120 : f32 = u_xlat62;
  u_xlat60 = (x_2119 * -(x_2120));
  let x_2123 : f32 = u_xlat60;
  u_xlat60 = exp2(x_2123);
  let x_2125 : vec4<f32> = u_xlat0;
  let x_2129 : vec4<f32> = x_44.unity_FogColor;
  let x_2132 : vec3<f32> = (vec3<f32>(x_2125.x, x_2125.y, x_2125.z) + -(vec3<f32>(x_2129.x, x_2129.y, x_2129.z)));
  let x_2133 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2132.x, x_2132.y, x_2132.z, x_2133.w);
  let x_2137 : f32 = u_xlat60;
  let x_2139 : vec4<f32> = u_xlat0;
  let x_2143 : vec4<f32> = x_44.unity_FogColor;
  let x_2145 : vec3<f32> = ((vec3<f32>(x_2137, x_2137, x_2137) * vec3<f32>(x_2139.x, x_2139.y, x_2139.z)) + vec3<f32>(x_2143.x, x_2143.y, x_2143.z));
  let x_2146 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2145.x, x_2145.y, x_2145.z, x_2146.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_TEXCOORD7_param : vec3<f32>, @location(1) vs_TEXCOORD3_param : vec3<f32>, @location(3) vs_TEXCOORD8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD8 = vs_TEXCOORD8_param;
  main_1();
  return main_out(SV_Target0);
}

