struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(4) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(5) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_289 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_423 : MainLightShadows;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(7) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2511 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlat5 : vec4<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_410 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlatu21 : u32;
  var u_xlati21 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat68 : f32;
  var u_xlat63 : f32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb6 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var x_2121 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat46 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu67 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati67 : i32;
  var u_xlat71 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  let x_100 : vec3<f32> = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_100.x, x_100.y, x_100.z, x_101.w);
  let x_103 : vec4<f32> = u_xlat3;
  let x_105 : vec4<f32> = u_xlat3;
  let x_107 : vec3<f32> = (vec3<f32>(x_103.x, x_103.y, x_103.z) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_111 : vec3<f32> = u_xlat2;
  let x_113 : vec3<f32> = (-(x_111) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_116 : vec4<f32> = u_xlat3;
  let x_119 : vec4<f32> = u_xlat4;
  let x_122 : vec3<f32> = ((-(vec3<f32>(x_116.x, x_116.y, x_116.z)) * vec3<f32>(x_119.x, x_119.y, x_119.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_123 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_122.x, x_122.y, x_122.z, x_123.w);
  let x_125 : vec4<f32> = u_xlat0;
  let x_127 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_125.x, x_125.y, x_125.z) * x_127);
  let x_129 : vec3<f32> = u_xlat2;
  let x_130 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_129 + x_130);
  let x_138 : vec4<f32> = u_xlat0;
  let x_140 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_138.x, x_138.y, x_138.z, x_138.x));
  let x_142 : vec3<bool> = vec3<bool>(x_140.x, x_140.y, x_140.z);
  let x_143 : vec4<bool> = u_xlatb4;
  u_xlatb4 = vec4<bool>(x_142.x, x_142.y, x_142.z, x_143.w);
  let x_148 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_148);
  let x_153 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_153);
  let x_157 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_157);
  let x_161 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_161);
  let x_165 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_165);
  let x_169 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_169);
  let x_172 : vec4<f32> = u_xlat3;
  let x_174 : vec4<f32> = u_xlat4;
  let x_176 : vec3<f32> = (vec3<f32>(x_172.x, x_172.y, x_172.z) * vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_179 : vec3<f32> = u_xlat2;
  let x_180 : vec4<f32> = u_xlat5;
  let x_183 : vec4<f32> = u_xlat3;
  u_xlat2 = ((x_179 * vec3<f32>(x_180.x, x_180.y, x_180.z)) + vec3<f32>(x_183.x, x_183.y, x_183.z));
  let x_186 : vec4<f32> = u_xlat0;
  let x_189 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_186.x, x_186.y, x_186.z)) + x_189);
  let x_191 : f32 = u_xlat43;
  let x_193 : vec3<f32> = u_xlat2;
  let x_195 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_191, x_191, x_191) * x_193) + vec3<f32>(x_195.x, x_195.y, x_195.z));
  let x_199 : f32 = u_xlat0.x;
  u_xlat0.x = (x_199 + -0.150000006f);
  let x_204 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_204);
  let x_208 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_208) + 1.0f);
  let x_212 : vec4<f32> = u_xlat0;
  let x_217 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_212.x, x_212.x, x_212.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_217);
  let x_223 : vec4<f32> = vs_INTERP3;
  let x_226 : f32 = x_44.x_GlobalMipBias.x;
  let x_227 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_223.x, x_223.y), x_226);
  let x_228 : vec3<f32> = vec3<f32>(x_227.x, x_227.y, x_227.w);
  let x_229 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_228.x, x_228.y, x_228.z, x_229.w);
  let x_232 : f32 = u_xlat3.x;
  let x_234 : f32 = u_xlat3.z;
  u_xlat3.x = (x_232 * x_234);
  let x_239 : vec4<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_239.x, x_239.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_247 : vec2<f32> = u_xlat21;
  let x_248 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_247, x_248);
  let x_250 : f32 = u_xlat43;
  u_xlat43 = min(x_250, 1.0f);
  let x_252 : f32 = u_xlat43;
  u_xlat43 = (-(x_252) + 1.0f);
  let x_255 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_255);
  let x_257 : f32 = u_xlat43;
  u_xlat43 = max(x_257, 1.00000002e-16f);
  let x_261 : f32 = u_xlat1.x;
  let x_263 : f32 = u_xlat0.x;
  u_xlat0.x = (x_261 + x_263);
  let x_267 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_267, 0.0f, 1.0f);
  let x_271 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_271, 0.0f);
  let x_275 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_275, 0.850000024f);
  let x_283 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_283);
  let x_291 : f32 = x_289.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_291 >= 0.0f);
  let x_296 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_296);
  let x_300 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_300);
  let x_304 : f32 = u_xlat22.z;
  let x_306 : f32 = u_xlat22.x;
  u_xlat22.x = (x_304 * x_306);
  let x_311 : vec3<f32> = vs_INTERP1;
  let x_313 : vec4<f32> = vs_INTERP2;
  let x_315 : vec3<f32> = (vec3<f32>(x_311.z, x_311.x, x_311.y) * vec3<f32>(x_313.y, x_313.z, x_313.x));
  let x_316 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec3<f32> = vs_INTERP1;
  let x_320 : vec4<f32> = vs_INTERP2;
  let x_323 : vec4<f32> = u_xlat3;
  let x_326 : vec3<f32> = ((vec3<f32>(x_318.y, x_318.z, x_318.x) * vec3<f32>(x_320.z, x_320.x, x_320.y)) + -(vec3<f32>(x_323.x, x_323.y, x_323.z)));
  let x_327 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_326.x, x_326.y, x_326.z, x_327.w);
  let x_329 : vec3<f32> = u_xlat22;
  let x_331 : vec4<f32> = u_xlat3;
  let x_333 : vec3<f32> = (vec3<f32>(x_329.x, x_329.x, x_329.x) * vec3<f32>(x_331.x, x_331.y, x_331.z));
  let x_334 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_333.x, x_333.y, x_333.z, x_334.w);
  let x_336 : vec2<f32> = u_xlat21;
  let x_338 : vec4<f32> = u_xlat3;
  let x_340 : vec3<f32> = (vec3<f32>(x_336.y, x_336.y, x_336.y) * vec3<f32>(x_338.x, x_338.y, x_338.z));
  let x_341 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_340.x, x_340.y, x_340.z, x_341.w);
  let x_343 : vec2<f32> = u_xlat21;
  let x_345 : vec4<f32> = vs_INTERP2;
  let x_348 : vec4<f32> = u_xlat3;
  let x_350 : vec3<f32> = ((vec3<f32>(x_343.x, x_343.x, x_343.x) * vec3<f32>(x_345.x, x_345.y, x_345.z)) + vec3<f32>(x_348.x, x_348.y, x_348.z));
  let x_351 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_350.x, x_350.y, x_350.z, x_351.w);
  let x_353 : f32 = u_xlat43;
  let x_355 : vec3<f32> = vs_INTERP1;
  let x_357 : vec4<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_353, x_353, x_353) * x_355) + vec3<f32>(x_357.x, x_357.y, x_357.z));
  let x_360 : vec3<f32> = u_xlat22;
  let x_361 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_360, x_361);
  let x_365 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_365);
  let x_368 : vec2<f32> = u_xlat21;
  let x_370 : vec3<f32> = u_xlat22;
  let x_371 : vec3<f32> = (vec3<f32>(x_368.x, x_368.x, x_368.x) * x_370);
  let x_372 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_371.x, x_371.y, x_371.z, x_372.w);
  let x_377 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_377 == 0.0f);
  let x_380 : vec3<f32> = vs_INTERP0;
  let x_385 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat22 = (-(x_380) + x_385);
  let x_388 : vec3<f32> = u_xlat22;
  let x_389 : vec3<f32> = u_xlat22;
  u_xlat42 = dot(x_388, x_389);
  let x_391 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_391);
  let x_393 : f32 = u_xlat42;
  let x_395 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_393, x_393, x_393) * x_395);
  let x_400 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_400;
  let x_403 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_403;
  let x_407 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_407;
  let x_409 : bool = u_xlatb21;
  if (x_409) {
    let x_413 : vec3<f32> = u_xlat22;
    x_410 = x_413;
  } else {
    let x_415 : vec4<f32> = u_xlat4;
    x_410 = vec3<f32>(x_415.x, x_415.y, x_415.z);
  }
  let x_417 : vec3<f32> = x_410;
  u_xlat22 = x_417;
  let x_418 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = x_423.x_CascadeShadowSplitSpheres0;
  let x_428 : vec3<f32> = (x_418 + -(vec3<f32>(x_425.x, x_425.y, x_425.z)));
  let x_429 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_428.x, x_428.y, x_428.z, x_429.w);
  let x_431 : vec3<f32> = vs_INTERP0;
  let x_433 : vec4<f32> = x_423.x_CascadeShadowSplitSpheres1;
  let x_436 : vec3<f32> = (x_431 + -(vec3<f32>(x_433.x, x_433.y, x_433.z)));
  let x_437 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_436.x, x_436.y, x_436.z, x_437.w);
  let x_440 : vec3<f32> = vs_INTERP0;
  let x_442 : vec4<f32> = x_423.x_CascadeShadowSplitSpheres2;
  let x_445 : vec3<f32> = (x_440 + -(vec3<f32>(x_442.x, x_442.y, x_442.z)));
  let x_446 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_445.x, x_445.y, x_445.z, x_446.w);
  let x_449 : vec3<f32> = vs_INTERP0;
  let x_451 : vec4<f32> = x_423.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_449 + -(vec3<f32>(x_451.x, x_451.y, x_451.z)));
  let x_455 : vec4<f32> = u_xlat4;
  let x_457 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_455.x, x_455.y, x_455.z), vec3<f32>(x_457.x, x_457.y, x_457.z));
  let x_461 : vec4<f32> = u_xlat5;
  let x_463 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_461.x, x_461.y, x_461.z), vec3<f32>(x_463.x, x_463.y, x_463.z));
  let x_467 : vec4<f32> = u_xlat6;
  let x_469 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_467.x, x_467.y, x_467.z), vec3<f32>(x_469.x, x_469.y, x_469.z));
  let x_473 : vec3<f32> = u_xlat7;
  let x_474 : vec3<f32> = u_xlat7;
  u_xlat4.w = dot(x_473, x_474);
  let x_477 : vec4<f32> = u_xlat4;
  let x_480 : vec4<f32> = x_423.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_477 < x_480);
  let x_483 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_483);
  let x_487 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_487);
  let x_491 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_491);
  let x_495 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_495);
  let x_499 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_499);
  let x_504 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_504);
  let x_508 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_508);
  let x_511 : vec4<f32> = u_xlat4;
  let x_513 : vec4<f32> = u_xlat5;
  let x_515 : vec3<f32> = (vec3<f32>(x_511.x, x_511.y, x_511.z) + vec3<f32>(x_513.y, x_513.z, x_513.w));
  let x_516 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_515.x, x_515.y, x_515.z, x_516.w);
  let x_518 : vec4<f32> = u_xlat4;
  let x_521 : vec3<f32> = max(vec3<f32>(x_518.x, x_518.y, x_518.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_522 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_522.x, x_521.x, x_521.y, x_521.z);
  let x_524 : vec4<f32> = u_xlat5;
  u_xlat21.x = dot(x_524, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_531 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_531) + 4.0f);
  let x_538 : f32 = u_xlat21.x;
  u_xlatu21 = u32(x_538);
  let x_542 : u32 = u_xlatu21;
  u_xlati21 = (bitcast<i32>(x_542) << bitcast<u32>(2i));
  let x_545 : vec3<f32> = vs_INTERP0;
  let x_547 : i32 = u_xlati21;
  let x_550 : i32 = u_xlati21;
  let x_554 : vec4<f32> = x_423.x_MainLightWorldToShadow[((x_547 + 1i) / 4i)][((x_550 + 1i) % 4i)];
  let x_556 : vec3<f32> = (vec3<f32>(x_545.y, x_545.y, x_545.y) * vec3<f32>(x_554.x, x_554.y, x_554.z));
  let x_557 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_556.x, x_556.y, x_556.z, x_557.w);
  let x_559 : i32 = u_xlati21;
  let x_561 : i32 = u_xlati21;
  let x_564 : vec4<f32> = x_423.x_MainLightWorldToShadow[(x_559 / 4i)][(x_561 % 4i)];
  let x_566 : vec3<f32> = vs_INTERP0;
  let x_569 : vec4<f32> = u_xlat4;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.x, x_564.y, x_564.z) * vec3<f32>(x_566.x, x_566.x, x_566.x)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : i32 = u_xlati21;
  let x_577 : i32 = u_xlati21;
  let x_581 : vec4<f32> = x_423.x_MainLightWorldToShadow[((x_574 + 2i) / 4i)][((x_577 + 2i) % 4i)];
  let x_583 : vec3<f32> = vs_INTERP0;
  let x_586 : vec4<f32> = u_xlat4;
  let x_588 : vec3<f32> = ((vec3<f32>(x_581.x, x_581.y, x_581.z) * vec3<f32>(x_583.z, x_583.z, x_583.z)) + vec3<f32>(x_586.x, x_586.y, x_586.z));
  let x_589 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_588.x, x_588.y, x_588.z, x_589.w);
  let x_591 : vec4<f32> = u_xlat4;
  let x_593 : i32 = u_xlati21;
  let x_596 : i32 = u_xlati21;
  let x_600 : vec4<f32> = x_423.x_MainLightWorldToShadow[((x_593 + 3i) / 4i)][((x_596 + 3i) % 4i)];
  let x_602 : vec3<f32> = (vec3<f32>(x_591.x, x_591.y, x_591.z) + vec3<f32>(x_600.x, x_600.y, x_600.z));
  let x_603 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
  let x_606 : f32 = vs_INTERP0.y;
  let x_608 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat21.x = (x_606 * x_608);
  let x_612 : f32 = x_44.unity_MatrixV[0i].z;
  let x_614 : f32 = vs_INTERP0.x;
  let x_617 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_612 * x_614) + x_617);
  let x_621 : f32 = x_44.unity_MatrixV[2i].z;
  let x_623 : f32 = vs_INTERP0.z;
  let x_626 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_621 * x_623) + x_626);
  let x_630 : f32 = u_xlat21.x;
  let x_632 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat21.x = (x_630 + x_632);
  let x_636 : f32 = u_xlat21.x;
  let x_640 : f32 = x_44.x_ProjectionParams.y;
  u_xlat21.x = (-(x_636) + -(x_640));
  let x_645 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_645, 0.0f);
  let x_649 : f32 = u_xlat21.x;
  let x_652 : f32 = x_44.unity_FogParams.x;
  u_xlat21.x = (x_649 * x_652);
  u_xlat3.w = 1.0f;
  let x_658 : vec4<f32> = x_289.unity_SHAr;
  let x_659 : vec4<f32> = u_xlat3;
  u_xlat5.x = dot(x_658, x_659);
  let x_664 : vec4<f32> = x_289.unity_SHAg;
  let x_665 : vec4<f32> = u_xlat3;
  u_xlat5.y = dot(x_664, x_665);
  let x_670 : vec4<f32> = x_289.unity_SHAb;
  let x_671 : vec4<f32> = u_xlat3;
  u_xlat5.z = dot(x_670, x_671);
  let x_674 : vec4<f32> = u_xlat3;
  let x_676 : vec4<f32> = u_xlat3;
  u_xlat6 = (vec4<f32>(x_674.y, x_674.z, x_674.z, x_674.x) * vec4<f32>(x_676.x, x_676.y, x_676.z, x_676.z));
  let x_681 : vec4<f32> = x_289.unity_SHBr;
  let x_682 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_681, x_682);
  let x_687 : vec4<f32> = x_289.unity_SHBg;
  let x_688 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_687, x_688);
  let x_693 : vec4<f32> = x_289.unity_SHBb;
  let x_694 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_693, x_694);
  let x_698 : f32 = u_xlat3.y;
  let x_700 : f32 = u_xlat3.y;
  u_xlat42 = (x_698 * x_700);
  let x_703 : f32 = u_xlat3.x;
  let x_705 : f32 = u_xlat3.x;
  let x_707 : f32 = u_xlat42;
  u_xlat42 = ((x_703 * x_705) + -(x_707));
  let x_712 : vec4<f32> = x_289.unity_SHC;
  let x_714 : f32 = u_xlat42;
  let x_717 : vec3<f32> = u_xlat7;
  let x_718 : vec3<f32> = ((vec3<f32>(x_712.x, x_712.y, x_712.z) * vec3<f32>(x_714, x_714, x_714)) + x_717);
  let x_719 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_718.x, x_718.y, x_718.z, x_719.w);
  let x_721 : vec4<f32> = u_xlat5;
  let x_723 : vec4<f32> = u_xlat6;
  let x_725 : vec3<f32> = (vec3<f32>(x_721.x, x_721.y, x_721.z) + vec3<f32>(x_723.x, x_723.y, x_723.z));
  let x_726 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_725.x, x_725.y, x_725.z, x_726.w);
  let x_728 : vec4<f32> = u_xlat5;
  let x_730 : vec3<f32> = max(vec3<f32>(x_728.x, x_728.y, x_728.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_731 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_730.x, x_730.y, x_730.z, x_731.w);
  let x_735 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_736 : vec2<f32> = vec2<f32>(x_735.x, x_735.y);
  let x_740 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_736.x, x_736.y));
  let x_741 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
  let x_743 : vec4<f32> = u_xlat6;
  let x_745 : vec4<f32> = hlslcc_FragCoord;
  let x_747 : vec2<f32> = (vec2<f32>(x_743.x, x_743.y) * vec2<f32>(x_745.x, x_745.y));
  let x_748 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
  let x_751 : f32 = u_xlat6.y;
  let x_754 : f32 = x_44.x_ScaleBiasRt.x;
  let x_757 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat42 = ((x_751 * x_754) + x_757);
  let x_759 : f32 = u_xlat42;
  u_xlat6.z = (-(x_759) + 1.0f);
  let x_764 : f32 = u_xlat0.x;
  u_xlat42 = ((-(x_764) * 0.959999979f) + 0.959999979f);
  let x_770 : f32 = u_xlat42;
  u_xlat65 = (-(x_770) + 1.0f);
  let x_773 : f32 = u_xlat42;
  let x_775 : vec3<f32> = u_xlat2;
  u_xlat7 = (vec3<f32>(x_773, x_773, x_773) * x_775);
  let x_777 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_777 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_781 : vec4<f32> = u_xlat0;
  let x_783 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_781.x, x_781.x, x_781.x) * x_783) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_789 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_789) + 1.0f);
  let x_794 : f32 = u_xlat0.x;
  let x_796 : f32 = u_xlat0.x;
  u_xlat42 = (x_794 * x_796);
  let x_799 : f32 = u_xlat42;
  let x_800 : f32 = u_xlat42;
  u_xlat66 = (x_799 * x_800);
  let x_803 : f32 = u_xlat1.x;
  let x_804 : f32 = u_xlat65;
  u_xlat1.x = (x_803 + x_804);
  let x_808 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_808, 1.0f);
  let x_811 : f32 = u_xlat42;
  u_xlat65 = ((x_811 * 4.0f) + 2.0f);
  let x_820 : vec4<f32> = u_xlat6;
  let x_823 : f32 = x_44.x_GlobalMipBias.x;
  let x_824 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_820.x, x_820.z), x_823);
  u_xlat67 = x_824.x;
  let x_827 : f32 = u_xlat67;
  u_xlat68 = (x_827 + -1.0f);
  let x_830 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_831 : f32 = u_xlat68;
  u_xlat68 = ((x_830 * x_831) + 1.0f);
  let x_836 : f32 = u_xlat0.w;
  let x_837 : f32 = u_xlat67;
  u_xlat63 = min(x_836, x_837);
  let x_841 : f32 = x_423.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_841);
  let x_843 : bool = u_xlatb67;
  if (x_843) {
    let x_847 : f32 = x_423.x_MainLightShadowParams.y;
    u_xlatb67 = (x_847 == 1.0f);
    let x_849 : bool = u_xlatb67;
    if (x_849) {
      let x_852 : vec4<f32> = u_xlat4;
      let x_856 : vec4<f32> = x_423.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_852.x, x_852.y, x_852.x, x_852.y) + x_856);
      let x_859 : vec4<f32> = u_xlat6;
      let x_860 : vec2<f32> = vec2<f32>(x_859.x, x_859.y);
      let x_862 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_860.x, x_860.y, x_862);
      let x_875 : vec3<f32> = txVec0;
      let x_877 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_875.xy, x_875.z);
      u_xlat8.x = x_877;
      let x_880 : vec4<f32> = u_xlat6;
      let x_881 : vec2<f32> = vec2<f32>(x_880.z, x_880.w);
      let x_883 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_881.x, x_881.y, x_883);
      let x_890 : vec3<f32> = txVec1;
      let x_892 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_890.xy, x_890.z);
      u_xlat8.y = x_892;
      let x_894 : vec4<f32> = u_xlat4;
      let x_898 : vec4<f32> = x_423.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_894.x, x_894.y, x_894.x, x_894.y) + x_898);
      let x_901 : vec4<f32> = u_xlat6;
      let x_902 : vec2<f32> = vec2<f32>(x_901.x, x_901.y);
      let x_904 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_902.x, x_902.y, x_904);
      let x_911 : vec3<f32> = txVec2;
      let x_913 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_911.xy, x_911.z);
      u_xlat8.z = x_913;
      let x_916 : vec4<f32> = u_xlat6;
      let x_917 : vec2<f32> = vec2<f32>(x_916.z, x_916.w);
      let x_919 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_917.x, x_917.y, x_919);
      let x_926 : vec3<f32> = txVec3;
      let x_928 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_926.xy, x_926.z);
      u_xlat8.w = x_928;
      let x_930 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_930, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_937 : f32 = x_423.x_MainLightShadowParams.y;
      u_xlatb6 = (x_937 == 2.0f);
      let x_939 : bool = u_xlatb6;
      if (x_939) {
        let x_942 : vec4<f32> = u_xlat4;
        let x_945 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_949 : vec2<f32> = ((vec2<f32>(x_942.x, x_942.y) * vec2<f32>(x_945.z, x_945.w)) + vec2<f32>(0.5f, 0.5f));
        let x_950 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_949.x, x_949.y, x_950.z, x_950.w);
        let x_952 : vec4<f32> = u_xlat6;
        let x_954 : vec2<f32> = floor(vec2<f32>(x_952.x, x_952.y));
        let x_955 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_954.x, x_954.y, x_955.z, x_955.w);
        let x_958 : vec4<f32> = u_xlat4;
        let x_961 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_964 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_958.x, x_958.y) * vec2<f32>(x_961.z, x_961.w)) + -(vec2<f32>(x_964.x, x_964.y)));
        let x_968 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_968.x, x_968.x, x_968.y, x_968.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_973 : vec4<f32> = u_xlat8;
        let x_975 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_973.x, x_973.x, x_973.z, x_973.z) * vec4<f32>(x_975.x, x_975.x, x_975.z, x_975.z));
        let x_978 : vec4<f32> = u_xlat9;
        let x_982 : vec2<f32> = (vec2<f32>(x_978.y, x_978.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_983 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_982.x, x_983.y, x_982.y, x_983.w);
        let x_985 : vec4<f32> = u_xlat9;
        let x_988 : vec2<f32> = u_xlat48;
        let x_990 : vec2<f32> = ((vec2<f32>(x_985.x, x_985.z) * vec2<f32>(0.5f, 0.5f)) + -(x_988));
        let x_991 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_990.x, x_990.y, x_991.z, x_991.w);
        let x_994 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_994) + vec2<f32>(1.0f, 1.0f));
        let x_998 : vec2<f32> = u_xlat48;
        let x_1000 : vec2<f32> = min(x_998, vec2<f32>(0.0f, 0.0f));
        let x_1001 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1000.x, x_1000.y, x_1001.z, x_1001.w);
        let x_1003 : vec4<f32> = u_xlat10;
        let x_1006 : vec4<f32> = u_xlat10;
        let x_1009 : vec2<f32> = u_xlat51;
        let x_1010 : vec2<f32> = ((-(vec2<f32>(x_1003.x, x_1003.y)) * vec2<f32>(x_1006.x, x_1006.y)) + x_1009);
        let x_1011 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1010.x, x_1010.y, x_1011.z, x_1011.w);
        let x_1013 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_1013, vec2<f32>(0.0f, 0.0f));
        let x_1015 : vec2<f32> = u_xlat48;
        let x_1017 : vec2<f32> = u_xlat48;
        let x_1019 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_1015) * x_1017) + vec2<f32>(x_1019.y, x_1019.w));
        let x_1022 : vec4<f32> = u_xlat10;
        let x_1024 : vec2<f32> = (vec2<f32>(x_1022.x, x_1022.y) + vec2<f32>(1.0f, 1.0f));
        let x_1025 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1024.x, x_1024.y, x_1025.z, x_1025.w);
        let x_1027 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_1027 + vec2<f32>(1.0f, 1.0f));
        let x_1030 : vec4<f32> = u_xlat9;
        let x_1034 : vec2<f32> = (vec2<f32>(x_1030.x, x_1030.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1035 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1034.x, x_1034.y, x_1035.z, x_1035.w);
        let x_1037 : vec2<f32> = u_xlat51;
        let x_1038 : vec2<f32> = (x_1037 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1039 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1038.x, x_1038.y, x_1039.z, x_1039.w);
        let x_1041 : vec4<f32> = u_xlat10;
        let x_1043 : vec2<f32> = (vec2<f32>(x_1041.x, x_1041.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1044 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1043.x, x_1043.y, x_1044.z, x_1044.w);
        let x_1047 : vec2<f32> = u_xlat48;
        let x_1048 : vec2<f32> = (x_1047 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1049 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1048.x, x_1048.y, x_1049.z, x_1049.w);
        let x_1051 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_1051.y, x_1051.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1055 : f32 = u_xlat10.x;
        u_xlat11.z = x_1055;
        let x_1058 : f32 = u_xlat48.x;
        u_xlat11.w = x_1058;
        let x_1061 : f32 = u_xlat12.x;
        u_xlat9.z = x_1061;
        let x_1064 : f32 = u_xlat8.x;
        u_xlat9.w = x_1064;
        let x_1067 : vec4<f32> = u_xlat9;
        let x_1069 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1067.z, x_1067.w, x_1067.x, x_1067.z) + vec4<f32>(x_1069.z, x_1069.w, x_1069.x, x_1069.z));
        let x_1073 : f32 = u_xlat11.y;
        u_xlat10.z = x_1073;
        let x_1076 : f32 = u_xlat48.y;
        u_xlat10.w = x_1076;
        let x_1079 : f32 = u_xlat9.y;
        u_xlat12.z = x_1079;
        let x_1082 : f32 = u_xlat8.z;
        u_xlat12.w = x_1082;
        let x_1084 : vec4<f32> = u_xlat10;
        let x_1086 : vec4<f32> = u_xlat12;
        let x_1088 : vec3<f32> = (vec3<f32>(x_1084.z, x_1084.y, x_1084.w) + vec3<f32>(x_1086.z, x_1086.y, x_1086.w));
        let x_1089 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1088.x, x_1088.y, x_1088.z, x_1089.w);
        let x_1091 : vec4<f32> = u_xlat9;
        let x_1093 : vec4<f32> = u_xlat13;
        let x_1095 : vec3<f32> = (vec3<f32>(x_1091.x, x_1091.z, x_1091.w) / vec3<f32>(x_1093.z, x_1093.w, x_1093.y));
        let x_1096 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1095.x, x_1095.y, x_1095.z, x_1096.w);
        let x_1098 : vec4<f32> = u_xlat9;
        let x_1104 : vec3<f32> = (vec3<f32>(x_1098.x, x_1098.y, x_1098.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1105 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1104.x, x_1104.y, x_1104.z, x_1105.w);
        let x_1107 : vec4<f32> = u_xlat12;
        let x_1109 : vec4<f32> = u_xlat8;
        let x_1111 : vec3<f32> = (vec3<f32>(x_1107.z, x_1107.y, x_1107.w) / vec3<f32>(x_1109.x, x_1109.y, x_1109.z));
        let x_1112 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1111.x, x_1111.y, x_1111.z, x_1112.w);
        let x_1114 : vec4<f32> = u_xlat10;
        let x_1116 : vec3<f32> = (vec3<f32>(x_1114.x, x_1114.y, x_1114.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1117 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1116.x, x_1116.y, x_1116.z, x_1117.w);
        let x_1119 : vec4<f32> = u_xlat9;
        let x_1122 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1124 : vec3<f32> = (vec3<f32>(x_1119.y, x_1119.x, x_1119.z) * vec3<f32>(x_1122.x, x_1122.x, x_1122.x));
        let x_1125 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1124.x, x_1124.y, x_1124.z, x_1125.w);
        let x_1127 : vec4<f32> = u_xlat10;
        let x_1130 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1132 : vec3<f32> = (vec3<f32>(x_1127.x, x_1127.y, x_1127.z) * vec3<f32>(x_1130.y, x_1130.y, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1132.x, x_1132.y, x_1132.z, x_1133.w);
        let x_1136 : f32 = u_xlat10.x;
        u_xlat9.w = x_1136;
        let x_1138 : vec4<f32> = u_xlat6;
        let x_1141 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1144 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1138.x, x_1138.y, x_1138.x, x_1138.y) * vec4<f32>(x_1141.x, x_1141.y, x_1141.x, x_1141.y)) + vec4<f32>(x_1144.y, x_1144.w, x_1144.x, x_1144.w));
        let x_1147 : vec4<f32> = u_xlat6;
        let x_1150 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1153 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1147.x, x_1147.y) * vec2<f32>(x_1150.x, x_1150.y)) + vec2<f32>(x_1153.z, x_1153.w));
        let x_1157 : f32 = u_xlat9.y;
        u_xlat10.w = x_1157;
        let x_1159 : vec4<f32> = u_xlat10;
        let x_1160 : vec2<f32> = vec2<f32>(x_1159.y, x_1159.z);
        let x_1161 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1161.x, x_1160.x, x_1161.z, x_1160.y);
        let x_1163 : vec4<f32> = u_xlat6;
        let x_1166 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1169 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1163.x, x_1163.y, x_1163.x, x_1163.y) * vec4<f32>(x_1166.x, x_1166.y, x_1166.x, x_1166.y)) + vec4<f32>(x_1169.x, x_1169.y, x_1169.z, x_1169.y));
        let x_1172 : vec4<f32> = u_xlat6;
        let x_1175 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1178 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1172.x, x_1172.y, x_1172.x, x_1172.y) * vec4<f32>(x_1175.x, x_1175.y, x_1175.x, x_1175.y)) + vec4<f32>(x_1178.w, x_1178.y, x_1178.w, x_1178.z));
        let x_1181 : vec4<f32> = u_xlat6;
        let x_1184 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1187 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1181.x, x_1181.y, x_1181.x, x_1181.y) * vec4<f32>(x_1184.x, x_1184.y, x_1184.x, x_1184.y)) + vec4<f32>(x_1187.x, x_1187.w, x_1187.z, x_1187.w));
        let x_1191 : vec4<f32> = u_xlat8;
        let x_1193 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1191.x, x_1191.x, x_1191.x, x_1191.y) * vec4<f32>(x_1193.z, x_1193.w, x_1193.y, x_1193.z));
        let x_1197 : vec4<f32> = u_xlat8;
        let x_1199 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1197.y, x_1197.y, x_1197.z, x_1197.z) * x_1199);
        let x_1202 : f32 = u_xlat8.z;
        let x_1204 : f32 = u_xlat13.y;
        u_xlat6.x = (x_1202 * x_1204);
        let x_1208 : vec4<f32> = u_xlat11;
        let x_1209 : vec2<f32> = vec2<f32>(x_1208.x, x_1208.y);
        let x_1211 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_1209.x, x_1209.y, x_1211);
        let x_1219 : vec3<f32> = txVec4;
        let x_1221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1219.xy, x_1219.z);
        u_xlat27 = x_1221;
        let x_1223 : vec4<f32> = u_xlat11;
        let x_1224 : vec2<f32> = vec2<f32>(x_1223.z, x_1223.w);
        let x_1226 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_1224.x, x_1224.y, x_1226);
        let x_1234 : vec3<f32> = txVec5;
        let x_1236 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1234.xy, x_1234.z);
        u_xlat70 = x_1236;
        let x_1237 : f32 = u_xlat70;
        let x_1239 : f32 = u_xlat14.y;
        u_xlat70 = (x_1237 * x_1239);
        let x_1242 : f32 = u_xlat14.x;
        let x_1243 : f32 = u_xlat27;
        let x_1245 : f32 = u_xlat70;
        u_xlat27 = ((x_1242 * x_1243) + x_1245);
        let x_1248 : vec2<f32> = u_xlat48;
        let x_1250 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_1248.x, x_1248.y, x_1250);
        let x_1257 : vec3<f32> = txVec6;
        let x_1259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1257.xy, x_1257.z);
        u_xlat48.x = x_1259;
        let x_1262 : f32 = u_xlat14.z;
        let x_1264 : f32 = u_xlat48.x;
        let x_1266 : f32 = u_xlat27;
        u_xlat27 = ((x_1262 * x_1264) + x_1266);
        let x_1269 : vec4<f32> = u_xlat10;
        let x_1270 : vec2<f32> = vec2<f32>(x_1269.x, x_1269.y);
        let x_1272 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_1270.x, x_1270.y, x_1272);
        let x_1279 : vec3<f32> = txVec7;
        let x_1281 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1279.xy, x_1279.z);
        u_xlat48.x = x_1281;
        let x_1284 : f32 = u_xlat14.w;
        let x_1286 : f32 = u_xlat48.x;
        let x_1288 : f32 = u_xlat27;
        u_xlat27 = ((x_1284 * x_1286) + x_1288);
        let x_1291 : vec4<f32> = u_xlat12;
        let x_1292 : vec2<f32> = vec2<f32>(x_1291.x, x_1291.y);
        let x_1294 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec8;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat48.x = x_1303;
        let x_1306 : f32 = u_xlat15.x;
        let x_1308 : f32 = u_xlat48.x;
        let x_1310 : f32 = u_xlat27;
        u_xlat27 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat12;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.z, x_1313.w);
        let x_1316 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec9;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat48.x = x_1325;
        let x_1328 : f32 = u_xlat15.y;
        let x_1330 : f32 = u_xlat48.x;
        let x_1332 : f32 = u_xlat27;
        u_xlat27 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat10;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.z, x_1335.w);
        let x_1338 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec10;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat48.x = x_1347;
        let x_1350 : f32 = u_xlat15.z;
        let x_1352 : f32 = u_xlat48.x;
        let x_1354 : f32 = u_xlat27;
        u_xlat27 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat9;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.x, x_1357.y);
        let x_1360 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec11;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat48.x = x_1369;
        let x_1372 : f32 = u_xlat15.w;
        let x_1374 : f32 = u_xlat48.x;
        let x_1376 : f32 = u_xlat27;
        u_xlat27 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat9;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.z, x_1379.w);
        let x_1382 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec12;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat48.x = x_1391;
        let x_1394 : f32 = u_xlat6.x;
        let x_1396 : f32 = u_xlat48.x;
        let x_1398 : f32 = u_xlat27;
        u_xlat67 = ((x_1394 * x_1396) + x_1398);
      } else {
        let x_1401 : vec4<f32> = u_xlat4;
        let x_1404 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1407 : vec2<f32> = ((vec2<f32>(x_1401.x, x_1401.y) * vec2<f32>(x_1404.z, x_1404.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1408 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1407.x, x_1407.y, x_1408.z, x_1408.w);
        let x_1410 : vec4<f32> = u_xlat6;
        let x_1412 : vec2<f32> = floor(vec2<f32>(x_1410.x, x_1410.y));
        let x_1413 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1412.x, x_1412.y, x_1413.z, x_1413.w);
        let x_1415 : vec4<f32> = u_xlat4;
        let x_1418 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1421 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1415.x, x_1415.y) * vec2<f32>(x_1418.z, x_1418.w)) + -(vec2<f32>(x_1421.x, x_1421.y)));
        let x_1425 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1425.x, x_1425.x, x_1425.y, x_1425.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1428 : vec4<f32> = u_xlat8;
        let x_1430 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1428.x, x_1428.x, x_1428.z, x_1428.z) * vec4<f32>(x_1430.x, x_1430.x, x_1430.z, x_1430.z));
        let x_1433 : vec4<f32> = u_xlat9;
        let x_1437 : vec2<f32> = (vec2<f32>(x_1433.y, x_1433.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1438 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1438.x, x_1437.x, x_1438.z, x_1437.y);
        let x_1440 : vec4<f32> = u_xlat9;
        let x_1443 : vec2<f32> = u_xlat48;
        let x_1445 : vec2<f32> = ((vec2<f32>(x_1440.x, x_1440.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1443));
        let x_1446 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1445.x, x_1446.y, x_1445.y, x_1446.w);
        let x_1448 : vec2<f32> = u_xlat48;
        let x_1450 : vec2<f32> = (-(x_1448) + vec2<f32>(1.0f, 1.0f));
        let x_1451 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1450.x, x_1450.y, x_1451.z, x_1451.w);
        let x_1453 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1453, vec2<f32>(0.0f, 0.0f));
        let x_1455 : vec2<f32> = u_xlat51;
        let x_1457 : vec2<f32> = u_xlat51;
        let x_1459 : vec4<f32> = u_xlat9;
        let x_1461 : vec2<f32> = ((-(x_1455) * x_1457) + vec2<f32>(x_1459.x, x_1459.y));
        let x_1462 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1461.x, x_1461.y, x_1462.z, x_1462.w);
        let x_1464 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1464, vec2<f32>(0.0f, 0.0f));
        let x_1467 : vec2<f32> = u_xlat51;
        let x_1469 : vec2<f32> = u_xlat51;
        let x_1471 : vec4<f32> = u_xlat8;
        let x_1473 : vec2<f32> = ((-(x_1467) * x_1469) + vec2<f32>(x_1471.y, x_1471.w));
        let x_1474 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1473.x, x_1474.y, x_1473.y);
        let x_1476 : vec4<f32> = u_xlat9;
        let x_1478 : vec2<f32> = (vec2<f32>(x_1476.x, x_1476.y) + vec2<f32>(2.0f, 2.0f));
        let x_1479 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1478.x, x_1478.y, x_1479.z, x_1479.w);
        let x_1481 : vec3<f32> = u_xlat29;
        let x_1483 : vec2<f32> = (vec2<f32>(x_1481.x, x_1481.z) + vec2<f32>(2.0f, 2.0f));
        let x_1484 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1484.x, x_1483.x, x_1484.z, x_1483.y);
        let x_1487 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1487 * 0.081632003f);
        let x_1491 : vec4<f32> = u_xlat8;
        let x_1494 : vec3<f32> = (vec3<f32>(x_1491.z, x_1491.x, x_1491.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1495 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1494.x, x_1494.y, x_1494.z, x_1495.w);
        let x_1497 : vec4<f32> = u_xlat9;
        let x_1500 : vec2<f32> = (vec2<f32>(x_1497.x, x_1497.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1501 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1500.x, x_1500.y, x_1501.z, x_1501.w);
        let x_1504 : f32 = u_xlat12.y;
        u_xlat11.x = x_1504;
        let x_1506 : vec2<f32> = u_xlat48;
        let x_1513 : vec2<f32> = ((vec2<f32>(x_1506.x, x_1506.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1514 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1514.x, x_1513.x, x_1514.z, x_1513.y);
        let x_1516 : vec2<f32> = u_xlat48;
        let x_1520 : vec2<f32> = ((vec2<f32>(x_1516.x, x_1516.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1521 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1520.x, x_1521.y, x_1520.y, x_1521.w);
        let x_1524 : f32 = u_xlat8.x;
        u_xlat9.y = x_1524;
        let x_1527 : f32 = u_xlat10.y;
        u_xlat9.w = x_1527;
        let x_1529 : vec4<f32> = u_xlat9;
        let x_1530 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1529 + x_1530);
        let x_1532 : vec2<f32> = u_xlat48;
        let x_1535 : vec2<f32> = ((vec2<f32>(x_1532.y, x_1532.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1536 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1536.x, x_1535.x, x_1536.z, x_1535.y);
        let x_1538 : vec2<f32> = u_xlat48;
        let x_1541 : vec2<f32> = ((vec2<f32>(x_1538.y, x_1538.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1542 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1541.x, x_1542.y, x_1541.y, x_1542.w);
        let x_1545 : f32 = u_xlat8.y;
        u_xlat10.y = x_1545;
        let x_1547 : vec4<f32> = u_xlat10;
        let x_1548 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1547 + x_1548);
        let x_1550 : vec4<f32> = u_xlat9;
        let x_1551 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1550 / x_1551);
        let x_1553 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1553 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1559 : vec4<f32> = u_xlat10;
        let x_1560 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1559 / x_1560);
        let x_1562 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1562 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1564 : vec4<f32> = u_xlat9;
        let x_1567 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1564.w, x_1564.x, x_1564.y, x_1564.z) * vec4<f32>(x_1567.x, x_1567.x, x_1567.x, x_1567.x));
        let x_1570 : vec4<f32> = u_xlat10;
        let x_1573 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1570.x, x_1570.w, x_1570.y, x_1570.z) * vec4<f32>(x_1573.y, x_1573.y, x_1573.y, x_1573.y));
        let x_1576 : vec4<f32> = u_xlat9;
        let x_1577 : vec3<f32> = vec3<f32>(x_1576.y, x_1576.z, x_1576.w);
        let x_1578 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1577.x, x_1578.y, x_1577.y, x_1577.z);
        let x_1581 : f32 = u_xlat10.x;
        u_xlat12.y = x_1581;
        let x_1583 : vec4<f32> = u_xlat6;
        let x_1586 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1589 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1583.x, x_1583.y, x_1583.x, x_1583.y) * vec4<f32>(x_1586.x, x_1586.y, x_1586.x, x_1586.y)) + vec4<f32>(x_1589.x, x_1589.y, x_1589.z, x_1589.y));
        let x_1592 : vec4<f32> = u_xlat6;
        let x_1595 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1598 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1592.x, x_1592.y) * vec2<f32>(x_1595.x, x_1595.y)) + vec2<f32>(x_1598.w, x_1598.y));
        let x_1602 : f32 = u_xlat12.y;
        u_xlat9.y = x_1602;
        let x_1605 : f32 = u_xlat10.z;
        u_xlat12.y = x_1605;
        let x_1607 : vec4<f32> = u_xlat6;
        let x_1610 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1613 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1607.x, x_1607.y, x_1607.x, x_1607.y) * vec4<f32>(x_1610.x, x_1610.y, x_1610.x, x_1610.y)) + vec4<f32>(x_1613.x, x_1613.y, x_1613.z, x_1613.y));
        let x_1616 : vec4<f32> = u_xlat6;
        let x_1619 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1622 : vec4<f32> = u_xlat12;
        let x_1624 : vec2<f32> = ((vec2<f32>(x_1616.x, x_1616.y) * vec2<f32>(x_1619.x, x_1619.y)) + vec2<f32>(x_1622.w, x_1622.y));
        let x_1625 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1624.x, x_1624.y, x_1625.z, x_1625.w);
        let x_1628 : f32 = u_xlat12.y;
        u_xlat9.z = x_1628;
        let x_1631 : vec4<f32> = u_xlat6;
        let x_1634 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1637 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1631.x, x_1631.y, x_1631.x, x_1631.y) * vec4<f32>(x_1634.x, x_1634.y, x_1634.x, x_1634.y)) + vec4<f32>(x_1637.x, x_1637.y, x_1637.x, x_1637.z));
        let x_1641 : f32 = u_xlat10.w;
        u_xlat12.y = x_1641;
        let x_1644 : vec4<f32> = u_xlat6;
        let x_1647 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1650 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1644.x, x_1644.y, x_1644.x, x_1644.y) * vec4<f32>(x_1647.x, x_1647.y, x_1647.x, x_1647.y)) + vec4<f32>(x_1650.x, x_1650.y, x_1650.z, x_1650.y));
        let x_1654 : vec4<f32> = u_xlat6;
        let x_1657 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1660 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1654.x, x_1654.y) * vec2<f32>(x_1657.x, x_1657.y)) + vec2<f32>(x_1660.w, x_1660.y));
        let x_1664 : f32 = u_xlat12.y;
        u_xlat9.w = x_1664;
        let x_1667 : vec4<f32> = u_xlat6;
        let x_1670 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1673 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1667.x, x_1667.y) * vec2<f32>(x_1670.x, x_1670.y)) + vec2<f32>(x_1673.x, x_1673.w));
        let x_1676 : vec4<f32> = u_xlat12;
        let x_1677 : vec3<f32> = vec3<f32>(x_1676.x, x_1676.z, x_1676.w);
        let x_1678 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1677.x, x_1678.y, x_1677.y, x_1677.z);
        let x_1680 : vec4<f32> = u_xlat6;
        let x_1683 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1686 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1680.x, x_1680.y, x_1680.x, x_1680.y) * vec4<f32>(x_1683.x, x_1683.y, x_1683.x, x_1683.y)) + vec4<f32>(x_1686.x, x_1686.y, x_1686.z, x_1686.y));
        let x_1690 : vec4<f32> = u_xlat6;
        let x_1693 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1696 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1690.x, x_1690.y) * vec2<f32>(x_1693.x, x_1693.y)) + vec2<f32>(x_1696.w, x_1696.y));
        let x_1700 : f32 = u_xlat9.x;
        u_xlat10.x = x_1700;
        let x_1702 : vec4<f32> = u_xlat6;
        let x_1705 : vec4<f32> = x_423.x_MainLightShadowmapSize;
        let x_1708 : vec4<f32> = u_xlat10;
        let x_1710 : vec2<f32> = ((vec2<f32>(x_1702.x, x_1702.y) * vec2<f32>(x_1705.x, x_1705.y)) + vec2<f32>(x_1708.x, x_1708.y));
        let x_1711 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1710.x, x_1710.y, x_1711.z, x_1711.w);
        let x_1714 : vec4<f32> = u_xlat8;
        let x_1716 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1714.x, x_1714.x, x_1714.x, x_1714.x) * x_1716);
        let x_1719 : vec4<f32> = u_xlat8;
        let x_1721 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1719.y, x_1719.y, x_1719.y, x_1719.y) * x_1721);
        let x_1724 : vec4<f32> = u_xlat8;
        let x_1726 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1724.z, x_1724.z, x_1724.z, x_1724.z) * x_1726);
        let x_1728 : vec4<f32> = u_xlat8;
        let x_1730 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1728.w, x_1728.w, x_1728.w, x_1728.w) * x_1730);
        let x_1733 : vec4<f32> = u_xlat13;
        let x_1734 : vec2<f32> = vec2<f32>(x_1733.x, x_1733.y);
        let x_1736 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1734.x, x_1734.y, x_1736);
        let x_1743 : vec3<f32> = txVec13;
        let x_1745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1743.xy, x_1743.z);
        u_xlat70 = x_1745;
        let x_1747 : vec4<f32> = u_xlat13;
        let x_1748 : vec2<f32> = vec2<f32>(x_1747.z, x_1747.w);
        let x_1750 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1748.x, x_1748.y, x_1750);
        let x_1757 : vec3<f32> = txVec14;
        let x_1759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1757.xy, x_1757.z);
        u_xlat9.x = x_1759;
        let x_1762 : f32 = u_xlat9.x;
        let x_1764 : f32 = u_xlat18.y;
        u_xlat9.x = (x_1762 * x_1764);
        let x_1768 : f32 = u_xlat18.x;
        let x_1769 : f32 = u_xlat70;
        let x_1772 : f32 = u_xlat9.x;
        u_xlat70 = ((x_1768 * x_1769) + x_1772);
        let x_1775 : vec2<f32> = u_xlat48;
        let x_1777 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1775.x, x_1775.y, x_1777);
        let x_1784 : vec3<f32> = txVec15;
        let x_1786 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1784.xy, x_1784.z);
        u_xlat48.x = x_1786;
        let x_1789 : f32 = u_xlat18.z;
        let x_1791 : f32 = u_xlat48.x;
        let x_1793 : f32 = u_xlat70;
        u_xlat48.x = ((x_1789 * x_1791) + x_1793);
        let x_1797 : vec4<f32> = u_xlat16;
        let x_1798 : vec2<f32> = vec2<f32>(x_1797.x, x_1797.y);
        let x_1800 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1798.x, x_1798.y, x_1800);
        let x_1808 : vec3<f32> = txVec16;
        let x_1810 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1808.xy, x_1808.z);
        u_xlat69 = x_1810;
        let x_1812 : f32 = u_xlat18.w;
        let x_1813 : f32 = u_xlat69;
        let x_1816 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1812 * x_1813) + x_1816);
        let x_1820 : vec4<f32> = u_xlat14;
        let x_1821 : vec2<f32> = vec2<f32>(x_1820.x, x_1820.y);
        let x_1823 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1821.x, x_1821.y, x_1823);
        let x_1830 : vec3<f32> = txVec17;
        let x_1832 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1830.xy, x_1830.z);
        u_xlat69 = x_1832;
        let x_1834 : f32 = u_xlat19.x;
        let x_1835 : f32 = u_xlat69;
        let x_1838 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1834 * x_1835) + x_1838);
        let x_1842 : vec4<f32> = u_xlat14;
        let x_1843 : vec2<f32> = vec2<f32>(x_1842.z, x_1842.w);
        let x_1845 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1843.x, x_1843.y, x_1845);
        let x_1852 : vec3<f32> = txVec18;
        let x_1854 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1852.xy, x_1852.z);
        u_xlat69 = x_1854;
        let x_1856 : f32 = u_xlat19.y;
        let x_1857 : f32 = u_xlat69;
        let x_1860 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1856 * x_1857) + x_1860);
        let x_1864 : vec4<f32> = u_xlat15;
        let x_1865 : vec2<f32> = vec2<f32>(x_1864.x, x_1864.y);
        let x_1867 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1865.x, x_1865.y, x_1867);
        let x_1874 : vec3<f32> = txVec19;
        let x_1876 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1874.xy, x_1874.z);
        u_xlat69 = x_1876;
        let x_1878 : f32 = u_xlat19.z;
        let x_1879 : f32 = u_xlat69;
        let x_1882 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1878 * x_1879) + x_1882);
        let x_1886 : vec4<f32> = u_xlat16;
        let x_1887 : vec2<f32> = vec2<f32>(x_1886.z, x_1886.w);
        let x_1889 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1887.x, x_1887.y, x_1889);
        let x_1896 : vec3<f32> = txVec20;
        let x_1898 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1896.xy, x_1896.z);
        u_xlat69 = x_1898;
        let x_1900 : f32 = u_xlat19.w;
        let x_1901 : f32 = u_xlat69;
        let x_1904 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1900 * x_1901) + x_1904);
        let x_1908 : vec4<f32> = u_xlat17;
        let x_1909 : vec2<f32> = vec2<f32>(x_1908.x, x_1908.y);
        let x_1911 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1909.x, x_1909.y, x_1911);
        let x_1918 : vec3<f32> = txVec21;
        let x_1920 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1918.xy, x_1918.z);
        u_xlat69 = x_1920;
        let x_1922 : f32 = u_xlat20.x;
        let x_1923 : f32 = u_xlat69;
        let x_1926 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1922 * x_1923) + x_1926);
        let x_1930 : vec4<f32> = u_xlat17;
        let x_1931 : vec2<f32> = vec2<f32>(x_1930.z, x_1930.w);
        let x_1933 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1931.x, x_1931.y, x_1933);
        let x_1940 : vec3<f32> = txVec22;
        let x_1942 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1940.xy, x_1940.z);
        u_xlat69 = x_1942;
        let x_1944 : f32 = u_xlat20.y;
        let x_1945 : f32 = u_xlat69;
        let x_1948 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1944 * x_1945) + x_1948);
        let x_1952 : vec2<f32> = u_xlat30;
        let x_1954 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1952.x, x_1952.y, x_1954);
        let x_1961 : vec3<f32> = txVec23;
        let x_1963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1961.xy, x_1961.z);
        u_xlat69 = x_1963;
        let x_1965 : f32 = u_xlat20.z;
        let x_1966 : f32 = u_xlat69;
        let x_1969 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1965 * x_1966) + x_1969);
        let x_1973 : vec2<f32> = u_xlat57;
        let x_1975 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1973.x, x_1973.y, x_1975);
        let x_1982 : vec3<f32> = txVec24;
        let x_1984 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1982.xy, x_1982.z);
        u_xlat69 = x_1984;
        let x_1986 : f32 = u_xlat20.w;
        let x_1987 : f32 = u_xlat69;
        let x_1990 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1986 * x_1987) + x_1990);
        let x_1994 : vec4<f32> = u_xlat12;
        let x_1995 : vec2<f32> = vec2<f32>(x_1994.x, x_1994.y);
        let x_1997 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1995.x, x_1995.y, x_1997);
        let x_2004 : vec3<f32> = txVec25;
        let x_2006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2004.xy, x_2004.z);
        u_xlat69 = x_2006;
        let x_2008 : f32 = u_xlat8.x;
        let x_2009 : f32 = u_xlat69;
        let x_2012 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2008 * x_2009) + x_2012);
        let x_2016 : vec4<f32> = u_xlat12;
        let x_2017 : vec2<f32> = vec2<f32>(x_2016.z, x_2016.w);
        let x_2019 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_2017.x, x_2017.y, x_2019);
        let x_2026 : vec3<f32> = txVec26;
        let x_2028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2026.xy, x_2026.z);
        u_xlat69 = x_2028;
        let x_2030 : f32 = u_xlat8.y;
        let x_2031 : f32 = u_xlat69;
        let x_2034 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2030 * x_2031) + x_2034);
        let x_2038 : vec2<f32> = u_xlat52;
        let x_2040 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_2038.x, x_2038.y, x_2040);
        let x_2047 : vec3<f32> = txVec27;
        let x_2049 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2047.xy, x_2047.z);
        u_xlat69 = x_2049;
        let x_2051 : f32 = u_xlat8.z;
        let x_2052 : f32 = u_xlat69;
        let x_2055 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_2051 * x_2052) + x_2055);
        let x_2059 : vec4<f32> = u_xlat6;
        let x_2060 : vec2<f32> = vec2<f32>(x_2059.x, x_2059.y);
        let x_2062 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_2060.x, x_2060.y, x_2062);
        let x_2069 : vec3<f32> = txVec28;
        let x_2071 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2069.xy, x_2069.z);
        u_xlat6.x = x_2071;
        let x_2074 : f32 = u_xlat8.w;
        let x_2076 : f32 = u_xlat6.x;
        let x_2079 : f32 = u_xlat48.x;
        u_xlat67 = ((x_2074 * x_2076) + x_2079);
      }
    }
  } else {
    let x_2083 : vec4<f32> = u_xlat4;
    let x_2084 : vec2<f32> = vec2<f32>(x_2083.x, x_2083.y);
    let x_2086 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_2084.x, x_2084.y, x_2086);
    let x_2093 : vec3<f32> = txVec29;
    let x_2095 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2093.xy, x_2093.z);
    u_xlat67 = x_2095;
  }
  let x_2097 : f32 = x_423.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_2097) + 1.0f);
  let x_2101 : f32 = u_xlat67;
  let x_2103 : f32 = x_423.x_MainLightShadowParams.x;
  let x_2106 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2101 * x_2103) + x_2106);
  let x_2111 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_2111);
  let x_2115 : f32 = u_xlat4.z;
  u_xlatb46 = (x_2115 >= 1.0f);
  let x_2117 : bool = u_xlatb46;
  let x_2118 : bool = u_xlatb25;
  u_xlatb25 = (x_2117 | x_2118);
  let x_2120 : bool = u_xlatb25;
  if (x_2120) {
    x_2121 = 1.0f;
  } else {
    let x_2126 : f32 = u_xlat4.x;
    x_2121 = x_2126;
  }
  let x_2127 : f32 = x_2121;
  u_xlat4.x = x_2127;
  let x_2130 : vec3<f32> = vs_INTERP0;
  let x_2132 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat25 = (x_2130 + -(x_2132));
  let x_2135 : vec3<f32> = u_xlat25;
  let x_2136 : vec3<f32> = u_xlat25;
  u_xlat25.x = dot(x_2135, x_2136);
  let x_2140 : f32 = u_xlat25.x;
  let x_2142 : f32 = x_423.x_MainLightShadowParams.z;
  let x_2145 : f32 = x_423.x_MainLightShadowParams.w;
  u_xlat25.x = ((x_2140 * x_2142) + x_2145);
  let x_2149 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_2149, 0.0f, 1.0f);
  let x_2154 : f32 = u_xlat4.x;
  u_xlat46 = (-(x_2154) + 1.0f);
  let x_2158 : f32 = u_xlat25.x;
  let x_2159 : f32 = u_xlat46;
  let x_2162 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2158 * x_2159) + x_2162);
  let x_2165 : f32 = u_xlat68;
  let x_2168 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_2165, x_2165, x_2165) * vec3<f32>(x_2168.x, x_2168.y, x_2168.z));
  let x_2171 : vec3<f32> = u_xlat22;
  let x_2173 : vec4<f32> = u_xlat3;
  u_xlat6.x = dot(-(x_2171), vec3<f32>(x_2173.x, x_2173.y, x_2173.z));
  let x_2178 : f32 = u_xlat6.x;
  let x_2180 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2178 + x_2180);
  let x_2183 : vec4<f32> = u_xlat3;
  let x_2185 : vec4<f32> = u_xlat6;
  let x_2189 : vec3<f32> = u_xlat22;
  let x_2191 : vec3<f32> = ((vec3<f32>(x_2183.x, x_2183.y, x_2183.z) * -(vec3<f32>(x_2185.x, x_2185.x, x_2185.x))) + -(x_2189));
  let x_2192 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2191.x, x_2191.y, x_2191.z, x_2192.w);
  let x_2194 : vec4<f32> = u_xlat3;
  let x_2196 : vec3<f32> = u_xlat22;
  u_xlat69 = dot(vec3<f32>(x_2194.x, x_2194.y, x_2194.z), x_2196);
  let x_2198 : f32 = u_xlat69;
  u_xlat69 = clamp(x_2198, 0.0f, 1.0f);
  let x_2200 : f32 = u_xlat69;
  u_xlat69 = (-(x_2200) + 1.0f);
  let x_2203 : f32 = u_xlat69;
  let x_2204 : f32 = u_xlat69;
  u_xlat69 = (x_2203 * x_2204);
  let x_2206 : f32 = u_xlat69;
  let x_2207 : f32 = u_xlat69;
  u_xlat69 = (x_2206 * x_2207);
  let x_2210 : f32 = u_xlat0.x;
  u_xlat70 = ((-(x_2210) * 0.699999988f) + 1.700000048f);
  let x_2217 : f32 = u_xlat0.x;
  let x_2218 : f32 = u_xlat70;
  u_xlat0.x = (x_2217 * x_2218);
  let x_2222 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2222 * 6.0f);
  let x_2234 : vec4<f32> = u_xlat6;
  let x_2237 : f32 = u_xlat0.x;
  let x_2238 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2234.x, x_2234.y, x_2234.z), x_2237);
  u_xlat8 = x_2238;
  let x_2240 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2240 + -1.0f);
  let x_2244 : f32 = x_289.unity_SpecCube0_HDR.w;
  let x_2246 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2244 * x_2246) + 1.0f);
  let x_2251 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2251, 0.0f);
  let x_2255 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2255);
  let x_2259 : f32 = u_xlat0.x;
  let x_2261 : f32 = x_289.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2259 * x_2261);
  let x_2265 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2265);
  let x_2269 : f32 = u_xlat0.x;
  let x_2271 : f32 = x_289.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2269 * x_2271);
  let x_2274 : vec4<f32> = u_xlat8;
  let x_2276 : vec4<f32> = u_xlat0;
  let x_2278 : vec3<f32> = (vec3<f32>(x_2274.x, x_2274.y, x_2274.z) * vec3<f32>(x_2276.x, x_2276.x, x_2276.x));
  let x_2279 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2278.x, x_2278.y, x_2278.z, x_2279.w);
  let x_2281 : f32 = u_xlat42;
  let x_2283 : f32 = u_xlat42;
  let x_2287 : vec2<f32> = ((vec2<f32>(x_2281, x_2281) * vec2<f32>(x_2283, x_2283)) + vec2<f32>(-1.0f, 1.0f));
  let x_2288 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2287.x, x_2288.y, x_2287.y, x_2288.w);
  let x_2291 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2291);
  let x_2293 : vec3<f32> = u_xlat2;
  let x_2295 : vec4<f32> = u_xlat1;
  let x_2297 : vec3<f32> = (-(x_2293) + vec3<f32>(x_2295.x, x_2295.x, x_2295.x));
  let x_2298 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2297.x, x_2297.y, x_2297.z, x_2298.w);
  let x_2300 : f32 = u_xlat69;
  let x_2302 : vec4<f32> = u_xlat8;
  let x_2305 : vec3<f32> = u_xlat2;
  let x_2306 : vec3<f32> = ((vec3<f32>(x_2300, x_2300, x_2300) * vec3<f32>(x_2302.x, x_2302.y, x_2302.z)) + x_2305);
  let x_2307 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2306.x, x_2306.y, x_2306.z, x_2307.w);
  let x_2309 : f32 = u_xlat42;
  let x_2311 : vec4<f32> = u_xlat8;
  let x_2313 : vec3<f32> = (vec3<f32>(x_2309, x_2309, x_2309) * vec3<f32>(x_2311.x, x_2311.y, x_2311.z));
  let x_2314 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2313.x, x_2313.y, x_2313.z, x_2314.w);
  let x_2316 : vec4<f32> = u_xlat6;
  let x_2318 : vec4<f32> = u_xlat8;
  let x_2320 : vec3<f32> = (vec3<f32>(x_2316.x, x_2316.y, x_2316.z) * vec3<f32>(x_2318.x, x_2318.y, x_2318.z));
  let x_2321 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2320.x, x_2320.y, x_2320.z, x_2321.w);
  let x_2323 : vec4<f32> = u_xlat5;
  let x_2325 : vec3<f32> = u_xlat7;
  let x_2327 : vec4<f32> = u_xlat6;
  let x_2329 : vec3<f32> = ((vec3<f32>(x_2323.x, x_2323.y, x_2323.z) * x_2325) + vec3<f32>(x_2327.x, x_2327.y, x_2327.z));
  let x_2330 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2329.x, x_2329.y, x_2329.z, x_2330.w);
  let x_2333 : f32 = u_xlat4.x;
  let x_2335 : f32 = x_289.unity_LightData.z;
  u_xlat42 = (x_2333 * x_2335);
  let x_2337 : vec4<f32> = u_xlat3;
  let x_2340 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat1.x = dot(vec3<f32>(x_2337.x, x_2337.y, x_2337.z), vec3<f32>(x_2340.x, x_2340.y, x_2340.z));
  let x_2345 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2345, 0.0f, 1.0f);
  let x_2348 : f32 = u_xlat42;
  let x_2350 : f32 = u_xlat1.x;
  u_xlat42 = (x_2348 * x_2350);
  let x_2352 : f32 = u_xlat42;
  let x_2354 : vec3<f32> = u_xlat25;
  let x_2355 : vec3<f32> = (vec3<f32>(x_2352, x_2352, x_2352) * x_2354);
  let x_2356 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2355.x, x_2355.y, x_2355.z, x_2356.w);
  let x_2358 : vec3<f32> = u_xlat22;
  let x_2360 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2362 : vec3<f32> = (x_2358 + vec3<f32>(x_2360.x, x_2360.y, x_2360.z));
  let x_2363 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2362.x, x_2362.y, x_2362.z, x_2363.w);
  let x_2365 : vec4<f32> = u_xlat6;
  let x_2367 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(vec3<f32>(x_2365.x, x_2365.y, x_2365.z), vec3<f32>(x_2367.x, x_2367.y, x_2367.z));
  let x_2370 : f32 = u_xlat42;
  u_xlat42 = max(x_2370, 1.17549435e-37f);
  let x_2373 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2373);
  let x_2375 : f32 = u_xlat42;
  let x_2377 : vec4<f32> = u_xlat6;
  let x_2379 : vec3<f32> = (vec3<f32>(x_2375, x_2375, x_2375) * vec3<f32>(x_2377.x, x_2377.y, x_2377.z));
  let x_2380 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2379.x, x_2379.y, x_2379.z, x_2380.w);
  let x_2382 : vec4<f32> = u_xlat3;
  let x_2384 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(vec3<f32>(x_2382.x, x_2382.y, x_2382.z), vec3<f32>(x_2384.x, x_2384.y, x_2384.z));
  let x_2387 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2387, 0.0f, 1.0f);
  let x_2390 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2392 : vec4<f32> = u_xlat6;
  u_xlat1.x = dot(vec3<f32>(x_2390.x, x_2390.y, x_2390.z), vec3<f32>(x_2392.x, x_2392.y, x_2392.z));
  let x_2397 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2397, 0.0f, 1.0f);
  let x_2400 : f32 = u_xlat42;
  let x_2401 : f32 = u_xlat42;
  u_xlat42 = (x_2400 * x_2401);
  let x_2403 : f32 = u_xlat42;
  let x_2405 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2403 * x_2405) + 1.000010014f);
  let x_2410 : f32 = u_xlat1.x;
  let x_2412 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2410 * x_2412);
  let x_2415 : f32 = u_xlat42;
  let x_2416 : f32 = u_xlat42;
  u_xlat42 = (x_2415 * x_2416);
  let x_2419 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2419, 0.100000001f);
  let x_2423 : f32 = u_xlat42;
  let x_2425 : f32 = u_xlat1.x;
  u_xlat42 = (x_2423 * x_2425);
  let x_2427 : f32 = u_xlat65;
  let x_2428 : f32 = u_xlat42;
  u_xlat42 = (x_2427 * x_2428);
  let x_2430 : f32 = u_xlat66;
  let x_2431 : f32 = u_xlat42;
  u_xlat42 = (x_2430 / x_2431);
  let x_2433 : vec3<f32> = u_xlat2;
  let x_2434 : f32 = u_xlat42;
  let x_2437 : vec3<f32> = u_xlat7;
  let x_2438 : vec3<f32> = ((x_2433 * vec3<f32>(x_2434, x_2434, x_2434)) + x_2437);
  let x_2439 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2438.x, x_2438.y, x_2438.z, x_2439.w);
  let x_2441 : vec4<f32> = u_xlat4;
  let x_2443 : vec4<f32> = u_xlat6;
  let x_2445 : vec3<f32> = (vec3<f32>(x_2441.x, x_2441.y, x_2441.z) * vec3<f32>(x_2443.x, x_2443.y, x_2443.z));
  let x_2446 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2445.x, x_2445.y, x_2445.z, x_2446.w);
  let x_2449 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2451 : f32 = x_289.unity_LightData.y;
  u_xlat42 = min(x_2449, x_2451);
  let x_2454 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2454));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2466 : u32 = u_xlatu_loop_1;
    let x_2467 : u32 = u_xlatu42;
    if ((x_2466 < x_2467)) {
    } else {
      break;
    }
    let x_2470 : u32 = u_xlatu_loop_1;
    u_xlatu67 = (x_2470 >> 2u);
    let x_2473 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2473 & 3u));
    let x_2476 : u32 = u_xlatu67;
    let x_2479 : vec4<f32> = x_289.unity_LightIndices[bitcast<i32>(x_2476)];
    let x_2489 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2494 : vec4<u32> = indexable[x_2489];
    u_xlat67 = dot(x_2479, bitcast<vec4<f32>>(x_2494));
    let x_2498 : f32 = u_xlat67;
    u_xlati67 = i32(x_2498);
    let x_2500 : vec3<f32> = vs_INTERP0;
    let x_2512 : i32 = u_xlati67;
    let x_2514 : vec4<f32> = x_2511.x_AdditionalLightsPosition[x_2512];
    let x_2517 : i32 = u_xlati67;
    let x_2519 : vec4<f32> = x_2511.x_AdditionalLightsPosition[x_2517];
    let x_2521 : vec3<f32> = ((-(x_2500) * vec3<f32>(x_2514.w, x_2514.w, x_2514.w)) + vec3<f32>(x_2519.x, x_2519.y, x_2519.z));
    let x_2522 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2521.x, x_2521.y, x_2521.z, x_2522.w);
    let x_2524 : vec4<f32> = u_xlat8;
    let x_2526 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2524.x, x_2524.y, x_2524.z), vec3<f32>(x_2526.x, x_2526.y, x_2526.z));
    let x_2529 : f32 = u_xlat69;
    u_xlat69 = max(x_2529, 6.10351562e-05f);
    let x_2532 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2532);
    let x_2534 : f32 = u_xlat70;
    let x_2536 : vec4<f32> = u_xlat8;
    let x_2538 : vec3<f32> = (vec3<f32>(x_2534, x_2534, x_2534) * vec3<f32>(x_2536.x, x_2536.y, x_2536.z));
    let x_2539 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2538.x, x_2538.y, x_2538.z, x_2539.w);
    let x_2542 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2542);
    let x_2544 : f32 = u_xlat69;
    let x_2545 : i32 = u_xlati67;
    let x_2547 : f32 = x_2511.x_AdditionalLightsAttenuation[x_2545].x;
    u_xlat69 = (x_2544 * x_2547);
    let x_2549 : f32 = u_xlat69;
    let x_2551 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2549) * x_2551) + 1.0f);
    let x_2554 : f32 = u_xlat69;
    u_xlat69 = max(x_2554, 0.0f);
    let x_2556 : f32 = u_xlat69;
    let x_2557 : f32 = u_xlat69;
    u_xlat69 = (x_2556 * x_2557);
    let x_2559 : f32 = u_xlat69;
    let x_2560 : f32 = u_xlat71;
    u_xlat69 = (x_2559 * x_2560);
    let x_2562 : i32 = u_xlati67;
    let x_2564 : vec4<f32> = x_2511.x_AdditionalLightsSpotDir[x_2562];
    let x_2566 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2564.x, x_2564.y, x_2564.z), vec3<f32>(x_2566.x, x_2566.y, x_2566.z));
    let x_2569 : f32 = u_xlat71;
    let x_2570 : i32 = u_xlati67;
    let x_2572 : f32 = x_2511.x_AdditionalLightsAttenuation[x_2570].z;
    let x_2574 : i32 = u_xlati67;
    let x_2576 : f32 = x_2511.x_AdditionalLightsAttenuation[x_2574].w;
    u_xlat71 = ((x_2569 * x_2572) + x_2576);
    let x_2578 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2578, 0.0f, 1.0f);
    let x_2580 : f32 = u_xlat71;
    let x_2581 : f32 = u_xlat71;
    u_xlat71 = (x_2580 * x_2581);
    let x_2583 : f32 = u_xlat69;
    let x_2584 : f32 = u_xlat71;
    u_xlat69 = (x_2583 * x_2584);
    let x_2586 : f32 = u_xlat68;
    let x_2588 : i32 = u_xlati67;
    let x_2590 : vec4<f32> = x_2511.x_AdditionalLightsColor[x_2588];
    let x_2592 : vec3<f32> = (vec3<f32>(x_2586, x_2586, x_2586) * vec3<f32>(x_2590.x, x_2590.y, x_2590.z));
    let x_2593 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2592.x, x_2592.y, x_2592.z, x_2593.w);
    let x_2595 : vec4<f32> = u_xlat3;
    let x_2597 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_2595.x, x_2595.y, x_2595.z), vec3<f32>(x_2597.x, x_2597.y, x_2597.z));
    let x_2600 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2600, 0.0f, 1.0f);
    let x_2602 : f32 = u_xlat67;
    let x_2603 : f32 = u_xlat69;
    u_xlat67 = (x_2602 * x_2603);
    let x_2605 : f32 = u_xlat67;
    let x_2607 : vec4<f32> = u_xlat10;
    let x_2609 : vec3<f32> = (vec3<f32>(x_2605, x_2605, x_2605) * vec3<f32>(x_2607.x, x_2607.y, x_2607.z));
    let x_2610 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2609.x, x_2609.y, x_2609.z, x_2610.w);
    let x_2612 : vec4<f32> = u_xlat8;
    let x_2614 : f32 = u_xlat70;
    let x_2617 : vec3<f32> = u_xlat22;
    let x_2618 : vec3<f32> = ((vec3<f32>(x_2612.x, x_2612.y, x_2612.z) * vec3<f32>(x_2614, x_2614, x_2614)) + x_2617);
    let x_2619 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2618.x, x_2618.y, x_2618.z, x_2619.w);
    let x_2621 : vec4<f32> = u_xlat8;
    let x_2623 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2621.x, x_2621.y, x_2621.z), vec3<f32>(x_2623.x, x_2623.y, x_2623.z));
    let x_2626 : f32 = u_xlat67;
    u_xlat67 = max(x_2626, 1.17549435e-37f);
    let x_2628 : f32 = u_xlat67;
    u_xlat67 = inverseSqrt(x_2628);
    let x_2630 : f32 = u_xlat67;
    let x_2632 : vec4<f32> = u_xlat8;
    let x_2634 : vec3<f32> = (vec3<f32>(x_2630, x_2630, x_2630) * vec3<f32>(x_2632.x, x_2632.y, x_2632.z));
    let x_2635 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2634.x, x_2634.y, x_2634.z, x_2635.w);
    let x_2637 : vec4<f32> = u_xlat3;
    let x_2639 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2637.x, x_2637.y, x_2637.z), vec3<f32>(x_2639.x, x_2639.y, x_2639.z));
    let x_2642 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2642, 0.0f, 1.0f);
    let x_2644 : vec4<f32> = u_xlat9;
    let x_2646 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2644.x, x_2644.y, x_2644.z), vec3<f32>(x_2646.x, x_2646.y, x_2646.z));
    let x_2649 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2649, 0.0f, 1.0f);
    let x_2651 : f32 = u_xlat67;
    let x_2652 : f32 = u_xlat67;
    u_xlat67 = (x_2651 * x_2652);
    let x_2654 : f32 = u_xlat67;
    let x_2656 : f32 = u_xlat0.x;
    u_xlat67 = ((x_2654 * x_2656) + 1.000010014f);
    let x_2659 : f32 = u_xlat69;
    let x_2660 : f32 = u_xlat69;
    u_xlat69 = (x_2659 * x_2660);
    let x_2662 : f32 = u_xlat67;
    let x_2663 : f32 = u_xlat67;
    u_xlat67 = (x_2662 * x_2663);
    let x_2665 : f32 = u_xlat69;
    u_xlat69 = max(x_2665, 0.100000001f);
    let x_2667 : f32 = u_xlat67;
    let x_2668 : f32 = u_xlat69;
    u_xlat67 = (x_2667 * x_2668);
    let x_2670 : f32 = u_xlat65;
    let x_2671 : f32 = u_xlat67;
    u_xlat67 = (x_2670 * x_2671);
    let x_2673 : f32 = u_xlat66;
    let x_2674 : f32 = u_xlat67;
    u_xlat67 = (x_2673 / x_2674);
    let x_2676 : vec3<f32> = u_xlat2;
    let x_2677 : f32 = u_xlat67;
    let x_2680 : vec3<f32> = u_xlat7;
    let x_2681 : vec3<f32> = ((x_2676 * vec3<f32>(x_2677, x_2677, x_2677)) + x_2680);
    let x_2682 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2681.x, x_2681.y, x_2681.z, x_2682.w);
    let x_2684 : vec4<f32> = u_xlat8;
    let x_2686 : vec4<f32> = u_xlat10;
    let x_2689 : vec4<f32> = u_xlat6;
    let x_2691 : vec3<f32> = ((vec3<f32>(x_2684.x, x_2684.y, x_2684.z) * vec3<f32>(x_2686.x, x_2686.y, x_2686.z)) + vec3<f32>(x_2689.x, x_2689.y, x_2689.z));
    let x_2692 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2691.x, x_2691.y, x_2691.z, x_2692.w);

    continuing {
      let x_2694 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2694 + bitcast<u32>(1i));
    }
  }
  let x_2696 : vec4<f32> = u_xlat5;
  let x_2698 : f32 = u_xlat63;
  let x_2701 : vec4<f32> = u_xlat4;
  let x_2703 : vec3<f32> = ((vec3<f32>(x_2696.x, x_2696.y, x_2696.z) * vec3<f32>(x_2698, x_2698, x_2698)) + vec3<f32>(x_2701.x, x_2701.y, x_2701.z));
  let x_2704 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2703.x, x_2704.y, x_2703.y, x_2703.z);
  let x_2706 : vec4<f32> = u_xlat6;
  let x_2708 : vec4<f32> = u_xlat0;
  let x_2710 : vec3<f32> = (vec3<f32>(x_2706.x, x_2706.y, x_2706.z) + vec3<f32>(x_2708.x, x_2708.z, x_2708.w));
  let x_2711 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2710.x, x_2711.y, x_2710.y, x_2710.z);
  let x_2714 : f32 = u_xlat21.x;
  let x_2716 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2714 * -(x_2716));
  let x_2721 : f32 = u_xlat21.x;
  u_xlat21.x = exp2(x_2721);
  let x_2724 : vec4<f32> = u_xlat0;
  let x_2728 : vec4<f32> = x_44.unity_FogColor;
  let x_2731 : vec3<f32> = (vec3<f32>(x_2724.x, x_2724.z, x_2724.w) + -(vec3<f32>(x_2728.x, x_2728.y, x_2728.z)));
  let x_2732 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2731.x, x_2732.y, x_2731.y, x_2731.z);
  let x_2736 : vec2<f32> = u_xlat21;
  let x_2738 : vec4<f32> = u_xlat0;
  let x_2742 : vec4<f32> = x_44.unity_FogColor;
  let x_2744 : vec3<f32> = ((vec3<f32>(x_2736.x, x_2736.x, x_2736.x) * vec3<f32>(x_2738.x, x_2738.z, x_2738.w)) + vec3<f32>(x_2742.x, x_2742.y, x_2742.z));
  let x_2745 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2744.x, x_2744.y, x_2744.z, x_2745.w);
  let x_2750 : u32 = x_44.x_RenderingLayerMaxInt;
  let x_2752 : f32 = x_289.unity_RenderingLayer.x;
  u_xlatu0 = (x_2750 & bitcast<u32>(x_2752));
  let x_2755 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_2755);
  let x_2760 : f32 = u_xlat0.x;
  let x_2762 : f32 = x_44.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_2760 * x_2762);
  let x_2767 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_2767, 0.0f, 1.0f);
  SV_Target0.w = 1.0f;
  let x_2771 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_2771.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

