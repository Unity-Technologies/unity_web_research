type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_299 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_401 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3852 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec4<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_193 : f32;
  var x_206 : f32;
  var x_218 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1898 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2023 : f32;
  var u_xlatb47 : bool;
  var x_2077 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3461 : f32;
  var u_xlat24 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_173 : vec3<f32> = (-(x_167) + x_172);
  let x_174 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_177 : vec4<f32> = u_xlat4;
  let x_179 : vec4<f32> = u_xlat4;
  u_xlat67 = dot(vec3<f32>(x_177.x, x_177.y, x_177.z), vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_182);
  let x_184 : f32 = u_xlat67;
  let x_186 : vec4<f32> = u_xlat4;
  let x_188 : vec3<f32> = (vec3<f32>(x_184, x_184, x_184) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_189 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_188.x, x_188.y, x_188.z, x_189.w);
  let x_192 : bool = u_xlatb0;
  if (x_192) {
    let x_197 : f32 = u_xlat4.x;
    x_193 = x_197;
  } else {
    let x_202 : f32 = x_160.unity_MatrixV[0i].z;
    x_193 = x_202;
  }
  let x_203 : f32 = x_193;
  u_xlat5.x = x_203;
  let x_205 : bool = u_xlatb0;
  if (x_205) {
    let x_210 : f32 = u_xlat4.y;
    x_206 = x_210;
  } else {
    let x_214 : f32 = x_160.unity_MatrixV[1i].z;
    x_206 = x_214;
  }
  let x_215 : f32 = x_206;
  u_xlat5.y = x_215;
  let x_217 : bool = u_xlatb0;
  if (x_217) {
    let x_222 : f32 = u_xlat4.z;
    x_218 = x_222;
  } else {
    let x_226 : f32 = x_160.unity_MatrixV[2i].z;
    x_218 = x_226;
  }
  let x_227 : f32 = x_218;
  u_xlat5.z = x_227;
  let x_229 : vec3<f32> = u_xlat5;
  let x_233 : vec4<f32> = x_95.unity_WorldToObject[1i];
  let x_235 : vec3<f32> = (vec3<f32>(x_229.y, x_229.y, x_229.y) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_239 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_241 : vec3<f32> = u_xlat5;
  let x_244 : vec4<f32> = u_xlat4;
  let x_246 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(x_241.x, x_241.x, x_241.x)) + vec3<f32>(x_244.x, x_244.y, x_244.z));
  let x_247 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_250 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_252 : vec3<f32> = u_xlat5;
  let x_255 : vec4<f32> = u_xlat4;
  let x_257 : vec3<f32> = ((vec3<f32>(x_250.x, x_250.y, x_250.z) * vec3<f32>(x_252.z, x_252.z, x_252.z)) + vec3<f32>(x_255.x, x_255.y, x_255.z));
  let x_258 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_257.x, x_257.y, x_257.z, x_258.w);
  let x_260 : vec4<f32> = u_xlat4;
  let x_262 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_260.x, x_260.y, x_260.z), vec3<f32>(x_262.x, x_262.y, x_262.z));
  let x_267 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_267);
  let x_270 : vec3<f32> = u_xlat0;
  let x_272 : vec4<f32> = u_xlat4;
  let x_274 : vec3<f32> = (vec3<f32>(x_270.x, x_270.x, x_270.x) * vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_289 : vec4<f32> = vs_INTERP3;
  let x_292 : f32 = x_160.x_GlobalMipBias.x;
  let x_293 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_289.x, x_289.y), x_292);
  u_xlat6 = x_293;
  let x_295 : vec4<f32> = u_xlat6;
  let x_301 : vec4<f32> = x_299.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_295.x, x_295.y, x_295.z) * vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_310 : vec4<f32> = vs_INTERP3;
  let x_313 : f32 = x_160.x_GlobalMipBias.x;
  let x_314 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_310.x, x_310.y), x_313);
  u_xlat8 = vec4<f32>(x_314.w, x_314.x, x_314.y, x_314.z);
  let x_317 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_317.y, x_317.z, x_317.w, x_317.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_324 : vec4<f32> = u_xlat9;
  let x_325 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_324, x_325);
  let x_329 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_329);
  let x_333 : vec3<f32> = u_xlat0;
  let x_335 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_333.x, x_333.x, x_333.x) * vec3<f32>(x_335.x, x_335.y, x_335.z));
  let x_340 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_340 * 200.0f);
  let x_345 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_345, 1.0f);
  let x_348 : vec3<f32> = u_xlat0;
  let x_350 : vec4<f32> = u_xlat6;
  let x_352 : vec3<f32> = (vec3<f32>(x_348.x, x_348.x, x_348.x) * vec3<f32>(x_350.x, x_350.y, x_350.z));
  let x_353 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_352.x, x_352.y, x_352.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat30;
  let x_359 : vec3<f32> = (vec3<f32>(x_355.x, x_355.y, x_355.z) * vec3<f32>(x_357.y, x_357.y, x_357.y));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
  let x_362 : vec3<f32> = u_xlat30;
  let x_364 : vec4<f32> = u_xlat2;
  let x_367 : vec4<f32> = u_xlat3;
  let x_369 : vec3<f32> = ((vec3<f32>(x_362.x, x_362.x, x_362.x) * vec3<f32>(x_364.x, x_364.y, x_364.z)) + vec3<f32>(x_367.x, x_367.y, x_367.z));
  let x_370 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_369.x, x_369.y, x_369.z, x_370.w);
  let x_372 : vec3<f32> = u_xlat30;
  let x_374 : vec3<f32> = u_xlat1;
  let x_376 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_372.z, x_372.z, x_372.z) * x_374) + vec3<f32>(x_376.x, x_376.y, x_376.z));
  let x_379 : vec3<f32> = u_xlat1;
  let x_380 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_379, x_380);
  let x_384 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_384, 1.17549435e-37f);
  let x_389 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_389);
  let x_392 : vec3<f32> = u_xlat0;
  let x_394 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_392.x, x_392.x, x_392.x) * x_394);
  let x_396 : vec3<f32> = vs_INTERP0;
  let x_403 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres0;
  let x_406 : vec3<f32> = (x_396 + -(vec3<f32>(x_403.x, x_403.y, x_403.z)));
  let x_407 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_406.x, x_406.y, x_406.z, x_407.w);
  let x_409 : vec3<f32> = vs_INTERP0;
  let x_411 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres1;
  let x_414 : vec3<f32> = (x_409 + -(vec3<f32>(x_411.x, x_411.y, x_411.z)));
  let x_415 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_414.x, x_414.y, x_414.z, x_415.w);
  let x_417 : vec3<f32> = vs_INTERP0;
  let x_419 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres2;
  let x_422 : vec3<f32> = (x_417 + -(vec3<f32>(x_419.x, x_419.y, x_419.z)));
  let x_423 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_422.x, x_422.y, x_422.z, x_423.w);
  let x_426 : vec3<f32> = vs_INTERP0;
  let x_429 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres3;
  let x_432 : vec3<f32> = (x_426 + -(vec3<f32>(x_429.x, x_429.y, x_429.z)));
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec4<f32> = u_xlat2;
  let x_437 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_435.x, x_435.y, x_435.z), vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_441 : vec4<f32> = u_xlat3;
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_441.x, x_441.y, x_441.z), vec3<f32>(x_443.x, x_443.y, x_443.z));
  let x_447 : vec4<f32> = u_xlat9;
  let x_449 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_447.x, x_447.y, x_447.z), vec3<f32>(x_449.x, x_449.y, x_449.z));
  let x_453 : vec4<f32> = u_xlat10;
  let x_455 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_453.x, x_453.y, x_453.z), vec3<f32>(x_455.x, x_455.y, x_455.z));
  let x_462 : vec4<f32> = u_xlat2;
  let x_465 : vec4<f32> = x_401.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_462 < x_465);
  let x_468 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_468);
  let x_472 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_472);
  let x_476 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_476);
  let x_480 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_480);
  let x_484 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_484);
  let x_489 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_489);
  let x_493 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_493);
  let x_496 : vec4<f32> = u_xlat2;
  let x_498 : vec4<f32> = u_xlat3;
  let x_500 : vec3<f32> = (vec3<f32>(x_496.x, x_496.y, x_496.z) + vec3<f32>(x_498.y, x_498.z, x_498.w));
  let x_501 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_500.x, x_500.y, x_500.z, x_501.w);
  let x_503 : vec4<f32> = u_xlat2;
  let x_506 : vec3<f32> = max(vec3<f32>(x_503.x, x_503.y, x_503.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_507 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_507.x, x_506.x, x_506.y, x_506.z);
  let x_509 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_509, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_516 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_516) + 4.0f);
  let x_522 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_522);
  let x_525 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_525) << bitcast<u32>(2i));
  let x_528 : vec3<f32> = vs_INTERP0;
  let x_530 : i32 = u_xlati0;
  let x_533 : i32 = u_xlati0;
  let x_537 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_530 + 1i) / 4i)][((x_533 + 1i) % 4i)];
  let x_539 : vec3<f32> = (vec3<f32>(x_528.y, x_528.y, x_528.y) * vec3<f32>(x_537.x, x_537.y, x_537.z));
  let x_540 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_542 : i32 = u_xlati0;
  let x_544 : i32 = u_xlati0;
  let x_547 : vec4<f32> = x_401.x_MainLightWorldToShadow[(x_542 / 4i)][(x_544 % 4i)];
  let x_549 : vec3<f32> = vs_INTERP0;
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : vec3<f32> = ((vec3<f32>(x_547.x, x_547.y, x_547.z) * vec3<f32>(x_549.x, x_549.x, x_549.x)) + vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_555 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
  let x_557 : i32 = u_xlati0;
  let x_560 : i32 = u_xlati0;
  let x_564 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_557 + 2i) / 4i)][((x_560 + 2i) % 4i)];
  let x_566 : vec3<f32> = vs_INTERP0;
  let x_569 : vec4<f32> = u_xlat2;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.x, x_564.y, x_564.z) * vec3<f32>(x_566.z, x_566.z, x_566.z)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat2;
  let x_576 : i32 = u_xlati0;
  let x_579 : i32 = u_xlati0;
  let x_583 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_576 + 3i) / 4i)][((x_579 + 3i) % 4i)];
  let x_585 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(x_583.x, x_583.y, x_583.z));
  let x_586 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_585.x, x_585.y, x_585.z, x_586.w);
  let x_590 : f32 = x_401.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_590);
  let x_592 : bool = u_xlatb0;
  if (x_592) {
    let x_597 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb67 = (x_597 == 1.0f);
    let x_599 : bool = u_xlatb67;
    if (x_599) {
      let x_602 : vec4<f32> = u_xlat2;
      let x_606 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_606);
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.x, x_609.y);
      let x_612 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_624 : vec3<f32> = txVec0;
      let x_626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_624.xy, x_624.z);
      u_xlat9.x = x_626;
      let x_629 : vec4<f32> = u_xlat3;
      let x_630 : vec2<f32> = vec2<f32>(x_629.z, x_629.w);
      let x_632 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_630.x, x_630.y, x_632);
      let x_639 : vec3<f32> = txVec1;
      let x_641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_639.xy, x_639.z);
      u_xlat9.y = x_641;
      let x_643 : vec4<f32> = u_xlat2;
      let x_646 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_643.x, x_643.y, x_643.x, x_643.y) + x_646);
      let x_649 : vec4<f32> = u_xlat3;
      let x_650 : vec2<f32> = vec2<f32>(x_649.x, x_649.y);
      let x_652 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_650.x, x_650.y, x_652);
      let x_659 : vec3<f32> = txVec2;
      let x_661 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_659.xy, x_659.z);
      u_xlat9.z = x_661;
      let x_664 : vec4<f32> = u_xlat3;
      let x_665 : vec2<f32> = vec2<f32>(x_664.z, x_664.w);
      let x_667 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_665.x, x_665.y, x_667);
      let x_674 : vec3<f32> = txVec3;
      let x_676 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_674.xy, x_674.z);
      u_xlat9.w = x_676;
      let x_678 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_678, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_685 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb68 = (x_685 == 2.0f);
      let x_687 : bool = u_xlatb68;
      if (x_687) {
        let x_690 : vec4<f32> = u_xlat2;
        let x_693 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_698 : vec2<f32> = ((vec2<f32>(x_690.x, x_690.y) * vec2<f32>(x_693.z, x_693.w)) + vec2<f32>(0.5f, 0.5f));
        let x_699 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_698.x, x_698.y, x_699.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat3;
        let x_703 : vec2<f32> = floor(vec2<f32>(x_701.x, x_701.y));
        let x_704 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_703.x, x_703.y, x_704.z, x_704.w);
        let x_708 : vec4<f32> = u_xlat2;
        let x_711 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_714 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_708.x, x_708.y) * vec2<f32>(x_711.z, x_711.w)) + -(vec2<f32>(x_714.x, x_714.y)));
        let x_718 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_718.x, x_718.x, x_718.y, x_718.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_722 : vec4<f32> = u_xlat9;
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_722.x, x_722.x, x_722.z, x_722.z) * vec4<f32>(x_724.x, x_724.x, x_724.z, x_724.z));
        let x_727 : vec4<f32> = u_xlat10;
        let x_731 : vec2<f32> = (vec2<f32>(x_727.y, x_727.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_732 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_731.x, x_732.y, x_731.y, x_732.w);
        let x_734 : vec4<f32> = u_xlat10;
        let x_737 : vec2<f32> = u_xlat47;
        let x_739 : vec2<f32> = ((vec2<f32>(x_734.x, x_734.z) * vec2<f32>(0.5f, 0.5f)) + -(x_737));
        let x_740 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
        let x_743 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_743) + vec2<f32>(1.0f, 1.0f));
        let x_748 : vec2<f32> = u_xlat47;
        let x_750 : vec2<f32> = min(x_748, vec2<f32>(0.0f, 0.0f));
        let x_751 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_750.x, x_750.y, x_751.z, x_751.w);
        let x_753 : vec4<f32> = u_xlat11;
        let x_756 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = u_xlat54;
        let x_760 : vec2<f32> = ((-(vec2<f32>(x_753.x, x_753.y)) * vec2<f32>(x_756.x, x_756.y)) + x_759);
        let x_761 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_760.x, x_760.y, x_761.z, x_761.w);
        let x_763 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_763, vec2<f32>(0.0f, 0.0f));
        let x_765 : vec2<f32> = u_xlat47;
        let x_767 : vec2<f32> = u_xlat47;
        let x_769 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_765) * x_767) + vec2<f32>(x_769.y, x_769.w));
        let x_772 : vec4<f32> = u_xlat11;
        let x_774 : vec2<f32> = (vec2<f32>(x_772.x, x_772.y) + vec2<f32>(1.0f, 1.0f));
        let x_775 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_774.x, x_774.y, x_775.z, x_775.w);
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_777 + vec2<f32>(1.0f, 1.0f));
        let x_780 : vec4<f32> = u_xlat10;
        let x_784 : vec2<f32> = (vec2<f32>(x_780.x, x_780.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_785 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_784.x, x_784.y, x_785.z, x_785.w);
        let x_787 : vec2<f32> = u_xlat54;
        let x_788 : vec2<f32> = (x_787 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_789 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_788.x, x_788.y, x_789.z, x_789.w);
        let x_791 : vec4<f32> = u_xlat11;
        let x_793 : vec2<f32> = (vec2<f32>(x_791.x, x_791.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_794 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_793.x, x_793.y, x_794.z, x_794.w);
        let x_797 : vec2<f32> = u_xlat47;
        let x_798 : vec2<f32> = (x_797 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_799 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_798.x, x_798.y, x_799.z, x_799.w);
        let x_801 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_801.y, x_801.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_805 : f32 = u_xlat11.x;
        u_xlat12.z = x_805;
        let x_808 : f32 = u_xlat47.x;
        u_xlat12.w = x_808;
        let x_811 : f32 = u_xlat13.x;
        u_xlat10.z = x_811;
        let x_814 : f32 = u_xlat9.x;
        u_xlat10.w = x_814;
        let x_817 : vec4<f32> = u_xlat10;
        let x_819 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_817.z, x_817.w, x_817.x, x_817.z) + vec4<f32>(x_819.z, x_819.w, x_819.x, x_819.z));
        let x_823 : f32 = u_xlat12.y;
        u_xlat11.z = x_823;
        let x_826 : f32 = u_xlat47.y;
        u_xlat11.w = x_826;
        let x_829 : f32 = u_xlat10.y;
        u_xlat13.z = x_829;
        let x_832 : f32 = u_xlat9.z;
        u_xlat13.w = x_832;
        let x_834 : vec4<f32> = u_xlat11;
        let x_836 : vec4<f32> = u_xlat13;
        let x_838 : vec3<f32> = (vec3<f32>(x_834.z, x_834.y, x_834.w) + vec3<f32>(x_836.z, x_836.y, x_836.w));
        let x_839 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_838.x, x_838.y, x_838.z, x_839.w);
        let x_841 : vec4<f32> = u_xlat10;
        let x_843 : vec4<f32> = u_xlat14;
        let x_845 : vec3<f32> = (vec3<f32>(x_841.x, x_841.z, x_841.w) / vec3<f32>(x_843.z, x_843.w, x_843.y));
        let x_846 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_845.x, x_845.y, x_845.z, x_846.w);
        let x_848 : vec4<f32> = u_xlat10;
        let x_854 : vec3<f32> = (vec3<f32>(x_848.x, x_848.y, x_848.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_855 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_854.x, x_854.y, x_854.z, x_855.w);
        let x_857 : vec4<f32> = u_xlat13;
        let x_859 : vec4<f32> = u_xlat9;
        let x_861 : vec3<f32> = (vec3<f32>(x_857.z, x_857.y, x_857.w) / vec3<f32>(x_859.x, x_859.y, x_859.z));
        let x_862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_861.x, x_861.y, x_861.z, x_862.w);
        let x_864 : vec4<f32> = u_xlat11;
        let x_866 : vec3<f32> = (vec3<f32>(x_864.x, x_864.y, x_864.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_867 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_866.x, x_866.y, x_866.z, x_867.w);
        let x_869 : vec4<f32> = u_xlat10;
        let x_872 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_874 : vec3<f32> = (vec3<f32>(x_869.y, x_869.x, x_869.z) * vec3<f32>(x_872.x, x_872.x, x_872.x));
        let x_875 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_874.x, x_874.y, x_874.z, x_875.w);
        let x_877 : vec4<f32> = u_xlat11;
        let x_880 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_882 : vec3<f32> = (vec3<f32>(x_877.x, x_877.y, x_877.z) * vec3<f32>(x_880.y, x_880.y, x_880.y));
        let x_883 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_882.x, x_882.y, x_882.z, x_883.w);
        let x_886 : f32 = u_xlat11.x;
        u_xlat10.w = x_886;
        let x_888 : vec4<f32> = u_xlat3;
        let x_891 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_894 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_888.x, x_888.y, x_888.x, x_888.y) * vec4<f32>(x_891.x, x_891.y, x_891.x, x_891.y)) + vec4<f32>(x_894.y, x_894.w, x_894.x, x_894.w));
        let x_897 : vec4<f32> = u_xlat3;
        let x_900 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_903 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_897.x, x_897.y) * vec2<f32>(x_900.x, x_900.y)) + vec2<f32>(x_903.z, x_903.w));
        let x_907 : f32 = u_xlat10.y;
        u_xlat11.w = x_907;
        let x_909 : vec4<f32> = u_xlat11;
        let x_910 : vec2<f32> = vec2<f32>(x_909.y, x_909.z);
        let x_911 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_911.x, x_910.x, x_911.z, x_910.y);
        let x_913 : vec4<f32> = u_xlat3;
        let x_916 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_919 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_913.x, x_913.y, x_913.x, x_913.y) * vec4<f32>(x_916.x, x_916.y, x_916.x, x_916.y)) + vec4<f32>(x_919.x, x_919.y, x_919.z, x_919.y));
        let x_922 : vec4<f32> = u_xlat3;
        let x_925 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_928 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_922.x, x_922.y, x_922.x, x_922.y) * vec4<f32>(x_925.x, x_925.y, x_925.x, x_925.y)) + vec4<f32>(x_928.w, x_928.y, x_928.w, x_928.z));
        let x_931 : vec4<f32> = u_xlat3;
        let x_934 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_931.x, x_931.y, x_931.x, x_931.y) * vec4<f32>(x_934.x, x_934.y, x_934.x, x_934.y)) + vec4<f32>(x_937.x, x_937.w, x_937.z, x_937.w));
        let x_941 : vec4<f32> = u_xlat9;
        let x_943 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_941.x, x_941.x, x_941.x, x_941.y) * vec4<f32>(x_943.z, x_943.w, x_943.y, x_943.z));
        let x_947 : vec4<f32> = u_xlat9;
        let x_949 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_947.y, x_947.y, x_947.z, x_947.z) * x_949);
        let x_953 : f32 = u_xlat9.z;
        let x_955 : f32 = u_xlat14.y;
        u_xlat68 = (x_953 * x_955);
        let x_958 : vec4<f32> = u_xlat12;
        let x_959 : vec2<f32> = vec2<f32>(x_958.x, x_958.y);
        let x_961 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_959.x, x_959.y, x_961);
        let x_968 : vec3<f32> = txVec4;
        let x_970 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_968.xy, x_968.z);
        u_xlat3.x = x_970;
        let x_973 : vec4<f32> = u_xlat12;
        let x_974 : vec2<f32> = vec2<f32>(x_973.z, x_973.w);
        let x_976 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_974.x, x_974.y, x_976);
        let x_984 : vec3<f32> = txVec5;
        let x_986 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_984.xy, x_984.z);
        u_xlat25 = x_986;
        let x_987 : f32 = u_xlat25;
        let x_989 : f32 = u_xlat15.y;
        u_xlat25 = (x_987 * x_989);
        let x_992 : f32 = u_xlat15.x;
        let x_994 : f32 = u_xlat3.x;
        let x_996 : f32 = u_xlat25;
        u_xlat3.x = ((x_992 * x_994) + x_996);
        let x_1000 : vec2<f32> = u_xlat47;
        let x_1002 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1000.x, x_1000.y, x_1002);
        let x_1009 : vec3<f32> = txVec6;
        let x_1011 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1009.xy, x_1009.z);
        u_xlat25 = x_1011;
        let x_1013 : f32 = u_xlat15.z;
        let x_1014 : f32 = u_xlat25;
        let x_1017 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1013 * x_1014) + x_1017);
        let x_1021 : vec4<f32> = u_xlat11;
        let x_1022 : vec2<f32> = vec2<f32>(x_1021.x, x_1021.y);
        let x_1024 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1022.x, x_1022.y, x_1024);
        let x_1031 : vec3<f32> = txVec7;
        let x_1033 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1031.xy, x_1031.z);
        u_xlat25 = x_1033;
        let x_1035 : f32 = u_xlat15.w;
        let x_1036 : f32 = u_xlat25;
        let x_1039 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1035 * x_1036) + x_1039);
        let x_1043 : vec4<f32> = u_xlat13;
        let x_1044 : vec2<f32> = vec2<f32>(x_1043.x, x_1043.y);
        let x_1046 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1044.x, x_1044.y, x_1046);
        let x_1053 : vec3<f32> = txVec8;
        let x_1055 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1053.xy, x_1053.z);
        u_xlat25 = x_1055;
        let x_1057 : f32 = u_xlat16.x;
        let x_1058 : f32 = u_xlat25;
        let x_1061 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1057 * x_1058) + x_1061);
        let x_1065 : vec4<f32> = u_xlat13;
        let x_1066 : vec2<f32> = vec2<f32>(x_1065.z, x_1065.w);
        let x_1068 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1066.x, x_1066.y, x_1068);
        let x_1075 : vec3<f32> = txVec9;
        let x_1077 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1075.xy, x_1075.z);
        u_xlat25 = x_1077;
        let x_1079 : f32 = u_xlat16.y;
        let x_1080 : f32 = u_xlat25;
        let x_1083 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1079 * x_1080) + x_1083);
        let x_1087 : vec4<f32> = u_xlat11;
        let x_1088 : vec2<f32> = vec2<f32>(x_1087.z, x_1087.w);
        let x_1090 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1088.x, x_1088.y, x_1090);
        let x_1097 : vec3<f32> = txVec10;
        let x_1099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1097.xy, x_1097.z);
        u_xlat25 = x_1099;
        let x_1101 : f32 = u_xlat16.z;
        let x_1102 : f32 = u_xlat25;
        let x_1105 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1101 * x_1102) + x_1105);
        let x_1109 : vec4<f32> = u_xlat10;
        let x_1110 : vec2<f32> = vec2<f32>(x_1109.x, x_1109.y);
        let x_1112 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1110.x, x_1110.y, x_1112);
        let x_1119 : vec3<f32> = txVec11;
        let x_1121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1119.xy, x_1119.z);
        u_xlat25 = x_1121;
        let x_1123 : f32 = u_xlat16.w;
        let x_1124 : f32 = u_xlat25;
        let x_1127 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1123 * x_1124) + x_1127);
        let x_1131 : vec4<f32> = u_xlat10;
        let x_1132 : vec2<f32> = vec2<f32>(x_1131.z, x_1131.w);
        let x_1134 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1132.x, x_1132.y, x_1134);
        let x_1141 : vec3<f32> = txVec12;
        let x_1143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1141.xy, x_1141.z);
        u_xlat25 = x_1143;
        let x_1144 : f32 = u_xlat68;
        let x_1145 : f32 = u_xlat25;
        let x_1148 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1144 * x_1145) + x_1148);
      } else {
        let x_1151 : vec4<f32> = u_xlat2;
        let x_1154 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1157 : vec2<f32> = ((vec2<f32>(x_1151.x, x_1151.y) * vec2<f32>(x_1154.z, x_1154.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1158 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1157.x, x_1157.y, x_1158.z, x_1158.w);
        let x_1160 : vec4<f32> = u_xlat3;
        let x_1162 : vec2<f32> = floor(vec2<f32>(x_1160.x, x_1160.y));
        let x_1163 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1162.x, x_1162.y, x_1163.z, x_1163.w);
        let x_1165 : vec4<f32> = u_xlat2;
        let x_1168 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1171 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1165.x, x_1165.y) * vec2<f32>(x_1168.z, x_1168.w)) + -(vec2<f32>(x_1171.x, x_1171.y)));
        let x_1175 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1175.x, x_1175.x, x_1175.y, x_1175.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1178 : vec4<f32> = u_xlat9;
        let x_1180 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1178.x, x_1178.x, x_1178.z, x_1178.z) * vec4<f32>(x_1180.x, x_1180.x, x_1180.z, x_1180.z));
        let x_1183 : vec4<f32> = u_xlat10;
        let x_1187 : vec2<f32> = (vec2<f32>(x_1183.y, x_1183.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1188.x, x_1187.x, x_1188.z, x_1187.y);
        let x_1190 : vec4<f32> = u_xlat10;
        let x_1193 : vec2<f32> = u_xlat47;
        let x_1195 : vec2<f32> = ((vec2<f32>(x_1190.x, x_1190.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1193));
        let x_1196 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1195.x, x_1196.y, x_1195.y, x_1196.w);
        let x_1198 : vec2<f32> = u_xlat47;
        let x_1200 : vec2<f32> = (-(x_1198) + vec2<f32>(1.0f, 1.0f));
        let x_1201 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1200.x, x_1200.y, x_1201.z, x_1201.w);
        let x_1203 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1203, vec2<f32>(0.0f, 0.0f));
        let x_1205 : vec2<f32> = u_xlat54;
        let x_1207 : vec2<f32> = u_xlat54;
        let x_1209 : vec4<f32> = u_xlat10;
        let x_1211 : vec2<f32> = ((-(x_1205) * x_1207) + vec2<f32>(x_1209.x, x_1209.y));
        let x_1212 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1211.x, x_1211.y, x_1212.z, x_1212.w);
        let x_1214 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1214, vec2<f32>(0.0f, 0.0f));
        let x_1217 : vec2<f32> = u_xlat54;
        let x_1219 : vec2<f32> = u_xlat54;
        let x_1221 : vec4<f32> = u_xlat9;
        let x_1223 : vec2<f32> = ((-(x_1217) * x_1219) + vec2<f32>(x_1221.y, x_1221.w));
        let x_1224 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1223.x, x_1224.y, x_1223.y);
        let x_1226 : vec4<f32> = u_xlat10;
        let x_1229 : vec2<f32> = (vec2<f32>(x_1226.x, x_1226.y) + vec2<f32>(2.0f, 2.0f));
        let x_1230 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
        let x_1232 : vec3<f32> = u_xlat31;
        let x_1234 : vec2<f32> = (vec2<f32>(x_1232.x, x_1232.z) + vec2<f32>(2.0f, 2.0f));
        let x_1235 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1235.x, x_1234.x, x_1235.z, x_1234.y);
        let x_1238 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1238 * 0.081632003f);
        let x_1242 : vec4<f32> = u_xlat9;
        let x_1245 : vec3<f32> = (vec3<f32>(x_1242.z, x_1242.x, x_1242.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1246 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1245.x, x_1245.y, x_1245.z, x_1246.w);
        let x_1248 : vec4<f32> = u_xlat10;
        let x_1251 : vec2<f32> = (vec2<f32>(x_1248.x, x_1248.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1252 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1251.x, x_1251.y, x_1252.z, x_1252.w);
        let x_1255 : f32 = u_xlat13.y;
        u_xlat12.x = x_1255;
        let x_1257 : vec2<f32> = u_xlat47;
        let x_1264 : vec2<f32> = ((vec2<f32>(x_1257.x, x_1257.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1265 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1265.x, x_1264.x, x_1265.z, x_1264.y);
        let x_1267 : vec2<f32> = u_xlat47;
        let x_1271 : vec2<f32> = ((vec2<f32>(x_1267.x, x_1267.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1272 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1271.x, x_1272.y, x_1271.y, x_1272.w);
        let x_1275 : f32 = u_xlat9.x;
        u_xlat10.y = x_1275;
        let x_1278 : f32 = u_xlat11.y;
        u_xlat10.w = x_1278;
        let x_1280 : vec4<f32> = u_xlat10;
        let x_1281 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1280 + x_1281);
        let x_1283 : vec2<f32> = u_xlat47;
        let x_1286 : vec2<f32> = ((vec2<f32>(x_1283.y, x_1283.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1287 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1287.x, x_1286.x, x_1287.z, x_1286.y);
        let x_1289 : vec2<f32> = u_xlat47;
        let x_1292 : vec2<f32> = ((vec2<f32>(x_1289.y, x_1289.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1293 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1292.x, x_1293.y, x_1292.y, x_1293.w);
        let x_1296 : f32 = u_xlat9.y;
        u_xlat11.y = x_1296;
        let x_1298 : vec4<f32> = u_xlat11;
        let x_1299 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1298 + x_1299);
        let x_1301 : vec4<f32> = u_xlat10;
        let x_1302 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1301 / x_1302);
        let x_1304 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1304 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1310 : vec4<f32> = u_xlat11;
        let x_1311 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1310 / x_1311);
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1313 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1315 : vec4<f32> = u_xlat10;
        let x_1318 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1315.w, x_1315.x, x_1315.y, x_1315.z) * vec4<f32>(x_1318.x, x_1318.x, x_1318.x, x_1318.x));
        let x_1321 : vec4<f32> = u_xlat11;
        let x_1324 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1321.x, x_1321.w, x_1321.y, x_1321.z) * vec4<f32>(x_1324.y, x_1324.y, x_1324.y, x_1324.y));
        let x_1327 : vec4<f32> = u_xlat10;
        let x_1328 : vec3<f32> = vec3<f32>(x_1327.y, x_1327.z, x_1327.w);
        let x_1329 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1328.x, x_1329.y, x_1328.y, x_1328.z);
        let x_1332 : f32 = u_xlat11.x;
        u_xlat13.y = x_1332;
        let x_1334 : vec4<f32> = u_xlat3;
        let x_1337 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1340 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1334.x, x_1334.y, x_1334.x, x_1334.y) * vec4<f32>(x_1337.x, x_1337.y, x_1337.x, x_1337.y)) + vec4<f32>(x_1340.x, x_1340.y, x_1340.z, x_1340.y));
        let x_1343 : vec4<f32> = u_xlat3;
        let x_1346 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1349 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1343.x, x_1343.y) * vec2<f32>(x_1346.x, x_1346.y)) + vec2<f32>(x_1349.w, x_1349.y));
        let x_1353 : f32 = u_xlat13.y;
        u_xlat10.y = x_1353;
        let x_1356 : f32 = u_xlat11.z;
        u_xlat13.y = x_1356;
        let x_1358 : vec4<f32> = u_xlat3;
        let x_1361 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1364 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1358.x, x_1358.y, x_1358.x, x_1358.y) * vec4<f32>(x_1361.x, x_1361.y, x_1361.x, x_1361.y)) + vec4<f32>(x_1364.x, x_1364.y, x_1364.z, x_1364.y));
        let x_1367 : vec4<f32> = u_xlat3;
        let x_1370 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1373 : vec4<f32> = u_xlat13;
        let x_1375 : vec2<f32> = ((vec2<f32>(x_1367.x, x_1367.y) * vec2<f32>(x_1370.x, x_1370.y)) + vec2<f32>(x_1373.w, x_1373.y));
        let x_1376 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1375.x, x_1375.y, x_1376.z, x_1376.w);
        let x_1379 : f32 = u_xlat13.y;
        u_xlat10.z = x_1379;
        let x_1382 : vec4<f32> = u_xlat3;
        let x_1385 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1388 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1382.x, x_1382.y, x_1382.x, x_1382.y) * vec4<f32>(x_1385.x, x_1385.y, x_1385.x, x_1385.y)) + vec4<f32>(x_1388.x, x_1388.y, x_1388.x, x_1388.z));
        let x_1392 : f32 = u_xlat11.w;
        u_xlat13.y = x_1392;
        let x_1395 : vec4<f32> = u_xlat3;
        let x_1398 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1401 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1395.x, x_1395.y, x_1395.x, x_1395.y) * vec4<f32>(x_1398.x, x_1398.y, x_1398.x, x_1398.y)) + vec4<f32>(x_1401.x, x_1401.y, x_1401.z, x_1401.y));
        let x_1405 : vec4<f32> = u_xlat3;
        let x_1408 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1411 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1405.x, x_1405.y) * vec2<f32>(x_1408.x, x_1408.y)) + vec2<f32>(x_1411.w, x_1411.y));
        let x_1415 : f32 = u_xlat13.y;
        u_xlat10.w = x_1415;
        let x_1418 : vec4<f32> = u_xlat3;
        let x_1421 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1424 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1418.x, x_1418.y) * vec2<f32>(x_1421.x, x_1421.y)) + vec2<f32>(x_1424.x, x_1424.w));
        let x_1427 : vec4<f32> = u_xlat13;
        let x_1428 : vec3<f32> = vec3<f32>(x_1427.x, x_1427.z, x_1427.w);
        let x_1429 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1428.x, x_1429.y, x_1428.y, x_1428.z);
        let x_1431 : vec4<f32> = u_xlat3;
        let x_1434 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1437 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1431.x, x_1431.y, x_1431.x, x_1431.y) * vec4<f32>(x_1434.x, x_1434.y, x_1434.x, x_1434.y)) + vec4<f32>(x_1437.x, x_1437.y, x_1437.z, x_1437.y));
        let x_1441 : vec4<f32> = u_xlat3;
        let x_1444 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1447 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1441.x, x_1441.y) * vec2<f32>(x_1444.x, x_1444.y)) + vec2<f32>(x_1447.w, x_1447.y));
        let x_1451 : f32 = u_xlat10.x;
        u_xlat11.x = x_1451;
        let x_1453 : vec4<f32> = u_xlat3;
        let x_1456 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1459 : vec4<f32> = u_xlat11;
        let x_1461 : vec2<f32> = ((vec2<f32>(x_1453.x, x_1453.y) * vec2<f32>(x_1456.x, x_1456.y)) + vec2<f32>(x_1459.x, x_1459.y));
        let x_1462 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1461.x, x_1461.y, x_1462.z, x_1462.w);
        let x_1465 : vec4<f32> = u_xlat9;
        let x_1467 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1465.x, x_1465.x, x_1465.x, x_1465.x) * x_1467);
        let x_1470 : vec4<f32> = u_xlat9;
        let x_1472 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1470.y, x_1470.y, x_1470.y, x_1470.y) * x_1472);
        let x_1475 : vec4<f32> = u_xlat9;
        let x_1477 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1475.z, x_1475.z, x_1475.z, x_1475.z) * x_1477);
        let x_1479 : vec4<f32> = u_xlat9;
        let x_1481 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1479.w, x_1479.w, x_1479.w, x_1479.w) * x_1481);
        let x_1484 : vec4<f32> = u_xlat14;
        let x_1485 : vec2<f32> = vec2<f32>(x_1484.x, x_1484.y);
        let x_1487 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1485.x, x_1485.y, x_1487);
        let x_1494 : vec3<f32> = txVec13;
        let x_1496 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1494.xy, x_1494.z);
        u_xlat68 = x_1496;
        let x_1498 : vec4<f32> = u_xlat14;
        let x_1499 : vec2<f32> = vec2<f32>(x_1498.z, x_1498.w);
        let x_1501 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1499.x, x_1499.y, x_1501);
        let x_1509 : vec3<f32> = txVec14;
        let x_1511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1509.xy, x_1509.z);
        u_xlat70 = x_1511;
        let x_1512 : f32 = u_xlat70;
        let x_1514 : f32 = u_xlat19.y;
        u_xlat70 = (x_1512 * x_1514);
        let x_1517 : f32 = u_xlat19.x;
        let x_1518 : f32 = u_xlat68;
        let x_1520 : f32 = u_xlat70;
        u_xlat68 = ((x_1517 * x_1518) + x_1520);
        let x_1523 : vec2<f32> = u_xlat47;
        let x_1525 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec15;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat47.x = x_1534;
        let x_1537 : f32 = u_xlat19.z;
        let x_1539 : f32 = u_xlat47.x;
        let x_1541 : f32 = u_xlat68;
        u_xlat68 = ((x_1537 * x_1539) + x_1541);
        let x_1544 : vec4<f32> = u_xlat17;
        let x_1545 : vec2<f32> = vec2<f32>(x_1544.x, x_1544.y);
        let x_1547 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1545.x, x_1545.y, x_1547);
        let x_1554 : vec3<f32> = txVec16;
        let x_1556 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1554.xy, x_1554.z);
        u_xlat47.x = x_1556;
        let x_1559 : f32 = u_xlat19.w;
        let x_1561 : f32 = u_xlat47.x;
        let x_1563 : f32 = u_xlat68;
        u_xlat68 = ((x_1559 * x_1561) + x_1563);
        let x_1566 : vec4<f32> = u_xlat15;
        let x_1567 : vec2<f32> = vec2<f32>(x_1566.x, x_1566.y);
        let x_1569 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1567.x, x_1567.y, x_1569);
        let x_1576 : vec3<f32> = txVec17;
        let x_1578 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1576.xy, x_1576.z);
        u_xlat47.x = x_1578;
        let x_1581 : f32 = u_xlat20.x;
        let x_1583 : f32 = u_xlat47.x;
        let x_1585 : f32 = u_xlat68;
        u_xlat68 = ((x_1581 * x_1583) + x_1585);
        let x_1588 : vec4<f32> = u_xlat15;
        let x_1589 : vec2<f32> = vec2<f32>(x_1588.z, x_1588.w);
        let x_1591 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1589.x, x_1589.y, x_1591);
        let x_1598 : vec3<f32> = txVec18;
        let x_1600 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1598.xy, x_1598.z);
        u_xlat47.x = x_1600;
        let x_1603 : f32 = u_xlat20.y;
        let x_1605 : f32 = u_xlat47.x;
        let x_1607 : f32 = u_xlat68;
        u_xlat68 = ((x_1603 * x_1605) + x_1607);
        let x_1610 : vec4<f32> = u_xlat16;
        let x_1611 : vec2<f32> = vec2<f32>(x_1610.x, x_1610.y);
        let x_1613 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1611.x, x_1611.y, x_1613);
        let x_1620 : vec3<f32> = txVec19;
        let x_1622 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1620.xy, x_1620.z);
        u_xlat47.x = x_1622;
        let x_1625 : f32 = u_xlat20.z;
        let x_1627 : f32 = u_xlat47.x;
        let x_1629 : f32 = u_xlat68;
        u_xlat68 = ((x_1625 * x_1627) + x_1629);
        let x_1632 : vec4<f32> = u_xlat17;
        let x_1633 : vec2<f32> = vec2<f32>(x_1632.z, x_1632.w);
        let x_1635 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1633.x, x_1633.y, x_1635);
        let x_1642 : vec3<f32> = txVec20;
        let x_1644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1642.xy, x_1642.z);
        u_xlat47.x = x_1644;
        let x_1647 : f32 = u_xlat20.w;
        let x_1649 : f32 = u_xlat47.x;
        let x_1651 : f32 = u_xlat68;
        u_xlat68 = ((x_1647 * x_1649) + x_1651);
        let x_1654 : vec4<f32> = u_xlat18;
        let x_1655 : vec2<f32> = vec2<f32>(x_1654.x, x_1654.y);
        let x_1657 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1655.x, x_1655.y, x_1657);
        let x_1664 : vec3<f32> = txVec21;
        let x_1666 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1664.xy, x_1664.z);
        u_xlat47.x = x_1666;
        let x_1669 : f32 = u_xlat21.x;
        let x_1671 : f32 = u_xlat47.x;
        let x_1673 : f32 = u_xlat68;
        u_xlat68 = ((x_1669 * x_1671) + x_1673);
        let x_1676 : vec4<f32> = u_xlat18;
        let x_1677 : vec2<f32> = vec2<f32>(x_1676.z, x_1676.w);
        let x_1679 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1677.x, x_1677.y, x_1679);
        let x_1686 : vec3<f32> = txVec22;
        let x_1688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1686.xy, x_1686.z);
        u_xlat47.x = x_1688;
        let x_1691 : f32 = u_xlat21.y;
        let x_1693 : f32 = u_xlat47.x;
        let x_1695 : f32 = u_xlat68;
        u_xlat68 = ((x_1691 * x_1693) + x_1695);
        let x_1698 : vec2<f32> = u_xlat32;
        let x_1700 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1698.x, x_1698.y, x_1700);
        let x_1707 : vec3<f32> = txVec23;
        let x_1709 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1707.xy, x_1707.z);
        u_xlat47.x = x_1709;
        let x_1712 : f32 = u_xlat21.z;
        let x_1714 : f32 = u_xlat47.x;
        let x_1716 : f32 = u_xlat68;
        u_xlat68 = ((x_1712 * x_1714) + x_1716);
        let x_1719 : vec2<f32> = u_xlat60;
        let x_1721 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1719.x, x_1719.y, x_1721);
        let x_1728 : vec3<f32> = txVec24;
        let x_1730 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1728.xy, x_1728.z);
        u_xlat47.x = x_1730;
        let x_1733 : f32 = u_xlat21.w;
        let x_1735 : f32 = u_xlat47.x;
        let x_1737 : f32 = u_xlat68;
        u_xlat68 = ((x_1733 * x_1735) + x_1737);
        let x_1740 : vec4<f32> = u_xlat13;
        let x_1741 : vec2<f32> = vec2<f32>(x_1740.x, x_1740.y);
        let x_1743 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1741.x, x_1741.y, x_1743);
        let x_1750 : vec3<f32> = txVec25;
        let x_1752 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1750.xy, x_1750.z);
        u_xlat47.x = x_1752;
        let x_1755 : f32 = u_xlat9.x;
        let x_1757 : f32 = u_xlat47.x;
        let x_1759 : f32 = u_xlat68;
        u_xlat68 = ((x_1755 * x_1757) + x_1759);
        let x_1762 : vec4<f32> = u_xlat13;
        let x_1763 : vec2<f32> = vec2<f32>(x_1762.z, x_1762.w);
        let x_1765 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1763.x, x_1763.y, x_1765);
        let x_1772 : vec3<f32> = txVec26;
        let x_1774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1772.xy, x_1772.z);
        u_xlat47.x = x_1774;
        let x_1777 : f32 = u_xlat9.y;
        let x_1779 : f32 = u_xlat47.x;
        let x_1781 : f32 = u_xlat68;
        u_xlat68 = ((x_1777 * x_1779) + x_1781);
        let x_1784 : vec2<f32> = u_xlat55;
        let x_1786 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1784.x, x_1784.y, x_1786);
        let x_1793 : vec3<f32> = txVec27;
        let x_1795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1793.xy, x_1793.z);
        u_xlat47.x = x_1795;
        let x_1798 : f32 = u_xlat9.z;
        let x_1800 : f32 = u_xlat47.x;
        let x_1802 : f32 = u_xlat68;
        u_xlat68 = ((x_1798 * x_1800) + x_1802);
        let x_1805 : vec4<f32> = u_xlat3;
        let x_1806 : vec2<f32> = vec2<f32>(x_1805.x, x_1805.y);
        let x_1808 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1806.x, x_1806.y, x_1808);
        let x_1815 : vec3<f32> = txVec28;
        let x_1817 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1815.xy, x_1815.z);
        u_xlat3.x = x_1817;
        let x_1820 : f32 = u_xlat9.w;
        let x_1822 : f32 = u_xlat3.x;
        let x_1824 : f32 = u_xlat68;
        u_xlat67 = ((x_1820 * x_1822) + x_1824);
      }
    }
  } else {
    let x_1828 : vec4<f32> = u_xlat2;
    let x_1829 : vec2<f32> = vec2<f32>(x_1828.x, x_1828.y);
    let x_1831 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1829.x, x_1829.y, x_1831);
    let x_1838 : vec3<f32> = txVec29;
    let x_1840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1838.xy, x_1838.z);
    u_xlat67 = x_1840;
  }
  let x_1842 : f32 = x_401.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1842) + 1.0f);
  let x_1845 : f32 = u_xlat67;
  let x_1847 : f32 = x_401.x_MainLightShadowParams.x;
  let x_1849 : f32 = u_xlat68;
  u_xlat67 = ((x_1845 * x_1847) + x_1849);
  let x_1853 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1853);
  let x_1857 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1857 >= 1.0f);
  let x_1859 : bool = u_xlatb25;
  let x_1860 : bool = u_xlatb3;
  u_xlatb3 = (x_1859 | x_1860);
  let x_1862 : bool = u_xlatb3;
  let x_1863 : f32 = u_xlat67;
  u_xlat67 = select(x_1863, 1.0f, x_1862);
  let x_1865 : vec3<f32> = u_xlat1;
  let x_1867 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1865, -(vec3<f32>(x_1867.x, x_1867.y, x_1867.z)));
  let x_1873 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1873, 0.0f, 1.0f);
  let x_1877 : f32 = u_xlat67;
  let x_1880 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1877, x_1877, x_1877) * vec3<f32>(x_1880.x, x_1880.y, x_1880.z));
  let x_1883 : vec3<f32> = u_xlat23;
  let x_1884 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1883 * vec3<f32>(x_1884.x, x_1884.x, x_1884.x));
  let x_1887 : vec3<f32> = u_xlat1;
  let x_1888 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1887 * vec3<f32>(x_1888.x, x_1888.y, x_1888.z));
  let x_1892 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1892 < 0.0f);
  let x_1895 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1895 + 1.0f);
  let x_1897 : bool = u_xlatb67;
  if (x_1897) {
    let x_1901 : f32 = u_xlat25;
    x_1898 = x_1901;
  } else {
    let x_1904 : f32 = x_95.unity_LODFade.x;
    x_1898 = x_1904;
  }
  let x_1905 : f32 = x_1898;
  u_xlat67 = x_1905;
  let x_1906 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1906);
  let x_1908 : vec4<f32> = u_xlat4;
  let x_1912 : vec4<f32> = x_160.x_ScreenParams;
  let x_1914 : vec3<f32> = (abs(vec3<f32>(x_1908.x, x_1908.y, x_1908.z)) * vec3<f32>(x_1912.x, x_1912.y, x_1912.x));
  let x_1915 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1914.x, x_1914.y, x_1914.z, x_1915.w);
  let x_1920 : vec4<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(vec3<f32>(x_1920.x, x_1920.y, x_1920.z));
  let x_1925 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1925 * 1025u);
  let x_1929 : u32 = u_xlatu47;
  u_xlatu69 = (x_1929 >> 6u);
  let x_1933 : u32 = u_xlatu69;
  let x_1934 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1933 ^ x_1934));
  let x_1937 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1937) * 9u);
  let x_1941 : u32 = u_xlatu47;
  u_xlatu69 = (x_1941 >> 11u);
  let x_1944 : u32 = u_xlatu69;
  let x_1945 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1944 ^ x_1945));
  let x_1948 : i32 = u_xlati47;
  u_xlati47 = (x_1948 * 32769i);
  let x_1951 : i32 = u_xlati47;
  let x_1954 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1951) ^ x_1954));
  let x_1957 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1957) * 1025u);
  let x_1960 : u32 = u_xlatu47;
  u_xlatu69 = (x_1960 >> 6u);
  let x_1962 : u32 = u_xlatu69;
  let x_1963 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1962 ^ x_1963));
  let x_1966 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1966) * 9u);
  let x_1969 : u32 = u_xlatu47;
  u_xlatu69 = (x_1969 >> 11u);
  let x_1971 : u32 = u_xlatu69;
  let x_1972 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1971 ^ x_1972));
  let x_1975 : i32 = u_xlati47;
  u_xlati47 = (x_1975 * 32769i);
  let x_1977 : i32 = u_xlati47;
  let x_1980 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1977) ^ x_1980));
  let x_1983 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1983) * 1025u);
  let x_1986 : u32 = u_xlatu47;
  u_xlatu69 = (x_1986 >> 6u);
  let x_1988 : u32 = u_xlatu69;
  let x_1989 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1988 ^ x_1989));
  let x_1992 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1992) * 9u);
  let x_1995 : u32 = u_xlatu47;
  u_xlatu69 = (x_1995 >> 11u);
  let x_1997 : u32 = u_xlatu69;
  let x_1998 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1997 ^ x_1998));
  let x_2001 : i32 = u_xlati47;
  u_xlati47 = (x_2001 * 32769i);
  param = 1065353216i;
  let x_2007 : i32 = u_xlati47;
  param_1 = x_2007;
  param_2 = 0i;
  param_3 = 23i;
  let x_2010 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_2010);
  let x_2014 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2014 + -1.0f);
  let x_2019 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_2019) + 1.0f);
  let x_2022 : bool = u_xlatb25;
  if (x_2022) {
    let x_2027 : f32 = u_xlat47.x;
    x_2023 = x_2027;
  } else {
    let x_2029 : f32 = u_xlat69;
    x_2023 = x_2029;
  }
  let x_2030 : f32 = x_2023;
  u_xlat25 = x_2030;
  let x_2031 : f32 = u_xlat67;
  let x_2033 : f32 = u_xlat25;
  u_xlat67 = ((x_2031 * 2.0f) + -(x_2033));
  let x_2036 : f32 = u_xlat67;
  let x_2038 : f32 = u_xlat6.w;
  u_xlat25 = (x_2036 * x_2038);
  let x_2041 : f32 = u_xlat25;
  u_xlatb47 = (x_2041 >= 0.400000006f);
  let x_2044 : bool = u_xlatb47;
  let x_2045 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2045, x_2044);
  let x_2049 : f32 = u_xlat6.w;
  let x_2050 : f32 = u_xlat67;
  u_xlat67 = ((x_2049 * x_2050) + -0.400000006f);
  let x_2054 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2054);
  let x_2056 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2056);
  let x_2058 : f32 = u_xlat25;
  let x_2060 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2058) + abs(x_2060));
  let x_2063 : f32 = u_xlat25;
  u_xlat25 = max(x_2063, 0.0001f);
  let x_2066 : f32 = u_xlat67;
  let x_2067 : f32 = u_xlat25;
  u_xlat67 = (x_2066 / x_2067);
  let x_2069 : f32 = u_xlat67;
  u_xlat67 = (x_2069 + 0.5f);
  let x_2071 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2071, 0.0f, 1.0f);
  let x_2074 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2074 == 0.0f));
  let x_2076 : bool = u_xlatb25;
  if (x_2076) {
    let x_2080 : f32 = u_xlat67;
    x_2077 = x_2080;
  } else {
    let x_2083 : f32 = u_xlat47.x;
    x_2077 = x_2083;
  }
  let x_2084 : f32 = x_2077;
  u_xlat67 = x_2084;
  let x_2085 : f32 = u_xlat67;
  u_xlat47.x = (x_2085 + -0.0001f);
  let x_2090 : f32 = u_xlat47.x;
  u_xlatb47 = (x_2090 < 0.0f);
  let x_2092 : bool = u_xlatb47;
  if (((select(0i, 1i, x_2092) * -1i) != 0i)) {
    discard;
  }
  let x_2100 : vec3<f32> = u_xlat22;
  let x_2101 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2100 * vec3<f32>(x_2101.y, x_2101.y, x_2101.y));
  let x_2104 : vec3<f32> = u_xlat30;
  let x_2106 : vec4<f32> = vs_INTERP2;
  let x_2109 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2104.x, x_2104.x, x_2104.x) * vec3<f32>(x_2106.x, x_2106.y, x_2106.z)) + x_2109);
  let x_2111 : vec3<f32> = u_xlat30;
  let x_2113 : vec3<f32> = vs_INTERP1;
  let x_2115 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2111.z, x_2111.z, x_2111.z) * x_2113) + x_2115);
  let x_2117 : vec3<f32> = u_xlat22;
  let x_2118 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2117, x_2118);
  let x_2122 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2122);
  let x_2125 : vec3<f32> = u_xlat22;
  let x_2126 : vec2<f32> = u_xlat47;
  u_xlat22 = (x_2125 * vec3<f32>(x_2126.x, x_2126.x, x_2126.x));
  let x_2136 : vec2<f32> = vs_INTERP5;
  let x_2138 : f32 = x_160.x_GlobalMipBias.x;
  let x_2139 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2136, x_2138);
  u_xlat4 = x_2139;
  let x_2144 : vec2<f32> = vs_INTERP5;
  let x_2146 : f32 = x_160.x_GlobalMipBias.x;
  let x_2147 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2144, x_2146);
  let x_2148 : vec3<f32> = vec3<f32>(x_2147.x, x_2147.y, x_2147.z);
  let x_2149 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2148.x, x_2148.y, x_2148.z, x_2149.w);
  let x_2151 : vec4<f32> = u_xlat4;
  let x_2154 : vec3<f32> = (vec3<f32>(x_2151.x, x_2151.y, x_2151.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2155 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2154.x, x_2154.y, x_2154.z, x_2155.w);
  let x_2157 : vec3<f32> = u_xlat22;
  let x_2158 : vec4<f32> = u_xlat4;
  u_xlat47.x = dot(x_2157, vec3<f32>(x_2158.x, x_2158.y, x_2158.z));
  let x_2163 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2163 + 0.5f);
  let x_2166 : vec2<f32> = u_xlat47;
  let x_2168 : vec4<f32> = u_xlat6;
  let x_2170 : vec3<f32> = (vec3<f32>(x_2166.x, x_2166.x, x_2166.x) * vec3<f32>(x_2168.x, x_2168.y, x_2168.z));
  let x_2171 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2170.x, x_2170.y, x_2170.z, x_2171.w);
  let x_2174 : f32 = u_xlat4.w;
  u_xlat47.x = max(x_2174, 0.0001f);
  let x_2177 : vec4<f32> = u_xlat4;
  let x_2179 : vec2<f32> = u_xlat47;
  let x_2181 : vec3<f32> = (vec3<f32>(x_2177.x, x_2177.y, x_2177.z) / vec3<f32>(x_2179.x, x_2179.x, x_2179.x));
  let x_2182 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2181.x, x_2181.y, x_2181.z, x_2182.w);
  let x_2185 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2186 : vec2<f32> = vec2<f32>(x_2185.x, x_2185.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2186.x, x_2186.y));
  let x_2191 : vec2<f32> = u_xlat47;
  let x_2192 : vec4<f32> = hlslcc_FragCoord;
  let x_2194 : vec2<f32> = (x_2191 * vec2<f32>(x_2192.x, x_2192.y));
  let x_2195 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2194.x, x_2194.y, x_2195.z, x_2195.w);
  let x_2198 : f32 = u_xlat6.y;
  let x_2201 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2204 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2198 * x_2201) + x_2204);
  let x_2208 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2208) + 1.0f);
  let x_2213 : f32 = u_xlat8.x;
  u_xlat8.x = x_2213;
  let x_2216 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2216, 0.0f, 1.0f);
  let x_2219 : f32 = u_xlat67;
  u_xlat67 = x_2219;
  let x_2220 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2220, 0.0f, 1.0f);
  let x_2222 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2222 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2227 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2227) + 1.0f);
  let x_2232 : f32 = u_xlat47.x;
  let x_2234 : f32 = u_xlat47.x;
  u_xlat69 = (x_2232 * x_2234);
  let x_2236 : f32 = u_xlat69;
  u_xlat69 = max(x_2236, 0.0078125f);
  let x_2239 : f32 = u_xlat69;
  let x_2240 : f32 = u_xlat69;
  u_xlat70 = (x_2239 * x_2240);
  let x_2244 : f32 = u_xlat8.x;
  u_xlat71 = (x_2244 + 0.040000021f);
  let x_2247 : f32 = u_xlat71;
  u_xlat71 = min(x_2247, 1.0f);
  let x_2250 : f32 = u_xlat69;
  u_xlat28 = ((x_2250 * 4.0f) + 2.0f);
  let x_2258 : vec4<f32> = u_xlat6;
  let x_2261 : f32 = x_160.x_GlobalMipBias.x;
  let x_2262 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2258.x, x_2258.z), x_2261);
  u_xlat6.x = x_2262.x;
  let x_2267 : f32 = u_xlat6.x;
  u_xlat50 = (x_2267 + -1.0f);
  let x_2270 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2271 : f32 = u_xlat50;
  u_xlat50 = ((x_2270 * x_2271) + 1.0f);
  let x_2275 : f32 = u_xlat6.x;
  let x_2277 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2275, x_2277);
  let x_2280 : bool = u_xlatb0;
  if (x_2280) {
    let x_2284 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2284 == 1.0f);
    let x_2286 : bool = u_xlatb0;
    if (x_2286) {
      let x_2289 : vec4<f32> = u_xlat2;
      let x_2292 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2289.x, x_2289.y, x_2289.x, x_2289.y) + x_2292);
      let x_2295 : vec4<f32> = u_xlat8;
      let x_2296 : vec2<f32> = vec2<f32>(x_2295.x, x_2295.y);
      let x_2298 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2296.x, x_2296.y, x_2298);
      let x_2305 : vec3<f32> = txVec30;
      let x_2307 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2305.xy, x_2305.z);
      u_xlat9.x = x_2307;
      let x_2310 : vec4<f32> = u_xlat8;
      let x_2311 : vec2<f32> = vec2<f32>(x_2310.z, x_2310.w);
      let x_2313 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2311.x, x_2311.y, x_2313);
      let x_2320 : vec3<f32> = txVec31;
      let x_2322 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2320.xy, x_2320.z);
      u_xlat9.y = x_2322;
      let x_2324 : vec4<f32> = u_xlat2;
      let x_2327 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2324.x, x_2324.y, x_2324.x, x_2324.y) + x_2327);
      let x_2330 : vec4<f32> = u_xlat8;
      let x_2331 : vec2<f32> = vec2<f32>(x_2330.x, x_2330.y);
      let x_2333 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2331.x, x_2331.y, x_2333);
      let x_2340 : vec3<f32> = txVec32;
      let x_2342 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2340.xy, x_2340.z);
      u_xlat9.z = x_2342;
      let x_2345 : vec4<f32> = u_xlat8;
      let x_2346 : vec2<f32> = vec2<f32>(x_2345.z, x_2345.w);
      let x_2348 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2346.x, x_2346.y, x_2348);
      let x_2355 : vec3<f32> = txVec33;
      let x_2357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2355.xy, x_2355.z);
      u_xlat9.w = x_2357;
      let x_2359 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2359, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2365 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2365 == 2.0f);
      let x_2367 : bool = u_xlatb72;
      if (x_2367) {
        let x_2370 : vec4<f32> = u_xlat2;
        let x_2373 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2376 : vec2<f32> = ((vec2<f32>(x_2370.x, x_2370.y) * vec2<f32>(x_2373.z, x_2373.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2376.x, x_2376.y, x_2377.z, x_2377.w);
        let x_2379 : vec4<f32> = u_xlat8;
        let x_2381 : vec2<f32> = floor(vec2<f32>(x_2379.x, x_2379.y));
        let x_2382 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2381.x, x_2381.y, x_2382.z, x_2382.w);
        let x_2385 : vec4<f32> = u_xlat2;
        let x_2388 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2391 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2385.x, x_2385.y) * vec2<f32>(x_2388.z, x_2388.w)) + -(vec2<f32>(x_2391.x, x_2391.y)));
        let x_2395 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2395.x, x_2395.x, x_2395.y, x_2395.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2398 : vec4<f32> = u_xlat9;
        let x_2400 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2398.x, x_2398.x, x_2398.z, x_2398.z) * vec4<f32>(x_2400.x, x_2400.x, x_2400.z, x_2400.z));
        let x_2403 : vec4<f32> = u_xlat10;
        let x_2405 : vec2<f32> = (vec2<f32>(x_2403.y, x_2403.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2406 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2405.x, x_2406.y, x_2405.y, x_2406.w);
        let x_2408 : vec4<f32> = u_xlat10;
        let x_2411 : vec2<f32> = u_xlat52;
        let x_2413 : vec2<f32> = ((vec2<f32>(x_2408.x, x_2408.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2411));
        let x_2414 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2413.x, x_2413.y, x_2414.z, x_2414.w);
        let x_2416 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2416) + vec2<f32>(1.0f, 1.0f));
        let x_2419 : vec2<f32> = u_xlat52;
        let x_2420 : vec2<f32> = min(x_2419, vec2<f32>(0.0f, 0.0f));
        let x_2421 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2420.x, x_2420.y, x_2421.z, x_2421.w);
        let x_2423 : vec4<f32> = u_xlat11;
        let x_2426 : vec4<f32> = u_xlat11;
        let x_2429 : vec2<f32> = u_xlat54;
        let x_2430 : vec2<f32> = ((-(vec2<f32>(x_2423.x, x_2423.y)) * vec2<f32>(x_2426.x, x_2426.y)) + x_2429);
        let x_2431 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2430.x, x_2430.y, x_2431.z, x_2431.w);
        let x_2433 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2433, vec2<f32>(0.0f, 0.0f));
        let x_2435 : vec2<f32> = u_xlat52;
        let x_2437 : vec2<f32> = u_xlat52;
        let x_2439 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2435) * x_2437) + vec2<f32>(x_2439.y, x_2439.w));
        let x_2442 : vec4<f32> = u_xlat11;
        let x_2444 : vec2<f32> = (vec2<f32>(x_2442.x, x_2442.y) + vec2<f32>(1.0f, 1.0f));
        let x_2445 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2444.x, x_2444.y, x_2445.z, x_2445.w);
        let x_2447 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2447 + vec2<f32>(1.0f, 1.0f));
        let x_2449 : vec4<f32> = u_xlat10;
        let x_2451 : vec2<f32> = (vec2<f32>(x_2449.x, x_2449.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2452 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2451.x, x_2451.y, x_2452.z, x_2452.w);
        let x_2454 : vec2<f32> = u_xlat54;
        let x_2455 : vec2<f32> = (x_2454 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2456 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2455.x, x_2455.y, x_2456.z, x_2456.w);
        let x_2458 : vec4<f32> = u_xlat11;
        let x_2460 : vec2<f32> = (vec2<f32>(x_2458.x, x_2458.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2461 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2460.x, x_2460.y, x_2461.z, x_2461.w);
        let x_2463 : vec2<f32> = u_xlat52;
        let x_2464 : vec2<f32> = (x_2463 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2465 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2464.x, x_2464.y, x_2465.z, x_2465.w);
        let x_2467 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2467.y, x_2467.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2471 : f32 = u_xlat11.x;
        u_xlat12.z = x_2471;
        let x_2474 : f32 = u_xlat52.x;
        u_xlat12.w = x_2474;
        let x_2477 : f32 = u_xlat13.x;
        u_xlat10.z = x_2477;
        let x_2480 : f32 = u_xlat9.x;
        u_xlat10.w = x_2480;
        let x_2482 : vec4<f32> = u_xlat10;
        let x_2484 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2482.z, x_2482.w, x_2482.x, x_2482.z) + vec4<f32>(x_2484.z, x_2484.w, x_2484.x, x_2484.z));
        let x_2488 : f32 = u_xlat12.y;
        u_xlat11.z = x_2488;
        let x_2491 : f32 = u_xlat52.y;
        u_xlat11.w = x_2491;
        let x_2494 : f32 = u_xlat10.y;
        u_xlat13.z = x_2494;
        let x_2497 : f32 = u_xlat9.z;
        u_xlat13.w = x_2497;
        let x_2499 : vec4<f32> = u_xlat11;
        let x_2501 : vec4<f32> = u_xlat13;
        let x_2503 : vec3<f32> = (vec3<f32>(x_2499.z, x_2499.y, x_2499.w) + vec3<f32>(x_2501.z, x_2501.y, x_2501.w));
        let x_2504 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2503.x, x_2503.y, x_2503.z, x_2504.w);
        let x_2506 : vec4<f32> = u_xlat10;
        let x_2508 : vec4<f32> = u_xlat14;
        let x_2510 : vec3<f32> = (vec3<f32>(x_2506.x, x_2506.z, x_2506.w) / vec3<f32>(x_2508.z, x_2508.w, x_2508.y));
        let x_2511 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2510.x, x_2510.y, x_2510.z, x_2511.w);
        let x_2513 : vec4<f32> = u_xlat10;
        let x_2515 : vec3<f32> = (vec3<f32>(x_2513.x, x_2513.y, x_2513.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2516 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2515.x, x_2515.y, x_2515.z, x_2516.w);
        let x_2518 : vec4<f32> = u_xlat13;
        let x_2520 : vec4<f32> = u_xlat9;
        let x_2522 : vec3<f32> = (vec3<f32>(x_2518.z, x_2518.y, x_2518.w) / vec3<f32>(x_2520.x, x_2520.y, x_2520.z));
        let x_2523 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2522.x, x_2522.y, x_2522.z, x_2523.w);
        let x_2525 : vec4<f32> = u_xlat11;
        let x_2527 : vec3<f32> = (vec3<f32>(x_2525.x, x_2525.y, x_2525.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2528 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2527.x, x_2527.y, x_2527.z, x_2528.w);
        let x_2530 : vec4<f32> = u_xlat10;
        let x_2533 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2535 : vec3<f32> = (vec3<f32>(x_2530.y, x_2530.x, x_2530.z) * vec3<f32>(x_2533.x, x_2533.x, x_2533.x));
        let x_2536 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2535.x, x_2535.y, x_2535.z, x_2536.w);
        let x_2538 : vec4<f32> = u_xlat11;
        let x_2541 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2543 : vec3<f32> = (vec3<f32>(x_2538.x, x_2538.y, x_2538.z) * vec3<f32>(x_2541.y, x_2541.y, x_2541.y));
        let x_2544 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2543.x, x_2543.y, x_2543.z, x_2544.w);
        let x_2547 : f32 = u_xlat11.x;
        u_xlat10.w = x_2547;
        let x_2549 : vec4<f32> = u_xlat8;
        let x_2552 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2555 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2549.x, x_2549.y, x_2549.x, x_2549.y) * vec4<f32>(x_2552.x, x_2552.y, x_2552.x, x_2552.y)) + vec4<f32>(x_2555.y, x_2555.w, x_2555.x, x_2555.w));
        let x_2558 : vec4<f32> = u_xlat8;
        let x_2561 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2564 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2558.x, x_2558.y) * vec2<f32>(x_2561.x, x_2561.y)) + vec2<f32>(x_2564.z, x_2564.w));
        let x_2568 : f32 = u_xlat10.y;
        u_xlat11.w = x_2568;
        let x_2570 : vec4<f32> = u_xlat11;
        let x_2571 : vec2<f32> = vec2<f32>(x_2570.y, x_2570.z);
        let x_2572 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2572.x, x_2571.x, x_2572.z, x_2571.y);
        let x_2574 : vec4<f32> = u_xlat8;
        let x_2577 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2580 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2574.x, x_2574.y, x_2574.x, x_2574.y) * vec4<f32>(x_2577.x, x_2577.y, x_2577.x, x_2577.y)) + vec4<f32>(x_2580.x, x_2580.y, x_2580.z, x_2580.y));
        let x_2583 : vec4<f32> = u_xlat8;
        let x_2586 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2589 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2583.x, x_2583.y, x_2583.x, x_2583.y) * vec4<f32>(x_2586.x, x_2586.y, x_2586.x, x_2586.y)) + vec4<f32>(x_2589.w, x_2589.y, x_2589.w, x_2589.z));
        let x_2592 : vec4<f32> = u_xlat8;
        let x_2595 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2598 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2592.x, x_2592.y, x_2592.x, x_2592.y) * vec4<f32>(x_2595.x, x_2595.y, x_2595.x, x_2595.y)) + vec4<f32>(x_2598.x, x_2598.w, x_2598.z, x_2598.w));
        let x_2601 : vec4<f32> = u_xlat9;
        let x_2603 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2601.x, x_2601.x, x_2601.x, x_2601.y) * vec4<f32>(x_2603.z, x_2603.w, x_2603.y, x_2603.z));
        let x_2606 : vec4<f32> = u_xlat9;
        let x_2608 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2606.y, x_2606.y, x_2606.z, x_2606.z) * x_2608);
        let x_2612 : f32 = u_xlat9.z;
        let x_2614 : f32 = u_xlat14.y;
        u_xlat72 = (x_2612 * x_2614);
        let x_2617 : vec4<f32> = u_xlat12;
        let x_2618 : vec2<f32> = vec2<f32>(x_2617.x, x_2617.y);
        let x_2620 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2618.x, x_2618.y, x_2620);
        let x_2628 : vec3<f32> = txVec34;
        let x_2630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2628.xy, x_2628.z);
        u_xlat73 = x_2630;
        let x_2632 : vec4<f32> = u_xlat12;
        let x_2633 : vec2<f32> = vec2<f32>(x_2632.z, x_2632.w);
        let x_2635 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2633.x, x_2633.y, x_2635);
        let x_2642 : vec3<f32> = txVec35;
        let x_2644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2642.xy, x_2642.z);
        u_xlat8.x = x_2644;
        let x_2647 : f32 = u_xlat8.x;
        let x_2649 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2647 * x_2649);
        let x_2653 : f32 = u_xlat15.x;
        let x_2654 : f32 = u_xlat73;
        let x_2657 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2653 * x_2654) + x_2657);
        let x_2660 : vec2<f32> = u_xlat52;
        let x_2662 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2660.x, x_2660.y, x_2662);
        let x_2669 : vec3<f32> = txVec36;
        let x_2671 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2669.xy, x_2669.z);
        u_xlat8.x = x_2671;
        let x_2674 : f32 = u_xlat15.z;
        let x_2676 : f32 = u_xlat8.x;
        let x_2678 : f32 = u_xlat73;
        u_xlat73 = ((x_2674 * x_2676) + x_2678);
        let x_2681 : vec4<f32> = u_xlat11;
        let x_2682 : vec2<f32> = vec2<f32>(x_2681.x, x_2681.y);
        let x_2684 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2682.x, x_2682.y, x_2684);
        let x_2691 : vec3<f32> = txVec37;
        let x_2693 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2691.xy, x_2691.z);
        u_xlat8.x = x_2693;
        let x_2696 : f32 = u_xlat15.w;
        let x_2698 : f32 = u_xlat8.x;
        let x_2700 : f32 = u_xlat73;
        u_xlat73 = ((x_2696 * x_2698) + x_2700);
        let x_2703 : vec4<f32> = u_xlat13;
        let x_2704 : vec2<f32> = vec2<f32>(x_2703.x, x_2703.y);
        let x_2706 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2704.x, x_2704.y, x_2706);
        let x_2713 : vec3<f32> = txVec38;
        let x_2715 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2713.xy, x_2713.z);
        u_xlat8.x = x_2715;
        let x_2718 : f32 = u_xlat16.x;
        let x_2720 : f32 = u_xlat8.x;
        let x_2722 : f32 = u_xlat73;
        u_xlat73 = ((x_2718 * x_2720) + x_2722);
        let x_2725 : vec4<f32> = u_xlat13;
        let x_2726 : vec2<f32> = vec2<f32>(x_2725.z, x_2725.w);
        let x_2728 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2726.x, x_2726.y, x_2728);
        let x_2735 : vec3<f32> = txVec39;
        let x_2737 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2735.xy, x_2735.z);
        u_xlat8.x = x_2737;
        let x_2740 : f32 = u_xlat16.y;
        let x_2742 : f32 = u_xlat8.x;
        let x_2744 : f32 = u_xlat73;
        u_xlat73 = ((x_2740 * x_2742) + x_2744);
        let x_2747 : vec4<f32> = u_xlat11;
        let x_2748 : vec2<f32> = vec2<f32>(x_2747.z, x_2747.w);
        let x_2750 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2748.x, x_2748.y, x_2750);
        let x_2757 : vec3<f32> = txVec40;
        let x_2759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2757.xy, x_2757.z);
        u_xlat8.x = x_2759;
        let x_2762 : f32 = u_xlat16.z;
        let x_2764 : f32 = u_xlat8.x;
        let x_2766 : f32 = u_xlat73;
        u_xlat73 = ((x_2762 * x_2764) + x_2766);
        let x_2769 : vec4<f32> = u_xlat10;
        let x_2770 : vec2<f32> = vec2<f32>(x_2769.x, x_2769.y);
        let x_2772 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2770.x, x_2770.y, x_2772);
        let x_2779 : vec3<f32> = txVec41;
        let x_2781 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2779.xy, x_2779.z);
        u_xlat8.x = x_2781;
        let x_2784 : f32 = u_xlat16.w;
        let x_2786 : f32 = u_xlat8.x;
        let x_2788 : f32 = u_xlat73;
        u_xlat73 = ((x_2784 * x_2786) + x_2788);
        let x_2791 : vec4<f32> = u_xlat10;
        let x_2792 : vec2<f32> = vec2<f32>(x_2791.z, x_2791.w);
        let x_2794 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2792.x, x_2792.y, x_2794);
        let x_2801 : vec3<f32> = txVec42;
        let x_2803 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2801.xy, x_2801.z);
        u_xlat8.x = x_2803;
        let x_2805 : f32 = u_xlat72;
        let x_2807 : f32 = u_xlat8.x;
        let x_2809 : f32 = u_xlat73;
        u_xlat0.x = ((x_2805 * x_2807) + x_2809);
      } else {
        let x_2813 : vec4<f32> = u_xlat2;
        let x_2816 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2819 : vec2<f32> = ((vec2<f32>(x_2813.x, x_2813.y) * vec2<f32>(x_2816.z, x_2816.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2820 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2819.x, x_2819.y, x_2820.z, x_2820.w);
        let x_2822 : vec4<f32> = u_xlat8;
        let x_2824 : vec2<f32> = floor(vec2<f32>(x_2822.x, x_2822.y));
        let x_2825 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2824.x, x_2824.y, x_2825.z, x_2825.w);
        let x_2827 : vec4<f32> = u_xlat2;
        let x_2830 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2833 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2827.x, x_2827.y) * vec2<f32>(x_2830.z, x_2830.w)) + -(vec2<f32>(x_2833.x, x_2833.y)));
        let x_2837 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2837.x, x_2837.x, x_2837.y, x_2837.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2840 : vec4<f32> = u_xlat9;
        let x_2842 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2840.x, x_2840.x, x_2840.z, x_2840.z) * vec4<f32>(x_2842.x, x_2842.x, x_2842.z, x_2842.z));
        let x_2845 : vec4<f32> = u_xlat10;
        let x_2847 : vec2<f32> = (vec2<f32>(x_2845.y, x_2845.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2848 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2848.x, x_2847.x, x_2848.z, x_2847.y);
        let x_2850 : vec4<f32> = u_xlat10;
        let x_2853 : vec2<f32> = u_xlat52;
        let x_2855 : vec2<f32> = ((vec2<f32>(x_2850.x, x_2850.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2853));
        let x_2856 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2855.x, x_2856.y, x_2855.y, x_2856.w);
        let x_2858 : vec2<f32> = u_xlat52;
        let x_2860 : vec2<f32> = (-(x_2858) + vec2<f32>(1.0f, 1.0f));
        let x_2861 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2860.x, x_2860.y, x_2861.z, x_2861.w);
        let x_2863 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2863, vec2<f32>(0.0f, 0.0f));
        let x_2865 : vec2<f32> = u_xlat54;
        let x_2867 : vec2<f32> = u_xlat54;
        let x_2869 : vec4<f32> = u_xlat10;
        let x_2871 : vec2<f32> = ((-(x_2865) * x_2867) + vec2<f32>(x_2869.x, x_2869.y));
        let x_2872 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2871.x, x_2871.y, x_2872.z, x_2872.w);
        let x_2874 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2874, vec2<f32>(0.0f, 0.0f));
        let x_2876 : vec2<f32> = u_xlat54;
        let x_2878 : vec2<f32> = u_xlat54;
        let x_2880 : vec4<f32> = u_xlat9;
        let x_2882 : vec2<f32> = ((-(x_2876) * x_2878) + vec2<f32>(x_2880.y, x_2880.w));
        let x_2883 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2882.x, x_2883.y, x_2882.y);
        let x_2885 : vec4<f32> = u_xlat10;
        let x_2887 : vec2<f32> = (vec2<f32>(x_2885.x, x_2885.y) + vec2<f32>(2.0f, 2.0f));
        let x_2888 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2887.x, x_2887.y, x_2888.z, x_2888.w);
        let x_2890 : vec3<f32> = u_xlat31;
        let x_2892 : vec2<f32> = (vec2<f32>(x_2890.x, x_2890.z) + vec2<f32>(2.0f, 2.0f));
        let x_2893 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2893.x, x_2892.x, x_2893.z, x_2892.y);
        let x_2896 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2896 * 0.081632003f);
        let x_2899 : vec4<f32> = u_xlat9;
        let x_2901 : vec3<f32> = (vec3<f32>(x_2899.z, x_2899.x, x_2899.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2902 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2901.x, x_2901.y, x_2901.z, x_2902.w);
        let x_2904 : vec4<f32> = u_xlat10;
        let x_2906 : vec2<f32> = (vec2<f32>(x_2904.x, x_2904.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2907 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2906.x, x_2906.y, x_2907.z, x_2907.w);
        let x_2910 : f32 = u_xlat13.y;
        u_xlat12.x = x_2910;
        let x_2912 : vec2<f32> = u_xlat52;
        let x_2915 : vec2<f32> = ((vec2<f32>(x_2912.x, x_2912.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2916 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2916.x, x_2915.x, x_2916.z, x_2915.y);
        let x_2918 : vec2<f32> = u_xlat52;
        let x_2921 : vec2<f32> = ((vec2<f32>(x_2918.x, x_2918.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2922 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2921.x, x_2922.y, x_2921.y, x_2922.w);
        let x_2925 : f32 = u_xlat9.x;
        u_xlat10.y = x_2925;
        let x_2928 : f32 = u_xlat11.y;
        u_xlat10.w = x_2928;
        let x_2930 : vec4<f32> = u_xlat10;
        let x_2931 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2930 + x_2931);
        let x_2933 : vec2<f32> = u_xlat52;
        let x_2936 : vec2<f32> = ((vec2<f32>(x_2933.y, x_2933.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2937 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2937.x, x_2936.x, x_2937.z, x_2936.y);
        let x_2939 : vec2<f32> = u_xlat52;
        let x_2942 : vec2<f32> = ((vec2<f32>(x_2939.y, x_2939.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2943 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2942.x, x_2943.y, x_2942.y, x_2943.w);
        let x_2946 : f32 = u_xlat9.y;
        u_xlat11.y = x_2946;
        let x_2948 : vec4<f32> = u_xlat11;
        let x_2949 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2948 + x_2949);
        let x_2951 : vec4<f32> = u_xlat10;
        let x_2952 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2951 / x_2952);
        let x_2954 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2954 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2956 : vec4<f32> = u_xlat11;
        let x_2957 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2956 / x_2957);
        let x_2959 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2959 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2961 : vec4<f32> = u_xlat10;
        let x_2964 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2961.w, x_2961.x, x_2961.y, x_2961.z) * vec4<f32>(x_2964.x, x_2964.x, x_2964.x, x_2964.x));
        let x_2967 : vec4<f32> = u_xlat11;
        let x_2970 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2967.x, x_2967.w, x_2967.y, x_2967.z) * vec4<f32>(x_2970.y, x_2970.y, x_2970.y, x_2970.y));
        let x_2973 : vec4<f32> = u_xlat10;
        let x_2974 : vec3<f32> = vec3<f32>(x_2973.y, x_2973.z, x_2973.w);
        let x_2975 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2974.x, x_2975.y, x_2974.y, x_2974.z);
        let x_2978 : f32 = u_xlat11.x;
        u_xlat13.y = x_2978;
        let x_2980 : vec4<f32> = u_xlat8;
        let x_2983 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2986 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2980.x, x_2980.y, x_2980.x, x_2980.y) * vec4<f32>(x_2983.x, x_2983.y, x_2983.x, x_2983.y)) + vec4<f32>(x_2986.x, x_2986.y, x_2986.z, x_2986.y));
        let x_2989 : vec4<f32> = u_xlat8;
        let x_2992 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2995 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2989.x, x_2989.y) * vec2<f32>(x_2992.x, x_2992.y)) + vec2<f32>(x_2995.w, x_2995.y));
        let x_2999 : f32 = u_xlat13.y;
        u_xlat10.y = x_2999;
        let x_3002 : f32 = u_xlat11.z;
        u_xlat13.y = x_3002;
        let x_3004 : vec4<f32> = u_xlat8;
        let x_3007 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3010 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3004.x, x_3004.y, x_3004.x, x_3004.y) * vec4<f32>(x_3007.x, x_3007.y, x_3007.x, x_3007.y)) + vec4<f32>(x_3010.x, x_3010.y, x_3010.z, x_3010.y));
        let x_3013 : vec4<f32> = u_xlat8;
        let x_3016 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3019 : vec4<f32> = u_xlat13;
        let x_3021 : vec2<f32> = ((vec2<f32>(x_3013.x, x_3013.y) * vec2<f32>(x_3016.x, x_3016.y)) + vec2<f32>(x_3019.w, x_3019.y));
        let x_3022 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3021.x, x_3021.y, x_3022.z, x_3022.w);
        let x_3025 : f32 = u_xlat13.y;
        u_xlat10.z = x_3025;
        let x_3027 : vec4<f32> = u_xlat8;
        let x_3030 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3033 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3027.x, x_3027.y, x_3027.x, x_3027.y) * vec4<f32>(x_3030.x, x_3030.y, x_3030.x, x_3030.y)) + vec4<f32>(x_3033.x, x_3033.y, x_3033.x, x_3033.z));
        let x_3037 : f32 = u_xlat11.w;
        u_xlat13.y = x_3037;
        let x_3039 : vec4<f32> = u_xlat8;
        let x_3042 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3045 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3039.x, x_3039.y, x_3039.x, x_3039.y) * vec4<f32>(x_3042.x, x_3042.y, x_3042.x, x_3042.y)) + vec4<f32>(x_3045.x, x_3045.y, x_3045.z, x_3045.y));
        let x_3048 : vec4<f32> = u_xlat8;
        let x_3051 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3054 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3048.x, x_3048.y) * vec2<f32>(x_3051.x, x_3051.y)) + vec2<f32>(x_3054.w, x_3054.y));
        let x_3058 : f32 = u_xlat13.y;
        u_xlat10.w = x_3058;
        let x_3060 : vec4<f32> = u_xlat8;
        let x_3063 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3066 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3060.x, x_3060.y) * vec2<f32>(x_3063.x, x_3063.y)) + vec2<f32>(x_3066.x, x_3066.w));
        let x_3069 : vec4<f32> = u_xlat13;
        let x_3070 : vec3<f32> = vec3<f32>(x_3069.x, x_3069.z, x_3069.w);
        let x_3071 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3070.x, x_3071.y, x_3070.y, x_3070.z);
        let x_3073 : vec4<f32> = u_xlat8;
        let x_3076 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3079 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3073.x, x_3073.y, x_3073.x, x_3073.y) * vec4<f32>(x_3076.x, x_3076.y, x_3076.x, x_3076.y)) + vec4<f32>(x_3079.x, x_3079.y, x_3079.z, x_3079.y));
        let x_3082 : vec4<f32> = u_xlat8;
        let x_3085 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3088 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3082.x, x_3082.y) * vec2<f32>(x_3085.x, x_3085.y)) + vec2<f32>(x_3088.w, x_3088.y));
        let x_3092 : f32 = u_xlat10.x;
        u_xlat11.x = x_3092;
        let x_3094 : vec4<f32> = u_xlat8;
        let x_3097 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3100 : vec4<f32> = u_xlat11;
        let x_3102 : vec2<f32> = ((vec2<f32>(x_3094.x, x_3094.y) * vec2<f32>(x_3097.x, x_3097.y)) + vec2<f32>(x_3100.x, x_3100.y));
        let x_3103 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3102.x, x_3102.y, x_3103.z, x_3103.w);
        let x_3105 : vec4<f32> = u_xlat9;
        let x_3107 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3105.x, x_3105.x, x_3105.x, x_3105.x) * x_3107);
        let x_3109 : vec4<f32> = u_xlat9;
        let x_3111 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3109.y, x_3109.y, x_3109.y, x_3109.y) * x_3111);
        let x_3113 : vec4<f32> = u_xlat9;
        let x_3115 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3113.z, x_3113.z, x_3113.z, x_3113.z) * x_3115);
        let x_3117 : vec4<f32> = u_xlat9;
        let x_3119 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3117.w, x_3117.w, x_3117.w, x_3117.w) * x_3119);
        let x_3122 : vec4<f32> = u_xlat14;
        let x_3123 : vec2<f32> = vec2<f32>(x_3122.x, x_3122.y);
        let x_3125 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3123.x, x_3123.y, x_3125);
        let x_3132 : vec3<f32> = txVec43;
        let x_3134 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3132.xy, x_3132.z);
        u_xlat72 = x_3134;
        let x_3136 : vec4<f32> = u_xlat14;
        let x_3137 : vec2<f32> = vec2<f32>(x_3136.z, x_3136.w);
        let x_3139 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3137.x, x_3137.y, x_3139);
        let x_3146 : vec3<f32> = txVec44;
        let x_3148 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3146.xy, x_3146.z);
        u_xlat73 = x_3148;
        let x_3149 : f32 = u_xlat73;
        let x_3151 : f32 = u_xlat19.y;
        u_xlat73 = (x_3149 * x_3151);
        let x_3154 : f32 = u_xlat19.x;
        let x_3155 : f32 = u_xlat72;
        let x_3157 : f32 = u_xlat73;
        u_xlat72 = ((x_3154 * x_3155) + x_3157);
        let x_3160 : vec2<f32> = u_xlat52;
        let x_3162 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3160.x, x_3160.y, x_3162);
        let x_3169 : vec3<f32> = txVec45;
        let x_3171 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3169.xy, x_3169.z);
        u_xlat73 = x_3171;
        let x_3173 : f32 = u_xlat19.z;
        let x_3174 : f32 = u_xlat73;
        let x_3176 : f32 = u_xlat72;
        u_xlat72 = ((x_3173 * x_3174) + x_3176);
        let x_3179 : vec4<f32> = u_xlat17;
        let x_3180 : vec2<f32> = vec2<f32>(x_3179.x, x_3179.y);
        let x_3182 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3180.x, x_3180.y, x_3182);
        let x_3189 : vec3<f32> = txVec46;
        let x_3191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3189.xy, x_3189.z);
        u_xlat73 = x_3191;
        let x_3193 : f32 = u_xlat19.w;
        let x_3194 : f32 = u_xlat73;
        let x_3196 : f32 = u_xlat72;
        u_xlat72 = ((x_3193 * x_3194) + x_3196);
        let x_3199 : vec4<f32> = u_xlat15;
        let x_3200 : vec2<f32> = vec2<f32>(x_3199.x, x_3199.y);
        let x_3202 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3200.x, x_3200.y, x_3202);
        let x_3209 : vec3<f32> = txVec47;
        let x_3211 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3209.xy, x_3209.z);
        u_xlat73 = x_3211;
        let x_3213 : f32 = u_xlat20.x;
        let x_3214 : f32 = u_xlat73;
        let x_3216 : f32 = u_xlat72;
        u_xlat72 = ((x_3213 * x_3214) + x_3216);
        let x_3219 : vec4<f32> = u_xlat15;
        let x_3220 : vec2<f32> = vec2<f32>(x_3219.z, x_3219.w);
        let x_3222 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3220.x, x_3220.y, x_3222);
        let x_3229 : vec3<f32> = txVec48;
        let x_3231 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3229.xy, x_3229.z);
        u_xlat73 = x_3231;
        let x_3233 : f32 = u_xlat20.y;
        let x_3234 : f32 = u_xlat73;
        let x_3236 : f32 = u_xlat72;
        u_xlat72 = ((x_3233 * x_3234) + x_3236);
        let x_3239 : vec4<f32> = u_xlat16;
        let x_3240 : vec2<f32> = vec2<f32>(x_3239.x, x_3239.y);
        let x_3242 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3240.x, x_3240.y, x_3242);
        let x_3249 : vec3<f32> = txVec49;
        let x_3251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3249.xy, x_3249.z);
        u_xlat73 = x_3251;
        let x_3253 : f32 = u_xlat20.z;
        let x_3254 : f32 = u_xlat73;
        let x_3256 : f32 = u_xlat72;
        u_xlat72 = ((x_3253 * x_3254) + x_3256);
        let x_3259 : vec4<f32> = u_xlat17;
        let x_3260 : vec2<f32> = vec2<f32>(x_3259.z, x_3259.w);
        let x_3262 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3260.x, x_3260.y, x_3262);
        let x_3269 : vec3<f32> = txVec50;
        let x_3271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3269.xy, x_3269.z);
        u_xlat73 = x_3271;
        let x_3273 : f32 = u_xlat20.w;
        let x_3274 : f32 = u_xlat73;
        let x_3276 : f32 = u_xlat72;
        u_xlat72 = ((x_3273 * x_3274) + x_3276);
        let x_3279 : vec4<f32> = u_xlat18;
        let x_3280 : vec2<f32> = vec2<f32>(x_3279.x, x_3279.y);
        let x_3282 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3280.x, x_3280.y, x_3282);
        let x_3289 : vec3<f32> = txVec51;
        let x_3291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3289.xy, x_3289.z);
        u_xlat73 = x_3291;
        let x_3293 : f32 = u_xlat21.x;
        let x_3294 : f32 = u_xlat73;
        let x_3296 : f32 = u_xlat72;
        u_xlat72 = ((x_3293 * x_3294) + x_3296);
        let x_3299 : vec4<f32> = u_xlat18;
        let x_3300 : vec2<f32> = vec2<f32>(x_3299.z, x_3299.w);
        let x_3302 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3300.x, x_3300.y, x_3302);
        let x_3309 : vec3<f32> = txVec52;
        let x_3311 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3309.xy, x_3309.z);
        u_xlat73 = x_3311;
        let x_3313 : f32 = u_xlat21.y;
        let x_3314 : f32 = u_xlat73;
        let x_3316 : f32 = u_xlat72;
        u_xlat72 = ((x_3313 * x_3314) + x_3316);
        let x_3319 : vec2<f32> = u_xlat32;
        let x_3321 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3319.x, x_3319.y, x_3321);
        let x_3328 : vec3<f32> = txVec53;
        let x_3330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3328.xy, x_3328.z);
        u_xlat73 = x_3330;
        let x_3332 : f32 = u_xlat21.z;
        let x_3333 : f32 = u_xlat73;
        let x_3335 : f32 = u_xlat72;
        u_xlat72 = ((x_3332 * x_3333) + x_3335);
        let x_3338 : vec2<f32> = u_xlat60;
        let x_3340 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3338.x, x_3338.y, x_3340);
        let x_3347 : vec3<f32> = txVec54;
        let x_3349 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3347.xy, x_3347.z);
        u_xlat73 = x_3349;
        let x_3351 : f32 = u_xlat21.w;
        let x_3352 : f32 = u_xlat73;
        let x_3354 : f32 = u_xlat72;
        u_xlat72 = ((x_3351 * x_3352) + x_3354);
        let x_3357 : vec4<f32> = u_xlat13;
        let x_3358 : vec2<f32> = vec2<f32>(x_3357.x, x_3357.y);
        let x_3360 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3358.x, x_3358.y, x_3360);
        let x_3367 : vec3<f32> = txVec55;
        let x_3369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3367.xy, x_3367.z);
        u_xlat73 = x_3369;
        let x_3371 : f32 = u_xlat9.x;
        let x_3372 : f32 = u_xlat73;
        let x_3374 : f32 = u_xlat72;
        u_xlat72 = ((x_3371 * x_3372) + x_3374);
        let x_3377 : vec4<f32> = u_xlat13;
        let x_3378 : vec2<f32> = vec2<f32>(x_3377.z, x_3377.w);
        let x_3380 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3378.x, x_3378.y, x_3380);
        let x_3387 : vec3<f32> = txVec56;
        let x_3389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3387.xy, x_3387.z);
        u_xlat73 = x_3389;
        let x_3391 : f32 = u_xlat9.y;
        let x_3392 : f32 = u_xlat73;
        let x_3394 : f32 = u_xlat72;
        u_xlat72 = ((x_3391 * x_3392) + x_3394);
        let x_3397 : vec2<f32> = u_xlat55;
        let x_3399 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3397.x, x_3397.y, x_3399);
        let x_3406 : vec3<f32> = txVec57;
        let x_3408 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3406.xy, x_3406.z);
        u_xlat73 = x_3408;
        let x_3410 : f32 = u_xlat9.z;
        let x_3411 : f32 = u_xlat73;
        let x_3413 : f32 = u_xlat72;
        u_xlat72 = ((x_3410 * x_3411) + x_3413);
        let x_3416 : vec4<f32> = u_xlat8;
        let x_3417 : vec2<f32> = vec2<f32>(x_3416.x, x_3416.y);
        let x_3419 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3417.x, x_3417.y, x_3419);
        let x_3426 : vec3<f32> = txVec58;
        let x_3428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3426.xy, x_3426.z);
        u_xlat73 = x_3428;
        let x_3430 : f32 = u_xlat9.w;
        let x_3431 : f32 = u_xlat73;
        let x_3433 : f32 = u_xlat72;
        u_xlat0.x = ((x_3430 * x_3431) + x_3433);
      }
    }
  } else {
    let x_3438 : vec4<f32> = u_xlat2;
    let x_3439 : vec2<f32> = vec2<f32>(x_3438.x, x_3438.y);
    let x_3441 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3439.x, x_3439.y, x_3441);
    let x_3448 : vec3<f32> = txVec59;
    let x_3450 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3448.xy, x_3448.z);
    u_xlat0.x = x_3450;
  }
  let x_3453 : f32 = u_xlat0.x;
  let x_3455 : f32 = x_401.x_MainLightShadowParams.x;
  let x_3457 : f32 = u_xlat68;
  u_xlat0.x = ((x_3453 * x_3455) + x_3457);
  let x_3460 : bool = u_xlatb3;
  if (x_3460) {
    x_3461 = 1.0f;
  } else {
    let x_3466 : f32 = u_xlat0.x;
    x_3461 = x_3466;
  }
  let x_3467 : f32 = x_3461;
  u_xlat0.x = x_3467;
  let x_3469 : vec3<f32> = vs_INTERP0;
  let x_3471 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3473 : vec3<f32> = (x_3469 + -(x_3471));
  let x_3474 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3473.x, x_3473.y, x_3473.z, x_3474.w);
  let x_3476 : vec4<f32> = u_xlat2;
  let x_3478 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3476.x, x_3476.y, x_3476.z), vec3<f32>(x_3478.x, x_3478.y, x_3478.z));
  let x_3483 : f32 = u_xlat2.x;
  let x_3485 : f32 = x_401.x_MainLightShadowParams.z;
  let x_3488 : f32 = x_401.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3483 * x_3485) + x_3488);
  let x_3492 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3492, 0.0f, 1.0f);
  let x_3497 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3497) + 1.0f);
  let x_3501 : f32 = u_xlat2.x;
  let x_3502 : f32 = u_xlat24;
  let x_3505 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3501 * x_3502) + x_3505);
  let x_3508 : f32 = u_xlat50;
  let x_3511 : vec4<f32> = x_160.x_MainLightColor;
  let x_3513 : vec3<f32> = (vec3<f32>(x_3508, x_3508, x_3508) * vec3<f32>(x_3511.x, x_3511.y, x_3511.z));
  let x_3514 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3513.x, x_3513.y, x_3513.z, x_3514.w);
  let x_3516 : vec3<f32> = u_xlat5;
  let x_3518 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(x_3516), x_3518);
  let x_3520 : f32 = u_xlat68;
  let x_3521 : f32 = u_xlat68;
  u_xlat68 = (x_3520 + x_3521);
  let x_3523 : vec3<f32> = u_xlat22;
  let x_3524 : f32 = u_xlat68;
  let x_3528 : vec3<f32> = u_xlat5;
  let x_3530 : vec3<f32> = ((x_3523 * -(vec3<f32>(x_3524, x_3524, x_3524))) + -(x_3528));
  let x_3531 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3530.x, x_3530.y, x_3530.z, x_3531.w);
  let x_3533 : vec3<f32> = u_xlat22;
  let x_3534 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(x_3533, x_3534);
  let x_3536 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3536, 0.0f, 1.0f);
  let x_3538 : f32 = u_xlat68;
  u_xlat68 = (-(x_3538) + 1.0f);
  let x_3541 : f32 = u_xlat68;
  let x_3542 : f32 = u_xlat68;
  u_xlat68 = (x_3541 * x_3542);
  let x_3544 : f32 = u_xlat68;
  let x_3545 : f32 = u_xlat68;
  u_xlat68 = (x_3544 * x_3545);
  let x_3548 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3548) * 0.699999988f) + 1.700000048f);
  let x_3556 : f32 = u_xlat3.x;
  let x_3558 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3556 * x_3558);
  let x_3562 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3562 * 6.0f);
  let x_3574 : vec4<f32> = u_xlat8;
  let x_3577 : f32 = u_xlat3.x;
  let x_3578 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3574.x, x_3574.y, x_3574.z), x_3577);
  u_xlat8 = x_3578;
  let x_3580 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3580 + -1.0f);
  let x_3584 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3586 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3584 * x_3586) + 1.0f);
  let x_3591 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3591, 0.0f);
  let x_3595 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3595);
  let x_3599 : f32 = u_xlat3.x;
  let x_3601 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3599 * x_3601);
  let x_3605 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3605);
  let x_3609 : f32 = u_xlat3.x;
  let x_3611 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3609 * x_3611);
  let x_3614 : vec4<f32> = u_xlat8;
  let x_3616 : vec4<f32> = u_xlat3;
  let x_3618 : vec3<f32> = (vec3<f32>(x_3614.x, x_3614.y, x_3614.z) * vec3<f32>(x_3616.x, x_3616.x, x_3616.x));
  let x_3619 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3618.x, x_3618.y, x_3618.z, x_3619.w);
  let x_3621 : f32 = u_xlat69;
  let x_3623 : f32 = u_xlat69;
  let x_3627 : vec2<f32> = ((vec2<f32>(x_3621, x_3621) * vec2<f32>(x_3623, x_3623)) + vec2<f32>(-1.0f, 1.0f));
  let x_3628 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3627.x, x_3628.y, x_3627.y, x_3628.w);
  let x_3631 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3631);
  let x_3634 : f32 = u_xlat71;
  u_xlat69 = (x_3634 + -0.039999999f);
  let x_3637 : f32 = u_xlat68;
  let x_3638 : f32 = u_xlat69;
  u_xlat68 = ((x_3637 * x_3638) + 0.039999999f);
  let x_3642 : f32 = u_xlat68;
  let x_3644 : f32 = u_xlat47.x;
  u_xlat68 = (x_3642 * x_3644);
  let x_3646 : f32 = u_xlat68;
  let x_3648 : vec4<f32> = u_xlat8;
  let x_3650 : vec3<f32> = (vec3<f32>(x_3646, x_3646, x_3646) * vec3<f32>(x_3648.x, x_3648.y, x_3648.z));
  let x_3651 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3650.x, x_3650.y, x_3650.z, x_3651.w);
  let x_3653 : vec4<f32> = u_xlat4;
  let x_3655 : vec3<f32> = u_xlat7;
  let x_3657 : vec4<f32> = u_xlat8;
  let x_3659 : vec3<f32> = ((vec3<f32>(x_3653.x, x_3653.y, x_3653.z) * x_3655) + vec3<f32>(x_3657.x, x_3657.y, x_3657.z));
  let x_3660 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3659.x, x_3659.y, x_3659.z, x_3660.w);
  let x_3663 : f32 = u_xlat0.x;
  let x_3665 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3663 * x_3665);
  let x_3668 : vec3<f32> = u_xlat22;
  let x_3670 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(x_3668, vec3<f32>(x_3670.x, x_3670.y, x_3670.z));
  let x_3673 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3673, 0.0f, 1.0f);
  let x_3676 : f32 = u_xlat0.x;
  let x_3677 : f32 = u_xlat68;
  u_xlat0.x = (x_3676 * x_3677);
  let x_3680 : vec3<f32> = u_xlat0;
  let x_3682 : vec4<f32> = u_xlat2;
  let x_3684 : vec3<f32> = (vec3<f32>(x_3680.x, x_3680.x, x_3680.x) * vec3<f32>(x_3682.x, x_3682.y, x_3682.z));
  let x_3685 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3684.x, x_3684.y, x_3684.z, x_3685.w);
  let x_3687 : vec3<f32> = u_xlat5;
  let x_3689 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3691 : vec3<f32> = (x_3687 + vec3<f32>(x_3689.x, x_3689.y, x_3689.z));
  let x_3692 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3691.x, x_3691.y, x_3691.z, x_3692.w);
  let x_3694 : vec4<f32> = u_xlat8;
  let x_3696 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3694.x, x_3694.y, x_3694.z), vec3<f32>(x_3696.x, x_3696.y, x_3696.z));
  let x_3701 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3701, 1.17549435e-37f);
  let x_3705 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3705);
  let x_3708 : vec3<f32> = u_xlat0;
  let x_3710 : vec4<f32> = u_xlat8;
  let x_3712 : vec3<f32> = (vec3<f32>(x_3708.x, x_3708.x, x_3708.x) * vec3<f32>(x_3710.x, x_3710.y, x_3710.z));
  let x_3713 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3712.x, x_3712.y, x_3712.z, x_3713.w);
  let x_3715 : vec3<f32> = u_xlat22;
  let x_3716 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3715, vec3<f32>(x_3716.x, x_3716.y, x_3716.z));
  let x_3721 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3721, 0.0f, 1.0f);
  let x_3725 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3727 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3725.x, x_3725.y, x_3725.z), vec3<f32>(x_3727.x, x_3727.y, x_3727.z));
  let x_3730 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3730, 0.0f, 1.0f);
  let x_3733 : f32 = u_xlat0.x;
  let x_3735 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3733 * x_3735);
  let x_3739 : f32 = u_xlat0.x;
  let x_3741 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3739 * x_3741) + 1.000010014f);
  let x_3746 : f32 = u_xlat68;
  let x_3747 : f32 = u_xlat68;
  u_xlat68 = (x_3746 * x_3747);
  let x_3750 : f32 = u_xlat0.x;
  let x_3752 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3750 * x_3752);
  let x_3755 : f32 = u_xlat68;
  u_xlat68 = max(x_3755, 0.100000001f);
  let x_3759 : f32 = u_xlat0.x;
  let x_3760 : f32 = u_xlat68;
  u_xlat0.x = (x_3759 * x_3760);
  let x_3763 : f32 = u_xlat28;
  let x_3765 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3763 * x_3765);
  let x_3768 : f32 = u_xlat70;
  let x_3770 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3768 / x_3770);
  let x_3773 : vec3<f32> = u_xlat0;
  let x_3777 : vec3<f32> = u_xlat7;
  let x_3778 : vec3<f32> = ((vec3<f32>(x_3773.x, x_3773.x, x_3773.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3777);
  let x_3779 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3778.x, x_3778.y, x_3778.z, x_3779.w);
  let x_3781 : vec4<f32> = u_xlat2;
  let x_3783 : vec4<f32> = u_xlat8;
  let x_3785 : vec3<f32> = (vec3<f32>(x_3781.x, x_3781.y, x_3781.z) * vec3<f32>(x_3783.x, x_3783.y, x_3783.z));
  let x_3786 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3785.x, x_3785.y, x_3785.z, x_3786.w);
  let x_3789 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3791 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3789, x_3791);
  let x_3795 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3795));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3807 : u32 = u_xlatu_loop_1;
    let x_3808 : u32 = u_xlatu0;
    if ((x_3807 < x_3808)) {
    } else {
      break;
    }
    let x_3810 : u32 = u_xlatu_loop_1;
    u_xlatu47 = (x_3810 >> 2u);
    let x_3813 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3813 & 3u));
    let x_3816 : u32 = u_xlatu47;
    let x_3819 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3816)];
    let x_3829 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3834 : vec4<u32> = indexable[x_3829];
    u_xlat47.x = dot(x_3819, bitcast<vec4<f32>>(x_3834));
    let x_3839 : f32 = u_xlat47.x;
    u_xlati47 = i32(x_3839);
    let x_3841 : vec3<f32> = vs_INTERP0;
    let x_3853 : i32 = u_xlati47;
    let x_3855 : vec4<f32> = x_3852.x_AdditionalLightsPosition[x_3853];
    let x_3858 : i32 = u_xlati47;
    let x_3860 : vec4<f32> = x_3852.x_AdditionalLightsPosition[x_3858];
    let x_3862 : vec3<f32> = ((-(x_3841) * vec3<f32>(x_3855.w, x_3855.w, x_3855.w)) + vec3<f32>(x_3860.x, x_3860.y, x_3860.z));
    let x_3863 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3862.x, x_3862.y, x_3862.z, x_3863.w);
    let x_3865 : vec4<f32> = u_xlat9;
    let x_3867 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3865.x, x_3865.y, x_3865.z), vec3<f32>(x_3867.x, x_3867.y, x_3867.z));
    let x_3870 : f32 = u_xlat69;
    u_xlat69 = max(x_3870, 6.10351562e-05f);
    let x_3873 : f32 = u_xlat69;
    u_xlat71 = inverseSqrt(x_3873);
    let x_3875 : f32 = u_xlat71;
    let x_3877 : vec4<f32> = u_xlat9;
    let x_3879 : vec3<f32> = (vec3<f32>(x_3875, x_3875, x_3875) * vec3<f32>(x_3877.x, x_3877.y, x_3877.z));
    let x_3880 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3879.x, x_3879.y, x_3879.z, x_3880.w);
    let x_3882 : f32 = u_xlat69;
    u_xlat72 = (1.0f / x_3882);
    let x_3884 : f32 = u_xlat69;
    let x_3885 : i32 = u_xlati47;
    let x_3887 : f32 = x_3852.x_AdditionalLightsAttenuation[x_3885].x;
    u_xlat69 = (x_3884 * x_3887);
    let x_3889 : f32 = u_xlat69;
    let x_3891 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3889) * x_3891) + 1.0f);
    let x_3894 : f32 = u_xlat69;
    u_xlat69 = max(x_3894, 0.0f);
    let x_3896 : f32 = u_xlat69;
    let x_3897 : f32 = u_xlat69;
    u_xlat69 = (x_3896 * x_3897);
    let x_3899 : f32 = u_xlat69;
    let x_3900 : f32 = u_xlat72;
    u_xlat69 = (x_3899 * x_3900);
    let x_3902 : i32 = u_xlati47;
    let x_3904 : vec4<f32> = x_3852.x_AdditionalLightsSpotDir[x_3902];
    let x_3906 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3904.x, x_3904.y, x_3904.z), vec3<f32>(x_3906.x, x_3906.y, x_3906.z));
    let x_3909 : f32 = u_xlat72;
    let x_3910 : i32 = u_xlati47;
    let x_3912 : f32 = x_3852.x_AdditionalLightsAttenuation[x_3910].z;
    let x_3914 : i32 = u_xlati47;
    let x_3916 : f32 = x_3852.x_AdditionalLightsAttenuation[x_3914].w;
    u_xlat72 = ((x_3909 * x_3912) + x_3916);
    let x_3918 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3918, 0.0f, 1.0f);
    let x_3920 : f32 = u_xlat72;
    let x_3921 : f32 = u_xlat72;
    u_xlat72 = (x_3920 * x_3921);
    let x_3923 : f32 = u_xlat69;
    let x_3924 : f32 = u_xlat72;
    u_xlat69 = (x_3923 * x_3924);
    let x_3926 : f32 = u_xlat50;
    let x_3928 : i32 = u_xlati47;
    let x_3930 : vec4<f32> = x_3852.x_AdditionalLightsColor[x_3928];
    let x_3932 : vec3<f32> = (vec3<f32>(x_3926, x_3926, x_3926) * vec3<f32>(x_3930.x, x_3930.y, x_3930.z));
    let x_3933 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3932.x, x_3932.y, x_3932.z, x_3933.w);
    let x_3935 : vec3<f32> = u_xlat22;
    let x_3936 : vec4<f32> = u_xlat10;
    u_xlat47.x = dot(x_3935, vec3<f32>(x_3936.x, x_3936.y, x_3936.z));
    let x_3941 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_3941, 0.0f, 1.0f);
    let x_3945 : f32 = u_xlat47.x;
    let x_3946 : f32 = u_xlat69;
    u_xlat47.x = (x_3945 * x_3946);
    let x_3949 : vec2<f32> = u_xlat47;
    let x_3951 : vec4<f32> = u_xlat11;
    let x_3953 : vec3<f32> = (vec3<f32>(x_3949.x, x_3949.x, x_3949.x) * vec3<f32>(x_3951.x, x_3951.y, x_3951.z));
    let x_3954 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3953.x, x_3953.y, x_3953.z, x_3954.w);
    let x_3956 : vec4<f32> = u_xlat9;
    let x_3958 : f32 = u_xlat71;
    let x_3961 : vec3<f32> = u_xlat5;
    let x_3962 : vec3<f32> = ((vec3<f32>(x_3956.x, x_3956.y, x_3956.z) * vec3<f32>(x_3958, x_3958, x_3958)) + x_3961);
    let x_3963 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3962.x, x_3962.y, x_3962.z, x_3963.w);
    let x_3965 : vec4<f32> = u_xlat9;
    let x_3967 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(vec3<f32>(x_3965.x, x_3965.y, x_3965.z), vec3<f32>(x_3967.x, x_3967.y, x_3967.z));
    let x_3972 : f32 = u_xlat47.x;
    u_xlat47.x = max(x_3972, 1.17549435e-37f);
    let x_3976 : f32 = u_xlat47.x;
    u_xlat47.x = inverseSqrt(x_3976);
    let x_3979 : vec2<f32> = u_xlat47;
    let x_3981 : vec4<f32> = u_xlat9;
    let x_3983 : vec3<f32> = (vec3<f32>(x_3979.x, x_3979.x, x_3979.x) * vec3<f32>(x_3981.x, x_3981.y, x_3981.z));
    let x_3984 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3983.x, x_3983.y, x_3983.z, x_3984.w);
    let x_3986 : vec3<f32> = u_xlat22;
    let x_3987 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(x_3986, vec3<f32>(x_3987.x, x_3987.y, x_3987.z));
    let x_3992 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_3992, 0.0f, 1.0f);
    let x_3995 : vec4<f32> = u_xlat10;
    let x_3997 : vec4<f32> = u_xlat9;
    u_xlat47.y = dot(vec3<f32>(x_3995.x, x_3995.y, x_3995.z), vec3<f32>(x_3997.x, x_3997.y, x_3997.z));
    let x_4002 : f32 = u_xlat47.y;
    u_xlat47.y = clamp(x_4002, 0.0f, 1.0f);
    let x_4005 : vec2<f32> = u_xlat47;
    let x_4006 : vec2<f32> = u_xlat47;
    u_xlat47 = (x_4005 * x_4006);
    let x_4009 : f32 = u_xlat47.x;
    let x_4011 : f32 = u_xlat3.x;
    u_xlat47.x = ((x_4009 * x_4011) + 1.000010014f);
    let x_4016 : f32 = u_xlat47.x;
    let x_4018 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4016 * x_4018);
    let x_4022 : f32 = u_xlat47.y;
    u_xlat69 = max(x_4022, 0.100000001f);
    let x_4024 : f32 = u_xlat69;
    let x_4026 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4024 * x_4026);
    let x_4029 : f32 = u_xlat28;
    let x_4031 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4029 * x_4031);
    let x_4034 : f32 = u_xlat70;
    let x_4036 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4034 / x_4036);
    let x_4039 : vec2<f32> = u_xlat47;
    let x_4042 : vec3<f32> = u_xlat7;
    let x_4043 : vec3<f32> = ((vec3<f32>(x_4039.x, x_4039.x, x_4039.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4042);
    let x_4044 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4043.x, x_4043.y, x_4043.z, x_4044.w);
    let x_4046 : vec4<f32> = u_xlat9;
    let x_4048 : vec4<f32> = u_xlat11;
    let x_4051 : vec4<f32> = u_xlat8;
    let x_4053 : vec3<f32> = ((vec3<f32>(x_4046.x, x_4046.y, x_4046.z) * vec3<f32>(x_4048.x, x_4048.y, x_4048.z)) + vec3<f32>(x_4051.x, x_4051.y, x_4051.z));
    let x_4054 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4053.x, x_4053.y, x_4053.z, x_4054.w);

    continuing {
      let x_4056 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4056 + bitcast<u32>(1i));
    }
  }
  let x_4058 : vec4<f32> = u_xlat4;
  let x_4060 : vec4<f32> = u_xlat6;
  let x_4063 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4058.x, x_4058.y, x_4058.z) * vec3<f32>(x_4060.x, x_4060.x, x_4060.x)) + vec3<f32>(x_4063.x, x_4063.y, x_4063.z));
  let x_4066 : vec4<f32> = u_xlat8;
  let x_4068 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4066.x, x_4066.y, x_4066.z) + x_4068);
  let x_4072 : vec4<f32> = vs_INTERP4;
  let x_4074 : vec3<f32> = u_xlat1;
  let x_4076 : vec3<f32> = u_xlat0;
  let x_4077 : vec3<f32> = ((vec3<f32>(x_4072.w, x_4072.w, x_4072.w) * x_4074) + x_4076);
  let x_4078 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4077.x, x_4077.y, x_4077.z, x_4078.w);
  let x_4080 : bool = u_xlatb25;
  let x_4081 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4081, x_4080);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

