type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_139 : PGlobals;

@group(1) @binding(4) var<uniform> x_149 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_253 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3716 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb0 : bool;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1756 : f32;
  var u_xlat69 : f32;
  var u_xlatb47 : bool;
  var u_xlat44 : f32;
  var x_1877 : vec3<f32>;
  var u_xlat70 : f32;
  var u_xlat51 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3323 : f32;
  var u_xlat24 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati69 : i32;
  var u_xlat72 : f32;
  var u_xlat66 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat22.y;
  let x_82 : f32 = u_xlat22.x;
  u_xlat22.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat22;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  let x_112 : vec3<f32> = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_113 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_112.x, x_112.y, x_112.z, x_113.w);
  let x_116 : vec3<f32> = u_xlat22;
  let x_117 : vec3<f32> = u_xlat0;
  let x_119 : vec3<f32> = (x_116 * vec3<f32>(x_117.x, x_117.x, x_117.x));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_135 : vec4<f32> = vs_INTERP3;
  let x_142 : f32 = x_139.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_135.x, x_135.y), x_142);
  u_xlat4 = x_143;
  let x_145 : vec4<f32> = u_xlat4;
  let x_152 : vec4<f32> = x_149.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_145.x, x_145.y, x_145.z) * vec3<f32>(x_152.x, x_152.y, x_152.z));
  let x_161 : vec4<f32> = vs_INTERP3;
  let x_164 : f32 = x_139.x_GlobalMipBias.x;
  let x_165 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_161.x, x_161.y), x_164);
  u_xlat6 = vec4<f32>(x_165.w, x_165.x, x_165.y, x_165.z);
  let x_168 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_168.y, x_168.z, x_168.w, x_168.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_175 : vec4<f32> = u_xlat7;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_175, x_176);
  let x_180 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_180);
  let x_184 : vec3<f32> = u_xlat0;
  let x_186 : vec4<f32> = u_xlat7;
  u_xlat28 = (vec3<f32>(x_184.x, x_184.x, x_184.x) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_191 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_191 * 200.0f);
  let x_196 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, 1.0f);
  let x_199 : vec3<f32> = u_xlat0;
  let x_201 : vec4<f32> = u_xlat4;
  let x_203 : vec3<f32> = (vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat3;
  let x_208 : vec3<f32> = u_xlat28;
  let x_210 : vec3<f32> = (vec3<f32>(x_206.x, x_206.y, x_206.z) * vec3<f32>(x_208.y, x_208.y, x_208.y));
  let x_211 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat28;
  let x_215 : vec4<f32> = u_xlat2;
  let x_218 : vec4<f32> = u_xlat3;
  let x_220 : vec3<f32> = ((vec3<f32>(x_213.x, x_213.x, x_213.x) * vec3<f32>(x_215.x, x_215.y, x_215.z)) + vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_221 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_220.x, x_220.y, x_220.z, x_221.w);
  let x_223 : vec3<f32> = u_xlat28;
  let x_225 : vec3<f32> = u_xlat1;
  let x_227 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_223.z, x_223.z, x_223.z) * x_225) + vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_230 : vec3<f32> = u_xlat1;
  let x_231 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_230, x_231);
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_235, 1.17549435e-37f);
  let x_240 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_240);
  let x_243 : vec3<f32> = u_xlat0;
  let x_245 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_243.x, x_243.x, x_243.x) * x_245);
  let x_248 : vec3<f32> = vs_INTERP0;
  let x_255 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres0;
  let x_258 : vec3<f32> = (x_248 + -(vec3<f32>(x_255.x, x_255.y, x_255.z)));
  let x_259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec3<f32> = vs_INTERP0;
  let x_264 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres1;
  let x_267 : vec3<f32> = (x_261 + -(vec3<f32>(x_264.x, x_264.y, x_264.z)));
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_270 : vec3<f32> = vs_INTERP0;
  let x_272 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres2;
  let x_275 : vec3<f32> = (x_270 + -(vec3<f32>(x_272.x, x_272.y, x_272.z)));
  let x_276 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_279 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres3;
  let x_285 : vec3<f32> = (x_279 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_288 : vec4<f32> = u_xlat2;
  let x_290 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_288.x, x_288.y, x_288.z), vec3<f32>(x_290.x, x_290.y, x_290.z));
  let x_294 : vec4<f32> = u_xlat3;
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_294.x, x_294.y, x_294.z), vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_300 : vec4<f32> = u_xlat7;
  let x_302 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_300.x, x_300.y, x_300.z), vec3<f32>(x_302.x, x_302.y, x_302.z));
  let x_306 : vec4<f32> = u_xlat8;
  let x_308 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_306.x, x_306.y, x_306.z), vec3<f32>(x_308.x, x_308.y, x_308.z));
  let x_315 : vec4<f32> = u_xlat2;
  let x_318 : vec4<f32> = x_253.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_315 < x_318);
  let x_321 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_321);
  let x_325 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_337);
  let x_342 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_342);
  let x_346 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_346);
  let x_349 : vec4<f32> = u_xlat2;
  let x_351 : vec4<f32> = u_xlat3;
  let x_353 : vec3<f32> = (vec3<f32>(x_349.x, x_349.y, x_349.z) + vec3<f32>(x_351.y, x_351.z, x_351.w));
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
  let x_356 : vec4<f32> = u_xlat2;
  let x_359 : vec3<f32> = max(vec3<f32>(x_356.x, x_356.y, x_356.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_360.x, x_359.x, x_359.y, x_359.z);
  let x_362 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_362, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_369) + 4.0f);
  let x_376 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_376);
  let x_380 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_380) << bitcast<u32>(2i));
  let x_383 : vec3<f32> = vs_INTERP0;
  let x_386 : i32 = u_xlati0;
  let x_389 : i32 = u_xlati0;
  let x_393 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_386 + 1i) / 4i)][((x_389 + 1i) % 4i)];
  let x_395 : vec3<f32> = (vec3<f32>(x_383.y, x_383.y, x_383.y) * vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_396 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_398 : i32 = u_xlati0;
  let x_400 : i32 = u_xlati0;
  let x_403 : vec4<f32> = x_253.x_MainLightWorldToShadow[(x_398 / 4i)][(x_400 % 4i)];
  let x_405 : vec3<f32> = vs_INTERP0;
  let x_408 : vec4<f32> = u_xlat2;
  let x_410 : vec3<f32> = ((vec3<f32>(x_403.x, x_403.y, x_403.z) * vec3<f32>(x_405.x, x_405.x, x_405.x)) + vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : i32 = u_xlati0;
  let x_416 : i32 = u_xlati0;
  let x_420 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_413 + 2i) / 4i)][((x_416 + 2i) % 4i)];
  let x_422 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = u_xlat2;
  let x_427 : vec3<f32> = ((vec3<f32>(x_420.x, x_420.y, x_420.z) * vec3<f32>(x_422.z, x_422.z, x_422.z)) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat2;
  let x_432 : i32 = u_xlati0;
  let x_435 : i32 = u_xlati0;
  let x_439 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_432 + 3i) / 4i)][((x_435 + 3i) % 4i)];
  let x_441 : vec3<f32> = (vec3<f32>(x_430.x, x_430.y, x_430.z) + vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_447 : f32 = x_253.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_447);
  let x_449 : bool = u_xlatb0;
  if (x_449) {
    let x_454 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb67 = (x_454 == 1.0f);
    let x_456 : bool = u_xlatb67;
    if (x_456) {
      let x_459 : vec4<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_481 : vec3<f32> = txVec0;
      let x_483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_481.xy, x_481.z);
      u_xlat7.x = x_483;
      let x_486 : vec4<f32> = u_xlat3;
      let x_487 : vec2<f32> = vec2<f32>(x_486.z, x_486.w);
      let x_489 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_487.x, x_487.y, x_489);
      let x_496 : vec3<f32> = txVec1;
      let x_498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_496.xy, x_496.z);
      u_xlat7.y = x_498;
      let x_500 : vec4<f32> = u_xlat2;
      let x_504 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_500.x, x_500.y, x_500.x, x_500.y) + x_504);
      let x_507 : vec4<f32> = u_xlat3;
      let x_508 : vec2<f32> = vec2<f32>(x_507.x, x_507.y);
      let x_510 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_508.x, x_508.y, x_510);
      let x_517 : vec3<f32> = txVec2;
      let x_519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_517.xy, x_517.z);
      u_xlat7.z = x_519;
      let x_522 : vec4<f32> = u_xlat3;
      let x_523 : vec2<f32> = vec2<f32>(x_522.z, x_522.w);
      let x_525 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_523.x, x_523.y, x_525);
      let x_532 : vec3<f32> = txVec3;
      let x_534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_532.xy, x_532.z);
      u_xlat7.w = x_534;
      let x_537 : vec4<f32> = u_xlat7;
      u_xlat67 = dot(x_537, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_544 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb68 = (x_544 == 2.0f);
      let x_546 : bool = u_xlatb68;
      if (x_546) {
        let x_549 : vec4<f32> = u_xlat2;
        let x_553 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_558 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.y) * vec2<f32>(x_553.z, x_553.w)) + vec2<f32>(0.5f, 0.5f));
        let x_559 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
        let x_561 : vec4<f32> = u_xlat3;
        let x_563 : vec2<f32> = floor(vec2<f32>(x_561.x, x_561.y));
        let x_564 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
        let x_568 : vec4<f32> = u_xlat2;
        let x_571 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_574 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_568.x, x_568.y) * vec2<f32>(x_571.z, x_571.w)) + -(vec2<f32>(x_574.x, x_574.y)));
        let x_578 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_578.x, x_578.x, x_578.y, x_578.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_582 : vec4<f32> = u_xlat7;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_582.x, x_582.x, x_582.z, x_582.z) * vec4<f32>(x_584.x, x_584.x, x_584.z, x_584.z));
        let x_587 : vec4<f32> = u_xlat8;
        let x_591 : vec2<f32> = (vec2<f32>(x_587.y, x_587.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_592 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_591.x, x_592.y, x_591.y, x_592.w);
        let x_594 : vec4<f32> = u_xlat8;
        let x_597 : vec2<f32> = u_xlat47;
        let x_599 : vec2<f32> = ((vec2<f32>(x_594.x, x_594.z) * vec2<f32>(0.5f, 0.5f)) + -(x_597));
        let x_600 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_599.x, x_599.y, x_600.z, x_600.w);
        let x_603 : vec2<f32> = u_xlat47;
        u_xlat52 = (-(x_603) + vec2<f32>(1.0f, 1.0f));
        let x_608 : vec2<f32> = u_xlat47;
        let x_610 : vec2<f32> = min(x_608, vec2<f32>(0.0f, 0.0f));
        let x_611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_613 : vec4<f32> = u_xlat9;
        let x_616 : vec4<f32> = u_xlat9;
        let x_619 : vec2<f32> = u_xlat52;
        let x_620 : vec2<f32> = ((-(vec2<f32>(x_613.x, x_613.y)) * vec2<f32>(x_616.x, x_616.y)) + x_619);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_623, vec2<f32>(0.0f, 0.0f));
        let x_625 : vec2<f32> = u_xlat47;
        let x_627 : vec2<f32> = u_xlat47;
        let x_629 : vec4<f32> = u_xlat7;
        u_xlat47 = ((-(x_625) * x_627) + vec2<f32>(x_629.y, x_629.w));
        let x_632 : vec4<f32> = u_xlat9;
        let x_634 : vec2<f32> = (vec2<f32>(x_632.x, x_632.y) + vec2<f32>(1.0f, 1.0f));
        let x_635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_637 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_637 + vec2<f32>(1.0f, 1.0f));
        let x_640 : vec4<f32> = u_xlat8;
        let x_644 : vec2<f32> = (vec2<f32>(x_640.x, x_640.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat52;
        let x_648 : vec2<f32> = (x_647 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_648.x, x_648.y, x_649.z, x_649.w);
        let x_651 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_651.x, x_651.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_657 : vec2<f32> = u_xlat47;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat7;
        u_xlat47 = (vec2<f32>(x_661.y, x_661.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_665 : f32 = u_xlat9.x;
        u_xlat10.z = x_665;
        let x_668 : f32 = u_xlat47.x;
        u_xlat10.w = x_668;
        let x_671 : f32 = u_xlat11.x;
        u_xlat8.z = x_671;
        let x_674 : f32 = u_xlat7.x;
        u_xlat8.w = x_674;
        let x_677 : vec4<f32> = u_xlat8;
        let x_679 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_677.z, x_677.w, x_677.x, x_677.z) + vec4<f32>(x_679.z, x_679.w, x_679.x, x_679.z));
        let x_683 : f32 = u_xlat10.y;
        u_xlat9.z = x_683;
        let x_686 : f32 = u_xlat47.y;
        u_xlat9.w = x_686;
        let x_689 : f32 = u_xlat8.y;
        u_xlat11.z = x_689;
        let x_692 : f32 = u_xlat7.z;
        u_xlat11.w = x_692;
        let x_694 : vec4<f32> = u_xlat9;
        let x_696 : vec4<f32> = u_xlat11;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.z, x_694.y, x_694.w) + vec3<f32>(x_696.z, x_696.y, x_696.w));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_703 : vec4<f32> = u_xlat12;
        let x_705 : vec3<f32> = (vec3<f32>(x_701.x, x_701.z, x_701.w) / vec3<f32>(x_703.z, x_703.w, x_703.y));
        let x_706 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
        let x_708 : vec4<f32> = u_xlat8;
        let x_714 : vec3<f32> = (vec3<f32>(x_708.x, x_708.y, x_708.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_715 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat11;
        let x_719 : vec4<f32> = u_xlat7;
        let x_721 : vec3<f32> = (vec3<f32>(x_717.z, x_717.y, x_717.w) / vec3<f32>(x_719.x, x_719.y, x_719.z));
        let x_722 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
        let x_724 : vec4<f32> = u_xlat9;
        let x_726 : vec3<f32> = (vec3<f32>(x_724.x, x_724.y, x_724.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_726.x, x_726.y, x_726.z, x_727.w);
        let x_729 : vec4<f32> = u_xlat8;
        let x_732 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_734 : vec3<f32> = (vec3<f32>(x_729.y, x_729.x, x_729.z) * vec3<f32>(x_732.x, x_732.x, x_732.x));
        let x_735 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_734.x, x_734.y, x_734.z, x_735.w);
        let x_737 : vec4<f32> = u_xlat9;
        let x_740 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_742 : vec3<f32> = (vec3<f32>(x_737.x, x_737.y, x_737.z) * vec3<f32>(x_740.y, x_740.y, x_740.y));
        let x_743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
        let x_746 : f32 = u_xlat9.x;
        u_xlat8.w = x_746;
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.y, x_754.w, x_754.x, x_754.w));
        let x_757 : vec4<f32> = u_xlat3;
        let x_760 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat8;
        u_xlat47 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_760.x, x_760.y)) + vec2<f32>(x_763.z, x_763.w));
        let x_767 : f32 = u_xlat8.y;
        u_xlat9.w = x_767;
        let x_769 : vec4<f32> = u_xlat9;
        let x_770 : vec2<f32> = vec2<f32>(x_769.y, x_769.z);
        let x_771 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_771.x, x_770.x, x_771.z, x_770.y);
        let x_773 : vec4<f32> = u_xlat3;
        let x_776 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_779 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_773.x, x_773.y, x_773.x, x_773.y) * vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y)) + vec4<f32>(x_779.x, x_779.y, x_779.z, x_779.y));
        let x_782 : vec4<f32> = u_xlat3;
        let x_785 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.w, x_788.y, x_788.w, x_788.z));
        let x_791 : vec4<f32> = u_xlat3;
        let x_794 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.x, x_797.w, x_797.z, x_797.w));
        let x_801 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_801.x, x_801.x, x_801.x, x_801.y) * vec4<f32>(x_803.z, x_803.w, x_803.y, x_803.z));
        let x_807 : vec4<f32> = u_xlat7;
        let x_809 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_807.y, x_807.y, x_807.z, x_807.z) * x_809);
        let x_813 : f32 = u_xlat7.z;
        let x_815 : f32 = u_xlat12.y;
        u_xlat68 = (x_813 * x_815);
        let x_818 : vec4<f32> = u_xlat10;
        let x_819 : vec2<f32> = vec2<f32>(x_818.x, x_818.y);
        let x_821 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_819.x, x_819.y, x_821);
        let x_828 : vec3<f32> = txVec4;
        let x_830 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_828.xy, x_828.z);
        u_xlat3.x = x_830;
        let x_833 : vec4<f32> = u_xlat10;
        let x_834 : vec2<f32> = vec2<f32>(x_833.z, x_833.w);
        let x_836 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_834.x, x_834.y, x_836);
        let x_844 : vec3<f32> = txVec5;
        let x_846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_844.xy, x_844.z);
        u_xlat25 = x_846;
        let x_847 : f32 = u_xlat25;
        let x_849 : f32 = u_xlat13.y;
        u_xlat25 = (x_847 * x_849);
        let x_852 : f32 = u_xlat13.x;
        let x_854 : f32 = u_xlat3.x;
        let x_856 : f32 = u_xlat25;
        u_xlat3.x = ((x_852 * x_854) + x_856);
        let x_860 : vec2<f32> = u_xlat47;
        let x_862 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_860.x, x_860.y, x_862);
        let x_869 : vec3<f32> = txVec6;
        let x_871 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_869.xy, x_869.z);
        u_xlat25 = x_871;
        let x_873 : f32 = u_xlat13.z;
        let x_874 : f32 = u_xlat25;
        let x_877 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_873 * x_874) + x_877);
        let x_881 : vec4<f32> = u_xlat9;
        let x_882 : vec2<f32> = vec2<f32>(x_881.x, x_881.y);
        let x_884 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_882.x, x_882.y, x_884);
        let x_891 : vec3<f32> = txVec7;
        let x_893 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_891.xy, x_891.z);
        u_xlat25 = x_893;
        let x_895 : f32 = u_xlat13.w;
        let x_896 : f32 = u_xlat25;
        let x_899 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_895 * x_896) + x_899);
        let x_903 : vec4<f32> = u_xlat11;
        let x_904 : vec2<f32> = vec2<f32>(x_903.x, x_903.y);
        let x_906 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_904.x, x_904.y, x_906);
        let x_913 : vec3<f32> = txVec8;
        let x_915 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_913.xy, x_913.z);
        u_xlat25 = x_915;
        let x_917 : f32 = u_xlat14.x;
        let x_918 : f32 = u_xlat25;
        let x_921 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_917 * x_918) + x_921);
        let x_925 : vec4<f32> = u_xlat11;
        let x_926 : vec2<f32> = vec2<f32>(x_925.z, x_925.w);
        let x_928 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_926.x, x_926.y, x_928);
        let x_935 : vec3<f32> = txVec9;
        let x_937 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_935.xy, x_935.z);
        u_xlat25 = x_937;
        let x_939 : f32 = u_xlat14.y;
        let x_940 : f32 = u_xlat25;
        let x_943 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_939 * x_940) + x_943);
        let x_947 : vec4<f32> = u_xlat9;
        let x_948 : vec2<f32> = vec2<f32>(x_947.z, x_947.w);
        let x_950 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_948.x, x_948.y, x_950);
        let x_957 : vec3<f32> = txVec10;
        let x_959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_957.xy, x_957.z);
        u_xlat25 = x_959;
        let x_961 : f32 = u_xlat14.z;
        let x_962 : f32 = u_xlat25;
        let x_965 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_961 * x_962) + x_965);
        let x_969 : vec4<f32> = u_xlat8;
        let x_970 : vec2<f32> = vec2<f32>(x_969.x, x_969.y);
        let x_972 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_970.x, x_970.y, x_972);
        let x_979 : vec3<f32> = txVec11;
        let x_981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_979.xy, x_979.z);
        u_xlat25 = x_981;
        let x_983 : f32 = u_xlat14.w;
        let x_984 : f32 = u_xlat25;
        let x_987 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_983 * x_984) + x_987);
        let x_991 : vec4<f32> = u_xlat8;
        let x_992 : vec2<f32> = vec2<f32>(x_991.z, x_991.w);
        let x_994 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_992.x, x_992.y, x_994);
        let x_1001 : vec3<f32> = txVec12;
        let x_1003 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1001.xy, x_1001.z);
        u_xlat25 = x_1003;
        let x_1004 : f32 = u_xlat68;
        let x_1005 : f32 = u_xlat25;
        let x_1008 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1004 * x_1005) + x_1008);
      } else {
        let x_1011 : vec4<f32> = u_xlat2;
        let x_1014 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1017 : vec2<f32> = ((vec2<f32>(x_1011.x, x_1011.y) * vec2<f32>(x_1014.z, x_1014.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1018 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1020 : vec4<f32> = u_xlat3;
        let x_1022 : vec2<f32> = floor(vec2<f32>(x_1020.x, x_1020.y));
        let x_1023 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1022.x, x_1022.y, x_1023.z, x_1023.w);
        let x_1025 : vec4<f32> = u_xlat2;
        let x_1028 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1031 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1025.x, x_1025.y) * vec2<f32>(x_1028.z, x_1028.w)) + -(vec2<f32>(x_1031.x, x_1031.y)));
        let x_1035 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_1035.x, x_1035.x, x_1035.y, x_1035.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1038 : vec4<f32> = u_xlat7;
        let x_1040 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1038.x, x_1038.x, x_1038.z, x_1038.z) * vec4<f32>(x_1040.x, x_1040.x, x_1040.z, x_1040.z));
        let x_1043 : vec4<f32> = u_xlat8;
        let x_1047 : vec2<f32> = (vec2<f32>(x_1043.y, x_1043.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1048 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1048.x, x_1047.x, x_1048.z, x_1047.y);
        let x_1050 : vec4<f32> = u_xlat8;
        let x_1053 : vec2<f32> = u_xlat47;
        let x_1055 : vec2<f32> = ((vec2<f32>(x_1050.x, x_1050.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1053));
        let x_1056 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1055.x, x_1056.y, x_1055.y, x_1056.w);
        let x_1058 : vec2<f32> = u_xlat47;
        let x_1060 : vec2<f32> = (-(x_1058) + vec2<f32>(1.0f, 1.0f));
        let x_1061 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1060.x, x_1060.y, x_1061.z, x_1061.w);
        let x_1063 : vec2<f32> = u_xlat47;
        u_xlat52 = min(x_1063, vec2<f32>(0.0f, 0.0f));
        let x_1065 : vec2<f32> = u_xlat52;
        let x_1067 : vec2<f32> = u_xlat52;
        let x_1069 : vec4<f32> = u_xlat8;
        let x_1071 : vec2<f32> = ((-(x_1065) * x_1067) + vec2<f32>(x_1069.x, x_1069.y));
        let x_1072 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1071.x, x_1071.y, x_1072.z, x_1072.w);
        let x_1074 : vec2<f32> = u_xlat47;
        u_xlat52 = max(x_1074, vec2<f32>(0.0f, 0.0f));
        let x_1077 : vec2<f32> = u_xlat52;
        let x_1079 : vec2<f32> = u_xlat52;
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1083 : vec2<f32> = ((-(x_1077) * x_1079) + vec2<f32>(x_1081.y, x_1081.w));
        let x_1084 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1083.x, x_1084.y, x_1083.y);
        let x_1086 : vec4<f32> = u_xlat8;
        let x_1089 : vec2<f32> = (vec2<f32>(x_1086.x, x_1086.y) + vec2<f32>(2.0f, 2.0f));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1089.y, x_1090.z, x_1090.w);
        let x_1092 : vec3<f32> = u_xlat29;
        let x_1094 : vec2<f32> = (vec2<f32>(x_1092.x, x_1092.z) + vec2<f32>(2.0f, 2.0f));
        let x_1095 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1095.x, x_1094.x, x_1095.z, x_1094.y);
        let x_1098 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1098 * 0.081632003f);
        let x_1102 : vec4<f32> = u_xlat7;
        let x_1105 : vec3<f32> = (vec3<f32>(x_1102.z, x_1102.x, x_1102.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1106 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1105.x, x_1105.y, x_1105.z, x_1106.w);
        let x_1108 : vec4<f32> = u_xlat8;
        let x_1111 : vec2<f32> = (vec2<f32>(x_1108.x, x_1108.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1112 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1111.x, x_1111.y, x_1112.z, x_1112.w);
        let x_1115 : f32 = u_xlat11.y;
        u_xlat10.x = x_1115;
        let x_1117 : vec2<f32> = u_xlat47;
        let x_1124 : vec2<f32> = ((vec2<f32>(x_1117.x, x_1117.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1125 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1125.x, x_1124.x, x_1125.z, x_1124.y);
        let x_1127 : vec2<f32> = u_xlat47;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1127.x, x_1127.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat7.x;
        u_xlat8.y = x_1135;
        let x_1138 : f32 = u_xlat9.y;
        u_xlat8.w = x_1138;
        let x_1140 : vec4<f32> = u_xlat8;
        let x_1141 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1140 + x_1141);
        let x_1143 : vec2<f32> = u_xlat47;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1143.y, x_1143.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1147 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1147.x, x_1146.x, x_1147.z, x_1146.y);
        let x_1149 : vec2<f32> = u_xlat47;
        let x_1152 : vec2<f32> = ((vec2<f32>(x_1149.y, x_1149.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1153 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1152.x, x_1153.y, x_1152.y, x_1153.w);
        let x_1156 : f32 = u_xlat7.y;
        u_xlat9.y = x_1156;
        let x_1158 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1158 + x_1159);
        let x_1161 : vec4<f32> = u_xlat8;
        let x_1162 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1161 / x_1162);
        let x_1164 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1164 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1170 : vec4<f32> = u_xlat9;
        let x_1171 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1170 / x_1171);
        let x_1173 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1173 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1175 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1175.w, x_1175.x, x_1175.y, x_1175.z) * vec4<f32>(x_1178.x, x_1178.x, x_1178.x, x_1178.x));
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1184 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1181.x, x_1181.w, x_1181.y, x_1181.z) * vec4<f32>(x_1184.y, x_1184.y, x_1184.y, x_1184.y));
        let x_1187 : vec4<f32> = u_xlat8;
        let x_1188 : vec3<f32> = vec3<f32>(x_1187.y, x_1187.z, x_1187.w);
        let x_1189 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1188.x, x_1189.y, x_1188.y, x_1188.z);
        let x_1192 : f32 = u_xlat9.x;
        u_xlat11.y = x_1192;
        let x_1194 : vec4<f32> = u_xlat3;
        let x_1197 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1200 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1194.x, x_1194.y, x_1194.x, x_1194.y) * vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y)) + vec4<f32>(x_1200.x, x_1200.y, x_1200.z, x_1200.y));
        let x_1203 : vec4<f32> = u_xlat3;
        let x_1206 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1209 : vec4<f32> = u_xlat11;
        u_xlat47 = ((vec2<f32>(x_1203.x, x_1203.y) * vec2<f32>(x_1206.x, x_1206.y)) + vec2<f32>(x_1209.w, x_1209.y));
        let x_1213 : f32 = u_xlat11.y;
        u_xlat8.y = x_1213;
        let x_1216 : f32 = u_xlat9.z;
        u_xlat11.y = x_1216;
        let x_1218 : vec4<f32> = u_xlat3;
        let x_1221 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1224 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1218.x, x_1218.y, x_1218.x, x_1218.y) * vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y)) + vec4<f32>(x_1224.x, x_1224.y, x_1224.z, x_1224.y));
        let x_1227 : vec4<f32> = u_xlat3;
        let x_1230 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1233 : vec4<f32> = u_xlat11;
        let x_1235 : vec2<f32> = ((vec2<f32>(x_1227.x, x_1227.y) * vec2<f32>(x_1230.x, x_1230.y)) + vec2<f32>(x_1233.w, x_1233.y));
        let x_1236 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1235.x, x_1235.y, x_1236.z, x_1236.w);
        let x_1239 : f32 = u_xlat11.y;
        u_xlat8.z = x_1239;
        let x_1242 : vec4<f32> = u_xlat3;
        let x_1245 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1248 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1242.x, x_1242.y, x_1242.x, x_1242.y) * vec4<f32>(x_1245.x, x_1245.y, x_1245.x, x_1245.y)) + vec4<f32>(x_1248.x, x_1248.y, x_1248.x, x_1248.z));
        let x_1252 : f32 = u_xlat9.w;
        u_xlat11.y = x_1252;
        let x_1255 : vec4<f32> = u_xlat3;
        let x_1258 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1261 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1255.x, x_1255.y, x_1255.x, x_1255.y) * vec4<f32>(x_1258.x, x_1258.y, x_1258.x, x_1258.y)) + vec4<f32>(x_1261.x, x_1261.y, x_1261.z, x_1261.y));
        let x_1265 : vec4<f32> = u_xlat3;
        let x_1268 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1271 : vec4<f32> = u_xlat11;
        u_xlat30 = ((vec2<f32>(x_1265.x, x_1265.y) * vec2<f32>(x_1268.x, x_1268.y)) + vec2<f32>(x_1271.w, x_1271.y));
        let x_1275 : f32 = u_xlat11.y;
        u_xlat8.w = x_1275;
        let x_1278 : vec4<f32> = u_xlat3;
        let x_1281 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1284 : vec4<f32> = u_xlat8;
        u_xlat58 = ((vec2<f32>(x_1278.x, x_1278.y) * vec2<f32>(x_1281.x, x_1281.y)) + vec2<f32>(x_1284.x, x_1284.w));
        let x_1287 : vec4<f32> = u_xlat11;
        let x_1288 : vec3<f32> = vec3<f32>(x_1287.x, x_1287.z, x_1287.w);
        let x_1289 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1288.x, x_1289.y, x_1288.y, x_1288.z);
        let x_1291 : vec4<f32> = u_xlat3;
        let x_1294 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1297 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1291.x, x_1291.y, x_1291.x, x_1291.y) * vec4<f32>(x_1294.x, x_1294.y, x_1294.x, x_1294.y)) + vec4<f32>(x_1297.x, x_1297.y, x_1297.z, x_1297.y));
        let x_1301 : vec4<f32> = u_xlat3;
        let x_1304 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1307 : vec4<f32> = u_xlat9;
        u_xlat53 = ((vec2<f32>(x_1301.x, x_1301.y) * vec2<f32>(x_1304.x, x_1304.y)) + vec2<f32>(x_1307.w, x_1307.y));
        let x_1311 : f32 = u_xlat8.x;
        u_xlat9.x = x_1311;
        let x_1313 : vec4<f32> = u_xlat3;
        let x_1316 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1319 : vec4<f32> = u_xlat9;
        let x_1321 : vec2<f32> = ((vec2<f32>(x_1313.x, x_1313.y) * vec2<f32>(x_1316.x, x_1316.y)) + vec2<f32>(x_1319.x, x_1319.y));
        let x_1322 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1321.x, x_1321.y, x_1322.z, x_1322.w);
        let x_1325 : vec4<f32> = u_xlat7;
        let x_1327 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1325.x, x_1325.x, x_1325.x, x_1325.x) * x_1327);
        let x_1330 : vec4<f32> = u_xlat7;
        let x_1332 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1330.y, x_1330.y, x_1330.y, x_1330.y) * x_1332);
        let x_1335 : vec4<f32> = u_xlat7;
        let x_1337 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1335.z, x_1335.z, x_1335.z, x_1335.z) * x_1337);
        let x_1339 : vec4<f32> = u_xlat7;
        let x_1341 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1339.w, x_1339.w, x_1339.w, x_1339.w) * x_1341);
        let x_1344 : vec4<f32> = u_xlat12;
        let x_1345 : vec2<f32> = vec2<f32>(x_1344.x, x_1344.y);
        let x_1347 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1345.x, x_1345.y, x_1347);
        let x_1354 : vec3<f32> = txVec13;
        let x_1356 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1354.xy, x_1354.z);
        u_xlat68 = x_1356;
        let x_1358 : vec4<f32> = u_xlat12;
        let x_1359 : vec2<f32> = vec2<f32>(x_1358.z, x_1358.w);
        let x_1361 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1359.x, x_1359.y, x_1361);
        let x_1369 : vec3<f32> = txVec14;
        let x_1371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1369.xy, x_1369.z);
        u_xlat71 = x_1371;
        let x_1372 : f32 = u_xlat71;
        let x_1374 : f32 = u_xlat17.y;
        u_xlat71 = (x_1372 * x_1374);
        let x_1377 : f32 = u_xlat17.x;
        let x_1378 : f32 = u_xlat68;
        let x_1380 : f32 = u_xlat71;
        u_xlat68 = ((x_1377 * x_1378) + x_1380);
        let x_1383 : vec2<f32> = u_xlat47;
        let x_1385 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec15;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat47.x = x_1394;
        let x_1397 : f32 = u_xlat17.z;
        let x_1399 : f32 = u_xlat47.x;
        let x_1401 : f32 = u_xlat68;
        u_xlat68 = ((x_1397 * x_1399) + x_1401);
        let x_1404 : vec4<f32> = u_xlat15;
        let x_1405 : vec2<f32> = vec2<f32>(x_1404.x, x_1404.y);
        let x_1407 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1405.x, x_1405.y, x_1407);
        let x_1414 : vec3<f32> = txVec16;
        let x_1416 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1414.xy, x_1414.z);
        u_xlat47.x = x_1416;
        let x_1419 : f32 = u_xlat17.w;
        let x_1421 : f32 = u_xlat47.x;
        let x_1423 : f32 = u_xlat68;
        u_xlat68 = ((x_1419 * x_1421) + x_1423);
        let x_1426 : vec4<f32> = u_xlat13;
        let x_1427 : vec2<f32> = vec2<f32>(x_1426.x, x_1426.y);
        let x_1429 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1427.x, x_1427.y, x_1429);
        let x_1436 : vec3<f32> = txVec17;
        let x_1438 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1436.xy, x_1436.z);
        u_xlat47.x = x_1438;
        let x_1441 : f32 = u_xlat18.x;
        let x_1443 : f32 = u_xlat47.x;
        let x_1445 : f32 = u_xlat68;
        u_xlat68 = ((x_1441 * x_1443) + x_1445);
        let x_1448 : vec4<f32> = u_xlat13;
        let x_1449 : vec2<f32> = vec2<f32>(x_1448.z, x_1448.w);
        let x_1451 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1449.x, x_1449.y, x_1451);
        let x_1458 : vec3<f32> = txVec18;
        let x_1460 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1458.xy, x_1458.z);
        u_xlat47.x = x_1460;
        let x_1463 : f32 = u_xlat18.y;
        let x_1465 : f32 = u_xlat47.x;
        let x_1467 : f32 = u_xlat68;
        u_xlat68 = ((x_1463 * x_1465) + x_1467);
        let x_1470 : vec4<f32> = u_xlat14;
        let x_1471 : vec2<f32> = vec2<f32>(x_1470.x, x_1470.y);
        let x_1473 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1471.x, x_1471.y, x_1473);
        let x_1480 : vec3<f32> = txVec19;
        let x_1482 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1480.xy, x_1480.z);
        u_xlat47.x = x_1482;
        let x_1485 : f32 = u_xlat18.z;
        let x_1487 : f32 = u_xlat47.x;
        let x_1489 : f32 = u_xlat68;
        u_xlat68 = ((x_1485 * x_1487) + x_1489);
        let x_1492 : vec4<f32> = u_xlat15;
        let x_1493 : vec2<f32> = vec2<f32>(x_1492.z, x_1492.w);
        let x_1495 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1493.x, x_1493.y, x_1495);
        let x_1502 : vec3<f32> = txVec20;
        let x_1504 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1502.xy, x_1502.z);
        u_xlat47.x = x_1504;
        let x_1507 : f32 = u_xlat18.w;
        let x_1509 : f32 = u_xlat47.x;
        let x_1511 : f32 = u_xlat68;
        u_xlat68 = ((x_1507 * x_1509) + x_1511);
        let x_1514 : vec4<f32> = u_xlat16;
        let x_1515 : vec2<f32> = vec2<f32>(x_1514.x, x_1514.y);
        let x_1517 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1515.x, x_1515.y, x_1517);
        let x_1524 : vec3<f32> = txVec21;
        let x_1526 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1524.xy, x_1524.z);
        u_xlat47.x = x_1526;
        let x_1529 : f32 = u_xlat19.x;
        let x_1531 : f32 = u_xlat47.x;
        let x_1533 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1531) + x_1533);
        let x_1536 : vec4<f32> = u_xlat16;
        let x_1537 : vec2<f32> = vec2<f32>(x_1536.z, x_1536.w);
        let x_1539 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1537.x, x_1537.y, x_1539);
        let x_1546 : vec3<f32> = txVec22;
        let x_1548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1546.xy, x_1546.z);
        u_xlat47.x = x_1548;
        let x_1551 : f32 = u_xlat19.y;
        let x_1553 : f32 = u_xlat47.x;
        let x_1555 : f32 = u_xlat68;
        u_xlat68 = ((x_1551 * x_1553) + x_1555);
        let x_1558 : vec2<f32> = u_xlat30;
        let x_1560 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1558.x, x_1558.y, x_1560);
        let x_1567 : vec3<f32> = txVec23;
        let x_1569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1567.xy, x_1567.z);
        u_xlat47.x = x_1569;
        let x_1572 : f32 = u_xlat19.z;
        let x_1574 : f32 = u_xlat47.x;
        let x_1576 : f32 = u_xlat68;
        u_xlat68 = ((x_1572 * x_1574) + x_1576);
        let x_1579 : vec2<f32> = u_xlat58;
        let x_1581 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1579.x, x_1579.y, x_1581);
        let x_1588 : vec3<f32> = txVec24;
        let x_1590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1588.xy, x_1588.z);
        u_xlat47.x = x_1590;
        let x_1593 : f32 = u_xlat19.w;
        let x_1595 : f32 = u_xlat47.x;
        let x_1597 : f32 = u_xlat68;
        u_xlat68 = ((x_1593 * x_1595) + x_1597);
        let x_1600 : vec4<f32> = u_xlat11;
        let x_1601 : vec2<f32> = vec2<f32>(x_1600.x, x_1600.y);
        let x_1603 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec25;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat47.x = x_1612;
        let x_1615 : f32 = u_xlat7.x;
        let x_1617 : f32 = u_xlat47.x;
        let x_1619 : f32 = u_xlat68;
        u_xlat68 = ((x_1615 * x_1617) + x_1619);
        let x_1622 : vec4<f32> = u_xlat11;
        let x_1623 : vec2<f32> = vec2<f32>(x_1622.z, x_1622.w);
        let x_1625 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1623.x, x_1623.y, x_1625);
        let x_1632 : vec3<f32> = txVec26;
        let x_1634 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1632.xy, x_1632.z);
        u_xlat47.x = x_1634;
        let x_1637 : f32 = u_xlat7.y;
        let x_1639 : f32 = u_xlat47.x;
        let x_1641 : f32 = u_xlat68;
        u_xlat68 = ((x_1637 * x_1639) + x_1641);
        let x_1644 : vec2<f32> = u_xlat53;
        let x_1646 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1644.x, x_1644.y, x_1646);
        let x_1653 : vec3<f32> = txVec27;
        let x_1655 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1653.xy, x_1653.z);
        u_xlat47.x = x_1655;
        let x_1658 : f32 = u_xlat7.z;
        let x_1660 : f32 = u_xlat47.x;
        let x_1662 : f32 = u_xlat68;
        u_xlat68 = ((x_1658 * x_1660) + x_1662);
        let x_1665 : vec4<f32> = u_xlat3;
        let x_1666 : vec2<f32> = vec2<f32>(x_1665.x, x_1665.y);
        let x_1668 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1666.x, x_1666.y, x_1668);
        let x_1675 : vec3<f32> = txVec28;
        let x_1677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1675.xy, x_1675.z);
        u_xlat3.x = x_1677;
        let x_1680 : f32 = u_xlat7.w;
        let x_1682 : f32 = u_xlat3.x;
        let x_1684 : f32 = u_xlat68;
        u_xlat67 = ((x_1680 * x_1682) + x_1684);
      }
    }
  } else {
    let x_1688 : vec4<f32> = u_xlat2;
    let x_1689 : vec2<f32> = vec2<f32>(x_1688.x, x_1688.y);
    let x_1691 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1689.x, x_1689.y, x_1691);
    let x_1698 : vec3<f32> = txVec29;
    let x_1700 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1698.xy, x_1698.z);
    u_xlat67 = x_1700;
  }
  let x_1702 : f32 = x_253.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1702) + 1.0f);
  let x_1705 : f32 = u_xlat67;
  let x_1707 : f32 = x_253.x_MainLightShadowParams.x;
  let x_1709 : f32 = u_xlat68;
  u_xlat67 = ((x_1705 * x_1707) + x_1709);
  let x_1713 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1713);
  let x_1717 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1717 >= 1.0f);
  let x_1719 : bool = u_xlatb25;
  let x_1720 : bool = u_xlatb3;
  u_xlatb3 = (x_1719 | x_1720);
  let x_1722 : bool = u_xlatb3;
  let x_1723 : f32 = u_xlat67;
  u_xlat67 = select(x_1723, 1.0f, x_1722);
  let x_1725 : vec3<f32> = u_xlat1;
  let x_1727 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat1.x = dot(x_1725, -(vec3<f32>(x_1727.x, x_1727.y, x_1727.z)));
  let x_1733 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1733, 0.0f, 1.0f);
  let x_1737 : f32 = u_xlat67;
  let x_1740 : vec4<f32> = x_139.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1737, x_1737, x_1737) * vec3<f32>(x_1740.x, x_1740.y, x_1740.z));
  let x_1743 : vec3<f32> = u_xlat23;
  let x_1744 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1743 * vec3<f32>(x_1744.x, x_1744.x, x_1744.x));
  let x_1747 : vec3<f32> = u_xlat1;
  let x_1748 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1747 * vec3<f32>(x_1748.x, x_1748.y, x_1748.z));
  let x_1752 : f32 = u_xlat4.w;
  u_xlatb67 = (x_1752 >= 0.400000006f);
  let x_1755 : bool = u_xlatb67;
  if (x_1755) {
    let x_1760 : f32 = u_xlat4.w;
    x_1756 = x_1760;
  } else {
    x_1756 = 0.0f;
  }
  let x_1762 : f32 = x_1756;
  u_xlat67 = x_1762;
  let x_1764 : f32 = u_xlat4.w;
  u_xlat25 = (x_1764 + -0.400000006f);
  let x_1768 : f32 = u_xlat4.w;
  u_xlat47.x = dpdxCoarse(x_1768);
  let x_1773 : f32 = u_xlat4.w;
  u_xlat69 = dpdyCoarse(x_1773);
  let x_1775 : f32 = u_xlat69;
  let x_1778 : f32 = u_xlat47.x;
  u_xlat47.x = (abs(x_1775) + abs(x_1778));
  let x_1783 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_1783, 0.0001f);
  let x_1787 : f32 = u_xlat25;
  let x_1789 : f32 = u_xlat47.x;
  u_xlat25 = (x_1787 / x_1789);
  let x_1791 : f32 = u_xlat25;
  u_xlat25 = (x_1791 + 0.5f);
  let x_1793 : f32 = u_xlat25;
  u_xlat25 = clamp(x_1793, 0.0f, 1.0f);
  let x_1797 : f32 = x_139.x_AlphaToMaskAvailable;
  u_xlatb47 = !((x_1797 == 0.0f));
  let x_1799 : bool = u_xlatb47;
  let x_1800 : f32 = u_xlat25;
  let x_1801 : f32 = u_xlat67;
  u_xlat67 = select(x_1801, x_1800, x_1799);
  let x_1803 : f32 = u_xlat67;
  u_xlat25 = (x_1803 + -0.0001f);
  let x_1806 : f32 = u_xlat25;
  u_xlatb25 = (x_1806 < 0.0f);
  let x_1808 : bool = u_xlatb25;
  if (((select(0i, 1i, x_1808) * -1i) != 0i)) {
    discard;
  }
  let x_1816 : vec3<f32> = u_xlat22;
  let x_1817 : vec3<f32> = u_xlat28;
  u_xlat22 = (x_1816 * vec3<f32>(x_1817.y, x_1817.y, x_1817.y));
  let x_1820 : vec3<f32> = u_xlat28;
  let x_1822 : vec4<f32> = vs_INTERP2;
  let x_1825 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1820.x, x_1820.x, x_1820.x) * vec3<f32>(x_1822.x, x_1822.y, x_1822.z)) + x_1825);
  let x_1827 : vec3<f32> = u_xlat28;
  let x_1829 : vec3<f32> = vs_INTERP1;
  let x_1831 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1827.z, x_1827.z, x_1827.z) * x_1829) + x_1831);
  let x_1833 : vec3<f32> = u_xlat22;
  let x_1834 : vec3<f32> = u_xlat22;
  u_xlat25 = dot(x_1833, x_1834);
  let x_1836 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_1836);
  let x_1838 : vec3<f32> = u_xlat22;
  let x_1839 : f32 = u_xlat25;
  let x_1841 : vec3<f32> = (x_1838 * vec3<f32>(x_1839, x_1839, x_1839));
  let x_1842 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1841.x, x_1841.y, x_1841.z, x_1842.w);
  let x_1846 : f32 = x_139.unity_OrthoParams.w;
  u_xlatb22.x = (x_1846 == 0.0f);
  let x_1849 : vec3<f32> = vs_INTERP0;
  let x_1853 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  u_xlat28 = (-(x_1849) + x_1853);
  let x_1856 : vec3<f32> = u_xlat28;
  let x_1857 : vec3<f32> = u_xlat28;
  u_xlat44 = dot(x_1856, x_1857);
  let x_1859 : f32 = u_xlat44;
  u_xlat44 = inverseSqrt(x_1859);
  let x_1861 : f32 = u_xlat44;
  let x_1863 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_1861, x_1861, x_1861) * x_1863);
  let x_1867 : f32 = x_139.unity_MatrixV[0i].z;
  u_xlat7.x = x_1867;
  let x_1870 : f32 = x_139.unity_MatrixV[1i].z;
  u_xlat7.y = x_1870;
  let x_1873 : f32 = x_139.unity_MatrixV[2i].z;
  u_xlat7.z = x_1873;
  let x_1876 : bool = u_xlatb22.x;
  if (x_1876) {
    let x_1880 : vec3<f32> = u_xlat28;
    x_1877 = x_1880;
  } else {
    let x_1882 : vec4<f32> = u_xlat7;
    x_1877 = vec3<f32>(x_1882.x, x_1882.y, x_1882.z);
  }
  let x_1884 : vec3<f32> = x_1877;
  u_xlat22 = x_1884;
  let x_1886 : f32 = vs_INTERP0.y;
  let x_1888 : f32 = x_139.unity_MatrixV[1i].z;
  u_xlat25 = (x_1886 * x_1888);
  let x_1891 : f32 = x_139.unity_MatrixV[0i].z;
  let x_1893 : f32 = vs_INTERP0.x;
  let x_1895 : f32 = u_xlat25;
  u_xlat25 = ((x_1891 * x_1893) + x_1895);
  let x_1898 : f32 = x_139.unity_MatrixV[2i].z;
  let x_1900 : f32 = vs_INTERP0.z;
  let x_1902 : f32 = u_xlat25;
  u_xlat25 = ((x_1898 * x_1900) + x_1902);
  let x_1904 : f32 = u_xlat25;
  let x_1906 : f32 = x_139.unity_MatrixV[3i].z;
  u_xlat25 = (x_1904 + x_1906);
  let x_1908 : f32 = u_xlat25;
  let x_1912 : f32 = x_139.x_ProjectionParams.y;
  u_xlat25 = (-(x_1908) + -(x_1912));
  let x_1915 : f32 = u_xlat25;
  u_xlat25 = max(x_1915, 0.0f);
  let x_1917 : f32 = u_xlat25;
  let x_1920 : f32 = x_139.unity_FogParams.x;
  u_xlat25 = (x_1917 * x_1920);
  u_xlat4.w = 1.0f;
  let x_1925 : vec4<f32> = x_60.unity_SHAr;
  let x_1926 : vec4<f32> = u_xlat4;
  u_xlat7.x = dot(x_1925, x_1926);
  let x_1931 : vec4<f32> = x_60.unity_SHAg;
  let x_1932 : vec4<f32> = u_xlat4;
  u_xlat7.y = dot(x_1931, x_1932);
  let x_1937 : vec4<f32> = x_60.unity_SHAb;
  let x_1938 : vec4<f32> = u_xlat4;
  u_xlat7.z = dot(x_1937, x_1938);
  let x_1941 : vec4<f32> = u_xlat4;
  let x_1943 : vec4<f32> = u_xlat4;
  u_xlat8 = (vec4<f32>(x_1941.y, x_1941.z, x_1941.z, x_1941.x) * vec4<f32>(x_1943.x, x_1943.y, x_1943.z, x_1943.z));
  let x_1948 : vec4<f32> = x_60.unity_SHBr;
  let x_1949 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_1948, x_1949);
  let x_1954 : vec4<f32> = x_60.unity_SHBg;
  let x_1955 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_1954, x_1955);
  let x_1960 : vec4<f32> = x_60.unity_SHBb;
  let x_1961 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_1960, x_1961);
  let x_1965 : f32 = u_xlat4.y;
  let x_1967 : f32 = u_xlat4.y;
  u_xlat69 = (x_1965 * x_1967);
  let x_1970 : f32 = u_xlat4.x;
  let x_1972 : f32 = u_xlat4.x;
  let x_1974 : f32 = u_xlat69;
  u_xlat69 = ((x_1970 * x_1972) + -(x_1974));
  let x_1979 : vec4<f32> = x_60.unity_SHC;
  let x_1981 : f32 = u_xlat69;
  let x_1984 : vec4<f32> = u_xlat9;
  u_xlat28 = ((vec3<f32>(x_1979.x, x_1979.y, x_1979.z) * vec3<f32>(x_1981, x_1981, x_1981)) + vec3<f32>(x_1984.x, x_1984.y, x_1984.z));
  let x_1987 : vec3<f32> = u_xlat28;
  let x_1988 : vec4<f32> = u_xlat7;
  u_xlat28 = (x_1987 + vec3<f32>(x_1988.x, x_1988.y, x_1988.z));
  let x_1991 : vec3<f32> = u_xlat28;
  u_xlat28 = max(x_1991, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1994 : vec4<f32> = x_139.x_ScaledScreenParams;
  let x_1995 : vec2<f32> = vec2<f32>(x_1994.x, x_1994.y);
  let x_1999 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1995.x, x_1995.y));
  let x_2000 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1999.x, x_1999.y, x_2000.z, x_2000.w);
  let x_2002 : vec4<f32> = u_xlat7;
  let x_2004 : vec4<f32> = hlslcc_FragCoord;
  let x_2006 : vec2<f32> = (vec2<f32>(x_2002.x, x_2002.y) * vec2<f32>(x_2004.x, x_2004.y));
  let x_2007 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2006.x, x_2006.y, x_2007.z, x_2007.w);
  let x_2010 : f32 = u_xlat7.y;
  let x_2013 : f32 = x_139.x_ScaleBiasRt.x;
  let x_2016 : f32 = x_139.x_ScaleBiasRt.y;
  u_xlat69 = ((x_2010 * x_2013) + x_2016);
  let x_2018 : f32 = u_xlat69;
  u_xlat7.z = (-(x_2018) + 1.0f);
  let x_2023 : f32 = u_xlat6.x;
  u_xlat6.x = x_2023;
  let x_2026 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_2026, 0.0f, 1.0f);
  let x_2029 : f32 = u_xlat67;
  u_xlat67 = min(x_2029, 1.0f);
  let x_2031 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2031 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2036 : f32 = u_xlat6.x;
  u_xlat69 = (-(x_2036) + 1.0f);
  let x_2040 : f32 = u_xlat69;
  let x_2041 : f32 = u_xlat69;
  u_xlat70 = (x_2040 * x_2041);
  let x_2043 : f32 = u_xlat70;
  u_xlat70 = max(x_2043, 0.0078125f);
  let x_2046 : f32 = u_xlat70;
  let x_2047 : f32 = u_xlat70;
  u_xlat71 = (x_2046 * x_2047);
  let x_2050 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2050 + 0.040000021f);
  let x_2055 : f32 = u_xlat6.x;
  u_xlat6.x = min(x_2055, 1.0f);
  let x_2058 : f32 = u_xlat70;
  u_xlat29.x = ((x_2058 * 4.0f) + 2.0f);
  let x_2067 : vec4<f32> = u_xlat7;
  let x_2070 : f32 = x_139.x_GlobalMipBias.x;
  let x_2071 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2067.x, x_2067.z), x_2070);
  u_xlat7.x = x_2071.x;
  let x_2076 : f32 = u_xlat7.x;
  u_xlat51 = (x_2076 + -1.0f);
  let x_2079 : f32 = x_139.x_AmbientOcclusionParam.w;
  let x_2080 : f32 = u_xlat51;
  u_xlat51 = ((x_2079 * x_2080) + 1.0f);
  let x_2084 : f32 = u_xlat7.x;
  let x_2086 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2084, x_2086);
  let x_2089 : bool = u_xlatb0;
  if (x_2089) {
    let x_2093 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2093 == 1.0f);
    let x_2095 : bool = u_xlatb0;
    if (x_2095) {
      let x_2098 : vec4<f32> = u_xlat2;
      let x_2101 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2098.x, x_2098.y, x_2098.x, x_2098.y) + x_2101);
      let x_2104 : vec4<f32> = u_xlat8;
      let x_2105 : vec2<f32> = vec2<f32>(x_2104.x, x_2104.y);
      let x_2107 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2105.x, x_2105.y, x_2107);
      let x_2114 : vec3<f32> = txVec30;
      let x_2116 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2114.xy, x_2114.z);
      u_xlat9.x = x_2116;
      let x_2119 : vec4<f32> = u_xlat8;
      let x_2120 : vec2<f32> = vec2<f32>(x_2119.z, x_2119.w);
      let x_2122 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2120.x, x_2120.y, x_2122);
      let x_2129 : vec3<f32> = txVec31;
      let x_2131 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2129.xy, x_2129.z);
      u_xlat9.y = x_2131;
      let x_2133 : vec4<f32> = u_xlat2;
      let x_2136 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2133.x, x_2133.y, x_2133.x, x_2133.y) + x_2136);
      let x_2139 : vec4<f32> = u_xlat8;
      let x_2140 : vec2<f32> = vec2<f32>(x_2139.x, x_2139.y);
      let x_2142 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2140.x, x_2140.y, x_2142);
      let x_2149 : vec3<f32> = txVec32;
      let x_2151 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2149.xy, x_2149.z);
      u_xlat9.z = x_2151;
      let x_2154 : vec4<f32> = u_xlat8;
      let x_2155 : vec2<f32> = vec2<f32>(x_2154.z, x_2154.w);
      let x_2157 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2155.x, x_2155.y, x_2157);
      let x_2164 : vec3<f32> = txVec33;
      let x_2166 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2164.xy, x_2164.z);
      u_xlat9.w = x_2166;
      let x_2168 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2168, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2174 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2174 == 2.0f);
      let x_2176 : bool = u_xlatb73;
      if (x_2176) {
        let x_2179 : vec4<f32> = u_xlat2;
        let x_2182 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2185 : vec2<f32> = ((vec2<f32>(x_2179.x, x_2179.y) * vec2<f32>(x_2182.z, x_2182.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2186 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2185.x, x_2185.y, x_2186.z, x_2186.w);
        let x_2188 : vec4<f32> = u_xlat8;
        let x_2190 : vec2<f32> = floor(vec2<f32>(x_2188.x, x_2188.y));
        let x_2191 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2190.x, x_2190.y, x_2191.z, x_2191.w);
        let x_2193 : vec4<f32> = u_xlat2;
        let x_2196 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2199 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2193.x, x_2193.y) * vec2<f32>(x_2196.z, x_2196.w)) + -(vec2<f32>(x_2199.x, x_2199.y)));
        let x_2203 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2203.x, x_2203.x, x_2203.y, x_2203.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2206 : vec4<f32> = u_xlat9;
        let x_2208 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2206.x, x_2206.x, x_2206.z, x_2206.z) * vec4<f32>(x_2208.x, x_2208.x, x_2208.z, x_2208.z));
        let x_2211 : vec4<f32> = u_xlat10;
        let x_2213 : vec2<f32> = (vec2<f32>(x_2211.y, x_2211.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2214 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2213.x, x_2214.y, x_2213.y, x_2214.w);
        let x_2216 : vec4<f32> = u_xlat10;
        let x_2219 : vec2<f32> = u_xlat52;
        let x_2221 : vec2<f32> = ((vec2<f32>(x_2216.x, x_2216.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2219));
        let x_2222 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2221.x, x_2221.y, x_2222.z, x_2222.w);
        let x_2225 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2225) + vec2<f32>(1.0f, 1.0f));
        let x_2228 : vec2<f32> = u_xlat52;
        let x_2229 : vec2<f32> = min(x_2228, vec2<f32>(0.0f, 0.0f));
        let x_2230 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2229.x, x_2229.y, x_2230.z, x_2230.w);
        let x_2232 : vec4<f32> = u_xlat11;
        let x_2235 : vec4<f32> = u_xlat11;
        let x_2238 : vec2<f32> = u_xlat54;
        let x_2239 : vec2<f32> = ((-(vec2<f32>(x_2232.x, x_2232.y)) * vec2<f32>(x_2235.x, x_2235.y)) + x_2238);
        let x_2240 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2239.x, x_2239.y, x_2240.z, x_2240.w);
        let x_2242 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2242, vec2<f32>(0.0f, 0.0f));
        let x_2244 : vec2<f32> = u_xlat52;
        let x_2246 : vec2<f32> = u_xlat52;
        let x_2248 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2244) * x_2246) + vec2<f32>(x_2248.y, x_2248.w));
        let x_2251 : vec4<f32> = u_xlat11;
        let x_2253 : vec2<f32> = (vec2<f32>(x_2251.x, x_2251.y) + vec2<f32>(1.0f, 1.0f));
        let x_2254 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2253.x, x_2253.y, x_2254.z, x_2254.w);
        let x_2256 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2256 + vec2<f32>(1.0f, 1.0f));
        let x_2258 : vec4<f32> = u_xlat10;
        let x_2260 : vec2<f32> = (vec2<f32>(x_2258.x, x_2258.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2261 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2260.x, x_2260.y, x_2261.z, x_2261.w);
        let x_2263 : vec2<f32> = u_xlat54;
        let x_2264 : vec2<f32> = (x_2263 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2265 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2264.x, x_2264.y, x_2265.z, x_2265.w);
        let x_2267 : vec4<f32> = u_xlat11;
        let x_2269 : vec2<f32> = (vec2<f32>(x_2267.x, x_2267.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2270 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2269.x, x_2269.y, x_2270.z, x_2270.w);
        let x_2272 : vec2<f32> = u_xlat52;
        let x_2273 : vec2<f32> = (x_2272 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2274 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2273.x, x_2273.y, x_2274.z, x_2274.w);
        let x_2276 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2276.y, x_2276.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2280 : f32 = u_xlat11.x;
        u_xlat12.z = x_2280;
        let x_2283 : f32 = u_xlat52.x;
        u_xlat12.w = x_2283;
        let x_2286 : f32 = u_xlat13.x;
        u_xlat10.z = x_2286;
        let x_2289 : f32 = u_xlat9.x;
        u_xlat10.w = x_2289;
        let x_2291 : vec4<f32> = u_xlat10;
        let x_2293 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2291.z, x_2291.w, x_2291.x, x_2291.z) + vec4<f32>(x_2293.z, x_2293.w, x_2293.x, x_2293.z));
        let x_2297 : f32 = u_xlat12.y;
        u_xlat11.z = x_2297;
        let x_2300 : f32 = u_xlat52.y;
        u_xlat11.w = x_2300;
        let x_2303 : f32 = u_xlat10.y;
        u_xlat13.z = x_2303;
        let x_2306 : f32 = u_xlat9.z;
        u_xlat13.w = x_2306;
        let x_2308 : vec4<f32> = u_xlat11;
        let x_2310 : vec4<f32> = u_xlat13;
        let x_2312 : vec3<f32> = (vec3<f32>(x_2308.z, x_2308.y, x_2308.w) + vec3<f32>(x_2310.z, x_2310.y, x_2310.w));
        let x_2313 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2312.x, x_2312.y, x_2312.z, x_2313.w);
        let x_2315 : vec4<f32> = u_xlat10;
        let x_2317 : vec4<f32> = u_xlat14;
        let x_2319 : vec3<f32> = (vec3<f32>(x_2315.x, x_2315.z, x_2315.w) / vec3<f32>(x_2317.z, x_2317.w, x_2317.y));
        let x_2320 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2319.x, x_2319.y, x_2319.z, x_2320.w);
        let x_2322 : vec4<f32> = u_xlat10;
        let x_2324 : vec3<f32> = (vec3<f32>(x_2322.x, x_2322.y, x_2322.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2325 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2324.x, x_2324.y, x_2324.z, x_2325.w);
        let x_2327 : vec4<f32> = u_xlat13;
        let x_2329 : vec4<f32> = u_xlat9;
        let x_2331 : vec3<f32> = (vec3<f32>(x_2327.z, x_2327.y, x_2327.w) / vec3<f32>(x_2329.x, x_2329.y, x_2329.z));
        let x_2332 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2331.x, x_2331.y, x_2331.z, x_2332.w);
        let x_2334 : vec4<f32> = u_xlat11;
        let x_2336 : vec3<f32> = (vec3<f32>(x_2334.x, x_2334.y, x_2334.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2337 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2336.x, x_2336.y, x_2336.z, x_2337.w);
        let x_2339 : vec4<f32> = u_xlat10;
        let x_2342 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2344 : vec3<f32> = (vec3<f32>(x_2339.y, x_2339.x, x_2339.z) * vec3<f32>(x_2342.x, x_2342.x, x_2342.x));
        let x_2345 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2344.x, x_2344.y, x_2344.z, x_2345.w);
        let x_2347 : vec4<f32> = u_xlat11;
        let x_2350 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2352 : vec3<f32> = (vec3<f32>(x_2347.x, x_2347.y, x_2347.z) * vec3<f32>(x_2350.y, x_2350.y, x_2350.y));
        let x_2353 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2352.x, x_2352.y, x_2352.z, x_2353.w);
        let x_2356 : f32 = u_xlat11.x;
        u_xlat10.w = x_2356;
        let x_2358 : vec4<f32> = u_xlat8;
        let x_2361 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2364 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2358.x, x_2358.y, x_2358.x, x_2358.y) * vec4<f32>(x_2361.x, x_2361.y, x_2361.x, x_2361.y)) + vec4<f32>(x_2364.y, x_2364.w, x_2364.x, x_2364.w));
        let x_2367 : vec4<f32> = u_xlat8;
        let x_2370 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2373 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2367.x, x_2367.y) * vec2<f32>(x_2370.x, x_2370.y)) + vec2<f32>(x_2373.z, x_2373.w));
        let x_2377 : f32 = u_xlat10.y;
        u_xlat11.w = x_2377;
        let x_2379 : vec4<f32> = u_xlat11;
        let x_2380 : vec2<f32> = vec2<f32>(x_2379.y, x_2379.z);
        let x_2381 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2381.x, x_2380.x, x_2381.z, x_2380.y);
        let x_2383 : vec4<f32> = u_xlat8;
        let x_2386 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2389 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2383.x, x_2383.y, x_2383.x, x_2383.y) * vec4<f32>(x_2386.x, x_2386.y, x_2386.x, x_2386.y)) + vec4<f32>(x_2389.x, x_2389.y, x_2389.z, x_2389.y));
        let x_2392 : vec4<f32> = u_xlat8;
        let x_2395 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2398 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2392.x, x_2392.y, x_2392.x, x_2392.y) * vec4<f32>(x_2395.x, x_2395.y, x_2395.x, x_2395.y)) + vec4<f32>(x_2398.w, x_2398.y, x_2398.w, x_2398.z));
        let x_2401 : vec4<f32> = u_xlat8;
        let x_2404 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2407 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2401.x, x_2401.y, x_2401.x, x_2401.y) * vec4<f32>(x_2404.x, x_2404.y, x_2404.x, x_2404.y)) + vec4<f32>(x_2407.x, x_2407.w, x_2407.z, x_2407.w));
        let x_2410 : vec4<f32> = u_xlat9;
        let x_2412 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2410.x, x_2410.x, x_2410.x, x_2410.y) * vec4<f32>(x_2412.z, x_2412.w, x_2412.y, x_2412.z));
        let x_2415 : vec4<f32> = u_xlat9;
        let x_2417 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2415.y, x_2415.y, x_2415.z, x_2415.z) * x_2417);
        let x_2421 : f32 = u_xlat9.z;
        let x_2423 : f32 = u_xlat14.y;
        u_xlat73 = (x_2421 * x_2423);
        let x_2426 : vec4<f32> = u_xlat12;
        let x_2427 : vec2<f32> = vec2<f32>(x_2426.x, x_2426.y);
        let x_2429 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2427.x, x_2427.y, x_2429);
        let x_2436 : vec3<f32> = txVec34;
        let x_2438 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2436.xy, x_2436.z);
        u_xlat8.x = x_2438;
        let x_2441 : vec4<f32> = u_xlat12;
        let x_2442 : vec2<f32> = vec2<f32>(x_2441.z, x_2441.w);
        let x_2444 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2442.x, x_2442.y, x_2444);
        let x_2451 : vec3<f32> = txVec35;
        let x_2453 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2451.xy, x_2451.z);
        u_xlat30.x = x_2453;
        let x_2456 : f32 = u_xlat30.x;
        let x_2458 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2456 * x_2458);
        let x_2462 : f32 = u_xlat15.x;
        let x_2464 : f32 = u_xlat8.x;
        let x_2467 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2462 * x_2464) + x_2467);
        let x_2471 : vec2<f32> = u_xlat52;
        let x_2473 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2471.x, x_2471.y, x_2473);
        let x_2480 : vec3<f32> = txVec36;
        let x_2482 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2480.xy, x_2480.z);
        u_xlat30.x = x_2482;
        let x_2485 : f32 = u_xlat15.z;
        let x_2487 : f32 = u_xlat30.x;
        let x_2490 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2485 * x_2487) + x_2490);
        let x_2494 : vec4<f32> = u_xlat11;
        let x_2495 : vec2<f32> = vec2<f32>(x_2494.x, x_2494.y);
        let x_2497 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2495.x, x_2495.y, x_2497);
        let x_2504 : vec3<f32> = txVec37;
        let x_2506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2504.xy, x_2504.z);
        u_xlat30.x = x_2506;
        let x_2509 : f32 = u_xlat15.w;
        let x_2511 : f32 = u_xlat30.x;
        let x_2514 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2509 * x_2511) + x_2514);
        let x_2518 : vec4<f32> = u_xlat13;
        let x_2519 : vec2<f32> = vec2<f32>(x_2518.x, x_2518.y);
        let x_2521 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2519.x, x_2519.y, x_2521);
        let x_2528 : vec3<f32> = txVec38;
        let x_2530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2528.xy, x_2528.z);
        u_xlat30.x = x_2530;
        let x_2533 : f32 = u_xlat16.x;
        let x_2535 : f32 = u_xlat30.x;
        let x_2538 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2533 * x_2535) + x_2538);
        let x_2542 : vec4<f32> = u_xlat13;
        let x_2543 : vec2<f32> = vec2<f32>(x_2542.z, x_2542.w);
        let x_2545 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2543.x, x_2543.y, x_2545);
        let x_2552 : vec3<f32> = txVec39;
        let x_2554 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2552.xy, x_2552.z);
        u_xlat30.x = x_2554;
        let x_2557 : f32 = u_xlat16.y;
        let x_2559 : f32 = u_xlat30.x;
        let x_2562 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2557 * x_2559) + x_2562);
        let x_2566 : vec4<f32> = u_xlat11;
        let x_2567 : vec2<f32> = vec2<f32>(x_2566.z, x_2566.w);
        let x_2569 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2567.x, x_2567.y, x_2569);
        let x_2576 : vec3<f32> = txVec40;
        let x_2578 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2576.xy, x_2576.z);
        u_xlat30.x = x_2578;
        let x_2581 : f32 = u_xlat16.z;
        let x_2583 : f32 = u_xlat30.x;
        let x_2586 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2581 * x_2583) + x_2586);
        let x_2590 : vec4<f32> = u_xlat10;
        let x_2591 : vec2<f32> = vec2<f32>(x_2590.x, x_2590.y);
        let x_2593 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2591.x, x_2591.y, x_2593);
        let x_2600 : vec3<f32> = txVec41;
        let x_2602 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2600.xy, x_2600.z);
        u_xlat30.x = x_2602;
        let x_2605 : f32 = u_xlat16.w;
        let x_2607 : f32 = u_xlat30.x;
        let x_2610 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2605 * x_2607) + x_2610);
        let x_2614 : vec4<f32> = u_xlat10;
        let x_2615 : vec2<f32> = vec2<f32>(x_2614.z, x_2614.w);
        let x_2617 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2615.x, x_2615.y, x_2617);
        let x_2624 : vec3<f32> = txVec42;
        let x_2626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2624.xy, x_2624.z);
        u_xlat30.x = x_2626;
        let x_2628 : f32 = u_xlat73;
        let x_2630 : f32 = u_xlat30.x;
        let x_2633 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_2628 * x_2630) + x_2633);
      } else {
        let x_2637 : vec4<f32> = u_xlat2;
        let x_2640 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2643 : vec2<f32> = ((vec2<f32>(x_2637.x, x_2637.y) * vec2<f32>(x_2640.z, x_2640.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2644 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2643.x, x_2643.y, x_2644.z, x_2644.w);
        let x_2646 : vec4<f32> = u_xlat8;
        let x_2648 : vec2<f32> = floor(vec2<f32>(x_2646.x, x_2646.y));
        let x_2649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2648.x, x_2648.y, x_2649.z, x_2649.w);
        let x_2651 : vec4<f32> = u_xlat2;
        let x_2654 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2657 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2651.x, x_2651.y) * vec2<f32>(x_2654.z, x_2654.w)) + -(vec2<f32>(x_2657.x, x_2657.y)));
        let x_2661 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2661.x, x_2661.x, x_2661.y, x_2661.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2664 : vec4<f32> = u_xlat9;
        let x_2666 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2664.x, x_2664.x, x_2664.z, x_2664.z) * vec4<f32>(x_2666.x, x_2666.x, x_2666.z, x_2666.z));
        let x_2669 : vec4<f32> = u_xlat10;
        let x_2671 : vec2<f32> = (vec2<f32>(x_2669.y, x_2669.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2672 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2672.x, x_2671.x, x_2672.z, x_2671.y);
        let x_2674 : vec4<f32> = u_xlat10;
        let x_2677 : vec2<f32> = u_xlat52;
        let x_2679 : vec2<f32> = ((vec2<f32>(x_2674.x, x_2674.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2677));
        let x_2680 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2679.x, x_2680.y, x_2679.y, x_2680.w);
        let x_2682 : vec2<f32> = u_xlat52;
        let x_2684 : vec2<f32> = (-(x_2682) + vec2<f32>(1.0f, 1.0f));
        let x_2685 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2684.x, x_2684.y, x_2685.z, x_2685.w);
        let x_2687 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2687, vec2<f32>(0.0f, 0.0f));
        let x_2689 : vec2<f32> = u_xlat54;
        let x_2691 : vec2<f32> = u_xlat54;
        let x_2693 : vec4<f32> = u_xlat10;
        let x_2695 : vec2<f32> = ((-(x_2689) * x_2691) + vec2<f32>(x_2693.x, x_2693.y));
        let x_2696 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2695.x, x_2695.y, x_2696.z, x_2696.w);
        let x_2698 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2698, vec2<f32>(0.0f, 0.0f));
        let x_2701 : vec2<f32> = u_xlat54;
        let x_2703 : vec2<f32> = u_xlat54;
        let x_2705 : vec4<f32> = u_xlat9;
        let x_2707 : vec2<f32> = ((-(x_2701) * x_2703) + vec2<f32>(x_2705.y, x_2705.w));
        let x_2708 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2707.x, x_2708.y, x_2707.y);
        let x_2710 : vec4<f32> = u_xlat10;
        let x_2712 : vec2<f32> = (vec2<f32>(x_2710.x, x_2710.y) + vec2<f32>(2.0f, 2.0f));
        let x_2713 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2712.x, x_2712.y, x_2713.z, x_2713.w);
        let x_2715 : vec3<f32> = u_xlat31;
        let x_2717 : vec2<f32> = (vec2<f32>(x_2715.x, x_2715.z) + vec2<f32>(2.0f, 2.0f));
        let x_2718 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2718.x, x_2717.x, x_2718.z, x_2717.y);
        let x_2721 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2721 * 0.081632003f);
        let x_2724 : vec4<f32> = u_xlat9;
        let x_2726 : vec3<f32> = (vec3<f32>(x_2724.z, x_2724.x, x_2724.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2727 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2726.x, x_2726.y, x_2726.z, x_2727.w);
        let x_2729 : vec4<f32> = u_xlat10;
        let x_2731 : vec2<f32> = (vec2<f32>(x_2729.x, x_2729.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2732 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2731.x, x_2731.y, x_2732.z, x_2732.w);
        let x_2735 : f32 = u_xlat13.y;
        u_xlat12.x = x_2735;
        let x_2737 : vec2<f32> = u_xlat52;
        let x_2740 : vec2<f32> = ((vec2<f32>(x_2737.x, x_2737.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2741 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2741.x, x_2740.x, x_2741.z, x_2740.y);
        let x_2743 : vec2<f32> = u_xlat52;
        let x_2746 : vec2<f32> = ((vec2<f32>(x_2743.x, x_2743.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2747 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2746.x, x_2747.y, x_2746.y, x_2747.w);
        let x_2750 : f32 = u_xlat9.x;
        u_xlat10.y = x_2750;
        let x_2753 : f32 = u_xlat11.y;
        u_xlat10.w = x_2753;
        let x_2755 : vec4<f32> = u_xlat10;
        let x_2756 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2755 + x_2756);
        let x_2758 : vec2<f32> = u_xlat52;
        let x_2761 : vec2<f32> = ((vec2<f32>(x_2758.y, x_2758.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2762 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2762.x, x_2761.x, x_2762.z, x_2761.y);
        let x_2764 : vec2<f32> = u_xlat52;
        let x_2767 : vec2<f32> = ((vec2<f32>(x_2764.y, x_2764.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2768 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2767.x, x_2768.y, x_2767.y, x_2768.w);
        let x_2771 : f32 = u_xlat9.y;
        u_xlat11.y = x_2771;
        let x_2773 : vec4<f32> = u_xlat11;
        let x_2774 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2773 + x_2774);
        let x_2776 : vec4<f32> = u_xlat10;
        let x_2777 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2776 / x_2777);
        let x_2779 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2779 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2781 : vec4<f32> = u_xlat11;
        let x_2782 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2781 / x_2782);
        let x_2784 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2784 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2786 : vec4<f32> = u_xlat10;
        let x_2789 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2786.w, x_2786.x, x_2786.y, x_2786.z) * vec4<f32>(x_2789.x, x_2789.x, x_2789.x, x_2789.x));
        let x_2792 : vec4<f32> = u_xlat11;
        let x_2795 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2792.x, x_2792.w, x_2792.y, x_2792.z) * vec4<f32>(x_2795.y, x_2795.y, x_2795.y, x_2795.y));
        let x_2798 : vec4<f32> = u_xlat10;
        let x_2799 : vec3<f32> = vec3<f32>(x_2798.y, x_2798.z, x_2798.w);
        let x_2800 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2799.x, x_2800.y, x_2799.y, x_2799.z);
        let x_2803 : f32 = u_xlat11.x;
        u_xlat13.y = x_2803;
        let x_2805 : vec4<f32> = u_xlat8;
        let x_2808 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2811 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2805.x, x_2805.y, x_2805.x, x_2805.y) * vec4<f32>(x_2808.x, x_2808.y, x_2808.x, x_2808.y)) + vec4<f32>(x_2811.x, x_2811.y, x_2811.z, x_2811.y));
        let x_2814 : vec4<f32> = u_xlat8;
        let x_2817 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2820 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2814.x, x_2814.y) * vec2<f32>(x_2817.x, x_2817.y)) + vec2<f32>(x_2820.w, x_2820.y));
        let x_2824 : f32 = u_xlat13.y;
        u_xlat10.y = x_2824;
        let x_2827 : f32 = u_xlat11.z;
        u_xlat13.y = x_2827;
        let x_2829 : vec4<f32> = u_xlat8;
        let x_2832 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2835 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2829.x, x_2829.y, x_2829.x, x_2829.y) * vec4<f32>(x_2832.x, x_2832.y, x_2832.x, x_2832.y)) + vec4<f32>(x_2835.x, x_2835.y, x_2835.z, x_2835.y));
        let x_2838 : vec4<f32> = u_xlat8;
        let x_2841 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2844 : vec4<f32> = u_xlat13;
        let x_2846 : vec2<f32> = ((vec2<f32>(x_2838.x, x_2838.y) * vec2<f32>(x_2841.x, x_2841.y)) + vec2<f32>(x_2844.w, x_2844.y));
        let x_2847 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2846.x, x_2846.y, x_2847.z, x_2847.w);
        let x_2850 : f32 = u_xlat13.y;
        u_xlat10.z = x_2850;
        let x_2852 : vec4<f32> = u_xlat8;
        let x_2855 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2858 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2852.x, x_2852.y, x_2852.x, x_2852.y) * vec4<f32>(x_2855.x, x_2855.y, x_2855.x, x_2855.y)) + vec4<f32>(x_2858.x, x_2858.y, x_2858.x, x_2858.z));
        let x_2862 : f32 = u_xlat11.w;
        u_xlat13.y = x_2862;
        let x_2864 : vec4<f32> = u_xlat8;
        let x_2867 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2870 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2864.x, x_2864.y, x_2864.x, x_2864.y) * vec4<f32>(x_2867.x, x_2867.y, x_2867.x, x_2867.y)) + vec4<f32>(x_2870.x, x_2870.y, x_2870.z, x_2870.y));
        let x_2874 : vec4<f32> = u_xlat8;
        let x_2877 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2880 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2874.x, x_2874.y) * vec2<f32>(x_2877.x, x_2877.y)) + vec2<f32>(x_2880.w, x_2880.y));
        let x_2884 : f32 = u_xlat13.y;
        u_xlat10.w = x_2884;
        let x_2887 : vec4<f32> = u_xlat8;
        let x_2890 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2893 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2887.x, x_2887.y) * vec2<f32>(x_2890.x, x_2890.y)) + vec2<f32>(x_2893.x, x_2893.w));
        let x_2896 : vec4<f32> = u_xlat13;
        let x_2897 : vec3<f32> = vec3<f32>(x_2896.x, x_2896.z, x_2896.w);
        let x_2898 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2897.x, x_2898.y, x_2897.y, x_2897.z);
        let x_2900 : vec4<f32> = u_xlat8;
        let x_2903 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2906 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2900.x, x_2900.y, x_2900.x, x_2900.y) * vec4<f32>(x_2903.x, x_2903.y, x_2903.x, x_2903.y)) + vec4<f32>(x_2906.x, x_2906.y, x_2906.z, x_2906.y));
        let x_2910 : vec4<f32> = u_xlat8;
        let x_2913 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2916 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2910.x, x_2910.y) * vec2<f32>(x_2913.x, x_2913.y)) + vec2<f32>(x_2916.w, x_2916.y));
        let x_2920 : f32 = u_xlat10.x;
        u_xlat11.x = x_2920;
        let x_2922 : vec4<f32> = u_xlat8;
        let x_2925 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2928 : vec4<f32> = u_xlat11;
        let x_2930 : vec2<f32> = ((vec2<f32>(x_2922.x, x_2922.y) * vec2<f32>(x_2925.x, x_2925.y)) + vec2<f32>(x_2928.x, x_2928.y));
        let x_2931 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2930.x, x_2930.y, x_2931.z, x_2931.w);
        let x_2933 : vec4<f32> = u_xlat9;
        let x_2935 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2933.x, x_2933.x, x_2933.x, x_2933.x) * x_2935);
        let x_2938 : vec4<f32> = u_xlat9;
        let x_2940 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2938.y, x_2938.y, x_2938.y, x_2938.y) * x_2940);
        let x_2943 : vec4<f32> = u_xlat9;
        let x_2945 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2943.z, x_2943.z, x_2943.z, x_2943.z) * x_2945);
        let x_2947 : vec4<f32> = u_xlat9;
        let x_2949 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2947.w, x_2947.w, x_2947.w, x_2947.w) * x_2949);
        let x_2952 : vec4<f32> = u_xlat14;
        let x_2953 : vec2<f32> = vec2<f32>(x_2952.x, x_2952.y);
        let x_2955 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2953.x, x_2953.y, x_2955);
        let x_2962 : vec3<f32> = txVec43;
        let x_2964 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2962.xy, x_2962.z);
        u_xlat73 = x_2964;
        let x_2966 : vec4<f32> = u_xlat14;
        let x_2967 : vec2<f32> = vec2<f32>(x_2966.z, x_2966.w);
        let x_2969 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2967.x, x_2967.y, x_2969);
        let x_2976 : vec3<f32> = txVec44;
        let x_2978 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2976.xy, x_2976.z);
        u_xlat10.x = x_2978;
        let x_2981 : f32 = u_xlat10.x;
        let x_2983 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2981 * x_2983);
        let x_2987 : f32 = u_xlat19.x;
        let x_2988 : f32 = u_xlat73;
        let x_2991 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2987 * x_2988) + x_2991);
        let x_2994 : vec2<f32> = u_xlat52;
        let x_2996 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2994.x, x_2994.y, x_2996);
        let x_3003 : vec3<f32> = txVec45;
        let x_3005 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3003.xy, x_3003.z);
        u_xlat52.x = x_3005;
        let x_3008 : f32 = u_xlat19.z;
        let x_3010 : f32 = u_xlat52.x;
        let x_3012 : f32 = u_xlat73;
        u_xlat73 = ((x_3008 * x_3010) + x_3012);
        let x_3015 : vec4<f32> = u_xlat17;
        let x_3016 : vec2<f32> = vec2<f32>(x_3015.x, x_3015.y);
        let x_3018 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3016.x, x_3016.y, x_3018);
        let x_3025 : vec3<f32> = txVec46;
        let x_3027 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3025.xy, x_3025.z);
        u_xlat52.x = x_3027;
        let x_3030 : f32 = u_xlat19.w;
        let x_3032 : f32 = u_xlat52.x;
        let x_3034 : f32 = u_xlat73;
        u_xlat73 = ((x_3030 * x_3032) + x_3034);
        let x_3037 : vec4<f32> = u_xlat15;
        let x_3038 : vec2<f32> = vec2<f32>(x_3037.x, x_3037.y);
        let x_3040 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3038.x, x_3038.y, x_3040);
        let x_3047 : vec3<f32> = txVec47;
        let x_3049 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3047.xy, x_3047.z);
        u_xlat52.x = x_3049;
        let x_3052 : f32 = u_xlat20.x;
        let x_3054 : f32 = u_xlat52.x;
        let x_3056 : f32 = u_xlat73;
        u_xlat73 = ((x_3052 * x_3054) + x_3056);
        let x_3059 : vec4<f32> = u_xlat15;
        let x_3060 : vec2<f32> = vec2<f32>(x_3059.z, x_3059.w);
        let x_3062 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3060.x, x_3060.y, x_3062);
        let x_3069 : vec3<f32> = txVec48;
        let x_3071 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3069.xy, x_3069.z);
        u_xlat52.x = x_3071;
        let x_3074 : f32 = u_xlat20.y;
        let x_3076 : f32 = u_xlat52.x;
        let x_3078 : f32 = u_xlat73;
        u_xlat73 = ((x_3074 * x_3076) + x_3078);
        let x_3081 : vec4<f32> = u_xlat16;
        let x_3082 : vec2<f32> = vec2<f32>(x_3081.x, x_3081.y);
        let x_3084 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3082.x, x_3082.y, x_3084);
        let x_3091 : vec3<f32> = txVec49;
        let x_3093 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3091.xy, x_3091.z);
        u_xlat52.x = x_3093;
        let x_3096 : f32 = u_xlat20.z;
        let x_3098 : f32 = u_xlat52.x;
        let x_3100 : f32 = u_xlat73;
        u_xlat73 = ((x_3096 * x_3098) + x_3100);
        let x_3103 : vec4<f32> = u_xlat17;
        let x_3104 : vec2<f32> = vec2<f32>(x_3103.z, x_3103.w);
        let x_3106 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3104.x, x_3104.y, x_3106);
        let x_3113 : vec3<f32> = txVec50;
        let x_3115 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3113.xy, x_3113.z);
        u_xlat52.x = x_3115;
        let x_3118 : f32 = u_xlat20.w;
        let x_3120 : f32 = u_xlat52.x;
        let x_3122 : f32 = u_xlat73;
        u_xlat73 = ((x_3118 * x_3120) + x_3122);
        let x_3125 : vec4<f32> = u_xlat18;
        let x_3126 : vec2<f32> = vec2<f32>(x_3125.x, x_3125.y);
        let x_3128 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3126.x, x_3126.y, x_3128);
        let x_3135 : vec3<f32> = txVec51;
        let x_3137 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3135.xy, x_3135.z);
        u_xlat52.x = x_3137;
        let x_3140 : f32 = u_xlat21.x;
        let x_3142 : f32 = u_xlat52.x;
        let x_3144 : f32 = u_xlat73;
        u_xlat73 = ((x_3140 * x_3142) + x_3144);
        let x_3147 : vec4<f32> = u_xlat18;
        let x_3148 : vec2<f32> = vec2<f32>(x_3147.z, x_3147.w);
        let x_3150 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3148.x, x_3148.y, x_3150);
        let x_3157 : vec3<f32> = txVec52;
        let x_3159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3157.xy, x_3157.z);
        u_xlat52.x = x_3159;
        let x_3162 : f32 = u_xlat21.y;
        let x_3164 : f32 = u_xlat52.x;
        let x_3166 : f32 = u_xlat73;
        u_xlat73 = ((x_3162 * x_3164) + x_3166);
        let x_3169 : vec2<f32> = u_xlat32;
        let x_3171 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3169.x, x_3169.y, x_3171);
        let x_3178 : vec3<f32> = txVec53;
        let x_3180 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3178.xy, x_3178.z);
        u_xlat52.x = x_3180;
        let x_3183 : f32 = u_xlat21.z;
        let x_3185 : f32 = u_xlat52.x;
        let x_3187 : f32 = u_xlat73;
        u_xlat73 = ((x_3183 * x_3185) + x_3187);
        let x_3190 : vec2<f32> = u_xlat60;
        let x_3192 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3190.x, x_3190.y, x_3192);
        let x_3199 : vec3<f32> = txVec54;
        let x_3201 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3199.xy, x_3199.z);
        u_xlat52.x = x_3201;
        let x_3204 : f32 = u_xlat21.w;
        let x_3206 : f32 = u_xlat52.x;
        let x_3208 : f32 = u_xlat73;
        u_xlat73 = ((x_3204 * x_3206) + x_3208);
        let x_3211 : vec4<f32> = u_xlat13;
        let x_3212 : vec2<f32> = vec2<f32>(x_3211.x, x_3211.y);
        let x_3214 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3212.x, x_3212.y, x_3214);
        let x_3221 : vec3<f32> = txVec55;
        let x_3223 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3221.xy, x_3221.z);
        u_xlat52.x = x_3223;
        let x_3226 : f32 = u_xlat9.x;
        let x_3228 : f32 = u_xlat52.x;
        let x_3230 : f32 = u_xlat73;
        u_xlat73 = ((x_3226 * x_3228) + x_3230);
        let x_3233 : vec4<f32> = u_xlat13;
        let x_3234 : vec2<f32> = vec2<f32>(x_3233.z, x_3233.w);
        let x_3236 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3234.x, x_3234.y, x_3236);
        let x_3243 : vec3<f32> = txVec56;
        let x_3245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3243.xy, x_3243.z);
        u_xlat52.x = x_3245;
        let x_3248 : f32 = u_xlat9.y;
        let x_3250 : f32 = u_xlat52.x;
        let x_3252 : f32 = u_xlat73;
        u_xlat73 = ((x_3248 * x_3250) + x_3252);
        let x_3255 : vec2<f32> = u_xlat55;
        let x_3257 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3255.x, x_3255.y, x_3257);
        let x_3264 : vec3<f32> = txVec57;
        let x_3266 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3264.xy, x_3264.z);
        u_xlat52.x = x_3266;
        let x_3269 : f32 = u_xlat9.z;
        let x_3271 : f32 = u_xlat52.x;
        let x_3273 : f32 = u_xlat73;
        u_xlat73 = ((x_3269 * x_3271) + x_3273);
        let x_3276 : vec4<f32> = u_xlat8;
        let x_3277 : vec2<f32> = vec2<f32>(x_3276.x, x_3276.y);
        let x_3279 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3277.x, x_3277.y, x_3279);
        let x_3286 : vec3<f32> = txVec58;
        let x_3288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3286.xy, x_3286.z);
        u_xlat8.x = x_3288;
        let x_3291 : f32 = u_xlat9.w;
        let x_3293 : f32 = u_xlat8.x;
        let x_3295 : f32 = u_xlat73;
        u_xlat0.x = ((x_3291 * x_3293) + x_3295);
      }
    }
  } else {
    let x_3300 : vec4<f32> = u_xlat2;
    let x_3301 : vec2<f32> = vec2<f32>(x_3300.x, x_3300.y);
    let x_3303 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3301.x, x_3301.y, x_3303);
    let x_3310 : vec3<f32> = txVec59;
    let x_3312 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3310.xy, x_3310.z);
    u_xlat0.x = x_3312;
  }
  let x_3315 : f32 = u_xlat0.x;
  let x_3317 : f32 = x_253.x_MainLightShadowParams.x;
  let x_3319 : f32 = u_xlat68;
  u_xlat0.x = ((x_3315 * x_3317) + x_3319);
  let x_3322 : bool = u_xlatb3;
  if (x_3322) {
    x_3323 = 1.0f;
  } else {
    let x_3328 : f32 = u_xlat0.x;
    x_3323 = x_3328;
  }
  let x_3329 : f32 = x_3323;
  u_xlat0.x = x_3329;
  let x_3331 : vec3<f32> = vs_INTERP0;
  let x_3333 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_3335 : vec3<f32> = (x_3331 + -(x_3333));
  let x_3336 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3335.x, x_3335.y, x_3335.z, x_3336.w);
  let x_3338 : vec4<f32> = u_xlat2;
  let x_3340 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3338.x, x_3338.y, x_3338.z), vec3<f32>(x_3340.x, x_3340.y, x_3340.z));
  let x_3345 : f32 = u_xlat2.x;
  let x_3347 : f32 = x_253.x_MainLightShadowParams.z;
  let x_3350 : f32 = x_253.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3345 * x_3347) + x_3350);
  let x_3354 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3354, 0.0f, 1.0f);
  let x_3359 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3359) + 1.0f);
  let x_3363 : f32 = u_xlat2.x;
  let x_3364 : f32 = u_xlat24;
  let x_3367 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3363 * x_3364) + x_3367);
  let x_3370 : f32 = u_xlat51;
  let x_3373 : vec4<f32> = x_139.x_MainLightColor;
  let x_3375 : vec3<f32> = (vec3<f32>(x_3370, x_3370, x_3370) * vec3<f32>(x_3373.x, x_3373.y, x_3373.z));
  let x_3376 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3375.x, x_3375.y, x_3375.z, x_3376.w);
  let x_3378 : vec3<f32> = u_xlat22;
  let x_3380 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(-(x_3378), vec3<f32>(x_3380.x, x_3380.y, x_3380.z));
  let x_3383 : f32 = u_xlat68;
  let x_3384 : f32 = u_xlat68;
  u_xlat68 = (x_3383 + x_3384);
  let x_3386 : vec4<f32> = u_xlat4;
  let x_3388 : f32 = u_xlat68;
  let x_3392 : vec3<f32> = u_xlat22;
  let x_3394 : vec3<f32> = ((vec3<f32>(x_3386.x, x_3386.y, x_3386.z) * -(vec3<f32>(x_3388, x_3388, x_3388))) + -(x_3392));
  let x_3395 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3394.x, x_3394.y, x_3394.z, x_3395.w);
  let x_3397 : vec4<f32> = u_xlat4;
  let x_3399 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(vec3<f32>(x_3397.x, x_3397.y, x_3397.z), x_3399);
  let x_3401 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3401, 0.0f, 1.0f);
  let x_3403 : f32 = u_xlat68;
  u_xlat68 = (-(x_3403) + 1.0f);
  let x_3406 : f32 = u_xlat68;
  let x_3407 : f32 = u_xlat68;
  u_xlat68 = (x_3406 * x_3407);
  let x_3409 : f32 = u_xlat68;
  let x_3410 : f32 = u_xlat68;
  u_xlat68 = (x_3409 * x_3410);
  let x_3412 : f32 = u_xlat69;
  u_xlat3.x = ((-(x_3412) * 0.699999988f) + 1.700000048f);
  let x_3420 : f32 = u_xlat3.x;
  let x_3421 : f32 = u_xlat69;
  u_xlat3.x = (x_3420 * x_3421);
  let x_3425 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3425 * 6.0f);
  let x_3437 : vec4<f32> = u_xlat8;
  let x_3440 : f32 = u_xlat3.x;
  let x_3441 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3437.x, x_3437.y, x_3437.z), x_3440);
  u_xlat8 = x_3441;
  let x_3443 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3443 + -1.0f);
  let x_3447 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3449 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3447 * x_3449) + 1.0f);
  let x_3454 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3454, 0.0f);
  let x_3458 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3458);
  let x_3462 : f32 = u_xlat3.x;
  let x_3464 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3462 * x_3464);
  let x_3468 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3468);
  let x_3472 : f32 = u_xlat3.x;
  let x_3474 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3472 * x_3474);
  let x_3477 : vec4<f32> = u_xlat8;
  let x_3479 : vec4<f32> = u_xlat3;
  let x_3481 : vec3<f32> = (vec3<f32>(x_3477.x, x_3477.y, x_3477.z) * vec3<f32>(x_3479.x, x_3479.x, x_3479.x));
  let x_3482 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3481.x, x_3481.y, x_3481.z, x_3482.w);
  let x_3484 : f32 = u_xlat70;
  let x_3486 : f32 = u_xlat70;
  let x_3490 : vec2<f32> = ((vec2<f32>(x_3484, x_3484) * vec2<f32>(x_3486, x_3486)) + vec2<f32>(-1.0f, 1.0f));
  let x_3491 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3490.x, x_3491.y, x_3491.z, x_3490.y);
  let x_3494 : f32 = u_xlat3.w;
  u_xlat69 = (1.0f / x_3494);
  let x_3497 : f32 = u_xlat6.x;
  u_xlat70 = (x_3497 + -0.039999999f);
  let x_3500 : f32 = u_xlat68;
  let x_3501 : f32 = u_xlat70;
  u_xlat68 = ((x_3500 * x_3501) + 0.039999999f);
  let x_3505 : f32 = u_xlat68;
  let x_3506 : f32 = u_xlat69;
  u_xlat68 = (x_3505 * x_3506);
  let x_3508 : f32 = u_xlat68;
  let x_3510 : vec4<f32> = u_xlat8;
  let x_3512 : vec3<f32> = (vec3<f32>(x_3508, x_3508, x_3508) * vec3<f32>(x_3510.x, x_3510.y, x_3510.z));
  let x_3513 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3512.x, x_3512.y, x_3512.z, x_3513.w);
  let x_3515 : vec3<f32> = u_xlat28;
  let x_3516 : vec3<f32> = u_xlat5;
  let x_3518 : vec4<f32> = u_xlat8;
  let x_3520 : vec3<f32> = ((x_3515 * x_3516) + vec3<f32>(x_3518.x, x_3518.y, x_3518.z));
  let x_3521 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3520.x, x_3520.y, x_3520.z, x_3521.w);
  let x_3524 : f32 = u_xlat0.x;
  let x_3526 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3524 * x_3526);
  let x_3529 : vec4<f32> = u_xlat4;
  let x_3532 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat68 = dot(vec3<f32>(x_3529.x, x_3529.y, x_3529.z), vec3<f32>(x_3532.x, x_3532.y, x_3532.z));
  let x_3535 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3535, 0.0f, 1.0f);
  let x_3538 : f32 = u_xlat0.x;
  let x_3539 : f32 = u_xlat68;
  u_xlat0.x = (x_3538 * x_3539);
  let x_3542 : vec3<f32> = u_xlat0;
  let x_3544 : vec4<f32> = u_xlat2;
  let x_3546 : vec3<f32> = (vec3<f32>(x_3542.x, x_3542.x, x_3542.x) * vec3<f32>(x_3544.x, x_3544.y, x_3544.z));
  let x_3547 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3546.x, x_3546.y, x_3546.z, x_3547.w);
  let x_3549 : vec3<f32> = u_xlat22;
  let x_3551 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3553 : vec3<f32> = (x_3549 + vec3<f32>(x_3551.x, x_3551.y, x_3551.z));
  let x_3554 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3553.x, x_3553.y, x_3553.z, x_3554.w);
  let x_3556 : vec4<f32> = u_xlat8;
  let x_3558 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3556.x, x_3556.y, x_3556.z), vec3<f32>(x_3558.x, x_3558.y, x_3558.z));
  let x_3563 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3563, 1.17549435e-37f);
  let x_3567 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3567);
  let x_3570 : vec3<f32> = u_xlat0;
  let x_3572 : vec4<f32> = u_xlat8;
  let x_3574 : vec3<f32> = (vec3<f32>(x_3570.x, x_3570.x, x_3570.x) * vec3<f32>(x_3572.x, x_3572.y, x_3572.z));
  let x_3575 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3574.x, x_3574.y, x_3574.z, x_3575.w);
  let x_3577 : vec4<f32> = u_xlat4;
  let x_3579 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3577.x, x_3577.y, x_3577.z), vec3<f32>(x_3579.x, x_3579.y, x_3579.z));
  let x_3584 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3584, 0.0f, 1.0f);
  let x_3588 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3590 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3588.x, x_3588.y, x_3588.z), vec3<f32>(x_3590.x, x_3590.y, x_3590.z));
  let x_3593 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3593, 0.0f, 1.0f);
  let x_3596 : f32 = u_xlat0.x;
  let x_3598 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3596 * x_3598);
  let x_3602 : f32 = u_xlat0.x;
  let x_3604 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3602 * x_3604) + 1.000010014f);
  let x_3609 : f32 = u_xlat68;
  let x_3610 : f32 = u_xlat68;
  u_xlat68 = (x_3609 * x_3610);
  let x_3613 : f32 = u_xlat0.x;
  let x_3615 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3613 * x_3615);
  let x_3618 : f32 = u_xlat68;
  u_xlat68 = max(x_3618, 0.100000001f);
  let x_3622 : f32 = u_xlat0.x;
  let x_3623 : f32 = u_xlat68;
  u_xlat0.x = (x_3622 * x_3623);
  let x_3627 : f32 = u_xlat29.x;
  let x_3629 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3627 * x_3629);
  let x_3632 : f32 = u_xlat71;
  let x_3634 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3632 / x_3634);
  let x_3637 : vec3<f32> = u_xlat0;
  let x_3641 : vec3<f32> = u_xlat5;
  let x_3642 : vec3<f32> = ((vec3<f32>(x_3637.x, x_3637.x, x_3637.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3641);
  let x_3643 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3642.x, x_3642.y, x_3642.z, x_3643.w);
  let x_3645 : vec4<f32> = u_xlat2;
  let x_3647 : vec4<f32> = u_xlat8;
  let x_3649 : vec3<f32> = (vec3<f32>(x_3645.x, x_3645.y, x_3645.z) * vec3<f32>(x_3647.x, x_3647.y, x_3647.z));
  let x_3650 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3649.x, x_3649.y, x_3649.z, x_3650.w);
  let x_3653 : f32 = x_139.x_AdditionalLightsCount.x;
  let x_3655 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3653, x_3655);
  let x_3659 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3659));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3671 : u32 = u_xlatu_loop_1;
    let x_3672 : u32 = u_xlatu0;
    if ((x_3671 < x_3672)) {
    } else {
      break;
    }
    let x_3675 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_3675 >> 2u);
    let x_3678 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3678 & 3u));
    let x_3681 : u32 = u_xlatu69;
    let x_3684 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3681)];
    let x_3694 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3699 : vec4<u32> = indexable[x_3694];
    u_xlat69 = dot(x_3684, bitcast<vec4<f32>>(x_3699));
    let x_3703 : f32 = u_xlat69;
    u_xlati69 = i32(x_3703);
    let x_3705 : vec3<f32> = vs_INTERP0;
    let x_3717 : i32 = u_xlati69;
    let x_3719 : vec4<f32> = x_3716.x_AdditionalLightsPosition[x_3717];
    let x_3722 : i32 = u_xlati69;
    let x_3724 : vec4<f32> = x_3716.x_AdditionalLightsPosition[x_3722];
    let x_3726 : vec3<f32> = ((-(x_3705) * vec3<f32>(x_3719.w, x_3719.w, x_3719.w)) + vec3<f32>(x_3724.x, x_3724.y, x_3724.z));
    let x_3727 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3726.x, x_3726.y, x_3726.z, x_3727.w);
    let x_3729 : vec4<f32> = u_xlat9;
    let x_3731 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3729.x, x_3729.y, x_3729.z), vec3<f32>(x_3731.x, x_3731.y, x_3731.z));
    let x_3734 : f32 = u_xlat70;
    u_xlat70 = max(x_3734, 6.10351562e-05f);
    let x_3738 : f32 = u_xlat70;
    u_xlat72 = inverseSqrt(x_3738);
    let x_3740 : f32 = u_xlat72;
    let x_3742 : vec4<f32> = u_xlat9;
    let x_3744 : vec3<f32> = (vec3<f32>(x_3740, x_3740, x_3740) * vec3<f32>(x_3742.x, x_3742.y, x_3742.z));
    let x_3745 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3744.x, x_3744.y, x_3744.z, x_3745.w);
    let x_3747 : f32 = u_xlat70;
    u_xlat73 = (1.0f / x_3747);
    let x_3749 : f32 = u_xlat70;
    let x_3750 : i32 = u_xlati69;
    let x_3752 : f32 = x_3716.x_AdditionalLightsAttenuation[x_3750].x;
    u_xlat70 = (x_3749 * x_3752);
    let x_3754 : f32 = u_xlat70;
    let x_3756 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3754) * x_3756) + 1.0f);
    let x_3759 : f32 = u_xlat70;
    u_xlat70 = max(x_3759, 0.0f);
    let x_3761 : f32 = u_xlat70;
    let x_3762 : f32 = u_xlat70;
    u_xlat70 = (x_3761 * x_3762);
    let x_3764 : f32 = u_xlat70;
    let x_3765 : f32 = u_xlat73;
    u_xlat70 = (x_3764 * x_3765);
    let x_3767 : i32 = u_xlati69;
    let x_3769 : vec4<f32> = x_3716.x_AdditionalLightsSpotDir[x_3767];
    let x_3771 : vec4<f32> = u_xlat10;
    u_xlat73 = dot(vec3<f32>(x_3769.x, x_3769.y, x_3769.z), vec3<f32>(x_3771.x, x_3771.y, x_3771.z));
    let x_3774 : f32 = u_xlat73;
    let x_3775 : i32 = u_xlati69;
    let x_3777 : f32 = x_3716.x_AdditionalLightsAttenuation[x_3775].z;
    let x_3779 : i32 = u_xlati69;
    let x_3781 : f32 = x_3716.x_AdditionalLightsAttenuation[x_3779].w;
    u_xlat73 = ((x_3774 * x_3777) + x_3781);
    let x_3783 : f32 = u_xlat73;
    u_xlat73 = clamp(x_3783, 0.0f, 1.0f);
    let x_3785 : f32 = u_xlat73;
    let x_3786 : f32 = u_xlat73;
    u_xlat73 = (x_3785 * x_3786);
    let x_3788 : f32 = u_xlat70;
    let x_3789 : f32 = u_xlat73;
    u_xlat70 = (x_3788 * x_3789);
    let x_3791 : f32 = u_xlat51;
    let x_3793 : i32 = u_xlati69;
    let x_3795 : vec4<f32> = x_3716.x_AdditionalLightsColor[x_3793];
    let x_3797 : vec3<f32> = (vec3<f32>(x_3791, x_3791, x_3791) * vec3<f32>(x_3795.x, x_3795.y, x_3795.z));
    let x_3798 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3797.x, x_3797.y, x_3797.z, x_3798.w);
    let x_3800 : vec4<f32> = u_xlat4;
    let x_3802 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3800.x, x_3800.y, x_3800.z), vec3<f32>(x_3802.x, x_3802.y, x_3802.z));
    let x_3805 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3805, 0.0f, 1.0f);
    let x_3807 : f32 = u_xlat69;
    let x_3808 : f32 = u_xlat70;
    u_xlat69 = (x_3807 * x_3808);
    let x_3810 : f32 = u_xlat69;
    let x_3812 : vec4<f32> = u_xlat11;
    let x_3814 : vec3<f32> = (vec3<f32>(x_3810, x_3810, x_3810) * vec3<f32>(x_3812.x, x_3812.y, x_3812.z));
    let x_3815 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3814.x, x_3814.y, x_3814.z, x_3815.w);
    let x_3817 : vec4<f32> = u_xlat9;
    let x_3819 : f32 = u_xlat72;
    let x_3822 : vec3<f32> = u_xlat22;
    let x_3823 : vec3<f32> = ((vec3<f32>(x_3817.x, x_3817.y, x_3817.z) * vec3<f32>(x_3819, x_3819, x_3819)) + x_3822);
    let x_3824 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3823.x, x_3823.y, x_3823.z, x_3824.w);
    let x_3826 : vec4<f32> = u_xlat9;
    let x_3828 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3826.x, x_3826.y, x_3826.z), vec3<f32>(x_3828.x, x_3828.y, x_3828.z));
    let x_3831 : f32 = u_xlat69;
    u_xlat69 = max(x_3831, 1.17549435e-37f);
    let x_3833 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_3833);
    let x_3835 : f32 = u_xlat69;
    let x_3837 : vec4<f32> = u_xlat9;
    let x_3839 : vec3<f32> = (vec3<f32>(x_3835, x_3835, x_3835) * vec3<f32>(x_3837.x, x_3837.y, x_3837.z));
    let x_3840 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3839.x, x_3839.y, x_3839.z, x_3840.w);
    let x_3842 : vec4<f32> = u_xlat4;
    let x_3844 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3842.x, x_3842.y, x_3842.z), vec3<f32>(x_3844.x, x_3844.y, x_3844.z));
    let x_3847 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3847, 0.0f, 1.0f);
    let x_3849 : vec4<f32> = u_xlat10;
    let x_3851 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3849.x, x_3849.y, x_3849.z), vec3<f32>(x_3851.x, x_3851.y, x_3851.z));
    let x_3854 : f32 = u_xlat70;
    u_xlat70 = clamp(x_3854, 0.0f, 1.0f);
    let x_3856 : f32 = u_xlat69;
    let x_3857 : f32 = u_xlat69;
    u_xlat69 = (x_3856 * x_3857);
    let x_3859 : f32 = u_xlat69;
    let x_3861 : f32 = u_xlat3.x;
    u_xlat69 = ((x_3859 * x_3861) + 1.000010014f);
    let x_3864 : f32 = u_xlat70;
    let x_3865 : f32 = u_xlat70;
    u_xlat70 = (x_3864 * x_3865);
    let x_3867 : f32 = u_xlat69;
    let x_3868 : f32 = u_xlat69;
    u_xlat69 = (x_3867 * x_3868);
    let x_3870 : f32 = u_xlat70;
    u_xlat70 = max(x_3870, 0.100000001f);
    let x_3872 : f32 = u_xlat69;
    let x_3873 : f32 = u_xlat70;
    u_xlat69 = (x_3872 * x_3873);
    let x_3876 : f32 = u_xlat29.x;
    let x_3877 : f32 = u_xlat69;
    u_xlat69 = (x_3876 * x_3877);
    let x_3879 : f32 = u_xlat71;
    let x_3880 : f32 = u_xlat69;
    u_xlat69 = (x_3879 / x_3880);
    let x_3882 : f32 = u_xlat69;
    let x_3885 : vec3<f32> = u_xlat5;
    let x_3886 : vec3<f32> = ((vec3<f32>(x_3882, x_3882, x_3882) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3885);
    let x_3887 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3886.x, x_3886.y, x_3886.z, x_3887.w);
    let x_3889 : vec4<f32> = u_xlat9;
    let x_3891 : vec4<f32> = u_xlat11;
    let x_3894 : vec4<f32> = u_xlat8;
    let x_3896 : vec3<f32> = ((vec3<f32>(x_3889.x, x_3889.y, x_3889.z) * vec3<f32>(x_3891.x, x_3891.y, x_3891.z)) + vec3<f32>(x_3894.x, x_3894.y, x_3894.z));
    let x_3897 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3896.x, x_3896.y, x_3896.z, x_3897.w);

    continuing {
      let x_3899 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3899 + bitcast<u32>(1i));
    }
  }
  let x_3901 : vec4<f32> = u_xlat6;
  let x_3903 : vec4<f32> = u_xlat7;
  let x_3906 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3901.x, x_3901.y, x_3901.z) * vec3<f32>(x_3903.x, x_3903.x, x_3903.x)) + vec3<f32>(x_3906.x, x_3906.y, x_3906.z));
  let x_3909 : vec4<f32> = u_xlat8;
  let x_3911 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3909.x, x_3909.y, x_3909.z) + x_3911);
  let x_3913 : vec4<f32> = vs_INTERP4;
  let x_3915 : vec3<f32> = u_xlat1;
  let x_3917 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_3913.w, x_3913.w, x_3913.w) * x_3915) + x_3917);
  let x_3920 : f32 = u_xlat25;
  let x_3921 : f32 = u_xlat25;
  u_xlat66 = (x_3920 * -(x_3921));
  let x_3924 : f32 = u_xlat66;
  u_xlat66 = exp2(x_3924);
  let x_3926 : vec3<f32> = u_xlat0;
  let x_3929 : vec4<f32> = x_139.unity_FogColor;
  u_xlat0 = (x_3926 + -(vec3<f32>(x_3929.x, x_3929.y, x_3929.z)));
  let x_3935 : f32 = u_xlat66;
  let x_3937 : vec3<f32> = u_xlat0;
  let x_3940 : vec4<f32> = x_139.unity_FogColor;
  let x_3942 : vec3<f32> = ((vec3<f32>(x_3935, x_3935, x_3935) * x_3937) + vec3<f32>(x_3940.x, x_3940.y, x_3940.z));
  let x_3943 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3942.x, x_3942.y, x_3942.z, x_3943.w);
  let x_3945 : bool = u_xlatb47;
  let x_3946 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_3946, x_3945);
  let x_3952 : u32 = x_139.x_RenderingLayerMaxInt;
  let x_3954 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_3952 & bitcast<u32>(x_3954));
  let x_3957 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3957);
  let x_3962 : f32 = u_xlat0.x;
  let x_3964 : f32 = x_139.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3962 * x_3964);
  let x_3968 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3968, 0.0f, 1.0f);
  let x_3971 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3971.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

