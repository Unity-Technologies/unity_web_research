struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(4) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(5) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_281 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_430 : MainLightShadows;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(7) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2441 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlatb4 : vec3<bool>;
  var u_xlat5 : vec3<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_390 : f32;
  var x_403 : f32;
  var x_414 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb5 : vec4<bool>;
  var u_xlatu21 : u32;
  var u_xlati21 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat63 : f32;
  var u_xlatb66 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb43 : bool;
  var u_xlatb64 : bool;
  var x_2050 : f32;
  var u_xlat64 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu66 : u32;
  var u_xlati68 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati66 : i32;
  var u_xlat69 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  let x_100 : vec3<f32> = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_100.x, x_100.y, x_100.z, x_101.w);
  let x_103 : vec4<f32> = u_xlat3;
  let x_105 : vec4<f32> = u_xlat3;
  let x_107 : vec3<f32> = (vec3<f32>(x_103.x, x_103.y, x_103.z) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_111 : vec3<f32> = u_xlat2;
  u_xlat4 = (-(x_111) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_114 : vec4<f32> = u_xlat3;
  let x_117 : vec3<f32> = u_xlat4;
  let x_119 : vec3<f32> = ((-(vec3<f32>(x_114.x, x_114.y, x_114.z)) * x_117) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_122 : vec4<f32> = u_xlat0;
  let x_124 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_122.x, x_122.y, x_122.z) * x_124);
  let x_126 : vec3<f32> = u_xlat2;
  let x_127 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_126 + x_127);
  let x_135 : vec4<f32> = u_xlat0;
  let x_138 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_135.x, x_135.y, x_135.z, x_135.x));
  u_xlatb4 = vec3<bool>(x_138.x, x_138.y, x_138.z);
  let x_143 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_143);
  let x_148 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_148);
  let x_152 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_152);
  let x_156 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_156);
  let x_160 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_160);
  let x_164 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_164);
  let x_167 : vec4<f32> = u_xlat3;
  let x_169 : vec3<f32> = u_xlat4;
  let x_170 : vec3<f32> = (vec3<f32>(x_167.x, x_167.y, x_167.z) * x_169);
  let x_171 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_170.x, x_170.y, x_170.z, x_171.w);
  let x_173 : vec3<f32> = u_xlat2;
  let x_174 : vec3<f32> = u_xlat5;
  let x_176 : vec4<f32> = u_xlat3;
  u_xlat2 = ((x_173 * x_174) + vec3<f32>(x_176.x, x_176.y, x_176.z));
  let x_179 : vec4<f32> = u_xlat0;
  let x_182 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_179.x, x_179.y, x_179.z)) + x_182);
  let x_184 : f32 = u_xlat43;
  let x_186 : vec3<f32> = u_xlat2;
  let x_188 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_184, x_184, x_184) * x_186) + vec3<f32>(x_188.x, x_188.y, x_188.z));
  let x_192 : f32 = u_xlat0.x;
  u_xlat0.x = (x_192 + -0.150000006f);
  let x_197 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_197);
  let x_201 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_201) + 1.0f);
  let x_205 : vec4<f32> = u_xlat0;
  let x_210 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_205.x, x_205.x, x_205.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_210);
  let x_216 : vec4<f32> = vs_INTERP3;
  let x_219 : f32 = x_44.x_GlobalMipBias.x;
  let x_220 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_216.x, x_216.y), x_219);
  let x_221 : vec3<f32> = vec3<f32>(x_220.x, x_220.y, x_220.w);
  let x_222 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_221.x, x_221.y, x_221.z, x_222.w);
  let x_225 : f32 = u_xlat3.x;
  let x_227 : f32 = u_xlat3.z;
  u_xlat3.x = (x_225 * x_227);
  let x_232 : vec4<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_232.x, x_232.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_240 : vec2<f32> = u_xlat21;
  let x_241 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_240, x_241);
  let x_243 : f32 = u_xlat43;
  u_xlat43 = min(x_243, 1.0f);
  let x_245 : f32 = u_xlat43;
  u_xlat43 = (-(x_245) + 1.0f);
  let x_248 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_248);
  let x_250 : f32 = u_xlat43;
  u_xlat43 = max(x_250, 1.00000002e-16f);
  let x_254 : f32 = u_xlat1.x;
  let x_256 : f32 = u_xlat0.x;
  u_xlat0.x = (x_254 + x_256);
  let x_260 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_260, 0.0f, 1.0f);
  let x_264 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_264, 0.0f);
  let x_268 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_268, 0.850000024f);
  let x_275 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_275);
  let x_283 : f32 = x_281.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_283 >= 0.0f);
  let x_288 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_288);
  let x_292 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_292);
  let x_296 : f32 = u_xlat22.z;
  let x_298 : f32 = u_xlat22.x;
  u_xlat22.x = (x_296 * x_298);
  let x_303 : vec3<f32> = vs_INTERP1;
  let x_305 : vec4<f32> = vs_INTERP2;
  let x_307 : vec3<f32> = (vec3<f32>(x_303.z, x_303.x, x_303.y) * vec3<f32>(x_305.y, x_305.z, x_305.x));
  let x_308 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_310 : vec3<f32> = vs_INTERP1;
  let x_312 : vec4<f32> = vs_INTERP2;
  let x_315 : vec4<f32> = u_xlat3;
  let x_318 : vec3<f32> = ((vec3<f32>(x_310.y, x_310.z, x_310.x) * vec3<f32>(x_312.z, x_312.x, x_312.y)) + -(vec3<f32>(x_315.x, x_315.y, x_315.z)));
  let x_319 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_318.x, x_318.y, x_318.z, x_319.w);
  let x_321 : vec3<f32> = u_xlat22;
  let x_323 : vec4<f32> = u_xlat3;
  let x_325 : vec3<f32> = (vec3<f32>(x_321.x, x_321.x, x_321.x) * vec3<f32>(x_323.x, x_323.y, x_323.z));
  let x_326 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_325.x, x_325.y, x_325.z, x_326.w);
  let x_328 : vec2<f32> = u_xlat21;
  let x_330 : vec4<f32> = u_xlat3;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.y, x_328.y, x_328.y) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec2<f32> = u_xlat21;
  let x_337 : vec4<f32> = vs_INTERP2;
  let x_340 : vec4<f32> = u_xlat3;
  let x_342 : vec3<f32> = ((vec3<f32>(x_335.x, x_335.x, x_335.x) * vec3<f32>(x_337.x, x_337.y, x_337.z)) + vec3<f32>(x_340.x, x_340.y, x_340.z));
  let x_343 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_342.x, x_342.y, x_342.z, x_343.w);
  let x_345 : f32 = u_xlat43;
  let x_347 : vec3<f32> = vs_INTERP1;
  let x_349 : vec4<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_345, x_345, x_345) * x_347) + vec3<f32>(x_349.x, x_349.y, x_349.z));
  let x_352 : vec3<f32> = u_xlat22;
  let x_353 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_352, x_353);
  let x_357 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_357);
  let x_360 : vec2<f32> = u_xlat21;
  let x_362 : vec3<f32> = u_xlat22;
  let x_363 : vec3<f32> = (vec3<f32>(x_360.x, x_360.x, x_360.x) * x_362);
  let x_364 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_363.x, x_363.y, x_363.z, x_364.w);
  let x_369 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_369 == 0.0f);
  let x_372 : vec3<f32> = vs_INTERP0;
  let x_377 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat22 = (-(x_372) + x_377);
  let x_380 : vec3<f32> = u_xlat22;
  let x_381 : vec3<f32> = u_xlat22;
  u_xlat42 = dot(x_380, x_381);
  let x_383 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_383);
  let x_385 : f32 = u_xlat42;
  let x_387 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_385, x_385, x_385) * x_387);
  let x_389 : bool = u_xlatb21;
  if (x_389) {
    let x_394 : f32 = u_xlat22.x;
    x_390 = x_394;
  } else {
    let x_399 : f32 = x_44.unity_MatrixV[0i].z;
    x_390 = x_399;
  }
  let x_400 : f32 = x_390;
  u_xlat4.x = x_400;
  let x_402 : bool = u_xlatb21;
  if (x_402) {
    let x_407 : f32 = u_xlat22.y;
    x_403 = x_407;
  } else {
    let x_410 : f32 = x_44.unity_MatrixV[1i].z;
    x_403 = x_410;
  }
  let x_411 : f32 = x_403;
  u_xlat4.y = x_411;
  let x_413 : bool = u_xlatb21;
  if (x_413) {
    let x_418 : f32 = u_xlat22.z;
    x_414 = x_418;
  } else {
    let x_422 : f32 = x_44.unity_MatrixV[2i].z;
    x_414 = x_422;
  }
  let x_423 : f32 = x_414;
  u_xlat4.z = x_423;
  let x_425 : vec3<f32> = vs_INTERP0;
  let x_432 : vec4<f32> = x_430.x_CascadeShadowSplitSpheres0;
  u_xlat22 = (x_425 + -(vec3<f32>(x_432.x, x_432.y, x_432.z)));
  let x_436 : vec3<f32> = vs_INTERP0;
  let x_438 : vec4<f32> = x_430.x_CascadeShadowSplitSpheres1;
  u_xlat5 = (x_436 + -(vec3<f32>(x_438.x, x_438.y, x_438.z)));
  let x_443 : vec3<f32> = vs_INTERP0;
  let x_445 : vec4<f32> = x_430.x_CascadeShadowSplitSpheres2;
  let x_448 : vec3<f32> = (x_443 + -(vec3<f32>(x_445.x, x_445.y, x_445.z)));
  let x_449 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_448.x, x_448.y, x_448.z, x_449.w);
  let x_452 : vec3<f32> = vs_INTERP0;
  let x_454 : vec4<f32> = x_430.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_452 + -(vec3<f32>(x_454.x, x_454.y, x_454.z)));
  let x_459 : vec3<f32> = u_xlat22;
  let x_460 : vec3<f32> = u_xlat22;
  u_xlat8.x = dot(x_459, x_460);
  let x_463 : vec3<f32> = u_xlat5;
  let x_464 : vec3<f32> = u_xlat5;
  u_xlat8.y = dot(x_463, x_464);
  let x_467 : vec4<f32> = u_xlat6;
  let x_469 : vec4<f32> = u_xlat6;
  u_xlat8.z = dot(vec3<f32>(x_467.x, x_467.y, x_467.z), vec3<f32>(x_469.x, x_469.y, x_469.z));
  let x_473 : vec3<f32> = u_xlat7;
  let x_474 : vec3<f32> = u_xlat7;
  u_xlat8.w = dot(x_473, x_474);
  let x_479 : vec4<f32> = u_xlat8;
  let x_482 : vec4<f32> = x_430.x_CascadeShadowSplitSphereRadii;
  u_xlatb5 = (x_479 < x_482);
  let x_485 : bool = u_xlatb5.x;
  u_xlat6.x = select(0.0f, 1.0f, x_485);
  let x_489 : bool = u_xlatb5.y;
  u_xlat6.y = select(0.0f, 1.0f, x_489);
  let x_493 : bool = u_xlatb5.z;
  u_xlat6.z = select(0.0f, 1.0f, x_493);
  let x_497 : bool = u_xlatb5.w;
  u_xlat6.w = select(0.0f, 1.0f, x_497);
  let x_501 : bool = u_xlatb5.x;
  u_xlat22.x = select(-0.0f, -1.0f, x_501);
  let x_506 : bool = u_xlatb5.y;
  u_xlat22.y = select(-0.0f, -1.0f, x_506);
  let x_510 : bool = u_xlatb5.z;
  u_xlat22.z = select(-0.0f, -1.0f, x_510);
  let x_513 : vec3<f32> = u_xlat22;
  let x_514 : vec4<f32> = u_xlat6;
  u_xlat22 = (x_513 + vec3<f32>(x_514.y, x_514.z, x_514.w));
  let x_517 : vec3<f32> = u_xlat22;
  let x_519 : vec3<f32> = max(x_517, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_520 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_520.x, x_519.x, x_519.y, x_519.z);
  let x_522 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(x_522, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_529 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_529) + 4.0f);
  let x_536 : f32 = u_xlat21.x;
  u_xlatu21 = u32(x_536);
  let x_540 : u32 = u_xlatu21;
  u_xlati21 = (bitcast<i32>(x_540) << bitcast<u32>(2i));
  let x_543 : vec3<f32> = vs_INTERP0;
  let x_545 : i32 = u_xlati21;
  let x_548 : i32 = u_xlati21;
  let x_552 : vec4<f32> = x_430.x_MainLightWorldToShadow[((x_545 + 1i) / 4i)][((x_548 + 1i) % 4i)];
  u_xlat22 = (vec3<f32>(x_543.y, x_543.y, x_543.y) * vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_555 : i32 = u_xlati21;
  let x_557 : i32 = u_xlati21;
  let x_560 : vec4<f32> = x_430.x_MainLightWorldToShadow[(x_555 / 4i)][(x_557 % 4i)];
  let x_562 : vec3<f32> = vs_INTERP0;
  let x_565 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_560.x, x_560.y, x_560.z) * vec3<f32>(x_562.x, x_562.x, x_562.x)) + x_565);
  let x_567 : i32 = u_xlati21;
  let x_570 : i32 = u_xlati21;
  let x_574 : vec4<f32> = x_430.x_MainLightWorldToShadow[((x_567 + 2i) / 4i)][((x_570 + 2i) % 4i)];
  let x_576 : vec3<f32> = vs_INTERP0;
  let x_579 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_574.x, x_574.y, x_574.z) * vec3<f32>(x_576.z, x_576.z, x_576.z)) + x_579);
  let x_581 : vec3<f32> = u_xlat22;
  let x_582 : i32 = u_xlati21;
  let x_585 : i32 = u_xlati21;
  let x_589 : vec4<f32> = x_430.x_MainLightWorldToShadow[((x_582 + 3i) / 4i)][((x_585 + 3i) % 4i)];
  u_xlat22 = (x_581 + vec3<f32>(x_589.x, x_589.y, x_589.z));
  u_xlat3.w = 1.0f;
  let x_595 : vec4<f32> = x_281.unity_SHAr;
  let x_596 : vec4<f32> = u_xlat3;
  u_xlat5.x = dot(x_595, x_596);
  let x_601 : vec4<f32> = x_281.unity_SHAg;
  let x_602 : vec4<f32> = u_xlat3;
  u_xlat5.y = dot(x_601, x_602);
  let x_607 : vec4<f32> = x_281.unity_SHAb;
  let x_608 : vec4<f32> = u_xlat3;
  u_xlat5.z = dot(x_607, x_608);
  let x_611 : vec4<f32> = u_xlat3;
  let x_613 : vec4<f32> = u_xlat3;
  u_xlat6 = (vec4<f32>(x_611.y, x_611.z, x_611.z, x_611.x) * vec4<f32>(x_613.x, x_613.y, x_613.z, x_613.z));
  let x_618 : vec4<f32> = x_281.unity_SHBr;
  let x_619 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_618, x_619);
  let x_624 : vec4<f32> = x_281.unity_SHBg;
  let x_625 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_624, x_625);
  let x_630 : vec4<f32> = x_281.unity_SHBb;
  let x_631 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_630, x_631);
  let x_635 : f32 = u_xlat3.y;
  let x_637 : f32 = u_xlat3.y;
  u_xlat21.x = (x_635 * x_637);
  let x_641 : f32 = u_xlat3.x;
  let x_643 : f32 = u_xlat3.x;
  let x_646 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_641 * x_643) + -(x_646));
  let x_652 : vec4<f32> = x_281.unity_SHC;
  let x_654 : vec2<f32> = u_xlat21;
  let x_657 : vec3<f32> = u_xlat7;
  let x_658 : vec3<f32> = ((vec3<f32>(x_652.x, x_652.y, x_652.z) * vec3<f32>(x_654.x, x_654.x, x_654.x)) + x_657);
  let x_659 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_658.x, x_658.y, x_658.z, x_659.w);
  let x_661 : vec3<f32> = u_xlat5;
  let x_662 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_661 + vec3<f32>(x_662.x, x_662.y, x_662.z));
  let x_665 : vec3<f32> = u_xlat5;
  u_xlat5 = max(x_665, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_669 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_670 : vec2<f32> = vec2<f32>(x_669.x, x_669.y);
  u_xlat21 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_670.x, x_670.y));
  let x_675 : vec2<f32> = u_xlat21;
  let x_676 : vec4<f32> = hlslcc_FragCoord;
  let x_678 : vec2<f32> = (x_675 * vec2<f32>(x_676.x, x_676.y));
  let x_679 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_678.x, x_678.y, x_679.z, x_679.w);
  let x_682 : f32 = u_xlat6.y;
  let x_685 : f32 = x_44.x_ScaleBiasRt.x;
  let x_688 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat21.x = ((x_682 * x_685) + x_688);
  let x_692 : f32 = u_xlat21.x;
  u_xlat6.z = (-(x_692) + 1.0f);
  let x_697 : f32 = u_xlat0.x;
  u_xlat21.x = ((-(x_697) * 0.959999979f) + 0.959999979f);
  let x_704 : f32 = u_xlat21.x;
  u_xlat42 = (-(x_704) + 1.0f);
  let x_707 : vec2<f32> = u_xlat21;
  let x_709 : vec3<f32> = u_xlat2;
  u_xlat7 = (vec3<f32>(x_707.x, x_707.x, x_707.x) * x_709);
  let x_711 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_711 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_715 : vec4<f32> = u_xlat0;
  let x_717 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_715.x, x_715.x, x_715.x) * x_717) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_723 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_723) + 1.0f);
  let x_728 : f32 = u_xlat0.x;
  let x_730 : f32 = u_xlat0.x;
  u_xlat21.x = (x_728 * x_730);
  let x_735 : f32 = u_xlat21.x;
  let x_737 : f32 = u_xlat21.x;
  u_xlat65 = (x_735 * x_737);
  let x_739 : f32 = u_xlat42;
  let x_741 : f32 = u_xlat1.x;
  u_xlat42 = (x_739 + x_741);
  let x_743 : f32 = u_xlat42;
  u_xlat42 = min(x_743, 1.0f);
  let x_746 : f32 = u_xlat21.x;
  u_xlat1.x = ((x_746 * 4.0f) + 2.0f);
  let x_756 : vec4<f32> = u_xlat6;
  let x_759 : f32 = x_44.x_GlobalMipBias.x;
  let x_760 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_756.x, x_756.z), x_759);
  u_xlat66 = x_760.x;
  let x_763 : f32 = u_xlat66;
  u_xlat67 = (x_763 + -1.0f);
  let x_766 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_767 : f32 = u_xlat67;
  u_xlat67 = ((x_766 * x_767) + 1.0f);
  let x_772 : f32 = u_xlat0.w;
  let x_773 : f32 = u_xlat66;
  u_xlat63 = min(x_772, x_773);
  let x_777 : f32 = x_430.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_777);
  let x_779 : bool = u_xlatb66;
  if (x_779) {
    let x_783 : f32 = x_430.x_MainLightShadowParams.y;
    u_xlatb66 = (x_783 == 1.0f);
    let x_785 : bool = u_xlatb66;
    if (x_785) {
      let x_788 : vec3<f32> = u_xlat22;
      let x_792 : vec4<f32> = x_430.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y) + x_792);
      let x_795 : vec4<f32> = u_xlat6;
      let x_796 : vec2<f32> = vec2<f32>(x_795.x, x_795.y);
      let x_798 : f32 = u_xlat22.z;
      txVec0 = vec3<f32>(x_796.x, x_796.y, x_798);
      let x_810 : vec3<f32> = txVec0;
      let x_812 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_810.xy, x_810.z);
      u_xlat8.x = x_812;
      let x_815 : vec4<f32> = u_xlat6;
      let x_816 : vec2<f32> = vec2<f32>(x_815.z, x_815.w);
      let x_818 : f32 = u_xlat22.z;
      txVec1 = vec3<f32>(x_816.x, x_816.y, x_818);
      let x_825 : vec3<f32> = txVec1;
      let x_827 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_825.xy, x_825.z);
      u_xlat8.y = x_827;
      let x_829 : vec3<f32> = u_xlat22;
      let x_833 : vec4<f32> = x_430.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_829.x, x_829.y, x_829.x, x_829.y) + x_833);
      let x_836 : vec4<f32> = u_xlat6;
      let x_837 : vec2<f32> = vec2<f32>(x_836.x, x_836.y);
      let x_839 : f32 = u_xlat22.z;
      txVec2 = vec3<f32>(x_837.x, x_837.y, x_839);
      let x_846 : vec3<f32> = txVec2;
      let x_848 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_846.xy, x_846.z);
      u_xlat8.z = x_848;
      let x_851 : vec4<f32> = u_xlat6;
      let x_852 : vec2<f32> = vec2<f32>(x_851.z, x_851.w);
      let x_854 : f32 = u_xlat22.z;
      txVec3 = vec3<f32>(x_852.x, x_852.y, x_854);
      let x_861 : vec3<f32> = txVec3;
      let x_863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_861.xy, x_861.z);
      u_xlat8.w = x_863;
      let x_865 : vec4<f32> = u_xlat8;
      u_xlat66 = dot(x_865, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_872 : f32 = x_430.x_MainLightShadowParams.y;
      u_xlatb68 = (x_872 == 2.0f);
      let x_874 : bool = u_xlatb68;
      if (x_874) {
        let x_877 : vec3<f32> = u_xlat22;
        let x_880 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_884 : vec2<f32> = ((vec2<f32>(x_877.x, x_877.y) * vec2<f32>(x_880.z, x_880.w)) + vec2<f32>(0.5f, 0.5f));
        let x_885 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_884.x, x_884.y, x_885.z, x_885.w);
        let x_887 : vec4<f32> = u_xlat6;
        let x_889 : vec2<f32> = floor(vec2<f32>(x_887.x, x_887.y));
        let x_890 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_889.x, x_889.y, x_890.z, x_890.w);
        let x_893 : vec3<f32> = u_xlat22;
        let x_896 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_899 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_893.x, x_893.y) * vec2<f32>(x_896.z, x_896.w)) + -(vec2<f32>(x_899.x, x_899.y)));
        let x_903 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_903.x, x_903.x, x_903.y, x_903.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_908 : vec4<f32> = u_xlat8;
        let x_910 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_908.x, x_908.x, x_908.z, x_908.z) * vec4<f32>(x_910.x, x_910.x, x_910.z, x_910.z));
        let x_913 : vec4<f32> = u_xlat9;
        let x_917 : vec2<f32> = (vec2<f32>(x_913.y, x_913.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_918 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_917.x, x_918.y, x_917.y, x_918.w);
        let x_920 : vec4<f32> = u_xlat9;
        let x_923 : vec2<f32> = u_xlat48;
        let x_925 : vec2<f32> = ((vec2<f32>(x_920.x, x_920.z) * vec2<f32>(0.5f, 0.5f)) + -(x_923));
        let x_926 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_925.x, x_925.y, x_926.z, x_926.w);
        let x_929 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_929) + vec2<f32>(1.0f, 1.0f));
        let x_933 : vec2<f32> = u_xlat48;
        let x_935 : vec2<f32> = min(x_933, vec2<f32>(0.0f, 0.0f));
        let x_936 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_935.x, x_935.y, x_936.z, x_936.w);
        let x_938 : vec4<f32> = u_xlat10;
        let x_941 : vec4<f32> = u_xlat10;
        let x_944 : vec2<f32> = u_xlat51;
        let x_945 : vec2<f32> = ((-(vec2<f32>(x_938.x, x_938.y)) * vec2<f32>(x_941.x, x_941.y)) + x_944);
        let x_946 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_945.x, x_945.y, x_946.z, x_946.w);
        let x_948 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_948, vec2<f32>(0.0f, 0.0f));
        let x_950 : vec2<f32> = u_xlat48;
        let x_952 : vec2<f32> = u_xlat48;
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_950) * x_952) + vec2<f32>(x_954.y, x_954.w));
        let x_957 : vec4<f32> = u_xlat10;
        let x_959 : vec2<f32> = (vec2<f32>(x_957.x, x_957.y) + vec2<f32>(1.0f, 1.0f));
        let x_960 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_959.x, x_959.y, x_960.z, x_960.w);
        let x_962 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_962 + vec2<f32>(1.0f, 1.0f));
        let x_965 : vec4<f32> = u_xlat9;
        let x_969 : vec2<f32> = (vec2<f32>(x_965.x, x_965.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_970 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_969.x, x_969.y, x_970.z, x_970.w);
        let x_972 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = (x_972 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_974 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_973.x, x_973.y, x_974.z, x_974.w);
        let x_976 : vec4<f32> = u_xlat10;
        let x_978 : vec2<f32> = (vec2<f32>(x_976.x, x_976.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_979 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_978.x, x_978.y, x_979.z, x_979.w);
        let x_982 : vec2<f32> = u_xlat48;
        let x_983 : vec2<f32> = (x_982 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_984 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_983.x, x_983.y, x_984.z, x_984.w);
        let x_986 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_986.y, x_986.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_990 : f32 = u_xlat10.x;
        u_xlat11.z = x_990;
        let x_993 : f32 = u_xlat48.x;
        u_xlat11.w = x_993;
        let x_996 : f32 = u_xlat12.x;
        u_xlat9.z = x_996;
        let x_999 : f32 = u_xlat8.x;
        u_xlat9.w = x_999;
        let x_1002 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1002.z, x_1002.w, x_1002.x, x_1002.z) + vec4<f32>(x_1004.z, x_1004.w, x_1004.x, x_1004.z));
        let x_1008 : f32 = u_xlat11.y;
        u_xlat10.z = x_1008;
        let x_1011 : f32 = u_xlat48.y;
        u_xlat10.w = x_1011;
        let x_1014 : f32 = u_xlat9.y;
        u_xlat12.z = x_1014;
        let x_1017 : f32 = u_xlat8.z;
        u_xlat12.w = x_1017;
        let x_1019 : vec4<f32> = u_xlat10;
        let x_1021 : vec4<f32> = u_xlat12;
        let x_1023 : vec3<f32> = (vec3<f32>(x_1019.z, x_1019.y, x_1019.w) + vec3<f32>(x_1021.z, x_1021.y, x_1021.w));
        let x_1024 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1023.x, x_1023.y, x_1023.z, x_1024.w);
        let x_1026 : vec4<f32> = u_xlat9;
        let x_1028 : vec4<f32> = u_xlat13;
        let x_1030 : vec3<f32> = (vec3<f32>(x_1026.x, x_1026.z, x_1026.w) / vec3<f32>(x_1028.z, x_1028.w, x_1028.y));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1030.x, x_1030.y, x_1030.z, x_1031.w);
        let x_1033 : vec4<f32> = u_xlat9;
        let x_1039 : vec3<f32> = (vec3<f32>(x_1033.x, x_1033.y, x_1033.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1040 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1040.w);
        let x_1042 : vec4<f32> = u_xlat12;
        let x_1044 : vec4<f32> = u_xlat8;
        let x_1046 : vec3<f32> = (vec3<f32>(x_1042.z, x_1042.y, x_1042.w) / vec3<f32>(x_1044.x, x_1044.y, x_1044.z));
        let x_1047 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1046.x, x_1046.y, x_1046.z, x_1047.w);
        let x_1049 : vec4<f32> = u_xlat10;
        let x_1051 : vec3<f32> = (vec3<f32>(x_1049.x, x_1049.y, x_1049.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1052 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1052.w);
        let x_1054 : vec4<f32> = u_xlat9;
        let x_1057 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1059 : vec3<f32> = (vec3<f32>(x_1054.y, x_1054.x, x_1054.z) * vec3<f32>(x_1057.x, x_1057.x, x_1057.x));
        let x_1060 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1059.x, x_1059.y, x_1059.z, x_1060.w);
        let x_1062 : vec4<f32> = u_xlat10;
        let x_1065 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1067 : vec3<f32> = (vec3<f32>(x_1062.x, x_1062.y, x_1062.z) * vec3<f32>(x_1065.y, x_1065.y, x_1065.y));
        let x_1068 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1067.x, x_1067.y, x_1067.z, x_1068.w);
        let x_1071 : f32 = u_xlat10.x;
        u_xlat9.w = x_1071;
        let x_1073 : vec4<f32> = u_xlat6;
        let x_1076 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1073.x, x_1073.y, x_1073.x, x_1073.y) * vec4<f32>(x_1076.x, x_1076.y, x_1076.x, x_1076.y)) + vec4<f32>(x_1079.y, x_1079.w, x_1079.x, x_1079.w));
        let x_1082 : vec4<f32> = u_xlat6;
        let x_1085 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1088 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1082.x, x_1082.y) * vec2<f32>(x_1085.x, x_1085.y)) + vec2<f32>(x_1088.z, x_1088.w));
        let x_1092 : f32 = u_xlat9.y;
        u_xlat10.w = x_1092;
        let x_1094 : vec4<f32> = u_xlat10;
        let x_1095 : vec2<f32> = vec2<f32>(x_1094.y, x_1094.z);
        let x_1096 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1096.x, x_1095.x, x_1096.z, x_1095.y);
        let x_1098 : vec4<f32> = u_xlat6;
        let x_1101 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1098.x, x_1098.y, x_1098.x, x_1098.y) * vec4<f32>(x_1101.x, x_1101.y, x_1101.x, x_1101.y)) + vec4<f32>(x_1104.x, x_1104.y, x_1104.z, x_1104.y));
        let x_1107 : vec4<f32> = u_xlat6;
        let x_1110 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1113 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1107.x, x_1107.y, x_1107.x, x_1107.y) * vec4<f32>(x_1110.x, x_1110.y, x_1110.x, x_1110.y)) + vec4<f32>(x_1113.w, x_1113.y, x_1113.w, x_1113.z));
        let x_1116 : vec4<f32> = u_xlat6;
        let x_1119 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1116.x, x_1116.y, x_1116.x, x_1116.y) * vec4<f32>(x_1119.x, x_1119.y, x_1119.x, x_1119.y)) + vec4<f32>(x_1122.x, x_1122.w, x_1122.z, x_1122.w));
        let x_1126 : vec4<f32> = u_xlat8;
        let x_1128 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1126.x, x_1126.x, x_1126.x, x_1126.y) * vec4<f32>(x_1128.z, x_1128.w, x_1128.y, x_1128.z));
        let x_1132 : vec4<f32> = u_xlat8;
        let x_1134 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1132.y, x_1132.y, x_1132.z, x_1132.z) * x_1134);
        let x_1138 : f32 = u_xlat8.z;
        let x_1140 : f32 = u_xlat13.y;
        u_xlat68 = (x_1138 * x_1140);
        let x_1143 : vec4<f32> = u_xlat11;
        let x_1144 : vec2<f32> = vec2<f32>(x_1143.x, x_1143.y);
        let x_1146 : f32 = u_xlat22.z;
        txVec4 = vec3<f32>(x_1144.x, x_1144.y, x_1146);
        let x_1153 : vec3<f32> = txVec4;
        let x_1155 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1153.xy, x_1153.z);
        u_xlat6.x = x_1155;
        let x_1158 : vec4<f32> = u_xlat11;
        let x_1159 : vec2<f32> = vec2<f32>(x_1158.z, x_1158.w);
        let x_1161 : f32 = u_xlat22.z;
        txVec5 = vec3<f32>(x_1159.x, x_1159.y, x_1161);
        let x_1169 : vec3<f32> = txVec5;
        let x_1171 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1169.xy, x_1169.z);
        u_xlat27 = x_1171;
        let x_1172 : f32 = u_xlat27;
        let x_1174 : f32 = u_xlat14.y;
        u_xlat27 = (x_1172 * x_1174);
        let x_1177 : f32 = u_xlat14.x;
        let x_1179 : f32 = u_xlat6.x;
        let x_1181 : f32 = u_xlat27;
        u_xlat6.x = ((x_1177 * x_1179) + x_1181);
        let x_1185 : vec2<f32> = u_xlat48;
        let x_1187 : f32 = u_xlat22.z;
        txVec6 = vec3<f32>(x_1185.x, x_1185.y, x_1187);
        let x_1194 : vec3<f32> = txVec6;
        let x_1196 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1194.xy, x_1194.z);
        u_xlat27 = x_1196;
        let x_1198 : f32 = u_xlat14.z;
        let x_1199 : f32 = u_xlat27;
        let x_1202 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1198 * x_1199) + x_1202);
        let x_1206 : vec4<f32> = u_xlat10;
        let x_1207 : vec2<f32> = vec2<f32>(x_1206.x, x_1206.y);
        let x_1209 : f32 = u_xlat22.z;
        txVec7 = vec3<f32>(x_1207.x, x_1207.y, x_1209);
        let x_1216 : vec3<f32> = txVec7;
        let x_1218 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1216.xy, x_1216.z);
        u_xlat27 = x_1218;
        let x_1220 : f32 = u_xlat14.w;
        let x_1221 : f32 = u_xlat27;
        let x_1224 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1220 * x_1221) + x_1224);
        let x_1228 : vec4<f32> = u_xlat12;
        let x_1229 : vec2<f32> = vec2<f32>(x_1228.x, x_1228.y);
        let x_1231 : f32 = u_xlat22.z;
        txVec8 = vec3<f32>(x_1229.x, x_1229.y, x_1231);
        let x_1238 : vec3<f32> = txVec8;
        let x_1240 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1238.xy, x_1238.z);
        u_xlat27 = x_1240;
        let x_1242 : f32 = u_xlat15.x;
        let x_1243 : f32 = u_xlat27;
        let x_1246 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1242 * x_1243) + x_1246);
        let x_1250 : vec4<f32> = u_xlat12;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.z, x_1250.w);
        let x_1253 : f32 = u_xlat22.z;
        txVec9 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec9;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat27 = x_1262;
        let x_1264 : f32 = u_xlat15.y;
        let x_1265 : f32 = u_xlat27;
        let x_1268 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1264 * x_1265) + x_1268);
        let x_1272 : vec4<f32> = u_xlat10;
        let x_1273 : vec2<f32> = vec2<f32>(x_1272.z, x_1272.w);
        let x_1275 : f32 = u_xlat22.z;
        txVec10 = vec3<f32>(x_1273.x, x_1273.y, x_1275);
        let x_1282 : vec3<f32> = txVec10;
        let x_1284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1282.xy, x_1282.z);
        u_xlat27 = x_1284;
        let x_1286 : f32 = u_xlat15.z;
        let x_1287 : f32 = u_xlat27;
        let x_1290 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1286 * x_1287) + x_1290);
        let x_1294 : vec4<f32> = u_xlat9;
        let x_1295 : vec2<f32> = vec2<f32>(x_1294.x, x_1294.y);
        let x_1297 : f32 = u_xlat22.z;
        txVec11 = vec3<f32>(x_1295.x, x_1295.y, x_1297);
        let x_1304 : vec3<f32> = txVec11;
        let x_1306 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1304.xy, x_1304.z);
        u_xlat27 = x_1306;
        let x_1308 : f32 = u_xlat15.w;
        let x_1309 : f32 = u_xlat27;
        let x_1312 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1308 * x_1309) + x_1312);
        let x_1316 : vec4<f32> = u_xlat9;
        let x_1317 : vec2<f32> = vec2<f32>(x_1316.z, x_1316.w);
        let x_1319 : f32 = u_xlat22.z;
        txVec12 = vec3<f32>(x_1317.x, x_1317.y, x_1319);
        let x_1326 : vec3<f32> = txVec12;
        let x_1328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1326.xy, x_1326.z);
        u_xlat27 = x_1328;
        let x_1329 : f32 = u_xlat68;
        let x_1330 : f32 = u_xlat27;
        let x_1333 : f32 = u_xlat6.x;
        u_xlat66 = ((x_1329 * x_1330) + x_1333);
      } else {
        let x_1336 : vec3<f32> = u_xlat22;
        let x_1339 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1342 : vec2<f32> = ((vec2<f32>(x_1336.x, x_1336.y) * vec2<f32>(x_1339.z, x_1339.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1343 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1342.x, x_1342.y, x_1343.z, x_1343.w);
        let x_1345 : vec4<f32> = u_xlat6;
        let x_1347 : vec2<f32> = floor(vec2<f32>(x_1345.x, x_1345.y));
        let x_1348 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1347.x, x_1347.y, x_1348.z, x_1348.w);
        let x_1350 : vec3<f32> = u_xlat22;
        let x_1353 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1356 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1350.x, x_1350.y) * vec2<f32>(x_1353.z, x_1353.w)) + -(vec2<f32>(x_1356.x, x_1356.y)));
        let x_1360 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1360.x, x_1360.x, x_1360.y, x_1360.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1363 : vec4<f32> = u_xlat8;
        let x_1365 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1363.x, x_1363.x, x_1363.z, x_1363.z) * vec4<f32>(x_1365.x, x_1365.x, x_1365.z, x_1365.z));
        let x_1368 : vec4<f32> = u_xlat9;
        let x_1372 : vec2<f32> = (vec2<f32>(x_1368.y, x_1368.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1373 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1373.x, x_1372.x, x_1373.z, x_1372.y);
        let x_1375 : vec4<f32> = u_xlat9;
        let x_1378 : vec2<f32> = u_xlat48;
        let x_1380 : vec2<f32> = ((vec2<f32>(x_1375.x, x_1375.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1378));
        let x_1381 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1380.x, x_1381.y, x_1380.y, x_1381.w);
        let x_1383 : vec2<f32> = u_xlat48;
        let x_1385 : vec2<f32> = (-(x_1383) + vec2<f32>(1.0f, 1.0f));
        let x_1386 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1385.x, x_1385.y, x_1386.z, x_1386.w);
        let x_1388 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1388, vec2<f32>(0.0f, 0.0f));
        let x_1390 : vec2<f32> = u_xlat51;
        let x_1392 : vec2<f32> = u_xlat51;
        let x_1394 : vec4<f32> = u_xlat9;
        let x_1396 : vec2<f32> = ((-(x_1390) * x_1392) + vec2<f32>(x_1394.x, x_1394.y));
        let x_1397 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1396.x, x_1396.y, x_1397.z, x_1397.w);
        let x_1399 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1399, vec2<f32>(0.0f, 0.0f));
        let x_1402 : vec2<f32> = u_xlat51;
        let x_1404 : vec2<f32> = u_xlat51;
        let x_1406 : vec4<f32> = u_xlat8;
        let x_1408 : vec2<f32> = ((-(x_1402) * x_1404) + vec2<f32>(x_1406.y, x_1406.w));
        let x_1409 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1408.x, x_1409.y, x_1408.y);
        let x_1411 : vec4<f32> = u_xlat9;
        let x_1413 : vec2<f32> = (vec2<f32>(x_1411.x, x_1411.y) + vec2<f32>(2.0f, 2.0f));
        let x_1414 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1413.x, x_1413.y, x_1414.z, x_1414.w);
        let x_1416 : vec3<f32> = u_xlat29;
        let x_1418 : vec2<f32> = (vec2<f32>(x_1416.x, x_1416.z) + vec2<f32>(2.0f, 2.0f));
        let x_1419 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1419.x, x_1418.x, x_1419.z, x_1418.y);
        let x_1422 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1422 * 0.081632003f);
        let x_1426 : vec4<f32> = u_xlat8;
        let x_1429 : vec3<f32> = (vec3<f32>(x_1426.z, x_1426.x, x_1426.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1430 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1429.x, x_1429.y, x_1429.z, x_1430.w);
        let x_1432 : vec4<f32> = u_xlat9;
        let x_1435 : vec2<f32> = (vec2<f32>(x_1432.x, x_1432.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1436 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1435.x, x_1435.y, x_1436.z, x_1436.w);
        let x_1439 : f32 = u_xlat12.y;
        u_xlat11.x = x_1439;
        let x_1441 : vec2<f32> = u_xlat48;
        let x_1448 : vec2<f32> = ((vec2<f32>(x_1441.x, x_1441.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1449 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1449.x, x_1448.x, x_1449.z, x_1448.y);
        let x_1451 : vec2<f32> = u_xlat48;
        let x_1455 : vec2<f32> = ((vec2<f32>(x_1451.x, x_1451.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1456 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1455.x, x_1456.y, x_1455.y, x_1456.w);
        let x_1459 : f32 = u_xlat8.x;
        u_xlat9.y = x_1459;
        let x_1462 : f32 = u_xlat10.y;
        u_xlat9.w = x_1462;
        let x_1464 : vec4<f32> = u_xlat9;
        let x_1465 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1464 + x_1465);
        let x_1467 : vec2<f32> = u_xlat48;
        let x_1470 : vec2<f32> = ((vec2<f32>(x_1467.y, x_1467.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1471 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1471.x, x_1470.x, x_1471.z, x_1470.y);
        let x_1473 : vec2<f32> = u_xlat48;
        let x_1476 : vec2<f32> = ((vec2<f32>(x_1473.y, x_1473.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1477 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1476.x, x_1477.y, x_1476.y, x_1477.w);
        let x_1480 : f32 = u_xlat8.y;
        u_xlat10.y = x_1480;
        let x_1482 : vec4<f32> = u_xlat10;
        let x_1483 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1482 + x_1483);
        let x_1485 : vec4<f32> = u_xlat9;
        let x_1486 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1485 / x_1486);
        let x_1488 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1488 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1494 : vec4<f32> = u_xlat10;
        let x_1495 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1494 / x_1495);
        let x_1497 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1497 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1499 : vec4<f32> = u_xlat9;
        let x_1502 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1499.w, x_1499.x, x_1499.y, x_1499.z) * vec4<f32>(x_1502.x, x_1502.x, x_1502.x, x_1502.x));
        let x_1505 : vec4<f32> = u_xlat10;
        let x_1508 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1505.x, x_1505.w, x_1505.y, x_1505.z) * vec4<f32>(x_1508.y, x_1508.y, x_1508.y, x_1508.y));
        let x_1511 : vec4<f32> = u_xlat9;
        let x_1512 : vec3<f32> = vec3<f32>(x_1511.y, x_1511.z, x_1511.w);
        let x_1513 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1512.x, x_1513.y, x_1512.y, x_1512.z);
        let x_1516 : f32 = u_xlat10.x;
        u_xlat12.y = x_1516;
        let x_1518 : vec4<f32> = u_xlat6;
        let x_1521 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1524 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1518.x, x_1518.y, x_1518.x, x_1518.y) * vec4<f32>(x_1521.x, x_1521.y, x_1521.x, x_1521.y)) + vec4<f32>(x_1524.x, x_1524.y, x_1524.z, x_1524.y));
        let x_1527 : vec4<f32> = u_xlat6;
        let x_1530 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1533 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1527.x, x_1527.y) * vec2<f32>(x_1530.x, x_1530.y)) + vec2<f32>(x_1533.w, x_1533.y));
        let x_1537 : f32 = u_xlat12.y;
        u_xlat9.y = x_1537;
        let x_1540 : f32 = u_xlat10.z;
        u_xlat12.y = x_1540;
        let x_1542 : vec4<f32> = u_xlat6;
        let x_1545 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1548 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1542.x, x_1542.y, x_1542.x, x_1542.y) * vec4<f32>(x_1545.x, x_1545.y, x_1545.x, x_1545.y)) + vec4<f32>(x_1548.x, x_1548.y, x_1548.z, x_1548.y));
        let x_1551 : vec4<f32> = u_xlat6;
        let x_1554 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1557 : vec4<f32> = u_xlat12;
        let x_1559 : vec2<f32> = ((vec2<f32>(x_1551.x, x_1551.y) * vec2<f32>(x_1554.x, x_1554.y)) + vec2<f32>(x_1557.w, x_1557.y));
        let x_1560 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1559.x, x_1559.y, x_1560.z, x_1560.w);
        let x_1563 : f32 = u_xlat12.y;
        u_xlat9.z = x_1563;
        let x_1566 : vec4<f32> = u_xlat6;
        let x_1569 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1572 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1566.x, x_1566.y, x_1566.x, x_1566.y) * vec4<f32>(x_1569.x, x_1569.y, x_1569.x, x_1569.y)) + vec4<f32>(x_1572.x, x_1572.y, x_1572.x, x_1572.z));
        let x_1576 : f32 = u_xlat10.w;
        u_xlat12.y = x_1576;
        let x_1579 : vec4<f32> = u_xlat6;
        let x_1582 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1585 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1579.x, x_1579.y, x_1579.x, x_1579.y) * vec4<f32>(x_1582.x, x_1582.y, x_1582.x, x_1582.y)) + vec4<f32>(x_1585.x, x_1585.y, x_1585.z, x_1585.y));
        let x_1589 : vec4<f32> = u_xlat6;
        let x_1592 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1595 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1589.x, x_1589.y) * vec2<f32>(x_1592.x, x_1592.y)) + vec2<f32>(x_1595.w, x_1595.y));
        let x_1599 : f32 = u_xlat12.y;
        u_xlat9.w = x_1599;
        let x_1602 : vec4<f32> = u_xlat6;
        let x_1605 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1608 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1602.x, x_1602.y) * vec2<f32>(x_1605.x, x_1605.y)) + vec2<f32>(x_1608.x, x_1608.w));
        let x_1611 : vec4<f32> = u_xlat12;
        let x_1612 : vec3<f32> = vec3<f32>(x_1611.x, x_1611.z, x_1611.w);
        let x_1613 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1612.x, x_1613.y, x_1612.y, x_1612.z);
        let x_1615 : vec4<f32> = u_xlat6;
        let x_1618 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1621 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1615.x, x_1615.y, x_1615.x, x_1615.y) * vec4<f32>(x_1618.x, x_1618.y, x_1618.x, x_1618.y)) + vec4<f32>(x_1621.x, x_1621.y, x_1621.z, x_1621.y));
        let x_1625 : vec4<f32> = u_xlat6;
        let x_1628 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1631 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1625.x, x_1625.y) * vec2<f32>(x_1628.x, x_1628.y)) + vec2<f32>(x_1631.w, x_1631.y));
        let x_1635 : f32 = u_xlat9.x;
        u_xlat10.x = x_1635;
        let x_1637 : vec4<f32> = u_xlat6;
        let x_1640 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1643 : vec4<f32> = u_xlat10;
        let x_1645 : vec2<f32> = ((vec2<f32>(x_1637.x, x_1637.y) * vec2<f32>(x_1640.x, x_1640.y)) + vec2<f32>(x_1643.x, x_1643.y));
        let x_1646 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1645.x, x_1645.y, x_1646.z, x_1646.w);
        let x_1649 : vec4<f32> = u_xlat8;
        let x_1651 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1649.x, x_1649.x, x_1649.x, x_1649.x) * x_1651);
        let x_1654 : vec4<f32> = u_xlat8;
        let x_1656 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1654.y, x_1654.y, x_1654.y, x_1654.y) * x_1656);
        let x_1659 : vec4<f32> = u_xlat8;
        let x_1661 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1659.z, x_1659.z, x_1659.z, x_1659.z) * x_1661);
        let x_1663 : vec4<f32> = u_xlat8;
        let x_1665 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1663.w, x_1663.w, x_1663.w, x_1663.w) * x_1665);
        let x_1668 : vec4<f32> = u_xlat13;
        let x_1669 : vec2<f32> = vec2<f32>(x_1668.x, x_1668.y);
        let x_1671 : f32 = u_xlat22.z;
        txVec13 = vec3<f32>(x_1669.x, x_1669.y, x_1671);
        let x_1678 : vec3<f32> = txVec13;
        let x_1680 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1678.xy, x_1678.z);
        u_xlat68 = x_1680;
        let x_1682 : vec4<f32> = u_xlat13;
        let x_1683 : vec2<f32> = vec2<f32>(x_1682.z, x_1682.w);
        let x_1685 : f32 = u_xlat22.z;
        txVec14 = vec3<f32>(x_1683.x, x_1683.y, x_1685);
        let x_1693 : vec3<f32> = txVec14;
        let x_1695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1693.xy, x_1693.z);
        u_xlat70 = x_1695;
        let x_1696 : f32 = u_xlat70;
        let x_1698 : f32 = u_xlat18.y;
        u_xlat70 = (x_1696 * x_1698);
        let x_1701 : f32 = u_xlat18.x;
        let x_1702 : f32 = u_xlat68;
        let x_1704 : f32 = u_xlat70;
        u_xlat68 = ((x_1701 * x_1702) + x_1704);
        let x_1707 : vec2<f32> = u_xlat48;
        let x_1709 : f32 = u_xlat22.z;
        txVec15 = vec3<f32>(x_1707.x, x_1707.y, x_1709);
        let x_1716 : vec3<f32> = txVec15;
        let x_1718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1716.xy, x_1716.z);
        u_xlat48.x = x_1718;
        let x_1721 : f32 = u_xlat18.z;
        let x_1723 : f32 = u_xlat48.x;
        let x_1725 : f32 = u_xlat68;
        u_xlat68 = ((x_1721 * x_1723) + x_1725);
        let x_1728 : vec4<f32> = u_xlat16;
        let x_1729 : vec2<f32> = vec2<f32>(x_1728.x, x_1728.y);
        let x_1731 : f32 = u_xlat22.z;
        txVec16 = vec3<f32>(x_1729.x, x_1729.y, x_1731);
        let x_1738 : vec3<f32> = txVec16;
        let x_1740 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1738.xy, x_1738.z);
        u_xlat48.x = x_1740;
        let x_1743 : f32 = u_xlat18.w;
        let x_1745 : f32 = u_xlat48.x;
        let x_1747 : f32 = u_xlat68;
        u_xlat68 = ((x_1743 * x_1745) + x_1747);
        let x_1750 : vec4<f32> = u_xlat14;
        let x_1751 : vec2<f32> = vec2<f32>(x_1750.x, x_1750.y);
        let x_1753 : f32 = u_xlat22.z;
        txVec17 = vec3<f32>(x_1751.x, x_1751.y, x_1753);
        let x_1760 : vec3<f32> = txVec17;
        let x_1762 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1760.xy, x_1760.z);
        u_xlat48.x = x_1762;
        let x_1765 : f32 = u_xlat19.x;
        let x_1767 : f32 = u_xlat48.x;
        let x_1769 : f32 = u_xlat68;
        u_xlat68 = ((x_1765 * x_1767) + x_1769);
        let x_1772 : vec4<f32> = u_xlat14;
        let x_1773 : vec2<f32> = vec2<f32>(x_1772.z, x_1772.w);
        let x_1775 : f32 = u_xlat22.z;
        txVec18 = vec3<f32>(x_1773.x, x_1773.y, x_1775);
        let x_1782 : vec3<f32> = txVec18;
        let x_1784 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1782.xy, x_1782.z);
        u_xlat48.x = x_1784;
        let x_1787 : f32 = u_xlat19.y;
        let x_1789 : f32 = u_xlat48.x;
        let x_1791 : f32 = u_xlat68;
        u_xlat68 = ((x_1787 * x_1789) + x_1791);
        let x_1794 : vec4<f32> = u_xlat15;
        let x_1795 : vec2<f32> = vec2<f32>(x_1794.x, x_1794.y);
        let x_1797 : f32 = u_xlat22.z;
        txVec19 = vec3<f32>(x_1795.x, x_1795.y, x_1797);
        let x_1804 : vec3<f32> = txVec19;
        let x_1806 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1804.xy, x_1804.z);
        u_xlat48.x = x_1806;
        let x_1809 : f32 = u_xlat19.z;
        let x_1811 : f32 = u_xlat48.x;
        let x_1813 : f32 = u_xlat68;
        u_xlat68 = ((x_1809 * x_1811) + x_1813);
        let x_1816 : vec4<f32> = u_xlat16;
        let x_1817 : vec2<f32> = vec2<f32>(x_1816.z, x_1816.w);
        let x_1819 : f32 = u_xlat22.z;
        txVec20 = vec3<f32>(x_1817.x, x_1817.y, x_1819);
        let x_1826 : vec3<f32> = txVec20;
        let x_1828 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1826.xy, x_1826.z);
        u_xlat48.x = x_1828;
        let x_1831 : f32 = u_xlat19.w;
        let x_1833 : f32 = u_xlat48.x;
        let x_1835 : f32 = u_xlat68;
        u_xlat68 = ((x_1831 * x_1833) + x_1835);
        let x_1838 : vec4<f32> = u_xlat17;
        let x_1839 : vec2<f32> = vec2<f32>(x_1838.x, x_1838.y);
        let x_1841 : f32 = u_xlat22.z;
        txVec21 = vec3<f32>(x_1839.x, x_1839.y, x_1841);
        let x_1848 : vec3<f32> = txVec21;
        let x_1850 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1848.xy, x_1848.z);
        u_xlat48.x = x_1850;
        let x_1853 : f32 = u_xlat20.x;
        let x_1855 : f32 = u_xlat48.x;
        let x_1857 : f32 = u_xlat68;
        u_xlat68 = ((x_1853 * x_1855) + x_1857);
        let x_1860 : vec4<f32> = u_xlat17;
        let x_1861 : vec2<f32> = vec2<f32>(x_1860.z, x_1860.w);
        let x_1863 : f32 = u_xlat22.z;
        txVec22 = vec3<f32>(x_1861.x, x_1861.y, x_1863);
        let x_1870 : vec3<f32> = txVec22;
        let x_1872 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1870.xy, x_1870.z);
        u_xlat48.x = x_1872;
        let x_1875 : f32 = u_xlat20.y;
        let x_1877 : f32 = u_xlat48.x;
        let x_1879 : f32 = u_xlat68;
        u_xlat68 = ((x_1875 * x_1877) + x_1879);
        let x_1882 : vec2<f32> = u_xlat30;
        let x_1884 : f32 = u_xlat22.z;
        txVec23 = vec3<f32>(x_1882.x, x_1882.y, x_1884);
        let x_1891 : vec3<f32> = txVec23;
        let x_1893 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1891.xy, x_1891.z);
        u_xlat48.x = x_1893;
        let x_1896 : f32 = u_xlat20.z;
        let x_1898 : f32 = u_xlat48.x;
        let x_1900 : f32 = u_xlat68;
        u_xlat68 = ((x_1896 * x_1898) + x_1900);
        let x_1903 : vec2<f32> = u_xlat57;
        let x_1905 : f32 = u_xlat22.z;
        txVec24 = vec3<f32>(x_1903.x, x_1903.y, x_1905);
        let x_1912 : vec3<f32> = txVec24;
        let x_1914 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1912.xy, x_1912.z);
        u_xlat48.x = x_1914;
        let x_1917 : f32 = u_xlat20.w;
        let x_1919 : f32 = u_xlat48.x;
        let x_1921 : f32 = u_xlat68;
        u_xlat68 = ((x_1917 * x_1919) + x_1921);
        let x_1924 : vec4<f32> = u_xlat12;
        let x_1925 : vec2<f32> = vec2<f32>(x_1924.x, x_1924.y);
        let x_1927 : f32 = u_xlat22.z;
        txVec25 = vec3<f32>(x_1925.x, x_1925.y, x_1927);
        let x_1934 : vec3<f32> = txVec25;
        let x_1936 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1934.xy, x_1934.z);
        u_xlat48.x = x_1936;
        let x_1939 : f32 = u_xlat8.x;
        let x_1941 : f32 = u_xlat48.x;
        let x_1943 : f32 = u_xlat68;
        u_xlat68 = ((x_1939 * x_1941) + x_1943);
        let x_1946 : vec4<f32> = u_xlat12;
        let x_1947 : vec2<f32> = vec2<f32>(x_1946.z, x_1946.w);
        let x_1949 : f32 = u_xlat22.z;
        txVec26 = vec3<f32>(x_1947.x, x_1947.y, x_1949);
        let x_1956 : vec3<f32> = txVec26;
        let x_1958 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1956.xy, x_1956.z);
        u_xlat48.x = x_1958;
        let x_1961 : f32 = u_xlat8.y;
        let x_1963 : f32 = u_xlat48.x;
        let x_1965 : f32 = u_xlat68;
        u_xlat68 = ((x_1961 * x_1963) + x_1965);
        let x_1968 : vec2<f32> = u_xlat52;
        let x_1970 : f32 = u_xlat22.z;
        txVec27 = vec3<f32>(x_1968.x, x_1968.y, x_1970);
        let x_1977 : vec3<f32> = txVec27;
        let x_1979 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1977.xy, x_1977.z);
        u_xlat48.x = x_1979;
        let x_1982 : f32 = u_xlat8.z;
        let x_1984 : f32 = u_xlat48.x;
        let x_1986 : f32 = u_xlat68;
        u_xlat68 = ((x_1982 * x_1984) + x_1986);
        let x_1989 : vec4<f32> = u_xlat6;
        let x_1990 : vec2<f32> = vec2<f32>(x_1989.x, x_1989.y);
        let x_1992 : f32 = u_xlat22.z;
        txVec28 = vec3<f32>(x_1990.x, x_1990.y, x_1992);
        let x_1999 : vec3<f32> = txVec28;
        let x_2001 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1999.xy, x_1999.z);
        u_xlat6.x = x_2001;
        let x_2004 : f32 = u_xlat8.w;
        let x_2006 : f32 = u_xlat6.x;
        let x_2008 : f32 = u_xlat68;
        u_xlat66 = ((x_2004 * x_2006) + x_2008);
      }
    }
  } else {
    let x_2012 : vec3<f32> = u_xlat22;
    let x_2013 : vec2<f32> = vec2<f32>(x_2012.x, x_2012.y);
    let x_2015 : f32 = u_xlat22.z;
    txVec29 = vec3<f32>(x_2013.x, x_2013.y, x_2015);
    let x_2022 : vec3<f32> = txVec29;
    let x_2024 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2022.xy, x_2022.z);
    u_xlat66 = x_2024;
  }
  let x_2026 : f32 = x_430.x_MainLightShadowParams.x;
  u_xlat22.x = (-(x_2026) + 1.0f);
  let x_2030 : f32 = u_xlat66;
  let x_2032 : f32 = x_430.x_MainLightShadowParams.x;
  let x_2035 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2030 * x_2032) + x_2035);
  let x_2040 : f32 = u_xlat22.z;
  u_xlatb43 = (0.0f >= x_2040);
  let x_2044 : f32 = u_xlat22.z;
  u_xlatb64 = (x_2044 >= 1.0f);
  let x_2046 : bool = u_xlatb64;
  let x_2047 : bool = u_xlatb43;
  u_xlatb43 = (x_2046 | x_2047);
  let x_2049 : bool = u_xlatb43;
  if (x_2049) {
    x_2050 = 1.0f;
  } else {
    let x_2055 : f32 = u_xlat22.x;
    x_2050 = x_2055;
  }
  let x_2056 : f32 = x_2050;
  u_xlat22.x = x_2056;
  let x_2058 : vec3<f32> = vs_INTERP0;
  let x_2060 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_2062 : vec3<f32> = (x_2058 + -(x_2060));
  let x_2063 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2062.x, x_2062.y, x_2062.z, x_2063.w);
  let x_2065 : vec4<f32> = u_xlat6;
  let x_2067 : vec4<f32> = u_xlat6;
  u_xlat43 = dot(vec3<f32>(x_2065.x, x_2065.y, x_2065.z), vec3<f32>(x_2067.x, x_2067.y, x_2067.z));
  let x_2070 : f32 = u_xlat43;
  let x_2072 : f32 = x_430.x_MainLightShadowParams.z;
  let x_2075 : f32 = x_430.x_MainLightShadowParams.w;
  u_xlat43 = ((x_2070 * x_2072) + x_2075);
  let x_2077 : f32 = u_xlat43;
  u_xlat43 = clamp(x_2077, 0.0f, 1.0f);
  let x_2081 : f32 = u_xlat22.x;
  u_xlat64 = (-(x_2081) + 1.0f);
  let x_2084 : f32 = u_xlat43;
  let x_2085 : f32 = u_xlat64;
  let x_2088 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2084 * x_2085) + x_2088);
  let x_2091 : f32 = u_xlat67;
  let x_2094 : vec4<f32> = x_44.x_MainLightColor;
  let x_2096 : vec3<f32> = (vec3<f32>(x_2091, x_2091, x_2091) * vec3<f32>(x_2094.x, x_2094.y, x_2094.z));
  let x_2097 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2096.x, x_2096.y, x_2096.z, x_2097.w);
  let x_2099 : vec3<f32> = u_xlat4;
  let x_2101 : vec4<f32> = u_xlat3;
  u_xlat43 = dot(-(x_2099), vec3<f32>(x_2101.x, x_2101.y, x_2101.z));
  let x_2104 : f32 = u_xlat43;
  let x_2105 : f32 = u_xlat43;
  u_xlat43 = (x_2104 + x_2105);
  let x_2107 : vec4<f32> = u_xlat3;
  let x_2109 : f32 = u_xlat43;
  let x_2113 : vec3<f32> = u_xlat4;
  let x_2115 : vec3<f32> = ((vec3<f32>(x_2107.x, x_2107.y, x_2107.z) * -(vec3<f32>(x_2109, x_2109, x_2109))) + -(x_2113));
  let x_2116 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2115.x, x_2115.y, x_2115.z, x_2116.w);
  let x_2118 : vec4<f32> = u_xlat3;
  let x_2120 : vec3<f32> = u_xlat4;
  u_xlat43 = dot(vec3<f32>(x_2118.x, x_2118.y, x_2118.z), x_2120);
  let x_2122 : f32 = u_xlat43;
  u_xlat43 = clamp(x_2122, 0.0f, 1.0f);
  let x_2124 : f32 = u_xlat43;
  u_xlat43 = (-(x_2124) + 1.0f);
  let x_2127 : f32 = u_xlat43;
  let x_2128 : f32 = u_xlat43;
  u_xlat43 = (x_2127 * x_2128);
  let x_2130 : f32 = u_xlat43;
  let x_2131 : f32 = u_xlat43;
  u_xlat43 = (x_2130 * x_2131);
  let x_2134 : f32 = u_xlat0.x;
  u_xlat64 = ((-(x_2134) * 0.699999988f) + 1.700000048f);
  let x_2141 : f32 = u_xlat0.x;
  let x_2142 : f32 = u_xlat64;
  u_xlat0.x = (x_2141 * x_2142);
  let x_2146 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2146 * 6.0f);
  let x_2158 : vec4<f32> = u_xlat8;
  let x_2161 : f32 = u_xlat0.x;
  let x_2162 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2158.x, x_2158.y, x_2158.z), x_2161);
  u_xlat8 = x_2162;
  let x_2164 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2164 + -1.0f);
  let x_2168 : f32 = x_281.unity_SpecCube0_HDR.w;
  let x_2170 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2168 * x_2170) + 1.0f);
  let x_2175 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2175, 0.0f);
  let x_2179 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2179);
  let x_2183 : f32 = u_xlat0.x;
  let x_2185 : f32 = x_281.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2183 * x_2185);
  let x_2189 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2189);
  let x_2193 : f32 = u_xlat0.x;
  let x_2195 : f32 = x_281.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2193 * x_2195);
  let x_2198 : vec4<f32> = u_xlat8;
  let x_2200 : vec4<f32> = u_xlat0;
  let x_2202 : vec3<f32> = (vec3<f32>(x_2198.x, x_2198.y, x_2198.z) * vec3<f32>(x_2200.x, x_2200.x, x_2200.x));
  let x_2203 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2202.x, x_2202.y, x_2202.z, x_2203.w);
  let x_2205 : vec2<f32> = u_xlat21;
  let x_2207 : vec2<f32> = u_xlat21;
  let x_2211 : vec2<f32> = ((vec2<f32>(x_2205.x, x_2205.x) * vec2<f32>(x_2207.x, x_2207.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2212 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2211.x, x_2211.y, x_2212.z, x_2212.w);
  let x_2215 : f32 = u_xlat0.y;
  u_xlat21.x = (1.0f / x_2215);
  let x_2218 : vec3<f32> = u_xlat2;
  let x_2220 : f32 = u_xlat42;
  let x_2222 : vec3<f32> = (-(x_2218) + vec3<f32>(x_2220, x_2220, x_2220));
  let x_2223 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2222.x, x_2222.y, x_2222.z, x_2223.w);
  let x_2225 : f32 = u_xlat43;
  let x_2227 : vec4<f32> = u_xlat9;
  let x_2230 : vec3<f32> = u_xlat2;
  let x_2231 : vec3<f32> = ((vec3<f32>(x_2225, x_2225, x_2225) * vec3<f32>(x_2227.x, x_2227.y, x_2227.z)) + x_2230);
  let x_2232 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2231.x, x_2231.y, x_2231.z, x_2232.w);
  let x_2234 : vec2<f32> = u_xlat21;
  let x_2236 : vec4<f32> = u_xlat9;
  let x_2238 : vec3<f32> = (vec3<f32>(x_2234.x, x_2234.x, x_2234.x) * vec3<f32>(x_2236.x, x_2236.y, x_2236.z));
  let x_2239 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2238.x, x_2238.y, x_2238.z, x_2239.w);
  let x_2241 : vec4<f32> = u_xlat8;
  let x_2243 : vec4<f32> = u_xlat9;
  let x_2245 : vec3<f32> = (vec3<f32>(x_2241.x, x_2241.y, x_2241.z) * vec3<f32>(x_2243.x, x_2243.y, x_2243.z));
  let x_2246 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2245.x, x_2245.y, x_2245.z, x_2246.w);
  let x_2248 : vec3<f32> = u_xlat5;
  let x_2249 : vec3<f32> = u_xlat7;
  let x_2251 : vec4<f32> = u_xlat8;
  u_xlat5 = ((x_2248 * x_2249) + vec3<f32>(x_2251.x, x_2251.y, x_2251.z));
  let x_2255 : f32 = u_xlat22.x;
  let x_2257 : f32 = x_281.unity_LightData.z;
  u_xlat21.x = (x_2255 * x_2257);
  let x_2260 : vec4<f32> = u_xlat3;
  let x_2263 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat42 = dot(vec3<f32>(x_2260.x, x_2260.y, x_2260.z), vec3<f32>(x_2263.x, x_2263.y, x_2263.z));
  let x_2266 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2266, 0.0f, 1.0f);
  let x_2268 : f32 = u_xlat42;
  let x_2270 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2268 * x_2270);
  let x_2273 : vec2<f32> = u_xlat21;
  let x_2275 : vec4<f32> = u_xlat6;
  u_xlat22 = (vec3<f32>(x_2273.x, x_2273.x, x_2273.x) * vec3<f32>(x_2275.x, x_2275.y, x_2275.z));
  let x_2278 : vec3<f32> = u_xlat4;
  let x_2280 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2282 : vec3<f32> = (x_2278 + vec3<f32>(x_2280.x, x_2280.y, x_2280.z));
  let x_2283 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2282.x, x_2282.y, x_2282.z, x_2283.w);
  let x_2285 : vec4<f32> = u_xlat6;
  let x_2287 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(vec3<f32>(x_2285.x, x_2285.y, x_2285.z), vec3<f32>(x_2287.x, x_2287.y, x_2287.z));
  let x_2292 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_2292, 1.17549435e-37f);
  let x_2297 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_2297);
  let x_2300 : vec2<f32> = u_xlat21;
  let x_2302 : vec4<f32> = u_xlat6;
  let x_2304 : vec3<f32> = (vec3<f32>(x_2300.x, x_2300.x, x_2300.x) * vec3<f32>(x_2302.x, x_2302.y, x_2302.z));
  let x_2305 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2304.x, x_2304.y, x_2304.z, x_2305.w);
  let x_2307 : vec4<f32> = u_xlat3;
  let x_2309 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(vec3<f32>(x_2307.x, x_2307.y, x_2307.z), vec3<f32>(x_2309.x, x_2309.y, x_2309.z));
  let x_2314 : f32 = u_xlat21.x;
  u_xlat21.x = clamp(x_2314, 0.0f, 1.0f);
  let x_2318 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2320 : vec4<f32> = u_xlat6;
  u_xlat21.y = dot(vec3<f32>(x_2318.x, x_2318.y, x_2318.z), vec3<f32>(x_2320.x, x_2320.y, x_2320.z));
  let x_2325 : f32 = u_xlat21.y;
  u_xlat21.y = clamp(x_2325, 0.0f, 1.0f);
  let x_2328 : vec2<f32> = u_xlat21;
  let x_2329 : vec2<f32> = u_xlat21;
  u_xlat21 = (x_2328 * x_2329);
  let x_2332 : f32 = u_xlat21.x;
  let x_2334 : f32 = u_xlat0.x;
  u_xlat21.x = ((x_2332 * x_2334) + 1.000010014f);
  let x_2340 : f32 = u_xlat21.x;
  let x_2342 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2340 * x_2342);
  let x_2346 : f32 = u_xlat21.y;
  u_xlat42 = max(x_2346, 0.100000001f);
  let x_2349 : f32 = u_xlat42;
  let x_2351 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2349 * x_2351);
  let x_2355 : f32 = u_xlat1.x;
  let x_2357 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2355 * x_2357);
  let x_2360 : f32 = u_xlat65;
  let x_2362 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2360 / x_2362);
  let x_2365 : vec3<f32> = u_xlat2;
  let x_2366 : vec2<f32> = u_xlat21;
  let x_2369 : vec3<f32> = u_xlat7;
  let x_2370 : vec3<f32> = ((x_2365 * vec3<f32>(x_2366.x, x_2366.x, x_2366.x)) + x_2369);
  let x_2371 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2370.x, x_2370.y, x_2370.z, x_2371.w);
  let x_2373 : vec3<f32> = u_xlat22;
  let x_2374 : vec4<f32> = u_xlat6;
  u_xlat22 = (x_2373 * vec3<f32>(x_2374.x, x_2374.y, x_2374.z));
  let x_2378 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2380 : f32 = x_281.unity_LightData.y;
  u_xlat21.x = min(x_2378, x_2380);
  let x_2384 : f32 = u_xlat21.x;
  u_xlatu21 = bitcast<u32>(i32(x_2384));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2396 : u32 = u_xlatu_loop_1;
    let x_2397 : u32 = u_xlatu21;
    if ((x_2396 < x_2397)) {
    } else {
      break;
    }
    let x_2400 : u32 = u_xlatu_loop_1;
    u_xlatu66 = (x_2400 >> 2u);
    let x_2403 : u32 = u_xlatu_loop_1;
    u_xlati68 = bitcast<i32>((x_2403 & 3u));
    let x_2406 : u32 = u_xlatu66;
    let x_2409 : vec4<f32> = x_281.unity_LightIndices[bitcast<i32>(x_2406)];
    let x_2419 : i32 = u_xlati68;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2424 : vec4<u32> = indexable[x_2419];
    u_xlat66 = dot(x_2409, bitcast<vec4<f32>>(x_2424));
    let x_2428 : f32 = u_xlat66;
    u_xlati66 = i32(x_2428);
    let x_2430 : vec3<f32> = vs_INTERP0;
    let x_2442 : i32 = u_xlati66;
    let x_2444 : vec4<f32> = x_2441.x_AdditionalLightsPosition[x_2442];
    let x_2447 : i32 = u_xlati66;
    let x_2449 : vec4<f32> = x_2441.x_AdditionalLightsPosition[x_2447];
    let x_2451 : vec3<f32> = ((-(x_2430) * vec3<f32>(x_2444.w, x_2444.w, x_2444.w)) + vec3<f32>(x_2449.x, x_2449.y, x_2449.z));
    let x_2452 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2451.x, x_2451.y, x_2451.z, x_2452.w);
    let x_2454 : vec4<f32> = u_xlat8;
    let x_2456 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2454.x, x_2454.y, x_2454.z), vec3<f32>(x_2456.x, x_2456.y, x_2456.z));
    let x_2459 : f32 = u_xlat68;
    u_xlat68 = max(x_2459, 6.10351562e-05f);
    let x_2463 : f32 = u_xlat68;
    u_xlat69 = inverseSqrt(x_2463);
    let x_2465 : f32 = u_xlat69;
    let x_2467 : vec4<f32> = u_xlat8;
    let x_2469 : vec3<f32> = (vec3<f32>(x_2465, x_2465, x_2465) * vec3<f32>(x_2467.x, x_2467.y, x_2467.z));
    let x_2470 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2469.x, x_2469.y, x_2469.z, x_2470.w);
    let x_2472 : f32 = u_xlat68;
    u_xlat70 = (1.0f / x_2472);
    let x_2474 : f32 = u_xlat68;
    let x_2475 : i32 = u_xlati66;
    let x_2477 : f32 = x_2441.x_AdditionalLightsAttenuation[x_2475].x;
    u_xlat68 = (x_2474 * x_2477);
    let x_2479 : f32 = u_xlat68;
    let x_2481 : f32 = u_xlat68;
    u_xlat68 = ((-(x_2479) * x_2481) + 1.0f);
    let x_2484 : f32 = u_xlat68;
    u_xlat68 = max(x_2484, 0.0f);
    let x_2486 : f32 = u_xlat68;
    let x_2487 : f32 = u_xlat68;
    u_xlat68 = (x_2486 * x_2487);
    let x_2489 : f32 = u_xlat68;
    let x_2490 : f32 = u_xlat70;
    u_xlat68 = (x_2489 * x_2490);
    let x_2492 : i32 = u_xlati66;
    let x_2494 : vec4<f32> = x_2441.x_AdditionalLightsSpotDir[x_2492];
    let x_2496 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_2494.x, x_2494.y, x_2494.z), vec3<f32>(x_2496.x, x_2496.y, x_2496.z));
    let x_2499 : f32 = u_xlat70;
    let x_2500 : i32 = u_xlati66;
    let x_2502 : f32 = x_2441.x_AdditionalLightsAttenuation[x_2500].z;
    let x_2504 : i32 = u_xlati66;
    let x_2506 : f32 = x_2441.x_AdditionalLightsAttenuation[x_2504].w;
    u_xlat70 = ((x_2499 * x_2502) + x_2506);
    let x_2508 : f32 = u_xlat70;
    u_xlat70 = clamp(x_2508, 0.0f, 1.0f);
    let x_2510 : f32 = u_xlat70;
    let x_2511 : f32 = u_xlat70;
    u_xlat70 = (x_2510 * x_2511);
    let x_2513 : f32 = u_xlat68;
    let x_2514 : f32 = u_xlat70;
    u_xlat68 = (x_2513 * x_2514);
    let x_2516 : f32 = u_xlat67;
    let x_2518 : i32 = u_xlati66;
    let x_2520 : vec4<f32> = x_2441.x_AdditionalLightsColor[x_2518];
    let x_2522 : vec3<f32> = (vec3<f32>(x_2516, x_2516, x_2516) * vec3<f32>(x_2520.x, x_2520.y, x_2520.z));
    let x_2523 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2522.x, x_2522.y, x_2522.z, x_2523.w);
    let x_2525 : vec4<f32> = u_xlat3;
    let x_2527 : vec4<f32> = u_xlat9;
    u_xlat66 = dot(vec3<f32>(x_2525.x, x_2525.y, x_2525.z), vec3<f32>(x_2527.x, x_2527.y, x_2527.z));
    let x_2530 : f32 = u_xlat66;
    u_xlat66 = clamp(x_2530, 0.0f, 1.0f);
    let x_2532 : f32 = u_xlat66;
    let x_2533 : f32 = u_xlat68;
    u_xlat66 = (x_2532 * x_2533);
    let x_2535 : f32 = u_xlat66;
    let x_2537 : vec4<f32> = u_xlat10;
    let x_2539 : vec3<f32> = (vec3<f32>(x_2535, x_2535, x_2535) * vec3<f32>(x_2537.x, x_2537.y, x_2537.z));
    let x_2540 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2539.x, x_2539.y, x_2539.z, x_2540.w);
    let x_2542 : vec4<f32> = u_xlat8;
    let x_2544 : f32 = u_xlat69;
    let x_2547 : vec3<f32> = u_xlat4;
    let x_2548 : vec3<f32> = ((vec3<f32>(x_2542.x, x_2542.y, x_2542.z) * vec3<f32>(x_2544, x_2544, x_2544)) + x_2547);
    let x_2549 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2548.x, x_2548.y, x_2548.z, x_2549.w);
    let x_2551 : vec4<f32> = u_xlat8;
    let x_2553 : vec4<f32> = u_xlat8;
    u_xlat66 = dot(vec3<f32>(x_2551.x, x_2551.y, x_2551.z), vec3<f32>(x_2553.x, x_2553.y, x_2553.z));
    let x_2556 : f32 = u_xlat66;
    u_xlat66 = max(x_2556, 1.17549435e-37f);
    let x_2558 : f32 = u_xlat66;
    u_xlat66 = inverseSqrt(x_2558);
    let x_2560 : f32 = u_xlat66;
    let x_2562 : vec4<f32> = u_xlat8;
    let x_2564 : vec3<f32> = (vec3<f32>(x_2560, x_2560, x_2560) * vec3<f32>(x_2562.x, x_2562.y, x_2562.z));
    let x_2565 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2564.x, x_2564.y, x_2564.z, x_2565.w);
    let x_2567 : vec4<f32> = u_xlat3;
    let x_2569 : vec4<f32> = u_xlat8;
    u_xlat66 = dot(vec3<f32>(x_2567.x, x_2567.y, x_2567.z), vec3<f32>(x_2569.x, x_2569.y, x_2569.z));
    let x_2572 : f32 = u_xlat66;
    u_xlat66 = clamp(x_2572, 0.0f, 1.0f);
    let x_2574 : vec4<f32> = u_xlat9;
    let x_2576 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2574.x, x_2574.y, x_2574.z), vec3<f32>(x_2576.x, x_2576.y, x_2576.z));
    let x_2579 : f32 = u_xlat68;
    u_xlat68 = clamp(x_2579, 0.0f, 1.0f);
    let x_2581 : f32 = u_xlat66;
    let x_2582 : f32 = u_xlat66;
    u_xlat66 = (x_2581 * x_2582);
    let x_2584 : f32 = u_xlat66;
    let x_2586 : f32 = u_xlat0.x;
    u_xlat66 = ((x_2584 * x_2586) + 1.000010014f);
    let x_2589 : f32 = u_xlat68;
    let x_2590 : f32 = u_xlat68;
    u_xlat68 = (x_2589 * x_2590);
    let x_2592 : f32 = u_xlat66;
    let x_2593 : f32 = u_xlat66;
    u_xlat66 = (x_2592 * x_2593);
    let x_2595 : f32 = u_xlat68;
    u_xlat68 = max(x_2595, 0.100000001f);
    let x_2597 : f32 = u_xlat66;
    let x_2598 : f32 = u_xlat68;
    u_xlat66 = (x_2597 * x_2598);
    let x_2601 : f32 = u_xlat1.x;
    let x_2602 : f32 = u_xlat66;
    u_xlat66 = (x_2601 * x_2602);
    let x_2604 : f32 = u_xlat65;
    let x_2605 : f32 = u_xlat66;
    u_xlat66 = (x_2604 / x_2605);
    let x_2607 : vec3<f32> = u_xlat2;
    let x_2608 : f32 = u_xlat66;
    let x_2611 : vec3<f32> = u_xlat7;
    let x_2612 : vec3<f32> = ((x_2607 * vec3<f32>(x_2608, x_2608, x_2608)) + x_2611);
    let x_2613 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2612.x, x_2612.y, x_2612.z, x_2613.w);
    let x_2615 : vec4<f32> = u_xlat8;
    let x_2617 : vec4<f32> = u_xlat10;
    let x_2620 : vec4<f32> = u_xlat6;
    let x_2622 : vec3<f32> = ((vec3<f32>(x_2615.x, x_2615.y, x_2615.z) * vec3<f32>(x_2617.x, x_2617.y, x_2617.z)) + vec3<f32>(x_2620.x, x_2620.y, x_2620.z));
    let x_2623 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2622.x, x_2622.y, x_2622.z, x_2623.w);

    continuing {
      let x_2625 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2625 + bitcast<u32>(1i));
    }
  }
  let x_2627 : vec3<f32> = u_xlat5;
  let x_2628 : f32 = u_xlat63;
  let x_2631 : vec3<f32> = u_xlat22;
  let x_2632 : vec3<f32> = ((x_2627 * vec3<f32>(x_2628, x_2628, x_2628)) + x_2631);
  let x_2633 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2632.x, x_2632.y, x_2632.z, x_2633.w);
  let x_2637 : vec4<f32> = u_xlat6;
  let x_2639 : vec4<f32> = u_xlat0;
  let x_2641 : vec3<f32> = (vec3<f32>(x_2637.x, x_2637.y, x_2637.z) + vec3<f32>(x_2639.x, x_2639.y, x_2639.z));
  let x_2642 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2641.x, x_2641.y, x_2641.z, x_2642.w);
  let x_2647 : u32 = x_44.x_RenderingLayerMaxInt;
  let x_2649 : f32 = x_281.unity_RenderingLayer.x;
  u_xlatu0 = (x_2647 & bitcast<u32>(x_2649));
  let x_2652 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_2652);
  let x_2657 : f32 = u_xlat0.x;
  let x_2659 : f32 = x_44.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_2657 * x_2659);
  let x_2664 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_2664, 0.0f, 1.0f);
  SV_Target0.w = 1.0f;
  let x_2668 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_2668.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

