struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
}

struct TemporalAAData {
  x_BlitTexture_TexelSize : vec4<f32>,
  x_TaaMotionVectorTex_TexelSize : vec4<f32>,
  x_TaaAccumulationTex_TexelSize : vec4<f32>,
  x_TaaFrameInfluence : f32,
}

@group(0) @binding(1) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_PointClamp : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_26 : PGlobals;

@group(1) @binding(1) var<uniform> x_53 : TemporalAAData;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_LinearClamp : sampler;

@group(0) @binding(2) var x_TaaMotionVectorTex : texture_2d<f32>;

@group(0) @binding(3) var x_TaaAccumulationTex : texture_2d<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlatb28 : bool;
  var u_xlat2 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlatb42 : bool;
  var x_137 : f32;
  var u_xlat42 : f32;
  var u_xlatb3 : bool;
  var x_173 : vec2<f32>;
  var x_202 : vec2<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlatb45 : bool;
  var x_252 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlatb5 : bool;
  var x_292 : f32;
  var x_304 : f32;
  var x_334 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb0 : vec2<bool>;
  var u_xlat6 : vec3<f32>;
  var x_382 : f32;
  var x_397 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var x_1050 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec2<f32> = vs_TEXCOORD0;
  let x_33 : f32 = x_26.x_GlobalMipBias.x;
  let x_35 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, x_23, x_33);
  u_xlat0.x = x_35.x;
  let x_40 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_40) + 1.0f);
  let x_46 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_46, 1.0f);
  let x_56 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_61 : vec2<f32> = vs_TEXCOORD0;
  u_xlat1 = ((vec4<f32>(x_56.x, x_56.y, x_56.x, x_56.y) * vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)) + vec4<f32>(x_61.x, x_61.y, x_61.x, x_61.y));
  let x_69 : vec4<f32> = u_xlat1;
  let x_72 : f32 = x_26.x_GlobalMipBias.x;
  let x_73 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_69.x, x_69.y), x_72);
  u_xlat14.x = x_73.x;
  let x_77 : f32 = u_xlat14.x;
  u_xlat14.x = (-(x_77) + 1.0f);
  let x_85 : f32 = u_xlat14.x;
  let x_87 : f32 = u_xlat0.x;
  u_xlatb28 = (x_85 < x_87);
  let x_90 : f32 = u_xlat14.x;
  let x_92 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_90, x_92);
  let x_95 : bool = u_xlatb28;
  u_xlat14.x = select(0.0f, 1.0f, x_95);
  let x_100 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_105 : vec2<f32> = vs_TEXCOORD0;
  u_xlat2 = ((vec4<f32>(x_100.x, x_100.y, x_100.x, x_100.y) * vec4<f32>(0.0f, -1.0f, -1.0f, 0.0f)) + vec4<f32>(x_105.x, x_105.y, x_105.x, x_105.y));
  let x_112 : vec4<f32> = u_xlat2;
  let x_115 : f32 = x_26.x_GlobalMipBias.x;
  let x_116 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_112.x, x_112.y), x_115);
  u_xlat28.x = x_116.x;
  let x_120 : f32 = u_xlat28.x;
  u_xlat28.x = (-(x_120) + 1.0f);
  let x_126 : f32 = u_xlat28.x;
  let x_128 : f32 = u_xlat0.x;
  u_xlatb42 = (x_126 < x_128);
  let x_131 : f32 = u_xlat28.x;
  let x_133 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_131, x_133);
  let x_136 : bool = u_xlatb42;
  if (x_136) {
    x_137 = 0.0f;
  } else {
    let x_142 : f32 = u_xlat14.x;
    x_137 = x_142;
  }
  let x_143 : f32 = x_137;
  u_xlat14.x = x_143;
  let x_145 : bool = u_xlatb42;
  u_xlat14.y = select(0.0f, -1.0f, x_145);
  let x_153 : vec4<f32> = u_xlat2;
  let x_156 : f32 = x_26.x_GlobalMipBias.x;
  let x_157 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_153.z, x_153.w), x_156);
  u_xlat42 = x_157.x;
  let x_159 : f32 = u_xlat42;
  u_xlat42 = (-(x_159) + 1.0f);
  let x_163 : f32 = u_xlat42;
  let x_165 : f32 = u_xlat0.x;
  u_xlatb3 = (x_163 < x_165);
  let x_167 : f32 = u_xlat42;
  let x_169 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_167, x_169);
  let x_172 : bool = u_xlatb3;
  if (x_172) {
    x_173 = vec2<f32>(-1.0f, 0.0f);
  } else {
    let x_178 : vec2<f32> = u_xlat14;
    x_173 = x_178;
  }
  let x_179 : vec2<f32> = x_173;
  u_xlat14 = x_179;
  let x_183 : vec4<f32> = u_xlat1;
  let x_186 : f32 = x_26.x_GlobalMipBias.x;
  let x_187 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_183.z, x_183.w), x_186);
  u_xlat42 = x_187.x;
  let x_189 : f32 = u_xlat42;
  u_xlat42 = (-(x_189) + 1.0f);
  let x_192 : f32 = u_xlat42;
  let x_194 : f32 = u_xlat0.x;
  u_xlatb3 = (x_192 < x_194);
  let x_196 : f32 = u_xlat42;
  let x_198 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, x_198);
  let x_201 : bool = u_xlatb3;
  if (x_201) {
    x_202 = vec2<f32>(0.0f, 1.0f);
  } else {
    let x_207 : vec2<f32> = u_xlat14;
    x_202 = x_207;
  }
  let x_208 : vec2<f32> = x_202;
  u_xlat14 = x_208;
  let x_210 : vec2<f32> = vs_TEXCOORD0;
  let x_212 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_215 : vec2<f32> = (x_210 + -(vec2<f32>(x_212.x, x_212.y)));
  let x_216 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_215.x, x_215.y, x_216.z);
  let x_221 : vec3<f32> = u_xlat3;
  let x_224 : f32 = x_26.x_GlobalMipBias.x;
  let x_225 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_221.x, x_221.y), x_224);
  u_xlat42 = x_225.x;
  let x_232 : vec3<f32> = u_xlat3;
  let x_235 : f32 = x_26.x_GlobalMipBias.x;
  let x_236 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_232.x, x_232.y), x_235);
  u_xlat3 = vec3<f32>(x_236.x, x_236.y, x_236.z);
  let x_238 : f32 = u_xlat42;
  u_xlat42 = (-(x_238) + 1.0f);
  let x_242 : f32 = u_xlat42;
  let x_244 : f32 = u_xlat0.x;
  u_xlatb45 = (x_242 < x_244);
  let x_246 : f32 = u_xlat42;
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_246, x_248);
  let x_251 : bool = u_xlatb45;
  if (x_251) {
    x_252 = -1.0f;
  } else {
    let x_257 : f32 = u_xlat14.x;
    x_252 = x_257;
  }
  let x_258 : f32 = x_252;
  u_xlat14.x = x_258;
  let x_262 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_266 : vec2<f32> = vs_TEXCOORD0;
  u_xlat4 = ((vec4<f32>(x_262.x, x_262.y, x_262.x, x_262.y) * vec4<f32>(1.0f, -1.0f, -1.0f, 1.0f)) + vec4<f32>(x_266.x, x_266.y, x_266.x, x_266.y));
  let x_272 : vec4<f32> = u_xlat4;
  let x_275 : f32 = x_26.x_GlobalMipBias.x;
  let x_276 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_272.x, x_272.y), x_275);
  u_xlat42 = x_276.x;
  let x_278 : f32 = u_xlat42;
  u_xlat42 = (-(x_278) + 1.0f);
  let x_282 : f32 = u_xlat42;
  let x_284 : f32 = u_xlat0.x;
  u_xlatb5 = (x_282 < x_284);
  let x_286 : f32 = u_xlat42;
  let x_288 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_286, x_288);
  let x_291 : bool = u_xlatb5;
  if (x_291) {
    x_292 = 1.0f;
  } else {
    let x_297 : f32 = u_xlat14.x;
    x_292 = x_297;
  }
  let x_298 : f32 = x_292;
  u_xlat14.x = x_298;
  let x_300 : bool = u_xlatb45;
  let x_301 : bool = u_xlatb5;
  u_xlatb42 = (x_300 | x_301);
  let x_303 : bool = u_xlatb42;
  if (x_303) {
    x_304 = -1.0f;
  } else {
    let x_309 : f32 = u_xlat14.y;
    x_304 = x_309;
  }
  let x_310 : f32 = x_304;
  u_xlat28.x = x_310;
  let x_315 : vec4<f32> = u_xlat4;
  let x_318 : f32 = x_26.x_GlobalMipBias.x;
  let x_319 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_315.z, x_315.w), x_318);
  u_xlat42 = x_319.x;
  let x_321 : f32 = u_xlat42;
  u_xlat42 = (-(x_321) + 1.0f);
  let x_324 : f32 = u_xlat42;
  let x_326 : f32 = u_xlat0.x;
  u_xlatb45 = (x_324 < x_326);
  let x_328 : f32 = u_xlat42;
  let x_330 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_328, x_330);
  let x_333 : bool = u_xlatb45;
  if (x_333) {
    x_334 = -1.0f;
  } else {
    let x_339 : f32 = u_xlat14.x;
    x_334 = x_339;
  }
  let x_340 : f32 = x_334;
  u_xlat14.x = x_340;
  let x_343 : vec2<f32> = vs_TEXCOORD0;
  let x_345 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_347 : vec2<f32> = (x_343 + vec2<f32>(x_345.x, x_345.y));
  let x_348 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_347.x, x_347.y, x_348.z);
  let x_353 : vec3<f32> = u_xlat5;
  let x_356 : f32 = x_26.x_GlobalMipBias.x;
  let x_357 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_353.x, x_353.y), x_356);
  u_xlat42 = x_357.x;
  let x_362 : vec3<f32> = u_xlat5;
  let x_365 : f32 = x_26.x_GlobalMipBias.x;
  let x_366 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_362.x, x_362.y), x_365);
  u_xlat5 = vec3<f32>(x_366.x, x_366.y, x_366.z);
  let x_368 : f32 = u_xlat42;
  u_xlat42 = (-(x_368) + 1.0f);
  let x_374 : f32 = u_xlat42;
  let x_376 : f32 = u_xlat0.x;
  u_xlatb0.x = (x_374 < x_376);
  let x_381 : bool = u_xlatb0.x;
  if (x_381) {
    x_382 = 1.0f;
  } else {
    let x_387 : f32 = u_xlat14.x;
    x_382 = x_387;
  }
  let x_388 : f32 = x_382;
  u_xlat6.x = x_388;
  let x_391 : bool = u_xlatb0.x;
  let x_392 : bool = u_xlatb45;
  u_xlatb0.x = (x_391 | x_392);
  let x_396 : bool = u_xlatb0.x;
  if (x_396) {
    x_397 = 1.0f;
  } else {
    let x_402 : f32 = u_xlat28.x;
    x_397 = x_402;
  }
  let x_403 : f32 = x_397;
  u_xlat6.y = x_403;
  let x_407 : vec4<f32> = x_53.x_TaaMotionVectorTex_TexelSize;
  let x_409 : vec3<f32> = u_xlat6;
  let x_412 : vec2<f32> = vs_TEXCOORD0;
  let x_413 : vec2<f32> = ((vec2<f32>(x_407.x, x_407.y) * vec2<f32>(x_409.x, x_409.y)) + x_412);
  let x_414 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_413.x, x_413.y, x_414.z);
  let x_420 : vec3<f32> = u_xlat0;
  let x_423 : f32 = x_26.x_GlobalMipBias.x;
  let x_424 : vec4<f32> = textureSampleBias(x_TaaMotionVectorTex, sampler_LinearClamp, vec2<f32>(x_420.x, x_420.y), x_423);
  let x_425 : vec2<f32> = vec2<f32>(x_424.x, x_424.y);
  let x_426 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_425.x, x_425.y, x_426.z);
  let x_428 : vec3<f32> = u_xlat0;
  let x_431 : vec2<f32> = vs_TEXCOORD0;
  u_xlat28 = (-(vec2<f32>(x_428.x, x_428.y)) + x_431);
  let x_437 : vec2<f32> = u_xlat28;
  let x_439 : f32 = x_26.x_GlobalMipBias.x;
  let x_440 : vec4<f32> = textureSampleBias(x_TaaAccumulationTex, sampler_LinearClamp, x_437, x_439);
  u_xlat6 = vec3<f32>(x_440.x, x_440.y, x_440.z);
  let x_442 : vec3<f32> = u_xlat6;
  u_xlat28.x = dot(vec2<f32>(x_442.x, x_442.z), vec2<f32>(0.5f, -0.5f));
  let x_451 : f32 = u_xlat28.x;
  u_xlat7.y = (x_451 + 0.501960814f);
  let x_455 : vec3<f32> = u_xlat6;
  u_xlat28.x = dot(vec3<f32>(x_455.x, x_455.z, x_455.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_461 : vec3<f32> = u_xlat6;
  u_xlat7.x = dot(vec3<f32>(x_461.x, x_461.z, x_461.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_468 : f32 = u_xlat28.x;
  u_xlat7.z = (x_468 + 0.501960814f);
  let x_472 : vec3<f32> = u_xlat5;
  u_xlat28.x = dot(vec2<f32>(x_472.x, x_472.z), vec2<f32>(0.5f, -0.5f));
  let x_477 : f32 = u_xlat28.x;
  u_xlat6.y = (x_477 + 0.501960814f);
  let x_480 : vec3<f32> = u_xlat5;
  u_xlat28.x = dot(vec3<f32>(x_480.x, x_480.z, x_480.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_484 : vec3<f32> = u_xlat5;
  u_xlat6.x = dot(vec3<f32>(x_484.x, x_484.z, x_484.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_489 : f32 = u_xlat28.x;
  u_xlat6.z = (x_489 + 0.501960814f);
  let x_492 : vec3<f32> = u_xlat3;
  u_xlat28.x = dot(vec2<f32>(x_492.x, x_492.z), vec2<f32>(0.5f, -0.5f));
  let x_497 : f32 = u_xlat28.x;
  u_xlat5.y = (x_497 + 0.501960814f);
  let x_500 : vec3<f32> = u_xlat3;
  u_xlat28.x = dot(vec3<f32>(x_500.x, x_500.z, x_500.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_504 : vec3<f32> = u_xlat3;
  u_xlat5.x = dot(vec3<f32>(x_504.x, x_504.z, x_504.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_509 : f32 = u_xlat28.x;
  u_xlat5.z = (x_509 + 0.501960814f);
  let x_515 : vec4<f32> = u_xlat1;
  let x_518 : f32 = x_26.x_GlobalMipBias.x;
  let x_519 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_515.z, x_515.w), x_518);
  u_xlat3 = vec3<f32>(x_519.x, x_519.y, x_519.z);
  let x_524 : vec4<f32> = u_xlat1;
  let x_527 : f32 = x_26.x_GlobalMipBias.x;
  let x_528 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_524.x, x_524.y), x_527);
  let x_529 : vec3<f32> = vec3<f32>(x_528.x, x_528.y, x_528.z);
  let x_530 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_529.x, x_529.y, x_529.z, x_530.w);
  let x_532 : vec3<f32> = u_xlat3;
  u_xlat28.x = dot(vec2<f32>(x_532.x, x_532.z), vec2<f32>(0.5f, -0.5f));
  let x_538 : f32 = u_xlat28.x;
  u_xlat8.y = (x_538 + 0.501960814f);
  let x_541 : vec3<f32> = u_xlat3;
  u_xlat28.x = dot(vec3<f32>(x_541.x, x_541.z, x_541.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_545 : vec3<f32> = u_xlat3;
  u_xlat8.x = dot(vec3<f32>(x_545.x, x_545.z, x_545.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_550 : f32 = u_xlat28.x;
  u_xlat8.z = (x_550 + 0.501960814f);
  let x_553 : vec4<f32> = u_xlat1;
  u_xlat28.x = dot(vec2<f32>(x_553.x, x_553.z), vec2<f32>(0.5f, -0.5f));
  let x_558 : f32 = u_xlat28.x;
  u_xlat3.y = (x_558 + 0.501960814f);
  let x_561 : vec4<f32> = u_xlat1;
  u_xlat28.x = dot(vec3<f32>(x_561.x, x_561.z, x_561.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_565 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(vec3<f32>(x_565.x, x_565.z, x_565.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_570 : f32 = u_xlat28.x;
  u_xlat3.z = (x_570 + 0.501960814f);
  let x_576 : vec4<f32> = u_xlat2;
  let x_579 : f32 = x_26.x_GlobalMipBias.x;
  let x_580 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_576.z, x_576.w), x_579);
  let x_581 : vec3<f32> = vec3<f32>(x_580.x, x_580.y, x_580.z);
  let x_582 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_581.x, x_581.y, x_581.z, x_582.w);
  let x_587 : vec4<f32> = u_xlat2;
  let x_590 : f32 = x_26.x_GlobalMipBias.x;
  let x_591 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_587.x, x_587.y), x_590);
  let x_592 : vec3<f32> = vec3<f32>(x_591.x, x_591.y, x_591.z);
  let x_593 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
  let x_595 : vec4<f32> = u_xlat1;
  u_xlat28.x = dot(vec2<f32>(x_595.x, x_595.z), vec2<f32>(0.5f, -0.5f));
  let x_601 : f32 = u_xlat28.x;
  u_xlat9.y = (x_601 + 0.501960814f);
  let x_604 : vec4<f32> = u_xlat1;
  u_xlat28.x = dot(vec3<f32>(x_604.x, x_604.z, x_604.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_608 : vec4<f32> = u_xlat1;
  u_xlat9.x = dot(vec3<f32>(x_608.x, x_608.z, x_608.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_613 : f32 = u_xlat28.x;
  u_xlat9.z = (x_613 + 0.501960814f);
  let x_616 : vec4<f32> = u_xlat2;
  u_xlat28.x = dot(vec2<f32>(x_616.x, x_616.z), vec2<f32>(0.5f, -0.5f));
  let x_621 : f32 = u_xlat28.x;
  u_xlat1.y = (x_621 + 0.501960814f);
  let x_624 : vec4<f32> = u_xlat2;
  u_xlat28.x = dot(vec3<f32>(x_624.x, x_624.z, x_624.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_628 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(vec3<f32>(x_628.x, x_628.z, x_628.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_633 : f32 = u_xlat28.x;
  u_xlat1.z = (x_633 + 0.501960814f);
  let x_636 : vec4<f32> = u_xlat1;
  let x_638 : vec4<f32> = u_xlat1;
  let x_640 : vec3<f32> = (vec3<f32>(x_636.x, x_636.y, x_636.z) * vec3<f32>(x_638.x, x_638.y, x_638.z));
  let x_641 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_640.x, x_640.y, x_640.z, x_641.w);
  let x_647 : vec2<f32> = vs_TEXCOORD0;
  let x_649 : f32 = x_26.x_GlobalMipBias.x;
  let x_650 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_647, x_649);
  u_xlat10 = vec3<f32>(x_650.x, x_650.y, x_650.z);
  let x_652 : vec3<f32> = u_xlat10;
  u_xlat28.x = dot(vec2<f32>(x_652.x, x_652.z), vec2<f32>(0.5f, -0.5f));
  let x_658 : f32 = u_xlat28.x;
  u_xlat11.y = (x_658 + 0.501960814f);
  let x_661 : vec3<f32> = u_xlat10;
  u_xlat28.x = dot(vec3<f32>(x_661.x, x_661.z, x_661.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_665 : vec3<f32> = u_xlat10;
  u_xlat11.x = dot(vec3<f32>(x_665.x, x_665.z, x_665.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_670 : f32 = u_xlat28.x;
  u_xlat11.z = (x_670 + 0.501960814f);
  let x_673 : vec3<f32> = u_xlat11;
  let x_674 : vec3<f32> = u_xlat11;
  let x_676 : vec4<f32> = u_xlat2;
  let x_678 : vec3<f32> = ((x_673 * x_674) + vec3<f32>(x_676.x, x_676.y, x_676.z));
  let x_679 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_678.x, x_678.y, x_678.z, x_679.w);
  let x_681 : vec3<f32> = u_xlat9;
  let x_682 : vec3<f32> = u_xlat9;
  let x_684 : vec4<f32> = u_xlat2;
  let x_686 : vec3<f32> = ((x_681 * x_682) + vec3<f32>(x_684.x, x_684.y, x_684.z));
  let x_687 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_686.x, x_686.y, x_686.z, x_687.w);
  let x_689 : vec3<f32> = u_xlat3;
  let x_690 : vec3<f32> = u_xlat3;
  let x_692 : vec4<f32> = u_xlat2;
  let x_694 : vec3<f32> = ((x_689 * x_690) + vec3<f32>(x_692.x, x_692.y, x_692.z));
  let x_695 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_694.x, x_694.y, x_694.z, x_695.w);
  let x_697 : vec3<f32> = u_xlat8;
  let x_698 : vec3<f32> = u_xlat8;
  let x_700 : vec4<f32> = u_xlat2;
  let x_702 : vec3<f32> = ((x_697 * x_698) + vec3<f32>(x_700.x, x_700.y, x_700.z));
  let x_703 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_702.x, x_702.y, x_702.z, x_703.w);
  let x_705 : vec3<f32> = u_xlat5;
  let x_706 : vec3<f32> = u_xlat5;
  let x_708 : vec4<f32> = u_xlat2;
  let x_710 : vec3<f32> = ((x_705 * x_706) + vec3<f32>(x_708.x, x_708.y, x_708.z));
  let x_711 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_710.x, x_710.y, x_710.z, x_711.w);
  let x_716 : vec4<f32> = u_xlat4;
  let x_719 : f32 = x_26.x_GlobalMipBias.x;
  let x_720 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_716.x, x_716.y), x_719);
  u_xlat10 = vec3<f32>(x_720.x, x_720.y, x_720.z);
  let x_725 : vec4<f32> = u_xlat4;
  let x_728 : f32 = x_26.x_GlobalMipBias.x;
  let x_729 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_725.z, x_725.w), x_728);
  let x_730 : vec3<f32> = vec3<f32>(x_729.x, x_729.y, x_729.z);
  let x_731 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_730.x, x_730.y, x_730.z, x_731.w);
  let x_733 : vec3<f32> = u_xlat10;
  u_xlat28.x = dot(vec2<f32>(x_733.x, x_733.z), vec2<f32>(0.5f, -0.5f));
  let x_739 : f32 = u_xlat28.x;
  u_xlat12.y = (x_739 + 0.501960814f);
  let x_742 : vec3<f32> = u_xlat10;
  u_xlat28.x = dot(vec3<f32>(x_742.x, x_742.z, x_742.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_746 : vec3<f32> = u_xlat10;
  u_xlat12.x = dot(vec3<f32>(x_746.x, x_746.z, x_746.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_751 : f32 = u_xlat28.x;
  u_xlat12.z = (x_751 + 0.501960814f);
  let x_754 : vec3<f32> = u_xlat12;
  let x_755 : vec3<f32> = u_xlat12;
  let x_757 : vec4<f32> = u_xlat2;
  let x_759 : vec3<f32> = ((x_754 * x_755) + vec3<f32>(x_757.x, x_757.y, x_757.z));
  let x_760 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_759.x, x_759.y, x_759.z, x_760.w);
  let x_762 : vec4<f32> = u_xlat4;
  u_xlat28.x = dot(vec2<f32>(x_762.x, x_762.z), vec2<f32>(0.5f, -0.5f));
  let x_767 : f32 = u_xlat28.x;
  u_xlat10.y = (x_767 + 0.501960814f);
  let x_770 : vec4<f32> = u_xlat4;
  u_xlat28.x = dot(vec3<f32>(x_770.x, x_770.z, x_770.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_774 : vec4<f32> = u_xlat4;
  u_xlat10.x = dot(vec3<f32>(x_774.x, x_774.z, x_774.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_779 : f32 = u_xlat28.x;
  u_xlat10.z = (x_779 + 0.501960814f);
  let x_782 : vec3<f32> = u_xlat10;
  let x_783 : vec3<f32> = u_xlat10;
  let x_785 : vec4<f32> = u_xlat2;
  let x_787 : vec3<f32> = ((x_782 * x_783) + vec3<f32>(x_785.x, x_785.y, x_785.z));
  let x_788 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_787.x, x_787.y, x_787.z, x_788.w);
  let x_790 : vec3<f32> = u_xlat6;
  let x_791 : vec3<f32> = u_xlat6;
  let x_793 : vec4<f32> = u_xlat2;
  let x_795 : vec3<f32> = ((x_790 * x_791) + vec3<f32>(x_793.x, x_793.y, x_793.z));
  let x_796 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_795.x, x_795.y, x_795.z, x_796.w);
  let x_798 : vec4<f32> = u_xlat1;
  let x_800 : vec3<f32> = u_xlat11;
  let x_801 : vec3<f32> = (vec3<f32>(x_798.x, x_798.y, x_798.z) + x_800);
  let x_802 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_801.x, x_801.y, x_801.z, x_802.w);
  let x_804 : vec3<f32> = u_xlat9;
  let x_805 : vec4<f32> = u_xlat4;
  let x_807 : vec3<f32> = (x_804 + vec3<f32>(x_805.x, x_805.y, x_805.z));
  let x_808 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_807.x, x_807.y, x_807.z, x_808.w);
  let x_810 : vec3<f32> = u_xlat3;
  let x_811 : vec4<f32> = u_xlat4;
  let x_813 : vec3<f32> = (x_810 + vec3<f32>(x_811.x, x_811.y, x_811.z));
  let x_814 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_813.x, x_813.y, x_813.z, x_814.w);
  let x_816 : vec3<f32> = u_xlat8;
  let x_817 : vec4<f32> = u_xlat4;
  let x_819 : vec3<f32> = (x_816 + vec3<f32>(x_817.x, x_817.y, x_817.z));
  let x_820 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_819.x, x_819.y, x_819.z, x_820.w);
  let x_822 : vec3<f32> = u_xlat5;
  let x_823 : vec4<f32> = u_xlat4;
  let x_825 : vec3<f32> = (x_822 + vec3<f32>(x_823.x, x_823.y, x_823.z));
  let x_826 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_825.x, x_825.y, x_825.z, x_826.w);
  let x_828 : vec3<f32> = u_xlat12;
  let x_829 : vec4<f32> = u_xlat4;
  let x_831 : vec3<f32> = (x_828 + vec3<f32>(x_829.x, x_829.y, x_829.z));
  let x_832 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_831.x, x_831.y, x_831.z, x_832.w);
  let x_834 : vec3<f32> = u_xlat10;
  let x_835 : vec4<f32> = u_xlat4;
  let x_837 : vec3<f32> = (x_834 + vec3<f32>(x_835.x, x_835.y, x_835.z));
  let x_838 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_837.x, x_837.y, x_837.z, x_838.w);
  let x_840 : vec3<f32> = u_xlat6;
  let x_841 : vec4<f32> = u_xlat4;
  let x_843 : vec3<f32> = (x_840 + vec3<f32>(x_841.x, x_841.y, x_841.z));
  let x_844 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_843.x, x_843.y, x_843.z, x_844.w);
  let x_847 : vec4<f32> = u_xlat4;
  u_xlat13 = (vec3<f32>(x_847.x, x_847.y, x_847.z) * vec3<f32>(0.111111112f, 0.111111112f, 0.111111112f));
  let x_852 : vec3<f32> = u_xlat13;
  let x_853 : vec3<f32> = u_xlat13;
  u_xlat13 = (x_852 * x_853);
  let x_855 : vec4<f32> = u_xlat2;
  let x_858 : vec3<f32> = u_xlat13;
  let x_860 : vec3<f32> = ((vec3<f32>(x_855.x, x_855.y, x_855.z) * vec3<f32>(0.111111112f, 0.111111112f, 0.111111112f)) + -(x_858));
  let x_861 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_860.x, x_860.y, x_860.z, x_861.w);
  let x_863 : vec4<f32> = u_xlat2;
  let x_866 : vec3<f32> = sqrt(abs(vec3<f32>(x_863.x, x_863.y, x_863.z)));
  let x_867 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_866.x, x_866.y, x_866.z, x_867.w);
  let x_869 : vec4<f32> = u_xlat2;
  let x_873 : vec3<f32> = (vec3<f32>(x_869.x, x_869.y, x_869.z) * vec3<f32>(0.899999976f, 0.899999976f, 0.899999976f));
  let x_874 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_873.x, x_873.y, x_873.z, x_874.w);
  let x_876 : vec4<f32> = u_xlat4;
  let x_879 : vec4<f32> = u_xlat2;
  u_xlat13 = ((vec3<f32>(x_876.x, x_876.y, x_876.z) * vec3<f32>(0.111111112f, 0.111111112f, 0.111111112f)) + -(vec3<f32>(x_879.x, x_879.y, x_879.z)));
  let x_883 : vec4<f32> = u_xlat4;
  let x_886 : vec4<f32> = u_xlat2;
  let x_888 : vec3<f32> = ((vec3<f32>(x_883.x, x_883.y, x_883.z) * vec3<f32>(0.111111112f, 0.111111112f, 0.111111112f)) + vec3<f32>(x_886.x, x_886.y, x_886.z));
  let x_889 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_888.x, x_888.y, x_888.z, x_889.w);
  let x_891 : vec4<f32> = u_xlat1;
  let x_893 : vec3<f32> = u_xlat11;
  let x_894 : vec3<f32> = min(vec3<f32>(x_891.x, x_891.y, x_891.z), x_893);
  let x_895 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_894.x, x_894.y, x_894.z, x_895.w);
  let x_897 : vec4<f32> = u_xlat1;
  let x_899 : vec3<f32> = u_xlat11;
  let x_900 : vec3<f32> = max(vec3<f32>(x_897.x, x_897.y, x_897.z), x_899);
  let x_901 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_900.x, x_900.y, x_900.z, x_901.w);
  let x_903 : vec4<f32> = u_xlat1;
  let x_905 : vec3<f32> = u_xlat9;
  let x_906 : vec3<f32> = max(vec3<f32>(x_903.x, x_903.y, x_903.z), x_905);
  let x_907 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_906.x, x_906.y, x_906.z, x_907.w);
  let x_909 : vec4<f32> = u_xlat4;
  let x_911 : vec3<f32> = u_xlat9;
  let x_912 : vec3<f32> = min(vec3<f32>(x_909.x, x_909.y, x_909.z), x_911);
  let x_913 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_912.x, x_912.y, x_912.z, x_913.w);
  let x_915 : vec3<f32> = u_xlat3;
  let x_916 : vec4<f32> = u_xlat4;
  let x_918 : vec3<f32> = min(x_915, vec3<f32>(x_916.x, x_916.y, x_916.z));
  let x_919 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_918.x, x_918.y, x_918.z, x_919.w);
  let x_921 : vec4<f32> = u_xlat1;
  let x_923 : vec3<f32> = u_xlat3;
  let x_924 : vec3<f32> = max(vec3<f32>(x_921.x, x_921.y, x_921.z), x_923);
  let x_925 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_924.x, x_924.y, x_924.z, x_925.w);
  let x_927 : vec4<f32> = u_xlat1;
  let x_929 : vec3<f32> = u_xlat8;
  let x_930 : vec3<f32> = max(vec3<f32>(x_927.x, x_927.y, x_927.z), x_929);
  let x_931 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_930.x, x_930.y, x_930.z, x_931.w);
  let x_933 : vec4<f32> = u_xlat4;
  let x_935 : vec3<f32> = u_xlat8;
  u_xlat3 = min(vec3<f32>(x_933.x, x_933.y, x_933.z), x_935);
  let x_937 : vec3<f32> = u_xlat3;
  let x_938 : vec3<f32> = u_xlat5;
  u_xlat3 = min(x_937, x_938);
  let x_940 : vec4<f32> = u_xlat1;
  let x_942 : vec3<f32> = u_xlat5;
  let x_943 : vec3<f32> = max(vec3<f32>(x_940.x, x_940.y, x_940.z), x_942);
  let x_944 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_943.x, x_943.y, x_943.z, x_944.w);
  let x_946 : vec4<f32> = u_xlat1;
  let x_948 : vec3<f32> = u_xlat12;
  let x_949 : vec3<f32> = max(vec3<f32>(x_946.x, x_946.y, x_946.z), x_948);
  let x_950 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_949.x, x_949.y, x_949.z, x_950.w);
  let x_952 : vec3<f32> = u_xlat3;
  let x_953 : vec3<f32> = u_xlat12;
  u_xlat3 = min(x_952, x_953);
  let x_955 : vec3<f32> = u_xlat3;
  let x_956 : vec3<f32> = u_xlat10;
  u_xlat3 = min(x_955, x_956);
  let x_958 : vec4<f32> = u_xlat1;
  let x_960 : vec3<f32> = u_xlat10;
  let x_961 : vec3<f32> = max(vec3<f32>(x_958.x, x_958.y, x_958.z), x_960);
  let x_962 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_961.x, x_961.y, x_961.z, x_962.w);
  let x_964 : vec4<f32> = u_xlat1;
  let x_966 : vec3<f32> = u_xlat6;
  let x_967 : vec3<f32> = max(vec3<f32>(x_964.x, x_964.y, x_964.z), x_966);
  let x_968 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_967.x, x_967.y, x_967.z, x_968.w);
  let x_970 : vec3<f32> = u_xlat3;
  let x_971 : vec3<f32> = u_xlat6;
  u_xlat3 = min(x_970, x_971);
  let x_973 : vec3<f32> = u_xlat13;
  let x_974 : vec3<f32> = u_xlat3;
  u_xlat3 = max(x_973, x_974);
  let x_976 : vec3<f32> = u_xlat3;
  let x_977 : vec3<f32> = u_xlat7;
  u_xlat3 = max(x_976, x_977);
  let x_979 : vec4<f32> = u_xlat2;
  let x_981 : vec4<f32> = u_xlat1;
  let x_983 : vec3<f32> = min(vec3<f32>(x_979.x, x_979.y, x_979.z), vec3<f32>(x_981.x, x_981.y, x_981.z));
  let x_984 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_983.x, x_983.y, x_983.z, x_984.w);
  let x_986 : vec4<f32> = u_xlat1;
  let x_988 : vec3<f32> = u_xlat3;
  let x_989 : vec3<f32> = min(vec3<f32>(x_986.x, x_986.y, x_986.z), x_988);
  let x_990 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_989.x, x_989.y, x_989.z, x_990.w);
  let x_993 : f32 = u_xlat1.x;
  u_xlat28.x = (x_993 + 1.0f);
  let x_997 : f32 = u_xlat28.x;
  u_xlat28.x = (1.0f / x_997);
  let x_1000 : vec2<f32> = u_xlat28;
  let x_1002 : vec4<f32> = u_xlat1;
  let x_1004 : vec3<f32> = (vec3<f32>(x_1000.x, x_1000.x, x_1000.x) * vec3<f32>(x_1002.x, x_1002.y, x_1002.z));
  let x_1005 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1004.x, x_1004.y, x_1004.z, x_1005.w);
  let x_1008 : f32 = u_xlat11.x;
  u_xlat28.x = (x_1008 + 1.0f);
  let x_1012 : f32 = u_xlat28.x;
  u_xlat28.x = (1.0f / x_1012);
  let x_1015 : vec3<f32> = u_xlat11;
  let x_1016 : vec2<f32> = u_xlat28;
  let x_1019 : vec4<f32> = u_xlat1;
  let x_1022 : vec3<f32> = ((x_1015 * vec3<f32>(x_1016.x, x_1016.x, x_1016.x)) + -(vec3<f32>(x_1019.x, x_1019.y, x_1019.z)));
  let x_1023 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1022.x, x_1022.y, x_1022.z, x_1023.w);
  let x_1025 : vec2<f32> = vs_TEXCOORD0;
  u_xlat28 = (x_1025 + vec2<f32>(-0.5f, -0.5f));
  let x_1028 : vec3<f32> = u_xlat0;
  let x_1031 : vec2<f32> = u_xlat28;
  let x_1032 : vec2<f32> = (-(vec2<f32>(x_1028.x, x_1028.y)) + x_1031);
  let x_1033 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_1032.x, x_1032.y, x_1033.z);
  let x_1036 : vec3<f32> = u_xlat0;
  let x_1040 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.0f, 0.0f) < abs(vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.x)));
  u_xlatb0 = vec2<bool>(x_1040.x, x_1040.y);
  let x_1043 : bool = u_xlatb0.y;
  let x_1045 : bool = u_xlatb0.x;
  u_xlatb0.x = (x_1043 | x_1045);
  let x_1049 : bool = u_xlatb0.x;
  if (x_1049) {
    x_1050 = 1.0f;
  } else {
    let x_1056 : f32 = x_53.x_TaaFrameInfluence;
    x_1050 = x_1056;
  }
  let x_1057 : f32 = x_1050;
  u_xlat0.x = x_1057;
  let x_1059 : vec3<f32> = u_xlat0;
  let x_1061 : vec4<f32> = u_xlat2;
  let x_1064 : vec4<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_1059.x, x_1059.x, x_1059.x) * vec3<f32>(x_1061.x, x_1061.y, x_1061.z)) + vec3<f32>(x_1064.x, x_1064.y, x_1064.z));
  let x_1068 : f32 = u_xlat0.x;
  u_xlat42 = (-(x_1068) + 1.0f);
  let x_1071 : f32 = u_xlat42;
  u_xlat42 = (1.0f / x_1071);
  let x_1073 : vec3<f32> = u_xlat0;
  let x_1075 : f32 = u_xlat42;
  u_xlat14 = ((vec2<f32>(x_1073.z, x_1073.y) * vec2<f32>(x_1075, x_1075)) + vec2<f32>(-0.501960814f, -0.501960814f));
  let x_1082 : f32 = u_xlat0.x;
  let x_1083 : f32 = u_xlat42;
  let x_1086 : f32 = u_xlat14.y;
  u_xlat1.x = ((x_1082 * x_1083) + -(x_1086));
  let x_1090 : vec3<f32> = u_xlat0;
  let x_1092 : f32 = u_xlat42;
  let x_1095 : vec2<f32> = u_xlat14;
  let x_1097 : vec2<f32> = ((vec2<f32>(x_1090.x, x_1090.x) * vec2<f32>(x_1092, x_1092)) + vec2<f32>(x_1095.y, x_1095.x));
  let x_1098 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_1097.x, x_1098.y, x_1097.y);
  let x_1103 : f32 = u_xlat14.x;
  let x_1106 : f32 = u_xlat1.x;
  SV_Target0.z = (-(x_1103) + x_1106);
  let x_1111 : f32 = u_xlat14.x;
  let x_1114 : f32 = u_xlat0.x;
  SV_Target0.x = (-(x_1111) + x_1114);
  let x_1118 : f32 = u_xlat0.z;
  SV_Target0.y = x_1118;
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

