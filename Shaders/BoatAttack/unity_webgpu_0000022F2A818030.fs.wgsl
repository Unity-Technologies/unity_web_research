struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3260 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3716 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3826 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1839 : f32;
  var x_1852 : f32;
  var x_1864 : f32;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : vec2<bool>;
  var u_xlat54 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var x_3342 : f32;
  var x_3353 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4118 : f32;
  var x_4131 : f32;
  var x_4183 : f32;
  var x_4194 : vec3<f32>;
  var x_4375 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1819 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1819 == 0.0f);
  let x_1822 : vec3<f32> = vs_INTERP0;
  let x_1826 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1822) + x_1826);
  let x_1828 : vec3<f32> = u_xlat27;
  let x_1829 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1828, x_1829);
  let x_1831 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1831);
  let x_1833 : f32 = u_xlat67;
  let x_1835 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1833, x_1833, x_1833) * x_1835);
  let x_1838 : bool = u_xlatb23.x;
  if (x_1838) {
    let x_1843 : f32 = u_xlat27.x;
    x_1839 = x_1843;
  } else {
    let x_1847 : f32 = x_66.unity_MatrixV[0i].z;
    x_1839 = x_1847;
  }
  let x_1848 : f32 = x_1839;
  u_xlat6.x = x_1848;
  let x_1851 : bool = u_xlatb23.x;
  if (x_1851) {
    let x_1856 : f32 = u_xlat27.y;
    x_1852 = x_1856;
  } else {
    let x_1859 : f32 = x_66.unity_MatrixV[1i].z;
    x_1852 = x_1859;
  }
  let x_1860 : f32 = x_1852;
  u_xlat6.y = x_1860;
  let x_1863 : bool = u_xlatb23.x;
  if (x_1863) {
    let x_1868 : f32 = u_xlat27.z;
    x_1864 = x_1868;
  } else {
    let x_1871 : f32 = x_66.unity_MatrixV[2i].z;
    x_1864 = x_1871;
  }
  let x_1872 : f32 = x_1864;
  u_xlat6.z = x_1872;
  let x_1881 : vec2<f32> = vs_INTERP5;
  let x_1883 : f32 = x_66.x_GlobalMipBias.x;
  let x_1884 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1881, x_1883);
  u_xlat27 = vec3<f32>(x_1884.x, x_1884.y, x_1884.z);
  let x_1887 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1888 : vec2<f32> = vec2<f32>(x_1887.x, x_1887.y);
  let x_1892 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1888.x, x_1888.y));
  let x_1893 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1892.x, x_1893.y, x_1892.y);
  let x_1895 : vec3<f32> = u_xlat23;
  let x_1897 : vec4<f32> = hlslcc_FragCoord;
  let x_1899 : vec2<f32> = (vec2<f32>(x_1895.x, x_1895.z) * vec2<f32>(x_1897.x, x_1897.y));
  let x_1900 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1899.x, x_1899.y, x_1900.z, x_1900.w);
  let x_1903 : f32 = u_xlat7.y;
  let x_1906 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1909 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1903 * x_1906) + x_1909);
  let x_1913 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1913) + 1.0f);
  let x_1918 : f32 = u_xlat3.x;
  u_xlat3.x = x_1918;
  let x_1921 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1921, 0.0f, 1.0f);
  let x_1925 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1925, 1.0f);
  let x_1928 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1928 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1933 : f32 = u_xlat3.x;
  u_xlat23.x = (-(x_1933) + 1.0f);
  let x_1938 : f32 = u_xlat23.x;
  let x_1940 : f32 = u_xlat23.x;
  u_xlat67 = (x_1938 * x_1940);
  let x_1942 : f32 = u_xlat67;
  u_xlat67 = max(x_1942, 0.0078125f);
  let x_1945 : f32 = u_xlat67;
  let x_1946 : f32 = u_xlat67;
  u_xlat68 = (x_1945 * x_1946);
  let x_1949 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1949 + 0.040000021f);
  let x_1954 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1954, 1.0f);
  let x_1958 : f32 = u_xlat67;
  u_xlat72 = ((x_1958 * 4.0f) + 2.0f);
  let x_1966 : vec4<f32> = u_xlat7;
  let x_1969 : f32 = x_66.x_GlobalMipBias.x;
  let x_1970 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1966.x, x_1966.z), x_1969);
  u_xlat7.x = x_1970.x;
  let x_1974 : f32 = u_xlat7.x;
  u_xlat29.x = (x_1974 + -1.0f);
  let x_1978 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1980 : f32 = u_xlat29.x;
  u_xlat29.x = ((x_1978 * x_1980) + 1.0f);
  let x_1985 : f32 = u_xlat7.x;
  let x_1987 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_1985, x_1987);
  let x_1990 : bool = u_xlatb66;
  if (x_1990) {
    let x_1994 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_1994 == 1.0f);
    let x_1996 : bool = u_xlatb66;
    if (x_1996) {
      let x_1999 : vec4<f32> = u_xlat4;
      let x_2002 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_1999.x, x_1999.y, x_1999.x, x_1999.y) + x_2002);
      let x_2005 : vec4<f32> = u_xlat8;
      let x_2006 : vec2<f32> = vec2<f32>(x_2005.x, x_2005.y);
      let x_2008 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2006.x, x_2006.y, x_2008);
      let x_2015 : vec3<f32> = txVec30;
      let x_2017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2015.xy, x_2015.z);
      u_xlat9.x = x_2017;
      let x_2020 : vec4<f32> = u_xlat8;
      let x_2021 : vec2<f32> = vec2<f32>(x_2020.z, x_2020.w);
      let x_2023 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2021.x, x_2021.y, x_2023);
      let x_2030 : vec3<f32> = txVec31;
      let x_2032 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2030.xy, x_2030.z);
      u_xlat9.y = x_2032;
      let x_2034 : vec4<f32> = u_xlat4;
      let x_2037 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2034.x, x_2034.y, x_2034.x, x_2034.y) + x_2037);
      let x_2040 : vec4<f32> = u_xlat8;
      let x_2041 : vec2<f32> = vec2<f32>(x_2040.x, x_2040.y);
      let x_2043 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2041.x, x_2041.y, x_2043);
      let x_2050 : vec3<f32> = txVec32;
      let x_2052 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2050.xy, x_2050.z);
      u_xlat9.z = x_2052;
      let x_2055 : vec4<f32> = u_xlat8;
      let x_2056 : vec2<f32> = vec2<f32>(x_2055.z, x_2055.w);
      let x_2058 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2056.x, x_2056.y, x_2058);
      let x_2065 : vec3<f32> = txVec33;
      let x_2067 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2065.xy, x_2065.z);
      u_xlat9.w = x_2067;
      let x_2069 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2069, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2076 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb51.x = (x_2076 == 2.0f);
      let x_2080 : bool = u_xlatb51.x;
      if (x_2080) {
        let x_2083 : vec4<f32> = u_xlat4;
        let x_2086 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2083.x, x_2083.y) * vec2<f32>(x_2086.z, x_2086.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2090 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2090);
        let x_2092 : vec4<f32> = u_xlat4;
        let x_2095 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2098 : vec2<f32> = u_xlat51;
        let x_2100 : vec2<f32> = ((vec2<f32>(x_2092.x, x_2092.y) * vec2<f32>(x_2095.z, x_2095.w)) + -(x_2098));
        let x_2101 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2100.x, x_2100.y, x_2101.z, x_2101.w);
        let x_2103 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2103.x, x_2103.x, x_2103.y, x_2103.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2106 : vec4<f32> = u_xlat9;
        let x_2108 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2106.x, x_2106.x, x_2106.z, x_2106.z) * vec4<f32>(x_2108.x, x_2108.x, x_2108.z, x_2108.z));
        let x_2111 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2111.y, x_2111.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2114 : vec4<f32> = u_xlat10;
        let x_2117 : vec4<f32> = u_xlat8;
        let x_2120 : vec2<f32> = ((vec2<f32>(x_2114.x, x_2114.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2117.x, x_2117.y)));
        let x_2121 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2120.x, x_2121.y, x_2120.y, x_2121.w);
        let x_2123 : vec4<f32> = u_xlat8;
        let x_2126 : vec2<f32> = (-(vec2<f32>(x_2123.x, x_2123.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2127 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2126.x, x_2126.y, x_2127.z, x_2127.w);
        let x_2130 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2130.x, x_2130.y), vec2<f32>(0.0f, 0.0f));
        let x_2133 : vec2<f32> = u_xlat54;
        let x_2135 : vec2<f32> = u_xlat54;
        let x_2137 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2133) * x_2135) + vec2<f32>(x_2137.x, x_2137.y));
        let x_2140 : vec4<f32> = u_xlat8;
        let x_2142 : vec2<f32> = max(vec2<f32>(x_2140.x, x_2140.y), vec2<f32>(0.0f, 0.0f));
        let x_2143 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2142.x, x_2142.y, x_2143.z, x_2143.w);
        let x_2145 : vec4<f32> = u_xlat8;
        let x_2148 : vec4<f32> = u_xlat8;
        let x_2151 : vec4<f32> = u_xlat9;
        let x_2153 : vec2<f32> = ((-(vec2<f32>(x_2145.x, x_2145.y)) * vec2<f32>(x_2148.x, x_2148.y)) + vec2<f32>(x_2151.y, x_2151.w));
        let x_2154 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2153.x, x_2153.y, x_2154.z, x_2154.w);
        let x_2156 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2156 + vec2<f32>(1.0f, 1.0f));
        let x_2158 : vec4<f32> = u_xlat8;
        let x_2160 : vec2<f32> = (vec2<f32>(x_2158.x, x_2158.y) + vec2<f32>(1.0f, 1.0f));
        let x_2161 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2160.x, x_2160.y, x_2161.z, x_2161.w);
        let x_2163 : vec4<f32> = u_xlat9;
        let x_2165 : vec2<f32> = (vec2<f32>(x_2163.x, x_2163.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2166 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2165.x, x_2165.y, x_2166.z, x_2166.w);
        let x_2168 : vec4<f32> = u_xlat10;
        let x_2170 : vec2<f32> = (vec2<f32>(x_2168.x, x_2168.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2171 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2170.x, x_2170.y, x_2171.z, x_2171.w);
        let x_2173 : vec2<f32> = u_xlat54;
        let x_2174 : vec2<f32> = (x_2173 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2175 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2174.x, x_2174.y, x_2175.z, x_2175.w);
        let x_2177 : vec4<f32> = u_xlat8;
        let x_2179 : vec2<f32> = (vec2<f32>(x_2177.x, x_2177.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2180 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2179.x, x_2179.y, x_2180.z, x_2180.w);
        let x_2182 : vec4<f32> = u_xlat9;
        let x_2184 : vec2<f32> = (vec2<f32>(x_2182.y, x_2182.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2185 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2184.x, x_2184.y, x_2185.z, x_2185.w);
        let x_2188 : f32 = u_xlat10.x;
        u_xlat11.z = x_2188;
        let x_2191 : f32 = u_xlat8.x;
        u_xlat11.w = x_2191;
        let x_2194 : f32 = u_xlat13.x;
        u_xlat12.z = x_2194;
        let x_2197 : f32 = u_xlat52.x;
        u_xlat12.w = x_2197;
        let x_2199 : vec4<f32> = u_xlat11;
        let x_2201 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2199.z, x_2199.w, x_2199.x, x_2199.z) + vec4<f32>(x_2201.z, x_2201.w, x_2201.x, x_2201.z));
        let x_2205 : f32 = u_xlat11.y;
        u_xlat10.z = x_2205;
        let x_2208 : f32 = u_xlat8.y;
        u_xlat10.w = x_2208;
        let x_2211 : f32 = u_xlat12.y;
        u_xlat13.z = x_2211;
        let x_2214 : f32 = u_xlat52.y;
        u_xlat13.w = x_2214;
        let x_2216 : vec4<f32> = u_xlat10;
        let x_2218 : vec4<f32> = u_xlat13;
        let x_2220 : vec3<f32> = (vec3<f32>(x_2216.z, x_2216.y, x_2216.w) + vec3<f32>(x_2218.z, x_2218.y, x_2218.w));
        let x_2221 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2220.x, x_2220.y, x_2220.z, x_2221.w);
        let x_2223 : vec4<f32> = u_xlat12;
        let x_2225 : vec4<f32> = u_xlat9;
        let x_2227 : vec3<f32> = (vec3<f32>(x_2223.x, x_2223.z, x_2223.w) / vec3<f32>(x_2225.z, x_2225.w, x_2225.y));
        let x_2228 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2227.x, x_2227.y, x_2227.z, x_2228.w);
        let x_2230 : vec4<f32> = u_xlat10;
        let x_2232 : vec3<f32> = (vec3<f32>(x_2230.x, x_2230.y, x_2230.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2233 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2232.x, x_2232.y, x_2232.z, x_2233.w);
        let x_2235 : vec4<f32> = u_xlat13;
        let x_2237 : vec4<f32> = u_xlat8;
        let x_2239 : vec3<f32> = (vec3<f32>(x_2235.z, x_2235.y, x_2235.w) / vec3<f32>(x_2237.x, x_2237.y, x_2237.z));
        let x_2240 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2239.x, x_2239.y, x_2239.z, x_2240.w);
        let x_2242 : vec4<f32> = u_xlat11;
        let x_2244 : vec3<f32> = (vec3<f32>(x_2242.x, x_2242.y, x_2242.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2245 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2244.x, x_2244.y, x_2244.z, x_2245.w);
        let x_2247 : vec4<f32> = u_xlat10;
        let x_2250 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2252 : vec3<f32> = (vec3<f32>(x_2247.y, x_2247.x, x_2247.z) * vec3<f32>(x_2250.x, x_2250.x, x_2250.x));
        let x_2253 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2252.x, x_2252.y, x_2252.z, x_2253.w);
        let x_2255 : vec4<f32> = u_xlat11;
        let x_2258 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2260 : vec3<f32> = (vec3<f32>(x_2255.x, x_2255.y, x_2255.z) * vec3<f32>(x_2258.y, x_2258.y, x_2258.y));
        let x_2261 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2260.x, x_2260.y, x_2260.z, x_2261.w);
        let x_2264 : f32 = u_xlat11.x;
        u_xlat10.w = x_2264;
        let x_2266 : vec2<f32> = u_xlat51;
        let x_2269 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2272 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2266.x, x_2266.y, x_2266.x, x_2266.y) * vec4<f32>(x_2269.x, x_2269.y, x_2269.x, x_2269.y)) + vec4<f32>(x_2272.y, x_2272.w, x_2272.x, x_2272.w));
        let x_2275 : vec2<f32> = u_xlat51;
        let x_2277 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2280 : vec4<f32> = u_xlat10;
        let x_2282 : vec2<f32> = ((x_2275 * vec2<f32>(x_2277.x, x_2277.y)) + vec2<f32>(x_2280.z, x_2280.w));
        let x_2283 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2282.x, x_2282.y, x_2283.z, x_2283.w);
        let x_2286 : f32 = u_xlat10.y;
        u_xlat11.w = x_2286;
        let x_2288 : vec4<f32> = u_xlat11;
        let x_2289 : vec2<f32> = vec2<f32>(x_2288.y, x_2288.z);
        let x_2290 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2290.x, x_2289.x, x_2290.z, x_2289.y);
        let x_2292 : vec2<f32> = u_xlat51;
        let x_2295 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2298 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2292.x, x_2292.y, x_2292.x, x_2292.y) * vec4<f32>(x_2295.x, x_2295.y, x_2295.x, x_2295.y)) + vec4<f32>(x_2298.x, x_2298.y, x_2298.z, x_2298.y));
        let x_2301 : vec2<f32> = u_xlat51;
        let x_2304 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2307 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2301.x, x_2301.y, x_2301.x, x_2301.y) * vec4<f32>(x_2304.x, x_2304.y, x_2304.x, x_2304.y)) + vec4<f32>(x_2307.w, x_2307.y, x_2307.w, x_2307.z));
        let x_2310 : vec2<f32> = u_xlat51;
        let x_2313 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2316 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2310.x, x_2310.y, x_2310.x, x_2310.y) * vec4<f32>(x_2313.x, x_2313.y, x_2313.x, x_2313.y)) + vec4<f32>(x_2316.x, x_2316.w, x_2316.z, x_2316.w));
        let x_2319 : vec4<f32> = u_xlat8;
        let x_2321 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2319.x, x_2319.x, x_2319.x, x_2319.y) * vec4<f32>(x_2321.z, x_2321.w, x_2321.y, x_2321.z));
        let x_2324 : vec4<f32> = u_xlat8;
        let x_2326 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2324.y, x_2324.y, x_2324.z, x_2324.z) * x_2326);
        let x_2329 : f32 = u_xlat8.z;
        let x_2331 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2329 * x_2331);
        let x_2335 : vec4<f32> = u_xlat12;
        let x_2336 : vec2<f32> = vec2<f32>(x_2335.x, x_2335.y);
        let x_2338 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2336.x, x_2336.y, x_2338);
        let x_2346 : vec3<f32> = txVec34;
        let x_2348 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2346.xy, x_2346.z);
        u_xlat73 = x_2348;
        let x_2350 : vec4<f32> = u_xlat12;
        let x_2351 : vec2<f32> = vec2<f32>(x_2350.z, x_2350.w);
        let x_2353 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2351.x, x_2351.y, x_2353);
        let x_2360 : vec3<f32> = txVec35;
        let x_2362 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2360.xy, x_2360.z);
        u_xlat8.x = x_2362;
        let x_2365 : f32 = u_xlat8.x;
        let x_2367 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2365 * x_2367);
        let x_2371 : f32 = u_xlat15.x;
        let x_2372 : f32 = u_xlat73;
        let x_2375 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2371 * x_2372) + x_2375);
        let x_2378 : vec4<f32> = u_xlat13;
        let x_2379 : vec2<f32> = vec2<f32>(x_2378.x, x_2378.y);
        let x_2381 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2379.x, x_2379.y, x_2381);
        let x_2388 : vec3<f32> = txVec36;
        let x_2390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2388.xy, x_2388.z);
        u_xlat8.x = x_2390;
        let x_2393 : f32 = u_xlat15.z;
        let x_2395 : f32 = u_xlat8.x;
        let x_2397 : f32 = u_xlat73;
        u_xlat73 = ((x_2393 * x_2395) + x_2397);
        let x_2400 : vec4<f32> = u_xlat11;
        let x_2401 : vec2<f32> = vec2<f32>(x_2400.x, x_2400.y);
        let x_2403 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2401.x, x_2401.y, x_2403);
        let x_2410 : vec3<f32> = txVec37;
        let x_2412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2410.xy, x_2410.z);
        u_xlat8.x = x_2412;
        let x_2415 : f32 = u_xlat15.w;
        let x_2417 : f32 = u_xlat8.x;
        let x_2419 : f32 = u_xlat73;
        u_xlat73 = ((x_2415 * x_2417) + x_2419);
        let x_2422 : vec4<f32> = u_xlat14;
        let x_2423 : vec2<f32> = vec2<f32>(x_2422.x, x_2422.y);
        let x_2425 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2423.x, x_2423.y, x_2425);
        let x_2432 : vec3<f32> = txVec38;
        let x_2434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2432.xy, x_2432.z);
        u_xlat8.x = x_2434;
        let x_2437 : f32 = u_xlat16.x;
        let x_2439 : f32 = u_xlat8.x;
        let x_2441 : f32 = u_xlat73;
        u_xlat73 = ((x_2437 * x_2439) + x_2441);
        let x_2444 : vec4<f32> = u_xlat14;
        let x_2445 : vec2<f32> = vec2<f32>(x_2444.z, x_2444.w);
        let x_2447 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2445.x, x_2445.y, x_2447);
        let x_2454 : vec3<f32> = txVec39;
        let x_2456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2454.xy, x_2454.z);
        u_xlat8.x = x_2456;
        let x_2459 : f32 = u_xlat16.y;
        let x_2461 : f32 = u_xlat8.x;
        let x_2463 : f32 = u_xlat73;
        u_xlat73 = ((x_2459 * x_2461) + x_2463);
        let x_2466 : vec4<f32> = u_xlat11;
        let x_2467 : vec2<f32> = vec2<f32>(x_2466.z, x_2466.w);
        let x_2469 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2467.x, x_2467.y, x_2469);
        let x_2476 : vec3<f32> = txVec40;
        let x_2478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2476.xy, x_2476.z);
        u_xlat8.x = x_2478;
        let x_2481 : f32 = u_xlat16.z;
        let x_2483 : f32 = u_xlat8.x;
        let x_2485 : f32 = u_xlat73;
        u_xlat73 = ((x_2481 * x_2483) + x_2485);
        let x_2488 : vec4<f32> = u_xlat10;
        let x_2489 : vec2<f32> = vec2<f32>(x_2488.x, x_2488.y);
        let x_2491 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2489.x, x_2489.y, x_2491);
        let x_2498 : vec3<f32> = txVec41;
        let x_2500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2498.xy, x_2498.z);
        u_xlat8.x = x_2500;
        let x_2503 : f32 = u_xlat16.w;
        let x_2505 : f32 = u_xlat8.x;
        let x_2507 : f32 = u_xlat73;
        u_xlat73 = ((x_2503 * x_2505) + x_2507);
        let x_2510 : vec4<f32> = u_xlat10;
        let x_2511 : vec2<f32> = vec2<f32>(x_2510.z, x_2510.w);
        let x_2513 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2511.x, x_2511.y, x_2513);
        let x_2520 : vec3<f32> = txVec42;
        let x_2522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2520.xy, x_2520.z);
        u_xlat8.x = x_2522;
        let x_2525 : f32 = u_xlat51.x;
        let x_2527 : f32 = u_xlat8.x;
        let x_2529 : f32 = u_xlat73;
        u_xlat66 = ((x_2525 * x_2527) + x_2529);
      } else {
        let x_2532 : vec4<f32> = u_xlat4;
        let x_2535 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2532.x, x_2532.y) * vec2<f32>(x_2535.z, x_2535.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2539 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2539);
        let x_2541 : vec4<f32> = u_xlat4;
        let x_2544 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2547 : vec2<f32> = u_xlat51;
        let x_2549 : vec2<f32> = ((vec2<f32>(x_2541.x, x_2541.y) * vec2<f32>(x_2544.z, x_2544.w)) + -(x_2547));
        let x_2550 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2549.x, x_2549.y, x_2550.z, x_2550.w);
        let x_2552 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2552.x, x_2552.x, x_2552.y, x_2552.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2555 : vec4<f32> = u_xlat9;
        let x_2557 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2555.x, x_2555.x, x_2555.z, x_2555.z) * vec4<f32>(x_2557.x, x_2557.x, x_2557.z, x_2557.z));
        let x_2560 : vec4<f32> = u_xlat10;
        let x_2562 : vec2<f32> = (vec2<f32>(x_2560.y, x_2560.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2563 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2563.x, x_2562.x, x_2563.z, x_2562.y);
        let x_2565 : vec4<f32> = u_xlat10;
        let x_2568 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2565.x, x_2565.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2568.x, x_2568.y)));
        let x_2572 : vec4<f32> = u_xlat8;
        let x_2575 : vec2<f32> = (-(vec2<f32>(x_2572.x, x_2572.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2575.x, x_2576.y, x_2575.y, x_2576.w);
        let x_2578 : vec4<f32> = u_xlat8;
        let x_2580 : vec2<f32> = min(vec2<f32>(x_2578.x, x_2578.y), vec2<f32>(0.0f, 0.0f));
        let x_2581 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2580.x, x_2580.y, x_2581.z, x_2581.w);
        let x_2583 : vec4<f32> = u_xlat10;
        let x_2586 : vec4<f32> = u_xlat10;
        let x_2589 : vec4<f32> = u_xlat9;
        let x_2591 : vec2<f32> = ((-(vec2<f32>(x_2583.x, x_2583.y)) * vec2<f32>(x_2586.x, x_2586.y)) + vec2<f32>(x_2589.x, x_2589.z));
        let x_2592 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2591.x, x_2592.y, x_2591.y, x_2592.w);
        let x_2594 : vec4<f32> = u_xlat8;
        let x_2596 : vec2<f32> = max(vec2<f32>(x_2594.x, x_2594.y), vec2<f32>(0.0f, 0.0f));
        let x_2597 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2596.x, x_2596.y, x_2597.z, x_2597.w);
        let x_2599 : vec4<f32> = u_xlat10;
        let x_2602 : vec4<f32> = u_xlat10;
        let x_2605 : vec4<f32> = u_xlat9;
        let x_2607 : vec2<f32> = ((-(vec2<f32>(x_2599.x, x_2599.y)) * vec2<f32>(x_2602.x, x_2602.y)) + vec2<f32>(x_2605.y, x_2605.w));
        let x_2608 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2608.x, x_2607.x, x_2608.z, x_2607.y);
        let x_2610 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2610 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2613 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2613 * 0.081632003f);
        let x_2616 : vec2<f32> = u_xlat52;
        let x_2618 : vec2<f32> = (vec2<f32>(x_2616.y, x_2616.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2619 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2618.x, x_2618.y, x_2619.z, x_2619.w);
        let x_2621 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2621.x, x_2621.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2625 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2625 * 0.081632003f);
        let x_2629 : f32 = u_xlat12.y;
        u_xlat10.x = x_2629;
        let x_2631 : vec4<f32> = u_xlat8;
        let x_2634 : vec2<f32> = ((vec2<f32>(x_2631.x, x_2631.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2635 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2635.x, x_2634.x, x_2635.z, x_2634.y);
        let x_2637 : vec4<f32> = u_xlat8;
        let x_2640 : vec2<f32> = ((vec2<f32>(x_2637.x, x_2637.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2641 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2640.x, x_2641.y, x_2640.y, x_2641.w);
        let x_2644 : f32 = u_xlat52.x;
        u_xlat9.y = x_2644;
        let x_2647 : f32 = u_xlat11.y;
        u_xlat9.w = x_2647;
        let x_2649 : vec4<f32> = u_xlat9;
        let x_2650 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2649 + x_2650);
        let x_2652 : vec4<f32> = u_xlat8;
        let x_2655 : vec2<f32> = ((vec2<f32>(x_2652.y, x_2652.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2656 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2656.x, x_2655.x, x_2656.z, x_2655.y);
        let x_2658 : vec4<f32> = u_xlat8;
        let x_2661 : vec2<f32> = ((vec2<f32>(x_2658.y, x_2658.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2662 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2661.x, x_2662.y, x_2661.y, x_2662.w);
        let x_2665 : f32 = u_xlat52.y;
        u_xlat11.y = x_2665;
        let x_2667 : vec4<f32> = u_xlat11;
        let x_2668 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2667 + x_2668);
        let x_2670 : vec4<f32> = u_xlat9;
        let x_2671 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2670 / x_2671);
        let x_2673 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2673 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2675 : vec4<f32> = u_xlat11;
        let x_2676 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2675 / x_2676);
        let x_2678 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2678 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2680 : vec4<f32> = u_xlat9;
        let x_2683 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2680.w, x_2680.x, x_2680.y, x_2680.z) * vec4<f32>(x_2683.x, x_2683.x, x_2683.x, x_2683.x));
        let x_2686 : vec4<f32> = u_xlat11;
        let x_2689 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2686.x, x_2686.w, x_2686.y, x_2686.z) * vec4<f32>(x_2689.y, x_2689.y, x_2689.y, x_2689.y));
        let x_2692 : vec4<f32> = u_xlat9;
        let x_2693 : vec3<f32> = vec3<f32>(x_2692.y, x_2692.z, x_2692.w);
        let x_2694 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2693.x, x_2694.y, x_2693.y, x_2693.z);
        let x_2697 : f32 = u_xlat11.x;
        u_xlat12.y = x_2697;
        let x_2699 : vec2<f32> = u_xlat51;
        let x_2702 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2705 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2699.x, x_2699.y, x_2699.x, x_2699.y) * vec4<f32>(x_2702.x, x_2702.y, x_2702.x, x_2702.y)) + vec4<f32>(x_2705.x, x_2705.y, x_2705.z, x_2705.y));
        let x_2708 : vec2<f32> = u_xlat51;
        let x_2710 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2713 : vec4<f32> = u_xlat12;
        let x_2715 : vec2<f32> = ((x_2708 * vec2<f32>(x_2710.x, x_2710.y)) + vec2<f32>(x_2713.w, x_2713.y));
        let x_2716 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2715.x, x_2715.y, x_2716.z, x_2716.w);
        let x_2719 : f32 = u_xlat12.y;
        u_xlat9.y = x_2719;
        let x_2722 : f32 = u_xlat11.z;
        u_xlat12.y = x_2722;
        let x_2724 : vec2<f32> = u_xlat51;
        let x_2727 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2730 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2724.x, x_2724.y, x_2724.x, x_2724.y) * vec4<f32>(x_2727.x, x_2727.y, x_2727.x, x_2727.y)) + vec4<f32>(x_2730.x, x_2730.y, x_2730.z, x_2730.y));
        let x_2734 : vec2<f32> = u_xlat51;
        let x_2736 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2739 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2734 * vec2<f32>(x_2736.x, x_2736.y)) + vec2<f32>(x_2739.w, x_2739.y));
        let x_2743 : f32 = u_xlat12.y;
        u_xlat9.z = x_2743;
        let x_2745 : vec2<f32> = u_xlat51;
        let x_2748 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2751 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2745.x, x_2745.y, x_2745.x, x_2745.y) * vec4<f32>(x_2748.x, x_2748.y, x_2748.x, x_2748.y)) + vec4<f32>(x_2751.x, x_2751.y, x_2751.x, x_2751.z));
        let x_2755 : f32 = u_xlat11.w;
        u_xlat12.y = x_2755;
        let x_2757 : vec2<f32> = u_xlat51;
        let x_2760 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2763 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2757.x, x_2757.y, x_2757.x, x_2757.y) * vec4<f32>(x_2760.x, x_2760.y, x_2760.x, x_2760.y)) + vec4<f32>(x_2763.x, x_2763.y, x_2763.z, x_2763.y));
        let x_2767 : vec2<f32> = u_xlat51;
        let x_2769 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2772 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2767 * vec2<f32>(x_2769.x, x_2769.y)) + vec2<f32>(x_2772.w, x_2772.y));
        let x_2776 : f32 = u_xlat12.y;
        u_xlat9.w = x_2776;
        let x_2778 : vec2<f32> = u_xlat51;
        let x_2780 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2783 : vec4<f32> = u_xlat9;
        let x_2785 : vec2<f32> = ((x_2778 * vec2<f32>(x_2780.x, x_2780.y)) + vec2<f32>(x_2783.x, x_2783.w));
        let x_2786 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2785.x, x_2785.y, x_2786.z, x_2786.w);
        let x_2788 : vec4<f32> = u_xlat12;
        let x_2789 : vec3<f32> = vec3<f32>(x_2788.x, x_2788.z, x_2788.w);
        let x_2790 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2789.x, x_2790.y, x_2789.y, x_2789.z);
        let x_2792 : vec2<f32> = u_xlat51;
        let x_2795 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2798 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2792.x, x_2792.y, x_2792.x, x_2792.y) * vec4<f32>(x_2795.x, x_2795.y, x_2795.x, x_2795.y)) + vec4<f32>(x_2798.x, x_2798.y, x_2798.z, x_2798.y));
        let x_2802 : vec2<f32> = u_xlat51;
        let x_2804 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2807 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2802 * vec2<f32>(x_2804.x, x_2804.y)) + vec2<f32>(x_2807.w, x_2807.y));
        let x_2811 : f32 = u_xlat9.x;
        u_xlat11.x = x_2811;
        let x_2813 : vec2<f32> = u_xlat51;
        let x_2815 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2818 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_2813 * vec2<f32>(x_2815.x, x_2815.y)) + vec2<f32>(x_2818.x, x_2818.y));
        let x_2822 : vec4<f32> = u_xlat8;
        let x_2824 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2822.x, x_2822.x, x_2822.x, x_2822.x) * x_2824);
        let x_2827 : vec4<f32> = u_xlat8;
        let x_2829 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2827.y, x_2827.y, x_2827.y, x_2827.y) * x_2829);
        let x_2832 : vec4<f32> = u_xlat8;
        let x_2834 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_2832.z, x_2832.z, x_2832.z, x_2832.z) * x_2834);
        let x_2836 : vec4<f32> = u_xlat8;
        let x_2838 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_2836.w, x_2836.w, x_2836.w, x_2836.w) * x_2838);
        let x_2841 : vec4<f32> = u_xlat13;
        let x_2842 : vec2<f32> = vec2<f32>(x_2841.x, x_2841.y);
        let x_2844 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2842.x, x_2842.y, x_2844);
        let x_2851 : vec3<f32> = txVec43;
        let x_2853 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2851.xy, x_2851.z);
        u_xlat9.x = x_2853;
        let x_2856 : vec4<f32> = u_xlat13;
        let x_2857 : vec2<f32> = vec2<f32>(x_2856.z, x_2856.w);
        let x_2859 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2857.x, x_2857.y, x_2859);
        let x_2867 : vec3<f32> = txVec44;
        let x_2869 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2867.xy, x_2867.z);
        u_xlat75 = x_2869;
        let x_2870 : f32 = u_xlat75;
        let x_2872 : f32 = u_xlat19.y;
        u_xlat75 = (x_2870 * x_2872);
        let x_2875 : f32 = u_xlat19.x;
        let x_2877 : f32 = u_xlat9.x;
        let x_2879 : f32 = u_xlat75;
        u_xlat9.x = ((x_2875 * x_2877) + x_2879);
        let x_2883 : vec4<f32> = u_xlat14;
        let x_2884 : vec2<f32> = vec2<f32>(x_2883.x, x_2883.y);
        let x_2886 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2884.x, x_2884.y, x_2886);
        let x_2893 : vec3<f32> = txVec45;
        let x_2895 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2893.xy, x_2893.z);
        u_xlat75 = x_2895;
        let x_2897 : f32 = u_xlat19.z;
        let x_2898 : f32 = u_xlat75;
        let x_2901 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2897 * x_2898) + x_2901);
        let x_2905 : vec4<f32> = u_xlat16;
        let x_2906 : vec2<f32> = vec2<f32>(x_2905.x, x_2905.y);
        let x_2908 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2906.x, x_2906.y, x_2908);
        let x_2915 : vec3<f32> = txVec46;
        let x_2917 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2915.xy, x_2915.z);
        u_xlat75 = x_2917;
        let x_2919 : f32 = u_xlat19.w;
        let x_2920 : f32 = u_xlat75;
        let x_2923 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2919 * x_2920) + x_2923);
        let x_2927 : vec4<f32> = u_xlat15;
        let x_2928 : vec2<f32> = vec2<f32>(x_2927.x, x_2927.y);
        let x_2930 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2928.x, x_2928.y, x_2930);
        let x_2937 : vec3<f32> = txVec47;
        let x_2939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2937.xy, x_2937.z);
        u_xlat75 = x_2939;
        let x_2941 : f32 = u_xlat20.x;
        let x_2942 : f32 = u_xlat75;
        let x_2945 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2941 * x_2942) + x_2945);
        let x_2949 : vec4<f32> = u_xlat15;
        let x_2950 : vec2<f32> = vec2<f32>(x_2949.z, x_2949.w);
        let x_2952 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2950.x, x_2950.y, x_2952);
        let x_2959 : vec3<f32> = txVec48;
        let x_2961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2959.xy, x_2959.z);
        u_xlat75 = x_2961;
        let x_2963 : f32 = u_xlat20.y;
        let x_2964 : f32 = u_xlat75;
        let x_2967 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2963 * x_2964) + x_2967);
        let x_2971 : vec2<f32> = u_xlat58;
        let x_2973 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_2971.x, x_2971.y, x_2973);
        let x_2980 : vec3<f32> = txVec49;
        let x_2982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2980.xy, x_2980.z);
        u_xlat75 = x_2982;
        let x_2984 : f32 = u_xlat20.z;
        let x_2985 : f32 = u_xlat75;
        let x_2988 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2984 * x_2985) + x_2988);
        let x_2992 : vec4<f32> = u_xlat16;
        let x_2993 : vec2<f32> = vec2<f32>(x_2992.z, x_2992.w);
        let x_2995 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_2993.x, x_2993.y, x_2995);
        let x_3002 : vec3<f32> = txVec50;
        let x_3004 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3002.xy, x_3002.z);
        u_xlat75 = x_3004;
        let x_3006 : f32 = u_xlat20.w;
        let x_3007 : f32 = u_xlat75;
        let x_3010 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3006 * x_3007) + x_3010);
        let x_3014 : vec4<f32> = u_xlat17;
        let x_3015 : vec2<f32> = vec2<f32>(x_3014.x, x_3014.y);
        let x_3017 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3015.x, x_3015.y, x_3017);
        let x_3024 : vec3<f32> = txVec51;
        let x_3026 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3024.xy, x_3024.z);
        u_xlat75 = x_3026;
        let x_3028 : f32 = u_xlat21.x;
        let x_3029 : f32 = u_xlat75;
        let x_3032 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3028 * x_3029) + x_3032);
        let x_3036 : vec4<f32> = u_xlat17;
        let x_3037 : vec2<f32> = vec2<f32>(x_3036.z, x_3036.w);
        let x_3039 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3037.x, x_3037.y, x_3039);
        let x_3046 : vec3<f32> = txVec52;
        let x_3048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3046.xy, x_3046.z);
        u_xlat75 = x_3048;
        let x_3050 : f32 = u_xlat21.y;
        let x_3051 : f32 = u_xlat75;
        let x_3054 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3050 * x_3051) + x_3054);
        let x_3058 : vec2<f32> = u_xlat31;
        let x_3060 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3058.x, x_3058.y, x_3060);
        let x_3067 : vec3<f32> = txVec53;
        let x_3069 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3067.xy, x_3067.z);
        u_xlat31.x = x_3069;
        let x_3072 : f32 = u_xlat21.z;
        let x_3074 : f32 = u_xlat31.x;
        let x_3077 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3072 * x_3074) + x_3077);
        let x_3081 : vec4<f32> = u_xlat18;
        let x_3082 : vec2<f32> = vec2<f32>(x_3081.x, x_3081.y);
        let x_3084 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3082.x, x_3082.y, x_3084);
        let x_3091 : vec3<f32> = txVec54;
        let x_3093 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3091.xy, x_3091.z);
        u_xlat31.x = x_3093;
        let x_3096 : f32 = u_xlat21.w;
        let x_3098 : f32 = u_xlat31.x;
        let x_3101 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3096 * x_3098) + x_3101);
        let x_3105 : vec4<f32> = u_xlat12;
        let x_3106 : vec2<f32> = vec2<f32>(x_3105.x, x_3105.y);
        let x_3108 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3106.x, x_3106.y, x_3108);
        let x_3115 : vec3<f32> = txVec55;
        let x_3117 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3115.xy, x_3115.z);
        u_xlat31.x = x_3117;
        let x_3120 : f32 = u_xlat8.x;
        let x_3122 : f32 = u_xlat31.x;
        let x_3125 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3120 * x_3122) + x_3125);
        let x_3129 : vec4<f32> = u_xlat12;
        let x_3130 : vec2<f32> = vec2<f32>(x_3129.z, x_3129.w);
        let x_3132 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3130.x, x_3130.y, x_3132);
        let x_3139 : vec3<f32> = txVec56;
        let x_3141 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3139.xy, x_3139.z);
        u_xlat9.x = x_3141;
        let x_3144 : f32 = u_xlat8.y;
        let x_3146 : f32 = u_xlat9.x;
        let x_3149 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3144 * x_3146) + x_3149);
        let x_3153 : vec2<f32> = u_xlat55;
        let x_3155 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3153.x, x_3153.y, x_3155);
        let x_3163 : vec3<f32> = txVec57;
        let x_3165 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3163.xy, x_3163.z);
        u_xlat30 = x_3165;
        let x_3167 : f32 = u_xlat8.z;
        let x_3168 : f32 = u_xlat30;
        let x_3171 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3167 * x_3168) + x_3171);
        let x_3175 : vec2<f32> = u_xlat51;
        let x_3177 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3175.x, x_3175.y, x_3177);
        let x_3184 : vec3<f32> = txVec58;
        let x_3186 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3184.xy, x_3184.z);
        u_xlat51.x = x_3186;
        let x_3189 : f32 = u_xlat8.w;
        let x_3191 : f32 = u_xlat51.x;
        let x_3194 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3189 * x_3191) + x_3194);
      }
    }
  } else {
    let x_3198 : vec4<f32> = u_xlat4;
    let x_3199 : vec2<f32> = vec2<f32>(x_3198.x, x_3198.y);
    let x_3201 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3199.x, x_3199.y, x_3201);
    let x_3208 : vec3<f32> = txVec59;
    let x_3210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3208.xy, x_3208.z);
    u_xlat66 = x_3210;
  }
  let x_3211 : f32 = u_xlat66;
  let x_3213 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3215 : f32 = u_xlat70;
  u_xlat66 = ((x_3211 * x_3213) + x_3215);
  let x_3217 : bool = u_xlatb5;
  let x_3218 : f32 = u_xlat66;
  u_xlat66 = select(x_3218, 1.0f, x_3217);
  let x_3220 : vec3<f32> = vs_INTERP0;
  let x_3222 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3224 : vec3<f32> = (x_3220 + -(x_3222));
  let x_3225 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3224.x, x_3224.y, x_3224.z, x_3225.w);
  let x_3227 : vec4<f32> = u_xlat4;
  let x_3229 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3227.x, x_3227.y, x_3227.z), vec3<f32>(x_3229.x, x_3229.y, x_3229.z));
  let x_3234 : f32 = u_xlat4.x;
  let x_3236 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3239 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3234 * x_3236) + x_3239);
  let x_3243 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3243, 0.0f, 1.0f);
  let x_3247 : f32 = u_xlat66;
  u_xlat26 = (-(x_3247) + 1.0f);
  let x_3251 : f32 = u_xlat4.x;
  let x_3252 : f32 = u_xlat26;
  let x_3254 : f32 = u_xlat66;
  u_xlat66 = ((x_3251 * x_3252) + x_3254);
  let x_3262 : f32 = x_3260.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3262 == -1.0f));
  let x_3266 : bool = u_xlatb4.x;
  if (x_3266) {
    let x_3269 : vec3<f32> = vs_INTERP0;
    let x_3272 : vec4<f32> = x_3260.x_MainLightWorldToLight[1i];
    let x_3274 : vec2<f32> = (vec2<f32>(x_3269.y, x_3269.y) * vec2<f32>(x_3272.x, x_3272.y));
    let x_3275 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3274.x, x_3274.y, x_3275.z, x_3275.w);
    let x_3278 : vec4<f32> = x_3260.x_MainLightWorldToLight[0i];
    let x_3280 : vec3<f32> = vs_INTERP0;
    let x_3283 : vec4<f32> = u_xlat4;
    let x_3285 : vec2<f32> = ((vec2<f32>(x_3278.x, x_3278.y) * vec2<f32>(x_3280.x, x_3280.x)) + vec2<f32>(x_3283.x, x_3283.y));
    let x_3286 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3285.x, x_3285.y, x_3286.z, x_3286.w);
    let x_3289 : vec4<f32> = x_3260.x_MainLightWorldToLight[2i];
    let x_3291 : vec3<f32> = vs_INTERP0;
    let x_3294 : vec4<f32> = u_xlat4;
    let x_3296 : vec2<f32> = ((vec2<f32>(x_3289.x, x_3289.y) * vec2<f32>(x_3291.z, x_3291.z)) + vec2<f32>(x_3294.x, x_3294.y));
    let x_3297 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3296.x, x_3296.y, x_3297.z, x_3297.w);
    let x_3299 : vec4<f32> = u_xlat4;
    let x_3302 : vec4<f32> = x_3260.x_MainLightWorldToLight[3i];
    let x_3304 : vec2<f32> = (vec2<f32>(x_3299.x, x_3299.y) + vec2<f32>(x_3302.x, x_3302.y));
    let x_3305 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3304.x, x_3304.y, x_3305.z, x_3305.w);
    let x_3307 : vec4<f32> = u_xlat4;
    let x_3310 : vec2<f32> = ((vec2<f32>(x_3307.x, x_3307.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3311 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3310.x, x_3310.y, x_3311.z, x_3311.w);
    let x_3318 : vec4<f32> = u_xlat4;
    let x_3321 : f32 = x_66.x_GlobalMipBias.x;
    let x_3322 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3318.x, x_3318.y), x_3321);
    u_xlat4 = x_3322;
    let x_3324 : f32 = x_3260.x_MainLightCookieTextureFormat;
    let x_3326 : f32 = x_3260.x_MainLightCookieTextureFormat;
    let x_3328 : f32 = x_3260.x_MainLightCookieTextureFormat;
    let x_3330 : f32 = x_3260.x_MainLightCookieTextureFormat;
    let x_3331 : vec4<f32> = vec4<f32>(x_3324, x_3326, x_3328, x_3330);
    let x_3338 : vec4<bool> = (vec4<f32>(x_3331.x, x_3331.y, x_3331.z, x_3331.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb51 = vec2<bool>(x_3338.x, x_3338.y);
    let x_3341 : bool = u_xlatb51.y;
    if (x_3341) {
      let x_3346 : f32 = u_xlat4.w;
      x_3342 = x_3346;
    } else {
      let x_3349 : f32 = u_xlat4.x;
      x_3342 = x_3349;
    }
    let x_3350 : f32 = x_3342;
    u_xlat70 = x_3350;
    let x_3352 : bool = u_xlatb51.x;
    if (x_3352) {
      let x_3356 : vec4<f32> = u_xlat4;
      x_3353 = vec3<f32>(x_3356.x, x_3356.y, x_3356.z);
    } else {
      let x_3359 : f32 = u_xlat70;
      x_3353 = vec3<f32>(x_3359, x_3359, x_3359);
    }
    let x_3361 : vec3<f32> = x_3353;
    let x_3362 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3361.x, x_3361.y, x_3361.z, x_3362.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3368 : vec4<f32> = u_xlat4;
  let x_3371 : vec4<f32> = x_66.x_MainLightColor;
  let x_3373 : vec3<f32> = (vec3<f32>(x_3368.x, x_3368.y, x_3368.z) * vec3<f32>(x_3371.x, x_3371.y, x_3371.z));
  let x_3374 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3373.x, x_3373.y, x_3373.z, x_3374.w);
  let x_3376 : vec2<f32> = u_xlat29;
  let x_3378 : vec4<f32> = u_xlat4;
  let x_3380 : vec3<f32> = (vec3<f32>(x_3376.x, x_3376.x, x_3376.x) * vec3<f32>(x_3378.x, x_3378.y, x_3378.z));
  let x_3381 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3380.x, x_3380.y, x_3380.z, x_3381.w);
  let x_3383 : vec4<f32> = u_xlat6;
  let x_3386 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(vec3<f32>(x_3383.x, x_3383.y, x_3383.z)), x_3386);
  let x_3388 : f32 = u_xlat70;
  let x_3389 : f32 = u_xlat70;
  u_xlat70 = (x_3388 + x_3389);
  let x_3391 : vec3<f32> = u_xlat25;
  let x_3392 : f32 = u_xlat70;
  let x_3396 : vec4<f32> = u_xlat6;
  let x_3399 : vec3<f32> = ((x_3391 * -(vec3<f32>(x_3392, x_3392, x_3392))) + -(vec3<f32>(x_3396.x, x_3396.y, x_3396.z)));
  let x_3400 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3399.x, x_3399.y, x_3399.z, x_3400.w);
  let x_3402 : vec3<f32> = u_xlat25;
  let x_3403 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(x_3402, vec3<f32>(x_3403.x, x_3403.y, x_3403.z));
  let x_3406 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3406, 0.0f, 1.0f);
  let x_3408 : f32 = u_xlat70;
  u_xlat70 = (-(x_3408) + 1.0f);
  let x_3411 : f32 = u_xlat70;
  let x_3412 : f32 = u_xlat70;
  u_xlat70 = (x_3411 * x_3412);
  let x_3414 : f32 = u_xlat70;
  let x_3415 : f32 = u_xlat70;
  u_xlat70 = (x_3414 * x_3415);
  let x_3418 : f32 = u_xlat23.x;
  u_xlat5.x = ((-(x_3418) * 0.699999988f) + 1.700000048f);
  let x_3426 : f32 = u_xlat23.x;
  let x_3428 : f32 = u_xlat5.x;
  u_xlat23.x = (x_3426 * x_3428);
  let x_3432 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3432 * 6.0f);
  let x_3444 : vec4<f32> = u_xlat8;
  let x_3447 : f32 = u_xlat23.x;
  let x_3448 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3444.x, x_3444.y, x_3444.z), x_3447);
  u_xlat8 = x_3448;
  let x_3450 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3450 + -1.0f);
  let x_3454 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3456 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3454 * x_3456) + 1.0f);
  let x_3461 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3461, 0.0f);
  let x_3465 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3465);
  let x_3469 : f32 = u_xlat23.x;
  let x_3471 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3469 * x_3471);
  let x_3475 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3475);
  let x_3479 : f32 = u_xlat23.x;
  let x_3481 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3479 * x_3481);
  let x_3484 : vec4<f32> = u_xlat8;
  let x_3486 : vec3<f32> = u_xlat23;
  let x_3488 : vec3<f32> = (vec3<f32>(x_3484.x, x_3484.y, x_3484.z) * vec3<f32>(x_3486.x, x_3486.x, x_3486.x));
  let x_3489 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3488.x, x_3488.y, x_3488.z, x_3489.w);
  let x_3491 : f32 = u_xlat67;
  let x_3493 : f32 = u_xlat67;
  let x_3497 : vec2<f32> = ((vec2<f32>(x_3491, x_3491) * vec2<f32>(x_3493, x_3493)) + vec2<f32>(-1.0f, 1.0f));
  let x_3498 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3497.x, x_3498.y, x_3497.y);
  let x_3501 : f32 = u_xlat23.z;
  u_xlat67 = (1.0f / x_3501);
  let x_3504 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3504 + -0.039999999f);
  let x_3508 : f32 = u_xlat70;
  let x_3510 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3508 * x_3510) + 0.039999999f);
  let x_3515 : f32 = u_xlat67;
  let x_3517 : f32 = u_xlat3.x;
  u_xlat67 = (x_3515 * x_3517);
  let x_3519 : f32 = u_xlat67;
  let x_3521 : vec4<f32> = u_xlat8;
  let x_3523 : vec3<f32> = (vec3<f32>(x_3519, x_3519, x_3519) * vec3<f32>(x_3521.x, x_3521.y, x_3521.z));
  let x_3524 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3523.x, x_3523.y, x_3523.z, x_3524.w);
  let x_3526 : vec3<f32> = u_xlat27;
  let x_3527 : vec3<f32> = u_xlat2;
  let x_3529 : vec4<f32> = u_xlat8;
  let x_3531 : vec3<f32> = ((x_3526 * x_3527) + vec3<f32>(x_3529.x, x_3529.y, x_3529.z));
  let x_3532 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3531.x, x_3531.y, x_3531.z, x_3532.w);
  let x_3534 : f32 = u_xlat66;
  let x_3536 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3534 * x_3536);
  let x_3538 : vec3<f32> = u_xlat25;
  let x_3540 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3538, vec3<f32>(x_3540.x, x_3540.y, x_3540.z));
  let x_3543 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3543, 0.0f, 1.0f);
  let x_3545 : f32 = u_xlat66;
  let x_3546 : f32 = u_xlat67;
  u_xlat66 = (x_3545 * x_3546);
  let x_3548 : f32 = u_xlat66;
  let x_3550 : vec4<f32> = u_xlat4;
  let x_3552 : vec3<f32> = (vec3<f32>(x_3548, x_3548, x_3548) * vec3<f32>(x_3550.x, x_3550.y, x_3550.z));
  let x_3553 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3552.x, x_3552.y, x_3552.z, x_3553.w);
  let x_3555 : vec4<f32> = u_xlat6;
  let x_3558 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3560 : vec3<f32> = (vec3<f32>(x_3555.x, x_3555.y, x_3555.z) + vec3<f32>(x_3558.x, x_3558.y, x_3558.z));
  let x_3561 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3560.x, x_3560.y, x_3560.z, x_3561.w);
  let x_3563 : vec4<f32> = u_xlat8;
  let x_3565 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3563.x, x_3563.y, x_3563.z), vec3<f32>(x_3565.x, x_3565.y, x_3565.z));
  let x_3568 : f32 = u_xlat66;
  u_xlat66 = max(x_3568, 1.17549435e-37f);
  let x_3571 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3571);
  let x_3573 : f32 = u_xlat66;
  let x_3575 : vec4<f32> = u_xlat8;
  let x_3577 : vec3<f32> = (vec3<f32>(x_3573, x_3573, x_3573) * vec3<f32>(x_3575.x, x_3575.y, x_3575.z));
  let x_3578 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3577.x, x_3577.y, x_3577.z, x_3578.w);
  let x_3580 : vec3<f32> = u_xlat25;
  let x_3581 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3580, vec3<f32>(x_3581.x, x_3581.y, x_3581.z));
  let x_3584 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3584, 0.0f, 1.0f);
  let x_3587 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3589 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3587.x, x_3587.y, x_3587.z), vec3<f32>(x_3589.x, x_3589.y, x_3589.z));
  let x_3592 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3592, 0.0f, 1.0f);
  let x_3594 : f32 = u_xlat66;
  let x_3595 : f32 = u_xlat66;
  u_xlat66 = (x_3594 * x_3595);
  let x_3597 : f32 = u_xlat66;
  let x_3599 : f32 = u_xlat23.x;
  u_xlat66 = ((x_3597 * x_3599) + 1.000010014f);
  let x_3603 : f32 = u_xlat67;
  let x_3604 : f32 = u_xlat67;
  u_xlat67 = (x_3603 * x_3604);
  let x_3606 : f32 = u_xlat66;
  let x_3607 : f32 = u_xlat66;
  u_xlat66 = (x_3606 * x_3607);
  let x_3609 : f32 = u_xlat67;
  u_xlat67 = max(x_3609, 0.100000001f);
  let x_3612 : f32 = u_xlat66;
  let x_3613 : f32 = u_xlat67;
  u_xlat66 = (x_3612 * x_3613);
  let x_3615 : f32 = u_xlat72;
  let x_3616 : f32 = u_xlat66;
  u_xlat66 = (x_3615 * x_3616);
  let x_3618 : f32 = u_xlat68;
  let x_3619 : f32 = u_xlat66;
  u_xlat66 = (x_3618 / x_3619);
  let x_3621 : f32 = u_xlat66;
  let x_3625 : vec3<f32> = u_xlat2;
  let x_3626 : vec3<f32> = ((vec3<f32>(x_3621, x_3621, x_3621) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3625);
  let x_3627 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3626.x, x_3626.y, x_3626.z, x_3627.w);
  let x_3629 : vec4<f32> = u_xlat4;
  let x_3631 : vec4<f32> = u_xlat8;
  let x_3633 : vec3<f32> = (vec3<f32>(x_3629.x, x_3629.y, x_3629.z) * vec3<f32>(x_3631.x, x_3631.y, x_3631.z));
  let x_3634 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3633.x, x_3633.y, x_3633.z, x_3634.w);
  let x_3637 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3639 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3637, x_3639);
  let x_3641 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3641));
  let x_3645 : f32 = x_3260.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3647 : f32 = x_3260.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3649 : f32 = x_3260.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3651 : f32 = x_3260.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3652 : vec4<f32> = vec4<f32>(x_3645, x_3647, x_3649, x_3651);
  let x_3658 : vec4<bool> = (vec4<f32>(x_3652.x, x_3652.y, x_3652.z, x_3652.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb51 = vec2<bool>(x_3658.x, x_3658.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3669 : u32 = u_xlatu_loop_1;
    let x_3670 : u32 = u_xlatu66;
    if ((x_3669 < x_3670)) {
    } else {
      break;
    }
    let x_3673 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3673 >> 2u);
    let x_3676 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3676 & 3u));
    let x_3679 : u32 = u_xlatu3;
    let x_3682 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3679)];
    let x_3692 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3697 : vec4<u32> = indexable[x_3692];
    u_xlat3.x = dot(x_3682, bitcast<vec4<f32>>(x_3697));
    let x_3702 : f32 = u_xlat3.x;
    u_xlatu3 = bitcast<u32>(i32(x_3702));
    let x_3705 : vec3<f32> = vs_INTERP0;
    let x_3717 : u32 = u_xlatu3;
    let x_3720 : vec4<f32> = x_3716.x_AdditionalLightsPosition[bitcast<i32>(x_3717)];
    let x_3723 : u32 = u_xlatu3;
    let x_3726 : vec4<f32> = x_3716.x_AdditionalLightsPosition[bitcast<i32>(x_3723)];
    let x_3728 : vec3<f32> = ((-(x_3705) * vec3<f32>(x_3720.w, x_3720.w, x_3720.w)) + vec3<f32>(x_3726.x, x_3726.y, x_3726.z));
    let x_3729 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3728.x, x_3728.y, x_3728.z, x_3729.w);
    let x_3731 : vec4<f32> = u_xlat9;
    let x_3733 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3731.x, x_3731.y, x_3731.z), vec3<f32>(x_3733.x, x_3733.y, x_3733.z));
    let x_3736 : f32 = u_xlat70;
    u_xlat70 = max(x_3736, 6.10351562e-05f);
    let x_3740 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3740);
    let x_3742 : f32 = u_xlat71;
    let x_3744 : vec4<f32> = u_xlat9;
    let x_3746 : vec3<f32> = (vec3<f32>(x_3742, x_3742, x_3742) * vec3<f32>(x_3744.x, x_3744.y, x_3744.z));
    let x_3747 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3746.x, x_3746.y, x_3746.z, x_3747.w);
    let x_3750 : f32 = u_xlat70;
    u_xlat74 = (1.0f / x_3750);
    let x_3752 : f32 = u_xlat70;
    let x_3753 : u32 = u_xlatu3;
    let x_3756 : f32 = x_3716.x_AdditionalLightsAttenuation[bitcast<i32>(x_3753)].x;
    u_xlat70 = (x_3752 * x_3756);
    let x_3758 : f32 = u_xlat70;
    let x_3760 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3758) * x_3760) + 1.0f);
    let x_3763 : f32 = u_xlat70;
    u_xlat70 = max(x_3763, 0.0f);
    let x_3765 : f32 = u_xlat70;
    let x_3766 : f32 = u_xlat70;
    u_xlat70 = (x_3765 * x_3766);
    let x_3768 : f32 = u_xlat70;
    let x_3769 : f32 = u_xlat74;
    u_xlat70 = (x_3768 * x_3769);
    let x_3771 : u32 = u_xlatu3;
    let x_3774 : vec4<f32> = x_3716.x_AdditionalLightsSpotDir[bitcast<i32>(x_3771)];
    let x_3776 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3774.x, x_3774.y, x_3774.z), vec3<f32>(x_3776.x, x_3776.y, x_3776.z));
    let x_3779 : f32 = u_xlat74;
    let x_3780 : u32 = u_xlatu3;
    let x_3783 : f32 = x_3716.x_AdditionalLightsAttenuation[bitcast<i32>(x_3780)].z;
    let x_3785 : u32 = u_xlatu3;
    let x_3788 : f32 = x_3716.x_AdditionalLightsAttenuation[bitcast<i32>(x_3785)].w;
    u_xlat74 = ((x_3779 * x_3783) + x_3788);
    let x_3790 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3790, 0.0f, 1.0f);
    let x_3792 : f32 = u_xlat74;
    let x_3793 : f32 = u_xlat74;
    u_xlat74 = (x_3792 * x_3793);
    let x_3795 : f32 = u_xlat70;
    let x_3796 : f32 = u_xlat74;
    u_xlat70 = (x_3795 * x_3796);
    let x_3799 : u32 = u_xlatu3;
    u_xlatu74 = (x_3799 >> 5u);
    let x_3802 : u32 = u_xlatu3;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3802) & 31i)));
    let x_3808 : i32 = u_xlati75;
    let x_3810 : u32 = u_xlatu74;
    let x_3813 : f32 = x_3260.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3810)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3808) & bitcast<u32>(x_3813)));
    let x_3817 : i32 = u_xlati74;
    if ((x_3817 != 0i)) {
      let x_3827 : u32 = u_xlatu3;
      let x_3830 : f32 = x_3826.x_AdditionalLightsLightTypes[bitcast<i32>(x_3827)].el;
      u_xlati74 = i32(x_3830);
      let x_3832 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3832 != 0i));
      let x_3836 : u32 = u_xlatu3;
      u_xlati76 = (bitcast<i32>(x_3836) << bitcast<u32>(2i));
      let x_3839 : i32 = u_xlati75;
      if ((x_3839 != 0i)) {
        let x_3843 : vec3<f32> = vs_INTERP0;
        let x_3845 : i32 = u_xlati76;
        let x_3848 : i32 = u_xlati76;
        let x_3852 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_3845 + 1i) / 4i)][((x_3848 + 1i) % 4i)];
        let x_3854 : vec3<f32> = (vec3<f32>(x_3843.y, x_3843.y, x_3843.y) * vec3<f32>(x_3852.x, x_3852.y, x_3852.w));
        let x_3855 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3854.x, x_3854.y, x_3854.z, x_3855.w);
        let x_3857 : i32 = u_xlati76;
        let x_3859 : i32 = u_xlati76;
        let x_3862 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[(x_3857 / 4i)][(x_3859 % 4i)];
        let x_3864 : vec3<f32> = vs_INTERP0;
        let x_3867 : vec4<f32> = u_xlat11;
        let x_3869 : vec3<f32> = ((vec3<f32>(x_3862.x, x_3862.y, x_3862.w) * vec3<f32>(x_3864.x, x_3864.x, x_3864.x)) + vec3<f32>(x_3867.x, x_3867.y, x_3867.z));
        let x_3870 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3869.x, x_3869.y, x_3869.z, x_3870.w);
        let x_3872 : i32 = u_xlati76;
        let x_3875 : i32 = u_xlati76;
        let x_3879 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_3872 + 2i) / 4i)][((x_3875 + 2i) % 4i)];
        let x_3881 : vec3<f32> = vs_INTERP0;
        let x_3884 : vec4<f32> = u_xlat11;
        let x_3886 : vec3<f32> = ((vec3<f32>(x_3879.x, x_3879.y, x_3879.w) * vec3<f32>(x_3881.z, x_3881.z, x_3881.z)) + vec3<f32>(x_3884.x, x_3884.y, x_3884.z));
        let x_3887 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3886.x, x_3886.y, x_3886.z, x_3887.w);
        let x_3889 : vec4<f32> = u_xlat11;
        let x_3891 : i32 = u_xlati76;
        let x_3894 : i32 = u_xlati76;
        let x_3898 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_3891 + 3i) / 4i)][((x_3894 + 3i) % 4i)];
        let x_3900 : vec3<f32> = (vec3<f32>(x_3889.x, x_3889.y, x_3889.z) + vec3<f32>(x_3898.x, x_3898.y, x_3898.w));
        let x_3901 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3900.x, x_3900.y, x_3900.z, x_3901.w);
        let x_3903 : vec4<f32> = u_xlat11;
        let x_3905 : vec4<f32> = u_xlat11;
        let x_3907 : vec2<f32> = (vec2<f32>(x_3903.x, x_3903.y) / vec2<f32>(x_3905.z, x_3905.z));
        let x_3908 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3907.x, x_3907.y, x_3908.z, x_3908.w);
        let x_3910 : vec4<f32> = u_xlat11;
        let x_3913 : vec2<f32> = ((vec2<f32>(x_3910.x, x_3910.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3914 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3913.x, x_3913.y, x_3914.z, x_3914.w);
        let x_3916 : vec4<f32> = u_xlat11;
        let x_3920 : vec2<f32> = clamp(vec2<f32>(x_3916.x, x_3916.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3921 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3920.x, x_3920.y, x_3921.z, x_3921.w);
        let x_3923 : u32 = u_xlatu3;
        let x_3926 : vec4<f32> = x_3826.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3923)];
        let x_3928 : vec4<f32> = u_xlat11;
        let x_3931 : u32 = u_xlatu3;
        let x_3934 : vec4<f32> = x_3826.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3931)];
        let x_3936 : vec2<f32> = ((vec2<f32>(x_3926.x, x_3926.y) * vec2<f32>(x_3928.x, x_3928.y)) + vec2<f32>(x_3934.z, x_3934.w));
        let x_3937 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3936.x, x_3936.y, x_3937.z, x_3937.w);
      } else {
        let x_3941 : i32 = u_xlati74;
        u_xlatb74 = (x_3941 == 1i);
        let x_3943 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_3943);
        let x_3945 : i32 = u_xlati74;
        if ((x_3945 != 0i)) {
          let x_3949 : vec3<f32> = vs_INTERP0;
          let x_3951 : i32 = u_xlati76;
          let x_3954 : i32 = u_xlati76;
          let x_3958 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_3951 + 1i) / 4i)][((x_3954 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_3949.y, x_3949.y) * vec2<f32>(x_3958.x, x_3958.y));
          let x_3961 : i32 = u_xlati76;
          let x_3963 : i32 = u_xlati76;
          let x_3966 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[(x_3961 / 4i)][(x_3963 % 4i)];
          let x_3968 : vec3<f32> = vs_INTERP0;
          let x_3971 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_3966.x, x_3966.y) * vec2<f32>(x_3968.x, x_3968.x)) + x_3971);
          let x_3973 : i32 = u_xlati76;
          let x_3976 : i32 = u_xlati76;
          let x_3980 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_3973 + 2i) / 4i)][((x_3976 + 2i) % 4i)];
          let x_3982 : vec3<f32> = vs_INTERP0;
          let x_3985 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_3980.x, x_3980.y) * vec2<f32>(x_3982.z, x_3982.z)) + x_3985);
          let x_3987 : vec2<f32> = u_xlat55;
          let x_3988 : i32 = u_xlati76;
          let x_3991 : i32 = u_xlati76;
          let x_3995 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_3988 + 3i) / 4i)][((x_3991 + 3i) % 4i)];
          u_xlat55 = (x_3987 + vec2<f32>(x_3995.x, x_3995.y));
          let x_3998 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_3998 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4001 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4001);
          let x_4003 : u32 = u_xlatu3;
          let x_4006 : vec4<f32> = x_3826.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4003)];
          let x_4008 : vec2<f32> = u_xlat55;
          let x_4010 : u32 = u_xlatu3;
          let x_4013 : vec4<f32> = x_3826.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4010)];
          let x_4015 : vec2<f32> = ((vec2<f32>(x_4006.x, x_4006.y) * x_4008) + vec2<f32>(x_4013.z, x_4013.w));
          let x_4016 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4015.x, x_4015.y, x_4016.z, x_4016.w);
        } else {
          let x_4019 : vec3<f32> = vs_INTERP0;
          let x_4021 : i32 = u_xlati76;
          let x_4024 : i32 = u_xlati76;
          let x_4028 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_4021 + 1i) / 4i)][((x_4024 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4019.y, x_4019.y, x_4019.y, x_4019.y) * x_4028);
          let x_4030 : i32 = u_xlati76;
          let x_4032 : i32 = u_xlati76;
          let x_4035 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[(x_4030 / 4i)][(x_4032 % 4i)];
          let x_4036 : vec3<f32> = vs_INTERP0;
          let x_4039 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4035 * vec4<f32>(x_4036.x, x_4036.x, x_4036.x, x_4036.x)) + x_4039);
          let x_4041 : i32 = u_xlati76;
          let x_4044 : i32 = u_xlati76;
          let x_4048 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_4041 + 2i) / 4i)][((x_4044 + 2i) % 4i)];
          let x_4049 : vec3<f32> = vs_INTERP0;
          let x_4052 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4048 * vec4<f32>(x_4049.z, x_4049.z, x_4049.z, x_4049.z)) + x_4052);
          let x_4054 : vec4<f32> = u_xlat12;
          let x_4055 : i32 = u_xlati76;
          let x_4058 : i32 = u_xlati76;
          let x_4062 : vec4<f32> = x_3826.x_AdditionalLightsWorldToLights[((x_4055 + 3i) / 4i)][((x_4058 + 3i) % 4i)];
          u_xlat12 = (x_4054 + x_4062);
          let x_4064 : vec4<f32> = u_xlat12;
          let x_4066 : vec4<f32> = u_xlat12;
          let x_4068 : vec3<f32> = (vec3<f32>(x_4064.x, x_4064.y, x_4064.z) / vec3<f32>(x_4066.w, x_4066.w, x_4066.w));
          let x_4069 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4068.x, x_4068.y, x_4068.z, x_4069.w);
          let x_4071 : vec4<f32> = u_xlat12;
          let x_4073 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4071.x, x_4071.y, x_4071.z), vec3<f32>(x_4073.x, x_4073.y, x_4073.z));
          let x_4076 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4076);
          let x_4078 : f32 = u_xlat74;
          let x_4080 : vec4<f32> = u_xlat12;
          let x_4082 : vec3<f32> = (vec3<f32>(x_4078, x_4078, x_4078) * vec3<f32>(x_4080.x, x_4080.y, x_4080.z));
          let x_4083 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4082.x, x_4082.y, x_4082.z, x_4083.w);
          let x_4085 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4085.x, x_4085.y, x_4085.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4090 : f32 = u_xlat74;
          u_xlat74 = max(x_4090, 0.000001f);
          let x_4093 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4093);
          let x_4095 : f32 = u_xlat74;
          let x_4097 : vec4<f32> = u_xlat12;
          let x_4099 : vec3<f32> = (vec3<f32>(x_4095, x_4095, x_4095) * vec3<f32>(x_4097.z, x_4097.x, x_4097.y));
          let x_4100 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4099.x, x_4099.y, x_4099.z, x_4100.w);
          let x_4103 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4103);
          let x_4107 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4107, 0.0f, 1.0f);
          let x_4111 : vec4<f32> = u_xlat13;
          let x_4114 : vec4<bool> = (vec4<f32>(x_4111.y, x_4111.z, x_4111.y, x_4111.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4114.x, x_4114.y);
          let x_4117 : bool = u_xlatb55.x;
          if (x_4117) {
            let x_4122 : f32 = u_xlat13.x;
            x_4118 = x_4122;
          } else {
            let x_4125 : f32 = u_xlat13.x;
            x_4118 = -(x_4125);
          }
          let x_4127 : f32 = x_4118;
          u_xlat55.x = x_4127;
          let x_4130 : bool = u_xlatb55.y;
          if (x_4130) {
            let x_4135 : f32 = u_xlat13.x;
            x_4131 = x_4135;
          } else {
            let x_4138 : f32 = u_xlat13.x;
            x_4131 = -(x_4138);
          }
          let x_4140 : f32 = x_4131;
          u_xlat55.y = x_4140;
          let x_4142 : vec4<f32> = u_xlat12;
          let x_4144 : f32 = u_xlat74;
          let x_4147 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4142.x, x_4142.y) * vec2<f32>(x_4144, x_4144)) + x_4147);
          let x_4149 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4149 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4152 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4152, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4156 : u32 = u_xlatu3;
          let x_4159 : vec4<f32> = x_3826.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4156)];
          let x_4161 : vec2<f32> = u_xlat55;
          let x_4163 : u32 = u_xlatu3;
          let x_4166 : vec4<f32> = x_3826.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4163)];
          let x_4168 : vec2<f32> = ((vec2<f32>(x_4159.x, x_4159.y) * x_4161) + vec2<f32>(x_4166.z, x_4166.w));
          let x_4169 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4168.x, x_4168.y, x_4169.z, x_4169.w);
        }
      }
      let x_4176 : vec4<f32> = u_xlat11;
      let x_4179 : f32 = x_66.x_GlobalMipBias.x;
      let x_4180 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4176.x, x_4176.y), x_4179);
      u_xlat11 = x_4180;
      let x_4182 : bool = u_xlatb51.y;
      if (x_4182) {
        let x_4187 : f32 = u_xlat11.w;
        x_4183 = x_4187;
      } else {
        let x_4190 : f32 = u_xlat11.x;
        x_4183 = x_4190;
      }
      let x_4191 : f32 = x_4183;
      u_xlat74 = x_4191;
      let x_4193 : bool = u_xlatb51.x;
      if (x_4193) {
        let x_4197 : vec4<f32> = u_xlat11;
        x_4194 = vec3<f32>(x_4197.x, x_4197.y, x_4197.z);
      } else {
        let x_4200 : f32 = u_xlat74;
        x_4194 = vec3<f32>(x_4200, x_4200, x_4200);
      }
      let x_4202 : vec3<f32> = x_4194;
      let x_4203 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4202.x, x_4202.y, x_4202.z, x_4203.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4209 : vec4<f32> = u_xlat11;
    let x_4211 : u32 = u_xlatu3;
    let x_4214 : vec4<f32> = x_3716.x_AdditionalLightsColor[bitcast<i32>(x_4211)];
    let x_4216 : vec3<f32> = (vec3<f32>(x_4209.x, x_4209.y, x_4209.z) * vec3<f32>(x_4214.x, x_4214.y, x_4214.z));
    let x_4217 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4216.x, x_4216.y, x_4216.z, x_4217.w);
    let x_4219 : vec2<f32> = u_xlat29;
    let x_4221 : vec4<f32> = u_xlat11;
    let x_4223 : vec3<f32> = (vec3<f32>(x_4219.x, x_4219.x, x_4219.x) * vec3<f32>(x_4221.x, x_4221.y, x_4221.z));
    let x_4224 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4223.x, x_4223.y, x_4223.z, x_4224.w);
    let x_4226 : vec3<f32> = u_xlat25;
    let x_4227 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_4226, vec3<f32>(x_4227.x, x_4227.y, x_4227.z));
    let x_4232 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4232, 0.0f, 1.0f);
    let x_4236 : f32 = u_xlat3.x;
    let x_4237 : f32 = u_xlat70;
    u_xlat3.x = (x_4236 * x_4237);
    let x_4240 : vec4<f32> = u_xlat3;
    let x_4242 : vec4<f32> = u_xlat11;
    let x_4244 : vec3<f32> = (vec3<f32>(x_4240.x, x_4240.x, x_4240.x) * vec3<f32>(x_4242.x, x_4242.y, x_4242.z));
    let x_4245 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4244.x, x_4244.y, x_4244.z, x_4245.w);
    let x_4247 : vec4<f32> = u_xlat9;
    let x_4249 : f32 = u_xlat71;
    let x_4252 : vec4<f32> = u_xlat6;
    let x_4254 : vec3<f32> = ((vec3<f32>(x_4247.x, x_4247.y, x_4247.z) * vec3<f32>(x_4249, x_4249, x_4249)) + vec3<f32>(x_4252.x, x_4252.y, x_4252.z));
    let x_4255 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4254.x, x_4254.y, x_4254.z, x_4255.w);
    let x_4257 : vec4<f32> = u_xlat9;
    let x_4259 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_4257.x, x_4257.y, x_4257.z), vec3<f32>(x_4259.x, x_4259.y, x_4259.z));
    let x_4264 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4264, 1.17549435e-37f);
    let x_4268 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_4268);
    let x_4271 : vec4<f32> = u_xlat3;
    let x_4273 : vec4<f32> = u_xlat9;
    let x_4275 : vec3<f32> = (vec3<f32>(x_4271.x, x_4271.x, x_4271.x) * vec3<f32>(x_4273.x, x_4273.y, x_4273.z));
    let x_4276 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4275.x, x_4275.y, x_4275.z, x_4276.w);
    let x_4278 : vec3<f32> = u_xlat25;
    let x_4279 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_4278, vec3<f32>(x_4279.x, x_4279.y, x_4279.z));
    let x_4284 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4284, 0.0f, 1.0f);
    let x_4287 : vec4<f32> = u_xlat10;
    let x_4289 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4287.x, x_4287.y, x_4287.z), vec3<f32>(x_4289.x, x_4289.y, x_4289.z));
    let x_4292 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4292, 0.0f, 1.0f);
    let x_4295 : f32 = u_xlat3.x;
    let x_4297 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4295 * x_4297);
    let x_4301 : f32 = u_xlat3.x;
    let x_4303 : f32 = u_xlat23.x;
    u_xlat3.x = ((x_4301 * x_4303) + 1.000010014f);
    let x_4307 : f32 = u_xlat70;
    let x_4308 : f32 = u_xlat70;
    u_xlat70 = (x_4307 * x_4308);
    let x_4311 : f32 = u_xlat3.x;
    let x_4313 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4311 * x_4313);
    let x_4316 : f32 = u_xlat70;
    u_xlat70 = max(x_4316, 0.100000001f);
    let x_4319 : f32 = u_xlat3.x;
    let x_4320 : f32 = u_xlat70;
    u_xlat3.x = (x_4319 * x_4320);
    let x_4323 : f32 = u_xlat72;
    let x_4325 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4323 * x_4325);
    let x_4328 : f32 = u_xlat68;
    let x_4330 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4328 / x_4330);
    let x_4333 : vec4<f32> = u_xlat3;
    let x_4336 : vec3<f32> = u_xlat2;
    let x_4337 : vec3<f32> = ((vec3<f32>(x_4333.x, x_4333.x, x_4333.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4336);
    let x_4338 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4337.x, x_4337.y, x_4337.z, x_4338.w);
    let x_4340 : vec4<f32> = u_xlat9;
    let x_4342 : vec4<f32> = u_xlat11;
    let x_4345 : vec4<f32> = u_xlat8;
    let x_4347 : vec3<f32> = ((vec3<f32>(x_4340.x, x_4340.y, x_4340.z) * vec3<f32>(x_4342.x, x_4342.y, x_4342.z)) + vec3<f32>(x_4345.x, x_4345.y, x_4345.z));
    let x_4348 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4347.x, x_4347.y, x_4347.z, x_4348.w);

    continuing {
      let x_4350 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4350 + bitcast<u32>(1i));
    }
  }
  let x_4352 : vec4<f32> = u_xlat5;
  let x_4354 : vec4<f32> = u_xlat7;
  let x_4357 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4352.x, x_4352.y, x_4352.z) * vec3<f32>(x_4354.x, x_4354.x, x_4354.x)) + vec3<f32>(x_4357.x, x_4357.y, x_4357.z));
  let x_4360 : vec4<f32> = u_xlat8;
  let x_4362 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4360.x, x_4360.y, x_4360.z) + x_4362);
  let x_4366 : vec4<f32> = vs_INTERP4;
  let x_4368 : vec3<f32> = u_xlat0;
  let x_4370 : vec3<f32> = u_xlat2;
  let x_4371 : vec3<f32> = ((vec3<f32>(x_4366.w, x_4366.w, x_4366.w) * x_4368) + x_4370);
  let x_4372 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4371.x, x_4371.y, x_4371.z, x_4372.w);
  let x_4374 : bool = u_xlatb45;
  if (x_4374) {
    let x_4379 : f32 = u_xlat1.x;
    x_4375 = x_4379;
  } else {
    x_4375 = 1.0f;
  }
  let x_4381 : f32 = x_4375;
  SV_Target0.w = x_4381;
  let x_4387 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4389 : f32 = x_1752.unity_RenderingLayer.x;
  u_xlatu0 = (x_4387 & bitcast<u32>(x_4389));
  let x_4392 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4392);
  let x_4397 : f32 = u_xlat0.x;
  let x_4399 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4397 * x_4399);
  let x_4403 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4403, 0.0f, 1.0f);
  let x_4406 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4406.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

