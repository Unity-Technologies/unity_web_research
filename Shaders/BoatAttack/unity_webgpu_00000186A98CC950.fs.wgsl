type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlatb21 : bool;
  var x_424 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var x_435 : vec3<f32>;
  var x_445 : vec3<f32>;
  var x_453 : vec3<f32>;
  var x_463 : vec2<f32>;
  var u_xlat23 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlat10 : vec3<f32>;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlatb23 : bool;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_107 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_109 : vec2<f32> = vs_TEXCOORD0;
  let x_114 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_107.x, x_107.y, x_107.z) * vec3<f32>(x_109.x, x_109.x, x_109.x)) + vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_119 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_121 : vec2<f32> = u_xlat14;
  let x_124 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_119.x, x_119.y, x_119.z) * vec3<f32>(x_121.x, x_121.x, x_121.x)) + x_124);
  let x_128 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_130 : f32 = u_xlat21;
  let x_133 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_128.x, x_128.y, x_128.z) * vec3<f32>(x_130, x_130, x_130)) + x_133);
  let x_138 : f32 = x_34.x_SourceSize.z;
  u_xlat9.x = (x_138 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_143 : vec3<f32> = u_xlat9;
  let x_145 : vec2<f32> = vs_TEXCOORD0;
  let x_146 : vec2<f32> = (vec2<f32>(x_143.x, x_143.y) + x_145);
  let x_147 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_146.x, x_146.y, x_147.z);
  let x_152 : vec3<f32> = u_xlat9;
  let x_155 : f32 = x_34.x_GlobalMipBias.x;
  let x_156 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_152.x, x_152.y), x_155);
  u_xlat14.x = x_156.x;
  let x_160 : f32 = u_xlat7.x;
  let x_163 : f32 = u_xlat14.x;
  let x_166 : f32 = x_34.x_ProjectionParams.z;
  u_xlat9.z = ((-(x_160) * x_163) + x_166);
  let x_172 : f32 = x_34.x_SourceSize.z;
  u_xlat3.x = (x_172 * 2.0f);
  u_xlat3.y = 0.0f;
  u_xlat17.y = 0.0f;
  let x_180 : vec4<f32> = u_xlat3;
  let x_182 : vec2<f32> = vs_TEXCOORD0;
  let x_183 : vec2<f32> = (vec2<f32>(x_180.x, x_180.y) + x_182);
  let x_184 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_183.x, x_183.y, x_184.z);
  let x_189 : vec3<f32> = u_xlat4;
  let x_192 : f32 = x_34.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat14.x = x_193.x;
  let x_197 : f32 = u_xlat7.x;
  let x_200 : f32 = u_xlat14.x;
  let x_203 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.z = ((-(x_197) * x_200) + x_203);
  u_xlat12.x = 0.0f;
  let x_209 : f32 = x_34.x_SourceSize.w;
  u_xlat12.y = (x_209 * 2.0f);
  let x_212 : vec3<f32> = u_xlat12;
  let x_214 : vec2<f32> = vs_TEXCOORD0;
  let x_215 : vec2<f32> = (vec2<f32>(x_212.x, x_212.y) + x_214);
  let x_216 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_215.x, x_215.y, x_216.z);
  let x_221 : vec3<f32> = u_xlat12;
  let x_224 : f32 = x_34.x_GlobalMipBias.x;
  let x_225 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_221.x, x_221.y), x_224);
  u_xlat14.x = x_225.x;
  let x_229 : f32 = u_xlat7.x;
  let x_232 : f32 = u_xlat14.x;
  let x_235 : f32 = x_34.x_ProjectionParams.z;
  u_xlat12.z = ((-(x_229) * x_232) + x_235);
  u_xlat13.x = 0.0f;
  let x_241 : f32 = x_34.x_SourceSize.w;
  u_xlat13.y = (x_241 * -2.0f);
  let x_244 : vec3<f32> = u_xlat13;
  let x_246 : vec2<f32> = vs_TEXCOORD0;
  let x_247 : vec2<f32> = (vec2<f32>(x_244.x, x_244.y) + x_246);
  let x_248 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_247.x, x_247.y, x_248.z);
  let x_253 : vec3<f32> = u_xlat13;
  let x_256 : f32 = x_34.x_GlobalMipBias.x;
  let x_257 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_253.x, x_253.y), x_256);
  u_xlat14.x = x_257.x;
  let x_261 : f32 = u_xlat7.x;
  let x_264 : f32 = u_xlat14.x;
  let x_267 : f32 = x_34.x_ProjectionParams.z;
  u_xlat13.z = ((-(x_261) * x_264) + x_267);
  let x_271 : f32 = x_34.x_SourceSize.z;
  u_xlat17.x = x_271;
  let x_273 : vec2<f32> = u_xlat17;
  let x_279 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(x_273.x, x_273.y, x_273.x, x_273.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_279.x, x_279.y, x_279.x, x_279.y));
  let x_285 : vec4<f32> = u_xlat3;
  let x_288 : f32 = x_34.x_GlobalMipBias.x;
  let x_289 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_285.x, x_285.y), x_288);
  u_xlat14.x = x_289.x;
  let x_293 : f32 = u_xlat7.x;
  let x_296 : f32 = u_xlat14.x;
  let x_299 : f32 = x_34.x_ProjectionParams.z;
  u_xlat14.x = ((-(x_293) * x_296) + x_299);
  let x_305 : vec4<f32> = u_xlat3;
  let x_308 : f32 = x_34.x_GlobalMipBias.x;
  let x_309 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_305.z, x_305.w), x_308);
  u_xlat21 = x_309.x;
  let x_312 : f32 = u_xlat7.x;
  let x_314 : f32 = u_xlat21;
  let x_317 : f32 = x_34.x_ProjectionParams.z;
  u_xlat21 = ((-(x_312) * x_314) + x_317);
  u_xlat3.x = 2.0f;
  let x_321 : f32 = x_34.x_SourceSize.w;
  u_xlat3.y = x_321;
  let x_324 : vec4<f32> = u_xlat3;
  let x_327 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_324.x, x_324.y, x_324.x, x_324.y)) + vec4<f32>(x_327.x, x_327.y, x_327.x, x_327.y));
  let x_334 : vec4<f32> = u_xlat3;
  let x_337 : f32 = x_34.x_GlobalMipBias.x;
  let x_338 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_334.x, x_334.y), x_337);
  u_xlat22 = x_338.x;
  let x_341 : f32 = u_xlat7.x;
  let x_343 : f32 = u_xlat22;
  let x_346 : f32 = x_34.x_ProjectionParams.z;
  u_xlat22 = ((-(x_341) * x_343) + x_346);
  let x_352 : vec4<f32> = u_xlat3;
  let x_355 : f32 = x_34.x_GlobalMipBias.x;
  let x_356 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_352.z, x_352.w), x_355);
  u_xlat2.x = x_356.x;
  let x_360 : f32 = u_xlat7.x;
  let x_363 : f32 = u_xlat2.x;
  let x_366 : f32 = x_34.x_ProjectionParams.z;
  u_xlat2.x = ((-(x_360) * x_363) + x_366);
  let x_370 : f32 = u_xlat9.z;
  let x_373 : f32 = u_xlat14.x;
  u_xlat14.x = ((x_370 * 2.0f) + -(x_373));
  let x_378 : f32 = u_xlat4.z;
  let x_380 : f32 = u_xlat21;
  u_xlat14.y = ((x_378 * 2.0f) + -(x_380));
  let x_384 : f32 = u_xlat0;
  let x_387 : vec2<f32> = u_xlat14;
  u_xlat14 = (-(vec2<f32>(x_384, x_384)) + x_387);
  let x_390 : f32 = u_xlat14.x;
  let x_393 : f32 = u_xlat14.y;
  u_xlatb14 = (abs(x_390) < abs(x_393));
  let x_397 : f32 = u_xlat13.z;
  let x_400 : f32 = u_xlat2.x;
  u_xlat21 = ((x_397 * 2.0f) + -(x_400));
  let x_403 : f32 = u_xlat0;
  let x_405 : f32 = u_xlat21;
  u_xlat21 = (-(x_403) + x_405);
  let x_408 : f32 = u_xlat12.z;
  let x_410 : f32 = u_xlat22;
  u_xlat22 = ((x_408 * 2.0f) + -(x_410));
  let x_413 : f32 = u_xlat0;
  let x_415 : f32 = u_xlat22;
  u_xlat22 = (-(x_413) + x_415);
  let x_418 : f32 = u_xlat21;
  let x_420 : f32 = u_xlat22;
  u_xlatb21 = (abs(x_418) < abs(x_420));
  let x_423 : bool = u_xlatb14;
  if (x_423) {
    let x_427 : vec3<f32> = u_xlat9;
    x_424 = x_427;
  } else {
    let x_429 : vec3<f32> = u_xlat13;
    x_424 = x_429;
  }
  let x_430 : vec3<f32> = x_424;
  let x_431 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_430.x, x_430.y, x_430.z, x_431.w);
  let x_434 : bool = u_xlatb14;
  if (x_434) {
    let x_438 : vec3<f32> = u_xlat13;
    x_435 = x_438;
  } else {
    let x_440 : vec3<f32> = u_xlat4;
    x_435 = x_440;
  }
  let x_441 : vec3<f32> = x_435;
  let x_442 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_442.x, x_441.x, x_441.y, x_441.z);
  let x_444 : bool = u_xlatb14;
  if (x_444) {
    let x_448 : vec3<f32> = u_xlat12;
    x_445 = x_448;
  } else {
    let x_450 : vec3<f32> = u_xlat4;
    x_445 = x_450;
  }
  let x_451 : vec3<f32> = x_445;
  u_xlat4 = x_451;
  let x_452 : bool = u_xlatb14;
  if (x_452) {
    let x_456 : vec3<f32> = u_xlat9;
    x_453 = x_456;
  } else {
    let x_458 : vec3<f32> = u_xlat12;
    x_453 = x_458;
  }
  let x_459 : vec3<f32> = x_453;
  let x_460 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_460.x, x_459.x, x_459.y, x_459.z);
  let x_462 : bool = u_xlatb21;
  if (x_462) {
    let x_466 : vec4<f32> = u_xlat3;
    x_463 = vec2<f32>(x_466.x, x_466.y);
  } else {
    let x_469 : vec3<f32> = u_xlat4;
    x_463 = vec2<f32>(x_469.x, x_469.y);
  }
  let x_471 : vec2<f32> = x_463;
  let x_472 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_471.x, x_471.y, x_472.z, x_472.w);
  let x_475 : f32 = u_xlat3.z;
  u_xlat6.x = x_475;
  let x_478 : f32 = u_xlat4.z;
  u_xlat2.x = x_478;
  let x_480 : bool = u_xlatb21;
  let x_481 : vec4<f32> = u_xlat6;
  let x_482 : vec4<f32> = u_xlat2;
  u_xlat2 = select(x_482, x_481, vec4<bool>(x_480, x_480, x_480, x_480));
  let x_487 : f32 = u_xlat2.z;
  u_xlat14.x = (-(x_487) + 1.0f);
  let x_491 : vec4<f32> = u_xlat2;
  let x_494 : vec4<f32> = x_34.x_ProjectionParams;
  let x_496 : vec2<f32> = (vec2<f32>(x_491.w, x_491.x) * vec2<f32>(x_494.w, x_494.w));
  let x_497 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_496.x, x_497.y, x_496.y, x_497.w);
  let x_500 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_502 : vec4<f32> = u_xlat2;
  let x_506 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_500.z, x_500.x, x_500.y) * vec3<f32>(x_502.y, x_502.y, x_502.y)) + vec3<f32>(x_506.z, x_506.x, x_506.y));
  let x_510 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_512 : vec2<f32> = u_xlat14;
  let x_515 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_510.z, x_510.x, x_510.y) * vec3<f32>(x_512.x, x_512.x, x_512.x)) + x_515);
  let x_518 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_520 : vec4<f32> = u_xlat2;
  let x_523 : vec3<f32> = u_xlat4;
  let x_524 : vec3<f32> = ((vec3<f32>(x_518.z, x_518.x, x_518.y) * vec3<f32>(x_520.x, x_520.x, x_520.x)) + x_523);
  let x_525 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_524.z);
  let x_527 : vec3<f32> = u_xlat1;
  let x_530 : vec4<f32> = u_xlat2;
  let x_532 : vec3<f32> = (-(vec3<f32>(x_527.z, x_527.x, x_527.y)) + vec3<f32>(x_530.x, x_530.y, x_530.w));
  let x_533 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_532.z);
  let x_536 : f32 = u_xlat3.y;
  u_xlat14.x = (-(x_536) + 1.0f);
  let x_541 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_543 : vec4<f32> = u_xlat3;
  let x_547 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_549 : vec3<f32> = ((vec3<f32>(x_541.y, x_541.z, x_541.x) * vec3<f32>(x_543.x, x_543.x, x_543.x)) + vec3<f32>(x_547.y, x_547.z, x_547.x));
  let x_550 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_549.x, x_549.y, x_549.z, x_550.w);
  let x_553 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_555 : vec2<f32> = u_xlat14;
  let x_558 : vec4<f32> = u_xlat3;
  let x_560 : vec3<f32> = ((vec3<f32>(x_553.y, x_553.z, x_553.x) * vec3<f32>(x_555.x, x_555.x, x_555.x)) + vec3<f32>(x_558.x, x_558.y, x_558.z));
  let x_561 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_560.x, x_560.y, x_560.z, x_561.w);
  let x_564 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_566 : vec4<f32> = u_xlat2;
  let x_569 : vec4<f32> = u_xlat3;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.y, x_564.z, x_564.x) * vec3<f32>(x_566.z, x_566.z, x_566.z)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : vec3<f32> = u_xlat1;
  let x_577 : vec4<f32> = u_xlat3;
  let x_579 : vec3<f32> = (-(vec3<f32>(x_574.y, x_574.z, x_574.x)) + vec3<f32>(x_577.x, x_577.y, x_577.z));
  let x_580 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
  let x_582 : vec4<f32> = u_xlat2;
  let x_584 : vec4<f32> = u_xlat3;
  u_xlat4 = (vec3<f32>(x_582.x, x_582.y, x_582.w) * vec3<f32>(x_584.x, x_584.y, x_584.z));
  let x_587 : vec4<f32> = u_xlat2;
  let x_589 : vec4<f32> = u_xlat3;
  let x_592 : vec3<f32> = u_xlat4;
  let x_594 : vec3<f32> = ((vec3<f32>(x_587.w, x_587.x, x_587.y) * vec3<f32>(x_589.y, x_589.z, x_589.x)) + -(x_592));
  let x_595 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_594.x, x_594.y, x_594.z, x_595.w);
  let x_597 : vec4<f32> = u_xlat2;
  let x_599 : vec4<f32> = u_xlat2;
  u_xlat14.x = dot(vec3<f32>(x_597.x, x_597.y, x_597.z), vec3<f32>(x_599.x, x_599.y, x_599.z));
  let x_604 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_604);
  let x_607 : vec2<f32> = u_xlat14;
  let x_609 : vec4<f32> = u_xlat2;
  let x_611 : vec3<f32> = (vec3<f32>(x_607.x, x_607.x, x_607.x) * vec3<f32>(x_609.x, x_609.y, x_609.z));
  let x_612 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_611.x, x_611.y, x_611.z, x_612.w);
  let x_614 : vec2<f32> = vs_TEXCOORD0;
  let x_617 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = (x_614 + vec2<f32>(x_617.z, x_617.w));
  let x_620 : vec2<f32> = u_xlat14;
  let x_622 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  let x_624 : vec2<f32> = (x_620 * vec2<f32>(x_622.x, x_622.y));
  let x_625 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_624.x, x_624.y, x_625.z, x_625.w);
  let x_632 : vec4<f32> = u_xlat3;
  let x_635 : f32 = x_34.x_GlobalMipBias.x;
  let x_636 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_632.x, x_632.y), x_635);
  u_xlat22 = x_636.w;
  let x_639 : f32 = u_xlat22;
  u_xlat23 = fract(x_639);
  let x_641 : f32 = u_xlat23;
  u_xlat3.z = ((x_641 * 2.0f) + -1.0f);
  let x_646 : f32 = u_xlat22;
  u_xlat22 = (x_646 + 0.9296875f);
  let x_649 : f32 = u_xlat22;
  u_xlat22 = (x_649 * 628.31854248f);
  let x_653 : f32 = u_xlat3.z;
  let x_656 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_653) * x_656) + 1.0f);
  let x_659 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_659);
  let x_661 : f32 = u_xlat22;
  u_xlat4.x = sin(x_661);
  let x_665 : f32 = u_xlat22;
  u_xlat5.x = cos(x_665);
  let x_668 : f32 = u_xlat23;
  let x_670 : f32 = u_xlat5.x;
  u_xlat3.x = (x_668 * x_670);
  let x_673 : f32 = u_xlat23;
  let x_675 : f32 = u_xlat4.x;
  u_xlat3.y = (x_673 * x_675);
  let x_678 : vec4<f32> = u_xlat2;
  let x_680 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec3<f32>(x_678.x, x_678.y, x_678.z), vec3<f32>(x_680.x, x_680.y, x_680.z));
  let x_684 : f32 = u_xlat22;
  u_xlatb22 = (x_684 >= 0.0f);
  let x_686 : bool = u_xlatb22;
  u_xlat22 = select(-1.0f, 1.0f, x_686);
  let x_688 : f32 = u_xlat22;
  let x_690 : vec4<f32> = u_xlat3;
  let x_692 : vec3<f32> = (vec3<f32>(x_688, x_688, x_688) * vec3<f32>(x_690.x, x_690.y, x_690.z));
  let x_693 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
  let x_695 : vec4<f32> = u_xlat3;
  let x_698 : vec4<f32> = x_34.x_SSAOParams;
  let x_700 : vec3<f32> = (vec3<f32>(x_695.x, x_695.y, x_695.z) * vec3<f32>(x_698.y, x_698.y, x_698.y));
  let x_701 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_700.x, x_700.y, x_700.z, x_701.w);
  let x_703 : vec4<f32> = u_xlat3;
  let x_708 : vec3<f32> = u_xlat1;
  let x_709 : vec3<f32> = ((vec3<f32>(x_703.x, x_703.y, x_703.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_708);
  let x_710 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_709.x, x_709.y, x_709.z, x_710.w);
  let x_713 : vec4<f32> = u_xlat3;
  let x_717 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_719 : vec2<f32> = (vec2<f32>(x_713.y, x_713.y) * vec2<f32>(x_717.x, x_717.y));
  let x_720 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_719.x, x_720.y, x_719.y);
  let x_723 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_725 : vec4<f32> = u_xlat3;
  let x_728 : vec3<f32> = u_xlat10;
  let x_730 : vec2<f32> = ((vec2<f32>(x_723.x, x_723.y) * vec2<f32>(x_725.x, x_725.x)) + vec2<f32>(x_728.x, x_728.z));
  let x_731 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_730.x, x_730.y, x_731.z, x_731.w);
  let x_734 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_736 : vec4<f32> = u_xlat3;
  let x_739 : vec4<f32> = u_xlat3;
  let x_741 : vec2<f32> = ((vec2<f32>(x_734.x, x_734.y) * vec2<f32>(x_736.z, x_736.z)) + vec2<f32>(x_739.x, x_739.y));
  let x_742 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_741.x, x_741.y, x_742.z, x_742.w);
  let x_744 : vec4<f32> = u_xlat3;
  let x_747 : vec2<f32> = (vec2<f32>(x_744.x, x_744.y) + vec2<f32>(1.0f, 1.0f));
  let x_748 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
  let x_750 : vec4<f32> = u_xlat3;
  let x_753 : vec2<f32> = (vec2<f32>(x_750.x, x_750.y) * vec2<f32>(0.5f, 0.5f));
  let x_754 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_753.x, x_753.y, x_754.z, x_754.w);
  let x_756 : vec4<f32> = u_xlat3;
  let x_760 : vec2<f32> = clamp(vec2<f32>(x_756.x, x_756.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_761 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_760.x, x_760.y, x_761.z, x_761.w);
  let x_766 : vec4<f32> = u_xlat3;
  let x_769 : f32 = x_34.x_GlobalMipBias.x;
  let x_770 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_766.x, x_766.y), x_769);
  u_xlat22 = x_770.x;
  let x_773 : f32 = u_xlat7.x;
  let x_775 : f32 = u_xlat22;
  let x_778 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_773) * x_775) + x_778);
  let x_780 : f32 = u_xlat0;
  let x_781 : f32 = u_xlat23;
  u_xlat17.x = (x_780 + -(x_781));
  let x_787 : f32 = u_xlat17.x;
  let x_790 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_787) < x_790);
  let x_792 : bool = u_xlatb17;
  u_xlat17.x = select(0.0f, 1.0f, x_792);
  let x_795 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_795);
  let x_797 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_797);
  let x_799 : f32 = u_xlat22;
  let x_801 : f32 = u_xlat17.x;
  u_xlat22 = (x_799 * x_801);
  let x_804 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_804) + 1.0f);
  let x_808 : f32 = u_xlat23;
  let x_810 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_808 * x_810);
  let x_813 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_815 : vec4<f32> = u_xlat3;
  let x_819 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_821 : vec3<f32> = ((vec3<f32>(x_813.x, x_813.y, x_813.z) * vec3<f32>(x_815.x, x_815.x, x_815.x)) + vec3<f32>(x_819.x, x_819.y, x_819.z));
  let x_822 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_821.x, x_822.y, x_821.y, x_821.z);
  let x_825 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_827 : vec3<f32> = u_xlat10;
  let x_830 : vec4<f32> = u_xlat3;
  let x_832 : vec3<f32> = ((vec3<f32>(x_825.x, x_825.y, x_825.z) * vec3<f32>(x_827.x, x_827.x, x_827.x)) + vec3<f32>(x_830.x, x_830.z, x_830.w));
  let x_833 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_832.x, x_832.y, x_832.z, x_833.w);
  let x_836 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_838 : f32 = u_xlat23;
  let x_841 : vec4<f32> = u_xlat3;
  let x_843 : vec3<f32> = ((vec3<f32>(x_836.x, x_836.y, x_836.z) * vec3<f32>(x_838, x_838, x_838)) + vec3<f32>(x_841.x, x_841.y, x_841.z));
  let x_844 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_843.x, x_843.y, x_843.z, x_844.w);
  let x_846 : vec3<f32> = u_xlat1;
  let x_848 : vec4<f32> = u_xlat3;
  let x_850 : vec3<f32> = (-(x_846) + vec3<f32>(x_848.x, x_848.y, x_848.z));
  let x_851 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_850.z, x_851.w);
  let x_853 : vec4<f32> = u_xlat3;
  let x_855 : vec4<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_853.x, x_853.y, x_853.z), vec3<f32>(x_855.x, x_855.y, x_855.z));
  let x_858 : f32 = u_xlat0;
  let x_862 : f32 = u_xlat23;
  u_xlat23 = ((-(x_858) * 0.004f) + x_862);
  let x_864 : f32 = u_xlat23;
  u_xlat23 = max(x_864, 0.0f);
  let x_866 : vec4<f32> = u_xlat3;
  let x_868 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_866.x, x_866.y, x_866.z), vec3<f32>(x_868.x, x_868.y, x_868.z));
  let x_873 : f32 = u_xlat3.x;
  u_xlat3.x = (x_873 + 0.0001f);
  let x_878 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_878);
  let x_881 : f32 = u_xlat23;
  let x_883 : f32 = u_xlat3.x;
  u_xlat23 = (x_881 * x_883);
  let x_885 : vec2<f32> = u_xlat14;
  let x_888 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_885.x, x_885.y, x_885.x, x_885.y) * vec4<f32>(x_888.x, x_888.y, x_888.x, x_888.y)) + vec4<f32>(0.25f, 0.25f, 0.5f, 0.5f));
  let x_897 : vec4<f32> = u_xlat3;
  let x_900 : f32 = x_34.x_GlobalMipBias.x;
  let x_901 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_897.x, x_897.y), x_900);
  u_xlat3.x = x_901.w;
  let x_904 : vec4<f32> = u_xlat3;
  let x_909 : vec2<f32> = (vec2<f32>(x_904.x, x_904.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_910 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_909.x, x_909.y, x_910.z, x_910.w);
  let x_913 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_913);
  let x_917 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_917 * 2.0f) + -1.0f);
  let x_922 : f32 = u_xlat3.y;
  u_xlat3.x = (x_922 * 628.31854248f);
  let x_926 : f32 = u_xlat4.z;
  let x_929 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_926) * x_929) + 1.0f);
  let x_934 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_934);
  let x_938 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_938);
  let x_942 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_942);
  let x_946 : f32 = u_xlat10.x;
  let x_948 : f32 = u_xlat5.x;
  u_xlat4.x = (x_946 * x_948);
  let x_952 : f32 = u_xlat3.x;
  let x_954 : f32 = u_xlat10.x;
  u_xlat4.y = (x_952 * x_954);
  let x_957 : vec4<f32> = u_xlat2;
  let x_959 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(vec3<f32>(x_957.x, x_957.y, x_957.z), x_959);
  let x_964 : f32 = u_xlat3.x;
  u_xlatb3 = (x_964 >= 0.0f);
  let x_966 : bool = u_xlatb3;
  u_xlat3.x = select(-1.0f, 1.0f, x_966);
  let x_969 : vec4<f32> = u_xlat3;
  let x_971 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_969.x, x_969.x, x_969.x) * x_971);
  let x_973 : vec3<f32> = u_xlat4;
  let x_975 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_973 * vec3<f32>(x_975.y, x_975.y, x_975.y));
  let x_978 : vec3<f32> = u_xlat4;
  let x_982 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_978 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_982);
  let x_984 : vec3<f32> = u_xlat4;
  let x_987 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_989 : vec2<f32> = (vec2<f32>(x_984.y, x_984.y) * vec2<f32>(x_987.x, x_987.y));
  let x_990 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_989.x, x_989.y, x_990.z, x_990.w);
  let x_993 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_995 : vec3<f32> = u_xlat4;
  let x_998 : vec4<f32> = u_xlat3;
  let x_1000 : vec2<f32> = ((vec2<f32>(x_993.x, x_993.y) * vec2<f32>(x_995.x, x_995.x)) + vec2<f32>(x_998.x, x_998.y));
  let x_1001 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1000.x, x_1000.y, x_1001.z, x_1001.w);
  let x_1004 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1006 : vec3<f32> = u_xlat4;
  let x_1009 : vec4<f32> = u_xlat3;
  let x_1011 : vec2<f32> = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1006.z, x_1006.z)) + vec2<f32>(x_1009.x, x_1009.y));
  let x_1012 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1011.x, x_1011.y, x_1012.z, x_1012.w);
  let x_1014 : vec4<f32> = u_xlat3;
  let x_1016 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) + vec2<f32>(1.0f, 1.0f));
  let x_1017 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1016.x, x_1016.y, x_1017.z, x_1017.w);
  let x_1019 : vec4<f32> = u_xlat3;
  let x_1021 : vec2<f32> = (vec2<f32>(x_1019.x, x_1019.y) * vec2<f32>(0.5f, 0.5f));
  let x_1022 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1021.x, x_1021.y, x_1022.z, x_1022.w);
  let x_1024 : vec4<f32> = u_xlat3;
  let x_1028 : vec2<f32> = clamp(vec2<f32>(x_1024.x, x_1024.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1029 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1028.x, x_1028.y, x_1029.z, x_1029.w);
  let x_1034 : vec4<f32> = u_xlat3;
  let x_1037 : f32 = x_34.x_GlobalMipBias.x;
  let x_1038 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1034.x, x_1034.y), x_1037);
  u_xlat4.x = x_1038.x;
  let x_1043 : f32 = u_xlat7.x;
  let x_1046 : f32 = u_xlat4.x;
  let x_1049 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_1043) * x_1046) + x_1049);
  let x_1053 : f32 = u_xlat0;
  let x_1055 : f32 = u_xlat11.x;
  u_xlat18 = (x_1053 + -(x_1055));
  let x_1061 : f32 = u_xlat18;
  let x_1064 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_1061) < x_1064);
  let x_1068 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_1068);
  let x_1072 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_1072);
  let x_1076 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_1076);
  let x_1080 : f32 = u_xlat4.x;
  let x_1082 : f32 = u_xlat4.z;
  u_xlat4.x = (x_1080 * x_1082);
  let x_1086 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1086) + 1.0f);
  let x_1091 : f32 = u_xlat11.x;
  let x_1093 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_1091 * x_1093);
  let x_1097 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1099 : vec4<f32> = u_xlat3;
  let x_1103 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1097.x, x_1097.y, x_1097.z) * vec3<f32>(x_1099.x, x_1099.x, x_1099.x)) + vec3<f32>(x_1103.x, x_1103.y, x_1103.z));
  let x_1107 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1109 : vec3<f32> = u_xlat10;
  let x_1112 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1107.x, x_1107.y, x_1107.z) * vec3<f32>(x_1109.x, x_1109.x, x_1109.x)) + x_1112);
  let x_1115 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1117 : vec3<f32> = u_xlat11;
  let x_1120 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_1115.x, x_1115.y, x_1115.z) * vec3<f32>(x_1117.x, x_1117.x, x_1117.x)) + x_1120);
  let x_1122 : vec3<f32> = u_xlat1;
  let x_1124 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_1122) + x_1124);
  let x_1126 : vec3<f32> = u_xlat11;
  let x_1127 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1126, vec3<f32>(x_1127.x, x_1127.y, x_1127.z));
  let x_1131 : f32 = u_xlat0;
  let x_1135 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1131) * 0.004f) + x_1135);
  let x_1139 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1139, 0.0f);
  let x_1142 : vec3<f32> = u_xlat11;
  let x_1143 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_1142, x_1143);
  let x_1147 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1147 + 0.0001f);
  let x_1151 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1151);
  let x_1155 : f32 = u_xlat10.x;
  let x_1157 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1155 * x_1157);
  let x_1161 : f32 = u_xlat4.x;
  let x_1163 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1161 * x_1163);
  let x_1166 : f32 = u_xlat23;
  let x_1167 : f32 = u_xlat22;
  let x_1170 : f32 = u_xlat3.x;
  u_xlat22 = ((x_1166 * x_1167) + x_1170);
  let x_1175 : vec4<f32> = u_xlat3;
  let x_1178 : f32 = x_34.x_GlobalMipBias.x;
  let x_1179 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1175.z, x_1175.w), x_1178);
  u_xlat23 = x_1179.w;
  let x_1181 : f32 = u_xlat23;
  let x_1186 : vec2<f32> = (vec2<f32>(x_1181, x_1181) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1187 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1186.x, x_1186.y, x_1187.z, x_1187.w);
  let x_1190 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1190);
  let x_1192 : f32 = u_xlat23;
  u_xlat4.z = ((x_1192 * 2.0f) + -1.0f);
  let x_1197 : f32 = u_xlat3.y;
  u_xlat23 = (x_1197 * 628.31854248f);
  let x_1200 : f32 = u_xlat4.z;
  let x_1203 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1200) * x_1203) + 1.0f);
  let x_1208 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1208);
  let x_1211 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1211);
  let x_1214 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1214);
  let x_1218 : f32 = u_xlat3.x;
  let x_1220 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1218 * x_1220);
  let x_1224 : f32 = u_xlat3.x;
  let x_1226 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1224 * x_1226);
  let x_1229 : vec4<f32> = u_xlat2;
  let x_1231 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(vec3<f32>(x_1229.x, x_1229.y, x_1229.z), x_1231);
  let x_1234 : f32 = u_xlat23;
  u_xlatb23 = (x_1234 >= 0.0f);
  let x_1236 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1236);
  let x_1238 : f32 = u_xlat23;
  let x_1240 : vec3<f32> = u_xlat4;
  let x_1241 : vec3<f32> = (vec3<f32>(x_1238, x_1238, x_1238) * x_1240);
  let x_1242 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1241.x, x_1241.y, x_1241.z, x_1242.w);
  let x_1244 : vec4<f32> = u_xlat3;
  let x_1247 : vec4<f32> = x_34.x_SSAOParams;
  let x_1249 : vec3<f32> = (vec3<f32>(x_1244.x, x_1244.y, x_1244.z) * vec3<f32>(x_1247.y, x_1247.y, x_1247.y));
  let x_1250 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1249.x, x_1249.y, x_1249.z, x_1250.w);
  let x_1252 : vec4<f32> = u_xlat3;
  let x_1257 : vec3<f32> = u_xlat1;
  let x_1258 : vec3<f32> = ((vec3<f32>(x_1252.x, x_1252.y, x_1252.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1257);
  let x_1259 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1258.x, x_1258.y, x_1258.z, x_1259.w);
  let x_1261 : vec4<f32> = u_xlat3;
  let x_1264 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1266 : vec2<f32> = (vec2<f32>(x_1261.y, x_1261.y) * vec2<f32>(x_1264.x, x_1264.y));
  let x_1267 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1266.x, x_1267.y, x_1266.y);
  let x_1270 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1272 : vec4<f32> = u_xlat3;
  let x_1275 : vec3<f32> = u_xlat10;
  let x_1277 : vec2<f32> = ((vec2<f32>(x_1270.x, x_1270.y) * vec2<f32>(x_1272.x, x_1272.x)) + vec2<f32>(x_1275.x, x_1275.z));
  let x_1278 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1277.x, x_1277.y, x_1278.z, x_1278.w);
  let x_1281 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1283 : vec4<f32> = u_xlat3;
  let x_1286 : vec4<f32> = u_xlat3;
  let x_1288 : vec2<f32> = ((vec2<f32>(x_1281.x, x_1281.y) * vec2<f32>(x_1283.z, x_1283.z)) + vec2<f32>(x_1286.x, x_1286.y));
  let x_1289 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1288.x, x_1288.y, x_1289.z, x_1289.w);
  let x_1291 : vec4<f32> = u_xlat3;
  let x_1293 : vec2<f32> = (vec2<f32>(x_1291.x, x_1291.y) + vec2<f32>(1.0f, 1.0f));
  let x_1294 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1293.x, x_1293.y, x_1294.z, x_1294.w);
  let x_1296 : vec4<f32> = u_xlat3;
  let x_1298 : vec2<f32> = (vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(0.5f, 0.5f));
  let x_1299 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1298.x, x_1298.y, x_1299.z, x_1299.w);
  let x_1301 : vec4<f32> = u_xlat3;
  let x_1305 : vec2<f32> = clamp(vec2<f32>(x_1301.x, x_1301.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1306 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1305.x, x_1305.y, x_1306.z, x_1306.w);
  let x_1311 : vec4<f32> = u_xlat3;
  let x_1314 : f32 = x_34.x_GlobalMipBias.x;
  let x_1315 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1311.x, x_1311.y), x_1314);
  u_xlat23 = x_1315.x;
  let x_1318 : f32 = u_xlat7.x;
  let x_1320 : f32 = u_xlat23;
  let x_1323 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17.x = ((-(x_1318) * x_1320) + x_1323);
  let x_1327 : f32 = u_xlat0;
  let x_1329 : f32 = u_xlat17.x;
  u_xlat24 = (x_1327 + -(x_1329));
  let x_1333 : f32 = u_xlat24;
  let x_1336 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1333) < x_1336);
  let x_1338 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1338);
  let x_1340 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1340);
  let x_1342 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1342);
  let x_1344 : f32 = u_xlat23;
  let x_1345 : f32 = u_xlat24;
  u_xlat23 = (x_1344 * x_1345);
  let x_1348 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1348) + 1.0f);
  let x_1353 : f32 = u_xlat17.x;
  let x_1355 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17.x = (x_1353 * x_1355);
  let x_1359 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1361 : vec4<f32> = u_xlat3;
  let x_1365 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1359.x, x_1359.y, x_1359.z) * vec3<f32>(x_1361.x, x_1361.x, x_1361.x)) + vec3<f32>(x_1365.x, x_1365.y, x_1365.z));
  let x_1369 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1371 : vec3<f32> = u_xlat10;
  let x_1374 : vec3<f32> = u_xlat4;
  let x_1375 : vec3<f32> = ((vec3<f32>(x_1369.x, x_1369.y, x_1369.z) * vec3<f32>(x_1371.x, x_1371.x, x_1371.x)) + x_1374);
  let x_1376 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1375.x, x_1375.y, x_1376.z, x_1375.z);
  let x_1379 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1381 : vec2<f32> = u_xlat17;
  let x_1384 : vec4<f32> = u_xlat3;
  let x_1386 : vec3<f32> = ((vec3<f32>(x_1379.x, x_1379.y, x_1379.z) * vec3<f32>(x_1381.x, x_1381.x, x_1381.x)) + vec3<f32>(x_1384.x, x_1384.y, x_1384.w));
  let x_1387 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1386.x, x_1386.y, x_1386.z, x_1387.w);
  let x_1389 : vec3<f32> = u_xlat1;
  let x_1391 : vec4<f32> = u_xlat3;
  let x_1393 : vec3<f32> = (-(x_1389) + vec3<f32>(x_1391.x, x_1391.y, x_1391.z));
  let x_1394 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1393.x, x_1393.y, x_1393.z, x_1394.w);
  let x_1396 : vec4<f32> = u_xlat3;
  let x_1398 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1396.x, x_1396.y, x_1396.z), vec3<f32>(x_1398.x, x_1398.y, x_1398.z));
  let x_1401 : f32 = u_xlat0;
  let x_1404 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1401) * 0.004f) + x_1404);
  let x_1406 : f32 = u_xlat24;
  u_xlat24 = max(x_1406, 0.0f);
  let x_1408 : vec4<f32> = u_xlat3;
  let x_1410 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1408.x, x_1408.y, x_1408.z), vec3<f32>(x_1410.x, x_1410.y, x_1410.z));
  let x_1415 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1415 + 0.0001f);
  let x_1419 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1419);
  let x_1423 : f32 = u_xlat3.x;
  let x_1424 : f32 = u_xlat24;
  u_xlat3.x = (x_1423 * x_1424);
  let x_1428 : f32 = u_xlat3.x;
  let x_1429 : f32 = u_xlat23;
  let x_1431 : f32 = u_xlat22;
  u_xlat22 = ((x_1428 * x_1429) + x_1431);
  let x_1433 : vec2<f32> = u_xlat14;
  let x_1435 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = ((x_1433 * vec2<f32>(x_1435.x, x_1435.y)) + vec2<f32>(0.75f, 0.75f));
  let x_1444 : vec2<f32> = u_xlat14;
  let x_1446 : f32 = x_34.x_GlobalMipBias.x;
  let x_1447 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_1444, x_1446);
  u_xlat14.x = x_1447.w;
  let x_1450 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_1450.x, x_1450.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1457 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1457);
  let x_1461 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_1461 * 2.0f) + -1.0f);
  let x_1466 : f32 = u_xlat14.y;
  u_xlat14.x = (x_1466 * 628.31854248f);
  let x_1470 : f32 = u_xlat3.z;
  let x_1473 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_1470) * x_1473) + 1.0f);
  let x_1476 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_1476);
  let x_1479 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_1479);
  let x_1483 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_1483);
  let x_1486 : f32 = u_xlat21;
  let x_1488 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1486 * x_1488);
  let x_1491 : f32 = u_xlat21;
  let x_1493 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1491 * x_1493);
  let x_1496 : vec4<f32> = u_xlat2;
  let x_1498 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(vec3<f32>(x_1496.x, x_1496.y, x_1496.z), vec3<f32>(x_1498.x, x_1498.y, x_1498.z));
  let x_1503 : f32 = u_xlat14.x;
  u_xlatb14 = (x_1503 >= 0.0f);
  let x_1505 : bool = u_xlatb14;
  u_xlat14.x = select(-1.0f, 1.0f, x_1505);
  let x_1508 : vec2<f32> = u_xlat14;
  let x_1510 : vec4<f32> = u_xlat3;
  let x_1512 : vec3<f32> = (vec3<f32>(x_1508.x, x_1508.x, x_1508.x) * vec3<f32>(x_1510.x, x_1510.y, x_1510.z));
  let x_1513 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1512.x, x_1512.y, x_1512.z, x_1513.w);
  let x_1515 : vec4<f32> = u_xlat3;
  let x_1518 : vec4<f32> = x_34.x_SSAOParams;
  let x_1520 : vec3<f32> = (vec3<f32>(x_1515.x, x_1515.y, x_1515.z) * vec3<f32>(x_1518.y, x_1518.y, x_1518.y));
  let x_1521 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1520.x, x_1520.y, x_1520.z, x_1521.w);
  let x_1523 : vec4<f32> = u_xlat3;
  let x_1528 : vec3<f32> = u_xlat1;
  let x_1529 : vec3<f32> = ((vec3<f32>(x_1523.x, x_1523.y, x_1523.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1528);
  let x_1530 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1529.x, x_1529.y, x_1529.z, x_1530.w);
  let x_1532 : vec4<f32> = u_xlat3;
  let x_1535 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_1532.y, x_1532.y) * vec2<f32>(x_1535.x, x_1535.y));
  let x_1539 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1541 : vec4<f32> = u_xlat3;
  let x_1544 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1539.x, x_1539.y) * vec2<f32>(x_1541.x, x_1541.x)) + x_1544);
  let x_1547 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1549 : vec4<f32> = u_xlat3;
  let x_1552 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1547.x, x_1547.y) * vec2<f32>(x_1549.z, x_1549.z)) + x_1552);
  let x_1554 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1554 + vec2<f32>(1.0f, 1.0f));
  let x_1556 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1556 * vec2<f32>(0.5f, 0.5f));
  let x_1558 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_1558, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1565 : vec2<f32> = u_xlat14;
  let x_1567 : f32 = x_34.x_GlobalMipBias.x;
  let x_1568 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1565, x_1567);
  u_xlat23 = x_1568.x;
  let x_1571 : f32 = u_xlat7.x;
  let x_1573 : f32 = u_xlat23;
  let x_1576 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_1571) * x_1573) + x_1576);
  let x_1580 : f32 = u_xlat7.x;
  let x_1582 : f32 = u_xlat0;
  u_xlat3.x = (-(x_1580) + x_1582);
  let x_1586 : f32 = u_xlat3.x;
  let x_1589 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_1586) < x_1589);
  let x_1591 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_1591);
  let x_1594 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1594);
  let x_1596 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1596);
  let x_1598 : f32 = u_xlat23;
  let x_1600 : f32 = u_xlat3.x;
  u_xlat23 = (x_1598 * x_1600);
  let x_1603 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_1603) + 1.0f);
  let x_1607 : f32 = u_xlat7.x;
  let x_1609 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_1607 * x_1609);
  let x_1613 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1615 : vec2<f32> = u_xlat14;
  let x_1619 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_1621 : vec3<f32> = ((vec3<f32>(x_1613.x, x_1613.y, x_1613.z) * vec3<f32>(x_1615.x, x_1615.x, x_1615.x)) + vec3<f32>(x_1619.x, x_1619.y, x_1619.z));
  let x_1622 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1621.x, x_1621.y, x_1621.z, x_1622.w);
  let x_1625 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1627 : f32 = u_xlat21;
  let x_1630 : vec4<f32> = u_xlat3;
  let x_1632 : vec3<f32> = ((vec3<f32>(x_1625.x, x_1625.y, x_1625.z) * vec3<f32>(x_1627, x_1627, x_1627)) + vec3<f32>(x_1630.x, x_1630.y, x_1630.z));
  let x_1633 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1632.x, x_1632.y, x_1632.z, x_1633.w);
  let x_1636 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1638 : vec3<f32> = u_xlat7;
  let x_1641 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_1636.x, x_1636.y, x_1636.z) * vec3<f32>(x_1638.x, x_1638.x, x_1638.x)) + vec3<f32>(x_1641.x, x_1641.y, x_1641.z));
  let x_1644 : vec3<f32> = u_xlat1;
  let x_1646 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_1644) + x_1646);
  let x_1648 : vec3<f32> = u_xlat7;
  let x_1649 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(x_1648, vec3<f32>(x_1649.x, x_1649.y, x_1649.z));
  let x_1653 : f32 = u_xlat0;
  let x_1657 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1653) * 0.004f) + x_1657);
  let x_1661 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1661, 0.0f);
  let x_1664 : vec3<f32> = u_xlat7;
  let x_1665 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_1664, x_1665);
  let x_1669 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1669 + 0.0001f);
  let x_1673 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_1673);
  let x_1677 : f32 = u_xlat7.x;
  let x_1679 : f32 = u_xlat1.x;
  u_xlat7.x = (x_1677 * x_1679);
  let x_1683 : f32 = u_xlat7.x;
  let x_1684 : f32 = u_xlat23;
  let x_1686 : f32 = u_xlat22;
  u_xlat7.x = ((x_1683 * x_1684) + x_1686);
  let x_1690 : f32 = u_xlat7.x;
  let x_1692 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_1690 * x_1692);
  let x_1696 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_1696);
  let x_1699 : f32 = u_xlat0;
  let x_1702 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_1699) * x_1702) + 1.0f);
  let x_1705 : f32 = u_xlat0;
  let x_1706 : f32 = u_xlat0;
  u_xlat0 = (x_1705 * x_1706);
  let x_1709 : f32 = u_xlat7.x;
  let x_1711 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_1709 * x_1711);
  let x_1714 : f32 = u_xlat0;
  let x_1716 : f32 = u_xlat7.x;
  u_xlat0 = (x_1714 * x_1716);
  let x_1718 : f32 = u_xlat0;
  u_xlat0 = (x_1718 * 0.25f);
  let x_1720 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1720, 0.0f, 1.0f);
  let x_1722 : f32 = u_xlat0;
  u_xlat0 = log2(x_1722);
  let x_1724 : f32 = u_xlat0;
  u_xlat0 = (x_1724 * 0.600000024f);
  let x_1727 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1727);
  let x_1731 : vec4<f32> = u_xlat2;
  let x_1735 : vec3<f32> = ((vec3<f32>(x_1731.x, x_1731.y, x_1731.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1736 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1736.x, x_1735.x, x_1735.y, x_1735.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

