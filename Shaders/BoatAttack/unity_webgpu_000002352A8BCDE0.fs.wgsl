struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_256 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3343 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3777 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3882 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1571 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu44 : u32;
  var u_xlatu24 : u32;
  var u_xlati44 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : vec2<f32>;
  var x_1705 : f32;
  var u_xlatb23 : vec2<bool>;
  var x_1736 : f32;
  var u_xlat44 : f32;
  var u_xlatb2 : bool;
  var x_1783 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb8 : vec2<bool>;
  var x_3425 : f32;
  var x_3436 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatb44 : vec2<bool>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var u_xlat68 : f32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlatu71 : u32;
  var u_xlati73 : i32;
  var u_xlati71 : i32;
  var u_xlati11 : i32;
  var u_xlat32 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4185 : f32;
  var x_4198 : f32;
  var x_4260 : f32;
  var x_4271 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb63;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat63 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat63;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat63;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat63;
  u_xlat63 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat63;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_258 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][1i];
  let x_260 : vec3<f32> = (vec3<f32>(x_250.y, x_250.y, x_250.y) * vec3<f32>(x_258.x, x_258.y, x_258.z));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][0i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec4<f32> = u_xlat6;
  let x_271 : vec3<f32> = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.x, x_266.x, x_266.x)) + vec3<f32>(x_269.x, x_269.y, x_269.z));
  let x_272 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_271.x, x_271.y, x_271.z, x_272.w);
  let x_275 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][2i];
  let x_277 : vec3<f32> = vs_INTERP0;
  let x_280 : vec4<f32> = u_xlat6;
  let x_282 : vec3<f32> = ((vec3<f32>(x_275.x, x_275.y, x_275.z) * vec3<f32>(x_277.z, x_277.z, x_277.z)) + vec3<f32>(x_280.x, x_280.y, x_280.z));
  let x_283 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_282.x, x_282.y, x_282.z, x_283.w);
  let x_285 : vec4<f32> = u_xlat6;
  let x_289 : vec4<f32> = x_256.x_MainLightWorldToShadow[0i][3i];
  let x_291 : vec3<f32> = (vec3<f32>(x_285.x, x_285.y, x_285.z) + vec3<f32>(x_289.x, x_289.y, x_289.z));
  let x_292 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_291.x, x_291.y, x_291.z, x_292.w);
  let x_296 : f32 = x_256.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_296);
  let x_298 : bool = u_xlatb63;
  if (x_298) {
    let x_303 : f32 = x_256.x_MainLightShadowParams.y;
    u_xlatb64 = (x_303 == 1.0f);
    let x_305 : bool = u_xlatb64;
    if (x_305) {
      let x_309 : vec4<f32> = u_xlat6;
      let x_313 : vec4<f32> = x_256.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_309.x, x_309.y, x_309.x, x_309.y) + x_313);
      let x_316 : vec4<f32> = u_xlat7;
      let x_317 : vec2<f32> = vec2<f32>(x_316.x, x_316.y);
      let x_319 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_317.x, x_317.y, x_319);
      let x_332 : vec3<f32> = txVec0;
      let x_334 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_332.xy, x_332.z);
      u_xlat8.x = x_334;
      let x_337 : vec4<f32> = u_xlat7;
      let x_338 : vec2<f32> = vec2<f32>(x_337.z, x_337.w);
      let x_340 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_338.x, x_338.y, x_340);
      let x_347 : vec3<f32> = txVec1;
      let x_349 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_347.xy, x_347.z);
      u_xlat8.y = x_349;
      let x_351 : vec4<f32> = u_xlat6;
      let x_355 : vec4<f32> = x_256.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_351.x, x_351.y, x_351.x, x_351.y) + x_355);
      let x_358 : vec4<f32> = u_xlat7;
      let x_359 : vec2<f32> = vec2<f32>(x_358.x, x_358.y);
      let x_361 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_359.x, x_359.y, x_361);
      let x_368 : vec3<f32> = txVec2;
      let x_370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_368.xy, x_368.z);
      u_xlat8.z = x_370;
      let x_373 : vec4<f32> = u_xlat7;
      let x_374 : vec2<f32> = vec2<f32>(x_373.z, x_373.w);
      let x_376 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_374.x, x_374.y, x_376);
      let x_383 : vec3<f32> = txVec3;
      let x_385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_383.xy, x_383.z);
      u_xlat8.w = x_385;
      let x_387 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_387, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_394 : f32 = x_256.x_MainLightShadowParams.y;
      u_xlatb65 = (x_394 == 2.0f);
      let x_396 : bool = u_xlatb65;
      if (x_396) {
        let x_399 : vec4<f32> = u_xlat6;
        let x_402 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_407 : vec2<f32> = ((vec2<f32>(x_399.x, x_399.y) * vec2<f32>(x_402.z, x_402.w)) + vec2<f32>(0.5f, 0.5f));
        let x_408 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_407.x, x_407.y, x_408.z, x_408.w);
        let x_410 : vec4<f32> = u_xlat7;
        let x_412 : vec2<f32> = floor(vec2<f32>(x_410.x, x_410.y));
        let x_413 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_412.x, x_412.y, x_413.z, x_413.w);
        let x_417 : vec4<f32> = u_xlat6;
        let x_420 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_423 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_417.x, x_417.y) * vec2<f32>(x_420.z, x_420.w)) + -(vec2<f32>(x_423.x, x_423.y)));
        let x_427 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_427.x, x_427.x, x_427.y, x_427.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_432 : vec4<f32> = u_xlat8;
        let x_434 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_432.x, x_432.x, x_432.z, x_432.z) * vec4<f32>(x_434.x, x_434.x, x_434.z, x_434.z));
        let x_437 : vec4<f32> = u_xlat9;
        let x_441 : vec2<f32> = (vec2<f32>(x_437.y, x_437.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_442 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_441.x, x_442.y, x_441.y, x_442.w);
        let x_444 : vec4<f32> = u_xlat9;
        let x_447 : vec2<f32> = u_xlat49;
        let x_449 : vec2<f32> = ((vec2<f32>(x_444.x, x_444.z) * vec2<f32>(0.5f, 0.5f)) + -(x_447));
        let x_450 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_449.x, x_449.y, x_450.z, x_450.w);
        let x_453 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_453) + vec2<f32>(1.0f, 1.0f));
        let x_458 : vec2<f32> = u_xlat49;
        let x_460 : vec2<f32> = min(x_458, vec2<f32>(0.0f, 0.0f));
        let x_461 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_460.x, x_460.y, x_461.z, x_461.w);
        let x_463 : vec4<f32> = u_xlat10;
        let x_466 : vec4<f32> = u_xlat10;
        let x_469 : vec2<f32> = u_xlat51;
        let x_470 : vec2<f32> = ((-(vec2<f32>(x_463.x, x_463.y)) * vec2<f32>(x_466.x, x_466.y)) + x_469);
        let x_471 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_470.x, x_470.y, x_471.z, x_471.w);
        let x_473 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_473, vec2<f32>(0.0f, 0.0f));
        let x_475 : vec2<f32> = u_xlat49;
        let x_477 : vec2<f32> = u_xlat49;
        let x_479 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_475) * x_477) + vec2<f32>(x_479.y, x_479.w));
        let x_482 : vec4<f32> = u_xlat10;
        let x_484 : vec2<f32> = (vec2<f32>(x_482.x, x_482.y) + vec2<f32>(1.0f, 1.0f));
        let x_485 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_484.x, x_484.y, x_485.z, x_485.w);
        let x_487 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_487 + vec2<f32>(1.0f, 1.0f));
        let x_490 : vec4<f32> = u_xlat9;
        let x_494 : vec2<f32> = (vec2<f32>(x_490.x, x_490.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_495 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_494.x, x_494.y, x_495.z, x_495.w);
        let x_497 : vec2<f32> = u_xlat51;
        let x_498 : vec2<f32> = (x_497 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_499 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat10;
        let x_503 : vec2<f32> = (vec2<f32>(x_501.x, x_501.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_504 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_503.x, x_503.y, x_504.z, x_504.w);
        let x_507 : vec2<f32> = u_xlat49;
        let x_508 : vec2<f32> = (x_507 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_509 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_511.y, x_511.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_515 : f32 = u_xlat10.x;
        u_xlat11.z = x_515;
        let x_518 : f32 = u_xlat49.x;
        u_xlat11.w = x_518;
        let x_521 : f32 = u_xlat12.x;
        u_xlat9.z = x_521;
        let x_524 : f32 = u_xlat8.x;
        u_xlat9.w = x_524;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_527.z, x_527.w, x_527.x, x_527.z) + vec4<f32>(x_529.z, x_529.w, x_529.x, x_529.z));
        let x_533 : f32 = u_xlat11.y;
        u_xlat10.z = x_533;
        let x_536 : f32 = u_xlat49.y;
        u_xlat10.w = x_536;
        let x_539 : f32 = u_xlat9.y;
        u_xlat12.z = x_539;
        let x_542 : f32 = u_xlat8.z;
        u_xlat12.w = x_542;
        let x_544 : vec4<f32> = u_xlat10;
        let x_546 : vec4<f32> = u_xlat12;
        let x_548 : vec3<f32> = (vec3<f32>(x_544.z, x_544.y, x_544.w) + vec3<f32>(x_546.z, x_546.y, x_546.w));
        let x_549 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_548.x, x_548.y, x_548.z, x_549.w);
        let x_551 : vec4<f32> = u_xlat9;
        let x_553 : vec4<f32> = u_xlat13;
        let x_555 : vec3<f32> = (vec3<f32>(x_551.x, x_551.z, x_551.w) / vec3<f32>(x_553.z, x_553.w, x_553.y));
        let x_556 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_555.x, x_555.y, x_555.z, x_556.w);
        let x_558 : vec4<f32> = u_xlat9;
        let x_564 : vec3<f32> = (vec3<f32>(x_558.x, x_558.y, x_558.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_565 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat12;
        let x_569 : vec4<f32> = u_xlat8;
        let x_571 : vec3<f32> = (vec3<f32>(x_567.z, x_567.y, x_567.w) / vec3<f32>(x_569.x, x_569.y, x_569.z));
        let x_572 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
        let x_574 : vec4<f32> = u_xlat10;
        let x_576 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_577 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_576.x, x_576.y, x_576.z, x_577.w);
        let x_579 : vec4<f32> = u_xlat9;
        let x_582 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_584 : vec3<f32> = (vec3<f32>(x_579.y, x_579.x, x_579.z) * vec3<f32>(x_582.x, x_582.x, x_582.x));
        let x_585 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_584.x, x_584.y, x_584.z, x_585.w);
        let x_587 : vec4<f32> = u_xlat10;
        let x_590 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_592 : vec3<f32> = (vec3<f32>(x_587.x, x_587.y, x_587.z) * vec3<f32>(x_590.y, x_590.y, x_590.y));
        let x_593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_596 : f32 = u_xlat10.x;
        u_xlat9.w = x_596;
        let x_598 : vec4<f32> = u_xlat7;
        let x_601 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_604 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_598.x, x_598.y, x_598.x, x_598.y) * vec4<f32>(x_601.x, x_601.y, x_601.x, x_601.y)) + vec4<f32>(x_604.y, x_604.w, x_604.x, x_604.w));
        let x_607 : vec4<f32> = u_xlat7;
        let x_610 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_613 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_607.x, x_607.y) * vec2<f32>(x_610.x, x_610.y)) + vec2<f32>(x_613.z, x_613.w));
        let x_617 : f32 = u_xlat9.y;
        u_xlat10.w = x_617;
        let x_619 : vec4<f32> = u_xlat10;
        let x_620 : vec2<f32> = vec2<f32>(x_619.y, x_619.z);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_621.x, x_620.x, x_621.z, x_620.y);
        let x_623 : vec4<f32> = u_xlat7;
        let x_626 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_623.x, x_623.y, x_623.x, x_623.y) * vec4<f32>(x_626.x, x_626.y, x_626.x, x_626.y)) + vec4<f32>(x_629.x, x_629.y, x_629.z, x_629.y));
        let x_632 : vec4<f32> = u_xlat7;
        let x_635 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_638 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_632.x, x_632.y, x_632.x, x_632.y) * vec4<f32>(x_635.x, x_635.y, x_635.x, x_635.y)) + vec4<f32>(x_638.w, x_638.y, x_638.w, x_638.z));
        let x_641 : vec4<f32> = u_xlat7;
        let x_644 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_647 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_641.x, x_641.y, x_641.x, x_641.y) * vec4<f32>(x_644.x, x_644.y, x_644.x, x_644.y)) + vec4<f32>(x_647.x, x_647.w, x_647.z, x_647.w));
        let x_651 : vec4<f32> = u_xlat8;
        let x_653 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_651.x, x_651.x, x_651.x, x_651.y) * vec4<f32>(x_653.z, x_653.w, x_653.y, x_653.z));
        let x_657 : vec4<f32> = u_xlat8;
        let x_659 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_657.y, x_657.y, x_657.z, x_657.z) * x_659);
        let x_663 : f32 = u_xlat8.z;
        let x_665 : f32 = u_xlat13.y;
        u_xlat65 = (x_663 * x_665);
        let x_668 : vec4<f32> = u_xlat11;
        let x_669 : vec2<f32> = vec2<f32>(x_668.x, x_668.y);
        let x_671 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_669.x, x_669.y, x_671);
        let x_679 : vec3<f32> = txVec4;
        let x_681 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_679.xy, x_679.z);
        u_xlat67 = x_681;
        let x_683 : vec4<f32> = u_xlat11;
        let x_684 : vec2<f32> = vec2<f32>(x_683.z, x_683.w);
        let x_686 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_684.x, x_684.y, x_686);
        let x_694 : vec3<f32> = txVec5;
        let x_696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_694.xy, x_694.z);
        u_xlat69 = x_696;
        let x_697 : f32 = u_xlat69;
        let x_699 : f32 = u_xlat14.y;
        u_xlat69 = (x_697 * x_699);
        let x_702 : f32 = u_xlat14.x;
        let x_703 : f32 = u_xlat67;
        let x_705 : f32 = u_xlat69;
        u_xlat67 = ((x_702 * x_703) + x_705);
        let x_708 : vec2<f32> = u_xlat49;
        let x_710 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_708.x, x_708.y, x_710);
        let x_717 : vec3<f32> = txVec6;
        let x_719 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_717.xy, x_717.z);
        u_xlat69 = x_719;
        let x_721 : f32 = u_xlat14.z;
        let x_722 : f32 = u_xlat69;
        let x_724 : f32 = u_xlat67;
        u_xlat67 = ((x_721 * x_722) + x_724);
        let x_727 : vec4<f32> = u_xlat10;
        let x_728 : vec2<f32> = vec2<f32>(x_727.x, x_727.y);
        let x_730 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_728.x, x_728.y, x_730);
        let x_737 : vec3<f32> = txVec7;
        let x_739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_737.xy, x_737.z);
        u_xlat69 = x_739;
        let x_741 : f32 = u_xlat14.w;
        let x_742 : f32 = u_xlat69;
        let x_744 : f32 = u_xlat67;
        u_xlat67 = ((x_741 * x_742) + x_744);
        let x_747 : vec4<f32> = u_xlat12;
        let x_748 : vec2<f32> = vec2<f32>(x_747.x, x_747.y);
        let x_750 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_748.x, x_748.y, x_750);
        let x_757 : vec3<f32> = txVec8;
        let x_759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_757.xy, x_757.z);
        u_xlat69 = x_759;
        let x_761 : f32 = u_xlat15.x;
        let x_762 : f32 = u_xlat69;
        let x_764 : f32 = u_xlat67;
        u_xlat67 = ((x_761 * x_762) + x_764);
        let x_767 : vec4<f32> = u_xlat12;
        let x_768 : vec2<f32> = vec2<f32>(x_767.z, x_767.w);
        let x_770 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_768.x, x_768.y, x_770);
        let x_777 : vec3<f32> = txVec9;
        let x_779 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_777.xy, x_777.z);
        u_xlat69 = x_779;
        let x_781 : f32 = u_xlat15.y;
        let x_782 : f32 = u_xlat69;
        let x_784 : f32 = u_xlat67;
        u_xlat67 = ((x_781 * x_782) + x_784);
        let x_787 : vec4<f32> = u_xlat10;
        let x_788 : vec2<f32> = vec2<f32>(x_787.z, x_787.w);
        let x_790 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_788.x, x_788.y, x_790);
        let x_797 : vec3<f32> = txVec10;
        let x_799 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_797.xy, x_797.z);
        u_xlat69 = x_799;
        let x_801 : f32 = u_xlat15.z;
        let x_802 : f32 = u_xlat69;
        let x_804 : f32 = u_xlat67;
        u_xlat67 = ((x_801 * x_802) + x_804);
        let x_807 : vec4<f32> = u_xlat9;
        let x_808 : vec2<f32> = vec2<f32>(x_807.x, x_807.y);
        let x_810 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_808.x, x_808.y, x_810);
        let x_817 : vec3<f32> = txVec11;
        let x_819 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_817.xy, x_817.z);
        u_xlat69 = x_819;
        let x_821 : f32 = u_xlat15.w;
        let x_822 : f32 = u_xlat69;
        let x_824 : f32 = u_xlat67;
        u_xlat67 = ((x_821 * x_822) + x_824);
        let x_827 : vec4<f32> = u_xlat9;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_837 : vec3<f32> = txVec12;
        let x_839 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_837.xy, x_837.z);
        u_xlat69 = x_839;
        let x_840 : f32 = u_xlat65;
        let x_841 : f32 = u_xlat69;
        let x_843 : f32 = u_xlat67;
        u_xlat64 = ((x_840 * x_841) + x_843);
      } else {
        let x_846 : vec4<f32> = u_xlat6;
        let x_849 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_852 : vec2<f32> = ((vec2<f32>(x_846.x, x_846.y) * vec2<f32>(x_849.z, x_849.w)) + vec2<f32>(0.5f, 0.5f));
        let x_853 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_852.x, x_852.y, x_853.z, x_853.w);
        let x_855 : vec4<f32> = u_xlat7;
        let x_857 : vec2<f32> = floor(vec2<f32>(x_855.x, x_855.y));
        let x_858 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_857.x, x_857.y, x_858.z, x_858.w);
        let x_860 : vec4<f32> = u_xlat6;
        let x_863 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_866 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_860.x, x_860.y) * vec2<f32>(x_863.z, x_863.w)) + -(vec2<f32>(x_866.x, x_866.y)));
        let x_870 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_870.x, x_870.x, x_870.y, x_870.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_873 : vec4<f32> = u_xlat8;
        let x_875 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z) * vec4<f32>(x_875.x, x_875.x, x_875.z, x_875.z));
        let x_878 : vec4<f32> = u_xlat9;
        let x_882 : vec2<f32> = (vec2<f32>(x_878.y, x_878.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_883 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_883.x, x_882.x, x_883.z, x_882.y);
        let x_885 : vec4<f32> = u_xlat9;
        let x_888 : vec2<f32> = u_xlat49;
        let x_890 : vec2<f32> = ((vec2<f32>(x_885.x, x_885.z) * vec2<f32>(0.5f, 0.5f)) + -(x_888));
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_890.x, x_891.y, x_890.y, x_891.w);
        let x_893 : vec2<f32> = u_xlat49;
        let x_895 : vec2<f32> = (-(x_893) + vec2<f32>(1.0f, 1.0f));
        let x_896 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_895.x, x_895.y, x_896.z, x_896.w);
        let x_898 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_898, vec2<f32>(0.0f, 0.0f));
        let x_900 : vec2<f32> = u_xlat51;
        let x_902 : vec2<f32> = u_xlat51;
        let x_904 : vec4<f32> = u_xlat9;
        let x_906 : vec2<f32> = ((-(x_900) * x_902) + vec2<f32>(x_904.x, x_904.y));
        let x_907 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_906.x, x_906.y, x_907.z, x_907.w);
        let x_909 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_909, vec2<f32>(0.0f, 0.0f));
        let x_912 : vec2<f32> = u_xlat51;
        let x_914 : vec2<f32> = u_xlat51;
        let x_916 : vec4<f32> = u_xlat8;
        let x_918 : vec2<f32> = ((-(x_912) * x_914) + vec2<f32>(x_916.y, x_916.w));
        let x_919 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_918.x, x_919.y, x_918.y);
        let x_921 : vec4<f32> = u_xlat9;
        let x_924 : vec2<f32> = (vec2<f32>(x_921.x, x_921.y) + vec2<f32>(2.0f, 2.0f));
        let x_925 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_924.x, x_924.y, x_925.z, x_925.w);
        let x_927 : vec3<f32> = u_xlat29;
        let x_929 : vec2<f32> = (vec2<f32>(x_927.x, x_927.z) + vec2<f32>(2.0f, 2.0f));
        let x_930 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_930.x, x_929.x, x_930.z, x_929.y);
        let x_933 : f32 = u_xlat8.y;
        u_xlat11.z = (x_933 * 0.081632003f);
        let x_937 : vec4<f32> = u_xlat8;
        let x_940 : vec3<f32> = (vec3<f32>(x_937.z, x_937.x, x_937.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_941 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_940.x, x_940.y, x_940.z, x_941.w);
        let x_943 : vec4<f32> = u_xlat9;
        let x_946 : vec2<f32> = (vec2<f32>(x_943.x, x_943.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_947 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_946.x, x_946.y, x_947.z, x_947.w);
        let x_950 : f32 = u_xlat12.y;
        u_xlat11.x = x_950;
        let x_952 : vec2<f32> = u_xlat49;
        let x_959 : vec2<f32> = ((vec2<f32>(x_952.x, x_952.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_960 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_960.x, x_959.x, x_960.z, x_959.y);
        let x_962 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = ((vec2<f32>(x_962.x, x_962.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_967 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_966.x, x_967.y, x_966.y, x_967.w);
        let x_970 : f32 = u_xlat8.x;
        u_xlat9.y = x_970;
        let x_973 : f32 = u_xlat10.y;
        u_xlat9.w = x_973;
        let x_975 : vec4<f32> = u_xlat9;
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_975 + x_976);
        let x_978 : vec2<f32> = u_xlat49;
        let x_981 : vec2<f32> = ((vec2<f32>(x_978.y, x_978.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_982 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_982.x, x_981.x, x_982.z, x_981.y);
        let x_984 : vec2<f32> = u_xlat49;
        let x_987 : vec2<f32> = ((vec2<f32>(x_984.y, x_984.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_988 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_987.x, x_988.y, x_987.y, x_988.w);
        let x_991 : f32 = u_xlat8.y;
        u_xlat10.y = x_991;
        let x_993 : vec4<f32> = u_xlat10;
        let x_994 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_993 + x_994);
        let x_996 : vec4<f32> = u_xlat9;
        let x_997 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_996 / x_997);
        let x_999 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_999 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1005 : vec4<f32> = u_xlat10;
        let x_1006 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1005 / x_1006);
        let x_1008 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1008 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1010 : vec4<f32> = u_xlat9;
        let x_1013 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1010.w, x_1010.x, x_1010.y, x_1010.z) * vec4<f32>(x_1013.x, x_1013.x, x_1013.x, x_1013.x));
        let x_1016 : vec4<f32> = u_xlat10;
        let x_1019 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1016.x, x_1016.w, x_1016.y, x_1016.z) * vec4<f32>(x_1019.y, x_1019.y, x_1019.y, x_1019.y));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1023 : vec3<f32> = vec3<f32>(x_1022.y, x_1022.z, x_1022.w);
        let x_1024 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1023.x, x_1024.y, x_1023.y, x_1023.z);
        let x_1027 : f32 = u_xlat10.x;
        u_xlat12.y = x_1027;
        let x_1029 : vec4<f32> = u_xlat7;
        let x_1032 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1035 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1029.x, x_1029.y, x_1029.x, x_1029.y) * vec4<f32>(x_1032.x, x_1032.y, x_1032.x, x_1032.y)) + vec4<f32>(x_1035.x, x_1035.y, x_1035.z, x_1035.y));
        let x_1038 : vec4<f32> = u_xlat7;
        let x_1041 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1044 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1038.x, x_1038.y) * vec2<f32>(x_1041.x, x_1041.y)) + vec2<f32>(x_1044.w, x_1044.y));
        let x_1048 : f32 = u_xlat12.y;
        u_xlat9.y = x_1048;
        let x_1051 : f32 = u_xlat10.z;
        u_xlat12.y = x_1051;
        let x_1053 : vec4<f32> = u_xlat7;
        let x_1056 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1059 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1053.x, x_1053.y, x_1053.x, x_1053.y) * vec4<f32>(x_1056.x, x_1056.y, x_1056.x, x_1056.y)) + vec4<f32>(x_1059.x, x_1059.y, x_1059.z, x_1059.y));
        let x_1062 : vec4<f32> = u_xlat7;
        let x_1065 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1068 : vec4<f32> = u_xlat12;
        let x_1070 : vec2<f32> = ((vec2<f32>(x_1062.x, x_1062.y) * vec2<f32>(x_1065.x, x_1065.y)) + vec2<f32>(x_1068.w, x_1068.y));
        let x_1071 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1070.x, x_1070.y, x_1071.z, x_1071.w);
        let x_1074 : f32 = u_xlat12.y;
        u_xlat9.z = x_1074;
        let x_1077 : vec4<f32> = u_xlat7;
        let x_1080 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1077.x, x_1077.y, x_1077.x, x_1077.y) * vec4<f32>(x_1080.x, x_1080.y, x_1080.x, x_1080.y)) + vec4<f32>(x_1083.x, x_1083.y, x_1083.x, x_1083.z));
        let x_1087 : f32 = u_xlat10.w;
        u_xlat12.y = x_1087;
        let x_1090 : vec4<f32> = u_xlat7;
        let x_1093 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1096 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1090.x, x_1090.y, x_1090.x, x_1090.y) * vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.y)) + vec4<f32>(x_1096.x, x_1096.y, x_1096.z, x_1096.y));
        let x_1100 : vec4<f32> = u_xlat7;
        let x_1103 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat12;
        let x_1108 : vec2<f32> = ((vec2<f32>(x_1100.x, x_1100.y) * vec2<f32>(x_1103.x, x_1103.y)) + vec2<f32>(x_1106.w, x_1106.y));
        let x_1109 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1108.x, x_1108.y, x_1109.z);
        let x_1112 : f32 = u_xlat12.y;
        u_xlat9.w = x_1112;
        let x_1115 : vec4<f32> = u_xlat7;
        let x_1118 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1121 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1118.x, x_1118.y)) + vec2<f32>(x_1121.x, x_1121.w));
        let x_1124 : vec4<f32> = u_xlat12;
        let x_1125 : vec3<f32> = vec3<f32>(x_1124.x, x_1124.z, x_1124.w);
        let x_1126 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1125.x, x_1126.y, x_1125.y, x_1125.z);
        let x_1128 : vec4<f32> = u_xlat7;
        let x_1131 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1134 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1128.x, x_1128.y, x_1128.x, x_1128.y) * vec4<f32>(x_1131.x, x_1131.y, x_1131.x, x_1131.y)) + vec4<f32>(x_1134.x, x_1134.y, x_1134.z, x_1134.y));
        let x_1138 : vec4<f32> = u_xlat7;
        let x_1141 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1144 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1141.x, x_1141.y)) + vec2<f32>(x_1144.w, x_1144.y));
        let x_1148 : f32 = u_xlat9.x;
        u_xlat10.x = x_1148;
        let x_1150 : vec4<f32> = u_xlat7;
        let x_1153 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_1156 : vec4<f32> = u_xlat10;
        let x_1158 : vec2<f32> = ((vec2<f32>(x_1150.x, x_1150.y) * vec2<f32>(x_1153.x, x_1153.y)) + vec2<f32>(x_1156.x, x_1156.y));
        let x_1159 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1158.x, x_1158.y, x_1159.z, x_1159.w);
        let x_1162 : vec4<f32> = u_xlat8;
        let x_1164 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1162.x, x_1162.x, x_1162.x, x_1162.x) * x_1164);
        let x_1167 : vec4<f32> = u_xlat8;
        let x_1169 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1167.y, x_1167.y, x_1167.y, x_1167.y) * x_1169);
        let x_1172 : vec4<f32> = u_xlat8;
        let x_1174 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1172.z, x_1172.z, x_1172.z, x_1172.z) * x_1174);
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1176.w, x_1176.w, x_1176.w, x_1176.w) * x_1178);
        let x_1181 : vec4<f32> = u_xlat13;
        let x_1182 : vec2<f32> = vec2<f32>(x_1181.x, x_1181.y);
        let x_1184 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1182.x, x_1182.y, x_1184);
        let x_1191 : vec3<f32> = txVec13;
        let x_1193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1191.xy, x_1191.z);
        u_xlat65 = x_1193;
        let x_1195 : vec4<f32> = u_xlat13;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.z, x_1195.w);
        let x_1198 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec14;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat67 = x_1207;
        let x_1208 : f32 = u_xlat67;
        let x_1210 : f32 = u_xlat18.y;
        u_xlat67 = (x_1208 * x_1210);
        let x_1213 : f32 = u_xlat18.x;
        let x_1214 : f32 = u_xlat65;
        let x_1216 : f32 = u_xlat67;
        u_xlat65 = ((x_1213 * x_1214) + x_1216);
        let x_1219 : vec2<f32> = u_xlat49;
        let x_1221 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1219.x, x_1219.y, x_1221);
        let x_1228 : vec3<f32> = txVec15;
        let x_1230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1228.xy, x_1228.z);
        u_xlat67 = x_1230;
        let x_1232 : f32 = u_xlat18.z;
        let x_1233 : f32 = u_xlat67;
        let x_1235 : f32 = u_xlat65;
        u_xlat65 = ((x_1232 * x_1233) + x_1235);
        let x_1238 : vec4<f32> = u_xlat16;
        let x_1239 : vec2<f32> = vec2<f32>(x_1238.x, x_1238.y);
        let x_1241 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1239.x, x_1239.y, x_1241);
        let x_1248 : vec3<f32> = txVec16;
        let x_1250 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1248.xy, x_1248.z);
        u_xlat67 = x_1250;
        let x_1252 : f32 = u_xlat18.w;
        let x_1253 : f32 = u_xlat67;
        let x_1255 : f32 = u_xlat65;
        u_xlat65 = ((x_1252 * x_1253) + x_1255);
        let x_1258 : vec4<f32> = u_xlat14;
        let x_1259 : vec2<f32> = vec2<f32>(x_1258.x, x_1258.y);
        let x_1261 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1259.x, x_1259.y, x_1261);
        let x_1268 : vec3<f32> = txVec17;
        let x_1270 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1268.xy, x_1268.z);
        u_xlat67 = x_1270;
        let x_1272 : f32 = u_xlat19.x;
        let x_1273 : f32 = u_xlat67;
        let x_1275 : f32 = u_xlat65;
        u_xlat65 = ((x_1272 * x_1273) + x_1275);
        let x_1278 : vec4<f32> = u_xlat14;
        let x_1279 : vec2<f32> = vec2<f32>(x_1278.z, x_1278.w);
        let x_1281 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1279.x, x_1279.y, x_1281);
        let x_1288 : vec3<f32> = txVec18;
        let x_1290 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1288.xy, x_1288.z);
        u_xlat67 = x_1290;
        let x_1292 : f32 = u_xlat19.y;
        let x_1293 : f32 = u_xlat67;
        let x_1295 : f32 = u_xlat65;
        u_xlat65 = ((x_1292 * x_1293) + x_1295);
        let x_1298 : vec4<f32> = u_xlat15;
        let x_1299 : vec2<f32> = vec2<f32>(x_1298.x, x_1298.y);
        let x_1301 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1299.x, x_1299.y, x_1301);
        let x_1308 : vec3<f32> = txVec19;
        let x_1310 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1308.xy, x_1308.z);
        u_xlat67 = x_1310;
        let x_1312 : f32 = u_xlat19.z;
        let x_1313 : f32 = u_xlat67;
        let x_1315 : f32 = u_xlat65;
        u_xlat65 = ((x_1312 * x_1313) + x_1315);
        let x_1318 : vec4<f32> = u_xlat16;
        let x_1319 : vec2<f32> = vec2<f32>(x_1318.z, x_1318.w);
        let x_1321 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1319.x, x_1319.y, x_1321);
        let x_1328 : vec3<f32> = txVec20;
        let x_1330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1328.xy, x_1328.z);
        u_xlat67 = x_1330;
        let x_1332 : f32 = u_xlat19.w;
        let x_1333 : f32 = u_xlat67;
        let x_1335 : f32 = u_xlat65;
        u_xlat65 = ((x_1332 * x_1333) + x_1335);
        let x_1338 : vec4<f32> = u_xlat17;
        let x_1339 : vec2<f32> = vec2<f32>(x_1338.x, x_1338.y);
        let x_1341 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1339.x, x_1339.y, x_1341);
        let x_1348 : vec3<f32> = txVec21;
        let x_1350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1348.xy, x_1348.z);
        u_xlat67 = x_1350;
        let x_1352 : f32 = u_xlat20.x;
        let x_1353 : f32 = u_xlat67;
        let x_1355 : f32 = u_xlat65;
        u_xlat65 = ((x_1352 * x_1353) + x_1355);
        let x_1358 : vec4<f32> = u_xlat17;
        let x_1359 : vec2<f32> = vec2<f32>(x_1358.z, x_1358.w);
        let x_1361 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1359.x, x_1359.y, x_1361);
        let x_1368 : vec3<f32> = txVec22;
        let x_1370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1368.xy, x_1368.z);
        u_xlat67 = x_1370;
        let x_1372 : f32 = u_xlat20.y;
        let x_1373 : f32 = u_xlat67;
        let x_1375 : f32 = u_xlat65;
        u_xlat65 = ((x_1372 * x_1373) + x_1375);
        let x_1378 : vec3<f32> = u_xlat30;
        let x_1379 : vec2<f32> = vec2<f32>(x_1378.x, x_1378.y);
        let x_1381 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1379.x, x_1379.y, x_1381);
        let x_1388 : vec3<f32> = txVec23;
        let x_1390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1388.xy, x_1388.z);
        u_xlat67 = x_1390;
        let x_1392 : f32 = u_xlat20.z;
        let x_1393 : f32 = u_xlat67;
        let x_1395 : f32 = u_xlat65;
        u_xlat65 = ((x_1392 * x_1393) + x_1395);
        let x_1398 : vec2<f32> = u_xlat57;
        let x_1400 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1398.x, x_1398.y, x_1400);
        let x_1407 : vec3<f32> = txVec24;
        let x_1409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1407.xy, x_1407.z);
        u_xlat67 = x_1409;
        let x_1411 : f32 = u_xlat20.w;
        let x_1412 : f32 = u_xlat67;
        let x_1414 : f32 = u_xlat65;
        u_xlat65 = ((x_1411 * x_1412) + x_1414);
        let x_1417 : vec4<f32> = u_xlat12;
        let x_1418 : vec2<f32> = vec2<f32>(x_1417.x, x_1417.y);
        let x_1420 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1418.x, x_1418.y, x_1420);
        let x_1427 : vec3<f32> = txVec25;
        let x_1429 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1427.xy, x_1427.z);
        u_xlat67 = x_1429;
        let x_1431 : f32 = u_xlat8.x;
        let x_1432 : f32 = u_xlat67;
        let x_1434 : f32 = u_xlat65;
        u_xlat65 = ((x_1431 * x_1432) + x_1434);
        let x_1437 : vec4<f32> = u_xlat12;
        let x_1438 : vec2<f32> = vec2<f32>(x_1437.z, x_1437.w);
        let x_1440 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1438.x, x_1438.y, x_1440);
        let x_1447 : vec3<f32> = txVec26;
        let x_1449 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1447.xy, x_1447.z);
        u_xlat67 = x_1449;
        let x_1451 : f32 = u_xlat8.y;
        let x_1452 : f32 = u_xlat67;
        let x_1454 : f32 = u_xlat65;
        u_xlat65 = ((x_1451 * x_1452) + x_1454);
        let x_1457 : vec2<f32> = u_xlat52;
        let x_1459 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1457.x, x_1457.y, x_1459);
        let x_1466 : vec3<f32> = txVec27;
        let x_1468 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1466.xy, x_1466.z);
        u_xlat67 = x_1468;
        let x_1470 : f32 = u_xlat8.z;
        let x_1471 : f32 = u_xlat67;
        let x_1473 : f32 = u_xlat65;
        u_xlat65 = ((x_1470 * x_1471) + x_1473);
        let x_1476 : vec4<f32> = u_xlat7;
        let x_1477 : vec2<f32> = vec2<f32>(x_1476.x, x_1476.y);
        let x_1479 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec28;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat67 = x_1488;
        let x_1490 : f32 = u_xlat8.w;
        let x_1491 : f32 = u_xlat67;
        let x_1493 : f32 = u_xlat65;
        u_xlat64 = ((x_1490 * x_1491) + x_1493);
      }
    }
  } else {
    let x_1497 : vec4<f32> = u_xlat6;
    let x_1498 : vec2<f32> = vec2<f32>(x_1497.x, x_1497.y);
    let x_1500 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1498.x, x_1498.y, x_1500);
    let x_1507 : vec3<f32> = txVec29;
    let x_1509 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1507.xy, x_1507.z);
    u_xlat64 = x_1509;
  }
  let x_1511 : f32 = x_256.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1511) + 1.0f);
  let x_1514 : f32 = u_xlat64;
  let x_1516 : f32 = x_256.x_MainLightShadowParams.x;
  let x_1518 : f32 = u_xlat65;
  u_xlat64 = ((x_1514 * x_1516) + x_1518);
  let x_1522 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1522);
  let x_1526 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1526 >= 1.0f);
  let x_1528 : bool = u_xlatb67;
  let x_1529 : bool = u_xlatb6;
  u_xlatb67 = (x_1528 | x_1529);
  let x_1531 : bool = u_xlatb67;
  let x_1532 : f32 = u_xlat64;
  u_xlat64 = select(x_1532, 1.0f, x_1531);
  let x_1534 : vec3<f32> = u_xlat0;
  let x_1536 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1534, -(vec3<f32>(x_1536.x, x_1536.y, x_1536.z)));
  let x_1542 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1542, 0.0f, 1.0f);
  let x_1545 : f32 = u_xlat64;
  let x_1549 : vec4<f32> = x_90.x_MainLightColor;
  let x_1551 : vec3<f32> = (vec3<f32>(x_1545, x_1545, x_1545) * vec3<f32>(x_1549.x, x_1549.y, x_1549.z));
  let x_1552 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1551.x, x_1551.y, x_1551.z, x_1552.w);
  let x_1554 : vec3<f32> = u_xlat0;
  let x_1556 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1554.x, x_1554.x, x_1554.x) * vec3<f32>(x_1556.x, x_1556.y, x_1556.z));
  let x_1559 : vec3<f32> = u_xlat0;
  let x_1560 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1559 * vec3<f32>(x_1560.x, x_1560.y, x_1560.z));
  let x_1564 : f32 = x_145.unity_LODFade.x;
  u_xlatb64 = (x_1564 < 0.0f);
  let x_1567 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1567 + 1.0f);
  let x_1570 : bool = u_xlatb64;
  if (x_1570) {
    let x_1575 : f32 = u_xlat3.x;
    x_1571 = x_1575;
  } else {
    let x_1578 : f32 = x_145.unity_LODFade.x;
    x_1571 = x_1578;
  }
  let x_1579 : f32 = x_1571;
  u_xlat64 = x_1579;
  let x_1581 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1581);
  let x_1583 : vec3<f32> = u_xlat2;
  let x_1587 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1583) * vec3<f32>(x_1587.x, x_1587.y, x_1587.x));
  let x_1593 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1593);
  let x_1597 : u32 = u_xlatu2.z;
  u_xlatu44 = (x_1597 * 1025u);
  let x_1601 : u32 = u_xlatu44;
  u_xlatu24 = (x_1601 >> 6u);
  let x_1605 : u32 = u_xlatu44;
  let x_1606 : u32 = u_xlatu24;
  u_xlati44 = bitcast<i32>((x_1605 ^ x_1606));
  let x_1609 : i32 = u_xlati44;
  u_xlatu44 = (bitcast<u32>(x_1609) * 9u);
  let x_1613 : u32 = u_xlatu44;
  u_xlatu24 = (x_1613 >> 11u);
  let x_1616 : u32 = u_xlatu44;
  let x_1617 : u32 = u_xlatu24;
  u_xlati44 = bitcast<i32>((x_1616 ^ x_1617));
  let x_1620 : i32 = u_xlati44;
  u_xlati44 = (x_1620 * 32769i);
  let x_1624 : i32 = u_xlati44;
  let x_1627 : u32 = u_xlatu2.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1624) ^ x_1627));
  let x_1631 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1631) * 1025u);
  let x_1634 : u32 = u_xlatu23;
  u_xlatu44 = (x_1634 >> 6u);
  let x_1636 : u32 = u_xlatu44;
  let x_1637 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1636 ^ x_1637));
  let x_1640 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1640) * 9u);
  let x_1643 : u32 = u_xlatu23;
  u_xlatu44 = (x_1643 >> 11u);
  let x_1645 : u32 = u_xlatu44;
  let x_1646 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1645 ^ x_1646));
  let x_1649 : i32 = u_xlati23;
  u_xlati23 = (x_1649 * 32769i);
  let x_1652 : i32 = u_xlati23;
  let x_1655 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1652) ^ x_1655));
  let x_1658 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1658) * 1025u);
  let x_1663 : u32 = u_xlatu2.x;
  u_xlatu23 = (x_1663 >> 6u);
  let x_1665 : u32 = u_xlatu23;
  let x_1667 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1665 ^ x_1667));
  let x_1670 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1670) * 9u);
  let x_1675 : u32 = u_xlatu2.x;
  u_xlatu23 = (x_1675 >> 11u);
  let x_1677 : u32 = u_xlatu23;
  let x_1679 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1677 ^ x_1679));
  let x_1682 : i32 = u_xlati2;
  u_xlati2 = (x_1682 * 32769i);
  param = 1065353216i;
  let x_1688 : i32 = u_xlati2;
  param_1 = x_1688;
  param_2 = 0i;
  param_3 = 23i;
  let x_1691 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1691);
  let x_1695 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1695 + -1.0f);
  let x_1700 : f32 = u_xlat2.x;
  u_xlat23.x = (-(x_1700) + 1.0f);
  let x_1704 : bool = u_xlatb3;
  if (x_1704) {
    let x_1709 : f32 = u_xlat2.x;
    x_1705 = x_1709;
  } else {
    let x_1712 : f32 = u_xlat23.x;
    x_1705 = x_1712;
  }
  let x_1713 : f32 = x_1705;
  u_xlat2.x = x_1713;
  let x_1715 : f32 = u_xlat64;
  let x_1718 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1715 * 2.0f) + -(x_1718));
  let x_1721 : f32 = u_xlat64;
  let x_1723 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1721 * x_1723);
  let x_1730 : f32 = u_xlat2.x;
  u_xlatb23.x = (x_1730 >= 0.400000006f);
  let x_1735 : bool = u_xlatb23.x;
  if (x_1735) {
    let x_1740 : f32 = u_xlat2.x;
    x_1736 = x_1740;
  } else {
    x_1736 = 0.0f;
  }
  let x_1742 : f32 = x_1736;
  u_xlat23.x = x_1742;
  let x_1745 : f32 = u_xlat3.w;
  let x_1746 : f32 = u_xlat64;
  u_xlat64 = ((x_1745 * x_1746) + -0.400000006f);
  let x_1752 : f32 = u_xlat2.x;
  u_xlat44 = dpdxCoarse(x_1752);
  let x_1755 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1755);
  let x_1759 : f32 = u_xlat2.x;
  let x_1761 : f32 = u_xlat44;
  u_xlat2.x = (abs(x_1759) + abs(x_1761));
  let x_1766 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1766, 0.0001f);
  let x_1770 : f32 = u_xlat64;
  let x_1772 : f32 = u_xlat2.x;
  u_xlat64 = (x_1770 / x_1772);
  let x_1774 : f32 = u_xlat64;
  u_xlat64 = (x_1774 + 0.5f);
  let x_1776 : f32 = u_xlat64;
  u_xlat64 = clamp(x_1776, 0.0f, 1.0f);
  let x_1780 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1780 == 0.0f));
  let x_1782 : bool = u_xlatb2;
  if (x_1782) {
    let x_1786 : f32 = u_xlat64;
    x_1783 = x_1786;
  } else {
    let x_1789 : f32 = u_xlat23.x;
    x_1783 = x_1789;
  }
  let x_1790 : f32 = x_1783;
  u_xlat64 = x_1790;
  let x_1791 : f32 = u_xlat64;
  u_xlat23.x = (x_1791 + -0.0001f);
  let x_1796 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1796 < 0.0f);
  let x_1800 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1800) * -1i) != 0i)) {
    discard;
  }
  let x_1810 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1810);
  let x_1814 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb23.y = (x_1814 >= 0.0f);
  let x_1818 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1818);
  let x_1822 : bool = u_xlatb23.y;
  u_xlat23.y = select(-1.0f, 1.0f, x_1822);
  let x_1826 : f32 = u_xlat23.y;
  let x_1828 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1826 * x_1828);
  let x_1831 : vec3<f32> = vs_INTERP1;
  let x_1833 : vec4<f32> = vs_INTERP2;
  let x_1835 : vec3<f32> = (vec3<f32>(x_1831.z, x_1831.x, x_1831.y) * vec3<f32>(x_1833.y, x_1833.z, x_1833.x));
  let x_1836 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1835.x, x_1835.y, x_1835.z, x_1836.w);
  let x_1838 : vec3<f32> = vs_INTERP1;
  let x_1840 : vec4<f32> = vs_INTERP2;
  let x_1843 : vec4<f32> = u_xlat3;
  let x_1846 : vec3<f32> = ((vec3<f32>(x_1838.y, x_1838.z, x_1838.x) * vec3<f32>(x_1840.z, x_1840.x, x_1840.y)) + -(vec3<f32>(x_1843.x, x_1843.y, x_1843.z)));
  let x_1847 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1846.x, x_1846.y, x_1846.z, x_1847.w);
  let x_1849 : vec2<f32> = u_xlat23;
  let x_1851 : vec4<f32> = u_xlat3;
  let x_1853 : vec3<f32> = (vec3<f32>(x_1849.x, x_1849.x, x_1849.x) * vec3<f32>(x_1851.x, x_1851.y, x_1851.z));
  let x_1854 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1853.x, x_1853.y, x_1853.z, x_1854.w);
  let x_1856 : vec4<f32> = u_xlat3;
  let x_1858 : vec3<f32> = u_xlat26;
  let x_1860 : vec3<f32> = (vec3<f32>(x_1856.x, x_1856.y, x_1856.z) * vec3<f32>(x_1858.y, x_1858.y, x_1858.y));
  let x_1861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1860.x, x_1860.y, x_1860.z, x_1861.w);
  let x_1863 : vec3<f32> = u_xlat26;
  let x_1865 : vec4<f32> = vs_INTERP2;
  let x_1868 : vec4<f32> = u_xlat3;
  let x_1870 : vec3<f32> = ((vec3<f32>(x_1863.x, x_1863.x, x_1863.x) * vec3<f32>(x_1865.x, x_1865.y, x_1865.z)) + vec3<f32>(x_1868.x, x_1868.y, x_1868.z));
  let x_1871 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1870.x, x_1870.y, x_1870.z, x_1871.w);
  let x_1873 : vec3<f32> = u_xlat26;
  let x_1875 : vec3<f32> = vs_INTERP1;
  let x_1877 : vec4<f32> = u_xlat3;
  let x_1879 : vec3<f32> = ((vec3<f32>(x_1873.z, x_1873.z, x_1873.z) * x_1875) + vec3<f32>(x_1877.x, x_1877.y, x_1877.z));
  let x_1880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1879.x, x_1879.y, x_1879.z, x_1880.w);
  let x_1882 : vec4<f32> = u_xlat3;
  let x_1884 : vec4<f32> = u_xlat3;
  u_xlat23.x = dot(vec3<f32>(x_1882.x, x_1882.y, x_1882.z), vec3<f32>(x_1884.x, x_1884.y, x_1884.z));
  let x_1889 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1889);
  let x_1892 : vec2<f32> = u_xlat23;
  let x_1894 : vec4<f32> = u_xlat3;
  let x_1896 : vec3<f32> = (vec3<f32>(x_1892.x, x_1892.x, x_1892.x) * vec3<f32>(x_1894.x, x_1894.y, x_1894.z));
  let x_1897 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1896.x, x_1896.y, x_1896.z, x_1897.w);
  let x_1900 : f32 = vs_INTERP0.y;
  let x_1902 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1900 * x_1902);
  let x_1906 : f32 = x_90.unity_MatrixV[0i].z;
  let x_1908 : f32 = vs_INTERP0.x;
  let x_1911 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1906 * x_1908) + x_1911);
  let x_1915 : f32 = x_90.unity_MatrixV[2i].z;
  let x_1917 : f32 = vs_INTERP0.z;
  let x_1920 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1915 * x_1917) + x_1920);
  let x_1924 : f32 = u_xlat23.x;
  let x_1926 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1924 + x_1926);
  let x_1930 : f32 = u_xlat23.x;
  let x_1934 : f32 = x_90.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1930) + -(x_1934));
  let x_1939 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1939, 0.0f);
  let x_1943 : f32 = u_xlat23.x;
  let x_1946 : f32 = x_90.unity_FogParams.x;
  u_xlat23.x = (x_1943 * x_1946);
  let x_1956 : vec2<f32> = vs_INTERP5;
  let x_1958 : f32 = x_90.x_GlobalMipBias.x;
  let x_1959 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1956, x_1958);
  u_xlat6 = x_1959;
  let x_1964 : vec2<f32> = vs_INTERP5;
  let x_1966 : f32 = x_90.x_GlobalMipBias.x;
  let x_1967 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1964, x_1966);
  u_xlat26 = vec3<f32>(x_1967.x, x_1967.y, x_1967.z);
  let x_1969 : vec4<f32> = u_xlat6;
  let x_1972 : vec3<f32> = (vec3<f32>(x_1969.x, x_1969.y, x_1969.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1973 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1972.x, x_1972.y, x_1972.z, x_1973.w);
  let x_1975 : vec4<f32> = u_xlat3;
  let x_1977 : vec4<f32> = u_xlat6;
  u_xlat44 = dot(vec3<f32>(x_1975.x, x_1975.y, x_1975.z), vec3<f32>(x_1977.x, x_1977.y, x_1977.z));
  let x_1980 : f32 = u_xlat44;
  u_xlat44 = (x_1980 + 0.5f);
  let x_1982 : f32 = u_xlat44;
  let x_1984 : vec3<f32> = u_xlat26;
  u_xlat26 = (vec3<f32>(x_1982, x_1982, x_1982) * x_1984);
  let x_1987 : f32 = u_xlat6.w;
  u_xlat44 = max(x_1987, 0.0001f);
  let x_1989 : vec3<f32> = u_xlat26;
  let x_1990 : f32 = u_xlat44;
  u_xlat26 = (x_1989 / vec3<f32>(x_1990, x_1990, x_1990));
  let x_1994 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1995 : vec2<f32> = vec2<f32>(x_1994.x, x_1994.y);
  let x_1999 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1995.x, x_1995.y));
  let x_2000 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1999.x, x_1999.y, x_2000.z, x_2000.w);
  let x_2002 : vec4<f32> = u_xlat6;
  let x_2004 : vec4<f32> = hlslcc_FragCoord;
  let x_2006 : vec2<f32> = (vec2<f32>(x_2002.x, x_2002.y) * vec2<f32>(x_2004.x, x_2004.y));
  let x_2007 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2006.x, x_2006.y, x_2007.z, x_2007.w);
  let x_2010 : f32 = u_xlat6.y;
  let x_2013 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2016 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat44 = ((x_2010 * x_2013) + x_2016);
  let x_2018 : f32 = u_xlat44;
  u_xlat6.z = (-(x_2018) + 1.0f);
  let x_2023 : f32 = u_xlat5.x;
  u_xlat5.x = x_2023;
  let x_2026 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2026, 0.0f, 1.0f);
  let x_2029 : f32 = u_xlat64;
  u_xlat64 = x_2029;
  let x_2030 : f32 = u_xlat64;
  u_xlat64 = clamp(x_2030, 0.0f, 1.0f);
  let x_2032 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2032 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2037 : f32 = u_xlat5.x;
  u_xlat44 = (-(x_2037) + 1.0f);
  let x_2041 : f32 = u_xlat44;
  let x_2042 : f32 = u_xlat44;
  u_xlat66 = (x_2041 * x_2042);
  let x_2044 : f32 = u_xlat66;
  u_xlat66 = max(x_2044, 0.0078125f);
  let x_2047 : f32 = u_xlat66;
  let x_2048 : f32 = u_xlat66;
  u_xlat67 = (x_2047 * x_2048);
  let x_2051 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2051 + 0.040000021f);
  let x_2056 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2056, 1.0f);
  let x_2060 : f32 = u_xlat66;
  u_xlat27 = ((x_2060 * 4.0f) + 2.0f);
  let x_2069 : vec4<f32> = u_xlat6;
  let x_2072 : f32 = x_90.x_GlobalMipBias.x;
  let x_2073 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2069.x, x_2069.z), x_2072);
  u_xlat6.x = x_2073.x;
  let x_2078 : f32 = u_xlat6.x;
  u_xlat48 = (x_2078 + -1.0f);
  let x_2082 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2083 : f32 = u_xlat48;
  u_xlat48 = ((x_2082 * x_2083) + 1.0f);
  let x_2087 : f32 = u_xlat6.x;
  let x_2089 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2087, x_2089);
  let x_2092 : bool = u_xlatb63;
  if (x_2092) {
    let x_2096 : f32 = x_256.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2096 == 1.0f);
    let x_2098 : bool = u_xlatb63;
    if (x_2098) {
      let x_2102 : vec4<f32> = vs_INTERP9;
      let x_2105 : vec4<f32> = x_256.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2102.x, x_2102.y, x_2102.x, x_2102.y) + x_2105);
      let x_2108 : vec4<f32> = u_xlat7;
      let x_2109 : vec2<f32> = vec2<f32>(x_2108.x, x_2108.y);
      let x_2111 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2109.x, x_2109.y, x_2111);
      let x_2118 : vec3<f32> = txVec30;
      let x_2120 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2118.xy, x_2118.z);
      u_xlat8.x = x_2120;
      let x_2123 : vec4<f32> = u_xlat7;
      let x_2124 : vec2<f32> = vec2<f32>(x_2123.z, x_2123.w);
      let x_2126 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2124.x, x_2124.y, x_2126);
      let x_2133 : vec3<f32> = txVec31;
      let x_2135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2133.xy, x_2133.z);
      u_xlat8.y = x_2135;
      let x_2137 : vec4<f32> = vs_INTERP9;
      let x_2140 : vec4<f32> = x_256.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2137.x, x_2137.y, x_2137.x, x_2137.y) + x_2140);
      let x_2143 : vec4<f32> = u_xlat7;
      let x_2144 : vec2<f32> = vec2<f32>(x_2143.x, x_2143.y);
      let x_2146 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2144.x, x_2144.y, x_2146);
      let x_2153 : vec3<f32> = txVec32;
      let x_2155 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2153.xy, x_2153.z);
      u_xlat8.z = x_2155;
      let x_2158 : vec4<f32> = u_xlat7;
      let x_2159 : vec2<f32> = vec2<f32>(x_2158.z, x_2158.w);
      let x_2161 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2159.x, x_2159.y, x_2161);
      let x_2168 : vec3<f32> = txVec33;
      let x_2170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2168.xy, x_2168.z);
      u_xlat8.w = x_2170;
      let x_2172 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2172, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2177 : f32 = x_256.x_MainLightShadowParams.y;
      u_xlatb69 = (x_2177 == 2.0f);
      let x_2179 : bool = u_xlatb69;
      if (x_2179) {
        let x_2182 : vec4<f32> = vs_INTERP9;
        let x_2185 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2188 : vec2<f32> = ((vec2<f32>(x_2182.x, x_2182.y) * vec2<f32>(x_2185.z, x_2185.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2189 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2188.x, x_2188.y, x_2189.z, x_2189.w);
        let x_2191 : vec4<f32> = u_xlat7;
        let x_2193 : vec2<f32> = floor(vec2<f32>(x_2191.x, x_2191.y));
        let x_2194 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2193.x, x_2193.y, x_2194.z, x_2194.w);
        let x_2196 : vec4<f32> = vs_INTERP9;
        let x_2199 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2202 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2196.x, x_2196.y) * vec2<f32>(x_2199.z, x_2199.w)) + -(vec2<f32>(x_2202.x, x_2202.y)));
        let x_2206 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2206.x, x_2206.x, x_2206.y, x_2206.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2209 : vec4<f32> = u_xlat8;
        let x_2211 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2209.x, x_2209.x, x_2209.z, x_2209.z) * vec4<f32>(x_2211.x, x_2211.x, x_2211.z, x_2211.z));
        let x_2214 : vec4<f32> = u_xlat9;
        let x_2216 : vec2<f32> = (vec2<f32>(x_2214.y, x_2214.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2217 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2216.x, x_2217.y, x_2216.y, x_2217.w);
        let x_2219 : vec4<f32> = u_xlat9;
        let x_2222 : vec2<f32> = u_xlat49;
        let x_2224 : vec2<f32> = ((vec2<f32>(x_2219.x, x_2219.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2222));
        let x_2225 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2224.x, x_2224.y, x_2225.z, x_2225.w);
        let x_2227 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2227) + vec2<f32>(1.0f, 1.0f));
        let x_2230 : vec2<f32> = u_xlat49;
        let x_2231 : vec2<f32> = min(x_2230, vec2<f32>(0.0f, 0.0f));
        let x_2232 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2231.x, x_2231.y, x_2232.z, x_2232.w);
        let x_2234 : vec4<f32> = u_xlat10;
        let x_2237 : vec4<f32> = u_xlat10;
        let x_2240 : vec2<f32> = u_xlat51;
        let x_2241 : vec2<f32> = ((-(vec2<f32>(x_2234.x, x_2234.y)) * vec2<f32>(x_2237.x, x_2237.y)) + x_2240);
        let x_2242 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2241.x, x_2241.y, x_2242.z, x_2242.w);
        let x_2244 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2244, vec2<f32>(0.0f, 0.0f));
        let x_2246 : vec2<f32> = u_xlat49;
        let x_2248 : vec2<f32> = u_xlat49;
        let x_2250 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2246) * x_2248) + vec2<f32>(x_2250.y, x_2250.w));
        let x_2253 : vec4<f32> = u_xlat10;
        let x_2255 : vec2<f32> = (vec2<f32>(x_2253.x, x_2253.y) + vec2<f32>(1.0f, 1.0f));
        let x_2256 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2255.x, x_2255.y, x_2256.z, x_2256.w);
        let x_2258 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2258 + vec2<f32>(1.0f, 1.0f));
        let x_2260 : vec4<f32> = u_xlat9;
        let x_2262 : vec2<f32> = (vec2<f32>(x_2260.x, x_2260.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2263 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2262.x, x_2262.y, x_2263.z, x_2263.w);
        let x_2265 : vec2<f32> = u_xlat51;
        let x_2266 : vec2<f32> = (x_2265 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2267 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2266.x, x_2266.y, x_2267.z, x_2267.w);
        let x_2269 : vec4<f32> = u_xlat10;
        let x_2271 : vec2<f32> = (vec2<f32>(x_2269.x, x_2269.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2272 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2271.x, x_2271.y, x_2272.z, x_2272.w);
        let x_2274 : vec2<f32> = u_xlat49;
        let x_2275 : vec2<f32> = (x_2274 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2276 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2275.x, x_2275.y, x_2276.z, x_2276.w);
        let x_2278 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2278.y, x_2278.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2282 : f32 = u_xlat10.x;
        u_xlat11.z = x_2282;
        let x_2285 : f32 = u_xlat49.x;
        u_xlat11.w = x_2285;
        let x_2288 : f32 = u_xlat12.x;
        u_xlat9.z = x_2288;
        let x_2291 : f32 = u_xlat8.x;
        u_xlat9.w = x_2291;
        let x_2293 : vec4<f32> = u_xlat9;
        let x_2295 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2293.z, x_2293.w, x_2293.x, x_2293.z) + vec4<f32>(x_2295.z, x_2295.w, x_2295.x, x_2295.z));
        let x_2299 : f32 = u_xlat11.y;
        u_xlat10.z = x_2299;
        let x_2302 : f32 = u_xlat49.y;
        u_xlat10.w = x_2302;
        let x_2305 : f32 = u_xlat9.y;
        u_xlat12.z = x_2305;
        let x_2308 : f32 = u_xlat8.z;
        u_xlat12.w = x_2308;
        let x_2310 : vec4<f32> = u_xlat10;
        let x_2312 : vec4<f32> = u_xlat12;
        let x_2314 : vec3<f32> = (vec3<f32>(x_2310.z, x_2310.y, x_2310.w) + vec3<f32>(x_2312.z, x_2312.y, x_2312.w));
        let x_2315 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2314.x, x_2314.y, x_2314.z, x_2315.w);
        let x_2317 : vec4<f32> = u_xlat9;
        let x_2319 : vec4<f32> = u_xlat13;
        let x_2321 : vec3<f32> = (vec3<f32>(x_2317.x, x_2317.z, x_2317.w) / vec3<f32>(x_2319.z, x_2319.w, x_2319.y));
        let x_2322 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2321.x, x_2321.y, x_2321.z, x_2322.w);
        let x_2324 : vec4<f32> = u_xlat9;
        let x_2326 : vec3<f32> = (vec3<f32>(x_2324.x, x_2324.y, x_2324.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2327 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2326.x, x_2326.y, x_2326.z, x_2327.w);
        let x_2329 : vec4<f32> = u_xlat12;
        let x_2331 : vec4<f32> = u_xlat8;
        let x_2333 : vec3<f32> = (vec3<f32>(x_2329.z, x_2329.y, x_2329.w) / vec3<f32>(x_2331.x, x_2331.y, x_2331.z));
        let x_2334 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2333.x, x_2333.y, x_2333.z, x_2334.w);
        let x_2336 : vec4<f32> = u_xlat10;
        let x_2338 : vec3<f32> = (vec3<f32>(x_2336.x, x_2336.y, x_2336.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2339 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2338.x, x_2338.y, x_2338.z, x_2339.w);
        let x_2341 : vec4<f32> = u_xlat9;
        let x_2344 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2346 : vec3<f32> = (vec3<f32>(x_2341.y, x_2341.x, x_2341.z) * vec3<f32>(x_2344.x, x_2344.x, x_2344.x));
        let x_2347 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2346.x, x_2346.y, x_2346.z, x_2347.w);
        let x_2349 : vec4<f32> = u_xlat10;
        let x_2352 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2354 : vec3<f32> = (vec3<f32>(x_2349.x, x_2349.y, x_2349.z) * vec3<f32>(x_2352.y, x_2352.y, x_2352.y));
        let x_2355 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2354.x, x_2354.y, x_2354.z, x_2355.w);
        let x_2358 : f32 = u_xlat10.x;
        u_xlat9.w = x_2358;
        let x_2360 : vec4<f32> = u_xlat7;
        let x_2363 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2366 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2360.x, x_2360.y, x_2360.x, x_2360.y) * vec4<f32>(x_2363.x, x_2363.y, x_2363.x, x_2363.y)) + vec4<f32>(x_2366.y, x_2366.w, x_2366.x, x_2366.w));
        let x_2369 : vec4<f32> = u_xlat7;
        let x_2372 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2375 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2369.x, x_2369.y) * vec2<f32>(x_2372.x, x_2372.y)) + vec2<f32>(x_2375.z, x_2375.w));
        let x_2379 : f32 = u_xlat9.y;
        u_xlat10.w = x_2379;
        let x_2381 : vec4<f32> = u_xlat10;
        let x_2382 : vec2<f32> = vec2<f32>(x_2381.y, x_2381.z);
        let x_2383 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2383.x, x_2382.x, x_2383.z, x_2382.y);
        let x_2385 : vec4<f32> = u_xlat7;
        let x_2388 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2391 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2385.x, x_2385.y, x_2385.x, x_2385.y) * vec4<f32>(x_2388.x, x_2388.y, x_2388.x, x_2388.y)) + vec4<f32>(x_2391.x, x_2391.y, x_2391.z, x_2391.y));
        let x_2394 : vec4<f32> = u_xlat7;
        let x_2397 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2400 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2394.x, x_2394.y, x_2394.x, x_2394.y) * vec4<f32>(x_2397.x, x_2397.y, x_2397.x, x_2397.y)) + vec4<f32>(x_2400.w, x_2400.y, x_2400.w, x_2400.z));
        let x_2403 : vec4<f32> = u_xlat7;
        let x_2406 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2409 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2403.x, x_2403.y, x_2403.x, x_2403.y) * vec4<f32>(x_2406.x, x_2406.y, x_2406.x, x_2406.y)) + vec4<f32>(x_2409.x, x_2409.w, x_2409.z, x_2409.w));
        let x_2412 : vec4<f32> = u_xlat8;
        let x_2414 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2412.x, x_2412.x, x_2412.x, x_2412.y) * vec4<f32>(x_2414.z, x_2414.w, x_2414.y, x_2414.z));
        let x_2417 : vec4<f32> = u_xlat8;
        let x_2419 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2417.y, x_2417.y, x_2417.z, x_2417.z) * x_2419);
        let x_2422 : f32 = u_xlat8.z;
        let x_2424 : f32 = u_xlat13.y;
        u_xlat69 = (x_2422 * x_2424);
        let x_2427 : vec4<f32> = u_xlat11;
        let x_2428 : vec2<f32> = vec2<f32>(x_2427.x, x_2427.y);
        let x_2430 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2428.x, x_2428.y, x_2430);
        let x_2437 : vec3<f32> = txVec34;
        let x_2439 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2437.xy, x_2437.z);
        u_xlat7.x = x_2439;
        let x_2442 : vec4<f32> = u_xlat11;
        let x_2443 : vec2<f32> = vec2<f32>(x_2442.z, x_2442.w);
        let x_2445 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2443.x, x_2443.y, x_2445);
        let x_2453 : vec3<f32> = txVec35;
        let x_2455 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2453.xy, x_2453.z);
        u_xlat28 = x_2455;
        let x_2456 : f32 = u_xlat28;
        let x_2458 : f32 = u_xlat14.y;
        u_xlat28 = (x_2456 * x_2458);
        let x_2461 : f32 = u_xlat14.x;
        let x_2463 : f32 = u_xlat7.x;
        let x_2465 : f32 = u_xlat28;
        u_xlat7.x = ((x_2461 * x_2463) + x_2465);
        let x_2469 : vec2<f32> = u_xlat49;
        let x_2471 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2469.x, x_2469.y, x_2471);
        let x_2478 : vec3<f32> = txVec36;
        let x_2480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2478.xy, x_2478.z);
        u_xlat28 = x_2480;
        let x_2482 : f32 = u_xlat14.z;
        let x_2483 : f32 = u_xlat28;
        let x_2486 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2482 * x_2483) + x_2486);
        let x_2490 : vec4<f32> = u_xlat10;
        let x_2491 : vec2<f32> = vec2<f32>(x_2490.x, x_2490.y);
        let x_2493 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2491.x, x_2491.y, x_2493);
        let x_2500 : vec3<f32> = txVec37;
        let x_2502 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2500.xy, x_2500.z);
        u_xlat28 = x_2502;
        let x_2504 : f32 = u_xlat14.w;
        let x_2505 : f32 = u_xlat28;
        let x_2508 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2504 * x_2505) + x_2508);
        let x_2512 : vec4<f32> = u_xlat12;
        let x_2513 : vec2<f32> = vec2<f32>(x_2512.x, x_2512.y);
        let x_2515 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2513.x, x_2513.y, x_2515);
        let x_2522 : vec3<f32> = txVec38;
        let x_2524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2522.xy, x_2522.z);
        u_xlat28 = x_2524;
        let x_2526 : f32 = u_xlat15.x;
        let x_2527 : f32 = u_xlat28;
        let x_2530 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2526 * x_2527) + x_2530);
        let x_2534 : vec4<f32> = u_xlat12;
        let x_2535 : vec2<f32> = vec2<f32>(x_2534.z, x_2534.w);
        let x_2537 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2535.x, x_2535.y, x_2537);
        let x_2544 : vec3<f32> = txVec39;
        let x_2546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2544.xy, x_2544.z);
        u_xlat28 = x_2546;
        let x_2548 : f32 = u_xlat15.y;
        let x_2549 : f32 = u_xlat28;
        let x_2552 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2548 * x_2549) + x_2552);
        let x_2556 : vec4<f32> = u_xlat10;
        let x_2557 : vec2<f32> = vec2<f32>(x_2556.z, x_2556.w);
        let x_2559 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2557.x, x_2557.y, x_2559);
        let x_2566 : vec3<f32> = txVec40;
        let x_2568 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2566.xy, x_2566.z);
        u_xlat28 = x_2568;
        let x_2570 : f32 = u_xlat15.z;
        let x_2571 : f32 = u_xlat28;
        let x_2574 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2570 * x_2571) + x_2574);
        let x_2578 : vec4<f32> = u_xlat9;
        let x_2579 : vec2<f32> = vec2<f32>(x_2578.x, x_2578.y);
        let x_2581 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2579.x, x_2579.y, x_2581);
        let x_2588 : vec3<f32> = txVec41;
        let x_2590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2588.xy, x_2588.z);
        u_xlat28 = x_2590;
        let x_2592 : f32 = u_xlat15.w;
        let x_2593 : f32 = u_xlat28;
        let x_2596 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2592 * x_2593) + x_2596);
        let x_2600 : vec4<f32> = u_xlat9;
        let x_2601 : vec2<f32> = vec2<f32>(x_2600.z, x_2600.w);
        let x_2603 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2601.x, x_2601.y, x_2603);
        let x_2610 : vec3<f32> = txVec42;
        let x_2612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2610.xy, x_2610.z);
        u_xlat28 = x_2612;
        let x_2613 : f32 = u_xlat69;
        let x_2614 : f32 = u_xlat28;
        let x_2617 : f32 = u_xlat7.x;
        u_xlat63 = ((x_2613 * x_2614) + x_2617);
      } else {
        let x_2620 : vec4<f32> = vs_INTERP9;
        let x_2623 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2626 : vec2<f32> = ((vec2<f32>(x_2620.x, x_2620.y) * vec2<f32>(x_2623.z, x_2623.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2627 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2626.x, x_2626.y, x_2627.z, x_2627.w);
        let x_2629 : vec4<f32> = u_xlat7;
        let x_2631 : vec2<f32> = floor(vec2<f32>(x_2629.x, x_2629.y));
        let x_2632 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2631.x, x_2631.y, x_2632.z, x_2632.w);
        let x_2634 : vec4<f32> = vs_INTERP9;
        let x_2637 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2640 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2634.x, x_2634.y) * vec2<f32>(x_2637.z, x_2637.w)) + -(vec2<f32>(x_2640.x, x_2640.y)));
        let x_2644 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2644.x, x_2644.x, x_2644.y, x_2644.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2647 : vec4<f32> = u_xlat8;
        let x_2649 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2647.x, x_2647.x, x_2647.z, x_2647.z) * vec4<f32>(x_2649.x, x_2649.x, x_2649.z, x_2649.z));
        let x_2652 : vec4<f32> = u_xlat9;
        let x_2654 : vec2<f32> = (vec2<f32>(x_2652.y, x_2652.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2655 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2655.x, x_2654.x, x_2655.z, x_2654.y);
        let x_2657 : vec4<f32> = u_xlat9;
        let x_2660 : vec2<f32> = u_xlat49;
        let x_2662 : vec2<f32> = ((vec2<f32>(x_2657.x, x_2657.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2660));
        let x_2663 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2662.x, x_2663.y, x_2662.y, x_2663.w);
        let x_2665 : vec2<f32> = u_xlat49;
        let x_2667 : vec2<f32> = (-(x_2665) + vec2<f32>(1.0f, 1.0f));
        let x_2668 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2667.x, x_2667.y, x_2668.z, x_2668.w);
        let x_2670 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2670, vec2<f32>(0.0f, 0.0f));
        let x_2672 : vec2<f32> = u_xlat51;
        let x_2674 : vec2<f32> = u_xlat51;
        let x_2676 : vec4<f32> = u_xlat9;
        let x_2678 : vec2<f32> = ((-(x_2672) * x_2674) + vec2<f32>(x_2676.x, x_2676.y));
        let x_2679 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2678.x, x_2678.y, x_2679.z, x_2679.w);
        let x_2681 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2681, vec2<f32>(0.0f, 0.0f));
        let x_2683 : vec2<f32> = u_xlat51;
        let x_2685 : vec2<f32> = u_xlat51;
        let x_2687 : vec4<f32> = u_xlat8;
        let x_2689 : vec2<f32> = ((-(x_2683) * x_2685) + vec2<f32>(x_2687.y, x_2687.w));
        let x_2690 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2689.x, x_2690.y, x_2689.y);
        let x_2692 : vec4<f32> = u_xlat9;
        let x_2694 : vec2<f32> = (vec2<f32>(x_2692.x, x_2692.y) + vec2<f32>(2.0f, 2.0f));
        let x_2695 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2694.x, x_2694.y, x_2695.z, x_2695.w);
        let x_2697 : vec3<f32> = u_xlat29;
        let x_2699 : vec2<f32> = (vec2<f32>(x_2697.x, x_2697.z) + vec2<f32>(2.0f, 2.0f));
        let x_2700 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2700.x, x_2699.x, x_2700.z, x_2699.y);
        let x_2703 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2703 * 0.081632003f);
        let x_2706 : vec4<f32> = u_xlat8;
        let x_2708 : vec3<f32> = (vec3<f32>(x_2706.z, x_2706.x, x_2706.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2709 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2708.x, x_2708.y, x_2708.z, x_2709.w);
        let x_2711 : vec4<f32> = u_xlat9;
        let x_2713 : vec2<f32> = (vec2<f32>(x_2711.x, x_2711.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2714 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2713.x, x_2713.y, x_2714.z, x_2714.w);
        let x_2717 : f32 = u_xlat12.y;
        u_xlat11.x = x_2717;
        let x_2719 : vec2<f32> = u_xlat49;
        let x_2722 : vec2<f32> = ((vec2<f32>(x_2719.x, x_2719.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2723 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2723.x, x_2722.x, x_2723.z, x_2722.y);
        let x_2725 : vec2<f32> = u_xlat49;
        let x_2728 : vec2<f32> = ((vec2<f32>(x_2725.x, x_2725.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2729 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2728.x, x_2729.y, x_2728.y, x_2729.w);
        let x_2732 : f32 = u_xlat8.x;
        u_xlat9.y = x_2732;
        let x_2735 : f32 = u_xlat10.y;
        u_xlat9.w = x_2735;
        let x_2737 : vec4<f32> = u_xlat9;
        let x_2738 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2737 + x_2738);
        let x_2740 : vec2<f32> = u_xlat49;
        let x_2743 : vec2<f32> = ((vec2<f32>(x_2740.y, x_2740.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2744 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2744.x, x_2743.x, x_2744.z, x_2743.y);
        let x_2746 : vec2<f32> = u_xlat49;
        let x_2749 : vec2<f32> = ((vec2<f32>(x_2746.y, x_2746.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2750 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2749.x, x_2750.y, x_2749.y, x_2750.w);
        let x_2753 : f32 = u_xlat8.y;
        u_xlat10.y = x_2753;
        let x_2755 : vec4<f32> = u_xlat10;
        let x_2756 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2755 + x_2756);
        let x_2758 : vec4<f32> = u_xlat9;
        let x_2759 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2758 / x_2759);
        let x_2761 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2761 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2763 : vec4<f32> = u_xlat10;
        let x_2764 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2763 / x_2764);
        let x_2766 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2766 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2768 : vec4<f32> = u_xlat9;
        let x_2771 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2768.w, x_2768.x, x_2768.y, x_2768.z) * vec4<f32>(x_2771.x, x_2771.x, x_2771.x, x_2771.x));
        let x_2774 : vec4<f32> = u_xlat10;
        let x_2777 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2774.x, x_2774.w, x_2774.y, x_2774.z) * vec4<f32>(x_2777.y, x_2777.y, x_2777.y, x_2777.y));
        let x_2780 : vec4<f32> = u_xlat9;
        let x_2781 : vec3<f32> = vec3<f32>(x_2780.y, x_2780.z, x_2780.w);
        let x_2782 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2781.x, x_2782.y, x_2781.y, x_2781.z);
        let x_2785 : f32 = u_xlat10.x;
        u_xlat12.y = x_2785;
        let x_2787 : vec4<f32> = u_xlat7;
        let x_2790 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2793 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2787.x, x_2787.y, x_2787.x, x_2787.y) * vec4<f32>(x_2790.x, x_2790.y, x_2790.x, x_2790.y)) + vec4<f32>(x_2793.x, x_2793.y, x_2793.z, x_2793.y));
        let x_2796 : vec4<f32> = u_xlat7;
        let x_2799 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2802 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2796.x, x_2796.y) * vec2<f32>(x_2799.x, x_2799.y)) + vec2<f32>(x_2802.w, x_2802.y));
        let x_2806 : f32 = u_xlat12.y;
        u_xlat9.y = x_2806;
        let x_2809 : f32 = u_xlat10.z;
        u_xlat12.y = x_2809;
        let x_2811 : vec4<f32> = u_xlat7;
        let x_2814 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2817 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2811.x, x_2811.y, x_2811.x, x_2811.y) * vec4<f32>(x_2814.x, x_2814.y, x_2814.x, x_2814.y)) + vec4<f32>(x_2817.x, x_2817.y, x_2817.z, x_2817.y));
        let x_2820 : vec4<f32> = u_xlat7;
        let x_2823 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2826 : vec4<f32> = u_xlat12;
        let x_2828 : vec2<f32> = ((vec2<f32>(x_2820.x, x_2820.y) * vec2<f32>(x_2823.x, x_2823.y)) + vec2<f32>(x_2826.w, x_2826.y));
        let x_2829 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2828.x, x_2828.y, x_2829.z, x_2829.w);
        let x_2832 : f32 = u_xlat12.y;
        u_xlat9.z = x_2832;
        let x_2834 : vec4<f32> = u_xlat7;
        let x_2837 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2840 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2834.x, x_2834.y, x_2834.x, x_2834.y) * vec4<f32>(x_2837.x, x_2837.y, x_2837.x, x_2837.y)) + vec4<f32>(x_2840.x, x_2840.y, x_2840.x, x_2840.z));
        let x_2844 : f32 = u_xlat10.w;
        u_xlat12.y = x_2844;
        let x_2846 : vec4<f32> = u_xlat7;
        let x_2849 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2852 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2846.x, x_2846.y, x_2846.x, x_2846.y) * vec4<f32>(x_2849.x, x_2849.y, x_2849.x, x_2849.y)) + vec4<f32>(x_2852.x, x_2852.y, x_2852.z, x_2852.y));
        let x_2855 : vec4<f32> = u_xlat7;
        let x_2858 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2861 : vec4<f32> = u_xlat12;
        let x_2863 : vec2<f32> = ((vec2<f32>(x_2855.x, x_2855.y) * vec2<f32>(x_2858.x, x_2858.y)) + vec2<f32>(x_2861.w, x_2861.y));
        let x_2864 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2863.x, x_2863.y, x_2864.z);
        let x_2867 : f32 = u_xlat12.y;
        u_xlat9.w = x_2867;
        let x_2869 : vec4<f32> = u_xlat7;
        let x_2872 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2875 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2869.x, x_2869.y) * vec2<f32>(x_2872.x, x_2872.y)) + vec2<f32>(x_2875.x, x_2875.w));
        let x_2878 : vec4<f32> = u_xlat12;
        let x_2879 : vec3<f32> = vec3<f32>(x_2878.x, x_2878.z, x_2878.w);
        let x_2880 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2879.x, x_2880.y, x_2879.y, x_2879.z);
        let x_2882 : vec4<f32> = u_xlat7;
        let x_2885 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2888 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2882.x, x_2882.y, x_2882.x, x_2882.y) * vec4<f32>(x_2885.x, x_2885.y, x_2885.x, x_2885.y)) + vec4<f32>(x_2888.x, x_2888.y, x_2888.z, x_2888.y));
        let x_2891 : vec4<f32> = u_xlat7;
        let x_2894 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2897 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2891.x, x_2891.y) * vec2<f32>(x_2894.x, x_2894.y)) + vec2<f32>(x_2897.w, x_2897.y));
        let x_2901 : f32 = u_xlat9.x;
        u_xlat10.x = x_2901;
        let x_2903 : vec4<f32> = u_xlat7;
        let x_2906 : vec4<f32> = x_256.x_MainLightShadowmapSize;
        let x_2909 : vec4<f32> = u_xlat10;
        let x_2911 : vec2<f32> = ((vec2<f32>(x_2903.x, x_2903.y) * vec2<f32>(x_2906.x, x_2906.y)) + vec2<f32>(x_2909.x, x_2909.y));
        let x_2912 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2911.x, x_2911.y, x_2912.z, x_2912.w);
        let x_2914 : vec4<f32> = u_xlat8;
        let x_2916 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2914.x, x_2914.x, x_2914.x, x_2914.x) * x_2916);
        let x_2918 : vec4<f32> = u_xlat8;
        let x_2920 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2918.y, x_2918.y, x_2918.y, x_2918.y) * x_2920);
        let x_2922 : vec4<f32> = u_xlat8;
        let x_2924 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2922.z, x_2922.z, x_2922.z, x_2922.z) * x_2924);
        let x_2926 : vec4<f32> = u_xlat8;
        let x_2928 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2926.w, x_2926.w, x_2926.w, x_2926.w) * x_2928);
        let x_2931 : vec4<f32> = u_xlat13;
        let x_2932 : vec2<f32> = vec2<f32>(x_2931.x, x_2931.y);
        let x_2934 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2932.x, x_2932.y, x_2934);
        let x_2941 : vec3<f32> = txVec43;
        let x_2943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2941.xy, x_2941.z);
        u_xlat69 = x_2943;
        let x_2945 : vec4<f32> = u_xlat13;
        let x_2946 : vec2<f32> = vec2<f32>(x_2945.z, x_2945.w);
        let x_2948 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2946.x, x_2946.y, x_2948);
        let x_2955 : vec3<f32> = txVec44;
        let x_2957 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2955.xy, x_2955.z);
        u_xlat9.x = x_2957;
        let x_2960 : f32 = u_xlat9.x;
        let x_2962 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2960 * x_2962);
        let x_2966 : f32 = u_xlat18.x;
        let x_2967 : f32 = u_xlat69;
        let x_2970 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2966 * x_2967) + x_2970);
        let x_2973 : vec2<f32> = u_xlat49;
        let x_2975 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2973.x, x_2973.y, x_2975);
        let x_2982 : vec3<f32> = txVec45;
        let x_2984 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2982.xy, x_2982.z);
        u_xlat49.x = x_2984;
        let x_2987 : f32 = u_xlat18.z;
        let x_2989 : f32 = u_xlat49.x;
        let x_2991 : f32 = u_xlat69;
        u_xlat69 = ((x_2987 * x_2989) + x_2991);
        let x_2994 : vec4<f32> = u_xlat16;
        let x_2995 : vec2<f32> = vec2<f32>(x_2994.x, x_2994.y);
        let x_2997 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2995.x, x_2995.y, x_2997);
        let x_3004 : vec3<f32> = txVec46;
        let x_3006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3004.xy, x_3004.z);
        u_xlat49.x = x_3006;
        let x_3009 : f32 = u_xlat18.w;
        let x_3011 : f32 = u_xlat49.x;
        let x_3013 : f32 = u_xlat69;
        u_xlat69 = ((x_3009 * x_3011) + x_3013);
        let x_3016 : vec4<f32> = u_xlat14;
        let x_3017 : vec2<f32> = vec2<f32>(x_3016.x, x_3016.y);
        let x_3019 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3017.x, x_3017.y, x_3019);
        let x_3026 : vec3<f32> = txVec47;
        let x_3028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3026.xy, x_3026.z);
        u_xlat49.x = x_3028;
        let x_3031 : f32 = u_xlat19.x;
        let x_3033 : f32 = u_xlat49.x;
        let x_3035 : f32 = u_xlat69;
        u_xlat69 = ((x_3031 * x_3033) + x_3035);
        let x_3038 : vec4<f32> = u_xlat14;
        let x_3039 : vec2<f32> = vec2<f32>(x_3038.z, x_3038.w);
        let x_3041 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3039.x, x_3039.y, x_3041);
        let x_3048 : vec3<f32> = txVec48;
        let x_3050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3048.xy, x_3048.z);
        u_xlat49.x = x_3050;
        let x_3053 : f32 = u_xlat19.y;
        let x_3055 : f32 = u_xlat49.x;
        let x_3057 : f32 = u_xlat69;
        u_xlat69 = ((x_3053 * x_3055) + x_3057);
        let x_3060 : vec4<f32> = u_xlat15;
        let x_3061 : vec2<f32> = vec2<f32>(x_3060.x, x_3060.y);
        let x_3063 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3061.x, x_3061.y, x_3063);
        let x_3070 : vec3<f32> = txVec49;
        let x_3072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3070.xy, x_3070.z);
        u_xlat49.x = x_3072;
        let x_3075 : f32 = u_xlat19.z;
        let x_3077 : f32 = u_xlat49.x;
        let x_3079 : f32 = u_xlat69;
        u_xlat69 = ((x_3075 * x_3077) + x_3079);
        let x_3082 : vec4<f32> = u_xlat16;
        let x_3083 : vec2<f32> = vec2<f32>(x_3082.z, x_3082.w);
        let x_3085 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3083.x, x_3083.y, x_3085);
        let x_3092 : vec3<f32> = txVec50;
        let x_3094 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3092.xy, x_3092.z);
        u_xlat49.x = x_3094;
        let x_3097 : f32 = u_xlat19.w;
        let x_3099 : f32 = u_xlat49.x;
        let x_3101 : f32 = u_xlat69;
        u_xlat69 = ((x_3097 * x_3099) + x_3101);
        let x_3104 : vec4<f32> = u_xlat17;
        let x_3105 : vec2<f32> = vec2<f32>(x_3104.x, x_3104.y);
        let x_3107 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3105.x, x_3105.y, x_3107);
        let x_3114 : vec3<f32> = txVec51;
        let x_3116 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3114.xy, x_3114.z);
        u_xlat49.x = x_3116;
        let x_3119 : f32 = u_xlat20.x;
        let x_3121 : f32 = u_xlat49.x;
        let x_3123 : f32 = u_xlat69;
        u_xlat69 = ((x_3119 * x_3121) + x_3123);
        let x_3126 : vec4<f32> = u_xlat17;
        let x_3127 : vec2<f32> = vec2<f32>(x_3126.z, x_3126.w);
        let x_3129 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3127.x, x_3127.y, x_3129);
        let x_3136 : vec3<f32> = txVec52;
        let x_3138 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3136.xy, x_3136.z);
        u_xlat49.x = x_3138;
        let x_3141 : f32 = u_xlat20.y;
        let x_3143 : f32 = u_xlat49.x;
        let x_3145 : f32 = u_xlat69;
        u_xlat69 = ((x_3141 * x_3143) + x_3145);
        let x_3148 : vec3<f32> = u_xlat30;
        let x_3149 : vec2<f32> = vec2<f32>(x_3148.x, x_3148.y);
        let x_3151 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3149.x, x_3149.y, x_3151);
        let x_3158 : vec3<f32> = txVec53;
        let x_3160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3158.xy, x_3158.z);
        u_xlat49.x = x_3160;
        let x_3163 : f32 = u_xlat20.z;
        let x_3165 : f32 = u_xlat49.x;
        let x_3167 : f32 = u_xlat69;
        u_xlat69 = ((x_3163 * x_3165) + x_3167);
        let x_3170 : vec2<f32> = u_xlat57;
        let x_3172 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3170.x, x_3170.y, x_3172);
        let x_3179 : vec3<f32> = txVec54;
        let x_3181 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3179.xy, x_3179.z);
        u_xlat49.x = x_3181;
        let x_3184 : f32 = u_xlat20.w;
        let x_3186 : f32 = u_xlat49.x;
        let x_3188 : f32 = u_xlat69;
        u_xlat69 = ((x_3184 * x_3186) + x_3188);
        let x_3191 : vec4<f32> = u_xlat12;
        let x_3192 : vec2<f32> = vec2<f32>(x_3191.x, x_3191.y);
        let x_3194 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3192.x, x_3192.y, x_3194);
        let x_3201 : vec3<f32> = txVec55;
        let x_3203 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3201.xy, x_3201.z);
        u_xlat49.x = x_3203;
        let x_3206 : f32 = u_xlat8.x;
        let x_3208 : f32 = u_xlat49.x;
        let x_3210 : f32 = u_xlat69;
        u_xlat69 = ((x_3206 * x_3208) + x_3210);
        let x_3213 : vec4<f32> = u_xlat12;
        let x_3214 : vec2<f32> = vec2<f32>(x_3213.z, x_3213.w);
        let x_3216 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3214.x, x_3214.y, x_3216);
        let x_3223 : vec3<f32> = txVec56;
        let x_3225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3223.xy, x_3223.z);
        u_xlat49.x = x_3225;
        let x_3228 : f32 = u_xlat8.y;
        let x_3230 : f32 = u_xlat49.x;
        let x_3232 : f32 = u_xlat69;
        u_xlat69 = ((x_3228 * x_3230) + x_3232);
        let x_3235 : vec2<f32> = u_xlat52;
        let x_3237 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3235.x, x_3235.y, x_3237);
        let x_3244 : vec3<f32> = txVec57;
        let x_3246 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3244.xy, x_3244.z);
        u_xlat49.x = x_3246;
        let x_3249 : f32 = u_xlat8.z;
        let x_3251 : f32 = u_xlat49.x;
        let x_3253 : f32 = u_xlat69;
        u_xlat69 = ((x_3249 * x_3251) + x_3253);
        let x_3256 : vec4<f32> = u_xlat7;
        let x_3257 : vec2<f32> = vec2<f32>(x_3256.x, x_3256.y);
        let x_3259 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3257.x, x_3257.y, x_3259);
        let x_3266 : vec3<f32> = txVec58;
        let x_3268 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3266.xy, x_3266.z);
        u_xlat7.x = x_3268;
        let x_3271 : f32 = u_xlat8.w;
        let x_3273 : f32 = u_xlat7.x;
        let x_3275 : f32 = u_xlat69;
        u_xlat63 = ((x_3271 * x_3273) + x_3275);
      }
    }
  } else {
    let x_3279 : vec4<f32> = vs_INTERP9;
    let x_3280 : vec2<f32> = vec2<f32>(x_3279.x, x_3279.y);
    let x_3282 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3280.x, x_3280.y, x_3282);
    let x_3289 : vec3<f32> = txVec59;
    let x_3291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3289.xy, x_3289.z);
    u_xlat63 = x_3291;
  }
  let x_3292 : f32 = u_xlat63;
  let x_3294 : f32 = x_256.x_MainLightShadowParams.x;
  let x_3296 : f32 = u_xlat65;
  u_xlat63 = ((x_3292 * x_3294) + x_3296);
  let x_3299 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3299);
  let x_3302 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3302 >= 1.0f);
  let x_3304 : bool = u_xlatb65;
  let x_3305 : bool = u_xlatb69;
  u_xlatb65 = (x_3304 | x_3305);
  let x_3307 : bool = u_xlatb65;
  let x_3308 : f32 = u_xlat63;
  u_xlat63 = select(x_3308, 1.0f, x_3307);
  let x_3310 : vec3<f32> = vs_INTERP0;
  let x_3312 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3314 : vec3<f32> = (x_3310 + -(x_3312));
  let x_3315 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3314.x, x_3314.y, x_3314.z, x_3315.w);
  let x_3317 : vec4<f32> = u_xlat7;
  let x_3319 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3317.x, x_3317.y, x_3317.z), vec3<f32>(x_3319.x, x_3319.y, x_3319.z));
  let x_3322 : f32 = u_xlat65;
  let x_3324 : f32 = x_256.x_MainLightShadowParams.z;
  let x_3327 : f32 = x_256.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3322 * x_3324) + x_3327);
  let x_3329 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3329, 0.0f, 1.0f);
  let x_3331 : f32 = u_xlat63;
  u_xlat69 = (-(x_3331) + 1.0f);
  let x_3334 : f32 = u_xlat65;
  let x_3335 : f32 = u_xlat69;
  let x_3337 : f32 = u_xlat63;
  u_xlat63 = ((x_3334 * x_3335) + x_3337);
  let x_3345 : f32 = x_3343.x_MainLightCookieTextureFormat;
  u_xlatb65 = !((x_3345 == -1.0f));
  let x_3347 : bool = u_xlatb65;
  if (x_3347) {
    let x_3350 : vec3<f32> = vs_INTERP0;
    let x_3353 : vec4<f32> = x_3343.x_MainLightWorldToLight[1i];
    let x_3355 : vec2<f32> = (vec2<f32>(x_3350.y, x_3350.y) * vec2<f32>(x_3353.x, x_3353.y));
    let x_3356 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3355.x, x_3355.y, x_3356.z, x_3356.w);
    let x_3359 : vec4<f32> = x_3343.x_MainLightWorldToLight[0i];
    let x_3361 : vec3<f32> = vs_INTERP0;
    let x_3364 : vec4<f32> = u_xlat7;
    let x_3366 : vec2<f32> = ((vec2<f32>(x_3359.x, x_3359.y) * vec2<f32>(x_3361.x, x_3361.x)) + vec2<f32>(x_3364.x, x_3364.y));
    let x_3367 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3366.x, x_3366.y, x_3367.z, x_3367.w);
    let x_3370 : vec4<f32> = x_3343.x_MainLightWorldToLight[2i];
    let x_3372 : vec3<f32> = vs_INTERP0;
    let x_3375 : vec4<f32> = u_xlat7;
    let x_3377 : vec2<f32> = ((vec2<f32>(x_3370.x, x_3370.y) * vec2<f32>(x_3372.z, x_3372.z)) + vec2<f32>(x_3375.x, x_3375.y));
    let x_3378 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3377.x, x_3377.y, x_3378.z, x_3378.w);
    let x_3380 : vec4<f32> = u_xlat7;
    let x_3383 : vec4<f32> = x_3343.x_MainLightWorldToLight[3i];
    let x_3385 : vec2<f32> = (vec2<f32>(x_3380.x, x_3380.y) + vec2<f32>(x_3383.x, x_3383.y));
    let x_3386 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3385.x, x_3385.y, x_3386.z, x_3386.w);
    let x_3388 : vec4<f32> = u_xlat7;
    let x_3391 : vec2<f32> = ((vec2<f32>(x_3388.x, x_3388.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3392 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3391.x, x_3391.y, x_3392.z, x_3392.w);
    let x_3399 : vec4<f32> = u_xlat7;
    let x_3402 : f32 = x_90.x_GlobalMipBias.x;
    let x_3403 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3399.x, x_3399.y), x_3402);
    u_xlat7 = x_3403;
    let x_3406 : f32 = x_3343.x_MainLightCookieTextureFormat;
    let x_3408 : f32 = x_3343.x_MainLightCookieTextureFormat;
    let x_3410 : f32 = x_3343.x_MainLightCookieTextureFormat;
    let x_3412 : f32 = x_3343.x_MainLightCookieTextureFormat;
    let x_3413 : vec4<f32> = vec4<f32>(x_3406, x_3408, x_3410, x_3412);
    let x_3421 : vec4<bool> = (vec4<f32>(x_3413.x, x_3413.y, x_3413.z, x_3413.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3421.x, x_3421.y);
    let x_3424 : bool = u_xlatb8.y;
    if (x_3424) {
      let x_3429 : f32 = u_xlat7.w;
      x_3425 = x_3429;
    } else {
      let x_3432 : f32 = u_xlat7.x;
      x_3425 = x_3432;
    }
    let x_3433 : f32 = x_3425;
    u_xlat65 = x_3433;
    let x_3435 : bool = u_xlatb8.x;
    if (x_3435) {
      let x_3439 : vec4<f32> = u_xlat7;
      x_3436 = vec3<f32>(x_3439.x, x_3439.y, x_3439.z);
    } else {
      let x_3442 : f32 = u_xlat65;
      x_3436 = vec3<f32>(x_3442, x_3442, x_3442);
    }
    let x_3444 : vec3<f32> = x_3436;
    let x_3445 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3444.x, x_3444.y, x_3444.z, x_3445.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3451 : vec4<f32> = u_xlat7;
  let x_3454 : vec4<f32> = x_90.x_MainLightColor;
  let x_3456 : vec3<f32> = (vec3<f32>(x_3451.x, x_3451.y, x_3451.z) * vec3<f32>(x_3454.x, x_3454.y, x_3454.z));
  let x_3457 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3456.x, x_3456.y, x_3456.z, x_3457.w);
  let x_3459 : f32 = u_xlat48;
  let x_3461 : vec4<f32> = u_xlat7;
  let x_3463 : vec3<f32> = (vec3<f32>(x_3459, x_3459, x_3459) * vec3<f32>(x_3461.x, x_3461.y, x_3461.z));
  let x_3464 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3463.x, x_3463.y, x_3463.z, x_3464.w);
  let x_3466 : vec3<f32> = u_xlat1;
  let x_3468 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3466), vec3<f32>(x_3468.x, x_3468.y, x_3468.z));
  let x_3471 : f32 = u_xlat65;
  let x_3472 : f32 = u_xlat65;
  u_xlat65 = (x_3471 + x_3472);
  let x_3474 : vec4<f32> = u_xlat3;
  let x_3476 : f32 = u_xlat65;
  let x_3480 : vec3<f32> = u_xlat1;
  let x_3482 : vec3<f32> = ((vec3<f32>(x_3474.x, x_3474.y, x_3474.z) * -(vec3<f32>(x_3476, x_3476, x_3476))) + -(x_3480));
  let x_3483 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3482.x, x_3482.y, x_3482.z, x_3483.w);
  let x_3485 : vec4<f32> = u_xlat3;
  let x_3487 : vec3<f32> = u_xlat1;
  u_xlat65 = dot(vec3<f32>(x_3485.x, x_3485.y, x_3485.z), x_3487);
  let x_3489 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3489, 0.0f, 1.0f);
  let x_3491 : f32 = u_xlat65;
  u_xlat65 = (-(x_3491) + 1.0f);
  let x_3494 : f32 = u_xlat65;
  let x_3495 : f32 = u_xlat65;
  u_xlat65 = (x_3494 * x_3495);
  let x_3497 : f32 = u_xlat65;
  let x_3498 : f32 = u_xlat65;
  u_xlat65 = (x_3497 * x_3498);
  let x_3500 : f32 = u_xlat44;
  u_xlat69 = ((-(x_3500) * 0.699999988f) + 1.700000048f);
  let x_3506 : f32 = u_xlat44;
  let x_3507 : f32 = u_xlat69;
  u_xlat44 = (x_3506 * x_3507);
  let x_3509 : f32 = u_xlat44;
  u_xlat44 = (x_3509 * 6.0f);
  let x_3520 : vec4<f32> = u_xlat8;
  let x_3522 : f32 = u_xlat44;
  let x_3523 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3520.x, x_3520.y, x_3520.z), x_3522);
  u_xlat8 = x_3523;
  let x_3525 : f32 = u_xlat8.w;
  u_xlat44 = (x_3525 + -1.0f);
  let x_3528 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3529 : f32 = u_xlat44;
  u_xlat44 = ((x_3528 * x_3529) + 1.0f);
  let x_3532 : f32 = u_xlat44;
  u_xlat44 = max(x_3532, 0.0f);
  let x_3534 : f32 = u_xlat44;
  u_xlat44 = log2(x_3534);
  let x_3536 : f32 = u_xlat44;
  let x_3538 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat44 = (x_3536 * x_3538);
  let x_3540 : f32 = u_xlat44;
  u_xlat44 = exp2(x_3540);
  let x_3542 : f32 = u_xlat44;
  let x_3544 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat44 = (x_3542 * x_3544);
  let x_3546 : vec4<f32> = u_xlat8;
  let x_3548 : f32 = u_xlat44;
  let x_3550 : vec3<f32> = (vec3<f32>(x_3546.x, x_3546.y, x_3546.z) * vec3<f32>(x_3548, x_3548, x_3548));
  let x_3551 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3550.x, x_3550.y, x_3550.z, x_3551.w);
  let x_3553 : f32 = u_xlat66;
  let x_3555 : f32 = u_xlat66;
  let x_3559 : vec2<f32> = ((vec2<f32>(x_3553, x_3553) * vec2<f32>(x_3555, x_3555)) + vec2<f32>(-1.0f, 1.0f));
  let x_3560 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3559.x, x_3559.y, x_3560.z, x_3560.w);
  let x_3563 : f32 = u_xlat9.y;
  u_xlat44 = (1.0f / x_3563);
  let x_3566 : f32 = u_xlat5.x;
  u_xlat66 = (x_3566 + -0.039999999f);
  let x_3569 : f32 = u_xlat65;
  let x_3570 : f32 = u_xlat66;
  u_xlat65 = ((x_3569 * x_3570) + 0.039999999f);
  let x_3574 : f32 = u_xlat65;
  let x_3575 : f32 = u_xlat44;
  u_xlat44 = (x_3574 * x_3575);
  let x_3577 : f32 = u_xlat44;
  let x_3579 : vec4<f32> = u_xlat8;
  let x_3581 : vec3<f32> = (vec3<f32>(x_3577, x_3577, x_3577) * vec3<f32>(x_3579.x, x_3579.y, x_3579.z));
  let x_3582 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3581.x, x_3581.y, x_3581.z, x_3582.w);
  let x_3584 : vec3<f32> = u_xlat26;
  let x_3585 : vec3<f32> = u_xlat4;
  let x_3587 : vec4<f32> = u_xlat8;
  let x_3589 : vec3<f32> = ((x_3584 * x_3585) + vec3<f32>(x_3587.x, x_3587.y, x_3587.z));
  let x_3590 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3589.x, x_3589.y, x_3589.z, x_3590.w);
  let x_3592 : f32 = u_xlat63;
  let x_3594 : f32 = x_145.unity_LightData.z;
  u_xlat63 = (x_3592 * x_3594);
  let x_3596 : vec4<f32> = u_xlat3;
  let x_3599 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat44 = dot(vec3<f32>(x_3596.x, x_3596.y, x_3596.z), vec3<f32>(x_3599.x, x_3599.y, x_3599.z));
  let x_3602 : f32 = u_xlat44;
  u_xlat44 = clamp(x_3602, 0.0f, 1.0f);
  let x_3604 : f32 = u_xlat63;
  let x_3605 : f32 = u_xlat44;
  u_xlat63 = (x_3604 * x_3605);
  let x_3607 : f32 = u_xlat63;
  let x_3609 : vec4<f32> = u_xlat7;
  let x_3611 : vec3<f32> = (vec3<f32>(x_3607, x_3607, x_3607) * vec3<f32>(x_3609.x, x_3609.y, x_3609.z));
  let x_3612 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3611.x, x_3611.y, x_3611.z, x_3612.w);
  let x_3614 : vec3<f32> = u_xlat1;
  let x_3616 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3618 : vec3<f32> = (x_3614 + vec3<f32>(x_3616.x, x_3616.y, x_3616.z));
  let x_3619 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3618.x, x_3618.y, x_3618.z, x_3619.w);
  let x_3621 : vec4<f32> = u_xlat8;
  let x_3623 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3621.x, x_3621.y, x_3621.z), vec3<f32>(x_3623.x, x_3623.y, x_3623.z));
  let x_3626 : f32 = u_xlat63;
  u_xlat63 = max(x_3626, 1.17549435e-37f);
  let x_3629 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3629);
  let x_3631 : f32 = u_xlat63;
  let x_3633 : vec4<f32> = u_xlat8;
  let x_3635 : vec3<f32> = (vec3<f32>(x_3631, x_3631, x_3631) * vec3<f32>(x_3633.x, x_3633.y, x_3633.z));
  let x_3636 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3635.x, x_3635.y, x_3635.z, x_3636.w);
  let x_3638 : vec4<f32> = u_xlat3;
  let x_3640 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3638.x, x_3638.y, x_3638.z), vec3<f32>(x_3640.x, x_3640.y, x_3640.z));
  let x_3643 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3643, 0.0f, 1.0f);
  let x_3646 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3648 : vec4<f32> = u_xlat8;
  u_xlat44 = dot(vec3<f32>(x_3646.x, x_3646.y, x_3646.z), vec3<f32>(x_3648.x, x_3648.y, x_3648.z));
  let x_3651 : f32 = u_xlat44;
  u_xlat44 = clamp(x_3651, 0.0f, 1.0f);
  let x_3653 : f32 = u_xlat63;
  let x_3654 : f32 = u_xlat63;
  u_xlat63 = (x_3653 * x_3654);
  let x_3656 : f32 = u_xlat63;
  let x_3658 : f32 = u_xlat9.x;
  u_xlat63 = ((x_3656 * x_3658) + 1.000010014f);
  let x_3662 : f32 = u_xlat44;
  let x_3663 : f32 = u_xlat44;
  u_xlat44 = (x_3662 * x_3663);
  let x_3665 : f32 = u_xlat63;
  let x_3666 : f32 = u_xlat63;
  u_xlat63 = (x_3665 * x_3666);
  let x_3668 : f32 = u_xlat44;
  u_xlat44 = max(x_3668, 0.100000001f);
  let x_3671 : f32 = u_xlat63;
  let x_3672 : f32 = u_xlat44;
  u_xlat63 = (x_3671 * x_3672);
  let x_3674 : f32 = u_xlat27;
  let x_3675 : f32 = u_xlat63;
  u_xlat63 = (x_3674 * x_3675);
  let x_3677 : f32 = u_xlat67;
  let x_3678 : f32 = u_xlat63;
  u_xlat63 = (x_3677 / x_3678);
  let x_3680 : f32 = u_xlat63;
  let x_3684 : vec3<f32> = u_xlat4;
  let x_3685 : vec3<f32> = ((vec3<f32>(x_3680, x_3680, x_3680) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3684);
  let x_3686 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3685.x, x_3685.y, x_3685.z, x_3686.w);
  let x_3688 : vec4<f32> = u_xlat7;
  let x_3690 : vec4<f32> = u_xlat8;
  let x_3692 : vec3<f32> = (vec3<f32>(x_3688.x, x_3688.y, x_3688.z) * vec3<f32>(x_3690.x, x_3690.y, x_3690.z));
  let x_3693 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3692.x, x_3692.y, x_3692.z, x_3693.w);
  let x_3696 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3698 : f32 = x_145.unity_LightData.y;
  u_xlat63 = min(x_3696, x_3698);
  let x_3701 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3701));
  let x_3706 : f32 = x_3343.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3708 : f32 = x_3343.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3710 : f32 = x_3343.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3712 : f32 = x_3343.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3713 : vec4<f32> = vec4<f32>(x_3706, x_3708, x_3710, x_3712);
  let x_3720 : vec4<bool> = (vec4<f32>(x_3713.x, x_3713.y, x_3713.z, x_3713.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb44 = vec2<bool>(x_3720.x, x_3720.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3731 : u32 = u_xlatu_loop_1;
    let x_3732 : u32 = u_xlatu63;
    if ((x_3731 < x_3732)) {
    } else {
      break;
    }
    let x_3735 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3735 >> 2u);
    let x_3738 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3738 & 3u));
    let x_3742 : u32 = u_xlatu68;
    let x_3745 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3742)];
    let x_3755 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3760 : vec4<u32> = indexable[x_3755];
    u_xlat68 = dot(x_3745, bitcast<vec4<f32>>(x_3760));
    let x_3763 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3763));
    let x_3766 : vec3<f32> = vs_INTERP0;
    let x_3778 : u32 = u_xlatu68;
    let x_3781 : vec4<f32> = x_3777.x_AdditionalLightsPosition[bitcast<i32>(x_3778)];
    let x_3784 : u32 = u_xlatu68;
    let x_3787 : vec4<f32> = x_3777.x_AdditionalLightsPosition[bitcast<i32>(x_3784)];
    u_xlat30 = ((-(x_3766) * vec3<f32>(x_3781.w, x_3781.w, x_3781.w)) + vec3<f32>(x_3787.x, x_3787.y, x_3787.z));
    let x_3790 : vec3<f32> = u_xlat30;
    let x_3791 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(x_3790, x_3791);
    let x_3793 : f32 = u_xlat69;
    u_xlat69 = max(x_3793, 6.10351562e-05f);
    let x_3797 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3797);
    let x_3799 : f32 = u_xlat70;
    let x_3801 : vec3<f32> = u_xlat30;
    let x_3802 : vec3<f32> = (vec3<f32>(x_3799, x_3799, x_3799) * x_3801);
    let x_3803 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3802.x, x_3802.y, x_3802.z, x_3803.w);
    let x_3806 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3806);
    let x_3808 : f32 = u_xlat69;
    let x_3809 : u32 = u_xlatu68;
    let x_3812 : f32 = x_3777.x_AdditionalLightsAttenuation[bitcast<i32>(x_3809)].x;
    u_xlat69 = (x_3808 * x_3812);
    let x_3814 : f32 = u_xlat69;
    let x_3816 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3814) * x_3816) + 1.0f);
    let x_3819 : f32 = u_xlat69;
    u_xlat69 = max(x_3819, 0.0f);
    let x_3821 : f32 = u_xlat69;
    let x_3822 : f32 = u_xlat69;
    u_xlat69 = (x_3821 * x_3822);
    let x_3824 : f32 = u_xlat69;
    let x_3825 : f32 = u_xlat71;
    u_xlat69 = (x_3824 * x_3825);
    let x_3827 : u32 = u_xlatu68;
    let x_3830 : vec4<f32> = x_3777.x_AdditionalLightsSpotDir[bitcast<i32>(x_3827)];
    let x_3832 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3830.x, x_3830.y, x_3830.z), vec3<f32>(x_3832.x, x_3832.y, x_3832.z));
    let x_3835 : f32 = u_xlat71;
    let x_3836 : u32 = u_xlatu68;
    let x_3839 : f32 = x_3777.x_AdditionalLightsAttenuation[bitcast<i32>(x_3836)].z;
    let x_3841 : u32 = u_xlatu68;
    let x_3844 : f32 = x_3777.x_AdditionalLightsAttenuation[bitcast<i32>(x_3841)].w;
    u_xlat71 = ((x_3835 * x_3839) + x_3844);
    let x_3846 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3846, 0.0f, 1.0f);
    let x_3848 : f32 = u_xlat71;
    let x_3849 : f32 = u_xlat71;
    u_xlat71 = (x_3848 * x_3849);
    let x_3851 : f32 = u_xlat69;
    let x_3852 : f32 = u_xlat71;
    u_xlat69 = (x_3851 * x_3852);
    let x_3855 : u32 = u_xlatu68;
    u_xlatu71 = (x_3855 >> 5u);
    let x_3858 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3858) & 31i)));
    let x_3864 : i32 = u_xlati73;
    let x_3866 : u32 = u_xlatu71;
    let x_3869 : f32 = x_3343.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3866)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3864) & bitcast<u32>(x_3869)));
    let x_3873 : i32 = u_xlati71;
    if ((x_3873 != 0i)) {
      let x_3883 : u32 = u_xlatu68;
      let x_3886 : f32 = x_3882.x_AdditionalLightsLightTypes[bitcast<i32>(x_3883)].el;
      u_xlati71 = i32(x_3886);
      let x_3888 : i32 = u_xlati71;
      u_xlati73 = select(1i, 0i, (x_3888 != 0i));
      let x_3892 : u32 = u_xlatu68;
      u_xlati11 = (bitcast<i32>(x_3892) << bitcast<u32>(2i));
      let x_3895 : i32 = u_xlati73;
      if ((x_3895 != 0i)) {
        let x_3900 : vec3<f32> = vs_INTERP0;
        let x_3902 : i32 = u_xlati11;
        let x_3905 : i32 = u_xlati11;
        let x_3909 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_3902 + 1i) / 4i)][((x_3905 + 1i) % 4i)];
        u_xlat32 = (vec3<f32>(x_3900.y, x_3900.y, x_3900.y) * vec3<f32>(x_3909.x, x_3909.y, x_3909.w));
        let x_3912 : i32 = u_xlati11;
        let x_3914 : i32 = u_xlati11;
        let x_3917 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[(x_3912 / 4i)][(x_3914 % 4i)];
        let x_3919 : vec3<f32> = vs_INTERP0;
        let x_3922 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3917.x, x_3917.y, x_3917.w) * vec3<f32>(x_3919.x, x_3919.x, x_3919.x)) + x_3922);
        let x_3924 : i32 = u_xlati11;
        let x_3927 : i32 = u_xlati11;
        let x_3931 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_3924 + 2i) / 4i)][((x_3927 + 2i) % 4i)];
        let x_3933 : vec3<f32> = vs_INTERP0;
        let x_3936 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3931.x, x_3931.y, x_3931.w) * vec3<f32>(x_3933.z, x_3933.z, x_3933.z)) + x_3936);
        let x_3938 : vec3<f32> = u_xlat32;
        let x_3939 : i32 = u_xlati11;
        let x_3942 : i32 = u_xlati11;
        let x_3946 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_3939 + 3i) / 4i)][((x_3942 + 3i) % 4i)];
        u_xlat32 = (x_3938 + vec3<f32>(x_3946.x, x_3946.y, x_3946.w));
        let x_3949 : vec3<f32> = u_xlat32;
        let x_3951 : vec3<f32> = u_xlat32;
        let x_3953 : vec2<f32> = (vec2<f32>(x_3949.x, x_3949.y) / vec2<f32>(x_3951.z, x_3951.z));
        let x_3954 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3953.x, x_3953.y, x_3954.z);
        let x_3956 : vec3<f32> = u_xlat32;
        let x_3959 : vec2<f32> = ((vec2<f32>(x_3956.x, x_3956.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3960 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3959.x, x_3959.y, x_3960.z);
        let x_3962 : vec3<f32> = u_xlat32;
        let x_3966 : vec2<f32> = clamp(vec2<f32>(x_3962.x, x_3962.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3967 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3966.x, x_3966.y, x_3967.z);
        let x_3969 : u32 = u_xlatu68;
        let x_3972 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3969)];
        let x_3974 : vec3<f32> = u_xlat32;
        let x_3977 : u32 = u_xlatu68;
        let x_3980 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3977)];
        let x_3982 : vec2<f32> = ((vec2<f32>(x_3972.x, x_3972.y) * vec2<f32>(x_3974.x, x_3974.y)) + vec2<f32>(x_3980.z, x_3980.w));
        let x_3983 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3982.x, x_3982.y, x_3983.z);
      } else {
        let x_3987 : i32 = u_xlati71;
        u_xlatb71 = (x_3987 == 1i);
        let x_3989 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3989);
        let x_3991 : i32 = u_xlati71;
        if ((x_3991 != 0i)) {
          let x_3995 : vec3<f32> = vs_INTERP0;
          let x_3997 : i32 = u_xlati11;
          let x_4000 : i32 = u_xlati11;
          let x_4004 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_3997 + 1i) / 4i)][((x_4000 + 1i) % 4i)];
          let x_4006 : vec2<f32> = (vec2<f32>(x_3995.y, x_3995.y) * vec2<f32>(x_4004.x, x_4004.y));
          let x_4007 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4006.x, x_4006.y, x_4007.z, x_4007.w);
          let x_4009 : i32 = u_xlati11;
          let x_4011 : i32 = u_xlati11;
          let x_4014 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[(x_4009 / 4i)][(x_4011 % 4i)];
          let x_4016 : vec3<f32> = vs_INTERP0;
          let x_4019 : vec4<f32> = u_xlat12;
          let x_4021 : vec2<f32> = ((vec2<f32>(x_4014.x, x_4014.y) * vec2<f32>(x_4016.x, x_4016.x)) + vec2<f32>(x_4019.x, x_4019.y));
          let x_4022 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4021.x, x_4021.y, x_4022.z, x_4022.w);
          let x_4024 : i32 = u_xlati11;
          let x_4027 : i32 = u_xlati11;
          let x_4031 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4024 + 2i) / 4i)][((x_4027 + 2i) % 4i)];
          let x_4033 : vec3<f32> = vs_INTERP0;
          let x_4036 : vec4<f32> = u_xlat12;
          let x_4038 : vec2<f32> = ((vec2<f32>(x_4031.x, x_4031.y) * vec2<f32>(x_4033.z, x_4033.z)) + vec2<f32>(x_4036.x, x_4036.y));
          let x_4039 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4038.x, x_4038.y, x_4039.z, x_4039.w);
          let x_4041 : vec4<f32> = u_xlat12;
          let x_4043 : i32 = u_xlati11;
          let x_4046 : i32 = u_xlati11;
          let x_4050 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4043 + 3i) / 4i)][((x_4046 + 3i) % 4i)];
          let x_4052 : vec2<f32> = (vec2<f32>(x_4041.x, x_4041.y) + vec2<f32>(x_4050.x, x_4050.y));
          let x_4053 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4052.x, x_4052.y, x_4053.z, x_4053.w);
          let x_4055 : vec4<f32> = u_xlat12;
          let x_4058 : vec2<f32> = ((vec2<f32>(x_4055.x, x_4055.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4059 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4058.x, x_4058.y, x_4059.z, x_4059.w);
          let x_4061 : vec4<f32> = u_xlat12;
          let x_4063 : vec2<f32> = fract(vec2<f32>(x_4061.x, x_4061.y));
          let x_4064 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4063.x, x_4063.y, x_4064.z, x_4064.w);
          let x_4066 : u32 = u_xlatu68;
          let x_4069 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4066)];
          let x_4071 : vec4<f32> = u_xlat12;
          let x_4074 : u32 = u_xlatu68;
          let x_4077 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4074)];
          let x_4079 : vec2<f32> = ((vec2<f32>(x_4069.x, x_4069.y) * vec2<f32>(x_4071.x, x_4071.y)) + vec2<f32>(x_4077.z, x_4077.w));
          let x_4080 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4079.x, x_4079.y, x_4080.z);
        } else {
          let x_4083 : vec3<f32> = vs_INTERP0;
          let x_4085 : i32 = u_xlati11;
          let x_4088 : i32 = u_xlati11;
          let x_4092 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4085 + 1i) / 4i)][((x_4088 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4083.y, x_4083.y, x_4083.y, x_4083.y) * x_4092);
          let x_4094 : i32 = u_xlati11;
          let x_4096 : i32 = u_xlati11;
          let x_4099 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[(x_4094 / 4i)][(x_4096 % 4i)];
          let x_4100 : vec3<f32> = vs_INTERP0;
          let x_4103 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4099 * vec4<f32>(x_4100.x, x_4100.x, x_4100.x, x_4100.x)) + x_4103);
          let x_4105 : i32 = u_xlati11;
          let x_4108 : i32 = u_xlati11;
          let x_4112 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4105 + 2i) / 4i)][((x_4108 + 2i) % 4i)];
          let x_4113 : vec3<f32> = vs_INTERP0;
          let x_4116 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4112 * vec4<f32>(x_4113.z, x_4113.z, x_4113.z, x_4113.z)) + x_4116);
          let x_4118 : vec4<f32> = u_xlat12;
          let x_4119 : i32 = u_xlati11;
          let x_4122 : i32 = u_xlati11;
          let x_4126 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4119 + 3i) / 4i)][((x_4122 + 3i) % 4i)];
          u_xlat12 = (x_4118 + x_4126);
          let x_4128 : vec4<f32> = u_xlat12;
          let x_4130 : vec4<f32> = u_xlat12;
          let x_4132 : vec3<f32> = (vec3<f32>(x_4128.x, x_4128.y, x_4128.z) / vec3<f32>(x_4130.w, x_4130.w, x_4130.w));
          let x_4133 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4132.x, x_4132.y, x_4132.z, x_4133.w);
          let x_4135 : vec4<f32> = u_xlat12;
          let x_4137 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4135.x, x_4135.y, x_4135.z), vec3<f32>(x_4137.x, x_4137.y, x_4137.z));
          let x_4140 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4140);
          let x_4142 : f32 = u_xlat71;
          let x_4144 : vec4<f32> = u_xlat12;
          let x_4146 : vec3<f32> = (vec3<f32>(x_4142, x_4142, x_4142) * vec3<f32>(x_4144.x, x_4144.y, x_4144.z));
          let x_4147 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4146.x, x_4146.y, x_4146.z, x_4147.w);
          let x_4149 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4149.x, x_4149.y, x_4149.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4154 : f32 = u_xlat71;
          u_xlat71 = max(x_4154, 0.000001f);
          let x_4157 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4157);
          let x_4159 : f32 = u_xlat71;
          let x_4161 : vec4<f32> = u_xlat12;
          let x_4163 : vec3<f32> = (vec3<f32>(x_4159, x_4159, x_4159) * vec3<f32>(x_4161.z, x_4161.x, x_4161.y));
          let x_4164 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4163.x, x_4163.y, x_4163.z, x_4164.w);
          let x_4167 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4167);
          let x_4171 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4171, 0.0f, 1.0f);
          let x_4176 : vec4<f32> = u_xlat13;
          let x_4179 : vec4<bool> = (vec4<f32>(x_4176.y, x_4176.y, x_4176.y, x_4176.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4180 : vec2<bool> = vec2<bool>(x_4179.x, x_4179.w);
          let x_4181 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4180.x, x_4181.y, x_4181.z, x_4180.y);
          let x_4184 : bool = u_xlatb11.x;
          if (x_4184) {
            let x_4189 : f32 = u_xlat13.x;
            x_4185 = x_4189;
          } else {
            let x_4192 : f32 = u_xlat13.x;
            x_4185 = -(x_4192);
          }
          let x_4194 : f32 = x_4185;
          u_xlat11.x = x_4194;
          let x_4197 : bool = u_xlatb11.w;
          if (x_4197) {
            let x_4202 : f32 = u_xlat13.x;
            x_4198 = x_4202;
          } else {
            let x_4205 : f32 = u_xlat13.x;
            x_4198 = -(x_4205);
          }
          let x_4207 : f32 = x_4198;
          u_xlat11.w = x_4207;
          let x_4209 : vec4<f32> = u_xlat12;
          let x_4211 : f32 = u_xlat71;
          let x_4214 : vec4<f32> = u_xlat11;
          let x_4216 : vec2<f32> = ((vec2<f32>(x_4209.x, x_4209.y) * vec2<f32>(x_4211, x_4211)) + vec2<f32>(x_4214.x, x_4214.w));
          let x_4217 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4216.x, x_4217.y, x_4217.z, x_4216.y);
          let x_4219 : vec4<f32> = u_xlat11;
          let x_4222 : vec2<f32> = ((vec2<f32>(x_4219.x, x_4219.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4223 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4222.x, x_4223.y, x_4223.z, x_4222.y);
          let x_4225 : vec4<f32> = u_xlat11;
          let x_4229 : vec2<f32> = clamp(vec2<f32>(x_4225.x, x_4225.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4230 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4229.x, x_4230.y, x_4230.z, x_4229.y);
          let x_4232 : u32 = u_xlatu68;
          let x_4235 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4232)];
          let x_4237 : vec4<f32> = u_xlat11;
          let x_4240 : u32 = u_xlatu68;
          let x_4243 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4240)];
          let x_4245 : vec2<f32> = ((vec2<f32>(x_4235.x, x_4235.y) * vec2<f32>(x_4237.x, x_4237.w)) + vec2<f32>(x_4243.z, x_4243.w));
          let x_4246 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4245.x, x_4245.y, x_4246.z);
        }
      }
      let x_4253 : vec3<f32> = u_xlat32;
      let x_4256 : f32 = x_90.x_GlobalMipBias.x;
      let x_4257 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4253.x, x_4253.y), x_4256);
      u_xlat11 = x_4257;
      let x_4259 : bool = u_xlatb44.y;
      if (x_4259) {
        let x_4264 : f32 = u_xlat11.w;
        x_4260 = x_4264;
      } else {
        let x_4267 : f32 = u_xlat11.x;
        x_4260 = x_4267;
      }
      let x_4268 : f32 = x_4260;
      u_xlat71 = x_4268;
      let x_4270 : bool = u_xlatb44.x;
      if (x_4270) {
        let x_4274 : vec4<f32> = u_xlat11;
        x_4271 = vec3<f32>(x_4274.x, x_4274.y, x_4274.z);
      } else {
        let x_4277 : f32 = u_xlat71;
        x_4271 = vec3<f32>(x_4277, x_4277, x_4277);
      }
      let x_4279 : vec3<f32> = x_4271;
      let x_4280 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4279.x, x_4279.y, x_4279.z, x_4280.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4286 : vec4<f32> = u_xlat11;
    let x_4288 : u32 = u_xlatu68;
    let x_4291 : vec4<f32> = x_3777.x_AdditionalLightsColor[bitcast<i32>(x_4288)];
    let x_4293 : vec3<f32> = (vec3<f32>(x_4286.x, x_4286.y, x_4286.z) * vec3<f32>(x_4291.x, x_4291.y, x_4291.z));
    let x_4294 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4293.x, x_4293.y, x_4293.z, x_4294.w);
    let x_4296 : f32 = u_xlat48;
    let x_4298 : vec4<f32> = u_xlat11;
    let x_4300 : vec3<f32> = (vec3<f32>(x_4296, x_4296, x_4296) * vec3<f32>(x_4298.x, x_4298.y, x_4298.z));
    let x_4301 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4300.x, x_4300.y, x_4300.z, x_4301.w);
    let x_4303 : vec4<f32> = u_xlat3;
    let x_4305 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4303.x, x_4303.y, x_4303.z), vec3<f32>(x_4305.x, x_4305.y, x_4305.z));
    let x_4308 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4308, 0.0f, 1.0f);
    let x_4310 : f32 = u_xlat68;
    let x_4311 : f32 = u_xlat69;
    u_xlat68 = (x_4310 * x_4311);
    let x_4313 : f32 = u_xlat68;
    let x_4315 : vec4<f32> = u_xlat11;
    let x_4317 : vec3<f32> = (vec3<f32>(x_4313, x_4313, x_4313) * vec3<f32>(x_4315.x, x_4315.y, x_4315.z));
    let x_4318 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4317.x, x_4317.y, x_4317.z, x_4318.w);
    let x_4320 : vec3<f32> = u_xlat30;
    let x_4321 : f32 = u_xlat70;
    let x_4324 : vec3<f32> = u_xlat1;
    u_xlat30 = ((x_4320 * vec3<f32>(x_4321, x_4321, x_4321)) + x_4324);
    let x_4326 : vec3<f32> = u_xlat30;
    let x_4327 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(x_4326, x_4327);
    let x_4329 : f32 = u_xlat68;
    u_xlat68 = max(x_4329, 1.17549435e-37f);
    let x_4331 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4331);
    let x_4333 : f32 = u_xlat68;
    let x_4335 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_4333, x_4333, x_4333) * x_4335);
    let x_4337 : vec4<f32> = u_xlat3;
    let x_4339 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(vec3<f32>(x_4337.x, x_4337.y, x_4337.z), x_4339);
    let x_4341 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4341, 0.0f, 1.0f);
    let x_4343 : vec4<f32> = u_xlat10;
    let x_4345 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(vec3<f32>(x_4343.x, x_4343.y, x_4343.z), x_4345);
    let x_4347 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4347, 0.0f, 1.0f);
    let x_4349 : f32 = u_xlat68;
    let x_4350 : f32 = u_xlat68;
    u_xlat68 = (x_4349 * x_4350);
    let x_4352 : f32 = u_xlat68;
    let x_4354 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4352 * x_4354) + 1.000010014f);
    let x_4357 : f32 = u_xlat69;
    let x_4358 : f32 = u_xlat69;
    u_xlat69 = (x_4357 * x_4358);
    let x_4360 : f32 = u_xlat68;
    let x_4361 : f32 = u_xlat68;
    u_xlat68 = (x_4360 * x_4361);
    let x_4363 : f32 = u_xlat69;
    u_xlat69 = max(x_4363, 0.100000001f);
    let x_4365 : f32 = u_xlat68;
    let x_4366 : f32 = u_xlat69;
    u_xlat68 = (x_4365 * x_4366);
    let x_4368 : f32 = u_xlat27;
    let x_4369 : f32 = u_xlat68;
    u_xlat68 = (x_4368 * x_4369);
    let x_4371 : f32 = u_xlat67;
    let x_4372 : f32 = u_xlat68;
    u_xlat68 = (x_4371 / x_4372);
    let x_4374 : f32 = u_xlat68;
    let x_4377 : vec3<f32> = u_xlat4;
    u_xlat30 = ((vec3<f32>(x_4374, x_4374, x_4374) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4377);
    let x_4379 : vec3<f32> = u_xlat30;
    let x_4380 : vec4<f32> = u_xlat11;
    let x_4383 : vec4<f32> = u_xlat8;
    let x_4385 : vec3<f32> = ((x_4379 * vec3<f32>(x_4380.x, x_4380.y, x_4380.z)) + vec3<f32>(x_4383.x, x_4383.y, x_4383.z));
    let x_4386 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4385.x, x_4385.y, x_4385.z, x_4386.w);

    continuing {
      let x_4388 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4388 + bitcast<u32>(1i));
    }
  }
  let x_4390 : vec4<f32> = u_xlat5;
  let x_4392 : vec4<f32> = u_xlat6;
  let x_4395 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec3<f32>(x_4390.x, x_4390.y, x_4390.z) * vec3<f32>(x_4392.x, x_4392.x, x_4392.x)) + vec3<f32>(x_4395.x, x_4395.y, x_4395.z));
  let x_4398 : vec4<f32> = u_xlat8;
  let x_4400 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_4398.x, x_4398.y, x_4398.z) + x_4400);
  let x_4402 : vec4<f32> = vs_INTERP4;
  let x_4404 : vec3<f32> = u_xlat0;
  let x_4406 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_4402.w, x_4402.w, x_4402.w) * x_4404) + x_4406);
  let x_4409 : f32 = u_xlat23.x;
  let x_4411 : f32 = u_xlat23.x;
  u_xlat63 = (x_4409 * -(x_4411));
  let x_4414 : f32 = u_xlat63;
  u_xlat63 = exp2(x_4414);
  let x_4416 : vec3<f32> = u_xlat0;
  let x_4419 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_4416 + -(vec3<f32>(x_4419.x, x_4419.y, x_4419.z)));
  let x_4425 : f32 = u_xlat63;
  let x_4427 : vec3<f32> = u_xlat0;
  let x_4430 : vec4<f32> = x_90.unity_FogColor;
  let x_4432 : vec3<f32> = ((vec3<f32>(x_4425, x_4425, x_4425) * x_4427) + vec3<f32>(x_4430.x, x_4430.y, x_4430.z));
  let x_4433 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4432.x, x_4432.y, x_4432.z, x_4433.w);
  let x_4435 : bool = u_xlatb2;
  let x_4436 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_4436, x_4435);
  let x_4443 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_4445 : f32 = x_145.unity_RenderingLayer.x;
  u_xlatu0 = (x_4443 & bitcast<u32>(x_4445));
  let x_4448 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4448);
  let x_4453 : f32 = u_xlat0.x;
  let x_4455 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4453 * x_4455);
  let x_4459 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4459, 0.0f, 1.0f);
  let x_4463 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4463.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

