struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3575 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1838 : f32;
  var x_1851 : f32;
  var x_1863 : f32;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : bool;
  var u_xlat54 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati3 : i32;
  var u_xlat71 : f32;
  var x_3819 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1818 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1818 == 0.0f);
  let x_1821 : vec3<f32> = vs_INTERP0;
  let x_1825 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1821) + x_1825);
  let x_1827 : vec3<f32> = u_xlat27;
  let x_1828 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1827, x_1828);
  let x_1830 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1830);
  let x_1832 : f32 = u_xlat67;
  let x_1834 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1832, x_1832, x_1832) * x_1834);
  let x_1837 : bool = u_xlatb23.x;
  if (x_1837) {
    let x_1842 : f32 = u_xlat27.x;
    x_1838 = x_1842;
  } else {
    let x_1846 : f32 = x_66.unity_MatrixV[0i].z;
    x_1838 = x_1846;
  }
  let x_1847 : f32 = x_1838;
  u_xlat6.x = x_1847;
  let x_1850 : bool = u_xlatb23.x;
  if (x_1850) {
    let x_1855 : f32 = u_xlat27.y;
    x_1851 = x_1855;
  } else {
    let x_1858 : f32 = x_66.unity_MatrixV[1i].z;
    x_1851 = x_1858;
  }
  let x_1859 : f32 = x_1851;
  u_xlat6.y = x_1859;
  let x_1862 : bool = u_xlatb23.x;
  if (x_1862) {
    let x_1867 : f32 = u_xlat27.z;
    x_1863 = x_1867;
  } else {
    let x_1870 : f32 = x_66.unity_MatrixV[2i].z;
    x_1863 = x_1870;
  }
  let x_1871 : f32 = x_1863;
  u_xlat6.z = x_1871;
  let x_1880 : vec2<f32> = vs_INTERP5;
  let x_1882 : f32 = x_66.x_GlobalMipBias.x;
  let x_1883 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1880, x_1882);
  u_xlat27 = vec3<f32>(x_1883.x, x_1883.y, x_1883.z);
  let x_1886 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1887 : vec2<f32> = vec2<f32>(x_1886.x, x_1886.y);
  let x_1891 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1887.x, x_1887.y));
  let x_1892 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1891.x, x_1892.y, x_1891.y);
  let x_1894 : vec3<f32> = u_xlat23;
  let x_1896 : vec4<f32> = hlslcc_FragCoord;
  let x_1898 : vec2<f32> = (vec2<f32>(x_1894.x, x_1894.z) * vec2<f32>(x_1896.x, x_1896.y));
  let x_1899 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1898.x, x_1898.y, x_1899.z, x_1899.w);
  let x_1902 : f32 = u_xlat7.y;
  let x_1904 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1907 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1902 * x_1904) + x_1907);
  let x_1911 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1911) + 1.0f);
  let x_1916 : f32 = u_xlat3.x;
  u_xlat3.x = x_1916;
  let x_1919 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1919, 0.0f, 1.0f);
  let x_1923 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1923, 1.0f);
  let x_1926 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1926 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1931 : f32 = u_xlat3.x;
  u_xlat23.x = (-(x_1931) + 1.0f);
  let x_1936 : f32 = u_xlat23.x;
  let x_1938 : f32 = u_xlat23.x;
  u_xlat67 = (x_1936 * x_1938);
  let x_1940 : f32 = u_xlat67;
  u_xlat67 = max(x_1940, 0.0078125f);
  let x_1943 : f32 = u_xlat67;
  let x_1944 : f32 = u_xlat67;
  u_xlat68 = (x_1943 * x_1944);
  let x_1947 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1947 + 0.040000021f);
  let x_1952 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1952, 1.0f);
  let x_1956 : f32 = u_xlat67;
  u_xlat72 = ((x_1956 * 4.0f) + 2.0f);
  let x_1964 : vec4<f32> = u_xlat7;
  let x_1967 : f32 = x_66.x_GlobalMipBias.x;
  let x_1968 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1964.x, x_1964.z), x_1967);
  u_xlat7.x = x_1968.x;
  let x_1972 : f32 = u_xlat7.x;
  u_xlat29.x = (x_1972 + -1.0f);
  let x_1976 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1978 : f32 = u_xlat29.x;
  u_xlat29.x = ((x_1976 * x_1978) + 1.0f);
  let x_1983 : f32 = u_xlat7.x;
  let x_1985 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_1983, x_1985);
  let x_1988 : bool = u_xlatb66;
  if (x_1988) {
    let x_1992 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_1992 == 1.0f);
    let x_1994 : bool = u_xlatb66;
    if (x_1994) {
      let x_1997 : vec4<f32> = u_xlat4;
      let x_2000 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_1997.x, x_1997.y, x_1997.x, x_1997.y) + x_2000);
      let x_2003 : vec4<f32> = u_xlat8;
      let x_2004 : vec2<f32> = vec2<f32>(x_2003.x, x_2003.y);
      let x_2006 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2004.x, x_2004.y, x_2006);
      let x_2013 : vec3<f32> = txVec30;
      let x_2015 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2013.xy, x_2013.z);
      u_xlat9.x = x_2015;
      let x_2018 : vec4<f32> = u_xlat8;
      let x_2019 : vec2<f32> = vec2<f32>(x_2018.z, x_2018.w);
      let x_2021 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2019.x, x_2019.y, x_2021);
      let x_2028 : vec3<f32> = txVec31;
      let x_2030 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2028.xy, x_2028.z);
      u_xlat9.y = x_2030;
      let x_2032 : vec4<f32> = u_xlat4;
      let x_2035 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2032.x, x_2032.y, x_2032.x, x_2032.y) + x_2035);
      let x_2038 : vec4<f32> = u_xlat8;
      let x_2039 : vec2<f32> = vec2<f32>(x_2038.x, x_2038.y);
      let x_2041 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2039.x, x_2039.y, x_2041);
      let x_2048 : vec3<f32> = txVec32;
      let x_2050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2048.xy, x_2048.z);
      u_xlat9.z = x_2050;
      let x_2053 : vec4<f32> = u_xlat8;
      let x_2054 : vec2<f32> = vec2<f32>(x_2053.z, x_2053.w);
      let x_2056 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2054.x, x_2054.y, x_2056);
      let x_2063 : vec3<f32> = txVec33;
      let x_2065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2063.xy, x_2063.z);
      u_xlat9.w = x_2065;
      let x_2067 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2067, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2072 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb51 = (x_2072 == 2.0f);
      let x_2074 : bool = u_xlatb51;
      if (x_2074) {
        let x_2077 : vec4<f32> = u_xlat4;
        let x_2080 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2077.x, x_2077.y) * vec2<f32>(x_2080.z, x_2080.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2084 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2084);
        let x_2086 : vec4<f32> = u_xlat4;
        let x_2089 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2092 : vec2<f32> = u_xlat51;
        let x_2094 : vec2<f32> = ((vec2<f32>(x_2086.x, x_2086.y) * vec2<f32>(x_2089.z, x_2089.w)) + -(x_2092));
        let x_2095 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2094.x, x_2094.y, x_2095.z, x_2095.w);
        let x_2097 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2097.x, x_2097.x, x_2097.y, x_2097.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2100 : vec4<f32> = u_xlat9;
        let x_2102 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2100.x, x_2100.x, x_2100.z, x_2100.z) * vec4<f32>(x_2102.x, x_2102.x, x_2102.z, x_2102.z));
        let x_2105 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2105.y, x_2105.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2108 : vec4<f32> = u_xlat10;
        let x_2111 : vec4<f32> = u_xlat8;
        let x_2114 : vec2<f32> = ((vec2<f32>(x_2108.x, x_2108.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2111.x, x_2111.y)));
        let x_2115 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2114.x, x_2115.y, x_2114.y, x_2115.w);
        let x_2117 : vec4<f32> = u_xlat8;
        let x_2120 : vec2<f32> = (-(vec2<f32>(x_2117.x, x_2117.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2121 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2120.x, x_2120.y, x_2121.z, x_2121.w);
        let x_2124 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2124.x, x_2124.y), vec2<f32>(0.0f, 0.0f));
        let x_2127 : vec2<f32> = u_xlat54;
        let x_2129 : vec2<f32> = u_xlat54;
        let x_2131 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2127) * x_2129) + vec2<f32>(x_2131.x, x_2131.y));
        let x_2134 : vec4<f32> = u_xlat8;
        let x_2136 : vec2<f32> = max(vec2<f32>(x_2134.x, x_2134.y), vec2<f32>(0.0f, 0.0f));
        let x_2137 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2136.x, x_2136.y, x_2137.z, x_2137.w);
        let x_2139 : vec4<f32> = u_xlat8;
        let x_2142 : vec4<f32> = u_xlat8;
        let x_2145 : vec4<f32> = u_xlat9;
        let x_2147 : vec2<f32> = ((-(vec2<f32>(x_2139.x, x_2139.y)) * vec2<f32>(x_2142.x, x_2142.y)) + vec2<f32>(x_2145.y, x_2145.w));
        let x_2148 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2147.x, x_2147.y, x_2148.z, x_2148.w);
        let x_2150 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2150 + vec2<f32>(1.0f, 1.0f));
        let x_2152 : vec4<f32> = u_xlat8;
        let x_2154 : vec2<f32> = (vec2<f32>(x_2152.x, x_2152.y) + vec2<f32>(1.0f, 1.0f));
        let x_2155 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2154.x, x_2154.y, x_2155.z, x_2155.w);
        let x_2157 : vec4<f32> = u_xlat9;
        let x_2159 : vec2<f32> = (vec2<f32>(x_2157.x, x_2157.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2160 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2159.x, x_2159.y, x_2160.z, x_2160.w);
        let x_2162 : vec4<f32> = u_xlat10;
        let x_2164 : vec2<f32> = (vec2<f32>(x_2162.x, x_2162.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2165 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2164.x, x_2164.y, x_2165.z, x_2165.w);
        let x_2167 : vec2<f32> = u_xlat54;
        let x_2168 : vec2<f32> = (x_2167 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2169 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2168.x, x_2168.y, x_2169.z, x_2169.w);
        let x_2171 : vec4<f32> = u_xlat8;
        let x_2173 : vec2<f32> = (vec2<f32>(x_2171.x, x_2171.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2174 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2173.x, x_2173.y, x_2174.z, x_2174.w);
        let x_2176 : vec4<f32> = u_xlat9;
        let x_2178 : vec2<f32> = (vec2<f32>(x_2176.y, x_2176.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2179 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2178.x, x_2178.y, x_2179.z, x_2179.w);
        let x_2182 : f32 = u_xlat10.x;
        u_xlat11.z = x_2182;
        let x_2185 : f32 = u_xlat8.x;
        u_xlat11.w = x_2185;
        let x_2188 : f32 = u_xlat13.x;
        u_xlat12.z = x_2188;
        let x_2191 : f32 = u_xlat52.x;
        u_xlat12.w = x_2191;
        let x_2193 : vec4<f32> = u_xlat11;
        let x_2195 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2193.z, x_2193.w, x_2193.x, x_2193.z) + vec4<f32>(x_2195.z, x_2195.w, x_2195.x, x_2195.z));
        let x_2199 : f32 = u_xlat11.y;
        u_xlat10.z = x_2199;
        let x_2202 : f32 = u_xlat8.y;
        u_xlat10.w = x_2202;
        let x_2205 : f32 = u_xlat12.y;
        u_xlat13.z = x_2205;
        let x_2208 : f32 = u_xlat52.y;
        u_xlat13.w = x_2208;
        let x_2210 : vec4<f32> = u_xlat10;
        let x_2212 : vec4<f32> = u_xlat13;
        let x_2214 : vec3<f32> = (vec3<f32>(x_2210.z, x_2210.y, x_2210.w) + vec3<f32>(x_2212.z, x_2212.y, x_2212.w));
        let x_2215 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2214.x, x_2214.y, x_2214.z, x_2215.w);
        let x_2217 : vec4<f32> = u_xlat12;
        let x_2219 : vec4<f32> = u_xlat9;
        let x_2221 : vec3<f32> = (vec3<f32>(x_2217.x, x_2217.z, x_2217.w) / vec3<f32>(x_2219.z, x_2219.w, x_2219.y));
        let x_2222 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2221.x, x_2221.y, x_2221.z, x_2222.w);
        let x_2224 : vec4<f32> = u_xlat10;
        let x_2226 : vec3<f32> = (vec3<f32>(x_2224.x, x_2224.y, x_2224.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2227 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2226.x, x_2226.y, x_2226.z, x_2227.w);
        let x_2229 : vec4<f32> = u_xlat13;
        let x_2231 : vec4<f32> = u_xlat8;
        let x_2233 : vec3<f32> = (vec3<f32>(x_2229.z, x_2229.y, x_2229.w) / vec3<f32>(x_2231.x, x_2231.y, x_2231.z));
        let x_2234 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2233.x, x_2233.y, x_2233.z, x_2234.w);
        let x_2236 : vec4<f32> = u_xlat11;
        let x_2238 : vec3<f32> = (vec3<f32>(x_2236.x, x_2236.y, x_2236.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2239 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2238.x, x_2238.y, x_2238.z, x_2239.w);
        let x_2241 : vec4<f32> = u_xlat10;
        let x_2244 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2246 : vec3<f32> = (vec3<f32>(x_2241.y, x_2241.x, x_2241.z) * vec3<f32>(x_2244.x, x_2244.x, x_2244.x));
        let x_2247 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2246.x, x_2246.y, x_2246.z, x_2247.w);
        let x_2249 : vec4<f32> = u_xlat11;
        let x_2252 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2254 : vec3<f32> = (vec3<f32>(x_2249.x, x_2249.y, x_2249.z) * vec3<f32>(x_2252.y, x_2252.y, x_2252.y));
        let x_2255 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2254.x, x_2254.y, x_2254.z, x_2255.w);
        let x_2258 : f32 = u_xlat11.x;
        u_xlat10.w = x_2258;
        let x_2260 : vec2<f32> = u_xlat51;
        let x_2263 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2266 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2260.x, x_2260.y, x_2260.x, x_2260.y) * vec4<f32>(x_2263.x, x_2263.y, x_2263.x, x_2263.y)) + vec4<f32>(x_2266.y, x_2266.w, x_2266.x, x_2266.w));
        let x_2269 : vec2<f32> = u_xlat51;
        let x_2271 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2274 : vec4<f32> = u_xlat10;
        let x_2276 : vec2<f32> = ((x_2269 * vec2<f32>(x_2271.x, x_2271.y)) + vec2<f32>(x_2274.z, x_2274.w));
        let x_2277 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2276.x, x_2276.y, x_2277.z, x_2277.w);
        let x_2280 : f32 = u_xlat10.y;
        u_xlat11.w = x_2280;
        let x_2282 : vec4<f32> = u_xlat11;
        let x_2283 : vec2<f32> = vec2<f32>(x_2282.y, x_2282.z);
        let x_2284 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2284.x, x_2283.x, x_2284.z, x_2283.y);
        let x_2286 : vec2<f32> = u_xlat51;
        let x_2289 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2292 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2286.x, x_2286.y, x_2286.x, x_2286.y) * vec4<f32>(x_2289.x, x_2289.y, x_2289.x, x_2289.y)) + vec4<f32>(x_2292.x, x_2292.y, x_2292.z, x_2292.y));
        let x_2295 : vec2<f32> = u_xlat51;
        let x_2298 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2301 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2295.x, x_2295.y, x_2295.x, x_2295.y) * vec4<f32>(x_2298.x, x_2298.y, x_2298.x, x_2298.y)) + vec4<f32>(x_2301.w, x_2301.y, x_2301.w, x_2301.z));
        let x_2304 : vec2<f32> = u_xlat51;
        let x_2307 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2310 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2304.x, x_2304.y, x_2304.x, x_2304.y) * vec4<f32>(x_2307.x, x_2307.y, x_2307.x, x_2307.y)) + vec4<f32>(x_2310.x, x_2310.w, x_2310.z, x_2310.w));
        let x_2313 : vec4<f32> = u_xlat8;
        let x_2315 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2313.x, x_2313.x, x_2313.x, x_2313.y) * vec4<f32>(x_2315.z, x_2315.w, x_2315.y, x_2315.z));
        let x_2318 : vec4<f32> = u_xlat8;
        let x_2320 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2318.y, x_2318.y, x_2318.z, x_2318.z) * x_2320);
        let x_2323 : f32 = u_xlat8.z;
        let x_2325 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2323 * x_2325);
        let x_2329 : vec4<f32> = u_xlat12;
        let x_2330 : vec2<f32> = vec2<f32>(x_2329.x, x_2329.y);
        let x_2332 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2330.x, x_2330.y, x_2332);
        let x_2340 : vec3<f32> = txVec34;
        let x_2342 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2340.xy, x_2340.z);
        u_xlat73 = x_2342;
        let x_2344 : vec4<f32> = u_xlat12;
        let x_2345 : vec2<f32> = vec2<f32>(x_2344.z, x_2344.w);
        let x_2347 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2345.x, x_2345.y, x_2347);
        let x_2354 : vec3<f32> = txVec35;
        let x_2356 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2354.xy, x_2354.z);
        u_xlat8.x = x_2356;
        let x_2359 : f32 = u_xlat8.x;
        let x_2361 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2359 * x_2361);
        let x_2365 : f32 = u_xlat15.x;
        let x_2366 : f32 = u_xlat73;
        let x_2369 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2365 * x_2366) + x_2369);
        let x_2372 : vec4<f32> = u_xlat13;
        let x_2373 : vec2<f32> = vec2<f32>(x_2372.x, x_2372.y);
        let x_2375 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2373.x, x_2373.y, x_2375);
        let x_2382 : vec3<f32> = txVec36;
        let x_2384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2382.xy, x_2382.z);
        u_xlat8.x = x_2384;
        let x_2387 : f32 = u_xlat15.z;
        let x_2389 : f32 = u_xlat8.x;
        let x_2391 : f32 = u_xlat73;
        u_xlat73 = ((x_2387 * x_2389) + x_2391);
        let x_2394 : vec4<f32> = u_xlat11;
        let x_2395 : vec2<f32> = vec2<f32>(x_2394.x, x_2394.y);
        let x_2397 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2395.x, x_2395.y, x_2397);
        let x_2404 : vec3<f32> = txVec37;
        let x_2406 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2404.xy, x_2404.z);
        u_xlat8.x = x_2406;
        let x_2409 : f32 = u_xlat15.w;
        let x_2411 : f32 = u_xlat8.x;
        let x_2413 : f32 = u_xlat73;
        u_xlat73 = ((x_2409 * x_2411) + x_2413);
        let x_2416 : vec4<f32> = u_xlat14;
        let x_2417 : vec2<f32> = vec2<f32>(x_2416.x, x_2416.y);
        let x_2419 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2417.x, x_2417.y, x_2419);
        let x_2426 : vec3<f32> = txVec38;
        let x_2428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2426.xy, x_2426.z);
        u_xlat8.x = x_2428;
        let x_2431 : f32 = u_xlat16.x;
        let x_2433 : f32 = u_xlat8.x;
        let x_2435 : f32 = u_xlat73;
        u_xlat73 = ((x_2431 * x_2433) + x_2435);
        let x_2438 : vec4<f32> = u_xlat14;
        let x_2439 : vec2<f32> = vec2<f32>(x_2438.z, x_2438.w);
        let x_2441 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2439.x, x_2439.y, x_2441);
        let x_2448 : vec3<f32> = txVec39;
        let x_2450 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2448.xy, x_2448.z);
        u_xlat8.x = x_2450;
        let x_2453 : f32 = u_xlat16.y;
        let x_2455 : f32 = u_xlat8.x;
        let x_2457 : f32 = u_xlat73;
        u_xlat73 = ((x_2453 * x_2455) + x_2457);
        let x_2460 : vec4<f32> = u_xlat11;
        let x_2461 : vec2<f32> = vec2<f32>(x_2460.z, x_2460.w);
        let x_2463 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2461.x, x_2461.y, x_2463);
        let x_2470 : vec3<f32> = txVec40;
        let x_2472 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2470.xy, x_2470.z);
        u_xlat8.x = x_2472;
        let x_2475 : f32 = u_xlat16.z;
        let x_2477 : f32 = u_xlat8.x;
        let x_2479 : f32 = u_xlat73;
        u_xlat73 = ((x_2475 * x_2477) + x_2479);
        let x_2482 : vec4<f32> = u_xlat10;
        let x_2483 : vec2<f32> = vec2<f32>(x_2482.x, x_2482.y);
        let x_2485 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2483.x, x_2483.y, x_2485);
        let x_2492 : vec3<f32> = txVec41;
        let x_2494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2492.xy, x_2492.z);
        u_xlat8.x = x_2494;
        let x_2497 : f32 = u_xlat16.w;
        let x_2499 : f32 = u_xlat8.x;
        let x_2501 : f32 = u_xlat73;
        u_xlat73 = ((x_2497 * x_2499) + x_2501);
        let x_2504 : vec4<f32> = u_xlat10;
        let x_2505 : vec2<f32> = vec2<f32>(x_2504.z, x_2504.w);
        let x_2507 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2505.x, x_2505.y, x_2507);
        let x_2514 : vec3<f32> = txVec42;
        let x_2516 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2514.xy, x_2514.z);
        u_xlat8.x = x_2516;
        let x_2519 : f32 = u_xlat51.x;
        let x_2521 : f32 = u_xlat8.x;
        let x_2523 : f32 = u_xlat73;
        u_xlat66 = ((x_2519 * x_2521) + x_2523);
      } else {
        let x_2526 : vec4<f32> = u_xlat4;
        let x_2529 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2526.x, x_2526.y) * vec2<f32>(x_2529.z, x_2529.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2533 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2533);
        let x_2535 : vec4<f32> = u_xlat4;
        let x_2538 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2541 : vec2<f32> = u_xlat51;
        let x_2543 : vec2<f32> = ((vec2<f32>(x_2535.x, x_2535.y) * vec2<f32>(x_2538.z, x_2538.w)) + -(x_2541));
        let x_2544 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2543.x, x_2543.y, x_2544.z, x_2544.w);
        let x_2546 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2546.x, x_2546.x, x_2546.y, x_2546.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2549 : vec4<f32> = u_xlat9;
        let x_2551 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2549.x, x_2549.x, x_2549.z, x_2549.z) * vec4<f32>(x_2551.x, x_2551.x, x_2551.z, x_2551.z));
        let x_2554 : vec4<f32> = u_xlat10;
        let x_2556 : vec2<f32> = (vec2<f32>(x_2554.y, x_2554.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2557 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2557.x, x_2556.x, x_2557.z, x_2556.y);
        let x_2559 : vec4<f32> = u_xlat10;
        let x_2562 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2559.x, x_2559.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2562.x, x_2562.y)));
        let x_2566 : vec4<f32> = u_xlat8;
        let x_2569 : vec2<f32> = (-(vec2<f32>(x_2566.x, x_2566.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2570 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2569.x, x_2570.y, x_2569.y, x_2570.w);
        let x_2572 : vec4<f32> = u_xlat8;
        let x_2574 : vec2<f32> = min(vec2<f32>(x_2572.x, x_2572.y), vec2<f32>(0.0f, 0.0f));
        let x_2575 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2574.x, x_2574.y, x_2575.z, x_2575.w);
        let x_2577 : vec4<f32> = u_xlat10;
        let x_2580 : vec4<f32> = u_xlat10;
        let x_2583 : vec4<f32> = u_xlat9;
        let x_2585 : vec2<f32> = ((-(vec2<f32>(x_2577.x, x_2577.y)) * vec2<f32>(x_2580.x, x_2580.y)) + vec2<f32>(x_2583.x, x_2583.z));
        let x_2586 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2585.x, x_2586.y, x_2585.y, x_2586.w);
        let x_2588 : vec4<f32> = u_xlat8;
        let x_2590 : vec2<f32> = max(vec2<f32>(x_2588.x, x_2588.y), vec2<f32>(0.0f, 0.0f));
        let x_2591 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2590.x, x_2590.y, x_2591.z, x_2591.w);
        let x_2593 : vec4<f32> = u_xlat10;
        let x_2596 : vec4<f32> = u_xlat10;
        let x_2599 : vec4<f32> = u_xlat9;
        let x_2601 : vec2<f32> = ((-(vec2<f32>(x_2593.x, x_2593.y)) * vec2<f32>(x_2596.x, x_2596.y)) + vec2<f32>(x_2599.y, x_2599.w));
        let x_2602 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2602.x, x_2601.x, x_2602.z, x_2601.y);
        let x_2604 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2604 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2607 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2607 * 0.081632003f);
        let x_2610 : vec2<f32> = u_xlat52;
        let x_2612 : vec2<f32> = (vec2<f32>(x_2610.y, x_2610.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2613 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2612.x, x_2612.y, x_2613.z, x_2613.w);
        let x_2615 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2615.x, x_2615.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2619 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2619 * 0.081632003f);
        let x_2623 : f32 = u_xlat12.y;
        u_xlat10.x = x_2623;
        let x_2625 : vec4<f32> = u_xlat8;
        let x_2628 : vec2<f32> = ((vec2<f32>(x_2625.x, x_2625.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2629.x, x_2628.x, x_2629.z, x_2628.y);
        let x_2631 : vec4<f32> = u_xlat8;
        let x_2634 : vec2<f32> = ((vec2<f32>(x_2631.x, x_2631.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2634.x, x_2635.y, x_2634.y, x_2635.w);
        let x_2638 : f32 = u_xlat52.x;
        u_xlat9.y = x_2638;
        let x_2641 : f32 = u_xlat11.y;
        u_xlat9.w = x_2641;
        let x_2643 : vec4<f32> = u_xlat9;
        let x_2644 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2643 + x_2644);
        let x_2646 : vec4<f32> = u_xlat8;
        let x_2649 : vec2<f32> = ((vec2<f32>(x_2646.y, x_2646.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2650 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2650.x, x_2649.x, x_2650.z, x_2649.y);
        let x_2652 : vec4<f32> = u_xlat8;
        let x_2655 : vec2<f32> = ((vec2<f32>(x_2652.y, x_2652.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2656 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2655.x, x_2656.y, x_2655.y, x_2656.w);
        let x_2659 : f32 = u_xlat52.y;
        u_xlat11.y = x_2659;
        let x_2661 : vec4<f32> = u_xlat11;
        let x_2662 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2661 + x_2662);
        let x_2664 : vec4<f32> = u_xlat9;
        let x_2665 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2664 / x_2665);
        let x_2667 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2667 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2669 : vec4<f32> = u_xlat11;
        let x_2670 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2669 / x_2670);
        let x_2672 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2672 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2674 : vec4<f32> = u_xlat9;
        let x_2677 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2674.w, x_2674.x, x_2674.y, x_2674.z) * vec4<f32>(x_2677.x, x_2677.x, x_2677.x, x_2677.x));
        let x_2680 : vec4<f32> = u_xlat11;
        let x_2683 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2680.x, x_2680.w, x_2680.y, x_2680.z) * vec4<f32>(x_2683.y, x_2683.y, x_2683.y, x_2683.y));
        let x_2686 : vec4<f32> = u_xlat9;
        let x_2687 : vec3<f32> = vec3<f32>(x_2686.y, x_2686.z, x_2686.w);
        let x_2688 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2687.x, x_2688.y, x_2687.y, x_2687.z);
        let x_2691 : f32 = u_xlat11.x;
        u_xlat12.y = x_2691;
        let x_2693 : vec2<f32> = u_xlat51;
        let x_2696 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2699 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2693.x, x_2693.y, x_2693.x, x_2693.y) * vec4<f32>(x_2696.x, x_2696.y, x_2696.x, x_2696.y)) + vec4<f32>(x_2699.x, x_2699.y, x_2699.z, x_2699.y));
        let x_2702 : vec2<f32> = u_xlat51;
        let x_2704 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2707 : vec4<f32> = u_xlat12;
        let x_2709 : vec2<f32> = ((x_2702 * vec2<f32>(x_2704.x, x_2704.y)) + vec2<f32>(x_2707.w, x_2707.y));
        let x_2710 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2709.x, x_2709.y, x_2710.z, x_2710.w);
        let x_2713 : f32 = u_xlat12.y;
        u_xlat9.y = x_2713;
        let x_2716 : f32 = u_xlat11.z;
        u_xlat12.y = x_2716;
        let x_2718 : vec2<f32> = u_xlat51;
        let x_2721 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2724 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2718.x, x_2718.y, x_2718.x, x_2718.y) * vec4<f32>(x_2721.x, x_2721.y, x_2721.x, x_2721.y)) + vec4<f32>(x_2724.x, x_2724.y, x_2724.z, x_2724.y));
        let x_2728 : vec2<f32> = u_xlat51;
        let x_2730 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2733 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2728 * vec2<f32>(x_2730.x, x_2730.y)) + vec2<f32>(x_2733.w, x_2733.y));
        let x_2737 : f32 = u_xlat12.y;
        u_xlat9.z = x_2737;
        let x_2739 : vec2<f32> = u_xlat51;
        let x_2742 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2745 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2739.x, x_2739.y, x_2739.x, x_2739.y) * vec4<f32>(x_2742.x, x_2742.y, x_2742.x, x_2742.y)) + vec4<f32>(x_2745.x, x_2745.y, x_2745.x, x_2745.z));
        let x_2749 : f32 = u_xlat11.w;
        u_xlat12.y = x_2749;
        let x_2751 : vec2<f32> = u_xlat51;
        let x_2754 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2757 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2751.x, x_2751.y, x_2751.x, x_2751.y) * vec4<f32>(x_2754.x, x_2754.y, x_2754.x, x_2754.y)) + vec4<f32>(x_2757.x, x_2757.y, x_2757.z, x_2757.y));
        let x_2761 : vec2<f32> = u_xlat51;
        let x_2763 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2766 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2761 * vec2<f32>(x_2763.x, x_2763.y)) + vec2<f32>(x_2766.w, x_2766.y));
        let x_2770 : f32 = u_xlat12.y;
        u_xlat9.w = x_2770;
        let x_2772 : vec2<f32> = u_xlat51;
        let x_2774 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2777 : vec4<f32> = u_xlat9;
        let x_2779 : vec2<f32> = ((x_2772 * vec2<f32>(x_2774.x, x_2774.y)) + vec2<f32>(x_2777.x, x_2777.w));
        let x_2780 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2779.x, x_2779.y, x_2780.z, x_2780.w);
        let x_2782 : vec4<f32> = u_xlat12;
        let x_2783 : vec3<f32> = vec3<f32>(x_2782.x, x_2782.z, x_2782.w);
        let x_2784 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2783.x, x_2784.y, x_2783.y, x_2783.z);
        let x_2786 : vec2<f32> = u_xlat51;
        let x_2789 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2792 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2786.x, x_2786.y, x_2786.x, x_2786.y) * vec4<f32>(x_2789.x, x_2789.y, x_2789.x, x_2789.y)) + vec4<f32>(x_2792.x, x_2792.y, x_2792.z, x_2792.y));
        let x_2796 : vec2<f32> = u_xlat51;
        let x_2798 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2801 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2796 * vec2<f32>(x_2798.x, x_2798.y)) + vec2<f32>(x_2801.w, x_2801.y));
        let x_2805 : f32 = u_xlat9.x;
        u_xlat11.x = x_2805;
        let x_2807 : vec2<f32> = u_xlat51;
        let x_2809 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2812 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_2807 * vec2<f32>(x_2809.x, x_2809.y)) + vec2<f32>(x_2812.x, x_2812.y));
        let x_2816 : vec4<f32> = u_xlat8;
        let x_2818 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2816.x, x_2816.x, x_2816.x, x_2816.x) * x_2818);
        let x_2821 : vec4<f32> = u_xlat8;
        let x_2823 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2821.y, x_2821.y, x_2821.y, x_2821.y) * x_2823);
        let x_2826 : vec4<f32> = u_xlat8;
        let x_2828 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_2826.z, x_2826.z, x_2826.z, x_2826.z) * x_2828);
        let x_2830 : vec4<f32> = u_xlat8;
        let x_2832 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_2830.w, x_2830.w, x_2830.w, x_2830.w) * x_2832);
        let x_2835 : vec4<f32> = u_xlat13;
        let x_2836 : vec2<f32> = vec2<f32>(x_2835.x, x_2835.y);
        let x_2838 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2836.x, x_2836.y, x_2838);
        let x_2845 : vec3<f32> = txVec43;
        let x_2847 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2845.xy, x_2845.z);
        u_xlat9.x = x_2847;
        let x_2850 : vec4<f32> = u_xlat13;
        let x_2851 : vec2<f32> = vec2<f32>(x_2850.z, x_2850.w);
        let x_2853 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2851.x, x_2851.y, x_2853);
        let x_2861 : vec3<f32> = txVec44;
        let x_2863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2861.xy, x_2861.z);
        u_xlat75 = x_2863;
        let x_2864 : f32 = u_xlat75;
        let x_2866 : f32 = u_xlat19.y;
        u_xlat75 = (x_2864 * x_2866);
        let x_2869 : f32 = u_xlat19.x;
        let x_2871 : f32 = u_xlat9.x;
        let x_2873 : f32 = u_xlat75;
        u_xlat9.x = ((x_2869 * x_2871) + x_2873);
        let x_2877 : vec4<f32> = u_xlat14;
        let x_2878 : vec2<f32> = vec2<f32>(x_2877.x, x_2877.y);
        let x_2880 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2878.x, x_2878.y, x_2880);
        let x_2887 : vec3<f32> = txVec45;
        let x_2889 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2887.xy, x_2887.z);
        u_xlat75 = x_2889;
        let x_2891 : f32 = u_xlat19.z;
        let x_2892 : f32 = u_xlat75;
        let x_2895 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2891 * x_2892) + x_2895);
        let x_2899 : vec4<f32> = u_xlat16;
        let x_2900 : vec2<f32> = vec2<f32>(x_2899.x, x_2899.y);
        let x_2902 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2900.x, x_2900.y, x_2902);
        let x_2909 : vec3<f32> = txVec46;
        let x_2911 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2909.xy, x_2909.z);
        u_xlat75 = x_2911;
        let x_2913 : f32 = u_xlat19.w;
        let x_2914 : f32 = u_xlat75;
        let x_2917 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2913 * x_2914) + x_2917);
        let x_2921 : vec4<f32> = u_xlat15;
        let x_2922 : vec2<f32> = vec2<f32>(x_2921.x, x_2921.y);
        let x_2924 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2922.x, x_2922.y, x_2924);
        let x_2931 : vec3<f32> = txVec47;
        let x_2933 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2931.xy, x_2931.z);
        u_xlat75 = x_2933;
        let x_2935 : f32 = u_xlat20.x;
        let x_2936 : f32 = u_xlat75;
        let x_2939 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2935 * x_2936) + x_2939);
        let x_2943 : vec4<f32> = u_xlat15;
        let x_2944 : vec2<f32> = vec2<f32>(x_2943.z, x_2943.w);
        let x_2946 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2944.x, x_2944.y, x_2946);
        let x_2953 : vec3<f32> = txVec48;
        let x_2955 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2953.xy, x_2953.z);
        u_xlat75 = x_2955;
        let x_2957 : f32 = u_xlat20.y;
        let x_2958 : f32 = u_xlat75;
        let x_2961 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2957 * x_2958) + x_2961);
        let x_2965 : vec2<f32> = u_xlat58;
        let x_2967 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_2965.x, x_2965.y, x_2967);
        let x_2974 : vec3<f32> = txVec49;
        let x_2976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2974.xy, x_2974.z);
        u_xlat75 = x_2976;
        let x_2978 : f32 = u_xlat20.z;
        let x_2979 : f32 = u_xlat75;
        let x_2982 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2978 * x_2979) + x_2982);
        let x_2986 : vec4<f32> = u_xlat16;
        let x_2987 : vec2<f32> = vec2<f32>(x_2986.z, x_2986.w);
        let x_2989 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_2987.x, x_2987.y, x_2989);
        let x_2996 : vec3<f32> = txVec50;
        let x_2998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2996.xy, x_2996.z);
        u_xlat75 = x_2998;
        let x_3000 : f32 = u_xlat20.w;
        let x_3001 : f32 = u_xlat75;
        let x_3004 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3000 * x_3001) + x_3004);
        let x_3008 : vec4<f32> = u_xlat17;
        let x_3009 : vec2<f32> = vec2<f32>(x_3008.x, x_3008.y);
        let x_3011 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3009.x, x_3009.y, x_3011);
        let x_3018 : vec3<f32> = txVec51;
        let x_3020 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3018.xy, x_3018.z);
        u_xlat75 = x_3020;
        let x_3022 : f32 = u_xlat21.x;
        let x_3023 : f32 = u_xlat75;
        let x_3026 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3022 * x_3023) + x_3026);
        let x_3030 : vec4<f32> = u_xlat17;
        let x_3031 : vec2<f32> = vec2<f32>(x_3030.z, x_3030.w);
        let x_3033 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3031.x, x_3031.y, x_3033);
        let x_3040 : vec3<f32> = txVec52;
        let x_3042 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3040.xy, x_3040.z);
        u_xlat75 = x_3042;
        let x_3044 : f32 = u_xlat21.y;
        let x_3045 : f32 = u_xlat75;
        let x_3048 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3044 * x_3045) + x_3048);
        let x_3052 : vec2<f32> = u_xlat31;
        let x_3054 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3052.x, x_3052.y, x_3054);
        let x_3061 : vec3<f32> = txVec53;
        let x_3063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3061.xy, x_3061.z);
        u_xlat31.x = x_3063;
        let x_3066 : f32 = u_xlat21.z;
        let x_3068 : f32 = u_xlat31.x;
        let x_3071 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3066 * x_3068) + x_3071);
        let x_3075 : vec4<f32> = u_xlat18;
        let x_3076 : vec2<f32> = vec2<f32>(x_3075.x, x_3075.y);
        let x_3078 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3076.x, x_3076.y, x_3078);
        let x_3085 : vec3<f32> = txVec54;
        let x_3087 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3085.xy, x_3085.z);
        u_xlat31.x = x_3087;
        let x_3090 : f32 = u_xlat21.w;
        let x_3092 : f32 = u_xlat31.x;
        let x_3095 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3090 * x_3092) + x_3095);
        let x_3099 : vec4<f32> = u_xlat12;
        let x_3100 : vec2<f32> = vec2<f32>(x_3099.x, x_3099.y);
        let x_3102 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3100.x, x_3100.y, x_3102);
        let x_3109 : vec3<f32> = txVec55;
        let x_3111 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3109.xy, x_3109.z);
        u_xlat31.x = x_3111;
        let x_3114 : f32 = u_xlat8.x;
        let x_3116 : f32 = u_xlat31.x;
        let x_3119 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3114 * x_3116) + x_3119);
        let x_3123 : vec4<f32> = u_xlat12;
        let x_3124 : vec2<f32> = vec2<f32>(x_3123.z, x_3123.w);
        let x_3126 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3124.x, x_3124.y, x_3126);
        let x_3133 : vec3<f32> = txVec56;
        let x_3135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3133.xy, x_3133.z);
        u_xlat9.x = x_3135;
        let x_3138 : f32 = u_xlat8.y;
        let x_3140 : f32 = u_xlat9.x;
        let x_3143 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3138 * x_3140) + x_3143);
        let x_3147 : vec2<f32> = u_xlat55;
        let x_3149 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3147.x, x_3147.y, x_3149);
        let x_3157 : vec3<f32> = txVec57;
        let x_3159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3157.xy, x_3157.z);
        u_xlat30 = x_3159;
        let x_3161 : f32 = u_xlat8.z;
        let x_3162 : f32 = u_xlat30;
        let x_3165 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3161 * x_3162) + x_3165);
        let x_3169 : vec2<f32> = u_xlat51;
        let x_3171 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3169.x, x_3169.y, x_3171);
        let x_3178 : vec3<f32> = txVec58;
        let x_3180 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3178.xy, x_3178.z);
        u_xlat51.x = x_3180;
        let x_3183 : f32 = u_xlat8.w;
        let x_3185 : f32 = u_xlat51.x;
        let x_3188 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3183 * x_3185) + x_3188);
      }
    }
  } else {
    let x_3192 : vec4<f32> = u_xlat4;
    let x_3193 : vec2<f32> = vec2<f32>(x_3192.x, x_3192.y);
    let x_3195 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3193.x, x_3193.y, x_3195);
    let x_3202 : vec3<f32> = txVec59;
    let x_3204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3202.xy, x_3202.z);
    u_xlat66 = x_3204;
  }
  let x_3205 : f32 = u_xlat66;
  let x_3207 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3209 : f32 = u_xlat70;
  u_xlat66 = ((x_3205 * x_3207) + x_3209);
  let x_3211 : bool = u_xlatb5;
  let x_3212 : f32 = u_xlat66;
  u_xlat66 = select(x_3212, 1.0f, x_3211);
  let x_3214 : vec3<f32> = vs_INTERP0;
  let x_3216 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3218 : vec3<f32> = (x_3214 + -(x_3216));
  let x_3219 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3218.x, x_3218.y, x_3218.z, x_3219.w);
  let x_3221 : vec4<f32> = u_xlat4;
  let x_3223 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3221.x, x_3221.y, x_3221.z), vec3<f32>(x_3223.x, x_3223.y, x_3223.z));
  let x_3228 : f32 = u_xlat4.x;
  let x_3230 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3233 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3228 * x_3230) + x_3233);
  let x_3237 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3237, 0.0f, 1.0f);
  let x_3241 : f32 = u_xlat66;
  u_xlat26 = (-(x_3241) + 1.0f);
  let x_3245 : f32 = u_xlat4.x;
  let x_3246 : f32 = u_xlat26;
  let x_3248 : f32 = u_xlat66;
  u_xlat66 = ((x_3245 * x_3246) + x_3248);
  let x_3250 : vec2<f32> = u_xlat29;
  let x_3253 : vec4<f32> = x_66.x_MainLightColor;
  let x_3255 : vec3<f32> = (vec3<f32>(x_3250.x, x_3250.x, x_3250.x) * vec3<f32>(x_3253.x, x_3253.y, x_3253.z));
  let x_3256 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3255.x, x_3255.y, x_3255.z, x_3256.w);
  let x_3258 : vec4<f32> = u_xlat6;
  let x_3261 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(vec3<f32>(x_3258.x, x_3258.y, x_3258.z)), x_3261);
  let x_3263 : f32 = u_xlat70;
  let x_3264 : f32 = u_xlat70;
  u_xlat70 = (x_3263 + x_3264);
  let x_3266 : vec3<f32> = u_xlat25;
  let x_3267 : f32 = u_xlat70;
  let x_3271 : vec4<f32> = u_xlat6;
  let x_3274 : vec3<f32> = ((x_3266 * -(vec3<f32>(x_3267, x_3267, x_3267))) + -(vec3<f32>(x_3271.x, x_3271.y, x_3271.z)));
  let x_3275 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3274.x, x_3274.y, x_3274.z, x_3275.w);
  let x_3277 : vec3<f32> = u_xlat25;
  let x_3278 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(x_3277, vec3<f32>(x_3278.x, x_3278.y, x_3278.z));
  let x_3281 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3281, 0.0f, 1.0f);
  let x_3283 : f32 = u_xlat70;
  u_xlat70 = (-(x_3283) + 1.0f);
  let x_3286 : f32 = u_xlat70;
  let x_3287 : f32 = u_xlat70;
  u_xlat70 = (x_3286 * x_3287);
  let x_3289 : f32 = u_xlat70;
  let x_3290 : f32 = u_xlat70;
  u_xlat70 = (x_3289 * x_3290);
  let x_3293 : f32 = u_xlat23.x;
  u_xlat5.x = ((-(x_3293) * 0.699999988f) + 1.700000048f);
  let x_3301 : f32 = u_xlat23.x;
  let x_3303 : f32 = u_xlat5.x;
  u_xlat23.x = (x_3301 * x_3303);
  let x_3307 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3307 * 6.0f);
  let x_3319 : vec4<f32> = u_xlat8;
  let x_3322 : f32 = u_xlat23.x;
  let x_3323 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3319.x, x_3319.y, x_3319.z), x_3322);
  u_xlat8 = x_3323;
  let x_3325 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3325 + -1.0f);
  let x_3329 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3331 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3329 * x_3331) + 1.0f);
  let x_3336 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3336, 0.0f);
  let x_3340 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3340);
  let x_3344 : f32 = u_xlat23.x;
  let x_3346 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3344 * x_3346);
  let x_3350 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3350);
  let x_3354 : f32 = u_xlat23.x;
  let x_3356 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3354 * x_3356);
  let x_3359 : vec4<f32> = u_xlat8;
  let x_3361 : vec3<f32> = u_xlat23;
  let x_3363 : vec3<f32> = (vec3<f32>(x_3359.x, x_3359.y, x_3359.z) * vec3<f32>(x_3361.x, x_3361.x, x_3361.x));
  let x_3364 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3363.x, x_3363.y, x_3363.z, x_3364.w);
  let x_3366 : f32 = u_xlat67;
  let x_3368 : f32 = u_xlat67;
  let x_3372 : vec2<f32> = ((vec2<f32>(x_3366, x_3366) * vec2<f32>(x_3368, x_3368)) + vec2<f32>(-1.0f, 1.0f));
  let x_3373 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3372.x, x_3373.y, x_3372.y);
  let x_3376 : f32 = u_xlat23.z;
  u_xlat67 = (1.0f / x_3376);
  let x_3379 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3379 + -0.039999999f);
  let x_3383 : f32 = u_xlat70;
  let x_3385 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3383 * x_3385) + 0.039999999f);
  let x_3390 : f32 = u_xlat67;
  let x_3392 : f32 = u_xlat3.x;
  u_xlat67 = (x_3390 * x_3392);
  let x_3394 : f32 = u_xlat67;
  let x_3396 : vec4<f32> = u_xlat8;
  let x_3398 : vec3<f32> = (vec3<f32>(x_3394, x_3394, x_3394) * vec3<f32>(x_3396.x, x_3396.y, x_3396.z));
  let x_3399 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3398.x, x_3398.y, x_3398.z, x_3399.w);
  let x_3401 : vec3<f32> = u_xlat27;
  let x_3402 : vec3<f32> = u_xlat2;
  let x_3404 : vec4<f32> = u_xlat8;
  let x_3406 : vec3<f32> = ((x_3401 * x_3402) + vec3<f32>(x_3404.x, x_3404.y, x_3404.z));
  let x_3407 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3406.x, x_3406.y, x_3406.z, x_3407.w);
  let x_3409 : f32 = u_xlat66;
  let x_3411 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3409 * x_3411);
  let x_3413 : vec3<f32> = u_xlat25;
  let x_3415 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3413, vec3<f32>(x_3415.x, x_3415.y, x_3415.z));
  let x_3418 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3418, 0.0f, 1.0f);
  let x_3420 : f32 = u_xlat66;
  let x_3421 : f32 = u_xlat67;
  u_xlat66 = (x_3420 * x_3421);
  let x_3423 : f32 = u_xlat66;
  let x_3425 : vec4<f32> = u_xlat4;
  let x_3427 : vec3<f32> = (vec3<f32>(x_3423, x_3423, x_3423) * vec3<f32>(x_3425.x, x_3425.y, x_3425.z));
  let x_3428 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3427.x, x_3427.y, x_3427.z, x_3428.w);
  let x_3430 : vec4<f32> = u_xlat6;
  let x_3433 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3435 : vec3<f32> = (vec3<f32>(x_3430.x, x_3430.y, x_3430.z) + vec3<f32>(x_3433.x, x_3433.y, x_3433.z));
  let x_3436 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3435.x, x_3435.y, x_3435.z, x_3436.w);
  let x_3438 : vec4<f32> = u_xlat8;
  let x_3440 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3438.x, x_3438.y, x_3438.z), vec3<f32>(x_3440.x, x_3440.y, x_3440.z));
  let x_3443 : f32 = u_xlat66;
  u_xlat66 = max(x_3443, 1.17549435e-37f);
  let x_3446 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3446);
  let x_3448 : f32 = u_xlat66;
  let x_3450 : vec4<f32> = u_xlat8;
  let x_3452 : vec3<f32> = (vec3<f32>(x_3448, x_3448, x_3448) * vec3<f32>(x_3450.x, x_3450.y, x_3450.z));
  let x_3453 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3452.x, x_3452.y, x_3452.z, x_3453.w);
  let x_3455 : vec3<f32> = u_xlat25;
  let x_3456 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3455, vec3<f32>(x_3456.x, x_3456.y, x_3456.z));
  let x_3459 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3459, 0.0f, 1.0f);
  let x_3462 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3464 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3462.x, x_3462.y, x_3462.z), vec3<f32>(x_3464.x, x_3464.y, x_3464.z));
  let x_3467 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3467, 0.0f, 1.0f);
  let x_3469 : f32 = u_xlat66;
  let x_3470 : f32 = u_xlat66;
  u_xlat66 = (x_3469 * x_3470);
  let x_3472 : f32 = u_xlat66;
  let x_3474 : f32 = u_xlat23.x;
  u_xlat66 = ((x_3472 * x_3474) + 1.000010014f);
  let x_3478 : f32 = u_xlat67;
  let x_3479 : f32 = u_xlat67;
  u_xlat67 = (x_3478 * x_3479);
  let x_3481 : f32 = u_xlat66;
  let x_3482 : f32 = u_xlat66;
  u_xlat66 = (x_3481 * x_3482);
  let x_3484 : f32 = u_xlat67;
  u_xlat67 = max(x_3484, 0.100000001f);
  let x_3487 : f32 = u_xlat66;
  let x_3488 : f32 = u_xlat67;
  u_xlat66 = (x_3487 * x_3488);
  let x_3490 : f32 = u_xlat72;
  let x_3491 : f32 = u_xlat66;
  u_xlat66 = (x_3490 * x_3491);
  let x_3493 : f32 = u_xlat68;
  let x_3494 : f32 = u_xlat66;
  u_xlat66 = (x_3493 / x_3494);
  let x_3496 : f32 = u_xlat66;
  let x_3500 : vec3<f32> = u_xlat2;
  let x_3501 : vec3<f32> = ((vec3<f32>(x_3496, x_3496, x_3496) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3500);
  let x_3502 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3501.x, x_3501.y, x_3501.z, x_3502.w);
  let x_3504 : vec4<f32> = u_xlat4;
  let x_3506 : vec4<f32> = u_xlat8;
  let x_3508 : vec3<f32> = (vec3<f32>(x_3504.x, x_3504.y, x_3504.z) * vec3<f32>(x_3506.x, x_3506.y, x_3506.z));
  let x_3509 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3508.x, x_3508.y, x_3508.z, x_3509.w);
  let x_3512 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3514 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3512, x_3514);
  let x_3516 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3516));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3528 : u32 = u_xlatu_loop_1;
    let x_3529 : u32 = u_xlatu66;
    if ((x_3528 < x_3529)) {
    } else {
      break;
    }
    let x_3532 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3532 >> 2u);
    let x_3535 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3535 & 3u));
    let x_3538 : u32 = u_xlatu3;
    let x_3541 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3538)];
    let x_3551 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3556 : vec4<u32> = indexable[x_3551];
    u_xlat3.x = dot(x_3541, bitcast<vec4<f32>>(x_3556));
    let x_3562 : f32 = u_xlat3.x;
    u_xlati3 = i32(x_3562);
    let x_3564 : vec3<f32> = vs_INTERP0;
    let x_3576 : i32 = u_xlati3;
    let x_3578 : vec4<f32> = x_3575.x_AdditionalLightsPosition[x_3576];
    let x_3581 : i32 = u_xlati3;
    let x_3583 : vec4<f32> = x_3575.x_AdditionalLightsPosition[x_3581];
    let x_3585 : vec3<f32> = ((-(x_3564) * vec3<f32>(x_3578.w, x_3578.w, x_3578.w)) + vec3<f32>(x_3583.x, x_3583.y, x_3583.z));
    let x_3586 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3585.x, x_3585.y, x_3585.z, x_3586.w);
    let x_3588 : vec4<f32> = u_xlat9;
    let x_3590 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3588.x, x_3588.y, x_3588.z), vec3<f32>(x_3590.x, x_3590.y, x_3590.z));
    let x_3593 : f32 = u_xlat70;
    u_xlat70 = max(x_3593, 6.10351562e-05f);
    let x_3597 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3597);
    let x_3599 : f32 = u_xlat71;
    let x_3601 : vec4<f32> = u_xlat9;
    let x_3603 : vec3<f32> = (vec3<f32>(x_3599, x_3599, x_3599) * vec3<f32>(x_3601.x, x_3601.y, x_3601.z));
    let x_3604 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3603.x, x_3603.y, x_3603.z, x_3604.w);
    let x_3606 : f32 = u_xlat70;
    u_xlat51.x = (1.0f / x_3606);
    let x_3609 : f32 = u_xlat70;
    let x_3610 : i32 = u_xlati3;
    let x_3612 : f32 = x_3575.x_AdditionalLightsAttenuation[x_3610].x;
    u_xlat70 = (x_3609 * x_3612);
    let x_3614 : f32 = u_xlat70;
    let x_3616 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3614) * x_3616) + 1.0f);
    let x_3619 : f32 = u_xlat70;
    u_xlat70 = max(x_3619, 0.0f);
    let x_3621 : f32 = u_xlat70;
    let x_3622 : f32 = u_xlat70;
    u_xlat70 = (x_3621 * x_3622);
    let x_3624 : f32 = u_xlat70;
    let x_3626 : f32 = u_xlat51.x;
    u_xlat70 = (x_3624 * x_3626);
    let x_3628 : i32 = u_xlati3;
    let x_3630 : vec4<f32> = x_3575.x_AdditionalLightsSpotDir[x_3628];
    let x_3632 : vec4<f32> = u_xlat10;
    u_xlat51.x = dot(vec3<f32>(x_3630.x, x_3630.y, x_3630.z), vec3<f32>(x_3632.x, x_3632.y, x_3632.z));
    let x_3637 : f32 = u_xlat51.x;
    let x_3638 : i32 = u_xlati3;
    let x_3640 : f32 = x_3575.x_AdditionalLightsAttenuation[x_3638].z;
    let x_3642 : i32 = u_xlati3;
    let x_3644 : f32 = x_3575.x_AdditionalLightsAttenuation[x_3642].w;
    u_xlat51.x = ((x_3637 * x_3640) + x_3644);
    let x_3648 : f32 = u_xlat51.x;
    u_xlat51.x = clamp(x_3648, 0.0f, 1.0f);
    let x_3652 : f32 = u_xlat51.x;
    let x_3654 : f32 = u_xlat51.x;
    u_xlat51.x = (x_3652 * x_3654);
    let x_3657 : f32 = u_xlat70;
    let x_3659 : f32 = u_xlat51.x;
    u_xlat70 = (x_3657 * x_3659);
    let x_3661 : vec2<f32> = u_xlat29;
    let x_3663 : i32 = u_xlati3;
    let x_3665 : vec4<f32> = x_3575.x_AdditionalLightsColor[x_3663];
    let x_3667 : vec3<f32> = (vec3<f32>(x_3661.x, x_3661.x, x_3661.x) * vec3<f32>(x_3665.x, x_3665.y, x_3665.z));
    let x_3668 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3667.x, x_3667.y, x_3667.z, x_3668.w);
    let x_3670 : vec3<f32> = u_xlat25;
    let x_3671 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_3670, vec3<f32>(x_3671.x, x_3671.y, x_3671.z));
    let x_3676 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3676, 0.0f, 1.0f);
    let x_3680 : f32 = u_xlat3.x;
    let x_3681 : f32 = u_xlat70;
    u_xlat3.x = (x_3680 * x_3681);
    let x_3684 : vec4<f32> = u_xlat3;
    let x_3686 : vec4<f32> = u_xlat11;
    let x_3688 : vec3<f32> = (vec3<f32>(x_3684.x, x_3684.x, x_3684.x) * vec3<f32>(x_3686.x, x_3686.y, x_3686.z));
    let x_3689 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3688.x, x_3688.y, x_3688.z, x_3689.w);
    let x_3691 : vec4<f32> = u_xlat9;
    let x_3693 : f32 = u_xlat71;
    let x_3696 : vec4<f32> = u_xlat6;
    let x_3698 : vec3<f32> = ((vec3<f32>(x_3691.x, x_3691.y, x_3691.z) * vec3<f32>(x_3693, x_3693, x_3693)) + vec3<f32>(x_3696.x, x_3696.y, x_3696.z));
    let x_3699 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3698.x, x_3698.y, x_3698.z, x_3699.w);
    let x_3701 : vec4<f32> = u_xlat9;
    let x_3703 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_3701.x, x_3701.y, x_3701.z), vec3<f32>(x_3703.x, x_3703.y, x_3703.z));
    let x_3708 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3708, 1.17549435e-37f);
    let x_3712 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_3712);
    let x_3715 : vec4<f32> = u_xlat3;
    let x_3717 : vec4<f32> = u_xlat9;
    let x_3719 : vec3<f32> = (vec3<f32>(x_3715.x, x_3715.x, x_3715.x) * vec3<f32>(x_3717.x, x_3717.y, x_3717.z));
    let x_3720 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3719.x, x_3719.y, x_3719.z, x_3720.w);
    let x_3722 : vec3<f32> = u_xlat25;
    let x_3723 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_3722, vec3<f32>(x_3723.x, x_3723.y, x_3723.z));
    let x_3728 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3728, 0.0f, 1.0f);
    let x_3731 : vec4<f32> = u_xlat10;
    let x_3733 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3731.x, x_3731.y, x_3731.z), vec3<f32>(x_3733.x, x_3733.y, x_3733.z));
    let x_3736 : f32 = u_xlat70;
    u_xlat70 = clamp(x_3736, 0.0f, 1.0f);
    let x_3739 : f32 = u_xlat3.x;
    let x_3741 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3739 * x_3741);
    let x_3745 : f32 = u_xlat3.x;
    let x_3747 : f32 = u_xlat23.x;
    u_xlat3.x = ((x_3745 * x_3747) + 1.000010014f);
    let x_3751 : f32 = u_xlat70;
    let x_3752 : f32 = u_xlat70;
    u_xlat70 = (x_3751 * x_3752);
    let x_3755 : f32 = u_xlat3.x;
    let x_3757 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3755 * x_3757);
    let x_3760 : f32 = u_xlat70;
    u_xlat70 = max(x_3760, 0.100000001f);
    let x_3763 : f32 = u_xlat3.x;
    let x_3764 : f32 = u_xlat70;
    u_xlat3.x = (x_3763 * x_3764);
    let x_3767 : f32 = u_xlat72;
    let x_3769 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3767 * x_3769);
    let x_3772 : f32 = u_xlat68;
    let x_3774 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3772 / x_3774);
    let x_3777 : vec4<f32> = u_xlat3;
    let x_3780 : vec3<f32> = u_xlat2;
    let x_3781 : vec3<f32> = ((vec3<f32>(x_3777.x, x_3777.x, x_3777.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3780);
    let x_3782 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3781.x, x_3781.y, x_3781.z, x_3782.w);
    let x_3784 : vec4<f32> = u_xlat9;
    let x_3786 : vec4<f32> = u_xlat11;
    let x_3789 : vec4<f32> = u_xlat8;
    let x_3791 : vec3<f32> = ((vec3<f32>(x_3784.x, x_3784.y, x_3784.z) * vec3<f32>(x_3786.x, x_3786.y, x_3786.z)) + vec3<f32>(x_3789.x, x_3789.y, x_3789.z));
    let x_3792 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3791.x, x_3791.y, x_3791.z, x_3792.w);

    continuing {
      let x_3794 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3794 + bitcast<u32>(1i));
    }
  }
  let x_3796 : vec4<f32> = u_xlat5;
  let x_3798 : vec4<f32> = u_xlat7;
  let x_3801 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_3796.x, x_3796.y, x_3796.z) * vec3<f32>(x_3798.x, x_3798.x, x_3798.x)) + vec3<f32>(x_3801.x, x_3801.y, x_3801.z));
  let x_3804 : vec4<f32> = u_xlat8;
  let x_3806 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3804.x, x_3804.y, x_3804.z) + x_3806);
  let x_3810 : vec4<f32> = vs_INTERP4;
  let x_3812 : vec3<f32> = u_xlat0;
  let x_3814 : vec3<f32> = u_xlat2;
  let x_3815 : vec3<f32> = ((vec3<f32>(x_3810.w, x_3810.w, x_3810.w) * x_3812) + x_3814);
  let x_3816 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3815.x, x_3815.y, x_3815.z, x_3816.w);
  let x_3818 : bool = u_xlatb45;
  if (x_3818) {
    let x_3823 : f32 = u_xlat1.x;
    x_3819 = x_3823;
  } else {
    x_3819 = 1.0f;
  }
  let x_3825 : f32 = x_3819;
  SV_Target0.w = x_3825;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

