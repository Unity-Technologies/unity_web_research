type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb2 : vec4<bool>;
  var x_464 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var x_473 : vec3<f32>;
  var x_484 : vec3<f32>;
  var x_495 : vec3<f32>;
  var x_506 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_99 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_101 : vec2<f32> = vs_TEXCOORD0;
  let x_106 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_108 : vec3<f32> = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_113 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_115 : vec3<f32> = u_xlat8;
  let x_118 : vec4<f32> = u_xlat1;
  let x_120 : vec3<f32> = ((vec3<f32>(x_113.x, x_113.y, x_113.z) * vec3<f32>(x_115.x, x_115.x, x_115.x)) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_123 : f32 = u_xlat16;
  let x_125 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_123, x_123, x_123) * vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_131 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_131 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_136 : vec3<f32> = u_xlat9;
  let x_138 : vec2<f32> = vs_TEXCOORD0;
  let x_139 : vec2<f32> = (vec2<f32>(x_136.x, x_136.y) + x_138);
  let x_140 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_139.x, x_139.y, x_140.z);
  let x_145 : vec3<f32> = u_xlat9;
  let x_148 : f32 = x_33.x_GlobalMipBias.x;
  let x_149 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_145.x, x_145.y), x_148);
  u_xlat1.x = x_149.x;
  let x_153 : f32 = x_33.x_ZBufferParams.z;
  let x_155 : f32 = u_xlat1.x;
  let x_158 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_153 * x_155) + x_158);
  let x_162 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_162);
  let x_167 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_167 * 2.0f);
  u_xlat2.y = 0.0f;
  u_xlat18.y = 0.0f;
  let x_176 : vec4<f32> = u_xlat2;
  let x_178 : vec2<f32> = vs_TEXCOORD0;
  let x_179 : vec2<f32> = (vec2<f32>(x_176.x, x_176.y) + x_178);
  let x_180 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_179.x, x_179.y, x_180.z, x_180.w);
  let x_185 : vec4<f32> = u_xlat3;
  let x_188 : f32 = x_33.x_GlobalMipBias.x;
  let x_189 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_185.x, x_185.y), x_188);
  u_xlat1.x = x_189.x;
  let x_193 : f32 = x_33.x_ZBufferParams.z;
  let x_195 : f32 = u_xlat1.x;
  let x_198 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_193 * x_195) + x_198);
  let x_202 : f32 = u_xlat1.x;
  u_xlat3.z = (1.0f / x_202);
  u_xlat12.x = 0.0f;
  let x_208 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_208 * 2.0f);
  let x_211 : vec3<f32> = u_xlat12;
  let x_213 : vec2<f32> = vs_TEXCOORD0;
  let x_214 : vec2<f32> = (vec2<f32>(x_211.x, x_211.y) + x_213);
  let x_215 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_214.x, x_214.y, x_215.z);
  let x_220 : vec3<f32> = u_xlat12;
  let x_223 : f32 = x_33.x_GlobalMipBias.x;
  let x_224 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_220.x, x_220.y), x_223);
  u_xlat1.x = x_224.x;
  let x_228 : f32 = x_33.x_ZBufferParams.z;
  let x_230 : f32 = u_xlat1.x;
  let x_233 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_228 * x_230) + x_233);
  let x_237 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_237);
  u_xlat13.x = 0.0f;
  let x_243 : f32 = x_33.x_SourceSize.w;
  u_xlat13.y = (x_243 * -2.0f);
  let x_246 : vec3<f32> = u_xlat13;
  let x_248 : vec2<f32> = vs_TEXCOORD0;
  let x_249 : vec2<f32> = (vec2<f32>(x_246.x, x_246.y) + x_248);
  let x_250 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_249.x, x_249.y, x_250.z);
  let x_255 : vec3<f32> = u_xlat13;
  let x_258 : f32 = x_33.x_GlobalMipBias.x;
  let x_259 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_255.x, x_255.y), x_258);
  u_xlat1.x = x_259.x;
  let x_263 : f32 = x_33.x_ZBufferParams.z;
  let x_265 : f32 = u_xlat1.x;
  let x_268 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_263 * x_265) + x_268);
  let x_272 : f32 = u_xlat1.x;
  u_xlat13.z = (1.0f / x_272);
  let x_276 : f32 = x_33.x_SourceSize.z;
  u_xlat18.x = x_276;
  let x_278 : vec2<f32> = u_xlat18;
  let x_284 : vec2<f32> = vs_TEXCOORD0;
  u_xlat2 = ((vec4<f32>(x_278.x, x_278.y, x_278.x, x_278.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_284.x, x_284.y, x_284.x, x_284.y));
  let x_290 : vec4<f32> = u_xlat2;
  let x_293 : f32 = x_33.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat1.x = x_294.x;
  let x_298 : f32 = x_33.x_ZBufferParams.z;
  let x_300 : f32 = u_xlat1.x;
  let x_303 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_298 * x_300) + x_303);
  let x_307 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_307);
  let x_313 : vec4<f32> = u_xlat2;
  let x_316 : f32 = x_33.x_GlobalMipBias.x;
  let x_317 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_313.z, x_313.w), x_316);
  u_xlat2.x = x_317.x;
  let x_321 : f32 = x_33.x_ZBufferParams.z;
  let x_323 : f32 = u_xlat2.x;
  let x_326 : f32 = x_33.x_ZBufferParams.w;
  u_xlat2.x = ((x_321 * x_323) + x_326);
  let x_330 : f32 = u_xlat2.x;
  u_xlat2.x = (1.0f / x_330);
  u_xlat6.x = 2.0f;
  let x_336 : f32 = x_33.x_SourceSize.w;
  u_xlat6.y = x_336;
  let x_339 : vec4<f32> = u_xlat6;
  let x_342 : vec2<f32> = vs_TEXCOORD0;
  u_xlat6 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_339.x, x_339.y, x_339.x, x_339.y)) + vec4<f32>(x_342.x, x_342.y, x_342.x, x_342.y));
  let x_349 : vec4<f32> = u_xlat6;
  let x_352 : f32 = x_33.x_GlobalMipBias.x;
  let x_353 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_349.x, x_349.y), x_352);
  u_xlat10.x = x_353.x;
  let x_357 : f32 = x_33.x_ZBufferParams.z;
  let x_359 : f32 = u_xlat10.x;
  let x_362 : f32 = x_33.x_ZBufferParams.w;
  u_xlat10.x = ((x_357 * x_359) + x_362);
  let x_366 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_366);
  let x_372 : vec4<f32> = u_xlat6;
  let x_375 : f32 = x_33.x_GlobalMipBias.x;
  let x_376 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_372.z, x_372.w), x_375);
  u_xlat18.x = x_376.x;
  let x_380 : f32 = x_33.x_ZBufferParams.z;
  let x_382 : f32 = u_xlat18.x;
  let x_385 : f32 = x_33.x_ZBufferParams.w;
  u_xlat18.x = ((x_380 * x_382) + x_385);
  let x_389 : f32 = u_xlat18.x;
  u_xlat18.x = (1.0f / x_389);
  let x_393 : f32 = u_xlat9.z;
  let x_396 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_393 * 2.0f) + -(x_396));
  let x_400 : f32 = u_xlat0;
  let x_403 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_400) + x_403);
  let x_407 : f32 = u_xlat3.z;
  let x_410 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_407 * 2.0f) + -(x_410));
  let x_414 : f32 = u_xlat0;
  let x_417 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_414) + x_417);
  let x_422 : f32 = u_xlat1.x;
  let x_425 : f32 = u_xlat2.x;
  u_xlatb1 = (abs(x_422) < abs(x_425));
  let x_429 : f32 = u_xlat13.z;
  let x_432 : f32 = u_xlat18.x;
  u_xlat2.x = ((x_429 * 2.0f) + -(x_432));
  let x_437 : f32 = u_xlat12.z;
  let x_440 : f32 = u_xlat10.x;
  u_xlat2.y = ((x_437 * 2.0f) + -(x_440));
  let x_444 : f32 = u_xlat0;
  let x_447 : vec4<f32> = u_xlat2;
  let x_449 : vec2<f32> = (-(vec2<f32>(x_444, x_444)) + vec2<f32>(x_447.x, x_447.y));
  let x_450 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_449.x, x_449.y, x_450.z, x_450.w);
  let x_456 : f32 = u_xlat2.x;
  let x_459 : f32 = u_xlat2.y;
  u_xlatb2.x = (abs(x_456) < abs(x_459));
  let x_463 : bool = u_xlatb1;
  if (x_463) {
    let x_467 : vec3<f32> = u_xlat9;
    x_464 = x_467;
  } else {
    let x_469 : vec3<f32> = u_xlat13;
    x_464 = x_469;
  }
  let x_470 : vec3<f32> = x_464;
  u_xlat10 = x_470;
  let x_472 : bool = u_xlatb1;
  if (x_472) {
    let x_476 : vec3<f32> = u_xlat13;
    x_473 = x_476;
  } else {
    let x_478 : vec4<f32> = u_xlat3;
    x_473 = vec3<f32>(x_478.x, x_478.y, x_478.z);
  }
  let x_480 : vec3<f32> = x_473;
  let x_481 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_481.x, x_480.x, x_480.y, x_480.z);
  let x_483 : bool = u_xlatb1;
  if (x_483) {
    let x_487 : vec3<f32> = u_xlat12;
    x_484 = x_487;
  } else {
    let x_489 : vec4<f32> = u_xlat3;
    x_484 = vec3<f32>(x_489.x, x_489.y, x_489.z);
  }
  let x_491 : vec3<f32> = x_484;
  let x_492 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_491.x, x_491.y, x_491.z, x_492.w);
  let x_494 : bool = u_xlatb1;
  if (x_494) {
    let x_498 : vec3<f32> = u_xlat9;
    x_495 = x_498;
  } else {
    let x_500 : vec3<f32> = u_xlat12;
    x_495 = x_500;
  }
  let x_501 : vec3<f32> = x_495;
  let x_502 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_502.x, x_501.x, x_501.y, x_501.z);
  let x_505 : bool = u_xlatb2.x;
  if (x_505) {
    let x_509 : vec3<f32> = u_xlat10;
    x_506 = vec2<f32>(x_509.x, x_509.y);
  } else {
    let x_512 : vec4<f32> = u_xlat3;
    x_506 = vec2<f32>(x_512.x, x_512.y);
  }
  let x_514 : vec2<f32> = x_506;
  let x_515 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_514.x, x_514.y, x_515.z);
  let x_518 : f32 = u_xlat10.z;
  u_xlat5.x = x_518;
  let x_521 : f32 = u_xlat3.z;
  u_xlat1.x = x_521;
  let x_524 : bool = u_xlatb2.x;
  let x_525 : vec4<f32> = u_xlat5;
  let x_526 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_526, x_525, vec4<bool>(x_524, x_524, x_524, x_524));
  let x_531 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_531) + 1.0f);
  let x_534 : vec4<f32> = u_xlat1;
  let x_537 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_539 : vec2<f32> = (vec2<f32>(x_534.w, x_534.x) * vec2<f32>(x_537.x, x_537.x));
  let x_540 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_539.x, x_540.y, x_540.z, x_539.y);
  let x_543 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_545 : vec4<f32> = u_xlat1;
  let x_549 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_551 : vec3<f32> = ((vec3<f32>(x_543.z, x_543.x, x_543.y) * vec3<f32>(x_545.y, x_545.y, x_545.y)) + vec3<f32>(x_549.z, x_549.x, x_549.y));
  let x_552 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_551.x, x_551.y, x_551.z, x_552.w);
  let x_555 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_557 : f32 = u_xlat17;
  let x_560 : vec4<f32> = u_xlat3;
  let x_562 : vec3<f32> = ((vec3<f32>(x_555.z, x_555.x, x_555.y) * vec3<f32>(x_557, x_557, x_557)) + vec3<f32>(x_560.x, x_560.y, x_560.z));
  let x_563 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_562.x, x_562.y, x_562.z, x_563.w);
  let x_565 : vec4<f32> = u_xlat3;
  let x_567 : vec4<f32> = u_xlat1;
  let x_570 : vec3<f32> = u_xlat8;
  let x_573 : vec3<f32> = ((vec3<f32>(x_565.x, x_565.y, x_565.z) * vec3<f32>(x_567.x, x_567.x, x_567.x)) + -(vec3<f32>(x_570.z, x_570.x, x_570.y)));
  let x_574 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_573.x, x_573.y, x_573.z, x_574.w);
  let x_577 : f32 = u_xlat10.y;
  u_xlat2.x = (-(x_577) + 1.0f);
  let x_582 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_584 : vec3<f32> = u_xlat10;
  let x_588 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat10 = ((vec3<f32>(x_582.y, x_582.z, x_582.x) * vec3<f32>(x_584.x, x_584.x, x_584.x)) + vec3<f32>(x_588.y, x_588.z, x_588.x));
  let x_592 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_594 : vec4<f32> = u_xlat2;
  let x_597 : vec3<f32> = u_xlat10;
  let x_598 : vec3<f32> = ((vec3<f32>(x_592.y, x_592.z, x_592.x) * vec3<f32>(x_594.x, x_594.x, x_594.x)) + x_597);
  let x_599 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_598.x, x_598.y, x_598.z, x_599.w);
  let x_601 : vec4<f32> = u_xlat2;
  let x_603 : vec4<f32> = u_xlat1;
  let x_606 : vec3<f32> = u_xlat8;
  let x_609 : vec3<f32> = ((vec3<f32>(x_601.x, x_601.y, x_601.z) * vec3<f32>(x_603.w, x_603.w, x_603.w)) + -(vec3<f32>(x_606.y, x_606.z, x_606.x)));
  let x_610 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
  let x_612 : vec4<f32> = u_xlat1;
  let x_614 : vec4<f32> = u_xlat2;
  let x_616 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) * vec3<f32>(x_614.x, x_614.y, x_614.z));
  let x_617 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_616.x, x_616.y, x_616.z, x_617.w);
  let x_619 : vec4<f32> = u_xlat1;
  let x_621 : vec4<f32> = u_xlat2;
  let x_624 : vec4<f32> = u_xlat3;
  let x_627 : vec3<f32> = ((vec3<f32>(x_619.z, x_619.x, x_619.y) * vec3<f32>(x_621.y, x_621.z, x_621.x)) + -(vec3<f32>(x_624.x, x_624.y, x_624.z)));
  let x_628 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_627.x, x_627.y, x_627.z, x_628.w);
  let x_631 : vec4<f32> = u_xlat1;
  let x_633 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_631.x, x_631.y, x_631.z), vec3<f32>(x_633.x, x_633.y, x_633.z));
  let x_636 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_636);
  let x_638 : f32 = u_xlat25;
  let x_640 : vec4<f32> = u_xlat1;
  let x_642 : vec3<f32> = (vec3<f32>(x_638, x_638, x_638) * vec3<f32>(x_640.x, x_640.y, x_640.z));
  let x_643 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_642.x, x_642.y, x_642.z, x_643.w);
  let x_645 : vec2<f32> = vs_TEXCOORD0;
  let x_648 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_650 : vec2<f32> = (x_645 + vec2<f32>(x_648.z, x_648.w));
  let x_651 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_650.x, x_650.y, x_651.z, x_651.w);
  let x_653 : vec4<f32> = u_xlat2;
  let x_656 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_653.x, x_653.y) * vec2<f32>(x_656.x, x_656.y));
  let x_664 : vec2<f32> = u_xlat18;
  let x_666 : f32 = x_33.x_GlobalMipBias.x;
  let x_667 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_664, x_666);
  u_xlat25 = x_667.w;
  let x_669 : f32 = u_xlat25;
  u_xlat18.x = fract(x_669);
  let x_673 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_673 * 2.0f) + -1.0f);
  let x_678 : f32 = u_xlat25;
  u_xlat25 = (x_678 + 0.9296875f);
  let x_681 : f32 = u_xlat25;
  u_xlat25 = (x_681 * 628.31854248f);
  let x_685 : f32 = u_xlat3.z;
  let x_688 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_685) * x_688) + 1.0f);
  let x_693 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_693);
  let x_697 : f32 = u_xlat25;
  u_xlat4.x = sin(x_697);
  let x_700 : f32 = u_xlat25;
  u_xlat5.x = cos(x_700);
  let x_704 : f32 = u_xlat18.x;
  let x_706 : f32 = u_xlat5.x;
  u_xlat3.x = (x_704 * x_706);
  let x_710 : f32 = u_xlat18.x;
  let x_712 : f32 = u_xlat4.x;
  u_xlat3.y = (x_710 * x_712);
  let x_715 : vec4<f32> = u_xlat1;
  let x_717 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_715.x, x_715.y, x_715.z), vec3<f32>(x_717.x, x_717.y, x_717.z));
  let x_721 : f32 = u_xlat25;
  u_xlatb25 = (x_721 >= 0.0f);
  let x_723 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_723);
  let x_725 : f32 = u_xlat25;
  let x_727 : vec4<f32> = u_xlat3;
  let x_729 : vec3<f32> = (vec3<f32>(x_725, x_725, x_725) * vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_730 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_729.x, x_729.y, x_729.z, x_730.w);
  let x_732 : vec4<f32> = u_xlat3;
  let x_735 : vec4<f32> = x_33.x_SSAOParams;
  let x_737 : vec3<f32> = (vec3<f32>(x_732.x, x_732.y, x_732.z) * vec3<f32>(x_735.y, x_735.y, x_735.y));
  let x_738 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_737.x, x_737.y, x_737.z, x_738.w);
  let x_740 : vec4<f32> = u_xlat3;
  let x_745 : vec3<f32> = u_xlat8;
  let x_746 : vec3<f32> = ((vec3<f32>(x_740.x, x_740.y, x_740.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_745);
  let x_747 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_746.x, x_746.y, x_746.z, x_747.w);
  let x_749 : vec4<f32> = u_xlat3;
  let x_753 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_749.y, x_749.y) * vec2<f32>(x_753.x, x_753.y));
  let x_757 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_759 : vec4<f32> = u_xlat3;
  let x_762 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_759.x, x_759.x)) + x_762);
  let x_766 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_768 : vec4<f32> = u_xlat3;
  let x_771 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_766.x, x_766.y) * vec2<f32>(x_768.z, x_768.z)) + x_771);
  let x_774 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_774;
  let x_777 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_777;
  let x_780 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_780;
  let x_782 : vec3<f32> = u_xlat4;
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_782, vec3<f32>(x_783.x, x_783.y, x_783.z));
  let x_786 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_786));
  let x_790 : vec2<f32> = u_xlat18;
  let x_791 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_790 * vec2<f32>(x_791.x, x_791.x)) + vec2<f32>(1.0f, 1.0f));
  let x_796 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_796 * vec2<f32>(0.5f, 0.5f));
  let x_799 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_799, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_806 : vec2<f32> = u_xlat18;
  let x_808 : f32 = x_33.x_GlobalMipBias.x;
  let x_809 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_806, x_808);
  u_xlat3.x = x_809.x;
  let x_814 : f32 = x_33.x_ZBufferParams.z;
  let x_816 : f32 = u_xlat3.x;
  let x_819 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_814 * x_816) + x_819);
  let x_823 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_823);
  let x_826 : f32 = u_xlat25;
  let x_829 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_826) + -(x_829));
  let x_832 : f32 = u_xlat25;
  let x_835 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_832) < x_835);
  let x_837 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_837);
  let x_843 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_843);
  let x_847 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_847);
  let x_850 : f32 = u_xlat25;
  let x_852 : f32 = u_xlat3.x;
  u_xlat25 = (x_850 * x_852);
  let x_856 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_856) + 1.0f);
  let x_860 : f32 = u_xlat11.x;
  let x_862 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_860 * x_862);
  let x_866 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_868 : vec2<f32> = u_xlat18;
  let x_872 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_866.x, x_866.y, x_866.z) * vec3<f32>(x_868.x, x_868.x, x_868.x)) + vec3<f32>(x_872.x, x_872.y, x_872.z));
  let x_876 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_878 : f32 = u_xlat26;
  let x_881 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_876.x, x_876.y, x_876.z) * vec3<f32>(x_878, x_878, x_878)) + x_881);
  let x_883 : vec3<f32> = u_xlat11;
  let x_884 : vec4<f32> = u_xlat3;
  let x_887 : vec3<f32> = u_xlat8;
  let x_889 : vec3<f32> = ((x_883 * vec3<f32>(x_884.x, x_884.x, x_884.x)) + -(x_887));
  let x_890 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_889.x, x_889.y, x_889.z, x_890.w);
  let x_892 : vec4<f32> = u_xlat3;
  let x_894 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_898 : f32 = u_xlat0;
  let x_903 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_898) * 0.004f) + x_903);
  let x_907 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_907, 0.0f);
  let x_910 : vec4<f32> = u_xlat3;
  let x_912 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_910.x, x_910.y, x_910.z), vec3<f32>(x_912.x, x_912.y, x_912.z));
  let x_915 : f32 = u_xlat26;
  u_xlat26 = (x_915 + 0.0001f);
  let x_918 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_918);
  let x_920 : f32 = u_xlat26;
  let x_922 : f32 = u_xlat18.x;
  u_xlat18.x = (x_920 * x_922);
  let x_925 : vec4<f32> = u_xlat2;
  let x_928 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_925.x, x_925.y, x_925.x, x_925.y) * vec4<f32>(x_928.x, x_928.y, x_928.x, x_928.y)) + vec4<f32>(0.25f, 0.25f, 0.5f, 0.5f));
  let x_937 : vec4<f32> = u_xlat3;
  let x_940 : f32 = x_33.x_GlobalMipBias.x;
  let x_941 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_937.x, x_937.y), x_940);
  u_xlat26 = x_941.w;
  let x_943 : f32 = u_xlat26;
  let x_948 : vec2<f32> = (vec2<f32>(x_943, x_943) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_949 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_948.x, x_948.y, x_949.z, x_949.w);
  let x_952 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_952);
  let x_954 : f32 = u_xlat26;
  u_xlat5.z = ((x_954 * 2.0f) + -1.0f);
  let x_959 : f32 = u_xlat3.y;
  u_xlat26 = (x_959 * 628.31854248f);
  let x_962 : f32 = u_xlat5.z;
  let x_965 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_962) * x_965) + 1.0f);
  let x_970 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_970);
  let x_973 : f32 = u_xlat26;
  u_xlat6.x = sin(x_973);
  let x_977 : f32 = u_xlat26;
  u_xlat7 = cos(x_977);
  let x_980 : f32 = u_xlat3.x;
  let x_981 : f32 = u_xlat7;
  u_xlat5.x = (x_980 * x_981);
  let x_985 : f32 = u_xlat3.x;
  let x_987 : f32 = u_xlat6.x;
  u_xlat5.y = (x_985 * x_987);
  let x_990 : vec4<f32> = u_xlat1;
  let x_992 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_990.x, x_990.y, x_990.z), vec3<f32>(x_992.x, x_992.y, x_992.z));
  let x_996 : f32 = u_xlat26;
  u_xlatb26 = (x_996 >= 0.0f);
  let x_998 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_998);
  let x_1000 : f32 = u_xlat26;
  let x_1002 : vec4<f32> = u_xlat5;
  let x_1004 : vec3<f32> = (vec3<f32>(x_1000, x_1000, x_1000) * vec3<f32>(x_1002.x, x_1002.y, x_1002.z));
  let x_1005 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1004.x, x_1004.y, x_1004.z, x_1005.w);
  let x_1007 : vec4<f32> = u_xlat5;
  let x_1010 : vec4<f32> = x_33.x_SSAOParams;
  let x_1012 : vec3<f32> = (vec3<f32>(x_1007.x, x_1007.y, x_1007.z) * vec3<f32>(x_1010.y, x_1010.y, x_1010.y));
  let x_1013 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1012.x, x_1012.y, x_1012.z, x_1013.w);
  let x_1015 : vec4<f32> = u_xlat5;
  let x_1020 : vec3<f32> = u_xlat8;
  let x_1021 : vec3<f32> = ((vec3<f32>(x_1015.x, x_1015.y, x_1015.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1020);
  let x_1022 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1021.x, x_1021.y, x_1021.z, x_1022.w);
  let x_1024 : vec4<f32> = u_xlat5;
  let x_1027 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1029 : vec2<f32> = (vec2<f32>(x_1024.y, x_1024.y) * vec2<f32>(x_1027.x, x_1027.y));
  let x_1030 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
  let x_1033 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1035 : vec4<f32> = u_xlat5;
  let x_1038 : vec4<f32> = u_xlat3;
  let x_1040 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.y) * vec2<f32>(x_1035.x, x_1035.x)) + vec2<f32>(x_1038.x, x_1038.y));
  let x_1041 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1040.x, x_1040.y, x_1041.z, x_1041.w);
  let x_1044 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1046 : vec4<f32> = u_xlat5;
  let x_1049 : vec4<f32> = u_xlat3;
  let x_1051 : vec2<f32> = ((vec2<f32>(x_1044.x, x_1044.y) * vec2<f32>(x_1046.z, x_1046.z)) + vec2<f32>(x_1049.x, x_1049.y));
  let x_1052 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1051.x, x_1051.y, x_1052.z, x_1052.w);
  let x_1054 : vec3<f32> = u_xlat4;
  let x_1055 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(x_1054, vec3<f32>(x_1055.x, x_1055.y, x_1055.z));
  let x_1059 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_1059));
  let x_1062 : vec4<f32> = u_xlat3;
  let x_1064 : f32 = u_xlat28;
  let x_1067 : vec2<f32> = ((vec2<f32>(x_1062.x, x_1062.y) * vec2<f32>(x_1064, x_1064)) + vec2<f32>(1.0f, 1.0f));
  let x_1068 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1067.x, x_1067.y, x_1068.z, x_1068.w);
  let x_1070 : vec4<f32> = u_xlat3;
  let x_1072 : vec2<f32> = (vec2<f32>(x_1070.x, x_1070.y) * vec2<f32>(0.5f, 0.5f));
  let x_1073 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1072.x, x_1072.y, x_1073.z, x_1073.w);
  let x_1075 : vec4<f32> = u_xlat3;
  let x_1079 : vec2<f32> = clamp(vec2<f32>(x_1075.x, x_1075.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1080 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1079.x, x_1079.y, x_1080.z, x_1080.w);
  let x_1085 : vec4<f32> = u_xlat3;
  let x_1088 : f32 = x_33.x_GlobalMipBias.x;
  let x_1089 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1085.x, x_1085.y), x_1088);
  u_xlat28 = x_1089.x;
  let x_1092 : f32 = x_33.x_ZBufferParams.z;
  let x_1093 : f32 = u_xlat28;
  let x_1096 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_1092 * x_1093) + x_1096);
  let x_1100 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_1100);
  let x_1103 : f32 = u_xlat26;
  let x_1106 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_1103) + -(x_1106));
  let x_1109 : f32 = u_xlat26;
  let x_1112 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_1109) < x_1112);
  let x_1114 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_1114);
  let x_1117 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_1117);
  let x_1119 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_1119);
  let x_1121 : f32 = u_xlat26;
  let x_1122 : f32 = u_xlat28;
  u_xlat26 = (x_1121 * x_1122);
  let x_1125 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_1125) + 1.0f);
  let x_1130 : f32 = u_xlat5.x;
  let x_1132 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_1130 * x_1132);
  let x_1135 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1137 : vec4<f32> = u_xlat3;
  let x_1141 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1143 : vec3<f32> = ((vec3<f32>(x_1135.x, x_1135.y, x_1135.z) * vec3<f32>(x_1137.x, x_1137.x, x_1137.x)) + vec3<f32>(x_1141.x, x_1141.y, x_1141.z));
  let x_1144 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1143.x, x_1143.y, x_1143.z, x_1144.w);
  let x_1147 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1149 : vec3<f32> = u_xlat11;
  let x_1152 : vec4<f32> = u_xlat5;
  let x_1154 : vec3<f32> = ((vec3<f32>(x_1147.x, x_1147.y, x_1147.z) * vec3<f32>(x_1149.x, x_1149.x, x_1149.x)) + vec3<f32>(x_1152.x, x_1152.y, x_1152.z));
  let x_1155 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1154.x, x_1154.y, x_1154.z, x_1155.w);
  let x_1157 : vec4<f32> = u_xlat5;
  let x_1159 : f32 = u_xlat28;
  let x_1162 : vec3<f32> = u_xlat8;
  let x_1164 : vec3<f32> = ((vec3<f32>(x_1157.x, x_1157.y, x_1157.z) * vec3<f32>(x_1159, x_1159, x_1159)) + -(x_1162));
  let x_1165 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1164.x, x_1164.y, x_1164.z, x_1165.w);
  let x_1167 : vec4<f32> = u_xlat5;
  let x_1169 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(vec3<f32>(x_1167.x, x_1167.y, x_1167.z), vec3<f32>(x_1169.x, x_1169.y, x_1169.z));
  let x_1173 : f32 = u_xlat0;
  let x_1177 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1173) * 0.004f) + x_1177);
  let x_1181 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1181, 0.0f);
  let x_1184 : vec4<f32> = u_xlat5;
  let x_1186 : vec4<f32> = u_xlat5;
  u_xlat11.x = dot(vec3<f32>(x_1184.x, x_1184.y, x_1184.z), vec3<f32>(x_1186.x, x_1186.y, x_1186.z));
  let x_1191 : f32 = u_xlat11.x;
  u_xlat11.x = (x_1191 + 0.0001f);
  let x_1195 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_1195);
  let x_1199 : f32 = u_xlat11.x;
  let x_1201 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1199 * x_1201);
  let x_1204 : f32 = u_xlat26;
  let x_1206 : f32 = u_xlat3.x;
  u_xlat26 = (x_1204 * x_1206);
  let x_1209 : f32 = u_xlat18.x;
  let x_1210 : f32 = u_xlat25;
  let x_1212 : f32 = u_xlat26;
  u_xlat25 = ((x_1209 * x_1210) + x_1212);
  let x_1217 : vec4<f32> = u_xlat3;
  let x_1220 : f32 = x_33.x_GlobalMipBias.x;
  let x_1221 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1217.z, x_1217.w), x_1220);
  u_xlat18.x = x_1221.w;
  let x_1224 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1224.x, x_1224.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1231 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1231);
  let x_1235 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1235 * 2.0f) + -1.0f);
  let x_1240 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1240 * 628.31854248f);
  let x_1244 : f32 = u_xlat3.z;
  let x_1247 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1244) * x_1247) + 1.0f);
  let x_1250 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1250);
  let x_1253 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1253);
  let x_1257 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1257);
  let x_1260 : f32 = u_xlat26;
  let x_1262 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1260 * x_1262);
  let x_1265 : f32 = u_xlat26;
  let x_1267 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1265 * x_1267);
  let x_1270 : vec4<f32> = u_xlat1;
  let x_1272 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1270.x, x_1270.y, x_1270.z), vec3<f32>(x_1272.x, x_1272.y, x_1272.z));
  let x_1278 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1278 >= 0.0f);
  let x_1280 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1280);
  let x_1283 : vec2<f32> = u_xlat18;
  let x_1285 : vec4<f32> = u_xlat3;
  let x_1287 : vec3<f32> = (vec3<f32>(x_1283.x, x_1283.x, x_1283.x) * vec3<f32>(x_1285.x, x_1285.y, x_1285.z));
  let x_1288 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1287.x, x_1287.y, x_1287.z, x_1288.w);
  let x_1290 : vec4<f32> = u_xlat3;
  let x_1293 : vec4<f32> = x_33.x_SSAOParams;
  let x_1295 : vec3<f32> = (vec3<f32>(x_1290.x, x_1290.y, x_1290.z) * vec3<f32>(x_1293.y, x_1293.y, x_1293.y));
  let x_1296 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1295.x, x_1295.y, x_1295.z, x_1296.w);
  let x_1298 : vec4<f32> = u_xlat3;
  let x_1303 : vec3<f32> = u_xlat8;
  let x_1304 : vec3<f32> = ((vec3<f32>(x_1298.x, x_1298.y, x_1298.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1303);
  let x_1305 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1304.x, x_1304.y, x_1304.z, x_1305.w);
  let x_1307 : vec4<f32> = u_xlat3;
  let x_1310 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1307.y, x_1307.y) * vec2<f32>(x_1310.x, x_1310.y));
  let x_1314 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1316 : vec4<f32> = u_xlat3;
  let x_1319 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1314.x, x_1314.y) * vec2<f32>(x_1316.x, x_1316.x)) + x_1319);
  let x_1322 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1324 : vec4<f32> = u_xlat3;
  let x_1327 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1322.x, x_1322.y) * vec2<f32>(x_1324.z, x_1324.z)) + x_1327);
  let x_1329 : vec3<f32> = u_xlat4;
  let x_1330 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1329, vec3<f32>(x_1330.x, x_1330.y, x_1330.z));
  let x_1335 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1335));
  let x_1339 : vec2<f32> = u_xlat18;
  let x_1340 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1339 * vec2<f32>(x_1340.x, x_1340.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1344 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1344 * vec2<f32>(0.5f, 0.5f));
  let x_1346 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1346, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1353 : vec2<f32> = u_xlat18;
  let x_1355 : f32 = x_33.x_GlobalMipBias.x;
  let x_1356 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1353, x_1355);
  u_xlat11.x = x_1356.x;
  let x_1361 : f32 = x_33.x_ZBufferParams.z;
  let x_1363 : f32 = u_xlat11.x;
  let x_1366 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1361 * x_1363) + x_1366);
  let x_1368 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1368);
  let x_1370 : f32 = u_xlat19;
  let x_1373 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1370) + -(x_1373));
  let x_1378 : f32 = u_xlat3.x;
  let x_1381 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1378) < x_1381);
  let x_1385 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1385);
  let x_1389 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1389);
  let x_1393 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1393);
  let x_1397 : f32 = u_xlat3.y;
  let x_1399 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1397 * x_1399);
  let x_1403 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1403) + 1.0f);
  let x_1406 : f32 = u_xlat19;
  let x_1408 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1406 * x_1408);
  let x_1412 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1414 : vec2<f32> = u_xlat18;
  let x_1418 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1420 : vec3<f32> = ((vec3<f32>(x_1412.x, x_1412.y, x_1412.z) * vec3<f32>(x_1414.x, x_1414.x, x_1414.x)) + vec3<f32>(x_1418.x, x_1418.y, x_1418.z));
  let x_1421 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1420.x, x_1420.y, x_1420.z, x_1421.w);
  let x_1424 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1426 : f32 = u_xlat26;
  let x_1429 : vec4<f32> = u_xlat5;
  let x_1431 : vec3<f32> = ((vec3<f32>(x_1424.x, x_1424.y, x_1424.z) * vec3<f32>(x_1426, x_1426, x_1426)) + vec3<f32>(x_1429.x, x_1429.y, x_1429.z));
  let x_1432 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1431.x, x_1431.y, x_1431.z, x_1432.w);
  let x_1434 : vec4<f32> = u_xlat5;
  let x_1436 : vec3<f32> = u_xlat11;
  let x_1439 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_1434.x, x_1434.y, x_1434.z) * vec3<f32>(x_1436.x, x_1436.x, x_1436.x)) + -(x_1439));
  let x_1442 : vec3<f32> = u_xlat11;
  let x_1443 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1442, vec3<f32>(x_1443.x, x_1443.y, x_1443.z));
  let x_1447 : f32 = u_xlat0;
  let x_1451 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1447) * 0.004f) + x_1451);
  let x_1455 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1455, 0.0f);
  let x_1458 : vec3<f32> = u_xlat11;
  let x_1459 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1458, x_1459);
  let x_1461 : f32 = u_xlat26;
  u_xlat26 = (x_1461 + 0.0001f);
  let x_1463 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1463);
  let x_1465 : f32 = u_xlat26;
  let x_1467 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1465 * x_1467);
  let x_1471 : f32 = u_xlat18.x;
  let x_1473 : f32 = u_xlat3.x;
  let x_1475 : f32 = u_xlat25;
  u_xlat25 = ((x_1471 * x_1473) + x_1475);
  let x_1477 : vec4<f32> = u_xlat2;
  let x_1480 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_1485 : vec2<f32> = ((vec2<f32>(x_1477.x, x_1477.y) * vec2<f32>(x_1480.x, x_1480.y)) + vec2<f32>(0.75f, 0.75f));
  let x_1486 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1485.x, x_1485.y, x_1486.z, x_1486.w);
  let x_1491 : vec4<f32> = u_xlat2;
  let x_1494 : f32 = x_33.x_GlobalMipBias.x;
  let x_1495 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1491.x, x_1491.y), x_1494);
  u_xlat2.x = x_1495.w;
  let x_1498 : vec4<f32> = u_xlat2;
  let x_1503 : vec2<f32> = (vec2<f32>(x_1498.x, x_1498.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1504 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1503.x, x_1503.y, x_1504.z, x_1504.w);
  let x_1507 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1507);
  let x_1511 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_1511 * 2.0f) + -1.0f);
  let x_1516 : f32 = u_xlat2.y;
  u_xlat2.x = (x_1516 * 628.31854248f);
  let x_1520 : f32 = u_xlat3.z;
  let x_1523 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1520) * x_1523) + 1.0f);
  let x_1528 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_1528);
  let x_1532 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_1532);
  let x_1536 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_1536);
  let x_1540 : f32 = u_xlat10.x;
  let x_1542 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1540 * x_1542);
  let x_1546 : f32 = u_xlat2.x;
  let x_1548 : f32 = u_xlat10.x;
  u_xlat3.y = (x_1546 * x_1548);
  let x_1551 : vec4<f32> = u_xlat1;
  let x_1553 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(vec3<f32>(x_1551.x, x_1551.y, x_1551.z), vec3<f32>(x_1553.x, x_1553.y, x_1553.z));
  let x_1558 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_1558 >= 0.0f);
  let x_1562 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_1562);
  let x_1565 : vec4<f32> = u_xlat2;
  let x_1567 : vec4<f32> = u_xlat3;
  let x_1569 : vec3<f32> = (vec3<f32>(x_1565.x, x_1565.x, x_1565.x) * vec3<f32>(x_1567.x, x_1567.y, x_1567.z));
  let x_1570 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1569.x, x_1569.y, x_1569.z, x_1570.w);
  let x_1572 : vec4<f32> = u_xlat2;
  let x_1575 : vec4<f32> = x_33.x_SSAOParams;
  let x_1577 : vec3<f32> = (vec3<f32>(x_1572.x, x_1572.y, x_1572.z) * vec3<f32>(x_1575.y, x_1575.y, x_1575.y));
  let x_1578 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1577.x, x_1577.y, x_1577.z, x_1578.w);
  let x_1580 : vec4<f32> = u_xlat2;
  let x_1585 : vec3<f32> = u_xlat8;
  let x_1586 : vec3<f32> = ((vec3<f32>(x_1580.x, x_1580.y, x_1580.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1585);
  let x_1587 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1586.x, x_1586.y, x_1586.z, x_1587.w);
  let x_1589 : vec4<f32> = u_xlat2;
  let x_1592 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1594 : vec2<f32> = (vec2<f32>(x_1589.y, x_1589.y) * vec2<f32>(x_1592.x, x_1592.y));
  let x_1595 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1594.x, x_1594.y, x_1595.z, x_1595.w);
  let x_1598 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1600 : vec4<f32> = u_xlat2;
  let x_1603 : vec4<f32> = u_xlat3;
  let x_1605 : vec2<f32> = ((vec2<f32>(x_1598.x, x_1598.y) * vec2<f32>(x_1600.x, x_1600.x)) + vec2<f32>(x_1603.x, x_1603.y));
  let x_1606 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1605.x, x_1605.y, x_1606.z, x_1606.w);
  let x_1609 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1611 : vec4<f32> = u_xlat2;
  let x_1614 : vec4<f32> = u_xlat3;
  let x_1616 : vec2<f32> = ((vec2<f32>(x_1609.x, x_1609.y) * vec2<f32>(x_1611.z, x_1611.z)) + vec2<f32>(x_1614.x, x_1614.y));
  let x_1617 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1616.x, x_1616.y, x_1617.z, x_1617.w);
  let x_1619 : vec3<f32> = u_xlat4;
  let x_1620 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_1619, vec3<f32>(x_1620.x, x_1620.y, x_1620.z));
  let x_1625 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_1625));
  let x_1629 : vec4<f32> = u_xlat3;
  let x_1631 : vec3<f32> = u_xlat10;
  let x_1634 : vec2<f32> = ((vec2<f32>(x_1629.x, x_1629.y) * vec2<f32>(x_1631.x, x_1631.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1635 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1634.x, x_1634.y, x_1635.z);
  let x_1637 : vec3<f32> = u_xlat10;
  let x_1639 : vec2<f32> = (vec2<f32>(x_1637.x, x_1637.y) * vec2<f32>(0.5f, 0.5f));
  let x_1640 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1639.x, x_1639.y, x_1640.z);
  let x_1642 : vec3<f32> = u_xlat10;
  let x_1646 : vec2<f32> = clamp(vec2<f32>(x_1642.x, x_1642.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1647 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1646.x, x_1646.y, x_1647.z);
  let x_1652 : vec3<f32> = u_xlat10;
  let x_1655 : f32 = x_33.x_GlobalMipBias.x;
  let x_1656 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1652.x, x_1652.y), x_1655);
  u_xlat26 = x_1656.x;
  let x_1659 : f32 = x_33.x_ZBufferParams.z;
  let x_1660 : f32 = u_xlat26;
  let x_1663 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_1659 * x_1660) + x_1663);
  let x_1667 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1667);
  let x_1671 : f32 = u_xlat2.x;
  let x_1674 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_1671) + -(x_1674));
  let x_1679 : f32 = u_xlat2.x;
  let x_1682 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_1679) < x_1682);
  let x_1685 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_1685);
  let x_1689 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_1689);
  let x_1693 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_1693);
  let x_1697 : f32 = u_xlat2.w;
  let x_1699 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1697 * x_1699);
  let x_1703 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_1703) + 1.0f);
  let x_1708 : f32 = u_xlat3.x;
  let x_1710 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_1708 * x_1710);
  let x_1713 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1715 : vec3<f32> = u_xlat10;
  let x_1719 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1721 : vec3<f32> = ((vec3<f32>(x_1713.x, x_1713.y, x_1713.z) * vec3<f32>(x_1715.x, x_1715.x, x_1715.x)) + vec3<f32>(x_1719.x, x_1719.y, x_1719.z));
  let x_1722 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1721.x, x_1721.y, x_1721.z, x_1722.w);
  let x_1725 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1727 : vec2<f32> = u_xlat18;
  let x_1730 : vec4<f32> = u_xlat3;
  let x_1732 : vec3<f32> = ((vec3<f32>(x_1725.x, x_1725.y, x_1725.z) * vec3<f32>(x_1727.x, x_1727.x, x_1727.x)) + vec3<f32>(x_1730.x, x_1730.y, x_1730.z));
  let x_1733 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1732.x, x_1732.y, x_1732.z, x_1733.w);
  let x_1735 : vec4<f32> = u_xlat3;
  let x_1737 : f32 = u_xlat26;
  let x_1740 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_1735.x, x_1735.y, x_1735.z) * vec3<f32>(x_1737, x_1737, x_1737)) + -(x_1740));
  let x_1743 : vec3<f32> = u_xlat8;
  let x_1744 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_1743, vec3<f32>(x_1744.x, x_1744.y, x_1744.z));
  let x_1748 : f32 = u_xlat0;
  let x_1752 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_1748) * 0.004f) + x_1752);
  let x_1756 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_1756, 0.0f);
  let x_1759 : vec3<f32> = u_xlat8;
  let x_1760 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_1759, x_1760);
  let x_1764 : f32 = u_xlat8.x;
  u_xlat8.x = (x_1764 + 0.0001f);
  let x_1768 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_1768);
  let x_1772 : f32 = u_xlat8.x;
  let x_1774 : f32 = u_xlat10.x;
  u_xlat8.x = (x_1772 * x_1774);
  let x_1778 : f32 = u_xlat8.x;
  let x_1780 : f32 = u_xlat2.x;
  let x_1782 : f32 = u_xlat25;
  u_xlat8.x = ((x_1778 * x_1780) + x_1782);
  let x_1786 : f32 = u_xlat8.x;
  let x_1788 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_1786 * x_1788);
  let x_1792 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_1792);
  let x_1794 : f32 = u_xlat0;
  let x_1796 : f32 = u_xlat16;
  u_xlat0 = ((-(x_1794) * x_1796) + 1.0f);
  let x_1799 : f32 = u_xlat0;
  let x_1800 : f32 = u_xlat0;
  u_xlat0 = (x_1799 * x_1800);
  let x_1803 : f32 = u_xlat8.x;
  let x_1805 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_1803 * x_1805);
  let x_1808 : f32 = u_xlat0;
  let x_1810 : f32 = u_xlat8.x;
  u_xlat0 = (x_1808 * x_1810);
  let x_1812 : f32 = u_xlat0;
  u_xlat0 = (x_1812 * 0.25f);
  let x_1814 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1814, 0.0f, 1.0f);
  let x_1816 : f32 = u_xlat0;
  u_xlat0 = log2(x_1816);
  let x_1818 : f32 = u_xlat0;
  u_xlat0 = (x_1818 * 0.600000024f);
  let x_1821 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1821);
  let x_1825 : vec4<f32> = u_xlat1;
  let x_1829 : vec3<f32> = ((vec3<f32>(x_1825.x, x_1825.y, x_1825.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1830 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1830.x, x_1829.x, x_1829.y, x_1829.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

